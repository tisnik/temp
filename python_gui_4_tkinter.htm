<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Grafické uživatelské rozhraní v Pythonu: knihovna Tkinter (3.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Grafické uživatelské rozhraní v Pythonu: knihovna Tkinter (3.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o knihovnách určených pro tvorbu GUI v Pythonu si popíšeme další grafické ovládací prvky z&nbsp;knihovny Tkinter. Bude se jednat o přepínače, seznamy, posuvníky a číselníky (spinboxy). Taktéž si ukážeme použití kontejnerů Frame a LabelFrame.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Grafické uživatelské rozhraní v&nbsp;Pythonu: knihovna Tkinter (3.část)</a></p>
<p><a href="#k02">2. Ovládací prvek <strong>Radiobutton</strong> (přepínač)</a></p>
<p><a href="#k03">3. Zarovnání přepínačů v&nbsp;mřížce</a></p>
<p><a href="#k04">4. Nastavení přepínače ve skupině, který má být implicitně vybrán</a></p>
<p><a href="#k05">5. Použití ovládacího prvku <strong>ttk.Radiobutton</strong></a></p>
<p><a href="#k06">6. Zjednodušení tvorby rozsáhlejší skupiny přepínačů</a></p>
<p><a href="#k07">7. Ovládací prvek <strong>Listbox</strong> (seznam)</a></p>
<p><a href="#k08">8. Získání aktuálně vybraného prvku ze seznamu</a></p>
<p><a href="#k09">9. Přidání posuvníku k&nbsp;seznamu</a></p>
<p><a href="#k10">10. Vzájemné provázání posuvníku a seznamu</a></p>
<p><a href="#k11">11. Ovládací prvek <strong>Spinbox</strong> (číselník) s&nbsp;výběrem numerických hodnot</a></p>
<p><a href="#k12">12. Prvek <strong>Spinbox</strong> s&nbsp;předvoleným seznamem hodnot</a></p>
<p><a href="#k13">13. Kontejnery</a></p>
<p><a href="#k14">14. Kontejner <strong>Frame</strong> (rámec)</a></p>
<p><a href="#k15">15. Kontejner <strong>LabelFrame</strong> (rámec s&nbsp;textovým popiskem)</a></p>
<p><a href="#k16">16. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k17">17. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Grafické uživatelské rozhraní v&nbsp;Pythonu: knihovna Tkinter (3.část)</h2>

<p>Na začátku dnešního článku si ve stručnosti připomeňme, které základní
grafické ovládací prvky je možné v&nbsp;knihovně Tkinter použít pro vytváření
grafického uživatelského rozhraní. Některé prvky (widgety) jsme si již popsali
v&nbsp;předchozích dvou částech tohoto seriálu; dnes se budeme věnovat prvkům
<strong>Radiobutton</strong>, <strong>Spinbox</strong> a
<strong>Listbox</strong>. Nezapomeneme ani na popisy kontejnerů
<strong>Frame</strong> a <strong>LabelFrame</strong>:</p>

<table>
<tr><th>Jméno widgetu</th><th>Význam a funkce</th></tr>
<tr><td><strong>Label</strong></td><td>widget, který zobrazuje v&nbsp;okně či dialogu měnitelný text</td></tr>
<tr><td><strong>Button</strong></td><td>graficky zobrazené tlačítko, které implicitně reaguje na levé tlačítko myši</td></tr>
<tr><td><strong>Checkbutton</strong></td><td>dvoustavový přepínač, který implicitně reaguje na levé tlačítko myši</td></tr>
<tr><td><strong>Radiobutton</strong></td><td>widget, jichž může být sdruženo větší množství, vždy pouze jeden je vybraný</td></tr>
<tr><td><strong>Scale</strong></td><td>dnes nazýván pojmem slider atd., jedná se o widget s&nbsp;posuvnou částí a přidruženým textem, kde se zobrazuje hodnota v&nbsp;závislosti na poloze posuvné části</td></tr>
<tr><td><strong>Entry</strong></td><td>widget, do kterého je možné zapisovat text, k&nbsp;tomu má přidruženo mnoho klávesových zkratek (jde o kombinaci staršího a novějšího standardu)</td></tr>
<tr><td><strong>Spinbox</strong></td><td>widget určený pro zadávání číselných hodnot kombinací klávesnice a myši (i s&nbsp;kontrolou mezí)</td></tr>
<tr><td><strong>Menu</strong></td><td>vertikální menu, které se skládá z&nbsp;více položek</td></tr>
<tr><td><strong>Menubutton</strong></td><td>používá se spolu s&nbsp;<strong>menu</strong> pro vytváření jednotlivých položek</td></tr>
<tr><td><strong>Listbox</strong></td><td>widget, jež nabízí na výběr libovolné množství řádků s&nbsp;textem</td></tr>
<tr><td><strong>Scrollbar</strong></td><td>podobné widgetu <strong>scale</strong> s&nbsp;tím rozdílem, že zobrazuje posuvné šipky a naopak nezobrazuje přidruženou číselnou hodnotu</td></tr>
<tr><td><strong>Frame</strong></td><td>jeden z&nbsp;několika nabízených kontejnerů; tento má tvar obdélníka (může být také neviditelný nebo může mít 3D rámeček)</td></tr>
<tr><td><strong>LabelFrame</strong></td><td>další kontejner, tentokrát s&nbsp;volitelným textovým popiskem</td></tr>
<tr><td><strong>Toplevel</strong></td><td>další z&nbsp;kontejnerů, tento se chová jako samostatné okno či dialog</td></tr>
<tr><td><strong>Bitmap</strong></td><td>bitmapa, tj.&nbsp;rastrový obrázek</td></tr>
<tr><td><strong>Photo/Photoimage</strong></td><td>rastrový obrázek, jež může být načten z&nbsp;externího souboru v&nbsp;mnoha různých formátech</td></tr>
<tr><td><strong>Canvas</strong></td><td>widget, na který lze programově vkládat další grafické komponenty (úsečky, oblouky, kružnice, polyčáry, text atd.)</td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Ovládací prvek <strong>Radiobutton</strong> (přepínač)</h2>

<p>Dalším velmi často používaným ovládacím prvkem (přesněji řečeno
specializovanou variantou tlačítka) je takzvaný <strong>Radiobutton</strong>
(přepínač). Tento typ widgetu se od předchozích dvou typů tlačítek
(<strong>Button</strong> a <strong>Checkbutton</strong> odlišuje především tím,
že je používán ve větších skupinách. Z&nbsp;každé skupiny přitom může být
vybrán (nastaven) pouze jeden přepínač, od čehož je ostatně odvozen původní
anglický název tohoto ovládacího prvku, protože připomíná <a
href="https://en.wikipedia.org/wiki/Radio_button#Etymology">přepínač kanálů na
starších rádiích</a>.</p>

<p>Jak se však pozná, které přepínače patří&nbsp;k&nbsp;sobě, tj.&nbsp;do jedné
skupiny? Skupina je určena jménem sledovací proměnné, která musí být pro
přepínače v&nbsp;jedné skupině stejná. Přitom je vhodné nastavit pro každý
přepínače odlišnou hodnotu, která se do zvolené proměnné uloží v&nbsp;případě
jeho výběru. Podívejme se na jednoduchý příklad s&nbsp;pěti přepínači patřícími
do stejné skupiny. Sledovací proměnná se jmenuje &bdquo;radio_var&ldquo; a její
hodnota odpovídá textu na některém z&nbsp;přepínačů (můžete si však samozřejmě
zvolit odlišné hodnoty):</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
radio_var = tkinter.StringVar()
&nbsp;
radio1 = tkinter.Radiobutton(root, variable=radio_var, value="Assembler",
                             text="Assembler")
&nbsp;
radio2 = tkinter.Radiobutton(root, variable=radio_var, value="Basic",
                             text="Basic")
&nbsp;
radio3 = tkinter.Radiobutton(root, variable=radio_var, value="Brainfuck",
                             text="Brainfuck")
&nbsp;
radio4 = tkinter.Radiobutton(root, variable=radio_var, value="C",
                             text="C")
&nbsp;
radio5 = tkinter.Radiobutton(root, variable=radio_var, value="Python",
                             text="Python")
&nbsp;
showButton = tkinter.Button(root, text="Show var",
                            command=lambda: print(radio_var.get()))
&nbsp;
quitButton = tkinter.Button(root, text="Exit", background='#ff8080',
                            command=exit)
&nbsp;
radio1.grid(column=1, row=1)
radio2.grid(column=1, row=2)
radio3.grid(column=1, row=3)
radio4.grid(column=1, row=4)
radio5.grid(column=1, row=5)
&nbsp;
showButton.grid(column=2, row=6, sticky="we", padx=6, pady=6)
quitButton.grid(column=2, row=7, sticky="we", padx=6, pady=6)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/425/tkinter3a-1.png" class="image-299121" alt="&#160;" width="189" height="214" />
<p><i>Obrázek 1: Skupina přepínačů v&nbsp;dnešním prvním demonstračním
příkladu. Povšimněte si, že přepínače nejsou zarovnány a současně se nachází ve
stavu, kdy není žádný z&nbsp;nich vybrán (tento stav je navíc matoucí kvůli
tomu, že jsou &bdquo;kuličky&ldquo; zobrazeny v&nbsp;každém přepínači).</i></p>

<img src="https://i.iinfo.cz/images/425/tkinter3a-3.png" class="image-299123" alt="&#160;" width="189" height="214" />
<p><i>Obrázek 2: Teprve po explicitním výběru přestanou být přepínače
šedivé.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zarovnání přepínačů v&nbsp;mřížce</h2>

<p>Předchozí demonstrační příklad umisťoval přepínače do mřížky ve výchozím
nastavení: vycentroval je, a to jak ve vertikálním, tak i v&nbsp;horizontálním
směru. To je samozřejmě problematické (mírně řečeno), protože každý přepínač má
jinak dlouhý text. Nicméně tento nedostatek je možné velmi snadno napravit
způsobem, který již známe. Jednoduše totiž levý okraj přepínačů
&bdquo;přilepíme&ldquo; k&nbsp;okraji mřížky:</p>

<pre>
radio1.grid(column=1, row=1, sticky="w")
radio2.grid(column=1, row=2, sticky="w")
radio3.grid(column=1, row=3, sticky="w")
radio4.grid(column=1, row=4, sticky="w")
radio5.grid(column=1, row=5, sticky="w")
</pre>

<p>Upravený příklad vypadá takto:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
radio_var = tkinter.StringVar()
&nbsp;
radio1 = tkinter.Radiobutton(root, variable=radio_var, value="Assembler",
                             text="Assembler")
&nbsp;
radio2 = tkinter.Radiobutton(root, variable=radio_var, value="Basic",
                             text="Basic")
&nbsp;
radio3 = tkinter.Radiobutton(root, variable=radio_var, value="Brainfuck",
                             text="Brainfuck")
&nbsp;
radio4 = tkinter.Radiobutton(root, variable=radio_var, value="C",
                             text="C")
&nbsp;
radio5 = tkinter.Radiobutton(root, variable=radio_var, value="Python",
                             text="Python")
&nbsp;
showButton = tkinter.Button(root, text="Show var",
                            command=lambda: print(radio_var.get()))
&nbsp;
quitButton = tkinter.Button(root, text="Exit", background='#ff8080',
                            command=exit)
&nbsp;
radio1.grid(column=1, row=1, sticky="w")
radio2.grid(column=1, row=2, sticky="w")
radio3.grid(column=1, row=3, sticky="w")
radio4.grid(column=1, row=4, sticky="w")
radio5.grid(column=1, row=5, sticky="w")
&nbsp;
showButton.grid(column=2, row=6, sticky="we", padx=6, pady=6)
quitButton.grid(column=2, row=7, sticky="we", padx=6, pady=6)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/425/tkinter3a-4.png" class="image-299124" alt="&#160;" width="189" height="214" />
<p><i>Obrázek 3: Přepínače jsou nyní zarovnány na levý okraj buněk
mřížky.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Nastavení přepínače ve skupině, který má být implicitně vybrán</h2>

<p>Přepínače již tedy máme zarovnané, nicméně chování aplikace je stále
&bdquo;suboptimální&ldquo; (korporátní eufemismus), protože při prvním
zobrazení dialogu není žádný přepínač vybrán. Implicitně vybraný přepínač se
nenastavuje žádnou jeho vlastností (checked=True atd.), ale uložením vhodné
hodnoty do sledovací proměnné. Pokud uložená hodnota odpovídá hodnotě
specifikované u přepínače, bude tento vybrán. Pokud bude mít více přepínačů
stejnou hodnotu, budou vybrány všechny takové přepínače (což uživatele dokonale
zmate):</p>

<img src="https://i.iinfo.cz/images/433/tkinter3c-1.png" class="image-299140" alt="&#160;" width="189" height="214" />
<p><i>Obrázek 4: Pokud chcete uživatele zmást, můžete více přepínačům přiřadit
stejnou hodnotu.</i></p>

<p>Upravme si náš demonstrační příklad takovým způsobem, aby byl implicitně
vybrán programovací jazyk C:</p>

<pre>
radio_var = tkinter.StringVar()
&nbsp;
radio_var.set("C")
</pre>

<p>Upravený příklad vypadá takto:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
radio_var = tkinter.StringVar()
&nbsp;
radio_var.set("C")
&nbsp;
radio1 = tkinter.Radiobutton(root, variable=radio_var, value="Assembler",
                             text="Assembler")
&nbsp;
radio2 = tkinter.Radiobutton(root, variable=radio_var, value="Basic",
                             text="Basic")
&nbsp;
radio3 = tkinter.Radiobutton(root, variable=radio_var, value="Brainfuck",
                             text="Brainfuck")
&nbsp;
radio4 = tkinter.Radiobutton(root, variable=radio_var, value="C",
                             text="C")
&nbsp;
radio5 = tkinter.Radiobutton(root, variable=radio_var, value="Python",
                             text="Python")
&nbsp;
showButton = tkinter.Button(root, text="Show var",
                            command=lambda: print(radio_var.get()))
&nbsp;
quitButton = tkinter.Button(root, text="Exit", background='#ff8080',
                            command=exit)
&nbsp;
radio1.grid(column=1, row=1, sticky="w")
radio2.grid(column=1, row=2, sticky="w")
radio3.grid(column=1, row=3, sticky="w")
radio4.grid(column=1, row=4, sticky="w")
radio5.grid(column=1, row=5, sticky="w")
&nbsp;
showButton.grid(column=2, row=6, sticky="we", padx=6, pady=6)
quitButton.grid(column=2, row=7, sticky="we", padx=6, pady=6)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/425/tkinter3a-5.png" class="image-299125" alt="&#160;" width="189" height="214" />
<p><i>Obrázek 5: Přepínače jsou nyní zarovnány na levý okraj buněk mřížky a
jeden z&nbsp;nich je implicitně vybrán.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití ovládacího prvku <strong>ttk.Radiobutton</strong></h2>

<p>Namísto přepínače <strong>Radiobutton</strong> z&nbsp;knihovny Tkinter
samozřejmě můžeme použít stejně pojmenovaný řídicí prvek, tentokrát nabízený
nadstavbovou knihovnou Ttk. Samotný zdrojový kód se v&nbsp;tomto případě změní
jen nepatrně, ovšem výhodou je, že bude možné použít styly napodobující nativní
ovládací prvky:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
style.theme_use("alt")
style.configure('Red.TButton', background='#ff8080')
&nbsp;
radio_var = tkinter.StringVar()
radio_var.set("Python")
&nbsp;
radio1 = ttk.Radiobutton(root, variable=radio_var, value="Assembler",
                         text="Assembler")
&nbsp;
radio2 = ttk.Radiobutton(root, variable=radio_var, value="Basic",
                         text="Basic")
&nbsp;
radio3 = ttk.Radiobutton(root, variable=radio_var, value="Brainfuck",
                         text="Brainfuck")
&nbsp;
radio4 = ttk.Radiobutton(root, variable=radio_var, value="C",
                         text="C")
&nbsp;
radio5 = ttk.Radiobutton(root, variable=radio_var, value="Python",
                         text="Python")
&nbsp;
showButton = ttk.Button(root, text="Show var",
                        command=lambda: print(radio_var.get()))
&nbsp;
quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
radio1.grid(column=1, row=1, sticky="w")
radio2.grid(column=1, row=2, sticky="w")
radio3.grid(column=1, row=3, sticky="w")
radio4.grid(column=1, row=4, sticky="w")
radio5.grid(column=1, row=5, sticky="w")
&nbsp;
showButton.grid(column=2, row=6, sticky="we", padx=6, pady=6)
quitButton.grid(column=2, row=7, sticky="we", padx=6, pady=6)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/425/tkinter3a-6.png" class="image-299126" alt="&#160;" width="189" height="214" />
<p><i>Obrázek 6: Použití ovládacích prvků ttk.Radiobutton.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zjednodušení tvorby rozsáhlejší skupiny přepínačů</h2>

<p>U rozsáhlejší skupiny přepínačů je většinou zbytečné pro každý přepínač
implicitně vytvářet novou proměnnou, přidávat přepínač do mřížky atd. Práci si
můžeme zjednodušit například tak, že použijeme takové hodnoty přepínačů, které
přímo odpovídají jejich textovým popiskům:</p>

<pre>
langs = ("Assembler", "Basic", "Brainfuck", "C", "Python")
</pre>

<p>Přepínače následně vytvoříme v&nbsp;jediné smyčce (konkrétně je použita
generátorová notace sekvence):</p>

<pre>
radio_buttons = (ttk.Radiobutton(root, text=lang, value=lang,
                                 variable=radio_var)
                 for lang in langs)
</pre>

<p>Přepínače následně vložíme do mřížky, samozřejmě s&nbsp;korektním
zarovnáním:</p>

<pre>
for i, radio_button in enumerate(radio_buttons):
    radio_button.grid(column=1, row=i, sticky="w")
</pre>

<p>Celý zdrojový příklad může vypadat následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
style.theme_use("alt")
style.configure('Red.TButton', background='#ff8080')
&nbsp;
radio_var = tkinter.StringVar()
radio_var.set("Python")
&nbsp;
langs = ("Assembler", "Basic", "Brainfuck", "C", "Python")
&nbsp;
radio_buttons = (ttk.Radiobutton(root, text=lang, value=lang,
                                 variable=radio_var)
                 for lang in langs)
&nbsp;
showButton = ttk.Button(root, text="Show var",
                        command=lambda: print(radio_var.get()))
&nbsp;
quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
for i, radio_button in enumerate(radio_buttons):
    radio_button.grid(column=1, row=i, sticky="w")
&nbsp;
showButton.grid(column=2, row=6, sticky="we", padx=6, pady=6)
quitButton.grid(column=2, row=7, sticky="we", padx=6, pady=6)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/425/tkinter3a-7.png" class="image-299127" alt="&#160;" width="198" height="208" />
<p><i>Obrázek 7: Dialog vytvořený předchozím příkladem.</i></p>

<p>Jde to však provést ještě jednodušeji, a to tehdy, pokud nahradíme grid
manažer za pack manažer, neboť u něj nebude zapotřebí specifikovat indexy buněk
v&nbsp;mřížce:</p>

<pre>
for radio_button in radio_buttons:
    radio_button.pack(fill="x")
</pre>

<p>Opět se podívejme na úplný příklad:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
style.theme_use("alt")
style.configure('Red.TButton', background='#ff8080')
&nbsp;
radio_var = tkinter.StringVar()
radio_var.set("Python")
&nbsp;
langs = ("Assembler", "Basic", "Brainfuck", "C", "Python")
&nbsp;
radio_buttons = (ttk.Radiobutton(root, text=lang, value=lang,
                                 variable=radio_var)
                 for lang in langs)
&nbsp;
showButton = ttk.Button(root, text="Show var",
                        command=lambda: print(radio_var.get()))
&nbsp;
quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
for radio_button in radio_buttons:
    radio_button.pack(fill="x")
&nbsp;
showButton.pack()
quitButton.pack()
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/425/tkinter3a-9.png" class="image-299129" alt="&#160;" width="101" height="185" />
<p><i>Obrázek 8: Dialog vytvořený předchozím příkladem.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Ovládací prvek <strong>Listbox</strong> (seznam)</h2>

<p>Při výběru z&nbsp;většího množství položek se stává použití přepínačů
(<strong>Radiobutton</strong>) neefektivní a většinou se namísto nich využívá
další ovládací prvek nazvaný jednoduše <strong>Listbox</strong> neboli seznam
(což je ovšem v&nbsp;kontextu programovacího jazyka Python poněkud matoucí
název). Tento ovládací prvek umožňuje, aby uživatel vybral jednu či několik
položek z&nbsp;prakticky libovolně dlouhého seznamu řetězců. Vzhledem
k&nbsp;tomu, že seznam/listbox je jediným prvkem obsahujícím větší množství
hodnot, pracuje se s&nbsp;ním dosti odlišným způsobem, než tomu bylo u
přepínačů. Nejprve si ukažme, jakým způsobem se <strong>Listbox</strong>
vytváří a jak se do něj vkládají jednotlivé řetězce (položky):</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
langs = ("Assembler", "Basic", "Brainfuck", "C", "Python")
&nbsp;
listbox = tkinter.Listbox(root)
&nbsp;
&nbsp;
for lang in langs:
    listbox.insert(tkinter.END, lang)
&nbsp;
&nbsp;
quitButton = ttk.Button(root, text="Exit", command=exit)
&nbsp;
listbox.pack()
quitButton.pack()
&nbsp;
root.mainloop()
</pre>

<p>Z&nbsp;předchozího demonstračního příkladu je patrné, jakým způsobem se
s&nbsp;využitím metody <strong>listbox.insert</strong> do seznamu vkládají
jednotlivé položky: jednoduše se zadá pozice vkládané položky a potom text,
který se má zobrazit. Pozice může být zadána buď absolutně indexem (celé
číslo), nebo je možné použít konstantu <strong>END</strong>, která zabezpečí
vložení položky na konec seznamu (resp.&nbsp;zcela přesně řečeno
<strong>za</strong> aktuální konec seznamu). Kromě metody
<strong>insert</strong> je ovšem možné použít i další metody určené pro
manipulaci s&nbsp;položkami, například <strong>get</strong> (získání textové
podoby), <strong>delete</strong> (vymazání položky), <strong>index</strong>,
<strong>scan</strong> atd. Také stojí za povšimnutí, že položky se do seznamu
mohou vkládat až po jeho zobrazení bez nutnosti explicitně zavolat nějakou
překreslovací rutinu.</p>

<img src="https://i.iinfo.cz/images/574/tkinter3b-1.png" class="image-299130" alt="&#160;" width="166" height="217" />
<p><i>Obrázek 9: Jednoduchý výběrový seznam.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Získání aktuálně vybraného prvku ze seznamu</h2>

<p>Při práci se seznamem poprvé narazíme na menší problém: jakým způsobem je
vlastně možné reagovat na změnu výběru? K&nbsp;dispozici totiž nemáme ani volbu
<strong>variable</strong> ani volbu <strong>command</strong>. Řešení spočívá
v&nbsp;programovém navázání (bind) procedury na nějaký ovládací prvek.
Procedura je zavolána v&nbsp;případě, že na widgetu došlo k&nbsp;nějaké
události, typicky při interakci uživatele s&nbsp;widgetem. Pro navázání
procedury se používá metoda <strong>bind</strong>. Této metodě se předává typ
události, který je, podobně jako v&nbsp;konfiguračních souborech Motifu,
uzavřen do lomených závorek. Za specifikací typu události se nachází příkaz
(typicky jméno funkce či anonymní funkce), který se provede v&nbsp;případě, že
daná událost skutečně nastane:</p>

<pre>
listbox.bind("&lt;&lt;ListboxSelect&gt;&gt;", on_listbox_select)
</pre>

<p>Předchozí příklad je možné upravit tak, že po každé změně výběru ze seznamu
(pomocí myši) se zavolá funkce nazvaná <strong>on_listbox_select</strong>,
která vypíše text právě vybrané položky. K&nbsp;tomu využijeme metodu pro
získání pozice aktivní položky (<strong>curselection</strong>). Ve skutečnosti
však metoda <strong>curselection</strong> vrací sekvenci indexů, protože
samotný seznam je možné volbou <strong>selectmode=EXTENDED</strong> přepnout do
režimu výběru většího množství položek. V&nbsp;našem případě stačí ze sekvence
získat první prvek, protože ve výchozím nastavení je možé ze seznamu vybrat
jedinou položku:</p>

<pre>
def on_listbox_select(event):
    index = listbox.curselection()[0]
    global langs
    print(langs[index])
</pre>

<p>Úplný zdrojový kód takto upraveného příkladu bude vypadat následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
langs = ("Assembler", "Basic", "Brainfuck", "C", "Python")
&nbsp;
listbox = tkinter.Listbox(root)
&nbsp;
&nbsp;
for lang in langs:
    listbox.insert(tkinter.END, lang)
&nbsp;
&nbsp;
def on_listbox_select(event):
    index = listbox.curselection()[0]
    global langs
    print(langs[index])
&nbsp;
&nbsp;
listbox.bind("&lt;&lt;ListboxSelect&gt;&gt;", on_listbox_select)
&nbsp;
quitButton = ttk.Button(root, text="Exit", command=exit)
&nbsp;
listbox.pack()
quitButton.pack()
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/574/tkinter3b-2.png" class="image-299131" alt="&#160;" width="166" height="217" />
<p><i>Obrázek 10: Tento příklad se vizuálně nijak neliší od příkladu předchozího.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přidání posuvníku k&nbsp;seznamu</h2>

<p>Delší seznamy se prakticky nikdy nezobrazují v&nbsp;oknech a dialozích celé.
Většinou se spokojíme jen se zobrazením několika položek přičemž další položky
budou dostupné po posunu obsahu seznamu. V&nbsp;takových případech většinou
budeme vyžadovat, aby se vedle seznamu zobrazil i posuvník (<i>scrollbar</i>),
který bude se seznamem provázán. V&nbsp;dalším příkladu si napřed ukážeme pouze
vytvoření a zobrazení posuvníku, jeho provázání bude předmětem navazující
kapitoly.</p>

<p>Při vytváření seznamu můžeme omezit jeho výšku (počet zobrazených prvků):</p>

<pre>
listbox = tkinter.Listbox(root, <strong>height=4</strong>)
</pre>

<p>Následně vytvoříme nový GUI prvek typu <strong>Scrollbar</strong>:</p>

<pre>
scrollbar = tkinter.Scrollbar(root)
</pre>

<p>Jak seznam, tak i scrollbar přidáme na hlavní okno. Povšimněte si, že seznam
je &bdquo;nalepen&ldquo; ke všem čtyřem okrajům mřížky, zatímco u scrollbaru
požadujeme jeho &bdquo;nalepení&ldquo; k&nbsp;horní a dolní straně (scrollbar
tedy bude stejně vysoký, jako seznam):</p>

<pre>
listbox.grid(column=1, row=1, sticky="nswe")
scrollbar.grid(column=2, row=1, sticky="ns")
quitButton.grid(column=1, row=2)
</pre>

<img src="https://i.iinfo.cz/images/574/tkinter3b-3.png" class="image-299132" alt="&#160;" width="179" height="121" />
<p><i>Obrázek 11: Scrollbar, který však není navázaný na seznam.</i></p>

<p>Úplný zdrojový kód takto upraveného příkladu bude vypadat následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
scrollbar = tkinter.Scrollbar(root)
&nbsp;
langs = ("Assembler", "Basic", "Brainfuck", "C", "C++", "Java", "Julia",
         "Perl", "Python")
&nbsp;
listbox = tkinter.Listbox(root, height=4)
&nbsp;
&nbsp;
for lang in langs:
    listbox.insert(tkinter.END, lang)
&nbsp;
&nbsp;
def on_listbox_select(event):
    index = listbox.curselection()[0]
    global langs
    print(langs[index])
&nbsp;
&nbsp;
listbox.bind("&lt;&lt;ListboxSelect&gt;&gt;", on_listbox_select)
&nbsp;
quitButton = ttk.Button(root, text="Exit", command=exit)
&nbsp;
listbox.grid(column=1, row=1, sticky="nswe")
scrollbar.grid(column=2, row=1, sticky="ns")
quitButton.grid(column=1, row=2)
&nbsp;
root.mainloop()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vzájemné provázání posuvníku a seznamu</h2>

<p>Scrollbar (posuvník) je nutné se seznamem provázat. Nejprve scrollbar
vytvoříme:</p>

<pre>
scrollbar = ttk.Scrollbar(root)
</pre>

<p>Pro zcela korektní použití <strong>Scrollbaru</strong> by bylo vhodné
nastavit zpětnou vazbu při změně vybrané položky v&nbsp;seznamu tak, aby se
upravila i poloha posuvníku na scrollbaru. To zajistí řádek:</p>

<pre>
listbox = tkinter.Listbox(root, <strong>yscrollcommand=scrollbar.set</strong>, height=4)
</pre>

<p>Nyní již máme k&nbsp;dispozici oba GUI objekty &ndash;
<strong>listbox</strong> i <strong>scrollbar</strong>, takže můžeme určit, jaký
příkaz se provede ve chvíli, kdy se změní pozice scrollbaru (typicky myší).
Jediné co musíme provést, je specifikace metody <strong>listbox.yview</strong>,
která se automaticky zavolá a předá se jí nový index v&nbsp;seznamu, který má
být viditelný:</p>

<pre>
scrollbar.config(<strong>command=listbox.yview</strong>)
</pre>

<p>Poznámka: samozřejmě je možné pojmenovaný parametr <strong>command=</strong>
specifikovat již při vytváření scrollbaru, ovšem v&nbsp;té chvíli ještě
neexistuje objekt se seznamem. Pokud by existovat, nebylo by naopak možné při
jeho konstrukci použít parametr <strong>yscrollcommand=scrollbar.set</strong>,
takže se zde jedná o problém slepice-vejce :-)</p>

<img src="https://i.iinfo.cz/images/574/tkinter3b-4.png" class="image-299133" alt="&#160;" width="181" height="121" />
<p><i>Obrázek 12: Scrollbar, který je navázaný na seznam.</i></p>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
scrollbar = ttk.Scrollbar(root)
&nbsp;
langs = ("Assembler", "Basic", "Brainfuck", "C", "C++", "Java", "Julia",
         "Perl", "Python")
&nbsp;
listbox = tkinter.Listbox(root, yscrollcommand=scrollbar.set, height=4)
&nbsp;
scrollbar.config(command=listbox.yview)
&nbsp;
&nbsp;
for lang in langs:
    listbox.insert(tkinter.END, lang)
&nbsp;
&nbsp;
def on_listbox_select(event):
    index = listbox.curselection()[0]
    global langs
    print(langs[index])
&nbsp;
&nbsp;
listbox.bind("&lt;&lt;ListboxSelect&gt;&gt;", on_listbox_select)
&nbsp;
quitButton = ttk.Button(root, text="Exit", command=exit)
&nbsp;
listbox.grid(column=1, row=1, sticky="nswe")
scrollbar.grid(column=2, row=1, sticky="ns")
quitButton.grid(column=1, row=2)
&nbsp;
root.mainloop()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Ovládací prvek <strong>Spinbox</strong> (číselník) s&nbsp;výběrem numerických hodnot</h2>

<p>Ovládací prvek nazvaný <strong>Spinbox</strong> (možno volně přeložit jako
číselník) je směsicí widgetu <strong>Entry</strong> a
<strong>Scrollbaru</strong>. Uživatel totiž může do tohoto widgetu zadávat
čísla z&nbsp;předem známého intervalu, zvyšování a snižování číselné hodnoty
zabezpečí zobrazené šipky (můžeme se přít o to, zda je takový způsob zadávání
hodnot efektivní, uživatelé ho však &ndash; zdá se &ndash; preferují). Tento
interval se většinou zadává již při vytváření widgetu s&nbsp;využitím voleb
<strong>from_</strong> a <strong>to</strong>. Kromě toho je ještě možné volbou
<strong>textvariable</strong> specifikovat název proměnné, která bude sledovat
právě zadanou hodnotu. Použití <strong>Spinboxu</strong> je ukázáno na
následujícím jednoduchém příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
number = tkinter.IntVar()
&nbsp;
spinbox = tkinter.Spinbox(root, from_=100, to=120, width=10,
                          textvariable=number)
&nbsp;
showButton = ttk.Button(root, text="Show var",
                        command=lambda: print(number.get()))
&nbsp;
quitButton = ttk.Button(root, text="Exit", command=exit)
&nbsp;
spinbox.grid(column=1, row=1)
showButton.grid(column=1, row=2)
quitButton.grid(column=2, row=2)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/574/tkinter3b-5.png" class="image-299134" alt="&#160;" width="183" height="75" />
<p><i>Obrázek 14: Spinbox použitý pro výběr celého čísla.</i></p>

<p>Poznámka: pozor si musíme dát zejména na volbu <strong>from_</strong>, která
skutečně obsahuje podtržítko. To je v&nbsp;kontrastu s&nbsp;původní knihovnou
Tk (pro jazyk Tcl), kde se tato volba jmenovala <strong>from</strong>; nicméně
pro Tkinter muselo dojít k&nbsp;úpravě, neboť <strong>from</strong> je
v&nbsp;Pythonu <a
href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">rezervovaným
klíčovým slovem</a>.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Prvek <strong>Spinbox</strong> s&nbsp;předvoleným seznamem hodnot</h2>

<p>Ve skutečnosti se však číselník nemusí používat pouze pro výběr celých čísel
ze zadaného intervalu. Pokud totiž s&nbsp;využitím volby
<strong>values</strong> předáme při konstrukci číselníku n-tici s&nbsp;řetězci,
bude možné provádět výběr libovolného řetězce z&nbsp;této n-tice. V&nbsp;dalším
příkladu je navíc ukázáno použití volby <strong>wrap</strong>, kterou se
specifikuje, zda se výběr položek prováděný v&nbsp;jednom směru zastaví na
první/poslední položce či nikoli:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
selected_lang = tkinter.StringVar()
&nbsp;
langs = ("Assembler", "Basic", "Brainfuck", "C", "C++", "Java", "Julia",
         "Perl", "Python")
&nbsp;
spinbox = tkinter.Spinbox(root, values=langs, width=10,
                          textvariable=selected_lang, wrap=True)
&nbsp;
showButton = ttk.Button(root, text="Show var",
                        command=lambda: print(selected_lang.get()))
&nbsp;
quitButton = ttk.Button(root, text="Exit", command=exit)
&nbsp;
spinbox.grid(column=1, row=1)
showButton.grid(column=1, row=2)
quitButton.grid(column=2, row=2)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/574/tkinter3b-6.png" class="image-299135" alt="&#160;" width="183" height="74" />
<p><i>Obrázek 15: Spinbox použitý pro výběr explicitně zapsaných prvků.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Kontejnery</h2>

<p>Prozatím jsme ovládací prvky vkládali přímo na plochu okna, konkrétně do
hlavního a jediného okna aplikace. To nemusí být u rozsáhlejších formulářů a
dialogů ta nejlepší volba, protože takové okno nebude mít prvky uspořádané
hierarchicky. Ovšem knihovna Tkinter podporuje použití speciálních komponent
nazvaných <i>kontejnery</i>. Jedná se o komponenty, na které je možné vkládat
různé widget a další kontejnery. Obecně tak interně vzniká stromová datová
struktura. V&nbsp;knihovně Tkinter patří mezi kontejnery především prvky
nazvané <strong>Frame</strong> a <strong>LabelFrame</strong>. Ukažme si použití
prvku <strong>LabelFrame</strong> při tvorbě dialogu, v&nbsp;němž budou
v&nbsp;levé straně sdruženy přepínače (<strong>Radiobutton </strong>) a na
straně druhé pak běžná tlačítka (<strong>Button</strong>).</p>

<p>Vytvoření hlavního okna nazvaného <strong>root</strong>, neboť
v&nbsp;hierarchii leží v&nbsp;kořenu stromu:</p>

<pre>
root = tkinter.Tk()
</pre>

<p>Vytvoření dvou kontejnerů <strong>LabelFrame</strong>. Tyto kontejnery budou
v&nbsp;hierarchii grafických objektů ležet přímo v&nbsp;hlavním okně (viz první
parametr):</p>

<pre>
f1 = ttk.LabelFrame(<strong>root</strong>, text="Languages")
f2 = ttk.LabelFrame(<strong>root</strong>, text="Commands")
</pre>

<p>Vytvoření sady přepínačů, které budou umístěny do prvního kontejneru (viz
první parametr):</p>

<pre>
radio_buttons = (ttk.Radiobutton(<strong>f1</strong>, text=lang, value=lang,
                                 variable=radio_var)
                 for lang in langs)
</pre>

<p>Vytvoření dvou běžných tlačítek umístěných do kontejneru druhého:</p>

<pre>
showButton = ttk.Button(<strong>f2</strong>, text="Show var",
                        command=lambda: print(radio_var.get()))
&nbsp;
quitButton = ttk.Button(<strong>f2</strong>, text="Exit", style='Red.TButton',
                        command=exit)
</pre>

<p>Přidání kontejnerů do okna:</p>

<pre>
f1.grid(column=1, row=1, sticky="ne", padx=6, pady=6)
f2.grid(column=2, row=1, sticky="ne", padx=6, pady=6)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Kontejner <strong>Frame</strong> (rámec)</h2>

<p>Základní typ kontejneru se jmenuje <strong>Frame</strong> a používá se velmi
jednoduše postupem, který jsme si naznačili <a href="#k13">v&nbsp;předchozí
kapitole</a>. U tohoto kontejneru není zapotřebí zadávat žádný styl
vykreslování:</p>

<img src="https://i.iinfo.cz/images/574/tkinter3b-7.png" class="image-299136" alt="&#160;" width="222" height="145" />
<p><i>Obrázek 16: Použití kontejneru Frame (samotný kontejner je implicitně
neviditelný).</i></p>

<p>Příklad použití:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
style.theme_use("alt")
style.configure('Red.TButton', background='#ff8080')
&nbsp;
radio_var = tkinter.StringVar()
radio_var.set("Python")
&nbsp;
langs = ("Assembler", "Basic", "Brainfuck", "C", "Python")
&nbsp;
f1 = ttk.Frame(root)
f2 = ttk.Frame(root)
&nbsp;
radio_buttons = (ttk.Radiobutton(f1, text=lang, value=lang,
                                 variable=radio_var)
                 for lang in langs)
&nbsp;
showButton = ttk.Button(f2, text="Show var",
                        command=lambda: print(radio_var.get()))
&nbsp;
quitButton = ttk.Button(f2, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
for i, radio_button in enumerate(radio_buttons):
    radio_button.grid(column=1, row=i, sticky="w")
&nbsp;
showButton.grid(column=1, row=1, sticky="we", padx=6, pady=6)
quitButton.grid(column=1, row=2, sticky="we", padx=6, pady=6)
&nbsp;
f1.grid(column=1, row=1, sticky="ne", padx=6, pady=6)
f2.grid(column=2, row=1, sticky="ne", padx=6, pady=6)
&nbsp;
root.mainloop()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Kontejner <strong>LabelFrame</strong> (rámec s&nbsp;textovým popiskem)</h2>

<p>Ovládací prvek nazvaný <strong>LabelFrame</strong> slouží ve většině případů
jako kontejner, do něhož se ukládají další ovládací prvky. Rozdíl oproti
podobnému ovládacímu prvku <strong>Frame</strong> popsanému <a
href="#k14">v&nbsp;předchozí kapitole</a> spočívá především v&nbsp;tom, že zde
může být specifikovaný i nápis, který se zobrazí v&nbsp;levém horním rohu
widgetu. Podobně jako u tlačítek, je možné i u kontejnerů
<strong>Frame</strong> a <strong>LabelFrame</strong> zvolit jejich velikost i
to, jakým způsobem se zvýrazní jejich trojrozměrný okraj. V&nbsp;následujícím
demonstračním příkladu prozatím použijeme implicitní způsob zobrazení:</p>

<img src="https://i.iinfo.cz/images/574/tkinter3b-8.png" class="image-299137" alt="&#160;" width="230" height="164" />
<p><i>Obrázek 17: Použití kontejneru LabelFrame.</i></p>

<p>Úplný zdrojový kód příkladu, v&nbsp;němž se používají kontejnery
<strong>LabelFrame</strong>, vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
style.theme_use("alt")
style.configure('Red.TButton', background='#ff8080')
&nbsp;
radio_var = tkinter.StringVar()
radio_var.set("Python")
&nbsp;
langs = ("Assembler", "Basic", "Brainfuck", "C", "Python")
&nbsp;
f1 = ttk.LabelFrame(root, text="Languages")
f2 = ttk.LabelFrame(root, text="Commands")
&nbsp;
radio_buttons = (ttk.Radiobutton(f1, text=lang, value=lang,
                                 variable=radio_var)
                 for lang in langs)
&nbsp;
showButton = ttk.Button(f2, text="Show var",
                        command=lambda: print(radio_var.get()))
&nbsp;
quitButton = ttk.Button(f2, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
for i, radio_button in enumerate(radio_buttons):
    radio_button.grid(column=1, row=i, sticky="w")
&nbsp;
showButton.grid(column=1, row=1, sticky="we", padx=6, pady=6)
quitButton.grid(column=1, row=2, sticky="we", padx=6, pady=6)
&nbsp;
f1.grid(column=1, row=1, sticky="ne", padx=6, pady=6)
f2.grid(column=2, row=1, sticky="ne", padx=6, pady=6)
&nbsp;
root.mainloop()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnešních demonstračních příkladů naleznete pod
následujícími odkazy:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>31_radio_button.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/31_radio_button.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/31_radio_button.py</a></td></tr>
<tr><td>31_radio_button.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/31_radio_button.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/31_radio_button.py</a></td></tr>
<tr><td>32_radio_button_align.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/32_radio_button_align.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/32_radio_button_align.py</a></td></tr>
<tr><td>33_radio_button_default_value.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/33_radio_button_default_value.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/33_radio_button_default_value.py</a></td></tr>
<tr><td>34_ttk_radio_button.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/34_ttk_radio_button.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/34_ttk_radio_button.py</a></td></tr>
<tr><td>35_ttk_button_groups.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/35_ttk_button_groups.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/35_ttk_button_groups.py</a></td></tr>
<tr><td>36_ttk_button_pack.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/36_ttk_button_pack.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/36_ttk_button_pack.py</a></td></tr>
<tr><td>37_listbox.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/37_listbox.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/37_listbox.py</a></td></tr>
<tr><td>38_listbox_bind.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/38_listbox_bind.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/38_listbox_bind.py</a></td></tr>
<tr><td>39_listbox_scroll.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/39_listbox_scroll.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/39_listbox_scroll.py</a></td></tr>
<tr><td>40_listbox_scroll_linked.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/40_listbox_scroll_linked.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/40_listbox_scroll_linked.py</a></td></tr>
<tr><td>41_spinbox.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/41_spinbox.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/41_spinbox.py</a></td></tr>
<tr><td>42_spinbox_values.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/42_spinbox_values.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/42_spinbox_values.py</a></td></tr>
<tr><td>43_frame.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/43_frame.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/43_frame.py</a></td></tr>
<tr><td>44_labelframe.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/44_labelframe.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/44_labelframe.py</a></td></tr>
</table>



<p><a name="k17"></a></p>
<h2 id="k17">17. Odkazy na Internetu</h2>

<ol>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

