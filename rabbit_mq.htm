<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. RabbitMQ &ndash; jedna z&nbsp;nejúspěšnějších implementací brokera</a></p>
<p><a href="#k02">*** 2. Rozhraní mezi RabbitMQ a programovacími jazyky</a></p>
<p><a href="#k03">*** 3. Protokoly podporované systémem RabbitMQ</a></p>
<p><a href="#k03">*** 3. Ukázky základních způsobů použití nástroje RabbitMQ</a></p>
<p><a href="#k04">*** 4. Směrování zpráv před jejich vložením do fronty</a></p>
<p><a href="#k04">*** 4. Instalace RabbitMQ a konfigurace jeho síťového rozhraní</a></p>
<p><a href="#k05">*** 5. Spuštění serveru</a></p>
<p><a href="#k06">*** 6. Instalace knihovny Pika s&nbsp;rozhraním mezi RabbitMQ a Pythonem</a></p>
<p><a href="#k07">*** 7. První příklad: nejjednodušší možná implementace systému producent+spotřebitel</a></p>
<p><a href="#k08">*** 8. Přenos společných prvků producenta a spotřebitele do jednoho zdrojového kódu</a></p>
<p><a href="#k09">*** 9. Pomalá práce spotřebitele a způsob dělby práce mezi větší množství workerů</a></p>
<p><a href="#k10">*** 10. Potvrzování zpracování zprávy, chování systému ve chvíli, kdy zpráva není zpracována</a></p>
<p><a href="#k11">*** 11. Vylepšené chování RabbitMQ při &bdquo;dělbě práce&ldquo; mezi workery</a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. RabbitMQ &ndash; jedna z&nbsp;nejúspěšnějších implementací brokera</h2>

<p>Třetím nástrojem implementujícím fronty zpráv a popř.&nbsp;i asynchronní fronty úloh s&nbsp;nímž se na stránkách Rootu seznámíme, je nástroj nazvaný <i>RabbitMQ</i>. Původně se jednalo o klasický message broker (de facto implementaci fronty zpráv) a taktéž o jednu z&nbsp;implementací protokolu AMQP (<i>Advanced Message Queuing Protocol</i>), ovšem později byly možnosti RabbitMQ rozšířeny, takže dnes je podporován i MQTT (<i>Message Queuing Telemetry Transport</i>, mimochodem se jedná o standard ISO) a STOMP neboli <i>Streaming Text Oriented Messaging Protocol</i>. RabbitMQ je poměrně široce konfigurovatelný a flexibilní, což administrátorům umožňuje zvolit si takové vlastnosti, které nejlépe vyhovují potřebám implementované služby. Například je možné RabbitMQ nastavit do režimu s&nbsp;velkou propustností, ovšem bez mechanismů pro persistenci zpráv, nebo naopak do režimu, v&nbsp;němž zprávy přežijí restart jak workerů, tak i samotného serveru Rabbitu (dokonce lze zaručit vysokou dostupnost samotných front).</p>

<p>Na systému RabbitMQ je zajímavý i fakt, že je vyvinut v&nbsp;programovacím jazyce <a href="http://www.erlang.org/">Erlang</a> s&nbsp;využitím sady knihoven a nástrojů Open Telecom Platform (OTP). Volba tohoto programovacího jazyka pro systém zajišťující kooperaci mezi velkým množstvím procesů a služeb je velmi dobrá, protože tento jazyk byl navržen právě s&nbsp;ohledem na tvorbu distribuovaných aplikací do značné míry odolných proti selhání.</p>

<p><div class="rs-tip-major">Poznámka: nemusíte se bát, že by RabbitMQ byl kvůli tomu, že je naprogramován v&nbsp;Erlangu, hodně náročný na systémové zdroje. Sice je pravda, že se společně se serverem RabbitMQ naintaluje i velká část ekosystému Erlangu, ale spotřeba operační paměti se pohybuje v&nbsp;rozumných mezích (navíc je možné relativně snadno zajistit, aby měl virtuální stroj Erlangu k&nbsp;dispozici pouze omezené množství paměti).</div></p>

<p>Dnes si ukážeme, jakým způsobem je možné s&nbsp;využitím systému RabbitMQ nastavit a naprogramovat jednoduchou architekturu producenta-konzumenta; řekneme si, jak se řídí dělba práce mezi jednotlivými workery (které implementují algoritmus konzumenta), jakým způsobem se dají sledovat jednotlivé fronty a konečně si ukážeme způsob potvrzení dokončení práce workerem.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Rozhraní mezi RabbitMQ a programovacími jazyky</h2>

<p>K&nbsp;nástroji RabbitMQ byla vytvořena rozhraní (různé knihovny) umožňující práci s&nbsp;tímto systémem z&nbsp;mnoha programovacích jazyků:</p>

<table>
<tr><th>Jazyk/platforma</th></tr>
<tr><td>Java</td></tr>
<tr><td>JavaScript (Node.js)</td></tr>
<tr><td>Python</td></tr>
<tr><td>Ruby</td></tr>
<tr><td>PHP</td></tr>
<tr><td>C#</td></tr>
<tr><td>Go</td></tr>
<tr><td>Elixir</td></tr>
<tr><td>Spring AMQP</td></tr>
<tr><td>Swift</td></tr>
<tr><td>Objective-C</td></tr>
<tr><td>Clojure</td></tr>
</table>

<p>U některých jazyků je k&nbsp;dispozici dokonce větší množství knihoven. V&nbsp;dnešním článku se zaměříme především na programovací jazyk Python, pro nějž existuje mj.&nbsp;i knihovna nazvaná <i>Pika</i>, která se samozřejmě instalovatelná přes PyPi (<a href="https://pypi.org/project/pika/">https://pypi.org/project/pika/</a>). Abychom se nedrželi pouze čistého mainstreamu, ukážeme si v&nbsp;závěru článku i použití systému RabbitMQ <a href="https://www.clojure.org/">z&nbsp;programovacího jazyka Clojure</a>.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Protokoly podporované systémem RabbitMQ</h2>

<p>Popis podporovaných protokolů musíme začít protokoly AMQP () verze 0-9-1, 0-9 a 0-8, protože RabbitMQ původně vznikl právě z&nbsp;toho důvodu, aby podporoval standard AMQP. Jedná se o binární protokol, v&nbsp;němž je velká váha kladena nejen na precizní specifikaci formátu dat, ale i na popis sémantiky operací prováděných službami, které AMQP implementují (či možná lépe řečeno akceptují). Jak uvidíme dále, jsou termíny používané v&nbsp;dokumentaci RabbitMQ odvozeny právě od terminologie převzaté ze specifikace AMQP. Specifikace pro verzi 0-9-1 je dostupná na stránce <a href="https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf">https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf</a>.</p>



<p></p>
STOMP
STOMP provides an interoperable wire format so that STOMP clients can communicate with any STOMP message broker to provide easy and widespread messaging interoperability among many languages, platforms and brokers.
Simple Design

STOMP is a very simple and easy to implement protocol, coming from the HTTP school of design; the server side may be hard to implement well, but it is very easy to write a client to get yourself connected. For example you can use Telnet to login to any STOMP broker and interact with it!
http://stomp.github.io/


<p><a name="k03"></a></p>
<h2 id="k03">3. Ukázky základních způsobů použití nástroje RabbitMQ</h2>

<p>Samotný RabbitMQ je možné použít mnoha různými způsoby. Na nejnižší úrovni se na tento systém můžeme dívat jako na klasickou a jednoduchou frontu zpráv (<i>message queue</i>). Tuto frontu je přitom možné nakonfigurovat takovým způsobem, aby byla zachována její robustnost, aby zprávy ve frontě přežily restart serveru RabbitMQ a aby bylo zaručeno doručení zprávy (příjemce ovšem musí potvrdit, že zprávu převzal a nějakým způsobem zpracoval). Tuto konfiguraci můžete použít kdykoli je nutné propojit několik komponent do složitější architektury, přičemž jedna z&nbsp;komponent bude produkovat zprávy (data, příkazy) a další komponenta/komponenty zprávy přijímat a asynchronně je zpracovávat:</p>

*** image ***
<p><i>Obrázek 1: RabbitMQ je možné použít jako jednoduchou frontu zpráv, přičemž zpráva může vznikat na jiném počítači, než na kterém běží samotná fronta. I příjemce může být provozován na samostatném počítači (počítačích). Počet front, které jsou pojmenovány, není žádným drastickým způsobem omezen.</i></p>

<p>RabbitMQ se dále poměrně často používá v&nbsp;roli brokera. Ostatně přesně v&nbsp;této roli je RabbitMQ použit i systémem <i>Celery</i>, s&nbsp;nímž jsme se seznámili v&nbsp;předchozích dvou článcích [<a href="https://www.root.cz/clanky/celery-system-implementujici-asynchronni-fronty-uloh-pro-python/">1</a>] [<a href="https://www.root.cz/clanky/celery-system-implementujici-asynchronni-fronty-uloh-pro-python-dokonceni/"></a>].</p>

*** image ***
<p><i>Obrázek 2: RabbitMQ jako broker využívaný dalšími systémy.</i></p>

<p>V&nbsp;případě, že se RabbitMQ využívá v&nbsp;roli brokera, umožňuje připojení různých konzumentů a nastavení strategií pro směrování zpráv mezi producenty a konzumenty. Samozřejmě je implementováno i rozložení zátěže mezi větší množství konzumentů v&nbsp;případě, že všichni tito konzumenti implementují stejnou logiku (službu). S&nbsp;tímto systémem jsme se ostatně již setkali při popisu Redis Queue i Celery, v&nbsp;nichž bylo relativně snadné spustit větší množství workerů a celou aplikaci tak škálovat podle potřeby:</p>

*** image ***
<p><i>Obrázek 3: Počet konzumentů není v&nbsp;podstatě nijak omezen.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Směrování zpráv před jejich vložením do fronty</h2>

<p>Interní struktura nástroje RabbitMQ je ovšem složitější, než by se mohlo na první pohled zdát. Ústředním prvkem jsou samozřejmě fronty se zprávami, ovšem před frontami je umístěn tzv.&nbsp;exchange sloužící pro směrování zpráv do jednotlivých front:</p>

*** image ***
<p><i>Obrázek 4: Interní konfigurovatelná struktura systému RabbitMQ.</i></p>

<p><div class="rs-tip-major">Poznámka: termíny &bdquo;exchange&ldquo; a &bdquo;binding&ldquo; vychází právě ze specifikace AMQP,.</div></p>
<p>Samotný broker, v&nbsp;tomto případě RabbitMQ, podporuje několik strategií pro řízení, do jaké fronty či do jakých front se má přijatá zpráva vložit. Každá z&nbsp;těchto strategií je samozřejmě plně konfigurovatelná a má své jméno, které je dobré znát při hledání podrobností v&nbsp;dokumentaci:</p>

<ul>

<li>Nejjednodušší strategie se jmenuje <i>direct</i>. Tato strategie je založena na tom, že samotná zpráva obsahuje klíč (<i>key</i>), který slouží pro výběr správné fronty. Pokud budeme mít k&nbsp;dispozici jedinou frontu a budeme používat jeden klíč, celý broker se nám vlastně zúží na &bdquo;obyčejnou&ldquo; frontu zpráv podporující různé protokoly a nabízejí řešení s&nbsp;vysokou dostupností.</li>

<li>Další strategie se nazývá <i>topic</i>. Jedná se o složitější formu navázání zprávy na frontu, protože se opět používá klíč uložený ve zprávě. Tento klíč se porovnává s&nbsp;regulárními výrazy specifikovanými v&nbsp;konfiguraci směrovače. Ve chvíli, kdy klíč odpovídá nějakému regulárnímu výrazu, je zpráva přesměrována do příslušné fronty.</li>

<li>Třetí strategie používá hlavičky (<i>headers</i>) připojené ke zprávě. To umožňuje detailnější konfiguraci směrování; podrobnosti si popíšeme v&nbsp;navazujícím článku.</li>

<li>A konečně čtvrtá strategie se nazývá <i>fanout</i>. Při použití této strategie se přijatá zpráva přenese do několika nakonfigurovaných front, což znamená, že bude přijata a zpracována několikrát. V&nbsp;praxi se například může jednat o přeposlání zprávy napsané klientem na různé servery implementující nějakou internetovou komunikační službu (Slack atd.).</li>

</ul>

<p>Dnes se budeme převážně zabývat první strategií, tj.&nbsp;přímým přeposláním přijaté zprávy do fronty určené klíčem ve zprávě. Trošku předběhneme, ovšem asi je vhodné ukázat, jak se vlastně zpráva s&nbsp;klíčem pošle. Ve chvíli, kdy má klient nakonfigurovaný a otevřený komunikační kanál na brokera, může zprávu s&nbsp;klíčem poslat takto:</p>

<pre>
channel.basic_publish(exchange='',
                      routing_key='test',
                      body='Hello World!')
</pre>

<p>Povšimněte si, že se u zprávy specifikuje jak její hodnota (v&nbsp;našem případě se jedná o pouhopouhý řetězec), tak i klíč a popř.&nbsp;i jméno tzv.&nbsp;exchange, která souvisí s&nbsp;vybranou strategií. V&nbsp;případě, že strategie není specifikována, což je ostatně náš případ, bude RabbitMQ server předpokládat výchozí volbu exchange (viz též podrobnější popis na stránce <a href="http://www.rabbitmq.com/amqp-0-9-1-reference.html#basic.publish">http://www.rabbitmq.com/amqp-0-9-1-reference.html#basic.publish</a>).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
# <strong>dnf install rabbitmq-server</strong>
Last metadata expiration check: 0:22:16 ago on Fri 16 Nov 2018 10:14:57 AM EST.
Dependencies resolved.
=========================================================================================================================================================
 Package                                     Arch                          Version                                    Repository                    Size
=========================================================================================================================================================
Installing:
 rabbitmq-server                             noarch                        3.6.16-3.fc29                              beaker-Fedora-Everything     4.7 M
Installing dependencies:
 erlang-asn1                                 x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     742 k
 erlang-compiler                             x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     1.1 M
 erlang-crypto                               x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     124 k
 erlang-eldap                                x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     111 k
 erlang-erts                                 x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     2.0 M
 erlang-hipe                                 x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     2.8 M
 erlang-inets                                x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     781 k
 erlang-kernel                               x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     1.1 M
 erlang-mnesia                               x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     767 k
 erlang-os_mon                               x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     110 k
 erlang-otp_mibs                             x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything      27 k
 erlang-public_key                           x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     604 k
 erlang-runtime_tools                        x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     208 k
 erlang-sasl                                 x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     290 k
 erlang-sd_notify                            x86_64                        1.0-8.fc29                                 beaker-Fedora-Everything      14 k
 erlang-snmp                                 x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     1.7 M
 erlang-ssl                                  x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     859 k
 erlang-stdlib                               x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     2.9 M
 erlang-syntax_tools                         x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     408 k
 erlang-tools                                x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     638 k
 erlang-xmerl                                x86_64                        20.3.8.9-2.fc29                            beaker-Fedora-Everything     995 k
 lksctp-tools                                x86_64                        1.0.16-10.fc29                             beaker-Fedora-Everything      92 k
 logrotate                                   x86_64                        3.14.0-4.fc29                              beaker-Fedora-Everything      68 k
 xemacs-filesystem                           noarch                        21.5.34-30.20171230hg92757c2b8239.fc29     beaker-Fedora-Everything      10 k

Transaction Summary
=========================================================================================================================================================
Install  25 Packages

Total download size: 23 M
Installed size: 36 M
Is this ok [y/N]

Downloading Packages:
(1/25): erlang-crypto-20.3.8.9-2.fc29.x86_64.rpm                                                                                                               1.4 MB/s | 124 kB     00:00
(2/25): erlang-asn1-20.3.8.9-2.fc29.x86_64.rpm                                                                                                                 5.9 MB/s | 742 kB     00:00
(24/25): xemacs-filesystem-21.5.34-30.20171230hg92757c2b8239.fc29.noarch.rpm                                                                                   218 kB/s |  10 kB     00:00
(25/25): rabbitmq-server-3.6.16-3.fc29.noarch.rpm                                                                                                               21 MB/s | 4.7 MB     00:00
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Total                                                                                                                                                           27 MB/s |  23 MB     00:00
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.

Installed:
  rabbitmq-server-3.6.16-3.fc29.noarch                                          erlang-asn1-20.3.8.9-2.fc29.x86_64                        erlang-compiler-20.3.8.9-2.fc29.x86_64
  erlang-crypto-20.3.8.9-2.fc29.x86_64                                          erlang-eldap-20.3.8.9-2.fc29.x86_64                       erlang-erts-20.3.8.9-2.fc29.x86_64
  erlang-hipe-20.3.8.9-2.fc29.x86_64                                            erlang-inets-20.3.8.9-2.fc29.x86_64                       erlang-kernel-20.3.8.9-2.fc29.x86_64
  erlang-mnesia-20.3.8.9-2.fc29.x86_64                                          erlang-os_mon-20.3.8.9-2.fc29.x86_64                      erlang-otp_mibs-20.3.8.9-2.fc29.x86_64
  erlang-public_key-20.3.8.9-2.fc29.x86_64                                      erlang-runtime_tools-20.3.8.9-2.fc29.x86_64               erlang-sasl-20.3.8.9-2.fc29.x86_64
  erlang-sd_notify-1.0-8.fc29.x86_64                                            erlang-snmp-20.3.8.9-2.fc29.x86_64                        erlang-ssl-20.3.8.9-2.fc29.x86_64
  erlang-stdlib-20.3.8.9-2.fc29.x86_64                                          erlang-syntax_tools-20.3.8.9-2.fc29.x86_64                erlang-tools-20.3.8.9-2.fc29.x86_64
  erlang-xmerl-20.3.8.9-2.fc29.x86_64                                           lksctp-tools-1.0.16-10.fc29.x86_64                        logrotate-3.14.0-4.fc29.x86_64
  xemacs-filesystem-21.5.34-30.20171230hg92757c2b8239.fc29.noarch

Complete!
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace RabbitMQ a konfigurace jeho síťového rozhraní</h2>

<pre>
$ <strong>su -</strong>
# <strong>rabbitmq-server</strong>

              RabbitMQ 3.6.16. Copyright (C) 2007-2018 Pivotal Software, Inc.
  ##  ##      Licensed under the MPL.  See http://www.rabbitmq.com/
  ##  ##
  ##########  Logs: /var/log/rabbitmq/rabbit@intel-sugarbay-dh-02.log
  ######  ##        /var/log/rabbitmq/rabbit@intel-sugarbay-dh-02-sasl.log
  ##########
              Starting broker...
 completed with 0 plugins.
</pre>

<pre>
$ <strong>sudo rabbitmq-server</strong>

              RabbitMQ 3.6.16. Copyright (C) 2007-2018 Pivotal Software, Inc.
  ##  ##      Licensed under the MPL.  See http://www.rabbitmq.com/
  ##  ##
  ##########  Logs: /var/log/rabbitmq/rabbit@intel-sugarbay-dh-02.log
  ######  ##        /var/log/rabbitmq/rabbit@intel-sugarbay-dh-02-sasl.log
  ##########
              Starting broker...
 completed with 0 plugins.
</pre>

/etc/rabbitmq/rabbitmq.config

[
 {rabbit,
  [
   {tcp_listeners, [{"127.0.0.1", 5672},
                    {"::1",       5672}]}
  ]
  ...
  ...
  ...
  }]


<p><a name="k05"></a></p>
<h2 id="k05">5. Spuštění serveru</h2>

<pre>
$ <strong>pip3 install --user pika</strong>
&nbsp;
Collecting pika
  Using cached https://files.pythonhosted.org/packages/bf/48/72de47f63ba353bacd74b76bb65bc63620b0706d8b0471798087cd5a4916/pika-0.12.0-py2.py3-none-any.whl
Installing collected packages: pika
Successfully installed pika-0.12.0
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instalace knihovny Pika s&nbsp;rozhraním mezi RabbitMQ a Pythonem</h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p>V&nbsp;této chvíli je náš testovací počítač připraven na příjem zpráv od producentů a na jejich následné zpracování konzumenty. Nejprve si ukažme, jak může vypadat producent. Jedná se o velmi krátký skript naprogramovaný v&nbsp;Pythonu, který se nejdříve připojí k&nbsp;serveru RabbitMQ, následně požádá o vytvoření či o zpřístupnění fronty nazvané &bdquo;test&ldquo;, pošle do fronty zprávu (nepřímo přes exchange) a následně zavře připojení k&nbsp;serveru:</p>

<pre>
import pika

connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

channel.queue_declare(queue='test')

channel.basic_publish(exchange='',
                      routing_key='test',
                      body='Hello World!')

print("Sent 'Hello World!'")
connection.close()
</pre>


$ sudo rabbitmqctl list_queues
Listing queues
test    1

$ sudo rabbitmqctl list_queues
Listing queues
test2    0
test    20

Waiting for messages. To exit press CTRL+C
...
Received b'Hello World! #1'
Received b'Hello World! #2'
Received b'Hello World! #3'
Received b'Hello World! #4'
Received b'Hello World! #5'
Received b'Hello World! #6'
Received b'Hello World! #7'
Received b'Hello World! #8'
Received b'Hello World! #9'
Received b'Hello World! #10'
Received b'Hello World! #1'
Received b'Hello World! #2'
Received b'Hello World! #3'
Received b'Hello World! #4'
Received b'Hello World! #5'
Received b'Hello World! #6'
Received b'Hello World! #7'
Received b'Hello World! #8'
Received b'Hello World! #9'
Received b'Hello World! #10'




<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

bez acku
$ sudo rabbitmqctl list_queues
Listing queues
test    10



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů naprogramovaných
v&nbsp;Pythonu byly uloženy do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/message-queues-examples">https://github.com/tisnik/message-queues-examples</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
doslova několik kilobajtů), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Skript</th><th>Popis</th><th>Cesta</th></tr>
<tr><td>1</td><td>enqueue_work.py</td><td>skript pro vložení zprávy do fronty</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example01/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example01/enqueue_work.py</a></td></tr>
<tr><td>1</td><td>enqueue_more_work.py</td><td>skript pro vložení deseti zpráv do fronty</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example01/enqueue_more_work.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example01/enqueue_more_work.py</a></td></tr>
<tr><td>1</td><td>consumer.py</td><td>implementace konzumenta (workera)</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example01/consumer.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example01/consumer.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>2</td><td>rabbitmq_connect.py</td><td>společná část pro producenta i konzumenta</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example02/rabbitmq_connect.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example02/rabbitmq_connect.py</a></td></tr>
<tr><td>2</td><td>enqueue_work.py</td><td>skript pro vložení zprávy do fronty</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example02/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example02/enqueue_work.py</a></td></tr>
<tr><td>2</td><td>enqueue_more_work.py</td><td>skript pro vložení deseti zpráv do fronty</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example02/enqueue_more_work.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example02/enqueue_more_work.py</a></td></tr>
<tr><td>2</td><td>consumer.py</td><td>implementace konzumenta (workera)</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example02/consumer.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example02/consumer.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>rabbitmq_connect.py</td><td>společná část pro producenta i konzumenta</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example03/rabbitmq_connect.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example03/rabbitmq_connect.py</a></td></tr>
<tr><td>3</td><td>enqueue_work.py</td><td>skript pro vložení zprávy do fronty</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example03/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example03/enqueue_work.py</a></td></tr>
<tr><td>3</td><td>enqueue_more_work.py</td><td>skript pro vložení deseti zpráv do fronty</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example03/enqueue_more_work.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example03/enqueue_more_work.py</a></td></tr>
<tr><td>3</td><td>consumer.py</td><td>implementace konzumenta (workera) simulujícího delší práci</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example03/consumer.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example03/consumer.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>rabbitmq_connect.py</td><td>společná část pro producenta i konzumenta</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example04/rabbitmq_connect.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example04/rabbitmq_connect.py</a></td></tr>
<tr><td>4</td><td>enqueue_work.py</td><td>skript pro vložení zprávy do fronty</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example04/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example04/enqueue_work.py</a></td></tr>
<tr><td>4</td><td>enqueue_more_work.py</td><td>skript pro vložení deseti zpráv do fronty</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example04/enqueue_more_work.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example04/enqueue_more_work.py</a></td></tr>
<tr><td>4</td><td>consumer.py</td><td>implementace konzumenta (workera) s&nbsp;potvrzením dokončení práce</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example04/consumer.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example04/consumer.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>rabbitmq_connect.py</td><td>společná část pro producenta i konzumenta</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example05/rabbitmq_connect.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example05/rabbitmq_connect.py</a></td></tr>
<tr><td>5</td><td>enqueue_work.py</td><td>skript pro vložení zprávy do fronty</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example05/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example05/enqueue_work.py</a></td></tr>
<tr><td>5</td><td>enqueue_more_work.py</td><td>skript pro vložení deseti zpráv do fronty</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example05/enqueue_more_work.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example05/enqueue_more_work.py</a></td></tr>
<tr><td>5</td><td>consumer.py</td><td>implementace konzumenta (workera) s&nbsp;vylepšením dělby práce</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example05/consumer.py">https://github.com/tisnik/message-queues-examples/blob/master/rabbit-mq/python/example05/consumer.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Advanced Message Queuing Protocol<br />
<a href="https://www.amqp.org/">https://www.amqp.org/</a>
</li>

<li>Advanced Message Queuing Protocol na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol">https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol</a>
</li>

<li>RabbitMQ<br />
<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a>
</li>

<li>RabbitMQ Tutorials<br />
<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a>
</li>

<li>RabbitMQ: Clients and Developer Tools<br />
<a href="https://www.rabbitmq.com/devtools.html">https://www.rabbitmq.com/devtools.html</a>
</li>

<li>RabbitMQ na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/RabbitMQ">https://en.wikipedia.org/wiki/RabbitMQ</a>
</li>

<li>Streaming Text Oriented Messaging Protocol<br />
<a href="https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol">https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol</a>
</li>

<li>Message Queuing Telemetry Transport<br />
<a href="https://en.wikipedia.org/wiki/MQTT">https://en.wikipedia.org/wiki/MQTT</a>
</li>

<li>Erlang<br />
<a href="http://www.erlang.org/">http://www.erlang.org/</a>
</li>

<li>pika 0.12.0 na PyPi<br />
<a href="https://pypi.org/project/pika/">https://pypi.org/project/pika/</a>
</li>

<li>Introduction to Pika<br />
<a href="https://pika.readthedocs.io/en/stable/">https://pika.readthedocs.io/en/stable/</a>
</li>

<li>Langohr: An idiomatic Clojure client for RabbitMQ that embraces the AMQP 0.9.1 model<br />
<a href="http://clojurerabbitmq.info/">http://clojurerabbitmq.info/</a>
</li>

<li>AMQP 0-9-1 Model Explained<br />
<a href="http://www.rabbitmq.com/tutorials/amqp-concepts.html">http://www.rabbitmq.com/tutorials/amqp-concepts.html</a>
</li>

<li>Part 1: RabbitMQ for beginners - What is RabbitMQ?<br />
<a href="https://www.cloudamqp.com/blog/2015-05-18-part1-rabbitmq-for-beginners-what-is-rabbitmq.html">https://www.cloudamqp.com/blog/2015-05-18-part1-rabbitmq-for-beginners-what-is-rabbitmq.html</a>
</li>

<li>Downloading and Installing RabbitMQ<br />
<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a>
</li>

<li>celery na PyPi<br />
<a href="https://pypi.org/project/celery/">https://pypi.org/project/celery/</a>
</li>

<li>Databáze Redis (nejenom) pro vývojáře používající Python <br />
<a href="https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python/">https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python/</a>
</li>

<li>Databáze Redis (nejenom) pro vývojáře používající Python (dokončení)<br />
<a href="https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python-dokonceni/">https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python-dokonceni/</a>
</li>

<li>Použití nástroje RQ (Redis Queue) pro správu úloh zpracovávaných na pozadí<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/">https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/</a>
</li>

<li>Redis Queue (RQ)<br />
<a href="https://www.fullstackpython.com/redis-queue-rq.html">https://www.fullstackpython.com/redis-queue-rq.html</a>
</li>

<li>Python Celery &amp; RabbitMQ Tutorial<br />
<a href="https://tests4geeks.com/python-celery-rabbitmq-tutorial/">https://tests4geeks.com/python-celery-rabbitmq-tutorial/</a>
</li>

<li>Flower: Real-time Celery web-monitor<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/monitoring.html#flower-real-time-celery-web-monitor">http://docs.celeryproject.org/en/latest/userguide/monitoring.html#flower-real-time-celery-web-monitor</a>
</li>

<li>Asynchronous Tasks With Django and Celery<br />
<a href="https://realpython.com/asynchronous-tasks-with-django-and-celery/">https://realpython.com/asynchronous-tasks-with-django-and-celery/</a>
</li>

<li>First Steps with Celery<br />
<a href="http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html">http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html</a>
</li>

<li>node-celery<br />
<a href="https://github.com/mher/node-celery">https://github.com/mher/node-celery</a>
</li>

<li>Full Stack Python: web development<br />
<a href="https://www.fullstackpython.com/web-development.html">https://www.fullstackpython.com/web-development.html</a>
</li>

<li>Introducing RQ<br />
<a href="https://nvie.com/posts/introducing-rq/">https://nvie.com/posts/introducing-rq/</a>
</li>

<li>Asynchronous Tasks with Flask and Redis Queue<br />
<a href="https://testdriven.io/asynchronous-tasks-with-flask-and-redis-queue">https://testdriven.io/asynchronous-tasks-with-flask-and-redis-queue</a>
</li>

<li>rq-dashboard<br />
<a href="https://github.com/eoranged/rq-dashboard">https://github.com/eoranged/rq-dashboard</a>
</li>

<li>Stránky projektu Redis<br />
<a href="https://redis.io/">https://redis.io/</a>
</li>

<li>Introduction to Redis<br />
<a href="https://redis.io/topics/introduction">https://redis.io/topics/introduction</a>
</li>

<li>Try Redis<br />
<a href="http://try.redis.io/">http://try.redis.io/</a>
</li>

<li>Redis tutorial, April 2010 (starší, ale pěkně udělaný)<br />
<a href="https://static.simonwillison.net/static/2010/redis-tutorial/">https://static.simonwillison.net/static/2010/redis-tutorial/</a>
</li>

<li>Python Redis<br />
<a href="https://redislabs.com/lp/python-redis/">https://redislabs.com/lp/python-redis/</a>
</li>

<li>Redis: key-value databáze v paměti i na disku<br />
<a href="https://www.zdrojak.cz/clanky/redis-key-value-databaze-v-pameti-i-na-disku/">https://www.zdrojak.cz/clanky/redis-key-value-databaze-v-pameti-i-na-disku/</a>
</li>

<li>Praktický úvod do Redis (1): vaše distribuovaná NoSQL cache<br />
<a href="http://www.cloudsvet.cz/?p=253">http://www.cloudsvet.cz/?p=253</a>
</li>

<li>Praktický úvod do Redis (2): transakce<br />
<a href="http://www.cloudsvet.cz/?p=256">http://www.cloudsvet.cz/?p=256</a>
</li>

<li>Praktický úvod do Redis (3): cluster<br />
<a href="http://www.cloudsvet.cz/?p=258">http://www.cloudsvet.cz/?p=258</a>
</li>

<li>Connection pool<br />
<a href="https://en.wikipedia.org/wiki/Connection_pool">https://en.wikipedia.org/wiki/Connection_pool</a>
</li>

<li>Instant Redis Sentinel Setup<br />
<a href="https://github.com/ServiceStack/redis-config">https://github.com/ServiceStack/redis-config</a>
</li>

<li>How to install REDIS in LInux<br />
<a href="https://linuxtechlab.com/how-install-redis-server-linux/">https://linuxtechlab.com/how-install-redis-server-linux/</a>
</li>

<li>Redis RDB Dump File Format<br />
<a href="https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format">https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format</a>
</li>

<li>Lempel–Ziv–Welch<br />
<a href="https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch">https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch</a>
</li>

<li>Redis Persistence<br />
<a href="https://redis.io/topics/persistence">https://redis.io/topics/persistence</a>
</li>

<li>Redis persistence demystified<br />
<a href="http://oldblog.antirez.com/post/redis-persistence-demystified.html">http://oldblog.antirez.com/post/redis-persistence-demystified.html</a>
</li>

<li>Redis reliable queues with Lua scripting<br />
<a href="http://oldblog.antirez.com/post/250">http://oldblog.antirez.com/post/250</a>
</li>

<li>Ost (knihovna)<br />
<a href="https://github.com/soveran/ost">https://github.com/soveran/ost</a>
</li>

<li>NoSQL<br />
<a href="https://en.wikipedia.org/wiki/NoSQL">https://en.wikipedia.org/wiki/NoSQL</a>
</li>

<li>Shard (database architecture)<br />
<a href="https://en.wikipedia.org/wiki/Shard_%28database_architecture%29">https://en.wikipedia.org/wiki/Shard_%28database_architecture%29</a>
</li>

<li>What is sharding and why is it important?<br />
<a href="https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important">https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important</a>
</li>

<li>What Is Sharding?<br />
<a href="https://btcmanager.com/what-sharding/">https://btcmanager.com/what-sharding/</a>
</li>

<li>Redis clients<br />
<a href="https://redis.io/clients">https://redis.io/clients</a>
</li>

<li>Category:Lua-scriptable software<br />
<a href="https://en.wikipedia.org/wiki/Category:Lua-scriptable_software">https://en.wikipedia.org/wiki/Category:Lua-scriptable_software</a>
</li>

<li>Seriál Programovací jazyk Lua<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-lua/">https://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Redis memory usage<br />
<a href="http://nosql.mypopescu.com/post/1010844204/redis-memory-usage">http://nosql.mypopescu.com/post/1010844204/redis-memory-usage</a>
</li>

<li>Ukázka konfigurace Redisu pro lokální testování<br />
<a href="https://github.com/tisnik/presentations/blob/master/redis/redis.conf">https://github.com/tisnik/presentations/blob/master/redis/redis.conf</a>
</li>

<li>Resque<br />
<a href="https://github.com/resque/resque">https://github.com/resque/resque</a>
</li>

<li>Nested transaction<br />
<a href="https://en.wikipedia.org/wiki/Nested_transaction">https://en.wikipedia.org/wiki/Nested_transaction</a>
</li>

<li>Publish–subscribe pattern<br />
<a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern</a>
</li>

<li>Messaging pattern<br />
<a href="https://en.wikipedia.org/wiki/Messaging_pattern">https://en.wikipedia.org/wiki/Messaging_pattern</a>
</li>

<li>Using pipelining to speedup Redis queries<br />
<a href="https://redis.io/topics/pipelining">https://redis.io/topics/pipelining</a>
</li>

<li>Pub/Sub<br />
<a href="https://redis.io/topics/pubsub">https://redis.io/topics/pubsub</a>
</li>

<li>ZeroMQ distributed messaging<br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>ZeroMQ: Modern &amp; Fast Networking Stack<br />
<a href="https://www.igvita.com/2010/09/03/zeromq-modern-fast-networking-stack/">https://www.igvita.com/2010/09/03/zeromq-modern-fast-networking-stack/</a>
</li>

<li>Publish/Subscribe paradigm: Why must message classes not know about their subscribers?<br />
<a href="https://stackoverflow.com/questions/2908872/publish-subscribe-paradigm-why-must-message-classes-not-know-about-their-subscr">https://stackoverflow.com/questions/2908872/publish-subscribe-paradigm-why-must-message-classes-not-know-about-their-subscr</a>
</li>

<li>Python &amp; Redis PUB/SUB<br />
<a href="https://medium.com/@johngrant/python-redis-pub-sub-6e26b483b3f7">https://medium.com/@johngrant/python-redis-pub-sub-6e26b483b3f7</a>
</li>

<li>Message broker<br />
<a href="https://en.wikipedia.org/wiki/Message_broker">https://en.wikipedia.org/wiki/Message_broker</a>
</li>

<li>RESP Arrays<br />
<a href="https://redis.io/topics/protocol#array-reply">https://redis.io/topics/protocol#array-reply</a>
</li>

<li>Redis Protocol specification<br />
<a href="https://redis.io/topics/protocol">https://redis.io/topics/protocol</a>
</li>

<li>Redis Pub/Sub: Intro Guide<br />
<a href="https://www.redisgreen.net/blog/pubsub-intro/">https://www.redisgreen.net/blog/pubsub-intro/</a>
</li>

<li>Redis Pub/Sub: Howto Guide<br />
<a href="https://www.redisgreen.net/blog/pubsub-howto/">https://www.redisgreen.net/blog/pubsub-howto/</a>
</li>

<li>Comparing Publish-Subscribe Messaging and Message Queuing<br />
<a href="https://dzone.com/articles/comparing-publish-subscribe-messaging-and-message">https://dzone.com/articles/comparing-publish-subscribe-messaging-and-message</a>
</li>

<li>Apache Kafka<br />
<a href="https://kafka.apache.org/">https://kafka.apache.org/</a>
</li>

<li>Iron<br />
<a href="http://www.iron.io/mq">http://www.iron.io/mq</a>
</li>

<li>kue (založeno na Redisu, určeno pro node.js)<br />
<a href="https://github.com/Automattic/kue">https://github.com/Automattic/kue</a>
</li>

<li>Cloud Pub/Sub<br />
<a href="https://cloud.google.com/pubsub/">https://cloud.google.com/pubsub/</a>
</li>

<li>Introduction to Redis Streams<br />
<a href="https://redis.io/topics/streams-intro">https://redis.io/topics/streams-intro</a>
</li>

<li>glob (programming)<br />
<a href="https://en.wikipedia.org/wiki/Glob_(programming)">https://en.wikipedia.org/wiki/Glob_(programming)</a>
</li>

<li>Why and how Pricing Assistant migrated from Celery to RQ - Paris.py<br />
<a href="https://www.slideshare.net/sylvinus/why-and-how-pricing-assistant-migrated-from-celery-to-rq-parispy-2">https://www.slideshare.net/sylvinus/why-and-how-pricing-assistant-migrated-from-celery-to-rq-parispy-2</a>
</li>

<li>Enqueueing internals<br />
<a href="http://python-rq.org/contrib/">http://python-rq.org/contrib/</a>
</li>

<li>queue — A synchronized queue class<br />
<a href="https://docs.python.org/3/library/queue.html">https://docs.python.org/3/library/queue.html</a>
</li>

<li>Queues<br />
<a href="http://queues.io/">http://queues.io/</a>
</li>

<li>Windows Subsystem for Linux Documentation<br />
<a href="https://docs.microsoft.com/en-us/windows/wsl/about">https://docs.microsoft.com/en-us/windows/wsl/about</a>
</li>

<li>RestMQ<br />
<a href="http://restmq.com/">http://restmq.com/</a>
</li>

<li>ActiveMQ<br />
<a href="http://activemq.apache.org/">http://activemq.apache.org/</a>
</li>

<li>Amazon MQ<br />
<a href="https://aws.amazon.com/amazon-mq/">https://aws.amazon.com/amazon-mq/</a>
</li>

<li>Amazon Simple Queue Service<br />
<a href="https://aws.amazon.com/sqs/">https://aws.amazon.com/sqs/</a>
</li>

<li>Celery: Distributed Task Queue<br />
<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a>
</li>

<li>Disque, an in-memory, distributed job queue<br />
<a href="https://github.com/antirez/disque">https://github.com/antirez/disque</a>
</li>

<li>rq-dashboard<br />
<a href="https://github.com/eoranged/rq-dashboard">https://github.com/eoranged/rq-dashboard</a>
</li>

<li>Projekt RQ na PyPi<br />
<a href="https://pypi.org/project/rq/">https://pypi.org/project/rq/</a>
</li>

<li>rq-dashboard 0.3.12<br />
<a href="https://pypi.org/project/rq-dashboard/">https://pypi.org/project/rq-dashboard/</a>
</li>

<li>Job queue<br />
<a href="https://en.wikipedia.org/wiki/Job_queue">https://en.wikipedia.org/wiki/Job_queue</a>
</li>

<li>Why we moved from Celery to RQ<br />
<a href="https://frappe.io/blog/technology/why-we-moved-from-celery-to-rq">https://frappe.io/blog/technology/why-we-moved-from-celery-to-rq</a>
</li>

<li>Running multiple workers using Celery<br />
<a href="https://serverfault.com/questions/655387/running-multiple-workers-using-celery">https://serverfault.com/questions/655387/running-multiple-workers-using-celery</a>
</li>

<li>celery — Distributed processing<br />
<a href="http://docs.celeryproject.org/en/latest/reference/celery.html">http://docs.celeryproject.org/en/latest/reference/celery.html</a>
</li>

<li>Chains<br />
<a href="https://celery.readthedocs.io/en/latest/userguide/canvas.html#chains">https://celery.readthedocs.io/en/latest/userguide/canvas.html#chains</a>
</li>

<li>Routing<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/routing.html#automatic-routing">http://docs.celeryproject.org/en/latest/userguide/routing.html#automatic-routing</a>
</li>

<li>Celery Distributed Task Queue in Go<br />
<a href="https://github.com/gocelery/gocelery/">https://github.com/gocelery/gocelery/</a>
</li>

<li>Python Decorators<br />
<a href="https://wiki.python.org/moin/PythonDecorators">https://wiki.python.org/moin/PythonDecorators</a>
</li>

<li>Periodic Tasks<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html">http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html</a>
</li>

<li>celery.schedules<br />
<a href="http://docs.celeryproject.org/en/latest/reference/celery.schedules.html#celery.schedules.crontab">http://docs.celeryproject.org/en/latest/reference/celery.schedules.html#celery.schedules.crontab</a>
</li>

<li>Pros and cons to use Celery vs. RQ<br />
<a href="https://stackoverflow.com/questions/13440875/pros-and-cons-to-use-celery-vs-rq">https://stackoverflow.com/questions/13440875/pros-and-cons-to-use-celery-vs-rq</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

