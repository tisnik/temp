<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Julia: paralelní programování (pokračování)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Julia: paralelní programování (pokračování)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V osmé části seriálu o programovacím jazyku Julia se budeme věnovat dalším konceptům, které je možné použít při realizaci paralelních výpočtů. Taktéž se seznámíme s koprogramy (coroutines), které sice nemusí běžet skutečně paralelně, ovšem některé úlohy se rozdělením na koprogramy značně zjednoduší.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Julia: paralelní programování (pokračování)</a></p>
<p><a href="#k02">2. Funkce <strong>pmap()</strong></a></p>
<p><a href="#k03">3. Makro <strong>@parallel</strong> určené pro provedení paralelních výpočtů</a></p>
<p><a href="#k04">4. Makro @parallel a reducery</a></p>
<p><a href="#k05">5. Zásadní rozdíly mezi klasickou &bdquo;sériovou&ldquo; smyčkou a paralelním výpočtem</a></p>
<p><a href="#k06">6. Koncept koprogramů v&nbsp;programovacím jazyce Julia</a></p>
<p><a href="#k07">7. Koprogramy versus vlákna</a></p>
<p><a href="#k08">8. Producenti a konzumenti</a></p>
<p><a href="#k09">9. Realizace jednoduchého producenta a konzumenta</a></p>
<p><a href="#k10">10. Demonstrační příklad &ndash; generátor Fibonacciho posloupnosti</a></p>
<p><a href="#k11">11. Předání parametru či parametrů do koprogramu</a></p>
<p><a href="#k12">12. Složitější příklad &ndash; generátor geometrické řady</a></p>
<p><a href="#k13">13. Použití většího množství producentů ve stejný okamžik</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Julia: paralelní programování (pokračování)</h2>

<p>Mezi další technologie nabízené programovacím jazykem Julia patří funkce
vyššího řádu <strong>pmap()</strong>, velmi užitečné a snadno použitelné makro
<strong>@parallel</strong>, které se v&nbsp;některých případech kombinuje
s&nbsp;makrem <strong>@sync</strong> a v&nbsp;neposlední řadě taktéž koncept
takzvaných koprogramů (<i>coroutines</i>). Dnes se s&nbsp;těmito technologiemi
seznámíme s&nbsp;využitím několika demonstračních příkladů. Na těchto
technologiích je zajímavé především to, že umožňují konstrukci i poměrně
složitých paralelních algoritmů, a to bez nutnosti používat nízkoúrovňový
přístup založený na vláknech, zámcích či semaforech.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Funkce <strong>pmap()</strong></h2>

<p>O funkci <strong>pmap()</strong> jsme se již zmínili ve třetí části tohoto
seriálu, takže si jen ve stručnosti připomeňme, že se jedná o paralelní
variantu funkce <strong>map</strong>, tedy o funkci vyššího řádu, která dokáže
aplikovat jinou uživatelem zvolenou funkci na sekvenci či pole:</p>

<pre>
help?&gt; <strong>pmap</strong>
search: pmap promote_shape repmat typemax permutations SparseMatrix
&nbsp;
  ..  pmap(f, lsts...; err_retry=true, err_stop=false, pids=workers())
 &nbsp; 
  Transform collections ``lsts`` by applying ``f`` to each element in parallel.
  (Note that ``f`` must be made available to all worker processes)
  If ``nprocs() &gt; 1``, the calling process will be dedicated to assigning tasks.
  All other available processes will be used as parallel workers, or on the processes specified by ``pids``.
</pre>

<p>Funkce <strong>pmap()</strong> dokáže provádět výpočty paralelně, což
znamená, že se výpočty předají v&nbsp;daný okamžik volným workerům. Mezi jednu
z&nbsp;podmínek, které je nutné splnit, patří to, že funkce, která se má předat
dalším workerkům, v&nbsp;nich musí být dostupná (zjednodušeně řečeno &ndash;
workery musí znát její zdrojový kód či bajtkód). Distribuci libovolné funkce
mezi workery zajišťuje makro <strong>@everywhere</strong>:</p>

<pre>
help?&gt; <strong>@everywhere</strong>
  @everywhere
&nbsp;
  Execute an expression on all processes. Errors on any of the processes are
  collected into a CompositeException and thrown.
</pre>

<p>Ve třetí části jsme si otestovali paralelní výpočet Ackermannovy funkce,
protože vyhodnocení této funkce je i přes její jednoduchý zápis poměrně
zdlouhavé (a taktéž náročné na kapacitu zásobníku):</p>

<pre>
@everywhere(function ackermann(m,n)
    if m == 0
        return n + 1
    elseif n == 0
        return ackermann(m-1,1)
    else
        return ackermann(m-1,ackermann(m,n-1))
    end
end)
</pre>

<p>Sériový výpočet hodnot Ackermannovy funkce pro parametry [4,1], [4,2], [4,3]
a [4,4] bude vypadat takto:</p>

<pre>
map(x-&gt;ackermann(4,x), 1:4)
</pre>

<p>Po spuštění interpretru a čtyř workerů příkazem...</p>

<pre>
julia -p 4
</pre>

<p>...je již možné použít paralelní verzi funkce <strong>map</strong>:</p>

<pre>
pmap(x-&gt;ackermann(4,x), 1:4)
</pre>

<p>Pozor však na to, aby se při výpočtech nepřistupovalo ke sdíleným datům!</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Makro <strong>@parallel</strong> určené pro provedení paralelních výpočtů</h2>

<p>V&nbsp;mnoha výpočtech může být výhodnější použití makra nazvaného
<strong>@parallel</strong>, které se zapisuje formou &bdquo;paralelní&ldquo;
smyčky. Zatímco se funkce <strong>pmap()</strong> používá spíše pro
déletrvající a složité výpočty, je makro <strong>@paralell</strong> užitečné ve
chvíli, kdy se má provést velký počet poměrně jednoduchých výpočtů (součet,
vyhodnocení krátké funkce atd.) Zápis paralelní smyčky se v&nbsp;mnoha ohledech
podobá zápisu klasické sériové smyčky:</p>

<pre>
help?&gt; <strong>@parallel</strong>
  @parallel
&nbsp;
  A parallel for loop.
&nbsp;
  The specified range is partitioned and locally executed across all workers.
  In case an optional reducer function is specified, @parallel performs local
  reductions on each worker with a final reduction on the calling process.
</pre>

<p>Základní použití tohoto makra může vypadat následovně:</p>

<pre>
@parallel for i=1:100000
    i*2
end
&nbsp;
1-element Array{Any,1}:
 RemoteRef{Channel{Any}}(1,1,14)
</pre>

<p>Povšimněte si, že se vrátil pouze objekt, s&nbsp;nímž jsme se již setkali
předminule &ndash; vzdálená reference. Je tomu tak z&nbsp;toho důvodu, že makro
<strong>@parallel</strong> spustí vzdálené výpočty a ihned skončí bez čekání na
jejich dokončení. Pokud potřebujete počkat na dokončení, lze použít makro
<strong>@sync</strong>, které již taktéž známe:</p>

<pre>
@sync @parallel for i=1:100000
    i*2
end
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Makro @parallel a reducery</h2>

<p>Toto makra dokáže na paralelně vypočtený výsledek aplikovat takzvaný
<i>reducer</i>, což je nějaká funkce používaná typicky ve funkci vyššího řádu
<strong>reduce</strong>. Pokud například potřebujeme (v&nbsp;jednom procesu a
vláknu) sečíst deset členů aritmetické řady, stačí použít:</p>

<pre>
julia&gt; <strong>reduce(+, 1:10)</strong>
55
</pre>

<p>Připomeňme si, že + je obyčejná funkce, která se dá navíc zapsat jako
operátor, což je ovšem jen syntaktický cukr.</p>

<p>Podobně lze vypočítat faktoriál šesti:</p>

<pre>
julia&gt; <strong>reduce(*, 1:6)</strong>
720
</pre>

<p>Paralelní výpočet s&nbsp;reducerem vypadá odlišně:</p>

<pre>
@parallel (*) for i=1:6
    i
end
&nbsp;
720
</pre>

<p>Zde je nutné si uvědomit, že paralelně běží vlastně pouze výraz uvnitř
smyčky, což je v&nbsp;tomto případě pouze vyhodnocení hodnoty proměnné.
Samozřejmě ale výpočet může být složitější, například součet druhých mocnin
hodnot jedna až deset:</p>

<pre>
@parallel (+) for i=1:10
    i*i
end
&nbsp;
385
</pre>

<p>Právě pro podobné účely &ndash; velmi jednoduché výpočty typu i*i &ndash;
bylo makro <strong>@parallel</strong> vytvořeno.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Zásadní rozdíly mezi klasickou &bdquo;sériovou&ldquo; smyčkou a paralelním výpočtem</h2>

<p>Při použití makra <strong>@parallel</strong> je zapotřebí si dát pozor na
to, že i když zápis vypadá podobně jako běžná programová smyčka, je zde zásadní
technologický rozdíl &ndash; výpočty jsou spouštěny paralelně na nezávislých
workerech, což mohou být buď samostatné procesy či dokonce procesy na odlišných
počítačích (opět viz předminulou část seriálu). To znamená, že tyto workery
nemají automatický přístup ke všem datům používaným na jiných workerech. Pokud
se k&nbsp;datům pouze přistupuje v&nbsp;režimu čtení, není to tak velký
problém:</p>

<pre>
a = obrovské_pole
@parallel (+) for i=1:100000
    i*(a[i])
end
</pre>

<p>Ovšem při zápisu dochází k&nbsp;problémům, protože každý worker si vytvoří
svoji kopii původního pole, ale zpětně nedojde k&nbsp;žádnému spojení výsledků
(ostatně to by nebylo obecně možné):</p>

<pre>
a = zeros(100000)
@parallel for i=1:100000
     a[i] = i
end
</pre>

<p>Podobné výpočty není vhodné s&nbsp;využitím <strong>@parallel</strong>
realizovat.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Koncept koprogramů v&nbsp;programovacím jazyce Julia</h2>

<p>V&nbsp;programovacím jazyku Julia je kromě podpory skutečných paralelně
běžících výpočtů implementována i podpora pro takzvané <i>koprogramy</i>
(<i>coroutines</i>). Koprogram je možné chápat jako zobecnění podprogramu,
procedury, funkce či metody. Volání běžných <i>podprogramů</i> a návrat
z&nbsp;nich je řízen s&nbsp;využitím zásobníku (<i>stack</i>), a to velmi
jednoduše a na současných mikroprocesorech i poměrně efektivně &ndash; při
každém volání podprogramu je adresa aktuálního místa, kde se výpočet nachází,
uložena na zásobník a při ukončení podprogramu je tato adresa ze zásobníku
vyjmuta a řízení se vrátí na (přesněji těsně <strong>za</strong>) místo, ve
kterém byl podprogram, metoda či funkce volána.</p>

<p>To mj.&nbsp;znamená, že podprogram má jen jeden vstupní bod a při ukončení
podprogramu se musí v&nbsp;případě potřeby podprogram opět zavolat od tohoto
vstupního bodu (přerušený výpočet, například příkazem <strong>return</strong>
či <strong>break</strong>, nelze po návratu z&nbsp;podprogramu dokončit), což
odpovídá klasicky chápanému strukturovanému programování. Díky tomu, že jednou
přerušený podprogram již není možné obnovit, může celá aplikace používat pouze
jediný zásobník pro předávání parametrů i návratových hodnot (výjimkou jsou
samozřejmě uzávěry, jejichž lokální proměnné nejsou ukládány na zásobník, ale
na haldu &ndash; heap).</p>

<p>Naproti tomu v&nbsp;případě použití <i>koprogramů</i> je možné jednoduchým
způsobem definovat libovolné množství vstupních bodů, které se mohou nacházet
v&nbsp;jejich těle na prakticky libovolném místě (včetně a vlastně především
vnitřních částí programových smyček). Činnost koprogramu lze v&nbsp;těchto
bodech přerušit a vrátit řízení volajícímu programu, ovšem s&nbsp;tím, že se
vnitřní stav koprogramu zachová a běh koprogramu tak lze od tohoto bodu znovu
spustit (nespouští se tedy od svého začátku, ale od bodu, kde byl výpočet
přerušen). Navíc je možné v&nbsp;těchto bodech předávat parametry jak
z&nbsp;volajícího programu do koprogramu, tak i opačným směrem &ndash; toto
předání parametrů je bezpečné (mohli bychom říci jazykem Javistů threadsafe, i
když koprogramy nepoužívají vlákna operačního systému). V&nbsp;podstatě se
jedná o jediný (a dostatečný) synchronizační mechanismus, který je při práci
s&nbsp;koprogramy zapotřebí. Vzhledem k&nbsp;tomu, že je nutné uchovávat stav
koprogramu i tehdy, když je jeho výpočet přerušen, musí mít koprogramy vlastní
zásobník, který je v&nbsp;operační paměti alokován ve chvíli, kdy je koprogram
vytvořen (o jeho dealokaci se typicky postará garbage collector).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Koprogramy versus vlákna</h2>

<p>S&nbsp;využitím koprogramů je možné velmi jednoduše implementovat
kooperativní multithreading, ovšem s&nbsp;tím omezením, že se ve skutečnosti
nepoužívají vlákna (<i>threads</i>) operačního systému, protože volající
program je při zavolání koprogramu pozastaven, aby mohl počkat na výsledek jeho
běhu. To na jednu stranu zjednodušuje implementaci, na stranu druhou se
nevyužívá všech možností moderních vícejádrových mikroprocesorů. Ovšem
programátor může použít koprogramy ve chvíli, kdy potřebuje řídit takové
výpočty, u nichž není zcela zřejmé, jak přesně má proběhnout jejich
paralelizace (některé vlákno totiž může dokončit výpočet dříve než vlákna
další).</p>

<p>Další možné použití koprogramů souvisí s&nbsp;problémy typu
producent-konzument, což je téma, kterému se budeme podrobněji věnovat
v&nbsp;navazujících kapitolách, protože jazyk Julia obsahuje několik funkcí a
maker, které lze velmi jednoduše využít a aplikovat na úlohy typu
producent-konzument. Specifickým příkladem využití koprogramů může být
realizace generátorů, například generátor nějaké matematické řady,
v&nbsp;případě potřeby i nekonečné (ve skutečnosti jsou koprogramy silnějším
nástrojem než generátory).</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Producenti a konzumenti</h2>

<p>V&nbsp;jazyce Julia nalezneme dvě funkce, které jsou velmi užitečné právě
při řešení úloh typu producent-konzument. Jména těchto funkcí si zapamatujete
velmi jednoduše &ndash; <strong>produce()</strong> a
<strong>consume()</strong>. První z&nbsp;těchto funkcí se používá v&nbsp;kódu
producenta pro poskytnutí dat, druhá v&nbsp;kódu konzumenta pro přečtení
dat:</p>

<pre>
help?&gt; <strong>produce</strong>
search: produce
&nbsp;
  produce(value)
&nbsp;
  Send the given value to the last consume call, switching to the consumer
  task. If the next consume call passes any values, they are returned by
  produce.
</pre>

<p>Zavolání funkce <strong>produce()</strong> daný koprogram (resp.&nbsp;dané
vlákno) pozastaví a předá řízení konzumentovi, který musí někdy zavolat funkci
<strong>consume()</strong> a přečíst si předaná data:</p>

<pre>
help?&gt; <strong>consume</strong>
search: consume TypeConstructor
&nbsp;
  consume(task, values...)
&nbsp;
  Receive the next value passed to produce by the specified task. Additional
  arguments may be passed, to be returned from the last produce call in the
  producer.
</pre>

<p>Důležité je, aby byl producent či konzument vytvořen formou koprogramu. Toho
dosáhneme snadno, protože v&nbsp;programovacím jazyku Julia jsou koprogramy
realizovány objekty typu <strong>Task</strong>, které &bdquo;obalují&ldquo;
funkci, která představuje tělo koprogramu. Pro vytvoření nového objektu typu
<strong>Task</strong> použijeme následující konstruktor:</p>

<pre>
help?&gt; <strong>Task</strong>
search: Task task_local_storage @task istaskdone istaskstarted current_task
&nbsp;
  Task(func)
&nbsp;
  Create a Task (i.e. thread, or coroutine) to execute the given function
  (which must be callable with no arguments). The task exits when this
  function returns.
</pre>

<p>Řešení úlohy typu producent-konzument tedy může vypadat následovně:</p>

<ol>
<li>Producent je tvořen funkcí volající ve svém těle <strong>produce()</strong>
s&nbsp;nějakou hodnotou.</li>
<li>Producent běží ve vlastní úloze (<strong>Task</strong>).</li>
<li>Ve chvíli, kdy se zavolá <strong>produce()</strong>, se přepne kontext na
konzumenta.</li>
<li>Konzument v&nbsp;programové smyčce načítá data z&nbsp;producenta funkcí
<strong>consume()</strong>.</li>
</ol>



<p><a name="k09"></a></p>
<h2 id="k09">9. Realizace jednoduchého producenta a konzumenta</h2>

<p>Funkce, která představuje producenta, může být velmi jednoduchá,
například:</p>

<pre>
function test_producer()
    produce("jedna")
    produce("dva")
    produce("tri")
end
</pre>

<p>Funkci musíme &bdquo;obalit&ldquo; do úlohy:</p>

<pre>
julia&gt; <strong>p=Task(test_producer)</strong>
Task (runnable) @0x00007fd3bc7f4e20
</pre>

<p>Povšimněte si, že jsme se vrátili zpět do interaktivní smyčky REPL. Nyní již
můžeme od producenta žádat jednotlivé hodnoty:</p>

<pre>
julia&gt; <strong>consume(p)</strong>
"jedna"
&nbsp;
julia&gt; <strong>consume(p)</strong>
"dva"
&nbsp;
julia&gt; <strong>consume(p)</strong>
"tri"
&nbsp;
julia&gt; <strong>consume(p)</strong>
()
&nbsp;
julia&gt; <strong>consume(p)</strong>
()
</pre>

<p>Po získání třech hodnot ve skutečnosti producent skončil a vrací se prázdná
sekvence (funkce <strong>consume</strong> v&nbsp;tomto případě neblokuje další
výpočty).</p>

<p>Alternativně je možné postupně přečíst pouze hodnoty skutečně vytvářené
producentem, a to následovně:</p>

<pre>
julia&gt; <strong>p=Task(test_producer)</strong>
Task (runnable) @0x00007fd3bc7f4e20
&nbsp;
for p in Task(test_producer)
    println(p)
end
&nbsp;
jedna
dva
tri
</pre>

<p>Na tomto příkladu je možné patrné, proč jsem se zmínil o tom, že generátory
jsou speciálním případem koprogramů.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Demonstrační příklad &ndash; generátor Fibonacciho posloupnosti</h2>

<p>Podívejme se nyní na příklad praktičtější úlohy typu producent-konzument.
Producentem bude funkce, která postupně vytváří hodnoty patřící do Fibonacciho
posloupnosti. Zajímavé je, že se vytváří nekonečná posloupnost (ve funkci je
nekonečná smyčka), ovšem hodnoty se tvoří &bdquo;na požádání&ldquo;, tedy až
jiný kód zavolá funkci <strong>consume()</strong>. Nemusíme se tedy bát, že se
zaplní paměť nebo dojde k&nbsp;jiné nepříjemnosti &ndash; vše je řízeno
konzumentem, pokud ten nebude volat <strong>consume()</strong> v&nbsp;nekonečné
smyčce, bude producent jen čekat na přepnutí kontextu:</p>

<pre>
function fibonacci_producer()
    x,y = (0,1)
    while (true)
        <strong>produce(y)</strong>
        x,y=(y,x+y)
    end
end
</pre>

<p>Dále vytvoříme objekt typu <strong>Task</strong> s&nbsp;producentem. Tím se
vlastně z&nbsp;naší obyčejné funkce stane koprogram, který je ihned spuštěn a
zastaví se na prvním výskytu <strong>produce()</strong>:</p>

<pre>
p=Task(fibonacci_producer)
Task (runnable) @0x00007fd3bc7f52d0
</pre>

<p>Nyní již můžeme v&nbsp;konzumentovi získávat generované hodnoty. Prvních
deset prvků Fibonacciho posloupnosti se přečte takto:</p>

<pre>
for i = 1:10
    println(consume(p))
end
&nbsp;
1
1
2
3
5
8
13
21
34
55
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Předání parametru či parametrů do koprogramu</h2>

<p>Přímé vytvoření koprogramu s&nbsp;využitím konstruktoru
<strong>Task</strong> s&nbsp;sebou přináší jeden problém &ndash; jak je možné
předat producentovi parametry, když samotný konstruktor <strong>Task</strong>
nic takového neumožňuje? (viz výše uvedený výpis z&nbsp;nápovědy). Řešení
tohoto problému existuje hned několik, ovšem nejjednodušší je použití makra
<strong>@task</strong>, které provede potřebné obalení konstruktoru:</p>

<pre>
help?&gt; <strong>@task</strong>
  @task
&nbsp;
  Wrap an expression in a Task without executing it, and return the Task. This
  only creates a task, and does not run it.
</pre>

<p>Volání makra <strong>@task</strong> vypadá následovně:</p>

<pre>
@task jméno_funkce_producenta(parametry)
</pre>

<p>Povšimněte si rozdílu oproti přímému volání konstruktoru
<strong>Task</strong>:</p>

<pre>
Task(jméno_funkce_producenta)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Složitější příklad &ndash; generátor geometrické řady</h2>

<p>Makro <strong>@task</strong> vyzkoušíme na dalším příkladu. Bude se jednat o
generátor geometrické řady, přičemž při inicializaci tohoto generátoru určíme
jak počáteční hodnotu (prvního prvku), tak i kvocient. Realizace je skutečně
triviální, vlastně ještě jednodušší, než tomu bylo v&nbsp;případě Fibonacciho
posloupnosti:</p>

<pre>
function geometric_sequence_producer(initial_value, common_ratio)
    x=initial_value
    while (true)
        <strong>produce(x)</strong>
        x=x*common_ratio
    end
end
</pre>

<p>Vzhledem k&nbsp;tomu, že tato funkce vyžaduje dva parametry, použijeme pro
vytvoření úlohy/koprogramu s&nbsp;producentem makro <strong>@task</strong>, a
to následovně:</p>

<pre>
julia&gt; <strong>p=@task geometric_sequence_producer(1, 2)</strong>
Task (runnable) @0x00007fd3baf3daa0
</pre>

<p>Nyní již můžeme snadno získávat prvky této řady:</p>

<pre>
julia&gt; <strong>for i=1:10</strong>
       @printf("%2d: %10d\n", i, consume(p))
       end
 1:          1
 2:          2
 3:          4
 4:          8
 5:         16
 6:         32
 7:         64
 8:        128
 9:        256
10:        512
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Použití většího množství producentů ve stejný okamžik</h2>

<p>Povšimněte si, že samotná funkce, která popisuje chování producenta, si svůj
stav pamatuje pouze v&nbsp;parametrech a lokálních proměnných. Nepřistupuje se
k&nbsp;žádné globální proměnné ani se funkci nepředává žádný sdílený
objekt:</p>

<pre>
function geometric_sequence_producer(initial_value, common_ratio)
    x=initial_value
    while (true)
        <strong>produce(x)</strong>
        x=x*common_ratio
    end
end
</pre>

<p>To nám mj.&nbsp;umožňuje si vytvořit libovolné množství producentů,
z&nbsp;nichž každý bude pracovat zcela nezávisle na ostatních producentech.
Vytvořme si tedy tři producenty, každý pro generování odlišné geometrické
řady:</p>

<pre>
julia&gt; <strong>p1=@task geometric_sequence_producer(1, 2)</strong>
Task (runnable) @0x00007fd3baf3daa0
&nbsp;
julia&gt; <strong>p2=@task geometric_sequence_producer(10, 1/2)</strong>
Task (runnable) @0x00007fd3baf3ddc0
&nbsp;
julia&gt; <strong>p3=@task geometric_sequence_producer(3, 3)</strong>
Task (runnable) @0x00007fd3baf3df50
</pre>

<p>Vyzkoušejme si nyní, že producenti skutečně pracují nezávisle na sobě:</p>

<pre>
for i=1:10
    @printf("%2d: %10d %10.5f %10d\n", i, consume(p1), consume(p2), consume(p3))
end
</pre>

<pre>
 1:          1   10.00000          3
 2:          2    5.00000          9
 3:          4    2.50000         27
 4:          8    1.25000         81
 5:         16    0.62500        243
 6:         32    0.31250        729
 7:         64    0.15625       2187
 8:        128    0.07813       6561
 9:        256    0.03906      19683
10:        512    0.01953      59049
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Concurrency (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Category:Concurrency_%28computer_science%29">https://en.wikipedia.org/wiki/Category:Concurrency_%28computer_science%29</a>
</li>

<li>Tasks (aka Coroutines) [Julia]<br />
<a href="http://julia.readthedocs.io/en/latest/manual/control-flow/#man-tasks">http://julia.readthedocs.io/en/latest/manual/control-flow/#man-tasks</a>
</li>

<li>Koprogram<br />
<a href="https://cs.wikipedia.org/wiki/Koprogram">https://cs.wikipedia.org/wiki/Koprogram</a>
</li>

<li>Coroutine<br />
<a href="https://en.wikipedia.org/wiki/Coroutine">https://en.wikipedia.org/wiki/Coroutine</a>
</li>

<li>Coroutines in C<br />
<a href="http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html">http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html</a>
</li>

<li>S-expression (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/S-expression">https://en.wikipedia.org/wiki/S-expression</a>
</li>

<li>S-Expressions (Rosetta Code)<br />
<a href="http://rosettacode.org/wiki/S-Expressions">http://rosettacode.org/wiki/S-Expressions</a>
</li>

<li>Metaprogramming (Julia)<br />
<a href="http://julia.readthedocs.io/en/latest/manual/metaprogramming/">http://julia.readthedocs.io/en/latest/manual/metaprogramming/</a>
</li>

<li>Introducing Julia/Metaprogramming<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming">https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming</a>
</li>

<li>Tutorial for the Common Lisp Loop Macro<br />
<a href="http://www.ai.sri.com/pkarp/loop.html">http://www.ai.sri.com/pkarp/loop.html</a>
</li>

<li>Clojure Macro Tutorial (Part I, Getting the Compiler to Write Your Code For You)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html</a>
</li>

<li>Clojure Macro Tutorial (Part II: The Compiler Strikes Back)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html</a>
</li>

<li>Clojure Macro Tutorial (Part III: Syntax Quote)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html</a>
</li>

<li>Clojure Macros and Metaprogramming<br />
<a href="http://clojure-doc.org/articles/language/macros.html">http://clojure-doc.org/articles/language/macros.html</a>
</li>

<li>Tech behind Tech: Clojure Macros Simplified<br />
<a href="http://techbehindtech.com/2010/09/28/clojure-macros-simplified/">http://techbehindtech.com/2010/09/28/clojure-macros-simplified/</a>
</li>

<li>Fatvat - Exploring functional programming: Clojure Macros<br />
<a href="http://www.fatvat.co.uk/2009/02/clojure-macros.html">http://www.fatvat.co.uk/2009/02/clojure-macros.html</a>
</li>

<li>CS 2101 Parallel Computing with Julia<br />
<a href="https://www.coursehero.com/file/11508091/CS-2101-Parallel-Computing-with-Julia/">https://www.coursehero.com/file/11508091/CS-2101-Parallel-Computing-with-Julia/</a>
</li>

<li>Julia By Example<br />
<a href="https://samuelcolvin.github.io/JuliaByExample/">https://samuelcolvin.github.io/JuliaByExample/</a>
</li>

<li>Tasks and Parallel Computing<br />
<a href="http://docs.julialang.org/en/release-0.4/stdlib/parallel/">http://docs.julialang.org/en/release-0.4/stdlib/parallel/</a>
</li>

<li>clock(3) - Linux man page<br />
<a href="http://linux.die.net/man/3/clock">http://linux.die.net/man/3/clock</a>
</li>

<li>rand_r(3) - Linux man page<br />
<a href="http://linux.die.net/man/3/rand_r">http://linux.die.net/man/3/rand_r</a>
</li>

<li>atan2(3) - Linux man page<br />
<a href="http://linux.die.net/man/3/atan2">http://linux.die.net/man/3/atan2</a>
</li>

<li>Calling C and Fortran Code<br />
<a href="http://docs.julialang.org/en/release-0.4/manual/calling-c-and-fortran-code/?highlight=symbol">http://docs.julialang.org/en/release-0.4/manual/calling-c-and-fortran-code/?highlight=symbol</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>Introducing Julia/Functions<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Functions">https://en.wikibooks.org/wiki/Introducing_Julia/Functions</a>
</li>

<li>Functions (Julia documentation)<br />
<a href="http://docs.julialang.org/en/release-0.4/manual/functions/">http://docs.julialang.org/en/release-0.4/manual/functions/</a>
</li>

<li>Evaluate binomial coefficients<br />
<a href="http://rosettacode.org/wiki/Evaluate_binomial_coefficients">http://rosettacode.org/wiki/Evaluate_binomial_coefficients</a>
</li>

<li>Ackermann function<br />
<a href="http://rosettacode.org/wiki/Ackermann_function">http://rosettacode.org/wiki/Ackermann_function</a>
</li>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; dokumentace<br />
<a href="http://docs.julialang.org/en/release-0.4/">http://docs.julialang.org/en/release-0.4/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>Learn X in Y minutes (where X=Julia)<br />
<a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a>
</li>

<li>New Julia language seeks to be the C for scientists<br />
<a href="http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html">http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html</a>
</li>

<li>Julia: A Fast Dynamic Language for Technical Computing<br />
<a href="http://karpinski.org/publications/2012/julia-a-fast-dynamic-language">http://karpinski.org/publications/2012/julia-a-fast-dynamic-language</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="http://llvm.org/">http://llvm.org/</a>
</li>

<li>Julia: benchmarks<br />
<a href="http://julialang.org/benchmarks/">http://julialang.org/benchmarks/</a>
</li>

<li>Type system<br />
<a href="https://en.wikipedia.org/wiki/Type_system">https://en.wikipedia.org/wiki/Type_system</a>
</li>

<li>Half-precision floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Half-precision_floating-point_format">https://en.wikipedia.org/wiki/Half-precision_floating-point_format</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

