<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Julia: typový systém, funkce a metody</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Julia: typový systém, funkce a metody</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části seriálu o programovacím jazyku Julia se budeme zabývat převážně typovým systémem tohoto jazyka, který do značné míry ovlivňuje způsob tvorby programů a mj.&nbsp;umožňuje provádět různé optimalizace a kontroly. S&nbsp;typovým systémem do značné míry souvisí i problematika práce s&nbsp;funkcemi a metodami (ovšem toto slovo má poněkud odlišný význam od mainstreamového OOP).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Julia: typový systém, funkce a metody</a></p>
<p><a href="#k02">2. K&nbsp;čemu jsou typy přiřazeny? Zjištění typu hodnoty</a></p>
<p><a href="#k03">3. Základní datové typy v&nbsp;programovacím jazyku Julia</a></p>
<p><a href="#k04">4. Zjištění minimálních a maximálních hodnot základních datových typů, zjištění přesnosti</a></p>
<p><a href="#k05">5. Anotace se specifikací typu</a></p>
<p><a href="#k06">6. Kontrola typů za běhu programu (aserce)</a></p>
<p><a href="#k07">7. Abstraktní datové typy</a></p>
<p><a href="#k08">8. Vytvoření vlastního typu se specifikací jeho bitové šířky</a></p>
<p><a href="#k09">9. Kompozitní datové typy</a></p>
<p><a href="#k10">10. Konstruktory pro kompozitní datové typy</a></p>
<p><a href="#k11">11. Neměnitelné hodnoty (immutable types)</a></p>
<p><a href="#k12">12. Parametrické typy</a></p>
<p><a href="#k13">13. Funkce a metody v&nbsp;programovacím jazyku Julia</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Julia: typový systém, funkce a metody</h2>

<p><a
href="http://www.root.cz/clanky/programovaci-jazyk-julia-dalsi-stribrna-kulka-v-it/">V&nbsp;úvodním
článku tohoto seriálu</a> jsme se seznámili s&nbsp;některými základními
vlastnostmi programovacího jazyka <i>Julia</i>. Připomeňme si, že se jedná o
poměrně mladý programovací jazyk, který je primárně určený pro tvorbu
jednoúčelových skriptů, ale i rozsáhlých aplikací v&nbsp;oblastech numerické
matematiky a statistiky, s&nbsp;čímž poměrně úzce souvisí podpora pro snadné
použití nativních knihoven naprogramovaných v&nbsp;jazycích Fortran, C či C++.
Programovací jazyk <i>Julia</i> v&nbsp;těchto oblastech konkuruje především
projektům R či GNU Octave, částečně taktéž dvojici knihoven <a
href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/">Numpy</a>+SciPy
společně <a
href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-vykreslovani-grafu-s-vyuzitim-knihoven-numpy-a-matplotlib/">s&nbsp;Matplotlib</a>
(může ovšem někde nahradit i komerční produkty typu <i>Matlab</i>). Julia,
ostatně jako většina nově vznikajících jazyků, reflektuje aktuální směr vývoje
mikroprocesorů, takže podporuje i paralelní výpočty popř.  i distribuci výpočtů
mezi několik (i virtuálních) strojů.</p>

<p>Poměrně důležitou součástí programovacího jazyka <i>Julia</i> je její typový
systém, který je sice dynamický, ovšem v&nbsp;případě potřeby je možné u
libovolné hodnoty, parametru funkce či její návratové hodnoty určit její typ
způsobem, který známe ze staticky typovaných jazyků. Typový systém je navržen
takovým způsobem, že ti programátoři, kteří se jím nechtějí či nepotřebují
zabývat, ho mohou prakticky zcela ignorovat a nechat samotný jazyk Julia, ať
provádí dynamické určování typů automaticky. Na druhou stranu však znalost
typového systému a způsobu deklarace nových typů (včetně typů parametrických)
může vést jak k&nbsp;tvorbě efektivnějšího kódu (jak z&nbsp;hlediska nároků na
operační paměť, tak i rychlosti výpočtů), tak i k&nbsp;možnostem kontroly
chování aplikace v&nbsp;čase jejího běhu (runtime) či k&nbsp;možnosti deklarace
chování funkcí na základě typů předávaných parametrů (takové funkce jsou pak
realizovány takzvanými <i>metodami</i>, přičemž každá metoda předepisuje
chování funkce pro určitou množinu typů parametrů). Právě možnost tvorby
vlastních uživatelských typů představuje jednu ze silných zbraní jazyka
<i>Julia</i>, i když je samozřejmě možné, že ne všem bude tato vlastnost
vyhovovat.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. K&nbsp;čemu jsou typy přiřazeny? Zjištění typu hodnoty</h2>

<p>V&nbsp;programovacím jazyce <i>Julia</i> je informace o typu přiřazena vždy
k&nbsp;hodnotě, nikoli nutně k&nbsp;proměnné. Proměnná totiž v&nbsp;tom
nejjednodušším případě představuje pouhou vazbu mezi jménem proměnné a
konkrétní hodnotou. To mj.&nbsp;znamená, že jedna proměnná může mít
v&nbsp;různém čase přiřazenu hodnotu s&nbsp;odlišným datovým typem. Na druhou
stranu se ovšem k&nbsp;proměnné může deklarovat aserce kontrolující typ
hodnoty, což je systém podobný staticky typovaným programovacím jazykům. Tento
koncept je sice logický a pochopitelný, ovšem může způsobovat problémy těm
programátorům, kteří přechází například z&nbsp;jazyka <i>Java</i>, kde je
koncept typů vlastně převrácený &ndash; typ je deklarací přiřazen
k&nbsp;proměnným (atributům ...) a hodnota přiřazovaná do takové proměnné je
konvertována na požadovaný typ a teprve pokud se konverze nedá automaticky
provést podle pravidel popsaných ve specifikaci jazyka, je o tom programátor
informován.</p>

<p>Pro zjištění typu libovolné hodnoty je možné použít funkci nazvanou
<strong>typeof()</strong>:</p>

<pre>
julia&gt; <strong>typeof(42)</strong>
Int64
&nbsp;
julia&gt; <strong>typeof(1//3)</strong>
Rational{Int64}
&nbsp;
julia&gt; <strong>typeof(pi)</strong>
Irrational{:&pi;}
&nbsp;
julia&gt; <strong>typeof(1.2)</strong>
Float64
&nbsp;
julia&gt; <strong>typeof(1+2im)</strong>
Complex{Int64}
&nbsp;
julia&gt; <strong>typeof(1.2+3im)</strong>
Complex{Float64}
</pre>

<p>Samozřejmě lze tutéž funkci použít i na výrazy, přičemž daný výraz je
vyhodnocen (vypočten) a následně je zjištěn typ výsledku. Povšimněte si
automatických konverzí u výrazů, v&nbsp;nichž se vyskytují hodnoty různých
datových typů:</p>

<pre>
julia&gt; <strong>typeof(1+2)</strong>
Int64
&nbsp;
julia&gt; <strong>typeof(1+2//3)</strong>
Rational{Int64}
&nbsp;
julia&gt; <strong>typeof(1.2+2//3)</strong>
Float64
&nbsp;
julia&gt; <strong>typeof(sin(10))</strong>
Float64
&nbsp;
julia&gt; <strong>typeof(true)</strong>
Bool
&nbsp;
julia&gt; <strong>typeof(false)</strong>
Bool
</pre>

<p>Typ se zachová i u hodnot typu nekonečno (kladné i záporné) nebo NaN:</p>

<pre>
julia&gt; <strong>typeof(1/0)</strong>
Float64
&nbsp;
julia&gt; <strong>typeof(-1/0)</strong>
Float64
&nbsp;
julia&gt; <strong>typeof(0/0)</strong>
Float64
</pre>

<p>Tutéž funkci je možné použít i pro proměnné, ovšem jak již víme
z&nbsp;předchozího textu, nezjišťuje se typ proměnné (taková informace vlastně
neexistuje), ale typ hodnoty spojené v&nbsp;daný okamžik se jménem
proměnné:</p>

<pre>
julia&gt; <strong>x=42</strong>
42
&nbsp;
julia&gt; <strong>typeof(x)</strong>
Int64
&nbsp;
julia&gt; <strong>x=3.14</strong>
3.14
&nbsp;
julia&gt; <strong>typeof(x)</strong>
Float64
&nbsp;
julia&gt; <strong>x=1//3</strong>
1//3
&nbsp;
julia&gt; <strong>typeof(x)</strong>
Rational{Int64}
&nbsp;
julia&gt; <strong>x=pi</strong>
&pi; = 3.1415926535897...
&nbsp;
julia&gt; <strong>typeof(x)</strong>
Irrational{:&pi;}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Základní datové typy v&nbsp;programovacím jazyku Julia</h2>

<p>Se základními datovými typy jsme se již částečně setkali minule, takže si
nyní pouze popišme základní vlastnosti těchto typů:</p>

<table>
<tr><th>Jméno</th><th>Znaménko?</th><th>Inf</th><th>NaN</th><th>Šířka(b)</th><th>Nejmenší hodnota</th><th>Nejvyšší hodnota</th></tr>
<tr><td>Bool   </td><td>ne    </td><td>ne </td><td>ne </td><td>8  </td><td>false </td><td>true</td></tr>
<tr><td>&nbsp; </td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Int8   </td><td>ano   </td><td>ne </td><td>ne </td><td>8  </td><td>-2<sup>7</sup></td><td>2<sup>7</sup> - 1  </td></tr>
<tr><td>UInt8  </td><td>ne    </td><td>ne </td><td>ne </td><td>8  </td><td>0</td><td>2<sup>8</sup> - 1  </td></tr>
<tr><td>Int16  </td><td>ano   </td><td>ne </td><td>ne </td><td>16 </td><td>-2<sup>15</sup></td><td>2<sup>15</sup> - 1 </td></tr>
<tr><td>UInt16 </td><td>ne    </td><td>ne </td><td>ne </td><td>16 </td><td>0</td><td>2<sup>16</sup> - 1 </td></tr>
<tr><td>Int32  </td><td>ano   </td><td>ne </td><td>ne </td><td>32 </td><td>-2<sup>31</sup></td><td>2<sup>31</sup> - 1 </td></tr>
<tr><td>UInt32 </td><td>ne    </td><td>ne </td><td>ne </td><td>32 </td><td>0</td><td>2<sup>32</sup> - 1 </td></tr>
<tr><td>Int64  </td><td>ano   </td><td>ne </td><td>ne </td><td>64 </td><td>-2<sup>63</sup></td><td>2<sup>63</sup> - 1 </td></tr>
<tr><td>UInt64 </td><td>ne    </td><td>ne </td><td>ne </td><td>64 </td><td>0</td><td>2<sup>64</sup> - 1 </td></tr>
<tr><td>Int128 </td><td>ano   </td><td>ne </td><td>ne </td><td>128</td><td>-2<sup>127</sup></td><td>2<sup>127</sup> - 1</td></tr>
<tr><td>UInt128</td><td>ne    </td><td>ne </td><td>ne </td><td>128</td><td>0</td><td>2<sup>128</sup> - 1</td></tr>
<tr><td>&nbsp; </td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Float16</td><td>ano   </td><td>ano</td><td>ano</td><td>16</td><td>-65504</td><td>65504</td></tr>
<tr><td>Float32</td><td>ano   </td><td>ano</td><td>ano</td><td>32</td><td>-3.402823 &times; 10<sup>38</sup></td><td>3.402823 &times; 10<sup>38</sup></td></tr>
<tr><td>Float64</td><td>ano   </td><td>ano</td><td>ano</td><td>64</td><td>-1.7 &times; 10<sup>308</sup></td><td>1.7 &times; 10<sup>308</sup></td></tr>
</table>

<p>Mezi složené datové typy patří <strong>Complex64</strong> (dvě hodnoty typu
<strong>Float32</strong>) a <strong>Complex128</strong> (dvě hodnoty typu
<strong>Float64</strong>).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zjištění minimálních a maximálních hodnot základních datových typů, zjištění přesnosti</h2>

<p>Pro zjištění minimálních a maximálních reprezentovatelných hodnot pro
jednotlivé numerické datové typy slouží funkce nazvané
<strong>typemin()</strong> a <strong>typemax()</strong>:</p>

<pre>
julia&gt; <strong>typemin(Int8),typemin(Int16),typemin(Int32),typemin(Int64)</strong>
(-128,-32768,-2147483648,-9223372036854775808)
&nbsp;
julia&gt; <strong>typemax(Int8),typemin(Int16),typemin(Int32),typemin(Int64)</strong>
(127,-32768,-2147483648,-9223372036854775808)
&nbsp;
julia&gt; <strong>typemin(UInt8),typemin(UInt16),typemin(UInt32),typemin(UInt64)</strong>
(0x00,0x0000,0x00000000,0x0000000000000000)
&nbsp;
julia&gt; <strong>typemax(UInt8),typemax(UInt16),typemax(UInt32),typemax(UInt64)</strong>
(0xff,0xffff,0xffffffff,0xffffffffffffffff)
</pre>

<p>Povšimněte si, že se u typů s&nbsp;plovoucí řádovou čárkou (<i>floating
point</i>) vrací kladné a záporné nekonečno, nikoli minimální či maximální
reprezentovatelná hodnota odlišná od nekonečna (v&nbsp;Javě například
<strong>Double.MAX_VALUE</strong>):</p>

<pre>
julia&gt; <strong>typemin(Float16), typemin(Float32), typemin(Float64)</strong>
(-Inf16,-Inf32,-Inf)
&nbsp;
julia&gt; <strong>typemax(Float16), typemax(Float32), typemax(Float64)</strong>
(Inf16,Inf32,Inf)
</pre>

<p>Přesnost (vyjádřenou v&nbsp;počtu bitů mantisy) získáme funkcí
<strong>precision()</strong>:</p>

<pre>
julia&gt; <strong>precision(Float16)</strong>
11
&nbsp;
julia&gt; <strong>precision(Float32)</strong>
24
&nbsp;
julia&gt; <strong>precision(Float64)</strong>
53
</pre>

<p>U celočíselných datových typů nelze tuto funkci použít.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Anotace se specifikací typu</h2>

<p>V&nbsp;programovacím jazyce <i>Julia</i> je možné použít operátor ::
(&bdquo;čtyřtečka&ldquo;), který dokáže pro hodnotu, výraz, proměnnou, parametr
funkce atd.&nbsp;zajistit, že bude skutečně použit vhodný datový typ. Pokud je
tento operátor použit společně s&nbsp;proměnnou či parametrem funkce, jedná se
vlastně o určitou formu statického typování, i když test, zda typy skutečně
odpovídají, je proveden až v&nbsp;čase běhu aplikace (runtime). Podívejme se
nejdříve na způsob použití tohoto operátoru pro kontrolu (či spíše aserci), zda
je hodnota požadovaného typu:</p>

<pre>
julia&gt; <strong>1::Int</strong>
1
&nbsp;
julia&gt; <strong>1::Float32</strong>
ERROR: TypeError: typeassert: expected Float32, got Int64
&nbsp;
julia&gt; <strong>1::Bool</strong>
ERROR: TypeError: non-boolean (Int64) used in boolean context
&nbsp;
julia&gt; <strong>true::Bool</strong>
true
&nbsp;
julia&gt; <strong>true::Int</strong>
ERROR: TypeError: typeassert: expected Int64, got Bool
</pre>

<p>Pozor na nutnost použití závorek u typu &bdquo;zlomek&ldquo; či komplexní
číslo:</p>

<pre>
julia&gt; <strong>(1//3)::Rational</strong>
1//3
&nbsp;
julia&gt; <strong>(1+2im)::Complex</strong>
1 + 2im
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Kontrola typů za běhu (aserce)</h2>

<p>Kontrolu, zda je nějaká hodnota požadovaného datového typu, je možné provést
i pro výrazy. Pokud je typ výsledku odlišný, vyhodí se výjimka, pokud však
kontrola proběhne v&nbsp;pořádku, vrátí se hodnota vypočteného výrazu. Opět se
podívejme na několik testů:</p>

<pre>
julia&gt; <strong>(1+2)::Int8</strong>
ERROR: TypeError: typeassert: expected Int8, got Int64
&nbsp;
julia&gt; <strong>(1+2)::Int64</strong>
3
&nbsp;
julia&gt; <strong>(1+2)::Int</strong>
3
&nbsp;
julia&gt; <strong>(1+2)::Number</strong>
3
&nbsp;
julia&gt; <strong>(1//3+1//2)::Number</strong>
5//6
&nbsp;
julia&gt; <strong>(1//3+1//2)::Int</strong>
ERROR: TypeError: typeassert: expected Int64, got Rational{Int64}
</pre>

<p>Kontrola se aplikuje ihned po její deklaraci, a to i pro existující
hodnotu:</p>

<pre>
julia&gt; <strong>z=0</strong>
0
&nbsp;
julia&gt; <strong>z::Int8</strong>
ERROR: TypeError: typeassert: expected Int8, got Int64
&nbsp;
julia&gt; <strong>z::Int64</strong>
0
&nbsp;
julia&gt; <strong>z=z/2.0</strong>
0.5
&nbsp;
julia&gt; <strong>z</strong>
0.5
&nbsp;
julia&gt; <strong>z::Int64</strong>
ERROR: TypeError: typeassert: expected Int64, got Float64
</pre>

<p>Ovšem mnohem důležitější je možnost deklarace typů parametrů metody. Jak si
řekneme v&nbsp;dalším textu, může se s&nbsp;využitím několika metod
implementovat funkce, jejíž chování může být pro různé typy předávaných
parametrů odlišné. Nyní se tedy podívejme pouze na velmi jednoduchý příklad,
kdy jazyk Julia kontroluje, zda metodě <strong>add</strong> skutečně předáváme
dvě celá čísla se znaménkem:</p>

<pre>
julia&gt; <strong>function add(x::Int, y::Int)</strong>
       return x+y
       end
add (generic function with 1 method)
</pre>

<p>Metodu ihned otestujeme pro různé typy parametrů:</p>

<pre>
julia&gt; <strong>add(1,2)</strong>
3
&nbsp;
julia&gt; <strong>add(1,2.0)</strong>
ERROR: MethodError: `add` has no method matching add(::Int64, ::Float64)
Closest candidates are:
  add(::Int64, ::Int64)
&nbsp;
julia&gt; <strong>add(1,1//3)</strong>
ERROR: MethodError: `add` has no method matching add(::Int64, ::Rational{Int64})
Closest candidates are:
  add(::Int64, ::Int64)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Abstraktní datové typy</h2>

<p>V&nbsp;programovacím jazyce Julia je možné pracovat i s&nbsp;abstraktími
datovými typy, které se nazývají abstraktní z&nbsp;toho důvodu, že není možné
vytvářet hodnoty mající tento typ. K&nbsp;čemu jsou tedy abstraktní datové typy
užitečné? Umožňují nám vybudovat hierarchii typů, která do určité míry odpovídá
hierarchii tříd v&nbsp;objektově orientovaném programování. Každý datový typ
(ať již typ konkrétní či abstraktní) totiž může mít svého předka a je tak možné
(k&nbsp;čemuž se dostaneme později) například deklarovat metodu akceptující
nikoli konkrétní datový typ, ale jeho abstrakci. Příkladem může být například
metoda pro výpočet faktoriálu, která by neměla akceptovat libovolný vstup, ale
pouze kladná celá čísla reprezentovaná konkrétními typy <strong>UInt8</strong>,
<strong>UInt16</strong>, <strong>UInt32</strong>, <strong>UInt64</strong> či
<strong>UInt128</strong>. Ovšem celou situaci si můžeme zjednodušit a vytvořit
metodu akceptující hodnotu abstraktního datového typu
<strong>Unsigned</strong>, který zahrnuje výše zmíněné odvozené konkrétní
datové typy.</p>

<p>Základní hierarchie datových typů programovacího jazyka Julia je sice (i
když poněkud nepřesně) popsána v&nbsp;dokumentaci, ovšem pro libovolný typ lze
získat informace o jeho předku či potomcích velmi snadno, a to s&nbsp;využitím
funkcí nazvaných <strong>super()</strong> a <strong>subtypes()</strong>.
Podívejme se na použití těchto funkcí:</p>

<pre>
julia&gt; <strong>super(Int32)</strong>
Signed
&nbsp;
julia&gt; <strong>super(Signed)</strong>
Integer
&nbsp;
julia&gt; <strong>super(UInt8)</strong>
Unsigned
&nbsp;
julia&gt; <strong>super(Unsigned)</strong>
Integer
</pre>

<p>Vidíme, že Integer je abstraktní typ, pod nějž spadají celá čísla se
znaménkem i bez znaménka. Jaký je jeho nadtyp?:</p>

<pre>
julia&gt; <strong>super(Integer)</strong>
Real
&nbsp;
julia&gt; <strong>super(Real)</strong>
Number
&nbsp;
julia&gt; <strong>super(Number)</strong>
Any
&nbsp;
julia&gt; <strong>super(Any)</strong>
Any
</pre>

<p>Opět vidíme, že na vrcholu hierarchie je typ <strong>Any</strong>, který je
použit implicitně, pokud nestanovíme jinak (tento typ má přibližně 220 podtypů,
v&nbsp;závislosti na načtených knihovnách). Zajímavé jsou podtypy abstraktního
typu <strong>Real</strong>:</p>

<pre>
julia&gt; <strong>subtypes(Real)</strong>
4-element Array{Any,1}:
 AbstractFloat       
 Integer             
 Irrational{sym}     
 Rational{T&lt;:Integer}
</pre>

<p>I abstraktního typu <strong>Integer</strong> a
<strong>AbstractFloat</strong>:</p>

<pre>
julia&gt; <strong>subtypes(Integer)</strong>
4-element Array{Any,1}:
 BigInt  
 Bool    
 Signed  
 Unsigned
</pre>

<pre>
julia&gt; <strong>subtypes(AbstractFloat)</strong>
4-element Array{Any,1}:
 BigFloat
 Float16 
 Float32 
 Float64 
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vytvoření vlastního typu se specifikací jeho bitové šířky</h2>

<p>Zajímavé, mnohdy velmi užitečné a poněkud neobvyklé je, že uživatelé mohou
vytvářet své vlastní datové typy odvozené od již existujících numerických typů,
přičemž je možné specifikovat bitovou šířku nového datového typu.
V&nbsp;současné verzi programovacího jazyka Julia musí být bitová šířka
celočíselným násobkem osmi, což je však pochopitelné, především když si
uvědomíme, jak jsou numerické hodnoty ukládány do operační paměti. Pro
vytvoření nového datového typu uloženého na specifikovaný počet bitů se používá
deklarace <strong>bitstype</strong> vypadající následovně:</p>

<pre>
bitstype počet_bitů jméno &lt;: nadřazený_typ
</pre>

<p>Podívejme se, jak se vytvoří nový celočíselný datový typ bez znaménka, který
používá 40 bitů (což je násobek osmi):</p>

<pre>
julia&gt; <strong>bitstype 40 UInt40 &lt;: Unsigned</strong>
</pre>

<p>Můžeme si vypsat základní informace o tomto typu:</p>

<pre>
help?&gt; <strong>UInt40</strong>
search: UInt40 UInt4 UInt64 uint64
&nbsp;
  No documentation found.
&nbsp;
  Summary:
&nbsp;
  immutable UInt40 &lt;: Unsigned
</pre>

<p>Potřebujete při výpočtech pracovat s&nbsp;celými čísly se znaménkem o šířce
256 bitů?:</p>

<pre>
julia&gt; <strong>bitstype 256 Int256 &lt;: Signed</strong>
</pre>

<p>Opět si můžeme vypsat základní informace o tomto typu:</p>

<pre>
help?&gt; <strong>Int256</strong>
search: Int256
&nbsp;
  No documentation found.
&nbsp;
  Summary:
&nbsp;
  immutable Int256 &lt;: Signed
</pre>

<p>Pro úplnost si ukažme, jak jsou deklarovány základní numerické datové typy
(a boolean), s&nbsp;nimiž jsme se seznámili <a href="#k03">ve třetí
kapitole</a>:</p>

<pre>
bitstype 16 Float16 &lt;: AbstractFloat
bitstype 32 Float32 &lt;: AbstractFloat
bitstype 64 Float64 &lt;: AbstractFloat
&nbsp;
bitstype 8  Bool &lt;: Integer
bitstype 32 Char
&nbsp;
bitstype 8  Int8     &lt;: Signed
bitstype 8  UInt8    &lt;: Unsigned
bitstype 16 Int16    &lt;: Signed
bitstype 16 UInt16   &lt;: Unsigned
bitstype 32 Int32    &lt;: Signed
bitstype 32 UInt32   &lt;: Unsigned
bitstype 64 Int64    &lt;: Signed
bitstype 64 UInt64   &lt;: Unsigned
bitstype 128 Int128  &lt;: Signed
bitstype 128 UInt128 &lt;: Unsigned
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Kompozitní datové typy</h2>

<p>Pod názvem kompozitní datové typy si můžeme představit například struktury
(<i>struct</i>) v&nbsp;jazyku C či záznamy (<i>record</i>) z&nbsp;Pascalu. Díky
možnostem deklarace nových kompozitních datových typů bylo možné do jazyka
Julia přidat nám již známá komplexní čísla (<strong>Complex64</strong> a
<strong>Complex128</strong>), ovšem uživatelé si mohou vytvořit libovolné
množství dalších podobných typů. Podívejme se na několik jednoduchých příkladů
&ndash; bude se jednat o takzvané kvaterniony (čtveřice), které jsou zobecněním
komplexních čísel:</p>

<pre>
julia&gt; <strong>type Quat</strong>
       <strong>r</strong>
       <strong>i</strong>
       <strong>j</strong>
       <strong>k</strong>
       <strong>end</strong>
&nbsp;
help?&gt; <strong>Quat</strong>
&nbsp;
  No documentation found.
&nbsp;
  Summary:
&nbsp;
  type Quat &lt;: Any
&nbsp;
  Fields:
&nbsp;
  r :: Any
  i :: Any
  j :: Any
  k :: Any
</pre>

<p>Samozřejmě je možné specifikovat i typy jednotlivých položek kompozitního
datového typu:</p>

<pre>
julia&gt; <strong>type Quat256</strong>
       <strong>r::Float32</strong>
       <strong>i::Float32</strong>
       <strong>j::Float32</strong>
       <strong>k::Float32</strong>
       <strong>end</strong>
&nbsp;
help?&gt; <strong>Quat256</strong>
search: Quat256
&nbsp;
  No documentation found.
&nbsp;
  Summary:
&nbsp;
  type Quat256 &lt;: Any
&nbsp;
  Fields:
&nbsp;
  r :: Float32
  i :: Float32
  j :: Float32
  k :: Float32
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Konstruktory pro kompozitní datové typy</h2>

<p>Způsob vytvoření hodnoty některého ze základních datových typů samozřejmě
známe &ndash; samotný zápis literálu představuje danou hodnotu (42 apod.).
Ovšem v&nbsp;případě kompozitních datových typů je to nepatrně složitější,
protože takový typ má větší množství položek, které je nutné inicializovat. Pro
tento účel slouží takzvané konstruktory, které jsou vytvořeny automaticky.
Přesněji řečeno jsou pro každý typ vytvořeny hned dva konstruktory, přičemž
jeden volá funkci <strong>convert()</strong> pro konverzi svého parametru a
druhý akceptuje takový počet parametrů, který odpovídá počtu položek datového
typu. Na chvíli se vraťme k&nbsp;námi definovaným typům <strong>Quat</strong> a
<strong>Quat256</strong>. Instance (objekty) těchto typů lze vytvořit snadno,
ovšem povšimněte si toho, že pro stejné parametry získáme odlišné výsledky:</p>

<pre>
julia&gt; <strong>x=Quat(1, 2//3, 3.14, 100000000)</strong>
Quat(1,2//3,3.14,100000000)
&nbsp;
julia&gt; <strong>y=Quat256(1, 2//3, 3.14, 100000000)</strong>
Quat256(1.0f0,0.6666667f0,3.14f0,1.0f8)
</pre>

<p>V&nbsp;prvním případě je kompozitní datový typ <strong>Quat</strong> složen
ze čtyř položek typu <strong>Any</strong> a proto se při konstrukci objektu
neprovede žádná konverze. Ve druhém případě jsou položky typu
<strong>Float32</strong>, takže se interpret pokusí o konverzi, která se zde
povede. Ovšem někdy konverze není možná, takže interpret při kontrole typů
zahlásí chybu:</p>

<pre>
julia&gt; <strong>z=Quat("aa", "bb", "cc", "dd")</strong>
Quat("aa","bb","cc","dd")
&nbsp;
julia&gt; <strong>w=Quat256("aa", "bb", "cc", "dd")</strong>
ERROR: MethodError: `convert` has no method matching convert(::Type{Float32}, ::ASCIIString)
This may have arisen from a call to the constructor Float32(...),
since type constructors fall back to convert methods.
Closest candidates are:
  call{T}(::Type{T}, ::Any)
  convert(::Type{Float32}, ::Int8)
  convert(::Type{Float32}, ::Int16)
  ...
 in call at none:2
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Neměnitelné hodnoty (immutable types)</h2>

<p>K&nbsp;položkám kompozitních datových typů se přistupuje přes operátor
tečky:</p>

<pre>
julia&gt; <strong>x.r=100</strong>
100
&nbsp;
julia&gt; <strong>x</strong>
Quat(100,2//3,3.14,100000000)
&nbsp;
julia&gt; <strong>x.i</strong>
2//3
</pre>

<p>V&nbsp;některých případech nám však nemusí vyhovovat, že se položky dají
měnit stylem <strong>proměnná.položka=hodnota</strong>. V&nbsp;takových
případech je možné kompozitní datový typ deklarovat takovým způsobem, že
položky typu nebudou měnitelné (tedy budou <i>immutable</i>). Je to velmi
jednoduché, což je patrné z&nbsp;následujícího příkladu:</p>

<pre>
julia&gt; <strong>immutable ImmutableQuat256</strong>
       <strong>r::Float32</strong>
       <strong>i::Float32</strong>
       <strong>j::Float32</strong>
       <strong>k::Float32</strong>
       <strong>end</strong>
&nbsp;
julia&gt; <strong>q=ImmutableQuat256(1/2, 1/3, 1/4, 1/5)</strong>
ImmutableQuat256(0.5f0,0.33333334f0,0.25f0,0.2f0)
</pre>

<p>Pokus o přečtení položky je validní, ovšem pokus o její přepsání skončí
výjimkou:</p>

<pre>
julia&gt; <strong>q.i</strong>
0.33333334f0
&nbsp;
julia&gt; <strong>q.i=10</strong>
ERROR: type ImmutableQuat256 is immutable
</pre>

<p>Vidíme, že jediný okamžik, kdy lze zapisovat do položek neměnitelného typu,
je konstrukce objektu tohoto typu (to ve skutečnosti není zcela přesné ve
chvíli, kdy objekt obsahuje pole, ovšem tímto případem se prozatím nebudeme
zabývat).</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Parametrické typy</h2>

<p>Typový systém jazyka Julia by nebyl úplný, pokud by v&nbsp;něm nebyly
podporovány parametrické typy. Podívejme se nejdříve na příklad, z&nbsp;něhož
bude patrné, jak lze parametrické typy použít a kde mají význam. Jedná se stále
o deklaraci typu představujícího kvaternion, ovšem typy položek jsou
parametrizovatelné:</p>

<pre>
julia&gt; <strong>type PQuat{T}</strong>
       <strong>r::T</strong>
       <strong>i::T</strong>
       <strong>j::T</strong>
       <strong>k::T</strong>
       <strong>end</strong>
</pre>

<p>U takto definovaného kompozitního typu lze určit typ všech položek až při
volání konstruktoru, a to například takto:</p>

<pre>
julia&gt; <strong>x=PQuat{Float32}(1, 2, 3, 4)</strong>
PQuat{Float32}(1.0f0,2.0f0,3.0f0,4.0f0)
&nbsp;
julia&gt; <strong>y=PQuat{UInt8}(1, 2, 3, 4)</strong>
PQuat{UInt8}(0x01,0x02,0x03,0x04)
</pre>

<p>či dokonce:</p>

<pre>
julia&gt; <strong>z=PQuat{Bool}(1, 0, 1, 0)</strong>
PQuat{Bool}(true,false,true,false)
</pre>

<p>Zde je nutné upozornit na to, že parametr je nedílnou součástí typu (tato
informace není zapomenuta), o čemž se lze snadno přesvědčit:</p>

<pre>
julia&gt; <strong>typeof(x)</strong>
PQuat{Float32}
&nbsp;
julia&gt; <strong>typeof(y)</strong>
PQuat{Bool}
</pre>

<p>Parametry typu však mohou být i mnohem divočejší, například:</p>

<pre>
julia&gt; <strong>type PPQuat{T1,T2,T3,T4}</strong>
       <strong>r::T1</strong>
       <strong>i::T2</strong>
       <strong>j::T3</strong>
       <strong>k::T4</strong>
       <strong>end</strong>
&nbsp;
julia&gt; <strong>xx=PPQuat{Int,Any,Float32,Complex128}(42, "ahoj", 3.14, 1+2im)</strong>
PPQuat{Int64,Any,Float32,Complex{Float64}}(42,"ahoj",3.14f0,1.0 + 2.0im)
&nbsp;
julia&gt; <strong>typeof(xx)</strong>
PPQuat{Int64,Any,Float32,Complex{Float64}}
</pre>

<p>Povšimněte si, že i <strong>Complex</strong> je ve skutečnosti parametrickým
datovým typem!</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Funkce a metody v&nbsp;programovacím jazyku Julia</h2>

<p>Zajímavé je použití datových typů při tvorbě funkcí. V&nbsp;jazyce Julia
může být funkce implementována formou několika <i>metod</i> (minimálně jedné
metody), přičemž to, která konkrétní metoda se zavolá, se určí na základě typů
předávaných parametrů. Zde je nutné zdůraznit, že tento princip je zobecněním
běžných metod známých z&nbsp;OOP, protože tam se konkrétní metoda určuje na
základě prvního parametru (<i>this/self</i>). Příklad nyní bude velmi
jednoduchý &ndash; vytvoříme si funkci pro součet dvou hodnot, přičemž tato
funkce bude implementována dvojicí metod. První metoda akceptuje dvě čísla
(libovolného typu), druhá metoda akceptuje kvaterniony:</p>

<pre>
julia&gt; <strong>function add(a::Number, b::Number)</strong>
       <strong>a+b</strong>
       <strong>end</strong>
add (generic function with 1 method)
&nbsp;
julia&gt; <strong>function add(a::Quat256, b::Quat256)</strong>
       <strong>Quat256(a.r+b.r, a.i+b.i, a.j+b.j, a.k+b.k)</strong>
       <strong>end</strong>
add (generic function with 2 methods)
</pre>

<p>Nyní si můžeme tyto metody (neboli jedinou funkci <strong>add</strong>!)
otestovat:</p>

<pre>
julia&gt; <strong>add(x,y)</strong>
Quat256(6.0f0,8.0f0,10.0f0,12.0f0)
&nbsp;
julia&gt; <strong>add(1,2)</strong>
3
&nbsp;
julia&gt; <strong>add(1//2, 1//3)</strong>
5//6
</pre>

<p>Ovšem podle očekávání následující příkaz neprojde (nebyl by však problém ji
dopsat):</p>

<pre>
julia&gt; <strong>add(1//2, x)</strong>
ERROR: MethodError: `add` has no method matching add(::Rational{Int64}, ::Quat256)
Closest candidates are:
  add(::Number, ::Number)
  add(::Quat256, ::Quat256)
</pre>

<p>Typový systém společně s&nbsp;funkcemi/metodami představuje
v&nbsp;programovacím jazyku Julia velmi silnou a přitom relativně snadno
pochopitelnou techniku, kterou v&nbsp;případě potřeby dokážou využít i lidé,
kteří nejsou profesionálními programátory, ale odborníky ve své oblasti
(zpracování signálů, numerické výpočty, konstrukce atd.).</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; dokumentace<br />
<a href="http://docs.julialang.org/en/release-0.4/">http://docs.julialang.org/en/release-0.4/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Introducing Julia/Metaprogramming<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming">https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>Learn X in Y minutes (where X=Julia)<br />
<a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a>
</li>

<li>New Julia language seeks to be the C for scientists<br />
<a href="http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html">http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html</a>
</li>

<li>Julia: A Fast Dynamic Language for Technical Computing<br />
<a href="http://karpinski.org/publications/2012/julia-a-fast-dynamic-language">http://karpinski.org/publications/2012/julia-a-fast-dynamic-language</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="http://llvm.org/">http://llvm.org/</a>
</li>

<li>Julia: benchmarks<br />
<a href="http://julialang.org/benchmarks/">http://julialang.org/benchmarks/</a>
</li>

<li>Type system<br />
<a href="https://en.wikipedia.org/wiki/Type_system">https://en.wikipedia.org/wiki/Type_system</a>
</li>

<li>Half-precision floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Half-precision_floating-point_format">https://en.wikipedia.org/wiki/Half-precision_floating-point_format</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

