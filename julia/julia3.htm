<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Julia: funkce jako základní stavební prvek programů</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Julia: funkce jako základní stavební prvek programů</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části seriálu o programovacím jazyce Julia se budeme zabývat funkcemi, které v&nbsp;tomto programovacím jazyce tvoří základní stavební prvek všech programů. Samozřejmě si popíšeme i některé vestavěné funkce vyššího řádu, způsob provedení paralelních výpočtů s&nbsp;využitím funkce pmap() apod.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Julia: funkce jako základní stavební prvek programů</a></p>
<p><a href="#k02">2. Běžné funkce</a></p>
<p><a href="#k03">3. Zkrácený zápis funkce</a></p>
<p><a href="#k04">4. Anonymní funkce</a></p>
<p><a href="#k05">5. Numerický výpočet určitého integrálu</a></p>
<p><a href="#k06">6. Funkce s&nbsp;větším množstvím návratových hodnot</a></p>
<p><a href="#k07">7. Funkce s&nbsp;proměnným počtem argumentů (variadické funkce)</a></p>
<p><a href="#k08">8. Funkce s&nbsp;volitelnými argumenty</a></p>
<p><a href="#k09">9. Funkce s&nbsp;pojmenovanými argumenty (<i>keyword arguments</i>)</a></p>
<p><a href="#k10">10. Operátory jsou jen jinak zapisované funkce</a></p>
<p><a href="#k11">11. Jména funkcí pro speciální operátory</a></p>
<p><a href="#k12">12. Funkce vyššího řádu: <strong>map</strong> a <strong>pmap</strong></a></p>
<p><a href="#k13">13. Další užitečné funkce vyššího řádu <strong>reduce</strong>, <strong>foldl</strong> a <strong>foldr</strong></a></p>
<p><a href="#k14">14. Speciální varianty <strong>reduce</strong>: <strong>maximum</strong>, <strong>minimum</strong> a <strong>sum</strong></a></p>
<p><a href="#k15">15. Predikáty <strong>any</strong> a <strong>all</strong></a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Julia: funkce jako základní stavební prvek programů</h2>

<p>Základní informace o použití funkcí v&nbsp;programovacím jazyku <i>Julia</i>
jsme si již řekli <a
href="http://www.root.cz/clanky/programovaci-jazyk-julia-dalsi-stribrna-kulka-v-it/">v&nbsp;první</a>
i <a
href="http://www.root.cz/clanky/programovaci-jazyk-julia-typovy-system-funkce-a-metody/">ve
druhé části</a> tohoto seriálu, ovšem vzhledem k&nbsp;tomu, že funkce (a taktéž
operátory, což jsou ve skutečnosti jen odlišně zapisované funkce) mají
v&nbsp;tomto jazyku význam základního stavebního prvku, se jimi dnes budeme
zabývat podrobněji. Nezapomeneme samozřejmě ani na použití anonymních funkcí,
především v&nbsp;souvislosti s&nbsp;funkcemi vyššího řádu. Programovací jazyk
Julia totiž přebírá mnoho svých vlastností z&nbsp;klasických funkcionálních
jazyků, takže v&nbsp;něm nalezneme jak základní funkce vyššího řádu typu
<strong>map</strong> (i její paralelní verze <strong>pmap</strong>),
<strong>apply</strong>, <strong>reduce</strong> (specifikované přesněji ve
dvojici <strong>foldl</strong> a <strong>foldr</strong>), tak i různé další
funkce, které jako svůj parametr akceptují jiné funkce. Příkladem může být
funkce nazvaná <strong>quadgk</strong> určená pro numerickou integraci
libovolné funkce, která je do <strong>quadgk</strong> předána.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Běžné funkce</h2>

<p>Běžný zápis funkce vypadá velmi jednoduše a do značné míry se podobá zápisu
funkce v&nbsp;programovacím jazyku <i>Lua</i>: definice funkce začíná klíčovým
slovem <strong>function</strong>, za nímž následuje jméno funkce se seznamem
parametrů umístěných v&nbsp;závorce. Po této hlavičce je možné zapsat libovolné
množství příkazů tvořících tělo funkce, přičemž na libovolném místě lze
v&nbsp;případě potřeby použít příkaz <strong>return</strong> pro ukončení
funkce a pro vrácení návratové hodnoty či hodnot. Celá definice funkce končí
klíčovým slovem <strong>end</strong>. Typickým příkladem je uživatelská funkce
určená pro součin dvou hodnot:</p>

<pre>
function mul(x,y)
    return x*y;
end
</pre>

<p>Ve skutečnosti není středník důležitý, takže ho lze vynechat:</p>

<pre>
function mul(x,y)
    return x*y
end
</pre>

<p>V&nbsp;tomto případě je možné klíčové slovo <strong>return</strong>
vynechat, protože hodnota posledního příkazu či výrazu se automaticky považuje
i za návratovou hodnotu funkce:</p>

<pre>
function mul(x,y)
    x*y;
end
</pre>

<p>Opět je možné vynechat přebytečný středník:</p>

<pre>
function mul(x,y)
    x*y
end
</pre>

<p>Z&nbsp;předchozí části tohoto seriálu ovšem již víme, že se funkce mohou
skládat z&nbsp;metod, přičemž se jednotlivé metody od sebe odlišují typem
parametrů. To mj.&nbsp;znamená, že funkci <strong>mul</strong>
(resp.&nbsp;jednu její metodu) můžeme napsat i takto:</p>

<pre>
function mul(x::Number, y::Number)
    x*y
end
</pre>

<p>Navíc můžeme k&nbsp;výše zapsané metodě akceptující jako své parametry
dvojici čísel libovolného typu přidat i metodu určenou pro výpočet skalárního
součinu dvou vektorů (opět pro zjednodušení vynecháme klíčové slovo
<strong>return</strong>):</p>

<pre>
function mul(x::Array{Int,1}, y::Array{Int,1})
    vecdot(x,y)
end
</pre>

<p>Poznámka: zápis <strong>Array{Int,1}</strong> popisuje pole s&nbsp;jednou
dimenzí (tedy vektor) s&nbsp;prvky typu <strong>Int</strong>. Ovšem samotný typ
<strong>Int</strong> je ve skutečnosti abstraktním typem a může značit
konkrétní typ <strong>Int8</strong>, <strong>Int16</strong>,
<strong>Int32</strong> atd. až <strong>Int128</strong>.</p>

<p>Obě dvě metody tvořící dohromady funkci <strong>mul</strong> si můžeme velmi
snadno otestovat:</p>

<pre>
julia&gt; <strong>mul(6,7)</strong>
42
&nbsp;
julia&gt; <strong>mul([1,2], [1,2])</strong>
5
&nbsp;
julia&gt; <strong>mul([1,2,3], [1,2,3])</strong>
14
&nbsp;
julia&gt; <strong>mul([1,2,3], [1,2])</strong>
ERROR: DimensionMismatch("vector x has length 3, but vector y has length 2")
 in vecdot at linalg/generic.jl:248
 in mul at none:2
</pre>

<p>V&nbsp;posledním kroku vidíme, že se nepodařilo vynásobit dva vektory
s&nbsp;různou délkou (což je pochopitelná vlastnost).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zkrácený zápis funkce</h2>

<p>Kromě definice uživatelských funkcí, s&nbsp;nímž jsme se seznámili <a
href="#k02">v&nbsp;předchozí kapitole</a>, podporuje programovací jazyk Julia i
alternativní &bdquo;jednořádkový&ldquo; způsob zápisu. Tento způsob se typicky
používá ve chvíli, kdy je tělo funkce skutečně jednoduché, protože pro delší či
složitější funkce se zápis na jediném řádku stává dosti nepřehledným. Tento
způsob se nejvíce podobá matematickému zápisu funkcí a je pro něj typické
vynechání klíčových slov <strong>function</strong> a <strong>end</strong>:</p>

<pre>
julia&gt; <strong>f(x,y) = x+y</strong>
f (generic function with 1 method)
</pre>

<p>Naši demonstrační funkci pro vynásobení dvou hodnot lze přepsat i takto:</p>

<pre>
julia&gt; <strong>mul(x,y)=x*y</strong>
mul (generic function with 1 method)
&nbsp;
julia&gt; <strong>mul(6,7)</strong>
42
</pre>

<p>U tohoto zápisu se můžeme často setkat s&nbsp;použitím ternárního
operátoru:</p>

<pre>
julia&gt; <strong>max2(x,y) = x&gt;y ? x : y</strong>
max2 (generic function with 1 method)
&nbsp;
julia&gt; <strong>max2(1,2)</strong>
2
&nbsp;
julia&gt; <strong>max2(2,1)</strong>
2
</pre>

<p>Zápis s&nbsp;použitím konstrukce <strong>if-then-else</strong> vypadá takto:</p>

<pre>
julia&gt; <strong>max2(x,y) = if x > y x else y end</strong>
max2 (generic function with 1 method)
&nbsp;
julia&gt; <strong>max2(1,2)</strong>
2
&nbsp;
julia&gt; <strong>max2(2,1)</strong>
2
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Anonymní funkce</h2>

<p>Programovací jazyk <i>Julia</i> podporuje i tvorbu takzvaných anonymních
funkcí, což jsou funkce (programový kód, který lze zavolat), kterým není
přiřazeno jméno. Předností takových funkcí je především sevřený styl zápisu,
v&nbsp;němž se nepoužívají klíčová slova <strong>function</strong> a
<strong>end</strong>, ale (alespoň většinou) výraz či výrazy představující
nějaký výpočet na základě parametrů předaných anonymní funkci. Definici
anonymní funkce tak lze použít například i jako parametr jiné funkce (<a
href="#k12">funkce vyššího řádu</a>). Při definici anonymních funkcí se používá
dvojznak -&gt;, před nějž se zapisuje parametr či parametry a za něj výraz,
jehož vypočtený výsledek je současně návratovou hodnotou anonymní funkce.
Nejprve se podívejme na jednoduchou anonymní funkci s&nbsp;jediným
parametrem:</p>

<pre>
julia&gt; <strong>x -> x+1</strong>
(anonymous function)
</pre>

<p>Funkce se dvěma parametry vypadá takto:</p>

<pre>
julia&gt; <strong>(x,y) -> x+y</strong>
(anonymous function)
</pre>

<p>Podobným způsobem lze samozřejmě definovat i funkce s&nbsp;vyšším počtem
parametrů.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Numerický výpočet určitého integrálu</h2>

<p>Podívejme se nyní na praktický příklad použití anonymních funkcí, a to
konkrétně při výpočtu určitého integrálu. Pro podobné výpočty sice existují
specializované knihovny (z&nbsp;nichž naprostou většinou lze z&nbsp;jazyka
Julia volat), ovšem pro jednodušší účely může postačit použít funkci nazvanou
<strong>quadgk()</strong>, která je dostupná i v&nbsp;případě, že použijeme
pouze základní balíčky (knihovny) programovacího jazyka Julia. Podívejme se,
jak lze vypočítat určitý integrál goniometrické funkce sinus pro meze 0 až
&pi;. Funkce <strong>quadgk()</strong> je funkce vyššího řádu, protože jako
svůj první parametr akceptuje jinou funkci, konkrétně funkci, jejíž faktoriál
budeme počítat:</p>

<pre>
julia&gt; <strong>quadgk(sin, 0, pi)</strong>
(2.0,1.7905676941154525e-12)
</pre>

<p>Výsledkem je hodnota určitého integrálu (plocha pod křivkou) a předpokládaná
absolutní chyba.</p>

<p>Pokud budeme chtít použít uživatelské funkce, máme dvě možnosti. Buď tyto
funkce definovat a pojmenovat (viz <a href="#k02">druhou kapitolu</a>), což si
vyžádá určitý prostor ve zdrojovém kódu, nebo můžeme použít funkce anonymní.
Vypočtěme například plochu obdélníku 10&times;1 jednotka (anonymní funkce
ignoruje svůj parametr):</p>

<pre>
julia&gt; <strong>quadgk(x->1, 0, 10)</strong>
(10.0,0.0)
</pre>

<p>Plocha pod křivkou <i>y=x</i> pro různé meze:</p>

<pre>
julia&gt; <strong>quadgk(x->x, 0, 1)</strong>
(0.5,0.0)
&nbsp;
julia&gt; <strong>quadgk(x->x, -10, 10)</strong>
(0.0,0.0)
</pre>

<p>Plocha pod křivkou <i>y=x&nbsp;x</i>:</p>

<pre>
julia&gt; <strong>quadgk(x->x^x, 0, 1)</strong>
(0.7834305106229384,4.864047851993458e-9)
&nbsp;
</pre>

<p>atd.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Funkce s&nbsp;větším množstvím návratových hodnot</h2>

<p>Někteří čtenáři si možná už povšimli, že se programovací jazyk <i>Julia</i>
v&nbsp;mnoha ohledech podobá jazyku <i>Lua</i> (což není náhoda). Týká se to i
další užitečné vlastnosti &ndash; funkce totiž nemusí vracet jen jednu hodnotu,
ale (prakticky) libovolný počet hodnot. Pokud potřebujete vrátit například dvě
hodnoty, lze za klíčové slovo <strong>return</strong> zadat dva výrazy, které
jsou od sebe oddělené čárkou. Příkladem může být funkce <strong>swap()</strong>
akceptující dva parametry a vracející vyhodnocené parametry v&nbsp;opačném
pořadí:</p>

<pre>
julia&gt; <strong>function swap(x,y)</strong>
       return y,x
       end
swap (generic function with 1 method)
</pre>

<p>Při volání této funkce v&nbsp;interaktivním vývojovém prostředí ihned obě
vrácené hodnoty uvidíme na obrazovce (budou zobrazeny v&nbsp;kulatých
závorkách):</p>

<pre>
julia&gt; <strong>swap(1,2)</strong>
(2,1)
</pre>

<p>Příkladem může být například uživatelská funkce nazvaná
<strong>minmax()</strong>, která pro předané pole nalezne jeho minimální a
maximální prvek. Oba tyto prvky vrátí volajícímu programovému kódu:</p>

<pre>
julia&gt; <strong>function minmax(array)</strong>
       return minimum(array), maximum(array)
       end
minmax (generic function with 1 method)
</pre>

<p>Vyzkoušení této funkce je snadné a přímočaré:</p>

<pre>
julia&gt; <strong>minmax([1,2,3,4,3,2,1])</strong>
(1,4)
</pre>

<p>Poznámka: i výše popsaná funkce <strong>quadgk()</strong> určená pro
numerickou integraci vracela dvě hodnoty: výsledek vlastního výpočtu (plochu
pod křivkou) a absolutní chybu (resp.&nbsp;přesněji řečeno odhad chyby).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Funkce s&nbsp;proměnným počtem argumentů (variadické funkce)</h2>

<p>V&nbsp;některých případech může být užitečné použít funkci či funkce
s&nbsp;proměnným počtem argumentů. Tyto funkce se někdy nazývají variadické
funkce a poznáme je podle toho, že se v&nbsp;seznamu parametrů v&nbsp;definici
funkce nachází jméno argumentu následované třemi tečkami. Všechny další
parametry se předají ve formě sekvence, kterou je samozřejmě možné zpracovat,
přičemž je nutné mít na paměti, že tato sekvence může být i prázdná. Podívejme
se na jednoduchý příklad &ndash; funkci pro výpočet sumy všech svých
parametrů:</p>

<pre>
function suma(x...)
    local result = 0
    for item in x
        result = result + item
    end
    result
end
</pre>

<p>Funkci si ihned otestujme, a to i pro volání bez parametrů:</p>

<pre>
julia&gt; <strong>suma()</strong>
0
&nbsp;
julia&gt; <strong>suma(1)</strong>
1
&nbsp;
julia&gt; <strong>suma(1,2)</strong>
3
&nbsp;
julia&gt; <strong>suma(1,2,3)</strong>
6
&nbsp;
julia&gt; <strong>suma(1,2,3,4, 1//2)</strong>
21//2
</pre>

<p>Nepovinné parametry lze zkombinovat s&nbsp;parametry povinnými, pouze je
zapotřebí dodržet pravidlo, že nepovinné parametry se uvádí až za všemi
parametry povinnými:</p>

<pre>
function scaled_suma(scale, x...)
    local result = 0
    for item in x
        result = result + item
    end
    scale*result
end
</pre>

<p>Nyní je první parametr povinný, o čemž se lze snadno přesvědčit:</p>

<pre>
julia&gt; <strong>scaled_suma()</strong>
ERROR: MethodError: `scaled_suma` has no method matching scaled_suma()
&nbsp;
julia&gt; <strong>scaled_suma(1)</strong>
0
&nbsp;
julia&gt; <strong>scaled_suma(2, 1)</strong>
2
&nbsp;
julia&gt; <strong>scaled_suma(2, 1, 2, 3)</strong>
12
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Funkce s&nbsp;volitelnými argumenty</h2>

<p>Programovací jazyk Julia podporuje i práci s&nbsp;volitelnými argumenty.
Pokud nejsou tyto argumenty naplněny při volání funkce, použije se jejich
implicitní hodnota zadaná již v&nbsp;definici funkce. Díky podpoře funkcí
s&nbsp;volitelnými argumenty tak nemusíme vytvářet metody se stejným jménem,
ale s&nbsp;proměnným počtem parametrů (což je sice ekvivalentní, ale mnohdy
zbytečně složité). Samozřejmě si opět ukážeme demonstrační příklad:</p>

<pre>
julia&gt; <strong>function add(x, y=0, z=0)</strong>
       x+y+z
       end
add (generic function with 3 methods)
&nbsp;
julia&gt; <strong>add()</strong>
ERROR: MethodError: `add` has no method matching add()
&nbsp;
julia&gt; <strong>add(1)</strong>
1
&nbsp;
julia&gt; <strong>add(1,2)</strong>
3
&nbsp;
julia&gt; <strong>add(1,2,3)</strong>
6
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Funkce s&nbsp;pojmenovanými argumenty (<i>keyword arguments</i>)</h2>

<p>Poslední variantou funkcí jsou funkce s&nbsp;pojmenovanými argumenty. Aby
interpret tyto argumenty korektně rozeznal, musíme pro jejich oddělení od
běžných argumentů použít středník a nikoli pouze čárku:</p>

<pre>
function area(message; width=0, height=0)
    print(message)
    width*height
end
</pre>

<p>Povšimněte si, že v&nbsp;tomto případě je nutné uvést výchozí hodnotu
argumentů.</p>

<p>Při volání takové funkce se explicitně uvedou jména pojmenovaných
argumentů:</p>

<pre>
julia&gt; <strong>area("Plocha obdelniku ")</strong>
Plocha obdelniku 0
&nbsp;
julia&gt; <strong>area("Plocha ctverce ", width=2, height=2)</strong>
Plocha ctverce 4
&nbsp;
julia&gt; <strong>area("Plocha obdelniku ", width=10, height=1)</strong>
Plocha obdelniku 10
</pre>

<p>Díky podpoře pro pojmenované parametry lze vytvářet čitelné volání funkcí,
typicky funkcí pro vykreslování grafů (specifikace stylu vykreslování)
apod.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Operátory jsou jen jinak zapisované funkce</h2>

<p>Již v&nbsp;úvodním článku jsme si řekli, že ve skutečnosti jsou všechny
aritmetické operátory (součet, rozdíl, součin, podíl atd.) implementovány
běžnými funkcemi pojmenovanými stejným znakem, jaký odpovídá danému operátoru.
To například znamená, že součet dvou čísel lze zapsat jako
<strong>1+2</strong>, ale také formou funkce <strong>+(1,2)</strong>, což je
sice možná poněkud podivné, ale ve skutečnosti užitečné, protože takto zapsaný
operátor má volitelnou aritu (počet operandů). Ovšem současně to také znamená,
že můžeme například definovat metodu + pro nový uživatelsky definovaný datový
typ a tak vlastně operátor &bdquo;přetížit&ldquo; (což je chování, které známe
prakticky ze všech programovacích jazyků, i když u některých z&nbsp;nich je
přetížení součástí standardu jazyka a není přístupné uživatelům). Aby bylo
chování konzistentní, je nutné takovou metodu vytvořit s&nbsp;variadickým
počtem parametrů.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Jména funkcí pro speciální operátory</h2>

<p>Kromě jmen základních funkcí +, -, *, /, % a ^ představujících aritmetické
operátory se můžeme setkat s&nbsp;následujícími funkcemi, které syntakticky
nahrazují své operátory (to tedy znamená, že následující operátory nelze použít
jako přímé jméno funkce, protože by to syntakticky nedávalo smysl):</p>

<table>
<tr><th>Zápis</th><th>Volá se funkce/metoda</th></tr>
<tr><td>[A B C ...]    </td><td>hcat()</td></tr>
<tr><td>[A, B, C, ...] </td><td>vcat()</td></tr>
<tr><td>[A B; C D; ...]</td><td>hvcat()</td></tr>
<tr><td>A'             </td><td>ctranspose()</td></tr>
<tr><td>A.'            </td><td>transpose()</td></tr>
<tr><td>1:n            </td><td>colon()</td></tr>
<tr><td>A[i]           </td><td>getindex()</td></tr>
<tr><td>A[i]=x         </td><td>setindex!()</td></tr>
<tr><td>A(x)           </td><td>call()</td></tr>
</table>

<p>Pokud tedy potřebujete přetížit příslušný operátor, je nutné ve skutečnosti
definovat příslušnou metodu hcat, vcat, call atd.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Funkce vyššího řádu: <strong>map</strong> a <strong>pmap</strong></h2>

<p>Zajímavé a užitečné je použití takzvaných funkcí vyššího řádu. Jedná se o
funkce, které jako svůj parametr (parametry) akceptují jiné funkce
popř.&nbsp;nějaké funkce vrací. My jsme se již s&nbsp;jednou podobnou funkcí
setkali &ndash; jednalo se o knihovní funkci <strong>quadgk()</strong> určenou
pro numerickou integraci. Ovšem ve standardní knihovně nalezneme i další
užitečné funkce vyššího řádu. Programátoři používající nějaký funkcionální
jazyk pravděpodobně znají funkci <strong>map</strong> určenou pro aplikaci
nějaké jiné funkce na prvky sekvence, seznamu či pole. Tuto funkci vyššího řádu
pochopitelně nalezneme i v&nbsp;programovacím jazyku <i>Julia</i>, takže se
podívejme na možnosti jejího použití.</p>

<p>Definujme uživatelskou funkci pro výpočet binomických koeficientů
(kombinačních čísel) &bdquo;n nad k&ldquo;:</p>

<pre>
function binom(n,k)
    n &gt;= k || return 0
    n == 1 &amp;&amp; return 1
    k == 0 &amp;&amp; return 1
    (n * binom(n - 1, k - 1)) ÷ k
end
</pre>

<p>Pokud nyní budeme chtít vypočítat šestý řádek Pascalova trojúhelníku, není
nic snadnějšího:</p>

<pre>
julia&gt; <strong>map(x->binom(5,x), 0:5)</strong>
&nbsp;
6-element Array{Int64,1}:
  1
  5
 10
 10
  5
  1
</pre>

<p>Podobně můžeme vypočítat desátý řádek Pascalova trojúhelníku:</p>

<pre>
julia&gt; <strong>map(x->binom(10,x) ,0:10)</strong>
&nbsp;
11-element Array{Int64,1}:
   1
  10
  45
 120
 210
 252
 210
 120
  45
  10
   1
</pre>

<p>V&nbsp;jazyku <i>Julia</i> nalezneme i paralelní variantu funkce
<strong>map</strong>, která se jmenuje <strong>pmap</strong>. Aby bylo možné
tuto variantu efektivně využít, je nutné společně s&nbsp;interpretrem spustit i
větší množství tzv.&nbsp;workerů, a to zadáním parametru <strong>-p n</strong>,
kde <i>n</i> je počet workerů (nastavit lze například na počet jader). Dále je
nutné, aby funkce, která se má počítat paralelně, byla dostupná všem workerům,
což zajistí makro <strong>@everywhere</strong>. Vyzkoušejme si například
paralelní výpočet Ackermannovy funkce, protože vyhodnocení této funkce je i
přes její jednoduchý zápis poměrně zdlouhavé (a taktéž náročné na kapacitu
zásobníku):</p>

<pre>
@everywhere(function ackermann(m,n)
    if m == 0
        return n + 1
    elseif n == 0
        return ack(m-1,1)
    else
        return ack(m-1,ack(m,n-1))
    end
end)
</pre>

<p>Sériový výpočet hodnot Ackermannovy funkce pro parametry [4,1], [4,2], [4,3]
a [4,4] bude vypadat takto:</p>

<pre>
map(x-&gt;ackermann(4,x), 1:4)
</pre>

<a href="http://www.root.cz/obrazek/251848/"><img src="https://i.iinfo.cz/images/182/julia3-1-prev.png" class="image-251848" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek 1: Sériový výpočet hodnot Ackermannovy funkce. Procesor se
&bdquo;fláká&ldquo; na pouhé čtvrtině jeho skutečného výkonu.</i></p>

<p>Po spuštění interpretru a čtyř workerů příkazem...</p>

<pre>
julia -p 4
</pre>

<p>...je již možné použít paralelní verzi funkce <strong>map</strong>:</p>

<pre>
pmap(x-&gt;ackermann(4,x), 1:4)
</pre>

<a href="http://www.root.cz/obrazek/251849/"><img src="https://i.iinfo.cz/images/182/julia3-2-prev.png" class="image-251849" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek 2: Paralelní výpočet hodnot Ackermannovy funkce. Povšimněte si
paralelně pracujících workerů a vytížení procesoru.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Další užitečné funkce vyššího řádu <strong>reduce</strong>, <strong>foldl</strong> a <strong>foldr</strong></h2>

<p>Další známou funkcí vyššího řádu, kterou nalezneme v&nbsp;prakticky každém
funkcionálním jazyce, je funkce nazvaná <strong>reduce</strong>, která slouží
pro postupné zpracování vstupní sekvence po jednotlivých prvcích. Pokud
použijeme binární operátor, aplikuje se na první dva prvky v&nbsp;sekvenci,
následně se aplikuje na výsledek této operace společně se třetím prvkem atd.
Určitým problémem je, že u funkce <strong>reduce</strong> není předepsáno, zda
se sekvence bude zpracovávat od začátku či od konce, takže se
v&nbsp;programovacím jazyku <i>Julia</i> vyskytují další dvě funkce vyššího
řádu nazvané <strong>foldl</strong> a <strong>foldr</strong>, u nichž je směr
zpracování sekvence pevně zadaný (což ale může znamenat určité zpomalení). U
některých operací směr zpracování nehraje žádnou roli (komutativita):</p>

<pre>
julia&gt; <strong>reduce(*, 1:10)</strong>
3628800
&nbsp;
julia&gt; <strong>foldl(*, 1:10)</strong>
3628800
&nbsp;
julia&gt; <strong>foldr(*, 1:10)</strong>
3628800
</pre>

<p>Ovšem u dalších operací se již výsledky mohou lišit:</p>

<pre>
julia&gt; <strong>reduce(/, [1,2,3])</strong>
0.16666666666666666
&nbsp;
julia&gt; <strong>foldl(/, [1,2,3])</strong>
0.16666666666666666
&nbsp;
julia&gt; <strong>foldr(/, [1,2,3])</strong>
1.5
</pre>

<p>Zde mimochodem můžeme vidět, že v&nbsp;tomto konkrétním případě se funkce
<strong>reduce</strong> chová stejně jako funkce <strong>foldl</strong>,
tj.&nbsp;&bdquo;redukuje&ldquo; vstupní sekvenci od začátku směrem ke
konci.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Speciální varianty <strong>reduce</strong>: <strong>maximum</strong>, <strong>minimum</strong> a <strong>sum</strong></h2>

<p>Výše popsanou funkci vyššího řádu <strong>reduce</strong>, popř.&nbsp;její
konkrétnější varianty <strong>foldl</strong> a <strong>foldl</strong>, je možné
použít pro implementaci mnoha dalších užitečných funkcí. Příkladem může být
funkce pro výpočet maximálního prvku v&nbsp;poli. Tuto funkci lze definovat
následovně:</p>

<pre>
function maximum_impl(array)
    reduce((x,y) -&gt; x&gt;y ? x:y, array)
end
&nbsp;
maximum_impl([4,3,2,1])
4
</pre>

<p>Vidíme zde použití anonymní funkce akceptující dva parametry a vracející
větší z&nbsp;těchto parametrů (je zde použit ternární operátor, který umožňuje
tělo anonymní funkce zapsat jediným výrazem).</p>

<p>Ovšem vzhledem k&nbsp;tomu, že podobné funkce potřebujeme v&nbsp;programech
používat velmi často, obsahuje již základní knihovna jazyka <i>Julia</i> jejich
optimalizované verze. Podívejme se na demonstrační příklady &ndash; budeme
počítat maximální a minimální hodnotu pole s&nbsp;výsledkem výpočtu binomických
koeficientů &bdquo;deset nad k&ldquo;. Navíc ještě spočítáme součet všech
těchto koeficientů:</p>

<pre>
function binom(n,k)
    n &gt;= k || return 0
    n == 1 &amp;&amp; return 1
    k == 0 &amp;&amp; return 1
    (n * binom(n - 1, k - 1)) ÷ k
end
&nbsp;
b=map(x-&gt;binom(10,x),0:10)
&nbsp;
11-element Array{Int64,1}:
   1
  10
  45
 120
 210
 252
 210
 120
  45
  10
   1
</pre>

<p>Pole s&nbsp;vypočtenými prvky máme připraveno, takže ho ihned můžeme použít:</p>

<pre>
julia&gt; <strong>minimum(b)</strong>
1
&nbsp;
julia&gt; <strong>maximum(b)</strong>
252
&nbsp;
julia&gt; <strong>sum(b)</strong>
1024
</pre>

<p>Poznámka: kromě výše uvedených funkcí <strong>minimum()</strong>,
<strong>maximum()</strong> a <strong>sum()</strong> nalezneme ve standardní
knihovně programovacího jazyka Julia i další užitečné funkce pracující
s&nbsp;celým polem či sekvencí hodnot. Příkladem může být funkce
<strong>prod()</strong> pracující podobně jako <strong>sum()</strong>, ovšem
prvky předaného pole jsou vynásobeny a nikoli sečteny:</p>

<pre>
julia&gt; <strong>prod([1,2,3])</strong>
6
&nbsp;
julia&gt; <strong>prod(1:10)</strong>
3628800
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Predikáty <strong>any</strong> a <strong>all</strong></h2>

<p>Do stejné kategorie, jako <a href="#k14">výše zmíněné</a> funkce, patří i
takzvané predikáty, tj.&nbsp;funkce vracející pravdivostní hodnotu
<strong>true</strong> nebo <strong>false</strong> na základě předaných
parametrů. Zajímat nás nyní budou dva predikáty nazvané <strong>any</strong> a
<strong>all</strong>. Predikát <strong>any</strong> vrací pravdivostní hodnotu
<strong>true</strong> ve chvíli, kdy alespoň jeden prvek pole (či sekvence)
splňuje zapsanou podmínku. Tuto podmínku je možné při volání predikátu zapsat
například formou anonymní funkce, takže celé vyhodnocení predikátu je možné
provést na jediném řádku ve zdrojovém kódu. Nejprve si připravme pole, jehož
prvky budeme zkoumat:</p>

<pre>
julia&gt; <strong>b=map(x->binom(10,x), 0:10)</strong>
11-element Array{Int64,1}:
   1
  10
  45
 120
 210
 252
 210
 120
  45
  10
   1
</pre>

<p>Nyní již můžeme zjistit informace o celém poli, například existenci prvku
většího než 200 či naopak alespoň jednoho záporného prvku:</p>

<pre>
julia&gt; <strong>any(x -&gt; x&gt;200, b)</strong>
true
&nbsp;
julia&gt; <strong>any(x -> x&lt;0, b)</strong>
false
</pre>

<p>Naproti tomu predikát nazvaný <strong>all</strong> vrací pravdivostní
hodnotu <strong>true</strong> pouze tehdy, když je zadaná podmínka platná pro
všechny prvky pole či sekvence. V&nbsp;opačném případě, tedy pokud alespoň
jeden prvek podmínku nesplňuje, pochopitelně vrací <strong>false</strong>:</p>

<pre>
julia&gt; <strong>all(x -&gt; x&gt;200, b)</strong>
false
&nbsp;
julia&gt; <strong>all(x -&gt; x&gt;0, b)</strong>
true
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>Introducing Julia/Functions<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Functions">https://en.wikibooks.org/wiki/Introducing_Julia/Functions</a>
</li>

<li>Functions (Julia documentation)<br />
<a href="http://docs.julialang.org/en/release-0.4/manual/functions/">http://docs.julialang.org/en/release-0.4/manual/functions/</a>
</li>

<li>Evaluate binomial coefficients<br />
<a href="http://rosettacode.org/wiki/Evaluate_binomial_coefficients">http://rosettacode.org/wiki/Evaluate_binomial_coefficients</a>
</li>

<li>Ackermann function<br />
<a href="http://rosettacode.org/wiki/Ackermann_function">http://rosettacode.org/wiki/Ackermann_function</a>
</li>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; dokumentace<br />
<a href="http://docs.julialang.org/en/release-0.4/">http://docs.julialang.org/en/release-0.4/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Introducing Julia/Metaprogramming<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming">https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>Learn X in Y minutes (where X=Julia)<br />
<a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a>
</li>

<li>New Julia language seeks to be the C for scientists<br />
<a href="http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html">http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html</a>
</li>

<li>Julia: A Fast Dynamic Language for Technical Computing<br />
<a href="http://karpinski.org/publications/2012/julia-a-fast-dynamic-language">http://karpinski.org/publications/2012/julia-a-fast-dynamic-language</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="http://llvm.org/">http://llvm.org/</a>
</li>

<li>Julia: benchmarks<br />
<a href="http://julialang.org/benchmarks/">http://julialang.org/benchmarks/</a>
</li>

<li>Type system<br />
<a href="https://en.wikipedia.org/wiki/Type_system">https://en.wikipedia.org/wiki/Type_system</a>
</li>

<li>Half-precision floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Half-precision_floating-point_format">https://en.wikipedia.org/wiki/Half-precision_floating-point_format</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

