<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Julia: paralelní programování</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Julia: paralelní programování</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V šesté části seriálu o programovacím jazyce Julia se budeme věnovat způsobům práce s&nbsp;paralelními výpočty, neboť tento programovací jazyk nabízí vývojářům hned několik způsobů využití mikroprocesorů s&nbsp;větším množstvím jader popř.&nbsp;dokonce výpočetních clusterů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Julia: paralelní programování</a></p>
<p><a href="#k02">2. Spuštění většího množství takzvaných &bdquo;workerů&ldquo;</a></p>
<p><a href="#k03">3. Funkce <strong>workers()</strong>, <strong>nworkers()</strong> a <strong>nprocs()</strong></a></p>
<p><a href="#k04">4. Přidání lokálních i vzdálených workerů s&nbsp;využitím funkce <strong>addprocs()</strong></a></p>
<p><a href="#k05">5. Funkce <strong>remotecall()</strong></a></p>
<p><a href="#k06">6. Čekání na výsledek asynchronního výpočtu: <strong>wait()</strong> a <strong>fetch()</strong></a></p>
<p><a href="#k07">7. Demonstrační příklad: asynchronní výpočet s&nbsp;použitím funkcí <strong>remotecall()</strong> a <strong>fetch()</strong></a></p>
<p><a href="#k08">8. Minimalizace počtu posílaných zpráv: funkce <strong>remotecall_wait()</strong> a <strong>remotecall_fetch()</strong></a></p>
<p><a href="#k09">9. Pomocné makro <strong>@spawnat</strong></a></p>
<p><a href="#k10">10. Pomocné makro <strong>@spawn</strong></a></p>
<p><a href="#k11">11. Pomocné makro <strong>@fetch</strong></a></p>
<p><a href="#k12">12. Makro <strong>@everywhere</strong></a></p>
<p><a href="#k13">13. Obsah dalšího pokračování seriálu: úlohy a kanály</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Julia: paralelní programování</h2>

<p>V&nbsp;dnešní části <a
href="http://www.root.cz/serialy/programovaci-jazyk-julia/">seriálu o
programovacím jazyce Julia</a> se budeme zabývat další důležitou a taktéž
užitečnou problematikou. Jedná se o práci s&nbsp;paralelními (synchronními i
asynchronními) výpočty, které lze využít například v&nbsp;některých výpočtech
z&nbsp;oblasti numerické matematiky, ve vybraných grafových algoritmech atd.
Výpočty mohou běžet paralelně buď na jediném počítači vybaveném dnes již zcela
běžným mikroprocesorem s&nbsp;větším množstvím jader, nebo lze vytvořit
jednoduchý výpočetní cluster sestavený z&nbsp;běžných počítačů, které mezi
sebou komunikují pomocí jednosměrných zpráv se spouštěnými funkcemi, jejich
parametry či vypočtenými daty. Tím je zajištěno, že spouštěné výpočty budou mít
přístup k&nbsp;lokálním datům; sdílení dat již vyžaduje použití sdílených polí
či distribuovaných polí, což je problematika, které se budeme podrobněji
věnovat později.</p>

<p>V&nbsp;programovacím jazyce Julia nalezneme hned celou řadu konceptů
zjednodušujících práci s&nbsp;paralelně běžícími výpočty, ať již se jedná o
základní nízkoúrovňové funkce typu <strong>remotecall</strong>,
<strong>fetch</strong>, některé funkce vyššího řádu (pravděpodobně
nejjednodušší je v&nbsp;této oblasti funkce <strong>pmap</strong>), o pomocná
makra typu <strong>@spawn</strong>, <strong>@spawnat</strong> a
<strong>@fetch</strong>, tak i o použití takzvaných kanálů (<i>channels</i>) či
sdílených polí (<i>shared arrays</i>).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Spuštění většího množství takzvaných &bdquo;workerů&ldquo;</h2>

<p>Prostředí programovacího jazyka Julia obsahuje již ve své základní instalaci
základní podporu pro tvorbu výpočetních clusterů. Nejjednodušší je vytvoření
takového (pseudo)clusteru na jediném počítači, který v&nbsp;dnešní době typicky
obsahuje mikroprocesor se čtyřmi či dokonce osmi výpočetními jádry. Při
spouštění interpretru příkazem <strong>julia</strong> je možné s&nbsp;využitím
přepínače <strong>-p</strong> specifikovat množství takzvaných
&bdquo;workerů&ldquo;, což jsou, poněkud zjednodušeně řečeno, samostatně běžící
procesy přijímající zprávy posílané z&nbsp;interaktivní smyčky REPL. Obecně
platí, že množství workerů by mělo odpovídat počtu výpočetních jader, ovšem
konkrétní optimální konfigurace může být v&nbsp;některých případech odlišná
(k&nbsp;tomu slouží podpora pro profilování, kterou si taktéž popíšeme). Zkusme
si například spuštění interpretru a současně i deseti workerů:</p>

<pre>
<strong>julia -p 10</strong>
</pre>

<p>Na terminálu se po chvíli objeví výzva (prompt) interaktivní smyčky REPL
interpretru:</p>

<pre>
               _
   _       _ _(_)_     |  A fresh approach to technical computing
  (_)     | (_) (_)    |  Documentation: http://docs.julialang.org
   _ _   _| |_  __ _   |  Type "?help" for help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 0.4.5 (2016-03-18 00:58 UTC)
 _/ |\__'_|_|_|\__'_|  |  Official http://julialang.org/ release
|__/                   |  x86_64-unknown-linux-gnu
&nbsp;
julia&gt;
</pre>

<p>Současně se na pozadí spustí oněch deset požadovaných workerů, o čemž se
můžeme velmi snadno přesvědčit:</p>

<pre>
<strong>ps ax |grep julia</strong>
&nbsp;
 2402 pts/3    Sl+    0:04 ./julia -p 10
 2406 ?        Ssl    0:02 /home/tester/temp/julia-2ac304dfba/bin/julia -Cx86-64 -J/home/tester/temp/julia-2ac304dfba/lib/julia/sys.so --bind-to 10.0.0.40 --worker
 2407 ?        Ssl    0:03 /home/tester/temp/julia-2ac304dfba/bin/julia -Cx86-64 -J/home/tester/temp/julia-2ac304dfba/lib/julia/sys.so --bind-to 10.0.0.40 --worker
 2408 ?        Ssl    0:03 /home/tester/temp/julia-2ac304dfba/bin/julia -Cx86-64 -J/home/tester/temp/julia-2ac304dfba/lib/julia/sys.so --bind-to 10.0.0.40 --worker
 2409 ?        Ssl    0:03 /home/tester/temp/julia-2ac304dfba/bin/julia -Cx86-64 -J/home/tester/temp/julia-2ac304dfba/lib/julia/sys.so --bind-to 10.0.0.40 --worker
 2410 ?        Ssl    0:03 /home/tester/temp/julia-2ac304dfba/bin/julia -Cx86-64 -J/home/tester/temp/julia-2ac304dfba/lib/julia/sys.so --bind-to 10.0.0.40 --worker
 2411 ?        Ssl    0:02 /home/tester/temp/julia-2ac304dfba/bin/julia -Cx86-64 -J/home/tester/temp/julia-2ac304dfba/lib/julia/sys.so --bind-to 10.0.0.40 --worker
 2412 ?        Ssl    0:03 /home/tester/temp/julia-2ac304dfba/bin/julia -Cx86-64 -J/home/tester/temp/julia-2ac304dfba/lib/julia/sys.so --bind-to 10.0.0.40 --worker
 2413 ?        Ssl    0:03 /home/tester/temp/julia-2ac304dfba/bin/julia -Cx86-64 -J/home/tester/temp/julia-2ac304dfba/lib/julia/sys.so --bind-to 10.0.0.40 --worker
 2414 ?        Ssl    0:03 /home/tester/temp/julia-2ac304dfba/bin/julia -Cx86-64 -J/home/tester/temp/julia-2ac304dfba/lib/julia/sys.so --bind-to 10.0.0.40 --worker
 2415 ?        Ssl    0:02 /home/tester/temp/julia-2ac304dfba/bin/julia -Cx86-64 -J/home/tester/temp/julia-2ac304dfba/lib/julia/sys.so --bind-to 10.0.0.40 --worker
</pre>

<p>Alternativně lze použít příkaz <strong>pstree</strong> či
<strong>top</strong>, samozřejmě pouze v&nbsp;případě, pokud jsou příslušné
balíčky nainstalovány.</p>

<a href="http://www.root.cz/obrazek/256018/"><img src="https://i.iinfo.cz/images/594/julia-10-workers-1-prev.png" class="image-256018" alt="&#160;" height="235" width="370" /></a>
<p><i>Obrázek 1: Procesy představující REPL a deset workerů systému Julia
(zobrazeno nástrojem <strong>top</strong>).</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Funkce <strong>workers()</strong>, <strong>nworkers()</strong> a <strong>nprocs()</strong></h2>

<p>Každému workeru je přiřazeno celé číslo, které je větší než jedna. Výjimkou
je pouze stav, kdy je celé prostředí jazyka Julia představováno jediným
procesem &ndash; v&nbsp;tomto případě má jediný worker přiřazeno číslo jedna,
které je totožné s&nbsp;vlastní smyčkou REPL (tento proces se taktéž
v&nbsp;kontextu většího clusteru nazývá <i>master</i>). Jednoznačné celočíselné
identifikátory workerů vrací funkce <strong>workers()</strong>, kterou si ihned
můžeme ve smyčce REPL otestovat:</p>

<pre>
help?&gt; <strong>workers</strong>
Base.workers()
&nbsp;
   Returns a list of all worker process identifiers.
&nbsp;
&nbsp;
&nbsp;
julia&gt; <strong>workers()</strong>
10-element Array{Int64,1}:
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
</pre>

<p>Počet dostupných workerů získáme snadno funkcí
<strong>nworkers()</strong>:</p>

<pre>
help?&gt; <strong>nworkers</strong>
Base.nworkers()
&nbsp;
   Get the number of available worker processes. This is one less than
   nprocs(). Equal to nprocs() if nprocs() == 1.
&nbsp;
&nbsp;
&nbsp;
julia&gt; <strong>nworkers()</strong>
10
</pre>

<p>Celkový počet všech procesů patřících do clusteru vrátí funkce
<strong>nprocs</strong>(). Povšimněte si, že počet procesů je o vždy jedničku
větší, než počet workerů, protože se přidal ještě proces s&nbsp;REPL
(<i>master</i>):</p>

<pre>
help? <strong>nprocs</strong>
Base.nprocs()
&nbsp;
   Get the number of available processes.
&nbsp;
&nbsp;
&nbsp;
julia&gt; <strong>nprocs()</strong>
11
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Přidání lokálních i vzdálených workerů s&nbsp;využitím funkce <strong>addprocs()</strong></h2>

<p>Další workery lze již z&nbsp;běžícího interpretru (či z&nbsp;uživatelského
skriptu) přidat funkcí nazvanou <strong>addprocs()</strong>. Pokud se této
funkci nepředají další parametry, vytvoří se takový počet workerů, který
odpovídá hodnotě <strong>CPU_CORES</strong>. Alternativně lze této funkci
předat počet nových workerů:</p>

<p>Nejprve zjistíme aktuální hodnotu <strong>CPU_CORES</strong>:</p>

<pre>
julia&gt; <strong>CPU_CORES</strong>
4
</pre>

<p>Následně k&nbsp;deseti již vytvořeným workerům přidáme další čtyři (na vašem
počítači se však samozřejmě může jednat o odlišnou hodnotu v&nbsp;závislosti na
počtu jader CPU):</p>

<pre>
julia&gt; <strong>addprocs()</strong>
4-element Array{Int64,1}:
 12
 13
 14
 15
</pre>

<p>Další volání stejné funkce přidá další čtyři workery, takže jich je již
dohromady osmnáct (10+4+4):</p>

<pre>
julia&gt; <strong>addprocs()</strong>
4-element Array{Int64,1}:
 16
 17
 18
 19
</pre>

<p>Pro jistotu se podívejme, zda je to skutečně pravda:</p>

<pre>
julia&gt; <strong>workers()</strong>
18-element Array{Int64,1}:
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
</pre>

<p>S&nbsp;využitím stejné funkce <strong>addprocs()</strong> lze vytvořit i
výpočetní cluster, v&nbsp;němž jsou procesy představující jednotlivé workery
spuštěny na vzdáleném stroji či na vzdálených strojích. V&nbsp;nejjednodušším
případě se funkci <strong>addprocs()</strong> předá pole se jmény (hostname) či
IP adresami vzdálených počítačů. Pro spuštění se použije ssh:</p>

<pre>
julia&gt; <strong>addprocs(["localhost"])</strong>
1-element Array{Int64,1}:
 21
</pre>

<p>Použijte řetězce i v&nbsp;případě, že se namísto jména použije IP adresa,
protože 10.20.30.40 pochopitelně není korektně zapsané číslo:</p>

<pre>
julia&gt; <strong>addprocs(["localhost", "cluster-machine-1", "10.0.0.40"])</strong>
 22
 23
 24
</pre>

<p>Kromě jména vzdáleného počítače či jeho IP adresy lze zadat i počet
spouštěných workerů. V&nbsp;tomto případě musí pole obsahovat dvojici
jméno:počet. Podívejme se na chování u nově spuštěné smyčky REPL, ke které je
zpočátku navázán pouze jediný worker s&nbsp;identifikačním číslem jedna:</p>

<pre>
julia&gt; <strong>workers()</strong>
1-element Array{Int64,1}:
 1
&nbsp;
julia&gt; <strong>addprocs([("localhost", 10)])</strong>
10-element Array{Int64,1}:
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
&nbsp;
julia&gt; <strong>workers()</strong>
10-element Array{Int64,1}:
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
</pre>

<p>Podrobnější podoba řetězce specifikujícího vzdálený počítač vypadá
takto:</p>

<pre>
[user@]host[:port] [bind_addr[:port]]
</pre>

<p>V&nbsp;případě, že není zadáno jméno uživatele, použije se jméno vlastníka
procesu smyčky REPL (tj.&nbsp;jméno uživatele, který spustil interaktivní
prostředí). Port taktéž není zapotřebí zadat v&nbsp;případě, že se má použít
standardní port 22. Položky bind_addr a popř.&nbsp;i číslo druhého portu
použijte tehdy, pokud spolu mají jednotlivé workery komunikovat. Přidání
dalších deseti workerů spuštěných pro uživatele &bdquo;tester&ldquo; na
počítači se jménem &bdquo;cluster-2&ldquo; přes (nestandardní) SSH port 2222
tedy bude vypadat následovně:</p>

<pre>
julia&gt; <strong>addprocs([("tester@cluster-2:2222", 10)])</strong>
10-element Array{Int64,1}:
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Funkce <strong>remotecall()</strong></h2>

<p>Základní funkcí určenou pro spuštění nějakého kódu v&nbsp;jiném procesu
(samozřejmě stále v&nbsp;rámci vytvořeného clusteru) je funkce nazvaná
jednoduše a přímočaře <strong>remotecall()</strong>. Jedná se o poměrně
nízkoúrovňovou funkci, které je zapotřebí předat jak identifikátor procesu
(celé číslo vracené funkcí <strong>workers()</strong>), tak i spouštěnou funkci
a její parametry. Podívejme se nyní na příklad použití funkce
<strong>remotecall()</strong>. Nejprve spustíme novou smyčku REPL a současně
s&nbsp;ní i deset lokálně pracujících workerů:</p>

<pre>
$ <strong>./julia -p 10</strong>
               _
   _       _ _(_)_     |  A fresh approach to technical computing
  (_)     | (_) (_)    |  Documentation: http://docs.julialang.org
   _ _   _| |_  __ _   |  Type "?help" for help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 0.4.5 (2016-03-18 00:58 UTC)
 _/ |\__'_|_|_|\__'_|  |  Official http://julialang.org/ release
|__/                   |  x86_64-unknown-linux-gnu
</pre>

<p>Pro jistotu si uvěříme, že počet spuštěných workerů skutečně odpovídá
předanému parametru:</p>

<pre>
julia&gt; <strong>nworkers()</strong>
10
</pre>

<p>Nyní si vzdáleně spustíme funkci <strong>ones()</strong>, kterou již známe
z&nbsp;předchozích částí tohoto seriálu. Připomeňme si, že tato funkce vytvoří
vektor či matici o zadané velikosti a naplní všechny prvky matice jedničkami.
Lokální matice o velikosti 5&times;5 prvků se vytvoří takto:</p>

<pre>
julia&gt; <strong>ones(Int8, 5, 5)</strong>
5x5 Array{Int8,2}:
 1  1  1  1  1
 1  1  1  1  1
 1  1  1  1  1
 1  1  1  1  1
 1  1  1  1  1
</pre>

<p>Vzdálené spuštění funkce <strong>ones()</strong> na workeru
s&nbsp;identifikátorem 2 bude vypadat následovně:</p>

<pre>
julia&gt; <strong>ar2=remotecall(2, ones, Int8, 5, 5)</strong>
RemoteRef{Channel{Any}}(2,1,16)
</pre>

<p>Dtto na workeru číslo 3:</p>

<pre>
julia&gt; <strong>ar3=remotecall(3, ones, Int8, 5, 5)</strong>
RemoteRef{Channel{Any}}(3,1,17)
</pre>

<p>Povšimněte si především způsobu předání parametrů vzdáleně volané funkci.
Namísto:</p>

<pre>
<strong>ones(Int8, 5, 5)</strong>
</pre>

<p>je nutné zadat:</p>

<pre>
<strong>remotecall(3, ones, Int8, 5, 5)</strong>
</pre>

<p>Pokud si myslíte, že je tento zápis nečitelný, lze namísto něj použít makro
<strong>@spawnat</strong>, s&nbsp;nímž se seznámíme <a
href="#k09">v&nbsp;deváté kapitole</a>.</p>

<p>Dále si povšimněte, že se nevrací přímo vytvořená matice, ale pouze objekt
představující (velmi zjednodušeně řečeno) referenci na kanál, ze kterého se po
dokončení výpočtu může vypočtená matice získat. Toto řešení bylo zvoleno
z&nbsp;toho důvodu, aby se nemusely mezi jednotlivými workery přenášet obrovská
množství dat.</p>

<p>Pozor je zapotřebí dát na to, že některé příkazy, typicky příkazy pro práci
se standardním vstupem a výstupem, nebudou spolupracovat přímo s&nbsp;REPL, ale
budou používat vlastní I/O operace:</p>

<pre>
julia&gt; <strong>remotecall(2, print, 42)</strong>
RemoteRef{Channel{Any}}(2,1,14)
</pre>

<p>Zde se nic nevypíše, a to ani při čekání na dokončení výpočtu.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Čekání na výsledek asynchronního výpočtu: <strong>wait()</strong> a <strong>fetch()</strong></h2>

<p>Výpočet spuštěný v&nbsp;některém workeru je samozřejmě prováděn paralelně a
zcela nezávisle na smyčce REPL (samotná funkce <strong>remotecall</strong> je
ukončena v&nbsp;tom okamžiku, kdy předá práci workerům). Ve chvíli, kdy
potřebujeme získat výsledky takového výpočtu, je nutné nejprve zajistit, aby
byl výpočet skutečně dokončen. To většinou nebude problém pro funkci
<strong>ones()</strong>, která je interně velmi jednoduchá, ale pro složitější
výpočty je mnohdy nutné počkat, až se tyto výpočty dokončí. K&nbsp;tomuto účelu
slouží funkce nazvaná <strong>wait()</strong> (pouze čekání na dokončení
výpočtu) a taktéž mnohem užitečnější funkce nazvaná <strong>fetch()</strong>,
která nejenže počká na dokončení výpočtu, ale dokáže vrátit i jeho výsledky
(což znamená, že se data přenesou z&nbsp;jednoho workeru do jiného workeru).
Těmto funkcím lze předat referenci vrácenou <a href="#k05">již popsanou</a>
funkcí <strong>remotecall()</strong>.</p>

<p>V&nbsp;předchozí kapitole jsme spustili dvě funkce, které na workerech číslo
2 a 3 vytvořily matice. Reference k&nbsp;těmto maticím jsou uloženy
v&nbsp;proměnných <strong>ar2</strong> a <strong>ar3</strong>. Získání obsahů
matic je tedy velmi jednoduché:</p>

<pre>
julia&gt; <strong>fetch(ar2)</strong>
5x5 Array{Int8,2}:
 1  1  1  1  1
 1  1  1  1  1
 1  1  1  1  1
 1  1  1  1  1
 1  1  1  1  1
</pre>

<pre>
julia&gt; <strong>fetch(ar3)</strong>
5x5 Array{Int8,2}:
 1  1  1  1  1
 1  1  1  1  1
 1  1  1  1  1
 1  1  1  1  1
 1  1  1  1  1
</pre>

<p>Poznámka: funkce <strong>fetch</strong> je natolik inteligentní, že když ji
použijete na lokální data (= data dostupná aktivnímu workeru), nebude provádět
žádné pomalé přenosy mezi procesy, ale přímo tato data vrátí. To je výhodné,
protože u mnoha algoritmů nemusí být jasné, ve kterém okamžiku pracují
s&nbsp;lokálními daty a ve kterém okamžiku s&nbsp;daty uloženými na jiném
workeru (a potenciálně na jiném počítači).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Demonstrační příklad: asynchronní výpočet s&nbsp;použitím funkcí <strong>remotecall()</strong> a <strong>fetch()</strong></h2>

<p>Připomeňme si, že i běžné operátory pro součet, rozdíl atd. je ve
skutečnosti možné použít dvěma způsoby &ndash; buď ve funkci klasického
infixového binárního operátoru zapisovaného mezi oba operandy, nebo jako
funkci. To je užitečné, neboť nám to umožňuje provést například součet prvků
matic ve vybraném workeru, což je ukázáno na dalším příkladu:</p>

<pre>
julia&gt; <strong>ar2_10=remotecall(2, +, fetch(ar2), 10)</strong>
RemoteRef{Channel{Any}}(2,1,29)
</pre>

<pre>
julia&gt; <strong>fetch(ar2_10)</strong>
5x5 Array{Int8,2}:
 11  11  11  11  11
 11  11  11  11  11
 11  11  11  11  11
 11  11  11  11  11
 11  11  11  11  11
</pre>

<p>Otázka pro čtenáře: prvním parametrem funkce/operátoru <strong>+</strong> je
<strong>fetch(ar2)</strong>. Znamená to, že se celá matice přenese do smyčky
REPL (aby se reference vyhodnotila na matici), nebo se veškerý výpočet provede
na workeru číslo 2 bez přenosu dat?</p>

<p>Pozor je zapotřebí dát na to, že funkce definované v&nbsp;jednom workeru (či
v&nbsp;REPLu) nejsou ihned viditelné v&nbsp;ostatních workerech:</p>

<pre>
julia&gt; <strong>function add(x,y) return x+y end</strong>
add (generic function with 1 method)
&nbsp;
julia&gt; <strong>add(1,2)</strong>
3
&nbsp;
julia&gt; <strong>fetch(remotecall(2, add, 1, 2))</strong>
ERROR: On worker 2:
function add not defined on process 2
 in error at ./error.jl:21
 in anonymous at serialize.jl:526
 in anonymous at multi.jl:920
 in run_work_thunk at multi.jl:661
 in run_work_thunk at multi.jl:670
 in anonymous at task.jl:58
 in remotecall_fetch at multi.jl:747
 in call_on_owner at multi.jl:793
 in fetch at multi.jl:811
</pre>

<p>Tento problém se řeší uložením funkcí do modulů a načtením těchto modulů do
všech workerů.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Minimalizace posílaných zpráv: funkce <strong>remotecall_wait()</strong> a <strong>remotecall_fetch()</strong></h2>

<p>V&nbsp;předchozích příkladech jsme se setkali s&nbsp;poměrně typickým
problémem &ndash; potřebujeme v&nbsp;nějakém workeru spustit zvolenou funkci a
po dokončení výpočtu vrátit její výsledek. Tato logika je implementována (opět
na relativně nízké úrovni) ve funkcích nazvaných
<strong>remotecall_wait</strong> a <strong>remotecall_fetch</strong>. Jak již
názvy těchto funkcí napovídají, jedná se o kombinaci volání
<strong>remotecall+wait</strong> popř.&nbsp;<strong>remotecall+fetch</strong>,
a to bez nutnosti pracovat s&nbsp;mezivýsledkem (referencí na
&bdquo;vzdálená&ldquo; data). Předchozí příklady by tedy bylo možné zapsat i
následujícím způsobem:</p>

<pre>
julia&gt; <strong>a=remotecall_fetch(2, ones, 5, 5)</strong>
5x5 Array{Float64,2}:
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
&nbsp;
julia&gt; <strong>b=remotecall_fetch(2, +, a, 10)</strong>
5x5 Array{Float64,2}:
 11.0  11.0  11.0  11.0  11.0
 11.0  11.0  11.0  11.0  11.0
 11.0  11.0  11.0  11.0  11.0
 11.0  11.0  11.0  11.0  11.0
 11.0  11.0  11.0  11.0  11.0
</pre>

<p>Opět platí, že nelze volat funkci, která není načtena (a přeložena)
v&nbsp;příslušnému workeru:</p>

<pre>
julia&gt; <strong>function add(x,y) return x+y end</strong>
add (generic function with 1 method)
&nbsp;
julia&gt; <strong>add(1,2)</strong>
3
&nbsp;
julia&gt; <strong>remotecall_wait(2, add, 1, 2)</strong>
ERROR: On worker 2:
function add not defined on process 2
 in error at ./error.jl:21
 in anonymous at serialize.jl:526
 in anonymous at multi.jl:930
 in run_work_thunk at multi.jl:661
 in run_work_thunk at multi.jl:670
 in anonymous at task.jl:58
 in remotecall_wait at multi.jl:764
 in remotecall_wait at multi.jl:768
&nbsp;
julia&gt; <strong>remotecall_fetch(2, add, 1, 2)</strong>
ERROR: On worker 2:
function add not defined on process 2
 in error at ./error.jl:21
 in anonymous at serialize.jl:526
 in anonymous at multi.jl:923
 in run_work_thunk at multi.jl:661
 [inlined code] from multi.jl:923
 in anonymous at task.jl:63
 in remotecall_fetch at multi.jl:747
 in remotecall_fetch at multi.jl:750
</pre>

<p>K&nbsp;čemu jsou tyto funkce vlastně vhodné? Vždyť pouze vzdáleně spouštíme
výpočet, na jehož výsledek čekáme, takže smyčka REPL v&nbsp;tomto čase stejně
nereaguje na příkazy uživatele. Použití je hned několik &ndash; spouštění
funkcí na mnohem výkonnějším stroji, než je (například) notebook se spuštěnou
smyčkou REPL či použití těchto funkcí ve skriptu, v&nbsp;němž se používá větší
množství vláken.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Pomocné makro <strong>@spawnat</strong></h2>

<p>Přímé použití funkce <strong>remotecall</strong> popř.&nbsp;některé
z&nbsp;jejích variant pojmenovaných <strong>remotecall_wait</strong> a
<strong>remotecall_fetch</strong> je v&nbsp;mnoha ohledech poněkud nešikovné,
protože jak volaná vzdálená funkce, tak i její parametry se zapisují jiným
způsobem než jak je tomu při volání lokální funkce. Tento problém do značné
míry řeší makro nazvané <strong>@spawnat</strong>, kterému se předá
identifikátor workeru (celé kladné číslo) a dále výraz, který je patřičně
transformován a následně je interně zavolána funkce
<strong>remotecall</strong>.</p>

<pre>
help?&gt; <strong>@spawnat</strong>
  @spawnat
&nbsp;
  Accepts two arguments, p and an expression. A closure is created around the
  expression and run asynchronously on process p. Returns a RemoteRef to the
  result.
</pre>

<p>Celý zápis je tak mnohem čitelnější, ostatně se můžeme podívat na
příklad:</p>

<pre>
julia&gt; <strong> s=@spawnat 2 ones(5, 5)</strong>
RemoteRef(2,1,19)
&nbsp;
julia&gt; <strong> fetch(s)</strong>
5x5 Array{Float64,2}:
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
</pre>

<p>Povšimněte si, že mezi identifikátorem workeru a zápisem volání (vzdálené)
funkce nefiguruje žádný oddělovač kromě mezery.</p>

<p>Použít lze i složitější zápisy:</p>

<pre>
julia&gt; <strong>s=@spawnat 2 (ones(5,5)+10)*20</strong>
RemoteRef{Channel{Any}}(2,1,13)
&nbsp;
julia&gt; <strong>fetch(s)</strong>
5x5 Array{Float64,2}:
 220.0  220.0  220.0  220.0  220.0
 220.0  220.0  220.0  220.0  220.0
 220.0  220.0  220.0  220.0  220.0
 220.0  220.0  220.0  220.0  220.0
 220.0  220.0  220.0  220.0  220.0
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Pomocné makro <strong>@spawn</strong></h2>

<p>V&nbsp;mnoha situacích nás nemusí zajímat, ve kterém workeru se nějaký
výpočet provede. V&nbsp;tomto případě je možné namísto makra
<strong>@spawnat</strong> použít nepatrně jednodušší makro nazvané pouze
<strong>@spawn</strong>:</p>

<pre>
help?&gt; <strong>@spawn</strong>
  @spawn
&nbsp;
  Creates a closure around an expression and runs it on an
  automatically-chosen process, returning a RemoteRef to the result.
</pre>

<p>Toto makro automaticky vybere nějaký vhodný worker a spustí v&nbsp;něm
zadanou funkci či výraz převedený na volání funkce. Díky tomu není nutné (a ve
skutečnosti dokonce ani možné) makru předat identifikátor workeru:</p>

<pre>
julia&gt; <strong>s=@spawn (ones(5,5)+10)*20</strong>
RemoteRef{Channel{Any}}(3,1,17)
&nbsp;
julia&gt; <strong>fetch(s)</strong>
5x5 Array{Float64,2}:
 220.0  220.0  220.0  220.0  220.0
 220.0  220.0  220.0  220.0  220.0
 220.0  220.0  220.0  220.0  220.0
 220.0  220.0  220.0  220.0  220.0
 220.0  220.0  220.0  220.0  220.0
</pre>

<p>Nepatrně složitější příklad:</p>

<pre>
julia&gt; <strong>ar2=remotecall(2, ones, Int8, 5, 5)</strong>
RemoteRef{Channel{Any}}(2,1,16)
&nbsp;
julia&gt; <strong> ar2_20 = @spawn fetch(ar2) + 20</strong>
RemoteRef{Channel{Any}}(3,1,36)
&nbsp;
julia&gt; <strong> fetch(ar2_20)</strong>
5x5 Array{Int8,2}:
 21  21  21  21  21
 21  21  21  21  21
 21  21  21  21  21
 21  21  21  21  21
 21  21  21  21  21
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Pomocné makro <strong>@fetch</strong></h2>

<p>Podobně jako existuje kombinace funkcí <strong>remotecall</strong> a
<strong>fetch</strong> implementovaná ve funkci nazvané
<strong>remotecall_fetch</strong>, i k&nbsp;makru <strong>@spawn</strong>
popsaného <a href="#k10">v&nbsp;předchozí kapitole</a> existuje alternativa
pojmenovaná <strong>@fetch</strong>. Jedná se vlastně o kombinaci spuštění
vybrané funkce na libovolném workeru s&nbsp;čekáním na výsledek a vrácením
tohoto výsledku:</p>

<pre>
help?&gt; <strong>@fetch</strong>
  @fetch
&nbsp;
  Equivalent to fetch(@spawn expr).
</pre>

<p>Ukázky použití tohoto makra jsou jednoduché:</p>

<pre>
julia&gt; <strong>s=@fetch ones(5, 5)</strong>
5x5 Array{Float64,2}:
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0
</pre>

<pre>
julia&gt; <strong>r=@fetch +(s,10)</strong>
5x5 Array{Float64,2}:
 11.0  11.0  11.0  11.0  11.0
 11.0  11.0  11.0  11.0  11.0
 11.0  11.0  11.0  11.0  11.0
 11.0  11.0  11.0  11.0  11.0
 11.0  11.0  11.0  11.0  11.0
</pre>

<pre>
julia&gt; <strong>t=@fetch s*10</strong>
5x5 Array{Float64,2}:
 10.0  10.0  10.0  10.0  10.0
 10.0  10.0  10.0  10.0  10.0
 10.0  10.0  10.0  10.0  10.0
 10.0  10.0  10.0  10.0  10.0
 10.0  10.0  10.0  10.0  10.0
</pre>

<p>Poznámka: jednotlivé kroky mohou být ve skutečnosti provedeny
v&nbsp;rozdílných workerech.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Makro <strong>@everywhere</strong></h2>

<p>Poněkud speciální význam má makro nazvané <strong>@everywhere</strong>:</p>

<pre>
help?&gt; <strong>@everywhere</strong>
  @everywhere
&nbsp;
  Execute an expression on all processes. Errors on any of the processes are
  collected into a CompositeException and thrown.
</pre>

<p>Jak již název tohoto makra napovídá, slouží ke spuštění zvolené funkce ve
všech workerech (i v&nbsp;REPLu), ovšem přitom se nevrací žádné výsledky:</p>

<pre>
julia&gt; <strong>@everywhere print(42)</strong>
42
</pre>

<p>To v&nbsp;některých případech nemusí vadit, protože například příkaz pro
načtení či znovunačtení vybraného modulu je vhodné spouštět na všech workerech
a výsledek této operace není příliš zajímavý. Případné výjimky se však zpracují
korektně:</p>

<pre>
julia&gt; <strong>@everywhere throw("Exception")</strong>
ERROR: On worker 2:
"Exception"
 in eval at ./sysimg.jl:14
 in anonymous at multi.jl:1394
 in anonymous at multi.jl:923
 in run_work_thunk at multi.jl:661
 [inlined code] from multi.jl:923
 in anonymous at task.jl:63
 in remotecall_fetch at multi.jl:747
 in remotecall_fetch at multi.jl:750
 in anonymous at multi.jl:1396
&nbsp;
...and 10 other exceptions.
&nbsp;
 in sync_end at ./task.jl:413
 in anonymous at multi.jl:1405
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Obsah dalšího pokračování seriálu: úlohy a kanály</h2>

<p>V&nbsp;následující části seriálu o programovacím jazyku Julia dokončíme
téma, kterému jsme se začali věnovat dnes. Popíšeme si totiž koncept takzvaných
kanálů (<i>channels</i>) a úloh (<i>tasks</i>). S&nbsp;využitím úloh je možné
implementovat jak klasické koprogramy (používané například v&nbsp;programovacím
jazyku Lua) nebo dokonce plnohodnotná vlákna, což znamená, že se paralelní
výpočty nemusí omezovat pouze na použití většího množství procesů a komunikaci
mezi těmito procesy. Kanály se používají pro kooperaci mezi různými částmi
výpočtu a lze s&nbsp;nimi v&nbsp;případě potřeby realizovat i různé
synchronizační mechanismy. S&nbsp;principem funkce komunikačních kanálů jsme se
ostatně seznámili i v&nbsp;paralelně (a nyní již poněkud nepravidelně) běžícím
seriálu o programovacím jazyku <i>Clojure</i>, konkrétně se jednalo o část
nazvanou <a
href="http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async/">Asynchronní
programování v Clojure s využitím knihovny core.async </a>.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>CS 2101 Parallel Computing with Julia<br />
<a href="https://www.coursehero.com/file/11508091/CS-2101-Parallel-Computing-with-Julia/">https://www.coursehero.com/file/11508091/CS-2101-Parallel-Computing-with-Julia/</a>
</li>

<li>Julia By Example<br />
<a href="https://samuelcolvin.github.io/JuliaByExample/">https://samuelcolvin.github.io/JuliaByExample/</a>
</li>

<li>Tasks and Parallel Computing<br />
<a href="http://docs.julialang.org/en/release-0.4/stdlib/parallel/">http://docs.julialang.org/en/release-0.4/stdlib/parallel/</a>
</li>

<li>clock(3) - Linux man page<br />
<a href="http://linux.die.net/man/3/clock">http://linux.die.net/man/3/clock</a>
</li>

<li>rand_r(3) - Linux man page<br />
<a href="http://linux.die.net/man/3/rand_r">http://linux.die.net/man/3/rand_r</a>
</li>

<li>atan2(3) - Linux man page<br />
<a href="http://linux.die.net/man/3/atan2">http://linux.die.net/man/3/atan2</a>
</li>

<li>Calling C and Fortran Code<br />
<a href="http://docs.julialang.org/en/release-0.4/manual/calling-c-and-fortran-code/?highlight=symbol">http://docs.julialang.org/en/release-0.4/manual/calling-c-and-fortran-code/?highlight=symbol</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>Introducing Julia/Functions<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Functions">https://en.wikibooks.org/wiki/Introducing_Julia/Functions</a>
</li>

<li>Functions (Julia documentation)<br />
<a href="http://docs.julialang.org/en/release-0.4/manual/functions/">http://docs.julialang.org/en/release-0.4/manual/functions/</a>
</li>

<li>Evaluate binomial coefficients<br />
<a href="http://rosettacode.org/wiki/Evaluate_binomial_coefficients">http://rosettacode.org/wiki/Evaluate_binomial_coefficients</a>
</li>

<li>Ackermann function<br />
<a href="http://rosettacode.org/wiki/Ackermann_function">http://rosettacode.org/wiki/Ackermann_function</a>
</li>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; dokumentace<br />
<a href="http://docs.julialang.org/en/release-0.4/">http://docs.julialang.org/en/release-0.4/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Introducing Julia/Metaprogramming<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming">https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>Learn X in Y minutes (where X=Julia)<br />
<a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a>
</li>

<li>New Julia language seeks to be the C for scientists<br />
<a href="http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html">http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html</a>
</li>

<li>Julia: A Fast Dynamic Language for Technical Computing<br />
<a href="http://karpinski.org/publications/2012/julia-a-fast-dynamic-language">http://karpinski.org/publications/2012/julia-a-fast-dynamic-language</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="http://llvm.org/">http://llvm.org/</a>
</li>

<li>Julia: benchmarks<br />
<a href="http://julialang.org/benchmarks/">http://julialang.org/benchmarks/</a>
</li>

<li>Type system<br />
<a href="https://en.wikipedia.org/wiki/Type_system">https://en.wikipedia.org/wiki/Type_system</a>
</li>

<li>Half-precision floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Half-precision_floating-point_format">https://en.wikipedia.org/wiki/Half-precision_floating-point_format</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

