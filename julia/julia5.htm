<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Julia: volání funkcí naprogramovaných v C či ve Fortranu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Julia: volání funkcí naprogramovaných v C či ve Fortranu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Pátá část seriálu o programovacím jazyce Julia je věnována poměrně důležité problematice volání nativních funkcí naprogramovaných většinou v&nbsp;C či ve Fortranu a uložených do sdílených knihoven (.so, .dll). Ukážeme si i poněkud složitější příklady, včetně práce s&nbsp;řetězci či s&nbsp;poli.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Julia: volání funkcí naprogramovaných v&nbsp;C či ve Fortranu</a></p>
<p><a href="#k02">2. Funkce <strong>ccall</strong></a></p>
<p><a href="#k03">3. Volání nativních funkcí bez parametrů a problematika návratových typů</a></p>
<p><a href="#k04">4. Předání parametrů do nativních funkcí</a></p>
<p><a href="#k05">5. Práce s&nbsp;řetězci &ndash; specifikace ukazatele a zpětná konverze řetězce</a></p>
<p><a href="#k06">6. Vytvoření vlastní demonstrační sdílené knihovny</a></p>
<p><a href="#k07">7. Volání funkcí ze sdílené knihovny, předání parametrů, zpracování výsledků</a></p>
<p><a href="#k08">8. Druhá demonstrační sdílená knihovna s&nbsp;funkcí zpracovávající pole</a></p>
<p><a href="#k09">9. Předání pole z&nbsp;jazyka Julia do nativní knihovny</a></p>
<p><a href="#k10">10. Segfault a další typické problémy</a></p>
<p><a href="#k11">11. Globální proměnné v&nbsp;nativní knihovně</a></p>
<p><a href="#k12">12. Přístup ke globálním proměnným přes funkce <strong>unsafe_load</strong> a <strong>unsafe_store!</strong></a></p>
<p><a href="#k13">13. Repositář s&nbsp;demonstračními zdrojovými kódy nativních knihoven</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Julia: volání funkcí naprogramovaných v&nbsp;C či Fortranu</h2>

<p>Běhové prostředí programovacího jazyka Julia podporuje kooperaci
s&nbsp;nativními knihovnami naprogramovanými typicky v&nbsp;programovacích
jazycích C a (možná ještě častěji) ve Fortranu. To ve skutečnosti není nic
překvapivého, protože mnoho algoritmů určených pro zpracování numerických dat
bylo naprogramováno, odladěno a optimalizováno právě ve Fortranu, takže by bylo
kontraproduktivní se snažit o přepis těchto algoritmů do pomalejšího a prozatím
(?) méně rozšířeného jazyka Julia. Ostatně přesně tímto způsobem jsou do jazyka
Julia přidány algoritmy pro lineární algebru &ndash; ve skutečnosti totiž bylo
pouze vytvořeno rozhraní ke knihovně <i>LAPACK (Linear Algebra Package)</i>
s&nbsp;tím, že toto rozhraní zajišťuje případné datové konverze mezi vektory a
maticemi jazyka Julia a týmiž strukturami implementovanými ve Fortranu. Dnes si
ukážeme, jak lze volat funkce uložené v&nbsp;prakticky libovolné nativní
sdílené knihovně (.so, .dll).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Funkce <strong>ccall</strong></h2>

<p>Pro volání nativních funkcí přímo z&nbsp;programovacího jazyka Julia,
resp.&nbsp;přesněji řečeno ze skriptů naprogramovaných v&nbsp;Julii, je určena
funkce nazvaná <strong>ccall</strong> (zkratka operace <i>C-call</i>). Této
funkci se předávají následující parametry:</p>

<ol>

<li>Dvojice obsahující jméno volané funkce a jméno knihovny. Dvojice není nic
jiného než n-tice se dvěma prvky. Ve skriptech se n-tice se zapisuje
s&nbsp;využitím kulatých závorek.</li>

<li>Typ návratové hodnoty, například <strong>UInt8</strong>,
<strong>Int32</strong>, <strong>Float32</strong> či
<strong>Float64</strong></li>

<li>Následuje n-tice obsahující popis typů parametrů nativní funkce (pozor na
to, že n-tice s&nbsp;jedním prvkem musí končit čárkou)</li>

<li>Vlastní parametry, které se nativní funkci mají předat. V&nbsp;případě
potřeby se Julia pokusí o konverzi typů, to však není ve všech případech možné
ani bezpečné.</li>

</ol>

<p>Pro ilustraci řešení celé problematiky volání nativních funkcí přímo
z&nbsp;programovacího jazyka Julia si nejprve ukážeme, jakým způsobem se volají
ty nativní funkce, které neakceptují žádné parametry. Typickým příkladem takové
funkce, který je ostatně použit i v&nbsp;originální dokumentaci programovacího
jazyka Julia, je funkce pojmenovaná <strong>clock</strong>, která vrací čas
procesoru v&nbsp;jednotkách, jež lze na sekundy v&nbsp;případě potřeby převést
podělením konstantou <strong>CLOCKS_PER_SEC</strong> (tato konstanta má podle
POSIXu hodnotu 1000000, nicméně se ještě stále můžete setkat se systémy,
v&nbsp;nichž je tato hodnota odlišná). Funkce <strong>clock</strong> se poměrně
často používá pro změření doby trvání nějaké operace &ndash; stačí zjistit
počet &bdquo;tiků&ldquo; procesoru před měřenou operací, druhý počet
&bdquo;tiků&ldquo; procesoru po této operaci a podělit vypočtený rozdíl výše
zmíněnou konstantou <strong>CLOCKS_PER_SEC</strong>. Funkce
<strong>clock</strong> je samozřejmě podrobně popsána v&nbsp;manuálových
stránkách, z&nbsp;nichž zjistíme jak parametry (žádné nejsou), tak i typ
návratové hodnoty:</p>

<pre>
<strong>man 3 clock</strong>
</pre>

<pre>
CLOCK(3)                   Linux Programmer's Manual                  CLOCK(3)
&nbsp;
NAME
       clock - determine processor time
&nbsp;
SYNOPSIS
       #include &lt;time.h&gt;
&nbsp;
       clock_t clock(void);
&nbsp;
DESCRIPTION
       The clock() function returns an approximation of processor time used by
       the program.
&nbsp;
       ...
       ...
       ...
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Volání nativních funkcí bez parametrů a problematika návratových typů</h2>

<p>V&nbsp;dokumentaci k&nbsp;programovacímu jazyku Julia je ukázán způsob
volání výše zmíněné nativní funkce <strong>clock</strong>. Příkaz pro vyvolání
je popsán následovně &ndash; volá se funkce se jménem &bdquo;clock&ldquo;
uložená ve sdílené knihovně nazvané &bdquo;libc&ldquo;, návratovým typem je
32bitové celé číslo a funkce neakceptuje žádné parametry:</p>

<pre>
julia&gt; <strong>ccall( ("clock", "libc"), Int32, ())</strong>
1374123
</pre>

<p>Alternativně lze jméno volané nativní funkce zadat formou symbolu:</p>

<pre>
julia&gt; <strong>ccall( (:clock, "libc"), Int32, ())</strong>
1799851
</pre>

<p>Totéž platí i pro jméno knihovny:</p>

<pre>
julia&gt; <strong>ccall( (:clock, :libc), Int32, ())</strong>
1999851
</pre>

<p>Ve skutečnosti se však při použití návratové hodnoty typu
<strong>Int32</strong> brzy dostaneme do problémů, protože typ
<strong>clock_t</strong> má na 64bitových systémech šířku 64 bitů, o čemž se
můžete v&nbsp;céčku snadno přesvědčit použitím operátoru
<strong>sizeof</strong>:</p>

<pre>
#include &lt;time.h&gt;
#include &lt;stdio.h&gt;
&nbsp;
int main(void)
{
    printf("%zu\n", sizeof(clock_t));
    return 0;
}
</pre>

<p>Na 64bitových systémech sice použití typu <strong>Int32</strong> nepovede
k&nbsp;vypsání chybového hlášení, protože jazyk Julia nemá možnost takovou
kontrolu provést, ale pro správné chování je nutné použít:</p>

<pre>
julia&gt; <strong>ccall( (:clock, "libc"), Int64, ())</strong>
1441903
</pre>

<p>Podobným způsobem lze zavolat například další standardní funkci
<strong>rand</strong> s&nbsp;následujícím popisem v&nbsp;manuálové stránce:</p>

<pre>
<strong>man 3 rand</strong>
</pre>

<pre>
RAND(3)                    Linux Programmer's Manual                   RAND(3)
&nbsp;
NAME
       rand, rand_r, srand - pseudo-random number generator
&nbsp;
SYNOPSIS
       #include &lt;stdlib.h&gt;
&nbsp;
       int rand(void);
&nbsp;
       ...
       ...
       ...
</pre>

<p>Podle konkrétní architektury (32bit, 64bit) použijte jedno
z&nbsp;následujících volání:</p>

<pre>
julia&gt; <strong>ccall( ("rand", "libc"), Int32, ())</strong>
1804289383
&nbsp;
julia&gt; <strong>ccall( ("rand", "libc"), Int64, ())</strong>
1804289383
</pre>

<p>Vygenerování desetiprvkové sekvence pseudonáhodných čísel s&nbsp;využitím
nativní funkce <strong>rand</strong> vypadá takto:</p>

<pre>
julia&gt; <strong>for i in 1:10</strong>
       <strong>println(ccall( ("rand", "libc"), Int64, ()))</strong>
       <strong>end</strong>
&nbsp;
1102520059
2044897763
1967513926
1365180540
1540383426
304089172
1303455736
35005211
521595368
294702567
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Předání parametrů do nativních funkcí</h2>

<p>Poměrně často se setkáme s&nbsp;nutností zavolat nativní funkci, které se
musí předat nějaké parametry. Pro jednoduchost si ukážeme volání takových
funkcí na příkladu funkce nazvané <strong>abs</strong>, která je opět součástí
standardní céčkovské knihovny (na Linuxu je tato funkce uložena v&nbsp;souboru
<strong>libc.so.verze</strong>, kterou najdete většinou v&nbsp;adresáři
<strong>/lib/{architektura}-linux-gnu/</strong>). Hlavička funkce
<strong>abs</strong> naznačuje, že se akceptuje celé číslo a návratovou
hodnotou je absolutní hodnota tohoto čísla (samozřejmě kromě absolutní hodnoty
nejmenšího záporného čísla, protože tato absolutní hodnota překračuje rozsah
typu <strong>int</strong>):</p>

<pre>
ABS(3)                     Linux Programmer's Manual                    ABS(3)
&nbsp;
NAME
       abs, labs, llabs, imaxabs - compute the absolute value of an integer
&nbsp;
SYNOPSIS
       #include &lt;stdlib.h&gt;
&nbsp;
       int abs(int j);
       long int labs(long int j);
       long long int llabs(long long int j);
</pre>

<p>Podívejme se nyní, jakým způsobem se tato nativní funkce zavolá
z&nbsp;programovacího jazyka Julia. Pozor si musíme dát především na způsob
zápisu typů parametrů při volání <strong>ccall</strong>, protože nestačí pouze
napsat <strong>(Int64)</strong>, neboť tento zápis neodpovídá jednoprvkové
n-tici, ale pouze typu uzavřenému v&nbsp;závorkách. Korektní zápis jednoprvkové
n-tice vypadá takto: <strong>(Int64,)</strong>; ostatně podobně je tomu i <a
href="http://www.developer.com/lang/other/article.php/629381/Learn-to-Program-Using-Python-Empty-and-Single-Item-Tuples.htm">v&nbsp;Pythonu</a>.
Volání výše zmíněné nativní funkce <strong>abs</strong> tedy bude na 64bitovém
systému vypadat následovně:</p>

<pre>
julia&gt; <strong>ccall( ("abs", "libc"), Int64, (Int64,), 42)</strong>
42
&nbsp;
julia&gt; <strong>ccall( ("abs", "libc"), Int64, (Int64,), -42)</strong>
42
</pre>

<p>Podobným způsobem je možné zavolat nativní funkci nazvanou
<strong>atan2</strong>, která akceptuje dvě reálné hodnoty typu <i>double</i>,
což je typ, který v&nbsp;jazyce Julia odpovídá typu <strong>Float64</strong>.
Pozor je zapotřebí dát na to, že tuto funkci nenalezneme v&nbsp;knihovně
<strong>libc.so</strong>:</p>

<pre>
julia&gt; <strong>ccall( ("atan2", "libc"), Float64, (Float64,Float64), 0, -1)</strong>
ERROR: ccall: could not find function atan2 in library libc
 in anonymous at no file
</pre>

<p>ale v&nbsp;knihovně <strong>libm.so</strong>. Korektní volání tedy vypadá
následovně:</p>

<pre>
julia&gt; <strong>ccall( ("atan2", "libm"), Float64, (Float64,Float64), 0, -1)</strong>
3.141592653589793
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Práce s&nbsp;řetězci &ndash; specifikace ukazatele a zpětná konverze řetězce</h2>

<p>Mnoho nativních funkcí vyžaduje jako své parametry řetězce,
resp.&nbsp;přesněji řečeno céčkové řetězce, v&nbsp;nichž jsou zapsány
jednotlivé bajty, celý řetězec je ukončen bajtem s&nbsp;hodnotou nula a řetězec
je předán nikoli hodnotou, ale referencí (adresou jeho prvního znaku). Mezi
céčkovými řetězci a řetězci používanými v&nbsp;jazyku Julia existuje několik
rozdílů (v&nbsp;jazyku Julia jsou řetězce neměnné, podporovány jsou všechny
Unicode znaky apod.), ovšem při předávání řetězců pomocí reference (adresy)
postačuje u řetězce použít typ <strong>Cstring</strong>
popř.&nbsp;<strong>Ptr{UInt8}</strong>. V&nbsp;případě použití typu
<strong>Cstring</strong> je provedena kontrola, zda řetězec předávaný
z&nbsp;jazyka Julia neobsahuje bajty s&nbsp;nulou, pokud však použijete
<strong>Ptr{UInt8}</strong>, tato kontrola se neprovede, což je u některých
funkcí nezbytné (práce s&nbsp;binárními daty apod.).</p>

<p>Ukažme si nyní, jakým způsobem lze zavolat funkci nazvanou
<strong>system</strong>, která jako svůj jediný parametr akceptuje řetězec
představující příkaz shellu (s&nbsp;případnými parametry atd.), který se má
spustit (opět pozor na způsob zápisu jednoprvkové n-tice). Návratovou hodnotou
této funkce je návratový kód spouštěného příkazu (nikoli tedy například jméno
uživatele v&nbsp;případě volání &bdquo;whoami&ldquo;):</p>

<pre>
julia&gt; <strong>ccall( ("system", "libc"), Int32, (Ptr{UInt8},), "whoami")</strong>
tester
0
</pre>

<p>Můžeme samozřejmě spustit i složitější příkaz:</p>

<pre>
julia&gt; <strong>ccall( ("system", "libc"), Int32, (Ptr{UInt8},), "ls -1")</strong>
a.out
julia
julia-debug
libtest1.so
libtest2.so
test1.c
test1.o
test2.c
test2.o
0
</pre>

<p>Popř.&nbsp;si nechat na standardní výstup vypsat aktuální datum a čas:</p>

<pre>
julia&gt; <strong>ccall( ("system", "libc"), Int32, (Ptr{UInt8},), "date")</strong>
Pá čen 24 22:54:25 CEST 2016
0
</pre>

<p>Opačná operace, tedy přečtení řetězce vráceného nativní funkcí, je nepatrně
složitější. Pro příklad si vyzkoušejme nativní funkci nazvanou
<strong>getenv</strong>:</p>

<pre>
GETENV(3)                  Linux Programmer's Manual                 GETENV(3)
&nbsp;
NAME
       getenv, secure_getenv - get an environment variable
&nbsp;
SYNOPSIS
       #include &lt;stdlib.h&gt;
&nbsp;
       char *getenv(const char *name);
</pre>

<p>První pokus o přečtení proměnné prostředí nazvané <strong>PATH</strong>
nedopadne přesně podle našich představ, a to z&nbsp;toho důvodu, že se pouze
zobrazí hodnota ukazatele (ostatně my jsme skutečně vyžadovali získání hodnoty
typu <strong>Ptr{UInt8}</strong>):</p>

<pre>
julia&gt; <strong>ccall((:getenv, "libc"), Ptr{UInt8}, (Ptr{UInt8},), "PATH")</strong>
Ptr{UInt8} @0x00007fff14ae9c5c
</pre>

<p>Konverzi na skutečný řetězec jazyka Julia z&nbsp;céčkového řetězce zajišťuje
funkce <strong>bytestring</strong>:</p>

<pre>
julia&gt; <strong>bytestring( ccall((:getenv, "libc"), Ptr{UInt8}, (Ptr{UInt8},), "PATH"))</strong>
"/home/tester/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/tester/bin"
</pre>

<p>Poznámka: ve skutečnosti má funkce <strong>bytestring</strong> i opačný
význam v&nbsp;závislosti na typu předaného parametru.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vytvoření vlastní demonstrační sdílené knihovny</h2>

<p>Nyní se podívejme na způsob realizace vlastní nativní knihovny, jejíž funkce
bude možné zavolat přímo ze skriptů programovacího jazyka Julia. Naše
demonstrační knihovna bude obsahovat tři jednoduché funkce &ndash; první funkce
neakceptuje žádné parametry a vrací číslo typu integer, druhá funkce akceptuje
dva celočíselné parametry a taktéž vrací integer a konečně třetí funkce
akceptuje dva parametry typu <i>double</i> a stejného typu je i její návratová
hodnota:</p>

<pre>
int answer(void)
{
    return 42;
}
&nbsp;
int add_integers(int x, int y)
{
    return x+y;
}
&nbsp;
double add_doubles(double x, double y)
{
    return x+y;
}
</pre>

<p>Při překladu knihovny do objektového kódu je nutné použít parametr
<strong>-fPIC</strong>, aby byl vygenerovaný strojový kód nezávislý na
absolutních adresách, na nichž je uložen:</p>

<pre>
gcc -Wall -fPIC -ansi -c test1.c
</pre>

<p>Výsledná sdílená knihovna se následně vygeneruje linkerem, kterému se předá
požadované jméno knihovny:</p>

<pre>
gcc -shared -Wl,-soname,libtest1.so -o libtest1.so test1.o
</pre>

<p>Výsledkem by měl být soubor pojmenovaný <strong>libtest1.so</strong>.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Volání funkcí ze sdílené knihovny, předání parametrů, zpracování výsledků</h2>

<p>Před pokusem o zavolání některé funkce z&nbsp;právě vytvořené sdílené
knihovny je nutné nastavit proměnnou prostředí <strong>LD_LIBRARY_PATH</strong>
takovým způsobem, aby tato proměnná ukazovala na adresář se sdílenými
knihovnami. Pro jednoduchost předpokládejme použití aktuálního adresáře,
v&nbsp;němž je současně uložen i spustitelný soubor s&nbsp;interpretrem jazyka
Julia. Proměnná prostředí <strong>LD_LIBRARY_PATH</strong> se nastaví
takto:</p>

<pre>
tester ~/temp/julia-2ac304dfba/bin $ <strong>export LD_LIBRARY_PATH=.</strong>
</pre>

<p>Po tomto nastavení již spustíme interpret s&nbsp;interaktivní smyčkou
REPL:</p>

<pre>
tester ~/temp/julia-2ac304dfba/bin $ <strong>./julia</strong>
&nbsp;               _
   _       _ _(_)_     |  A fresh approach to technical computing
  (_)     | (_) (_)    |  Documentation: http://docs.julialang.org
   _ _   _| |_  __ _   |  Type "?help" for help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 0.4.5 (2016-03-18 00:58 UTC)
 _/ |\__'_|_|_|\__'_|  |  Official http://julialang.org/ release
|__/                   |  x86_64-unknown-linux-gnu
</pre>

<p>Následně se můžeme pokusit zavolat první funkci, která neakceptuje žádné
parametry a vrací hodnotu typu integer:</p>

<pre>
julia&gt; <strong>ccall( ("answer", "libtest1"), Int32, ())</strong>
42
</pre>

<p>Fungovat bude i prosté:</p>

<pre>
julia&gt; <strong>ccall( ("answer", "libtest1"), Int, ())</strong>
42
</pre>

<p>Součet dvou celých čísel, který zajišťuje nativní funkce pojmenovaná
<strong>add_integers</strong>, provedeme takto:</p>

<pre>
julia&gt; <strong>ccall( ("add_integers", "libtest1"), Int, (Int, Int), 1, 2)</strong>
3
</pre>

<p>alternativně též:</p>

<pre>
julia&gt; <strong>ccall( ("add_integers", "libtest1"), Int32, (Int32, Int32), 10, 20)</strong>
30
</pre>

<p>Poslední funkce pojmenovaná <strong>add_doubles</strong> sečte dvě čísla
typu <i>double</i>, resp.&nbsp;v&nbsp;typovém systému jazyka Julia dvě čísla
typu <i>Float64</i>:</p>

<pre>
julia&gt; <strong>ccall( ("add_doubles", "libtest1"), Float64, (Float64, Float64), 1.2, 3.4)</strong>
4.6
</pre>

<p>Některé konverze se provádí automaticky (zde celé číslo na číslo typu
double):</p>

<pre>
julia&gt; <strong>ccall( ("add_doubles", "libtest1"), Float64, (Float64, Float64), 1, 2)</strong>
3
</pre>

<p>Další konverze se však (automaticky) neprovádí, což je ostatně jen dobře,
protože o tyto konverze musí uživatel explicitně požádat:</p>

<pre>
julia&gt; <strong>ccall( ("add_integers", "libtest1"), Int, (Int, Int), 1.2, 2)</strong>
ERROR: InexactError()
 in anonymous at no file
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Druhá demonstrační sdílená knihovna s&nbsp;funkcí zpracovávající pole</h2>

<p>Kromě předávání běžných skalárních hodnot (celé číslo, číslo s&nbsp;plovoucí
řádovou čárkou atd.) a řetězců se velmi často setkáme s&nbsp;nutností předat do
volaných nativních funkcí pole. Ve skutečnosti se nejedná o žádnou složitou
operaci a pokud se dodrží správné datové typy, rozměry, dimenze atd., je
předávání polí do nativních funkcí bezpečné. Vyzkoušejme si práci s&nbsp;poli
na vlastní nativní sdílené knihovně s&nbsp;jedinou funkcí, která spočítá součet
všech prvků v&nbsp;poli. Vzhledem k&nbsp;tomu, jakým způsobem s&nbsp;poli
pracuje jazyk C (jedná se o pouhý blok v&nbsp;paměti bez dalších metainformací,
tj.&nbsp;bez mezí, délky atd.), je nutné do funkce předat i délku pole:</p>

<pre>
double sum(double *array, int length)
{
    double *p = array;
    double result = 0;
    int i;
&nbsp;
    for (i=0; i&lt;length; i++) {
        result += *p++;
    }
&nbsp;
    return result;
}
</pre>

<p>Zdrojový kód přeložíme stejným způsobem, jako tomu bylo u první demonstrační
knihovny:</p>

<pre>
gcc -Wall -fPIC -ansi -c test2.c
</pre>

<p>Následuje druhá operace volající linker, který sdílenou knihovnu
vygeneruje:</p>

<pre>
gcc -shared -Wl,-soname,libtest2.so -o libtest2.so test2.o
</pre>

<p>Výsledkem činnosti linkeru by měl být soubor pojmenovaný
<strong>libtest2.so</strong>.</p>

<p>Před spuštěním interpretru opět musíme nastavit proměnnou prostředí
<strong>LD_LIBRARY_PATH</strong> (pokud samozřejmě již nezůstala nastavená
z&nbsp;předchozích pokusů):</p>

<pre>
tester ~/temp/julia-2ac304dfba/bin $ <strong>export LD_LIBRARY_PATH=.</strong>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Předání pole z&nbsp;jazyka Julia do nativní knihovny</h2>

<p>Z&nbsp;předchozích částí tohoto seriálu již víme, jakým způsobem se
v&nbsp;programovacím jazyce Julia vytváří pole s&nbsp;prvky majícími požadovaný
typ. Naše nativní sdílená knihovna obsahuje funkci akceptující typ
<i>double</i>, což v&nbsp;jazyce Julia odpovídá typu <i>Float64</i>. Vytvořme
si tedy pole se třemi prvky tohoto typu. Povšimněte si, že se prvky nijak
neinicializují a mohou obsahovat náhodné hodnoty:</p>

<pre>
julia&gt; <strong>a=Array{Float64}(3)</strong>
3-element Array{Float64,1}:
 6.93643e-310
 6.936e-310  
 6.936e-310  
</pre>

<p>Dále toto pole naplníme hodnotami, například takto:</p>

<pre>
julia&gt; <strong>a[1]=1</strong>
1
&nbsp;
julia&gt; <strong>a[2]=2</strong>
2
&nbsp;
julia&gt; <strong>a[3]=3</strong>
3
</pre>

<p>Nyní již je vše připraveno pro zavolání nativní funkce, která sečte prvky
pole:</p>

<pre>
julia&gt; <strong>ccall( ("sum", "libtest2"), Float64, (Ptr{Float64}, Int), a, 3)</strong>
6.0
</pre>

<p>Pole samozřejmě můžeme vytvořit i dalšími konstruktory, například funkcemi
<strong>zeros</strong>, <strong>ones</strong> či <strong>fill</strong>.
Podívejme se například na nepřímý důkaz, že hodnotu 0.1 nelze typem
<i>double</i> přesně reprezentovat:</p>

<pre>
julia&gt; <strong>b=fill(0.1, 10)</strong>
10-element Array{Float64,1}:
 0.1
 0.1
 0.1
 0.1
 0.1
 0.1
 0.1
 0.1
 0.1
 0.1
</pre>

<p>Součet deseti prvků s&nbsp;hodnotou &bdquo;přibližně 0.1&ldquo; nebude roven
jedničce:</p>

<pre>
julia&gt; <strong>ccall( ("sum", "libtest2"), Float64, (Ptr{Float64}, Int), b, 10)</strong>
0.9999999999999999
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Segfault a další typické problémy</h2>

<p>Interpret programovacího jazyka Julia při volání nativních funkcí nepoužívá
žádné speciální techniky pro kontrolu předávaných parametrů ani jejich typů (a
už vůbec ne kontrolu mezí polí). Je tedy velmi snadné dosáhnout pádu
interpretru způsobeného například porušením ochrany paměti v&nbsp;nativní
knihovně apod. Příklad je jednoduchý &ndash; specifikujeme pole nesprávného
typu a současně namísto skutečného pole předáme pouze jedinou skalární hodnotu.
Výsledek bude poněkud depresivní :-):</p>

<pre>
julia&gt; <strong>ccall( ("sum", "libtest2"), Float64, (Ptr{Int}, Int), 0, 10)</strong>
WARNING: convert(::Type{Ptr}, ::Int64) methods should be converted to be methods of unsafe_convert
 in depwarn at deprecated.jl:73
 [inlined code] from deprecated.jl:418
 in unsafe_convert at no file:0
 in anonymous at no file
while loading no file, in expression starting on line 0
&nbsp;
signal (11): Segmentation fault
sum at ./libtest2.so (unknown line)
anonymous at no file:0
unknown function (ip: 0x7fb03b9aef73)
jl_toplevel_eval_in at /home/tester/temp/julia-2ac304dfba/bin/../lib/julia/libjulia.so (unknown line)
eval_user_input at REPL.jl:62
jlcall_eval_user_input_21168 at  (unknown line)
jl_apply_generic at /home/tester/temp/julia-2ac304dfba/bin/../lib/julia/libjulia.so (unknown line)
anonymous at REPL.jl:92
unknown function (ip: 0x7fb03b9a08f4)
unknown function (ip: (nil))
<strong>Segmentation fault</strong>
</pre>

<p>Je nutné si uvědomit, že mezi nativním kódem a skriptem naprogramovaným
v&nbsp;jazyce Julia leží pouze tenká vrstva rozhraní reprezentovaná funkcí
<strong>ccall</strong>, takže veškeré typové kontroly musí provádět uživatel.
To je daň, která se platí za použití rychlého rozhraní.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Globální proměnné v&nbsp;nativní knihovně</h2>

<p>Vytvořme si třetí a současně i poslední nativní sdílenou knihovnu. Tentokrát
v&nbsp;této knihovně nebudou uloženy žádné funkce, ale pouze čtveřice
globálních proměnných:</p>

<pre>
int i = 0;
int answer = 42;
float pi_f = 3.1415f;
double pi_d = 3.1415;
</pre>

<p>Průběh překladu a slinkování již známe:</p>

<pre>
gcc -Wall -fPIC -ansi -c test3.c
gcc -shared -Wl,-soname,libtest3.so -o libtest3.so test3.o
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Přístup ke globálním proměnným přes funkce <strong>unsafe_load</strong> a <strong>unsafe_store!</strong></h2>

<p>Ke globálním proměnným lze přistupovat s&nbsp;využitím funkce nazvané
<strong>cglobal</strong>, která se v&nbsp;mnoha ohledech podobá funkci
<strong>ccall</strong>, protože i zde musíme v&nbsp;n-tici předat jméno
proměnné a jméno knihovny. Druhým parametrem je typ globální proměnné.
Návratovou hodnotou této funkce je však ukazatel:</p>

<pre>
julia&gt; <strong>cglobal(("answer", "libtest3"), Int32)</strong>
Ptr{Int32} @0x00007fd1a9acb030
&nbsp;
julia&gt; <strong>cglobal(("pi_f", "libtest3"), Float32)</strong>
Ptr{Float32} @0x00007fd1a9acb034
&nbsp;
julia&gt; <strong>cglobal(("pi_d", "libtest3"), Float64)</strong>
Ptr{Float64} @0x00007fd1a9acb038
&nbsp;
julia&gt; <strong>cglobal(("i", "libtest3"), Int32)</strong>
Ptr{Int32} @0x00007fd1a9acb044
</pre>

<p>Načtení hodnoty, na níž ukazuje vrácený ukazatel, zajišťuje funkce nazvaná
<strong>unsafe_load</strong>. Přečtení hodnoty globální proměnné
<strong>answer</strong> tedy vypadá následovně:</p>

<pre>
julia&gt; <strong>answer_ptr = cglobal(("answer", "libtest3"), Int32)</strong>
Ptr{Int32} @0x00007f99fd7d2030
&nbsp;
julia&gt; <strong>unsafe_load(answer_ptr)</strong>
42
</pre>

<p>Pro zápis se používá funkce nazvaná <strong>unsafe_store!</strong> (i
s&nbsp;vykřičníkem na konci). Změna globální proměnné <strong>i</strong> vypadá
takto:</p>

<pre>
julia&gt; <strong>i_ptr = cglobal(("i", "libtest3"), Int32)</strong>
Ptr{Int32} @0x00007f99fd7d2044
&nbsp;
julia&gt; <strong>unsafe_load(i_ptr)</strong>
0
&nbsp;
julia&gt; <strong>unsafe_store!(i_ptr, 1000)</strong>
Ptr{Int32} @0x00007f99fd7d2044
&nbsp;
julia&gt; <strong>unsafe_load(i_ptr)</strong>
1000
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Repositář s&nbsp;demonstračními zdrojovými kódy nativních knihoven</h2>

<p>Všechny tři demonstrační zdrojové kódy, které se mají přeložit do nativních
sdílených knihoven, byly uloženy do GIT repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations/">https://github.com/tisnik/presentations/</a>:</p>

<table>
<tr><th>#</th><th>Soubor</th><th>Popis</th><th>Adresa</th></tr>
<tr><td>1</td><td>test1.c</td><td>zdrojový text pro knihovnu se třemi funkcemi</td><td><a href="https://github.com/tisnik/presentations/blob/master/julia/test1.c">https://github.com/tisnik/presentations/blob/master/julia/test1.c</a></td></tr>
<tr><td>2</td><td>test2.c</td><td>zdrojový text pro knihovnu s funkcí akceptující pole</td><td><a href="https://github.com/tisnik/presentations/blob/master/julia/test2.c">https://github.com/tisnik/presentations/blob/master/julia/test2.c</a></td></tr>
<tr><td>3</td><td>test3.c</td><td>zdrojový text pro knihovnu s globálními proměnnými</td><td><a href="https://github.com/tisnik/presentations/blob/master/julia/test3.c">https://github.com/tisnik/presentations/blob/master/julia/test3.c</a></td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>clock(3) - Linux man page<br />
<a href="http://linux.die.net/man/3/clock">http://linux.die.net/man/3/clock</a>
</li>

<li>rand_r(3) - Linux man page<br />
<a href="http://linux.die.net/man/3/rand_r">http://linux.die.net/man/3/rand_r</a>
</li>

<li>atan2(3) - Linux man page<br />
<a href="http://linux.die.net/man/3/atan2">http://linux.die.net/man/3/atan2</a>
</li>

<li>Calling C and Fortran Code<br />
<a href="http://docs.julialang.org/en/release-0.4/manual/calling-c-and-fortran-code/?highlight=symbol">http://docs.julialang.org/en/release-0.4/manual/calling-c-and-fortran-code/?highlight=symbol</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>Introducing Julia/Functions<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Functions">https://en.wikibooks.org/wiki/Introducing_Julia/Functions</a>
</li>

<li>Functions (Julia documentation)<br />
<a href="http://docs.julialang.org/en/release-0.4/manual/functions/">http://docs.julialang.org/en/release-0.4/manual/functions/</a>
</li>

<li>Evaluate binomial coefficients<br />
<a href="http://rosettacode.org/wiki/Evaluate_binomial_coefficients">http://rosettacode.org/wiki/Evaluate_binomial_coefficients</a>
</li>

<li>Ackermann function<br />
<a href="http://rosettacode.org/wiki/Ackermann_function">http://rosettacode.org/wiki/Ackermann_function</a>
</li>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; dokumentace<br />
<a href="http://docs.julialang.org/en/release-0.4/">http://docs.julialang.org/en/release-0.4/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Introducing Julia/Metaprogramming<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming">https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>Learn X in Y minutes (where X=Julia)<br />
<a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a>
</li>

<li>New Julia language seeks to be the C for scientists<br />
<a href="http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html">http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html</a>
</li>

<li>Julia: A Fast Dynamic Language for Technical Computing<br />
<a href="http://karpinski.org/publications/2012/julia-a-fast-dynamic-language">http://karpinski.org/publications/2012/julia-a-fast-dynamic-language</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="http://llvm.org/">http://llvm.org/</a>
</li>

<li>Julia: benchmarks<br />
<a href="http://julialang.org/benchmarks/">http://julialang.org/benchmarks/</a>
</li>

<li>Type system<br />
<a href="https://en.wikipedia.org/wiki/Type_system">https://en.wikipedia.org/wiki/Type_system</a>
</li>

<li>Half-precision floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Half-precision_floating-point_format">https://en.wikipedia.org/wiki/Half-precision_floating-point_format</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

