<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Julia: další stříbrná kulka v IT?</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Julia: další stříbrná kulka v IT?</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Po popisu programovacích jazyků pocházejících z programátorského pekla nastal čas se začít věnovat serióznějším programovacím jazykům. Jedním novějším příspěvkem na tomto poli je jazyk nazvaný Julia, který je určený zejména pro použití v oblasti numerické matematiky, zpracování signálů či statistiky, tj. v těch oborech, v nichž se používá například GNU Octave, R či Numpy+SciPy.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Julia: další stříbrná kulka v&nbsp;IT?</a></p>
<p><a href="#k02">2. Interaktivní smyčka REPL</a></p>
<p><a href="#k03">3. Další možnosti nabízené REPL</a></p>
<p><a href="#k04">4. Aritmetické operátory, implicitní násobení</a></p>
<p><a href="#k05">5. Funkce</a></p>
<p><a href="#k06">6. Funkce vyššího řádu</a></p>
<p><a href="#k07">7. Programové smyčky</a></p>
<p><a href="#k08">8. Datové typy</a></p>
<p><a href="#k09">9. Použití typů BigInt a BigFloat</a></p>
<p><a href="#k10">10. Makra</a></p>
<p><a href="#k11">11. Speciální funkce zobrazující generovaný nativní kód</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Julia: další stříbrná kulka v&nbsp;IT?</h2>

<p>&bdquo;<i>If you started from the beginning, you could recreate the things
that people liked about those languages without so many of the
problems.</i>&ldquo;</p>

<p>Jedním z&nbsp;nejnovějších příspěvků do světa vyšších programovacích jazyků
je jazyk nazvaný <i>Julia</i>, jehož první funkční verze byla zveřejněna před
čtyřmi roky (i když práce na tomto jazyku začala již v&nbsp;roce 2009). Jedná
se o programovací jazyk, který byl navržen takovým způsobem, aby dokázal
nahradit takové nástroje, jakými jsou Matlab, R, GNU Octave či Python
s&nbsp;knihovnami Numpy a SciPy a současně dokázal překládat programy do
optimalizovaného kódu, který by mohl konkurovat Céčku či (dokonce) Fortranu.
Důvod je jednoduchý &ndash; tvůrci jazyka Julia používali pro svou práci
(numerická matematika a statistika) různé nástroje, z&nbsp;nichž každý byl
specializován pro určitou oblast (Matlab pro výpočty s&nbsp;maticemi), R pro
statistické výpočty apod.), ovšem kooperace mezi těmito nástroji nebyla
ideální. Obecné jazyky typu Ruby či Python byly zase (opět podle mínění autorů
jazyka Julia) pomalé, zejména při porovnání s&nbsp;klasickým céčkem, ale i
s&nbsp;Javou.</p>

<p>Snahou původního autora <a href="http://karpinski.org/">Stefana
Karpinského</a> bylo vytvořit nový programovací jazyk založený na ve své době
nejnovějších technologiích typu <a href="http://llvm.org/">LLVM</a> a současně
používající to nejlepší ze světů imperativních i funkcionálních programovacích
jazyků. Výsledkem měl být jazyk, který by byl snadno použitelný (zejména pro
amatérské programátory), robustní, škálovatelný a současně i <a
href="http://julialang.org/benchmarks/">dostatečně rychlý</a>, aby mohl
soutěžit s&nbsp;C či Fortranem. Navíc měl jazyk <i>Julia</i> nabízet možnost
snadné kooperace s&nbsp;knihovnami vytvořenými právě v&nbsp;C či Fortranu.
Jestli se tento cíl skutečně podařilo splnit se pokusíme zjistit jak
v&nbsp;tomto článku, tak i v&nbsp;několika navazujících článcích.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Interaktivní smyčka REPL</h2>

<p>Podobně jako je tomu u mnoha dalších vyšších programovacích jazyků, je i
Julia vybavena interaktivní smyčkou REPL (Read-Eval-Print-Loop), do níž může
uživatel zadávat jednotlivé příkazy či deklarace, které se ihned předávají
interpretru, který je zpracuje a popř.&nbsp;vypíše výsledek příkazu či chybovou
zprávu. Smyčka REPL je vybavena pamětí dříve zapsaných příkazů a především pak
možností automatického doplňování jmen funkcí atd. klávesou
<strong>Tab</strong>. Nesmíme zapomenout ani na okamžité přepínání smyčky mezi
několika režimy (zadávání příkazů, nápověda, shell atd.).</p>

<p>Po instalaci balíčku s&nbsp;programovacím jazykem Julia se interaktivní
smyčka spustí příkazem <strong>julia</strong>. Na mém systému s&nbsp;Fedorou je
dostupný poměrně starý interpret verze 0.3.9, ovšem na stránce <a
href="http://julialang.org/downloads/">http://julialang.org/downloads/</a> lze
získat novější verze (nebojte se toho, že i nejnovější verze je pořád 0.x,
ostatně ani tak vyspělý nástroj, jakým je <i>Inkscape</i>, taktéž ještě
nedosáhl verze 1.x :-):</p>

<pre>
$ <strong>julia</strong>
               _
   _       _ _(_)_     |  A fresh approach to technical computing
  (_)     | (_) (_)    |  Documentation: http://docs.julialang.org
   _ _   _| |_  __ _   |  Type "help()" for help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 0.3.9
 _/ |\__'_|_|_|\__'_|  |
|__/                   |  x86_64-redhat-linux
&nbsp;
julia&gt;
</pre>

<p>Ve smyčce REPL funguje automatické doplňování příkazů, které se vyvolá
klávesou <strong>Tab</strong>. Pokud smyčka nedokáže najít a doplnit příkaz
jednoznačně (tj.&nbsp;když zadanému textu odpovídá více příkazů), vypíše
všechny relevantní příkazy a očekává další akci uživatele. Zkusme si například
vypsat všechny dostupné příkazy začínající na "a":</p>

<pre>
julia&gt; a
abs          accept       acot         acscd        airyai
airyprime    angle        applicable   asec         asind        atan2
abs2         acos         acotd        acsch        airyaiprime
airyx        any          apply        asecd        asinh        atand
abspath      acosd        acoth        addprocs     airybi
all          any!         apropos      asech        assert       atanh
abstract     acosh        acsc         airy         airybiprime
all!         append!      ascii        asin         atan         atexit
</pre>

<p>Ve chvíli, kdy uživatel stlačí klávesu "?", přepne se smyčka REPL do režimu
nápovědy, což je ihned viditelné změnou textu i barvy výzvy (promptu):</p>

<pre>
help?&gt;
</pre>

<p>Můžeme si vyzkoušet získat nápovědu pro funkci <strong>quit</strong>, což je
velmi snadné (opět lze použít automatické doplňování):</p>

<pre>
help?&gt; <strong>quit</strong>
Base.quit()
&nbsp;
   Quit the program indicating that the processes completed
   succesfully. This function calls "exit(0)" (see "exit()").
&nbsp;
julia&gt;
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Další možnosti nabízené REPL</h2>

<p>Kromě klávesy <strong>Tab</strong>, která slouží pro automatické doplňování
jmen funkcí a dalších příkazů, je možné používat paměť již zadaných příkazů.
Pro vyvolání příkazů z&nbsp;paměti smyčky REPL se používají klasické kurzorové
šipky a taktéž klávesové zkratky <strong>Ctrl+S</strong> a
<strong>Ctrl+R</strong>, jejichž význam je prakticky stejný, jako
v&nbsp;shellu.</p>

<p>Zajímavá situace nastane ve chvíli, kdy na vstupním řádku zmáčkneme znak ";"
(středník). V&nbsp;tomto okamžiku se interaktivní smyčka REPL přepne do režimu
shellu, v&nbsp;němž očekává stejné příkazy, jako v&nbsp;klasickém shellu
(například v&nbsp;BASHi). To, že se režim smyčky REPL změní, poznáme snadno:
změní se jak prompt (výzva), tak i barva promtpu na červenou:</p>

<pre>
shell&gt;
</pre>

<p>Zkusme si nějaký příkaz spustit:</p>

<pre>
shell&gt; <strong>whoami</strong>
tisnik
&nbsp;
julia&gt;
</pre>

<p>Užitečná je i funkce <strong>apropos()</strong>, která dokáže najít zadaný
identifikátor ve všech dostupných modulech:</p>

<pre>
julia&gt; <strong>apropos("quit")</strong>
INFO: Loading help data...
Base.quit()
Base.exit([code])
Base.Profile.clear_malloc_data()
Base.less(file::String[, line])
Base.less(function[, types])
Base.edit(file::String[, line])
Base.edit(function[, types])
</pre>

<pre>
julia&gt; <strong>apropos("push")</strong>
Base.push!(collection, items...) -&gt; collection
Base.pushdisplay(d::Display)
Base.Pkg.publish()
Base.Collections.heappush!(v, x[, ord])
</pre>

<p>Interpret si pamatuje poslední výsledek, který lze vyvolat pomocí
automaticky naplňované proměnné nazvané <strong>ans</strong> (což možná někteří
uživatelé znají z&nbsp;kalkulaček HP či z&nbsp;Matlabu):</p>

<pre>
julia&gt; <strong>6*8</strong>
48
&nbsp;
julia&gt; <strong>ans</strong>
48
&nbsp;
julia&gt; <strong>ans*ans</strong>
2304
&nbsp;
julia&gt; <strong>ans</strong>
2304
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Aritmetické operátory, implicitní násobení</h2>

<p>V&nbsp;jazyce Julia jsou (podle očekávání) dostupné všechny základní
aritmetické operátory, tj.&nbsp;součet, rozdíl, součin, podíl, podíl modulo a
umocnění. Pouze je zapotřebí si dát pozor na to, že pro dělení se používá
operátor /, zatímco zdvojené lomítko // se používá pro zápis zlomků, což je
jeden z&nbsp;datových typů tohoto jazyka:</p>

<pre>
julia&gt; <strong>1+2</strong>
3
&nbsp;
julia&gt; <strong>6*7</strong>
42
&nbsp;
julia&gt; <strong>10/3</strong>
3.3333333333333335
&nbsp;
julia&gt; <strong>10//3</strong>
10//3
&nbsp;
julia&gt; <strong>10%3</strong>
1
&nbsp;
julia&gt; <strong>2^10</strong>
1024
&nbsp;
julia&gt; <strong>1+2*3</strong>
7
</pre>

<p>Ve skutečnosti jsou všechny aritmetické operátory implementovány běžnými
funkcemi pojmenovanými stejným znakem, jaký odpovídá danému operátoru. To
například znamená, že součet dvou čísel lze zapsat jako <strong>1+2</strong>,
ale také formou funkce <strong>+(1,2)</strong>, což je sice možná poněkud
podivné, ale jeden z&nbsp;významů bude vysvětlen <a href="#k06">v&nbsp;šesté
kapitole</a> v&nbsp;souvislosti s&nbsp;funkcemi vyššího řádu:</p>

<pre>
julia&gt; <strong>+(1,2,3)</strong>
6
&nbsp;
julia&gt; <strong>*(1,2,3)</strong>
6
</pre>

<p>Užitečné je, že při násobení proměnné číselnou konstantou je možné vynechat
operátor * a zapsat násobení tak, jak jsou uživatelé zvyklí
z&nbsp;matematiky:</p>

<pre>
julia&gt; <strong>x=10</strong>
10
&nbsp;
julia&gt; <strong>2*x</strong>
20
&nbsp;
julia&gt; <strong>2x</strong>
20
&nbsp;
julia&gt; <strong>2*x+3*x^2</strong>
320
&nbsp;
julia&gt; <strong>2x+3x^2</strong>
320
</pre>

<p>Pozor je zapotřebí dát na to, že tímto způsobem není možné násobit dvě
proměnné &ndash; což je ostatně logické, neboť interpret neví, kde začíná jméno
druhé proměnné:</p>

<pre>
julia&gt; <strong>x=6</strong>
6
&nbsp;
julia&gt; <strong>y=7</strong>
7
&nbsp;
julia&gt; <strong>2x</strong>
12
&nbsp;
julia&gt; <strong>2x+3y</strong>
33
&nbsp;
julia&gt; <strong>x y</strong>
ERROR: syntax: extra token "y" after end of expression
&nbsp;
julia&gt; <strong>xy</strong>
ERROR: xy not defined
</pre>

<p>Některé konstanty a samozřejmě též uživatelem deklarované proměnné mohou ve
svém jménu používat prakticky libovolné znaky Unicode. Příkladem je již dopředu
deklarovaná konstanta &pi;. V&nbsp;následujícím příkladu je tato konstanta
vynásobena dvěma, což je možné, protože již v&nbsp;předchozím textu jsme se
zmínili o možnosti vynechání znaku * při násobení číselnou konstantou:</p>

<pre>
julia&gt; <strong>2&pi;</strong>
6.283185307179586
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Funkce</h2>

<p>Funkce se v&nbsp;programovacím jazyku Julia vytváří podobným způsobem, jaký známe například z&nbsp;jazyka Lua. První způsob vypadá následovně:</p>

<pre>
function add(x,y)
    return x+y
end
&nbsp;
add (generic function with 1 method)
&nbsp;
julia&gt; <strong>add(1,2)</strong>
3
</pre>

<p>Druhý způsob je prakticky stejný, ovšem vynechá se příkaz
<strong>return</strong>, který zde není nutný, neboť z&nbsp;funkce se vrací
poslední vyhodnocovaný výraz:</p>

<pre>
function add(x,y)
    x+y
end
&nbsp;
add (generic function with 1 method)
&nbsp;
julia&gt; <strong>add(1,2)</strong>
3
</pre>

<p>Poslední &bdquo;jednořádkový&ldquo; způsob se použije ve chvíli, kdy je tělo
funkce skutečně jednoduché. Tento způsob se nejvíce podobá matematickému zápisu
funkcí:</p>

<pre>
julia&gt; <strong>mul(x,y)=x*y</strong>
mul (generic function with 1 method)
&nbsp;
julia&gt; <strong>mul(6,7)</strong>
42
</pre>

<p>Pokud si chcete být jisti tím, jaká funkce se volá a s&nbsp;jakými typy
parametrů, použijte makro <strong>@which</strong>:</p>

<pre>
julia&gt; <strong>@which abs(42)</strong>
abs(x::Signed) at int.jl:75
&nbsp;
julia&gt; <strong>@which sin(42)</strong>
sin(x::Real) at math.jl:126
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Funkce vyššího řádu</h2>

<p>Programovací jazyk <i>Julia</i> sice není, na rozdíl od Haskellu a částečně
i Clojure, čistě funkcionální jazyk, nicméně i zde hrají při vývoji aplikací i
jednoduchých výpočtů velkou roli funkce vyššího řádu, tj.&nbsp;funkce, které
jako své parametry akceptují jiné funkce popř.&nbsp;dokonce vrací (nové) funkce
jako svoji návratovou hodnotu. Mezi dvě základní funkce vyššího řádu, patří
funkce nazvané <strong>map</strong> a taktéž <strong>apply</strong>. Funkce
<strong>map</strong> jako svůj první parametr akceptuje jinou funkci
(s&nbsp;jedním parametrem) a druhým parametrem musí být seznam, n-tice, pole
atd.. <strong>map</strong> postupně aplikuje předanou funkci na jednotlivé
prvky seznamu a vytváří tak novou sekvenci. Podívejme se na dva příklady:</p>

<pre>
julia&gt; <strong>inc(x)=x+1</strong>
inc (generic function with 1 method)
&nbsp;
julia&gt; <strong>inc(2)</strong>
3
&nbsp;
julia&gt; <strong>map(inc, range(1,10))</strong>
10-element Array{Int64,1}:
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
</pre>

<pre>
julia&gt; <strong>square(x)=x*x</strong>
square (generic function with 1 method)
&nbsp;
julia&gt; <strong>map(square, range(1,10))</strong>
10-element Array{Int64,1}:
   1
   4
   9
  16
  25
  36
  49
  64
  81
 100
</pre>

<p>Funkce <strong>apply</strong> se chová poněkud odlišně &ndash; aplikuje
totiž nějakou funkci (svůj první parametr) na předaný seznam, n-tici, pole atd.
Typický &bdquo;školní&ldquo; příklad s&nbsp;binární funkcí * (tj.&nbsp;funkcí
se dvěma parametry) může vypadat následovně (jedná se o výpočet
faktoriálu):</p>

<pre>
julia&gt; <strong>apply(*, range(1,10))</strong>
3628800
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Programové smyčky</h2>

<p>V&nbsp;jazyku Julia lze použít všechny základní typy programových smyček.
Podívejme se na způsob jejich zápisu. Povšimněte si, že se nepoužívají žádné
dvojtečky (viz Python) ani klíčová slova typu <strong>do</strong> (Lua) či
<strong>begin</strong>:</p>

<p>Smyčka typu <strong>while</strong>:</p>

<pre>
while výraz
    příkaz
    příkaz
    příkaz
end
</pre>

<p>Smyčka typu <strong>for-each</strong>:</p>

<pre>
for item in iter
    příkaz
    příkaz
    příkaz
end
</pre>

<p>Smyčka typu <strong>for</strong> má několik forem, z&nbsp;nichž
nejpoužívanější je pravděpodobně forma, v&nbsp;níž se používá počitadlo, které
postupně nabývá hodnoty ze zadaného rozsahu s&nbsp;případným krokem.
Následující příklad vytiskne čísla 1 až 10 na jediný řádek:</p>

<pre>
for i=1:10
    print(i)
end
12345678910
</pre>

<p>Samozřejmě můžeme provést odřádkování po každém vypsaném číslu a současně
provést nějaký výpočet (zde konkrétně počítáme mocninu dvou):</p>

<pre>
for i=1:10
    println(i,"\t",2^i)
end
&nbsp;
1       2
2       4
3       8
4       16
5       32
6       64
7       128
8       256
9       512
10      1024
</pre>

<p>Podívejme se ještě na použití funkce <strong>range</strong> a
<strong>*</strong> společně <a href="#k06">s&nbsp;funkcí vyššího řádu</a>
nazvanou <strong>apply()</strong> pro výpočet faktoriálu:</p>

<pre>
for i=1:10
    println(i,"\t",apply(*, range(1,i)))
end
&nbsp;
1       1
2       2
3       6
4       24
5       120
6       720
7       5040
8       40320
9       362880
10      3628800
</pre>

<p>Smyčka typu <strong>for</strong> s&nbsp;větším množstvím řídicích
proměnných:</p>

<pre>
for i=..., j=...
    příkaz
    příkaz
    příkaz
end
</pre>

<p>Podrobnosti o použití těchto smyček ve složitějších či rozsáhlejších
algoritmech si řekneme v&nbsp;následujícím článku.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Datové typy</h2>

<p>Mezi základní datové typy, s&nbsp;nimiž je možné v&nbsp;programovacím jazyku
Julia pracovat, patří především <strong>Bool</strong>, <strong>Int8</strong>,
<strong>UInt8</strong>, <strong>Int16</strong>, <strong>UInt16</strong>,
<strong>Int32</strong>, <strong>UInt32</strong>, <strong>Int64</strong>,
<strong>UInt64</strong>, <strong>Int128</strong>, <strong>UInt128</strong>,
<strong>Float16</strong>, <strong>Float32</strong>, <strong>Float64</strong>,
<strong>Complex64</strong> a <strong>Complex128</strong>. U každé hodnoty
popř.&nbsp;proměnné lze typ velmi snadno zjistit, a to v&nbsp;režimu nápovědy.
Příkladem může být zjištění typu konstanty 42 &ndash; nejprve stlačíme "?" pro
přepnutí do režimu nápovědy a následně napíšeme 42 + Enter. Výsledek by měl
vypadat zhruba následovně:</p>

<pre>
help?&gt; <strong>42</strong>
42 is of type
DataType   : Int64
  supertype: Signed
</pre>

<p>Povšimněte si použití proměnné <strong>ans</strong>, o níž jsme se již
zmiňovali v&nbsp;předchozích kapitolách:</p>

<pre>
julia&gt; <strong>1/3</strong>
0.3333333333333333
&nbsp;
help?&gt; <strong>ans</strong>
0.3333333333333333 is of type
DataType   : Float64
  supertype: FloatingPoint
</pre>

<p>Zlomky zapisované symbolem // mají svůj vlastní datový typ:</p>

<pre>
julia&gt; <strong>1//3</strong>
1//3
&nbsp;
help?&gt; ans
1//3 is of type
DataType   : Rational{Int64} (constructor with 1 method)
  supertype: Real
  fields   : (:num,:den)
</pre>

<p>Pracovat je možné i s&nbsp;hodnotami nekonečno (<strong>Inf</strong>) a
&bdquo;nečíslo&ldquo; (<strong>NaN</strong>):</p>

<pre>
help?&gt; <strong>Inf</strong>
Inf is of type
DataType   : Float64
  supertype: FloatingPoint
&nbsp;
help?&gt; <strong>NaN</strong>
NaN is of type
DataType   : Float64
  supertype: FloatingPoint
</pre>

<p>U těchto hodnot je samozřejmě definováno jejich přesné chování u většiny
aritmetických operací i u většiny funkcí:</p>

<pre>
julia&gt; <strong>1/0</strong>
Inf
&nbsp;
julia&gt; <strong>Inf-Inf</strong>
NaN
&nbsp;
julia&gt; <strong>1/Inf</strong>
0.0
</pre>

<p>Dalším datovým typem je komplexní číslo, které se vytváří jednoduše &ndash;
použije se konstanta <strong>im</strong>, kterou se vynásobí hodnota, která se
má převést na imaginární složku:</p>

<pre>
help?&gt; <strong>im</strong>
im is of type
DataType   : Complex{Bool} (constructor with 1 method)
  supertype: Number
  fields   : (:re,:im)
</pre>

<p>Jedna z&nbsp;možných konstrukcí komplexního čísla může vypadat takto:</p>

<pre>
julia&gt; <strong>1+2im</strong>
1 + 2im
&nbsp;
help?&gt; <strong>ans</strong>
1 + 2im is of type
DataType   : Complex{Int64} (constructor with 1 method)
  supertype: Number
  fields   : (:re,:im)
</pre>

<p>Samozřejmě budou pracovat i obvyklé operace s&nbsp;komplexními čísly:</p>

<pre>
julia&gt; <strong>z=1+2im</strong>
1 + 2im
&nbsp;
julia&gt; <strong>z^2</strong>
-3 + 4im
</pre>

<p>Složenými datovými typy, poli atd. se budeme zabývat příště.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Použití typů BigInt a BigFloat</h2>

<p>Zkusme provést zdánlivě jednoduchý výpočet:</p>

<pre>
julia&gt; <strong>2^70</strong>
0
</pre>

<p>Výsledkem je překvapivě nula, což je samozřejmě špatný výsledek. Je tomu tak
z&nbsp;toho důvodu, že konstanty 2 i 70 jsou typu integer (konkrétně 64bitové
celé číslo se znaménkem), tudíž i výpočet se provádí s&nbsp;typem integer:</p>

<pre>
help?&gt; <strong>2</strong>
2 is of type
DataType   : Int64
  supertype: Signed
</pre>

<p>Můžeme však jednu z&nbsp;konstant převést na <i>BigInt</i>, což jsou celá
čísla s&nbsp;prakticky neomezeným rozsahem. Nyní již výpočet proběhne bez
chyby:</p>

<pre>
julia&gt; <strong>BigInt(2)^70</strong>
1180591620717411303424
</pre>

<p>Výpočet faktoriálu 100! nyní podle očekávání taktéž nedopadne správně:</p>

<pre>
julia&gt; <strong>apply(*, range(1,100))</strong>
0
</pre>

<p>Po malé úpravě je již vše v&nbsp;pořádku:</p>

<pre>
julia&gt; <strong>apply(*, range(BigInt(1),100))</strong>
933262154439441526816992388562667004907159682643816214685929638952175
999932299156089414639761565182862536979208272237582511852109168640000
00000000000000000000
</pre>

<p>Namísto konstruktoru <strong>BigInt</strong> lze použít i funkci
<strong>big()</strong>, která podle typu vstupní hodnoty vytvoří <i>BigInt</i>
či <i>BigFloat</i>:</p>

<pre>
julia&gt; <strong>apply(*, range(big(1),100))</strong>
933262154439441526816992388562667004907159682643816214685929638952175
999932299156089414639761565182862536979208272237582511852109168640000
00000000000000000000
</pre>

<p>Funkce <strong>big()</strong> nám pomůže i při výpočtu hodnot
s&nbsp;nekonečným rozvojem:</p>

<pre>
julia&gt; <strong>1/33</strong>
0.030303030303030304
&nbsp;
julia&gt; <strong>big(1)/33</strong>
3.030303030303030303030303030303030303030303030303030303030303030303030303030301e-02 with 256 bits of precision
&nbsp;
julia&gt; <strong>big(1)/7</strong>
1.428571428571428571428571428571428571428571428571428571428571428571428571428568e-01 with 256 bits of precision
&nbsp;
julia&gt; <strong>pi</strong>
π = 3.1415926535897...
&nbsp;
julia&gt; <strong>big(pi)</strong>
3.141592653589793238462643383279502884197169399375105820974944592307816406286198e+00 with 256 bits of precision
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Makra</h2>

<p>V&nbsp;programovacím jazyku Julia je možné vytvářet i poměrně složitá makra,
která se podobají makrům známým například z&nbsp;různých variant LISPu či
z&nbsp;programovacího jazyka Clojure. V&nbsp;dnešním článku nemáme dostatek
prostoru pro vysvětlení, jakým způsobem se makra zapisují a jak se vyhodnocují,
ale ukážeme si některé možnosti jejich použití. Proč se vlastně makra používají
a k&nbsp;čemu jsou užitečná? Makra jsou spouštěna ve chvíli, kdy dochází ke
zpracování vstupního zdrojového kódu, což znamená, že se makra dají použít pro
úpravu tohoto kódu (manipulaci s&nbsp;kódem) ještě předtím, než dojde
k&nbsp;jeho interpretaci či překladu. Parametry maker tedy ještě
<strong>nejsou</strong> vyhodnoceny, na rozdíl od parametrů předávaných
funkcím. To mj.&nbsp;znamená, že v&nbsp;makrech lze implementovat smyčky či
podmínky (podmínka typu <strong>if</strong> nelze zapsat běžnou funkcí, protože
by došlo k&nbsp;vyhodnocení všech parametrů).</p>

<p>Podívejme se nyní na některá užitečná makra. To, že se volá makro, se dá
poznat z&nbsp;použití znaku @ před jménem makra. Příkladem může být
<strong>@which</strong>, které nalezne a vypíše konkrétní funkci, která se pro
daný výraz zavolá:</p>

<pre>
julia&gt; <strong>@which abs(42)</strong>
abs(x::Signed) at int.jl:75
&nbsp;
julia&gt; <strong>@which sin(x^2)</strong>
sin(x::Real) at math.jl:126
</pre>

<p>Pokud budeme potřebovat zjistit, jak dlouho trvá nějaký výpočet, lze použít
makro nazvané <strong>@time</strong>, které vypíše čas běhu výpočtu a
alokovanou paměť. Výsledkem je však přímo výsledek výpočtu, tj.&nbsp;okolní kód
&bdquo;nepozná&ldquo;, že se volalo makro:</p>

<pre>
julia&gt; <strong>sin(2pi)</strong>
-2.4492935982947064e-16
&nbsp;
julia&gt; <strong>@time sin(2pi)</strong>
elapsed time: 9.708e-6 seconds (112 bytes allocated)
-2.4492935982947064e-16
&nbsp;
julia&gt; <strong>@time apply(*,range(big(1),100))</strong>
elapsed time: 0.000279437 seconds (44632 bytes allocated)
933262154439441526816992388562667004907159682643816214685929
638952175999932299156089414639761565182862536979208272237582
51185210916864000000000000000000000000
</pre>

<p>Podobně se chová makro nazvané <strong>@timed</strong>, které ovšem vrací
odlišný výsledek, konkrétně n-tici obsahující jak výsledek výpočtu, tak i čas
běhu a alokovanou paměť v&nbsp;bajtech. To znamená, že tyto hodnoty je možné
programově zpracovat:</p>

<pre>
julia&gt; <strong>@timed sin(x^2)</strong>
(-0.9917788534431158,7.962e-6,96,0.0)
&nbsp;
julia&gt; <strong>@timed apply(*,range(big(1),100))</strong>
(93326215443944152681699238856266700490715968264381621468592
963895217599993229915608941463976156518286253697920827223758
251185210916864000000000000000000000000,0.000265888,44632,0.0)
</pre>

<p>Užitečným makrem při ladění je makro nazvané <strong>@show</strong>, které
zobrazí vyhodnocovaný výraz a současně vrátí i jeho výsledek:</p>

<pre>
julia&gt; <strong>@show sin(2^x)/cos(2)</strong>
sin(2^x) / cos(2) =&gt; -2.2108206945184055
-2.2108206945184055
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Speciální funkce zobrazující generovaný nativní kód</h2>

<p>V&nbsp;úvodní kapitole jsme si řekli, že jazyk Julia využívá on-the-fly
překlad do nativního kódu, a to s&nbsp;využitím technologie LLVM. Pomocí
několika maker se můžeme podívat, jak přibližně takový překlad může vypadat.
Dnes prozatím jen velmi stručně:</p>

<pre>
julia&gt; <strong>@code_llvm sin(x^2)</strong>
&nbsp;
define double @julia_sin_20564(i64) {
top:
  %1 = sitofp i64 %0 to double, !dbg !8
  %2 = call double inttoptr (i64 140194494233504 to double (double)*)(double %1), !dbg !8
  %3 = fcmp uno double %1, 0.000000e+00, !dbg !8
  %4 = fcmp ord double %2, 0.000000e+00, !dbg !8
  %5 = or i1 %4, %3, !dbg !8
  br i1 %5, label %pass, label %fail, !dbg !8
&nbsp;
fail:                                             ; preds = %top
  %6 = load %jl_value_t** @jl_domain_exception, align 8, !dbg !8, !tbaa %jtbaa_const
  call void @jl_throw_with_superfluous_argument(%jl_value_t* %6, i32 126), !dbg !8
  unreachable, !dbg !8
&nbsp;
pass:                                             ; preds = %top
  ret double %2, !dbg !8
}
</pre>

<p>Průběh překladu do nativního kódu (zde používám stroj s&nbsp;procesorem řady
x86_64):</p>

<pre>
julia&gt; <strong>@code_native sin(x^2)</strong>
        .text
Filename: math.jl
Source line: 0
        push    rbp
        mov     rbp, rsp
Source line: 126
        sub     rsp, 16
        cvtsi2sd        xmm0, rdi
        movsd   qword ptr [rbp - 8], xmm0
        movabs  rax, 140194494233504
        call    rax
        ucomisd xmm0, xmm0
        jp      6
        add     rsp, 16
        pop     rbp
        ret
        movsd   xmm1, qword ptr [rbp - 8]
        ucomisd xmm1, xmm1
        jp      -17
        movabs  rax, 140194893713480
        mov     rax, qword ptr [rax]
        movabs  rcx, 140194891018528
        mov     esi, 126
        mov     rdi, rax
        call    rcx
</pre>

<p>(jedná se jen o ukázku možností prostředí jazyka Julia, nikoli o podrobný
popis, jak přesně se provádí překlad zdrojový
kód&rarr;AST&rarr;LLVM&rarr;nativní kód).</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; dokumentace<br />
<a href="http://docs.julialang.org/en/release-0.4/">http://docs.julialang.org/en/release-0.4/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Introducing Julia/Metaprogramming<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming">https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>Learn X in Y minutes (where X=Julia)<br />
<a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a>
</li>

<li>New Julia language seeks to be the C for scientists<br />
<a href="http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html">http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html</a>
</li>

<li>Julia: A Fast Dynamic Language for Technical Computing<br />
<a href="http://karpinski.org/publications/2012/julia-a-fast-dynamic-language">http://karpinski.org/publications/2012/julia-a-fast-dynamic-language</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="http://llvm.org/">http://llvm.org/</a>
</li>

<li>Julia: benchmarks<br />
<a href="http://julialang.org/benchmarks/">http://julialang.org/benchmarks/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

