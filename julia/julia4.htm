<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Julia: pole, vektory, matice a lineární algebra</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Julia: pole, vektory, matice a lineární algebra</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtvrtém článku o programovacím jazyce Julia se konečně začneme zabývat zajímavým a velmi důležitým tématem přímo souvisejícím s orientací tohoto jazyka na řešení problémů z oblasti numerické matematiky. Jedná se o podporu pro práci s poli, vektory, maticemi a funkcemi dostupnými přes knihovnu LAPACK.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Julia: pole, vektory, matice a lineární algebra</a></p>
<p><a href="#k02">2. Jednorozměrná pole a dvourozměrná pole s&nbsp;jedním řádkem</a></p>
<p><a href="#k03">3. Vícerozměrná pole, sloupcové a řádkové vektory</a></p>
<p><a href="#k04">4. Vytvoření pole konstruktorem <strong>Array</strong></a></p>
<p><a href="#k05">5. Další konstruktory polí</a></p>
<p><a href="#k06">6. Přístup k&nbsp;prvkům polí</a></p>
<p><a href="#k07">7. Funkce <strong>range</strong>, <strong>linspace</strong> a <strong>collect</strong></a></p>
<p><a href="#k08">8. Funkce <strong>reshape</strong></a></p>
<p><a href="#k09">9. Operace <strong>slicedim</strong> pro řezy maticemi, převod matice na vektor, přístup k&nbsp;prvkům na diagonále</a></p>
<p><a href="#k10">10. Lineární algebra: základní operace</a></p>
<p><a href="#k11">11. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Julia: pole, vektory, matice a lineární algebra</h2>

<p>Již v&nbsp;předchozích článcích věnovaných programovacím jazykům <i>APL</i>
a <i>J</i> jsme se zmínili o tom, že jednou poměrně rozsáhlou oblastí
v&nbsp;informatice je zpracování vektorů a matic, protože s&nbsp;těmito
důležitými datovými strukturami se můžeme setkat v&nbsp;různých disciplínách,
například ve finančnictví, pojišťovnictví, statistice, zpracování rozsáhlých
numerických dat, simulacích, zpracování 1D a 2D signálů atd. Současně se jedná
i o velmi zajímavou oblast, neboť právě kvůli co nejrychlejší práci
s&nbsp;velkými maticemi byly vytvořeny speciální výpočetní bloky
v&nbsp;některých superpočítačích (příkladem mohou být superpočítače
<i>Cray</i>). Současné knihovny dokážou v&nbsp;případě potřeby využít jak
některé rozšíření instrukčních sad (SIMD instrukce typu SSE, původně též MMX či
3DNow!), tak i programovatelné grafické akcelerátory (GPU). Práce
s&nbsp;vektory a maticemi byla (a samozřejmě doposud je) podporována především
v&nbsp;překladačích programovacího jazyka FORTRAN.</p>

<p>Překladače FORTRANu začaly být po vzniku superpočítačů vybavovány algoritmy,
které dokázaly převést některé typy programových smyček na &bdquo;vektorové
operace&ldquo;. Paralelně vznikly i specializované jazyky určené téměř výhradně
pro práci s&nbsp;vektory i maticemi &ndash; příkladem je již zmíněná dvojice
<i>APL</i> a <i>J</i>. Dnes se seznámíme s&nbsp;podporou práce s&nbsp;vektory a
maticemi v&nbsp;programovacím jazyce <i>Julia</i>. Kromě toho si řekneme, jak
tento jazyk dokáže využívat optimalizované a odladěné funkce dostupné ve známé
knihovně <strong>LAPACK</strong> (Linear Algebra Package). Díky použití této
knihovny tak může jazyk Julia a jeho uživatelé využít jednu
z&nbsp;nejznámějších sad algoritmů pro zpracování vektorů a především matic
(samotná knihovna <strong>LAPACK</strong> je překládána Fortranem 90, původní
verze pak FORTRANem 77).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Jednorozměrná pole a dvourozměrná pole s&nbsp;jedním řádkem</h2>

<p>Základní homogenní datovou strukturou, kterou programovací jazyk Julia svým
uživatelům nabízí, jsou jednorozměrná pole. Všechny prvky pole mají stejný typ
(ostatně právě proto je to homogenní datová struktura) a ke každému prvku je
možné přistupovat přes jeho index, přičemž indexování prvků má konstantní
složitost (nezáleží tedy na délce pole). Prvky v&nbsp;běžných jednorozměrných
polích je možné měnit, takže pole jsou měnitelné datové struktury
(<i>mutable</i>). Podívejme se nyní na způsob vytvoření jednorozměrných
polí:</p>

<pre>
julia&gt; <strong>a=[1, 2, 3, 4, 5]</strong>
5-element Array{Int64,1}:
 1
 2
 3
 4
 5
</pre>

<p>Při konstrukci pole se automaticky může zjistit datový typ prvků
(resp.&nbsp;typ, který všem prvkům odpovídá po případné konverzi). Povšimněte
si, jak se jazyk rozhoduje, který typ použít:</p>

<pre>
julia&gt; <strong>a=[1, 2.1, 1//3]</strong>
3-element Array{Float64,1}:
 1.0
 2.1
 0.333333
&nbsp;
julia&gt; <strong>a=[1, 2, 1//3]</strong>
3-element Array{Rational{Int64},1}:
 1//1
 2//1
 1//3
&nbsp;
julia&gt; <strong>a=[1/0, -1/0, 0/0]</strong>
3-element Array{Float64,1}:
  Inf
 -Inf
  NaN
&nbsp;
julia&gt; <strong>a=[pi, pi]</strong>
2-element Array{Irrational{:π},1}:
 π = 3.1415926535897...
 π = 3.1415926535897...
</pre>

<p>Typ je možné specifikovat explicitně:</p>

<pre>
julia&gt; <strong>Int8[1, 2, 3, 4, 5]</strong>
5-element Array{Int8,1}:
 1
 2
 3
 4
 5
&nbsp;
julia&gt; <strong>Float16[1, 2, 3, 4, 5]</strong>
5-element Array{Float16,1}:
 1.0
 2.0
 3.0
 4.0
 5.0
</pre>

<p>Pokud vynecháte čárky, vytvoří se ve skutečnosti dvourozměrné pole
s&nbsp;jedním řádkem:</p>

<pre>
julia&gt; <strong>a=[1 2 3 4 5]</strong>
1x5 Array{Int64,2}:
 1  2  3  4  5
&nbsp;
julia&gt; <strong>Float16[1 2 3 4 5]</strong>
1x5 Array{Float16,2}:
 1.0  2.0  3.0  4.0  5.0
&nbsp;
julia&gt; <strong>a=[1 2 3 4]</strong>
1x4 Array{Int64,2}:
 1  2  3  4
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vícerozměrná pole, sloupcové a řádkové vektory</h2>

<p>Jak se však vytváří dvourozměrná pole? První pokus, který může vycházet ze
zkušeností z&nbsp;jiných programovacích jazyků, není příliš úspěšný:</p>

<pre>
julia&gt; <strong>[[1,2,3], [4,5,6]]</strong>
WARNING: [a,b] concatenation is deprecated; use [a;b] instead
 in depwarn at deprecated.jl:73
 in oldstyle_vcat_warning at ./abstractarray.jl:29
 in vect at abstractarray.jl:32
while loading no file, in expression starting on line 0
6-element Array{Int64,1}:
 1
 2
 3
 4
 5
 6
</pre>

<p>Problém představuje čárka vložená mezi oba vektory. Jedno z&nbsp;možných
řešení může vypadat takto &ndash; vytvoříme vlastně pole složené ze dvou
sloupců (povšimněte si chybějící čárky mezi vektory):</p>

<pre>
julia&gt; <strong>[[1,2,3] [4,5,6]]</strong>
3x2 Array{Int64,2}:
 1  4
 2  5
 3  6
</pre>

<p>Pokud preferujete zápis po řádcích, lze použít tento alternativní způsob se
středníkem. Je to sice poněkud neobvyklé, ale středník zde nahrazuje volání
funkce <strong>hvcat()</strong> zmíněné níže:</p>

<pre>
julia&gt; <strong>a=[1 2; 3 4]</strong>
2x2 Array{Int64,2}:
 1  2
 3  4
</pre>

<p>Pole se dvěma řádky a třemi sloupci:</p>

<pre>
julia&gt; <strong>[1 2 3 ; 3 4 5]</strong>
2x3 Array{Int64,2}:
 1  2  3
 3  4  5
</pre>

<p>Kromě zápisu prvků pole do hranatých závorek lze pro konstrukci použít i
funkce <strong>hcat</strong> (&bdquo;horizontal concatenate&ldquo;),
<strong>vcat</strong> (&bdquo;vertical concatenate&ldquo;) a
<strong>hvcat</strong> (kombinace obou možností se specifikací počtu
sloupců):</p>

<pre>
julia&gt; <strong>hcat(1,2,3,4)</strong>
1x4 Array{Int64,2}:
 1  2  3  4
</pre>

<pre>
julia&gt; <strong>vcat(1,2,3,4)</strong>
4-element Array{Int64,1}:
 1
 2
 3
 4
</pre>

<p>U funkce <strong>hvcat()</strong> si povšimněte, že první parametr
specifikuje počet sloupců a až po něm následují jednotlivé prvky:</p>

<pre>
julia&gt; <strong>hvcat(2,1,2,3,4)</strong>
2x2 Array{Int64,2}:
 1  2
 3  4
</pre>

<pre>
julia&gt; <strong>hvcat(1,1,2,3,4)</strong>
4x1 Array{Int64,2}:
 1
 2
 3
 4
</pre>

<pre>
julia&gt; <strong>hvcat(4,1,2,3,4)</strong>
1x4 Array{Int64,2}:
 1  2  3  4
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vytvoření pole konstruktorem <strong>Array</strong></h2>

<p>Pro vytvoření pole s&nbsp;udáním typu prvků (ovšem bez inicializace
jednotlivých prvků) slouží konstruktor nazvaný jednoduše
<strong>Array</strong>. Při volání tohoto konstruktoru se nejprve ve složených
závorkách specifikuje typ prvků a již běžně v&nbsp;kulatých závorkách pak
rozměry pole v&nbsp;jednotlivých dimenzích:</p>

<pre>
help?&gt; <strong>Array</strong>
search: Array SubArray BitArray DenseArray StridedArray mmap_array
&nbsp;
  Array(dims)
&nbsp;
  Array{T}(dims) constructs an uninitialized dense array with element type T.
  dims may be a tuple or a series of integer arguments. The syntax Array(T,
  dims) is also available, but deprecated.
</pre>

<p>Konstrukce pole o rozměrech 2&times;2 prvky typu Int8 (osmibitové celé číslo
se znaménkem):</p>

<pre>
julia&gt; <strong>a=Array{Int8}(2,2)</strong>
2x2 Array{Int8,2}:
 112  -26
  82  -34
</pre>

<p>Povšimněte si toho, že prvky skutečně nejsou inicializovány, ale obsahují
obecně náhodné hodnoty:</p>

<pre>
julia&gt; <strong>a=Array{Int8}(2,2)</strong>
2x2 Array{Int8,2}:
   80  126
 -123  -36
</pre>

<pre>
julia&gt; <strong>a=Array{Int8}(2,2)</strong>
2x2 Array{Int8,2}:
 112  -121
  14   -33
</pre>

<p>Zde se nám čistě náhodou podařilo vytvořit pole s&nbsp;prvky s&nbsp;plovoucí
řádovou čárkou s&nbsp;poloviční přesností, které mají hodnotu 0, ale samozřejmě
se na to nelze spoléhat:</p>

<pre>
julia&gt; <strong>a=Array{Float16}(10,10)</strong>
10x10 Array{Float16,2}:
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
</pre>

<p>Alternativní způsob zápisu s&nbsp;inicializací prvků:</p>

<pre>
julia&gt; <strong>a = Array[[1,2], [3,4]]</strong>
2-element Array{Array{T,N},1}:
 [1,2]
 [3,4]
</pre>

<p>Při konstrukci pole se neprovádí automatické konverze, což souvisí se silným
typovým systémem:</p>

<pre>
julia&gt; <strong>a=Array{Int8}(1//2, 1//4)</strong>
ERROR: MethodError: `convert` has no method matching convert(::Type{Array{Int8,N}}, ::Rational{Int64}, ::Rational{Int64})
This may have arisen from a call to the constructor Array{Int8,N}(...),
since type constructors fall back to convert methods.
Closest candidates are:
  call{T}(::Type{T}, ::Any)
  convert{T,n}(::Type{Array{T,N}}, ::Array{T,n})
  convert{T,n,S}(::Type{Array{T,N}}, ::Array{S,n})
  ...
 in call at essentials.jl:57
&nbsp;
julia&gt; <strong>a=Array{Int8}(1.2, 3.4)</strong>
ERROR: MethodError: `convert` has no method matching convert(::Type{Array{Int8,N}}, ::Float64, ::Float64)
This may have arisen from a call to the constructor Array{Int8,N}(...),
since type constructors fall back to convert methods.
Closest candidates are:
  call{T}(::Type{T}, ::Any)
  convert{T,n}(::Type{Array{T,N}}, ::Array{T,n})
  convert{T,n,S}(::Type{Array{T,N}}, ::Array{S,n})
  ...
 in call at essentials.jl:57
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Další konstruktory polí</h2>

<p>Programovací jazyk Julia nabízí svým uživatelům i několik dalších funkcí
určených pro konstrukci pole a současně i pro inicializaci jeho prvků. Pole o
libovolných rozměrech s&nbsp;nulovými prvky se vytvoří funkcí
<strong>zeros()</strong>:</p>

<pre>
julia&gt; <strong>b=zeros(5)</strong>
5-element Array{Float64,1}:
 0.0
 0.0
 0.0
 0.0
 0.0
</pre>

<pre>
julia&gt; <strong>b=zeros(5,5)</strong>
5x5 Array{Float64,2}:
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
</pre>

<p>Alternativně je možné při konstrukci pole specifikovat i typ prvků:</p>

<pre>
julia&gt; <strong>c=zeros(Int8, 5, 5)</strong>
5x5 Array{Int8,2}:
 0  0  0  0  0
 0  0  0  0  0
 0  0  0  0  0
 0  0  0  0  0
 0  0  0  0  0
</pre>

<p>Podobná funkce, ovšem pro inicializaci všech prvků na jedničku, se jmenuje
pochopitelně <strong>ones()</strong>:</p>

<pre>
julia&gt; <strong>o=ones(10,10)</strong>
10x10 Array{Float64,2}:
 1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0  1.0
</pre>

<p>Alternativně je možné specifikovat i typ prvků:</p>

<pre>
julia&gt; <strong>o=ones(Int8, 3, 3, 3)</strong>
3x3x3 Array{Int8,3}:
[:, :, 1] =
 1  1  1
 1  1  1
 1  1  1
&nbsp;
[:, :, 2] =
 1  1  1
 1  1  1
 1  1  1
&nbsp;
[:, :, 3] =
 1  1  1
 1  1  1
 1  1  1
</pre>

<p>Prvky pole lze vyplnit libovolnou hodnotou funkcí <strong>fill</strong>:</p>

<pre>
julia&gt; <strong>fill(42, 3, 4)</strong>
3x4 Array{Int64,2}:
 42  42  42  42
 42  42  42  42
 42  42  42  42
</pre>

<p>Další užitečná funkce se jmenuje <strong>eye()</strong> a slouží
k&nbsp;vytvoření jednotkové matice o zadaných rozměrech:</p>

<pre>
julia&gt; <strong>eye(5,5)</strong>
5x5 Array{Float64,2}:
 1.0  0.0  0.0  0.0  0.0
 0.0  1.0  0.0  0.0  0.0
 0.0  0.0  1.0  0.0  0.0
 0.0  0.0  0.0  1.0  0.0
 0.0  0.0  0.0  0.0  1.0
</pre>

<p>Alternativně je možné i zde specifikovat typ prvků:</p>

<pre>
julia&gt; <strong>eye(Int16, 5,5)</strong>
5x5 Array{Int16,2}:
 1  0  0  0  0
 0  1  0  0  0
 0  0  1  0  0
 0  0  0  1  0
 0  0  0  0  1
</pre>

<p>Funkce <strong>diagm()</strong> vytvoří matici, kde prvky na diagonále mají hodnoty specifikované objektem typu &bdquo;range&ldquo;:</p>

<pre>
julia&gt; <strong>diagm(1:5)</strong>
5x5 Array{Int64,2}:
 1  0  0  0  0
 0  2  0  0  0
 0  0  3  0  0
 0  0  0  4  0
 0  0  0  0  5
</pre>

<pre>
julia&gt; <strong>diagm(6:10)</strong>
5x5 Array{Int64,2}:
 6  0  0  0   0
 0  7  0  0   0
 0  0  8  0   0
 0  0  0  9   0
 0  0  0  0  10
</pre>

<p>V&nbsp;některých případech může být výhodné vytvořit pole naplněné náhodnými
hodnotami. I zde nabízí jazyk Julia řešení:</p>

<pre>
julia&gt; <strong>rand(4,5)</strong>
4x5 Array{Float64,2}:
 0.2724     0.119104   0.670161   0.835602   0.785017
 0.485103   0.207542   0.0146372  0.379119   0.329223
 0.972542   0.0750364  0.931973   0.744018   0.114805
 0.0806015  0.773603   0.162323   0.0592224  0.0124386
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Přístup k&nbsp;prvkům polí</h2>

<p>V&nbsp;této kapitole si ukážeme, jakým způsobem je možné přistupovat
k&nbsp;prvkům polí. Nejprve si vytvoříme pole o velikosti 10&times;10 prvků,
přičemž všechny prvky budou reprezentovány hodnotami s&nbsp;plovoucí řádovou
čárkou s&nbsp;poloviční přesností (u rozsáhlejších polí může být použití tohoto
možná poněkud neobvyklého datového typu výhodné, neboť se tím ušetří velké
množství operační paměti):</p>

<pre>
julia&gt; <strong>a=Array{Float16}(10,10)</strong>
10x10 Array{Float16,2}:
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
</pre>

<p>Pokusme se změnit hodnotu prvního prvku v&nbsp;poli:</p>

<pre>
julia&gt; <strong>a[0,0]=42</strong>
ERROR: BoundsError: attempt to access 10x10 Array{Float16,2}:
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  at index [0,0]
 in setindex! at array.jl:314
</pre>

<p>Vidíme, že se tato operace nepodařila, a to z&nbsp;toho důvodu, že se prvky
indexují od jedničky a nikoli od nuly. To se sice může zdát poněkud neobvyklé,
ovšem ve skutečnosti mnoho jazyků (dovolím si říci, že většina jazyků
NEodvozených od céčka) zvolilo stejný přístup: Fortran, Mathematica, R, MATLAB,
Lua atd. Správně tedy má příkaz vypadat takto:</p>

<pre>
julia&gt; <strong>a[1,1]=42</strong>
42
</pre>

<p>Prvek pole se skutečně změnil:</p>

<pre>
julia&gt; <strong>a</strong>
10x10 Array{Float16,2}:
 42.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
</pre>

<p>Podívejme se nyní na složitější indexování, tentokrát vektoru:</p>

<pre>
julia&gt; <strong>v=[1 2 3 4 10 -1]</strong>
1x6 Array{Int64,2}:
 1  2  3  4  10  -1
</pre>

<p>Přístup k&nbsp;prvnímu prvku:</p>

<pre>
julia&gt; <strong>v[1]</strong>
1
</pre>

<p>Přístup k&nbsp;prvkům 2 až 4:</p>

<pre>
julia&gt; <strong>v[2:4]</strong>
3-element Array{Int64,1}:
 2
 3
 4
</pre>

<p>Přístup ke všem prvkům:</p>

<pre>
julia&gt; <strong>v[:]</strong>
6-element Array{Int64,1}:
  1
  2
  3
  4
 10
 -1
</pre>

<p>Pokud potřebujeme přistoupit k&nbsp;poslednímu prvku, není možné použít
index -1 (to lze v&nbsp;jiných jazycích), ale používá se zde slovo
<strong>end</strong>.  To opět není nijak unikátní, podobně se toto slovo
používá i v&nbsp;MATLABu:</p>

<pre>
julia&gt; <strong>v[end]</strong>
-1
</pre>

<p>Kombinace předchozích způsobů &ndash; od čtvrtého prvku do konce
vektoru:</p>

<pre>
julia&gt; <strong>v[4:end]</strong>
3-element Array{Int64,1}:
  4
 10
 -1
</pre>

<p>Zajímavý je výběr sekvence libovolných prvků vektoru (pole), a to
s&nbsp;využitím jiného vektoru obsahujícího indexy prvků. Povšimněte si
nutnosti použití dvojitých hranatých závorek &ndash; vnější závorky představují
operaci výběru prvků, vnitřní závorky vektor indexů:</p>

<pre>
julia&gt; <strong>v[[1,5,6,2,5,5]]</strong>
6-element Array{Int64,1}:
  1
 10
 -1
  2
 10
 10
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Funkce <strong>range</strong>, <strong>linspace</strong> a <strong>collect</strong></h2>

<p>Při konstrukci polí je možné využít (i když jen nepřímo) funkci pojmenovanou
<strong>range()</strong>, u níž je zapotřebí si dát pozor na to, že její
parametry se mohou odlišovat od stejnojmenných funkcí známých z&nbsp;jiných
programovacích jazyků (někdy se uvádí pořadí start, stop, step atd.):</p>

<pre>
help?&gt; <strong>range</strong>
search: range Range RangeIndex nzrange linrange histrange UnitRange StepRange
&nbsp;
  range(start, [step], length)
&nbsp;
  Construct a range by length, given a starting value and optional step
  (defaults to 1).
</pre>

<p>Funkce <strong>range()</strong> vytváří hodnotu typu &bdquo;range&ldquo;,
tj.&nbsp;negeneruje přímo jednotlivé prvky:</p>

<pre>
julia&gt; <strong>range(1,10)</strong>
1:10
&nbsp;
julia&gt; <strong>range(1,2,10)</strong>
1:2:19
&nbsp;
julia&gt; <strong>range(10,-1,10)</strong>
10:-1:1
</pre>

<p>Jak je tedy možné z&nbsp;hodnot typu &bdquo;range&ldquo; vytvořit skutečné
pole (či spíše vektor)? Použijeme další funkci pojmenovanou
<strong>collect()</strong>:</p>

<pre>
help?&gt; <strong>collect</strong>
search: collect Collections
&nbsp;
  collect(collection)
&nbsp;
  Return an array of all items in a collection. For associative collections,
  returns Pair{KeyType, ValType}.
&nbsp;
  collect(element_type, collection)
&nbsp;
  Return an array of type Array{element_type,1} of all items in a collection.
</pre>

<p>Nenechme se zmýlit tím, že tato funkce jako svůj parametr vyžaduje kolekci,
protože i objekt typu &bdquo;range&ldquo; je v&nbsp;tomto pojetí kolekce. Pokud
tedy budeme chtít vytvořit vektor hodnot od 1 do 10, použijeme tento (uznávám,
že zbytečně dlouhý) zápis:</p>

<pre>
julia&gt; <strong>collect(range(1,10))</strong>
10-element Array{Int64,1}:
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
</pre>

<p>Alternativně lze explicitně specifikovat typ prvků vytvářeného pole:</p>

<pre>
julia&gt; <strong>collect(Float16, range(1,10))</strong>
10-element Array{Float16,1}:
  1.0
  2.0
  3.0
  4.0
  5.0
  6.0
  7.0
  8.0
  9.0
 10.0
</pre>

<p>Vzhledem k&nbsp;tomu, že objekt typu &bdquo;range&ldquo; má i svůj literál,
můžeme použít zápis:</p>

<pre>
julia&gt; <strong>collect(3.2 : 8.6)</strong>
6-element Array{Float64,1}:
 3.2
 4.2
 5.2
 6.2
 7.2
 8.2
</pre>

<p>Popř.&nbsp;specifikovat jak počáteční hodnotu, tak i krok a celkový počet
prvků (což je asi nejčastější způsob):</p>

<pre>
julia&gt; <strong>collect(3.2 : 0.4 : 5)</strong>
5-element Array{Float64,1}:
 3.2
 3.6
 4.0
 4.4
 4.8
</pre>

<p>V&nbsp;některých případech nemusí být použití výše popsané funkce
<strong>range()</strong> tím nejlepším řešením při vytváření vektoru
obsahujícího sekvenci číselných hodnot. Typickým příkladem je sekvence
generovaná s&nbsp;krokem 0.1, protože hodnotu 0.1 není možné formáty IEEE 754
single ani double přesně reprezentovat. Pokud je nutné vytvořit vektor
s&nbsp;přesným počtem prvků, může se namísto <strong>range</strong> hodit
funkce <strong>linspace()</strong>, které se předá počáteční hodnota, koncová
hodnota a popř.&nbsp;i počet prvků vektoru. Použití funkce
<strong>linspace()</strong> je tak ve skutečnosti velmi jednoduché:</p>

<pre>
julia&gt; <strong>collect(linspace(1.0,100.0,12))</strong>
12-element Array{Float64,1}:
   1.0
  10.0
  19.0
  28.0
  37.0
  46.0
  55.0
  64.0
  73.0
  82.0
  91.0
 100.0
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Funkce <strong>reshape</strong></h2>

<p>Další velmi důležitou funkcí, s&nbsp;níž se v&nbsp;praxi často setkáme, je
funkce nazvaná <strong>reshape()</strong>, která dokáže změnit velikost matice
a vhodným způsobem přeorganizovat prvky v&nbsp;původní matici. Této funkci se
předávají dva parametry &ndash; prvním parametrem je vstupní pole (vektor,
matice, ...), druhým parametrem (popř.&nbsp;více parametry) pak specifikace
tvaru výsledného pole. Podívejme se nejdříve na oficiální popis této
funkce:</p>

<pre>
help?&gt; <strong>reshape</strong>
search: reshape promote_shape
&nbsp;
  reshape(A, dims)
&nbsp;
  Create an array with the same data as the given array, but with different
  dimensions. An implementation for a particular type of array may choose
  whether the data is copied or shared.
</pre>

<p>Vytvořme si testovací vektor s&nbsp;dvanácti prvky (což je číslo dělitelné
2, 3, 4 i 6):</p>

<pre>
julia&gt; <strong>a=[1 2 3 4 5 6 7 8 9 10 11 12]</strong>
1x12 Array{Int64,2}:
 1  2  3  4  5  6  7  8  9  10  11  12
</pre>

<p>Z&nbsp;tohoto vektoru pak snadno získáme matice o rozměrech 4&times;3,
3&times;4, 2&times;6, 6&times;2 či 1&times;12:</p>

<pre>
julia&gt; <strong>reshape(a, 4, 3)</strong>
4x3 Array{Int64,2}:
 1  5   9
 2  6  10
 3  7  11
 4  8  12
</pre>

<pre>
julia&gt; <strong>reshape(a, 3, 4)</strong>
3x4 Array{Int64,2}:
 1  4  7  10
 2  5  8  11
 3  6  9  12
</pre>

<pre>
julia&gt; <strong>reshape(a, 2, 6)</strong>
2x6 Array{Int64,2}:
 1  3  5  7   9  11
 2  4  6  8  10  12
</pre>

<pre>
julia&gt; <strong>reshape(a, 6, 2)</strong>
6x2 Array{Int64,2}:
 1   7
 2   8
 3   9
 4  10
 5  11
 6  12
</pre>

<p>Pozor ovšem na to, že počet prvků výsledné matice musí přesně odpovídat
počtu prvků vstupní matice/vektoru. V&nbsp;tomto je Julia nekompromisní:</p>

<pre>
julia&gt; <strong>reshape(a, 5, 2)</strong>
ERROR: DimensionMismatch("new dimensions (5,2) must be consistent with array size 12")
 in reshape at array.jl:135
 in reshape at abstractarray.jl:215
</pre>

<p>Vytvoření trojrozměrných polí je stejně snadné (a opět je nutné zachovat
počet prvků):</p>

<pre>
julia&gt; <strong>reshape(a, 2, 3, 2)</strong>
2x3x2 Array{Int64,3}:
[:, :, 1] =
 1  3  5
 2  4  6
&nbsp;
[:, :, 2] =
 7   9  11
 8  10  12
</pre>

<pre>
julia&gt; <strong>reshape(a, 2, 2, 3)</strong>
2x2x3 Array{Int64,3}:
[:, :, 1] =
 1  3
 2  4
&nbsp;
[:, :, 2] =
 5  7
 6  8
&nbsp;
[:, :, 3] =
  9  11
 10  12
</pre>

<pre>
julia&gt; <strong>reshape(a, 3, 2, 2)</strong>
3x2x2 Array{Int64,3}:
[:, :, 1] =
 1  4
 2  5
 3  6
&nbsp;
[:, :, 2] =
 7  10
 8  11
 9  12
</pre>

<p>Mimochodem &ndash; velikost matice lze získat funkcí <strong>size()</strong> vracející n-tici:</p>

<pre>
julia&gt; <strong>size(reshape(a, 6,2))</strong>
(6,2)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Operace <strong>slicedim</strong> pro řezy maticemi, převod matice na vektor, přístup k&nbsp;prvkům na diagonále</h2>

<p>Kromě funkce <strong>reshape()</strong> nabízí základní knihovna
programovacího jazyka Julia i trojici dalších funkcí, které lze použít pro
výběr prvků z&nbsp;matic předem definovaným způsobem. Jedná se o funkce
pojmenované <strong>slicedim()</strong>, <strong>vec()</strong> a
<strong>diag()</strong>. Podívejme se na jejich oficiální popis:</p>

<pre>
help?&gt; <strong>slicedim</strong>
search: slicedim
&nbsp;
  slicedim(A, d, i)
&nbsp;
  Return all the data of A where the index for dimension d equals i.
  Equivalent to A[:,:,...,i,:,:,...] where i is in position d.
</pre>

<pre>
help?&gt; <strong>vec</strong>
search: vec vecdot vecnorm Vector VecOrMat @vectorize_2arg @vectorize_1arg
&nbsp;
  vec(Array) -&gt; Vector
&nbsp;
  Vectorize an array using column-major convention.
</pre>

<pre>
help?&gt; <strong>diag</strong>
search: diag diagm diagind Diagonal isdiag spdiagm Bidiagonal blkdiag
&nbsp;
  diag(M[, k])
&nbsp;
  The kth diagonal of a matrix, as a vector. Use diagm to construct a diagonal
  matrix.
</pre>

<p>Před ukázkou možností těchto funkcí si vytvořme testovací matici o velikosti
3&times;4 prvky. Můžeme použít nám již známý objekt typu &bdquo;range&ldquo; a
funkce <strong>collect()</strong> společně
s&nbsp;<strong>reshape()</strong>:</p>

<pre>
julia&gt; <strong>a=reshape(collect(1:12), 3, 4)</strong>
3x4 Array{Int64,2}:
 1  4  7  10
 2  5  8  11
 3  6  9  12
</pre>

<p>Získání jednotlivých řádků pole je snadné (první dimenze + index řádku):</p>

<pre>
julia&gt; <strong>slicedim(a, 1, 1)</strong>
1x4 Array{Int64,2}:
 1  4  7  10
&nbsp;
julia&gt; <strong>slicedim(a, 1, 2)</strong>
1x4 Array{Int64,2}:
 2  5  8  11
&nbsp;
julia&gt; <strong>slicedim(a, 1, 3)</strong>
1x4 Array{Int64,2}:
 3  6  9  12
</pre>

<p>Podobně lze získat jednotlivé sloupce (druhá dimenze + index sloupce):</p>

<pre>
julia&gt; <strong>slicedim(a, 2, 1)</strong>
3x1 Array{Int64,2}:
 1
 2
 3
&nbsp;
julia&gt; <strong>slicedim(a, 2, 2)</strong>
3x1 Array{Int64,2}:
 4
 5
 6
&nbsp;
julia&gt; <strong>slicedim(a, 2, 4)</strong>
3x1 Array{Int64,2}:
 10
 11
 12
</pre>

<p>Vidíme, že funkce <strong>slicedim()</strong> je až překvapivě
flexibilní.</p>

<p>Funkce <strong>vec()</strong> je naproti tomu velmi jednoduchá až
triviální:</p>

<pre>
julia&gt; <strong>vec(a)</strong>
12-element Array{Int64,1}:
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
</pre>

<p>Podobně funkce <strong>diag()</strong>, kterou lze přečíst prvky na
diagonále (tato funkce si dobře poradí i s&nbsp;maticí, která není
čtvercová):</p>

<pre>
julia&gt; <strong>diag(a)</strong>
3-element Array{Int64,1}:
 1
 5
 9
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Lineární algebra: základní operace</h2>

<p>V&nbsp;následující části tohoto článku si popíšeme některé funkce, které
jsou nabízeny v&nbsp;knihovně LAPACK, ovšem již dnes se můžeme seznámit se
základními operátory, které lze použít při práci s&nbsp;vektory a maticemi.
Vytvořme si nejprve dva pomocné vektory:</p>

<pre>
julia&gt; <strong>v1=[1,2,3]</strong>
3-element Array{Int64,1}:
 1
 2
 3
&nbsp;
julia&gt; <strong>v2=[2,2,2]</strong>
3-element Array{Int64,1}:
 2
 2
 2
</pre>

<p>Součet a rozdíl vektorů se provádí prvek po prvku:</p>

<pre>
julia&gt; <strong>v1+v1</strong>
3-element Array{Int64,1}:
 2
 4
 6
&nbsp;
julia&gt; <strong>v1+v2</strong>
3-element Array{Int64,1}:
 3
 4
 5
&nbsp;
julia&gt; <strong>v1-v2</strong>
3-element Array{Int64,1}:
 -1
  0
  1
</pre>

<p>Vynásobení vektoru skalárem:</p>

<pre>
julia&gt; <strong>v1*2</strong>
3-element Array{Int64,1}:
 2
 4
 6
</pre>

<p>Součin stylem prvek po prvku (první prvek s&nbsp;prvním prvkem atd.):</p>

<pre>
julia&gt; <strong>v1 .* v2</strong>
3-element Array{Int64,1}:
 2
 4
 6
</pre>

<p>Podíl stylem prvek po prvku (první prvek s&nbsp;prvním prvkem atd.):</p>

<pre>
julia&gt; <strong>v1 ./ v2</strong>
3-element Array{Float64,1}:
 0.5
 1.0
 1.5
</pre>

<p>Tečku lze spojit i s&nbsp;dalšími operátory &ndash; vždy to značí aplikaci
operátoru na dvojici příslušných prvků vektoru či matice:</p>

<pre>
julia&gt; <strong>v1 .^ v2</strong>
3-element Array{Int64,1}:
 1
 4
 9
</pre>

<p>Skalární součin vektorů:</p>

<pre>
julia&gt; <strong>dot(v1,v2)</strong>
12
</pre>

<p>Vektorový součin vektorů:</p>

<pre>
julia&gt; <strong>cross(v1, v2)</strong>
3-element Array{Int64,1}:
 -2
  4
 -2
</pre>

<p>Vektorový součin si lze nejlépe ukázat na jednotkových vektorech, které jsou
na sebe kolmé (výsledkem je třetí vektor kolmý na oba vstupní vektory):</p>

<pre>
julia&gt; <strong>cross([1,0,0], [0,1,0])</strong>
3-element Array{Int64,1}:
 0
 0
 1
</pre>

<p>Lineární operace odpovídající násobení skalárem:</p>

<pre>
julia&gt; <strong>scale(v1, 10)</strong>
3-element Array{Int64,1}:
 10
 20
 30
&nbsp;
julia&gt; <strong>scale(v1, 1//10)</strong>
3-element Array{Rational{Int64},1}:
 1//10
 1//5 
 3//10
</pre>

<p>Součet hodnot prvků vektorů:</p>

<pre>
julia&gt; <strong>sum(v1)</strong>
6
&nbsp;
julia&gt; <strong>sum(v2)</strong>
6
</pre>

<p>Kombinaci tečka-operátor lze použít i pro relační operátory. Výsledkem je
vektor či matice hodnot true/false:</p>

<pre>
julia&gt; <strong>v1.&lt;=v2</strong>
3-element BitArray{1}:
  true
  true
 false
</pre>

<pre>
julia&gt; <strong>v1 .!= 2</strong>
3-element BitArray{1}:
  true
 false
  true
</pre>

<p>Aplikace funkce na prvky vektoru či matice nevyžaduje žádné speciální metody
zápisu, minimálně pro funkce ze základní knihovny:</p>

<pre>
julia&gt; <strong>sin(v1)</strong>
3-element Array{Float64,1}:
 0.841471
 0.909297
 0.14112 
</pre>

<p>Mnohem větší množství funkcí najdeme v&nbsp;rozhraní knihovny LAPACK pro
matice. Tyto funkce (a mnohé další) si představíme příště.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odkazy na Internetu</h2>

<ol>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>Introducing Julia/Functions<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Functions">https://en.wikibooks.org/wiki/Introducing_Julia/Functions</a>
</li>

<li>Functions (Julia documentation)<br />
<a href="http://docs.julialang.org/en/release-0.4/manual/functions/">http://docs.julialang.org/en/release-0.4/manual/functions/</a>
</li>

<li>Evaluate binomial coefficients<br />
<a href="http://rosettacode.org/wiki/Evaluate_binomial_coefficients">http://rosettacode.org/wiki/Evaluate_binomial_coefficients</a>
</li>

<li>Ackermann function<br />
<a href="http://rosettacode.org/wiki/Ackermann_function">http://rosettacode.org/wiki/Ackermann_function</a>
</li>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; dokumentace<br />
<a href="http://docs.julialang.org/en/release-0.4/">http://docs.julialang.org/en/release-0.4/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Introducing Julia/Metaprogramming<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming">https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>Learn X in Y minutes (where X=Julia)<br />
<a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a>
</li>

<li>New Julia language seeks to be the C for scientists<br />
<a href="http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html">http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html</a>
</li>

<li>Julia: A Fast Dynamic Language for Technical Computing<br />
<a href="http://karpinski.org/publications/2012/julia-a-fast-dynamic-language">http://karpinski.org/publications/2012/julia-a-fast-dynamic-language</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="http://llvm.org/">http://llvm.org/</a>
</li>

<li>Julia: benchmarks<br />
<a href="http://julialang.org/benchmarks/">http://julialang.org/benchmarks/</a>
</li>

<li>Type system<br />
<a href="https://en.wikipedia.org/wiki/Type_system">https://en.wikipedia.org/wiki/Type_system</a>
</li>

<li>Half-precision floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Half-precision_floating-point_format">https://en.wikipedia.org/wiki/Half-precision_floating-point_format</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

