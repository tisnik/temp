<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Architektura VLIW a rodina DSP čipů TI TMS320C6x (adresování a instrukční soubor)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Architektura VLIW a rodina DSP čipů TI TMS320C6x (pokračování)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o architektuře VLIW a o rodině procesorů TMS320C6x společnosti Texas Instruments se budeme věnovat především popisu instrukční sady těchto čipů a samozřejmě též způsobům zajištění paralelního spouštění instrukcí (proto ostatně VLIW vznikl).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Architektura VLIW a rodina DSP čipů TI TMS320C6x (pokračování)</a></p>
<p><a href="#k02">2. Stavové a řídicí registry</a></p>
<p><a href="#k03">3. Registry, které mohou být použity pro adresování</a></p>
<p><a href="#k04">4. Řídicí registr AMR (Addressing Mode Register)</a></p>
<p><a href="#k05">5. VLIW a explicitní paralelizace instrukcí</a></p>
<p><a href="#k06">6. Ukázka sériově, paralelně a sério-paralelně prováděných instrukcí</a></p>
<p><a href="#k07">7. Zápis paralelně prováděných instrukcí v&nbsp;assembleru</a></p>
<p><a href="#k08">8. Podmíněné provádění instrukcí a kódy podmínek</a></p>
<p><a href="#k09">9. Zápis kódu podmínky v&nbsp;assembleru</a></p>
<p><a href="#k10">10. Rozdělení instrukcí podle výkonných jednotek</a></p>
<p><a href="#k11">11. Instrukce pro jednotky <strong>L1</strong> a <strong>L2</strong></a></p>
<p><a href="#k12">12. Instrukce pro jednotky <strong>S1</strong> a <strong>S2</strong></a></p>
<p><a href="#k13">13. Instrukce pro jednotky <strong>M1</strong> a <strong>M2</strong></a></p>
<p><a href="#k14">14. Instrukce pro jednotky <strong>D1</strong> a <strong>D2</strong></a></p>
<p><a href="#k15">15. Malá ukázka na závěr &ndash; FIR Filtr</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Architektura VLIW a rodina DSP čipů TI TMS320C6x (pokračování)</h2>

<p>V&nbsp;dnešní části <a
href="https://www.root.cz/serialy/co-se-deje-v-pocitaci/">seriálu o
architekturách počítačů a procesorů</a> navážeme na <a
href="https://www.root.cz/clanky/architektura-vliw-a-rodina-dsp-cipu-ti-tms320c6x/">předchozí
díl</a>, v&nbsp;němž jsme si řekli základní informace o architektuře <i>VLIW
(Very Long Instruction Word)</i> i o vnitřním uspořádání čipů TMS320C6x. Dnes
se zaměříme na popis instrukční sady těchto DSP, především na způsob určení,
které instrukce mohou být spuštěny paralelně (každá instrukce ovšem může být
spuštěna v&nbsp;jiném výkonném bloku &ndash; jednotce). Taktéž si popíšeme
některé důležité řídicí a stavové registry, především pak registr nazvaný
<strong>AMR</strong> neboli <i>Addressing Mode Register</i>, protože jeho
konkrétní nastavení má velký vliv na způsob adresování dat (připomeňme si, že
DSP typicky zpracovávají vektory hodnot, někdy se též používá nelineární způsob
adresování).</p>

<img src="http://i.iinfo.cz/images/21/pc157-6.png" width="376" height="462" alt=" " />
<p><i>Obrázek 1: Interní struktura digitálních signálových procesorů TMS řady
320C64x.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Stavové a řídicí registry</h2>

<p>DSP obsahují několik stavových a řídicích registrů, které jsou vypsány
v&nbsp;následující tabulce. Pro přesuny dat mezi těmito registry a registry
pracovními se používá instrukce nazvaná <strong>MVC</strong>. Většina těchto
registrů je určena pro práci s&nbsp;přerušovacím subsystémem:</p>

<table>
<tr><th>Jméno</th><th>Význam zkratky</th><th>Stručný popis</th></tr>
<tr><td>AMR </td><td>Addressing mode register</td><td>určuje způsob adresování, viz text níže</td></tr>
<tr><td>CSR </td><td>Control status register</td><td>obsahuje různá bitová pole: ID procesoru, režim saturace, režim řízení spotřeby apod.</td></tr>
<tr><td>ICR </td><td>Interrupt clear register</td><td>zápisem umožňuje vymazat příznak o maskovatelných přerušeních z&nbsp;IFR</td></tr>
<tr><td>IER </td><td>Interrupt enable register</td><td>povolení/zákaz jak maskovatelných, tak i nemaskovatelných přerušení</td></tr>
<tr><td>IFR </td><td>Interrupt flag register</td><td>pouze pro čtení, obsahuje příznaky přerušení, pokud nastanou (lze vymazat přes ICR)</td></tr>
<tr><td>IRP </td><td>Interrupt return pointer register</td><td>adresa pro návrat z&nbsp;maskovatelného přerušení instrukcí <strong>B IRP</strong></td></tr>
<tr><td>ISR </td><td>Interrupt set register</td><td>opačný význam než ICR, nastavení příznaku přerušení</td></tr>
<tr><td>ISTP</td><td>Interrupt service table pointer register</td><td>adresa tabulky s&nbsp;vektory přerušení</td></tr>
<tr><td>NRP </td><td>Nonmaskable interrupt return pointer register</td><td>dtto jako IRP, ale pro nemaskovatelná přerušení</td></tr>
<tr><td>PCE1</td><td>Program counter</td><td>32bitový programový čítač</td></tr>
</table>
 


<p><a name="k03"></a></p>
<h2 id="k03">3. Registry, které mohou být použity pro adresování</h2>

<p>Pro adresování lze použít libovolný pracovní registr (každý má šířku 32
bitů), ovšem pro kruhové adresování je možné využít pouze registry A4..A7 a
B4..B7 (viz též následující kapitolu). Navíc je většina instrukcí, v&nbsp;nichž
se adresují operandy uložené v&nbsp;operační paměti, určena pouze pro výkonné
jednotky <strong>D1</strong> a <strong>D2</strong>, které mohou pracovat
paralelně. Operandy lze načítat a ukládat do paměti instrukcemi
<strong>LDx</strong> a <strong>STx</strong> (podobně jako na RISCových
procesorech), ovšem existují také instrukce <strong>ADDAx</strong> a
<strong>SUBAx</strong>, které jeden operand načtou z&nbsp;paměti, což je pro
mnohé DSP algoritmy ideální. Pokud se pro adresování používá pracovní registr,
je možné zvolit, jak a kdy se má modifikovat jeho hodnota: pre-inkrement,
pre-dekrement, post-inkrement a post-dekrement, což přibližně odpovídá céčkovým
výrazům ++i, --i, i++, i--.</p>

<p>Speciálním a v&nbsp;oblasti zpracování signálů velmi užitečným adresováním
je takzvané kruhové adresování (<i>circular addressing</i>). Jedná se o obdobu
klasického lineárního adresování, kdy se adresa uložená v&nbsp;pracovním
registru postupně zvyšuje, ale po dosažení velikosti bloku se začíná adresovat
od začátku. Tímto způsobem lze realizovat plovoucí okno používané
v&nbsp;klasických algoritmech pro výpočet konvoluce a korelace.</p>

<p>Velikost bloku se zadává pětibitovou hodnotou, která představuje mocninu
dvou:</p>

<pre>
00000 - velikost = 2
00001 - velikost = 4
00010 - velikost = 8
...
...
...
11111 - velikost = 2<sup>32</sup>
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Řídicí registr AMR (Addressing Mode Register)</h2>

<p>Registr <strong>AMR</strong>, kterým se řídí adresování, má, podobně jako
ostatní řídicí a stavové registry, šířku 32 bitů, přičemž těchto 32 bitů je
rozděleno do několika bitových polí:</p>

<table>
<tr><th>Bity</th><th>Význam</th></tr>
<tr><td>31..26</td><td>rezervováno pro budoucí rozšíření</td></tr>
<tr><td>25..21</td><td>velikost bloku pro kruhové adresování (blok1)</td></tr>
<tr><td>20..16</td><td>velikost bloku pro kruhové adresování (blok2)</td></tr>
<tr><td>15..14</td><td>adresovací režim při použití registru B7</td></tr>
<tr><td>13..12</td><td>adresovací režim při použití registru B6</td></tr>
<tr><td>11..10</td><td>adresovací režim při použití registru B5</td></tr>
<tr><td>9..8</td><td>adresovací režim při použití registru B4</td></tr>
<tr><td>7..6</td><td>adresovací režim při použití registru A7</td></tr>
<tr><td>5..4</td><td>adresovací režim při použití registru A6</td></tr>
<tr><td>3..2</td><td>adresovací režim při použití registru A5</td></tr>
<tr><td>1..0</td><td>adresovací režim při použití registru A4</td></tr>
</table>

<p>Adresovací režim je určen dvojicí bitů, které volí mezi lineárním
adresováním, kruhovým adresováním používajícím blok1 (tedy velikost filtru) a
kruhovým adresováním používajícím blok2. Čtvrtá možnost je rezervována pro
budoucí rozšíření.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. VLIW a explicitní paralelizace instrukcí</h2>

<p>Architektura VLIW (<i>Very Long Instruction Word</i>), která je
mj.&nbsp;používána i v&nbsp;digitálních signálových procesorech řady TMS320C6x,
vyžaduje, aby se při tvorbě strojového kódu explicitně určilo, které instrukce
uložené v&nbsp;&bdquo;dlouhém&ldquo; slovu mohou být spuštěny paralelně a které
nikoli. Může totiž dojít k&nbsp;situaci, kdy nějaká instrukce používá výsledek
instrukce spuštěné dříve a bylo by zajisté škoda, kdyby například polovina
bitových polí ve slovu obsahovala pouze NOPy (NOP=No Operation, jde o výplň
jednoho bitového pole či většího množství bitových polí). Připomeňme si, že
všechna instrukční slova mají šířku 256 bitů (ano, skutečně VLIW) a jsou
načítány z&nbsp;adresy dělitelné 32. Celý 256bitový vektor instrukčního slova
je rozdělen na osm částí, z&nbsp;nichž každá má šířku 32 bitů. Každá
z&nbsp;těchto částí může tvořit instrukci pro vybranou výkonnou jednotku (L1,
S1, M1, D1, L2, S2, M2, D2), přičemž samozřejmě je možné každé jednotce předat
jedinou instrukci.</p>

<p>Celé &bdquo;dlouhé&ldquo; slovo vypadá takto:</p>

<pre>
31        0 31       0 31       0 31       0 31       0 31       0 31       0 31        0
+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+
| INS #1 |p| INS #2 |p| INS #3 |p| INS #4 |p| INS #5 |p| INS #6 |p| INS #7 |p| INS #8 |p|
+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+
255       223        191        159        127         95         63         31         0
</pre>

<p>V&nbsp;horní části jsou zapsány indexy bitů v&nbsp;rámci jedné instrukce
(tedy jednoho bitového pole), v&nbsp;části spodní pak indexy bitu v&nbsp;rámci
celého &bdquo;dlouhého&ldquo; slova. Pro explicitní paralelizaci je důležitý
bit <i>p</i>, který je umístěn v&nbsp;každé instrukci. Pokud je tento bit
v&nbsp;instrukci s&nbsp;indexem <i>i</i> nastavený na jedničku, znamená to, že
instrukce <i>i</i> a <i>i+1</i> se spustí paralelně (tyto bity jsou
zpracovávány zleva doprava). Vzhledem k&nbsp;tomu, že paralelní zpracování je
omezeno pouze na jedno &bdquo;dlouhé&ldquo; slovo, je bit s&nbsp;indexem 0 vždy
nastavený na nulu (žádná další instrukce po něm stejně nenásleduje).</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Ukázka sériově, paralelně a sério-paralelně prováděných instrukcí</h2>

<p>Ukažme si nyní některé možné kombinace všech osmi bitů <i>p</i>. Nejprve
bude ukázáno &bdquo;dlouhé&ldquo; slovo s&nbsp;instrukcemi, které budou
spuštěny sekvenčně, což je samozřejmě ta horší varianta (ke které v&nbsp;praxi
nebude docházet příliš často):</p>

<pre>
31        0 31       0 31       0 31       0 31       0 31       0 31       0 31        0
+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+
| INS #1 |0| INS #2 |0| INS #3 |0| INS #4 |0| INS #5 |0| INS #6 |0| INS #7 |0| INS #8 |0|
+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+
255       223        191        159        127         95         63         31         0
</pre>

<p>Spouštění instrukcí vypadá následovně:</p>

<table>
<tr><th>Cyklus</th><th>Instrukce</th></tr>
<tr><td>1</td><td>INS #1</td></tr>
<tr><td>2</td><td>INS #2</td></tr>
<tr><td>3</td><td>INS #3</td></tr>
<tr><td>4</td><td>INS #4</td></tr>
<tr><td>5</td><td>INS #5</td></tr>
<tr><td>6</td><td>INS #6</td></tr>
<tr><td>7</td><td>INS #7</td></tr>
<tr><td>8</td><td>INS #8</td></tr>
</table>

<p>Na druhé straně výkonnostního spektra je &bdquo;dlouhé&ldquo; slovo, jehož
instrukce se spustí současně. Tato situace je ideální a jak programátoři
používající assembler, tak i překladače (typicky překladač C) se snaží o
organizaci kódu takovým způsobem, aby se využily všechny výkonné jednotky.
Povšimněte si, že poslední bit <i>p</i> musí být stále nastaven na nulu:</p>

<pre>
31        0 31       0 31       0 31       0 31       0 31       0 31       0 31        0
+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+
| INS #1 |1| INS #2 |1| INS #3 |1| INS #4 |1| INS #5 |1| INS #6 |1| INS #7 |1| INS #8 |0|
+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+
255       223        191        159        127         95         63         31         0
</pre>

<p>Spouštění instrukcí:</p>

<table>
<tr><th>Cyklus</th><th>Instrukce</th></tr>
<tr><td>1</td><td>INS #1 + INS #2 + INS #3 + INS #4 + INS #5 + INS #6 + INS #7 + INS #8</td></tr>
</table>

<p>Možné jsou i všechny ostatní kombinace, jichž je 126. Například:</p>

<pre>
31        0 31       0 31       0 31       0 31       0 31       0 31       0 31        0
+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+
| INS #1 |0| INS #2 |0| INS #3 |1| INS #4 |1| INS #5 |0| INS #6 |1| INS #7 |1| INS #8 |0|
+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+--------+-+
255       223        191        159        127         95         63         31         0
</pre>

<p>Spouštění jednotlivých instrukcí nyní vypadá takto:</p>

<table>
<tr><th>Cyklus</th><th>Instrukce</th></tr>
<tr><td>1</td><td>INS #1</td></tr>
<tr><td>2</td><td>INS #2</td></tr>
<tr><td>3</td><td>INS #3 + INS #4 + INS #5</td></tr>
<tr><td>4</td><td>INS #6 + INS #7 + INS #8</td></tr>
</table>

<p>To je poměrně dobrá úroveň paralelizace. Musíme si totiž uvědomit, že i když
nejsou všechny instrukce spuštěny současně, stále jsme ušetřili minimálně dvě
fáze <i>fetch</i> a <i>decode</i>, které by se provedly na běžném RISCovém
procesoru (tyto fáze se samozřejmě provedou i na VLIW, ale pro celou osmici
instrukcí, nikoli postupně).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zápis paralelně prováděných instrukcí v&nbsp;assembleru</h2>

<p>Zápis instrukcí v&nbsp;assembleru digitálních signálových procesorů řady
TMS320C6x je v&nbsp;některých ohledech odlišný od běžného sekvenčního zápisu,
na nějž jsme zvyklí z&nbsp;RISCových či CISCových procesorů. Největším rozdílem
je samozřejmě nutnost spojovat vždy osm instrukcí do jednoho VLIW a taktéž
nutnost specifikace, které instrukce se skutečně mohou spustit paralelně.
V&nbsp;assembleru TMS320C6x se pro tento účel zavedla dvojice znaků ||
zapisovaných před mnemotechnické jméno instrukce. Slovo, v&nbsp;němž se všechny
instrukce provedou paralelně, se zapíše takto:</p>

<pre>
        INS #1
     || INS #2
     || INS #3
     || INS #4
     || INS #5
     || INS #6
     || INS #7
     || INS #8
</pre>

<p>Sério-paralelně prováděné instrukce z&nbsp;předchozí kapitoly budou zapsány
způsobem:</p>

<pre>
        INS #1
        INS #2
        INS #3
     || INS #4
     || INS #5
        INS #6
     || INS #7
     || INS #8
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Podmíněné provádění instrukcí a kódy podmínek</h2>

<p>Prakticky všechny instrukce obsahují ve svém bitovém poli čtveřici bitů,
které určují, za jakých podmínek se instrukce vykoná. Do značné míry se to
podobá podmínkovým bitům známým z&nbsp;mikroprocesorů ARM, ovšem s&nbsp;tím
rozdílem, že podmínky v&nbsp;DSP jsou značně zjednodušeny na porovnání
vybraného pracovního registru s&nbsp;nulou či jedničkou. Výběr pracovního
registru je proveden na základě bitů <i>Creg</i>, typ porovnání (nulovost,
nenulovost) pak bitem <i>z</i>. Jak bity <i>Creg</i>, tak i bit <i>z</i> je
součástí instrukce (v&nbsp;každém VLIW je tedy těchto podmínek celkem osm):</p>

<table>
<tr><th>Podmínka</th><th>Creg</th><th>z</th></tr>
<tr><td>provedeno vždy</td><td>000</td><td>0</td></tr>
<tr><td>rezervováno   </td><td>000</td><td>1</td></tr>
<tr><td>B0&ne;0       </td><td>001</td><td>0</td></tr>
<tr><td>B0=0          </td><td>001</td><td>1</td></tr>
<tr><td>B1&ne;0       </td><td>010</td><td>0</td></tr>
<tr><td>B1=0          </td><td>010</td><td>1</td></tr>
<tr><td>B2&ne;0       </td><td>011</td><td>0</td></tr>
<tr><td>B2=0          </td><td>011</td><td>1</td></tr>
<tr><td>A1&ne;0       </td><td>100</td><td>0</td></tr>
<tr><td>A1=0          </td><td>100</td><td>1</td></tr>
<tr><td>A2&ne;0       </td><td>101</td><td>0</td></tr>
<tr><td>A2=0          </td><td>101</td><td>1</td></tr>
</table>

<p>Poznámka: další pracovní registry nelze takto jednoduše použít.</p>



<p><a name="k09"></a></p>
<h2 id="k9">9. Zápis kódu podmínky v&nbsp;assembleru</h2>

<p>V&nbsp;assembleru se podmínka zapisuje do složených závorek uvedených před
vlastní instrukci, například:</p>

<pre>
     [B1] ADD operandy
</pre>

<p>Popř.&nbsp;opačná podmínka:</p>

<pre>
     [!B1] ADD operandy
</pre>

<p>Samozřejmě je možné (a nutné) kombinovat podmínku se znaky pro paralelní
zpracování instrukcí:</p>

<pre>
     ...
     ...
     || [B1]  ADD .S2 -1, B0, B0
     || [!B1] B .S1 LOOP
</pre>

<p>Poznámka: modifikátory .S2 a .S1 specifikují, které výkonné jednotky mají
danou instrukci spustit.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Rozdělení instrukcí podle výkonných jednotek</h2>

<p>Minule jsme si řekli, že celý procesor je rozdělený na dvě části pojmenované
datapath <strong>A</strong> a datapath <strong>B</strong>. Každá z&nbsp;těchto
částí obsahuje sadu pracovních registrů (konkrétně je v&nbsp;každé sadě
umístěno šestnáct 32bitových registrů, celkem tedy již zmíněných 32 registrů) a
čtyři výkonné jednotky (<strong>.L1</strong>, <strong>.S1</strong>,
<strong>.M1</strong>, <strong>.D1</strong> pro část <strong>A</strong> a
<strong>.L2</strong>, <strong>.S2</strong>, <strong>.M2</strong>,
<strong>.D2</strong> pro část <strong>B</strong>):</p>

<pre>
+-----------------+-----------------+
|   Registry Ax   |   Registry Bx   |
+-----------------+-----------------+
   ⇅   ⇅   ⇅   ⇅     ⇅   ⇅   ⇅   ⇅
 +---+---+---+---+ +---+---+---+---+
 |.L1|.S1|.M1|.D1| |.D2|.M2|.S2|.L2|
 +---+---+---+---+ +---+---+---+---+
</pre>

<p>Vzhledem k&nbsp;odlišným vlastnostem výkonných jednotek jsou i instrukce
rozděleny do čtyř skupin, což je téma, kterému se budeme věnovat
v&nbsp;navazujících čtyřech kapitolách.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Instrukce pro jednotky <strong>L1</strong> a <strong>L2</strong></h2>

<p>Výkonné jednotky <strong>L1</strong> a <strong>L2</strong> jsou určeny
především pro provádění základních operací v&nbsp;aritmeticko-logické jednotce,
přičemž operandy mohou mít šířku 32 bitů či v&nbsp;některých případech i 40
bitů (což umožňuje například akumulaci výsledků při filtraci signálů apod.).
Tyto jednotky mohou zpracovávat následující instrukce:</p>

<table>
<tr><th>Zkratka</th><th>Instrukce</th></tr>
<tr><td>ABS   </td><td>výpočet absolutní hodnoty se saturací</td></tr>
<tr><td>ADD   </td><td>součet bez saturace</td></tr>
<tr><td>ADDU  </td><td>součet bez saturace dvou hodnot bez znaménka</td></tr>
<tr><td>AND   </td><td>operace logického součinu prováděná bit po bitu</td></tr>
<tr><td>CMPEQ </td><td>porovnání na relaci =, do výsledného registru se uloží 0 či 1</td></tr>
<tr><td>CMPGT </td><td>porovnání na relaci &gt;, čísla se znaménky</td></tr>
<tr><td>CMPGTU</td><td>dtto, ale pro čísla bez znaménka</td></tr>
<tr><td>CMPLT </td><td>porovnání na relaci &lt;, čísla se znaménky</td></tr>
<tr><td>CMPLTU</td><td>dtto, ale pro čísla bez znaménka</td></tr>
<tr><td>LMBD  </td><td>nalezení prvního bitu s&nbsp;nastavenou hodnotou (0 či 1) zleva (od nejvyššího bitu)</td></tr>
<tr><td>MV    </td><td>přesun dat mezi dvojicí pracovních registrů</td></tr>
<tr><td>NEG   </td><td>negace operandu (*-1)</td></tr>
<tr><td>NORM  </td><td>vrací počet redundantních bitů znaménka (počet shodných bitů počítáno od 32.bitu)</td></tr>
<tr><td>NOT   </td><td>logická operace negace prováděná bit po bitu</td></tr>
<tr><td>OR    </td><td>operace logického součtu prováděná bit po bitu</td></tr>
<tr><td>SADD  </td><td>součet se saturací</td></tr>
<tr><td>SAT   </td><td>konverze 40.bit &rarr; 32.bit (se saturací)</td></tr>
<tr><td>SSUB  </td><td>rozdíl se saturací (čísla se znaménkem)</td></tr>
<tr><td>SUB   </td><td>rozdíl bez saturace</td></tr>
<tr><td>SUBC  </td><td>rozdíl (s&nbsp;podmínkou) + bitový posun, pro operaci dělení</td></tr>
<tr><td>SUBU  </td><td>rozdíl se saturací (čísla bez znaménka)</td></tr>
<tr><td>XOR   </td><td>operace logické nonekvivalence prováděná bit po bitu</td></tr>
<tr><td>ZERO  </td><td>vynulování registru (rozdíl registru se sebou samým)</td></tr>
</table>



<p><a name="k12"></a></p>
<h2 id="k12">12. Instrukce pro jednotky <strong>S1</strong> a <strong>S2</strong></h2>

<p>Výkonné jednotky <strong>S1</strong> a <strong>S2</strong> se
v&nbsp;některých ohledech podobají výše zmíněným jednotkám <strong>L1</strong>
a <strong>L2</strong>, ovšem jejich možnosti jsou větší, protože do těchto
jednotek byly přidány shiftery (pro bitové posuny) a taktéž modul pro podmíněné
a nepodmíněné skoky. Instrukce, které jsou v&nbsp;těchto jednotkách
zpracovávány, jsou vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>Zkratka</th><th>Instrukce</th></tr>
<tr><td>ADD           </td><td>součet bez saturace</td></tr>
<tr><td>ADDK          </td><td>součet registru s&nbsp;konstantou</td></tr>
<tr><td>ADD2          </td><td>součet dvou 16bitových operandů</td></tr>
<tr><td>AND           </td><td>operace logického součinu prováděná bit po bitu</td></tr>
<tr><td>B displacement</td><td>skok s&nbsp;použitím konstanty pro výpočet adresy</td></tr>
<tr><td>B register    </td><td>skok s&nbsp;použitím pracovního registru pro výpočet adresy</td></tr>
<tr><td>B IRP         </td><td>skok s&nbsp;použitím registru IRP pro výpočet adresy</td></tr>
<tr><td>B NRP         </td><td>skok s&nbsp;použitím registru NRP pro výpočet adresy</td></tr>
<tr><td>CLR           </td><td>vynulování bitu/bitů v&nbsp;bitovém poli</td></tr>
<tr><td>EXT           </td><td>získání hodnoty z&nbsp;bitového pole, znaménkové rozšíření na 32bitové slovo</td></tr>
<tr><td>EXTU          </td><td>získání hodnoty z&nbsp;bitového pole, bezznaménkové rozšíření na 32bitové slovo</td></tr>
<tr><td>MV            </td><td>přesun dat mezi dvojicí pracovních registrů</td></tr>
<tr><td>MVC           </td><td>přesun dat mezi řídicími registry a pracovními registry</td></tr>
<tr><td>MVK           </td><td>načtení konstanty do registru (znaménkové rozšíření)</td></tr>
<tr><td>MVKH          </td><td>načtení konstanty do registru (horních 16bitů)</td></tr>
<tr><td>MVKL          </td><td>načtení konstanty do registru (horních 16bitů, znaménkové rozšíření)</td></tr>
<tr><td>MVKLH         </td><td>načtení konstanty do registru (horních 16bitů)</td></tr>
<tr><td>NEG           </td><td>negace operandu (*-1)</td></tr>
<tr><td>NOT           </td><td>logická operace negace prováděná bit po bitu</td></tr>
<tr><td>OR            </td><td>operace logického součtu prováděná bit po bitu</td></tr>
<tr><td>SET           </td><td>nastavení bitu/bitů v&nbsp;bitovém poli</td></tr>
<tr><td>SHL           </td><td>aritmetický posun doleva</td></tr>
<tr><td>SHR           </td><td>aritmetický posun doprava</td></tr>
<tr><td>SHRU          </td><td>logický posun doprava</td></tr>
<tr><td>SSHL          </td><td>posun doleva se saturací</td></tr>
<tr><td>SUB           </td><td>rozdíl bez saturace</td></tr>
<tr><td>SUB2          </td><td>rozdíl dvou 16bitových operandů</td></tr>
<tr><td>XOR           </td><td>operace logické nonekvivalence prováděná bit po bitu</td></tr>
<tr><td>ZERO          </td><td>vynulování registru (rozdíl registru se sebou samým)</td></tr>
</table>



<p><a name="k13"></a></p>
<h2 id="k13">13. Instrukce pro jednotky <strong>M1</strong> a <strong>M2</strong></h2>

<p>Jednotky <strong>M1</strong> a <strong>M2</strong> tvoří jádro celého DSP,
protože tyto jednotky v&nbsp;první řadě obsahují násobičky. Z&nbsp;tohoto
důvodu jsou všechny instrukce orientovány právě na použití násobiček, což je
jasně patrné z&nbsp;následující tabulky. U instrukcí lze vybrat jak typ
operandů (bez znaménka: unsigned, se znaménkem: signed), tak i tu část
registru, která se použije (spodních 16 bitů: LSB, horních 16 bitů: MSB):</p>

<table>
<tr><th>Zkratka</th><th>Instrukce</th><th>Operand 1</th><th>Operand 2</th></tr>
<tr><td>MPY    </td><td>násobení 16&times;16 bitů</td><td>Signed LSB</td><td>Signed LSB</td></tr>
<tr><td>MPYH   </td><td>násobení 16&times;16 bitů</td><td>Signed MSB</td><td>Signed MSB</td></tr>
<tr><td>MPYHL  </td><td>násobení 16&times;16 bitů</td><td>Signed MSB</td><td>Signed LSB</td></tr>
<tr><td>MPYHLU </td><td>násobení 16&times;16 bitů</td><td>Unsigned MSB</td><td>Unsigned LSB</td></tr>
<tr><td>MPYHSLU</td><td>násobení 16&times;16 bitů</td><td>Signed MSB</td><td>Unsigned LSB</td></tr>
<tr><td>MPYHSU </td><td>násobení 16&times;16 bitů</td><td>Signed MSB</td><td>Unsigned MSB</td></tr>
<tr><td>MPYHU  </td><td>násobení 16&times;16 bitů</td><td>Unsigned MSB</td><td>Unsigned MSB</td></tr>
<tr><td>MPYHULS</td><td>násobení 16&times;16 bitů</td><td>Unsigned MSB</td><td>Signed LSB</td></tr>
<tr><td>MPYHUS </td><td>násobení 16&times;16 bitů</td><td>Unsigned MSB</td><td>Signed MSB</td></tr>
<tr><td>MPYLH  </td><td>násobení 16&times;16 bitů</td><td>Signed LSB</td><td>Signed MSB</td></tr>
<tr><td>MPYLHU </td><td>násobení 16&times;16 bitů</td><td>Unsigned LSB</td><td>Unsigned MSB</td></tr>
<tr><td>MPYLSHU</td><td>násobení 16&times;16 bitů</td><td>Signed LSB</td><td>Unsigned MSB</td></tr>
<tr><td>MPYLUHS</td><td>násobení 16&times;16 bitů</td><td>Unsigned LSB</td><td>Signed MSB</td></tr>
<tr><td>MPYSU  </td><td>násobení 16&times;16 bitů</td><td>Signed LSB</td><td>Unsigned LSB</td></tr>
<tr><td>MPYU   </td><td>násobení 16&times;16 bitů</td><td>Unsigned LSB</td><td>Unsigned LSB</td></tr>
<tr><td>MPYUS  </td><td>násobení 16&times;16 bitů</td><td>Unsigned LSB</td><td>Signed LSB</td></tr>
<tr><td>SMPY   </td><td>násobení + posun + saturace</td><td>Signed LSB</td><td>Signed LSB</td></tr>
<tr><td>SMPYH  </td><td>násobení + posun + saturace</td><td>Signed MSB</td><td>Signed MSB</td></tr>
<tr><td>SMPYHL </td><td>násobení + posun + saturace</td><td>Signed MSB</td><td>Signed LSB</td></tr>
<tr><td>SMPYLH </td><td>násobení + posun + saturace</td><td>Signed LSB</td><td>Signed MSB</td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Instrukce pro jednotky <strong>D1</strong> a <strong>D2</strong></h2>

<p>Význam výkonných jednotek <strong>D1</strong> a <strong>D2</strong> spočívá
v&nbsp;tom, že umožňují načítání a ukládání operandů z a do operační paměti.
Ovšem &ndash; což je poměrně zajímavé &ndash; i zde nalezneme jednoduché
aritmeticko-logické jednotky, což může být v&nbsp;některých algoritmech výhodné
(teoreticky lze spustit až osm součtů současně):</p>

<table>
<tr><th>Zkratka</th><th>Instrukce</th></tr>
<tr><td>ADD        </td><td>součet bez saturace</td></tr>
<tr><td>ADDAB      </td><td>součet, jeden operand (bajt) je načten z&nbsp;paměti</td></tr>
<tr><td>ADDAH      </td><td>součet, jeden operand (16bitové slovo) je načten z&nbsp;paměti</td></tr>
<tr><td>ADDAW      </td><td>součet, jeden operand (32bitové slovo) je načten z&nbsp;paměti</td></tr>
<tr><td>LDB memory </td><td>načtení bajtu z&nbsp;operační paměti</td></tr>
<tr><td>LDBU memory</td><td>dtto, bezznaménkové rozšíření</td></tr>
<tr><td>LDH memory </td><td>načtení 16bitového slova z&nbsp;operační paměti</td></tr>
<tr><td>LDHU memory</td><td>dtto, bezznaménkové rozšíření</td></tr>
<tr><td>LDW memory </td><td>načtení 32bitového slova z&nbsp;operační paměti</td></tr>
<tr><td>MV         </td><td>přesun dat mezi dvěma pracovními registry</td></tr>
<tr><td>STB memory </td><td>uložení bajtu do operační paměti</td></tr>
<tr><td>STH memory </td><td>uložení 16bitového slova do operační paměti</td></tr>
<tr><td>STW memory </td><td>uložení 32bitového slova do operační paměti</td></tr>
<tr><td>SUB        </td><td>rozdíl bez saturace</td></tr>
<tr><td>SUBAB      </td><td>rozdíl, jeden operand (bajt) je načten z&nbsp;paměti</td></tr>
<tr><td>SUBAH      </td><td>rozdíl, jeden operand (16bitové slovo) je načten z&nbsp;paměti</td></tr>
<tr><td>SUBAW      </td><td>rozdíl, jeden operand (32bitové slovo) je načten z&nbsp;paměti</td></tr>
<tr><td>ZERO       </td><td>vynulování registru (rozdíl registru se sebou samým)</td></tr>
</table>



<p><a name="k15"></a></p>
<h2 id="k15">15. Malá ukázka na závěr &ndash; FIR Filtr</h2>

<p>Na závěr si uveďme implementaci jádra FIR filtru tak, jak je popsána
v&nbsp;materiálech TI. Vidíme, že se jedná o jediné &bdquo;široké&ldquo; slovo
obsahující osm paralelně spouštěných instrukcí (žádná instrukce není NOP).
Výkonné jednotky <strong>L1</strong> a <strong>L2</strong> provádí součet
operandů uložených v&nbsp;pracovních registrech, jednotky <strong>M1</strong> a
<strong>M2</strong> samozřejmě provádí násobení, jednotky <strong>D1</strong> a
<strong>D2</strong> načítání vzorků signálu a koeficientů h(n) z&nbsp;operační
paměti, poslední dvě jednotky <strong>S1</strong> a <strong>S2</strong>
zajišťují snížení hodnoty počitadla a podmíněný skok na začátek smyčky:</p>

<pre>
LOOP:
             ADD   .L1  A0, A3, A0
     ||      ADD   .L2  B1, B7, B1
     ||      MPYHL .M1X A2, B2, A3
     ||      MPYLH .M2X A2, B2, B7
     ||      LDW   .D2  *B4++, B2
     ||      LDW   .D1  *A7--, A2
     || [B0] ADD   .S2  -1, B0, B0
     || [B0] B     .S1  LOOP
</pre>

<p>Poznámka: operandy instrukcí se zapisují v&nbsp;pořadí <i>zdroj</i>,
<i>zdroj</i>, <i>cíl</i>, takže například první instrukce:</p>

<pre>
             ADD   .L1  A0, A3, A0
</pre>

<p>provádí operaci: A0 + A3 &rarr; A0 a předposlední instrukce:</p>

<pre>
        [B0] ADD   .S2  -1, B0, B0
</pre>

<p>provádí operaci: if B0 &ne; 0 then B0-- (neboli -1 + B0 &rarr; B0).</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>VLIW: Very Long Instruction Word: Texas Instruments TMS320C6x<br />
<a href="http://www.ecs.umass.edu/ece/koren/architecture/VLIW/2/ti1.html">http://www.ecs.umass.edu/ece/koren/architecture/VLIW/2/ti1.html</a>
</li>

<li>An Introduction To Very-Long Instruction Word (VLIW) Computer Architecture<br />
Philips Semiconductors
</li>

<li>VLIW Architectures for DSP: A Two-Part Lecture (PDF, slajdy)<br />
<a href="http://www.bdti.com/MyBDTI/pubs/vliw_icspat99.pdf">http://www.bdti.com/MyBDTI/pubs/vliw_icspat99.pdf</a>
</li>

<li>Very long instruction word (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Very_long_instruction_word">https://en.wikipedia.org/wiki/Very_long_instruction_word</a>
</li>

<li>A VLIW Approach to Architecture, Compilers and Tools<br />
<a href="http://www.vliw.org/book/">http://www.vliw.org/book/</a>
</li>

<li>VEX Toolchain (VEX = VLIW Example)<br />
<a href="http://www.hpl.hp.com/downloads/vex/">http://www.hpl.hp.com/downloads/vex/</a>
</li>

<li>Elbrus (computer)<br />
<a href="https://en.wikipedia.org/wiki/Elbrus_%28computer%29">https://en.wikipedia.org/wiki/Elbrus_%28computer%29</a>
</li>

<li>Super Harvard Architecture Single-Chip Computer<br />
<a href="https://en.wikipedia.org/wiki/Super_Harvard_Architecture_Single-Chip_Computer">https://en.wikipedia.org/wiki/Super_Harvard_Architecture_Single-Chip_Computer</a>
</li>

<li>Digital Signal Processors (stránky TI)<br />
<a href="http://www.ti.com/lsds/ti/processors/dsp/overview.page">http://www.ti.com/lsds/ti/processors/dsp/overview.page</a>
</li>

<li>Introduction to DSP<br />
<a href="http://www.ti.com/lit/wp/spry281/spry281.pdf">http://www.ti.com/lit/wp/spry281/spry281.pdf</a>
</li>

<li>The Evolution of TMS (Family of DSPs)<br />
<a href="http://www.slideshare.net/moto_modx/theevo1">http://www.slideshare.net/moto_modx/theevo1</a>
</li>

<li>Datasheet k TMS32010<br />
<a href="http://www.datasheetarchive.com/dlmain/49326c32a52050140abffe6f0ac4894aa09889/M/TMS32010">http://www.datasheetarchive.com/dlmain/49326c32a52050140abffe6f0ac4894aa09889/M/TMS32010</a>
</li>

<li>1979: Single Chip Digital Signal Processor Introduced<br />
<a href="http://www.computerhistory.org/siliconengine/single-chip-digital-signal-processor-introduced/">http://www.computerhistory.org/siliconengine/single-chip-digital-signal-processor-introduced/</a>
</li>

<li>The TMS32010. The DSP chip that changed the destiny of a semiconductor giant<br />
<a href="http://www.tihaa.org/historian/TMS32010-12.pdf">http://www.tihaa.org/historian/TMS32010-12.pdf</a>
</li>

<li>Texas Instruments TMS320 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Texas_Instruments_TMS320">https://en.wikipedia.org/wiki/Texas_Instruments_TMS320</a>
</li>

<li>Great Microprocessors of the Past and Present: Part IX: Signetics 8x300, Early cambrian DSP ancestor (1978):<br />
<a href="http://www.cpushack.com/CPU/cpu2.html#Sec2Part9">http://www.cpushack.com/CPU/cpu2.html#Sec2Part9</a>
</li>

<li>Great Microprocessors of the Past and Present (V 13.4.0)<br />
<a href="http://jbayko.sasktelwebsite.net/cpu.html">http://jbayko.sasktelwebsite.net/cpu.html</a>
</li>

<li>Introduction to DSP - DSP processors:<br />
<a href="http://www.bores.com/courses/intro/chips/index.htm">http://www.bores.com/courses/intro/chips/index.htm</a>
</li>

<li>The Scientist and Engineer's Guide to Digital Signal Processing:<br />
<a href="http://www.dspguide.com/">http://www.dspguide.com/</a>
</li>

<li>Digital signal processor (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Digital_signal_processor">http://en.wikipedia.org/wiki/Digital_signal_processor</a>
</li>

<li>Digitální signálový procesor (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Digitální_signálový_procesor">http://cs.wikipedia.org/wiki/Digitální_signálový_procesor</a>
</li>

<li>Digital Signal Processing FAQs<br />
<a href="http://dspguru.com/dsp/faqs">http://dspguru.com/dsp/faqs</a>
</li>

<li>Reprezentace numerických hodnot ve formátech FX a FP<br />
<a href="http://www.root.cz/clanky/fixed-point-arithmetic/">http://www.root.cz/clanky/fixed-point-arithmetic/</a>
</li>

<li>IEEE 754 a její příbuzenstvo: FP formáty<br />
<a href="http://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/">http://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/</a>
</li>

<li>Čtyři základní způsoby uložení čísel pomocí FX formátů<br />
<a href="http://www.root.cz/clanky/binarni-reprezentace-numerickych-hodnot-v-fx-formatu/">http://www.root.cz/clanky/binarni-reprezentace-numerickych-hodnot-v-fx-formatu/</a>
</li>

<li>Základní aritmetické operace prováděné v FX formátu<br />
<a href="http://www.root.cz/clanky/zakladni-aritmeticke-operace-provadene-ve-formatu-fx/">http://www.root.cz/clanky/zakladni-aritmeticke-operace-provadene-ve-formatu-fx/</a>
</li>

<li>Aritmetické operace s hodnotami uloženými ve formátu FP<br />
<a href="http://www.root.cz/clanky/aritmeticke-operace-s-hodnotami-ve-formatu-plovouci-radove-carky/">http://www.root.cz/clanky/aritmeticke-operace-s-hodnotami-ve-formatu-plovouci-radove-carky/</a>
</li>

<li>FIR Filter FAQ<br />
<a href="http://dspguru.com/dsp/faqs/fir">http://dspguru.com/dsp/faqs/fir</a>
</li>

<li>Finite impulse response (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Finite_impulse_response">http://en.wikipedia.org/wiki/Finite_impulse_response</a>
</li>

<li>DSPRelated<br />
<a href="http://www.dsprelated.com/">http://www.dsprelated.com/</a>
</li>

<li>Addressing mode (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Addressing_mode">https://en.wikipedia.org/wiki/Addressing_mode</a>
</li>

<li>Orthogonal instruction set<br />
<a href="https://en.wikipedia.org/wiki/Orthogonal_instruction_set">https://en.wikipedia.org/wiki/Orthogonal_instruction_set</a>
</li>

<li>TI 16-bit and 32-bit microcontrollers<br />
<a href="http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/overview.page">http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/overview.page</a>
</li>

<li>TMS 32010 Assembly Language Programmer's Guide (kniha na Amazonu)<br />
<a href="https://www.amazon.com/32010-Assembly-Language-Programmers-Guide/dp/0904047423">https://www.amazon.com/32010-Assembly-Language-Programmers-Guide/dp/0904047423</a>
</li>

<li>COSC2425: PC Architecture and Machine Language, PC Assembly Language<br />
<a href="http://www.austincc.edu/rblack/courses/COSC2425/index.html">http://www.austincc.edu/rblack/courses/COSC2425/index.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

