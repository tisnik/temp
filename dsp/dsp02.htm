<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Instrukční sada digitálních signálových procesorů řady TMS320</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Instrukční sada digitálních signálových procesorů řady TMS320</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o digitálních signálových procesorech řady TSM320 si podrobněji popíšeme instrukční sadu DSP TMS32010. Tato zajímavě navržená instrukční sada tvoří základ pro instrukční sady dalších DSP vyráběných společností Texas Instruments.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Instrukční sada digitálních signálových procesorů řady TMS320</a></p>
<p><a href="#k02">2. Formát instrukčních slov</a></p>
<p><a href="#k03">3. Použití registru <strong>DP</strong> při adresování operandů</a></p>
<p><a href="#k04">4. Použití registrů <strong>AR0</strong> a <strong>AR1</strong> při adresování operandů</a></p>
<p><a href="#k05">5. Aritmetické a logické operace</a></p>
<p><a href="#k06">6. Instrukce pro manipulaci s&nbsp;akumulátorem</a></p>
<p><a href="#k07">7. Násobička a instrukce pro práci s&nbsp;registry <strong>T</strong> a <strong>P</strong></a></p>
<p><a href="#k08">8. Skokové instrukce</a></p>
<p><a href="#k09">9. Instrukce typu load &amp; store, práce s&nbsp;registry použitými při adresování</a></p>
<p><a href="#k10">10. Operace se stavovým a řídicím registrem</a></p>
<p><a href="#k11">11. Ostatní instrukce</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Instrukční sada digitálních signálových procesorů řady TMS320</h2>

<p><a
href="https://www.root.cz/clanky/digitalni-signalove-procesory-rady-tms320/">V&nbsp;první
části</a> článku o digitálních signálových procesorech řady TMS320 jsme si
popsali vnitřní uspořádání čipů TMS32010, které tvoří základ dalších generací
DSP vyráběných společností Texas Instruments. Dnes se seznámíme
s&nbsp;instrukční sadou těchto DSP. V&nbsp;porovnání se všemi doposud popsanými
mikroprocesory a mikrořadiči je instrukční sada TMS32010 v&nbsp;mnoha ohledech
odlišná, což však nemusí být příliš překvapivé, zvláště když si uvědomíme,
k&nbsp;čemu byly tyto čipy určeny &ndash; k&nbsp;rychlému provádění operací
typu konvoluce či korelace s&nbsp;celočíselnými hodnotami popř.&nbsp;hodnotami
uloženými ve formátu s&nbsp;pevnou řádovou čárkou. Nejdůležitější tedy byla
implementace rychlého násobení, 32bitového akumulátoru, adresování prvků
uložených v&nbsp;polích atd. Méně podstatné operace, které například vyžadují
složité adresování, nebyly prioritou a proto je v&nbsp;instrukční sadě
nenalezneme.</p>

<p>S&nbsp;určitou nadsázkou je možné říct, že úkolem celého TMS32010 byl pouze
sběr dat a jejich posílání do násobičky, protože právě násobička na tomto DSP
zabrala největší plochu čipu. Na druhou stranu právě tato v&nbsp;době vzniku
neobyčejná architektura umožnila velký rozmach digitálního zpracování signálu,
a to v&nbsp;mnoha oblastech (včetně zvukové syntézy atd.)</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Formát instrukčních slov</h2>

<p>Většina instrukcí, které jsou na DSP řady TMS32010 implementovány, má
jednotnou šířku šestnáct bitů, což znamená, že je možné je načíst
v&nbsp;jediném cyklu. Šířka sběrnice interní paměti ROM/EPROM je totiž taktéž
šestnáct bitů, a i šířka externí datové sběrnice je shodná. Jedinou výjimkou
jsou skoky, které jsou uloženy ve dvou po sobě jdoucích slovech (16+16 bitů),
přičemž ve druhém slovu je uložen dvanáctibitový cíl skoku (nejvyšší čtyři bity
jsou nulové). Podívejme se, jaké jsou formáty instrukcí a jak je rozděleno
instrukční slovo do jednotlivých bitových polí.</p>

<p>U několika instrukcí je možné do vybraného registru načíst osmibitovou
konstantu. Jedná se o instrukce <strong>LACK</strong> a <strong>LARK</strong>,
jejichž instrukční slovo vypadá následovně</p>

<pre>
  15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |     osmibitová konstanta      |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
</pre>

<p>O významu operace násobení v&nbsp;oblasti DSP snad nejvíce vypovídá
existence instrukce <strong>MPYK</strong>, která jako jediná umožňuje
specifikovat konstantu o šířce třinácti bitů:</p>

<pre>
  15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|   |   |   |            třináctibitová konstanta               |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
</pre>

<p>Relativně velké množství instrukcí obsahuje adresu druhého operandu uloženou
ve spodních sedmi bitech. Tato adresa je zkombinována s&nbsp;registrem
<strong>DP</strong>:</p>

<pre>
  15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   | 0 |           adresa          |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
</pre>

<p>Ty stejné instrukce, které dokážou využít sedmibitovou adresu operandu,
mohou alternativně použít adresování s&nbsp;využitím registrů
<strong>AR0</strong> či <strong>AR1</strong>. Podrobnosti jsme si již řekli
v&nbsp;předchozích kapitolách:</p>

<pre>
  15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   | 1 | 0 |INC|DEC|NAR| 0   0 |ARP|
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
</pre>

<p>Další formát je použit u instrukcí <strong>LAC</strong>,
<strong>ADD</strong> a <strong>SUB</strong>, protože tyto instrukce dokážou
načíst operand a před jeho přivedením do ALU ho ještě posunout v&nbsp;prvním
shifteru. Z&nbsp;tohoto důvodu bylo nutné do instrukčního slova vložit hodnotu
posunu:</p>

<pre>
  15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|   |   |   |   |     shift     | I |           adresa          |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
</pre>

<p>Jediná instrukce <strong>SASH</strong> používá druhý shifter a její formát
vypadá následovně:</p>

<pre>
  15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   shift   | I |        adresa         |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
</pre>

<p>Poslední formát využívají skoky, u nichž je adresa skoku uložena ve spodních
dvanácti bitech druhého slova (povšimněte si, že u modernějších čipů lze bez
problémů využít čtyři horní nuly pro rozšíření adresy):</p>

<pre>
  15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
| 0 | 0 | 0 | 0 | adresa cíle nepodmíněného či podmíněného skoku|
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Použití registru <strong>DP</strong> při adresování operandů</h2>

<p>Většina operací používá jako svůj první operand akumulátor, zatímco druhý
operand je načítán z&nbsp;datové paměti o kapacitě 144 nebo 256 slov.
V&nbsp;instrukčním slovu je pro adresu operandu vyhrazeno pouze sedm bitů,
takže kód instrukce vypadá následovně:</p>

<pre>
  15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   | 0 |           adresa          |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
</pre>

<p>Pro adresaci operandů v&nbsp;paměti dat je zapotřebí osm bitů. Z&nbsp;tohoto
důvodu se adresa rozděluje na 1+7 bitů, přičemž první (nejvyšší) bit je uložen
v&nbsp;registru <strong>DP</strong> (data page). U původních čipů obsahovala
nultá stránka 128 slov a první stránka jen 16 slov (144-128), u čipů
s&nbsp;větší RAM měly obě stránky shodně 128 slov:</p>

<pre>
  15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   | 0 |       adresa 0..127       |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
                                  :   :   :   :   :   :   :   :
                               +-----+:   :   :   :   :   :   :
                               |  DP |:   :   :   :   :   :   :
                               +-----+:   :   :   :   :   :   :
                                  :   :   :   :   :   :   :   :
                                  v   v   v   v   v   v   v   v
                                +---+---+---+---+---+---+---+---+
                                |         adresa 0..255         |
                                +---+---+---+---+---+---+---+---+


</pre>

<p>Obsah registru <strong>DP</strong> se nastavuje instrukcí
<strong>LDP</strong> (z&nbsp;paměti je načten operand a použije se jen jeho
nejnižší bit) nebo <strong>LDPK</strong> (jednobitová konstanta je přímo
součástí instrukce).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Použití registrů <strong>AR0</strong> a <strong>AR1</strong> při adresování operandů</h2>

<p>Již minule jsme si řekli, že DSP TMS32010 obsahují dva adresové registry
nazvané <strong>AR0</strong> a <strong>AR1</strong>, přičemž vždy jeden
z&nbsp;těchto registrů je aktivní (jeho index je uložen v&nbsp;jednobitovém
registru <strong>ARP</strong>). Tyto adresové registry mají hned několik
využití, protože je lze použít jak pro klasické adresování operandů uložených
v&nbsp;RAM (kapacita 144 nebo 256 slov), tak i pro průchody polem (zde se
využije možnost autoinkrementace a autodekrementace), popř.&nbsp;pro realizaci
počítaných programových smyček realizovaných instrukcí <strong>BANZ</strong>.
Podívejme se na některé možnosti poskytované assemblerem při volání instrukce
<strong>ADD</strong> (* značí nepřímé adresování):</p>

<pre>
ADD *         ; načtení z adresy, na níž ukazuje vybraný AR0/1
&nbsp;
ADD *, 4      ; načtení z adresy, na níž ukazuje vybraný AR0/1
              ; posun načítané hodnoty o 4 bity doleva
&nbsp;
ADD *+, 4     ; načtení z adresy, na níž ukazuje vybraný AR0/1
              ; posun načítané hodnoty o 4 bity doleva
              ; autoinkrementace vybraného registru AR0/1
&nbsp;
ADD *-, 4     ; načtení z adresy, na níž ukazuje vybraný AR0/1
              ; posun načítané hodnoty o 4 bity doleva
              ; autodekrementace vybraného registru AR0/1
&nbsp;
ADD *-, 4, 0  ; načtení z adresy, na níž ukazuje vybraný AR0/1
              ; posun načítané hodnoty o 4 bity doleva
              ; autodekrementace vybraného registru AR0/1
              ; do ARP je uložena nula (aktivní se tedy stane AR0)
&nbsp;
ADD *-, 4, 1  ; načtení z adresy, na níž ukazuje vybraný AR0/1
              ; posun načítané hodnoty o 4 bity doleva
              ; autodekrementace vybraného registru AR0/1
              ; do ARP je uložena jednička (aktivní se tedy stane AR1)
</pre>

<p>Podobný způsob adresování (většinou bez bitových posunů) podporují i mnohé
další instrukce, takže sice na první pohled malý instrukční soubor
s&nbsp;pouhými šedesáti instrukcemi je ve skutečnosti poměrně všestranný (i
když ne tak univerzální, jako instrukční sady s&nbsp;dvouadresovým či
tříadresovým kódem).</p>

<p>V&nbsp;instrukčním slovu se při použití adresních registrů v&nbsp;sedmém
bitu nachází 1 a bity 5, 4, 3 a 0 mají speciální význam:</p>

<pre>
  15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   | 1 | 0 |INC|DEC|NAR| 0   0 |ARP|
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
</pre>

<table>
<tr><th>Bit</th><th>Význam</th></tr>
<tr><td>INC</td><td>pokud je 1, vybraný AR se inkrementuje po provedení operace</td></tr>
<tr><td>DEC</td><td>pokud je 1, vybraný AR se dekrementuje po provedení operace</td></tr>
<tr><td>NAR</td><td>povolení či zákaz změny registru ARP podle bitu 0</td></tr>
<tr><td>ARP</td><td>změna ARP na 0 (výběr AR0) či 1 (výběr AR1), lze maskovat bitem NAR</td></tr>
</table>

<p>Poznámka: specifikace popisuje chování bitů <strong>INC</strong> a
<strong>DEC</strong> pro kombinace bitové 00 (vybraný AR se nezmění), 10
(inkrementace) a 01 (dekrementace). Teoreticky by kombinace 11 měla být stejná
jako 00, assemblery však tuto kombinaci nevygenerují.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Aritmetické a logické operace</h2>

<p>V&nbsp;této kapitole jsou zmíněny všechny aritmetické a logické operace
prováděné v&nbsp;aritmeticko-logické jednotce (nikoli tedy v&nbsp;samostatně
pracující násobičce). Všechny dále zmíněné instrukce jako jeden svůj zdrojový
operand vždy načítají akumulátor, druhým operandem je šestnáctibitová hodnota
načtená z&nbsp;paměti dat (RAM). Tato hodnota je buď posunuta a následně
využita jako 32bitová hodnota (první shifter), popř.&nbsp;je použita a načtena
přímo nebo je znaménkově rozšířena na 32 bitů. Výsledek je ve všech případech
uložen zpět do akumulátoru, který je umístěn na výstupu
z&nbsp;aritmeticko-logické jednotky:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Délka</th><th>Počet cyklů</th><th>Operandy</th><th>Význam</th></tr>
<tr><td>1</td><td>ABS</td><td>1</td><td>1</td><td>&times;</td><td>výpočet absolutní hodnoty s&nbsp;uložením zpět do akumulátoru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>2</td><td>ADD</td><td>1</td><td>1</td><td>shift, adresa</td><td>přičtení posunuté hodnoty k&nbsp;akumulátoru</td></tr>
<tr><td>3</td><td>ADDH</td><td>1</td><td>1</td><td>adresa</td><td>přičtení hodnoty k&nbsp;horním 16 bitům akumulátoru</td></tr>
<tr><td>4</td><td>ADDS</td><td>1</td><td>1</td><td>adresa</td><td>přičtení hodnoty k&nbsp;akumulátoru (operand není znaménkově rozšířen)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>SUB</td><td>1</td><td>1</td><td>shift, adresa</td><td>odečtení posunuté hodnoty od akumulátoru</td></tr>
<tr><td>6</td><td>SUBC</td><td>1</td><td>1</td><td>adresa</td><td>posun popř.&nbsp;i rozdíl (použito jako jeden krok při dělení)</td></tr>
<tr><td>7</td><td>SUBH</td><td>1</td><td>1</td><td>adresa</td><td>odečtení hodnoty od horních 16 bitů akumulátoru</td></tr>
<tr><td>8</td><td>SUBS</td><td>1</td><td>1</td><td>adresa</td><td>odečtení hodnoty od akumulátoru (operand není znaménkově rozšířen)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>9</td><td>AND</td><td>1</td><td>1</td><td>adresa</td><td>logický součin bit po bitu (použije se jen na 16 bitů)</td></tr>
<tr><td>10</td><td>OR</td><td>1</td><td>1</td><td>adresa</td><td>logický součet bit po bitu (použije se jen na 16 bitů)</td></tr>
<tr><td>11</td><td>XOR</td><td>1</td><td>1</td><td>adresa</td><td>logická nonekvivalence bit po bitu (použije se jen na 16 bitů)</td></tr>
</table>

<p>Nejsložitější je instrukce <strong>SUBC</strong>, protože ta je navržena
takovým způsobem, aby mohla být použita pro celočíselné dělení dvou čísel bez
znaménka. Na začátku je nutné do spodní poloviny akumulátoru uložit dělenec, na
zadané adrese je uložen dělitel a po provedení šestnácti instrukcí
<strong>SUBC</strong> bude v&nbsp;horních šestnácti bitech akumulátoru uložen
zbytek po dělení a ve spodních šestnácti bitech pak podíl. Celý podprogram pro
dělení dvou šestnáctibitových čísel může být implementován takto:</p>

<pre>
        LARP AR0       ; další operace budou používat adresový registr AR0
        LARK AR0, 15   ; načtení konstanty 15 (počitadla iterací)
OPAK    SUBC dělitel   ; jedna iterace celočíselného dělení
        BANZ OPAK      ; opakování smyčky
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instrukce pro manipulaci s&nbsp;akumulátorem</h2>

<p>Poměrně rozsáhlá skupina instrukcí pracuje s&nbsp;akumulátorem připojeným na
vstup i na výstup ALU. Vybrané instrukce navíc používají již popsané shiftery,
z&nbsp;nichž jeden je umístěný na vstupu ALU, druhý naopak na jeho výstupu:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Délka</th><th>Počet cyklů</th><th>Operandy</th><th>Význam</th></tr>
<tr><td>1</td><td>LAC</td><td>1</td><td>1</td><td>shift, adresa</td><td>načtení operandu, jeho posun v&nbsp;prvním shifteru a uložení do akumulátoru</td></tr>
<tr><td>2</td><td>LACK</td><td>1</td><td>1</td><td>konstanta</td><td>do akumulátoru je načtena osmibitová konstanta (ta je znaménkově rozšířena)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>SACH</td><td>1</td><td>1</td><td>shift, adresa</td><td>horní polovina akumulátoru je posunuta ve druhém shifteru a uložena na zadanou adresu</td></tr>
<tr><td>4</td><td>SACL</td><td>1</td><td>1</td><td>adresa</td><td>spodní polovina akumulátoru (16 bitů) je uložena na zadanou adresu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>ZAC</td><td>1</td><td>1</td><td>&times;</td><td>vynulování celého akumulátoru</td></tr>
<tr><td>6</td><td>ZALH</td><td>1</td><td>1</td><td>&times;</td><td>vynulování akumulátoru a načtení hodnoty do jeho horní poloviny (16 bitů)</td></tr>
<tr><td>7</td><td>ZALS</td><td>1</td><td>1</td><td>&times;</td><td>vynulování akumulátoru a načtení hodnoty do jeho spodní poloviny (16 bitů)</td></tr>
</table>

<p>Povšimněte si, jakým způsobem se museli tvůrci procesorů TMS32010 vyrovnat
s&nbsp;faktem, že akumulátor je 32bitový, zatímco datová paměť (144 nebo 256
slov) obsahuje šestnáctibitové operandy a tudíž i datová sběrnice je
šestnáctibitová.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Násobička a instrukce pro práci s&nbsp;registry <strong>T</strong> a <strong>P</strong></h2>

<p>Minule jsme si řekli, že TMS32010 obsahuje výkonnou násobičku, která dokáže
vynásobit dva šestnáctibitové operandy s&nbsp;32bitovým výsledkem, který je
dále zpracován v&nbsp;ALU. Před násobičkou je umístěn registr
<strong>T</strong> (<i>temporary</i>) s&nbsp;šířkou šestnácti bitů, do kterého
se ukládá jeden z&nbsp;činitelů instrukcemi <strong>LT</strong>,
<strong>LTA</strong> a <strong>LTD</strong>. Druhý činitel je načten buď
z&nbsp;datové paměti (16 bitů, instrukce <strong>MPY</strong>), nebo je možné
použít konstantu o šířce třinácti bitů, která je uložena přímo v&nbsp;kódu
instrukce (<strong>MPYK</strong>). Součin se ukládá do registru
<strong>P</strong> (<i>product</i>) a pomocí instrukcí <strong>PAC</strong>,
<strong>APAC</strong> a <strong>SPAC</strong> se buď může výsledek uložit do
akumulátoru nebo se může provést operace acc+P či acc-P.</p> </p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Délka</th><th>Počet cyklů</th><th>Operandy</th><th>Význam</th></tr>
<tr><td>1</td><td>LT  </td><td>1</td><td>1</td><td>adresa</td><td>načtení registru T z&nbsp;paměti</td></tr>
<tr><td>2</td><td>LTA </td><td>1</td><td>1</td><td>adresa</td><td>kombinace instrukcí LT+APAC (načtení + součet)</td></tr>
<tr><td>3</td><td>LTD </td><td>1</td><td>1</td><td>adresa</td><td>kombinace instrukcí LT+APAC+DMOV </td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>PAC </td><td>1</td><td>1</td><td>&times;</td><td>uložení obsahu registru P do akumulátoru</td></tr>
<tr><td>5</td><td>APAC</td><td>1</td><td>1</td><td>&times;</td><td>přičtení obsahu registru P k&nbsp;akumulátoru</td></tr>
<tr><td>6</td><td>SPAC</td><td>1</td><td>1</td><td>&times;</td><td>odečtení obsahu registru P od akumulátoru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>MPY </td><td>1</td><td>1</td><td>adresa</td><td>provedení operace P=T&times;(adresa)</td></tr>
<tr><td>8</td><td>MPYK</td><td>1</td><td>1</td><td>konstanta</td><td>provedení operace P=T&nbsp;konstanta</td></tr>
</table>

<img src="https://i.iinfo.cz/images/257/tms320-3.png" class="image-275140" alt="&#160;" width="550" height="806" />
<p><i>Obrázek 1: Násobička v&nbsp;blokovém schématu TSM32010.</i></p>

<p>Poznámka: povšimněte si, že samotné násobení lze provést v&nbsp;jediném
taktu a že ho lze snadno použít v&nbsp;operacích typu &bdquo;multiply
accumulate&ldquo; (korelace, konvoluce atd.).</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Skokové instrukce</h2>

<p>Na DSP samozřejmě nalezneme instrukci nepodmíněného skoku a taktéž několik
skoků s&nbsp;podmínkou. Povšimněte si, že šest podmíněných skoků pouze
porovnává hodnotu akumulátoru s&nbsp;nulou, není tedy nutné používat klasické
příznakové bity. Jedinou instrukcí pracující s&nbsp;příznakovým bitem, je
podmíněný skok <strong>BV</strong>. Skok <strong>BIOZ</strong> slouží pro
testování pinu BIO (je negovaný), nejsložitější je pak instrukce
<strong>BANZ</strong>, která testuje nulovost vybraného adresního registru a
provede skok ve chvíli, kdy je registr nenulový (tento registr je navíc vždy
dekrementován, což je ideální pro různé typy programových smyček):</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Délka</th><th>Počet cyklů</th><th>Operandy</th><th>Význam</th></tr>
<tr><td>1</td><td>B   </td><td>2</td><td>2</td><td>adresa</td><td>nepodmíněný skok</td></tr>
<tr><td>2</td><td>BANZ</td><td>2</td><td>2</td><td>adresa</td><td>skok za podmínky <strong>AR0</strong>!=0 nebo <strong>AR1</strong>!=0 + dekrementace obsahu registru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>BGEZ</td><td>2</td><td>2</td><td>adresa</td><td>skok za podmínky add &ge; 0</td></tr>
<tr><td>4</td><td>BGZ </td><td>2</td><td>2</td><td>adresa</td><td>skok za podmínky add &gt; 0</td></tr>
<tr><td>5</td><td>BLEZ</td><td>2</td><td>2</td><td>adresa</td><td>skok za podmínky add &le; 0</td></tr>
<tr><td>6</td><td>BLZ </td><td>2</td><td>2</td><td>adresa</td><td>skok za podmínky add &lt; 0</td></tr>
<tr><td>7</td><td>BZ  </td><td>2</td><td>2</td><td>adresa</td><td>skok za podmínky add = 0</td></tr>
<tr><td>8</td><td>BNZ </td><td>2</td><td>2</td><td>adresa</td><td>skok za podmínky add &ne; 0</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>9</td><td>BV  </td><td>2</td><td>2</td><td>adresa</td><td>skok pokud došlo v&nbsp;předešlé operaci k&nbsp;přetečení</td></tr>
<tr><td>10</td><td>BIOZ</td><td>2</td><td>2</td><td>adresa</td><td>test vstupního pinu BIO a skok za podmínky, že je nulový</td></tr>
</table>

<p>TMS32010 obsahuje i základní podporu pro volání podprogramů (ovšem jen do
čtyř úrovní). Zajímavá je především instrukce <strong>CALA</strong>, která
využívá adresu uloženou v&nbsp;akumulátoru. Takto lze realizovat například
některé konstrukce typu switch-case, &bdquo;počítané goto&ldquo; atd.:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Délka</th><th>Počet cyklů</th><th>Operandy</th><th>Význam</th></tr>
<tr><td>1</td><td>CALA</td><td>1</td><td>2</td><td>&times;</td><td>skok na adresu subrutiny uloženou v&nbsp;akumulátoru</td></tr>
<tr><td>2</td><td>CALL</td><td>2</td><td>2</td><td>adresa</td><td>skok na adresu subrutiny uloženou v&nbsp;dalším slovu</td></tr>
<tr><td>3</td><td>RET </td><td>1</td><td>2</td><td>&times;</td><td>návrat ze subrutiny</td></tr>
</table>

<p>Poznámka: povšimněte si, že všechny skokové instrukce (které musí
manipulovat s&nbsp;obsahem registru PC) trvají dva cykly, nehledě na jejich
skutečnou délku.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Instrukce typu load &amp; store, práce s&nbsp;registry použitými při adresování</h2>

<p>S&nbsp;registry <strong>DP</strong>, <strong>ARP</strong>,
<strong>AR0</strong> a <strong>AR1</strong> jsme se již seznámili <a
href="#k03">ve třetí</a> a <a href="#k04">ve čtvrté</a> kapitole.
V&nbsp;následující tabulce jsou uvedeny instrukce, které dokážou tyto registry
načíst či uložit. Zmíněna je i instrukce <strong>MAR</strong>, která se chová
podobně jako <strong>ADD</strong> (<a href="#k04">čtvrtá kapitola</a>), ovšem
jejím výsledkem je pouze inkrementace/dekrementace jednoho z&nbsp;registrů
<strong>AR0</strong> či <strong>AR1</strong>, popř.&nbsp;i změna obsahu
registru <strong>ARP</strong>. Pokud je u této instrukce použita přímá adresa,
chová se tato instrukce jako <strong>NOP</strong>:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Délka</th><th>Počet cyklů</th><th>Operandy</th><th>Význam</th></tr>
<tr><td>1</td><td>LAR </td><td>1</td><td>1</td><td>registr,adresa</td><td>načtení registru AR0/AR1</td></tr>
<tr><td>2</td><td>LARK</td><td>1</td><td>1</td><td>registr,konstanta</td><td>načtení registru AR0/AR1</td></tr>
<tr><td>3</td><td>LARP</td><td>1</td><td>1</td><td>registr</td><td>změna obsahu ARP (0 nebo 1)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>LDP </td><td>1</td><td>1</td><td>adresa</td><td>načtení registru DP</td></tr>
<tr><td>5</td><td>LDPK</td><td>1</td><td>1</td><td>konstanta</td><td>uložení 0 nebo 1 do registru DP</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>6</td><td>MAR </td><td>1</td><td>1</td><td>adresa</td><td>úprava ARP, AR0 či AR1, viz též <a href="#k04">kapitolu číslo 4</a></td></tr>
<tr><td>7</td><td>SAR </td><td>1</td><td>1</td><td>registr,adresa</td><td>uložení AR0/AR1 do RAM</td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Operace se stavovým a řídicím registrem</h2>

<p>Další skupina instrukcí nějakým způsobem pracuje s&nbsp;řídicím registrem,
popř.&nbsp;s&nbsp;jeho vybraným bitem. Největší vliv má bit
<strong>OVM</strong>, jehož hodnota určuje, zda se budou výpočty provádět
s&nbsp;přetečením (jak je zvykem na běžných mikrořadičích a mikroprocesorech)
nebo se saturací (což je naopak obvyklé v&nbsp;DSP algoritmech):</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Délka</th><th>Počet cyklů</th><th>Operandy</th><th>Význam</th></tr>
<tr><td>1</td><td>DINT</td><td>1</td><td>1</td><td>&times;</td><td>zákaz maskovatelných přerušení (nastaví bit INTM na 1)</td></tr>
<tr><td>2</td><td>EINT</td><td>1</td><td>1</td><td>&times;</td><td>povolení maskovatelných přerušení (nastaví bit INTM na 0)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>ROVM</td><td>1</td><td>1</td><td>&times;</td><td>zákaz režimu výpočtů s&nbsp;přetečením (nastaví bit OVM na 0)</td></tr>
<tr><td>4</td><td>SOVM</td><td>1</td><td>1</td><td>&times;</td><td>povolení režimu výpočtů s&nbsp;přetečením (nastaví bit OVM na 1)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>LST</td><td>1</td><td>1</td><td>adresa</td><td>načtení stavového registru z&nbsp;datové RAM</td></tr>
<tr><td>6</td><td>SST</td><td>1</td><td>1</td><td>adresa</td><td>uložení stavového registru do datové RAM</td></tr>
</table>

<img src="http://i.iinfo.cz/images/51/pc140-11.png" width="256" height="256" alt=" " />
<p><i>Obrázek 2: Zdrojový rastrový obrázek (známá fotografie Lenny), který
tvoří zdroj pro jednoduchý konvoluční (FIR) filtr, jenž zvyšuje hodnoty pixelů
o pevně zadanou konstantu (offset).</i></p>

<img src="http://i.iinfo.cz/images/51/pc140-12.png" width="256" height="256" alt=" " />
<p><i>Obrázek 3: Pokud je pro přičtení offsetu použita operace součtu se
zanedbáním přenosu (carry), tj.&nbsp;když se počítá systémem &bdquo;modulo
N&ldquo;, dochází při překročení maximální hodnoty pixelu (čistě bílá barva)
k&nbsp;jasně viditelným chybám.</i></p>

<img src="http://i.iinfo.cz/images/51/pc140-13.png" width="256" height="256" alt=" " />
<p><i>Obrázek 4: Při použití operace součtu se saturací sice taktéž dojde ke
ztrátě informace (vzniknou oblasti s&nbsp;pixely majícími hodnotu 255), ovšem
viditelná chyba je mnohem menší, než na předchozím obrázku.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Ostatní instrukce</h2>

<p>Z&nbsp;instrukčního souboru DSP TMS32010 si zbývá popsat pouhých osm
instrukcí. Tyto instrukce je možné rozdělit do tří oblastí &ndash; uložení
akumulátoru na zásobník či naopak obnova akumulátoru ze zásobníku, instrukce
<strong>NOP</strong>, která pouze zvyšuje obsah registru PC a konečně pětice
instrukcí určených pro přenosy dat mezi RAM a ROM/PROM, práci s&nbsp;externími
porty atd. Podívejme se na následující tabulku:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Délka</th><th>Počet cyklů</th><th>Operandy</th><th>Význam</th></tr>
<tr><td>1</td><td>PUSH</td><td>1</td><td>2</td><td>&times;</td><td>uložení spodních šestnácti bitů akumulátoru na zásobník</td></tr>
<tr><td>2</td><td>POP </td><td>1</td><td>2</td><td>&times;</td><td>obnova spodních šestnácti bitů akumulátoru ze zásobníku</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>NOP </td><td>1</td><td>1</td><td>&times;</td><td>pouze zvýší obsah registru PC</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>IN  </td><td>1</td><td>2</td><td>adresa</td><td>přečtení úrovně na vstupním portu, uložení do paměti</td></tr>
<tr><td>5</td><td>OUT </td><td>1</td><td>2</td><td>adresa</td><td>změna úrovní na výstupním portu</td></tr>
<tr><td>5</td><td>DMOV</td><td>1</td><td>1</td><td>adresa</td><td>přesun dat ze zadané adresy na nejbližší vyšší adresu</td></tr>
<tr><td>7</td><td>TBLR</td><td>1</td><td>3</td><td>adresa</td><td>přesun dat z&nbsp;paměti programu do RAM</td></tr>
<tr><td>8</td><td>TBLW</td><td>1</td><td>3</td><td>adresa</td><td>přesun dat z&nbsp;RAM do paměti programu</td></tr>
</table>

<p>Poznámky:</p>

<ol>

<li>Povšimněte si, že operace se zásobníkem jsou provedeny ve dvou taktech,
tedy pomaleji, než například vynásobení dvou čísel.</li>

<li>Instrukce <strong>DMOV</strong> se typicky používá s&nbsp;adresními režimy
používajícími registr <strong>AR0</strong> či <strong>AR1</strong></li>

<li>Instrukce <strong>DMOV</strong> se používá pro implementaci zpoždění ve
zpracovávaném signálu (z<sup>-1</sup>)</li>

<li>Instrukce <strong>TBLR</strong> a <strong>TBLW</strong> jsou zvláštní tím,
že pro adresaci hodnoty v&nbsp;paměti programu používají spodních dvanáct bitů
akumulátoru. Navíc se pro adresaci ve skutečnosti používá PC, který je před
provedením instrukce uložen na zásobník a po provedení instrukce zase obnoven.
To znamená, že tyto dvě instrukce potřebují mít alespoň jedno volné místo na
zásobníku (s&nbsp;kapacitou čtyř prvků).</li>

</ol>

<p>Blokový přesun dat může vypadat například takto:</p>

<pre>
MOVTBL  TBLR    *-         ; přesun jednoho slova na adresu uloženou v AR0/AR1
        SUB     ONE        ; odečtení jedničky od akumulátoru (ten obsahuje adresu zdrojových dat v&nbsp;ROM)
        BANZ    MOVTBL     ; test na nulovost registru AR0/AR1, skok a dekrementace, pokud se nedosáhlo nuly
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Digital Signal Processors (stránky TI)<br />
<a href="http://www.ti.com/lsds/ti/processors/dsp/overview.page">http://www.ti.com/lsds/ti/processors/dsp/overview.page</a>
</li>

<li>Introduction to DSP<br />
<a href="http://www.ti.com/lit/wp/spry281/spry281.pdf">http://www.ti.com/lit/wp/spry281/spry281.pdf</a>
</li>

<li>The Evolution of TMS (Family of DSPs)<br />
<a href="http://www.slideshare.net/moto_modx/theevo1">http://www.slideshare.net/moto_modx/theevo1</a>
</li>

<li>Datasheet k TMS32010<br />
<a href="http://www.datasheetarchive.com/dlmain/49326c32a52050140abffe6f0ac4894aa09889/M/TMS32010">http://www.datasheetarchive.com/dlmain/49326c32a52050140abffe6f0ac4894aa09889/M/TMS32010</a>
</li>

<li>1979: Single Chip Digital Signal Processor Introduced<br />
<a href="http://www.computerhistory.org/siliconengine/single-chip-digital-signal-processor-introduced/">http://www.computerhistory.org/siliconengine/single-chip-digital-signal-processor-introduced/</a>
</li>

<li>The TMS32010. The DSP chip that changed the destiny of a semiconductor giant<br />
<a href="http://www.tihaa.org/historian/TMS32010-12.pdf">http://www.tihaa.org/historian/TMS32010-12.pdf</a>
</li>

<li>Texas Instruments TMS320 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Texas_Instruments_TMS320">https://en.wikipedia.org/wiki/Texas_Instruments_TMS320</a>
</li>

<li>Great Microprocessors of the Past and Present: Part IX: Signetics 8x300, Early cambrian DSP ancestor (1978):<br />
<a href="http://www.cpushack.com/CPU/cpu2.html#Sec2Part9">http://www.cpushack.com/CPU/cpu2.html#Sec2Part9</a>
</li>

<li>Great Microprocessors of the Past and Present (V 13.4.0)<br />
<a href="http://jbayko.sasktelwebsite.net/cpu.html">http://jbayko.sasktelwebsite.net/cpu.html</a>
</li>

<li>Introduction to DSP - DSP processors:<br />
<a href="http://www.bores.com/courses/intro/chips/index.htm">http://www.bores.com/courses/intro/chips/index.htm</a>
</li>

<li>The Scientist and Engineer's Guide to Digital Signal Processing:<br />
<a href="http://www.dspguide.com/">http://www.dspguide.com/</a>
</li>

<li>Digital signal processor (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Digital_signal_processor">http://en.wikipedia.org/wiki/Digital_signal_processor</a>
</li>

<li>Digitální signálový procesor (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Digitální_signálový_procesor">http://cs.wikipedia.org/wiki/Digitální_signálový_procesor</a>
</li>

<li>Digital Signal Processing FAQs<br />
<a href="http://dspguru.com/dsp/faqs">http://dspguru.com/dsp/faqs</a>
</li>

<li>Reprezentace numerických hodnot ve formátech FX a FP<br />
<a href="http://www.root.cz/clanky/fixed-point-arithmetic/">http://www.root.cz/clanky/fixed-point-arithmetic/</a>
</li>

<li>IEEE 754 a její příbuzenstvo: FP formáty<br />
<a href="http://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/">http://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/</a>
</li>

<li>Čtyři základní způsoby uložení čísel pomocí FX formátů<br />
<a href="http://www.root.cz/clanky/binarni-reprezentace-numerickych-hodnot-v-fx-formatu/">http://www.root.cz/clanky/binarni-reprezentace-numerickych-hodnot-v-fx-formatu/</a>
</li>

<li>Základní aritmetické operace prováděné v FX formátu<br />
<a href="http://www.root.cz/clanky/zakladni-aritmeticke-operace-provadene-ve-formatu-fx/">http://www.root.cz/clanky/zakladni-aritmeticke-operace-provadene-ve-formatu-fx/</a>
</li>

<li>Aritmetické operace s hodnotami uloženými ve formátu FP<br />
<a href="http://www.root.cz/clanky/aritmeticke-operace-s-hodnotami-ve-formatu-plovouci-radove-carky/">http://www.root.cz/clanky/aritmeticke-operace-s-hodnotami-ve-formatu-plovouci-radove-carky/</a>
</li>

<li>FIR Filter FAQ<br />
<a href="http://dspguru.com/dsp/faqs/fir">http://dspguru.com/dsp/faqs/fir</a>
</li>

<li>Finite impulse response (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Finite_impulse_response">http://en.wikipedia.org/wiki/Finite_impulse_response</a>
</li>

<li>DSPRelated<br />
<a href="http://www.dsprelated.com/">http://www.dsprelated.com/</a>
</li>

<li>Addressing mode (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Addressing_mode">https://en.wikipedia.org/wiki/Addressing_mode</a>
</li>

<li>Orthogonal instruction set<br />
<a href="https://en.wikipedia.org/wiki/Orthogonal_instruction_set">https://en.wikipedia.org/wiki/Orthogonal_instruction_set</a>
</li>

<li>TI 16-bit and 32-bit microcontrollers<br />
<a href="http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/overview.page">http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/overview.page</a>
</li>

<li>TMS 32010 Assembly Language Programmer's Guide (kniha na Amazonu)<br />
<a href="https://www.amazon.com/32010-Assembly-Language-Programmers-Guide/dp/0904047423">https://www.amazon.com/32010-Assembly-Language-Programmers-Guide/dp/0904047423</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

