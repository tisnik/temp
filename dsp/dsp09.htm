<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Instrukční soubor digitálních signálových procesorů řady Motorola 56000</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Instrukční soubor digitálních signálových procesorů řady Motorola 56000</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Po popisu funkčních modulů, z&nbsp;nichž jsou sestaveny digitální signálové procesory Motorola 56000, se zaměříme na instrukční soubor těchto čipů. Zjistíme, zda se tvůrcům instrukční sady skutečně podařilo navrhnout soubor instrukcí vhodných pro rychlé zpracování signálů (smyčky, speciální typy adresování).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Instrukční soubor digitálních signálových procesorů řady Motorola 56000</a></p>
<p><a href="#k02">2. PCU a AGU</a></p>
<p><a href="#k03">3. Programový čítač a zásobník návratových adres</a></p>
<p><a href="#k04">4. Speciální registry používané pro implementaci programových smyček</a></p>
<p><a href="#k05">5. Registr s&nbsp;příznakovými bity</a></p>
<p><a href="#k06">6. AGU a registry používané pro adresování operandů</a></p>
<p><a href="#k07">7. Adresovací režimy</a></p>
<p><a href="#k08">8. Instrukční soubor DSP Motorola 56000</a></p>
<p><a href="#k09">9. Aritmetické instrukce</a></p>
<p><a href="#k10">10. Logické instrukce</a></p>
<p><a href="#k11">11. Manipulace s&nbsp;jednotlivými bity</a></p>
<p><a href="#k12">12. Instrukce pro programové smyčky</a></p>
<p><a href="#k13">13. Řízení běhu programu</a></p>
<p><a href="#k14">14. Instrukce pro přenosy dat</a></p>
<p><a href="#k15">15. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Instrukční soubor digitálních signálových procesorů řady Motorola 56000</h2>

<p>Na <a
href="https://www.root.cz/clanky/digitalni-signalove-procesory-rady-motorola-56000/">popis
interní struktury a základních funkčních modulů</a> digitálního signálového
procesoru Motorola 56000 dnes navážeme, protože se budeme zabývat instrukčním
souborem tohoto úspěšného a doposud používaného čipu. Nejdříve se však budeme
muset zmínit o některých dalších funkčních blocích Motoroly 56000, protože
právě tyto bloky slouží pro řízení celého čipu a mají tedy velký vliv na to,
jak vlastně vypadá instrukční sada a jaké instrukce a adresovací režimy může
obsahovat.</p>

<p>Podívejme se na blokové schéma DSP Motorola 56000:</p>

<a href="http://i.iinfo.cz/images/415/pc79-2.png"><img src="http://i.iinfo.cz/images/415/pc79-2-prev.png" alt="pc79" height="246" width="370" /></a>
<p><i>Obrázek 1: Blokové schéma digitálního signálového procesoru Motorola
56000.</i></p>

<p>Stejný obrázek jsme si ukazovali již minule, ovšem to jsme se zajímali
především o sběrnice (čtyři vodorovné šipky umístěné přibližně uprostřed),
trojici paměťových bloků (vpravo nahoře) a taktéž o aritmeticko-logickou
jednotku a násobičku (vpravo dole). Dnes si popíšeme bloky <strong>PCU</strong>
(<strong>Program Control Unit</strong>, zobrazený vlevo dole) a
<strong>AG</strong>U (<strong>Address Generation Unit</strong>, umístěn nad
sběrnicemi), které vlastně zabezpečují funkci řadiče celého procesoru.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. PCU a AGU</h2>


<p>Bloky (či moduly) <strong>PCU</strong> a <strong>AGU</strong> mají
následující význam:</p>

<ul>

<li><strong>Program Control Unit</strong> neboli <strong>PCU</strong> je modul,
který se primárně stará o vytváření adres instrukcí posílaných na sběrnici
<strong>PDB</strong>, o níž jsme se již zmínili minule. Když se zamyslíme nad
tím, jak se (i na běžných mikroprocesorech) generují adresy instrukcí, velmi
přesně odhadneme, co tento modul obsahuje. V&nbsp;první řadě je to programový
čítač (<strong>PC</strong>), dále zásobník návratových adres, ale i registr
s&nbsp;příznakovými bity, protože u podmíněných skoků záleží generování adresy
další instrukce právě na kombinaci příznaků. Nalezneme zde i další registry
sloužící pro implementaci programových smyček.</li>

<li><strong>Address Generation Unit</strong> neboli <strong>AGU</strong> je
taktéž modul určený primárně pro generování adres, ovšem v&nbsp;tomto případě
se jedná o adresy operandů uložených v&nbsp;paměťovém bloku X či Y a posílaných
přes sběrnice <strong>XDB</strong> a <strong>YDB</strong>. Adresování operandů
se v&nbsp;mnoha ohledech odlišuje od adresování instrukcí, protože
v&nbsp;oblasti DSP potřebujeme používat &bdquo;kruhové adresování&ldquo; (filtr
omezené délky) či speciální adresování pro rychlou Fourierovu
transformaci.</li>

</ul>



<p><a name="k03"></a></p>
<h2 id="k03">3. Programový čítač a zásobník návratových adres</h2>

<p>Nejprve si ve stručnosti popíšeme blok <strong>PCU (Program Control
Unit)</strong>. Tento blok je propojen s&nbsp;adresovými sběrnicemi
<strong>PAB</strong> a <strong>PDB</strong> i s&nbsp;univerzální sběrnicí
<strong>GDB</strong>. Dále do tohoto bloku vstupují další důležité signály,
především hodiny a několik signálů oznamujících přerušení. Navíc tento blok
obsahuje vlastní řídicí logiku a několik speciálních registrů. Základem
prakticky každého procesoru je <strong>PC</strong> neboli programový čítač
(<i>Program Counter</i>). Ten má v&nbsp;případě Motoroly 56000 šířku šestnácti
bitů, což omezuje maximální velikost programového kódu. Z&nbsp;hlediska
programátora se však jedná o 24bitový registr, neboť při přenosu dat se
používají operandy o plné šířce 24 bitů (horních osm bitů je však v&nbsp;PCU
ignorováno, což zaručuje dopřednou kompatibilitu, při čtení těchto osm bitů
obsahuje nuly).</p>

<p>Kromě programového čítače nalezneme v&nbsp;tomto bloku i sadu patnácti
registrů tvořících zásobník návratových adres. Toto označení však ve
skutečnosti není příliš přesné, protože každý z&nbsp;těchto registrů má šířku
32 bitů a obsahuje kromě šestnáctibitové návratové adresy i hodnotu příznaků ve
chvíli, kdy došlo k&nbsp;uložení informace do zásobníku. Jedná se vlastně o
velmi elegantní řešení přerušovacích rutin, v&nbsp;nichž je uložení příznaků a
na konci jejich obnovení provedeno &bdquo;zadarmo&ldquo;. Se zásobníkem souvisí
i další speciální registr nazvaný <strong>SP</strong> ukazující na vrchol
zásobníku (<i>Stack Pointer</i>).  S&nbsp;tímto registrem se většinou pracuje
pouze nepřímo.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Speciální registry používané pro implementaci programových smyček</h2>

<p>V&nbsp;bloku PCU nalezneme i dva speciální registry určené pro efektivní
implementaci programových smyček; typicky smyček tvořících jádra číslicových
filtrů. Tyto dva registry se jmenují <strong>LA</strong> a <strong>LC</strong>.
Registr <strong>LA</strong> obsahuje adresu poslední instrukce tvořící
programovou smyčku (adresa první instrukce je přitom ukládána na zásobník)
zatímco registr <strong>LC</strong> obsahuje počet opakování smyčky.
K&nbsp;této dvojici registrů ještě musíme připočítat <a href="#k05">příznak</a>
nazvaný <strong>LF</strong> (<i>Loop Flag</i>), který je automaticky nastavován
při vstupu do programové smyčky instrukcí <strong>DO</strong>. Ve chvíli, kdy
je tento příznak nastaven, kontroluje PCU, zda se hodnota programového čítače
rovná obsahu registru <strong>LA</strong>. Pokud dojde ke shodě,
tj.&nbsp;nacházíme se na poslední instrukci ve smyčce, je otestováno počitadlo
<strong>LC</strong> na jedničku. V&nbsp;případě, že <strong>LC!=1</strong>, je
hodnota <strong>LC</strong> snížena a <strong>PC</strong> je nastaven na adresu
přečtenu ze zásobníku (tj.&nbsp;provede se skok na začátek smyčky). Dokonce je
možné smyčky vnořovat &ndash; PCU v&nbsp;tomto případě nejdříve uloží všechny
potřebné registry na zásobník.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Registr s&nbsp;příznakovými bity</h2>

<p>Jak jsme si již řekli <a href="#k02">ve druhé kapitole</a>, obsahuje modul
PCU i registr s&nbsp;příznakovými bity. Tento šestnáctibitový registr je
rozdělen na dvě části nazvané <strong>MR</strong> (<i>Mode Register</i>) a
<strong>CCR</strong> (<i>Condition Code Register</i>) tak, jak naznačuje
následující tabulka:</p>

<table>
<tr><th>Bit</th><th>Část</th><th>Označení</th><th>Název</th><th>Stručný popis</th></tr>
<tr><td> 0</td><td>CCR</td><td>C</td><td>Carry</td><td>příznak přenosu při aritmetické operaci</td></tr>
<tr><td> 1</td><td>CCR</td><td>V</td><td>Overflow</td><td>příznak přetečení při aritmetické operaci</td></tr>
<tr><td> 2</td><td>CCR</td><td>Z</td><td>Zero</td><td>příznak nulového výsledku</td></tr>
<tr><td> 3</td><td>CCR</td><td>N</td><td>Negative</td><td>příznak záporného výsledku</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 4</td><td>CCR</td><td>U</td><td>Unnormalized</td><td>nenormalizovaný výsledek poslední operace</td></tr>
<tr><td> 5</td><td>CCR</td><td>E</td><td>Extension</td><td>výsledek poslední operace nepřekročil binární tečku</td></tr>
<tr><td> 6</td><td>CCR</td><td>L</td><td>Limit</td><td>překročení maximální či minimální hodnoty (8 bitů před tečkou)</td></tr>
<tr><td> 7</td><td>CCR</td><td>S</td><td>Scaling</td><td>typicky použito při výpočtu FFT</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>MR </td><td>I0</td><td>Interrupt mask</td><td>maska přerušení</td></tr>
<tr><td> 9</td><td>MR </td><td>I1</td><td>Interrupt mask</td><td>maska přerušení</td></tr>
<tr><td>10</td><td>MR </td><td>S0</td><td>Scaling mode</td><td>režim změny měřítka (viz další tabulka)</td></tr>
<tr><td>11</td><td>MR </td><td>S1</td><td>Scaling mode</td><td>režim změny měřítka (viz další tabulka)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>MR </td><td>* </td><td>Reserved</td><td>rezervováno</td></tr>
<tr><td>13</td><td>MR </td><td>T</td><td>Trace mode</td><td>režim ladění</td></tr>
<tr><td>14</td><td>MR </td><td>DM</td><td>Double precision</td><td>volba režimu násobení</td></tr>
<tr><td>15</td><td>MR </td><td>LF</td><td>Loop Flag</td><td>provádí se programová smyčka (viz <a href="#k04">předchozí kapitolu</a>)</td></tr>
</table>

<p>Bity <strong>S0</strong> a <strong>S1</strong> ovlivňují konverzi hodnot
<i>shifterem</i> při ukládání akumulátorů zpět do paměti (na čtvrtém obrázku se
jedná o dolní shifter):</p>

<table>
<tr><th>S1</th><th>S0</th><th>Operace</th></tr>
<tr><td>0</td><td>0</td><td>hodnoty se jen zkopírují</td></tr>
<tr><td>0</td><td>1</td><td><i>scale down</i>, posun doprava o jeden bit</td></tr>
<tr><td>1</td><td>0</td><td><i>scale up</i>, posun doleva o jeden bit</td></tr>
<tr><td>1</td><td>1</td><td>prozatím rezervováno</td></tr>
</table>

<img src="https://i.iinfo.cz/images/603/motorola56000-2.png" class="image-279202" alt="&#160;" width="386" height="671" />
<p><i>Obrázek 2: Akumulátory (zvýrazněné modrou barvou) jsou připojeny
k&nbsp;výstupu z&nbsp;aritmeticko-logické jednotky. Dále je možné do
akumulátorů zapisovat data přímo z&nbsp;datových sběrnic. Z&nbsp;akumulátorů si
operandy čte ALU, a to jak přímo, tak i přes shifter. Zápis zpět do paměti se
provádí vždy přes shifter/limiter, který zajistí konverzi dat podle nastavení
bitů <strong>S0</strong> a <strong>S1</strong>.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. AGU a registry používané pro adresování operandů</h2>

<p>Druhým důležitým blokem ovlivňujícím instrukční sadu digitálních signálových
procesorů Motorola 56000 je blok pojmenovaný <strong>Address Generation
Unit</strong> neboli <strong>AGU</strong>. Tento blok slouží pro tvorbu adres
použitých pro čtení vstupních operandů popř.&nbsp;pro zápis výsledků
vypočtených v&nbsp;násobičce a aritmeticko-logické jednotce. Pro tyto účely
obsahuje <strong>AGU</strong> vlastní sadu dvaceti čtyř registrů, které se na
tvorbě adres podílí (designéři 56000 evidentně na registrech nešetřili, což
ostatně souvisí se zaměřením tohoto DSP na co nejlepší využití ALU a
násobičky). Všechny tyto registry, které jsou rozděleny do dvou samostatně
pracujících skupin, jsou vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>Ukazatele</th><th>Offsety</th><th>Modifikátory</th></tr>
<tr><td>R0</td><td>N0</td><td>M0</td></tr>
<tr><td>R1</td><td>N1</td><td>M1</td></tr>
<tr><td>R2</td><td>N2</td><td>M2</td></tr>
<tr><td>R3</td><td>N3</td><td>M3</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>R4</td><td>N4</td><td>M4</td></tr>
<tr><td>R5</td><td>N5</td><td>M5</td></tr>
<tr><td>R6</td><td>N6</td><td>M6</td></tr>
<tr><td>R7</td><td>N7</td><td>M7</td></tr>
</table>

<p>Všechny zmíněné registry mají šířku šestnáct bitů, z&nbsp;čehož opět
vyplývají omezení na maximální kapacitu paměti, tentokrát paměti datové (ta je
ovšem rozdělena na dva bloky a šířka dat je 24 bitů, takže se nejedná o omezení
na pouhých 64 KB, ale na šestinásobek). U některých adresovacích režimů je
nutné vybrat pouze ukazatel, tedy registr <strong>Rn</strong>. Registr
s&nbsp;offsetem bude v&nbsp;takovém případě mít jméno <strong>Nn</strong> a
modifikátor bude mít jméno <strong>Mn</strong>, přičemž <strong>n</strong> bude
vždy stejná hodnota. Význam jednotlivých registrů lze shrnout takto:</p>

<ul>

<li>Registry <strong>R0</strong> až <strong>R7</strong> obsahují adresu
zdrojového či cílového operandu. Tyto registry mohou být v&nbsp;závislosti na
použitém adresovacím režimu automaticky modifikovány (adresu v&nbsp;nich
uloženou lze zvýšit či naopak snížit, a to v&nbsp;rámci jediné instrukce).</li>

<li>Registry <strong>N0</strong> až <strong>N7</strong> obsahují konstantu, o
kterou se ve vybraných adresovacích režimech zvýší či sníží hodnota uložená
v&nbsp;adresních registrech <strong>R0</strong> až <strong>R7</strong>. Kromě
toho lze vždy použít konstantu 1 či -1 (inkrementace, dekrementace). Tyto
registry taktéž slouží jako běžné offsetové registry (viz <a
href="#k07">navazující</a> kapitolu).</li>

<li>Registry <strong>M0</strong> až <strong>M7</strong> obsahují konstantu
použitou v&nbsp;těch případech, kdy je vyžadováno použití cyklického
adresování, například při použití jader číslicových filtrů nebo při
implementaci fronty (FIFO). Opět platí, že obsah těchto registrů je použit jen
v&nbsp;některých adresovacích režimech.</li>

</ul>



<p><a name="k07"></a></p>
<h2 id="k07">7. Adresovací režimy</h2>

<p>V&nbsp;assembleru digitálních signálových procesorů Motorola 56000 je možné
použít následující adresní režimy určené pro čtení operandů z&nbsp;vybraného
paměťového bloku (X, Y) či naopak pro zápis výsledku zpět. Pro jednoduchost si
jejich použití ukážeme na instrukci <strong>MOVE</strong> určené pro přenosy
dat:</p>

<table>
<tr><th>Instrukce</th><th>Význam</th></tr>
<tr><td>MOVE A0, X:$1234</td><td>absolutní adresa v&nbsp;paměťovém bloku X</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>MOVE A0, X:(R7)</td><td>efektivní adresa je uložena v&nbsp;R7, paměťový blok X</td></tr>
<tr><td>MOVE B0, X:(R6)</td><td>efektivní adresa je uložena v&nbsp;R6, paměťový blok X</td></tr>
<tr><td>MOVE A1, X:(R6)</td><td>efektivní adresa je uložena v&nbsp;R5, paměťový blok X</td></tr>
<tr><td>MOVE B1, X:(R5)</td><td>efektivní adresa je uložena v&nbsp;R4, paměťový blok X</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>MOVE A0, Y:(R0)</td><td>efektivní adresa je uložena v&nbsp;R0, paměťový blok Y</td></tr>
<tr><td>MOVE A1, Y:(R0)</td><td>efektivní adresa je uložena v&nbsp;R0, paměťový blok Y</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>MOVE A1, Y:(R0)+</td><td>dtto, ale registr R0 se <strong>po</strong> zápisu zvýší o jedničku (<i>postincrement</i>)</td></tr>
<tr><td>MOVE A1, Y:(R0)-</td><td>dtto, ale registr R0 se <strong>po</strong> zápisu sníží o jedničku (<i>postdecrement</i>)</td></tr>
<tr><td>MOVE A1, Y:-(R0)</td><td>dtto, ale registr R0 se <strong>před</strong> zápisem sníží o jedničku (<i>predecrement</i>)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>MOVE A1, Y:(R0)+N0</td><td>dtto, ale registr R0 se po zápisu zvýší o hodnotu uloženou v&nbsp;registru N0</td></tr>
<tr><td>MOVE A1, Y:(R0)-N0</td><td>dtto, ale registr R0 se po zápisu sníží o hodnotu uloženou v&nbsp;registru N0</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>MOVE A1, Y:(R5+N5)</td><td>efektivní adresa je vypočtena součtem R5+N5 (běžná funkce offsetového registru)</td></tr>
</table>

<p>U těch režimů, v&nbsp;nichž se modifikuje adresa uložená v&nbsp;registru
<strong>Rn</strong>, je možné použít &bdquo;modulo&ldquo; registr
<strong>Mn</strong>, jehož obsah má tento význam:</p>

<table>
<tr><th>Mn=</th><th>Význam</th></tr>
<tr><td>0xffff</td><td>normální (lineární) adresování</td></tr>
<tr><td>0x0001 až 0x7fff</td><td>adresování modulo (modulo 2 až modulo 32768, hodnota &bdquo;modulo&ldquo; je tedy o jedničku vyšší)</td></tr>
<tr><td>0x0000</td><td>&bdquo;reverse carry&ldquo; adresování, carry bit je propagován od horních bitů adresy k&nbsp;bitům spodním, lze použít pro FFT atd.</td></tr>
<tr><td>0x8000 až 0xfffe</td><td>(jen sudé hodnoty), rezervováno</td></tr>
<tr><td>0x8001 až 0xfffd</td><td>(jen liché hodnoty), taktéž adresování modulo</td></tr>
</table>



<p><a name="k08"></a></p>
<h2 id="k08">8. Instrukční soubor DSP Motorola 56000</h2>

<p>V&nbsp;následujících šesti kapitolách si stručně popíšeme celý instrukční
soubor digitálního signálového procesoru Motorola 56000. Instrukce se rozdělují
do šesti skupin:</p>

<table>
<tr><td><a href="#k09">Aritmetické instrukce</a></td></tr>
<tr><td><a href="#k10">Logické instrukce</a></td></tr>
<tr><td><a href="#k11">Manipulace s&nbsp;jednotlivými bity</a></td></tr>
<tr><td><a href="#k12">Instrukce pro programové smyčky</a></td></tr>
<tr><td><a href="#k13">Řízení běhu programu</a></td></tr>
<tr><td><a href="#k14">Instrukce pro přenosy dat</a></td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Aritmetické instrukce</h2>

<p>Aritmetické instrukce mohou být kombinovány s&nbsp;přenosem dat po jedné
z&nbsp;datových sběrnic, což znamená, že v&nbsp;průběhu výpočtu je možné si
předpřipravit operandy pro další instrukci. Aritmetické instrukce mohou
ovlivnit příznakové bity CCR (Carry, Zero atd.) a všechny instrukce jsou
prováděny v&nbsp;násobičce, sčítačce a paralelně běžící ALU:</p>

<img src="https://i.iinfo.cz/images/603/motorola56000-3.png" class="image-279203" alt="&#160;" width="600" height="442" />
<p><i>Obrázek 3: Struktura ALU (žluté bloky + zelená sčítačka).</i></p>

<p>Následuje seznam aritmetických instrukcí:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>ABS </td><td>absolutní hodnota operandu</td></tr>
<tr><td>ADC </td><td>součet s&nbsp;carry</td></tr>
<tr><td>ADD </td><td>součet</td></tr>
<tr><td>ADDL</td><td>bitový posun doleva a součet</td></tr>
<tr><td>ADDR</td><td>bitový posun doprava a součet</td></tr>
<tr><td>ASL </td><td>aritmetický posun doleva</td></tr>
<tr><td>ASR </td><td>aritmetický posun doprava</td></tr>
<tr><td>CLR </td><td>vynulování operandu</td></tr>
<tr><td>CMP </td><td>porovnání</td></tr>
<tr><td>CMPM</td><td>porovnání</td></tr>
<tr><td>DEC </td><td>snížení operandu o jedničku</td></tr>
<tr><td>DIV </td><td>dělení (jen jedna iterace, je nutné opakovat podle požadované přesnosti)</td></tr>
<tr><td>INC </td><td>zvýšení operandu o jedničku</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>MAC </td><td>operace multiply-accumulate</td></tr>
<tr><td>MACR</td><td>operace multiply-accumulate se zaokrouhlením</td></tr>
<tr><td>MPY </td><td>násobení</td></tr>
<tr><td>MPYR</td><td>násobení se zaokrouhlením</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>NEG </td><td>negace akumulátoru</td></tr>
<tr><td>NORM</td><td>normalizace operandu</td></tr>
<tr><td>RND </td><td>zaokrouhlení</td></tr>
<tr><td>SBC </td><td>rozdíl s&nbsp;carry</td></tr>
<tr><td>SUB </td><td>rozdíl</td></tr>
<tr><td>SUBL</td><td>bitový posun doleva a rozdíl</td></tr>
<tr><td>SUBR</td><td>bitový posun doprava a rozdíl</td></tr>
<tr><td>Tcc </td><td>přenos (při splněné podmínce)</td></tr>
<tr><td>TFR </td><td>jen přenos dat</td></tr>
<tr><td>TST </td><td>test akumulátoru a nastavení příznaků</td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Logické instrukce</h2>

<p>Taktéž logické instrukce se provádí v&nbsp;datové ALU a mohou nastavit
(měnit) příznakové bity. Jedinou výjimku tvoří poslední dvě instrukce, které
slouží pro provedení logické operace mezi konstantou a řídicím registrem:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>NOT </td><td>bitová negace</td></tr>
<tr><td>AND </td><td>logický součin</td></tr>
<tr><td>OR  </td><td>logický součet</td></tr>
<tr><td>EOR </td><td>logická noekvivalence</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>ROL </td><td>rotace operandu doleva</td></tr>
<tr><td>ROR </td><td>rotace operandu doprava</td></tr>
<tr><td>LSL </td><td>logický posun doleva</td></tr>
<tr><td>LSR </td><td>logický posun doprava</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>ANDI</td><td>logický součin mezi konstantou a řídicím regisrem</td></tr>
<tr><td>ORI </td><td>logický součet mezi konstantou a řídicím regisrem</td></tr>
</table>



<p><a name="k11"></a></p>
<h2 id="k11">11. Manipulace s&nbsp;jednotlivými bity</h2>

<p>Další čtyři instrukce slouží pro otestování aktuální hodnoty vybraného bitu
v&nbsp;paměti nebo registru a popř.&nbsp;pro vynulování, nastavení či inverzi
tohoto bitu. Výsledek testu je uložen do příznakového bitu <i>Carry</i> ve
stavovém registru, takže ho lze ihned použít, například pro provedení
podmíněného skoku apod.:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>BTST</td><td>jen test bitu</td></tr>
<tr><td>BCLR</td><td>test bitu + jeho následné vynulování</td></tr>
<tr><td>BSET</td><td>test bitu + jeho následné nastavení na jedničku</td></tr>
<tr><td>BCHG</td><td>test bitu + jeho následná inverze</td></tr>
</table>

<p>Poznámka: ještě sem logicky patří instrukce <strong>JCLR</strong> a
<strong>JSET</strong> popsané dále.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Instrukce pro programové smyčky</h2>

<p>Jedná se o nejzajímavější skupinu instrukcí optimalizovaných pro
implementaci <a href="#k04">počítaných programových smyček</a>:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>DO</td><td>začátek programové smyčky</td></tr>
<tr><td>ENDDO</td><td>explicitní opuštění smyčky (nahrazuje <strong>BREAK</strong>)</td></tr>
</table>

<p>Způsob zápisu smyčky:</p>

<pre>
DO #počet_opakování, návěští_poslední_instrukce
</pre>

<p>Popř.:</p>

<pre>
DO registr_obsahující_počet_opakování, návěští_poslední_instrukce
</pre>

<p>Instrukce <strong>DO</strong> provede následující kroky (většinu
paralelně):</p>

<ol>
<li>Registry <strong>LA</strong> a <strong>LC</strong> jsou uloženy na zásobník (smyčky lze vnořovat).</li>
<li>Do registru <strong>LC</strong> se uloží počet opakování smyčky.</li>
<li>Aktuální hodnota <strong>PC</strong> (začátek smyčky) se uloží na zásobník společně se stavovým registrem.</li>
<li>Do registru <strong>LA</strong> se uloží adresa konce smyčky.</li>
<li>Nastaví se příznakový bit <strong>LF</strong> ve stavovém registru.</li>
</ol>

<p>Způsob zápisu vnořených smyček:</p>

<pre>
            DO #1234, END_LOOP_1
            ...
            ...
            ...
            DO #5678, END_LOOP_2
            ...
            ...
            ...
END_LOOP_2: ...
            ...
            ...
            ...
END_LOOP_1: ...
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Řízení běhu programu</h2>

<p>Zbývající skupina instrukcí slouží pro řízení běhu programu a taktéž pro
přepínání stavu mikroprocesoru (ladicí režim, režim nízké spotřeby atd.):</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>JMP</td><td>nepodmíněný skok</td></tr>
<tr><td>Jcc</td><td>podmíněný skok</td></tr>
<tr><td>JCLR </td><td>skok pokud je vybraný bit nulový</td></tr>
<tr><td>JSET </td><td>skok pokud je vybraný bit nastavený na jedničku</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>JSR  </td><td>skok do podprogramu</td></tr>
<tr><td>JScc </td><td>kombinace Jcc + JSR</td></tr>
<tr><td>JSCLR</td><td>kombinace JCLR + JSR</td></tr>
<tr><td>JSSET</td><td>kombinace JSET + JSR</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>RTS  </td><td>návrat z&nbsp;podprogramu</td></tr>
<tr><td>RTI  </td><td>návrat z&nbsp;přerušovací rutiny</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>DEBUG  </td><td>vstup do ladicího režimu</td></tr>
<tr><td>DEBUGcc</td><td>vstup do ladicího režimu při splnění podmínky</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>NOP  </td><td>prázdná operace</td></tr>
<tr><td>REP  </td><td>opakování další instrukce</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>RESET</td><td>reset periferních zařízení</td></tr>
<tr><td>SWI  </td><td>softwarové přerušení</td></tr>
<tr><td>STOP </td><td>přepnutí do stavu snížené spotřeby</td></tr>
<tr><td>WAIT </td><td>čekání na přerušení ve stavu snížené spotřeby</td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Přenosy dat</h2>

<p>Pro veškeré přenosy zpracovávaných dat (nikoli instrukčních kódů) se
používají sběrnice XDB, YDB a GDB, které jsme si již popsali minule.
S&nbsp;instrukcí <strong>MOVE</strong> jsme se již seznámili v&nbsp;kapitole o
adresování, ovšem existují i další instrukce určené pro přenosy dat mezi pamětí
a různými typy registrů. Instrukce přenášející data z&nbsp;akumulátorů mohou
nastavit příznakové bity S a L:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>LUA  </td><td>načtení a úprava adresy, odpovídá instrukci LEA z&nbsp;jiných typů mikroprocesorů</td></tr>
<tr><td>MOVE </td><td>přenos mezi datovými registry (včetně akumulátorů)</td></tr>
<tr><td>MOVEC</td><td>přenos mezi řídicími registry</td></tr>
<tr><td>MOVEM</td><td>přenos z&nbsp;paměti programu či do paměti programu (pokud se nejedná o boot blok)</td></tr>
<tr><td>MOVEP</td><td>přenos dat z/do periferních zařízení</td></tr>
</table>

<p>Poznámka: přenosy mohou být součástí běžných aritmetických instrukcí, potom
se provádí paralelně:</p>

<pre>
ADD X0,A    X0, X:(R3)+
</pre>

<p>Tento zápis znamená paralelní provedení těchto kroků:</p>

<ul>
<li>součet X0+A</li>
<li>uložení výsledku do akumulátoru A</li>
<li>přenos registru X0 do paměťového regionu X na adresu R3</li>
<li>Registr R3 je zvýšen o jedničku (po uložení X0)</li>
</ul>

<p>Povšimněte si, že se zde používají tři různé typy registrů:
<strong>X0</strong> je umístěn před násobičkou, <strong>A</strong> je
akumulátor a R3 je adresový registr.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Odkazy na Internetu</h2>

<ol>

<li>Motorola DSP56k<br />
<a href="https://www.rockbox.org/wiki/MotorolaDSP56k">https://www.rockbox.org/wiki/MotorolaDSP56k</a>
</li>

<li>Motorola 56000 (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Motorola_56000">http://en.wikipedia.org/wiki/Motorola_56000</a>
</li>

<li>Using the Motorola DSP56002EVM for Amateur Radio DSP Projects<br />
<a href="http://www.johanforrer.net/EVM/article.html">http://www.johanforrer.net/EVM/article.html</a>
</li>

<li>The Atari Falcon030 "Personal Integrated Media System"<br />
<a href="http://www.atarimuseum.com/computers/16bits/falcon030.html">http://www.atarimuseum.com/computers/16bits/falcon030.html</a>
</li>

<li>Turtle Beach Corporation (stránky společnosti)<br />
<a href="http://www.turtlebeach.com/">http://www.turtlebeach.com/</a>
</li>

<li>Turtle Beach Corporation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Turtle_Beach_Corporation">https://en.wikipedia.org/wiki/Turtle_Beach_Corporation</a>
</li>

<li>Atari Falcon 030 DSP 3D engine test<br />
<a href="http://www.digiti.info/video/WHQwMjNRaExfLWs=/atari_falcon_030_dsp_3d_engine_test">http://www.digiti.info/video/WHQwMjNRaExfLWs=/atari_falcon_030_dsp_3d_engine_test</a>
</li>

<li>Atari Falcon030 (německy)<br />
<a href="http://www.maedicke.de/atari/hardware/falcon.htm">http://www.maedicke.de/atari/hardware/falcon.htm</a>
</li>

<li>Old-computers.com: Atari Falcon030<br />
<a href="http://www.old-computers.com/museum/computer.asp?c=125&st=1">http://www.old-computers.com/museum/computer.asp?c=125&st=1</a>
</li>

<li>Atari Falcon030 (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Atari_Falcon">http://en.wikipedia.org/wiki/Atari_Falcon</a>
</li>

<li>Past and current projects (including Falcon stuff)<br />
<a href="http://os.inf.tu-dresden.de/~nf2/projects/projects.html">http://os.inf.tu-dresden.de/~nf2/projects/projects.html</a>
</li>

<li>Atari Falcon 030: The Case For The Defence<br />
<a href="http://www.soundonsound.com/sos/1994_articles/sep94/atarifalcon.html">http://www.soundonsound.com/sos/1994_articles/sep94/atarifalcon.html</a>
</li>

<li>DaVinci processor family<br />
<a href="http://www.ti.com/general/docs/datasheetdiagram.tsp?genericPartNumber=TMS320DM365&diagramId=64193">http://www.ti.com/general/docs/datasheetdiagram.tsp?genericPartNumber=TMS320DM365&diagramId=64193</a>
</li>

<li>Texas Instruments DaVinci<br />
<a href="https://en.wikipedia.org/wiki/Texas_Instruments_DaVinci">https://en.wikipedia.org/wiki/Texas_Instruments_DaVinci</a>
</li>

<li>TMS320DM6446 (DaVinci)<br />
<a href="http://www.ti.com/product/tms320dm6446">http://www.ti.com/product/tms320dm6446</a>
</li>

<li>Digital Media Video Processors (TI)<br />
<a href="http://www.ti.com/lsds/ti/processors/dsp/media_processors/davinci/products.page#">http://www.ti.com/lsds/ti/processors/dsp/media_processors/davinci/products.page#</a>
</li>

<li>TI Wiki<br />
<a href="http://processors.wiki.ti.com/index.php/Main_Page">http://processors.wiki.ti.com/index.php/Main_Page</a>
</li>

<li>C5000 ultra-low-power DSP<br />
<a href="http://www.ti.com/lsds/ti/processors/dsp/c5000_dsp/overview.page">http://www.ti.com/lsds/ti/processors/dsp/c5000_dsp/overview.page</a>
</li>

<li>OMAP (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/OMAP">https://en.wikipedia.org/wiki/OMAP</a>
</li>

<li>OMAP - TI Wiki<br />
<a href="http://processors.wiki.ti.com/index.php/OMAP">http://processors.wiki.ti.com/index.php/OMAP</a>
</li>

<li>Why OMAP can't compete in smartphones<br />
<a href="http://www.eetimes.com/author.asp?section_id=40&doc_id=1286602">http://www.eetimes.com/author.asp?section_id=40&doc_id=1286602</a>
</li>

<li>Applications Processors – The Heart of the Smartphone<br />
<a href="http://www.engineering.com/ElectronicsDesign/ElectronicsDesignArticles/ArticleID/5791/Applications-Processors-The-Heart-of-the-Smartphone.aspx">http://www.engineering.com/ElectronicsDesign/ElectronicsDesignArticles/ArticleID/5791/Applications-Processors-The-Heart-of-the-Smartphone.aspx</a>
</li>

<li>TI cuts 1,700 jobs in OMAP shift<br />
<a href="http://www.eetimes.com/document.asp?doc_id=1262782">http://www.eetimes.com/document.asp?doc_id=1262782</a>
</li>

<li>VLIW: Very Long Instruction Word: Texas Instruments TMS320C6x<br />
<a href="http://www.ecs.umass.edu/ece/koren/architecture/VLIW/2/ti1.html">http://www.ecs.umass.edu/ece/koren/architecture/VLIW/2/ti1.html</a>
</li>

<li>An Introduction To Very-Long Instruction Word (VLIW) Computer Architecture<br />
Philips Semiconductors
</li>

<li>VLIW Architectures for DSP: A Two-Part Lecture (PDF, slajdy)<br />
<a href="http://www.bdti.com/MyBDTI/pubs/vliw_icspat99.pdf">http://www.bdti.com/MyBDTI/pubs/vliw_icspat99.pdf</a>
</li>

<li>Very long instruction word (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Very_long_instruction_word">https://en.wikipedia.org/wiki/Very_long_instruction_word</a>
</li>

<li>A VLIW Approach to Architecture, Compilers and Tools<br />
<a href="http://www.vliw.org/book/">http://www.vliw.org/book/</a>
</li>

<li>VEX Toolchain (VEX = VLIW Example)<br />
<a href="http://www.hpl.hp.com/downloads/vex/">http://www.hpl.hp.com/downloads/vex/</a>
</li>

<li>Elbrus (computer)<br />
<a href="https://en.wikipedia.org/wiki/Elbrus_%28computer%29">https://en.wikipedia.org/wiki/Elbrus_%28computer%29</a>
</li>

<li>Super Harvard Architecture Single-Chip Computer<br />
<a href="https://en.wikipedia.org/wiki/Super_Harvard_Architecture_Single-Chip_Computer">https://en.wikipedia.org/wiki/Super_Harvard_Architecture_Single-Chip_Computer</a>
</li>

<li>Digital Signal Processors (stránky TI)<br />
<a href="http://www.ti.com/lsds/ti/processors/dsp/overview.page">http://www.ti.com/lsds/ti/processors/dsp/overview.page</a>
</li>

<li>C674x Low Power DSP (stránky TI)<br />
<a href="http://www.ti.com/lsds/ti/processors/dsp/c6000_dsp/c674x/overview.page">http://www.ti.com/lsds/ti/processors/dsp/c6000_dsp/c674x/overview.page</a>
</li>

<li>TMS320C30 (stránky TI)<br />
<a href="http://www.ti.com/product/tms320c30">http://www.ti.com/product/tms320c30</a>
</li>

<li>TMS320C6722B<br />
<a href="http://www.ti.com/product/tms320c6722b/description">http://www.ti.com/product/tms320c6722b/description</a>
</li>

<li>Introduction to DSP<br />
<a href="http://www.ti.com/lit/wp/spry281/spry281.pdf">http://www.ti.com/lit/wp/spry281/spry281.pdf</a>
</li>

<li>The Evolution of TMS (Family of DSPs)<br />
<a href="http://www.slideshare.net/moto_modx/theevo1">http://www.slideshare.net/moto_modx/theevo1</a>
</li>

<li>Datasheet k TMS32010<br />
<a href="http://www.datasheetarchive.com/dlmain/49326c32a52050140abffe6f0ac4894aa09889/M/TMS32010">http://www.datasheetarchive.com/dlmain/49326c32a52050140abffe6f0ac4894aa09889/M/TMS32010</a>
</li>

<li>1979: Single Chip Digital Signal Processor Introduced<br />
<a href="http://www.computerhistory.org/siliconengine/single-chip-digital-signal-processor-introduced/">http://www.computerhistory.org/siliconengine/single-chip-digital-signal-processor-introduced/</a>
</li>

<li>The TMS32010. The DSP chip that changed the destiny of a semiconductor giant<br />
<a href="http://www.tihaa.org/historian/TMS32010-12.pdf">http://www.tihaa.org/historian/TMS32010-12.pdf</a>
</li>

<li>Texas Instruments TMS320 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Texas_Instruments_TMS320">https://en.wikipedia.org/wiki/Texas_Instruments_TMS320</a>
</li>

<li>Great Microprocessors of the Past and Present: Part IX: Signetics 8x300, Early cambrian DSP ancestor (1978):<br />
<a href="http://www.cpushack.com/CPU/cpu2.html#Sec2Part9">http://www.cpushack.com/CPU/cpu2.html#Sec2Part9</a>
</li>

<li>Great Microprocessors of the Past and Present (V 13.4.0)<br />
<a href="http://jbayko.sasktelwebsite.net/cpu.html">http://jbayko.sasktelwebsite.net/cpu.html</a>
</li>

<li>Introduction to DSP - DSP processors:<br />
<a href="http://www.bores.com/courses/intro/chips/index.htm">http://www.bores.com/courses/intro/chips/index.htm</a>
</li>

<li>The Scientist and Engineer's Guide to Digital Signal Processing:<br />
<a href="http://www.dspguide.com/">http://www.dspguide.com/</a>
</li>

<li>Digital signal processor (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Digital_signal_processor">http://en.wikipedia.org/wiki/Digital_signal_processor</a>
</li>

<li>Digitální signálový procesor (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Digitální_signálový_procesor">http://cs.wikipedia.org/wiki/Digitální_signálový_procesor</a>
</li>

<li>Digital Signal Processing FAQs<br />
<a href="http://dspguru.com/dsp/faqs">http://dspguru.com/dsp/faqs</a>
</li>

<li>Reprezentace numerických hodnot ve formátech FX a FP<br />
<a href="http://www.root.cz/clanky/fixed-point-arithmetic/">http://www.root.cz/clanky/fixed-point-arithmetic/</a>
</li>

<li>IEEE 754 a její příbuzenstvo: FP formáty<br />
<a href="http://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/">http://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/</a>
</li>

<li>Čtyři základní způsoby uložení čísel pomocí FX formátů<br />
<a href="http://www.root.cz/clanky/binarni-reprezentace-numerickych-hodnot-v-fx-formatu/">http://www.root.cz/clanky/binarni-reprezentace-numerickych-hodnot-v-fx-formatu/</a>
</li>

<li>Základní aritmetické operace prováděné v FX formátu<br />
<a href="http://www.root.cz/clanky/zakladni-aritmeticke-operace-provadene-ve-formatu-fx/">http://www.root.cz/clanky/zakladni-aritmeticke-operace-provadene-ve-formatu-fx/</a>
</li>

<li>Aritmetické operace s hodnotami uloženými ve formátu FP<br />
<a href="http://www.root.cz/clanky/aritmeticke-operace-s-hodnotami-ve-formatu-plovouci-radove-carky/">http://www.root.cz/clanky/aritmeticke-operace-s-hodnotami-ve-formatu-plovouci-radove-carky/</a>
</li>

<li>FIR Filter FAQ<br />
<a href="http://dspguru.com/dsp/faqs/fir">http://dspguru.com/dsp/faqs/fir</a>
</li>

<li>Finite impulse response (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Finite_impulse_response">http://en.wikipedia.org/wiki/Finite_impulse_response</a>
</li>

<li>DSPRelated<br />
<a href="http://www.dsprelated.com/">http://www.dsprelated.com/</a>
</li>

<li>Addressing mode (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Addressing_mode">https://en.wikipedia.org/wiki/Addressing_mode</a>
</li>

<li>Orthogonal instruction set<br />
<a href="https://en.wikipedia.org/wiki/Orthogonal_instruction_set">https://en.wikipedia.org/wiki/Orthogonal_instruction_set</a>
</li>

<li>TI 16-bit and 32-bit microcontrollers<br />
<a href="http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/overview.page">http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/overview.page</a>
</li>

<li>TMS 32010 Assembly Language Programmer's Guide (kniha na Amazonu)<br />
<a href="https://www.amazon.com/32010-Assembly-Language-Programmers-Guide/dp/0904047423">https://www.amazon.com/32010-Assembly-Language-Programmers-Guide/dp/0904047423</a>
</li>

<li>COSC2425: PC Architecture and Machine Language, PC Assembly Language<br />
<a href="http://www.austincc.edu/rblack/courses/COSC2425/index.html">http://www.austincc.edu/rblack/courses/COSC2425/index.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

