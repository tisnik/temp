<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Architektura VLIW a rodina DSP čipů TI TMS320C6x</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Architektura VLIW a rodina DSP čipů TI TMS320C6x</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve snaze o zvýšení celkového výpočetního výkonu svých digitálních signálových procesorů se společnost Texas Instruments uchýlila k&nbsp;řešení, které dnes může vypadat poněkud exoticky. Jednalo se o použití architektury VLIW neboli Very Long Instruction Word.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Architektura VLIW a rodina DSP čipů TI TMS320C6x</a></p>
<p><a href="#k02">2. Zvyšování výpočetního výkonu mikroprocesorů</a></p>
<p><a href="#k03">3. VLIW &ndash; řešení některých problémů architektur CISC a RISC</a></p>
<p><a href="#k04">4. Klasický dispatcher versus VLIW</a></p>
<p><a href="#k05">5. Způsob rozdělení instrukčního slova do polí</a></p>
<p><a href="#k06">6. VLIW=složitá instrukční slova?</a></p>
<p><a href="#k07">7. Některá rizika spojená s&nbsp;mikroprocesory s&nbsp;architekturou VLIW</a></p>
<p><a href="#k08">8. Porovnání architektur RISC, CISC a VLIW</a></p>
<p><a href="#k09">9. Rodina DSP čipů TI TMS320C6x</a></p>
<p><a href="#k10">10. Čipy TMS320C62x &ndash; DSP pro operace s&nbsp;hodnotami s&nbsp;pevnou řádovou čárkou</a></p>
<p><a href="#k11">11. Interní struktura TMS320C62x</a></p>
<p><a href="#k12">12. Přenosy dat mezi částmi A a B</a></p>
<p><a href="#k13">13. VLIW instrukce</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Architektura VLIW a rodina DSP čipů TI TMS320C6x</h2>

<p>Na <a
href="https://www.root.cz/clanky/instrukcni-sada-digitalnich-signalovych-procesoru-rady-tms320/">předchozí
článek</a> o digitálních signálových procesorech řady TSM320 vyráběných
společností Texas Instruments dnes navážeme, protože si popíšeme jednu velmi
zajímavou a současně i pro mnoho programátorů neobvyklou řadu signálových
procesorů TMS320C6x. Tyto signálové procesory jsou založeny na architektuře
VLIW, která byla použita především z&nbsp;toho důvodu, že umožňovala zvýšit
výpočetní výkon s&nbsp;použitím paralelně běžících jednotek (ALU, MAC atd.) a
současně zachovat jednoduchost vlastního čipu (naproti tomu bylo nutné
investovat do lepšího překladače). Použití VLIW vlastně nemusí být příliš
překvapivé, když si uvědomíme, že už první čipy TMS32010 byly navrženy na
podobném principu &ndash; s&nbsp;trochou nadsázky je možné říct, že se jednalo
o výkonnou násobičku doplněnou o nezbytnou ALU, řadič a registry. U čipů VLIW
firmy TI je to podobné &ndash; úkolem celého čipu je zabezpečit co nejlepší
vytížení násobiček (MAC), ALU i shifterů, a to i za cenu delšího programu.</p>

<p>Tato na dobu vzniku velmi výkonná architektura (ostatně DSP řady TMS320C67x
byly první DSP, které pokořily hranici 1 GFLOPS) umožnila nasazení DSP
v&nbsp;mnoha oblastech, od modemů a DSL až po zařízení pro GPS, některá (dnes
již překonaná) zařízení pro 3D grafiku a virtuální realitu, zpracování audio
signálů v&nbsp;reálném čase, zpracování obrazů (MRI, ultrazvukové snímky,
rozpoznávání otisků prstů) atd.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Zvyšování výpočetního výkonu mikroprocesorů</h2>

<p>Snaha o zvýšení výpočetního výkonu mikroprocesorů není nijak nová, protože
se tímto problémem zabývali i konstruktéři prvních mikroprocesorů (a předtím
konstruktéři procesorů, které ještě nebyly integrovány na jediném čipu). Řešení
tohoto problému je několik &ndash; od klasické RISCové pipeline
s&nbsp;překrývajícími se instrukcemi přes několik samostatně pracujících
instrukčních pipeline (superskalární procesory), SIMD až po paralelizaci
výpočtů na větším množství procesorových jader. Objevila se i některá částečná
řešení &ndash; použití branch delay slotů u RISCových pipeline, provádění
instrukcí mimo pořadí (<i>out of order execution</i>), použití prediktorů skoků
apod. Většina vylepšení byla ovšem implementována na úkor neustále se zvyšující
interní složitosti čipů, což platí zejména pro technologii provádění instrukcí
mimo pořadí, která vyžaduje zcela přepracovanou strukturu mikroprocesoru.</p>

<img src="http://i.iinfo.cz/images/21/pc157-1.jpg" width="450" height="448" alt=" " />
<p><i>Obrázek 1: Mikroprocesor Intel Pentium s&nbsp;hodinovou frekvencí 66 MHz,
který je postavený na mikroarchitektuře P5. Jedná se sice o procesor CISC, je
ovšem vybaven dvojicí paralelně pracujících pipeline a tudíž se jedná o
superskalární procesor. O tom, že vytvořit superskalární CISCový procesor
nebyla jednoduchá záležitost (ve své době se dokonce hodně příznivců RISCových
procesorů vyjadřovalo v&nbsp;tom smyslu, že je to kvůli špatně navržené
instrukční sadě x86 dokonce nemožné), svědčí i to, že ve vývojovém týmu Pentia
bylo zaměstnáno přibližně 200 inženýrů (zatímco například RISC I je výsledek
práce dvou až tří lidí).</i></p>

<p>Proto není divu, že se někteří konstruktéři mikroprocesorů a především
digitálních signálových procesorů (včetně firmy Texas Instruments) při návrhu
některých čipů vrátili k&nbsp;relativně staré myšlence takzvaného instrukčního
paralelismu, jenž by však byl zabudován přímo v&nbsp;instrukční sadě a nikoli
v&nbsp;samotném mikroprocesoru. Jinými slovy by se starost o paralelizaci
instrukcí (což je jedna z&nbsp;nejúčinnějších metod zvýšení výpočetního výkonu)
v&nbsp;aplikacích přenesla na překladač, popř.&nbsp;na programátora
vytvářejícího své programy přímo v&nbsp;assembleru (to v&nbsp;oblasti DSP není
tak velký problém, jak by se mohlo zdát, protože mnoho aplikací pro zpracování
signálů jsou relativně jednoduché &bdquo;mlátičky&ldquo; dat). Jednu
z&nbsp;alternativ představuje i architektura <i>VLIW</i> neboli <i>Very Long
Instruction Word</i>.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. VLIW &ndash; řešení některých problémů architektur CISC a RISC</h2>

<p>Název architektury <i>VLIW</i> již částečně vysvětluje, čím se tato
architektura odlišuje od mikroprocesorů <i>CISC</i> a <i>RISC</i>. Připomeňme
si, že mikroprocesory s&nbsp;architekturou <i>CISC</i> mívají ve velkém
množství případů instrukční sadu s&nbsp;proměnnou délkou instrukčních slov
(jedná se například o známou řadu <i>Intel 8008</i> pokračující až
k&nbsp;rodině <i>i386</i>, ale i o mnohé další mikroprocesory a taktéž
mikrořadiče, s&nbsp;nimiž jsme se již v&nbsp;tomto seriálu seznámili).
Instrukce, které se v&nbsp;instrukční sadě nachází, mohou být i poměrně složité
a mohou obsahovat různé adresní režimy, ovšem v&nbsp;každém instrukčním slovu
je většinou uložena pouze jedna operace, v&nbsp;mezním případě operace
prováděná nad vektorem (rozšíření instrukčních sad o instrukce <i>MMX</i> a
<i>SSE</i>). Na druhou stranu procesory <i>RISC</i> mají naopak instrukční sadu
s&nbsp;instrukcemi pevné délky (většinou se jedná o 32bitové instrukce, i když
i zde jsme mohli narazit na výjimky s&nbsp;instrukcemi o šířce šestnácti bitů),
a opět platí, že v&nbsp;každé instrukci je uložena pouze jedna operace,
například načtení slova z&nbsp;operační paměti, součet dvou pracovních
registrů, uložení konstanty do pracovního registru či provedení podmíněného
popř.&nbsp;nepodmíněného skoku.</p>

<a href="http://i.iinfo.cz/images/212/pc132-10.png"><img src="http://i.iinfo.cz/images/212/pc132-10-prev.png" width="370" height="242" alt=" " /></a>
<p><i>Obrázek 2: Instrukční sada mikrořadiče M68HC05 s&nbsp;architekturou CISC.
Instrukce mají podle svého typu a adresního režimu různou délku.<br />
(Zdroj: Freescale Semiconductor, Ltd. MC68HC05B6/D Rev. 4.1 08/2005)</i></p>

<p>Při přechodu původně čistě skalárních čipů s&nbsp;architekturami <i>CISC</i>
a <i>RISC</i> na superskalární procesory to ovšem znamená, že superskalární
čipy musí načíst větší množství instrukcí a potom tyto instrukce vhodným
způsobem rozeslat do jednotlivých instrukčních front. Superskalární procesory
musí současně řešit i vzniklé konflikty při přístupu k&nbsp;pracovním registrům
atd. (u některých jednodušších procesorů však konflikty nejsou řešeny,
popř.&nbsp;se při konfliktu pouze vygeneruje výjimka). To vše je daň zaplacená
za flexibilitu instrukční sady (což se vyplácí v&nbsp;oblasti desktopů a
serverů, méně již ve specializovaných oblastech, mezi něž patří MCU a DSP).</p>

<img src="http://i.iinfo.cz/images/21/pc157-2.png" width="343" height="132" alt=" " />
<p><i>Obrázek 3: Ukázka kódování instrukcí různé délky. Tyto instrukce jsou
použity u mikroprocesorů patřících do rodiny x86 v&nbsp;32bitovém
režimu.</i></p>

<p>Naproti tomu se u mikroprocesorů <i>VLIW</i> používá zcela odlišný
instrukční formát, který má ovšem zcela zásadní vliv na interní strukturu
těchto mikroprocesorů. U <i>VLIW</i> se používají instrukce pevné délky,
podobně jako je tomu u mikroprocesorů s&nbsp;architekturou <i>RISC</i>, ovšem
délka těchto instrukcí je většinou (mnohem) delší, než 32 bitů, dosahuje řádově
šířky několik desítek i stovek bitů. Je tomu tak z&nbsp;toho důvodu, že každé
instrukční slovo je rozděleno do většího množství bitových polí (<i>bit
fields</i>), přičemž v&nbsp;každém bitovém poli je umístěn kód jedné
operace.</p>

<img src="https://i.iinfo.cz/images/457/tms320-2-1.png" class="image-276373" alt="&#160;" width="434" height="322" />
<p><i>Obrázek 4: Ukázka kódování instrukcí pevné délky. Zde se konkrétně jedná
o disassemblovaný strojový kód určený pro 64bitovou architekturu AArch64,
s&nbsp;níž jsme se seznámili <a
href="https://mojefedora.cz/pouziti-assembleru-v-linuxu-riscova-architektura-aarch64/">v&nbsp;tomto</a>
a <a
href="https://mojefedora.cz/pouziti-assembleru-v-linuxu-riscova-architektura-aarch64-programove-smycky/">tomto
článku</a></a>.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Klasický dispatcher versus VLIW</h2>

<p>Jak se od sebe odlišuje dispatcher používaný v&nbsp;klasických skalárních i
superskalárních procesorech od jednoduchého VLIW procesoru, je naznačeno na
následující dvojici obrázků. Na levé straně můžeme vidět paměť programu (pro
jednoduchost bez I-cache, fronty atd.). Jednotlivé instrukce jsou načítány a
buď postupně rozdělovány mezi jednotlivé výkonné moduly procesoru (dispatcher),
nebo se jednoduše z&nbsp;celého širokého instrukčního slova pošlou vybrané bity
do jednotlivých modulů. Na obrázcích je pro jednoduchost nakreslen procesor
s&nbsp;pouhými čtyřmi moduly &ndash; aritmeticko-logickými jednotkami a
násobičkou spojenou se sčítačkou (v&nbsp;DSP oblasti se operace MAC &ndash;
Multiply and Accumulate používá velmi často). V&nbsp;praxi však bude modulů víc
(shiftery, podmíněné a nepodmíněné skoky, přenosy dat...) a navíc od sebe
nebudou striktně odděleny, protože například ALU většinou sdílí nějaké pracovní
registry.</p>

<a href="https://www.root.cz/obrazek/276374/"><img src="https://i.iinfo.cz/images/457/tms320-2-2-prev.png" class="image-276374" alt="&#160;" width="370" height="162" /></a>
<p><i>Obrázek 5: Dispatcher použitý v&nbsp;klasických skalárních i superskalárních procesorech.</i></p>

<a href="https://www.root.cz/obrazek/276375/"><img src="https://i.iinfo.cz/images/457/tms320-2-3-prev.png" class="image-276375" alt="&#160;" width="370" height="154" /></a>
<p><i>Obrázek 6: VLIW s&nbsp;instrukcemi rozdělenými do bitových polí.</i></p>

<p>Poznámka: nikde není naznačena existence či neexistence pipeline, protože tu
lze použít i u VLIW.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Způsob rozdělení instrukčního slova do polí</h2>

<p><a href="#k03">Ve třetí kapitole</a> jsme si řekli, že u mikroprocesorů
s&nbsp;architekturou <i>VLIW</i> je instrukční slovo rozděleno do několika
polí, které mohou být buď pevné délky (&bdquo;klasický&ldquo; <i>VLIW</i>),
nebo délky proměnné (v&nbsp;tomto případě se můžeme setkat s&nbsp;označením
<i>EPIC</i>, popř.&nbsp;s&nbsp;dalšími obchodními názvy).  Pokud se tedy
například v&nbsp;jednom instrukčním slovu nachází pět bitových polí, je možné
do instrukčního slova zakódovat až pět různých operací, které se mohou začít
spouštět paralelně, protože mikroprocesor s&nbsp;architekturou <i>VLIW</i>
nemusí provádět žádnou kontrolu, zda se skutečně jedná o operace, jenž se mohou
paralelně spustit &ndash; slučování operací do instrukčních slov je zcela
záležitostí překladače (ten samozřejmě musí při překladu brát v&nbsp;potaz
interní strukturu mikroprocesoru, a to v&nbsp;mnohem větší míře, než je tomu u
procesorů <i>RISC</i> a <i>CISC</i>). Navíc se mikroprocesor
s&nbsp;architekturou <i>VLIW</i> vůbec nemusí složitě snažit o rozdělování
jednotlivých operací do instrukčních pipeline, protože i to je předem určeno
překladačem &ndash; pozicí operace v&nbsp;instrukčním slovu.</p>

<img src="http://i.iinfo.cz/images/21/pc157-4.png" width="358" height="81" alt=" " />
<p><i>Obrázek 7: Některé možnosti rozdělení dlouhého instrukčního slova do
bitových polí odlišné délky a taktéž rozdílné funkce.</i></p>

<p>V&nbsp;praxi to například může znamenat, že v&nbsp;jednom
&bdquo;dlouhém&ldquo; instrukčním slovu se mohou nacházet kódy dvou operací pro
celočíselnou aritmeticko-logickou jednotku, jeden kód pro operaci skoku, jeden
kód operace určené pro provedení matematickým koprocesorem (samozřejmě jen
pokud je matematický procesor na čipu implementován) a navíc poslední kód
operace pro načtení či uložení operandů z&nbsp;operační paměti (některé
procesory <i>VLIW</i> navíc obsahují i jednotky pro provádění grafických
operací, u DSP bývá z&nbsp;ALU separována i násobička či větší množství
násobiček).</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. VLIW=složitá instrukční slova?</h2>

<p>Instrukční slovo rozdělené do polí sice může na první pohled vypadat
složitě, skutečnost je ovšem taková, že mikroprocesor či dnes častěji DSP
s&nbsp;architekturou <i>VLIW</i> je interně mnohem jednodušší (a tím pádem i
levnější a současně i méně energeticky náročný), než superskalární
mikroprocesor s&nbsp;architekturou <i>RISC</i>, vůbec již nemluvě o složitosti
stejně výkonného superskalárního mikroprocesoru s&nbsp;architekturou
<i>CISC</i>, což je taktéž jeden z&nbsp;důvodů, proč se dnešní mikroprocesory
řady <i>x86</i> sice navenek chovají jako procesory <i>CISC</i>, mají ovšem
mnohdy <i>RISCové</i> jádro.</p>

<p>Musíme si navíc uvědomit, že rozdělení instrukčního slova do několika
samostatně prováděných bitových polí je zásadně odlišné od pouhého spojení
většího množství operací do jediné instrukce. Jeden z&nbsp;praktických rozdílů
je ten, že se v&nbsp;každém poli (a tím pádem i v&nbsp;každé jednotce, která
dané pole spouští) většinou omezuje počet a typ pracovních registrů, takže pro
uložení indexů registrů do instrukce je (většinou) zapotřebí použít menší
množství bitů, než je tomu například u klasických RISCových procesorů,
v&nbsp;nichž se mnohdy jen pro uložení indexů registrů musí
&bdquo;obětovat&ldquo; patnáct bitů instrukčního slova.</p>

<img src="http://i.iinfo.cz/images/21/pc157-5.jpg" width="176" height="176" alt=" " />
<p><i>Obrázek 8: Některé digitální signálové procesory TMS řady 320C6x jsou
založené na architektuře VLIW. Právě těmito procesory se budeme zabývat
v&nbsp;navazujících kapitolách.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Některá rizika spojená s&nbsp;mikroprocesory s&nbsp;architekturou VLIW</h2>

<p>Ovšem právě ve zvoleném formátu instrukcí s&nbsp;pevně zadanými poli se
skrývá největší potenciální problém celé architektury <i>VLIW</i> &ndash;
skutečná výkonnost mikroprocesorů <i>VLIW</i> v&nbsp;praxi je totiž prakticky
<strong>zcela</strong> závislá na překladači a jeho schopnostech při generování
strojového kódu. Pokud se překladači nebude z&nbsp;různých důvodů dařit ukládat
do instrukčního slova více paralelně spouštěných operací (tj.&nbsp;pole budou
obsahovat většinou pouze instrukce <strong>NOP</strong>), popř.&nbsp;pokud bude
nutné vkládat tytéž instrukce při čekání na dokončení operací, sníží se mnohdy
velmi razantně reálný výpočetní výkon, což není pouze teoretická hrozba, neboť
právě nedostatky překladačů způsobily u několika procesorů <i>VLIW</i> obchodní
neúspěch (což ovšem není případ firmy TI). Názorným příkladem, jak
&bdquo;úspěšně&ldquo; zabít dobrý čip, může být mikroprocesor <i>Intel 860</i>,
který sice nebyl po technologické stránce úplně špatný, ale překladače dostupné
v&nbsp;době jeho uvedení na trh nedokázaly jeho předností využít, takže
výpočetní výkon dosahovaný v&nbsp;reálných aplikacích zaostával za tvrzením
výrobce (který samozřejmě měl prostředky na ruční optimalizaci syntetických
výkonnostních benchmarků).</p>

<img src="http://i.iinfo.cz/images/660/pc93-5.jpg" alt="pc93" height="450" width="450" />
<p><i>Obrázek 9: Mikroprocesor Intel i860.</i></p>

<p>Další nevýhodou mikroprocesorů s&nbsp;architekturou <i>VLIW</i> je to, že
při každé změně interní struktury mikroprocesoru, například po přidání další
pomocné aritmeticko-logické jednotky, je nutné provést nový překlad programů,
což není u procesorů <i>CISC</i> a <i>RISC</i> (samozřejmě v&nbsp;případě, že
náleží do stejné rodiny) nutné. Příkladem &ndash; a to současně dobrým i
špatným &ndash; může být právě rodina <i>x86</i> zaručující již po tři
desetiletí zpětnou binární kompatibilitu. Dalším příkladem jsou některé rodiny
RISCových procesorů, u nichž se postupně zvyšoval počet registrových oken,
zaváděly se nové prediktory skoků a další technologie, ovšem původní programy
mohly zůstat beze změny. Možná právě binární nekompatibilita mezi procesory
<i>VLIW</i> (kterou už z&nbsp;principu nejde jednoduše obejít) způsobila, že
tyto mikroprocesory najdeme spíše ve specializovaných zařízeních a nikoli
například u desktopových počítačů.</p>

<img src="http://i.iinfo.cz/images/21/pc157-7.png" width="300" height="269" alt=" " />
<p><i>Obrázek 10: Mikroprocesor Itanium je taktéž založen na architektuře VLIW
(i když do značné míry modifikované). Z&nbsp;různých důvodů se tyto
mikroprocesory nakonec neprosadily do takové míry, jak bylo plánováno nebo
odhadováno &ndash; <a
href="https://en.wikipedia.org/wiki/Itanium#/media/File:Itanium_Sales_Forecasts_edit.png">https://en.wikipedia.org/wiki/Itanium#/media/File:Itanium_Sales_Forecasts_edit.png</a></i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Porovnání architektur RISC, CISC a VLIW</h2>

<p>V&nbsp;následující tabulce je pro ilustraci provedeno vzájemné porovnání
některých vlastností mikroprocesorů s&nbsp;architekturami <i>RISC</i>,
<i>CISC</i> a <i>VLIW</i>. Povšimněte si především poměrně velkého množství
shodných vlastností mezi architekturami <i>RISC</i> a <i>VLIW</i> (to
samozřejmě není náhoda, navrhnout funkční architekturu VLIW s&nbsp;CISC
instrukcemi se neukázalo být tou správnou cestou):</p>

<table>
<tr><th>Charakteristika</th><th>Procesory CISC</th><th>Procesory RISC</th><th>Procesory VLIW</th></tr>
<tr><td>Interní struktura</td><td>mikrořadič</td><td>bez mikrořadiče</td><td>bez mikrořadiče</td></tr>
<tr><td>Počet pipeline</td><td>jedna (pro skalární CPU)</td><td>jedna (pro skalární CPU)</td><td>větší množství pipeline</td></tr>
<tr><td>Přístup do paměti</td><td>různé adresovací režimy</td><td>architektura Load&amp;Store</td><td>architektura Load&amp;Store</td></tr>
<tr><td>Délka instrukcí</td><td>proměnná (většinou od jednoho bajtu)</td><td>fixní, většinou 32bitů</td><td>fixní, desítky až stovky bitů</td></tr>
<tr><td>Formát instrukcí</td><td>proměnný</td><td>pouze několik formátů (ALU operace, skoky, Load&amp;Store, načtení konstanty)</td><td>fixní</td></tr>
<tr><td>Složitost instrukcí</td><td>proměnná</td><td>jedna instrukce=jedna základní operace</td><td>více jednodušších, na sobě nezávislých operací</td></tr>
<tr><td>Počet registrů</td><td>relativně malé množství</td><td>větší množství (většinou alespoň 32)</td><td>větší množství</td></tr>
<tr><td>Funkce registrů</td><td>rozdělení pro: aritmetické operace, adresování, indexové registry...</td><td>obecné pracovní registry</td><td>obecné pracovní registry (někdy dělené do skupin)</td></tr>
<tr><td>Příklady CPU</td><td>Intel 8080<br />MOS 6502<br />Zilog Z80<br />Motorola 68k<br />Intel 80386<br />Intel Pentium</td><td>RISC I<br />RISC II<br />MIPS<br />SPARC<br />UltraSPARC<br />PA-RISC</td><td>TMS320C6x (DSP)<br />SHARC (DSP)<br />Itanium<br />Transmeta Crusoe (interně)<br />jádra ST200 (HP a STM)</td></tr>
</table>

<img src="http://i.iinfo.cz/images/21/pc157-8.jpg" width="450" height="294" alt=" " />
<p><i>Obrázek 11: Interní struktura mikroprocesorů Itanium.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Rodina DSP čipů TI TMS320C6x</h2>

<p>Rodina digitálních signálových procesorů TI TMS320C6x je poměrně rozsáhlá,
protože v&nbsp;ní nalezneme čipy určené pro různé aplikační oblasti. Základní
dělení je na čipy, které dokážou primárně zpracovávat celočíselná data
popř.&nbsp;data s&nbsp;pevnou řádovou čárkou (<i>fixed point</i>), a na čipy,
které naopak zpracovávají hodnoty s&nbsp;plovoucí řádovou čárkou (<i>floating
point</i>). O jaké typy DSP se jedná, se dá poměrně jednoduše zjistit pohledem
na číslo, které se nachází na devátém místě označení čipu. Prozatím se
přidržíme původní rodiny TMS320 a nikoli složitějších integrovaných obvodů
<i>OMAP</i> a <i>DaVinci</i>:</p>

<table>
<tr><th>Označení</th><th>Fixed point</th><th>Floating point</th><th>Poznámka</th></tr>
<tr><td>TMS320C62x </td><td>&#x2713;</td><td>&times;</td><td>základní model stručně popsaný <a href="#k10">níže</a></td></tr>
<tr><td>TMS320C67x </td><td>&times; </td><td>&#x2713;</td><td>na úrovni zdrojového kódu kompatibilní s&nbsp;prvním čipem</td></tr>
<tr><td>TMS320C64x </td><td>&#x2713;</td><td>&times;</td><td>na úrovni zdrojového kódu kompatibilní s&nbsp;prvním čipem</td></tr>
<tr><td>TMS320C67x+</td><td>&times; </td><td>&#x2713;</td><td>vylepšení čipu TMS320C67x</td></tr>
<tr><td>TMS320C64x+</td><td>&#x2713;</td><td>&times;</td><td>vylepšení čipu TMS320C64x</td></tr>
<tr><td>TMS320C674x</td><td>&#x2713;</td><td>&#x2713;</td><td>vznikl sloučením vlastností TMS320C64x+ a TMS320C67x+</td></tr>
<tr><td>TMS320C66x </td><td>&#x2713;</td><td>&#x2713;</td><td>nová řada založená na TMS320C674x</td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k11">10. Čipy TMS320C62x &ndash; DSP pro operace s&nbsp;hodnotami s&nbsp;pevnou řádovou čárkou</h2>

<p>Základními modely digitálních signálových procesorů TMS320 jsou čipy
<i>TMS320C62x</i>. Tyto čipy byly navrženy a prodávány již na sklonku
devadesátých let minulého století a postupně se ukázalo, že jejich VLIW
architektura je z&nbsp;obchodního hlediska velmi úspěšná. I z&nbsp;tohoto
důvodu se na DSP <i>TMS320C62x</i> navázalo dalšími modely, což bylo ostatně
patrné i z&nbsp;tabulky uvedené <a href="#k09">v&nbsp;předchozí kapitole</a>.
Typickým znakem těchto DSP je jejich schopnost spustit v&nbsp;jednom cyklu až
osm instrukcí, což je na hardwarové úrovni podpořeno existencí šesti
aritmeticko-logických jednotek (s&nbsp;32bitovými či 40bitovými výsledky) a
dvou násobiček (se šestnáctibitovými operandy a 32bitovými výsledky). Právě na
základě těchto vlastností se uvádí teoretická výpočetní výkonnost těchto DSP:
2400 MIPS pro čip s&nbsp;hodinovým signálem 300 MHz (2400=300&times;8),
resp.&nbsp;2000 MIPS pro čip s&nbsp;hodinovým signálem 250 MHz (později
pochopitelně došlo ke zvýšení hodinové frekvence společně s&nbsp;přechodem na
novou výrobní technologii). Kromě ALU a násobiček procesorové jádro obsahuje i
32 pracovních registrů, přičemž do každého registru je možné uložit slovo o
šířce třiceti dvou bitů.</p>

<p>Jména čipů jsou složena z&nbsp;několika částí, například:</p>

<table>
<tr><th>TMS</th><th>320</th><th>C</th><th>6201</th><th>GLS</th><th>A</th><th>300</th></tr>
<tr><td>TMX=experimentální</td><td>rodina</td><td>technologie</td><td>zařízení</td><td>pouzdro</td><td>teplota</td><td>frekvence</td></tr>
<tr><td>TMP=prototyp      </td><td>&nbsp;</td><td>(nic=NMOS) </td><td>6201</td><td>GFN=BGA s&nbsp;256 piny</td><td>A=-40..105</td><td>100 MHz min</td></tr>
<tr><td>TMS=komerční      </td><td>&nbsp;</td><td>C=CMOS     </td><td>6202</td><td>GLS=BGA s&nbsp;384 piny</td><td>nic=0..90</td><td>600 MHz</td></tr>
<tr><td>SMJ=military      </td><td>&nbsp;</td><td>M=interní ROM</td><td>atd.</td><td>GLZ=BGA s&nbsp;532 piny</td><td>&nbsp;</td><td>atd.</td></tr>
</table>

<img src="http://i.iinfo.cz/images/21/pc157-6.png" width="376" height="462" alt=" " />
<p><i>Obrázek 12: Interní struktura digitálních signálových procesorů TMS řady
320C64x (tyto čipy mají větší množství pracovních registrů v&nbsp;porovnání
s&nbsp;320C62x).</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Interní struktura TMS320C62x</h2>

<p>Celý procesor je rozdělený na dvě části pojmenované datapath
<strong>A</strong> a datapath <strong>B</strong>. Každá z&nbsp;těchto částí
obsahuje sadu pracovních registrů (konkrétně je v&nbsp;každé sadě umístěno
šestnáct 32bitových registrů, celkem tedy již zmíněných 32 registrů) a čtyři
výkonné jednotky (<strong>.L1</strong>, <strong>.S1</strong>,
<strong>.M1</strong>, <strong>.D1</strong> pro část <strong>A</strong> a
<strong>.L2</strong>, <strong>.S2</strong>, <strong>.M2</strong>,
<strong>.D2</strong> pro část <strong>B</strong>):</p>

<pre>
+-----------------+-----------------+
|   Registry Ax   |   Registry Bx   |
+-----------------+-----------------+
   ⇅   ⇅   ⇅   ⇅     ⇅   ⇅   ⇅   ⇅
 +---+---+---+---+ +---+---+---+---+
 |.L1|.S1|.M1|.D1| |.D2|.M2|.S2|.L2|
 +---+---+---+---+ +---+---+---+---+
</pre>

<p>Funkci různých typů jednotek shrnuje následující tabulka:</p>

<table>
<tr><th>Jednotka</th><th>Funkce</th></tr>
<tr><td>.Lx</td><td>ALU pro operandy šířky 32 bitů či 40 bitů</td></tr>
<tr><td>.Sx</td><td>32bitová ALU + shiftery pro operandy šířky 32 bitů či 40 bitů, skoky</td></tr>
<tr><td>.Mx</td><td>násobička 16&times;16bitů nebo 8&times;8 bitů, též MAC operace atd.</td></tr>
<tr><td>.Dx</td><td>jednodušší ALU (součet, rozdíl), datové přenosy, výpočty adres (offsety) apod.</td></tr>
</table>

<p>Pokud se používají operandy o šířce 40 bitů, je nutné použít registrový pár
(dvojici sousedních pracovních registrů), přičemž u druhého registru má význam
jen spodních osm bitů.</p>

<p>Všechny jednotky provádějící výpočty, tj.&nbsp;jednotky <strong>.L</strong>,
<strong>.S</strong> a <strong>.M</strong>, jako své vstupní operandy vždy
používají pracovní registry. O načítání dat do registrů popř.&nbsp;pro ukládání
dat zpět do operační paměti se starají jednotky <strong>.D</strong>;
z&nbsp;tohoto pohledu se jedná o myšlenku rozpracovanou v&nbsp;RISCových
procesorech.</p>

<p>Poznámka: z&nbsp;funkcí jednotek vyplývají i jejich názvy:
<strong>L</strong> &ndash; long integers, <strong>S</strong> &ndash; short
integers či shifter, <strong>M</strong> &ndash; multiply, <strong>D</strong>
&ndash; data.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Přenosy dat mezi částmi A a B</h2>

<p>Každá z&nbsp;jednotek v&nbsp;části A může pro svůj vstupní operand (či
operandy) použít libovolný registr A0 až A15; to samé samozřejmě platí pro část
B a registry B0 až B15. Mohlo by se tedy zdát, že každá část je zcela
samostatná a oddělená od části druhé; ve skutečnosti je však v&nbsp;reálných
aplikacích nutné, aby bylo možné data mezi oběma částmi přenášet. To pro adresy
zabezpečují jednotky <strong>.D1</strong> a <strong>.D2</strong>, které pomocí
volitelného přepínače dokážou uložit výsledná data do vybraného registru
z&nbsp;druhé jednotky (za to ovšem zaplatíme pozdržením přenosu o jeden
hodinový cyklus). Navíc je možné vždy u vybrané jednotky <strong>.Lx</strong>,
<strong>.Sx</strong> či <strong>.Mx</strong> zvolit, že druhý operand bude
vybrán z&nbsp;opačné části. To zajišťují dva jednosměrné komunikační kanály
nazvané <i>crosspath(s)</i> a označované 1X a 2X (ovšem je nutné si uvědomit,
že takto lze zvolit &bdquo;cizí&ldquo; operand jen u jediné jednotky, navíc se
vždy může přenést obsah jednoho registru, nikoli registrového páru).
Zjednodušeně lze tok dat od vstupních operandů k&nbsp;operandům výstupním
naznačit takto (už je asi zřejmé, proč mám u části B jednotky uvedeny
v&nbsp;opačném pořadí):</p>

<pre>
+------------------+------------------+
|   Registry Ax    |    Registry Bx   |
|                2x|1x                |
+------------------+------------------+
 (1x)(1x)(1x)            (2x)(2x)(2x)
   ↓   ↓   ↓   ↓       ↓   ↓   ↓   ↓
 +---+---+---+---+   +---+---+---+---+
 |.L1|.S1|.M1|.D1|   |.D2|.M2|.S2|.L2|
 +---+---+---+---+   +---+---+---+---+
   ↓   ↓   ↓   ↓ ↘   ↙ ↓   ↓   ↓   ↓
+------------------+------------------+
|   Registry Ax    |    Registry Bx   |
+------------------+------------------+
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. VLIW instrukce</h2>

<p>Všechna instrukční slova mají šířku 256 bitů (ano, skutečně VLIW) a jsou
načítány z&nbsp;adresy dělitelné 32. Celý 256bitový vektor instrukčního slova
je rozdělen na osm částí, z&nbsp;nichž každá má šířku 32 bitů. Každá
z&nbsp;těchto částí může tvořit instrukci pro vybranou výkonnou jednotku (L1,
S1, M1, D1, L2, S2, M2, D2), přičemž samozřejmě je možné každé jednotce předat
jedinou instrukci. Pokud se překladači nepodaří rozdělit úkoly všem jednotkám
(což je velmi pravděpodobné, tedy kromě syntetických testů), může se použít
instrukce NOP, což ale samozřejmě vede ke snížení čistého výpočetního výkonu.
V&nbsp;některých případech je navíc nutné určit, že se instrukce nemají spustit
paralelně, ale má se naopak čekat na dokončení předchozí instrukce. K&nbsp;tomu
slouží p-bity (nejnižší bity každé instrukce), které určují, zda se mají
instrukce paralelizovat či naopak vykonat sériově (popř.&nbsp;některé instrukce
paralelizovat a jiné nikoli). Povšimněte si, že i toto chování plně řídí
překladač, protože samotný čip neobsahuje logiku pro detekci kolizí při čtení
či zápisu do pracovních registrů. Podrobnější informace o instrukčním souboru
si řekneme příště.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>VLIW: Very Long Instruction Word: Texas Instruments TMS320C6x<br />
<a href="http://www.ecs.umass.edu/ece/koren/architecture/VLIW/2/ti1.html">http://www.ecs.umass.edu/ece/koren/architecture/VLIW/2/ti1.html</a>
</li>

<li>An Introduction To Very-Long Instruction Word (VLIW) Computer Architecture<br />
Philips Semiconductors
</li>

<li>VLIW Architectures for DSP: A Two-Part Lecture (PDF, slajdy)<br />
<a href="http://www.bdti.com/MyBDTI/pubs/vliw_icspat99.pdf">http://www.bdti.com/MyBDTI/pubs/vliw_icspat99.pdf</a>
</li>

<li>Very long instruction word (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Very_long_instruction_word">https://en.wikipedia.org/wiki/Very_long_instruction_word</a>
</li>

<li>A VLIW Approach to Architecture, Compilers and Tools<br />
<a href="http://www.vliw.org/book/">http://www.vliw.org/book/</a>
</li>

<li>VEX Toolchain (VEX = VLIW Example)<br />
<a href="http://www.hpl.hp.com/downloads/vex/">http://www.hpl.hp.com/downloads/vex/</a>
</li>

<li>Použití assembleru v Linuxu: RISCová architektura AArch64<br />
<a href="https://mojefedora.cz/pouziti-assembleru-v-linuxu-riscova-architektura-aarch64/">https://mojefedora.cz/pouziti-assembleru-v-linuxu-riscova-architektura-aarch64/</a>
</li>

<li>Použití assembleru v Linuxu: RISCová architektura AArch64 (programové smyčky)<br />
<a href="https://mojefedora.cz/pouziti-assembleru-v-linuxu-riscova-architektura-aarch64-programove-smycky/">https://mojefedora.cz/pouziti-assembleru-v-linuxu-riscova-architektura-aarch64-programove-smycky/</a>
</li>

<li>Elbrus (computer)<br />
<a href="https://en.wikipedia.org/wiki/Elbrus_%28computer%29">https://en.wikipedia.org/wiki/Elbrus_%28computer%29</a>
</li>

<li>Super Harvard Architecture Single-Chip Computer<br />
<a href="https://en.wikipedia.org/wiki/Super_Harvard_Architecture_Single-Chip_Computer">https://en.wikipedia.org/wiki/Super_Harvard_Architecture_Single-Chip_Computer</a>
</li>

<li>Digital Signal Processors (stránky TI)<br />
<a href="http://www.ti.com/lsds/ti/processors/dsp/overview.page">http://www.ti.com/lsds/ti/processors/dsp/overview.page</a>
</li>

<li>Introduction to DSP<br />
<a href="http://www.ti.com/lit/wp/spry281/spry281.pdf">http://www.ti.com/lit/wp/spry281/spry281.pdf</a>
</li>

<li>The Evolution of TMS (Family of DSPs)<br />
<a href="http://www.slideshare.net/moto_modx/theevo1">http://www.slideshare.net/moto_modx/theevo1</a>
</li>

<li>Datasheet k TMS32010<br />
<a href="http://www.datasheetarchive.com/dlmain/49326c32a52050140abffe6f0ac4894aa09889/M/TMS32010">http://www.datasheetarchive.com/dlmain/49326c32a52050140abffe6f0ac4894aa09889/M/TMS32010</a>
</li>

<li>1979: Single Chip Digital Signal Processor Introduced<br />
<a href="http://www.computerhistory.org/siliconengine/single-chip-digital-signal-processor-introduced/">http://www.computerhistory.org/siliconengine/single-chip-digital-signal-processor-introduced/</a>
</li>

<li>The TMS32010. The DSP chip that changed the destiny of a semiconductor giant<br />
<a href="http://www.tihaa.org/historian/TMS32010-12.pdf">http://www.tihaa.org/historian/TMS32010-12.pdf</a>
</li>

<li>Texas Instruments TMS320 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Texas_Instruments_TMS320">https://en.wikipedia.org/wiki/Texas_Instruments_TMS320</a>
</li>

<li>Great Microprocessors of the Past and Present: Part IX: Signetics 8x300, Early cambrian DSP ancestor (1978):<br />
<a href="http://www.cpushack.com/CPU/cpu2.html#Sec2Part9">http://www.cpushack.com/CPU/cpu2.html#Sec2Part9</a>
</li>

<li>Great Microprocessors of the Past and Present (V 13.4.0)<br />
<a href="http://jbayko.sasktelwebsite.net/cpu.html">http://jbayko.sasktelwebsite.net/cpu.html</a>
</li>

<li>Introduction to DSP - DSP processors:<br />
<a href="http://www.bores.com/courses/intro/chips/index.htm">http://www.bores.com/courses/intro/chips/index.htm</a>
</li>

<li>The Scientist and Engineer's Guide to Digital Signal Processing:<br />
<a href="http://www.dspguide.com/">http://www.dspguide.com/</a>
</li>

<li>Digital signal processor (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Digital_signal_processor">http://en.wikipedia.org/wiki/Digital_signal_processor</a>
</li>

<li>Digitální signálový procesor (Wikipedia CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Digitální_signálový_procesor">http://cs.wikipedia.org/wiki/Digitální_signálový_procesor</a>
</li>

<li>Digital Signal Processing FAQs<br />
<a href="http://dspguru.com/dsp/faqs">http://dspguru.com/dsp/faqs</a>
</li>

<li>Reprezentace numerických hodnot ve formátech FX a FP<br />
<a href="http://www.root.cz/clanky/fixed-point-arithmetic/">http://www.root.cz/clanky/fixed-point-arithmetic/</a>
</li>

<li>IEEE 754 a její příbuzenstvo: FP formáty<br />
<a href="http://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/">http://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/</a>
</li>

<li>Čtyři základní způsoby uložení čísel pomocí FX formátů<br />
<a href="http://www.root.cz/clanky/binarni-reprezentace-numerickych-hodnot-v-fx-formatu/">http://www.root.cz/clanky/binarni-reprezentace-numerickych-hodnot-v-fx-formatu/</a>
</li>

<li>Základní aritmetické operace prováděné v FX formátu<br />
<a href="http://www.root.cz/clanky/zakladni-aritmeticke-operace-provadene-ve-formatu-fx/">http://www.root.cz/clanky/zakladni-aritmeticke-operace-provadene-ve-formatu-fx/</a>
</li>

<li>Aritmetické operace s hodnotami uloženými ve formátu FP<br />
<a href="http://www.root.cz/clanky/aritmeticke-operace-s-hodnotami-ve-formatu-plovouci-radove-carky/">http://www.root.cz/clanky/aritmeticke-operace-s-hodnotami-ve-formatu-plovouci-radove-carky/</a>
</li>

<li>FIR Filter FAQ<br />
<a href="http://dspguru.com/dsp/faqs/fir">http://dspguru.com/dsp/faqs/fir</a>
</li>

<li>Finite impulse response (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Finite_impulse_response">http://en.wikipedia.org/wiki/Finite_impulse_response</a>
</li>

<li>DSPRelated<br />
<a href="http://www.dsprelated.com/">http://www.dsprelated.com/</a>
</li>

<li>Addressing mode (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Addressing_mode">https://en.wikipedia.org/wiki/Addressing_mode</a>
</li>

<li>Orthogonal instruction set<br />
<a href="https://en.wikipedia.org/wiki/Orthogonal_instruction_set">https://en.wikipedia.org/wiki/Orthogonal_instruction_set</a>
</li>

<li>TI 16-bit and 32-bit microcontrollers<br />
<a href="http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/overview.page">http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/overview.page</a>
</li>

<li>TMS 32010 Assembly Language Programmer's Guide (kniha na Amazonu)<br />
<a href="https://www.amazon.com/32010-Assembly-Language-Programmers-Guide/dp/0904047423">https://www.amazon.com/32010-Assembly-Language-Programmers-Guide/dp/0904047423</a>
</li>

<li>COSC2425: PC Architecture and Machine Language, PC Assembly Language<br />
<a href="http://www.austincc.edu/rblack/courses/COSC2425/index.html">http://www.austincc.edu/rblack/courses/COSC2425/index.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

