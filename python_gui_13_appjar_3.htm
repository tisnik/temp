<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba grafického uživatelského rozhraní v Pythonu: dokončení popisu widgetů v knihovně appJar</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba grafického uživatelského rozhraní v Pythonu: dokončení popisu widgetů v knihovně appJar</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetím článku o knihovně appJar určené pro snadnou tvorbu aplikací s grafickým uživatelským rozhraním v Pythonu dokončíme popis widgetů, které tato knihovna programátorům nabízí. Bude se jednat o doplňkové widgety, které ovšem mohou být užitečné - posuvník, zobrazení průběhu činnosti, widget pro výběr data apod.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba grafického uživatelského rozhraní v Pythonu: dokončení popisu widgetů v&nbsp;knihovně appJar</a></p>
<p><a href="#k02">2. Horizontální posuvník (slider, scale)</a></p>
<p><a href="#k03">3. Zobrazení hodnot na horizontální ose posuvníku</a></p>
<p><a href="#k04">4. Zobrazení aktuálně vybrané hodnoty na posuvníku</a></p>
<p><a href="#k05">5. Změna rozsahu hodnot, které lze posuvníkem vybrat</a></p>
<p><a href="#k06">6. Vertikální posuvník</a></p>
<p><a href="#k07">7. Callback funkce volaná při změně posuvníku</a></p>
<p><a href="#k08">8. Widget zobrazující průběh činnosti (meter)</a></p>
<p><a href="#k09">9. Změna hodnoty widgetu meter</a></p>
<p><a href="#k10">10. Úprava barevného gradientu widgetu meter</a></p>
<p><a href="#k11">11. Automatické sledování a zobrazení hodnot vybrané proměnné</a></p>
<p><a href="#k12">12. Widget meter rozdělený na dva barevné gradienty</a></p>
<p><a href="#k13">13. Úprava obou barevných gradientů rozděleného widgetu meter</a></p>
<p><a href="#k14">14. Widget umožňující současné zobrazení dvou hodnot (dual meter)</a></p>
<p><a href="#k15">15. Widget pro výběr data</a></p>
<p><a href="#k16">16. Použití aktuálního data popř.&nbsp;explicitní určení odlišného data</a></p>
<p><a href="#k17">17. Widget umožňující uchopení a přesun okna</a></p>
<p><a href="#k18">18. Horizontální a vertikální oddělovač widgetů</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba grafického uživatelského rozhraní v Pythonu: dokončení popisu widgetů v&nbsp;knihovně appJar</h2>

<p>V&nbsp;již třetím pokračování článku o tvorbě grafického uživatelského
rozhraní v&nbsp;Pythonu s&nbsp;využitím knihovny <i>appJar</i> dokončíme popis
většiny zbývajících ovládacích prvků (widgetů), z&nbsp;nichž je možné skládat
složitější dialogy a formuláře (widgety pro vstup testu si popíšeme společně
s&nbsp;formuláři). Pro připomenutí jsou v&nbsp;následující tabulce vypsány
všechny základní widgety, které tato knihovna podporuje. Odkazy vedou na
podrobnější popis každého widgetu:</p>

<table>
<tr><th>Jméno widgetu</th><th>Stručný popis</th></tr>
<tr><td><a href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-appjar/#k04">Label</a></td><td>textové návěští neměnitelné uživatelem</td></tr>
<tr><td>Message</td><td>několikařádkové textové návěští (viz Label)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Entry</td><td>šest typů vstupních polí (základní + 5 speciálních)</td></tr>
<tr><td>TextArea</td><td>několikařádkové vstupní pole</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td><a href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-appjar/#k06">Button</a></td><td>klasické &bdquo;klikací&ldquo; tlačítko, existují však i další varianty (tlačítko s&nbsp;ikonou atd.)</td></tr>
<tr><td><a href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-widgety-v-knihovne-appjar/#k07">RadioButton</a></td><td>přepínací tlačítko, které je typicky sdružováno do větších skupin</td></tr>
<tr><td><a href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-widgety-v-knihovne-appjar/#k05">CheckBox</a></td><td>zaškrtávací tlačítko</td></tr>
<tr><td><a href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-widgety-v-knihovne-appjar/#k16">Properties</a></td><td>skupina zaškrtávacích tlačítek</td></tr>
<tr><td><a href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-widgety-v-knihovne-appjar/#k14">OptionBox</a></td><td>výběrové pole se seznamem voleb (drop-down box)</td></tr>
<tr><td>SpinBox</td><td>výběrové pole s&nbsp;přetáčením voleb</td></tr>
<tr><td><a href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-widgety-v-knihovne-appjar/#k10">ListBox</a></td><td>seznam prvků s&nbsp;možností výběru jednoho prvku či skupiny prvků</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td><a href="#k02">Scale</a></td><td>scrollovací prvek (<a href="#k02">horizontální</a> a <a href="#k06">vertikální</a> posuvník)</td></tr>
<tr><td><a href="#k15">DatePicker</a></td><td>výběr data</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td><a href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-appjar/#k12">Link</a></td><td>klikací odkaz</td></tr>
<tr><td><a href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-appjar/#k12">WebLink</a></td><td>klikací odkaz</td></tr>
<tr><td><a href="#k17">Grip</a></td><td>ploška sloužící k&nbsp;přesunu okna/dialogu/toolbaru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Meter</td><td>(pasivní) zobrazení průběhu výpočtu atd.</td></tr>
<tr><td><a href="#k18">Separator</a></td><td>(pasivní) horizontální či vertikální oddělení widgetů</td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Horizontální posuvník (slider, scale)</h2>

<p>Prvním widgetem, který si dnes popíšeme, je horizontální posuvník. Většinou
se tento ovládací prvek nazývá <i>slider</i>, ovšem v&nbsp;knihovně
<i>appJar</i> zvolili název <i>scale</i>. Tento posuvník se
v&nbsp;nejjednodušším případě vytváří metodou <strong>addScale</strong>
popř.&nbsp;metodou <strong>addLabelScale</strong>. Druhá z&nbsp;těchto metod
navíc zobrazí na levé straně widgetu i jeho název:</p>

<pre>
app.addScale("scale1")
app.addLabelScale("scale1")
</pre>

<p>Pro čtení aktuálně nastavené pozice posuvníku použijte metodu
<strong>getScale</strong>:</p>

<pre>
value1 = app.getScale("scale1")
value2 = app.getScale("scale2")
</pre>

<img src="https://i.iinfo.cz/images/359/appjar3-1.png" class="image-306818" alt="&#160;" width="180" height="139" />
<p><i>Obrázek 1: Nejjednodušší forma horizontálního posuvníku, který implicitně
umožňuje vybírat hodnoty od 1 do 100 (včetně obou mezí).</i></p>

<p>V&nbsp;dnešním prvním demonstračním příkladu se zobrazí jeden posuvník a
jeho hodnota je vypsána do informačního dialogu po stisku tlačítka &bdquo;Show
scale value&ldquo;:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice of scale: {s}".format(s=<strong>app.getScale("scale")</strong>)
        app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
<strong>app.addLabelScale("scale")</strong>
&nbsp;
app.addButton("Show scale value", onButtonPress)
app.addButton("Quit", onButtonPress)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/359/appjar3-2.png" class="image-306819" alt="&#160;" width="260" height="119" />
<p><i>Obrázek 2: Zobrazení aktuálně vybrané hodnoty na posuvníku.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zobrazení hodnot na horizontální ose posuvníku</h2>

<p>Posuvník z&nbsp;prvního příkladu ve skutečnosti nebyl nakonfigurován tak,
aby byl uživatelsky přívětivý, protože nebylo zřejmé, jaký rozsah hodnot
vlastně posuvník představuje. Tento problém lze velice snadno napravit, protože
pod posuvníkem může být zobrazena osa s&nbsp;hodnotami. Tato osa se zapíná
metodou <strong>showScaleValue</strong>, které se kromě jména posuvníku předá i
interval mezi zobrazenými hodnotami. Musíte si pouze dát pozor na to, aby
nebylo hodnot zobrazeno příliš mnoho, protože by se překrývaly (knihovna
<i>appJar</i> tuto kontrolu za nás neudělá):</p>

<pre>
app.showScaleIntervals("scale", 20)
</pre>

<img src="https://i.iinfo.cz/images/359/appjar3-3.png" class="image-306820" alt="&#160;" width="257" height="114" />
<p><i>Obrázek 3: Posuvník, pod nímž je zobrazena osa s&nbsp;hodnotami.</i></p>

<p>V&nbsp;následujícím demonstračním příkladu je zajištěno, že se pod
posuvníkem zobrazí i osa s&nbsp;hodnotami:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice of scale: {s}".format(s=app.getScale("scale"))
        app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
app.addLabelScale("scale", colspan=2)
<strong>app.showScaleIntervals("scale", 20)</strong>
&nbsp;
app.addButton("Show scale value", onButtonPress, 1, 0)
app.addButton("Quit", onButtonPress, 1, 1)
&nbsp;
app.go()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zobrazení aktuálně vybrané hodnoty na posuvníku</h2>

<p>Uživatelskou přívětivost při použití posuvníku lze dále vylepšit tak, že nad
jeho posuvnou částí zobrazíme aktuálně nastavenou hodnotu. Tato konfigurace je
velmi snadná, protože pouze postačuje zavolat následující metodu, které se
pouze předá jméno posuvníku:</p>

<pre>
app.showScaleValue("scale")
</pre>

<p>Alternativně lze použít i volání:</p>

<pre>
app.showScaleValue("scale", show=True)
</pre>

<p>Opětovný zákaz zobrazení aktuální hodnoty se provede voláním:</p>

<pre>
app.showScaleValue("scale", show=False)
</pre>

<img src="https://i.iinfo.cz/images/359/appjar3-4.png" class="image-306821" alt="&#160;" width="257" height="134" />
<p><i>Obrázek 4: Posuvník, nad nímž je zobrazena aktuálně vybraná hodnota.
Současně se pod posuvníkem zobrazuje osa s&nbsp;hodnotami. Jedná se o největší
množství informací, které tento widget dokáže v&nbsp;dané chvíli
poskytnout.</i></p>

<p>Podívejme se nyní na demonstrační příklad, v&nbsp;němž je zobrazen posuvník
jak s&nbsp;osou hodnot, tak i s&nbsp;aktuálně vybranou hodnotou:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice of scale: {s}".format(s=app.getScale("scale"))
        app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
app.addLabelScale("scale", colspan=2)
<strong>app.showScaleIntervals("scale", 20)</strong>
<strong>app.showScaleValue("scale")</strong>
&nbsp;
app.addButton("Show scale value", onButtonPress, 1, 0)
app.addButton("Quit", onButtonPress, 1, 1)
&nbsp;
app.go()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Změna rozsahu hodnot, které lze posuvníkem vybrat</h2>

<p>Ve <a href="#k02">druhé kapitole</a> jsme si řekli, že posuvníkem je možné
vybírat hodnoty z&nbsp;rozsahu 1 až 100. Samozřejmě se nejedná o jediný možný
rozsah, který by bylo nutné programově přepočítávat na rozsah požadovaný
zpracovávanou úlohou. Pomocí metody <strong>setScaleRange</strong> je totiž
možné specifikovat vlastní dolní i horní mez hodnot vrácených posuvníkem (ovšem
na obrazovce se posuvník vždy bude pohybovat od levého dorazu do dorazu
pravého):</p>

<pre>
app.setScaleRange("scale", dolní_mez, horní_mez)
</pre>

<p>popř.&nbsp;je možné nastavit aktuální hodnotu:</p>

<pre>
app.setScaleRange("scale", dolní_mez, horní_mez, aktuální_hodnota)
</pre>

<img src="https://i.iinfo.cz/images/359/appjar3-5.png" class="image-306822" alt="&#160;" width="257" height="134" />
<p><i>Obrázek 5: Posuvník umožňující vybírat hodnoty z&nbsp;rozsahu 50 až 150
(včetně obou mezí).</i></p>

<p>Opět si ukažme demonstrační příklad, v&nbsp;němž nakonfigurujeme možnosti
posuvníku:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice of scale: {s}".format(s=app.getScale("scale"))
        app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
app.addLabelScale("scale", colspan=2)
app.showScaleIntervals("scale", 25)
app.showScaleValue("scale")
<strong>app.setScaleRange("scale", 50, 150, 100)</strong>
&nbsp;
app.addButton("Show scale value", onButtonPress, 1, 0)
app.addButton("Quit", onButtonPress, 1, 1)
&nbsp;
app.go()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vertikální posuvník</h2>

<p>Metodou <strong>setScaleVertical</strong> lze vytvořit vertikální posuvník,
který je zobrazen na šestém obrázku. Při použití vertikálního posuvníku si
musíte dát pozor na to, aby se zbytečně &bdquo;nenatáhly&ldquo; ostatní widgety
umístěné vedle posuvníku popř.&nbsp;aby nebyl posuvník příliš nízký. Řešení
poskytuje metoda <strong>setPadding</strong> a roztažení posuvníku přes několik
řádků:</p>

<pre>
app.setScaleVertical("scale")
</pre>

<img src="https://i.iinfo.cz/images/359/appjar3-6.png" class="image-306823" alt="&#160;" width="321" height="187" />
<p><i>Obrázek 6: Vertikální posuvník zobrazený na dialogu.</i></p>

<p>Další příklad po svém spuštění zobrazí vertikální posuvník umístěný
v&nbsp;levé části dialogu. Posuvník zabere všechny tři řádky pomyslné
mřížky:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice of scale: {s}".format(s=app.getScale("scale"))
        app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 10)
&nbsp;
app.addLabelScale("scale", rowspan=3)
app.showScaleIntervals("scale", 25)
app.showScaleValue("scale")
app.setScaleRange("scale", 50, 150, 100)
app.setScaleVertical("scale")
&nbsp;
app.addButton("Show scale value", onButtonPress, 0, 1)
app.addLabel("", "", 1, 1)
app.addButton("Quit", onButtonPress, 2, 1)
&nbsp;
app.go()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Callback funkce volaná při změně posuvníku</h2>

<p>Ve chvíli, kdy uživatel změní pozici posuvníku, může dojít
k&nbsp;automatickému zavolání callback funkce, které se v&nbsp;jediném
parametru předá jméno widgetu (posuvníku), kterého se tato událost týká.
Registraci takové callback funkce provedeme velmi snadno:</p>

<pre>
app.setScaleChangeFunction(jméno_posuvníku, scaleCallback)
</pre>

<p>Samotná callback funkce může vypadat například takto:</p>

<pre>
def scaleCallback(widgetName):
    value = app.getScale(widgetName)
    app.setTitle("Scale: {v}".format(v=value))
</pre>

<img src="https://i.iinfo.cz/images/359/appjar3-7.png" class="image-306824" alt="&#160;" width="257" height="134" />
<p><i>Obrázek 7: Po změně pozice posuvníku se automaticky změní titulek okna.</i></p>

<p>Podívejme se nyní na demonstrační příklad, který dokáže změnit titulek okna
po změně pozice posuvníku:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice of scale: {s}".format(s=app.getScale("scale"))
        app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
<strong>def scaleCallback(widgetName):</strong>
<strong>    value = app.getScale(widgetName)</strong>
<strong>    app.setTitle("Scale: {v}".format(v=value))</strong>
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
app.addLabelScale("scale", colspan=2)
app.showScaleIntervals("scale", 25)
app.showScaleValue("scale")
<strong>app.setScaleChangeFunction("scale", scaleCallback)</strong>
app.setScaleRange("scale", 50, 150, 100)
&nbsp;
app.addButton("Show scale value", onButtonPress, 1, 0)
app.addButton("Quit", onButtonPress, 1, 1)
&nbsp;
app.go()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Widget zobrazující průběh činnosti (meter)</h2>

<p>Většina ovládacích prvků, s&nbsp;nimiž jsme se doposud seznámili, dokáže
aktivně reagovat na akce prováděné uživatelem (klik, drag and drop atd.). Ovšem
widget nazvaný <i>meter</i> je vlastně z&nbsp;tohoto pohledu pasivní, protože
nijak nereaguje na přímé uživatelovy akce. Tento ovládací prvek je totiž určený
na zobrazení průběhu nějaké činnosti, takže se v&nbsp;jiných grafických
knihovnách jmenuje <i>progress bar</i> apod. (ostatně i z&nbsp;tohoto důvodu
jsou hodnoty zobrazené v&nbsp;rozsahu 0% až 100%). V&nbsp;knihovně appJar se
widget <i>meter</i> v&nbsp;tom nejjednodušším případě vytváří takto:</p>

<pre>
app.addMeter("progressBar")
</pre>

<p>popř.&nbsp;s&nbsp;udáním pozice prvku v&nbsp;rámci neviditelné mřížky
(grid):</p>

<pre>
app.addMeter("progressBar", 2, 3)
</pre>

<img src="https://i.iinfo.cz/images/359/appjar3-8.png" class="image-306825" alt="&#160;" width="209" height="71" />
<p><i>Obrázek 8: Nejjednodušší podoba widgetu, který umožňuje zobrazit průběh
nějaké činnosti. Povšimněte si, že tento widget zobrazuje hodnoty
v&nbsp;procentech.</i></p>

<p>Podívejme se nyní na způsob přidání tohoto widgetu do našeho demonstračního
příkladu. Je to velmi snadné:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
<strong>app.addMeter("progressBar", 1, 0)</strong>
app.addButton("Quit", onButtonPress, 1, 1)
&nbsp;
app.go()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Změna hodnoty widgetu meter</h2>

<p>Widget typu <i>meter</i> můžeme použít dvěma způsoby:</p>

<ol>

<li>Hodnotu zobrazenou tímto widgetem (0% až 100%) budeme nastavovat explicitně
v&nbsp;programu. V&nbsp;tomto případě se použije metoda
<strong>app.setMeter()</strong>.</li>

<li>Necháme widget, aby sám sledoval zvolenou proměnnou a aktualizoval svoji
hodnotu automaticky. Aby vše fungovalo, musíme zaregistrovat událost pomocí
<strong>app.registerEvent(vhodná_callback_funkce)</strong>.</li>

</ol>

<p>Nejdříve si ukážeme první způsob, tj.&nbsp;explicitní nastavení hodnoty
zobrazované widgetem. Hodnotu budeme získávat z&nbsp;posuvníku:</p>

<pre>
def scaleCallback(widgetName):
    value = app.getScale(widgetName)
    app.setTitle("Scale: {v}".format(v=value))
    <strong>app.setMeter("progressBar", value)</strong>
</pre>

<img src="https://i.iinfo.cz/images/359/appjar3-9.png" class="image-306826" alt="&#160;" width="257" height="164" />
<p><i>Obrázek 9: Nastavení hodnoty widgetu meter na 42%</i></p>

<p>Úplný zdrojový kód příkladu vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice of scale: {s}".format(s=app.getScale("scale"))
        app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
def scaleCallback(widgetName):
    value = app.getScale(widgetName)
    app.setTitle("Scale: {v}".format(v=value))
    <strong>app.setMeter("progressBar", value)</strong>
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
app.addMeter("progressBar", 0, 0, colspan=2)
&nbsp;
app.addLabelScale("scale", colspan=2)
app.showScaleIntervals("scale", 25)
app.showScaleValue("scale")
app.setScaleChangeFunction("scale", scaleCallback)
app.setScaleRange("scale", 0, 100, 50)
&nbsp;
app.addButton("Show scale value", onButtonPress, 2, 0)
app.addButton("Quit", onButtonPress, 2, 1)
&nbsp;
app.go()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Úprava barevného gradientu widgetu meter</h2>

<p>V&nbsp;případě, že vám nevyhovuje výchozí barevný gradient použitý ve
widgetu meter, není žádný problém ho změnit. Použijte přitom metodu nazvanou
<strong>setMeterFill</strong>, které se ve druhém parametru předá barva ve
formě řetězce:</p>

<pre>
app.setMeterFill("progressBar", "green")
</pre>

<p>popř.&nbsp;je možné barvu specifikovat i &bdquo;hexa-trojicí&ldquo;
používanou i v&nbsp;HTML a CSS:</p>

<pre>
app.setMeterFill("progressBar", "#aabbcc")
</pre>

<img src="https://i.iinfo.cz/images/359/appjar3-10.png" class="image-306827" alt="&#160;" width="257" height="164" />
<p><i>Obrázek 10: Výchozí barevný gradient widgetu meter.</i></p>

<img src="https://i.iinfo.cz/images/359/appjar3-11.png" class="image-306828" alt="&#160;" width="257" height="164" />
<p><i>Obrázek 11: Změna gradientu na škálu zeleného odstínu.</i></p>

<p>Opět si ukažme zařazení výše uvedeného kódu do demonstračního příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice of scale: {s}".format(s=app.getScale("scale"))
        app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
def scaleCallback(widgetName):
    value = app.getScale(widgetName)
    app.setTitle("Scale: {v}".format(v=value))
    app.setMeter("progressBar", value)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
app.addMeter("progressBar", 0, 0, colspan=2)
<strong>app.setMeterFill("progressBar", "green")</strong>
&nbsp;
app.addLabelScale("scale", colspan=2)
app.showScaleIntervals("scale", 25)
app.showScaleValue("scale")
app.setScaleChangeFunction("scale", scaleCallback)
app.setScaleRange("scale", 0, 100, 50)
&nbsp;
app.addButton("Show scale value", onButtonPress, 2, 0)
app.addButton("Quit", onButtonPress, 2, 1)
&nbsp;
app.go()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Automatické sledování a zobrazení hodnot vybrané proměnné</h2>

<p>Ovládací prvek <i>meter</i> dokáže automaticky sledovat a zobrazit hodnotu
vybrané proměnné (ideálně ve chvíli, kdy tato hodnota leží v&nbsp;rozsahu 0 až
100). Aby toto sledování pracovalo korektně, je nutné vytvořit
&bdquo;univerzální&ldquo; callback funkci zavolanou ve chvíli, kdy je nutné
změnit hodnoty zobrazené v&nbsp;GUI. V&nbsp;této callback funkci přečteme
proměnnou <strong>meterValue</strong> (což je jen příklad) a změníme hodnotu
zobrazovanou widgetem <i>meter</i>:</p>

<pre>
def updateMeter():
    app.setMeter("progressBar", meterValue)
</pre>

<p>Tuto univerzální callback funkci dále zaregistrujeme:</p>

<pre>
app.registerEvent(updateMeter)
</pre>

<p>Pokud si spustíte další demonstrační příklad, můžete posuvníkem měnit
hodnotu zobrazenou widgetem <i>meter</i>. Povšimněte si zpoždění mezi změnou
posuvníku a zobrazením hodnoty. Toto zpoždění je způsobeno tím, že se callback
funkce nevolá příliš často:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
<strong>meterValue = 50</strong>
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice of scale: {s}".format(s=app.getScale("scale"))
        app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
def scaleCallback(widgetName):
    <strong>global meterValue</strong>
    <strong>meterValue = app.getScale(widgetName)</strong>
    app.setTitle("Scale: {v}".format(v=meterValue))
&nbsp;
&nbsp;
<strong>def updateMeter():</strong>
<strong>    app.setMeter("progressBar", meterValue)</strong>
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
app.addMeter("progressBar", 0, 0, colspan=2)
app.setMeterFill("progressBar", "green")
&nbsp;
app.addLabelScale("scale", colspan=2)
app.showScaleIntervals("scale", 25)
app.showScaleValue("scale")
app.setScaleChangeFunction("scale", scaleCallback)
app.setScaleRange("scale", 0, 100, meterValue)
&nbsp;
<strong>app.registerEvent(updateMeter)</strong>
&nbsp;
app.addButton("Show scale value", onButtonPress, 2, 0)
app.addButton("Quit", onButtonPress, 2, 1)
&nbsp;
app.go()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Widget meter rozdělený na dva barevné gradienty</h2>

<p>Pokud ovládací prvek <i>meter</i> vytvoříme metodou
<strong>addSplitMeter</strong>:</p>

<pre>
app.addSplitMeter("progressBar")
</pre>

<p>a nikoli metodou <strong>addMeter</strong>:</p>

<pre>
app.addMeter("progressBar")
</pre>

<p>bude tento widget zobrazený takovým způsobem, jaký je naznačený na dalším
screenshotu:</p>

<img src="https://i.iinfo.cz/images/359/appjar3-13.png" class="image-306830" alt="&#160;" width="257" height="164" />
<p><i>Obrázek 12: Widget meter rozdělený na dva barevné gradienty.</i></p>

<p>Funkce tohoto widgetu však zůstane zachována, o čemž se můžeme snadno
přesvědčit spuštěním dalšího příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice of scale: {s}".format(s=app.getScale("scale"))
        app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
def scaleCallback(widgetName):
    value = app.getScale(widgetName)
    app.setTitle("Scale: {v}".format(v=value))
    app.setMeter("progressBar", value)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
app.addSplitMeter("progressBar", 0, 0, colspan=2)
&nbsp;
app.addLabelScale("scale", colspan=2)
app.showScaleIntervals("scale", 25)
app.showScaleValue("scale")
app.setScaleChangeFunction("scale", scaleCallback)
app.setScaleRange("scale", 0, 100, 50)
&nbsp;
app.addButton("Show scale value", onButtonPress, 2, 0)
app.addButton("Quit", onButtonPress, 2, 1)
&nbsp;
app.go()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Úprava obou barevných gradientů rozděleného widgetu meter</h2>

<p>Ve chvíli, kdy použijeme widget <i>meter</i> rozdělený na dva barevné
gradienty, již není možné barvu tohoto ovládacího prvku nastavit způsobem,
který jsme si popsali <a href="#k10">v&nbsp;desáté kapitole</a>,
tj.&nbsp;voláním:</p>

<pre>
app.setMeterFill("progressBar", "green")
</pre>

<p>Namísto toho je nutné předat metodě <strong>setMeterFill</strong> dvě barvy,
a to s&nbsp;využitím n-tice nebo seznamu:</p>

<pre>
app.setMeterFill("progressBar", ["green", "yellow"])
</pre>

<img src="https://i.iinfo.cz/images/359/appjar3-14.png" class="image-306831" alt="&#160;" width="257" height="164" />
<p><i>Obrázek 13: Explicitní nastavení dvou barevných gradientů.</i></p>

<p>Úprava zdrojového kódu příkladu je v&nbsp;tomto případě triviální:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice of scale: {s}".format(s=app.getScale("scale"))
        app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
def scaleCallback(widgetName):
    value = app.getScale(widgetName)
    app.setTitle("Scale: {v}".format(v=value))
    app.setMeter("progressBar", value)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
app.addSplitMeter("progressBar", 0, 0, colspan=2)
<strong>app.setMeterFill("progressBar", ["green", "yellow"])</strong>
&nbsp;
app.addLabelScale("scale", colspan=2)
app.showScaleIntervals("scale", 25)
app.showScaleValue("scale")
app.setScaleChangeFunction("scale", scaleCallback)
app.setScaleRange("scale", 0, 100, 50)
&nbsp;
app.addButton("Show scale value", onButtonPress, 2, 0)
app.addButton("Quit", onButtonPress, 2, 1)
&nbsp;
app.go()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Widget umožňující současné zobrazení dvou hodnot (dual meter)</h2>

<p>Další varianta widgetu <i>meter</i> spočívá v&nbsp;tom, že tento widget
zobrazí dvě na sobě nezávislé hodnoty. Nejdříve se podívejme na screenshot,
z&nbsp;něhož je patrné, jak takové zobrazení vypadá:</p>

<img src="https://i.iinfo.cz/images/359/appjar3-15.png" class="image-306832" alt="&#160;" width="257" height="227" />
<p><i>Obrázek 14: Widget meter zobrazující dvě hodnoty, jednu nalevo a druhou
napravo od společného počátku.</i></p>

<p>Tuto variantu widgetu vytvoříme následovně:</p>

<pre>
app.addDualMeter("progressBar", 0, 0, colspan=2)
</pre>

<p>Nastavíme barvu obou částí:</p>

<pre>
app.setMeterFill("progressBar", ["yellow", "red"])
</pre>

<p>A pozici (hodnoty) obou částí, opět s&nbsp;využitím n-tice nebo seznamu:</p>

<pre>
def scaleCallback(widgetName):
    value1 = app.getScale("scale1")
    value2 = app.getScale("scale2")
    app.setMeter("progressBar", [value1, value2])
</pre>

<p>Následuje zdrojový kód příkladu, v&nbsp;němž je takto upravený widget
použit:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice of scales:\n{s1}\n{s2}".format(
            s1=app.getScale("scale1"),
            s2=app.getScale("scale2"))
        app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
def scaleCallback(widgetName):
    value1 = app.getScale("scale1")
    value2 = app.getScale("scale2")
    <strong>app.setMeter("progressBar", [value1, value2])</strong>
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
<strong>app.addDualMeter("progressBar", 0, 0, colspan=2)</strong>
<strong>app.setMeterFill("progressBar", ["yellow", "red"])</strong>
&nbsp;
app.addLabelScale("scale1", colspan=2)
app.showScaleIntervals("scale1", 25)
app.showScaleValue("scale1")
&nbsp;
app.addLabelScale("scale2", colspan=2)
app.showScaleIntervals("scale2", 25)
app.showScaleValue("scale2")
&nbsp;
app.setScaleChangeFunction("scale1", scaleCallback)
app.setScaleChangeFunction("scale2", scaleCallback)
&nbsp;
app.setScaleRange("scale1", 0, 100, 50)
app.setScaleRange("scale2", 0, 100, 50)
&nbsp;
app.addButton("Show scale value", onButtonPress, 3, 0)
app.addButton("Quit", onButtonPress, 3, 1)
&nbsp;
app.go()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Widget pro výběr data</h2>

<p>Další widget, s&nbsp;nímž se dnes seznámíme, vlastně spojuje tři listboxy
určené pro výběr data. Nejedná se tedy o plnohodnotný kalendář (což je zajisté
škoda), ovšem i přesto může mít tento ovládací prvek své využití, protože
automaticky hlídá počet dnů v&nbsp;měsíci, a to i pro přestupné roky. Podívejme
se nejdříve na to, jak je tento widget zobrazen na Linuxu:</p>

<img src="https://i.iinfo.cz/images/493/appjar3b-1.png" class="image-306833" alt="&#160;" width="279" height="180" />
<p><i>Obrázek 15: Widget pro výběr data se skládá ze tří listboxů (a nevypadá
tedy příliš uživatelsky přívětivě).</i></p>

<p>Tento widget se vytvoří voláním:</p>

<pre>
app.addDatePicker("datePicker")
</pre>

<p>Pro jistotu ještě přidejte předpokládaný rozsah roků, které bude možné
vybrat:</p>

<pre>
app.setDatePickerRange("datePicker", 2000, 2017)
</pre>

<p>Vybrané datum se získá voláním:</p>

<pre>
getDatePicker("datePicker")
</pre>

<p>Podívejme se nyní na příklad, v&nbsp;němž je tento widget použitý:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
&nbsp;
&nbsp;
def showDate(btn):
    msg = "Selected date: {d}".format(d=<strong>app.getDatePicker("datePicker")</strong>)
    app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
<strong>app.addDatePicker("datePicker")</strong>
<strong>app.setDatePickerRange("datePicker", 2000, 2017)</strong>
&nbsp;
app.addButton("Show selected date", showDate, 2, 0)
app.addButton("Quit", onButtonPress, 2, 1)
&nbsp;
app.go()
</pre>

<img src="https://i.iinfo.cz/images/493/appjar3b-2.png" class="image-306834" alt="&#160;" width="284" height="119" />
<p><i>Obrázek 16: Zobrazení vybraného data.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Použití aktuálního data popř.&nbsp;explicitní určení odlišného data</h2>

<p>Widget <i>date picker</i> je možné &bdquo;donutit&ldquo; k&nbsp;zobrazení
aktuálního data po zavolání metody <strong>setDatePicker</strong>, které se
předá pouze jméno widgetu a žádný další parametr:</p>

<pre>
app.setDatePicker("datePicker")
</pre>

<p>Pokud naopak potřebujete vybrat jiné explicitně zadané datum, použijte
volání:</p>

<pre>
setDatePicker(title, date="yyyy-mm-dd)
</pre>

<img src="https://i.iinfo.cz/images/493/appjar3b-3.png" class="image-306835" alt="&#160;" width="279" height="180" />
<p><i>Obrázek 17: Nastavení aktuálního data (ve chvíli přípravy článku).</i></p>

<p>Podívejme se nyní na příklad, jenž po svém spuštění zobrazí aktuální
datum:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
&nbsp;
&nbsp;
def showDate(btn):
    msg = "Selected date: {d}".format(d=app.getDatePicker("datePicker"))
    app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
app.addDatePicker("datePicker")
app.setDatePickerRange("datePicker", 2000, 2018)
&nbsp;
# toto volani musi byt umisteno za predchozi prikaz!
app.setDatePicker("datePicker")
&nbsp;
app.addButton("Show selected date", showDate, 2, 0)
app.addButton("Quit", onButtonPress, 2, 1)
&nbsp;
app.go()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Widget umožňující uchopení a přesun okna</h2>

<p>Předposlední widget, který si dnes popíšeme, umožňuje uchopení a přesun
okna; není tedy nutné používat část okna s&nbsp;titulkem. Tento widget se
vytvoří velmi jednoduše:</p>

<pre>
app.addGrip()
</pre>

<img src="https://i.iinfo.cz/images/493/appjar3b-4.png" class="image-306836" alt="&#160;" width="217" height="158" />
<p><i>Obrázek 18: Widget umožňující uchopení a přesun okna.</i></p>

<p>Chování tohoto widgetu si můžeme sami jednoduše odzkoušet, ovšem jeho reálné
použití může být problematické, protože tento ovládací prvek uživatelé
pravděpodobně nebudou znát:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
app.addLabel("topLabel", "\u25bc", 0, 1)
app.addLabel("leftLabel", "grip \u25b6", 1, 0)
app.addLabel("rightLabel", "\u25c0 grip", 1, 2)
app.addLabel("bottomLabel", "\u25b2", 2, 1)
<strong>app.addGrip(1, 1)</strong>
&nbsp;
app.addButton("Quit", onButtonPress, 4, 1)
&nbsp;
app.go()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Horizontální a vertikální oddělovač widgetů</h2>

<p>Do dialogů lze vložit horizontální a vertikální oddělovače, což je ostatně
patrné při pohledu na další screenshot:</p>

<img src="https://i.iinfo.cz/images/493/appjar3b-5.png" class="image-306837" alt="&#160;" width="321" height="259" />
<p><i>Obrázek 18: Horizontální a vertikální oddělovače widgetů.</i></p>

<p>Tyto oddělovače se vytváří metodami:</p>

<pre>
app.addHorizontalSeparator(y, x, colspan=2, colour="blue")
&nbsp;
app.addVerticalSeparator(y, x, rowspan=6)
</pre>

<p>Z&nbsp;příkladů volání je patrné, že se oddělovače pozicují stejně, jako
všechny ostatní widgety:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
&nbsp;
&nbsp;
def onButtonPress(buttonName):
    if buttonName == "Quit":
        app.stop()
    else:
        msg = "Your choice of scales:\n{s1}\n{s2}".format(
            s1=app.getScale("scale1"),
            s2=app.getScale("scale2"))
        app.infoBox("Show scale:", msg)
&nbsp;
&nbsp;
def scaleCallback(widgetName):
    value1 = app.getScale("scale1")
    value2 = app.getScale("scale2")
    app.setMeter("progressBar", [value1, value2])
&nbsp;
&nbsp;
app = gui()
&nbsp;
app.setSticky("news")
app.setPadding(10, 2)
&nbsp;
app.addDualMeter("progressBar", 0, 1, colspan=2)
app.setMeterFill("progressBar", ["yellow", "red"])
&nbsp;
<strong>app.addHorizontalSeparator(1, 1, colspan=2, colour="blue")</strong>
&nbsp;
<strong>app.addVerticalSeparator(0, 0, rowspan=6)</strong>
<strong>app.addVerticalSeparator(0, 3, rowspan=6)</strong>
&nbsp;
app.addLabelScale("scale1", 2, 1, colspan=2)
app.showScaleIntervals("scale1", 25)
app.showScaleValue("scale1")
&nbsp;
app.addLabelScale("scale2", 3, 1, colspan=2)
app.showScaleIntervals("scale2", 25)
app.showScaleValue("scale2")
&nbsp;
<strong>app.addHorizontalSeparator(4, 1, colspan=2, colour="green")</strong>
&nbsp;
app.setScaleChangeFunction("scale1", scaleCallback)
app.setScaleChangeFunction("scale2", scaleCallback)
&nbsp;
app.setScaleRange("scale1", 0, 100, 50)
app.setScaleRange("scale2", 0, 100, 50)
&nbsp;
app.addButton("Show scale value", onButtonPress, 5, 1)
app.addButton("Quit", onButtonPress, 5, 2)
&nbsp;
app.go()
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech sedmnácti dnes popsaných demonstračních příkladů
naleznete pod následujícími odkazy:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>24_scale.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/24_scale.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/24_scale.py</a></td></tr>
<tr><td>25_scale_show_intervals.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/25_scale_show_intervals.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/25_scale_show_intervals.py</a></td></tr>
<tr><td>26_scale_show_value.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/26_scale_show_value.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/26_scale_show_value.py</a></td></tr>
<tr><td>27_scale_range.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/27_scale_range.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/27_scale_range.py</a></td></tr>
<tr><td>28_vertical_scale.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/28_vertical_scale.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/28_vertical_scale.py</a></td></tr>
<tr><td>29_scale_function.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/29_scale_function.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/29_scale_function.py</a></td></tr>
<tr><td>30_meter.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/30_meter.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/30_meter.py</a></td></tr>
<tr><td>31_active_meter.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/31_active_meter.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/31_active_meter.py</a></td></tr>
<tr><td>32_meter_fill.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/32_meter_fill.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/32_meter_fill.py</a></td></tr>
<tr><td>33_meter_update.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/33_meter_update.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/33_meter_update.py</a></td></tr>
<tr><td>34_split_meter.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/34_split_meter.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/34_split_meter.py</a></td></tr>
<tr><td>35_split_meter_color.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/35_split_meter_color.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/35_split_meter_color.py</a></td></tr>
<tr><td>36_dual_meter.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/36_dual_meter.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/36_dual_meter.py</a></td></tr>
<tr><td>37_date_picker.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/37_date_picker.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/37_date_picker.py</a></td></tr>
<tr><td>38_set_date_picker.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/38_set_date_picker.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/38_set_date_picker.py</a></td></tr>
<tr><td>39_grip.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/39_grip.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/39_grip.py</a></td></tr>
<tr><td>40_separator.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/40_separator.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/40_separator.py</a></td></tr>
</table>

<p>Poznámka: pro úspěšné spuštění těchto příkladů musíte mít v&nbsp;aktuálním
adresáři rozbalenou knihovnu <i>appJar</i>!. Podrobnosti jsme si řekli <a
href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-appjar/">v&nbsp;úvodním
článku</a>.</p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

