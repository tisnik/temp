<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Práce s&nbsp;vektorovým formátem SVG ve frameworku PySide</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Práce s&nbsp;vektorovým formátem SVG ve frameworku PySide</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;dnešním článku o frameworku PySide se seznámíme s&nbsp;použitím formátu SVG (Scalable Vector Graphics), a to jak při zobrazování jednotlivých widgetů, tak i při rasterizaci SVG do bitmapového obrázku (QBitmap, QPixmap).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Práce s&nbsp;vektorovým formátem SVG ve frameworku PySide</a></p>
<p><a href="#k02">2. Pomocný skript určený pro vytvoření vektorového obrázku uloženého ve formátu SVG</a></p>
<p><a href="#k03">3. Třída <strong>QSvgWidget</strong> představující prvek GUI pro zobrazení SVG</a></p>
<p><a href="#k04">4. První demonstrační příklad &ndash; použití třídy <strong>QSvgWidget</strong> pro zobrazení vektorové kresby</a></p>
<p><a href="#k05">5. SVG výkres uložený v&nbsp;poli bajtů</a></p>
<p><a href="#k06">6. Druhý demonstrační příklad: použití SVG uloženého v&nbsp;poli bajtů</a></p>
<p><a href="#k07">7. Formát SVG použitý pro uložení vektorových ikon</a></p>
<p><a href="#k08">8. Třetí demonstrační příklad &ndash; tlačítka s&nbsp;vektorovými ikonami</a></p>
<p><a href="#k09">9. Změna rozměrů vektorových ikon</a></p>
<p><a href="#k10">10. Čtvrtý demonstrační příklad &ndash; vektorové ikony s&nbsp;pevně nastavenými rozměry</a></p>
<p><a href="#k11">11. Vektorové ikony ve standardních dialozích</a></p>
<p><a href="#k12">12. Pátý demonstrační příklad &ndash; standardní dialog s&nbsp;vektorovou ikonou</a></p>
<p><a href="#k13">13. Použití SVG při vykreslování rastrové i vektorové grafiky s&nbsp;použitím třídy <strong>QPainter</strong></a></p>
<p><a href="#k14">14. Rasterizace SVG &ndash; třída <strong>QSvgRenderer</strong></a></p>
<p><a href="#k15">15. Šestý demonstrační příklad &ndash; vykreslení SVG do obrázku typu <strong>QImage</strong></a></p>
<p><a href="#k16">16. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k17">17. Články o možnostech a vlastnostech formátu SVG</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Práce s&nbsp;vektorovým formátem SVG ve frameworku PySide</h2>

<p>S&nbsp;možnostmi nabízenými populárním vektorovým formátem <a
href="https://www.w3.org/Graphics/SVG/">SVG</a> (<i>Scalable Vector
Graphics</i>) jsme se již na stránkách Rootu seznámili, viz též odkazy na
příslušné články, které najdete <a href="#k17">v&nbsp;sedmnácté kapitole</a>.
Formát SVG, resp.&nbsp;obecněji řečeno vektorová grafika, je ve frameworku
PySide podporována, a to dokonce na několika úrovních. V&nbsp;první řadě je
podporováno vykreslení (rasterizace) vektorové kresby do bitmapového obrázku
typu <strong>QBitmap</strong> či mnohem častěji do <strong>QPixmap</strong>. To
je sice pro některé typy aplikací skutečně užitečná vlastnost, ovšem
zajímavější a praktičtější je možnost použít vektorové kresby uložené ve
formátu SVG i při vykreslování jednotlivých ovládacích prvků (widgetů). Je tomu
tak z&nbsp;toho důvodu, že aplikace může být provozována na zařízeních
s&nbsp;různou velikostí a rozlišením displeje, od starších smartphonů až po
desktopy.</p>

<p>Na tomto místě je ovšem nutno říci, že ze striktního pohledu PySide sice
není celé postaveno na vektorové grafice a tudíž GUI nemusí být plně
škálovatelné, ale pokud se všechny bitmapové ikony nahradí za SVG (což již
možné je, a to dokonce velmi jednoduše), lze zbytek grafického uživatelského
rozhraní nastylovat způsobem, který jsme si popsali již v&nbsp;předchozích dvou
článcích [<a
href="https://www.root.cz/clanky/nastaveni-stylu-vykreslovani-widgetu-oken-i-dialogu-v-knihovne-pyside/">1</a>]
[<a
href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-pouziti-kaskadovych-stylu-v-pyside/">2</a>].</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Pomocný skript určený pro vytvoření vektorového obrázku uloženého ve formátu SVG</h2>

<p>Ještě předtím, než si popíšeme, jakým způsobem je možné vektorové kresby
uložené ve formátu SVG použít v&nbsp;grafickém uživatelském rozhraní, si ukažme
jednoduchý skript (napsaný samozřejmě v&nbsp;Pythonu), který ukázkovou
vektorovou kresbu vytvoří. Tento skript nepoužívá žádnou specializovanou
knihovnu, ale generuje SVG řádek po řádku jen s&nbsp;využitím základních
nástrojů pro formátování řetězců. Následuje výpis zdrojového kódu tohoto
krátkého skriptu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from math import sin, cos
&nbsp;
&nbsp;
def <strong>main</strong>():
    size = 480
    with open("logo.svg", "w") as fout:
        fout.write("&lt;svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='{w}' height='{h}'&gt;\n".format(w=size, h=size))
        green = 255
        for i, r, red, blue in zip(range(0, 128), range(128, 0, -1), range(255, 0, -2), range(0, 256, 2)):
            a = i / 12.0
            b = i + 80.0
            x = size / 2 + b * cos(a)
            y = size / 2 + b * sin(a)
            p = "&lt;circle cx='{x}' cy='{y}' r='{r}' ".format(x=x, y=y, r=r)
            q = "fill='rgb({r}, {g}, {b})' style='fill-opacity:.06'/&gt;\n".format(r=red, g=green, b=blue)
            r = "fill='none' stroke='black'/&gt;\n"
            fout.write(p+q)
            fout.write(p+r)
&nbsp;
        fout.write("&lt;/svg&gt;\n")
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

<img src="https://i.iinfo.cz/images/477/pyside18-1.png" class="image-324649" alt="&#160;" width="450" height="450" />
<p><i>Obrázek 1: Výsledná kresba uložená do formátu SVG.</i></p>

<p>Soubor typu SVG vygenerovaný tímto skriptem by měl vypadat přibližně takto (je zobrazen jen jeho začátek a konec):</p>

<pre>
&lt;svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='480' height='480'&gt;
&lt;circle cx='320.0' cy='240.0' r='128' fill='rgb(255, 255, 0)' style='fill-opacity:.06'/&gt;
&lt;circle cx='320.0' cy='240.0' r='128' fill='none' stroke='black'/&gt;
...
...
...
&lt;/svg&gt;
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Třída <strong>QSvgWidget</strong> představující prvek GUI pro zobrazení SVG</h2>

<p>Nyní se podívejme na způsob zobrazení vektorové kresby v&nbsp;grafickém
uživatelském rozhraní. Pro tento účel existuje ve frameworku PySide ovládací
prvek nazvaný přímočaře <a
href="https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgWidget.html">QSvgWidget</a>.
Vzhledem k&nbsp;tomu, že se jedná o potomka třídy <a
href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">QWidget</a>,
znamená to, že je možné tento widget vložit do libovolného okna či dialogu.
Vlastní vykreslování SVG je prováděno v&nbsp;závislosti na možnostech
konkrétního zařízení: buď čistě softwarově nebo rasterizací na grafickém
akcelerátoru. Aby byla třída <strong>QSvgWidget</strong> užitečná, obsahuje i
metodu <strong>load()</strong> určenou pro načtení kresby ve formátu SVG, a to
buď ze souboru nebo z&nbsp;pole bajtů, které je ve frameworku PySide
reprezentováno objekty typu <a
href="https://pyside.github.io/docs/pyside/PySide/QtCore/QByteArray.html">QByteArray</a>.</p>

<p>Nejprve si ukážeme, jakým způsobem se načte SVG z&nbsp;externího souboru.
Díky existenci výše zmíněné metody <strong>load()</strong> je to triviální.
Funkce, která vytvoří objekt typu <strong>QSvgWidget</strong> a načte do něj
externí SVG soubor, může vypadat takto:</p>

<pre>
def <strong>prepareSVGWidget</strong>(self, filename):
    svgWidget = QtSvg.QSvgWidget()
    svgWidget.load(filename)
    return svgWidget
</pre>

<p>Umístění tohoto widgetu do okna s&nbsp;dalšími prvky grafického
uživatelského rozhraní se provádí naprosto stejným způsobem, jako u všech
dalších ovládacích prvků:</p>

<pre>
def <strong>prepareGUI</strong>(self):
    <i># tlačítka, na které je navázán handler</i>
    quitButton = self.prepareQuitButton()
&nbsp;
    <i># widget s vektorovým obrázkem</i>
    svgWidget = self.prepareSVGWidget("logo.svg")
&nbsp;
    <i># vytvoření správců geometrie</i>
    topLayout = QtGui.QVBoxLayout()
&nbsp;
    <i># vložení widgetů do okna</i>
    topLayout.addWidget(svgWidget)
    topLayout.addWidget(QtGui.QLabel(""))
    topLayout.addWidget(quitButton)
&nbsp;
    <i># nastavení správce geometrie a vložení všech komponent do okna</i>
    self.setLayout(topLayout)
</pre>

<a href="https://www.root.cz/obrazek/324650/"><img src="https://i.iinfo.cz/images/477/pyside18-2-prev.png" class="image-324650" alt="&#160;" width="215" height="270" /></a>
<p><i>Obrázek 2: Ovládací prvek typu <strong>QSvgWidget</strong> vložený do
hlavního okna aplikace.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První demonstrační příklad &ndash; použití třídy <strong>QSvgWidget</strong> pro zobrazení vektorové kresby</h2>

<p><a href="#k03">Výše uvedené</a> úryvky kódu určeného pro načtení a následné
zobrazení kresby uložené ve formátu SVG jsou použity v&nbsp;dnešním <a
href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/146_svg_widget.py">prvním
demonstračním příkladu</a>, jehož úplný zdrojový kód můžete vidět pod tímto
odstavcem. Po zobrazení hlavního okna aplikace se pokuste změnit jeho velikost
a zjistit, zda a jakým způsobem tento widget reaguje na změnu své
velikosti:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
from PySide import QtSvg
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># widget s vektorovým obrázkem</i>
        svgWidget = self.prepareSVGWidget("logo.svg")
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vložení widgetů do okna</i>
        topLayout.addWidget(svgWidget)
        topLayout.addWidget(QtGui.QLabel(""))
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareSVGWidget</strong>(self, filename):
        svgWidget = QtSvg.QSvgWidget()
        svgWidget.load(filename)
        return svgWidget
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(400, 300)</i>
        self.setWindowTitle("Custom Stylesheets")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    QtGui.QApplication.setStyle("plastique")
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. SVG výkres uložený v&nbsp;poli bajtů</h2>

<p>Z&nbsp;předchozího textu již víme, jak lze provést načtení kresby přímo
z&nbsp;externího souboru metodou <strong>QSvgWidget.load()</strong>. Existuje
však ještě jedna varianta &ndash; získání kresby z&nbsp;pole bajtů, které je ve
frameworku PySide reprezentováno objekty typu <a
href="https://pyside.github.io/docs/pyside/PySide/QtCore/QByteArray.html">QByteArray</a>.
Tato třída je v&nbsp;některých případech a některými programátory (často
například C++kaři) používána například při psaní kódu, v&nbsp;němž se sdílí
větší bloky dat. Je tomu tak z&nbsp;toho důvodu, že <strong>QByteArray</strong>
podporuje takzvané <i>implicitní sdílení</i> neboli <a
href="https://en.wikipedia.org/wiki/Copy-on-write">copy-on-write</a>, takže
v&nbsp;případě, že se data používaná na více místech nemění, nedochází
k&nbsp;jejich zbytečnému klonování. Ovšem pole bajtů se může hodit i
v&nbsp;dalších oblastech, například tehdy, kdy je nutné modifikovat znaky
v&nbsp;delší řetězci (klasické řetězce v&nbsp;Pythonu jsou totiž neměnitelné,
takže některé operace s&nbsp;nimi nemusí být příliš efektivní).</p>

<p>Nicméně se podívejme na (poněkud umělý) příklad, v&nbsp;němž se vektorový
obrázek nejdříve načte do pole bajtů a teprve poté se toto pole bajtů předá do
metody <strong>QSvgWidget.load()</strong>:</p>

<pre>
def <strong>prepareSVGWidget</strong>(self):
    svgWidget = QtSvg.QSvgWidget()
    content = QtCore.QByteArray("""
        &lt;svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='480' height='480'&gt;
        &lt;circle cx='320.0' cy='240.0' r='128' fill='rgb(0, 255, 255)' style='fill-opacity:.25'/&gt;
        &lt;circle cx='320.0' cy='240.0' r='128' fill='none' stroke='black'/&gt;
        &lt;circle cx='254.891453105' cy='335.850115412' r='111' fill='rgb(221, 34, 255)' style='fill-opacity:.25'/&gt;
        &lt;circle cx='254.891453105' cy='335.850115412' r='111' fill='none' stroke='black'/&gt;
        &lt;circle cx='140.39542436' cy='291.214534183' r='96' fill='rgb(255, 191, 64)' style='fill-opacity:.25'/&gt;
        &lt;circle cx='140.39542436' cy='291.214534183' r='96' fill='none' stroke='black'/&gt;
        &lt;/svg&gt;
    """)
    svgWidget.load(content)
    return svgWidget
</pre>

<a href="https://www.root.cz/obrazek/324651/"><img src="https://i.iinfo.cz/images/477/pyside18-3-prev.png" class="image-324651" alt="&#160;" width="215" height="270" /></a>
<p><i>Obrázek 3: Druhý demonstrační příklad s&nbsp;jednoduchou vektorovou kresbou.</i></p>

<p>Poznámka: ve skutečnosti většinou není explicitní použití objektu typu
<strong>QByteArray</strong> nezbytné, protože je možné přímo použít typy
<strong>bytes</strong> popř.&nbsp;<strong>bytearray</strong>. Bližší informace
o tom, jak jsou mapovány nativní typy Pythonu na objekty v&nbsp;PySide, lze
v&nbsp;případě potřeby nalézt v&nbsp;dokumentu <a
href="https://github.com/techtonik/pseps/blob/master/psep-0101.txt">psep-0101.txt</a>
(jedná se o užitečný dokument, zejména ve chvíli, kdy je nutné přepsat nějakou
část programu psanou v&nbsp;C++ a Qt do PySide).</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Druhý demonstrační příklad: použití SVG uloženého v&nbsp;poli bajtů</h2>

<p>Opět si, nyní pouze pro úplnost, ukažme, jakým způsobem je možné tento kód
použít v&nbsp;ucelenější aplikaci. Aby nebyl kód příliš dlouhý, obsahuje SVG
výkres použitý <a
href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/147_svg_widget_content.py">ve
druhém demonstračním příkladu</a> jen několik geometrických entit:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
from PySide import QtSvg
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># widget s vektorovým obrázkem</i>
        svgWidget = self.prepareSVGWidget()
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vložení widgetů do okna</i>
        topLayout.addWidget(svgWidget)
        topLayout.addWidget(QtGui.QLabel(""))
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareSVGWidget</strong>(self):
        svgWidget = QtSvg.QSvgWidget()
        content = QtCore.QByteArray("""
            &lt;svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='480' height='480'&gt;
            &lt;circle cx='320.0' cy='240.0' r='128' fill='rgb(0, 255, 255)' style='fill-opacity:.25'/&gt;
            &lt;circle cx='320.0' cy='240.0' r='128' fill='none' stroke='black'/&gt;
            &lt;circle cx='254.891453105' cy='335.850115412' r='111' fill='rgb(221, 34, 255)' style='fill-opacity:.25'/&gt;
            &lt;circle cx='254.891453105' cy='335.850115412' r='111' fill='none' stroke='black'/&gt;
            &lt;circle cx='140.39542436' cy='291.214534183' r='96' fill='rgb(255, 191, 64)' style='fill-opacity:.25'/&gt;
            &lt;circle cx='140.39542436' cy='291.214534183' r='96' fill='none' stroke='black'/&gt;
            &lt;/svg&gt;
        """)
        svgWidget.load(content)
        return svgWidget
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(400, 300)</i>
        self.setWindowTitle("Custom Stylesheets")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    QtGui.QApplication.setStyle("plastique")
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Formát SVG použitý pro uložení vektorových ikon</h2>

<p>Další forma podpory formátu SVG ve frameworku PySide se již přímo dotýká
grafického uživatelského rozhraní. PySide totiž podporuje načítání vektorových
obrázků do ikon, přesněji řečeno do instancí třídy <strong>QIcon</strong>. Je
to opět velmi jednoduché &ndash; pokud se konstruktoru <strong>QIcon</strong>
předá jméno souboru se SVG výkresem, je výkres či kresba načtena, rasterizována
a použita jako ikona. Ukažme si to na příkladu pomocné metody sloužící pro
vytvoření tlačítka typu <strong>QPushButton</strong> s&nbsp;ikonou. Tlačítko se
nejdříve běžným způsobem vytvoří a následně se mu přiřadí ikona:</p>

<pre>
def <strong>prepareButtonWithIcon</strong>(self, label, filename):
    icon = QtGui.QIcon(filename)
    button = QtGui.QPushButton(label)
    button.setIcon(icon)
    return button
</pre>

<p>Voláním této metody můžeme vytvořit tlačítka s&nbsp;ikonami a názvy tří
populárních textových editorů:</p>

<pre>
<i># widgety s vektorovým obrázkem</i>
vimButton = self.prepareButtonWithIcon("Vim", "editors/vim.svg")
emacsButton = self.prepareButtonWithIcon("Emacs", "editors/emacs.svg")
atomButton = self.prepareButtonWithIcon("Atom", "editors/atom.svg")
</pre>

<p>Následně můžeme tato tlačítka vložit do hlavního okna aplikace:</p>

<pre>
<i># vytvoření správců geometrie</i>
topLayout = QtGui.QVBoxLayout()
&nbsp;
<i># vložení widgetů do okna</i>
topLayout.addWidget(QtGui.QLabel("Select editor:"))
topLayout.addWidget(vimButton)
topLayout.addWidget(emacsButton)
topLayout.addWidget(atomButton)
topLayout.addWidget(QtGui.QLabel(""))
topLayout.addWidget(quitButton)
&nbsp;
<i># nastavení správce geometrie a vložení všech komponent do okna</i>
self.setLayout(topLayout)
</pre>

<p>Výsledek může vypadat například takto (v&nbsp;závislosti na použitém
stylu):</p>

<img src="https://i.iinfo.cz/images/477/pyside18-4.png" class="image-324652" alt="&#160;" width="202" height="286" />
<p><i>Obrázek 4: Třetí demonstrační příklad s&nbsp;vektorovými ikonami.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Třetí demonstrační příklad &ndash; tlačítka s&nbsp;vektorovými ikonami</h2>

<p><a
href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/148_svg_as_icon.py">V&nbsp;dnešním
třetím demonstračním příkladu</a> je ukázáno, jak je možné použít formát SVG
pro uložení vektorových ikon, které jsou následně zobrazeny u tlačítek typu
<strong>QPushButton</strong>. Povšimněte si, že použití vektorových ikon je
prakticky stejně snadné jako použití ikon reprezentovaných rastrovými
obrázky:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
from PySide import QtSvg
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># widgety s vektorovým obrázkem</i>
        vimButton = self.prepareButtonWithIcon("Vim", "editors/vim.svg")
        emacsButton = self.prepareButtonWithIcon("Emacs", "editors/emacs.svg")
        atomButton = self.prepareButtonWithIcon("Atom", "editors/atom.svg")
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vložení widgetů do okna</i>
        topLayout.addWidget(QtGui.QLabel("Select editor:"))
        topLayout.addWidget(vimButton)
        topLayout.addWidget(emacsButton)
        topLayout.addWidget(atomButton)
        topLayout.addWidget(QtGui.QLabel(""))
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareButtonWithIcon</strong>(self, label, filename):
        icon = QtGui.QIcon(filename)
        button = QtGui.QPushButton(label)
        button.setIcon(icon)
        return button
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(400, 300)</i>
        self.setWindowTitle("Custom Stylesheets")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    QtGui.QApplication.setStyle("plastique")
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Změna rozměrů vektorových ikon</h2>

<p>Nevýhodou předchozího příkladu bylo to, že ikony umístěné na tlačítkách,
byly dosti malé, a to přesto, že vektorové výkresy/kresby je možné
v&nbsp;případě potřeby prakticky libovolně škálovat (zvětšovat, zmenšovat,
rotovat atd.). Pokud budeme chtít změnit rozměr ikon na tlačítkách, je nutné
použít metodu <strong>setIconSize</strong>, která ovšem nepřísluší třídě
<strong>QIcon</strong>, ale třídě <strong>QPushButton</strong> (zcela přesně
řečeno třídě <strong>QAbstractButton</strong>). Podívejme se tedy, jak lze
ikony zvětšit na rozměry 80&times;80 pixelů, kde již budou loga textových
editorů jasně rozpoznatelná:</p>

<pre>
def <strong>prepareButtonWithIcon</strong>(self, label, filename):
    icon = QtGui.QIcon(filename)
    button = QtGui.QPushButton(label)
    button.setIcon(icon)
    button.setIconSize(QtCore.QSize(80, 80))
    return button
</pre>

<img src="https://i.iinfo.cz/images/477/pyside18-5.png" class="image-324653" alt="&#160;" width="202" height="478" />
<p><i>Obrázek 5: Čtvrtý demonstrační příklad s&nbsp;vektorovými ikonami, u
nichž byly explicitně nastaveny rozměry.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Čtvrtý demonstrační příklad &ndash; vektorové ikony s&nbsp;pevně nastavenými rozměry</h2>

<p>Opět si ukažme úplný zdrojový kód <a
href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/149_svg_as_resized_icon.py">(dnes
již čtvrtého) demonstračního příkladu</a>, tentokrát pro situaci, kdy budeme
vyžadovat zobrazení tlačítek s&nbsp;ikonami o rozměrech 80&times;80 pixelů:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
from PySide import QtSvg
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># widgety s vektorovým obrázkem</i>
        vimButton = self.prepareButtonWithIcon("Vim", "editors/vim.svg")
        emacsButton = self.prepareButtonWithIcon("Emacs", "editors/emacs.svg")
        atomButton = self.prepareButtonWithIcon("Atom", "editors/atom.svg")
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vložení widgetů do okna</i>
        topLayout.addWidget(QtGui.QLabel("Select editor:"))
        topLayout.addWidget(vimButton)
        topLayout.addWidget(emacsButton)
        topLayout.addWidget(atomButton)
        topLayout.addWidget(QtGui.QLabel(""))
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareButtonWithIcon</strong>(self, label, filename):
        icon = QtGui.QIcon(filename)
        button = QtGui.QPushButton(label)
        button.setIcon(icon)
        button.setIconSize(QtCore.QSize(80, 80))
        return button
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(400, 300)</i>
        self.setWindowTitle("Custom Stylesheets")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    QtGui.QApplication.setStyle("plastique")
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vektorové ikony ve standardních dialozích</h2>

<p>Vektorové ikony načtené ze souborů SVG se samozřejmě mohou použít i ve
standardních dialozích namísto výchozích ikon. V&nbsp;tomto případě ale musíme
postupovat ve více krocích a vlastně provést rasterizaci explicitně. Nejdříve
načteme příslušný SVG soubor a vytvoříme z&nbsp;něho ikonu:</p>

<pre>
<i># načtení ikony</i>
icon = QtGui.QIcon(filename)
</pre>

<p>Dále provedeme rasterizaci do bitmapy či pixmapy o zadané velikosti:</p>

<pre>
<i># vytvoření pixmapy a její nastavení jako ikony pro dialog</i>
pixmap = icon.pixmap(200, 200)
</pre>

<p>Následně ikonu přiřadíme příslušnému dialogu:</p>

<pre>
<i># vytvoření dialogu</i>
msgBox = QtGui.QMessageBox()
&nbsp;
msgBox.setIconPixmap(pixmap)
</pre>

<p>Celá funkce, která vytvoří standardní dialog, nakonfiguruje u něj tlačítka
(zde jedno tlačítko Ok), načte do něj vektorovou ikonu a dialog následně
zobrazí, může vypadat takto:</p>

<pre>
def <strong>showMessageBox</strong>(self, filename):
    <i># tlačítko, která mají být součástí dialogu</i>
    buttons = QtGui.QMessageBox.Ok
&nbsp;
    <i># vytvoření dialogu</i>
    msgBox = QtGui.QMessageBox()
&nbsp;
    <i># nastavení zprávy a ikony, která se má zobrazit vedle zprávy</i>
    msgBox.setStandardButtons(buttons)
    msgBox.setText(u'')
&nbsp;
    <i># načtení ikony</i>
    icon = QtGui.QIcon(filename)
&nbsp;
    <i># vytvoření pixmapy a její nastavení jako ikony pro dialog</i>
    pixmap = icon.pixmap(200, 200)
    msgBox.setIconPixmap(pixmap)
&nbsp;
    <i># zobrazení dialogu</i>
    msgBox.exec_()
</pre>

<img src="https://i.iinfo.cz/images/477/pyside18-6.png" class="image-324654" alt="&#160;" width="238" height="283" />
<p><i>Obrázek 6: Standardní dialog vytvořený v&nbsp;pátém demonstračním
příkladu.</i></p>

<img src="https://i.iinfo.cz/images/477/pyside18-7.png" class="image-324655" alt="&#160;" width="238" height="243" />
<p><i>Obrázek 7: Standardní dialog vytvořený v&nbsp;pátém demonstračním
příkladu.</i></p>

<img src="https://i.iinfo.cz/images/477/pyside18-8.png" class="image-324656" alt="&#160;" width="238" height="266" />
<p><i>Obrázek 8: Standardní dialog vytvořený v&nbsp;pátém demonstračním
příkladu.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Pátý demonstrační příklad &ndash; standardní dialog s&nbsp;vektorovou ikonou</h2>

<p>Způsob vytvoření dialogu, v&nbsp;němž je použita vektorová ikona, je ukázán
v&nbsp;dnešním <a
href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/150_message_box_with_svg_icon.py">pátém
demonstračním příkladu</a>, jehož zdrojový kód je zobrazen pod tímto
odstavcem:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
from PySide import QtSvg
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítka, na které je navázán handler</i>
        quitButton = self.prepareQuitButton()
&nbsp;
        <i># widgety s vektorovým obrázkem</i>
        vimButton = self.prepareButtonWithIcon("Vim", "editors/vim.svg")
        emacsButton = self.prepareButtonWithIcon("Emacs", "editors/emacs.svg")
        atomButton = self.prepareButtonWithIcon("Atom", "editors/atom.svg")
&nbsp;
        <i># vytvoření správců geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vložení widgetů do okna</i>
        topLayout.addWidget(QtGui.QLabel("Select editor:"))
        topLayout.addWidget(vimButton)
        topLayout.addWidget(emacsButton)
        topLayout.addWidget(atomButton)
        topLayout.addWidget(QtGui.QLabel(""))
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareButtonWithIcon</strong>(self, label, filename):
        icon = QtGui.QIcon(filename)
        button = QtGui.QPushButton(label)
        button.setIcon(icon)
        button.setIconSize(QtCore.QSize(40, 40))
&nbsp;
        <i># navázání akce na signál</i>
        button.clicked.connect(lambda :self.showMessageBox(filename))
        return button
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko s popisem</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showMessageBox</strong>(self, filename):
        <i># tlačítko, která mají být součástí dialogu</i>
        buttons = QtGui.QMessageBox.Ok
&nbsp;
        <i># vytvoření dialogu</i>
        msgBox = QtGui.QMessageBox()
&nbsp;
        <i># nastavení zprávy a ikony, která se má zobrazit vedle zprávy</i>
        msgBox.setStandardButtons(buttons)
        msgBox.setText(u'')
&nbsp;
        <i># načtení ikony</i>
        icon = QtGui.QIcon(filename)
&nbsp;
        <i># vytvoření pixmapy a její nastavení jako ikony pro dialog</i>
        pixmap = icon.pixmap(200, 200)
        msgBox.setIconPixmap(pixmap)
&nbsp;
        <i># zobrazení dialogu</i>
        msgBox.exec_()
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(400, 300)</i>
        self.setWindowTitle("Custom Stylesheets")
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    QtGui.QApplication.setStyle("plastique")
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Použití SVG při vykreslování rastrové i vektorové grafiky s&nbsp;použitím třídy <strong>QPainter</strong></h2>

<p>Výkresy či kresby uložené ve formátu SVG je možné použít i při vykreslování
rastrové a vektorové grafiky. Již z&nbsp;předchozích článků víme, že
vykreslování se provádí s&nbsp;využitím instance třídy
<strong>QPainter</strong>. Připomeňme si jen, jak celý postup vypadá.</p>

<p>Nejdříve se vytvoří instance třídy <strong>QImage</strong>, do níž se bude
vykreslování provádět:</p>

<pre>
<i># vytvoření instance třídy QImage</i>
self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                          MainWindow.IMAGE_HEIGHT,
                          QtGui.QImage.Format_RGB32)
</pre>

<p>Následně se získá instance třídy <strong>QPainter</strong>:</p>

<pre>
<i># vytvoření objektu typu QPainter s předáním</i>
<i># reference na "pokreslovaný" objekt</i>
qp = QtGui.QPainter(self.image)
</pre>

<p>Nyní je již možné vykreslit celou scénu, například:</p>

<pre>
<i># nastavení barvy kreslení</i>
qp.setPen(QtGui.QColor(64, 255, 64))
<i># vykreslení úsečky</i>
qp.drawLine(10, 10, MainWindow.IMAGE_WIDTH-10, MainWindow.IMAGE_HEIGHT-10)
</pre>

<p>A nakonec získat výsledný rastrový obrázek:</p>

<pre>
<i># vytvoření instance třídy QPixmap z objektu QImage</i>
return QtGui.QPixmap.fromImage(self.image)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Rasterizace SVG &ndash; třída <strong>QSvgRenderer</strong></h2>

<p>Ve chvíli, kdy existuje instance třídy <strong>QPainter</strong>, je možné
načíst a vykreslit i SVG výkres. V&nbsp;tomto případě ale nepoužijeme ani třídu
<strong>QIcon</strong> ani <strong>QSvgWidget</strong>, ale je nutné použít
třídu nazvanou <strong>QSvgRenderer</strong>. I tato třída dokáže načíst
externí výkres/kresbu, ovšem navíc obsahuje i metodu <strong>render</strong>,
které lze předat referenci na objekt typu <strong>QPainter</strong>. Ve
skutečnosti je celé vykreslení jednoduché:</p>

<pre>
qp = QtGui.QPainter(self.image)
...
...
...
renderer = QtSvg.QSvgRenderer("logo.svg")
renderer.render(qp)
...
...
...
return QtGui.QPixmap.fromImage(self.image)
</pre>

<img src="https://i.iinfo.cz/images/477/pyside18-9.png" class="image-324657" alt="&#160;" width="258" height="323" />
<p><i>Obrázek 9: Šestý demonstrační příklad, v&nbsp;níž se do obrázku
vykreslila i kresba uložená v&nbsp;SVG.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Šestý demonstrační příklad &ndash; vykreslení SVG do obrázku typu <strong>QImage</strong></h2>

<p>V&nbsp;dnešním <a
href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/151_svg_renderer.py">šestém</a>
a současně i posledním demonstračním příkladu je ukázáno, jak je možné vytvořit
objekt typu <strong>QPainter</strong>, vykreslit nějaké geometrické tvary (či
text, popř.&nbsp;změnit jednotlivé pixely) a následně ještě rasterizovat obsah
SVG výkresu. Zdrojový kód tohoto příkladu je zobrazen pod odstavcem:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
from PySide import QtSvg
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 256
    IMAGE_HEIGHT = 256
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
        <i># nastavení barvy kreslení</i>
        qp.setPen(QtGui.QColor(64, 255, 64))
        <i># vykreslení úsečky</i>
        qp.drawLine(10, 10,
                    MainWindow.IMAGE_WIDTH-10, MainWindow.IMAGE_HEIGHT-10)
&nbsp;
        renderer = QtSvg.QSvgRenderer("logo.svg")
        renderer.render(qp)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech šesti dnes popsaných demonstračních příkladů společně
s&nbsp;jedním pomocným skriptem byly opět, podobně jako tomu bylo i
v&nbsp;předchozích článcích, uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Adresa</th></tr>
<tr><td>1</td><td>146_svg_widget.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/146_svg_widget.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/146_svg_widget.py</a></td></tr>
<tr><td>2</td><td>147_svg_widget_content.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/147_svg_widget_content.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/147_svg_widget_content.py</a></td></tr>
<tr><td>3</td><td>148_svg_as_icon.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/148_svg_as_icon.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/148_svg_as_icon.py</a></td></tr>
<tr><td>4</td><td>149_svg_as_resized_icon.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/149_svg_as_resized_icon.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/149_svg_as_resized_icon.py</a></td></tr>
<tr><td>5</td><td>150_message_box_with_svg_icon.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/150_message_box_with_svg_icon.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/150_message_box_with_svg_icon.py</a></td></tr>
<tr><td>6</td><td>151_svg_renderer.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/151_svg_renderer.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/151_svg_renderer.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>generate_logo.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/generate_logo.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/generate_logo.py</a></td></tr>
</table>

<p>Následuje tabulka s&nbsp;odkazy na soubory obsahující ikony uložené ve
formátu SVG. Tyto soubory jsou používány výše zmíněnými demonstračními
příklady:</p>

<table>
<tr><th>#</th><th>SVG</th><th>Adresa</th></tr>
<tr><td>1</td><td>logo.svg</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/logo.svg">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/logo.svg</a></td></tr>
<tr><td>2</td><td>editors/atom.svg</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/editors/atom.svg">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/editors/atom.svg</a></td></tr>
<tr><td>3</td><td>editors/emacs.svg</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/editors/emacs.svg">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/editors/emacs.svg</a></td></tr>
<tr><td>4</td><td>editors/vim.svg</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/editors/vim.svg">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/editors/vim.svg</a></td></tr>
</table>



<p><a name="k17"></a></p>
<h2 id="k17">17. Články o možnostech a vlastnostech formátu SVG</h2>

<ol>

<li>Vektorový grafický formát SVG<br />
<a href="http://www.root.cz/clanky/vektorovy-graficky-format-svg/">http://www.root.cz/clanky/vektorovy-graficky-format-svg/</a>
</li>

<li>Cesty v souborech typu Scalable Vector Graphics<br />
<a href="http://www.root.cz/clanky/cesty-v-souborech-typu-scalable-vector-graphics/">http://www.root.cz/clanky/cesty-v-souborech-typu-scalable-vector-graphics/</a>
</li>

<li>Scalable Vector Graphics a základní geometrické tvary<br />
<a href="http://www.root.cz/clanky/scalable-vector-graphics-a-zakladni-geometricke-tvary/">http://www.root.cz/clanky/scalable-vector-graphics-a-zakladni-geometricke-tvary/</a>
</li>

<li>Vlastnosti cest a základních geometrických tvarů v SVG<br />
<a href="http://www.root.cz/clanky/vlastnosti-cest-a-zakladnich-geometrickych-tvaru-v-svg/">http://www.root.cz/clanky/vlastnosti-cest-a-zakladnich-geometrickych-tvaru-v-svg/</a>
</li>

<li>SVG - styly výplní a značky připojované ke křivkám<br />
<a href="http://www.root.cz/clanky/svg-styly-vyplni-a-znacky-pripojovane-ke-krivkam/">http://www.root.cz/clanky/svg-styly-vyplni-a-znacky-pripojovane-ke-krivkam/</a>
</li>

<li>Gradientní výplně a textové objekty v SVG<br />
<a href="http://www.root.cz/clanky/gradientni-vyplne-a-textove-objekty-v-svg/">http://www.root.cz/clanky/gradientni-vyplne-a-textove-objekty-v-svg/</a>
</li>

<li>Grafický formát SVG a animace<br />
<a href="http://www.root.cz/clanky/graficky-format-svg-a-animace/">http://www.root.cz/clanky/graficky-format-svg-a-animace/</a>
</li>

<li>Pokročilejší animace ve formátu SVG<br />
<a href="http://www.root.cz/clanky/pokrocilejsi-animace-ve-formatu-svg/">http://www.root.cz/clanky/pokrocilejsi-animace-ve-formatu-svg/</a>
</li>

<li>Podpora skriptování v grafickém formátu SVG<br />
<a href="http://www.root.cz/clanky/podpora-skriptovani-v-grafickem-formatu-svg/">http://www.root.cz/clanky/podpora-skriptovani-v-grafickem-formatu-svg/</a>
</li>

<li>Zpracování událostí při skriptování výkresů SVG<br />
<a href="http://www.root.cz/clanky/zpracovani-udalosti-pri-skriptovani-vykresu-svg/">http://www.root.cz/clanky/zpracovani-udalosti-pri-skriptovani-vykresu-svg/</a>
</li>

</ol>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>QSvgWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgWidget.html">https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgWidget.html</a>
</li>

<li>QByteArray<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/QByteArray.html">https://pyside.github.io/docs/pyside/PySide/QtCore/QByteArray.html</a>
</li>

<li>Python Bytes, Bytearray<br />
<a href="https://www.w3resource.com/python/python-bytes.php">https://www.w3resource.com/python/python-bytes.php</a>
</li>

<li>psep-0101.txt (mj.&nbsp;popis mapování typů Pythonu na třídy v&nbsp;PySide)<br />
<a href="https://github.com/techtonik/pseps/blob/master/psep-0101.txt">https://github.com/techtonik/pseps/blob/master/psep-0101.txt</a>
</li>

<li>QSvgRenderer<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgRenderer.html">https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgRenderer.html</a>
</li>

<li>QSvgGenerator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgGenerator.html">https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgGenerator.html</a>
</li>

<li>QIcon<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QIcon.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QIcon.html</a>
</li>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>QStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStyle.html</a>
</li>

<li>QCommonStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCommonStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCommonStyle.html</a>
</li>

<li>QPlastiqueStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPlastiqueStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPlastiqueStyle.html</a>
</li>

<li>QMacStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMacStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMacStyle.html</a>
</li>

<li>QCleanlooksStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCleanlooksStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCleanlooksStyle.html</a>
</li>

<li>QGtkStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGtkStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGtkStyle.html</a>
</li>

<li>QCDEStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCDEStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCDEStyle.html</a>
</li>

<li>QMotifStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMotifStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMotifStyle.html</a>
</li>

<li>QWindowsStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWindowsStyle.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWindowsStyle.html</a>
</li>

<li>QStyleFactory<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleFactory.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleFactory.html</a>
</li>

<li>QStyleOptionHeader<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleOptionHeader.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStyleOptionHeader.html</a>
</li>

<li>QAbstractSlider<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractSlider.html">https://pyside.github.io/docs/pyside/PySide/QtGui/AbstractSlider.html</a>
</li>

<li>QScrollBar<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QScrollBar.html">https://pyside.github.io/docs/pyside/PySide/QtGui/ScrollBar.html</a>
</li>

<li>QSlider<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QSlider.html">https://pyside.github.io/docs/pyside/PySide/QtGui/Slider.html</a>
</li>

<li>QDial<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QDial.html">https://pyside.github.io/docs/pyside/PySide/QtGui/Dial.html</a>
</li>

<li>QImage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html</a>
</li>

<li>QPixmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html</a>
</li>

<li>QBitmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html</a>
</li>

<li>QPaintDevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html</a>
</li>

<li>QPicture<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html</a>
</li>

<li>QPainter<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html</a>
</li>

<li>QPainterPath<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html</a>
</li>

<li>QGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html</a>
</li>

<li>QLinearGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html</a>
</li>

<li>QRadialGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html</a>
</li>

<li>QTableWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html</a>
</li>

<li>QTableWidgetItem<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html</a>
</li>

<li>QTreeWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html</a>
</li>

<li>QTreeWidgetItem <br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html</a>
</li>

<li>Afinní zobrazení<br />
<a href="https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD">https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QDialog.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QErrorMessage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QErrorMessage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QErrorMessage.html</a>
</li>

<li>QInputDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QInputDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QInputDialog.html</a>
</li>

<li>QColorDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QColorDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QColorDialog.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QLineEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html</a>
</li>

<li>QTextEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QIntValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html</a>
</li>

<li>QRegExpValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

