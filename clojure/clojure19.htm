<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Clojure a práce s&nbsp;Gitem (3)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Clojure a práce s&nbsp;Gitem (3)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V devatenácté části seriálu o programovacím jazyku Clojure i o knihovnách, které jsou pro tento jazyk dostupné, se již potřetí budeme zabývat popisem knihovny nazvané clj-jgit odvozené od známé javovské knihovny JGit. Ukážeme si především použití funkce odpovídající příkazu git blame, procházení jednotlivými commity a taktéž tvorbu patchů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Clojure a práce s&nbsp;Gitem (3)</a></p>
<p><a href="#k02">2. Použití funkce <strong>clj-jgit.porcelain/git-blame</strong></a></p>
<p><a href="#k03">3. Zdrojový kód demonstračního příkladu <strong>git-test12</strong></a></p>
<p><a href="#k04">4. Použití funkcí <strong>clj-jgit.porcelain/rev-list</strong> a <strong>clj-jgit.querying/commit-info</strong> pro získání informací o commitech</a></p>
<p><a href="#k05">5. Zdrojový kód demonstračního příkladu <strong>git-test13</strong></a></p>
<p><a href="#k06">6. Podrobnější informace o změnách získané s&nbsp;využitím funkcí <strong>clj-jgit.querying/branches-for</strong> a <strong>clj-jgit.querying/changed-files</strong></a></p>
<p><a href="#k07">7. Zdrojový kód demonstračního příkladu <strong>git-test14</strong></a></p>
<p><a href="#k08">8. Vytvoření naformátovaného patche s&nbsp;využitím funkce <strong>clj-jgit.querying/changed-files-with-patch</strong></a></p>
<p><a href="#k09">9. Zdrojový kód demonstračního příkladu <strong>git-test15</strong></a></p>
<p><a href="#k10">10. Repositář s&nbsp;dnešními demonstračními příklady</a></p>
<p><a href="#k11">11. Odkazy na předchozí části tohoto seriálu</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Clojure a práce s&nbsp;Gitem (3)</h2>

<p>V&nbsp;dnešním článku o programovacím jazyce Clojure i o vybraných
užitečných knihovnách, které jsou pro tento jazyk vytvořeny, se opět (již
potřetí) budeme zabývat způsobem využití knihovny nazvané <i>clj-jgit</i>.
Navážeme tak na <a
href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/">sedmnáctou</a>
a <a
href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/">osmnáctou</a>
část tohoto seriálu, v&nbsp;nichž jsme si nejprve řekli základní informace o
knihovně <i>clj-jgit</i> a následně jsme si na celkem jedenácti demonstračních
příkladech ukázali, jakým způsobem je možné získat obsah vzdáleného repositáře,
jak se přečtou informace o lokálních i vzdálených větvích a taktéž jsme si
předvedli způsoby přepínání mezi větvemi, přidávání a změnu souborů
v&nbsp;repositáři, <i>commit</i> provedených změn a zjištění stavu repositáře
v&nbsp;jakémkoli okamžiku (těsně po naklonování, po přepnutí větve, po přidání
nového souboru do repositáře, změně souboru, commitu provedených změn
apod.).</p>

<p>Prozatím jsme se však neseznámili se způsobem přečtení informací o všech
provedených <i>commitech</i> ani o postupu, kterým je možné získat patch
(změnový soubor) obsahující informace o tom, jaké změny byly ve vybraném
<i>commitu</i> vlastně provedeny. S&nbsp;funkcemi a makry knihovny
<i>clj-jgit</i>, které tyto operace implementují, se seznámíme v&nbsp;dnešním
článku a především si ukážeme způsob jejich použití na čtveřici demonstračních
příkladů. Popsány budou následující funkce a makra:</p>

<table>
<tr><th>#</th><th>Funkce/makro</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>clj-jgit.porcelain/git-blame</td><td>obdoba příkazu <strong>git blame</strong></td></tr>
<tr><td>2</td><td>clj-jgit.porcelain/rev-list</td><td>vrací seznam všech provedených změn v&nbsp;repositáři</td></tr>
<tr><td>3</td><td>clj-jgit.querying/commit-info</td><td>získání podrobnějších informací o zvoleném commitu</td></tr>
<tr><td>4</td><td>clj-jgit.querying/branches-for</td><td>informace o větvích, kterých se commit týká</td></tr>
<tr><td>5</td><td>clj-jgit.querying/changed-files</td><td>informace o změněných souborech ve zvoleném commitu</td></tr>
<tr><td>6</td><td>clj-jgit.querying/changed-files-with-patch</td><td>naformátování <i>patche</i> pro zvolený commit</td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Použití funkce <strong>clj-jgit.porcelain/git-blame</strong></h2>

<p>První funkcí, s&nbsp;níž se dnes seznámíme, je funkce nazvaná
<strong>clj-jgit.porcelain/git-blame</strong>, kterou je možné použít pro
zjištění informací o autorech změn provedených v&nbsp;libovolném souboru, který
je součástí repositáře. Této funkci se předávají dva argumenty &ndash;
reference na repositář, tj.&nbsp;hodnota vrácená například funkcí
<strong>clj-jgit.porcelain/with-repo</strong> a jméno souboru, o jehož změnách
potřebujeme získat potřebné informace. Funkce
<strong>clj-jgit.porcelain/git-blame</strong> vrací seznam změn, přičemž
informace o každé změně je reprezentována následující datovou strukturou
složenou z&nbsp;vnořených hashmap:</p>

<pre>
{
    :author {
        :name
        :email
        :timezone
    }
    :commit
    :committer {
        :name
        :email
        :timezone
    }
    :line
    :source-path
}
</pre>

<p>Pro zajímavost &ndash; zdrojový kód funkce
<strong>clj-jgit.porcelain/git-blame</strong> vypadá následovně:</p>

<pre>
(defn <strong>git-blam</strong>e
  ([^Git repo ^String path]
     (git-blame repo path false))
  ([^Git repo ^String path ^Boolean follow-renames?]
     (-&gt; repo
         .blame
         (.setFilePath path)
         (.setFollowFileRenames follow-renames?)
         .call
         blame-result))
  ([^Git repo ^String path ^Boolean follow-renames? ^AnyObjectId start-commit]
     (-&gt; repo
         .blame
         (.setFilePath path)
         (.setFollowFileRenames follow-renames?)
         (.setStartCommit start-commit)
         .call
         blame-result)))
</pre>

<p>Poznámka: pravděpodobně kvůli chybě v&nbsp;knihovně <i>JGit</i>, konkrétně
ve funkci <strong>getSourceCommit()</strong>, dochází k&nbsp;výjimce typu
<strong>ArrayIndexOutOfBoundsException</strong> při snaze o přečtení posledního
záznamu v&nbsp;sekvenci.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zdrojový kód demonstračního příkladu <strong>git-test12</strong></h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu nazvaném
<strong>git-test12</strong> je ukázáno využití <a href="#k02">výše popsané</a>
funkce <strong>clj-jgit.porcelain/git-blame</strong> pro získání informací o
změně provedené v&nbsp;souboru <strong>README.md</strong> umístěného
v&nbsp;testovacím repositáři <a
href="https://github.com/tisnik/testrepo">https://github.com/tisnik/testrepo</a>.
Vypíše se pouze první změna ze získané sekvence; při snaze o čtení dalších změn
nezapomeňte celou smyčku uzavřít do makra <strong>try</strong> kvůli zpracování
výše zmíněné výjimky typu <strong>ArrayIndexOutOfBoundsException</strong>.</p>

<p>Vytvoření kostry demonstračního příkladu:</p>

<pre>
lein new app git-12
</pre>

<p>Úprava projektového souboru <strong>project.clj</strong>:</p>

<pre>
(defproject <strong>git-test12</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test12.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový kód souboru <strong>src/git_test12/core.clj</strong>:</p>

<pre>
(ns <strong>git-test12</strong>.core
    (:gen-class))
&nbsp;
(require '[clojure.pprint     :as pprint])
(require '[clj-jgit.porcelain :as jgit])
(require '[clj-jgit.querying  :as jgit-query])
(require '[hozumi.rm-rf       :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    <i>"Adresa GIT repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se GIT repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani GIT repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>print-customized-log</strong>
    <i>"Vypis logovacich informaci ve zvolenem formatu."</i>
    [repository]
    (println "\nLog:")
    (doseq [log-entry (jgit/git-log repository)]
        (let [info (jgit-query/commit-info repository log-entry)]
             (println (:author info) ":" (:message info)))))
&nbsp;
(defn <strong>print-local-branches</strong>
    <i>"Vypis vsech lokalnich vetvi pro vybrany repositar."</i>
    [repo]
    (println "\nLocal branches")
    (doseq [branch (jgit/git-branch-list repo)]
        (println (.getName branch))))
&nbsp;
(defn <strong>print-remote-branches</strong>
    <i>"Vypis vsech vzdalenych vetvi pro vybrany repositar."</i>
    [repo]
    (println "\nRemote branches")
    (doseq [branch (jgit/git-branch-list repo :remote)]
        (println (.getName branch))))
&nbsp;
(defn <strong>print-git-blame</strong>
    <i>"Ukazka pouziti funkce git-blame."</i>
    [repo filename]
    (println "\nGit blame " filename)
    (let [blamelist (jgit/git-blame repo filename)
          first-blame (first blamelist)]
          <i>; ukazka pristupu ke vnorenemu prvku vracene struktury</i>
          (println "Committer:" (:name (:committer first-blame)))
          <i>; vypis cele struktury</i>
          (pprint/pprint first-blame)
          ))
&nbsp;
(defn <strong>git-test-12</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis podrobnejsiho logu."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    <i>; povsimnete si pouziti "automagicky" vytvorene promenne,</i>
    <i>; ktera se jmenuje 'repo'</i>
    (try (jgit/with-repo directory-name
                         (print-customized-log repo)
                         (print-local-branches repo)
                         (print-remote-branches repo)
                         (print-git-blame repo "README.md"))
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-12 repository-url directory-name))
</pre>

<p>Ukázka výstupu demonstračního příkladu po jeho spuštění (repositář ve stavu
se třemi větvemi):</p>

<pre>
Log:
Pavel Tisnovsky : Added garbage
Pavel Tisnovsky : Updated README.md
Pavel Tišnovský : Initial commit
&nbsp;
Local branches
refs/heads/master
&nbsp;
Remote branches
refs/remotes/origin/branch-1
refs/remotes/origin/branch-2
refs/remotes/origin/master
&nbsp;
Git blame  README.md
Committer: Pavel Tišnovský
{:author
 {:name "Pavel Tišnovský",
  :email "ptisnovs@redhat.com",
  :timezone
  #&lt;ZoneInfo sun.util.calendar.ZoneInfo[id="GMT-04:00",offset=-14400000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]&gt;},
 :commit
 #&lt;RevCommit commit badf2b12f9281a8581009bfa068a5147c4cbc87a 1434722046 -----p&gt;,
 :committer
 {:name "Pavel Tišnovský",
  :email "ptisnovs@redhat.com",
  :timezone
  #&lt;ZoneInfo sun.util.calendar.ZoneInfo[id="GMT-04:00",offset=-14400000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]&gt;},
 :line 0,
 :source-path "README.md"}
</pre>

<p>Ukázka výstupu demonstračního příkladu po jeho spuštění (repositář ve stavu
se čtyřmi větvemi, spojením větví a merge konfliktem):</p>

<pre>
Log:
Pavel Tisnovsky : Updated README.md
Pavel Tisnovsky : Added file-in-branch-3 into branch-3
Pavel Tisnovsky : Added garbage
Pavel Tisnovsky : Updated README.md
Pavel Tišnovský : Initial commit
&nbsp;
Local branches
refs/heads/master
&nbsp;
Remote branches
refs/remotes/origin/branch-1
refs/remotes/origin/branch-2
refs/remotes/origin/branch-3
refs/remotes/origin/master
&nbsp;
Git blame  README.md
Committer: Pavel Tišnovský
{:author
 {:name "Pavel Tišnovský",
  :email "ptisnovs@redhat.com",
  :timezone
  #&lt;ZoneInfo sun.util.calendar.ZoneInfo[id="GMT-04:00",offset=-14400000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]&gt;},
 :commit
 #&lt;RevCommit commit badf2b12f9281a8581009bfa068a5147c4cbc87a 1434722046 -----p&gt;,
 :committer
 {:name "Pavel Tišnovský",
  :email "ptisnovs@redhat.com",
  :timezone
  #&lt;ZoneInfo sun.util.calendar.ZoneInfo[id="GMT-04:00",offset=-14400000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]&gt;},
 :line 0,
 :source-path "README.md"}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Použití funkcí <strong>clj-jgit.porcelain/rev-list</strong> a <strong>clj-jgit.querying/commit-info</strong> pro získání informací o commitech</h2>

<p>Další informací, kterou je možné při práci s&nbsp;GITovskými repositáři
relativně jednoduše přečíst, jsou informace o jednotlivých commitech,
tj.&nbsp;o změnách provedených v&nbsp;průběhu historie existence aktivně
používaného repositáře. V&nbsp;této kapitole si popíšeme dvojici funkcí, které
lze využít pro přečtení podobných informací, jaké se z&nbsp;příkazového řádku
získají příkazem <strong>git log</strong> (ve skutečnosti dále popsané funkce
vrátí ještě více informací). První užitečnou funkcí je
<strong>clj-jgit.porcelain/rev-list</strong>, jejíž zdrojový kód vypadá
následovně:</p>

<pre>
(defn <strong>rev-list</strong>
  ([^Git repo]
    (rev-list repo (new-rev-walk repo)))
  ([^Git repo ^RevWalk rev-walk]
    (.reset rev-walk)
    (mark-all-heads-as-start-for! repo rev-walk)
    (doto (RevCommitList.)
      (.source rev-walk)
      (.fillTo Integer/MAX_VALUE))))
</pre>

<p>V&nbsp;nejjednodušším případě se do této funkce předá pouze jediný parametr:
reference na repositář. Následně se vrátí seznam změn provedených
v&nbsp;repositáři, ovšem my musíme mít možnost informace o jednotlivých změnách
smysluplně zpracovat. Právě pro tento účel se používá druhá funkce nazvaná
<strong>clj-jgit.querying/commit-info</strong>, která pro předaný objekt typu
<strong>RevCommit</strong> (ten si můžeme představit jako otisk commitu,
tj.&nbsp;jeho hešovací kód, ten je mimochodem uložený pod klíčem :id) vrátí
mapu se strukturovanými informacemi. Zdrojový kód funkce
<strong>clj-jgit.querying/commit-info</strong> je poněkud komplikovanější,
neboť se podporuje různý typ (a počet) parametrů použitý při jejím volání:</p>

<pre>
(defn <strong>commit-info</strong>
  ([^Git repo, ^RevCommit rev-commit]
    (commit-info repo (new-rev-walk repo) rev-commit))
  ([^Git repo, ^RevWalk rev-walk, ^RevCommit rev-commit]
    (merge (commit-info-without-branches repo rev-walk rev-commit)
      {:branches (branches-for repo rev-commit)}))
  ([^Git repo ^RevWalk rev-walk ^HashMap commit-map ^RevCommit rev-commit]
    (merge (commit-info-without-branches repo rev-walk rev-commit)
      {:branches (map #(.getName ^Ref %) (or (.get commit-map rev-commit) []))})))
</pre>

<p>Z&nbsp;vrácené mapy lze získat důležité hodnoty uložené pod těmito
klíči:</p>

<table>
<tr><td>1</td><td>:id</td></tr>
<tr><td>2</td><td>:author</td></tr>
<tr><td>3</td><td>:message</td></tr>
<tr><td>4</td><td>:changed_files</td></tr>
</table>



<p><a name="k05"></a></p>
<h2 id="k05">5. Zdrojový kód demonstračního příkladu <strong>git-test13</strong></h2>

<p>Výše popsané funkce <strong>clj-jgit.porcelain/rev-list</strong> a
<strong>clj-jgit.querying/commit-info</strong> jsou použity v&nbsp;dnešním
druhém demonstračním příkladu, kde se s&nbsp;jejich využitím získají informace
o historii změn provedených v&nbsp;testovacím repositáři <a
href="https://github.com/tisnik/testrepo.git">https://github.com/tisnik/testrepo.git</a>.</p>

<p>Vytvoření kostry demonstračního příkladu:</p>

<pre>
lein new app git-13
</pre>

<p>Úprava projektového souboru <strong>project.clj</strong>:</p>

<pre>
(defproject <strong>git-test13</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test13.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový kód souboru <strong>src/git_test13/core.clj</strong>:</p>

<pre>
(ns <strong>git-test13</strong>.core
    (:gen-class))
&nbsp;
(require '[clojure.pprint     :as pprint])
(require '[clj-jgit.porcelain :as jgit])
(require '[clj-jgit.querying  :as jgit-query])
(require '[hozumi.rm-rf       :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    <i>"Adresa GIT repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se GIT repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani GIT repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>rev-list</strong>
    [repo]
    (println "\nList of all revision objects\n")
    (let [rev-list (jgit-query/rev-list repo)]
        (doseq [rev rev-list]
            (let [info (jgit-query/commit-info repo rev)]
                (println "commit" (:id info))
                (println "Author: " (:author info))
                (println "Files: " (:changed_files info))
                (println "\n" (:message info) "\n\n")))))
&nbsp;
(defn <strong>git-test-13</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis podrobnejsiho logu."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    <i>; povsimnete si pouziti "automagicky" vytvorene promenne,</i>
    <i>; ktera se jmenuje 'repo'</i>
    (try (jgit/with-repo directory-name
                         (rev-list repo))
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-13 repository-url directory-name))
</pre>

<p>Ukázka výstupu demonstračního příkladu po jeho spuštění (repositář ve stavu
se třemi větvemi):</p>

<pre>
List of all revision objects
&nbsp;
commit 07f9a94593ec3e065a7eeaedbbc5220ffe5c5722
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-2 :add])
&nbsp;
 <strong>Added file-in-branch-2 </strong>
&nbsp;
&nbsp;
commit f84564ce7fa81f865e60d3d2e18f5789539a237a
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-1 :add])
&nbsp;
 <strong>Added file-in-branch-1 </strong>
&nbsp;
&nbsp;
commit 394ce42cb3bcf44ff4e9a94949814bacddcdfe9b
Author:  Pavel Tisnovsky
Files:  ([garbage :add])
&nbsp;
 <strong>Added garbage </strong>
&nbsp;
&nbsp;
commit 0fd398ab16e53ea0b783aef2413d75b75c6462cd
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 <strong>Updated README.md </strong>
&nbsp;
&nbsp;
commit badf2b12f9281a8581009bfa068a5147c4cbc87a
Author:  Pavel Tisnovsky
Files:  [[README.md :add]]
&nbsp;
 <strong>Initial commit </strong>
</pre>

<p>Ukázka výstupu demonstračního příkladu po jeho spuštění (repositář ve stavu
se čtyřmi větvemi, spojením větví a merge konfliktem):</p>

<pre>
List of all revision objects
&nbsp;
commit ebffda7b2832c220e591d077ba448a0983fb1a47
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 <strong>Merge branch 'master' into branch-3</strong>
&nbsp;
Conflicts:
        <strong>README.md </strong>
&nbsp;
&nbsp;
commit 19be06f06b8c5cb4a0dee5969d9a30c17f2cbc7d
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 <strong>Change in README.md </strong>
&nbsp;
&nbsp;
commit 4be57bb203050da628b66a045610bb6e0e7b243f
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 <strong>Updated README.md </strong>
&nbsp;
&nbsp;
commit 038bdf4191194b78fc683e40493c1ecace4f1e40
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-3 :add])
&nbsp;
 <strong>Added file-in-branch-3 into branch-3 </strong>
&nbsp;
&nbsp;
commit 07f9a94593ec3e065a7eeaedbbc5220ffe5c5722
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-2 :add])
&nbsp;
 <strong>Added file-in-branch-2 </strong>
&nbsp;
&nbsp;
commit f84564ce7fa81f865e60d3d2e18f5789539a237a
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-1 :add])
&nbsp;
 <strong>Added file-in-branch-1 </strong>
&nbsp;
&nbsp;
commit 394ce42cb3bcf44ff4e9a94949814bacddcdfe9b
Author:  Pavel Tisnovsky
Files:  ([garbage :add])
&nbsp;
 <strong>Added garbage </strong>
&nbsp;
&nbsp;
commit 0fd398ab16e53ea0b783aef2413d75b75c6462cd
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 <strong>Updated README.md </strong>
&nbsp;
&nbsp;
commit badf2b12f9281a8581009bfa068a5147c4cbc87a
Author:  Pavel Tisnovsky
Files:  [[README.md :add]]
&nbsp;
 <strong>Initial commit </strong>
&nbsp;
&nbsp;
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Podrobnější informace o změnách získané s&nbsp;využitím funkcí <strong>clj-jgit.querying/branches-for</strong> a <strong>clj-jgit.querying/changed-files</strong></h2>

<p>Knihovna <i>clj-jgit</i> nabízí svým uživatelům i několik dalších funkcí,
které je možné využít pro získání podrobnějších informací o jednotlivých
commitech. Některé z&nbsp;dále zmíněných funkcí se používají interně
(tj.&nbsp;dalšími funkcemi z&nbsp;knihovny <i>clj-jgit</i>), ovšem díky tomu,
že se nepoužívá žádný režim &bdquo;skrývání&ldquo; těchto funkcí před
programátory, lze je přímo volat i z&nbsp;vyvíjených aplikací. Jedná se
především o následující funkce:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>branches-for                 </td><td>větev či větve, kterých se commit týká</td></tr>
<tr><td>2</td><td>changed-files                </td><td>soubory změněné v&nbsp;rámci jednoho commitu</td></tr>
<tr><td>3</td><td>changed-files-between-commits</td><td>soubory změněné mezi libovolnými dvěma commity</td></tr>
<tr><td>4</td><td>changed-files-with-patch     </td><td>změny provedené v&nbsp;rámci commitu naformátované jako patch</td></tr>
</table>

<p>Funkce <strong>clj-jgit.querying/branches-for</strong> vrací sekvenci větví,
kterých se daný commit týká:</p>

<pre>
(defn <strong>branches-for</strong>
  [^Git repo ^ObjectId rev-commit]
  (let [rev-walk (new-rev-walk repo)
        bound-commit (bound-commit repo rev-walk rev-commit)
        branch-list (branch-list-with-heads repo rev-walk)]
    (-&gt;&gt;
      (for [[^ObjectIdRef branch-ref ^RevCommit branch-tip-commit] branch-list
            :when branch-tip-commit]
        (do
          (when (commit-in-branch? repo rev-walk branch-tip-commit bound-commit)
            (.getName branch-ref))))
      (remove nil?)
      doall)))
</pre>

<p>Význam funkce <strong>clj-jgit.querying/changed-files</strong> je jednoduchý
&ndash; lze ji použít pro přečtení změněných, smazaných či naopak vytvořených
souborů pro jeden commit:</p>

<pre>
(defn <strong>changed-files</strong>
  [^Git repo ^RevCommit rev-commit]
  (if-let [parent (first (.getParents rev-commit))]
    (changed-files-between-commits repo parent rev-commit)
    (changed-files-in-first-commit repo rev-commit)))
</pre>

<p>V&nbsp;některých případech je užitečné zjistit změny mezi libovolnými dvěma
commity (ty spolu nemusí nijak souviset). Tehdy přichází na řadu funkce
<strong>clj-jgit.querying/changed-files-between-commits</strong>, které se
předá reference na repositář a reference na dva commity:</p>

<pre>
(defn <strong>changed-files-between-commits</strong>
  [^Git repo ^RevCommit old-rev-commit ^RevCommit new-rev-commit]
    (let [df ^DiffFormatter (diff-formatter-for-changes repo)
          entries (.scan df old-rev-commit new-rev-commit)]
      (map parse-diff-entry entries)))
</pre>

<p>Funkce vrátí kumulativní změny.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zdrojový kód demonstračního příkladu <strong>git-test14</strong></h2>

<p>Dvojici výše zmíněných funkcí
<strong>clj-jgit.querying/branches-for</strong> a
<strong>clj-jgit.querying/changed-files</strong> použijeme v&nbsp;dnešním
předposledním demonstračním příkladu nazvaném <strong>git-test14</strong>.
Tento příklad je vlastně pouhým (velmi jednoduchým) rozšířením příkladu
předchozího, což je ostatně patrné i při pohledu na jeho zdrojový kód, protože
byly přidány pouze tyto dva nové řádky:</p>

<pre>
(println "Branches: " (jgit-query/branches-for repo (:raw info)))
(println "Changed files: " (jgit-query/changed-files repo (:raw info)))
</pre>

<p>Vytvoření kostry demonstračního příkladu:</p>

<pre>
lein new app git-14
</pre>

<p>Úprava projektového souboru <strong>project.clj</strong>:</p>

<pre>
(defproject <strong>git-test14</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test14.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový kód souboru <strong>src/git_test14/core.clj</strong>:</p>

<pre>
(ns <strong>git-test14</strong>.core
    (:gen-class))
&nbsp;
(require '[clojure.pprint     :as pprint])
(require '[clj-jgit.porcelain :as jgit])
(require '[clj-jgit.querying  :as jgit-query])
(require '[hozumi.rm-rf       :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    <i>"Adresa GIT repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se GIT repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani GIT repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>rev-list</strong>
    [repo]
    (println "\nList of all revision objects\n")
    (let [rev-list (jgit-query/rev-list repo)]
        (doseq [rev rev-list]
            (let [info (jgit-query/commit-info repo rev)]
                (println "commit" (:id info))
                (println "Author: " (:author info))
                (println "Files: " (:changed_files info))
                (println "\n" (:message info) "\n")
                (println "Branches: " (jgit-query/branches-for repo (:raw info)))
                (println "Changed files: " (jgit-query/changed-files repo (:raw info)))
                (println)
             ))))
&nbsp;
(defn <strong>git-test-14</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis podrobnejsiho logu."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    <i>; povsimnete si pouziti "automagicky" vytvorene promenne,</i>
    <i>; ktera se jmenuje 'repo'</i>
    (try (jgit/with-repo directory-name
                         (rev-list repo))
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-14 repository-url directory-name))
</pre>

<p>Ukázka výstupu demonstračního příkladu po jeho spuštění (repositář ve stavu
se třemi větvemi):</p>

<pre>
List of all revision objects
&nbsp;
commit 07f9a94593ec3e065a7eeaedbbc5220ffe5c5722
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-2 :add])
&nbsp;
 Added file-in-branch-2 
&nbsp;
<strong>Branches:  ()</strong>
<strong>Changed files:  ([file-in-branch-2 :add])</strong>
&nbsp;
commit f84564ce7fa81f865e60d3d2e18f5789539a237a
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-1 :add])
&nbsp;
 Added file-in-branch-1 
&nbsp;
<strong>Branches:  ()</strong>
<strong>Changed files:  ([file-in-branch-1 :add])</strong>
&nbsp;
commit 394ce42cb3bcf44ff4e9a94949814bacddcdfe9b
Author:  Pavel Tisnovsky
Files:  ([garbage :add])
&nbsp;
 Added garbage 
&nbsp;
<strong>Branches:  (refs/heads/master)</strong>
<strong>Changed files:  ([garbage :add])</strong>
&nbsp;
commit 0fd398ab16e53ea0b783aef2413d75b75c6462cd
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 Updated README.md 
&nbsp;
<strong>Branches:  (refs/heads/master)</strong>
<strong>Changed files:  ([README.md :edit])</strong>
&nbsp;
commit badf2b12f9281a8581009bfa068a5147c4cbc87a
Author:  Pavel Tisnovsky
Files:  [[README.md :add]]
&nbsp;
 Initial commit 
&nbsp;
<strong>Branches:  (refs/heads/master)</strong>
<strong>Changed files:  [[README.md :add]]</strong>
&nbsp;
</pre>

<p>Ukázka výstupu demonstračního příkladu po jeho spuštění (repositář ve stavu
se čtyřmi větvemi, spojením větví a merge konfliktem):</p>

<pre>
List of all revision objects
&nbsp;
commit ebffda7b2832c220e591d077ba448a0983fb1a47
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 Merge branch 'master' into branch-3
&nbsp;
Conflicts:
	README.md 
&nbsp;
<strong>Branches:  ()</strong>
<strong>Changed files:  ([README.md :edit])</strong>
&nbsp;
commit 19be06f06b8c5cb4a0dee5969d9a30c17f2cbc7d
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 Change in README.md 
&nbsp;
<strong>Branches:  ()</strong>
<strong>Changed files:  ([README.md :edit])</strong>
&nbsp;
commit 4be57bb203050da628b66a045610bb6e0e7b243f
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 Updated README.md 
&nbsp;
<strong>Branches:  (refs/heads/master)</strong>
<strong>Changed files:  ([README.md :edit])</strong>
&nbsp;
commit 038bdf4191194b78fc683e40493c1ecace4f1e40
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-3 :add])
&nbsp;
 Added file-in-branch-3 into branch-3 
&nbsp;
<strong>Branches:  (refs/heads/master)</strong>
<strong>Changed files:  ([file-in-branch-3 :add])</strong>
&nbsp;
commit 07f9a94593ec3e065a7eeaedbbc5220ffe5c5722
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-2 :add])
&nbsp;
 Added file-in-branch-2 
&nbsp;
<strong>Branches:  ()</strong>
<strong>Changed files:  ([file-in-branch-2 :add])</strong>
&nbsp;
commit f84564ce7fa81f865e60d3d2e18f5789539a237a
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-1 :add])
&nbsp;
 Added file-in-branch-1 
&nbsp;
<strong>Branches:  ()</strong>
<strong>Changed files:  ([file-in-branch-1 :add])</strong>
&nbsp;
commit 394ce42cb3bcf44ff4e9a94949814bacddcdfe9b
Author:  Pavel Tisnovsky
Files:  ([garbage :add])
&nbsp;
 Added garbage 
&nbsp;
<strong>Branches:  (refs/heads/master)</strong>
<strong>Changed files:  ([garbage :add])</strong>
&nbsp;
commit 0fd398ab16e53ea0b783aef2413d75b75c6462cd
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 Updated README.md 
&nbsp;
<strong>Branches:  (refs/heads/master)</strong>
<strong>Changed files:  ([README.md :edit])</strong>
&nbsp;
commit badf2b12f9281a8581009bfa068a5147c4cbc87a
Author:  Pavel Tisnovsky
Files:  [[README.md :add]]
&nbsp;
 Initial commit 
&nbsp;
<strong>Branches:  (refs/heads/master)</strong>
<strong>Changed files:  [[README.md :add]]</strong>
&nbsp;
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vytvoření naformátovaného patche s&nbsp;využitím funkce <strong>clj-jgit.querying/changed-files-with-patch</strong></h2>

<p>Poslední funkcí z&nbsp;knihovny <i>clj-jgit</i>, kterou si dnes popíšeme, je
funkce nazvaná <strong>clj-jgit.querying/changed-files-with-patch</strong>.
Této funkci je nutné předat dva parametry: referenci na repositář a referenci
na commit. Hodnotou, kterou tato funkce vrátí, je textová (řetězcová) podoba
patche (změnového souboru), kterou je možné například s&nbsp;využitím
standardní clojurovské funkce <i>spit</i> (<a
href="http://clojuredocs.org/clojure.core/spit">http://clojuredocs.org/clojure.core/spit</a>)
uložit do externího textového souboru pro další použití, například pro pozdější
aplikaci s&nbsp;využitím příkazů <strong>patch</strong> či <strong>git
apply</strong>. Důležité je, že funkce
<strong>clj-jgit.querying/changed-files-with-patch</strong> vrací skutečně
pouze změny provedené v&nbsp;rámci specifikovaného commitu a nikoli rozdíl mezi
libovolnými dvěma commity (i když i to by bylo užitečné).</p>

<p>Opět se pro zajímavost podívejme na zdrojový kód funkce
<strong>clj-jgit.querying/changed-files-with-patch</strong>:</p>

<pre>

(defn <strong>changed-files-with-patch</strong>
  [^Git repo ^RevCommit rev-commit]
  (if-let [parent (first (.getParents rev-commit))]
    (let [rev-parent ^RevCommit parent
          out ^ByteArrayOutputStream (new ByteArrayOutputStream)
          df ^DiffFormatter (byte-array-diff-formatter-for-changes repo out)]
      (.format df rev-parent rev-commit)
      (.toString out))))
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Zdrojový kód demonstračního příkladu <strong>git-test15</strong></h2>

<p>V&nbsp;dnešním posledním demonstračním příkladu nazvaném
<strong>git-test15</strong> je ukázáno použití funkce
<strong>clj-jgit.querying/changed-files-with-patch</strong> v&nbsp;praxi.
Vlastně se jedná o rozšíření předchozího příkladu s&nbsp;tím, že se kromě
informací o jednotlivých commitech na standardní výstup vypíše i příslušný
patch (který by samozřejmě bylo možné funkcí <strong>spit</strong> uložit do
textového souboru).</p>

<p>Vytvoření kostry demonstračního příkladu:</p>

<pre>
lein new app git-15
</pre>

<p>Úprava projektového souboru <strong>project.clj</strong>:</p>

<pre>
(defproject <strong>git-test15</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test15.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový kód souboru <strong>src/git_test15/core.clj</strong>:</p>

<pre>
(ns <strong>git-test15</strong>.core
    (:gen-class))
&nbsp;
(require '[clojure.pprint     :as pprint])
(require '[clj-jgit.porcelain :as jgit])
(require '[clj-jgit.querying  :as jgit-query])
(require '[hozumi.rm-rf       :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    <i>"Adresa GIT repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se GIT repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani GIT repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>rev-list</strong>
    [repo]
    (println "\nList of all revision objects\n")
    (let [rev-list (jgit-query/rev-list repo)]
        (doseq [rev rev-list]
            (let [info (jgit-query/commit-info repo rev)]
                (println "commit" (:id info))
                (println "Author: " (:author info))
                (println "Files: " (:changed_files info))
                (println "\n" (:message info) "\n")
                (println "Branches: " (jgit-query/branches-for repo (:raw info)))
                (println "Changed files: " (jgit-query/changed-files repo (:raw info)))
                (println)
                (println (jgit-query/changed-files-with-patch repo (:raw info)))
                (println)
             ))))
&nbsp;
(defn <strong>git-test-15</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis podrobnejsiho logu."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    <i>; povsimnete si pouziti "automagicky" vytvorene promenne,</i>
    <i>; ktera se jmenuje 'repo'</i>
    (try (jgit/with-repo directory-name
                         (rev-list repo))
         (finally
             ; vymazani adresare s naklonovanym repositarem
             (delete-directory directory-name))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-15 repository-url directory-name))
</pre>

<p>Ukázka výstupu demonstračního příkladu po jeho spuštění (repositář ve stavu
se třemi větvemi):</p>

<pre>
List of all revision objects
&nbsp;
commit 07f9a94593ec3e065a7eeaedbbc5220ffe5c5722
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-2 :add])
&nbsp;
 Added file-in-branch-2 
&nbsp;
Branches:  ()
Changed files:  ([file-in-branch-2 :add])
&nbsp;
<strong>diff --git a/file-in-branch-2 b/file-in-branch-2</strong>
<strong>new file mode 100644</strong>
<strong>index 0000000..e69de29</strong>
<strong>--- /dev/null</strong>
<strong>+++ b/file-in-branch-2</strong>
&nbsp;
&nbsp;
commit f84564ce7fa81f865e60d3d2e18f5789539a237a
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-1 :add])
&nbsp;
 Added file-in-branch-1 
&nbsp;
Branches:  ()
Changed files:  ([file-in-branch-1 :add])
&nbsp;
<strong>diff --git a/file-in-branch-1 b/file-in-branch-1</strong>
<strong>new file mode 100644</strong>
<strong>index 0000000..e69de29</strong>
<strong>--- /dev/null</strong>
<strong>+++ b/file-in-branch-1</strong>
&nbsp;
&nbsp;
commit 394ce42cb3bcf44ff4e9a94949814bacddcdfe9b
Author:  Pavel Tisnovsky
Files:  ([garbage :add])
&nbsp;
 Added garbage 
&nbsp;
Branches:  (refs/heads/master)
Changed files:  ([garbage :add])
&nbsp;
<strong>diff --git a/garbage b/garbage</strong>
<strong>new file mode 100644</strong>
<strong>index 0000000..e69de29</strong>
<strong>--- /dev/null</strong>
<strong>+++ b/garbage</strong>
&nbsp;
&nbsp;
commit 0fd398ab16e53ea0b783aef2413d75b75c6462cd
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 Updated README.md 
&nbsp;
Branches:  (refs/heads/master)
Changed files:  ([README.md :edit])
&nbsp;
<strong>diff --git a/README.md b/README.md</strong>
<strong>index 6edd528..04aafb8 100644</strong>
<strong>--- a/README.md</strong>
<strong>+++ b/README.md</strong>
<strong>@@ -1,2 +1,3 @@</strong>
<strong> # testrepo</strong>
<strong> testrepo</strong>
<strong>+hello!</strong>
&nbsp;
&nbsp;
commit badf2b12f9281a8581009bfa068a5147c4cbc87a
Author:  Pavel Tisnovsky
Files:  [[README.md :add]]
&nbsp;
 Initial commit 
&nbsp;
Branches:  (refs/heads/master)
Changed files:  [[README.md :add]]
&nbsp;
nil
</pre>

<p>Ukázka výstupu demonstračního příkladu po jeho spuštění (repositář ve stavu
se čtyřmi větvemi, spojením větví a merge konfliktem):</p>

<pre>
List of all revision objects
&nbsp;
commit ebffda7b2832c220e591d077ba448a0983fb1a47
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 Merge branch 'master' into branch-3
&nbsp;
Conflicts:
	README.md 
&nbsp;
Branches:  ()
Changed files:  ([README.md :edit])
&nbsp;
&nbsp;
<strong>diff --git a/README.md b/README.md</strong>
<strong>index a999387..50943b6 100644</strong>
<strong>--- a/README.md</strong>
<strong>+++ b/README.md</strong>
<strong>@@ -2,5 +2,9 @@</strong>
<strong> testrepo</strong>
<strong> hello!</strong>
<strong>&nbsp; </strong>
<strong>+&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</strong>
<strong> change incompatible with master</strong>
<strong> &nbsp; </strong>
<strong>+=======</strong>
<strong>+update</strong>
<strong>+&gt;&gt;&gt;&gt;&gt;&gt;&gt; master</strong>
&nbsp; 
&nbsp; 
&nbsp; 
commit 19be06f06b8c5cb4a0dee5969d9a30c17f2cbc7d
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 Change in README.md 
&nbsp;
Branches:  ()
Changed files:  ([README.md :edit])
&nbsp;
<strong>diff --git a/README.md b/README.md</strong>
<strong>index 04aafb8..a999387 100644</strong>
<strong>--- a/README.md</strong>
<strong>+++ b/README.md</strong>
<strong>@@ -1,3 +1,6 @@</strong>
<strong> # testrepo</strong>
<strong> testrepo</strong>
<strong> hello!</strong>
<strong>+</strong>
<strong>+change incompatible with master</strong>
<strong>+</strong>
&nbsp;
&nbsp;
commit 4be57bb203050da628b66a045610bb6e0e7b243f
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 Updated README.md 
&nbsp;
Branches:  (refs/heads/master)
Changed files:  ([README.md :edit])
&nbsp;
<strong>diff --git a/README.md b/README.md</strong>
<strong>index 04aafb8..a2e71dd 100644</strong>
<strong>--- a/README.md</strong>
<strong>+++ b/README.md</strong>
<strong>@@ -1,3 +1,5 @@</strong>
<strong> # testrepo</strong>
<strong> testrepo</strong>
<strong> hello!</strong>
<strong>+</strong>
<strong>+update</strong>
&nbsp;
&nbsp;
commit 038bdf4191194b78fc683e40493c1ecace4f1e40
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-3 :add])
&nbsp;
 Added file-in-branch-3 into branch-3 
&nbsp;
Branches:  (refs/heads/master)
Changed files:  ([file-in-branch-3 :add])
&nbsp;
<strong>diff --git a/file-in-branch-3 b/file-in-branch-3</strong>
<strong>new file mode 100644</strong>
<strong>index 0000000..e69de29</strong>
<strong>--- /dev/null</strong>
<strong>+++ b/file-in-branch-3</strong>
&nbsp;
&nbsp;
commit 07f9a94593ec3e065a7eeaedbbc5220ffe5c5722
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-2 :add])
&nbsp;
 Added file-in-branch-2 
&nbsp;
Branches:  ()
Changed files:  ([file-in-branch-2 :add])
&nbsp;
<strong>diff --git a/file-in-branch-2 b/file-in-branch-2</strong>
<strong>new file mode 100644</strong>
<strong>index 0000000..e69de29</strong>
<strong>--- /dev/null</strong>
<strong>+++ b/file-in-branch-2</strong>
&nbsp;
&nbsp;
commit f84564ce7fa81f865e60d3d2e18f5789539a237a
Author:  Pavel Tisnovsky
Files:  ([file-in-branch-1 :add])
&nbsp;
 Added file-in-branch-1 
&nbsp;
Branches:  ()
Changed files:  ([file-in-branch-1 :add])
&nbsp;
<strong>diff --git a/file-in-branch-1 b/file-in-branch-1</strong>
<strong>new file mode 100644</strong>
<strong>index 0000000..e69de29</strong>
<strong>--- /dev/null</strong>
<strong>+++ b/file-in-branch-1</strong>
&nbsp;
&nbsp;
commit 394ce42cb3bcf44ff4e9a94949814bacddcdfe9b
Author:  Pavel Tisnovsky
Files:  ([garbage :add])
&nbsp;
 Added garbage 
&nbsp;
Branches:  (refs/heads/master)
Changed files:  ([garbage :add])
&nbsp;
<strong>diff --git a/garbage b/garbage</strong>
<strong>new file mode 100644</strong>
<strong>index 0000000..e69de29</strong>
<strong>--- /dev/null</strong>
<strong>+++ b/garbage</strong>
&nbsp;
&nbsp;
commit 0fd398ab16e53ea0b783aef2413d75b75c6462cd
Author:  Pavel Tisnovsky
Files:  ([README.md :edit])
&nbsp;
 Updated README.md 
&nbsp;
Branches:  (refs/heads/master)
Changed files:  ([README.md :edit])
&nbsp;
<strong>diff --git a/README.md b/README.md</strong>
<strong>index 6edd528..04aafb8 100644</strong>
<strong>--- a/README.md</strong>
<strong>+++ b/README.md</strong>
<strong>@@ -1,2 +1,3 @@</strong>
<strong> # testrepo</strong>
<strong> testrepo</strong>
<strong>+hello!</strong>
&nbsp;
&nbsp;
commit badf2b12f9281a8581009bfa068a5147c4cbc87a
Author:  Pavel Tisnovsky
Files:  [[README.md :add]]
&nbsp;
 Initial commit 
&nbsp;
Branches:  (refs/heads/master)
Changed files:  [[README.md :add]]
&nbsp;
nil
&nbsp;
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Repositář s&nbsp;dnešními demonstračními příklady</h2>

<p>Všechny čtyři dnes popsané demonstrační příklady byly, podobně jako
v&nbsp;předchozích částech tohoto seriálu, uloženy do Git repositáře dostupného
na adrese <a
href="https://github.com/tisnik/clojure-examples">https://github.com/tisnik/clojure-examples</a>.
V&nbsp;tabulce zobrazené pod tímto odstavcem naleznete na zdrojové kódy
jednotlivých demonstračních příkladů přímé odkazy:</p>

<table>
<tr><th>#</th><th>Příklad </th><th>Github</th></tr>
<tr><td>1</td><td>git-test12</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test12">https://github.com/tisnik/clojure-examples/tree/master/git-test12</a></td></tr>
<tr><td>2</td><td>git-test13</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test13">https://github.com/tisnik/clojure-examples/tree/master/git-test13</a></td></tr>
<tr><td>3</td><td>git-test14</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test14">https://github.com/tisnik/clojure-examples/tree/master/git-test14</a></td></tr>
<tr><td>4</td><td>git-test15</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test15">https://github.com/tisnik/clojure-examples/tree/master/git-test15</a></td></tr>
</table>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odkazy na předchozí části tohoto seriálu</h2>

<p>Stalo se již zvykem uvést odkazy na všechny předchozí části tohoto seriálu.
Tento zvyk samozřejmě dodržíme i dnes:</p>

<ol>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (2)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (3)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/</a>
</li>

</ol>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Seriál o Gitu: 1. díl - Git - Historie a principy<br />
<a href="http://www.itnetwork.cz/git-tutorial-historie-a-principy">http://www.itnetwork.cz/git-tutorial-historie-a-principy</a>
</li>

<li>2. díl - Git - Instalace a vytvoření repositáře<br />
<a href="http://www.itnetwork.cz/git-tutorial-instalace-a-stazeni-repositare">http://www.itnetwork.cz/git-tutorial-instalace-a-stazeni-repositare</a>
</li>

<li>3. díl - Git - Základy<br />
<a href="http://www.itnetwork.cz/git-tutorial-zaklady">http://www.itnetwork.cz/git-tutorial-zaklady</a>
</li>

<li>4. díl - Git - Zkoumání historie<br />
<a href="http://www.itnetwork.cz/git-tutorial-historie">http://www.itnetwork.cz/git-tutorial-historie</a>
</li>

<li>5. díl - Git - Rozděluj a panuj<br />
<a href="http://www.itnetwork.cz/git-tutorial-vetve">http://www.itnetwork.cz/git-tutorial-vetve</a>
</li>

<li>6. díl - Git - práce se vzdáleným repositářem<br />
<a href="http://www.itnetwork.cz/git-prace-se-vzdalenym-repositarem">http://www.itnetwork.cz/git-prace-se-vzdalenym-repositarem</a>
</li>

<li>3.1 Git Branching - What a Branch Is<br />
<a href="http://git-scm.com/book/en/v1/Git-Branching-What-a-Branch-Is">http://git-scm.com/book/en/v1/Git-Branching-What-a-Branch-Is</a>
</li>

<li>Building User Interfaces with Seesaw (slajdy k&nbsp;přednášce)<br />
<a href="http://darevay.com/talks/clojurewest2012/#/title-slide">http://darevay.com/talks/clojurewest2012/#/title-slide</a>
</li>

<li>Seesaw na GitHubu<br />
<a href="https://github.com/daveray/seesaw">https://github.com/daveray/seesaw</a>
</li>

<li>Seesaw API Documentation<br />
<a href="http://daveray.github.io/seesaw/">http://daveray.github.io/seesaw/</a>
</li>

<li>Seesaw wiki<br />
<a href="https://github.com/daveray/seesaw/wiki">https://github.com/daveray/seesaw/wiki</a>
</li>

<li>seesaw-repl-tutorial.clj<br />
<a href="https://gist.github.com/daveray/1441520">https://gist.github.com/daveray/1441520</a>
</li>

<li>Témata o Seesaw na Google groups<br />
<a href="https://groups.google.com/forum/#!forum/seesaw-clj">https://groups.google.com/forum/#!forum/seesaw-clj</a>
</li>

<li>Threading macro (dokumentace k&nbsp;jazyku Clojure)<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;</a>
</li>

<li>Understanding the Clojure -&gt; macro<br />
<a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/</a>
</li>

<li>Clisk<br />
<a href="https://github.com/mikera/clisk">https://github.com/mikera/clisk</a>
</li>

<li>clojars: net.mikera/clisk<br />
<a href="https://clojars.org/net.mikera/clisk">https://clojars.org/net.mikera/clisk</a>
</li>

<li>clojure.inspector<br />
<a href="http://clojure.github.io/clojure/clojure.inspector-api.html">http://clojure.github.io/clojure/clojure.inspector-api.html</a>
</li>

<li>Clisk: wiki<br />
<a href="https://github.com/mikera/clisk/wiki">https://github.com/mikera/clisk/wiki</a>
</li>

<li>Dokumentace vygenerovaná pro knihovnu core.matrix<br />
<a href="https://cloojure.github.io/doc/core.matrix/index.html">https://cloojure.github.io/doc/core.matrix/index.html</a>
</li>

<li>Size and Dimensionality<br />
<a href="https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion">https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion</a>
</li>

<li>Towards core.matrix for Clojure?<br />
<a href="https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/">https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/</a>
</li>

<li>The Clojure Toolbox<br />
<a href="http://www.clojure-toolbox.com/">http://www.clojure-toolbox.com/</a>
</li>

<li>Neanderthal<br />
<a href="http://neanderthal.uncomplicate.org/">http://neanderthal.uncomplicate.org/</a>
</li>

<li>Hello world project<br />
<a href="https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj">https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj</a>
</li>

<li>vectorz-clj<br />
<a href="https://github.com/mikera/vectorz-clj">https://github.com/mikera/vectorz-clj</a>
</li>

<li>vectorz - Examples<br />
<a href="https://github.com/mikera/vectorz-clj/wiki/Examples">https://github.com/mikera/vectorz-clj/wiki/Examples</a>
</li>

<li>gloss<br />
<a href="https://github.com/ztellman/gloss">https://github.com/ztellman/gloss</a>
</li>

<li>HTTP client/server for Clojure<br />
<a href="http://www.http-kit.org/">http://www.http-kit.org/</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>java.jdbc API Reference<br />
<a href="https://clojure.github.io/java.jdbc/">https://clojure.github.io/java.jdbc/</a>
</li>

<li>Hiccup<br />
<a href="https://github.com/weavejester/hiccup">https://github.com/weavejester/hiccup</a>
</li>

<li>Clojure Ring na GitHubu<br />
<a href="https://github.com/ring-clojure/ring">https://github.com/ring-clojure/ring</a>
</li>

<li>A brief overview of the Clojure web stack<br />
<a href="https://brehaut.net/blog/2011/ring_introduction">https://brehaut.net/blog/2011/ring_introduction</a>
</li>

<li>Getting Started with Ring<br />
<a href="http://www.learningclojure.com/2013/01/getting-started-with-ring.html">http://www.learningclojure.com/2013/01/getting-started-with-ring.html</a>
</li>

<li>Getting Started with Ring and Compojure - Clojure Web Programming<br />
<a href="http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html">http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

