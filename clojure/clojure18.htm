<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Clojure a práce s&nbsp;Gitem (2)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=iso-8859-2" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Clojure a práce s&nbsp;Gitem (2)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o programovacím jazyku Clojure i o knihovnách, které jsou pro tento jazyk dostupné, se již podruhé budeme zabývat popisem užitečné knihovny nazvané clj-jgit, která je odvozena od známé javovské knihovny JGit. Dnes si řekneme podrobnosti o práci s větvemi a taktéž o způsobu zjištění konfigurace repositáře.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Clojure a práce s&nbsp;Gitem (2)</a></p>
<p><a href="#k02">2. Demonstrační příklad <strong>git-test7</strong>: výpis lokálních větví repositáře</a></p>
<p><a href="#k03">3. Demonstrační příklad <strong>git-test8</strong>: výpis vzdálených větví repositáře</a></p>
<p><a href="#k04">4. Demonstrační příklad <strong>git-test9</strong>: přepnutí na vybranou větev (checkout)</a></p>
<p><a href="#k05">5. Demonstrační příklad <strong>git-test10</strong>: vytvoření nové (lokální) větve</a></p>
<p><a href="#k06">6. Demonstrační příklad <strong>git-test11</strong>: zjištění vybraných konfiguračních voleb repositáře</a></p>
<p><a href="#k07">7. Repositář s&nbsp;dnešními demonstračními příklady</a></p>
<p><a href="#k08">8. Odkazy na předchozí části seriálu</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Clojure a práce s&nbsp;Gitem (2)</h2>

<p>Dnes se již podruhé budeme zabývat popisem knihovny <i>clj-jgit</i>, kterou
mohou využít vývojáři používající programovací jazyk <i>Clojure</i> pro tvorbu
svých aplikací. Již <a
href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/">v&nbsp;předchozím
článku</a> jsme si řekli základní informace o této knihovně i o faktu, že se
vlastně jedná o z&nbsp;vývojářského hlediska pěkně navržené API ke knihovně
<i>JGit</i>, která je využívána v&nbsp;některých projektech naprogramovaných
v&nbsp;Javě. Z&nbsp;demonstračních příkladů, které byly minule taktéž
prezentovány, je zřejmé, jakým způsobem je možné naklonovat repositář, vypsat
si informace o (vzdálených) větvích, přidat do repositáře nové soubory a
následně provést commit. Dnes si ukážeme další možnosti, které nám knihovna
<i>clj-jgit</i> nabízí. Především si vyzkoušíme přechod na jinou větev,
tj.&nbsp;obdobu příkazu <strong>git checkout</strong>, dále pak zjištění
informací o konfiguraci repositáře a v&nbsp;následující části se
mj.&nbsp;zmíníme o jedné možnosti využití klíčů (dvojice veřejný klíč+soukromý
klíč) pro přístup ke vzdálenému repositáři.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Demonstrační příklad <strong>git-test7</strong>: výpis lokálních větví repositáře</h2>

<p>Dnešní první demonstrační příklad je velmi jednoduchý, protože jeho jedinou
činností je výpis logovacích informací (což již známe z&nbsp;minula) a následně
pak výpis všech lokálních větví repositáře. Pro získání sekvence všech větví,
ať již lokálních či vzdálených, se používá funkce nazvaná
<strong>clj-jgit.porcelain/git-branch-list</strong>, které se
v&nbsp;nejjednodušším případě předá pouze reference na repositář získaná
například s&nbsp;využitím již minule popsané funkce
<strong>clj-jgit.porcelain/with-repo</strong>. Sekvence vrácená funkcí
<strong>clj-jgit.porcelain/git-branch-list</strong> obsahuje javovské objekty
typu <strong>org.eclipse.jgit.internal.storage.file.RefDirectory</strong>.
Pokud pouze potřebujeme vypsat jména větví, postačuje nad každým objektem ve
vrácené sekvenci zavolat metodu <strong>.getName</strong>. Část kódu, která se
postará o vypsání jmen lokálních větví, může vypadat následovně:</p>

<pre>
(defn <strong>print-local-branches</strong>
    <i>"Vypis vsech lokalnich vetvi pro vybrany repositar."</i>
    [repo]
    (println "\nLocal branches")
    (doseq [branch (jgit/git-branch-list repo)]
        (println (.getName branch))))
</pre>

<p>Pro vytvoření kostry demonstračního příkladu se použije příkaz, který již
dokonale známe z&nbsp;předchozích částí tohoto seriálu:</p>

<pre>
lein new app git-7
</pre>

<p>Úprava projektového souboru <strong>project.clj</strong> spočívá
v&nbsp;přidání dvou nových knihoven do sekce
<strong>:dependencies</strong>:</p>

<pre>
(defproject <strong>git-test7</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test7.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový kód souboru <strong>src/git_test7/core.clj</strong>:</p>

<pre>
(ns <strong>git-test7</strong>.core
    (:gen-class))
&nbsp;
(require '[clj-jgit.porcelain :as jgit])
(require '[clj-jgit.querying  :as jgit-query])
(require '[hozumi.rm-rf :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    "<i>Adresa GIT repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se GIT repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani GIT repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>print-customized-log</strong>
    <i>"Vypis logovacich informaci ve zvolenem formatu."</i>
    [repository]
    (println "\nLog:")
    (doseq [log-entry (jgit/git-log repository)]
        (let [info (jgit-query/commit-info repository log-entry)]
             (println (:author info) ":" (:message info)))))
&nbsp;
(defn <strong>print-local-branches</strong>
    <i>"Vypis vsech lokalnich vetvi pro vybrany repositar."</i>
    [repo]
    (println "\nLocal branches")
    (doseq [branch (jgit/git-branch-list repo)]
        (println (.getName branch))))
&nbsp;
(defn <strong>git-test-7</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis podrobnejsiho logu."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    <i>; povsimnete si pouziti "automagicky" vytvorene promenne,</i>
    <i>; ktera se jmenuje 'repo'</i>
    (try (jgit/with-repo directory-name
                         (print-customized-log repo)
                         (print-local-branches repo))
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-7 repository-url directory-name))
</pre>

<p>Po spuštění tohoto demonstračního příkladu nad testovacím repositářem by se
(pokud se tedy klonování zdařilo) měly na standardní výstup vypsat následující
informace:</p>

<pre>
Log:
Pavel Tisnovsky : Added garbage
Pavel Tisnovsky : Updated README.md
Pavel Tišnovský : Initial commit
&nbsp;
Local branches
refs/heads/master
</pre>

<p>Vidíme, že ihned po klonování existuje pouze jedna lokální větev, což je
v&nbsp;pořádku.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Demonstrační příklad <strong>git-test8</strong>: výpis vzdálených větví repositáře</h2>

<p>Ve druhém demonstračním příkladu se jménem <strong>git-test8</strong> se
kromě lokálních větví vypíšou i větve vzdálené (remote). Mohlo by se zdát, že
pro získání vzdálených větví bude nutné použít jinou funkci než pro větve
lokální, ve skutečnosti se však pro obě činnosti používá shodná funkce
<strong>clj-jgit.porcelain/git-branch-list</strong>, které se však
v&nbsp;případě potřeby předá ještě nepovinný parametr <strong>:remote</strong>
(význam tohoto parametru je zřejmý), popř.&nbsp;je možné použít další nepovinný
parametr <strong>:all</strong> (opět se zřejmým významem). Ostatně se pro
zajímavost můžeme podívat na deklaraci funkce
<strong>clj-jgit.porcelain/git-branch-list</strong>, která poměrně elegantním
způsobem obaluje mnohem delší javovský kód (viz též <a
href="http://clj-jgit.github.io/clj-jgit/">http://clj-jgit.github.io/clj-jgit/</a>:</p>

<pre>
(defn <strong>git-branch-list</strong>
  ([^Git repo]
     (git-branch-list repo :local))
  ([^Git repo opt]
     (let [opt-val {:all org.eclipse.jgit.api.ListBranchCommand$ListMode/ALL
                    :remote org.eclipse.jgit.api.ListBranchCommand$ListMode/REMOTE}
           branches (if (= opt :local)
                      (-&gt; repo
                          (.branchList)
                          (.call))
                      (-&gt; repo
                          (.branchList)
                          (.setListMode (opt opt-val))
                          (.call)))]
       (seq branches))))
</pre>

<p>Použití této funkce pro výpis lokálních i vzdálených větví můžeme vypadat
následovně:</p>

<pre>
(defn <strong>print-local-branches</strong>
    <i>"Vypis vsech lokalnich vetvi pro vybrany repositar."</i>
    [repo]
    (println "\nLocal branches")
    (doseq [branch (jgit/git-branch-list repo)]
        (println (.getName branch))))
&nbsp;
(defn <strong>print-remote-branches</strong>
    <i>"Vypis vsech vzdalenych vetvi pro vybrany repositar."</i>
    [repo]
    (println "\nRemote branches")
    (doseq [branch (jgit/git-branch-list repo :remote)]
        (println (.getName branch))))
</pre>

<p>Vytvoření kostry demonstračního příkladu:</p>

<pre>
lein new app git-8
</pre>

<p>Úprava projektového souboru <strong>project.clj</strong> je stejná, jako
tomu bylo v&nbsp;předchozím demonstračním příkladu:</p>

<pre>
(defproject <strong>git-test8</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test8.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový kód souboru <strong>src/git_test8/core.clj</strong>:</p>

<pre>
(ns <strong>git-test8</strong>.core
    (:gen-class))
&nbsp;
(require '[clj-jgit.porcelain :as jgit])
(require '[clj-jgit.querying  :as jgit-query])
(require '[hozumi.rm-rf :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    <i>"Adresa GIT repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se GIT repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani GIT repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>print-customized-log</strong>
    <i>"Vypis logovacich informaci ve zvolenem formatu."</i>
    [repository]
    (println "\nLog:")
    (doseq [log-entry (jgit/git-log repository)]
        (let [info (jgit-query/commit-info repository log-entry)]
             (println (:author info) ":" (:message info)))))
&nbsp;
(defn <strong>print-local-branches</strong>
    <i>"Vypis vsech lokalnich vetvi pro vybrany repositar."</i>
    [repo]
    (println "\nLocal branches")
    (doseq [branch (jgit/git-branch-list repo)]
        (println (.getName branch))))
&nbsp;
(defn <strong>print-remote-branches</strong>
    <i>"Vypis vsech vzdalenych vetvi pro vybrany repositar."</i>
    [repo]
    (println "\nRemote branches")
    (doseq [branch (jgit/git-branch-list repo :remote)]
        (println (.getName branch))))
&nbsp;
(defn <strong>git-test-8</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis podrobnejsiho logu."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    <i>; povsimnete si pouziti "automagicky" vytvorene promenne,</i>
    <i>; ktera se jmenuje 'repo'</i>
    (try (jgit/with-repo directory-name
                         (print-customized-log repo)
                         (print-local-branches repo)
                         (print-remote-branches repo))
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-8 repository-url directory-name))
</pre>

<p>Po spuštění druhého demonstračního příkladu nad testovacím repositářem by se
měly na standardní výstup vypsat následující informace:</p>

<pre>
Log:
Pavel Tisnovsky : Added garbage
Pavel Tisnovsky : Updated README.md
Pavel Tišnovský : Initial commit
&nbsp;
Local branches
refs/heads/master
&nbsp;
Remote branches
refs/remotes/origin/branch-1
refs/remotes/origin/branch-2
refs/remotes/origin/master
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Demonstrační příklad <strong>git-test9</strong>: přepnutí na vybranou větev (checkout)</h2>

<p>Získání sekvence lokálních či vzdálených větví je samozřejmě pouze nezbytný
začátek pro provádění dalších operací s&nbsp;větvemi. Pro přepnutí větví se
v&nbsp;GITu používá příkaz <strong>git checkout [jméno větve]</strong> a
podobně nazvaná funkce &ndash; <strong>clj-jgit.porcelain/git-checkout</strong>
&ndash; je samozřejmě součástí knihovny <i>clj-jgit</i>. Deklarace této funkce
vypadá poněkud složitě, ale to jen z&nbsp;toho důvodu, že mnoho jejích
parametrů je nepovinných:</p>

<pre>
(defn <strong>git-checkout</strong>
  ([^Git repo branch-name]
     (<strong>git-checkout</strong> repo branch-name false false nil))
  ([^Git repo branch-name create-branch?]
     (<strong>git-checkout</strong> repo branch-name create-branch? false nil))
  ([^Git repo branch-name create-branch? force?]
     (<strong>git-checkout</strong> repo branch-name create-branch? force? nil))
  ([^Git repo branch-name create-branch? force? ^String start-point]
     (if (nil? start-point)
       (-&gt; repo
           (.checkout)
           (.setName branch-name)
           (.setCreateBranch create-branch?)
           (.setForce force?)
           (.call))
       (-&gt; repo
           (.checkout)
           (.setName branch-name)
           (.setCreateBranch create-branch?)
           (.setForce force?)
           (.setStartPoint start-point)
           (.call)))))
</pre>

<p>V&nbsp;našem demonstračním příkladu bude použita první (nejjednodušší)
možnost volání této funkce, kdy se jí předá pouze reference na repositář a
jméno větve:</p>

<pre>
(defn <strong>checkout</strong>
    [repo branch-name]
    (try
        (jgit/git-checkout repo branch-name)
        (catch Exception e
            (println "Unable to checkout: " e))))
&nbsp;
&nbsp;
&nbsp;
(checkout repo "refs/remotes/origin/branch-1")
</pre>

<p>Vytvoření kostry demonstračního příkladu:</p>

<pre>
lein new app git-9
</pre>

<p>Úprava projektového souboru <strong>project.clj</strong> se nijak neliší od
předchozích příkladů:</p>

<pre>
(defproject <strong>git-test9</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test9.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový kód souboru <strong>src/git_test9/core.clj</strong>:</p>

<pre>
(ns <strong>git-test9</strong>.core
    (:gen-class))
&nbsp;
(require '[clj-jgit.porcelain :as jgit])
(require '[clj-jgit.querying  :as jgit-query])
(require '[hozumi.rm-rf :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    <i>"Adresa GIT repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se GIT repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani GIT repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>print-customized-log</strong>
    <i>"Vypis logovacich informaci ve zvolenem formatu."</i>
    [repository]
    (println "\nLog:")
    (doseq [log-entry (jgit/git-log repository)]
        (let [info (jgit-query/commit-info repository log-entry)]
             (println (:author info) ":" (:message info)))))
&nbsp;
(defn <strong>print-local-branches</strong>
    <i>"Vypis vsech lokalnich vetvi pro vybrany repositar."</i>
    [repo]
    (println "\nLocal branches")
    (doseq [branch (jgit/git-branch-list repo)]
        (println (.getName branch))))
&nbsp;
(defn <strong>print-remote-branches</strong>
    <i>"Vypis vsech vzdalenych vetvi pro vybrany repositar."</i>
    [repo]
    (println "\nRemote branches")
    (doseq [branch (jgit/git-branch-list repo :remote)]
        (println (.getName branch))))
&nbsp;
(defn <strong>checkout</strong>
    [repo branch-name]
    (try
        (jgit/git-checkout repo branch-name)
        (catch Exception e
            (println "Unable to checkout: " e))))
&nbsp;
(defn <strong>git-test-9</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis podrobnejsiho logu."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    <i>; povsimnete si pouziti "automagicky" vytvorene promenne,</i>
    <i>; ktera se jmenuje 'repo'</i>
    (try (jgit/with-repo directory-name
                         (print-customized-log repo)
                         (print-local-branches repo)
                         (print-remote-branches repo)
                         (checkout repo "refs/remotes/origin/branch-1") 
                         (print-local-branches repo)
                         (print-remote-branches repo))
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-9 repository-url directory-name))
</pre>

<p>Zajímavé informace se vypíšou na standardní výstup po spuštění tohoto
příkladu. První část výpisu se vztahuje k&nbsp;lokálním a globálním větvím ve
chvíli, než je proveden <i>checkout</i>:</p>

<pre>
Log:
Pavel Tisnovsky : Added garbage
Pavel Tisnovsky : Updated README.md
Pavel Tišnovský : Initial commit
&nbsp;
Local branches
refs/heads/master
&nbsp;
Remote branches
refs/remotes/origin/branch-1
refs/remotes/origin/branch-2
refs/remotes/origin/master
</pre>

<p>Po provedení <i>checkoutu</i> dostaneme odlišné sekvence, což ovšem opět
odpovídá chování GITu, viz též <a
href="http://linux.die.net/man/1/git-checkout">man git-checkout</a>:</p>

<pre>
Local branches
HEAD
refs/heads/master
&nbsp;
Remote branches
HEAD
refs/remotes/origin/branch-1
refs/remotes/origin/branch-2
refs/remotes/origin/master
</pre>

<p>Všechny další operace, tj.&nbsp;zejména minule popsané přidání souboru,
ubrání (vymazání) souboru či modifikace souboru, se samozřejmě vztahují
k&nbsp;aktuální větvi.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Demonstrační příklad <strong>git-test10</strong>: vytvoření nové (lokální) větve</h2>

<p>Podívejme se nyní na další dvě základní operace, které lze provádět
s&nbsp;větvemi. Pro vytvoření nové lokální větve slouží funkce
<strong>clj-jgit.porcelain/git-branch-create</strong>, pro smazání pak funkce
<strong>clj-jgit.porcelain/git-branch-delete</strong>. V&nbsp;nejjednodušším
případě se těmto funkcím předává reference na repositáž a jméno větve, která se
má nově vytvořit či naopak smazat; ovšem obě funkce mají i další nepovinné
parametry, což je patrné z&nbsp;výpisu jejich zdrojového kódu (kde mimochodem
je opět ukázáno elegantní obalení složitějšího javovského kódu):</p>

<pre>
(defn <strong>git-branch-create</strong>
  ([^Git repo branch-name]
     (<strong>git-branch-create</strong> repo branch-name false nil))
  ([^Git repo branch-name force?]
     (<strong>git-branch-create</strong> repo branch-name force? nil))
  ([^Git repo branch-name force? ^String start-point]
     (if (nil? start-point)
       (-&gt; repo
           (.branchCreate)
           (.setName branch-name)
           (.setForce force?)
           (.call))
       (-&gt; repo
           (.branchCreate)
           (.setName branch-name)
           (.setForce force?)
           (.setStartPoint start-point)
           (.call)))))
&nbsp;
(defn <strong>git-branch-delete</strong>
  ([^Git repo branch-names]
     (<strong>git-branch-delete</strong> repo branch-names false))
  ([^Git repo branch-names force?]
     (-&gt; repo
         (.branchDelete)
         (.setBranchNames (into-array String branch-names))
         (.setForce force?)
         (.call))))
</pre>

<p>Použití funkce <strong>clj-jgit.porcelain/git-branch-create</strong> je
skutečně velmi jednoduché:</p>

<pre>
(jgit/git-branch-create repo "new-branch")
</pre>

<p>V&nbsp;dalším demonstračním příkladu bude ukázáno, jak se změní výpis
lokálních a vzdálených větví po vytvoření nové větve, přepnutí na jinou větvi
atd. Vytvoření kostry demonstračního příkladu:</p>

<pre>
lein new app git-10
</pre>

<p>Úprava projektového souboru <strong>project.clj</strong> (podle předpokladu
se zde nedějí žádné podstatné změny):</p>

<pre>
(defproject <strong>git-test10</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test10.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový kód souboru <strong>src/git_test10/core.clj</strong>:</p>

<pre>
(ns <strong>git-test10</strong>.core
    (:gen-class))
&nbsp;
(require '[clj-jgit.porcelain :as jgit])
(require '[clj-jgit.querying  :as jgit-query])
(require '[hozumi.rm-rf :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    <i>"Adresa GIT repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se GIT repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani GIT repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>print-customized-log</strong>
    <i>"Vypis logovacich informaci ve zvolenem formatu."</i>
    [repository]
    (println "\nLog:")
    (doseq [log-entry (jgit/git-log repository)]
        (let [info (jgit-query/commit-info repository log-entry)]
             (println (:author info) ":" (:message info)))))
&nbsp;
(defn <strong>print-local-branches</strong>
    <i>"Vypis vsech lokalnich vetvi pro vybrany repositar."</i>
    [repo]
    (println "\nLocal branches")
    (doseq [branch (jgit/git-branch-list repo)]
        (println (.getName branch))))
&nbsp;
(defn <strong>print-remote-branches</strong>
    <i>"Vypis vsech vzdalenych vetvi pro vybrany repositar."</i>
    [repo]
    (println "\nRemote branches")
    (doseq [branch (jgit/git-branch-list repo :remote)]
        (println (.getName branch))))
&nbsp;
(defn <strong>print-branches</strong>
    [repo]
    (print-local-branches repo)
    (print-remote-branches repo))
&nbsp;
(defn <strong>checkout</strong>
    [repo branch-name]
    (try
        (jgit/git-checkout repo branch-name)
        (catch Exception e
            (println "Unable to checkout: " e))))
&nbsp;
(defn <strong>git-test-10</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis podrobnejsiho logu."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    <i>; povsimnete si pouziti "automagicky" vytvorene promenne,</i>
    <i>; ktera se jmenuje 'repo'</i>
    (try (jgit/with-repo directory-name
                         (print-customized-log repo)
                         (print-branches repo)
&nbsp;
                         (println "\nCheckout to branch-1")
                         (checkout repo "refs/remotes/origin/branch-1") 
                         (print-branches repo)
&nbsp;
                         (println "\nCreating new branch")
                         (jgit/git-branch-create repo "new-branch")
                         (print-branches repo)
&nbsp;
                         (println "\nCheckout to new branch")
                         (checkout repo "new-branch") 
                         (print-branches repo))
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-10 repository-url directory-name))
</pre>

<p>Texty vypisované tímto příkladem si rozdělíme na několik částí. Nejdříve se
vypíšou nám již známé logovací informace, kde není nic nového:</p>

<pre>
Log:
Pavel Tisnovsky : Added garbage
Pavel Tisnovsky : Updated README.md
Pavel Tišnovský : Initial commit
</pre>

<p>Dále se ihned po naklonování vypíšou seznamy lokálních větví (v&nbsp;tomto
případě jen jedné větve) a větví vzdálených:</p>

<pre>
&nbsp;
Local branches
refs/heads/master
&nbsp;
Remote branches
refs/remotes/origin/branch-1
refs/remotes/origin/branch-2
refs/remotes/origin/master
</pre>

<p>Následně se provede přepnutí na větev <strong>branch-1</strong>, takže se
seznamy podle očekávání změní:</p>

<pre>
Checkout to branch-1
&nbsp;
Local branches
HEAD
refs/heads/master
&nbsp;
Remote branches
HEAD
refs/remotes/origin/branch-1
refs/remotes/origin/branch-2
refs/remotes/origin/master
</pre>

<p>Ve třetím kroku se vytvoří nová větev a opět dojde k&nbsp;očekávané
změně:</p>

<pre>
Creating new branch
&nbsp;
Local branches
HEAD
refs/heads/master
refs/heads/new-branch
&nbsp;
Remote branches
HEAD
refs/remotes/origin/branch-1
refs/remotes/origin/branch-2
refs/remotes/origin/master
</pre>

<p>Je důležité si uvědomit, že vytvoření nové větve ještě neznamená, že se na
ni GIT přepne. To se musí provést explicitně:</p>

<pre>
Checkout to new branch
&nbsp;
Local branches
refs/heads/master
refs/heads/new-branch
&nbsp;
Remote branches
refs/remotes/origin/branch-1
refs/remotes/origin/branch-2
refs/remotes/origin/master
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Demonstrační příklad <strong>git-test11</strong>: zjištění vybraných konfiguračních voleb repositáře</h2>

<p>V&nbsp;dnešním posledním příkladu si ukážeme způsob zjištění (přečtení)
vybraných konfiguračních voleb, tj.&nbsp;o přibližnou obdobu příkazu
<strong>git config --get [jméno]</strong>. Zde již situace není úplně
jednoduchá, protože je nutné použít složitější postup, který jsem implementoval
ve funkci <strong>get-config-option</strong>:</p>

<pre>
(defn <strong>get-config-option</strong>
    [repo x y z]
    (-&gt; repo
        (.getRepository)
        (.getConfig)
        (.getString x y z)))
</pre>

<p>Typickým (a možná i nejčastějším) příkladem použití je přečtení URL
vzdáleného repositáře. Na příkazové řádce lze použít:</p>

<pre>
<strong>git config --get remote.origin.url</strong>
git@github.com:tisnik/clojure-examples.git
</pre>

<p>V&nbsp;Clojure aplikaci namísto toho použijeme:</p>

<pre>
(get-config-option repo "remote" "origin" "url")
</pre>

<p>V&nbsp;příkladu se přečtou a zobrazí několik konfiguračních voleb:</p>

<pre>
(defn <strong>print-repo-configuration</strong>
    [repo]
    (println "GIT repo origin URL:  " (get-config-option repo "remote" "origin" "url"))
    (println "Remote origin fetch:  " (get-config-option repo "remote" "origin" "fetch"))
    (println "Branch master remote: " (get-config-option repo "branch" "master" "remote")))
</pre>

<p>Vytvoření kostry demonstračního příkladu:</p>

<pre>
lein new app git-11
</pre>

<p>Úprava projektového souboru <strong>project.clj</strong>:</p>

<pre>
(defproject <strong>git-test11</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test11.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový kód souboru <strong>src/git_test11/core.clj</strong>:</p>

<pre>
(ns <strong>git-test11</strong>.core
    (:gen-class))
&nbsp;
(require '[clj-jgit.porcelain :as jgit])
(require '[clj-jgit.querying  :as jgit-query])
(require '[hozumi.rm-rf :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    <i>"Adresa GIT repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se GIT repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani GIT repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>get-config-option</strong>
    [repo x y z]
    (-&gt; repo
        (.getRepository)
        (.getConfig)
        (.getString x y z)))
&nbsp;
(defn <strong>print-repo-configuration</strong>
    [repo]
    (println "GIT repo origin URL:  " (get-config-option repo "remote" "origin" "url"))
    (println "Remote origin fetch:  " (get-config-option repo "remote" "origin" "fetch"))
    (println "Branch master remote: " (get-config-option repo "branch" "master" "remote")))
&nbsp;
(defn <strong>git-test-11</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis podrobnejsiho logu."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    <i>; povsimnete si pouziti "automagicky" vytvorene promenne,</i>
    <i>; ktera se jmenuje 'repo'</i>
    (try (jgit/with-repo directory-name
                         (print-repo-configuration repo))
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-11 repository-url directory-name))
</pre>

<p>Po spuštění tohoto demonstračního příkladu by se měly vypsat následující
řádky (popř.&nbsp;nějaké chybové hlášení):</p>

<pre>
GIT repo origin URL:   https://github.com/tisnik/testrepo.git
Remote origin fetch:   +refs/heads/*:refs/remotes/origin/*
Branch master remote:  origin
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Repositář s&nbsp;dnešními demonstračními příklady</h2>

<p>Všech pět dnes popsaných demonstračních příkladů bylo, podobně jako
v&nbsp;předchozích částech tohoto seriálu, uloženo do Git repositáře dostupného
na adrese <a
href="https://github.com/tisnik/clojure-examples">https://github.com/tisnik/clojure-examples</a>.
V&nbsp;tabulce zobrazené pod tímto odstavcem naleznete na zdrojové kódy
jednotlivých demonstračních příkladů přímé odkazy:</p>

<table>
<tr><th>#</th><th>Příklad </th><th>Github</th></tr>
<tr><td>1</td><td>git-test7</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test7">https://github.com/tisnik/clojure-examples/tree/master/git-test7</a></td></tr>
<tr><td>2</td><td>git-test8</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test8">https://github.com/tisnik/clojure-examples/tree/master/git-test8</a></td></tr>
<tr><td>3</td><td>git-test9</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test9">https://github.com/tisnik/clojure-examples/tree/master/git-test9</a></td></tr>
<tr><td>4</td><td>git-test10</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test16">https://github.com/tisnik/clojure-examples/tree/master/git-test10</a></td></tr>
<tr><td>5</td><td>git-test11</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test11">https://github.com/tisnik/clojure-examples/tree/master/git-test11</a></td></tr>
</table>



<p><a name="k08"></a></p>
<h2 id="k08">8. Odkazy na předchozí části seriálu</h2>

<p>Stalo se již zvykem uvést odkazy na všechny předchozí části tohoto seriálu.
Tento zvyk samozřejmě dodržíme i dnes:</p>

<ol>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (2)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (3)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/</a>
</li>

</ol>



<p><a name="k09"></a></p>
<h2 id="k09">9. Odkazy na Internetu</h2>

<ol>

<li>Seriál o Gitu: 1. díl - Git - Historie a principy<br />
<a href="http://www.itnetwork.cz/git-tutorial-historie-a-principy">http://www.itnetwork.cz/git-tutorial-historie-a-principy</a>
</li>

<li>2. díl - Git - Instalace a vytvoření repositáře<br />
<a href="http://www.itnetwork.cz/git-tutorial-instalace-a-stazeni-repositare">http://www.itnetwork.cz/git-tutorial-instalace-a-stazeni-repositare</a>
</li>

<li>3. díl - Git - Základy<br />
<a href="http://www.itnetwork.cz/git-tutorial-zaklady">http://www.itnetwork.cz/git-tutorial-zaklady</a>
</li>

<li>4. díl - Git - Zkoumání historie<br />
<a href="http://www.itnetwork.cz/git-tutorial-historie">http://www.itnetwork.cz/git-tutorial-historie</a>
</li>

<li>5. díl - Git - Rozděluj a panuj<br />
<a href="http://www.itnetwork.cz/git-tutorial-vetve">http://www.itnetwork.cz/git-tutorial-vetve</a>
</li>

<li>6. díl - Git - práce se vzdáleným repositářem<br />
<a href="http://www.itnetwork.cz/git-prace-se-vzdalenym-repositarem">http://www.itnetwork.cz/git-prace-se-vzdalenym-repositarem</a>
</li>

<li>Building User Interfaces with Seesaw (slajdy k&nbsp;přednášce)<br />
<a href="http://darevay.com/talks/clojurewest2012/#/title-slide">http://darevay.com/talks/clojurewest2012/#/title-slide</a>
</li>

<li>Seesaw na GitHubu<br />
<a href="https://github.com/daveray/seesaw">https://github.com/daveray/seesaw</a>
</li>

<li>Seesaw API Documentation<br />
<a href="http://daveray.github.io/seesaw/">http://daveray.github.io/seesaw/</a>
</li>

<li>Seesaw wiki<br />
<a href="https://github.com/daveray/seesaw/wiki">https://github.com/daveray/seesaw/wiki</a>
</li>

<li>seesaw-repl-tutorial.clj<br />
<a href="https://gist.github.com/daveray/1441520">https://gist.github.com/daveray/1441520</a>
</li>

<li>Témata o Seesaw na Google groups<br />
<a href="https://groups.google.com/forum/#!forum/seesaw-clj">https://groups.google.com/forum/#!forum/seesaw-clj</a>
</li>

<li>Threading macro (dokumentace k&nbsp;jazyku Clojure)<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;</a>
</li>

<li>Understanding the Clojure -&gt; macro<br />
<a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/</a>
</li>

<li>Clisk<br />
<a href="https://github.com/mikera/clisk">https://github.com/mikera/clisk</a>
</li>

<li>clojars: net.mikera/clisk<br />
<a href="https://clojars.org/net.mikera/clisk">https://clojars.org/net.mikera/clisk</a>
</li>

<li>clojure.inspector<br />
<a href="http://clojure.github.io/clojure/clojure.inspector-api.html">http://clojure.github.io/clojure/clojure.inspector-api.html</a>
</li>

<li>Clisk: wiki<br />
<a href="https://github.com/mikera/clisk/wiki">https://github.com/mikera/clisk/wiki</a>
</li>

<li>Dokumentace vygenerovaná pro knihovnu core.matrix<br />
<a href="https://cloojure.github.io/doc/core.matrix/index.html">https://cloojure.github.io/doc/core.matrix/index.html</a>
</li>

<li>Size and Dimensionality<br />
<a href="https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion">https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion</a>
</li>

<li>Towards core.matrix for Clojure?<br />
<a href="https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/">https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/</a>
</li>

<li>The Clojure Toolbox<br />
<a href="http://www.clojure-toolbox.com/">http://www.clojure-toolbox.com/</a>
</li>

<li>Neanderthal<br />
<a href="http://neanderthal.uncomplicate.org/">http://neanderthal.uncomplicate.org/</a>
</li>

<li>Hello world project<br />
<a href="https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj">https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj</a>
</li>

<li>vectorz-clj<br />
<a href="https://github.com/mikera/vectorz-clj">https://github.com/mikera/vectorz-clj</a>
</li>

<li>vectorz - Examples<br />
<a href="https://github.com/mikera/vectorz-clj/wiki/Examples">https://github.com/mikera/vectorz-clj/wiki/Examples</a>
</li>

<li>gloss<br />
<a href="https://github.com/ztellman/gloss">https://github.com/ztellman/gloss</a>
</li>

<li>HTTP client/server for Clojure<br />
<a href="http://www.http-kit.org/">http://www.http-kit.org/</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>java.jdbc API Reference<br />
<a href="https://clojure.github.io/java.jdbc/">https://clojure.github.io/java.jdbc/</a>
</li>

<li>Hiccup<br />
<a href="https://github.com/weavejester/hiccup">https://github.com/weavejester/hiccup</a>
</li>

<li>Clojure Ring na GitHubu<br />
<a href="https://github.com/ring-clojure/ring">https://github.com/ring-clojure/ring</a>
</li>

<li>A brief overview of the Clojure web stack<br />
<a href="https://brehaut.net/blog/2011/ring_introduction">https://brehaut.net/blog/2011/ring_introduction</a>
</li>

<li>Getting Started with Ring<br />
<a href="http://www.learningclojure.com/2013/01/getting-started-with-ring.html">http://www.learningclojure.com/2013/01/getting-started-with-ring.html</a>
</li>

<li>Getting Started with Ring and Compojure - Clojure Web Programming<br />
<a href="http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html">http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

