<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Další užitečnou knihovnou použitelnou vývojáři, kteří pro tvorbu aplikací využívají programovací jazyk Clojure, je knihovna nazvaná Seesaw. Tato knihovna umožňuje snadnou tvorbu grafického uživatelského rozhraní, přičemž zde nalezneme všechny důležité prvky jazyka Clojure, zejména anonymní funkce, ekvivalence zápisu kódu a dat atd.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Seesaw: knihovna pro snadnou tvorbu GUI v&nbsp;programovacím jazyce Clojure</a></p>
<p><a href="#k02">2. Koncepty, na nichž je knihovna Seesaw postavena</a></p>
<p><a href="#k03">3. První demonstrační příklad: okno s&nbsp;tlačítkem</a></p>
<p><a href="#k04">4. Druhý demonstrační příklad: vylepšení zdrojového kódu s&nbsp;použitím threading makra</a></p>
<p><a href="#k05">5. Alternativní způsob přidání tlačítka do okna</a></p>
<p><a href="#k06">6. Zdrojový kód třetího demonstračního příkladu</a></p>
<p><a href="#k07">7. Zajištění automatického ukončení aplikace po zavření hlavního okna</a></p>
<p><a href="#k08">8. Listenery a (anonymní) callback funkce reagující na události</a></p>
<p><a href="#k09">9. Zdrojový kód čtvrtého demonstračního příkladu</a></p>
<p><a href="#k10">10. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k11">11. Odkazy na předchozí části seriálu</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Seesaw: knihovna pro snadnou tvorbu GUI v&nbsp;programovacím jazyce Clojure</h2>

<p>Další zajímavou a pro některé typy aplikací i velmi užitečnou knihovnou
použitelnou vývojáři, kteří tvoří své aplikace v&nbsp;programovacím jazyku
<i>Clojure</i>, je knihovna nazvaná <i>Seesaw</i>. Tato knihovna je určena pro
tvorbu grafického uživatelského rozhraní a jak uvidíme z&nbsp;demonstračních
příkladů, je použití této knihovny poměrně jednoduché a přímočaré. Je tomu tak
zejména z&nbsp;toho důvodu, že programovací jazyk <i>Clojure</i> má několik
vlastností, které jsou velice dobře využitelné právě pro tvorbu grafického
uživatelského prostředí. Jedná se zejména o ekvivalenci zápisu programového
kódu a dat (<a
href="https://en.wikipedia.org/wiki/Homoiconicity">homoikonicitu</a>),
existenci anonymních funkcí, možnost použití uzávěrů apod. Tyto vlastnosti se
projeví jak při deklarativním způsobu zápisu designu jednotlivých oken a
formulářů, tak i při programování reakcí na události (<i>events</i>) vznikající
při interakci aplikace s&nbsp;uživatelem s&nbsp;využitím grafického
uživatelského rozhraní (zapomenout nesmíme ani na velmi snadné volání
asynchronně běžících funkcí).</p>

<p>Vzhledem k&nbsp;tomu, že programovací jazyk <i>Clojure</i> běží nad
virtuálním strojem jazyka Java, používá knihovna <i>Seesaw</i> interně známou a
mnohými programátory proklínanou :-) knihovnu <i>Swing</i>. Ovšem rozhraní
<i>Seesaw</i> nemá prakticky nic společného s&nbsp;těžkopádným a mnohými
vývojáři špatně používaným Swingem, dokonce je možné v&nbsp;<i>Seesaw</i>
vytvářet plnohodnotné aplikace bez znalosti Swingu (mj.&nbsp;právě kvůli
nekorektnímu způsobu používání Swingu má tato knihovna a vůbec GUI psané
v&nbsp;Javě tak špatnou pověst, to je však z&nbsp;dosti velké části problém
skrytý již v&nbsp;samotném návrhu této knihovny). Ve skutečnosti má
programátorský model představený knihovnou <i>Seesaw</i> nejblíže ke známému
duu <a href="http://www.root.cz/serialy/programovaci-jazyk-tcl/">Tcl/Tk</a>,
ovšem s&nbsp;tím rozdílem, že se namísto dnes již poněkud zastaralého jazyka
<i>Tcl</i> používá modernější a lépe navržený jazyk <i>Clojure</i> (zde je
nutné dodat, že ten je postavený na 57 let starých myšlenkách).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Koncepty, na nichž je knihovna Seesaw postavena</h2>

<p>Při návrhu knihovny <i>Seesaw</i> bylo nutné propojit dva rozdílné světy:
svět funkcionálního jazyka <i>Clojure</i>, v&nbsp;němž je kladen velký důraz na
použití neměnných dat a datových struktur a svět grafického uživatelského
rozhraní, kde naopak každý prvek GUI má svůj stav, který se často mění,
většinou v&nbsp;reakci na akce prováděné uživatelem. Tvůrci knihovny
<i>Seesaw</i> tento problém vyřešili následovně &ndash; všechny prvky
grafického uživatelského rozhraní se vytváří s&nbsp;využitím funkcí
(&bdquo;konstruktorů&ldquo;), přičemž tyto funkce mají proměnný počet
<i>pojmenovaných</i> parametrů, což znamená, že před hodnotou každého parametru
je použit <i>keyword</i>, tj.&nbsp;symbol, před jehož jménem je zapsána
dvojtečka. Přesně tímto způsobem se s&nbsp;prvky grafického uživatelského
rozhraní pracuje v&nbsp;knihovně Tk. Podívejme se na jednoduchý úryvek
zdrojového kódu, v&nbsp;němž jsou vytvořeny dvě lokální proměnné, přičemž první
proměnná představuje okno (rámec) a druhá proměnná tlačítko:</p>

<pre>
(let [main-frame (<strong>frame</strong> :title "Hello world!")
      btn        (<strong>button</strong> :text "Click Me"
                         :mnemonic \C
                         :background "#afa")]
</pre>

<p>Dále v&nbsp;knihovně <i>Seesaw</i> existují funkce, které mění stav prvků
grafického uživatelského rozhraní. Jména všech těchto funkcí vždy končí
vykřičníkem, což je konvence používaná i v&nbsp;mnoha dalších knihovnách a
samozřejmě i ve standardní knihovně samotného jazyka <i>Clojure</i> &ndash;
vykřičník značí, že se uvnitř funkce mění stav nějakého objektu. Změnou prvku
GUI je myšleno jeho zobrazení, změna velikosti, přidání dalšího prvku na jeho
plochu (pokud se jedná o kontejner) atd. Opět se podívejme na ilustrační
příklad:</p>

<pre>
<i>; přidání tlačítka na kontejner (rámec)</i>
(<strong>config!</strong> main-frame :content btn)
&nbsp;
<i>; změna velikosti rámce</i>
(<strong>pack!</strong>   main-frame)
&nbsp;
<i>; zobrazení rámce (a samozřejmě i tlačítka na něm)</i>
(<strong>show!</strong>   main-frame)
</pre>

<p>Navíc všechny funkce měnící stav GUI prvku vrací jako svou návratovou
hodnotu daný prvek, čehož je možné využít, a to díky existenci threading makra
zmíněného v&nbsp;dalších kapitolách.</p>

<p>Podrobnější popis všech pěti výše popsaných funkcí můžete nalézt
v&nbsp;oficiální dokumentaci ke knihovně <i>Seesaw</i>:</p>

<table>
<tr><th>#</th><th>Funkce</th></tr>
<tr><td>1</td><td><a href="https://daveray.github.io/seesaw/seesaw.core-api.html#seesaw.core/frame">frame</a></td></tr>
<tr><td>2</td><td><a href="https://daveray.github.io/seesaw/seesaw.core-api.html#seesaw.core/button">button</a></td></tr>
<tr><td>3</td><td><a href="https://daveray.github.io/seesaw/seesaw.core-api.html#seesaw.core/config!">config!</a></td></tr>
<tr><td>4</td><td><a href="https://daveray.github.io/seesaw/seesaw.core-api.html#seesaw.core/pack!">pack!</a></td></tr>
<tr><td>5</td><td><a href="https://daveray.github.io/seesaw/seesaw.core-api.html#seesaw.core/show!">show!</a></td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad: okno s&nbsp;tlačítkem</h2>

<p>Podívejme se nyní na způsob vytvoření jednoduché aplikace, která po svém
spuštění zobrazí okno a v&nbsp;něm tlačítko. Kostru aplikace vytvoříme nám již
známým způsobem s&nbsp;využitím nástroje <i>Leiningen</i>:</p>

<pre>
lein new app seesaw1
</pre>

<p>Po spuštění tohoto příkazu by se měla vygenerovat následující struktura
adresářů a souborů:</p>

<pre>
.
├── doc
│   └── intro.md
├── LICENSE
├── project.clj
├── README.md
├── resources
├── src
│   └── seesaw1
│       └── core.clj
└── test
    └── seesaw1
        └── core_test.clj
</pre>

<p>Projektový soubor <strong>project.clj</strong> je nutné nepatrně upravit
&ndash; vektor uložený pod klíčem <strong>:dependencies</strong> musí obsahovat
i prvek se jménem a verzí knihovny <i>Seesaw</i>:</p>

<pre>
(defproject seesaw1 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[seesaw "1.4.5"]</strong>]
  :main ^:skip-aot seesaw1.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Stažení všech potřebných závislostí, tj.&nbsp;jak knihovny <i>Seesaw</i>,
tak i dalších knihoven, které jsou pro korektní práci <i>Seesaw</i> potřebné,
vyřeší příkaz:</p>

<pre>
lein deps
</pre>

<p>Následuje úprava obsahu souboru <strong>src/seesaw1/core.clj</strong>. Zde
je deklarována jen jediná funkce nazvaná <strong>-main</strong>, v&nbsp;níž je
vytvořeno okno s&nbsp;titulkem a do tohoto okna je ihned poté přidáno tlačítko.
Následně je zavolána funkce <strong>pack!</strong>, která upraví velikost okna
takovým způsobem, aby se do něho tlačítko vešlo a poslední příkaz
<strong>show!</strong> zajistí zobrazení okna:</p>

<pre>
(ns seesaw1.core
    (:gen-class))
&nbsp;
(use 'seesaw.core)
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (let [main-frame (frame :title "Hello world!")
          btn        (button :text "Click Me")]
          (config! main-frame :content btn)
          (pack!   main-frame)
          (show!   main-frame)))
</pre>

<p>Tuto velmi jednoduchou aplikaci je možné spustit příkazem:</p>

<pre>
lein run
</pre>

<p>Ukončení se provede stiskem Ctrl+C z&nbsp;terminálu.</p>

<p>Při použití &bdquo;čistého&ldquo; Swingu dojdeme k&nbsp;mnohem horšímu
programu, v&nbsp;němž se pouze přepisuje logika, kterou by měla podobná
aplikace naprogramovaná v&nbsp;Javě:</p>

<pre>
(ns swingapp.core
  (:gen-class))
&nbsp;
(import 'javax.swing.JFrame)
(import 'javax.swing.JButton)
&nbsp;
(defn -main
    [&amp; args]
    (doto (JFrame. "Hello world!")
          (.add (doto (JButton. "Click Me")))
          .pack
          (.setVisible true)))
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Druhý demonstrační příklad: vylepšení zdrojového kódu s&nbsp;použitím threading makra</h2>

<p>Již <a href="#k02">ve druhé kapitole</a> jsme se zmínili o tom, že většina
funkcí měnících stav prvku grafického uživatelského prostředí vrací změněný
prvek jako svou návratovou hodnotu. To mj.&nbsp;znamená, že volání takových
funkcí je možné zřetězit a použít takzvané <i>threading makro</i>. Namísto
zápisu:</p>

<pre>
(config! main-frame :content btn)
(pack!   main-frame)
(show!   main-frame)))
</pre>

<p>který připomíná volání setterů (popř.&nbsp;i dalších mutátorů)
v&nbsp;objektově orientovaných programovacích jazycích, je vhodnější použít
threading makro ve stylu:</p>

<pre>
(-&gt; main-frame
    (config! :content btn)
    (pack!)
    (show!))))
</pre>

<p>Takto je možné zřetězit libovolný počet funkcí, přičemž threading makro
zajistí, že hodnota uložená v&nbsp;lokální proměnné <strong>main-frame</strong>
bude do funkcí <strong>config!</strong>, <strong>pack!</strong> i
<strong>show!</strong> předána jako první (a mnohdy i jediný) parametr (ve
skutečnosti je do dalších funkcí předána návratová hodnota funkce předchozí,
což je však v&nbsp;tomto případě reference na ten samý prvek). Tímto způsobem,
který by měl být pro aplikace využívající knihovnu <i>Seesaw</i> idiomatický,
byl upraven zdrojový kód prvního demonstračního příkladu a vznikl příklad druhý
se jménem <strong>seesaw2</strong>.</p>

<p>Vytvoření kostry příkladu:</p>

<pre>
lein new app seesaw2
</pre>

<p>Vzniknout by měla tato adresářová struktura:</p>

<pre>
.
├── doc
│   └── intro.md
├── LICENSE
├── project.clj
├── README.md
├── resources
├── src
│   └── seesaw2
│       └── core.clj
└── test
    └── seesaw2
        └── core_test.clj
</pre>

<p>Obsah projektového souboru <strong>project.clj</strong>:</p>

<pre>
(defproject seesaw2 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[seesaw "1.4.5"]</strong>]
  :main ^:skip-aot seesaw2.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Obsah souboru <strong>core.clj</strong>:</p>

<pre>
(ns seesaw2.core
    (:gen-class))
&nbsp;
(use 'seesaw.core)
&nbsp;
(defn -main
    [&amp; args]
    (let [main-frame (frame :title "Hello world!")
          btn        (button :text "Click Me")]
          (-&gt; main-frame
              (config! :content btn)
              (pack!)
              (show!))))
</pre>

<p>Threading makro je skutečně velmi užitečné, zejména protože zvyšuje
čitelnost zdrojového kódu. Proto ho budeme často používat i v&nbsp;dalších
demonstračních příkladech.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Alternativní způsob přidání tlačítka do okna</h2>

<p>K&nbsp;oběma již popsaným způsobům vytvoření okna (rámce) a přidání tlačítka
do tohoto okna můžeme přidat ještě třetí způsob, který je podle mého názoru
nejsnáze použitelný. Nejprve si však zopakujme tu část druhého demonstračního
příkladu, kde dochází k&nbsp;vytvoření tlačítka a přidání tohoto tlačítka na
plochu rámce:</p>

<pre>
(let [main-frame (frame :title "Hello world!")
      btn        (button :text "Click Me")]
      (-&gt; main-frame
          (config! :content btn)
</pre>

<p>Nejdůležitější je v&nbsp;tuto chvíli poslední řádek, v&nbsp;němž se mění
vlastnost &bdquo;content&ldquo; rámce. Tuto vlastnost však ve skutečnosti
můžeme nastavit i ve chvíli, kdy je okno vytvářeno, ovšem za předpokladu, že
již existuje objekt představující tlačítko. Alternativně lze tedy okno vytvořit
takto:</p>

<pre>
(frame :title "Hello world!"
       <strong>:content (button :text "Click me")</strong>)
</pre>

<p>Pokud je zapotřebí přistupovat i k&nbsp;objektu představujícího tlačítko
(což skutečně potřebujeme, například při konfiguraci listenerů), použije se
mírně modifikovaný, stále však úsporně zapsaný kód:</p>

<pre>
(let [btn (button :text "Click me")]
     (-&gt; (frame :title "Hello world!"
                <strong>:content btn</strong>)
            ...
            další funkce přistupující k oknu/rámci
            ...
            ...))
</pre>

<p>Užitečný je taktéž fakt, že celý zápis té části programového kódu, která se
zabývá vytvořením prvků grafického uživatelského rozhraní, vlastně může být
jednoduše generován například RAD nástroji. Odpadá tak nutnost použití
jakéhokoli mezikódu, například uložení designu formuláře do souborů typu XML
(což sice může být v&nbsp;některých případech užitečné, zde by se však jednalo
o pověstný kanón na vrabce).</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zdrojový kód třetího demonstračního příkladu</h2>

<p>Podívejme se nyní na praktické využití znalostí, s&nbsp;nimiž jsme se
seznámili <a href="#k05">v&nbsp;páté kapitole</a>. I v&nbsp;dnešním třetím
demonstračním příkladu se po jeho spuštění zobrazí okno obsahující jediné
tlačítko, ovšem při vytváření okna se nastaví jeho obsah, tj.&nbsp;změní se
vlastnost &bdquo;content&ldquo;. Vytvoření kostry příkladu se provede stejným
příkazem, jako tomu bylo i u předchozích dvou demonstračních příkladů:</p>

<pre>
lein new app seesaw3
</pre>

<p>Vzniknout by měla tato adresářová struktura, která se samozřejmě nebude
odlišovat od struktury, kterou jsme již viděli u obou předchozích
demonstračních příkladů:</p>

<pre>
.
├── doc
│   └── intro.md
├── LICENSE
├── project.clj
├── README.md
├── resources
├── src
│   └── seesaw3
│       └── core.clj
└── test
    └── seesaw3
        └── core_test.clj
</pre>

<p>Obsah projektového souboru <strong>project.clj</strong> je opět důvěrně
známý:</p>

<pre>
(defproject seesaw3 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[seesaw "1.4.5"]</strong>]
  :main ^:skip-aot seesaw3.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Obsah souboru <strong>core.clj</strong>:</p>

<pre>
(ns seesaw3.core
    (:gen-class))
&nbsp;
(use 'seesaw.core)
&nbsp;
(defn -main
    [&amp; args]
    (-&gt; (frame :title "Hello world!"
               <strong>:content (button :text "Click me")</strong>)
        (pack!)
        (show!)))
</pre>

<p>Jak je ze zdrojového kódu patrné, je tlačítko ihned při svém vytvoření
uloženo do vlastnosti &bdquo;content&ldquo; svého nadřazeného rámce. Připomeňme
si, že okna (rámce) patří v&nbsp;knihovně Swing mezi takzvané kontejnery a
právě proto je možné na jejich plochu vkládat další prvky grafického
uživatelského rozhraní.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zajištění automatického ukončení aplikace po zavření hlavního okna</h2>

<p>Tato kapitola bude velmi krátká, protože si zde pouze ukážeme, jakým
způsobem lze zajistit, že se celá aplikace korektně ukončí ve chvíli, kdy
uživatel zavře její hlavní (a v&nbsp;tuto chvíli vlastně i jediné) okno.
Předchozí tři demonstrační příklady totiž i po zavření hlavního okna stále
běžely a bylo je nutné ukončit z&nbsp;terminálu pomocí CTRL+C či příkazem
<strong>kill</strong>, což však v&nbsp;žádném případě není chování, které
uživatelé od GUI aplikace očekávají. Korektního chování lze docílit různými
způsoby, nejjednodušší je však změnit vlastnost &bdquo;on-close&ldquo; hlavního
okna. Původní programový kód vypadal zhruba takto:</p>

<pre>
(defn -main
    [&amp; args]
    (let [btn (button :text "Click me")]
         (-&gt; (frame :title "Hello world!"
                    :content btn)
             (pack!)
             (show!))))
</pre>

<p>Nový kód je prakticky stejný, ovšem nastavuje již zmíněnou vlastnost
&bdquo;on-close&ldquo; a to konkrétně na speciální hodnotu :exit:</p>

<pre>
(defn -main
    [&amp; args]
    (let [btn (button :text "Click me")]
         (-&gt; (frame :title "Hello world!"
                    <strong>:on-close :exit</strong>
                    :content btn)
             (pack!)
             (show!))))
</pre>

<p>Teoreticky by bylo možné zavolat metodu
<strong>setDefaultCloseOperation(EXIT_ON_CLOSE)</strong>, tuto možnost ovšem
necháme spíše programátorům, kteří musí programovat přímo v&nbsp;Javě :-)</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Listenery a (anonymní) callback funkce reagující na události</h2>

<p>Při programování aplikace s&nbsp;grafickým uživatelským rozhraním je nutné
zajistit interakci uživatele s&nbsp;touto aplikací. Jinými slovy to znamená, že
aplikace musí adekvátním způsobem reagovat na všechny akce prováděné
uživatelem, přičemž tyto akce obecně nastávají asynchronně s&nbsp;během
aplikace. Korektní naprogramování reakce na události (<i>events</i>) je při
tvorbě GUI aplikací kritická a možná i z&nbsp;tohoto důvodu se můžeme setkat
hned s&nbsp;několika přístupy ke zpracování událostí. Některé GUI knihovny jsou
založeny na klasické smyčce událostí (<i>event loop</i>), která mnohdy obsahuje
obří rozvětvení (<i>case</i>) s&nbsp;obsluhou jednotlivých typů událostí.
Tohoto způsobu se drží například SDL nebo původní WinAPI.</p>

<p>Alternativní způsob nabízí použití systému signálů a slotů
popř.&nbsp;registrace callback funkcí zavolaných v&nbsp;případě vzniku
události. V&nbsp;jazyce Java, kde nelze (či přesněji řečeno donedávna nešlo)
vytvořit plnohodnotnou callback funkci a předat odkaz na funkci dalšímu kódu,
se namísto toho používaly anonymní třídy implementující nějaké rozhraní
představující handler události. V&nbsp;knihovně <i>Seesaw</i> je použit již
zmíněný mnohem elegantnější systém callback funkcí, které lze zaregistrovat pro
každou událost zvlášť. Mnohdy jsou callback funkce realizovány anonymními
funkcemi.</p>

<p>Nejprve se opět podívejme na příklad, který již známe z&nbsp;předchozích
kapitol:</p>

<pre>
(let [btn (button :text "Click me"
                  :background "#afa")]
     (-&gt; (frame :title "Hello world!"
                <strong>:on-close :exit</strong>
                :content btn)
         (pack!)
         (show!))))
</pre>

<p>Do tohoto programového kódu budeme chtít přidat reakci na různé události,
které mohou nastat ve chvíli, kdy uživatel stiskne tlačítko
<strong>btn</strong>, kdy najede kurzorem myši na toto tlačítko či kdy naopak
kurzor myši plochu tlačítka opustí. V&nbsp;knihovně <i>Seesaw</i> je možné
s&nbsp;každou událostí spojit zvolenou funkci s&nbsp;využitím funkce
<strong>listen</strong>, které se předá objekt představující prvek grafického
uživatelského rozhraní a následně libovolný počet dvojic, kde první prvek
dvojice představuje typ události (<strong>:mouse-clicked</strong> atd.) a druhý
prvek pak funkci, která se má zavolat ve chvíli, kdy k&nbsp;události dojde.
V&nbsp;našem jednoduchém případě si vystačíme s&nbsp;anonymními funkcemi
deklarovanými s&nbsp;využitím <strong>fn</strong> (a nikoli
<strong>defn</strong>):</p>

<pre>
(let [btn (button :text "Click me"
                  :background "#afa")]
     (<strong>listen</strong> btn :mouse-clicked (fn [e] (println "Very well"))
                 :mouse-entered (fn [e] (println "Mouse caught"))
                 :mouse-exited  (fn [e] (println "Mouse escaped")))
     (-&gt; (frame :title "Hello world!"
                <strong>:on-close :exit</strong>
                :content btn)
         (pack!)
         (show!))))
</pre>

<p>Poznámka &ndash; zde není možné použít alternativní způsob deklarace
anonymní funkce s&nbsp;využitím makra #(), a to z&nbsp;toho důvodu, že
překladač musí dopředu znát počet parametrů volané funkce. To je jeden
z&nbsp;negativních důsledků použití rozhraní mezi Clojure a Javou. Pokud by se
interně nevyužívala knihovna Swing, nebylo by využití makra #()
problematické.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Zdrojový kód čtvrtého demonstračního příkladu</h2>

<p>Kostru dnešního čtvrtého a současně i posledního demonstračního příkladu,
v&nbsp;němž jsou použity výše popsané listenery, vytvoříme příkazem:</p>

<pre>
lein new app seesaw4
</pre>

<p>Vznikne nám již známá adresářová struktura:</p>

<pre>
.
├── doc
│   └── intro.md
├── LICENSE
├── project.clj
├── README.md
├── resources
├── src
│   └── seesaw4
│       └── core.clj
└── test
    └── seesaw4
        └── core_test.clj
</pre>

<p>Obsah projektového souboru <strong>project.clj</strong> je opět důvěrně
známý:</p>

<pre>
(defproject seesaw4 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[seesaw "1.4.5"]</strong>]
  :main ^:skip-aot seesaw4.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Obsah souboru <strong>core.clj</strong>:</p>

<pre>
(ns seesaw4.core
    (:gen-class))
&nbsp;
(use 'seesaw.core)
&nbsp;
(defn -main
    [&amp; args]
    (let [btn (button :text "Click me"
                      :background "#afa")]
         (<strong>listen</strong> btn :mouse-clicked (fn [e] (println "Very well"))
                     :mouse-entered (fn [e] (println "Mouse caught"))
                     :mouse-exited  (fn [e] (println "Mouse escaped")))
         (-&gt; (frame :title "Hello world!"
                    <strong>:on-close :exit</strong>
                    :content btn)
             (pack!)
             (show!))))
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny čtyři dnes popsané demonstrační příklady byly, podobně jako
v&nbsp;předchozích částech tohoto seriálu, uloženy do GIT repositáře dostupného
na adrese <a
href="https://github.com/tisnik/clojure-examples">https://github.com/tisnik/clojure-examples</a>.
V&nbsp;tabulce zobrazené pod tímto odstavcem naleznete na jednotlivé příklady
přímé odkazy. Přidán byl i pátý příklad používající knihovnu Swing (a tím pádem
i poměrně velké množství neidiomatických konstrukcí):</p>

<table>
<tr><th>#</th><th>Příklad </th><th>Github</th></tr>
<tr><td>1</td><td>seesaw1 </td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/seesaw1">https://github.com/tisnik/clojure-examples/tree/master/seesaw1</a></td></tr>
<tr><td>2</td><td>seesaw2 </td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/seesaw2">https://github.com/tisnik/clojure-examples/tree/master/seesaw2</a></td></tr>
<tr><td>3</td><td>seesaw3 </td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/seesaw3">https://github.com/tisnik/clojure-examples/tree/master/seesaw3</a></td></tr>
<tr><td>4</td><td>seesaw4 </td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/seesaw4">https://github.com/tisnik/clojure-examples/tree/master/seesaw4</a></td></tr>
<tr><td>5</td><td>swingapp</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/swingapp">https://github.com/tisnik/clojure-examples/tree/master/swingapp</a></td></tr>
</table>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odkazy na předchozí části seriálu</h2>

<p>Stalo se již zvykem uvést odkazy na všechny předchozí části tohoto
seriálu:</p>

<ol>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/</a>
</li>

</ol>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Building User Interfaces with Seesaw (slajdy k&nbsp;přednášce)<br />
<a href="http://darevay.com/talks/clojurewest2012/#/title-slide">http://darevay.com/talks/clojurewest2012/#/title-slide</a>
</li>

<li>Seesaw na GitHubu<br />
<a href="https://github.com/daveray/seesaw">https://github.com/daveray/seesaw</a>
</li>

<li>Seesaw API Documentation<br />
<a href="http://daveray.github.io/seesaw/">http://daveray.github.io/seesaw/</a>
</li>

<li>Seesaw wiki<br />
<a href="https://github.com/daveray/seesaw/wiki">https://github.com/daveray/seesaw/wiki</a>
</li>

<li>seesaw-repl-tutorial.clj<br />
<a href="https://gist.github.com/daveray/1441520">https://gist.github.com/daveray/1441520</a>
</li>

<li>Témata o Seesaw na Google groups<br />
<a href="https://groups.google.com/forum/#!forum/seesaw-clj">https://groups.google.com/forum/#!forum/seesaw-clj</a>
</li>

<li>Threading macro (dokumentace k&nbsp;jazyku Clojure)<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;</a>
</li>

<li>Understanding the Clojure -&gt; macro<br />
<a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/</a>
</li>

<li>Clisk<br />
<a href="https://github.com/mikera/clisk">https://github.com/mikera/clisk</a>
</li>

<li>clojars: net.mikera/clisk<br />
<a href="https://clojars.org/net.mikera/clisk">https://clojars.org/net.mikera/clisk</a>
</li>

<li>clojure.inspector<br />
<a href="http://clojure.github.io/clojure/clojure.inspector-api.html">http://clojure.github.io/clojure/clojure.inspector-api.html</a>
</li>

<li>Clisk: wiki<br />
<a href="https://github.com/mikera/clisk/wiki">https://github.com/mikera/clisk/wiki</a>
</li>

<li>Dokumentace vygenerovaná pro knihovnu core.matrix<br />
<a href="https://cloojure.github.io/doc/core.matrix/index.html">https://cloojure.github.io/doc/core.matrix/index.html</a>
</li>

<li>Size and Dimensionality<br />
<a href="https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion">https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion</a>
</li>

<li>Towards core.matrix for Clojure?<br />
<a href="https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/">https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/</a>
</li>

<li>The Clojure Toolbox<br />
<a href="http://www.clojure-toolbox.com/">http://www.clojure-toolbox.com/</a>
</li>

<li>Neanderthal<br />
<a href="http://neanderthal.uncomplicate.org/">http://neanderthal.uncomplicate.org/</a>
</li>

<li>Hello world project<br />
<a href="https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj">https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj</a>
</li>

<li>vectorz-clj<br />
<a href="https://github.com/mikera/vectorz-clj">https://github.com/mikera/vectorz-clj</a>
</li>

<li>vectorz - Examples<br />
<a href="https://github.com/mikera/vectorz-clj/wiki/Examples">https://github.com/mikera/vectorz-clj/wiki/Examples</a>
</li>

<li>gloss<br />
<a href="https://github.com/ztellman/gloss">https://github.com/ztellman/gloss</a>
</li>

<li>HTTP client/server for Clojure<br />
<a href="http://www.http-kit.org/">http://www.http-kit.org/</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>java.jdbc API Reference<br />
<a href="https://clojure.github.io/java.jdbc/">https://clojure.github.io/java.jdbc/</a>
</li>

<li>Hiccup<br />
<a href="https://github.com/weavejester/hiccup">https://github.com/weavejester/hiccup</a>
</li>

<li>Clojure Ring na GitHubu<br />
<a href="https://github.com/ring-clojure/ring">https://github.com/ring-clojure/ring</a>
</li>

<li>A brief overview of the Clojure web stack<br />
<a href="https://brehaut.net/blog/2011/ring_introduction">https://brehaut.net/blog/2011/ring_introduction</a>
</li>

<li>Getting Started with Ring<br />
<a href="http://www.learningclojure.com/2013/01/getting-started-with-ring.html">http://www.learningclojure.com/2013/01/getting-started-with-ring.html</a>
</li>

<li>Getting Started with Ring and Compojure - Clojure Web Programming<br />
<a href="http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html">http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

