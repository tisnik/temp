<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V poslední části článku o programovacím jazyku Clojure a o knihovně Clisk si ukážeme vestavěné (předdefinované) textury, které jsou součástí knihovny Clisk. Druhá část článku bude věnována problematice Voroného diagramů a jejich použití při tvorbě vlastních textur.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)</a></p>
<p><a href="#k02">2. Vestavěné deklarace textur (předdefinované textury)</a></p>
<p><a href="#k03">3. Úplný zdrojový kód demonstračního příkladu <strong>clisktest6</strong></a></p>
<p><a href="#k04">4. Voroného diagramy a jejich využití při tvorbě textur</a></p>
<p><a href="#k05">5. Použití Voroného diagramů v&nbsp;praxi</a></p>
<p><a href="#k06">6. Úplný zdrojový kód demonstračního příkladu <strong>clisktest7</strong></a></p>
<p><a href="#k07">7. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k08">8. Odkazy na předchozí části seriálu</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)</h2>

<p>V&nbsp;předchozích dvou částech seriálu o programovacím jazyku Clojure a o
knihovně Clisk jsme si vysvětlili, jakým způsobem se v&nbsp;této knihovně tvoří
procedurální textury. Ukázali jsme si použití několika algoritmů používaných
pro tvorbu textur, které mají připomínat přírodní (nepravidelné) povrchy,
například písek, mramor či dřevo. Taktéž jsme se zmínili o možnosti
vykreslování fraktálů, i když použití fraktálů pro tvorbu textur nemusí být ve
všech případech praktické. V&nbsp;dnešním článku popis knihovny Clisk
dokončíme. Nejdříve se zmíníme o předdefinovaných texturách, které je možné
použít prakticky ihned a následně si ukážeme aplikaci Voroného diagramů
(<i>Voronoi diagram</i>) pro tvorbu textur, protože se jedná o velmi užitečnou
část knihovny Clisk, společně s&nbsp;podporou Perlinova šumu (<i>Perlin
Noise</i>) popsaného minule.</p>

<img src="http://i.iinfo.cz/images/274/o1.png" class="image-209038" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 1: Textura deklarovaná následovně:<br />
(offset (v* 0.1 (scale 0.03 vsnoise)) (rgb-from-hsl (v+ [0 0 0.5] (scale 0.3 vsnoise))))<br />
Autor: Mike Anderson</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vestavěné deklarace textur (předdefinované textury)</h2>

<p>Jak jsme se dozvěděli v&nbsp;předchozích textech, nabízí knihovna Clisk svým
uživatelům možnost vytvoření prakticky jakkoli komplexní procedurální textury.
Pro tvorbu textury lze používat jak vestavěné funkce (pracující s&nbsp;až
čtyřsložkovými vektory), tak i již zmíněnou funkci pro tvorbu Perlinova šumu,
několik funkcí pro vytváření pravidelných vzorků (mřížka, šachovnice,
soustředné kružnice) atd. Kromě můžeme v&nbsp;této knihovně nalézt i několik
předdefinovaných textur, jejichž význam je dvojí &ndash; lze je (samozřejmě)
přímo použít například ve hrách, ovšem důležitější je fakt, že se uživatelé
mohou naučit, jakým způsobem lze efektivně používat všechny funkce touto
knihovnou nabízené. Mezi předdefinované textury patří:</p>

<table>
<tr><th>#</th><th>Textura</th><th>Interně se používá</th></tr>
<tr><td>1</td><td>agate  </td><td>plasma</td></tr>
<tr><td>2</td><td>clouds </td><td>plasma</td></tr>
<tr><td>3</td><td>velvet </td><td>Perlinův šum</td></tr>
<tr><td>4</td><td>flecks </td><td>Perlinův šum</td></tr>
<tr><td>5</td><td>wood   </td><td>výpočet vzdálenosti od středu</td></tr>
</table>

<p>Všech pět výše zmíněných textur si můžeme v&nbsp;základní podobě (bez
použití barvové palety atd.) jednoduše otestovat:</p>

<pre>
(defn <strong>predefined-textures-test</strong>
    []
    (let [textures [agate
                    clouds
                    velvet
                    flecks
                    wood]]
        <i>; postupně projít všemi prvky vektoru "textures", vytvořit</i>
        <i>; dvouprvkový vektor [index+patter], vytvořit jméno výstupního</i>
        <i>; souboru a následně zavolat funkci write-texture</i>
        (doseq [ [i texture] (map-indexed vector textures)]
            (write-pattern texture (str "texture_" i ".png")))))
</pre>

<p>Výsledky můžete vidět na obrázcích číslo 2 až 5:</p>

<img src="http://i.iinfo.cz/images/48/clisk2-31.png" class="image-207782" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 2: Předdefinovaná textura <strong>agate</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-32.png" class="image-207783" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 3: Předdefinovaná textura <strong>clouds</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-33.png" class="image-207784" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 4: Předdefinovaná textura <strong>velvet</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-34.png" class="image-207785" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 5: Předdefinovaná textura <strong>flecks</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-35.png" class="image-207786" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 6: Předdefinovaná textura <strong>wood</strong>.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Úplný zdrojový kód demonstračního příkladu <strong>clisktest6</strong></h2>

<p>V&nbsp;této kapitole bude uveden výpis úplného zdrojového kódu dnešního
prvního demonstračního příkladu nazvaného <strong>clisktest6</strong>,
z&nbsp;něhož jsme použili úryvek a ukázky <a href="#k02">v&nbsp;předešlé
kapitole</a>. Tento příklad po svém spuštění vykreslí vybrané předdefinované
textury a uloží je do pětice souborů typu PNG. Většinu funkcí, které jsou
v&nbsp;tomto příkladu využity, již známe z&nbsp;předchozích demonstračních
příkladů:</p>

<p>Obsah souboru <strong>project.clj</strong>:</p>

<pre>
(defproject <strong>clisktest6</strong> "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[net.mikera/clisk "0.10.0"]</strong>]
  :main ^:skip-aot clisktest6.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<img src="http://i.iinfo.cz/images/140/o2.png" class="image-209039" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 7: Textura deklarovaná následovně:<br />
(seamless 0.5 (v* [1 0.8 0 0] (compose vnoise [spots y z t])))<br />
Autor: Mike Anderson</i></p>

<p>Obsah souboru <strong>core.clj</strong>:</p>

<pre>
(ns <strong>clisktest6.core</strong>
    (:gen-class)
    (:use clisk.live))
&nbsp;
(import java.io.File)
(import javax.imageio.ImageIO)
&nbsp;
(defn <strong>write-image</strong>
    <i>"Uložení rastrového obrázku typu BufferedImage do souboru."</i>
    [image file-name]
    (ImageIO/write image "png" (File. file-name)))
&nbsp;
(defn <strong>write-pattern</strong>
    <i>"Vytvoření rastrového obrázku na základě předaného patternu."</i>
    [pattern file-name]
    (write-image (image pattern) file-name))
&nbsp;
(defn <strong>predefined-textures-test</strong>
    []
    (let [textures [agate
                    clouds
                    velvet
                    flecks
                    wood]]
        <i>; postupně projít všemi prvky vektoru "textures", vytvořit</i>
        <i>; dvouprvkový vektor [index+patter], vytvořit jméno výstupního</i>
        <i>; souboru a následně zavolat funkci write-texture</i>
        (doseq [ [i texture] (map-indexed vector textures)]
            (write-pattern texture (str "texture_" i ".png")))))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (try
        (println "Predefined textures test...")
        (predefined-textures-test)
        (println "Done")
        (catch Throwable e
            (println (.toString e)))
        (finally <i>; jistota, že program vždy korektně skončí</i>
            (System/exit 0))))
</pre>

<img src="http://i.iinfo.cz/images/643/o3.png" class="image-209040" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 8: Textura deklarovaná následovně:<br />
(v- 1.0 (seamless 0.2 (v* 6 (scale 3 vnoise) (v- 0.1 (vmax 0 (vabs (v- plasma 0.5)))))))<br />
Autor: Mike Anderson</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Voroného diagramy a jejich využití při tvorbě textur</h2>

<p>Poměrně zajímavou a poněkud méně známou pomůckou pro tvorbu procedurálních
textur jsou takzvané Voroného diagramy (<i>Voronoi Diagrams</i>). Vytvoření
Voroného diagramu v&nbsp;ploše pro účely generování procedurální textury je
celkem jednoduché &ndash; do plochy se náhodně umístí zvolený počet <i>n</i>
bodů <i>b<sup>0</sup>..b<sup>n</sup></i> a následně se celá plocha rozdělí na
oblasti, přičemž pro všechny body patřící do jedné oblasti platí, že jejich
vzdálenost ke konkrétnímu bodu <i>b<sup>i</sup></i> je menší než vzdálenost
k&nbsp;jakémukoli jinému bodu <i>b<sup>j</sup></i>. Příklad takto
zkonstruovaného diagramu lze nalézt například na stránce <a
href="http://upload.wikimedia.org/wikipedia/commons/8/80/Euclidean_Voronoi_Diagram.png">http://upload.wikimedia.org/wikipedia/commons/8/80/Euclidean_Voronoi_Diagram.png</a>.
Tento postup lze rozšířit i do 3D a 4D prostoru a navíc je pro účely vytváření
textur vhodnější neobarvovat každou plochu konstantní barvou, ale zvolit
gradientní přechod na základě skutečné vzdálenosti každého bodu od hranice
oblasti.</p>

<p>Pro vytvoření procedurální textury se používá funkce
<strong>voronoi-map</strong> společně s&nbsp;funkcí
<strong>voronoi-blocks</strong> (právě zde se počítá gradientní přechod).
Základním parametrem pro tvorbu takové textury je počet počátečních bodů, který
určuje počet oblastí a tím pádem i &bdquo;měřítko&ldquo; textury. Minimální
počet bodů je 3, maximální počet bodů je 1000:</p>

<pre>
(defn <strong>voronoi-map-test</strong>
    []
    (doseq [i (range 2 10)]
         (let [voronoi-map (<strong>voronoi</strong> :points (bit-shift-left 1 i))
               pattern     (<strong>voronoi-blocks</strong> :voronoi voronoi-map)
               file-name   (format "%02d.png" i)]
               (write-pattern pattern file-name))))
</pre>

<img src="http://i.iinfo.cz/images/53/v1.png" class="image-209029" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 9: (voronoi :points 4).</i></p>

<img src="http://i.iinfo.cz/images/268/v2.png" class="image-209030" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 10: (voronoi :points 8)</i></p>

<img src="http://i.iinfo.cz/images/218/v3.png" class="image-209031" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 11: (voronoi :points 16)</i></p>

<img src="http://i.iinfo.cz/images/17/v4.png" class="image-209036" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 12: (voronoi :points 32)</i></p>

<img src="http://i.iinfo.cz/images/292/v5.png" class="image-209032" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 13: (voronoi :points 64)</i></p>

<img src="http://i.iinfo.cz/images/402/v6.png" class="image-209033" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 14: (voronoi :points 128)</i></p>

<img src="http://i.iinfo.cz/images/453/v7.png" class="image-209034" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 15: (voronoi :points 256)</i></p>

<img src="http://i.iinfo.cz/images/59/v8.png" class="image-209035" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 16: (voronoi :points 512)</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití Voroného diagramů v&nbsp;praxi</h2>

<p>Již z&nbsp;neupravovaných a nemodifikovaných ukázek uvedených <a
href="#k04">ve čtvrté kapitole</a> je patrné, že se Voroného diagramy mohou
využít pro tvorbu textur, které mohou připomínat například rozpraskané sklo,
hlínu či povrchy některých hornin. Po vizuální stránce je velmi zajímavá
kombinace dvou Voroného diagramů &ndash; jeden může sloužit pro určení
světlosti pixelů, druhý pak pro výběr barvy. K&nbsp;tomuto účelu lze využít
funkci <i>wrap</i> popř.&nbsp;funkci nazvanou <i>rgb-from-hsl</i>, která dokáže
provést transformaci libovolné barvy (minimálně trojsložkového vektoru)
z&nbsp;barvového prostoru HSL do barvového prostoru RGB. Zajímavé je i použití
výsledku výpočtu barvy bodu ve Voroného diagramu pro offset (viz též
předposlední část tohoto článku). Podívejme se nyní na několik ukázek
vytvořených demonstračním příkladem <strong>clisktest7</strong>, jehož zdrojový
kód je vypsán <a href="#k06">v&nbsp;šesté kapitole</a>:</p>

<img src="http://i.iinfo.cz/images/48/clisk2-36.png" class="image-207787" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 17: Textura vytvořená pomocí výrazu <strong>(voronoi-blocks
:voronoi voronoi1)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-37.png" class="image-207788" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 18: Textura vytvořená pomocí výrazu <strong>(voronoi-blocks
:voronoi voronoi2)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-38.png" class="image-207789" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 19: Textura vytvořená pomocí výrazu <strong>(voronoi-blocks
:voronoi voronoi3)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-39.png" class="image-207790" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 20: Textura vytvořená pomocí výrazu <strong>(v* 2.0
(voronoi-blocks :voronoi voronoi1))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-40.png" class="image-207791" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 21: Textura vytvořená pomocí výrazu <strong>(v* 2.0
(voronoi-blocks :voronoi voronoi2))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-41.png" class="image-207792" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 22: Textura vytvořená pomocí výrazu <strong>(v* 2.0
(voronoi-blocks :voronoi voronoi3))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-42.png" class="image-207793" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 23: Textura vytvořená pomocí výrazu <strong>(v* (v* 20.0
(voronoi-blocks :voronoi voronoi2)) (warp (voronoi-points :voronoi voronoi1)
grain))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-43.png" class="image-207794" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 24: Textura vytvořená pomocí výrazu <strong>(v* (v* 20.0
(voronoi-blocks :voronoi voronoi2)) (warp (voronoi-points :voronoi voronoi2)
grain))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-44.png" class="image-207795" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 25: Textura vytvořená pomocí výrazu <strong>(v* (v* 20.0
(voronoi-blocks :voronoi voronoi3)) (warp (voronoi-points :voronoi voronoi3)
grain))</strong>.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Úplný zdrojový kód demonstračního příkladu <strong>clisktest7</strong></h2>

<p>Následuje výpis zdrojového kódu dnešního druhého a současně i posledního
demonstračního příkladu nazvaného <strong>clisktest7</strong>:</p>

<p>Obsah souboru <strong>project.clj</strong>:</p>

<pre>
(defproject <strong>clisktest7</strong> "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[net.mikera/clisk "0.10.0"]</strong>]
  :main ^:skip-aot clisktest7.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<img src="http://i.iinfo.cz/images/473/o4.png" class="image-209041" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 26: Textura deklarovaná následovně:<br />
(seamless 1.0 (offset (v* 4 vplasma) (v+ (offset 10 vnoise) 0.3)))<br />
Autor: Mike Anderson</i></p>

<p>Obsah souboru <strong>core.clj</strong>:</p>

<pre>
(ns <strong>clisktest7.core</strong>
    (:gen-class)
    (:use clisk.live))
&nbsp;
(import java.io.File)
(import javax.imageio.ImageIO)
&nbsp;
(defn <strong>write-image</strong>
    <i>"Uložení rastrového obrázku typu BufferedImage do souboru."</i>
    [image file-name]
    (ImageIO/write image "png" (File. file-name)))
&nbsp;
(defn <strong>write-pattern</strong>
    <i>"Vytvoření rastrového obrázku na základě předaného patternu."</i>
    [pattern file-name]
    (write-image (image pattern) file-name))
&nbsp;
(defn <strong>voronoi-map-test</strong>
    []
    (let [voronoi1 (voronoi :points 10)
          voronoi2 (voronoi :points 100)
          voronoi3 (voronoi :points 1000)]
         (write-pattern (voronoi-blocks :voronoi voronoi1) "voronoi1.png")
         (write-pattern (voronoi-blocks :voronoi voronoi2) "voronoi2.png")
         (write-pattern (voronoi-blocks :voronoi voronoi3) "voronoi3.png")
         (write-pattern (v* 2.0 (voronoi-blocks :voronoi voronoi1)) "voronoi4.png")
         (write-pattern (v* 2.0 (voronoi-blocks :voronoi voronoi2)) "voronoi5.png")
         (write-pattern (v* 2.0 (voronoi-blocks :voronoi voronoi3)) "voronoi6.png")
         (write-pattern (v* (v* 20.0 (voronoi-blocks :voronoi voronoi2))
                        (warp (voronoi-points :voronoi voronoi1) grain)) "voronoi7.png")
         (write-pattern (v* (v* 20.0 (voronoi-blocks :voronoi voronoi2))
                        (warp (voronoi-points :voronoi voronoi2) grain)) "voronoi8.png")
         (write-pattern (v* (v* 20.0 (voronoi-blocks :voronoi voronoi3))
                        (warp (voronoi-points :voronoi voronoi3) grain)) "voronoi9.png")))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (try
        (println "Voronoi map test...")
        (voronoi-map-test)
        (println "Done")
        (catch Throwable e
            (println (.toString e)))
        (finally <i>; jistota, že program vždy korektně skončí</i>
            (System/exit 0))))
</pre>

<img src="http://i.iinfo.cz/images/107/o5.png" class="image-209042" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 27: Textura deklarovaná následovně:<br />
(seamless 0.25 (compose plasma vsnoise))<br />
Autor: Mike Anderson</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Repositář s&nbsp;demonstračními příklady</h2>

<p>Oba dva dnes popsané demonstrační příklady byly, podobně jako
v&nbsp;předchozích částech tohoto seriálu, uloženy do GIT repositáře dostupného
na adrese <a
href="https://github.com/tisnik/clojure-examples">https://github.com/tisnik/clojure-examples</a>.
V&nbsp;tabulce zobrazené pod tímto odstavcem naleznete na jednotlivé příklady
přímé odkazy:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Github</th></tr>
<tr><td>1</td><td>clisktest6</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/clisktest6">https://github.com/tisnik/clojure-examples/tree/master/clisktest6</a></td></tr>
<tr><td>2</td><td>clisktest7</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/clisktest7">https://github.com/tisnik/clojure-examples/tree/master/clisktest7</a></td></tr>
</table>

<p></p>

<img src="http://i.iinfo.cz/images/205/o6.png" class="image-209043" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 28: Textura deklarovaná následovně:<br />
(seamless 0.4 (v- vnoise (v* 6 (v- 0.1 (vmax 0 (vabs (v- plasma 0.5)))))))<br />
Autor: Mike Anderson</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Odkazy na předchozí části seriálu</h2>

<ol>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/</a>
</li>

</ol>

<img src="http://i.iinfo.cz/images/482/o7.png" class="image-209044" alt="&#160;" height="256" width="256" />
<p><i>Obrázek 29: Textura deklarovaná následovně:<br />
(seamless 1.0 (compose (scale 0.01 (checker 0 1)) plasma))<br />
Autor: Mike Anderson</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Odkazy na Internetu</h2>

<ol>

<li>Clisk<br />
<a href="https://github.com/mikera/clisk">https://github.com/mikera/clisk</a>
</li>

<li>clojars: net.mikera/clisk<br />
<a href="https://clojars.org/net.mikera/clisk">https://clojars.org/net.mikera/clisk</a>
</li>

<li>clojure.inspector<br />
<a href="http://clojure.github.io/clojure/clojure.inspector-api.html">http://clojure.github.io/clojure/clojure.inspector-api.html</a>
</li>

<li>Clisk: wiki<br />
<a href="https://github.com/mikera/clisk/wiki">https://github.com/mikera/clisk/wiki</a>
</li>

<li>Dokumentace vygenerovaná pro knihovnu core.matrix<br />
<a href="https://cloojure.github.io/doc/core.matrix/index.html">https://cloojure.github.io/doc/core.matrix/index.html</a>
</li>

<li>Size and Dimensionality<br />
<a href="https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion">https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion</a>
</li>

<li>Towards core.matrix for Clojure?<br />
<a href="https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/">https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/</a>
</li>

<li>The Clojure Toolbox<br />
<a href="http://www.clojure-toolbox.com/">http://www.clojure-toolbox.com/</a>
</li>

<li>Neanderthal<br />
<a href="http://neanderthal.uncomplicate.org/">http://neanderthal.uncomplicate.org/</a>
</li>

<li>Hello world project<br />
<a href="https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj">https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj</a>
</li>

<li>vectorz-clj<br />
<a href="https://github.com/mikera/vectorz-clj">https://github.com/mikera/vectorz-clj</a>
</li>

<li>vectorz - Examples<br />
<a href="https://github.com/mikera/vectorz-clj/wiki/Examples">https://github.com/mikera/vectorz-clj/wiki/Examples</a>
</li>

<li>gloss<br />
<a href="https://github.com/ztellman/gloss">https://github.com/ztellman/gloss</a>
</li>

<li>HTTP client/server for Clojure<br />
<a href="http://www.http-kit.org/">http://www.http-kit.org/</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>java.jdbc API Reference<br />
<a href="https://clojure.github.io/java.jdbc/">https://clojure.github.io/java.jdbc/</a>
</li>

<li>Hiccup<br />
<a href="https://github.com/weavejester/hiccup">https://github.com/weavejester/hiccup</a>
</li>

<li>Clojure Ring na GitHubu<br />
<a href="https://github.com/ring-clojure/ring">https://github.com/ring-clojure/ring</a>
</li>

<li>A brief overview of the Clojure web stack<br />
<a href="https://brehaut.net/blog/2011/ring_introduction">https://brehaut.net/blog/2011/ring_introduction</a>
</li>

<li>Getting Started with Ring<br />
<a href="http://www.learningclojure.com/2013/01/getting-started-with-ring.html">http://www.learningclojure.com/2013/01/getting-started-with-ring.html</a>
</li>

<li>Getting Started with Ring and Compojure - Clojure Web Programming<br />
<a href="http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html">http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II<br />
<a href="2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

