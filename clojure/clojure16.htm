<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (3)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (3)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části článku o programovacím jazyce Clojure a o knihovnách dostupných pro tento jazyk si popíšeme další vybrané vlastnosti knihovny nazvané Seesaw. Nejprve si popíšeme použití funkcí alert a input a posléze se budeme zabývat dostupnými správci rozvržení komponent GUI (widgetů) v oknech a panelech.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (3)</a></p>
<p><a href="#k02">2. Volitelný parametr <strong>:listen</strong> použitý při tvorbě widgetů</a></p>
<p><a href="#k03">3. Využití funkce <strong>alert</strong></a></p>
<p><a href="#k04">4. Využití funkce <strong>input</strong></a></p>
<p><a href="#k05">5. Další správci rozvržení dostupní v&nbsp;knihovně Seesaw</a></p>
<p><a href="#k06">6. Správce rozvržení <strong>flow-panel</strong></a></p>
<p><a href="#k07">7. Správce rozvržení <strong>border-panel</strong></a></p>
<p><a href="#k08">8. Správce rozvržení <strong>horizontal-panel</strong></a></p>
<p><a href="#k09">9. Správce rozvržení <strong>vertical-panel</strong></a></p>
<p><a href="#k10">10. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k11">11. Odkazy na předchozí části seriálu</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (3)</h2>

<p>V&nbsp;předchozích dvou částech tohoto seriálu jsme si mj.&nbsp;řekli, jakým
způsobem je možné reagovat na události vznikající (generované) při práci
uživatele s&nbsp;aplikací s&nbsp;grafickým uživatelským rozhraním. Základem
bylo &bdquo;naslouchání&ldquo; nějaké události svázané s&nbsp;konkrétním prvkem
GUI (widgetem). Příkladem může být naprogramování reakcí na stisk tlačítka,
přejetí kurzoru myši do plochy tlačítka či naopak opuštění plochy tohoto
tlačítka (reference na tlačítko je uložena v&nbsp;lokální proměnné
<strong>btn</strong>):</p>

<pre>
    (<strong>listen</strong> btn :mouse-clicked (fn [e] (println "Very well"))
                :mouse-entered (fn [e] (println "Mouse caught"))
                :mouse-exited  (fn [e] (println "Mouse escaped")))
</pre>

<p>Alternativně je možné svázat určitý prvek GUI (typicky slider, ale například
i listbox, kombobox, vstupní textové pole atd.) se zvolenou proměnnou, jejíž
hodnota se bude měnit synchronně se stavem widgetu, tj.&nbsp;například
s&nbsp;posunem zmíněného slideru:</p>

<pre>
(bind/bind slider-control
      slider-atom-value
      slider-control)
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Volitelný parametr <strong>:listen</strong> použitý při tvorbě widgetů</h2>

<p>Třetím způsobem naprogramování reakce na události je použití volitelného
parametru <strong>:listen</strong> předaného konstruktoru widgetu (například
tlačítka). Hodnotou parametru <strong>:listen</strong> je funkce (typicky
anonymní funkce) zavolaná při vzniku zvoleného typu události. Této funkci se
(při jejím volání) předá objekt typu <strong>Event</strong> obsahující všechny
informace o události, která v&nbsp;grafickém uživatelském prostředí nastala.
V&nbsp;příkladu pod tímto odstavcem je použita anonymní funkce deklarovaná
makrem #(), takže její první parametr je přístupný pod pseudojménem %1:</p>

<pre>
(button :text ":background :red"
        :background :red
        <strong>:listen</strong> [:action #(println "Button#1\n" %1)])
</pre>

<p>Použití volitelného parametru <strong>:listen</strong> si ukážeme na dnešním
prvním demonstračním příkladu, který je pojmenovaný <strong>seesaw9</strong>.
Kostru tohoto příkladu vytvoříme způsobem, který již známe z&nbsp;minula a
předminula:</p>

<pre>
lein new app seesaw9
</pre>

<p>Po spuštění tohoto příkazu by se měla vygenerovat následující struktura
adresářů a souborů:</p>

<pre>
.
├── doc
│   └── intro.md
├── LICENSE
├── project.clj
├── README.md
├── resources
├── src
│   └── seesaw9
│       └── core.clj
└── test
    └── seesaw9
        └── core_test.clj
</pre>

<img src="http://i.iinfo.cz/images/140/seesaw3-1.png" class="image-211297" width="368" height="102" alt="&#160;" />
<p><i>Obrázek 1: Grafické uživatelské rozhraní příkladu
<strong>seesaw9</strong>.</i></p>

<p>Úprava projektového souboru <strong>project.clj</strong> je, podobně jako u
dříve popisovaných příkladů, snadná &ndash; viz zvýrazněný řádek:</p>

<pre>
(defproject <strong>seesaw9</strong> "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[seesaw "1.4.5"]</strong>]
  :main ^:skip-aot seesaw9.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<a href="http://www.root.cz/obrazek/211298/"><img src="http://i.iinfo.cz/images/140/seesaw3-2-prev.png" class="image-211298" width="370" height="93" alt="&#160;" /></a>
<p><i>Obrázek 2: Zprávy vypisované na terminál po stisku tlačítek.</i></p>

<p>Zdrojový soubor <strong>src/seesaw9/core.clj:</strong></p>

<pre>
(ns <strong>seesaw9.core</strong>
    (:gen-class))
&nbsp;
(use 'seesaw.core)
(use 'seesaw.color)
&nbsp;
(def <strong>formular</strong>
    (grid-panel :columns 2
                :rows 3
                :items [(button :text ":background :red"
                                :background :red
                                :listen [:action #(println "Button#1\n" %1)])
                        (button :text ":background :yellow"
                                :background :yellow
                                :listen [:action #(println "Button#2\n" %1)])
                        (button :text ":background :orange"
                                :background :orange
                                :listen [:action #(println "Button#3\n" %1)])
                        (button :text ":background #ff8080"
                                :background "#ff8080"
                                :listen [:action #(println "Button#4\n" %1)])
                        (button :text ":background #8080ff"
                                :background "#8080ff"
                                :listen [:action #(println "Button#5\n" %1)])
                        (button :text ":background #8f8"
                                :background "#8f8"
                                :listen [:action #(println "Button#6\n" %1)])
                        ]))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (-&gt; (frame :title "Color test"
               :on-close :exit
               :content formular)
        (pack!)
        (show!)))
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Využití funkce <strong>alert</strong></h2>

<p>V&nbsp;mnoha aplikacích s&nbsp;grafickým uživatelským rozhraním se setkáme
s&nbsp;nutností zobrazení zprávy uživateli a potvrzení této zprávy.
V&nbsp;případě, že se jedná o jednoduchou textovou zprávu, která se pouze
&bdquo;odklepne&ldquo;, lze v&nbsp;knihovně <i>Seesaw</i> pro její zobrazení
použít funkci <strong>alert</strong>, která vyvolá zobrazení následujícího
dialogu:</p>

<img src="http://i.iinfo.cz/images/140/seesaw3-3.png" class="image-211299" width="264" height="114" alt="&#160;" />
<p><i>Obrázek 3: Příklad použití funkce <strong>alert</strong>.</i></p>

<p>Použití této funkce je snadné (ostatně <strong>alert</strong> představuje
snad nejjednodušeji použitelnou GUI funkci):</p>

<pre>
(defn <strong>button-clicked-event</strong>
    [e]
    (alert "Button clicked!"))
&nbsp;
(button :text ":background :yellow"
    :background :yellow
    :listen [:action button-clicked-event])
</pre>

<p>Vyzkoušejme si nyní tuto funkci zakomponovat do demonstračního příkladu.
Vytvoření kostry demonstračního příkladu:</p>

<pre>
lein new app seesaw10
</pre>

<p>Projektový soubor <strong>project.clj</strong>:</p>

<pre>
(defproject <strong>seesaw10</strong> "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[seesaw "1.4.5"]</strong>]
  :main ^:skip-aot seesaw10.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový soubor <strong>src/seesaw10/core.clj:</strong></p>

<pre>
(ns <strong>seesaw10.core</strong>
    (:gen-class))
&nbsp;
(use 'seesaw.core)
(use 'seesaw.color)
&nbsp;
(defn <strong>button-clicked-event</strong>
    [e]
    (alert (str "Button clicked!")))
&nbsp;
(def <strong>formular</strong>
    (grid-panel :columns 2
                :rows 3
                :items [(button :text ":background :red"
                                :background :red
                                :listen [:action button-clicked-event])
                        (button :text ":background :yellow"
                                :background :yellow
                                :listen [:action button-clicked-event])
                        (button :text ":background :orange"
                                :background :orange
                                :listen [:action button-clicked-event])
                        (button :text ":background #ff8080"
                                :background "#ff8080"
                                :listen [:action button-clicked-event])
                        (button :text ":background #8080ff"
                                :background "#8080ff"
                                :listen [:action button-clicked-event])
                        (button :text ":background #8f8"
                                :background "#8f8"
                                :listen [:action button-clicked-event])
                        ]))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (-&gt; (frame :title "Color test"
               :on-close :exit
               :content formular)
        (pack!)
        (show!)))
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Využití funkce <strong>input</strong></h2>

<p>Funkce <strong>alert</strong> popsaná v&nbsp;předchozí kapitole sice vyniká
svou jednoduchostí, ale je možné ji použít pouze pro zobrazení zprávy uživateli
a nikoli již pro vstup dat. Pokud je zapotřebí v&nbsp;nějaké GUI aplikaci
získat nějaký řetězec, vybrat hodnotu z&nbsp;nabízeného seznamu či se jen
rozhodnout mezi Ano/Ne, je možné namísto <strong>alert</strong> použít podobnou
funkci nazvanou prostě <strong>input</strong>. Tato funkce již dokáže vrátit
odpověď uživatele popř.&nbsp;speciální hodnotu <strong>nil</strong>
v&nbsp;případě, že uživatel okno s&nbsp;dialogem zavřel. Bez delšího
vysvětlování si ukažme některé možnosti nabízené funkcí <strong>input</strong>
a jejich nepovinných pojmenovaných parametrů:</p>

<img src="http://i.iinfo.cz/images/140/seesaw3-4.png" class="image-211300" width="264" height="117" alt="&#160;" />
<p><i>Obrázek 4: Dialog vytvořený zavoláním <strong>(input "Type
anything")</strong>.</i></p>

<img src="http://i.iinfo.cz/images/140/seesaw3-5.png" class="image-211301" width="293" height="117" alt="&#160;" />
<p><i>Obrázek 5: Dialog vytvořený zavoláním <strong>(input "Type anything"
:type :warning)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/140/seesaw3-6.png" class="image-211302" width="293" height="117" alt="&#160;" />
<p><i>Obrázek 6: Dialog vytvořený zavoláním <strong>(input "Type anything"
:type :error)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/140/seesaw3-7.png" class="image-211303" width="293" height="117" alt="&#160;" />
<p><i>Obrázek 7: Dialog vytvořený zavoláním <strong>(input "Type anything"
:type :info)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/140/seesaw3-8.png" class="image-211304" width="293" height="117" alt="&#160;" />
<p><i>Obrázek 8: Dialog vytvořený zavoláním <strong>(input "Type anything"
:type :question)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/140/seesaw3-9.png" class="image-211305" width="264" height="117" alt="&#160;" />
<p><i>Obrázek 9: Dialog vytvořený zavoláním <strong>(input "Type anything"
:value 42)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/140/seesaw3-10.png" class="image-211306" width="264" height="122" alt="&#160;" />
<p><i>Obrázek 10: Dialog vytvořený zavoláním <strong>(input "Pick a color"
:choices ["red" "green" "blue" "yellow" "orange" "pink"])</strong>.</i></p>

<img src="http://i.iinfo.cz/images/140/seesaw3-11.png" class="image-211307" width="264" height="122" alt="&#160;" />
<p><i>Obrázek 11: Dialog vytvořený zavoláním <strong>(input "Pick a color"
:type :question :choices ["red" "green" "blue" "yellow" "orange"
"pink"])</strong>.</i></p>

<p>Vidíme, že je možné zvolit ikonu (parametr :type), napsat výchozí hodnotu
(parametr :value), zobrazit dialog se seznamem (parametr :choices)
popř.&nbsp;tyto parametry kombinovat. Podívejme se nyní na (polo)praktický
příklad, v&nbsp;němž bude funkce <strong>input</strong> volána. Vytvoření
kostry demonstračního příkladu zajistí nám již dobře známý příkaz:</p>

<pre>
lein new app seesaw11
</pre>

<p>Projektový soubor <strong>project.clj</strong>:</p>

<pre>
(defproject <strong>seesaw11</strong> "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[seesaw "1.4.5"]</strong>]
  :main ^:skip-aot seesaw11.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový soubor <strong>src/seesaw11/core.clj:</strong></p>

<pre>
(ns <strong>seesaw11.core</strong>
    (:gen-class))
&nbsp;
(use 'seesaw.core)
(use 'seesaw.color)
&nbsp;
(defn <strong>input1</strong>
    [e]
    (println (input "Type anything")))
&nbsp;
(defn <strong>input2</strong>
    [e]
    (println (input "Type anything" :type :warning)))
&nbsp;
(defn <strong>input3</strong>
    [e]
    (println (input "Type anything" :type :error)))
&nbsp;
(defn <strong>input4</strong>
    [e]
    (println (input "Type anything" :type :info)))
&nbsp;
(defn <strong>input5</strong>
    [e]
    (println (input "Type anything" :type :question)))
&nbsp;
(defn <strong>input6</strong>
    [e]
    (println (input "Type anything" :value 42)))
&nbsp;
(defn <strong>input7</strong>
    [e]
    (println (input "Pick a color"
              :choices ["red" "green" "blue" "yellow" "orange" "pink"])))
&nbsp;
(defn <strong>input8</strong>
    [e]
    (println (input "Pick a color"
              :type :question
              :choices ["red" "green" "blue" "yellow" "orange" "pink"])))
&nbsp;
(def <strong>formular</strong>
    (grid-panel :columns 2
                :rows 4
                :items [(button :text "Plain input"
                                :background :red
                                :listen [:action input1])
                        (button :text "Warning"
                                :background :yellow
                                :listen [:action input2])
                        (button :text "Error"
                                :background :orange
                                :listen [:action input3])
                        (button :text "Info"
                                :background "#ff8080"
                                :listen [:action input4])
                        (button :text "Question"
                                :background "#8080ff"
                                :listen [:action input5])
                        (button :text "Init value"
                                :background "#8f8"
                                :listen [:action input6])
                        (button :text "Choice"
                                :background "#ff8"
                                :listen [:action input7])
                        (button :text "Choice + question"
                                :background "#f8f"
                                :listen [:action input8])
                        ]))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (-&gt; (frame :title "Color test"
               :on-close :exit
               :content formular)
        (pack!)
        (show!)))
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Další správci rozvržení dostupní v&nbsp;knihovně Seesaw</h2>

<p><a
href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/">V&nbsp;předchozí
části</a> tohoto seriálu jsme se setkali s&nbsp;prvním správcem rozvržení
(<i>layout manager</i>), který sloužil k&nbsp;rozmístění grafických komponent
(widgetů) na plochu okna či panelu. Tento správce se jmenoval <a
href="http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html">GridLayout</a>
a v&nbsp;knihovně <i>Seesaw</i> ho bylo možné vytvořit s&nbsp;využitím funkce
<strong>grid-panel</strong>. Ovšem <i>GridLayout</i> má ve Swingu a tím pádem i
v&nbsp;knihovně Seesaw několik omezení, která se týkají především velikosti
komponent a taktéž praktické nemožnosti roztažení vybraných komponent mezi
větší množství buněk pomyslné mřížky. Z&nbsp;tohoto důvodu je nutné používat i
další správce rozložení. V&nbsp;dalších čtyřech kapitolách si proto popíšeme
tyto správce: <a href="#k06">flow-panel</a>, <a href="#k07">border-panel</a>,
<a href="#k08">horizontal-panel</a> a <a href="#k09">vertical-panel</a>.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Správce rozvržení <strong>flow-panel</strong></h2>

<p>Jedním ze základních správců rozvržení, který se poměrně často používá
většinou v&nbsp;kombinaci s&nbsp;dalšími manažery, je správce nazvaný jednoduše
<a
href="http://docs.oracle.com/javase/7/docs/api/java/awt/FlowLayout.html">FlowLayout</a>.
Všechny grafické prvky (widgety) jsou při použití tohoto správce umisťovány na
jeden řádek a teprve poté, co je dosaženo nastavené maximální šířky okna, se
další komponenty začnou přidávat na další řádek &ndash; <i>FlowLayout</i>
manažer tedy pracuje podobně, jako kdyby se v&nbsp;HTML umisťovaly obrázky (či
jiné prvky) do jednoho odstavce. <i>FlowLayout</i> manažer je v&nbsp;knihovně
<i>Seesaw</i> představován funkcí <strong>flow-panel</strong>, které se předají
jednotlivé prvky v&nbsp;parametru pojmenovaném <strong>:items</strong>. Kromě
toho lze při volání této funkce specifikovat i další pravidla použitá při
umisťování jednotlivých prvků do okna &ndash; okraj, horizontální a vertikální
mezeru a taktéž zarovnání prvků (doleva, doprava, na střed). Podívejme se na
příklad:</p>

<pre>
(flow-panel :hgap 10 :vgap 10 :border 10 :align :center
            :items [(button :text ":background :red"    :background :red)
                    (button :text ":background :yellow" :background :yellow)
                    (button :text ":background :orange" :background :orange)
                    (button :text ":background #ff8080" :background "#ff8080")
                    (button :text ":background #8080ff" :background "#8080ff")
                    (button :text ":background #8f8"    :background "#8f8"))
</pre>

<p>Použité pojmenované parametry:</p>

<table>
<tr><th>#</th><th>Parametr</th><th>Význam</th></tr>
<tr><td>1</td><td>:border</td><td>šířka mezi okraji okna a komponentami</td></tr>
<tr><td>2</td><td>:hgap</td><td>horizontální mezera mezi komponentami</td></tr>
<tr><td>3</td><td>:vgap</td><td>vertikální mezera mezi komponentami</td></tr>
<tr><td>4</td><td>:align</td><td>zarovnání komponent</td></tr>
<tr><td>5</td><td>:items</td><td>sekvence obsahující komponenty, které se mají umístit do okna či na panel</td></tr>
</table>

<p>Tento úryvek kódu bude použit v&nbsp;demonstračním příkladu nazvaném
<strong>seesaw12</strong>.</p>

<p>Vytvoření kostry demonstračního příkladu:</p>

<pre>
lein new app seesaw12
</pre>

<p>Projektový soubor <strong>project.clj</strong>:</p>

<pre>
(defproject <strong>seesaw12</strong> "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[seesaw "1.4.5"]</strong>]
  :main ^:skip-aot seesaw12.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový soubor <strong>src/seesaw12/core.clj:</strong></p>

<pre>
(ns <strong>seesaw12.core</strong>
    (:gen-class))
&nbsp;
(use 'seesaw.core)
(use 'seesaw.color)
&nbsp;
(def <strong>formular</strong>
    (flow-panel :hgap 10 :vgap 10 :border 10 :align :center
                :items [(button :text ":background :red"    :background :red)
                        (button :text ":background :yellow" :background :yellow)
                        (button :text ":background :orange" :background :orange)
                        (button :text ":background #ff8080" :background "#ff8080")
                        (button :text ":background #8080ff" :background "#8080ff")
                        (button :text ":background #8f8"    :background "#8f8")
                        ]))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (-&gt; (frame :title "Flow layout test"
               :on-close :exit
               :content formular)
        (pack!)
        (show!)))
</pre>

<a href="http://www.root.cz/obrazek/211308/"><img src="http://i.iinfo.cz/images/140/seesaw3-12-prev.png" class="image-211308" width="370" height="30" alt="&#160;" /></a>
<p><i>Obrázek 12: Tlačítka umístěná na plochu okna s&nbsp;využitím správce
rozvržení <strong>flow-panel</strong>.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Správce rozvržení <strong>border-panel</strong></h2>

<p>V&nbsp;pořadí třetím správcem rozvržení grafických komponent, s&nbsp;nímž se
setkáme, je <i>BorderLayout</i> manažer. Pro vývojáře, kteří nikdy nepracovali
s&nbsp;knihovnou <i>Swing</i>, se může jednat o poněkud zvláštního správce
rozvržení (použitelný je pro maximálně pět komponent popř.&nbsp;pro pět
subpanelů), ve skutečnosti se však jedná o velmi užitečný nástroj, především
při ručním návrhu formulářů. Při použití <i>BorderLayout</i> manažeru se
v&nbsp;knihovně <i>Seesaw</i> používá funkce/konstruktor nazvaná
<strong>border-panel</strong>. Této funkci je možné předat několik
pojmenovaných parametrů:</p>

<table>
<tr><th>#</th><th>Parametr</th><th>Význam</th></tr>
<tr><td>1</td><td>:border</td><td>šířka mezi okraji okna a komponentami</td></tr>
<tr><td>2</td><td>:hgap</td><td>horizontální mezera mezi komponentami</td></tr>
<tr><td>3</td><td>:vgap</td><td>vertikální mezera mezi komponentami</td></tr>
<tr><td>4</td><td>:north</td><td>komponenta umístěná v&nbsp;horní části okna/panelu</td></tr>
<tr><td>5</td><td>:south</td><td>komponenta umístěná v&nbsp;dolní části okna/panelu</td></tr>
<tr><td>6</td><td>:west</td><td>komponenta umístěná v&nbsp;levé části okna/panelu</td></tr>
<tr><td>7</td><td>:east</td><td>komponenta umístěná v&nbsp;pravé části okna/panelu</td></tr>
<tr><td>8</td><td>:center</td><td>komponenta umístěná ve střední části okna/panelu</td></tr>
</table>

<p>Podívejme se na příklad &ndash; umístění pěti tlačítek na formuláři:</p>

<pre>
(border-panel :hgap 10 :vgap 10 :border 10
              :north  (button :text "North"  :background "#afa")
              :south  (button :text "South"  :background "#aaf")
              :west   (button :text "West"   :background :yellow)
              :center (button :text "Center" :background :orange)
              :east   (button :text "East"   :background :red) 
              ))
</pre>

<img src="http://i.iinfo.cz/images/140/seesaw3-13.png" class="image-211309" width="260" height="142" alt="&#160;" />
<p><i>Obrázek 13: Tlačítka umístěná na plochu okna s&nbsp;využitím správce
rozvržení <strong>border-panel</strong>.</i></p>

<p>Tento kód je součástí dalšího dnešního demonstračního příkladu. Vytvoření
kostry demonstračního příkladu se provede příkazem:</p>

<pre>
lein new app seesaw13
</pre>

<p>Projektový soubor <strong>project.clj</strong>:</p>

<pre>
(defproject <strong>seesaw13</strong> "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[seesaw "1.4.5"]</strong>]
  :main ^:skip-aot seesaw13.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový soubor <strong>src/seesaw13/core.clj:</strong></p>

<pre>
(ns <strong>seesaw13.core</strong>
    (:gen-class))
&nbsp;
(use 'seesaw.core)
(use 'seesaw.color)
&nbsp;
(def <strong>formular</strong>
    (border-panel :hgap 10 :vgap 10 :border 10
                  :north  (button :text "North"  :background "#afa")
                  :south  (button :text "South"  :background "#aaf")
                  :west   (button :text "West"   :background :yellow)
                  :center (button :text "Center" :background :orange)
                  :east   (button :text "East"   :background :red) 
                  ))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (-&gt; (frame :title "Border layout test"
               :on-close :exit
               :content formular)
        (pack!)
        (show!)))
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Správce rozvržení <strong>horizontal-panel</strong></h2>

<p>Další správce rozvržení je v&nbsp;knihovně <i>Seesaw</i> reprezentován
funkcí/konstruktorem <strong>horizontal-panel</strong>. Použití tohoto správce
je velmi jednoduché, neboť umisťuje jednotlivé komponenty vedle sebe na jediný
řádek, podobně jako <i>FlowLayout</i> manažer, ovšem bez automatického přechodu
na další řádek:</p>

<a href="http://www.root.cz/obrazek/211310/"><img src="http://i.iinfo.cz/images/140/seesaw3-14-prev.png" class="image-211310" width="370" height="25" alt="&#160;" /></a>
<p><i>Obrázek 14: Tlačítka umístěná na plochu okna s&nbsp;využitím správce
rozvržení <strong>horizontal-panel</strong>.</i></p>

<p>Bez dalšího zdlouhavého popisu se podívejme na dnešní předposlední
demonstrační příklad, v&nbsp;němž se tento správce rozložení použije pro
umístění pětice tlačítek na formulář.</p>

<p>Vytvoření kostry demonstračního příkladu:</p>

<pre>
lein new app seesaw14
</pre>

<p>Projektový soubor <strong>project.clj</strong>:</p>

<pre>
(defproject <strong>seesaw14</strong> "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[seesaw "1.4.5"]</strong>]
  :main ^:skip-aot seesaw14.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový soubor <strong>src/seesaw14/core.clj:</strong></p>

<pre>
(ns <strong>seesaw14.core</strong>
    (:gen-class))
&nbsp;
(use 'seesaw.core)
(use 'seesaw.color)
&nbsp;
(def <strong>formular</strong>
    (horizontal-panel :border 10
                :items [(button :text ":background :red"    :background :red)
                        (button :text ":background :yellow" :background :yellow)
                        (button :text ":background :orange" :background :orange)
                        (button :text ":background #ff8080" :background "#ff8080")
                        (button :text ":background #8080ff" :background "#8080ff")
                        (button :text ":background #8f8"    :background "#8f8")
                        ]))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (-&gt; (frame :title "Horizontal panel layout test"
               :on-close :exit
               :content formular)
        (pack!)
        (show!)))
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Správce rozvržení <strong>vertical-panel</strong></h2>

<p>V&nbsp;dnešním sedmém a současně i posledním demonstračním příkladu si
ukážeme použití správce rozvržení představovaného v&nbsp;knihovně <i>Seesaw</i>
funkcí/konstruktorem se jménem <strong>vertical-panel</strong>. Jak již název
napovídá, jsou všechny komponenty umístěny vertikálně pod sebou, ovšem šířka
komponent není (ve výchozím nastavení) nijak ovlivněna šířkou ostatních
komponent, což je ostatně patrné i při pohledu na screenshot:</p>

<img src="http://i.iinfo.cz/images/140/seesaw3-15.png" class="image-211311" width="205" height="197" alt="&#160;" />
<p><i>Obrázek 15: Tlačítka umístěná na plochu okna s&nbsp;využitím správce
rozvržení <strong>vertical-panel</strong>.</i></p>

<p>Použití tohoto správce rozvržení je velmi snadné:</p>

<pre>
(vertical-panel :border 10
            :items [(button :text ":background :red"    :background :red)
                    (button :text ":background :yellow" :background :yellow)
                    (button :text ":background :orange" :background :orange)
                    (button :text ":background #ff8080" :background "#ff8080")
                    (button :text ":background #8080ff" :background "#8080ff")
                    (button :text ":background #8f8"    :background "#8f8")
                    ]))
</pre>

<p>Podívejme se nyní na celý kód demonstračního příkladu. Vytvoření kostry
demonstračního příkladu:</p>

<pre>
lein new app seesaw15
</pre>

<p>Projektový soubor <strong>project.clj</strong>:</p>

<pre>
(defproject <strong>seesaw15</strong> "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[seesaw "1.4.5"]</strong>]
  :main ^:skip-aot seesaw15.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový soubor <strong>src/seesaw15/core.clj:</strong></p>

<pre>
(ns <strong>seesaw15.core</strong>
    (:gen-class))
&nbsp;
(use 'seesaw.core)
(use 'seesaw.color)
&nbsp;
(def <strong>formular</strong>
    (vertical-panel :border 10
                :items [(button :text ":background :red"    :background :red)
                        (button :text ":background :yellow" :background :yellow)
                        (button :text ":background :orange" :background :orange)
                        (button :text ":background #ff8080" :background "#ff8080")
                        (button :text ":background #8080ff" :background "#8080ff")
                        (button :text ":background #8f8"    :background "#8f8")
                        ]))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (-&gt; (frame :title "Vertical panel layout test"
               :on-close :exit
               :content formular)
        (pack!)
        (show!)))
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všech sedm dnes popsaných demonstračních příkladů bylo, podobně jako
v&nbsp;předchozích částech tohoto seriálu, uloženo do GIT repositáře dostupného
na adrese <a
href="https://github.com/tisnik/clojure-examples">https://github.com/tisnik/clojure-examples</a>.
V&nbsp;tabulce zobrazené pod tímto odstavcem naleznete na jednotlivé příklady
přímé odkazy:</p>

<table>
<tr><th>#</th><th>Příklad </th><th>Github</th></tr>
<tr><td>1</td><td>seesaw9 </td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/seesaw9">https://github.com/tisnik/clojure-examples/tree/master/seesaw9</a></td></tr>
<tr><td>2</td><td>seesaw10</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/seesaw10">https://github.com/tisnik/clojure-examples/tree/master/seesaw10</a></td></tr>
<tr><td>3</td><td>seesaw11</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/seesaw11">https://github.com/tisnik/clojure-examples/tree/master/seesaw11</a></td></tr>
<tr><td>4</td><td>seesaw12</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/seesaw12">https://github.com/tisnik/clojure-examples/tree/master/seesaw12</a></td></tr>
<tr><td>5</td><td>seesaw13</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/seesaw13">https://github.com/tisnik/clojure-examples/tree/master/seesaw13</a></td></tr>
<tr><td>6</td><td>seesaw14</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/seesaw14">https://github.com/tisnik/clojure-examples/tree/master/seesaw14</a></td></tr>
<tr><td>7</td><td>seesaw15</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/seesaw15">https://github.com/tisnik/clojure-examples/tree/master/seesaw15</a></td></tr>
</table>

<p>Naklonování celého repositáře zajistí příkaz:</p>

<pre>
git clone http://github.com/tisnik/clojure-examples.git
</pre>

<pre>
Cloning into 'clojure-examples'...
remote: Counting objects: 560, done.
remote: Compressing objects: 100% (50/50), done.
remote: Total 560 (delta 32), reused 0 (delta 0), pack-reused 478
Receiving objects: 100% (560/560), 95.12 KiB | 0 bytes/s, done.
Resolving deltas: 100% (212/212), done.
Checking connectivity... done.
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odkazy na předchozí části seriálu</h2>

<p>Stalo se již zvykem uvést odkazy na všechny předchozí části tohoto seriálu.
Tento zvyk samozřejmě dodržíme i dnes:</p>

<ol>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (2)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/</a>
</li>

</ol>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Building User Interfaces with Seesaw (slajdy k&nbsp;přednášce)<br />
<a href="http://darevay.com/talks/clojurewest2012/#/title-slide">http://darevay.com/talks/clojurewest2012/#/title-slide</a>
</li>

<li>Seesaw na GitHubu<br />
<a href="https://github.com/daveray/seesaw">https://github.com/daveray/seesaw</a>
</li>

<li>Seesaw API Documentation<br />
<a href="http://daveray.github.io/seesaw/">http://daveray.github.io/seesaw/</a>
</li>

<li>Seesaw wiki<br />
<a href="https://github.com/daveray/seesaw/wiki">https://github.com/daveray/seesaw/wiki</a>
</li>

<li>seesaw-repl-tutorial.clj<br />
<a href="https://gist.github.com/daveray/1441520">https://gist.github.com/daveray/1441520</a>
</li>

<li>Témata o Seesaw na Google groups<br />
<a href="https://groups.google.com/forum/#!forum/seesaw-clj">https://groups.google.com/forum/#!forum/seesaw-clj</a>
</li>

<li>Threading macro (dokumentace k&nbsp;jazyku Clojure)<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;</a>
</li>

<li>Understanding the Clojure -&gt; macro<br />
<a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/</a>
</li>

<li>Clisk<br />
<a href="https://github.com/mikera/clisk">https://github.com/mikera/clisk</a>
</li>

<li>clojars: net.mikera/clisk<br />
<a href="https://clojars.org/net.mikera/clisk">https://clojars.org/net.mikera/clisk</a>
</li>

<li>clojure.inspector<br />
<a href="http://clojure.github.io/clojure/clojure.inspector-api.html">http://clojure.github.io/clojure/clojure.inspector-api.html</a>
</li>

<li>Clisk: wiki<br />
<a href="https://github.com/mikera/clisk/wiki">https://github.com/mikera/clisk/wiki</a>
</li>

<li>Dokumentace vygenerovaná pro knihovnu core.matrix<br />
<a href="https://cloojure.github.io/doc/core.matrix/index.html">https://cloojure.github.io/doc/core.matrix/index.html</a>
</li>

<li>Size and Dimensionality<br />
<a href="https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion">https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion</a>
</li>

<li>Towards core.matrix for Clojure?<br />
<a href="https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/">https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/</a>
</li>

<li>The Clojure Toolbox<br />
<a href="http://www.clojure-toolbox.com/">http://www.clojure-toolbox.com/</a>
</li>

<li>Neanderthal<br />
<a href="http://neanderthal.uncomplicate.org/">http://neanderthal.uncomplicate.org/</a>
</li>

<li>Hello world project<br />
<a href="https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj">https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj</a>
</li>

<li>vectorz-clj<br />
<a href="https://github.com/mikera/vectorz-clj">https://github.com/mikera/vectorz-clj</a>
</li>

<li>vectorz - Examples<br />
<a href="https://github.com/mikera/vectorz-clj/wiki/Examples">https://github.com/mikera/vectorz-clj/wiki/Examples</a>
</li>

<li>gloss<br />
<a href="https://github.com/ztellman/gloss">https://github.com/ztellman/gloss</a>
</li>

<li>HTTP client/server for Clojure<br />
<a href="http://www.http-kit.org/">http://www.http-kit.org/</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>java.jdbc API Reference<br />
<a href="https://clojure.github.io/java.jdbc/">https://clojure.github.io/java.jdbc/</a>
</li>

<li>Hiccup<br />
<a href="https://github.com/weavejester/hiccup">https://github.com/weavejester/hiccup</a>
</li>

<li>Clojure Ring na GitHubu<br />
<a href="https://github.com/ring-clojure/ring">https://github.com/ring-clojure/ring</a>
</li>

<li>A brief overview of the Clojure web stack<br />
<a href="https://brehaut.net/blog/2011/ring_introduction">https://brehaut.net/blog/2011/ring_introduction</a>
</li>

<li>Getting Started with Ring<br />
<a href="http://www.learningclojure.com/2013/01/getting-started-with-ring.html">http://www.learningclojure.com/2013/01/getting-started-with-ring.html</a>
</li>

<li>Getting Started with Ring and Compojure - Clojure Web Programming<br />
<a href="http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html">http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

