<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Leiningen: nástroj pro správu projektů napsaných v Clojure</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Leiningen: nástroj pro správu projektů napsaných v Clojure</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Při vývoji aplikací v programovacím jazyce Clojure je možné ke správě projektů přistupovat různým způsobem. Někteří programátoři dávají přednost používání vlastních skriptů, využívání funkcí nabízených IDE atd., ovšem v současnosti nejlepším nástrojem určeným pro tento účel je Leiningen, s jehož základními vlastnostmi se dnes seznámíme.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Leiningen: nástroj pro správu projektů napsaných v Clojure</a></p>
<p><a href="#k02">2. Základní vlastnosti nástroje Leiningen</a></p>
<p><a href="#k03">3. Instalace Leiningenu z&nbsp;balíčku distribuce</a></p>
<p><a href="#k04">4. Instalace v&nbsp;případě, že balíček není k&nbsp;dispozici</a></p>
<p><a href="#k05">5. Otestování základní funkčnosti instalace Leiningenu</a></p>
<p><a href="#k06">6. Vytvoření nového projektu</a></p>
<p><a href="#k07">7. Automatické stažení závislých balíčků a spuštění projektu</a></p>
<p><a href="#k08">8. Struktura adresáře ~/.m2</a></p>
<p><a href="#k09">9. Přidání nové knihovny, na níž projekt závisí</a></p>
<p><a href="#k10">10. Automatické stažení závislé knihovny</a></p>
<p><a href="#k11">11. Otestování upraveného projektu</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Leiningen: nástroj pro správu projektů napsaných v Clojure</h2>

<p>V&nbsp;dnešním článku si popíšeme vybrané základní vlastnosti nástroje
<i>Leiningen</i>, který je v&nbsp;současnosti používán poměrně velkým množstvím
projektů vyvinutých s&nbsp;využitím programovacího jazyka <i>Clojure</i>.
<i>Leiningen</i> se typicky používá pro vytváření nových projektů na základě
předem připravené šablony, automatické stahování všech potřebných knihoven (i
jejich závislostí), spouštění projektů, spouštění testů a v&nbsp;neposlední
řadě taktéž pro spuštění interaktivní smyčky REPL, která vývojářům nabízí více
možnosti, než standardní implementace REPLu dostupná přímo
v&nbsp;<i>Clojure</i> (mezi přidané vlastnosti patří zejména automatické
nastavení cest ke knihovnám apod.). <i>Leiningen</i> je multiplatformním
produktem, což znamená, že i ty vývojové týmy, jejichž členové pracují
s&nbsp;různými operačními systémy, mohou možnosti nabízené <i>Leiningenem</i>
využít. K&nbsp;<i>Leiningenu</i> lze v&nbsp;případě potřeby připojovat i další
přídavné moduly (<i>plugins</i>), takže například existuje podpora pro spuštění
webové aplikace takovým způsobem, že se změny provedené ve zdrojových kódech
ihned promítnou do běžící aplikace bez nutnosti jejího restartu, což samozřejmě
umožňuje rychlejší vývoj i testování.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní vlastnosti nástroje Leiningen</h2>

<p>O některých vlastnostech nabízených nástrojem <i>Leiningen</i> jsme se
zmínili již <a href="#k01">v&nbsp;předchozí kapitole</a>, zkusme si ovšem jeho
základní vlastnosti postupně uvést v&nbsp;jednotlivých bodech:</p>

<ol>

<li>Vytvoření nového projektu na základě vybrané a předem připravené šablony.
K&nbsp;dispozici jsou šablony běžné aplikace (doplněné o jednotkové testy),
přídavného modulu pro samotný <i>Leiningen</i> atd. Základním příkazem je
<strong>lein new</strong>.</li>

<li>Automatické stažení všech knihoven a jejich závislostí na základě
konfigurace zapsané do souboru <strong>project.clj</strong>. Tuto funkci
zajistí příkaz <strong>lein deps</strong>.</li>

<li>Spuštění projektu s&nbsp;možností předání parametrů příkazového řádku (viz
ukázkový příklad). Příkaz je jednoduchý: <strong>lein run</strong>.</li>

<li>Spuštění jednotkových testů, které mohou být vytvořeny společně
s&nbsp;projektem (kostra jednoho testu je připravena automaticky). Snadno
uhádnutelný příkaz, který testy spustí, se jmenuje <strong>lein
test</strong>.</li>

<li>Relativně rychlá kontrola syntaxe zdrojových kódů i kontrola existence
volaných metod (<strong>lein check</strong>).</li>

<li>Lokální instalace projektu do specifikovaného adresáře (<strong>lein
install</strong>).</li>

<li>Příprava Java archivu (souboru s&nbsp;koncovkou .jar) takovým způsobem, aby
bylo možné aplikaci nasadit i na jiném počítači. V&nbsp;rámci přípravy archivu
se provádí překlad vybraných modulů do Javovského bajtkódu (<strong>lein
jar</strong>).</li>

<li>Příprava Java archivu obsahujícího i všechny závislé knihovny včetně
samotného <i>Clojure</i>. Takto vytvořený &bdquo;uberjar&ldquo; je posléze
možné nasadit na jakémkoli počítači vybaveném pouze JRE (běhovým prostředím
jazyka Java). Zajistí příkaz <strong>lein uberjar</strong>.</li>

<li>Spuštění smyčky REPL s&nbsp;nastavením cest ke všem potřebným knihovnám a
modulům (<strong>lein repl</strong>).</li>

<li>Každý příkaz <i>Leiningenu</i> je v&nbsp;rozumné míře popsán
v&nbsp;nápovědě (<strong>lein help příkaz</strong>).</li>

</ol>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace Leiningenu z&nbsp;balíčku distribuce</h2>

<p>Pojďme si nyní říci, jakým způsobem lze <i>Leiningen</i> nainstalovat.
Nejjednodušší je to v&nbsp;případě, že se balíček s&nbsp;tímto nástrojem již
nachází v&nbsp;repositářích distribuce. Postup je nasnadě &ndash;
<i>Leiningen</i> se nainstaluje (i se svými závislostmi) stejným způsobem, jako
prakticky jakýkoli jiný balíček. Podívejme se například na způsob instalace
<i>Leiningenu</i> na počítači s&nbsp;(primárně) desktopovou distribucí Linux
Mint. Předpokládejme, že aktuálně přihlášený uživatel může získat práva roota,
tedy:</p>

<pre>
$ su -
Password:
</pre>

<p>Instalace je v&nbsp;tomto případě až triviálně snadná:</p>

<pre>
apt-get install leiningen
</pre>

<p>Po chvilce získáme seznam všech balíčků, které se nainstalují společně
s&nbsp;<i>Leiningenem</i>:</p>

<pre>
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following extra packages will be installed:
  ant bsh clojure-contrib clojure1.2 clojure1.4 java-wrappers junit junit4
  libapache-pom-java libasm3-java libatinject-jsr330-api-java
  libavalon-framework-java libbatik-java libbsf-java libbsh-java
  ...
  ...
  ...
  ...
  ...
  ...
  libxalan2-java libxbean-java libxerces2-java libxml-commons-external-java
  libxml-commons-resolver1.1-java libxmlgraphics-commons-java rlwrap
0 upgraded, 76 newly installed, 0 to remove and 85 not upgraded.
Need to get 56,1 MB of archives.
After this operation, 75,2 MB of additional disk space will be used.
Do you want to continue? [Y/n]
</pre>

<p>Zajímavé je, kolik závislých balíčků se k&nbsp;<i>Leiningenu</i>
doinstaluje. Ve skutečnosti nejsou některé tyto balíčky potřebné, o čemž se
ostatně můžete sami přesvědčit při manuální instalaci popsané <a
href="#k04">v&nbsp;následující kapitole</a> (tímto chováním trpí i další
javovské balíčky, třeba Eclipse apod.).</p>

<p>Na počítačích s&nbsp;operačním systémem Microsoft Windows lze buď použít
Cygwin a manuální postup popsaný dále, popř.&nbsp;lze sáhnout po aplikaci
<i>leiningen-win-installer</i> dostupné na adrese <a
href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
(osobně ji však nemám kde odzkoušet :-), takže prosím znalejší čtenáře, aby se
o svoji pozitivní či negativní zkušenost podělili v&nbsp;diskuzi pod
článkem).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace v&nbsp;případě, že balíček není k&nbsp;dispozici</h2>

<p>Zajímavější a vlastně i poučnější je manuální instalace <i>Leiningenu</i>
v&nbsp;případě, že příslušný balíček není k&nbsp;dispozici popř.&nbsp;uživatel
preferuje mít větší kontrolu nad celým procesem. Dále uvedený postup je možné
po mírné úpravě využít i v&nbsp;případě, že uživatel nemá práva roota. Postup
byl otestován na Debianu, Fedoře 19, Fedoře 20 a Linux Mintu, měl by však
fungovat ve všech distrubucích s&nbsp;nainstalovaným Bashem (i v&nbsp;Cygwinu).
Nejprve je nutné stáhnout skript <strong>lein</strong>, který představuje
samotné jádro <i>Leiningenu</i>:</p>

<pre>
wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
</pre>

<p>Chvíli počkáme na (doufejme) zdárný výsledek:</p>

<pre>
--2015-02-09 20:31:45--  https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 23.235.43.133
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|23.235.43.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 12015 (12K) [text/plain]
Saving to: 'lein'
&nbsp;
100%[=========================================================&gt;] 12 015      --.-K/s   in 0,002s
&nbsp;
2015-02-09 20:31:46 (5,85 MB/s) - 'lein' saved [12015/12015]
</pre>

<p>Nyní máme na výběr dvě možnosti. Buď je možné skript <strong>lein</strong>
uložit do libovolného lokálního adresáře, který je součástí proměnné
<strong>PATH</strong> (lze snadno zjistit přes <strong>echo $PATH</strong>),
popř.&nbsp;lze tento skript &bdquo;nainstalovat&ldquo; takovým způsobem, aby
byl dostupný i pro všechny ostatní uživatele. První možnost je jednoduchá,
předpokládejme instalaci do ~/bin a udělejme skript spustitelný:</p>

<pre>
chmod u+x lein
mv lein ~/bin
</pre>

<p>Druhá možnost &ndash; instalace tak, aby byl <strong>lein</strong> dostupný
i pro další uživatele &ndash; samozřejmě vyžaduje příslušná práva roota:</p>

<pre>
sudo cp lein /usr/local/bin
sudo chmod a+x /usr/local/bin/lein
</pre>

<p>Pro jistotu lze samozřejmě zkontrolovat, co se v&nbsp;tomto skriptu provádí
:-)</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Otestování základní funkčnosti instalace Leiningenu</h2>

<p>I po úspěšné instalaci skriptu <strong>lein</strong> ještě není vše
připraveno k&nbsp;okamžitému použití. Ve skutečnosti totiž skript
<strong>lein</strong> ke své činnosti potřebuje i další soubor, jímž je
(minimálně v&nbsp;současnosti) Javovský archiv nazvaný
<strong>leiningen-2.x.x-standalone.jar</strong> (x.x se postupně mění). Tento
archiv je však stažen a uložen zcela automaticky při prvním spuštění
<i>Leiningenu</i>. Můžeme si to ostatně snadno otestovat:</p>

<pre>
lein
</pre>

<p>Zahájí se stahování a posléze se vypíšou všechny možnosti, které
<i>Leiningen</i> v&nbsp;základní instalaci svým uživatelům nabízí:</p>

<pre>
Downloading Leiningen to /home/tester/.lein/self-installs/leiningen-2.5.1-standalone.jar now...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   406    0   406    0     0    749      0 --:--:-- --:--:-- --:--:--   749
100 14.5M  100 14.5M    0     0  1618k      0  0:00:09  0:00:09 --:--:-- 1510k
Leiningen is a tool for working with Clojure projects.
&nbsp;
Several tasks are available:
change              Rewrite project.clj by applying a function.
check               Check syntax and warn on reflection.
classpath           Print the classpath of the current project.
clean               Remove all files from project's target-path.
compile             Compile Clojure source into .class files.
deploy              Build and deploy jar to remote repository.
deps                Download all dependencies.
do                  Higher-order task to perform other tasks in succession.
help                Display a list of tasks or help for a given task.
install             Install the current project to the local repository.
jar                 Package up all the project's files into a jar file.
javac               Compile Java source files.
new                 Generate project scaffolding based on a template.
plugin              DEPRECATED. Please use the :user profile instead.
pom                 Write a pom.xml file to disk for Maven interoperability.
release             Perform :release-tasks.
repl                Start a repl session either with the current project or standalone.
retest              Run only the test namespaces which failed last time around.
run                 Run a -main function with optional command-line arguments.
search              Search remote maven repositories for matching jars.
show-profiles       List all available profiles or display one if given an argument.
test                Run the project's tests.
trampoline          Run a task without nesting the project's JVM inside Leiningen's.
uberjar             Package up the project files and dependencies into a jar file.
update-in           Perform arbitrary transformations on your project map.
upgrade             Upgrade Leiningen to specified version or latest stable.
vcs                 Interact with the version control system.
version             Print version for Leiningen and the current JVM.
with-profile        Apply the given task with the profile(s) specified.
&nbsp;
Run `lein help $TASK` for details.
&nbsp;
Global Options:
  -o             Run a task offline.
  -U             Run a task after forcing update of snapshots.
  -h, --help     Print this help or help for a specific task.
  -v, --version  Print Leiningen's version.
&nbsp;
See also: readme, faq, tutorial, news, sample, profiles, deploying, gpg,
mixed-source, templates, and copying.
</pre>

<p>Výše zmíněný soubor <strong>leiningen-2.x.x-standalone.jar</strong>
naleznete v&nbsp;adresáři <strong>~/.lein</strong>:</p>

<pre>
$ tree ~/.lein
&nbsp;
/home/ptisnovsk/.lein
├── repl-history
└── self-installs
    └── leiningen-2.5.0-standalone.jar
&nbsp;
1 directory, 2 files
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vytvoření nového projektu</h2>

<p>Nyní si již konečně můžeme popsat způsob práce s&nbsp;projekty
s&nbsp;využitím nástroje <i>Leiningen</i>. Základním příkazem je vytvoření
nového projektu v&nbsp;aktuálním adresáři. Tuto činnost zajišťuje příkaz
<strong>lein new</strong>, kterému se navíc musí předat typ projektu:</p>

<pre>
lein new
</pre>

<p>V&nbsp;základní instalaci <i>Leiningenu</i> (tj.&nbsp;ve chvíli, kdy
prozatím nejsou nainstalovány žádné další přídavné moduly) by měly být
k&nbsp;dispozici minimálně následující čtyři typy projektů:</p>

<pre>
Subtasks available:
template   A meta-template for 'lein new' templates.
default    A general project template for libraries.
app        An application project template.
plugin     A leiningen plugin project template.
</pre>

<p>Zkusme si nyní vytvořit běžný projekt představující aplikaci naprogramovanou
v&nbsp;<i>Clojure</i>. Pro vytvoření projektu použijeme následující příkaz:</p>

<pre>
lein new app clojure_test_1
Generating a project called clojure_test_1 based on the 'app' template.
</pre>

<p>V&nbsp;případě úspěchu by se měl v&nbsp;aktuálním adresáři vytvořit
podadresář s&nbsp;názvem <strong>clojure_test_1</strong>, který má tuto
strukturu:</p>

<pre>
.
├── doc
│   └── intro.md
├── LICENSE
├── project.clj
├── README.md
├── resources
├── src
│   └── clojure_test_1
│       └── core.clj
└── test
    └── clojure_test_1
        └── core_test.clj
&nbsp;
6 directories, 6 files
</pre>

<p>Soubory <strong>doc/intro.md</strong>, <strong>LICENCE</strong> a
<strong>README.md</strong> jsou základem dokumentace, ovšem z&nbsp;hlediska
vývojáře existuje v&nbsp;projektu dvojice mnohem důležitějších souborů. Prvním
z&nbsp;nich je <strong>project.clj</strong>. Tento soubor je zpracováván
<i>Leiningenem</i> při mnoha činnostech, zejména při spouštění aplikace,
instalaci závislostí apod. Podívejme se nyní na obsah tohoto souboru:</p>

<pre>
(defproject clojure_test_1 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]]
  :main ^:skip-aot clojure-test-1.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Vidíme, že se jedná o běžný zdrojový soubor programovacího jazyka
<i>Clojure</i> obsahující mapu, v&nbsp;níž jednotlivé klíče mají předem daný
význam. Důležitý je především klíč <strong>:main</strong>, kterým se
specifikuje soubor s&nbsp;funkcí pojmenovanou <strong>main-</strong>. Tato
funkce je zavolána po spuštění aplikace a navíc jsou této funkci předány
parametry z&nbsp;příkazové řádky (takže jejich zpracování je velmi jednoduché,
není totiž nutné používat *command-line-args* atd.). Dále zde můžeme vidět
další důležitý klíč <strong>:dependencies</strong>, o jehož významu se
přesvědčíme v&nbsp;navazujících kapitolách.</p>

<p>Soubor <strong>src/clojure_test_1/core.clj</strong> obsahuje základní kostru
aplikace. Především zde nalezneme specifikaci jmenného prostoru (což je
pochopitelné) a taktéž výše zmíněnou funkci <strong>main-</strong> tvořící
vstupní bod do právě vytvořené aplikace:</p>

<pre>
(ns clojure-test-1.core
  (:gen-class))
&nbsp;
(defn -main
  "I don't do a whole lot ... yet."
  [&amp; args]
  (println "Hello, World!"))
</pre>

<p>Poznámka: povšimněte si, že ve jménech adresářů a souborů se používají
podtržítka, kdežto ve specifikacích jmenných prostorů pomlčky. Na tuto konvenci
je nutné si zvyknout, při jejím nedodržení totiž <i>Clojure</i> nenajde všechny
skripty a budou vypisována mnohdy kryptická chybová hlášení.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Automatické stažení závislých balíčků a spuštění projektu</h2>

<p>Právě vytvořený projekt lze spustit příkazem <strong>lein run</strong>
zavolaného v&nbsp;adresáři s&nbsp;projektem, tedy:</p>

<pre>
cd clojure_test_1
lein run
</pre>

<p>Před prvním spuštěním se automaticky vyhodnotí všechny závislé balíčky, ty
se stáhnou a použijí (vidíme, že se mj.&nbsp;stahuje i samotné
<i>Clojure</i>):</p>

<pre>
Retrieving org/clojure/clojure/1.6.0/clojure-1.6.0.pom from central
Retrieving org/sonatype/oss/oss-parent/7/oss-parent-7.pom from central
Retrieving org/clojure/tools.nrepl/0.2.6/tools.nrepl-0.2.6.pom from central
Retrieving org/clojure/pom.contrib/0.1.2/pom.contrib-0.1.2.pom from central
Retrieving clojure-complete/clojure-complete/0.2.3/clojure-complete-0.2.3.pom from clojars
Retrieving org/clojure/tools.nrepl/0.2.6/tools.nrepl-0.2.6.jar from central
Retrieving org/clojure/clojure/1.6.0/clojure-1.6.0.jar from central
Retrieving clojure-complete/clojure-complete/0.2.3/clojure-complete-0.2.3.jar from clojars
Hello, World!
</pre>

<p>Po druhém spuštění stejné aplikace příkazem:</p>

<pre>
lein run
</pre>

<p>Se již žádné další balíčky nestahují, ale dojde skutečně přímo ke
spuštění:</p>

<pre>
Hello, World!
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Struktura adresáře ~/.m2</h2>

<p>Zajímavé bude zjistit, kam se vlastně uložily všechny balíčky, na nichž běh
aplikace závisí. Projekt <i>Leiningen</i> ve skutečnosti používá stejnou
strukturu jako <i>Maven</i> (resp.&nbsp;přesněji řečeno je přímo využívána
funkcionalita Mavenu), takže balíčky nalezneme v&nbsp;adresáři ~/.m2 (který vám
bude časem utěšeně bobtnat :-). Obsah adresáře těsně po spuštění demonstračního
příkladu vypadá takto:</p>

<pre>
tree ~/.m2
</pre>

<pre>
.
└── repository
    ├── clojure-complete
    │   └── clojure-complete
    │       └── 0.2.3
    │           ├── clojure-complete-0.2.3.jar
    │           ├── clojure-complete-0.2.3.jar.sha1
    │           ├── clojure-complete-0.2.3.pom
    │           ├── clojure-complete-0.2.3.pom.sha1
    │           └── _maven.repositories
    └── org
        ├── clojure
        │   ├── clojure
        │   │   └── 1.6.0
        │   │       ├── clojure-1.6.0.jar
        │   │       ├── clojure-1.6.0.jar.sha1
        │   │       ├── clojure-1.6.0.pom
        │   │       ├── clojure-1.6.0.pom.sha1
        │   │       └── _maven.repositories
        │   ├── pom.contrib
        │   │   └── 0.1.2
        │   │       ├── _maven.repositories
        │   │       ├── pom.contrib-0.1.2.pom
        │   │       └── pom.contrib-0.1.2.pom.sha1
        │   └── tools.nrepl
        │       └── 0.2.6
        │           ├── _maven.repositories
        │           ├── tools.nrepl-0.2.6.jar
        │           ├── tools.nrepl-0.2.6.jar.sha1
        │           ├── tools.nrepl-0.2.6.pom
        │           └── tools.nrepl-0.2.6.pom.sha1
        └── sonatype
            └── oss
                └── oss-parent
                    └── 7
                        ├── _maven.repositories
                        ├── oss-parent-7.pom
                        └── oss-parent-7.pom.sha1
&nbsp;
16 directories, 21 files
</pre>

<p>Po několika týdnech práce na různých projektech se však můžete dopracovat i
k&nbsp;následujícímu stavu:</p>

<pre>
/home/ptisnovsk/.m2
└── repository
    ├── args4j
    │   ├── args4j
    │   │   └── 2.0.16
    │   │       ├── args4j-2.0.16.jar
    │   │       ├── args4j-2.0.16.jar.sha1
    │   │       ├── args4j-2.0.16.pom
    │   │       ├── args4j-2.0.16.pom.sha1
    │   │       └── _maven.repositories
    │   └── args4j-site
    │       └── 2.0.16
    │           ├── args4j-site-2.0.16.pom
    │           ├── args4j-site-2.0.16.pom.sha1
    │           └── _maven.repositories
    ├── cljsbuild
    │   └── cljsbuild
    │       └── 1.0.3
    │           ├── cljsbuild-1.0.3.jar
    │           ├── cljsbuild-1.0.3.jar.sha1
    │           ├── cljsbuild-1.0.3.pom
    │           ├── cljsbuild-1.0.3.pom.sha1
    │           └── _maven.repositories
    ├── clj-stacktrace
    │   └── clj-stacktrace
    │       └── 0.2.5
    │           ├── clj-stacktrace-0.2.5.jar
    │           ├── clj-stacktrace-0.2.5.jar.sha1
    │           ├── clj-stacktrace-0.2.5.pom
    │           ├── clj-stacktrace-0.2.5.pom.sha1
    │           └── _maven.repositories
    ├── clojure-complete
    │   └── clojure-complete
    │       └── 0.2.3
    │           ├── clojure-complete-0.2.3.jar
    │           ├── clojure-complete-0.2.3.jar.sha1
    │           ├── clojure-complete-0.2.3.pom
    │           ├── clojure-complete-0.2.3.pom.sha1
    │           └── _maven.repositories
    ├── com
    │   └── google
    │       ├── code
    │       │   └── findbugs
    │       │       └── jsr305
    │       │           └── 1.3.9
    │       │               ├── jsr305-1.3.9.jar
    │       │               ├── jsr305-1.3.9.jar.sha1
    │       │               ├── jsr305-1.3.9.pom
    │       │               ├── jsr305-1.3.9.pom.sha1
    │       │               └── _maven.repositories
    │       ├── google
    │       │   └── 1
    │       │       ├── google-1.pom
    │       │       ├── google-1.pom.sha1
    │       │       └── _maven.repositories
    │       ├── guava
    │       │   ├── guava
    │       │   │   └── 15.0
    │       │   │       ├── guava-15.0.jar
    │       │   │       ├── guava-15.0.jar.sha1
    │       │   │       ├── guava-15.0.pom
    │       │   │       ├── guava-15.0.pom.sha1
    │       │   │       └── _maven.repositories
    │       │   └── guava-parent
    │       │       └── 15.0
    │       │           ├── guava-parent-15.0.pom
    │       │           ├── guava-parent-15.0.pom.sha1
    │       │           └── _maven.repositories
    │       ├── javascript
    │       │   └── closure-compiler
    │       │       └── v20131014
    │       │           ├── closure-compiler-v20131014.jar
    │       │           ├── closure-compiler-v20131014.jar.sha1
    │       │           ├── closure-compiler-v20131014.pom
    │       │           ├── closure-compiler-v20131014.pom.sha1
    │       │           └── _maven.repositories
    │       └── protobuf
    │           └── protobuf-java
    │               └── 2.4.1
    │                   ├── _maven.repositories
    │                   ├── protobuf-java-2.4.1.jar
    │                   ├── protobuf-java-2.4.1.jar.sha1
    │                   ├── protobuf-java-2.4.1.pom
    │                   └── protobuf-java-2.4.1.pom.sha1
    ├── fs
    │   └── fs
    │       └── 1.1.2
    │           ├── fs-1.1.2.jar
    │           ├── fs-1.1.2.jar.sha1
    │           ├── fs-1.1.2.pom
    │           ├── fs-1.1.2.pom.sha1
    │           └── _maven.repositories
    ├── javassist
    │   └── javassist
    │       └── 3.12.1.GA
    │           ├── javassist-3.12.1.GA.jar
    │           ├── javassist-3.12.1.GA.jar.sha1
    │           ├── javassist-3.12.1.GA.pom
    │           ├── javassist-3.12.1.GA.pom.sha1
    │           └── _maven.repositories
    ├── lein-cljsbuild
    │   ├── cljs-compat
    │   │   └── 1.0.0-SNAPSHOT
    │   │       ├── cljs-compat-1.0.0-20140402.162347-24.jar
    │   │       ├── cljs-compat-1.0.0-20140402.162347-24.jar.sha1
    │   │       ├── cljs-compat-1.0.0-20140402.162347-24.pom
    │   │       ├── cljs-compat-1.0.0-20140402.162347-24.pom.sha1
    │   │       ├── cljs-compat-1.0.0-SNAPSHOT.jar
    │   │       ├── cljs-compat-1.0.0-SNAPSHOT.pom
    │   │       ├── maven-metadata-clojars.xml
    │   │       ├── maven-metadata-clojars.xml.sha1
    │   │       ├── _maven.repositories
    │   │       └── resolver-status.properties
    │   └── lein-cljsbuild
    │       └── 1.0.3
    │           ├── lein-cljsbuild-1.0.3.jar
    │           ├── lein-cljsbuild-1.0.3.jar.sha1
    │           ├── lein-cljsbuild-1.0.3.pom
    │           ├── lein-cljsbuild-1.0.3.pom.sha1
    │           └── _maven.repositories
    └── org
        ├── apache
        │   ├── apache
        │   │   └── 9
        │   │       ├── apache-9.pom
        │   │       ├── apache-9.pom.sha1
        │   │       └── _maven.repositories
        │   └── commons
        │       ├── commons-compress
        │       │   └── 1.3
        │       │       ├── commons-compress-1.3.jar
        │       │       ├── commons-compress-1.3.jar.sha1
        │       │       ├── commons-compress-1.3.pom
        │       │       ├── commons-compress-1.3.pom.sha1
        │       │       └── _maven.repositories
        │       └── commons-parent
        │           └── 22
        │               ├── commons-parent-22.pom
        │               ├── commons-parent-22.pom.sha1
        │               └── _maven.repositories
        ├── clojure
        │   ├── clojure
        │   │   ├── 1.3.0
        │   │   │   ├── clojure-1.3.0.jar
        │   │   │   ├── clojure-1.3.0.jar.sha1
        │   │   │   ├── clojure-1.3.0.pom
        │   │   │   ├── clojure-1.3.0.pom.sha1
        │   │   │   └── _maven.repositories
        │   │   ├── 1.4.0
        │   │   │   ├── clojure-1.4.0.pom
        │   │   │   ├── clojure-1.4.0.pom.sha1
        │   │   │   └── _maven.repositories
        │   │   ├── 1.5.1
        │   │   │   ├── clojure-1.5.1.pom
        │   │   │   ├── clojure-1.5.1.pom.sha1
        │   │   │   └── _maven.repositories
        │   │   └── 1.6.0
        │   │       ├── clojure-1.6.0.jar
        │   │       ├── clojure-1.6.0.jar.sha1
        │   │       ├── clojure-1.6.0.pom
        │   │       ├── clojure-1.6.0.pom.sha1
        │   │       └── _maven.repositories
        │   ├── clojurescript
        │   │   └── 0.0-2197
        │   │       ├── clojurescript-0.0-2197.jar
        │   │       ├── clojurescript-0.0-2197.jar.sha1
        │   │       ├── clojurescript-0.0-2197.pom
        │   │       ├── clojurescript-0.0-2197.pom.sha1
        │   │       └── _maven.repositories
        │   ├── data.json
        │   │   └── 0.2.3
        │   │       ├── data.json-0.2.3.jar
        │   │       ├── data.json-0.2.3.jar.sha1
        │   │       ├── data.json-0.2.3.pom
        │   │       ├── data.json-0.2.3.pom.sha1
        │   │       └── _maven.repositories
        │   ├── google-closure-library
        │   │   └── 0.0-20140226-71326067
        │   │       ├── google-closure-library-0.0-20140226-71326067.jar
        │   │       ├── google-closure-library-0.0-20140226-71326067.jar.sha1
        │   │       ├── google-closure-library-0.0-20140226-71326067.pom
        │   │       ├── google-closure-library-0.0-20140226-71326067.pom.sha1
        │   │       └── _maven.repositories
        │   ├── google-closure-library-third-party
        │   │   └── 0.0-20140226-71326067
        │   │       ├── google-closure-library-third-party-0.0-20140226-71326067.jar
        │   │       ├── google-closure-library-third-party-0.0-20140226-71326067.jar.sha1
        │   │       ├── google-closure-library-third-party-0.0-20140226-71326067.pom
        │   │       ├── google-closure-library-third-party-0.0-20140226-71326067.pom.sha1
        │   │       └── _maven.repositories
        │   ├── pom.contrib
        │   │   └── 0.1.2
        │   │       ├── _maven.repositories
        │   │       ├── pom.contrib-0.1.2.pom
        │   │       └── pom.contrib-0.1.2.pom.sha1
        │   ├── tools.nrepl
        │   │   └── 0.2.6
        │   │       ├── _maven.repositories
        │   │       ├── tools.nrepl-0.2.6.jar
        │   │       ├── tools.nrepl-0.2.6.jar.sha1
        │   │       ├── tools.nrepl-0.2.6.pom
        │   │       └── tools.nrepl-0.2.6.pom.sha1
        │   └── tools.reader
        │       └── 0.8.3
        │           ├── _maven.repositories
        │           ├── tools.reader-0.8.3.jar
        │           ├── tools.reader-0.8.3.jar.sha1
        │           ├── tools.reader-0.8.3.pom
        │           └── tools.reader-0.8.3.pom.sha1
        ├── javassist
        │   └── javassist
        │       ├── 3.12.1.GA
        │       └── 3.18.0
        ├── json
        │   └── json
        │       └── 20090211
        │           ├── json-20090211.jar
        │           ├── json-20090211.jar.sha1
        │           ├── json-20090211.pom
        │           ├── json-20090211.pom.sha1
        │           └── _maven.repositories
        ├── mozilla
        │   └── rhino
        │       └── 1.7R4
        │           ├── _maven.repositories
        │           ├── rhino-1.7R4.jar
        │           ├── rhino-1.7R4.jar.sha1
        │           ├── rhino-1.7R4.pom
        │           └── rhino-1.7R4.pom.sha1
        └── sonatype
            └── oss
                └── oss-parent
                    ├── 5
                    │   ├── _maven.repositories
                    │   ├── oss-parent-5.pom
                    │   └── oss-parent-5.pom.sha1
                    └── 7
                        ├── _maven.repositories
                        ├── oss-parent-7.pom
                        └── oss-parent-7.pom.sha1
&nbsp;
89 directories, 150 files
</pre>

<p>uff...</p>

<p>Adresář ~/.m2 je samozřejmě možné pročistit a znovu u všech projektů spustit
<strong>lein deps</strong> (popř.&nbsp;i Maven v&nbsp;případě, že programátor
současně vyvíjí i projekty v&nbsp;Javě).</p>

<p>Stručné shrnutí: při práci s&nbsp;<i>Leiningenem</i> se typicky používají
čtyři adresáře:</p>

<ol>
<li>Adresář zmíněný na PATH, kde je uložen spustitelný skript <strong>lein</strong>.</li>
<li>Adresář <strong>~/.lein</strong> obsahující soubory potřebné pro běh <i>Leiningenu</i>.</li>
<li>Adresář <strong>~/.m2</strong> s&nbsp;knihovnami vyžadovanými jednotlivými projekty.</li>
<li>Adresář s&nbsp;projektem, který musí obsahovat především soubor <strong>project.clj</strong>.</li>
</ol>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přidání nové knihovny, na níž projekt závisí</h2>

<p>Podívejme se nyní na způsob řešení závislostí. Pokusíme se do našeho
demonstračního příkladu přidat knihovnu <strong>org.clojure/data.json</strong>,
kterou lze použít při zpracování dat uložených či přenášených v&nbsp;populárním
formátu JSON. Nová knihovna se přidá do vektoru navázaného na klíč
<strong>:dependencies</strong>, přičemž se nesmí zapomenout na to, že i samotná
deklarace knihovny je vektor obsahující jméno a verzi &ndash; pozor tedy na
správné uzávorkování (viz zvýrazněný řádek):</p>

<pre>
(defproject clojure_test_1 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [ [org.clojure/clojure "1.6.0"]
                  <strong>[org.clojure/data.json "0.2.5"]</strong>]
  :main ^:skip-aot clojure-test-1.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Upravíme i zdrojový kód projektu takovým způsobem, aby tuto knihovnu
využíval. Knihovnu je nutné uvést v&nbsp;atributu :require (opět viz zvýrazněný
řádek) s&nbsp;případným uvedením symbolu sloužícího jako alias k&nbsp;plnému
názvu jmenného prostoru knihovny. To znamená, že namísto
<strong>clojure.data.json/pprint</strong> se ve zdrojovém kódu může psát pouze
<strong>json/pprint</strong> atd.:</p>

<pre>
(ns clojure-test-1.core
  (:gen-class)
  <strong>(:require [clojure.data.json :as json])</strong>)
&nbsp;
(defn -main
  "I don't do a whole lot ... yet."
  [&amp; args]
  (let [article {:title "What's Good About Clojure?"
                 :url   "http://www.catalysoft.com/articles/goodAboutClojure.html"
                 :last-checked (.toString (new java.util.Date))}]
  (json/pprint article)))
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Automatické stažení závislé knihovny</h2>

<p>Pokud se nyní (opět v&nbsp;adresáři s&nbsp;projektem) zadá následující
příkaz...</p>

<pre>
lein deps
</pre>

<p>... je podle zpráv vypisovaných na terminál patrné, že <i>Leiningen</i>
otevře a zpracuje soubor <strong>project.clj</strong>, načte všechny knihovny
specifikované v&nbsp;tomto souboru, vyhodnotí, které knihovny ještě nejsou
lokálně dostupné a následně tyto knihovny stáhne a uloží do správného
podadresáře v&nbsp;~/.m2:</p>

<pre>
Retrieving org/clojure/data.json/0.2.5/data.json-0.2.5.pom from central
Retrieving org/clojure/clojure/1.4.0/clojure-1.4.0.pom from central
Retrieving org/sonatype/oss/oss-parent/5/oss-parent-5.pom from central
Retrieving org/clojure/data.json/0.2.5/data.json-0.2.5.jar from central
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Otestování upraveného projektu</h2>

<p>Nyní již máme všechny potřebné knihovny nainstalované lokálně a můžeme
přistoupit ke spuštění naší demonstrační aplikace:</p>

<pre>
lein run
</pre>

<p>Z&nbsp;výpisu provedeného na standardní výstup je patrné, že se funkce
<strong>json/pprint</strong> skutečně správně zavolala (vyhodnotila):</p>

<pre>
{"title":"What's Good About Clojure?",
 "url":"http:\/\/www.catalysoft.com\/articles\/goodAboutClojure.html",
 "last-checked":"Mon Feb 09 21:12:08 CET 2015"}
</pre>

<p>Ve druhé části článku si ukážeme další možnosti, které projekt
<i>Leiningen</i> programátorům nabízí.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II<br />
<a href="2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

