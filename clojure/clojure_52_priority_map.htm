<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
$ <strong>lein new app priority-map-1</strong>
&nbsp;
Generating a project called priority-map-1 based on the 'app' template.
</pre>

<pre>
.
├── CHANGELOG.md
├── doc
│   └── intro.md
├── LICENSE
├── project.clj
├── README.md
├── resources
├── src
│   └── priority_map_1
│       └── core.clj
└── test
    └── priority_map_1
        └── core_test.clj

6 directories, 7 files
</pre>

<pre>
(defproject priority-map-1 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0"
            :url "https://www.eclipse.org/legal/epl-2.0/"}
  :dependencies [[org.clojure/clojure "1.10.1"]]
  :main ^:skip-aot priority-map-1.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all
                       :jvm-opts ["-Dclojure.compiler.direct-linking=true"]}})
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
(defproject priority-map-1 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0"
            :url "https://www.eclipse.org/legal/epl-2.0/"}
  :dependencies [[org.clojure/clojure "1.10.1"]
                 [org.clojure/data.priority-map "1.0.0"]]
  :main ^:skip-aot priority-map-1.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all
                       :jvm-opts ["-Dclojure.compiler.direct-linking=true"]}})
</pre>

<pre>
$ lein deps
&nbsp;
Retrieving org/clojure/data.priority-map/1.0.0/data.priority-map-1.0.0.pom from central
Retrieving org/clojure/data.priority-map/1.0.0/data.priority-map-1.0.0.jar from central
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
$ <strong>lein repl</strong>
</pre>

<pre>
nREPL server started on port 33211 on host 127.0.0.1 - nrepl://127.0.0.1:33211
REPL-y 0.4.4, nREPL 0.7.0
Clojure 1.10.1
OpenJDK 64-Bit Server VM 1.8.0_191-b12
    Docs: (doc function-name-here)
          (find-doc "part-of-name-here")
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e

priority-map-1.core=>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
priority-map-1.core=> (doc hash-map)
-------------------------
clojure.core/hash-map
([] [& keyvals])
  keyval => key val
  Returns a new hash map with supplied mappings.  If any keys are
  equal, they are handled as if by repeated uses of assoc.
</pre>

priority-map-1.core=> (def p1 (hash-map :a 2 :b 1 :c 3 :d 5 :e 4 :f 3 :g 0 :h 10 :i 6 :j 7))
#'priority-map-1.core/p1

priority-map-1.core=> p1
{:a 2 :b 1 :c 3 :d 5 :e 4 :f 3 :g 0 :h 10 :i 6 :j 7}

priority-map-1.core=> (keys p1)
(:e :g :c :j :h :b :d :f :i :a)

priority-map-1.core=> (doseq [[key val] p1] (println key val))
:e 4
:g 0
:c 3
:j 7
:h 10
:b 1
:d 5
:f 3
:i 6
:a 2

priority-map-1.core=> (def p1r (hash-map :j 2 :i 1 :h 3 :g 5 :f 4 :e 3 :d 0 :c 10 :b 6 :a 7))
#'priority-map-1.core/p1r

priority-map-1.core=> p1r
{:a 7 :b 6 :c 10 :d 0 :e 3 :f 4 :g 5 :h 3 :i 1 :j 2}

priority-map-1.core=> (keys p1r)
(:e :g :c :j :h :b :d :f :i :a)

priority-map-1.core=> (doseq [[key val] p1r] (println key val))
:e 3
:g 5
:c 10
:j 2
:h 3
:b 6
:d 0
:f 4
:i 1
:a 7

priority-map-1.core=> (def p1e (hash-map))
#'priority-map-1.core/p1e

priority-map-1.core=> p1e
{}



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

priority-map-1.core=> (doc sorted-map)
-------------------------
clojure.core/sorted-map
([& keyvals])
  keyval => key val
  Returns a new sorted map with supplied mappings.  If any keys are
  equal, they are handled as if by repeated uses of assoc.
nil

priority-map-1.core=> (def p2 (sorted-map :a 2 :b 1 :c 3 :d 5 :e 4 :f 3 :g 0 :h 10 :i 6 :j 7))
#'priority-map-1.core/p2

priority-map-1.core=> (keys p2)
(:a :b :c :d :e :f :g :h :i :j)

priority-map-1.core=> p2
{:a 2 :b 1 :c 3 :d 5 :e 4 :f 3 :g 0 :h 10 :i 6 :j 7}

priority-map-1.core=> (doseq [[key val] p2] (println key val))
:a 2
:b 1
:c 3
:d 5
:e 4
:f 3
:g 0
:h 10
:i 6
:j 7

priority-map-1.core=> (def p2r (sorted-map :j 2 :i 1 :h 3 :g 5 :f 4 :e 3 :d 0 :c 10 :b 6 :a 7))
#'priority-map-1.core/p2r

priority-map-1.core=> p2r
{:a 7 :b 6 :c 10 :d 0 :e 3 :f 4 :g 5 :h 3 :i 1 :j 2}

priority-map-1.core=> (keys p2r)
(:a :b :c :d :e :f :g :h :i :j)

priority-map-1.core=> (doseq [[key val] p2r] (println key val))
:a 7
:b 6
:c 10
:d 0
:e 3
:f 4
:g 5
:h 3
:i 1
:j 2

priority-map-1.core=> (def p2e (sorted-map))
#'priority-map-1.core/p2e

priority-map-1.core=> p2e
{}

priority-map-1.core=> (sorted-map-by (comparator <) 0 :a 1 :b 2 :c)
{0 :a 1 :b 2 :c}

priority-map-1.core=> (sorted-map-by (comparator >) 0 :a 1 :b 2 :c)
{2 :c 1 :b 0 :a}



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

priority-map-1.core=> (doc array-map)
-------------------------
clojure.core/array-map
([] [& keyvals])
  Constructs an array-map. If any keys are equal, they are handled as
  if by repeated uses of assoc.

priority-map-1.core=> (def p3 (array-map :a 2 :b 1 :c 3 :d 5 :e 4 :f 3 :g 0 :h 10 :i 6 :j 7))
#'priority-map-1.core/p3

priority-map-1.core=> p3
{:a 2 :b 1 :c 3 :d 5 :e 4 :f 3 :g 0 :h 10 :i 6 :j 7}

priority-map-1.core=> (keys p3)
(:a :b :c :d :e :f :g :h :i :j)

priority-map-1.core=> (def p3r (array-map :j 2 :i 1 :h 3 :g 5 :f 4 :e 3 :d 0 :c 10 :b 6 :a 7))
#'priority-map-1.core/p3r

priority-map-1.core=> p3r
{:a 7 :b 6 :c 10 :d 0 :e 3 :f 4 :g 5 :h 3 :i 1 :j 2}

priority-map-1.core=> (keys p3r)
(:j :i :h :g :f :e :d :c :b :a)

priority-map-1.core=> (doseq [[key val] p3r] (println key val))
:j 2
:i 1
:h 3
:g 5
:f 4
:e 3
:d 0
:c 10
:b 6
:a 7



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

priority-map-1.core=> (doc priority-map)
-------------------------
clojure.data.priority-map/priority-map
([& keyvals])
  Usage: (priority-map key val key val ...)
  Returns a new priority map with optional supplied mappings.
  (priority-map) returns an empty priority map.

priority-map-1.core=> (def p4 (priority-map :a 2 :b 1 :c 3 :d 5 :e 4 :f 3 :g 0 :h 10 :i 6 :j 7))
#'priority-map-1.core/p4

priority-map-1.core=> p4
{:g 0 :b 1 :a 2 :c 3 :f 3 :e 4 :d 5 :i 6 :j 7 :h 10}

priority-map-1.core=> (def p4r (priority-map :j 2 :i 1 :h 3 :g 5 :f 4 :e 3 :d 0 :c 10 :b 6 :a 7))
#'priority-map-1.core/p4r

priority-map-1.core=> p4r
{:d 0 :i 1 :j 2 :e 3 :h 3 :f 4 :g 5 :b 6 :a 7 :c 10}

priority-map-1.core=> (def p4e (priority-map))
#'priority-map-1.core/p4e

priority-map-1.core=> p4e
{}



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>data.priority-map API Reference<br />
<a href="https://clojure.github.io/data.priority-map/">https://clojure.github.io/data.priority-map/</a>
</li>

<li>Clojure Data Structures<br />
<a href="https://clojure.org/reference/data_structures">https://clojure.org/reference/data_structures</a>
</li>

<li>hash-map<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/hash-map">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/hash-map</a>
</li>

<li>sorted-map<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/sorted-map">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/sorted-map</a>
</li>

array-map
https://clojuredocs.org/clojure.core/array-map

<li>Clojure Hashmaps Explained: How to Retrieve Values From and Update Hashmaps<br />
<a href="https://www.freecodecamp.org/news/clojure-hashmaps-explained-how-to-retrieve-values-from-and-update-hashmaps/">https://www.freecodecamp.org/news/clojure-hashmaps-explained-how-to-retrieve-values-from-and-update-hashmaps/</a>
</li>

Clojure Data Structures Tutorial
https://purelyfunctional.tv/guide/clojure-collections/

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

