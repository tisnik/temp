<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
        "olympos.io/encoding/edn"
)
&nbsp;
func <strong>main</strong>() {
        var a int8 = -10
        var b int16 = -1000
        var c int32 = -10000
        var d int32 = -1000000

        var r1 rune = 'a'
        var r2 rune = '\x40'
        var r3 rune = '\n'
        var r4 rune = '\u03BB'

        aEDN, _ := edn.Marshal(a)
        fmt.Println(string(aEDN))

        bEDN, _ := edn.Marshal(b)
        fmt.Println(string(bEDN))

        cEDN, _ := edn.Marshal(c)
        fmt.Println(string(cEDN))

        dEDN, _ := edn.Marshal(d)
        fmt.Println(string(dEDN))

        fmt.Println()

        r1EDN, _ := edn.Marshal(r1)
        fmt.Println(string(r1EDN))

        r2EDN, _ := edn.Marshal(r2)
        fmt.Println(string(r2EDN))

        r3EDN, _ := edn.Marshal(r3)
        fmt.Println(string(r3EDN))

        r4EDN, _ := edn.Marshal(r4)
        fmt.Println(string(r4EDN))
}
</pre>

<pre>
package <strong>main</strong>

import (
        "fmt"
        "olympos.io/encoding/edn"
)

func <strong>main</strong>() {
        var b8 byte = 0x42
        var a uint8 = 10
        var b uint16 = 1000
        var c uint32 = 10000
        var d uint32 = 1000000

        b8EDN, _ := edn.Marshal(b8)
        fmt.Println(string(b8EDN))

        aEDN, _ := edn.Marshal(a)
        fmt.Println(string(aEDN))

        bEDN, _ := edn.Marshal(b)
        fmt.Println(string(bEDN))

        cEDN, _ := edn.Marshal(c)
        fmt.Println(string(cEDN))

        dEDN, _ := edn.Marshal(d)
        fmt.Println(string(dEDN))
}
</pre>

<pre>
package <strong>main</strong>

import (
        "fmt"
        "olympos.io/encoding/edn"
)

func <strong>main</strong>() {
        var a complex64 = -1.5 + 0i
        var b complex64 = 1.5 + 1000i
        var c complex64 = 1e30 + 1e30i
        var d complex64 = 1i

        aEDN, _ := edn.Marshal(a)
        fmt.Println(string(aEDN))

        bEDN, _ := edn.Marshal(b)
        fmt.Println(string(bEDN))

        cEDN, _ := edn.Marshal(c)
        fmt.Println(string(cEDN))

        dEDN, _ := edn.Marshal(d)
        fmt.Println(string(dEDN))
}
</pre>

<pre>
package <strong>main</strong>

import (
        "fmt"
        "olympos.io/encoding/edn"
)

func <strong>main</strong>() {
        var a interface{} = nil
        b := "foo bar baz"

        aEDN, _ := edn.Marshal(a)
        fmt.Println(string(aEDN))

        bEDN, _ := edn.Marshal(b)
        fmt.Println(string(bEDN))
}
</pre>

<pre>
package <strong>main</strong>

import (
        "fmt"
        "olympos.io/encoding/edn"
)

func <strong>main</strong>() {
        var a1 [10]byte
        var a2 [10]int32
        a3 := [10]int32{1, 10, 2, 9, 3, 8, 4, 7, 5, 6}
        a4 := []string{"www", "root", "cz"}
        a5 := []interface{}{1, "root", 3.1415, true, []int{1, 2, 3, 4}}

        matice := [4][3]float32{
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9},
                {0, -1, 0},
        }

        a1EDN, _ := edn.MarshalPPrint(a1, nil)
        fmt.Println(string(a1EDN))
        fmt.Println()

        a2EDN, _ := edn.MarshalPPrint(a2, nil)
        fmt.Println(string(a2EDN))
        fmt.Println()

        a3EDN, _ := edn.MarshalPPrint(a3, nil)
        fmt.Println(string(a3EDN))
        fmt.Println()

        a4EDN, _ := edn.MarshalPPrint(a4, nil)
        fmt.Println(string(a4EDN))
        fmt.Println()

        a5EDN, _ := edn.MarshalPPrint(a5, nil)
        fmt.Println(string(a5EDN))
        fmt.Println()

        maticeEDN, _ := edn.MarshalPPrint(matice, nil)
        fmt.Println(string(maticeEDN))
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
package <strong>main</strong>

import (
        "fmt"
        "olympos.io/encoding/edn"
)

<i>// User1 je uživatelsky definovaná datová struktura s privátními atributy</i>
type <strong>User1</strong> struct {
        id      uint32
        name    string
        surname string
}

<i>// User2 je uživatelsky definovaná datová struktura s viditelnými atributy</i>
type <strong>User2</strong> struct {
        ID      uint32
        Name    string
        Surname string
}

func <strong>main</strong>() {
        user1 := User1{
                1,
                "Pepek",
                "Vyskoč"}

        user2 := User2{
                1,
                "Pepek",
                "Vyskoč"}

        fmt.Println("user1")
        user1EDN, _ := edn.Marshal(user1)
        fmt.Println(string(user1EDN))

        fmt.Println()
        user1PrettyEDN, _ := edn.MarshalPPrint(user1, nil)
        fmt.Println(string(user1PrettyEDN))
        fmt.Println()

        fmt.Println("user2")
        user2EDN, _ := edn.Marshal(user2)
        fmt.Println(string(user2EDN))

        fmt.Println()
        user2PrettyEDN, _ := edn.MarshalPPrint(user2, nil)
        fmt.Println(string(user2PrettyEDN))
        fmt.Println()
}
</pre>

<pre>
package <strong>main</strong>

import (
        "fmt"
        "olympos.io/encoding/edn"
)

<i>// User3 je uživatelsky definovaná datová struktura s viditelnými atributy</i>
type <strong>User3</strong> struct {
        ID      uint32 `edn:"id"`
        Name    string `edn:"user-name"`
        Surname string `edn:"surname"`
}

func <strong>main</strong>() {
        user3 := User3{
                1,
                "Pepek",
                "Vyskoč"}

        fmt.Println("user3")
        user3EDN, _ := edn.Marshal(user3)
        fmt.Println(string(user3EDN))
        fmt.Println()

        user3PrettyEDN, _ := edn.MarshalPPrint(user3, nil)
        fmt.Println(string(user3PrettyEDN))
        fmt.Println()
}
</pre>

<pre>
package <strong>main</strong>

import (
        "fmt"
        "olympos.io/encoding/edn"
)

<i>// User3 je uživatelsky definovaná datová struktura s viditelnými atributy</i>
type <strong>User3</strong> struct {
        ID      uint32 `edn:"id"`
        Name    string `edn:"user-name"`
        Surname string `edn:"surname"`
}

func <strong>main</strong>() {
        var users = [3]User3{
                User3{
                        ID:      1,
                        Name:    "Pepek",
                        Surname: "Vyskoč"},
                User3{
                        ID:      2,
                        Name:    "Pepek",
                        Surname: "Vyskoč"},
                User3{
                        ID:      3,
                        Name:    "Josef",
                        Surname: "Vyskočil"},
        }

        fmt.Println("users")
        usersEDN, _ := edn.Marshal(users)
        fmt.Println(string(usersEDN))
        fmt.Println()

        usersPrettyEDN, _ := edn.MarshalPPrint(users, nil)
        fmt.Println(string(usersPrettyEDN))
        fmt.Println()
}
</pre>

<pre>
package <strong>main</strong>

import (
        "fmt"
        "olympos.io/encoding/edn"
)

<i>// User3 je uživatelsky definovaná datová struktura s viditelnými atributy</i>
type <strong>User3</strong> struct {
        ID      uint32 `edn:"id"`
        Name    string `edn:"user-name"`
        Surname string `edn:"surname"`
}

func <strong>main</strong>() {
        m1 := make(map[string]User3)

        m1["user-id-1"] = User3{
                ID:      1,
                Name:    "Pepek",
                Surname: "Vyskoč"}

        m1["user-id-3"] = User3{
                ID:      2,
                Name:    "Josef",
                Surname: "Vyskočil"}

        fmt.Println("users map")
        usersMapEDN, _ := edn.Marshal(m1)
        fmt.Println(string(usersMapEDN))
        fmt.Println()
        usersPrettyEDN, _ := edn.MarshalPPrint(m1, nil)
        fmt.Println(string(usersPrettyEDN))
        fmt.Println()
}
</pre>


<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech <a href="">minule</a> i dnes popsaných demonstračních příkladů vyvinutých
v&nbsp;programovacích jazycích Clojure, Python i Go, byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>:</p>

<table>
<tr><th> #</th><th>Zdrojový kód</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td> 1</td><td>json2edn.py</td><td>konverze mezi formátem JSON a EDN naprogramovaná v&nbsp;Pythonu</td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/json2edn.py">https://github.com/tisnik/presentations/blob/master/edn/json2edn.py</a></td></tr>
<tr><td> 2</td><td>edn2json.py</td><td>konverze mezi formátem EDN a JSON naprogramovaná v&nbsp;Pythonu</td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/edn2json.py">https://github.com/tisnik/presentations/blob/master/edn/edn2json.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>json2edn (adresář)</td><td>konverze mezi formátem JSON a EDN naprogramovaná v&nbsp;Clojure</td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/json2edn">https://github.com/tisnik/presentations/blob/master/edn/json2edn</a></td></tr>
<tr><td> 4</td><td>edn2json (adresář)</td><td>konverze mezi formátem EDN a JSON naprogramovaná v&nbsp;Clojure</td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/edn2json">https://github.com/tisnik/presentations/blob/master/edn/edn2json</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>properties2edn (adresář)</td><td>konverze mezi .properties souborem a formátem EDN (Clojure)</td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/properties2edn">https://github.com/tisnik/presentations/blob/master/edn/properties2edn</a></td></tr>
<tr><td> 4</td><td>xml2edn (adresář)</td><td>konverze mezi XML a formátem EDN (Clojure, plná konverze)</td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/xml2edn">https://github.com/tisnik/presentations/blob/master/edn/xml2edn</a></td></tr>
<tr><td> 5</td><td>forest-demo (adresář)</td><td>různé možnosti konverze mezi XML a formátem EDN</td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/forest-demo">https://github.com/tisnik/presentations/blob/master/edn/forest-demo</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>go-edn-1 (adresář)</td><td>serializace (marshalling) datové struktury do formátu EDN</td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/go-edn-1">https://github.com/tisnik/presentations/blob/master/edn/go-edn-1</a></td></tr>
<tr><td> 7</td><td>go-edn-2 (adresář)</td><td>specifikace názvů klíčů v&nbsp;EDN formátu</td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/go-edn-2">https://github.com/tisnik/presentations/blob/master/edn/go-edn-2</a></td></tr>
<tr><td> 8</td><td>go-edn-3 (adresář)</td><td>uložení pole datových struktur do formátu EDN</td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/go-edn-3">https://github.com/tisnik/presentations/blob/master/edn/go-edn-3</a></td></tr>
<tr><td> 9</td><td>go-edn-4 (adresář)</td><td>uložení mapy datových struktur do formátu EDN</td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/go-edn-4">https://github.com/tisnik/presentations/blob/master/edn/go-edn-4</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>go-edn-5 (adresář)</td><td>deserializace (unmarshalling) datové struktury z&nbsp;formátu EDN</td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/go-edn-5">https://github.com/tisnik/presentations/blob/master/edn/go-edn-5</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>edn &ndash; extensible data notation<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Programming with Data and EDN<br />
<a href="https://docs.datomic.com/cloud/whatis/edn.html">https://docs.datomic.com/cloud/whatis/edn.html</a>
</li>

<li>Video about EDN<br />
<a href="https://docs.datomic.com/cloud/livetutorial/edntutorial.html">https://docs.datomic.com/cloud/livetutorial/edntutorial.html</a>
</li>

<li>(Same) video about EDN on Youtube<br />
<a href="https://www.youtube.com/watch?v=5eKgRcvEJxU">https://www.youtube.com/watch?v=5eKgRcvEJxU</a>
</li>

<li>clojure.edn<br />
<a href="https://clojuredocs.org/clojure.edn">https://clojuredocs.org/clojure.edn</a>
</li>

<li>API for clojure.edn - Clojure v1.10.2 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.edn-api.html">https://clojure.github.io/clojure/clojure.edn-api.html</a>
</li>

<li>Clojure EDN Walkthrough<br />
<a href="https://www.compoundtheory.com/clojure-edn-walkthrough/">https://www.compoundtheory.com/clojure-edn-walkthrough/</a>
</li>

<li>Články týkající se Pythonu na Rootu<br />
<a href="https://www.root.cz/n/python/">https://www.root.cz/n/python/</a>
</li>

<li>Články týkající se programovacího jazyka Clojure na Rootu<br />
<a href="https://www.root.cz/n/clojure/">https://www.root.cz/n/clojure/</a>
</li>

<li>Seriál Programovací jazyk Go<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-go/">https://www.root.cz/serialy/programovaci-jazyk-go/</a>
</li>

<li>Crux<br />
<a href="https://opencrux.com/main/index.html">https://opencrux.com/main/index.html</a>
</li>

<li>Crux Installation<br />
<a href="https://opencrux.com/reference/21.04-1.16.0/installation.html">https://opencrux.com/reference/21.04-1.16.0/installation.html</a>
</li>

<li>read<br />
<a href="https://clojuredocs.org/clojure.edn/read">https://clojuredocs.org/clojure.edn/read</a>
</li>

<li>read-string<br />
<a href="https://clojuredocs.org/clojure.edn/read-string">https://clojuredocs.org/clojure.edn/read-string</a>
</li>

<li>Tupelo 21.04.12 (dokumentace)<br />
<a href="https://cloojure.github.io/doc/tupelo/">https://cloojure.github.io/doc/tupelo/</a>
</li>

<li>tupelo - Clojure With A Spoonful of Honey<br />
<a href="https://clojars.org/tupelo">https://clojars.org/tupelo</a>
</li>

<li>Clojure Cookbook: Templating HTML with Enlive<br />
<a href="https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc">https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc</a>
</li>

<li>An Introduction to Enlive<br />
<a href="https://github.com/swannodette/enlive-tutorial/">https://github.com/swannodette/enlive-tutorial/</a>
</li>

<li>Enlive na GitHubu<br />
<a href="https://github.com/cgrand/enlive">https://github.com/cgrand/enlive</a>
</li>

<li>data.json<br />
<a href="https://github.com/clojure/data.json">https://github.com/clojure/data.json</a>
</li>

<li>data.json API reference<br />
<a href="https://clojure.github.io/data.json/">https://clojure.github.io/data.json/</a>
</li>

<li>Clojure: Writing JSON to a File/Reading JSON From a File<br />
<a href="https://dzone.com/articles/clojure-writing-json">https://dzone.com/articles/clojure-writing-json</a>
</li>

<li>How to pretty print JSON to a file in Clojure?<br />
<a href="https://stackoverflow.com/questions/23307552/how-to-pretty-print-json-to-a-file-in-clojure">https://stackoverflow.com/questions/23307552/how-to-pretty-print-json-to-a-file-in-clojure</a>
</li>

<li>go-edn / edn<br />
<a href="https://github.com/go-edn/edn">https://github.com/go-edn/edn</a>
</li>

<li>Queries (Crux)<br />
<a href="https://opencrux.com/reference/21.04-1.16.0/queries.html">https://opencrux.com/reference/21.04-1.16.0/queries.html</a>
</li>

<li>Essential EDN<br />
<a href="https://opencrux.com/tutorials/essential-edn.html">https://opencrux.com/tutorials/essential-edn.html</a>
</li>

<li>Babashka: interpret Clojure určený pro rychlé spouštění utilit z příkazového řádku<br />
<a href="https://www.root.cz/clanky/babashka-interpret-clojure-urceny-pro-rychle-spousteni-utilit-z-prikazoveho-radku/">https://www.root.cz/clanky/babashka-interpret-clojure-urceny-pro-rychle-spousteni-utilit-z-prikazoveho-radku/</a>
</li>

<li>Introducing JSON<br />
<a href="https://www.json.org/json-en.html">https://www.json.org/json-en.html</a>
</li>

<li>ISO 8601<br />
<a href="https://xkcd.com/1179/">https://xkcd.com/1179/</a>
</li>

<li>What is the right JSON date format<br />
<a href="https://stackoverflow.com/questions/10286204/what-is-the-right-json-date-format">https://stackoverflow.com/questions/10286204/what-is-the-right-json-date-format</a>
</li>

<li>ClojureScript REPL<br />
<a href="https://clojurescript.io/">https://clojurescript.io/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

