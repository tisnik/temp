<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o programovacím jazyku Clojure i o knihovnách, které mohou programátoři pracující v Clojure využít, budeme pokračovat v popisu knihovny Clisk. Zabývat se budeme pokročilejšími funkcemi nabízenými touto knihovnou: zejména funkcí pro vykreslování obecných fraktálů a Perlinovým šumem.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)</a></p>
<p><a href="#k02">2. Perlinova šumová funkce</a></p>
<p><a href="#k03">3. Funkce <strong>vnoise</strong>, <strong>vsnoise</strong> a Perlinův šum</a></p>
<p><a href="#k04">4. Úplný zdrojový kód demonstračního příkladu <strong>clisktest4</strong></a></p>
<p><a href="#k05">5. Podpora pro vykreslování fraktálů</a></p>
<p><a href="#k06">6. Mandelbrotova množina</a></p>
<p><a href="#k07">7. Kubická Mandelbrotova množina</a></p>
<p><a href="#k08">8. Úplný zdrojový kód demonstračního příkladu <strong>clisktest5</strong></a</p>
<p><a href="#k09">9. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k10">10. Odkazy na předchozí části seriálu</a></p>
<p><a href="#k11">11. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)</h2>

<p>V&nbsp;dnešní části seriálu, v&nbsp;němž se zabýváme různými obvyklými i
poněkud neobvyklými aspekty programovacího jazyka <i>Clojure</i> a taktéž
knihovnami, které mohou programátoři pracující v&nbsp;jazyku Clojure použít,
dokončíme popis knihovny <i>Clisk</i>. Tato knihovna mj.&nbsp;podporuje tvorbu
textur s&nbsp;využitím takzvané Perlinovy šumové funkce, která má
v&nbsp;počítačové grafice široké možnosti využití, a to jak pro tvorbu běžných
dvourozměrných textur, tak i textur trojrozměrných (volumetrických) či
čtyřrozměrných (animované mraky atd.). <a href="#k02">Ve druhé kapitole</a> si
popíšeme princip této funkce, její konkrétní využití je naznačeno <a
href="#k03">v&nbsp;kapitole třetí</a>. V&nbsp;navazujících kapitolách bude
zmíněna možnost využití <a href="#k05">fraktálů</a> pro tvorbu textur, následně
(ale až v&nbsp;příští části) si popíšeme již existující (předdefinované)
textury a nakonec si ukážeme jeden ze způsobů využití Voroného diagramů při
vytváření uživatelsky definovaných textur.</p>

<img src="http://i.iinfo.cz/urs/fractals72_1-117405950588023.png" alt="&#160;" />
<p><i>Obrázek 1: Perlinova šumová funkce použitá při generování dvourozměrných
textur. Pro vytvoření tohoto obrázku byla použita barvová paleta mapující
výsledné hodnoty z&nbsp;rozsahu 0 až 1 na vybraných 256 barev.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Perlinova šumová funkce</h2>

<p>Perlinova šumová funkce (<i>Perlin noise (function)</i>) byla s&nbsp;velkým
úspěchem použita v&nbsp;mnoha aplikacích počítačové grafiky; například
prakticky každý film, ve kterém je využita renderovaná grafika (CG), tuto
funkci nějakým způsobem použil. Její úspěch spočívá v&nbsp;tom, že se pomocí ní
dají do původně přesných a &bdquo;počítačově chladných&ldquo; modelů vnést
náhodné prvky, takže se model či celá vytvářená scéna více přiblíží realitě.
Podobný princip vnesení náhodnosti ostatně umožňují i fraktály, zejména ty
vytvářené na stochastickém základě (<i>plasma</i>, <i>stochastické
L-systémy</i> apod.). Ken Perlin svoji šumovou funkci navrhl už v&nbsp;roce
1983, v&nbsp;roce 1985 o její aplikaci vznikl článek prezentovaný na SIGGRAPHu
(jedna z&nbsp;nejvýznamnějších konferencí počítačové grafiky) a v&nbsp;letech
1986 až 1988 tuto funkci s&nbsp;některými modifikacemi používaly takové firmy,
jako Pixar, Alias, SoftImage apod. Dnes ji mj.&nbsp;najdeme například i
v&nbsp;raytraceru <i>POVRay</i>.</p>

<img src="http://i.iinfo.cz/urs/fractals72_2-117405952155668.png" alt="&#160;" />
<p><i>Obrázek 2: Aplikace Perlinovy šumové funkce při tvorbě trojrozměrných
(volumetrických) textur. Povšimněte si, že nikde nedochází k&nbsp;tvorbě
&bdquo;polů&ldquo;, které by byly při použití běžné dvourozměrné textury jasně
viditelné.</i></p>

<p>Při tvorbě textur, které by měly reprezentovat přírodní vzorky jako je
mramor, dřevo či mraky, není možné použít ani klasický generátor
pseudonáhodných čísel RNG (tím je myšlena například funkce <i>rand()</i> ze
standardní céčkové knihovny), ale ani základní matematické funkce.
V&nbsp;minulosti byly prováděny pokusy o využití goniometrických funkcí, které
posléze vyústily v&nbsp;úspěšnou metodu generování <i>plasmy</i> pomocí
Fourierovy syntézy. Při přímé aplikaci generátorů pseudonáhodných čísel sice
získáme šum, ten je však příliš náhodný a vůbec se nehodí pro generování
textur, a to ani po své filtraci. Perlin pro účely vytváření přírodních textur
navrhl výpočet, který sice využívá generátor pseudonáhodných čísel, ale mezi
jednotlivými vypočtenými náhodnými hodnotami je prováděna interpolace, která
výsledný průběh funkce vyhladí, takže se již nebude jednat o zcela náhodný šum.
Pro vyhlazení je možné použít velké množství matematických funkcí, od
jednoduché lineární interpolace přes kvadratické a kubické funkce až po funkce
goniometrické a jejich vzájemné kombinace.</p>

<img src="http://i.iinfo.cz/urs/fractals72_3-preview-117405953591304.png" alt="&#160;" />
<p><i>Obrázek 3: Jednorozměrná Perlinova šumová funkce s&nbsp;parametry
alpha=2, beta=2, n=10. Změnou těchto parametrů je možné řídit vyhlazování
průběhu, četnost změn apod.</i></p>

<p>Dvourozměrný Perlinův šum je vypočten prakticky stejným způsobem jako šum
jednorozměrný. Jediný podstatný rozdíl spočívá v&nbsp;tom, že se interpolace
provádí ve dvou směrech a výsledek této interpolace je sečten. V&nbsp;praxi se
opět používá součet několika šumových funkcí s&nbsp;klesající amplitudou a
rostoucí &bdquo;frekvencí&ldquo;. Dvourozměrné textury však mají pro použití
v&nbsp;praxi několik vážných nevýhod, z&nbsp;nichž největší nevýhoda spočívá
v&nbsp;obtížném mapování na nerovné povrchy. Například mapování obdélníkové
dvourozměrné textury na kouli vede k&nbsp;tomu, že se textura na pólech smrští
a naopak na rovníku příliš roztáhne. Výsledek je většinou neuspokojivý, zvláště
při aplikaci šumové funkce (ta by měla být směrově invariantní). Přechodem
k&nbsp;výpočtům 3D (volumetrických) textur se tohoto problému zbavíme (viz
obrázek číslo 2, protože pro každý bod v&nbsp;prostoru je možné zjistit hodnotu
šumu bez nutnosti mapování.</p>

<img src="http://i.iinfo.cz/urs/fractals72_a-117405965495792.png" alt="&#160;" />
<p><i>Obrázek 4: Aplikace dvourozměrné Perlinovy šumové funkce s&nbsp;parametry
alpha=2, beta=2, n=10. Opět je použita barevná paleta.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Funkce <strong>vnoise</strong>, <strong>vsnoise</strong> a Perlinův šum</h2>

<p>V&nbsp;knihovně <i>Clisk</i> je Perlinova šumová funkce implementována ve
funkcích nazvaných <strong>vnoise</strong> a <strong>vsnoise</strong>.
Počáteční písmeno těchto funkcí naznačuje, že výsledkem výpočtu je vektor, a to
konkrétně čtyřrozměrný vektor. V&nbsp;případě funkce <strong>vnoise</strong>
mohou jednotlivé složky vektoru nabývat hodnot z&nbsp;rozsahu 0 až 1, u funkce
<strong>vsnoise</strong> je pak rozsah rozšířen na -1 až 1 (což zjednodušuje
některé výpočty). To znamená, že funkce <strong>vnoise</strong> a
<strong>vsnoise</strong> je možné použít jak pro generování dvourozměrných
textur (což si ukážeme v&nbsp;demonstračním příkladu), tak i pro tvorbu
trojrozměrných (volumetrických) textur. V&nbsp;případě dvourozměrných textur je
návratová hodnota použita pro určení barvových složek <i>red</i>, <i>green</i>
a <i>blue</i>, pro vytvoření monochromatické textury lze použít funkci
<strong>monochrome</strong>. Podívejme se na jednoduchý příklad použití
Perlinovy funkce v&nbsp;praxi:</p>

<pre>
(defn <strong>noise-patterns-test</strong>
    <i>"Otestování funkce vnoise a vsnoise."</i>
    [noise-function filename-prefix]
    (let [patterns [noise-function
                    (monochrome noise-function)
                    (scale 1/10 noise-function)
                    (monochrome (scale 1/10 noise-function))
                    (v- (v* 5 noise-function) 1)
                    (scale 1/4 (offset noise-function (checker yellow blue)))
                    (scale 1/4 (offset (v* 1/5 noise-function) (checker yellow blue)))
                    (scale 1/4 (offset (v* 1/2 noise-function) (checker yellow blue)))
                    (scale 1/4 (offset (v* 2 noise-function)   (checker yellow blue)))
                    (scale 1/4 (offset (v* 5 noise-function)   (checker yellow blue)))
                    (scale 1/4 (rotate (v* 5 noise-function)   (checker yellow blue)))
                    (scale 1/4 (rotate (v* 5 noise-function)   (offset (v* 5 noise-function) (checker yellow blue))))
                    ]]
        <i>; postupně projít všemi prvky vektoru "patterns", vytvořit</i>
        <i>; dvouprvkový vektor [index+patter], vytvořit jméno výstupního</i>
        <i>; souboru a následně zavolat funkci write-pattern</i>
        (doseq [ [i pattern] (map-indexed vector patterns)]
            (write-pattern pattern (construct-filename filename-prefix i)))))
&nbsp;
(println "Vnoise test...")
(noise-patterns-test vnoise "vnoise")
(println "Done")
(println "Vsnoise test...")
(noise-patterns-test vsnoise "vsnoise")
</pre>

<img src="http://i.iinfo.cz/images/48/clisk2-1.png" class="image-207752" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 5: Textura vytvořená s&nbsp;využitím výrazu
<strong>vnoise-function</strong>. Pro každý pixel textury je vypočten vektor
převedený na barvu (složky vektoru odpovídají barvovým složkám red, green a
blue).</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-2.png" class="image-207753" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 6: Textura vytvořená s&nbsp;využitím výrazu <strong>(monochrome
vnoise-function)</strong>. Funkce <strong>monochrome</strong> slouží
k&nbsp;převodu z&nbsp;prostoru RGB na stupně šedi (monochromatický
obrázek).</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-3.png" class="image-207754" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 7: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/10
vnoise-function)</strong>. Funkce <strong>scale</strong> zde provádí změnu
měřítka (samozřejmě bez ztráty kvality).</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-4.png" class="image-207755" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 8: Textura vytvořená s&nbsp;využitím výrazu <strong>(monochrome
(scale 1/10 vnoise-function))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-5.png" class="image-207756" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 9: Textura vytvořená s&nbsp;využitím výrazu <strong>(v- (v* 5
vnoise-function) 1)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-6.png" class="image-207757" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 10: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/4
(offset vnoise-function (checker yellow blue)))</strong>. Perlinův šum je zde
použit nepřímo pro změnu souřadnic bodů, které tvoří vstup do funkce
<strong>checker</strong>).</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-7.png" class="image-207758" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 11: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/4
(offset (v* 1/5 vnoise-function) (checker yellow blue)))</strong>. Zmenšení
amplitudy posunu bodů.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-8.png" class="image-207759" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 12: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/4
(offset (v* 1/2 vnoise-function) (checker yellow blue)))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-9.png" class="image-207760" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 13: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/4
(offset (v* 2 vnoise-function)   (checker yellow blue)))</strong>. Zvětšení
amplitudy posunu bodů.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-10.png" class="image-207761" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 14: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/4
(offset (v* 5 vnoise-function)   (checker yellow blue)))</strong>. Zvětšení
amplitudy posunu bodů.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-11.png" class="image-207762" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 15: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/4
(rotate (v* 5 vnoise-function)   (checker yellow blue)))</strong>. 3D rotace
v&nbsp;RGB prostoru.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-12.png" class="image-207763" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 16: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/4
(rotate (v* 5 vnoise-function)   (offset (v* 5 vnoise-function) (checker yellow
blue))))</strong></i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-13.png" class="image-207764" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 17: Textura vytvořená s&nbsp;využitím výrazu
<strong>vsnoise-function</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-14.png" class="image-207765" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 18: Textura vytvořená s&nbsp;využitím výrazu <strong>(monochrome
vsnoise-function)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-15.png" class="image-207766" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 19: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/10
vsnoise-function)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-16.png" class="image-207767" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 20: Textura vytvořená s&nbsp;využitím výrazu <strong>(monochrome
(scale 1/10 vsnoise-function))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-17.png" class="image-207768" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 21: Textura vytvořená s&nbsp;využitím výrazu <strong>(v- (v* 5
vsnoise-function) 1)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-18.png" class="image-207769" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 22: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/4
(offset vsnoise-function (checker yellow blue)))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-19.png" class="image-207770" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 23: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/4
(offset (v* 1/5 vsnoise-function) (checker yellow blue)))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-20.png" class="image-207771" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 24: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/4
(offset (v* 1/2 vsnoise-function) (checker yellow blue)))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-21.png" class="image-207772" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 25: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/4
(offset (v* 2 vsnoise-function)   (checker yellow blue)))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-22.png" class="image-207773" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 26: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/4
(offset (v* 5 vsnoise-function)   (checker yellow blue)))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-23.png" class="image-207774" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 27: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/4
(rotate (v* 5 vsnoise-function)   (checker yellow blue)))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/48/clisk2-24.png" class="image-207775" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 28: Textura vytvořená s&nbsp;využitím výrazu <strong>(scale 1/4
(rotate (v* 5 vsnoise-function)   (offset (v* 5 vsnoise-function) (checker yellow
blue))))</strong>.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Úplný zdrojový kód demonstračního příkladu <strong>clisktest4</strong></h2>

<p>V&nbsp;této kapitole bude uveden výpis úplného zdrojového kódu dnešního
prvního demonstračního příkladu nazvaného <strong>clisktest4</strong>,
z&nbsp;něhož jsme používali úryvky a ukázky <a href="#k03">v&nbsp;předchozí
kapitole</a>:</p>

<p>Obsah souboru <strong>project.clj</strong>:</p>

<pre>
(defproject <strong>clisktest2</strong> "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[net.mikera/clisk "0.10.0"]</strong>]
  :main ^:skip-aot clisktest4.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Obsah souboru <strong>core.clj</strong>:</p>

<pre>
(ns <strong>clisktest4.core</strong>
    (:gen-class)
    (:use clisk.live))
&nbsp;
(import java.io.File)
(import javax.imageio.ImageIO)
&nbsp;
(defn <strong>write-image</strong>
    <i>"Uložení rastrového obrázku typu BufferedImage do souboru."</i>
    [image file-name]
    (ImageIO/write image "png" (File. file-name)))
&nbsp;
(defn <strong>write-pattern</strong>
    <i>"Vytvoření rastrového obrázku na základě předaného patternu."</i>
    [pattern file-name]
    (write-image (image pattern) file-name))
&nbsp;
(defn <strong>construct-filename</strong>
    [filename-prefix index]
    (format "%s_%02d.png" filename-prefix index))
&nbsp;
(defn <strong>noise-patterns-test</strong>
    <i>"Otestování funkce vnoise a vsnoise."</i>
    [noise-function filename-prefix]
    (let [patterns [noise-function
                    (monochrome noise-function)
                    (scale 1/10 noise-function)
                    (monochrome (scale 1/10 noise-function))
                    (v- (v* 5 noise-function) 1)
                    (scale 1/4 (offset noise-function (checker yellow blue)))
                    (scale 1/4 (offset (v* 1/5 noise-function) (checker yellow blue)))
                    (scale 1/4 (offset (v* 1/2 noise-function) (checker yellow blue)))
                    (scale 1/4 (offset (v* 2 noise-function)   (checker yellow blue)))
                    (scale 1/4 (offset (v* 5 noise-function)   (checker yellow blue)))
                    (scale 1/4 (rotate (v* 5 noise-function)   (checker yellow blue)))
                    (scale 1/4 (rotate (v* 5 noise-function)   (offset (v* 5 noise-function) (checker yellow blue))))
                    ]]
        <i>; postupně projít všemi prvky vektoru "patterns", vytvořit</i>
        <i>; dvouprvkový vektor [index+patter], vytvořit jméno výstupního</i>
        <i>; souboru a následně zavolat funkci write-pattern</i>
        (doseq [ [i pattern] (map-indexed vector patterns)]
            (write-pattern pattern (construct-filename filename-prefix i)))))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (try
        (println "Vnoise test...")
        (noise-patterns-test vnoise "vnoise")
        (println "Done")
        (println "Vsnoise test...")
        (noise-patterns-test vsnoise "vsnoise")
        (println "Done")
        (catch Throwable e
            (println (.toString e)))
        (finally <i>; jistota, že program vždy korektně skončí</i>
            (System/exit 0))))
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Podpora pro vykreslování fraktálů</h2>

<p>V&nbsp;knihovně <i>Clisk</i> je podporováno i generování textur
s&nbsp;využitím fraktálů, přesněji řečeno takových fraktálů, které lze
vykreslit v&nbsp;rovině takovým způsobem, že se každému bodu
(popř.&nbsp;pixelu) přiřadí barva na základě počtu iterací nutných pro splnění
nějaké podmínky, přičemž vstupními informacemi pro výpočet je pozice bodu
v&nbsp;rovině nebo v&nbsp;prostoru, maximální počet iterací, podmínka pro
ukončení výpočtu a taktéž funkce použitá pro obarvení bodu. Do této kategorie
fraktálů spadají prakticky všechny známé fraktály vykreslované v&nbsp;komplexní
rovině, především pak <a
href="http://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xiii/">Mandelbrotova
množina</a>, <a
href="http://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xxiii/">Newtonova
množina</a>, fraktály typu <a
href="http://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xxviii/">Phonenix</a>,
<a
href="http://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xxvi/">Magnet</a>
apod. V&nbsp;navazujících dvou kapitolách si ukážeme použití knihovny
<i>Clisk</i> pro vykreslení klasické Mandelbrotovy množiny i kubické
Mandelbrotovy množiny.</p>

<img src="http://i.iinfo.cz/urs/fractals12_7-preview-113681920826543.jpg" alt="&#160;" />
<p><i>Obrázek 29: Mandelbrotova množina (zvětšeno).</i></p>

<img src="http://i.iinfo.cz/urs/fractals23_3-preview-114346472654933.png" alt="&#160;" />
<p><i>Obrázek 30: Newtonova množina.</i></p>

<img src="http://i.iinfo.cz/urs/fractals26_1-preview-114502557150271.png" alt="&#160;" />
<p><i>Obrázek 31: Fraktál typu Magnet.</i></p>

<img src="http://i.iinfo.cz/urs/fractals26_2-preview-114502559464017.png" alt="&#160;" />
<p><i>Obrázek 32: Fraktál typu Magnet (odlišný způsob zobrazení).</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Mandelbrotova množina</h2>

<p>Mandelbrotova množina je vytvořena pomocí jednoduchého dynamického systému,
který je založený na iteraci funkce komplexní paraboly:</p>

<p><i>z<sub>n+1</sub>=z<sub>n</sub><sup>2</sup>+c</i></p>

<p>kde proměnné <i>z</i> a <i>c</i> leží v&nbsp;komplexní rovině.</p>

<p>V&nbsp;průběhu výpočtu se hodnota <i>z</i> postupně mění, zatímco hodnota
<i>c</i> zůstává konstantní &ndash; tato se mění pouze při přesunu výpočtu na
nový bod. Celý iterační proces začíná s&nbsp;určitou startovní hodnotou
<i>z<sub>0</sub></i>, takže systém postupně generuje sekvenci hodnot
<i>z<sub>k</sub></i>, které nazýváme <i>orbit</i>. Postup si ukážeme na prvních
čtyřech iteracích:</p>

<p><i>
z<sub>1</sub>=(z<sub>0</sub>)<sup>2</sup>+c<br />
z<sub>2</sub>=((z<sub>0</sub>)<sup>2</sup>+c)<sup>2</sup>+c<br />
z<sub>3</sub>=(((z<sub>0</sub>)<sup>2</sup>+c)<sup>2</sup>+c)<sup>2</sup>+c<br />
z<sub>4</sub>=((((z<sub>0</sub>)<sup>2</sup>+c)<sup>2</sup>+c)<sup>2</sup>+c)<sup>2</sup>+c<br />
</i></p>

<p>Při práci se systémem popsaným v&nbsp;předchozím textu nás zajímá, zda pro
danou startovní hodnotu <i>z<sub>0</sub></i> a konstantu <i>c</i> posloupnost
<i>z<sub>k</sub></i> konverguje či diverguje. Ukazuje se, že pro některé
počáteční hodnoty nastává také oscilace - hodnoty <i>z<sub>k</sub></i> se
opakují s&nbsp;určitou periodou, to znamená, že platí rovnost
<i>z<sub>k</sub>=z<sub>k</sub>+i</i>, kde <i>i</i> je perioda oscilace. Bližším
studiem vlivu počátečních podmínek na budoucí stav systému se zabýval právě
Benoit B.&nbsp;Mandelbrot a před ním i Fatou.</p>

<p>Mandelbrot se omezit na případ, kdy počáteční hodnota <i>z<sub>0</sub></i>
je nulová a pro každý počítaný bod se mění pouze konstanta <i>c</i>.
Iterativním výpočtem vzniknou pouze <i>orbity nuly</i>. Orbity nuly lze podle
jejich vlastností rozdělit do dvou kategorií:</p>

<ol>

<li>Pro některé hodnoty <i>c</i> je orbit konečný, tzn.&nbsp;všechny hodnoty
<i>z<sub>k</sub></i> jsou konečné. Do této kategorie spadají také hodnoty,
které oscilují.</li>

<li>Pro další hodnoty <i>c</i> je orbit nekonečný, tzn.&nbsp;po určité době
rostou hodnoty <i>z<sub>k</sub></i> nade všechny meze.</li>

</ol>

<p>Mandelbrotova množina je poté definována jako množina všech komplexních
čísel <i>c</i>, které produkují konečný orbit nuly.</p>

<img src="http://i.iinfo.cz/images/48/clisk2-25.png" class="image-207776" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 33: Mandelbrotova množina vytvořená funkcí
<strong>mandelbrot-fractal</strong>. Střed obdélníku je nastaven na souřadnice
[-1/2 0], zvětšení na hodnotu 3/4 a maximální počet iterací na 1000. Vnitřek
Mandelbrotovy množiny má černou barvu.</i></p>

<p>Podívejme se nyní na způsob, jakým je v&nbsp;knihovně <i>Clisk</i> možné
vykreslit Mandelbrotovu množinu. K&nbsp;tomu musíme použít dvě funkce nazvané
<strong>viewport</strong> a <strong>fractal</strong>. První z&nbsp;těchto
funkcí slouží (poněkud zjednodušeně řečeno) k&nbsp;nastavení umístění a rozměrů
obdélníku v&nbsp;rovině. Všechny body tvořící vstupní parametry pro výpočet
fraktálu jsou pravidelně rozmístěny právě v&nbsp;tomto obdélníku (leží
v&nbsp;pravidelné mřížce). V&nbsp;mnoha případech je však zadávání rozměrů a
umístění obdélníku v&nbsp;rovině poněkud pracné, proto jsem použil odlišný a
v&nbsp;praxi i používanější způsob &ndash; do funkce pro výpočet fraktálu
nazvané jednoduše <strong>mandelbrot-fractal</strong> vstupují informace o
středu obdélníku <strong>center-x</strong>, <strong>center-y</strong> a třetí
informace o požadovaném zvětšení fraktálu <strong>scale</strong>. Z&nbsp;těchto
tří parametrů se vypočítají rozměry zmíněného obdélníku <strong>xmin</strong>,
<strong>xmax</strong>, <strong>ymin</strong> a <strong>ymax</strong>, které
jsou předány do funkce <strong>viewport</strong>.</p>

<img src="http://i.iinfo.cz/images/48/clisk2-26.png" class="image-207777" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 34: Mandelbrotova množina vytvořená funkcí
<strong>mandelbrot-fractal</strong>. Střed obdélníku je nastaven na souřadnice
[0 1], zvětšení na hodnotu 4 a maximální počet iterací na 1000. Vnitřek
Mandelbrotovy množiny má černou barvu.</i></p>

<p>Mnohem zajímavější je funkce nazvaná <strong>fractal</strong>, která je
taktéž uživatelům v&nbsp;knihovně <i>Clisk</i> nabízena. Této funkci lze předat
větší počet parametrů uvozených klíči <strong>:init</strong>,
<strong>:while</strong>, <strong>:update</strong>, <strong>:result</strong>,
<strong>:bailout-result</strong> a <strong>:max-iterations</strong>. Význam
jednotlivých parametrů shrnuje tabulka:</p>

<table>
<tr><th>Parametr uvozený klíčem</th><th>Význam</th></tr>
<tr><td>:init</td><td>inicializace pomocných lokálních proměnných atd.</td></tr>
<tr><td>:while</td><td>podmínka pro ukončení iterační smyčky</td></tr>
<tr><td>:update</td><td>výraz zavolaný v&nbsp;průběhu každé iterace, právě zde se provádí výpočet</td></tr>
<tr><td>:result</td><td>jaká hodnota se má vrátit, pokud se splní podmínka pro ukončení iterační smyčky</td></tr>
<tr><td>:bailout-result</td><td>hodnota (většinou barva) vrácená ve chvíli, kdy se překročí maximální počet iterací</td></tr>
<tr><td>:max-iterations</td><td>maximální počet iterací, pokud dojde k&nbsp;překročení, vrátí se hodnota :bailout-result</td></tr>
</table>

<img src="http://i.iinfo.cz/images/48/clisk2-27.png" class="image-207778" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 35: Mandelbrotova množina vytvořená funkcí
<strong>mandelbrot-fractal</strong>. Střed obdélníku je nastaven na souřadnice
[0 1], zvětšení na hodnotu 10 a maximální počet iterací na 1000. Vnitřek
Mandelbrotovy množiny má černou barvu.</i></p>

<p>Iterační vzorec pro výpočet Mandelbrotovy množiny známe, stejně tak známe
podmínku pro ukončení iterační smyčky. Nyní je &bdquo;pouze&ldquo; nutné tyto
vztahy (používající komplexní čísla) přepsat takovým způsobem, aby se používaly
vektorové operace. Podívejme se na řešení, kde se explicitně používají lokální
proměnné <strong>x</strong> a <strong>y</strong> a vektorové operace
<strong>v-</strong>, <strong>v+</strong>, <strong>v*</strong> a
<strong>length</strong>:</p>

<pre>
(defn <strong>mandelbrot-fractal</strong>
    <i>"Výpočet Mandelbrotovy množiny."</i>
    [center-x center-y scale maxiter]
    (let [xmin (- center-x (/ 1.0 scale))
          xmax (+ center-x (/ 1.0 scale))
          ymin (- center-y (/ 1.0 scale))
          ymax (+ center-y (/ 1.0 scale))]
        (viewport [xmin ymin] [xmax ymax]
            (fractal
                <i>; podmínka pro ukončení iterační smyčky</i>
                :while (v- 2 (length [x y]))
                <i>; výpočet z=z^2+c převedený na operace nad vektory</i>
                :update (v+ c [(v- (v* x x) (v* y y)) ; zx^2-zy^2 + cx
                               (v* 2 x y)])           ; 2*zx*zy + cy
                <i>; výpočet barvy výsledného vzorku</i>
                :result (v* 'i 0.01)
                <i>; barva, která se vrátí ve chvíli,</i>
                <i>; kdy se dosáhne maximálního počtu iterací</i>
                :bailout-result black
                <i>; maximální počet iterací</i>
                :max-iterations maxiter))))
</pre>

<img src="http://i.iinfo.cz/images/48/clisk2-28.png" class="image-207779" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 36: Mandelbrotova množina vytvořená funkcí
<strong>mandelbrot-fractal</strong>.</i></p>

<p>Tuto funkci lze snadno otestovat, zde s&nbsp;použitím &bdquo;tabulky&ldquo;
(vektoru vektorů), v&nbsp;níž jsou zaznamenány středy fraktálu v&nbsp;komplexní
rovině, zvětšení, maximální počet iterací a jméno výsledného souboru
s&nbsp;texturou:</p>

<pre>
(defn <strong>mandelbrot-rendering-test</strong>
    []
    <i>;                      x0   y0 scale maxiter filename</i>
    (let [mandel-params [[-1/2  0  3/4   1000    "mandelbrot1.png"]
                         [ 0   -1  4     1000    "mandelbrot2.png"]
                         [ 0   -1  10    1000    "mandelbrot3.png"]
                         [-1.74809088500000000 0.00069335009900000 110116 1000 "mandelbrot4.png"]
                         [-0.80594802749999990 0.20140617800000000 50 10000 "mandelbrot5.png"]]]
        (doseq [mandel-param mandel-params]
            (-&gt; (mandelbrot-fractal (nth mandel-param 0)
                                    (nth mandel-param 1)
                                    (nth mandel-param 2)
                                    (nth mandel-param 3))
                (write-pattern (nth mandel-param 4))))))
</pre>

<img src="http://i.iinfo.cz/images/48/clisk2-29.png" class="image-207780" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 37: Mandelbrotova množina vytvořená funkcí
<strong>mandelbrot-fractal</strong>.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Kubická Mandelbrotova množina</h2>

<p>Pro ilustraci možností funkce <strong>fractal</strong> popsané
v&nbsp;předchozí kaptitole si ukažme, jakým způsobem je možné vykreslit
kubickou Mandelbrotovu množinu, u níž se namísto iteračního vztahu:</p>

<p><i>z<sub>n+1</sub>=z<sub>n</sub><sup>2</sup>+c</i></p>

<p>používá vztah:</p>

<p><i>z<sub>n+1</sub>=z<sub>n</sub><sup>3</sup>+c</i></p>

<p>kde proměnné <i>z</i> a <i>c</i> opět leží v&nbsp;komplexní rovině.</p>

<p>Převod tohoto vztahu na &bdquo;vektorovou&ldquo; podobu v&nbsp;parametru
<strong>:update</strong> je poněkud složitější, ale snadno pochopitelný, když
si uvědomíme, jak se počítá z<sub>n</sub><sup>3</sup> v&nbsp;komplexní
rovině:</p>

<pre>
(defn <strong>cubic-mandelbrot-fractal</strong>
    <i>"Výpočet kubické Mandelbrotovy množiny."</i>
    [center-x center-y scale maxiter]
    (let [xmin (- center-x (/ 1.0 scale))
          xmax (+ center-x (/ 1.0 scale))
          ymin (- center-y (/ 1.0 scale))
          ymax (+ center-y (/ 1.0 scale))]
        (viewport [xmin ymin] [xmax ymax]
            (fractal
                <i>; podmínka pro ukončení iterační smyčky</i>
                :while (v- 2 (length [x y]))
                <i>; výpočet z=z^2+c převedený na operace nad vektory</i>
                :update (v+ c [(v- (v* x x x)   (v* 3 x y y)) ; zxn= zx*zx*zx-3.0*zx*zy*zy+cx;
                               (v- (v* 3 x x y) (v* y y y))]) ; zyn=-zy*zy*zy+3.0*zx*zx*zy+cy;
                <i>; výpočet barvy výsledného vzorku</i>
                :result (v* 'i 0.01)
                <i>; barva, která se vrátí ve chvíli,</i>
                <i>; kdy se dosáhne maximálního počtu iterací</i>
                :bailout-result black
                <i>; maximální počet iterací</i>
                :max-iterations maxiter))))
</pre>

<img src="http://i.iinfo.cz/images/48/clisk2-30.png" class="image-207781" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 38: Kubická Mandelbrotova množina vytvořená funkcí
<strong>cubic-mandelbrot-fractal</strong>.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Úplný zdrojový kód demonstračního příkladu <strong>clisktest5</strong></h2>

<p>V&nbsp;této kapitole bude uveden výpis úplného zdrojového kódu dnešního
druhého a současně i posledního demonstračního příkladu nazvaného
<strong>clisktest5</strong>, z&nbsp;něhož jsme používali úryvky a ukázky
v&nbsp;předchozích dvou kapitolách:</p>

<p>Obsah souboru <strong>project.clj</strong>:</p>

<pre>
(defproject clisktest5 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[net.mikera/clisk "0.10.0"]</strong>]
  :main ^:skip-aot clisktest5.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Obsah souboru <strong>core.clj</strong>:</p>

<pre>
(ns <strong>clisktest5.core</strong>
    (:gen-class)
    (:use clisk.live))
&nbsp;
(import java.io.File)
(import javax.imageio.ImageIO)
&nbsp;
(defn <strong>write-image</strong>
    <i>"Uložení rastrového obrázku typu BufferedImage do souboru."</i>
    [image file-name]
    (ImageIO/write image "png" (File. file-name)))
&nbsp;
(defn <strong>write-pattern</strong>
    <i>"Vytvoření rastrového obrázku na základě předaného patternu."</i>
    [pattern file-name]
    (write-image (image pattern) file-name))
&nbsp;
(defn <strong>mandelbrot-fractal</strong>
    <i>"Výpočet Mandelbrotovy množiny."</i>
    [center-x center-y scale maxiter]
    (let [xmin (- center-x (/ 1.0 scale))
          xmax (+ center-x (/ 1.0 scale))
          ymin (- center-y (/ 1.0 scale))
          ymax (+ center-y (/ 1.0 scale))]
        (viewport [xmin ymin] [xmax ymax]
            (fractal
                <i>; podmínka pro ukončení iterační smyčky</i>
                :while (v- 2 (length [x y]))
                <i>; výpočet z=z^2+c převedený na operace nad vektory</i>
                :update (v+ c [(v- (v* x x) (v* y y)) ; zx^2-zy^2 + cx
                               (v* 2 x y)])           ; 2*zx*zy + cy
                <i>; výpočet barvy výsledného vzorku</i>
                :result (v* 'i 0.01)
                <i>; barva, která se vrátí ve chvíli,</i>
                <i>; kdy se dosáhne maximálního počtu iterací</i>
                :bailout-result black
                <i>; maximální počet iterací</i>
                :max-iterations maxiter))))
&nbsp;
(defn <strong>cubic-mandelbrot-fractal</strong>
    <i>"Výpočet kubické Mandelbrotovy množiny."</i>
    [center-x center-y scale maxiter]
    (let [xmin (- center-x (/ 1.0 scale))
          xmax (+ center-x (/ 1.0 scale))
          ymin (- center-y (/ 1.0 scale))
          ymax (+ center-y (/ 1.0 scale))]
        (viewport [xmin ymin] [xmax ymax]
            (fractal
                <i>; podmínka pro ukončení iterační smyčky</i>
                :while (v- 2 (length [x y]))
                <i>; výpočet z=z^2+c převedený na operace nad vektory</i>
                :update (v+ c [(v- (v* x x x)   (v* 3 x y y)) ; zxn= zx*zx*zx-3.0*zx*zy*zy+cx;
                               (v- (v* 3 x x y) (v* y y y))]) ; zyn=-zy*zy*zy+3.0*zx*zx*zy+cy;
                <i>; výpočet barvy výsledného vzorku</i>
                :result (v* 'i 0.01)
                <i>; barva, která se vrátí ve chvíli,</i>
                <i>; kdy se dosáhne maximálního počtu iterací</i>
                :bailout-result black
                <i>; maximální počet iterací</i>
                :max-iterations maxiter))))
&nbsp;
(defn <strong>mandelbrot-rendering-test</strong>
    []
    <i>;                      x0   y0 scale maxiter filename</i>
    (let [mandel-params [[-1/2  0  3/4   1000    "mandelbrot1.png"]
                         [ 0   -1  4     1000    "mandelbrot2.png"]
                         [ 0   -1  10    1000    "mandelbrot3.png"]
                         [-1.74809088500000000 0.00069335009900000 110116 1000 "mandelbrot4.png"]
                         [-0.80594802749999990 0.20140617800000000 50 10000 "mandelbrot5.png"]]]
        (doseq [mandel-param mandel-params]
            (-&gt; (mandelbrot-fractal (nth mandel-param 0)
                                    (nth mandel-param 1)
                                    (nth mandel-param 2)
                                    (nth mandel-param 3))
                (write-pattern (nth mandel-param 4))))))
&nbsp;
(defn <strong>fractal-rendering-test</strong>
    []
    (mandelbrot-rendering-test)
    (-&gt; (cubic-mandelbrot-fractal 0 0 3/4 1000) (write-pattern "mandelbrot6.png")))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (try
        (println "fractal rendering test...")
        (fractal-rendering-test)
        (println "Done")
        (catch Throwable e
            (println (.toString e)))
        (finally <i>; jistota, že program vždy korektně skončí</i>
            (System/exit 0))))
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Repositář s&nbsp;demonstračními příklady</h2>

<p>Oba dva dnes popsané demonstrační příklady byly, podobně jako
v&nbsp;předchozích částech tohoto seriálu, uloženy do GIT repositáře dostupného
na adrese <a
href="https://github.com/tisnik/clojure-examples">https://github.com/tisnik/clojure-examples</a>.
V&nbsp;tabulce zobrazené pod tímto odstavcem naleznete na jednotlivé příklady
přímé odkazy:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Github</th></tr>
<tr><td>1</td><td>clisktest4</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/clisktest4">https://github.com/tisnik/clojure-examples/tree/master/clisktest4</a></td></tr>
<tr><td>2</td><td>clisktest5</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/clisktest5">https://github.com/tisnik/clojure-examples/tree/master/clisktest5</a></td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Odkazy na předchozí části seriálu</h2>

<ol>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

</ol>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odkazy na Internetu</h2>

<ol>

<li>Clisk<br />
<a href="https://github.com/mikera/clisk">https://github.com/mikera/clisk</a>
</li>

<li>clojars: net.mikera/clisk<br />
<a href="https://clojars.org/net.mikera/clisk">https://clojars.org/net.mikera/clisk</a>
</li>

<li>clojure.inspector<br />
<a href="http://clojure.github.io/clojure/clojure.inspector-api.html">http://clojure.github.io/clojure/clojure.inspector-api.html</a>
</li>

<li>Clisk: wiki<br />
<a href="https://github.com/mikera/clisk/wiki">https://github.com/mikera/clisk/wiki</a>
</li>

<li>Dokumentace vygenerovaná pro knihovnu core.matrix<br />
<a href="https://cloojure.github.io/doc/core.matrix/index.html">https://cloojure.github.io/doc/core.matrix/index.html</a>
</li>

<li>Size and Dimensionality<br />
<a href="https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion">https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion</a>
</li>

<li>Towards core.matrix for Clojure?<br />
<a href="https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/">https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/</a>
</li>

<li>The Clojure Toolbox<br />
<a href="http://www.clojure-toolbox.com/">http://www.clojure-toolbox.com/</a>
</li>

<li>Neanderthal<br />
<a href="http://neanderthal.uncomplicate.org/">http://neanderthal.uncomplicate.org/</a>
</li>

<li>Hello world project<br />
<a href="https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj">https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj</a>
</li>

<li>vectorz-clj<br />
<a href="https://github.com/mikera/vectorz-clj">https://github.com/mikera/vectorz-clj</a>
</li>

<li>vectorz - Examples<br />
<a href="https://github.com/mikera/vectorz-clj/wiki/Examples">https://github.com/mikera/vectorz-clj/wiki/Examples</a>
</li>

<li>gloss<br />
<a href="https://github.com/ztellman/gloss">https://github.com/ztellman/gloss</a>
</li>

<li>HTTP client/server for Clojure<br />
<a href="http://www.http-kit.org/">http://www.http-kit.org/</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>java.jdbc API Reference<br />
<a href="https://clojure.github.io/java.jdbc/">https://clojure.github.io/java.jdbc/</a>
</li>

<li>Hiccup<br />
<a href="https://github.com/weavejester/hiccup">https://github.com/weavejester/hiccup</a>
</li>

<li>Clojure Ring na GitHubu<br />
<a href="https://github.com/ring-clojure/ring">https://github.com/ring-clojure/ring</a>
</li>

<li>A brief overview of the Clojure web stack<br />
<a href="https://brehaut.net/blog/2011/ring_introduction">https://brehaut.net/blog/2011/ring_introduction</a>
</li>

<li>Getting Started with Ring<br />
<a href="http://www.learningclojure.com/2013/01/getting-started-with-ring.html">http://www.learningclojure.com/2013/01/getting-started-with-ring.html</a>
</li>

<li>Getting Started with Ring and Compojure - Clojure Web Programming<br />
<a href="http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html">http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II<br />
<a href="2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

