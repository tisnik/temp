<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Enlive - výkonný šablonovací systém pro jazyk Clojure</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Enlive - výkonný šablonovací systém pro jazyk Clojure</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Při popisu knihovny Hiccup jsme se seznámili s jednou možností generování dynamických HTML stránek v programovacím jazyce Clojure. Jednalo se o využití doménově specifického jazyka. Zcela opačný postup nalezneme v knihovně Enlive, kterou je možné považovat za kombinaci šablonovacího systému a nástroje pro transformaci HTML stránek do výsledné podoby.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Enlive - výkonný šablonovací systém pro jazyk Clojure</a></p>
<p><a href="#k02">2. Běžné šablonovací systémy</a></p>
<p><a href="#k03">3. Přístup použitý v&nbsp;knihovně Enlive</a></p>
<p><a href="#k04">4. První demonstrační příklad: aplikace jednoduché šablony</a></p>
<p><a href="#k05">5. Další typy selektorů</a></p>
<p><a href="#k06">6. Druhý demonstrační příklad: výběr tagů na základě jejich třídy a ID</a></p>
<p><a href="#k07">7. Snippety použitelné pro výpis sekvencí do HTML stránky</a></p>
<p><a href="#k08">8. Třetí demonstrační příklad: použití snippetu pro výpis seznamu, explicitní selektory</a></p>
<p><a href="#k09">9. Repositář s&nbsp;dnešními demonstračními příklady</a></p>
<p><a href="#k10">10. Odkazy na předchozí části tohoto seriálu</a></p>
<p><a href="#k11">11. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Enlive - výkonný šablonovací systém pro jazyk Clojure</h2>

<p>Při popisu tvorby serverových aplikací s&nbsp;využitím programovacího jazyka
<i>Clojure</i> jsme se seznámili s&nbsp;dvojicí důležitých a v&nbsp;mnoha
projektech i užitečných knihoven. První knihovna se jmenuje <i>Clojure Ring</i>
a jejím hlavním úkolem je zajistit čtení a zpracování požadavků přicházejících
od klienta a následně odeslat odpověď serveru zpět klientovi. Díky jasně
vymezenému úkolu (od <i>requestu</i> k&nbsp;<i>response</i>), který má tato
knihovna zajišťovat, bylo možné provést její návrh čistě funkcionálně a bez
nutnosti návrhu a implementace složitého a rozsáhlého API, o čemž jsme se
ostatně mohli přesvědčit na několika demonstračních příkladech. Serverové
aplikace, které mají nějakým způsobem komunikovat s&nbsp;webovým prohlížečem na
straně klienta, však musí dokázat dynamicky generovat HTML stránky
(popř.&nbsp;poskytovat data pro tyto stránky, například ve formátu JSON).
V&nbsp;tomto případě si již s&nbsp;možnostmi nabízenými knihovnou <i>Clojure
Ring</i> nevystačíme, což je korektní, protože generování obsahu vlastně nemá
nic společného se zpracováním požadavků a odpovídáním na ně (<i>Clojure
Ring</i> se nesnaží o napodobení některých monstrózních webových
frameworků).</p>

<p>Pro dynamické generování HTML stránek na straně serveru v&nbsp;programovacím
jazyce Clojure lze využít hned několik knihoven, které se od sebe odlišují
způsobem, jakým je &bdquo;předepsána&ldquo; výsledná podoba stránky. Jedna
z&nbsp;možností spočívá ve využití připravených šablon HTML stránek, do nichž
se pouze na určená místa doplňují dynamicky generovaná data. Jedná se
pravděpodobně o nejpoužívanější postup, který byl nejprve implementován
v&nbsp;PHP a později se rozšířil i do dalších programovacích jazyků a jejich
frameworků (JSP atd. atd.). Použití šablon HTML stránek samozřejmě přináší
mnohé výhody, například možnost oddělení práce designera stránek od
programátora, ovšem ve skutečnosti existuje ještě další způsob, který je
podporován v&nbsp;knihovně s&nbsp;názvem <i>Hiccup</i>. Tato knihovna totiž
obsahuje několik funkcí, které na svém vstupu dostanou běžný vektor či seznam
jazyka Clojure a na základě dat uložených v&nbsp;tomto vektoru/listu vytvoří
korektní podobu HTML stránky. Na první pohled sice tento postup může vypadat
složitě, ve skutečnosti je však v&nbsp;mnoha případech velmi efektivní, zejména
ve chvíli, kdy je prakticky celý design stránek umístěn v&nbsp;samostatných
CSS.</p>

<p>Jen pro připomenutí způsobu, jakým se s&nbsp;knihovnou <i>Hiccup</i>
pracuje, se podívejme na příklad, kde se DSL (doménově specifický jazyk)
podporovaný knihovnou <i>Hiccup</i> používá. Jedná se o jednoduchý program,
který po svém spuštění vytvoří novou HTML stránku uloženou do souboru nazvaného
&bdquo;test.html&ldquo;. Tato stránka bude obsahovat tabulku s&nbsp;hodnotami
faktoriálu. Vidíme, že funkci <strong>hiccup.page/xhtml</strong> se předává
vektor obsahující symbolicky zapsanou kostru stránky; uvnitř samozřejmě můžeme
použít i programový kód (což není vlastnost knihovny <i>Hiccup</i>, ale
homoikonického jazyka <i>Clojure</i>):</p>

<pre>
(ns htmltest2.core
    (:gen-class))
&nbsp;
(require '[hiccup.page :as page])
&nbsp;
(defn <strong>fact</strong>
    [n]
    (apply * (range 1 (inc n))))
&nbsp;
(defn <strong>html-page</strong>
    []
    (<strong>page/xhtml</strong>
        [:head
            [:title "Hiccup test #2"]
            [:meta {:name "Generator" :content "Clojure"}]
            [:meta {:http-equiv "Content-type" :content "text/html; charset=utf-8"}]
        ]
        [:body
            [:h1 "Hiccup test #2"]
            [:table
                [:tr [:th "n"] [:th "n!"]]
                (for [n (range 0 20)]
                    [:tr [:td n] [:td (fact n)]])
            ]
        ]))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (spit "test.html" (html-page)))
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Běžné šablonovací systémy</h2>

<p>Zcela odlišný způsob zvolili autoři knihovny <i>Enlive</i>, jejímž stručným
popisem se budeme zabývat dnes. Namísto návrhu doménově specifického jazyka
kombinujícího programový kód (výše se jedná o výpočet faktoriálu) se statickou
částí představovanou symboly <strong>:head</strong>, <strong>:body</strong>,
<strong>:h1</strong>, <strong>:div</strong> atd., je knihovna <i>Enlive</i>
založena na HTML šablonách, které se na základě zadaných selektorů
(v&nbsp;mnoha ohledech podobných selektorům používaným v&nbsp;CSS) transformují
do podoby výsledné HTML stránky. Ovšem šablony v&nbsp;podání knihovny
<i>Enlive</i> se v&nbsp;jednom ohledu liší od šablon, které můžeme znát
například z&nbsp;různých frameworků pro programovací jazyky PHP, Python
(Cheetah), Javu (JSP: JavaServer Pages, JSTL: JavaServer Pages Standard Tag
Library) atd. Například ve zmíněných frameworcích Cheetah a JSP (JSTL) se přímo
v&nbsp;šabloně kombinuje statický HTML kód se značkami šablonovacího systému či
přímo s&nbsp;programovým kódem tak, jak to známe již z&nbsp;prvních verzí
PHP.</p>

<p>Podívejme se na příklady, jak takové šablony kombinující statické HTML a
&bdquo;dynamickou&ldquo; část měněnou šablonovacím systémem mohou vypadat
(příklady byly použity v&nbsp;dokumentaci pro framework Cheetah):</p>

<pre>
  &lt;html&gt;
    &lt;head&gt;&lt;title&gt;$title&lt;/title&gt;&lt;/head&gt;
    &lt;body&gt;
      &lt;table&gt;
        #for $client in $clients
        &lt;tr&gt;
          &lt;td&gt;$client.surname, $client.firstname&lt;/td&gt;
          &lt;td&gt;&lt;a href="mailto:$client.email"&gt;$client.email&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        #end for
      &lt;/table&gt;
    &lt;/body&gt;
  &lt;/html&gt;
</pre>

<pre>
  &lt;html&gt;
    &lt;head&gt;&lt;title&gt;&lt;%=title%&gt;&lt;/title&gt;&lt;/head&gt;
    &lt;body&gt;
      &lt;table&gt;
        &lt;% for client in clients: %&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;%=client['surname']%&gt;, &lt;%=client'[firstname']%&gt;&lt;/td&gt;
	  &lt;td&gt;&lt;a href="mailto:&lt;%=client['email']%&gt;"&gt;
           &lt;%=client['email']%&gt;&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;%end%&gt;
      &lt;/table&gt;
    &lt;/body&gt;
  &lt;/html&gt;
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Přístup použitý v&nbsp;knihovně Enlive</h2>

<p>Naproti tomu se v&nbsp;knihovně <i>Enlive</i> jako šablona použije zcela
běžná HTML stránka, kde pouze musíme zajistit, aby se ty tagy, jejichž obsah se
má změnit, daly jednoznačně najít pomocí selektoru. Nejjednodušší je použití ID
prvků/tagů, existují však i další možnosti, o nichž se dále zmíníme. Toto je
příklad šablony pro <i>Enlive</i>:</p>

<pre>
  &lt;html&gt;
    &lt;head&gt;&lt;title&gt;jakýkoli titulek, který se změní&lt;/title&gt;&lt;/head&gt;
    &lt;body&gt;
      &lt;table id="clients"&gt;
        &lt;tr id="client"&gt;
          &lt;td id="name"&gt;vyplní se později&lt;/td&gt;
          &lt;td id="address"&gt;&lt;a href=""&gt;i adresa se vyplní později&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;
    &lt;/body&gt;
  &lt;/html&gt;
</pre>

<p>Jak je patrné, tak největším rozdílem mezi původními dvěma šablonami a
šablonou poslední je fakt, že v&nbsp;poslední šabloně (určené pro knihovnu
<i>Enlive</i>) nenajdeme žádnou speciální značku ani vkládaný kód. Tuto šablonu
lze vytvořit v&nbsp;jakémkoli nástroji pro tvorbu HTML stránek a může ji
vytvořit designér prakticky bez konzultace s&nbsp;vývojářem (výjimkou jsou ID u
prvků, ale ani to by v&nbsp;tomto případě nebylo nutné, jak uvidíme za chvíli).
Dokonce ani není nutné nechávat ty tagy, jejichž obsah se má měnit, prázdné,
což je opět výhoda &ndash; designér totiž může vyzkoušet například i to, zda se
do daného místa na stránce skutečně všechny požadované údaje vejdou, samotná
šablona se použije jako mockup atd. atd.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První demonstrační příklad: aplikace jednoduché šablony</h2>

<p>Před zdlouhavým vysvětlováním, jak přesně se šablona transformuje na
výslednou HTML stránku, si ukažme funkční demonstrační příklad. Kostra příkladu
se vytvoří jednoduše nám již známým příkazem:</p>

<pre>
lein new app enlive1
</pre>

<p>Do projektového souboru se přidá knihovna <i>Enlive</i>:</p>

<pre>
(defproject <strong>enlive1</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   [enlive "1.1.1"]]
    :main ^:skip-aot enlive1.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Do adresáře <strong>resources</strong> (to je důležité a nesmíme na to
zapomenout!) se přidá šablona, což je běžná a ničím zvláštní HTML stránka:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Testovaci stranka&lt;/title&gt;
        &lt;meta name="Author" content="Pavel Tisnovsky"&gt;
        &lt;meta name="Generator" content="vim"&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Testovaci stranka&lt;/h1&gt;
        &lt;div&gt;
            Text v prvnim odstavci.
        &lt;/div&gt;
        &lt;div&gt;
            Text ve druhem odstavci.
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Nejdůležitější je samozřejmě vlastní zdrojový kód, kde se provádí
transformace šablony na výslednou HTML stránku:</p>

<pre>
(ns enlive1.core
    (:gen-class))
&nbsp;
(require '[net.cgrand.enlive-html :as html])
&nbsp;
(html/deftemplate <strong>test-page</strong> "test.html"
    [data-for-page]
    [:title] (html/content (:title data-for-page))
    [:h1]    (html/content (:title data-for-page))
    [:div]   (html/content (:paragraph data-for-page)))
&nbsp;
(def <strong>new-data</strong>
    {:title "Zcela novy titulek stranky"
     :paragraph "xyzzy"
    })
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (println (reduce str (test-page new-data))))
</pre>

<p>Tento zdrojový kód obsahuje jednu funkci (<strong>-main</strong>), jednu
mapu navázanou na jméno <strong>new-data</strong> a konečně deklaraci
transformace šablony, kterou jsme nazvali <strong>test-page</strong>. Tato část
(jak jste si pravděpodobně všimli, jedná se o makro a nikoli o funkci) je
nejdůležitější, protože je v&nbsp;ní deklarováno:</p>

<ul>
<li>Obsah všech tagů &lt;title&gt; nahraď daty, která najdeš v&nbsp;předané
mapě pod klíčem :title (ovšem tento tag bude na stránce umístěn jen jedenkrát,
a to konkrétně v&nbsp;hlavičce).</li>
<li>Obsah všech tagů &lt;h1&gt; nahraď stejným obsahem. Zde konkrétně se bude
jednat o řetězec "Zcela novy titulek stranky" a tag se taktéž vyskytuje pouze
jednou.</li>
<li>Obsah všech tagů &lt;div&gt; nahraď daty, která najdeš v&nbsp;předané mapě
pod klíčem :paragraph. Konkrétně budou nahrazeny obsahy obou odstavců.</li>
</ul>

<p>Ještě jednodušeji by bylo možné šablonu nadeklarovat takto (nyní bez
dynamicky předávaných dat):</p>

<pre>
(html/deftemplate <strong>test-page</strong> "test.html"
    [neni-zapotrebi]
    [:title] (html/content "A jeste jiny titulek stranky")
    [:h1]    (html/content "Tak tak, dalsi titule")
    [:div]   (html/content "Novy obsah odstavce"))
</pre>

<p>Navíc si povšimněte transformace výsledku šablony <strong>test-page</strong>
na řetězec &ndash; jednoduše spojíme celou sekvenci postupnou aplikací funkce
<strong>str</strong>. Po spuštění získáme následující výstup:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Zcela novy titulek stranky&lt;/title&gt;
        &lt;meta content="Pavel Tisnovsky" name="Author" /&gt;
        &lt;meta content="vim" name="Generator" /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Zcela novy titulek stranky&lt;/h1&gt;
        &lt;div&gt;xyzzy&lt;/div&gt;
        &lt;div&gt;xyzzy&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Další typy selektorů</h2>

<p>V&nbsp;předchozím příkladu jsme používali velmi jednoduché selektory typu
<strong>[:title]</strong> či <strong>[:div]</strong> (vždy se jedná o vektory).
K&nbsp;dispozici jsou však i další možnosti, jak vybrat ty tagy, s&nbsp;nimiž
se má manipulovat:</p>

<table>
<tr><th>#</th><th>Selektor</th><th>Význam</th></tr>
<tr><td>1</td><td>[:div]</td><td>všechny elementy &lt;div&gt;</td></tr>
<tr><td>2</td><td>[:title]</td><td>všechny elementy &lt;title&gt; (tento element se vyskytuje jen jedenkrát)</td></tr>
<tr><td>3</td><td>[:div.danger]</td><td>všechny elementy &lt;div&gt; s&nbsp;třídou &bdquo;danger&ldquo;</td></tr>
<tr><td>4</td><td>[:div#summary]</td><td>všechny elementy &lt;div&gt; s&nbsp;ID &bdquo;summary&ldquo; (opět by se mělo jednat jen o jediný element)</td></tr>
<tr><td>5</td><td>[:div :span]</td><td>výběr vnitřního tagu &lt;span&gt; umístěného v&nbsp;elementu &lt;div&gt;</td></tr>
<tr><td>6</td><td>[:div.menu :ul :li :span]</td><td>kombinace předchozích dvou možnosti</td></tr>
<tr><td>7</td><td>[:table#userlist :tr :td]</td><td>kombinace předchozích dvou možnosti (zde praktičtější)</td></tr>
</table>

<p>Možností výběrů elementů je ještě více, o některých z&nbsp;nich se zmíníme
příště.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Druhý demonstrační příklad: výběr tagů na základě jejich třídy a ID</h2>

<p>Ve druhém demonstračním příkladu budou elementy (tagy) vybírány na základě
jejich třídy a popř.&nbsp;ID (což je mnohem praktičtější). Projektový soubor
vypadá následovně:</p>

<pre>
(defproject <strong>enlive2</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   [enlive "1.1.1"]]
    :main ^:skip-aot enlive2.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Šablona umístěná v&nbsp;adresáři <strong>resources</strong> se odlišuje od
šablony, s&nbsp;níž jsme se setkali v&nbsp;prvním příkladu. Povšimněte si toho,
že některé odstavce (&lt;div&gt;) mají přiřazeno ID a některé zase třídu či
třídy:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Testovaci stranka&lt;/title&gt;
        &lt;meta name="Author" content="Pavel Tisnovsky"&gt;
        &lt;meta name="Generator" content="vim"&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Testovaci stranka&lt;/h1&gt;
        &lt;div id="paragraph1"&gt;
            Text v prvnim odstavci.
        &lt;/div&gt;
        &lt;div id="paragraph2"&gt;
            Text ve druhem odstavci.
        &lt;/div&gt;
        &lt;div class="paragraphs"&gt;
            Text ve tretim odstavci.
        &lt;/div&gt;
        &lt;div class="classX, paragraphs"&gt;
            Text ve ctvrtem odstavci.
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Vlastní zdrojový kód používá v&nbsp;makru <strong>html/deftemplate</strong>
odlišné typy selektorů. První odstavec je vybrán podle svého ID
&bdquo;paragraph1&ldquo;, druhý odstavec taktéž, kdežto další selektor
zafunguje na odstavce se třídou &bdquo;paragraphs&ldquo;:</p>

<pre>
(ns <strong>enlive2.core</strong>
    (:gen-class))
&nbsp;
(require '[net.cgrand.enlive-html :as html])
&nbsp;
(html/deftemplate <strong>test-page</strong> "test.html"
    [data-for-page]
    [:title] (html/content (:title data-for-page))
    [:h1]    (html/content (:title data-for-page))
    [:div#paragraph1]   (html/content (:paragraph1 data-for-page))
    [:div#paragraph2]   (html/content (:paragraph2 data-for-page))
    [:div.paragraphs]   (html/content (:paragraphs data-for-page))
    )
&nbsp;
(def <strong>new-data</strong>
    {:title "Zcela novy titulek stranky"
     :paragraph1 "xyzzy"
     :paragraph2 ""
     :paragraphs "42"
    })
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (println (reduce str (test-page new-data))))
</pre>

<p>Zajímavé se bude podívat na výsledek, především na to, zda poslední selektor
vybere i odstavec, k&nbsp;němuž jsou přiřazeny dvě třídy:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Zcela novy titulek stranky&lt;/title&gt;
        &lt;meta content="Pavel Tisnovsky" name="Author" /&gt;
        &lt;meta content="vim" name="Generator" /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Zcela novy titulek stranky&lt;/h1&gt;
        &lt;div id="paragraph1"&gt;xyzzy&lt;/div&gt;
        &lt;div id="paragraph2"&gt;&lt;/div&gt;
        &lt;div class="paragraphs"&gt;42&lt;/div&gt;
        &lt;div class="classX, paragraphs"&gt;42&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Vidíme, že šablona pracuje korektně (tedy alespoň zatím :-).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Snippety použitelné pro výpis sekvencí do HTML stránky</h2>

<p>V&nbsp;obou předchozích demonstračních příkladech se provádělo nahrazení
obsahu explicitně zadaných elementů (tagů) nějakými skalárními daty.
V&nbsp;praxi by se například mohlo jednat o políčko se jménem přihlášeného
uživatele, políčko s&nbsp;celkovou cenou nákupu atd. Ovšem v&nbsp;mnoha
aplikacích musíme umět pracovat i se sekvencí dat. Může se například jednat o
požadavek zobrazení seznamu uživatelů, zobrazení tabulky se zbožím (nákupním
košíkem) atd. V&nbsp;tradičně pojatých šablonovacích systémech se v&nbsp;tomto
případě používají programové smyčky, ať již zapsané explicitně (viz <a
href="#k02">druhou kapitolu</a> s&nbsp;ukázkami) nebo s&nbsp;využitím nějakých
speciálních značek (v&nbsp;JSTL se například používá speciální značka
&lt;c:forEach&gt;). Ovšem v&nbsp;knihovně <i>Enlive</i> tuto možnost nemáme, a
to z&nbsp;toho prostého důvodu, že šablonou je běžný HTML soubor. Jak tedy
implementovat například požadavek na zobrazení seznamu herců v&nbsp;nějaké
divadelní hře? Řešením jsou takzvané snippety, u nichž se specifikuje počáteční
a koncový element v&nbsp;HTML a poté již snippet dokáže opakovat tu část HTML
stránky, která je uvnitř specifikovaných elementů.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Třetí demonstrační příklad: použití snippetu pro výpis seznamu, explicitní selektory</h2>

<p>Použití jednoduchého snippetu bude ukázáno v&nbsp;dnešním třetím a současně
i posledním demonstračním příkladu, který by po svém spuštění měl vypsat
herecké obsazení v&nbsp;divadelní hře &bdquo;Vražda
v&nbsp;salonním&nbsp;coupé&ldquo;. V&nbsp;reálné aplikaci by se tato data
načetla z&nbsp;databáze či přenesla z&nbsp;nějakého jiného systému, my si pro
jednoduchost vystačíme s&nbsp;vektorem deklarovaným přímo ve zdrojovém
kódu.</p>

<p>Vytvoření kostry demonstračního příkladu:</p>

<pre>
lein new app enlive3
</pre>

<p>Projektový soubor třetího demonstračního příkladu se nijak zvláště
neodlišuje od obou předchozích projektových souborů:</p>

<pre>
(defproject <strong>enlive3</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   [enlive "1.1.1"]]
    :main ^:skip-aot enlive3.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Šablona je ovšem odlišná &ndash; máme zde &bdquo;obalový&ldquo; odstavec
s&nbsp;ID nastaveným na &bdquo;roles&ldquo;, v&nbsp;němž se nachází další
odstavec s&nbsp;ID &bdquo;role&ldquo;. Tento odstavec bude ve výsledné HTML
stránce zopakován tolikrát, kolik jmen herců do transformačního makra
předáme:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Testovaci stranka&lt;/title&gt;
        &lt;meta name="Author" content="Pavel Tisnovsky"&gt;
        &lt;meta name="Generator" content="vim"&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Hra &lt;span&gt;&lt;/span&gt;&lt;/h1&gt;
        &lt;div id="roles"&gt;
            &lt;div id="role"&gt;
                &lt;span id="actor"&gt;herec&lt;/span&gt;
                &lt;span id="character"&gt;postava&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div&gt;Pokracovani&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Zdrojový kód demonstračního příkladu obsahuje tabulku (vektor) s&nbsp;rolemi
a dále pak datovou strukturu s&nbsp;titulkem divadelní hry a referencí na právě
zmíněnou tabulku s&nbsp;rolemi:</p>

<pre>
(ns <strong>enlive3.core</strong>
    (:gen-class))
&nbsp;
(require '[net.cgrand.enlive-html :as html])
&nbsp;
(def <strong>roles</strong> [
    {:actor-name "Zdeněk Svěrák"   :character "inspektor Trachta  "}
    {:actor-name "Petr Brukner"    :character "praktikant Hlaváček"}
    {:actor-name "Miloň Čepelka"   :character "praktikant Hlaváček"}
    {:actor-name "Bořivoj Penc"    :character "továrník Bierhanzel"}
    {:actor-name "Jaroslav Weigel" :character "továrník Bierhanzel"}
    {:actor-name "Jan Hraběta"     :character "továrník Meyer"}
    {:actor-name "Václav Kotek"    :character "steward"}
    {:actor-name "Genadij Rumlena" :character "steward"}])
&nbsp;
(def <strong>vrazda-v-salonnim-coupe</strong>
    {:title "Vražda v salonním coupé"
     :roles roles
    })
</pre>

<p>Nyní následuje důležitější část. Nejprve snippet, v&nbsp;němž je
deklarováno, který element a případné podelementy se budou opakovat.
Deklarováno je, že opakovat se bude jen odstavec s&nbsp;ID nastaveným na
&bdquo;role&ldquo;, pravidla pro vyplňování daty (selektor+způsob naplnění) již
známe:</p>

<pre>
(html/defsnippet <strong>one-record</strong> "test.html"
    {[:div#role]     ; zacatek
     [:div#role]}    ; konec
    [record]
    [:span#actor]     (html/content (:actor-name record))
    [:span#character] (html/content (:character record)))
</pre>

<p>Vlastní deklarace transformace šablony se taktéž změnila, a to kvůli
poslednímu řádku, kterým je deklarováno (zjednodušeně řečeno) opakování
elementů umístěných v&nbsp;odstavci s&nbsp;ID nastaveným na
&bdquo;roles&ldquo;:</p>

<pre>
(html/deftemplate <strong>test-page</strong> "test.html"
    [data-for-page]
    [:title]      (html/content (:title data-for-page))
    [:h1 :span]   (html/content (:title data-for-page))
    [:div#roles]  (html/content (map one-record (:roles data-for-page))) ; vnitrek odstavce bude duplikovan
)
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (println (reduce str (test-page vrazda-v-salonnim-coupe))))
</pre>

<p>Výsledek běhu demonstračního příkladu (povšimněte si opakování IDček):</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Vražda v salonním coupé&lt;/title&gt;
        &lt;meta content="Pavel Tisnovsky" name="Author" /&gt;
        &lt;meta content="vim" name="Generator" /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Hra &lt;span&gt;Vražda v salonním coupé&lt;/span&gt;&lt;/h1&gt;
        &lt;div id="roles"&gt;&lt;div id="role"&gt;
                &lt;span id="actor"&gt;Zdeněk Svěrák&lt;/span&gt;
                &lt;span id="character"&gt;inspektor Trachta  &lt;/span&gt;
            &lt;/div&gt;&lt;div id="role"&gt;
                &lt;span id="actor"&gt;Petr Brukner&lt;/span&gt;
                &lt;span id="character"&gt;praktikant Hlaváček&lt;/span&gt;
            &lt;/div&gt;&lt;div id="role"&gt;
                &lt;span id="actor"&gt;Miloň Čepelka&lt;/span&gt;
                &lt;span id="character"&gt;praktikant Hlaváček&lt;/span&gt;
            &lt;/div&gt;&lt;div id="role"&gt;
                &lt;span id="actor"&gt;Bořivoj Penc&lt;/span&gt;
                &lt;span id="character"&gt;továrník Bierhanzel&lt;/span&gt;
            &lt;/div&gt;&lt;div id="role"&gt;
                &lt;span id="actor"&gt;Jaroslav Weigel&lt;/span&gt;
                &lt;span id="character"&gt;továrník Bierhanzel&lt;/span&gt;
            &lt;/div&gt;&lt;div id="role"&gt;
                &lt;span id="actor"&gt;Jan Hraběta&lt;/span&gt;
                &lt;span id="character"&gt;továrník Meyer&lt;/span&gt;
            &lt;/div&gt;&lt;div id="role"&gt;
                &lt;span id="actor"&gt;Václav Kotek&lt;/span&gt;
                &lt;span id="character"&gt;steward&lt;/span&gt;
            &lt;/div&gt;&lt;div id="role"&gt;
                &lt;span id="actor"&gt;Genadij Rumlena&lt;/span&gt;
                &lt;span id="character"&gt;steward&lt;/span&gt;
            &lt;/div&gt;&lt;/div&gt;
        &lt;div&gt;Pokracovani&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>O způsobech vylepšení tohoto příkladu se zmíníme příště.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Repositář s&nbsp;dnešními demonstračními příklady</h2>

<p>Všechny tři dnes zmíněné demonstrační příklady byly, podobně jako
v&nbsp;předchozích částech tohoto seriálu, uloženy do Git repositáře dostupného
na adrese <a
href="https://github.com/tisnik/clojure-examples">https://github.com/tisnik/clojure-examples</a>.
V&nbsp;tabulce zobrazené pod tímto odstavcem naleznete na zdrojové kódy
jednotlivých demonstračních příkladů přímé odkazy:</p>

<table>
<tr><th>#</th><th>Příklad </th><th>Github</th></tr>
<tr><td>1</td><td></td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/enlive1">https://github.com/tisnik/clojure-examples/tree/master/enlive1</a></td></tr>
<tr><td>2</td><td></td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/enlive2">https://github.com/tisnik/clojure-examples/tree/master/enlive2</a></td></tr>
<tr><td>3</td><td></td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/enlive3">https://github.com/tisnik/clojure-examples/tree/master/enlive3</a></td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Odkazy na předchozí části tohoto seriálu</h2>

<ol>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (2)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (3)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/</a>
</li>

<li>Programovací jazyk Clojure – triky při práci s řetězci<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-retezci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-retezci/</a>
</li>

<li>Programovací jazyk Clojure – triky při práci s kolekcemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-kolekcemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-kolekcemi/</a>
</li>

<li>Programovací jazyk Clojure – práce s mapami a množinami<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-prace-s-mapami-a-mnozinami/">http://www.root.cz/clanky/programovaci-jazyk-clojure-prace-s-mapami-a-mnozinami/</a>
</li>

<li>Programovací jazyk Clojure – základy zpracování XML<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-zaklady-zpracovani-xml/">http://www.root.cz/clanky/programovaci-jazyk-clojure-zaklady-zpracovani-xml/</a>
</li>

<li>Programovací jazyk Clojure – testování s využitím knihovny Expectations<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/">http://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/</a>
</li>

<li>Programovací jazyk Clojure – některé užitečné triky použitelné (nejenom) v&nbsp;testech<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/">http://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/</a>
</li>

</ol>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odkazy na Internetu</h2>

<ol>

<li>Clojure Cookbook: Templating HTML with Enlive<br />
<a href="https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc">https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc</a>
</li>

<li>An Introduction to Enlive<br />
<a href="https://github.com/swannodette/enlive-tutorial/">https://github.com/swannodette/enlive-tutorial/</a>
</li>

<li>Enlive na GitHubu<br />
<a href="https://github.com/cgrand/enlive">https://github.com/cgrand/enlive</a>
</li>

<li>Expectations: příklady atd.<br />
<a href="http://jayfields.com/expectations/">http://jayfields.com/expectations/</a>
</li>

<li>Expectations na GitHubu<br />
<a href="https://github.com/jaycfields/expectations">https://github.com/jaycfields/expectations</a>
</li>

<li>Lein-expectations na GitHubu<br />
<a href="https://github.com/gar3thjon3s/lein-expectations">https://github.com/gar3thjon3s/lein-expectations</a>
</li>

<li>Testing Clojure With Expectations<br />
<a href="https://semaphoreci.com/blog/2014/09/23/testing-clojure-with-expectations.html">https://semaphoreci.com/blog/2014/09/23/testing-clojure-with-expectations.html</a>
</li>

<li>Clojure testing TDD/BDD libraries: clojure.test vs Midje vs Expectations vs Speclj<br />
<a href="https://www.reddit.com/r/Clojure/comments/1viilt/clojure_testing_tddbdd_libraries_clojuretest_vs/">https://www.reddit.com/r/Clojure/comments/1viilt/clojure_testing_tddbdd_libraries_clojuretest_vs/</a>
</li>

<li>Testing: One assertion per test<br />
<a href="http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html">http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html</a>
</li>

<li>Rewriting Your Test Suite in Clojure in 24 hours<br />
<a href="http://blog.circleci.com/rewriting-your-test-suite-in-clojure-in-24-hours/">http://blog.circleci.com/rewriting-your-test-suite-in-clojure-in-24-hours/</a>
</li>

<li>Clojure doc: zipper<br />
<a href="http://clojuredocs.org/clojure.zip/zipper">http://clojuredocs.org/clojure.zip/zipper</a>
</li>

<li>Clojure doc: parse<br />
<a href="http://clojuredocs.org/clojure.xml/parse">http://clojuredocs.org/clojure.xml/parse</a>
</li>

<li>Clojure doc: xml-zip<br />
<a href="http://clojuredocs.org/clojure.zip/xml-zip">http://clojuredocs.org/clojure.zip/xml-zip</a>
</li>

<li>Clojure doc: xml-seq<br />
<a href="http://clojuredocs.org/clojure.core/xml-seq">http://clojuredocs.org/clojure.core/xml-seq</a>
</li>

<li>Parsing XML in Clojure<br />
<a href="https://github.com/clojuredocs/guides">https://github.com/clojuredocs/guides</a>
</li>

<li>Clojure Zipper Over Nested Vector<br />
<a href="https://vitalyper.wordpress.com/2010/11/23/clojure-zipper-over-nested-vector/">https://vitalyper.wordpress.com/2010/11/23/clojure-zipper-over-nested-vector/</a>
</li>

<li>Understanding Clojure's PersistentVector implementation<br />
<a href="http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation">http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation</a>
</li>

<li>Understanding Clojure's PersistentHashMap (deftwice...)<br />
<a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice.html">http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice.html</a>
</li>

<li>Assoc and Clojure's PersistentHashMap: part ii<br />
<a href="http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii.html">http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii.html</a>
</li>

<li>Ideal Hashtrees (paper)<br />
<a href="http://lampwww.epfl.ch/papers/idealhashtrees.pdf">http://lampwww.epfl.ch/papers/idealhashtrees.pdf</a>
</li>

<li>Clojure home page<br />
<a href="http://clojure.org/">http://clojure.org/</a>
</li>

<li>Clojure (downloads)<br />
<a href="http://clojure.org/downloads">http://clojure.org/downloads</a>
</li>

<li>Clojure Sequences<br />
<a href="http://clojure.org/sequences">http://clojure.org/sequences</a>
</li>

<li>Clojure Data Structures<br />
<a href="http://clojure.org/data_structures">http://clojure.org/data_structures</a>
</li>

<li>The Structure and Interpretation of Computer Programs: 2.2.1  Representing Sequences<br />
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%_sec_2.2.1">http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%_sec_2.2.1</a>
</li>

<li>The Structure and Interpretation of Computer Programs: 3.3.1  Mutable List Structure<br />
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%_sec_3.3.1">http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%_sec_3.3.1</a>
</li>

<li>Clojure - Functional Programming for the JVM<br />
<a href="http://java.ociweb.com/mark/clojure/article.html">http://java.ociweb.com/mark/clojure/article.html</a>
</li>

<li>Clojure quick reference<br />
<a href="http://faustus.webatu.com/clj-quick-ref.html">http://faustus.webatu.com/clj-quick-ref.html</a>
</li>

<li>4Clojure<br />
<a href="http://www.4clojure.com/">http://www.4clojure.com/</a>
</li>

<li>ClojureDoc (rozcestník s&nbsp;dokumentací jazyka Clojure)<br />
<a href="http://clojuredocs.org/">http://clojuredocs.org/</a>
</li>

<li>Clojure (na Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Clojure">http://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Clojure (na Wikipedia CS)<br />
<a href="http://cs.wikipedia.org/wiki/Clojure">http://cs.wikipedia.org/wiki/Clojure</a>
</li>

<li>SICP (The Structure and Interpretation of Computer Programs)<br />
<a href="http://mitpress.mit.edu/sicp/">http://mitpress.mit.edu/sicp/</a>
</li>

<li>Pure function<br />
<a href="http://en.wikipedia.org/wiki/Pure_function">http://en.wikipedia.org/wiki/Pure_function</a>
</li>

<li>Funkcionální programování<br />
<a href="http://cs.wikipedia.org/wiki/Funkcionální_programování">http://cs.wikipedia.org/wiki/Funkcionální_programování</a>
</li>

<li>Čistě funkcionální (datové struktury, jazyky, programování)<br />
<a href="http://cs.wikipedia.org/wiki/Čistě_funkcionální">http://cs.wikipedia.org/wiki/Čistě_funkcionální</a>
</li>

<li>Clojure Macro Tutorial (Part I, Getting the Compiler to Write Your Code For You)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html</a>
</li>

<li>Clojure Macro Tutorial (Part II: The Compiler Strikes Back)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html</a>
</li>

<li>Clojure Macro Tutorial (Part III: Syntax Quote)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html</a>
</li>

<li>Tech behind Tech: Clojure Macros Simplified<br />
<a href="http://techbehindtech.com/2010/09/28/clojure-macros-simplified/">http://techbehindtech.com/2010/09/28/clojure-macros-simplified/</a>
</li>

<li>Fatvat - Exploring functional programming: Clojure Macros<br />
<a href="http://www.fatvat.co.uk/2009/02/clojure-macros.html">http://www.fatvat.co.uk/2009/02/clojure-macros.html</a>
</li>

<li>Eulerovo číslo<br />
<a href="http://cs.wikipedia.org/wiki/Eulerovo_číslo">http://cs.wikipedia.org/wiki/Eulerovo_číslo</a>
</li>

<li>List comprehension<br />
<a href="http://en.wikipedia.org/wiki/List_comprehension">http://en.wikipedia.org/wiki/List_comprehension</a>
</li>

<li>List Comprehensions in Clojure<br />
<a href="http://asymmetrical-view.com/2008/11/18/list-comprehensions-in-clojure.html">http://asymmetrical-view.com/2008/11/18/list-comprehensions-in-clojure.html</a>
</li>

<li>Clojure Programming Concepts: List Comprehension<br />
<a href="http://en.wikibooks.org/wiki/Clojure_Programming/Concepts#List_Comprehension">http://en.wikibooks.org/wiki/Clojure_Programming/Concepts#List_Comprehension</a>
</li>

<li>Clojure core API: for macro<br />
<a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/for">http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/for</a>
</li>

<li>cirrus machina - The Clojure for macro<br />
<a href="http://www.cirrusmachina.com/blog/comment/the-clojure-for-macro/">http://www.cirrusmachina.com/blog/comment/the-clojure-for-macro/</a>
</li>

<li>Riastradh's Lisp Style Rules<br />
<a href="http://mumble.net/~campbell/scheme/style.txt">http://mumble.net/~campbell/scheme/style.txt</a>
</li>

<li>Dynamic Languages Strike Back<br />
<a href="http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html">http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html</a>
</li>

<li>Scripting: Higher Level Programming for the 21st Century<br />
<a href="http://www.tcl.tk/doc/scripting.html">http://www.tcl.tk/doc/scripting.html</a>
</li>

<li>Java Virtual Machine Support for Non-Java Languages<br />
<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html">http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html</a>
</li>

<li>Třída java.lang.String<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html">http://docs.oracle.com/javase/7/docs/api/java/lang/String.html</a>
</li>

<li>Třída java.lang.StringBuffer<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html">http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html</a>
</li>

<li>Třída java.lang.StringBuilder<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html">http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html</a>
</li>

<li>StringBuffer versus String<br />
<a href="http://www.javaworld.com/article/2076072/build-ci-sdlc/stringbuffer-versus-string.html">http://www.javaworld.com/article/2076072/build-ci-sdlc/stringbuffer-versus-string.html</a>
</li>

<li>Threading macro (dokumentace k&nbsp;jazyku Clojure)<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;</a>
</li>

<li>Understanding the Clojure -&gt; macro<br />
<a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/</a>
</li>

<li>clojure.inspector<br />
<a href="http://clojure.github.io/clojure/clojure.inspector-api.html">http://clojure.github.io/clojure/clojure.inspector-api.html</a>
</li>

<li>The Clojure Toolbox<br />
<a href="http://www.clojure-toolbox.com/">http://www.clojure-toolbox.com/</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

<li>Clojure.org: Vars and the Global Environment<br />
<a href="http://clojure.org/Vars">http://clojure.org/Vars</a>
</li>

<li>Clojure.org: Refs and Transactions<br />
<a href="http://clojure.org/Refs">http://clojure.org/Refs</a>
</li>

<li>Clojure.org: Atoms<br />
<a href="http://clojure.org/Atoms">http://clojure.org/Atoms</a>
</li>

<li>Clojure.org: Agents as Asynchronous Actions<br />
<a href="http://clojure.org/agents">http://clojure.org/agents</a>
</li>

<li>Transient Data Structures
<a href="http://clojure.org/transients">http://clojure.org/transients</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

