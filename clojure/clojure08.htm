<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Leiningen: nástroj pro správu projektů napsaných v Clojure (pluginy pro Leiningen)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Leiningen: nástroj pro správu projektů napsaných v Clojure (pluginy pro Leiningen)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části článku o nástroji Leiningen určeného pro správu projektů vytvořených v programovacím jazyku Clojure si popíšeme některé pluginy Leiningenu. Připomeneme si existenci pluginu test2junit a dále se zaměříme na pluginy lein-ring, codox (generování dokumentace) a cloverage (zjištění pokrytí kódu testy).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Leiningen: nástroj pro správu projektů napsaných v Clojure (pluginy pro Leiningen)</a></p>
<p><a href="#k02">2. Plugin test2junit &ndash; jednotkové testy s&nbsp;výstupem kompatibilním s&nbsp;JUnit</a></p>
<p><a href="#k03">3. Plugin lein-ring &ndash; automatizace úloh souvisejících s&nbsp;webovými aplikacemi</a></p>
<p><a href="#k04">4. Automatické znovunačtení modulů při změně jejich zdrojového kódu</a></p>
<p><a href="#k05">5. Vytvoření WAR souboru s&nbsp;webovou aplikací</a></p>
<p><a href="#k06">6. Plugin codox &ndash; tvorba dokumentace v&nbsp;HTML formátu</a></p>
<p><a href="#k07">7. Plugin cloverage &ndash; zjištění pokrytí kódu testy</a></p>
<p><a href="#k08">8. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k09">9. Odkazy na předchozí části seriálu</a></p>
<p><a href="#k10">10. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Leiningen: nástroj pro správu projektů napsaných v Clojure (pluginy pro Leiningen)</h2>

<p>V&nbsp;dnešní části článku o programovacím jazyku <i>Clojure</i> i o
nástroji <i>Leiningen</i> se vrátíme k&nbsp;problematice pluginů vytvořených
pro <i>Leiningen</i>. Tento nástroj je (minimálně ve své druhé verzi) řešen
modulárním způsobem, což mj.&nbsp;znamená, že do <i>Leiningenu</i> je možné
&bdquo;zaregistrovat&ldquo; prakticky libovolnou aplikaci sloužící například
pro správu projektů, správu či monitorování běžících aplikací, generování
dokumentace, zjištění pokrytí aplikace testy apod. Po instalaci pluginu je
<i>Leiningen</i> rozšířen o další příkazy a parametry &ndash; ty lze považovat
za nové úlohy, které lze přes příkaz <strong>lein</strong> spustit. Naprostá
většina programátorů využívajících programovací jazyk <i>Clojure</i> a nástroj
<i>Leiningen</i> sice vlastní pluginy nevytváří, na druhou stranu použití již
naprogramovaných pluginů je velmi jednoduché a co je možná ještě podstatnější
&ndash; některé pluginy dokážou urychlit a zpříjemnit vývoj. Seznam pluginů lze
nalézt na adrese <a
href="https://github.com/technomancy/leiningen/wiki/Plugins">https://github.com/technomancy/leiningen/wiki/Plugins</a>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Plugin test2junit &ndash; jednotkové testy s&nbsp;výstupem kompatibilním s&nbsp;JUnit</h2>

<p>O pluginu nazvaném <i>test2junit</i> jsme se již zmiňovali
v&nbsp;předchozích částech tohoto článku, takže si dnes jen stručně řekněme,
v&nbsp;čem spočívá význam tohoto modulu. <i>Leiningen</i> již ve své původní
variantě podporuje spouštění testů, ovšem formát výsledků testů není
kompatibilní s&nbsp;dnes de facto standardem představovaným nástrojem
<i>JUnit</i>. Právě z&nbsp;tohoto důvodu je plugin <i>test2junit</i> velmi
užitečný, protože taktéž dokáže spustit testy a následně vygenerovat XML soubor
s&nbsp;výsledky, přičemž formát tohoto souboru je kompatibilní
s&nbsp;<i>JUnit</i>. Výsledný soubor je možné dále zpracovat dalšími nástroji,
například lze velmi snadno přidat nový job s&nbsp;testy aplikace vytvořené
v&nbsp;programovacím jazyku <i>Clojure</i> do Jenkinsu atd.</p>

<p>Pro úplnost se podívejme na jednoduchý demonstrační příklad obsahující jednu
funkci, která je následně otestována dvojicí testů, u nichž se předpokládá
pozitivní výsledek a dvojicí testů, u nichž se naopak očekává výsledek
negativní.</p>

<p>Soubor <strong>project.clj</strong>. Zde si povšimněte především deklarace
používaného pluginu &ndash; jedná se o zvýrazněný řádek (všechny pluginy
<i>Leiningenu</i> se zapisují pod tento klíč):</p>

<pre>
(defproject factorial "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]]
  :main ^:skip-aot factorial.core
  :target-path "target/%s"
  <strong>:plugins [[test2junit "1.1.0"]]</strong>
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový kód demonstračního příkladu (ten již známe z&nbsp;předchozích částí
článku):</p>

<pre>
(ns <strong>factorial.core</strong>
  (:gen-class))
&nbsp;
(defn <strong>factorial</strong>
    [n]
    (if (neg? n)
        (throw (IllegalArgumentException. "negative numbers are not supported!"))
        (apply * (range 1 (inc n)))))
&nbsp;
(defn <strong>-main</strong>
    "<i>I don't do a whole lot ... yet."</i>
    [&amp; args]
    (doseq [i (range 0 10)]
        (println i "! = " (factorial i))))
</pre>

<p>Testy uložené v&nbsp;adresáři <strong>test/factorial</strong>; povšimněte
si, že jsou použity jak pozitivní, tak i negativní testy (u nichž je zaručeno,
že neprojdou):</p>

<pre>
(ns <strong>factorial.core-test</strong>
  (:require [clojure.test :refer :all]
            [factorial.core :refer :all]))
&nbsp;
(deftest <strong>factorial-test</strong>
    (testing "Factorial"
        (is ( = (factorial 0)   1) "beginning")
        (is ( = (factorial 1)   1) "beginning")
        (is ( = (factorial 2)   (* 1 2)) "still easy")
        (is ( = (factorial 5)   (* 1 2 3 4 5)) "5!")
        (is ( = (factorial 6)   720) "6!")))
&nbsp;
(deftest <strong>negative-factorial-test</strong>
    (testing "Negative tests"
        (is ( = (factorial 0)   0) "negative test case #1")
        (is ( = (factorial 1)   0) "negative test case #2")
        (is ( = (factorial 2)   0) "negative test case #3")))
&nbsp;
(deftest <strong>exception-test</strong>
    (testing "If factorial throws exception"
        (is (thrown? IllegalArgumentException (factorial -1)))
        (is (thrown? IllegalArgumentException (factorial -2)))
        (is (thrown? IllegalArgumentException (factorial -100)))))
&nbsp;
(deftest <strong>negative-exception-test</strong>
    (testing "(negative test) If factorial throws exception"
        (is (thrown? IllegalArgumentException (factorial 1)))
        (is (thrown? IllegalArgumentException (factorial 2)))
        (is (thrown? IllegalArgumentException (factorial 3)))))

</pre>

<p>Spuštění testů běžným způsobem:</p>

<pre>
<strong>lein test</strong>
&nbsp;
lein test factorial.core-test
&nbsp;
lein test :only factorial.core-test/negative-exception-test
&nbsp;
FAIL in (negative-exception-test) (core_test.clj:27)
(negative test) If factorial throws exception
expected: (thrown? IllegalArgumentException (factorial 1))
  actual: nil
&nbsp;
lein test :only factorial.core-test/negative-exception-test
&nbsp;
FAIL in (negative-exception-test) (core_test.clj:28)
(negative test) If factorial throws exception
expected: (thrown? IllegalArgumentException (factorial 2))
  actual: nil
&nbsp;
lein test :only factorial.core-test/negative-exception-test
&nbsp;
FAIL in (negative-exception-test) (core_test.clj:29)
(negative test) If factorial throws exception
expected: (thrown? IllegalArgumentException (factorial 3))
  actual: nil
&nbsp;
lein test :only factorial.core-test/negative-factorial-test
&nbsp;
FAIL in (negative-factorial-test) (core_test.clj:15)
Negative tests
negative test case #1
expected: (= (factorial 0) 0)
  actual: (not (= 1 0))
&nbsp;
lein test :only factorial.core-test/negative-factorial-test
&nbsp;
FAIL in (negative-factorial-test) (core_test.clj:16)
Negative tests
negative test case #2
expected: (= (factorial 1) 0)
  actual: (not (= 1 0))
&nbsp;
lein test :only factorial.core-test/negative-factorial-test
&nbsp;
FAIL in (negative-factorial-test) (core_test.clj:17)
Negative tests
negative test case #3
expected: (= (factorial 2) 0)
  actual: (not (= 2 0))
&nbsp;
Ran 4 tests containing 14 assertions.
6 failures, 0 errors.
&nbsp;
Tests failed.
</pre>

<p>Spuštění testů s&nbsp;vygenerováním výsledku kompatibilního
s&nbsp;JUnit:</p>

<pre>
<strong>lein test2junit</strong>
</pre>

<p>Vygenerovaný soubor s&nbsp;výsledky testů:</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;testsuite name="factorial.core-test" errors="0" failures="6" tests="4" time="0.0669" timestamp="2015-04-01_19:29:27+0200"&gt;
    &lt;testcase name="negative-exception-test" classname="factorial.core-test" time="0.0106"&gt;
    &lt;failure&gt;expected: (thrown? IllegalArgumentException (factorial 1))
  actual: nil
      at: AFn.java:18&lt;/failure&gt;
    &lt;failure&gt;expected: (thrown? IllegalArgumentException (factorial 2))
  actual: nil
      at: AFn.java:18&lt;/failure&gt;
    &lt;failure&gt;expected: (thrown? IllegalArgumentException (factorial 3))
  actual: nil
      at: AFn.java:18&lt;/failure&gt;
    &lt;/testcase&gt;
    &lt;testcase name="negative-factorial-test" classname="factorial.core-test" time="0.0064"&gt;
    &lt;failure message="negative test case #1"&gt;negative test case #1
expected: (= (factorial 0) 0)
  actual: (not (= 1 0))
      at: AFn.java:18&lt;/failure&gt;
    &lt;failure message="negative test case #2"&gt;negative test case #2
expected: (= (factorial 1) 0)
  actual: (not (= 1 0))
      at: AFn.java:18&lt;/failure&gt;
    &lt;failure message="negative test case #3"&gt;negative test case #3
expected: (= (factorial 2) 0)
  actual: (not (= 2 0))
      at: AFn.java:18&lt;/failure&gt;
    &lt;/testcase&gt;
    &lt;testcase name="factorial-test" classname="factorial.core-test" time="0.0025"&gt;
    &lt;/testcase&gt;
    &lt;testcase name="exception-test" classname="factorial.core-test" time="0.0013"&gt;
    &lt;/testcase&gt;
&lt;/testsuite&gt;
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Plugin lein-ring &ndash; automatizace úloh souvisejících s&nbsp;webovými aplikacemi</h2>

<p>Dalším zajímavým pluginem je modul nazvaný <i>lein-ring</i>. Název tohoto
přídavného modulu již alespoň částečně napovídá, že se jedná o plugin určený
pro správu aplikací využívajících <i>Clojure Ring</i>, což je knihovna
používaná především pro tvorbu webových aplikací (možnosti této knihovny jsme
si již poměrně dopodrobna popsali v&nbsp;předchozích dílech tohoto článku).
Vraťme se však k&nbsp;modulu <i>lein-ring</i>. Po jeho instalaci je nástroj
<i>Leiningen</i> rozšířen o další příkazy i o další funkcionalitu. Mezi nově
nabízené možnosti patří zejména:</p>

<ol>
<li>spuštění webového serveru, nasazení aplikace a spuštění prohlížeče s&nbsp;otevřenou aplikací</li>
<li>dtto, ovšem bez spuštění prohlížeče (takzvaný režim <i>headless</i>)</li>
<li>detekce změn ve zdrojovém kódu a automatický update aplikace nasazené na serveru</li>
<li>vytvoření souboru .war (web archive) určeného pro nasazení do servlet kontejneru</li>
<li>vytvoření souboru &bdquo;uberwar&ldquo;, což je obdoba předchozího archivu, ovšem obsahujícího i všechny potřebné knihovny</li>
</ol>

<p>Dvě z&nbsp;těchto vlastností si popíšeme v&nbsp;navazujících dvou
kapitolách.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Automatické znovunačtení modulů při změně jejich zdrojového kódu</h2>

<p>Nejprve si odzkoušíme první tři funkce nabízené výše zmíněným pluginem
<i>lein-ring</i>. S&nbsp;pomocí příkazu <strong>lein new app ringapp1</strong>
vytvoříme nový projekt a upravíme jeho projektový soubor takovým způsobem, aby
se používal plugin <i>lein-ring</i>. Navíc je zde uveden řádek začínající
klíčem <strong>:ring</strong>, kterým je naznačeno, kde má plugin hledat
definici webové aplikace. Tento řádek je využit při automatických změnách
aplikace nasazené na webovém serveru ve chvíli, kdy se detekuje změna ve
zdrojových kódech:</p>

<pre>
(defproject ringapp1 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 [ring/ring-core "1.3.2"]
                 [ring/ring-jetty-adapter "1.3.2"]
                 [hiccup "1.0.4"]
                 [org.clojure/tools.cli "0.3.1"]]
  <strong>:dev-dependencies [[lein-ring "0.8.10"]]</strong>
  <strong>:plugins [[lein-ring "0.8.10"]]</strong>
  :main ^:skip-aot ringapp1.core
  :target-path "target/%s"
  <strong>:ring     {:handler ringapp1.core/app}</strong>
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Kód webové aplikace je poměrně jednoduchý a navíc jsme se s&nbsp;ním již
setkali při popisu knihoven <i>Clojure Ring</i> a <i>Hiccup</i>. Jedná se o
aplikaci zobrazující tabulku faktoriálů, přičemž uživatel může ve webovém
formuláři specifikovat rozsah vstupních hodnot:</p>

<pre>
(ns <strong>ringapp1.core</strong>
  (:gen-class))
&nbsp;
(require '[ring.adapter.jetty     :as jetty])
(require '[ring.middleware.params :as http-params])
(require '[ring.util.response     :as response])
&nbsp;
(require '[hiccup.page :as page])
(require '[hiccup.form :as form])
&nbsp;
(defn <strong>fact</strong>
    [n]
    (apply * (range 1M (inc n))))
&nbsp;
(defn <strong>html-page</strong>
    [max-n]
    (page/xhtml
        [:head
            [:title "Ring app #1"]
            [:meta {:name "Generator" :content "Clojure"}]
            [:meta {:http-equiv "Content-type" :content "text/html; charset=utf-8"}]
        ]
        [:body
            [:h1 "Ring app #1"]
            (form/form-to [:get "/"]
                (form/text-field {:size "20"} "max-n" max-n)
                [:br]
                (form/submit-button "Recalculate"))
            [:br]
            [:table {:style "border:2px solid brown;background-color:#ace"}
                [:tr [:th "n"] [:th "n!"]]
                (for [n (range 0M (inc max-n))]
                    [:tr [:td n] [:td {:style "text-align:right"} (fact n)]])
            ]
        ]))
&nbsp;
(defn <strong>param-&gt;number</strong>
    <i>"Prevod parametru specifikovaneho v param-name na cislo typu BigDecimal."</i>
    [params param-name]
    (let [param (get params param-name)]
        (try
            (bigdec param)             ; pokus o prevod na BigDecimal
            (catch Exception e nil)))) ; pokud se prevod nepovede, vraci se nil
&nbsp;
(defn <strong>handler</strong>
    <i>"Zpracovani pozadavku."</i>
    [request]
    (let [params (:params request)
          max-n  (param-&gt;number params "max-n")]
        (println "Params: " params)
        (println "max-n:  " max-n)
        (-&gt; (response/response (html-page (if max-n max-n 10M)))
            (response/content-type "text/html; charset=utf-8"))))
&nbsp;
(def <strong>app</strong>
    <i>"Datova struktura predstavujici kostru webove aplikace."</i>
    (-&gt; handler
        http-params/wrap-params))
&nbsp;
(defn <strong>-main</strong>
    <i>"Spusteni webove aplikace na portu 8080."</i>
    [&amp; args]
    (jetty/run-jetty app {:port 8080}))
</pre>

<p>Tuto aplikaci je možné spustit různými způsoby. Základní způsob již známe:</p>

<pre>
lein run
</pre>

<p>Na standardním výstupu by se měly objevit následující zprávy:</p>

<pre>
2015-04-01 21:25:36.267:INFO:oejs.Server:jetty-7.6.13.v20130916
2015-04-01 21:25:36.345:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8080
</pre>

<p>Vidíme, že aplikace je otevřena na portu 8080.</p>

<p>Alternativně lze aplikaci spustit příkazem zajišťujícím provedení spuštění
přes plugin <i>lein-ring</i>:</p>

<pre>
lein ring server
</pre>

<p>Po provedení tohoto příkazu by se měly stát dvě věci &ndash; měl by se
otevřít webový prohlížeč s&nbsp;aplikací a paralelně s&nbsp;tím by se měly na
standardním výstupu objevit informace o spuštění na portu 3000. Poslední dva
řádky vypisuje samotná aplikace, protože byla otevřena v&nbsp;prohlížeči a
tudíž klient poslal dotaz(y) serveru:</p>

<pre>
2015-04-01 21:26:11.472:INFO:oejs.Server:jetty-7.6.13.v20130916
2015-04-01 21:26:11.494:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:3000
Started server on port 3000
Params:  {}
max-n:   nil
Params:  {}
max-n:   nil
</pre>

<p>Alternativně je možné následujícím příkazem provést prakticky stejnou
operaci, akorát bez spuštění prohlížeče:</p>

<pre>
lein ring server-headless
</pre>

<pre>
2015-04-01 21:26:42.900:INFO:oejs.Server:jetty-7.6.13.v20130916
2015-04-01 21:26:42.923:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:3000
Started server on port 3000
</pre>

<p>Proč je však vhodné aplikaci spouštět přes <strong>lein ring server</strong>
a nikoli pomocí pouhého <strong>lein run</strong>? Rozdíl spočívá v&nbsp;tom,
že plugin <i>lein-ring</i> detekuje změny provedené ve zdrojových kódech a
ihned tyto změny aplikuje na běžící aplikaci. To je velmi užitečné, ať již při
ladění, tak i při interaktivním (či polointeraktivním) způsobu vývoje.
Teoreticky je možné takto spuštěnou aplikaci nasadit na server a případné
požadavky uživatelů řešit na &bdquo;živém kódu&ldquo; :-) (kupodivu se to pro
některé aplikace, zejména intranetové, osvědčilo).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vytvoření WAR souboru s&nbsp;webovou aplikací</h2>

<p>Další zajímavou funkcí modulu <i>lein-ring</i> je možnost vytvoření webových
archivů (WAR) obsahujících aplikaci přeloženou do bajtkódu Javy. Takto
zabalenou aplikaci lze nasadit na prakticky jakýkoli servlet kontejner,
například na Tomcat. Vytvoření archivu je velmi snadné:</p>

<pre>
lein clean
lein ring war
&nbsp;
Created /home/ptisnovsk/repos/clojure-examples/leinring1/target/ringapp1-0.1.0-SNAPSHOT.war
</pre>

<p>Vytvořený soubor má velikost 368kB a po jeho prohlédnutí je patrné, že
skutečně obsahuje soubory <strong>.class</strong> a několik nezbytných
konfiguračních souborů:</p>

<pre>
ls -l target/*.war
-rw-rw-r--. 1 ptisnovs ptisnovs 376389 Apr  1 21:30 <strong>target/ringapp1-0.1.0-SNAPSHOT.war</strong>
</pre>

<p>Ve chvíli, kdy je nutné nasadit aplikaci na servlet kontejner neobsahující
všechny potřebné knihovny, může být důležitější použití dalšího příkazu:</p>

<pre>
lein clean
lein ring uberwar
&nbsp;
Created /home/ptisnovsk/repos/clojure-examples/leinring1/target/ringapp1-0.1.0-SNAPSHOT-standalone.war
</pre>

<p>Tento příkaz vytvoří mnohem větší soubor (5,3MB) obsahující kromě přeložené
aplikace i všechny potřebné knihovny:</p>

<pre>
ls -l target/*.war
-rw-rw-r--. 1 ptisnovs ptisnovs 5472405 Apr  1 21:31 <strong>target/ringapp1-0.1.0-SNAPSHOT-standalone.war</strong>
-rw-rw-r--. 1 ptisnovs ptisnovs  376389 Apr  1 21:30 target/ringapp1-0.1.0-SNAPSHOT.war
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Plugin codox &ndash; tvorba dokumentace v&nbsp;HTML formátu</h2>

<p>Třetí přídavný modul určený pro nástroj <i>Leiningen</i>, s&nbsp;nímž se
v&nbsp;dnešním článku seznámíme, se jmenuje <i>codox</i>. Tento plugin je
v&nbsp;současnosti velmi populární, protože slouží pro tvorbu programové
dokumentace pro mnoho knihoven naprogramovaných v&nbsp;<i>Clojure</i>.
Dokumentace je vygenerována do souborů HTML, jedná se tedy o obdobu
<i>JavaDocu</i> (tvorba programové dokumentace pro javovské aplikace)
popř.&nbsp;<i>Doxygenu</i> (podobný nástroj určený pro programovací jazyky C,
C++, Python, PHP atd.), samozřejmě  s&nbsp;tím rozdílem, že <i>codox</i>
pracuje se jmennými prostory, funkcemi, globálními deklaracemi i &ndash;
alespoň do určité míry &ndash; s&nbsp;makry.</p>

<p>Podívejme se nyní na to, jak může vygenerovaná dokumentace vypadat.
Vytvoříme novou aplikaci:</p>

<pre>
lein new app codoxtest
</pre>

<p>V&nbsp;aplikaci vytvoříme tři moduly:
<strong>src/codoxtest/core.clj</strong>,
<strong>src/codoxtest/module_a.clj</strong> a
<strong>src/codoxtest/module_b.clj</strong> s&nbsp;prakticky stejnými
proměnnými, makrem a funkcemi:</p>

<pre>
(ns <strong>codoxtest.core</strong>
    <i>"Popis modulu 'core'"</i>)
&nbsp;
(defn <strong>-main</strong>
    <i>"I don't do a whole lot ... yet."</i>
    [&amp; args]
    (println "Hello, World!"))
&nbsp;
(defn <strong>f1</strong>
    <i>"Popis funkce f1."</i>
    [])
&nbsp;
(defn <strong>f2</strong>
    <i>"Popis funkce f2."</i>
    [x]
    (inc x))
&nbsp;
(defn <strong>f3</strong>
    <i>"Popis funkce f2."</i>
    [x y]
    (+ x y))
&nbsp;
(def <strong>answer</strong>
    <i>"The Answer to the Ultimate Question of Life, the Universe, and Everything"</i>
    42)
&nbsp;
(defmacro <strong>unless</strong>
    <i>"Makro prevzate z dokumentace Clojure."</i>
    [pred a b]
    `(if (not ~pred) ~a ~b))
</pre>

<pre>
(ns <strong>codoxtest.module-a</strong>
    <i>"Popis modulu se jmenem 'module-a'"</i>)
&nbsp;
(defn <strong>f1</strong>
    <i>"Popis funkce f1."</i>
    [])
&nbsp;
(defn <strong>f2</strong>
    <i>"Popis funkce f2."</i>
    [x]
    (inc x))
&nbsp;
(defn <strong>f3</strong>
    <i>"Popis funkce f2."</i>
    [x y]
    (+ x y))
&nbsp;
(def <strong>answer</strong>
    <i>"The Answer to the Ultimate Question of Life, the Universe, and Everything"</i>
    42)
&nbsp;
(defmacro <strong>unless</strong>
    <i>"Makro prevzate z dokumentace Clojure."</i>
    [pred a b]
    `(if (not ~pred) ~a ~b))
</pre>

<pre>
(ns <strong>codoxtest.module-b</strong>
    <i>"Popis modulu se jmenem 'module-b'"</i>)
&nbsp;
(defn <strong>f1</strong>
    <i>"Popis funkce f1."</i>
    [])
&nbsp;
(defn <strong>f2</strong>
    <i>"Popis funkce f2."</i>
    [x]
    (inc x))
&nbsp;
(defn <strong>f3</strong>
    <i>"Popis funkce f2."</i>
    [x y]
    (+ x y))
&nbsp;
(def <strong>answer</strong>
    <i>"The Answer to the Ultimate Question of Life, the Universe, and Everything"</i>
    42)
&nbsp;
(defmacro <strong>unless</strong>
    <i>"Makro prevzate z dokumentace Clojure."</i>
    [pred a b]
    `(if (not ~pred) ~a ~b))
</pre>

<p>Projektový soubor <strong>project.clj</strong> musí vypadat následovně
(povšimněte si nového pluginu):</p>

<pre>
(defproject codoxtest "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]]
  :main ^:skip-aot codoxtest.core
  :target-path "target/%s"
  <strong>:plugins [[codox "0.8.11"]]</strong>
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Vygenerování dokumentace se provede příkazem:</p>

<pre>
lein doc
Generated HTML docs in /home/ptisnovsk/repos/clojure-examples/codoxtest/doc
</pre>

<p>Vygenerovanou dokumentaci je možné nalézt na adrese <a
href="https://github.com/tisnik/clojure-examples/tree/master/codoxtest/doc">https://github.com/tisnik/clojure-examples/tree/master/codoxtest/doc</a>.</p>

<img src="http://i.iinfo.cz/images/4/clojure8-1.png" class="image-202481" alt="&#160;" height="521" width="624" />
<p><i>Obrázek 1: Vygenerovaná dokumentace &ndash; seznam všech modulů.</i></p>

<img src="http://i.iinfo.cz/images/4/clojure8-2.png" class="image-202482" alt="&#160;" height="508" width="614" />
<p><i>Obrázek 2: Vygenerovaná dokumentace &ndash; popis vybraného modulu.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Plugin cloverage &ndash; zjištění pokrytí kódu testy</h2>

<p>Posledním pluginem určeným pro nástroj <i>Leiningen</i>, který si dnes
popíšeme, je modul nazvaný <i>cloverage</i>. Úkolem tohoto modulu je zjištění,
které části programového kódu jsou pokryté testy, tj.&nbsp;opět se jedná o
analogii k&nbsp;podobným nástrojům existujícím i pro další programovací jazyky,
ovšem s&nbsp;tím rozdílem, že kvůli použití maker je zjištění pokrytí testy
v&nbsp;programovacím jazyku <i>Clojure</i> složitější.</p>

<p>Funkci tohoto pluginu otestujeme jednoduše &ndash; použijeme upravený
projekt pro výpočet faktoriálu, do nějž jsou přidány další dvě totožné funkce,
které se od sebe odlišují pouze jménem:</p>

<pre>
(ns <strong>cloverage.core</strong>
  (:gen-class))
&nbsp;
(defn <strong>factorial</strong>
    [n]
    (if (neg? n)
        (throw (IllegalArgumentException. "negative numbers are not supported!"))
        (apply * (range 1 (inc n)))))
&nbsp;
(defn <strong>factorial2</strong>
    [n]
    (if (neg? n)
        (throw (IllegalArgumentException. "negative numbers are not supported!"))
        (apply * (range 1 (inc n)))))
&nbsp;
(defn <strong>factorial3</strong>
    [n]
    (if (neg? n)
        (throw (IllegalArgumentException. "negative numbers are not supported!"))
        (apply * (range 1 (inc n)))))
&nbsp;
(defn <strong>-main</strong>
    "I don't do a whole lot ... yet."
    [&amp; args]
    (doseq [i (range 0 10)]
        (println i "! = " (factorial i))))
</pre>

<p>Projektový soubor <strong>project.clj</strong> musí vypadat následovně (opět
si povšimněte nového pluginu):</p>

<pre>
(defproject cloverage "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]]
  :main ^:skip-aot cloverage.core
  :target-path "target/%s"
  <strong>:plugins [[lein-cloverage "1.0.2"]]</strong>
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Nejzajímavější jsou jednotkové testy. Povšimněte si, že funkce
<i>factorial1</i> je otestována celá, tj.&nbsp;včetně obou větví, funkce
<i>factorial2</i> je otestována jen částečně (pouze jedna větev) a nakonec
funkce <i>factorial3</i> není otestována vůbec. Tyto rozdíly by se měly
projevit ve výsledcích:</p>

<pre>
(ns <strong>cloverage.core-test</strong>
  (:require [clojure.test :refer :all]
            [cloverage.core :refer :all]))
&nbsp;
(deftest <strong>factorial-test</strong>
    (testing "Factorial"
        (is ( = (factorial 0)   1) "beginning")
        (is ( = (factorial 1)   1) "beginning")
        (is ( = (factorial 2)   (* 1 2)) "still easy")
        (is ( = (factorial 5)   (* 1 2 3 4 5)) "5!")
        (is ( = (factorial 6)   720) "6!")))
&nbsp;
(deftest <strong>factorial2-test</strong>
    (testing "Factorial"
        (is ( = (factorial2 0)   1) "beginning")
        (is ( = (factorial2 1)   1) "beginning")
        (is ( = (factorial2 2)   (* 1 2)) "still easy")
        (is ( = (factorial2 5)   (* 1 2 3 4 5)) "5!")
        (is ( = (factorial2 6)   720) "6!")))
&nbsp;
(deftest <strong>exception-test</strong>
    (testing "If factorial throws exception"
        (is (thrown? IllegalArgumentException (factorial -1)))
        (is (thrown? IllegalArgumentException (factorial -2)))
        (is (thrown? IllegalArgumentException (factorial -100)))))
</pre>

<p>Nyní je nutné spustit novou úlohu:</p>

<pre>
<strong>lein cloverage</strong>
Loading namespaces:  (cloverage.core)
Test namespaces:  (cloverage.core-test)
Loaded  cloverage.core  .
Instrumented namespaces.
&nbsp;
Testing cloverage.core-test
&nbsp;
Ran 3 tests containing 13 assertions.
0 failures, 0 errors.
Ran tests.
Produced output in /home/ptisnovsk/repos/clojure-examples/cloverage/target/coverage .
HTML: file:///home/ptisnovsk/repos/clojure-examples/cloverage/target/coverage/index.html
</pre>

<p>Podívejme se nyní na výsledky &ndash; zdá se, že skutečně odpovídají
testům:</p>

<img src="http://i.iinfo.cz/images/4/clojure8-3.png" class="image-202483" alt="&#160;" height="180" width="693" />
<p><i>Obrázek 3: Pokrytí zdrojového kódu testy &ndash; celková
statistika.</i></p>

<a href="http://www.root.cz/obrazek/202484/"><img src="http://i.iinfo.cz/images/4/clojure8-4-prev.png" class="image-202484" alt="&#160;" height="222" width="370" /></a>
<p><i>Obrázek 4: Pokrytí zdrojového kódu testy &ndash; zelené řádky byly
vyhodnoceny, červené nikoli (bílé řádky nepředstavují zdrojový kód).</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popsané demonstrační příklady byly, podobně jako v&nbsp;minulé
i předminulé části tohoto článku, uloženy do GIT repositáře dostupného na
adrese <a
href="https://github.com/tisnik/clojure-examples">https://github.com/tisnik/clojure-examples</a>
(dříve popsané příklady budou přidány později). V&nbsp;tabulce zobrazené pod
tímto odstavcem naleznete na jednotlivé příklady přímé odkazy:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Github</th></tr>
<tr><td>1</td><td>factorial</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/factorial">https://github.com/tisnik/clojure-examples/tree/master/factorial</a></td></tr>
<tr><td>2</td><td>leinring1</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/leinring1">https://github.com/tisnik/clojure-examples/tree/master/leinring1</a></td></tr>
<tr><td>3</td><td>codoxtest</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/codoxtest">https://github.com/tisnik/clojure-examples/tree/master/codoxtest</a></td></tr>
<tr><td>4</td><td>cloverage</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/cloverage">https://github.com/tisnik/clojure-examples/tree/master/cloverage</a></td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Odkazy na předchozí části seriálu</h2>

<ol>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

</ol>



<p><a name="k10"></a></p>
<h2 id="k10">10. Odkazy na Internetu</h2>

<ol>

<li>Plugin cloverage<br />
<a href="https://github.com/lshift/cloverage">https://github.com/lshift/cloverage</a>
</li>

<li>Plugin codox<br />
<a href="https://github.com/weavejester/codox">https://github.com/weavejester/codox</a>
</li>

<li>Plugin lein-ring<br />
<a href="https://github.com/weavejester/lein-ring">https://github.com/weavejester/lein-ring</a>
</li>

<li>Plugin test2junit<br />
<a href="https://github.com/ruedigergad/test2junit">https://github.com/ruedigergad/test2junit</a>
</li>

<li>java.jdbc API Reference<br />
<a href="https://clojure.github.io/java.jdbc/">https://clojure.github.io/java.jdbc/</a>
</li>

<li>Hiccup<br />
<a href="https://github.com/weavejester/hiccup">https://github.com/weavejester/hiccup</a>
</li>

<li>Clojure Ring na GitHubu<br />
<a href="https://github.com/ring-clojure/ring">https://github.com/ring-clojure/ring</a>
</li>

<li>A brief overview of the Clojure web stack<br />
<a href="https://brehaut.net/blog/2011/ring_introduction">https://brehaut.net/blog/2011/ring_introduction</a>
</li>

<li>Getting Started with Ring<br />
<a href="http://www.learningclojure.com/2013/01/getting-started-with-ring.html">http://www.learningclojure.com/2013/01/getting-started-with-ring.html</a>
</li>

<li>Getting Started with Ring and Compojure - Clojure Web Programming<br />
<a href="http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html">http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II<br />
<a href="2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

