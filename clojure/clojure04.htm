<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtvrté části článku o nástroji Leiningen určeného pro správu projektů vytvořených v programovacím jazyku Clojure si ukážeme tvorbu jednoduchých webových aplikací s využitím knihovny Ring. Tato knihovna je napsána takovým způsobem, že nad ní lze vytvořit i velmi komplexní webové frameworky.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Leiningen: nástroj pro správu projektů napsaných v Clojure (4)</a></p>
<p><a href="#k02">2. Knihovna Ring</a></p>
<p><a href="#k03">3. První demonstrační příklad &ndash; kostra webové aplikace</a></p>
<p><a href="#k04">4. Instalace všech závislých knihoven</a></p>
<p><a href="#k05">5. Spuštění a otestování prvního demonstračního příkladu</a></p>
<p><a href="#k06">6. Druhý demonstrační příklad &ndash; výpis datové struktury popisující požadavek od klienta</a></p>
<p><a href="#k07">7. Spuštění druhého demonstračního příkladu</a></p>
<p><a href="#k08">8. Třetí demonstrační příklad &ndash; implementace handleru pro vygenerování HTML stránky</a></p>
<p><a href="#k09">9. Čtvrtý demonstrační příklad &ndash; jednoduchá kalkulačka</a></p>
<p><a href="#k10">10. Získání hodnot zadaných do formuláře</a></p>
<p><a href="#k11">11. Vytvoření odpovědi serveru</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Leiningen: nástroj pro správu projektů napsaných v Clojure (4)</h2>

<p>V&nbsp;již čtvrté části článku o nástroji <i>Leiningen</i> si ukážeme tvorbu
(zpočátku velmi jednoduchých) webových aplikací. Použijeme přitom, což je
pochopitelné, programovací jazyk <i>Clojure</i> a taktéž knihovnu nazvanou
<i>Clojure Ring</i>, zkráceně jen <i>Ring</i>. Nejprve si řekneme, jakým
způsobem je možné vytvořit kostru primitivního webového projektu, který bude
pro všechny dotazy vracet neměnnou webovou stránku (resp. neměnný plaintext) a
posléze přejdeme k&nbsp;poněkud zajímavějšímu tématu &ndash; reakci na data
poslaná uživatelem resp.&nbsp;prohlížečem na server. Všechny čtyři dnes
ukazované demonstrační příklady sice budou velmi jednoduché, ovšem my si na
nich &ndash; právě díky jejich jednoduchosti &ndash; ukážeme některé základní
principy, na nichž je knihovna <i>Clojure Ring</i> postavená a které jsou
využívány složitějšími webovými frameworky (je ostatně typické, že většina
webových frameworků určených pro programovací jazyk <i>Clojure</i> je založena
právě na knihovně <i>Ring</i>).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Knihovna Ring</h2>

<p>Knihovna <i>Clojure Ring</i> slouží k&nbsp;usnadnění tvorby webových
aplikací s&nbsp;využitím funkcionálního paradigmatu. Je navržena modulárním
způsobem, což například znamená, že programátoři mají poměrně velkou volnost
při konfiguraci aplikace či v&nbsp;tvorbě a použití takzvaného
<i>middleware</i>, což jsou v&nbsp;pojetí <i>Ringu</i> makra a funkce vkládaná
mezi Ring a vlastní implementaci webové aplikace (tímto tématem se budeme
podrobněji zabývat v&nbsp;navazující části tohoto článku). Webová aplikace
využívající knihovnu <i>Ring</i> může být v&nbsp;nejjednodušším případě složena
pouze ze tří vrstev:</p>

<ol>
<li>Aplikační logika</li>
<li>Ring Adapter</li>
<li>Webový server</li>
</ol>

<p>Aplikační logika se skládá z&nbsp;takzvaného <i>handleru</i> volaného při
příchodu každého požadavku od klienta a popř.&nbsp;také z&nbsp;již zmíněného
middleware. Základní funkce handleru je navržena čistě funkcionálně &ndash;
handler je běžná funkce, které se při příchodu požadavku předá datová struktura
typu mapa obsahující předzpracované informace o požadavku (<i>request</i>),
návratovou hodnotou handleru je opět datová struktura typu mapa představující
odpověď serveru (<i>response</i>). To je vše &ndash; na rozdíl od CGI skriptů
se nemusí řešit zpracování standardního vstupu či proměnné prostředí
QUERY_STRING, neprovádí se ani ruční formátování výstupu, jako je tomu u JSP
stránek (či servletů). Speciálním případem je stav, kdy návratová hodnota
handleru (<i>response</i>) je <strong>nil</strong>, což knihovna <i>Ring</i>
&bdquo;přeloží&ldquo; do známého HTTP kódu 404. Díky této vlastnosti se může
implementace handleru v&nbsp;některých případech zjednodušit.</p>

<p>Zajímavý je <i>Ring Adapter</i>. Jedná se o konfigurovatelnou mezivrstvu
mezi aplikací a webovým serverem. Existují tři základní možnosti konfigurace
adaptéru:</p>

<ol>

<li>Použije se interní server, v&nbsp;současnosti Jetty, který je součástí
aplikace a běží ve stejné JVM (tuto nejjednodušší možnost použijeme i
v&nbsp;dnešních demonstračních příkladech)</li>

<li>Použijí se servlety provozované například na Tomcatu</li>

<li>Použije se server běžící mimo vlastní JVM, pro komunikaci se serverem lze
zvolit protokol (tímto způsobem je možné například realizovat load balancing,
oddělení vyvinuté webové aplikace od Internetu atd.)</li>

</ol>

<p>Ve skutečnosti však webová aplikace využívající <i>Ring</i> může používat a
většinou taktéž používá i další knihovny. Pro generování HTML stránek se
využívají knihovny <i>Hiccup</i> či <i>Enlive</i>, pro dispatching
(resp.&nbsp;zjednodušení dispatchingu) pak <i>Moustache</i> či (pravděpodobně
častěji) <i>Compojure</i>. Podrobnosti o těchto knihovnách si opět řekneme
příště.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad &ndash; kostra webové aplikace</h2>

<p>Ukažme si nyní, jakým způsobem je možné vytvořit kostru prozatím velmi
jednoduché webové aplikace. Základ nového projektu se vygeneruje naprosto
stejně, jako tomu bylo i ve všech příkladech, které jsme si popisovali
v&nbsp;předchozích třech částech tohoto článku:</p>

<pre>
lein new app webapp1
</pre>

<p>Po zadání tohoto příkazu se v&nbsp;aktuálním adresáři vytvoří nový
podadresář obsahující základ nového projektu (což již také známe):</p>

<pre>
.
├── doc
│   └── intro.md
├── LICENSE
├── project.clj
├── README.md
├── resources
├── src
│   └── webapp1
│       └── core.clj
└── test
    └── webapp1
        └── core_test.clj
&nbsp;
6 directories, 6 files
</pre>

<p>Nyní je nutné upravit soubor <strong>project.clj</strong> takovým způsobem,
aby nově vytvořený projekt mohl využívat vybrané moduly knihovny <i>Ring</i>.
Prozatím nám budou postačovat dva moduly nazvané <i>ring-core</i> a
<i>ring-jetty-adapter</i>, takže tyto dva moduly přidáme do vektoru uloženého
pod klíčem <strong>:dependencies</strong>. Dva nově vytvořené řádky
v&nbsp;souboru <strong>project.clj</strong> jsou zvýrazněny (nezapomeňte přitom
na správné umístění pravé uzavírací závorky vektoru):</p>

<pre>
(defproject webapp1 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[ring/ring-core "1.3.2"]</strong>
                 <strong>[ring/ring-jetty-adapter "1.3.2"]</strong>]
  :main ^:skip-aot webapp1.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Změní se samozřejmě i soubor <strong>src/webapp1/core.clj</strong>, a to
následujícím způsobem:</p>

<pre>
(ns webapp1.core
    (:gen-class))
&nbsp;
(require '[ring.adapter.jetty :as jetty])
&nbsp;
(defn app
    "Funkce predstavujici kostru webove aplikace."
    [request]
    {:status 200
     :headers {"Content-Type" "text/plain"}
     :body "Hello World"})
&nbsp;
(defn -main
    "Spusteni webove aplikace na portu 8080."
    [&amp; args]
    (jetty/run-jetty app {:port 8080}))
</pre>

<p>Ve funkci <strong>-main</strong> spouštěné nástrojem <i>Leiningen</i> se
volá funkce <strong>jetty/run-jetty</strong>, které se předá handler webové
aplikace zpracovávající všechny požadavky od klientů a taktéž mapa, v&nbsp;níž
je možné předávat další konfigurační volby, zde konkrétně číslo portu, na němž
bude webová aplikace očekávat požadavky. Výchozí port je nastaven na 3000, my
však použijeme přece jen známější číslo 8080, samozřejmě za předpokladu, že
tento port již není obsazen žádným jiným serverem. Další důležitou funkcí je
<strong>app</strong>, tj.&nbsp;samotný handler webové aplikace. Tomuto handleru
se při každém zavolání předá struktura představující požadavek klienta a
výsledkem má být mapa obsahující odpověď, která má být (po zpracování knihovnou
<i>Ring</i>) poslána zpět klientovi. Odpověď je v&nbsp;tomto případě velmi
jednoduchá &ndash; obsahuje stavový kód 200 (OK), hlavičku s&nbsp;MIME typem a
vlastní tělo odpovědi, což je jednořádkový řetězec &bdquo;Hello World&ldquo;.
Knihovna <i>Ring</i> tyto údaje z&nbsp;mapy přečte a poskládá z&nbsp;nich
korektní HTTP odpověď (<i>response</i>).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace všech závislých knihoven</h2>

<p>V&nbsp;souboru <strong>project.clj</strong> byly specifikovány pouze dva
nové moduly, na nichž projekt závisí: <strong>ring/ring-core</strong> verze
<strong>1.3.2</strong> a <strong>ring/ring-jetty-adapter</strong> taktéž verze
<strong>1.3.2</strong>. Ve skutečnosti však tyto moduly potřebují ke svému
použití i mnoho dalších knihoven, takže nyní nastává okamžik automatického
stažení všech těchto knihoven. K&nbsp;tomu slouží nám již známý příkaz
<strong>lein deps</strong>, který je nutné spustit v&nbsp;adresáři
s&nbsp;projektem, přesněji řečeno v&nbsp;adresáři, kde se nachází soubor
<strong>project.clj</strong>:</p>

<pre>
lein deps
</pre>

<p>Po zadání tohoto příkazu by se měly vyhodnotit všechny knihovny, na nichž
závisí správná činnost výše zmíněných dvou modulů. V&nbsp;mém případě &ndash;
systém Linux Mint s&nbsp;čerstvě nainstalovaným nástrojem <i>Leiningen</i>
&ndash; vypadalo spuštění tohoto příkazu následovně:</p>

<pre>
Retrieving ring/ring-core/1.3.2/ring-core-1.3.2.pom from clojars
Retrieving org/clojure/tools.reader/0.8.1/tools.reader-0.8.1.pom from central
Retrieving ring/ring-codec/1.0.0/ring-codec-1.0.0.pom from clojars
Retrieving commons-codec/commons-codec/1.6/commons-codec-1.6.pom from central
Retrieving commons-fileupload/commons-fileupload/1.3/commons-fileupload-1.3.pom from central
Retrieving org/apache/commons/commons-parent/28/commons-parent-28.pom from central
Retrieving org/apache/apache/13/apache-13.pom from central
Retrieving commons-io/commons-io/2.2/commons-io-2.2.pom from central
Retrieving org/apache/commons/commons-parent/28/commons-parent-28.pom from central
Retrieving org/apache/apache/13/apache-13.pom from central
Retrieving commons-io/commons-io/2.2/commons-io-2.2.pom from central
Retrieving org/apache/commons/commons-parent/24/commons-parent-24.pom from central
Retrieving clj-time/clj-time/0.6.0/clj-time-0.6.0.pom from clojars
Retrieving joda-time/joda-time/2.2/joda-time-2.2.pom from central
Retrieving crypto-random/crypto-random/1.2.0/crypto-random-1.2.0.pom from clojars
Retrieving org/clojure/clojure/1.2.1/clojure-1.2.1.pom from central
Retrieving crypto-equality/crypto-equality/1.0.0/crypto-equality-1.0.0.pom from clojars
Retrieving ring/ring-jetty-adapter/1.3.2/ring-jetty-adapter-1.3.2.pom from clojars
Retrieving ring/ring-servlet/1.3.2/ring-servlet-1.3.2.pom from clojars
Retrieving org/eclipse/jetty/jetty-server/7.6.13.v20130916/jetty-server-7.6.13.v20130916.pom from central
Retrieving org/eclipse/jetty/jetty-project/7.6.13.v20130916/jetty-project-7.6.13.v20130916.pom from central
Retrieving org/eclipse/jetty/jetty-parent/20/jetty-parent-20.pom from central
Retrieving org/eclipse/jetty/orbit/javax.servlet/2.5.0.v201103041518/javax.servlet-2.5.0.v201103041518.pom from central
Retrieving org/eclipse/jetty/orbit/jetty-orbit/1/jetty-orbit-1.pom from central
Retrieving org/eclipse/jetty/jetty-parent/18/jetty-parent-18.pom from central
Retrieving org/eclipse/jetty/jetty-continuation/7.6.13.v20130916/jetty-continuation-7.6.13.v20130916.pom from central
Retrieving org/eclipse/jetty/jetty-http/7.6.13.v20130916/jetty-http-7.6.13.v20130916.pom from central
Retrieving org/eclipse/jetty/jetty-io/7.6.13.v20130916/jetty-io-7.6.13.v20130916.pom from central
Retrieving org/eclipse/jetty/jetty-util/7.6.13.v20130916/jetty-util-7.6.13.v20130916.pom from central
Retrieving org/clojure/tools.reader/0.8.1/tools.reader-0.8.1.jar from central
Retrieving commons-codec/commons-codec/1.6/commons-codec-1.6.jar from central
Retrieving commons-fileupload/commons-fileupload/1.3/commons-fileupload-1.3.jar from central
Retrieving joda-time/joda-time/2.2/joda-time-2.2.jar from central
Retrieving org/eclipse/jetty/jetty-continuation/7.6.13.v20130916/jetty-continuation-7.6.13.v20130916.jar from central
Retrieving org/eclipse/jetty/jetty-server/7.6.13.v20130916/jetty-server-7.6.13.v20130916.jar from central
Retrieving org/eclipse/jetty/orbit/javax.servlet/2.5.0.v201103041518/javax.servlet-2.5.0.v201103041518.jar from central
Retrieving org/eclipse/jetty/jetty-io/7.6.13.v20130916/jetty-io-7.6.13.v20130916.jar from central
Retrieving org/eclipse/jetty/jetty-io/7.6.13.v20130916/jetty-io-7.6.13.v20130916.jar from central
Retrieving org/eclipse/jetty/jetty-http/7.6.13.v20130916/jetty-http-7.6.13.v20130916.jar from central
Retrieving org/eclipse/jetty/jetty-util/7.6.13.v20130916/jetty-util-7.6.13.v20130916.jar from central
Retrieving ring/ring-core/1.3.2/ring-core-1.3.2.jar from clojars
Retrieving crypto-equality/crypto-equality/1.0.0/crypto-equality-1.0.0.jar from clojars
Retrieving ring/ring-codec/1.0.0/ring-codec-1.0.0.jar from clojars
Retrieving crypto-random/crypto-random/1.2.0/crypto-random-1.2.0.jar from clojars
Retrieving clj-time/clj-time/0.6.0/clj-time-0.6.0.jar from clojars
Retrieving ring/ring-jetty-adapter/1.3.2/ring-jetty-adapter-1.3.2.jar from clojars
Retrieving ring/ring-servlet/1.3.2/ring-servlet-1.3.2.jar from clojars
Retrieving org/eclipse/jetty/jetty-http/7.6.13.v20130916/jetty-http-7.6.13.v20130916.jar from central
Retrieving org/eclipse/jetty/jetty-util/7.6.13.v20130916/jetty-util-7.6.13.v20130916.jar from central
Retrieving ring/ring-core/1.3.2/ring-core-1.3.2.jar from clojars
Retrieving crypto-equality/crypto-equality/1.0.0/crypto-equality-1.0.0.jar from clojars
Retrieving ring/ring-codec/1.0.0/ring-codec-1.0.0.jar from clojars
Retrieving crypto-random/crypto-random/1.2.0/crypto-random-1.2.0.jar from clojars
Retrieving clj-time/clj-time/0.6.0/clj-time-0.6.0.jar from clojars
Retrieving ring/ring-jetty-adapter/1.3.2/ring-jetty-adapter-1.3.2.jar from clojars
Retrieving ring/ring-servlet/1.3.2/ring-servlet-1.3.2.jar from clojars
</pre>

<p>Všechny stažené knihovny by se měly uložit do podadresáře
<strong>.m2</strong> vytvořeného v&nbsp;domovském adresáři uživatele.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Spuštění a otestování prvního demonstračního příkladu</h2>

<p>Nyní by již mělo být vše připravené pro spuštění naší demonstrační webové
aplikace, které se v&nbsp;případě použití <i>Leiningenu</i> nijak neliší od
spuštění jakékoli jiné aplikace:</p>

<pre>
lein run
</pre>

<p>Za několik sekund by mělo dojít k&nbsp;inicializaci webového serveru a na
standardní výstup by se mělo vypsat hlášení o tom, na kterém portu byl server
spuštěn (v&nbsp;horším případě se vypíše stack trace s&nbsp;chybou :-):</p>

<pre>
2015-02-21 22:01:04.514:INFO:oejs.Server:jetty-7.6.13.v20130916
2015-02-21 22:01:04.546:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8080
</pre>

<p>Běžící server/aplikaci lze otestovat jak běžným webovým prohlížečem
s&nbsp;textovým či grafickým uživatelským rozhraním, tak i například nástroji
typu <strong>wget</strong> či <strong>curl</strong>. Adresa je ve všech
případech stejná &ndash; &bdquo;localhost&ldquo; a číslo portu:</p>

<pre>
curl localhost:8080
</pre>

<p>Po spuštění tohoto příkazu by se na standardní výstup měl vypsat řetězec
vrácený právě vytvořeným a spuštěným webovým serverem:</p>

<pre>
Hello World
</pre>

<p>Můžeme se samozřejmě podívat i na podrobnější výpis komunikace mezi klientem
(<strong>curl</strong>) a webovým serverem:</p>

<pre>
curl -v localhost:8080
</pre>

<pre>
* Rebuilt URL to: localhost:8080/
* Hostname was NOT found in DNS cache
Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8080 (#0)
&gt; GET / HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: localhost:8080
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Date: Tue, 03 Mar 2015 14:44:31 GMT
&lt; Content-Type: text/plain;charset=ISO-8859-1
&lt; Content-Length: 11
* Server Jetty(7.6.13.v20130916) is not blacklisted
&lt; Server: Jetty(7.6.13.v20130916)
&lt; 
{ [data not shown]
* Connection #0 to host localhost left intact
Hello World
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Druhý demonstrační příklad &ndash; výpis datové struktury popisující požadavek od klienta</h2>

<p>Handler webové aplikace, který byl v&nbsp;prvním demonstračním příkladu
představovaný funkcí <strong>app</strong>, je zavolán po přijetí požadavku
(<i>reguest</i>) od klienta. Tento požadavek je nejdříve zpracován knihovnou
<i>Ring</i> a následně v&nbsp;podobě mapy předán právě handleru. Protože je
reakce na požadavky klienta ústřední částí většiny webových serverů, ukážeme si
ve druhém demonstračním příkladu, jak lze zobrazit celou strukturu a obsah mapy
předávané do handleru <strong>app</strong>. Vytvoříme si proto nový projekt
s&nbsp;názvem <strong>webapp2</strong>:</p>

<pre>
lein new app webapp2
</pre>

<p>Úprava souboru <strong>project.clj</strong> je stejná, jako tomu bylo i
v&nbsp;prvním demonstračním příkladu:</p>

<pre>
(defproject webapp2 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[ring/ring-core "1.3.2"]</strong>
                 <strong>[ring/ring-jetty-adapter "1.3.2"]</strong>]
  :main ^:skip-aot webapp2.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Lišit se samozřejmě bude soubor <strong>src/webapp2/core.clj</strong>. Zde
se v&nbsp;handleru pojmenovaném <strong>app</strong> volá nová funkce nazvaná
<strong>render-response-body</strong>, která vrátí řetězec představující
textovou podobu mapy s&nbsp;daty požadavku (<i>request</i>). Aby byl výpis
obsahu mapy čitelný, je použita funkce <strong>clojure.pprint/pprint</strong>,
která však provádí výpis na standardní výstup. My naopak potřebujeme, aby se
výpis provedl do řetězce, proto je volání funkce
<strong>clojure.pprint/pprint</strong> &bdquo;obaleno&ldquo; do velmi
užitečného makra <strong>with-out-str</strong>, které lokálně mění obsah *out*
a konvertuje veškerý výstup do řetězce:</p>

<pre>
(ns webapp2.core
    (:gen-class))
&nbsp;
(require '[ring.adapter.jetty :as jetty])
(require '[clojure.pprint     :as pprint])
&nbsp;
(defn render-response-body
    [request]
    (with-out-str (pprint/pprint request)))
&nbsp;
(defn app
    "Funkce predstavujici kostru webove aplikace."
    [request]
    {:status 200
     :headers {"Content-Type" "text/plain"}
     :body (render-response-body request)})
&nbsp;
(defn -main
    "Spusteni webove aplikace na portu 8080."
    [&amp; args]
    (jetty/run-jetty app {:port 8080}))
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Spuštění druhého demonstračního příkladu</h2>

<p>Po spuštění dnešního druhého demonstračního příkladu příkazem:</p>

<pre>
lein run
</pre>

<p>...je možné otestovat chování webové aplikace, a to jak při použití webového
prohlížeče s&nbsp;GUI, tak i při použití nástroje <strong>curl</strong>.</p>

<p>Poslání požadavku z&nbsp;webového prohlížeče, konkrétně z&nbsp;Firefoxu:</p>

<pre>
{:ssl-client-cert nil,
 :remote-addr "127.0.0.1",
 :headers
 {"accept-encoding" "gzip, deflate",
  "user-agent"
  "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0",
  "connection" "keep-alive",
  "accept-language" "en-US,en;q=0.5",
  "accept"
  "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
  "host" "localhost:8080"},
 :server-port 8080,
 :content-length nil,
 :content-type nil,
 :character-encoding nil,
 :uri "/",
 :server-name "localhost",
 :query-string nil,
 :body #&lt;HttpInput org.eclipse.jetty.server.HttpInput@39520844&gt;,
 :scheme :http,
 :request-method :get}
</pre>

<p>Použití nástroje <strong>curl</strong>:</p>

<pre>
curl localhost:8080
</pre>

<pre>
{:ssl-client-cert nil,
 :remote-addr "127.0.0.1",
 :headers
 {"user-agent" "curl/7.35.0", "accept" "*/*", "host" "localhost:8080"},
 :server-port 8080,
 :content-length nil,
 :content-type nil,
 :character-encoding nil,
 <strong>:uri "/"</strong>,
 :server-name "localhost",
 <strong>:query-string nil</strong>,
 :body #&lt;HttpInput org.eclipse.jetty.server.HttpInput@71e80e4d&gt;,
 :scheme :http,
 :request-method :get}
</pre>

<p>Použití nástroje <strong>curl</strong>, odlišná URL:</p>

<pre>
curl localhost:8080/foo/bar
</pre>

<pre>
{:ssl-client-cert nil,
 :remote-addr "127.0.0.1",
 :headers
 {"user-agent" "curl/7.35.0", "accept" "*/*", "host" "localhost:8080"},
 :server-port 8080,
 :content-length nil,
 :content-type nil,
 :character-encoding nil,
 <strong>:uri "/foo/bar"</strong>,
 :server-name "localhost",
 <strong>:query-string nil</strong>,
 :body #&lt;HttpInput org.eclipse.jetty.server.HttpInput@18e16a6b&gt;,
 :scheme :http,
 :request-method :get}
</pre>

<p>Použití nástroje <strong>curl</strong>, předání parametrů v&nbsp;URL:</p>

<pre>
curl "localhost:8080?param1=foo&amp;param2=bar"
</pre>

<pre>
{:ssl-client-cert nil,
 :remote-addr "127.0.0.1",
 :headers
 {"user-agent" "curl/7.35.0", "accept" "*/*", "host" "localhost:8080"},
 :server-port 8080,
 :content-length nil,
 :content-type nil,
 :character-encoding nil,
 <strong>:uri "/"</strong>,
 :server-name "localhost",
 <strong>:query-string "param1=foo&amp;param2=bar"</strong>,
 :body #&lt;HttpInput org.eclipse.jetty.server.HttpInput@517d009c&gt;,
 :scheme :http,
 :request-method :get}
</pre>

<p>V&nbsp;posledních třech příkladech si povšimněte především hodnot uložených
pod klíči <strong>:uri</strong> a <strong>:query-string</strong>. Tyto hodnoty
sice mohou být zpracovávány přímo, je to ovšem zbytečně pracné. Z&nbsp;tohoto
důvodu nabízí knihovna <i>Ring</i> několik možností, jak tyto hodnoty
zpracovávat jednodušším způsobem, což si ukážeme v&nbsp;následujících
kapitolách i v&nbsp;další části tohoto článku.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Třetí demonstrační příklad &ndash; implementace handleru pro vygenerování HTML stránky</h2>

<p>Ve třetím demonstračním příkladu si ukážeme nejjednodušší (ale
z&nbsp;hlediska návrhu aplikace vlastně i zdaleka nejhorší :-) způsob
vygenerování HTML stránky. Navíc bude v&nbsp;této aplikaci použito i velmi
užitečné makro <strong>-&gt;</strong>, které se často používá pro zprehlednění
kódu, především ve chvíli, kdy dochází ke zřetězení volání funkcí, přičemž
jedna funkce předává svůj výsledek další funkci. Třetí příklad se bude jmenovat
<strong>webapp3</strong> a vytvoří se známým příkazem:</p>

<pre>
lein new app webapp3
</pre>

<p>V&nbsp;souboru <strong>project.clj</strong> se provedou stejné změny, jaké
byly provedeny i v&nbsp;předchozích třech příkladech:</p>

<pre>
(defproject webapp3 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 [ring/ring-core "1.3.2"]
                 [ring/ring-jetty-adapter "1.3.2"]]
  :main ^:skip-aot webapp3.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Zajímavější je již soubor <strong>core.clj</strong>, kde se nachází definice
globálního symbolu pojmenovaného <strong>html-page</strong> a navázaného na
řetězec představující celou HTML stránku. Tento symbol je použit
v&nbsp;handleru, který však již vypadá jinak, než tomu bylo v&nbsp;předchozích
příkladech. Můžeme zde vidět použití dvou pomocných funkcí implementovaných ve
jmenném prostoru <strong>ring.util.response</strong>. Díky použití makra
<strong>-&gt;</strong> je možné zřetězit volání dvou middleware funkcí bez
nutnosti přílišného závorkování :-). Následující zápis se postará o vytvoření
mapy <i>response</i>, kterou jsme dříve vytvářeli ručně:</p>

<pre>
    (-&gt; (response/response html-page)
        (response/content-type "text/html; charset=utf-8")))
</pre>

<p>I implementace funkce <strong>app</strong> je nepatrně odlišná (navíc se již
nejedná o funkci :-), opět kvůli použití makra <strong>-&gt;</strong> a
především pak <i>middleware</i> implementovaného ve jmenném prostoru
<strong>ring.middleware.params</strong>.  Tento middleware se postará o takové
zpracování <i>requestu</i>, aby bylo jednodušší přečíst jednotlivé parametry
poslané uživatelem:</p>

<pre>
(def app
    "Funkce predstavujici kostru webove aplikace."
    (-&gt; handler
        (params/wrap-params)))
</pre>

<pre>
(ns webapp3.core
    (:gen-class))
&nbsp;
(require '[ring.adapter.jetty     :as jetty])
(require '[ring.middleware.params :as params])
(require '[ring.util.response     :as response])
&nbsp;
(def html-page
    "&lt;html&gt;
        &lt;head&gt;
            &lt;title&gt;Powered by Ring!&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;h1&gt;Powered by Ring!&lt;/h1&gt;
        &lt;/body&gt;
     &lt;/html&gt;")
&nbsp;
(defn handler
    [request]
    (-&gt; (response/response html-page)
        (response/content-type "text/html; charset=utf-8")))
&nbsp;
(def app
    "Funkce predstavujici kostru webove aplikace."
    (-&gt; handler
        (params/wrap-params)))
&nbsp;
(defn -main
    "Spusteni webove aplikace na portu 8080."
    [&amp; args]
    (jetty/run-jetty app {:port 8080}))
</pre>

<pre>
    user=&gt; (doc -&gt;)
    -------------------------
    clojure.core/-&gt;
([x] [x form] [x form &amp; more])
Macro
  Threads the expr through the forms. Inserts x as the
  second item in the first form, making a list of it if it is not a
  list already. If there are more forms, inserts the first form as the
  second item in second form, etc.
nil
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Čtvrtý demonstrační příklad &ndash; jednoduchá kalkulačka</h2>

<p>Předchozí demonstrační příklad byl pouze přípravou na vytvoření příkladu
čtvrtého a současně i (alespoň dnes) posledního. Ve čtvrtém příkladu je
implementována primitivní kalkulačka. Jedná se o webovou stránku
s&nbsp;formulářem, do kterého je možné zadat dvě číselné hodnoty a následně se
na straně serveru provede součet hodnot a výpis výsledku. Oproti jiným řešením
(PHP a spol.) je zde jedno nepatrné vylepšení &ndash; číselné hodnoty mohou mít
prakticky libovolný rozsah, nejsme tedy limitováni například rozsahem a
přesností typu <i>double</i>. Nejdříve si uvedeme celý zdrojový kód čtvrtého
demonstračního příkladu, přičemž jednotlivé detaily budou vysvětleny
v&nbsp;dalších dvou kapitolách:</p>

<pre>
(ns webapp4.core
    (:gen-class))
&nbsp;
(require '[ring.adapter.jetty     :as jetty])
(require '[ring.middleware.params :as params])
(require '[ring.util.response     :as response])
&nbsp;
(defn render-html-page
    [x y result]
    (str
    "&lt;html&gt;
        &lt;head&gt;
            &lt;title&gt;Ultimate calculator:&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;h1&gt;Ultimate calculator:&lt;/h1&gt;
            &lt;form method='get' action='/'&gt;
                &lt;input type='text' name='x' size='10' value='" x "'/&gt; &times;
                &lt;input type='text' name='y' size='10' value='" y "'/&gt; =
                &lt;input type='text' name='result' size='20' value='" result "' readonly='readonly'/&gt;
                &lt;input type='submit' value='Calculate' /&gt;
            &lt;/form&gt;
        &lt;/body&gt;
     &lt;/html&gt;"))
&nbsp;
(defn param-&gt;number
    "Prevod parametru specifikovaneho v param-name na cislo typu BigDecimal."
    [params param-name]
    (let [param (get params param-name)]
        (try
            (bigdec param)             ; pokus o prevod na BigDecimal
            (catch Exception e nil)))) ; pokud se prevod nepovede, vraci se nil
&nbsp;
(defn compute-result
    [x y]
    (if (and x y) (* x y))) ; vetev else neni uvedena -&gt; nil
&nbsp;
(defn handler
    [request]
    (let [params (:params request)
          x      (param-&gt;number params "x")
          y      (param-&gt;number params "y")
          result (compute-result x y)]
    (println params x y result)
    (-&gt; (response/response (render-html-page x y result))
        (response/content-type "text/html; charset=utf-8"))))
&nbsp;
(def app
    "Funkce predstavujici kostru webove aplikace."
    (-&gt; handler
        (params/wrap-params)))
&nbsp;
(defn -main
    "Spusteni webove aplikace na portu 8080."
    [&amp; args]
    (jetty/run-jetty app {:port 8080}))
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Získání hodnot zadaných do formuláře</h2>

<p>Pojďme si nyní vysvětlit a popsat jednotlivé části implementované webové
aplikace. Při každém příchodu požadavku od klienta se nejprve zpracují vstupní
data, &bdquo;obalí&ldquo; se parametry (viz další text) a zavolá se uživatelsky
definovaný handler. Toto chování nalezneme zde:</p>

<pre>
(def app
    "Funkce predstavujici kostru webove aplikace."
    (-&gt; handler
        (params/wrap-params)))
</pre>

<p>Samotný handler musí nejprve získat jednotlivé parametry z&nbsp;datové
struktury předané v&nbsp;parametru nazvaném <strong>request</strong>. To je
vlastně velmi jednoduché, protože <i>request</i> je mapou a pod klíčem
<strong>:params</strong> je uložena další mapa s&nbsp;názvy a hodnotami
jednotlivých parametrů. Vzhledem k&nbsp;tomu, že klíč <strong>:params</strong>
a k&nbsp;němu navázaná hodnota vždy existují, lze pro jeho získání použít
zápis:</p>

<pre>
(:params request)
</pre>

<p>popř.&nbsp;pokud je někdo psavec a preferuje delší kód, může použít méně
idiomatický zápis:</p>

<pre>
(get request :params)
</pre>

<p>V&nbsp;mapě, která je získána jedním z&nbsp;předchozích zápisů, jsou uloženy
názvy a hodnoty parametrů, a to opět ve formě mapy. Nyní jsou však klíče
reprezentovány řetězci a nikoli <i>keywordy</i>, takže například pro přečtení
hodnoty parametrů pojmenovaných &bdquo;x&ldquo; a &bdquo;y&ldquo; se použije
tento fragment kódu:</p>

<pre>
(defn handler
    [request]
    (let [params (:params request)
          x      (get params "x")
          y      (get params "y")]
    (println params x y result)
    ...
    ...
    ...
))
</pre>

<p>Pokud parametry daného jména neexistují, vrátí funkce <strong>get</strong>
hodnotu <strong>nil</strong>.</p>

<p>Úkolem webové aplikace je provést součet dvou čísel, proto je nutné hodnoty
obou parametrů (což jsou řetězce) převést na numerické hodnoty. K&nbsp;tomu nám
pomůže tato funkce, která v&nbsp;případě neúspěchu vrátí
<strong>nil</strong>:</p>

<pre>
(defn param-&gt;number
    "Prevod parametru specifikovaneho v param-name na cislo typu BigDecimal."
    [params param-name]
    (let [param (get params param-name)]
        (try
            (bigdec param)             ; pokus o prevod na BigDecimal
            (catch Exception e nil)))) ; pokud se prevod nepovede, vraci se nil
</pre>

<p>Při sčítání je zapotřebí dát pozor na stav, kdy alespoň jeden
z&nbsp;parametrů není číslem, což zajistí speciální forma <strong>if</strong> a
makro <strong>and</strong>:</p>

<pre>
(defn compute-result
    [x y]
    (if (and x y) (* x y))) ; vetev else neni uvedena -&gt; nil
</pre>

<p>Celý handler vypadá následovně:</p>

<pre>
(defn handler
    [request]
    (let [params (:params request)
          x      (param-&gt;number params "x")
          y      (param-&gt;number params "y")
          result (compute-result x y)]
    (println params x y result)
    (-&gt; (response/response (render-html-page x y result))
        (response/content-type "text/html; charset=utf-8"))))
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vytvoření odpovědi serveru</h2>

<p>Handler vytváří mapu <i>response</i> s&nbsp;využitím middleware
<strong>responce/response</strong> a <strong>response/content-type</strong>.
Vlastní vytvoření HTML stránky vracené klientovi je implementováno ve funkci
pojmenované <strong>render-html-page</strong>, které se předají hodnoty
parametrů &bdquo;x&ldquo; a &bdquo;y&ldquo; i vypočteného výsledku. Při prvním
dotazu budou všechny tři předávané hodnoty nastaveny na <strong>nil</strong>,
což nám ovšem nevadí &ndash; <strong>nil</strong> v&nbsp;Clojure totiž
v&nbsp;žádném případě není tak špatně použitelné jako zdánlivě podobné
<strong>null</strong> v&nbsp;Javě :-), což je ostatně patrné z&nbsp;kódu, kde
se vytváří výsledný řetězec pomocí funkce <strong>str</strong> (této funkci
vůbec nevadí, že některý z&nbsp;jejích parametrů je <strong>nil</strong>):</p>

<pre>
(defn render-html-page
    [x y result]
    (str
    "&lt;html&gt;
        &lt;head&gt;
            &lt;title&gt;Ultimate calculator:&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;h1&gt;Ultimate calculator:&lt;/h1&gt;
            &lt;form method='get' action='/'&gt;
                &lt;input type='text' name='x' size='10' value='" x "'/&gt; &times;
                &lt;input type='text' name='y' size='10' value='" y "'/&gt; =
                &lt;input type='text' name='result' size='20' value='" result "' readonly='readonly'/&gt;
                &lt;input type='submit' value='Calculate' /&gt;
            &lt;/form&gt;
        &lt;/body&gt;
     &lt;/html&gt;"))
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Clojure Ring na GitHubu<br />
<a href="https://github.com/ring-clojure/ring">https://github.com/ring-clojure/ring</a>
</li>

<li>A brief overview of the Clojure web stack<br />
<a href="https://brehaut.net/blog/2011/ring_introduction">https://brehaut.net/blog/2011/ring_introduction</a>
</li>

<li>Getting Started with Ring<br />
<a href="http://www.learningclojure.com/2013/01/getting-started-with-ring.html">http://www.learningclojure.com/2013/01/getting-started-with-ring.html</a>
</li>

<li>Getting Started with Ring and Compojure - Clojure Web Programming<br />
<a href="http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html">http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II<br />
<a href="2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

