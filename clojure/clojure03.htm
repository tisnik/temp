<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části článku o nástroji Leiningen určeného pro správu projektů vytvořených v programovacím jazyku Clojure se seznámíme se základy problematiky tvorby jednotkových testů (unit tests). Taktéž se zmíníme o přídavném modulu nástroje Leiningen, který je možné použít pro export výsledků testování do formátu kompatibilního s JUnit.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Leiningen: nástroj pro správu projektů napsaných v Clojure (3)</a></p>
<p><a href="#k02">2. Načtení knihovny <strong>clojure.test</strong></a></p>
<p><a href="#k03">3. Využití makra <strong>is</strong> v&nbsp;interaktivní smyčce REPL</a></p>
<p><a href="#k04">4. Test, zda byla vyhozena výjimka specifikovaného typu</a></p>
<p><a href="#k05">5. Nástroj Leiningen a jednotkové testy</a></p>
<p><a href="#k06">6. Vytvoření nového projektu obsahujícího funkci pro výpočet faktoriálu</a></p>
<p><a href="#k07">7. Úprava jednotkového testu a následné spuštění jednotkového testu</a></p>
<p><a href="#k08">8. Výsledek běhu jednotkového testu v&nbsp;případě, že je testovaná funkce chybná</a></p>
<p><a href="#k09">9. Jednotkové testy s&nbsp;výstupem kompatibilním s&nbsp;JUnit</a></p>
<p><a href="#k10">10. Vytvoření druhého demonstračního příkladu <strong>factorial2</strong></a></p>
<p><a href="#k11">11. Spuštění jednotkového testu a konverze výsledku do formátu kompatibilního s&nbsp;JUnit</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Leiningen: nástroj pro správu projektů napsaných v Clojure (3)</h2>

<p>Ve třetí části článku o nástroji <i>Leiningen</i>, který při správném
použití dokáže zjednodušit práci s&nbsp;projekty napsanými v&nbsp;programovacím
jazyku <i>Clojure</i>, se nejdříve seznámíme se základy tvorby jednotkových
testů (<i>unit tests</i>). Nejprve si vysvětlíme, jakým způsobem se jednotkové
testy mohou psát s&nbsp;využitím makra <strong>is</strong> deklarovaného ve
standardní knihovně <strong>clojure.test</strong>. Následně vytvoříme malý
projekt obsahující jeden jednotkový test a posléze si ukážeme přídavný modul,
který je možné v&nbsp;případě potřeby využít pro vytvoření exportů
s&nbsp;výsledky jednotkových testů, které jsou kompatibilní s&nbsp;formátem
používaným knihovnou <i>JUnit</i> (ale i mnoha dalšími podobnými nástroji).
Díky použití tohoto přídavného modulu lze projekt napsaný v&nbsp;<i>Clojure</i>
velmi jednoduše testovat například na Jenkinsu/Hudsonu a využívat například již
dostupné nástroje pro tvoru grafů s&nbsp;výsledky testů apod.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Načtení knihovny <strong>clojure.test</strong></h2>

<p>Součástí standardních knihoven jazyka <i>Clojure</i> je mj.&nbsp;i knihovna
nazvaná <strong>clojure.test</strong> obsahující makra a funkce, které je možné
použít pro tvorbu jednotkových testů. Nejprve si ukážeme, jak se používá
základní makro <strong>is</strong>, a to přímo s&nbsp;využitím interaktivní
smyčky REPL &ndash; ostatně programovací jazyk <i>Clojure</i> je nejlepší se
učit právě se spuštěnou smyčkou REPL. Předpokládejme, že nástroj
<i>Leiningen</i> již byl úspěšně nainstalován podle návodu zmíněného <a
href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">v&nbsp;první
části tohoto článku</a>. To mj.&nbsp;znamená, že lze (z&nbsp;libovolného
adresáře) spustit i interaktivní smyčku REPL, a to použitím následujícího
příkazu:</p>

<pre>
<strong>lein repl</strong>
</pre>

<p>Po zadání tohoto příkazu by se na konzoli/terminálu mělo spustit
interaktivní rozhraní jazyka <i>Clojure</i> (z&nbsp;vypsané zprávy je
mj.&nbsp;patrné, že už je načase provést update balíčku OpenJDK :-):</p>

<pre>
nREPL server started on port 38398 on host 127.0.0.1 - nrepl://127.0.0.1:38398
REPL-y 0.3.5, nREPL 0.2.6
Clojure 1.6.0
OpenJDK 64-Bit Server VM 1.7.0_71-mockbuild_2014_10_15_17_02-b00
    Docs: (doc function-name-here)
          (find-doc "part-of-name-here")
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e
&nbsp;
user=&gt; 
</pre>

<p>Funkce a makra z&nbsp;knihovny (a současně i ze jmenného prostoru)
<strong>clojure.test</strong> se načetly automaticky, ovšem při volání těchto
funkcí popř.&nbsp;maker by se musel použít plný název včetně jmenného prostoru,
například:</p>

<pre>
user=&gt; <strong>(clojure.test/is)</strong>
</pre>

<p>Aby byla naše práce v&nbsp;REPL jednodušší, je vhodné zabezpečit přímý
přístup ke všem funkcím a makrům ze jmenného prostoru
<strong>clojure.test</strong>, a to následujícím příkazem:</p>

<pre>
user=&gt; <strong>(use 'clojure.test)</strong>
nil
</pre>

<p>Předchozí příkaz by měl pouze vypsat návratovou hodnotu,
tj.&nbsp;<strong>nil</strong> (samotné provedení příkazu tedy proběhne
&bdquo;tiše&ldquo;). Pokud se vypíše chybové hlášení, což je mimochodem dosti
nepravděpodobné, znamená to problém v&nbsp;samotné instalaci <i>Clojure</i>,
popř.&nbsp;nekorektně nastavenou proměnnou CLASSPATH. Při zjišťování, kde
nastala chyba, se budou hodit příkazy:</p>

<pre>
<i>; otestování existence jmenného prostoru</i>
user=&gt; <strong>(find-ns 'clojure.test)</strong>
#&lt;Namespace clojure.test&gt;
&nbsp;
<i>; pokud se vrátí nil, jmenný prostor nebyl načten</i>
</pre>

<pre>
<i>; získání mapy všech veřejných symbolů ze jmenného prostoru</i>
user=&gt; <strong>(ns-publics 'clojure.test)</strong>
&nbsp;
{are #'clojure.test/are, test-all-vars #'clojure.test/test-all-vars, test-var
#'clojure.test/test-var, do-report #'clojure.test/do-report, run-all-tests
#'clojure.test/run-all-tests, assert-any #'clojure.test/assert-any,
testing-contexts-str #'clojure.test/testing-contexts-str, file-position
#'clojure.test/file-position, testing #'clojure.test/testing, join-fixtures
#'clojure.test/join-fixtures, set-test #'clojure.test/set-test,
get-possibly-unbound-var #'clojure.test/get-possibly-unbound-var, assert-expr
#'clojure.test/assert-expr, report #'clojure.test/report, compose-fixtures
#'clojure.test/compose-fixtures, with-test #'clojure.test/with-test,
*stack-trace-depth* #'clojure.test/*stack-trace-depth*, is #'clojure.test/is,
*report-counters* #'clojure.test/*report-counters*, *load-tests*
#'clojure.test/*load-tests*, deftest #'clojure.test/deftest, assert-predicate
#'clojure.test/assert-predicate, with-test-out #'clojure.test/with-test-out,
function? #'clojure.test/function?, deftest- #'clojure.test/deftest-, test-vars
#'clojure.test/test-vars, try-expr #'clojure.test/try-expr, successful?
#'clojure.test/successful?, use-fixtures #'clojure.test/use-fixtures,
inc-report-counter #'clojure.test/inc-report-counter, testing-vars-str
#'clojure.test/testing-vars-str, *testing-contexts*
#'clojure.test/*testing-contexts*, test-ns #'clojure.test/test-ns, run-tests
#'clojure.test/run-tests, *testing-vars* #'clojure.test/*testing-vars*,
*test-out* #'clojure.test/*test-out*, *initial-report-counters*
#'clojure.test/*initial-report-counters*}
</pre>

<pre>
<i>; získání setříděných jmen všech veřejných symbolů ze jmenného prostoru</i>
user=&gt; <strong>(pprint (sort (keys (ns-publics 'clojure.test))))</strong>
&nbsp;
(*initial-report-counters*
 *load-tests*
 *report-counters*
 *stack-trace-depth*
 *test-out*
 *testing-contexts*
 *testing-vars*
 are
 assert-any
 assert-expr
 assert-predicate
 compose-fixtures
 deftest
 deftest-
 do-report
 file-position
 function?
 get-possibly-unbound-var
 inc-report-counter
 is
 join-fixtures
 report
 run-all-tests
 run-tests
 set-test
 successful?
 test-all-vars
 test-ns
 test-var
 test-vars
 testing
 testing-contexts-str
 testing-vars-str
 try-expr
 use-fixtures
 with-test
 with-test-out)
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Využití makra <strong>is</strong> v&nbsp;interaktivní smyčce REPL</h2>

<p>Základem pro psaní jednotkových testů je makro nazvané jednoduše
<strong>is</strong>, takže se nejprve podívejme na to, co o tomto makru říká
dokumentace. Prohlížení dokumentace slouží makro <strong>doc</strong>, kterému
se jako parametr předá jméno funkce, makra či symbolu, jehož význam potřebujeme
zjistit:</p>

<pre>
user=&gt; <strong>(doc is)</strong>
</pre>

<pre>
-------------------------
clojure.test/is
([form] [form msg])
Macro
  Generic assertion macro.  'form' is any predicate test.
  'msg' is an optional message to attach to the assertion.
&nbsp;
  Example: (is (= 4 (+ 2 2)) "Two plus two should be 4")
&nbsp;
  Special forms:
&nbsp;
  (is (thrown? c body)) checks that an instance of c is thrown from
  body, fails if not; then returns the thing thrown.
&nbsp;
  (is (thrown-with-msg? c re body)) checks that an instance of c is
  thrown AND that the message on the exception matches (with
  re-find) the regular expression re.
nil
</pre>

<p>Vidíme, že tomuto makru lze předat takzvaný predikát a popř.&nbsp;i textovou
zprávu. Predikát je použit ve dvou významech &ndash; po svém vyhodnocení se
zjišťuje výsledná hodnota a pokud není predikát splněn, vypíše se chybové
hlášení obsahující jak původní znění predikátu, tak i aktuální (odlišná)
hodnota vzniklá vyhodnocením. Mimochodem: právě proto, že se vypisuje text
predikátu, nemůže být <strong>is</strong> implementováno pomocí funkce, ale
bylo nutné použít makro. Chování makra <strong>is</strong> si můžeme snadno
odzkoušet:</p>

<pre>
user=&gt; <strong>(is true)</strong>
true
</pre>

<pre>
user=&gt; <strong>(is (= (+ 1 1) 2))</strong>
true
</pre>

<pre>
user=&gt; <strong>(is (= (inc 1) 2))</strong>
true
</pre>

<pre>
user=&gt; <strong>(is (nil? nil))</strong>
true
</pre>

<pre>
user=&gt; <strong>(is (seq? '(1 2 3)))</strong>
true
</pre>

<pre>
user=&gt; <strong>(is (fn? println))</strong>
true
</pre>

<p>Co se stane ve chvíli, kdy není predikát splněn, lze opět snadno
odzkoušet:</p>

<pre>
user=&gt; <strong>(is (= 1 2))</strong>
&nbsp;
FAIL in clojure.lang.PersistentList$EmptyList@1 (NO_SOURCE_FILE:1)
expected: (= 1 2)
  actual: (not (= 1 2))
false
</pre>

<pre>
user=&gt; <strong>(is (nil? "ja nejsem nil"))</strong>
&nbsp;
FAIL in clojure.lang.PersistentList$EmptyList@1 (NO_SOURCE_FILE:1)
expected: (nil? "ja nejsem nil")
  actual: (not (nil? "ja nejsem nil"))
false
</pre>

<pre>
user=&gt; <strong>(is (= (inc 1) 3))</strong>
&nbsp;
FAIL in clojure.lang.PersistentList$EmptyList@1 (NO_SOURCE_FILE:1)
expected: (= (inc 1) 3)
  actual: (not (= 2 3))
false
</pre>

<pre>
user=&gt; <strong>(is (fn? true))</strong>
&nbsp;
FAIL in clojure.lang.PersistentList$EmptyList@1 (NO_SOURCE_FILE:1)
expected: (fn? true)
  actual: (not (fn? true))
false
</pre>

<p>Řádek začínající slovem FAIL jen naznačuje, že makro <strong>is</strong>
spouštíme z&nbsp;interaktivní konzole a nikoli ze zdrojového kódu (kde by bylo
známé jak jméno zdrojového souboru, tak i číslo řádku, na němž je makro
<strong>is</strong> použito). Tento nedostatek se nijak neprojeví při testování
reálných aplikací.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Test, zda byla vyhozena výjimka specifikovaného typu</h2>

<p>V&nbsp;nápovědě zobrazené k&nbsp;makru <strong>is</strong> je
mj.&nbsp;popsána i speciální forma použití tohoto makra:</p>

<pre>
(is (thrown? c body))
</pre>

<p>Tuto formu je možné použít pro otestování, zda zavolání nějaké funkce vyvolá
výjimky určitého typu (typ je určen třídou <strong>c</strong>). Podívejme se na
velmi jednoduchý příklad. Tím je dělení nulou, které vede k&nbsp;vyhození
výjimky typu <strong>ArithmeticException</strong>. Ostatně můžeme se sami
přesvědčit, zda je to pravda:</p>

<pre>
user=&gt; <strong>(/ 42 0)</strong>
&nbsp;
ArithmeticException Divide by zero  clojure.lang.Numbers.divide (Numbers.java:156)
</pre>

<p>Výjimka skutečně byla vyhozena, takže můžeme zkusit, co se stane ve chvíli,
kdy se využije výše uvedená speciální forma volání makra
<strong>is</strong>:</p>

<pre>
user=&gt; <strong>(is (thrown? ArithmeticException (/ 42 0)))</strong>
#&lt;ArithmeticException java.lang.ArithmeticException: Divide by zero&lt;
</pre>

<p>Výsledkem volání je instance třídy ArithmeticException. Opět se můžeme
snadno přesvědčit, že je to pravda:</p>

<pre>
user=&gt; <strong>(def result (is (thrown? ArithmeticException (/ 42 0))))</strong>
#'user/result
user=&gt; <strong>result</strong>
#&lt;ArithmeticException java.lang.ArithmeticException: Divide by zero&lt;
user=&gt; <strong>(type result)</strong>
java.lang.ArithmeticException
</pre>

<p>Ve chvíli, kdy se použije format <strong>(is (thrown? ...))</strong> a
k&nbsp;vyhození výjimky nedojde, vypíše makro <strong>is</strong> následující
zprávu:</p>

<pre>
user=&gt; <strong>(is (thrown? ArithmeticException (/ 42 1)))</strong>
&nbsp;
FAIL in clojure.lang.PersistentList$EmptyList@1 (NO_SOURCE_FILE:1)
expected: (thrown? ArithmeticException (/ 42 1))
  actual: nil
nil
</pre>

<p>Můžeme zkusit i poněkud složitější příklad &ndash; otestování chování funkce
<strong>nth</strong> při pokusu o získání prvku z&nbsp;vektoru, přičemž index
bude záporný (či větší než délka vektoru):</p>

<pre>
<i>; vytvoření vektoru</i>
user=&gt; <strong>(def data [1 2 3])</strong>
#'user/data
&nbsp;
<i>; prvek s indexem 1 existuje (podle očekávání)</i>
user=&gt; <strong>(nth data 1)</strong>
2
&nbsp;
<i>; ovšem prvek s indexem -1 již neexistuje (opět podle očekávání)</i>
user=&gt; <strong>(nth data -1)</strong>
&nbsp;
IndexOutOfBoundsException   clojure.lang.PersistentVector.arrayFor (PersistentVector.java:107)
&nbsp;
<i>; (v mnoha případech je vhodnější namísto (nth) použít (get)</i>
</pre>

<p>Opět můžeme použít makro <strong>is</strong> pro zjištění, zda
k&nbsp;výjimce dojde či nikoli:</p>

<pre>
user=&gt; <strong>(is (thrown? IndexOutOfBoundsException (nth data -1)))</strong>
#&lt;IndexOutOfBoundsException java.lang.IndexOutOfBoundsException&gt;
&nbsp;
user=&gt; <strong>(is (thrown? IndexOutOfBoundsException (nth data 1)))</strong>
&nbsp;
FAIL in clojure.lang.PersistentList$EmptyList@1 (form-init3748557964393682041.clj:1)
expected: (thrown? IndexOutOfBoundsException (nth data 1))
  actual: nil
nil
</pre>

<p>Základní informace o chování makra <strong>is</strong> již nyní známe, takže
můžeme opustit smyčku REPL:</p>

<pre>
user=&gt; <strong>(quit)</strong>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Nástroj Leiningen a jednotkové testy</h2>

<p>V&nbsp;předchozích dvou kapitolách jsme si ukázali některé možnosti makra
<strong>is</strong>, takže si již můžeme říci, jakým způsobem je spouštění
jednotkových testů podporováno v&nbsp;nástroji <i>Leiningen</i>. Již
v&nbsp;první a druhé části tohoto článku jsme si popisovali strukturu nově
vytvořeného projektu. Připomeňme si, že projekt je tvořen adresářem obsahujícím
především soubor <strong>project.clj</strong> a dále podadresář
<strong>src</strong>, v&nbsp;němž jsou umístěny zdrojové kódy aplikace. Kromě
toho však v&nbsp;projektu nalezneme i podadresář nazvaný <strong>test</strong>,
jehož účel je jednoduchý &ndash; v&nbsp;tomto adresáři jsou uloženy jednotkové
testy a to (většinou) strukturované tak, že každému modulu uloženému
v&nbsp;adresáři <strong>src</strong> odpovídá jeden soubor s&nbsp;jednotkovými
testy uložený v&nbsp;adresáři <strong>test</strong>. Pokud tedy bude aplikace
obsahovat tři moduly nazvané <i>core</i>, <i>module1</i> a <i>module2</i>, může
struktura projektu vypadat následovně:</p>

<pre>
.
├── doc
│   └── intro.md
├── LICENSE
├── project.clj
├── README.md
├── resources
├── src
│   └── factorial
│       ├── module1.clj
│       ├── module2.clj
│       └── core.clj
├── test
│   └── factorial
│       ├── module1_test.clj
│       ├── module2_test.clj
│       └── core_test.clj
</pre>

<p>Všechny jednotkové testy se spouští příkazem:</p>

<pre>
<strong>lein test</strong>
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vytvoření nového projektu obsahujícího funkci pro výpočet faktoriálu</h2>

<p>Pro zjištění, jakým způsobem se s&nbsp;jednotkovými testy pracuje prakticky,
si vytvoříme nový projekt, v&nbsp;němž bude implementována funkce pro výpočet
faktoriálu:</p>

<pre>
<strong>lein new app factorial</strong>
</pre>

<p>Na rozdíl od předchozích částí tohoto článku nebudeme měnit nastavení
projektu, tj.&nbsp;obsah souboru <strong>project.clj</strong>. Upravíme ovšem
zdrojový kód projektu, tedy soubor <strong>src/factorial/core.clj</strong>
následujícím způsobem:</p>

<pre>
(ns factorial.core
    (:gen-class))
&nbsp;
<i>; funkce faktorial obsahuje i test na zaporne hodnoty</i>
(defn factorial
    [n]
    (if (neg? n)
        (throw (IllegalArgumentException. "negative numbers are not supported!"))
        (apply * (range 1 (inc n)))))
&nbsp;
<i>; otestujeme funkci faktorial</i>
(defn -main
    [&amp; args]
    (doseq [i (range 0 10)]
        (println i "! = " (factorial i))))
</pre>

<p>Po spuštění této aplikace příkazem <strong>lein run</strong> by se na
standardní výstup měly vypsat faktoriály pro hodnoty nula až devět:</p>

<pre>
<strong>lein run</strong>
&nbsp;
0 ! =  1
1 ! =  1
2 ! =  2
3 ! =  6
4 ! =  24
5 ! =  120
6 ! =  720
7 ! =  5040
8 ! =  40320
9 ! =  362880
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Úprava jednotkového testu a následné spuštění jednotkového testu</h2>

<p>Druhým krokem bude příprava jednotkového testu, tedy konkrétně souboru
<strong>test/factorial/core_test.clj</strong>. V&nbsp;tomto souboru budou
deklarovány dva testy:</p>

<pre>
(ns factorial.core-test
  (:require [clojure.test :refer :all]
            [factorial.core :refer :all]))
&nbsp;
(deftest factorial-test
    (testing "Factorial"
        (is ( = (factorial 0)   1) "beginning")
        (is ( = (factorial 1)   1) "beginning")
        (is ( = (factorial 2)   (* 1 2)) "still easy")
        (is ( = (factorial 5)   (* 1 2 3 4 5)) "5!")
        (is ( = (factorial 6)   720) "6!")))
&nbsp;
(deftest exception-test
    (testing "If factorial throws exception"
        (is (thrown? IllegalArgumentException (factorial -1)))
        (is (thrown? IllegalArgumentException (factorial -2)))
        (is (thrown? IllegalArgumentException (factorial -100)))))
</pre>

<p>Povšimněte si, že jednotlivé testy jsou deklarovány pomocí
<strong>deftest</strong>, což je funkce sdružující více jednotkových testů.
Uvnitř <strong>deftest</strong> lze použít makro <strong>testing</strong>
zajišťující další úroveň sdružování, není to však nutné (já zde makro používám
pro zvýšení čitelnosti). Poté následují již jednotlivé testy používající makro
<strong>is</strong>, s&nbsp;nímž jsme se již seznámili v&nbsp;předchozích
kapitolách. Za povšimnutí stojí i způsob použití makra <strong>ns</strong> na
začátku testu, především pak třetí řádek, který zajistí nahrání všech
testovaných funkcí (to se neprovádí automaticky).</p>

<p>Testy lze spustit z&nbsp;adresáře projektu:</p>

<pre>
<strong>lein test</strong>
</pre>

<p>Na standardní výstup by se měly vypsat následující zprávy:</p>

<pre>
lein test factorial.core-test
&nbsp;
Ran 2 tests containing 8 assertions.
0 failures, 0 errors.
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Výsledek běhu jednotkového testu v&nbsp;případě, že je testovaná funkce chybná</h2>

<p>V&nbsp;dalším kroku se pokusme funkci pro výpočet faktoriálu
&bdquo;rozbít&ldquo; takovým způsobem, aby vracela nesprávné výsledky. Namísto
korektního kódu:</p>

<pre>
(defn factorial
    [n]
    (if (neg? n)
        (throw (IllegalArgumentException. "negative numbers are not supported!"))
        (apply * (range 1 (inc n)))))
</pre>

<p>se bude provádět tento kód:</p>

<pre>
(defn factorial
    [n]
    (if (neg? n)
        (throw (IllegalArgumentException. "negative numbers are not supported!"))
        (apply * (range 1 n))))
</pre>

<p>Aplikaci samozřejmě půjde spustit, ovšem bude vypisovat nekorektní
výsledky:</p>

<pre>
<strong>lein run</strong>
&nbsp;
0 ! =  1
1 ! =  1
2 ! =  1
3 ! =  2
4 ! =  6
5 ! =  24
6 ! =  120
7 ! =  720
8 ! =  5040
9 ! =  40320
</pre>

<p>Co se nyní stane při spuštění jednotkových testů?</p>

<pre>
<strong>lein test</strong>
&nbsp;
lein test factorial.core-test
&nbsp;
lein test :only factorial.core-test/factorial-test
&nbsp;
FAIL in (factorial-test) (core_test.clj:9)
Factorial
still easy
expected: (= (factorial 2) (* 1 2))
  actual: (not (= 1 2))
&nbsp;
lein test :only factorial.core-test/factorial-test
&nbsp;
FAIL in (factorial-test) (core_test.clj:10)
Factorial
5!
expected: (= (factorial 5) (* 1 2 3 4 5))
  actual: (not (= 24 120))
&nbsp;
lein test :only factorial.core-test/factorial-test
&nbsp;
FAIL in (factorial-test) (core_test.clj:11)
Factorial
6!
expected: (= (factorial 6) 720)
  actual: (not (= 120 720))
&nbsp;
Ran 2 tests containing 8 assertions.
3 failures, 0 errors.
Tests failed.
</pre>

<p>Vidíme, že se chyba v&nbsp;implementaci ihned projevila ve výsledcích
testů.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Jednotkové testy s&nbsp;výstupem kompatibilním s&nbsp;JUnit</h2>

<p>Příkazem <strong>lein run</strong> je sice možné spustit jednotkové testy a
získat čitelný výstup, tj.&nbsp;informaci o tom, kolik testů bylo spuštěno,
kolik testů proběhlo v&nbsp;pořádku a které testy naopak našly v&nbsp;aplikaci
chybu, ovšem výstupní formát je poněkud neobvyklý. Ve světě Javy (a vlastně i
mimo tento svět) se ustálilo použití XML formátu kompatibilního
s&nbsp;nástrojem <i>JUnit</i>. Tento formát dokážou zpracovat jak mnohá
integrovaná vývojová prostředí, tak i například několik přídavných modulů pro
systém Jenkins popř.&nbsp;Hudson. Tyto moduly dokážou například vytvářet grafy
s&nbsp;regresemi atd., takže by bylo vhodné nějakým způsobem upravit
<i>Leiningen</i> takovým způsobem, aby formát <i>JUnitu</i> podporoval. To je
samozřejmě možné, a to především díky velké rozšiřitelnosti <i>Leiningenu</i> o
další moduly. Modul, který budeme potřebovat, se jmenuje jednoduše
<strong>test2junit</strong> a v&nbsp;následujících dvou kapitolách si ukážeme
jeho základní použití.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vytvoření druhého demonstračního příkladu <strong>factorial2</strong></h2>

<p>Vytvoříme si nový demonstrační příklad nazvaný jednoduše
<strong>factorial2</strong>:</p>

<pre>
<strong>lein new app factorial2</strong>
</pre>

<p>Následně musíme upravit soubor <strong>project.clj</strong> takovým
způsobem, že se do něj přidá informace o modulu rozšiřujícím možnosti
<i>Leiningenu</i>. Nový řádek je zvýrazněn:</p>

<pre>
(defproject factorial2 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]]
  :main ^:skip-aot factorial2.core
  :target-path "target/%s"
  <strong>:plugins [[test2junit "1.1.0"]]</strong>
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Následně je nutné spustit následující příkaz, který zajistí stažení nového
modulu a popř.&nbsp;i všech knihoven, na nichž tento modul závisí:</p>

<pre>
<strong>lein deps</strong>
&nbsp;
Retrieving test2junit/test2junit/1.1.0/test2junit-1.1.0.pom from clojars
Retrieving test2junit/test2junit/1.1.0/test2junit-1.1.0.jar from clojars
</pre>

<p>Obsah souborů <strong>src/factorial2/core.clj</strong> a
<strong>test/factorial2/core_test.clj</strong> bude shodný s&nbsp;předchozím
příkladem, samozřejmě až na jinak pojmenovaný jmenný prostor (je přidána
dvojka):</p>

<pre>
(ns factorial2.core
    (:gen-class))
&nbsp;
<i>; funkce faktorial obsahuje i test na zaporne hodnoty</i>
(defn factorial
    [n]
    (if (neg? n)
        (throw (IllegalArgumentException. "negative numbers are not supported!"))
        (apply * (range 1 (inc n)))))
&nbsp;
<i>; otestujeme funkci faktorial</i>
(defn -main
    [&amp; args]
    (doseq [i (range 0 10)]
        (println i "! = " (factorial i))))
</pre>

<pre>
(ns factorial2.core-test
  (:require [clojure.test :refer :all]
            [factorial2.core :refer :all]))
&nbsp;
(deftest factorial-test
    (testing "Factorial"
        (is ( = (factorial 0)   1) "beginning")
        (is ( = (factorial 1)   1) "beginning")
        (is ( = (factorial 2)   (* 1 2)) "still easy")
        (is ( = (factorial 5)   (* 1 2 3 4 5)) "5!")
        (is ( = (factorial 6)   720) "6!")))
&nbsp;
(deftest exception-test
    (testing "If factorial throws exception"
        (is (thrown? IllegalArgumentException (factorial -1)))
        (is (thrown? IllegalArgumentException (factorial -2)))
        (is (thrown? IllegalArgumentException (factorial -100)))))
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Spuštění jednotkového testu a konverze výsledku do formátu kompatibilního s&nbsp;JUnit</h2>

<p>Nyní nastává zajímavý okamžik &ndash; spustíme totiž nástroj
<i>Leiningen</i> s&nbsp;novým jménem úkolu (task). To je možné, protože
<i>Leiningen</i> byl díky úpravě souboru <strong>project.clj</strong> rozšířen
o novou funkcionalitu:</p>

<pre>
<strong>lein test2junit</strong>
</pre>

<p>Na standardní výstup se vypíšou následující informace (v&nbsp;některých
případech se však ještě stáhnou zbývající knihovny, na nichž dokončení
zvoleného úkolu závisí):</p>

<pre>
Using test2junit version: 1.1.0
Running Tests...
Writing output to: test2junit
Creating default build.xml file.
&nbsp;
Testing: factorial2.core-test
&nbsp;
Ran 2 tests containing 8 assertions.
0 failures, 0 errors.
</pre>

<p>Výsledkem běhu tohoto nového tasku je soubor <strong>build.xml</strong> a
především pak adresářová struktura <strong>test2unit</strong> obsahující soubor
s&nbsp;cestou <strong>test2unit/xml/factorial2.core-test.xml</strong>.
Podívejme se na obsah tohoto souboru:</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;testsuite name="factorial2.core-test" errors="0" failures="0" tests="2" time="0.0142" timestamp="2015-02-21_20:56:31+0100"&gt;
    &lt;testcase name="factorial-test" classname="factorial2.core-test" time="0.0044"&gt;
    &lt;/testcase&gt;
    &lt;testcase name="exception-test" classname="factorial2.core-test" time="0.0013"&gt;
    &lt;/testcase&gt;
&lt;/testsuite&gt;
</pre>

<p>Vidíme, že jsou zde uloženy informace jak o jménu spuštěných testů, tak i o
době běhu a čase spuštění.</p>

<p>Pokud uděláme ve zdrojovém kódu aplikace záměrnou chybu &ndash; vynechání
volání funkce <strong>inc</strong> &ndash; bude výsledek běhu testů
odlišný:</p>

<pre>
<strong>lein test2junit</strong>
&nbsp;
Using test2junit version: 1.1.0
Running Tests...
Writing output to: test2junit
&nbsp;
Testing: factorial2.core-test
&nbsp;
Ran 2 tests containing 8 assertions.
3 failures, 0 errors.
Tests failed.
Tests failed.
</pre>

<p>A odlišovat se samozřejmě bude i výstupní XML soubor:o</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;testsuite name="factorial2.core-test" errors="0" failures="3" tests="2" time="0.0232" timestamp="2015-02-21_20:59:03+0100"&gt;
    &lt;testcase name="factorial-test" classname="factorial2.core-test" time="0.0168"&gt;
    &lt;failure message="still easy"&gt;still easy
expected: (= (factorial 2) (* 1 2))
  actual: (not (= 1 2))
      at: AFn.java:18&lt;/failure&gt;
    &lt;failure message="5!"&gt;5!
expected: (= (factorial 5) (* 1 2 3 4 5))
  actual: (not (= 24 120))
      at: AFn.java:18&lt;/failure&gt;
    &lt;failure message="6!"&gt;6!
expected: (= (factorial 6) 720)
  actual: (not (= 120 720))
      at: AFn.java:18&lt;/failure&gt;
    &lt;/testcase&gt;
    &lt;testcase name="exception-test" classname="factorial2.core-test" time="0.0011"&gt;
    &lt;/testcase&gt;
&lt;/testsuite&gt;
</pre>

<p>Ve čtvrté části tohoto článku se budeme věnovat problematice tvorby webových
aplikací s&nbsp;využitím knihoven <strong>Ring</strong> a
<strong>Hiccup</strong>.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II<br />
<a href="2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

