<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Pokročilý streaming založený na Apache Kafce, jazyku Clojure a knihovně Jackdaw</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Pokročilý streaming založený na Apache Kafce, jazyku Clojure a knihovně Jackdaw</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Pokročilý streaming založený na Apache Kafce, jazyku Clojure a knihovně Jackdaw</a></p>
<p><a href="#k02">2. Instalace a spuštění Kafky</a></p>
<p><a href="#k03">3. Stažení všech knihoven potřebných pro volání funkcí Apache Kafky z&nbsp;jazyka Clojure</a></p>
<p><a href="#k04">4. Interaktivní práce s&nbsp;Kafkou z&nbsp;REPLu popř.&nbsp;z&nbsp;textového editoru/IDE</a></p>
<p><a href="#k05">5. Vytvoření nového tématu s&nbsp;jedním oddílem</a></p>
<p><a href="#k06">6. Korektní nastavení logování v&nbsp;projektu</a></p>
<p><a href="#k07">7. Vytvoření tématu s&nbsp;deseti oddíly</a></p>
<p><a href="#k08">8. Výpis informací o konfiguraci brokeru</a></p>
<p><a href="#k09">9. Přečtení a zobrazení základních informací o Kafka clusteru</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na předchozí části seriálu o programovacím jazyku Clojure</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Pokročilý streaming založený na Apache Kafce, jazyku Clojure a knihovně Jackdaw</h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace a spuštění Kafky</h2>

<p>V&nbsp;případě, že je na počítači nainstalováno JRE (Java Runtime
Environment), je instalace Kafky pro testovací účely triviální. Tarball
s&nbsp;instalací poslední stabilní verze Kafky lze získat z&nbsp;adresy <a
href="https://www.apache.org/dyn/closer.cgi?path=/kafka/2.6.0/kafka_2.13-2.6.0.tgz">https://www.apache.org/dyn/closer.cgi?path=/kafka/2.6.0/kafka_2.13-2.6.0.tgz</a>.
Stažení a rozbalení tarballu se provede následovně:</p>

<pre>
$ <strong>wget https://www.apache.org/dyn/closer.cgi?path=/kafka/2.6.0/kafka_2.13-2.6.0.tgz</strong>
$ <strong>tar -xzf kafka_2.13-2.6.0.tgz</strong>
$ <strong>cd kafka_2.13-2.6.0</strong>
</pre>

<p>Po rozbalení získáme adresář, v&nbsp;němž se nachází všechny potřebné Java
archivy (JAR), konfigurační soubory (v&nbsp;podadresáři
<strong>config</strong>) a několik pomocných skriptů (v&nbsp;podadresáři
<strong>bin</strong>). Pro spuštění Zookeepera a brokerů je zapotřebí mít
nainstalovánu již zmíněnou JRE (Java Runtime Environment) a samozřejmě též
nějaký shell (BASH, cmd, ...).</p>

<p>Prozatím nebudeme žádné další nastavení ani žádné další nástroje potřebovat,
ovšem v&nbsp;navazujícím článku se zmíníme o některých užitečných utilitách
určených pro administraci a sledování (monitorování) Kafky.</p>

<a href="https://www.root.cz/obrazek/401919/"><img src="https://i.iinfo.cz/images/303/kafka-jconsole-1-prev.png" class="image-401919" alt="&#160;" width="324" height="270" /></a>
<p><i>Obrázek 1: Sledování činnosti brokeru přes standardní nástroj JConsole.</i></p>

<p>Po (doufejme že úspěšné) instalaci Kafky již můžeme spustit ZooKeeper a
jednu instanci brokera (a to přesně v&nbsp;tomto pořadí, tedy nejdřívě
ZooKeeper!). Konfigurace ZooKeepera je uložena v&nbsp;souboru
<strong>config/zookeeper.properties</strong> a zajímat nás budou především tyto
volby &ndash; adresář, kam ZooKeeper ukládá svoje data, port, který použijí
brokeři a omezení počtu připojení jednoho klienta v&nbsp;daný okamžik:</p>

<pre>
<strong>dataDir=/tmp/zookeeper</strong>
clientPort=2181
maxClientCnxns=0
</pre>

<p><div class="rs-tip-major">Poznámka: hodnota <strong>maxClientCnxns</strong>
v&nbsp;tomto případě neznamená, že by se nemohly připojit žádní klienti, ale že
je vypnutý mechanismus, který zabezpečuje infrastrukturu Kafky před některými
typy DOS útoků. Na disku, kde je adresář <strong>dataDir</strong> by také mělo
být dostatek místa, protože ZooKeeper v&nbsp;některých případech mívá větší
nároky. Další informace lze nalézt na stránce <a
href="https://zookeeper.apache.org/doc/r3.5.6/">https://zookeeper.apache.org/doc/r3.5.6/</a>.</div></p>

<p>Nyní již můžeme Zookeepera spustit:</p>

<pre>
$ <strong>bin/zookeeper-server-start.sh config/zookeeper.properties</strong>
&nbsp;
[2020-01-20 17:00:07,823] INFO Reading configuration from: config/zookeeper.properties (org.apache.zookeeper.server.quorum.QuorumPeerConfig)
[2020-01-20 17:00:07,825] WARN config/zookeeper.properties is relative. Prepend ./ to indicate that you're sure! (org.apache.zookeeper.server.quorum.QuorumPeerConfig)
[2020-01-20 17:00:07,827] INFO clientPortAddress is 0.0.0.0/0.0.0.0:2181 (org.apache.zookeeper.server.quorum.QuorumPeerConfig)
...
...
...
[2020-01-20 17:00:07,947] INFO Using checkIntervalMs=60000 maxPerMinute=10000 (org.apache.zookeeper.server.ContainerManager)
[2020-01-20 17:00:26,978] INFO Creating new log file: log.1 (org.apache.zookeeper.server.persistence.FileTxnLog)
</pre>

<p>Konfigurace jednoho brokera je uložená v&nbsp;souboru
<strong>config/server.properties</strong>. Samotný konfigurační soubor obsahuje
několik sekcí:</p>

<ol>
<li>Port, na kterém broker naslouchá, jeho ID, počet použitých vláken pro IO operace a počet vláken pro komunikaci.</li>
<li>Velikost bufferů, maximální povolená velikost požadavků (což omezuje velikost zprávy) atd.</li>
<li>Nastavení počtu <i>partitions</i></li>
<li>Nastavení <i>retence</i> dat</li>
<li>Připojení k&nbsp;Zookeeperovi</li>
</ol>

<p>Pro testovací účely změníme především umístění souborů s&nbsp;logy (tedy
s&nbsp;jednotlivými <i>partitions</i>):</p>

<pre>
broker.id=0
listeners=PLAINTEXT://:9092
num.network.threads=3
num.io.threads=8
&nbsp;
socket.send.buffer.bytes=102400
socket.receive.buffer.bytes=102400
socket.request.max.bytes=104857600
&nbsp;
<strong>log.dirs=/tmp/kafka-logs</strong>
num.partitions=1
num.recovery.threads.per.data.dir=1
log.retention.hours=168
log.segment.bytes=1073741824
&nbsp;
zookeeper.connect=localhost:2181
zookeeper.connection.timeout.ms=6000
</pre>

<p><div class="rs-tip-major">Poznámka: i velikost adresáře
<strong>log.dirs</strong> roste, a to mnohdy velmi rychle (typicky se alokuje
20MB pro každou <i>partition</i>), takže se vyplatí sledovat příslušné
metriky.</div></p>

<p>Spuštění jednoho brokera vypadá jednoduše:</p>

<pre>
$ <strong>bin/kafka-server-start.sh config/server.properties</strong>
</pre>

<p>Alternativně je možné Zookeepera i Kafku (jednu instanci brokera) spustit
v&nbsp;Dockeru:</p>

<pre>
$ <strong>docker run -p 2181:2181 -p 9092:9092 --env ADVERTISED_HOST=`docker-machine ip \`docker-machine active\`` --env ADVERTISED_PORT=9092 spotify/kafka</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: předchozí nastavení předpokládá, že
současně na stejném stroji nepoběží žádná další instance Kafky ani Zookeepera.
Pokud budete potřebovat spustit větší množství brokerů, je nutné minimálně
změnit mapování portů (přepínače <strong>-p</strong>).</div></p>

<p>Po spuštění jak Zookepera, tak i brokera Kafky se podívejte na obsah
adresáře <strong>/tmp/kafka-logs/</strong>, který byl nakonfigurován
v&nbsp;rámci předchozího textu. Prozatím by se v&nbsp;tomto adresáři mělo
vyskytovat pouze několik souborů, ovšem žádné adresáře (každý adresář odpovídá
jedné <i>partition</i> určeného <i>topicu</i>, popř.&nbsp;právě smazané
<i>partition</i> &ndash; to uvidíme v&nbsp;dalším textu):</p>

<pre>
$ <strong>ls -l /tmp/kafka-logs/</strong>
&nbsp;
total 4
-rw-rw-r--. 1 ptisnovs ptisnovs  0 Nov 27 14:39 cleaner-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs  0 Nov 27 14:39 log-start-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs 88 Nov 27 14:39 meta.properties
-rw-rw-r--. 1 ptisnovs ptisnovs  0 Nov 27 14:39 recovery-point-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs  0 Nov 27 14:39 replication-offset-checkpoint
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Stažení všech knihoven potřebných pro volání funkcí Apache Kafky z&nbsp;jazyka Clojure</h2>

<p>Nyní je zapotřebí získat všechny knihovny, které jsou přímo či nepřímo
používány pro volání funkcí Apache Kafky z&nbsp;programovacího jazyka Clojure.
Využijeme přitom nástroj <a
href="https://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">Leiningen</a>,
který je úzce navázán na Maven. Nejprve vytvoříme kostru nového projektu
příkazem:</p>

<pre>
$ <strong>lein new app topic-constructor</strong>
&nbsp;
Generating a project called topic-constructor based on the 'app' template.
</pre>

<p>V&nbsp;nově vytvořeném adresáři <strong>topic-constuctor</strong> se nachází
soubor <strong>project.clj</strong>, jenž mj.&nbsp;obsahuje i seznam
závislostí:</p>

<pre>
(defproject topic-constructor "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0"
            :url "https://www.eclipse.org/legal/epl-2.0/"}
  <strong>:dependencies [[org.clojure/clojure "1.10.1"]]</strong>
  :main ^:skip-aot topic-constructor.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all
                       :jvm-opts ["-Dclojure.compiler.direct-linking=true"]}})
</pre>

<p>Tento soubor upravíme do následující podoby &ndash; přidáme závislost na
knihovně <strong>fundingcircle/jackdaw</strong>:</p>

<pre>
(defproject topic-constructor "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0"
            :url "https://www.eclipse.org/legal/epl-2.0/"}
  :dependencies [[org.clojure/clojure "1.10.1"]
                 <strong>[fundingcircle/jackdaw "0.7.6"]</strong>]
  :main ^:skip-aot topic-constructor.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all
                       :jvm-opts ["-Dclojure.compiler.direct-linking=true"]}})
</pre>

<p>Příkazem <strong>lein deps</strong> se zahájí stažení všech doposud
nenainstalovaných závislostí:</p>

<pre>
$ <strong>lein deps</strong>
&nbsp;
Retrieving fundingcircle/jackdaw/0.7.6/jackdaw-0.7.6.pom from clojars
Retrieving aleph/aleph/0.4.6/aleph-0.4.6.pom from clojars
Retrieving manifold/manifold/0.1.8/manifold-0.1.8.pom from clojars
Retrieving io/aleph/dirigiste/0.1.5/dirigiste-0.1.5.pom from central
Retrieving riddley/riddley/0.1.14/riddley-0.1.14.pom from clojars
Retrieving byte-streams/byte-streams/0.2.4/byte-streams-0.2.4.pom from clojars
Retrieving primitive-math/primitive-math/0.1.6/primitive-math-0.1.6.pom from clojars
Retrieving io/netty/netty-transport/4.1.25.Final/netty-transport-4.1.25.Final.pom from central
Retrieving io/netty/netty-parent/4.1.25.Final/netty-parent-4.1.25.Final.pom from central
Retrieving io/netty/netty-buffer/4.1.25.Final/netty-buffer-4.1.25.Final.pom from central
Retrieving io/netty/netty-common/4.1.25.Final/netty-common-4.1.25.Final.pom from central
Retrieving io/netty/netty-resolver/4.1.25.Final/netty-resolver-4.1.25.Final.pom from central
Retrieving io/netty/netty-transport-native-epoll/4.1.25.Final/netty-transport-native-epoll-4.1.25.Final.pom from central
Retrieving io/netty/netty-transport-native-unix-common/4.1.25.Final/netty-transport-native-unix-common-4.1.25.Final.pom from central
Retrieving io/netty/netty-codec/4.1.25.Final/netty-codec-4.1.25.Final.pom from central
Retrieving io/netty/netty-codec-http/4.1.25.Final/netty-codec-http-4.1.25.Final.pom from central
Retrieving io/netty/netty-handler/4.1.25.Final/netty-handler-4.1.25.Final.pom from central
Retrieving io/netty/netty-handler-proxy/4.1.25.Final/netty-handler-proxy-4.1.25.Final.pom from central
Retrieving io/netty/netty-codec-socks/4.1.25.Final/netty-codec-socks-4.1.25.Final.pom from central
Retrieving io/netty/netty-resolver-dns/4.1.25.Final/netty-resolver-dns-4.1.25.Final.pom from central
Retrieving io/netty/netty-codec-dns/4.1.25.Final/netty-codec-dns-4.1.25.Final.pom from central
Retrieving clj-time/clj-time/0.15.1/clj-time-0.15.1.pom from clojars
Retrieving joda-time/joda-time/2.10/joda-time-2.10.pom from central
Retrieving danlentz/clj-uuid/0.1.9/clj-uuid-0.1.9.pom from clojars
Retrieving io/confluent/kafka-schema-registry-client/5.3.1/kafka-schema-registry-client-5.3.1.pom from confluent
Retrieving io/confluent/kafka-schema-registry-parent/5.3.1/kafka-schema-registry-parent-5.3.1.pom from confluent
Retrieving io/confluent/rest-utils-parent/5.3.1/rest-utils-parent-5.3.1.pom from confluent
Retrieving io/confluent/common/5.3.1/common-5.3.1.pom from confluent
Retrieving io/confluent/common-parent/5.3.1/common-parent-5.3.1.pom from confluent
Retrieving org/glassfish/jersey/jersey-bom/2.27/jersey-bom-2.27.pom from central
Retrieving net/java/jvnet-parent/4/jvnet-parent-4.pom from central
Retrieving org/apache/kafka/kafka-clients/5.3.1-ccs/kafka-clients-5.3.1-ccs.pom from confluent
Retrieving com/github/luben/zstd-jni/1.4.0-1/zstd-jni-1.4.0-1.pom from central
Retrieving org/lz4/lz4-java/1.6.0/lz4-java-1.6.0.pom from central
Retrieving org/xerial/snappy/snappy-java/1.1.7.3/snappy-java-1.1.7.3.pom from central
Retrieving org/slf4j/slf4j-api/1.7.26/slf4j-api-1.7.26.pom from central
Retrieving org/slf4j/slf4j-parent/1.7.26/slf4j-parent-1.7.26.pom from central
Retrieving io/confluent/common-config/5.3.1/common-config-5.3.1.pom from confluent
Retrieving io/confluent/common-utils/5.3.1/common-utils-5.3.1.pom from confluent
Retrieving org/apache/zookeeper/zookeeper/3.4.14/zookeeper-3.4.14.pom from central
Retrieving org/slf4j/slf4j-parent/1.7.25/slf4j-parent-1.7.25.pom from central
Retrieving com/github/spotbugs/spotbugs-annotations/3.1.9/spotbugs-annotations-3.1.9.pom from central
Retrieving com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.pom from central
Retrieving jline/jline/0.9.94/jline-0.9.94.pom from central
Retrieving org/apache/yetus/audience-annotations/0.5.0/audience-annotations-0.5.0.pom from central
Retrieving org/apache/yetus/yetus-project/0.5.0/yetus-project-0.5.0.pom from central
Retrieving org/apache/apache/17/apache-17.pom from central
Retrieving io/netty/netty/3.10.6.Final/netty-3.10.6.Final.pom from central
Retrieving com/101tec/zkclient/0.10/zkclient-0.10.pom from central
Retrieving org/slf4j/slf4j-api/1.6.1/slf4j-api-1.6.1.pom from central
Retrieving org/slf4j/slf4j-parent/1.6.1/slf4j-parent-1.6.1.pom from central
Retrieving org/apache/zookeeper/zookeeper/3.4.8/zookeeper-3.4.8.pom from central
Retrieving io/netty/netty/3.7.0.Final/netty-3.7.0.Final.pom from central
Retrieving org/apache/avro/avro/1.8.1/avro-1.8.1.pom from central
Retrieving org/apache/avro/avro-parent/1.8.1/avro-parent-1.8.1.pom from central
Retrieving org/apache/avro/avro-toplevel/1.8.1/avro-toplevel-1.8.1.pom from central
Retrieving org/apache/apache/10/apache-10.pom from central
Retrieving org/codehaus/jackson/jackson-core-asl/1.9.13/jackson-core-asl-1.9.13.pom from central
Retrieving org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13.pom from central
Retrieving com/thoughtworks/paranamer/paranamer/2.7/paranamer-2.7.pom from central
Retrieving com/thoughtworks/paranamer/paranamer-parent/2.7/paranamer-parent-2.7.pom from central
Retrieving org/codehaus/codehaus-parent/4/codehaus-parent-4.pom from central
Retrieving org/xerial/snappy/snappy-java/1.1.1.3/snappy-java-1.1.1.3.pom from central
Retrieving org/apache/commons/commons-compress/1.8.1/commons-compress-1.8.1.pom from central
Retrieving org/apache/commons/commons-parent/33/commons-parent-33.pom from central
Retrieving org/tukaani/xz/1.5/xz-1.5.pom from central
Retrieving org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.pom from central
Retrieving org/slf4j/slf4j-parent/1.7.7/slf4j-parent-1.7.7.pom from central
Retrieving io/confluent/kafka-avro-serializer/5.3.1/kafka-avro-serializer-5.3.1.pom from confluent
Retrieving com/fasterxml/jackson/core/jackson-databind/2.9.9.3/jackson-databind-2.9.9.3.pom from central
Retrieving com/fasterxml/jackson/jackson-base/2.9.9/jackson-base-2.9.9.pom from central
Retrieving com/fasterxml/jackson/jackson-bom/2.9.9/jackson-bom-2.9.9.pom from central
Retrieving com/fasterxml/jackson/jackson-parent/2.9.1.2/jackson-parent-2.9.1.2.pom from central
Retrieving com/fasterxml/oss-parent/34/oss-parent-34.pom from central
Retrieving com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.pom from central
Retrieving com/fasterxml/jackson/jackson-parent/2.9.0/jackson-parent-2.9.0.pom from central
Retrieving com/fasterxml/oss-parent/28/oss-parent-28.pom from central
Retrieving com/fasterxml/jackson/core/jackson-core/2.9.9/jackson-core-2.9.9.pom from central
Retrieving org/apache/kafka/kafka-clients/2.3.1/kafka-clients-2.3.1.pom from central
Retrieving org/apache/kafka/kafka-streams/2.3.1/kafka-streams-2.3.1.pom from central
Retrieving org/apache/kafka/connect-json/2.3.1/connect-json-2.3.1.pom from central
Retrieving org/apache/kafka/connect-api/2.3.1/connect-api-2.3.1.pom from central
Retrieving com/fasterxml/jackson/core/jackson-databind/2.10.0/jackson-databind-2.10.0.pom from central
Retrieving com/fasterxml/jackson/jackson-base/2.10.0/jackson-base-2.10.0.pom from central
Retrieving com/fasterxml/jackson/jackson-bom/2.10.0/jackson-bom-2.10.0.pom from central
Retrieving com/fasterxml/jackson/jackson-parent/2.10/jackson-parent-2.10.pom from central
Retrieving com/fasterxml/oss-parent/38/oss-parent-38.pom from central
Retrieving com/fasterxml/jackson/core/jackson-annotations/2.10.0/jackson-annotations-2.10.0.pom from central
Retrieving com/fasterxml/jackson/core/jackson-core/2.10.0/jackson-core-2.10.0.pom from central
Retrieving com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.10.0/jackson-datatype-jdk8-2.10.0.pom from central
Retrieving com/fasterxml/jackson/module/jackson-modules-java8/2.10.0/jackson-modules-java8-2.10.0.pom from central
Retrieving org/rocksdb/rocksdbjni/5.18.3/rocksdbjni-5.18.3.pom from central
Retrieving org/clojure/data.fressian/0.2.1/data.fressian-0.2.1.pom from central
Retrieving org/fressian/fressian/0.6.6/fressian-0.6.6.pom from central
Retrieving org/clojure/core.cache/0.7.2/core.cache-0.7.2.pom from central
Retrieving org/clojure/data.priority-map/0.0.7/data.priority-map-0.0.7.pom from central
Retrieving io/aleph/dirigiste/0.1.5/dirigiste-0.1.5.jar from central
Retrieving io/netty/netty-transport-native-epoll/4.1.25.Final/netty-transport-native-epoll-4.1.25.Final.jar from central
Retrieving io/netty/netty-buffer/4.1.25.Final/netty-buffer-4.1.25.Final.jar from central
Retrieving io/netty/netty-transport/4.1.25.Final/netty-transport-4.1.25.Final.jar from central
Retrieving io/netty/netty-common/4.1.25.Final/netty-common-4.1.25.Final.jar from central
Retrieving io/netty/netty-transport-native-unix-common/4.1.25.Final/netty-transport-native-unix-common-4.1.25.Final.jar from central
Retrieving io/netty/netty-codec/4.1.25.Final/netty-codec-4.1.25.Final.jar from central
Retrieving io/netty/netty-codec-http/4.1.25.Final/netty-codec-http-4.1.25.Final.jar from central
Retrieving io/netty/netty-handler/4.1.25.Final/netty-handler-4.1.25.Final.jar from central
Retrieving io/netty/netty-handler-proxy/4.1.25.Final/netty-handler-proxy-4.1.25.Final.jar from central
Retrieving io/netty/netty-resolver/4.1.25.Final/netty-resolver-4.1.25.Final.jar from central
Retrieving io/netty/netty-resolver-dns/4.1.25.Final/netty-resolver-dns-4.1.25.Final.jar from central
Retrieving io/netty/netty-codec-socks/4.1.25.Final/netty-codec-socks-4.1.25.Final.jar from central
Retrieving io/netty/netty-codec-dns/4.1.25.Final/netty-codec-dns-4.1.25.Final.jar from central
Retrieving joda-time/joda-time/2.10/joda-time-2.10.jar from central
Retrieving org/apache/avro/avro/1.8.1/avro-1.8.1.jar from central
Retrieving org/codehaus/jackson/jackson-core-asl/1.9.13/jackson-core-asl-1.9.13.jar from central
Retrieving org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13.jar from central
Retrieving com/thoughtworks/paranamer/paranamer/2.7/paranamer-2.7.jar from central
Retrieving org/apache/commons/commons-compress/1.8.1/commons-compress-1.8.1.jar from central
Retrieving org/tukaani/xz/1.5/xz-1.5.jar from central
Retrieving org/apache/zookeeper/zookeeper/3.4.14/zookeeper-3.4.14.jar from central
Retrieving com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar from central
Retrieving com/github/spotbugs/spotbugs-annotations/3.1.9/spotbugs-annotations-3.1.9.jar from central
Retrieving jline/jline/0.9.94/jline-0.9.94.jar from central
Retrieving org/apache/yetus/audience-annotations/0.5.0/audience-annotations-0.5.0.jar from central
Retrieving io/netty/netty/3.10.6.Final/netty-3.10.6.Final.jar from central
Retrieving com/101tec/zkclient/0.10/zkclient-0.10.jar from central
Retrieving org/lz4/lz4-java/1.6.0/lz4-java-1.6.0.jar from central
Retrieving com/github/luben/zstd-jni/1.4.0-1/zstd-jni-1.4.0-1.jar from central
Retrieving org/xerial/snappy/snappy-java/1.1.7.3/snappy-java-1.1.7.3.jar from central
Retrieving org/apache/kafka/kafka-clients/2.3.1/kafka-clients-2.3.1.jar from central
Retrieving org/slf4j/slf4j-api/1.7.26/slf4j-api-1.7.26.jar from central
Retrieving org/apache/kafka/kafka-streams/2.3.1/kafka-streams-2.3.1.jar from central
Retrieving org/apache/kafka/connect-json/2.3.1/connect-json-2.3.1.jar from central
Retrieving org/apache/kafka/connect-api/2.3.1/connect-api-2.3.1.jar from central
Retrieving com/fasterxml/jackson/core/jackson-databind/2.10.0/jackson-databind-2.10.0.jar from central
Retrieving com/fasterxml/jackson/core/jackson-annotations/2.10.0/jackson-annotations-2.10.0.jar from central
Retrieving com/fasterxml/jackson/core/jackson-core/2.10.0/jackson-core-2.10.0.jar from central
Retrieving com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.10.0/jackson-datatype-jdk8-2.10.0.jar from central
Retrieving org/rocksdb/rocksdbjni/5.18.3/rocksdbjni-5.18.3.jar from central
Retrieving org/clojure/data.fressian/0.2.1/data.fressian-0.2.1.jar from central
Retrieving org/fressian/fressian/0.6.6/fressian-0.6.6.jar from central
Retrieving org/clojure/core.cache/0.7.2/core.cache-0.7.2.jar from central
Retrieving org/clojure/data.priority-map/0.0.7/data.priority-map-0.0.7.jar from central
Retrieving byte-streams/byte-streams/0.2.4/byte-streams-0.2.4.jar from clojars
Retrieving manifold/manifold/0.1.8/manifold-0.1.8.jar from clojars
Retrieving riddley/riddley/0.1.14/riddley-0.1.14.jar from clojars
Retrieving aleph/aleph/0.4.6/aleph-0.4.6.jar from clojars
Retrieving primitive-math/primitive-math/0.1.6/primitive-math-0.1.6.jar from clojars
Retrieving clj-time/clj-time/0.15.1/clj-time-0.15.1.jar from clojars
Retrieving danlentz/clj-uuid/0.1.9/clj-uuid-0.1.9.jar from clojars
Retrieving fundingcircle/jackdaw/0.7.6/jackdaw-0.7.6.jar from clojars
Retrieving io/confluent/kafka-schema-registry-client/5.3.1/kafka-schema-registry-client-5.3.1.jar from confluent
Retrieving io/confluent/common-utils/5.3.1/common-utils-5.3.1.jar from confluent
Retrieving io/confluent/common-config/5.3.1/common-config-5.3.1.jar from confluent
Retrieving io/confluent/kafka-avro-serializer/5.3.1/kafka-avro-serializer-5.3.1.jar from confluent
</pre>

<p><div class="rs-tip-major">Poznámka: knihovny jsou nainstalovány do
podadresáře <strong>~/.m2</strong>.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Interaktivní práce s&nbsp;Kafkou z&nbsp;REPLu popř.&nbsp;z&nbsp;textového editoru/IDE</h2>

<p>Pro otestování možností nabízených kombinací Kafka + Clojure je nejlepší
využít interaktivní práci v&nbsp;REPLu, který lze zavolat jak z&nbsp;textového
editoru, tak i z&nbsp;prakticky jakéhokoli IDE s&nbsp;podporou jazyka Clojure.
O této možnosti jsem se zmínil například v&nbsp;souvislosti s&nbsp;textovým
editorem Vim v&nbsp;textu <a
href="https://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-7-cast/#k05">Plugin
Vim Slime</a>. Téměř ideální kombinace tedy vypadá tak, že se v&nbsp;terminálu
otevře Screen popř.&nbsp;TMux a z&nbsp;adresáře, v&nbsp;němž je projekt <a
href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/kafka-repl">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/kafka-repl</a>
spustit interaktivní smyčku REPL:</p>

<pre>
$ <strong>lein repl</strong>
&nbsp;
nREPL server started on port 37371 on host 127.0.0.1 - nrepl://127.0.0.1:37371
REPL-y 0.4.4, nREPL 0.7.0
Clojure 1.10.1
OpenJDK 64-Bit Server VM 1.8.0_191-b12
    Docs: (doc function-name-here)
          (find-doc "part-of-name-here")
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e
&nbsp;
kafka-repl.core=&gt;
</pre>

<p>V&nbsp;dalším terminálu je pak možné spustit editor se souborem <a
href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/kafka-repl/src/kafka_repl/core.clj">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/kafka-repl/src/kafka_repl/core.clj</a>
a klávesovou zkratkou <strong>Ctrl+C Ctrl+C</strong> postupně do REPLu posílat
jednotlivé formy ze sekce <strong>comment</strong>:</p>

<pre>
(ns kafka-repl.core
  (:gen-class))
&nbsp;
(defn -main
  [&amp; args]
  (println "Hello, World!"))
&nbsp;
(comment
&nbsp;
&nbsp;
<i>;; vsechny potrebne jmenne prostory</i>
(require '[jackdaw.admin :as ja])
(require '[jackdaw.client :as jc])
(require '[jackdaw.client.log :as jl])
(require '[clojure.pprint :as pp])
&nbsp;
&nbsp;
<i>;; vytvoreni noveho tematu s jednim oddilem</i>
(let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})]
  (ja/create-topics! client [{:topic-name "test1"
                              :partition-count 1
                              :replication-factor 1
                              :topic-config {"cleanup.policy" "compact"}}]))
&nbsp;
&nbsp;
<i>;; vytvoreni dalsiho tematu s jednim oddilem</i>
(let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})]
  (ja/create-topics! client [{:topic-name "test2"
                              :partition-count 1
                              :replication-factor 1
                              :topic-config {"cleanup.policy" "compact"}}]))
&nbsp;
&nbsp;
<i>;; vytvoreni tematu s deseti oddily</i>
(let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})]
  (ja/create-topics! client [{:topic-name "test3"
                              :partition-count 10
                              :replication-factor 1
                              :topic-config {"cleanup.policy" "compact"}}]))
&nbsp;
&nbsp;
<i>;; vymazani temat test1, test2 a test3</i>
(let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})]
  (ja/delete-topics! client [{:topic-name "test1"}
                             {:topic-name "test2"}
                             {:topic-name "test3"}]))
&nbsp;
&nbsp;
<i>;; vypis konfigurace brokera</i>
(let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})
      configs (ja/describe-cluster client)
      id      (-&gt;&gt; configs :controller :id)]
  (pp/pprint (ja/get-broker-config client id)))
&nbsp;
&nbsp;
<i>;; vypis konfigurace clusteru</i>
(let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})]
  (pp/pprint (ja/describe-cluster client)))
&nbsp;
&nbsp;
<i>;; vypis informaci o vybranych tematech</i>
(let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})]
  (pp/pprint (ja/describe-topics client [{:topic-name "test1"}
                                         {:topic-name "test2"}
                                         {:topic-name "test3"}])))
&nbsp;
&nbsp;
<i>;; vypis informaci o vsech tematech</i>
(let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})]
  (pp/pprint (ja/describe-topics client)))
&nbsp;
&nbsp;
<i>;; vypis konfiguraci o jednom tematu</i>
(let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})]
  (pp/pprint (ja/describe-topics-configs client [{:topic-name "test1"}])))
&nbsp;
&nbsp;
<i>;; vypis konfiguraci vybranych temat</i>
(let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})]
  (pp/pprint (ja/describe-topics-configs client [{:topic-name "test1"}
                                                 {:topic-name "test2"}
                                                 {:topic-name "test3"}])))
&nbsp;
&nbsp;
<i>;; konfigurace producenta zprav</i>
(def producer-config
  {"bootstrap.servers" "localhost:9092"
   "key.serializer" "org.apache.kafka.common.serialization.StringSerializer"
   "value.serializer" "org.apache.kafka.common.serialization.StringSerializer"
   "acks" "all"
   "client.id" "foo"})
&nbsp;
&nbsp;
<i>;; poslani jedine zpravy</i>
(with-open [producer (jc/producer producer-config)]
  (let [record-metadata (jc/produce! producer {:topic-name "test1"} "1" "Hello, Kafka!")]
    (pp/pprint @record-metadata)))
&nbsp;
&nbsp;
<i>;; poslani 100 zprav</i>
(with-open [producer (jc/producer producer-config)]
  (doseq [i (range 1 101)]
    (let [key (str i)
          value (str "Message #" i)]
      (println "Publishing message with key '" key "' and value '" value "'")
      (let [record-metadata (jc/produce! producer {:topic-name "test1"} key value)]
        (pp/pprint @record-metadata)))))
&nbsp;
&nbsp;
<i>;; konfigurace konzumenta zprav</i>
(def consumer-config
  {"bootstrap.servers" "localhost:9092"
   "key.deserializer" "org.apache.kafka.common.serialization.StringDeserializer"
   "value.deserializer" "org.apache.kafka.common.serialization.StringDeserializer"
   "auto.offset.reset" "earliest"
   "group.id"  "group-A"})

   #"auto.offset.reset" "none"
&nbsp;
&nbsp;
<i>;; start konzumenta</i>
(with-open [consumer (-&gt; (jc/consumer consumer-config)
                         (jc/subscribe [{:topic-name "test1"}]))]
  (doseq [{:keys [key value partition timestamp offset]} (jl/log consumer 10)]
    (println "key: " key)
    (println "value: " value)
    (println "partition: " partition)
    (println "timestamp: " timestamp)
    (println "offset: " offset)))
&nbsp;
&nbsp;
) <i>; comment</i>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vytvoření nového tématu s&nbsp;jedním oddílem</h2>

<p>Nejprve si popíšeme základy práce se jmenným prostorem
<strong>jackdaw.admin</strong>, v&nbsp;němž jsou deklarovány funkce a makra
určená pro administraci Apache Kafky. První demonstrační příklad slouží pro
vytvoření tématu (<i>topic</i>), které má jen jediný oddíl (<i>partition</i>).
Nejprve se zkonstruuje objekt typu <i>AdminClient</i>, a to specifikací portu,
na kterém běží broker (viz též <a href="#k02">druhou kapitolu</a>):</p>

<pre>
(let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})]
   ...
   ...
   ...
)
</pre>

<p>Posléze se použije funkce <strong>create-topics!</strong> pro vytvoření
nového tématu (či témat). Této funkci se předá objekt získaný předchozím
voláním a sekvence (například seznam) popisů témat. Nejdůležitějšími atributy
je jméno nového tématu a počet oddílů:</p>

<pre>
(ja/create-topics! client [{<strong>:topic-name "test1"</strong>
                            <strong>:partition-count 1</strong>
                            :replication-factor 1
                            :topic-config {"cleanup.policy" "compact"}}])))
</pre>

<p>Úplný kód dnešního prvního plnohodnotného demonstračního příkladu vypadá
následovně:</p>

<pre>
(ns topic-constructor.core
  (:require [jackdaw.admin :as ja]))

(defn -main
  []
  (let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})]
    (ja/create-topics! client [{:topic-name "test1"
                                :partition-count 1
                                :replication-factor 1
                                :topic-config {"cleanup.policy" "compact"}}])))
</pre>

<p>Příklad spustíme:</p>

<pre>
$ <strong>lein run</strong>
&nbsp;
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
</pre>

<p>V&nbsp;logu brokera by se měly objevit informace o vytvoření nového
tématu:</p>

<pre>
[2020-11-27 14:43:08,474] INFO Created log for partition <strong>test1-0</strong> in /tmp/kafka-logs/test2-0 with properties {compression.type -&gt; producer, message.downconversion.enable -&gt; true, min.insync.replicas -&gt; 1, segment.jitter.ms -&gt; 0, cleanup.policy -&gt; compact, flush.ms -&gt; 9223372036854775807, segment.bytes -&gt; 1073741824, retention.ms -&gt; 604800000, flush.messages -&gt; 9223372036854775807, message.format.version -&gt; 2.4-IV1, file.delete.delay.ms -&gt; 60000, max.compaction.lag.ms -&gt; 9223372036854775807, max.message.bytes -&gt; 1000012, min.compaction.lag.ms -&gt; 0, message.timestamp.type -&gt; CreateTime, preallocate -&gt; false, min.cleanable.dirty.ratio -&gt; 0.5, index.interval.bytes -&gt; 4096, unclean.leader.election.enable -&gt; false, retention.bytes -&gt; -1, delete.retention.ms -&gt; 86400000, segment.ms -&gt; 604800000, message.timestamp.difference.max.ms -&gt; 9223372036854775807, segment.index.bytes -&gt; 10485760}. (kafka.log.LogManager)
[2020-11-27 14:41:48,973] INFO [Partition test1-0 broker=0] No checkpointed highwatermark is found for partition <strong>test1-0</strong> (kafka.cluster.Partition)
[2020-11-27 14:41:48,974] INFO [Partition test1-0 broker=0] Log loaded for partition test1-0 with initial high watermark 0 (kafka.cluster.Partition)
[2020-11-27 14:41:48,974] INFO [Partition test1-0 broker=0] test1-0 starts at Leader Epoch 0 from offset 0. Previous Leader Epoch was: -1 (kafka.cluster.Partition)
</pre>

<p>Navíc by se v&nbsp;adresáři <strong>/tmp/kafka-logs/</strong> měl objevit
nový podadresář nazvaný <strong>test1-0</strong>. Toto jméno je složeno ze
jména tématu a čísla oddílu:</p>

<pre>
$ <strong>ls -l /tmp/kafka-logs/</strong>
&nbsp;
total 16
-rw-rw-r--. 1 ptisnovs ptisnovs   0 Nov 27 14:39 cleaner-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs   4 Nov 27 14:42 log-start-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs  88 Nov 27 14:39 meta.properties
-rw-rw-r--. 1 ptisnovs ptisnovs  14 Nov 27 14:42 recovery-point-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs  14 Nov 27 14:42 replication-offset-checkpoint
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 14:41 <strong>test1-0</strong>
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Korektní nastavení logování v&nbsp;projektu</h2>

<p>Při spuštění <a href="#k05">předchozího příkladu</a> se zobrazilo varování o
tom, že není správně nastavena konfigurace logů. To napravíme v&nbsp;dnešním
druhém demonstračním příkladu přidáním další závislosti do souboru
<strong>project.clj</strong>:</p>

<pre>
(defproject topic-constructor "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0"
            :url "https://www.eclipse.org/legal/epl-2.0/"}
  :dependencies [[org.clojure/clojure "1.10.1"]
                 [fundingcircle/jackdaw "0.7.6"]
                 <strong>[ch.qos.logback/logback-classic "1.1.3"]</strong>]
  :main ^:skip-aot topic-constructor.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all
                       :jvm-opts ["-Dclojure.compiler.direct-linking=true"]}})
</pre>

<p>Samotný zdrojový kód příkladu se liší v&nbsp;jediné maličkosti &ndash; je
vytvořeno téma s&nbsp;odlišným názvem:</p>

<pre>
(ns topic-constructor.core
  (:require [jackdaw.admin :as ja]))
&nbsp;
(defn -main
  []
  (let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})]
    (ja/create-topics! client [{<strong>:topic-name "test2"</strong>
                                :partition-count 1
                                :replication-factor 1
                                :topic-config {"cleanup.policy" "compact"}}])))
</pre>

<p>Po spuštění bude příklad již velmi &bdquo;ukecaný&ldquo;, a to právě díky
nastavení logování:</p>

<pre>
$ <strong>lein run</strong>
&nbsp;
21:17:16.076 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	bootstrap.servers = [localhost:9092]
	client.dns.lookup = default
	client.id = 
	connections.max.idle.ms = 300000
	metadata.max.age.ms = 300000
	metric.reporters = []
        ...
        ...
        ...
21:17:16.381 [kafka-admin-client-thread | adminclient-1] DEBUG o.a.kafka.common.metrics.Metrics - Added sensor with name node-0.bytes-sent
21:17:16.382 [kafka-admin-client-thread | adminclient-1] DEBUG o.a.kafka.common.metrics.Metrics - Added sensor with name node-0.bytes-received
21:17:16.382 [kafka-admin-client-thread | adminclient-1] DEBUG o.a.kafka.common.metrics.Metrics - Added sensor with name node-0.latency
21:17:16.382 [kafka-admin-client-thread | adminclient-1] DEBUG o.a.kafka.common.network.Selector - [AdminClient clientId=adminclient-1] Created socket with SO_RCVBUF = 65536, SO_SNDBUF = 131072, SO_TIMEOUT = 0 to node 0
21:17:16.382 [kafka-admin-client-thread | adminclient-1] DEBUG o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Completed connection to node 0. Fetching API versions.
21:17:16.382 [kafka-admin-client-thread | adminclient-1] DEBUG o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Initiating API versions fetch from node 0.
</pre>

<p>Nově zkonstruované téma je po spuštění příkladu zmíněno i v&nbsp;logu
brokera:</p>

<pre>
[2020-11-27 14:43:08,474] INFO Created log for partition test2-0 in /tmp/kafka-logs/test2-0 with properties {compression.type -&gt; producer, message.downconversion.enable -&gt; true, min.insync.replicas -&gt; 1, segment.jitter.ms -&gt; 0, cleanup.policy -&gt; compact, flush.ms -&gt; 9223372036854775807, segment.bytes -&gt; 1073741824, retention.ms -&gt; 604800000, flush.messages -&gt; 9223372036854775807, message.format.version -&gt; 2.4-IV1, file.delete.delay.ms -&gt; 60000, max.compaction.lag.ms -&gt; 9223372036854775807, max.message.bytes -&gt; 1000012, min.compaction.lag.ms -&gt; 0, message.timestamp.type -&gt; CreateTime, preallocate -&gt; false, min.cleanable.dirty.ratio -&gt; 0.5, index.interval.bytes -&gt; 4096, unclean.leader.election.enable -&gt; false, retention.bytes -&gt; -1, delete.retention.ms -&gt; 86400000, segment.ms -&gt; 604800000, message.timestamp.difference.max.ms -&gt; 9223372036854775807, segment.index.bytes -&gt; 10485760}. (kafka.log.LogManager)
[2020-11-27 14:43:08,475] INFO [Partition test2-0 broker=0] No checkpointed highwatermark is found for partition test2-0 (kafka.cluster.Partition)
[2020-11-27 14:43:08,475] INFO [Partition test2-0 broker=0] Log loaded for partition test2-0 with initial high watermark 0 (kafka.cluster.Partition)
[2020-11-27 14:43:08,475] INFO [Partition test2-0 broker=0] test2-0 starts at Leader Epoch 0 from offset 0. Previous Leader Epoch was: -1 (kafka.cluster.Partition)
</pre>

<p>A po pohledu do adresáře s&nbsp;daty brokera se objevil nový adresář pro
nově zkonstruované téma:</p>

<pre>
$ <strong>ls -l /tmp/kafka-logs/</strong>
total 16
-rw-rw-r--. 1 ptisnovs ptisnovs   0 Nov 27 14:39 cleaner-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs   4 Nov 27 14:43 log-start-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs  88 Nov 27 14:39 meta.properties
-rw-rw-r--. 1 ptisnovs ptisnovs  14 Nov 27 14:43 recovery-point-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs  24 Nov 27 14:43 replication-offset-checkpoint
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 14:41 test1-0
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 14:43 <strong>test2-0</strong>
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vytvoření tématu s&nbsp;deseti oddíly</h2>

<p>Nyní si předchozí dva demonstrační příklady nepatrně upravíme a vytvoříme
nové téma, ovšem rozdělené do deseti oddílů. Takto nakonfigurované téma nám
umožní snadný paralelní přístup ke zprávám (událostem). Povšimněte si, že
hodnota <strong>replication-factor</strong> je stále nastavena na jedničku,
protože pracujeme pouze s&nbsp;lokálně běžící Kafkou a nikoli (před)produkčním
systémem:</p>

<pre>
(ns topic-constructor.core
  (:require [jackdaw.admin :as ja]))
&nbsp;
(defn -main
  []
  (let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})]
    (ja/create-topics! client [{<strong>:topic-name "test3"</strong>
                                <strong>:partition-count 10</strong>
                                :replication-factor 1
                                :topic-config {"cleanup.policy" "compact"}}])))
</pre>

<p>Nyní by měl adresář s&nbsp;daty brokera vypadat následovně:</p>

<pre>
$ <strong>ls -l /tmp/kafka-logs/</strong>
total 16
-rw-rw-r--. 1 ptisnovs ptisnovs   0 Nov 27 14:39 cleaner-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs   4 Nov 27 14:43 log-start-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs  88 Nov 27 14:39 meta.properties
-rw-rw-r--. 1 ptisnovs ptisnovs  14 Nov 27 14:43 recovery-point-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs  24 Nov 27 14:43 replication-offset-checkpoint
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 14:41 test1-0
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 14:43 test2-0
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 30 11:55 <strong>test3-0</strong>
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 30 11:55 <strong>test3-1</strong>
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 30 11:55 <strong>test3-2</strong>
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 30 11:55 <strong>test3-3</strong>
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 30 11:55 <strong>test3-4</strong>
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 30 11:55 <strong>test3-5</strong>
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 30 11:55 <strong>test3-6</strong>
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 30 11:55 <strong>test3-7</strong>
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 30 11:55 <strong>test3-8</strong>
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 30 11:55 <strong>test3-9</strong>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Výpis informací o konfiguraci brokeru</h2>

<p>V&nbsp;dalším kroku si ukážeme, jak lze vypsat základní informace o
konfiguraci brokeru. K&nbsp;tomuto účelu se používá funkce:</p>

<pre>
(jackdaw.admin/get-broker-config client id)
</pre>

<p>Vidíme, že této funkci musíme předat jak instanci klienta (to již
známe):</p>

<pre>
(let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})
   ...
   ...
   ...
</pre>

<p>Tak i jednoznačný identifikátor brokera. Ten přečteme takto:</p>

<pre>
(jackdaw.admin/describe-cluster client)
</pre>

<p>Přičemž z&nbsp;vrácené mapy musíme přečíst pouze ono ID, například
s&nbsp;využitím <i>threading makra</i>:</p>

<pre>
(-&gt;&gt; configs :controller :id)]
</pre>

<p>Celý kód příkladu bude vypadat následovně:</p>

<pre>
(ns get-broker-config.core
  (:require [jackdaw.admin :as ja])
  (:require [clojure.pprint :as pp]))
&nbsp;
(defn -main
  [&amp; args]
  (let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})
        configs (ja/describe-cluster client)
        id      (-&gt;&gt; configs :controller :id)]
    (pp/pprint (ja/get-broker-config client id))))
</pre>

<p>Výsledek může vypadat následovně:</p>

<pre>
{"ssl.enabled.protocols"
 {:name "ssl.enabled.protocols",
  :value "TLSv1.2,TLSv1.1,TLSv1",
  :default? true,
  :read-only? false,
  :sensitive? false},
 "advertised.host.name"
 {:name "advertised.host.name",
  :value nil,
  :default? true,
  :read-only? true,
  :sensitive? false},
 "socket.request.max.bytes"
 ...
 ...
 ...
 {:name "log.preallocate",
  :value "false",
  :default? true,
  :read-only? false,
  :sensitive? false},
 "log.roll.ms"
 {:name "log.roll.ms",
  :value nil,
  :default? true,
  :read-only? false,
  :sensitive? false},
 "password.encoder.cipher.algorithm"
 {:name "password.encoder.cipher.algorithm",
  :value "AES/CBC/PKCS5Padding",
  :default? true,
  :read-only? true,
  :sensitive? false}}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přečtení a zobrazení základních informací o Kafka clusteru</h2>

<p>Získat a dále zobrazit (či jinak zpracovat) je možné i o Kafka clusteru, a
to poměrně jednoduchým způsobem &ndash; zavoláním funkce
<strong>jackdaw.admin/describe-cluster</strong>:</p>

<pre>
(ns describe-cluster.core
  (:require [jackdaw.admin :as ja]
            [clojure.pprint :as pp]))
&nbsp;
(defn -main
  [&amp; args]
  (let [client (ja/-&gt;AdminClient {"bootstrap.servers" "localhost:9092"})]
    (pp/pprint (ja/describe-cluster client))))
</pre>

<p>Výsledek by měl (pro lokálně běžící cluster) vypadat takto:</p>

<pre>
{:cluster-id "hOg8auCqRcK23gy5b8Ekow",
 :controller {:host "localhost", :port 9092, :id 0, :rack nil},
 :nodes [{:host "localhost", :port 9092, :id 0, :rack nil}]}
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že jak všechny
konfigurace, tak i vrácená data mají podobu klasické mapy programovacího jazyka
Clojure, i když se interně může jednat o <i>Properties</i> (Javovská
třída).</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
(ns describe-topics.core
  (:require [jackdaw.admin :as ja]
            [clojure.pprint :as pp]))

(defn -main
  [& args]
  (let [client (ja/->AdminClient {"bootstrap.servers" "localhost:9092"})]
    (pp/pprint (ja/describe-topics client))))
</pre>

<pre>
{"test1"
 {:is-internal? false,
  :partition-info
  ({:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 0,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]})},
 "test2"
 {:is-internal? false,
  :partition-info
  ({:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 0,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]})},
 "test3"
 {:is-internal? false,
  :partition-info
  ({:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 0,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 1,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 2,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 3,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 4,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 5,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 6,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 7,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 8,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 9,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]})}}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
(ns describe-topics.core
  (:require [jackdaw.admin :as ja]
            [clojure.pprint :as pp]))

(defn -main
  [& args]
  (let [client (ja/->AdminClient {"bootstrap.servers" "localhost:9092"})]
    (pp/pprint (ja/describe-topics client [{:topic-name "test1"}
                                           {:topic-name "test3"}]))))
</pre>

<pre>
{"test1"
 {:is-internal? false,
  :partition-info
  ({:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 0,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]})},
 "test3"
 {:is-internal? false,
  :partition-info
  ({:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 0,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 1,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 2,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 3,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 4,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 5,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 6,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 7,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 8,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]}
   {:isr [{:host "localhost", :port 9092, :id 0, :rack nil}],
    :leader {:host "localhost", :port 9092, :id 0, :rack nil},
    :partition 9,
    :replicas [{:host "localhost", :port 9092, :id 0, :rack nil}]})}}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
(ns describe-topics-configs.core
  (:require [jackdaw.admin :as ja]
            [clojure.pprint :as pp]))

(defn -main
  [& args]
  (let [client (ja/->AdminClient {"bootstrap.servers" "localhost:9092"})]
    (pp/pprint (ja/describe-topics-configs client [{:topic-name "test1"}
                                                   {:topic-name "test3"}]))))
</pre>

<pre>
{{:name "test1", :type :config-resource/topic}
 {"min.insync.replicas"
  {:name "min.insync.replicas",
   :value "1",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "follower.replication.throttled.replicas"
  {:name "follower.replication.throttled.replicas",
   :value "",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "flush.messages"
  {:name "flush.messages",
   :value "9223372036854775807",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "leader.replication.throttled.replicas"
  {:name "leader.replication.throttled.replicas",
   :value "",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "segment.bytes"
  {:name "segment.bytes",
   :value "1073741824",
   :default? false,
   :read-only? false,
   :sensitive? false},
  "flush.ms"
  {:name "flush.ms",
   :value "9223372036854775807",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "unclean.leader.election.enable"
  {:name "unclean.leader.election.enable",
   :value "false",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "retention.bytes"
  {:name "retention.bytes",
   :value "-1",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "cleanup.policy"
  {:name "cleanup.policy",
   :value "compact",
   :default? false,
   :read-only? false,
   :sensitive? false},
  "file.delete.delay.ms"
  {:name "file.delete.delay.ms",
   :value "60000",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "segment.index.bytes"
  {:name "segment.index.bytes",
   :value "10485760",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "index.interval.bytes"
  {:name "index.interval.bytes",
   :value "4096",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "delete.retention.ms"
  {:name "delete.retention.ms",
   :value "86400000",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "segment.ms"
  {:name "segment.ms",
   :value "604800000",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "min.compaction.lag.ms"
  {:name "min.compaction.lag.ms",
   :value "0",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "segment.jitter.ms"
  {:name "segment.jitter.ms",
   :value "0",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "message.timestamp.difference.max.ms"
  {:name "message.timestamp.difference.max.ms",
   :value "9223372036854775807",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "max.compaction.lag.ms"
  {:name "max.compaction.lag.ms",
   :value "9223372036854775807",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "preallocate"
  {:name "preallocate",
   :value "false",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "message.downconversion.enable"
  {:name "message.downconversion.enable",
   :value "true",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "max.message.bytes"
  {:name "max.message.bytes",
   :value "1000012",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "message.timestamp.type"
  {:name "message.timestamp.type",
   :value "CreateTime",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "retention.ms"
  {:name "retention.ms",
   :value "604800000",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "min.cleanable.dirty.ratio"
  {:name "min.cleanable.dirty.ratio",
   :value "0.5",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "message.format.version"
  {:name "message.format.version",
   :value "2.4-IV1",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "compression.type"
  {:name "compression.type",
   :value "producer",
   :default? true,
   :read-only? false,
   :sensitive? false}},
 {:name "test3", :type :config-resource/topic}
 {"min.insync.replicas"
  {:name "min.insync.replicas",
   :value "1",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "follower.replication.throttled.replicas"
  {:name "follower.replication.throttled.replicas",
   :value "",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "flush.messages"
  {:name "flush.messages",
   :value "9223372036854775807",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "leader.replication.throttled.replicas"
  {:name "leader.replication.throttled.replicas",
   :value "",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "segment.bytes"
  {:name "segment.bytes",
   :value "1073741824",
   :default? false,
   :read-only? false,
   :sensitive? false},
  "flush.ms"
  {:name "flush.ms",
   :value "9223372036854775807",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "unclean.leader.election.enable"
  {:name "unclean.leader.election.enable",
   :value "false",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "retention.bytes"
  {:name "retention.bytes",
   :value "-1",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "cleanup.policy"
  {:name "cleanup.policy",
   :value "compact",
   :default? false,
   :read-only? false,
   :sensitive? false},
  "file.delete.delay.ms"
  {:name "file.delete.delay.ms",
   :value "60000",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "segment.index.bytes"
  {:name "segment.index.bytes",
   :value "10485760",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "index.interval.bytes"
  {:name "index.interval.bytes",
   :value "4096",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "delete.retention.ms"
  {:name "delete.retention.ms",
   :value "86400000",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "segment.ms"
  {:name "segment.ms",
   :value "604800000",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "min.compaction.lag.ms"
  {:name "min.compaction.lag.ms",
   :value "0",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "segment.jitter.ms"
  {:name "segment.jitter.ms",
   :value "0",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "message.timestamp.difference.max.ms"
  {:name "message.timestamp.difference.max.ms",
   :value "9223372036854775807",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "max.compaction.lag.ms"
  {:name "max.compaction.lag.ms",
   :value "9223372036854775807",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "preallocate"
  {:name "preallocate",
   :value "false",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "message.downconversion.enable"
  {:name "message.downconversion.enable",
   :value "true",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "max.message.bytes"
  {:name "max.message.bytes",
   :value "1000012",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "message.timestamp.type"
  {:name "message.timestamp.type",
   :value "CreateTime",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "retention.ms"
  {:name "retention.ms",
   :value "604800000",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "min.cleanable.dirty.ratio"
  {:name "min.cleanable.dirty.ratio",
   :value "0.5",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "message.format.version"
  {:name "message.format.version",
   :value "2.4-IV1",
   :default? true,
   :read-only? false,
   :sensitive? false},
  "compression.type"
  {:name "compression.type",
   :value "producer",
   :default? true,
   :read-only? false,
   :sensitive? false}}}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
(ns topic-destructor.core
  (:require [jackdaw.admin :as ja]))

(defn -main
  []
  (let [client (ja/->AdminClient {"bootstrap.servers" "localhost:9092"})]
    (ja/delete-topics! client [{:topic-name "test1"}
                               {:topic-name "test3"}])))
</pre>

<pre>
[2020-11-27 19:52:11,127] INFO Log for partition test3-7 is renamed to /tmp/kafka-logs/test3-7.d3fb75bbbcab4f5f95d4b818c3362533-delete and is scheduled for deletion (kafka.log.LogManager)
[2020-11-27 19:52:11,130] INFO Log for partition test3-1 is renamed to /tmp/kafka-logs/test3-1.f351358e5f294ce088335e08611a4304-delete and is scheduled for deletion (kafka.log.LogManager)
[2020-11-27 19:52:11,133] INFO Log for partition test3-4 is renamed to /tmp/kafka-logs/test3-4.51da619c145f4c40a1f6c36b5a16dbdd-delete and is scheduled for deletion (kafka.log.LogManager)
</pre>

<pre>
total 20
-rw-rw-r--. 1 ptisnovs ptisnovs   4 Nov 27 19:52 cleaner-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs   4 Nov 27 19:52 log-start-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs  88 Nov 27 19:45 meta.properties
-rw-rw-r--. 1 ptisnovs ptisnovs  14 Nov 27 19:52 recovery-point-offset-checkpoint
-rw-rw-r--. 1 ptisnovs ptisnovs 115 Nov 27 19:52 replication-offset-checkpoint
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 19:45 test1-0.640fd381aef54650aeac15ca775248b8-delete
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 19:46 test3-0.a235153017ca4d9facdc380fbd6cdd95-delete
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 19:46 test3-1.f351358e5f294ce088335e08611a4304-delete
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 19:46 test3-2.c529de213c4f4c1e8374f04fc167af53-delete
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 19:46 test3-3.fb2b771909964eb8bc4448ed62410717-delete
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 19:46 test3-4.51da619c145f4c40a1f6c36b5a16dbdd-delete
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 19:46 test3-5.8788f5813d3d476bb35fe70bddddd52a-delete
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 19:46 test3-6.cfb995d4c66c45f0aa4edd313f4eb202-delete
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 19:46 test3-7.d3fb75bbbcab4f5f95d4b818c3362533-delete
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 19:46 test3-8.318bdc9af16f44b4a454ba2716dc6090-delete
drwxrwxr-x. 2 ptisnovs ptisnovs 120 Nov 27 19:46 test3-9.4efc612d790540deb53a0cb5365f0a91-delete
</pre>

<pre>
[2020-11-27 19:53:11,180] INFO Deleted log /tmp/kafka-logs/test1-0.640fd381aef54650aeac15ca775248b8-delete/00000000000000000000.log.deleted. (kafka.log.LogSegment)
[2020-11-27 19:53:11,181] INFO Deleted offset index /tmp/kafka-logs/test1-0.640fd381aef54650aeac15ca775248b8-delete/00000000000000000000.index.deleted. (kafka.log.LogSegment)
[2020-11-27 19:53:11,183] INFO Deleted time index /tmp/kafka-logs/test1-0.640fd381aef54650aeac15ca775248b8-delete/00000000000000000000.timeindex.deleted. (kafka.log.LogSegment)
[2020-11-27 19:53:11,183] INFO Deleted log for partition test1-0 in /tmp/kafka-logs/test1-0.640fd381aef54650aeac15ca775248b8-delete. (kafka.log.LogManager)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů vyvinutých
v&nbsp;programovacím jazyku Clojure byly uloženy do Git repositáře, který je
dostupný na adrese <a
href="https://github.com/tisnik/message-queues-examples">https://github.com/tisnik/message-queues-examples</a>
(stále na GitHubu :-):</p>

<table>
<tr><th>#</th><th>Projekt</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>kafka-repl</td><td>prázdný projekt připravený pro interaktivní práci v&nbsp;REPLu</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/kafka-repl">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/kafka-repl</a></td></tr>
<tr><td> 2</td><td>topic-constructor</td><td>vytvoření nového tématu</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-constructor">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-constructor</a></td></tr>
<tr><td> 3</td><td>topic-constructor-logger</td><td>vytvoření nového tématu; konfigurace logování</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-constructor-logger">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-constructor-logger</a></td></tr>
<tr><td> 4</td><td>topic-constructor-10-partitions</td><td>vytvoření nového tématu s&nbsp;deseti oddíly</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-constructor-10-partitions">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-constructor-10-partitions</a></td></tr>
<tr><td> 5</td><td>topic-destructor</td><td>vymazání tématu</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-destructor">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-destructor</a></td></tr>
<tr><td> 6</td><td>get-broker-config</td><td>zobrazení konfigurace brokera</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/get-broker-config">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/get-broker-config</a></td></tr>
<tr><td> 7</td><td>describe-cluster</td><td>zobrazení aktuální konfigurace clusteru</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-cluster">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-cluster</a></td></tr>
<tr><td> 8</td><td>describe-all-topics</td><td>zobrazení všech dostupných témat</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-all-topics">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-all-topics</a></td></tr>
<tr><td> 9</td><td>describe-topics</td><td>zobrazení informací o vybraných tématech</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-topics">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-topics</a></td></tr>
<tr><td>10</td><td>describe-topics-configs</td><td>zobrazení podrobnějších informací o vybraných tématech</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-topics-configs">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-topics-configs</a></td></tr>
<tr><td>11</td><td>produce-messages-1</td><td>vytvoření jediné zprávy</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/produce-messages-1">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/produce-messages-1</a></td></tr>
<tr><td>12</td><td>produce-messages-2</td><td>vytvoření 100 zpráv</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/produce-messages-2">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/produce-messages-2</a></td></tr>
<tr><td>13</td><td>produce-messages-3</td><td>vytvoření 100 zpráv se specifikací klíče</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/produce-messages-3">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/produce-messages-3</a></td></tr>
<tr><td>14</td><td>consume-messages-1</td><td>konzument zpráv z&nbsp;vybraného tématu</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/consume-messages-1">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/consume-messages-1</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na předchozí části seriálu o programovacím jazyku Clojure</h2>

<ol>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Programovací jazyk Clojure – triky při práci s řetězci<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-retezci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-retezci/</a>
</li>

<li>Programovací jazyk Clojure – triky při práci s kolekcemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-kolekcemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-kolekcemi/</a>
</li>

<li>Programovací jazyk Clojure – práce s mapami a množinami<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-prace-s-mapami-a-mnozinami/">http://www.root.cz/clanky/programovaci-jazyk-clojure-prace-s-mapami-a-mnozinami/</a>
</li>

<li>Programovací jazyk Clojure – základy zpracování XML<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-zaklady-zpracovani-xml/">http://www.root.cz/clanky/programovaci-jazyk-clojure-zaklady-zpracovani-xml/</a>
</li>

<li>Programovací jazyk Clojure – testování s využitím knihovny Expectations<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/">http://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/</a>
</li>

<li>Programovací jazyk Clojure – některé užitečné triky použitelné (nejenom) v&nbsp;testech<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/">http://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/</a>
</li>

<li>Enlive – výkonný šablonovací systém pro jazyk Clojure<br/>
<a href="http://www.root.cz/clanky/enlive-vykonny-sablonovaci-system-pro-jazyk-clojure/">http://www.root.cz/clanky/enlive-vykonny-sablonovaci-system-pro-jazyk-clojure/</a>
</li>

<li>Nástroj Leiningen a programovací jazyk Clojure: tvorba vlastních knihoven pro veřejný repositář Clojars<br />
<a href="http://www.root.cz/clanky/nastroj-leiningen-a-programovaci-jazyk-clojure-tvorba-vlastnich-knihoven-pro-verejny-repositar-clojars/">http://www.root.cz/clanky/nastroj-leiningen-a-programovaci-jazyk-clojure-tvorba-vlastnich-knihoven-pro-verejny-repositar-clojars/</a>
</li>

<li>Novinky v Clojure verze 1.8.0<br />
<a href="http://www.root.cz/clanky/novinky-v-clojure-verze-1-8-0/">http://www.root.cz/clanky/novinky-v-clojure-verze-1-8-0/</a>
</li>

<li>Asynchronní programování v&nbsp;Clojure s&nbsp;využitím knihovny core.async<br />
<a href="http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async/">http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async/</a>
</li>

<li>Asynchronní programování v&nbsp;Clojure s&nbsp;využitím knihovny core.async (pokračování)<br />
<a href="http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-pokracovani/">http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-pokracovani/</a>
</li>

<li>Asynchronní programování v Clojure s využitím knihovny core.async (dokončení)<br />
<a href="http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-dokonceni/">http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-dokonceni/</a>
</li>

<li>Vytváříme IRC bota v programovacím jazyce Clojure<br />
<a href="http://www.root.cz/clanky/vytvarime-irc-bota-v-programovacim-jazyce-clojure/">http://www.root.cz/clanky/vytvarime-irc-bota-v-programovacim-jazyce-clojure/</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Multimetody v Clojure aneb polymorfismus bez použití OOP<br />
<a href="https://www.root.cz/clanky/multimetody-v-clojure-aneb-polymorfismus-bez-pouziti-oop/">https://www.root.cz/clanky/multimetody-v-clojure-aneb-polymorfismus-bez-pouziti-oop/</a>
</li>

<li>Práce s externími Java archivy v programovacím jazyku Clojure<br />
<a href="https://www.root.cz/clanky/prace-s-externimi-java-archivy-v-programovacim-jazyku-clojure/">https://www.root.cz/clanky/prace-s-externimi-java-archivy-v-programovacim-jazyku-clojure/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (2)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (3)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/</a>
</li>

<li>Pixie: lehký skriptovací jazyk s „kouzelnými“ schopnostmi<br />
<a href="https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/">https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/</a>
</li>

<li>Programovací jazyk Pixie: funkce ze základní knihovny a použití FFI<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/">https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/</a>
</li>

<li>Novinky v Clojure verze 1.9.0<br />
<a href="https://www.root.cz/clanky/novinky-v-clojure-verze-1-9-0/">https://www.root.cz/clanky/novinky-v-clojure-verze-1-9-0/</a>
</li>

<li>Validace dat s&nbsp;využitím knihovny spec v&nbsp;Clojure 1.9.0<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v Clojure (2)<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/</a>
</li>

<li>Incanter: prostředí pro statistické výpočty s grafickým výstupem založené na Clojure<br />
<a href="https://www.root.cz/clanky/incanter-prostredi-pro-statisticke-vypocty-s-grafickym-vystupem-zalozene-na-clojure/">https://www.root.cz/clanky/incanter-prostredi-pro-statisticke-vypocty-s-grafickym-vystupem-zalozene-na-clojure/</a>
</li>

<li>Incanter: operace s maticemi<br />
<a href="https://www.root.cz/clanky/incanter-operace-s-maticemi/">https://www.root.cz/clanky/incanter-operace-s-maticemi/</a>
</li>

<li>Pixie: lehký skriptovací jazyk s „kouzelnými“ schopnostmi<br />
<a href="https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/">https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/</a>
</li>

<li>Programovací jazyk Pixie: funkce ze základní knihovny a použití FFI<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/">https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/</a>
</li>

<li>Novinky v Clojure verze 1.9.0<br />
<a href="https://www.root.cz/clanky/novinky-v-clojure-verze-1-9-0/">https://www.root.cz/clanky/novinky-v-clojure-verze-1-9-0/</a>
</li>

<li>Validace dat s&nbsp;využitím knihovny spec v&nbsp;Clojure 1.9.0<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v&nbsp;Clojure<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v&nbsp;Clojure (2)<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/</a>
</li>

<li>Interpret programovacího jazyka Clojure integrovaný do Jupyter Notebooku<br />
<a href="https://www.root.cz/clanky/interpret-programovaciho-jazyka-clojure-integrovany-do-jupyter-notebooku/">https://www.root.cz/clanky/interpret-programovaciho-jazyka-clojure-integrovany-do-jupyter-notebooku/</a>
</li>

<li>Babashka: interpret Clojure určený pro rychlé spouštění utilit z příkazového řádku<br />
<a href="https://www.root.cz/clanky/babashka-interpret-clojure-urceny-pro-rychle-spousteni-utilit-z-prikazoveho-radku/">https://www.root.cz/clanky/babashka-interpret-clojure-urceny-pro-rychle-spousteni-utilit-z-prikazoveho-radku/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>fundingcircle/jackdaw (na Clojars)<br />
<a href="https://clojars.org/fundingcircle/jackdaw/versions/0.7.6">https://clojars.org/fundingcircle/jackdaw/versions/0.7.6</a>
</li>

<li>Dokumentace ke knihovně jackdaw<br />
<a href="https://cljdoc.org/d/fundingcircle/jackdaw/0.7.6/doc/readme">https://cljdoc.org/d/fundingcircle/jackdaw/0.7.6/doc/readme</a>
</li>

<li>Jackdaw AdminClient API<br />
<a href="https://cljdoc.org/d/fundingcircle/jackdaw/0.7.6/doc/jackdaw-adminclient-api">https://cljdoc.org/d/fundingcircle/jackdaw/0.7.6/doc/jackdaw-adminclient-api</a>
</li>

<li>Jackdaw Client API<br />
<a href="https://cljdoc.org/d/fundingcircle/jackdaw/0.7.6/doc/jackdaw-client-api">https://cljdoc.org/d/fundingcircle/jackdaw/0.7.6/doc/jackdaw-client-api</a>
</li>

<li>Kafka.clj<br />
<a href="https://github.com/helins-io/kafka.clj">https://github.com/helins-io/kafka.clj</a>
</li>

<li>Použití nástroje Apache Kafka v aplikacích založených na mikroslužbách<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-apache-kafka-v-aplikacich-zalozenych-na-mikrosluzbach/">https://www.root.cz/clanky/pouziti-nastroje-apache-kafka-v-aplikacich-zalozenych-na-mikrosluzbach/</a>
</li>

<li>Apache Kafka: distribuovaná streamovací platforma<br />
<a href="https://www.root.cz/clanky/apache-kafka-distribuovana-streamovaci-platforma/">https://www.root.cz/clanky/apache-kafka-distribuovana-streamovaci-platforma/</a>
</li>

<li>Real-Time Payments with Clojure and Apache Kafka (podcast)<br />
<a href="https://www.evidentsystems.com/news/confluent-podcast-about-apache-kafka/">https://www.evidentsystems.com/news/confluent-podcast-about-apache-kafka/</a>
</li>

<li>Kafka and Clojure - Immutable event streams<br />
<a href="https://practicalli.github.io/kafka-and-clojure/">https://practicalli.github.io/kafka-and-clojure/</a>
</li>

<li>Kafka Streams, the Clojure way<br />
<a href="https://blog.davemartin.me/posts/kafka-streams-the-clojure-way/">https://blog.davemartin.me/posts/kafka-streams-the-clojure-way/</a>
</li>

<li>dvlopt.kafka na GitHubu<br />
<a href="https://github.com/helins-io/kafka.clj">https://github.com/helins-io/kafka.clj</a>
</li>

<li>kafka-streams-the-clojure-way na GitHubu<br />
<a href="https://github.com/DaveWM/kafka-streams-the-clojure-way">https://github.com/DaveWM/kafka-streams-the-clojure-way</a>
</li>

<li>babashka: A Clojure babushka for the grey areas of Bash<br />
<a href="https://github.com/borkdude/babashka">https://github.com/borkdude/babashka</a>
</li>

<li>Babashka and the Small Clojure Interpreter @ ClojureD 2020 (slajdy)<br />
<a href="https://speakerdeck.com/borkdude/babashka-and-the-small-clojure-interpreter-at-clojured-2020">https://speakerdeck.com/borkdude/babashka-and-the-small-clojure-interpreter-at-clojured-2020</a>
</li>

<li>Babashka: ukázky použití<br />
<a href="https://github.com/borkdude/babashka/blob/master/doc/examples.md">https://github.com/borkdude/babashka/blob/master/doc/examples.md</a>
</li>

<li>clojureD 2020: "Babashka and Small Clojure Interpreter: Clojure in new contexts" by Michiel Borkent<br />
<a href="https://www.youtube.com/watch?v=Nw8aN-nrdEk&amp;t=5s">https://www.youtube.com/watch?v=Nw8aN-nrdEk&amp;t=5s</a>
</li>

<li>Meetup #124 Babashka, implementing an nREPL server &amp; game engines with Clojure<br />
<a href="https://www.youtube.com/watch?v=0YmZYnwyHHc">https://www.youtube.com/watch?v=0YmZYnwyHHc</a>
</li>

<li>The Last Programming Language (shrnutí vývoje programovacích jazyků)<br />
<a href="https://www.youtube.com/watch?v=P2yr-3F6PQo">https://www.youtube.com/watch?v=P2yr-3F6PQo</a>
</li>

<li>Shebang (Unix): Wikipedia EN<br />
<a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">https://en.wikipedia.org/wiki/Shebang_(Unix)</a>
</li>

<li>Shebang (Unix): Wikipedia CZ<br />
<a href="https://cs.wikipedia.org/wiki/Shebang_(Unix)">https://cs.wikipedia.org/wiki/Shebang_(Unix)</a>
</li>

<li>How to create Clojure notebooks in Jupyter<br />
<a href="https://s01blog.wordpress.com/2017/12/10/how-to-create-clojure-notebooks-in-jupyter/">https://s01blog.wordpress.com/2017/12/10/how-to-create-clojure-notebooks-in-jupyter/</a>
</li>

<li>Dokumentace k&nbsp;nástroji Conda<br />
<a href="https://docs.conda.io/en/latest/">https://docs.conda.io/en/latest/</a>
</li>

<li>Notebook interface<br />
<a href="https://en.wikipedia.org/wiki/Notebook_interface">https://en.wikipedia.org/wiki/Notebook_interface</a>
</li>

<li>Jypyter: open source, interactive data science and scientific computing across over 40 programming languages<br />
<a href="https://jupyter.org/">https://jupyter.org/</a>
</li>

<li>Calysto Scheme<br />
<a href="https://github.com/Calysto/calysto_scheme">https://github.com/Calysto/calysto_scheme</a>
</li>

<li>scheme.py (základ projektu Calysto Scheme)<br />
<a href="https://github.com/Calysto/calysto_scheme/blob/master/calysto_scheme/scheme.py">https://github.com/Calysto/calysto_scheme/blob/master/calysto_scheme/scheme.py</a>
</li>

<li>Humane test output for clojure.test<br />
<a href="https://github.com/pjstadig/humane-test-output">https://github.com/pjstadig/humane-test-output</a>
</li>

<li>iota<br />
<a href="https://github.com/juxt/iota">https://github.com/juxt/iota</a>
</li>

<li>5 Differences between clojure.spec and Schema<br />
<a href="https://lispcast.com/clojure.spec-vs-schema/">https://lispcast.com/clojure.spec-vs-schema/</a>
</li>

<li>Schema: Clojure(Script) library for declarative data description and validation<br />
<a href="https://github.com/plumatic/schema">https://github.com/plumatic/schema</a>
</li>

<li>Zip archiv s&nbsp;Clojure 1.9.0<br />
<a href="http://repo1.maven.org/maven2/org/clojure/clojure/1.9.0/clojure-1.9.0.zip">http://repo1.maven.org/maven2/org/clojure/clojure/1.9.0/clojure-1.9.0.zip</a>
</li>

<li>Clojure 1.9 is now available<br />
<a href="https://clojure.org/news/2017/12/08/clojure19">https://clojure.org/news/2017/12/08/clojure19</a>
</li>

<li>Deps and CLI Guide<br />
<a href="https://clojure.org/guides/deps_and_cli">https://clojure.org/guides/deps_and_cli</a>
</li>

<li>Changes to Clojure in Version 1.9<br />
<a href="https://github.com/clojure/clojure/blob/master/changes.md">https://github.com/clojure/clojure/blob/master/changes.md</a>
</li>

<li>clojure.spec - Rationale and Overview<br />
<a href="https://clojure.org/about/spec">https://clojure.org/about/spec</a>
</li>

<li>Zip archiv s&nbsp;Clojure 1.8.0<br />
<a href="http://repo1.maven.org/maven2/org/clojure/clojure/1.8.0/clojure-1.8.0.zip">http://repo1.maven.org/maven2/org/clojure/clojure/1.8.0/clojure-1.8.0.zip</a>
</li>

<li>Clojure 1.8 is now available<br />
<a href="http://clojure.org/news/2016/01/19/clojure18">http://clojure.org/news/2016/01/19/clojure18</a>
</li>

<li>Socket Server REPL<br />
<a href="http://dev.clojure.org/display/design/Socket+Server+REPL">http://dev.clojure.org/display/design/Socket+Server+REPL</a>
</li>

<li>CLJ-1671: Clojure socket server<br />
<a href="http://dev.clojure.org/jira/browse/CLJ-1671">http://dev.clojure.org/jira/browse/CLJ-1671</a>
</li>

<li>CLJ-1449: Add clojure.string functions for portability to ClojureScript<br />
<a href="http://dev.clojure.org/jira/browse/CLJ-1449">http://dev.clojure.org/jira/browse/CLJ-1449</a>
</li>

<li>Launching a Socket Server<br />
<a href="http://clojure.org/reference/repl_and_main#_launching_a_socket_server">http://clojure.org/reference/repl_and_main#_launching_a_socket_server</a>
</li>

<li>API for clojure.string<br />
<a href="http://clojure.github.io/clojure/branch-master/clojure.string-api.html">http://clojure.github.io/clojure/branch-master/clojure.string-api.html</a>
</li>

<li>Clojars:<br />
<a href="https://clojars.org/">https://clojars.org/</a>
</li>

<li>Seznam knihoven na Clojars:<br />
<a href="https://clojars.org/projects">https://clojars.org/projects</a>
</li>

<li>Clojure Cookbook: Templating HTML with Enlive<br />
<a href="https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc">https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc</a>
</li>

<li>An Introduction to Enlive<br />
<a href="https://github.com/swannodette/enlive-tutorial/">https://github.com/swannodette/enlive-tutorial/</a>
</li>

<li>Enlive na GitHubu<br />
<a href="https://github.com/cgrand/enlive">https://github.com/cgrand/enlive</a>
</li>

<li>Expectations: příklady atd.<br />
<a href="http://jayfields.com/expectations/">http://jayfields.com/expectations/</a>
</li>

<li>Expectations na GitHubu<br />
<a href="https://github.com/jaycfields/expectations">https://github.com/jaycfields/expectations</a>
</li>

<li>Lein-expectations na GitHubu<br />
<a href="https://github.com/gar3thjon3s/lein-expectations">https://github.com/gar3thjon3s/lein-expectations</a>
</li>

<li>Testing Clojure With Expectations<br />
<a href="https://semaphoreci.com/blog/2014/09/23/testing-clojure-with-expectations.html">https://semaphoreci.com/blog/2014/09/23/testing-clojure-with-expectations.html</a>
</li>

<li>Clojure testing TDD/BDD libraries: clojure.test vs Midje vs Expectations vs Speclj<br />
<a href="https://www.reddit.com/r/Clojure/comments/1viilt/clojure_testing_tddbdd_libraries_clojuretest_vs/">https://www.reddit.com/r/Clojure/comments/1viilt/clojure_testing_tddbdd_libraries_clojuretest_vs/</a>
</li>

<li>Testing: One assertion per test<br />
<a href="http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html">http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html</a>
</li>

<li>Rewriting Your Test Suite in Clojure in 24 hours<br />
<a href="http://blog.circleci.com/rewriting-your-test-suite-in-clojure-in-24-hours/">http://blog.circleci.com/rewriting-your-test-suite-in-clojure-in-24-hours/</a>
</li>

<li>Clojure doc: zipper<br />
<a href="http://clojuredocs.org/clojure.zip/zipper">http://clojuredocs.org/clojure.zip/zipper</a>
</li>

<li>Clojure doc: parse<br />
<a href="http://clojuredocs.org/clojure.xml/parse">http://clojuredocs.org/clojure.xml/parse</a>
</li>

<li>Clojure doc: xml-zip<br />
<a href="http://clojuredocs.org/clojure.zip/xml-zip">http://clojuredocs.org/clojure.zip/xml-zip</a>
</li>

<li>Clojure doc: xml-seq<br />
<a href="http://clojuredocs.org/clojure.core/xml-seq">http://clojuredocs.org/clojure.core/xml-seq</a>
</li>

<li>Parsing XML in Clojure<br />
<a href="https://github.com/clojuredocs/guides">https://github.com/clojuredocs/guides</a>
</li>

<li>Clojure Zipper Over Nested Vector<br />
<a href="https://vitalyper.wordpress.com/2010/11/23/clojure-zipper-over-nested-vector/">https://vitalyper.wordpress.com/2010/11/23/clojure-zipper-over-nested-vector/</a>
</li>

<li>Understanding Clojure's PersistentVector implementation<br />
<a href="http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation">http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation</a>
</li>

<li>Understanding Clojure's PersistentHashMap (deftwice...)<br />
<a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice.html">http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice.html</a>
</li>

<li>Assoc and Clojure's PersistentHashMap: part ii<br />
<a href="http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii.html">http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii.html</a>
</li>

<li>Ideal Hashtrees (paper)<br />
<a href="http://lampwww.epfl.ch/papers/idealhashtrees.pdf">http://lampwww.epfl.ch/papers/idealhashtrees.pdf</a>
</li>

<li>Clojure home page<br />
<a href="http://clojure.org/">http://clojure.org/</a>
</li>

<li>Clojure (downloads)<br />
<a href="http://clojure.org/downloads">http://clojure.org/downloads</a>
</li>

<li>Clojure Sequences<br />
<a href="http://clojure.org/sequences">http://clojure.org/sequences</a>
</li>

<li>Clojure Data Structures<br />
<a href="http://clojure.org/data_structures">http://clojure.org/data_structures</a>
</li>

<li>The Structure and Interpretation of Computer Programs: 2.2.1  Representing Sequences<br />
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%_sec_2.2.1">http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%_sec_2.2.1</a>
</li>

<li>The Structure and Interpretation of Computer Programs: 3.3.1  Mutable List Structure<br />
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%_sec_3.3.1">http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%_sec_3.3.1</a>
</li>

<li>Clojure - Functional Programming for the JVM<br />
<a href="http://java.ociweb.com/mark/clojure/article.html">http://java.ociweb.com/mark/clojure/article.html</a>
</li>

<li>Clojure quick reference<br />
<a href="http://faustus.webatu.com/clj-quick-ref.html">http://faustus.webatu.com/clj-quick-ref.html</a>
</li>

<li>4Clojure<br />
<a href="http://www.4clojure.com/">http://www.4clojure.com/</a>
</li>

<li>ClojureDoc (rozcestník s&nbsp;dokumentací jazyka Clojure)<br />
<a href="http://clojuredocs.org/">http://clojuredocs.org/</a>
</li>

<li>Clojure (na Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Clojure">http://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Clojure (na Wikipedia CS)<br />
<a href="http://cs.wikipedia.org/wiki/Clojure">http://cs.wikipedia.org/wiki/Clojure</a>
</li>

<li>SICP (The Structure and Interpretation of Computer Programs)<br />
<a href="http://mitpress.mit.edu/sicp/">http://mitpress.mit.edu/sicp/</a>
</li>

<li>Pure function<br />
<a href="http://en.wikipedia.org/wiki/Pure_function">http://en.wikipedia.org/wiki/Pure_function</a>
</li>

<li>Funkcionální programování<br />
<a href="http://cs.wikipedia.org/wiki/Funkcionální_programování">http://cs.wikipedia.org/wiki/Funkcionální_programování</a>
</li>

<li>Čistě funkcionální (datové struktury, jazyky, programování)<br />
<a href="http://cs.wikipedia.org/wiki/Čistě_funkcionální">http://cs.wikipedia.org/wiki/Čistě_funkcionální</a>
</li>

<li>Clojure Macro Tutorial (Part I, Getting the Compiler to Write Your Code For You)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html</a>
</li>

<li>Clojure Macro Tutorial (Part II: The Compiler Strikes Back)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html</a>
</li>

<li>Clojure Macro Tutorial (Part III: Syntax Quote)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html</a>
</li>

<li>Tech behind Tech: Clojure Macros Simplified<br />
<a href="http://techbehindtech.com/2010/09/28/clojure-macros-simplified/">http://techbehindtech.com/2010/09/28/clojure-macros-simplified/</a>
</li>

<li>Fatvat - Exploring functional programming: Clojure Macros<br />
<a href="http://www.fatvat.co.uk/2009/02/clojure-macros.html">http://www.fatvat.co.uk/2009/02/clojure-macros.html</a>
</li>

<li>Eulerovo číslo<br />
<a href="http://cs.wikipedia.org/wiki/Eulerovo_číslo">http://cs.wikipedia.org/wiki/Eulerovo_číslo</a>
</li>

<li>List comprehension<br />
<a href="http://en.wikipedia.org/wiki/List_comprehension">http://en.wikipedia.org/wiki/List_comprehension</a>
</li>

<li>List Comprehensions in Clojure<br />
<a href="http://asymmetrical-view.com/2008/11/18/list-comprehensions-in-clojure.html">http://asymmetrical-view.com/2008/11/18/list-comprehensions-in-clojure.html</a>
</li>

<li>Clojure Programming Concepts: List Comprehension<br />
<a href="http://en.wikibooks.org/wiki/Clojure_Programming/Concepts#List_Comprehension">http://en.wikibooks.org/wiki/Clojure_Programming/Concepts#List_Comprehension</a>
</li>

<li>Clojure core API: for macro<br />
<a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/for">http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/for</a>
</li>

<li>cirrus machina - The Clojure for macro<br />
<a href="http://www.cirrusmachina.com/blog/comment/the-clojure-for-macro/">http://www.cirrusmachina.com/blog/comment/the-clojure-for-macro/</a>
</li>

<li>Riastradh's Lisp Style Rules<br />
<a href="http://mumble.net/~campbell/scheme/style.txt">http://mumble.net/~campbell/scheme/style.txt</a>
</li>

<li>Dynamic Languages Strike Back<br />
<a href="http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html">http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html</a>
</li>

<li>Scripting: Higher Level Programming for the 21st Century<br />
<a href="http://www.tcl.tk/doc/scripting.html">http://www.tcl.tk/doc/scripting.html</a>
</li>

<li>Java Virtual Machine Support for Non-Java Languages<br />
<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html">http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html</a>
</li>

<li>Třída java.lang.String<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html">http://docs.oracle.com/javase/7/docs/api/java/lang/String.html</a>
</li>

<li>Třída java.lang.StringBuffer<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html">http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html</a>
</li>

<li>Třída java.lang.StringBuilder<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html">http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html</a>
</li>

<li>StringBuffer versus String<br />
<a href="http://www.javaworld.com/article/2076072/build-ci-sdlc/stringbuffer-versus-string.html">http://www.javaworld.com/article/2076072/build-ci-sdlc/stringbuffer-versus-string.html</a>
</li>

<li>Threading macro (dokumentace k&nbsp;jazyku Clojure)<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;</a>
</li>

<li>Understanding the Clojure -&gt; macro<br />
<a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/</a>
</li>

<li>clojure.inspector<br />
<a href="http://clojure.github.io/clojure/clojure.inspector-api.html">http://clojure.github.io/clojure/clojure.inspector-api.html</a>
</li>

<li>The Clojure Toolbox<br />
<a href="http://www.clojure-toolbox.com/">http://www.clojure-toolbox.com/</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure.org: Vars and the Global Environment<br />
<a href="http://clojure.org/Vars">http://clojure.org/Vars</a>
</li>

<li>Clojure.org: Refs and Transactions<br />
<a href="http://clojure.org/Refs">http://clojure.org/Refs</a>
</li>

<li>Clojure.org: Atoms<br />
<a href="http://clojure.org/Atoms">http://clojure.org/Atoms</a>
</li>

<li>Clojure.org: Agents as Asynchronous Actions<br />
<a href="http://clojure.org/agents">http://clojure.org/agents</a>
</li>

<li>Transient Data Structures<br />
<a href="http://clojure.org/transients">http://clojure.org/transients</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

