<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Nástroj Gorilla REPL nabízí uživatelům programovacího jazyka Clojure interaktivní &bdquo;webové&ldquo; prostředí inspirované například projekty IPython Notebook či Jupyter. V tomto článku si představíme vlastnosti tohoto nástroje, jeho přednosti, ale i některé zápory.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure</a></p>
<p><a href="#k02">2. Technologie, na níž je založen projekt Gorilla REPL</a></p>
<p><a href="#k03">3. Vytvoření kostry projektu pro spuštění Gorilla REPL</a></p>
<p><a href="#k04">4. Základy interaktivní práce s&nbsp;REPL</a></p>
<p><a href="#k05">5. Jednoduché grafy: funkce <strong>gorilla-plot.core/list-plot</strong></a></p>
<p><a href="#k06">6. Vykreslení průběhů funkcí: funkce <strong>gorilla-plot.core/plot</strong></a></p>
<p><a href="#k07">7. Sloupcové grafy: funkce <strong>gorilla-plot.core/bar-chart</strong></a></p>
<p><a href="#k08">8. Histogramy: funkce <strong>gorilla-plot.core/histogram</strong></a></p>
<p><a href="#k09">9. Výpis tabulek</a></p>
<p><a href="#k10">10. Zápis a vykreslení vzorců ve formátu (La)TeXu</a></p>
<p><a href="#k11">11. První omezení projektu: tvorba grafů</a></p>
<p><a href="#k12">12. Druhé omezení projektu: použitý formát čísel</a></p>
<p><a href="#k13">13. (Lepší) alternativy nabízené pro jiné programovací jazyky</a></p>
<p><a href="#k14">14. Odkazy na předchozí části tohoto seriálu</a></p>
<p><a href="#k15">15. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure</h2>

<p>V&nbsp;dnešním článku si popíšeme poměrně užitečný nástroj nazvaný
<i>Gorilla REPL</i>, který vývojářům používajícím programovací jazyk
<i>Clojure</i> nabízí interaktivní prostředí založené na běžném webovém
prohlížeči. Toto prostředí obsahuje klasickou smyčku REPL
(Read&ndash;Eval&ndash;Print&ndash;Loop), což mj.&nbsp;znamená, že se
jednotlivé výrazy zapsané uživatelem mohou ihned vyhodnocovat s&nbsp;okamžitou
zpětnou vazbou.  Navíc však nástroj Gorilla REPL dokáže do okna prohlížeče
vykreslovat základní grafy, a to jak s&nbsp;přímým využitím předaných dat
(vektory či sekvence čísel), tak i při specifikaci funkce, jejíž průběh se má
vykreslit (existují zde ovšem mnohá omezení, kterými se budu zabývat
v&nbsp;navazujících kapitolách). Třešničkou na dortu je podpora pro práci se
vzorci psanými v&nbsp;TeXu či LaTeXu.</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-1.png" class="image-242637" alt="&#160;" width="660" height="728" />
<p><i>Obrázek 1: Interaktivní prostředí nástroje Gorilla REPL spuštěné
v&nbsp;běžném webovém prohlížeči (zde konkrétně ve Firefoxu).</i></p>

<p>Celé grafické uživatelské rozhraní Gorilla REPL napodobuje diář
(<i>notebook</i>), do kterého se zapisují jak poznámky, tak i programový kód a
jeho výsledek, takže se tento systém může hodit i pro tvorbu (interaktivních)
prezentací, použití sdílené pracovní plochy atd. Ostatně v&nbsp;tomto ohledu
není přístup zvolený autory Gorilla REPL nijak nový ani přelomový, protože
například i populární IPython Notebook či nověji systém Jupyter používají
podobnou technologii (i když založenou na jiném programovacím jazyku).</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-2.png" class="image-242638" alt="&#160;" width="660" height="341" />
<p><i>Obrázek 2: Nástroj Gorilla REPL obsahuje podporu pro doplňování názvů
funkcí a maker společně se zobrazením nápovědy (programové
dokumentace).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Technologie, na níž je založen projekt Gorilla REPL</h2>

<p>Nástroj Gorilla REPL je založen na klasické technologii klient-server, kde
klientem je webový prohlížeč spuštěný u uživatele (či uživatelů) a serverem je
aplikace vyvinutá v&nbsp;programovacím jazyce Clojure a využívající
v&nbsp;tomto seriálu již dříve popsaný webový server <i>Clojure Ring</i>.
Výraz, popř.&nbsp;blok výrazů představujících programový kód napsaný
v&nbsp;jazyce Clojure, je po stlačení klávesové zkratky
<strong>Shift+Enter</strong> přenesen na server, kde je zpracován a výsledek je
poslán zpět do prohlížeče. JavaScriptový kód na straně prohlížeče zajistí
interpretaci získaných výsledků a jejich zařazení na správné místo do dynamické
webové stránky (jedná se vlastně o dnes tak populární SPA &ndash; <i>Single
Page Application</i> se všemi přednostmi a zápory, které toto řešení přináší).
Výsledky poslané serverem na klienta mohou být různého typu; typicky se jedná o
fragment HTML (tabulky atd.), obrázek typu SVG (graf, histogram), rastrový
obrázek (graf získaný z&nbsp;R), vzorec vykreslený z&nbsp;TeXového či
LaTeXového zdrojového kódu apod. Samotná architektura nástroje Gorilla REPL je
otevřená a poměrně snadno rozšiřitelná, což znamená, že je v&nbsp;případě
potřeby možné přidat například další typy grafů apod.</p>

<a href="http://www.root.cz/obrazek/242639/"><img src="https://i.iinfo.cz/images/72/gorilla-repl-3-prev.png" class="image-242639" alt="&#160;" width="370" height="268" /></a>
<p><i>Obrázek 3: Standardní grafy jsou do stránky vkládány ve formátu
SVG.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vytvoření kostry projektu pro spuštění Gorilla REPL</h2>

<p>Před spuštěním nástroje <i>Gorilla REPL</i> je nutné vykonat několik
přípravných kroků. Předpokladem je, že máte nainstalován <i>Leiningen</i>, což
je téma, kterému jsme se podrobně věnovali <a
href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">v&nbsp;tomto
článku</a>. Pokud máte <i>Leiningen</i> nainstalovaný, je nutné
v&nbsp;jakémkoli adresáři vytvořit nový projekt, a to následujícím
příkazem:</p>

<pre>
$ <strong>lein new project gorilla-test</strong>
</pre>

<p>Po provedení tohoto příkazu by se měla vytvořit struktura projektu:</p>

<pre>
├── doc
│   └── intro.md
├── LICENSE
├── project.clj
├── README.md
├── resources
├── src
│   └── gorilla_test
│       └── core.clj
└── test
    └── gorilla_test
        └── core_test.clj
&nbsp;
6 directories, 6 files
</pre>

<p>Nás nyní bude zajímat pouze projektový soubor <strong>project.clj</strong>,
který je nutné nepatrně upravit &ndash; přidat klíč :plugins a do jeho hodnoty
(tou je vektor!) přidat &bdquo;[lein-gorilla "0.3.6"]&ldquo;. Výsledná podoba
souboru <strong>project.clj</strong> by měla vypadat takto:</p>

<pre>
(defproject gorilla-test "0.1.0-SNAPSHOT"
      :description "Project stub used to run Gorilla REPL"
      :url "http://example.com/FIXME"
      :license {:name "Eclipse Public License"
                :url "http://www.eclipse.org/legal/epl-v10.html"}
      :dependencies [[org.clojure/clojure "1.7.0"]]
      :main ^:skip-aot gorilla-test.core
      :target-path "target/%s"
      :plugins [<strong>[lein-gorilla "0.3.6"]</strong>]
      :profiles {:uberjar {:aot :all}})
</pre>

<p>Následně se nainstalují všechny balíčky, na nichž Gorilla REPL závisí:</p>

<pre>
$ <strong>lein deps</strong>
</pre>

<p>Po úspěšné instalaci všech závislých balíčků je již možné Gorilla REPL
spustit, a to následovně:</p>

<pre>
$ <strong>lein gorilla</strong>
&nbsp;
Gorilla-REPL: 0.3.6
Started nREPL server on port 52660
Running at http://127.0.0.1:58615/worksheet.html .
Ctrl+C to exit.
</pre>

<p>Vidíme, že se ve skutečnosti spustily dva typy serverů na dvou různých
portech. Server typu nREPL se dá používat například z&nbsp;Emacsu či Vimu (což
není téma tohoto článku), druhý server se ovládá přímo z&nbsp;webového
prohlížeče.</p>

<p>Alternativně je možné specifikovat port, na němž má webový server běžet.
Následující příklad by měl fungovat pro všechny uživatele; pokud budete chtít
použít například port 80, je nutné mít práva roota a navíc na tomto portu již
nesmí běžet jiný server (což je pochopitelné):</p>

<pre>
$ <strong>lein gorilla :port 8888</strong>
&nbsp;
Gorilla-REPL: 0.3.6
Started nREPL server on port 53758
Running at http://127.0.0.1:8888/worksheet.html .
Ctrl+C to exit.
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Základy interaktivní práce s&nbsp;REPL</h2>

<p>Po otevření diáře v&nbsp;prohlížeči, tj.&nbsp;po přechodu na adresu
http://127.0.0.1:{port}/worksheet.html, se zobrazí uživatelské rozhraní
projektu Gorilla REPL. V&nbsp;šedě podkreslených rámečcích jsou vstupy
uživatele (výrazy jazyka Clojure), fialově orámovaný rámeček je aktivní.
Vyhodnocení aktivního výrazu se provede klávesovou zkratkou <i>Shift+Enter</i>
(samotná klávesa <i>Enter</i> provede odřádkování, takže není nutné celý výraz
psát na jediný řádek) Povšimněte si, že první výraz je již automaticky
předvyplněn &ndash; obsahuje import jednoho modulu a taktéž definici jmenného
prostoru (samotné jméno je pseudonáhodné, což se hodí při sdílení více diářů).
Dále si povšimněte poměrně nenápadné ikony v&nbsp;pravém horním rohu, pod níž
se skrývá menu. Totéž menu je možné vyvolat dvojím stiskem klávesové zkratky
<i>Alt+G</i> (tedy <i>Alt+G</i> <i>Alt+G</i>). V&nbsp;tomto menu naleznete
několik zajímavých pomůcek, například <i>Alt+G Alt+X</i> pro vymazání jednoho
záznamu, <i>Alt+G Alt+B</i> či <i>Alt+G Alt+N</i> pro vložení místa pro nový
záznam atd.</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-4.png" class="image-242640" alt="&#160;" width="660" height="411" />
<p><i>Obrázek 4: Nápovědu k&nbsp;funkcím a makrům je možné si vypsat i přes
<strong>clojure.repl/doc</strong>. Tato nápověda je přečtena přímo ze
zdrojových kódů a měla by tudíž být stále aktuální.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Jednoduché grafy: funkce <strong>gorilla-plot.core/list-plot</strong></h2>

<p>Jak jsme si již řekli v&nbsp;úvodní kapitole, patří mezi užitečné vlastnosti
projektu Gorilla REPL možnost vykreslování grafů. V&nbsp;případě, že vstupem do
grafu mají být již dříve vypočtené či naměřené údaje, je možné použít funkci
<strong>gorilla-plot.core/list-plot</strong>. V&nbsp;nejjednodušším případě se
této funkci předá vektor (nebo obecná sekvence) s&nbsp;údaji, které se vynesou
do grafu jako jednotlivé body, což je ukázáno na pátém obrázku:</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-5.png" class="image-242641" alt="&#160;" width="660" height="351" />
<p><i>Obrázek 5: Nejjednodušší typ grafu, v&nbsp;němž jsou vyneseny hodnoty
uložené ve vektoru. Pro vykreslení tohoto grafu se používá SVG.</i></p>

<p>Pokud vyžadujete propojení jednotlivých bodů úsečkami, je možné funkci
<strong>gorilla-plot.core/list-plot</strong> předat nepovinný parametr :joined
a přiřadit mu hodnotu true. V&nbsp;mnoha případech je navíc nutné na jednom
grafu zobrazit větší množství průběhů. K&nbsp;tomu slouží funkce
<strong>gorilla-plot.core/compose</strong>, které je možné předat libovolné
množství grafů. Výsledek spojení dvou průběhů, z&nbsp;nichž první používá
propojené úsečky a druhý pouze izolované body, je zobrazeno na šestém
obrázku:</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-6.png" class="image-242642" alt="&#160;" width="660" height="412" />
<p><i>Obrázek 6: Kombinace dvou průběhů do jediného grafu s&nbsp;využitím
funkce <strong>compose</strong>. Oba průběhy zobrazují stejné hodnoty, jednou
však s&nbsp;využitím samostatných bodů a podruhé propojením úsečkami.</i></p>

<p>Poznámka: případnou interpolaci či aproximaci je možné řešit různými
způsoby, například použitím dalšího externího modulu.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vykreslení průběhů funkcí: funkce <strong>gorilla-plot.core/plot</strong></h2>

<p>Pokud se namísto již naměřených dat má do grafu zobrazit průběh nějaké
funkce, samozřejmě není nutné explicitně počítat jednotlivé hodnoty, které se
nakonec vynesou do grafu. Namísto toho je výhodnější namísto funkce
<strong>gorilla-plot.core/line-plot</strong> použít funkci nazvanou
<strong>gorilla-plot.core/plot</strong>. Jedná se o funkci vyššího řádu,
protože jejím prvním parametrem je jiná funkce, jejíž průběh se má zobrazit.
Dalším parametrem je vektor obsahující minimální a maximální x-ovou hodnotu
vstupující do funkce. Podívejme se na jednoduchý příklad &ndash; zobrazení
průběhu funkce y=x<sup>-1</sup>:</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-7.png" class="image-242643" alt="&#160;" width="660" height="502" />
<p><i>Obrázek 7: Zobrazení průběhu funkce x<sup>-1</sup>.</i></p>

<p>Můžeme si nechat zobrazit i průběh složitější funkce, například <i>sinc</i>.
Zde si povšimněte, že při deklaraci vlastní uživatelské funkce lze použít
statickou funkci z&nbsp;modulu java.lang.Math:</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-8.png" class="image-242644" alt="&#160;" width="660" height="507" />
<p><i>Obrázek 8: U funkce <strong>sinc</strong> je patrné, že 100 vypočtených
vzorků je pro tento průběh nedostatečný.</i></p>

<p>Pokud se na graf z&nbsp;obrázku 8 podíváte pozorněji, zjistíte, že by bylo
vhodné zvýšit počet bodů, z&nbsp;nichž se průběh vygeneruje. To je jednoduché,
protože funkci <strong>gorilla-plot.core/plot</strong> je možné předat
nepovinný parametr :plot-points, ve kterém se specifikuje počet bodů (zde
1000). Dále jsme při tvorbě následujícího grafu (obrázek 9) použili odlišnou
barvu vykreslování a navíc je barva vykreslování poloprůhledná. To se zde sice
projeví jen změnou sytosti barvy, ovšem při exportu SVG a jeho následném
použití v&nbsp;jiné aplikaci by to již bylo více patrné:</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-9.png" class="image-242645" alt="&#160;" width="660" height="504" />
<p><i>Obrázek 9: Zvýšení počtu (propojených) bodů na 1000; navíc se změnila i
barva grafu.</i></p>

<p>Podívejme se ještě na nepatrně složitější příklad, v&nbsp;němž se používá
nám již známá funkce <strong>gorilla-plot.core/compose</strong>. Navíc
v&nbsp;tomto příkladu používám anonymní funkci, která změní amplitudu a posun
průběhu <i>sinc</i>. Připomeňme si, že pro zápis anonymních funkcí existují
v&nbsp;Clojure takzvaná reader makra # a %. První z&nbsp;těchto maker nahrazuje
<i>fn</i> se závorkami, druhé makro pak může být použito jako jméno prvního
parametru anonymní funkce:</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-10.png" class="image-242646" alt="&#160;" width="660" height="411" />
<p><i>Obrázek 10: Kombinace dvou průběhů a použití anonymní funkce.</i></p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-11.png" class="image-242647" alt="&#160;" width="660" height="410" />
<p><i>Obrázek 11: I průběh funkce může být vykreslen pouze pomocí bodů.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Sloupcové grafy: funkce <strong>gorilla-plot.core/bar-chart</strong></h2>

<p>Dalším typem grafu, který je v&nbsp;nástroji Gorilla REPL podporován, jsou
takzvané sloupcové grafy, které je možné vykreslit s&nbsp;využitím funkce
nazvané <strong>gorilla-plot.core/bar-chart</strong>. Této funkci je nutné
předat minimálně dva povinné parametry. První parametrem je vektor (či jiná
sekvence) obsahující jména sloupců, druhým parametrem pak vektor (či opět jiný
typ sekvence) s&nbsp;hodnotami. Vzhledem k&nbsp;tomu, že na x-ové ose jsou
vynesena jména sloupců a ne vstupní hodnoty, je obtížné tento typ grafu spojit
s&nbsp;výše uvedenými dalšími dvěma typy (výsledky s&nbsp;velkou
pravděpodobností nebudou odpovídat očekávání). Příklad velmi jednoduchého
sloupcového grafu je uveden na dvanáctém obrázku:</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-12.png" class="image-242648" alt="&#160;" width="660" height="397" />
<p><i>Obrázek 12: Ukázka použití jednoduchého sloupcového grafu.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Histogramy: funkce <strong>gorilla-plot.core/histogram</strong></h2>

<p>Čtvrtým a současně i posledním typem grafu, který je možné v&nbsp;nástroji
Gorilla REPL použít, je histogram. Ten se vykresluje funkcí pojmenovanou
logicky <strong>gorilla-plot.core/histogram</strong>. Povinným parametrem jsou
podle očekávání data, která se mají do histogramu vykreslit, ovšem funkce
<strong>gorilla-plot.core/histogram</strong> podporuje i další nepovinné
parametry, zejména :normalize či :normalise řídicí normalizaci histogramu (jak
vidíte, podporuje se dvojí forma zápisu, stejně tak například :color a
:colour). Dalším mnohdy důležitým nepovinným parametrem je :bins, jehož
hodnotou se řídí šířka intervalů (tříd), tj.&nbsp;nepřímo počet sloupců
v&nbsp;histogramu. Podívejme se na několik ukázek, z&nbsp;nichž bude použití
nepovinných parametrů :normalize a :bins patrné:</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-13.png" class="image-242649" alt="&#160;" width="660" height="506" />
<p><i>Obrázek 13: Histogram získaný z&nbsp;200 pseudonáhodných hodnot
vygenerovaných funkcí Math/random. Histogram není normalizovaný.</i></p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-14.png" class="image-242650" alt="&#160;" width="660" height="544" />
<p><i>Obrázek 14: Zde jsme nedefinovali funkci &bdquo;gauss&ldquo;, která vrací
hodnoty s&nbsp;téměř normálním rozložením. Celkem 10000 hodnot vrácených touto
funkcí pak posloužilo k&nbsp;vytvoření dalšího nenormalizovaného
histogramu.</i></p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-15.png" class="image-242651" alt="&#160;" width="660" height="557" />
<p><i>Obrázek 15: Nepovinným parametrem :bins se řídí rozdělení vstupních dat
do intervalů (tříd), což má přímý vliv na počet sloupců
v&nbsp;histogramu.</i></p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-16.png" class="image-242652" alt="&#160;" width="660" height="504" />
<p><i>Obrázek 16: Oproti předchozímu histogramu jsme zde provedli normalizaci.
Postupně se nám začíná ukazovat klasický zvonovitý tvar Gaussovy
křivky.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Výpis tabulek</h2>

<p>V&nbsp;projektu Gorilla REPL nalezneme i poměrně užitečnou funkci nazvanou
<strong>gorilla-repl.table/table-view</strong>. Tato funkce vezme svůj
parametr, kterým je typicky dvourozměrná matice (tj.&nbsp;v&nbsp;Clojure vektor
vektorů) a zobrazí hodnoty této matice v&nbsp;HTML tabulce. Podívejme se na
velmi jednoduchý příklad s&nbsp;maticí s&nbsp;dvěma řádky a třemi sloupci:</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-17.png" class="image-242653" alt="&#160;" width="660" height="285" />
<p><i>Obrázek 17: Tabulka vytvořená z&nbsp;datové struktury &bdquo;vektor
vektorů&ldquo;.</i></p>

<p>Mnohdy je však zapotřebí v&nbsp;tabulkové formě zobrazit hodnoty nějaké
funkce a doplnit tak příslušný graf (do grafu se totiž hodnoty přímo vpisovat
nedají). V&nbsp;tomto případě by bylo zapotřebí použít transponovanou matici
(dva sloupce, mnoho řádků). Prozatím pro tento účel používám funkci
<strong>transpose</strong>, jejíž zdrojový kód je zobrazen na dalším obrázku,
ale domnívám se, že je tuto funkci možné napsat i kratším způsobem (přijde na
řešení některý ze čtenářů?).</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-18.png" class="image-242654" alt="&#160;" width="660" height="567" />
<p><i>Obrázek 18: Výpis hodnot vracených funkcí <strong>gauss</strong>. Pro
konverzi horizontálně orientované tabulky na tabulku orientovanou vertikálně
jsem použil funkci <strong>transpose</strong>, jejíž kód je zobrazen
v&nbsp;horní části screenshotu.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Zápis a vykreslení vzorců ve formátu (La)TeXu</h2>

<p>Pro některé uživatele může být užitečná i další vlastnost nabízená nástrojem
<i>Gorilla REPL</i>. Do vytvářeného diáře je totiž v&nbsp;případě potřeby možné
vložit (přes MathJax) i velmi složité vzorce zapsané systémem používaným
v&nbsp;TeXu a LaTeXu. Vzorec je převeden ze vstupního značkovacího jazyka do
podoby vhodné pro prezentaci na webové stránce, přičemž je možné
v&nbsp;kontextovém menu zobrazeném po kliknutí na výsledný vzorec zvolit jak
technologii použitou při vykreslení (HTML, HTML+CSS, MathML, SVG), tak i stupeň
zvětšení vybraného vzorce či všech vzorců, které se na stránce nachází. Ostatně
podívejme se na screenshoty, kde na nichž jsou některé možnosti systému Gorilla
REPL v&nbsp;součinnosti s&nbsp;MathJaxem ukázány (samozřejmě je však možné
zapsat i složitější vzorce s&nbsp;maticemi, speciálními operátory atd.):</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-19.png" class="image-242655" alt="&#160;" width="660" height="484" />
<p><i>Obrázek 19: Ukázka importu jmenného prostoru
<strong>gorilla-repl.latex</strong> a vykreslení několika vzorců do
diáře.</i></p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-20.png" class="image-242656" alt="&#160;" width="660" height="643" />
<p><i>Obrázek 20: V&nbsp;kontextovém menu si můžete zvolit zvětšení výsledných
vzorců (zde konkrétně na 300%). Při tomto zvětšení ihned vyjde najevo, že
funkce sin je ve skutečnosti vypsána špatně a že se měl použít zápis \sin
(při renderingu se totiž použije odlišný font).</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. První omezení projektu: tvorba grafů</h2>

<p>Při práci s&nbsp;nástrojem Gorilla REPL poměrně záhy zjistíme, že tento
systém (minimálně ve své základní variantě, tj.&nbsp;bez přídavných pluginů) má
mnohá omezení. Především se jedná o poměrně malé množství dostupných typů
grafů, což začne vadit zejména ve chvíli, kdy je zapotřebí vykreslit průběh
funkce se dvěma nezávislými proměnnými typu <i>z=fce(x,y)</i>,
popř.&nbsp;funkci typu <i>(x,y)=fce(t)</i> (Lissajousovy obrazce apod.) nebo
dokonce funkci, která akceptuje a/nebo vrací komplexní čísla. Taktéž možnosti
úpravy grafů a nastavení jejich stylů jsou (alespoň v&nbsp;současné verzi)
poněkud omezené &ndash; týká se to například možnosti (či přesněji řečeno
naopak nemožnosti) použití většího množství vertikálních os či nemožnosti
použití logaritmického měřítka. V&nbsp;základní variantě nástroje Gorilla REPL
nenajdeme ani podporu pro vykreslení křivek, které aproximují nebo interpolují
naměřené popř.&nbsp;vypočtené hodnoty. To je samozřejmě možné relativně
jednoduše napravit importem některého modulu (jmenného prostoru) do projektu,
nicméně i tak nelze Gorilla REPL pokládat například za systém již od začátku
připravený na provádění statistických výpočtů, na rozdíl od nástroje R.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Druhé omezení projektu: použitý formát čísel</h2>

<p>Druhé omezení, o kterém je nutné se zmínit (a které by navíc bylo možné
poměrně snadno napravit), spočívá v&nbsp;tom, že systém Gorilla REPL při práci
s&nbsp;grafy interně používá numerické hodnoty s&nbsp;plovoucí řádovou čárkou
s&nbsp;dvojitou přesností (v&nbsp;Javě se jedná o primitivní datový typ
<i>double</i>). Kvůli tomuto omezení není možné v&nbsp;plném rozsahu využít
všechny schopnosti programovacího jazyka Clojure, především pak možnost práce
se zlomky (hodnota 1/3 se nepřevádí na reálné číslo, ale zůstává zlomkem) a
taktéž s&nbsp;čísly s&nbsp;prakticky neomezenou přesností a rozsahem (pro
jejich zápis použijte postfix M).</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-21.png" class="image-242657" alt="&#160;" width="660" height="477" />
<p><i>Obrázek 21: S&nbsp;využitím numerických hodnot o neomezeném rozsahu je
možné vypočítat například i 200!, a to bez přetečení popř.&nbsp;vrácení
nekonečna (pro jistotu jsem do diáře přidal i nápovědu k&nbsp;funkci nazvané
*', která zajišťuje, že výsledek výpočtu nepřeteče ani nedojde k&nbsp;jeho
zkreslení).</i></p>

<p>Podívejme se nyní na typický příklad &ndash; funkci pro výpočet faktoriálu
jsem nepatrně upravil takovým způsobem, že se při výpočtu namísto funkce
pojmenované * používá funkce nazvaná *', která automaticky zjistí, kdy se má
přejít z&nbsp;výpočtů s&nbsp;celočíselným datovým typem <i>long</i> na výpočty
s&nbsp;čísly s&nbsp;neomezeným rozsahem. Tato funkce pracuje korektně i pro
n=200 (a samozřejmě i pro vyšší čísla, pokud máte dostatek trpělivosti), ovšem
graf s&nbsp;průběhem funkce faktoriál není korektní, protože při převodu na
<i>double</i> dojde k&nbsp;chybě, což je na grafu patrné poklesem průběhu
k&nbsp;nule (dvakrát nepříjemné je, že se o tomto problému při převodu
explicitně nedozvíte).</p>

<img src="https://i.iinfo.cz/images/72/gorilla-repl-22.png" class="image-242658" alt="&#160;" width="660" height="396" />
<p><i>Obrázek 22: Problém však nastává při vykreslování grafů, protože některé
výpočty jsou v&nbsp;Gorilla REPL omezeny na typ double (čísla s&nbsp;plovoucí
řádovou čárkou s&nbsp;dvojnásobnou přesností).</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. (Lepší) alternativy nabízené pro jiné programovací jazyky</h2>

<p>Mnozí čtenáři se po přečtení předchozích kapitol pravděpodobně ptají, zda je
lepší použít Gorilla REPL namísto již zmíněného populárního nástroje IPython
Notebook či novějšího a ambicióznějšího projektu Jupyter. IPython Notebook a
zejména pak Jupyter jsou vyvíjeny mnohem větším množstvím programátorů a navíc
se těší podpoře některých významných softwarových firem, takže vlastně není
překvapivé, že tyto nástroje nabízí uživatelům mnohem více možností než systém
Gorilla REPL, který je sice navržen modulárně, ale prozatím počet dostupných
modulů není nijak závratný. Pro statistické výpočty, které je nutné prezentovat
s&nbsp;využitím webového &bdquo;diáře&ldquo;, je pravděpodobně stále
nejrozumnější použít R napojený (například) na Jupyter, ovšem ve chvíli, kdy je
celý ekosystém postavený na programovacím jazyku Clojure, nemusí být  použití
Gorilla REPL špatnou volbou (navíc se zde nabízí propojení Gorilla REPL
s&nbsp;již dříve popsanou knihovnou <a
href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">core.matrix</a>).
Podstatně zajímavější se jeví propojení Clojure, systému R a knihovny
<i>ggplot2</i>, které je realizováno v&nbsp;projektu <a
href="https://github.com/JonyEpsilon/gg4clj">gg4clj</a>.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na předchozí části tohoto seriálu</h2>

<ol>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (2)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (3)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/</a>
</li>

<li>Programovací jazyk Clojure – triky při práci s řetězci<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-retezci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-retezci/</a>
</li>

<li>Programovací jazyk Clojure – triky při práci s kolekcemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-kolekcemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-kolekcemi/</a>
</li>

<li>Programovací jazyk Clojure – práce s mapami a množinami<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-prace-s-mapami-a-mnozinami/">http://www.root.cz/clanky/programovaci-jazyk-clojure-prace-s-mapami-a-mnozinami/</a>
</li>

<li>Programovací jazyk Clojure – základy zpracování XML<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-zaklady-zpracovani-xml/">http://www.root.cz/clanky/programovaci-jazyk-clojure-zaklady-zpracovani-xml/</a>
</li>

<li>Programovací jazyk Clojure – testování s využitím knihovny Expectations<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/">http://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/</a>
</li>

<li>Programovací jazyk Clojure – některé užitečné triky použitelné (nejenom) v&nbsp;testech<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/">http://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/</a>
</li>

<li>Enlive – výkonný šablonovací systém pro jazyk Clojure<br/>
<a href="http://www.root.cz/clanky/enlive-vykonny-sablonovaci-system-pro-jazyk-clojure/">http://www.root.cz/clanky/enlive-vykonny-sablonovaci-system-pro-jazyk-clojure/</a>
</li>

<li>Nástroj Leiningen a programovací jazyk Clojure: tvorba vlastních knihoven pro veřejný repositář Clojars<br />
<a href="http://www.root.cz/clanky/nastroj-leiningen-a-programovaci-jazyk-clojure-tvorba-vlastnich-knihoven-pro-verejny-repositar-clojars/">http://www.root.cz/clanky/nastroj-leiningen-a-programovaci-jazyk-clojure-tvorba-vlastnich-knihoven-pro-verejny-repositar-clojars/</a>
</li>

<li>Novinky v Clojure verze 1.8.0<br />
<a href="http://www.root.cz/clanky/novinky-v-clojure-verze-1-8-0/">http://www.root.cz/clanky/novinky-v-clojure-verze-1-8-0/</a>
</li>

<li>Asynchronní programování v&nbsp;Clojure s&nbsp;využitím knihovny core.async<br />
<a href="http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async/">http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async/</a>
</li>

<li>Asynchronní programování v&nbsp;Clojure s&nbsp;využitím knihovny core.async (pokračování)<br />
<a href="http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-pokracovani/">http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-pokracovani/</a>
</li>

<li>Asynchronní programování v Clojure s využitím knihovny core.async (dokončení)<br />
<a href="http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-dokonceni/">http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-dokonceni/</a>
</li>

<li>Vytváříme IRC bota v programovacím jazyce Clojure<br />
<a href="http://www.root.cz/clanky/vytvarime-irc-bota-v-programovacim-jazyce-clojure/">http://www.root.cz/clanky/vytvarime-irc-bota-v-programovacim-jazyce-clojure/</a>
</li>

</ol>



<p><a name="k15"></a></p>
<h2 id="k15">15. Odkazy na Internetu</h2>

<ol>

<li>Back to the Future: Lisp as a Base for a Statistical Computing System<br />
<a href="https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-2008.pdf">https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-2008.pdf</a>
</li>

<li>gg4clj: a simple wrapper for using R's ggplot2 in Clojure and Gorilla REPL<br />
<a href="https://github.com/JonyEpsilon/gg4clj">https://github.com/JonyEpsilon/gg4clj</a>
</li>

<li>Analemma: a Clojure-based SVG DSL and charting library<br />
<a href="http://liebke.github.io/analemma/">http://liebke.github.io/analemma/</a>
</li>

<li>Clojupyter: a Jupyter kernel for Clojure<br />
<a href="https://github.com/roryk/clojupyter">https://github.com/roryk/clojupyter</a>
</li>

<li>Communicating sequential processes<br />
<a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">https://en.wikipedia.org/wiki/Communicating_sequential_processes</a>
</li>

<li>The IPython Notebook<br />
<a href="http://ipython.org/notebook.html">http://ipython.org/notebook.html</a>
</li>

<li>Jypyter: open source, interactive data science and scientific computing across over 40 programming languages<br />
<a href="https://jupyter.org/">https://jupyter.org/</a>
</li>

<li>nbviewer: a simple way to share Jupyter Notebooks<br />
<a href="https://nbviewer.jupyter.org/">https://nbviewer.jupyter.org/</a>
</li>

<li>Clojure core.async<br />
<a href="http://www.infoq.com/presentations/clojure-core-async">http://www.infoq.com/presentations/clojure-core-async</a>
</li>

<li>core.async API Reference<br />
<a href="https://clojure.github.io/core.async/">https://clojure.github.io/core.async/</a>
</li>

<li>Clojure core.async Channels<br />
<a href="http://clojure.com/blog/2013/06/28/clojure-core-async-channels.html">http://clojure.com/blog/2013/06/28/clojure-core-async-channels.html</a>
</li>

<li>core.async examples<br />
<a href="https://github.com/clojure/core.async/blob/master/examples/walkthrough.clj">https://github.com/clojure/core.async/blob/master/examples/walkthrough.clj</a>
</li>

<li>Timothy Baldridge - Core.Async<br />
<a href="https://www.youtube.com/watch?v=enwIIGzhahw">https://www.youtube.com/watch?v=enwIIGzhahw</a>
</li>

<li>Designing Front End Applications with core.async<br />
<a href="http://go.cognitect.com/core_async_webinar_recording">http://go.cognitect.com/core_async_webinar_recording</a>
</li>

<li>Mastering Concurrent Processes with core.async<br />
<a href="http://www.braveclojure.com/core-async/">http://www.braveclojure.com/core-async/</a>
</li>

<li>LispCast: Clojure core.async<br />
<a href="https://www.youtube.com/watch?v=msv8Fvtd6YQ">https://www.youtube.com/watch?v=msv8Fvtd6YQ</a>
</li>

<li>Julian Gamble - Applying the paradigms of core.async in ClojureScript<br />
<a href="https://www.youtube.com/watch?v=JUrOebC5HmA">https://www.youtube.com/watch?v=JUrOebC5HmA</a>
</li>

<li>Zip archiv s&nbsp;Clojure 1.8.0<br />
<a href="http://repo1.maven.org/maven2/org/clojure/clojure/1.8.0/clojure-1.8.0.zip">http://repo1.maven.org/maven2/org/clojure/clojure/1.8.0/clojure-1.8.0.zip</a>
</li>

<li>Clojure 1.8 is now available<br />
<a href="http://clojure.org/news/2016/01/19/clojure18">http://clojure.org/news/2016/01/19/clojure18</a>
</li>

<li>Changes to Clojure in Version 1.8<br />
<a href="https://github.com/clojure/clojure/blob/master/changes.md">https://github.com/clojure/clojure/blob/master/changes.md</a>
</li>

<li>Socket Server REPL<br />
<a href="http://dev.clojure.org/display/design/Socket+Server+REPL">http://dev.clojure.org/display/design/Socket+Server+REPL</a>
</li>

<li>CLJ-1671: Clojure socket server<br />
<a href="http://dev.clojure.org/jira/browse/CLJ-1671">http://dev.clojure.org/jira/browse/CLJ-1671</a>
</li>

<li>CLJ-1449: Add clojure.string functions for portability to ClojureScript<br />
<a href="http://dev.clojure.org/jira/browse/CLJ-1449">http://dev.clojure.org/jira/browse/CLJ-1449</a>
</li>

<li>Launching a Socket Server<br />
<a href="http://clojure.org/reference/repl_and_main#_launching_a_socket_server">http://clojure.org/reference/repl_and_main#_launching_a_socket_server</a>
</li>

<li>API for clojure.string<br />
<a href="http://clojure.github.io/clojure/branch-master/clojure.string-api.html">http://clojure.github.io/clojure/branch-master/clojure.string-api.html</a>
</li>

<li>Clojars:<br />
<a href="https://clojars.org/">https://clojars.org/</a>
</li>

<li>Seznam knihoven na Clojars:<br />
<a href="https://clojars.org/projects">https://clojars.org/projects</a>
</li>

<li>Clojure Cookbook: Templating HTML with Enlive<br />
<a href="https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc">https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc</a>
</li>

<li>An Introduction to Enlive<br />
<a href="https://github.com/swannodette/enlive-tutorial/">https://github.com/swannodette/enlive-tutorial/</a>
</li>

<li>Enlive na GitHubu<br />
<a href="https://github.com/cgrand/enlive">https://github.com/cgrand/enlive</a>
</li>

<li>Expectations: příklady atd.<br />
<a href="http://jayfields.com/expectations/">http://jayfields.com/expectations/</a>
</li>

<li>Expectations na GitHubu<br />
<a href="https://github.com/jaycfields/expectations">https://github.com/jaycfields/expectations</a>
</li>

<li>Lein-expectations na GitHubu<br />
<a href="https://github.com/gar3thjon3s/lein-expectations">https://github.com/gar3thjon3s/lein-expectations</a>
</li>

<li>Testing Clojure With Expectations<br />
<a href="https://semaphoreci.com/blog/2014/09/23/testing-clojure-with-expectations.html">https://semaphoreci.com/blog/2014/09/23/testing-clojure-with-expectations.html</a>
</li>

<li>Clojure testing TDD/BDD libraries: clojure.test vs Midje vs Expectations vs Speclj<br />
<a href="https://www.reddit.com/r/Clojure/comments/1viilt/clojure_testing_tddbdd_libraries_clojuretest_vs/">https://www.reddit.com/r/Clojure/comments/1viilt/clojure_testing_tddbdd_libraries_clojuretest_vs/</a>
</li>

<li>Testing: One assertion per test<br />
<a href="http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html">http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html</a>
</li>

<li>Rewriting Your Test Suite in Clojure in 24 hours<br />
<a href="http://blog.circleci.com/rewriting-your-test-suite-in-clojure-in-24-hours/">http://blog.circleci.com/rewriting-your-test-suite-in-clojure-in-24-hours/</a>
</li>

<li>Clojure doc: zipper<br />
<a href="http://clojuredocs.org/clojure.zip/zipper">http://clojuredocs.org/clojure.zip/zipper</a>
</li>

<li>Clojure doc: parse<br />
<a href="http://clojuredocs.org/clojure.xml/parse">http://clojuredocs.org/clojure.xml/parse</a>
</li>

<li>Clojure doc: xml-zip<br />
<a href="http://clojuredocs.org/clojure.zip/xml-zip">http://clojuredocs.org/clojure.zip/xml-zip</a>
</li>

<li>Clojure doc: xml-seq<br />
<a href="http://clojuredocs.org/clojure.core/xml-seq">http://clojuredocs.org/clojure.core/xml-seq</a>
</li>

<li>Parsing XML in Clojure<br />
<a href="https://github.com/clojuredocs/guides">https://github.com/clojuredocs/guides</a>
</li>

<li>Clojure Zipper Over Nested Vector<br />
<a href="https://vitalyper.wordpress.com/2010/11/23/clojure-zipper-over-nested-vector/">https://vitalyper.wordpress.com/2010/11/23/clojure-zipper-over-nested-vector/</a>
</li>

<li>Understanding Clojure's PersistentVector implementation<br />
<a href="http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation">http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation</a>
</li>

<li>Understanding Clojure's PersistentHashMap (deftwice...)<br />
<a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice.html">http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice.html</a>
</li>

<li>Assoc and Clojure's PersistentHashMap: part ii<br />
<a href="http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii.html">http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii.html</a>
</li>

<li>Ideal Hashtrees (paper)<br />
<a href="http://lampwww.epfl.ch/papers/idealhashtrees.pdf">http://lampwww.epfl.ch/papers/idealhashtrees.pdf</a>
</li>

<li>Clojure home page<br />
<a href="http://clojure.org/">http://clojure.org/</a>
</li>

<li>Clojure (downloads)<br />
<a href="http://clojure.org/downloads">http://clojure.org/downloads</a>
</li>

<li>Clojure Sequences<br />
<a href="http://clojure.org/sequences">http://clojure.org/sequences</a>
</li>

<li>Clojure Data Structures<br />
<a href="http://clojure.org/data_structures">http://clojure.org/data_structures</a>
</li>

<li>The Structure and Interpretation of Computer Programs: 2.2.1  Representing Sequences<br />
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%_sec_2.2.1">http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%_sec_2.2.1</a>
</li>

<li>The Structure and Interpretation of Computer Programs: 3.3.1  Mutable List Structure<br />
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%_sec_3.3.1">http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%_sec_3.3.1</a>
</li>

<li>Clojure - Functional Programming for the JVM<br />
<a href="http://java.ociweb.com/mark/clojure/article.html">http://java.ociweb.com/mark/clojure/article.html</a>
</li>

<li>Clojure quick reference<br />
<a href="http://faustus.webatu.com/clj-quick-ref.html">http://faustus.webatu.com/clj-quick-ref.html</a>
</li>

<li>4Clojure<br />
<a href="http://www.4clojure.com/">http://www.4clojure.com/</a>
</li>

<li>ClojureDoc (rozcestník s&nbsp;dokumentací jazyka Clojure)<br />
<a href="http://clojuredocs.org/">http://clojuredocs.org/</a>
</li>

<li>Clojure (na Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Clojure">http://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Clojure (na Wikipedia CS)<br />
<a href="http://cs.wikipedia.org/wiki/Clojure">http://cs.wikipedia.org/wiki/Clojure</a>
</li>

<li>SICP (The Structure and Interpretation of Computer Programs)<br />
<a href="http://mitpress.mit.edu/sicp/">http://mitpress.mit.edu/sicp/</a>
</li>

<li>Pure function<br />
<a href="http://en.wikipedia.org/wiki/Pure_function">http://en.wikipedia.org/wiki/Pure_function</a>
</li>

<li>Funkcionální programování<br />
<a href="http://cs.wikipedia.org/wiki/Funkcionální_programování">http://cs.wikipedia.org/wiki/Funkcionální_programování</a>
</li>

<li>Čistě funkcionální (datové struktury, jazyky, programování)<br />
<a href="http://cs.wikipedia.org/wiki/Čistě_funkcionální">http://cs.wikipedia.org/wiki/Čistě_funkcionální</a>
</li>

<li>Clojure Macro Tutorial (Part I, Getting the Compiler to Write Your Code For You)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html</a>
</li>

<li>Clojure Macro Tutorial (Part II: The Compiler Strikes Back)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html</a>
</li>

<li>Clojure Macro Tutorial (Part III: Syntax Quote)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html</a>
</li>

<li>Tech behind Tech: Clojure Macros Simplified<br />
<a href="http://techbehindtech.com/2010/09/28/clojure-macros-simplified/">http://techbehindtech.com/2010/09/28/clojure-macros-simplified/</a>
</li>

<li>Fatvat - Exploring functional programming: Clojure Macros<br />
<a href="http://www.fatvat.co.uk/2009/02/clojure-macros.html">http://www.fatvat.co.uk/2009/02/clojure-macros.html</a>
</li>

<li>Eulerovo číslo<br />
<a href="http://cs.wikipedia.org/wiki/Eulerovo_číslo">http://cs.wikipedia.org/wiki/Eulerovo_číslo</a>
</li>

<li>List comprehension<br />
<a href="http://en.wikipedia.org/wiki/List_comprehension">http://en.wikipedia.org/wiki/List_comprehension</a>
</li>

<li>List Comprehensions in Clojure<br />
<a href="http://asymmetrical-view.com/2008/11/18/list-comprehensions-in-clojure.html">http://asymmetrical-view.com/2008/11/18/list-comprehensions-in-clojure.html</a>
</li>

<li>Clojure Programming Concepts: List Comprehension<br />
<a href="http://en.wikibooks.org/wiki/Clojure_Programming/Concepts#List_Comprehension">http://en.wikibooks.org/wiki/Clojure_Programming/Concepts#List_Comprehension</a>
</li>

<li>Clojure core API: for macro<br />
<a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/for">http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/for</a>
</li>

<li>cirrus machina - The Clojure for macro<br />
<a href="http://www.cirrusmachina.com/blog/comment/the-clojure-for-macro/">http://www.cirrusmachina.com/blog/comment/the-clojure-for-macro/</a>
</li>

<li>Riastradh's Lisp Style Rules<br />
<a href="http://mumble.net/~campbell/scheme/style.txt">http://mumble.net/~campbell/scheme/style.txt</a>
</li>

<li>Dynamic Languages Strike Back<br />
<a href="http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html">http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html</a>
</li>

<li>Scripting: Higher Level Programming for the 21st Century<br />
<a href="http://www.tcl.tk/doc/scripting.html">http://www.tcl.tk/doc/scripting.html</a>
</li>

<li>Java Virtual Machine Support for Non-Java Languages<br />
<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html">http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html</a>
</li>

<li>Třída java.lang.String<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html">http://docs.oracle.com/javase/7/docs/api/java/lang/String.html</a>
</li>

<li>Třída java.lang.StringBuffer<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html">http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html</a>
</li>

<li>Třída java.lang.StringBuilder<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html">http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html</a>
</li>

<li>StringBuffer versus String<br />
<a href="http://www.javaworld.com/article/2076072/build-ci-sdlc/stringbuffer-versus-string.html">http://www.javaworld.com/article/2076072/build-ci-sdlc/stringbuffer-versus-string.html</a>
</li>

<li>Threading macro (dokumentace k&nbsp;jazyku Clojure)<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;</a>
</li>

<li>Understanding the Clojure -&gt; macro<br />
<a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/</a>
</li>

<li>clojure.inspector<br />
<a href="http://clojure.github.io/clojure/clojure.inspector-api.html">http://clojure.github.io/clojure/clojure.inspector-api.html</a>
</li>

<li>The Clojure Toolbox<br />
<a href="http://www.clojure-toolbox.com/">http://www.clojure-toolbox.com/</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure.org: Vars and the Global Environment<br />
<a href="http://clojure.org/Vars">http://clojure.org/Vars</a>
</li>

<li>Clojure.org: Refs and Transactions<br />
<a href="http://clojure.org/Refs">http://clojure.org/Refs</a>
</li>

<li>Clojure.org: Atoms<br />
<a href="http://clojure.org/Atoms">http://clojure.org/Atoms</a>
</li>

<li>Clojure.org: Agents as Asynchronous Actions<br />
<a href="http://clojure.org/agents">http://clojure.org/agents</a>
</li>

<li>Transient Data Structures
<a href="http://clojure.org/transients">http://clojure.org/transients</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

