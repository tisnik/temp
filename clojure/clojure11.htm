<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o programovacím jazyku Clojure i o knihovnách, které mohou programátoři pracující v Clojure využít, si popíšeme poměrně zajímavě koncipovanou knihovnu nazvanou Clisk. Tato knihovna slouží pro programovou syntézu dvourozměrných i trojrozměrných textur a její největší předností je podpora interaktivního vytváření a modifikace textur.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk</a></p>
<p><a href="#k02">2. Koncepty, na nichž je postavena knihovna Clisk</a></p>
<p><a href="#k03">3. Funkce <strong>show</strong> a <strong>checker</strong></a></p>
<p><a href="#k04">4. Úplný zdrojový kód demonstračního příkladu <strong>clisktest1</strong></a></p>
<p><a href="#k05">5. Převod vzorku na rastrový obraz a uložení obrazu do souboru</a></p>
<p><a href="#k06">6. Jednoduché uživatelsky definované vzorky</a></p>
<p><a href="#k07">7. Složitější uživatelsky definované vzorky</a></p>
<p><a href="#k08">8. Úplný zdrojový kód demonstračního příkladu <strong>clisktest2</strong></a></p>
<p><a href="#k09">9. Generátory, které jsou součástí knihovny Clisk</a></p>
<p><a href="#k10">10. Funkce <strong>compose</strong> a její použití při tvorbě textur</a></p>
<p><a href="#k11">11. Vnořené vzorky, funkce <strong>offset</strong>, <strong>rotate</strong> a <strong>scale</strong></a></p>
<p><a href="#k12">12. Úplný zdrojový kód demonstračního příkladu <strong>clisktest3</strong></a></p>
<p><a href="#k13">13. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k14">14. Odkazy na předchozí části seriálu</a></p>
<p><a href="#k15">15. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk</h2>

<p>V&nbsp;dnešní části seriálu, v&nbsp;němž se zabýváme různými obvyklými i
poněkud neobvyklými aspekty programovacího jazyka <i>Clojure</i> a taktéž
knihovnami, které mohou programátoři pracující v&nbsp;jazyku Clojure použít, si
popíšeme některé vybrané vlastnosti knihovny nazvané poněkud záhadně
<i>Clisk</i>. Jedná se o knihovnu určenou pro tvorbu (syntézu) různých typů
procedurálních textur, a to nejenom klasických 2D textur reprezentovaných
rastrovými obrázky, ale i trojrozměrných a dokonce i čtyřrozměrných textur,
které lze použít například v&nbsp;několika raytracerech (čtyřrozměrné textury
lze animovat a tvořit například oblaka). V&nbsp;knihovně <i>Clisk</i> jsou
deklarovány různé generátory šumu, předdefinované vzorky (šachovnice, mřížka)
atd. ovšem mnohem důležitější a současně i zajímavější je podpora pro tvorbu
vlastních generátorů, možnost kompozice několika generátorů, programové řízení
generování textur atd. Knihovna <i>Clisk</i> taktéž obsahuje podporu pro
rendering fraktálů různých typů, například i slavné <a
href="http://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xii/">Mandelbrotovy
množiny</a> (lze však deklarovat i jakýkoli jiný fraktál vykreslovaný
v&nbsp;komplexní rovině).</p>

<p>Zajímavý je taktéž fakt, že knihovna <i>Clisk</i> poměrně důsledně dodržuje
některá pravidla funkcionálního programování (zejména předávání funkcí
v&nbsp;parametrech jiným funkcím, kompozice funkcí atd.), takže se může jednat
o velmi užitečnou a pro studenty i poměrně přitažlivou učební pomůcku při
vysvětlování tohoto na mnoha školách stále opomíjeného paradigmatu. K&nbsp;tomu
dopomáhá i možnost zobrazit si vygenerovanou texturu ihned po její deklaraci
s&nbsp;využitím funkce <strong>show</strong> (viz též <a href="#k03">kapitolu
číslo 3</a>), což mj.&nbsp;znamená, že pro experimentování s&nbsp;možnostmi
nabízenými knihovnou <i>Click</i> je více než vhodné používat interaktivní
smyčku REPL, kterou je programovací jazyk <i>Clojure</i> samozřejmě vybaven.
V&nbsp;praxi je však mnohem efektivnější použití vylepšené smyčky REPL nabízené
nástrojem <i>Leiningen</i>, ideálně propojené s&nbsp;textovým editorem a/nebo
vhodně nakonfigurovaným integrovaným vývojovým prostředím (příkladem může být
relativně úspěšné <a
href="https://github.com/laurentpetit/ccw/wiki/GoogleCodeHome">Counterclockwise</a>).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Koncepty, na nichž je postavena knihovna Clisk</h2>

<p>Jak jsme si již řekli <a href="#k01">v&nbsp;první kapitole</a>, dokáže
knihovna <i>Clisk</i> generovat dvourozměrné, trojrozměrné i čtyřrozměrné
procedurální textury, ovšem v&nbsp;dnešním článku se pro jednoduchost budeme
zabývat &bdquo;pouze&ldquo; texturami dvourozměrnými, tj.&nbsp;běžnými
rastrovými obrázky. Toto zjednodušení nám mj.&nbsp;umožní snazší zobrazení
vygenerované textury bez nutnosti použití raytraceru. Obrázky reprezentující
výslednou texturu jsou tvořeny běžným dvourozměrným polem pixelů, přičemž každý
pixel je specifikován trojicí barvových složek [red, green, blue], což je
z&nbsp;pohledu programátora vektor. V&nbsp;knihovně <i>Clisk</i> se
dvourozměrné textury tvoří vlastně velmi jednoduše &ndash; deklarováním funkce,
která pro předané souřadnice <i>[x, y]</i> vrátí vektor s&nbsp;trojicí prvků
<i>[red, green, blue]</i>. Nezávisle na rozlišení výsledného rastrového obrázku
nabývá souřadnice <i>x</i> hodnot v&nbsp;rozsahu &lt;0, 1&gt;. Totéž pravidlo
platí i pro souřadnici <i>y</i>. Dokonce i hodnoty barvových složek <i>red</i>,
<i>green</i> a <i>blue</i> leží v&nbsp;rozsahu &lt;0, 1&gt;.</p>

<p>Pro zjednodušení aplikací je možné, aby uživatelská funkce použitá pro
tvorbu textury nevracela vektor s&nbsp;trojicí hodnot <i>[red, green,
blue]</i>, ale pouze jedinou skalární hodnotu. Výsledkem pak bude obrázek ve
stupních šedi, popř.&nbsp;lze takovou funkci vhodným způsobem zkombinovat
s&nbsp;funkcí jinou. V&nbsp;knihovně <i>Clisk</i> je již mnoho funkcí vhodných
pro tvorbu procedurálních textur deklarováno; některé z&nbsp;nich si popíšeme
v&nbsp;navazujících kapitolách. Další zjednodušení představuje několik nových
funkcí a taktéž operátorů, které mohou pracovat s&nbsp;operandy typu vektor. Na
rozdíl od běžných skalárních operátorů typu +, -, * a / mají nové vektorové
operátory názvy <i>v+</i>, <i>v-</i>, <i>v*</i>, <i>vdivide</i>, <i>vpow</i>,
<i>vmod</i> a <i>vsqrt</i>. (připomeňme si jen, že v&nbsp;programovacím jazyce
Clojure se všechny operátory zapisují stejným způsobem jako volání funkcí,
protože Clojure de facto pojem &bdquo;operátor&ldquo; v&nbsp;běžném významu
známém z&nbsp;matematiky ani nepoužívá). Použití funkcí a operátorů pracujících
s&nbsp;vektory si ukážeme v&nbsp;dnešním druhém demonstračním příkladu.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Funkce <strong>show</strong> a <strong>checker</strong></h2>

<p>V&nbsp;této kapitole se seznámíme s&nbsp;dvojicí funkcí deklarovaných
v&nbsp;knihovně <i>Clisk</i>. První z&nbsp;těchto funkcí se jmenuje
<strong>show</strong>. Název již malinko napovídá, co funkce
<strong>show</strong> provádí &ndash; jako parametr se této funkci předá
deklarace textury (taktéž ve formě funkce), textura se vypočítá a následně
zobrazí v&nbsp;samostatném okně. Druhá důležitá funkce se jmenuje
<strong>checker</strong>. Jedná se o takzvaný <i>pattern</i>, tj.&nbsp;o funkci
používanou pro výpočet barvy jednotlivých pixelů textury na základě přečtených
hodnot <i>x</i> a <i>y</i>. Pro zajímavost se podívejme, jak je funkce
<strong>checker</strong> deklarována. Jejími parametry je dvojice barev,
kterými budou vybarvena políčka šachovnice, uvnitř se pak pracuje
s&nbsp;hodnotami <i>x</i> a <i>y</i>:</p>

<pre>
(defn <strong>checker</strong>
  "Checker pattern in (x,y) space, with 2*2 grid in [0..1,0..1] range"
  ([a b]
    (vif '(clojure.core/*
            (clojure.core/- (clisk.functions/frac x) 0.5)
            (clojure.core/- (clisk.functions/frac y) 0.5))
         a
         b)))
</pre>

<p>Použití funkcí <strong>show</strong> a <strong>checker</strong> je velmi
jednoduché, samozřejmě ve chvíli, kdy je projekt správně nastaven a je proveden
import všech funkcí nabízených knihovnou <i>Clisk</i> (viz následující
kapitolu):</p>

<pre>
(show (checker black white))
</pre>

<img src="http://i.iinfo.cz/images/455/clisk1-1.png" class="image-207039" width="276" height="356" alt="&#160;" />
<p><i>Obrázek 1: Výsledek vyhodnocení <strong>(show (checker black
white))</strong>. Okno s&nbsp;grafickým uživatelským rozhraním bylo vytvořeno
knihovnou Clisk.</i></p>

<p>Základní rozlišení dvourozměrné textury je 256&times;256 pixelů, ovšem
s&nbsp;využitím pojmenovaného parametru <strong>:size</strong> lze tuto
velikost (rozlišení) jednoduše změnit:</p>

<pre>
(show (checker yellow blue) :size 512)
</pre>

<img src="http://i.iinfo.cz/images/455/clisk1-2.png" class="image-207040" width="532" height="612" alt="&#160;" />
<p><i>Obrázek 2: Výsledek vyhodnocení <strong>(show (checker yellow blue) :size
512)</strong>. Okno s&nbsp;grafickým uživatelským rozhraním bylo vytvořeno
knihovnou Clisk</i></p>

<p>Poznámka: deklarace základních barev je samozřejmě taktéž součástí knihovny
<i>Clisk</i>.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Úplný zdrojový kód demonstračního příkladu <strong>clisktest1</strong></h2>

<p>V&nbsp;této kapitole bude uveden výpis úplného zdrojového kódu dnešního
prvního demonstračního příkladu nazvaného <strong>clisktest1</strong>,
z&nbsp;něhož jsme používali úryvky v&nbsp;předchozích kapitolách:</p>

<p>Obsah souboru <strong>project.clj</strong>:</p>

<pre>
(defproject clisktest1 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[net.mikera/clisk "0.10.0"]</strong>]
  :main ^:skip-aot clisktest1.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Obsah souboru <strong>core.clj</strong>:</p>

<pre>
(ns <strong>clisktest1.core</strong>
    (:gen-class)
    (:use clisk.live))
&nbsp;
(defn <strong>-main</strong>
    <i>"Začínáme..."</i>
    [&amp; args]
    <i>; funkce "show" zobrazí vzorek</i>
    (show (checker black white))
    (show (checker yellow blue) :size 512)
    <i>; nutno odkomentovat v případě, že se má aplikace automaticky ukončit</i>
    <i>;(System/exit 0)</i>
)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Převod vzorku na rastrový obraz a uložení obrazu do souboru</h2>

<p>Funkce <strong>show</strong>, kterou jsme použili v&nbsp;dnešním prvním
demonstračním příkladu, je sice vhodná pro interaktivní tvorbu textur
s&nbsp;využitím interaktivní smyčky REPL, ovšem pro &bdquo;opravdovou&ldquo;
práci musíme mít možnost vygenerovanou texturu uložit do souboru ve vhodném
rastrovém formátu. Ve skutečnosti je to poměrně jednoduché, protože
v&nbsp;knihovně <i>Clisk</i> existuje funkce nazvaná <strong>image</strong>,
která na svém vstupu očekává vzorek (například již zmíněnou funkci
<strong>checker</strong>) a na výstup vrátí obrázek reprezentovaný objektem
typu <strong>BufferedImage</strong> (používá se zde tedy Java interop). Můžeme
si tedy vytvořit pomocnou funkci pro převod vzorku na rastrový obrázek a
zavolání jiné funkce pro uložení rastrového obrázku do souboru:</p>

<pre>
(defn <strong>write-pattern</strong>
    <i>"Vytvoření rastrového obrázku na základě předaného patternu."</i>
    [pattern file-name]
    (write-image (image pattern) file-name))
</pre>

<p>Pro uložení rastrového obrázku do souboru opět využijeme Java interop, zde
konkrétně statickou metodu nazvanou <strong>write</strong>, která je
deklarována ve třídě <strong>javax.imageio.ImageIO</strong>. Metoda
<strong>write</strong> akceptuje tři parametry &ndash; rastrový obrázek typu
<strong>BufferedImage</strong> či <strong>WritableRenderedImage</strong>,
řetězec s&nbsp;názvem výstupního formátu a objekt typu
<strong>java.io.File</strong> reprezentující cestu k&nbsp;výslednému souboru.
Naše druhá pomocná funkce je tedy opět velmi jednoduchá, o čemž se lze snadno
přesvědčit z&nbsp;jejího výpisu:</p>

<pre>
(defn <strong>write-image</strong>
    <i>"Uložení rastrového obrázku typu BufferedImage do souboru."</i>
    [image file-name]
    (ImageIO/write image "png" (File. file-name)))
</pre>

<p>Lze se však obejít i bez těchto funkcí, což si můžeme snadno ukázat na
příkladech:</p>

<pre>
(def test-img (image (checker black white)))
(javax.imageio.ImageIO/write test-img "png" (java.io.File. "test.png"))
</pre>

<p>Nebo ještě snadněji s&nbsp;využitím takzvaného threading makra:</p>

<pre>
(-&gt; (checker black white) image (javax.imageio.ImageIO/write "png" (java.io.File. "test1.png")))
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Jednoduché uživatelsky definované vzorky</h2>

<p>Uživatelskou funkci nazvanou <strong>write-pattern</strong>, s&nbsp;níž jsme
se seznámili <a href="#k05">v&nbsp;předchozí kapitole</a>, můžeme použít pro
vytvoření první série jednoduchých textur. Podívejme se na jednotlivé volání
této funkce s&nbsp;krátkými komentáři:</p>

<pre>
(defn <strong>basic-patterns-test</strong>
    <i>"Jednoduché uživatelsky definované vzorky."</i>
    []
    <i>; nezávisle na hodnotách x a y se vrací konstanta</i>
    <i>; black je symbol reprezentující vektor představující černou barvu</i>
    (write-pattern black        "basic0.png")
&nbsp;
    <i>; nezávisle na hodnotách x a y se vrací konstanta</i>
    <i>; 1/2 je skalární hodnota: šedá barva</i>
    (write-pattern 1/2          "basic1.png")
&nbsp;
    <i>; nezávisle na hodnotách x a y se vrací konstanta</i>
    <i>; 2/3 červené barvy + 2/3 modré barvy</i>
    (write-pattern [2/3 0 2/3]  "basic2.png")
&nbsp;
    <i>; červená složka odpovídá hodnotě souřadnice x</i>
    <i>; modrá složka odpovídá hodnotě souřadnice y</i>
    (write-pattern [x 1/2 y]    "basic3.png")
&nbsp;
    <i>; vytvoření gradientního přechodu</i>
    (write-pattern [y y x]      "basic4.png")
&nbsp;
    <i>; symbol pos lze použít namísto [x y z]</i>
    <i>; zde nás složka z nezajímá (je nulová), tudíž je modrá složka taktéž nulová</i>
    (write-pattern pos          "basic5.png"))
</pre>

<img src="http://i.iinfo.cz/images/455/clisk1-3.png" class="image-207041" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 3: Textura tvořená vzorkem <strong>black</strong>. Celý obrázek
je vyplněn černou barvou.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-4.png" class="image-207042" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 4: Textura tvořená vzorkem <strong>1/2</strong>. Celý obrázek je
vyplněn šedou barvou.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-5.png" class="image-207043" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 5: Textura tvořená vzorkem <strong>[2/3 0 2/3]</strong>. Celý
obrázek je vyplněn fialovou barvou.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-6.png" class="image-207044" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 6: Textura tvořená vzorkem <strong>[x 1/2 y]</strong>. Výsledkem
je gradientní přechod.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-7.png" class="image-207045" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 7: Textura tvořená vzorkem <strong>[y y x]</strong>. Výsledkem je
gradientní přechod</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-8.png" class="image-207046" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 8: Textura tvořená vzorkem <strong>pos</strong>. Výsledkem je
opět gradientní přechod</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Složitější uživatelsky definované vzorky</h2>

<p>Podívejme se nyní na poněkud složitější vzorky definované uživatelem.
V&nbsp;těchto vzorcích se využijí některé pomocné funkce z&nbsp;knihovny
<i>Clisk</i>, například již zmíněný operátor v+ (vektorový součet), v*
(násobení prvků se stejným indexem) či vsin (aplikace funkce sinus na
jednotlivé prvky vektoru). Nejprve si musíme deklarovat pomocné symboly &ndash;
nikoli funkce!:</p>

<pre>
(def <strong>sin-wave1</strong> (v* 0.7 (vsin (v* 11 x))))
(def <strong>sin-wave2</strong> (v* 0.5 (vsin (v* 17 y))))
(def <strong>sin-wave3</strong> (v* 0.3 (vsin (v* 19 (v+ x y)))))
</pre>

<p>Dále vytvoříme pomocnou funkci nazvanou <strong>x2</strong>, která provádí
tento výpočet: <i>(x-1/2)<sup>2</sup></i>:</p>

<pre>
(defn <strong>x2</strong>
    <i>"Pomocná funkce při výpočtu vzorků."</i>
    [x]
    (v* (v- x 1/2) (v- x 1/2)))
</pre>

<p>Tyto symboly a funkce jsou použity v&nbsp;dalším programovém kódu pro
vytvoření zajímavějších textur:</p>

<pre>
(defn <strong>trickier-patterns-test</strong>
    <i>"Složitější uživatelsky definované vzorky."</i>
    []
    <i>; diagonální gradientní přechod od černé k bílé (počítá se se skaláry)</i>
    <i>; (zde ve skutečnosti není zapotřebí používat vektorové operace :-)</i>
    (write-pattern (v* (v+ x y) 1/2) "tricky1.png")
&nbsp;
    <i>; složitější gradientní přechod, zde již v prostoru RGB</i>
    (write-pattern [(v* (v+ x y) 1/2) 0 (vabs (v- x y))] "tricky2.png")
&nbsp;
    <i>; využití výše deklarovaného symbolu sin-wave1</i>
    <i>; který ovlivňuje zelenou barvovou složku</i>
    (write-pattern [x sin-wave1 2/3]                     "tricky3.png")
&nbsp;
    <i>; využití výše deklarovaných symbolů sin-wave1, sin-wave2 a sin-wave3</i>
    <i>; které ovlivňují všechny tři barvové složky</i>
    (write-pattern [sin-wave1 sin-wave2 sin-wave3]       "tricky4.png")
&nbsp;
    <i>; kruhový vzorek - vlny</i>
    (write-pattern (vsin (v* 100 (v+ (x2 x) (x2 y))))    "tricky5.png")
&nbsp;
    <i>; funkce rgb-from-hsl provádí převod z barvového prostoru HSL do RGB</i>
    (write-pattern (rgb-from-hsl (v+ [100 100 100] [x y z]))         "tricky6.png")
&nbsp;
    <i>; funkce rgb-from-hsl provádí převod z barvového prostoru HSL do RGB</i>
    (write-pattern (rgb-from-hsl (v* 3/2 [sin-wave1 sin-wave2 sin-wave3])) "tricky7.png"))
</pre>

<img src="http://i.iinfo.cz/images/455/clisk1-9.png" class="image-207047" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 9: Textura tvořená vzorkem <strong>(v* (v+ x y) 1/2)</strong>.
Výsledkem je gradientní přechod od černé barvy k&nbsp;barvě bílé.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-10.png" class="image-207048" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 10: Textura tvořená vzorkem <strong>[(v* (v+ x y) 1/2) 0 (vabs (v- x y))]</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-11.png" class="image-207049" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 11: Textura tvořená vzorkem <strong>[x sin-wave1 2/3]</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-12.png" class="image-207050" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 12: Textura tvořená vzorkem <strong>[sin-wave1 sin-wave2
sin-wave3]</strong>. Povšimněte si i modrých diagonálních pruhů.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-13.png" class="image-207051" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 13: Textura tvořená vzorkem <strong>(vsin (v* 100 (v+ (x2 x) (x2
y))))</strong>. Pixely se stejnou vzdáleností od středu obrázku mají vždy
stejnou barvu.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-14.png" class="image-207052" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 14: Textura tvořená vzorkem <strong>(rgb-from-hsl (v+ [100 100 100] [x y z]))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-15.png" class="image-207053" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 15: Textura tvořená vzorkem <strong>(rgb-from-hsl (v* 3/2 [sin-wave1 sin-wave2 sin-wave3]))</strong>.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Úplný zdrojový kód demonstračního příkladu <strong>clisktest2</strong></h2>

<p>Všechny funkce popsané v&nbsp;předchozích třech kapitolách byly
zakomponovány do dnešního druhého demonstračního příkladu nazvaného
<strong>clisktest2</strong>. Následuje výpis obou nejdůležitějších souborů
tvořících tento příklad &ndash; jak projektového souboru
<strong>project.clj</strong>, tak i vlastního &bdquo;jádra&ldquo; aplikace
tvořeného souborem <strong>core.clj</strong>.</p>

<p>Obsah souboru <strong>project.clj</strong>:</p>

<pre>
(defproject clisktest2 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[net.mikera/clisk "0.10.0"]</strong>]
  :main ^:skip-aot clisktest2.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Obsah souboru <strong>core.clj</strong>:</p>

<pre>
(ns <strong>clisktest2.core</strong>
    (:gen-class)
    (:use clisk.live))
&nbsp;
(import java.io.File)
(import javax.imageio.ImageIO)
&nbsp;
(defn <strong>write-image</strong>
    <i>"Uložení rastrového obrázku typu BufferedImage do souboru."</i>
    [image file-name]
    (ImageIO/write image "png" (File. file-name)))
&nbsp;
(defn <strong>write-pattern</strong>
    <i>"Vytvoření rastrového obrázku na základě předaného patternu."</i>
    [pattern file-name]
    (write-image (image pattern) file-name))
&nbsp;
(defn <strong>basic-patterns-test</strong>
    <i>"Jednoduché uživatelsky definované vzorky."</i>
    []
    (write-pattern black        "basic0.png")
    (write-pattern 1/2          "basic1.png")
    (write-pattern [2/3 0 2/3]  "basic2.png")
    (write-pattern [x 1/2 y]    "basic3.png")
    (write-pattern [y y x]      "basic4.png")
    (write-pattern pos          "basic5.png"))
&nbsp; 
(def sin-wave1 (v* 0.7 (vsin (v* 11 x))))
(def sin-wave2 (v* 0.5 (vsin (v* 17 y))))
(def sin-wave3 (v* 0.3 (vsin (v* 19 (v+ x y)))))
&nbsp;
(defn <strong>x2</strong>
    <i>"Pomocná funkce při výpočtu vzorků."</i>
    [x]
    (v* (v- x 1/2) (v- x 1/2)))
&nbsp;
(defn <strong>trickier-patterns-test</strong>
    <i>"Složitější uživatelsky definované vzorky."</i>
    []
    (write-pattern (v* (v+ x y) 1/2) "tricky1.png")
    (write-pattern [(v* (v+ x y) 1/2) 0 (vabs (v- x y))] "tricky2.png")
    (write-pattern [x sin-wave1 2/3]                     "tricky3.png")
    (write-pattern [sin-wave1 sin-wave2 sin-wave3]       "tricky4.png")
    (write-pattern (vsin (v* 100 (v+ (x2 x) (x2 y))))    "tricky5.png")
    (write-pattern (rgb-from-hsl (v+ [100 100 100] [x y z]))         "tricky6.png")
    (write-pattern (rgb-from-hsl (v* 3/2 [sin-wave1 sin-wave2 sin-wave3])) "tricky7.png"))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (try
        (println "Basic patterns test...")
        (basic-patterns-test)
        (println "Trickier patterns test...")
        (trickier-patterns-test)
        (println "Done")
        (catch Throwable e
            (println (.toString e)))
        (finally <i>; jistota, že program vždy korektně skončí</i>
            (System/exit 0))))
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Generátory, které jsou součástí knihovny Clisk</h2>

<p>V&nbsp;knihovně <i>Clisk</i> je již definováno poměrně velké množství
funkcí, které samy o sobě mohou sloužit pro tvorbu textury, popř.&nbsp;je možné
tyto funkce zkombinovat s&nbsp;využitím funkce <i>compose</i> popsané
v&nbsp;navazující kapitole. Mezi funkcemi určenými pro přímou i nepřímou tvorbu
textur patří již dříve popsaná funkce <strong>checker</strong>, ale například i
funkce <strong>turbulence</strong>, <strong>perlin-noise</strong> (generuje
klasický Perlinův šum), <strong>perlin-snoise</strong>, <strong>plasma</strong>
atd. Některé z&nbsp;těchto funkcí si otestujeme v&nbsp;následujícím úryvku
kódu:</p>

<pre>
(defn <strong>predefined-patterns-test-</strong>
    <i>"Otestování funkcí pro vytváření vzorků/textur 2D obrázků."</i>
    []
    (write-pattern (checker black white)             "pattern_0.png")
    (write-pattern (scale 1/4 (checker black white)) "pattern_1.png")
    (write-pattern turbulence                        "pattern_2.png")
    (write-pattern (scale 1/10 perlin-noise)         "pattern_3.png")
    (write-pattern (scale 1/40 perlin-noise)         "pattern_4.png")
    (write-pattern (scale 1/10 perlin-snoise)        "pattern_5.png")
    (write-pattern (scale 1/10 simplex-noise)        "pattern_6.png")
    (write-pattern (scale 1/10 simplex-snoise)       "pattern_7.png")
    (write-pattern (scale 1/10 plasma)               "pattern_8.png")
    (write-pattern (scale 1/10 splasma)              "pattern_9.png"))
</pre>

<p>Osobně však preferuji přepis <strong>predefined-patterns-test-</strong>
s&nbsp;využitím smyčky představované makrem <strong>doseq</strong> a pomocnou
(zde velmi užitečnou) funkcí <strong>map-indexed</strong>, pomocí níž lze
imlementovat průchod vektorem a současně i použití čítače (tato funkce vrátí
pro každý prvek vektoru <strong>patterns</strong> dvouprvkový vektor obsahující
index a původní prvek):</p>

<pre>
(defn <strong>predefined-patterns-test</strong>
    <i>"Otestování funkcí pro vytváření vzorků/textur 2D obrázků."</i>
    []
    (let [patterns [(checker black white)
                    (scale 1/4 (checker black white))
                    turbulence
                    spots
                    blotches
                    (scale 1/10 perlin-noise)
                    (scale 1/40 perlin-noise)
                    (scale 1/10 perlin-snoise)
                    (scale 1/10 simplex-noise)
                    (scale 1/10 simplex-snoise)
                    (scale 1/10 plasma)
                    (scale 1/10 splasma)]]
        <i>; postupně projít všemi prvky vektoru "patterns", vytvořit</i>
        <i>; dvouprvkový vektor [index+patter] a zavolat pro tento</i>
        <i>; vektor funkci write-pattern</i>
        (doseq [ [i pattern] (map-indexed vector patterns)]
            (write-pattern pattern (str "pattern_" i ".png")))))
</pre>

<img src="http://i.iinfo.cz/images/455/clisk1-16.png" class="image-207054" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 16: Textura tvořená vzorkem <strong>(checker black white)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-17.png" class="image-207055" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 17: Textura tvořená vzorkem <strong>(scale 1/4 (checker black white))</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-18.png" class="image-207056" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 18: Textura tvořená vzorkem <strong>turbulence</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-19.png" class="image-207057" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 19: Textura tvořená vzorkem <strong>spots</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-20.png" class="image-207058" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 20: Textura tvořená vzorkem <strong>blotches</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-21.png" class="image-207059" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 21: Textura tvořená vzorkem <strong>(scale 1/10 perlin-noise)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-22.png" class="image-207060" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 22: Textura tvořená vzorkem <strong>(scale 1/40 perlin-noise)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-23.png" class="image-207061" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 23: Textura tvořená vzorkem <strong>(scale 1/10 perlin-snoise)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-24.png" class="image-207062" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 24: Textura tvořená vzorkem <strong>(scale 1/10 simplex-noise)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-25.png" class="image-207063" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 25: Textura tvořená vzorkem <strong>(scale 1/10 simplex-snoise)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-26.png" class="image-207064" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 26: Textura tvořená vzorkem <strong>(scale 1/10 plasma)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-27.png" class="image-207065" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 27: Textura tvořená vzorkem <strong>(scale 1/10 splasma)</strong>.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Funkce <strong>compose</strong> a její použití při tvorbě textur</h2>

<p>Při tvorbě textur může být užitečná i funkce <strong>compose</strong>, která
vypadá následovně:</p>

<pre>
(defn <strong>compose</strong>
  <i>"Composes two or more vector functions"</i>
  ([f g]
    (warp g f))
  ([f g &amp; more]
    (compose f (apply compose g more))))
</pre>

<p>Pokud jsou této funkci předány další dvě funkce, vyhodnotí se <strong>(warp
g f)</strong>, kde <strong>warp</strong> je pomocná funkce určená pro
manipulaci s&nbsp;datovou strukturou představující &bdquo;předpis&ldquo; pro
generování textury. V&nbsp;praxi se funkce <strong>compose</strong> může použít
následujícím způsobem pro kompozici dvou funkcí pro generování textury:</p>

<pre>
(defn <strong>composited-patterns-test</strong>
    <i>"Otestování funkce compose."</i>
    []
    (let [patterns [(compose turbulence spots)
                    (compose turbulence plasma)
                    (compose (scale 1/40 (checker black white)) plasma)
                    (compose (scale 1/40 (checker black white)) turbulence)]]
        <i>; postupně projít všemi prvky vektoru "patterns", vytvořit</i>
        <i>; dvouprvkový vektor [index+patter] a zavolat pro tento</i>
        <i>; vektor funkci write-pattern</i>
        (doseq [ [i pattern] (map-indexed vector patterns)]
            (write-pattern pattern (str "composite_" i ".png")))))
</pre>

<img src="http://i.iinfo.cz/images/455/clisk1-28.png" class="image-207066" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 28: Vzorek získaný výrazem <strong>(compose turbulence spots)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-29.png" class="image-207067" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 29: Vzorek získaný výrazem <strong>(compose turbulence plasma)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-30.png" class="image-207068" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 30: Vzorek získaný výrazem <strong>(compose (scale 1/40 (checker black white)) plasma)</strong>.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-31.png" class="image-207069" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 31: Vzorek získaný výrazem <strong>(compose (scale 1/40 (checker black white)) turbulence)</strong>.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vnořené vzorky, funkce <strong>offset</strong>, <strong>rotate</strong> a <strong>scale</strong></h2>

<p>Posledními dvěma vlastnostmi knihovny <i>Clisk</i>, s&nbsp;nimiž se
v&nbsp;dnešním článku seznámíme, jsou funkce <strong>offset</strong>,
<strong>rotate</strong>, <strong>scale</strong> a taktéž možnost tvorby
takzvaných vnořených vzorků (<i>nested patterns</i>). Tuto možnost si můžeme
nejlépe ukázat na textuře šachovnice, protože namísto dvoubarevných políček
může být každé políčko (například původně každé bílé políčko šachovnice)
nahrazeno jiným vzorkem. Vliv funkcí <strong>offset</strong>,
<strong>rotate</strong> a <strong>scale</strong> je zřejmý: slouží
k&nbsp;posunu vzorku, jeho rotaci či změně měřítka (a to samozřejmě bez ztráty
kvality, neboť tyto transformace jsou prováděny během výpočtu a nikoli na
výsledné bitmapě). Vliv těchto funkcí je možné skládat, protože interně se
textura podrobuje libovolné afinní transformaci. Podívejme se na následující
příklady, z&nbsp;nichž bude patrný jak způsob tvorby vnořených vzorků, tak i
způsob použití afinních transformací:</p>

<pre>
(defn <strong>nested-patterns-test</strong>
    []
    (let [patterns [(checker black white)
                    (checker black (scale 1/4 (checker blue yellow)))
                    (checker (scale 1/4 (checker white black)) (scale 1/4 (checker blue yellow)))
                    (checker (rotate 45 (scale 1/4 (checker white black))) (scale 1/4 (checker blue yellow)))
                    (rotate 20 (checker (rotate 20 (scale 1/4 (checker white black)))
                                        (rotate 40 (scale 1/4 (checker blue yellow)))))
                    ]]
        <i>; postupně projít všemi prvky vektoru "patterns", vytvořit</i>
        <i>; dvouprvkový vektor [index+patter] a zavolat pro tento</i>
        <i>; vektor funkci write-pattern</i>
        (doseq [ [i pattern] (map-indexed vector patterns)]
            (write-pattern pattern (str "nested_" i ".png")))))
</pre>

<img src="http://i.iinfo.cz/images/455/clisk1-32.png" class="image-207070" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 32: Vzorek získaný výrazem <strong>(checker black
white)</strong>. Výsledkem je nám již známá šachovnice.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-33.png" class="image-207071" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 33: Vzorek získaný výrazem <strong>(checker black (scale 1/4
(checker blue yellow)))</strong>. Vliv funkce <strong>scale</strong> je zřejmý
&ndash; došlo ke zmenšení rozměrů vzorku na 1/4 původní hodnoty. Navíc jsou
původně bílá políčka nahrazena dalším vzorkem zmenšeným právě o onu
1/4.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-34.png" class="image-207072" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 34: Vzorek získaný výrazem <strong>(checker (scale 1/4 (checker
white black)) (scale 1/4 (checker blue yellow)))</strong> Variace na předchozí
příklad, zde ovšem došlo k&nbsp;náhradě jak bílých, tak i černých políček za
jiné vzorky.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-35.png" class="image-207073" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 35: Vzorek získaný výrazem <strong>(checker (rotate 45 (scale 1/4
(checker white black))) (scale 1/4 (checker blue yellow)))</strong>.
&bdquo;Vnitřní&ldquo; vzorek je otočen o 45 stupňů.</i></p>

<img src="http://i.iinfo.cz/images/455/clisk1-36.png" class="image-207074" width="256" height="256" alt="&#160;" />
<p><i>Obrázek 36: Vzorek získaný výrazem <strong>(rotate 20 (checker (rotate 20 (scale 1/4 (checker white black)))
                                        (rotate 40 (scale 1/4 (checker blue yellow)))))</strong>.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Úplný zdrojový kód demonstračního příkladu <strong>clisktest3</strong></h2>

<p>Všechny funkce popsané v&nbsp;předchozích třech kapitolách jsou součástí
dnešního třetího a současně i posledního demonstračního příkladu nazvaného
jednoduše <strong>clisktest3</strong>. Opět si uvedeme výpis obou
nejdůležitějších souborů, z&nbsp;nichž se tento příklad skládá: projektového
souboru i &bdquo;jádra&ldquo; aplikace.</p>

<p>Obsah souboru <strong>project.clj</strong>:</p>

<pre>
(defproject clisktest2 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[net.mikera/clisk "0.10.0"]</strong>]
  :main ^:skip-aot clisktest3.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Obsah souboru <strong>core.clj</strong>:</p>

<pre>
(ns <strong>clisktest3.core</strong>
    (:gen-class)
    (:use clisk.live))
&nbsp;
(import java.io.File)
(import javax.imageio.ImageIO)
&nbsp;
(defn <strong>write-image</strong>
    <i>"Uložení rastrového obrázku typu BufferedImage do souboru."</i>
    [image file-name]
    (ImageIO/write image "png" (File. file-name)))
&nbsp;
(defn <strong>write-pattern</strong>
    <i>"Vytvoření rastrového obrázku na základě předaného patternu."</i>
    [pattern file-name]
    (write-image (image pattern) file-name))
&nbsp;
(defn <strong>predefined-patterns-test-</strong>
    <i>"Otestování funkcí pro vytváření vzorků/textur 2D obrázků."</i>
    []
    (write-pattern (checker black white)             "pattern_0.png")
    (write-pattern (scale 1/4 (checker black white)) "pattern_1.png")
    (write-pattern turbulence                        "pattern_2.png")
    (write-pattern (scale 1/10 perlin-noise)         "pattern_3.png")
    (write-pattern (scale 1/40 perlin-noise)         "pattern_4.png")
    (write-pattern (scale 1/10 perlin-snoise)        "pattern_5.png")
    (write-pattern (scale 1/10 simplex-noise)        "pattern_6.png")
    (write-pattern (scale 1/10 simplex-snoise)       "pattern_7.png")
    (write-pattern (scale 1/10 plasma)               "pattern_8.png")
    (write-pattern (scale 1/10 splasma)              "pattern_9.png"))
&nbsp;
(defn <strong>predefined-patterns-test</strong>
    <i>"Otestování funkcí pro vytváření vzorků/textur 2D obrázků."</i>
    []
    (let [patterns [(checker black white)
                    (scale 1/4 (checker black white))
                    turbulence
                    spots
                    blotches
                    (scale 1/10 perlin-noise)
                    (scale 1/40 perlin-noise)
                    (scale 1/10 perlin-snoise)
                    (scale 1/10 simplex-noise)
                    (scale 1/10 simplex-snoise)
                    (scale 1/10 plasma)
                    (scale 1/10 splasma)]]
        <i>; postupně projít všemi prvky vektoru "patterns", vytvořit</i>
        <i>; dvouprvkový vektor [index+patter] a zavolat pro tento</i>
        <i>; vektor funkci write-pattern</i>
        (doseq [ [i pattern] (map-indexed vector patterns)]
            (write-pattern pattern (str "pattern_" i ".png")))))
&nbsp;
(defn <strong>composited-patterns-test</strong>
    <i>"Otestování funkce compose."</i>
    []
    (let [patterns [(compose turbulence spots)
                    (compose turbulence plasma)
                    (compose (scale 1/40 (checker black white)) plasma)
                    (compose (scale 1/40 (checker black white)) turbulence)]]
        <i>; postupně projít všemi prvky vektoru "patterns", vytvořit</i>
        <i>; dvouprvkový vektor [index+patter] a zavolat pro tento</i>
        <i>; vektor funkci write-pattern</i>
        (doseq [ [i pattern] (map-indexed vector patterns)]
            (write-pattern pattern (str "composite_" i ".png")))))
&nbsp;
(defn <strong>nested-patterns-test</strong>
    []
    (let [patterns [(checker black white)
                    (checker black (scale 1/4 (checker blue yellow)))
                    (checker (scale 1/4 (checker white black)) (scale 1/4 (checker blue yellow)))
                    (checker (rotate 45 (scale 1/4 (checker white black))) (scale 1/4 (checker blue yellow)))
                    (rotate 20 (checker (rotate 20 (scale 1/4 (checker white black)))
                                        (rotate 40 (scale 1/4 (checker blue yellow)))))
                    ]]
        <i>; postupně projít všemi prvky vektoru "patterns", vytvořit</i>
        <i>; dvouprvkový vektor [index+patter] a zavolat pro tento</i>
        <i>; vektor funkci write-pattern</i>
        (doseq [ [i pattern] (map-indexed vector patterns)]
            (write-pattern pattern (str "nested_" i ".png")))))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (try
        (println "Predefined patterns test...")
        <i>;(predefined-patterns-test-)</i>
        (predefined-patterns-test)
        (println "Composited patterns test...")
        (composited-patterns-test)
        (println "Nested patterns test...")
        (nested-patterns-test)
        (catch Throwable e
            (println (.toString e)))
        (finally <i>; jistota, že program vždy korektně skončí</i>
            (System/exit 0))))
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny tři dnes popsané demonstrační příklady byly, podobně jako
v&nbsp;předchozích částech tohoto seriálu, uloženy do GIT repositáře dostupného
na adrese <a
href="https://github.com/tisnik/clojure-examples">https://github.com/tisnik/clojure-examples</a>.
V&nbsp;tabulce zobrazené pod tímto odstavcem naleznete na jednotlivé příklady
přímé odkazy:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Github</th></tr>
<tr><td>1</td><td>clisktest1</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/clisktest1">https://github.com/tisnik/clojure-examples/tree/master/clisktest1</a></td></tr>
<tr><td>2</td><td>clisktest2</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/clisktest2">https://github.com/tisnik/clojure-examples/tree/master/clisktest2</a></td></tr>
<tr><td>3</td><td>clisktest3</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/clisktest3">https://github.com/tisnik/clojure-examples/tree/master/clisktest3</a></td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na předchozí části seriálu</h2>

<ol>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

</ol>



<p><a name="k15"></a></p>
<h2 id="k15">15. Odkazy na Internetu</h2>

<ol>

<li>Clisk<br />
<a href="https://github.com/mikera/clisk">https://github.com/mikera/clisk</a>
</li>

<li>clojars: net.mikera/clisk<br />
<a href="https://clojars.org/net.mikera/clisk">https://clojars.org/net.mikera/clisk</a>
</li>

<li>clojure.inspector<br />
<a href="http://clojure.github.io/clojure/clojure.inspector-api.html">http://clojure.github.io/clojure/clojure.inspector-api.html</a>
</li>

<li>Clisk: wiki<br />
<a href="https://github.com/mikera/clisk/wiki">https://github.com/mikera/clisk/wiki</a>
</li>

<li>Dokumentace vygenerovaná pro knihovnu core.matrix<br />
<a href="https://cloojure.github.io/doc/core.matrix/index.html">https://cloojure.github.io/doc/core.matrix/index.html</a>
</li>

<li>Size and Dimensionality<br />
<a href="https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion">https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion</a>
</li>

<li>Towards core.matrix for Clojure?<br />
<a href="https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/">https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/</a>
</li>

<li>The Clojure Toolbox<br />
<a href="http://www.clojure-toolbox.com/">http://www.clojure-toolbox.com/</a>
</li>

<li>Neanderthal<br />
<a href="http://neanderthal.uncomplicate.org/">http://neanderthal.uncomplicate.org/</a>
</li>

<li>Hello world project<br />
<a href="https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj">https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj</a>
</li>

<li>vectorz-clj<br />
<a href="https://github.com/mikera/vectorz-clj">https://github.com/mikera/vectorz-clj</a>
</li>

<li>vectorz - Examples<br />
<a href="https://github.com/mikera/vectorz-clj/wiki/Examples">https://github.com/mikera/vectorz-clj/wiki/Examples</a>
</li>

<li>gloss<br />
<a href="https://github.com/ztellman/gloss">https://github.com/ztellman/gloss</a>
</li>

<li>HTTP client/server for Clojure<br />
<a href="http://www.http-kit.org/">http://www.http-kit.org/</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>java.jdbc API Reference<br />
<a href="https://clojure.github.io/java.jdbc/">https://clojure.github.io/java.jdbc/</a>
</li>

<li>Hiccup<br />
<a href="https://github.com/weavejester/hiccup">https://github.com/weavejester/hiccup</a>
</li>

<li>Clojure Ring na GitHubu<br />
<a href="https://github.com/ring-clojure/ring">https://github.com/ring-clojure/ring</a>
</li>

<li>A brief overview of the Clojure web stack<br />
<a href="https://brehaut.net/blog/2011/ring_introduction">https://brehaut.net/blog/2011/ring_introduction</a>
</li>

<li>Getting Started with Ring<br />
<a href="http://www.learningclojure.com/2013/01/getting-started-with-ring.html">http://www.learningclojure.com/2013/01/getting-started-with-ring.html</a>
</li>

<li>Getting Started with Ring and Compojure - Clojure Web Programming<br />
<a href="http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html">http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II<br />
<a href="2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

