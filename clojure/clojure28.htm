<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Nástroj Leiningen a programovací jazyk Clojure: tvorba vlastních knihoven pro veřejný repositář</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Nástroj Leiningen a programovací jazyk Clojure: tvorba vlastních knihoven pro veřejný repositář</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Při popisu nástroje Leiningen, který se používá pro tvorbu a správu projektů vytvořených v programovacím jazyce Clojure, jsme se zmínili o způsobu deklarace knihoven, na nichž projekty závisí. S využitím Leiningenu není těžké vytvořit si i vlastní plnohodnotnou knihovnu a nabídnout ji k dispozici ostatním programátorům. Právě touto problematikou se budeme zabývat dnes.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Nástroj Leiningen a programovací jazyk Clojure: tvorba vlastních knihoven pro veřejný repositář</a></p>
<p><a href="#k02">2. Postup při vytvoření nové knihovny</a></p>
<p><a href="#k03">3. Vytvoření kostry nové knihovny</a></p>
<p><a href="#k04">4. Úprava projektového souboru a naprogramování vlastního těla knihovny</a></p>
<p><a href="#k05">5. Uložení knihovny do veřejného repositáře</a></p>
<p><a href="#k06">6. Vytvoření nového projektu, který bude knihovnu používat</a></p>
<p><a href="#k07">7. Načtení všech závislých knihoven pro nově vytvořený projekt</a></p>
<p><a href="#k08">8. Výpis CLASSPATH používaných projektem</a></p>
<p><a href="#k09">9. Import knihovny a zavolání funkce z&nbsp;této knihovny</a></p>
<p><a href="#k10">10. Repositář s&nbsp;dnešními demonstračními příklady</a></p>
<p><a href="#k11">11. Odkazy na předchozí části tohoto seriálu</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Nástroj Leiningen a programovací jazyk Clojure: tvorba vlastních knihoven pro veřejný repositář</h2>

<p>Již v&nbsp;prvním článku série o programovacím jazyku <i>Clojure</i> a
nástroji <i>Leiningen</i> jsme si popsali základní možnosti <i>Leiningenu</i>.
Připomeňme si, že <i>Leiningen</i> se typicky používá pro vytváření nových
projektů na základě předem připravené šablony, pro automatické stahování všech
potřebných knihoven (i jejich závislostí), spouštění projektů, spouštění testů
a v&nbsp;neposlední řadě taktéž pro spuštění interaktivní smyčky REPL, která
vývojářům nabízí více možnosti, než standardní implementace REPLu dostupná
přímo v&nbsp;<i>Clojure</i> (mezi přidané vlastnosti patří zejména automatické
nastavení cest ke knihovnám apod.).</p>

<p><i>Leiningen</i> je multiplatformním produktem, což znamená, že i ty
vývojové týmy, jejichž členové pracují s&nbsp;různými operačními systémy, mohou
možnosti nabízené <i>Leiningenem</i> využít. K&nbsp;<i>Leiningenu</i> lze
v&nbsp;případě potřeby připojovat i další přídavné moduly (<i>plugins</i>),
takže například existuje podpora pro spuštění webové aplikace takovým způsobem,
že se změny provedené ve zdrojových kódech ihned promítnou do běžící aplikace
bez nutnosti jejího restartu, což samozřejmě umožňuje rychlejší vývoj i
testování.</p>

<p>Mezi již popsané možnosti nástroje <i>Leiningen</i> patří zejména:</p>

<ol>

<li>Vytvoření nového projektu na základě vybrané a předem připravené šablony.
K&nbsp;dispozici jsou šablony běžné aplikace (doplněné o jednotkové testy,
resp.&nbsp;přesněji řečeno o prázdnou kostru pro jednotkové testy), přídavného
modulu pro samotný <i>Leiningen</i> atd. Základním příkazem pro vytvoření
nového projektu je <strong>lein new</strong>, pro novou aplikaci pak
<strong>lein new app <i>název</i></strong>.</li>

<li>Automatické stažení všech knihoven a jejich závislostí na základě
konfigurace zapsané do souboru <strong>project.clj</strong>. Tuto funkci
zajistí příkaz <strong>lein deps</strong>. Knihovny, na nichž projekt závisí,
se ukládají do adresáře <strong>~/.m2</strong>, takže jsou dostupné i dalším
aplikacím (<i>Leiningen</i> je kompatibilní s&nbsp;Mavenem).</li>

<li>Spuštění projektu s&nbsp;možností předání parametrů příkazového řádku.
Příkaz je jednoduchý: <strong>lein run</strong>. Spouští se ta funkce, která je
určena v&nbsp;projektovém souboru <strong>project.clj</strong>, typicky se
jedná o funkci nazvanou <strong>main</strong> z&nbsp;modulu (jmenného prostoru)
<strong>název_aplikace/core</strong>.</li>

<li>Spuštění jednotkových testů, které mohou být vytvořeny společně
s&nbsp;projektem (kostra jednoho testu je připravena automaticky). Snadno
uhádnutelný příkaz, který jednotkové testy spustí, se jmenuje <strong>lein
test</strong>.</li>

<li>Provedení relativně rychlé kontroly syntaxe zdrojových kódů i kontroly
existence volaných metod. Tuto činnost zajistí příkaz <strong>lein
check</strong>.</li>

<li>Lokální instalace projektu do specifikovaného adresáře (<strong>lein
install</strong>).</li>

<li>Příprava Java archivu (souboru s&nbsp;koncovkou .jar) takovým způsobem, aby
bylo možné aplikaci nasadit i na jiném počítači, například na aplikační server.
V&nbsp;rámci přípravy archivu se provádí překlad vybraných modulů do Javovského
bajtkódu (<strong>lein jar</strong>).</li>

<li>Příprava Java archivu obsahujícího i všechny závislé knihovny včetně
samotného <i>Clojure</i>. Takto vytvořený &bdquo;uberjar&ldquo; je posléze
možné nasadit na jakémkoli počítači vybaveném pouze JRE (běhovým prostředím
jazyka Java). Tuto činnost zajistí příkaz <strong>lein uberjar</strong>.</li>

<li>Spuštění smyčky REPL s&nbsp;nastavením cest ke všem potřebným knihovnám a
modulům. Souběžně se otevře port, přes který je možné se smyčkou REPL
komunikovat například z&nbsp;integrovaného vývojového prostředí, z&nbsp;Vimu
apod. (<strong>lein repl</strong>).</li>

<li>Každý příkaz <i>Leiningenu</i> je v&nbsp;rozumné míře popsán
v&nbsp;nápovědě (<strong>lein help příkaz</strong>).</li>

</ol>

<p>Nyní si k&nbsp;těmto již popsaným možnostem přidáme další funkci nástroje
<i>Leiningen</i>. Ukážeme si, jakým způsobem je možné vytvořit novou knihovnu a
uložit tuto knihovnu do repositáře dostupného na serveru <i>Clojars</i>.
Následně bude tato velmi jednoduchá knihovna sestávající z&nbsp;jediné funkce,
použita v&nbsp;demonstračním příkladu, kde proběhne její stažení, instalace do
adresáře <strong>~/.m2</strong>, import a následné zavolání funkce dostupné
z&nbsp;právě nainstalované knihovny.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Postup při vytvoření nové knihovny</h2>

<p>Vytvoření nové knihovny vyvinuté v&nbsp;programovacím jazyce Clojure a
jednoduše dostupné dalším vývojářům, se skládá pouze z&nbsp;několika relativně
snadno pochopitelných kroků. K&nbsp;jejich provedení musí být nainstalován
nástroj <i>Leiningen</i>:</p>

<ol>

<li>Nejprve je nutné projít registrací uživatele (vývojáře) na stránce <a
href="https://clojars.org/register">https://clojars.org/register</a>. Jméno
uživatele a heslo bude použito později při nahrávání knihovny na server
<i>Clojars</i>. Pro jméno platí jistá omezení vyplývající z&nbsp;toho, že ze
jména uživatele bude odvozeno jméno balíčku ve tvaru
<strong>org.clojars.<i>jméno_uživatele</i></strong>; ideálně se omezte na
použití malých písmen z&nbsp;tabulky ASCII.</li>

<li>Vytvoření projektu představujícího knihovnu. V&nbsp;projektu musí být
uvedeno správné jméno balíčku ve tvaru
<strong>org.clojars.<i>jméno_uživatele</i></strong> (protože projekt se
prozatím nestane oficiálním projektem). Vzhledem k&nbsp;tomu, že se
v&nbsp;případě knihovny nejedná o spustitelnou aplikaci, není zapotřebí
v&nbsp;projektovém souboru specifikovat jméno vstupní funkce (main).</li>

<li>Implementace celé knihovny podle požadavků vývojáře. Žádná zvláštní omezení
se zde nekladou. Knihovna by měla obsahovat i jednotkové testy a dokumentaci,
není to však striktně vyžadováno.</li>

<li>Zveřejnění celé knihovny s&nbsp;využitím příkazu <strong>lein deploy
clojars</strong>. Knihovna (popř.&nbsp;její nová verze) se prakticky ihned
objeví v&nbsp;seznamu na serveru <a
href="https://clojars.org/">https://clojars.org/</a>.</li>

<li>Posléze je možné vytvořit i oficiální variantu knihovny, která bude
podepsaná a bude mít lépe zapamatovatelné jméno. Tuto variantu si stručně
popíšeme příště.</li>

</ol>

<p>Všechny tyto kroky budou podrobněji popsány v&nbsp;navazujících
kapitolách.</p>

<a href="http://www.root.cz/obrazek/227221/"><img src="http://i.iinfo.cz/images/258/clj1-prev.png" class="image-227221" alt="&#160;" height="156" width="370" /></a>
<p><i>Obrázek 1: Registrace nového uživatele na serveru Clojars.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vytvoření kostry nové knihovny</h2>

<p>Základním krokem k&nbsp;plnohodnotné knihovně je vytvoření její kostry.
Nejedná se o nic složitého, protože využijeme již známý a v&nbsp;tomto seriálu
několikrát popsaný příkaz <strong>lein new app</strong>. Naši testovací
knihovnu pojmenujeme <strong>clj-hello</strong>, a to z&nbsp;toho důvodu, že
v&nbsp;ní bude implementována jediná funkce pro výpis zprávy &bdquo;Hello
world&ldquo; na standardní výstup (naše nároky tedy nejsou příliš vysoké:)
Vytvoření kostry knihovny <strong>clj-hello</strong> se provede následujícím
způsobem:</p>

<pre>
<strong>lein new app clj-hello</strong>
&nbsp;
Generating a project called test-hello based on the 'app' template.
</pre>

<p>Podle předpokladů se vygeneruje adresářová struktura představující kostru
aplikace:</p>

<pre>
.
├── doc
│   └── intro.md
├── LICENSE
├── project.clj
├── README.md
├── resources
├── src
│   └── clj_hello
│       └── core.clj
├── test
│   └── clj_hello
│       └── core_test.clj
└── tree
</pre>

<p>Povšimněte si důležité maličkosti: zatímco v&nbsp;jazyce Clojure bude jmenný
prostor nazvaný <strong>clj-hello</strong>, jména souborů a adresářů tomu
neodpovídají, protože mají tvar <strong>clj_hello</strong>. Tato (v&nbsp;praxi
poměrně otravná) konvence byla do jazyka <i>Clojure</i> a nástroje
<i>Leiningen</i> zavedena kvůli plné kompatibilitě s&nbsp;programovacím jazykem
Java.</p>

<p>Pro úplnost se ještě podívejme na obsah souboru
<strong>project.clj</strong>, který obsahuje konfiguraci celé aplikace:</p>

<pre>
(defproject clj-hello "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]]
  :main ^:skip-aot clj-hello.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Úprava projektového souboru a naprogramování vlastního těla knihovny</h2>

<p>Výše uvedený tvar projektového souboru <strong>project.clj</strong> byl
nástrojem <i>Leiningen</i> vytvořen pro potřebu běžné aplikace a nikoli
knihovny, což mj.&nbsp;znamená, že se zde nachází informace o jmenném prostoru
obsahujícího funkci, která se má spustit v&nbsp;průběhu inicializace aplikace.
Tuto část můžeme z&nbsp;projektového souboru zcela odstranit. Navíc se původně
projekt jmenuje pouze <strong>clj-hello</strong>, ovšem toto jméno není možné
použít při nahrávání knihovny na server Clojars &ndash; je před něj nutné
přidat i jméno balíčku ve tvaru
<strong>org.clojars.<i>jméno_uživatele</i></strong>. Vzhledem k&nbsp;tomu, že
autor článku se zaregistroval pod jménem &bdquo;tisnik&ldquo;, bude mít úplné
jméno projektu tvar <strong>org.clojars.tisnik/clj-hello</strong> a soubor
s&nbsp;konfigurací projektu bude vypadat následovně:</p>

<pre>
(defproject <strong>org.clojars.tisnik/clj-hello</strong> "0.1.0-SNAPSHOT"
  :description "Yet another hello world example :-)"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]])
</pre>

<p>Druhou úpravou je odstranění souboru <strong>src/clj_hello/core.clj</strong>
a nahrazení tohoto souboru novým zdrojovým kódem uloženým pod lepším
(obvyklejším) jménem <strong>src/clj_hello/clj_hello.clj</strong>. Tento nový
zdrojový soubor bude obsahovat deklaraci jmenného prostoru a taktéž funkci se
jménem <strong>say-hello</strong>. Tato funkce představuje veškerou
funkcionalitu právě vytvořené knihovny:</p>

<pre>
(ns clj-hello.clj-hello)
&nbsp;
(defn say-hello
    []
    (println "Hello world!"))
</pre>

<p>Knihovna připravená pro &bdquo;deploying&ldquo; na server Clojars, má
následující adresářovou strukturu. Nejdůležitější soubory jsou zvýrazněny:</p>

<pre>
.
├── doc
│   └── intro.md
├── LICENSE
├── <strong>project.clj</strong>
├── README.md
├── resources
├── src
│   └── clj_hello
│       └── <strong>clj_hello.clj</strong>
├── test
│   └── clj_hello
│       └── core_test.clj
└── tree
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Uložení knihovny do veřejného repositáře</h2>

<p>Dalším krokem je uložení právě vytvořené nové knihovny do veřejného
repositáře umístěného na serveru Clojars. Tuto akci zajistí nástroj
<i>Leiningen</i> poloautomaticky; pouze postačuje zadat následující příkaz:</p>

<pre>
<strong>lein deploy clojars</strong>
</pre>

<p>Po zadání tohoto příkazu se provede kontrola konzistence knihovny, zjistí
se, zda projektový soubor <strong>project.clj</strong> obsahuje veškeré
potřebné údaje, naváže se spojení se serverem Clojars a nahraje se na něj
knihovna zabalená do Java archivu (soubory s&nbsp;příponou .jar) doplněná o
další metadata (soubory .pom a maven-metadata.xml). Vzhledem k&nbsp;tomu, že
jsem do konfiguračního souboru neuložil jméno a heslo potřebné pro připojení
k&nbsp;serveru Clojars, je nutné tyto dva údaje vyplnit (heslo se samozřejmě
při zadávání nezobrazuje):</p>

<pre>
WARNING: please set :url in project.clj.
No credentials found for clojars
See `lein help deploying` for how to configure credentials to avoid prompts.
Username: <strong>tisnik</strong>
Password: <strong>nbusr123</strong>
Wrote /home/tester/temp/clj-hello/pom.xml
Created /home/tester/temp/clj-hello/target/clj-hello-0.1.0-SNAPSHOT.jar
Could not find metadata org.clojars.tisnik:clj-hello:0.1.0-SNAPSHOT/maven-metadata.xml in clojars (https://clojars.org/repo/)
Sending org/clojars/tisnik/clj-hello/0.1.0-SNAPSHOT/clj-hello-0.1.0-20151107.211149-1.pom (3k)
    to https://clojars.org/repo/
Sending org/clojars/tisnik/clj-hello/0.1.0-SNAPSHOT/clj-hello-0.1.0-20151107.211149-1.jar (8k)
    to https://clojars.org/repo/
Could not find metadata org.clojars.tisnik:clj-hello/maven-metadata.xml in clojars (https://clojars.org/repo/)
Sending org/clojars/tisnik/clj-hello/0.1.0-SNAPSHOT/maven-metadata.xml (1k)
    to https://clojars.org/repo/
Sending org/clojars/tisnik/clj-hello/maven-metadata.xml (1k)
    to https://clojars.org/repo/
</pre>

<p>Vše pro jistotu zkontrolujeme přímo na webovém rozhraní serveru Clojars:</p>

<a href="http://www.root.cz/obrazek/227222/"><img src="http://i.iinfo.cz/images/336/clj2-prev.png" class="image-227222" alt="&#160;" height="156" width="370" /></a>
<p><i>Obrázek 2: Knihovna se skutečně objevila na stránkách serveru Clojars.</i></p>

<a href="http://www.root.cz/obrazek/227223/"><img src="http://i.iinfo.cz/images/406/clj3-prev.png" class="image-227223" alt="&#160;" height="170" width="370" /></a>
<p><i>Obrázek 3: Zobrazení podrobností o knihovně clj-hello.</i></p>

<a href="http://www.root.cz/obrazek/227224/"><img src="http://i.iinfo.cz/images/337/clj4-prev.png" class="image-227224" alt="&#160;" height="171" width="370" /></a>
<p><i>Obrázek 4: Do skupiny je možné přidávat i další uživatele.</i></p>

<p>Současně se v&nbsp;kořenovém adresáři projektu vytvoří soubor nazvaný
<strong>pom.xml</strong>. Tento soubor bude při dalších úpravách knihovny
automaticky přepisován, takže ho ani nemá cenu ukládat do repositáře. Ostatně
pokud používáte pro správu verzí Git či Mercurial, je tato funkcionalita
zajištěna automaticky, a to díky konfiguračním souborům
<strong>.gitignore</strong> a <strong>.hgignore</strong>, které vytvořil
nástroj <i>Leiningen</i>.</p>

<p>Obsah souboru <strong>pom.xml</strong> by měl být zhruba následující:</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.clojars.tisnik&lt;/groupId&gt;
  &lt;artifactId&gt;clj-hello&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;0.1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;clj-hello&lt;/name&gt;
  &lt;description&gt;Yet another hello world example :-)&lt;/description&gt;
  &lt;url&gt;http://example.com/FIXME&lt;/url&gt;
  &lt;licenses&gt;
    &lt;license&gt;
      &lt;name&gt;Eclipse Public License&lt;/name&gt;
      &lt;url&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/url&gt;
    &lt;/license&gt;
  &lt;/licenses&gt;
  &lt;build&gt;
    &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;
    &lt;testSourceDirectory&gt;test&lt;/testSourceDirectory&gt;
    &lt;resources&gt;
      &lt;resource&gt;
        &lt;directory&gt;resources&lt;/directory&gt;
      &lt;/resource&gt;
    &lt;/resources&gt;
    &lt;testResources&gt;
      &lt;testResource&gt;
        &lt;directory&gt;dev-resources&lt;/directory&gt;
      &lt;/testResource&gt;
      &lt;testResource&gt;
        &lt;directory&gt;resources&lt;/directory&gt;
      &lt;/testResource&gt;
    &lt;/testResources&gt;
    &lt;directory&gt;target&lt;/directory&gt;
    &lt;outputDirectory&gt;target/classes&lt;/outputDirectory&gt;
    &lt;plugins/&gt;
  &lt;/build&gt;
  &lt;repositories&gt;
    &lt;repository&gt;
      &lt;id&gt;central&lt;/id&gt;
      &lt;url&gt;https://repo1.maven.org/maven2/&lt;/url&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/snapshots&gt;
      &lt;releases&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;/releases&gt;
    &lt;/repository&gt;
    &lt;repository&gt;
      &lt;id&gt;clojars&lt;/id&gt;
      &lt;url&gt;https://clojars.org/repo/&lt;/url&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;/snapshots&gt;
      &lt;releases&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;/releases&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.clojure&lt;/groupId&gt;
      &lt;artifactId&gt;clojure&lt;/artifactId&gt;
      &lt;version&gt;1.6.0&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.clojure&lt;/groupId&gt;
      &lt;artifactId&gt;tools.nrepl&lt;/artifactId&gt;
      &lt;version&gt;0.2.6&lt;/version&gt;
      &lt;exclusions&gt;
        &lt;exclusion&gt;
          &lt;groupId&gt;org.clojure&lt;/groupId&gt;
          &lt;artifactId&gt;clojure&lt;/artifactId&gt;
        &lt;/exclusion&gt;
      &lt;/exclusions&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;clojure-complete&lt;/groupId&gt;
      &lt;artifactId&gt;clojure-complete&lt;/artifactId&gt;
      &lt;version&gt;0.2.3&lt;/version&gt;
      &lt;exclusions&gt;
        &lt;exclusion&gt;
          &lt;groupId&gt;org.clojure&lt;/groupId&gt;
          &lt;artifactId&gt;clojure&lt;/artifactId&gt;
        &lt;/exclusion&gt;
      &lt;/exclusions&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
&nbsp;
&lt;!-- This file was autogenerated by Leiningen.
  Please do not edit it directly; instead edit project.clj and regenerate it.
  It should not be considered canonical data. For more information see
  https://github.com/technomancy/leiningen --&gt;
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vytvoření nového projektu, který bude knihovnu používat</h2>

<p>Použití knihovny <strong>org.clojars.tisnik/clj-hello</strong>, která již
byla na portálu Clojars úspěšně zaregistrována, je mnohem snazší, než její
vytvoření. Ukážeme si to na velmi krátkém demonstračním příkladu pojmenovaném
&bdquo;test-hello&ldquo;. Kostra tohoto příkladu vznikne příkazem:</p>

<pre>
<strong>lein new app test-hello</strong>
&nbsp;
Generating a project called test-hello based on the 'app' template.
</pre>

<p>Do souboru <strong>project.clj</strong>, který obsahuje konfiguraci
projektu, musíme přidat název knihovny (knihoven), na nichž projekt závisí.
V&nbsp;našem případě se jedná o zvýrazněný řádek, u něhož si povšimněte jak
uvedení celého jména balíčku s&nbsp;knihovnou, tak i její verze (viz předchozí
kapitoly a příslušné screenshoty):</p>

<pre>
(defproject test-hello "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[org.clojars.tisnik/clj-hello "0.1.0-SNAPSHOT"]</strong>]
  :main ^:skip-aot test-hello.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Nyní je již projekt připraven knihovnu <strong>clj-hello</strong>
využívat.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Načtení všech závislých knihoven pro nově vytvořený projekt</h2>

<p>Po přidání nové knihovny do projektového souboru
<strong>project.xml</strong> je již možné spustit další (v&nbsp;tomto seriálu
zmíněný) příkaz nástroje <i>Leiningen</i>, který slouží pro stažení a lokální
instalaci všech knihoven, na nichž projekt závisí. V&nbsp;našem případě by se
měla stáhnout jen jediná nová knihovna, a to právě <strong>clj-hello</strong>.
Ostatně se o tom můžeme sami snadno přesvědčit zadáním následujícího
příkazu:</p>

<pre>
<strong>lein deps</strong>
&nbsp;
Retrieving org/clojars/tisnik/clj-hello/0.1.0-SNAPSHOT/clj-hello-0.1.0-20151107.211149-1.pom from clojars
Retrieving org/clojars/tisnik/clj-hello/0.1.0-SNAPSHOT/clj-hello-0.1.0-20151107.211149-1.jar from clojars
</pre>

<p>Instalace knihovny se provede do adresáře
<strong>~/.m2/repository/org/clojars/tisnik/clj-hello/</strong>, jehož obsah
bude zhruba následující (při prvním stažení zde nebudou uloženy dvě verze téže
knihovny, pro ilustraci však uvádím možnost, kdy se knihovna mezitím změnila a
existuje ve více stejně pojmenovaných verzích lišících se jen časem
vzniku):</p>

<pre>
total 16
drwxr-xr-x 2 tester tester 4096 lis  8 22:07 0.1.0-SNAPSHOT
-rw-r--r-- 1 tester tester  287 lis  7 22:36 maven-metadata-clojars.xml
-rw-r--r-- 1 tester tester   40 lis  7 22:36 maven-metadata-clojars.xml.sha1
-rw-r--r-- 1 tester tester  179 lis  7 22:36 resolver-status.properties
&nbsp;
./0.1.0-SNAPSHOT:
total 68
-rw-r--r-- 1 tester tester 7926 lis  7 22:29 clj-hello-0.1.0-20151107.211149-1.jar
-rw-r--r-- 1 tester tester   40 lis  7 22:29 clj-hello-0.1.0-20151107.211149-1.jar.sha1
-rw-r--r-- 1 tester tester 2878 lis  7 22:29 clj-hello-0.1.0-20151107.211149-1.pom
-rw-r--r-- 1 tester tester   40 lis  7 22:29 clj-hello-0.1.0-20151107.211149-1.pom.sha1
-rw-r--r-- 1 tester tester 7926 lis  7 22:36 clj-hello-0.1.0-20151107.213602-2.jar
-rw-r--r-- 1 tester tester   40 lis  7 22:36 clj-hello-0.1.0-20151107.213602-2.jar.sha1
-rw-r--r-- 1 tester tester 2878 lis  7 22:36 clj-hello-0.1.0-20151107.213602-2.pom
-rw-r--r-- 1 tester tester   40 lis  7 22:36 clj-hello-0.1.0-20151107.213602-2.pom.sha1
-rw-r--r-- 1 tester tester 7926 lis  7 22:36 clj-hello-0.1.0-SNAPSHOT.jar
-rw-r--r-- 1 tester tester 2878 lis  7 22:36 clj-hello-0.1.0-SNAPSHOT.pom
-rw-r--r-- 1 tester tester  777 lis  8 22:07 maven-metadata-clojars.xml
-rw-r--r-- 1 tester tester   40 lis  8 22:07 maven-metadata-clojars.xml.sha1
-rw-r--r-- 1 tester tester  202 lis  7 22:36 _maven.repositories
-rw-r--r-- 1 tester tester  179 lis  8 22:07 resolver-status.properties
</pre>

<p>Zajímavý může být obsah automaticky vytvořeného souboru
<strong>maven-metadata-clojars.xml</strong>, který naznačuje kompatibilitu mezi
nástroji <i>Leiningen</i> a <i>Maven</i>:</p>

<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;metadata&gt;
  &lt;groupId&gt;org.clojars.tisnik&lt;/groupId&gt;
  &lt;artifactId&gt;clj-hello&lt;/artifactId&gt;
  &lt;versioning&gt;
    &lt;versions&gt;
      &lt;version&gt;0.1.0-SNAPSHOT&lt;/version&gt;
    &lt;/versions&gt;
    &lt;lastUpdated&gt;20151107213607&lt;/lastUpdated&gt;
  &lt;/versioning&gt;
&lt;/metadata&gt;
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Výpis CLASSPATH používaných projektem</h2>

<p>Jedním z&nbsp;velmi častých problémů, s&nbsp;nimiž se setkávají jak
programátoři vyvíjející aplikace v&nbsp;Javě, tak i administrátoři, je zjištění
popř.&nbsp;nastavení <i>CLASSPATH</i>, tj.&nbsp;adresářů a Java archivů,
v&nbsp;nichž virtuální stroj Javy po svém spuštění hledá přeložené třídy
popř.&nbsp;další potřebné soubory (<i>resources</i>). Podobný problém řeší i
vývojáři používající programovací jazyk <i>Clojure</i>, kde je situace ještě
poněkud komplikovanější kvůli pravidlům pojmenovávání zdrojových souborů,
adresářů a jmenných prostorů (zjednodušeně řečeno se pomlčky ve jmenných
prostorech převádí na podtržítka). Pokud je však projekt založen nástrojem
<i>Leiningen</i>, je možné zjistit aktuální nastavení <i>CLASSPATH</i> velmi
jednoduše; konkrétně pomocí příkazu <strong>lein classpath</strong>. Můžeme si
to snadno vyzkoušet:</p>

<pre>
<strong>lein classpath</strong>
</pre>

<p>Výstupem tohoto příkazu je jediný dlouhý řádek, který jsem kvůli vyšší
čitelnosti rozdělil na větší množství řádků v&nbsp;místě oddělovače
jednotlivých cest:</p>

<pre>
/home/tester/temp/clojure-examples/test-hello/test:
/home/tester/temp/clojure-examples/test-hello/src:
/home/tester/temp/clojure-examples/test-hello/dev-resources:
/home/tester/temp/clojure-examples/test-hello/resources:
/home/tester/temp/clojure-examples/test-hello/target/base+system+user+dev/classes:
/home/tester/.m2/repository/clojure-complete/clojure-complete/0.2.3/clojure-complete-0.2.3.jar:
/home/tester/.m2/repository/org/clojure/tools.nrepl/0.2.6/tools.nrepl-0.2.6.jar:
<strong>/home/tester/.m2/repository/org/clojars/tisnik/clj-hello/0.1.0-SNAPSHOT/clj-hello-0.1.0-SNAPSHOT.jar:</strong>
/home/tester/.m2/repository/org/clojure/clojure/1.6.0/clojure-1.6.0.jar
</pre>

<p>Ze zvýrazněného řádku je patrné, že náš testovací projekt může pracovat i se
staženou knihovnou <strong>clj-hello</strong>.</p>

<p>Jen pro zajímavost se podívejme, co stažený Java archiv obsahuje. Kvůli
zpětné kompatibilitě používají tyto archivy formát ZIPu, takže výpis jejich
interní struktury je jednoduchý (nástroj <strong>jar</strong> je pomalejší a má
prapodivné parametry příkazové řádky :-):</p>

<pre>
<strong>unzip -l /home/tester/.m2/repository/org/clojars/tisnik/clj-hello/0.1.0-SNAPSHOT/clj-hello-0.1.0-SNAPSHOT.jar</strong>
&nbsp;
Archive:  /home/tester/.m2/repository/org/clojars/tisnik/clj-hello/0.1.0-SNAPSHOT/clj-hello-0.1.0-SNAPSHOT.jar
  Length      Date    Time    Name
---------  ---------- -----   ----
      119  2015-11-07 22:36   META-INF/MANIFEST.MF
     1864  2015-11-07 22:36   META-INF/maven/org.clojars.tisnik/clj-hello/pom.xml
      299  2015-11-07 22:36   META-INF/leiningen/org.clojars.tisnik/clj-hello/project.clj
      299  2015-11-07 22:36   project.clj
      469  2015-11-07 22:36   META-INF/leiningen/org.clojars.tisnik/clj-hello/README.md
    11218  2015-11-07 22:36   META-INF/leiningen/org.clojars.tisnik/clj-hello/LICENSE
        0  2015-11-07 22:36   META-INF/
        0  2015-11-07 22:36   META-INF/maven/
        0  2015-11-07 22:36   META-INF/maven/org.clojars.tisnik/
        0  2015-11-07 22:36   META-INF/maven/org.clojars.tisnik/clj-hello/
      112  2015-11-07 22:36   META-INF/maven/org.clojars.tisnik/clj-hello/pom.properties
        0  2015-11-07 22:31   clj_hello/
       80  2015-11-07 22:09   clj_hello/clj_hello.clj
---------                     -------
    14460                     13 files
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Import knihovny a zavolání funkce z&nbsp;této knihovny</h2>

<p>Posledním krokem celého našeho snažení je zavolání funkce, která je
deklarována v&nbsp;knihovně <strong>clj-hello</strong>. Před zavoláním funkce
<strong>say-hello</strong> je nutné zpřístupnit celý jmenný prostor a načíst
příslušný skript, což zajišťuje deklarace <strong>require</strong>, v&nbsp;níž
je navíc specifikován i alias (nepovinné):</p>

<pre>
(ns test-hello.core
  (:gen-class))
&nbsp;
<strong>(require '[clj-hello.clj-hello :as hello])</strong>
&nbsp;
(defn -main
    "Entry point to this app"
    [&amp; args]
    <strong>(hello/say-hello))</strong>
</pre>

<p>Funkcionalitu si můžeme ihned otestovat:</p>

<pre>
<strong>lein run</strong>
Hello world!
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Repositář s&nbsp;dnešními demonstračními příklady</h2>

<p>Jak knihovna připravená pro publikaci na serveru <i>Clojars</i>, tak i
demonstrační příklad, který tuto knihovnu využívá, byly uloženy, podobně jako
v&nbsp;předchozích částech tohoto seriálu, do Git repositáře dostupného na
adrese <a
href="https://github.com/tisnik/clojure-examples">https://github.com/tisnik/clojure-examples</a>.
V&nbsp;tabulce zobrazené pod tímto odstavcem naleznete na zdrojové kódy
knihovny i demonstračního příkladu přímé odkazy:</p>

<table>
<tr><th>#</th><th>Příklad/knihovna</th><th>Github</th></tr>
<tr><td>1</td><td>clj-hello</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/clj-hello">https://github.com/tisnik/clojure-examples/tree/master/clj-hello</a></td></tr>
<tr><td>2</td><td>test-hello</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/test-hello">https://github.com/tisnik/clojure-examples/tree/master/test-hello</a></td></tr>
</table>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odkazy na předchozí části tohoto seriálu</h2>

<ol>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (2)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (3)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/</a>
</li>

<li>Programovací jazyk Clojure – triky při práci s řetězci<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-retezci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-retezci/</a>
</li>

<li>Programovací jazyk Clojure – triky při práci s kolekcemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-kolekcemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-kolekcemi/</a>
</li>

<li>Programovací jazyk Clojure – práce s mapami a množinami<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-prace-s-mapami-a-mnozinami/">http://www.root.cz/clanky/programovaci-jazyk-clojure-prace-s-mapami-a-mnozinami/</a>
</li>

<li>Programovací jazyk Clojure – základy zpracování XML<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-zaklady-zpracovani-xml/">http://www.root.cz/clanky/programovaci-jazyk-clojure-zaklady-zpracovani-xml/</a>
</li>

<li>Programovací jazyk Clojure – testování s využitím knihovny Expectations<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/">http://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/</a>
</li>

<li>Programovací jazyk Clojure – některé užitečné triky použitelné (nejenom) v&nbsp;testech<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/">http://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/</a>
</li>

<li>Enlive – výkonný šablonovací systém pro jazyk Clojure<br/>
<a href="http://www.root.cz/clanky/enlive-vykonny-sablonovaci-system-pro-jazyk-clojure/">http://www.root.cz/clanky/enlive-vykonny-sablonovaci-system-pro-jazyk-clojure/</a>
</li>

</ol>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Clojars:<br />
<a href="https://clojars.org/">https://clojars.org/</a>
</li>

<li>
Seznam knihoven na Clojars:<br />
<a href="https://clojars.org/projects">https://clojars.org/projects</a>
</li>

<li>Clojure Cookbook: Templating HTML with Enlive<br />
<a href="https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc">https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc</a>
</li>

<li>An Introduction to Enlive<br />
<a href="https://github.com/swannodette/enlive-tutorial/">https://github.com/swannodette/enlive-tutorial/</a>
</li>

<li>Enlive na GitHubu<br />
<a href="https://github.com/cgrand/enlive">https://github.com/cgrand/enlive</a>
</li>

<li>Expectations: příklady atd.<br />
<a href="http://jayfields.com/expectations/">http://jayfields.com/expectations/</a>
</li>

<li>Expectations na GitHubu<br />
<a href="https://github.com/jaycfields/expectations">https://github.com/jaycfields/expectations</a>
</li>

<li>Lein-expectations na GitHubu<br />
<a href="https://github.com/gar3thjon3s/lein-expectations">https://github.com/gar3thjon3s/lein-expectations</a>
</li>

<li>Testing Clojure With Expectations<br />
<a href="https://semaphoreci.com/blog/2014/09/23/testing-clojure-with-expectations.html">https://semaphoreci.com/blog/2014/09/23/testing-clojure-with-expectations.html</a>
</li>

<li>Clojure testing TDD/BDD libraries: clojure.test vs Midje vs Expectations vs Speclj<br />
<a href="https://www.reddit.com/r/Clojure/comments/1viilt/clojure_testing_tddbdd_libraries_clojuretest_vs/">https://www.reddit.com/r/Clojure/comments/1viilt/clojure_testing_tddbdd_libraries_clojuretest_vs/</a>
</li>

<li>Testing: One assertion per test<br />
<a href="http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html">http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html</a>
</li>

<li>Rewriting Your Test Suite in Clojure in 24 hours<br />
<a href="http://blog.circleci.com/rewriting-your-test-suite-in-clojure-in-24-hours/">http://blog.circleci.com/rewriting-your-test-suite-in-clojure-in-24-hours/</a>
</li>

<li>Clojure doc: zipper<br />
<a href="http://clojuredocs.org/clojure.zip/zipper">http://clojuredocs.org/clojure.zip/zipper</a>
</li>

<li>Clojure doc: parse<br />
<a href="http://clojuredocs.org/clojure.xml/parse">http://clojuredocs.org/clojure.xml/parse</a>
</li>

<li>Clojure doc: xml-zip<br />
<a href="http://clojuredocs.org/clojure.zip/xml-zip">http://clojuredocs.org/clojure.zip/xml-zip</a>
</li>

<li>Clojure doc: xml-seq<br />
<a href="http://clojuredocs.org/clojure.core/xml-seq">http://clojuredocs.org/clojure.core/xml-seq</a>
</li>

<li>Parsing XML in Clojure<br />
<a href="https://github.com/clojuredocs/guides">https://github.com/clojuredocs/guides</a>
</li>

<li>Clojure Zipper Over Nested Vector<br />
<a href="https://vitalyper.wordpress.com/2010/11/23/clojure-zipper-over-nested-vector/">https://vitalyper.wordpress.com/2010/11/23/clojure-zipper-over-nested-vector/</a>
</li>

<li>Understanding Clojure's PersistentVector implementation<br />
<a href="http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation">http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation</a>
</li>

<li>Understanding Clojure's PersistentHashMap (deftwice...)<br />
<a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice.html">http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice.html</a>
</li>

<li>Assoc and Clojure's PersistentHashMap: part ii<br />
<a href="http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii.html">http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii.html</a>
</li>

<li>Ideal Hashtrees (paper)<br />
<a href="http://lampwww.epfl.ch/papers/idealhashtrees.pdf">http://lampwww.epfl.ch/papers/idealhashtrees.pdf</a>
</li>

<li>Clojure home page<br />
<a href="http://clojure.org/">http://clojure.org/</a>
</li>

<li>Clojure (downloads)<br />
<a href="http://clojure.org/downloads">http://clojure.org/downloads</a>
</li>

<li>Clojure Sequences<br />
<a href="http://clojure.org/sequences">http://clojure.org/sequences</a>
</li>

<li>Clojure Data Structures<br />
<a href="http://clojure.org/data_structures">http://clojure.org/data_structures</a>
</li>

<li>The Structure and Interpretation of Computer Programs: 2.2.1  Representing Sequences<br />
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%_sec_2.2.1">http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%_sec_2.2.1</a>
</li>

<li>The Structure and Interpretation of Computer Programs: 3.3.1  Mutable List Structure<br />
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%_sec_3.3.1">http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%_sec_3.3.1</a>
</li>

<li>Clojure - Functional Programming for the JVM<br />
<a href="http://java.ociweb.com/mark/clojure/article.html">http://java.ociweb.com/mark/clojure/article.html</a>
</li>

<li>Clojure quick reference<br />
<a href="http://faustus.webatu.com/clj-quick-ref.html">http://faustus.webatu.com/clj-quick-ref.html</a>
</li>

<li>4Clojure<br />
<a href="http://www.4clojure.com/">http://www.4clojure.com/</a>
</li>

<li>ClojureDoc (rozcestník s&nbsp;dokumentací jazyka Clojure)<br />
<a href="http://clojuredocs.org/">http://clojuredocs.org/</a>
</li>

<li>Clojure (na Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Clojure">http://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Clojure (na Wikipedia CS)<br />
<a href="http://cs.wikipedia.org/wiki/Clojure">http://cs.wikipedia.org/wiki/Clojure</a>
</li>

<li>SICP (The Structure and Interpretation of Computer Programs)<br />
<a href="http://mitpress.mit.edu/sicp/">http://mitpress.mit.edu/sicp/</a>
</li>

<li>Pure function<br />
<a href="http://en.wikipedia.org/wiki/Pure_function">http://en.wikipedia.org/wiki/Pure_function</a>
</li>

<li>Funkcionální programování<br />
<a href="http://cs.wikipedia.org/wiki/Funkcionální_programování">http://cs.wikipedia.org/wiki/Funkcionální_programování</a>
</li>

<li>Čistě funkcionální (datové struktury, jazyky, programování)<br />
<a href="http://cs.wikipedia.org/wiki/Čistě_funkcionální">http://cs.wikipedia.org/wiki/Čistě_funkcionální</a>
</li>

<li>Clojure Macro Tutorial (Part I, Getting the Compiler to Write Your Code For You)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html</a>
</li>

<li>Clojure Macro Tutorial (Part II: The Compiler Strikes Back)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html</a>
</li>

<li>Clojure Macro Tutorial (Part III: Syntax Quote)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html</a>
</li>

<li>Tech behind Tech: Clojure Macros Simplified<br />
<a href="http://techbehindtech.com/2010/09/28/clojure-macros-simplified/">http://techbehindtech.com/2010/09/28/clojure-macros-simplified/</a>
</li>

<li>Fatvat - Exploring functional programming: Clojure Macros<br />
<a href="http://www.fatvat.co.uk/2009/02/clojure-macros.html">http://www.fatvat.co.uk/2009/02/clojure-macros.html</a>
</li>

<li>Eulerovo číslo<br />
<a href="http://cs.wikipedia.org/wiki/Eulerovo_číslo">http://cs.wikipedia.org/wiki/Eulerovo_číslo</a>
</li>

<li>List comprehension<br />
<a href="http://en.wikipedia.org/wiki/List_comprehension">http://en.wikipedia.org/wiki/List_comprehension</a>
</li>

<li>List Comprehensions in Clojure<br />
<a href="http://asymmetrical-view.com/2008/11/18/list-comprehensions-in-clojure.html">http://asymmetrical-view.com/2008/11/18/list-comprehensions-in-clojure.html</a>
</li>

<li>Clojure Programming Concepts: List Comprehension<br />
<a href="http://en.wikibooks.org/wiki/Clojure_Programming/Concepts#List_Comprehension">http://en.wikibooks.org/wiki/Clojure_Programming/Concepts#List_Comprehension</a>
</li>

<li>Clojure core API: for macro<br />
<a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/for">http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/for</a>
</li>

<li>cirrus machina - The Clojure for macro<br />
<a href="http://www.cirrusmachina.com/blog/comment/the-clojure-for-macro/">http://www.cirrusmachina.com/blog/comment/the-clojure-for-macro/</a>
</li>

<li>Riastradh's Lisp Style Rules<br />
<a href="http://mumble.net/~campbell/scheme/style.txt">http://mumble.net/~campbell/scheme/style.txt</a>
</li>

<li>Dynamic Languages Strike Back<br />
<a href="http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html">http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html</a>
</li>

<li>Scripting: Higher Level Programming for the 21st Century<br />
<a href="http://www.tcl.tk/doc/scripting.html">http://www.tcl.tk/doc/scripting.html</a>
</li>

<li>Java Virtual Machine Support for Non-Java Languages<br />
<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html">http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html</a>
</li>

<li>Třída java.lang.String<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html">http://docs.oracle.com/javase/7/docs/api/java/lang/String.html</a>
</li>

<li>Třída java.lang.StringBuffer<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html">http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html</a>
</li>

<li>Třída java.lang.StringBuilder<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html">http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html</a>
</li>

<li>StringBuffer versus String<br />
<a href="http://www.javaworld.com/article/2076072/build-ci-sdlc/stringbuffer-versus-string.html">http://www.javaworld.com/article/2076072/build-ci-sdlc/stringbuffer-versus-string.html</a>
</li>

<li>Threading macro (dokumentace k&nbsp;jazyku Clojure)<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;</a>
</li>

<li>Understanding the Clojure -&gt; macro<br />
<a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/</a>
</li>

<li>clojure.inspector<br />
<a href="http://clojure.github.io/clojure/clojure.inspector-api.html">http://clojure.github.io/clojure/clojure.inspector-api.html</a>
</li>

<li>The Clojure Toolbox<br />
<a href="http://www.clojure-toolbox.com/">http://www.clojure-toolbox.com/</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

<li>Clojure.org: Vars and the Global Environment<br />
<a href="http://clojure.org/Vars">http://clojure.org/Vars</a>
</li>

<li>Clojure.org: Refs and Transactions<br />
<a href="http://clojure.org/Refs">http://clojure.org/Refs</a>
</li>

<li>Clojure.org: Atoms<br />
<a href="http://clojure.org/Atoms">http://clojure.org/Atoms</a>
</li>

<li>Clojure.org: Agents as Asynchronous Actions<br />
<a href="http://clojure.org/agents">http://clojure.org/agents</a>
</li>

<li>Transient Data Structures
<a href="http://clojure.org/transients">http://clojure.org/transients</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

