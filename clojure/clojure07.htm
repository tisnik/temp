<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Clojure a databáze (1.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Clojure a databáze (1.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V sedmé části seriálu o programovacím jazyku Clojure a o nástroji Leiningen si řekneme základní informace o využití databází v aplikacích naprogramovaných v Clojure. Zpočátku se budeme zabývat relačními databázemi, postupně však přejdeme i na další (dnes velmi populární) typy databází.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Clojure a databáze (1.část)</a></p>
<p><a href="#k02">2. Knihovna <strong>org.clojure/java.jdbc</strong></a></p>
<p><a href="#k03">3. Vytvoření testovací databáze s&nbsp;jednou tabulkou</a></p>
<p><a href="#k04">4. První demonstrační příklad &ndash; provedení dotazu (SELECT) do SQLite databáze</a></p>
<p><a href="#k05">5. Druhý demonstrační příklad &ndash; zachycení výjimky a předání parametrů do dotazu SELECT</a></p>
<p><a href="#k06">6. Třetí demonstrační příklad &ndash; zpracování výsledků dotazu</a></p>
<p><a href="#k07">7. Čtvrtý demonstrační příklad &ndash; příkaz INSERT (naivní varianta)</a></p>
<p><a href="#k08">8. Pátý demonstrační příklad &ndash; příkazy INSERT provedené v&nbsp;transakci</a></p>
<p><a href="#k09">9. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k10">10. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Clojure a databáze (1.část)</h2>

<p>V&nbsp;předchozích šesti částech [<a
href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">1</a>][<a
href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">2</a>][<a
href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">3</a>][<a
href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">4</a>][<a
href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">5</a>][<a
href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">6</a>] seriálu o nástroji Leiningen i o programovacím jazyku Clojure
jsme se již zabývali několika tématy: samotným použitím Leiningenu, tvorbou
webových aplikací využívajících knihovnu <i>Clojure Ring</i> a taktéž i
knihovnou <i>Hiccup</i>, kterou je možné použít pro relativně snadné a přitom
(alespoň podle mého názoru) velmi elegantní generování dynamických HTML a XHTML
stránek. V&nbsp;mnoha aplikacích se však setkáme i s&nbsp;dalším dosti typickým
požadavkem. Tím je přístup k&nbsp;relačním či (v&nbsp;některých případech)
nerelačním databázím. Pro programovací jazyk Clojure vzniklo v&nbsp;poměrně
krátké době již velké množství knihoven a frameworků usnadňujících přístup
k&nbsp;různým typům databází, setkat se dokonce můžeme i s&nbsp;několika typy
doménově specifických jazyků (DSL) nahrazujících klasické SQL. My se dneska
seznámíme s&nbsp;nízkoúrovňovým přístupem k&nbsp;relačním databázím, který je
realizován knihovnou <strong>org.clojure/java.jdbc</strong>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Knihovna <strong>org.clojure/java.jdbc</strong></h2>

<p>Jednou z&nbsp;mnoha knihoven umožňujících provádění operací s&nbsp;relačními
databázemi je knihovna nazvaná <strong>org.clojure/java.jdbc</strong>.
Zjednodušeně řečeno je možné říci, že tato knihovna obaluje původní Javovské
rozhraní JDBC, které je pro většinu reálných aplikací nevyhovující (což do
značné míry souvisí i se stářím tohoto API). V&nbsp;knihovně
<strong>org.clojure/java.jdbc</strong> nalezneme funkce pro provádění
základních databázových operací SELECT, INSERT, UPDATE i DELETE, přičemž je
sémantika těchto funkcí navržena takovým způsobem, aby odpovídala filozofii
programovacího jazyka Clojure. V&nbsp;praxi to znamená, že se namísto
těžkopádného ResultSet vrací výsledky ve formě sekvence map, jsou jednoduše
podporovány transakce, není zapotřebí se starat o uvolňování prostředků, příkaz
SELECT je založen na třídě PreparedStatement (což je umně skryto), takže lze
předávat parametry dotazům bez nutnosti ručního skládání řetězce s&nbsp;SQL
příkazem atd. Pro komplikovanější operace není však tato knihovna příliš
vhodná, což však nevadí, protože k&nbsp;ní existuje poměrně velké množství
alternativních řešení, z&nbsp;nichž některé si popíšeme dále.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vytvoření testovací databáze s&nbsp;jednou tabulkou</h2>

<p>Některé základní vlastnosti knihovny <strong>java.jdbc</strong> si budeme
ukazovat na pětici demonstračních příkladů, které budou přistupovat
k&nbsp;tabulce nazvané <strong>obsazeni</strong> uložené v&nbsp;souborové
databázi SQLite. Předpokladem tedy je, že na systému je nainstalován balíček
<strong>sqlite</strong> či <strong>sqlite3</strong>, což je většinou splněno,
neboť se tato souborová databáze používá v&nbsp;několika populárních
desktopových aplikacích. Zmíněná tabulka <strong>obsazeni</strong> má velmi
jednoduchou strukturu, což je ostatně patrné i z&nbsp;následující
deklarace:</p>

<pre>
create table obsazeni (
    id        integer primary key,
    postava   text not null,
    jmeno     text not null
);
</pre>

<p>Tabulka je naplněna pěti záznamy &ndash; jmény pěti postav z&nbsp;jednoho
známého divadelního představení:</p>

<pre>
insert into obsazeni(id, postava, jmeno) values (1, 'inspektor',  'Trachta');
insert into obsazeni(id, postava, jmeno) values (2, 'praktikant', 'Hlavacek');
insert into obsazeni(id, postava, jmeno) values (3, 'tovarnik',   'Bierhanzel');
insert into obsazeni(id, postava, jmeno) values (4, 'tovarnik',   'Meyer');
insert into obsazeni(id, postava, jmeno) values (5, 'stevard',    'Vaclav Kotek');
</pre>

<p>Tuto databázi s&nbsp;jedinou tabulkou vytvoříme následujícím příkazem
využívajícím skript <strong>create_table.sql</strong>, který je součástí všech
pěti demonstračních příkladů (viz též <a href="#k09">kapitolu číslo 9</a>):</p>

<pre>
cat create_table.sql | sqlite3 test.db
</pre>

<p>Výsledkem bude binární soubor nazvaný <strong>test.db</strong>, který musí
být umístěn v&nbsp;adresáři s&nbsp;projektem, přesněji řečeno v&nbsp;tom
adresáři, ve kterém se nachází i soubor <strong>project.clj</strong>. Obsah
tabulky si můžeme snadno vypsat příkazem:</p>

<pre>
sqlite3 test.db "select * from obsazeni;"
</pre>

<p>Na standardním výstupu by se mělo objevit pět řádků:</p>

<pre>
1|inspektor|Trachta
2|praktikant|Hlavacek
3|tovarnik|Bierhanzel
4|tovarnik|Meyer
5|stevard|Vaclav Kotek
</pre>

<p>Nyní již je vše připravené pro použití této databáze v&nbsp;demonstračních
příkladech.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První demonstrační příklad &ndash; provedení dotazu (SELECT) do SQLite databáze</h2>

<p>Pojďme si nyní vyzkoušet provést jednoduché operace s&nbsp;právě vytvořenou
databází. Nejprve vygenerujeme kostru nového projektu již známým příkazem:</p>

<pre>
lein new sqltest1
</pre>

<p>Projektový soubor nazvaný <strong>project.clj</strong> je nutné upravit
způsobem, který již známe z&nbsp;předchozích částí tohoto seriálu. Musíme totiž
doplnit knihovny, na nichž demonstrační příklad závisí. V&nbsp;tomto případě se
jedná o knihovny <strong>org.clojure/java.jdbc</strong> (vrstva nad JDBC) a
taktéž o driver k&nbsp;databázi SQLite představovaný knihovnou
<strong>org.xerial/sqlite-jdbc</strong>. Projektový soubor by měl vypadat
následovně (dva nové řádky jsou zvýrazněny):</p>

<pre>
(defproject sqltest1 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.5.1"]
                 <strong>[org.clojure/java.jdbc "0.3.5"]</strong>
                 <strong>[org.xerial/sqlite-jdbc "3.7.2"]</strong>]
  :main ^:skip-aot sqltest1.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Poté již můžeme všechny závislé knihovny stáhnout:</p>

<pre>
lein deps
</pre>

<p>Povšimněte si, že se do podadresáře <strong>target</strong> stáhnuly i
binární (resp.&nbsp;přesněji řečeno nativní) soubory &ndash; drivery nutné pro
práci s&nbsp;databází SQLite.</p>

<p>Zajímavější je zdrojový kód demonstračního příkladu. Nejprve si tento kód
uvedeme celý a poté si jednotlivé funkce vysvětlíme podrobněji:</p>

<pre>
(ns sqltest1.core
  (:gen-class))
&nbsp;
(require '[clojure.pprint    :as pprint])
(require '[clojure.java.jdbc :as jdbc])
&nbsp;
<i>; Struktura reprezentujici zpusob pripojeni do vybrane databaze</i>
(def <strong>test-db</strong>
    {:classname   "org.sqlite.JDBC"
     :subprotocol "sqlite"
     :subname     "test.db"
    })
&nbsp;
(defn <strong>read-whole-table</strong>
    <i>"Nacteni obsahu vybrane tabulky."</i>
    [db-spec table-name]
    (jdbc/query db-spec (str "select * from " table-name)))
&nbsp;
(defn <strong>list-table</strong>
    <i>"Vypis obsahu vybrane tabulky."</i>
    [db-spec table-name]
    (let [results (read-whole-table db-spec table-name)]
         (pprint/pprint results)))
&nbsp;
(defn <strong>-main</strong>
    <i>"Vstupni bod do aplikace."</i>
    [&amp; args]
    (list-table test-db "obsazeni"))
</pre>

<p>Popis jednotlivých funkcí a datových struktur:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Význam</th></tr>
<tr><td>1</td><td>-main</td><td>vstupní bod do aplikace zavolaný příkazem <strong>lein run</strong>; případné argumenty se ignorují</td></tr>
<tr><td>2</td><td>list-table</td><td>získá výsledky ve formě sekvence map z&nbsp;databáze a vytiskne je v&nbsp;čitelné podobě na standardní výstup</td></tr>
<tr><td>3</td><td>read-whole-table</td><td>připojí se k&nbsp;databázi a provede zadaný příkaz SELECT</td></tr>
<tr><td>4</td><td>clojure.java.jdbc/query</td><td>provedení příkazu SELECT, vyžaduje specifikaci databáze a tvar SELECTu (zde v&nbsp;řetězcové podobě)</td></tr>
<tr><td>5</td><td>test-db</td><td>datová struktura (mapa) popisující způsob připojení k&nbsp;databází; v&nbsp;Javě by se jednalo o kombinaci jména driveru a connection stringu</td></tr>
</table>

<p>Obsah datové struktury <strong>test-db</strong> se bude v&nbsp;případě
jiných databází než je SQLite lišit, protože mnoho databází očekává zadání
jména a hesla, odkazu na databází atd.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Druhý demonstrační příklad &ndash; zachycení výjimky a předání parametrů do dotazu SELECT</h2>

<p>Ve druhém demonstračním příkladu si ukážeme dvě změny provedené ve zdrojovém
kódu příkladu prvního. První změnou je předání parametru (či parametrů) do
dotazu SELECT. Ve skutečnosti se totiž v&nbsp;knihovně
<strong>java.jdbc</strong> pro každý dotaz interně vytváří objekt typu
<strong>PreparedStatement</strong>, který reprezentuje jak vlastní tvar dotazu,
tak i jeho případné parametry. Díky této vlastnosti není nutné příkaz SELECT
s&nbsp;parametry skládat ručně, což je nepohodlné a taktéž i náchylné na chyby
popř.&nbsp;v&nbsp;extrémních případech na útoky typu <i>SQL Injection</i>. Při
volání funkce <strong>java.jdbc/query</strong> je možné druhý parametr, který
byl původně reprezentován řetězcem, nahradit za vektor, jehož první prvek je
opět řetězec a další prvky jsou hodnoty jednotlivých parametrů reprezentovaných
v&nbsp;dotazu otazníky. Druhé vylepšení spočívá v&nbsp;zachycení výjimek, které
mohou být vyhozeny (<i>throw</i>) při komunikaci s&nbsp;databází. V&nbsp;Javě
se používá konstrukce <strong>try-block-finally</strong>, která je
v&nbsp;programovacím jazyku Clojure nahrazena za speciální formu <strong>(try
expr* catch-clause* finally-clause?)</strong>:</p>

<pre>
(ns sqltest2.core
  (:gen-class))
&nbsp;
(require '[clojure.pprint    :as pprint])
(require '[clojure.java.jdbc :as jdbc])
&nbsp;
<i>; Struktura reprezentujici zpusob pripojeni do vybrane databaze</i>
(def <strong>test-db</strong>
    {:classname   "org.sqlite.JDBC"
     :subprotocol "sqlite"
     :subname     "test.db"
    })
&nbsp;
(defn <strong>read-whole-table</strong>
    <i>"Nacteni obsahu vybrane tabulky."</i>
    [db-spec table-name]
    (jdbc/query db-spec [(str "select * from " table-name " where postava=? order by id") "tovarnik"]))
&nbsp;
(defn <strong>list-table</strong>
    "<i>Vypis obsahu vybrane tabulky."</i>
    [db-spec table-name]
    (try
        (let [results (read-whole-table db-spec table-name)]
            (pprint/pprint results))
        (catch Exception e
            (println "error accessing database '" (:subname db-spec) "'!"))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Vstupni bod do aplikace."</i>
    [&amp; args]
    (list-table test-db "obsazeni"))
</pre>

<p>Ze zdrojového kódu je patrné, že blok <strong>catch</strong> je vnořen do
struktury speciální formy <strong>try</strong>. Totéž by platilo i pro případný
blok <strong>finally</strong>.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Třetí demonstrační příklad &ndash; zpracování výsledků dotazu</h2>

<p>V&nbsp;prvním i ve druhém demonstračním příkladu se výsledky dotazu
jednoduše vypsaly na standardní výstup s&nbsp;využitím funkce
<strong>clojure.pprint/pprint</strong>, která vrácenou sekvenci pro lepší
čitelnost naformátovala. V&nbsp;reálných aplikacích je však nutné sekvenci
představující výsledek dotazu většinou zpracovat odlišným způsobem. Nabízí se
dvě základní možnosti &ndash; použití generátorové notace seznamu
reprezentované makrem <strong>for</strong> (což je čistě funkcionální a tudíž i
preferovaný přístup) popř.&nbsp;použití programové smyčky realizované například
s&nbsp;využitím makra <strong>doseq</strong>. Pro jednoduchost si
v&nbsp;dnešním třetím demonstračním příkladu ukážeme právě využití zmíněného
makra <strong>doseq</strong>, kterým se postupně projde výsledkem dotazu a pro
každý výsledek (řádek) se zavolá funkce <strong>(println (format
...))</strong>, které se předají prvky uložené pod klíči
<strong>:postava</strong> a <strong>:jmeno</strong>. Povšimněte si způsobu
získání hodnot těchto prvků, kde jsme se elegantně zbavili nutnosti volání
funkce <strong>get</strong>, které většinou není pro Clojure idiomatické
(<strong>get</strong> je výhodné použít v&nbsp;případě, že je nutné nahradit
hodnotu neexistujícího prvku mapy či sekvence nějakou speciální hodnotou):</p>

<pre>
(ns sqltest3.core
  (:gen-class))
&nbsp;
(require '[clojure.pprint    :as pprint])
(require '[clojure.java.jdbc :as jdbc])
&nbsp;
; <i>Struktura reprezentujici zpusob pripojeni do vybrane databaze</i>
(def <strong>test-db</strong>
    {:classname   "org.sqlite.JDBC"
     :subprotocol "sqlite"
     :subname     "test.db"
    })
&nbsp;
(defn <strong>read-whole-table</strong>
    <i>"Nacteni obsahu vybrane tabulky."</i>
    [db-spec table-name]
    (jdbc/query db-spec (str "select * from " table-name " order by postava, jmeno")))
&nbsp;
(defn <strong>list-table</strong>
    <i>"Vypis obsahu vybrane tabulky."</i>
    [db-spec table-name]
    (try
        (let [results (read-whole-table db-spec table-name)]
            (doseq [result results]
                (println (format "%-10s %-20s" (:postava result) (:jmeno result)))))
        (catch Exception e
            (println "error accessing database '" (:subname db-spec) "'!"))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Vstupni bod do aplikace."</i>
    [&amp; args]
    (list-table test-db "obsazeni"))
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Čtvrtý demonstrační příklad &ndash; příkaz INSERT (naivní varianta)</h2>

<p>Jak jsme si řekli již <a href="k02">ve druhé kapitole</a>, podporuje
knihovna <strong>org.clojure/java.jdbc</strong> kromě operace SELECT i ostatní
tři základní databázové operace, tj.&nbsp;INSERT, DELETE a UPDATE.
V&nbsp;dnešním čtvrtém demonstračním příkladu je ukázáno použití operace
INSERT, která je několikrát zavolána ve funkci nazvané
<strong>fill-in-table</strong>. Nejprve je nutné upozornit na to, že operace
INSERT je představována funkcí <strong>clojure.java.jdbc/insert!</strong>, kde
vykřičník na konci názvu upozorňuje na fakt, že se provedením této operace
změní <i>stav</i> aplikace (povšimněte si, že i všechny podobné funkce
v&nbsp;Clojure knihovnách dodržují stejnou konvenci, typickým příkladem jsou
funkce <strong>reset!</strong>, <strong>swap!</strong> či
<strong>conj!</strong>). Data ukládaná do databáze mohou být funkci
<strong>org.clojure/java.jdbc</strong> předána různými způsoby. Zde využíváme
ten nejjednodušší způsob &ndash; každý záznam je představovaný mapou, takže je
zřejmé, které sloupce tabulky odpovídají jednotlivým prvkům v&nbsp;mapě (není
tedy nutné ručně psát příkaz INSERT v&nbsp;jazyku SQL):</p>

<pre>
(ns sqltest4.core
  (:gen-class))
&nbsp;
(require '[clojure.pprint    :as pprint])
(require '[clojure.java.jdbc :as jdbc])
&nbsp;
<i>; Struktura reprezentujici zpusob pripojeni do vybrane databaze</i>
(def <strong>test-db</strong>
    {:classname   "org.sqlite.JDBC"
     :subprotocol "sqlite"
     :subname     "test.db"
    })
&nbsp;
(def <strong>table-name</strong> "obsazeni")
&nbsp;
(defn <strong>read-whole-table</strong>
    <i>"Nacteni obsahu vybrane tabulky."</i>
    [db-spec table-name]
    (jdbc/query db-spec (str "select * from " table-name " order by postava, jmeno")))
&nbsp;
(defn <strong>list-table</strong>
    <i>"Vypis obsahu vybrane tabulky."</i>
    [db-spec table-name]
    (try
        (let [results (read-whole-table db-spec table-name)]
            (doseq [result results]
                (println (format "%-10s %-20s" (:postava result) (:jmeno result)))))
        (catch Exception e
            (println "error accessing database '" (:subname db-spec) "'!"))))
&nbsp;
(defn <strong>fill-in-table</strong>
    <i>"Zapis dat do tabulky."</i>
    [db-spec table-name]
     (jdbc/insert! db-spec table-name {:postava "inspektor"  :jmeno "Trachta"})
     (jdbc/insert! db-spec table-name {:postava "praktikant" :jmeno "Hlavacek"})
     (jdbc/insert! db-spec table-name {:postava "tovarnik"   :jmeno "Bierhanzel"})
     (jdbc/insert! db-spec table-name {:postava "tovarnik"   :jmeno "Meyer"})
     (jdbc/insert! db-spec table-name {:postava "stevard"    :jmeno "Vaclav Kotek"}))
&nbsp;
(defn <strong>-main</strong>
    <i>"Vstupni bod do aplikace."</i>
    [&amp; args]
    (fill-in-table test-db table-name)
    (list-table test-db table-name))
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Pátý demonstrační příklad &ndash; příkazy INSERT provedené v&nbsp;transakci</h2>

<p>Použití funkce <strong>clojure.java.jdbc/insert!</strong> způsobem
naznačeným v&nbsp;předchozí kapitole sice vypadá velmi jednoduše, ovšem za tuto
jednoduchost platíme mnohdy až neúměrně dlouhým časem provádění této operace.
Ve chvíli, kdy se databáze naplňuje množstvím nových záznamů je nutné zajistit
větší rychlost vkládání dat do tabulek. To je relativně snadné zařídit takovým
způsobem, že se příkazy INSERT volají v&nbsp;transakci a v&nbsp;dnešním pátém a
současně i posledním demontračním příkladu je naznačeno, jak lze takové
transakce relativně snadno implementovat. Všechny operace, které se mají
provádět v&nbsp;transakci, jsou umístěny do funkce nazvané
<strong>clojure.java.jdbc/with-db-transaction</strong>. Navíc je nutné u
příkazů INSERT pomocí nepovinného parametru <strong>:transaction? true</strong>
specifikovat, že se skutečně mají provést v&nbsp;transakci. Mimochodem, název
funkce <strong>clojure.java.jdbc/with-db-transaction</strong> opět plně
odpovídá konvencím Clojure, kde nalezneme množství podobných názvů, například
ve chvíli, kdy se pracuje se soubory atd. Funkce <strong>with-</strong>
například dovolují izolovat změnu stavu aplikace, pracovat s&nbsp;nějakým
prostředkem (souborem, transakcí) apod.:</p>

<pre>
(ns sqltest5.core
  (:gen-class))
&nbsp;
(require '[clojure.pprint    :as pprint])
(require '[clojure.java.jdbc :as jdbc])
&nbsp;
; <i>Struktura reprezentujici zpusob pripojeni do vybrane databaze</i>
(def <strong>test-db</strong>
    {:classname   "org.sqlite.JDBC"
     :subprotocol "sqlite"
     :subname     "test.db"
    })
&nbsp;
(def <strong>table-name</strong> "obsazeni")
&nbsp;
(defn <strong>read-whole-table</strong>
    <i>"Nacteni obsahu vybrane tabulky."</i>
    [db-spec table-name]
    (jdbc/query db-spec (str "select * from " table-name " order by postava, jmeno")))
&nbsp;
(defn <strong>list-table</strong>
    <i>"Vypis obsahu vybrane tabulky."</i>
    [db-spec table-name]
    (try
        (let [results (read-whole-table db-spec table-name)]
            (doseq [result results]
                (println (format "%-10s %-20s" (:postava result) (:jmeno result)))))
        (catch Exception e
            (println "error accessing database '" (:subname db-spec) "'!"))))
&nbsp;
(defn <strong>delete-table-content</strong>
    [db-spec table-name]
    (jdbc/delete! db-spec table-name []))
&nbsp;
(defn <strong>fill-in-table</strong>
    <i>"Zapis dat do tabulky."</i>
    [db-spec table-name]
    (jdbc/with-db-transaction [connection db-spec]
        (jdbc/insert! connection table-name {:postava "inspektor"  :jmeno "Trachta"} :transaction? true)
        (jdbc/insert! connection table-name {:postava "praktikant" :jmeno "Hlavacek"} :transaction? true)
        (jdbc/insert! connection table-name {:postava "tovarnik"   :jmeno "Bierhanzel"} :transaction? true)
        (jdbc/insert! connection table-name {:postava "tovarnik"   :jmeno "Meyer"} :transaction? true)
        (jdbc/insert! connection table-name {:postava "stevard"    :jmeno "Vaclav Kotek"} :transaction? true)))
&nbsp;
(defn <strong>-main</strong>
    <i>"Vstupni bod do aplikace."</i>
    [&amp; args]
    (delete-table-content test-db table-name)
    (fill-in-table test-db table-name)
    (list-table test-db table-name))
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všech pět dnes popsaných demonstračních příkladů bylo, podobně jako
v&nbsp;předchozí části tohoto článku, uloženo do GIT repositáře dostupného na
adrese <a
href="https://github.com/tisnik/clojure-examples">https://github.com/tisnik/clojure-examples</a>
(dříve popsané příklady budou přidány později). V&nbsp;tabulce zobrazené pod
tímto odstavcem naleznete na jednotlivé příklady přímé odkazy:</p>

<table>
<tr><th>Příklad</th><th>Github</th></tr>
<tr><td><a href="#k04">sqltest1</a></td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/sqltest1">https://github.com/tisnik/clojure-examples/tree/master/sqltest1</a></td></tr>
<tr><td><a href="#k05">sqltest2</a></td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/sqltest2">https://github.com/tisnik/clojure-examples/tree/master/sqltest2</a></td></tr>
<tr><td><a href="#k06">sqltest3</a></td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/sqltest3">https://github.com/tisnik/clojure-examples/tree/master/sqltest3</a></td></tr>
<tr><td><a href="#k07">sqltest4</a></td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/sqltest4">https://github.com/tisnik/clojure-examples/tree/master/sqltest4</a></td></tr>
<tr><td><a href="#k08">sqltest5</a></td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/sqltest5">https://github.com/tisnik/clojure-examples/tree/master/sqltest5</a></td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Odkazy na Internetu</h2>

<ol>

<li>java.jdbc API Reference<br />
<a href="https://clojure.github.io/java.jdbc/">https://clojure.github.io/java.jdbc/</a>
</li>

<li>Hiccup<br />
<a href="https://github.com/weavejester/hiccup">https://github.com/weavejester/hiccup</a>
</li>

<li>Clojure Ring na GitHubu<br />
<a href="https://github.com/ring-clojure/ring">https://github.com/ring-clojure/ring</a>
</li>

<li>A brief overview of the Clojure web stack<br />
<a href="https://brehaut.net/blog/2011/ring_introduction">https://brehaut.net/blog/2011/ring_introduction</a>
</li>

<li>Getting Started with Ring<br />
<a href="http://www.learningclojure.com/2013/01/getting-started-with-ring.html">http://www.learningclojure.com/2013/01/getting-started-with-ring.html</a>
</li>

<li>Getting Started with Ring and Compojure - Clojure Web Programming<br />
<a href="http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html">http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II<br />
<a href="2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

