<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Clojure - triky při práci s řetězci</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Clojure - triky při práci s řetězci</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dvacátá část seriálu o programovacím jazyku Clojure i o knihovnách, které jsou pro tento jazyk dostupné, se od předchozích částí odlišuje, protože se nebudeme zabývat popisem nových knihoven, ale vrátíme se na samotné začátky programování v Clojure. Zmíníme se totiž o některých tipech a tricích při práci s řetězci.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Clojure - triky při práci s&nbsp;řetězci</a></p>
<p><a href="#k02">2. Funkce pro práci s&nbsp;řetězci ve jmenném prostoru <strong>clojure.string</strong></a></p>
<p><a href="#k03">3. Metody třídy <strong>java.lang.String</strong></a></p>
<p><a href="#k04">4. Konstrukce řetězce z&nbsp;několika částí</a></p>
<p><a href="#k05">5. Test, zda je řetězec prázdný</a></p>
<p><a href="#k06">6. Převody mezi verzálkami a minuskami</a></p>
<p><a href="#k07">7. Funkce <strong>clojure.string/escape</strong></a></p>
<p><a href="#k08">8. Funkce <strong>clojure.string/replace</strong></a></p>
<p><a href="#k09">9. Funkce pro spojování a rozdělování řetězců</a></p>
<p><a href="#k10">10. Řetězce chápané jako sekvence znaků</a></p>
<p><a href="#k11">11. Odkazy na předchozí části tohoto seriálu</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Clojure - triky při práci s řetězci</h2>

<p>Již v&nbsp;perexu tohoto článku bylo napsáno, že se v&nbsp;dnešní části
seriálu o programovacím jazyce Clojure i o knihovnách, které pro tento jazyk
existují, budeme zabývat popisem některých tipů a triků využitelných při práci
s&nbsp;řetězci. Je tomu tak ze dvou důvodů &ndash; řetězce a jejich zpracování
jsou nedílnou součástí většiny nenumerických algoritmů a navíc jsem
z&nbsp;dotazů zjistil, že i ti vývojáři, kteří v&nbsp;jazyku Clojure začali
programovat, mnohdy nevyužívají všech možností nabízených zejména funkcemi ve
jmenném prostoru <strong>clojure.string</strong> a zbytečně pak musí volat
metody třídy <strong>java.lang.String</strong> (tedy využívat tzv.&nbsp;<i>java
interop</i>), což ovšem není totéž (už jen z&nbsp;toho důvodu, že většina
funkcí pro práci s&nbsp;řetězci bez problému &bdquo;přežije&ldquo; předání
hodnoty <strong>nil</strong>, zatímco v&nbsp;případě Javovských metod tomu tak
pochopitelně není).</p>

<p>Důležité je si ihned na začátku práce s&nbsp;řetězci uvědomit, že řetězce
jsou &ndash; ostatně podobně jako je tomu i v&nbsp;Javě &ndash; konstantní a
tudíž i neměnné (<i>immutable</i>), což sice v&nbsp;některých případech může
vést k&nbsp;tvorbě neefektivních operací, kterým se však lze
v&nbsp;<i>Clojure</i> většinou zcela vyhnout. To, že jsou řetězce neměnné však
zjednodušuje tvorbu bezpečných vícevláknových aplikací, řetězce lze efektivně
využívat jako klíče do asociativních polí atd. atd., takže přednosti většinou
převažují nad zápory. Pokud by tomu tak nebylo a některý algoritmus by skutečně
vyžadoval  modifikovatelné řetězce, je možné využít možností knihoven
<strong>java.lang.StringBuffer</strong> a
<strong>java.lang.StringBuilder</strong> [<a
href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html">1</a>]
[<a
href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html">2</a>].</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Funkce pro práci s&nbsp;řetězci ve jmenném prostoru <strong>clojure.string</strong></h2>

<p>Většina užitečných funkcí pro práci s&nbsp;řetězci se nachází ve jmenném
prostoru <strong>clojure.string</strong>. Jedná se o následující funkce:</p>

<table>
<tr><th> #</th><th>Funkce</th><th>Kapitola</th></tr>
<tr><td> 1</td><td>blank?              </td><td><a href="#k05">5</a></td></tr>
<tr><td> 2</td><td>capitalize          </td><td><a href="#k06">6</a></td></tr>
<tr><td> 3</td><td>escape              </td><td><a href="#k07">7</a></td></td></tr>
<tr><td> 4</td><td>join                </td><td><a href="#k09">9</a></td></td></tr>
<tr><td> 5</td><td>lower-case          </td><td><a href="#k06">6</a></td></tr>
<tr><td> 6</td><td>re-quote-replacement</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>replace             </td><td><a href="#k08">8</a></td></tr>
<tr><td> 8</td><td>replace-first       </td><td><a href="#k08">8</a></td></tr>
<tr><td> 9</td><td>reverse             </td><td>&nbsp;</td></tr>
<tr><td>10</td><td>split               </td><td><a href="#k09">9</a></td></td></tr>
<tr><td>11</td><td>split-lines         </td><td><a href="#k09">9</a></td></td></tr>
<tr><td>12</td><td>trim                </td><td>&nbsp;</td></tr>
<tr><td>13</td><td>trim-newline        </td><td>&nbsp;</td></tr>
<tr><td>14</td><td>triml               </td><td>&nbsp;</td></tr>
<tr><td>15</td><td>trimr               </td><td>&nbsp;</td></tr>
<tr><td>16</td><td>upper-case          </td><td><a href="#k06">6</a></td></tr>
</table>

<p>V&nbsp;následujících kapitolách budu předpokládat, že prvním příkazem
skriptu bude načtení jmenného prostoru <strong>clojure.string</strong>
s&nbsp;aliasem <strong>str</strong>:</p>

<pre>
user=&gt; <strong>(require '[clojure.string :as str])</strong>
nil
</pre>

<p>Poznámka: nepoužívejte příkaz <strong>use</strong> namísto
<strong>require</strong>, protože by došlo ke smíchání symbolů
z&nbsp;načítaného modulu se symboly vaší aplikace, což znesnadňuje ladění (aneb
&bdquo;use considered harmful&ldquo;.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Metody třídy <strong>java.lang.String</strong></h2>

<p>Kromě výše zmíněných funkcí dostupných ze jmenného prostoru
<strong>clojure.string</strong> lze v&nbsp;programovacím jazyce Clojure díky
existenci tzv.&nbsp;<i>Java interop</i> volat i metody třídy
<strong>java.lang.String</strong>. Platí přitom, že řetězec vytvořený
v&nbsp;Clojure či řetězcový literál je současně i javovským řetězcem se všemi
z&nbsp;toho vyplývajícími vlastnostmi a omezeními (kódování UTF-16 atd.):</p>

<pre>
user=&gt; <strong>(type "Hello World")</strong>
java.lang.String
</pre>

<p>Připomeňme si, že volání metod nějakého javovského objektu vypadá
následovně:</p>

<pre>
(.názevMetody objekt parametry)
</pre>

<p>Takže lze například použít formu:</p>

<pre>
user=&gt; <strong>(.length "Hello world!")</strong>
12
&nbsp;
user=&gt; <strong>(.getClass "Hello world!")</strong>
java.lang.String
&nbsp;
user=&gt; <strong>(.substring "Hello world!" 5 8)</strong>
" wo"
&nbsp;
user=&gt; <strong>(.hashCode "Hello world!")</strong>
-52966915
&nbsp;
user=&gt; <strong>(.charAt "Hello world!" 11)</strong>
\!
</pre>

<p>Popis všech metod třídy <strong>java.lang.String</strong> lze nalézt na
adrese <a
href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html">http://docs.oracle.com/javase/7/docs/api/java/lang/String.html</a>.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Konstrukce řetězce z&nbsp;několika částí</h2>

<p>Poměrně často se setkáme s&nbsp;nutností zkonstruovat řetězec
z&nbsp;několika částí popř.&nbsp;převést jiný objekt (přesněji řečeno jinou
hodnotu) na řetězec. Zde je řešení snadné, protože je možné použít víceúčelovou
funkci nazvanou <strong>str</strong>. Tato funkce akceptuje libovolný počet
parametrů libovolných typů, dokonce se ani nemusíte bát ji zavolat
s&nbsp;hodnotou <strong>nil</strong> (ostatně předávání této hodnoty do mnoha
funkcí bez kontroly je pro jazyk Clojure idiomatické, na rozdíl od Javy):</p>

<pre>
user=&gt; <strong>(str nil)</strong>
""
&nbsp;
user=&gt; <strong>(str 1 2 3)</strong>
"123"
&nbsp;
user=&gt; <strong>(str [1 2 3])</strong>
"[1 2 3]"
&nbsp;
user=&gt; <strong>(str "first" "second" "third")</strong>
"firstsecondthird"
&nbsp;
user=&gt; <strong>(str "first" "second")</strong>
"firstsecond"
&nbsp;
</pre>

<p>Zastavme se u chvíli u posledního příkladu. V&nbsp;mnoha aplikacích
potřebujeme vypsat na standardní výstup nějaké hodnoty, což (samozřejmě)
zajistí funkce <strong>println</strong>:</p>

<pre>
user=&gt; <strong>(println "first" "second")</strong>
first second
nil
</pre>

<p>Pokud z&nbsp;nějakého důvodu nevyhovuje oddělení hodnot mezerou, pomůže
právě funkce <strong>str</strong>:</p>

<pre>
user=&gt; <strong>(println (str "first" "second"))</strong>
firstsecond
nil
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Test, zda je řetězec prázdný</h2>

<p>Pro test, zda je řetězec prázdný, je možné použít buď metodu
<strong>.isEmpty</strong> třídy <strong>java.lang.String</strong>, funkci
<strong>empty?</strong> nebo funkci <strong>clojure.string/blank?</strong>
(povšimněte si otazníku na konci názvu této funkce). Čím se tyto možnosti od
sebe odlišují? Hlavním rozdílem je, že <strong>clojure.string/blank?</strong>
bez problémů akceptuje hodnotu <strong>nil</strong> (považovanou za prázdný
řetězec), což je v&nbsp;mnoha aplikacích preferováno. Další rozdíl spočívá
v&nbsp;tom, že <strong>clojure.string/blank?</strong> vrací pravdivostní
hodnotu true i pro řetězce obsahující pouze bílé znaky, na rozdíl od
<strong>empty?</strong>:</p>

<pre>
user=&gt; <strong>(empty? nil)</strong>
true
&nbsp;
user=&gt; <strong>(empty? "")</strong>
true
&nbsp;
user=&gt; <strong>(empty? " ")</strong>
false
&nbsp;
user=&gt; <strong>(empty? "Hello world!")</strong>
false
</pre>

<pre>
user=&gt; <strong>(str/blank? nil)</strong>
true
&nbsp;
user=&gt; <strong>(str/blank? "")</strong>
true
&nbsp;
user=&gt; <strong>(str/blank? " ")</strong>
true
&nbsp;
user=&gt; <strong>(str/blank? "Hello world!")</strong>
false
</pre>

<pre>
user=&gt; <strong>(.isEmpty nil)</strong>
NullPointerException   clojure.lang.Reflector.invokeNoArgInstanceMember (Reflector.java:301)
&nbsp;
user=&gt; <strong>(.isEmpty "")</strong>
true
&nbsp;
user=&gt; <strong>(.isEmpty " ")</strong>
false
&nbsp;
user=&gt; <strong>(.isEmpty "Hello world!")</strong>
false
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Převody mezi verzálkami a minuskami</h2>

<p>V&nbsp;některých aplikacích je nutné převádět minusky na verzálky a naopak.
Opět je možné si vybrat mezi metodami třídy <strong>java.lang.String</strong> a
funkcemi jmenného prostoru <strong>clojure.string</strong>. Podívejme se ihned
na příklady, z&nbsp;nichž je použití těchto funkcí pravděpodobně zřejmé:</p>

<pre>
user=&gt; <strong>(.toLowerCase "Hello world!")</strong>
"hello world!"
&nbsp;
user=&gt; <strong>(str/upper-case "Hello world!")</strong>
"HELLO WORLD!"
&nbsp;
user=&gt; <strong>(str/lower-case "Hello world!")</strong>
"hello world!"
&nbsp;
user=&gt; <strong>(str/capitalize "Hello world!")</strong>
"Hello world!"
&nbsp;
user=&gt; <strong>(str/capitalize "HeLLo wOrld!")</strong>
"Hello world!
</pre>

<p>A jak jsme na tom s&nbsp;nabodeníčky? Docela dobře, však jsme
v&nbsp;21.&nbsp;století:</p>

<pre>
user=&gt; <strong>(str/upper-case "Příliš žluťoučký kůň úpěl ďábelské ódy")</strong>
"PŘÍLIŠ ŽLUŤOUČKÝ KŮŇ ÚPĚL ĎÁBELSKÉ ÓDY"
&nbsp;
user=&gt; <strong>(str/lower-case "Příliš žluťoučký kůň úpěl ďábelské ódy")</strong>
"příliš žluťoučký kůň úpěl ďábelské ódy"
&nbsp;
user=&gt; <strong>(str/capitalize "Příliš žluťoučký kůň úpěl ďábelské ódy")</strong>
"Příliš žluťoučký kůň úpěl ďábelské ódy"
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Funkce <strong>clojure.string/escape</strong></h2>

<p>Konečně se dostáváme k&nbsp;zajímavějším funkcím. Poměrně užitečnou funkcí
je funkce nazvaná <strong>clojure.string/escape</strong>, které lze předat
převodní tabulku (znak na znak, znak na řetězec atd.); jedná se vlastně o
určitou obdobu funkce <strong>tr</strong>. Zmíněná převodní tabulka má podobu
mapy:</p>

<pre>
user=&gt; <strong>(str/escape "Hello world!" {\l "*"})</strong>
"He**o wor*d!"
&nbsp;
user=&gt; <strong>(str/escape "Hello world!" {\l "*" \o \-})</strong>
"He**- w-r*d!"
</pre>

<p>Podívejme se na použití této funkce ve skutečné aplikaci, konkrétně na
místě, kde je zapotřebí nahrazovat trojici znaků, které mají speciální význam
v&nbsp;XML či HTML:</p>

<pre>
(defn <strong>escape-xml-chars</strong>
    [string]
    (clojure.string/escape string
        {\&lt; "&amp;lt;", \&gt; "&amp;gt;", \&amp; "&amp;amp;"}))
&nbsp;
(escape-xml-chars "Hello &lt;world&gt;")
"Hello &amp;lt;world&amp;gt;
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Funkce <strong>clojure.string/replace</strong></h2>

<p>Jedna z&nbsp;nejužitečnějších funkcí při práci s&nbsp;řetězci je funkce
<strong>clojure.string/replace</strong>. V&nbsp;nejjednodušší podobě se této
funkci předává řetězec, nahrazovaná sekvence znaků a řetězec, který se použije
namísto nahrazované sekvence znaků:</p>

<pre>
user=&gt; <strong>(str/replace "Hello world!" " " "_")</strong>
"Hello_world!"
&nbsp;
user=&gt; <strong>(str/replace "Hello world!" "o" "0")</strong>
"Hell0 w0rld!"
&nbsp;
user=&gt; <strong>(str/replace "Hello world!" " " "___")</strong>
"Hello___world!"
&nbsp;
user=&gt; <strong>(str/replace "Hello world!" "world" "Clojure")</strong>
"Hello Clojure!"
</pre>

<p>V&nbsp;alternativní podobě je možné namísto nahrazovaného řetězce použít
regulární výraz. Připomeňme si, že pro regulární výrazy v&nbsp;Clojure existuje
speciální zápis se znakem #. Díky tomu není nutné mnoho znaků ve výrazu
quotovat tak, jako je tomu v&nbsp;mnoha dalších programovacích jazycích:</p>

<pre>
user=&gt; <strong>(str/replace "Hello world!" #"[a-z]" ".")</strong>
"H.... .....!"
&nbsp;
user=&gt; <strong>(str/replace "Hello world!" #"[A-Za-z]+" "[word]")</strong>
"[word] [word]!"
&nbsp;
user=&gt; <strong>(str/replace "Hello world!" #"\w+" "[word]")</strong>
"[word] [word]!"
&nbsp;
user=&gt; <strong>(str/replace "Hello world!" #"\s" "_")</strong>
"Hello_world!"
</pre>

<p>Nejzajímavější je ovšem třetí podoba, kde se namísto nahrazovacího řetězce
použije funkce, typicky funkce anonymní. V&nbsp;této funkci je možné použít
speciální jména parametrů %1 atd., do nichž se uloží hodnoty zachycené do
příslušného registru. V&nbsp;následujícím příkladu se *slovo* zvýrazní jako
<strong>slovo</strong>, podobně jako je tomu v&nbsp;AsciiDocu (povšimněte si
použití zpětného lomítka před znakem hvězdičky):</p>

<pre>
user=&gt; <strong>(str/replace "Hello world!" #"\*(\w+)\*" #(str "&lt;strong&gt;" (second %1) "&lt;/strong&gt;"))</strong>
"Hello world!"
&nbsp;
user=&gt; <strong>(str/replace "Hello *world*!" #"\*(\w+)\*" #(str "&lt;strong&gt;" (second %1) "&lt;/strong&gt;"))</strong>
"Hello &lt;strong&gt;world&lt;/strong&gt;!"
&nbsp;
user=&gt; <strong>(str/replace "*Hello* *world*!" #"\*(\w+)\*" #(str "&lt;strong&gt;" (second %1) "&lt;/strong&gt;"))</strong>
"&lt;strong&gt;Hello&lt;/strong&gt; &lt;strong&gt;world&lt;/strong&gt;!"
&nbsp;
</pre>

<p>Kdo se ještě neztratil, může si vyzkoušet následující regulární výraz, který
bude posléze využitý:</p>

<pre>
(def <strong>http-regexp</strong>
    #"https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&amp;//=]*)")
&nbsp;
user=&gt; <strong>(re-find http-regexp "xyzzy")</strong>
nil
&nbsp;
user=&gt; <strong>(re-find http-regexp "Podivejte se na http://www.root.cz!")</strong>
["http://www.root.cz" "www." ""]
&nbsp;
user=&gt; <strong>(re-find http-regexp "Na http://www.google.com jsem to nenasel.")</strong>
["http://www.google.com" "www." ""]
</pre>

<p>Nyní regulární výraz navázaný na symbol <strong>http-regexp</strong>
využijeme ve funkci, která v&nbsp;řetězci najde URL a nahradí je příslušnou
HTML značkou:</p>

<pre>
(defn <strong>create-links</strong>
    [string]
    (let [href (re-find http-regexp string)]
        (if href
            (str/replace string http-regexp (str "&lt;a href='" (first href) "'&gt;" (first href) "&lt;/a&gt;"))
            string)))
&nbsp;
user=&gt; <strong>(create-links "Podivejte se na http://www.root.cz!")</strong>
"Podivejte se na &lt;a href='http://www.root.cz'&gt;http://www.root.cz&lt;/a&gt;!"
user=&gt; <strong>(create-links "Na http://www.google.com jsem to nenasel.")</strong>
"Na &lt;a href='http://www.google.com'&gt;http://www.google.com&lt;/a&gt; jsem to nenasel."
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Funkce pro spojování a rozdělování řetězců</h2>

<p>Pro spojení řetězců se používá funkce <strong>clojure.string/join</strong>,
které je možné v&nbsp;prvním parametru předat znak (či řetězec), který se vloží
mezi spojované části. Použití této funkce je snadné:</p>

<pre>
user=&gt; <strong>(str/join (range 1 10))</strong>
"123456789"
&nbsp;
user=&gt; <strong>(str/join "," (range 1 10))</strong>
"1,2,3,4,5,6,7,8,9"
</pre>

<p>Pro rozdělení řetězce na části lze použít funkci
<strong>clojure.string/split</strong>. V&nbsp;mnoha případech je však snadnější
použít <strong>clojure.string/split-lines</strong>, která řetězec rozdělí na
znacích pro nový řádek. To je velmi výhodné, například při načítání
konfiguračních či databázových souborů:</p>

<pre>
user=&gt; <strong>(str/split-lines "Hello\nworld")</strong>
["Hello" "world"]
</pre>

<p>Podívejme se na praktický příklad:</p>

<pre>
(slurp "/etc/passwd")
&nbsp;
(str/split-lines (slurp "/etc/passwd"))
&nbsp;
(for [line (str/split-lines (slurp "/etc/passwd"))]
    (first (str/split line #":")))
</pre>

<p>Výsledek (jména uživatelů) lze setřídit:</p>

<pre>
(sort
    (for [line (str/split-lines (slurp "/etc/passwd"))]
        (first (str/split line #":"))))
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Řetězce chápané jako sekvence znaků</h2>

<p>Řetězce lze funkcí <strong>seq</strong> rozdělit na sekvenci znaků a použít
tak všechny funkce, které Clojure pro práci se sekvencemi nabízí (třeba i
zajímavou funkci <strong>frequencies</strong>):</p>

<pre>
user=&gt; <strong>(seq "hello world!")</strong>
(\h \e \l \l \o \space \w \o \r \l \d \!)
&nbsp;
user=&gt; <strong>(-> (concat (range 1 12) (range 3 10) [6]) frequencies)</strong>
{7 2, 1 1, 4 2, 6 3, 3 2, 2 1, 11 1, 9 2, 5 2, 10 1, 8 2}
&nbsp;
user=&gt; <strong>(frequencies (seq "hello world!"))</strong>
{\space 1, \! 1, \d 1, \e 1, \h 1, \l 3, \o 2, \r 1, \w 1}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odkazy na předchozí části tohoto seriálu</h2>

<p>Stalo se již zvykem uvést odkazy na všechny předchozí části tohoto seriálu.
Tento zvyk samozřejmě dodržíme i dnes:</p>

<ol>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (2)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (3)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/</a>
</li>

</ol>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Clojure home page<br />
<a href="http://clojure.org/downloads">http://clojure.org/downloads</a>
</li>

<li>Clojure - Functional Programming for the JVM<br />
<a href="http://java.ociweb.com/mark/clojure/article.html">http://java.ociweb.com/mark/clojure/article.html</a>
</li>

<li>Clojure quick reference<br />
<a href="http://faustus.webatu.com/clj-quick-ref.html">http://faustus.webatu.com/clj-quick-ref.html</a>
</li>

<li>4Clojure<br />
<a href="http://www.4clojure.com/">http://www.4clojure.com/</a>
</li>

<li>ClojureDoc<br />
<a href="http://clojuredocs.org/">http://clojuredocs.org/</a>
</li>

<li>Clojure (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Clojure">http://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Clojure (Wikipedia CS)<br />
<a href="http://cs.wikipedia.org/wiki/Clojure">http://cs.wikipedia.org/wiki/Clojure</a>
</li>

<li>Riastradh's Lisp Style Rules<br />
<a href="http://mumble.net/~campbell/scheme/style.txt">http://mumble.net/~campbell/scheme/style.txt</a>
</li>

<li>Dynamic Languages Strike Back<br />
<a href="http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html">http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html</a>
</li>

<li>Scripting: Higher Level Programming for the 21st Century<br />
<a href="http://www.tcl.tk/doc/scripting.html">http://www.tcl.tk/doc/scripting.html</a>
</li>

<li>Java Virtual Machine Support for Non-Java Languages<br />
<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html">http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html</a>
</li>

<li>Třída java.lang.String<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html">http://docs.oracle.com/javase/7/docs/api/java/lang/String.html</a>
</li>

<li>Třída java.lang.StringBuffer<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html">http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html</a>
</li>

<li>Třída java.lang.StringBuilder<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html">http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html</a>
</li>

<li>StringBuffer versus String<br />
<a href="http://www.javaworld.com/article/2076072/build-ci-sdlc/stringbuffer-versus-string.html">http://www.javaworld.com/article/2076072/build-ci-sdlc/stringbuffer-versus-string.html</a>
</li>

<li>Threading macro (dokumentace k&nbsp;jazyku Clojure)<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;</a>
</li>

<li>Understanding the Clojure -&gt; macro<br />
<a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/</a>
</li>

<li>clojure.inspector<br />
<a href="http://clojure.github.io/clojure/clojure.inspector-api.html">http://clojure.github.io/clojure/clojure.inspector-api.html</a>
</li>

<li>The Clojure Toolbox<br />
<a href="http://www.clojure-toolbox.com/">http://www.clojure-toolbox.com/</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

