<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Formát EDN: extensible data notation</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Formát EDN: extensible data notation</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Formát EDN: extensible data notation</a></p>
<p><a href="#k02">*** 2. Základní datové typy podporované formátem EDN</a></p>
<p><a href="#k03">*** 3. Řetězce versus keywords</a></p>
<p><a href="#k04">*** 4. Kolekce, které lze v&nbsp;EDN použít</a></p>
<p><a href="#k05">*** 5. Pravidla pro porovnávání</a></p>
<p><a href="#k06">*** 6. Štítky jako prostředek pro rozšíření formátu EDN</a></p>
<p><a href="#k07">*** 7. Podpora formátu EDN v&nbsp;různých programovacích jazycích</a></p>
<p><a href="#k08">*** 8. Clojure</a></p>
<p><a href="#k09">*** 9. Python</a></p>
<p><a href="#k10">*** 10. Go</a></p>
<p><a href="#k11">*** 11. Praktická část</a></p>
<p><a href="#k12">*** 12. Převod mezi formátem JSON a EDN v&nbsp;Pythonu</a></p>
<p><a href="#k13">*** 13. Převod mezi formátem EDN a JSON v&nbsp;Pythonu</a></p>
<p><a href="#k14">*** 14. Převod mezi souborem .properties a formátem EDN v&nbsp;Clojure</a></p>
<p><a href="#k15">*** 15. Převod mezi XML a EDN (plná varianta zachovávající vlastnosti XML)</a></p>
<p><a href="#k16">*** 16. Převod XML do různých forem formátu EDN s&nbsp;využitím knihovny Tupelo.forest</a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Formát EDN: extensible data notation</h2>

<p></p>

<p><a href="https://pypi.org/project/edn-format/">v&nbsp;Pythonu</a>. Formát <i>EDN</i> neboli <i>Extensible Data Notation</i> vychází ze syntaxe a sémantiky programovacího jazyka Clojure, je tedy založen na <a href="https://en.wikipedia.org/wiki/S-expression">S-výrazech</a> rozšířených o možnost zápisu map (slovníků) a vektorů. Formát <i>EDN</i> je rozšířen primárně v&nbsp;ekosystému jazyka Clojure. Popis tohoto formátu (a tím pádem i popis syntaxe Clojure) naleznete na stránce <a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní datové typy podporované formátem EDN</h2>

<p></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Řetězce versus keywords</h2>

<p></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Kolekce, které lze v&nbsp;EDN použít</h2>

<p></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Pravidla pro porovnávání</h2>

<p></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Štítky jako prostředek pro rozšíření formátu EDN</h2>

<p></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Podpora formátu EDN v&nbsp;různých programovacích jazycích</h2>

<p></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Clojure</h2>

<p></p>

<table>
<tr><th>#</th><th></th><th></th></tr>
<tr><td>1</td><td>read</td><td></td></tr>
<tr><td>2</td><td>read-string</td><td></td></tr>
</table>

user=> (require '[clojure.edn :as edn])

user=> (doc edn/read)
-------------------------
clojure.edn/read
([] [stream] [opts stream])
  Reads the next object from stream, which must be an instance of
  java.io.PushbackReader or some derivee.  stream defaults to the
  current value of *in*.

  Reads data in the edn format (subset of Clojure data):
  http://edn-format.org

  opts is a map that can include the following keys:
  :eof - value to return on end-of-file. When not supplied, eof throws an exception.
  :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.
              When not supplied, only the default-data-readers will be used.
  :default - A function of two args, that will, if present and no reader is found for a tag,
             be called with the tag and the value.

user=> (doc edn/read-string)
-------------------------
clojure.edn/read-string
([s] [opts s])
  Reads one object from the string s. Returns nil when s is nil or empty.

  Reads data in the edn format (subset of Clojure data):
  http://edn-format.org

  opts is a map as per clojure.edn/read

<pre>
user=> (doc prn-str)
-------------------------
clojure.core/prn-str
([& xs])
  prn to a string, returning it
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Python</h2>

<p></p>

>>> import edn_format


>>> help(edn_format)

Help on package edn_format:

NAME
    edn_format - # -*- coding: utf-8 -*-

PACKAGE CONTENTS
    edn_dump
    edn_lex
    edn_parse
    exceptions
    immutable_dict
    immutable_list
    parsetab


<table>
<tr><th>#</th><th></th><th></th></tr>
<tr><td>1</td><td>loads</td><td></td></tr>
<tr><td>2</td><td>loads_all</td><td></td></tr>
<tr><td>3</td><td>dumps</td><td></td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Go</h2>

<p></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Praktická část</h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Převod mezi formátem JSON a EDN v&nbsp;Pythonu</h2>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
<i># Converts structured data from JSON format into EDN format.</i>
&nbsp;
import sys
import json
import edn_format
&nbsp;
<i># Check if command line argument is specified (it is mandatory).</i>
if len(sys.argv) &lt; 2:
    print("Usage:")
    print("  json2edn.py input_file.csv")
    print("Example:")
    print("  json2edn.py report.csv")
    sys.exit(1)
&nbsp;
<i># First command line argument should contain name of input JSON file.</i>
input_json = sys.argv[1]
&nbsp;
<i># Try to open the JSON file specified.</i>
with open(input_json) as json_input:
    <i># open the JSON file and parse it</i>
    payload = json.load(json_input)
    <i># dump the parsed data structure into EDN format</i>
    print(edn_format.dumps(payload))
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Převod mezi formátem EDN a JSON v&nbsp;Pythonu</h2>

<pre>
#!/usr/bin/env python3

# Converts structured data from EDN format into JSON format.

import sys
import json
import edn_format

# Check if command line argument is specified (it is mandatory).
if len(sys.argv) < 2:
    print("Usage:")
    print("  edn2json.py input_file.edn")
    print("Example:")
    print("  edn2json.py report.edn")
    sys.exit(1)

# First command line argument should contain name of input EDN file.
filename = sys.argv[1]


# Taken from https://github.com/swaroopch/edn_format/issues/76#issuecomment-749618312
def edn_to_map(x):
    if isinstance(x, edn_format.ImmutableDict):
        return {edn_to_map(k): edn_to_map(v) for k, v in x.items()}
    elif isinstance(x, edn_format.ImmutableList):
        return [edn_to_map(v) for v in x]
    elif isinstance(x, edn_format.Keyword):
        return x.name
    else:
        return x


# Try to open the EDN file specified.
with open(filename, "r") as edn_input:
    # open the EDN file and parse it
    payload = edn_format.loads(edn_input.read())
    print(json.dumps(edn_to_map(payload), indent=2))
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Převod mezi souborem .properties a formátem EDN v&nbsp;Clojure</h2>

<pre>
(ns properties2edn.core)


(defn properties->map
  "Convert properties entries into a map. Keys are converted into proper keywords."
  [properties]
  (into {}
        (for [[k v] properties]
              [(keyword k) v])))


(defn load-properties-file
  "Load configuration from the provided properties file."
  [file-name]
  (with-open [reader (clojure.java.io/reader file-name)]
    (let [properties (java.util.Properties.)]
      (.load properties reader)
      (properties->map properties))))


(defn properties->edn
  "Convert properties file into EDN format."
  [properties-file-name edn-file-name]
  (let [payload (load-properties-file properties-file-name)
        fout    (clojure.java.io/writer edn-file-name)]
    (clojure.pprint/pprint payload fout)))


(defn -main
  [& args]
  (properties->edn "test.properties" "test.edn"))
</pre>

<pre>
# This file is shared currently between this Gradle build and the
# Ant builds for fd303 and JavaScript. Keep the dotted notation for
# the properties to minimize the changes in the dependencies.
thrift.version=0.14.0
thrift.groupid=org.apache.thrift
release=false

# Local Install paths
install.path=/usr/local/lib
install.javadoc.path=/usr/local/lib

# Test execution properties
testPort=9090

# Test with Clover Code coverage (disabled by default)
cloverEnabled=false

# Maven dependency download locations
mvn.repo=https://repo1.maven.org/maven2
apache.repo=https://repository.apache.org/content/repositories/releases

# Apache Maven publish
license=https://www.apache.org/licenses/LICENSE-2.0.txt
maven-repository-url=https://repository.apache.org/service/local/staging/deploy/maven2
maven-repository-id=apache.releases.https

# Dependency versions
httpclient.version=4.5.10
httpcore.version=4.4.12
slf4j.version=1.7.28
#servlet.version=2.5
#It contains servlet3
tomcat.embed.version=8.5.46
junit.version=4.12
mockito.version=1.10.19
javax.annotation.version=1.3.2
</pre>

<pre>
{:tomcat.embed.version "8.5.46",
 :thrift.version "0.14.0",
 :httpclient.version "4.5.10",
 :mockito.version "1.10.19",
 :javax.annotation.version "1.3.2",
 :thrift.groupid "org.apache.thrift",
 :license "https://www.apache.org/licenses/LICENSE-2.0.txt",
 :install.javadoc.path "/usr/local/lib",
 :slf4j.version "1.7.28",
 :httpcore.version "4.4.12",
 :release "false",
 :mvn.repo "https://repo1.maven.org/maven2",
 :maven-repository-url
 "https://repository.apache.org/service/local/staging/deploy/maven2",
 :maven-repository-id "apache.releases.https",
 :testPort "9090",
 :apache.repo
 "https://repository.apache.org/content/repositories/releases",
 :junit.version "4.12",
 :cloverEnabled "false",
 :install.path "/usr/local/lib"}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Převod mezi XML a EDN (plná varianta zachovávající vlastnosti XML)</h2>

<pre>
(ns xml2edn.core)

(use '[clojure.xml])


(defn xml->edn
  "Convert XML file into EDN format."
  [xml-file-name edn-file-name]
  (let [payload (clojure.xml/parse "nested.xml")
        fout    (clojure.java.io/writer edn-file-name)]
    (clojure.pprint/pprint payload fout)))


(defn -main
  [& args]
  (xml->edn "nested.xml" "nested.edn"))
</pre>

<pre>
<?xml version="1.0"?>
<first>
  <second value="A">
    <third>
      <fourth>Hello A</fourth>
    </third>
  </second>
  <second value="B">
    <third>
      <fourth>Hello B</fourth>
    </third>
  </second>
</first>
</pre>

<pre>
{:tag :first,
 :attrs nil,
 :content
 [{:tag :second,
   :attrs {:value "A"},
   :content
   [{:tag :third,
     :attrs nil,
     :content [{:tag :fourth, :attrs nil, :content ["Hello A"]}]}]}
  {:tag :second,
   :attrs {:value "B"},
   :content
   [{:tag :third,
     :attrs nil,
     :content [{:tag :fourth, :attrs nil, :content ["Hello B"]}]}]}]}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Převod XML do různých forem formátu EDN s&nbsp;využitím knihovny Tupelo.forest</h2>

<pre>
(defproject forest-demo "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0"
            :url "https://www.eclipse.org/legal/epl-2.0/"}
  :dependencies [[org.clojure/clojure "1.10.1"]
                 [tupelo "21.04.13"]]
  :main ^:skip-aot forest-demo.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all
                       :jvm-opts ["-Dclojure.compiler.direct-linking=true"]}})
</pre>

<pre>
(ns forest-demo.core)

(require '[clojure.xml :as xml])
(require '[tupelo.forest :as tf])


(defn pprint-to-file
  [filename payload]
  (clojure.pprint/pprint payload (clojure.java.io/writer filename)))


(defn -main
  [& args]
  (let [payload        (xml/parse "nested.xml")
        hiccup-format  (tf/enlive->hiccup payload)
        bush-format    (tf/enlive->bush payload)
        tree-format    (tf/enlive->tree payload)]
    (pprint-to-file "nested-enlive.edn" payload)
    (pprint-to-file "nested-hiccup.edn" hiccup-format)
    (pprint-to-file "nested-bush.edn" bush-format)
    (pprint-to-file "nested-tree.edn" tree-format)))
</pre>

<pre>
<?xml version="1.0"?>
<first>
  <second value="A">
    <third>
      <fourth>Hello A</fourth>
    </third>
  </second>
  <second value="B">
    <third>
      <fourth>Hello B</fourth>
    </third>
  </second>
</first>
</pre>

<pre>
{:tag :first,
 :attrs nil,
 :content
 [{:tag :second,
   :attrs {:value "A"},
   :content
   [{:tag :third,
     :attrs nil,
     :content [{:tag :fourth, :attrs nil, :content ["Hello A"]}]}]}
  {:tag :second,
   :attrs {:value "B"},
   :content
   [{:tag :third,
     :attrs nil,
     :content [{:tag :fourth, :attrs nil, :content ["Hello B"]}]}]}]}
</pre>

<pre>
[:first
 [:second {:value "A"} [:third [:fourth "Hello A"]]]
 [:second {:value "B"} [:third [:fourth "Hello B"]]]]
</pre>

<pre>
[{:tag :first}
 [{:value "A", :tag :second}
  [{:tag :third} [{:tag :fourth, :value "Hello A"}]]]
 [{:value "B", :tag :second}
  [{:tag :third} [{:tag :fourth, :value "Hello B"}]]]]
</pre>

<pre>
{:tag :first,
 :tupelo.forest/kids
 [{:value "A",
   :tag :second,
   :tupelo.forest/kids
   [{:tag :third,
     :tupelo.forest/kids
     [{:tag :fourth, :value "Hello A", :tupelo.forest/kids []}]}]}
  {:value "B",
   :tag :second,
   :tupelo.forest/kids
   [{:tag :third,
     :tupelo.forest/kids
     [{:tag :fourth, :value "Hello B", :tupelo.forest/kids []}]}]}]}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů vyvinutých
v&nbsp;programovacím jazyku Clojure, Python i Go, byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>:</p>

<table>
<tr><th>#</th><th>Zdrojový kód</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td>1</td><td>json2edn.py</td><td>konverze mezi formátem JSON a EDN naprogramovaná v&nbsp;Pythonu</td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/">https://github.com/tisnik/presentations/blob/master/edn/</a></td></tr>
<tr><td>2</td><td>edn2json.py</td><td>konverze mezi formátem EDN a JSON naprogramovaná v&nbsp;Pythonu</td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/">https://github.com/tisnik/presentations/blob/master/edn/</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/">https://github.com/tisnik/presentations/blob/master/edn/</a></td></tr>
<tr><td>4</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/">https://github.com/tisnik/presentations/blob/master/edn/</a></td></tr>
<tr><td>5</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/">https://github.com/tisnik/presentations/blob/master/edn/</a></td></tr>
<tr><td>6</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/">https://github.com/tisnik/presentations/blob/master/edn/</a></td></tr>
<tr><td>7</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/edn/">https://github.com/tisnik/presentations/blob/master/edn/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>edn &ndash; extensible data notation<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Programming with Data and EDN<br />
<a href="https://docs.datomic.com/cloud/whatis/edn.html">https://docs.datomic.com/cloud/whatis/edn.html</a>
</li>

<li>Video about EDN<br />
<a href="https://docs.datomic.com/cloud/livetutorial/edntutorial.html">https://docs.datomic.com/cloud/livetutorial/edntutorial.html</a>
</li>

<li>(Same) video about EDN on Youtube<br />
<a href="https://www.youtube.com/watch?v=5eKgRcvEJxU">https://www.youtube.com/watch?v=5eKgRcvEJxU</a>
</li>

<li>clojure.edn<br />
<a href="https://clojuredocs.org/clojure.edn">https://clojuredocs.org/clojure.edn</a>
</li>

<li>API for clojure.edn - Clojure v1.10.2 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.edn-api.html">https://clojure.github.io/clojure/clojure.edn-api.html</a>
</li>

<li>Clojure EDN Walkthrough<br />
<a href="https://www.compoundtheory.com/clojure-edn-walkthrough/">https://www.compoundtheory.com/clojure-edn-walkthrough/</a>
</li>

<li>Články týkající se Pythonu na Rootu<br />
<a href="https://www.root.cz/n/python/">https://www.root.cz/n/python/</a>
</li>

<li>Články týkající se programovacího jazyka Clojure na Rootu<br />
<a href="https://www.root.cz/n/clojure/">https://www.root.cz/n/clojure/</a>
</li>

<li>Seriál Programovací jazyk Go<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-go/">https://www.root.cz/serialy/programovaci-jazyk-go/</a>
</li>

<li>Crux<br />
<a href="https://opencrux.com/main/index.html">https://opencrux.com/main/index.html</a>
</li>

<li>Crux Installation<br />
<a href="https://opencrux.com/reference/21.04-1.16.0/installation.html">https://opencrux.com/reference/21.04-1.16.0/installation.html</a>
</li>

<li>read<br />
<a href="https://clojuredocs.org/clojure.edn/read">https://clojuredocs.org/clojure.edn/read</a>
</li>

<li>read-string<br />
<a href="https://clojuredocs.org/clojure.edn/read-string">https://clojuredocs.org/clojure.edn/read-string</a>
</li>

<li>Tupelo 21.04.12 (dokumentace)<br />
<a href="https://cloojure.github.io/doc/tupelo/">https://cloojure.github.io/doc/tupelo/</a>
</li>

<li>tupelo - Clojure With A Spoonful of Honey<br />
<a href="https://clojars.org/tupelo">https://clojars.org/tupelo</a>
</li>

<li>Clojure Cookbook: Templating HTML with Enlive<br />
<a href="https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc">https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc</a>
</li>

<li>An Introduction to Enlive<br />
<a href="https://github.com/swannodette/enlive-tutorial/">https://github.com/swannodette/enlive-tutorial/</a>
</li>

<li>Enlive na GitHubu<br />
<a href="https://github.com/cgrand/enlive">https://github.com/cgrand/enlive</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

