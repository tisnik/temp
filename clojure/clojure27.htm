<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Enlive - výkonný šablonovací systém pro jazyk Clojure (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Enlive - výkonný šablonovací systém pro jazyk Clojure (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku o programovacím jazyce Clojure a o knihovnách, které jsou pro tento jazyk vytvořeny, dokončíme popis knihovny Enlive. Zabývat se budeme vytvářením tabulek z předložené šablony a taktéž funkcemi pro přečtení zvolených informací z HTML stránek. Enlive je totiž možné použít i pro &bdquo;vyzobávání&ldquo; dat.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Enlive - výkonný šablonovací systém pro jazyk Clojure (dokončení)</a></p>
<p><a href="#k02">2. Vytvoření tabulky v&nbsp;HTML s&nbsp;využitím snippetu</a></p>
<p><a href="#k03">3. Použití knihovny Enlive pro získávání dat z&nbsp;HTML stránek</a></p>
<p><a href="#k04">4. Příklad <strong>enlive5</strong> &ndash; použití funkcí html-resource a select</a></p>
<p><a href="#k05">5. Příklad <strong>enlive6</strong> &ndash; threading makro jako cesta k&nbsp;čitelnějšímu zdrojovému kódu</a></p>
<p><a href="#k06">6. Příklad <strong>enlive7</strong> &ndash; příklad použití speciální formy doto</a></p>
<p><a href="#k07">7. Další typy selektorů nabízené knihovnou Enlive</a></p>
<p><a href="#k08">8. Příklad <strong>enlive8</strong> &ndash; použití :&gt; a (attr=) ve funkci select</a></p>
<p><a href="#k09">9. Repositář s&nbsp;dnešními demonstračními příklady</a></p>
<p><a href="#k10">10. Odkazy na předchozí části tohoto seriálu</a></p>
<p><a href="#k11">11. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Enlive - výkonný šablonovací systém pro jazyk Clojure (dokončení)</h2>

<p><a
href="http://www.root.cz/clanky/enlive-vykonny-sablonovaci-system-pro-jazyk-clojure/">V&nbsp;předchozí
části</a> seriálu o programovacím jazyce Clojure i o knihovnách, které mohou
zjednodušit a současně i zlevnit vývoj aplikací vytvářených v&nbsp;tomto
programovacím jazyku, jsme se seznámili s&nbsp;některými principy, na nichž je
postavena knihovna pojmenovaná <i>Enlive</i>. Tuto knihovnu je možné použít
několika způsoby: jak pro generování dynamických HTML stránek s&nbsp;využitím
HTML šablony a sady funkcionálně zapsaných transformačních pravidel
(v&nbsp;nichž jsou použity takzvané <i>selektory</i>), tak i pro
&bdquo;vyzobávání&ldquo; dat z&nbsp;existujících HTML stránek. Například je
relativně jednoduché programově načíst úvodní stránku <a
href="http://www.root.cz">Roota</a> a následně z&nbsp;ní získat nadpisy všech
článků, zpráviček atd. Právě s&nbsp;touto poměrně zajímavou (a pro některé
aplikace i velmi praktickou) problematikou se seznámíme v&nbsp;navazujících
kapitolách, nejprve však dokončíme problematiku takzvaných <i>snippetů</i>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vytvoření tabulky v&nbsp;HTML s&nbsp;využitím snippetu</h2>

<p>V&nbsp;posledním demonstračním příkladu, který byl popsán <a
href="http://www.root.cz/clanky/enlive-vykonny-sablonovaci-system-pro-jazyk-clojure/#k08">na
samotném konci předchozí části seriálu</a>, byly použity takzvané
&bdquo;snippety&ldquo; umožňující v&nbsp;generované HTML stránce opakovat
elementy (s&nbsp;jinými daty). Připomeňme si, že u každého snippetu se nějakým
selektorem specifikuje počáteční a koncový element v&nbsp;HTML šabloně a poté
již snippet dokáže opakovat tu část HTML stránky, která se nachází uvnitř
specifikovaných elementů. Tento postup můžeme využít i pro tvorbu tabulek, což
je s&nbsp;velkou pravděpodobností nejčastější způsob zobrazení obsahu nějaké
sekvence, tj.&nbsp;v&nbsp;pojetí Clojure typicky seznamu či vektoru. Právě
tímto způsobem vytvořený snippet využijeme v&nbsp;dnešním prvním demonstračním
příkladu, v&nbsp;němž se vytvoří HTML stránka obsahující herecké obsazení
v&nbsp;divadelní hře &bdquo;Vražda v&nbsp;salonním coupé&ldquo;.</p>

<p>Kostra projektu demonstračního příkladu se vygeneruje jednoduše:</p>

<pre>
lein new app
</pre>

<p>Projektový soubor je nutné upravit takovým způsobem, aby se při spuštění
aplikace mohlo pracovat i s&nbsp;knihovnou <i>Enlive</i>:</p>

<pre>
(defproject <strong>enlive4</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   [enlive "1.1.1"]]
    :main ^:skip-aot enlive4.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Následuje ukázka šablony uložené v&nbsp;adresáři <strong>resources</strong>.
Povšimněte si, že šablona je oproti předchozím příkladům upravena. Především
v&nbsp;ní můžeme nalézt základ HTML tabulky, tabulka samotná má ID nastaveno na
&bdquo;roles&ldquo;, jediný řádek tabulky pak má ID nastaveno na
&bdquo;role&ldquo;. Na tomto řádku se nachází dvě buňky, první má ID
&bdquo;actor&ldquo; a druhá &bdquo;character&ldquo;. Tabulka je tak vlastně
samopopisná:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Testovaci stranka&lt;/title&gt;
        &lt;meta name="Author" content="Pavel Tisnovsky"&gt;
        &lt;meta name="Generator" content="vim"&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Hra &lt;span&gt;&lt;/span&gt;&lt;/h1&gt;
        &lt;table id="roles"&gt;
            &lt;tr id="role"&gt;
                &lt;td id="actor"&gt;herec&lt;/td&gt;
                &lt;td id="character"&gt;postava&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
        &lt;div&gt;Pokracovani&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Zdrojový kód demonstračního příkladu uložený v&nbsp;souboru
<strong>src/enlive4/core.clj</strong>:</p>

<pre>
(ns <strong>enlive4.core</strong>
    (:gen-class))
&nbsp;
(require '[net.cgrand.enlive-html :as html])
&nbsp;
(def <strong>roles</strong> [
    {:actor-name "Zdeněk Svěrák"   :character "inspektor Trachta  "}
    {:actor-name "Petr Brukner"    :character "praktikant Hlaváček"}
    {:actor-name "Miloň Čepelka"   :character "praktikant Hlaváček"}
    {:actor-name "Bořivoj Penc"    :character "továrník Bierhanzel"}
    {:actor-name "Jaroslav Weigel" :character "továrník Bierhanzel"}
    {:actor-name "Jan Hraběta"     :character "továrník Meyer"}
    {:actor-name "Václav Kotek"    :character "steward"}
    {:actor-name "Genadij Rumlena" :character "steward"}])
&nbsp;
(def <strong>vrazda-v-salonnim-coupe</strong>
    {:title "Vražda v salonním coupé"
     :roles roles
    })
&nbsp;
(html/defsnippet <strong>one-record</strong> "test.html"
    {[:#role]     ; zacatek
     [:#role]}    ; konec
    [record]
    [:#actor]      (html/content (:actor-name record))
    [:#character]  (html/content (:character record)))
&nbsp;
(html/deftemplate <strong>test-page</strong> "test.html"
    [data-for-page]
    [:title]       (html/content (:title data-for-page))
    [:h1 :span]    (html/content (:title data-for-page))
    [:#roles]      (html/content (map one-record (:roles data-for-page))) ; vnitrek odstavce bude duplikovan
)
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (println (reduce str (test-page vrazda-v-salonnim-coupe))))
</pre>

<p>Po spuštění tohoto příkladu by se měla na standardním výstupu objevit
následující HTML stránka:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Vražda v salonním coupé&lt;/title&gt;
        &lt;meta content="Pavel Tisnovsky" name="Author" /&gt;
        &lt;meta content="vim" name="Generator" /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Hra &lt;span&gt;Vražda v salonním coupé&lt;/span&gt;&lt;/h1&gt;
        &lt;table id="roles"&gt;&lt;tr id="role"&gt;
                &lt;td id="actor"&gt;Zdeněk Svěrák&lt;/td&gt;
                &lt;td id="character"&gt;inspektor Trachta  &lt;/td&gt;
            &lt;/tr&gt;&lt;tr id="role"&gt;
                &lt;td id="actor"&gt;Petr Brukner&lt;/td&gt;
                &lt;td id="character"&gt;praktikant Hlaváček&lt;/td&gt;
            &lt;/tr&gt;&lt;tr id="role"&gt;
                &lt;td id="actor"&gt;Miloň Čepelka&lt;/td&gt;
                &lt;td id="character"&gt;praktikant Hlaváček&lt;/td&gt;
            &lt;/tr&gt;&lt;tr id="role"&gt;
                &lt;td id="actor"&gt;Bořivoj Penc&lt;/td&gt;
                &lt;td id="character"&gt;továrník Bierhanzel&lt;/td&gt;
            &lt;/tr&gt;&lt;tr id="role"&gt;
                &lt;td id="actor"&gt;Jaroslav Weigel&lt;/td&gt;
                &lt;td id="character"&gt;továrník Bierhanzel&lt;/td&gt;
            &lt;/tr&gt;&lt;tr id="role"&gt;
                &lt;td id="actor"&gt;Jan Hraběta&lt;/td&gt;
                &lt;td id="character"&gt;továrník Meyer&lt;/td&gt;
            &lt;/tr&gt;&lt;tr id="role"&gt;
                &lt;td id="actor"&gt;Václav Kotek&lt;/td&gt;
                &lt;td id="character"&gt;steward&lt;/td&gt;
            &lt;/tr&gt;&lt;tr id="role"&gt;
                &lt;td id="actor"&gt;Genadij Rumlena&lt;/td&gt;
                &lt;td id="character"&gt;steward&lt;/td&gt;
            &lt;/tr&gt;&lt;/table&gt;
        &lt;div&gt;Pokracovani&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Povšimněte si toho, že formát výstupu není zcela přesný (uzavírací tag pro
řádek tabulky není oddělen od otevíracího tagu následujícího řádku), nicméně
základní struktura šablony zůstala zachována.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Použití knihovny Enlive pro získávání dat z&nbsp;HTML stránek</h2>

<p>Knihovnu Enlive lze použít i pro získávání dat z&nbsp;HTML stránek.
S&nbsp;využitím funkce <strong>net.cgrand.enlive-html/html-resource</strong> je
totiž možné načíst stránku a provést její zpracování do interní podoby,
v&nbsp;níž je stránka reprezentována formou stromu, kde jednotlivé uzly mají
přiřazené atributy, poduzly a popř.&nbsp;i obsah (s&nbsp;podobným formátem jsme
se již setkali při zpracování XML). Jedná se tedy o obdobu DOMu, což
mj.&nbsp;znamená, že pro získávání dat se nepoužívá klasický parsing či
regulární výrazy, ale takzvané <i>selektory</i> vzdáleně připomínající XPath
(ne syntaxí, ale sémantikou). Druhou důležitou funkcí je funkce nazvaná
<strong>net.cgrand.enlive-html/select</strong>, která na základě zadaného
selektoru dokáže vrátit odpovídající uzel či sekvenci uzlů. S&nbsp;vrácenými
daty lze provádět operace typu &bdquo;získej n-tý prvek sekvence&ldquo;,
&bdquo;získej data uložená v&nbsp;atributu :content&ldquo; apod. Některé
z&nbsp;těchto možností si ukážeme v&nbsp;demonstračních příkladech.</p>

<p>V&nbsp;trojici příkladů bude použita tato HTML stránka, která bude sloužit
jako vstup:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Test page&lt;/title&gt;
        &lt;meta name="Author" content="Pavel Tisnovsky"&gt;
        &lt;meta name="Generator" content="vim"&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Lorem Ipsum&lt;/h1&gt;
        &lt;div&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a
        diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam
        viverra nec consectetur ante hendrerit. Donec et mollis dolor. Praesent
        et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt
        congue enim, ut porta lorem lacinia consectetur. Donec ut libero sed
        arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet,
        consectetur adipiscing elit. Aenean ut gravida lorem. Ut turpis felis,
        pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id
        magna consequat sagittis. Curabitur dapibus enim sit amet elit pharetra
        tincidunt feugiat nisl imperdiet. Ut convallis libero in urna ultrices
        accumsan. Donec sed odio eros. Donec viverra mi quis quam pulvinar at
        malesuada arcu rhoncus. Cum sociis natoque penatibus et magnis dis
        parturient montes, nascetur ridiculus mus. In rutrum accumsan
        ultricies. Mauris vitae nisi at sem facilisis semper ac in est.&lt;/div&gt;
        &lt;h1&gt;Second paragraph&lt;/h1&gt;
        &lt;div&gt;Vivamus fermentum semper porta. Nunc diam velit, adipiscing ut
        tristique vitae, sagittis vel odio. Maecenas convallis ullamcorper
        ultricies. Curabitur ornare, ligula semper consectetur sagittis, nisi
        diam iaculis velit, id fringilla sem nunc vel mi. Nam dictum, odio nec
        pretium volutpat, arcu ante placerat erat, non tristique elit urna et
        turpis. Quisque mi metus, ornare sit amet fermentum et, tincidunt et
        orci. Fusce eget orci a orci congue vestibulum. Ut dolor diam,
        elementum et vestibulum eu, porttitor vel elit. Curabitur venenatis
        pulvinar tellus gravida ornare. Sed et erat faucibus nunc euismod
        ultricies ut id justo. Nullam cursus suscipit nisi, et ultrices justo
        sodales nec. Fusce venenatis facilisis lectus ac semper. Aliquam at
        massa ipsum. Quisque bibendum purus convallis nulla ultrices ultricies.
        Nullam aliquam, mi eu aliquam tincidunt, purus velit laoreet tortor,
        viverra pretium nisi quam vitae mi. Fusce vel volutpat elit. Nam
        sagittis nisi dui.&lt;/div&gt;
        &lt;h1&gt;Third paragraph&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Příklad <strong>enlive5</strong> &ndash; použití funkcí html-resource a select</h2>

<p>V&nbsp;demonstračním příkladu nazvaném <strong>enlive5</strong> je použita
funkce <strong>net.cgrand.enlive-html/html-resource</strong>, která dokáže
načíst stránku uloženou jak na lokálním disku, tak i na zadaném URL. Po načtení
je stránka zparsována a převedena do výše zmíněné stromové body, která má
v&nbsp;tomto konkrétním případě tvar (každý tag obsahuje své symbolické jméno,
množinu atributů, obsah a pod-uzly):</p>

<pre>
({:tag :html,
  :attrs nil,
  :content
  ("\n    "
   {:tag :head,
    :attrs nil,
    :content
    ("\n        "
     {:tag :title, :attrs nil, :content ("Test page")}
     "\n        "
     {:tag :meta,
      :attrs {:content "Pavel Tisnovsky", :name "Author"},
      :content nil}
     "\n        "
     {:tag :meta,
      :attrs {:content "vim", :name "Generator"},
      :content nil}
     "\n    ")}
   "\n    "
   {:tag :body,
    :attrs nil,
    :content
    ("\n        "
     {:tag :h1, :attrs nil, :content ("Lorem Ipsum")}
     "\n        "
     {:tag :div,
      :attrs nil,
      :content
      ("Lorem ipsum ....
       .............
       .............")}
     "\n        "
     {:tag :h1, :attrs nil, :content ("Second paragraph")}
     "\n        "
     {:tag :div,
      :attrs nil,
      :content
      ("Vivamus fermentum....
       .............
       .............")}
     "\n        "
     {:tag :h1, :attrs nil, :content ("Third paragraph")}
     "\n    ")}
   "\n\n\n")})
</pre>

<p>Poté je použita funkce <strong>net.cgrand.enlive-html/select</strong> pro
získání <i>obsahu</i> tagu &bdquo;title&ldquo; umístěného v&nbsp;tagu
&bdquo;head&ldquo; a n-tého tagu &bdquo;h1&ldquo; umístěného uvnitř tagu
&bdquo;body&ldquo;. Výběr tagů se provádí s&nbsp;využitím selektorů, které mají
vždy tvar vektoru (to jsme si již ostatně řekli minule). Vrácena je vždy
sekvence, i když může být prázdná či může obsahovat jen jediný tag (což je
první případ).</p>

<p>Následuje výpis zdrojového kódu demonstračního příkladu:</p>

<pre>
(ns <strong>enlive5.core</strong>
    (:use net.cgrand.enlive-html))
&nbsp;
(defn <strong>load-html-page</strong>
    <i>"Nacteni testovaci stranky umistene v podadresari './resources'."</i>
    []
    (html-resource "test.html"))
&nbsp;
(defn <strong>print-tag-content</strong>
    <i>"Vypis textoveho obsahu vybraneho tagu."</i>
    [tag]
    (println (clojure.string/join (get tag :content))))
&nbsp;
(defn <strong>print-title</strong>
    <i>"Vyber titulku stranky, tj. textu uzavreneho do &lt;title&gt;&lt;/title&gt;."</i>
    [html-page]
    (print-tag-content (first (select html-page [:head :title]))))
&nbsp;
(defn <strong>print-h1</strong>
    <i>"Vyber n-teho nadpisu, kde cislovani zacina od jednicky."</i>
    [html-page n]
    (print-tag-content (nth (select html-page [:body :h1]) (dec n))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Vstupni bod do aplikace."</i>
    [&amp; args]
    (let [html-page (load-html-page)]
          (print-title html-page)
          (print-h1 html-page 1)
          (print-h1 html-page 2)
          (print-h1 html-page 3)))
</pre>

<p>Po spuštění tohoto příkladu by se na výstupu měly objevit tyto čtyři textové
řádky:</p>

<pre>
Test page
Lorem Ipsum
Second paragraph
Third paragraph
</pre>

<p>Vidíme, že skutečně došlo k&nbsp;výběru a výpisu titulku stránky i všech tří
nadpisů uvedených uvnitř tagu &lt;h1&gt;.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Příklad <strong>enlive6</strong> &ndash; threading makro jako cesta k&nbsp;čitelnějšímu zdrojovému kódu</h2>

<p>Zdrojový kód předchozího demonstračního příkladu není v&nbsp;žádném případě
dokonalý, a to mj.&nbsp;i z&nbsp;toho důvodu, že se v&nbsp;něm vyskytuje volání
funkcí, kterým se předává výsledek jiných funkcí. Jedná se o vnořené formy,
které nejsou příliš čitelné a trošku dělají Clojure (a nepřímo i LISPu) špatnou
reklamu tím, že se zbytečně nadužívají kulaté závorky. Ostatně se podívejme
sami na ona zmiňovaná volání:</p>

<pre>
(print-tag-content (first (select html-page [:head :title]))))
(print-tag-content (nth (select html-page [:body :h1]) (dec n))))
</pre>
 
<p>Vylepšení zdrojového kódu je v&nbsp;tomto případě více než snadné, protože
lze použít již v&nbsp;tomto seriálu několikrát zmiňované threading makro
zapisované symbolem -&gt;. Díky tomuto makru se předchozí dvě formy mohou
přepsat na:</p>

<pre>
(-&gt; html-page
    (select [:head :title])
    first
    print-tag-content))
&nbsp;
(-&gt; html-page
    (select [:body :h1])
    (nth (dec n))
    print-tag-content))
</pre>

<p>(rozdělení na více řádků je samozřejmě nepovinné).</p>

<p>Funkčně identická podoba předchozího demonstračního příkladu vypadá
s&nbsp;použitím threading makra takto:</p>

<pre>
(ns <strong>enlive6.core</strong>
    (:use net.cgrand.enlive-html))
&nbsp;
(defn <strong>load-html-page</strong>
    <i>"Nacteni testovaci stranky umistene v podadresari './resources'."</i>
    []
    (html-resource "test.html"))
&nbsp;
(defn <strong>print-tag-content</strong>
    <i>"Vypis textoveho obsahu vybraneho tagu."</i>
    [tag]
    (-&gt; tag
        :content
        clojure.string/join
        println))
&nbsp;
(defn <strong>print-title</strong>
    <i>"Vyber titulku stranky, tj. textu uzavreneho do &lt;title&gt;&lt;/title&gt;."</i>
    [html-page]
    (-&gt; html-page
        (select [:head :title])
        first
        print-tag-content))
&nbsp;
(defn <strong>print-h1</strong>
    <i>"Vyber n-teho nadpisu, kde cislovani zacina od jednicky."</i>
    [html-page n]
    (-&gt; html-page
        (select [:body :h1])
        (nth (dec n))
        print-tag-content))
&nbsp;
(defn <strong>-main</strong>
    <i>"Vstupni bod do aplikace."</i>
    [&amp; args]
    (let [html-page (load-html-page)]
          (print-title html-page)
          (print-h1 html-page 1)
          (print-h1 html-page 2)
          (print-h1 html-page 3)))
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Příklad <strong>enlive7</strong> &ndash; příklad použití speciální formy doto</h2>

<p>Zdrojový kód je možné vylepšit ještě dalším způsobem. Podívejme se na funkci
<strong>-main</strong>:</p>

<pre>
(defn <strong>-main</strong>
    <i>"Vstupni bod do aplikace."</i>
    [&amp; args]
    (let [html-page (load-html-page)]
          (print-title html-page)
          (print-h1 html-page 1)
          (print-h1 html-page 2)
          (print-h1 html-page 3)))
</pre>

<p>Programátora by zde mělo zaujmout především to, že hodnota navázaná na
lokální symbol <strong>html-page</strong> je použita při volání dalších čtyř
funkcí a to příhodně jako první parametr (což není náhoda, takto jsem si ony
volané funkce schválně upravil). Jedná se tedy o opakující se kód, který není
příliš přehledný a navíc opět oplývá zbytečně velkým množstvím kulatých
závorek. V&nbsp;tomto případě je náprava snadná, protože stačí použít speciální
formu <strong>doto</strong> a přepsat funkci <strong>-main</strong>
následujícím způsobem:</p>

<pre>
(defn <strong>-main</strong>
    <i>"Vstupni bod do aplikace."</i>
    [&amp; args]
    (doto (load-html-page)
          (print-title)
          (print-h1 1)
          (print-h1 2)
          (print-h1 3)))
</pre>

<p>Tato forma nejprve zavolá první funkci <strong>load-html-page</strong> a
její výsledek postupně předá dalším čtyřem funkcím (jako první parametr).</p>

<p>Funkčně identická podoba předchozích dvou demonstračních příkladů vypadá
s&nbsp;použitím threading makra a speciální formy <strong>doto</strong>
takto:</p>

<pre>
(ns <strong>enlive7.core</strong>
    (:use net.cgrand.enlive-html))
&nbsp;
(defn <strong>load-html-page</strong>
    <i>"Nacteni testovaci stranky umistene v podadresari './resources'."</i>
    []
    (html-resource "test.html"))
&nbsp;
(defn <strong>print-tag-content</strong>
    <i>"Vypis textoveho obsahu vybraneho tagu."</i>
    [tag]
    (-&gt; tag
        :content
        clojure.string/join
        println))
&nbsp;
(defn <strong>print-title</strong>
    <i>"Vyber titulku stranky, tj. textu uzavreneho do &lt;title&gt;&lt;/title&gt;."</i>
    [html-page]
    (-&gt; html-page
        (select [:head :title])
        first
        print-tag-content))
&nbsp;
(defn <strong>print-h1</strong>
    <i>"Vyber n-teho nadpisu, kde cislovani zacina od jednicky."</i>
    [html-page n]
    (-&gt; html-page
        (select [:body :h1])
        (nth (dec n))
        print-tag-content))
&nbsp;
(defn <strong>-main</strong>
    <i>"Vstupni bod do aplikace."</i>
    [&amp; args]
    (doto (load-html-page)
          (print-title)
          (print-h1 1)
          (print-h1 2)
          (print-h1 3)))
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Další typy selektorů nabízené knihovnou Enlive</h2>

<p>Knihovna <i>Enlive</i> programátorům nabízí velké množství různých
selektorů, které jsou popsány na stránce <a
href="http://cgrand.github.io/enlive/syntax.html">http://cgrand.github.io/enlive/syntax.html</a>.
S&nbsp;jejich využitím je například možné nalézt ty tagy, které obsahují zadaný
atribut či atributy, hledat na základě hodnot atributů atd. atd. V&nbsp;tabulce
umístěné pod tímto odstavcem jsou některé z&nbsp;těchto selektorů zmíněny:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Význam</th></tr>
<tr><td>1</td><td>(attr? attribute-keyword*)</td><td>tagy obsahující zadaný atribut či atributy</td></tr>
<tr><td>2</td><td>(attr= (attribute-keyword value)*)</td><td>tagy obsahující atributy se specifikovanými hodnotami</td></tr>
<tr><td>3</td><td>(attr-has (attribute-keyword value)*)</td><td>lze zadat více hodnot atributů hledaných tagů</td></tr>
<tr><td>4</td><td>(attr-starts (attribute-keyword value)*)</td><td>hodnota atributu začíná na řetězec</td></tr>
<tr><td>5</td><td>(attr-ends (attribute-keyword value)*)</td><td>hodnota atributu končí na řetězec</td></tr>
<tr><td>6</td><td>(attr-contains (attribute-keyword value)*)</td><td>hodnota atributu obsahuje podřetězec</td></tr>
<tr><td>7</td><td>(nth-child stride? offset)</td><td>dokáže vybrat synovské pod-uzly</td></tr>
<tr><td>8</td><td>(nth-last-child stride? offset)</td><td>dtto, ale určení pod-uzlu probíhá opačně</td></tr>
<tr><td>9</td><td>node :&gt; text-node</td><td>získání textu (content) tagu</td></tr>
</table>



<p><a name="k08"></a></p>
<h2 id="k08">8. Příklad <strong>enlive8</strong> &ndash; použití :&gt; a (attr=) ve funkci select</h2>

<p>V&nbsp;dnešním posledním demonstračním příkladu jsou použity selektory
představované funkcí (attr=) a dále pak zápisem :&gt;. První z&nbsp;těchto
selektorů je použit pro nalezení informace o generátoru stránky:</p>

<pre>
(-&gt; html-page
    (select [(attr= :name "Generator")])
    first
    :attrs
    :content
    println))
</pre>

<p>Druhý selektor je vlastně zkratkou pro získání textu uloženého v&nbsp;tagu,
tedy obsahu tagu:</p>

<pre>
(-&gt; html-page
    (select [:div :&gt; text-node])
    first
    println))
</pre>

<p>Dále se vyberou všechny tagy obsahující zadaný atribut
&bdquo;name&ldquo;:</p>

<pre>
(select html-page [(attr? :name)]
</pre>

<p>Podívejme se na celý zdrojový kód:</p>

<pre>
(ns <strong>enlive8.core</strong>
    (:use net.cgrand.enlive-html))
&nbsp;
(defn <strong>load-html-page</strong>
    <i>"Nacteni testovaci stranky umistene v podadresari './resources'."</i>
    []
    (html-resource "test.html"))
&nbsp;
(defn <strong>print-tag-content</strong>
    <i>"Vypis textoveho obsahu vybraneho tagu."</i>
    [tag]
    (-&gt; tag
        :content
        clojure.string/join
        println))
&nbsp;
(defn <strong>print-title</strong>
    <i>"Vyber titulku stranky, tj. textu uzavreneho do &lt;title&gt;&lt;/title&gt;."</i>
    [html-page]
    (-&gt; html-page
        (select [:head :title])
        first
        print-tag-content))
&nbsp;
(defn <strong>print-h1</strong>
    <i>"Vyber n-teho nadpisu, kde cislovani zacina od jednicky."</i>
    [html-page n]
    (-&gt; html-page
        (select [:body :h1])
        (nth (dec n))
        print-tag-content))
&nbsp;
(defn <strong>print-first-paragraph</strong>
    <i>"Vyber *obsahu* prvniho odstavce."</i>
    [html-page]
    (-&gt; html-page
        (select [:div :&gt; text-node])
        first
        println))
&nbsp;
(defn <strong>print-generator</strong>
    <i>"Vyber a vypis generatoru nacteneho z metainformaci."</i>
    [html-page]
    (-&gt; html-page
        (select [(attr= :name "Generator")])
        first
        :attrs
        :content
        println))
&nbsp;
(defn <strong>print-meta-tag</strong>
    [tag]
    (let [attrs (:attrs tag)]
        (println (:name attrs) " -&gt; " (:content attrs))))
&nbsp;
(defn <strong>print-all-metatags</strong>
    <i>"Vyber a vypis vsech metainformaci."</i>
    [html-page]
    (doseq [tag (select html-page [(attr? :name)])]
        (print-meta-tag tag)))
&nbsp;
(defn <strong>-main</strong>
    <i>"Vstupni bod do aplikace."</i>
    [&amp; args]
    (doto (load-html-page)
          (print-title)
          (print-h1 1)
          (print-h1 2)
          (print-h1 3)
          (print-first-paragraph)
          (print-generator)
          (print-all-metatags)))
</pre>

<p>Po spuštění tohoto příkladu by se na standardním výstupu měl objevit
text:</p>

<pre>
Test page
Lorem Ipsum
Second paragraph
Third paragraph
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a
        diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam
        viverra nec consectetur ante hendrerit. Donec et mollis dolor. Praesent
        et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt
        congue enim, ut porta lorem lacinia consectetur. Donec ut libero sed
        arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet,
        consectetur adipiscing elit. Aenean ut gravida lorem. Ut turpis felis,
        pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id
        magna consequat sagittis. Curabitur dapibus enim sit amet elit pharetra
        tincidunt feugiat nisl imperdiet. Ut convallis libero in urna ultrices
        accumsan. Donec sed odio eros. Donec viverra mi quis quam pulvinar at
        malesuada arcu rhoncus. Cum sociis natoque penatibus et magnis dis
        parturient montes, nascetur ridiculus mus. In rutrum accumsan
        ultricies. Mauris vitae nisi at sem facilisis semper ac in est.
vim
Author  -&gt;  Pavel Tisnovsky
Generator  -&gt;  vim
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Repositář s&nbsp;dnešními demonstračními příklady</h2>

<p>Všech pět dnes zmíněných demonstračních příkladů bylo, podobně jako
v&nbsp;předchozích částech tohoto seriálu, uloženo do Git repositáře dostupného
na adrese <a
href="https://github.com/tisnik/clojure-examples">https://github.com/tisnik/clojure-examples</a>.
V&nbsp;tabulce zobrazené pod tímto odstavcem naleznete na zdrojové kódy
jednotlivých demonstračních příkladů přímé odkazy:</p>

<table>
<tr><th>#</th><th>Příklad </th><th>Github</th></tr>
<tr><td>1</td><td>enlive4</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/enlive4">https://github.com/tisnik/clojure-examples/tree/master/enlive4</a></td></tr>
<tr><td>2</td><td>enlive5</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/enlive5">https://github.com/tisnik/clojure-examples/tree/master/enlive5</a></td></tr>
<tr><td>3</td><td>enlive6</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/enlive6">https://github.com/tisnik/clojure-examples/tree/master/enlive6</a></td></tr>
<tr><td>4</td><td>enlive7</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/enlive7">https://github.com/tisnik/clojure-examples/tree/master/enlive7</a></td></tr>
<tr><td>5</td><td>enlive8</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/enlive8">https://github.com/tisnik/clojure-examples/tree/master/enlive8</a></td></tr>
</table>

<p>Příklady z&nbsp;předchozího týdne (jen pro úplnost):</p>

<table>
<tr><th>#</th><th>Příklad </th><th>Github</th></tr>
<tr><td>1</td><td>enlive1</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/enlive1">https://github.com/tisnik/clojure-examples/tree/master/enlive1</a></td></tr>
<tr><td>2</td><td>enlive2</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/enlive2">https://github.com/tisnik/clojure-examples/tree/master/enlive2</a></td></tr>
<tr><td>3</td><td>enlive3</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/enlive3">https://github.com/tisnik/clojure-examples/tree/master/enlive3</a></td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Odkazy na předchozí části tohoto seriálu</h2>

<ol>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (2)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (3)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/</a>
</li>

<li>Programovací jazyk Clojure a práce s Gitem (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/</a>
</li>

<li>Programovací jazyk Clojure – triky při práci s řetězci<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-retezci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-retezci/</a>
</li>

<li>Programovací jazyk Clojure – triky při práci s kolekcemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-kolekcemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-kolekcemi/</a>
</li>

<li>Programovací jazyk Clojure – práce s mapami a množinami<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-prace-s-mapami-a-mnozinami/">http://www.root.cz/clanky/programovaci-jazyk-clojure-prace-s-mapami-a-mnozinami/</a>
</li>

<li>Programovací jazyk Clojure – základy zpracování XML<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-zaklady-zpracovani-xml/">http://www.root.cz/clanky/programovaci-jazyk-clojure-zaklady-zpracovani-xml/</a>
</li>

<li>Programovací jazyk Clojure – testování s využitím knihovny Expectations<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/">http://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/</a>
</li>

<li>Programovací jazyk Clojure – některé užitečné triky použitelné (nejenom) v&nbsp;testech<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/">http://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/</a>
</li>

<li>Enlive – výkonný šablonovací systém pro jazyk Clojure<br />
<a href="http://www.root.cz/clanky/enlive-vykonny-sablonovaci-system-pro-jazyk-clojure/">http://www.root.cz/clanky/enlive-vykonny-sablonovaci-system-pro-jazyk-clojure/</a>
</li>

</ol>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odkazy na Internetu</h2>

<ol>

<li>Syntax pro selektory<br />
<a href="http://cgrand.github.io/enlive/syntax.html">http://cgrand.github.io/enlive/syntax.html</a>
</li>

<li>Clojure Cookbook: Templating HTML with Enlive<br />
<a href="https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc">https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc</a>
</li>

<li>An Introduction to Enlive<br />
<a href="https://github.com/swannodette/enlive-tutorial/">https://github.com/swannodette/enlive-tutorial/</a>
</li>

<li>Enlive na GitHubu<br />
<a href="https://github.com/cgrand/enlive">https://github.com/cgrand/enlive</a>
</li>

<li>Expectations: příklady atd.<br />
<a href="http://jayfields.com/expectations/">http://jayfields.com/expectations/</a>
</li>

<li>Expectations na GitHubu<br />
<a href="https://github.com/jaycfields/expectations">https://github.com/jaycfields/expectations</a>
</li>

<li>Lein-expectations na GitHubu<br />
<a href="https://github.com/gar3thjon3s/lein-expectations">https://github.com/gar3thjon3s/lein-expectations</a>
</li>

<li>Testing Clojure With Expectations<br />
<a href="https://semaphoreci.com/blog/2014/09/23/testing-clojure-with-expectations.html">https://semaphoreci.com/blog/2014/09/23/testing-clojure-with-expectations.html</a>
</li>

<li>Clojure testing TDD/BDD libraries: clojure.test vs Midje vs Expectations vs Speclj<br />
<a href="https://www.reddit.com/r/Clojure/comments/1viilt/clojure_testing_tddbdd_libraries_clojuretest_vs/">https://www.reddit.com/r/Clojure/comments/1viilt/clojure_testing_tddbdd_libraries_clojuretest_vs/</a>
</li>

<li>Testing: One assertion per test<br />
<a href="http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html">http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html</a>
</li>

<li>Rewriting Your Test Suite in Clojure in 24 hours<br />
<a href="http://blog.circleci.com/rewriting-your-test-suite-in-clojure-in-24-hours/">http://blog.circleci.com/rewriting-your-test-suite-in-clojure-in-24-hours/</a>
</li>

<li>Clojure doc: zipper<br />
<a href="http://clojuredocs.org/clojure.zip/zipper">http://clojuredocs.org/clojure.zip/zipper</a>
</li>

<li>Clojure doc: parse<br />
<a href="http://clojuredocs.org/clojure.xml/parse">http://clojuredocs.org/clojure.xml/parse</a>
</li>

<li>Clojure doc: xml-zip<br />
<a href="http://clojuredocs.org/clojure.zip/xml-zip">http://clojuredocs.org/clojure.zip/xml-zip</a>
</li>

<li>Clojure doc: xml-seq<br />
<a href="http://clojuredocs.org/clojure.core/xml-seq">http://clojuredocs.org/clojure.core/xml-seq</a>
</li>

<li>Parsing XML in Clojure<br />
<a href="https://github.com/clojuredocs/guides">https://github.com/clojuredocs/guides</a>
</li>

<li>Clojure Zipper Over Nested Vector<br />
<a href="https://vitalyper.wordpress.com/2010/11/23/clojure-zipper-over-nested-vector/">https://vitalyper.wordpress.com/2010/11/23/clojure-zipper-over-nested-vector/</a>
</li>

<li>Understanding Clojure's PersistentVector implementation<br />
<a href="http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation">http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation</a>
</li>

<li>Understanding Clojure's PersistentHashMap (deftwice...)<br />
<a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice.html">http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice.html</a>
</li>

<li>Assoc and Clojure's PersistentHashMap: part ii<br />
<a href="http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii.html">http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii.html</a>
</li>

<li>Ideal Hashtrees (paper)<br />
<a href="http://lampwww.epfl.ch/papers/idealhashtrees.pdf">http://lampwww.epfl.ch/papers/idealhashtrees.pdf</a>
</li>

<li>Clojure home page<br />
<a href="http://clojure.org/">http://clojure.org/</a>
</li>

<li>Clojure (downloads)<br />
<a href="http://clojure.org/downloads">http://clojure.org/downloads</a>
</li>

<li>Clojure Sequences<br />
<a href="http://clojure.org/sequences">http://clojure.org/sequences</a>
</li>

<li>Clojure Data Structures<br />
<a href="http://clojure.org/data_structures">http://clojure.org/data_structures</a>
</li>

<li>The Structure and Interpretation of Computer Programs: 2.2.1  Representing Sequences<br />
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%_sec_2.2.1">http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%_sec_2.2.1</a>
</li>

<li>The Structure and Interpretation of Computer Programs: 3.3.1  Mutable List Structure<br />
<a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%_sec_3.3.1">http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-22.html#%_sec_3.3.1</a>
</li>

<li>Clojure - Functional Programming for the JVM<br />
<a href="http://java.ociweb.com/mark/clojure/article.html">http://java.ociweb.com/mark/clojure/article.html</a>
</li>

<li>Clojure quick reference<br />
<a href="http://faustus.webatu.com/clj-quick-ref.html">http://faustus.webatu.com/clj-quick-ref.html</a>
</li>

<li>4Clojure<br />
<a href="http://www.4clojure.com/">http://www.4clojure.com/</a>
</li>

<li>ClojureDoc (rozcestník s&nbsp;dokumentací jazyka Clojure)<br />
<a href="http://clojuredocs.org/">http://clojuredocs.org/</a>
</li>

<li>Clojure (na Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Clojure">http://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Clojure (na Wikipedia CS)<br />
<a href="http://cs.wikipedia.org/wiki/Clojure">http://cs.wikipedia.org/wiki/Clojure</a>
</li>

<li>SICP (The Structure and Interpretation of Computer Programs)<br />
<a href="http://mitpress.mit.edu/sicp/">http://mitpress.mit.edu/sicp/</a>
</li>

<li>Pure function<br />
<a href="http://en.wikipedia.org/wiki/Pure_function">http://en.wikipedia.org/wiki/Pure_function</a>
</li>

<li>Funkcionální programování<br />
<a href="http://cs.wikipedia.org/wiki/Funkcionální_programování">http://cs.wikipedia.org/wiki/Funkcionální_programování</a>
</li>

<li>Čistě funkcionální (datové struktury, jazyky, programování)<br />
<a href="http://cs.wikipedia.org/wiki/Čistě_funkcionální">http://cs.wikipedia.org/wiki/Čistě_funkcionální</a>
</li>

<li>Clojure Macro Tutorial (Part I, Getting the Compiler to Write Your Code For You)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html</a>
</li>

<li>Clojure Macro Tutorial (Part II: The Compiler Strikes Back)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html</a>
</li>

<li>Clojure Macro Tutorial (Part III: Syntax Quote)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html</a>
</li>

<li>Tech behind Tech: Clojure Macros Simplified<br />
<a href="http://techbehindtech.com/2010/09/28/clojure-macros-simplified/">http://techbehindtech.com/2010/09/28/clojure-macros-simplified/</a>
</li>

<li>Fatvat - Exploring functional programming: Clojure Macros<br />
<a href="http://www.fatvat.co.uk/2009/02/clojure-macros.html">http://www.fatvat.co.uk/2009/02/clojure-macros.html</a>
</li>

<li>Eulerovo číslo<br />
<a href="http://cs.wikipedia.org/wiki/Eulerovo_číslo">http://cs.wikipedia.org/wiki/Eulerovo_číslo</a>
</li>

<li>List comprehension<br />
<a href="http://en.wikipedia.org/wiki/List_comprehension">http://en.wikipedia.org/wiki/List_comprehension</a>
</li>

<li>List Comprehensions in Clojure<br />
<a href="http://asymmetrical-view.com/2008/11/18/list-comprehensions-in-clojure.html">http://asymmetrical-view.com/2008/11/18/list-comprehensions-in-clojure.html</a>
</li>

<li>Clojure Programming Concepts: List Comprehension<br />
<a href="http://en.wikibooks.org/wiki/Clojure_Programming/Concepts#List_Comprehension">http://en.wikibooks.org/wiki/Clojure_Programming/Concepts#List_Comprehension</a>
</li>

<li>Clojure core API: for macro<br />
<a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/for">http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/for</a>
</li>

<li>cirrus machina - The Clojure for macro<br />
<a href="http://www.cirrusmachina.com/blog/comment/the-clojure-for-macro/">http://www.cirrusmachina.com/blog/comment/the-clojure-for-macro/</a>
</li>

<li>Riastradh's Lisp Style Rules<br />
<a href="http://mumble.net/~campbell/scheme/style.txt">http://mumble.net/~campbell/scheme/style.txt</a>
</li>

<li>Dynamic Languages Strike Back<br />
<a href="http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html">http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html</a>
</li>

<li>Scripting: Higher Level Programming for the 21st Century<br />
<a href="http://www.tcl.tk/doc/scripting.html">http://www.tcl.tk/doc/scripting.html</a>
</li>

<li>Java Virtual Machine Support for Non-Java Languages<br />
<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html">http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html</a>
</li>

<li>Třída java.lang.String<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html">http://docs.oracle.com/javase/7/docs/api/java/lang/String.html</a>
</li>

<li>Třída java.lang.StringBuffer<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html">http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html</a>
</li>

<li>Třída java.lang.StringBuilder<br />
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html">http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html</a>
</li>

<li>StringBuffer versus String<br />
<a href="http://www.javaworld.com/article/2076072/build-ci-sdlc/stringbuffer-versus-string.html">http://www.javaworld.com/article/2076072/build-ci-sdlc/stringbuffer-versus-string.html</a>
</li>

<li>Threading macro (dokumentace k&nbsp;jazyku Clojure)<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;</a>
</li>

<li>Understanding the Clojure -&gt; macro<br />
<a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/</a>
</li>

<li>clojure.inspector<br />
<a href="http://clojure.github.io/clojure/clojure.inspector-api.html">http://clojure.github.io/clojure/clojure.inspector-api.html</a>
</li>

<li>The Clojure Toolbox<br />
<a href="http://www.clojure-toolbox.com/">http://www.clojure-toolbox.com/</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

<li>Clojure.org: Vars and the Global Environment<br />
<a href="http://clojure.org/Vars">http://clojure.org/Vars</a>
</li>

<li>Clojure.org: Refs and Transactions<br />
<a href="http://clojure.org/Refs">http://clojure.org/Refs</a>
</li>

<li>Clojure.org: Atoms<br />
<a href="http://clojure.org/Atoms">http://clojure.org/Atoms</a>
</li>

<li>Clojure.org: Agents as Asynchronous Actions<br />
<a href="http://clojure.org/agents">http://clojure.org/agents</a>
</li>

<li>Transient Data Structures
<a href="http://clojure.org/transients">http://clojure.org/transients</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

