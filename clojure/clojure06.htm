<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Šestá část článku (vlastně již seriálu) o využití nástroje Leiningen a programovacího jazyka Clojure je převážně věnována knihovně Hiccup, s jejímž využitím lze poměrně snadno generovat HTML stránky. Hiccup je navíc poměrně pěkným a současně i velmi jednoduchým příkladem doménově specifického jazyka (DSL).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Leiningen: nástroj pro správu projektů napsaných v Clojure (6)</a></p>
<p><a href="#k02">2. Generování HTML stránek s&nbsp;využitím knihovny <strong>Hiccup</strong></a></p>
<p><a href="#k03">3. První demonstrační příklad &ndash; koncepty, na němž je postavena knihovna <strong>Hiccup</strong></a></p>
<p><a href="#k04">4. Druhý demonstrační příklad &ndash; kombinace statických a programově generovaných dat</a></p>
<p><a href="#k05">5. Třetí demonstrační příklad &ndash; nastavení stylů k&nbsp;vybraným prvkům</a></p>
<p><a href="#k06">6. Čtvrtý demonstrační příklad &ndash; formulář vytvořený s&nbsp;využitím <strong>hiccup.form</strong></a></p>
<p><a href="#k07">7. Vytvoření jednoduché webové aplikace založené na <strong>Clojure Ring</strong> a <strong>Hiccup</strong></a></p>
<p><a href="#k08">8. Zpracování požadavku</a></p>
<p><a href="#k09">9. Dynamické generování HTML stránky</a></p>
<p><a href="#k10">10. Úplný zdrojový kód demonstračního příkladu <strong>webapp13</strong></a></p>
<p><a href="#k11">11. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Leiningen: nástroj pro správu projektů napsaných v Clojure (6)</h2>

<p>Knihovna <i>Clojure Ring</i>, která byla popsaná v&nbsp;předchozích částech
článku o nástroji <i>Leiningen</i> i o programovacím jazyku <i>Clojure</i>, má
jediný úkol &ndash; zajistit čtení a zpracování požadavků přicházejících od
klienta a následně odeslat odpověď serveru zpět ke klientovi. Díky jasně
vymezenému úkolu, který má knihovna <i>Clojure Ring</i> zajišťovat, bylo možné
provést její návrh čistě funkcionálně a bez nutnosti návrhu a implementace
složitého a rozsáhlého API, o čemž jsme se ostatně mohli přesvědčit na několika
demonstračních příkladech. Ve skutečnosti nám však pro tvorbu skutečných
(rozsáhlejších) webových aplikacích schází minimálně dvě funkce &ndash; podpora
pro vytváření HTML stránek posílaných zpět klientovi a taktéž podpora pro zápis
popř.&nbsp;i pro dynamickou změnu pravidel pro rozhodování, jaké funkce
(handlery) se mají volat pro jednotlivé dotazy (přihlášení do aplikace,
registrace nového uživatele atd.). Dnes se budeme zabývat především prvním
zmíněným tématem, tj.&nbsp;tvorbou HTML stránek posílaných serverem zpět ke
klientovi. Pokud by bylo nutné posílat JSON či XML, je situace v&nbsp;některých
ohledech ještě jednodušší a taktéž se o ní později zmíníme.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Generování HTML stránek s&nbsp;využitím knihovny <strong>Hiccup</strong></h2>

<p>Tvorba HTML stránek, resp.&nbsp;přesněji řečeno textových řetězců
odpovídajících HTML stránce poslané klientovi, se může provádět několika
způsoby. S&nbsp;nejprimitivnějším způsobem jsme se již seznámili
v&nbsp;předchozích dvou částech tohoto článku &ndash; HTML stránka byla
představovaná řetězcovým literálem popř.&nbsp;řetězcem sestaveným z&nbsp;více
částí díky použití funkce <strong>str</strong>. Příkladem může být tato webová
aplikace (resp.&nbsp;její handler):</p>

<pre>
(defn <strong>create-html-page</strong>
    <i>"Vygenerovani HTML stranky."</i>
    [counter]
    (str
"    &lt;html&gt;
         &lt;head&gt;
             &lt;title&gt;Powered by Ring!&lt;/title&gt;
         &lt;/head&gt;
         &lt;body&gt;
             &lt;h1&gt;Powered by Ring!&lt;/h1&gt;
             &lt;p&gt;Counter: " counter "&lt;/p&gt;
         &lt;/body&gt;
     &lt;/html&gt;
"))
&nbsp;
(defn <strong>handler</strong>
    <i>"Zpracovani pozadavku."</i>
    [request]
    (let [params      (:params  request)
          session     (:session request)
          counter     (:counter session 0)]
        (println "Params:  " params)
        (println "Session: " session)
        (println "Counter: " counter)
        (-&gt; (response/response (create-html-page counter))
            (response/content-type "text/html; charset=utf-8")
            (assoc :session {:counter (inc counter)}))))
&nbsp;
</pre>

<p>Druhá možnost spočívá ve využití připravených šablon HTML stránek, do nichž
se pouze na určená místa doplňují dynamicky generovaná data. Jedná se
pravděpodobně o nejpoužívanější postup, který byl nejprve implementován
v&nbsp;PHP a později se rozšířil i do dalších jazyků a frameworků (JSP atd.
atd.). Použití šablon HTML stránek samozřejmě přináší mnohé výhody, například
možnost oddělení práce designera stránek od programátora, ovšem existuje ještě
další způsob, kterým se budeme zabývat dnes a který je podporován
v&nbsp;knihovně s&nbsp;názvem <i>Hiccup</i>. Tato knihovna totiž obsahuje
několik funkcí, které na svém vstupu dostanou běžný vektor či seznam jazyka
Clojure a na základě dat uložených ve vektoru/listu vytvoří korektní podobu
HTML stránky. Na první pohled sice tento postup může vypadat složitě, ve
skutečnosti je však v&nbsp;mnoha případech velmi efektivní, zejména ve chvíli,
kdy je prakticky celý design stránek umístěn v&nbsp;samostatných CSS.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad &ndash; koncepty, na němž je postavena knihovna <strong>Hiccup</strong></h2>

<p>Pro odzkoušení základních vlastností knihovny <i>Hiccup</i> vytvoříme
demonstrační aplikaci nazvanou <strong>htmltest1</strong>, a to pomocí nám již
známého příkazu:</p>

<pre>
lein new app htmltest1
</pre>

<p>Soubor s&nbsp;konfigurací projektu nazvaný <strong>project.clj</strong> je
zapotřebí upravit následujícím způsobem &ndash; vektor uložený pod klíčem
<strong>:dependencies</strong> je rozšířen o nový prvek se specifikací jména a
verze požadované knihovny:</p>

<pre>
(<strong>defproject</strong> htmltest1 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[hiccup "1.0.4"]</strong>]
  :main ^:skip-aot htmltest1.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Příkazem:</p>

<pre>
lein deps
</pre>

<p>se zajistí stažení nové knihovny a popř.&nbsp;i dalších balíčků, na kterých
tato knihovna závisí.</p>

<p>Samotný zdrojový kód aplikace je jednoduchý, protože aplikace má za úkol po
svém spuštění vytvořit nový soubor nazvaný <strong>test.html</strong>.
Připomeňme si, že pro uložení řetězce (či jiné hodnoty a datové struktury) do
souboru se používá funkce <strong>spit</strong>:</p>

<pre>
(ns htmltest1.core
    (:gen-class))
&nbsp;
(require '[hiccup.page :as page])
&nbsp;
(defn <strong>html-page</strong>
    []
    (<strong>page/xhtml</strong>
        [:head
            [:title "Hiccup test #1"]
            [:meta {:name "Generator" :content "Clojure"}]
            [:meta {:http-equiv "Content-type" :content "text/html; charset=utf-8"}]
        ]
        [:body
            [:h1 "Hiccup test #1"]
            [:div "Hello world!"]
        ]))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (spit "test.html" (html-page)))
</pre>

<p>Nejzajímavější je tělo funkce <strong>html-page</strong>. Zde můžeme vidět
volání další funkce <strong>hiccup.page/xhtml</strong> (alternativní možnosti
jsou <strong>hiccup.page/html4</strong>, <strong>hiccup.page/html5</strong>
apod.). Tato funkce očekává jako parametr vektor či vektory a jejím výstupem je
řetězec představující validní HTML či XHTML stránku. Obsah dvou vektorů
předaných do <strong>hiccup.page/xhtml</strong> odpovídá stromové struktuře
stránky, takže oba vektory obsahují jako své prvky další podvektory. První
prvek těchto podvektorů je symbol, který svým názvem připomíná názvy značek
v&nbsp;(X)HTML. Význam druhého a popř.&nbsp;dalších prvků již závisí na
konkrétní značce &ndash; například u vektoru <strong>[:title "xxx"]</strong> je
druhým prvkem obsah značky "title", zatímco u vektoru <strong>[:meta]</strong> je
druhým prvkem mapa s&nbsp;atributy.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Druhý demonstrační příklad &ndash; kombinace statických a programově generovaných dat</h2>

<p>Předchozí demonstrační příklad byl vlastně velmi jednoduchý, protože funkce
nazvaná <strong>html-page</strong> pouze prováděla transformaci z&nbsp;jedné
reprezentace HTML stránky do reprezentace jiné. Ve skutečnosti jsou však
možnosti, které má programátor využívající knihovnu <i>Hiccup</i>
k&nbsp;dispozici, mnohem širší, a to především díky možnosti generovat část
stromu reprezentujícího HTML stránku programově. Podívejme se na příklad druhý
&ndash; ten po svém spuštění vytvoří soubor s&nbsp;HTML stránkou obsahující
tabulku faktoriálů konstant 0..19. Ve funkci <strong>html-page</strong> je
použita generátorová notace seznamu (sekvence) reprezentovaná funkcí
<strong>for</strong> (pozor: <a
href="http://clojuredocs.org/clojure.core/for">nejedná se o programovou
smyčku</a>!). Datová struktura je &bdquo;dotvořena&ldquo; až po zavolání funkce
<strong>html-page</strong>. Právě díky možnosti kombinace statických dat a
dynamicky generovaných dat je možné tvořit některé typy webových aplikací velmi
snadno:</p>

<pre>
(ns htmltest2.core
    (:gen-class))
&nbsp;
(require '[hiccup.page :as page])
&nbsp;
(defn <strong>fact</strong>
    [n]
    (apply * (range 1 (inc n))))
&nbsp;
(defn <strong>html-page</strong>
    []
    (<strong>page/xhtml</strong>
        [:head
            [:title "Hiccup test #2"]
            [:meta {:name "Generator" :content "Clojure"}]
            [:meta {:http-equiv "Content-type" :content "text/html; charset=utf-8"}]
        ]
        [:body
            [:h1 "Hiccup test #2"]
            [:table
                [:tr [:th "n"] [:th "n!"]]
                (for [n (range 0 20)]
                    [:tr [:td n] [:td (fact n)]])
            ]
        ]))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (spit "test.html" (html-page)))
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Třetí demonstrační příklad &ndash; nastavení stylů k&nbsp;vybraným prvkům</h2>

<p>Již v&nbsp;předchozích kapitolách jsme si řekli, že u symbolů ve vektoru
představujícím &bdquo;šablonu&ldquo; HTML stránky lze uvést nepovinný prvek
reprezentující nějaké atributy výsledné HTML značky. Tento prvek je
představován mapou, což je v&nbsp;syntaxi programovacího jazyka Clojure datová
struktura začínající a končící složenou závorkou. V&nbsp;dnešním třetím
demontračním příkladu je takových map, které se převededou na atributy HTML
značek, použito větší množství. Příkladem může být tento řádek:</p>

<pre>
[:table {:style "border:2px solid brown;background-color:#ace"}
</pre>

<p>popř.:</p>

<pre>
[:td {:style "text-align:right"} "obsah buňky v tabulce"]
</pre>

<p>Při použití <i>Bootstrapu</i> se můžeme setkat například s&nbsp;následujícím
zápisem:</p>

<pre>
[:div {:class "alert alert-danger"} "Not found"]
[:div {:class "alert alert-success"} description]
[:div {:class "col-md-10"} "foo"]
[:div {:class "label label-primary"} "bar"]
</pre>

<p>Kromě atributu <strong>:style</strong> lze samozřejmě používat i další
atributy. Asi nejdůležitější je to u značek <strong>:a</strong> a
<strong>:img</strong>, kde je nutné specifikovat adresu odkazu
popř.&nbsp;adresu obrázku:</p>

<pre>
[:a {:href "/" :class "navbar-brand"} "Rychle pryč"]
</pre>

<p>Zdrojový kód třetího demontračního příkladu vypadá takto:</p>

<pre>
(ns htmltest3.core
    (:gen-class))
&nbsp;
(require '[hiccup.page :as page])
&nbsp;
(defn <strong>fact</strong>
    [n]
    (apply * (range 1 (inc n))))
&nbsp;
(defn <strong>html-page</strong>
    []
    (<strong>page/xhtml</strong>
        [:head
            [:title "Hiccup test #3"]
            [:meta {:name "Generator" :content "Clojure"}]
            [:meta {:http-equiv "Content-type" :content "text/html; charset=utf-8"}]
        ]
        [:body
            [:h1 "Hiccup test #3"]
            [:table {:style "border:2px solid brown;background-color:#ace"}
                [:tr [:th "n"] [:th "n!"]]
                (for [n (range 0 20)]
                    [:tr [:td n] [:td {:style "text-align:right"} (fact n)]])
            ]
        ]))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (spit "test.html" (html-page)))
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Čtvrtý demonstrační příklad &ndash; formulář vytvořený s&nbsp;využitím <strong>hiccup.form</strong></h2>

<p>Nedílnou součástí prakticky všech webových aplikací jsou formuláře. Ty lze
v&nbsp;knihovně <i>Hiccup</i> samozřejmě taktéž vytvářet, ovšem kromě jmenného
prostoru <strong>hiccup.page</strong> se musí použít i jmenný prostor
<strong>hiccup.form</strong>, v&nbsp;němž se (kromě jiného) nachází i funkce
<strong>form/form-to</strong>. Podívejme se ihned na použití této funkce pro
tvorbu formuláře, ve kterém je vytvořeno textové pole pojmenované
&bdquo;n&ldquo; a odesílací tlačítko. Tyto dva prvky nejsou kupodivu
představovány symboly <strong>:text-field</strong> a <strong>:submit</strong>,
ale funkcemi <strong>hiccup.form/text-field</strong> a
<strong>hiccup.form/submit-button</strong>:</p>

<pre>
(ns htmltest4.core
    (:gen-class))
&nbsp;
(require '[hiccup.page :as page])
(require '[hiccup.form :as form])
&nbsp;
(defn <strong>fact</strong>
    [n]
    (apply * (range 1 (inc n))))
&nbsp;
(defn <strong>html-page</strong>
    []
    (<strong>page/xhtml</strong>
        [:head
            [:title "Hiccup test #4"]
            [:meta {:name "Generator" :content "Clojure"}]
            [:meta {:http-equiv "Content-type" :content "text/html; charset=utf-8"}]
        ]
        [:body
            [:h1 "Hiccup test #4"]
            (<strong>form/form-to</strong> [:get "/"]
                (<strong>form/text-field</strong> {:size "20"} "n" 10)
                [:br]
                (<strong>form/submit-button</strong> "Recalculate"))
            [:br]
            [:table {:style "border:2px solid brown;background-color:#ace"}
                [:tr [:th "n"] [:th "n!"]]
                (for [n (range 0 20)]
                    [:tr [:td n] [:td {:style "text-align:right"} (fact n)]])
            ]
        ]))
&nbsp;
(defn <strong>-main</strong>
    [&amp; args]
    (spit "test.html" (html-page)))
</pre>

<p>V&nbsp;reálných aplikacích se lze samozřejmě setkat i s&nbsp;dalšími prvky,
popř.&nbsp;s&nbsp;ostylovanými prvky formuláře, například:</p>

<pre>
(form/hidden-field "package" (str package))
(form/text-area {:cols "120" :rows "10"} "description" description)
(form/submit-button {:class "btn btn-danger"} "Update description")
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vytvoření jednoduché webové aplikace založené na <strong>Clojure Ring</strong> a <strong>Hiccup</strong></h2>

<p>Nyní již máme dostatek informací k&nbsp;tomu, abychom vytvořili jednoduchou
webovou aplikaci pro výpočet faktoriálů, v&nbsp;níž se o zpracování požadavků a
odesílání odpovědí bude starat knihovna <i>Clojure Ring</i> a o vytváření HTML
stránky (která je samozřejmě součástí odpovědi) pak knihovna <i>Hiccup</i>.
Nejprve vytvoříme kostru nové aplikace:</p>

<pre>
lein new webapp13
</pre>

<p>A následně upravíme soubor s&nbsp;deklarací projektu takovým způsobem, aby
byly zmíněny všechny potřebné externí knihovny:</p>

<pre>
(<strong>defproject</strong> webapp13 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.6.0"]
                 <strong>[ring/ring-core "1.3.2"]</strong>
                 <strong>[ring/ring-jetty-adapter "1.3.2"]</strong>
                 <strong>[hiccup "1.0.4"]</strong>]
  :main ^:skip-aot webapp13.core
  :target-path "target/%s"
  :profiles {:uberjar {:aot :all}})
</pre>

<p>Pro jistotu si necháme potřebné knihovny stáhnout a nainstalovat:</p>

<pre>
lein deps
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zpracování požadavku</h2>

<p>Aplikace je rozdělena na několik částí. První část se stará o zpracování
požadavku v&nbsp;handleru. Tuto problematiku již známe, protože jsme se jí
dopodrobna věnovali již minule, takže jen pro úplnost:</p>

<pre>
(def <strong>app</strong>
    <i>"Datova struktura predstavujici kostru webove aplikace."</i>
    (-&gt; handler
        http-params/wrap-params))
&nbsp;
(defn <strong>-main</strong>
    "Spusteni webove aplikace na portu 8080."
    [&amp; args]
    (jetty/run-jetty app {:port 8080}))
</pre>

<p>Samotný handler se stará o načtení a zpracování parametrů požadavku,
v&nbsp;nichž se hledá parametr nazvaný <strong>max-n</strong>. Pokud tento
parametr není nalezen, doplní se namísto něj hodnota 10M (jejíž typ nám zajistí
výpočet prakticky neomezeného faktoriálu):</p>

<pre>
(defn <strong>handler</strong>
    <i>"Zpracovani pozadavku."</i>
    [request]
    (let [params (:params request)
          max-n  (param-&gt;number params "max-n")]
        (println "Params: " params)
        (println "max-n:  " max-n)
        (-&gt; (response/response (html-page (if max-n max-n 10M)))
            (response/content-type "text/html; charset=utf-8"))))
&nbsp;
</pre>

<p>Funkci pro převod parametru (což je řetězec) na numerickou hodnotu jsme si
již taktéž ukazovali, takže si jen pro úplnost doplňme její zdrojový kód:</p>

<pre>
(defn <strong>param-&gt;number</strong>
    <i>"Prevod parametru specifikovaneho v param-name na cislo typu BigDecimal."</i>
    [params param-name]
    (let [param (get params param-name)]
        (try
            (bigdec param)             <i>; pokus o prevod na BigDecimal</i>
            (catch Exception e nil)))) <i>; pokud se prevod nepovede, vraci se nil</i>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Dynamické generování HTML stránky</h2>

<p>Výpočet faktoriálu již taktéž známe, nová je však úprava funkce
<strong>html-page</strong>, které se předává hodnota parametru max-n. Tato
hodnota je použita hned dvakrát. Povrvé pro automatické předvyplnění nové
hodnoty ve formuláři:</p>

<pre>
(<strong>form/text-field</strong> {:size "20"} "max-n" max-n)
</pre>

<p>A podruhé pro vytvoření tabulky s&nbsp;faktoriálem pro vstupní hodnoty od
nuly až po zadanou hodnotu. Povšimněte si zde použití funkce <a
href="http://clojuredocs.org/clojure.core/inc">inc</a> pro výpočet druhého
parametru funkce <a
href="http://clojuredocs.org/clojure.core/range">range</a>:</p>

<pre>
(for [n (range 0M (inc max-n))]
    [:tr [:td n] [:td {:style "text-align:right"} (fact n)]])
</pre>

<p>(znovu připomínám, že <a
href="http://clojuredocs.org/clojure.core/for">for</a> je generátor
seznamu/sekvence a nikoli programová smyčka)</p>

<p>Druhá část webové aplikace, která se má starat o vygenerování HTML stránky,
bude vypadat takto:</p>

<pre>
(defn <strong>fact</strong>
    [n]
    (apply * (range 1M (inc n))))
&nbsp;
(defn <strong>html-page</strong>
    [max-n]
    (<strong>page/xhtml</strong>
        [:head
            [:title "Hiccup test #4"]
            [:meta {:name "Generator" :content "Clojure"}]
            [:meta {:http-equiv "Content-type" :content "text/html; charset=utf-8"}]
        ]
        [:body
            [:h1 "Hiccup test #4"]
            (<strong>form/form-to</strong> [:get "/"]
                (<strong>form/text-field</strong> {:size "20"} "max-n" max-n)
                [:br]
                (<strong>form/submit-button</strong> "Recalculate"))
            [:br]
            [:table {:style "border:2px solid brown;background-color:#ace"}
                [:tr [:th "n"] [:th "n!"]]
                (for [n (range 0M (inc max-n))]
                    [:tr [:td n] [:td {:style "text-align:right"} (fact n)]])
            ]
        ]))
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Úplný zdrojový kód demonstračního příkladu <strong>webapp13</strong></h2>

<p>Celý zdrojový kód dnešní poslední demonstrační aplikace je relativně krátký
&ndash; 62 programových řádků:</p>

<pre>
(ns webapp13.core
  (:gen-class))
&nbsp;
(require '[ring.adapter.jetty     :as jetty])
(require '[ring.middleware.params :as http-params])
(require '[ring.util.response     :as response])
&nbsp;
(require '[hiccup.page :as page])
(require '[hiccup.form :as form])
&nbsp;
(defn fact
    [n]
    (apply * (range 1M (inc n))))
&nbsp;
(defn html-page
    [max-n]
    (page/xhtml
        [:head
            [:title "Hiccup test #4"]
            [:meta {:name "Generator" :content "Clojure"}]
            [:meta {:http-equiv "Content-type" :content "text/html; charset=utf-8"}]
        ]
        [:body
            [:h1 "Hiccup test #4"]
            (form/form-to [:get "/"]
                (form/text-field {:size "20"} "max-n" max-n)
                [:br]
                (form/submit-button "Recalculate"))
            [:br]
            [:table {:style "border:2px solid brown;background-color:#ace"}
                [:tr [:th "n"] [:th "n!"]]
                (for [n (range 0M (inc max-n))]
                    [:tr [:td n] [:td {:style "text-align:right"} (fact n)]])
            ]
        ]))
&nbsp;
(defn param-&gt;number
    <i>"Prevod parametru specifikovaneho v param-name na cislo typu BigDecimal."</i>
    [params param-name]
    (let [param (get params param-name)]
        (try
            (bigdec param)             ; pokus o prevod na BigDecimal
            (catch Exception e nil)))) ; pokud se prevod nepovede, vraci se nil
&nbsp;
(defn handler
    <i>"Zpracovani pozadavku."</i>
    [request]
    (let [params (:params request)
          max-n  (param-&gt;number params "max-n")]
        (println "Params: " params)
        (println "max-n:  " max-n)
        (-&gt; (response/response (html-page (if max-n max-n 10M)))
            (response/content-type "text/html; charset=utf-8"))))
&nbsp;
(def app
    <i>"Datova struktura predstavujici kostru webove aplikace."</i>
    (-&gt; handler
        http-params/wrap-params))
&nbsp;
(defn -main
    <i>"Spusteni webove aplikace na portu 8080."</i>
    [&amp; args]
    (jetty/run-jetty app {:port 8080}))
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všech pět dnes popsaných demonstračních příkladů bylo uloženo do GIT
repositáře dostupného na adrese <a
href="https://github.com/tisnik/clojure-examples">https://github.com/tisnik/clojure-examples</a>
(dříve popsané příklady budou přidány později). V&nbsp;tabulce zobrazené pod
tímto odstavcem naleznete na jednotlivé příklady přímé odkazy:</p>

<table>
<tr><th>Příklad</th><th>Github</th></tr>
<tr><td><a href="#k03">htmltest1</a></td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/htmltest1">https://github.com/tisnik/clojure-examples/tree/master/htmltest1</a></td></tr>
<tr><td><a href="#k04">htmltest2</a></td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/htmltest2">https://github.com/tisnik/clojure-examples/tree/master/htmltest2</a></td></tr>
<tr><td><a href="#k05">htmltest3</a></td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/htmltest3">https://github.com/tisnik/clojure-examples/tree/master/htmltest3</a></td></tr>
<tr><td><a href="#k06">htmltest4</a></td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/htmltest4">https://github.com/tisnik/clojure-examples/tree/master/htmltest4</a></td></tr>
<tr><td><a href="#k07">webapp13</a> </td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/webapp13">https://github.com/tisnik/clojure-examples/tree/master/webapp13</a></td></tr>
</table>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Hiccup<br />
<a href="https://github.com/weavejester/hiccup">https://github.com/weavejester/hiccup</a>
</li>

<li>Clojure Ring na GitHubu<br />
<a href="https://github.com/ring-clojure/ring">https://github.com/ring-clojure/ring</a>
</li>

<li>A brief overview of the Clojure web stack<br />
<a href="https://brehaut.net/blog/2011/ring_introduction">https://brehaut.net/blog/2011/ring_introduction</a>
</li>

<li>Getting Started with Ring<br />
<a href="http://www.learningclojure.com/2013/01/getting-started-with-ring.html">http://www.learningclojure.com/2013/01/getting-started-with-ring.html</a>
</li>

<li>Getting Started with Ring and Compojure - Clojure Web Programming<br />
<a href="http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html">http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II<br />
<a href="2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">2) http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

