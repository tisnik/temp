<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Clojure a práce s&nbsp;Gitem</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Clojure a práce s&nbsp;Gitem</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Další užitečnou knihovnou dostupnou pro vývojáře používající programovací jazyk Clojure je knihovna nazvaná clj-jgit. Jedná se o rozhraní k poměrně známé javovské knihovně JGit umožňující provádění prakticky všech operací s Gitem a to bez nutnosti používat příkazovou řádku a především pak zpracovávat textové výstupy Gitu spouštěného z příkazové řádky.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyk Clojure a práce s&nbsp;Gitem</a></p>
<p><a href="#k02">2. Instalace knihovny <strong>clj-jgit</strong></a></p>
<p><a href="#k03">3. První demonstrační příklad &ndash; naklonování Git repositáře a výpis seznamu větví</a></p>
<p><a href="#k04">4. Druhý demonstrační příklad &ndash; použití funkce <strong>load-repo</strong> pro načtení informací o Git repositáři z&nbsp;lokálního adresáře</a></p>
<p><a href="#k05">5. Třetí demonstrační příklad &ndash; využití makra <strong>with-repo</strong></a></p>
<p><a href="#k06">6. Čtvrtý demonstrační příklad &ndash; výpis logu ve zjednodušené podobě</a></p>
<p><a href="#k07">7. Pátý demonstrační příklad &ndash; výpis vybraných informací z&nbsp;logu</a></p>
<p><a href="#k08">8. Šestý demonstrační příklad &ndash; přidání a modifikace souborů v&nbsp;Git repositáři, provedení commitu</a></p>
<p><a href="#k09">9. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k10">10. Odkazy na předchozí části seriálu</a></p>
<p><a href="#k11">11. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk Clojure a práce s&nbsp;GITem</h2>

<p>Systém <i>Git</i> pravděpodobně není nutné programátorům podrobně
představovat, protože se v&nbsp;současnosti jedná o jeden
z&nbsp;nejrozšířenějších a nejpopulárnějších distribuovaných systémů pro správu
revizí (<i>distributed revision control system</i>). <i>Git</i> je možné
používat z&nbsp;příkazové řádky, k&nbsp;dispozici jsou však taktéž nástroje
s&nbsp;grafickým uživatelským rozhraním, popř.&nbsp;je Git součástí i několika
integrovaných vývojových prostředí. V&nbsp;některých případech je však nutné
s&nbsp;Gitem, resp.&nbsp;přesněji řečeno s&nbsp;Gitovskými repositáři, pracovat
přímo z&nbsp;vyvíjené aplikace (v&nbsp;mém konkrétním případě se jedná o systém
zajišťující publikaci dosti rozsáhlých strukturovaných dokumentů na zákaznickém
portálu). V&nbsp;případě využití programovacího jazyka <i>Clojure</i> je pro
tento účel nejvhodnější použít knihovnu nazvanou <strong>clj-jgit</strong>. Jak
již název této knihovny naznačuje, jedná se o funkcionálně pojaté rozhraní
k&nbsp;javovské knihovně <strong>JGit</strong> (<a
href="http://www.jgit.org/">http://www.jgit.org/</a>). V&nbsp;následujících
kapitolách si ukážeme naprosté základy práce s&nbsp;touto knihovnou, složitější
příklady budou uvedeny příště.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace knihovny <strong>clj-jgit</strong></h2>

<p>Instalace knihovny <strong>clj-jgit</strong> je velmi jednoduchá, protože
můžeme použít systém <i>Leiningen</i> popsaný v&nbsp;úvodních částech tohoto
seriálu (viz <a href="#k10">desátou kapitolu</a> s&nbsp;odkazy). Postačuje
pouze vytvořit nový projekt příkazem:</p>

<pre>
lein new app dummyproject
</pre>

<p>Dále je nutné upravit projektový soubor <strong>project.clj</strong> takovým
způsobem, aby se v&nbsp;něm nacházelo jméno a verze knihovny
<strong>clj-jgit</strong>:</p>

<pre>
(defproject dummyproject "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>]
    :main ^:skip-aot dummyproject.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Posledním krokem je spuštění příkazu:</p>

<pre>
lein deps
</pre>

<p>Systém <i>Leiningen</i> by měl zajistit stažení knihovny
<strong>clj-jgit</strong> i všech závislých knihoven:</p>

<pre>
Retrieving clj-jgit/clj-jgit/0.8.0/clj-jgit-0.8.0.pom from clojars
Retrieving org/eclipse/jgit/org.eclipse.jgit.java7/3.5.0.201409260305-r/org.eclipse.jgit.java7-3.5.0.201409260305-r.pom from central
Retrieving org/eclipse/jgit/org.eclipse.jgit-parent/3.5.0.201409260305-r/org.eclipse.jgit-parent-3.5.0.201409260305-r.pom from central
Retrieving org/eclipse/jgit/org.eclipse.jgit/3.5.0.201409260305-r/org.eclipse.jgit-3.5.0.201409260305-r.pom from central
Retrieving com/jcraft/jsch/0.1.50/jsch-0.1.50.pom from central
Retrieving org/sonatype/oss/oss-parent/6/oss-parent-6.pom from central
Retrieving com/googlecode/javaewah/JavaEWAH/0.7.9/JavaEWAH-0.7.9.pom from central
Retrieving org/apache/httpcomponents/httpclient/4.1.3/httpclient-4.1.3.pom from central
Retrieving org/apache/httpcomponents/httpcomponents-client/4.1.3/httpcomponents-client-4.1.3.pom from central
Retrieving org/apache/httpcomponents/project/5/project-5.pom from central
Retrieving org/apache/httpcomponents/httpcore/4.1.4/httpcore-4.1.4.pom from central
Retrieving org/apache/httpcomponents/httpcomponents-core/4.1.4/httpcomponents-core-4.1.4.pom from central
Retrieving commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.pom from central
Retrieving org/apache/commons/commons-parent/5/commons-parent-5.pom from central
Retrieving org/apache/apache/4/apache-4.pom from central
Retrieving commons-codec/commons-codec/1.4/commons-codec-1.4.pom from central
Retrieving org/apache/commons/commons-parent/11/commons-parent-11.pom from central
Retrieving org/clojure/core.memoize/0.5.3/core.memoize-0.5.3.pom from central
Retrieving org/clojure/pom.contrib/0.0.26/pom.contrib-0.0.26.pom from central
Retrieving org/clojure/core.cache/0.6.3/core.cache-0.6.3.pom from central
Retrieving org/clojure/data.priority-map/0.0.2/data.priority-map-0.0.2.pom from central
Retrieving org/clojure/pom.contrib/0.0.25/pom.contrib-0.0.25.pom from central
Retrieving org/clojure/clojure/1.3.0/clojure-1.3.0.pom from central
Retrieving fs/fs/1.3.2/fs-1.3.2.pom from clojars
Retrieving org/apache/commons/commons-compress/1.3/commons-compress-1.3.pom from central
Retrieving org/apache/commons/commons-parent/22/commons-parent-22.pom from central
Retrieving org/apache/apache/9/apache-9.pom from central
Retrieving com/jcraft/jsch/0.1.50/jsch-0.1.50.jar from central
Retrieving org/eclipse/jgit/org.eclipse.jgit.java7/3.5.0.201409260305-r/org.eclipse.jgit.java7-3.5.0.201409260305-r.jar from central
Retrieving com/googlecode/javaewah/JavaEWAH/0.7.9/JavaEWAH-0.7.9.jar from central
Retrieving org/eclipse/jgit/org.eclipse.jgit/3.5.0.201409260305-r/org.eclipse.jgit-3.5.0.201409260305-r.jar from central
Retrieving org/apache/httpcomponents/httpcore/4.1.4/httpcore-4.1.4.jar from central
Retrieving org/apache/httpcomponents/httpclient/4.1.3/httpclient-4.1.3.jar from central
Retrieving commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar from central
Retrieving org/clojure/core.memoize/0.5.3/core.memoize-0.5.3.jar from central
Retrieving org/clojure/core.cache/0.6.3/core.cache-0.6.3.jar from central
Retrieving commons-codec/commons-codec/1.4/commons-codec-1.4.jar from central
Retrieving org/clojure/data.priority-map/0.0.2/data.priority-map-0.0.2.jar from central
Retrieving org/apache/commons/commons-compress/1.3/commons-compress-1.3.jar from central
Retrieving clj-jgit/clj-jgit/0.8.0/clj-jgit-0.8.0.jar from clojars
Retrieving fs/fs/1.3.2/fs-1.3.2.jar from clojars
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad &ndash; naklonování Git repositáře a výpis seznamu větví</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu s&nbsp;názvem
<strong>git-test1</strong> jsou ukázány základy práce s&nbsp;knihovnou
<strong>clj-jgit</strong>. Nejprve je vytvořena kostra příkladu, a to
s&nbsp;využitím nám již známého příkazu:</p>

<pre>
lein new app git-test1
</pre>

<p>Po spuštění výše uvedeného příkazu by se měla vytvořit následující
adresářová struktura:</p>

<pre>
├── doc
│   └── intro.md
├── LICENSE
├── project.clj
├── README.md
├── resources
├── src
│   └── git_test1
│       └── core.clj
└── test
    └── git_test1
        └── core_test.clj
</pre>

<p>Dále je nutné provést úpravu projektového souboru
<strong>project.clj</strong>, a to tak, že se do sekce :dependencies přidá
knihovna <strong>clj-jgit</strong> ve verzi 0.8.0. Navíc se v&nbsp;tomto
demonstračním příkladu používá další miniknihovna se jménem
<strong>clj-rm-rf</strong>. Název této knihovny napovídá, jakou funkci zde
nalezneme &ndash; jedná se o funkci použitou pro smazání vybraného
adresáře:</p>

<pre>
(defproject <strong>git-test1</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test1.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Samotný zdrojový kód demonstračního příkladu, tj.&nbsp;konkrétně zdrojový
soubor <strong>src/git_test1/core.clj</strong>, je poměrně jednoduchý. Nejprve
musíme načíst modul <strong>clj-jgit.porcelain</strong> a taktéž
<strong>hozumi.rm-rf</strong>, což zajistí dvojice řádků:</p>

<pre>
(require '[clj-jgit.porcelain :as jgit])
(require '[hozumi.rm-rf :as rm-rf])
</pre>

<p>Následuje deklarace dvojice konstant, kde první konstanta obsahuje adresu
Git repositáře, který se bude klonovat. Druhá konstanta pak obsahuje jméno
adresáře, do něhož se Git repositář naklonuje (tento adresář se na konci
demonstračního příkladu smaže):</p>

<pre>
(def <strong>repository-url</strong>
    <i>"Adresa Git repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se Git repositar naklonuje."</i>
    "repo")
</pre>

<p>Následuje trojice pomocných funkcí. První funkce naklonuje Git repositář do
specifikovaného adresáře s&nbsp;využitím volání
<strong>clj-jgit.porcelain/git-clone</strong>, druhá funkce (volaná na konci
příkladu) smaže adresář s&nbsp;naklonovaným repositářem s&nbsp;využitím
<strong>hozumi.rm-rf/rm-r</strong> a konečně třetí funkce načte seznam všech
vzdálených větví, na což je použita funkce
<strong>clj-jgit.porcelain/git-branch-list</strong>. Vrácená sekvence obsahuje
objekty, nikoli přímo jména větví, takže je nutné použít metodu
<strong>getName</strong> (volanou v&nbsp;programové smyčce):</p>

<pre>
(defn <strong>clone-repository</strong>
    <i>"Naklonovani Git repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>list-branches</strong>
    <i>"Vypis vsech vzdalenych vetvi."</i>
    [repository]
    (println "Remote branch list:")
    (doseq [branch (jgit/git-branch-list repository :remote)]
        (println (.getName branch))))
</pre>

<p>Další část demonstračního příkladu je již jednoduchá, protože následující
funkce <strong>clone-and-list-branches</strong> naklonuje Git repositář,
zobrazí stav repositáře (ten v&nbsp;tomto případě <i>musí</i> být čistý) a
následně vypíše všechny vzdálené větve:</p>

<pre>
(defn <strong>clone-and-list-branches</strong>
    <i>"Funkce naklonuje repositar a vypise vsechny vzdalene vetve."</i>
    [repository-url directory-name]
    (let [repository (clone-repository repository-url directory-name)]
         <i>; navic jeste zjistime stav repositare</i>
         (println "Repository status: " (jgit/git-status repository))
         (list-branches repository)))
</pre>

<p>Za povšimnutí stojí použití formy <strong>try-finally</strong> zajišťující,
že pracovní adresář se vždy smaže, nezávisle na tom, zda při klonování či při
dalších manipulacích s&nbsp;repositářem dojde k&nbsp;vyhození výjimky:</p>

<pre>
(defn <strong>git-test-1</strong>
    <i>"Naklonovani repositare a vypis vzdalenych vetvi."</i>
    [repository-url directory-name]
    (try (clone-and-list-branches repository-url directory-name)
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
</pre>

<p>Podívejme se nyní na úplný výpis zdrojového kódu:</p>

<pre>
(ns <strong>git-test1.core</strong>
    (:gen-class))
&nbsp;
(require '[clj-jgit.porcelain :as jgit])
(require '[hozumi.rm-rf :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    <i>"Adresa Git repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se Git repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani Git repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>list-branches</strong>
    <i>"Vypis vsech vzdalenych vetvi."</i>
    [repository]
    (println "Remote branch list:")
    (doseq [branch (jgit/git-branch-list repository :remote)]
        (println (.getName branch))))
&nbsp;
(defn <strong>clone-and-list-branches</strong>
    <i>"Funkce naklonuje repositar a vypise vsechny vzdalene vetve."</i>
    [repository-url directory-name]
    (let [repository (clone-repository repository-url directory-name)]
         <i>; navic jeste zjistime stav repositare</i>
         (println "Repository status: " (jgit/git-status repository))
         (list-branches repository)))
&nbsp;
(defn <strong>git-test-1</strong>
    <i>"Naklonovani repositare a vypis vzdalenych vetvi."</i>
    [repository-url directory-name]
    (try (clone-and-list-branches repository-url directory-name)
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-1 repository-url directory-name))
</pre>

<p>Po spuštění příkladu by se na standardní výstup měly vypsat tyto řádky:</p>

<pre>
Repository status:  {:untracked #{}, :removed #{}, :modified #{}, :missing #{}, :changed #{}, :added #{}}
Remote branch list:
refs/remotes/origin/branch-1
refs/remotes/origin/branch-2
refs/remotes/origin/master
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Druhý demonstrační příklad &ndash; použití funkce <strong>load-repo</strong> pro načtení informací o Git repositáři z&nbsp;lokálního adresáře</h2>

<p>V&nbsp;dnešním druhém demonstračním příkladu si ukážeme použití funkce
nazvané <strong>load-repo</strong> pro načtení informací o Git repositáři,
který již byl naklonován dříve (nebo se může jednat o lokální repositář). Opět
si nejprve vytvoříme kostru projektu:</p>

<pre>
lein new app git-test2
</pre>

<p>Úprava projektového souboru <strong>project.clj</strong> je naprosto stejná,
jako tomu bylo v&nbsp;prvním demonstračním příkladu:</p>

<pre>
(defproject <strong>git-test2</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test2.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>I ve druhém demonstračním příkladu dojde k&nbsp;naklonování repositáře a
následně k&nbsp;výpisu informace o jeho stavu i seznamu vzdálených větví.
Zatímco však v&nbsp;prvním příkladu jsme si pamatovali hodnotu vrácenou funkcí
<strong>clj-jgit.porcelain/git-clone</strong>, ve druhém příkladu tuto hodnotu
&bdquo;zapomeneme&ldquo; (nikam se neuloží). Namísto toho je použita funkce
<strong>clj-jgit.porcelain/load-repo</strong>, které se předá adresář,
v&nbsp;němž je klon repositáře. Tuto funkci tedy použijeme vždy ve chvíli, kdy
existuje jeho lokální kopie, nezávisle na tom, v&nbsp;jakém je tato kopie
stavu:</p>

<pre>
(defn <strong>git-test-2</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis vzdalenych vetvi."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    (try (-&gt; (jgit/load-repo directory-name)
             list-branches)
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
</pre>

<p>Úplný zdrojový kód souboru <strong>src/git_test2/core.clj</strong>:</p>

<pre>
(ns <strong>git-test2.core</strong>
    (:gen-class))
&nbsp;
(require '[clj-jgit.porcelain :as jgit])
(require '[hozumi.rm-rf :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    <i>"Adresa Git repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se Git repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani Git repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>list-branches</strong>
    <i>"Vypis vsech vzdalenych vetvi."</i>
    [repository]
    (println "Remote branch list:")
    (doseq [branch (jgit/git-branch-list repository :remote)]
        (println (.getName branch))))
&nbsp;
(defn <strong>git-test-2</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis vzdalenych vetvi."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    (try (-&gt; (jgit/load-repo directory-name)
             list-branches)
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-2 repository-url directory-name))
</pre>

<p>Po spuštění příkladu by se na standardní výstup měly vypsat tyto řádky:</p>

<pre>
Repository status:  {:untracked #{}, :removed #{}, :modified #{}, :missing #{}, :changed #{}, :added #{}}
Remote branch list:
refs/remotes/origin/branch-1
refs/remotes/origin/branch-2
refs/remotes/origin/master
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Třetí demonstrační příklad &ndash; využití makra <strong>with-repo</strong></h2>

<p>Třetí demonstrační příklad, který si dnes ukážeme, vysvětluje použití makra
<strong>with-repo</strong>. S&nbsp;makry začínajícími prefixem
<strong>with-</strong> se můžeme v&nbsp;knihovnách programovacího jazyka
<i>Clojure</i> setkat poměrně často, protože se používají ve chvíli, kdy je
zapotřebí pracovat s&nbsp;nějakým zdrojem (soubor, síťové připojení, standardní
výstup přesměrovaný do řetězce), jenž se musí po dokončení práce nějakým
způsobem &bdquo;uzavřít&ldquo; či &bdquo;finalizovat&ldquo;. Všechny funkce
volané uvnitř těchto maker mohou pracovat se specifikovaným zdrojem a nemusí se
starat o jeho uvolnění. Makro <strong>with-repo</strong> není žádnou výjimkou
&ndash; používá se ve chvíli, kdy se načte informace o repositáři a uloží se do
implicitně nazvané lokální proměnné <strong>repo</strong>. Práce s&nbsp;touto
proměnnou je ve skutečnosti velmi snadná, o čemž se lze snadno přesvědčit:</p>

<pre>
(defn <strong>git-test-3</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis vzdalenych vetvi."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    <i>; povsimnete si pouziti "automagicky" vytvorene promenne,</i>
    <i>; ktera se jmenuje 'repo'</i>
    (try (jgit/with-repo directory-name
                         (list-branches repo)
                         <i>; libovolné množství funkcí používajících proměnnou <strong>repo</strong></i>
         )
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
</pre>

<p>Opět si nejprve vytvoříme kostru projektu:</p>

<pre>
lein new app git-test3
</pre>

<p>Úprava projektového souboru <strong>project.clj</strong> je naprosto stejná,
jako tomu bylo v&nbsp;prvním i ve druhém demonstračním příkladu:</p>

<pre>
(defproject <strong>git-test3</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test3.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Zdrojový kód souboru <strong>src/git_test3/core.clj</strong>:</p>

<pre>
(ns <strong>git-test3.core</strong>
    (:gen-class))
&nbsp;
(require '[clj-jgit.porcelain :as jgit])
(require '[hozumi.rm-rf :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    <i>"Adresa Git repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se Git repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani Git repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>list-branches</strong>
    <i>"Vypis vsech vzdalenych vetvi."</i>
    [repository]
    (println "Remote branch list:")
    (doseq [branch (jgit/git-branch-list repository :remote)]
        (println (.getName branch))))
&nbsp;
(defn <strong>git-test-3</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis vzdalenych vetvi."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    <i>; povsimnete si pouziti "automagicky" vytvorene promenne,</i>
    <i>; ktera se jmenuje 'repo'</i>
    (try (jgit/with-repo directory-name
                         (list-branches repo))
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-3 repository-url directory-name))
</pre>

<p>Po spuštění příkladu by se na standardní výstup měly opět vypsat stejné
řádky:</p>

<pre>
Repository status:  {:untracked #{}, :removed #{}, :modified #{}, :missing #{}, :changed #{}, :added #{}}
Remote branch list:
refs/remotes/origin/branch-1
refs/remotes/origin/branch-2
refs/remotes/origin/master
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Čtvrtý demonstrační příklad &ndash; výpis logu ve zjednodušené podobě</h2>

<p>Dnešní čtvrtý demonstrační příklad se již odlišuje od předchozích třech
příkladů, protože se v&nbsp;něm bude pracovat s&nbsp;logy
(resp.&nbsp;zjednodušeně řečeno se zprávami o jednotlivých commitech).
Vytvoření kostry příkladu je snadné:</p>

<pre>
lein new app git-test4
</pre>

<p>Úprava projektového souboru <strong>project.clj</strong> je stále
stejná:</p>

<pre>
(defproject <strong>git-test4</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test4.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Základní kostra tohoto příkladu je prakticky shodná s&nbsp;příkladem
předchozím, ovšem volá se odlišná funkce nazvaná
<strong>print-simple-log</strong>, která je zde zvýrazněna tučným písmem:</p>

<pre>
(defn <strong>git-test-4</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis logu."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    <i>; povsimnete si pouziti "automagicky" vytvorene promenne,</i>
    <i>; ktera se jmenuje 'repo'</i>
    (try (jgit/with-repo directory-name
                         (<strong>print-simple-log</strong> repo))
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
</pre>

<p>Ve funkci <strong>print-simple-log</strong> je volání
<strong>clj-jgit.porcelain/git-log</strong> vracející informace z&nbsp;logu.
Pro převod na čitelné informace o commitech je nutné (uvnitř smyčky) zavolat
funkci <strong>clj-jgit.querying/commit-info</strong> vracející pro každý log
speciální javovský objekt typu <strong>RevCommit</strong> a další informace
uložené do mapy:</p>

<pre>
(defn <strong>print-simple-log</strong>
    <i>"Vypis logu ve zjednodusenem formatu."</i>
    [repository]
    (doseq [log-entry (jgit/git-log repository)]
        (println (jgit-query/commit-info repository log-entry))))
</pre>

<p>Po spuštění příkladu by se na standardní výstup měly vypsat tyto (poměrně
nečitelné) řádky:</p>

<pre>
{:email ptisnovs@redhat.com, :raw #&lt;RevCommit commit 394ce42cb3bcf44ff4e9a94949814bacddcdfe9b 1434726521 ----sp&gt;, :time #inst "2015-06-19T15:08:41.000-00:00", :branches (refs/heads/master), :changed_files ([garbage :add]), :merge false, :author Pavel Tisnovsky, :id 394ce42cb3bcf44ff4e9a94949814bacddcdfe9b, :repo #&lt;Git Git[Repository[repo/.git]]&gt;, :message Added garbage}
{:email ptisnovs@redhat.com, :raw #&lt;RevCommit commit 0fd398ab16e53ea0b783aef2413d75b75c6462cd 1434723899 ----sp&gt;, :time #inst "2015-06-19T14:24:59.000-00:00", :branches (refs/heads/master), :changed_files ([README.md :edit]), :merge false, :author Pavel Tisnovsky, :id 0fd398ab16e53ea0b783aef2413d75b75c6462cd, :repo #&lt;Git Git[Repository[repo/.git]]&gt;, :message Updated README.md}
{:email ptisnovs@redhat.com, :raw #&lt;RevCommit commit badf2b12f9281a8581009bfa068a5147c4cbc87a 1434722046 ----sp&gt;, :time #inst "2015-06-19T13:54:06.000-00:00", :branches (refs/heads/master), :changed_files [[README.md :add]], :merge false, :author Pavel Tišnovský, :id badf2b12f9281a8581009bfa068a5147c4cbc87a, :repo #&lt;Git Git[Repository[repo/.git]]&gt;, :message Initial commit}
</pre>

<p>Zdrojový kód souboru <strong>src/git_test4/core.clj</strong>:</p>

<pre>
(ns <strong>git-test4.core</strong>
    (:gen-class))
&nbsp;
(require '[clj-jgit.porcelain :as jgit])
(require '[clj-jgit.querying  :as jgit-query])
(require '[hozumi.rm-rf :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    <i>"Adresa Git repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se Git repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani Git repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>print-simple-log</strong>
    <i>"Vypis logu ve zjednodusenem formatu."</i>
    [repository]
    (doseq [log-entry (jgit/git-log repository)]
        (println (jgit-query/commit-info repository log-entry))))
&nbsp;
(defn <strong>git-test-4</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis logu."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    <i>; povsimnete si pouziti "automagicky" vytvorene promenne,</i>
    <i>; ktera se jmenuje 'repo'</i>
    (try (jgit/with-repo directory-name
                         (print-simple-log repo))
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-4 repository-url directory-name))
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Pátý demonstrační příklad &ndash; výpis vybraných informací z&nbsp;logu</h2>

<p>Informace z&nbsp;logu, které byly vypsány v&nbsp;rámci <a
href="#k06">předchozího příkladu</a> byly poměrně nečitelné, ovšem ve
skutečnosti je relativně snadné z&nbsp;vrácené sekvence objektů získat pouze
potřebné informace. Jak se to dělá, si ukážeme v&nbsp;předposledním
demonstračním příkladu. Vytvoření kostry příkladu je stále stejné:</p>

<pre>
lein new app git-test5
</pre>

<p>Úprava projektového souboru <strong>project.clj</strong> taktéž nepřináší
žádné nové změny:</p>

<pre>
(defproject <strong>git-test5</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test5.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>Funkce <strong>print-simple-log</strong> z&nbsp;předchozího příkladu pouze
bez dalších úprav převáděla obsah (atributy) datových struktur vracených funkcí
<strong>commit-info</strong> na řetězec, který byl ihned poté vypsán na
standardní výstup:</p>

<pre>
(defn <strong>print-simple-log</strong>
    <i>"Vypis logu ve zjednodusenem formatu."</i>
    [repository]
    (doseq [log-entry (jgit/git-log repository)]
        (println (jgit-query/commit-info repository log-entry))))
</pre>

<p>Pro vylepšení vypisovaných výsledků o commitech však můžeme výsledek funkce
<strong>commit-info</strong> uložit do lokální proměnné a následně získat a
vypsat pouze vybrané atributy. Vzhledem k&nbsp;tomu, že je vrácena mapa, je
získání atributů snadné, a to buď funkcí <strong>get</strong> nebo ještě
jednodušeji zápisem <strong>(:klíč mapa)</strong>:</p>

<pre>
(defn <strong>print-customized-log</strong>
    <i>"Vypis logovacich informaci ve zvolenem formatu."</i>
    [repository]
    (doseq [log-entry (jgit/git-log repository)]
        (let [info (jgit-query/commit-info repository log-entry)]
             (println (:author info) ":" (:message info)))))
</pre>

<p>Informace vypsané funkcí <strong>print-customized-log</strong> jsou již bez
problémů čitelné:</p>

<pre>
Pavel Tisnovsky : Added garbage
Pavel Tisnovsky : Updated README.md
Pavel Tišnovský : Initial commit
</pre>

<p>Podívejme se nyní na úplný zdrojový kód souboru
<strong>src/git_test5/core.clj</strong>:</p>

<pre>
(ns <strong>git-test5.core</strong>
    (:gen-class))
&nbsp;
(require '[clj-jgit.porcelain :as jgit])
(require '[clj-jgit.querying  :as jgit-query])
(require '[hozumi.rm-rf :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    <i>"Adresa Git repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se Git repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani Git repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>print-customized-log</strong>
    <i>"Vypis logovacich informaci ve zvolenem formatu."</i>
    [repository]
    (doseq [log-entry (jgit/git-log repository)]
        (let [info (jgit-query/commit-info repository log-entry)]
             (println (:author info) ":" (:message info)))))
&nbsp;
(defn <strong>git-test-5</strong>
    <i>"Naklonovani repositare, nacteni informaci</i>
    <i> z vytvoreneho adresare a vypis podrobnejsiho logu."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; nacteni informaci o repositari z lokalniho adresare</i>
    <i>; povsimnete si pouziti "automagicky" vytvorene promenne,</i>
    <i>; ktera se jmenuje 'repo'</i>
    (try (jgit/with-repo directory-name
                         (print-customized-log repo))
         (finally
             <i>; vymazani adresare s naklonovanym repositarem</i>
             (delete-directory directory-name))))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-5 repository-url directory-name))
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Šestý demonstrační příklad &ndash; přidání a modifikace souborů v&nbsp;GIT repositáři, provedení commitu</h2>

<p>Dnešní šestý a současně i poslední demonstrační příklad nazvaný
<strong>git-test6</strong> bude již zajímavější, než příklady předchozí.
Ukážeme si totiž přidávání a modifikaci souborů v&nbsp;repositáři, provádění
commitů a taktéž vliv těchto operací na stav repositáře. Opět si tedy vytvořme
kostru příkladu:</p>

<pre>
lein new app git-test6
</pre>

<p>Úprava projektového souboru <strong>project.clj</strong> je stále stejná a
spočívá v&nbsp;přidání dvou nových knihoven:</p>

<pre>
(defproject <strong>git-test6</strong> "0.1.0-SNAPSHOT"
    :description "FIXME: write description"
    :url "http://example.com/FIXME"
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]
                   <strong>[clj-jgit "0.8.0"]</strong>
                   <strong>[clj-rm-rf "1.0.0-SNAPSHOT"]</strong>]
    :main ^:skip-aot git-test6.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}})
</pre>

<p>V&nbsp;hlavní části programu se používají tyto funkce a makra:</p>

<table>
<tr><th>Funkce či makro</th><th>Význam</th></tr>
<tr><td>clj-jgit.porcelain/git-clone </td><td>naklonování repositáře (již známe)</td></tr>
<tr><td>clj-jgit.porcelain/with-repo </td><td>blok, v&nbsp;němž se pracuje se specifikovaným repositářem</td></tr>
<tr><td>clj-jgit.porcelain/git-add   </td><td>přidání souboru či změny do stage area</td></tr>
<tr><td>clj-jgit.porcelain/git-commit</td><td>provedení commitu (ze stage area do lokálního repa)</td></tr>
<tr><td>clj-jgit.porcelain/git-status</td><td>získání stavu repositáře</td></tr>
</table>

<p>Stav repositáře má podobu mapy se šesticí prvků s&nbsp;klíči :untracked,
:removed, :modified, :missing, :changed a :added. Hodnotami prvků jsou množiny
(set) souborů.</p>

<p>Hlavní část demonstračního programu, kde se provádí změny
v&nbsp;repositáři:</p>

<pre>
(defn <strong>git-test-6</strong>
    <i>"Naklonovani repositare a pridani noveho souboru."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; budeme pracova s repositarem, ktery je v nasledujicim bloku</i>
    <i>; predstavovan symbolem 'repo'</i>
    (jgit/with-repo directory-name
         <i>; stav repa na zacatku</i>
         (println "Repository status: " (jgit/git-status repo))
&nbsp;
         <i>; vytvoreni noveho souboru</i>
         (spit (str directory-name "/answer.txt") "*42*")
         <i>; modifikace stavajiciho souboru</i>
         (spit (str directory-name "/README.md") "new text")
         <i>; novy stav repa</i>
         (println "Repository status: " (jgit/git-status repo))
&nbsp;
         <i>; pridani zmen do stage area</i>
         (jgit/git-add repo "answer.txt")
         (jgit/git-add repo "README.md")
         <i>; novy stav repa</i>
         (println "Repository status: " (jgit/git-status repo))
&nbsp;
         <i>; provedeme commit vsech zmen</i>
         (jgit/git-commit repo "The Answer to the Ultimate Question of Life, the Universe, and Everything")
         <i>; konecny stav repa</i>
         (println "Repository status: " (jgit/git-status repo))
    )
    (delete-directory directory-name))
</pre>

<p>Po spuštění by se měla na standardní výstup vypsat pětice stavů
repositáře:</p>

<pre>
Repository status:  {:untracked #{}, :removed #{}, :modified #{}, :missing #{}, :changed #{}, :added #{}}
Repository status:  {:untracked #{answer.txt}, :removed #{}, :modified #{README.md}, :missing #{}, :changed #{}, :added #{}}
Repository status:  {:untracked #{}, :removed #{}, :modified #{}, :missing #{}, :changed #{README.md}, :added #{answer.txt}}
Repository status:  {:untracked #{}, :removed #{}, :modified #{}, :missing #{}, :changed #{}, :added #{}}
</pre>

<p>Význam jednotlivých řádků:</p>

<ol>
<li>Na začátku (ihned po naklonování) je repositář ve stavu <i>clean</i>, což je logické</li>
<li>Po vytvoření souboru <strong>answer.txt</strong> (ten v&nbsp;repu neexistoval) je tento soubor ve stavu <i>untracked</i></li>
<li>Po modifikaci souboru <strong>README.md</strong> (ten již v&nbsp;repu existoval) je tento soubor ve stavu <i>modified</i></li>
<li><strong>(jgit/git-add repo "answer.txt")</strong> zajistí změnu stavu z&nbsp;<i>untracked</i> na <i>added</i></li>
<li><strong>(jgit/git-add repo "README.md")</strong> zajistí změnu stavu z&nbsp;<i>modified</i> na <i>changed</i></li>
<li>Po <strong>(jgit/git-commit repo zpráva)</strong> se repositář opět ocitne ve stavu <i>clean</i></li>
</ol>

<p>Zdrojový kód souboru <strong>src/git_test6/core.clj</strong>:</p>

<pre>
(ns <strong>git-test6.core</strong>
    (:gen-class))
&nbsp;
(require '[clj-jgit.porcelain :as jgit])
(require '[hozumi.rm-rf       :as rm-rf])
&nbsp;
(def <strong>repository-url</strong>
    <i>"Adresa Git repositare vcetne specifikace protokolu."</i>
    "https://github.com/tisnik/testrepo.git")
&nbsp;
(def <strong>directory-name</strong>
    <i>"Jmeno adresare, do ktereho se Git repositar naklonuje."</i>
    "repo")
&nbsp;
(defn <strong>delete-directory</strong>
    <i>"Smazani adresare vcetne podadresaru a souboru."</i>
    [directory]
    (rm-rf/rm-r (java.io.File. directory)))
&nbsp;
(defn <strong>clone-repository</strong>
    <i>"Naklonovani Git repositare do specifikovaneho adresare."</i>
    [url directory]
    (jgit/git-clone url directory))
&nbsp;
(defn <strong>git-test-6</strong>
    <i>"Naklonovani repositare a pridani noveho souboru."</i>
    [repository-url directory-name]
    <i>; naklonovani repositare do specifikovaneho adresare</i>
    (clone-repository repository-url directory-name)
    <i>; budeme pracova s repositarem, ktery je v nasledujicim bloku</i>
    <i>; predstavovan symbolem 'repo'</i>
    (jgit/with-repo directory-name
         <i>; stav repa na zacatku</i>
         (println "Repository status: " (jgit/git-status repo))
&nbsp;
         <i>; vytvoreni noveho souboru</i>
         (spit (str directory-name "/answer.txt") "*42*")
         <i>; modifikace stavajiciho souboru</i>
         (spit (str directory-name "/README.md") "new text")
         <i>; novy stav repa</i>
         (println "Repository status: " (jgit/git-status repo))
&nbsp;
         <i>; pridani zmen do stage area</i>
         (jgit/git-add repo "answer.txt")
         (jgit/git-add repo "README.md")
         <i>; novy stav repa</i>
         (println "Repository status: " (jgit/git-status repo))
&nbsp;
         <i>; provedeme commit vsech zmen</i>
         (jgit/git-commit repo "The Answer to the Ultimate Question of Life, the Universe, and Everything")
         <i>; konecny stav repa</i>
         (println "Repository status: " (jgit/git-status repo))
    )
    (delete-directory directory-name))
&nbsp;
(defn <strong>-main</strong>
    <i>"Funkce zavolana po zadani prikazu 'lein run'."</i>
    [&amp; args]
    (git-test-6 repository-url directory-name))
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všech šest dnes popsaných demonstračních příkladů bylo, podobně jako
v&nbsp;předchozích částech tohoto seriálu, uloženo do Git repositáře dostupného
na adrese <a
href="https://github.com/tisnik/clojure-examples">https://github.com/tisnik/clojure-examples</a>.
V&nbsp;tabulce zobrazené pod tímto odstavcem naleznete na zdrojové kódy
jednotlivých příkladů přímé odkazy:</p>

<table>
<tr><th>#</th><th>Příklad </th><th>Github</th></tr>
<tr><td>1</td><td>git-test1</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test1">https://github.com/tisnik/clojure-examples/tree/master/git-test1</a></td></tr>
<tr><td>2</td><td>git-test2</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test2">https://github.com/tisnik/clojure-examples/tree/master/git-test2</a></td></tr>
<tr><td>3</td><td>git-test3</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test3">https://github.com/tisnik/clojure-examples/tree/master/git-test3</a></td></tr>
<tr><td>4</td><td>git-test4</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test4">https://github.com/tisnik/clojure-examples/tree/master/git-test4</a></td></tr>
<tr><td>5</td><td>git-test5</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test5">https://github.com/tisnik/clojure-examples/tree/master/git-test5</a></td></tr>
<tr><td>6</td><td>git-test6</td><td><a href="https://github.com/tisnik/clojure-examples/tree/master/git-test6">https://github.com/tisnik/clojure-examples/tree/master/git-test6</a></td></tr>
</table>

<p>Naklonování celého repositáře zajistí příkaz:</p>

<pre>
git clone http://github.com/tisnik/clojure-examples.git
</pre>

<pre>
Cloning into 'clojure-examples'...
remote: Counting objects: 638, done.
remote: Compressing objects: 100% (48/48), done.
Receiving objects: 100% (638/638), 101.89 KiB | 141.00 KiB/s, done.
remote: Total 638 (delta 30), reused 0 (delta 0), pack-reused 560
Resolving deltas: 100% (248/248), done.
Checking connectivity... done.
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Odkazy na předchozí části seriálu</h2>

<p>Stalo se již zvykem uvést odkazy na všechny předchozí části tohoto seriálu.
Tento zvyk samozřejmě dodržíme i dnes:</p>

<ol>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s využitím knihovny Clisk (dokončení)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (2)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v jazyce Clojure (3)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/</a>
</li>

</ol>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odkazy na Internetu</h2>

<ol>

<li>Seriál o Gitu: 1. díl - Git - Historie a principy<br />
<a href="http://www.itnetwork.cz/git-tutorial-historie-a-principy">http://www.itnetwork.cz/git-tutorial-historie-a-principy</a>
</li>

<li>2. díl - Git - Instalace a vytvoření repositáře<br />
<a href="http://www.itnetwork.cz/git-tutorial-instalace-a-stazeni-repositare">http://www.itnetwork.cz/git-tutorial-instalace-a-stazeni-repositare</a>
</li>

<li>3. díl - Git - Základy<br />
<a href="http://www.itnetwork.cz/git-tutorial-zaklady">http://www.itnetwork.cz/git-tutorial-zaklady</a>
</li>

<li>4. díl - Git - Zkoumání historie<br />
<a href="http://www.itnetwork.cz/git-tutorial-historie">http://www.itnetwork.cz/git-tutorial-historie</a>
</li>

<li>5. díl - Git - Rozděluj a panuj<br />
<a href="http://www.itnetwork.cz/git-tutorial-vetve">http://www.itnetwork.cz/git-tutorial-vetve</a>
</li>

<li>6. díl - Git - práce se vzdáleným repositářem<br />
<a href="http://www.itnetwork.cz/git-prace-se-vzdalenym-repositarem">http://www.itnetwork.cz/git-prace-se-vzdalenym-repositarem</a>
</li>

<li>Building User Interfaces with Seesaw (slajdy k&nbsp;přednášce)<br />
<a href="http://darevay.com/talks/clojurewest2012/#/title-slide">http://darevay.com/talks/clojurewest2012/#/title-slide</a>
</li>

<li>Seesaw na GitHubu<br />
<a href="https://github.com/daveray/seesaw">https://github.com/daveray/seesaw</a>
</li>

<li>Seesaw API Documentation<br />
<a href="http://daveray.github.io/seesaw/">http://daveray.github.io/seesaw/</a>
</li>

<li>Seesaw wiki<br />
<a href="https://github.com/daveray/seesaw/wiki">https://github.com/daveray/seesaw/wiki</a>
</li>

<li>seesaw-repl-tutorial.clj<br />
<a href="https://gist.github.com/daveray/1441520">https://gist.github.com/daveray/1441520</a>
</li>

<li>Témata o Seesaw na Google groups<br />
<a href="https://groups.google.com/forum/#!forum/seesaw-clj">https://groups.google.com/forum/#!forum/seesaw-clj</a>
</li>

<li>Threading macro (dokumentace k&nbsp;jazyku Clojure)<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;</a>
</li>

<li>Understanding the Clojure -&gt; macro<br />
<a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/</a>
</li>

<li>Clisk<br />
<a href="https://github.com/mikera/clisk">https://github.com/mikera/clisk</a>
</li>

<li>clojars: net.mikera/clisk<br />
<a href="https://clojars.org/net.mikera/clisk">https://clojars.org/net.mikera/clisk</a>
</li>

<li>clojure.inspector<br />
<a href="http://clojure.github.io/clojure/clojure.inspector-api.html">http://clojure.github.io/clojure/clojure.inspector-api.html</a>
</li>

<li>Clisk: wiki<br />
<a href="https://github.com/mikera/clisk/wiki">https://github.com/mikera/clisk/wiki</a>
</li>

<li>Dokumentace vygenerovaná pro knihovnu core.matrix<br />
<a href="https://cloojure.github.io/doc/core.matrix/index.html">https://cloojure.github.io/doc/core.matrix/index.html</a>
</li>

<li>Size and Dimensionality<br />
<a href="https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion">https://groups.google.com/forum/#!topic/numerical-clojure/zebBCa68eTw/discussion</a>
</li>

<li>Towards core.matrix for Clojure?<br />
<a href="https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/">https://clojurefun.wordpress.com/2013/01/05/towards-core-matrix-for-clojure/</a>
</li>

<li>The Clojure Toolbox<br />
<a href="http://www.clojure-toolbox.com/">http://www.clojure-toolbox.com/</a>
</li>

<li>Neanderthal<br />
<a href="http://neanderthal.uncomplicate.org/">http://neanderthal.uncomplicate.org/</a>
</li>

<li>Hello world project<br />
<a href="https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj">https://github.com/uncomplicate/neanderthal/blob/master/examples/hello-world/project.clj</a>
</li>

<li>vectorz-clj<br />
<a href="https://github.com/mikera/vectorz-clj">https://github.com/mikera/vectorz-clj</a>
</li>

<li>vectorz - Examples<br />
<a href="https://github.com/mikera/vectorz-clj/wiki/Examples">https://github.com/mikera/vectorz-clj/wiki/Examples</a>
</li>

<li>gloss<br />
<a href="https://github.com/ztellman/gloss">https://github.com/ztellman/gloss</a>
</li>

<li>HTTP client/server for Clojure<br />
<a href="http://www.http-kit.org/">http://www.http-kit.org/</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>java.jdbc API Reference<br />
<a href="https://clojure.github.io/java.jdbc/">https://clojure.github.io/java.jdbc/</a>
</li>

<li>Hiccup<br />
<a href="https://github.com/weavejester/hiccup">https://github.com/weavejester/hiccup</a>
</li>

<li>Clojure Ring na GitHubu<br />
<a href="https://github.com/ring-clojure/ring">https://github.com/ring-clojure/ring</a>
</li>

<li>A brief overview of the Clojure web stack<br />
<a href="https://brehaut.net/blog/2011/ring_introduction">https://brehaut.net/blog/2011/ring_introduction</a>
</li>

<li>Getting Started with Ring<br />
<a href="http://www.learningclojure.com/2013/01/getting-started-with-ring.html">http://www.learningclojure.com/2013/01/getting-started-with-ring.html</a>
</li>

<li>Getting Started with Ring and Compojure - Clojure Web Programming<br />
<a href="http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html">http://www.myclojureadventure.com/2011/03/getting-started-with-ring-and-compojure.html</a>
</li>

<li>Unit Testing in Clojure<br />
<a href="http://nakkaya.com/2009/11/18/unit-testing-in-clojure/">http://nakkaya.com/2009/11/18/unit-testing-in-clojure/</a>
</li>

<li>Testing in Clojure (Part-1: Unit testing)<br />
<a href="http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/">http://blog.knoldus.com/2014/03/22/testing-in-clojure-part-1-unit-testing/</a>
</li>

<li>API for clojure.test - Clojure v1.6 (stable)<br />
<a href="https://clojure.github.io/clojure/clojure.test-api.html">https://clojure.github.io/clojure/clojure.test-api.html</a>
</li>

<li>Leiningen: úvodní stránka<br />
<a href="http://leiningen.org/">http://leiningen.org/</a>
</li>

<li>Leiningen: Git repository<br />
<a href="https://github.com/technomancy/leiningen">https://github.com/technomancy/leiningen</a>
</li>

<li>leiningen-win-installer<br />
<a href="http://leiningen-win-installer.djpowell.net/">http://leiningen-win-installer.djpowell.net/</a>
</li>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

