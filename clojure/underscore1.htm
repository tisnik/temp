<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Underscore aneb další knihovna pro funkcionální programování v JavaScriptu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Underscore aneb další knihovna pro funkcionální programování v JavaScriptu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na články o knihovně Mori navážeme popisem další zajímavé knihovny určené pro podporu funkcionálního programování v JavaScriptu. Tato knihovna se jmenuje Underscore (alternativně Underscore.js) a na rozdíl od Mori je navržena tak, aby efektivně pracovala přímo s datovými strukturami JavaScriptu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Underscore aneb další knihovna pro funkcionální programování v&nbsp;JavaScriptu</a></p>
<p><a href="#k02">2. Mori versus Underscore: dva různé přístupy k&nbsp;podobné problematice</a></p>
<p><a href="#k03">3. Základní funkce pro &bdquo;funkcionální&ldquo; práci s&nbsp;poli</a></p>
<p><a href="#k04">4. Funkce <strong>uniq</strong></a></p>
<p><a href="#k05">5. První demonstrační příklad</a></p>
<p><a href="#k06">6. Různé varianty funkce <strong>range</strong></a></p>
<p><a href="#k07">7. Druhý demonstrační příklad</a></p>
<p><a href="#k08">8. Vyhledávání prvků v&nbsp;polích</a></p>
<p><a href="#k09">9. Třetí demonstrační příklad</a></p>
<p><a href="#k10">10. Množinové operace s&nbsp;poli</a></p>
<p><a href="#k11">11. Čtvrtý demonstrační příklad</a></p>
<p><a href="#k12">12. Zploštění vnořených polí, kombinace prvků z&nbsp;různých polí atd.</a></p>
<p><a href="#k13">13. Pátý demonstrační příklad</a></p>
<p><a href="#k14">14. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k15">15. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Underscore aneb další knihovna pro funkcionální programování v&nbsp;JavaScriptu</h2>

<p>V&nbsp;postupně vznikajícím miniseriálu o různých knihovnách, frameworcích a
transpřekladačích určených pro stále populárnější programovací jazyk
<i>JavaScript</i> jsme se prozatím zabývali čtyřmi zajímavými projekty. Nejprve
jsme si popsali takzvaný transpřekladač (<i>transcompiler</i>) pojmenovaný
<i>lua2js</i>, který transformuje kód z&nbsp;programovacího jazyka Lua do
JavaScriptu. Dále jsme se zmínili o virtuálním stroji jazyka Lua
naprogramovaném v&nbsp;JavaScriptu, který se jmenuje <i>lua.vm.js</i>.</p>

<p>Dalším projektem byl opět transpřekladač nazvaný <i>Wisp</i>, který slouží
pro transformaci zdrojového kódu z&nbsp;jazyka syntaxí podobného LISPu, Scheme
či Clojure do JavaScriptu, přičemž transformovaný kód je stále velmi dobře
čitelný (u některých dalších transpřekladačů toto pravidlo neplatí). Posledním
prozatím popsaným projektem je knihovna pojmenovaná <i>Mori</i>, která do
JavaScriptu přináší perzistentní a neměnitelné datové struktury používané
v&nbsp;jazyku <i>Clojure</i>, resp.&nbsp;přesněji řečeno <i>ClojureScriptu</i>.
Ve skutečnosti <i>Mori</i> implementaci perzistentních datových struktur přímo
z&nbsp;ClojureScriptu přebírá a jen nepatrně je upravuje a přidává snadno
použitelné JavaScriptové API.</p>

<p>Pro podrobnější informace o výše zmíněných projektech <i>lua2js</i>,
<i>lua.vm.js</i>, <i>Wisp</i> a <i>Mori</i> se stačí podívat na následující
pětici článků, které již zde na Rootu vyšly:</p>

<ol>
<li><a href="http://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/">Programovací jazyk Lua v roli skriptovacího jazyka pro WWW stránky</a> (popis projektů <i>lua2js</i> a <i>lua.vm.js</i>)</li>
<li><a href="http://www.root.cz/clanky/propojeni-sveta-lispu-se-svetem-javascriptu-s-vyuzitim-transprekladace-wisp/">Propojení světa LISPu se světem JavaScriptu s využitím transpřekladače Wisp (1.část)</a></li>
<li><a href="http://www.root.cz/clanky/propojeni-sveta-lispu-se-svetem-javascriptu-s-vyuzitim-transprekladace-wisp-2-cast/">Propojení světa LISPu se světem JavaScriptu s využitím transpřekladače Wisp (2.část)</a></li>
<li><a href="http://www.root.cz/clanky/projekt-mori-aneb-perzistentni-datove-struktury-pro-javascript/">Projekt Mori aneb perzistentní datové struktury pro JavaScript</a></li>
<li><a href="http://www.root.cz/clanky/projekt-mori-aneb-perzistentni-datove-struktury-pro-javascript-dokonceni/">Projekt Mori aneb perzistentní datové struktury pro JavaScript (dokončení)</a></li>
</ol>



<p><a name="k02"></a></p>
<h2 id="k02">2. Mori versus Underscore: dva různé přístupy k&nbsp;podobné problematice</h2>

<p>Již zmíněný projekt <i>Mori</i> je sice postaven na robustních knihovnách
ClojureScriptu, v&nbsp;nichž jsou implementovány perzistentní seznamy, vektory,
fronty, množiny a mapy, to však může být v&nbsp;některých případech i jeho
nevýhoda, protože i &bdquo;minifikovaná&ldquo; verze této knihovny je relativně
velká (konkrétně 185 kB). Alternativu, která je dnes s&nbsp;velkou
pravděpodobností mezi javascriptisty více populární, představuje například
knihovna nazvaná <i>Underscore</i> či též <i>Underscore.js</i>. Mimochodem,
jméno této knihovny je odvozeno od toho, že se ke všem funkcím přistupuje přes
objekt pojmenovaný jednoduše &bdquo;_&ldquo; (kombinace s&nbsp;JQuery apod. je
tedy možná, zdrojový kód pak začne být pěkně přeplněn různými divnými symboly
:-).</p>

<p>Knihovna <i>Underscore</i> je navržena poměrně minimalistickým způsobem, což
konkrétně znamená, že současná &bdquo;minifikovaná&ldquo; verze této knihovny
má velikost necelých šestnácti kilobajtů (první verze měla dokonce jen čtyři
kilobajty). Tyto rozdíly se sice mohou zdát malé, ovšem u komplikovanější
aplikace (navíc přenášené někdy přes pomalé a drahé připojení) se počítá každý
ušetřený kilobajt (ale možná jen jsem ze staré školy). V&nbsp;knihovně
<i>Underscore</i> najdeme mnoho funkcí pro práci s&nbsp;klasickými
JavaScriptovými poli, což sice jsou měnitelné struktury, ovšem samotná knihovna
<i>Underscore</i> se k&nbsp;polím chová &bdquo;funkcionálně&ldquo;, takže
jejich obsah nikdy nemodifikuje (navíc je práce s&nbsp;poli velmi efektivní).
Pole se zde používají i ve funkci množin apod. Další části knihovny
<i>Underscore</i> si popíšeme až v&nbsp;navazujících kapitolách a taktéž
v&nbsp;navazujícím článku, takže se nyní věnujme především polím.</p>

<p>Společné vlastnosti a rozdíly mezi knihovnami <i>Mori</i> a
<i>Underscore</i> lze shrnout (s&nbsp;určitým zjednodušením) takto:</p>

<table>
<tr><th>Vlastnost</th><th>Mori</th><th>Underscore</th></tr>
<tr><td>Velikost knihovny         </td><td>185 kB</td><td>16 kB</td></tr>
<tr><td>Rychlost (1 thread)       </td><td>menší</td><td>vyšší</td></tr>
<tr><td>Perzistentní struktury    </td><td>ano</td><td>ne</td></tr>
<tr><td>Lazy sekvence             </td><td>ano</td><td>ne</td></tr>
<tr><td>Nekonečné (lazy) sekvence </td><td>ano</td><td>ne</td></tr>
<tr><td>Založeno na               </td><td>struktury ClojureScriptu</td><td>Array v&nbsp;JavaScriptu</td></tr>
<tr><td>Rozšíření std. objektů JS </td><td>ne</td><td>ne</td></tr>
<tr><td>Funkce typu range         </td><td>ano</td><td>ano</td></tr>
<tr><td>Funkce typu map, reduce   </td><td>ano</td><td>ano</td></tr>
<tr><td>Funkce typu filter        </td><td>ano</td><td>ano</td></tr>
<tr><td>Vyhledávání v sekvencích  </td><td>ano</td><td>ano</td></tr>
<tr><td>Predikáty some a every    </td><td>ano</td><td>ano</td></tr>
<tr><td>Množinové operace         </td><td>ano</td><td>ano</td></tr>
<tr><td>Memoizace (cache výsledků)</td><td>nyní ne</td><td>explicitní</td></tr>
<tr><td>Další vlastnosti          </td><td>mapy, množiny</td><td>funkce pro lepší práci s JS objekty</td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Základní funkce pro &bdquo;funkcionální&ldquo; práci s&nbsp;poli</h2>

<p>V&nbsp;mnoha algoritmech, zejména pak v&nbsp;algoritmech založených na
zpracování seznamů (<i>list</i>), zásobníků (<i>stack</i>) a front
(<i>queue</i>), se velmi často přistupuje k&nbsp;prvnímu popř.&nbsp;poslednímu
prvku nějaké datové sekvence a taktéž se získává původní sekvence bez prvního
(popř.&nbsp;posledního) prvku. Pro tyto účely je v&nbsp;knihovně
<i>Underscore.js</i> implementována následující čtveřice funkcí (funkce
s&nbsp;různým počtem argumentů rozepisuji na více řádků):</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Význam</th></tr>
<tr><td>1</td><td>_.first(pole)     </td><td>vrací první prvek pole</td></tr>
<tr><td>2</td><td>_.first(pole, n)  </td><td>vrací prvních <i>n</i> prvků pole</td></tr>
<tr><td>3</td><td>_.last(pole)      </td><td>vrací poslední prvek pole</td></tr>
<tr><td>4</td><td>_.last(pole, n)   </td><td>vrací posledních <i>n</i> prvků pole</td></tr>
<tr><td>5</td><td>_.initial(pole)   </td><td>vrací kopii pole bez posledního prvku</td></tr>
<tr><td>6</td><td>_.initial(pole, n)</td><td>vrací kopii pole bez posledních <i>n</i> prvků</td></tr>
<tr><td>7</td><td>_.rest(pole)      </td><td>vrací kopii pole bez prvního prvku</td></tr>
<tr><td>8</td><td>_.rest(pole)      </td><td>vrací kopii pole bez prvních <i>n</i> prvků</td></tr>
</table>

<p>Pro některé funkce existují i jmenné aliasy:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Alias(y)</th></tr>
<tr><td>1</td><td>first</td><td>head, take</td></tr>
<tr><td>2</td><td>rest</td><td>tail, drop</td></tr>
</table>



<p><a name="k04"></a></p>
<h2 id="k04">4. Funkce <strong>uniq</strong></h2>

<p>Při tvorbě mnoha aplikací se setkáme s&nbsp;nutností odstranit z&nbsp;pole
duplicitní prvky. Pro tyto účely lze použít funkci nazvanou jednoduše
<strong>uniq</strong>. Této funkci se předává pole, výsledkem je nové pole bez
duplicitních prvků, přičemž za duplicitní prvky jsou považovány všechny
dvojice, kde platí X===Y (=== je JavaScriptový operátor). V&nbsp;případě, že je
pole nesetříděno, je použit algoritmus s&nbsp;větší složitostí (ostatně sami se
podívejte na jeho implementaci). Pokud je však zapotřebí odstranit duplicitní
prvky z&nbsp;již setříděného pole, může knihovna <i>Underscore</i> použít
rychlejší algoritmus, což se samozřejmě pozitivně projeví především u delších
polí (příkladem může být například klientská strana GIS s&nbsp;mnoha grafickými
objekty). V&nbsp;tomto případě je nutné funkci <strong>uniq</strong> předat
ještě druhý argument s&nbsp;pravdivostní hodnotou <strong>true</strong>, aby
byl rychlejší algoritmus vybrán:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Význam</th></tr>
<tr><td>1</td><td>_.uniq(pole)      </td><td>vrací nové pole s unikátními prvky</td></tr>
<tr><td>2</td><td>_.uniq(pole, true)</td><td>dtto, ovšem rychlejší u setříděného pole</td></tr>
</table>



<p><a name="k05"></a></p>
<h2 id="k05">5. První demonstrační příklad</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázána práce s&nbsp;výše
popsanými funkcemi <strong>first</strong>, <strong>last</strong>,
<strong>initial</strong>, <strong>rest</strong> a taktéž <strong>uniq</strong>.
Příklad je napsán takovým způsobem, aby ho bylo možné spustit přímo ve webovém
prohlížeči, například přes <a
href="https://github.com/tisnik/presentations/blob/master/underscore/underscore_01.html">tuto
jednoduchou webovou stránku</a>:</p>

<pre>
&lt;!doctype html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Underscore tests #01&lt;/title&gt;
        &lt;meta charset="utf-8"&gt;
        &lt;script src="underscore-min.js"&gt;&lt;/script&gt;
        &lt;script src="underscore_01.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Underscore tests #01&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Následuje výpis <a
href="https://github.com/tisnik/presentations/blob/master/underscore/underscore_01.js">zdrojového
kódu</a> tohoto demonstračního příkladu. Povšimněte si použití
<strong>eval</strong> ve funkci nazvané <strong>printArrayInfo()</strong>;
podobný kód jsme již viděli u popisu knihovny <i>Mori</i>:</p>

<pre>
<i>// ------------------------------------------------------------</i>
<i>// Knihovna Underscore.js: demonstracni priklad cislo 1</i>
<i>//                         Zakladni funkce pri praci s poli.</i>
<i>// ------------------------------------------------------------</i>
&nbsp;
&nbsp;
&nbsp;
<i>// funkce pro vypis informaci o vybranem poli (ci jinem objektu)</i>
<strong>function</strong> printArrayInfo(expression) {
    <strong>var</strong> anArray = eval(expression);
    console.log("---------------------------------");
    console.log(expression);
&nbsp;
    <i>// zjisteni typu objektu (a pripadne delky pole)</i>
    <strong>if</strong> (anArray instanceof Array) {
        console.log("type:    array");
        console.log("length:  " + anArray.length);
    }
    <i>// jiny typ objektu, nemame zde jistotu, ze existuje atribut length</i>
    <strong>else</strong> {
        console.log("type:    " + typeof anArray);
    }
    console.log("content: " + anArray);
}
&nbsp;
&nbsp;
&nbsp;
<i>// vytvoreni bezneho pole, nad kterym se budou provadet nektere operace</i>
<strong>var</strong> array1 = [1,2,3,4,5];
&nbsp;
<i>// informace o samotnem vstupnim poli</i>
printArrayInfo(array1);
&nbsp;
<i>// zakladni operace nad polem</i>
&nbsp;
<i>// funkce _.first()</i>
printArrayInfo("_.first(array1)");
printArrayInfo("_.first(array1, 2)");
printArrayInfo("_.first(array1, 100)"); <i>// n je vetsi nez delka pole</i>
&nbsp;
<i>// funkce _.last()</i>
printArrayInfo("_.last(array1)");
printArrayInfo("_.last(array1, 2)");
printArrayInfo("_.last(array1, 100)"); <i>// n je vetsi nez delka pole</i>
&nbsp;
<i>// funkce _.initial()</i>
printArrayInfo("_.initial(array1)");
printArrayInfo("_.initial(array1, 2)");
printArrayInfo("_.initial(array1, 100)"); <i>// n je vetsi nez delka pole</i>
&nbsp;
<i>// funkce _.rest()</i>
printArrayInfo("_.rest(array1)");
printArrayInfo("_.rest(array1, 2)");
printArrayInfo("_.rest(array1, 100)"); <i>// n je vetsi nez delka pole</i>
&nbsp;
&nbsp;
<i>// otestovani funkce uniq</i>
<strong>var</strong> array2 = [1,2,3,3,2,1];
<strong>var</strong> array3 = [3,2,1,1,2,3];
<strong>var</strong> array4 = [1,2,2,3,3,3,4,4,4,4];
&nbsp;
<i>// informace o samotnem vstupnim poli</i>
printArrayInfo(array2);
printArrayInfo(array3);
printArrayInfo(array4);
&nbsp;
<i>// vytvoreni pole s unikatnimi hodnotami</i>
printArrayInfo("_.uniq(array2)");
printArrayInfo("_.uniq(array3)");
&nbsp;
<i>// toto pole je setrideno, muzeme pouzit rychlejsi algoritmus</i>
printArrayInfo("_.uniq(array4, true)");
&nbsp;
<i>// plati o pro pole retezcu atd.</i>
<strong>var</strong> names = ["Perl", "Python", "Java", "JavaScript", "C", "Lua", "Clojure", "Lua", "C"];
printArrayInfo("names");
printArrayInfo("_.uniq(names)");
&nbsp;
&nbsp;
&nbsp;
<i>// ------------------------------------------------------------</i>
<i>// Finito</i>
<i>// ------------------------------------------------------------</i>
</pre>

<p>Výsledek běhu prvního demonstračního příkladu může vypadat následovně
(konzoli je možné zobrazit například přes Firebug apod.):</p>

<pre>
---------------------------------
[1, 2, 3, 4, 5]
type:    array
length:  5
content: 1,2,3,4,5
---------------------------------
_.first(array1)
type:    number
content: 1
---------------------------------
_.first(array1, 2)
type:    array
length:  2
content: 1,2
---------------------------------
_.first(array1, 100)
type:    array
length:  5
content: 1,2,3,4,5
---------------------------------
_.last(array1)
type:    number
content: 5
---------------------------------
_.last(array1, 2)
type:    array
length:  2
content: 4,5
---------------------------------
_.last(array1, 100)
type:    array
length:  5
content: 1,2,3,4,5
---------------------------------
_.initial(array1)
type:    array
length:  4
content: 1,2,3,4
---------------------------------
_.initial(array1, 2)
type:    array
length:  3
content: 1,2,3
---------------------------------
_.initial(array1, 100)
type:    array
length:  0
content: 
---------------------------------
_.rest(array1)
type:    array
length:  4
content: 2,3,4,5
---------------------------------
_.rest(array1, 2)
type:    array
length:  3
content: 3,4,5
---------------------------------
_.rest(array1, 100)
type:    array
length:  0
content: 
---------------------------------
[1, 2, 3, 3, 2, 1]
type:    array
length:  6
content: 1,2,3,3,2,1
---------------------------------
[3, 2, 1, 1, 2, 3]
type:    array
length:  6
content: 3,2,1,1,2,3
---------------------------------
[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
type:    array
length:  10
content: 1,2,2,3,3,3,4,4,4,4
---------------------------------
_.uniq(array2)
type:    array
length:  3
content: 1,2,3
---------------------------------
_.uniq(array3)
type:    array
length:  3
content: 3,2,1
---------------------------------
_.uniq(array4, true)
type:    array
length:  4
content: 1,2,3,4
---------------------------------
names
type:    array
length:  9
content: Perl,Python,Java,JavaScript,C,Lua,Clojure,Lua,C
---------------------------------
_.uniq(names)
type:    array
length:  7
content: Perl,Python,Java,JavaScript,C,Lua,Clojure
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Různé varianty funkce <strong>range</strong></h2>

<p>V&nbsp;knihovně <i>Underscore</i> nalezneme i velmi užitečnou funkci
nazvanou <strong>range</strong>, která zde slouží pro vytvoření pole
obsahujícího sekvenci číselných hodnot (výsledkem je tedy skutečné pole, nikoli
iterátor). Užitečnost této funkce se ve skutečnosti ještě řádově zvýší ve
chvíli, kdy se (už příště) seznámíme s&nbsp;funkcemi <strong>map</strong>,
<strong>reduce</strong>, <strong>filter</strong>, <strong>each</strong> a
<strong>zip</strong>, které knihovna <strong>Underscore</strong> samozřejmě
taktéž nabízí. Funkci <strong>range</strong> je možné předat počáteční hodnotu,
mezní hodnotu a taktéž krok (rozdíl hodnoty mezi dvěma prvky pole), ovšem dva
argumenty, konkrétně počáteční hodnota a krok jsou ve skutečnosti
nepovinné.</p>

<p>Zajímavé je, že počáteční hodnota, mezní hodnota i krok mohou být reálná
čísla, takže se tato funkce svým chováním odlišuje například od stejně
pojmenované funkce <strong>range</strong> známé z&nbsp;Pythonu 2.x (a
samozřejmě ještě mnohem více od stejnojmenné funkce v&nbsp;Pythonu 3.x, která
má specifické chování). V&nbsp;následující tabulce jsou ukázány některé
možnosti volání funkce <strong>range</strong> z&nbsp;knihovny
<i>Underscore</i>:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Význam</th></tr>
<tr><td>1</td><td>_.range(stop)             </td><td>vrací nové pole s prvky 0, 1, ... stop-1</td></tr>
<tr><td>2</td><td>_.range(start, stop)      </td><td>vrací nové pole s prvky start, start+1, ... stop-1</td></tr>
<tr><td>3</td><td>_.range(start, stop, step)</td><td>vrací nové pole s prvky start, start+step, start+2*step, až po mez (ta není překročena)</td></tr>
</table>

<p>Poznámky:</p>

<ul>

<li>Všechny tři argumenty jsou typu Number (základní datový typ JavaScriptu),
tj.&nbsp;jedná se o reálná čísla typicky typu <i>double</i>. Neexistuje zde
omezení na použití celých čísel (na rozdíl například od Pythonu).</li>

<li>Po zavolání <strong>range(0)</strong> se podle očekávání vytvoří prázdné
pole.</li>

<li>Pokud platí podmínka start&gt;stop a krok je kladný, opět se vytvoří
prázdné pole.</li>

<li>Pokud je start&gt;stop a krok je záporný, vytvoří se běžná sekvence.</li>

<li>Vzhledem k&nbsp;tomu, že se hlídá <i>překročení</i> zadané meze a nikoli
její přesné <i>dosažení</i>, lze pro zadání kroku použít i v&nbsp;jiných
případech problematické hodnoty typu 0,1 (hodnoty vytvořených prvků sice
logicky nebudou přesné, ovšem alespoň nedojde k&nbsp;nekonečné smyčce).</li>

</ul>



<p><a name="k07"></a></p>
<h2 id="k07">7. Druhý demonstrační příklad</h2>

<p>Většina možných a podporovaných variant <a href="#k06">výše popsané</a>
funkce <strong>range</strong> je vysvětlena ve druhém demonstračním příkladu,
jehož <a
href="https://github.com/tisnik/presentations/blob/master/underscore/underscore_01.js">úplný
zdrojový kód</a> je vypsán pod tímto odstavcem:</p>

<pre>
<i>// ------------------------------------------------------------</i>
<i>// Knihovna Underscore.js: demonstracni priklad cislo 2</i>
<i>//                         Pouziti funkce range().</i>
<i>// ------------------------------------------------------------</i>
&nbsp;
&nbsp;
&nbsp;
<i>// funkce pro vypis informaci o vybranem poli (ci jinem objektu)</i>
<strong>function</strong> printArrayInfo(expression) {
    <strong>var</strong> anArray = eval(expression);
    console.log("---------------------------------");
    console.log(expression);
&nbsp;
    <i>// zjisteni typu objektu (a pripadne delky pole)</i>
    <strong>if</strong> (anArray instanceof Array) {
        console.log("type:    array");
        console.log("length:  " + anArray.length);
    }
    <i>// jiny typ objektu, nemame zde jistotu, ze existuje atribut length</i>
    <strong>else</strong> {
        console.log("type:    " + typeof anArray);
    }
    console.log("content: " + anArray);
}
&nbsp;
&nbsp;
&nbsp;
<i>// informace o polich vytvorenych funkci range</i>
printArrayInfo("_.range(10)");
printArrayInfo("_.range(-10)");
printArrayInfo("_.range(0, 10)");
printArrayInfo("_.range(10, 0)");
printArrayInfo("_.range(10, 0, -1)");
printArrayInfo("_.range(0, 10, 2)");
printArrayInfo("_.range(0, 10, -2)");
printArrayInfo("_.range(10, 0, 2)");
printArrayInfo("_.range(10, 0, -2)");
printArrayInfo("_.range(0, 10, 100)");
&nbsp;
<i>// lze pouzit i desetinna cisla</i>
printArrayInfo("_.range(10, 15, 0.5)");
printArrayInfo("_.range(10,  5,-0.5)");
&nbsp;
<i>// desetinna cisla pro urceni zacatku i konce</i>
printArrayInfo("_.range(1.5, 3.5, 1/2)");
printArrayInfo("_.range(3.2, 1.8, -1/4)");
printArrayInfo("_.range(1/2, 3/4, 1/10)");
&nbsp;
<i>// stara znama chyba se zde projevuje jen castecne</i>
printArrayInfo("_.range(0, 10, 0.1)");
&nbsp;
&nbsp;
<i>// ------------------------------------------------------------</i>
<i>// Finito</i>
<i>// ------------------------------------------------------------</i>
</pre>

<p>Poznámka: 1/2, -1/4 atd. jsou v&nbsp;JavaScriptu výrazy, které je zde možné
bez problémů použít.</p>

<p>Výsledek běhu druhého demonstračního příkladu může vypadat následovně
(konzoli je opět možné zobrazit například přes Firebug apod.):</p>

<pre>
---------------------------------
_.range(10)
type:    array
length:  10
content: 0,1,2,3,4,5,6,7,8,9
---------------------------------
_.range(-10)
type:    array
length:  0
content: 
---------------------------------
_.range(0, 10)
type:    array
length:  10
content: 0,1,2,3,4,5,6,7,8,9
---------------------------------
_.range(10, 0)
type:    array
length:  0
content: 
---------------------------------
_.range(10, 0, -1)
type:    array
length:  10
content: 10,9,8,7,6,5,4,3,2,1
---------------------------------
_.range(0, 10, 2)
type:    array
length:  5
content: 0,2,4,6,8
---------------------------------
_.range(0, 10, -2)
type:    array
length:  0
content: 
---------------------------------
_.range(10, 0, 2)
type:    array
length:  0
content: 
---------------------------------
_.range(10, 0, -2)
type:    array
length:  5
content: 10,8,6,4,2
---------------------------------
_.range(0, 10, 100)
type:    array
length:  1
content: 0
---------------------------------
_.range(10, 15, 0.5)
type:    array
length:  10
content: 10,10.5,11,11.5,12,12.5,13,13.5,14,14.5
---------------------------------
_.range(10,  5,-0.5)
type:    array
length:  10
content: 10,9.5,9,8.5,8,7.5,7,6.5,6,5.5
---------------------------------
_.range(1.5, 3.5, 1/2)
type:    array
length:  4
content: 1.5,2,2.5,3
---------------------------------
_.range(3.2, 1.8, -1/4)
type:    array
length:  6
content: 3.2,2.95,2.7,2.45,2.2,1.9500000000000002
---------------------------------
_.range(1/2, 3/4, 1/10)
type:    array
length:  3
content: 0.5,0.6,0.7
---------------------------------
_.range(0, 10, 0.1)
type:    array
length:  100
content: 0,0.1,0.2,0.30000000000000004,0.4,0.5,0.6,0.7,0.7999999999999999,0.8999999999999999,
0.9999999999999999,1.0999999999999999,1.2,1.3,1.4000000000000001,1.5000000000000002,
1.6000000000000003,1.7000000000000004,1.8000000000000005,1.9000000000000006,2.0000000000000004,
2.1000000000000005,2.2000000000000006,2.3000000000000007,2.400000000000001,2.500000000000001,
2.600000000000001,2.700000000000001,2.800000000000001,2.9000000000000012,3.0000000000000013,
3.1000000000000014,3.2000000000000015,3.3000000000000016,3.4000000000000017,3.5000000000000018,
3.600000000000002,3.700000000000002,3.800000000000002,3.900000000000002,4.000000000000002,
4.100000000000001,4.200000000000001,4.300000000000001,4.4,4.5,4.6,4.699999999999999,
4.799999999999999,4.899999999999999,4.999999999999998,5.099999999999998,5.1999999999999975,
5.299999999999997,5.399999999999997,5.4999999999999964,5.599999999999996,5.699999999999996,
5.799999999999995,5.899999999999995,5.999999999999995,6.099999999999994,6.199999999999994,
6.299999999999994,6.399999999999993,6.499999999999993,6.5999999999999925,6.699999999999992,
6.799999999999992,6.8999999999999915,6.999999999999991,7.099999999999991,7.19999999999999,
7.29999999999999,7.39999999999999,7.499999999999989,7.599999999999989,7.699999999999989,
7.799999999999988,7.899999999999988,7.999999999999988,8.099999999999987,8.199999999999987,
8.299999999999986,8.399999999999986,8.499999999999986,8.599999999999985,8.699999999999985,
8.799999999999985,8.899999999999984,8.999999999999984,9.099999999999984,9.199999999999983,
9.299999999999983,9.399999999999983,9.499999999999982,9.599999999999982,9.699999999999982,
9.799999999999981,9.89999999999998
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vyhledávání prvků v&nbsp;polích</h2>

<p>Na první pohled jednoduché, ale o to užitečnější mohou být v&nbsp;praxi
funkce určené pro vyhledávání prvků v&nbsp;polích. Knihovna <i>Underscore</i>
programátorům nabízí celkem čtyři tyto funkce, které se od sebe odlišují tím,
zda vyhledávají prvky od začátku pole, od konce pole a taktéž tím, zda se prvek
vyhledává přímo podle své hodnoty či na základě nějakého predikátu,
tj.&nbsp;funkce postupně volané pro jednotlivé prvky. V&nbsp;každém případě
platí, že po nalezení prvního vhodného prvku se vyhledání zastaví a daná funkce
vrátí index tohoto prvku. Pokud prvek není nalezen, vrátí se hodnota -1,
tj.&nbsp;neexistující index (prvky v&nbsp;běžných polích jsou
v&nbsp;JavaScriptu indexovány od nuly). Podívejme se nyní na všechny čtyři
vyhledávací funkce:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Význam</th></tr>
<tr><td>1</td><td>_.indexOf(pole, hodnota)</td><td>vyhledávání prvního prvku s danou hodnotou od začátku pole</td></tr>
<tr><td>2</td><td>_.indexOf(pole, hodnota, index)</td><td>vyhledávání prvního prvku s danou hodnotou od zadaného indexu směrem ke konci pole</td></tr>
<tr><td>3</td><td>_.indexOf(pole, hodnota, true)</td><td>binární vyhledávání v setříděném poli</td></tr>
<tr><td>4</td><td>_.lastIndexOf(pole, hodnota)</td><td>vyhledávání posledního prvku s danou hodnotou</td></tr>
<tr><td>5</td><td>_.lastIndexOf(pole, hodnota, index)</td><td>vyhledávání posledního prvku od zadaného indexu</td></tr>
<tr><td>6</td><td>_.findIndex(pole, predikát)</td><td>nalezení prvního prvku, pro nějž predikát vrátil hodnotu true</td></tr>
<tr><td>7</td><td>_.findLastIndex(pole, predikát)</td><td>nalezení posledního prvku, pro nějž predikát vrátil hodnotu true</td></tr>
</table>

<p>Poznámka: použití funkce <strong>findIndex</strong> s&nbsp;vhodným
predikátem dokáže z&nbsp;vytvářených programů odstranit poměrně velké množství
programových smyček.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Třetí demonstrační příklad</h2>

<p>Všechny čtyři funkce popsané <a href="#k08">v&nbsp;předchozí kapitole</a>
jsou použity v&nbsp;dnešním třetím demonstračním příkladu, jehož <a
href="https://github.com/tisnik/presentations/blob/master/underscore/underscore_03.js">zdrojový
kód</a> je vypsán pod tímto odstavcem. Povšimněte si především použití
vlastních predikátů (funkcí vracejících pro každý prvek true či false) u funkcí
<strong>findIndex</strong> a <strong>findLastIndex</strong>. Dva z&nbsp;těchto
predikátů vrací konstantu bez ohledu na to, jaký prvek je jim předán:</p>

<pre>
<i>// ------------------------------------------------------------</i>
<i>// Knihovna Underscore.js: demonstracni priklad cislo 3</i>
<i>//                         Pouziti funkci pro vyhledani prvku v polich.</i>
<i>// ------------------------------------------------------------</i>
&nbsp;
&nbsp;
&nbsp;
<strong>var</strong> names = ["C", "C++", "C#", "Java",
             "Perl", "Python", "Ruby", 
             "JavaScript", "CoffeeScript", "Dart", "Wisp",
             // prvky se opakuji
             "C", "C++", "C#", "Java",
             "Lua", "Clojure", "Lisp", "Forth"];
&nbsp;
&nbsp;
&nbsp;
<strong>function</strong> printArrayItem(anArray, index)
{
    console.log("#" + i + " = " + anArray[i]);
}
&nbsp;
<strong>var</strong> i;
&nbsp;
&nbsp;
&nbsp;
console.log("_.indexOf():");
&nbsp;
<i>// bezne vyhledavani prvniho prvku</i>
i = _.indexOf(names, "Java");
printArrayItem(names, i);
&nbsp;
<i>// vyhledavani od desateho prvku</i>
i = _.indexOf(names, "Java", 10);
printArrayItem(names, i);
&nbsp;
<i>// bezne vyhledavani neexistujiciho prvku</i>
i = _.indexOf(names, "BASIC");
printArrayItem(names, i);
&nbsp;
console.log("---------------------------------------");
&nbsp;
&nbsp;
&nbsp;
console.log("_.lastIndexOf():");
&nbsp;
<i>// bezne vyhledavani posledniho prvku</i>
i = _.lastIndexOf(names, "Java");
printArrayItem(names, i);
&nbsp;
<i>// vyhledavani od desateho prvku</i>
i = _.lastIndexOf(names, "Java", 10);
printArrayItem(names, i);
&nbsp;
<i>// bezne vyhledavani neexistujiciho prvku</i>
i = _.lastIndexOf(names, "BASIC");
printArrayItem(names, i);
&nbsp;
console.log("---------------------------------------");
&nbsp;
&nbsp;
&nbsp;
<i>/* predikat vracejici true pouze v pripade, ze se v prvku</i>
<i> * nalezne podretezec odpovidajici regularnimu vyrazu.*/</i>
<strong>function</strong> predicate(item)
{
    return /.*Java.*/.test(item);
}
&nbsp;
<i>/* predikat vracejici vzdy hodnotu true */</i>
<strong>function</strong> constantTrue(item)
{
    return true;
}
&nbsp;
<i>/* predikat vracejici vzdy hodnotu false */</i>
<strong>function</strong> constantFalse(item)
{
    return false;
}
&nbsp;
&nbsp;
&nbsp;
console.log("_.findIndex():");
&nbsp;
i = _.findIndex(names, predicate);
printArrayItem(names, i);
&nbsp;
i = _.findIndex(names, constantTrue);
printArrayItem(names, i);
&nbsp;
i = _.findIndex(names, constantFalse);
printArrayItem(names, i);
&nbsp;
console.log("---------------------------------------");
&nbsp;
&nbsp;
&nbsp;
console.log("_.findLastIndex():");
&nbsp;
i = _.findLastIndex(names, predicate);
printArrayItem(names, i);
&nbsp;
i = _.findLastIndex(names, constantTrue);
printArrayItem(names, i);
&nbsp;
i = _.findLastIndex(names, constantFalse);
printArrayItem(names, i);
&nbsp;
console.log("---------------------------------------");
&nbsp;
&nbsp;
&nbsp;
<i>// ------------------------------------------------------------</i>
<i>// Finito</i>
<i>// ------------------------------------------------------------</i>
</pre>

<p>Výsledek běhu třetího demonstračního příkladu může vypadat následovně
(konzoli je opět možné zobrazit například přes Firebug apod.):</p>

<pre>
_.indexOf():
#3 = Java
#14 = Java
#-1 = undefined
---------------------------------------
_.lastIndexOf():
#14 = Java
#3 = Java
#-1 = undefined
---------------------------------------
_.findIndex():
#3 = Java
#0 = C
#-1 = undefined
---------------------------------------
_.findLastIndex():
#14 = Java
#18 = Forth
#-1 = undefined
---------------------------------------
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Množinové operace s&nbsp;poli</h2>

<p>V&nbsp;mnoha programech, v&nbsp;nichž se volají funkce nabízené knihovnou
<i>Underscore</i>, se pole používají i jako náhrada za množiny, ostatně většina
databázových operací ve skutečnosti vrací množiny či setříděné množiny a nikoli
seznamy. Programátoři mají k&nbsp;dispozici trojici funkcí nazvaných
<strong>union</strong>, <strong>intersection</strong> a
<strong>difference</strong>, s&nbsp;jejichž využitím se implementují operace
pro sjednocení množin, průnik množin a rozdíl množin. Nejprve se podívejme na
to, jak tyto funkce vypadají a jaké očekávají parametry:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Význam</th></tr>
<tr><td>1</td><td>_.union(pole1, ...)</td><td>provedení operace sjednocení množin</td></tr>
<tr><td>2</td><td>_.intersection(pole1, ...)</td><td>provedení operace průniku množin</td></tr>
<tr><td>3</td><td>_.difference(pole1, pole2, ...)</td><td>provedení operace rozdílu množin</td></tr>
</table>

<p>Poznámky:</p>

<ol>

<li>Funkce <strong>union</strong> a <strong>intersection</strong> akceptují
alespoň jeden parametr typu pole. Pokud je jim předán jediný parametr, logicky
se vrátí původní pole. Pokud je těmto funkcím předáno větší množství parametrů
(teoreticky libovolný počet), provede se se všemi poli daná operace a vrátí se
nové pole.</li>

<li>Naproti tomu funkce <strong>difference</strong> akceptuje minimálně dva
parametry. Taktéž zde záleží na pořadí polí, protože výsledkem této funkce je
pole s&nbsp;prvky, které se nachází v&nbsp;prvním poli a současně se nenachází
v&nbsp;žádných dalších polích.</li>

</ol>

<p>Podívejme se na příklady, z&nbsp;nichž bude chování všech tří funkcí
patrnější:</p>

<pre>
<strong>_.union([1,2,3], [2,3,4])</strong>
[1,2,3,4]
&nbsp;
<strong>_.union([1,2,3], [4,5,6])</strong>
[1,2,3,4,5,6]
&nbsp;
<strong>_.intersection([1,2,3], [2,3,4])</strong>
[2,3]
&nbsp;
<strong>_.intersection([1,2,3], [4,5,6])</strong>
[]
&nbsp;
<strong>_.difference([1,2,3], [2,3,4])</strong>
[1]
&nbsp;
<strong>_.difference([1,2,3], [4,5,6])</strong>
[1,2,3]
&nbsp;
<strong>_.difference([4,5,6], [1,2,3])</strong>
[4,5,6])
&nbsp;
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Čtvrtý demonstrační příklad</h2>

<p>Množinové operace zmíněné v&nbsp;předchozí kapitole si můžeme vyzkoušet ve
čtvrtém (předposledním) demonstračním příkladu. Podívejme se nyní na <a
href="https://github.com/tisnik/presentations/blob/master/underscore/underscore_04.js">zdrojový
kód</a> tohoto příkladu, který je vlastně ve skutečnosti velmi jednoduchý:</p>

<pre>
<i>// ------------------------------------------------------------</i>
<i>// Knihovna Underscore.js: demonstracni priklad cislo 4</i>
<i>//                         Mnozinove operace s poli.</i>
<i>// ------------------------------------------------------------</i>
&nbsp;
&nbsp;
&nbsp;
<i>// funkce pro vypis informaci o vybranem poli (ci jinem objektu)</i>
<strong>function</strong> printArrayInfo(expression) {
    <strong>var</strong> anArray = eval(expression);
    console.log("---------------------------------");
    console.log(expression);
&nbsp;
    <i>// zjisteni typu objektu (a pripadne delky pole)</i>
    <strong>if</strong> (anArray instanceof Array) {
        console.log("type:    array");
        console.log("length:  " + anArray.length);
    }
    <i>// jiny typ objektu, nemame zde jistotu, ze existuje atribut length</i>
    <strong>else</strong> {
        console.log("type:    " + typeof anArray);
    }
    console.log("content: " + anArray);
}
&nbsp;
&nbsp;
&nbsp;
<i>// pole s prvky 1..10</i>
<strong>var</strong> array1 = _.range(1, 11);
&nbsp;
<i>// pole s prvky 6..15</i>
<strong>var</strong> array2 = _.range(6, 16);
&nbsp;
<i>// pole s prvky 101..110</i>
<strong>var</strong> array3 = _.range(101, 111);
&nbsp;
printArrayInfo("array1");
printArrayInfo("array2");
printArrayInfo("array3");
&nbsp;
<i>// sjednoceni mnozin</i>
printArrayInfo("_.union(array1, array2)");
printArrayInfo("_.union(array2, array1)");
printArrayInfo("_.union(array1, array3)");
&nbsp;
printArrayInfo("_.union(array1, array2, array3)");
&nbsp;
<i>// prunik mnozin se spolecnymi prvky</i>
printArrayInfo("_.intersection(array1, array2)");
printArrayInfo("_.intersection(array2, array1)");
&nbsp;
<i>// mnoziny nemaji spolecne prvky</i>
printArrayInfo("_.intersection(array1, array3)");
&nbsp;
<i>// mnoziny nemaji spolecne prvky</i>
printArrayInfo("_.intersection(array1, array2, array3)");
&nbsp;
<i>// rozdil mnozin (zde samozrejme zalezi na poradi)</i>
printArrayInfo("_.difference(array1, array2)");
printArrayInfo("_.difference(array2, array1)");
printArrayInfo("_.difference(array1, array3)");
printArrayInfo("_.difference(array3, array1)");
&nbsp;
printArrayInfo("_.difference(array1, array2, array3)");
&nbsp;
<i>// specialni pripad :)</i>
printArrayInfo("_.difference(array1, array1)");
&nbsp;
&nbsp;
&nbsp;
<i>// ------------------------------------------------------------</i>
<i>// Finito</i>
<i>// ------------------------------------------------------------</i>
</pre>

<p>Výsledek běhu čtvrtého demonstračního příkladu může vypadat následovně
(konzoli je ... ale to už víte):</p>

<pre>
---------------------------------
array1
type:    array
length:  10
content: 1,2,3,4,5,6,7,8,9,10
---------------------------------
array2
type:    array
length:  10
content: 6,7,8,9,10,11,12,13,14,15
---------------------------------
array3
type:    array
length:  10
content: 101,102,103,104,105,106,107,108,109,110
---------------------------------
_.union(array1, array2)
type:    array
length:  15
content: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
---------------------------------
_.union(array2, array1)
type:    array
length:  15
content: 6,7,8,9,10,11,12,13,14,15,1,2,3,4,5
---------------------------------
_.union(array1, array3)
type:    array
length:  20
content: 1,2,3,4,5,6,7,8,9,10,101,102,103,104,105,106,107,108,109,110
---------------------------------
_.union(array1, array2, array3)
type:    array
length:  25
content: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,101,102,103,104,105,106,107,108,109,110
---------------------------------
_.intersection(array1, array2)
type:    array
length:  5
content: 6,7,8,9,10
---------------------------------
_.intersection(array2, array1)
type:    array
length:  5
content: 6,7,8,9,10
---------------------------------
_.intersection(array1, array3)
type:    array
length:  0
content: 
---------------------------------
_.intersection(array1, array2, array3)
type:    array
length:  0
content: 
---------------------------------
_.difference(array1, array2)
type:    array
length:  5
content: 1,2,3,4,5
---------------------------------
_.difference(array2, array1)
type:    array
length:  5
content: 11,12,13,14,15
---------------------------------
_.difference(array1, array3)
type:    array
length:  10
content: 1,2,3,4,5,6,7,8,9,10
---------------------------------
_.difference(array3, array1)
type:    array
length:  10
content: 101,102,103,104,105,106,107,108,109,110
---------------------------------
_.difference(array1, array2, array3)
type:    array
length:  5
content: 1,2,3,4,5
---------------------------------
_.difference(array1, array1)
type:    array
length:  0
content: 
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zploštění vnořených polí, kombinace prvků z&nbsp;různých polí atd.</h2>

<p>V&nbsp;knihovně <i>Underscore</i> nalezneme i mnohé další užitečné funkce
používané pro práci s&nbsp;poli, kombinaci prvků z&nbsp;různých polí apod.
Jedná se především o funkce nazvané <strong>flatten</strong>,
<strong>zip</strong> a <strong>unzip</strong> (pozor na to, že zejména funkce
<strong>zip</strong> má v&nbsp;jiných jazycích či knihovnách někdy poněkud
odlišný význam, což se týká například i ClojureScriptu a tudíž i dříve popsané
knihovny <i>Wisp</i>). Způsob volání těchto funkcí je vypsán v&nbsp;následující
tabulce, pod tabulkou pak následují podrobnější popisy jednotlivých funkcí:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Význam</th></tr>
<tr><td>1</td><td>_.flatten(pole)</td><td>zploštění pole (resp.&nbsp;rekurzivně všech pod-polí)</td></tr>
<tr><td>2</td><td>_.flatten(pole, true)</td><td>zploštění pole, ovšem jen v&nbsp;první úrovni</td></tr>
<tr><td>3</td><td>_.zip(sekvence polí)</td><td>ze vstupních polí vytvoří nové pole, viz popis a příklady uvedené níže</td></tr>
<tr><td>4</td><td>_.unzip(pole)</td><td>opak předchozí funkce, ze vstupního pole vytvoří sekvenci polí</td></tr>
<tr><td>5</td><td>_.object(pole)</td><td>(zde uvedeno pouze pro doplnění, bude vysvětleno příště), toto je obdoba funkce <strong>zip</strong> z&nbsp;ClojureScriptu a knihovny Wisp, protože převádí pole na objekty sloužící i jako mapa)</td></tr>
</table>

<p>Funkce <strong>flatten</strong> pracuje tak, jak její název napovídá:
&bdquo;zplošťuje&ldquo; pole, což znamená, že se ve vstupním poli (které
zůstává nezměněno) všechny prvky obsahující (i rekurzivně) taktéž pole rozloží
na jednotlivé elementy. Druhým argumentem (pokud se mu předá hodnota true) lze
zploštění omezit pouze na první úroveň, tj.&nbsp;zploštění se nebude provádět
rekurzivně. Podívejme se na příklady, z&nbsp;nichž bude chování této funkce
zřejmé:</p>

<pre>
<strong>_.flatten([1, 2, 3, 4, 5]);</strong>
[1, 2, 3, 4, 5]
&nbsp;
<strong>_.flatten([[1, 2], [3, 4], 5]);</strong>
[1, 2, 3, 4, 5]
&nbsp;
<strong>_.flatten([1, [2, [3, [4, [5]]]]]);</strong>
&nbsp;
[1, 2, 3, 4, 5]
&nbsp;
<strong>_.flatten([1, [2], [3, [[4]]]], true);</strong>
[1, 2, 3, [[4]]];
</pre>

<p>Poněkud složitěji se chová funkce <strong>zip</strong>, které je možné
předat libovolný počet polí o různé délce. Tato funkce vytvoří nové pole
obsahující jako své prvky n-tice (což zde není nic jiného než pole). První
prvek bude n-ticí (polem) složeným z&nbsp;prvních prvků všech předaných polí,
druhý prvek bude n-tice složená ze druhých prvků předaných polí atd. Vstupní
pole mohou mít rozdílnou délku, takže jednotlivé n-tice nemusí mít stejný počet
prvků. Opět se podívejme na příklady:</p>

<pre>
<i>// pole s prvky 1..10</i>
<strong>var array1 = _.range(1, 11);</strong>
&nbsp;
<i>// pole s prvky "A".."J"</i>
<strong>var array2 = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"];</strong>
&nbsp;
<i>// vytvoření pole dvojic</i>
<strong>_.zip(array1, array2)</strong>
[[1,A], [2,B], [3,C], [4,D], [5,E], [6,F], [7,G], [8,H], [9,I], [10,J]]
&nbsp;
<i>// vytvoření pole dvojic</i>
<strong>_.zip(array2, array2)</strong>
[[A,A], [B,B], [C,C], [D,D], [E,E], [F,F], [G,G], [H,H], [I,I], [J,J]]
&nbsp;
<i>// vytvoření pole trojic dvojic a posléze dvojic</i>
<strong>_.zip(array1, array2, [100,200,300])</strong>
[[1,A,100], [2,B,200], [3,C,300], [4,D], [5,E], [6,F], [7,G], [8,H], [9,I], [10,J]]
</pre>

<p>Poznámka: již několikrát jsme se setkali s&nbsp;tím, že JavaScript a tím
pádem i knihovna <i>Underscore</i> umožňuje práci s&nbsp;nepravidelnými 2D
maticemi, tj.&nbsp;maticemi, jejichž řádky mají nestejnou délku. To je i případ
funkce <strong>zip</strong>, která v&nbsp;obecném případě právě takové
nepravidelné 2D matice vytváří.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Pátý demonstrační příklad</h2>

<p>Chování funkcí <strong>flatten</strong> a <strong>zip</strong>, které jsme
si ve stručnosti popsali <a href="#k12">v&nbsp;předchozí kapitole</a>, si
otestujeme v&nbsp;dnešním pátém a současně i posledním demonstračním příkladu
jehož <a
href="https://github.com/tisnik/presentations/blob/master/underscore/underscore_05.js">zdrojový
kód</a> je vypsán pod tímto odstavcem. Povšimněte si, že zde mj.&nbsp;používáme
i funkci <strong>range</strong>:</p>

<pre>
<i>// ------------------------------------------------------------</i>
<i>// Knihovna Underscore.js: demonstracni priklad cislo 5</i>
<i>//                         Operace zip a flatten.</i>
<i>// ------------------------------------------------------------</i>
&nbsp;
&nbsp;
&nbsp;
<i>// funkce pro vypis informaci o vybranem poli (ci jinem objektu)</i>
<strong>function</strong> printArrayInfo(expression) {
    <strong>var</strong> anArray = eval(expression);
    console.log("---------------------------------");
    console.log(expression);
&nbsp;
    <i>// zjisteni typu objektu (a pripadne delky pole)</i>
    <strong>if</strong> (anArray instanceof Array) {
        console.log("type:    array");
        console.log("length:  " + anArray.length);
        <i>// nyni pracujeme s 2D poli, takze si postupne vypiseme jeho radky</i>
        <i>// (console.log totiz vypise i 2D pole jako jeden vektor)</i>
        <strong>for</strong> (<strong>var</strong> i=0; i &lt; anArray.length; i++) {
            console.log("row #" + i + " = " + anArray[i]);
        }
    }
    <i>// jiny typ objektu, nemame zde jistotu, ze existuje atribut length</i>
    <strong>else</strong> {
        console.log("type:    " + typeof anArray);
        console.log("content: " + anArray);
    }
}
&nbsp;
&nbsp;
&nbsp;
<i>// pole s prvky 1..10</i>
<strong>var</strong> array1 = _.range(1, 11);
&nbsp;
<i>// pole s prvky "A".."J"</i>
<strong>var</strong> array2 = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"];
&nbsp;
printArrayInfo("array1");
printArrayInfo("array2");
&nbsp;
&nbsp;
<i>// kombinace prvku ze dvou poli</i>
printArrayInfo("_.zip(array1, array2)");
printArrayInfo("_.zip(array2, array1)");
&nbsp;
<i>// kombinace prvku ze stejneho vstupniho pole</i>
printArrayInfo("_.zip(array2, array2)");
&nbsp;
<i>// i toto je povoleno, posledni pole je kratsi</i>
printArrayInfo("_.zip(array1, array2, [100,200,300])");
&nbsp;
&nbsp;
&nbsp;
<i>// otestovani funkce flatten()</i>
<strong>var</strong> array3 = [_.range(1, 6), _.range(5,10), _.range(9,15)];
printArrayInfo("array3");
printArrayInfo("_.flatten(array3)");
&nbsp;
&nbsp;
&nbsp;
<i>// ------------------------------------------------------------</i>
<i>// Finito</i>
<i>// ------------------------------------------------------------</i>
</pre>

<p>Výsledek běhu pátého demonstračního příkladu může vypadat následovně
(konzoli je ... ale to už víte):</p>

<pre>
---------------------------------
array1
type:    array
length:  10
row #0 = 1
row #1 = 2
row #2 = 3
row #3 = 4
row #4 = 5
row #5 = 6
row #6 = 7
row #7 = 8
row #8 = 9
row #9 = 10
---------------------------------
array2
type:    array
length:  10
row #0 = A
row #1 = B
row #2 = C
row #3 = D
row #4 = E
row #5 = F
row #6 = G
row #7 = H
row #8 = I
row #9 = J
---------------------------------
_.zip(array1, array2)
type:    array
length:  10
row #0 = 1,A
row #1 = 2,B
row #2 = 3,C
row #3 = 4,D
row #4 = 5,E
row #5 = 6,F
row #6 = 7,G
row #7 = 8,H
row #8 = 9,I
row #9 = 10,J
---------------------------------
_.zip(array2, array1)
type:    array
length:  10
row #0 = A,1
row #1 = B,2
row #2 = C,3
row #3 = D,4
row #4 = E,5
row #5 = F,6
row #6 = G,7
row #7 = H,8
row #8 = I,9
row #9 = J,10
---------------------------------
_.zip(array2, array2)
type:    array
length:  10
row #0 = A,A
row #1 = B,B
row #2 = C,C
row #3 = D,D
row #4 = E,E
row #5 = F,F
row #6 = G,G
row #7 = H,H
row #8 = I,I
row #9 = J,J
---------------------------------
_.zip(array1, array2, [100,200,300])
type:    array
length:  10
row #0 = 1,A,100
row #1 = 2,B,200
row #2 = 3,C,300
row #3 = 4,D,
row #4 = 5,E,
row #5 = 6,F,
row #6 = 7,G,
row #7 = 8,H,
row #8 = 9,I,
row #9 = 10,J,
---------------------------------
array3
type:    array
length:  3
row #0 = 1,2,3,4,5
row #1 = 5,6,7,8,9
row #2 = 9,10,11,12,13,14
---------------------------------
_.flatten(array3)
type:    array
length:  16
row #0 = 1
row #1 = 2
row #2 = 3
row #3 = 4
row #4 = 5
row #5 = 5
row #6 = 6
row #7 = 7
row #8 = 8
row #9 = 9
row #10 = 9
row #11 = 10
row #12 = 11
row #13 = 12
row #14 = 13
row #15 = 14
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všech pět demonstračních příkladů, které jsme si v&nbsp;dnešním článku
popsali, bylo uloženo do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
V&nbsp;tabulce zobrazené pod tímto odstavcem naleznete na zdrojové kódy všech
pěti demonstračních příkladů přímé odkazy (navíc je doplněn i odkaz na aktuálně
použitou variantu knihovny <i>Underscore</i>):</p>

<table>
<tr><th>#</th><th>Příklad/knihovna</th><th>Github</th></tr>
<tr><td>1</td><td>underscore_01.js</td><td><a href="https://github.com/tisnik/presentations/blob/master/underscore/underscore_01.js">https://github.com/tisnik/presentations/blob/master/underscore/underscore_01.js</a></td></tr>
<tr><td>2</td><td>underscore_02.js</td><td><a href="https://github.com/tisnik/presentations/blob/master/underscore/underscore_02.js">https://github.com/tisnik/presentations/blob/master/underscore/underscore_02.js</a></td></tr>
<tr><td>3</td><td>underscore_03.js</td><td><a href="https://github.com/tisnik/presentations/blob/master/underscore/underscore_03.js">https://github.com/tisnik/presentations/blob/master/underscore/underscore_03.js</a></td></tr>
<tr><td>4</td><td>underscore_04.js</td><td><a href="https://github.com/tisnik/presentations/blob/master/underscore/underscore_04.js">https://github.com/tisnik/presentations/blob/master/underscore/underscore_04.js</a></td></tr>
<tr><td>5</td><td>underscore_05.js</td><td><a href="https://github.com/tisnik/presentations/blob/master/underscore/underscore_05.js">https://github.com/tisnik/presentations/blob/master/underscore/underscore_05.js</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>6</td><td>underscore-min.js</td><td><a href="https://github.com/tisnik/presentations/blob/master/underscore/underscore-min.js">https://github.com/tisnik/presentations/blob/master/underscore/underscore-min.js</a></td></tr>
</table>



<p><a name="k15"></a></p>
<h2 id="k15">15. Odkazy na Internetu</h2>

<ol>

<li>Stránky knihovny Underscore s popisem všech funkcí<br />
<a href="http://underscorejs.org/">http://underscorejs.org/</a>
</li>

<li>Minifikovaná verze knihovny Underscore<br />
<a href="http://underscorejs.org/underscore-min.js">http://underscorejs.org/underscore-min.js</a>
</li>

<li>Functional Programming (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Functional_programming">https://en.wikipedia.org/wiki/Functional_programming</a>
</li>

<li>An Introduction to Functional Programming in JavaScript<br />
<a href="http://www.srirangan.net/2011-12-functional-programming-in-javascript">http://www.srirangan.net/2011-12-functional-programming-in-javascript</a>
</li>

<li>Getting Cozy With Underscore.js<br />
<a href="http://code.tutsplus.com/tutorials/getting-cozy-with-underscorejs--net-24581">http://code.tutsplus.com/tutorials/getting-cozy-with-underscorejs--net-24581</a>
</li>

<li>Mori na GitHubu<br />
<a href="https://github.com/swannodette/mori">https://github.com/swannodette/mori</a>
</li>

<li>Mori: popis API (dokumentace)<br />
<a href="http://swannodette.github.io/mori/">http://swannodette.github.io/mori/</a>
</li>

<li>Mori: Benchmarking<br />
<a href="https://github.com/swannodette/mori/wiki/Benchmarking">https://github.com/swannodette/mori/wiki/Benchmarking</a>
</li>

<li>Functional data structures in JavaScript with Mori<br />
<a href="http://sitr.us/2013/11/04/functional-data-structures.html">http://sitr.us/2013/11/04/functional-data-structures.html</a>
</li>

<li>Immutable.js<br />
<a href="https://facebook.github.io/immutable-js/">https://facebook.github.io/immutable-js/</a>
</li>

<li>Persistent data structure<br />
<a href="https://en.wikipedia.org/wiki/Persistent_data_structure">https://en.wikipedia.org/wiki/Persistent_data_structure</a>
</li>

<li>Understanding Clojure's Persistent Vectors, pt. 1<br />
<a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1">http://hypirion.com/musings/understanding-persistent-vector-pt-1</a>
</li>

<li>Hash array mapped trie (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Hash_array_mapped_trie">https://en.wikipedia.org/wiki/Hash_array_mapped_trie</a>
</li>

<li>Java theory and practice: To mutate or not to mutate?<br />
<a href="http://www.ibm.com/developerworks/java/library/j-jtp02183/index.html">http://www.ibm.com/developerworks/java/library/j-jtp02183/index.html</a>
</li>

<li>Efficient persistent (immutable) data structures<br />
<a href="https://persistent.codeplex.com/">https://persistent.codeplex.com/</a>
</li>

<li>Netscape Enterprise Server (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Netscape_Enterprise_Server">https://en.wikipedia.org/wiki/Netscape_Enterprise_Server</a>
</li>

<li>SSJS Reference Guide (Server-Side JavaScript)<br />
<a href="http://docs.oracle.com/cd/E19957-01/816-6410-10/816-6410-10.pdf">http://docs.oracle.com/cd/E19957-01/816-6410-10/816-6410-10.pdf</a>
</li>

<li>Atom: moderní textový editor<br />
<a href="http://www.root.cz/clanky/atom-moderni-textovy-editor/">http://www.root.cz/clanky/atom-moderni-textovy-editor/</a>
</li>

<li>Atom: moderní textový editor (dokončení)<br />
<a href="http://www.root.cz/clanky/atom-moderni-textovy-editor-dokonceni/">http://www.root.cz/clanky/atom-moderni-textovy-editor-dokonceni/</a>
</li>

<li>Propojení světa LISPu se světem JavaScriptu s využitím transpřekladače Wisp<br />
<a href="http://www.root.cz/clanky/propojeni-sveta-lispu-se-svetem-javascriptu-s-vyuzitim-transprekladace-wisp/">http://www.root.cz/clanky/propojeni-sveta-lispu-se-svetem-javascriptu-s-vyuzitim-transprekladace-wisp/</a>
</li>

<li>Propojení světa LISPu se světem JavaScriptu s využitím transpřekladače Wisp (2.část)<br />
<a href="http://www.root.cz/clanky/propojeni-sveta-lispu-se-svetem-javascriptu-s-vyuzitim-transprekladace-wisp-2-cast/">http://www.root.cz/clanky/propojeni-sveta-lispu-se-svetem-javascriptu-s-vyuzitim-transprekladace-wisp-2-cast/</a>
</li>

<li>Wisp na GitHubu<br />
<a href="https://github.com/Gozala/wisp">https://github.com/Gozala/wisp</a>
</li>

<li>Wisp playground<br />
<a href="http://www.jeditoolkit.com/try-wisp/">http://www.jeditoolkit.com/try-wisp/</a>
</li>

<li>REPL v prohlížeči<br />
<a href="http://www.jeditoolkit.com/interactivate-wisp/">http://www.jeditoolkit.com/interactivate-wisp/</a>
</li>

<li>Minification (programming)<br />
<a href="https://en.wikipedia.org/wiki/Minification_(programming)">https://en.wikipedia.org/wiki/Minification_(programming)</a>
</li>

<li>Clojure Macro Tutorial (Part I, Getting the Compiler to Write Your Code For You)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html</a>
</li>

<li>Clojure Macro Tutorial (Part II: The Compiler Strikes Back)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html</a>
</li>

<li>Clojure Macro Tutorial (Part III: Syntax Quote)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html</a>
</li>

<li>Tech behind Tech: Clojure Macros Simplified<br />
<a href="http://techbehindtech.com/2010/09/28/clojure-macros-simplified/">http://techbehindtech.com/2010/09/28/clojure-macros-simplified/</a>
</li>

<li>Fatvat - Exploring functional programming: Clojure Macros<br />
<a href="http://www.fatvat.co.uk/2009/02/clojure-macros.html">http://www.fatvat.co.uk/2009/02/clojure-macros.html</a>
</li>

<li>Eulerovo číslo<br />
<a href="http://cs.wikipedia.org/wiki/Eulerovo_??slo">http://cs.wikipedia.org/wiki/Eulerovo_??slo</a>
</li>

<li>List comprehension<br />
<a href="http://en.wikipedia.org/wiki/List_comprehension">http://en.wikipedia.org/wiki/List_comprehension</a>
</li>

<li>List Comprehensions in Clojure<br />
<a href="http://asymmetrical-view.com/2008/11/18/list-comprehensions-in-clojure.html">http://asymmetrical-view.com/2008/11/18/list-comprehensions-in-clojure.html</a>
</li>

<li>Clojure Programming Concepts: List Comprehension<br />
<a href="http://en.wikibooks.org/wiki/Clojure_Programming/Concepts#List_Comprehension">http://en.wikibooks.org/wiki/Clojure_Programming/Concepts#List_Comprehension</a>
</li>

<li>Clojure core API: for macro<br />
<a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/for">http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/for</a>
</li>

<li>cirrus machina - The Clojure for macro<br />
<a href="http://www.cirrusmachina.com/blog/comment/the-clojure-for-macro/">http://www.cirrusmachina.com/blog/comment/the-clojure-for-macro/</a>
</li>

<li>Clojure.org: Clojure home page<br />
<a href="http://clojure.org/downloads">http://clojure.org/downloads</a>
</li>

<li>Clojure.org: Vars and the Global Environment<br />
<a href="http://clojure.org/Vars">http://clojure.org/Vars</a>
</li>

<li>Clojure.org: Refs and Transactions<br />
<a href="http://clojure.org/Refs">http://clojure.org/Refs</a>
</li>

<li>Clojure.org: Atoms<br />
<a href="http://clojure.org/Atoms">http://clojure.org/Atoms</a>
</li>

<li>Clojure.org: Agents as Asynchronous Actions<br />
<a href="http://clojure.org/agents">http://clojure.org/agents</a>
</li>

<li>A Couple of Clojure Agent Examples<br />
<a href="http://lethain.com/a-couple-of-clojure-agent-examples/">http://lethain.com/a-couple-of-clojure-agent-examples/</a>
</li>

<li>Clojure - Functional Programming for the JVM<br />
<a href="http://java.ociweb.com/mark/clojure/article.html">http://java.ociweb.com/mark/clojure/article.html</a>
</li>

<li>Clojure quick reference<br />
<a href="http://faustus.webatu.com/clj-quick-ref.html">http://faustus.webatu.com/clj-quick-ref.html</a>
</li>

<li>4Clojure<br />
<a href="http://www.4clojure.com/">http://www.4clojure.com/</a>
</li>

<li>ClojureDoc<br />
<a href="http://clojuredocs.org/">http://clojuredocs.org/</a>
</li>

<li>Clojure (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Clojure">http://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Clojure (Wikipedia CS)<br />
<a href="http://cs.wikipedia.org/wiki/Clojure">http://cs.wikipedia.org/wiki/Clojure</a>
</li>

<li>Riastradh's Lisp Style Rules<br />
<a href="http://mumble.net/~campbell/scheme/style.txt">http://mumble.net/~campbell/scheme/style.txt</a>
</li>

<li>Dynamic Languages Strike Back<br />
<a href="http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html">http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html</a>
</li>

<li>Scripting: Higher Level Programming for the 21st Century<br />
<a href="http://www.tcl.tk/doc/scripting.html">http://www.tcl.tk/doc/scripting.html</a>
</li>

<li>Java Virtual Machine Support for Non-Java Languages<br />
<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html">http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html</a>
</li>

<li>The Lua VM, on the Web<br />
<a href="https://kripken.github.io/lua.vm.js/lua.vm.js.html">https://kripken.github.io/lua.vm.js/lua.vm.js.html</a>
</li>

<li>Lua.vm.js REPL<br />
<a href="https://kripken.github.io/lua.vm.js/repl.html">https://kripken.github.io/lua.vm.js/repl.html</a>
</li>

<li>lua2js<br />
<a href="https://www.npmjs.com/package/lua2js">https://www.npmjs.com/package/lua2js</a>
</li>

<li>lua2js na GitHubu<br />
<a href="https://github.com/basicer/lua2js-dist">https://github.com/basicer/lua2js-dist</a>
</li>

<li>Seriál o programovacím jazyku Lua<br />
<a href="http://www.root.cz/serialy/programovaci-jazyk-lua/">http://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Source-to-source compiler<br />
<a href="https://en.wikipedia.org/wiki/Source-to-source_compiler">https://en.wikipedia.org/wiki/Source-to-source_compiler</a>
</li>

<li>JavaScript is Assembly Language for the Web: Sematic Markup is Dead! Clean vs. Machine-coded HTML<br />
<a href="http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx">http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx</a>
</li>

<li>JavaScript is Web Assembly Language and that's OK.<br />
<a href="http://www.hanselman.com/blog/JavaScriptIsWebAssemblyLanguageAndThatsOK.aspx">http://www.hanselman.com/blog/JavaScriptIsWebAssemblyLanguageAndThatsOK.aspx</a>
</li>

<li>Dart<br />
<a href="https://www.dartlang.org/">https://www.dartlang.org/</a>
</li>

<li>CoffeeScript<br />
<a href="http://coffeescript.org/">http://coffeescript.org/</a>
</li>

<li>TypeScript<br />
<a href="http://www.typescriptlang.org/">http://www.typescriptlang.org/</a>
</li>

<li>Lua (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Lua_(programming_language)">http://en.wikipedia.org/wiki/Lua_(programming_language)</a>
</li>

<li>Static single assignment form (SSA)<br />
<a href="http://en.wikipedia.org/wiki/Static_single_assignment_form">http://en.wikipedia.org/wiki/Static_single_assignment_form</a>
</li>

<li>LuaJIT 2.0 SSA IR
<a href="http://wiki.luajit.org/SSA-IR-2.0">http://wiki.luajit.org/SSA-IR-2.0</a>
</li>

<li>The LuaJIT Project<br />
<a href="http://luajit.org/index.html">http://luajit.org/index.html</a>
</li>

<li>LuaJIT FAQ<br />
<a href="http://luajit.org/faq.html">http://luajit.org/faq.html</a>
</li>

<li>LuaJIT Performance Comparison<br />
<a href="http://luajit.org/performance.html">http://luajit.org/performance.html</a>
</li>

<li>LuaJIT 2.0 intellectual property disclosure and research opportunities<br />
<a href="http://article.gmane.org/gmane.comp.lang.lua.general/58908">http://article.gmane.org/gmane.comp.lang.lua.general/58908</a>
</li>

<li>LuaJIT Wiki<br />
<a href="http://wiki.luajit.org/Home">http://wiki.luajit.org/Home</a>
</li>

<li>LuaJIT 2.0 Bytecode Instructions<br />
<a href="http://wiki.luajit.org/Bytecode-2.0">http://wiki.luajit.org/Bytecode-2.0</a>
</li>

<li>Programming in Lua (first edition)<br />
<a href="http://www.lua.org/pil/contents.html">http://www.lua.org/pil/contents.html</a>
</li>

<li>Lua 5.2 sources<br />
<a href="http://www.lua.org/source/5.2/">http://www.lua.org/source/5.2/</a>
</li>

<li>Tcl Plugin Version 3<br />
<a href="http://www.tcl.tk/software/plugin/">http://www.tcl.tk/software/plugin/</a>
</li>

<li>JavaScript: The Web Assembly Language?<br />
<a href="http://www.informit.com/articles/article.aspx?p=1856657">http://www.informit.com/articles/article.aspx?p=1856657</a>
</li>

<li>asm.js<br />
<a href="http://asmjs.org/">http://asmjs.org/</a>
</li>

<li>List of languages that compile to JS<br />
<a href="https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS">https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS</a>
</li>

<li>REPL<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="http://llvm.org/ProjectsWithLLVM/">http://llvm.org/ProjectsWithLLVM/</a>
</li>

<li>clang: a C language family frontend for LLVM<br />
<a href="http://clang.llvm.org/">http://clang.llvm.org/</a>
</li>

<li>emscripten<br />
<a href="http://kripken.github.io/emscripten-site/">http://kripken.github.io/emscripten-site/</a>
</li>

<li>LLVM Backend ("Fastcomp")<br />
<a href="http://kripken.github.io/emscripten-site/docs/building_from_source/LLVM-Backend.html#llvm-backend">http://kripken.github.io/emscripten-site/docs/building_from_source/LLVM-Backend.html#llvm-backend</a>
</li>

<li>Emscripten - Fastcomp na GitHubu<br />
<a href="https://github.com/kripken/emscripten-fastcomp">https://github.com/kripken/emscripten-fastcomp</a>
</li>

<li>Clang (pro Emscripten) na GitHubu<br />
<a href="https://github.com/kripken/emscripten-fastcomp-clang">https://github.com/kripken/emscripten-fastcomp-clang</a>
</li>

<li>Why not use JavaScript?<br />
<a href="https://ckknight.github.io/gorillascript/">https://ckknight.github.io/gorillascript/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

