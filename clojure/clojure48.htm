<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Pokročilý streaming založený na projektu Apache Kafka, jazyku Clojure a knihovně Jackdaw (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Pokročilý streaming založený na projektu Apache Kafka, jazyku Clojure a knihovně Jackdaw (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Pokročilý streaming založený na projektu Apache Kafka, jazyku Clojure a knihovně Jackdaw (dokončení)</a></p>
<p><a href="#k02">2. Kostra pipeline, na které jsou založeny všechny navazující demonstrační příklady</a></p>
<p><a href="#k03">3. Konfigurace témat, definice pipeline i aplikace, v&nbsp;jejímž rámci pipeline poběží</a></p>
<p><a href="#k04">4. Úplný zdrojový kód první aplikace s&nbsp;funkční pipeline</a></p>
<p><a href="#k05">5. Spuštění a otestování dnešního prvního demonstračního příkladu</a></p>
<p><a href="#k06">6. Transformace zpráv neboli &bdquo;T&ldquo; v&nbsp;&bdquo;Extract, transform, load&ldquo;</a></p>
<p><a href="#k07">7. Přečtení zpráv z&nbsp;kolony beze změny její funkce (logování atd.)</a></p>
<p><a href="#k08">8. Úplný zdrojový kód druhé aplikace s&nbsp;funkční pipeline</a></p>
<p><a href="#k09">9. Spuštění a otestování dnešního druhého demonstračního příkladu</a></p>
<p><a href="#k10">10. Chování aplikace v&nbsp;případě příjmu nekorektní zprávy</a></p>
<p><a href="#k11">*** 11. Zalogování chyby bez pádu aplikace</a></p>
<p><a href="#k12">*** 12. Chování upravené aplikace v&nbsp;příjmu nekorektní zprávy</a></p>
<p><a href="#k13">*** 13. Složitější pipeline s&nbsp;několika transformačními funkcemi</a></p>
<p><a href="#k14">*** 14. Spuštění a otestování dnešního čtvrtého demonstračního příkladu</a></p>
<p><a href="#k15">*** 15. Rozdělení streamu do více částí</a></p>
<p><a href="#k16">*** 16. Spuštění a otestování dnešního pátého demonstračního příkladu</a></p>
<p><a href="#k17">*** 17. Transformace zpráv založená na uzávěru</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na předchozí části seriálu o programovacím jazyku Clojure</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Pokročilý streaming založený na projektu Apache Kafka, jazyku Clojure a knihovně Jackdaw (dokončení)</h2>

<p></p>

<table>
<tr><th> #</th><th>Funkce/makro</th><th>Použito</th><th>Stručný popis</th></tr>
<tr><td> 1</td><td>jackdaw.streams/start</td><td>řízení aplikace</td><td>zahájení činnosti kolony</td></tr>
<tr><td> 2</td><td>jackdaw.streams/close</td><td>řízení aplikace</td><td>uzavření kolony</td></tr>
<tr><td> 3</td><td>jackdaw.streams/kstream</td><td>vytvoření proudu</td><td>vytvoření proudu konzumujícího zprávy z&nbsp;vybraného tématu</td></tr>
<tr><td> 4</td><td>jackdaw.streams/to</td><td>uvnitř proudu</td><td>uložení (materializace) zpráv z&nbsp;kolony do tématu</td></tr>
<tr><td> 5</td><td>jackdaw.streams/map</td><td>uvnitř proudu</td><td>transformace zpráv</td></tr>
<tr><td> 6</td><td>jackdaw.streams/map-values</td><td>uvnitř proudu</td><td>transformace zpráv (pouze hodnot zpráv, bez klíčů)</td></tr>
<tr><td> 7</td><td>jackdaw.streams/peek</td><td>kolona</td><td>přečtení zprávy z&nbsp;kolony postranním kanálem bez porušení činnosti kolony</td></tr>
<tr><td> 8</td><td>jackdaw.streams/through</td><td>kolona</td><td></td></tr>
<tr><td> 9</td><td>jackdaw.streams/merge</td><td>kolona</td><td>spojení dvou kolon</td></tr>
<tr><td>10</td><td>jackdaw.streams/filter</td><td>kolona</td><td>filtrace zpráv na základě predikátu</td></tr>
<tr><td>11</td><td>jackdaw.streams/filter-not</td><td>kolona</td><td>filtrace zpráv na základě predikátu</td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Kostra pipeline, na které jsou založeny všechny navazující demonstrační příklady</h2>

<p>V&nbsp;úvodní části dnešního článku si ukážeme kostru zcela funkční pipeline
(kolony), na které budou založeny i všechny navazující demonstrační příklady.
Struktura projektu s&nbsp;touto pipeline, která je mimochodem dostupná na
adrese <a
href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-0">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-0</a>,
vypadá následovně (zvýrazněny jsou ty soubory, které jsou popsány
v&nbsp;navazujícím textu):</p>

<pre>
.
├── CHANGELOG.md
├── README.md
├── LICENSE
├── doc
│   └── intro.md
├── <strong>project.clj</strong>
├── resources
│   └── <strong>log4j.properties</strong>
├── src
│   └── stream_pipe_0
│       └── <strong>core.clj</strong>
└── test
    └── stream_pipe_0
        └── core_test.clj
</pre>

<p>Tato kostra byla získána příkazem:</p>

<pre>
$ <strong>lein new app stream-pipe-0</strong>
</pre>

<p>Nejdůležitější je popis projektu a jeho závislostí uvedený v&nbsp;souboru
<strong>project.clj</strong>. Ručně provedené změny jsou zvýrazněny tučným
písmem:</p>

<pre>
(defproject stream-pipe-0 "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0"
            :url "https://www.eclipse.org/legal/epl-2.0/"}
  :dependencies [<strong>[org.clojure/clojure "1.10.1"]</strong>
                 <strong>[fundingcircle/jackdaw "0.7.6"]</strong>
                 <strong>[org.clojure/tools.logging "0.3.1"]</strong>
                 <strong>[log4j/log4j "1.2.17" :exclusions [javax.mail/mail</strong>
                                                    <strong>javax.jms/jms</strong>
                                                    <strong>com.sun.jmdk/jmxtools</strong>
                                                    <strong>com.sun.jmx/jmxri]]</strong>
                 <strong>[org.slf4j/slf4j-log4j12 "1.6.6"]</strong>]
  :main ^:skip-aot stream-pipe-0.core
  :target-path "target/%s"
  <strong>:resource-paths ["resources/"]</strong>
  :profiles {:uberjar {:aot :all
                       :jvm-opts ["-Dclojure.compiler.direct-linking=true"]}})
</pre>

<p>Aby knihovna Jackdaw vypisovala všechny důležité informace při inicializaci
i běhu pipeline, musíme nakonfigurovat logování. Jedná se o soubor nazvaný
<strong>log4.properties</strong> uložený v&nbsp;podadresáři
<strong>resources</strong>. V&nbsp;tomto souboru je možné definovat, jakým
způsobem bude proveden výpis logovacích informací na konzoli i do logovacího
souboru (popř.&nbsp;i na jiná místa). Úroveň logovacích informací postačuje
nastavit na <strong>WARN</strong>, čímž se (oproti úrovním
<strong>DEBUG</strong> či <strong>INFO</strong>) poměrně dosti zásadním
způsobem omezí výpis nepodstatných detailů. Navíc jsou v&nbsp;tomto souboru
nastaveny i další důležité vlastnosti logování &ndash; maximální velikost
logovacího souboru, jeho umístění v&nbsp;souborovém systému, případné rotace,
formát výstupu aj.:</p>

<pre>
log4j.rootLogger=WARN, file, console
&nbsp;
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File=log/chainring.log
log4j.appender.file.MaxFileSize=5MB
log4j.appender.file.MaxBackupIndex=50
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} | %-5p | %t | %c | %m%n
&nbsp;
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} | %-5p | %t | %c | %m%n
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Konfigurace témat, definice pipeline i aplikace, v&nbsp;jejímž rámci pipeline poběží</h2>

<p>Zdrojový kód celé aplikace s&nbsp;pipeline je uložen v&nbsp;souboru nazvaném
<strong>src/stream_pipe_0/core.clj</strong>. První důležitou hodnotou je mapa
obsahující konfiguraci vstupního a výstupního tématu, resp.&nbsp;přesněji
řečeno tématu, který je použit pro vstup dat (zpráv) i tématu použitého pro
výstup (uložení výsledných zpráv). Obě témata jsou nakonfigurována takovým
způsobem, že klíče i hodnoty jsou reprezentovány v&nbsp;JSONu:</p>

<pre>
(def <strong>topic-config</strong>
  <i>"Konfigurace témat - vstupního i výstupního."</i>
  {:input
   {:topic-name "input"
    :partition-count 1
    :replication-factor 1
    :key-serde (jackdaw.serdes.json/serde)
    :value-serde (jackdaw.serdes.json/serde)}
   :output
   {:topic-name "output"
    :partition-count 1
    :replication-factor 1
    :key-serde (jackdaw.serdes.json/serde)
    :value-serde (jackdaw.serdes.json/serde)}})
</pre>

<p>Následuje mapa obsahující konfiguraci celé aplikace &ndash; její jednoznačný
identifikátor použitý v&nbsp;systému Kafka, určení adresy brokeru, nastavení
vyrovnávací paměti atd. Interně je tato konfigurace převedena na
<i>properties</i>:</p>

<pre>
(def <strong>app-config</strong>
  <i>"Konfigurace aplikace (ve smyslu knihovny Jackdaw)."</i>
  {"application.id" "pipe"
   "bootstrap.servers" "localhost:9092"
   "cache.max.bytes.buffering" "0"})
</pre>

<p>Funkce pojmenovaná <strong>build-topology</strong> slouží pro specifikaci
konfigurace celé kolony. Prozatím se jedná o značně zjednodušenou kolonu:</p>

<ol>
<li>Je vytvořen proud zpráv čtených (konzumovaných) ze vstupního tématu.</li>
<li>Proud zpráv se ukládá do tématu výstupního.</li>
</ol>

<p>Pro vytvoření proudu se používá funkce nazvaná
<strong>jackdaw.streams/kstream</strong>, pro uložení zpráv z&nbsp;proudu pak
funkce <strong>jackdaw.streams/to</strong>. Povšimněte si použití <i>threading
makra</i>, což je jedno z&nbsp;mnoha velmi užitečných <a
href="https://clojure.org/guides/threading_macros">maker programovacího jazyka
Clojure</a>:</p>

<pre>
(defn <strong>build-topology</strong>
  <i>"Definice celé pipeliny (kolony) - základ aplikace."</i>
  [builder topic-config]
  (-&gt; (j/kstream builder (:input topic-config))
      (j/to (:output topic-config)))
  builder)
</pre>

<p>Dostáváme se ke dvojici funkcí určených pro spuštění aplikace resp.&nbsp;pro
její zastavení. Spuštění aplikace se skládá z&nbsp;inicializace pipeline,
inicializace vlastní aplikace a z&nbsp;jejího následného spuštění funkcí
<strong>jackdaw.streams/start</strong>:</p>

<pre>
(defn <strong>start-app</strong>
  <i>"Spuštění aplikace."</i>
  [app-config topic-config]
  (let [builder (j/streams-builder)
        topology (build-topology builder topic-config)
        app (j/kafka-streams topology app-config)]
    (log/warn "Starting pipe")
    (j/start app)
    (log/warn "Pipe is up")
    app))
</pre>

<p>Opakem funkce <strong>jackdaw.streams/start</strong> je funkce se jménem
<strong>jackdaw.streams/close</strong>, která aplikaci zastaví a uvolní všechny
prostředky:</p>

<pre>
(defn <strong>stop-app</strong>
  <i>"Zastavení aplikace."</i>
  [app]
  (log/warn "Stopping pipe")
  (j/close app)
  (log/warn "Pipe is down"))
</pre>

<p>Aplikace je nakonfigurována a spuštěna z&nbsp;funkce <strong>-main</strong>.
Ovšem ještě před vlastním spuštěním aplikace pro jistotu smažeme existující
témata a znovu je vytvoříme:</p>

<pre>
(defn <strong>-main</strong>
  [&amp; args]
  (let [broker-config {"bootstrap.servers" "localhost:9092"}]
&nbsp;
    <i>;; na začátku pro jistotu vymažeme témata používaná pipou</i>
    (delete-topic broker-config (:input topic-config))
    (delete-topic broker-config (:output topic-config))
&nbsp;
    <i>;; vytvoření nových témat akceptujících zprávy ve formátu JSON</i>
    (new-topic broker-config (:input topic-config))
    (new-topic broker-config (:output topic-config))
&nbsp;
    <i>;; spuštění kolony</i>
    (log/warn "Starting application")
    (let [app (start-app app-config topic-config)]
      (log/warn "App created:" app))))
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že v&nbsp;celém zdrojovém
kódu důsledně používáme logování dostupné přes dnes již prakticky standardní
balíček (jmenný prostor) <strong>clojure.tools.logging</strong>.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Úplný zdrojový kód první aplikace s&nbsp;funkční pipeline</h2>

<p>Úplný zdrojový kód aplikace s&nbsp;plně funkční pipeline je dostupný na
adrese <a
href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-0/src/stream_pipe_0/core.clj">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-0/src/stream_pipe_0/core.clj</a>.
Jednotlivé definice hodnot i funkcí jsou popsány v&nbsp;dokumentačních
řetězcích:</p>

<pre>
(ns <strong>stream-pipe-0.core</strong>
  (:require [jackdaw.admin :as ja]
            [jackdaw.client :as jc]
            [jackdaw.client.log :as jl]
            [jackdaw.serdes.json]
            [jackdaw.streams :as j]
            [clojure.pprint :as pp]
            [clojure.tools.logging :as log]))
&nbsp;
&nbsp;
(def <strong>topic-config</strong>
  <i>"Konfigurace témat - vstupního i výstupního."</i>
  {:input
   {:topic-name "input"
    :partition-count 1
    :replication-factor 1
    :key-serde (jackdaw.serdes.json/serde)
    :value-serde (jackdaw.serdes.json/serde)}
   :output
   {:topic-name "output"
    :partition-count 1
    :replication-factor 1
    :key-serde (jackdaw.serdes.json/serde)
    :value-serde (jackdaw.serdes.json/serde)}})
&nbsp;
&nbsp;
(def <strong>app-config</strong>
  <i>"Konfigurace aplikace (ve smyslu knihovny Jackdaw)."</i>
  {"application.id" "pipe"
   "bootstrap.servers" "localhost:9092"
   "cache.max.bytes.buffering" "0"})
&nbsp;
&nbsp;
(defn <strong>delete-topic</strong>
  <i>"Pomocná funkce pro smazání vybraného tématu."</i>
  [broker-config topic]
  (try
    (log/warn "Deleting topic" (:topic-name topic))
    (let [client (ja/-&gt;AdminClient broker-config)]
      (ja/delete-topics! client [topic]))
    (catch Exception e (str "caught exception: " (.getMessage e)))))
&nbsp;
&nbsp;
(defn <strong>new-topic</strong>
  <i>"Pomocná funkce pro vytvoření nového tématu."</i>
  [broker-config topic]
  (try
    (log/warn "Creating topic" (:topic-name topic))
    (let [client (ja/-&gt;AdminClient broker-config)]
      (ja/create-topics! client [topic]))
      (catch Exception e (str "caught exception: " (.getMessage e)))))
&nbsp;
&nbsp;
(defn <strong>build-topology</strong>
  <i>"Definice celé pipeliny (kolony) - základ aplikace."</i>
  [builder topic-config]
  (-&gt; (j/kstream builder (:input topic-config))
      (j/to (:output topic-config)))
  builder)
&nbsp;
&nbsp;
(defn <strong>start-app</strong>
  <i>"Spuštění aplikace."</i>
  [app-config topic-config]
  (let [builder (j/streams-builder)
        topology (build-topology builder topic-config)
        app (j/kafka-streams topology app-config)]
    (log/warn "Starting pipe")
    (j/start app)
    (log/warn "Pipe is up")
    app))
&nbsp;
&nbsp;
(defn <strong>stop-app</strong>
  <i>"Zastavení aplikace."</i>
  [app]
  (log/warn "Stopping pipe")
  (j/close app)
  (log/warn "Pipe is down"))
&nbsp;
&nbsp;
(defn <strong>-main</strong>
  [&amp; args]
  (let [broker-config {"bootstrap.servers" "localhost:9092"}]
&nbsp;
    <i>;; na začátku pro jistotu vymažeme témata používaná pipou</i>
    (delete-topic broker-config (:input topic-config))
    (delete-topic broker-config (:output topic-config))
&nbsp;
    <i>;; vytvoření nových témat akceptujících zprávy ve formátu JSON</i>
    (new-topic broker-config (:input topic-config))
    (new-topic broker-config (:output topic-config))
&nbsp;
    <i>;; spuštění kolony</i>
    (log/warn "Starting application")
    (let [app (start-app app-config topic-config)]
      (log/warn "App created:" app))))
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Spuštění a otestování dnešního prvního demonstračního příkladu</h2>

<p>Demonstrační příklad popsaný v&nbsp;předchozích třech kapitolách spustíme
příkazem:</p>

<pre>
$ <strong>lein run</strong>
</pre>

<p>Na standardním výstupu by se měly objevit informace o tom, že byla vymazána
témata &bdquo;input&ldquo; a &bdquo;output&ldquo;, že došlo
k&nbsp;znovuvytvoření těchto témat a konečně, že se pipeline (kolona) spustila
a očekává zprávy, které budou následně zkonzumovány (současně se
v&nbsp;podadresáři <strong>log</strong> tvoří logovací soubor
s&nbsp;podrobnějšími informacemi):</p>

<pre>
2020-12-23 16:28:36.354 | WARN  | main | stream-pipe-0.core | Deleting topic input
2020-12-23 16:28:36.599 | WARN  | main | stream-pipe-0.core | Deleting topic output
2020-12-23 16:28:36.618 | WARN  | main | stream-pipe-0.core | Creating topic input
2020-12-23 16:28:36.650 | WARN  | main | stream-pipe-0.core | Creating topic output
2020-12-23 16:28:36.678 | WARN  | main | stream-pipe-0.core | Starting application
2020-12-23 16:28:36.797 | WARN  | main | org.apache.kafka.clients.consumer.ConsumerConfig | The configuration 'admin.retries' was supplied but isn't a known config.
2020-12-23 16:28:36.797 | WARN  | main | org.apache.kafka.clients.consumer.ConsumerConfig | The configuration 'admin.retry.backoff.ms' was supplied but isn't a known config.
2020-12-23 16:28:36.802 | WARN  | main | stream-pipe-0.core | Starting pipe
2020-12-23 16:28:36.805 | WARN  | main | stream-pipe-0.core | Pipe is up
2020-12-23 16:28:36.807 | WARN  | main | stream-pipe-0.core | App created: #object[org.apache.kafka.streams.KafkaStreams 0x61d8a491 org.apache.kafka.streams.KafkaStreams@61d8a491]
</pre>

<p>V&nbsp;dalším terminálu použijeme nástroj <strong>kafkacat</strong> pro
poslání zprávy resp.&nbsp;přesněji řečeno většího množství zpráv do tématu
&bdquo;input&ldquo;. Zprávy musí být ve formátu JSON, ovšem jejich obsah není
žádným způsobem kontrolován:</p>

<pre>
$ <strong>kafkacat -P -b localhost:9092 -t input</strong>
&nbsp;
{"foo":"bar"}
{}
</pre>

<p>A konečně se ve třetím terminálu pokusíme (opět nástrojem
<strong>kafkacat</strong>) přečíst zprávy z&nbsp;tématu &bdquo;output&ldquo;.
Formát těchto zpráv i jejich obsah by měl odpovídat zprávám posílaným ze
druhého terminálu:</p>

<pre>
$ <strong>kafkacat -C -b localhost:9092 -t output</strong>
&nbsp;
% Reached end of topic output [0] at offset 1
{"foo":"bar"}
% Reached end of topic output [0] at offset 2
{}
% Reached end of topic output [0] at offset 3
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Transformace zpráv neboli &bdquo;T&ldquo; v&nbsp;&bdquo;Extract, transform, load&ldquo;</h2>

<p>Konzumace zpráv z&nbsp;jednoho tématu s&nbsp;jejich přímým uložením do
tématu jiného samozřejmě nepředstavuje žádnou přelomovou technologii, takže si
nyní ukážeme, jak by mohla probíhat nějaká skutečná <i>transformace</i> zpráv.
Samotná transformace může být (v&nbsp;těch jednodušších případech)
představována čistou funkcí, která pouze zpracuje svůj vstup (tedy zprávu
získanou z&nbsp;proudu) a jejím výstupem bude transformovaná zpráva. Zprávy
v&nbsp;proudu obsahují dvojici klíč+hodnota, kterou rozdělíme na klíč a hodnotu
a vytvoříme z&nbsp;nich zprávu novou. Toto rozdělení je možné provést buď
explicitně:</p>

<pre>
(defn <strong>etl</strong>
  <i>"Transformační funkce."</i>
  [message]
  (let [k (nth message 0)
        v (nth message 1)]
    [k {:result (+ (:x v) (:y v))}]))
</pre>

<p>Ovšem kratší a idiomatičtější kód by v&nbsp;Clojure mohl vypadat takto:</p>

<pre>
(defn <strong>etl</strong>
  <i>"Transformační funkce."</i>
  [[k v]]
  [k {:result (+ (:x v) (:y v))}])
</pre>

<p>Nyní tedy máme funkci, která dokáže zprávu rozdělit na klíč a hodnotu a
vytvořit zprávu novou. Klíč nové zprávy zůstane původní, ale hodnota se bude
lišit &ndash; z&nbsp;původní zprávy se získají hodnoty uložené pod klíči
&bdquo;x&ldquo; a &bdquo;y&ldquo;, tyto hodnoty se sečtou a výsledek se uloží
do výsledné zprávy pod klíčem &bdquo;result&ldquo; (i výsledná zpráva bude
uložena v&nbsp;JSONu).</p>

<p>Transformační funkci přidáme do pipeliny s&nbsp;využitím
<strong>jackdaw.streams/map</strong> (viz podtržený řádek):</p>

<pre>
(defn <strong>build-topology</strong>
  <i>"Definice celé pipeliny (kolony) - základ aplikace."</i>
  [builder topic-config]
  (-&gt; (j/kstream builder (:input topic-config))
      <u>(j/map etl)</u>
      (j/to (:output topic-config)))
  builder)
</pre>

<p><div class="rs-tip-major">Poznámka: tímto způsobem lze do pipeliny přidat i
libovolné další množství transformačních funkcí. Ty budou tvořit skutečnou
kolonu a představovat tak funkcionální obdobu klasické Unixové
kolony.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Přečtení zpráv z&nbsp;kolony beze změny její funkce (logování atd.)</h2>

<p>V&nbsp;některých případech je užitečné zprávy z&nbsp;kolony získat
&bdquo;vedlejším kanálem&ldquo;, tedy tak, aby se činnost kolony neporušila.
Takto lze například zajistit logování zpráv atd. I pro tuto činnost existuje
v&nbsp;knihovně Jackdaw funkce (vkládaná do kolony); ta se jmenuje
<strong>jackdaw.streams/peek</strong>. Této funkci se předá jak vlastní stream,
tak i funkce zavolaná pro každou zprávu. Při vložení
<strong>jackdaw.streams/peek</strong> do threading makra se pochopitelně první
parametr vynechá.</p>

<p>Snadno tedy můžeme do logu vložit jak informaci o původní zprávě, tak i o
zprávě transformované:</p>

<pre>
(defn <strong>build-topology</strong>
  <i>"Definice celé pipeliny (kolony) - základ aplikace."</i>
  [builder topic-config]
  (-&gt; (j/kstream builder (:input topic-config))
      <u>(j/peek log-message)</u>
      (j/map etl)
      <u>(j/peek log-message)</u>
      (j/to (:output topic-config)))
  builder)
</pre>

<p>Často se setkáme s&nbsp;tím, že jednoduché funkce (typu
<strong>log-message</strong> či <strong>etl</strong> v&nbsp;našem případě) jsou
definovány jako funkce anonymní:</p>

<pre>
(defn <strong>build-topology</strong>
  <i>"Definice celé pipeliny (kolony) - základ aplikace."</i>
  [builder topic-config]
  (-&gt; (j/kstream builder (:input topic-config))
      <u>(j/peek (fn [[k v]]</u>
                <u>(log/warn "Received message with key:   " k " and value:" v)))</u>
      (j/map etl)
      <u>(j/peek (fn [[k v]]</u>
                <u>(log/warn "Transformed message with key:" k " and value:" v)))</u>
      (j/to (:output topic-config)))
  builder)
</pre>

<p><div class="rs-tip-major">Poznámka: jméno funkce <strong>peek</strong> je
zvoleno korektně, protože se u abstraktních datových typů (a nekonečné sekvence
&ndash; streamy &ndash; sem také spadají) jedná o operaci určenou pro přečtení
prvku bez jeho odstranění z&nbsp;daného typu (viz též <a
href="https://en.wikipedia.org/wiki/Peek_(data_type_operation)">https://en.wikipedia.org/wiki/Peek_(data_type_operation)</a>.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Úplný zdrojový kód druhé aplikace s&nbsp;funkční pipeline</h2>

<p>Úplný zdrojový kód dnešní druhé aplikace s&nbsp;plně funkční pipeline je
dostupný na adrese <a
href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-1/src/stream_pipe_1/core.clj">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-1/src/stream_pipe_1/core.clj</a>.
Jednotlivé definice hodnot i funkcí jsou popsány v&nbsp;dokumentačních
řetězcích:</p>

<pre>
(ns <strong>stream-pipe-1.core</strong>
  (:require [jackdaw.admin :as ja]
            [jackdaw.client :as jc]
            [jackdaw.client.log :as jl]
            [jackdaw.serdes.json]
            [jackdaw.streams :as j]
            [clojure.pprint :as pp]
            [clojure.tools.logging :as log]))
&nbsp;
&nbsp;
(def <strong>topic-config</strong>
  <i>"Konfigurace témat - vstupního i výstupního."</i>
  {:input
   {:topic-name "input"
    :partition-count 1
    :replication-factor 1
    :key-serde (jackdaw.serdes.json/serde)
    :value-serde (jackdaw.serdes.json/serde)}
   :output
   {:topic-name "output"
    :partition-count 1
    :replication-factor 1
    :key-serde (jackdaw.serdes.json/serde)
    :value-serde (jackdaw.serdes.json/serde)}})
&nbsp;
&nbsp;
(def <strong>app-config</strong>
  <i>"Konfigurace aplikace (ve smyslu knihovny Jackdaw)."</i>
  {"application.id" "pipe"
   "bootstrap.servers" "localhost:9092"
   "cache.max.bytes.buffering" "0"})
&nbsp;
&nbsp;
(defn <strong>delete-topic</strong>
  <i>"Pomocná funkce pro smazání vybraného tématu."</i>
  [broker-config topic]
  (try
    (log/warn "Deleting topic" (:topic-name topic))
    (let [client (ja/-&gt;AdminClient broker-config)]
      (ja/delete-topics! client [topic]))
    (catch Exception e (str "caught exception: " (.getMessage e)))))
&nbsp;
&nbsp;
(defn <strong>new-topic</strong>
  <i>"Pomocná funkce pro vytvoření nového tématu."</i>
  [broker-config topic]
  (try
    (log/warn "Creating topic" (:topic-name topic))
    (let [client (ja/-&gt;AdminClient broker-config)]
      (ja/create-topics! client [topic]))
      (catch Exception e (str "caught exception: " (.getMessage e)))))
&nbsp;
&nbsp;
(defn <strong>etl</strong>
  <i>"Transformační funkce."</i>
  [[k v]]
  [k {:result (+ (:x v) (:y v))}])
&nbsp;
&nbsp;
(defn <strong>build-topology</strong>
  <i>"Definice celé pipeliny (kolony) - základ aplikace."</i>
  [builder topic-config]
  (-&gt; (j/kstream builder (:input topic-config))
      (j/peek (fn [[k v]]
                (log/warn "Received message with key:   " k " and value:" v)))
      (j/map etl)
      (j/peek (fn [[k v]]
                (log/warn "Transformed message with key:" k " and value:" v)))
      (j/to (:output topic-config)))
  builder)
&nbsp;
&nbsp;
(defn <strong>start-app</strong>
  <i>"Spuštění aplikace."</i>
  [app-config topic-config]
  (let [builder (j/streams-builder)
        topology (build-topology builder topic-config)
        app (j/kafka-streams topology app-config)]
    (log/warn "Starting pipe")
    (j/start app)
    (log/warn "Pipe is up")
    app))
&nbsp;
&nbsp;
(defn <strong>stop-app</strong>
  <i>"Zastavení aplikace."</i>
  [app]
  (log/warn "Stopping pipe")
  (j/close app)
  (log/warn "Pipe is down"))
&nbsp;
&nbsp;
(defn <strong>-main</strong>
  [&amp; args]
  (let [broker-config {"bootstrap.servers" "localhost:9092"}]
&nbsp;
    <i>;; na začátku pro jistotu vymažeme témata používaná pipou</i>
    (delete-topic broker-config (:input topic-config))
    (delete-topic broker-config (:output topic-config))
&nbsp;
    <i>;; vytvoření nových témat akceptujících zprávy ve formátu JSON</i>
    (new-topic broker-config (:input topic-config))
    (new-topic broker-config (:output topic-config))
&nbsp;
    <i>;; spuštění kolony</i>
    (log/warn "Starting application")
    (let [app (start-app app-config topic-config)]
      (log/warn "App created:" app))))
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Spuštění a otestování dnešního druhého demonstračního příkladu</h2>

<p>Opět si můžeme vyzkoušet činnost dnešního druhého demonstračního příkladu,
tentokrát i s&nbsp;transformací zpráv a s&nbsp;logováním přidaným do kolony.
Nejprve aplikaci spustíme:</p>

<pre>
$ <strong>lein run</strong>
&nbsp;
2020-12-23 16:52:16.362 | WARN  | main | stream-pipe-1.core | Deleting topic input
2020-12-23 16:52:16.600 | WARN  | main | stream-pipe-1.core | Deleting topic output
2020-12-23 16:52:16.615 | WARN  | main | stream-pipe-1.core | Creating topic input
2020-12-23 16:52:16.643 | WARN  | main | stream-pipe-1.core | Creating topic output
2020-12-23 16:52:16.669 | WARN  | main | stream-pipe-1.core | Starting application
2020-12-23 16:52:16.786 | WARN  | main | org.apache.kafka.clients.consumer.ConsumerConfig | The configuration 'admin.retries' was supplied but isn't a known config.
2020-12-23 16:52:16.787 | WARN  | main | org.apache.kafka.clients.consumer.ConsumerConfig | The configuration 'admin.retry.backoff.ms' was supplied but isn't a known config.
2020-12-23 16:52:16.792 | WARN  | main | stream-pipe-1.core | Starting pipe
2020-12-23 16:52:16.796 | WARN  | main | stream-pipe-1.core | Pipe is up
2020-12-23 16:52:16.798 | WARN  | main | stream-pipe-1.core | App created: #object[org.apache.kafka.streams.KafkaStreams 0x6a97517 org.apache.kafka.streams.KafkaStreams@6a97517]
</pre>

<p>Následně do vstupního tématu pošleme několik zpráv ve správném formátu, tedy
s&nbsp;klíčem i hodnotou v&nbsp;JSONu, přičemž hodnota obsahuje dvě numerické
hodnoty s&nbsp;klíči <strong>x</strong> a <strong>y</strong>:</p>

<pre>
$ <strong>kafkacat -P -b localhost:9092 -t input -K:</strong>
&nbsp;
"***":{"x":1, "y":2}
"---":{"x":100, "y":-100}
</pre>

<p>Obě zprávy by měly být správně zpracovány, což se dozvíme z&nbsp;logu
(nejprve je zalogována zpráva vstupní, poté zpráva transformovaná):</p>

<pre>
2020-12-23 16:52:18.853 | WARN  | pipe-2d6a6caf-3ee0-49ec-a0d9-35edbf0cfe7c-StreamThread-1 | stream-pipe-1.core | Received message with key:    ***  and value: {:x 1, :y 2}
2020-12-23 16:52:18.856 | WARN  | pipe-2d6a6caf-3ee0-49ec-a0d9-35edbf0cfe7c-StreamThread-1 | stream-pipe-1.core | Transformed message with key: ***  and value: {:result 3}
2020-12-23 16:52:33.498 | WARN  | pipe-2d6a6caf-3ee0-49ec-a0d9-35edbf0cfe7c-StreamThread-1 | stream-pipe-1.core | Received message with key:    ---  and value: {:x 100, :y -100}
2020-12-23 16:52:33.498 | WARN  | pipe-2d6a6caf-3ee0-49ec-a0d9-35edbf0cfe7c-StreamThread-1 | stream-pipe-1.core | Transformed message with key: ---  and value: {:result 0}
</pre>

<p>A konečně výsledky přečteme z&nbsp;výstupního tématu:</p>

<pre>
$ <strong>kafkacat -C -b localhost:9092 -t output</strong>
&nbsp;
% Reached end of topic output [0] at offset 0
{"result":3}
% Reached end of topic output [0] at offset 1
{"result":0}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Chování aplikace v&nbsp;případě příjmu nekorektní zprávy</h2>

<p>Nyní si vyzkoušejme, co se stane v&nbsp;případě, že do vstupního tématu
pošleme zprávu s&nbsp;neočekávaným obsahem, například zprávu, která vůbec není
zakódována do JSONu:</p>

<pre>
$ <strong>kafkacat -P -b localhost:9092 -t input</strong>
&nbsp;
xyz
</pre>

<p>V&nbsp;takovém případě dojde k&nbsp;pádu aplikace, a to již při pokusu o
deserializaci zprávy:</p>

<pre>
2020-12-23 16:32:57.649 | ERROR | pipe-934ea525-1ffd-4c1a-b8a0-89a827416553-StreamThread-1 | org.apache.kafka.streams.errors.LogAndFailExceptionHandler | Exception caught during Deserialization, taskId: 0_0, topic: input, partition: 0, offset: 0
java.lang.Exception: JSON error (unexpected character): x
        at clojure.data.json$_read.invokeStatic(json.clj:226)
        at clojure.data.json$_read.invoke(json.clj:177)
        at clojure.data.json$read.invokeStatic(json.clj:272)
        at clojure.data.json$read.doInvoke(json.clj:228)
        at clojure.lang.RestFn.applyTo(RestFn.java:139)
        at clojure.core$apply.invokeStatic(core.clj:667)
        at clojure.core$apply.invoke(core.clj:660)
        at clojure.data.json$read_str.invokeStatic(json.clj:278)
        at clojure.data.json$read_str.doInvoke(json.clj:274)
        at clojure.lang.RestFn.invoke(RestFn.java:439)
        at jackdaw.serdes.json$deserializer$fn__5866.invoke(json.clj:34)
        at jackdaw.serdes.fn_impl.FnDeserializer.deserialize(fn_impl.clj:37)
        at org.apache.kafka.common.serialization.Deserializer.deserialize(Deserializer.java:60)
        at org.apache.kafka.streams.processor.internals.SourceNode.deserializeValue(SourceNode.java:60)
        at org.apache.kafka.streams.processor.internals.RecordDeserializer.deserialize(RecordDeserializer.java:66)
        at org.apache.kafka.streams.processor.internals.RecordQueue.updateHead(RecordQueue.java:169)
        at org.apache.kafka.streams.processor.internals.RecordQueue.addRawRecords(RecordQueue.java:101)
        at org.apache.kafka.streams.processor.internals.PartitionGroup.addRawRecords(PartitionGroup.java:136)
        at org.apache.kafka.streams.processor.internals.StreamTask.addRecords(StreamTask.java:744)
        at org.apache.kafka.streams.processor.internals.StreamThread.addRecordsToTasks(StreamThread.java:1045)
        at org.apache.kafka.streams.processor.internals.StreamThread.runOnce(StreamThread.java:883)
        at org.apache.kafka.streams.processor.internals.StreamThread.runLoop(StreamThread.java:819)
        at org.apache.kafka.streams.processor.internals.StreamThread.run(StreamThread.java:788)
2020-12-23 16:32:57.652 | ERROR | pipe-934ea525-1ffd-4c1a-b8a0-89a827416553-StreamThread-1 | org.apache.kafka.streams.processor.internals.StreamThread | stream-thread [pipe-934ea525-1ffd-4c1a-b8a0-89a827416553-StreamThread-1] Encountered the following unexpected Kafka exception during processing, this usually indicate Streams internal errors:
org.apache.kafka.streams.errors.StreamsException: <strong>Deserialization exception handler is set to fail upon a deserialization error. If you would rather have the streaming pipeline continue after a deserialization error, please set the default.deserialization.exception.handler appropriately.</strong>
        at org.apache.kafka.streams.processor.internals.RecordDeserializer.deserialize(RecordDeserializer.java:80)
        at org.apache.kafka.streams.processor.internals.RecordQueue.updateHead(RecordQueue.java:169)
        at org.apache.kafka.streams.processor.internals.RecordQueue.addRawRecords(RecordQueue.java:101)
        at org.apache.kafka.streams.processor.internals.PartitionGroup.addRawRecords(PartitionGroup.java:136)
        at org.apache.kafka.streams.processor.internals.StreamTask.addRecords(StreamTask.java:744)
        at org.apache.kafka.streams.processor.internals.StreamThread.addRecordsToTasks(StreamThread.java:1045)
        at org.apache.kafka.streams.processor.internals.StreamThread.runOnce(StreamThread.java:883)
        at org.apache.kafka.streams.processor.internals.StreamThread.runLoop(StreamThread.java:819)
        at org.apache.kafka.streams.processor.internals.StreamThread.run(StreamThread.java:788)
Caused by: java.lang.Exception: JSON error (unexpected character): x
        at clojure.data.json$_read.invokeStatic(json.clj:226)
        at clojure.data.json$_read.invoke(json.clj:177)
        at clojure.data.json$read.invokeStatic(json.clj:272)
        at clojure.data.json$read.doInvoke(json.clj:228)
        at clojure.lang.RestFn.applyTo(RestFn.java:139)
        at clojure.core$apply.invokeStatic(core.clj:667)
        at clojure.core$apply.invoke(core.clj:660)
        at clojure.data.json$read_str.invokeStatic(json.clj:278)
        at clojure.data.json$read_str.doInvoke(json.clj:274)
        at clojure.lang.RestFn.invoke(RestFn.java:439)
        at jackdaw.serdes.json$deserializer$fn__5866.invoke(json.clj:34)
        at jackdaw.serdes.fn_impl.FnDeserializer.deserialize(fn_impl.clj:37)
        at org.apache.kafka.common.serialization.Deserializer.deserialize(Deserializer.java:60)
        at org.apache.kafka.streams.processor.internals.SourceNode.deserializeValue(SourceNode.java:60)
        at org.apache.kafka.streams.processor.internals.RecordDeserializer.deserialize(RecordDeserializer.java:66)
        ... 8 more
2020-12-23 16:32:57.662 | ERROR | pipe-934ea525-1ffd-4c1a-b8a0-89a827416553-StreamThread-1 | org.apache.kafka.streams.KafkaStreams | stream-client [pipe-934ea525-1ffd-4c1a-b8a0-89a827416553] All stream threads have died. The instance will be in error state and should be closed.
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Zalogování chyby bez pádu aplikace</h2>

<p></p>

<pre>
(def <strong>app-config</strong>
  <i>"Konfigurace aplikace (ve smyslu knihovny Jackdaw)."</i>
  {"application.id" "pipe"
   "bootstrap.servers" "localhost:9092"
   "cache.max.bytes.buffering" "0"
   <i>"default.deserialization.exception.handler" "org.apache.kafka.streams.errors.LogAndContinueExceptionHandler"})</i>
</pre>

<p></p>

<pre>
(ns <strong>stream-pipe-2.core</strong>
  (:require [jackdaw.admin :as ja]
            [jackdaw.client :as jc]
            [jackdaw.client.log :as jl]
            [jackdaw.serdes.json]
            [jackdaw.streams :as j]
            [clojure.pprint :as pp]
            [clojure.tools.logging :as log]))
&nbsp;
&nbsp;
(def <strong>topic-config</strong>
  <i>"Konfigurace témat - vstupního i výstupního."</i>
  {:input
   {:topic-name "input"
    :partition-count 1
    :replication-factor 1
    :key-serde (jackdaw.serdes.json/serde)
    :value-serde (jackdaw.serdes.json/serde)}
   :output
   {:topic-name "output"
    :partition-count 1
    :replication-factor 1
    :key-serde (jackdaw.serdes.json/serde)
    :value-serde (jackdaw.serdes.json/serde)}})
&nbsp;
&nbsp;
(def <strong>app-config</strong>
  <i>"Konfigurace aplikace (ve smyslu knihovny Jackdaw)."</i>
  {"application.id" "pipe"
   "bootstrap.servers" "localhost:9092"
   "cache.max.bytes.buffering" "0"
   "default.deserialization.exception.handler" "org.apache.kafka.streams.errors.LogAndContinueExceptionHandler"})
&nbsp;
&nbsp;
(defn <strong>delete-topic</strong>
  <i>"Pomocná funkce pro smazání vybraného tématu."</i>
  [broker-config topic]
  (try
    (log/warn "Deleting topic" (:topic-name topic))
    (let [client (ja/-&gt;AdminClient broker-config)]
      (ja/delete-topics! client [topic]))
    (catch Exception e (str "caught exception: " (.getMessage e)))))
&nbsp;
&nbsp;
(defn <strong>new-topic</strong>
  <i>"Pomocná funkce pro vytvoření nového tématu."</i>
  [broker-config topic]
  (try
    (log/warn "Creating topic" (:topic-name topic))
    (let [client (ja/-&gt;AdminClient broker-config)]
      (ja/create-topics! client [topic]))
      (catch Exception e (str "caught exception: " (.getMessage e)))))
&nbsp;
&nbsp;
(defn <strong>etl</strong>
  <i>"Transformační funkce."</i>
  [[k v]]
  [k {:result (+ (:x v) (:y v))}])
&nbsp;
&nbsp;
(defn <strong>build-topology</strong>
  <i>"Definice celé pipeliny (kolony) - základ aplikace."</i>
  [builder topic-config]
  (-&gt; (j/kstream builder (:input topic-config))
      (j/peek (fn [[k v]]
                (log/warn "Received message with key:   " k " and value:" v)))
      (j/map etl)
      (j/peek (fn [[k v]]
                (log/warn "Transformed message with key:" k " and value:" v)))
      (j/to (:output topic-config)))
  builder)
&nbsp;
&nbsp;
(defn <strong>start-app</strong>
  <i>"Spuštění aplikace."</i>
  [app-config topic-config]
  (let [builder (j/streams-builder)
        topology (build-topology builder topic-config)
        app (j/kafka-streams topology app-config)]
    (log/warn "Starting pipe")
    (j/start app)
    (log/warn "Pipe is up")
    app))
&nbsp;
&nbsp;
(defn <strong>stop-app</strong>
  <i>"Zastavení aplikace."</i>
  [app]
  (log/warn "Stopping pipe")
  (j/close app)
  (log/warn "Pipe is down"))
&nbsp;
&nbsp;
(defn <strong>-main</strong>
  [&amp; args]
  (let [broker-config {"bootstrap.servers" "localhost:9092"}]
&nbsp;
    <i>;; na začátku pro jistotu vymažeme témata používaná pipou</i>
    (delete-topic broker-config (:input topic-config))
    (delete-topic broker-config (:output topic-config))
&nbsp;
    <i>;; vytvoření nových témat akceptujících zprávy ve formátu JSON</i>
    (new-topic broker-config (:input topic-config))
    (new-topic broker-config (:output topic-config))
&nbsp;
    <i>;; spuštění kolony</i>
    (log/warn "Starting application")
    (let [app (start-app app-config topic-config)]
      (log/warn "App created:" app))))
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Chování upravené aplikace v&nbsp;příjmu nekorektní zprávy</h2>

<pre>
$ <strong>kafkacat -P -b localhost:9092 -t input -K:</strong>
&nbsp;
"x":{"x":1, "y":2}
"y":{"x":10, "y":20}
</pre>

<pre>
$ <strong>kafkacat -C -b localhost:9092 -t output</strong>
&nbsp;
% Reached end of topic output [0] at offset 0
{"result":3,"timestamp":"Fri Dec 25 18:15:44 CET 2020"}
% Reached end of topic output [0] at offset 1
{"result":30,"timestamp":"Fri Dec 25 18:16:02 CET 2020"}
% Reached end of topic output [0] at offset 2
</pre>

<p></p>

<pre>
2020-12-23 17:28:22.197 | WARN  | pipe-3cb9ae24-57a5-4d20-b4f7-a89e9a311445-StreamThread-1 | org.apache.kafka.streams.errors.LogAndContinueExceptionHandler | Exception caught during Deserialization, taskId: 0_0, topic: input, partition: 0, offset: 0
java.lang.Exception: JSON error (expected false)
        at clojure.data.json$_read.invokeStatic(json.clj:215)
        at clojure.data.json$_read.invoke(json.clj:177)
        at clojure.data.json$read.invokeStatic(json.clj:272)
        at clojure.data.json$read.doInvoke(json.clj:228)
        at clojure.lang.RestFn.applyTo(RestFn.java:139)
        at clojure.core$apply.invokeStatic(core.clj:667)
        at clojure.core$apply.invoke(core.clj:660)
        at clojure.data.json$read_str.invokeStatic(json.clj:278)
        at clojure.data.json$read_str.doInvoke(json.clj:274)
        at clojure.lang.RestFn.invoke(RestFn.java:439)
        at jackdaw.serdes.json$deserializer$fn__5866.invoke(json.clj:34)
        at jackdaw.serdes.fn_impl.FnDeserializer.deserialize(fn_impl.clj:37)
        at org.apache.kafka.common.serialization.Deserializer.deserialize(Deserializer.java:60)
        at org.apache.kafka.streams.processor.internals.SourceNode.deserializeValue(SourceNode.java:60)
        at org.apache.kafka.streams.processor.internals.RecordDeserializer.deserialize(RecordDeserializer.java:66)
        at org.apache.kafka.streams.processor.internals.RecordQueue.updateHead(RecordQueue.java:169)
        at org.apache.kafka.streams.processor.internals.RecordQueue.addRawRecords(RecordQueue.java:101)
        at org.apache.kafka.streams.processor.internals.PartitionGroup.addRawRecords(PartitionGroup.java:136)
        at org.apache.kafka.streams.processor.internals.StreamTask.addRecords(StreamTask.java:744)
        at org.apache.kafka.streams.processor.internals.StreamThread.addRecordsToTasks(StreamThread.java:1045)
        at org.apache.kafka.streams.processor.internals.StreamThread.runOnce(StreamThread.java:883)
        at org.apache.kafka.streams.processor.internals.StreamThread.runLoop(StreamThread.java:819)
        at org.apache.kafka.streams.processor.internals.StreamThread.run(StreamThread.java:788)
e020-12-23 17:28:22.205 | WARN  | pipe-3cb9ae24-57a5-4d20-b4f7-a89e9a311445-StreamThread-1 | org.apache.kafka.streams.processor.internals.RecordDeserializer | task [0_0] Skipping record due to deserialization error. topic=[input] partition=[0] offset=[0]
java.lang.Exception: JSON error (expected false)
        at clojure.data.json$_read.invokeStatic(json.clj:215)
        at clojure.data.json$_read.invoke(json.clj:177)
        at clojure.data.json$read.invokeStatic(json.clj:272)
        at clojure.data.json$read.doInvoke(json.clj:228)
        at clojure.lang.RestFn.applyTo(RestFn.java:139)
        at clojure.core$apply.invokeStatic(core.clj:667)
        at clojure.core$apply.invoke(core.clj:660)
        at clojure.data.json$read_str.invokeStatic(json.clj:278)
        at clojure.data.json$read_str.doInvoke(json.clj:274)
        at clojure.lang.RestFn.invoke(RestFn.java:439)
        at jackdaw.serdes.json$deserializer$fn__5866.invoke(json.clj:34)
        at jackdaw.serdes.fn_impl.FnDeserializer.deserialize(fn_impl.clj:37)
        at org.apache.kafka.common.serialization.Deserializer.deserialize(Deserializer.java:60)
        at org.apache.kafka.streams.processor.internals.SourceNode.deserializeValue(SourceNode.java:60)
        at org.apache.kafka.streams.processor.internals.RecordDeserializer.deserialize(RecordDeserializer.java:66)
        at org.apache.kafka.streams.processor.internals.RecordQueue.updateHead(RecordQueue.java:169)
        at org.apache.kafka.streams.processor.internals.RecordQueue.addRawRecords(RecordQueue.java:101)
        at org.apache.kafka.streams.processor.internals.PartitionGroup.addRawRecords(PartitionGroup.java:136)
        at org.apache.kafka.streams.processor.internals.StreamTask.addRecords(StreamTask.java:744)
        at org.apache.kafka.streams.processor.internals.StreamThread.addRecordsToTasks(StreamThread.java:1045)
        at org.apache.kafka.streams.processor.internals.StreamThread.runOnce(StreamThread.java:883)
        at org.apache.kafka.streams.processor.internals.StreamThread.runLoop(StreamThread.java:819)
        at org.apache.kafka.streams.processor.internals.StreamThread.run(StreamThread.java:788)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Složitější pipeline s&nbsp;několika transformačními funkcemi</h2>

<pre>
(defn <strong>build-topology</strong>
  <i>"Definice celé pipeliny (kolony) - základ aplikace."</i>
  [builder topic-config]
  (-&gt; (j/kstream builder (:input topic-config))
      (j/peek (fn [[k v]]
                (log/warn "Received message with key:   " k " and value:" v)))
      (j/map etl-1)
      (j/peek (fn [[k v]]
                (log/warn "Transformed message with key:" k " and value:" v)))
      (j/map etl-2)
      (j/peek (fn [[k v]]
                (log/warn "Transformed message with key:" k " and value:" v)))
      (j/to (:output topic-config)))
  builder)
</pre>


<pre>
(ns <strong>stream-pipe-3.core</strong>
  (:require [jackdaw.admin :as ja]
            [jackdaw.client :as jc]
            [jackdaw.client.log :as jl]
            [jackdaw.serdes.json]
            [jackdaw.streams :as j]
            [clojure.pprint :as pp]
            [clojure.tools.logging :as log]))


(def <strong>topic-config</strong>
  <i>"Konfigurace témat - vstupního i výstupního."</i>
  {:input
   {:topic-name "input"
    :partition-count 1
    :replication-factor 1
    :key-serde (jackdaw.serdes.json/serde)
    :value-serde (jackdaw.serdes.json/serde)}
   :output
   {:topic-name "output"
    :partition-count 1
    :replication-factor 1
    :key-serde (jackdaw.serdes.json/serde)
    :value-serde (jackdaw.serdes.json/serde)}})


(def <strong>app-config</strong>
  <i>"Konfigurace aplikace (ve smyslu knihovny Jackdaw)."</i>
  {"application.id" "pipe"
   "bootstrap.servers" "localhost:9092"
   "cache.max.bytes.buffering" "0"
   "default.deserialization.exception.handler" "org.apache.kafka.streams.errors.LogAndContinueExceptionHandler"})


(defn <strong>delete-topic</strong>
  <i>"Pomocná funkce pro smazání vybraného tématu."</i>
  [broker-config topic]
  (try
    (log/warn "Deleting topic" (:topic-name topic))
    (let [client (ja/-&gt;AdminClient broker-config)]
      (ja/delete-topics! client [topic]))
    (catch Exception e (str "caught exception: " (.getMessage e)))))


(defn <strong>new-topic</strong>
  <i>"Pomocná funkce pro vytvoření nového tématu."</i>
  [broker-config topic]
  (try
    (log/warn "Creating topic" (:topic-name topic))
    (let [client (ja/-&gt;AdminClient broker-config)]
      (ja/create-topics! client [topic]))
      (catch Exception e (str "caught exception: " (.getMessage e)))))


(defn <strong>etl-1</strong>
  <i>"Transformační funkce."</i>
  [[k v]]
  [k {:result (+ (:x v) (:y v))}])


(defn <strong>etl-2</strong>
  <i>"Transformační funkce."</i>
  [[k v]]
  [k (assoc v :timestamp (str (new java.util.Date)))])


(defn <strong>build-topology</strong>
  <i>"Definice celé pipeliny (kolony) - základ aplikace."</i>
  [builder topic-config]
  (-&gt; (j/kstream builder (:input topic-config))
      (j/peek (fn [[k v]]
                (log/warn "Received message with key:   " k " and value:" v)))
      (j/map etl-1)
      (j/peek (fn [[k v]]
                (log/warn "Transformed message with key:" k " and value:" v)))
      (j/map etl-2)
      (j/peek (fn [[k v]]
                (log/warn "Transformed message with key:" k " and value:" v)))
      (j/to (:output topic-config)))
  builder)


(defn <strong>start-app</strong>
  <i>"Spuštění aplikace."</i>
  [app-config topic-config]
  (let [builder (j/streams-builder)
        topology (build-topology builder topic-config)
        app (j/kafka-streams topology app-config)]
    (log/warn "Starting pipe")
    (j/start app)
    (log/warn "Pipe is up")
    app))


(defn <strong>stop-app</strong>
  <i>"Zastavení aplikace."</i>
  [app]
  (log/warn "Stopping pipe")
  (j/close app)
  (log/warn "Pipe is down"))


(defn <strong>-main</strong>
  [&amp; args]
  (let [broker-config {"bootstrap.servers" "localhost:9092"}]

    <i>;; na začátku pro jistotu vymažeme témata používaná pipou</i>
    (delete-topic broker-config (:input topic-config))
    (delete-topic broker-config (:output topic-config))

    <i>;; vytvoření nových témat akceptujících zprávy ve formátu JSON</i>
    (new-topic broker-config (:input topic-config))
    (new-topic broker-config (:output topic-config))

    <i>;; spuštění kolony</i>
    (log/warn "Starting application")
    (let [app (start-app app-config topic-config)]
      (log/warn "App created:" app))))
</pre>


<pre>
18:15 $ <strong>lein run</strong>
2020-12-25 18:15:32.305 | WARN  | main | stream-pipe-3.core | Deleting topic input
2020-12-25 18:15:32.561 | WARN  | main | stream-pipe-3.core | Deleting topic output
2020-12-25 18:15:32.587 | WARN  | main | stream-pipe-3.core | Creating topic input
2020-12-25 18:15:32.630 | WARN  | main | stream-pipe-3.core | Creating topic output
2020-12-25 18:15:32.666 | WARN  | main | stream-pipe-3.core | Starting application
2020-12-25 18:15:32.776 | WARN  | main | org.apache.kafka.clients.consumer.ConsumerConfig | The configuration 'admin.retries' was supplied but isn't a known config.
2020-12-25 18:15:32.776 | WARN  | main | org.apache.kafka.clients.consumer.ConsumerConfig | The configuration 'admin.retry.backoff.ms' was supplied but isn't a known config.
2020-12-25 18:15:32.781 | WARN  | main | stream-pipe-3.core | Starting pipe
2020-12-25 18:15:32.783 | WARN  | main | stream-pipe-3.core | Pipe is up
2020-12-25 18:15:32.784 | WARN  | main | stream-pipe-3.core | App created: #object[org.apache.kafka.streams.KafkaStreams 0x8f374de org.apache.kafka.streams.KafkaStreams@8f374de]
2020-12-25 18:15:44.393 | WARN  | pipe-36f18885-8cba-4d1c-a9d7-995abcfd9a0e-StreamThread-1 | stream-pipe-3.core | Received message with key:    x  and value: {:x 1, :y 2}
2020-12-25 18:15:44.394 | WARN  | pipe-36f18885-8cba-4d1c-a9d7-995abcfd9a0e-StreamThread-1 | stream-pipe-3.core | Transformed message with key: x  and value: {:result 3}
2020-12-25 18:15:44.398 | WARN  | pipe-36f18885-8cba-4d1c-a9d7-995abcfd9a0e-StreamThread-1 | stream-pipe-3.core | Transformed message with key: x  and value: {:result 3, :timestamp Fri Dec 25 18:15:44 CET 2020}
2020-12-25 18:16:02.476 | WARN  | pipe-36f18885-8cba-4d1c-a9d7-995abcfd9a0e-StreamThread-1 | stream-pipe-3.core | Received message with key:    y  and value: {:x 10, :y 20}
2020-12-25 18:16:02.477 | WARN  | pipe-36f18885-8cba-4d1c-a9d7-995abcfd9a0e-StreamThread-1 | stream-pipe-3.core | Transformed message with key: y  and value: {:result 30}
2020-12-25 18:16:02.478 | WARN  | pipe-36f18885-8cba-4d1c-a9d7-995abcfd9a0e-StreamThread-1 | stream-pipe-3.core | Transformed message with key: y  and value: {:result 30, :timestamp Fri Dec 25 18:16:02 CET 2020}
</pre>



<pre>
</pre>



<pre>
$ <strong>kafkacat -P -b localhost:9092 -t input -K:</strong>
&nbsp;
"x":{"x":1, "y":2}
</pre>

<pre>
19:08 $ lein run
2020-12-25 19:09:08.876 | WARN  | main | stream-pipe-4.core | Deleting topic input
2020-12-25 19:09:09.099 | WARN  | main | stream-pipe-4.core | Deleting topic output1
2020-12-25 19:09:09.115 | WARN  | main | stream-pipe-4.core | Deleting topic output2
2020-12-25 19:09:09.128 | WARN  | main | stream-pipe-4.core | Deleting topic output3
2020-12-25 19:09:09.140 | WARN  | main | stream-pipe-4.core | Creating topic input
2020-12-25 19:09:09.174 | WARN  | main | stream-pipe-4.core | Creating topic output1
2020-12-25 19:09:09.205 | WARN  | main | stream-pipe-4.core | Creating topic output2
2020-12-25 19:09:09.242 | WARN  | main | stream-pipe-4.core | Creating topic output3
2020-12-25 19:09:09.275 | WARN  | main | stream-pipe-4.core | Starting application
2020-12-25 19:09:09.367 | WARN  | main | org.apache.kafka.clients.consumer.ConsumerConfig | The configuration 'admin.retries' was supplied but isn't a known config.
2020-12-25 19:09:09.367 | WARN  | main | org.apache.kafka.clients.consumer.ConsumerConfig | The configuration 'admin.retry.backoff.ms' was supplied but isn't a known config.
2020-12-25 19:09:09.372 | WARN  | main | stream-pipe-4.core | Starting pipe
2020-12-25 19:09:09.374 | WARN  | main | stream-pipe-4.core | Pipe is up
2020-12-25 19:09:09.376 | WARN  | main | stream-pipe-4.core | App created: #object[org.apache.kafka.streams.KafkaStreams 0x68de8522 org.apache.kafka.streams.KafkaStreams@68de8522]
2020-12-25 19:09:26.385 | WARN  | pipe-3dc0cffa-c985-47f5-9e61-15896b739fa6-StreamThread-1 | stream-pipe-4.core | Received message with key:    x  and value: {:x 1, :y 2}
2020-12-25 19:09:26.515 | WARN  | pipe-3dc0cffa-c985-47f5-9e61-15896b739fa6-StreamThread-1 | stream-pipe-4.core | Transformed message with key: x  and value: {:result 3}
2020-12-25 19:09:26.642 | WARN  | pipe-3dc0cffa-c985-47f5-9e61-15896b739fa6-StreamThread-1 | stream-pipe-4.core | Transformed message with key: x  and value: {:result 3, :timestamp Fri Dec 25 19:09:26 CET 2020}
</pre>

<pre>
$ <strong>kafkacat -C -b localhost:9092 -t output1</strong>
&nbsp;
{"x":1,"y":2}
</pre>

<pre>
$ <strong>kafkacat -C -b localhost:9092 -t output2</strong>
&nbsp;
{"result":3}
</pre>

<pre>
$ <strong>kafkacat -C -b localhost:9092 -t output3</strong>
&nbsp;
{"result":3,"timestamp":"Fri Dec 25 19:09:26 CET 2020"}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Spuštění a otestování dnešního čtvrtého demonstračního příkladu</h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Rozdělení streamu do více částí</h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Spuštění a otestování dnešního pátého demonstračního příkladu</h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. Transformace zpráv založená na uzávěru</h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů vyvinutých
v&nbsp;programovacím jazyku Clojure byly uloženy do Git repositáře, který je
dostupný na adrese <a
href="https://github.com/tisnik/message-queues-examples">https://github.com/tisnik/message-queues-examples</a>
(stále na GitHubu :-):</p>

<table>
<tr><th>#</th><th>Projekt</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td>1</td><td>stream-pipe-0</td><td>funkční kostra pipeline, na které jsou postaveny i další čtyři demonstrační příklady</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-0">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-0</a></td></tr>
<tr><td>2</td><td>stream-pipe-1</td><td>jednoduchá transformace zpráv</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-1">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-1</a></td></tr>
<tr><td>3</td><td>stream-pipe-2</td><td>zalogování chyby bez pádu aplikace v&nbsp;případě, že zpráva není uložena v&nbsp;JSONu</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-2">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-2</a></td></tr>
<tr><td>4</td><td>stream-pipe-3</td><td>složitější pipeline s&nbsp;několika transformačními funkcemi</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-3">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-3</a></td></tr>
<tr><td>5</td><td>stream-pipe-4</td><td>rozdělení streamu do více částí</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-4">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-4</a></td></tr>
<tr><td>6</td><td>stream-pipe-5</td><td>transformace zpráv založená na uzávěru</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-5">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/stream-pipe-5</a></td></tr>
</table>

<p>Demonstrační příklady z&nbsp;předchozích dvou článků o propojení systému
Apache Kafka a Clojure s&nbsp;využitím knihovny Jackdaw [<a
href="https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw/">1</a>]
[<a
href="https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw-2-cast/">2</a>]:</p>

<table>
<tr><th> #</th><th>Projekt</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>kafka-repl</td><td>prázdný projekt připravený pro interaktivní práci v&nbsp;REPLu</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/kafka-repl">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/kafka-repl</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 2</td><td>topic-constructor</td><td>vytvoření nového tématu</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-constructor">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-constructor</a></td></tr>
<tr><td> 3</td><td>topic-constructor-logger</td><td>vytvoření nového tématu; konfigurace logování</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-constructor-logger">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-constructor-logger</a></td></tr>
<tr><td> 4</td><td>topic-constructor-10-partitions</td><td>vytvoření nového tématu s&nbsp;deseti oddíly</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-constructor-10-partitions">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-constructor-10-partitions</a></td></tr>
<tr><td> 5</td><td>topic-destructor</td><td>vymazání tématu</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-destructor">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/topic-destructor</a></td></tr>
<tr><td> 6</td><td>get-broker-config</td><td>zobrazení konfigurace brokera</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/get-broker-config">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/get-broker-config</a></td></tr>
<tr><td> 7</td><td>describe-cluster</td><td>zobrazení aktuální konfigurace clusteru</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-cluster">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-cluster</a></td></tr>
<tr><td> 8</td><td>describe-all-topics</td><td>zobrazení všech dostupných témat</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-all-topics">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-all-topics</a></td></tr>
<tr><td> 9</td><td>describe-topics</td><td>zobrazení informací o vybraných tématech</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-topics">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-topics</a></td></tr>
<tr><td>10</td><td>describe-topics-configs</td><td>zobrazení podrobnějších informací o vybraných tématech</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-topics-configs">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/describe-topics-configs</a></td></tr>
<tr><td>11</td><td>produce-messages-1</td><td>vytvoření jediné zprávy</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/produce-messages-1">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/produce-messages-1</a></td></tr>
<tr><td>12</td><td>produce-messages-2</td><td>vytvoření 100 zpráv</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/produce-messages-2">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/produce-messages-2</a></td></tr>
<tr><td>13</td><td>produce-messages-3</td><td>vytvoření 100 zpráv se specifikací klíče</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/produce-messages-3">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/produce-messages-3</a></td></tr>
<tr><td>14</td><td>consume-messages-1</td><td>konzument zpráv z&nbsp;vybraného tématu</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/consume-messages-1">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/consume-messages-1</a></td></tr>
<tr><td>15</td><td>consume-messages-2</td><td>konzument zpráv z&nbsp;vybraného tématu, alternativní práce s&nbsp;offsetem na začátku</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/consume-messages-2">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/consume-messages-2</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>edn-1-serializer</td><td>producent zpráv ve formátu EDN</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/edn-1-serializer">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/edn-1-serializer</a></td></tr>
<tr><td>17</td><td>edn-2-serializer</td><td>producent zpráv ve formátu EDN bez konců řádků</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/edn-2-serializer">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/edn-2-serializer</a></td></tr>
<tr><td>18</td><td>json-serializer</td><td>producent zpráv ve formátu JSON</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/json-serializer">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/json-serializer</a></td></tr>
<tr><td>19</td><td>custom-pipe</td><td>jednoduchá kolona (pipe)</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/custom-pipe">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/custom-pipe</a></td></tr>
<tr><td>20</td><td>custom-pipe-processing-function</td><td>kolona využívající libovolnou transformační funkci</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/custom-pipe-processing-function">https://github.com/tisnik/message-queues-examples/blob/master/kafka/clojure/custom-pipe-processing-function</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na předchozí části seriálu o programovacím jazyku Clojure</h2>

<ol>

<li>Clojure  1: Úvod<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm/</a>
</li>

<li>Clojure  2: Symboly, kolekce atd.<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-2-cast/</a>
</li>

<li>Clojure  3: Funkcionální programování<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-3-cast-funkcionalni-programovani/</a>
</li>

<li>Clojure  4: Kolekce, sekvence a lazy sekvence<br />
<a href="http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">http://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure  5: Sekvence, lazy sekvence a paralelní programy<br />
<a href="http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">http://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Clojure  6: Podpora pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/">http://www.root.cz/clanky/programovaci-jazyk-clojure-6-futures-nejsou-jen-financni-derivaty/</a>
</li>

<li>Clojure  7: Další funkce pro paralelní programování<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-7-dalsi-podpurne-prostredky-pro-paralelni-programovani/</a>
</li>

<li>Clojure  8: Identity, stavy, neměnné hodnoty a reference<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/">http://www.root.cz/clanky/programovaci-jazyk-clojure-8-identity-stavy-nemenne-hodnoty-a-referencni-typy/</a>
</li>

<li>Clojure  9: Validátory, pozorovatelé a kooperace s Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/">http://www.root.cz/clanky/programovaci-jazyk-clojure-9-validatory-pozorovatele-a-kooperace-mezi-clojure-a-javou/</a>
</li>

<li>Clojure 10: Kooperace mezi Clojure a Javou<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-10-kooperace-mezi-clojure-a-javou-pokracovani/</a>
</li>

<li>Clojure 11: Generátorová notace seznamu/list comprehension<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/">http://www.root.cz/clanky/programovaci-jazyk-clojure-11-generatorova-notace-seznamu-list-comprehension/</a>
</li>

<li>Clojure 12: Překlad programů z Clojure do bajtkódu JVM I:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/">http://www.root.cz/clanky/programovaci-jazyk-clojure-12-preklad-programu-z-clojure-do-bajtkodu-jvm/</a>
</li>

<li>Clojure 13: Překlad programů z Clojure do bajtkódu JVM II:<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/">http://www.root.cz/clanky/programovaci-jazyk-clojure-13-preklad-programu-z-clojure-do-bajtkodu-jvm-pokracovani/</a>
</li>

<li>Clojure 14: Základy práce se systémem maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-14-zaklady-prace-se-systemem-maker/</a>
</li>

<li>Clojure 15: Tvorba uživatelských maker<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/">http://www.root.cz/clanky/programovaci-jazyk-clojure-15-tvorba-uzivatelskych-maker/</a>
</li>

<li>Programovací jazyk Clojure &ndash; triky při práci s řetězci<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-retezci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-retezci/</a>
</li>

<li>Programovací jazyk Clojure &ndash; triky při práci s kolekcemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-kolekcemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-triky-pri-praci-s-kolekcemi/</a>
</li>

<li>Programovací jazyk Clojure &ndash; práce s mapami a množinami<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-prace-s-mapami-a-mnozinami/">http://www.root.cz/clanky/programovaci-jazyk-clojure-prace-s-mapami-a-mnozinami/</a>
</li>

<li>Programovací jazyk Clojure &ndash; základy zpracování XML<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-zaklady-zpracovani-xml/">http://www.root.cz/clanky/programovaci-jazyk-clojure-zaklady-zpracovani-xml/</a>
</li>

<li>Programovací jazyk Clojure &ndash; testování s využitím knihovny Expectations<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/">http://www.root.cz/clanky/programovaci-jazyk-clojure-testovani-s-vyuzitim-knihovny-expectations/</a>
</li>

<li>Programovací jazyk Clojure &ndash; některé užitečné triky použitelné (nejenom) v&nbsp;testech<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/">http://www.root.cz/clanky/programovaci-jazyk-clojure-nektere-uzitecne-triky-pouzitelne-nejenom-v-testech/</a>
</li>

<li>Enlive &ndash; výkonný šablonovací systém pro jazyk Clojure<br/>
<a href="http://www.root.cz/clanky/enlive-vykonny-sablonovaci-system-pro-jazyk-clojure/">http://www.root.cz/clanky/enlive-vykonny-sablonovaci-system-pro-jazyk-clojure/</a>
</li>

<li>Nástroj Leiningen a programovací jazyk Clojure: tvorba vlastních knihoven pro veřejný repositář Clojars<br />
<a href="http://www.root.cz/clanky/nastroj-leiningen-a-programovaci-jazyk-clojure-tvorba-vlastnich-knihoven-pro-verejny-repositar-clojars/">http://www.root.cz/clanky/nastroj-leiningen-a-programovaci-jazyk-clojure-tvorba-vlastnich-knihoven-pro-verejny-repositar-clojars/</a>
</li>

<li>Novinky v Clojure verze 1.8.0<br />
<a href="http://www.root.cz/clanky/novinky-v-clojure-verze-1-8-0/">http://www.root.cz/clanky/novinky-v-clojure-verze-1-8-0/</a>
</li>

<li>Asynchronní programování v&nbsp;Clojure s&nbsp;využitím knihovny core.async<br />
<a href="http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async/">http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async/</a>
</li>

<li>Asynchronní programování v&nbsp;Clojure s&nbsp;využitím knihovny core.async (pokračování)<br />
<a href="http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-pokracovani/">http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-pokracovani/</a>
</li>

<li>Asynchronní programování v Clojure s využitím knihovny core.async (dokončení)<br />
<a href="http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-dokonceni/">http://www.root.cz/clanky/asynchronni-programovani-v-clojure-s-vyuzitim-knihovny-core-async-dokonceni/</a>
</li>

<li>Vytváříme IRC bota v programovacím jazyce Clojure<br />
<a href="http://www.root.cz/clanky/vytvarime-irc-bota-v-programovacim-jazyce-clojure/">http://www.root.cz/clanky/vytvarime-irc-bota-v-programovacim-jazyce-clojure/</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Multimetody v Clojure aneb polymorfismus bez použití OOP<br />
<a href="https://www.root.cz/clanky/multimetody-v-clojure-aneb-polymorfismus-bez-pouziti-oop/">https://www.root.cz/clanky/multimetody-v-clojure-aneb-polymorfismus-bez-pouziti-oop/</a>
</li>

<li>Práce s externími Java archivy v programovacím jazyku Clojure<br />
<a href="https://www.root.cz/clanky/prace-s-externimi-java-archivy-v-programovacim-jazyku-clojure/">https://www.root.cz/clanky/prace-s-externimi-java-archivy-v-programovacim-jazyku-clojure/</a>
</li>

<li>Clojure 16: Složitější uživatelská makra<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/">http://www.root.cz/clanky/programovaci-jazyk-clojure-16-slozitejsi-uzivatelska-makra/</a>
</li>

<li>Clojure 17: Využití standardních maker v praxi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-17-vyuziti-standardnich-maker-v-praxi/</a>
</li>

<li>Clojure 18: Základní techniky optimalizace aplikací<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/">http://www.root.cz/clanky/programovaci-jazyk-clojure-18-zakladni-techniky-optimalizace-aplikaci/</a>
</li>

<li>Clojure 19: Vývojová prostředí pro Clojure<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/">http://www.root.cz/clanky/programovaci-jazyk-clojure-19-vyvojova-prostredi-pro-clojure/</a>
</li>

<li>Clojure 20: Vývojová prostředí pro Clojure (Vimu s REPL)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/">http://www.root.cz/clanky/programovaci-jazyk-clojure-20-vyvojova-prostredi-pro-clojure-integrace-vimu-s-repl/</a>
</li>

<li>Clojure 21: ClojureScript aneb překlad Clojure do JS<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">http://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v&nbsp;Clojure<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v&nbsp;Clojure (2)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-2/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v&nbsp;Clojure (3)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-3/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v&nbsp;Clojure (4)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-4/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v&nbsp;Clojure (5)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-5/</a>
</li>

<li>Leiningen: nástroj pro správu projektů napsaných v&nbsp;Clojure (6)<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-6/</a>
</li>

<li>Programovací jazyk Clojure a databáze (1.část)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-databaze-1-cast/</a>
</li>

<li>Pluginy pro Leiningen<br />
<a href="http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/">http://www.root.cz/clanky/leiningen-nastroj-pro-spravu-projektu-napsanych-v-clojure-pluginy-pro-leiningen/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s&nbsp;vektory a maticemi<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi/</a>
</li>

<li>Programovací jazyk Clojure a knihovny pro práci s&nbsp;vektory a maticemi (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-knihovny-pro-praci-s-vektory-a-maticemi-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s&nbsp;využitím knihovny Clisk<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s&nbsp;využitím knihovny Clisk (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-2/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v&nbsp;jazyce Clojure<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v &nbsp;azyce Clojure (2)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-2/</a>
</li>

<li>Seesaw: knihovna pro snadnou tvorbu GUI v&nbsp;jazyce Clojure (3)<br />
<a href="http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/">http://www.root.cz/clanky/seesaw-knihovna-pro-snadnou-tvorbu-gui-v-jazyce-clojure-3/</a>
</li>

<li>Programovací jazyk Clojure a práce s&nbsp;Gitem<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem/</a>
</li>

<li>Programovací jazyk Clojure a práce s&nbsp;Gitem (2)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/">http://www.root.cz/clanky/programovaci-jazyk-clojure-a-prace-s-gitem-2/</a>
</li>

<li>Programovací jazyk Clojure: syntéza procedurálních textur s&nbsp;využitím knihovny Clisk (dokončení)<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/">http://www.root.cz/clanky/programovaci-jazyk-clojure-synteza-proceduralnich-textur-s-vyuzitim-knihovny-clisk-dokonceni/</a>
</li>

<li>Pixie: lehký skriptovací jazyk s&nbsp;„kouzelnými“ schopnostmi<br />
<a href="https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/">https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/</a>
</li>

<li>Programovací jazyk Pixie: funkce ze základní knihovny a použití FFI<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/">https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/</a>
</li>

<li>Novinky v&nbsp;Clojure verze 1.9.0<br />
<a href="https://www.root.cz/clanky/novinky-v-clojure-verze-1-9-0/">https://www.root.cz/clanky/novinky-v-clojure-verze-1-9-0/</a>
</li>

<li>Validace dat s&nbsp;využitím knihovny spec v&nbsp;Clojure 1.9.0<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v&nbsp;Clojure<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure/</a>
</li>

<li>Použití jazyka Gherkin při tvorbě testovacích scénářů pro aplikace psané v&nbsp;Clojure (2)<br />
<a href="https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/">https://www.root.cz/clanky/pouziti-jazyka-gherkin-pri-tvorbe-testovacich-scenaru-pro-aplikace-psane-v-nbsp-clojure-2/</a>
</li>

<li>Incanter: prostředí pro statistické výpočty s grafickým výstupem založené na Clojure<br />
<a href="https://www.root.cz/clanky/incanter-prostredi-pro-statisticke-vypocty-s-grafickym-vystupem-zalozene-na-clojure/">https://www.root.cz/clanky/incanter-prostredi-pro-statisticke-vypocty-s-grafickym-vystupem-zalozene-na-clojure/</a>
</li>

<li>Incanter: operace s&nbsp;maticemi<br />
<a href="https://www.root.cz/clanky/incanter-operace-s-maticemi/">https://www.root.cz/clanky/incanter-operace-s-maticemi/</a>
</li>

<li>Interpret programovacího jazyka Clojure integrovaný do Jupyter Notebooku<br />
<a href="https://www.root.cz/clanky/interpret-programovaciho-jazyka-clojure-integrovany-do-jupyter-notebooku/">https://www.root.cz/clanky/interpret-programovaciho-jazyka-clojure-integrovany-do-jupyter-notebooku/</a>
</li>

<li>Babashka: interpret Clojure určený pro rychlé spouštění utilit z&nbsp;příkazového řádku<br />
<a href="https://www.root.cz/clanky/babashka-interpret-clojure-urceny-pro-rychle-spousteni-utilit-z-prikazoveho-radku/">https://www.root.cz/clanky/babashka-interpret-clojure-urceny-pro-rychle-spousteni-utilit-z-prikazoveho-radku/</a>
</li>

<li>Pokročilý streaming založený na Apache Kafce, jazyku Clojure a knihovně Jackdaw<br />
<a href="https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw/">https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw/</a>
</li>

<li>Pokročilý streaming založený na Apache Kafce, jazyku Clojure a knihovně Jackdaw (2. část)<br />
<a href="https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw-2-cast/">https://www.root.cz/clanky/pokrocily-streaming-zalozeny-na-apache-kafce-jazyku-clojure-a-knihovne-jackdaw-2-cast/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Learn Clojure - Flow Control<br />
<a href="https://clojure.org/guides/learn/flow">https://clojure.org/guides/learn/flow</a>
</li>

<li>ETL Batch Processing With Kafka?<br />
<a href="https://medium.com/swlh/etl-batch-processing-with-kafka-7f66f843e20d">https://medium.com/swlh/etl-batch-processing-with-kafka-7f66f843e20d</a>
</li>

<li>ETL with Kafka<br />
<a href="https://blog.codecentric.de/en/2018/03/etl-kafka/">https://blog.codecentric.de/en/2018/03/etl-kafka/</a>
</li>

<li>Building ETL Pipelines with Clojure and Transducers<br />
<a href="https://www.grammarly.com/blog/engineering/building-etl-pipelines-with-clojure-and-transducers/">https://www.grammarly.com/blog/engineering/building-etl-pipelines-with-clojure-and-transducers/</a>
</li>

<li>pipeline (možné použít pro ETL)<br />
<a href="https://clojuredocs.org/clojure.core.async/pipeline">https://clojuredocs.org/clojure.core.async/pipeline</a>
</li>

<li>On Track with Apache Kafka – Building a Streaming ETL Solution with Rail Data<br />
<a href="https://www.confluent.io/blog/build-streaming-etl-solutions-with-kafka-and-rail-data/">https://www.confluent.io/blog/build-streaming-etl-solutions-with-kafka-and-rail-data/</a>
</li>

<li>Kafka - Understanding Offset Commits<br />
<a href="https://www.logicbig.com/tutorials/misc/kafka/committing-offsets.html">https://www.logicbig.com/tutorials/misc/kafka/committing-offsets.html</a>
</li>

<li>fundingcircle/jackdaw (na Clojars)<br />
<a href="https://clojars.org/fundingcircle/jackdaw/versions/0.7.6">https://clojars.org/fundingcircle/jackdaw/versions/0.7.6</a>
</li>

<li>Dokumentace ke knihovně jackdaw<br />
<a href="https://cljdoc.org/d/fundingcircle/jackdaw/0.7.6/doc/readme">https://cljdoc.org/d/fundingcircle/jackdaw/0.7.6/doc/readme</a>
</li>

<li>Jackdaw AdminClient API<br />
<a href="https://cljdoc.org/d/fundingcircle/jackdaw/0.7.6/doc/jackdaw-adminclient-api">https://cljdoc.org/d/fundingcircle/jackdaw/0.7.6/doc/jackdaw-adminclient-api</a>
</li>

<li>Jackdaw Client API<br />
<a href="https://cljdoc.org/d/fundingcircle/jackdaw/0.7.6/doc/jackdaw-client-api">https://cljdoc.org/d/fundingcircle/jackdaw/0.7.6/doc/jackdaw-client-api</a>
</li>

<li>Kafka.clj<br />
<a href="https://github.com/helins-io/kafka.clj">https://github.com/helins-io/kafka.clj</a>
</li>

<li>Použití nástroje Apache Kafka v aplikacích založených na mikroslužbách<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-apache-kafka-v-aplikacich-zalozenych-na-mikrosluzbach/">https://www.root.cz/clanky/pouziti-nastroje-apache-kafka-v-aplikacich-zalozenych-na-mikrosluzbach/</a>
</li>

<li>Apache Kafka: distribuovaná streamovací platforma<br />
<a href="https://www.root.cz/clanky/apache-kafka-distribuovana-streamovaci-platforma/">https://www.root.cz/clanky/apache-kafka-distribuovana-streamovaci-platforma/</a>
</li>

<li>Real-Time Payments with Clojure and Apache Kafka (podcast)<br />
<a href="https://www.evidentsystems.com/news/confluent-podcast-about-apache-kafka/">https://www.evidentsystems.com/news/confluent-podcast-about-apache-kafka/</a>
</li>

<li>Kafka and Clojure - Immutable event streams<br />
<a href="https://practicalli.github.io/kafka-and-clojure/">https://practicalli.github.io/kafka-and-clojure/</a>
</li>

<li>Kafka Streams, the Clojure way<br />
<a href="https://blog.davemartin.me/posts/kafka-streams-the-clojure-way/">https://blog.davemartin.me/posts/kafka-streams-the-clojure-way/</a>
</li>

<li>dvlopt.kafka na GitHubu<br />
<a href="https://github.com/helins-io/kafka.clj">https://github.com/helins-io/kafka.clj</a>
</li>

<li>kafka-streams-the-clojure-way na GitHubu<br />
<a href="https://github.com/DaveWM/kafka-streams-the-clojure-way">https://github.com/DaveWM/kafka-streams-the-clojure-way</a>
</li>

<li>babashka: A Clojure babushka for the grey areas of Bash<br />
<a href="https://github.com/borkdude/babashka">https://github.com/borkdude/babashka</a>
</li>

<li>Babashka and the Small Clojure Interpreter @ ClojureD 2020 (slajdy)<br />
<a href="https://speakerdeck.com/borkdude/babashka-and-the-small-clojure-interpreter-at-clojured-2020">https://speakerdeck.com/borkdude/babashka-and-the-small-clojure-interpreter-at-clojured-2020</a>
</li>

<li>Babashka: ukázky použití<br />
<a href="https://github.com/borkdude/babashka/blob/master/doc/examples.md">https://github.com/borkdude/babashka/blob/master/doc/examples.md</a>
</li>

<li>clojureD 2020: "Babashka and Small Clojure Interpreter: Clojure in new contexts" by Michiel Borkent<br />
<a href="https://www.youtube.com/watch?v=Nw8aN-nrdEk&amp;t=5s">https://www.youtube.com/watch?v=Nw8aN-nrdEk&amp;t=5s</a>
</li>

<li>Meetup #124 Babashka, implementing an nREPL server &amp; game engines with Clojure<br />
<a href="https://www.youtube.com/watch?v=0YmZYnwyHHc">https://www.youtube.com/watch?v=0YmZYnwyHHc</a>
</li>

<li>The Last Programming Language (shrnutí vývoje programovacích jazyků)<br />
<a href="https://www.youtube.com/watch?v=P2yr-3F6PQo">https://www.youtube.com/watch?v=P2yr-3F6PQo</a>
</li>

<li>Shebang (Unix): Wikipedia EN<br />
<a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">https://en.wikipedia.org/wiki/Shebang_(Unix)</a>
</li>

<li>Shebang (Unix): Wikipedia CZ<br />
<a href="https://cs.wikipedia.org/wiki/Shebang_(Unix)">https://cs.wikipedia.org/wiki/Shebang_(Unix)</a>
</li>

<li>How to create Clojure notebooks in Jupyter<br />
<a href="https://s01blog.wordpress.com/2017/12/10/how-to-create-clojure-notebooks-in-jupyter/">https://s01blog.wordpress.com/2017/12/10/how-to-create-clojure-notebooks-in-jupyter/</a>
</li>

<li>Dokumentace k&nbsp;nástroji Conda<br />
<a href="https://docs.conda.io/en/latest/">https://docs.conda.io/en/latest/</a>
</li>

<li>Notebook interface<br />
<a href="https://en.wikipedia.org/wiki/Notebook_interface">https://en.wikipedia.org/wiki/Notebook_interface</a>
</li>

<li>Jypyter: open source, interactive data science and scientific computing across over 40 programming languages<br />
<a href="https://jupyter.org/">https://jupyter.org/</a>
</li>

<li>Calysto Scheme<br />
<a href="https://github.com/Calysto/calysto_scheme">https://github.com/Calysto/calysto_scheme</a>
</li>

<li>scheme.py (základ projektu Calysto Scheme)<br />
<a href="https://github.com/Calysto/calysto_scheme/blob/master/calysto_scheme/scheme.py">https://github.com/Calysto/calysto_scheme/blob/master/calysto_scheme/scheme.py</a>
</li>

<li>Humane test output for clojure.test<br />
<a href="https://github.com/pjstadig/humane-test-output">https://github.com/pjstadig/humane-test-output</a>
</li>

<li>iota<br />
<a href="https://github.com/juxt/iota">https://github.com/juxt/iota</a>
</li>

<li>5 Differences between clojure.spec and Schema<br />
<a href="https://lispcast.com/clojure.spec-vs-schema/">https://lispcast.com/clojure.spec-vs-schema/</a>
</li>

<li>Schema: Clojure(Script) library for declarative data description and validation<br />
<a href="https://github.com/plumatic/schema">https://github.com/plumatic/schema</a>
</li>

<li>Zip archiv s&nbsp;Clojure 1.9.0<br />
<a href="http://repo1.maven.org/maven2/org/clojure/clojure/1.9.0/clojure-1.9.0.zip">http://repo1.maven.org/maven2/org/clojure/clojure/1.9.0/clojure-1.9.0.zip</a>
</li>

<li>Clojure 1.9 is now available<br />
<a href="https://clojure.org/news/2017/12/08/clojure19">https://clojure.org/news/2017/12/08/clojure19</a>
</li>

<li>Deps and CLI Guide<br />
<a href="https://clojure.org/guides/deps_and_cli">https://clojure.org/guides/deps_and_cli</a>
</li>

<li>Changes to Clojure in Version 1.9<br />
<a href="https://github.com/clojure/clojure/blob/master/changes.md">https://github.com/clojure/clojure/blob/master/changes.md</a>
</li>

<li>clojure.spec - Rationale and Overview<br />
<a href="https://clojure.org/about/spec">https://clojure.org/about/spec</a>
</li>

<li>Zip archiv s&nbsp;Clojure 1.8.0<br />
<a href="http://repo1.maven.org/maven2/org/clojure/clojure/1.8.0/clojure-1.8.0.zip">http://repo1.maven.org/maven2/org/clojure/clojure/1.8.0/clojure-1.8.0.zip</a>
</li>

<li>Clojure 1.8 is now available<br />
<a href="http://clojure.org/news/2016/01/19/clojure18">http://clojure.org/news/2016/01/19/clojure18</a>
</li>

<li>Socket Server REPL<br />
<a href="http://dev.clojure.org/display/design/Socket+Server+REPL">http://dev.clojure.org/display/design/Socket+Server+REPL</a>
</li>

<li>CLJ-1671: Clojure socket server<br />
<a href="http://dev.clojure.org/jira/browse/CLJ-1671">http://dev.clojure.org/jira/browse/CLJ-1671</a>
</li>

<li>CLJ-1449: Add clojure.string functions for portability to ClojureScript<br />
<a href="http://dev.clojure.org/jira/browse/CLJ-1449">http://dev.clojure.org/jira/browse/CLJ-1449</a>
</li>

<li>Launching a Socket Server<br />
<a href="http://clojure.org/reference/repl_and_main#_launching_a_socket_server">http://clojure.org/reference/repl_and_main#_launching_a_socket_server</a>
</li>

<li>API for clojure.string<br />
<a href="http://clojure.github.io/clojure/branch-master/clojure.string-api.html">http://clojure.github.io/clojure/branch-master/clojure.string-api.html</a>
</li>

<li>Clojars:<br />
<a href="https://clojars.org/">https://clojars.org/</a>
</li>

<li>Seznam knihoven na Clojars:<br />
<a href="https://clojars.org/projects">https://clojars.org/projects</a>
</li>

<li>Clojure Cookbook: Templating HTML with Enlive<br />
<a href="https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc">https://github.com/clojure-cookbook/clojure-cookbook/blob/master/07_webapps/7-11_enlive.asciidoc</a>
</li>

<li>An Introduction to Enlive<br />
<a href="https://github.com/swannodette/enlive-tutorial/">https://github.com/swannodette/enlive-tutorial/</a>
</li>

<li>Enlive na GitHubu<br />
<a href="https://github.com/cgrand/enlive">https://github.com/cgrand/enlive</a>
</li>

<li>Expectations: příklady atd.<br />
<a href="http://jayfields.com/expectations/">http://jayfields.com/expectations/</a>
</li>

<li>Expectations na GitHubu<br />
<a href="https://github.com/jaycfields/expectations">https://github.com/jaycfields/expectations</a>
</li>

<li>Lein-expectations na GitHubu<br />
<a href="https://github.com/gar3thjon3s/lein-expectations">https://github.com/gar3thjon3s/lein-expectations</a>
</li>

<li>Testing Clojure With Expectations<br />
<a href="https://semaphoreci.com/blog/2014/09/23/testing-clojure-with-expectations.html">https://semaphoreci.com/blog/2014/09/23/testing-clojure-with-expectations.html</a>
</li>

<li>Clojure testing TDD/BDD libraries: clojure.test vs Midje vs Expectations vs Speclj<br />
<a href="https://www.reddit.com/r/Clojure/comments/1viilt/clojure_testing_tddbdd_libraries_clojuretest_vs/">https://www.reddit.com/r/Clojure/comments/1viilt/clojure_testing_tddbdd_libraries_clojuretest_vs/</a>
</li>

<li>Testing: One assertion per test<br />
<a href="http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html">http://blog.jayfields.com/2007/06/testing-one-assertion-per-test.html</a>
</li>

<li>Rewriting Your Test Suite in Clojure in 24 hours<br />
<a href="http://blog.circleci.com/rewriting-your-test-suite-in-clojure-in-24-hours/">http://blog.circleci.com/rewriting-your-test-suite-in-clojure-in-24-hours/</a>
</li>

<li>Clojure doc: zipper<br />
<a href="http://clojuredocs.org/clojure.zip/zipper">http://clojuredocs.org/clojure.zip/zipper</a>
</li>

<li>Clojure doc: parse<br />
<a href="http://clojuredocs.org/clojure.xml/parse">http://clojuredocs.org/clojure.xml/parse</a>
</li>

<li>Clojure doc: xml-zip<br />
<a href="http://clojuredocs.org/clojure.zip/xml-zip">http://clojuredocs.org/clojure.zip/xml-zip</a>
</li>

<li>Clojure doc: xml-seq<br />
<a href="http://clojuredocs.org/clojure.core/xml-seq">http://clojuredocs.org/clojure.core/xml-seq</a>
</li>

<li>Parsing XML in Clojure<br />
<a href="https://github.com/clojuredocs/guides">https://github.com/clojuredocs/guides</a>
</li>

<li>Clojure Zipper Over Nested Vector<br />
<a href="https://vitalyper.wordpress.com/2010/11/23/clojure-zipper-over-nested-vector/">https://vitalyper.wordpress.com/2010/11/23/clojure-zipper-over-nested-vector/</a>
</li>

<li>Understanding Clojure's PersistentVector implementation<br />
<a href="http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation">http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation</a>
</li>

<li>Understanding Clojure's PersistentHashMap (deftwice...)<br />
<a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice.html">http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice.html</a>
</li>

<li>Assoc and Clojure's PersistentHashMap: part ii<br />
<a href="http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii.html">http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii.html</a>
</li>

<li>Ideal Hashtrees (paper)<br />
<a href="http://lampwww.epfl.ch/papers/idealhashtrees.pdf">http://lampwww.epfl.ch/papers/idealhashtrees.pdf</a>
</li>

<li>4Clojure<br />
<a href="http://www.4clojure.com/">http://www.4clojure.com/</a>
</li>

<li>ClojureDoc (rozcestník s&nbsp;dokumentací jazyka Clojure)<br />
<a href="http://clojuredocs.org/">http://clojuredocs.org/</a>
</li>

<li>Clojure (na Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Clojure">http://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Clojure (na Wikipedia CS)<br />
<a href="http://cs.wikipedia.org/wiki/Clojure">http://cs.wikipedia.org/wiki/Clojure</a>
</li>

<li>SICP (The Structure and Interpretation of Computer Programs)<br />
<a href="http://mitpress.mit.edu/sicp/">http://mitpress.mit.edu/sicp/</a>
</li>

<li>Pure function<br />
<a href="http://en.wikipedia.org/wiki/Pure_function">http://en.wikipedia.org/wiki/Pure_function</a>
</li>

<li>Funkcionální programování<br />
<a href="http://cs.wikipedia.org/wiki/Funkcionální_programování">http://cs.wikipedia.org/wiki/Funkcionální_programování</a>
</li>

<li>Čistě funkcionální (datové struktury, jazyky, programování)<br />
<a href="http://cs.wikipedia.org/wiki/Čistě_funkcionální">http://cs.wikipedia.org/wiki/Čistě_funkcionální</a>
</li>

<li>Clojure Macro Tutorial (Part I, Getting the Compiler to Write Your Code For You)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html</a>
</li>

<li>Clojure Macro Tutorial (Part II: The Compiler Strikes Back)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html</a>
</li>

<li>Clojure Macro Tutorial (Part III: Syntax Quote)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html</a>
</li>

<li>Tech behind Tech: Clojure Macros Simplified<br />
<a href="http://techbehindtech.com/2010/09/28/clojure-macros-simplified/">http://techbehindtech.com/2010/09/28/clojure-macros-simplified/</a>
</li>

<li>Fatvat - Exploring functional programming: Clojure Macros<br />
<a href="http://www.fatvat.co.uk/2009/02/clojure-macros.html">http://www.fatvat.co.uk/2009/02/clojure-macros.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>
