<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Přepínací tlačítka (radio buttons)</a></p>
<p><a href="#k02">*** 2. Chování jediného přepínacího tlačítka v&nbsp;okně/dialogu</a></p>
<p><a href="#k03">*** 3. První demonstrační příklad</a></p>
<p><a href="#k04">*** 4. Použití přepínacích tlačítek, které nejsou sdruženy do jediné skupiny</a></p>
<p><a href="#k05">*** 5. Druhý demonstrační příklad</a></p>
<p><a href="#k06">*** 6. Vypnutí režimu automatického sdružování přepínacích tlačítek do jedné skupiny</a></p>
<p><a href="#k07">*** 7. Třetí demonstrační příklad</a></p>
<p><a href="#k08">*** 8. Vytvoření explicitních skupin tlačítek</a></p>
<p><a href="#k09">*** 9. Čtvrtý demonstrační příklad</a></p>
<p><a href="#k10">*** 10. Použití klávesových zkratek namísto myši při přístupu ke standardním widgetům</a></p>
<p><a href="#k11">*** 11. Pátý demonstrační příklad</a></p>
<p><a href="#k12">*** 12. Explicitní klávesové zkratky (Ctrl+?, Shift+?, Alt+?)</a></p>
<p><a href="#k13">*** 13. Šestý demonstrační příklad</a></p>
<p><a href="#k14">*** 14. Třída <strong>QMainWindow</strong> a její odlišnosti od <strong>QWidget</strong></a></p>
<p><a href="#k15">*** 15. Zobrazení hlavního okna</a></p>
<p><a href="#k16">*** 16. Přidání tlačítka do centrální části hlavního okna</a></p>
<p><a href="#k17">*** 17. Lepší přístup &ndash; odvození vlastního widgetu pro centrální část hlavního okna</a></p>
<p><a href="#k18">*** 18. Složitější layout komponent, stavový řádek a další vylepšení</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Přepínací tlačítka (radio buttons)</h2>

<p><a
href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-dalsi-dostupne-ovladaci-prvky/">Minule</a>
jsme si popsali způsob práce se standardními tlačítky představovanými třídou
<strong>QPushButton</strong> (popř.&nbsp;jejími potomky) a taktéž se
zaškrtávacími tlačítky, které jsou v&nbsp;knihovně <i>PySide</i> představována
třídou <strong>QCheckBox</strong>. Připomeňme si jen, že zaškrtávací tlačítka
mohou být použita pro výběr ze dvou či ze tří stavů a že je možné je spojovat
do skupin, v&nbsp;nichž je možné zaškrtnout pouze jediné tlačítko. A právě přes
tuto vlastnost se dostáváme ke třetí variantě tlačítka. Touto variantou je
přepínač neboli <i>radio button</i>. Jedná se o zcela běžný prvek grafických
uživatelských rozhraní, který se používá především ve chvíli, kdy je nutné
zajistit, aby byl vybrán jen jediný prvek z&nbsp;dané množiny <i>n</i> prvků.
Množina voleb by jen měla být dostatečně malá a ideálně předem známá, jinak je
výhodnější použít widget typu seznam.</p>

<img src="https://i.iinfo.cz/images/465/tkinter4-2.png" class="image-299730" alt="&#160;" width="230" height="193" />
<p><i>Obrázek 1: Se skupinami přepínacích tlačítek jsme se již setkali při
popisu možností knihovny Tkinter.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Chování jediného přepínacího tlačítka v&nbsp;okně/dialogu</h2>

<p>Přepínací tlačítka se typicky a v&nbsp;naprosté většině případů spojují do
skupin, ovšem v&nbsp;extrémním případě může skupina obsahovat jen jediné
tlačítko. Zajímavé je, že při použití jediného přepínacího tlačítka se různé
toolkity (knihovny a frameworky pro tvorbu grafického uživatelského rozhraní)
chovají odlišně. Nejprve si ukažme chování standardního Pythonovského GUI
toolkitu, tedy knihovny <i>Tkinter</i>. Aplikace s&nbsp;oknem, v&nbsp;němž je
(kromě dalších ovládacích prvků) jen jediné přepínací tlačítko, vypadá
následovně:</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("Single radio button")
&nbsp;
        <i># testovací přepínací tlačítko</i>
        self.testRadioButton = QtGui.QRadioButton("radio button")
&nbsp;
        <i># tlačítko pro zjištění stavů přepínačů</i>
        testButton = QtGui.QPushButton("Print state")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testRadioButton)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState(self):</strong>
        print("-" * 50)
        MainWindow.printStateForRadioButton("radio button", self.testRadioButton)
&nbsp;
    @staticmethod
    def <strong>printStateForRadioButton(name, radioButton):</strong>
        state = "checked" if radioButton.isChecked() else "unchecked"
        print("Radio button {name} is {state}".format(name=name, state=state))
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit(self):</strong>
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Použití přepínacích tlačítek, které nejsou sdruženy do jediné skupiny</h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. Druhý demonstrační příklad</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget)</strong>:
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("Six radio buttons")
&nbsp;
        <i># testovací přepínací tlačítka</i>
        self.testRadioButton1 = QtGui.QRadioButton("radio button #1")
        self.testRadioButton2 = QtGui.QRadioButton("radio button #2")
        self.testRadioButton3 = QtGui.QRadioButton("radio button #3")
        self.testRadioButton4 = QtGui.QRadioButton("radio button #4")
        self.testRadioButton5 = QtGui.QRadioButton("radio button #5")
        self.testRadioButton6 = QtGui.QRadioButton("radio button #6")
&nbsp;
        <i># které tlačítko bude vybráno</i>
        self.testRadioButton3.setChecked(True)
&nbsp;
        <i># tlačítko pro zjištění stavů přepínačů</i>
        testButton = QtGui.QPushButton("Print state")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testRadioButton1)
        layout.addWidget(self.testRadioButton2)
        layout.addWidget(self.testRadioButton3)
        layout.addWidget(self.testRadioButton4)
        layout.addWidget(self.testRadioButton5)
        layout.addWidget(self.testRadioButton6)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState</strong>(self):
        print("-" * 50)
        MainWindow.printStateForRadioButton("#1", self.testRadioButton1)
        MainWindow.printStateForRadioButton("#2", self.testRadioButton2)
        MainWindow.printStateForRadioButton("#3", self.testRadioButton3)
        MainWindow.printStateForRadioButton("#4", self.testRadioButton4)
        MainWindow.printStateForRadioButton("#5", self.testRadioButton5)
        MainWindow.printStateForRadioButton("#6", self.testRadioButton6)
&nbsp;
    @staticmethod
    def <strong>printStateForRadioButton</strong>(name, radioButton):
        state = "checked" if radioButton.isChecked() else "unchecked"
        print("Radio button {name} is {state}".format(name=name, state=state))
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit</strong>(self):
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vypnutí režimu automatického sdružování přepínacích tlačítek do jedné skupiny</h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. Třetí demonstrační příklad</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindow(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("Non exclusive selection")
&nbsp;
        <i># testovací přepínací tlačítka</i>
        self.testRadioButton1 = QtGui.QRadioButton("radio button #1")
        self.testRadioButton2 = QtGui.QRadioButton("radio button #2")
        self.testRadioButton3 = QtGui.QRadioButton("radio button #3")
        self.testRadioButton4 = QtGui.QRadioButton("radio button #4")
        self.testRadioButton5 = QtGui.QRadioButton("radio button #5")
        self.testRadioButton6 = QtGui.QRadioButton("radio button #6")
&nbsp;
        <i># první tři tlačítka nebudou automaticky přidána do společné skupiny</i>
        self.testRadioButton1.setAutoExclusive(False)
        self.testRadioButton2.setAutoExclusive(False)
        self.testRadioButton3.setAutoExclusive(False)
&nbsp;
        <i># tlačítko pro zjištění stavů přepínačů</i>
        testButton = QtGui.QPushButton("Print state")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># horizontální oddělovač</i>
        horizontalLine = QtGui.QLabel()
        horizontalLine.setFrameStyle(QtGui.QFrame.HLine)
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testRadioButton1)
        layout.addWidget(self.testRadioButton2)
        layout.addWidget(self.testRadioButton3)
        layout.addWidget(horizontalLine)
        layout.addWidget(self.testRadioButton4)
        layout.addWidget(self.testRadioButton5)
        layout.addWidget(self.testRadioButton6)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState(self):</strong>
        print("-" * 50)
        MainWindow.printStateForRadioButton("#1", self.testRadioButton1)
        MainWindow.printStateForRadioButton("#2", self.testRadioButton2)
        MainWindow.printStateForRadioButton("#3", self.testRadioButton3)
        MainWindow.printStateForRadioButton("#4", self.testRadioButton4)
        MainWindow.printStateForRadioButton("#5", self.testRadioButton5)
        MainWindow.printStateForRadioButton("#6", self.testRadioButton6)
&nbsp;
    @staticmethod
    def <strong>printStateForRadioButton(name, radioButton):</strong>
        state = "checked" if radioButton.isChecked() else "unchecked"
        print("Radio button {name} is {state}".format(name=name, state=state))
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit(self):</strong>
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vytvoření explicitních skupin tlačítek</h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. Čtvrtý demonstrační příklad</h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# import "jádra" frameworku Qt i modulu pro GUI
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného widgetu
class <strong>MainWindow(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("Custom radio button groups")
&nbsp;
        <i># dvě explicitní skupiny tlačítek</i>
        self.buttonGroup1and2 = QtGui.QButtonGroup()
        self.buttonGroup3and4 = QtGui.QButtonGroup()
&nbsp;
        <i># chování tlačítek ve skupinách</i>
        self.buttonGroup1and2.setExclusive(True)
        self.buttonGroup3and4.setExclusive(True)
&nbsp;
        <i># testovací přepínací tlačítka</i>
        self.testRadioButton1 = QtGui.QRadioButton("radio button #1")
        self.testRadioButton2 = QtGui.QRadioButton("radio button #2")
        self.testRadioButton3 = QtGui.QRadioButton("radio button #3")
        self.testRadioButton4 = QtGui.QRadioButton("radio button #4")
        self.testRadioButton5 = QtGui.QRadioButton("radio button #5")
        self.testRadioButton6 = QtGui.QRadioButton("radio button #6")
&nbsp;
        <i># přidání přepínacích tlačítek do skupin</i>
        self.buttonGroup1and2.addButton(self.testRadioButton1)
        self.buttonGroup1and2.addButton(self.testRadioButton2)
        self.buttonGroup3and4.addButton(self.testRadioButton3)
        self.buttonGroup3and4.addButton(self.testRadioButton4)
&nbsp;
        <i># tlačítko pro zjištění stavů přepínačů</i>
        testButton = QtGui.QPushButton("Print state")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># horizontální oddělovače</i>
        horizontalLine1 = QtGui.QLabel()
        horizontalLine1.setFrameStyle(QtGui.QFrame.HLine)
        horizontalLine2 = QtGui.QLabel()
        horizontalLine2.setFrameStyle(QtGui.QFrame.HLine)
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testRadioButton1)
        layout.addWidget(self.testRadioButton2)
        layout.addWidget(horizontalLine1)
        layout.addWidget(self.testRadioButton3)
        layout.addWidget(self.testRadioButton4)
        layout.addWidget(horizontalLine2)
        layout.addWidget(self.testRadioButton5)
        layout.addWidget(self.testRadioButton6)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState(self):</strong>
        print("-" * 50)
        MainWindow.printStateForRadioButton("#1", self.testRadioButton1)
        MainWindow.printStateForRadioButton("#2", self.testRadioButton2)
        MainWindow.printStateForRadioButton("#3", self.testRadioButton3)
        MainWindow.printStateForRadioButton("#4", self.testRadioButton4)
        MainWindow.printStateForRadioButton("#5", self.testRadioButton5)
        MainWindow.printStateForRadioButton("#6", self.testRadioButton6)
&nbsp;
    @staticmethod
    def <strong>printStateForRadioButton(name, radioButton):</strong>
        state = "checked" if radioButton.isChecked() else "unchecked"
        print("Radio button {name} is {state}".format(name=name, state=state))
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit(self):</strong>
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Použití klávesových zkratek namísto myši při přístupu ke standardním widgetům</h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. Pátý demonstrační příklad</h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# import "jádra" frameworku Qt i modulu pro GUI
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného widgetu
class <strong>MainWindow(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("Shortcuts")
&nbsp;
        <i># testovací zaškrtávací tlačítka</i>
        self.testCheckBox1 = QtGui.QCheckBox("check box &x")
        self.testCheckBox2 = QtGui.QCheckBox("check box &y")
        self.testCheckBox3 = QtGui.QCheckBox("check box &z")
        self.testCheckBox1.setCheckState(QtCore.Qt.Unchecked)
        self.testCheckBox2.setCheckState(QtCore.Qt.Checked)
        self.testCheckBox3.setCheckState(QtCore.Qt.Unchecked)
&nbsp;
        <i># testovací přepínací tlačítka</i>
        self.testRadioButton1 = QtGui.QRadioButton("radio button &a")
        self.testRadioButton2 = QtGui.QRadioButton("radio button &b")
        self.testRadioButton3 = QtGui.QRadioButton("radio button &c")
        self.testRadioButton2.setChecked(True)
&nbsp;
        <i># tlačítko pro zjištění stavů přepínačů</i>
        testButton = QtGui.QPushButton("&Print state")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("&Quit")
&nbsp;
        <i># horizontální oddělovače</i>
        horizontalLine1 = QtGui.QLabel()
        horizontalLine1.setFrameStyle(QtGui.QFrame.HLine)
        horizontalLine2 = QtGui.QLabel()
        horizontalLine2.setFrameStyle(QtGui.QFrame.HLine)
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testRadioButton1)
        layout.addWidget(self.testRadioButton2)
        layout.addWidget(self.testRadioButton3)
        layout.addWidget(horizontalLine1)
        layout.addWidget(self.testCheckBox1)
        layout.addWidget(self.testCheckBox2)
        layout.addWidget(self.testCheckBox3)
        layout.addWidget(horizontalLine2)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState(self):</strong>
        print("-" * 50)
        MainWindow.printStateForRadioButton("#1", self.testRadioButton1)
        MainWindow.printStateForRadioButton("#2", self.testRadioButton2)
        MainWindow.printStateForRadioButton("#3", self.testRadioButton3)
        MainWindow.printStateForCheckbox("#1", self.testCheckBox1)
        MainWindow.printStateForCheckbox("#2", self.testCheckBox2)
        MainWindow.printStateForCheckbox("#3", self.testCheckBox3)
&nbsp;
    @staticmethod
    def <strong>printStateForCheckbox(name, checkbox):</strong>
        state = "checked" if checkbox.isChecked() else "unchecked"
        print("Checkbox {name} is {state}".format(name=name, state=state))
&nbsp;
    @staticmethod
    def <strong>printStateForRadioButton(name, radioButton):</strong>
        state = "checked" if radioButton.isChecked() else "unchecked"
        print("Radio button {name} is {state}".format(name=name, state=state))
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit(self):</strong>
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Explicitní klávesové zkratky (Ctrl+?, Shift+?, Alt+?)</h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Šestý demonstrační příklad</h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# import "jádra" frameworku Qt i modulu pro GUI
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného widgetu
class <strong>MainWindow(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("Custom shortcuts")
&nbsp;
        <i># testovací zaškrtávací tlačítka</i>
        self.testCheckBox1 = QtGui.QCheckBox("check box x (F1)")
        self.testCheckBox2 = QtGui.QCheckBox("check box y (F2)")
        self.testCheckBox3 = QtGui.QCheckBox("check box z (F3)")
        self.testCheckBox1.setCheckState(QtCore.Qt.Unchecked)
        self.testCheckBox2.setCheckState(QtCore.Qt.Checked)
        self.testCheckBox3.setCheckState(QtCore.Qt.Unchecked)
&nbsp;
        <i># testovací přepínací tlačítka</i>
        self.testRadioButton1 = QtGui.QRadioButton("radio button a (Ctrl+A)")
        self.testRadioButton2 = QtGui.QRadioButton("radio button b (Ctrl+B)")
        self.testRadioButton3 = QtGui.QRadioButton("radio button c (Ctrl+C)")
        self.testRadioButton2.setChecked(True)
&nbsp;
        <i># tlačítko pro zjištění stavů přepínačů</i>
        testButton = QtGui.QPushButton("Print state (Shift+P)")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit (Esc)")
&nbsp;
        <i># klávesové zkratky</i>
        self.testRadioButton1.setShortcut(QtGui.QKeySequence("Ctrl+A"))
        self.testRadioButton2.setShortcut(QtGui.QKeySequence("Ctrl+B"))
        self.testRadioButton3.setShortcut(QtGui.QKeySequence("Ctrl+C"))
&nbsp;
        self.testCheckBox1.setShortcut(QtGui.QKeySequence("F1"))
        self.testCheckBox2.setShortcut(QtGui.QKeySequence("F2"))
        self.testCheckBox3.setShortcut(QtGui.QKeySequence("F3"))
&nbsp;
        testButton.setShortcut(QtGui.QKeySequence("Shift+P"))
        quitButton.setShortcut(QtGui.QKeySequence("Esc"))
&nbsp;
        <i># horizontální oddělovače</i>
        horizontalLine1 = QtGui.QLabel()
        horizontalLine1.setFrameStyle(QtGui.QFrame.HLine)
        horizontalLine2 = QtGui.QLabel()
        horizontalLine2.setFrameStyle(QtGui.QFrame.HLine)
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.testRadioButton1)
        layout.addWidget(self.testRadioButton2)
        layout.addWidget(self.testRadioButton3)
        layout.addWidget(horizontalLine1)
        layout.addWidget(self.testCheckBox1)
        layout.addWidget(self.testCheckBox2)
        layout.addWidget(self.testCheckBox3)
        layout.addWidget(horizontalLine2)
        layout.addWidget(testButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># po stisku testovacího tlačítka se zavolá metoda</i>
        testButton.clicked.connect(self.printState)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>printState(self):</strong>
        print("-" * 50)
        MainWindow.printStateForRadioButton("#1", self.testRadioButton1)
        MainWindow.printStateForRadioButton("#2", self.testRadioButton2)
        MainWindow.printStateForRadioButton("#3", self.testRadioButton3)
        MainWindow.printStateForCheckbox("#1", self.testCheckBox1)
        MainWindow.printStateForCheckbox("#2", self.testCheckBox2)
        MainWindow.printStateForCheckbox("#3", self.testCheckBox3)
&nbsp;
    @staticmethod
    def <strong>printStateForCheckbox(name, checkbox):</strong>
        state = "checked" if checkbox.isChecked() else "unchecked"
        print("Checkbox {name} is {state}".format(name=name, state=state))
&nbsp;
    @staticmethod
    def <strong>printStateForRadioButton(name, radioButton):</strong>
        state = "checked" if radioButton.isChecked() else "unchecked"
        print("Radio button {name} is {state}".format(name=name, state=state))
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit(self):</strong>
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Třída <strong>QMainWindow</strong> a její odlišnosti od <strong>QWidget</strong></h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Zobrazení hlavního okna</h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# import "jádra" frameworku Qt i modulu pro GUI
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného hlavního okna
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow")
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit(self):</strong>
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Přidání tlačítka do centrální části hlavního okna</h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# import "jádra" frameworku Qt i modulu pro GUI
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného hlavního okna
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow")
&nbsp;
        <i># tlačítko pro ukončení aplikace</i>
        quitButton = QtGui.QPushButton("Quit")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(quitButton)
&nbsp;
        <i># navázání akce na stisk tlačítka pro ukončení aplikace</i>
        quitButton.clicked.connect(self.quit)
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit(self):</strong>
        print("Closing...")
        self.close()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Lepší přístup &ndash; odvození vlastního widgetu pro centrální část hlavního okna</h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# import "jádra" frameworku Qt i modulu pro GUI
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného widgetu
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># tlačítko</i>
        button = QtGui.QPushButton("Quit", self)
        button.resize(button.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        button.clicked.connect(QtCore.QCoreApplication.instance().quit)
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného hlavního okna
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Složitější layout komponent, stavový řádek a další vylepšení</h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# import "jádra" frameworku Qt i modulu pro GUI
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného widgetu
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># tlačítko 1</i>
        self.counterButton = QtGui.QPushButton("Counter", self)
        self.counterButton.resize(self.counterButton.sizeHint())
&nbsp;
        <i># tlačítko 2</i>
        quitButton = QtGui.QPushButton("Quit", self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(self.counterButton)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného hlavního okna
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
        self._counter = 0
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow")
&nbsp;
        self.statusBar().showMessage("QMainWindow")
&nbsp;
        content = MainWindowContent()
        self.setCentralWidget(content)
&nbsp;
        <i># jedna z variant naprogramování reakce na stisk tlačítka</i>
        content.counterButton.clicked.connect(self.counterClicked)
&nbsp;
    def <strong>counterClicked(self):</strong>
        self._counter += 1
        self.statusBar().showMessage(str(self._counter))
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech deseti dnes popsaných demonstračních příkladů byly opět,
podobně jako tomu bylo i v&nbsp;předchozích článcích, uloženy do Git repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>35_one_radio_button.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/35_one_radio_button.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/35_one_radio_button.py</a></td></tr>
<tr><td>36_radio_buttons.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/36_radio_buttons.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/36_radio_buttons.py</a></td></tr>
<tr><td>37_radio_button_no_autoexclusive.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/37_radio_button_no_autoexclusive.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/37_radio_button_no_autoexclusive.py</a></td></tr>
<tr><td>38_custom_radio_button_groups.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/38_custom_radio_button_groups.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/38_custom_radio_button_groups.py</a></td></tr>
<tr><td>39_shortcuts.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/39_shortcuts.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/39_shortcuts.py</a></td></tr>
<tr><td>40_custom_shortcuts.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/40_custom_shortcuts.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/40_custom_shortcuts.py</a></td></tr>
<tr><td>41_main_window.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/41_main_window.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/41_main_window.py</a></td></tr>
<tr><td>42_main_window_and_button.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/42_main_window_and_button.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/42_main_window_and_button.py</a></td></tr>
<tr><td>43_main_window_layout.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/43_main_window_layout.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/43_main_window_layout.py</a></td></tr>
<tr><td>44_status_bar.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/44_status_bar.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/44_status_bar.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a></li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

