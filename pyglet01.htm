<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Multimediální knihovna Pyglet</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Multimediální knihovna Pyglet</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Vývojáři používající programovací jazyk Python mohou při tvorbě multimediálních aplikací použít hned několik knihoven a dokonce i ucelených frameworků. Pravděpodobně nejznámější knihovou z&nbsp;této oblasti je knihovna Pygame, kterou jsme si již stručně představili v&nbsp;loňském seriálu. Ovšem k&nbsp;dispozici jsou i další knihovny, především pak knihovna nazvaná Pyglet, mezi jejíž přednosti patří elegantně vyřešená vazba na grafickou knihovnu OpenGL. Právě vlastnosti této knihovny si postupně ukážeme v&nbsp;tomto seriálu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Multimediální knihovna Pyglet</a></p>
<p><a href="#k02">2. Instalace knihovny Pyglet do Fedory 25</a></p>
<p><a href="#k03">3. První demonstrační příklad: prázdné černé okno</a></p>
<p><a href="#k04">4. Úprava skriptu umožňující přímé spuštění demonstračního příkladu</a></p>
<p><a href="#k05">5. Systém událostí (events) a automatické překreslení okna</a></p>
<p><a href="#k06">6. Vykreslení textového návěští</a></p>
<p><a href="#k07">7. Specifikace úchytů (anchors) textových návěští</a></p>
<p><a href="#k08">8. Volání funkcí OpenGL přes rozhraní knihovny Pyglet</a></p>
<p><a href="#k09">9. Zjednodušení volání funkcí OpenGL</a></p>
<p><a href="#k10">10. Základní vlastnosti grafických primitiv v&nbsp;OpenGL</a></p>
<p><a href="#k11">11. Vlastnosti plošných útvarů (polygonů), včetně trojúhelníků</a></p>
<p><a href="#k12">12. Barevný trojúhelník aneb změna stavu OpenGL</a></p>
<p><a href="#k13">13. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Multimediální knihovna Pyglet</h2>

<p>Vloni jsme se v&nbsp;seriálu <a href="https://mojefedora.cz/stitek/pygame/">o programovacích jazycích a knihovnách určených pro výuku základů počítačové grafiky</a> mj.&nbsp;zabývali i projektem pojmenovaným <i>Pygame</i>, což je knihovna určená pro programovací jazyk Python, která interně volá funkce nativní knihovny SDL (<i>Simple DirectMedia Layer</i>) a několika dalších podpůrných knihoven. Myšlenka, na níž je projekt <i>Pygame</i> postaven, je v&nbsp;mnoha ohledech podobná myšlence taktéž popsaného systému <a href="https://mojefedora.cz/stitek/lua/">LÖVE</a> &ndash; implementace nízkoúrovňových operací nechť je vytvořena a optimalizována odborníky v&nbsp;nízkoúrovňových programovacích jazycích C a C++. Pokud budou tyto operace implementovány dostatečně rychle, je již možné zbytek hry či multimediální aplikace naprogramovat ve vysokoúrovňovém jazyku Python (v&nbsp;případě LÖVE pak jazyka Lua). A ukazuje se, že je tato myšlenka &ndash; a obecně systém rozdělení aplikace mezi dva programovací jazyky (kompilovaný a skriptovací) &ndash; poměrně úspěšná, neboť v&nbsp;<i>Pygame</i> již vzniklo mnoho kvalitních her.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2015/08/03.png"><img class="alignnone size-medium wp-image-5535" src="https://mojefedora.cz/wp-content/uploads/2015/08/03-450x352.png" alt="03" width="450" height="352" /></a>
<p><i>Obrázek 1: Ukázka velmi jednoduché hry naprogramované s&nbsp;využitím knihovny LÖVE.</i></p>

<p>Výše stručně představená knihovna <i>Pygame</i> je kvůli své relativně těsné vazbě na nativní knihovnu <i>SDL</i> určena především pro tvorbu dvoudimenzionálních (2D) her, tj.&nbsp;například různých strategií (realtime i tahových), plošinovek, RPG apod. Ve chvíli, kdy je zapotřebí vytvořit plnohodnotnou trojrozměrnou hru, je možné namísto <i>Pygame</i> použít buď projekt <i>PyOpenGL</i> (rozhraní pro OpenGL) či další knihovnu určenou pro použití s&nbsp;programovacím jazykem Python. Tato knihovna se jmenuje <i>Pyglet</i> a mezi její základní vlastnosti patří poměrně úzká vazba na knihovnu OpenGL a tedy i nepřímo na grafické akcelerátory. Kromě vazby na knihovnu OpenGL však v&nbsp;<i>Pyglet</i> mohou programátoři najít i další zajímavé a užitečné moduly, například pro práci s&nbsp;hudbou a se zvuky (ALSA, OpenAL, DirectSound), podporu pro různé formáty uložení hudby (zejména OGG/Vorbis), podporu pro načítání a zobrazování animací uložených v&nbsp;DivX, AVI, MPEG, H.263 atd.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2015/07/081.png"><img src="https://mojefedora.cz/wp-content/uploads/2015/07/081.png" alt="08" width="128" height="128" class="alignnone size-medium wp-image-5500" /></a>
<p><i>Obrázek 2: Logo multimediální knihovny Pyglet.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace knihovny Pyglet do Fedory 25</h2>

<p>Před vyzkoušením demonstračních příkladů popsaných v&nbsp;navazujících kapitolách je samozřejmě nutné nejdříve knihovnu Pyglet nainstalovat. Pokud používáte systém Fedora 24 či Fedora 25, je instalace velmi snadná a může být provedena jedním či dvěma příkazy. Nejdříve je nutné nainstalovat vlastní knihovnu Pyglet, a to následujícím způsobem (příkaz musíte spustit s&nbsp;rootovskými právy, tj.&nbsp;přes <strong>sudo</strong> či <strong>su</strong>):</p>

<pre>
dnf install python-pyglet
</pre>

<p>Průběh instalace:</p>

<pre>
Last metadata expiration check: 0:10:20 ago on Thu Mar 30 13:36:08 2017.
Dependencies resolved.
================================================================================
 Package           Arch      Version          Repository                   Size
================================================================================
Installing:
 python-pyglet     noarch    1.2.1-4.fc25     beaker-Fedora-Everything    1.2 M
 python2-pillow    x86_64    3.4.2-1.fc25     beaker-Fedora-Everything    594 k

Transaction Summary
================================================================================
Install  2 Packages

Total download size: 1.8 M
Installed size: 9.7 M
Is this ok [y/N]: 
</pre>

<pre>
Downloading Packages:
(1/2): python2-pillow-3.4.2-1.fc25.x86_64.rpm   522 kB/s | 594 kB     00:01    
(2/2): python-pyglet-1.2.1-4.fc25.noarch.rpm    1.1 MB/s | 1.2 MB     00:01    
--------------------------------------------------------------------------------
Total                                           1.6 MB/s | 1.8 MB     00:01     
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Installing  : python2-pillow-3.4.2-1.fc25.x86_64                          1/2 
  Installing  : python-pyglet-1.2.1-4.fc25.noarch                           2/2 
  Verifying   : python-pyglet-1.2.1-4.fc25.noarch                           1/2 
  Verifying   : python2-pillow-3.4.2-1.fc25.x86_64                          2/2 

Installed:
  python-pyglet.noarch 1.2.1-4.fc25      python2-pillow.x86_64 3.4.2-1.fc25     

Complete!
</pre>

<p>Ve druhém kroku je vhodné ověřit, zda je nainstalována i knihovna GLU a na ní závislé balíčky:</p>

<pre>
<strong>python</strong>
Python 2.7.13 (default, Jan 12 2017, 17:59:37) 
[GCC 6.3.1 20161221 (Red Hat 6.3.1-1)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import pyglet
&gt;&gt;&gt; pyglet.window.Window()
</pre>

<p>Pokud se vypíše chybové hlášení, je nutné doinstalovat výše zmíněnou knihovnu GLU:</p>

<pre>
dnf install libGLU
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad: prázdné černé okno</h2>

<p>První demonstrační příklad naprogramovaný s&nbsp;využitím knihovny Pyglet je velmi jednoduchý, protože se v&nbsp;něm pouze otevře prázdné okno, které je možné zavřít klávesou ESC. Celý skript napsaný v&nbsp;Pythonu obsahuje tři příkazy. Prvním příkazem importujeme všechny funkce, metody a objekty z&nbsp;modulu nazvaného <strong>pyglet</strong>. Druhým příkazem se vytvoří nové okno s&nbsp;velikostí 640&times;480 pixelů (právě zde dochází k&nbsp;testu, zda je vůbec možno okno otevřít a jestli jsou k&nbsp;dispozici všechny potřebné knihovny). Titulek okna bude obsahovat text &bdquo;Pyglet library&ldquo;. Třetí příkaz slouží k&nbsp;inicializaci vnitřního stavu knihovny Pyglet a ke spuštění aplikace:</p>

<pre>
import pyglet

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")
pyglet.app.run()
</pre>

<p>Povšimněte si, jakým způsobem jsou předány parametry okna &ndash; všechny parametry jsou pojmenovány (<strong>width=640</strong>), takže není nutné složitě zkoumat pořadí parametrů, zbytečně předávat nepoužívané parametry atd.</p>

<p>Spuštění prvního demonstračního příkladu provedeme snadno:</p>

<pre>
python 01_empty_window.py
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/03.png"><img class="alignnone size-thumbnail wp-image-8603" src="https://mojefedora.cz/wp-content/uploads/2017/03/03-324x254.png" alt="" width="324" height="254" /></a>
<p><i>Obrázek 3: Prázdné okno vykreslené prvním demonstračním příkladem.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Úprava pro přímé spuštění příkladu</h2>

<p>Předchozí demonstrační příklad bylo nutné spouštět nepřímo přes interpret programovacího jazyka Python. Pokud se však má s&nbsp;využitím knihovny Pyglet vytvářet běžná aplikace reprezentovaná ikonou na ploše nebo v&nbsp;menu desktopového prostředí, může být užitečnější skript upravit takovým způsobem, aby ho bylo možné spustit automaticky a přímo zadáním jeho jména. To vyžaduje nepatrnou úpravu skriptu a nastavení příznaku &bdquo;execute&ldquo;. Úprava skriptu spočívá v&nbsp;přidání prvního řádku začínajícího na takzvaný &bdquo;shebang&ldquo;, za nímž následuje specifikace interpretru:</p>

<pre>
#!/usr/bin/env python

import pyglet

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

pyglet.app.run()
</pre>

<p>Dále je nutné nastavit příznak &bdquo;execute&ldquo;, který umožní přímé spuštění skriptu. Nastavení příznaku se provede příkazem <strong>chmod</strong>:</p>

<pre>
chmod u+x 02_empty_window_script
</pre>

<p>Po těchto dvou úpravách se spuštění druhého demonstračního příkladu provede příkazem:</p>

<pre>
./02_empty_window_script
</pre>

<p>Samozřejmě je stále možné použít původní způsob spuštění:</p>

<pre>
python 02_empty_window_script
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/04.png"><img class="alignnone size-thumbnail wp-image-8604" src="https://mojefedora.cz/wp-content/uploads/2017/03/04-324x254.png" alt="" width="324" height="254" /></a>
<p><i>Obrázek 4: Prázdné okno vykreslené druhým demonstračním příkladem (totožný obsah s&nbsp;příkladem prvním).</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Systém událostí (events) a automatické překreslení okna</h2>

<p>Velmi důležitým konceptem, s&nbsp;nímž se v&nbsp;knihovně Pyglet setkáme, je systém událostí (<i>events</i>). Při běhu aplikace totiž dochází ke vzniku událostí, které jsou vyvolány jak samotným systémem (časovač...), tak i uživatelem. Na tyto události může aplikace reagovat s&nbsp;použitím takzvaných <i>callback funkcí</i>. Ty nemusí být registrovány takovým způsobem, jako je tomu v&nbsp;mnoha jiných knihovnách (explicitní registrací), ale musí být označeny vhodným <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">dekorátorem</a>. Příkladem může být callback funkce zavolaná ve chvíli, kdy je zapotřebí překreslit okno aplikace. Dekorátor pro takovou funkci se jmenuje <strong>window.event</strong>, takže příslušná callback funkce může vypadat následovně:</p>

<pre>
@window.event
def on_draw():
    pass
</pre>

<p>Interně systém událostí pracuje přibližně takto:</p>

<ol>
<li>Knihovna Pyglet si při své inicializaci vytvoří tabulku callback funkcí na základě analýzy dekorátorů funkcí</li>
<li>Po spuštění aplikace se spustí nekonečná smyčka nazvaná <a href="http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html">event loop</a>, která postupně z&nbsp;takzvané fronty událostí vybírá jednotlivé události (samozřejmě jen za předpokladu, že k&nbsp;nim došlo)
<li>Následně se pro událost získanou z&nbsp;fronty zavolá příslušné callback funkce</li>
</ol>

<p>Ukažme si demonstrační příklad, v&nbsp;němž je taková callback funkce skutečně vytvořena. Jedinou činností vyvolanou callback funkcí je smazání okna aplikace:</p>

<pre>
#!/usr/bin/env python

import pyglet

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

@window.event
def on_draw():
    window.clear()

pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/05.png"><img class="alignnone size-thumbnail wp-image-8605" src="https://mojefedora.cz/wp-content/uploads/2017/03/05-324x254.png" alt="" width="324" height="254" /></a>
<p><i>Obrázek 5: Prázdné okno vykreslené druhým demonstračním příkladem (totožný obsah s&nbsp;příkladem prvním i druhým).</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vykreslení textového návěští</h2>

<p>Předchozí demonstrační příklady po svém spuštění zobrazily pouze prázdné černé okno, což zajisté není příliš imponující. Zkusme si tedy do tohoto okna něco vykreslit. Jednou z&nbsp;důležitých vlastností knihovny Pyglet je velmi dobrá podpora pro práci s&nbsp;textem, resp.&nbsp;přesněji řečeno podpora pro vykreslování textu do okna (či na celou obrazovku). Pro vykreslení textu se používá objekt typu <strong>Label</strong>, který vytvoříme zavoláním <strong>pyglet.text.Label()</strong>. Této funkci/konstruktoru se předá především vlastní text, který se má vykreslit a následně přes nepovinné pojmenované parametry i další vlastnosti textu, zejména použitý font (libovolný TrueType font), velikost fontu a taktéž umístění textu na obrazovce. Při určování souřadnic textového návěští je dobré mít na paměti, že vertikální souřadnice rostou směrem nahoru. Následující příklad umístí začátek textového návěští doprostřed okna:</p>

<pre>
#!/usr/bin/env python

import pyglet

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

label = pyglet.text.Label("Pyglet library",
                          font_name="Terminus",
                          font_size=36,
                          x=window.width//2,
                          y=window.height//2)

@window.event
def on_draw():
    window.clear()
    label.draw()

pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/06.png"><img class="alignnone size-thumbnail wp-image-8606" src="https://mojefedora.cz/wp-content/uploads/2017/03/06-324x254.png" alt="" width="324" height="254" /></a>
<p><i>Obrázek 6: Screenshot získaný po spuštění tohoto demonstračního příkladu.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Specifikace úchytů textových návěští</h2>

<p>V&nbsp;předchozím příkladu ležely počáteční souřadnice textového návěští v&nbsp;jeho levém spodním rohu, tj.&nbsp;přibližně v&nbsp;oblasti, kde začínalo písmeno &bdquo;P&ldquo;. To je poněkud nepříjemné, jelikož například u nadpisů je lepší umístění na zvolený střed atd. I tuto funkcionalitu nám knihovna Pyglet zajišťuje, protože pomocí nepovinných parametrů <strong>anchor_x</strong> a <strong>anchor_y</strong> lze zvolit, který z&nbsp;důležitých bodů textového návěští bude považován za záchytný bod &ndash; volit je možné rohy pomyslného obdélníka, v&nbsp;němž se návěští nachází nebo středy stran tohoto obdélníka. Ostatně podívejme se na další příklad:</p>

<pre>
#!/usr/bin/env python

import pyglet

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet library")

label1 = pyglet.text.Label("Pyglet library",
                           font_name="Terminus",
                           font_size=36,
                           x=window.width//2,
                           y=window.height//2,
                           anchor_x='center',
                           anchor_y='center')

label2 = pyglet.text.Label("Pyglet library",
                           font_name="Terminus",
                           font_size=36,
                           x=0,
                           y=window.height,
                           anchor_x='left',
                           anchor_y='top')

label3 = pyglet.text.Label("Pyglet library",
                           font_name="Terminus",
                           font_size=36,
                           x=window.width,
                           y=0,
                           anchor_x='right',
                           anchor_y='bottom')

@window.event
def on_draw():
    window.clear()
    label1.draw()
    label2.draw()
    label3.draw()

pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/07.png"><img class="alignnone size-thumbnail wp-image-8607" src="https://mojefedora.cz/wp-content/uploads/2017/03/07-324x254.png" alt="" width="324" height="254" /></a>
<p><i>Obrázek 7: Screenshot získaný po spuštění tohoto demonstračního příkladu.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Volání funkcí OpenGL přes rozhraní knihovny Pyglet</h2>

<p>Nyní se &ndash; prozatím bez podrobnějšího popisu &ndash; podívejme na další příklad, v&nbsp;němž je vykreslen bílý trojúhelník. Pro vykreslení trojúhelníku se používá knihovna OpenGL, přičemž specifikace vrcholů trojúhelníka je uzavřena mezi &bdquo;příkazové závorky&ldquo;:</p>

<pre>
pyglet.gl.glBegin(pyglet.gl.GL_TRIANGLES)
pyglet.gl.glEnd()
</pre>

<p>Jednotlivé vrcholy se specifikují příkazem <strong>pyglet.gl.glVertex2f()</strong> popř.&nbsp;některou další variantou tohoto příkazu popsaného příště:</p>

<pre>
pyglet.gl.glBegin(pyglet.gl.GL_TRIANGLES)
pyglet.gl.glVertex2f(0,0)
pyglet.gl.glVertex2f(window.width,0)
pyglet.gl.glVertex2f(window.width,window.height)
pyglet.gl.glEnd()
</pre>

<p>Úplný zdrojový kód tohoto příkladu umisťuje vykreslování do callback funkce <strong>on_draw()</strong>:</p>

<pre>
#!/usr/bin/env python

import pyglet
import pyglet.gl

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet+OpenGL")

@window.event
def on_draw():
    pyglet.gl.glClear(pyglet.gl.GL_COLOR_BUFFER_BIT)
    pyglet.gl.glLoadIdentity()
    pyglet.gl.glBegin(pyglet.gl.GL_TRIANGLES)
    pyglet.gl.glVertex2f(0,0)
    pyglet.gl.glVertex2f(window.width,0)
    pyglet.gl.glVertex2f(window.width,window.height)
    pyglet.gl.glEnd()

pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/08.png"><img class="alignnone size-thumbnail wp-image-8608" src="https://mojefedora.cz/wp-content/uploads/2017/03/08-324x254.png" alt="" width="324" height="254" /></a>
<p><i>Obrázek 8: Screenshot získaný po spuštění tohoto demonstračního příkladu.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Zjednodušení volání funkcí OpenGL</h2>

<p>Předchozí příklad je možné zjednodušit a přiblížit tak jeho kód, který se do značné míry bude podobat podobně koncipovanému kódu napsanému v&nbsp;céčku. Namísto:</p>

<pre>
import pyglet.gl
</pre>

<p>totiž použijeme alternativní import všech funkcí OpenGL do aktuálního jmenného prostoru:</p>

<pre>
from pyglet.gl import *
</pre>

<p>Zdrojový kód tohoto příkladu se nám tedy zjednoduší:</p>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet+OpenGL")

@window.event
def on_draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glLoadIdentity()
    glBegin(GL_TRIANGLES)
    glVertex2f(0,0)
    glVertex2f(window.width,0)
    glVertex2f(window.width,window.height)
    glEnd()

pyglet.app.run()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Základní vlastnosti grafických primitiv v&nbsp;OpenGL</h2>

<p>Před ukázáním dalších možností OpenGL si musíme vysvětlit, s&nbsp;jakými grafickými objekty se pracuje a jaké vlastnosti tyto objekty mají. V&nbsp;knihovně OpenGL lze pro vykreslování plošných i prostorových scén použít deset základních geometrických tvarů, které se někdy nazývají (grafická) primitiva. Těchto deset typů primitiv je možné z&nbsp;hlediska jejich vlastností rozdělit do tří skupin:</p>

<ul>
<li><strong>body</strong>: pouze jeden typ primitiva zadaného příkazem <strong>glBegin(GL_POINTS)</strong></li>
<li><strong>úsečky</strong>: (nemají plochu, tudíž se nevyplňují) primitiva zadaná příkazy <strong>glBegin(GL_LINES)</strong>, <strong>glBegin(GL_LINE_STRIP)</strong> a <strong>glBegin(GL_LINE_LOOP)</strong></li>
<li><strong>plošné útvary</strong>: primitiva zadaná příkazy <strong>glBegin(GL_TRIANGLES)</strong>, <strong>glBegin(GL_TRIANGLE_FAN)</strong>, <strong>glBegin(GL_TRIANGLE_STRIP)</strong>, <strong>glBegin(GL_QUADS)</strong>, <strong>glBegin(GL_QUAD_STRIP)</strong> a <strong>glBegin(GL_POLYGON)</strong></li>
</ul>

<p>Příklady grafickým primitiv jsou ukázány na následujících obrázcích:</p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_1.gif"><img class="alignnone size-thumbnail wp-image-8609" src="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_1.gif" alt="" width="256" height="225" /></a>
<p><i>Obrázek 9: Grafické primitivum GL_POINTS.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_2.gif"><img class="alignnone size-thumbnail wp-image-8610" src="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_2.gif" alt="" width="256" height="225" /></a>
<p><i>Obrázek 10: Grafické primitivum GL_LINES.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_3.gif"><img class="alignnone size-thumbnail wp-image-8611" src="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_3.gif" alt="" width="256" height="225" /></a>
<p><i>Obrázek 11: Grafické primitivum GL_LINE_STRIP.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_4.gif"><img class="alignnone size-thumbnail wp-image-8612" src="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_4.gif" alt="" width="256" height="225" /></a>
<p><i>Obrázek 12: Grafické primitivum GL_LINE_LOOP.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_5.gif"><img class="alignnone size-thumbnail wp-image-8613" src="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_5.gif" alt="" width="380" height="240" /></a>
<p><i>Obrázek 13: Grafické primitivum GL_TRIANGLES.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_6.gif"><img class="alignnone size-thumbnail wp-image-8614" src="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_6.gif" alt="" width="380" height="240" /></a>
<p><i>Obrázek 14: Grafické primitivum GL_TRIANGLE_FAN.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_7.gif"><img class="alignnone size-thumbnail wp-image-8615" src="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_7.gif" alt="" width="380" height="240" /></a>
<p><i>Obrázek 15: Grafické primitivum GL_TRIANGLE_STRIP.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_8.gif"><img class="alignnone size-thumbnail wp-image-8616" src="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_8.gif" alt="" width="380" height="240" /></a>
<p><i>Obrázek 16: Grafické primitivum GL_QUADS.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_9.gif"><img class="alignnone size-thumbnail wp-image-8617" src="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_9.gif" alt="" width="450" height="186" /></a>
<p><i>Obrázek 17: Grafické primitivum GL_QUAD_STRIP.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_a.gif"><img class="alignnone size-thumbnail wp-image-8618" src="https://mojefedora.cz/wp-content/uploads/2017/03/opengl_03_a.gif" alt="" width="380" height="240" /></a>
<p><i>Obrázek 18: Grafické primitivum GL_POLYGON.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vlastnosti plošných útvarů (polygonů), včetně trojúhelníků</h2>

<p>U plošných útvarů lze, ostatně podobně jako u bodů a úseček, měnit jejich barvu. Pokud se barva specifikuje před příkazem <strong>glBegin()</strong>, je celý útvar vykreslen jednou konstantní barvou (pokud nepoužijeme texturování a osvětlení &ndash; viz další díly tohoto seriálu). Pokud však barvu specifikujeme mezi &bdquo;závorkovými&ldquo; příkazy <strong>glBegin()</strong> a <strong>glEnd()</strong>, lze měnit barvu jednotlivých vrcholů. Grafická karta nebo softwarová implementace OpenGL potom provede interpolaci barvy. Tímto jednoduchým způsobem je možné v&nbsp;OpenGL dosáhnout Gouraudova stínování.</p>

<p>Každý plošný útvar má dvě strany (<i>faces</i>) &ndash; rub a líc (<i>back</i> a <i>front</i>). Tyto strany (orientace se zjistí z&nbsp;normálového vektoru) mohou být v&nbsp;případě potřeby vykresleny odlišně. Toho se dá využít například při řezu objektů, kdy je jasné, která strana leží uvnitř a která vně tělesa. Odvrácené strany úplně uzavřených těles lze ořezat (<i>culling</i>).</p>

<p>Pro rub a/nebo líc je možné zadat mód vykreslování. Jsou možné tři základní varianty:</p>

<ol>
<li>vykreslí se pouze vrcholy polygonu (plošného útvaru)</li>
<li>vykreslí se hrany polygonu</li>
<li>vykreslí se vyplněný polygon</li>
</ol>

<p>Mód vykreslování se změní příkazem <strong>glPolygonMode(face, mode)</strong>, kde parametr <i>face</i> může nabývat hodnot <strong>GL_FRONT_AND_BACK</strong> (obě strany), <strong>GL_FRONT</strong> (přední strana) a <strong>GL_BACK</strong> (zadní strana). Parametr <i>mode</i> může nabývat hodnot <strong>GL_POINT</strong> (vykreslují se vrcholy), <strong>GL_LINE</strong> (vykreslují se hrany) a <strong>GL_FILL</strong> (vyplněný polygon).</p>

<p>U polygonů lze určit, jakým způsobem jsou zadány přední a zadní strany. Ty se vždy určují podle orientace vrcholů polygonu. Způsob určování se zadává příkazem <strong>glFrontFace(GLenum mode)</strong>, kde parametr mode nabývá hodnot <strong>GL_CCW</strong> (vrcholy jsou orientovány proti směru hodinových ručiček, což je implicitní nastavení) nebo <strong>GL_CW</strong> (vrcholy jsou orientovány po směru hodinových ručiček). Lze také určit, které polygony mají být ze scény odstraněny (již zmíněný <i>culling</i>) ještě před jejich vykreslením. Výběr se provede příkazem <strong>glCullFace(GLenum mode)</strong>, kde parametr mode nabývá hodnot <strong>GL_FRONT_AND_BACK</strong> (obě strany), <strong>GL_FRONT</strong> (přední strana) nebo <strong>GL_BACK</strong> (zadní strana).</p>

<p>Poslední vlastností plošných útvarů je výplňový vzorek. V&nbsp;případě, že je plošný útvar zobrazený s&nbsp;vykreslovacím módem <strong>GL_FILL</strong>, je možné zadat bitovou masku o velikosti 32&times;32 bitů, která určuje vzorek, jímž se polygon vyplní. Vzorek se dlaždicovitě opakuje, dokud nevyplní celou plochu polygonu. Nulový bit označuje pixel, kam se nevykresluje, bit nastavený na jedničku označuje pixel, kam se vykreslování provede. Výplňový vzorek se změní příkazem <strong>glPolygonStipple(mask)</strong>, ovšem v&nbsp;praxi se s&nbsp;tímto příkazem již prakticky nesetkáme, protože se namísto bitových vzorků používá plnohodnotné texturování.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Barevný trojúhelník aneb změna stavu OpenGL</h2>

<p>Vzhledem k&nbsp;tomu, že již víme, že OpenGL je modifikovatelný stavový stroj, je možné mj.&nbsp;měnit barvy jednotlivých vrcholů trojúhelníku. V&nbsp;tomto případě grafický akcelerátor trojúhelník vyplní s&nbsp;využitím takzvaného Gouraudova stínování, tj.&nbsp;plynulým přechodem mezi jednotlivými nastavenými barvami. Barvu každého vrcholu je nutné specifikovat před nastavením jeho souřadnic funkcí <strong>glVertex2f()</strong> (nebo jakoukoli jinou variantou funkce <strong>glVertex*</strong>). Zdrojový kód příkladu vykreslujícího trojúhelník, v&nbsp;němž má každý vrchol odlišnou barvu, vypadá následovně:</p>

<pre>
#!/usr/bin/env python

import pyglet
from pyglet.gl import *

window = pyglet.window.Window(width=640,
                              height=480,
                              caption="Pyglet+OpenGL")

@window.event
def on_draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glLoadIdentity()
    glBegin(GL_TRIANGLES)
    glColor3f(1, 0, 0)
    glVertex2f(window.width/2, 0)
    glColor3f(0, 1, 0)
    glVertex2f(0, window.height)
    glColor3f(0, 0, 1)
    glVertex2f(window.width, window.height)
    glEnd()

pyglet.app.run()
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2015/07/101.png"><img src="https://mojefedora.cz/wp-content/uploads/2015/07/101-450x353.png" alt="10" width="450" height="353" class="alignnone size-medium wp-image-5502" /></a>
<p><i>Obrázek 19: Výstup dalšího demonstračního příkladu s&nbsp;RGB trojúhelníkem.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady byly uloženy do Git repositáře dostupného na adrese <a href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>. Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti klonovat celý repositář:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>01_empty_window.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/01_empty_window.py">https://github.com/tisnik/presentations/blob/master/pyglet/01_empty_window.py</a></td></tr>
<tr><td>02_empty_window_script.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/02_empty_window_script.py">https://github.com/tisnik/presentations/blob/master/pyglet/02_empty_window_script.py</a></td></tr>
<tr><td>03_on_draw_event.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/03_on_draw_event.py">https://github.com/tisnik/presentations/blob/master/pyglet/03_on_draw_event.py</a></td></tr>
<tr><td>04_label.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/04_label.py">https://github.com/tisnik/presentations/blob/master/pyglet/04_label.py</a></td></tr>
<tr><td>05_label_anchors.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/05_label_anchors.py">https://github.com/tisnik/presentations/blob/master/pyglet/05_label_anchors.py</a></td></tr>
<tr><td>06_opengl.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/06_opengl.py">https://github.com/tisnik/presentations/blob/master/pyglet/06_opengl.py</a></td></tr>
<tr><td>07_opengl2.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/07_opengl2.py">https://github.com/tisnik/presentations/blob/master/pyglet/07_opengl2.py</a></td></tr>
<tr><td>08_triangle.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/pyglet/08_triangle.py">https://github.com/tisnik/presentations/blob/master/pyglet/08_triangle.py</a></td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Pyglet Home Page<br />
<a href="https://bitbucket.org/pyglet/pyglet/wiki/Home">https://bitbucket.org/pyglet/pyglet/wiki/Home</a>
</li>

<li>Dokumentace k verzi 1.2<br />
<a href="https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/">https://pyglet.readthedocs.io/en/pyglet-1.2-maintenance/</a>
</li>

<li>Dokumentace k verzi 1.2 ve formátu PDF<br />
<a href="https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/">https://readthedocs.org/projects/pyglet/downloads/pdf/pyglet-1.2-maintenance/</a>
</li>

<li>PyOpenGL<br />
<a href="http://pyopengl.sourceforge.net/">http://pyopengl.sourceforge.net/</a>
</li>

<li>The #! magic, details about the shebang/hash-bang mechanism on various Unix flavours<br />
<a href="https://www.in-ulm.de/~mascheck/various/shebang/">https://www.in-ulm.de/~mascheck/various/shebang/</a>
</li>

<li>Shebang (Unix)<br />
<a href="https://en.wikipedia.org/wiki/Shebang_%28Unix%29">https://en.wikipedia.org/wiki/Shebang_%28Unix%29</a>
</li>

<li>Domovská stránka systému LÖVE<br />
<a href="http://love2d.org/">http://love2d.org/</a>
</li>

<li>Simple DirectMedia Layer (home page)<br />
<a href="http://www.libsdl.org/">http://www.libsdl.org/</a>
</li>

<li>Simple DirectMedia Layer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer">https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer</a>
</li>

<li>Seriál Grafická knihovna OpenGL<br />
<a href="https://www.root.cz/serialy/graficka-knihovna-opengl/">https://www.root.cz/serialy/graficka-knihovna-opengl/</a>
</li>

<li>Pyglet event loop<br />
<a href="http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html">http://pyglet.readthedocs.io/en/latest/programming_guide/eventloop.html</a>
</li>

<li>Decorators I: Introduction to Python Decorators<br />
<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">http://www.artima.com/weblogs/viewpost.jsp?thread=240808</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

