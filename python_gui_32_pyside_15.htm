<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Konfigurace standardních dialogů nabízených knihovnou PySide</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Konfigurace standardních dialogů nabízených knihovnou PySide</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V patnáctém článku věnovaném knihovně PySide si ukážeme další možnosti konfigurace standardních dialogů, které tato knihovna programátorům nabízí. I když se totiž jedná o standardní dialogy, je u nich možné některé jejich vlastnosti měnit podle potřeb aplikací.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Další možnosti konfigurace tlačítek u dialogu <strong>QMessageBox</strong></a></p>
<p><a href="#k02">2. První demonstrační příklad &ndash; použití metody <strong>QMessageBox.addButton</strong> pro konfigurace tlačítek</a></p>
<p><a href="#k03">3. Druhý demonstrační příklad &ndash; použití metody <strong>QMessageBox.setStandardButtons</strong> pro konfigurace tlačítek</a></p>
<p><a href="#k04">4. Použití nestandardní ikony v&nbsp;dialogu <strong>QMessageBox</strong></a></p>
<p><a href="#k05">5. Třetí demonstrační příklad &ndash; vlastní ikona zobrazená v&nbsp;dialogu <strong>QMessageBox</strong></a></p>
<p><a href="#k06">6. Změna popisků tlačítek u standardního vstupního dialogu</a></p>
<p><a href="#k07">7. Čtvrtý demonstrační příklad &ndash; české popisky tlačítek standardního vstupního dialogu</a></p>
<p><a href="#k08">8. Vstupní dialog zobrazený bez tlačítek (pouze s&nbsp;polem pro zadání údajů uživatelem)</a></p>
<p><a href="#k09">9. Pátý demonstrační příklad &ndash; vstupní dialog bez tlačítek</a></p>
<p><a href="#k10">10. Navázání handlerů na událost generovanou při změně údajů ve vstupním dialogu</a></p>
<p><a href="#k11">11. Šestý demonstrační příklad &ndash; reakce na průběžnou změnu údajů ve vstupním dialogu</a></p>
<p><a href="#k12">12. Barvová paleta vybraná uživatelem přes <strong>QColorDialog</strong></a></p>
<p><a href="#k13">13. Sedmý demonstrační příklad &ndash; zobrazení barvové palety vybrané uživatelem a zapamatované v&nbsp;<strong>QColorDialogu</strong></a></p>
<p><a href="#k14">14. Standardní dialog pro výběr souboru či adresáře</a></p>
<p><a href="#k15">15. Osmý demonstrační příklad &ndash; výběr souboru pro otevření souboru</a></p>
<p><a href="#k16">16. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k17">17. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Další možnosti konfigurace tlačítek u dialogu <strong>QMessageBox</strong></h2>

<p>V&nbsp;předchozím článku o tvorbě aplikací s&nbsp;grafickým uživatelským
rozhraním s&nbsp;využitím knihovny <i>PySide</i> jsme si mj.&nbsp;popsali i
jednoduchý standardní dialog určený pro zobrazení zprávy uživateli. Připomeňme
si, že tento dialog je představován třídou <strong>QMessageBox</strong>
popř.&nbsp;potomky této třídy. Víme již, že u tohoto typu dialogu je
(pochopitelně) možné specifikovat zprávu, která se má uživateli zobrazit a
taktéž lze vybrat jednu ze čtyř standardních ikon nebo naopak zvolit, že se
žádná ikona nemá zobrazit:</p>

<table>
<tr><th>Ikona</th></tr>
<tr><td>QMessageBox.NoIcon</td></tr>
<tr><td>QMessageBox.Question</td></tr>
<tr><td>QMessageBox.Information</td></tr>
<tr><td>QMessageBox.Warning</td></tr>
<tr><td>QMessageBox.Critical</td></tr>
</table>

<img src="https://i.iinfo.cz/images/369/pyside14-3.png" class="image-321636" alt="&#160;" height="127" width="339" />
<p><i>Obrázek 1: Standardní dialog s&nbsp;ikonou QMessageBox.Warning.</i></p>

<p>Dnes si ukážeme další možnosti konfigurace tohoto jednoduchého standardního
dialogu. Dialog <strong>QMessageBox</strong> totiž ve skutečnosti neslouží
pouze k&nbsp;zobrazení zprávy uživateli, ale může být použit pro dotazy
s&nbsp;odpověďmi typu Ano/Ne, Ok/Storno, Ano/Ano pro všechny možnosti/Ne/Ne pro
všechny možnosti apod. Pro určení tlačítek, které se mají v&nbsp;dialogu
zobrazit, slouží v&nbsp;první řadě metoda <strong>addButton</strong>, které se
předá jak popisek tlačítka, tak i jeho role (ve skutečnosti není zapotřebí roli
specifikovat, jedná se o nepovinný parametr). Popis tlačítka může být prakticky
libovolný, ovšem roli je nutné vybrat z&nbsp;konstant nabízených samotnou
třídou <strong>QMessageBox</strong>. Role určuje chování tlačítek:</p>

<table>
<tr><th>Role tlačítka</th><th>Poznámka hodnota</th></tr>
<tr><td>QMessageBox.AcceptRole</td><td>zavře dialog s&nbsp;hodnotou odpovídající tlačítku Ok</td></tr>
<tr><td>QMessageBox.RejectRole</td><td>zavře dialog s&nbsp;hodnotou odpovídající tlačítku Cancel/Storno</td></tr>
<tr><td>QMessageBox.HelpRole</td><td>uživatel vyžaduje zobrazení nápovědy</td></tr>
<tr><td>QMessageBox.YesRole</td><td>odpovídá roli tlačítka "Yes"</td></tr>
<tr><td>QMessageBox.NoRole</td><td>odpovídá roli tlačítka "No"</td></tr>
<tr><td>QMessageBox.ApplyRole</td><td>odpovídá roli tlačítka "Apply"</td></tr>
<tr><td>QMessageBox.ResetRole</td><td>odpovídá roli tlačítka "Reset" (v&nbsp;jiném dialogu obnovení původních hodnot)</td></tr>
<tr><td>QMessageBox.InvalidRole</td><td>nevalidní tlačítko</td></tr>
</table>

<img src="https://i.iinfo.cz/images/369/pyside14-4.png" class="image-321637" alt="&#160;" height="127" width="339" />
<p><i>Obrázek 2: Standardní dialog s&nbsp;ikonou QMessageBox.Critical.</i></p>

<p>Podívejme se na příklad použití u dialogu, v&nbsp;němž potřebujeme zobrazit
trojici tlačítek:</p>

<pre>
def <strong>showMessageBox(self):</strong>
    <i># vytvoření dialogu</i>
    msgBox = QtGui.QMessageBox()
&nbsp;
    <i># nastavení zprávy a ikony, která se má zobrazit vedle zprávy</i>
    msgBox.setText(u'Zpráva')
    msgBox.setIcon(QtGui.QMessageBox.Information)
    <i># nastavení tlačítek, které mají být součástí dialogu</i>
    msgBox.addButton("Help", QtGui.QMessageBox.HelpRole)
    msgBox.addButton("Accept", QtGui.QMessageBox.AcceptRole)
    msgBox.addButton("Reject", QtGui.QMessageBox.RejectRole)
</pre>

<p>Pokud dialog zobrazíme metodou <strong>exec_</strong>, bude návratová
hodnota obsahovat index zvoleného tlačítka v&nbsp;tom pořadí, jak byla tlačítka
předána do dialogu. To je trošku problematické, protože pozice
<i>zobrazených</i> tlačítek (a tedy i jejich index) je platformově závislá.
Například na Linuxu sice požadujeme zobrazení tlačítek v&nbsp;pořadí
Help-Accept-Reject, ovšem ve skutečnosti se tlačítka zobrazí v&nbsp;pořadí
Help-Reject-Accept (pořadí je určeno rolí, nikoli textem).</p>

<img src="https://i.iinfo.cz/images/233/pyside15-1.png" class="image-322680" alt="&#160;" height="127" width="291" />
<p><i>Obrázek 3: Standardní dialog se třemi nakonfigurovanými tlačítky Help,
Accept a Reject.</i></p>

<p>Třída <strong>QMessageBox</strong> poskytuje programátorům i několik
standardních tlačítek, které je do dialogu možné přidat metodou
<strong>setStandardButton</strong> popř.&nbsp;v&nbsp;případě většího množství
tlačítek <strong>setStandardButtons</strong>. Každé standardní tlačítko
obsahuje (standardní) popisek a taktéž přiřazenou roli (viz tabulka zobrazená
výše):</p>

<table>
<tr><th>Tlačítko</th><th>Text</th><th>Role</th></tr>
<tr><td>QMessageBox.Ok</td><td>&bdquo;OK&ldquo;</td><td>AcceptRole</td></tr>
<tr><td>QMessageBox.Open</td><td>&bdquo;Open&ldquo;</td><td>AcceptRole</td></tr>
<tr><td>QMessageBox.Save</td><td>&bdquo;Save&ldquo;</td><td>AcceptRole</td></tr>
<tr><td>QMessageBox.Cancel</td><td>&bdquo;Cancel&ldquo;</td><td>RejectRole</td></tr>
<tr><td>QMessageBox.Close</td><td>&bdquo;Close&ldquo;</td><td>RejectRole</td></tr>
<tr><td>QMessageBox.Discard</td><td>&bdquo;Discard&ldquo; nebo &bdquo;Don’t Save&ldquo;</td><td>DestructiveRole</td></tr>
<tr><td>QMessageBox.Apply</td><td>&bdquo;Apply&ldquo;</td><td>ApplyRole</td></tr>
<tr><td>QMessageBox.Reset</td><td>&bdquo;Reset&ldquo;</td><td>ResetRole</td></tr>
<tr><td>QMessageBox.RestoreDefaults</td><td>&bdquo;Restore Defaults&ldquo;</td><td>ResetRole</td></tr>
<tr><td>QMessageBox.Help</td><td>&bdquo;Help&ldquo;</td><td>HelpRole</td></tr>
<tr><td>QMessageBox.SaveAll</td><td>&bdquo;Save All&ldquo;</td><td>AcceptRole</td></tr>
<tr><td>QMessageBox.Yes</td><td>&bdquo;Yes&ldquo;</td><td>YesRole</td></tr>
<tr><td>QMessageBox.YesToAll</td><td>&bdquo;Yes to All&ldquo;</td><td>YesRole</td></tr>
<tr><td>QMessageBox.No</td><td>&bdquo;No&ldquo;</td><td>NoRole</td></tr>
<tr><td>QMessageBox.NoToAll</td><td>&bdquo;No to All&ldquo;</td><td>NoRole</td></tr>
<tr><td>QMessageBox.Abort</td><td>&bdquo;Abort&ldquo;</td><td>RejectRole</td></tr>
<tr><td>QMessageBox.Retry</td><td>&bdquo;Retry&ldquo;</td><td>AcceptRole</td></tr>
<tr><td>QMessageBox.Ignore</td><td>&bdquo;Ignore&ldquo;</td><td>AcceptRole</td></tr>
<tr><td>QMessageBox.NoButton</td><td>nevalidní tlačítko</td><td>&times;</td></tr>
</table>

<p>Následuje ukázka kódu, z&nbsp;něhož se dozvíme, jakým způsobem je možné
deklarovat větší množství tlačítek, které se mají na dialogu objevit.
Povšimněte si použití operátoru | (or):</p>

<pre>
def <strong>showMessageBox(self):</strong>
    <i># tlačítka, která mají být součástí dialogu</i>
    buttons = QtGui.QMessageBox.Yes | \
              QtGui.QMessageBox.YesToAll | \
              QtGui.QMessageBox.No | \
              QtGui.QMessageBox.NoToAll | \
              QtGui.QMessageBox.Help
    <i># vytvoření dialogu</i>
    msgBox = QtGui.QMessageBox()
&nbsp;
    <i># nastavení zprávy a ikony, která se má zobrazit vedle zprávy</i>
    msgBox.setStandardButtons(buttons)
    msgBox.setText(u'Zpráva')
    msgBox.setIcon(QtGui.QMessageBox.Question)
</pre>

<p>Pro výběr výchozího tlačítka se použije metoda
<strong>setDefaultButton</strong>. Taktéž je možné zvolit, které tlačítko se
pomyslně vybere ve chvíli stlačení klávesy Esc. Pro tento účel se používá
metoda <strong>setEscapeButton</strong>.</p>

<a href="https://www.root.cz/obrazek/322681/"><img src="https://i.iinfo.cz/images/233/pyside15-2-prev.png" class="image-322681" alt="&#160;" height="70" width="370" /></a>
<p><i>Obrázek 4: Standardní dialog s&nbsp;pěti nakonfigurovanými
tlačítky.</i></p>

<p>Opět platí, že pokud dialog zobrazíme zavoláním metody
<strong>exec_</strong>, vrátí se celočíselná hodnota odpovídající zvolenému
tlačítku. Samotná tlačítka <strong>QMessageBox.*</strong> jsou konstanty
výčtového typu, takže je možné psát například:</p>

<pre>
ret = msgBox.exec_()
if ret == QtGui.QMessageBox.Yes:
    print("Yes!!!")
elif ret == QtGui.QMessageBox.No:
    print("No!!!")
else:
    print("something else")
</pre>

<a href="https://www.root.cz/obrazek/322682/"><img src="https://i.iinfo.cz/images/233/pyside15-3-prev.png" class="image-322682" alt="&#160;" height="80" width="370" /></a>
<p><i>Obrázek 5: Standardní dialog se čtyřmi nakonfigurovanými
tlačítky.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. První demonstrační příklad &ndash; použití metody <strong>QMessageBox.addButton</strong> pro konfigurace tlačítek</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázáno, jakým způsobem je
možné použít metodu nazvanou <strong>QMessageBox.addButton</strong> pro
vytvoření dialogu, v&nbsp;němž bude zobrazena trojice tlačítek Help, Accept a
Reject. Podívejme se na úplný zdrojový kód tohoto příkladu, v&nbsp;němž je
důležitá především metoda nazvaná jednoduše
<strong>showMessageBox</strong>:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
        messageBoxButton = self.prepareMessageBoxButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(messageBoxButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareMessageBoxButton(self):</strong>
        <i># tlačítko</i>
        messageBoxButton = QtGui.QPushButton('Message Box', self)
        messageBoxButton.resize(messageBoxButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        messageBoxButton.clicked.connect(self.showMessageBox)
        return messageBoxButton
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showMessageBox(self):</strong>
        <i># vytvoření dialogu</i>
        msgBox = QtGui.QMessageBox()
&nbsp;
        <i># nastavení zprávy a ikony, která se má zobrazit vedle zprávy</i>
        msgBox.setText(u'Zpráva')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        <i># msgBox.setIcon(QtGui.QMessageBox.Question)</i>
        <i># msgBox.setIcon(QtGui.QMessageBox.Warning)</i>
        <i># msgBox.setIcon(QtGui.QMessageBox.Critical)</i>
&nbsp;
        <i># nastavení tlačítek, které mají být součástí dialogu</i>
        msgBox.addButton("Help", QtGui.QMessageBox.HelpRole)
        msgBox.addButton("Accept", QtGui.QMessageBox.AcceptRole)
        msgBox.addButton("Reject", QtGui.QMessageBox.RejectRole)
&nbsp;
        <i># zobrazení dialogu</i>
        print(msgBox.exec_())
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMessageBox")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Druhý demonstrační příklad &ndash; použití metody <strong>QMessageBox.setStandardButtons</strong> pro konfigurace tlačítek</h2>

<p>Ve druhém příkladu můžeme vidět použití metody
<strong>QMessageBox.setStandardButtons</strong>, které se předá objekt
představující všechna tlačítka, která se mají v&nbsp;dialogu zobrazit.
Povšimněte si, jakým způsobem je možné tento objekt vytvořit s&nbsp;využitím
operátoru | (opět viz metodu <strong>showMessageBox</strong> obsahující
nejdůležitější část tohoto příkladu):</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
        messageBoxButton = self.prepareMessageBoxButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(messageBoxButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareMessageBoxButton(self):</strong>
        <i># tlačítko</i>
        messageBoxButton = QtGui.QPushButton('Message Box', self)
        messageBoxButton.resize(messageBoxButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        messageBoxButton.clicked.connect(self.showMessageBox)
        return messageBoxButton
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showMessageBox(self):</strong>
        <i># tlačítka, která mají být součástí dialogu</i>
        buttons = QtGui.QMessageBox.Yes | \
                  QtGui.QMessageBox.YesToAll | \
                  QtGui.QMessageBox.No | \
                  QtGui.QMessageBox.NoToAll | \
                  QtGui.QMessageBox.Help
        <i># vytvoření dialogu</i>
        msgBox = QtGui.QMessageBox()
&nbsp;
        <i># nastavení zprávy a ikony, která se má zobrazit vedle zprávy</i>
        msgBox.setStandardButtons(buttons)
        msgBox.setText(u'Zpráva')
        msgBox.setIcon(QtGui.QMessageBox.Question)
        <i># msgBox.setIcon(QtGui.QMessageBox.Question)</i>
        <i># msgBox.setIcon(QtGui.QMessageBox.Warning)</i>
        <i># msgBox.setIcon(QtGui.QMessageBox.Critical)</i>
&nbsp;
        <i># zobrazení dialogu</i>
        print(msgBox.exec_())
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMessageBox")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Použití nestandardní ikony v&nbsp;dialogu <strong>QMessageBox</strong></h2>

<p>I další úpravy standardního dialogu představovaného třídou
<strong>QMessageBox</strong> jsou z&nbsp;programátorského hlediska velmi
jednoduché. Již minule jsme se zmínili o možnosti výběru standardní ikony
metodou <strong>QMessageBox.setIcon</strong>. V&nbsp;některých případech nám
však nemusí nabídka standardních ikon vyhovovat a proto namísto této metody
použijeme metodu <strong>QMessageBox.setIconPixmap</strong>, které lze předat
libovolný rastrový obrázek reprezentovaný instancí třídy
<strong>QPixmap</strong>. Základní možnosti této třídy již dobře známe, takže
si jen ve stručnosti ukažme, jakým postupem lze zařídit načtení externího
rastrového obrázku a použít ho jako ikonu:</p>

<pre>
def <strong>showMessageBox(self):</strong>
    <i># tlačítko, která mají být součástí dialogu</i>
    buttons = QtGui.QMessageBox.Ok
&nbsp;
    <i># vytvoření dialogu</i>
    msgBox = QtGui.QMessageBox()
&nbsp;
    <i># nastavení zprávy a ikony, která se má zobrazit vedle zprávy</i>
    msgBox.setStandardButtons(buttons)
    msgBox.setText(u'')
&nbsp;
    <i># načtení pixmapy a její nastavení jako ikony pro dialog</i>
    pixmap = QtGui.QPixmap("pixmaps/pysidelogo.png")
    msgBox.setIconPixmap(pixmap)
</pre>

<img src="https://i.iinfo.cz/images/233/pyside15-4.png" class="image-322683" alt="&#160;" height="181" width="238" />
<p><i>Obrázek 6: Dialog, v&nbsp;němž je zpráva představována prázdným řetězcem
a ve kterém je použita vlastní ikona.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Třetí demonstrační příklad &ndash; vlastní ikona zobrazená v&nbsp;dialogu <strong>QMessageBox</strong></h2>

<p>Podívejme se nyní na zdrojový kód dnešního třetího demonstračního příkladu,
ve kterém vytváříme dialog typu <strong>QMessageBox</strong> a přitom
v&nbsp;něm použijeme vlastní ikonu, kterou jsme již mimochodem v&nbsp;tomto
seriálu použili při zobrazování tzv.&nbsp;<i>splash screenu</i>. Zpráva je
nastavena na prázdný řetězec (samotná ikona je totiž poměrně velká a tak je
v&nbsp;dialogu dostatečně dominantní) a kromě již zmíněné ikony se zobrazí jen
jediné tlačítko Ok:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
        messageBoxButton = self.prepareMessageBoxButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(messageBoxButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareMessageBoxButton(self):</strong>
        <i># tlačítko</i>
        messageBoxButton = QtGui.QPushButton('Message Box', self)
        messageBoxButton.resize(messageBoxButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        messageBoxButton.clicked.connect(self.showMessageBox)
        return messageBoxButton
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showMessageBox(self):</strong>
        <i># tlačítko, která mají být součástí dialogu</i>
        buttons = QtGui.QMessageBox.Ok
&nbsp;
        <i># vytvoření dialogu</i>
        msgBox = QtGui.QMessageBox()
&nbsp;
        <i># nastavení zprávy a ikony, která se má zobrazit vedle zprávy</i>
        msgBox.setStandardButtons(buttons)
        msgBox.setText(u'')
&nbsp;
        <i># načtení pixmapy a její nastavení jako ikony pro dialog</i>
        pixmap = QtGui.QPixmap("pixmaps/pysidelogo.png")
        msgBox.setIconPixmap(pixmap)
&nbsp;
        <i># zobrazení dialogu</i>
        print(msgBox.exec_())
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMessageBox")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Změna popisků tlačítek u standardního vstupního dialogu</h2>

<p>Ve standardním vstupním dialogu nalezneme tlačítko Ok a Cancel:</p>

<img src="https://i.iinfo.cz/images/369/pyside14-6.png" class="image-321639" alt="&#160;" height="130" width="202" />
<p><i>Obrázek 7: Standardní vstupní dialog s&nbsp;tlačítky Ok a Cancel i se
vstupním textovým polem.</i></p>

<p>Shodná tlačítka budou použita i ve chvíli, kdy je vstupní dialog
nakonfigurován tak, aby akceptoval jen celá čísla, reálná čísla, výběr prvku ze
seznamu či kombo boxu atd.</p>

<img src="https://i.iinfo.cz/images/369/pyside14-7.png" class="image-321640" alt="&#160;" height="130" width="202" />
<p><i>Obrázek 8: Standardní vstupní dialog s&nbsp;tlačítky Ok a Cancel i se
vstupním polem určeným pro zadání celého čísla.</i></p>

<p>Popisky těchto dvou tlačítek můžeme snadno změnit, a to konkrétně zavoláním
metod <strong>QInputDialog.setOkButtonText</strong> a
<strong>QInputDialog.setCancelButtonText</strong>, kterým se předá nový text
tlačítek. To je ukázáno v&nbsp;další funkci. Kvůli kompatibilitě
s&nbsp;Pythonem 2.x je u všech řetězců explicitně uvedeno, že se používá
kódování Unicode a nikoli ASCII:</p>

<pre>
def <strong>textInputDialogHandler(self):</strong>
    <i># vytvoření a konfigurace vstupního dialogu</i>
    dialog = QtGui.QInputDialog(self)
    dialog.setInputMode(QtGui.QInputDialog.TextInput)
&nbsp;
    <i># nastavení výchozího stavu dialogu</i>
    dialog.setLabelText("Text input:")
    dialog.setTextValue("default text")
&nbsp;
    <i># nastavení textů tlačítek</i>
    dialog.setCancelButtonText(u"Zrušit")
    dialog.setOkButtonText(u"Potvrdit")
</pre>

<img src="https://i.iinfo.cz/images/233/pyside15-5.png" class="image-322684" alt="&#160;" height="130" width="202" />
<p><i>Obrázek 9: Standardní vstupní dialog s&nbsp;modifikovanými tlačítky Ok a
Cancel.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Čtvrtý demonstrační příklad &ndash; české popisky tlačítek standardního vstupního dialogu</h2>

<p>V&nbsp;dnešním čtvrtém demonstračním příkladu je ukázána změna textu u
tlačítek standardního vstupního dialogu. Zdrojový text tohoto příkladu se od
příkladu uvedeného minule odlišuje pouze ve volání metod
<strong>QInputDialog.setOkButtonText</strong> a
<strong>QInputDialog.setCancelButtonText</strong>:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
&nbsp;
        textInputDialogButton = self.prepareButton(
            "Text Input", self.textInputDialogHandler)
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(textInputDialogButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>textInputDialogHandler(self):</strong>
        <i># vytvoření a konfigurace vstupního dialogu</i>
        dialog = QtGui.QInputDialog(self)
        dialog.setInputMode(QtGui.QInputDialog.TextInput)
&nbsp;
        <i># nastavení výchozího stavu dialogu</i>
        dialog.setLabelText("Text input:")
        dialog.setTextValue("default text")
&nbsp;
        <i># nastavení textů tlačítek</i>
        dialog.setCancelButtonText(u"Zrušit")
        dialog.setOkButtonText(u"Potvrdit")
&nbsp;
        <i># zobrazení dialogu a čekání na uživatelský vstup</i>
        result = dialog.exec_()
&nbsp;
        <i># zpracování a zobrazení výsledků</i>
        text = dialog.textValue()
        message = "Entered text: '{t}'\nClicked on: {c}".format(
            t=text, c="Ok" if result == 1 else "Cancel")
&nbsp;
        <i># zobrazení dialogu s informací o vstupu od uživatele</i>
        self.showMessageBox(message)
&nbsp;
    def <strong>prepareButton(self, label, handler):</strong>
        <i># tlačítko</i>
        button = QtGui.QPushButton(label, self)
        button.resize(button.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        button.clicked.connect(handler)
        return button
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showMessageBox(self, text):</strong>
        <i># vytvoření dialogu</i>
        msgBox = QtGui.QMessageBox()
&nbsp;
        <i># nastavení textu a ikony, které se mají zobrazit</i>
        msgBox.setText(text)
        msgBox.setIcon(QtGui.QMessageBox.Information)
&nbsp;
        <i># zobrazení dialogu</i>
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QInputDialog")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vstupní dialog zobrazený bez tlačítek (pouze s&nbsp;polem pro zadání údajů uživatelem)</h2>

<p>Standardní vstupní dialog <strong>QInputDialog</strong> je dokonce možné
nakonfigurovat i takovým způsobem, aby se v&nbsp;něm nezobrazily žádné další
ovládací prvky kromě vstupního textového políčka, kombo boxu nebo seznamu
prvků. Pokud skutečně nevyžadujete použití dalších ovládacích prvků, tedy
především tlačítek, je možné dialog nakonfigurovat následujícím způsobem:</p>

<pre>
QInputDialog.setInputMode(QtGui.QInputDialog.TextInput)
QInputDialog.setOption(QtGui.QInputDialog.NoButtons, True)
</pre>

<img src="https://i.iinfo.cz/images/233/pyside15-6.png" class="image-322685" alt="&#160;" height="97" width="202" />
<p><i>Obrázek 10: Vstupní dialog zobrazený bez tlačítek.</i></p>

<p>Metoda, která zajistí konfiguraci dialogu pro vstup textu (bez tlačítek),
bude vypadat takto:</p>

<pre>
def <strong>textInputDialogHandler(self):</strong>
    <i># vytvoření a konfigurace vstupního dialogu</i>
    dialog = QtGui.QInputDialog(self)
    dialog.setInputMode(QtGui.QInputDialog.TextInput)
&nbsp;
    <i># nastavení výchozího stavu dialogu</i>
    dialog.setLabelText("Text input:")
    dialog.setTextValue("default text")
&nbsp;
    <i># dialog bude zobrazen bez tlačítek</i>
    dialog.setOption(QtGui.QInputDialog.NoButtons, True)
</pre>

<img src="https://i.iinfo.cz/images/233/pyside15-7.png" class="image-322686" alt="&#160;" height="97" width="115" />
<p><i>Obrázek 11: Další varianta vstupního dialogu zobrazeného bez
tlačítek.</i></p>

<p>Podobně je možné nakonfigurovat dialog pro vstup celého čísla:</p>

<pre>
def <strong>integerInputDialogHandler</strong>(self):
    <i># vytvoření a konfigurace vstupního dialogu</i>
    dialog = QtGui.QInputDialog(self)
    dialog.setInputMode(QtGui.QInputDialog.IntInput)
&nbsp;
    <i># nastavení výchozího stavu dialogu</i>
    dialog.setLabelText("Integer input:")
    dialog.setIntMinimum(10)
    dialog.setIntMaximum(20)
&nbsp;
    <i># dialog bude zobrazen bez tlačítek</i>
    dialog.setOption(QtGui.QInputDialog.NoButtons, True)
</pre>

<p>Takto nakonfigurovaný dialog lze zavřít klávesou Esc nebo pomocí myši.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Pátý demonstrační příklad &ndash; vstupní dialog bez tlačítek</h2>

<p>V&nbsp;pátém demonstračním příkladu je ukázán způsob zobrazení vstupního
dialogu bez tlačítek. Dialog tedy obsahuje pouze vstupní textové pole a je ho
možné zavřít buď klávesou <strong>Esc</strong> nebo myší. Ovšem ve standardním
nastavení nebude fungovat klávesa <strong>Enter/Return</strong>, takže vlastně
dialog vždy vrátí hodnotu &bdquo;Cancel&ldquo; (zadaný text samozřejmě není
ztracen, protože ho lze přečíst metodou
<strong>QInputDialog.textValue</strong>, nezávisle na tom, jakým způsobem byl
dialog zavřen:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
&nbsp;
        textInputDialogButton = self.prepareButton(
            "Text Input", self.textInputDialogHandler)
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(textInputDialogButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>textInputDialogHandler(self):</strong>
        <i># vytvoření a konfigurace vstupního dialogu</i>
        dialog = QtGui.QInputDialog(self)
        dialog.setInputMode(QtGui.QInputDialog.TextInput)
&nbsp;
        <i># nastavení výchozího stavu dialogu</i>
        dialog.setLabelText("Text input:")
        dialog.setTextValue("default text")
&nbsp;
        <i># dialog bude zobrazen bez tlačítek</i>
        dialog.setOption(QtGui.QInputDialog.NoButtons, True)
&nbsp;
        <i># zobrazení dialogu a čekání na uživatelský vstup</i>
        result = dialog.exec_()
&nbsp;
        <i># zpracování a zobrazení výsledků</i>
        text = dialog.textValue()
        message = "Entered text: '{t}'\nClicked on: {c}".format(
            t=text, c="Ok" if result == 1 else "Cancel")
&nbsp;
        <i># zobrazení dialogu s informací o vstupu od uživatele</i>
        self.showMessageBox(message)
&nbsp;
    def <strong>prepareButton(self, label, handler):</strong>
        <i># tlačítko</i>
        button = QtGui.QPushButton(label, self)
        button.resize(button.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        button.clicked.connect(handler)
        return button
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showMessageBox(self, text):</strong>
        <i># vytvoření dialogu</i>
        msgBox = QtGui.QMessageBox()
&nbsp;
        <i># nastavení textu a ikony, které se mají zobrazit</i>
        msgBox.setText(text)
        msgBox.setIcon(QtGui.QMessageBox.Information)
&nbsp;
        <i># zobrazení dialogu</i>
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QInputDialog")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Navázání handlerů na událost generovanou při změně údajů ve vstupním dialogu</h2>

<p>V&nbsp;případě, že je vstupní dialog zobrazen bez tlačítek Ok a Cancel, je
většinou nutné, aby aplikace reagovala přímo na zadávané hodnoty. Představme si
například webový prohlížeč, v&nbsp;němž se v&nbsp;reálném čase mohou vyhledávat
části textu atd. U dialogů odvozených od třídy <strong>QInputDialog</strong>
lze zaregistrovat handlery pro šest typů událostí, ovšem vždy pouze dvě
události mají skutečný smysl. Které dvě události to budou záleží na tom, jaký
typ vstupu je nakonfigurován &ndash; zda lze zadat libovolný text, celé číslo
či číslo reálné:</p>

<table>
<tr><th>Událost</th><th>Předaný parametr</th></tr>
<tr><td>intValueChanged</td><td>změněná hodnota typu <i>int</i></td></tr>
<tr><td>intValueSelected </td><td>vybraná hodnota typu <i>int</i></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>doubleValueChanged</td><td>změněná hodnota typu <i>double</i></td></tr>
<tr><td>doubleValueSelected</td><td>vybraná hodnota typu <i>double</i></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>textValueChanged</td><td>změněný řetězec</td></tr>
<tr><td>textValueSelected</td><td>vybraný řetězec</td></tr>
</table>

<p>Navázání handleru na událost (přes signál) se provede snadno. Příkladem může
být nejběžnější dialog určený pro vstup běžného textu, v&nbsp;němž potřebujeme
reagovat na každou změnu textu v&nbsp;dialogu (přidání dalšího znaku, vymazání
znaku, použití schránky apod.):</p>

<pre>
<i># při změně textu se zavolá handler</i>
dialog.textValueChanged.connect(self.onTextValueChanged)
</pre>

<p>Vytvoření dialogu s&nbsp;navázáním události na handler bude vypadat
například následovně:</p>

<pre>
def <strong>registerTextInputDialogHandler(self):</strong>
    <i># vytvoření a konfigurace vstupního dialogu</i>
    dialog = QtGui.QInputDialog(self)
    dialog.setInputMode(QtGui.QInputDialog.TextInput)
&nbsp;
    <i># nastavení výchozího stavu dialogu</i>
    dialog.setLabelText("Text input:")
    dialog.setTextValue("")
&nbsp;
    <i># dialog bude zobrazen bez tlačítek</i>
    dialog.setOption(QtGui.QInputDialog.NoButtons, True)
&nbsp;
    <i># při změně textu se zavolá handler</i>
    dialog.textValueChanged.connect(self.onTextValueChanged)
</pre>

<p>Samotný handler může například změnit hodnotu zobrazenou v&nbsp;hlavním okně
aplikace:</p>

<pre>
def <strong>onTextValueChanged(self, text):</strong>
    """Handler zavolaný při změně textu ve vstupním dialogu."""
    self.enteredTextLabel.setText(text)
</pre>

<img src="https://i.iinfo.cz/images/233/pyside15-8.png" class="image-322687" alt="&#160;" height="193" width="457" />
<p><i>Obrázek 12: Text labelu na hlavním okně reflektuje změny prováděné
uživatelem ve vstupním dialogu.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Šestý demonstrační příklad &ndash; reakce na průběžnou změnu údajů ve vstupním dialogu</h2>

<p>V&nbsp;dnešním šestém demonstračním příkladu je ukázáno, jak lze jednoduše
naprogramovat handler reagující na změnu údajů ve vstupním dialogu. Samotný
handler je realizován metodou nazvanou <strong>onTextValueChanged</strong>,
jeho registrace a navázání na signál je provedeno v&nbsp;metodě pojmenované
<strong>textInputDialogHandler</strong>. Následuje výpis zdrojového kódu tohoto
příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
&nbsp;
        textInputDialogButton = self.prepareButton(
            "Text Input", self.textInputDialogHandler)
&nbsp;
        self.enteredTextLabel = QtGui.QLabel("")
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(self.enteredTextLabel)
        topLayout.addWidget(textInputDialogButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>onTextValueChanged(self, text):</strong>
        """Handler zavolaný při změně textu ve vstupním dialogu."""
        self.enteredTextLabel.setText(text)
&nbsp;
    def <strong>textInputDialogHandler(self):</strong>
        <i># vytvoření a konfigurace vstupního dialogu</i>
        dialog = QtGui.QInputDialog(self)
        dialog.setInputMode(QtGui.QInputDialog.TextInput)
&nbsp;
        <i># nastavení výchozího stavu dialogu</i>
        dialog.setLabelText("Text input:")
        dialog.setTextValue("")
&nbsp;
        <i># dialog bude zobrazen bez tlačítek</i>
        dialog.setOption(QtGui.QInputDialog.NoButtons, True)
&nbsp;
        <i># při změně textu se zavolá handler</i>
        dialog.textValueChanged.connect(self.onTextValueChanged)
&nbsp;
        <i># zobrazení dialogu a čekání na uživatelský vstup</i>
        result = dialog.exec_()
&nbsp;
        <i># zpracování a zobrazení výsledků</i>
        text = dialog.textValue()
        message = "Entered text: '{t}'\nClicked on: {c}".format(
            t=text, c="Ok" if result == 1 else "Cancel")
&nbsp;
        <i># zobrazení dialogu s informací o vstupu od uživatele</i>
        self.showMessageBox(message)
&nbsp;
    def <strong>prepareButton(self, label, handler):</strong>
        <i># tlačítko</i>
        button = QtGui.QPushButton(label, self)
        button.resize(button.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        button.clicked.connect(handler)
        return button
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showMessageBox(self, text):</strong>
        <i># vytvoření dialogu</i>
        msgBox = QtGui.QMessageBox()
&nbsp;
        <i># nastavení textu a ikony, které se mají zobrazit</i>
        msgBox.setText(text)
        msgBox.setIcon(QtGui.QMessageBox.Information)
&nbsp;
        <i># zobrazení dialogu</i>
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QInputDialog")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Barvová paleta vybraná uživatelem přes <strong>QColorDialog</strong></h2>

<p>Již minule jsme si popsali dialog určený pro výběr barvy. Ovšem tento dialog
má ještě jednu důležitou vlastnost &ndash; může si totiž
&bdquo;pamatovat&ldquo; uživatelem vybrané barvy, které tak tvoří relativně
malou barvovou paletu (zapamatovaná paleta je permanentní, přežije i restart
systému). Vypadá to následovně:</p>

<img src="https://i.iinfo.cz/images/233/pyside15-9.png" class="image-322688" alt="&#160;" height="398" width="532" />
<p><i>Obrázek 13: Dialog pro výběr barvy s&nbsp;prázdnou uživatelskou barvovou
paletou.</i></p>

<img src="https://i.iinfo.cz/images/233/pyside15-10.png" class="image-322689" alt="&#160;" height="398" width="532" />
<p><i>Obrázek 14: Dialog pro výběr barvy s&nbsp;nastavenou uživatelskou
barvovou paletou.</i></p>

<p>Barvová paleta je interně uložena v&nbsp;třídním atributu třídy
<strong>QColorDialog</strong> a je možné se k&nbsp;ní dostat po jednotlivých
barvách zadáním indexu od 0 do 15:</p>

<pre>
for index in range(0, 16):
    color = QtGui.QColorDialog.customColor(index)
</pre>

<p>Výsledkem je kód barvy, který je možné použít například následujícím
způsobem:</p>

<pre>
def <strong>redrawColorBoxes(self):</strong>
    <i># vytvoření objektu typu QPainter s předáním</i>
    <i># reference na "pokreslovaný" objekt</i>
    qp = QtGui.QPainter(self.image)
&nbsp;
    <i># vykreslení čtverců s barvami získanými z dialogu</i>
    index = 0
    for row in range(0, 2):
        for column in range(0, 8):
            color = QtGui.QColorDialog.customColor(index)
            x = 10 + column * (MainWindowContent.SQUARE_SIZE + 10)
            y = 10 + row * (MainWindowContent.SQUARE_SIZE + 10)
            drawRectangleUsingBrush(qp, color, x, y,
                                    MainWindowContent.SQUARE_SIZE,
                                    MainWindowContent.SQUARE_SIZE)
            index += 1
&nbsp;
    <i># vytvoření instance třídy QPixmap z objektu QImage</i>
    self.pixmap = QtGui.QPixmap.fromImage(self.image)
</pre>

<p>Vykreslení obdélníků vybranou barvou je realizováno touto funkcí:</p>

<pre>
<i># funkce pro vykreslení obdélníku zadanou barvou</i>
def <strong>drawRectangleUsingBrush(qPainter, color, x, y, width, height):</strong>
    <i># změna barvy štětce</i>
    brush = QtGui.QBrush(QtGui.QColor(color))
    brush.setStyle(QtCore.Qt.SolidPattern)
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Sedmý demonstrační příklad &ndash; zobrazení barvové palety vybrané uživatelem a zapamatované v&nbsp;<strong>QColorDialogu</strong></h2>

<p>Výše popsaná statická metoda <strong>QColorDialog.customColor</strong> je
použita v&nbsp;dnešním sedmém demonstračním příkladu. Po jeho spuštění se
zobrazí hlavní okno, které mj.&nbsp;obsahuje i šestnáct barevných obdélníků
ukazujících uživatelskou paletu. Výchozí barvy vypadají takto:</p>

<img src="https://i.iinfo.cz/images/233/pyside15-11.png" class="image-322690" alt="&#160;" height="201" width="350" />
<p><i>Obrázek 15: Výchozí stav hlavního okna aplikace s&nbsp;uživatelskou
barvovou paletou.</i></p>

<p>Po zobrazení dialogu pro výběr barvy si můžete nastavit vlastní barvovou
paletu, takže se ihned po zavření dialogu hlavní okno změní, například
následovně:</p>

<img src="https://i.iinfo.cz/images/233/pyside15-12.png" class="image-322691" alt="&#160;" height="201" width="350" />
<p><i>Obrázek 16: Barvová paleta poté, co do ní uživatel vložil další
barvy.</i></p>

<p>Následuje výpis zdrojového kódu tohoto demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou</i>
def <strong>drawRectangleUsingBrush(qPainter, color, x, y, width, height):</strong>
    <i># změna barvy štětce</i>
    brush = QtGui.QBrush(QtGui.QColor(color))
    brush.setStyle(QtCore.Qt.SolidPattern)
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 330
    IMAGE_HEIGHT = 90
&nbsp;
    SQUARE_SIZE = 30
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        self.prepareImage()
        self.redrawColorBoxes()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage(self):</strong>
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindowContent.IMAGE_WIDTH,
                                  MainWindowContent.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
    def <strong>redrawColorBoxes(self):</strong>
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># vykreslení čtverců s barvami získanými z dialogu</i>
        index = 0
        for row in range(0, 2):
            for column in range(0, 8):
                color = QtGui.QColorDialog.customColor(index)
                x = 10 + column * (MainWindowContent.SQUARE_SIZE + 10)
                y = 10 + row * (MainWindowContent.SQUARE_SIZE + 10)
                drawRectangleUsingBrush(qp, color, x, y,
                                        MainWindowContent.SQUARE_SIZE,
                                        MainWindowContent.SQUARE_SIZE)
                index += 1
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
        colorDialogButton = self.prepareColorDialogButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># vytvoření návěští</i>
        self.colorPalette = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        self.colorPalette.setPixmap(self.pixmap)
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(self.colorPalette)
        topLayout.addWidget(colorDialogButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareColorDialogButton(self):</strong>
        <i># tlačítko</i>
        colorDialogButton = QtGui.QPushButton('Select color', self)
        colorDialogButton.resize(colorDialogButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        colorDialogButton.clicked.connect(self.showColorDialog)
        return colorDialogButton
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showColorDialog(self):</strong>
        colorDialog = QtGui.QColorDialog()
        colorDialog.setCurrentColor(QtGui.QColor("<i>#aabbcc"))</i>
        result = colorDialog.exec_()
        self.redrawColorBoxes()
        self.colorPalette.setPixmap(self.pixmap)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QColorDialog colors")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Standardní dialog pro výběr souboru či adresáře</h2>

<p>Již minule jsme se zmínili o tom, že knihovna <i>PySide</i> programátorům
nabízí i standardní dialogy určené pro výběr souborů či adresářů pro otevření
či naopak pro zápis. V&nbsp;nejjednodušším případě je použití těchto dialogů
velmi snadné, zejména tehdy, pokud uživateli nabídneme libovolný soubor
k&nbsp;otevření (nebudeme ho tedy omezovat jen na určité typy souborů) a pokud
nezadáme výchozí cestu.</p>

<p>Příkladem může být dialog pro otevření souboru, přičemž výchozí adresář bude
nastaven na `pwd`. Prvním parametrem je reference na hlavní okno aplikace,
druhý parametr je textový popisek dialogu a třetím parametrem pak cesta (může a
pro jistotu by měla být v&nbsp;Unicode):</p>

<pre>
fileName = QtGui.QFileDialog.getOpenFileName(self, "Open file", u".")
</pre>

<a href="https://www.root.cz/obrazek/322692/"><img src="https://i.iinfo.cz/images/233/pyside15-13-prev.png" class="image-322692" alt="&#160;" height="246" width="370" /></a>
<p><i>Obrázek 17: Standardní dialog pro výběr souboru.</i></p>

<p>Další možnosti těchto typů dialogů si popíšeme v&nbsp;navazujícím
článku.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Osmý demonstrační příklad &ndash; výběr souboru pro otevření souboru</h2>

<p>Osmý a současně i poslední demonstrační příklad, s&nbsp;nímž se dnes
setkáme, po svém spuštění zobrazí okno, z&nbsp;něhož je možné spustit dialog
určený pro otevření souboru, resp.&nbsp;přesněji řečeno pro výběr souboru
z&nbsp;prakticky libovolného adresáře na disku. Po výběru souboru se jeho celá
cesta zobrazí v&nbsp;informačním dialogu:</p>

<a href="https://www.root.cz/obrazek/322693/"><img src="https://i.iinfo.cz/images/233/pyside15-14-prev.png" class="image-322693" alt="&#160;" height="79" width="370" /></a></p>
<p><i>Obrázek 18: Zobrazení cesty k&nbsp;vybranému souboru.</i></p>

<p>Celý zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        quitButton = self.prepareQuitButton()
        openFileButton = self.prepareOpenFileButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(openFileButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareOpenFileButton</strong>(self):
        <i># tlačítko</i>
        openFileButton = QtGui.QPushButton('Open file...', self)
        openFileButton.resize(openFileButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        openFileButton.clicked.connect(self.showOpenFileDialog)
        return openFileButton
&nbsp;
    def <strong>prepareQuitButton</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showOpenFileDialog</strong>(self):
        fileName = QtGui.QFileDialog.getOpenFileName(self, "Open file", u".")
&nbsp;
        <i># vytvoření dialogu</i>
        msgBox = QtGui.QMessageBox()
        msgBox.setText(u'Vybraný soubor\n{f}'.format(f=fileName))
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMessageBox")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech devíti dnes popsaných demonstračních příkladů byly opět,
podobně jako tomu bylo i v&nbsp;předchozích článcích, uloženy do Git repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Adresa</th></tr>
<tr><td>1</td><td>126_accept_reject_help_dialog.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/126_accept_reject_help_dialog.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/126_accept_reject_help_dialog.py</a></td></tr>
<tr><td>2</td><td>127_dialog_with_custom_buttons.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/127_dialog_with_custom_buttons.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/127_dialog_with_custom_buttons.py</a></td></tr>
<tr><td>3</td><td>128_message_box_pixmap.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/128_message_box_pixmap.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/128_message_box_pixmap.py</a></td></tr>
<tr><td>4</td><td>129_input_dialog_buttons.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/129_input_dialog_buttons.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/129_input_dialog_buttons.py</a></td></tr>
<tr><td>5</td><td>130_input_dialog_without_buttons.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/130_input_dialog_without_buttons.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/130_input_dialog_without_buttons.py</a></td></tr>
<tr><td>6</td><td>131_integer_input_dialog_without_buttons.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/131_integer_input_dialog_without_buttons.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/131_integer_input_dialog_without_buttons.py</a></td></tr>
<tr><td>7</td><td>132_text_changed_signal.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/132_text_changed_signal.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/132_text_changed_signal.py</a></td></tr>
<tr><td>8</td><td>133_color_dialog_custom_colors.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/133_color_dialog_custom_colors.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/133_color_dialog_custom_colors.py</a></td></tr>
<tr><td>9</td><td>134_open_file_dialog.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/134_open_file_dialog.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/134_open_file_dialog.py</a></td></tr>
</table>



<p><a name="k17"></a></p>
<h2 id="k17">17. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>QAbstractSlider<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractSlider.html">https://pyside.github.io/docs/pyside/PySide/QtGui/AbstractSlider.html</a>
</li>

<li>QScrollBar<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QScrollBar.html">https://pyside.github.io/docs/pyside/PySide/QtGui/ScrollBar.html</a>
</li>

<li>QSlider<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QSlider.html">https://pyside.github.io/docs/pyside/PySide/QtGui/Slider.html</a>
</li>

<li>QDial<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QDial.html">https://pyside.github.io/docs/pyside/PySide/QtGui/Dial.html</a>
</li>

<li>QImage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html</a>
</li>

<li>QPixmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html</a>
</li>

<li>QBitmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html</a>
</li>

<li>QPaintDevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html</a>
</li>

<li>QPicture<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html</a>
</li>

<li>QPainter<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html</a>
</li>

<li>QPainterPath<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html</a>
</li>

<li>QGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html</a>
</li>

<li>QLinearGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html</a>
</li>

<li>QRadialGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html</a>
</li>

<li>QTableWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html</a>
</li>

<li>QTableWidgetItem<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html</a>
</li>

<li>QTreeWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html</a>
</li>

<li>QTreeWidgetItem <br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html</a>
</li>

<li>Afinní zobrazení<br />
<a href="https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD">https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QDialog.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QErrorMessage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QErrorMessage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QErrorMessage.html</a>
</li>

<li>QInputDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QInputDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QInputDialog.html</a>
</li>

<li>QColorDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QColorDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QColorDialog.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QLineEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html</a>
</li>

<li>QTextEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QIntValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html</a>
</li>

<li>QRegExpValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

