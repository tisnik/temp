<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba GUI v Pythonu s využitím frameworku PySide: pokročilejší grafické operace používající třídu QPainter</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba GUI v Pythonu s využitím frameworku PySide: pokročilejší grafické operace používající třídu QPainter</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V již osmém článku věnovaném tvorbě grafického uživatelského rozhraní v Pythonu s využitím frameworku PySide se zaměříme na další možnosti nabízené třídou QPainter při tvorbě 2D grafiky. Ukážeme si tvorbu štětců, všechny jednoduché 2D entity i práci s polygony.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba GUI v&nbsp;Pythonu s&nbsp;využitím frameworku PySide: pokročilejší grafické operace používající třídu QPainter</a></p>
<p><a href="#k02">2. Vytvoření štětce (brush) z&nbsp;externího rastrového obrázku (bitmapy i pixmapy)</a></p>
<p><a href="#k03">3. První demonstrační příklad &ndash; vytvoření štětce z&nbsp;externí pixmapy</a></p>
<p><a href="#k04">4. Druhý demonstrační příklad &ndash; vytvoření štětce z&nbsp;externí bitmapy</a></p>
<p><a href="#k05">5. Gradientní barevné přechody využitelné při kreslení vyplněných obrazců</a></p>
<p><a href="#k06">6. Třetí demonstrační příklad &ndash; použití lineárního gradientu ve funkci štětce</a></p>
<p><a href="#k07">7. Čtvrtý demonstrační příklad &ndash; opakující se lineární přechod (pruhy)</a></p>
<p><a href="#k08">8. Pátý demonstrační příklad &ndash; radiální barevný přechod</a></p>
<p><a href="#k09">9. 2D entity, které je možné vykreslit s&nbsp;využitím třídy <strong>QPainter</strong></a></p>
<p><a href="#k10">10. Body a úsečky</a></p>
<p><a href="#k11">11. Obdélníky, kružnice a elipsy</a></p>
<p><a href="#k12">12. Obdélníky se zaoblenými rohy</a></p>
<p><a href="#k13">13. Oblouky, kruhové výseče a kruhové úseče</a></p>
<p><a href="#k14">14. Šestý demonstrační příklad &ndash; vykreslení &bdquo;jednoduchých&ldquo; 2D entit</a></p>
<p><a href="#k15">15. Polyčáry (lomené čáry) a polygony (mnohoúhelníky)</a></p>
<p><a href="#k16">16. Objekt typu <strong>QPolygon</strong>, přetížený operátor &lt;&lt; pro konstrukci polygonu</a></p>
<p><a href="#k17">17. Sedmý demonstrační příklad &ndash; vykreslení domku jednou lomenou čarou (polyčarou)</a></p>
<p><a href="#k18">18. Osmý demonstrační příklad &ndash; vykreslení hvězdy s&nbsp;využitím polygonu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba GUI v&nbsp;Pythonu s&nbsp;využitím frameworku PySide: pokročilejší grafické operace používající třídu QPainter</h2>

<p>V&nbsp;předchozím článku jsme se seznámili se způsobem vykreslování 2D entit
s&nbsp;využitím třídy <strong>QPainter</strong>, která programátorům nabízí
relativně vysokoúrovňový přístup k&nbsp;tvorbě grafiky, na rozdíl od třídy
<strong>QImage</strong>, kde jsme byli omezeni na změnu barev jednotlivých
pixelů, popř.&nbsp;na vyplnění oblasti konstantní barvou. Připomeňme si jen
krátce, že <strong>QPainter</strong> je třída, která pouze <i>realizuje</i>
vykreslovací algoritmy, ovšem vykreslování je nutné provádět na nějaké
&bdquo;plátno&ldquo;. To může být představováno například instancí třídy
<strong>QPixmap</strong> apod. <strong>QPainter</strong> navíc umožňuje změnu
stylu vykreslování obrysů entit a stylu výplně vnitřku uzavřených entit (u
liniových entit, tj.&nbsp;například úseček či oblouků, samozřejmě vnitřek
neexistuje a není vyplňován). Styl vykreslování je řízen stavem dvou objektů,
které mohou být přiřazeny instanci třídy <strong>QPainter</strong>:</p>

<ol>

<li>Pero (<i>pen</i>) je nástroj použitý při vykreslování obrysu tvarů a
samozřejmě i všech liniových tvarů (úsečky, oblouky, ...).</li>

<li>Štětec (<i>brush</i>) je nástroj použitý pro vyplnění uzavřených tvarů
(obdélník, polygon, elipsa, cesta).</li>

</ol>

<img src="https://i.iinfo.cz/images/92/pyside7-7.png" class="image-317507" alt="&#160;" width="320" height="130" />
<p><i>Obrázek 1: Různé vzorky čar (zvětšeno 2&times;).</i></p>

<p>Minule jsme se již s&nbsp;těmito nástroji setkali, takže již víme, jakým
způsobem je možné změnit barvu, šířku i styl obrysů 2D entit (vlastnosti pera)
a taktéž jsme se seznámili se základními styly výplně (vlastnosti štětce). Dnes
si ukážeme, jak je možné styl výplně <a href="#k02">načíst z&nbsp;externí
bitmapy (vzorek) či pixmapy (textura)</a>, popř.&nbsp;jak se používají <a
href="#k05">gradientní</a> (barevné) přechody pro vyplnění jednotlivých 2D
entit. Následně se seznámíme se <a href="#k09">všemi 2D entitami</a> nabízenými
třídou <strong>QPainter</strong>, a to včetně entit <a
href="#k14">s&nbsp;proměnným počtem vrcholů</a>.</p>

<img src="https://i.iinfo.cz/images/92/pyside7-11.png" class="image-317511" alt="&#160;" width="442" height="207" />
<p><i>Obrázek 2: Vzorník standardních štětců, které již jsou ve frameworku
PySide připraveny.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vytvoření štětce (brush) z&nbsp;externího rastrového obrázku (bitmapy i pixmapy)</h2>

<p>Kromě vzorků štětců, které jsou součástí frameworku PySide, je možné
vytvořit nový vzorek s&nbsp;využitím bitmapy nebo pixmapy. Pokud se použije
bitmapa, tj.&nbsp;rastrový obrázek, kde je každý pixel reprezentován jen
jediným bitem, je nutné nastavit barvu vzorku, a to přímo při konstrukci
štětce. U pixmap to samozřejmě není nutné, protože pixmapy jsou reprezentovány
buď obrázky s&nbsp;barvovou paletou či obrázky plnobarevnými
(<i>truecolor</i>).</p>

<p>Nový štětec se z&nbsp;bitmapy vytvoří takto:</p>

<pre>
brush = QtGui.QBrush(barva, bitmapa)
</pre>

<p>U&nbsp;štětce tvořeného z&nbsp;pixmapy se nemusí specifikovat barva:</p>

<pre>
brush = QtGui.QBrush(pixmapa)
</pre>

<img src="https://i.iinfo.cz/images/335/pyside8-1.png" class="image-318435" alt="&#160;" width="336" height="240" />
<p><i>Obrázek 3: Bitmapa, kterou v&nbsp;dalším příkladech použijeme jako
podklad pro vzorek štětce. V&nbsp;praxi se sice setkáme spíše se skutečnými
opakujícími se vzorky, my si však potřebujeme ukázat, jak se podklad posouvá či
naopak neposouvá společně s&nbsp;vykreslovanými 2D entitami.</i></p>

<p>Bitmapu nebo pixmapu je možné načíst z&nbsp;externích souborů. To se provede
jednoduše předáním cesty a jména souboru s&nbsp;rastrovým obrázkem do
konstruktoru <strong>QBitmap(filename)</strong> popř.&nbsp;do konstruktoru
<strong>QPixmap(filename)</strong>. Podporovány jsou tyto formáty rastrových
obrázků:</p>

<table>
<tr><th>Koncovka souboru</th><th>Formát</th></tr>
<tr><td>.bmp</td><td><a href="https://www.root.cz/clanky/graficky-format-bmp-pouzivany-a-pritom-neoblibeny/">Windows Bitmap</a></td></tr>
<tr><td>.gif</td><td><a href="https://www.root.cz/serialy/graficky-format-gif/">Graphic Interchange Format</a></td></tr>
<tr><td>.jpg, .jpeg</td><td><a href="https://www.root.cz/clanky/jpeg-kral-rastrovych-grafickych-formatu/">Joint Photographic Experts Group</a></td></tr>
<tr><td>.png</td><td><a href="https://www.root.cz/clanky/png-is-not-gif/">Portable Network Graphics</a></td></tr>
<tr><td>.pbm</td><td><a href="https://www.root.cz/clanky/graficke-formaty-ve-znameni-unixu/#k02">Portable Bitmap</a></td></tr>
<tr><td>.pgm</td><td><a href="https://www.root.cz/clanky/graficke-formaty-ve-znameni-unixu/#k04">Portable Graymap</a></td></tr>
<tr><td>.ppm</td><td><a href="https://www.root.cz/clanky/graficke-formaty-ve-znameni-unixu/#k06">Portable Pixmap</a></td></tr>
<tr><td>.xbm</td><td>X11 Bitmap</td></tr>
<tr><td>.xpm</td><td>X11 Pixmap</td></tr>
</table>

<img src="https://i.iinfo.cz/images/335/pyside8-2.png" class="image-318436" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 4: Pixmapa, kterou v&nbsp;dalších příkladech taktéž použijeme
jako podklad pro vzorek štětce.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad &ndash; vytvoření štětce z&nbsp;externí pixmapy</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázán jeden ze způsobů
vytvoření stylu štětce z&nbsp;externí pixmapy (barevného obrázku). Samotné
načtení vzorku/textury, která bude použita při vyplňování 2D entit, je
realizováno ve funkci <strong>createBrushFromPixmap</strong>:</p>

<pre>
<i># vytvoření štětce z pixmapy</i>
def <strong>createBrushFromPixmap</strong>(filename):
    pixmap = QtGui.QPixmap(filename)
    return QtGui.QBrush(pixmap)
</pre>

<p>Posléze je možné texturu štětce jednoduše načíst:</p>

<pre>
brush = createBrushFromPixmap("pixmaps/voronoi.png")
</pre>

<p>a následně použít při vykreslení uzavřeného obrazce:</p>

<pre>
<i># vytvoření pera a nastavení barvy kreslení</i>
pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
<i># změna šířky pera</i>
pen.setWidth(pen_width)
qPainter.setPen(pen)
&nbsp;
<i># změna tvaru štětce</i>
qPainter.setBrush(brush)
&nbsp;
<i># vykreslení obdélníku</i>
qPainter.drawRect(x, y, width, height)
</pre>

<p>Povšimněte si toho, jak na sebe navazují vnitřní plochy jednotlivých 2D
obrazců vyplněných stejnou texturou &ndash; pokud bychom animovali posun
jednoho čtverce pouhou změnou jeho souřadnic, vnitřní vzorek by se
neposouval:</p>

<img src="https://i.iinfo.cz/images/335/pyside8-3.png" class="image-318437" alt="&#160;" width="252" height="237" />
<p><i>Obrázek 5: Několik čtverců, jejichž vnitřní plocha používá totožnou
texturu.</i></p>

<p>Úplný zdrojový kód prvního příkladu je umístěn pod tento odstavec:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># vytvoření štětce z pixmapy</i>
def <strong>createBrushFromPixmap</strong>(filename):
    pixmap = QtGui.QPixmap(filename)
    return QtGui.QBrush(pixmap)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingCustomBrush</strong>(qPainter, color, x, y, width, height, brush, pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 250
    IMAGE_HEIGHT = 170
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        brush = createBrushFromPixmap("pixmaps/voronoi.png")
&nbsp;
        <i># Vykreslení obdélníků různým stylem</i>
        drawRectangleUsingCustomBrush(qp, YELLOW, 10, 10, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, RED, 90, 10, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLUE, 170, 10, 70, 70, brush)
&nbsp;
        <i># barva pozadi a povoleni vykreslení pozadi (vyplne)</i>
        qp.setBackgroundMode(QtCore.Qt.BGMode.OpaqueMode)
        qp.setBackground(QtGui.QColor(*BLUE))
&nbsp;
        drawRectangleUsingCustomBrush(qp, WHITE, 10, 90, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, WHITE, 90, 90, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, WHITE, 170, 90, 70, 70, brush)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Druhý demonstrační příklad &ndash; vytvoření štětce z&nbsp;externí bitmapy</h2>

<p>Ve druhém příkladu je ukázáno použití bitmapy pro vytvoření jednobarevného
nebo dvoubarevného vzorku. Povšimněte si jedné změny oproti předchozímu
příkladu &ndash; vzhledem k&nbsp;tomu, že některé formáty bitmap neobsahují
informace o barvě, ale jen vlastní bitový vzorek, je nutné specifikovat barvu
&bdquo;zapnutých&ldquo; pixelů, a to ideálně přímo v&nbsp;konstruktoru třídy
<strong>QBrush</strong>:</p>

<pre>
<i># vytvoření štětce z bitmapy</i>
def <strong>createBrushFromBitmap</strong>(color, filename):
    bitmap = QtGui.QBitmap(filename)
    c = QtGui.QColor(*color)
    return QtGui.QBrush(c, bitmap)
</pre>

<p>Takto připravenou funkci použijeme pro načtení bitmapy uložené ve formátu
<strong>XBM</strong> (<a href="https://en.wikipedia.org/wiki/X_BitMap">X
BitMap</a>), což je dnes již sice dosti zastaralý formát, ale mnohdy se ještě
setkáme s&nbsp;ikonami i výplňovými vzorky uloženými právě v&nbsp;tomto
formátu:</p>

<pre>
WHITE = (255, 255, 255)
brush = createBrushFromBitmap(WHITE, "bitmaps/test.xbm")
</pre>

<p>Použití takto vytvořeného štětce se již nijak neliší od předchozího
příkladu:</p>

<img src="https://i.iinfo.cz/images/335/pyside8-4.png" class="image-318438" alt="&#160;" width="332" height="307" />
<p><i>Obrázek 6: Několik čtverců, jejichž vnitřní plocha používá totožný bitový
vzorek. Opět si povšimněte faktu, že se vzorek neposunuje společně
s&nbsp;vlastní plochou čtverců.</i></p>

<p>Následuje výpis zdrojového kódu dnešního druhého demonstračního
příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># vytvoření štětce z bitmapy</i>
def <strong>createBrushFromBitmap</strong>(color, filename):
    bitmap = QtGui.QBitmap(filename)
    c = QtGui.QColor(*color)
    return QtGui.QBrush(c, bitmap)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingCustomBrush</strong>(qPainter, color, x, y, width, height, brush, pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 330
    IMAGE_HEIGHT = 240
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        brush = createBrushFromBitmap(WHITE, "bitmaps/test.xbm")
&nbsp;
        <i># Vykreslení obdélníků různým stylem</i>
        drawRectangleUsingCustomBrush(qp, YELLOW, 10, 10, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, RED, 90, 10, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLUE, 170, 10, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, MAGENTA, 250, 10, 70, 70, brush)
&nbsp;
        drawRectangleUsingCustomBrush(qp, WHITE, 10, 90, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, WHITE, 90, 90, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, WHITE, 170, 90, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, WHITE, 250, 90, 70, 70, brush)
&nbsp;
        drawRectangleUsingCustomBrush(qp, BLACK, 10, 170, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLACK, 90, 170, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLACK, 170, 170, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLACK, 250, 170, 70, 70, brush)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Gradientní barevné přechody využitelné při kreslení vyplněných obrazců</h2>

<p>Další možnost vyplňování uzavřených tvarů spočívá v&nbsp;použití gradientích
(barevných) přechodů. Existuje několik variant těchto přechodů, přičemž
nejpoužívanější je lineární přechod (v&nbsp;libovolném směru) nebo radiální
přechod. U lineárních přechodů je nutné specifikovat dva body a taktéž
libovolné množství barev. Přechod je vypočten na úsečce ležící mezi těmito
dvěma body &ndash; tím je určen jak směr přechodu, tak i nepřímo jeho šířka
(čím jsou body blíže u sebe, tím je šířka přechodu menší). Barvy je možné
specifikovat jak přímo v&nbsp;zadaných bodech (relativní souřadnice na úsečce
budou v&nbsp;tomto případě rovny 0,0 a 1,0, nebo v&nbsp;libovolném místě
zmíněné úsečky). Celkový počet zadaných barev není omezen na dvě, můžeme
například vytvořit přechod mezi třemi barvami:</p>

<pre>
gradient = QtGui.QLinearGradient(x1, y1, x2, y2)
&nbsp;
<i># barva přesně v&nbsp;prvním bodu</i>
gradient.setColorAt(0.0, QtGui.QColor(barva1))
&nbsp;
<i># barva v polovině přechodu</i>
gradient.setColorAt(0.5, QtGui.QColor(barva2))
&nbsp;
<i># barva přesně v&nbsp;posledním bodu</i>
gradient.setColorAt(1.0, QtGui.QColor(barva3))
&nbsp;
brush = QtGui.QBrush(gradient)
</pre>

<img src="https://i.iinfo.cz/images/335/pyside8-5.png" class="image-318439" alt="&#160;" width="332" height="317" />
<p><i>Obrázek 7: Lineární gradientní přechod se třemi barvami.</i></p>

<p>U gradientního přechodu je možné navíc nastavit režim opakování či
zrcadlení, což je téma, které si ukážeme v&nbsp;demonstračním příkladu.</p>

<img src="https://i.iinfo.cz/images/335/pyside8-6.png" class="image-318440" alt="&#160;" width="332" height="317" />
<p><i>Obrázek 8: Lineární gradientní přechod se čtyřmi barvami.</i></p>

<p>U specifikace radiálního přechodu se zadává střed a poloměr kružnice,
v&nbsp;níž k&nbsp;výpočtu změny barev dochází. Barvy se zadávají na úsečce ze
středu směrem k&nbsp;zadané kružnici. Ani zde není počet barev omezen:</p>

<pre>
gradient = QtGui.QRadialGradient(cx, cy, radius)
gradient.setColorAt(0.2, QtGui.QColor(barva1))
gradient.setColorAt(0.5, QtGui.QColor(barva1))
gradient.setColorAt(1.0, QtGui.QColor(barva3))
brush QtGui.QBrush(gradient)
</pre>

<img src="https://i.iinfo.cz/images/335/pyside8-7.png" class="image-318441" alt="&#160;" width="332" height="317" />
<p><i>Obrázek 9: Radiální gradientní přechod se čtyřmi barvami.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Třetí demonstrační příklad &ndash; použití lineárního gradientu ve funkci štětce</h2>

<p>V&nbsp;dnešním třetím demonstračním příkladu je ukázána tvorba lineárního
gradientního přechodu mezi dvěma barvami. Výsledek by měl vypadat
následovně:</p>

<img src="https://i.iinfo.cz/images/335/pyside8-8.png" class="image-318442" alt="&#160;" width="332" height="317" />
<p><i>Obrázek 10: Lineární gradientní přechod se dvěma barvami vykreslený
demonstračním příkladem.</i></p>

<p>Podívejme se nyní na to, jak vypadá zdrojový kód tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># vytvoření štětce z gradientního přechodu</i>
def <strong>createBrushFromGradient</strong>(color1, color2):
    gradient = QtGui.QLinearGradient(100, 100, 200, 200)
    gradient.setColorAt(0.2, QtGui.QColor(*color1))
    gradient.setColorAt(0.8, QtGui.QColor(*color2))
    return QtGui.QBrush(gradient)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingCustomBrush</strong>(qPainter, color, x, y, width, height, brush, pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 330
    IMAGE_HEIGHT = 250
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        brush = createBrushFromGradient(YELLOW, RED)
&nbsp;
        <i># Vykreslení obdélníků různým stylem</i>
        drawRectangleUsingCustomBrush(qp, YELLOW, 10, 10, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, RED, 90, 10, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLUE, 170, 10, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, MAGENTA, 250, 10, 70, 70, brush)
&nbsp;
        drawRectangleUsingCustomBrush(qp, WHITE, 10, 90, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, WHITE, 90, 90, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, WHITE, 170, 90, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, WHITE, 250, 90, 70, 70, brush)
&nbsp;
        drawRectangleUsingCustomBrush(qp, BLACK, 10, 170, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLACK, 90, 170, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLACK, 170, 170, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLACK, 250, 170, 70, 70, brush)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Čtvrtý demonstrační příklad &ndash; opakující se lineární přechod (pruhy)</h2>

<p>V&nbsp;dalším demonstračním příkladu je ukázán vliv volby:</p>

<pre>
gradient.setSpread(<strong>QtGui.QGradient.Spread.ReflectSpread</strong>)
</pre>

<p>Tato volba způsobí, že se lineární přechod bude opakovat, ovšem každé sudé
opakování bude navíc zrcadleno. Výsledek můžeme vidět na následujícím
screenshotu:</p>

<img src="https://i.iinfo.cz/images/335/pyside8-9.png" class="image-318443" alt="&#160;" width="332" height="317" />
<p><i>Obrázek 11: Opakující se lineární gradientní přechod se dvěma
barvami.</i></p>

<p>Opět se podívejme na zdrojový kód příkladu. Ten se odlišuje od příkladu
předchozího prakticky jen odlišným nastavením přechodu, volbou jiných barev a
takovou úpravou obou bodů přechodu, aby začátek přechodu korespondoval
s&nbsp;velikostí vykreslovaných čtverců:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># vytvoření štětce z gradientního přechodu</i>
def <strong>createBrushFromGradient</strong>(color1, color2):
    gradient = QtGui.QLinearGradient(100, 100, 100, 140)
    gradient.setColorAt(0.2, QtGui.QColor(*color1))
    gradient.setColorAt(1.0, QtGui.QColor(*color2))
    gradient.setSpread(QtGui.QGradient.Spread.ReflectSpread)
    return QtGui.QBrush(gradient)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingCustomBrush</strong>(qPainter, color, x, y, width, height, brush, pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 330
    IMAGE_HEIGHT = 250
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        brush = createBrushFromGradient(WHITE, BLUE)
&nbsp;
        <i># Vykreslení obdélníků různým stylem</i>
        drawRectangleUsingCustomBrush(qp, YELLOW, 10, 10, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, RED, 90, 10, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLUE, 170, 10, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, MAGENTA, 250, 10, 70, 70, brush)
&nbsp;
        drawRectangleUsingCustomBrush(qp, WHITE, 10, 90, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, WHITE, 90, 90, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, WHITE, 170, 90, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, WHITE, 250, 90, 70, 70, brush)
&nbsp;
        drawRectangleUsingCustomBrush(qp, BLACK, 10, 170, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLACK, 90, 170, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLACK, 170, 170, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLACK, 250, 170, 70, 70, brush)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Pátý demonstrační příklad &ndash; radiální barevný přechod</h2>

<p>V&nbsp;pátém příkladu je ukázán způsob použití radiálního barevného
přechodu. Střed přechodu je umístěn na souřadnice [85, 85] a jeho poloměr je
nastaven na 100 délkových jednotek. Navíc je povoleno opakování přechodu se
zrcadlením (schválně si zkuste zakomentovat volání metody
<strong>setSpread()</strong>):</p>

<pre>
gradient = QtGui.QRadialGradient(85, 85, 100)
gradient.setColorAt(0.2, QtGui.QColor(*color1))
gradient.setColorAt(1.0, QtGui.QColor(*color2))
gradient.setSpread(QtGui.QGradient.Spread.ReflectSpread)
brush = QtGui.QBrush(gradient)
</pre>

<img src="https://i.iinfo.cz/images/335/pyside8-10.png" class="image-318444" alt="&#160;" width="332" height="317" />
<p><i>Obrázek 12: Opakující se radiální barevný přechod se dvěma
barvami vykreslený demonstračním příkladem.</i></p>

<p>Následuje výpis zdrojového kódu příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># vytvoření štětce z gradientního přechodu</i>
def <strong>createBrushFromGradient</strong>(color1, color2):
    gradient = QtGui.QRadialGradient(85, 85, 100)
    gradient.setColorAt(0.2, QtGui.QColor(*color1))
    gradient.setColorAt(1.0, QtGui.QColor(*color2))
    gradient.setSpread(QtGui.QGradient.Spread.ReflectSpread)
    return QtGui.QBrush(gradient)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se specifikovaným štětcem</i>
def <strong>drawRectangleUsingCustomBrush</strong>(qPainter, color, x, y, width, height, brush, pen_width=0):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># změna šířky pera</i>
    pen.setWidth(pen_width)
    qPainter.setPen(pen)
&nbsp;
    <i># změna tvaru štětce</i>
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 330
    IMAGE_HEIGHT = 250
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        brush = createBrushFromGradient(YELLOW, BLACK)
&nbsp;
        <i># Vykreslení obdélníků různým stylem</i>
        drawRectangleUsingCustomBrush(qp, YELLOW, 10, 10, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, RED, 90, 10, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLUE, 170, 10, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, MAGENTA, 250, 10, 70, 70, brush)
&nbsp;
        drawRectangleUsingCustomBrush(qp, WHITE, 10, 90, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, WHITE, 90, 90, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, WHITE, 170, 90, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, WHITE, 250, 90, 70, 70, brush)
&nbsp;
        drawRectangleUsingCustomBrush(qp, BLACK, 10, 170, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLACK, 90, 170, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLACK, 170, 170, 70, 70, brush)
        drawRectangleUsingCustomBrush(qp, BLACK, 250, 170, 70, 70, brush)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. 2D entity, které je možné vykreslit s&nbsp;využitím třídy <strong>QPainter</strong></h2>

<p>Třída <strong>QPainter</strong> programátorům nabízí možnost vykreslení
následujících tvarů a objektů:</p>

<table>
<tr><th>Tvar/objekt</th><th>Metoda</th></tr>
<tr><td><a href="#k10">bod</a></td><td>drawPoint()</td></tr>
<tr><td>sada bodů</td><td>drawPoints()</td></tr>
<tr><td><a href="#k10">úsečka</a></td><td>drawLine()</td></tr>
<tr><td>sada úseček</td><td>drawLines()</td></tr>
<tr><td><a href="#k12">obdélník</a></td><td>drawRect(), fillRect()</td></tr>
<tr><td>sada obdélníků</td><td>drawRects()</td></tr>
<tr><td><a href="#k12">obdélník se zakulacenými rohy</a></td><td>drawRoundRect(), drawRoundedRect()</td></tr>
<tr><td><a href="#k15">polyčára</a> (lomená úsečka)</td><td>drawPolyline()</td></tr>
<tr><td><a href="#k15">polygon</a></td><td>drawPolygon(), drawConvexPolygon()</td></tr>
<tr><td><a href="#k14">oblouk</a></td><td>drawArc()</td></tr>
<tr><td><a href="#k14">kruhová úseč</a></td><td>drawChord()</td></tr>
<tr><td><a href="#k14">kruhová výseč</a></td><td>drawPie()</td></tr>
<tr><td><a href="#k12">kružnice nebo elipsa</a></td><td>drawEllipse()</td></tr>
<tr><td>obecná cesta</td><td>drawPath(), fillPath()</td></tr>
<tr><td>text</td><td>drawText(), drawTextItem()</td></tr>
<tr><td>rastrový obrázek</td><td>drawImage(), drawPicture(), drawPixmap(), ...</td></tr>
</table>

<p>V&nbsp;dalších kapitolách se postupně s&nbsp;jednotlivými entitami seznámíme
(s&nbsp;výjimkou textu a cest; těm bude věnován samostatný článek).</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Body a úsečky</h2>

<p>Body se vykreslují buď pomocí metody <strong>drawPoint()</strong> nebo
(pokud potřebujeme vykreslit větší množství bodů současně) s&nbsp;využitím
metody <strong>drawPoints()</strong>. Na tomto místě je vhodné si uvědomit, že
se body odlišují od pixelů, protože pixel je dále nedělitelná diskrétní
jednotka, ale bod může být vykreslen s&nbsp;využitím stop různé velikosti a
tvaru (stopa se nastavuje pomocí atributů pera). Následující kód vykreslí
náhodné body v&nbsp;dané oblasti:</p>

<pre>
<i># funkce pro vykreslení bodu zadanou barvou</i>
def <strong>drawPoint</strong>(qPainter, color, x, y):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení jediného bodu</i>
    qPainter.drawPoint(x, y)
&nbsp;
&nbsp;
for _ in range(250):
    x = random.uniform(90, 160)
    y = random.uniform(10, 80)
    drawPoint(qp, WHITE, x, y)
</pre>

<p>S&nbsp;úsečkami jsme se již setkali minule, takže si jen krátce uvedeme
funkci pro vykreslení úsečky specifikovanou barvou:</p>

<pre>
<i># funkce pro vykreslení úsečky zadanou barvou</i>
def <strong>drawLine</strong>(qPainter, color, x1, y1, x2, y2):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení úsečky</i>
    qPainter.drawLine(x1, y1, x2, y2)
</pre>

<img src="https://i.iinfo.cz/images/335/pyside8-11.png" class="image-318445" alt="&#160;" width="168" height="86" />
<p><i>Obrázek 13: Úsečka a náhodně vykreslené body.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Obdélníky, kružnice a elipsy</h2>

<p>Obdélníky i elipsy jsou specifikovány stejným způsobem, konkrétně souřadnicí
levého horního rohu, šířkou a výškou. Pokud je šířka a výška shodná, vykreslí
se čtverec popř.&nbsp;kružnice. Podívejme se na příklad:</p>

<pre>
<i># funkce pro vykreslení obdélníku zadanou barvou</i>
def <strong>drawRectangle</strong>(qPainter, color, x, y, width, height):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># funkce pro vykreslení elipsy zadanou barvou</i>
def <strong>drawEllipse</strong>(qPainter, color, x, y, width, height):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
    qPainter.setPen(pen)
&nbsp;
    <i># vykreslení elipsy</i>
    qPainter.drawEllipse(x, y, width, height)
&nbsp;
&nbsp;
<i># funkce pro vykreslení kružnice zadanou barvou</i>
def <strong>drawCircle</strong>(qPainter, color, cx, cy, radius):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení kružnice</i>
    qPainter.drawEllipse(cx-radius, cy-radius, 2*radius, 2*radius)
</pre>

<p>Pro kreslení kružnic jsou zvoleny odlišné parametry, konkrétně souřadnice
středu a poloměr. Podobně je samozřejmě možné upravit i funkci pro kreslení
elipsy, pouze se musí specifikovat poloměr obou poloos.</p>

<img src="https://i.iinfo.cz/images/335/pyside8-12.png" class="image-318446" alt="&#160;" width="324" height="88" />
<p><i>Obrázek 14: Obdélník (resp.&nbsp;čtverec jako speciální typ obdélníku),
kružnice a dvě elipsy.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Obdélníky se zaoblenými rohy</h2>

<p>Obdélníky se zaoblenými rohy se vykreslují metodou
<strong>drawRoundRect()</strong> a <strong>drawRoundedRect()</strong>. Kromě
souřadnice jednoho vrcholu obdélníku a jeho rozměrů se těmto metodám předávají
i poloměry rohů (v&nbsp;horizontálním i vertikálním směru). Z&nbsp;dalšího
příkladu si povšimněte, že pokud je poloměr příliš velký, stává se ze čtverce
kružnice:</p>

<pre>
<i># funkce pro vykreslení obdélníku zadanou barvou a se zaoblenými rohy</i>
def <strong>drawRoundedRectangle</strong>(qPainter, color, x, y, width, height, r):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRoundedRect(x, y, width, height, r, r)
&nbsp;
drawRoundedRectangle(qp, MAGENTA, 10, 170, 70, 70, 1)
drawRoundedRectangle(qp, MAGENTA, 90, 170, 70, 70, 10)
drawRoundedRectangle(qp, MAGENTA, 170, 170, 70, 70, 20)
drawRoundedRectangle(qp, MAGENTA, 250, 170, 70, 70, 1000)
</pre>

<img src="https://i.iinfo.cz/images/335/pyside8-13.png" class="image-318447" alt="&#160;" width="328" height="83" />
<p><i>Obrázek 15: Čtverec se zaoblenými rohy; poloměr zaoblení se zleva doprava
postupně zvětšuje.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Oblouky, kruhové výseče a kruhové úseče</h2>

<p>Pro kreslení oblouků, kruhových výsečí a kruhových úsečí se používají velmi
podobné metody, které se od sebe odlišují pouze jménem. U všech tří metod se
opět specifikuje souřadnice jednoho z&nbsp;rohů obalového obdélníku následovaná
šířkou a výškou tohoto obdélníku. Navíc však ještě musíme specifikovat
počáteční úhel oblouku a jeho délku. Obě tyto hodnoty se zadávají ve stupních
vynásobených konstantou 16 (tento způsob specifikace úhlů odpovídá konceptům,
na nichž je postavena knihovna Qt):</p>

<pre>
<i># funkce pro vykreslení oblouku zadanou barvou</i>
def <strong>drawArc</strong>(qPainter, color, cx, cy, radius, angle, span):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení kružnice</i>
    qPainter.drawArc(cx-radius, cy-radius, 2*radius, 2*radius, 16*angle, 16*span)
&nbsp;
&nbsp;
<i># funkce pro vykreslení kruhové výseče zadanou barvou</i>
def <strong>drawPie</strong>(qPainter, color, cx, cy, radius, angle, span):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení kruhové výseče</i>
    qPainter.drawPie(cx-radius, cy-radius, 2*radius, 2*radius, 16*angle, 16*span)
&nbsp;
&nbsp;
<i># funkce pro vykreslení kruhové úseče zadanou barvou</i>
def <strong>drawChord</strong>(qPainter, color, cx, cy, radius, angle, span):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení kruhové úseče</i>
    qPainter.drawChord(cx-radius, cy-radius, 2*radius, 2*radius, 16*angle, 16*span)
</pre>

<img src="https://i.iinfo.cz/images/335/pyside8-14.png" class="image-318448" alt="&#160;" width="320" height="271" />
<p><i>Obrázek 16: Oblouky, kruhové výseče a kruhové úseče.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Šestý demonstrační příklad &ndash; vykreslení &bdquo;jednoduchých&ldquo; 2D entit</h2>

<p>Všechny typy entit popsaných v&nbsp;předchozích čtyřech kapitolách jsou
vykresleny dnešním šestým příkladem, což je ostatně patrné z&nbsp;následujícího
screenshotu:</p>

<img src="https://i.iinfo.cz/images/335/pyside8-15.png" class="image-318449" alt="&#160;" width="332" height="587" />
<p><i>Obrázek 17: Všechny &bdquo;jednoduché&ldquo; 2D entity podporované třídou
<strong>QPainter</strong>.</i></p>

<p>Opět se podívejme na úplný zdrojový kód tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
import random
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nastavení barvy kreslení (pera) na zadanou barvu</i>
def <strong>setColor</strong>(qPainter, color):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
&nbsp;
<i># funkce pro vykreslení bodu zadanou barvou</i>
def <strong>drawPoint</strong>(qPainter, color, x, y):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení jediného bodu</i>
    qPainter.drawPoint(x, y)
&nbsp;
&nbsp;
<i># funkce pro vykreslení úsečky zadanou barvou</i>
def <strong>drawLine</strong>(qPainter, color, x1, y1, x2, y2):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení úsečky</i>
    qPainter.drawLine(x1, y1, x2, y2)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou</i>
def <strong>drawRectangle</strong>(qPainter, color, x, y, width, height):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRect(x, y, width, height)
&nbsp;
&nbsp;
<i># funkce pro vykreslení obdélníku zadanou barvou a se zaoblenými rohy</i>
def <strong>drawRoundedRectangle</strong>(qPainter, color, x, y, width, height, r):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení obdélníku</i>
    qPainter.drawRoundedRect(x, y, width, height, r, r)
&nbsp;
&nbsp;
<i># funkce pro vykreslení elipsy zadanou barvou</i>
def <strong>drawEllipse</strong>(qPainter, color, x, y, width, height):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
    qPainter.setPen(pen)
&nbsp;
    <i># vykreslení elipsy</i>
    qPainter.drawEllipse(x, y, width, height)
&nbsp;
&nbsp;
<i># funkce pro vykreslení kružnice zadanou barvou</i>
def <strong>drawCircle</strong>(qPainter, color, cx, cy, radius):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení kružnice</i>
    qPainter.drawEllipse(cx-radius, cy-radius, 2*radius, 2*radius)
&nbsp;
&nbsp;
<i># funkce pro vykreslení oblouku zadanou barvou</i>
def <strong>drawArc</strong>(qPainter, color, cx, cy, radius, angle, span):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení kružnice</i>
    qPainter.drawArc(cx-radius, cy-radius, 2*radius, 2*radius, 16*angle, 16*span)
&nbsp;
&nbsp;
<i># funkce pro vykreslení kruhové výseče zadanou barvou</i>
def <strong>drawPie</strong>(qPainter, color, cx, cy, radius, angle, span):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení kruhové výseče</i>
    qPainter.drawPie(cx-radius, cy-radius, 2*radius, 2*radius, 16*angle, 16*span)
&nbsp;
&nbsp;
<i># funkce pro vykreslení kruhové úseče zadanou barvou</i>
def <strong>drawChord</strong>(qPainter, color, cx, cy, radius, angle, span):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení kruhové úseče</i>
    qPainter.drawChord(cx-radius, cy-radius, 2*radius, 2*radius, 16*angle, 16*span)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 330
    IMAGE_HEIGHT = 520
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># Vykreslení různých 2D entit</i>
        drawLine(qp, GREEN, 10, 10, 80, 80)
&nbsp;
        for _ in range(250):
            x = random.uniform(90, 160)
            y = random.uniform(10, 80)
            drawPoint(qp, WHITE, x, y)
&nbsp;
        drawRectangle(qp, YELLOW, 10, 90, 70, 70)
        drawCircle(qp, RED, 125, 125, 35)
        drawEllipse(qp, CYAN, 170, 30+80, 70, 35)
        drawEllipse(qp, BLUE, 268, 10+80, 35, 70)
&nbsp;
        drawRoundedRectangle(qp, MAGENTA, 10, 170, 70, 70, 1)
        drawRoundedRectangle(qp, MAGENTA, 90, 170, 70, 70, 10)
        drawRoundedRectangle(qp, MAGENTA, 170, 170, 70, 70, 20)
        drawRoundedRectangle(qp, MAGENTA, 250, 170, 70, 70, 1000)
&nbsp;
        drawArc(qp, CYAN, 10+35, 260+35, 35, 0, 90)
        drawArc(qp, CYAN, 90+35, 260+35, 35, 45, 90)
        drawArc(qp, CYAN, 170+35, 260+35, 35, 45, 180)
        drawArc(qp, CYAN, 250+35, 260+35, 35, 45, 270)
&nbsp;
        drawPie(qp, YELLOW, 10+35, 350+35, 35, 0, 90)
        drawPie(qp, YELLOW, 90+35, 350+35, 35, 45, 90)
        drawPie(qp, YELLOW, 170+35, 350+35, 35, 45, 180)
        drawPie(qp, YELLOW, 250+35, 350+35, 35, 45, 270)
&nbsp;
        drawChord(qp, GREEN, 10+35, 440+35, 35, 0, 90)
        drawChord(qp, GREEN, 90+35, 440+35, 35, 45, 90)
        drawChord(qp, GREEN, 170+35, 440+35, 35, 45, 180)
        drawChord(qp, GREEN, 250+35, 440+35, 35, 45, 270)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Polyčáry (lomené čáry) a polygony (mnohoúhelníky)</h2>

<p>Některé typy 2D entit, zejména lomené čáry a polygony (mnohoúhelníky), mohou
být deklarovány pomocí takřka libovolného množství vrcholů. Z&nbsp;tohoto
důvodu se při vykreslování těchto entit využívá datová struktura nazvaná
<strong>QPolygon</strong> a vykreslení lomené čáry a mnohoúhelníku bude vypadat
následovně:</p>

<pre>
<i># funkce pro vykreslení lomené čáry zadanou barvou</i>
def <strong>drawPolyline</strong>(qPainter, color, polygon):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení lomené čáry</i>
    qPainter.drawPolyline(polygon)
</pre>

<p>a:</p>

<pre>
<i># funkce pro vykreslení polygonu zadanou barvou</i>
def <strong>drawPolygon</strong>(qPainter, color, brush, polygon, fillrule):
    setColor(qPainter, color)
&nbsp;
    <i># změna tvaru štětce</i>
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení polygonu</i>
    qPainter.drawPolygon(polygon, fillrule)
</pre>

<p>Povšimněte si, že u polygonu je možné nastavit režim vyplňování &ndash; buď
se vyplní celá plocha polygonu nebo pouze ta část, která je označena jako
vnitřní <a
href="https://en.wikipedia.org/wiki/Even%E2%80%93odd_rule">algoritmem
sudý-lichý</a>. Tento algoritmus pro libovolný bod X vytvoří paprsek
z&nbsp;tohoto bodu do nekonečna a zjišťuje počet průsečíků paprsku
s&nbsp;hranami objektu. Pokud je počet průsečíků lichý, leží bod X uvnitř
objektu, jinak leží vně. Rozdíl uvidíme <a href="#k18">při kresbě
hvězdy</a>.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Objekt typu <strong>QPolygon</strong>, přetížený operátor &lt;&lt; pro konstrukci polygonu</h2>

<p>Objekt typu <strong>QPolygon</strong> obsahuje souřadnice vrcholů
reprezentované datovou strukturou <strong>QPoint</strong>. To znamená, že pokud
máme sekvenci dvojic [x,y], můžeme z&nbsp;této sekvence vytvořit objekt typu
<strong>QPolygon</strong> relativně snadno, například takto:</p>

<pre>
<i># vytvoření polygonu ze sekvence koordinát [x,y]</i>
def <strong>createPolygon</strong>(coordinatesSequence):
    polygon = QtGui.QPolygon()
    for coordinates in coordinatesSequence:
        p = QtCore.QPoint(coordinates[0], coordinates[1])
        polygon.append(p)
    return polygon
</pre>

<p>Existuje však ještě jednodušší způsob, protože pro objekt
<strong>QPolygon</strong> byl přetížen operátor &lt;&lt;, který taktéž
realizuje metodu <strong>append()</strong>. Funkci tedy můžeme přepsat i
následujícím (pro někoho čitelnějším) způsobem:</p>

<pre>
<i># vytvoření polygonu ze sekvence koordinát [x,y]</i>
def <strong>createPolygon</strong>(coordinatesSequence):
    polygon = QtGui.QPolygon()
    for coordinates in coordinatesSequence:
        p = QtCore.QPoint(coordinates[0], coordinates[1])
        polygon &lt;&lt; p
    return polygon
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Sedmý demonstrační příklad &ndash; vykreslení domku jednou lomenou čarou (polyčarou)</h2>

<p>V&nbsp;dnešním sedmém demonstračním příkladu je ukázáno, jakým způsobem je
možné vykreslit domek jednou lomenou čarou neboli polyčarou. Postup je
následující:</p>

<p>Vytvoříme polygon představující jednotlivé body, které se budou spojovat
tak, aby vznikl domek:</p>

<pre>
polygon = createPolygon([[100, 200],
                         [200, 200],
                         [100, 100],
                         [100, 200],
                         [200, 100],
                         [100, 100],
                         [150,  50],
                         [200, 100],
                         [200, 200]])
</pre>

<p>Vykreslíme polyčáru:</p>

<pre>
<i># vytvoření pera a nastavení barvy kreslení</i>
pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
<i># kreslit se bude právě vytvořeným perem</i>
qPainter.setPen(pen)
&nbsp;
<i># vykreslení lomené čáry</i>
qPainter.drawPolyline(polygon)
</pre>

<p>Výsledek by měl vypadat takto:</p>

<img src="https://i.iinfo.cz/images/335/pyside8-16.png" class="image-318450" alt="&#160;" width="302" height="317" />
<p><i>Obrázek 18: Domek vykreslený jedním tahem.</i></p>

<p>Následuje výpis celého zdrojového kódu demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nastavení barvy kreslení (pera) na zadanou barvu</i>
def <strong>setColor</strong>(qPainter, color):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
&nbsp;
<i># vytvoření polygonu ze sekvence koordinát [x,y]</i>
def <strong>createPolygon</strong>(coordinatesSequence):
    polygon = QtGui.QPolygon()
    for coordinates in coordinatesSequence:
        p = QtCore.QPoint(coordinates[0], coordinates[1])
        polygon.append(p)
    return polygon
&nbsp;
&nbsp;
<i># funkce pro vykreslení lomené čáry zadanou barvou</i>
def <strong>drawPolyline</strong>(qPainter, color, polygon):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení lomené čáry</i>
    qPainter.drawPolyline(polygon)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 300
    IMAGE_HEIGHT = 250
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># Vykreslení různých 2D entit</i>
        polygon = createPolygon([[100, 200],
                                 [200, 200],
                                 [100, 100],
                                 [100, 200],
                                 [200, 100],
                                 [100, 100],
                                 [150,  50],
                                 [200, 100],
                                 [200, 200]])
        drawPolyline(qp, YELLOW, polygon)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Osmý demonstrační příklad &ndash; vykreslení hvězdy s&nbsp;využitím polygonu</h2>

<p>V&nbsp;osmém a současně i dnešním posledním demonstračním příkladu je ukázán
způsob vykreslení hvězdy jedním tahem, tentokrát s&nbsp;využitím 2D entity typu
polygon (mnohoúhelník). Nejprve opět vytvoříme polygon představující vrcholy
hvězdy. Vypomůžeme si funkcí, která vypočítá souřadnice n-tého vrcholu hvězdy.
Ty jsou navzájem otočeny o 360&deg;/5=72&deg;, ovšem jednotlivé vrcholy se
propojují ob jeden, tedy o 144&deg;:</p>

<pre>
<i># výpočet souřadnic n-tého vrcholu hvězdy</i>
def <strong>starVertex</strong>(cx, cy, radius, n):
    angle = math.radians(n*144)
    return cx + radius * math.sin(angle), cy - radius * math.cos(angle)
</pre>

<p>Polygon s&nbsp;vrcholy hvězdy:</p>

<pre>
polygon = createPolygon([starVertex(120, 120, 100, 0),
                         starVertex(120, 120, 100, 1),
                         starVertex(120, 120, 100, 2),
                         starVertex(120, 120, 100, 3),
                         starVertex(120, 120, 100, 4)])
</pre>

<p>Následně hvězdu vykreslíme, a to s&nbsp;různým nastavením parametru
<i>fillrule</i>:</p>

<pre>
qPainter.drawPolygon(polygon, QtCore.Qt.OddEvenFill)
qPainter.drawPolygon(polygon, QtCore.Qt.WindingFill)
</pre>

<p>Výsledek by měl vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/335/pyside8-17.png" class="image-318451" alt="&#160;" width="462" height="317" />
<p><i>Obrázek 19: Hvězdy vykreslené s&nbsp;využitím různých parametrů
<strong>fillrule</strong>.</i></p>

<p>Následuje výpis zdrojového kódu tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nastavení barvy kreslení (pera) na zadanou barvu</i>
def <strong>setColor</strong>(qPainter, color):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
&nbsp;
<i># vytvoření polygonu ze sekvence koordinát [x,y]</i>
def <strong>createPolygon</strong>(coordinatesSequence):
    polygon = QtGui.QPolygon()
    for coordinates in coordinatesSequence:
        p = QtCore.QPoint(coordinates[0], coordinates[1])
        polygon &lt;&lt; p
    return polygon
&nbsp;
&nbsp;
<i># vytvoření štětce z pixmapy</i>
def <strong>createBrushFromPixmap</strong>(filename):
    pixmap = QtGui.QPixmap(filename)
    return QtGui.QBrush(pixmap)
&nbsp;
&nbsp;
<i># funkce pro vykreslení polygonu zadanou barvou</i>
def <strong>drawPolygon</strong>(qPainter, color, brush, polygon, fillrule):
    setColor(qPainter, color)
&nbsp;
    <i># změna tvaru štětce</i>
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení polygonu</i>
    qPainter.drawPolygon(polygon, fillrule)
&nbsp;
&nbsp;
<i># výpočet souřadnic n-tého vrcholu hvězdy</i>
def <strong>starVertex</strong>(cx, cy, radius, n):
    angle = math.radians(n*144)
    return cx + radius * math.sin(angle), cy - radius * math.cos(angle)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 460
    IMAGE_HEIGHT = 250
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        brush = createBrushFromPixmap("pixmaps/voronoi.png")
&nbsp;
        <i># Vykreslení polygonu</i>
        polygon = createPolygon([starVertex(120, 120, 100, 0),
                                 starVertex(120, 120, 100, 1),
                                 starVertex(120, 120, 100, 2),
                                 starVertex(120, 120, 100, 3),
                                 starVertex(120, 120, 100, 4)])
&nbsp;
        drawPolygon(qp, YELLOW, brush, polygon, QtCore.Qt.OddEvenFill)
&nbsp;
        polygon = createPolygon([starVertex(330, 120, 100, 0),
                                 starVertex(330, 120, 100, 1),
                                 starVertex(330, 120, 100, 2),
                                 starVertex(330, 120, 100, 3),
                                 starVertex(330, 120, 100, 4)])
&nbsp;
        drawPolygon(qp, WHITE, brush, polygon, QtCore.Qt.WindingFill)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech osmi dnes popsaných demonstračních příkladů (plus jeden
příklad zmíněný jen částečně) byly opět, podobně jako tomu bylo i
v&nbsp;předchozích článcích, uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>70_brush_pattern_from_pixmap.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/70_brush_pattern_from_pixmap.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/70_brush_pattern_from_pixmap.py</a></td></tr>
<tr><td>71_brush_pattern_from_bitmap.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/71_brush_pattern_from_bitmap.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/71_brush_pattern_from_bitmap.py</a></td></tr>
<tr><td>72_brush_pattern_from_gradient.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/72_brush_pattern_from_gradient.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/72_brush_pattern_from_gradient.py</a></td></tr>
<tr><td>73_brush_pattern_another_gradient.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/73_brush_pattern_another_gradient.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/73_brush_pattern_another_gradient.py</a></td></tr>
<tr><td>74_brush_pattern_radial_gradient.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/74_brush_pattern_radial_gradient.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/74_brush_pattern_radial_gradient.py</a></td></tr>
<tr><td>75_basic_2d_entities.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/75_basic_2d_entities.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/75_basic_2d_entities.py</a></td></tr>
<tr><td>76_polyline_lshift.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/76_polyline_lshift.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/76_polyline_lshift.py</a></td></tr>
<tr><td>76_polyline.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/76_polyline.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/76_polyline.py</a></td></tr>
<tr><td>77_polygon.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/77_polygon.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/77_polygon.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>QImage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html</a>
</li>

<li>QPixmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html</a>
</li>

<li>QBitmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html</a>
</li>

<li>QPaintDevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html</a>
</li>

<li>QPicture<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html</a>
</li>

<li>QPainter<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html</a>
</li>

<li>QPainterPath<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html</a>
</li>

<li>QGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html</a>
</li>

<li>QLinearGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html</a>
</li>

<li>QRadialGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html</a>
</li>

<li>Afinní zobrazení<br />
<a href="https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD">https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

