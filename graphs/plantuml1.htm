<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Nástroje pro tvorbu UML diagramů z příkazové řádky</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Nástroje pro tvorbu UML diagramů z příkazové řádky</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V předchozím článku o nástrojích pro tvorbu grafů a diagramů z příkazové řádky byla popsána utilita gnuplot, sada nástrojů Graphviz a taktéž utilita Ditaa. Žádný z těchto nástrojů však neuměl vytvářet UML diagramy a z tohoto důvodu se dnes zaměříme na program nazvaný PlantUML, který tuto funkcionalitu nabízí.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Nástroje pro tvorbu UML diagramů z příkazové řádky</a></p>
<p><a href="#k02">2. PlantUML</a></p>
<p><a href="#k03">3. Diagram aktivit</a></p>
<p><a href="#k04">4. Změna stylu diagramu aktivit</a></p>
<p><a href="#k05">5. Větvení v&nbsp;diagramu aktivit</a></p>
<p><a href="#k06">6. Diagram tříd</a></p>
<p><a href="#k07">7. Metody a atributy v&nbsp;diagramu tříd</a></p>
<p><a href="#k08">8. Rozhraní v&nbsp;diagramu tříd</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Nástroje pro tvorbu UML diagramů z příkazové řádky</h2>

<p>Jazyk označovaný zkratkou <i>UML</i> neboli <i>Unified Modeling Language</i>
je, jak již jeho název napovídá, unifikovaný modelovací jazyk, který má, na
rozdíl od převážně textově orientovaných programovacích jazyků, vlastní
grafickou syntaxi (tj.&nbsp;pravidla určující způsob sestavování jednotlivých
elementů jazyka do větších objektů) a taktéž sémantiku (tj.&nbsp;jednoznačná
pravidla určující jednotlivým syntaktickým výrazům jejich význam). <i>UML</i>
se dnes používá jak v&nbsp;průběhu návrhu architektury rozsáhlých informačních
systémů, tak i na nižší úrovni: pro popis statického popř.&nbsp;i dynamického
chování jednotlivých modulů, z&nbsp;nichž se informační systém skládá (jak
uvidíme dále, lze například diagram aktivit použít i namísto vývojového
diagramu). Některé společnosti mají celý návrh IS postavený právě na UML, ovšem
většinou se dává přednost pragmatičtějšímu přístupu a využívají se jen některé
UML diagramy, které bývají doplněny například pseudokódem (navíc se ukazuje, že
pro neobjektové prvky informačních systémů, například pro návrh relačních
databází, nemusí být UML tím nejlepším řešením, což do značné míry souvisí se
způsobem vývoje UML).</p>

<p>Některými nástroji určenými pro tvorbu UML diagramů jsme se již zabývali
téměř před deseti lety :-) v&nbsp;článku, který naleznete na adrese <a
href="http://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/">http://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/</a>.
Většina zmíněných nástrojů kupodivu stále existuje (samozřejmě
v&nbsp;modernizované podobě), i když v&nbsp;některých případech došlo ke změně
jejich jména. Dnes se ovšem budeme zabývat utilitou, která od uživatele
nevyžaduje ani ruční kreslení diagramů s&nbsp;využitím grafického uživatelského
rozhraní a dokonce ani nezpracovává zdrojové kódy a netvoří z&nbsp;nich diagram
tříd. Tento relativně jednoduše použitelný nástroj se jmenuje
<i>PlantUML</i>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. PlantUML</h2>

<p>Nástroj <i>PlantUML</i> (<a
href="http://plantuml.sourceforge.net/">http://plantuml.sourceforge.net/</a>)
dokáže na základě textového popisu UML diagramu vytvořit bitmapový obrázek
s&nbsp;tímto diagramem, přičemž uživatel může do jisté míry ovlivnit způsob
jeho vykreslení, přidat popis hran apod. V&nbsp;současné verzi <i>PlantUML</i>
jsou podporovány následující typy UML diagramů: diagram aktivit, stavový
diagram, diagram tříd, diagram objektů, diagram komponent, diagram užití a
sekvenční diagram. Ve skutečnosti sice UML popisuje i další typy diagramů,
ovšem <i>PlantUML</i> s&nbsp;velkou pravděpodobností dokáže pokrýt většinu
potřeb analytiků i programátorů, protože v&nbsp;nabídce podporovaných diagramů
jsou zastoupeny všechny tři kategorie: popis struktury informačního systému,
popis chování informačního systému a popis interakce či komunikace.
<i>PlantUML</i> je naprogramovaný v&nbsp;Javě, ovšem podobně jako tomu bylo
v&nbsp;případě minule popsaného nástroje <i>Ditaa</i> se jedná o relativně malý
program, který pro svůj běh nevyžaduje enormní množství zdrojů (diskový
prostor, RAM atd.). Pro uživatele <i>PlantUML</i> je na adrese <a
href="http://sourceforge.net/projects/plantuml/files/plantuml.jar/download">http://sourceforge.net/projects/plantuml/files/plantuml.jar/download</a>
k&nbsp;dispozici spustitelný Java archiv, dále je vhodné si stáhnout referenční
příručku k&nbsp;jazyku z&nbsp;adresy <a
href="http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf">http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf</a>.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Diagram aktivit</h2>

<p>V&nbsp;diskuzi vedené pod předchozím článkem se mj.&nbsp;řešila i
problematika (automatizovaného) vykreslování vývojových diagramů (<i>flow
chart</i>). Klasické vývojové diagramy sice nejsou v&nbsp;UML přímo
podporovány, ale existuje zde velmi podobný typ diagramu nazvaný <i>diagram
aktivit</i>. Tímto diagramem je možné nahradit vývojové diagramy
s&nbsp;větvením i programovými smyčkami. Diagram aktivit lze
v&nbsp;<i>PlantUML</i> vytvořit velmi jednoduchým způsobem, což si ostatně
ukážeme na několika demonstračních příkladech.</p>

<p>První příklad obsahuje definici diagramu aktivit, který obsahuje jen jedinou
akci, tj.&nbsp;uzel představující většinou dále nedělený krok, který se
v&nbsp;systému provádí. Diagram obsahuje symbol inicializace (černá tečka),
koncový bod (kružnice s&nbsp;černou tečkou uprostřed) a uzel s&nbsp;prováděným
krokem. Mezi symbolem inicializace a uzlem je nakreslena šipka, podobná šipka
je pak nakreslena mezi uzlem a koncovým bodem. V&nbsp;<i>PlantUML</i> je tento
diagram představován následujícím kódem (textovým souborem). Povšimněte si
použití symbolů (*) jak pro symbol inicializace, tak i pro koncový bod:</p>

<pre>
@startuml
(*) --&gt; "Aktivita"
"Aktivita" --&gt; (*)
@enduml
</pre>

<p>Deklarace začíná řádkem <strong>@startuml</strong> a končí řádkem
<strong>@enduml</strong>. Zajímavé je, že není nutné uvádět typ diagramu
&ndash; ten je odvozen z&nbsp;kontextu.</p>

<p>Spuštění se provede následovně:</p>

<pre>
java -jar plantuml.jar ActivityDiagram1.txt
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-1.png" class="image-195537" width="82" height="173" alt="&#160;" />
<p><i>Obrázek 1: Diagram aktivit vygenerovaný ze zdrojového kódu prvního
příkladu. Ve výchozím nastavení jsou uzly umístěné pod sebe a šipky mezi nimi
směřují vertikálně dolů (v&nbsp;případě, že není použito rozvětvení, kterým se
budeme zabývat níže).</i></p>

<p>Podívejme se nyní na nepatrně složitější diagram aktivit, který obsahuje dva
sekvenčně prováděné kroky. Tento diagram je možné vytvořit explicitním uvedením
všech vazeb (šipek) mezi oběma uzly, symbolem inicializace i koncovým bodem.
Takto deklarovaný diagram může být výsledkem práce nějakého skriptu apod.:</p>

<pre>
@startuml
(*) --&gt; "Aktivita1"
"Aktivita1" --&gt; "Aktivita2"
"Aktivita2" --&gt; (*)
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-2.png" class="image-195538" width="90" height="247" alt="&#160;" />
<p><i>Obrázek 2: Diagram aktivit vygenerovaný ze zdrojového kódu druhého příkladu.</i></p>

<p>Ve skutečnosti je ale možné popis diagramu zjednodušit způsobem naznačeným
pod tímto odstavcem. Povšimněte si, že každý uzel je zde zmíněn pouze
jedenkrát, protože vazba mezi uzlem &bdquo;Aktivita1&ldquo; a
&bdquo;Aktivita2&ldquo; je naznačena samostatnou šipkou:</p>

<pre>
@startuml
(*) --&gt; "Aktivita1"
--&gt; "Aktivita2"
--&gt; (*)
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-3.png" class="image-195539" width="90" height="247" alt="&#160;" />
<p><i>Obrázek 3: Diagram aktivit vygenerovaný ze zdrojového kódu třetího
příkladu. Tento obrázek je totožný s&nbsp;druhým obrázkem, ovšem deklarace
diagramu aktivit je jednodušší.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Změna stylu diagramu aktivit</h2>

<p>Jak již bylo řečeno v&nbsp;úvodní kapitole, je možné při tvorbě diagramů
s&nbsp;využitím nástroje <i>PlantUML</i> ovlivnit způsob vykreslení diagramu.
V&nbsp;mnoha případech se nevyhneme přidání popisu k&nbsp;jednotlivým šipkám
diagramu aktivit, což lze zajistit zápisem poznámky do hranatých závorek:</p>

<pre>
@startuml
(*) --&gt; [začátek procesu] "Aktivita1"
--&gt; [zpracování požadavku] "Aktivita2"
--&gt; [konec procesu] (*)
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-4.png" class="image-195540" width="196" height="301" alt="&#160;" />
<p><i>Obrázek 4: Diagram aktivit vygenerovaný ze zdrojového kódu čtvrtého
příkladu. Uzly jsou v&nbsp;tomto diagramu umístěny pod sebe.</i></p>

<p>Taktéž je možné změnit uspořádání uzlů (a tím pádem i směr šipek). Namísto
symbolu --&gt; představujícího šipku je možné alternativně použít:</p>

<ol>
<li>-down-&gt; odpovídá běžné šipce směřující (šikmo) dolů</li>
<li>-right-&gt; šipka orientovaná doprava</li>
<li>-&gt; stejný význam jako má předchozí symbol</li>
<li>-left-&gt; šipka orientovaná doleva</li>
<li>-up-&gt; šipka orientovaná nahoru</li>
</ol>

<p>Zkusme si nyní předchozí diagram změnit takovým způsobem, aby byly všechny
uzly umístěné v&nbsp;jedné horizontální rovině. Úprava je ve skutečnosti velmi
jednoduchá:</p>

<pre>
@startuml
(*) -right-&gt; [začátek procesu] "Aktivita1"
-right-&gt; [zpracování požadavku] "Aktivita2"
-right-&gt; [konec procesu] (*)
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-5.png" class="image-195541" width="611" height="52" alt="&#160;" />
<p><i>Obrázek 5: Diagram aktivit vygenerovaný ze zdrojového kódu pátého
příkladu. Nyní jsou všechny uzly zobrazeny v&nbsp;jedné horizontální
rovině.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Větvení v&nbsp;diagramu aktivit</h2>

<p>Velmi důležitou součástí naprosté většiny diagramů aktivit je rozvětvení. To
je reprezentováno malým kosočtvercem, takže se tento prvek diagramu podobá
rozvětvení používaného v&nbsp;klasickém vývojovém diagramu, ovšem s&nbsp;tím
rozdílem, že se podmínka pro rozvětvení může (ale nemusí) psát do předchozího
kroku (zde si dovolím sémantiku diagramu aktivit nepatrně pozměnit, protože
samotné rozvětvení není v&nbsp;diagramu aktivit chápáno jako samostatný krok).
Pojďme si nyní ukázat, jak by se postupovalo při vytváření diagramu
analogickému známému vtípku o univerzálním návodu na opravu všeho: <a
href="http://joyreactor.com/post/287235">http://joyreactor.com/post/287235</a>.
Zde se již setkáme s&nbsp;potřebou větvení, které se do diagramu aktivit
zapisuje &ndash; což mnoho programátorů patrně potěší &ndash; pomocí slov
<strong>if</strong>, <strong>then</strong>, <strong>else</strong> a
<strong>endif</strong>. Jednoduché rozvětvení může být zapsáno následovně:</p>

<pre>
@startuml
(*) --&gt; "Does it move?"
if "" then
--&gt; [yes] "WD-40"
else
--&gt; [no] "Duct Tape"
endif
"WD-40" --&gt; (*)
"Duct Tape" --&gt; (*)
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-6.png" class="image-195542" width="181" height="335" alt="&#160;" />
<p><i>Obrázek 6: Jednoduché rozvětvení reprezentované v&nbsp;diagramu
aktivit.</i></p>

<p>Rozvětvení deklarované v&nbsp;předchozím diagramu se sice vykreslilo
korektně (= tak, jak jsme předpokládali), ovšem následující část již způsobí
problémy, neboť <i>PlantUML</i> bude považovat oba uzly nadepsané &bdquo;Should
it?&ldquo; za uzel jediný. Ostatně můžeme si to sami vyzkoušet:</p>

<pre>
@startuml
(*) --&gt; "Does it move?"
if "" then
--&gt; [yes] "Should it?"
else
--&gt; [no] "Should it?"
endif
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-7.png" class="image-195543" width="124" height="272" alt="&#160;" />
<p><i>Obrázek 7: Namísto dvou uzlů máme uzel jediný.</i></p>

<p>Řešení tohoto problému je poměrně jednoduché. <i>PlantUML</i> totiž umožňuje
pojmenovat jednotlivé uzly (kroky), přičemž zadaná jména se mohou odlišovat od
textů zobrazených v&nbsp;uzlu. V&nbsp;našem případě tedy můžeme první uzel
pojmenovat <strong>s1</strong> a druhý <strong>s2</strong>, což je patrné
z&nbsp;následujícího upraveného demonstračního příkladu:</p>

<pre>
@startuml
(*) --&gt; "Does it move?"
if "" then
--&gt; [yes] "Should it?" as s1
else
--&gt; [no] "Should it?" as s2
endif
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-8.png" class="image-195544" width="199" height="272" alt="&#160;" />
<p><i>Obrázek 8: Dva rozdílné uzly se stejným textem.</i></p>

<p>Jednotlivé větve se samozřejmě mohou (a musí) dále rozvětvovat.
V&nbsp;deklaraci diagramu se to zařídí jednoduše &ndash; vnořenými strukturami
<strong>if-then-else-endif</strong>. Zkusme nyní upravit náš demonstrační
příklad takovým způsobem, aby se použilo další rozvětvení v&nbsp;obou dalších
větvích:</p>

<pre>
@startuml
(*) --&gt; "Does it move?"
&nbsp;
if "" then
--&gt; [yes] "Should it?" as s1
if "" then
--&gt; [yes] "No problem" as np1
else
--&gt; [no] "Use duct tape"
endif
&nbsp;
else
--&gt; [no] "Should it?" as s2
if "" then
--&gt; [yes] "Use WD-40"
else
--&gt; [no] "No problem" as np2
endif
&nbsp;
endif
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-9.png" class="image-195545" width="459" height="430" alt="&#160;" />
<p><i>Obrázek 9: Návod jak opravit vše, alfa verze.</i></p>

<p>Zbývá nám doplnit koncový bod, což je již snadné:</p>

<pre>
@startuml
(*) --&gt; "Does it move?"
&nbsp;
if "" then
--&gt; [yes] "Should it?" as s1
if "" then
--&gt; [yes] "No problem" as np1
np1 --&gt; (*)
else
--&gt; [no] "Use duct tape" as tape
tape --&gt; (*)
endif
&nbsp;
else
--&gt; [no] "Should it?" as s2
if "" then
--&gt; [yes] "Use WD-40" as wd40
wd40 --&gt; (*)
else
--&gt; [no] "No problem" as np2
np2 --&gt; (*)
endif
&nbsp;
endif
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-10.png" class="image-195546" width="459" height="430" alt="&#160;" />
<p><i>Obrázek 10: Návod jak opravit vše, beta verze.</i></p>

<p>Pro lepší názornost je možné jednotlivé podvětve zvýraznit odsazením, které
je samozřejmě taktéž podporováno:</p>

<pre>
@startuml
(*) --&gt; "Does it move?"
&nbsp;
if "" then
&nbsp;
    --&gt; [yes] "Should it?" as s1
    if "" then
        --&gt; [yes] "No problem" as np1
        np1 --&gt; (*)
    else
        --&gt; [no] "Use duct tape" as tape
        tape --&gt; (*)
    endif
&nbsp;
else
&nbsp;
    --&gt; [no] "Should it?" as s2
    if "" then
        --&gt; [yes] "Use WD-40" as wd40
        wd40 --&gt; (*)
    else
        --&gt; [no] "No problem" as np2
        np2 --&gt; (*)
    endif
&nbsp;
endif
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-11.png" class="image-195547" width="459" height="493" alt="&#160;" />
<p><i>Obrázek 11: Návod jak opravit vše, finální verze.</i></p>

<p>Na závěr si ještě ukažme, jak se k&nbsp;jednotlivým uzlům mohou přiřadit
poznámky (notes). Povšimněte si, že u uzlů je možné specifikovat, zda se
poznámka zobrazí nalevo či napravo a taktéž to, že je možné zapisovat poznámku
na větší množství řádků:</p>

<pre>
@startuml
(*) --&gt; "Some Activity"
note right: This activity has to be defined
"Some Activity" --&gt; (*)
note left
This note is on
several lines
end note
@endum
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-12.png" class="image-195548" width="441" height="193" alt="&#160;" />
<p><i>Obrázek 12: Poznámky přiřazené k&nbsp;uzlům.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Diagram tříd</h2>

<p>Druhým velmi často používaným diagramem definovaným ve standardu UML je
diagram tříd (<i>class diagram</i>). V&nbsp;tomto typu diagramu je možné
zobrazit jednoduché i složitější vztahy mezi třídami, například fakt, že třída
<strong>Boolean</strong> je potomkem třídy <strong>Object</strong> (příklad je
převzatý z&nbsp;Javy):</p>

<pre>
@startuml
Object &lt;|-- Boolean
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-13.png" class="image-195549" width="100" height="175" alt="&#160;" />
<p><i>Obrázek 13: Vztah mezi třídami Object a Boolean zobrazený v&nbsp;diagramu
tříd.</i></p>

<p>Můžeme samozřejmě zobrazit i vazby mezi větším počtem tříd. Povšimněte si,
že nikde není zapotřebí specifikovat, že se má zobrazit diagram tříd a ne
diagram aktivit: toto rozhodnutí provede <i>PlantUML</i> automaticky:</p>

<pre>
@startuml
Object &lt;|-- Boolean
Object &lt;|-- String
Object &lt;|-- Number
Number &lt;|-- Integer
Number &lt;|-- Double
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-14.png" class="image-195550" width="373" height="283" alt="&#160;" />
<p><i>Obrázek 14: Vztahy mezi větším počtem tříd.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Metody a atributy v&nbsp;diagramu tříd</h2>

<p>U jednotlivých tříd je možné deklarovat jejich atributy a taktéž metody.
Příklad popsaný v&nbsp;předchozí kapitole je možné relativně jednoduchým
způsobem vylepšit o atributy a metody. Je to velmi snadné &ndash; postačuje
napsat jméno třídy a za dvojtečkou pak jméno atributu či jméno metody (i se
závorkami, samozřejmě i s&nbsp;názvy parametrů, pokud je to nutné):</p>

<pre>
@startuml
Object &lt;|-- Boolean
Object: equals()
Object: hashCode()
Object: clone()
Object &lt;|-- String
Object &lt;|-- Number
Boolean: FALSE
Boolean: TRUE
Number: byteValue()
Number &lt;|-- Integer
Number &lt;|-- Double
String: indexOf()
String: isEmpty()
String: length()
String: split()
Integer: MAX_VALUE
Integer: MIN_VALUE
Double: MAX_VALUE
Double: MIN_VALUE
Double: POSITIVE_INFINITY
Double: NEGATIVE_INFINITY
Double: NaN
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-15.png" class="image-195551" width="367" height="359" alt="&#160;" />
<p><i>Obrázek 15: Atributy a metody několika tříd v&nbsp;hierarchii.</i></p>

<p>Pokud je nutné zvýraznit i přístupová práva k&nbsp;atributům, je vhodnější
použít alternativní způsob zápisu metadat o třídě. Ten se podobá zápisu
deklarace třídy v&nbsp;C++ či Javě, přičemž znaky se speciálním významem před
názvem atributu určují viditelnost i přístupová práva:</p>

<pre>
@startuml
class TestClass {
-privateField
#protectedField
~packageProtectedField
+publicField
}
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-16.png" class="image-195552" width="170" height="118" alt="&#160;" />
<p><i>Obrázek 16: Třída s&nbsp;atributy, které mají různá přístupová
práva.</i></p>

<p>Pro úplnost doplňme třídu i o metody s&nbsp;různými přístupovými právy:</p>

<pre>
@startuml
class TestClass {
-privateField
#protectedField
~packageProtectedField
+publicField
-privateMethod()
#protectedMethod()
~packageProtectedMethod()
+publicMethod()
}
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-17.png" class="image-195553" width="193" height="169" alt="&#160;" />
<p><i>Obrázek 17: Třída s&nbsp;atributy a metodami, které mají různá přístupová
práva. Povšimněte si oddělení atributů od metod, to je provedeno
automaticky.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Rozhraní v&nbsp;diagramu tříd</h2>

<p>Poslední důležitou vlastností nástroje <i>PlantUML</i> při práci
s&nbsp;diagramem tříd je vytvoření uzlů představujících rozhraní. Prvním krokem
je změna stylu šipek &ndash; namísto plných úseček se použijí čárkované úsečky,
a to použitím jiného symbolu pro šipky v&nbsp;deklaraci diagramu:</p>

<pre>
@startuml
"Iterable&lt;E&gt;" &lt;|.. "Collection&lt;E&gt;"
"Collection&lt;E&gt;" &lt;|.. "List&lt;E&gt;"
"Collection&lt;E&gt;" &lt;|.. "Queue&lt;E&gt;"
"Collection&lt;E&gt;" &lt;|.. "Set&lt;E&gt;"
"Set&lt;E&gt;" &lt;|.. "SortedSet&lt;E&gt;"
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-18.png" class="image-195554" width="371" height="391" alt="&#160;" />
<p><i>Obrázek 18: Třídy nebo rozhraní?</i></p>

<p>Ve skutečnosti je však předchozí diagram nekorektní, protože
<strong>Iterable</strong> atd. jsou skutečná rozhraní a měla by být označena
písmenem <strong>I</strong> (<i>interface</i>) a nikoli <strong>C</strong>
(<i>class</i>). To lze velmi snadno napravit použitím slova
<strong>interface</strong>:</p>

<pre>
@startuml
interface "Iterable&lt;E&gt;" &lt;|.. interface "Collection&lt;E&gt;"
"Collection&lt;E&gt;" &lt;|.. interface "List&lt;E&gt;"
"Collection&lt;E&gt;" &lt;|.. interface "Queue&lt;E&gt;"
"Collection&lt;E&gt;" &lt;|.. interface "Set&lt;E&gt;"
"Set&lt;E&gt;" &lt;|.. interface "SortedSet&lt;E&gt;"
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-19.png" class="image-195555" width="371" height="391" alt="&#160;" />
<p><i>Obrázek 19: Nyní jsou rozhraní skutečná rozhraní.</i></p>

<p>Pro úplnost si ještě ukažme poněkud složitější příklad s&nbsp;větším
množstvím rozhraní a současně i tříd. Povšimněte si, že jedna třída může
implementovat větší množství rozhraní:</p>

<pre>
@startuml
interface "Iterable&lt;E&gt;" &lt;|.. interface "Collection&lt;E&gt;"
"Collection&lt;E&gt;" &lt;|.. interface "List&lt;E&gt;"
"Collection&lt;E&gt;" &lt;|.. interface "Queue&lt;E&gt;"
"Collection&lt;E&gt;" &lt;|.. interface "Set&lt;E&gt;"
"Set&lt;E&gt;" &lt;|.. interface "SortedSet&lt;E&gt;"
"List&lt;E&gt;" &lt;|.. ArrayList
"List&lt;E&gt;" &lt;|.. LinkedList
"Set&lt;E&gt;" &lt;|.. HashSet
"Set&lt;E&gt;" &lt;|.. TreeSet
"SortedSet&lt;E&gt;" &lt;|.. TreeSet
"Queue&lt;E&gt;" &lt;|.. LinkedList
@enduml
</pre>

<img src="http://i.iinfo.cz/images/487/plantuml-20.png" class="image-195556" width="547" height="499" alt="&#160;" />
<p><i>Obrázek 20: Diagram rozhraní a tříd.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Odkazy na Internetu</h2>

<ol>

<li>Nástroje pro tvorbu UML diagramů (nikoli z&nbsp;příkazové řádky):<br />
<a href="http://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/">http://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/</a>
</li>

<li>PlantUML (home page)<br />
<a href="http://plantuml.sourceforge.net/">http://plantuml.sourceforge.net/</a>
</li>

<li>PlantUML (download page)<br />
<a href="http://sourceforge.net/projects/plantuml/files/plantuml.jar/download">http://sourceforge.net/projects/plantuml/files/plantuml.jar/download</a>
</li>

<li>PlantUML (Language Reference Guide)<br />
<a href="http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf">http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf</a>
</li>

<li>Plain-text diagrams take shape in Asciidoctor!<br />
<a href="http://asciidoctor.org/news/2014/02/18/plain-text-diagrams-in-asciidoctor/">http://asciidoctor.org/news/2014/02/18/plain-text-diagrams-in-asciidoctor/</a>
</li>

<li>Graphviz - Graph Visualization Software<br />
<a href="http://www.graphviz.org/">http://www.graphviz.org/</a>
</li>

<li>graphviz (Manual Page)<br />
<a href="http://www.root.cz/man/7/graphviz/">http://www.root.cz/man/7/graphviz/</a>
</li>

<li>dot (Manual page)<br />
<a href="http://www.root.cz/man/1/dot/">http://www.root.cz/man/1/dot/</a>
</li>

<li>Ditaa home page<br />
<a href="http://ditaa.sourceforge.net/">http://ditaa.sourceforge.net/</a>
</li>

<li>Ditaa introduction<br />
<a href="http://ditaa.sourceforge.net/#intro">http://ditaa.sourceforge.net/#intro</a>
</li>

<li>Ditaa usage<br />
<a href="http://ditaa.sourceforge.net/#usage">http://ditaa.sourceforge.net/#usage</a>
</li>

<li>Node, Edge and Graph Attributes<br />
<a href="http://www.graphviz.org/doc/info/attrs.html">http://www.graphviz.org/doc/info/attrs.html</a>
</li>

<li>Graphviz (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Graphviz">http://en.wikipedia.org/wiki/Graphviz</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

