<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Nástroje pro tvorbu UML diagramů z příkazové řádky (II)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Nástroje pro tvorbu UML diagramů z příkazové řádky (II)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o nástrojích určených pro kreslení UML diagramů z příkazové řádky si ukážeme způsob tvorby dalších typů diagramů v nástroji PlantUML. Minule jsme se zabývali především kreslením diagramů aktivit a diagramů tříd, dnes se bude jednat o stavové diagramy a sekvenční diagramy.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Nástroje pro tvorbu UML diagramů z příkazové řádky (II)</a></p>
<p><a href="#k02">2. Stavové diagramy</a></p>
<p><a href="#k03">3. Tvorba stavových diagramů v&nbsp;PlantUML</a></p>
<p><a href="#k04">4. Složitější diagram</a></p>
<p><a href="#k05">5. Hierarchické členění stavových diagramů</a></p>
<p><a href="#k06">6. Sekvenční diagramy</a></p>
<p><a href="#k07">7. Tvorba sekvenčních diagramů v&nbsp;PlantUML</a></p>
<p><a href="#k08">8. Nastavení vlastností sekvenčních diagramů</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Nástroje pro tvorbu UML diagramů z příkazové řádky (II)</h2>

<p><a
href="http://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky/">V&nbsp;úvodní
části článku</a> o nástrojích, které lze použít pro neinteraktivní tvorbu UML
diagramů z&nbsp;příkazové řádky, jsme si řekli základní informace o poměrně
propracovaném a přitom relativně malém a snadno ovladatelném nástroji
s&nbsp;názvem <a href="http://plantuml.sourceforge.net/">PlantUML</a>. Víme
již, jak lze v&nbsp;<i>PlantUML</i> kreslit základní <i>diagramy aktivit</i>
(což je vylepšená varianta klasických vývojových diagramů, ovšem
s&nbsp;podporou kresby paralelních větví apod.) a taktéž <i>diagramy tříd</i>,
které ovšem ve skutečnosti mohou být použity i v&nbsp;mnoha dalších situacích,
například při grafickém popisu struktury relační databáze. Současný standard
jazyka UML však popisuje i mnoho dalších typů diagramů, které se rozdělují do
třech kategorií: diagramy popisující strukturu informačního (či jiného)
systému, diagramy popisující dynamické chování informačního systému a diagramy
interakce mezi systémem a jeho okolím.</p>

<img src="http://i.iinfo.cz/images/487/plantuml-11.png" class="image-195547" width="459" height="493" alt="&#160;" />
<p><i>Obrázek 1: Diagram aktivit vykreslený nástrojem PlantUML.</i></p>

<p>Mezi UML diagramy vyjadřující (statickou) strukturu popisovaného systému
patří <a
href="http://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky/#k06">již
minule zmíněný</a> <i>diagram tříd</i>, <i>diagram objektů (instancí)</i>,
<i>diagram komponent</i> či <i>diagram balíčků</i>. Při popisu chování systému
se používají <a
href="http://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky/#k03">taktéž
již minule popsané</a> <i>diagramy aktivit</i>, níže zmíněné <i>stavové
diagramy</i> a <i>diagramy užití</i>. Pokud je zapotřebí graficky popsat
interakci systému se svým okolím (popř.&nbsp;interakci mezi jednotlivými moduly
či dokonce objekty), používají se pro tento účel <i>sekvenční diagramy</i>,
<i>diagramy interakcí</i> a v&nbsp;neposlední řadě i <i>diagramy
komunikace</i>. Na tomto místě je však vhodné poznamenat, že počet různých typů
diagramů i jejich sémantika se ve specifikacích UML postupně rozšiřuje (i když
na druhou stranu nijak zásadně).</p>

<img src="http://i.iinfo.cz/images/487/plantuml-20.png" class="image-195556" width="547" height="499" alt="&#160;" />
<p><i>Obrázek 2: Diagram tříd vykreslený nástrojem PlantUML.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Stavové diagramy</h2>

<p>Velmi často používaným typem UML diagramů jsou <i>stavové diagramy</i>
neboli <i>state diagrams</i>, které lze využít pro popis konečného počtu stavů
popisovaného systému a především pak přechodů mezi jednotlivými stavy (navíc se
zde objevuje koncept událostí). Ve své nejjednodušší podobě je možné stavovým
diagramem reprezentovat klasický stavový automat, ovšem možnosti UML jsou
v&nbsp;tomto případě ještě rozšířeny o takzvané pseudostavy. Příkladem
pseudostavu může být rozvětvení (<i>fork</i>) či naopak spojení (<i>join</i>)
popř.&nbsp;pseudostav rozhodování (ten však nemá stejný význam, jako rozvětvení
používané v&nbsp;případě minule popsaného <i>diagramu aktivit</i>).
V&nbsp;následujících třech kapitolách si ukážeme, jakým způsobem je možné
<i>stavové diagramy</i> vykreslovat v&nbsp;nástroji <i>PlantUML</i> i to, jak
lze stavové diagramy hierarchicky rozdělovat, což je v&nbsp;případě
složitějších systémů nezbytné pro zachování srozumitelnosti a současně i
dostatečné podrobnosti stavového diagramu.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Tvorba stavových diagramů v&nbsp;PlantUML</h2>

<p>V&nbsp;nástroji <i>PlantUML</i> se pro tvorbu stavových diagramů používá
především symbol <strong>--&gt;</strong>, jímž se značí přechod mezi dvěma
stavy systému. Na levé i pravé straně tohoto symbolu se může
v&nbsp;nejjednodušším případě nacházet jméno stavu popř.&nbsp;speciální symbol
[*] značící buď počáteční pseudostav (<i>initial state</i>) popř.&nbsp;koncový
pseudostav (<i>final state</i>). Podívejme se nyní na nejjednodušší možný
stavový diagram, který obsahuje jeden normální stav, počáteční pseudostav a
koncový pseudostav. Najdeme zde i dvojici přechodů. První přechod je vytvořen
mezi počátečním pseudostavem a jediným stavem automatu, další přechod pak mezi
tímto stavem a koncovým pseudostavem:</p>

<pre>
@startuml
&nbsp;
[*] --&gt; Stav
Stav --&gt; [*]
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-9.png" class="image-196209" width="67" height="229" alt="&#160;" />
<p><i>Obrázek 3: Stavový diagram vytvořený na základě prvního demonstračního
příkladu.</i></p>

<p>Stavový diagram samozřejmě můžeme dále rozšiřovat. Ve výchozím nastavení se
jednotlivé stavy kreslí pod sebe, ovšem ve chvíli, kdy se namísto symbolu
<strong>--&gt;</strong> použije symbol <strong>-&gt;</strong>, dokáže
<i>PlantUML</i> tyto stavy vykreslit vedle sebe:</p>

<pre>
@startuml
&nbsp;
[*] --&gt; Stav1
Stav1 --&gt; [*]
&nbsp;
Stav1 -&gt; Stav2
Stav2 --&gt; [*]
&nbsp;
@enduml
</pre>

<p>Podívejme se nyní na nepatrně složitější diagram se třemi různými stavy
reprezentujícími tři základní skupenství vody (za běžných podmínek). Tento
diagram nám bude v&nbsp;další kapitole sloužit jako základ pro další
rozšiřování a vylepšování (počáteční a koncový pseudostav je zde uveden
pro úplnost a taktéž proto, aby <i>PlantUML</i> korektně rozpoznal, jaký
diagram má nakreslit):</p>

<img src="http://i.iinfo.cz/images/582/diags-10.png" class="image-196210" width="168" height="229" alt="&#160;" />
<p><i>Obrázek 4: Stavový diagram vytvořený na základě druhého demonstračního
příkladu.</i></p>

<pre>
@startuml
&nbsp;
[*] --&gt; Led
Led --&gt; Kapalina
Kapalina --&gt; Pára
Pára --&gt; Led
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-11.png" class="image-196211" width="126" height="369" alt="&#160;" />
<p><i>Obrázek 5: Stavový diagram vytvořený na základě třetího demonstračního
příkladu.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Složitější diagram</h2>

<p>Diagram z&nbsp;obrázku číslo 5 ve skutečnosti není zcela korektní, protože
neobsahuje všechny fyzikálně možné přechody mezi třemi skupenstvími vody.
Musíme tedy diagram rozšířit i o další tři přechody. To je v&nbsp;našem případě
velmi snadné, což je ostatně patrné i při pohledu na následující zdrojový kód.
Povšimněte si, že každý stav je zde zmíněn několikrát:</p>

<pre>
@startuml
&nbsp;
[*] --&gt; Led
&nbsp;
Led --&gt; Kapalina
Kapalina --&gt; Led
&nbsp;
Kapalina --&gt; Pára
Pára --&gt; Kapalina
&nbsp;
Pára --&gt; Led
Led --&gt; Pára
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-12.png" class="image-196212" width="134" height="369" alt="&#160;" />
<p><i>Obrázek 6: Stavový diagram vytvořený na základě čtvrtého demonstračního
příkladu.</i></p>

<p>K&nbsp;jednotlivým přechodům je možné přidat i popis, což je v&nbsp;praxi
velmi důležité. U našeho demonstračního příkladu je popis jednoduchý &ndash;
stavy představují skupenství vody, přechody pak proces vedoucí ke změně
skupenství &ndash; vypařování, zkapalnění, tání, tuhnutí, sublimace a
desublimace:</p>

<pre>
@startuml
&nbsp;
[*] --&gt; Led
&nbsp;
Led --&gt; Kapalina :tání
Kapalina --&gt; Led :tuhnutí
&nbsp;
Kapalina --&gt; Pára :vypařování
Pára --&gt; Kapalina :zkapalnění
&nbsp;
Pára --&gt; Led :desublimace
Led --&gt; Pára :sublimace
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-13.png" class="image-196213" width="395" height="407" alt="&#160;" />
<p><i>Obrázek 7: Stavový diagram vytvořený na základě pátého demonstračního
příkladu.</i></p>

<p>Vizuálně nepěkné vzájemné posunutí jednotlivých uzlů diagramu lze snadno (i
když ne zcela přesně) &bdquo;usměrnit&ldquo; pomocí symbolu
<strong>-&gt;</strong>, kterým se vedle sebe umístí uzly s&nbsp;názvy
&bdquo;Led&ldquo; a &bdquo;Kapalina&ldquo;:</p>

<pre>
@startuml
&nbsp;
[*] --&gt; Led
&nbsp;
Kapalina -&gt; Led :tuhnutí
Led -&gt; Kapalina :tání
&nbsp;
Kapalina --&gt; Pára :vypařování
Pára --&gt; Kapalina :zkapalnění
&nbsp;
Pára --&gt; Led :desublimace
Led --&gt; Pára :sublimace
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-14.png" class="image-196214" width="402" height="279" alt="&#160;" />
<p><i>Obrázek 8: Stavový diagram vytvořený na základě šestého demonstračního
příkladu. Dva uzly se nachází na stejné horizontální úrovni.</i></p>

<p>Pro doplnění lze k&nbsp;jednotlivým uzlům (tedy stavům, skupenstvím)
přiřadit i další text. Nejjednodušeji to lze provést tak, jak je naznačeno
v&nbsp;dalším příkladu &ndash; uvedou se jména uzlů, dvojtečka a libovolný
text, který je do uzlů přidán:</p>

<pre>
@startuml
&nbsp;
[*] --&gt; Led
&nbsp;
Kapalina -&gt; Led :tuhnutí
Led -&gt; Kapalina :tání
&nbsp;
Kapalina --&gt; Pára :vypařování
Pára --&gt; Kapalina :zkapalnění
&nbsp;
Pára --&gt; Led :desublimace
Led --&gt; Pára :sublimace
&nbsp;
<strong>Kapalina: 0°C až 100°C</strong>
<strong>Led: &lt; 0°C</strong>
<strong>Pára: &gt; 100°C</strong>
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-15.png" class="image-196215" width="402" height="279" alt="&#160;" />
<p><i>Obrázek 9: Stavový diagram vytvořený na základě sedmého demonstračního
příkladu. Ke všem uzlům byl přidán další text.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Hierarchické členění stavových diagramů</h2>

<p>Mnoho systémů je tak složitých, že jejich popis s&nbsp;využitím pouze
jediného &bdquo;plochého&ldquo; stavového diagramu by byl značně nepřehledný.
V&nbsp;tuto chvíli se však dá využít další vlastnost UML podporovaná i
nástrojem <i>PlantUML</i>. Jedná se o hierarchické rozčlenění stavového
diagramu na podcelky. Podívejme se na další demonstrační příklad, v&nbsp;němž
je první i druhý stav rozdělen na dva stavové poddiagramy. Ty jsou popsány
v&nbsp;samostatné sekci uzavřené do bloku začínajícího klíčovým slovem
<strong>state</strong>, za nímž následuje jméno stavu, který se má
rozložit:</p>

<pre>
@startuml
[*] --&gt; Stav1
Stav1 --&gt; Stav2
Stav2 --&gt; Stav1
&nbsp;
<strong>state</strong> Stav1 {
    [*] --&gt; Podstav11
    Podstav11 -&gt; Podstav12
    Podstav12 --&gt; Podstav13
    Podstav13 --&gt; [*]
}
&nbsp;
<strong>state</strong> Stav2 {
    [*] -&gt; Podstav21
    Podstav21 -&gt; Podstav22
    Podstav22 -&gt; [*]
}
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-16.png" class="image-196216" width="342" height="565" alt="&#160;" />
<p><i>Obrázek 10: Stavový diagram vytvořený na základě osmého demonstračního
příkladu. Oba dva stavy jsou rozčleněny do několika podstavů.</i></p>

<p>Uveďme si ještě jeden příklad hierarchicky rozčleněného stavového diagramu.
Některé uzly hlavního diagramu i jeho podcelků jsou umístěny pod sebou, další
uzly pak vedle sebe. Toho lze dosáhnout, jak jsme si již řekli výše, vhodnou
kombinací symbolů <strong>-&gt;</strong> a <strong>--&gt;</strong>:</p>

<pre>
@startuml
[*] --&gt; Stav1
Stav1 --&gt; Stav2
Stav1 --&gt; Stav3
Stav2 -&gt; Stav3
Stav2 --&gt; Stav4
Stav3 --&gt; Stav4
Stav4 --&gt; [*]
&nbsp;
<strong>state</strong> Stav1 {
    [*] --&gt; Podstav11
    Podstav11 -&gt; Podstav12
    Podstav12 --&gt; Podstav13
    Podstav13 -left&gt; [*]
}
&nbsp;
<strong>state</strong> Stav2 {
    [*] --&gt; Podstav21
    Podstav21 --&gt; Podstav22
    Podstav22 --&gt; [*]
}
&nbsp;
<strong>state</strong> Stav3 {
    [*] --&gt; Podstav31
    Podstav31 --&gt; Podstav32
    Podstav32 --&gt; [*]
}
&nbsp;
<strong>state</strong> Stav4 {
    [*] -&gt; Podstav41
    Podstav41 -&gt; Podstav42
    Podstav42 -&gt; [*]
}
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-17.png" class="image-196217" width="342" height="951" alt="&#160;" />
<p><i>Obrázek 11: Stavový diagram vytvořený na základě devátého demonstračního
příkladu. Vzájemné umístění uzlů je řízeno uživatelem.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Sekvenční diagramy</h2>

<p><i>Stavové diagramy</i> popsané v&nbsp;předchozích čtyřech kapitolách sice
dokážou názorně popsat stavy systému i možné přechody mezi jednotlivými stavy,
ovšem v&nbsp;mnoha případech vzniká potřeba podrobněji popsat i interakci mezi
popisovaným systémem a jeho okolím, interakci mezi dvěma nebo více moduly
systému či (na té nejpodrobnější úrovni) interakci probíhající mezi
jednotlivými objekty, z&nbsp;nichž se systém skládá. Pro tento účel slouží
v&nbsp;jazyku UML <i>sekvenční diagramy (sequence diagrams)</i>, v&nbsp;nichž
lze velmi názorným způsobem naznačit časovou posloupnost posílání zpráv mezi
různými typy objektů, popř.&nbsp;k&nbsp;zobrazené posloupnosti zpráv přidat
další komentáře a značky. Jeden z&nbsp;typických a poměrně často v&nbsp;praxi
používaných příkladů použití <i>sekvenčních diagramů</i> je popis komunikace
s&nbsp;využitím síťových i jiných protokolů. Ostatně právě na síťovém protokolu
(navázání spojení a zrušení spojení) si <i>sekvenční diagramy</i> ukážeme
prakticky v&nbsp;navazujících dvou kapitolách.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Tvorba sekvenčních diagramů v&nbsp;PlantUML</h2>

<p>Nejjednodušší sekvenční diagram je možné v&nbsp;nástroji <i>PlantUML</i>
deklarovat následujícím způsobem. Pomocí symbolu <strong>-&gt;</strong> je
naznačeno poslání zprávy mezi dvojicí objektů, v&nbsp;tomto případě mezi
klientem a serverem. Sekvenční diagram neobsahuje žádné počáteční ani koncové
pseudostavy, což je jeden z&nbsp;rozpoznávacích znaků mezi sekvenčním diagramem
a stavovým diagramem. Proto také při odstranění pseudostavů může
<i>PlantUML</i> automaticky změnit stavový diagram za diagram sekvenční, což je
samozřejmě chyba:</p>

<pre>
@startuml
&nbsp;
Client -&gt; Server: SYN
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-1.png" class="image-196201" width="144" height="127" alt="&#160;" />
<p><i>Obrázek 12: Sekvenční diagram vytvořený na základě prvního demonstračního
příkladu.</i></p>

<p>Druhý příklad je nepatrně složitější a ukazuje způsob navázání komunikace
v&nbsp;protokolu TCP (tzv. three-way handshake):</p>

<pre>
@startuml
&nbsp;
Client -&gt; Server: SYN
Server -&gt; Client: SYN-ACK
Client -&gt; Server: ACK
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-2.png" class="image-196202" width="155" height="185" alt="&#160;" />
<p><i>Obrázek 13: Sekvenční diagram vytvořený na základě druhého demonstračního
příkladu.</i></p>

<p>Deklarace předchozího diagramu byla pravděpodobně poněkud nešikovná, protože
se na druhém řádku prohodila jména komunikujících objektů. To lze snadno
napravit, protože symbol <strong>-&gt;</strong> je možné nahradit symbolem
<strong>&lt;-</strong>, který (samozřejmě) značí poslání zprávy opačným
směrem:</p>

<pre>
@startuml
&nbsp;
Client -&gt; Server: SYN
Client &lt;- Server: SYN-ACK
Client -&gt; Server: ACK
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-3.png" class="image-196203" width="155" height="185" alt="&#160;" />
<p><i>Obrázek 14: Sekvenční diagram vytvořený na základě třetího demonstračního
příkladu.</i></p>

<p>Podívejme se ještě na nepatrně složitější příklad: ukončení spojení,
tentokrát způsobem označovaným four-way handshake (spojení ukončují a vzájemně
si ho potvrzují obě strany). Jednotlivé zprávy byly navíc automaticky
očíslovány, což zajistilo uvedení klíčového slova
<strong>autonumber</strong>:</p>

<pre>
@startuml
&nbsp;
<strong>autonumber</strong>
&nbsp;
Client -&gt; Server: FIN
Client &lt;- Server: ACK
Client &lt;- Server: FIN
Client -&gt; Server: ACK
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-4.png" class="image-196204" width="144" height="215" alt="&#160;" />
<p><i>Obrázek 15: Sekvenční diagram vytvořený na základě čtvrtého demonstračního
příkladu.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Nastavení vlastností sekvenčních diagramů</h2>

<p>Sekvenční diagramy (ale i další UML diagramy) lze v&nbsp;nástroji
<i>PlantUML</i> různě upravovat. V&nbsp;dalším demonstračním příkladu je do
diagramu přidán titulek s&nbsp;využitím klíčového slova
<strong>title</strong>:</p>

<pre>
@startuml
&nbsp;
<strong>autonumber</strong>
<strong>title</strong> TCP: Connection termination
&nbsp;
Client -&gt; Server: FIN
Client &lt;- Server: ACK
Client &lt;- Server: FIN
Client -&gt; Server: ACK
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-5.png" class="image-196205" width="253" height="245" alt="&#160;" />
<p><i>Obrázek 16: Sekvenční diagram vytvořený na základě pátého demonstračního
příkladu.</i></p>

<p>Dále lze měnit barvy zpráv specifikací požadované barvy zprávy uzavřené do
hranatých závorek a začínající symbolem #. Lze použít jak jméno barvy, tak i
známý hexadecimální kód #RRGGBB používaný v&nbsp;HTML a CSS. Povšimněte si, že
specifikace barvy zprávy se objevuje uvnitř symbolu šipky:</p>

<pre>
@startuml
&nbsp;
<strong>autonumber</strong>
<strong>title</strong> TCP: Connection termination
&nbsp;
Client -[#red]&gt; Server: FIN
Client &lt;[#green]- Server: ACK
Client &lt;[#red]- Server: FIN
Client -[#green]&gt; Server: ACK
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-6.png" class="image-196206" width="253" height="245" alt="&#160;" />
<p><i>Obrázek 17: Sekvenční diagram vytvořený na základě šestého demonstračního
příkladu.</i></p>

<p>U sekvenčních diagramů se velmi často objevuje potřeba okomentovat
jednotlivé zprávy. To zajistí klíčové slovo <strong>note</strong> doplněné o
informaci, na které straně diagramu se má komentář objevit
(<strong>left</strong>, <strong>right</strong>).</p>

<pre>
@startuml
&nbsp;
<strong>autonumber</strong>
<strong>title</strong> TCP: Connection termination
&nbsp;
Client -[#red]&gt; Server: FIN
&nbsp;
<strong>note left</strong>: endpoint wishes to stop its half of the connection
&nbsp;
Client &lt;[#green]- Server: ACK
&nbsp;
<strong>note right</strong>: other end acknowledges with an ACK
&nbsp;
Client &lt;[#red]- Server: FIN
Client -[#green]&gt; Server: ACK
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-7.png" class="image-196207" width="690" height="265" alt="&#160;" />
<p><i>Obrázek 18: Sekvenční diagram vytvořený na základě sedmého demonstračního
příkladu.</i></p>

<p>Poslední zajímavou a dnes popsanou vlastností sekvenčních diagramů je
naznačení zpoždění při komunikaci, tj.&nbsp;při posílání zpráv. Zpoždění je
možné v&nbsp;deklaraci sekvenčního diagramu zapsat například následujícím
způsobem: <strong>...delay...</strong>, což je ostatně patrné i
ze zdrojového kódu zobrazeného pod tímto odstavcem:</p>

<pre>
@startuml
&nbsp;
<strong>autonumber</strong>
<strong>title</strong> TCP: Connection termination
&nbsp;
Client -[#red]&gt; Server: FIN
&nbsp;
<strong>note left</strong>: endpoint wishes to stop its half of the connection
&nbsp;
...delay...
&nbsp;
Client &lt;[#green]- Server: ACK
<strong>note right</strong>: other end acknowledges with an ACK
&nbsp;
...later...
&nbsp;
Client &lt;[#red]- Server: FIN
&nbsp;
...delay...
&nbsp;
Client -[#green]&gt; Server: ACK
&nbsp;
@enduml
</pre>

<img src="http://i.iinfo.cz/images/582/diags-8.png" class="image-196208" width="690" height="387" alt="&#160;" />
<p><i>Obrázek 19: Sekvenční diagram vytvořený na základě osmého demonstračního
příkladu.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Odkazy na Internetu</h2>

<ol>

<li>Nástroje pro tvorbu UML diagramů:<br />
<a href="http://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/">http://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/</a>
</li>

<li>Unified Modeling Language<br />
<a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language">https://en.wikipedia.org/wiki/Unified_Modeling_Language</a>
</li>

<li>UML basics: The sequence diagram<br />
<a href="http://www.ibm.com/developerworks/rational/library/3101.html">http://www.ibm.com/developerworks/rational/library/3101.html</a>
</li>

<li>UML 2 State Machine Diagrams: An Agile Introduction<br />
<a href="http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm">http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm</a>
</li>

<li>PlantUML (home page)<br />
<a href="http://plantuml.sourceforge.net/">http://plantuml.sourceforge.net/</a>
</li>

<li>PlantUML (download page)<br />
<a href="http://sourceforge.net/projects/plantuml/files/plantuml.jar/download">http://sourceforge.net/projects/plantuml/files/plantuml.jar/download</a>
</li>

<li>PlantUML (Language Reference Guide)<br />
<a href="http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf">http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf</a>
</li>

<li>Plain-text diagrams take shape in Asciidoctor!<br />
<a href="http://asciidoctor.org/news/2014/02/18/plain-text-diagrams-in-asciidoctor/">http://asciidoctor.org/news/2014/02/18/plain-text-diagrams-in-asciidoctor/</a>
</li>

<li>Graphviz - Graph Visualization Software<br />
<a href="http://www.graphviz.org/">http://www.graphviz.org/</a>
</li>

<li>graphviz (Manual Page)<br />
<a href="http://www.root.cz/man/7/graphviz/">http://www.root.cz/man/7/graphviz/</a>
</li>

<li>dot (Manual page)<br />
<a href="http://www.root.cz/man/1/dot/">http://www.root.cz/man/1/dot/</a>
</li>

<li>Ditaa home page<br />
<a href="http://ditaa.sourceforge.net/">http://ditaa.sourceforge.net/</a>
</li>

<li>Ditaa introduction<br />
<a href="http://ditaa.sourceforge.net/#intro">http://ditaa.sourceforge.net/#intro</a>
</li>

<li>Ditaa usage<br />
<a href="http://ditaa.sourceforge.net/#usage">http://ditaa.sourceforge.net/#usage</a>
</li>

<li>Node, Edge and Graph Attributes<br />
<a href="http://www.graphviz.org/doc/info/attrs.html">http://www.graphviz.org/doc/info/attrs.html</a>
</li>

<li>Graphviz (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Graphviz">http://en.wikipedia.org/wiki/Graphviz</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

