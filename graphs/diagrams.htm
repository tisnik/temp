<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Nástroje pro tvorbu grafů a diagramů z příkazové řádky</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Nástroje pro tvorbu grafů a diagramů z příkazové řádky</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve světě otevřeného softwaru existuje poměrně velké množství aplikací určených pro interaktivní tvorbu různých typů diagramů. V mnoha případech je však výhodnější použít nástroje volané z příkazové řádky. Mezi takové nástroje patří poměrně známý gnuplot a Graphviz a taktéž překvapivě snadno ovladatelná utilitka Ditaa.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Nástroje pro tvorbu grafů a diagramů z příkazové řádky</a></p>
<p><a href="#k02">2. Základní informace o aplikaci gnuplot</a></p>
<p><a href="#k03">3. Vytváření grafů funkcí a grafů vytvořených z&nbsp;externích dat</a></p>
<p><a href="#k04">4. Styly vykreslovaného grafu</a></p>
<p><a href="#k05">5. Trojrozměrné grafy</a></p>
<p><a href="#k06">6. Balíček nástrojů Graphviz</a></p>
<p><a href="#k07">7. Jednoduché neorientované grafy</a></p>
<p><a href="#k08">8. Orientované grafy</a></p>
<p><a href="#k09">9. Praktický příklad &ndash; zobrazení závislostí mezi instalovanými balíčky</a></p>
<p><a href="#k10">10. Ditaa aneb uživatelsky přívětivá tvorba diagramů z&nbsp;ASCII artu</a></p>
<p><a href="#k11">11. Jednoduché příklady</a></p>
<p><a href="#k12">12. Složitější příklady: styly spojnic</a></p>
<p><a href="#k13">13. Změna stylu uzlů</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Nástroje pro tvorbu grafů a diagramů z příkazové řádky</h2>

<p>V&nbsp;dnes již velmi rozsáhlé nabídce programů s&nbsp;otevřeným zdrojovým
kódem můžeme nalézt poměrně velké množství aplikací určených pro interaktivní
tvorbu diagramů a grafů. Jedná se například o známý program <i>LibreOffice
Draw</i> či o aplikaci <i>Dia</i>, které jsou určeny mj.&nbsp;i pro tvorbu
rozličných diagramů. Dvourozměrné a někdy i trojrozměrné grafy získané
z&nbsp;různých typů dat lze vytvářet například v&nbsp;<i>GNU Octave</i> či (při
menších nárocích) i v&nbsp;programu <i>KChart</i>. V&nbsp;praxi se však velmi
často setkáme i s&nbsp;nutností vytvářet různé diagramy a grafy s&nbsp;využitím
nástrojů ovládaných z&nbsp;příkazové řádky, tj.&nbsp;neinteraktivně a bez
využití grafického uživatelského rozhraní.</p>

<p>Těchto nástrojů taktéž existuje celá řada, například specializovaný
<i>RRDtool</i> či <i>Ploticus</i>. My se v&nbsp;dnešním článku seznámíme
s&nbsp;poměrně známou aplikací <i>gnuplot</i>, dále pak s&nbsp;nástroji
dostupnými v&nbsp;balíčku <i>Graphviz</i> a na závěr si popíšeme velmi zajímavý
a přitom snadno ovladatelný nástroj nazvaný <i>Ditaa</i>, který se stává
populární například mezi autory píšícími své knihy (či skripta)
v&nbsp;jednoduchých značkovacích jazycích typu <i>AsciiDoc</i> či
<i>Markdown</i> (evidentně tento nástroj vyhovuje filozofii takto zaměřených
autorů).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní informace o aplikaci gnuplot</h2>

<p>Aplikace <i>gnuplot</i> je určena pro tvorbu plošných (2D) ale i
prostorových (3D) grafů, včetně možností vizualizace vektorových polí. Přitom
se jedná o program, který je možné v&nbsp;celé své šíři ovládat pouze
z&nbsp;příkazové řádky, a to buď s&nbsp;využitím uživatelsky vytvořených
skriptů, nebo interaktivním způsobem, tj.&nbsp;postupným zadáváním a následným
prováděním příkazů zapsaných na standardní vstup (<i>stdin</i>), což většinou
znamená z&nbsp;klávesnice, ale standardní vstup je samozřejmě možné pomocí
prostředků operačního systému přesměrovat a použít místo něj například výstup
z&nbsp;jiného běžícího procesu. Vývoj této aplikace probíhal velmi dlouho
(poprvé jsem se s&nbsp;<i>gnuplotem</i> setkal ještě v&nbsp;dobách kralování
DOSu na počítačích s&nbsp;procesorem 386 a pouhými čtyřmi megabyty RAM) a mimo
jiné i proto se dnes jedná o jeden z&nbsp;nejvíce propracovaných programů
určených pro dávkovou tvorbu grafů (mezi další používané aplikace
s&nbsp;podobným zaměřením patří například <i>plotutils</i>, což je taktéž
utilita resp.&nbsp;sada utilit šířených pod GNU licencí).</p>

<p>Další předností <i>gnuplotu</i> je &ndash; minimálně pro programátory
&ndash; zabudování poměrně sofistikovaného příkazového jazyka, pomocí kterého
je možné zadávat a spouštět makra řídící načtení dat uložených v&nbsp;externím
souboru, vytvoření grafu a jeho uložení resp.&nbsp;export do zvoleného formátu
atd. <i>gnuplot</i> se také vyznačuje malým počtem interních chyb &ndash; to je
důležité zejména při dávkovém vytváření mnoha grafů, kdy není možná jejich
důsledná kontrola člověkem a musíme se spolehnout na to, že grafy budou po
automatickém zpracování korektní. <i>gnuplot</i> je k&nbsp;dispozici pro mnoho
platforem, zjednodušeně je možné říci, že tam, kde se rozběhne nějaký překladač
ANSI C (dokonce i šestnáctibitový), je možné zprovoznit i <i>gnuplot</i>.</p>

<p>Při popisu dalších vlastností <i>gnuplotu</i> začněme &ndash; možná poněkud
netypicky &ndash; popisem možností exportu vytvořených grafů do některých
podporovaných souborových formátů. Při výstupu grafů je možné použít jak
rastrové, tak i vektorové grafické souborové formáty. Oba dva typy grafických
formátů jsou totiž důležité: rastrovou grafiku využijeme například při
publikování grafů na Internetu, vektorová grafika se naopak hodí při přípravě
publikací určených pro tisk. Mezi podporované rastrové formáty patří <i>PBM</i>
(<i>Portable BitMap</i>), <i>PNG</i> (<i>Portable Network Graphics</i> &ndash;
vhodné pro web), <i>GIF</i> (pouze s&nbsp;podporou dalších knihoven),
<i>JPEG</i> apod. Z&nbsp;vektorových formátů je podporován především
<i>PostScript</i>, dále je pak možné provést výstup například do
<i>L<sup>A</sup>T<sub>E</sub>Xu</i>, <i>DXF</i> (<i>Drawing Interchange File
Format</i> &ndash; formát podporovaný prakticky každým CAD systémem) a do
<i>SVG</i>.</p>

<p>S&nbsp;využitím <i>gnuplotu</i> je možné vytvářet velké množství grafů. Mezi
nejjednodušší a současně také nejpoužívanější grafy patří zobrazení průběhů
funkcí s&nbsp;jednou závislou a jednou nezávislou proměnnou. Takové funkce se
vytvoří velmi jednoduše, například obligátní sinusovka vznikne příkazem:</p>

<pre>
set terminal png size 400,300 enhanced font "Helvetica,10"
set output 'gnuplot1.png'
plot sin(x)
</pre>

<img src="http://i.iinfo.cz/images/417/gnuplot-1.png" class="image-194861" width="400" height="300" alt="&#160;" />
<p><i>Obrázek 1: Graf funkce jedné nezávislé proměnné.</i></p>

<p>Pokud je zapotřebí na grafu vyznačit průběhy více funkcí, není nic
jednoduššího, než zadat například tento příkaz:</p>

<pre>
set terminal png size 400,300 enhanced font "Helvetica,10"
set output 'gnuplot2.png'
plot sin(x)/x, sin(x)/(x**2+1)
</pre>

<p>Jak je patrné z&nbsp;druhého obrázku, nastaví <i>gnuplot</i> automaticky i
limity pro obě osy grafu. Tyto limity je však možné specifikovat i ručně či ve
skriptu (to je nutné například při vytváření grafů, které se mají navzájem
porovnávat).</p>

<img src="http://i.iinfo.cz/images/417/gnuplot-2.png" class="image-194862" width="400" height="300" alt="&#160;" />
<p><i>Obrázek 1: Graf dvou funkcí jedné nezávislé proměnné.</i></p>

<p>Kromě grafů funkcí jedné nezávislé proměnné je však možné vytvořit
složitější grafy, například parametrickou křivku:</p>

<pre>
set terminal png size 400,300 enhanced font "Helvetica,10"
set output 'gnuplot3.png'
i = {0.0,1.0}
set parametric
plot real(exp(i*t)), imag(exp(i*t*3))
</pre>

<img src="http://i.iinfo.cz/images/417/gnuplot-3.png" class="image-194863" width="400" height="300" alt="&#160;" />
<p><i>Obrázek 3: Graf parametricky zadané funkce.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vytváření grafů funkcí a grafů vytvořených z&nbsp;externích dat</h2>

<p>Aplikace <i>gnuplot</i> podporuje i tvorbu grafů s&nbsp;využitím externích
dat. Externí datové soubory, ve kterých jsou numerická data uložena, nemusí mít
nějakou speciální předem předepsanou strukturu. Právě naopak, pomocí poměrně
jednoduché syntaxe (příkazem <i>using</i>) se <i>gnuplot</i> nakonfiguruje
přesně podle struktury konkrétního souboru, takže je možné zpracovat data
vytvořená například ve formátu <i>CSV</i> apod.  V&nbsp;podstatě je
&bdquo;pouze&ldquo; nutné specifikovat, které numerické hodnoty je potřeba ze
souboru načíst a v&nbsp;jakém formátu se mají tyto údaje načítat.
<i>Gnuplot</i> poté automaticky provede všechny potřebné konverze dat, data
načte, zpracuje a následně vytvoří (tj.&nbsp;vykreslí či uloží do rastrového či
vektorového souboru) požadovaný graf. Ukažme si tedy jednoduchý příklad, pomocí
kterého je vykreslen graf sestrojený z&nbsp;několika hodnot uložených
v&nbsp;textovém souboru. Příkaz provádějící načtení hodnot z&nbsp;textového
souboru "test.txt" a následné vytvoření grafu bude mít tento tvar:</p>

<pre>
set terminal png size 400,300 enhanced font "Helvetica,10"
set output 'gnuplot4.png'
plot "test.txt"
</pre>

<p>Datový soubor "test.txt" byl získán následujícím skriptem napsaným
v&nbsp;programovacím jazyku Lua:</p>

<pre>
local x
&nbsp;
for x=0.1, 25.0, 0.1 do
    local y = math.sin(x)/x
    print(y)
end
&nbsp;
</pre>

<img src="http://i.iinfo.cz/images/417/gnuplot-4.png" class="image-194864" width="400" height="300" alt="&#160;" />
<p><i>Obrázek 4: Graf získaný z&nbsp;bodů uložených v&nbsp;externím souboru
"test.txt", ve kterém jsou specifikovány pouze jejich x-ové souřadnice.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Styly vykreslovaného grafu</h2>

<p>Pokud by z&nbsp;libovolných důvodů nevyhovoval způsob kreslení jednotlivých
bodů, ze kterých se graf skládá, pomocí malých křížků, je možné při kresbě
grafu zadat specifikátor stylu kreslení &ndash; ten rozšiřuje možnosti příkazu
<i>plot</i>. Existuje poměrně velké množství různých stylů, všechny si ukážeme
na obrázcích, přičemž u každého popisu stylu bude uveden i příslušný příkaz,
který vedl k&nbsp;tvorbě grafu. Na následujících screenshotech si všimněte, že
v&nbsp;pravém horním rohu každého grafu je pomocí značky ukázáno, jaký styl (a
mimo jiné také barva) je pro daný průběh funkce použit. To je výhodné zejména
při slučování více průběhů funkcí do jednoho grafu.</p>

<pre>
set terminal png size 400,300 enhanced font "Helvetica,10"
set output 'gnuplot5.png'
plot "test.txt" with lines
</pre>

<img src="http://i.iinfo.cz/images/417/gnuplot-5.png" class="image-194865" width="400" height="300" alt="&#160;" />
<p><i>Obrázek 5: Graf získaný předchozím skriptem, vrcholy jsou propojeny úsečkami.</i></p>

<pre>
set terminal png size 400,300 enhanced font "Helvetica,10"
set output 'gnuplot6.png'
plot "test.txt" with dots
</pre>

<img src="http://i.iinfo.cz/images/417/gnuplot-6.png" class="image-194866" width="400" height="300" alt="&#160;" />
<p><i>Obrázek 6: Graf získaný předchozím skriptem, vrcholy se zobrazují formou bodů.</i></p>

<pre>
set terminal png size 400,300 enhanced font "Helvetica,10"
set output 'gnuplot7.png'
plot "test.txt" with linespoints
</pre>

<img src="http://i.iinfo.cz/images/417/gnuplot-7.png" class="image-194867" width="400" height="300" alt="&#160;" />
<p><i>Obrázek 7: Graf získaný předchozím skriptem, kombinace předchozích dvou grafů.</i></p>

<pre>
set terminal png size 400,300 enhanced font "Helvetica,10"
set output 'gnuplot8.png'
plot "test.txt" with steps
</pre>

<img src="http://i.iinfo.cz/images/417/gnuplot-8.png" class="image-194868" width="400" height="300" alt="&#160;" />
<p><i>Obrázek 8: Graf získaný předchozím skriptem, &bdquo;schody&ldquo;.</i></p>

<pre>
set terminal png size 400,300 enhanced font "Helvetica,10"
set output 'gnuplot9.png'
plot "test.txt" with boxes
</pre>

<img src="http://i.iinfo.cz/images/417/gnuplot-9.png" class="image-194869" width="400" height="300" alt="&#160;" />
<p><i>Obrázek 9: Graf získaný předchozím skriptem, obdélníky začínající na x-ové ose.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Trojrozměrné grafy</h2>

<p><i>gnuplot</i> dokáže vykreslovat i trojrozměrné grafy, takže se
v&nbsp;rychlosti podívejme na několik příkladů. Pro vytvoření trojrozměrných
grafů, zejména grafů funkcí dvou nezávislých proměnných, se používá příkaz
<i>splot</i>, kde písmeno "s" značí <i>surface</i>.</p>

<pre>
set terminal png size 400,300 enhanced font "Helvetica,10"
set output 'gnuplot10.png'
splot x*y
</pre>

<img src="http://i.iinfo.cz/images/417/gnuplot-10.png" class="image-194870" width="400" height="300" alt="&#160;" />
<p><i>Obrázek 10: Trojrozměrný graf získaný předchozím skriptem.</i></p>

<p>Poněkud složitější příklad se specifikací rozsahu v&nbsp;osách x a y:</p>

<pre>
set terminal png size 400,300 enhanced font "Helvetica,10"
set output 'gnuplot11.png'
set xrange [-10:10]
set yrange [-10:10]
splot sin(sqrt(x**2+y**2))/sqrt(x**2+y**2)
</pre>

<img src="http://i.iinfo.cz/images/417/gnuplot-11.png" class="image-194871" width="400" height="300" alt="&#160;" />
<p><i>Obrázek 11: Trojrozměrný graf získaný předchozím skriptem.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Balíček nástrojů Graphviz</h2>

<p>Zatímco nástroj <i>gnuplot</i> popsaný &ndash; i když pouze ve velmi
zkrácené podobě &ndash; v&nbsp;předchozích pěti kapitolách je určený převážně
pro kreslení různých typů dvourozměrných a trojrozměrných grafů, je
v&nbsp;mnoha dokumentech popř.&nbsp;v&nbsp;různých reportech nutné vytvářet
diagramy s&nbsp;uzly propojenými neorientovanými či orientovanými hranami. Pro
tento účel je vhodné ve většině případů použít balíček nástrojů nazvaný
<i>Graphviz</i>. V&nbsp;tomto balíčku nalezneme především utilitu
<strong>dot</strong>, která na základě textové definice orientovaného či
neorientovaného grafu vytvoří rastrový či vektorový obrázek s&nbsp;grafem,
přičemž je možné zvolit, jaký algoritmus bude použit pro rozmístění uzlů a hran
na vytvořeném obrázku. Textová definice grafu používá jednoduchý popisný jazyk,
který je v&nbsp;současnosti podporován i několika dalšími nástroji a stává se
tak nepsaným standardem pro mnoho programů pracujících s&nbsp;grafovými
strukturami.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Jednoduché neorientované grafy</h2>

<p>Podívejme se na jednoduchý příklad &ndash; graf se třemi uzly a čtyřmi
hranami (spojnicemi) mezi těmito uzly. Takový graf může být popsán
v&nbsp;textovém souboru s&nbsp;následující strukturou:</p>

<h4>Obsah souboru graph1.dot:</h4>

<pre>
graph languages {
    Algol -- "K&amp;R C";
    "K&amp;R C" -- "ANSI C";
    Algol -- Perl;
    Algol -- "PL/I";
}
</pre>

<p>Povšimněte si, že u některých uzlů bylo zapotřebí uzavřít jejich názvy do
uvozovek. Není těžké zjistit proč &ndash; objevují se zde znaky, které by mohly
být interpretovány odlišným způsobem (ampersand, mezera, lomítko) a uzavřením
do uvozovek se (většina) těchto problémů automaticky vyřeší. Celý soubor začíná
klíčovým slovem <strong>graph</strong> značící neorientovaný graf; ve
skutečnosti je však možné celou hlavičku bloku vynechat (což ostatně dělají i
některé nástroje). Neorientované hrany mezi jednotlivými uzly jsou naznačeny
dvojicí znaků -- a jak uvidíme v&nbsp;následující kapitole, bude tato značka
u orientovaných grafů nahrazena šipkou.</p>

<p>O automatické rozmístění uzlů i hran a následné vykreslení diagramu do
rastrového obrázku s&nbsp;formátem <strong>PNG</strong> se postará tento
příkaz:</p>

<pre>
dot graph1.dot -T png &amp; graph1.png
</pre>

<p>Výsledek si můžete prohlédnout na dalším obrázku zobrazeném pod tímto
odstavcem. Příkaz <strong>dot</strong> v&nbsp;tomto případě vytvořil klasický
strom s&nbsp;kořenem <strong>Algol</strong>, což nám v&nbsp;tomto případě
vyhovuje.</p>

<img src="http://i.iinfo.cz/images/322/ditaa-8.png" class="image-194729" width="305" height="251" alt="&#160;" />
<p><i>Obrázek 12: Neorientovaný graf vytvořený na základě definičního souboru
<strong>graph1.dot</strong>.</i></p>

<p>Zajímavé je, že příkaz <strong>dot</strong> zapisuje obrázek (či popis
vektorového výkresu) na standardní výstup, takže je možné použít přesměrování
standardního výstupu do souboru. Alternativní výstupní formáty jsou
<strong>svg</strong>, <strong>gif</strong> a <strong>ps</strong>
(PostScript).</p>

<p>Kromě příkazu <strong>dot</strong> lze použít i příkazy
<strong>neato</strong>, <strong>fdp</strong> či <strong>sfdp</strong>, které se
odlišují algoritmem použitým pro rozmístění uzlů diagramu.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Orientované grafy</h2>

<p>Podívejme se nyní na tvorbu grafu, v&nbsp;němž jsou neorientované hrany mezi
uzly nahrazeny šipkami. Použijeme přitom stejné uzly (přesněji řečeno uzly se
stejným textem), jako tomu bylo i v&nbsp;předchozím příkladu. Změn
v&nbsp;definičním textovém (zdrojovém) souboru je jen několik. První změnu
můžeme vidět již na prvním řádku, protože se namísto klíčového slova
<strong>graph</strong> používá slovo <strong>digraph</strong>. Dále se pak na
dalších řádcích nahradila dvojice znaků -- za šipku -&gt; naznačující přímo
směr hrany:</p>

<h4>Obsah souboru graph2.dot:</h4>

<pre>
digraph languages {
    Algol -&gt; "K&amp;R C";
    "K&amp;R C" -&gt; "ANSI C";
    Algol -&gt; Perl;
    Algol -&gt; "PL/I";
}
</pre>

<img src="http://i.iinfo.cz/images/322/ditaa-9.png" class="image-194730" width="305" height="251" alt="&#160;" />
<p><i>Obrázek 13: Orientovaný graf vytvořený na základě definičního souboru
<strong>graph2.dot</strong>.</i></p>

<p>U uzlů a hran je možné specifikovat různé vlastnosti a ovlivnit tak výsledné
zobrazení grafu. Podívejme se na jednoduchou úpravu spočívající v&nbsp;tom, že
se nejdříve deklaruje styl dvou uzlů (tvar uzlu + jeho barva) a následně se
tyto uzly použijí pro specifikaci topologie grafu:</p>

<h4>Obsah souboru graph3.dot:</h4>

<pre>
digraph languages {
    Algol [shape=box];
    Algol [color="#ff0000"];
    "ANSI C" [color="#00ff00"];
    Algol -&gt; "K&amp;R C";
    "K&amp;R C" -&gt; "ANSI C";
    Algol -&gt; Perl;
    Algol -&gt; "PL/I";
}
</pre>

<img src="http://i.iinfo.cz/images/322/ditaa-10.png" class="image-194731" width="305" height="251" alt="&#160;" />
<p><i>Obrázek 14: Orientovaný graf vytvořený na základě definičního souboru
<strong>graph3.dot</strong>.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Praktický příklad &ndash; zobrazení závislostí mezi instalovanými balíčky</h2>

<p>Jedním z&nbsp;praktických příkladů pro použití nástroje <i>Graphviz</i> je
grafické znázornění závislostí mezi nainstalovanými balíčky. Na Linuxových
distribucích založených na RPM je možné pro tento účel použít skript nazvaný
<strong>rpmdep.pl</strong>, který vygeneruje soubor s&nbsp;koncovkou .dot a
strukturou korespondující s&nbsp;výše popsanou strukturou orientovaných grafů.
Nejdříve je nutné do systému nainstalovat balíček <strong>rpmorphan</strong>
obsahující zmíněný skript <strong>rpmdep.pl</strong>:</p>

<pre>
yum install "rpmorphan"
</pre>

<p>Následně je již možné tento skript spustit s&nbsp;parametry
<strong>-dot</strong> (určuje formát výstupního souboru),
<strong>vim-enhanced.dot</strong> (jméno výstupního souboru) a
<strong>vim-enhanced</strong> (jméno nainstalovaného balíčku, pro který
zjišťujeme jeho závislosti):</p>

<pre>
rpmdep.pl -dot vim-enhanced.dot vim-enhanced
</pre>

<p>Skript by měl po svém spuštění vytvořit soubor nazvaný
<strong>vim-enhanced.dot</strong> s&nbsp;následujícím obsahem. Konkrétní jména
balíčků samozřejmě závisí na tom, v&nbsp;jaké distribuci a její verzi se tento
skript spustí, příklad byl vytvořen pro Fedoru 20:</p>

<pre>
digraph "rpmdep" {
vim_enhanced -&gt; glibc;
glibc -&gt; basesystem;
basesystem -&gt; setup;
basesystem -&gt; filesystem;
glibc -&gt; glibc_common;
glibc_common -&gt; bash;
bash -&gt; ncurses_libs;
ncurses_libs -&gt; libstdc;
libstdc -&gt; libgcc;
ncurses_libs -&gt; ncurses_base;
glibc_common -&gt; tzdata;
glibc_common -&gt; libselinux;
libselinux -&gt; pcre;
libselinux -&gt; libsepol;
libselinux -&gt; xz_libs;
glibc -&gt; nss_softokn_freebl;
vim_enhanced -&gt; which;
which -&gt; info;
info -&gt; zlib;
vim_enhanced -&gt; perl_libs;
perl_libs -&gt; perl;
perl -&gt; perl_PathTools;
perl_PathTools -&gt; perl_Scalar_List_Utils;
perl_Scalar_List_Utils -&gt; perl_Carp;
perl_Carp -&gt; perl_Exporter;
perl -&gt; perl_constant;
perl -&gt; perl_threads_shared;
perl_threads_shared -&gt; perl_threads;
perl -&gt; gdbm;
perl -&gt; perl_Pod_Simple;
perl_Pod_Simple -&gt; perl_Pod_Escapes;
perl_Pod_Simple -&gt; perl_Getopt_Long;
perl_Getopt_Long -&gt; perl_Text_ParseWords;
perl_Getopt_Long -&gt; perl_Pod_Usage;
perl_Pod_Usage -&gt; perl_Pod_Perldoc;
perl_Pod_Perldoc -&gt; perl_podlators;
perl_podlators -&gt; perl_Encode;
perl_Pod_Perldoc -&gt; perl_parent;
perl_Pod_Perldoc -&gt; perl_HTTP_Tiny;
perl_HTTP_Tiny -&gt; perl_Time_Local;
perl_Pod_Perldoc -&gt; perl_File_Temp;
perl_File_Temp -&gt; perl_File_Path;
perl_Pod_Perldoc -&gt; groff_base;
groff_base -&gt; sed;
sed -&gt; libacl;
libacl -&gt; libattr;
perl -&gt; perl_Filter;
perl -&gt; perl_macros;
perl -&gt; perl_Socket;
perl -&gt; perl_Time_HiRes;
perl -&gt; perl_Storable;
perl -&gt; perl_Module_CoreList;
perl_Module_CoreList -&gt; perl_version;
vim_enhanced -&gt; gpm_libs;
vim_enhanced -&gt; vim_common;
vim_common -&gt; vim_filesystem;
}
</pre>

<p>Nyní je již možné si známým postupem nechat vygenerovat příslušný (již
poměrně rozsáhlý) graf:</p>

<a href="http://i.iinfo.cz/images/322/ditaa-13.png"><img src="http://i.iinfo.cz/images/322/ditaa-13-prev.png" class="image-194734" width="370" height="135" alt="&#160;" /></a>
<p><i>Obrázek 15: Závislosti balíčku vim-enhanced zobrazené formou stromu.</i></p>

<p>Popř.&nbsp;lze příkaz <strong>dot</strong> nahradit jiným příkazem
(<strong>neato</strong>, <strong>fdp</strong> či <strong>sfdp</strong>) a
použít tak odlišný algoritmus určující rozmístění uzlů na obrázku:</p>

<a href="http://i.iinfo.cz/images/322/ditaa-14.png"><img src="http://i.iinfo.cz/images/322/ditaa-14-prev.png" class="image-194735" width="238" height="270" alt="&#160;" /></a>
<p><i>Obrázek 16: Závislosti balíčku vim-enhanced zobrazené odlišným algoritmem.</i></p>

<p>Podobným způsobem lze vygenerovat graf závislostí i pro balíčky
s&nbsp;mnohem větším množstvím závislostí. Jen na ukázku se podívejme na
příklad balíčku <strong>java-1.7.0-openjdk</strong>, což je JRE Javy 1.7:</p>

<pre>
rpmdep.pl -dot openjdk.dot java-1.7.0-openjdk
</pre>

<pre>
digraph "rpmdep" {
java_1_7_0_openjdk -&gt; libXtst;
libXtst -&gt; glibc;
glibc -&gt; libgcc;
glibc -&gt; nss_softokn_freebl;
glibc -&gt; glibc_common;
glibc_common -&gt; tzdata;
glibc_common -&gt; bash;
bash -&gt; ncurses_libs;
ncurses_libs -&gt; ncurses_base;
ncurses_libs -&gt; libstdc;
glibc_common -&gt; libselinux;
libselinux -&gt; xz_libs;
libselinux -&gt; pcre;
libselinux -&gt; libsepol;
glibc -&gt; basesystem;
basesystem -&gt; setup;
basesystem -&gt; filesystem;
libXtst -&gt; libXi;
libXi -&gt; libXext;
libXext -&gt; libX11;
libX11 -&gt; libxcb;
libxcb -&gt; libXau;
libX11 -&gt; libX11_common;
java_1_7_0_openjdk -&gt; glib2;
glib2 -&gt; zlib;
glib2 -&gt; shared_mime_info;
shared_mime_info -&gt; pkgconfig;
shared_mime_info -&gt; libxml2;
glib2 -&gt; libffi;
java_1_7_0_openjdk -&gt; giflib;
giflib -&gt; libICE;
giflib -&gt; libSM;
libSM -&gt; libuuid;
java_1_7_0_openjdk -&gt; cups_libs;
cups_libs -&gt; openssl_libs;
openssl_libs -&gt; krb5_libs;
krb5_libs -&gt; sed;
sed -&gt; info;
sed -&gt; libacl;
libacl -&gt; libattr;
krb5_libs -&gt; coreutils;
coreutils -&gt; gmp;
coreutils -&gt; util_linux;
util_linux -&gt; libmount;
libmount -&gt; libblkid;
util_linux -&gt; audit_libs;
util_linux -&gt; pam;
pam -&gt; libpwquality;
libpwquality -&gt; cracklib_dicts;
cracklib_dicts -&gt; cracklib;
cracklib -&gt; gzip;
pam -&gt; libdb;
util_linux -&gt; libcap_ng;
util_linux -&gt; libutempter;
libutempter -&gt; shadow_utils;
shadow_utils -&gt; libsemanage;
libsemanage -&gt; ustr;
libsemanage -&gt; bzip2_libs;
util_linux -&gt; systemd_libs;
systemd_libs -&gt; dbus_libs;
systemd_libs -&gt; libgcrypt;
libgcrypt -&gt; libgpg_error;
systemd_libs -&gt; libcap;
util_linux -&gt; libuser;
libuser -&gt; popt;
libuser -&gt; openldap;
openldap -&gt; nss;
nss -&gt; nspr;
nss -&gt; chkconfig;
nss -&gt; nss_util;
nss -&gt; nss_softokn;
nss_softokn -&gt; sqlite;
sqlite -&gt; readline;
nss -&gt; nss_sysinit;
openldap -&gt; nss_tools;
openldap -&gt; cyrus_sasl_lib;
coreutils -&gt; grep;
coreutils -&gt; ncurses;
krb5_libs -&gt; gawk;
krb5_libs -&gt; keyutils_libs;
krb5_libs -&gt; libcom_err;
krb5_libs -&gt; libverto;
openssl_libs -&gt; ca_certificates;
ca_certificates -&gt; p11_kit;
ca_certificates -&gt; p11_kit_trust;
p11_kit_trust -&gt; libtasn1;
cups_libs -&gt; avahi_libs;
java_1_7_0_openjdk -&gt; libjpeg_turbo;
java_1_7_0_openjdk -&gt; java_1_7_0_openjdk_headless;
java_1_7_0_openjdk_headless -&gt; javapackages_tools;
javapackages_tools -&gt; libxslt;
javapackages_tools -&gt; lua;
javapackages_tools -&gt; python;
python -&gt; python_libs;
python_libs -&gt; gdbm;
python_libs -&gt; expat;
javapackages_tools -&gt; python_javapackages;
python_javapackages -&gt; python_lxml;
python_lxml -&gt; python_cssselect;
java_1_7_0_openjdk_headless -&gt; lcms2;
java_1_7_0_openjdk_headless -&gt; freetype;
freetype -&gt; libpng;
java_1_7_0_openjdk_headless -&gt; gdk_pixbuf2;
gdk_pixbuf2 -&gt; libtiff;
libtiff -&gt; jbigkit_libs;
gdk_pixbuf2 -&gt; jasper_libs;
java_1_7_0_openjdk_headless -&gt; atk;
java_1_7_0_openjdk_headless -&gt; pango;
pango -&gt; libthai;
pango -&gt; cairo;
cairo -&gt; pixman;
cairo -&gt; libXrender;
cairo -&gt; mesa_libGL;
mesa_libGL -&gt; libXfixes;
mesa_libGL -&gt; libdrm;
libdrm -&gt; systemd;
systemd -&gt; dbus;
systemd -&gt; tcp_wrappers_libs;
systemd -&gt; kmod_libs;
systemd -&gt; kmod;
systemd -&gt; cryptsetup_libs;
cryptsetup_libs -&gt; fipscheck_lib;
fipscheck_lib -&gt; fipscheck;
cryptsetup_libs -&gt; device_mapper_libs;
device_mapper_libs -&gt; device_mapper;
systemd -&gt; qrencode_libs;
systemd -&gt; acl;
systemd -&gt; diffutils;
libdrm -&gt; libpciaccess;
libpciaccess -&gt; hwdata;
mesa_libGL -&gt; libXdamage;
mesa_libGL -&gt; libXxf86vm;
mesa_libGL -&gt; mesa_libglapi;
cairo -&gt; mesa_libEGL;
mesa_libEGL -&gt; libwayland_client;
mesa_libEGL -&gt; libwayland_server;
mesa_libEGL -&gt; mesa_libgbm;
cairo -&gt; fontconfig;
fontconfig -&gt; fontpackages_filesystem;
pango -&gt; harfbuzz;
harfbuzz -&gt; graphite2;
pango -&gt; libXft;
java_1_7_0_openjdk_headless -&gt; tzdata_java;
java_1_7_0_openjdk_headless -&gt; gtk2;
gtk2 -&gt; libXcursor;
gtk2 -&gt; libXrandr;
gtk2 -&gt; hicolor_icon_theme;
gtk2 -&gt; libXinerama;
gtk2 -&gt; libXcomposite;
java_1_7_0_openjdk -&gt; pulseaudio_libs;
pulseaudio_libs -&gt; libsndfile;
libsndfile -&gt; libvorbis;
libvorbis -&gt; libogg;
libsndfile -&gt; flac_libs;
libsndfile -&gt; gsm;
pulseaudio_libs -&gt; libasyncns;
pulseaudio_libs -&gt; json_c;
java_1_7_0_openjdk -&gt; xorg_x11_fonts_Type1;
xorg_x11_fonts_Type1 -&gt; ttmkfdir;
xorg_x11_fonts_Type1 -&gt; xorg_x11_font_utils;
xorg_x11_font_utils -&gt; libfontenc;
xorg_x11_font_utils -&gt; libXfont;
java_1_7_0_openjdk -&gt; alsa_lib;
}
</pre>

<a href="http://i.iinfo.cz/images/322/ditaa-11.png"><img src="http://i.iinfo.cz/images/322/ditaa-11-prev.png" class="image-194735" alt="&#160;" /></a>
<p><i>Obrázek 17: Závislosti balíčku java-1.7.0-openjdk zobrazené odlišným algoritmem.</i></p>

<a href="http://i.iinfo.cz/images/322/ditaa-12.png"><img src="http://i.iinfo.cz/images/322/ditaa-12-prev.png" class="image-194735" alt="&#160;" /></a>
<p><i>Obrázek 18: Závislosti balíčku java-1.7.0-openjdk zobrazené odlišným algoritmem (zvětšená část grafu).</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Ditaa aneb uživatelsky přívětivá tvorba diagramů z&nbsp;ASCII artu</h2>

<p>Třetím a současně i posledním nástrojem, s&nbsp;nímž se dnes alespoň ve
stručnosti seznámíme, je aplikace nazvaná <i>Ditaa</i>. Jedná se o program
vytvořený v&nbsp;Javě, nicméně nemusíte se bát, že jde o (další) typicky
Javovský moloch :-), ale o relativně malou aplikaci, kterou lze získat na
adrese <a
href="http://sourceforge.net/projects/ditaa/">http://sourceforge.net/projects/ditaa/</a>.
<i>Ditaa</i> slouží k&nbsp;převodu diagramů vytvořených v&nbsp;ASCII artu do
bitmapových obrázků, typicky do formátu PNG. Tento program navíc &ndash; na
rozdíl od výše popsané utility <strong>dot</strong> &ndash; zachovává umístění
jednotlivých uzlů v&nbsp;diagramu, nesnaží se tedy o přeuspořádání do jiné
podoby. To mj.&nbsp;znamená, že <i>Ditaa</i> bude používána v&nbsp;jiných
oblastech než nástroje dostupné v&nbsp;balíčku <i>Graphviz</i>. Příklady si
ukážeme v&nbsp;navazujících kapitolách.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Jednoduché příklady</h2>

<p>Použití programu <i>Ditaa</i> je skutečně velmi jednoduché. Začněme
s&nbsp;následujícím diagramem, který lze snadno vytvořit v&nbsp;jakémkoli
textovém editoru (dokonce i v&nbsp;Notepadu :-):</p>

<pre>
             +-------+    +------+
      +------+ Algol +---&gt;| PL/I +
      |      +---+---+    +------+
      |          |
      |          |
      v          v
  +-------+  +-------+
  |  Perl |  | K&amp;R C |
  +-------+  +---+---+
                 |
                 |
                 v
             +-------+
             | ANSI C|
             +-------+
</pre>

<p><i>Ditta</i> automaticky zjistí, které znaky odpovídají uzlům a které
hranám. Následně vytvoří tento obrázek:</p>

<img src="http://i.iinfo.cz/images/322/ditaa-1.png" class="image-194722" width="380" height="266" alt="&#160;" />
<p><i>Obrázek 19: První diagram vytvořený aplikací Ditaa.</i></p>

<p>V&nbsp;případě, že výsledný diagram neodpovídá očekávání, lze použít přepínač <strong>--debug</strong>, který povolí výpis různých ladicích informací na standardní výstup a současně do výsledného obrázku nakreslí mřížku:</p>

<pre>
ditaa version 0.9, Copyright (C) 2004--2009  Efstathios (Stathis) Sideris

Running with options:
debug
Reading file: ditta1.txt
Using grid:
    0123456789012345678901234567890123456789
 0 (                                      )
 1 (                                      )
 2 (               +-------+    +------+  )
 3 (        +------+ Algol +---&gt;| PL/I +  )
 4 (        |      +---+---+    +------+  )
 5 (        |          |                  )
 6 (        |          |                  )
 7 (        v          v                  )
 8 (    +-------+  +-------+              )
 9 (    |  Perl |  | K&amp;R C |              )
10 (    +-------+  +---+---+              )
11 (                   |                  )
12 (                   |                  )
13 (                   v                  )
14 (               +-------+              )
15 (               | ANSI C|              )
16 (               +-------+              )
17 (                                      )
18 (                                      )
Locale: en_US
Dialog.bold
Rendering to file: ditta1_3.png
Done in 0sec
</pre>

<img src="http://i.iinfo.cz/images/322/ditaa-2.png" class="image-194723" width="380" height="266" alt="&#160;" />
<p><i>Obrázek 20: První diagram vytvořený aplikací Ditaa při použití parametru --debug.</i></p>

<p>Podívejme se nyní na to, co se stane, když se jeden uzel posune (samozřejmě
včetně spojnic):</p>

<pre>
             +-------+ 
      +------+ Algol +-+
      |      +---+---+ |
      |          |     |   +------+
      |          |     +--&gt;| PL/I +
      v          v         +------+
  +-------+  +-------+
  |  Perl |  | K&amp;R C |
  +-------+  +---+---+
                 |
                 |
                 v
             +-------+
             | ANSI C|
             +-------+
</pre>

<p>Z&nbsp;obrázku je patrné, že i ve výsledku došlo k&nbsp;posunu uzlu:</p>

<img src="http://i.iinfo.cz/images/322/ditaa-3.png" class="image-194724" width="390" height="266" alt="&#160;" />
<p><i>Obrázek 21: Druhý diagram vytvořený aplikací Ditaa.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Složitější příklady: styly spojnic</h2>

<p>Velmi snadným způsobem lze změnit styl spojnic (hran) mezi uzly. Stačí, aby
jediný znak ve spojnici byl nahrazen znakem : (dvojtečka) nebo = (rovnost) a
celá hrana bude vykreslena čárkovaně. Proč postačuje změnit jediný znak?  Je
tomu tak z&nbsp;toho důvodu, aby úpravy diagramu byly velmi rychlé, bez
nutnosti &bdquo;překreslovat&ldquo; celou hranu:</p>

<pre>
             /-------\ 
      +------+ Algol +-+
      :      \---+---/ |
      |          |     |   +------+
      |          |     +--&gt;| PL/I +
      v          v         \------/
  +-------+  +-------+
  |  Perl |  | K&mp;R C |
  \-------/  +---+---+
                 |
                 |
                 v
             /-------\
             | ANSI C|
             +-------+
</pre>

<img src="http://i.iinfo.cz/images/322/ditaa-5.png" class="image-194726" width="390" height="266" alt="&#160;" />
<p><i>Obrázek 22: Třetí diagram vytvořený aplikací Ditaa.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Změna stylu uzlů</h2>

<p>Již na předchozím obrázku bylo naznačeno, jak lze jednoduše změnit styl
uzlů, konkrétně zaoblení (libovolného) rohu: namísto znaku + (ostrý roh) se
použije lomítko či zpětné lomítko (zaoblený roh). Různé varianty jsou ukázány
níže:</p>

<pre>
             /-------\
      +------+ Algol +-+
      |      \---+---/ |
      |          |     |   +------+
      |          |     +--&gt;| PL/I +
      v          v         \------/
  +-------+  +-------+
  |  Perl |  | K&amp;R C |
  \-------/  +---+---+
                 |
                 |
                 v
             /-------\
             | ANSI C|
             +-------+
</pre>

<img src="http://i.iinfo.cz/images/322/ditaa-4.png" class="image-194725" width="390" height="266" alt="&#160;" />
<p><i>Obrázek 23: Čtvrtý diagram vytvořený aplikací Ditaa.</i></p>

<p>Kromě toho je možné změnit i barevnou výplň jednotlivých uzlů. Jedná se sice
o vlastnost, která není stabilizovaná, ale z&nbsp;dalšího obrázku je patrné, že
(částečně) funguje. Částečně proto, že názvy barev roztáhnou jednotlivé
uzly:</p>

<pre>
             /------------------\ 
      +------+ cRED Algol       +--+
      :      \---+-----------+--/  |
      |          |           |     |   +------+
      |          |           |     +--&gt;| PL/I +
      v          v           v         \------/
  +-------+  +------------------+
  |  Perl |  | cBLU K&amp;R C       |
  \-------/  +---+-----------+--+
                 |           |
                 |           |
                 v           v
             /------------------\
             | cGRE ANSI C      |
             +------------------+
</pre>

<img src="http://i.iinfo.cz/images/322/ditaa-6.png" class="image-194727" width="510" height="266" alt="&#160;" />
<p><i>Obrázek 24: Pátý diagram vytvořený aplikací Ditaa.</i></p>

<p>Poslední vlastností programu <i>Ditaa</i> je schopnost měnit tvar uzlů
pomocí speciálních značek zapisovaných do složených závorek. Opět se podívejme
na příklad:</p>

<pre>
             /------------------\ 
      +------+ cRED Algol {d}   +--+
      :      \---+-----------+--/  |
      |          |           |     |   +------------+
      |          |           |     +--&gt;|   PL/I {s} |
      v          v           v         \------------/
  +-------+  +------------------+
  |  Perl |  | cBLU K&amp;R C {io}  |
  \-------/  +---+-----------+--+
                 |           |
                 |           |
                 v           v
             /------------------\
             | cGRE ANSI C      |
             +------------------+
</pre>

<img src="http://i.iinfo.cz/images/322/ditaa-7.png" class="image-194728" width="570" height="266" alt="&#160;" />
<p><i>Obrázek 25: Šestý diagram vytvořený aplikací Ditaa.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Plain-text diagrams take shape in Asciidoctor!<br />
<a href="http://asciidoctor.org/news/2014/02/18/plain-text-diagrams-in-asciidoctor/">http://asciidoctor.org/news/2014/02/18/plain-text-diagrams-in-asciidoctor/</a>
</li>

<li>Graphviz - Graph Visualization Software<br />
<a href="http://www.graphviz.org/">http://www.graphviz.org/</a>
</li>

<li>graphviz (Manual Page)<br />
<a href="http://www.root.cz/man/7/graphviz/">http://www.root.cz/man/7/graphviz/</a>
</li>

<li>dot (Manual page)<br />
<a href="http://www.root.cz/man/1/dot/">http://www.root.cz/man/1/dot/</a>
</li>

<li>Ditaa home page<br />
<a href="http://ditaa.sourceforge.net/">http://ditaa.sourceforge.net/</a>
</li>

<li>Ditaa introduction<br />
<a href="http://ditaa.sourceforge.net/#intro">http://ditaa.sourceforge.net/#intro</a>
</li>

<li>Ditaa usage<br />
<a href="http://ditaa.sourceforge.net/#usage">http://ditaa.sourceforge.net/#usage</a>
</li>

<li>Node, Edge and Graph Attributes<br />
<a href="http://www.graphviz.org/doc/info/attrs.html">http://www.graphviz.org/doc/info/attrs.html</a>
</li>

<li>Graphviz (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Graphviz">http://en.wikipedia.org/wiki/Graphviz</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2014</small></p>
</body>
</html>

