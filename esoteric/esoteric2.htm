<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyky z vývojářského pekla++</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyky z vývojářského pekla++</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o esoterických programovacích jazycích se seznámíme s jazykem použitým v nástroji dc, dále pak s poměrně známým jazykem Whitespace a zmíníme se taktéž o &bdquo;grafickém&ldquo; jazyku Piet či o pravděpodobně nejšílenějším programovacím jazyku vůbec: tento jazyk se jmenuje Malbolge.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyky z vývojářského pekla++</a></p>
<p><a href="#k02">2. Jazyky, v&nbsp;nichž se intenzivně používají zásobníky</a></p>
<p><a href="#k03">3. dc</a></p>
<p><a href="#k04">4. Proměnné a řetězce v&nbsp;utilitě dc</a></p>
<p><a href="#k05">5. Makra a tvorba složitějších programů v&nbsp;dc</a></p>
<p><a href="#k06">6. Whitespace</a></p>
<p><a href="#k07">7. &bdquo;Zelený&ldquo; jazyk šetrný k&nbsp;životnímu prostředí</a></p>
<p><a href="#k08">8. Základní operace v&nbsp;jazyku Whitespace</a></p>
<p><a href="#k09">9. &bdquo;Grafický&ldquo; jazyk Piet</a></p>
<p><a href="#k10">10. Základní operace podporované interpretrem jazyka Piet</a></p>
<p><a href="#k11">11. Malbolge: vítejte ve skutečném programátorském pekle</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyky z vývojářského pekla++</h2>

<p>Většina programovacích jazyků, s&nbsp;nimiž jsme se alespoň ve stručnosti
seznámili <a
href="http://www.root.cz/clanky/programovaci-jazyky-z-vyvojarskeho-pekla/">v&nbsp;předchozím
článku</a> a kterým se budeme věnovat i v&nbsp;článku dnešním, evidentně není
zaměřena na praktické použití, ale jedná se spíše o programátorské vtípky
popř.&nbsp;o výsledek snahy navrhnout takový jazyk, pro nějž by bylo možné
napsat překladač či interpret s&nbsp;velikostí pár stovek bajtů. Výjimkou je
zvláštní makrojazyk, jenž je použitý v&nbsp;utilitě nazvané <strong>dc</strong>
(což vzletně znamená <i>Desk Calculator</i>). Tato utilita sice používá podobně
nečitelný styl zápisu algoritmů, jako mnohé další esoterické jazyky, ovšem byla
a vlastně dodnes je používaná v&nbsp;praxi, i když ji mnoho uživatelů raději
nahrazuje &bdquo;lidštějším&ldquo; nástrojem pojmenovaným <strong>bc</strong>
(pravděpodobně oba tyto nástroje naleznete i na vašem systému). Stručnému
popisu utility <strong>dc</strong> se budeme věnovat <a href="#k03">ve
třetí</a>, <a href="#k04">čtvrté</a> i <a href="#k05">v&nbsp;páté
kapitole</a>.</p>

<p>Utilita <strong>dc</strong> je založena na použití zásobníků, do nichž se
ukládají zpracovávané hodnoty (či makra), nad nimiž se následně provádí různé
operace. Podobný přístup, i když implementovaný mnohem &bdquo;šílenějším&ldquo;
(a méně praktickým) způsobem, byl použit i při návrhu jazyků <i>Whitespace</i>
a <i>Piet</i>. V&nbsp;jazyku <i>Whitespace</i>, který bude popsán <a
href="#k06">v&nbsp;šesté</a> a <a href="#k07">sedmé kapitole</a>, se všechny
zásobníkové operace zapisují kombinací bílých znaků (mezery, Taby apod.),
zatímco v&nbsp;jazyku (jedná se skutečně ještě o jazyk?) nazvaném <i>Piet</i>
jsou zásobníkové operace zakódovány do barev pixelů a samotný program se
vytváří kreslením bitmapy. Tímto velmi elegantním jazykem se budeme zabývat <a
href="#k09">v&nbsp;deváté</a> a <a href="#k10">desáté kapitole</a>. Zcela na <a
href="#k11">závěr</a> si ponecháme snad nejšílenější jazyk vůbec. Ten je nazván
příznačně <i>Malbolge</i> a zajímavé je, že programy psané v&nbsp;tomto jazyku
většinou nejsou vytvořeny přímo vývojáři, ale jedná se o výsledek práce jiných
programů (psaných samozřejmě v&nbsp;civilizovanějších nástrojích).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Jazyky, v&nbsp;nichž se intenzivně používají zásobníky</h2>

<p>Minule jsme se mj.&nbsp;zmínili i o jazycích <i>FALSE</i> a <i>Befunge</i>.
I přesto, že se tyto jazyky od sebe v&nbsp;mnoha ohledech liší, mají jednu
důležitou vlastnost společnou &ndash; výpočty, tj.&nbsp;aritmetické operace,
logické operace a rozhodovací (řídicí) konstrukce jsou prováděny
s&nbsp;hodnotami uloženými na zásobníku. Díky tomu bylo možné jazyky značně
zjednodušit, protože se o transformaci výrazů z&nbsp;dnes běžné infixové podoby
do podoby postfixové (taktéž známé pod názvem <i>Převrácená Polská
Notace/Reverse Polish Notation &ndash; RPN</i>) musí postarat sám programátor.
To ve skutečnosti není nijak složité, ostatně s&nbsp;prakticky stejným
problémem se musí potýkat i ti vývojáři, kteří pracují ve <i>Forthu</i>,
<i>PostScriptu</i> či v&nbsp;jazycích <i>Joy</i> a <i>Factor</i> (podle názoru
některých vývojářů se všechny čtyři zmíněné nástroje už nachází na hranici mezi
&bdquo;civilizovanými&ldquo; programovacími jazyky a jazyky esoterickými, i
když autor článku je velkým <a
href="http://www.root.cz/serialy/programovaci-jazyk-forth/">fandou</a>
zásobníkových jazyků, takže tento názor nesdílí :-).</p>

<p>Ovšem i další esoterické programovací jazyky jsou založeny na použití
zásobníku operandů či dokonce většího množství zásobníků. Kromě již zmíněných
jazyků se jedná o nástroj <i>dc</i>, jazyk <i>Whitespace</i> i o
&bdquo;grafický&ldquo; jazyk <i>Piet</i>, s&nbsp;nimiž se již dnes seznámíme
v&nbsp;navazujících kapitolách. Zde si jen připomeňme, že při použití zásobníku
operandů jsou hodnoty na zásobník ukládány explicitně (zápis 42 většinou
znamená uložení této hodnoty na vrchol zásobníku operandů), aritmetické a
logické operace používají implicitní adresování operandů (vždy se jedná o
hodnotu na vrcholu zásobníku či těsně pod ním) a kromě toho se většinou setkáme
i s&nbsp;několika pomocnými operacemi pro manipulaci s&nbsp;obsahem zásobníku.
Tyto operace bývají nazývány <strong>dup</strong> (zduplikování hodnoty uložené
na vrcholu zásobníku), <strong>drop</strong> (odstranění hodnoty z&nbsp;vrcholu
zásobníku operandů), <strong>swap</strong> (prohození dvou nejvyšších prvků) a
<strong>rot</strong> (rotace tří nejvyšších prvků). Tyto názvy mají dnes již
vlastně historický původ, protože byly použity v&nbsp;programovacím jazyku
<i>Forth</i>.</p>

<p>Poznámka: vrchol zásobníku se označuje zkratkou <i>TOS</i> neboli <i>Top Of
Stack</i>.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. dc</h2>

<p>Nástroj nazvaný <strong>dc</strong> (<i>Desk Calculator</i>) je po všech
stránkách pozoruhodná aplikace určená primárně k&nbsp;provádění výpočtů
s&nbsp;numerickými hodnotami s&nbsp;neomezenou (nastavitelnou) přesností a
rozsahem. Syntaxe použitých příkazů a operací totiž vede k&nbsp;psaní velmi
&bdquo;zahuštěného&ldquo; kódu, což je vlastně v&nbsp;ostrém kontrastu
s&nbsp;některými dalšími esoterickými jazyky, kde je tomu mnohdy přesně naopak
(<i>Brainfuck</i> či <i>JSFuck</i> jsou dobrým příkladem druhého extrému). Na
druhou stranu se však ukazuje, že spojení zásobníkově orientovaného jazyka
(které s&nbsp;sebou přináší i <a href="#k02">v&nbsp;předchozí kapitole</a>
zmíněnou obrácenou polskou notaci) a propracovaného systému maker umožňuje
vytvářet i dosti složité programové konstrukce a dokonce i celé komplexní
nadstavbové aplikace. Další významnou předností je, že <strong>dc</strong> je
zahrnuta do standardu POSIX, je tedy možné počítat s&nbsp;tím, že každá unixová
distribuce bude <strong>dc</strong> obsahovat, bez ohledu na použitou
platformu.</p>

<p>Při práci s&nbsp;nástrojem <strong>dc</strong> se nevyhneme častým
manipulacím se zásobníky, ať už s&nbsp;využitím explicitně zadaných příkazů
(duplikace hodnot v&nbsp;zásobníku) či implicitními operacemi (například při
provádění matematických výpočtů). Mezi základní operace, které lze se
zásobníkem provádět patří:</p>

<table>
<tr><th>#</th><th>Operace</th><th>Význam</th></tr>
<tr><td>1</td><td>c</td><td>vymazání veškerého obsahu zásobníku</td></tr>
<tr><td>2</td><td>d</td><td>poslední vložená položka v&nbsp;zásobníku je zduplikována</td></tr>
<tr><td>3</td><td>r</td><td>výměna hodnot mezi nejvyšší a druhou nejvyšší hodnotou na zásobníku</td></tr>
<tr><td>4</td><td>p</td><td>výpis čísla uloženého na vrcholu zásobníku</td></tr>
<tr><td>5</td><td>f</td><td>výpis obsahu celého zásobníku</td></tr>
</table>

<p>(operace <strong>d</strong> odpovídá výše zmíněnému příkazu
<strong>dup</strong>, operace <strong>r</strong> pak příkazu
<strong>swap</strong>)</p>

<p>Zásobníky jsou v&nbsp;<strong>dc</strong> použity zejména z&nbsp;toho
důvodu, aby se zjednodušilo zadávání a provádění aritmetických operací. Ve
výpisu níže jsou uvedeny příklady zápisu některých základních i složitějších
aritmetických výrazů a jejich kombinací spolu s&nbsp;příkazem pro tisk obsahu
zásobníku (<strong>p</strong> &ndash; print) a pro vyčištění zásobníku
(<strong>c</strong> &ndash; clear). Už na těchto příkladech si povšimněte, že
jednoslovní příkazy je možné psát vedle sebe bez nutnosti použití bílých
znaků:</p>

<pre>
<strong>10 20 + p c</strong>
30
&nbsp;
<strong>10 20 * pc</strong>
200
&nbsp;
<strong>10 20*pc</strong>
200
&nbsp;
<strong>10 20 -pc</strong>
-10
&nbsp;
<strong>10 20 / pc</strong>
0 <i>(celočíselné dělení - není nastaven radix)</i>
&nbsp;
<strong>10 20 % pc</strong>
10 <i>(dělení modulo)</i>
&nbsp;
<strong>10 20 + 30 * pc</strong>
900
&nbsp;
<strong>5 4 3 2 1 * * * * p</strong>
120
&nbsp;
<strong>5 4 3 2 1****p</strong>
120
</pre>

<p>Kromě výše uvedené pětice základních operací jsou v&nbsp;utilitě
<strong>dc</strong> podporovány i operace další, zejména dělení se zbytkem (to
v&nbsp;infixové notaci zapsat nelze), výpočet libovolné mocniny a druhé
odmocniny. Následuje příklad použití těchto operací (příkaz <strong>f</strong>
vypíše obsah celého zásobníku):</p>

<pre>
<strong>10 3 ~ f</strong>
1
3
<i>celočíselný podíl je roven třem, zbytek je 1</i>
&nbsp;
<strong>2 10 ^ f</strong>
1024
<i>výpočet desáté mocniny hodnoty 2</i>
&nbsp;
<strong>256 v f</strong>
16
<i>výpočet druhé odmocniny hodnoty 256</i>
</pre>

<p>Při pohledu na výsledky výše uvedených aritmetických výrazů jste si
pravděpodobně všimli, že všechny vypočtené hodnoty byly celočíselné. To však
neznamená, že <strong>dc</strong> pracuje pouze s&nbsp;celými čísly, jde pouze
o počáteční nastavení. Přesnost výpočtů (resp.&nbsp;výsledků operací) se řídí
takzvaným <strong>radixem</strong>, který udává maximální počet číslic
uvedených za desetinnou tečkou. Radix se nastavuje pomocí příkazu
<strong>k</strong>, který očekává na zásobníku jedno číslo udávající radix.
Pokud na zásobníku žádné číslo uvedeno není, je to při vyvolání tohoto příkazu
považováno za chybu. Vše si můžeme ozřejmit na následujícím příkladu, který
počítá druhou odmocninu z&nbsp;deseti při použití různého radixu:</p>

<pre>
<strong>10 v p</strong>
3
&nbsp;
<strong>1 k 10 v p</strong>
3.1
&nbsp;
<strong>2 k 10 v p</strong>
3.16
&nbsp;
<strong>10 k 10 v p</strong>
3.1622776601
&nbsp;
<strong>30 k 10 v p</strong>
3.162277660168379331998893544432
&nbsp;
<strong>c k</strong>
dc: stack empty
</pre>

<p>Samozřejmě lze vynechat zbytečné mezery a psát programy jako skutečný muž
:-) například následujícím způsobem:</p>

<pre>
<strong>30k10vp</strong>
3.162277660168379331998893544432
</pre>

<p>Číselná soustava vstupujících číselných hodnot se mění příkazem
<strong>i</strong>, který na vrcholu zásobníku očekává číslo udávající základ
soustavy. Podobně se číselná soustava tisknutých číselných hodnot mění příkazem
<strong>o</strong>. V&nbsp;následujícím příkladu je proveden převod některých
čísel ze soustavy desítkové do dalších soustav (jak je ze zápisů patrné,
s&nbsp;menším počtem &bdquo;úhozů&ldquo; snad ani nejdou konverze zapsat):</p>

<pre>
<strong>1 2 127 128 255 256 f</strong>
256
255
128
127
2
1
&nbsp;
<strong>2 o f</strong>
100000000
11111111
10000000
1111111
10
1
&nbsp;
<strong>8 o f</strong>
400
377
200
177
2
1
&nbsp;
<strong>16 o f</strong>
100
FF
80
7F
2
1
&nbsp;
<strong>2of</strong>
100000000
11111111
10000000
1111111
10
1
&nbsp;
<strong>8of</strong>
400
377
200
177
2
1
&nbsp;
<strong>16of</strong>
100
FF
80
7F
2
1
&nbsp;
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Proměnné a řetězce v&nbsp;utilitě dc</h2>

<p>Na proměnné, které v&nbsp;nástroji <strong>dc</strong> taktéž existují, se
můžeme dívat ze dvou stran. Na jednu stranu se proměnné chovají v&nbsp;mnoha
ohledech podobně jako v&nbsp;jiných programovacích jazycích, tj.&nbsp;obsahují
jedinou numerickou či řetězcovou hodnotu &ndash; <strong>dc</strong> si přitom
datový typ uložené hodnoty pamatuje. Na druhou stranu však může být každá
proměnná využita jako pojmenovaný zásobník, což má velký význam, zejména díky
tomu, že proměnných může být teoreticky použito pouze 256, protože jsou
pojmenovány pouze jedním ASCII znakem &ndash; většinou se však používá jen 26
proměnných, což odpovídá počtu písmen anglické abecedy. Vzhledem k&nbsp;faktu,
že se každá proměnná chová jako samostatný zásobník, je možné jejich využití
například v&nbsp;makrech bez toho, aby se obsah proměnné změnil (samozřejmě za
předpokladu, že makro korektně odstraní všechny mezivýsledky výpočtů). Pro
práci s&nbsp;proměnnými jsou určeny následující operace:</p>

<table>
<tr><th>#</th><th>Kód příkazu (operace)</th><th>Význam příkazu</th></tr>
<tr><td>1</td><td><strong>s</strong>[název proměnné]</td><td>vyjmutí numerické či řetězcové hodnoty z&nbsp;vrcholu zásobníku operandů a uložení této hodnoty v&nbsp;proměnné zadané svým názvem</td></tr>
<tr><td>2</td><td><strong>l</strong>[název proměnné]</td><td>přečtení hodnoty z&nbsp;proměnné zadané svým názvem a uložení této hodnoty na vrchol zásobníku operandů</td></tr>
<tr><td>3</td><td><strong>S</strong>[název proměnné]</td><td>vyjmutí numerické či řetězcové hodnoty z&nbsp;vrcholu zásobníku operandů a uložení této hodnoty na vrchol zásobníku zadaného svým názvem &ndash; proměnná se zde tedy chová jako zásobník</td></tr>
<tr><td>4</td><td><strong>L</strong>[název proměnné]</td><td>vyjmutí posledně vložené hodnoty ze zásobníku zadaného svým jménem a uložení této hodnoty na vrchol zásobníku operandů</td></tr>
</table>

<p>Práci s&nbsp;proměnnými si můžeme ukázat na následujících jednoduchých
příkladech:</p>

<pre>
# pokus o zápis tří hodnot do proměnné 'a' pomocí operace 's':
<strong>1sa</strong>
<strong>2sa</strong>
<strong>3sa</strong>
&nbsp;
# zásobník operandů je prázdný - důkaz:
<strong>f</strong>
&nbsp;
# načtení hodnoty proměnné 'a' pomocí operace 'l':
<strong>la</strong>
<strong>f</strong>
3
&nbsp;
<strong>la</strong>
<strong>f</strong>
3
3
&nbsp;
<strong>la</strong>
<strong>f</strong>
3
3
3
&nbsp;
# proměnná se při těchto operacích chová jako "jednohodnotová" proměnná
# (na zásobník operandů je třikrát po sobě zapsáno jedno číslo)
<strong>q</strong>
</pre>

<p>Při operacích <strong>S</strong> a <strong>L</strong> však bude situace odlišná:</p>

<pre>
# pokus o zápis tří hodnot do proměnné 'a' pomocí operace 'S':
<strong>1sa</strong>
<strong>2sa</strong>
<strong>3sa</strong>
&nbsp;
# zásobník operandů je prázdný - důkaz:
<strong>f</strong>
&nbsp;
# načtení hodnoty proměnné 'a' pomocí operace 'L':
<strong>La</strong>
<strong>f</strong>
3
&nbsp;
<strong>La</strong>
<strong>f</strong>
2
3
&nbsp;
<strong>La</strong>
<strong>f</strong>
1
2
3
&nbsp;
# proměnná se při těchto operacích chová jako pojmenovaný zásobník
# (na zásobník operandů jsou zapsány tři odlišné hodnoty)
<strong>q</strong>
</pre>

<p>Utilita <strong>dc</strong> obsahuje i několik instrukcí určených pro práci
s&nbsp;řetězci. Řetězce mohou být uloženy jak na zásobník operandů, tak i do
libovolné proměnné pomocí výše uvedených čtyř operací. S&nbsp;řetězci je
prakticky možné provádět pouze dvě řetězcové operace. První operací je tisk
řetězce na standardní výstup, čehož se často používá například při interaktivní
práci s&nbsp;nějakým skriptem nebo pro výpis chyb nastalých při výpočtu. Druhou
operací je provedení řetězce jako makra, tj.&nbsp;znaky v&nbsp;řetězci jsou
chápány jako příkazy jazyka <strong>dc</strong> a jsou po zadání některého
&bdquo;spouštěcího&ldquo; příkazu provedeny. Speciální operací je konstruktor
řetězce, což je vlastně příkaz sestávající ze dvou znaků pro levou a pravou
hranatou závorku, přičemž všechny znaky, které se nachází uvnitř těchto
závorek, jsou považovány za součást řetězce.</p>

<p>Následuje velmi jednoduchý příklad práce s&nbsp;řetězci:</p>

<pre>
<strong>[Hello world]</strong>
<strong>p</strong>
Hello world
<strong>q</strong>
</pre>

<p>Využití proměnných a příkazu <strong>n</strong> pro tisk bez vložení znaku
pro konec řádku (opticky dochází ke spojení tří řetězců, ve skutečnosti však
taková operace není podporovaná):</p>

<pre>
# Naplnění proměnných 'a', 'b' a 'c'
<strong>[Hello]sa</strong>
<strong>[ ]sb</strong>
<strong>[world]sc</strong>
&nbsp;
# Přesun hodnot proměnných 'a', 'b' a 'c' na zásobník operandů
<strong>lclbla</strong>
&nbsp;
# Tisk tří hodnot na zásobníku operandů bez odřádkování
<strong>nnn</strong>
Hello world
&nbsp;
# Ukončení aplikace
# (ve skutečnosti je následující znak umístěn za vytištěný řetězec)
<strong>q</strong>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Makra a tvorba složitějších programů v&nbsp;dc</h2>

<p>Jak již bylo naznačeno <a href="#k04">ve čtvrté kapitole</a>, je možné
řetězce použít pro zápis maker. V&nbsp;tomto případě se využívají následující
operace:</p>

<table>
<tr><th>#</th><th>Kód příkazu (operace)</th><th>Význam příkazu</th></tr>
<tr><td>1</td><td><strong>x</strong></td><td>pokud je na vrcholu zásobníku operandů uložen řetězec, je chápán jako makro, které je ihned provedeno</td></tr>
<tr><td>2</td><td><strong>&gt;</strong>[název proměnné]</td><td>porovná a odstraní dvě hodnoty uložené na vrcholu zásobníku operandů. Pokud je hodnota v&nbsp;TOS větší, provede se kód uložený v&nbsp;proměnné zadané svým názvem</td></tr>
<tr><td>3</td><td><strong>!&gt;</strong>[název proměnné]</td><td>podobné předchozí operaci s&nbsp;tím, že se makro provede, pokud je TOS menší nebo rovno druhé hodnotě</td></tr>
<tr><td>4</td><td><strong>&lt;</strong>[název proměnné]</td><td>spuštění makra, pokud je TOS menší než druhá hodnota</td></tr>
<tr><td>5</td><td><strong>!&lt;</strong>[název proměnné]</td><td>spuštění makra, pokud je TOS větší nebo rovno druhé hodnotě</td></tr>
<tr><td>6</td><td><strong>=</strong>[název proměnné]</td><td>spuštění makra v&nbsp;případě, že jsou si obě hodnoty uložené na vrcholu zásobníku operandů rovny</td></tr>
<tr><td>7</td><td><strong>!=</strong>[název proměnné]</td><td>spuštění makra v&nbsp;případě, že si hodnoty nejsou rovny</td></tr>
<tr><td>8</td><td><strong>q</strong></td><td>ukončení běhu makra, včetně makra volajícího</td></tr>
<tr><td>9</td><td><strong>Q</strong></td><td>ukončení <i>n</i> volání maker, přičemž hodnota <i>n</i> je uložena na vrcholu zásobníku</td></tr>
<tr><td>10</td><td><strong>?</strong></td><td>načtení řetězce ze standardního vstupu a spuštění tohoto řetězce jako makra</td></tr>
</table>

<p>Při tvorbě maker je nutné si dávat pozor na to, že samotný
&bdquo;skript&ldquo; makra je řetězec, musí tedy být umístěn v&nbsp;hranatých
závorkách. To je uvedeno na následujícím jednoduchém příkladu, který vypíše,
zda je číslo uložené na zásobníku nulové. Skript je uložen v&nbsp;proměnné
nazvané <strong>z</strong> (od slova &bdquo;zero&ldquo;, samozřejmě si můžete
vybrat libovolnou jinou proměnnou), text s&nbsp;příkazem pro tisk nulové
hodnoty v&nbsp;proměnné <strong>t</strong> (od slova &bdquo;text&ldquo;) a
konečně text s&nbsp;příkazem pro tisk nenulové hodnoty v&nbsp;proměnné
<strong>n</strong> (od sousloví &bdquo;non-zero&ldquo;):</p>

<pre>
# příkaz pro tisk prvního řetězce je uložen jako makro do proměnné 't'
<strong>[[na zasobniku je nula]n]st</strong>
&nbsp;
# příkaz pro tisk druhého řetězce je uložen jako makro do proměnné 'n'
<strong>[[na zasobniku je nenulova hodnota]n]sn</strong>
&nbsp;
# makro provádějící dva testy - na rovnost nuly a na nerovnost nuly
# (všimněte si duplikace původní hodnoty, první test by tuto hodnotu zničil)
# toto makro je uloženo do proměnné 'z'
<strong>[d0=t0!=n]sz</strong>
&nbsp;
# vyzkoušení funkce makra
<strong>10lzx</strong>
<strong>0lzx</strong>
</pre>

<p>Jak je z&nbsp;předchozího zápisu patrné, je tvorba maker určena pouze pro
otrlé, a to jste ještě neviděli příklady uvedené v&nbsp;následujících
odstavcích :-)</p> 

<p>Podívejme se na složitější makra, která byla vytvořena pokročilými uživateli
utility <strong>dc</strong>.</p>

<p>Fibonacciho posloupnost:</p>

<pre>
1 sa
1 sb
2 sc
[la lb + p lb sa sb lc 1 + d sc 13 &gt;z] sz
la p sx lp p sx lz x
</pre>

<p>Výpočet největšího společného dělitele dvou čísel:</p>

<pre>
?[dSarLa%d0&lt;a]dsax+p
</pre>

<p>Výpočet faktoriálu:</p>

<pre>
[d1-d1&lt;F*]dsFxp
</pre>

<p>Příklad výpočtu 10!:</p>

<pre>
10[d1-d1&lt;F*]dsFxp
3628800
</pre>

<p>Samozřejmě nejsme omezeni rozsahem základních datových typů, takže se můžeme
bez obav pustit do výpočtu 1000!:</p>

<pre>
1000[d1-d1&lt;F*]dsFxp
402387260077093773543702433923003985719374864210714632543799910429938\
512398629020592044208486969404800479988610197196058631666872994808558\
901323829669944590997424504087073759918823627727188732519779505950995\
276120874975462497043601418278094646496291056393887437886487337119181\
045825783647849977012476632889835955735432513185323958463075557409114\
262417474349347553428646576611667797396668820291207379143853719588249\
808126867838374559731746136085379534524221586593201928090878297308431\
392844403281231558611036976801357304216168747609675871348312025478589\
320767169132448426236131412508780208000261683151027341827977704784635\
868170164365024153691398281264810213092761244896359928705114964975419\
909342221566832572080821333186116811553615836546984046708975602900950\
537616475847728421889679646244945160765353408198901385442487984959953\
319101723355556602139450399736280750137837615307127761926849034352625\
200015888535147331611702103968175921510907788019393178114194545257223\
865541461062892187960223838971476088506276862967146674697562911234082\
439208160153780889893964518263243671616762179168909779911903754031274\
622289988005195444414282012187361745992642956581746628302955570299024\
324153181617210465832036786906117260158783520751516284225540265170483\
304226143974286933061690897968482590125458327168226458066526769958652\
682272807075781391858178889652208164348344825993266043367660176999612\
831860788386150279465955131156552036093988180612138558600301435694527\
224206344631797460594682573103790084024432438465657245014402821885252\
470935190620929023136493273497565513958720559654228749774011413346962\
715422845862377387538230483865688976461927383814900140767310446640259\
899490222221765904339901886018566526485061799702356193897017860040811\
889729918311021171229845901641921068884387121855646124960798722908519\
296819372388642614839657382291123125024186649353143970137428531926649\
875337218940694281434118520158014123344828015051399694290153483077644\
569099073152433278288269864602789864321139083506217095002597389863554\
277196742822248757586765752344220207573630569498825087968928162753848\
863396909959826280956121450994871701244516461260379029309120889086942\
028510640182154399457156805941872748998094254742173582401063677404595\
741785160829230135358081840096996372524230560855903700624271243416909\
004153690105933983835777939410970027753472000000000000000000000000000\
000000000000000000000000000000000000000000000000000000000000000000000\
000000000000000000000000000000000000000000000000000000000000000000000\
000000000000000000000000000000000000000000000000000000000000000000000\
000000000000000
</pre>

<p>Výpočet nekonečné řady prvočísel (program si musíte zastavit sami přes
CTRL+C):</p>

<pre>
2p3p[dl!d2+s!%0=@l!l^!&lt;#]s#[s/0ds^]s@[p]s&amp;[ddvs^3s!l#x0&lt;&amp;2+l.x]ds.x
2
3
5
7
11
13
17
19
23
29
31
37
41
43
47
53
59
61
67
71
73
79
83
89
97
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Whitespace</h2>

<p>Dalším skutečně neobvykle pojatým programovacím jazykem, na který
v&nbsp;žádném případě nemůžeme v&nbsp;tomto miniseriálku zapomenout, je jazyk
nazvaný <i>Whitespace</i>. Jméno tohoto programovacího jazyka, který byl
příhodně vydán na Apríla (v&nbsp;roce 2003), naznačuje jeho nejdůležitější
vlastnost &ndash; ve <i>Whitespace</i> se totiž algoritmy zapisují skutečně
pouze s&nbsp;využitím bílých znaků mezera, tab a konec řádku,
resp.&nbsp;přesněji řečeno jejich kombinací (konkrétní význam jednotlivých
kombinací bude vysvětlen <a href="#k08">v&nbsp;osmé kapitole</a>).
Všechny ostatní znaky kromě bílých znaků jsou interpretrem jazyka
<i>Whitespace</i> ignorovány, což přináší jednu velmi zajímavou vlastnost
&ndash; algoritmus naprogramovaný ve <i>Whitespace</i> je většinou možné, a to
navíc poměrně nenápadně, vložit jak do běžného textu (například v&nbsp;HTML se
vícenásobné bílé znaky zapsané za sebou ve většině značek ignorují), tak i do
algoritmu zapsaného v&nbsp;jiném programovacím jazyce (opět totiž platí, že
většina jazyků, až na malé výjimky typu Python, bílé znaky ignoruje).</p>

<p>Mimochodem: povšimněte si, že je možné prakticky bez problémů smíchat zápis
algoritmu naprogramovaného v&nbsp;minule zmíněném <i>Brainfucku</i>
s&nbsp;algoritmem napsaným v&nbsp;jazyku <i>Whitespace</i>, a to z&nbsp;toho
prostého důvodu, že <i>Brainfuck</i> rozlišuje pouze osmici znaků
&bdquo;&lt;&ldquo;, &bdquo;&gt;&ldquo;, &bdquo;+&ldquo;, &bdquo;-&ldquo;,
&bdquo;.&ldquo; (tečka), &bdquo;,&ldquo; (čárka), &bdquo;[&ldquo; a
&bdquo;]&ldquo;, přičemž ostatní znaky podle specifikace ignoruje. Přesně
stejná vlastnost platí i pro kombinaci <i>Whitespace+FALSE</i> (ve skutečnosti
jazyk <i>FALSE</i> již rozlišuje poněkud větší množinu znaků, včetně
jednoznakových názvů proměnných, nicméně bílé znaky většina interpretrů
ignoruje) či <i>Whitespace+JSFuck</i> (v&nbsp;<i>JSFucku</i> se používají znaky
&bdquo;(&ldquo;, &bdquo;)&ldquo;, &bdquo;[&ldquo;, &bdquo;]&ldquo;,
&bdquo;+&ldquo; a &bdquo;!&ldquo;). S&nbsp;trochou nadsázky se tedy dá říci,
že autoři těchto jazyků mysleli na vzájemnou kompatibilitu :-)</p>

<p>Interpretry jazyka <i>Whitespace</i> již byly implementovány v&nbsp;mnoha
různých programovacích jazycích, především v&nbsp;C, C++, Pythonu, Perlu, Ruby,
ale i Haskellu či Elispu (Emacs Lispu).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. &bdquo;Zelený&ldquo; jazyk šetrný k&nbsp;životnímu prostředí</h2>

<p>Je možná poněkud zarážející, že se o programovací jazyk <i>Whitespace</i>
více nezajímají členové různých ekologických hnutí. Díky tomu, že algoritmy
psané ve <i>Whitespace</i> se skládají jen z&nbsp;mezer, tabů a konců řádků, se
při tisku programů ušetří velké množství toneru a při jejich prohlížení na
monitoru stejně není nic vidět, takže je možné monitor nechat vypnutý a šetřit
tak elektrickou energii. Možná je právě <i>Whitespace</i> tím nejvhodnějším
jazykem pro implementaci různých softwarových projektů postavených na EU
grantech :-)</p>

<p>Navíc je možné bez uzardění tvrdit, že libovolný kód napsaný ve
<i>Whitespace</i> je čistý (<i>clean code</i>).</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Základní operace v&nbsp;jazyku Whitespace</h2>

<p>Podívejme se nyní na to, jakým způsobem se vlastně zapisují programy
v&nbsp;jazyce <i>Whitespace</i>. Začněme hodnotami, s&nbsp;nimiž se
v&nbsp;programech přímo pracuje a které reprezentují (vnitřní) stav programu.
Jazyk <i>Whitespace</i> dokáže zpracovávat pouze celá čísla se znaménkem, která
mohou mít prakticky libovolný rozsah. Pro reprezentaci čísel se používá binární
kód, který je doplněný o značku pro konec čísla. V&nbsp;následující tabulce i
v&nbsp;tabulkách uvedených později, budeme všechny tři znaky rozpoznávané
jazykem <i>Whitespace</i> zapisovat jejich jménem uvedeným v&nbsp;hranatých
závorkách:</p>

<table>
<tr><th>#</th><th>Znak</th><th>Význam</th></tr>
<tr><td>1</td><td>[Space]</td><td>bit s&nbsp;hodnotou 0</td></tr>
<tr><td>2</td><td>[Tab]</td><td>bit s&nbsp;hodnotou 1</td></tr>
<tr><td>3</td><td>[LF]</td><td>konec zápisu čísla</td></tr>
<tr><td>4</td><td>[Space]</td><td>kladné znaménko (pokud je zapsána jako první znak)</td></tr>
<tr><td>5</td><td>[Tab]</td><td>záporné znaménko (pokud je zapsána jako první znak)</td></tr>
</table>

<p>To například znamená, že konstantu 42 můžeme zapsat do programu takto:</p>

<pre>
[Space][Tab][Space][Tab][Space][Tab][Space][LF]
</pre>

<p>Konstanta -42 bude zapsána takto:</p>

<pre>
[Tab][Tab][Space][Tab][Space][Tab][Space][LF]
</pre>

<p>Samotný programový kód se skládá ze sekvence příkazů, přičemž každý příkaz
je rozdělen na prefix (zde nazývaný <i>Instruction Modification Parameter
&ndash; IMP</i>), za nímž následuje kód konkrétní operace. Nejdříve si vypišme
všechny podporované prefixy (IMP). Těch existuje pět a zajímavé je, že mají
proměnnou délku jeden až dva znaky:</p>

<table>
<tr><th>#</th><th>Znak(y)</th><th>Význam</th></tr>
<tr><td>1</td><td>[Space]</td><td>operace pro manipulaci se zásobníkem</td></tr>
<tr><td>2</td><td>[Tab][Space]</td><td>aritmetické operace</td></tr>
<tr><td>3</td><td>[Tab][Tab]</td><td>přístup na haldu (heap)</td></tr>
<tr><td>4</td><td>[LF]</td><td>řízení běhu programu</td></tr>
<tr><td>5</td><td>[Tab][LF]</td><td>vstupně/výstupní operace</td></tr>
</table>

<p>Operace pro manipulaci se zásobníkem existují čtyři (ze základních operací
známých například z&nbsp;<i>Forthu</i> chybí pouze <strong>rot</strong>):</p>

<table>
<tr><th>#</th><th>Znaky</th><th>Operace se zásobníkem</th></tr>
<tr><td>1</td><td>[Space]</td><td>číslo následující za příkazem je vloženo na zásobník</td></tr>
<tr><td>2</td><td>[LF][Space]</td><td>obdoba příkazu <strong>dup</strong> (viz <a href="#k02">kapitolu číslo 2</a>)</td></tr>
<tr><td>3</td><td>[LF][Tab]</td><td>obdoba příkazu <strong>swap</strong> (viz <a href="#k02">kapitolu číslo 2</a>)</td></tr>
<tr><td>4</td><td>[LF][LF]</td><td>obdoba příkazu <strong>drop</strong> (viz <a href="#k02">kapitolu číslo 2</a>)</td></tr>
</table>

<p>Následuje tabulka se všemi (pěti) aritmetickými operacemi (oba operandy musí
být nejdříve umístěny na zásobník, kam je posléze uložen i výsledek):</p>

<table>
<tr><th>#</th><th>Znak(y)</th><th>Aritmetická operace</th></tr>
<tr><td>1</td><td>[Space][Space]</td><td>součet</td></tr>
<tr><td>2</td><td>[Space][Tab]</td><td>rozdíl</td></tr>
<tr><td>3</td><td>[Space][LF]</td><td>součin</td></tr>
<tr><td>4</td><td>[Tab][Space]</td><td>celočíselný podíl</td></tr>
<tr><td>5</td><td>[Tab][Tab]</td><td>výpočet modulo</td></tr>
</table>

<p>Pro práci s&nbsp;haldou existují pouze dvě operace, které vždy očekávají, že
adresa na haldě, kam se má provést uložení či načtení, bude na vrcholu
zásobníku (načtení) či na druhé nejvyšší pozici (uložení):</p>

<table>
<tr><th>#</th><th>Znak(y)</th><th>Operace</th></tr>
<tr><td>1</td><td>[Space]</td><td>uložení hodnoty z&nbsp;TOS na specifikovanou adresu</td></tr>
<tr><td>2</td><td>[Tab]</td><td>načtení hodnoty ze specifikované adresy na TOS</td></tr>
</table>

<p>Poměrně komplikované jsou operace slouží k&nbsp;řízení běhu programu.
Prvních pět operací očekává adresu, která je reprezentována číslem:</p>

<table>
<tr><th>#</th><th>Znak(y)</th><th>Operace</th></tr>
<tr><td>1</td><td>[Space][Space]</td><td>definice návěští (cíle skoku)</td></tr>
<tr><td>2</td><td>[Space][Tab]  </td><td>zavolání podprogramu</td></tr>
<tr><td>3</td><td>[Space][LF]   </td><td>nepodmíněný skok na zadané návěští</td></tr>
<tr><td>4</td><td>[Tab][Space]  </td><td>podmíněný skok v&nbsp;případě, že TOS==0</td></tr>
<tr><td>5</td><td>[Tab][Tab]    </td><td>podmíněný skok v&nbsp;případě, že v&nbsp;TOS je záporné číslo</td></tr>
<tr><td>6</td><td>[Tab][LF]     </td><td>návrat z&nbsp;podprogramu</td></tr>
<tr><td>7</td><td>[LF][LF]      </td><td>ukončení celého programu</td></tr>
</table>

<p>Poslední skupinu operací tvoří vstupně/výstupní operace:</p>

<table>
<tr><th>#</th><th>Znak(y)</th><th>Operace</th></tr>
<tr><td>1</td><td>[Space][Space]</td><td>znak, jehož kód je uložený na TOS, je vytisknut</td></tr>
<tr><td>2</td><td>[Space][Tab]  </td><td>číslo uložené na TOS je vypsáno</td></tr>
<tr><td>3</td><td>[Tab][Space]  </td><td>načtení znaku a uložení na haldu</td></tr>
<tr><td>4</td><td>[Tab][Tab]    </td><td>načtení čísla a uložení na haldu</td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. &bdquo;Grafický&ldquo; jazyk Piet</h2>

<p>Předposledním esoterickým programovacím jazykem, s&nbsp;nímž se
v&nbsp;dnešním článku setkáme, je jazyk nazvaný <i>Piet</i>, jehož autorem je
<a href="http://www.dangermouse.net/">David Morgan-Mar</a> (ostatně podívejte
se i na jeho <a href="http://www.dangermouse.net/esoteric/">další esoterické
jazyky a taktéž implementace řadicích algoritmů</a>). Jméno tohoto velmi
neobvyklého programovacího jazyka je odvozeno od jména malíře <i>Pieta
Mondriana</i> (původně se programovací jazyk <i>Piet</i> měl skutečně jmenovat
<i>Mondrian</i>, ovšem toto jméno již bylo v&nbsp;době návrhu obsazeno). Jazyk
<i>Piet</i> se v&nbsp;určitém ohledu podobá <a href="#k06">výše zmíněnému</a>
jazyku <i>Whitespace</i>, protože základní příkazy, z&nbsp;nichž se algoritmy
skládají, obsahují aritmetické operace prováděné nad operandy uloženými na
zásobníku operandů, operace s&nbsp;prvky na zásobníku (duplikace atd.), operace
pro vstup a výstup dat a konečně zde nalezneme i několik operací určených pro
řízení běhu programu.</p>

<img src="https://i.iinfo.cz/images/438/piet-work1.jpg" class="image-248002" alt="&#160;" width="330" height="350" />
<p><i>Obrázek 1: Jeden z&nbsp;obrazů Pieta Mondriana.</i></p>

<p>Ovšem zatímco <i>Whitespace</i> byl programovací jazyk, v&nbsp;němž se
algoritmy zapisovaly lineárním způsobem (tj.&nbsp;příkaz po příkazu, stejně
jako je tomu u psaného textu), je tomu v&nbsp;případě jazyku <i>Piet</i> zcela
jinak. Kód pro jazyk <i>Piet</i> se totiž zapisuje do dvourozměrné mřížky,
podobně jako tomu bylo v&nbsp;minule zmíněných jazycích nazvaných <a
href="http://www.root.cz/clanky/programovaci-jazyky-z-vyvojarskeho-pekla/#k05">Minifuck-2D</a>
a <a
href="http://www.root.cz/clanky/programovaci-jazyky-z-vyvojarskeho-pekla/#k07">Befunge</a>.
To mj.&nbsp;znamená, že podobně jako v&nbsp;případě <i>Minifucku-2D</i>, je i
v&nbsp;jazyku <i>Befunge</i> nutné si kromě pozice aktuálně prováděného příkazu
pamatovat i směr, ve kterém se má načíst další příkaz; tento směr je uložen ve
stavové proměnné nazvané <i>DP &ndash; Direction Pointer</i> doplněné o stavový
příznak <i>CC &ndash; Codel Chooser</i> (tento bitový příznak zjednodušeně
řečeno volí směr vlevo&ndash;vpravo či nahoru&ndash;dolů).</p>

<img src="https://i.iinfo.cz/images/288/piet-work2.jpg" class="image-248003" alt="&#160;" width="330" height="369" />
<p><i>Obrázek 2: Další z&nbsp;obrazů Pieta Mondriana.</i></p>

<p>To však zdaleka není vše &ndash; ona mřížka, do níž se zadávají jednotlivé
příkazy tvořící program, je v&nbsp;programovacím jazyce <i>Piet</i> tvořena
běžnou bitmapou (rastrovým obrázkem), což znamená, že se vlastně programy
netvoří v&nbsp;textovém editoru, ale v&nbsp;bitmapovém grafickém editoru (může
se použít například i primitivní <i>Malování</i> či na Linuxu <i>mtPaint</i>,
lepší je však <a href="http://www.rapapaing.com/blog/?page_id=6">online
IDE</a>). Vzhledem k&nbsp;tomu, že se rozeznává pouze dvacet barvových odstínů
(přesněji řečeno osmnáct odstínů + černá a bílá barva) a zbylé odstíny se
typicky zcela ignorují (záleží na konkrétním interpretru), znamená to, že je
možné zápis programu &bdquo;vkreslit&ldquo; do již existujícího obrázku či
naopak vytvořit společně s&nbsp;algoritmem i vhodný demonstrační obrázek,
splashscreen atd.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Základní operace podporované interpretrem jazyka Piet</h2>

<p><a href="#k09">V&nbsp;předchozí kapitole</a> jsme si řekli, že
v&nbsp;programech (tedy v&nbsp;bitmapě) se rozeznává jen dvacet barevných
odstínů. První dvě barvy &ndash; černá a bílá &ndash; mají speciální význam,
ovšem dalších osmnáct barvových odstínů je tvořeno kombinací šesti barev
(červená, žlutá, zelená, azurová, modrá a fialová) a tří úrovní
(světlá/normální/tmavá). Základním stavebním prvkem programů jsou bloky pixelů
s&nbsp;konstantní barvou. Samotné příkazy nejsou vždy zapsány stejnou barvou,
ale záleží na způsobu změny barvy, tj.&nbsp;zda se změní barva či světlost. Co
se týče změny barvy, je možné &bdquo;poskočit&ldquo; o jeden až pět odstínů,
přičemž například změna z&nbsp;červené na žlutou představuje jeden skok, ovšem
změna červené na fialovou již pět skoků. V&nbsp;případě světlosti se může
jednat o skok o jednu či dvě úrovně:</p>

<img src="https://i.iinfo.cz/images/142/piet-hello.png" class="image-247999" alt="&#160;" width="200" height="188" />
<p><i>Obrázek 3: Program typu &bdquo;Hello World&ldquo; naprogramovaný
v&nbsp;jazyce Piet (autorem je James Dessart).</i></p>

<p>Jednoduše zjistíme, že s&nbsp;využitím tohoto způsobu kódování je možné
reprezentovat osmnáct základních příkazů:</p>

<table>
<tr><th>Barva/světlost</th><th>Beze změny</th><th>Jedna úroveň</th><th>Dvě úrovně</th></tr>
<tr><th>Beze změny  </th><td>&times;</td><td>push</td><td>pop</td></tr>
<tr><th>Jedna úroveň</th><td>add</td><td>sub</td><td>mul</td></tr>
<tr><th>Dvě úrovně  </th><td>div</td><td>mod</td><td>not</td></tr>
<tr><th>Tři úrovně  </th><td>gt</td><td>pointer</td><td>switch</td></tr>
<tr><th>Čtyři úrovně</th><td>dup</td><td>roll</td><td>input number</td></tr>
<tr><th>Pět úrovní  </th><td>input char</td><td>output number</td><td>output char</td></tr>
</table>

<p>Tyto příkazy si můžeme rozdělit do několika kategorií:</p>

<table>
<tr><th>#</th><th>Aritmetická operace</th><th>Význam</th></tr>
<tr><td>1</td><td>add</td><td>součet</td></tr>
<tr><td>2</td><td>sub</td><td>rozdíl</td></tr>
<tr><td>3</td><td>mul</td><td>součin</td></tr>
<tr><td>4</td><td>div</td><td>podíl</td></tr>
<tr><td>5</td><td>mod</td><td>dělení modulo</td></tr>
</table>

<table>
<tr><th>#</th><th>Logická operace</th><th>Význam</th></tr>
<tr><td>1</td><td>gt</td><td>porovnání dvou hodnot na zásobníku a vrácení 0 či 1 podle jejich velikosti</td></tr>
<tr><td>2</td><td>not</td><td>logická negace (0 &rarr; 1, 1 &rarr; 0)</td></tr>
</table>

<table>
<tr><th>#</th><th>Operace se zásobníkem</th><th>Význam</th></tr>
<tr><td>1</td><td>dup</td><td>duplikace (má stejný význam jako stejně pojmenovaný příkaz ve Forthu)</td></tr>
<tr><td>2</td><td>roll</td><td>dokáže přesunou druhou položku na zásobníku na n-tou pozici (lze realizovat <strong>rot</strong>, <strong>swap</strong> atd.)</td></tr>
<tr><td>3</td><td>push</td><td>zápis čísla (zakódovaného do barev) na zásobník (to se neprovede implicitně)</td></tr>
<tr><td>4</td><td>pop </td><td>odstranění položky z&nbsp;vrcholu zásobníku</td></tr>
</table>

<table>
<tr><th>#</th><th>Vstupně-výstupní operace</th><th>Význam</th></tr>
<tr><td>1</td><td>input number</td><td>načtení čísla ze standardního vstupu</td></tr>
<tr><td>2</td><td>input char</td><td>načtení znaku ze standardního vstupu</td></tr>
<tr><td>3</td><td>output number</td><td>zápis čísla (z&nbsp;TOS) na standardní výstup</td></tr>
<tr><td>4</td><td>output char</td><td>zápis znaku (z&nbsp;TOS) na standardní výstup</td></tr>
</table>

<table>
<tr><th>#</th><th>Řízení běhu programu</th><th>Význam</th></tr>
<tr><td>1</td><td>pointer</td><td>načte číslo z&nbsp;vrcholu zásobníku o otočí DP o tolik násobků 90&deg;, kolik odpovídá přečtenému číslu</td></tr>
<tr><td>2</td><td>switch</td><td>načte číslo z&nbsp;vrcholu zásobníku a změní příznak CC tolikrát, kolik odpovídá přečtenému číslu</td></tr>
</table>

<p>Povšimněte si, že u řízení běhu programu je nejdříve nutné vyhodnotit
podmínku pomocí příkazů <strong>gt</strong> a <strong>not</strong> a posléze na
základě výsledku změnit hodnotu DP příkazem <strong>pointer</strong> (otočení o
n&times;90&deg;) či hodnotu CC příkazem <strong>switch</strong>.</p>

<p>Při řízení běhu programu má speciální význam i černá barva (černé pixely),
neboť ty slouží jako &bdquo;zarážka&ldquo;. Pokud interpret narazí na černý
pixel, pokouší se měnit CC a DP tak dlouho, dokud nenarazí na barvový odstín,
který může interpretovat. Jestliže se tato operace nezdaří ani na osmý pokus
(vyčerpá se všech 4&times;2 kombinací), program skončí.</p>

<p>Ukázky dalších programů naleznete <a
href="http://www.dangermouse.net/esoteric/piet/samples.html">zde</a>.
Povšimněte se například geniálního interpretru jazyka Whitespace.</p>

<img src="https://i.iinfo.cz/images/260/piet-prime.png" class="image-248001" alt="&#160;" width="240" height="240" />
<p><i>Obrázek 4: Generátor prvočísel (autorem je Sylvain Tintillier).</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Malbolge: vítejte ve skutečném programátorském pekle</h2>

<p>Poslední esoterický jazyk, s&nbsp;nímž se dnes seznámíme, se jmenuje
<i>Malbolge</i>. Tento jazyk je skutečně šílený (ostatně Melebolge je název
osmé úrovně pekla v&nbsp;Dantově Božské komedii), a to šílený natolik, že je
prakticky nemožné v&nbsp;jazyku <i>Malbolge</i> napsat smysluplný program.
Většina programů, která až doposud byla &bdquo;vyvinuta&ldquo;, vznikla
s&nbsp;využitím generátorů kódu, které tak dlouho zkoušely různé kombinace
příkazů, až se dobraly ke kýženému výsledku &ndash; jedná se tak vlastně o
ultimátní využití TDD (test-driven development) :-).</p>

<p>Zvláštní je, že virtuální stroj jazyka Malbolge je založen na ternárním
kódu. To ostatně není vůbec špatný nápad, ostatně <a
href="http://www.root.cz/clanky/pocitac-setun-1057-1077-1090-1091-1085-1100-a-benderova-nocni-mura/">v&nbsp;SSSR
byl minimálně jeden podobný reálný počítač realizován</a>. Každé slovo
virtuálního stroje má šířku deseti <i>tritů</i>, což znamená, že celkem je
možné realizovat 3<sup>10</sup>-1=59048 kombinací, což nám prozradí i
<i>dc</i>:</p>

<pre>
3 10^1-pq
</pre>

<p>Vzhledem k&nbsp;tomu, že i adresy jsou reprezentovány jedním slovem, znamená
to, že adresovat lze maximálně 59048 buněk (slov). V&nbsp;instrukčním kódu
nalezneme i instrukci nazvanou &bdquo;crazy operation&ldquo;, což je vlastně
rozšíření klasických bitových kombinací (ovšem ne přímočaře, to by bylo moc
jednoduché, takže se spíše jedná o náhodný výběr tří tritových operací). Další
zajímavostí je, že po provedení každé operace se ta buňka paměti, která je
adresovaná indexem uloženým v&nbsp;registru C, zakóduje na základě tabulky, což
je jeden ze způsobu automodifikace kódu.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Esolang, the esoteric programming languages wiki<br />
<a href="https://esolangs.org/wiki/Main_Page">https://esolangs.org/wiki/Main_Page</a>
</li>

<li>Esoteric Topics in Computer Programming<br />
<a href="http://web.archive.org/web/20020609152409/www.catseye.mb.ca/esoteric/index.html">http://web.archive.org/web/20020609152409/www.catseye.mb.ca/esoteric/index.html</a>
</li>

<li>Programming Languages designed by Wouter von Oortmerssen<br />
<a href="http://strlen.com/programming-languages">http://strlen.com/programming-languages</a>
</li>

<li>Two-dimensional languages<br />
<a href="https://esolangs.org/wiki/Category:Two-dimensional_languages">https://esolangs.org/wiki/Category:Two-dimensional_languages</a>
</li>

<li>Piet (homepage)<br />
<a href="http://www.dangermouse.net/esoteric/piet.html">http://www.dangermouse.net/esoteric/piet.html</a>
</li>

<li>Piet (na Esolang)<br />
<a href="https://esolangs.org/wiki/Piet">https://esolangs.org/wiki/Piet</a>
</li>

<li>Piet IDE<br />
<a href="http://www.rapapaing.com/blog/?page_id=6">http://www.rapapaing.com/blog/?page_id=6</a>
</li>

<li>JSFuck (homepage)<br />
<a href="http://www.jsfuck.com/">http://www.jsfuck.com/</a>
</li>

<li>JSFuck (na Esolang)<br />
<a href="https://esolangs.org/wiki/JSFuck">https://esolangs.org/wiki/JSFuck</a>
</li>

<li>JSFuck (na Wikipedii)<br />
<a href="https://en.wikipedia.org/wiki/JSFuck">https://en.wikipedia.org/wiki/JSFuck</a>
</li>

<li>Malbolge (na Esolang)<br />
<a href="https://esolangs.org/wiki/Malbolge">https://esolangs.org/wiki/Malbolge</a>
</li>

<li>Malbolge (na Wikipedii)<br />
<a href="https://en.wikipedia.org/wiki/Malbolge">https://en.wikipedia.org/wiki/Malbolge</a>
</li>

<li>Befunge (na Esolang)<br />
<a href="https://esolangs.org/wiki/Befunge">https://esolangs.org/wiki/Befunge</a>
</li>

<li>Befunge (na Wikipedii)<br />
<a href="https://en.wikipedia.org/wiki/Befunge">https://en.wikipedia.org/wiki/Befunge</a>
</li>

<li>Minifuck<br />
<a href="https://esolangs.org/wiki/Minifuck">https://esolangs.org/wiki/Minifuck</a>
</li>

<li>XMLfuck<br />
<a href="https://esolangs.org/wiki/XMLfuck">https://esolangs.org/wiki/XMLfuck</a>
</li>

<li>The False Programming Language<br />
<a href="http://strlen.com/false-language">http://strlen.com/false-language</a>
</li>

<li>The FALSE Programming Language Manual<br />
<a href="http://strlen.com/false/false.txt">http://strlen.com/false/false.txt</a>
</li>

<li>Wouter van Oortmerssen<br />
<a href="http://esolangs.org/wiki/Wouter_van_Oortmerssen">http://esolangs.org/wiki/Wouter_van_Oortmerssen</a>
</li>

<li>dc (computer program)<br />
<a href="https://en.wikipedia.org/wiki/Dc_%28computer_program%29">https://en.wikipedia.org/wiki/Dc_%28computer_program%29</a>
</li>

<li>dc (na Esolang)<br />
<a href="http://esolangs.org/wiki/Dc">http://esolangs.org/wiki/Dc</a>
</li>

<li>Whitespace - tutorial<br />
<a href="http://compsoc.dur.ac.uk/whitespace/tutorial.html">http://compsoc.dur.ac.uk/whitespace/tutorial.html</a>
</li>

<li>Programovací jazyk Forth a zásobníkové procesory<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory/">http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory/</a>
</li>

<li>Seriál Programovací jazyk Forth<br />
<a href="http://www.root.cz/serialy/programovaci-jazyk-forth/">http://www.root.cz/serialy/programovaci-jazyk-forth/</a>
</li>

<li>Programovací jazyk Factor<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-factor/">http://www.root.cz/clanky/programovaci-jazyk-factor/</a>
</li>

<li>Grafický metaformát PostScript<br />
<a href="http://www.root.cz/clanky/graficky-metaformat-postscript/">http://www.root.cz/clanky/graficky-metaformat-postscript/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

