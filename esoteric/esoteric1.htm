<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyky z vývojářského pekla</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyky z vývojářského pekla</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Oblíbenou kratochvílí mnoha vývojářů (autora tohoto článku nevyjímaje) jsou nekonečné debaty o tom, který programovací jazyk je pro danou oblast použití nejlepší či nejčitelnější. Lze si ovšem položit i jinou otázku, například &bdquo;v&nbsp;jakých jazycích se vytváří nejhůře čitelný kód?&ldquo; Několik odpovědí naleznete v&nbsp;tomto článku.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyky z&nbsp;vývojářského pekla</a></p>
<p><a href="#k02">2. FALSE</a></p>
<p><a href="#k03">3. Brainfuck</a></p>
<p><a href="#k04">4. Minifuck</a></p>
<p><a href="#k05">5. Minifuck-2D</a></p>
<p><a href="#k06">6. XMLfuck aneb příprava na invazi do enterprise světa</a></p>
<p><a href="#k07">7. Befunge</a></p>
<p><a href="#k08">8. Další šílené jazyky: Malbolge a Piet</a></p>
<p><a href="#k09">9. Perlička na závěr pro všechny javascriptaře: JSFuck</a></p>
<p><a href="#k10">10. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyky z&nbsp;vývojářského pekla</h2>

<p>Kromě programovacích jazyků, které byly navrženy takovým způsobem, aby je
bylo možné použít pro seriózní práci či pro výuku programování, dnes existuje
již <a href="http://esolangs.org/wiki/Language_list">minimálně několik set</a>
programovacích jazyků, které jsou nějakým způsobem &bdquo;šílené&ldquo;. Jedná
se například o jazyky, které obsahují jen naprosto minimální počet příkazů,
k&nbsp;zápisu algoritmů se používají jednoznakové příkazy či dokonce jen
takzvané bílé znaky, jazyky, kde je algoritmy nutné číst ve všech čtyřech
směrech či naopak o jazyky založené čistě na principu Turingova stroje či
Lambda kalkulu. Důvody vzniku podobných jazyků jsou různé &ndash; může se
jednat o vtip, hračku, na které programátor pracuje, aby se odreagoval,
výsledek snahy o vytvoření co nejkratšího překladače či interpretru či dokonce
o výsledek nějakého seriózního výzkumy (takovými jazyky se ovšem dnes zabývat
nebudeme).</p>

<p>Na Rootu jsme se již mohli seznámit s&nbsp;jedním z&nbsp;prvních
esoterických programovacích jazyků. Jedná se o <i>INTERCAL</i>, který je známý
především tím, že zcela odstranil příkaz <strong>GOTO</strong> (ten je přece
špatný ano?) a nahradil ho mnohem lepším příkazem <strong>COME FROM</strong>.
Taktéž překladač tohoto jazyka je většinou implementován tak, aby programátora
trošku napínal, protože přibližně každý desátý překlad skončí s&nbsp;chybou.
Bližší informace o tomto projektu naleznete v&nbsp;již zmíněném článku <a
href="http://www.root.cz/clanky/intercal-dostatecne-sileny-programovaci-jazyk/">http://www.root.cz/clanky/intercal-dostatecne-sileny-programovaci-jazyk/</a>.
My si ovšem stručně popíšeme jiné jazyky, především pak rodiny jazyků
založených na Turingově stroji (<i>Brainfuck</i>), zásobníkovém automatu
(<i>FALSE</i>), zápisu kódu do bitmap (<i>Piet</i>) či jazyku <i>JSFuck</i>,
který do důsledků používá některé méně známé vlastnosti JavaScriptu.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. FALSE</h2>

<p>Autorem programovacího jazyka <i>FALSE</i> je <i>Wouter van Oortmerssen</i>,
jehož jméno si pravděpodobně někteří čtenáři pamatují, protože stejný člověk
vytvořil například ve své době velmi populární vyšší programovací jazyk nazvaný
<i>Amiga E</i>. Kromě těchto dvou jazyků vytvořil Wouter van Oortmerssen i
další jazyky, například <i>Bla</i>, <i>Aardappel</i> a <i>SHEEP</i>. Vraťme se
však k&nbsp;jazyku <i>FALSE</i>. Ten vznikl pro Amigu a zajímavé je, že
překladač tohoto jazyka měl velikost pouhých 1024 bajtů (ne kilobajtů).
<i>FALSE</i> je založen na zásobníkovém virtuálním stroji, takže se výsledný
program tvoří podobným způsobem, jako program v&nbsp;jazyce <i>Forth</i>, i
když samotné příkazy (ve <i>Forthu</i> slova) jsou v&nbsp;případě <i>FALSE</i>
zapisovány jediným znakem &ndash; každý znak je celým příkazem, podobně jako
v&nbsp;případě dále zmíněného <i>Brainfucku</i> (i to je ostatně jeden
z&nbsp;důvodů jednoduchosti interpretrů a překladačů těchto esoterických
jazyků).</p>

<p>Pokud se ve zdrojovém programu vyskytuje číslo, je toto číslo uloženo na
zásobník, opět podobně jako ve <i>Forthu</i>. Posléze lze s&nbsp;hodnotami
uloženými na vrcholu zásobníku (popř.&nbsp;těsně pod jeho vrcholem) provádět
mnoho operací &ndash; aritmetických, logických, atd. S&nbsp;obsahem zásobníku
lze různým způsobem manipulovat, například je možné duplikovat hodnotu uloženou
na jeho vrcholu atd. Programovací jazyk <i>FALSE</i> taktéž obsahuje podporu
pro proměnné, které jsou pro jednoduchost pojmenovány 'a' až 'z'. Zajímavá je
podpora podprogramů (subrutin), které jsou tvořeny kódem umístěným mezi znaky [
a ]. Pro vyvolání subrutiny (uložené na vrcholu zásobníku) se používá příkaz !
(vykřičník). V&nbsp;následující tabulce jsou pro ilustraci vypsány některé
příkazy jazyka <i>FALSE</i> a korespondující příkazy <i>Forthu</i>:</p>

<table>
<tr><th>#</th><th>FALSE</th><th>Forth</th></tr>
<tr><td>1</td><td>$</td><td>dup</td></tr>
<tr><td>2</td><td>%</td><td>pop</td></tr>
<tr><td>3</td><td>\</td><td>swap</td></tr>
<tr><td>4</td><td>@</td><td>rot</td></tr>
<tr><td>5</td><td>_</td><td>neg</td></tr>
<tr><td>6</td><td>+</td><td>+</td></tr>
<tr><td>7</td><td>:</td><td>! (store, uložení hodnoty do proměnné)</td></tr>
<tr><td>8</td><td>;</td><td>@ (fetch, načtení hodnoty z proměnné)</td></tr>
</table>

<p>Pro ilustraci zápisu &bdquo;reálných&ldquo; programů se podívejme na zápis
algoritmu pro výpočet prvočísel ležících v&nbsp;rozsahu od 0 do 100 (příklad je
převzat přímo ze stránky autora tohoto jazyka):</p>

<pre>
99 9[1-$][\$@$@$@$@\/*=[1-$$[%\1-$@]?0=[\$.' ,\]?]?]#
</pre>

<p>Poznámka: tento jazyk je Turingovsky úplný.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Brainfuck</h2>

<p>Výše zmíněným jazykem <i>FALSE</i> se inspirovali i autoři dalších šílených
programovacích jazyků (zejména těch, kteří taktéž vlastnili Amigu). Jedním
z&nbsp;těchto autorů byl i <i>Urban Müller</i>. Toto jméno stojí za
zapamatování, protože Urban v&nbsp;roce 1993 vytvořil slavný a velmi často
zmiňovaný programovací jazyk <i>Brainfuck</i>. V&nbsp;tomto programovacím
jazyku se pro zápis algoritmů používá pouze šest základních příkazů (podobných
příkazům použitým u Turingova stroje), které jsou doplněny o dva příkazy pro
vstup a výstup jednoho bajtu/ASCII znaku, přičemž každý příkaz byl
reprezentován pouze jediným znakem. Pro počítače <i>Amiga</i>, který se stal
&bdquo;semeništěm&ldquo; mnoha podobných projektů, existovalo několik
interpretrů a dokonce i překladače jazyka <i>Brainfuck</i>, přičemž některé
implementace měly binární spustitelný soubor menší než pouhých 200 bajtů!</p>

<p>Programy zapisované v&nbsp;<i>Brainfucku</i> nemají pevně danou strukturu a
mohou obsahovat prakticky všechny další znaky (včetně mezer a konců řádků),
které jsou při interpretaci či kompilaci ignorovány. Rozeznává se pouze osm
znaků vypsaných v&nbsp;následující tabulce. Tyto znaky slouží pro posun
ukazatele po pásce rozdělené do políček, přičemž na každém políčku je uložena
celočíselná hodnota. Páska je většinou reprezentována polem, jehož maximální
velikost bývá omezena na 32000 buněk a celočíselné hodnoty ukládané do
jednotlivých buněk mohou mít hodnotu v&nbsp;rozsahu 0..255 (některé
implementace však mají velikost pásky/pole prakticky neomezenou):</p>

<table>
<tr><th>#</th><th>Příkaz</th><th>Význam</th></tr>
<tr><td>1</td><td>&gt;</td><td>posun ukazatele na &bdquo;pásce&ldquo; doprava na další políčko</td></tr>
<tr><td>2</td><td>&lt;</td><td>posun ukazatele na &bdquo;pásce&ldquo; doleva na předchozí políčko</td></tr>
<tr><td>3</td><td>+   </td><td>zvýšení celočíselné hodnoty uložené v&nbsp;aktuálním políčku o 1</td></tr>
<tr><td>4</td><td>-   </td><td>snížení celočíselné hodnoty uložené v&nbsp;aktuálním políčku o 1</td></tr>
<tr><td>5</td><td>.   </td><td>výpis číselné hodnoty (převedené na ASCII znak) uložené v&nbsp;aktuálním políčku</td></tr>
<tr><td>6</td><td>,   </td><td>načtení bajtu (znaku) a uložení jeho číselné hodnoty do aktuálního políčka (opět se většinou předpokládá použití ASCII)</td></tr>
<tr><td>7</td><td>[   </td><td>v&nbsp;případě, že je hodnota v&nbsp;aktuálním políčku nulová, přesune se program za odpovídající ]</td></tr>
<tr><td>8</td><td>]   </td><td>v&nbsp;případě, že je hodnota v&nbsp;aktuálním políčku nenulová, přesune se program na odpovídající [</td></tr>
</table>

<p>Typickým demonstračním programem je &bdquo;Hello world&ldquo;, který
v&nbsp;podání <i>Brainfucku</i> vypadá následovně:</p>

<pre>
++++++++++[&gt;+&gt;+++&gt;++++&gt;+++++++&gt;++++++++&gt;+++++++++&gt;++
++++++++&gt;+++++++++++&gt;++++++++++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+.&gt;&gt;&gt;
&gt;+..&lt;.&lt;++++++++.&gt;&gt;&gt;+.&lt;&lt;+.&lt;&lt;&lt;&lt;++++.&lt;++.&gt;&gt;&gt;+++++++.&gt;&gt;&gt;.+++.
&lt;+++++++.--------.&lt;&lt;&lt;&lt;&lt;+.&lt;+++.---.
</pre>

<p>Dalším podobně nečitelným programem je program pro výpočet faktoriálu:</p>

<pre>
&gt;++++++++++&gt;&gt;&gt;+&gt;+[&gt;&gt;&gt;+[-[&lt;&lt;&lt;&lt;&lt;[+&lt;&lt;&lt;&lt;&lt;]&gt;&gt;[[-]&gt;[&lt;&lt;+&gt;+&gt;-]&lt;[&gt;+&lt;-]&lt;[&gt;+&lt;-[&gt;+&lt;-[&gt;
+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;+&lt;-[&gt;[-]&gt;&gt;&gt;&gt;+&gt;+&lt;&lt;&lt;&lt;&lt;&lt;-[&gt;+&lt;-]]]]]]]]]]]&gt;[&lt;+&gt;-
]+&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;[&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&gt;&gt;&gt;&gt;&gt;]++[-&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;&gt;&gt;-]+&gt;&gt;&gt;&gt;&gt;]&lt;[&gt;++&lt;-]&lt;&lt;&lt;&lt;[&lt;[
&gt;+&lt;-]&lt;&lt;&lt;&lt;]&gt;&gt;[-&gt;[-]++++++[&lt;++++++++&gt;-]&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;[&lt;[&gt;+&gt;+&lt;&lt;-]&gt;.&lt;&lt;&lt;&lt;&lt;]&gt;.&gt;&gt;&gt;&gt;]
</pre>

<p>Poznámka: tento jazyk je Turingovsky úplný za předpokladu, že páska/pole
není omezeno.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Minifuck</h2>

<p>Jazyk <i>Brainfuck</i> je poměrně populární, velmi pravděpodobně i
z&nbsp;toho důvodu, že napsat pro něj interpret je značně jednoduché, protože
celá interpretace spočívá ve zvyšování či snižování obsahu prvku pole, posunu
indexu v&nbsp;poli, popř.&nbsp;v&nbsp;hledání odpovídající párové závorky. Není
tedy divu, že vzniklo <a
href="http://esolangs.org/wiki/Category:Brainfuck_derivatives">několik
desítek</a> různých dialektů tohoto jazyka. Někteří autoři se zaměřili na další
zmenšení instrukčního souboru. Velmi dobrým příkladem tohoto přístupu může být
jazyk nazvaný <i>Minifuck</i>, který obsahuje pouhé tři instrukce. Navíc se
původní koncept pole (či pásky) obsahující celočíselné hodnoty taktéž
zjednodušil, protože <i>Minifuck</i> pracuje s&nbsp;polem/páskou obsahující
pouze binární hodnoty 0 či 1. To samozřejmě znamená, že programování
v&nbsp;takovémto jazyce je mnohem komplikovanější, protože i tak základní
operace, jakou je součet, nyní musí být explicitně naprogramovaná.</p>

<p>Podívejme se nyní, které operace jsou v&nbsp;<i>Minifucku</i>
implementovány:</p>

<table>
<tr><th>#</th><th>Příkaz</th><th>Význam</th></tr>
<tr><td>1</td><td>&lt;</td><td>posun ukazatele na &bdquo;pásce&ldquo; doleva na předchozí políčko</td></tr>
<tr><td>2</td><td>.   </td><td>posun na další políčko s&nbsp;jeho inverzí. současně se vypíše znak zapsaný v dalších osmi políčcích</td></tr>
<tr><td>3</td><td>[   </td><td>posun na další políčko s&nbsp;jeho inverzí, pokud je bit nulový, další instrukce se přeskočí a invertuje se <i>následující</i> bit</td></tr>
</table>

<p>Jak je z&nbsp;tabulky patrné, je sice příkazů skutečně méně, ovšem je nutné,
aby každý příkaz prováděl větší množství operací. Kromě prvního příkazu &lt;
obsahují další dva příkazy podmínku, která vlastně nahrazuje funkci [ a ]
z&nbsp;<i>Brainfucku</i>.</p>

<p>Poznámka: tento jazyk je pravděpodobně Turingovsky úplný (za předpokladu
zprava nekonečné pásky), ovšem důkaz pravděpodobně ještě nebyl vytvořen.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Minifuck-2D</h2>

<p>Z&nbsp;<i>Minifucku</i> a částečně i z&nbsp;jazyka <i>Minimal-2D</i> byl
odvozen další esoterický (a již skutečně dosti šílený) programovací jazyk
nazvaný příznačně <i>Minifuck-2D</i>. Tento jazyk je zvláštní tím, že se
programový kód nečte sekvenčně zleva doprava a po jednotlivých řádcích, ale
interpret se musí pohybovat po 2D šachovnici obsahující jednoznakové příkazy.
Samotný způsob tohoto pohybu trošku připomíná robota Karla, protože znak
představující následující vykonávaný příkaz se může nacházet před, za, nad či
pod aktuálně zpracovávaným znakem, a to v&nbsp;závislosti na aktuální
orientaci. Stav programu je zapisován na pásku (do pole) obsahující binární
hodnoty, což je stejný přístup, s&nbsp;jakým jsme se setkali už v&nbsp;případě
<i>Minifucku</i>. Pro zajímavost se podívejme, jaké příkazy <i>Minifuck-2D</i>
obsahuje. Jedná se o pouhé čtyři příkazy:</p>

<table>
<tr><th>#</th><th>Příkaz</th><th>Význam</th></tr>
<tr><td>1</td><td>&lt;</td><td>posun ukazatele na &bdquo;pásce&ldquo; dozadu</td></tr>
<tr><td>2</td><td>@   </td><td>otočení doprava: změna orientace při čtení zdrojového kódu</td></tr>
<tr><td>3</td><td>.   </td><td>posun na další políčko s&nbsp;jeho inverzí. současně se vypíše znak zapsaný v dalších osmi políčcích</td></tr>
<tr><td>4</td><td>!   </td><td>posun na další políčko s&nbsp;jeho inverzí, pokud je bit nulový, další instrukce se přeskočí</td></tr>
</table>

<p>Příklad &bdquo;programu&ldquo; &ndash; implementace nekonečné smyčky
(schválně se zamyslete nad tím, proč prostě nestačí zapsat pouze čtyři znaky @
do čtverce):</p>

<pre>
!&lt;!@@
   @@
</pre>

<p>Poznámka: tento jazyk je pravděpodobně Turingovsky úplný.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. XMLfuck aneb příprava na invazi do enterprise světa</h2>

<p>V&nbsp;enterprise světě, ovšem nejenom tam, je pro přenos dat a někdy i pro
serializaci programů populární používat značkovací jazyk <i>XML</i>. Aby bylo
možné (samozřejmě zpočátku jen nenápadně) použít některý z&nbsp;dialektů
programovacího jazyka <i>Brainfuck</i> i v&nbsp;takovém prostředí, byla
vytvořena nová varianta tohoto jazyka, která je zapisována přímo v&nbsp;XML.
Ovšem současně se samozřejmě jedná o plnohodnotnou serializaci původního
zdrojového kódu. Otázkou zůstává, zda je možné interpretr napsat jen
s&nbsp;použitím XML transformace.</p>

<p>Kořenový element vypadá takto (popravdě se jeho jméno do korporátního
prostředí moc nehodí):</p>

<pre>
&lt;fuck bits="" wrap="" signed=""&gt;&lt;/fuck&gt;
</pre>

<p>Atributy obsahují specifikaci chování pásky/pole, na němž se uchovává stav
programu. Většinou se používají osmibitové hodnoty s&nbsp;přetečením (wrap se
nastavuje na &bdquo;yes&ldquo;) a se znaménkem (signed se nastavuje na
&bdquo;yes&ldquo;)</p>

<p>Podobně je možné specifikovat parametry pásky, takže interpret nemusí hádat,
jak má být páska dlouhá atd.:</p>

<pre>
&lt;tape name="" type="" length="" start="" /&gt;
</pre>

<p>Šest původních příkazů má v&nbsp;XMLfucku přímý ekvivalent:</p>

<table>
<tr><th>#</th><th>Příkaz</th><th>XMLFuck</th><th>Význam</th></tr>
<tr><td>1</td><td>&gt;</td><td>&lt;ptrinc&gt;</td><td>posun ukazatele na &bdquo;pásce&ldquo; doprava na další políčko</td></tr>
<tr><td>2</td><td>&lt;</td><td>&lt;ptrdec&gt;</td><td>posun ukazatele na &bdquo;pásce&ldquo; doleva na předchozí políčko</td></tr>
<tr><td>3</td><td>+   </td><td>&lt;inc&gt;</td><td>zvýšení celočíselné hodnoty uložené v&nbsp;aktuálním políčku o 1</td></tr>
<tr><td>4</td><td>-   </td><td>&lt;dec&gt;</td><td>snížení celočíselné hodnoty uložené v&nbsp;aktuálním políčku o 1</td></tr>
<tr><td>5</td><td>.   </td><td>&lt;print&gt;</td><td>výpis číselné hodnoty (převedené na ASCII znak) uložené v&nbsp;aktuálním políčku</td></tr>
<tr><td>6</td><td>,   </td><td>&lt;red&gt;</td><td>načtení bajtu (znaku) a uložení jeho číselné hodnoty do aktuálního políčka</td></tr>
</table>

<p>Původní závorky [ a ] jsou nahrazeny uzavřením části kódu mezi značky
&lt;while&gt; a  &lt;/while&gt;. Párovost zde není na škodu, protože i
v&nbsp;původním <i>Brainfucku</i> musely být znaky [ a ] zpárovány.</p>

<p>Poznámka: ukázku přepisu zdrojového kódu pro výpočet faktoriálu zde nebudu
uvádět, protože by tento kód byl delší, než celý tento článek. Tady se jasně
ukazuje, jak je původní <i>Brainfuck</i> úsporný :-</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Befunge</h2>

<p>Velmi zajímavým esoterickým jazykem, který se opět dočkal mnoha dalších
dialektů, je jazyk nazvaný <i>Befunge</i>. Tento jazyk byl vytvořen (znovu!)
v&nbsp;roce 1993 a jeho autorem je <i>Chris Pressey</i>. <i>Befunge</i> (tento
název vznikl z&nbsp;typografické chyby) je považován za jeden z&nbsp;prvních
&bdquo;dvourozměrných&ldquo; programovacích jazyků. Jedinými datovými
strukturami, s&nbsp;nimiž se zde pracuje, je zásobník a dvourozměrné pole,
které na začátku programu obsahuje vlastní programový kód, kde opět každý znak
odpovídá jednomu příkazu. Ovšem současně je možné obsah tohoto pole měnit
samotným programem a tak v&nbsp;případě potřeby vytvářet samomodifikující se
kód. Aby byl jazyk <i>Befunge</i> Turingovsky úplný, muselo by být toto pole
nekonečné (aspoň v&nbsp;jednom směru), ovšem klasické interpretry se většinou
spolehnou na pole o velikosti 80&times;25 či 80&times;24 znaků. Tento rozměr
samozřejmě není náhodný, protože přesně odpovídá rozměrům standardních
textových režimů (programy psané v&nbsp;<i>Befunge</i> se totiž mohou ladit a
krokovat).</p>

<p>Repertoár příkazů je v&nbsp;tomto programovacím jazyku dosti rozsáhlý,
nejedná se tedy o minimalistický jazyk ve stylu <i>FALSE</i> či
<i>Brainfucku</i>. Základem jsou příkazy pro změnu orientace čtení ve
dvourozměrném poli. Tyto příkazy jsou zapisovány znaky připomínajícími šipky,
tedy &lt;, &gt;, ^ a v. Aby toho nebylo málo, je možné použít i znak ?, kterým
se směr změní náhodně. Nekonečnou smyčku lze naprogramovat takto:</p>

<pre>
&gt;v
^&lt;
</pre>

<p>Další příkazy pracují se zásobníkem (podobně jako ve Forthu): pomocí příkazů
0 až 9 se na zásobník uloží příslušná hodnota, příkazy +, -, *, / a % ze
zásobníku získají dvě hodnoty, provedou naznačenou aritmetickou operaci a uloží
výsledek zpět. Mezi další zásobníkové operace patří : (<strong>dup</strong>), \
(<strong>swap</strong>), $ (<strong>pop</strong>) doplněné o takzvané
horizontální a vertikální &bdquo;if&ldquo;: změna orientace se provede jen ve
chvíli, kdy je hodnota uložená na vrcholu zásobníku rovna nule.</p>

<p>Důležité jsou taktéž příkazy g (get) a p (put) sloužící pro vstup a výstup
dat na obrazovku. V&nbsp;případě příkazu g (get) se ze zásobníku přečtou dvě
hodnoty x a y, získá se ASCII hodnota znaku uloženého na souřadnicích [x,y] a
tato hodnota se uloží na zásobník. Opakem je p (put), které ze zásobníku přečte
tři hodnoty: x, y, ASCII kód a uloží daný kód na souřadnice [x,y].</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Další šílené jazyky: Unlambda, Malbolge a Piet</h2>

<p>Esoterických jazyků skutečně existuje nepřeberné množství, ovšem minimálně
tři z&nbsp;nich si budou zasluhovat poněkud delší popis (a tím pádem
pravděpodobně i samostatný článek). Jedná se o jazyky nazvané <i>Unlambda</i>,
<i>Malbolge</i> a <i>Piet</i>. Každý z&nbsp;těchto jazyků je odlišný, protože
<i>Unlambda</i> vznikl na základě obecného Lambda kalkulu, <i>Malbolge</i>
(Melebolge je osmá úroveň pekla v&nbsp;Dantově Božské komedii) je navržen
takovým způsobem, že většina programů pro něj vznikla procházením stavového
prostoru a nikoli přímým naprogramováním a <i>Piet</i> je programovací jazyk,
v&nbsp;němž se algoritmy nepíšou zápisem příkazů, ale vybarvováním bitmapy
(barvy pixelů v&nbsp;bitmapě jsou dekódovány jako příkazy). <i>Piet</i> je
v&nbsp;několika ohledech podobný již výše zmíněnému jazyku <i>Befunge</i>
(založeno na 2D poli a zásobníku) a ještě před jeho podrobnějším popisem zkusím
čtenáře nalákat na (integrované) vývojové prostředí, které pro tento jazyk
vzniklo a je dostupné na stránce <a
href="http://www.rapapaing.com/blog/?page_id=6">http://www.rapapaing.com/blog/?page_id=6</a>.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Perlička na závěr pro všechny javascriptaře: JSFuck</h2>

<p>Všechny doposud zmíněné programovací jazyky mají svoje vlastní interpretry a
v&nbsp;některých případech i překladače. Jazyk (či spíše přesněji řečeno
pseudojazyk) nazvaný <i>JSFuck</i> se nutnosti psaní vlastního interpretru
elegantně vyhýbá, protože se vlastně jedná o podmnožinu dnes tak populárního
programovacího jazyka <i>JavaScript</i>. Pokud však očekáváte, že se
v&nbsp;<i>JSFucku</i> píšou programy běžným způsobem, pouze se vynechávají
některé konstrukce (řekněme práce s&nbsp;prototypy), jste na omylu. Korektně
zapsané programy v&nbsp;JSFucku totiž mohou obsahovat pouze těchto šest
znaků:</p>

<pre>
( ) [ ] + !
</pre>

<p>Žádné další symboly se nepoužívají, takže například není možné přímo zapsat
ani znaky a dokonce ani číselné hodnoty! Je však možné si v&nbsp;JavaScriptu
skutečně vystačit s&nbsp;pouhými šesti znaky? Ukazuje se, že to možné je,
záleží jen na námi zvolené reprezentaci. Například konstanta nula se může
zapsat jako výraz:</p>

<pre>
+[]
</pre>

<p>což je sice možná poněkud překvapivé, ale unární + aplikované na prázdné
pole skutečně vrátí nulu, a to díky zvláštnímu pojetí typového systému a
konverze hodnot mezi různými datovými typy. Podobně jednička je výsledkem:</p>

<pre>
+!![]
</pre>

<p>nebo alternativně:</p>

<pre>
+!+[]
</pre>

<p>! je logická negace, přičemž True (negace nuly :-) se pro unární
aritmetickou operaci + převede na 1. Podobně lze vytvořit další hodnoty, opět
díky typovému systému JavaScriptu, kde platí True+True=2 atd.</p>

<p>Pokud je zapotřebí pracovat se znaky (vytvořit například "Hello world"), je
to poněkud složitější. Některé znaky lze získat relativně jednoduše indexováním
z&nbsp;řetězců typu "true", "undefined", "NaN" atd., další znaky se ovšem
skládají složitějším způsobem, který lze vyčíst z&nbsp;následujícího zdrojového
kódu: <a
href="https://github.com/aemkei/jsfuck/blob/master/jsfuck.js">https://github.com/aemkei/jsfuck/blob/master/jsfuck.js</a></p>

<p>Pokud si chcete tento jazyk odzkoušet (nebo se jen přesvědčit, do jaké míry
znáte všechna zákoutí JavaScriptu), stačí použít interaktivní prostředí
dostupné na snadno zapamatovatelné adrese <a
href="http://www.jsfuck.com/">http://www.jsfuck.com/</a>.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Odkazy na Internetu</h2>

<ol>

<li>Esolang, the esoteric programming languages wiki<br />
<a href="https://esolangs.org/wiki/Main_Page">https://esolangs.org/wiki/Main_Page</a>
</li>

<li>Esoteric Topics in Computer Programming<br />
<a href="http://web.archive.org/web/20020609152409/www.catseye.mb.ca/esoteric/index.html">http://web.archive.org/web/20020609152409/www.catseye.mb.ca/esoteric/index.html</a>
</li>

<li>Programming Languages designed by Wouter von Oortmerssen<br />
<a href="http://strlen.com/programming-languages">http://strlen.com/programming-languages</a>
</li>

<li>Two-dimensional languages<br />
<a href="https://esolangs.org/wiki/Category:Two-dimensional_languages">https://esolangs.org/wiki/Category:Two-dimensional_languages</a>
</li>

<li>Piet (homepage)<br />
<a href="http://www.dangermouse.net/esoteric/piet.html">http://www.dangermouse.net/esoteric/piet.html</a>
</li>

<li>Piet (na Esolang)<br />
<a href="https://esolangs.org/wiki/Piet">https://esolangs.org/wiki/Piet</a>
</li>

<li>Piet IDE<br />
<a href="http://www.rapapaing.com/blog/?page_id=6">http://www.rapapaing.com/blog/?page_id=6</a>
</li>

<li>JSFuck (homepage)<br />
<a href="http://www.jsfuck.com/">http://www.jsfuck.com/</a>
</li>

<li>JSFuck (na Esolang)<br />
<a href="https://esolangs.org/wiki/JSFuck">https://esolangs.org/wiki/JSFuck</a>
</li>

<li>JSFuck (na Wikipedii)<br />
<a href="https://en.wikipedia.org/wiki/JSFuck">https://en.wikipedia.org/wiki/JSFuck</a>
</li>

<li>Malbolge (na Esolang)<br />
<a href="https://esolangs.org/wiki/Malbolge">https://esolangs.org/wiki/Malbolge</a>
</li>

<li>Malbolge (na Wikipedii)<br />
<a href="https://en.wikipedia.org/wiki/Malbolge">https://en.wikipedia.org/wiki/Malbolge</a>
</li>

<li>Befunge (na Esolang)<br />
<a href="https://esolangs.org/wiki/Befunge">https://esolangs.org/wiki/Befunge</a>
</li>

<li>Befunge (na Wikipedii)<br />
<a href="https://en.wikipedia.org/wiki/Befunge">https://en.wikipedia.org/wiki/Befunge</a>
</li>

<li>Minifuck<br />
<a href="https://esolangs.org/wiki/Minifuck">https://esolangs.org/wiki/Minifuck</a>
</li>

<li>XMLfuck<br />
<a href="https://esolangs.org/wiki/XMLfuck">https://esolangs.org/wiki/XMLfuck</a>
</li>

<li>The False Programming Language<br />
<a href="http://strlen.com/false-language">http://strlen.com/false-language</a>
</li>

<li>The FALSE Programming Language Manual<br />
<a href="http://strlen.com/false/false.txt">http://strlen.com/false/false.txt</a>
</li>

<li>Wouter van Oortmerssen<br />
<a href="http://esolangs.org/wiki/Wouter_van_Oortmerssen">http://esolangs.org/wiki/Wouter_van_Oortmerssen</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

