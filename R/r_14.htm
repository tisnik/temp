<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Funkce v programovacím jazyku R</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Funkce v programovacím jazyku R</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Funkce jsou jednou z nejužitečnějších abstrakcí používaných při vývoji. Programovací jazyk R práci s funkcemi samozřejmě podporuje a funkce jsou zde dokonce plnohodnotným typem s podporou lexikálních uzávěrů a funkcí vyššího řádu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Funkce v&nbsp;programovacím jazyku R</a></p>
<p><a href="#k02">2. Funkce bez návratové hodnoty, speciální nehodnota <strong>NULL</strong></a></p>
<p><a href="#k03">3. Návratová hodnota funkce, konstrukce <strong>return</strong></a></p>
<p><a href="#k04">4. Pojmenované parametry volaných funkcí</a></p>
<p><a href="#k05">5. Nepovinné parametry s&nbsp;výchozí hodnotou</a></p>
<p><a href="#k06">6. Anonymní funkce</a></p>
<p><a href="#k07">7. Zavolání funkce pro všechny prvky seznamů nebo vektorů</a></p>
<p><a href="#k08">8. Kombinace anonymní funkce a funkcí vyššího řádu <strong>sapply</strong> či <strong>lapply</strong></a></p>
<p><a href="#k09">9. Prostředí (environment)</a></p>
<p><a href="#k10">10. Přístup k&nbsp;nelokálním proměnným</a></p>
<p><a href="#k11">11. Lexikální uzávěry</a></p>
<p><a href="#k12">12. Klasický příklad uzávěru &ndash; čítač (generátor sekvence)</a></p>
<p><a href="#k13">13. Čítač s&nbsp;předem nastaveným krokem</a></p>
<p><a href="#k14">14. Rekurzivní funkce</a></p>
<p><a href="#k15">15. Funkce vyššího řádu v&nbsp;programovacím jazyce R</a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">18. Balíčky s&nbsp;alternativní formou definice funkcí</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Funkce v&nbsp;programovacím jazyku R</h2>

<p>Jak jsme si již řekli v&nbsp;perexu článku, představují funkce
v&nbsp;oblasti syntaxe a sémantiky programovacích jazyků jednu
z&nbsp;nejužitečnějších abstrakcí vůbec. Pokud nějaký jazyk podporuje funkce
(ideálně jako plnohodnotný datový typ), je možné programy strukturovat,
izolovat čistě výpočetní části od částí, které mění stav aplikace atd. Některé
programovací jazyky navíc díky podpoře <i>lexikálních uzávěrů</i>
(<i>closure</i>) umožňují tvorbu <a href="#k12">generátorů</a> atd.
V&nbsp;programovacím jazyku R jsou funkce plnohodnotným datovým typem, což
mj.&nbsp;znamená možnost využití <a href="#k15">funkcí vyšších řádů</a>
(<i>higher order functions</i>). Funkce navíc mohou modifikovat proměnné, které
se nachází mimo oblast viditelnosti funkce, což se nejvíce využije právě při
práci s&nbsp;uzávěry (pro modifikaci těchto proměnných se používá speciální
operátor a nikoli například obdoba <strong>global</strong> či
<strong>nonlocal</strong> z&nbsp;Pythonu).</p>

<p>Konstrukce funkcí je pochopitelně popsána přímo ve vestavěné nápovědě
programovacího jazyka R:</p>

<pre>
<strong>help("function")</strong>
&nbsp;
function                 package:base                  R Documentation
&nbsp;
Function Definition
&nbsp;
Description:
&nbsp;
     These functions provide the base mechanisms for defining new
     functions in the R language.
&nbsp;
Usage:
&nbsp;
     function( arglist ) expr
     return(value)
     &nbsp;
Arguments:
&nbsp;
 arglist: Empty or one or more name or name=expression terms.
&nbsp;
    expr: An expression.
&nbsp;
   value: An expression.
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Funkce bez návratové hodnoty, speciální nehodnota <strong>NULL</strong></h2>

<p>Nejjednodušší funkcí vůbec (a asi i nejméně užitečnou funkcí) je funkce,
která neakceptuje žádné parametry, nevrací žádnou hodnotu a má prázdné tělo.
Takovou funkci je možné v&nbsp;programovacím jazyku R zapsat následujícím
způsobem:</p>

<pre>
<strong>f0 &lt;- function() {</strong>
<strong>}</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti lze zápis provést na
jediném řádku, tj.&nbsp;uzavírací složená závorka nemusí být umístěna
samostatně.</div></p>

<p>Pokud tuto funkci zavoláme, vrátí se speciální nehodnota
<strong>NULL</strong>:</p>

<pre>
&gt; <strong>f0()</strong>
&nbsp;
NULL
</pre>

<p>Ve skutečnosti jsme <strong>NULL</strong> ještě nikdy v&nbsp;jazyku R
nepoužili. Známe pouze speciální hodnoty <strong>NA</strong> a
<strong>NaN</strong> (což jsou skutečné hodnoty se specifickým významem).
<strong>NULL</strong> je ovšem poněkud odlišná v&nbsp;tom, že se skutečně jedná
o &bdquo;nic&ldquo;, což se projeví například i při provádění relačních operací
později v&nbsp;této kapitole. Pochopitelně se můžeme podívat do nápovědy:</p>

<pre>
&gt; <strong>help(NULL)</strong>
</pre>

<p>Popis:</p>

<pre>
NULL                   package:base                    R Documentation
&nbsp;
The Null Object
&nbsp;
Description:
&nbsp;
     ‘NULL’ represents the null object in R: it is a reserved word.
     ‘NULL’ is often returned by expressions and functions whose value
     is undefined.
&nbsp;
Usage:
&nbsp;
     NULL
     as.null(x, ...)
     is.null(x)
&nbsp;
Arguments:
&nbsp;
       x: an object to be tested or coerced.
&nbsp;
     ...: ignored.
</pre>

<p>Lepší ovšem bude si způsoby práce s&nbsp;<strong>NULL</strong> vyzkoušet
sami. Nejprve predikát <strong>is.null</strong>:</p>

<pre>
<strong>x &lt;- NULL</strong>
&nbsp;
<strong>is.null(x)</strong>
TRUE
</pre>

<p>Některé další predikáty vrací pro <strong>NULL</strong> hodnotu
<strong>FALSE</strong>, takže se zdánlivě <strong>NULL</strong> příliš neliší
od již zmíněných <strong>NA</strong> či <strong>NaN</strong>:</p>

<pre>
&gt; <strong>is.numeric(x)</strong>
[1] FALSE
</pre>

<p>Ve skutečnosti tomu tak však vždy není. Relační operátory, které by měly
vracet <strong>TRUE</strong> či <strong>FALSE</strong> totiž pro
<strong>NULL</strong> na vstupu vrátí <i>prázdný vektor typu logical</i>:</p>

<pre>
&gt; <strong>x == 1</strong>
logical(0)
&nbsp;
&gt; <strong>x == x</strong>
logical(0)
&nbsp;
&gt; <strong>x != x</strong>
logical(0)
&nbsp;
&gt; <strong>x &lt; x</strong>
logical(0)
&nbsp;
&gt; <strong>x &gt; x</strong>
logical(0)
</pre>

<p>V&nbsp;praxi tedy prakticky vždy, když očekáváme, že by mohla nějaká
proměnná obsahovat <strong>NULL</strong>, musíme použít predikát
<strong>is.null</strong> a nikoli například <strong>x != NULL</strong>.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Návratová hodnota funkce, konstrukce <strong>return</strong></h2>

<p>Z&nbsp;funkce se automaticky vrací hodnota posledního výrazu. To například
znamená, že funkce vracející konstantu může vypadat následovně:</p>

<pre>
<strong>f1 &lt;- function() {</strong>
    <strong>42</strong>
<strong>}</strong>
</pre>

<p>Otestujeme si chování takové funkce. Pokud si necháme vyhodnotit jen vlastní
proměnnou s&nbsp;funkcí, vrátí se její zdrojový kód (což je docela
užitečné):</p>

<pre>
&gt; <strong>f1</strong>
&nbsp;
function() {
    42
}
</pre>

<p>Pokud funkci budeme chtít zavolat, je nutné použít kulaté závorky, i když se
jedná o funkci bez parametrů:</p>

<pre>
&gt; <strong>f1()</strong>
&nbsp;
[1] 42
</pre>

<p><div class="rs-tip-major">Poznámka: výsledkem je skutečně hodnota
42.</div></p>

<p>Podobným způsobem můžeme vytvořit funkci se dvěma parametry, která vrací
součet těchto parametrů:</p>

<pre>
<strong>add &lt;- function(x, y) {</strong>
    <strong>x+y</strong>
<strong>}</strong>
</pre>

<p>Otestování na dvou celých číslech:</p>

<pre>
&gt; <strong>add(1,2)</strong>
&nbsp;
[1] 3
</pre>

<p>Parametry nemají uvedeny typ, takže můžeme použít například i komplexní
čísla:</p>

<pre>
&gt; <strong>add(1+2i, 3+4i)</strong>
&nbsp;
[1] 4+6i
</pre>

<p>Ovšem například pro řetězce dojde k&nbsp;chybě, neboť pro ně není operátor +
definován:</p>

<pre>
&gt; <strong>add("a","b")</strong>
&nbsp;
Error in x + y : non-numeric argument to binary operator
</pre>

<p>Pokud vám automatické vrácení hodnoty posledního výrazu nevyhovuje, je možné
použít i konstrukci <strong>return</strong>, podobně, jako je tomu v&nbsp;mnoha
dalších programovacích jazycích:</p>

<pre>
<strong>help(return)</strong>
</pre>

<p>Ovšem je nutné si dát pozor na to, že v&nbsp;R je nutné psát výraz (jehož
hodnota se má vrátit) do závorek:</p>

<pre>
<strong>f1 &lt;- function() {</strong>
    <strong>return 42</strong>
<strong>}</strong>
</pre>

<p>Předchozí kód je napsán chybně:</p>

<pre>
Error: unexpected numeric constant in:
</pre>

<p>Korektní zápis konstrukce <strong>return</strong> vypadá takto:</p>

<pre>
<strong>f1 &lt;- function() {</strong>
    <strong>return(42)</strong>
<strong>}</strong>
&nbsp;
<strong>f1()</strong>
&nbsp;
42
</pre>

<p>Podívejme se nyní na složitější příklad, v&nbsp;němž je ve funkci použita
minule popsaná rozhodovací konstrukce <strong>if-else</strong>:</p>

<pre>
<strong>classify.number &lt;- function(x) {</strong>
  <strong>if (x &gt; 0) {</strong>
    <strong>result &lt;- "Positive"</strong>
  <strong>}</strong>
  <strong>else if (x &lt; 0) {</strong>
    <strong>result &lt;- "Negative"</strong>
  <strong>}</strong>
  <strong>else {</strong>
    <strong>result &lt;- "Zero"</strong>
  <strong>}</strong>
<strong>  return(result)</strong>
<strong>}</strong>
</pre>

<p>Tato funkce vrací hodnoty podle očekávání:</p>

<pre>
&gt; <strong>classify.number(-100)</strong>
[1] "Negative"
&nbsp;
&gt; <strong>classify.number(0)</strong>
[1] "Zero"
&nbsp;
&gt; <strong>classify.number(100)</strong>
[1] "Positive"
</pre>

<p>Konstrukce <strong>return</strong> se ovšem nemusí nacházet pouze na konci
funkce, což si ukážeme na upravené verzi funkce
<strong>classify.number</strong>:</p>

<pre>
<strong>classify.number &lt;- function(x) {</strong>
  <strong>if (x &gt; 0) {</strong>
    <strong>return("Positive")</strong>
  <strong>}</strong>
  <strong>else if (x &lt; 0) {</strong>
    <strong>return("Negative")</strong>
  <strong>}</strong>
  <strong>else {</strong>
    <strong>return("Zero")</strong>
  <strong>}</strong>
<strong>}</strong>
</pre>

<p>Výsledky budou stejné, jako v&nbsp;předchozí funkci:</p>

<pre>
&gt; <strong>classify.number(-100)</strong>
[1] "Negative"
&nbsp;
&gt; <strong>classify.number(0)</strong>
[1] "Zero"
&nbsp;
&gt; <strong>classify.number(100)</strong>
[1] "Positive"
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Pojmenované parametry volaných funkcí</h2>

<p>Připomeňme si ještě jednou funkci pro součet dvou čísel:</p>

<pre>
<strong>add &lt;- function(x, y) {</strong>
    <strong>x+y</strong>
<strong>}</strong>
</pre>

<p>Při volání této funkce můžeme (pochopitelně) předávat <i>poziční</i>
parametry::</p>

<pre>
&gt; <strong>add(10, 20)</strong>
&nbsp;
[1] 30
</pre>

<p>Parametry je ovšem možné při volání pojmenovat:</p>

<pre>
&gt; <strong>add(x=10, y=20)</strong>
&nbsp;
[1] 30
</pre>

<p>Což nám umožňuje nedodržet pořadí parametrů:</p>

<pre>
&gt; <strong>add(y=20, x=100)</strong>
&nbsp;
[1] 120
</pre>

<p>Umožněna je i libovolná kombinace pozičních a pojmenovaných parametrů,
přičemž jsou poziční parametry postupně dosazovány tak, aby vyplnily místa
neobsazená pojmenovanými parametry:</p>

<pre>
&gt; <strong>add(x=100, 0)</strong>
&nbsp;
[1] 100
</pre>

<p>I tento zápis je v&nbsp;jazyku R zcela korektní:</p>

<pre>
&gt; <strong>add(y=100, 0)</strong>
&nbsp;
[1] 100
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Nepovinné parametry s&nbsp;výchozí hodnotou</h2>

<p>V&nbsp;definici funkce u některých parametrů (nebo i všech parametrů) můžeme
specifikovat výchozí (<i>default</i>) hodnotu:</p>

<pre>
<strong>pow &lt;- function(x, y=2) {</strong>
    <strong>result &lt;- x ^ y</strong>
    <strong>return(result)</strong>
<strong>}</strong>
</pre>

<p>Alternativní (kratší) způsob zápisu této funkce:</p>

<pre>
<strong>pow &lt;- function(x, y=2) {</strong>
    <strong>x^y</strong>
<strong>}</strong>
</pre>

<p>Takovou funkci je možné volat s&nbsp;oběma pozičními parametry:</p>

<pre>
&gt; <strong>pow(2,2)</strong>
[1] 4
</pre>

<p>Výchozí parametr je možné vynechat:</p>
<pre>
&gt; <strong>pow(2)</strong>
[1] 4
</pre>

<p>Opět vynechání výchozího parametru, ovšem první parametr je pojmenován:</p>

<pre>
&gt; <strong>pow(x=3)</strong>
[1] 9
</pre>

<p>Kombinace obou předchozích způsobů (pojmenování parametrů atd.):</p>

<pre>
&gt; <strong>pow(y=3, 3)</strong>
[1] 27
&nbsp;
&gt; <strong>pow(y=10, x=2)</strong>
[1] 1024
</pre>

<p><div class="rs-tip-major">Poznámka: s&nbsp;výchozími parametry se
v&nbsp;jazyku R setkáme velmi často, zejména u funkcí ze standardní
knihovny.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Anonymní funkce</h2>

<p>Kromě běžných (pojmenovaných) funkcí popsaných v&nbsp;předchozích kapitolách
je možné v&nbsp;programovacím jazyce <i>R</i>, podobně jako v&nbsp;mnoha
dalších jazycích umožňujících funkcionální programování, vytvářet a používat
takzvané funkce <i>anonymní</i>. Tyto funkce, které je možné s&nbsp;výhodou
využít například při zápisu iterací nad prvky seznamů či při omezování oblasti
platnosti proměnných, se vytváří opět s&nbsp;využitím konstrukce
<strong>function</strong> (v&nbsp;jiných programovacích jazycích se ovšem
setkáme s&nbsp;konstrukcí <strong>lambda</strong>, jejíž název je odvozen ze
slavné Churchovy teorie Lambda kalkulu, která má poměrně velký význam jak
v&nbsp;teoretické informatice, tak i v&nbsp;dalších odvětvích informatiky.</p>

<p>Samotný zápis anonymní funkce se příliš neliší od zápisu funkce pojmenované,
pouze se funkce nepřiřazuje do proměnné, ale například se přímo volá tak, jako
je tomu v&nbsp;následujícím jednoduchém demonstračním příkladu:</p>

<pre>
&gt; <strong>(function(x) x*x)(5)</strong>
&nbsp;
[1] 25
</pre>

<p>Povšimněte si toho, že samotný zápis funkce je umístěn do kulatých závorek,
což je nutné z&nbsp;hlediska syntaxe &ndash; anonymní funkci voláme
s&nbsp;nějakým parametrem umístěným za její definicí.</p>

<p><div class="rs-tip-major">Poznámka: s&nbsp;anonymními funkcemi se
v&nbsp;praxi setkáme i při použití <i>funkcí vyššího řádu</i> (<i>higher order
functions</i>), o nichž se podrobněji zmíníme <a href="#k15">v&nbsp;patnácté
kapitole</a>.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zavolání funkce pro všechny prvky seznamů nebo vektorů</h2>

<p>Velmi často se setkáme s&nbsp;požadavkem na aplikaci (zavolání) nějaké
funkce postupně pro všechny prvky vektoru nebo seznamu s&nbsp;tím, že výsledkem
bude nový vektor nebo seznam. Pro tento účel existuje v&nbsp;programovacím
jazyku R dvojice funkcí vyššího řádu nazvaných <strong>sapply</strong> a
<strong>lapply</strong>:</p>

<pre>
&gt; <strong>help(sapply)</strong>
lapply                  package:base                   R Documentation
&nbsp;
Apply a Function over a List or Vector
&nbsp;
Description:
&nbsp;
     ‘lapply’ returns a list of the same length as ‘X’, each element of
     which is the result of applying ‘FUN’ to the corresponding element
     of ‘X’.
&nbsp;
     ‘sapply’ is a user-friendly version and wrapper of ‘lapply’ by
     default returning a vector, matrix or, if ‘simplify = "array"’, an
     array if appropriate, by applying ‘simplify2array()’.  ‘sapply(x,
     f, simplify = FALSE, USE.NAMES = FALSE)’ is the same as ‘lapply(x,
     f)’.
&nbsp;     
     ‘vapply’ is similar to ‘sapply’, but has a pre-specified type of
     return value, so it can be safer (and sometimes faster) to use.
&nbsp;     
     ‘replicate’ is a wrapper for the common use of ‘sapply’ for
     repeated evaluation of an expression (which will usually involve
     random number generation).
&nbsp;     
     ‘simplify2array()’ is the utility called from ‘sapply()’ when
     ‘simplify’ is not false and is similarly called from ‘mapply()’.
&nbsp;
Usage:
&nbsp;
     lapply(X, FUN, ...)
&nbsp;     
     sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)
&nbsp;
     vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)
&nbsp;
     replicate(n, expr, simplify = "array")
&nbsp;
     simplify2array(x, higher = TRUE)
</pre>

<p>Naši funkci <strong>pow</strong> pro výpočet n-té mocniny:</p>

<pre>
<strong>pow &lt;- function(x, y=2) {</strong>
    <strong>result &lt;- x ^ y</strong>
    <strong>return(result)</strong>
<strong>}</strong>
</pre>

<p>tedy můžeme postupně aplikovat na prvky sekvence s&nbsp;hodnotami 1, 2, ...
10 s&nbsp;tím, že se výsledek &bdquo;zjednoduší&ldquo; na seznam:</p>

<pre>
&gt; <strong>sapply(1:10, pow)</strong>
&nbsp;
 [1]   1   4   9  16  25  36  49  64  81 100
</pre>

<p>Pokud namísto funkce <strong>sapply</strong> použijeme funkci
<strong>lapply</strong>, bude výpočet probíhat stejným způsobem, ale výsledek
bude odlišný &ndash; vrátí se jednoprvkové seznamy s&nbsp;výsledky:</p>

<pre>
&gt; <strong>lapply(1:10, pow)</strong>
&nbsp;
[[1]]
[1] 1
&nbsp;
[[2]]
[1] 4
&nbsp;
[[3]]
[1] 9
&nbsp;
[[4]]
[1] 16
&nbsp;
[[5]]
[1] 25
&nbsp;
[[6]]
[1] 36
&nbsp;
[[7]]
[1] 49
&nbsp;
[[8]]
[1] 64
&nbsp;
[[9]]
[1] 81
&nbsp;
[[10]]
[1] 100
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Kombinace anonymní funkce a funkcí vyššího řádu <strong>sapply</strong> či <strong>lapply</strong></h2>

<p>Poměrně často se setkáme i s&nbsp;použitím anonymní funkce (viz <a
href="#k06">šestou kapitolu</a>) jakožto parametru funkce vyššího řádu
<strong>sapply</strong> či <strong>lapply</strong>. Druhé mocniny hodnot 1..10
lze vypočítat i takto:</p>

<pre>
&gt; <strong>sapply(1:10, function(x) x*x)</strong>
&nbsp;
 [1]   1   4   9  16  25  36  49  64  81 100
</pre>

<p>Častěji se ovšem setkáme s&nbsp;tím, že je tělo funkce uzavřeno do složených
závorek:</p>

<pre>
&gt; <strong>sapply(1:10, function(x) {x*x})</strong>
 [1]   1   4   9  16  25  36  49  64  81 100
</pre>

<p>Popř.&nbsp;se použije konstrukce <strong>return</strong>, a to buď uvnitř
složených závorek, nebo i bez nich:</p>

<pre>
&gt; <strong>sapply(1:10, function(x) {return (x*x)})</strong>
 [1]   1   4   9  16  25  36  49  64  81 100
&nbsp;
&gt; <strong>sapply(1:10, function(x) return (x*x))</strong>
 [1]   1   4   9  16  25  36  49  64  81 100
</pre>

<p><div class="rs-tip-major">Poznámka: naprosto stejným způsobem by se provedl
zápis při použití <strong>lapply</strong> namísto
<strong>sapply</strong>.</div></p>

<p>Kombinace více volání funkce <strong>sapply</strong>:</p>

<pre>
&gt; <strong>sapply(1:10, function(x) x*x)</strong>
 [1] 25 16  9  4  1  0  1  4  9 16 25
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Prostředí (environment)</h2>

<p>Příkazy uvnitř těla funkce jsou vykonávány v&nbsp;rámci nějakého
<i>prostředí</i> (<i>environment</i>). Toto prostředí určuje proměnné, které
jsou v&nbsp;rámci těla funkce (nebo mimo něj) viditelné. Tyto dostupné
(viditelné) proměnné lze zjistit s&nbsp;využitím funkce
<strong>ls</strong>:</p>

<pre>
&gt; <strong>help(ls)</strong>
</pre>

<p>Pokud tedy vytvoříme nějaké proměnné:</p>

<pre>
&gt; <strong>a &lt;- 1</strong>
&gt; <strong>b &lt;- 2</strong>
&gt; <strong>f &lt;- function(x) x&lt;-0</strong>
</pre>

<p>Měla by funkce <strong>ls</strong> vrátit vektor s&nbsp;trojicí jmen těchto
proměnných:</p>

<pre>
&gt; <strong>ls()</strong>
&nbsp;
[1] "a" "b" "f"
</pre>

<p><div class="rs-tip-major">Poznámka: pokud se vrátí větší množství jmen,
postačuje znovu spustit REPL programovacího jazyka R.</div></p>

<p>Viditelnost proměnných (a pojmenované funkce jsou taktéž proměnné) můžeme
zjistit i v&nbsp;případě, že jedna funkce je vnořena do funkce jiné, což je
pochopitelně možné (pokud by tomu tak nebylo, nebyly by funkce plnohodnotnými
datovými typy &ndash; mnohé jazyky ovšem toto omezení mnohdy poněkud uměle
zavádí):</p>

<pre>
<strong>f1 &lt;- function(param_f1) {</strong>
    <strong>f2 &lt;- function(param_f2) {</strong>
        <strong>print("f2")</strong>
        <strong>print(environment())</strong>
        <strong>print(ls())</strong>
    <strong>}</strong>
    <strong>f2(42)</strong>
    <strong>print("f1")</strong>
    <strong>print(environment())</strong>
    <strong>print(ls())</strong>
<strong>}</strong>
<strong>f1()</strong>
</pre>

<p>Vidíme, že uvnitř funkce můžeme vidět a tedy i přistupovat k&nbsp;jejím
parametrům; interní funkce je považována za běžnou lokální proměnnou:</p>

<pre>
[1] "f2"
&lt;environment: 0x55cf4d95fd58&gt;
[1] "param_f2"
[1] "f1"
&lt;environment: 0x55cf4d95ff18&gt;
[1] "f2"       "param_f1"
</pre>

<p>Operátor &lt;- již známe: používá se pro přiřazení hodnoty do proměnné,
která je v&nbsp;případě potřeby vytvořena. Díky tomu, že každé volání funkce
vytvoří nové prostředí, budou i proměnné vytvořené s&nbsp;využitím &lt;- pouze
lokální v&nbsp;rámci daného prostředí, což je většinou přesně takové chování,
které požadujeme:</p>

<pre>
<strong>x &lt;- 10</strong>
<strong>f3 &lt;- function(param_f3) {</strong>
    <strong>x &lt;- 20</strong>
    <strong>print(x)</strong>
    <strong>f4 &lt;- function(param_f4) {</strong>
        <strong>x &lt;- 30</strong>
        <strong>print(x)</strong>
    <strong>}</strong>
    <strong>f4()</strong>
    <strong>print(x)</strong>
<strong>}</strong>
<strong>print(x)</strong>
<strong>f3()</strong>
<strong>print(x)</strong>
</pre>

<p>Z&nbsp;výsledků je patrné, že jen první přiřazení bylo provedeno do globální
proměnné <strong>x</strong>, zatímco druhé přiřazení se týká lokální proměnné
funkce <strong>f3</strong> a třetí přiřazení proměnné lokální v&nbsp;rámci
funkce <strong>f4</strong> (která je navíc sama lokálně viditelná jen ve funkci
<strong>f3</strong>:</p>

<pre>
&gt; <strong>print(x)</strong>
[1] 10
&gt; <strong>f3()</strong>
[1] 20
[1] 30
[1] 20
&gt; <strong>print(x)</strong>
[1] 10
</pre>

<p><div class="rs-tip-major">Poznámka: opět se jedná o chování, které je ve
většině mainstreamových programovacích jazyků přirozené.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Přístup k&nbsp;nelokálním proměnným</h2>

<p>V&nbsp;některých případech (jeden takový uvidíme dále při implementaci
čítače s&nbsp;využitím uzávěru) je nutné měnit hodnotu nelokálních proměnných.
V&nbsp;takovém případě se namísto operátoru přiřazení &lt;- použije operátor
&bdquo;superpřiřazení&ldquo;, který se zapisuje &lt;&lt;-. Tento operátor
postupně prochází dostupnými prostředími a hledá, zda daná proměnná již
existuje či nikoli. Pokud tedy v&nbsp;předchozím příkladu použijeme operátor
&bdquo;superpřiřazení&ldquo;, změní se i jeho chování, a to poměrně zásadním
způsobem:</p>

<pre>
<strong>x &lt;- 10</strong>
<strong>f5 &lt;- function(param_f3) {</strong>
    <strong>x &lt;&lt;- 20</strong>
    <strong>print(x)</strong>
    <strong>f6 &lt;- function(param_f4) {</strong>
        <strong>x &lt;&lt;- 30</strong>
        <strong>print(x)</strong>
    <strong>}</strong>
    <strong>f6()</strong>
    <strong>print(x)</strong>
<strong>}</strong>
<strong>print(x)</strong>
<strong>f5()</strong>
<strong>print(x)</strong>
</pre>

<p>Chování lze sledovat z&nbsp;výstupu:</p>

<pre>
&gt; <strong>print(x)</strong>
[1] 10
&gt; <strong>f5()</strong>
[1] 20
[1] 30
[1] 30
&gt; <strong>print(x)</strong>
[1] 30
</pre>

<p>Můžeme vidět, že se nejdříve vypíše hodnota globální proměnné (10), dále se
tato hodnota ve funkci <strong>f5</strong> změní na 20, v&nbsp;dalším kroku ve
funkci <strong>f6</strong> dojde ke změně na 30 a tato hodnota je již
zachována. Operátor &lt;&lt;- nám tedy umožnil změnit hodnotu globální proměnné
(což je ovšem obecně problematický rys, který by se neměl zneužívat).</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Lexikální uzávěry</h2>

<p>Připomeňme si, že v&nbsp;programovacím jazyce <i>R</i> jsou funkce
považovány za plnohodnotné datové typy, což znamená, že funkce lze navázat na
libovolný symbol (a tím vlastně původně anonymní funkci pojmenovat), funkce lze
předávat jako parametry do jiných funkcí a funkce mohou být taktéž návratovou
hodnotou jiných funkcí &ndash; funkce tedy může vytvořit a vrátit jinou funkci.
<i>R</i> taktéž podporuje práci s&nbsp;uzávěry (<i>closure(s)</i>),
tj.&nbsp;funkcí svázaných s&nbsp;nějakým symbolem vytvořeným vně funkce.</p>

<p>Podpora uzávěrů umožňuje například tvorbu funkcí sdílejících společný
kontext (GUI) atd. Ovšem vzhledem k&nbsp;tomu, že &ndash; jak již víme &ndash;
<i>R</i> není čistě funkcionálním jazykem, je možné při vytváření uživatelských
funkcí přímo z&nbsp;dané funkce přistupovat k&nbsp;nějakému globálnímu symbolu,
přesněji řečeno k&nbsp;symbolu &bdquo;globálnímu&ldquo; v&nbsp;rámci nějakého
jmenného prostoru. Taktéž lze vytvářet funkce s&nbsp;vedlejším efektem, které
například zapisují data do souborů, mění hodnotu navázanou na globální symboly
atd.</p>

<p>Podívejme se na příklad jednoduchého, ale praktického využití uzávěrů. Jedná
se o konstruktor funkcí &bdquo;výpočet n-té mocniny&ldquo;, kde
<strong>n</strong> je specifikováno při konstrukci funkce:</p>

<pre>
<strong>pow_x &lt;- function(x) {</strong>
    <strong>function(y) { y ^ x }</strong>
<strong>}</strong>
</pre>

<p>Můžeme si například nechat vytvořit funkci pro výpočet druhé mocniny.
Vytvoření (konstrukce) takové funkce vypadá následovně:</p>

<pre>
&gt; <strong>square &lt;- pow_x(2)</strong>
</pre>

<p>Následně již můžeme novou (pojmenovanou!) funkci použít stejně, jako
jakoukoli jinou funkci:</p>

<pre>
&gt; <strong>square(3)</strong>
9
</pre>

<p>Další použití, tentokrát pro sekvenci hodnot:</p>

<pre>
&gt; <strong>sapply(1:10, square)</strong>
&nbsp;
 [1]    2    4    8   16   32   64  128  256  512 1024
</pre>

<p>Více zkonstruovaných funkcí:</p>

<pre>
<strong>pow_x &lt;- function(x) {</strong>
        <strong>function(y) { y ^ x }</strong>
<strong>}</strong>
&nbsp;
<strong>linear &lt;- pow_x(1)</strong>
<strong>square &lt;- pow_x(2)</strong>
<strong>cube &lt;- pow_x(3)</strong>
&nbsp;
<strong>for (x in 1:10) {</strong>
    <strong>print(c(x, linear(x), square(x), cube(x)))</strong>
<strong>}</strong>
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
[1]  1   1    1    1
[1]  2   2    4    8
[1]  3   3    9   27
[1]  4   4   16   64
[1]  5   5   25  125
[1]  6   6   36  216
[1]  7   7   49  343
[1]  8   8   64  512
[1]  9   9   81  729
[1]  10 10  100 1000
</pre>

<p><div class="rs-tip-major">Poznámka: <i>lexical scope</i> má ovšem
dalekosáhlejší důsledky, které mj.&nbsp;ovlivňují činnost správce paměti atd.
Jde o to, že pokud je nějaká proměnná (která je definovaná vně funkce) na
funkci <i>navázána</i> (prakticky: je ve funkci použita), nemůže tato proměnná
zaniknout ani při opuštění daného bloku, protože společně s&nbsp;funkcí tvoří
takzvaný <i>uzávěr (closure</i>).</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Klasický příklad uzávěru &ndash; čítač (generátor sekvence)</h2>

<p>Podívejme se nyní na dnes již zcela klasický příklad využití uzávěru. Jedná
se o implementaci čítače (nebo obecněji generátoru nějaké sekvence hodnot,
který pro svoji funkci potřebuje interní paměť pro zapamatování svého stavu).
Čítač je představován uzávěrem zkonstruovaným funkcí <strong>counter</strong>.
Funkce v&nbsp;uzávěru přistupuje k&nbsp;navázané proměnné <strong>n</strong>,
kterou zvyšuje o jedničku a současně její hodnotu vrací:</p>

<pre>
<strong>counter &lt;- function() {</strong>
    <strong>n &lt;- 0</strong>
    <strong>function() {</strong>
        <strong>n &lt;&lt;- n + 1</strong>
        <strong>n</strong>
    <strong>}</strong>
<strong>}</strong>
</pre>

<p>Čítač si nejprve necháme zkonstruovat:</p>

<pre>
&gt; <strong>c1 &lt;- counter()</strong>
</pre>

<p>Volání <strong>counter()</strong> vrátilo uzávěr, při jehož zavolání dojde
ke změně vnitřního stavu a posléze se vrátí nová hodnota čítače:</p>

<pre>
&gt; <strong>c1()</strong>
[1] 1
&nbsp;
&gt; <strong>c1()</strong>
[1] 2
&nbsp;
&gt; <strong>c1()</strong>
[1] 3
</pre>

<p>Interní hodnota čítače v&nbsp;žádném případě není obdobou statických
lokálních proměnných z&nbsp;céčka, o čemž se můžeme snadno přesvědčit
vytvořením dalších dvou na sobě nezávislých čítačů:</p>

<pre>
&gt; <strong>c2 &lt;- counter()</strong>
&gt; <strong>c3 &lt;- counter()</strong>
</pre>

<p>Všechny tři čítače skutečně pracují nezávisle na sobě:</p>

<pre>
&gt; <strong>c1()</strong>
[1] 4
&gt; <strong>c2()</strong>
[1] 1
&gt; <strong>c3()</strong>
[1] 1
&nbsp;
&gt; <strong>c1()</strong>
[1] 5
&gt; <strong>c2()</strong>
[1] 2
&gt; <strong>c3()</strong>
[1] 2
&nbsp;
&gt; <strong>c1()</strong>
[1] 6
&gt; <strong>c2()</strong>
[1] 3
&gt; <strong>c3()</strong>
[1] 3
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Čítač s&nbsp;předem nastaveným krokem</h2>

<p>Předchozí uzávěr pracoval s&nbsp;navázanou proměnnou <strong>n</strong>,
ovšem můžeme vytvořit i uzávěr, který pracuje s&nbsp;hodnotu svého parametru.
V&nbsp;praxi si například můžeme vytvořit čítač, u něhož je možné specifikovat
krok. Jedná z&nbsp;možných implementací může vypadat následovně:</p>

<pre>
<strong>counter &lt;- function(step=1) {</strong>
    <strong>n &lt;- 0</strong>
    <strong>function() {</strong>
        <strong>n &lt;&lt;- n + step</strong>
        <strong>n</strong>
    <strong>}</strong>
<strong>}</strong>
</pre>

<p>Nový typ čítače si můžeme snadno otestovat:</p>

<pre>
&gt; <strong>c0 &lt;- counter(2)</strong>
&nbsp;
&gt; <strong>c0()</strong>
[1] 2
&nbsp;
&gt; <strong>c0()</strong>
[1] 4
&nbsp;
&gt; <strong>c0()</strong>
[1] 6
&nbsp;
&gt; <strong>c0()</strong>
[1] 8
</pre>

<p>Několik na sobě nezávislých čítačů, každý s&nbsp;jiným krokem:</p>

<pre>
<strong>c1 &lt;- counter(1)</strong>
<strong>c2 &lt;- counter(2)</strong>
<strong>c3 &lt;- counter(3)</strong>
<strong>c4 &lt;- counter(4)</strong>
</pre>

<p>Nové čítače použijeme &ndash; opět budou na sobě nezávislé:</p>

<pre>
<strong>for (i in 1:10) {</strong>
    <strong>print(c(c1(), c2(), c3(), c4()))</strong>
<strong>}</strong>
&nbsp;
[1]  1  2  3  4
[1]  2  4  6  8
[1]  3  6  9 12
[1]  4  8 12 16
[1]  5 10 15 20
[1]  6 12 18 24
[1]  7 14 21 28
[1]  8 16 24 32
[1]  9 18 27 36
[1] 10 20 30 40
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Rekurzivní funkce</h2>

<p>Naprostá většina dnes používaných mainstreamových programovacích jazyků
podporuje tvorbu rekurzivních funkcí. Výjimkou není ani jazyk R, takže si
ukažme typickou funkci, která se používá při výuce programování. Jedná se o
rekurzivní variantu výpočtu faktoriálu:</p>

<pre>
<strong>fact &lt;- function(n)</strong>
<strong>{</strong>
    <strong>if (n == 0 || n == 1) {</strong>
        <strong>return (1)</strong>
    <strong>} else {</strong>
        <strong>return (n *  fact(n - 1))</strong>
    <strong>}</strong>
<strong>}</strong>
</pre>

<p>Otestování funkcionality:</p>

<pre>
&gt; <strong>fact(10)</strong>
&nbsp;
[1] 3628800
</pre>

<p>Výpočet faktoriálů vstupních hodnot od 1 do 10:</p>

<pre>
&gt; <strong>lapply(1:10, fact)</strong>
&nbsp;
[[1]]
[1] 1
&nbsp;
[[2]]
[1] 2
&nbsp;
[[3]]
[1] 6
&nbsp;
[[4]]
[1] 24
&nbsp;
[[5]]
[1] 120
&nbsp;
[[6]]
[1] 720
&nbsp;
[[7]]
[1] 5040
&nbsp;
[[8]]
[1] 40320
&nbsp;
[[9]]
[1] 362880
&nbsp;
[[10]]
[1] 3628800
</pre>

<p>Vzhledem k&nbsp;tomu, že se jedná o rekurzivní funkci bez aplikovaného TCO
(<i>tail call optimization</i>), dojde pro větší vstupní hodnoty
k&nbsp;vyčerpání paměti určené pro implementaci zásobníku, resp.&nbsp;přesněji
řečeno zásobníkových rámců:</p>

<pre>
&gt; <strong>fact(10000)</strong>
&nbsp;
Error: C stack usage  7978740 is too close to the limit
</pre>

<p>Podporována je i nepřímá rekurze, tedy stav, kdy jedna funkce volá druhou a
ta zase první:</p>

<pre>
<strong>f1 &lt;- function(x) {</strong>
    <strong>print(x)</strong>
    <strong>if (x&gt;0) {</strong>
        <strong>f2(x-1)</strong>
    <strong>}</strong>
    <strong>0</strong>
<strong>}</strong>
&nbsp;
<strong>f2 &lt;- function(x) {</strong>
    <strong>print(x)</strong>
    <strong>f1(x/2)</strong>
<strong>}</strong>
</pre>

<p>Otestování:</p>

<pre>
&gt; <strong>f2(10)</strong>
&nbsp;
[1] 10
[1] 5
[1] 4
[1] 2
[1] 1
[1] 0.5
[1] -0.5
[1] -0.25
[1] 0
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Funkce vyššího řádu v&nbsp;programovacím jazyce R</h2>

<p>Programovací jazyk <i>R</i> sice není, na rozdíl od Haskellu a částečně i od
programovacího jazyka Clojure, čistě funkcionálním jazykem, nicméně i zde mohou
hrát při vývoji aplikací poměrně velkou roli takzvané <i>funkce vyššího
řádu</i> (<i>higher order functions</i>), což jsou funkce, které jako své
parametry akceptují jiné funkce popř.&nbsp;dokonce vrací (nové) funkce jako
svoji návratovou hodnotu. Mezi dvě základní funkce vyššího řádu, které
nalezneme prakticky ve všech dialektech programovacího jazyka Lisp (a
připomeňme si, že R vychází ze Scheme, tedy z&nbsp;jedné varianty LISPu), patří
funkce nazvané <strong>Reduce</strong>, <strong>Filter</strong> a
<strong>Map</strong>. Kromě toho lze používat i další funkce vyššího řádu,
například <strong>Find</strong> či <strong>Negate</strong>:</p>

<pre>
Reduce(f, x, init, right = FALSE, accumulate = FALSE)
&nbsp;
Filter(f, x)
&nbsp;
Find(f, x, right = FALSE, nomatch = NULL)
&nbsp;
Map(f, ...)
&nbsp;
Negate(f)
&nbsp;
Position(f, x, right = FALSE, nomatch = NA_integer_)
</pre>

<p>S&nbsp;použitím funkcí vyššího řádu se seznámíme v&nbsp;navazujících
kapitolách.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Balíčky s&nbsp;alternativní formou definice funkcí</h2>

<p>Do programovacího jazyka R je možné relativně snadno přidávat další
konstrukce. Týká se to i definice popř.&nbsp;volání funkcí, a to i funkcí
anonymních. V&nbsp;současnosti existuje hned několik balíčků
s&nbsp;alternativní podobou definice funkcí. Tyto balíčky jsou zmíněny
v&nbsp;tabulce a některým z&nbsp;nich se budeme věnovat v&nbsp;následujícím
pokračování tohoto seriálu:</p>

<table>
<tr><th> #</th><th>Balíček</th><th>Forma</th><th>Funkce s jedním parametrem</th><th>Funkce se dvěma parametry</th><th>Explicitní parametry</th><th>Jména parametrů</th></tr>
<tr><td> 1</td><td>base r</td><td>function</td><td>function(x) x + 1</td><td>function(x, y) x + y</td><td>Ano</td><td>Explicitní</td></tr>
<tr><td> 2</td><td>rlang</td><td>as_function</td><td>as_function(~.x + 1))</td><td>as_function(~.x+.y)</td><td>Ne </td><td>Implicitní. jen .x or .y</td></tr>
<tr><td> 3</td><td>pryr</td><td>f (implicitní parametry)</td><td>f(x + 1)</td><td>f(x + y)</td><td>Ne </td><td>Implicitní, odvozeno z těla funkce</td></tr>
<tr><td> 4</td><td>pryr</td><td>f (explicitní parametry)</td><td>f(x, x + 1)</td><td>f(x, y, x + y)</td><td>Ano</td><td>Explicitní</td></tr>
<tr><td> 5</td><td>nofrills</td><td>fn</td><td>fn(x ~ x + 1)</td><td>fn(x, y ~ x + y)</td><td>Ano</td><td>Explicitní</td></tr>
<tr><td> 6</td><td>gsubfn</td><td>as.function.formula (implicitní parametry)</td><td>as.function.formula(~ x + 1)</td><td>as.function.formula(~ x + y)</td><td>Ne </td><td>Implicitní, odvozeno z pravé strany výrazu</td></tr>
<tr><td> 7</td><td>gsubfn</td><td>as.function.formula (explicitní parametry)</td><td>as.function.formula(x ~ x + 1)</td><td>as.function.formula(x + y ~ x + y + z)</td><td>Ano</td><td>Explicitní, odvozeno z levé strany výrazu</td></tr>
<tr><td> 8</td><td>wrapr</td><td>lambda</td><td>lambda(x, x + 1)</td><td>lambda(x, y, x + y)</td><td>Ano</td><td>Explicitní</td></tr>
<tr><td> 9</td><td>lambda</td><td>f</td><td>f(.(x) + 1)</td><td>f(.(x) + .(y))</td><td>Ne </td><td>Implicitní, odvozeno z výrazu</td></tr>
<tr><td>10</td><td>lambdass</td><td>~~</td><td>~~ ..1 + 1</td><td>~~ ..1 + ..2</td><td>No </td><td>Implicitní, povoleno použití ..N zápisu</td></tr>
<tr><td>11</td><td>lambdass</td><td>f.()</td><td>f.(x, x + 1)</td><td>f.(x, y, x + y)</td><td>Ano</td><td>Explicitní</td></tr>
<tr><td>12</td><td>lambdass</td><td>%-&gt;%</td><td>f(x) %-&gt;% {x + 1}</td><td>   f(x, y) %-&gt;% {x + y}</td><td>Ano</td><td>Explicitní</td></tr>
<tr><td>13</td><td>functional</td><td>“-&gt;”</td><td>NA</td><td>x ~ y -&gt; x + y</td><td>Ano</td><td>Explicitní</td></tr>
<tr><td>14</td><td>ne (ve fázi návrhu)</td><td>lambda</td><td>lambda(x ~ x + 1L)</td><td>lambda(x + y ~ x + y)</td><td>Ano</td><td>Explicitní, odvozeno z levé strany výrazu</td></tr>
<tr><td>15</td><td>ne (ve fázi návrhu)</td><td>lambda</td><td>lambda(x:x + 1)</td><td>lambda(x, y:x + y)</td><td>Ano</td><td>Explicitní</td></tr>
<tr><td>16</td><td>ne (ve fázi návrhu)</td><td>[] -&gt;</td><td>[x] -&gt; x + 1</td><td>[x, y] -&gt; x + y</td><td>Ano</td><td>Explicitní</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: pro většinu uživatelů programovacího
jazyka R je však původní způsob definice funkcí (první řádek tabulky)
dostačující. Zajímavý je návrh z&nbsp;patnáctého řádku, popř.&nbsp;způsob
používaný v&nbsp;balíčku <strong>wrapr</strong>.</div></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/r-examples">https://github.com/tisnik/r-examples</a>
V&nbsp;případě, že z&nbsp;nějakého důvodu nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
stále jen jednotky kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis demonstračního příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>empty_function.R</td><td>prázdná funkce bez parametrů (nejjednodušší příklad pojmenované funkce)</td><td><a href="https://github.com/tisnik/r-examples/blob/master/14-language-features/empty_function.R">https://github.com/tisnik/r-examples/blob/master/14-language-features/empty_function.R</a></td></tr>
<tr><td> 2</td><td>function_type.R</td><td>funkce je plnohodnotným datovým typem</td><td><a href="https://github.com/tisnik/r-examples/blob/master/14-language-features/function_type.R">https://github.com/tisnik/r-examples/blob/master/14-language-features/function_type.R</a></td></tr>
<tr><td> 3</td><td>add.R</td><td>součet, implicitní <strong>return</strong></td><td><a href="https://github.com/tisnik/r-examples/blob/master/14-language-features/add.R">https://github.com/tisnik/r-examples/blob/master/14-language-features/add.R</a></td></tr>
<tr><td> 4</td><td>add2.R</td><td>více příkazů ve funkci, implicitní <strong>return</strong></td><td><a href="https://github.com/tisnik/r-examples/blob/master/14-language-features/add2.R">https://github.com/tisnik/r-examples/blob/master/14-language-features/add2.R</a></td></tr>
<tr><td> 5</td><td>classify_number_1.R</td><td>funkce s&nbsp;jedním příkazem <strong>return</strong></td><td><a href="https://github.com/tisnik/r-examples/blob/master/14-language-features/classify_number_1.R">https://github.com/tisnik/r-examples/blob/master/14-language-features/classify_number_1.R</a></td></tr>
<tr><td> 6</td><td>classify_number_2.R</td><td>funkce s&nbsp;více příkazy <strong>return</strong></td><td><a href="https://github.com/tisnik/r-examples/blob/master/14-language-features/classify_number_2.R">https://github.com/tisnik/r-examples/blob/master/14-language-features/classify_number_2.R</a></td></tr>
<tr><td> 7</td><td>default_values.R</td><td></td><td><a href="https://github.com/tisnik/r-examples/blob/master/14-language-features/default_values.R">https://github.com/tisnik/r-examples/blob/master/14-language-features/default_values.R</a></td></tr>
<tr><td> 8</td><td>implicit_return_value.R</td><td>nepovinné parametry s&nbsp;výchozí hodnotou</td><td><a href="https://github.com/tisnik/r-examples/blob/master/14-language-features/implicit_return_value.R">https://github.com/tisnik/r-examples/blob/master/14-language-features/implicit_return_value.R</a></td></tr>
<tr><td> 9</td><td>explicit_return_value_error.R</td><td>chybný zápis příkazu <strong>return</strong></td><td><a href="https://github.com/tisnik/r-examples/blob/master/14-language-features/explicit_return_value_error.R">https://github.com/tisnik/r-examples/blob/master/14-language-features/explicit_return_value_error.R</a></td></tr>
<tr><td>10</td><td>explicit_return_value.R</td><td>korektní zápis příkazu <strong>return</strong></td><td><a href="https://github.com/tisnik/r-examples/blob/master/14-language-features/explicit_return_value.R">https://github.com/tisnik/r-examples/blob/master/14-language-features/explicit_return_value.R</a></td></tr>
<tr><td>11</td><td>pow.R</td><td>výpočet mocniny formou primitivní funkce</td><td><a href="https://github.com/tisnik/r-examples/blob/master/14-language-features/pow.R">https://github.com/tisnik/r-examples/blob/master/14-language-features/pow.R</a></td></tr>
<tr><td>12</td><td>pow_closure.R</td><td>výpočet mocniny formou uzávěru</td><td><a href="https://github.com/tisnik/r-examples/blob/master/14-language-features/pow_closure.R">https://github.com/tisnik/r-examples/blob/master/14-language-features/pow_closure.R</a></td></tr>
<tr><td>13</td><td>counter_closure.R</td><td>čítač implementovaný uzávěrem</td><td><a href="https://github.com/tisnik/r-examples/blob/master/14-language-features/counter_closure.R">https://github.com/tisnik/r-examples/blob/master/14-language-features/counter_closure.R</a></td></tr>
<tr><td>14</td><td>counter2_closure.R</td><td>čítač s&nbsp;krokem implementovaný uzávěrem</td><td><a href="https://github.com/tisnik/r-examples/blob/master/14-language-features/counter2_closure.R">https://github.com/tisnik/r-examples/blob/master/14-language-features/counter2_closure.R</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>R Tutorial<br />
<a href="https://www.tutorialspoint.com/r/index.htm">https://www.tutorialspoint.com/r/index.htm</a>
</li>

<li>A Tutorial on Using Functions in R!<br />
<a href="https://www.datacamp.com/community/tutorials/functions-in-r-a-tutorial">https://www.datacamp.com/community/tutorials/functions-in-r-a-tutorial</a>
</li>

<li>R Functions<br />
<a href="https://www.datamentor.io/r-programming/function/">https://www.datamentor.io/r-programming/function/</a>
</li>

<li>A Tutorial on Loops in R - Usage and Alternatives<br />
<a href="https://www.datacamp.com/community/tutorials/tutorial-on-loops-in-r">https://www.datacamp.com/community/tutorials/tutorial-on-loops-in-r</a>
</li>

<li>Anonymous Functions in R - Part 1<br />
<a href="https://coolbutuseless.github.io/2019/03/13/anonymous-functions-in-r-part-1/">https://coolbutuseless.github.io/2019/03/13/anonymous-functions-in-r-part-1/</a>
</li>

<li>Anonymous Functions in R - Part 2<br />
<a href="https://coolbutuseless.github.io/2019/03/13/anonymous-functions-in-r-part-2/">https://coolbutuseless.github.io/2019/03/13/anonymous-functions-in-r-part-2/</a>
</li>

<li>Scoping and Closures in R<br />
<a href="https://www.pluralsight.com/guides/scoping-and-closures-in-r">https://www.pluralsight.com/guides/scoping-and-closures-in-r</a>
</li>

<li>Tools for Computing on the Language<br />
<a href="https://www.rdocumentation.org/packages/pryr/versions/0.1.4">https://www.rdocumentation.org/packages/pryr/versions/0.1.4</a>
</li>

<li>Difference between double-precision data type and numeric data type<br />
<a href="https://stackoverflow.com/questions/50255318/difference-between-double-precision-data-type-and-numeric-data-type">https://stackoverflow.com/questions/50255318/difference-between-double-precision-data-type-and-numeric-data-type</a>
</li>

<li>R Data Types<br />
<a href="https://www.w3schools.in/r/data-types/">https://www.w3schools.in/r/data-types/</a>
</li>

<li>What is the difference between mode and class in R?<br />
<a href="https://stackoverflow.com/questions/35445112/what-is-the-difference-between-mode-and-class-in-r">https://stackoverflow.com/questions/35445112/what-is-the-difference-between-mode-and-class-in-r</a>
</li>

<li>switch: Select One of a List of Alternatives<br />
<a href="https://rdrr.io/r/base/switch.html">https://rdrr.io/r/base/switch.html</a>
</li>

<li>R switch() Function<br />
<a href="https://www.datamentor.io/r-programming/switch-function/">https://www.datamentor.io/r-programming/switch-function/</a>
</li>

<li>Using ggplot in Python: Visualizing Data With plotnine<br />
<a href="https://realpython.com/ggplot-python/">https://realpython.com/ggplot-python/</a>
</li>

<li>A Grammar of Graphics for Python<br />
<a href="https://plotnine.readthedocs.io/en/stable/">https://plotnine.readthedocs.io/en/stable/</a>
</li>

<li>Plotnine gallery<br />
<a href="https://plotnine.readthedocs.io/en/latest/gallery.html">https://plotnine.readthedocs.io/en/latest/gallery.html</a>
</li>

<li>plotnine 0.7.1 na PyPi<br />
<a href="https://pypi.org/project/plotnine/">https://pypi.org/project/plotnine/</a>
</li>

<li>plotnine-examples 0.0.4 na PyPi<br />
<a href="https://pypi.org/project/plotnine-examples/">https://pypi.org/project/plotnine-examples/</a>
</li>

<li>plotnine examples repository<br />
<a href="https://github.com/has2k1/plotnine-examples">https://github.com/has2k1/plotnine-examples</a>
</li>

<li>Data visualization in R: cheat sheet<br />
<a href="https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf">https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf</a>
</li>

<li>The R Project for Statistical Computing<br />
<a href="https://www.r-project.org/">https://www.r-project.org/</a>
</li>

<li>An Introduction to R<br />
<a href="https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf">https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf</a>
</li>

<li>R (programming language)<br />
<a href="https://en.wikipedia.org/wiki/R_(programming_language)">https://en.wikipedia.org/wiki/R_(programming_language)</a>
</li>

<li>The R Programming Language<br />
<a href="https://www.tiobe.com/tiobe-index/r/">https://www.tiobe.com/tiobe-index/r/</a>
</li>

<li>R Graphics Second Edition<br />
<a href="https://www.stat.auckland.ac.nz/~paul/RG2e/">https://www.stat.auckland.ac.nz/~paul/RG2e/</a>
</li>

<li>ggplot2 - Introduction<br />
<a href="https://www.tutorialspoint.com/ggplot2/ggplot2_introduction.htm">https://www.tutorialspoint.com/ggplot2/ggplot2_introduction.htm</a>
</li>

<li>ggplot2: Elegant Graphics for Data Analysis<br />
<a href="https://ggplot2-book.org/index.html">https://ggplot2-book.org/index.html</a>
</li>

<li>Create Elegant Data Visualisations Using the Grammar of Graphics<br />
<a href="https://www.rdocumentation.org/packages/ggplot2/versions/3.3.2">https://www.rdocumentation.org/packages/ggplot2/versions/3.3.2</a>
</li>

<li>Grid<br />
<a href="https://www.stat.auckland.ac.nz/~paul/grid/grid.html">https://www.stat.auckland.ac.nz/~paul/grid/grid.html</a>
</li>

<li>Interactive Course: Data Visualization with lattice in R<br />
<a href="https://www.datacamp.com/courses/data-visualization-in-r-with-lattice">https://www.datacamp.com/courses/data-visualization-in-r-with-lattice</a>
</li>

<li>Lattice: trellis graphics for R<br />
<a href="https://lattice.r-forge.r-project.org/">https://lattice.r-forge.r-project.org/</a>
</li>

<li>Lattice: Multivariate Data Visualization with R<br />
<a href="http://lmdvr.r-forge.r-project.org/figures/figures.html">http://lmdvr.r-forge.r-project.org/figures/figures.html</a>
</li>

<li>Getting Started with Lattice Graphics<br />
<a href="https://lattice.r-forge.r-project.org/Vignettes/src/lattice-intro/lattice-intro.pdf">https://lattice.r-forge.r-project.org/Vignettes/src/lattice-intro/lattice-intro.pdf</a>
</li>

<li>Using lattice’s xyplot()<br />
<a href="https://homerhanumat.github.io/tigerstats/xyplot.html">https://homerhanumat.github.io/tigerstats/xyplot.html</a>
</li>

<li>ggplot2 Tutorial<br />
<a href="https://www.tutorialspoint.com/ggplot2/index.htm">https://www.tutorialspoint.com/ggplot2/index.htm</a>
</li>

<li>Lattice Package in R with Functions and Graphs<br />
<a href="https://techvidvan.com/tutorials/lattice-package-in-r/">https://techvidvan.com/tutorials/lattice-package-in-r/</a>
</li>

<li>The R Graph Gallery<br />
<a href="https://www.r-graph-gallery.com/index.html">https://www.r-graph-gallery.com/index.html</a>
</li>

<li>Lattice Graphs<br />
<a href="https://www.statmethods.net/advgraphs/trellis.html">https://www.statmethods.net/advgraphs/trellis.html</a>
</li>

<li>ggplot2 (Graph gallery)<br />
<a href="https://www.r-graph-gallery.com/ggplot2-package.html">https://www.r-graph-gallery.com/ggplot2-package.html</a>
</li>

<li>R Markdown<br />
<a href="https://rmarkdown.rstudio.com/">https://rmarkdown.rstudio.com/</a>
</li>

<li>R Markdown: The Definitive Guide<br />
<a href="https://bookdown.org/yihui/rmarkdown/">https://bookdown.org/yihui/rmarkdown/</a>
</li>

<li>R Markdown Cheat Sheet<br />
<a href="https://rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf">https://rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf</a>
</li>

<li>Introduction to R Markdown<br />
<a href="https://rmarkdown.rstudio.com/articles_intro.html">https://rmarkdown.rstudio.com/articles_intro.html</a>
</li>

<li>R Cheat Sheets<br />
<a href="https://blog.sergiouri.be/2016/07/r-cheat-sheets.html">https://blog.sergiouri.be/2016/07/r-cheat-sheets.html</a>
</li>

<li>R Cheat Sheet<br />
<a href="https://s3.amazonaws.com/quandl-static-content/Documents/Quandl+-+R+Cheat+Sheet.pdf">https://s3.amazonaws.com/quandl-static-content/Documents/Quandl+-+R+Cheat+Sheet.pdf</a>
</li>

<li>Base R Cheat Sheet<br />
<a href="https://rstudio.com/wp-content/uploads/2016/06/r-cheat-sheet.pdf">https://rstudio.com/wp-content/uploads/2016/06/r-cheat-sheet.pdf</a>
</li>

<li>PYPL PopularitY of Programming Language<br />
<a href="https://pypl.github.io/PYPL.html">https://pypl.github.io/PYPL.html</a>
</li>

<li>Tiobe index<br />
<a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a>
</li>

<li>Stack Overflow: Most Loved, Dreaded &amp; Wanted Programming Languages In 2020<br />
<a href="https://fossbytes.com/stack-overflow-most-loved-dreaded-wanted-programming-languages-in-2020/">https://fossbytes.com/stack-overflow-most-loved-dreaded-wanted-programming-languages-in-2020/</a>
</li>

<li>How to Install and Use R on Ubuntu<br />
<a href="https://itsfoss.com/install-r-ubuntu/">https://itsfoss.com/install-r-ubuntu/</a>
</li>

<li>R programming for beginners - Why you should use R<br />
<a href="https://www.youtube.com/watch?v=9kYUGMg_14s">https://www.youtube.com/watch?v=9kYUGMg_14s</a>
</li>

<li>GOTO 2012 • The R Language The Good The Bad &amp; The Ugly<br />
<a href="https://www.youtube.com/watch?v=6S9r_YbqHy8">https://www.youtube.com/watch?v=6S9r_YbqHy8</a>
</li>

<li>Intro to Data Visualization with R &amp; ggplot2<br />
<a href="https://www.youtube.com/watch?v=49fADBfcDD4">https://www.youtube.com/watch?v=49fADBfcDD4</a>
</li>

<li>Plotting with ggplot2: Part 1<br />
<a href="https://www.youtube.com/watch?v=HeqHMM4ziXA">https://www.youtube.com/watch?v=HeqHMM4ziXA</a>
</li>

<li>Plotting with ggplot2: Part 2<br />
<a href="https://www.youtube.com/watch?v=n8kYa9vu1l8">https://www.youtube.com/watch?v=n8kYa9vu1l8</a>
</li>

<li>R vs Python - What should I learn in 2020? | R and Python Comparison<br />
<a href="https://www.youtube.com/watch?v=eRP_J2yLjSU">https://www.youtube.com/watch?v=eRP_J2yLjSU</a>
</li>

<li>R Programming 101<br />
<a href="https://www.youtube.com/c/rprogramming101">https://www.youtube.com/c/rprogramming101</a>
</li>

<li>Seriál Tvorba grafů pomocí programu "R"<br />
<a href="https://www.root.cz/serialy/tvorba-grafu-pomoci-programu-r/">https://www.root.cz/serialy/tvorba-grafu-pomoci-programu-r/</a>
</li>

<li>Tvorba grafů pomocí programu "R": úvod<br />
<a href="https://www.root.cz/clanky/tvorba-grafu-pomoci-programu-r-1/">https://www.root.cz/clanky/tvorba-grafu-pomoci-programu-r-1/</a>
</li>

<li>Tvorba grafů pomocí programu "R": pokročilé funkce<br />
<a href="https://www.root.cz/clanky/tvorba-grafu-pomoci-programu-r-pokrocile-funkce/">https://www.root.cz/clanky/tvorba-grafu-pomoci-programu-r-pokrocile-funkce/</a>
</li>

<li>Tvorba grafů pomocí programu "R": vkládání textu, čeština<br />
<a href="https://www.root.cz/clanky/grafy-pomoci-programu-r-vkladani-textu-cestina/">https://www.root.cz/clanky/grafy-pomoci-programu-r-vkladani-textu-cestina/</a>
</li>

<li>Cesta erka: Krok nultý &ndash; instalace &amp; nastavení – prostředí, projekty, package<br />
<a href="https://www.jla-data.net/r4su/r4su-environment-setup/">https://www.jla-data.net/r4su/r4su-environment-setup/</a>
</li>

<li>Cesta erka: Krok první &ndash; operace a struktury – proměnné, rovnítka a dolary<br />
<a href="https://www.jla-data.net/r4su/r4su-data-structures/">https://www.jla-data.net/r4su/r4su-data-structures/</a>
</li>

<li>Cesta erka: Krok druhý &ndash; načtení externích dat – csvčka, excely a databáze<br />
<a href="https://www.jla-data.net/r4su/r4su-read-data/">https://www.jla-data.net/r4su/r4su-read-data/</a>
</li>

<li>Cesta erka: Krok třetí &ndash; manipulace s daty – dplyr, slovesa a pajpy<br />
<a href="https://www.jla-data.net/r4su/r4su-manipulate-data/">https://www.jla-data.net/r4su/r4su-manipulate-data/</a>
</li>

<li>Cesta erka: Krok čtvrtý &ndash; podání výsledků – ggplot, geomy a estetiky<br />
<a href="https://www.jla-data.net/r4su/r4su-report-results/">https://www.jla-data.net/r4su/r4su-report-results/</a>
</li>

<li>Cesta erka: Krok pátý &ndash; case study – případ piva v&nbsp;Praze<br />
<a href="https://www.jla-data.net/r4su/r4su-case-study-beer/">https://www.jla-data.net/r4su/r4su-case-study-beer/</a>
</li>

<li>V indexu popularity programovacích jazyků TIOBE překvapilo R, Go, Perl, Scratch a Rust<br />
<a href="https://www.root.cz/zpravicky/v-indexu-popularity-programovacich-jazyku-tiobe-prekvapilo-r-go-perl-scratch-a-rust/">https://www.root.cz/zpravicky/v-indexu-popularity-programovacich-jazyku-tiobe-prekvapilo-r-go-perl-scratch-a-rust/</a>
</li>

<li>Is R Programming SURGING in Popularity in 2020?<br />
<a href="https://www.youtube.com/watch?v=Duwn-vImyXE">https://www.youtube.com/watch?v=Duwn-vImyXE</a>
</li>

<li>Using the R programming language in Jupyter Notebook<br />
<a href="https://docs.anaconda.com/anaconda/navigator/tutorials/r-lang/">https://docs.anaconda.com/anaconda/navigator/tutorials/r-lang/</a>
</li>

<li>Using R on Jupyter Notebook<br />
<a href="https://dzone.com/articles/using-r-on-jupyternbspnotebook">https://dzone.com/articles/using-r-on-jupyternbspnotebook</a>
</li>

<li>Graphics, ggplot2<br />
<a href="http://r4stats.com/examples/graphics-ggplot2/">http://r4stats.com/examples/graphics-ggplot2/</a>
</li>

<li>A Practice Data Set<br />
<a href="https://r4stats.wordpress.com/examples/mydata/">https://r4stats.wordpress.com/examples/mydata/</a>
</li>

<li>Shiny &ndash; galerie projektů<br />
<a href="https://shiny.rstudio.com/gallery/">https://shiny.rstudio.com/gallery/</a>
</li>

<li>Seriál Programovací jazyk Julia<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-julia/">https://www.root.cz/serialy/programovaci-jazyk-julia/</a>
</li>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Introducing Julia/Metaprogramming<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming">https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>Learn X in Y minutes (where X=Julia)<br />
<a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a>
</li>

<li>New Julia language seeks to be the C for scientists<br />
<a href="http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html">http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html</a>
</li>

<li>Julia: A Fast Dynamic Language for Technical Computing<br />
<a href="http://karpinski.org/publications/2012/julia-a-fast-dynamic-language">http://karpinski.org/publications/2012/julia-a-fast-dynamic-language</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="http://llvm.org/">http://llvm.org/</a>
</li>

<li>Julia: benchmarks<br />
<a href="http://julialang.org/benchmarks/">http://julialang.org/benchmarks/</a>
</li>

<li>R Vector<br />
<a href="https://www.datamentor.io/r-programming/vector/">https://www.datamentor.io/r-programming/vector/</a>
</li>

<li>.R File Extension<br />
<a href="https://fileinfo.com/extension/r">https://fileinfo.com/extension/r</a>
</li>

<li>Lineární regrese<br />
<a href="https://cs.wikipedia.org/wiki/Line%C3%A1rn%C3%AD_regrese">https://cs.wikipedia.org/wiki/Line%C3%A1rn%C3%AD_regrese</a>
</li>

<li>lm (funkce)<br />
<a href="https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/lm">https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/lm</a>
</li>

<li>quit (funkce)<br />
<a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/quit">https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/quit</a>
</li>

<li>c (funkce)<br />
<a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/c">https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/c</a>
</li>

<li>help (funkce)<br />
<a href="https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/help">https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/help</a>
</li>

<li>Shiny: Introduction to interactive documents<br />
<a href="https://shiny.rstudio.com/articles/interactive-docs.html">https://shiny.rstudio.com/articles/interactive-docs.html</a>
</li>

<li>R Release History 1997-2013<br />
<a href="http://timelyportfolio.github.io/rCharts_timeline_r/">http://timelyportfolio.github.io/rCharts_timeline_r/</a>
</li>

<li>R: atomic vectors<br />
<a href="https://renenyffenegger.ch/notes/development/languages/R/data-structures/vector/">https://renenyffenegger.ch/notes/development/languages/R/data-structures/vector/</a>
</li>

<li>11 Best R Programming IDE and editors<br />
<a href="https://www.dunebook.com/best-r-programming-ide/">https://www.dunebook.com/best-r-programming-ide/</a>
</li>

<li>CRAN - The Comprehensive R Archive Network<br />
<a href="https://cran.r-project.org/">https://cran.r-project.org/</a>
</li>

<li>R - Arrays<br />
<a href="https://www.tutorialspoint.com/r/r_arrays.htm">https://www.tutorialspoint.com/r/r_arrays.htm</a>
</li>

<li>Array vs Matrix in R Programming<br />
<a href="https://www.geeksforgeeks.org/array-vs-matrix-in-r-programming/?ref=rp">https://www.geeksforgeeks.org/array-vs-matrix-in-r-programming/?ref=rp</a>
</li>

<li>Online R Language IDE<br />
<a href="https://www.jdoodle.com/execute-r-online/">https://www.jdoodle.com/execute-r-online/</a>
</li>

<li>Execute R Online (R v3.4.1)<br />
<a href="https://www.tutorialspoint.com/execute_r_online.php">https://www.tutorialspoint.com/execute_r_online.php</a>
</li>

<li>Snippets: Run any R code you like. There are over twelve thousand R packages preloaded<br />
<a href="https://rdrr.io/snippets/">https://rdrr.io/snippets/</a>
</li>

<li>R Package Documentation<br />
<a href="https://rdrr.io/">https://rdrr.io/</a>
</li>

<li>Data Reshaping in R – Popular Functions to Organise Data<br />
<a href="https://techvidvan.com/tutorials/data-reshaping-in-r/">https://techvidvan.com/tutorials/data-reshaping-in-r/</a>
</li>

<li>What is an R Data Frame?<br />
<a href="https://magoosh.com/data-science/what-is-an-r-data-frame/">https://magoosh.com/data-science/what-is-an-r-data-frame/</a>
</li>

<li>What's a data frame?<br />
<a href="https://campus.datacamp.com/courses/free-introduction-to-r/chapter-5-data-frames?ex=1">https://campus.datacamp.com/courses/free-introduction-to-r/chapter-5-data-frames?ex=1</a>
</li>

<li>data.frame<br />
<a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/data.frame">https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/data.frame</a>
</li>

<li>as.data.frame<br />
<a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/as.data.frame">https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/as.data.frame</a>
</li>

<li>table<br />
<a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/table">https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/table</a>
</li>

<li>Python Pandas - DataFrame<br />
<a href="https://www.tutorialspoint.com/python_pandas/python_pandas_dataframe.htm">https://www.tutorialspoint.com/python_pandas/python_pandas_dataframe.htm</a>
</li>

<li>The Pandas DataFrame: Make Working With Data Delightful<br />
<a href="https://realpython.com/pandas-dataframe/">https://realpython.com/pandas-dataframe/</a>
</li>

<li>Python | Pandas DataFrame<br />
<a href="https://www.geeksforgeeks.org/python-pandas-dataframe/">https://www.geeksforgeeks.org/python-pandas-dataframe/</a>
</li>

<li>R - Factors<br />
<a href="https://www.tutorialspoint.com/r/r_factors.htm">https://www.tutorialspoint.com/r/r_factors.htm</a>
</li>

<li>R - Scatterplots<br />
<a href="https://www.tutorialspoint.com/r/r_scatterplots.htm">https://www.tutorialspoint.com/r/r_scatterplots.htm</a>
</li>

<li>Quick guide to line types (lty) in R<br />
<a href="https://www.benjaminbell.co.uk/2018/02/quick-guide-to-line-types-lty-in-r.html">https://www.benjaminbell.co.uk/2018/02/quick-guide-to-line-types-lty-in-r.html</a>
</li>

<li>Lattice C (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Lattice_C">https://en.wikipedia.org/wiki/Lattice_C</a>
</li>

<li>Lorenz Attractor in R<br />
<a href="https://www.sixhat.net/lorenz-attractor-in-r.html">https://www.sixhat.net/lorenz-attractor-in-r.html</a>
</li>

<li>Small multiple<br />
<a href="https://en.wikipedia.org/wiki/Small_multiple">https://en.wikipedia.org/wiki/Small_multiple</a>
</li>

<li>Category:Infographics (infografika)<br />
<a href="https://en.wikipedia.org/wiki/Category:Infographics">https://en.wikipedia.org/wiki/Category:Infographics</a>
</li>

<li>Trellis plots (pro Python)<br />
<a href="https://subscription.packtpub.com/book/big_data_and_business_intelligence/9781784390150/4/ch04lvl1sec41/trellis-plots">https://subscription.packtpub.com/book/big_data_and_business_intelligence/9781784390150/4/ch04lvl1sec41/trellis-plots</a>
</li>

<li>Trellis (architecture)<br />
<a href="https://en.wikipedia.org/wiki/Trellis_(architecture)">https://en.wikipedia.org/wiki/Trellis_(architecture)</a>
</li>

<li>Izobara (meteorologie)<br />
<a href="https://cs.wikipedia.org/wiki/Izobara_(meteorologie)">https://cs.wikipedia.org/wiki/Izobara_(meteorologie)</a>
</li>

<li>How to Create a Lattice Plot in R<br />
<a href="https://www.dummies.com/programming/r/how-to-create-a-lattice-plot-in-r/">https://www.dummies.com/programming/r/how-to-create-a-lattice-plot-in-r/</a>
</li>

<li>Density estimation<br />
<a href="https://en.wikipedia.org/wiki/Density_estimation">https://en.wikipedia.org/wiki/Density_estimation</a>
</li>

<li>Sedm smrtelných statistických hříchů<br />
<a href="http://dfens-cz.com/sedm-smrtelnych-statistickych-hrichu/">http://dfens-cz.com/sedm-smrtelnych-statistickych-hrichu/</a>
</li>

<li>Spurious correlations<br />
<a href="https://tylervigen.com/spurious-correlations">https://tylervigen.com/spurious-correlations</a>
</li>

<li>R programming<br />
<a href="https://www.slideshare.net/shantanupatil104/r-programming-44637606">https://www.slideshare.net/shantanupatil104/r-programming-44637606</a>
</li>

<li>R language tutorial<br />
<a href="https://www.slideshare.net/ChiuYW/r-language-tutorial">https://www.slideshare.net/ChiuYW/r-language-tutorial</a>
</li>

<li>An Interactive Introduction To R (Programming Language For Statistics)<br />
<a href="https://www.slideshare.net/dataspora/an-interactive-introduction-to-r-programming-language-for-statistics">https://www.slideshare.net/dataspora/an-interactive-introduction-to-r-programming-language-for-statistics</a>
</li>

<li>A Pamphlet against R<br />
<a href="https://panicz.github.io/pamphlet/">https://panicz.github.io/pamphlet/</a>
</li>

<li>Notebook interface<br />
<a href="https://en.wikipedia.org/wiki/Notebook_interface">https://en.wikipedia.org/wiki/Notebook_interface</a>
</li>

<li>Jypyter: open source, interactive data science and scientific computing across over 40 programming languages<br />
<a href="https://jupyter.org/">https://jupyter.org/</a>
</li>

<li>nbviewer: a simple way to share Jupyter Notebooks<br />
<a href="https://nbviewer.jupyter.org/">https://nbviewer.jupyter.org/</a>
</li>

<li>Video streaming in the Jupyter Notebook<br />
<a href="https://towardsdatascience.com/video-streaming-in-the-jupyter-notebook-635bc5809e85">https://towardsdatascience.com/video-streaming-in-the-jupyter-notebook-635bc5809e85</a>
</li>

<li>How IPython and Jupyter Notebook work<br />
<a href="https://jupyter.readthedocs.io/en/latest/architecture/how_jupyter_ipython_work.html">https://jupyter.readthedocs.io/en/latest/architecture/how_jupyter_ipython_work.html</a>
</li>

<li>Jupyter kernels<br />
<a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels">https://github.com/jupyter/jupyter/wiki/Jupyter-kernels</a>
</li>

<li>PNG is Not GIF<br />
<a href="https://www.root.cz/clanky/png-is-not-gif/">https://www.root.cz/clanky/png-is-not-gif/</a>
</li>

<li>Anatomie grafického formátu PNG<br />
<a href="https://www.root.cz/clanky/anatomie-grafickeho-formatu-png/">https://www.root.cz/clanky/anatomie-grafickeho-formatu-png/</a>
</li>

<li>PNG - bity, byty, chunky<br />
<a href="https://www.root.cz/clanky/png-bity-byty-chunky/">https://www.root.cz/clanky/png-bity-byty-chunky/</a>
</li>

<li>Řádkové filtry v PNG<br />
<a href="https://www.root.cz/clanky/radkove-filtry-v-png/">https://www.root.cz/clanky/radkove-filtry-v-png/</a>
</li>

<li>Nepovinné chunky v PNG a kontrola pomocí CRC<br />
<a href="https://www.root.cz/clanky/nepovinne-chunky-v-png-a-kontrola-pomoci-crc/">https://www.root.cz/clanky/nepovinne-chunky-v-png-a-kontrola-pomoci-crc/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

