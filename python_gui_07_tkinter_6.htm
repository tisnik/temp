<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Grafické uživatelské rozhraní v Pythonu: kouzla s kreslicí plochou (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Grafické uživatelské rozhraní v Pythonu: kouzla s kreslicí plochou (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Popis základních vlastností kreslicí plochy (canvasu) dostupné v&nbsp;knihovně Tkinter dnes dokončíme. Popíšeme si způsob tvorby složitějších geometrických tvarů (například šipek), nastavení vlastností při vykreslování, tvorbu uzavřených obrazců, ale i problematiku použití rámců a rastrových obrázků.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Grafické uživatelské rozhraní v&nbsp;Pythonu: kouzla s kreslicí plochou (dokončení)</a></p>
<p><a href="#k02">2. První demonstrační příklad: geometrické tvary, které je možné vložit (vykreslit) na plátno</a></p>
<p><a href="#k03">3. Oblouky</a></p>
<p><a href="#k04">4. Kruhové výseče a kruhové úseče</a></p>
<p><a href="#k05">*** 5. Styly liniových tvarů</a></p>
<p><a href="#k06">*** 6. Čárkované a čerchované úsečky</a></p>
<p><a href="#k07">*** 7. Kresba šipek</a></p>
<p><a href="#k08">8. Uzavřené obrazce</a></p>
<p><a href="#k09">*** 9. Styly vykreslení uzavřených obrazců</a></p>
<p><a href="#k10">10. Rámce (<strong>Frame) aneb kontejner pro další widgety uložený přímo na plátnu</a></p>
<p><a href="#k11">11. Bitmapy (<strong>BitmapImage</strong>) &ndash; dvoubarevné obrázky</a></p>
<p><a href="#k12">12. Pixmapy (<strong>PhotoImage</strong>) &ndash; vícebarevné obrázky</a></p>
<p><a href="#k13">13. Text na canvasu</a></p>
<p><a href="#k14">14. Vertikální výpis textu na canvas</a></p>
<p><a href="#k15">15. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Grafické uživatelské rozhraní v Pythonu: kouzla s&nbsp;kreslicí plochou (dokončení)</h2>

<p><a
href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-kouzla-s-kreslici-plochou-canvasem/">V&nbsp;předchozí
části</a> <a
href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">seriálu
o knihovnách určených pro tvorbu grafických uživatelských rozhraní
v&nbsp;programovacím jazyku Python</a> jsme se seznámili s&nbsp;takzvanou
kreslicí plochou neboli <i>canvasem</i>. Připomeňme si, že canvas slouží jako
kontejner, na nějž je možné vkládat různé geometrické tvary, rastrové obrázky
nebo text. Jednotlivé tvary jsou v&nbsp;Pythonu reprezentovány plnohodnotnými
objekty, takže je možné měnit jejich vlastnosti, naprogramovat reakci na různé
události, přemisťovat je nebo je i mazat (u textů je možné změnit i zobrazený
řetězec). Canvas je tak možné použít jako základ pro různé systémy typu CAD,
editory map, editory schémat atd. Canvas je tak pravděpodobně tou nejlepší
technologií, kterou knihovna Tkinter programátorům nabízí, a to i přesto, že
není založena na žádné moderní sadě widgetů, ale &bdquo;pouze&ldquo; na
knihovně Tk s&nbsp;rozšířením Ttk.</p>

<img src="https://i.iinfo.cz/images/134/tkinter5-5.png" class="image-300220" alt="&#160;" width="260" height="285" />
<p><i>Obrázek 1: Canvas s&nbsp;několika objekty &ndash; kruhem, dvojicí úseček
a textem.</i></p>

<p>V&nbsp;následující tabulce (již jsme se s&nbsp;ní ostatně seznámili minule)
je ukázáno, jaké objekty je možné na canvas pokládat:</p>

<table>
<tr><th>Jméno objektu</th><th>Význam</th></tr>
<tr><td><strong>arc</strong></td><td>kruhový nebo eliptický <a href="#k03">oblouk</a>, též <a href="#k04">kruhová výseč a úseč</a></td></tr>
<tr><td><strong>bitmap</strong></td><td><a href="#k11">bitmapový obrázek</a></td></tr>
<tr><td><strong>image</strong></td><td>obecně vícebarevný <a href="#k11">rastrový obrázek</a></td></tr>
<tr><td><strong>line</strong></td><td><a href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-kouzla-s-kreslici-plochou-canvasem/#k07">úsečka</a>, <a href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-kouzla-s-kreslici-plochou-canvasem/#k13">lomená úsečka</a> nebo dokonce <a href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-kouzla-s-kreslici-plochou-canvasem/#k14">hladká křivka (spline)</a> (!)</td></tr>
<tr><td><strong>oval</strong></td><td><a href="https://www.root.cz/clanky/graficke-uzivatelske-rozhrani-v-pythonu-kouzla-s-kreslici-plochou-canvasem/#k07">uzavřená kružnice nebo elipsa</a></td></tr>
<tr><td><strong>polygon</strong></td><td><a href="#k08">uzavřený polygon či tvar vytvořený ze spline křivek</a></td></tr>
<tr><td><strong>rectangle</strong></td><td><a href="#k08">čtverec nebo obdélník</a></td></tr>
<tr><td><strong>text</strong></td><td>textový řetězec</td></tr>
<tr><td><strong>frame(window)</strong></td><td>vnořené okno (<a href="#k10">rámec</a>) se samostatným řízením</td></tr>
</table>

<p>Z&nbsp;těchto objektů můžeme vybrat geometrické tvary, které mohou být buď
otevřené (liniové) nebo uzavřené (potenciálně vyplněné):</p>

<table>
<tr><th>Geometrický tvar</th><th>Typ</th></tr>
<tr><td><strong>line</strong></td><td>liniový</td></tr>
<tr><td><strong>arc</strong></td><td>liniový (oblouk) i uzavřený (kruhová výseč a úseč)</td></tr>
<tr><td><strong>rectangle</strong></td><td>uzavřený</td></tr>
<tr><td><strong>polygon</strong></td><td>uzavřený</td></tr>
<tr><td><strong>oval</strong></td><td>uzavřený</td></tr>
</table>

<p>Poznámka: u všech uzavřených objektů je možné zakázat jejich výplň. To má
dva významy &ndash; změní se způsob vykreslení takového geometrického tvaru a
navíc bude objekt odlišně reagovat například na přejezd kurzoru myši
(neexistující výplň již nebude součástí objektu).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. První demonstrační příklad: geometrické tvary, které je možné vložit (vykreslit) na plátno</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázán způsob vykreslení
základních geometrických tvarů, ať již otevřených (liniových), tak i
uzavřených. Kromě toho je na plátno vykreslena i jednoduchá mřížka; tu
použijeme i v&nbsp;příkladech následujících. Význam některých nastavení bude
popsán v&nbsp;dalším textu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_line(0, 0, 100, 100, fill='red', width=2, dash=8)
&nbsp;
canvas.create_arc(100, 1, 200, 100, outline='blue', start=45,
                  extent=180, style=tkinter.ARC, width=2)
&nbsp;
canvas.create_oval(200, 1, 300, 100)
&nbsp;
canvas.create_oval(325, 25, 375, 75, fill="#a0a0ff")
&nbsp;
canvas.create_rectangle(50, 125, 150, 175, fill="#a0a0ff")
&nbsp;
canvas.create_text(300, 150, text="Hello world!", font="Helvetica 20")
&nbsp;
canvas.create_polygon(50, 225, 200, 300, 50, 375, fill="#80ff80")
&nbsp;
canvas.create_polygon(250, 225, 400, 300, 250, 375, fill="black",
                      outline="red", width="5")
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 2: Screenshot prvního demonstračního příkladu
s&nbsp;geometrickými tvary a textem vloženými na canvas.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Oblouky</h2>

<p>Poněkud zvláštní postavení mezi grafickými entitami má objekt pojmenovaný
<strong>arc</strong>, pomocí kterého lze, jak již ostatně jeho název napovídá,
vytvářet několik geometrických tvarů, konkrétně oblouky a také kruhové či
eliptické výseče. S&nbsp;využitím <strong>arc</strong> je tedy možné vytvořit
jak liniový objekt, tak i objekt plošný (a potenciálně vyplněný). Příkaz pro
vytvoření a zobrazení oblouku vypadá následovně:</p>

<pre>
canvas.create_arc(x1, y1, x2, y2, další nepovinné volby)
</pre>

<p>popř.:</p>

<pre>
canvas.create_arc(seznam souřadnic, další nepovinné volby)
</pre>

<p>V&nbsp;případě, že skutečně potřebujeme vytvořit oblouk a nikoli kruhovou
výseč nebo úseč, musí se použít nepovinný (pojmenovaný) parametry
<strong>style</strong>, jehož hodnota musí být nastavena na konstantu
<strong>tkinter.ARC</strong>:</p>

<pre>
canvas.create_arc(0, 0, 100, 100,
                  outline='red',
                  style=tkinter.ARC,
                  width=2)
</pre>

<p>Pomocí souřadnic <strong>[x1, y1]</strong> a <strong>[x2, y2]</strong> se
specifikuje obalový obdélník oblouku (jedná se o dva protilehlé vrcholy). Pokud
se zadá obdélník se stejně dlouhými hranami, je vytvořen kruhový oblouk,
v&nbsp;opačném případě se jedná o oblouk eliptický. Nejdůležitějšími
nepovinnými volbami jsou <strong>start=hodnota</strong> a
<strong>extent=hodnota</strong> (nikoli <strong>extend</strong>, sám tuto chybu
dělám velmi často). Těmito volbami se udává počáteční a koncový úhel - mezi
zadanými úhly bude oblouk vytvořen. Pomocí voleb <strong>outline, fill,
stipple</strong> atd. je možné nastavit způsob zobrazení obrysů i výplně
oblouků.</p>

*** image ***
<p><i>Obrázek 3: Screenshot druhého demonstračního příkladu s&nbsp;různými
oblouky.</i></p>

<p>Opět se podívejme na demonstrační příklad, po jehož spuštění se na kreslicí
plochu vloží několik oblouků s&nbsp;různými geometrickými a grafickými
vlastnostmi:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_arc(0, 0, 100, 100, outline='red', style=tkinter.ARC,
                  width=2)
&nbsp;
canvas.create_arc(100, 100, 200, 200, outline='blue', start=45,
                  style=tkinter.ARC, width=2)
&nbsp;
canvas.create_arc(200, 0, 300, 100, outline='brown', extent=180,
                  style=tkinter.ARC, width=2)
&nbsp;
canvas.create_arc(300, 100, 400, 200, outline='green', start=45, extent=270,
                  style=tkinter.ARC, width=2)
&nbsp;
canvas.create_arc(0, 200, 100, 300, outline='red', style=tkinter.ARC, dash=8,
                  width=2)
&nbsp;
canvas.create_arc(100, 300, 200, 400, outline='blue', start=45,
                  style=tkinter.ARC, dash=8, width=10)
&nbsp;
canvas.create_arc(200, 200, 300, 300, outline='green', start=45, extent=270,
                  style=tkinter.ARC, dash=3, width=50)
&nbsp;
canvas.create_arc(290, 290, 390, 390, outline='brown', extent=270,
                  style=tkinter.ARC, dash=80, width=20)
&nbsp;
root.mainloop()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Kruhové výseče a kruhové úseče</h2>

<p>Pokud při použití metody <strong>canvas.create_arc()</strong> nebudeme
specifikovat hodnotu pojmenovaného parametru <strong>style</strong>,
popř.&nbsp;mu přiřadíme hodnotu <strong>tkinter.PIESLICE</strong>, vykreslí se
<a href="https://cs.wikipedia.org/wiki/Kruhov%C3%A1_v%C3%BDse%C4%8D">kruhová
výseč</a>:</p>

*** image ***
<p><i>Obrázek 4: Několik kruhových výsečí (pro oblouk o 180&deg; není rozdíl
mezi výsečí a úsečí patrný).</i></p>

<p>Poznámka: výseč ve skutečnosti nemusí být pouze kruhová, protože se, podobně
jako u oblouku, tvar specifikuje s&nbsp;využitím souřadnic protilehlých vrcholů
obalového obdélníku, takže lze tvořit i eliptickou výseč.</p>

<p>Čtvrtý obrázek byl vykreslen následujícím skriptem:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_arc(0, 0, 100, 100, fill='#ff8080')
canvas.create_arc(100, 100, 200, 200, fill='#8080ff', start=45)
canvas.create_arc(200, 0, 300, 100, fill='#80ffff', extent=180)
canvas.create_arc(300, 100, 400, 200, fill='#ffff80', start=45, extent=270)
&nbsp;
canvas.create_arc(0, 200, 100, 300, fill='#ff8080', start=90, extent=270)
canvas.create_arc(100, 300, 200, 400, fill='#8080ff', start=90+45, extent=270)
canvas.create_arc(200, 200, 300, 300, fill='#80ffff', start=180, extent=180)
canvas.create_arc(300, 300, 400, 400, fill='#ffff80', start=-45, extent=90)
&nbsp;
root.mainloop()
</pre>

<p>Knihovna Tkinter umožňuje, aby metoda <strong>canvas.create_arc()</strong>
alternativně vykreslila i <a
href="https://cs.wikipedia.org/wiki/Kruhov%C3%A1_%C3%BAse%C4%8D">kruhovou
úseč</a>. Postačuje použít pojmenovaný nepovinný parametr
<strong>style=tkinter.CHORD</strong>:</p>

<pre>
canvas.create_arc(300, 100, 400, 200,
                  fill='#ffff80',
                  start=45,
                  extent=270,
                  style=tkinter.CHORD)
</pre>

*** image ***
<p><i>Obrázek 5: Několik kruhových úsečí (pro oblouk o 180&deg; není rozdíl
mezi výsečí a úsečí patrný).</i></p>

<p>Pátý obrázek byl vykreslen následujícím skriptem:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_arc(0, 0, 100, 100, fill='#ff8080', style=tkinter.CHORD)
&nbsp;
canvas.create_arc(100, 100, 200, 200, fill='#8080ff', start=45,
                  style=tkinter.CHORD)
&nbsp;
canvas.create_arc(200, 0, 300, 100, fill='#80ffff', extent=180,
                  style=tkinter.CHORD)
&nbsp;
canvas.create_arc(300, 100, 400, 200, fill='#ffff80', start=45, extent=270,
                  style=tkinter.CHORD)
&nbsp;
canvas.create_arc(0, 200, 100, 300, fill='#ff8080', start=90, extent=270,
                  style=tkinter.CHORD)
&nbsp;
canvas.create_arc(100, 300, 200, 400, fill='#8080ff', start=90+45, extent=270,
                  style=tkinter.CHORD)
&nbsp;
canvas.create_arc(200, 200, 300, 300, fill='#80ffff', start=180, extent=180,
                  style=tkinter.CHORD)
&nbsp;
canvas.create_arc(300, 300, 400, 400, fill='#ffff80', start=-45, extent=90,
                  style=tkinter.CHORD)
&nbsp;
root.mainloop()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Styly liniových tvarů</h2>

<p>U všech vykreslovaných liniových tvarů je možné specifikovat styl
vykreslování. Styly se zadávájí pomocí nepovinných (pojmenovaných)
parametrů:</p>

<table>
<tr><th>Jméno parametru</th><th>Význam</th></tr>
<tr><td>fill</td><td>barva úsečky (již známe)</td></tr>
<tr><td>width</td><td>šířka liniového tvaru (opět již známe)</td></tr>
<tr><td>dash</td><td>styl vykreslení (čárkovaná, čerchovaná, ...), viz <a href="#k06">následující kapitolu</a></td></tr>
<tr><td>cap</td><td>styl zakončení objektů s šířkou větší než jeden pixel</td></tr>
<tr><td>join</td><td>styl spojení navazujících úseček s šířkou větší než jeden pixel</td></tr>
</table>

<p>Hodnoty parametru <strong>cap</strong>:</p>

<table>
<tr><th>Hodnota</th><th>Význam</th></tr>
<tr><td>tkinter.BUTT</td><td></td></tr>
<tr><td>tkinter.PROJECTING</td><td></td></tr>
<tr><td>tkinter.ROUND</td><td></td></tr>
</table>

<p>Hodnoty parametru <strong>join</strong>:</p>

<table>
<tr><th>Hodnota</th><th>Význam</th></tr>
<tr><td>tkinter.ROUND</td><td></td></tr>
<tr><td>tkinter.BEVEL</td><td></td></tr>
<tr><td>tkinter.MITER</td><td></td></tr>
</table>

<p>V&nbsp;dalším příkladu je použití některých stylů vykreslení ukázáno.
Povšimněte si především způsobu použití stylů <strong>join</strong> a
<strong>cap</strong> při navazování úseček:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_line(10, 10, 90, 90)
canvas.create_line(110, 10, 190, 90, fill='#8080ff')
canvas.create_line(210, 10, 290, 90, fill='#ffff80', width=8)
canvas.create_line(310, 10, 390, 90, fill='#80aa80', width=8, dash=15)
&nbsp;
canvas.create_line(10, 110, 90, 190, fill='red', width=12)
canvas.create_line(110, 110, 190, 190, fill='red', width=12,
                   cap=tkinter.BUTT)
canvas.create_line(210, 110, 290, 190, fill='red', width=12,
                   cap=tkinter.PROJECTING)
canvas.create_line(310, 110, 390, 190, fill='red', width=12,
                   cap=tkinter.ROUND)
&nbsp;
canvas.create_line(10, 110, 90, 190, fill='white')
canvas.create_line(110, 110, 190, 190, fill='white')
canvas.create_line(210, 110, 290, 190, fill='white')
canvas.create_line(310, 110, 390, 190, fill='white')
&nbsp;
canvas.create_line(10, 210, 50, 290, 90, 210, fill='red', width=12)
canvas.create_line(110, 210, 150, 290, 190, 210, fill='red', width=12,
                   cap=tkinter.BUTT)
canvas.create_line(210, 210, 250, 290, 290, 210, fill='red', width=12,
                   cap=tkinter.PROJECTING)
canvas.create_line(310, 210, 350, 290, 390, 210, fill='red', width=12,
                   cap=tkinter.ROUND)
&nbsp;
# pomocne usecky
canvas.create_line(10, 210, 50, 290, 90, 210, fill='white')
canvas.create_line(110, 210, 150, 290, 190, 210, fill='white')
canvas.create_line(210, 210, 250, 290, 290, 210, fill='white')
canvas.create_line(310, 210, 350, 290, 390, 210, fill='white')
&nbsp;
canvas.create_line(10, 310, 50, 390, 90, 310, fill='red', width=12)
canvas.create_line(110, 310, 150, 390, 190, 310, fill='red', width=12,
                   join=tkinter.ROUND)
canvas.create_line(210, 310, 250, 390, 290, 310, fill='red', width=12,
                   join=tkinter.BEVEL)
canvas.create_line(310, 310, 350, 390, 390, 310, fill='red', width=12,
                   join=tkinter.MITER)
&nbsp;
# pomocne usecky
canvas.create_line(10, 310, 50, 390, 90, 310, fill='white')
canvas.create_line(110, 310, 150, 390, 190, 310, fill='white')
canvas.create_line(210, 310, 250, 390, 290, 310, fill='white')
canvas.create_line(310, 310, 350, 390, 390, 310, fill='white')
&nbsp;
root.mainloop()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Čárkované a čerchované úsečky</h2>

<p>Při kresbě liniových obrazců nebo okrajů plošných obrazců je možné zvolit
vzorek (styl) úseček &ndash; plná (výchozí nastavení), čárkovaná, čerchovaná,
střídavá apod. K&nbsp;nastavení vzorku vykreslení úsečky slouží nepovinné
parametry pojmenované <strong>dash</strong> a <strong>dashoff</strong>. Pokud
se do parametru <strong>dash</strong> předá jediná číselná hodnota, vytvoří se
čárkovaná úsečka s&nbsp;délkou jednotlivých úseků odpovídajících specifikované
hodnotě. Je také možné zvolit si jiné jednotky, například centimetry, potom se
ovšem namísto číselné hodnoty předává řetězec (viz úvodní část tohoto
seriálu).</p>

<p>Pokud se však do parametru <strong>dash</strong> předá n-tice, budou
jednotlivé prvky n-tice postupně interpretovány jako délka viditelné části
úsečky, délka neviditelné části, opět délka viditelné části atd. Tímto způsobem
lze tedy vytvořit například i čerchovanou čáru, tečkovanou apod. Pomocný
pojmenovaný parametr <strong>dashoff</strong> specifikuje posun (<i>offset</i>)
vzorku, přičemž posun může být kladný i záporný (to se hodí v&nbsp;těch
případech, kdy potřebujeme, aby byl začátek úsečky tvořen neviditelným
segmentem):</p>

*** image ***
<p><i>Obrázek ...</i></p>

<p>Demonstrační příklad, v&nbsp;němž se používají nepovinné parametry
pojmenované <strong>dash</strong> a <strong>dashoff</strong>, vypadá
následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_line(10, 10, 90, 90)
canvas.create_line(110, 10, 190, 90, fill='#8080ff')
canvas.create_line(210, 10, 290, 90, fill='#ffff80', width=8)
canvas.create_line(310, 10, 390, 90, fill='#80aa80', width=8, dash=15)
&nbsp;
canvas.create_line(10, 110, 90, 190, width=2, dash=(12, 3))
canvas.create_line(110, 110, 190, 190, width=2, dash=(9, 6))
canvas.create_line(210, 110, 290, 190, width=2, dash=(6, 9))
canvas.create_line(310, 110, 390, 190, width=2, dash=(3, 12))
&nbsp;
canvas.create_line(10, 210, 90, 290, width=2, dash=(12, 2, 2, 2))
canvas.create_line(110, 210, 190, 290, width=2, dash=(12, 2, 4, 2))
canvas.create_line(210, 210, 290, 290, width=2, dash=(12, 4, 2, 4))
canvas.create_line(310, 210, 390, 290, width=2, dash=(12, 2, 2, 2, 2, 2))
&nbsp;
canvas.create_line(10, 310, 90, 390, width=2, dash=(12, 2, 2, 2), dashoff=0)
canvas.create_line(110, 310, 190, 390, width=2, dash=(12, 2, 4, 2), dashoff=5)
canvas.create_line(210, 310, 290, 390, width=2, dash=(12, 4, 2, 4), dashoff=10)
canvas.create_line(310, 310, 390, 390, width=2, dash=(12, 2, 2, 2, 2, 2),
                   dashoff=-5)
&nbsp;
root.mainloop()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Kresba šipek</h2>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_line(10, 50, 90, 50)
canvas.create_line(110, 50, 190, 50, arrow=tkinter.FIRST)
canvas.create_line(210, 50, 290, 50, arrow=tkinter.LAST)
canvas.create_line(310, 50, 390, 50, arrow=tkinter.BOTH)
&nbsp;
canvas.create_line(10, 150, 90, 150, width=5, )
canvas.create_line(110, 150, 190, 150, width=5, arrow=tkinter.FIRST)
canvas.create_line(210, 150, 290, 150, width=5, arrow=tkinter.LAST)
canvas.create_line(310, 150, 390, 150, width=5, arrow=tkinter.BOTH)
&nbsp;
canvas.create_line(10, 250, 90, 250, width=2,   arrow=tkinter.LAST,
                   arrowshape=(10, 10, 10))
canvas.create_line(110, 250, 190, 250, width=2, arrow=tkinter.LAST,
                   arrowshape=(10, 20, 10))
canvas.create_line(210, 250, 290, 250, width=2, arrow=tkinter.LAST,
                   arrowshape=(10, 5, 10))
canvas.create_line(310, 250, 390, 250, width=2, arrow=tkinter.LAST,
                   arrowshape=(10, 0, 10))
&nbsp;
canvas.create_line(10, 350, 90, 350, width=2, arrow=tkinter.BOTH,
                   arrowshape=(10, 10, 10))
canvas.create_line(110, 350, 190, 350, width=2, arrow=tkinter.BOTH,
                   arrowshape=(10, 20, 10))
canvas.create_line(210, 350, 290, 350, width=2, arrow=tkinter.BOTH,
                   arrowshape=(10, 5, 10))
canvas.create_line(310, 350, 390, 350, width=2, arrow=tkinter.BOTH,
                   arrowshape=(10, 0, 10))
&nbsp;
root.mainloop()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Uzavřené obrazce</h2>

<p>Kromě již popsaných kruhových výsečí a kruhových úsečí je možné pracovat i
s&nbsp;dalšími uzavřenými (a tedy potenciálně vyplněnými) geometrickými tvary.
Dalším jednoduchým uzavřeným obrazcem je obdélník, který je vytvořen pomocí
metody <strong>canvas.create_rectangle</strong>. Vytvoření se provádí
následovně:</p>

<pre>
canvas.create_rectangle(20, 220, 80, 280, fill='#ff8080')
</pre>

<p>Podobně jako u oblouku, i u obdélníků (a samozřejmě i čtverců) je možné
volit styl výplně a obrysu.</p>

<p>Dále je možné pracovat s&nbsp;kruhem či elipsou. Ty se vytváří
s&nbsp;využitím metody nazvané <strong>canvas.create_oval()</strong>,
například:</p>

<pre>
canvas.create_oval(x1, y1, x2, y2, fill='#8080ff')
</pre>

<p>Souřadnice <strong>[x1, y1]</strong> a <strong>[x2, y2]</strong> udávají
protilehlé vrcholy obalového obdélníka, podobně jako jsme to již viděli
v&nbsp;případě oblouku. Pokud má obalový obdélník stejně dlouhé hrany, vykreslí
se kruh či kružnice (podle nastavení vyplňování), v&nbsp;opačném případě se
vykreslí elipsa. Způsob vyplnění tohoto typu objektu je stejný, jako u
předchozích dvou typů uzavřených geometrických tvarů.</p>

<p>Nejsložitější uzavřené tvary se tvoří s&nbsp;využitím metody
<strong>canvas.create_polygon()</strong>. Při vytváření tohoto objektu se může
zadat prakticky libovolné množství souřadnic vrcholů. Buď se všechny souřadnice
specifikují přímo:</p>

<pre>
canvas.create_polygon(310, 20, 390, 20, 350, 80,
                      fill='#ffff80',
                      outline='black')
</pre>

<p>nebo (a v praxi mnohem častěji) pomocí seznamu souřadnic.</p>

<pre>
canvas.create_polygon(seznam_se_souřadnicemi,
                      fill='#ffff80',
                      outline='black')
</pre>

<p>Polygon může být buď vyplněný nebo prázdný. Kromě klasického polygonu, jehož
hrany jsou tvořeny polyčárou, je možné vytvářet i tvar ohraničený spline
křivkami. Nastavení spline křivek se děje pomocí voleb <strong>smooth </strong>
(povoluje či zakazuje spline křivky) a <strong>splinesteps hodnota</strong>
(způsob rozdělení ideální křivky na úsečkové segmenty).</p>

<p>Opět se podívejme na jednoduchý demonstrační příklad, v&nbsp;němž jsou tyto
objekty vykresleny:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_rectangle(10, 30, 90, 70, fill='#ff8080')
&nbsp;
canvas.create_rectangle(30, 110, 70, 190, fill='#ff8080')
&nbsp;
canvas.create_rectangle(20, 220, 80, 280, fill='#ff8080')
&nbsp;
canvas.create_oval(110, 30, 190, 70, fill='#8080ff')
&nbsp;
canvas.create_oval(130, 110, 170, 190, fill='#8080ff')
&nbsp;
canvas.create_oval(120, 220, 180, 280, fill='#8080ff')
&nbsp;
canvas.create_polygon(210, 20, 290, 20, 250, 80, fill='#ffff80')
&nbsp;
canvas.create_polygon(310, 20, 390, 20, 350, 80, fill='#ffff80',
                      outline='black')
&nbsp;
canvas.create_polygon(210, 120, 250, 140, 290, 120, 250, 180,
                      fill='#80ff80')
&nbsp;
canvas.create_polygon(310, 120, 350, 140, 390, 120, 350, 180, fill='#80ff80',
                      outline='black')
&nbsp;
canvas.create_polygon(210, 220, 290, 220, 250, 280, fill='#ffff80',
                      smooth=1)
&nbsp;
canvas.create_polygon(310, 220, 390, 220, 350, 280, fill='#ffff80',
                      outline='black', smooth=1)
&nbsp;
canvas.create_polygon(210, 320, 250, 340, 290, 320, 250, 380, fill='#80ff80',
                      smooth=1)
&nbsp;
canvas.create_polygon(310, 320, 350, 340, 390, 320, 350, 380, fill='#80ff80',
                      outline='black', smooth=1)
&nbsp;
&nbsp;
root.mainloop()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Styly vykreslení uzavřených obrazců</h2>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_rectangle(10, 30, 90, 70, fill='#ff8080', width=2,
                        activefill='white')
&nbsp;
canvas.create_rectangle(110, 30, 190, 70, fill='#ff8080', width=2,
                        dash=(5, 5), activedash=1)
&nbsp;
canvas.create_rectangle(30, 110, 70, 190, fill='#ff8080',
                        activeoutline='yellow')
&nbsp;
canvas.create_rectangle(20, 220, 80, 280, fill='#ff8080',
                        activeoutline='yellow', activewidth='5')
&nbsp;
canvas.create_oval(130, 110, 170, 190, fill='#8080ff', width=2,
                   activedash=(10, 10))
&nbsp;
canvas.create_oval(120, 220, 180, 280, fill=None, activefill='#8080ff')
&nbsp;
canvas.create_rectangle(210, 30, 290, 70, fill=None, width=2,
                        activefill='white')
&nbsp;
canvas.create_rectangle(310, 30, 390, 70, fill=None, width=2, dash=(5, 5),
                        activedash=1)
&nbsp;
canvas.create_rectangle(230, 110, 270, 190, fill=None, activeoutline='yellow',
                        width=5)
&nbsp;
canvas.create_rectangle(220, 220, 280, 280, fill=None, activeoutline='yellow',
                        activewidth='5')
&nbsp;
canvas.create_oval(330, 110, 370, 190, fill=None, width=2, activedash=(10, 10))
&nbsp;
canvas.create_oval(320, 220, 380, 280, fill=None, activefill='#8080ff',
                   width=5)
&nbsp;
canvas.create_line(10, 330, 90, 370, fill='#80ff80', width=2,
                   activefill='white')
&nbsp;
canvas.create_line(110, 330, 190, 370, fill='#80ff80', width=20,
                   activefill='white')
&nbsp;
canvas.create_line(210, 330, 290, 370, fill='#80ff80', width=20,
                   activefill='white', dash=10)
&nbsp;
&nbsp;
root.mainloop()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Rámce (<strong>Frame) aneb kontejner pro další widgety uložený přímo na plátnu</h2>

<p>Nejpodivnějším objektem, který můžeme na canvas položit, je takzvaný rámec
neboli <i>frame</i>. Rámec je z&nbsp;pohledu uživatele tvořen obdélníkem
s&nbsp;volitelnou barvou pozadí a konfigurovatelným reliéfem; z&nbsp;pohledu
programátora se pak jedná o kontejner, na který je možné vkládat další widgety,
například tlačítka apod. To je další důkaz toho, že canvas není pouhou
&bdquo;glorifikovanou bitmapou&ldquo;, ale integrální součástí grafického
uživatelského rozhraní, které je možné v&nbsp;Tkinteru vytvořit.</p>

<p>V&nbsp;následujícím příkladu je vytvořen prázdný rámec, se zvoleným
reliéfem. Kromě plátna jsou do GUI aplikace vloženy další dva widgety &ndash;
textové návěští a tlačítko. Ty jsou ovšem vloženy přímo do hlavního okna
aplikace, takže jsou zobrazeny pod canvasem (protože canvas byl pomocí
<strong>.pack</strong> do okna vložen jako první):</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = tkinter.Canvas(root, width=300, height=300, background='white')
canvas.pack()
&nbsp;
canvas.create_line(0, 150,
                   80, 20,
                   220, 280,
                   300, 150, dash=10)
&nbsp;
canvas.create_line(0, 150,
                   80, 20,
                   220, 280,
                   300, 150, smooth=True, width=2, fill="red")
&nbsp;
nested_window = tkinter.Frame(relief=tkinter.RAISED)
canvas.create_window(150, 150, width=150, height=150, window=nested_window)
&nbsp;
label = tkinter.Label(root, text="Hello world!")
button = tkinter.Button(root, text="Close window", command=exit)
&nbsp;
label.pack()
button.pack()
&nbsp;
root.mainloop()
</pre>

<p>V&nbsp;příkladu dalším je již vše jinak &ndash; dva widgety (textové návěští
a tlačítko) jsou nyní vloženy na rámec umístěný na canvasu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = tkinter.Canvas(root, width=300, height=300, background='white')
canvas.pack()
&nbsp;
canvas.create_line(0, 150,
                   80, 20,
                   220, 280,
                   300, 150, dash=10)
&nbsp;
canvas.create_line(0, 150,
                   80, 20,
                   220, 280,
                   300, 150, smooth=True, width=2, fill="red")
&nbsp;
nested_window = tkinter.Frame(relief=tkinter.RAISED)
canvas.create_window(150, 150, width=150, height=150, window=nested_window)
&nbsp;
label = tkinter.Label(nested_window, text="Hello world!")
button = tkinter.Button(nested_window, text="Close window", command=exit)
&nbsp;
label.pack()
button.pack()
&nbsp;
root.mainloop()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Bitmapy (<strong>BitmapImage</strong>) &ndash; dvoubarevné obrázky</h2>

<p>Objekty typu <strong>image</strong> slouží k&nbsp;vytváření a manipulaci
s&nbsp;rastrovými obrázky a to jak bitmapami (v&nbsp;kontextu knihovny Tkinter
jednobarevnými obrázky), tak i takzvanými pixmapami (obecně vícebarevnými
obrázky, ať již s barvovou paletou či bez palety).</p>

<p>Objekt typu <strong>BitmapImage</strong> slouží k&nbsp;manipulaci
s&nbsp;dvoubarevnými rastrovými obrázky, u kterých je každý pixel reprezentován
pouze jedním bitem &ndash; může tedy reprezentovat výběr ze dvou hodnot.
Výhodou bitmap je jejich takřka absolutní přenositelnost mezi různými
platformami s&nbsp;grafickým uživatelským rozhraním, protože alespoň dvě barvy
dokáže zobrazit každé grafické zařízení (dívat se na jednobarevnou plochu je
trošku nudné :-). V&nbsp;pojetí knihovny Tkinter však mohou být bitmapy
komplikovanější, protože je podporována i transparentnost. Ta je řešena pomocí
<strong>dvojice</strong> bitmap, přičemž první bitmapa obsahuje vlastní obrázek
a druhá bitmapa bitovou masku, kterou se specifikuje, které pixely mají být
vykresleny a u kterých se má ponechat původní hodnota.</p>

<p>Bitmapa se vytvoří voláním:</p>

<pre>
bitmap = tkinter.BitmapImage(data=data_bitmapy)
</pre>

<p>nebo voláním:</p>

<pre>
bitmap = tkinter.BitmapImage(file="soubor_s_bitmapou.xbm")
</pre>

<p>Knihovna <i>Tkinter</i> akceptuje formát XBM neboli X-Window Bitmap
popř.&nbsp;pouze <a href="https://en.wikipedia.org/wiki/X_BitMap">X BitMap</a>.
Tento formát je vlastně tvořen formalizovaně zapsaným fragmentem céčkovského
kódu, který může být uložen v&nbsp;externím obrázku nebo přímo v&nbsp;řetězci
v&nbsp;programu:</p>

<pre>
#define test_width 336
#define test_height 240
static unsigned char test_bits[] = {
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
...
...
...
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
</pre>

<p>V&nbsp;dalším demonstračním příkladu je načten a následně zobrazen externí
dvoubarevný obrázek uložený ve formátu XBM:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
bitmap_image = tkinter.BitmapImage(file="test.xbm")
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_image((200, 200), image=bitmap_image)
&nbsp;
root.mainloop()
</pre>

<p>U bitmap je možné nastavit barvu popředí a pozadí:</p>

<pre>
bitmap_image = tkinter.BitmapImage(file="test.xbm",
                                   background="black",
                                   foreground="yellow")
</pre>

<p>Opět se podívejme na zdrojový kód demonstračního příkladu, kde je tato
možnost použita:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
bitmap_image = tkinter.BitmapImage(file="test.xbm",
                                   background="black",
                                   foreground="yellow")
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_image((200, 200), image=bitmap_image)
&nbsp;
root.mainloop()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Pixmapy (<strong>PhotoImage</strong>) &ndash; vícebarevné obrázky</h2>

<p>Objekt typu <strong>PhotoImage</strong> slouží k&nbsp;manipulaci
s&nbsp;vícebarevnými obrázky. Způsob zobrazení těchto objektů se může na
různých systémech lišit, zejména je nutné brát do úvahy barevnou hloubku
zobrazení (tj.&nbsp;počet bitů na jeden pixel); dnes již však prakticky každé
moderní zařízení podporuje zobrazení plnobarevných obrázků. Implicitně se
objekt typu <strong>PhotoImage</strong> vytváří při běhu aplikace tak, aby co
nejvíce odpovídal nastavení konkrétního systému, toto chování je však možné
změnit a například vždy pracovat s&nbsp;osmibitovou barevnou hloubkou (vhodné
pro obrázky s&nbsp;paletou). Mimo nastavování a čtení barev jednotlivých pixelů
je umožněno, aby se obrázek načetl či uložil do externího souboru.</p>

<p>Spolu s&nbsp;knihovnou <i>Tkinter</i> jsou dodávány filtry pro práci
s&nbsp;formáty <strong>PPM</strong> (<i>Portable PixelMap</i>),
<strong>PGM</strong> (<i>Portable GrayMap</i>) a <strong>GIF</strong>
(<i>Graphics Interchange Format</i>). Pokud budete vyžadovat použití jiného
formátu (což asi budete, minimálně PNG a JPEG), lze pro načtení použít knihovnu
PIL neboli <a href="https://pypi.python.org/pypi/PIL">Python Imaging
Library</a> nebo ještě lépe <a
href="https://pypi.python.org/pypi/Pillow/4.2.1">Pillow</a>, což je fork dnes
již pravděpodobně nevyvíjeného PILu.</p>

<p>Vytvoření objektu typu <strong>PhotoImage</strong> je snadné:</p>

<pre>
photo_image = tkinter.PhotoImage(file="demo.gif")
</pre>

<p>Podívejme se nyní na zdrojový kód příkladu, v&nbsp;němž se načte a zobrazí
několik ikon (uložených do souborů typu GIF), které jsme již využili minule při
tvorbě menu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
image_names = [
    "document-open",
    "document-save",
    "application-exit",
    "edit-undo",
    "edit-cut",
    "edit-copy",
    "edit-paste",
    "edit-delete",
    "edit-select-all"]
&nbsp;
root = tkinter.Tk()
&nbsp;
images = {}
for image_name in image_names:
    images[image_name] = tkinter.PhotoImage(file="icons/%s.gif" % image_name)
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_image((50, 50), image=images['document-open'])
canvas.create_image((150, 50), image=images['document-save'])
canvas.create_image((250, 50), image=images['application-exit'])
canvas.create_image((50, 150), image=images['edit-undo'])
canvas.create_image((150, 150), image=images['edit-cut'])
canvas.create_image((250, 150), image=images['edit-copy'])
canvas.create_image((50, 250), image=images['edit-paste'])
canvas.create_image((150, 250), image=images['edit-delete'])
canvas.create_image((250, 250), image=images['edit-select-all'])
&nbsp;
root.mainloop()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Text na canvasu</h2>

<p>Na plátno lze samozřejmě vkládat i text. Pro tento účel se používá objekt
nazvaný, jak jinak než <strong>text</strong>. Způsob vytvoření tohoto objektu
je velmi jednoduchý:</p>

<pre>
canvas.create_text(x, y, další volby)
</pre>

<p>kde se pomocí hodnot <strong>[x, y]</strong> zadává souřadnice počátku textu
(resp.&nbsp;přesněji řečeno referenční bod). Mezi nejpoužívanější volby patří
<strong>text</strong> (vlastní řetězec, který má být zobrazen),
<strong>fill</strong> (barva textu), <strong>font</strong> (specifikace fontu)
a <strong>anchor</strong> (způsob umístění textu vůči vkládacímu bodu). Řetězec
i další parametry textu lze samozřejmě při běhu aplikace měnit, ale pro
uživatelem prováděnou editaci je mnohem výhodnější používat widget
<strong>text</strong>. Ukažme si tedy poněkud složitější příklad:</p>

<pre>
canvas.create_text(x, y,
                   text="Test",
                   fill="gray",
                   anchor="ne",
                   font="Helvetica 16")
</pre>

<p>Hodnotu <strong>anchor</strong> je možné zadat řetězcem nebo předdefinovanou
konstantou:</p>

<table>
<tr><th>Řetězec</th><th>Konstanta</th><th>Význam</th></tr>
<tr><td>"center"</td><td>tkinter.CENTER</td><td>uprostřed textu (horizontálně i vertikálně)</td></tr>
<tr><td>"n"</td><td>tkinter.N</td><td>horní okraj, horizontálně vycentrováno</td></tr>
<tr><td>"s"</td><td>tkinter.S</td><td>spodní okraj, horizontálně vycentrováno</td></tr>
<tr><td>"w""</td><td>tkinter.W</td><td>vertikálně vycentrováno, horizontálně na levém konci textu</td></tr>
<tr><td>"e"</td><td>tkinter.E</td><td>vertikálně vycentrováno, horizontálně na pravém konci textu</td></tr>
<tr><td>"nw"</td><td>tkinter.NW</td><td>horní okraj, horizontálně na levém konci textu</td></tr>
<tr><td>"sw"</td><td>tkinter.SW</td><td>spodní okraj, horizontálně na levém konci textu</td></tr>
<tr><td>"ne"</td><td>tkinter.NE</td><td>horní okraj, horizontálně na pravém konci textu</td></tr>
<tr><td>"se"</td><td>tkinter.SE</td><td>spodní okraj, horizontálně na pravém konci textu</td></tr>
</table>

<p>V&nbsp;dalším demonstračním příkladu je ukázáno, jakým způsobem se používá
volba <strong>anchor</strong> pro specifikaci referenčního bodu textu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
def draw_text(canvas, x, y, anchor):
    canvas.create_text(x, y, text="Test", fill="gray", anchor=anchor,
                       font="Helvetica 16")
    canvas.create_line(x-5, y, x+5, y, fill="red")
    canvas.create_line(x, y-5, x, y+5, fill="red")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
draw_text(canvas, 50, 50, "ne")
draw_text(canvas, 150, 50, "n")
draw_text(canvas, 250, 50, "nw")
&nbsp;
draw_text(canvas, 50, 150, "e")
draw_text(canvas, 150, 150, "center")
draw_text(canvas, 250, 150, "w")
&nbsp;
draw_text(canvas, 50, 250, "se")
draw_text(canvas, 150, 250, "s")
draw_text(canvas, 250, 250, "sw")
&nbsp;
root.mainloop()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Vertikální výpis textu na canvas</h2>

<p>V&nbsp;dnešním posledním demonstračním příkladu je ukázán trik pro tvorbu
vertikálního textu (což je něco jiného než pouhá rotace, která je ovšem taktéž
podporována). Text totiž může obsahovat konce řádků, které jsou správně
interpretovány. Pokud tedy vložíme znak pro konec řádku za každé písmeno,
získáme vertikální text::</p>

<pre>
canvas.create_text(x, y,
                   <strong>text="\n".join("Test")</strong>,
                   fill="gray",
                   anchor=anchor,
                   font="Helvetica 12")
</pre>

<p>Úplný zdrojový kód dnešního posledního demonstračního příkladu vypadá
následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
def draw_text(canvas, x, y, anchor):
    canvas.create_text(x, y, text="\n".join("Test"),
                       fill="gray", anchor=anchor, font="Helvetica 12")
    canvas.create_line(x-5, y, x+5, y, fill="red")
    canvas.create_line(x, y-5, x, y+5, fill="red")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
draw_text(canvas, 50, 50, "ne")
draw_text(canvas, 150, 50, "n")
draw_text(canvas, 250, 50, "nw")
&nbsp;
draw_text(canvas, 50, 200, "e")
draw_text(canvas, 150, 200, "center")
draw_text(canvas, 250, 200, "w")
&nbsp;
draw_text(canvas, 50, 350, "se")
draw_text(canvas, 150, 350, "s")
draw_text(canvas, 250, 350, "sw")
&nbsp;
root.mainloop()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů naleznete pod
následujícími odkazy:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>67_objects_on_canvas.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/67_objects_on_canvas.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/67_objects_on_canvas.py</a></td></tr>
<tr><td>68_arc.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/68_arc.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/68_arc.py</a></td></tr>
<tr><td>69_pieslice.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/69_pieslice.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/69_pieslice.py</a></td></tr>
<tr><td>70_chord.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/70_chord.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/70_chord.py</a></td></tr>
<tr><td>71_line_styles.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/71_line_styles.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/71_line_styles.py</a></td></tr>
<tr><td>72_line_dashes.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/72_line_dashes.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/72_line_dashes.py</a></td></tr>
<tr><td>73_arrows.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/73_arrows.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/73_arrows.py</a></td></tr>
<tr><td>74_closed_entities.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/74_closed_entities.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/74_closed_entities.py</a></td></tr>
<tr><td>75_closed_entities_style.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/75_closed_entities_style.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/75_closed_entities_style.py</a></td></tr>
<tr><td>76_frame_on_canvas.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/76_frame_on_canvas.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/76_frame_on_canvas.py</a></td></tr>
<tr><td>77_frame_on_canvas2.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/77_frame_on_canvas2.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/77_frame_on_canvas2.py</a></td></tr>
<tr><td>78_bitmap_image</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/78_bitmap_image">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/78_bitmap_image</a></td></tr>
<tr><td>79_bitmap_image_setcolor.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/79_bitmap_image_setcolor.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/79_bitmap_image_setcolor.py</a></td></tr>
<tr><td>80_photo_image.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/80_photo_image.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/80_photo_image.py</a></td></tr>
<tr><td>81_text.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/81_text.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/81_text.py</a></td></tr>
<tr><td>82_vertical_text.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/82_vertical_text.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/82_vertical_text.py</a></td></tr>
</table>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

