<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba GUI v Pythonu: použití želví grafiky společně s knihovnou appJar</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba GUI v Pythonu: použití želví grafiky společně s knihovnou appJar</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Tvorba GUI v&nbsp;Pythonu: použití želví grafiky společně s&nbsp;knihovnou appJar</a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba GUI v&nbsp;Pythonu: použití želví grafiky společně s&nbsp;knihovnou appJar</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Želví grafika aneb kombinace knihoven <i>appJar</i> a <i>turtle</i></h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vytvoření a zobrazení jednoduchého obrazce vytvořeného přes modul <i>turtle</i></h2>

<p>Postup umožňující použití modulu <i>turtle</i> společně s&nbsp;knihovnou
<i>appJar</i> vychází z&nbsp;nám již známého postupu, v&nbsp;němž se používalo
kreslicí plátno knihovny <i>Tkinter</i>. Nejprve tedy vytvoříme hlavní okno
aplikace a následně na okno vložíme nové kreslicí plátno:</p>

<pre>
app = gui()
&nbsp;
canvas = tkinter.Canvas(app.topLevel, width=256, height=256)
canvas.pack()
</pre>

<p>Následně získáme &bdquo;želvu&ldquo;, ovšem nikoli voláním konstruktoru
<strong>turtle.Turtle()</strong> (tím by se vytvořilo nové okno), ale
konstruktorem <strong>turtle.RawTurtle()</strong>, kterému předáme referenci na
objekt představující plátno. Dále je již možné s&nbsp;&bdquo;želvou&ldquo;
manipulovat běžným způsobem, tj.&nbsp;skrýt její sprite, nastavit rychlost
kreslení (0=nejvyšší rychlost :-) či barvu vykreslované křivky:</p>

<pre>
t = turtle.RawTurtle(canvas)
&nbsp;
t.hideturtle()
t.speed(0)
t.pencolor("green")
</pre>

<p>Nakreslíme nějaký jednodušší obrazec, přitom nám postačí příkazy
<strong>forward</strong> a <strong>right</strong>:</p>

<pre>
side = 0
angle = 117
&nbsp;
for _ in range(160):
    t.forward(side)
    t.right(angle)
    side += 1
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. První demonstrační příklad</h2>

<p>Úplný kód dnešního prvního demonstračního příkladu, v&nbsp;němž se používá
želví grafika, vypadá takto:</p>

<pre>
#!/usr/bin/env python
&nbsp;
from appJar import gui
import tkinter
import turtle
&nbsp;
&nbsp;
app = gui()
&nbsp;
&nbsp;
def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()
&nbsp;
&nbsp;
app.setSticky("news")
&nbsp;
fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
&nbsp;
canvas = tkinter.Canvas(app.topLevel, width=256, height=256)
canvas.pack()
&nbsp;
t = turtle.RawTurtle(canvas)
&nbsp;
t.hideturtle()
t.speed(0)
t.pencolor("green")
&nbsp;
t.home()
t.pd()
&nbsp;
side = 0
angle = 117
&nbsp;
for _ in range(160):
    t.forward(side)
    t.right(angle)
    side += 1
&nbsp;
app.go()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Urychlení vykreslování &ndash; obnovení obsahu plátna až po 100 operacích</h2>

<pre>
#!/usr/bin/env python

from appJar import gui
import tkinter
import turtle


app = gui()


def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()


app.setSticky("news")

fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)

canvas = tkinter.Canvas(app.topLevel, width=256, height=256)
canvas.pack()

screen = turtle.TurtleScreen(canvas)
t = turtle.RawTurtle(screen)
screen.tracer(100, 0)

t.hideturtle()
t.speed(0)
t.pencolor("green")

t.home()
t.pd()

side = 0
angle = 117

for _ in range(160):
    t.forward(side)
    t.right(angle)
    side += 1

app.go()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Explicitní obnovení obrazovky na konci kreslení</h2>

<pre>
#!/usr/bin/env python

from appJar import gui
import tkinter
import turtle


app = gui()


def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()


app.setSticky("news")

fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)

canvas = tkinter.Canvas(app.topLevel, width=256, height=256)
canvas.pack()

screen = turtle.TurtleScreen(canvas)
t = turtle.RawTurtle(screen)
screen.tracer(100, 0)

t.hideturtle()
t.speed(0)
t.pencolor("green")

t.home()
t.pd()

side = 0
angle = 117

for _ in range(160):
    t.forward(side)
    t.right(angle)
    side += 1

screen.update()

app.go()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
#!/usr/bin/env python

from appJar import gui
import tkinter
import turtle


app = gui()


def setupTurtle(canvas):
    screen = turtle.TurtleScreen(canvas)
    t = turtle.RawTurtle(screen)
    screen.tracer(100, 0)

    t.hideturtle()
    t.speed(0)

    t.home()
    t.pd()
    return t, screen


def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()


app.setSticky("news")

fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)

canvas = tkinter.Canvas(app.topLevel, width=600, height=600)
canvas.pack()

t, screen = setupTurtle(canvas)

t.hideturtle()
t.speed(0)
t.pencolor("green")

t.home()
t.pd()

screen.colormode(255)

r = 0
g = 0
b = 0
rd = 1

for i in range(72):
    t.left(5)
    for j in range(10):
        t.left(36)
        t.forward(80)
        for k in range(3):
            r += rd
            if r > 255 or r < 0:
                b += 10
                g += 10
                rd = -rd
                r += rd
            t.pencolor((r, g, b))
            t.forward(30)
            t.left(120)

screen.update()

app.go()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Použití rekurze pro vykreslení sněhové vločky Helge von Kocha</h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8

from appJar import gui
import tkinter
import turtle
from math import *


app = gui()


def setupTurtle(canvas):
    screen = turtle.TurtleScreen(canvas)
    t = turtle.RawTurtle(screen)
    screen.tracer(100, 0)

    t.hideturtle()
    t.speed(0)

    t.home()
    t.pd()
    return t, screen


def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()


def kochCurve(t, length, iter):
    if iter > 1:
        kochCurve(t, length/3, iter-1)
        t.right(60)
        kochCurve(t, length/3, iter-1)
        t.left(120)
        kochCurve(t, length/3, iter-1)
        t.right(60)
        kochCurve(t, length/3, iter-1)
    else:
        t.forward(length)


def kochSnowflake(t, iter):
    for _ in range(3):
        kochCurve(t, 200, iter)
        t.left(120)


def prepareTurtle(t):
    t.home()
    t.goto(-100, -60)
    t.clear()


def onKochSnowflakeSelect(command):
    prepareTurtle(t)
    t.pencolor("blue")

    iter = int(command[0])
    kochSnowflake(t, iter)
    screen.update()


def onKochCombinationSelect(command):
    prepareTurtle(t)

    colors = ["red", "orange", "blue", "brown"]
    for i in range(4):
        t.pencolor(colors[i])
        kochSnowflake(t, i+1)

    screen.update()


app.setSticky("news")

fileMenu = ["Quit"]
kochMenu = ["1 iterarion", "2 iterations", "3 iterations",
            "4 iterations", "5 iterations"]
specialMenu = ["Combine snowflakes"]

app.addMenuList("File", fileMenu, onMenuItemSelect)
app.addMenuList("Koch Snowflake", kochMenu, onKochSnowflakeSelect)
app.addMenuItem("Special", "Combine snowflakes", onKochCombinationSelect)

canvas = tkinter.Canvas(app.topLevel, width=256, height=256)
canvas.pack()

t, screen = setupTurtle(canvas)

app.go()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Rekurzivní kreslení domečku aneb Pythagorův strom</h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8

from appJar import gui
import math
import tkinter
import turtle


app = gui()


def setupTurtle(canvas):
    screen = turtle.TurtleScreen(canvas)
    t = turtle.RawTurtle(screen)
    screen.tracer(100, 0)

    t.hideturtle()
    t.speed(0)

    t.home()
    t.pd()
    return t, screen


def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()


def onDrawMenuSelect(menuItem):
    allParams = {
        "Tree": (-50, -150, 100, 45),
        "Bush": (40, -100, 80, 35),
        "Spiral": (-200, -150, 50, 70),
        "Spiral2": (-220, -50, 40, 80),
        "Spiral3": (-300, -50, 30, 85)
    }

    params = allParams[menuItem]

    t.hideturtle()
    t.speed(0)
    t.pencolor("gray")

    t.goto(params[0], params[1])
    t.pd()
    t.clear()

    house(params[2], params[3])
    screen.update()


def house(side, angle):
    if side > 4:
        # základna
        t.forward(side)
        # úhlopříčka
        t.left(90+45)
        t.forward(side*math.sqrt(2))
        # stěna
        t.left(90+45)
        t.forward(side)
        # úhlopříčka
        t.left(90+45)
        t.forward(side*math.sqrt(2))
        # úsečka pod střechou
        t.left(90+45)
        t.forward(side)
        # první část střechy
        t.right(90)
        t.right(90-angle)
        # původní příkaz: domek side/sqrt 2 :uhel
        house(side*math.cos(math.radians(angle)), angle)
        # druhá část střechy
        t.right(90)
        # původní příkaz: domek side/sqrt 2 :uhel
        house(side*math.sin(math.radians(angle)), angle)
        # zbývající stěna
        t.right(angle)
        t.forward(side)
        t.left(90)
    else:
        t.forward(side)


app.setSticky("news")

fileMenu = ["Quit"]
app.addMenuList("File", fileMenu, onMenuItemSelect)

drawMenu = ["Tree", "Bush", "Spiral", "Spiral2", "Spiral3"]
app.addMenuList("Draw", drawMenu, onDrawMenuSelect)

canvas = tkinter.Canvas(app.topLevel, width=600, height=600)
canvas.pack()

t, screen = setupTurtle(canvas)

app.go()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
#!/usr/bin/env python

from appJar import gui
import tkinter
import turtle
from math import *


app = gui()


def setupTurtle(canvas):
    screen = turtle.TurtleScreen(canvas)
    t = turtle.RawTurtle(screen)
    screen.tracer(100, 0)

    t.hideturtle()
    t.speed(0)

    t.home()
    t.pd()
    return t, screen


def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()


def spiral(t, color, angle, maxiter):
    t.home()
    t.clear()
    t.pencolor(color)
    side = 0

    for _ in range(maxiter):
        t.forward(side)
        t.right(angle)
        side += 1


def kochCurve(t, length, limit):
    if length > limit:
        kochCurve(t, length/3, limit)
        t.right(60)
        kochCurve(t, length/3, limit)
        t.left(120)
        kochCurve(t, length/3, limit)
        t.right(60)
        kochCurve(t, length/3, limit)
    else:
        t.forward(length)


def kochSnowflake(t, limit):
    t.home()
    t.goto(-70, -70)
    t.clear()
    t.pencolor("blue")

    for _ in range(3):
        kochCurve(t, 150, limit)
        t.left(120)


def pentagon(t):
    for _ in range(5):
        t.forward(70)
        t.right(72)


def wheel(t):
    t.home()
    t.clear()
    t.pencolor("brown")
    for _ in range(36):
        pentagon(t)
        t.left(10)


def onTurtleCommandSelect(command):
    if command == "Spiral 1":
        spiral(t, "green", 117, 160)
    elif command == "Spiral 2":
        spiral(t, "#404080", 119, 182)
    elif command == "Spiral 3":
        spiral(t, "#804040", 88, 200)
    elif command == "Koch snowflake 1":
        kochSnowflake(t, 20)
    elif command == "Koch snowflake 2":
        kochSnowflake(t, 10)
    elif command == "Koch snowflake 3":
        kochSnowflake(t, 5)
    elif command == "Wheel":
        wheel(t)
    screen.update()


app.setSticky("news")

fileMenu = ["Quit"]
turtleMenu = ["Spiral 1", "Spiral 2", "Spiral 3",
              "Koch snowflake 1", "Koch snowflake 2", "Koch snowflake 3",
              "Wheel"]
app.addMenuList("File", fileMenu, onMenuItemSelect)
app.addMenuList("Turtle", turtleMenu, onTurtleCommandSelect)

canvas = tkinter.Canvas(app.topLevel, width=256, height=256)
canvas.pack()

t, screen = setupTurtle(canvas)

app.go()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Příkaz <strong>goto</strong> a jeho využití při kreslení na absolutní souřadnice plátna</h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Fresnelův fraktál</h2>

<pre>
#!/usr/bin/env python

from appJar import gui
import tkinter
import turtle
from math import *


app = gui()


def setupTurtle(canvas):
    screen = turtle.TurtleScreen(canvas)
    t = turtle.RawTurtle(screen)
    screen.tracer(100, 0)

    t.hideturtle()
    t.speed(0)

    t.home()
    t.pd()
    return t, screen


def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()


def drawFresnel():
    global progressBarValue

    x = 0.0
    y = 0.0
    f = 0.0

    for i in range(maxiter+1):
        progressBarValue = 100.0 * i / maxiter
        f += fstep
        x += cos(f * f)
        y += sin(f * f)
        t.goto(scale*x, scale*y)

    screen.update()


def updateMeter():
    app.setMeter("progressBar", progressBarValue)


def onFresnelDraw(command):
    t.home()
    t.clear()
    drawFresnel()


def onMaxiterChange(widgetName):
    global maxiter
    value = app.getScale(widgetName)
    maxiter = int(value)


def onScaleChange(widgetName):
    global scale
    value = app.getScale(widgetName)
    scale = float(value)


def onFValueChange(widgetName):
    global fstep
    value = app.getScale(widgetName)
    fstep = float(value)/100.0


def createGui(app):
    fileMenu = ["Quit"]

    app.addMenuList("File", fileMenu, onMenuItemSelect)

    app.addLabel("maxiter-label", "Maxiter", row=0, column=0)
    app.addScale("maxiter", row=0, column=1, colspan=2)
    app.showScaleIntervals("maxiter", 1000)
    app.showScaleValue("maxiter")
    app.setScaleRange("maxiter", 0, 5000, 1000)
    app.setScaleChangeFunction("maxiter", onMaxiterChange)

    app.addLabel("scale-label", "Scale", row=1, column=0)
    app.addScale("scale", row=1, column=1, colspan=2)
    app.showScaleIntervals("scale", 1)
    app.showScaleValue("scale")
    app.setScaleRange("scale", 1, 10, 4)
    app.setScaleChangeFunction("scale", onScaleChange)

    app.addLabel("f-value-label", "F-value", row=2, column=0)
    app.addScale("f-value", row=2, column=1, colspan=2)
    app.showScaleIntervals("f-value", 10)
    app.showScaleValue("f-value")
    app.setScaleRange("f-value", 0, 100, 20)
    app.setScaleChangeFunction("f-value", onFValueChange)

    app.addMeter("progressBar", row=3, column=0, colspan=2)
    app.setMeterFill("progressBar", "green")

    app.addButton("Draw", onFresnelDraw, row=3, column=2)

    app.registerEvent(updateMeter)


progressBarValue = 0
scale = 4.0
maxiter = 1000
fstep = 0.2

app.setSticky("news")

createGui(app)

canvas = tkinter.Canvas(app.topLevel, width=500, height=500)
canvas.pack()
t, screen = setupTurtle(canvas)

app.go()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Systémy iterovaných funkcí (IFS)</h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Vykreslení jednoduchého systému iterovaných funkcí krok za krokem</h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Zdrojový kód příkladu pro vykreslení IFS</h2>

<pre>
#!/usr/bin/env python

from appJar import gui
import tkinter
import turtle
import sys
from random import random


app = gui()


ifs = (
    (+0.85000, +0.04000, -0.04000, +0.85000, +0.00000, +1.60000, +0.85000),
    (+0.20000, -0.26000, +0.23000, +0.22000, +0.00000, +1.60000, +0.07000),
    (-0.15000, +0.28000, +0.26000, +0.24000, +0.00000, +0.44000, +0.07000),
    (+0.00000, +0.00000, +0.00000, +0.16000, +0.00000, +0.00000, +0.01000),
    (+1.00000, +0.00000, +0.00000, +1.00000, +0.00000, +0.00000, +1.00000))


def setupTurtle(canvas):
    screen = turtle.TurtleScreen(canvas)
    t = turtle.RawTurtle(screen)
    screen.tracer(100, 0)

    t.hideturtle()
    t.speed(0)

    t.home()
    t.pu()
    return t, screen


def onMenuItemSelect(menuItem):
    if menuItem == "Quit":
        app.stop()


def onIFSItemSelect(menuItem):
    global ifs
    ifs = ifs_systems[menuItem]


def drawIFS(ifs):
    global progressBarValue
    start_iter = 100

    # generovane souradnice
    x1 = 0
    y1 = 0

    dy = 220
    scale = 45

    for i in range(maxiter+1):
        progressBarValue = 100.0 * i / maxiter

        # nahodne vybrat transformaci
        pp = random()
        sum = 0
        k = 0
        while sum <= pp:
            sum += ifs[k][6]
            k += 1
        k -= 1

        # aplikovat transformaci
        x2 = x1*ifs[k][0] + y1*ifs[k][1] + ifs[k][4]
        y2 = x1*ifs[k][2] + y1*ifs[k][3] + ifs[k][5]
        x1 = x2
        y1 = y2

        # pokud byl prekrocen pocet startovnich iteraci
        if i > start_iter:
            x2 = x1 * scale
            y2 = y1 * scale - dy
            t.goto(x2, y2)
            t.dot(1)

    screen.update()


def updateMeter():
    app.setMeter("progressBar", progressBarValue)


def onIFSDraw(command):
    t.home()
    t.clear()
    drawIFS(ifs)


def onMaxiterChange(widgetName):
    global maxiter
    value = app.getScale(widgetName)
    maxiter = int(value)


def createGui(app):
    fileMenu = ["Quit"]

    app.addMenuList("File", fileMenu, onMenuItemSelect)

    app.addLabel("maxiter-label", "Maxiter", row=0, column=0)
    app.addScale("maxiter", row=0, column=1, colspan=2)
    app.showScaleIntervals("maxiter", 5000)
    app.showScaleValue("maxiter")
    app.setScaleRange("maxiter", 0, 25000, 5000)
    app.setScaleChangeFunction("maxiter", onMaxiterChange)

    app.addMeter("progressBar", row=3, column=0, colspan=2)
    app.setMeterFill("progressBar", "green")

    app.addButton("Draw", onIFSDraw, row=3, column=2)

    app.registerEvent(updateMeter)


progressBarValue = 0
maxiter = 5000

app.setSticky("news")

createGui(app)

canvas = tkinter.Canvas(app.topLevel, width=500, height=500)
canvas.pack()
t, screen = setupTurtle(canvas)

app.go()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Galerie IFS</h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Demonstrační příklad: výběr a vykreslení vybraného IFS</h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech desíti dnes popsaných demonstračních příkladů byly opět
uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>78_turtle1.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/78_turtle1.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/78_turtle1.py</a></td></tr>
<tr><td>79_turtle1_speedup.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/79_turtle1_speedup.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/79_turtle1_speedup.py</a></td></tr>
<tr><td>80_turtle1_speedup_update.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/80_turtle1_speedup_update.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/80_turtle1_speedup_update.py</a></td></tr>
<tr><td>81_turtle2.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/81_turtle2.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/81_turtle2.py</a></td></tr>
<tr><td>82_koch_snoflake.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/82_koch_snoflake.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/82_koch_snoflake.py</a></td></tr>
<tr><td>83_pythagoras_tree.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/83_pythagoras_tree.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/83_pythagoras_tree.py</a></td></tr>
<tr><td>84_turtle_demo.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/84_turtle_demo.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/84_turtle_demo.py</a></td></tr>
<tr><td>85_fresnel_integral.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/85_fresnel_integral.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/85_fresnel_integral.py</a></td></tr>
<tr><td>86_ifs.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/86_ifs.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/86_ifs.py</a></td></tr>
<tr><td>87_ifs_demo.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/87_ifs_demo.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/appJar/87_ifs_demo.py</a></td></tr>
</table>

<p>Poznámka: pro úspěšné spuštění těchto příkladů musíte mít v&nbsp;aktuálním
adresáři rozbalenou knihovnu <i>appJar</i>!. Podrobnosti o instalaci jsme si
řekli <a
href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-appjar/">v&nbsp;úvodním
článku</a>.</p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

