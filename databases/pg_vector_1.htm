<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>pgvector - vektorová databáze postavená na Postgresu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>pgvector - vektorová databáze postavená na Postgresu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dnes se seznámíme se základními vlastnosti rozšíření Postgresu, které se jmenuje pgvector. Toto rozšíření umožňuje používat Postgres (PostgreSQL) ve funkci vektorové databáze, například při zpracování přirozeného jazyka, rozpoznávání obrázků, detekci anomálií atd.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. pgvector &ndash; vektorová databáze postavená na Postgresu</a></p>
<p><a href="#k02">2. Instalace rozšíření <i>pgvector</i></a></p>
<p><a href="#k03">3. Registrace rozšíření <i>pgvector</i></a></p>
<p><a href="#k04">4. Vytvoření tabulky pro 3D vektory</a></p>
<p><a href="#k05">5. Operace zápisu a čtení 3D vektorů</a></p>
<p><a href="#k06">6. Tabulka pro uložení 2D vektorů: základ pro další demonstrační příklady</a></p>
<p><a href="#k07">7. Vizualizace výpočtů vzdáleností pro 2D vektory</a></p>
<p><a href="#k08">8. Výběry vektorů na základě jejich podobnosti</a></p>
<p><a href="#k09">9. L2 metrika pro nalezení podobných vektorů v&nbsp;klauzuli <strong>ORDER BY</strong></a></p>
<p><a href="#k10">10. L2 metrika pro nalezení podobných vektorů v&nbsp;klauzuli <strong>WHERE</strong></a></p>
<p><a href="#k11">11. Další metriky podporované rozšířením <strong>pgvector</strong></a></p>
<p><a href="#k12">12. Zpracování normalizovaných vektorů</a></p>
<p><a href="#k13">13. Využití rozšíření <strong>pgvector</strong> z&nbsp;jazyka Python</a></p>
<p><a href="#k14">14. Registrace rozšíření <strong>pgvector</strong> z&nbsp;Pythonu</a></p>
<p><a href="#k15">15. Zápis nových záznamů obsahujících vektory</a></p>
<p><a href="#k16">16. Dotazy vracející vektory</a></p>
<p><a href="#k17">17. Výběr vektorů na základě jejich podobnosti</a></p>
<p><a href="#k18">18. Použití různých metrik na nenormalizované i normalizované vektory</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. pgvector &ndash; vektorová databáze postavená na Postgresu</h2>

<p>V&nbsp;současnosti můžeme sledovat poměrně výrazné a stále častější
nasazování vektorových databází. Jedná se (většinou) o specializované databáze,
které umožňují ukládat vektory numerických hodnot a především efektivně
vyhledávat vektory podle jejich podobnosti (například se zadaným vzorem),
přičemž podobností může být myšlena například vzdálenost koncových bodů vektorů
v&nbsp;Eukleidovském prostoru, kosinus úhlu mezi vektory, výsledek skalárního
součinu atd. Tyto operace se používají v&nbsp;mnoha oblastech, například při
rozpoznávání a zpracování přirozeného jazyka (NLP), při rozpoznávání obrázků,
rozpoznávání hlasů, detekci anomálií, ale i (a to zejména) v&nbsp;souvislosti
s&nbsp;velkými jazykovými modely (k&nbsp;tomuto tématu se ještě vrátíme
v&nbsp;samostatném článku).</p>

<p>Ovšem namísto specializovaných databází je možné zvolit technologii, která
se osvědčuje už desítky let. Jedná se o relační databázi PostgreSQL, pro niž
vzniklo rozšíření nazvané <i>pgvector</i>. Toto rozšíření umožňuje efektivní
ukládání vektorů do tabulek, ale zejména podporuje i vyhledávání vektorů na
základě jejich podobnosti. Dnes si ukážeme zcela základní operace podporované
rozšířením <i>pgvector</i> i práci s&nbsp;vektory z&nbsp;Pythonu (tedy volání
příkazů Postgresu z&nbsp;Pythonu přes balíček <strong>psycopg2</strong>).
Příště si ukážeme pokročilejší operace, především způsob práce s&nbsp;indexy,
které mají u tabulek s&nbsp;vektory poněkud specifický význam.</p>

<p>Příště si taktéž ukážeme, jak se pracuje s&nbsp;hodnotami typu <i>half
float</i>, které jsou užitečné, protože umožňují pracovat s&nbsp;vektory o
délce přibližně 4000 prvků i v&nbsp;rámci jediného osmikilobajtového bloku
Postgresu (a mnohé LLM využívají poměrně dlouhé vektory).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace rozšíření <i>pgvector</i></h2>

<p>Před vytvořením tabulky umožňující uložení vektorů je nutné si nainstalovat
a zaregistrovat rozšíření <i>pgvector</i> (předpokladem je, že samotný
PostgreSQL máte nainstalován). V&nbsp;tom nejjednodušším případě bude toto
rozšíření dostupné ve formě standardního balíčku vaší distribuce Linuxu.
Instalace je snadná, například:</p>

<pre>
$ <strong>sudo dnf install pgvector_17</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto případě 17 odpovídá verzi
Postgresu, kterou zjistíte například příkazem:</div></p>

<pre>
$ <strong>postgres --version</strong>
</pre>

<p>Ovšem instalaci lze provést i z&nbsp;repositáře samotného Postgresu.
Například pro ekosystém RPM jsou příslušné balíčky dostupné na stránce <a
href="https://yum.postgresql.org/">https://yum.postgresql.org/</a>. Repositář
je nutné nejprve přidat do seznamu aktivních repositářů a poté provést běžnou
instalaci</p>

<p>Alternativně si můžeme rozšíření sami přeložit a nainstalovat postupem,
který je popsaný <a
href="https://github.com/pgvector/pgvector?tab=readme-ov-file#linux-and-mac">zde</a>:</p>

<pre>
cd /tmp
git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git
cd pgvector
make
make install
</pre>

<p>Po instalaci je vhodné pro jistotu zjistit, jaké soubory se vlastně
nainstalovaly a do jakého místa. Rozšíření <i>pgvector</i> obsahuje jednu
dynamickou knihovnu, několik SQL souborů a konfigurační soubor. Najděme
nejdříve dynamickou knihovnu s&nbsp;tímto rozšířením. Její umístění zjistíme
takto:</p>

<pre>
$ <strong>pg_config --pkglibdir</strong>
&nbsp;
/usr/lib64/pgsql
</pre>

<p>Zjistíme obsah tohoto adresáře:</p>

<pre>
$ <strong>ls -l `pg_config --pkglibdir`</strong>
&nbsp;
...
...
...
-rwxr-xr-x. 1 root root  15248 Feb 26  2024 utf8_and_iso8859_1.so
-rwxr-xr-x. 1 root root  35736 Feb 26  2024 utf8_and_iso8859.so
-rwxr-xr-x. 1 root root 174992 Feb 26  2024 utf8_and_johab.so
-rwxr-xr-x. 1 root root 142192 Feb 26  2024 utf8_and_sjis2004.so
-rwxr-xr-x. 1 root root  97160 Feb 26  2024 utf8_and_sjis.so
-rwxr-xr-x. 1 root root 179088 Feb 26  2024 utf8_and_uhc.so
-rwxr-xr-x. 1 root root  39800 Feb 26  2024 utf8_and_win.so
-rwxr-xr-x. 1 root root  15568 Feb 26  2024 uuid-ossp.so
<u>-rwxr-xr-x. 1 root root 119528 Apr  3  2024 vector.so</u>
</pre>

<p>Prakticky celé rozšíření <i>pgvector</i> je tedy realizováno
v&nbsp;knihovně, jejíž velikost je přibližně 115 kB (to není na dnešní poměry
mnoho).</p>

<p>Další soubory, které jsou nainstalovány, budou umístěny do adresáře:</p>

<pre>
$ <strong>pg_config --sharedir</strong>
&nbsp;
/usr/share/pgsql
</pre>

<p>Opět se podívejme na jeho obsah (zkráceno):</p>

<pre>
$ <strong>ls -1 `pg_config --sharedir`/extension</strong>
&nbsp;
vector--0.4.1--0.4.2.sql
vector--0.4.2--0.4.3.sql
vector--0.4.3--0.4.4.sql
vector--0.4.4--0.5.0.sql
vector--0.5.0--0.5.1.sql
vector--0.5.1--0.6.0.sql
vector--0.6.0--0.6.1.sql
vector--0.6.1--0.6.2.sql
vector--0.6.2.sql
vector.control
xml2--1.0--1.1.sql
xml2--1.1.sql
xml2.control
</pre>

<p>Všechny soubory <strong>vector*.sql</strong> patří do rozšíření
<i>pgvector</i>.</p>

<p>Zbývá nám konfigurační soubor, jehož obsah si vypíšeme takto:</p>

<pre>
$ <strong>cat `pg_config --sharedir`/extension/vector.control</strong>
&nbsp;
comment = 'vector data type and ivfflat and hnsw access methods'
default_version = '0.6.2'
module_pathname = '$libdir/vector'
relocatable = true
</pre>

<p>Do tohoto souboru přidejte řádek <strong>trusted = true</strong>, takže jeho
nový obsah bude:</p>

<pre>
$ <strong>cat `pg_config --sharedir`/extension/vector.control</strong>
&nbsp;
comment = 'vector data type and ivfflat and hnsw access methods'
default_version = '0.6.2'
module_pathname = '$libdir/vector'
relocatable = true
trusted = true
</pre>

<p><div class="rs-tip-major">Poznámka: pokud tento řádek nepřidáte, nebude
možné rozšíření <i>pgvector</i> aktivovat pro další uživatele
databáze.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Registrace rozšíření <i>pgvector</i></h2>

<p>Posledním krokem, který je nutné udělat před založením
&bdquo;vektorové&ldquo; tabulky, je registrace rozšíření pro uživatele, který
je přihlášen přes <strong>psql</strong> (ale i s&nbsp;využitím dalších
klientů). Tato registrace probíhá příkazem <strong>CREATE</strong> (což může
být poněkud matoucí):</p>

<pre>
test=&gt; <strong>CREATE EXTENSION IF NOT EXISTS vector;</strong>
</pre>

<p>To, zda je rozšíření zaregistrováno, zjistíme takto:</p>

<pre>
test=&gt; <strong>\dx</strong>
                             List of installed extensions
  Name   | Version |   Schema   |                     Description                      
---------+---------+------------+------------------------------------------------------
 plpgsql | 1.0     | pg_catalog | PL/pgSQL procedural language
 vector  | 0.6.2   | public     | vector data type and ivfflat and hnsw access methods
(2 rows)
</pre>

<p><div class="rs-tip-major">Poznámka: existují i další způsoby zjištění,
jestli se <i>pgvector</i> používá, ale <strong>\dx</strong> je
nejjednodušší.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vytvoření tabulky pro 3D vektory</h2>

<p>V&nbsp;tomto okamžiku již můžeme v&nbsp;tabulkách použít pro vybrané sloupce
typ <i>vector</i>. Vyzkoušejme si to na jednoduchém příkladu; konkrétně na
tabulce nazvané <strong>v3</strong>, která bude obsahovat sloupec
<strong>id</strong> s&nbsp;jednoznačným identifikátorem (primární klíč) a další
sloupec <strong>embedding</strong> s&nbsp;třídimenzionálními vektory,
tj.&nbsp;vektory obsahujícími tři prvky. Takovou tabulku lze vytvořit
následujícím příkazem:</p>

<pre>
test=&gt; <strong>CREATE TABLE v3 (id bigserial PRIMARY KEY, embedding vector(3));</strong>
&nbsp;
CREATE TABLE
</pre>

<p>Vypíšeme si všechny tabulky, které byly vytvořeny a do kterých je možné
přistupovat:</p>

<pre>
test=&gt; <strong>\dt</strong>
&nbsp;
           List of relations
 Schema |     Name     | Type  | Owner
--------+--------------+-------+--------
 public | v3           | table | tester
(1 row)
</pre>

<p>Výpis struktury (schématu) právě vytvořené tabulky <strong>v3</strong>:</p>

<pre>
test=&gt; <strong>\d+ v3</strong>
&nbsp;
                                                          Table "public.v3"
  Column   |   Type    | Collation | Nullable |            Default             | Storage  | Compression | Stats target | Description
-----------+-----------+-----------+----------+--------------------------------+----------+-------------+--------------+-------------
 id        | bigint    |           | not null | nextval('v3_id_seq'::regclass) | plain    |             |              |
 embedding | vector(3) |           |          |                                | external |             |              |
Indexes:
    "v3_pkey" PRIMARY KEY, btree (id)
Access method: heap
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že je prozatím vytvořen
pouze jediný index umožňující rychlý výběr záznamů na základě zadaného
primárního klíče. To je v&nbsp;praxi nedostačující; podrobnosti si vysvětlíme
příště.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Operace zápisu a čtení 3D vektorů</h2>

<p>Pro zápis nových záznamů do tabulky <strong>v3</strong> je nutné nějakým
způsobem specifikovat i zapisované vektory. Musí se jednat o trojice hodnot
(pro jednoduchost předpokládejme, že se prozatím bude jednat o trojici celých
čísel). Taková trojice se zapíše do řetězce (!) s&nbsp;tímto formátem:</p>

<pre>
'[hodnota1, hodnota2, hodnota3]'
</pre>

<p>Můžeme si to otestovat na příkazu <strong>INSERT</strong>, kterým do tabulky
vložíme čtyři vektory. V&nbsp;příkazu jsou specifikovány pouze hodnoty ukládané
do sloupce <strong>embedding</strong>; zápis jednoznačných identifikátorů do
sloupce <strong>id</strong> ponecháme na databázi:</p>

<pre>
test=&gt; <strong>INSERT INTO v3 (embedding) VALUES ('[1,2,3]'), ('[1,2,2]'), ('[4,5,6]'), ('[5, 5, 5]');</strong>
&nbsp;
INSERT 0 4
</pre>

<p>V&nbsp;dalším kroku se přesvědčíme, že do tabulky skutečně byly vloženy
čtyři záznamy:</p>

<pre>
test=&gt; <strong>SELECT * FROM v3;</strong>
&nbsp;
 id | embedding
----+-----------
  1 | [1,2,3]
  2 | [1,2,2]
  3 | [4,5,6]
  4 | [5,5,5]
(4 rows)
</pre>

<p>Výpis hodnot pouze ze sloupce obsahující vektory:</p>

<pre>
test=&gt; <strong>SELECT embedding FROM v3;</strong>
&nbsp;
 embedding
-----------
 [1,2,3]
 [1,2,2]
 [4,5,6]
 [5,5,5]
(4 rows)
</pre>

<p>K&nbsp;dispozici jsou i všechny další klauzule podporované dotazem <strong>SELECT</strong>, například:</p>

<pre>
test=&gt; <strong>SELECT * FROM v3 LIMIT 1;</strong>
&nbsp;
 id | embedding 
----+-----------
  1 | [1,2,3]
(1 row)
&nbsp;
&nbsp;
&nbsp;
test=&gt; <strong>select * from v3 order by id desc;</strong>
 id | embedding 
----+-----------
  4 | [5,5,5]
  3 | [4,5,6]
  2 | [1,2,2]
  1 | [1,2,3]
(4 rows)
</pre>

<p>Ovšem navíc jsou k&nbsp;dispozici i speciální operátory určené pro zápis
podmínek na základě vzdálenosti (resp.&nbsp;přesněji řečeno podobnosti)
vektorů. Tomuto tématu se budeme podrobněji věnovat v&nbsp;navazujících
kapitolách, protože se jedná o jednu z&nbsp;nejdůležitějších vlastností
rozšíření <strong>pgvector</strong>.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Tabulka pro uložení 2D vektorů: základ pro další demonstrační příklady</h2>

<p>Jeden z&nbsp;důvodů, proč vektorové databáze existují, je požadavek na
nalezení podobných vektorů na základě zvolené metriky (těch se používá hned
několik, jak si ostatně řekneme v&nbsp;dalším textu). Pro ilustraci, jakým
způsobem se vlastně podobné vektory hledají, si vytvoříme tabulky, do které
budou uloženy dvoudimenzionální vektory, tj.&nbsp;pouze dvojice numerických
hodnot. Takové vektory lze snadno vizualizovat v&nbsp;rovině.</p>

<p>Tabulka se bude jmenovat <strong>v2</strong> a bude obsahovat dvojici
sloupců &ndash; jednoznačný identifikátor (a současně i primární klíč) a 2D
vektor:</p>

<pre>
test=&gt; <strong>CREATE TABLE v2 (id bigserial PRIMARY KEY, embedding vector(2));</strong>
CREATE TABLE
</pre>

<p>Následně do této tabulky vložíme patnáct záznamů. Nemusíme přitom volat
příkaz <strong>INSERT</strong> patnáctkrát, protože v&nbsp;rámci jednoho
příkazu lze do tabulky vložit větší množství záznamů:</p>

<pre>
test=&gt; <strong>INSERT INTO v2 (embedding) VALUES ('[-5,  5]'), ('[-4,  3]'), ('[-3,  5]');</strong>
test=&gt; <strong>INSERT INTO v2 (embedding) VALUES ('[ 3, -5]'), ('[ 4, -3]'), ('[ 5, -5]');</strong>
test=&gt; <strong>INSERT INTO v2 (embedding) VALUES ('[ 3,  3]'), ('[ 3,  4]'), ('[ 3,  5]');</strong>
test=&gt; <strong>INSERT INTO v2 (embedding) VALUES ('[ 4,  3]'), ('[ 4,  4]'), ('[ 4,  5]');</strong>
test=&gt; <strong>INSERT INTO v2 (embedding) VALUES ('[ 5,  3]'), ('[ 5,  4]'), ('[ 5,  5]');</strong>
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vizualizace výpočtů vzdáleností pro 2D vektory</h2>

<p>Tabulka s&nbsp;dvoudimenzionálními vektory nám poměrně dobře poslouží pro
popis nových operátorů, které byly do databáze PostgreSQL přidány
v&nbsp;rozšíření <strong>pgvector</strong>. Nejprve si vypišme obsah této
tabulky. Není to nic těžkého:</p>

<pre>
test=&gt; <strong>SELECT * FROM v2;</strong>
&nbsp;
 id | embedding
----+-----------
  1 | [-5,5]
  2 | [-4,3]
  3 | [-3,5]
  4 | [3,-5]
  5 | [4,-3]
  6 | [5,-5]
  7 | [3,3]
  8 | [3,4]
  9 | [3,5]
 10 | [4,3]
 11 | [4,4]
 12 | [4,5]
 13 | [5,3]
 14 | [5,4]
 15 | [5,5]
(15 rows)
</pre>

<p>Na 2D vektory se můžeme (i když to není zcela přesné) dívat jako na koncové
souřadnice orientovaných šipek vycházejících z&nbsp;počátku kartézské soustavy
souřadnic. V&nbsp;případě, že si tyto souřadnice vykreslíme, získáme
následující graf (do kterého jsem doplnil numerické souřadnice u vybraných
koncových bodů):</p>

<pre>
                                       │ y
                                       │
                                       │
                                       │
                                       │                [5,5]
                     o       o         │          o   o   o
                                       │          o   o   o
                         o             │          o   o   o
                      [-4, 3]          │
                                       │
─────────────────────────────────────[0,0]──────────────────────────────────────
                                       │                                       x
                                       │              o
                                       │
                                       │          o       o
                                       │                [5,-5]
                                       │
                                       │
                                       │
                                       │
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Výběry vektorů na základě jejich podobnosti</h2>

<p>Nyní se dostáváme k&nbsp;velmi důležité vlastnosti rozšíření
<i>pgvector</i>. V&nbsp;rámci tohoto rozšíření je totiž umožněno
v&nbsp;podmínkách v&nbsp;příkazech <strong>SELECT</strong>,
<strong>DELETE</strong> a <strong>UPDATE</strong> použít nové operátory. Jeden
z&nbsp;těchto operátorů se zapisuje těmito znaky:</p>

<pre>
&lt;-&gt;
</pre>

<p>Tento operátor dokáže porovnat dvojici vektorů na základě jejich
vzdálenosti, přičemž se pro výpočet vzdálenosti používá klasická Eukleidovská
metrika, které zjistí vzdálenosti koncových bodů vektorů (v&nbsp;našem případě
ve dvourozměrném prostoru). V&nbsp;navazujících kapitolách si ukážeme některá
možná použití tohoto operátoru i operátorů dalších, pomocí nichž se vektory
porovnávají na základě odlišných metrik.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. L2 metrika pro nalezení podobných vektorů v&nbsp;klauzuli <strong>ORDER BY</strong></h2>

<p>Výše zmíněný operátor &lt;-&gt; můžeme použít v&nbsp;klauzuli <strong>ORDER
BY</strong>, která zajistí uspořádání vektorů na základě jejich vzdálenosti od
zadaného vektoru (nebo, chcete-li, na základě podobnosti vektorů z&nbsp;tabulky
se zadaným vektorem). Podívejme se na jednoduchý příklad:</p>

<pre>
test=&gt; <strong>SELECT * FROM v2 ORDER BY embedding &lt;-&gt; '[-4,4]' limit 3;</strong>
</pre>

<p>Výsledkem výše uvedeného dotazu je trojice vektorů, které jsou nejpodobnější
vektoru [-4, 4]:</p>

<pre>
 id | embedding
----+-----------
  2 | [-4,3]
  3 | [-3,5]
  1 | [-5,5]
(3 rows)
</pre>

<p>Což si pochopitelně můžeme vizualizovat v&nbsp;rovině (hvězdičkou je
naznačen vektor z&nbsp;podmínky, kolečkem vektory vrácené jako výsledek dotazu
a tečkou ostatní vektory, které neodpovídají dotazu):</p>

<pre>
                                       │ y
                                       │
                                       │
                                       │
                                       │
                     o       o         │          .   .   .
                         *             │          .   .   .
                         o             │          .   .   .
                                       │
                                       │
─────────────────────────────────────[0,0]──────────────────────────────────────
                                       │                                       x
                                       │
                                       │              .
                                       │
                                       │          .       .
                                       │
                                       │
                                       │
                                       │
</pre>

<p>Podobně můžeme získat pět vektorů, které jsou nejpodobnější vektoru [4,
4]:</p>

<pre>
test=&gt; <strong>SELECT * FROM v2 ORDER BY embedding <-> '[4,4]' limit 5;</strong>
 id | embedding
----+-----------
 11 | [4,4]
 12 | [4,5]
 10 | [4,3]
  8 | [3,4]
 14 | [5,4]
(5 rows)
</pre>

<p>Výsledných pět vrácených vektorů si opět zobrazíme v&nbsp;2D rovině:</p>

<pre>
                                       │ y
                                       │
                                       │
                                       │
                                       │
                     .       .         │          .   o   .
                         .             │          o   *   o
                         .             │          .   o   .
                                       │
                                       │
─────────────────────────────────────[0,0]──────────────────────────────────────
                                       │                                       x
                                       │
                                       │              .
                                       │
                                       │          .       .
                                       │
                                       │
                                       │
                                       │
</pre>

<p>Tři vektory nejpodobnější vektoru [3, 3]:</p>

<pre>
test=&gt; <strong>SELECT * FROM v2 ORDER BY embedding <-> '[3,3]' limit 3;</strong>
 id | embedding
----+-----------
  7 | [3,3]
  8 | [3,4]
 10 | [4,3]
(3 rows)
</pre>

<p>V&nbsp;2D rovině:</p>

<pre>
                                       │ y
                                       │
                                       │
                                       │
                                       │
                     .       .         │          .   .   .
                         .             │          o   .   .
                         .             │          *   o   .
                                       │
                                       │
─────────────────────────────────────[0,0]──────────────────────────────────────
                                       │                                       x
                                       │
                                       │              .
                                       │
                                       │          .       .
                                       │
                                       │
                                       │
                                       │
</pre>

<p>Tentýž dotaz, ovšem pro šest nejpodobnějších vektorů:</p>

<pre>
test=&gt; <strong>SELECT * FROM v2 ORDER BY embedding <-> '[3,3]' limit 6;</strong>
 id | embedding
----+-----------
  7 | [3,3]
 10 | [4,3]
  8 | [3,4]
 11 | [4,4]
  9 | [3,5]
 13 | [5,3]
(6 rows)
</pre>

<p>Výsledek v&nbsp;2D rovině:</p>

<pre>

                                       │ y
                                       │
                                       │
                                       │
                                       │
                     .       .         │          o   .   .
                         .             │          o   o   .
                         .             │          *   o   o
                                       │
                                       │
─────────────────────────────────────[0,0]──────────────────────────────────────
                                       │                                       x
                                       │
                                       │              .
                                       │
                                       │          .       .
                                       │
                                       │
                                       │
                                       │
</pre>




<p><a name="k10"></a></p>
<h2 id="k10">10. L2 metrika pro nalezení podobných vektorů v&nbsp;klauzuli <strong>WHERE</strong></h2>

<p>Kromě vyhledání N nejbližších (nejpodobnějších) vektorů je možné podmínku se
vzdáleností/podobností pochopitelně zapsat i do klauzule
<strong>WHERE</strong>. To si můžeme snadno ukázat na dotazu, který nalezne
všechny vektory, jejichž vzdálenost od vektoru [3,3] je menší než 3:</p>

<pre>
test=&gt; <strong>SELECT * FROM v2 WHERE embedding &lt;-&gt; '[3,3]' &lt; 3;</strong>
&nbsp;
 id | embedding
----+-----------
  7 | [3,3]
  8 | [3,4]
  9 | [3,5]
 10 | [4,3]
 11 | [4,4]
 12 | [4,5]
 13 | [5,3]
 14 | [5,4]
 15 | [5,5]
(9 rows)
</pre>

<p>Výsledných devět vektorů si můžeme v&nbsp;rovině vizualizovat
následovně:</p>

<pre>
                                       │ y
                                       │
                                       │
                                       │
                                       │
                     .       .         │          o   o   o
                         .             │          o   o   o
                         .             │          *   o   o
                                       │
                                       │
─────────────────────────────────────[0,0]──────────────────────────────────────
                                       │                                       x
                                       │
                                       │              .
                                       │
                                       │          .       .
                                       │
                                       │
                                       │
                                       │
</pre>

<p>Ovšem stejnou klauzuli pochopitelně můžeme použít i v&nbsp;příkazu
<strong>DELETE</strong>, nikoli pouze v&nbsp;příkazu <strong>SELECT</strong>.
Smažeme ty vektory, jejichž vzdálenost od [3,3] je ostře menší než 2. Celkem se
smažou čtyři záznamy:</p>

<pre>
test=&gt; <strong>DELETE FROM v2 WHERE embedding &lt;-&gt; '[3,3]' &lt; 2;</strong>
DELETE 4
</pre>

<p>Po provedení tohoto příkazu již nebude tabulka <strong>v2</strong> obsahovat
15 záznamů, ale pouze jedenáct záznamů:</p>

<pre>
test=&gt; <strong>SELECT * FROM v2;</strong>
&nbsp;
 id | embedding
----+-----------
  1 | [-5,5]
  2 | [-4,3]
  3 | [-3,5]
  4 | [3,-5]
  5 | [4,-3]
  6 | [5,-5]
  9 | [3,5]
 12 | [4,5]
 13 | [5,3]
 14 | [5,4]
 15 | [5,5]
(11 rows)
</pre>

<p>Vizuálně (smazané vektory jsou označeny křížkem):</p>

<pre>
                                       │ y
                                       │
                                       │
                                       │
                                       │                [5,5]
                     o       o         │          o   o   o
                                       │          x   x   o
                         o             │          x   x   o
                      [-4, 3]          │
                                       │
─────────────────────────────────────[0,0]──────────────────────────────────────
                                       │                                       x
                                       │              o
                                       │
                                       │          o       o
                                       │                [5,-5]
                                       │
                                       │
                                       │
                                       │
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Další metriky podporované rozšířením <strong>pgvector</strong></h2>

<p>Prozatím jsme pro výpočty podobnosti (resp.&nbsp;vzdálenosti) vektorů
používali klasickou Eukleidovskou metriku, tedy skutečnou vzdálenost bodů
v&nbsp;prostoru (v&nbsp;tomto případě vzdálenost koncových bodů vektorů
v&nbsp;prostoru). Tato metrika se taktéž označuje L2, ovšem
<strong>pgvector</strong> podporuje i další metriky, které jsou vypsány
v&nbsp;tabulce:</p>

<table>
<tr><th>Operátor</th><th>Stručný popis</th></tr>
<tr><td>&lt;-&gt;</td><td>Eukleidovská vzdálenost</td></tr>
<tr><td>&lt;#&gt;</td><td>skalární součin (jedna z&nbsp;nejdůležitějších matematických operací vůbec; vrací se hodnota s&nbsp;otočeným znaménkem!)</td></tr>
<tr><td>&lt;=&gt;</td><td>1 - kosinus úhlu mezi vektory (rozsah -1 až 1 za předpokladu, že jsou vektory normalizovány!)</td></tr>
<tr><td>&lt;+&gt;</td><td>Manhattanská metrika (popíšeme si příště, vzdálenost při pohybu pouze po mřížce)</td></tr>
<tr><td>&lt;~&gt;</td><td>Hammingova vzdálenost (popíšeme si příště, používá se například u vektorizovaného textu)</td></tr>
<tr><td>&lt;%&gt;</td><td>Jaccardův index (opět si popíšeme příště)</td></tr>
</table>

<p>Eukleidovskou vzdálenost již známe, ovšem pro úplnost si ukažme, jaké mohou
být výsledky:</p>

<pre>
test=&gt; <strong>SELECT embedding, embedding &lt;-&gt; '[3,3]' as L2_distance FROM v2;</strong>
 embedding |    l2_distance
-----------+--------------------
 [-5,5]    |  8.246211251235321
 [-4,3]    |                  7
 [-3,5]    |  6.324555320336759
 [3,-5]    |                  8
 [4,-3]    |  6.082762530298219
 [5,-5]    |  8.246211251235321
 [3,3]     |                  0
 [3,4]     |                  1
 [3,5]     |                  2
 [4,3]     |                  1
 [4,4]     | 1.4142135623730951
 [4,5]     |   2.23606797749979
 [5,3]     |                  2
 [5,4]     |   2.23606797749979
 [5,5]     | 2.8284271247461903
(15 rows)
</pre>

<p>Kosinus úhlů nám dává představu o tom, jak moc se liší úhel mezi dvojicí
vektorů. Jedná se o velmi často používanou metriku při porovnávání
tokenizovaných a vektorizovaných textů. Pro nenormalizované hodnoty však
nedostaneme korektní výsledky, o čemž se lze snadno přesvědčit:</p>

<pre>
test=&gt; <strong>SELECT embedding, embedding &lt;=&gt; '[3,3]' as cos_distance FROM v2;</strong>
 embedding |     cos_distance
-----------+----------------------
 [-5,5]    |                    1
 [-4,3]    |   1.1414213562373094
 [-3,5]    |    0.757464374963667
 [3,-5]    |    1.242535625036333
 [4,-3]    |   0.8585786437626906
 [5,-5]    |                    1
 [3,3]     |                    0
 [3,4]     | 0.010050506338833531
 [3,5]     | 0.029857499854668013
 [4,3]     | 0.010050506338833531
 [4,4]     |                    0
 [4,5]     | 0.006116265326381098
 [5,3]     | 0.029857499854668013
 [5,4]     | 0.006116265326381098
 [5,5]     |                    0
(15 rows)
</pre>

<p>Totéž platí i pro výpočet skalárního součinu. Pro nenormalizované hodnoty
dostaneme výsledky, které nejsou příliš použitelné:</p>

<pre>
test=&gt; <strong>SELECT embedding, embedding &lt;#&gt; '[3,3]' as inner_product_distance FROM v2;</strong>
 embedding | inner_product_distance
-----------+------------------------
 [-5,5]    |                     -0
 [-4,3]    |                      3
 [-3,5]    |                     -6
 [3,-5]    |                      6
 [4,-3]    |                     -3
 [5,-5]    |                     -0
 [3,3]     |                    -18
 [3,4]     |                    -21
 [3,5]     |                    -24
 [4,3]     |                    -21
 [4,4]     |                    -24
 [4,5]     |                    -27
 [5,3]     |                    -24
 [5,4]     |                    -27
 [5,5]     |                    -30
(15 rows)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zpracování normalizovaných vektorů</h2>

<p>Pro zjištění podobnosti vektorů se nejčastěji používá L2 metrika, L1
metrika, skalární součin a kosinus úhlu mezi vektory. Ovšem u posledních dvou
metrik, tj.&nbsp;u skalárního součinu a kosinu úhlu, je nutné, aby vektory
uložené v&nbsp;databázi byly normalizovány, tj.&nbsp;aby všechny měly délku
rovnu 1 nebo 0. Takové vektory mám umístěny v&nbsp;tabulce nazvané
<strong>normalized</strong>. Tato tabulka vznikla skriptem, který je ukázaný <a
href="#k15">v&nbsp;patnácté kapitole</a> a vektory zde uložené mají stejný
směr, jako vektory z&nbsp;tabulky <strong>v2</strong>, ovšem jejich délka je
rovna jedné:</p>

<pre>
test=&gt; <strong>SELECT * FROM normalized;</strong>
 id |        embedding
----+--------------------------
  1 | [-0.70710677,0.70710677]
  2 | [-0.8,0.6]
  3 | [-0.51449573,0.8574929]
  4 | [0.51449573,-0.8574929]
  5 | [0.8,-0.6]
  6 | [0.70710677,-0.70710677]
  7 | [0.70710677,0.70710677]
  8 | [0.6,0.8]
  9 | [0.51449573,0.8574929]
 10 | [0.8,0.6]
 11 | [0.70710677,0.70710677]
 12 | [0.62469506,0.7808688]
 13 | [0.8574929,0.51449573]
 14 | [0.7808688,0.62469506]
 15 | [0.70710677,0.70710677]
(15 rows)
</pre>

<p>Rozdíl úhlů vektorů nyní bude vracet korektní výsledky (povšimněte si, že
vektory mířící stejným směrem [1,1] mají nulový výsledek, protože se nevrací
přímo kosinus úhlů, ale hodnota 1-kosinus, což se lépe interpretuje):</p>

<pre>
test=&gt; <strong>SELECT embedding, embedding &lt;=&gt; '[0.8,0.6]' as cos_distance FROM v2;</strong>
&nbsp;
        embedding         |     cos_distance
--------------------------+----------------------
 [-0.70710677,0.70710677] |                    1
 [-0.8,0.6]               |   1.1414213626001684
 [-0.51449573,0.8574929]  |   0.7574643856826806
 [0.51449573,-0.8574929]  |   1.2425356143173194
 [0.8,-0.6]               |   0.8585786373998318
 [0.70710677,-0.70710677] |                    1
 [0.70710677,0.70710677]  |                    0
 [0.6,0.8]                | 0.010050431991999509
 [0.51449573,0.8574929]   | 0.029857542730722608
 [0.8,0.6]                | 0.010050431991999509
 [0.70710677,0.70710677]  |                    0
 [0.62469506,0.7808688]   | 0.006116289048590184
 [0.8574929,0.51449573]   | 0.029857542730722608
 [0.7808688,0.62469506]   | 0.006116289048590184
 [0.70710677,0.70710677]  |                    0
(15 rows)
</pre>

<p>A konečně si můžeme nechat spočítat skalární součin. Povšimněte si, že se ve
skutečnosti vrací hodnota s&nbsp;opačným znaménkem, takže pro nejpodobnější
vektory získáme nejmenší hodnotu a naopak:</p>

<pre>
test=&gt; <strong>SELECT embedding, embedding &lt;#&gt; '[3,3]' as inner_product_distance FROM normalized;</strong>
&nbsp;
        embedding         | inner_product_distance
--------------------------+------------------------
 [-0.70710677,0.70710677] |                     -0
 [-0.8,0.6]               |     0.6000000238418579
 [-0.51449573,0.8574929]  |    -1.0289915800094604
 [0.51449573,-0.8574929]  |     1.0289915800094604
 [0.8,-0.6]               |    -0.6000000238418579
 [0.70710677,-0.70710677] |                     -0
 [0.70710677,0.70710677]  |     -4.242640495300293
 [0.6,0.8]                |     -4.200000286102295
 [0.51449573,0.8574929]   |     -4.115965843200684
 [0.8,0.6]                |     -4.200000286102295
 [0.70710677,0.70710677]  |     -4.242640495300293
 [0.62469506,0.7808688]   |     -4.216691970825195
 [0.8574929,0.51449573]   |     -4.115965843200684
 [0.7808688,0.62469506]   |     -4.216691970825195
 [0.70710677,0.70710677]  |     -4.242640495300293
(15 rows)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Využití rozšíření <strong>pgvector</strong> z&nbsp;jazyka Python</h2>

<p>Ve druhé části dnešního článku si ukážeme základní způsoby využití rozšíření
<strong>pgvector</strong> z&nbsp;programovacího jazyka Python. Demonstrační
příklady budou postaveny nad balíčkem <strong>psycopg2</strong>, který však sám
o sobě podporu pro práci s&nbsp;vektory neumožňuje, což se projeví například
tak, že se namísto vektorů vrací řetězce, které vektory obsahují ve svém textu
(a bylo by je tedy nutné parsovat). Aby bylo možné s&nbsp;rozšířením
<strong>pgvector</strong> pracovat bez komplikací, je nutné doinstalovat
Pythonovský balíček nazvaný taktéž <strong>pgvector</strong>. Je to snadné:</p>

<pre>
$ <strong>pip install --user pgvector</strong>
&nbsp;
Collecting pgvector
  Downloading pgvector-0.3.6-py3-none-any.whl.metadata (13 kB)
Requirement already satisfied: numpy in /home/ptisnovs/.local/lib/python3.12/site-packages (from pgvector) (2.2.0)
Downloading pgvector-0.3.6-py3-none-any.whl (24 kB)
Installing collected packages: pgvector
Successfully installed pgvector-0.3.6
</pre>
 
<p><div class="rs-tip-major">Poznámka: povšimněte si, že jednou ze závislostí
tohoto balíčku je i <i>NumPy</i>. To je vlastně logické, protože právě díky
NumPy je možné v&nbsp;Pythonu jednoduše pracovat jak s&nbsp;vektory, tak i
s&nbsp;maticemi či s&nbsp;vícerozměrnými poli (vektory jsou v&nbsp;tomto
kontextu pouze jedním specifickým typem n-rozměrného pole).</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Registrace rozšíření <strong>pgvector</strong> z&nbsp;Pythonu</h2>

<p>V&nbsp;úvodní části dnešního článku jsme si řekli, že rozšíření
<strong>pgvector</strong> je nutné v&nbsp;PostgreSQL povolit (zaregistrovat)
pro každou databázi. Tuto operaci je možné provést i přímo z&nbsp;Pythonu,
protože příkaz <strong>CREATE EXTENSION vector</strong> můžeme zavolat přímo
přes balíček <strong>psycopg2</strong> (což se může hodit ve chvíli, kdy je
databáze vytvářená programově a nikoli ručně z&nbsp;konzole
<strong>psql</strong>). Registrace se provede snadno:</p>

<pre>
import psycopg2
&nbsp;
from pgvector.psycopg2 import register_vector
&nbsp;
connection = psycopg2.connect(
    host="", port=5432, user="tester", password="123qwe", dbname="test"
)
&nbsp;
with connection.cursor() as cursor:
    cursor.execute("CREATE EXTENSION IF NOT EXISTS vector")
</pre>

<p>V&nbsp;praxi by samozřejmě bylo mnohem lepší konfiguraci připojení
k&nbsp;databázi (port, jméno uživatele, jméno databáze atd.) číst
z&nbsp;nějakého konfiguračního souboru a v&nbsp;případě hesla ze zabezpečeného
úložiště.</p>

<p><div class="rs-tip-major">Poznámka: tento skript je možné pustit vícekrát,
protože i když je rozšíření zaregistrováno, nedojde k&nbsp;žádné chybě ani
k&nbsp;výjimce.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Zápis nových záznamů obsahujících vektory</h2>

<p>Předpokládejme, že v&nbsp;databázi (schématu) je již vytvořena tabulka
nazvaná <strong>v2</strong>, k&nbsp;čemuž můžeme použít příkaz uvedený <a
href="#k06">v&nbsp;šesté kapitole</a>. Připomeňme si, že tato tabulka má pouze
dva sloupce &ndash; první obsahuje ID (automaticky generované) a druhý pak
dvourozměrný vektor. Jakým způsobem se provede zápis nových vektorů do takové
tabulky? Je to jednoduché, což je ostatně patrné i z&nbsp;následujícího
zdrojového kódu. K&nbsp;databázi se nejdříve běžným způsobem připojíme a
následně zavoláme funkci <strong>register_vector</strong> &ndash; to je
důležité, protože jinak by nebylo možné vektory přímo zapisovat, ale ani číst.
Následně můžeme zavolat příkaz:</p>

<pre>
INSERT INTO v2 (embedding) VALUES (%s)
</pre>

<p>tento příkaz obsahuje znak %s, za který je nutné doplnit příslušný vektor,
tj.&nbsp;konkrétně hodnotu typu <strong>numpy.array</strong> obsahující dvojici
numerických hodnot. Toto doplnění za nás provede <strong>psycopg2</strong>
automaticky &ndash; nemusíme (a ani bychom nikdy neměli) příslušný SQL příkaz
&bdquo;skládat&ldquo; ručně, což je nepraktické a navíc náchylné na <i>SQL
Injection</i>. Použijeme tedy tento postup:</p>

<pre>
vector = np.array([x[i], y[i]])
&nbsp;
cursor.execute("INSERT INTO v2 (embedding) VALUES (%s)", (vector, ))
</pre>

<p>Ve skriptu je ukázáno naplnění tabulky patnácti dvourozměrnými vektory,
jejichž x-ové souřadnice jsou uloženy v&nbsp;seznamu <strong>x</strong> a y-ové
souřadnice v&nbsp;seznamu <strong>y</strong>:</p>

<pre>
import psycopg2
&nbsp;
import numpy as np
from pgvector.psycopg2 import register_vector
&nbsp;
connection = psycopg2.connect(
    host="", port=5432, user="tester", password="123qwe", dbname="test"
)
&nbsp;
register_vector(connection)
&nbsp;
x = [-5, -4, -3,    3,  4,  5,   3, 3, 3, 4, 4, 4, 5, 5, 5]
y = [ 5,  3,  5,   -5, -3, -5,   3, 4, 5, 3, 4, 5, 3, 4, 5]
&nbsp;
with connection.cursor() as cursor:
    for i in range(len(x)):
        vector = np.array([x[i], y[i]])
        print(vector)
        cursor.execute("INSERT INTO v2 (embedding) VALUES (%s)", (vector, ))
    connection.commit()
</pre>

<p>Podobným způsobem můžeme naplnit tabulku nazvanou
<strong>normalized</strong> taktéž patnácti vektory. Ty však nyní budou
normalizovány tak, aby jejich délka byla rovna jedné (kromě nulového vektoru).
Délka vektoru je vypočtena funkcí <strong>np.linalg.norm</strong>:</p>

<pre>
import psycopg2
&nbsp;
import numpy as np
from pgvector.psycopg2 import register_vector
&nbsp;
connection = psycopg2.connect(
    host="", port=5432, user="tester", password="123qwe", dbname="test"
)
&nbsp;
register_vector(connection)
&nbsp;
x = [-5, -4, -3,    3,  4,  5,   3, 3, 3, 4, 4, 4, 5, 5, 5]
y = [ 5,  3,  5,   -5, -3, -5,   3, 4, 5, 3, 4, 5, 3, 4, 5]
&nbsp;
with connection.cursor() as cursor:
    for i in range(len(x)):
        vector = np.array([x[i], y[i]], dtype="float")
        norm = np.linalg.norm(vector)
        vector /= norm
        print(vector)
        cursor.execute("INSERT INTO normalized (embedding) VALUES (%s)", (vector, ))
    connection.commit()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Dotazy vracející vektory</h2>

<p>Další operací &ndash; vlastně nejčastější operací vůbec &ndash; je výběr
vektorů resp.&nbsp;přesněji řečeno provedení dotazů (<i>query</i>), které vrací
záznamy obsahující vektory. Nejprve si vyzkoušejme prostý dotaz, který vrátí
všechny záznamy z&nbsp;tabulky <strong>v2</strong>:</p>

<pre>
import psycopg2
&nbsp;
connection = psycopg2.connect(
    host="", port=5432, user="tester", password="123qwe", dbname="test"
)
&nbsp;
with connection.cursor() as cursor:
    cursor.execute(<strong>"SELECT * FROM v2"</strong>)
    records = cursor.fetchall()
    for record in records:
        print(record)
</pre>

<p>Výsledky vypadají takto:</p>

<pre>
(1, '[-5,5]')
(2, '[-4,3]')
(3, '[-3,5]')
(4, '[3,-5]')
(5, '[4,-3]')
(6, '[5,-5]')
(7, '[3,3]')
(8, '[3,4]')
(9, '[3,5]')
(10, '[4,3]')
(11, '[4,4]')
(12, '[4,5]')
(13, '[5,3]')
(14, '[5,4]')
(15, '[5,5]')
</pre>

<p>Na první pohled by možná mohlo zdát, že je vše v&nbsp;pořádku, ovšem pokusme
se zjistit typ hodnot, které čteme z&nbsp;druhého sloupce:</p>

<pre>
import psycopg2
&nbsp;
connection = psycopg2.connect(
    host="", port=5432, user="tester", password="123qwe", dbname="test"
)
&nbsp;
with connection.cursor() as cursor:
    cursor.execute("SELECT * FROM v2")
    records = cursor.fetchall()
    for record in records:
        print(record, type(record[1]))
</pre>

<p>Nyní je z&nbsp;vypsaných informací patrné, že se sice vrací hodnoty ze
sloupce <strong>embeddings</strong>, ovšem tyto hodnoty jsou typu řetězec
(string):</p>

<pre>
(1, '[-5,5]') &lt;class 'str'&gt;
(2, '[-4,3]') &lt;class 'str'&gt;
(3, '[-3,5]') &lt;class 'str'&gt;
(4, '[3,-5]') &lt;class 'str'&gt;
(5, '[4,-3]') &lt;class 'str'&gt;
(6, '[5,-5]') &lt;class 'str'&gt;
(7, '[3,3]') &lt;class 'str'&gt;
(8, '[3,4]') &lt;class 'str'&gt;
(9, '[3,5]') &lt;class 'str'&gt;
(10, '[4,3]') &lt;class 'str'&gt;
(11, '[4,4]') &lt;class 'str'&gt;
(12, '[4,5]') &lt;class 'str'&gt;
(13, '[5,3]') &lt;class 'str'&gt;
(14, '[5,4]') &lt;class 'str'&gt;
(15, '[5,5]') &lt;class 'str'&gt;
</pre>

<p>Aby bylo možné korektně číst vektory, musíme zavolat již známou funkci
<strong>register_vector</strong> z&nbsp;balíčku
<strong>pgvector.psycopg2</strong>. Poté by již vše mělo být v&nbsp;pořádku,
což si pochopitelně ověříme:</p>

<pre>
import psycopg2
&nbsp;
from pgvector.psycopg2 import register_vector
&nbsp;
connection = psycopg2.connect(
    host="", port=5432, user="tester", password="123qwe", dbname="test"
)
&nbsp;
<strong>register_vector(connection)</strong>
&nbsp;
with connection.cursor() as cursor:
    cursor.execute("SELECT * FROM v2")
    records = cursor.fetchall()
    for record in records:
        print(record, type(record[1]))
</pre>

<p>Nyní se již vektory korektně vrací jako typ <strong>numpy.array</strong> a
dokonce prvky tohoto jednorozměrného pole mají korektní typ
<strong>float32</strong>:</p>

<pre>
(1, array([-5.,  5.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
(2, array([-4.,  3.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
(3, array([-3.,  5.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
(4, array([ 3., -5.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
(5, array([ 4., -3.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
(6, array([ 5., -5.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
(7, array([3., 3.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
(8, array([3., 4.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
(9, array([3., 5.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
(10, array([4., 3.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
(11, array([4., 4.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
(12, array([4., 5.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
(13, array([5., 3.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
(14, array([5., 4.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
(15, array([5., 5.], dtype=float32)) &lt;class 'numpy.ndarray'&gt;
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Výběr vektorů na základě jejich podobnosti</h2>

<p>Ukažme si další příklady založené na rozšíření <strong>pgvector</strong> a
<strong>psycopg2</strong>. Provedeme výběr vektorů na základě jejich podobnosti
s&nbsp;vektorem [3, 3], přičemž budeme chtít získat maximálně pět výsledků.
Povšimněte si, že do metody <strong>cursor.execute</strong> můžeme předat běžný
Pythonovský seznam, ale samozřejmě je podporován i datový typ
<strong>numpy.array</strong> (připomínám, že parametry SQL dotazu se předávají
formou n-tice a proto zápis vypadá takto ([3,3], ):</p>

<pre>
import psycopg2
&nbsp;
from pgvector.psycopg2 import register_vector
&nbsp;
connection = psycopg2.connect(
    host="", port=5432, user="tester", password="123qwe", dbname="test"
)
&nbsp;
register_vector(connection)
&nbsp;
with connection.cursor() as cursor:
    cursor.execute("SELECT embedding FROM v2 ORDER BY embedding &lt;-&gt; <strong>%s::vector</strong> LIMIT 5", ([3,3], ))
    records = cursor.fetchall()
    for record in records:
        print(record[0])
</pre>

<p>Výsledky:</p>

<pre>
[3. 3.]
[3. 4.]
[4. 3.]
[4. 4.]
[3. 5.]
</pre>

<p>Složitější dotazy je vhodnější zapsat formou víceřádkového řetězce.
Předchozí příklad tedy lze přepsat do této podoby a stále získáme stejné
výsledky:</p>

<pre>
import psycopg2
&nbsp;
from pgvector.psycopg2 import register_vector
&nbsp;
connection = psycopg2.connect(
    host="", port=5432, user="tester", password="123qwe", dbname="test"
)
&nbsp;
register_vector(connection)
&nbsp;
with connection.cursor() as cursor:
    query = """
        SELECT embedding
          FROM v2
         ORDER BY embedding &lt;-&gt; <strong>%s::vector</strong>
         LIMIT 5
    """
    cursor.execute(query, ([3,3], ))
    records = cursor.fetchall()
    for record in records:
        print(record[0])
</pre>

<p>Výběr všech vektorů, jejichž vzdálenost od vektoru [3,3] je menší než
2.5:</p>

<pre>
import psycopg2
&nbsp;
from pgvector.psycopg2 import register_vector
&nbsp;
connection = psycopg2.connect(
    host="", port=5432, user="tester", password="123qwe", dbname="test"
)
&nbsp;
register_vector(connection)
&nbsp;
with connection.cursor() as cursor:
    query = """
        SELECT embedding
          FROM v2
         WHERE embedding &lt;-&gt; <strong>%s::vector &lt;</strong> 2.5
    """
    cursor.execute(query, ([3,3], ))
    records = cursor.fetchall()
    for record in records:
        print(record[0])
</pre>

<p>Nyní by se mělo vrátit osm vektorů:</p>

<pre>
[3. 3.]
[3. 4.]
[3. 5.]
[4. 3.]
[4. 4.]
[4. 5.]
[5. 3.]
[5. 4.]
</pre>

<p>A konečně poslední příklad z&nbsp;této kategorie, ve kterém se postupně
vypisují vektory s&nbsp;různou maximální vzdáleností od vektoru [3,3]. Společně
s&nbsp;rostoucí maximální vzdáleností se pochopitelně zvětšuje počet vrácených
vektorů:</p>

<pre>
import psycopg2
&nbsp;
from pgvector.psycopg2 import register_vector
&nbsp;
connection = psycopg2.connect(
    host="", port=5432, user="tester", password="123qwe", dbname="test"
)
&nbsp;
register_vector(connection)
&nbsp;
query = """
    SELECT embedding
      FROM v2
     WHERE embedding &lt;-&gt; %s::vector &lt; %s
"""
&nbsp;
for distance in range(0, 10):
    print("Distance:", distance)
    with connection.cursor() as cursor:
        cursor.execute(query, ([3,3], distance))
        records = cursor.fetchall()
        for record in records:
            print(record[0])
    print("-"*50)
</pre>

<p>Výsledky pro různé maximální vzdálenosti jsou odděleny znaky
&bdquo;-&ldquo;:</p>

<pre>
Distance: 0
--------------------------------------------------
Distance: 1
[3. 3.]
--------------------------------------------------
Distance: 2
[3. 3.]
[3. 4.]
[4. 3.]
[4. 4.]
--------------------------------------------------
Distance: 3
[3. 3.]
[3. 4.]
[3. 5.]
[4. 3.]
[4. 4.]
[4. 5.]
[5. 3.]
[5. 4.]
[5. 5.]
--------------------------------------------------
Distance: 4
[3. 3.]
[3. 4.]
[3. 5.]
[4. 3.]
[4. 4.]
[4. 5.]
[5. 3.]
[5. 4.]
[5. 5.]
--------------------------------------------------
Distance: 5
[3. 3.]
[3. 4.]
[3. 5.]
[4. 3.]
[4. 4.]
[4. 5.]
[5. 3.]
[5. 4.]
[5. 5.]
--------------------------------------------------
Distance: 6
[3. 3.]
[3. 4.]
[3. 5.]
[4. 3.]
[4. 4.]
[4. 5.]
[5. 3.]
[5. 4.]
[5. 5.]
--------------------------------------------------
Distance: 7
[-3.  5.]
[ 4. -3.]
[3. 3.]
[3. 4.]
[3. 5.]
[4. 3.]
[4. 4.]
[4. 5.]
[5. 3.]
[5. 4.]
[5. 5.]
--------------------------------------------------
Distance: 8
[-4.  3.]
[-3.  5.]
[ 4. -3.]
[3. 3.]
[3. 4.]
[3. 5.]
[4. 3.]
[4. 4.]
[4. 5.]
[5. 3.]
[5. 4.]
[5. 5.]
--------------------------------------------------
Distance: 9
[-5.  5.]
[-4.  3.]
[-3.  5.]
[ 3. -5.]
[ 4. -3.]
[ 5. -5.]
[3. 3.]
[3. 4.]
[3. 5.]
[4. 3.]
[4. 4.]
[4. 5.]
[5. 3.]
[5. 4.]
[5. 5.]
--------------------------------------------------
</pre>

<p><div class="rs-tip-major">Poznámka: podle očekávání s&nbsp;rostoucí
maximální vzdáleností roste i počet vrácených vektorů.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Použití různých metrik na nenormalizované i normalizované vektory</h2>

<p>A konečně se podívejme na použití různých metrik (viz kapitolu <a
href="#k11">11</a>) v&nbsp;dotazech prováděných z&nbsp;Pythonu. Nejprve
provedeme výběry z&nbsp;tabulky <strong>v2</strong>, která obsahuje
nenormalizované vektory. Funkce <strong>list_by_distance</strong> je volána
s&nbsp;různými připravenými dotazy a vrací podobnosti vektorů:</p>

<pre>
import psycopg2
&nbsp;
from pgvector.psycopg2 import register_vector
&nbsp;
connection = psycopg2.connect(
    host="", port=5432, user="tester", password="123qwe", dbname="test"
)
&nbsp;
register_vector(connection)
&nbsp;
&nbsp;
def list_by_distance(title, query):
    print(title)
    print("-" * 70)
    with connection.cursor() as cursor:
        cursor.execute(query, ([3,3], ))
        records = cursor.fetchall()
        for record in records:
            print(record[0], record[1])
    print()
&nbsp;
&nbsp;
query_l2_distance = """
        SELECT embedding, embedding &lt;-&gt; %s::vector as distance
          FROM v2
         ORDER BY distance
    """
&nbsp;
&nbsp;
query_cosine_distance = """
        SELECT embedding, embedding &lt;=&gt; %s::vector as distance
          FROM v2
         ORDER BY distance
    """
&nbsp;
&nbsp;
query_inner_product_distance = """
        SELECT embedding, (embedding &lt;#&gt; %s::vector) * -1 as distance
          FROM v2
         ORDER BY distance
    """
&nbsp;
&nbsp;
list_by_distance("L2", query_l2_distance)
list_by_distance("cosine", query_cosine_distance)
list_by_distance("inner product", query_inner_product_distance)
</pre>

<p>A takto by měly vypadat výsledky (pro [3,3] budou nulové, kromě výpočtu
skalárního součinu):</p>

<pre>
L2
----------------------------------------------------------------------
[3. 3.] 0.0
[4. 3.] 1.0
[3. 4.] 1.0
[4. 4.] 1.4142135623730951
[3. 5.] 2.0
[5. 3.] 2.0
[4. 5.] 2.23606797749979
[5. 4.] 2.23606797749979
[5. 5.] 2.8284271247461903
[ 4. -3.] 6.082762530298219
[-3.  5.] 6.324555320336759
[-4.  3.] 7.0
[ 3. -5.] 8.0
[ 5. -5.] 8.246211251235321
[-5.  5.] 8.246211251235321
&nbsp;
cosine
----------------------------------------------------------------------
[3. 3.] 0.0
[5. 5.] 0.0
[4. 4.] 0.0
[5. 4.] 0.006116265326381098
[4. 5.] 0.006116265326381098
[3. 4.] 0.010050506338833531
[4. 3.] 0.010050506338833531
[5. 3.] 0.029857499854668013
[3. 5.] 0.029857499854668013
[-3.  5.] 0.757464374963667
[ 4. -3.] 0.8585786437626906
[-5.  5.] 1.0
[ 5. -5.] 1.0
[-4.  3.] 1.1414213562373094
[ 3. -5.] 1.242535625036333
&nbsp;
inner product
----------------------------------------------------------------------
[ 3. -5.] -6.0
[-4.  3.] -3.0
[-5.  5.] 0.0
[ 5. -5.] 0.0
[ 4. -3.] 3.0
[-3.  5.] 6.0
[3. 3.] 18.0
[3. 4.] 21.0
[4. 3.] 21.0
[4. 4.] 24.0
[5. 3.] 24.0
[3. 5.] 24.0
[4. 5.] 27.0
[5. 4.] 27.0
[5. 5.] 30.0
</pre>

<p>V&nbsp;dnešním posledním demonstračním příkladu provedeme tytéž dotazy,
ovšem nyní z&nbsp;tabulky s&nbsp;normalizovanými vektory:</p>

<pre>
import psycopg2
&nbsp;
from pgvector.psycopg2 import register_vector
&nbsp;
connection = psycopg2.connect(
    host="", port=5432, user="tester", password="123qwe", dbname="test"
)
&nbsp;
register_vector(connection)
&nbsp;
&nbsp;
def list_by_distance(title, query):
    print(title)
    print("-" * 70)
    with connection.cursor() as cursor:
        cursor.execute(query, ([0.6, 0.8], ))
        records = cursor.fetchall()
        for record in records:
            print(record[0], record[1])
    print()
&nbsp;
&nbsp;
query_l2_distance = """
        SELECT embedding, embedding &lt;-&gt; %s::vector as distance
          FROM normalized
         ORDER BY distance
    """
&nbsp;
&nbsp;
query_cosine_distance = """
        SELECT embedding, embedding &lt;=&gt; %s::vector as distance
          FROM normalized
         ORDER BY distance
    """
&nbsp;
&nbsp;
query_inner_product_distance = """
        SELECT embedding, (embedding &lt;#&gt; %s::vector) * -1 as distance
          FROM normalized
         ORDER BY distance
    """
&nbsp;
&nbsp;
list_by_distance("L2", query_l2_distance)
list_by_distance("cosine", query_cosine_distance)
list_by_distance("inner product", query_inner_product_distance)
</pre>

<p>Výsledky nyní budou korektní i při použití skalárního součinu:</p>

<pre>
L2
----------------------------------------------------------------------
[0.6 0.8] 0.0
[0.62469506 0.7808688 ] 0.031238551948631895
[0.51449573 0.8574929 ] 0.1030360078106494
[0.70710677 0.70710677] 0.1417780269885387
[0.70710677 0.70710677] 0.1417780269885387
[0.70710677 0.70710677] 0.1417780269885387
[0.7808688  0.62469506] 0.2518836080769836
[0.8 0.6] 0.28284269614271473
[0.8574929  0.51449573] 0.3844675371382995
[-0.51449573  0.8574929 ] 1.1159777193238047
[-0.70710677  0.70710677] 1.3104034663729762
[-0.8  0.6] 1.4142136466667896
[ 0.8 -0.6] 1.4142136466667896
[ 0.70710677 -0.70710677] 1.5109078847197794
[ 0.51449573 -0.8574929 ] 1.6596968430299401
&nbsp;
cosine
----------------------------------------------------------------------
[0.6 0.8] 0.0
[0.62469506 0.7808688 ] 0.00048792362213134766
[0.51449573 0.8574929 ] 0.005308210849761963
[0.70710677 0.70710677] 0.010050446094585386
[0.70710677 0.70710677] 0.010050446094585386
[0.70710677 0.70710677] 0.010050446094585386
[0.7808688  0.62469506] 0.03172260522842407
[0.8 0.6] 0.039999961853027344
[0.8574929  0.51449573] 0.07390761375427246
[-0.51449573  0.8574929 ] 0.6227031350135803
[-0.70710677  0.70710677] 0.8585786181264703
[-0.8  0.6] 1.0
[ 0.8 -0.6] 1.0
[ 0.70710677 -0.70710677] 1.1414213818735297
[ 0.51449573 -0.8574929 ] 1.3772968649864197
&nbsp;
inner product
----------------------------------------------------------------------
[ 0.51449573 -0.8574929 ] -0.3772968649864197
[ 0.70710677 -0.70710677] -0.141421377658844
[ 0.8 -0.6] 0.0
[-0.8  0.6] 0.0
[-0.70710677  0.70710677] 0.141421377658844
[-0.51449573  0.8574929 ] 0.3772968649864197
[0.8574929  0.51449573] 0.9260923862457275
[0.8 0.6] 0.9600000381469727
[0.7808688  0.62469506] 0.9682773947715759
[0.70710677 0.70710677] 0.9899495244026184
[0.70710677 0.70710677] 0.9899495244026184
[0.70710677 0.70710677] 0.9899495244026184
[0.51449573 0.8574929 ] 0.994691789150238
[0.62469506 0.7808688 ] 0.9995120763778687
[0.6 0.8] 1.0
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python s&nbsp;nainstalovanými balíčky
<strong>psycopg2</strong> a <strong>pgvector</strong> byly uloženy do
repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;tabulce zobrazené níže jsou odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>create_extension.py</td><td>registrace rozšíření <i>vector</i> pro uživatele připojeného k&nbsp;databázi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/create_extension.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/create_extension.py</a></td></tr>
<tr><td> 2</td><td>insert_into_v2.py</td><td>zápis 2D vektorů do tabulky <i>v2</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/insert_into_v2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/insert_into_v2.py</a></td></tr>
<tr><td> 3</td><td>insert_normalized.py</td><td>zápis normalizovaných 2D vektorů do tabulky <i>normalized</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/insert_normalized.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/insert_normalized.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 4</td><td>read_vectors_1.py</td><td>přečtení vektorů bez jejich konverze na skutečné vektory</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/read_vectors_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/read_vectors_1.py</a></td></tr>
<tr><td> 5</td><td>read_vectors_2.py</td><td>důkaz, že přečtené vektory jsou vráceny jako řetězce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/read_vectors_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/read_vectors_2.py</a></td></tr>
<tr><td> 6</td><td>read_vectors_3.py</td><td>přečtení vektorů z&nbsp;databáze ve formě N-dimenzionálních polí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/read_vectors_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/read_vectors_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>select_by_distance_1.py</td><td>výběr vektorů na základě jejich odlišnosti od zadaného vektoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/select_by_distance_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/select_by_distance_1.py</a></td></tr>
<tr><td> 8</td><td>select_by_distance_2.py</td><td>dtto, ale s&nbsp;lepším naformátováním SQL dotazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/select_by_distance_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/select_by_distance_2.py</a></td></tr>
<tr><td> 9</td><td>select_by_distance_3.py</td><td>výběr vektorů s&nbsp;nejmenší odlišností (vzdáleností)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/select_by_distance_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/select_by_distance_3.py</a></td></tr>
<tr><td>10</td><td>select_by_distance_4.py</td><td>výběr vektorů se zadanou nejmenší odlišností (vzdáleností)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/select_by_distance_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/select_by_distance_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>various_distances.py</td><td>použití různých metrik na nenormalizované vektory</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/various_distances.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/various_distances.py</a></td></tr>
<tr><td>12</td><td>various_distances_normalized.py</td><td>použití různých metrik na normalizované vektory</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/various_distances_normalized.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pgvector/various_distances_normalized.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Vector database<br />
<a href="https://en.wikipedia.org/wiki/Vector_database">https://en.wikipedia.org/wiki/Vector_database</a>
</li>

<li>Nearest neighbor search<br />
<a href="https://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximation_methods">https://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximation_methods</a>
</li>

<li>RAG - Retrieval-augmented generation<br />
<a href="https://en.wikipedia.org/wiki/Retrieval-augmented_generation">https://en.wikipedia.org/wiki/Retrieval-augmented_generation</a>
</li>

<li>pgvector na GitHubu<br />
<a href="https://github.com/pgvector/pgvector">https://github.com/pgvector/pgvector</a>
</li>

<li>Why we replaced Pinecone with PGVector<br />
<a href="https://www.confident-ai.com/blog/why-we-replaced-pinecone-with-pgvector">https://www.confident-ai.com/blog/why-we-replaced-pinecone-with-pgvector</a>
</li>

<li>PostgreSQL as VectorDB - Beginner Tutorial<br />
<a href="https://www.youtube.com/watch?v=Ff3tJ4pJEa4">https://www.youtube.com/watch?v=Ff3tJ4pJEa4</a>
</li>

<li>What is a Vector Database? (neobsahuje odpověď na otázku v titulku :-)<br />
<a href="https://www.youtube.com/watch?v=t9IDoenf-lo">https://www.youtube.com/watch?v=t9IDoenf-lo</a>
</li>

<li>PGVector: Turn PostgreSQL Into A Vector Database<br />
<a href="https://www.youtube.com/watch?v=j1QcPSLj7u0">https://www.youtube.com/watch?v=j1QcPSLj7u0</a>
</li>

<li>Milvus<br />
<a href="https://milvus.io/">https://milvus.io/</a>
</li>

<li>Vector Databases simply explained! (Embeddings &amp; Indexes)<br />
<a href="https://www.youtube.com/watch?v=dN0lsF2cvm4">https://www.youtube.com/watch?v=dN0lsF2cvm4</a>
</li>

<li>Vector databases are so hot right now. WTF are they?<br />
<a href="https://www.youtube.com/watch?v=klTvEwg3oJ4">https://www.youtube.com/watch?v=klTvEwg3oJ4</a>
</li>

<li>Step-by-Step Guide to Installing “pgvector” and Loading Data in PostgreSQL<br />
<a href="https://medium.com/@besttechreads/step-by-step-guide-to-installing-pgvector-and-loading-data-in-postgresql-f2cffb5dec43">https://medium.com/@besttechreads/step-by-step-guide-to-installing-pgvector-and-loading-data-in-postgresql-f2cffb5dec43</a>
</li>

<li>Best 17 Vector Databases for 2025<br />
<a href="https://lakefs.io/blog/12-vector-databases-2023/">https://lakefs.io/blog/12-vector-databases-2023/</a>
</li>

<li>Top 15 Vector Databases that You Must Try in 2025<br />
<a href="https://www.geeksforgeeks.org/top-vector-databases/">https://www.geeksforgeeks.org/top-vector-databases/</a>
</li>

<li>Picking a vector database: a comparison and guide for 2023<br />
<a href="https://benchmark.vectorview.ai/vectordbs.html">https://benchmark.vectorview.ai/vectordbs.html</a>
</li>

<li>Top 9 Vector Databases as of Feburary 2025<br />
<a href="https://www.shakudo.io/blog/top-9-vector-databases">https://www.shakudo.io/blog/top-9-vector-databases</a>
</li>

<li>What is a vector database?<br />
<a href="https://www.ibm.com/think/topics/vector-database">https://www.ibm.com/think/topics/vector-database</a>
</li>

<li>SQL injection<br />
<a href="https://en.wikipedia.org/wiki/SQL_injection">https://en.wikipedia.org/wiki/SQL_injection</a>
</li>

<li>Cosine similarity<br />
<a href="https://en.wikipedia.org/wiki/Cosine_similarity">https://en.wikipedia.org/wiki/Cosine_similarity</a>
</li>

<li>Hammingova vzdálenost<br />
<a href="https://cs.wikipedia.org/wiki/Hammingova_vzd%C3%A1lenost">https://cs.wikipedia.org/wiki/Hammingova_vzd%C3%A1lenost</a>
</li>

<li>Jaccard index<br />
<a href="https://en.wikipedia.org/wiki/Jaccard_index">https://en.wikipedia.org/wiki/Jaccard_index</a>
</li>

<li>Manhattanská metrika<br />
<a href="https://cs.wikipedia.org/wiki/Manhattansk%C3%A1_metrika">https://cs.wikipedia.org/wiki/Manhattansk%C3%A1_metrika</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

