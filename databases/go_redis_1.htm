<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Použití databáze Redis v aplikacích naprogramovaných v Go</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Použití databáze Redis v aplikacích naprogramovaných v Go</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Použití databáze Redis v&nbsp;aplikacích naprogramovaných v&nbsp;Go</a></p>
<p><a href="#k02">2. Instalace Redisu i balíčku pro jazyk Go</a></p>
<p><a href="#k03">*** 3. Inicializace klienta zajišťujícího komunikaci s&nbsp;Redisem</a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">6. Uložení řetězců do Redisu</a></p>
<p><a href="#k07">*** 7. Přečtení řetězce z&nbsp;Redisu</a></p>
<p><a href="#k08">*** 8. Rozlišení chyby, ke které při čtení došlo</a></p>
<p><a href="#k09">*** 9. Nastavení doby expirace záznamu</a></p>
<p><a href="#k10">*** 10. Zvýšení či snížení celočíselné hodnoty uložené v&nbsp;Redisu</a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Použití databáze Redis v&nbsp;aplikacích naprogramovaných v&nbsp;Go</h2>

<p>V&nbsp;dnešní části seriálu o programovacím jazyku Go si ukážeme základní
způsoby použití databáze <i>Redis</i>, což je v&nbsp;Go poměrně velmi často
využívaná technologie. Programovací jazyk Go se totiž, jak již ostatně víme,
velmi často používá mj.&nbsp;i pro implementaci různých služeb a mikroslužeb.
V&nbsp;těchto případech se stav služby (pochopitelně pokud se nejedná o
bezstavovou službu) musí ukládat do nějakého datového úložiště. Může se &ndash;
podle povahy dat a popř.&nbsp;při požadavcích na ACID, HA atd. &ndash; jednat o
relační databáze, dokumentové databáze, objektové databáze atd. A velmi často
se setkáme právě s&nbsp;použitím systému <i>Redis</i>. Jedná se o databázi typu
<i>key-value</i>, což znamená, že hodnoty ukládané do databáze je možné
jednoznačně identifikovat (najít, smazat atd.) na základě klíče, který je
reprezentován řetězcem. Podobných databází samozřejmě existuje celá řada; za
zmínku stojí především <i>Berkeley DB</i>, dále pak <i>MemcacheDB</i>,
<i>Dynamo</i> či <i>InfinityDB</i>. Databáze <i>Redis</i> může být pro vývojáře
zajímavá a užitečná zejména z&nbsp;toho důvodu, že se jedná o velmi flexibilní
systém, který lze škálovat nejenom &bdquo;nahoru&ldquo; (distribuované systémy
se shardingem a/nebo replikací), ale i &bdquo;dolů&ldquo; (jednoduše
nastavitelné datové odkladiště pro jednouživatelskou aplikaci).</p>

<p>Samotný systém <i>Redis</i> jsme si již na stránkách Roota popsali ve
dvojici článků zmíněných pod tímto odstavcem. Tyto články, přesněji řečeno
použité demonstrační příklady, byly orientovány především na vývojáře
používající programovací jazyk <a
href="https://www.root.cz/n/python/">Python</a>. Taktéž jsme si v&nbsp;jiných
článcích ukázali některé možnosti využití <i>Redisu</i> <a
href="https://www.root.cz/serialy/message-brokery/">v&nbsp;message
brokerech</a>, protože v&nbsp;této oblasti je Redis velmi populární. Jedná se
zejména o projekt <i>RQ</i> neboli <i>Redis Queue</i>, ovšem například i o
minulý týden popsaný nástroj <i>Huey</i> (ovšem Redis se někdy používá i
v&nbsp;souvislosti <a
href="https://www.root.cz/clanky/apache-kafka-distribuovana-streamovaci-platforma/">s&nbsp;Kafkou</a>
pro uložení offsetů či dalších informací se stavem konzumentů). Bližší
informace lze najít v&nbsp;těchto článcích:</p>

<ol>

<li>Databáze Redis (nejenom) pro vývojáře používající Python<br />
<a href="https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python/">https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python/</a>
</li>

<li>Databáze Redis (nejenom) pro vývojáře používající Python (dokončení)<br />
<a href="https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python-dokonceni/">https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python-dokonceni/</a>
</li>

<li>Použití nástroje RQ (Redis Queue) pro správu úloh zpracovávaných na pozadí<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/">https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/</a>
</li>

<li>Nástroj huey: užitečná knihovna pro práci s frontami úloh v Pythonu<br />
<a href="https://www.root.cz/clanky/nastroj-huey-uzitecna-knihovna-pro-praci-s-frontami-uloh-v-pythonu/">https://www.root.cz/clanky/nastroj-huey-uzitecna-knihovna-pro-praci-s-frontami-uloh-v-pythonu/</a>
</li>

<li>Apache Kafka: distribuovaná streamovací platforma<br />
<a href="https://www.root.cz/clanky/apache-kafka-distribuovana-streamovaci-platforma/">https://www.root.cz/clanky/apache-kafka-distribuovana-streamovaci-platforma/</a>
</li>

</ol>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace Redisu i balíčku pro jazyk Go</h2>

<p>Instalace Redisu do Linuxu je snadná, protože ve většině distribucí existuje
příslušný balíček s&nbsp;touto službou. Tímto tématem jsme se ostatně již
zabývali <a
href="https://www.root.cz/clanky/nastroj-huey-uzitecna-knihovna-pro-praci-s-frontami-uloh-v-pythonu/#k05">v&nbsp;páté
kapitole</a> článku <a
href="https://www.root.cz/clanky/nastroj-huey-uzitecna-knihovna-pro-praci-s-frontami-uloh-v-pythonu/">Nástroj
huey: užitečná knihovna pro práci s&nbsp;frontami úloh v&nbsp;Pythonu</a>.</p>

<p>Po instalaci a úpravě konfiguračního souboru <strong>redis.conf</strong>
celou službu <i>Redis</i> spustíme:</p>

<pre>
15018:C 19 Jun 20:28:15.250 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
15018:C 19 Jun 20:28:15.250 # Redis version=4.0.10, bits=64, commit=00000000, modified=0, pid=15018, just started
15018:C 19 Jun 20:28:15.250 # Configuration loaded
15018:C 19 Jun 20:28:15.250 * supervised by systemd, will signal readiness
                _._
           _.-``__ ''-._
      _.-``    `.  `_.  ''-._           Redis 4.0.10 (00000000/0) 64 bit
  .-`` .-```.  ```\/    _.,_ ''-._
 (    '      ,       .-`  | `,    )     Running in standalone mode
 |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379
 |    `-._   `._    /     _.-'    |     PID: 15018
  `-._    `-._  `-./  _.-'    _.-'
 |`-._`-._    `-.__.-'    _.-'_.-'|
 |    `-._`-._        _.-'_.-'    |           http://redis.io
  `-._    `-._`-.__.-'_.-'    _.-'
 |`-._`-._    `-.__.-'    _.-'_.-'|
 |    `-._`-._        _.-'_.-'    |
  `-._    `-._`-.__.-'_.-'    _.-'
      `-._    `-.__.-'    _.-'
          `-._        _.-'
              `-.__.-'
&nbsp;
15018:M 19 Jun 20:28:15.253 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
15018:M 19 Jun 20:28:15.253 # Server initialized
15018:M 19 Jun 20:28:15.254 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_
15018:M 19 Jun 20:28:15.254 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues wi
15018:M 19 Jun 20:28:15.254 * DB loaded from disk: 0.000 seconds
15018:M 19 Jun 20:28:15.254 * Ready to accept connections
</pre>

<p><div class="rs-tip-major">Poznámka: důležité je, aby se v&nbsp;logu skutečně
objevil poslední řádek &bdquo;Ready to accept connections&ldquo;</div></p>

<p>Instalace balíčku, který zprostředkuje rozhraní mezi Redisem a aplikací
naprogramovanou v&nbsp;jazyku Go, vyžaduje použití modulů, protože se používá
verzování. Pro tento účel si můžeme vytvořit modul použitý pouze pro instalaci
&ndash; po ní ho můžeme zahodit:</p>

<pre>
$ <strong>go mod init x</strong>
&nbsp;
go: creating new go.mod: module x
</pre>

<p>V&nbsp;adresáři, kde vznikl soubor <strong>go.mod</strong> spustíme příkaz
zajišťující instalaci balíčku:</p>

<pre>
$ <strong>go get github.com/go-redis/redis/v8</strong>
&nbsp;
go: finding github.com/go-redis/redis/v8 v8.0.0-beta.5
go: finding github.com/go-redis/redis v6.15.8+incompatible
go: downloading github.com/go-redis/redis/v8 v8.0.0-beta.5
go: downloading github.com/go-redis/redis v6.15.8+incompatible
go: extracting github.com/go-redis/redis v6.15.8+incompatible
go: extracting github.com/go-redis/redis/v8 v8.0.0-beta.5
go: downloading github.com/dgryski/go-rendezvous v0.0.0-20200609043717-5ab96a526299
go: downloading go.opentelemetry.io/otel v0.6.0
go: extracting github.com/dgryski/go-rendezvous v0.0.0-20200609043717-5ab96a526299
go: extracting go.opentelemetry.io/otel v0.6.0
go: downloading google.golang.org/grpc v1.29.1
go: extracting google.golang.org/grpc v1.29.1
go: finding github.com/dgryski/go-rendezvous v0.0.0-20200609043717-5ab96a526299
go: finding go.opentelemetry.io/otel v0.6.0
go: finding google.golang.org/grpc v1.29.1
</pre>

<p>Od této chvíle by měl být balíček dostupný pro všechny aplikace vyvíjené
v&nbsp;programovacím jazyku Go, ovšem za předpokladu, že tyto aplikace taktéž
využívají systém modulů (což je dnes již samozřejmostí).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Inicializace klienta zajišťujícího komunikaci s&nbsp;Redisem</h2>

<p>Nyní si již můžeme ukázat první demonstrační příklad, který pouze provede
inicializaci klienta, jenž zajišťuje komunikaci s&nbsp;Redisem. Příklad je
založen na využití systému modulů a bude tedy umístěn ve vlastním adresáři se
souborem <strong>go.mod</strong>, jenž může vypadat následovně:</p>

<pre>
module redis1
&nbsp;
go 1.13
&nbsp;
require github.com/go-redis/redis/v8 v8.0.0-beta.5
</pre>

<p>Klient, resp.&nbsp;přesněji řečeno struktura představující klienta, se
vytvoří konstruktorem <strong>redis.NewClient</strong>, jemuž se předává další
datová struktura s&nbsp;podrobnějšími konfiguračními informacemi. Nutné je
zadat adresu běžícího serveru (i s&nbsp;portem), případné heslo pro přihlášení
(v&nbsp;našem případě je prázdné) a identifikaci použité databáze (0 = výchozí
databáze). Konstruktor nekontroluje připojení a i z&nbsp;tohoto důvodu nevrací
ve druhé návratové hodnotě strukturu s&nbsp;chybou:</p>

<pre>
<i>// vytvoření nového klienta s předáním konfiguračních parametrů</i>
client := redis.NewClient(&amp;redis.Options{
        Addr:     redisAddress,
        Password: "", // no password set
        DB:       0,  // use default DB
})
</pre>

<pre>
defer func() {
        err := client.Close()
        if err != nil {
                panic(err)
        }
}()
</pre>

<p>Úplný zdrojový kód dnešního prvního demonstračního příkladu vypadá
následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/go-redis/redis/v8"
)
&nbsp;
<i>// adresa určující službu Redisu, která se má použít</i>
const redisAddress = "localhost:6379"
&nbsp;
func <strong>main</strong>() {
        <i>// vytvoření nového klienta s předáním konfiguračních parametrů</i>
        client := redis.NewClient(&amp;redis.Options{
                Addr:     redisAddress,
                Password: "", // no password set
                DB:       0,  // use default DB
        })
&nbsp;
        <i>// neměli bychom zapomenout na ukončení práce s klientem</i>
        defer func() {
                err := client.Close()
                if err != nil {
                        panic(err)
                }
        }()
&nbsp;
        <i>// pouze zobrazíme textovou podobu struktury Client</i>
        fmt.Println("Redis client:", client)
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/go-redis/redis/v8"
)
&nbsp;
<i>// adresa určující službu Redisu, která se má použít</i>
const redisAddress = "localhost:6379"
&nbsp;
func <strong>main</strong>() {
        <i>// vytvoření nového klienta s předáním konfiguračních parametrů</i>
        client := redis.NewClient(&amp;redis.Options{
                Addr:     redisAddress,
                Password: "", // no password set
                DB:       0,  // use default DB
        })
&nbsp;
        <i>// neměli bychom zapomenout na ukončení práce s klientem</i>
        defer func() {
                err := client.Close()
                if err != nil {
                        panic(err)
                }
        }()
&nbsp;
        <i>// pouze zobrazíme textovou podobu struktury Client</i>
        fmt.Println("Redis client:", client)
&nbsp;
        <i>// získáme kontext a zobrazíme informace o něm</i>
        context := client.Context()
        fmt.Println("Context:", context)
&nbsp;
        <i>// pokus o klasický handshake typu PING-PONG</i>
        pong, err := client.Ping(context).Result()
        fmt.Println("Ping-pong result:", pong, err)
}
</pre>

<pre>
Redis client: Redis<localhost:6379 db:0>
Context: context.Background
Ping-pong result: PONG <nil>
</pre>

<pre>
Redis client: Redis<localhost:6379 db:0>
Context: context.Background
Ping-pong result:  dial tcp [::1]:6379: connect: connection refused
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/go-redis/redis/v8"
)
&nbsp;
<i>// adresa určující službu Redisu, která se má použít</i>
const redisAddress = "localhost:6379"
&nbsp;
func <strong>main</strong>() {
        <i>// konfigurační parametry nutné pro připojení k Redisu</i>
        options, err := redis.ParseURL("redis://" + redisAddress)
        if err != nil {
                panic(err)
        }
&nbsp;
        <i>// vytvoření nového klienta s předáním konfiguračních parametrů</i>
        client := redis.NewClient(options)
&nbsp;
        <i>// neměli bychom zapomenout na ukončení práce s klientem</i>
        defer func() {
                err := client.Close()
                if err != nil {
                        panic(err)
                }
        }()
&nbsp;
        <i>// pouze zobrazíme textovou podobu struktury Client</i>
        fmt.Println("Redis client:", client)
&nbsp;
        <i>// získáme kontext a zobrazíme informace o něm</i>
        context := client.Context()
        fmt.Println("Context:", context)
&nbsp;
        <i>// pokus o klasický handshake typu PING-PONG</i>
        pong, err := client.Ping(context).Result()
        fmt.Println("Ping-pong result:", pong, err)
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Uložení řetězců do Redisu</h2>

<p>Základním datovým typem, který se v&nbsp;Redisu používá, jsou řetězce. Ve
skutečnosti se jedná o sekvenci bajtů známé délky, které nejsou žádným způsobem
interpretovány. Díky tomu, že je délka řetězce uložena ve zvláštním atributu,
nemusí Redis používat například znak s&nbsp;kódem 0 pro ukončení řetězce a
tudíž se i tento znak může bez problému v&nbsp;řetězci vyskytovat (na rozdíl od
klasických céčkovských řetězců). Maximální délka řetězce je v&nbsp;současné
verzi Redisu 512 MB, což v&nbsp;praxi znamená, že se řetězce mohou použít
například pro uložení dokumentů, strukturovaných dat reprezentovaných ve
formátech JSON, XML, YAML atd. atd.</p>

<p>V&nbsp;dalším demonstračním příkladu je ukázáno, jakým způsobem je možné do
Redisu uložit řetězec z&nbsp;programu napsaného v&nbsp;Go. Použijeme zde metodu
<strong>Set</strong>, které je nutné předat kontext, klíč (což je také
řetězec), vlastní hodnotu a dále dobu platnosti hodnoty (tedy relativní čas
expirace). Pokud použijeme nulu, bude hodnota uložena trvale. Tato metoda vrací
případnou chybu:</p>

<pre>
err := <strong>client.Set</strong>(context,
        "Seriál o jazyku Go",
        "https://www.root.cz/serialy/programovaci-jazyk-go/",
        0).Err()
if err != nil {
        panic(err)
}
</pre>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "github.com/go-redis/redis/v8"
)
&nbsp;
<i>// adresa určující službu Redisu, která se má použít</i>
const redisAddress = "localhost:6379"
&nbsp;
func <strong>main</strong>() {
        <i>// vytvoření nového klienta s předáním konfiguračních parametrů</i>
        client := redis.NewClient(&amp;redis.Options{
                Addr:     redisAddress,
                Password: "", // no password set
                DB:       0,  // use default DB
        })
&nbsp;
        <i>// neměli bychom zapomenout na ukončení práce s klientem</i>
        defer func() {
                err := client.Close()
                if err != nil {
                        panic(err)
                }
        }()
&nbsp;
        <i>// získáme kontext</i>
        context := client.Context()
&nbsp;
        <i>// zápis hodnoty do databáze Redisu</i>
        err := client.Set(context,
                "Seriál o jazyku Go",
                "https://www.root.cz/serialy/programovaci-jazyk-go/",
                0).Err()
        if err != nil {
                panic(err)
        }
}
</pre>

<p>Po spuštění tohoto demonstračního příkladu se připojíme k&nbsp;Redisu a
pokusíme se přečíst uloženou hodnotu přímo z&nbsp;CLI klienta:</p>

<pre>
$ <strong>redis-cli </strong>
&nbsp;
127.0.0.1:6379&gt; <strong>ping</strong>
PONG
</pre>

<p>Vypíšeme všechny dostupné klíče:</p>

<pre>
127.0.0.1:6379&gt; <strong>keys *</strong>
1) "Seri\xc3\xa1l o jazyku Go"
</pre>

<p>A přečteme hodnotu:</p>

<pre>
127.0.0.1:6379&gt; <strong>get "Seri\xc3\xa1l o jazyku Go"</strong>
"https://www.root.cz/serialy/programovaci-jazyk-go/"
&nbsp;
127.0.0.1:6379&gt; <strong>quit</strong>
</pre>

<p>Pokud vám vadí, že se některé Unicode znaky nevypíšou čitelným způsobem, lze
klienta spustit s&nbsp;přepínačem <strong>--raw</strong> a ponechat
transformaci znaků na emulátoru terminálu:</p>

<pre>
$ <strong>redis-cli --raw</strong>
&nbsp;
127.0.0.1:6379&gt; <strong>ping</strong>
PONG
&nbsp;
127.0.0.1:6379&gt; <strong>keys *</strong>
Seriál o jazyku Go
&nbsp;
127.0.0.1:6379&gt; <strong>get "Seriál o jazyku Go"</strong>
https://www.root.cz/serialy/programovaci-jazyk-go/
&nbsp;
127.0.0.1:6379&gt; <strong>quit</strong>
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Přečtení řetězce z&nbsp;Redisu</h2>

<p></p>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/go-redis/redis/v8"
)
&nbsp;
<i>// adresa určující službu Redisu, která se má použít</i>
const redisAddress = "localhost:6379"
&nbsp;
func <strong>main</strong>() {
        <i>// vytvoření nového klienta s předáním konfiguračních parametrů</i>
        client := redis.NewClient(&amp;redis.Options{
                Addr:     redisAddress,
                Password: "", // no password set
                DB:       0,  // use default DB
        })
&nbsp;
        <i>// neměli bychom zapomenout na ukončení práce s klientem</i>
        defer func() {
                err := client.Close()
                if err != nil {
                        panic(err)
                }
        }()
&nbsp;
        <i>// získáme kontext</i>
        context := client.Context()
&nbsp;
        <i>// přečtení hodnoty z databáze Redisu</i>
        address, err := client.Get(context, "Seriál o jazyku Go").Result()
        if err != nil {
                panic(err)
        }
        fmt.Println("Adresa:", address)
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Rozlišení chyby, ke které při čtení došlo</h2>

<pre>
package <strong>main</strong>
&nbsp;
import (
        "fmt"
&nbsp;
        "github.com/go-redis/redis/v8"
)
&nbsp;
<i>// adresa určující službu Redisu, která se má použít</i>
const redisAddress = "localhost:6379"
&nbsp;
func <strong>main</strong>() {
        <i>// vytvoření nového klienta s předáním konfiguračních parametrů</i>
        client := redis.NewClient(&amp;redis.Options{
                Addr:     redisAddress,
                Password: "", // no password set
                DB:       0,  // use default DB
        })
&nbsp;
        <i>// neměli bychom zapomenout na ukončení práce s klientem</i>
        defer func() {
                err := client.Close()
                if err != nil {
                        panic(err)
                }
        }()
&nbsp;
        <i>// získáme kontext</i>
        context := client.Context()
&nbsp;
        <i>// přečtení hodnoty z databáze Redisu</i>
        address, err := client.Get(context, "Seriál o jazyku Go").Result()
&nbsp;
        <i>// vyhodnocení předchozí operace</i>
        switch {
        case err == redis.Nil:
                fmt.Println("no value found")
        case err != nil:
                panic(err)
        default:
                fmt.Println("Adresa:", address)
        }
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Nastavení doby expirace záznamu</h2>

<p>V&nbsp;případě, že se systém <i>Redis</i> používá pro implementaci
vyrovnávací paměti, je možné využít jeho další užitečnou funkci &ndash; u všech
záznamů je totiž možné specifikovat dobu jejich životnosti (<i>TTL &ndash; Time
To Live</i>). K&nbsp;tomuto účelu se používá několik příkazů, zejména pak:</p>

<table>
<tr><th>Příkaz</th><th>Význam</th></tr>
<tr><td>setex</td><td>vytvoření záznamu + nastavení jeho životnosti v&nbsp;sekundách</td></tr>
<tr><td>psetex</td><td>vytvoření záznamu + nastavení jeho životnosti v&nbsp;milisekundách</td></tr>
<tr><td>expire</td><td>nastavení životnosti existujícího záznamu v&nbsp;sekundách</td></tr>
<tr><td>pexpire</td><td>nastavení životnosti existujícího záznamu v&nbsp;milisekundách</td></tr>
</table>

<p>I tyto příkazy lze zavolat přímo z&nbsp;Go, a to díky existenci jejich ekvivalentu v&nbsp;rozhraní klienta.</p>

<pre>
package <strong>main</strong>

import (
        "fmt"
        "time"

        "github.com/go-redis/redis/v8"
)

<i>// adresa určující službu Redisu, která se má použít</i>
const redisAddress = "localhost:6379"

func <strong>main</strong>() {
        <i>// vytvoření nového klienta s předáním konfiguračních parametrů</i>
        client := redis.NewClient(&amp;redis.Options{
                Addr:     redisAddress,
                Password: "", // no password set
                DB:       0,  // use default DB
        })

        <i>// neměli bychom zapomenout na ukončení práce s klientem</i>
        defer func() {
                err := client.Close()
                if err != nil {
                        panic(err)
                }
        }()

        <i>// získáme kontext</i>
        context := client.Context()

        <i>// specifikace doby platnosti hodnoty uložené do Redisu</i>
        expiration, err := time.ParseDuration("10s")
        if err != nil {
                panic(err)
        }

        <i>// zápis hodnoty do databáze Redisu</i>
        err = client.Set(context,
                "Seriál o jazyku Go",
                "https://www.root.cz/serialy/programovaci-jazyk-go/",
                expiration).Err()
        if err != nil {
                panic(err)
        }

        for {
                <i>// přečtení hodnoty z databáze Redisu</i>
                address, err := client.Get(context, "Seriál o jazyku Go").Result()

                <i>// vyhodnocení předchozí operace</i>
                switch {
                case err == redis.Nil:
                        fmt.Println("no value found")
                        return
                case err != nil:
                        panic(err)
                default:
                        fmt.Println("Adresa:", address)
                }

                time.Sleep(1 * time.Second)
        }
}
</pre>

<pre>
Adresa: https://www.root.cz/serialy/programovaci-jazyk-go/
Adresa: https://www.root.cz/serialy/programovaci-jazyk-go/
Adresa: https://www.root.cz/serialy/programovaci-jazyk-go/
Adresa: https://www.root.cz/serialy/programovaci-jazyk-go/
Adresa: https://www.root.cz/serialy/programovaci-jazyk-go/
Adresa: https://www.root.cz/serialy/programovaci-jazyk-go/
Adresa: https://www.root.cz/serialy/programovaci-jazyk-go/
Adresa: https://www.root.cz/serialy/programovaci-jazyk-go/
Adresa: https://www.root.cz/serialy/programovaci-jazyk-go/
Adresa: https://www.root.cz/serialy/programovaci-jazyk-go/
no value found
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Zvýšení či snížení celočíselné hodnoty uložené v&nbsp;Redisu</h2>

<p>Zajímavé je, že i když Redis neobsahuje přímou podporu pro datový typ
&bdquo;celé číslo&ldquo;, nabízí svým uživatelům několik operací určených pro
<i>atomickou</i> změnu numerických hodnot reprezentovaných řetězcem
v&nbsp;běžném dekadickém formátu. Pro zvýšení hodnoty o jedničku se používá
operace <strong>INCR</strong>, opakem je pochopitelně funkce
<strong>DECR</strong>. V&nbsp;případě, že budeme potřebovat zvýšit nebo snížit
uloženou hodnotu o krok odlišný od jedničky, je možné pro tento účel použít
operaci pojmenovanou příhodně <strong>INCRBY</strong>.</p>

<pre>
package <strong>main</strong>

import (
        "fmt"

        "github.com/go-redis/redis/v8"
)

<i>// adresa určující službu Redisu, která se má použít</i>
const redisAddress = "localhost:6379"

func <strong>main</strong>() {
        <i>// vytvoření nového klienta s předáním konfiguračních parametrů</i>
        client := redis.NewClient(&amp;redis.Options{
                Addr:     redisAddress,
                Password: "", // no password set
                DB:       0,  // use default DB
        })

        <i>// neměli bychom zapomenout na ukončení práce s klientem</i>
        defer func() {
                err := client.Close()
                if err != nil {
                        panic(err)
                }
        }()

        <i>// získáme kontext</i>
        context := client.Context()

        <i>// pokus o klasický handshake typu PING-PONG</i>
        _, err := client.Ping(context).Result()
        if err != nil {
                panic(err)
        }

        <i>// smazání hodnoty, pokud existovala</i>
        client.Del(context, "counter")

        <i>// inkrementace (neexistující) hodnoty</i>
        newValue := client.Incr(context, "counter").Val()
        fmt.Println("Counter value:", newValue)

        <i>// přečtení hodnoty z databáze Redisu</i>
        newValue = client.IncrBy(context, "counter", 0).Val()
        fmt.Println("Counter value:", newValue)

        <i>// inkrementace (nyní již existující) hodnoty</i>
        newValue = client.Incr(context, "counter").Val()
        fmt.Println("Counter value:", newValue)

        <i>// dekrementace (nyní již existující) hodnoty</i>
        newValue = client.IncrBy(context, "counter", -1).Val()
        fmt.Println("Counter value:", newValue)
}
</pre>

<pre>
package <strong>main</strong>

import (
        "fmt"

        "github.com/go-redis/redis/v8"
)

<i>// adresa určující službu Redisu, která se má použít</i>
const redisAddress = "localhost:6379"

func <strong>main</strong>() {
        <i>// vytvoření nového klienta s předáním konfiguračních parametrů</i>
        client := redis.NewClient(&amp;redis.Options{
                Addr:     redisAddress,
                Password: "", // no password set
                DB:       0,  // use default DB
        })

        <i>// neměli bychom zapomenout na ukončení práce s klientem</i>
        defer func() {
                err := client.Close()
                if err != nil {
                        panic(err)
                }
        }()

        <i>// získáme kontext</i>
        context := client.Context()

        <i>// pokus o klasický handshake typu PING-PONG</i>
        _, err := client.Ping(context).Result()
        if err != nil {
                panic(err)
        }

        <i>// smazání hodnoty, pokud existovala</i>
        client.Del(context, "counter")

        <i>// dekrementace (neexistující) hodnoty</i>
        newValue := client.Decr(context, "counter").Val()
        fmt.Println("Counter value:", newValue)

        <i>// přečtení hodnoty z databáze Redisu</i>
        newValue = client.DecrBy(context, "counter", 0).Val()
        fmt.Println("Counter value:", newValue)

        <i>// dekrementace (nyní již existující) hodnoty</i>
        newValue = client.Decr(context, "counter").Val()
        fmt.Println("Counter value:", newValue)

        <i>// inkrementace (nyní již existující) hodnoty</i>
        newValue = client.DecrBy(context, "counter", -1).Val()
        fmt.Println("Counter value:", newValue)
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p>Podobná operace nazvaná <strong>INCRBYFLOAT</strong> slouží pro změnu
hodnoty čísla s&nbsp;desetinnou tečkou (opět ovšem uloženého formou běžného
řetězce). Následuje příklad na interpretaci řetězce jako čísla s&nbsp;plovoucí
řádovou čárkou:</p>

<pre>
package <strong>main</strong>

import (
        "fmt"

        "github.com/go-redis/redis/v8"
)

<i>// adresa určující službu Redisu, která se má použít</i>
const redisAddress = "localhost:6379"

func <strong>main</strong>() {
        <i>// vytvoření nového klienta s předáním konfiguračních parametrů</i>
        client := redis.NewClient(&amp;redis.Options{
                Addr:     redisAddress,
                Password: "", // no password set
                DB:       0,  // use default DB
        })

        <i>// neměli bychom zapomenout na ukončení práce s klientem</i>
        defer func() {
                err := client.Close()
                if err != nil {
                        panic(err)
                }
        }()

        <i>// získáme kontext</i>
        context := client.Context()

        <i>// pokus o klasický handshake typu PING-PONG</i>
        _, err := client.Ping(context).Result()
        if err != nil {
                panic(err)
        }

        <i>// smazání hodnoty, pokud existovala</i>
        client.Del(context, "accumulator")

        <i>// inkrementace (neexistující) hodnoty</i>
        newValue := client.IncrByFloat(context, "accumulator", 0.0).Val()
        fmt.Println("Accumulator value:", newValue)

        <i>// přečtení hodnoty z databáze Redisu</i>
        newValue = client.IncrByFloat(context, "accumulator", 0.0).Val()
        fmt.Println("Accumulator value:", newValue)

        <i>// inkrementace (nyní již existující) hodnoty</i>
        newValue = client.IncrByFloat(context, "accumulator", 3.14).Val()
        fmt.Println("Accumulator value:", newValue)

        <i>// dekrementace (nyní již existující) hodnoty</i>
        newValue = client.IncrByFloat(context, "accumulator", -10e12).Val()
        fmt.Println("Accumulator value:", newValue)
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>

<pre>
package <strong>main</strong>

import (
        "context"
        "fmt"

        "github.com/go-redis/redis/v8"
)

<i>// adresa určující službu Redisu, která se má použít</i>
const redisAddress = "localhost:6379"

func mustPush(client *redis.Client, context context.Context, key string, value string) {
        fmt.Println("Pushing", value, "into", key)
        <i>// přidání prvku do seznamu</i>
        length, err := client.LPush(context, key, value).Result()
        if err != nil {
                panic(err)
        }
        fmt.Println("List length", length)
}

func <strong>main</strong>() {
        <i>// vytvoření nového klienta s předáním konfiguračních parametrů</i>
        client := redis.NewClient(&amp;redis.Options{
                Addr:     redisAddress,
                Password: "", // no password set
                DB:       0,  // use default DB
        })

        <i>// neměli bychom zapomenout na ukončení práce s klientem</i>
        defer func() {
                err := client.Close()
                if err != nil {
                        panic(err)
                }
        }()

        <i>// získáme kontext</i>
        context := client.Context()

        <i>// pokus o klasický handshake typu PING-PONG</i>
        _, err := client.Ping(context).Result()
        if err != nil {
                panic(err)
        }

        <i>// smazání seznamu, pokud existoval</i>
        client.Del(context, "seznam")

        mustPush(client, context, "seznam", "foo")
        mustPush(client, context, "seznam", "bar")
        mustPush(client, context, "seznam", "baz")

        fmt.Println()

        <i>// přečtení všech hodnot ze seznamu</i>
        for {
                <i>// pokus o přečtení hodnoty ze seznamu</i>
                value, err := client.LPop(context, "seznam").Result()

                <i>// vyhodnocení předchozí operace</i>
                switch {
                case err == redis.Nil:
                        fmt.Println("no value found")
                        return
                case err != nil:
                        panic(err)
                default:
                        fmt.Println("Value from list", value)
                }

                length := client.LLen(context, "seznam").Val()
                fmt.Println("List length", length)
        }
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>

<pre>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>

<pre>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>

<pre>
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>

<pre>
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>

<pre>
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/go-root">https://github.com/tisnik/go-root</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
přibližně stovku kilobajtů), můžete namísto toho použít odkazy na jednotlivé
demonstrační příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_new_client/01_new_client.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_65/01_new_client/01_new_client.go">https://github.com/tisnik/go-root/blob/master/article_65/01_new_client/01_new_client.go</a></td></tr>
<tr><td> 2</td><td>02_ping_pong/02_ping_pong.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_65/02_ping_pong/02_ping_pong.go">https://github.com/tisnik/go-root/blob/master/article_65/02_ping_pong/02_ping_pong.go</a></td></tr>
<tr><td> 3</td><td>03_connection_string/03_connection_string.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_65/03_connection_string/03_connection_string.go">https://github.com/tisnik/go-root/blob/master/article_65/03_connection_string/03_connection_string.go</a></td></tr>
<tr><td> 4</td><td>04_set_string/04_set_string.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_65/04_set_string/04_set_string.go">https://github.com/tisnik/go-root/blob/master/article_65/04_set_string/04_set_string.go</a></td></tr>
<tr><td> 5</td><td>05_get_string/05_get_string.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_65/05_get_string/05_get_string.go">https://github.com/tisnik/go-root/blob/master/article_65/05_get_string/05_get_string.go</a></td></tr>
<tr><td> 6</td><td>06_more_checks/06_more_checks.go</td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_65/06_more_checks/06_more_checks.go">https://github.com/tisnik/go-root/blob/master/article_65/06_more_checks/06_more_checks.go</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_65/">https://github.com/tisnik/go-root/blob/master/article_65/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_65/">https://github.com/tisnik/go-root/blob/master/article_65/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_65/">https://github.com/tisnik/go-root/blob/master/article_65/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_65/">https://github.com/tisnik/go-root/blob/master/article_65/</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_65/">https://github.com/tisnik/go-root/blob/master/article_65/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_65/">https://github.com/tisnik/go-root/blob/master/article_65/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_65/">https://github.com/tisnik/go-root/blob/master/article_65/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/go-root/blob/master/article_65/">https://github.com/tisnik/go-root/blob/master/article_65/</a></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: jednotlivé zdrojové kódy jsou umístěny
ve vlastních adresářích, protože musíme využít <a
href="https://www.root.cz/clanky/system-modulu-v-programovacim-jazyce-go/">systém
modulů programovacího jazyka Go</a>.</div></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Repositář projektu s&nbsp;Redis klientem pro jazyk Go<br />
<a href="https://github.com/go-redis/redis">https://github.com/go-redis/redis</a>
</li>

<li>Type-safe Redis client for Go<br />
<a href="https://redis.uptrace.dev/">https://redis.uptrace.dev/</a>
</li>

<li>Dokumentace k&nbsp;balíčku redis<br />
<a href="https://pkg.go.dev/github.com/go-redis/redis/v8?tab=doc">https://pkg.go.dev/github.com/go-redis/redis/v8?tab=doc</a>
</li>

<li>godis &ndash; redis client implement by golang, inspired by jedis. <br />
<a href="https://github.com/piaohao/godis">https://github.com/piaohao/godis</a>
</li>

<li>How to Use Redis Go Client go-redis/redis with GoLang<br />
<a href="https://kb.objectrocket.com/redis/how-to-use-redis-go-client-go-redis-redis-with-golang-592">https://kb.objectrocket.com/redis/how-to-use-redis-go-client-go-redis-redis-with-golang-592</a>
</li>

<li>redeo<br />
<a href="https://github.com/bsm/redeo">https://github.com/bsm/redeo</a>
</li>

<li>Go Data Structures: Binary Search Tree<br />
<a href="https://flaviocopes.com/golang-data-structure-binary-search-tree/">https://flaviocopes.com/golang-data-structure-binary-search-tree/</a>
</li>

<li>Gobs of data<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<li>Formát BSON<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

<li>Golang Guide: A List of Top Golang Frameworks, IDEs &amp; Tools<br />
<a href="https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/">https://blog.intelligentbee.com/2017/08/14/golang-guide-list-top-golang-frameworks-ides-tools/</a>
</li>

<li>Tvorba univerzálních projevů<br />
<a href="http://www.kyblsoft.cz/projevy">http://www.kyblsoft.cz/projevy</a>
</li>

<li>Repositář projektu Gift<br />
<a href="https://github.com/disintegration/gift">https://github.com/disintegration/gift</a>
</li>

<li>Dokumentace k&nbsp;projektu Gift<br />
<a href="https://godoc.org/github.com/disintegration/gift">https://godoc.org/github.com/disintegration/gift</a>
</li>

<li>Online x86 / x64 Assembler and Disassembler<br />
<a href="https://defuse.ca/online-x86-assembler.htm#disassembly2">https://defuse.ca/online-x86-assembler.htm#disassembly2</a>
</li>

<li>The Design of the Go Assembler<br />
<a href="https://talks.golang.org/2016/asm.slide#1">https://talks.golang.org/2016/asm.slide#1</a>
</li>

<li>A Quick Guide to Go's Assembler<br />
<a href="https://golang.org/doc/asm">https://golang.org/doc/asm</a>
</li>

<li>AssemblyPolicy<br />
<a href="https://github.com/golang/go/wiki/AssemblyPolicy">https://github.com/golang/go/wiki/AssemblyPolicy</a>
</li>

<li>Geohash in Golang Assembly<br />
<a href="https://mmcloughlin.com/posts/geohash-assembly">https://mmcloughlin.com/posts/geohash-assembly</a>
</li>

<li>Command objdump<br />
<a href="https://golang.org/cmd/objdump/">https://golang.org/cmd/objdump/</a>
</li>

<li>Assembly<br />
<a href="https://goroutines.com/asm">https://goroutines.com/asm</a>
</li>

<li>Go &amp; Assembly<br />
<a href="http://www.doxsey.net/blog/go-and-assembly">http://www.doxsey.net/blog/go-and-assembly</a>
</li>

<li>A Foray Into Go Assembly Programming<br />
<a href="https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/">https://blog.sgmansfield.com/2017/04/a-foray-into-go-assembly-programming/</a>
</li>

<li>Golang Capturing log.Println And fmt.Println Output<br />
<a href="https://medium.com/@hau12a1/golang-capturing-log-println-and-fmt-println-output-770209c791b4">https://medium.com/@hau12a1/golang-capturing-log-println-and-fmt-println-output-770209c791b4</a>
</li>

<li>Stránka projektu plotly<br />
<a href="https://plot.ly/">https://plot.ly/</a>
</li>

<li>Plotly JavaScript Open Source Graphing Library<br />
<a href="https://plot.ly/javascript/">https://plot.ly/javascript/</a>
</li>

<li>Domain coloring<br />
<a href="https://en.wikipedia.org/wiki/Domain_coloring">https://en.wikipedia.org/wiki/Domain_coloring</a>
</li>

<li>Michael Fogleman's projects<br />
<a href="https://www.michaelfogleman.com/projects/tagged/graphics/">https://www.michaelfogleman.com/projects/tagged/graphics/</a>
</li>

<li>Color Graphs of Complex Functions<br />
<a href="https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html">https://web.archive.org/web/20120511021419/http://w.american.edu/cas/mathstat/lcrone/ComplexPlot.html</a>
</li>

<li>A Gallery of Complex Functions<br />
<a href="http://wismuth.com/complex/gallery.html">http://wismuth.com/complex/gallery.html</a>
</li>

<li>package glot<br />
<a href="https://godoc.org/github.com/Arafatk/glot">https://godoc.org/github.com/Arafatk/glot</a>
</li>

<li>Gnuplotting: Output terminals<br />
<a href="http://www.gnuplotting.org/output-terminals/">http://www.gnuplotting.org/output-terminals/</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1">https://medium.com/@Arafat./introducing-glot-the-plotting-library-for-golang-3133399948a1</a>
</li>

<li>Introducing Glot the plotting library for Golang<br />
<a href="https://blog.gopheracademy.com/advent-2018/introducing-glot/">https://blog.gopheracademy.com/advent-2018/introducing-glot/</a>
</li>

<li>Glot is a plotting library for Golang built on top of gnuplot<br />
<a href="https://github.com/Arafatk/glot">https://github.com/Arafatk/glot</a>
</li>

<li>Example plots (gonum/plot)<br />
<a href="https://github.com/gonum/plot/wiki/Example-plots">https://github.com/gonum/plot/wiki/Example-plots</a>
</li>

<li>A repository for plotting and visualizing data (gonum/plot)<br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>golang library to make https://chartjs.org/ plots<br />
<a href="https://github.com/brentp/go-chartjs">https://github.com/brentp/go-chartjs</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>The Gonum Numerical Computing Package<br />
<a href="https://www.gonum.org/post/introtogonum/">https://www.gonum.org/post/introtogonum/</a>
</li>

<li>Gomacro na GitHubu<br />
<a href="https://github.com/cosmos72/gomacro">https://github.com/cosmos72/gomacro</a>
</li>

<li>gophernotes - Use Go in Jupyter notebooks and nteract<br />
<a href="https://github.com/gopherdata/gophernotes">https://github.com/gopherdata/gophernotes</a>
</li>

<li>gonum<br />
<a href="https://github.com/gonum">https://github.com/gonum</a>
</li>

<li>go-gota/gota -  DataFrames and data wrangling in Go (Golang)<br />
<a href="https://porter.io/github.com/go-gota/gota">https://porter.io/github.com/go-gota/gota</a>
</li>

<li>A repository for plotting and visualizing data <br />
<a href="https://github.com/gonum/plot">https://github.com/gonum/plot</a>
</li>

<li>Gonum Numerical Packages<br />
<a href="https://www.gonum.org/">https://www.gonum.org/</a>
</li>

<li>Stránky projektu MinIO<br />
<a href="https://min.io/">https://min.io/</a>
</li>

<li>MinIO Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-quickstart-guide.html">https://docs.min.io/docs/minio-quickstart-guide.html</a>
</li>

<li>MinIO Go Client API Reference<br />
<a href="https://docs.min.io/docs/golang-client-api-reference">https://docs.min.io/docs/golang-client-api-reference</a>
</li>

<li>MinIO Python Client API Reference<br />
<a href="https://docs.min.io/docs/python-client-api-reference.html">https://docs.min.io/docs/python-client-api-reference.html</a>
</li>

<li>Performance at Scale: MinIO Pushes Past 1.4 terabits per second with 256 NVMe Drives<br />
<a href="https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/">https://blog.min.io/performance-at-scale-minio-pushes-past-1-3-terabits-per-second-with-256-nvme-drives/</a>
</li>

<li>Benchmarking MinIO vs. AWS S3 for Apache Spark<br />
<a href="https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/">https://blog.min.io/benchmarking-apache-spark-vs-aws-s3/</a>
</li>

<li>MinIO Client Quickstart Guide<br />
<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a>
</li>

<li>Analýza kvality zdrojových kódů Minia<br />
<a href="https://goreportcard.com/report/github.com/minio/minio">https://goreportcard.com/report/github.com/minio/minio</a>
</li>

<li>This is MinIO<br />
<a href="https://www.youtube.com/watch?v=vF0lQh0XOCs">https://www.youtube.com/watch?v=vF0lQh0XOCs</a>
</li>

<li>Running MinIO Standalone<br />
<a href="https://www.youtube.com/watch?v=dIQsPCHvHoM">https://www.youtube.com/watch?v=dIQsPCHvHoM</a>
</li>

<li>"Amazon S3 Compatible Storage in Kubernetes" - Rob Girard, Principal Tech Marketing Engineer, Minio<br />
<a href="https://www.youtube.com/watch?v=wlpn8K0jJ4U">https://www.youtube.com/watch?v=wlpn8K0jJ4U</a>
</li>

<li>Ginkgo<br />
<a href="http://onsi.github.io/ginkgo/">http://onsi.github.io/ginkgo/</a>
</li>

<li>Gomega<br />
<a href="https://onsi.github.io/gomega/">https://onsi.github.io/gomega/</a>
</li>

<li>Ginkgo's Preferred Matcher Library na GitHubu<br />
<a href="https://github.com/onsi/gomega/">https://github.com/onsi/gomega/</a>
</li>

<li>Provided Matchers<br />
<a href="http://onsi.github.io/gomega/#provided-matchers">http://onsi.github.io/gomega/#provided-matchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku goexpect<br />
<a href="https://godoc.org/github.com/google/goexpect">https://godoc.org/github.com/google/goexpect</a>
</li>

<li>Balíček goexpect<br />
<a href="https://github.com/google/goexpect">https://github.com/google/goexpect</a>
</li>

<li>Balíček go-expect<br />
<a href="https://github.com/Netflix/go-expect">https://github.com/Netflix/go-expect</a>
</li>

<li>Balíček gexpect<br />
<a href="https://github.com/ThomasRooney/gexpect">https://github.com/ThomasRooney/gexpect</a>
</li>

<li>Expect (originál naprogramovaný v&nbsp;TCL)<br />
<a href="https://core.tcl-lang.org/expect/index">https://core.tcl-lang.org/expect/index</a>
</li>

<li>Expect (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Expect">https://en.wikipedia.org/wiki/Expect</a>
</li>

<li>Pexpect<br />
<a href="https://pexpect.readthedocs.io/en/stable/">https://pexpect.readthedocs.io/en/stable/</a>
</li>

<li>Golang SSH Client: Multiple Commands, Crypto &amp; Goexpect Examples<br />
<a href="http://networkbit.ch/golang-ssh-client/">http://networkbit.ch/golang-ssh-client/</a>
</li>

<li>goblin na GitHubu<br />
<a href="https://github.com/franela/goblin">https://github.com/franela/goblin</a>
</li>

<li>Mocha framework<br />
<a href="https://mochajs.org/">https://mochajs.org/</a>
</li>

<li>frisby na GitHubu<br />
<a href="https://github.com/verdverm/frisby">https://github.com/verdverm/frisby</a>
</li>

<li>package frisby<br />
<a href="https://godoc.org/github.com/verdverm/frisby">https://godoc.org/github.com/verdverm/frisby</a>
</li>

<li>Frisby alternatives and similar packages (generováno)<br />
<a href="https://go.libhunt.com/frisby-alternatives">https://go.libhunt.com/frisby-alternatives</a>
</li>

<li>Cucumber for golang<br />
<a href="https://github.com/DATA-DOG/godog">https://github.com/DATA-DOG/godog</a>
</li>

<li>How to Use Godog for Behavior-driven Development in Go<br />
<a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go</a>
</li>

<li>Comparative Analysis Of GoLang Testing Frameworks<br />
<a href="https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks">https://www.slideshare.net/DushyantBhalgami/comparative-analysis-of-golang-testing-frameworks</a>
</li>

<li>A Quick Guide to Testing in Golang<br />
<a href="https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/">https://caitiem.com/2016/08/18/a-quick-guide-to-testing-in-golang/</a>
</li>

<li>Tom's Obvious, Minimal Language.<br />
<a href="https://github.com/toml-lang/toml">https://github.com/toml-lang/toml</a>
</li>

<li>xml.org<br />
<a href="http://www.xml.org/">http://www.xml.org/</a>
</li>

<li>Soubory .properties<br />
<a href="https://en.wikipedia.org/wiki/.properties">https://en.wikipedia.org/wiki/.properties</a>
</li>

<li>Soubory INI<br />
<a href="https://en.wikipedia.org/wiki/INI_file">https://en.wikipedia.org/wiki/INI_file</a>
</li>

<li>JSON to YAML<br />
<a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a>
</li>

<li>Data Format Converter<br />
<a href="https://toolkit.site/format.html">https://toolkit.site/format.html</a>
</li>

<li>Viper na GitHubu<br />
<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a>
</li>

<li>GoDotEnv na GitHubu<br />
<a href="https://github.com/joho/godotenv">https://github.com/joho/godotenv</a>
</li>

<li>The fantastic ORM library for Golang<br />
<a href="http://gorm.io/">http://gorm.io/</a>
</li>

<li>Dokumentace k&nbsp;balíčku <strong>gorilla/mux</strong><br />
<a href="https://godoc.org/github.com/gorilla/mux">https://godoc.org/github.com/gorilla/mux</a>
</li>

<li>Gorilla web toolkitk<br />
<a href="http://www.gorillatoolkit.org/">http://www.gorillatoolkit.org/</a>
</li>

<li>Metric types<br />
<a href="https://prometheus.io/docs/concepts/metric_types/">https://prometheus.io/docs/concepts/metric_types/</a>
</li>

<li>Histograms with Prometheus: A Tale of Woe<br />
<a href="http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/">http://linuxczar.net/blog/2017/06/15/prometheus-histogram-2/</a>
</li>

<li>Why are Prometheus histograms cumulative?<br />
<a href="https://www.robustperception.io/why-are-prometheus-histograms-cumulative">https://www.robustperception.io/why-are-prometheus-histograms-cumulative</a>
</li>

<li>Histograms and summaries<br />
<a href="https://prometheus.io/docs/practices/histograms/">https://prometheus.io/docs/practices/histograms/</a>
</li>

<li>Instrumenting Golang server in 5 min<br />
<a href="https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3">https://medium.com/@gsisimogang/instrumenting-golang-server-in-5-min-c1c32489add3</a>
</li>

<li>Semantic Import Versioning in Go<br />
<a href="https://www.aaronzhuo.com/semantic-import-versioning-in-go/">https://www.aaronzhuo.com/semantic-import-versioning-in-go/</a>
</li>

<li>Sémantické verzování<br />
<a href="https://semver.org/">https://semver.org/</a>
</li>

<li>Getting started with Go modules<br />
<a href="https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d">https://medium.com/@fonseka.live/getting-started-with-go-modules-b3dac652066d</a>
</li>

<li>Create projects independent of $GOPATH using Go Modules<br />
<a href="https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o">https://medium.com/mindorks/create-projects-independent-of-gopath-using-go-modules-802260cdfb51o</a>
</li>

<li>Anatomy of Modules in Go<br />
<a href="https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16">https://medium.com/rungo/anatomy-of-modules-in-go-c8274d215c16</a>
</li>

<li>Modules<br />
<a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a>
</li>

<li>Go Modules Tutorial<br />
<a href="https://tutorialedge.net/golang/go-modules-tutorial/">https://tutorialedge.net/golang/go-modules-tutorial/</a>
</li>

<li>Module support<br />
<a href="https://golang.org/cmd/go/#hdr-Module_support">https://golang.org/cmd/go/#hdr-Module_support</a>
</li>

<li>Go Lang: Memory Management and Garbage Collection<br />
<a href="https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/">https://vikash1976.wordpress.com/2017/03/26/go-lang-memory-management-and-garbage-collection/</a>
</li>

<li>Golang Internals, Part 4: Object Files and Function Metadata<br />
<a href="https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html">https://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html</a>
</li>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Vim as a Go (Golang) IDE using LSP and vim-go<br />
<a href="https://octetz.com/posts/vim-as-go-ide">https://octetz.com/posts/vim-as-go-ide</a>
</li>

<li>gopls<br />
<a href="https://github.com/golang/go/wiki/gopls">https://github.com/golang/go/wiki/gopls</a>
</li>

<li>IDE Integration Guide<br />
<a href="https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md">https://github.com/stamblerre/gocode/blob/master/docs/IDE_integration.md</a>
</li>

<li>How to instrument Go code with custom expvar metrics<br />
<a href="https://sysdig.com/blog/golang-expvar-custom-metrics/">https://sysdig.com/blog/golang-expvar-custom-metrics/</a>
</li>

<li>Golang expvar metricset (Metricbeat Reference)<br />
<a href="https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html">https://www.elastic.co/guide/en/beats/metricbeat/7.x/metricbeat-metricset-golang-expvar.html</a>
</li>

<li>Package expvar<br />
<a href="https://golang.org/pkg/expvar/#NewInt">https://golang.org/pkg/expvar/#NewInt</a>
</li>

<li>Java Platform Debugger Architecture: Overview<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jpda/jpda.html</a>
</li>

<li>The JVM Tool Interface (JVM TI): How VM Agents Work<br />
<a href="https://www.oracle.com/technetwork/articles/javase/index-140680.html">https://www.oracle.com/technetwork/articles/javase/index-140680.html</a>
</li>

<li>JVM Tool Interface Version 11.0<br />
<a href="https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html">https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html</a>
</li>

<li>Creating a Debugging and Profiling Agent with JVMTI<br />
<a href="http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html">http://www.oracle.com/technetwork/articles/javase/jvmti-136367.html</a>
</li>

<li>JVM TI (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/JVM_TI">http://en.wikipedia.org/wiki/JVM_TI</a>
</li>

<li>IBM JVMTI extensions<br />
<a href="http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html">http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=%2Fcom.ibm.softrt.doc%2Fdiag%2Ftools%2Fjvmti_extensions.html</a>
</li>

<li>Go &amp; cgo: integrating existing C code with Go<br />
<a href="http://akrennmair.github.io/golang-cgo-slides/#1">http://akrennmair.github.io/golang-cgo-slides/#1</a>
</li>

<li>Using cgo to call C code from within Go code<br />
<a href="https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/">https://wenzr.wordpress.com/2018/06/07/using-cgo-to-call-c-code-from-within-go-code/</a>
</li>

<li>Package trace<br />
<a href="https://golang.org/pkg/runtime/trace/">https://golang.org/pkg/runtime/trace/</a>
</li>

<li>Introducing HTTP Tracing<br />
<a href="https://blog.golang.org/http-tracing">https://blog.golang.org/http-tracing</a>
</li>

<li>Command trace<br />
<a href="https://golang.org/cmd/trace/">https://golang.org/cmd/trace/</a>
</li>

<li>A StreamLike, Immutable, Lazy Loading and smart Golang Library to deal with slices<br />
<a href="https://github.com/wesovilabs/koazee">https://github.com/wesovilabs/koazee</a>
</li>

<li>Funkce vyššího řádu v knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Delve: a debugger for the Go programming language.<br />
<a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a>
</li>

<li>Příkazy debuggeru Delve<br />
<a href="https://github.com/go-delve/delve/tree/master/Documentation/cli">https://github.com/go-delve/delve/tree/master/Documentation/cli</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Debugging Go Code with GDB<br />
<a href="https://golang.org/doc/gdb">https://golang.org/doc/gdb</a>
</li>

<li>Debugging Go (golang) programs with gdb <br />
<a href="https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html">https://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Go is on a Trajectory to Become the Next Enterprise Programming Language<br />
<a href="https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e">https://hackernoon.com/go-is-on-a-trajectory-to-become-the-next-enterprise-programming-language-3b75d70544e</a>
</li>

<li>Go Proverbs: Simple, Poetic, Pithy<br />
<a href="https://go-proverbs.github.io/">https://go-proverbs.github.io/</a>
</li>

<li>Handling Sparse Files on Linux<br />
<a href="https://www.systutorials.com/136652/handling-sparse-files-on-linux/">https://www.systutorials.com/136652/handling-sparse-files-on-linux/</a>
</li>

<li>Gzip (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>
</li>

<li>Deflate<br />
<a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>
</li>

<li>10 tools written in Go that every developer needs to know<br />
<a href="https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/">https://gustavohenrique.net/en/2019/01/10-tools-written-in-go-that-every-dev-needs-to-know/</a>
</li>

<li>Hexadecimální prohlížeče a editory s textovým uživatelským rozhraním<br />
<a href="https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/">https://www.root.cz/clanky/hexadecimalni-prohlizece-a-editory-s-textovym-uzivatelskym-rozhranim/</a>
</li>

<li>Hex dump<br />
<a href="https://en.wikipedia.org/wiki/Hex_dump">https://en.wikipedia.org/wiki/Hex_dump</a>
</li>

<li>Rozhraní io.ByteReader<br />
<a href="https://golang.org/pkg/io/#ByteReader">https://golang.org/pkg/io/#ByteReader</a>
</li>

<li>Rozhraní io.RuneReader<br />
<a href="https://golang.org/pkg/io/#RuneReader">https://golang.org/pkg/io/#RuneReader</a>
</li>

<li>Rozhraní io.ByteScanner<br />
<a href="https://golang.org/pkg/io/#ByteScanner">https://golang.org/pkg/io/#ByteScanner</a>
</li>

<li>Rozhraní io.RuneScanner<br />
<a href="https://golang.org/pkg/io/#RuneScanner">https://golang.org/pkg/io/#RuneScanner</a>
</li>

<li>Rozhraní io.Closer<br />
<a href="https://golang.org/pkg/io/#Closer">https://golang.org/pkg/io/#Closer</a>
</li>

<li>Rozhraní io.Reader<br />
<a href="https://golang.org/pkg/io/#Reader">https://golang.org/pkg/io/#Reader</a>
</li>

<li>Rozhraní io.Writer<br />
<a href="https://golang.org/pkg/io/#Writer">https://golang.org/pkg/io/#Writer</a>
</li>

<li>Typ Strings.Reader<br />
<a href="https://golang.org/pkg/strings/#Reader">https://golang.org/pkg/strings/#Reader</a>
</li>

<li>VACUUM (SQL)<br />
<a href="https://www.sqlite.org/lang_vacuum.html">https://www.sqlite.org/lang_vacuum.html</a>
</li>

<li>VACUUM (Postgres)<br />
<a href="https://www.postgresql.org/docs/8.4/sql-vacuum.html">https://www.postgresql.org/docs/8.4/sql-vacuum.html</a>
</li>

<li>go-cron<br />
<a href="https://github.com/rk/go-cron">https://github.com/rk/go-cron</a>
</li>

<li>gocron<br />
<a href="https://github.com/jasonlvhit/gocron">https://github.com/jasonlvhit/gocron</a>
</li>

<li>clockwork<br />
<a href="https://github.com/whiteShtef/clockwork">https://github.com/whiteShtef/clockwork</a>
</li>

<li>clockwerk<br />
<a href="https://github.com/onatm/clockwerk">https://github.com/onatm/clockwerk</a>
</li>

<li>JobRunner<br />
<a href="https://github.com/bamzi/jobrunner">https://github.com/bamzi/jobrunner</a>
</li>

<li>Rethinking Cron<br />
<a href="https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/">https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/</a>
</li>

<li>In the Beginning was the Command Line<br />
<a href="https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html">https://web.archive.org/web/20180218045352/http://www.cryptonomicon.com/beginning.html</a>
</li>

<li>repl.it (REPL pro různé jazyky)<br />
<a href="https://repl.it/languages">https://repl.it/languages</a>
</li>

<li>GOCUI - Go Console User Interface (celé uživatelské prostředí, nejenom input box)<br />
<a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a>
</li>

<li>Read–eval–print loop<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>go-prompt<br />
<a href="https://github.com/c-bata/go-prompt">https://github.com/c-bata/go-prompt</a>
</li>

<li>readline<br />
<a href="https://github.com/chzyer/readline">https://github.com/chzyer/readline</a>
</li>

<li>A pure golang implementation for GNU-Readline kind library<br />
<a href="https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/">https://golangexample.com/a-pure-golang-implementation-for-gnu-readline-kind-library/</a>
</li>

<li>go-readline<br />
<a href="https://github.com/fiorix/go-readline">https://github.com/fiorix/go-readline</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>oglematchers</i><br />
<a href="https://godoc.org/github.com/jacobsa/oglematchers">https://godoc.org/github.com/jacobsa/oglematchers</a>
</li>

<li>Balíček <i>oglematchers</i><br />
<a href="https://github.com/jacobsa/oglematchers">https://github.com/jacobsa/oglematchers</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>ogletest</i><br />
<a href="https://godoc.org/github.com/jacobsa/ogletest">https://godoc.org/github.com/jacobsa/ogletest</a>
</li>

<li>Balíček <i>ogletest</i><br />
<a href="https://github.com/jacobsa/ogletest">https://github.com/jacobsa/ogletest</a>
</li>

<li>Dokumentace k&nbsp;balíčku <i>assert</i><br />
<a href="https://godoc.org/github.com/stretchr/testify/assert">https://godoc.org/github.com/stretchr/testify/assert</a>
</li>

<li>Testify - Thou Shalt Write Tests<br />
<a href="https://github.com/stretchr/testify/">https://github.com/stretchr/testify/</a>
</li>

<li>package testing<br />
<a href="https://golang.org/pkg/testing/">https://golang.org/pkg/testing/</a>
</li>

<li>Golang basics - writing unit tests<br />
<a href="https://blog.alexellis.io/golang-writing-unit-tests/">https://blog.alexellis.io/golang-writing-unit-tests/</a>
</li>

<li>An Introduction to Programming in Go / Testing<br />
<a href="https://www.golang-book.com/books/intro/12">https://www.golang-book.com/books/intro/12</a>
</li>

<li>An Introduction to Testing in Go<br />
<a href="https://tutorialedge.net/golang/intro-testing-in-go/">https://tutorialedge.net/golang/intro-testing-in-go/</a>
</li>

<li>Advanced Go Testing Tutorial<br />
<a href="https://tutorialedge.net/golang/advanced-go-testing-tutorial/">https://tutorialedge.net/golang/advanced-go-testing-tutorial/</a>
</li>

<li>GoConvey<br />
<a href="http://goconvey.co/">http://goconvey.co/</a>
</li>

<li>Testing Techniques<br />
<a href="https://talks.golang.org/2014/testing.slide">https://talks.golang.org/2014/testing.slide</a>
</li>

<li>5 simple tips and tricks for writing unit tests in #golang<br />
<a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742</a>
</li>

<li>Afinní transformace<br />
<a href="https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic">https://cs.wikibooks.org/wiki/Geometrie/Afinn%C3%AD_transformace_sou%C5%99adnic</a>
</li>

<li>package gg<br />
<a href="https://godoc.org/github.com/fogleman/gg">https://godoc.org/github.com/fogleman/gg</a>
</li>

<li>Generate an animated GIF with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/">http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</a>
</li>

<li>Generate an image programmatically with Golang<br />
<a href="http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/">http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</a>
</li>

<li>The Go image package<br />
<a href="https://blog.golang.org/go-image-package">https://blog.golang.org/go-image-package</a>
</li>

<li>Balíček draw2D: 2D rendering for different output (raster, pdf, svg)<br />
<a href="https://github.com/llgcode/draw2d">https://github.com/llgcode/draw2d</a>
</li>

<li>Draw a rectangle in Golang?<br />
<a href="https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang">https://stackoverflow.com/questions/28992396/draw-a-rectangle-in-golang</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Smile<br />
<a href="https://github.com/FasterXML/smile-format-specification">https://github.com/FasterXML/smile-format-specification</a>
</li>

<li>Protocol-Buffers<br />
<a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Unmarshalling<br />
<a href="https://en.wikipedia.org/wiki/Unmarshalling">https://en.wikipedia.org/wiki/Unmarshalling</a>
</li>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>Package json<br />
<a href="https://golang.org/pkg/encoding/json/">https://golang.org/pkg/encoding/json/</a>
</li>

<li>The Go Blog: JSON and Go<br />
<a href="https://blog.golang.org/json-and-go">https://blog.golang.org/json-and-go</a>
</li>

<li>Go by Example: JSON<br />
<a href="https://gobyexample.com/json">https://gobyexample.com/json</a>
</li>

<li>Writing Web Applications<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Build web application with Golang<br />
<a href="https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details">https://legacy.gitbook.com/book/astaxie/build-web-application-with-golang/details</a>
</li>

<li>Golang Templates - Golang Web Pages<br />
<a href="https://www.youtube.com/watch?v=TkNIETmF-RU">https://www.youtube.com/watch?v=TkNIETmF-RU</a>
</li>

<li>Simple Golang HTTPS/TLS Examples<br />
<a href="https://github.com/denji/golang-tls">https://github.com/denji/golang-tls</a>
</li>

<li>Playing with images in HTTP response in golang<br />
<a href="https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang">https://www.sanarias.com/blog/1214PlayingwithimagesinHTTPresponseingolang</a>
</li>

<li>MIME Types List<br />
<a href="https://www.freeformatter.com/mime-types-list.html">https://www.freeformatter.com/mime-types-list.html</a>
</li>

<li>Go Mutex Tutorial<br />
<a href="https://tutorialedge.net/golang/go-mutex-tutorial/">https://tutorialedge.net/golang/go-mutex-tutorial/</a>
</li>

<li>Creating A Simple Web Server With Golang<br />
<a href="https://tutorialedge.net/golang/creating-simple-web-server-with-golang/">https://tutorialedge.net/golang/creating-simple-web-server-with-golang/</a>
</li>

<li>Building a Web Server in Go<br />
<a href="https://thenewstack.io/building-a-web-server-in-go/">https://thenewstack.io/building-a-web-server-in-go/</a>
</li>

<li>How big is the pipe buffer?<br />
<a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a>
</li>

<li>How to turn off buffering of stdout in C<br />
<a href="https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c">https://stackoverflow.com/questions/7876660/how-to-turn-off-buffering-of-stdout-in-c</a>
</li>

<li>setbuf(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/setbuf">https://linux.die.net/man/3/setbuf</a>
</li>

<li>setvbuf(3) - Linux man page (stejný obsah jako předchozí stránka)<br />
<a href="https://linux.die.net/man/3/setvbuf">https://linux.die.net/man/3/setvbuf</a>
</li>

<li>Select waits on a group of channels<br />
<a href="https://yourbasic.org/golang/select-explained/">https://yourbasic.org/golang/select-explained/</a>
</li>

<li>Rob Pike: Simplicity is Complicated (video)<br />
<a href="http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893">http://www.golang.to/posts/dotgo-2015-rob-pike-simplicity-is-complicated-youtube-16893</a>
</li>

<li>Algorithms to Go<br />
<a href="https://yourbasic.org/">https://yourbasic.org/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Go Defer Simplified with Practical Visuals<br />
<a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff</a>
</li>

<li>5 More Gotchas of Defer in Go — Part II<br />
<a href="https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa">https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-ii-cc550f6ad9aa</a>
</li>

<li>The Go Blog: Defer, Panic, and Recover<br />
<a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a>
</li>

<li>The defer keyword in Swift 2: try/finally done right<br />
<a href="https://www.hackingwithswift.com/new-syntax-swift-2-defer">https://www.hackingwithswift.com/new-syntax-swift-2-defer</a>
</li>

<li>Swift Defer Statement<br />
<a href="https://andybargh.com/swift-defer-statement/">https://andybargh.com/swift-defer-statement/</a>
</li>

<li>Modulo operation (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Modulo_operation">https://en.wikipedia.org/wiki/Modulo_operation</a>
</li>

<li>Node.js vs Golang: Battle of the Next-Gen Languages<br />
<a href="https://www.hostingadvice.com/blog/nodejs-vs-golang/">https://www.hostingadvice.com/blog/nodejs-vs-golang/</a>
</li>

<li>The Go Programming Language (home page)<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>GoDoc<br />
<a href="https://godoc.org/">https://godoc.org/</a>
</li>

<li>Go (programming language), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Go_(programming_language)">https://en.wikipedia.org/wiki/Go_(programming_language)</a>
</li>

<li>Go Books (kniha o jazyku Go)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language Specification<br />
<a href="https://golang.org/ref/spec">https://golang.org/ref/spec</a>
</li>

<li>Go: the Good, the Bad and the Ugly<br />
<a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/</a>
</li>

<li>Package builtin<br />
<a href="https://golang.org/pkg/builtin/">https://golang.org/pkg/builtin/</a>
</li>

<li>Package fmt<br />
<a href="https://golang.org/pkg/fmt/">https://golang.org/pkg/fmt/</a>
</li>

<li>The Little Go Book (další kniha)<br />
<a href="https://github.com/dariubs/GoBooks">https://github.com/dariubs/GoBooks</a>
</li>

<li>The Go Programming Language by Brian W. Kernighan, Alan A. A. Donovan<br />
<a href="https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html">https://www.safaribooksonline.com/library/view/the-go-programming/9780134190570/ebook_split_010.html</a>
</li>

<li>Learning Go<br />
<a href="https://www.miek.nl/go/">https://www.miek.nl/go/</a>
</li>

<li>Go Bootcamp<br />
<a href="http://www.golangbootcamp.com/">http://www.golangbootcamp.com/</a>
</li>

<li>Programming in Go: Creating Applications for the 21st Century (další kniha o jazyku Go)<br />
<a href="http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637">http://www.informit.com/store/programming-in-go-creating-applications-for-the-21st-9780321774637</a>
</li>

<li>Introducing Go (Build Reliable, Scalable Programs)<br />
<a href="http://shop.oreilly.com/product/0636920046516.do">http://shop.oreilly.com/product/0636920046516.do</a>
</li>

<li>Learning Go Programming<br />
<a href="https://www.packtpub.com/application-development/learning-go-programming">https://www.packtpub.com/application-development/learning-go-programming</a>
</li>

<li>The Go Blog<br />
<a href="https://blog.golang.org/">https://blog.golang.org/</a>
</li>

<li>Getting to Go: The Journey of Go's Garbage Collector<br />
<a href="https://blog.golang.org/ismmkeynote">https://blog.golang.org/ismmkeynote</a>
</li>

<li>Go (programovací jazyk, Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)">https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)</a>
</li>

<li>Rychle, rychleji až úplně nejrychleji s jazykem Go<br />
<a href="https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/">https://www.root.cz/clanky/rychle-rychleji-az-uplne-nejrychleji-s-jazykem-go/</a>
</li>

<li>Installing Go on the Raspberry Pi<br />
<a href="https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">https://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi</a>
</li>

<li>How the Go runtime implements maps efficiently (without generics)<br />
<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a>
</li>

<li>Niečo málo o Go - Golang (slovensky)<br />
<a href="http://golangsk.logdown.com/">http://golangsk.logdown.com/</a>
</li>

<li>How Many Go Developers Are There?<br />
<a href="https://research.swtch.com/gophercount">https://research.swtch.com/gophercount</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2018)<br />
<a href="https://insights.stackoverflow.com/survey/2018/#most-popular-technologies">https://insights.stackoverflow.com/survey/2018/#most-popular-technologies</a>
</li>

<li>Most Popular Technologies (Stack Overflow Survery 2017)<br />
<a href="https://insights.stackoverflow.com/survey/2017#technology">https://insights.stackoverflow.com/survey/2017#technology</a>
</li>

<li>JavaScript vs. Golang for IoT: Is Gopher Winning?<br />
<a href="https://www.iotforall.com/javascript-vs-golang-iot/">https://www.iotforall.com/javascript-vs-golang-iot/</a>
</li>

<li>The Go Programming Language: Release History<br />
<a href="https://golang.org/doc/devel/release.html">https://golang.org/doc/devel/release.html</a>
</li>

<li>Go 1.11 Release Notes<br />
<a href="https://golang.org/doc/go1.11">https://golang.org/doc/go1.11</a>
</li>

<li>Go 1.10 Release Notes<br />
<a href="https://golang.org/doc/go1.10">https://golang.org/doc/go1.10</a>
</li>

<li>Go 1.9 Release Notes (tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.9">https://golang.org/doc/go1.9</a>
</li>

<li>Go 1.8 Release Notes (i tato verze je stále používána)<br />
<a href="https://golang.org/doc/go1.8">https://golang.org/doc/go1.8</a>
</li>

<li>Go on Fedora<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-installation.html">https://developer.fedoraproject.org/tech/languages/go/go-installation.html</a>
</li>

<li>Writing Go programs<br />
<a href="https://developer.fedoraproject.org/tech/languages/go/go-programs.html">https://developer.fedoraproject.org/tech/languages/go/go-programs.html</a>
</li>

<li>The GOPATH environment variable<br />
<a href="https://tip.golang.org/doc/code.html#GOPATH">https://tip.golang.org/doc/code.html#GOPATH</a>
</li>

<li>Command gofmt<br />
<a href="https://tip.golang.org/cmd/gofmt/">https://tip.golang.org/cmd/gofmt/</a>
</li>

<li>The Go Blog: go fmt your code<br />
<a href="https://blog.golang.org/go-fmt-your-code">https://blog.golang.org/go-fmt-your-code</a>
</li>

<li>C? Go? Cgo!<br />
<a href="https://blog.golang.org/c-go-cgo">https://blog.golang.org/c-go-cgo</a>
</li>

<li>Spaces vs. Tabs: A 20-Year Debate Reignited by Google’s Golang<br />
<a href="https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/">https://thenewstack.io/spaces-vs-tabs-a-20-year-debate-and-now-this-what-the-hell-is-wrong-with-go/</a>
</li>

<li>400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?<br />
<a href="https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd">https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd</a>
</li>

<li>Gofmt No Longer Allows Spaces. Tabs Only<br />
<a href="https://news.ycombinator.com/item?id=7914523">https://news.ycombinator.com/item?id=7914523</a>
</li>

<li>Why does Go "go fmt" uses tabs instead of whitespaces?<br />
<a href="https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces">https://www.quora.com/Why-does-Go-go-fmt-uses-tabs-instead-of-whitespaces</a>
</li>

<li>Interactive: The Top Programming Languages 2018<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018</a>
</li>

<li>Go vs. Python<br />
<a href="https://www.peterbe.com/plog/govspy">https://www.peterbe.com/plog/govspy</a>
</li>

<li>PackageManagementTools<br />
<a href="https://github.com/golang/go/wiki/PackageManagementTools">https://github.com/golang/go/wiki/PackageManagementTools</a>
</li>

<li>A Tour of Go: Type inference<br />
<a href="https://tour.golang.org/basics/14">https://tour.golang.org/basics/14</a>
</li>

<li>Go Slices: usage and internals<br />
<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>
</li>

<li>Go by Example: Slices<br />
<a href="https://gobyexample.com/slices">https://gobyexample.com/slices</a>
</li>

<li>What is the point of slice type in Go?<br />
<a href="https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go">https://stackoverflow.com/questions/2098874/what-is-the-point-of-slice-type-in-go</a>
</li>

<li>The curious case of Golang array and slices<br />
<a href="https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335">https://medium.com/@hackintoshrao/the-curious-case-of-golang-array-and-slices-2565491d4335</a>
</li>

<li>Introduction to Slices in Golang<br />
<a href="https://www.callicoder.com/golang-slices/">https://www.callicoder.com/golang-slices/</a>
</li>

<li>Golang: Understanding 'null' and nil<br />
<a href="https://newfivefour.com/golang-null-nil.html">https://newfivefour.com/golang-null-nil.html</a>
</li>

<li>What does nil mean in golang?<br />
<a href="https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang">https://stackoverflow.com/questions/35983118/what-does-nil-mean-in-golang</a>
</li>

<li>nils In Go<br />
<a href="https://go101.org/article/nil.html">https://go101.org/article/nil.html</a>
</li>

<li>Go slices are not dynamic arrays<br />
<a href="https://appliedgo.net/slices/">https://appliedgo.net/slices/</a>
</li>

<li>Go-is-no-good (nelze brát doslova)<br />
<a href="https://github.com/ksimka/go-is-not-good">https://github.com/ksimka/go-is-not-good</a>
</li>

<li>Rust vs. Go<br />
<a href="https://news.ycombinator.com/item?id=13430108">https://news.ycombinator.com/item?id=13430108</a>
</li>

<li>Seriál Programovací jazyk Rust<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-rust/">https://www.root.cz/serialy/programovaci-jazyk-rust/</a>
</li>

<li>Modern garbage collection: A look at the Go GC strategy<br />
<a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e</a>
</li>

<li>Go GC: Prioritizing low latency and simplicity<br />
<a href="https://blog.golang.org/go15gc">https://blog.golang.org/go15gc</a>
</li>

<li>Is Golang a good language for embedded systems?<br />
<a href="https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems">https://www.quora.com/Is-Golang-a-good-language-for-embedded-systems</a>
</li>

<li>Running GoLang on an STM32 MCU. A quick tutorial.<br />
<a href="https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial">https://www.mickmake.com/post/running-golang-on-an-mcu-a-quick-tutorial</a>
</li>

<li>Go, Robot, Go! Golang Powered Robotics<br />
<a href="https://gobot.io/">https://gobot.io/</a>
</li>

<li>Emgo: Bare metal Go (language for programming embedded systems)<br />
<a href="https://github.com/ziutek/emgo">https://github.com/ziutek/emgo</a>
</li>

<li>UTF-8 history<br />
<a href="https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt</a>
</li>

<li>Less is exponentially more<br />
<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html</a>
</li>

<li>Should I Rust, or Should I Go<br />
<a href="https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9">https://codeburst.io/should-i-rust-or-should-i-go-59a298e00ea9</a>
</li>

<li>Setting up and using gccgo<br />
<a href="https://golang.org/doc/install/gccgo">https://golang.org/doc/install/gccgo</a>
</li>

<li>Elastic Tabstops<br />
<a href="http://nickgravgaard.com/elastic-tabstops/">http://nickgravgaard.com/elastic-tabstops/</a>
</li>

<li>Strings, bytes, runes and characters in Go<br />
<a href="https://blog.golang.org/strings">https://blog.golang.org/strings</a>
</li>

<li>Datový typ<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%BD_typ">https://cs.wikipedia.org/wiki/Datov%C3%BD_typ</a>
</li>

<li>Seriál o programovacím jazyku Rust: Základní (primitivní) datové typy<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09">https://www.root.cz/clanky/programovaci-jazyk-rust-nahrada-c-nebo-slepa-cesta/#k09</a>
</li>

<li>Seriál o programovacím jazyku Rust: Vytvoření „řezu“ z pole<br />
<a href="https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06">https://www.root.cz/clanky/prace-s-poli-v-programovacim-jazyku-rust/#k06</a>
</li>

<li>Seriál o programovacím jazyku Rust: Řezy (slice) vektoru<br />
<a href="https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05">https://www.root.cz/clanky/prace-s-vektory-v-programovacim-jazyku-rust/#k05</a>
</li>

<li>Printf Format Strings<br />
<a href="https://www.cprogramming.com/tutorial/printf-format-strings.html">https://www.cprogramming.com/tutorial/printf-format-strings.html</a>
</li>

<li>Java: String.format<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-</a>
</li>

<li>Java: format string syntax<br />
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax">https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax</a>
</li>

<li>Selectors<br />
<a href="https://golang.org/ref/spec#Selectors">https://golang.org/ref/spec#Selectors</a>
</li>

<li>Calling Go code from Python code<br />
<a href="http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/">http://savorywatt.com/2015/09/18/calling-go-code-from-python-code/</a>
</li>

<li>Go Data Structures: Interfaces <br />
<a href="https://research.swtch.com/interfaces">https://research.swtch.com/interfaces</a>
</li>

<li>How to use interfaces in Go<br />
<a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go</a>
</li>

<li>Interfaces in Go (part I)<br />
<a href="https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c">https://medium.com/golangspec/interfaces-in-go-part-i-4ae53a97479c</a>
</li>

<li>Part 21: Goroutines<br />
<a href="https://golangbot.com/goroutines/">https://golangbot.com/goroutines/</a>
</li>

<li>Part 22: Channels<br />
<a href="https://golangbot.com/channels/">https://golangbot.com/channels/</a>
</li>

<li>[Go] Lightweight eventbus with async compatibility for Go<br />
<a href="https://github.com/asaskevich/EventBus">https://github.com/asaskevich/EventBus</a>
</li>

<li>What about Trait support in Golang?<br />
<a href="https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/">https://www.reddit.com/r/golang/comments/8mfykl/what_about_trait_support_in_golang/</a>
</li>

<li>Don't Get Bitten by Pointer vs Non-Pointer Method Receivers in Golang<br />
<a href="https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/">https://nathanleclaire.com/blog/2014/08/09/dont-get-bitten-by-pointer-vs-non-pointer-method-receivers-in-golang/</a>
</li>

<li>Control Flow<br />
<a href="https://en.wikipedia.org/wiki/Control_flow">https://en.wikipedia.org/wiki/Control_flow</a>
</li>

<li>Structured programming<br />
<a href="https://en.wikipedia.org/wiki/Structured_programming">https://en.wikipedia.org/wiki/Structured_programming</a>
</li>

<li>Control Structures<br />
<a href="https://www.golang-book.com/books/intro/5">https://www.golang-book.com/books/intro/5</a>
</li>

<li>Control structures - Go if else statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html">http://golangtutorials.blogspot.com/2011/06/control-structures-if-else-statement.html</a>
</li>

<li>Control structures - Go switch case statement<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-switch-case.html</a>
</li>

<li>Control structures - Go for loop, break, continue, range<br />
<a href="http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html">http://golangtutorials.blogspot.com/2011/06/control-structures-go-for-loop-break.html</a>
</li>

<li>Goroutine IDs<br />
<a href="https://blog.sgmansfield.com/2015/12/goroutine-ids/">https://blog.sgmansfield.com/2015/12/goroutine-ids/</a>
</li>

<li>Different ways to pass channels as arguments in function in go (golang)<br />
<a href="https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang">https://stackoverflow.com/questions/24868859/different-ways-to-pass-channels-as-arguments-in-function-in-go-golang</a>
</li>

<li>justforfunc #22: using the Go execution tracer<br />
<a href="https://www.youtube.com/watch?v=ySy3sR1LFCQ">https://www.youtube.com/watch?v=ySy3sR1LFCQ</a>
</li>

<li>Single Function Exit Point<br />
<a href="http://wiki.c2.com/?SingleFunctionExitPoint">http://wiki.c2.com/?SingleFunctionExitPoint</a>
</li>

<li>Entry point<br />
<a href="https://en.wikipedia.org/wiki/Entry_point">https://en.wikipedia.org/wiki/Entry_point</a>
</li>

<li>Why does Go have a GOTO statement?!<br />
<a href="https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/">https://www.reddit.com/r/golang/comments/kag5q/why_does_go_have_a_goto_statement/</a>
</li>

<li>Effective Go<br />
<a href="https://golang.org/doc/effective_go.html">https://golang.org/doc/effective_go.html</a>
</li>

<li>GoClipse: an Eclipse IDE for the Go programming language<br />
<a href="http://goclipse.github.io/">http://goclipse.github.io/</a>
</li>

<li>GoClipse Installation<br />
<a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation">https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md#installation</a>
</li>

<li>The zero value of a slice is not nil<br />
<a href="https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil">https://stackoverflow.com/questions/30806931/the-zero-value-of-a-slice-is-not-nil</a>
</li>

<li>Go-tcha: When nil != nil<br />
<a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic">https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic</a>
</li>

<li>Nils in Go<br />
<a href="https://www.doxsey.net/blog/nils-in-go">https://www.doxsey.net/blog/nils-in-go</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

