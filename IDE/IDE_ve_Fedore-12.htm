<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s využitím knihoven Numpy a matplotlib (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s využitím knihoven Numpy a matplotlib (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;poslední části článku o interaktivním i programovém použití knihoven Numpy a matplotlib si ukážeme způsob tvorby grafů s&nbsp;konturami (&bdquo;vrstevnicemi&ldquo;), dále pak trojrozměrné grafy funkcí typu z=f(x,y) a na závěr si řekneme, jak se vytváří trojrozměrné grafy s&nbsp;funkcemi typu [x,y,z]=f(t).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s&nbsp;využitím knihoven Numpy a matplotlib (dokončení)</a></p>
<p><a href="#k02">2. Použití funkce <strong>numpy.meshgrid()</strong></a></p>
<p><a href="#k03">3. Graf s&nbsp;konturami funkce z=f(x,y)</a></p>
<p><a href="#k04">4. Přidání popisků k&nbsp;jednotlivým &bdquo;vrstevnicím&ldquo;</a></p>
<p><a href="#k05">5. Další vylepšení grafu s&nbsp;konturami</a></p>
<p><a href="#k06">6. Jednoduchý trojrozměrný graf funkce z=f(x,y) &ndash; drátový model</a></p>
<p><a href="#k07">7. Od drátového modelu k&nbsp;vyplněné ploše</a></p>
<p><a href="#k08">8. Zobrazení legendy &ndash; colorbaru</a></p>
<p><a href="#k09">9. Promítnutí grafu na plochy kolmé na osy</a></p>
<p><a href="#k10">10. Zobrazení 3D grafu funkce typu [x,y,z]=f(t)</a></p>
<p><a href="#k11">11. Lorenzův atraktor</a></p>
<p><a href="#k12">12. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k13">13. Předchozí části seriálu</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s&nbsp;využitím knihoven Numpy a matplotlib (dokončení)</h2>

<p>V&nbsp;závěrečné části článku o základních vlastnostech knihovny <i>Matplotlib</i>, zejména v&nbsp;kombinaci možností této knihovny s&nbsp;knihovnou <i>Numpy</i>, navážeme na <a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-vykreslovani-grafu-s-vyuzitim-knihoven-numpy-a-matplotlib-2-cast/">část předchozí</a>, protože si ukážeme tři možnosti tvorby grafů funkcí typu z=f(x,y), tj.&nbsp;funkcí se dvěma nezávislými proměnnými. Tyto funkce je možné zobrazit různým způsobem, například ve formě <a href="#k03">kontur</a> (&bdquo;vrstevnic&ldquo;), <a href="#k06">drátového modelu</a> (<i>wireframe</i>) či dokonce <a href="#k07">vyplněné plochy</a> (mapy výšek, <i>heightfield</i>). Na závěr si ukážeme způsob vykreslení funkcí typu [x,y,z]=f(t), což jsou funkce jediné nezávislé proměnné, ovšem graf této funkce je nutné zobrazit <a href="#k10">v&nbsp;trojrozměrném prostoru</a>. Zajímavým příkladem podobné funkce (přesněji řečeno funkce, kde nové hodnoty [x,y,z] závisí na předchozích hodnotách) je takzvaný <a href="#k11">Lorenzův atraktor</a> ukázaný v&nbsp;jedenácté kapitole.</p>

<img class="alignnone size-medium wp-image-7096" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_9-450x339.png" alt="figure_9" width="450" height="339" />
<p><i>Obrázek 1: Sloupcový graf s&nbsp;vyznačením odchylek či chyb, jehož tvorbu jsme si popsali v&nbsp;předchozím článku.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Použití funkce <strong>numpy.meshgrid()</strong></h2>

<p>Před popisem grafů zobrazujících drátové modely či kontury funkcí typu z=f(x,y) se musíme seznámit s&nbsp;užitečnou funkcí nazvanou <strong>numpy.meshgrid()</strong>. Tato funkce má sice poměrně univerzální možnosti použití, my se však v&nbsp;dnešním článku spokojíme s&nbsp;tím, že pokud se funkci <strong>numpy.meshgrid()</strong> předá dvojice jednorozměrných polí (vektorů) představujících hodnoty nezávislých x-ových a y-ových souřadnic, vytvoří se jako výsledek dvě dvourozměrné matice, které dohromady tvoří mřížku souřadnic [x<sub>i</sub>, y<sub>i</sub>]. Počet řádků těchto 2D matic odpovídá délce druhého pole, počet sloupců pak délce pole prvního. Podívejme se na jednoduchý příklad:</p>

<pre>
# vytvoření vektoru [1..10]
<strong>x=np.arange(1, 11, 1)</strong>

# vytvoření vektoru [101..105]
<strong>y=np.arange(101, 106, 1)</strong>

# zobrazení prvního vektoru
<strong>x</strong>
array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# zobrazení druhého vektoru
<strong>y</strong>
array([101, 102, 103, 104, 105])

# zavolání funkce numpy.meshgrid
<strong>np.meshgrid(x,y)</strong>
[array([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10]]),
 array([[101, 101, 101, 101, 101, 101, 101, 101, 101, 101],
       [102, 102, 102, 102, 102, 102, 102, 102, 102, 102],
       [103, 103, 103, 103, 103, 103, 103, 103, 103, 103],
       [104, 104, 104, 104, 104, 104, 104, 104, 104, 104],
       [105, 105, 105, 105, 105, 105, 105, 105, 105, 105]])]
</pre>

<p>Většinou se první i druhá matice uloží do samostatné proměnné, a to následovně (povšimněte si, že výsledné matice jsou uloženy do proměnných označených verzálkami):</p>

<pre>
# uložení první matice do proměnné X
# uložení druhé matice do proměnné Y
<strong>X,Y=np.meshgrid(x,y)</strong>

# zobrazení první matice
<strong>X</strong>
array([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10]])

# zobrazení druhé matice
<strong>Y</strong>
array([[101, 101, 101, 101, 101, 101, 101, 101, 101, 101],
       [102, 102, 102, 102, 102, 102, 102, 102, 102, 102],
       [103, 103, 103, 103, 103, 103, 103, 103, 103, 103],
       [104, 104, 104, 104, 104, 104, 104, 104, 104, 104],
       [105, 105, 105, 105, 105, 105, 105, 105, 105, 105]])
</pre>

<p>Z&nbsp;předchozích částí tohoto seriálu již víme, že s&nbsp;maticemi je možné mj.&nbsp;provádět i základní operace typu součet matic, rozdíl matic, maticový součin atd. Taktéž je možné na prvky matice aplikovat logaritmické či goniometrické funkce, takže například následující zápis je zcela korektní:</p>

<pre>
# součet matic a následně aplikace goniometrické funkce sin
# na každý prvek výsledné matice
<strong>Z=np.sin(X+Y)</strong>

# podívejme se na výslednou matici
<strong>Z</strong>
array([[ 0.99482679,  0.62298863, -0.3216224 , -0.97053528, -0.7271425 ,
         0.18478174,  0.92681851,  0.81674261, -0.04424268, -0.86455145],
       [ 0.62298863, -0.3216224 , -0.97053528, -0.7271425 ,  0.18478174,
         0.92681851,  0.81674261, -0.04424268, -0.86455145, -0.8899956 ],
       [-0.3216224 , -0.97053528, -0.7271425 ,  0.18478174,  0.92681851,
         0.81674261, -0.04424268, -0.86455145, -0.8899956 , -0.09718191],
       [-0.97053528, -0.7271425 ,  0.18478174,  0.92681851,  0.81674261,
        -0.04424268, -0.86455145, -0.8899956 , -0.09718191,  0.78498039],
       [-0.7271425 ,  0.18478174,  0.92681851,  0.81674261, -0.04424268,
        -0.86455145, -0.8899956 , -0.09718191,  0.78498039,  0.94543533]])
</pre>

<img class="alignnone size-medium wp-image-7094" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_7-450x450.png" alt="figure_7" width="450" height="450" />
<p><i>Obrázek 2: Koláčový graf, jehož tvorbu jsme si popsali v&nbsp;předchozím článku.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Graf s&nbsp;konturami funkce z=f(x,y)</h2>

<p>První způsob zobrazení funkce typu <i>z=f(x,y)</i> spočívá ve vykreslení takzvaných kontur, které si pro zjednodušení můžeme představit jako vrstevnice na mapě &ndash; body spojené konturou/vrstevnicí mají stejnou hodnotu funkce (tj.&nbsp;stejnou hodnotu z-ové souřadnice). Při vyhodnocování a následném vykreslení funkce budeme postupovat následovně:</p>

<ol>
<li>Vytvoříme vektor s&nbsp;hodnotami nezávislé proměnné x.</li>
<li>Vytvoříme vektor s&nbsp;hodnotami nezávislé proměnné y.</li>
<li>S&nbsp;využitím <strong>numpy.meshgrid</strong> necháme vygenerovat dvojici matic souřadnic.</li>
<li>Necháme vypočítat body ležící na ploše funkce (z-ové souřadnice se uloží do matice Z).</li>
<li>Vlastní vykreslení kontur zajistí funkce <strong>matplotlib.pyplot.contour(X, Y, Z)</strong>.</li>
</ol>

<p>Podívejme se na úplný příklad:</p>

<pre>
#!/usr/bin/env python

# Knihovny Numpy a matplotlib
#
# Dvacátý první demonstrační příklad:
# - zobrazení kontur funkce typu z=f(x,y)

import matplotlib
import numpy as np
import matplotlib.cm as cm        # není nutné, použijeme v dalším příkladu
import matplotlib.mlab as mlab    # není nutné, použijeme v dalším příkladu
import matplotlib.pyplot as plt


delta = 0.1

# průběh nezávislé proměnné x
x = np.arange(-10.0, 10.0, delta)

# průběh nezávislé proměnné y
y = np.arange(-10.0, 10.0, delta)

# vytvoření dvou polí se souřadnicemi [x,y] 
X, Y = np.meshgrid(x, y)

# vzdálenost od bodu [0,0]
R1 = np.sqrt(X*X+Y*Y)

# vzdálenost od bodu [3,3]
R2 = np.sqrt((X-3)*(X-3)+(Y-3)*(Y-3))

# výpočet funkce, kterou použijeme při vykreslování grafu
Z = np.sin(R1)-np.cos(R2)

# povolení zobrazení mřížky
plt.grid(True)

# vytvoření grafu s konturami funkce z=f(x,y)
plt.contour(X, Y, Z)

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7168" src="http://mojefedora.cz/wp-content/uploads/2016/05/01-450x339.png" alt="01" width="450" height="339" />
<p><i>Obrázek 3: Zobrazení kontur funkce typu z=f(x,y).</i></p>

<img class="alignnone size-medium wp-image-7169" src="http://mojefedora.cz/wp-content/uploads/2016/05/02-450x339.png" alt="02" width="450" height="339" />
<p><i>Obrázek 4: Pokud je hodnota &bdquo;delta&ldquo; příliš vysoká, vypočte se menší počet bodů tvořících plochu funkce, takže i kontury budou vykresleny velmi nepřesně (knihovna bude mít k&nbsp;dispozici jen málo bodů, které bude moci spojit).</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Přidání popisků k&nbsp;jednotlivým &bdquo;vrstevnicím&ldquo;</h2>

<p>Další vylepšení spočívá v&nbsp;přidání popisků (výšek) jednotlivých kontur/vrstevnic, což je opět způsob, který čtenáři pravděpodobně znají z&nbsp;běžných map. Jakmile je graf funkce vykreslen, postačuje zavolat funkci nazvanou <strong>plt.clabel()</strong>, které se předá proměnná obsahující všechny informace o právě vytvořeném grafu. Tato funkce taktéž akceptuje množství parametrů popsaných na stránce <a href="http://matplotlib.org/api/pyplot_api.html?highlight=contour#matplotlib.pyplot.contour">http://matplotlib.org/api/pyplot_api.html?highlight=contour#matplotlib.pyplot.contour</a>. My nastavíme parametr <strong>inline</strong> na hodnotu True (pod textem se nezobrazí kontura, to by bylo poměrně nečitelné) a parametr <strong>fontsize</strong> na požadovanou relativní velikost písma s&nbsp;popisky:</p>

<pre>
#!/usr/bin/env python

# Knihovny Numpy a matplotlib
#
# Dvacátý druhý demonstrační příklad:
# - zobrazení kontur funkce typu z=f(x,y)
# - zobrazení hodnot u jednotlivých "vrstevnic"

import matplotlib
import numpy as np
import matplotlib.cm as cm        # není nutné, použijeme v dalším příkladu
import matplotlib.mlab as mlab    # není nutné, použijeme v dalším příkladu
import matplotlib.pyplot as plt


delta = 0.1

# průběh nezávislé proměnné x
x = np.arange(-10.0, 10.0, delta)

# průběh nezávislé proměnné y
y = np.arange(-10.0, 10.0, delta)

# vytvoření dvou polí se souřadnicemi [x,y] 
X, Y = np.meshgrid(x, y)

# vzdálenost od bodu [0,0]
R1 = np.sqrt(X*X+Y*Y)

# vzdálenost od bodu [3,3]
R2 = np.sqrt((X-3)*(X-3)+(Y-3)*(Y-3))

# výpočet funkce, kterou použijeme při vykreslování grafu
Z = np.sin(R1)-np.cos(R2)

# povolení zobrazení mřížky
plt.grid(True)

# vytvoření grafu s konturami funkce z=f(x,y)
CS = plt.contour(X, Y, Z)

# popisky "vrstevnic"
plt.clabel(CS, inline=1, fontsize=10)

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7170" src="http://mojefedora.cz/wp-content/uploads/2016/05/03-450x339.png" alt="03" width="450" height="339" />
<p><i>Obrázek 5: U jednotlivých &bdquo;vrstevnic&ldquo; je uvedena i jejich hodnota odpovídající hodnotě funkce v&nbsp;daném bodě.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Další vylepšení grafu s&nbsp;konturami</h2>

<p>Další vylepšení, které může být výhodné zejména ve chvíli, kdy jsou plochy s&nbsp;konturami vybarveny (pro vybarvení použijte funkci <strong>matplotlib.pyplot.contourf</strong> namísto pouhého <strong>matplotlib.pyplot.countour</strong>) spočívá v&nbsp;přidání legendy, na níž se zobrazují výšky jednotlivých kontur/vrstevnic. Přidání je jednoduché, stačí pouze použít funkci nazvanou <strong>matplotlib.pyplot.colorbar()</strong>, které se opět předá datová struktura reprezentující graf funkce a několik nepovinných pojmenovaných parametrů. Z&nbsp;těchto parametrů dnes použijeme pouze parametr nazvaný <strong>shrink</strong> (relativní velikost popisku) a <strong>extend</strong> (způsob vykreslení popisků vedle grafu). Podívejme se na úplný zdrojový kód příkladu:</p>

<pre>
#!/usr/bin/env python

# Knihovny Numpy a matplotlib
#
# Dvacátý třetí demonstrační příklad:
# - zobrazení kontur funkce typu z=f(x,y)
# - zobrazení hodnot u jednotlivých "vrstevnic"
# - přidání legendy

import matplotlib
import numpy as np
import matplotlib.cm as cm    # není nutné, použijeme v dalším příkladu
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt


delta = 0.1

# průběh nezávislé proměnné x
x = np.arange(-10.0, 10.0, delta)

# průběh nezávislé proměnné y
y = np.arange(-10.0, 10.0, delta)

# vytvoření dvou polí se souřadnicemi [x,y] 
X, Y = np.meshgrid(x, y)

# vzdálenost od bodu [0,0]
R1 = np.sqrt(X*X+Y*Y)

# vzdálenost od bodu [3,3]
R2 = np.sqrt((X-3)*(X-3)+(Y-3)*(Y-3))

# výpočet funkce, kterou použijeme při vykreslování grafu
Z = np.sin(R1)-np.cos(R2)

# povolení zobrazení mřížky
plt.grid(True)

# vytvoření grafu s konturami funkce z=f(x,y)
CS = plt.contour(X, Y, Z)

# přidání legendy (colorbar)
CB = plt.colorbar(CS, shrink=0.7, extend='both')

# popisky "vrstevnic"
plt.clabel(CS, inline=1, fontsize=10)

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7171" src="http://mojefedora.cz/wp-content/uploads/2016/05/04-450x339.png" alt="04" width="450" height="339" />
<p><i>Obrázek 6: Kromě vrstevnic a jejich hodnot se napravo od grafu zobrazila i &bdquo;mapa výšek&ldquo;. Relativní velikost mapy vůči celému grafu se řídí hodnotou <strong>shrink</strong>. Zde konkrétně má celá legenda výšku jen 70% výšky celého grafu.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Jednoduchý trojrozměrný graf funkce z=f(x,y) &ndash; drátový model</h2>

<p>Použití grafu s&nbsp;konturami sice může být v&nbsp;mnoha ohledech velmi užitečné (například při zjišťování lokálních minim a maxim), v&nbsp;praxi se však spíše setkáme s&nbsp;odlišným typem grafů zobrazujících funkce typu z=f(x,y). Jedná se o trojrozměrné grafy, v&nbsp;nichž se zobrazuje plocha funkce. Nejjednodušším typem tohoto grafu je takzvaný <i>drátový model</i>, který je spíše známý pod svým anglickým názvem <i>wireframe</i>. V&nbsp;tomto typu grafu je zobrazena série křivek či spíše lomených čar. Jedna série je vypočtena takovým způsobem, že x-ová souřadnice se postupně mění v&nbsp;nastaveném intervalu zatímco y-ová souřadnice je konstantní. Druhá série lomených čar se vykresluje kolmo na sérii první, tj.&nbsp;x-ová souřadnice je konstantní a postupně se mění hodnota y-ových souřadnic. Výsledkem je tedy plocha, která má při pohledu z&nbsp;osy z tvar pravidelné mřížky. Pro vykreslení tohoto typu grafu se používá funkce <strong>plot_wireframe()</strong>, které se předá trojice polí odpovídajících x-ovým, y-ovým a z-ovým souřadnicím bodů ležících na ploše představujících obraz funkce:</p>

<pre>
#!/usr/bin/env python

# Knihovny Numpy a matplotlib
#
# Dvacátý čtvrtý demonstrační příklad:
# - zobrazení 3D grafu funkce typu z=f(x,y)

from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

delta = 0.1

# průběh nezávislé proměnné x
x = np.arange(-10.0, 10.0, delta)

# průběh nezávislé proměnné y
y = np.arange(-10.0, 10.0, delta)

# vytvoření dvou polí se souřadnicemi [x,y] 
X, Y = np.meshgrid(x, y)

# vzdálenost od bodu [0,0]
R = np.sqrt(X*X+Y*Y)

# výpočet funkce, kterou použijeme při vykreslování grafu
Z = np.sin(R)/R

# zobrazení 3D grafu
ax.plot_wireframe(X, Y, Z, rstride=7, cstride=7)

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7172" src="http://mojefedora.cz/wp-content/uploads/2016/05/05-450x339.png" alt="05" width="450" height="339" />
<p><i>Obrázek 7: Drátový model vykreslený s&nbsp;využitím funkce <strong>plot_wireframe(X, Y, Z, rstride=7, cstride=7)</strong>.</i></p>

<p>Pojmenované parametry <strong>rstride</strong> a <strong>cstride</strong> lze použít pro řízení hustoty vykreslované mřížky. Tyto parametry představují krok použitý při změně x-ových a y-ových souřadnic, což znamená, že čím menší hodnota se požije, tím bode vykreslená mřížka jemnější:</p>

<pre>
ax.plot_wireframe(X, Y, Z, rstride=3, cstride=3)
</pre>

<img class="alignnone size-medium wp-image-7173" src="http://mojefedora.cz/wp-content/uploads/2016/05/06-450x339.png" alt="06" width="450" height="339" />
<p><i>Obrázek 8: Drátový model vykreslený s&nbsp;využitím funkce <strong>plot_wireframe(X, Y, Z, rstride=3, cstride=3)</strong>.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Od drátového modelu k&nbsp;vyplněné ploše</h2>

<p>Drátový model je možné v&nbsp;případě potřeby nahradit vykreslením vyplněné plochy namísto pouhé mřížky. V&nbsp;tomto případě je nutné namísto funkce <strong>plot_wireframe()</strong> použít funkci pojmenovanou <strong>plot_surface()</strong>. První tři povinné parametry obou zmíněných funkcí jsou shodné, dokonce lze použít i stejně pojmenované parametry <strong>cstride</strong> a <strong>rstride</strong>, o jejichž významu jsme se taktéž zmiňovali. Kromě toho se však navíc většinou používá i další pojmenovaný parametr <strong>cmap</strong>, kterému se předá barvová paleta (či barvová mapa), která typicky definuje jeden gradientní přechod i větší množství gradientních přechodů mezi různými odstíny. Pro účely vytváření gradientních přechodů či pro použití již předem připravených barvových map se používá modul <strong>matplotlib.cm</strong>. Seznam všech předdefinovaných barvových map naleznete na adrese <a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>, ukázky (palety) pak na adrese <a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>. My využijeme barvovou mapu pojmenovanou &bdquo;coolwarm&ldquo;:</p>

<pre>
#!/usr/bin/env python

# Knihovny Numpy a matplotlib
#
# Dvacátý pátý demonstrační příklad:
# - zobrazení 3D grafu funkce typu z=f(x,y)

from mpl_toolkits.mplot3d import axes3d
from matplotlib import cm
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.gca(projection='3d')

delta = 0.1

# průběh nezávislé proměnné x
x = np.arange(-10.0, 10.0, delta)

# průběh nezávislé proměnné y
y = np.arange(-10.0, 10.0, delta)

# vytvoření dvou polí se souřadnicemi [x,y] 
X, Y = np.meshgrid(x, y)

# vzdálenost od bodu [0,0]
R = np.sqrt(X*X+Y*Y)

# výpočet funkce, kterou použijeme při vykreslování grafu
Z = np.sin(R)/R

# zobrazení 3D grafu formou plochy
ax.plot_surface(X, Y, Z, rstride=2, cstride=2, cmap=cm.coolwarm,
                       linewidth=0, antialiased=False)

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7174" src="http://mojefedora.cz/wp-content/uploads/2016/05/07-450x339.png" alt="07" width="450" height="339" />
<p><i>Obrázek 9: Plocha funkce z=f(x,y) používající barvovou mapu pojmenovanou &bdquo;coolwarm&ldquo;.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zobrazení legendy &ndash; colorbaru</h2>

<p>O způsobu zobrazení takzvaného <i>colorbaru</i> jsme se již zmínili <a href="#k05">v&nbsp;páté kapitole</a> v&nbsp;souvislosti s&nbsp;grafem zobrazujícím kontury. Ovšem <i>colorbar</i> má svůj význam i v&nbsp;případě 3D grafů, což ostatně uvidíme po spuštění následujícího demonstračního příkladu, v&nbsp;němž se napravo od grafu s&nbsp;plochou funkce z=f(x,y) zobrazí i &bdquo;mapa výšek&ldquo;. Povšimněte si způsobu nastavení měřítka z-ové osy funkcí <strong>set_zlim()</strong> a taktéž změny způsobu formátování výšek, tj.&nbsp;popisu z-ové osy (<strong>set_major_locator()</strong> a <strong>set_major_formatter()</strong>):</p>

<pre>
#!/usr/bin/env python

# Knihovny Numpy a matplotlib
#
# Dvacátý šestý demonstrační příklad:
# - zobrazení 3D grafu funkce typu z=f(x,y)
# - pomocná legenda - colorbar

from mpl_toolkits.mplot3d import axes3d
from matplotlib import cm
import matplotlib.pyplot as plt
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import numpy as np

fig = plt.figure()
ax = fig.gca(projection='3d')

delta = 0.1

# průběh nezávislé proměnné x
x = np.arange(-10.0, 10.0, delta)

# průběh nezávislé proměnné y
y = np.arange(-10.0, 10.0, delta)

# vytvoření dvou polí se souřadnicemi [x,y] 
X, Y = np.meshgrid(x, y)

# vzdálenost od bodu [0,0]
R = np.sqrt(X*X+Y*Y)

# výpočet funkce, kterou použijeme při vykreslování grafu
Z = np.sin(R)/R

# zobrazení 3D grafu formou plochy
surface = ax.plot_surface(X, Y, Z, rstride=2, cstride=2, cmap=cm.coolwarm,
                       linewidth=0, antialiased=False)

ax.set_zlim(-1.01, 1.01)

# styl formátování popisků
ax.zaxis.set_major_locator(LinearLocator(10))
ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))

# přidání pomocné legendy
fig.colorbar(surface, shrink=0.7, aspect=5)

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7175" src="http://mojefedora.cz/wp-content/uploads/2016/05/08-450x339.png" alt="08" width="450" height="339" />
<p><i>Obrázek 10: Plocha funkce z=f(x,y) používající barvovou mapu pojmenovanou &bdquo;coolwarm&ldquo;. Vedle grafu je zobrazena i legenda</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Promítnutí grafu na plochy kolmé na osy</h2>

<p>Vzhledem k&nbsp;tomu, že se pro zobrazení trojrozměrného grafu na 2D obrazovce musí používat axonometrické promítání popř.&nbsp;promítání s&nbsp;perspektivou, nemusí být z&nbsp;obrázku na první pohled zřejmé, jak přesně vlastně průběh funkce vypadá. Knihovna <i>Matplotlib</i> nám však nabízí řešení &ndash; na plochy (které jsou kolmé na osy souřadného systému) se promítnou kontury průběhu funkce. Podívejme se, jak vypadá výsledek:</p>

<img class="alignnone size-medium wp-image-7176" src="http://mojefedora.cz/wp-content/uploads/2016/05/09-450x339.png" alt="09" width="450" height="339" />
<p><i>Obrázek 11: Promítnutí kontur průběhu funkce na plochy..</i></p>

<p>Samotná plocha představující funkci se vykreslí příkazem <strong>matplotlib.pyplot.plot_surface()</strong>, podobně jako v&nbsp;předchozím příkladu. Dále se metodou <strong>ax.contour()</strong> mohou vykreslit kontury grafu na jednotlivé plochy, ve skutečnosti je však ještě nutné korektně nastavit přesné umístění těchto kontur do grafu. K&nbsp;tomu slouží explicitní nastavení rozsahů na jednotlivých osách (<strong>set_xlim()</strong>, <strong>set_ylim()</strong>, <strong>set_zlim()</strong>) a vlastní posun reprezentovaný pojmenovaným parametrem <strong>offset</strong> předaným do metody <strong>ax.contour()</strong>. Podívejme se na odladěný příklad:</p>

<pre>
#!/usr/bin/env python

# Knihovny Numpy a matplotlib
#
# Dvacátý sedmý demonstrační příklad:
# - zobrazení 3D grafu funkce typu z=f(x,y)
# - pomocná legenda - colorbar
# - promítnutí grafu na ploch kolmých na osy

from mpl_toolkits.mplot3d import axes3d
from matplotlib import cm
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.gca(projection='3d')

delta = 0.1

# průběh nezávislé proměnné x
x = np.arange(-10.0, 10.0, delta)

# průběh nezávislé proměnné y
y = np.arange(-10.0, 10.0, delta)

# vytvoření dvou polí se souřadnicemi [x,y] 
X, Y = np.meshgrid(x, y)

# vzdálenost od bodu [0,0]
R = np.sqrt(X*X+Y*Y)

# výpočet funkce, kterou použijeme při vykreslování grafu
Z = np.sin(R)/R

# zobrazení 3D grafu formou plochy
surface = ax.plot_surface(X, Y, Z, rstride=2, cstride=2, cmap=cm.coolwarm,
                       linewidth=0, antialiased=False)

# kontutra: průmět na rovinu x-y
cset = ax.contour(X, Y, Z, zdir='z', offset=-5, cmap=cm.coolwarm)

# kontutra: průmět na rovinu y-z
cset = ax.contour(X, Y, Z, zdir='x', offset=-15, cmap=cm.coolwarm)

# kontutra: průmět na rovinu x-z
cset = ax.contour(X, Y, Z, zdir='y', offset= 15, cmap=cm.coolwarm)

# rozměry grafu ve směru osy x
ax.set_xlabel('X')
ax.set_xlim(-15, 15)

# rozměry grafu ve směru osy y
ax.set_ylabel('Y')
ax.set_ylim(-15, 15)

# rozměry grafu ve směru osy z
ax.set_zlabel('Z')
ax.set_zlim(-5, 5)

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7177" src="http://mojefedora.cz/wp-content/uploads/2016/05/10-450x339.png" alt="10" width="450" height="339" />
<p><i>Obrázek 12: Změna měřítka ve směru osy z. Při změně měřítka je současně nutné posunout konturu pojmenovaným parametrem <strong>offset</strong>.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Zobrazení 3D grafu funkce typu [x,y,z]=f(t)</h2>

<p>Další typ grafu, s&nbsp;nímž se dnes seznámíme, je trojrozměrný graf, v&nbsp;němž se zobrazuje funkce typu <i>[x,y,z]=f(t)</i> popř.&nbsp;složitější funkce <i>[x<sub>n</sub>, y<sub>n</sub>, z<sub>n</sub>]=f(x<sub>n-1</sub>, y<sub>n-1</sub>, z<sub>n-1</sub>)</i>. O zobrazení průběhů těchto funkcí se stará <strong>matplotlib.pyplot.plot()</strong>, s&nbsp;níž jsme se již seznámili v&nbsp;předchozích částech tohoto seriálu. Tento příkaz automaticky zjistí potřebné rozsahy na všech třech osách, což je dobře patrné ze screenshotu číslo 13. Podívejme se tedy, jakým způsobem je možné zobrazit trojrozměrnou spirálu (pokud budete potřebovat, aby se spirála nezužovala, postačuje proměnnou <strong>r</strong> nastavit na konstantní hodnotu):</p>

<pre>
#!/usr/bin/env python

# Knihovny Numpy a matplotlib
#
# Dvacátý osmý demonstrační příklad:
# - zobrazení 3D grafu funkce typu [x,y,z]=f(t)

from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np

# nezávislá proměnná
t = np.arange(0, 8*np.pi, 0.1)

# vzdálenost od osy spirály
r = 10.0/(t+4)

# výpočet souřadnic [x,y,z]) pro každé t
x = r*np.cos(t)
y = r*np.sin(t)
z = t

fig = plt.figure()
ax = fig.gca(projection='3d')

# vykreslení grafu
ax.plot(x, y, z)

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7178" src="http://mojefedora.cz/wp-content/uploads/2016/05/11-450x339.png" alt="11" width="450" height="339" />
<p><i>Obrázek 13: Spirála vykreslená předchozím demonstračním příkladem.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Lorenzův atraktor</h2>

<p>Poměrně vděčným příkladem funkce zobrazené v&nbsp;3D prostoru je dynamický systém s&nbsp;takzvaným <i>podivným atraktorem</i>, který je nazvaný <i>Lorenzův atraktor</i> podle svého objevitele. Tento systém sestávající ze tří dynamických rovnic použil Edward Lorenz v&nbsp;roce 1963 při simulaci vývoje počasí (resp.&nbsp;ve velmi zjednodušeném modelu počasí). Na tomto systému byla také numericky a analyticky ověřena velká citlivost na počáteční podmínky (někdy také nazývaná &bdquo;motýlí efekt&ldquo;). Pro upřesnění je však nutné říci, že při simulaci na počítači vlastně získáme atraktor, jenž je periodický. Je to z&nbsp;toho důvodu, že pro zobrazení číselných hodnot je použito konečného počtu bitů, z&nbsp;toho nutně vyplývá, že se po určitém počtu kroků (který je však obrovský, takže tento jev mnohdy nezaregistrujeme) začne dráha Lorenzova atraktoru překrývat. V&nbsp;matematicky přesném modelu však tato situace nenastane, každá smyčka funkce bude mít unikátní tvar a dráhy se nebudou překrývat, pouze protínat. Diferenciální rovnice Lorenzova atraktoru mají po převodu na diferenční tvar následující formát:</p>

<pre>
dx/dt = &sigma; (y-x)
dy/dt = x(&rho; - z) - y
dz/dt = xy - &Beta;z
</pre>

<p>Takže pro iterativní (samozřejmě že nepřesný) výpočet můžeme pracovat s&nbsp;následujícími vztahy, které pro dostatečně malé <i>dt</i> vedou k&nbsp;výpočtu bodů ležících na Lorenzově atraktoru:</p>

<pre>
x<sub>n+1</sub>=x<sub>n</sub>+(&sigma; (y-x)) dt
y<sub>n+1</sub>=y<sub>n</sub>+(x(&rho; - z) - y) dt
z<sub>n+1</sub>=z<sub>n</sub>+(xy - &Beta;z) dt
</pre>

<p>Podívejme se nyní na způsob implementace této funkce:</p>

<pre>
def lorenz(x, y, z, s=10, r=28, b=2.667):
    x_dot = s*(y - x)
    y_dot = r*x - y - x*z
    z_dot = x*y - b*z
    return x_dot, y_dot, z_dot
</pre>

<p>A výpočtu sekvence bodů ležících na atraktoru:</p>

<pre>
# prozatím prázdné pole připravené pro výpočet
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))

# počáteční hodnoty
x[0], y[0], z[0] = (0., 1., 1.05)

# vlastní výpočet atraktoru (resp. bodů na něm ležících)
for i in range(n-1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i+1] = x[i] + x_dot * dt
    y[i+1] = y[i] + y_dot * dt
    z[i+1] = z[i] + z_dot * dt
</pre>

<p>Vlastní zobrazení pak probíhá naprosto stejným způsobem, jako tomu bylo v&nbsp;předchozím demonstračním příkladu:</p>

<pre>
#!/usr/bin/env python

# Knihovny Numpy a matplotlib
#
# Dvacátý devátý demonstrační příklad:
# - Lorenzův atraktor

from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np

# funkce pro výpočet dalšího bodu Lorenzova atraktoru
def lorenz(x, y, z, s=10, r=28, b=2.667):
    x_dot = s*(y - x)
    y_dot = r*x - y - x*z
    z_dot = x*y - b*z
    return x_dot, y_dot, z_dot

# krok (změna času)
dt = 0.01

# celkový počet vypočtených bodů na Lorenzově atraktoru
n = 10000

# prozatím prázdné pole připravené pro výpočet
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))

# počáteční hodnoty
x[0], y[0], z[0] = (0., 1., 1.05)

# vlastní výpočet atraktoru
for i in range(n-1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i+1] = x[i] + x_dot * dt
    y[i+1] = y[i] + y_dot * dt
    z[i+1] = z[i] + z_dot * dt

fig = plt.figure()
ax = fig.gca(projection='3d')

# vykreslení grafu
ax.plot(x, y, z)

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7179" src="http://mojefedora.cz/wp-content/uploads/2016/05/12-450x339.png" alt="12" width="450" height="339" />
<p><i>Obrázek 14: Lorenzův atraktor vykreslený předchozím demonstračním příkladem.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady, s&nbsp;nimiž jsme se dnes seznámili, byly uloženy do Git repositáře umístěného na GitHubu (<a href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>). Poslední verze zdrojových kódů naleznete pod odkazy uvedenými v&nbsp;tabulce pod tímto odstavcem:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Popis</th><th>Zdrojový kód</th></tr>
<tr><td>1</td><td>example21.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example21.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example21.py</a></td></tr>
<tr><td>2</td><td>example22.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example22.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example22.py</a></td></tr>
<tr><td>3</td><td>example23.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example23.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example23.py</a></td></tr>
<tr><td>4</td><td>example24.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example24.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example24.py</a></td></tr>
<tr><td>5</td><td>example25.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example25.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example25.py</a></td></tr>
<tr><td>6</td><td>example26.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example26.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example26.py</a></td></tr>
<tr><td>7</td><td>example27.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example27.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example27.py</a></td></tr>
<tr><td>8</td><td>example28.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example28.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example28.py</a></td></tr>
<tr><td>9</td><td>example29.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example29.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example29.py</a></td></tr>
</table>

<img class="alignnone size-medium wp-image-7087" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_1-450x339.png" alt="figure_1" width="450" height="339" />
<p><i>Obrázek 15: Vykreslení průběhu tří funkcí. Ve skutečnosti se však pro každou funkci vypočte pouze sto bodů, které jsou propojeny úsečkami. Díky velké hustotě bodů není (alespoň na těchto funkcích) náhrada hladkých křivek za lomenou čáru viditelné (viz též předchozí část tohoto seriálu)j.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Předchozí části seriálu</h2>

<ol>

<li>Vývojová prostředí ve Fedoře (1. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-1-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-1-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (2. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-2-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-2-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (3. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-3-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-3-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: PyDev<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: PyDev (2.část)<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev-2-cast/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev-2-cast/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: IPython a IPython Notebook<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy (2.část)<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s využitím knihoven Numpy a matplotlib<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-vykreslovani-grafu-s-vyuzitim-knihoven-numpy-a-matplotlib/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-vykreslovani-grafu-s-vyuzitim-knihoven-numpy-a-matplotlib/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s využitím knihoven Numpy a matplotlib (2.část)<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-vykreslovani-grafu-s-vyuzitim-knihoven-numpy-a-matplotlib-2-cast/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-vykreslovani-grafu-s-vyuzitim-knihoven-numpy-a-matplotlib-2-cast/</a>
</li>

</ol>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Lorenzův atraktor<br />
<a href="http://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03">http://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Lorenz system<br />
<a href="https://en.wikipedia.org/wiki/Lorenz_system">https://en.wikipedia.org/wiki/Lorenz_system</a>
</li>

<li>Customising contour plots in matplotlib<br />
<a href="https://philbull.wordpress.com/2012/12/27/customising-contour-plots-in-matplotlib/">https://philbull.wordpress.com/2012/12/27/customising-contour-plots-in-matplotlib/</a>
</li>

<li>Graphics with Matplotlib<br />
<a href="http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html">http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html</a>
</li>

<li>Systémy lineárních rovnic<br />
<a href="http://www.matematika.cz/systemy-linearnich-rovnic">http://www.matematika.cz/systemy-linearnich-rovnic</a>
</li>

<li>IPython homepage<br />
<a href="http://ipython.org/">http://ipython.org/</a>
</li>

<li>Dokumentace k IPythonu<br />
<a href="http://ipython.org/documentation.html#">http://ipython.org/documentation.html#</a>
</li>

<li>IPython Tutorial<br />
<a href="http://ipython.readthedocs.org/en/stable/interactive/tutorial.html">http://ipython.readthedocs.org/en/stable/interactive/tutorial.html</a>
</li>

<li>NumPy Home Page<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>NumPy v1.10 Manual<br />
<a href="http://docs.scipy.org/doc/numpy/index.html">http://docs.scipy.org/doc/numpy/index.html</a>
</li>

<li>NumPy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NumPy">https://en.wikipedia.org/wiki/NumPy</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>The cell magics in IPython<br />
<a href="http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb">http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb</a>
</li>

<li>0MQ Home Page<br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>Is IPython Notebook ever used as an IDE, or merely for presentations?<br />
<a href="https://www.reddit.com/r/IPython/comments/1uk7hp/is_ipython_notebook_ever_used_as_an_ide_or_merely/">https://www.reddit.com/r/IPython/comments/1uk7hp/is_ipython_notebook_ever_used_as_an_ide_or_merely/</a>
</li>

<li>The IDE as a Bad Programming Language Enabler <br />
<a href="https://dzone.com/articles/ide-bad-programming-language">https://dzone.com/articles/ide-bad-programming-language</a>
</li>

<li>Enhanced Interactive Python with IPython<br />
<a href="http://www.onlamp.com/pub/a/python/2005/01/27/ipython.html">http://www.onlamp.com/pub/a/python/2005/01/27/ipython.html</a>
</li>

<li>Direct mode<br />
<a href="https://en.wikipedia.org/wiki/Direct_mode">https://en.wikipedia.org/wiki/Direct_mode</a>
</li>

<li>Seznámení s&nbsp;Python IDE Spyder (článek vyšel zde na mojefedora.cz)<br />
<a href="http://mojefedora.cz/seznameni-s-python-ide-spyder/">http://mojefedora.cz/seznameni-s-python-ide-spyder/</a>
</li>

<li>Stránka s&nbsp;popisem různých IDE pro Python<br />
<a href="http://quintagroup.com/cms/python/ide">http://quintagroup.com/cms/python/ide</a>
</li>

<li>Eclipse (stránka o frameworku na Fedoraproject.org)<br />
<a href="https://fedoraproject.org/wiki/Eclipse">https://fedoraproject.org/wiki/Eclipse</a>
</li>

<li>PyDev (hlavní stránka)<br />
<a href="http://pydev.sourceforge.net/index.html">http://pydev.sourceforge.net/index.html</a>
</li>

<li>PyDev (download, v podstatě není zapotřebí)<br />
<a href="http://pydev.sourceforge.net/download.html">http://pydev.sourceforge.net/download.html</a>
</li>

<li>PyDev (stránka s metainformacemi o PyDev pluginu, použita v Eclipse)<br />
<a href="http://www.pydev.org/updates/">http://www.pydev.org/updates/</a>
</li>

<li>PyDev (stránka s pluginem, použita v Eclipse)<br />
<a href="https://dl.bintray.com/fabioz/pydev/4.5.4/">https://dl.bintray.com/fabioz/pydev/4.5.4/</a>
</li>

<li>Certifikát, který lze do Eclipse doinstalovat<br />
<a href="http://www.pydev.org/pydev_certificate.cer">http://www.pydev.org/pydev_certificate.cer</a>
</li>

<li>PyDev FAQ<br />
<a href="http://pydev.sourceforge.net/faq.html">http://pydev.sourceforge.net/faq.html</a>
</li>

<li>PyDev (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PyDev">https://en.wikipedia.org/wiki/PyDev</a>
</li>

<li>Python (oficiální stránky projektu)<br />
<a href="https://www.python.org/">https://www.python.org/</a>
</li>

<li>Jython<br />
<a href="http://www.jython.org/">http://www.jython.org/</a>
</li>

<li>IronPython<br />
<a href="http://ironpython.net/">http://ironpython.net/</a>
</li>

<li>Python 3.5.1 documentation<br />
<a href="https://docs.python.org/3/">https://docs.python.org/3/</a>
</li>

<li>PyDev: Unittest integration<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/</a>
</li>

<li>Continuous unit testing with Pydev (Python and Eclipse)<br />
<a href="http://stackoverflow.com/questions/1015581/continuous-unit-testing-with-pydev-python-and-eclipse">http://stackoverflow.com/questions/1015581/continuous-unit-testing-with-pydev-python-and-eclipse</a>
</li>

<li>Test-driven development<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

