<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na předchozí článek pojednávající o integrovaných vývojových prostředích, v&nbsp;němž jsme se zmiňovali především o IPythonu a taktéž o IPython Notebooku, dnes tematicky navážeme, protože si ukážeme, jakým způsobem je možné využít IPython Notebook společně s&nbsp;knihovnou Numpy. Tyto dva nástroje, pokud jsou navíc v&nbsp;případě potřeby doplněny o knihovnu SciPy a Matplotlib, mohou v&nbsp;mnoha oblastech zdárně konkurovat i komerčním nástrojům typu Matlab či Maple.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy</a></p>
<p><a href="#k02">2. Základy, na nichž je postavena knihovna Numpy</a></p>
<p><a href="#k03">3. Datové typy prvků, z&nbsp;nichž jsou tvořena pole</a></p>
<p><a href="#k04">4. Konstruktory polí</a></p>
<p><a href="#k05">5. Konstruktor <strong>numpy.zeros</strong></a></p>
<p><a href="#k06">6. Konstruktor <strong>numpy.ones</strong></a></p>
<p><a href="#k07">7. Funkce <strong>numpy.arange</strong></a></p>
<p><a href="#k08">8. Funkce <strong>numpy.linspace</strong></a></p>
<p><a href="#k09">9. Přetypování všech prvků v&nbsp;poli</a></p>
<p><a href="#k10">10. Zjištění tvaru pole pomocí funkce <strong>numpy.shape</strong></a></p>
<p><a href="#k11">11. Změna tvarů polí s&nbsp;využitím funkce <strong>numpy.reshape</strong></a></p>
<p><a href="#k12">12. Vliv nepovinného parametru &bdquo;order&ldquo; na (zdánlivou) změnu tvaru pole</a></p>
<p><a href="#k13">13. Předchozí části seriálu</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Integrovaná vývojová prostředí ve Fedoře: praktické použití IPythonu a knihovny Numpy</h2>

<p><a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/">V&nbsp;minulé části</a> seriálu o integrovaných vývojových prostředích, která jsou dostupná (nejenom) pro vývojáře pracující ve Fedoře, jsme se zaměřili na popis nástrojů nazvaných <i>IPython</i> a <i>IPython Notebook</i>. Připomeňme si ve stručnosti, že se sice nejedná o &bdquo;klasická&ldquo; integrovaná vývojová prostředí typu Eclipse či Visual Studio, ale o nástroje, které díky použití smyčky REPL (<i>IPython</i>) či konceptu takzvaných diářů (<i>IPython Notebook</i>) umožňují, aby uživatelé vytvářeli aplikace či jen prováděli různé výpočty interaktivním způsobem, tj.&nbsp;dialogem mezi uživatelem a systémem. Takový způsob práce se může hodit například při řešení různých problémů z&nbsp;oblasti numerické matematiky, zpracování signálů, statistické výpočty apod. V&nbsp;dnešní části se zaměříme na popis použití knihovny <i>Numpy</i>, které se elegantně podařilo spojit dva světy &ndash; svět Pythonu s&nbsp;jeho &bdquo;příjemnou&ldquo; a přehlednou syntaxí a svět numerické matematiky a výpočtů s&nbsp;maticemi, který se nejenom z&nbsp;historických důvodů vždy zaměřoval na použití Fortranu a částečně i programovacího jazyka C.</p>

<img class="alignnone size-medium wp-image-6843" src="http://mojefedora.cz/wp-content/uploads/2016/04/07-450x296.png" alt="07" width="450" height="296" />
<p><i>Obrázek 1: IPython je možné ovládat z&nbsp;terminálu (což je základní možnost dostupná ve všech systémech).</i></p>

<p>Dnes se budeme zabývat především těmi funkcemi a objekty, které jsou dostupné z&nbsp;hlavního balíčku knihovny <i>Numpy</i>. Ve skutečnosti však v&nbsp;této knihovně nalezneme i několik zajímavých a mnohdy velmi užitečných podbalíčků, jejichž jména a stručný popis jsou vypsány v&nbsp;tabulce pod tímto odstavcem:</p>

<table>
<tr><th>#</th><th>Jméno podbalíčku</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>doc</td><td>obsahuje dokumentaci ke knihovně i k&nbsp;základním konstrukcím a operacím</td></tr>
<tr><td>2</td><td>lib</td><td>základní funkce používané i některými dalšími podbalíčky</td></tr>
<tr><td>3</td><td>random</td><td>funkce pro využití generátorů pseudonáhodných číselných hodnot</td></tr>
<tr><td>4</td><td>linalg</td><td>funkce z&nbsp;oblasti lineární algebry (bude popsáno příště)</td></tr>
<tr><td>5</td><td>fft</td><td>rychlá Fourierova transformace a pomocné funkce (bude popsáno příště)</td></tr>
<tr><td>6</td><td>polynomial</td><td>funkce pro práci s&nbsp;polynomy (taktéž bude popsáno příště)</td></tr>
<tr><td>7</td><td>testing</td><td>nástroje pro psaní testů</td></tr>
<tr><td>8</td><td>f2py</td><td>(jednosměrné) rozhraní mezi Fortranem a Pythonem</td></tr>
<tr><td>9</td><td>distutils</td><td>další pomocné nástroje, které přímo nesouvisí s&nbsp;výpočty nad vektory a maticemi, ale se způsobem balíčkování</td></tr>
</table>

<img class="alignnone size-medium wp-image-6853" src="http://mojefedora.cz/wp-content/uploads/2016/04/17-450x348.png" alt="17" width="450" height="348" />
<p><i>Obrázek 2: Alternativně je možné použít textově-grafickou Qt Consoli.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základy, na nichž je postavena knihovna Numpy</h2>

<p>Funkce a objekty nabízené knihovnou <i>Numpy</i> se sice volají přímo z&nbsp;Pythonu, ve skutečnosti se však interní datové struktury dosti podstatným způsobem odlišují od datových struktur využívaných samotným Pythonem. V&nbsp;knihovně <i>Numpy</i> tvoří základ datová struktura nazvaná <strong>ndarray</strong>, která reprezentuje pole o prakticky libovolném počtu dimenzí (ostatně &bdquo;nd&ldquo; ve jménu &bdquo;ndarray&ldquo; značí N-dimensional). Tato pole se liší od běžných seznamů či n-tic v&nbsp;Pythonu, protože <strong>ndarray</strong> jsou homogenní datovou strukturou: všechny prvky totiž mají shodný typ a navíc všechny prvky leží za sebou, zatímco seznamy v&nbsp;Pythonu jsou měnitelné (prvky lze přidávat a odebírat) a obecně nehomogenní (každý prvek může mít odlišný datový typ). Za tuto velkou flexibilitu se samozřejmě platí, a to jak většími nároky na operační paměť (reference na objekty), tak i pomalejším zpracováním.</p>

<img class="alignnone size-medium wp-image-6854" src="http://mojefedora.cz/wp-content/uploads/2016/04/18-450x403.png" alt="18" width="450" height="403" />
<p><i>Obrázek 3: Bublinová nápověda je jednou z&nbsp;vylepšení Qt Console oproti klasickému interaktivnímu interpretru.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Datové typy prvků, z&nbsp;nichž jsou tvořena pole</h2>

<p>Při vytváření polí typu <strong>ndarray</strong>, ať již se jedná o vektory, matice či o pole s&nbsp;větším množstvím dimenzí, lze specifikovat datový typ všech prvků a dokonce i uspořádání prvků v&nbsp;paměti (buď podle zvyklostí jazyka Fortran nebo jazyka C). Podívejme se nyní na tabulku, v&nbsp;níž jsou vypsány možné typy prvků polí <strong>ndarray</strong>:</p>

<table>
<tr><th> #</th><th>Typ</th><th>Formát</th><th>Rozsah</th><th>Jednoznakový kód</th></tr>
<tr><td> 1</td><td>bool</td><td>uloženo po bajtech</td><td>True/False</td><td>'?'</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 2</td><td>int8</td><td>celočíselný se znaménkem</td><td>-128..127</td><td>'b'</td></tr>
<tr><td> 3</td><td>int16</td><td>celočíselný se znaménkem</td><td>-32768..32767</td><td>'h'</td></tr>
<tr><td> 4</td><td>int32</td><td>celočíselný se znaménkem</td><td>-2147483648..2147483647</td><td>'i'</td></tr>
<tr><td> 5</td><td>int64</td><td>celočíselný se znaménkem</td><td>-9223372036854775808..9223372036854775807</td><td>'l'</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>uint8</td><td>celočíselný bez znaménka</td><td>0..255</td><td>'B'</td></tr>
<tr><td> 7</td><td>uint16</td><td>celočíselný bez znaménka</td><td>0..65535</td><td>'H'</td></tr>
<tr><td> 8</td><td>uint32</td><td>celočíselný bez znaménka</td><td>0..4294967295</td><td>'I'</td></tr>
<tr><td> 9</td><td>uint64</td><td>celočíselný bez znaménka</td><td>0..18446744073709551615</td><td>'L'</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>float16</td><td>plovoucí řádová čárka</td><td>poloviční přesnost (half)</td><td>'e'</td></tr>
<tr><td>11</td><td>float32</td><td>plovoucí řádová čárka</td><td>jednoduchá přesnost (single)</td><td>'f'</td></tr>
<tr><td>12</td><td>float64</td><td>plovoucí řádová čárka</td><td>dvojitá přesnost (double)</td><td>'d'</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>complex64</td><td>komplexní číslo (dvojice)</td><td>2&times;float32</td><td>'F'</td></tr>
<tr><td>14</td><td>complex128</td><td>komplexní číslo (dvojice)</td><td>2&times;float64</td><td>'D'</td></tr>
</table>

<p>Poznámka: jednoznakové kódy je možné použít namísto jména typu, viz též funkce popsané v&nbsp;navazujících kapitolách.</p>

<img class="alignnone size-medium wp-image-6855" src="http://mojefedora.cz/wp-content/uploads/2016/04/19-450x369.png" alt="19" width="450" height="369" />
<p><i>Obrázek 4: Vykreslení funkce s&nbsp;využitím Qt Console.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Konstruktory polí</h2>

<p>Pole typu <strong>ndarray</strong> je možné vytvořit několika různými způsoby. Základní funkcí sloužící k&nbsp;převodu různých typů Pythonovských objektů na pole je funkce nazvaná jednoduše <strong>numpy.array</strong>. Této funkci se předá objekt (což je typicky seznam, n-tice či objekt typu <i>range</i>) a popř.&nbsp;i další nepovinné parametry, které určují typ prvků nově vzniklého pole (<strong>dtype</strong>), zda se má provést kopie prvků (<strong>copy</strong>, většinou ano) či způsob uspořádání prvků v&nbsp;poli (<strong>order</strong>):</p>

<pre>
array(object, dtype=None, copy=True, order=None, subok=False, ndmin=0)
</pre>

<img class="alignnone size-medium wp-image-6890" src="http://mojefedora.cz/wp-content/uploads/2016/04/05-1-418x450.png" alt="05" width="418" height="450" />
<p><i>Obrázek 5: Všechny dnešní demonstrační příklady budeme testovat v&nbsp;IPython Notebooku, jehož prázdný list je zde otevřen ve webovém prohlížeči.</i></p>

<p>Nepovinný parametr <strong>order</strong> může nabývat hodnot:</p>

<table>
<tr><th>Order</th><th>Význam</th></tr>
<tr><td>'C'</td><td>prvky jsou uspořádány jako v&nbsp;jazyku C</td></tr>
<tr><td>'F'</td><td>prvky jsou uspořádány jako v&nbsp;jazyku Fortran</td></tr>
<tr><td>'A'</td><td>ponecháme na implementaci, který způsob uspořádání zvolit</td></tr>
</table>

<p>Jaký je tedy vlastně rozdíl mezi uspořádáním prvků podle 'C' a 'F'? Předpokládejme matici 3&times;3 prvky:</p>

<pre>
| 1 2 3 |
| 4 5 6 |
| 7 8 9 |
</pre>

<p>Tato matice může být v&nbsp;paměti uložena následujícím způsobem:</p>

<pre>
1 2 3 4 5 6 7 8 9 - 'C'
</pre>

<p>Alternativně je však možné prohodit řádky a sloupce (což více odpovídá matematickému zápisu matice):</p>

<pre>
1 4 7 2 5 8 3 6 9 - 'F'
</pre>

<p>Podívejme se nyní na několik praktických použití funkce <strong>numpy.array</strong>:</p>

<pre>
# vytvoření pole ze seznamu
numpy.array([1,2,3,4])
array([1, 2, 3, 4])

# vytvoření pole z typu 'range'
numpy.array(range(10))
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

# explicitní specifikace typu všech prvků pole
numpy.array(range(10), dtype=numpy.float)
array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])

# explicitní specifikace uspořádání prvků pole
# (nemá velký význam pro 1D pole=vektory)
numpy.array(range(10), order='C')
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

# explicitní specifikace uspořádání prvků pole
# (nemá velký význam pro 1D pole=vektory)
numpy.array(range(10), order='F')
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

# vytvoření dvourozměrné matice
numpy.array([[1,2,3],[4,5,6]])
array([[1, 2, 3],
       [4, 5, 6]])
</pre>

<img class="alignnone size-medium wp-image-6891" src="http://mojefedora.cz/wp-content/uploads/2016/04/06-1-418x450.png" alt="06" width="418" height="450" />
<p><i>Obrázek 6: Nápověda k&nbsp;modulu Numpy.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Konstruktor <strong>numpy.zeros</strong></h2>

<p>Kromě funkce <strong>numpy.array</strong> se poměrně často setkáme s&nbsp;nutností vytvořit vektor či matici s&nbsp;nulovými prvky. V&nbsp;tomto případě samozřejmě není nutné složitě vytvářet a předávat takové pole do funkce <strong>numpy.array</strong>, ale lze namísto toho využít funkci nazvanou <strong>numpy.zeros</strong>, což je rychlejší i méně paměťově náročnější. Té se předá n-tice (musí se skutečně jednat o n-tici, nikoli o seznam parametrů, proto nezapomeňte na závorky) specifikující dimenzi vektoru, matice či N-dimenzionálního pole:</p>

<pre>
zeros(shape, dtype=float, order='C')
</pre>

<p>Nepovinný parametr <strong>dtype</strong> se nastavuje buď na typ nebo na jednoznakový kód uvedený v&nbsp;tabulce <a href="#k03">ve třetí kapitole</a>.</p>

<p>Podívejme se nyní na způsob použití této funkce:</p>

<pre>
# jednorozměrný vektor s jediným prvkem
numpy.zeros(1)
array([ 0.])

# jednorozměrný vektor s deseti prvky
numpy.zeros(10)
array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])

# matice o velikosti 5x5 prvků, každý prvek je typu float
numpy.zeros((5,5))

array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])

# matice o velikosti 5x5 prvků, každý prvek je typu int
numpy.zeros((5,5),dtype=int)

array([[0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0]])

# použití komplexních čísel
numpy.zeros((2,2),dtype=numpy.complex)

array([[ 0.+0.j,  0.+0.j],
       [ 0.+0.j,  0.+0.j]])
</pre>

<img class="alignnone size-medium wp-image-6892" src="http://mojefedora.cz/wp-content/uploads/2016/04/07-1-418x450.png" alt="07" width="418" height="450" />
<p><i>Obrázek 7: Použití funkcí <strong>numpy.zeros</strong> a <strong>numpy.ones</strong>.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Konstruktor <strong>numpy.ones</strong></h2>

<p>Dalším velmi často používaným typem vektoru či matice je taková struktura, jejíž všechny prvky mají hodnotu 1. Takový vektor popř.&nbsp;matice je možné vytvořit funkcí <strong>numpy.ones</strong></p>

<pre>
numpy.ones(shape, dtype=None, order='C')
</pre>

<p>Nepovinný parametr <strong>dtype</strong> se, podobně jako u předchozí funkce, nastavuje buď na typ nebo na jednoznakový kód uvedený v&nbsp;tabulce <a href="#k03">ve třetí kapitole</a>.</p>

<p>Opět se podívejme na několik příkladů použití této funkce v&nbsp;praxi:</p>

<pre>
# jednorozměrný vektor s deseti prvky
numpy.ones(10)
array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])

# matice se třemi řádky a čtyřmi sloupci
numpy.ones((3,4))

array([[ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.]])

# matice se třemi řádky a čtyřmi sloupci
# s explicitní specifikací typu prvků
numpy.ones((3,4), dtype=int)

array([[1, 1, 1, 1],
       [1, 1, 1, 1],
       [1, 1, 1, 1]])

# trojrozměrné pole s prvky typu int
numpy.ones((3,4,5), dtype=int)

array([[[1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1]],

       [[1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1]],

       [[1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1]]])

# trojrozměrné pole s prvky typu int
# (oproti předchozímu příkladu se velikosti v jednotlivých dimenzích liší)
numpy.ones((5,4,3), dtype=int)

array([[[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]],

       [[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]],

       [[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]],

       [[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]],

       [[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]]])

# zde může být použití typu komplexní číslo možná poněkud překvapující,
# ovšem stále platí, že 1=1+0j
numpy.ones((3,2),dtype=numpy.complex)

array([[ 1.+0.j,  1.+0.j],
       [ 1.+0.j,  1.+0.j],
       [ 1.+0.j,  1.+0.j]])
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Funkce <strong>numpy.arange</strong></h2>

<p>Další funkcí určenou pro konstrukci vektoru je <strong>numpy.arange</strong>, přičemž poněkud zavádějící název &bdquo;arange&ldquo; vznikl složením slov &bdquo;array&ldquo; a &bdquo;range&ldquo;. Této funkci se předávají parametry s&nbsp;podobným významem, jaký mají u funkce <strong>xrange</strong> (Python 2.x) či <strong>range</strong> (Python 3.x), samozřejmě s&nbsp;tím rozdílem, že návratovou hodnotou funkce <strong>numpy.arange</strong> se skutečný vektor typu <strong>ndarray</strong>. Podívejme se na několik možností použití této poměrně nenápadné, ale o to užitečnější funkce:</p>

<pre>
# při použití jednoho parametru má tento parametr význam hodnoty "stop"
# vytvoří se vektor s prvky od 0 do "stop" (kromě)
numpy.arange(10)
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

# specifikace hodnot "start" (včetně) a "stop" (kromě)
numpy.arange(10, 20)
array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19])

# třetí nepovinný parametr určuje krok použitý při generování prvků vektoru
numpy.arange(10, 20, 2)
array([10, 12, 14, 16, 18])

# krok může být samozřejmě záporný
numpy.arange(20, 10, -2)
array([20, 18, 16, 14, 12])

# nemusíme zůstat pouze u celých čísel, protože pracovat je možné i s hodnotami
# typu float a complex
numpy.arange(0,5, 0.1)

array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ,
        1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ,  2.1,
        2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9,  3. ,  3.1,  3.2,
        3.3,  3.4,  3.5,  3.6,  3.7,  3.8,  3.9,  4. ,  4.1,  4.2,  4.3,
        4.4,  4.5,  4.6,  4.7,  4.8,  4.9])

# použití komplexních konstant
numpy.arange(0+0j, 10+10j, 2+0j)
array([ 0.+0.j,  2.+0.j,  4.+0.j,  6.+0.j,  8.+0.j])
</pre>

<img class="alignnone size-medium wp-image-6893" src="http://mojefedora.cz/wp-content/uploads/2016/04/08-1-418x450.png" alt="08" width="418" height="450" />
<p><i>Obrázek 8: Příklady použití funkce <strong>numpy.arange</strong> v&nbsp;IPython Notebooku.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Funkce <strong>numpy.linspace</strong></h2>

<p>V&nbsp;některých případech nemusí být použití výše popsané funkce <strong>numpy.arange</strong> tím nejlepším řešením při vytváření vektoru obsahujícího sekvenci číselných hodnot. Typickým příkladem je sekvence generovaná s&nbsp;krokem 0.1, protože hodnotu 0.1 není možné formáty IEEE 754 single ani double přesně reprezentovat. Tím pádem nemusí být z&nbsp;volání funkce <strong>numpy.arange</strong> ihned zřejmé, kolik prvků se nakonec vygeneruje (typická chyba &pm;1). Pokud je nutné vytvořit vektor s&nbsp;přesným počtem prvků, může se namísto <strong>numpy.arange</strong> hodit funkce <strong>numpy.linspace</strong>, které se předá počáteční hodnota, koncová hodnota a popř.&nbsp;i počet prvků vektoru. Pokud počet prvků není explicitně zadán, použije se hodnota 50. Použití funkce <strong>numpy.linspace</strong> je tak ve skutečnosti velmi jednoduché:</p>

<pre>
# pokud se nespecifikuje počet prvků, bude se předpokládat, že výsledný
# vektor má mít padesát prvků
numpy.linspace(0, 1)

array([ 0.        ,  0.02040816,  0.04081633,  0.06122449,  0.08163265,
        0.10204082,  0.12244898,  0.14285714,  0.16326531,  0.18367347,
        0.20408163,  0.2244898 ,  0.24489796,  0.26530612,  0.28571429,
        0.30612245,  0.32653061,  0.34693878,  0.36734694,  0.3877551 ,
        0.40816327,  0.42857143,  0.44897959,  0.46938776,  0.48979592,
        0.51020408,  0.53061224,  0.55102041,  0.57142857,  0.59183673,
        0.6122449 ,  0.63265306,  0.65306122,  0.67346939,  0.69387755,
        0.71428571,  0.73469388,  0.75510204,  0.7755102 ,  0.79591837,
        0.81632653,  0.83673469,  0.85714286,  0.87755102,  0.89795918,
        0.91836735,  0.93877551,  0.95918367,  0.97959184,  1.        ])

# zde explicitně specifikujeme, že výsledný vektor má mít deset prvků
# (tím, že se začíná od nuly, získáme krok 0.11111111...)
numpy.linspace(0, 1, 10)

array([ 0.        ,  0.11111111,  0.22222222,  0.33333333,  0.44444444,
        0.55555556,  0.66666667,  0.77777778,  0.88888889,  1.        ])

# zde explicitně specifikujeme, že výsledný vektor má mít jedenáct prvků
numpy.linspace(0, 1, 11)
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ])

# sekvence hodnot samozřejmě může i klesat
numpy.linspace(1, 0, 11)
array([ 1. ,  0.9,  0.8,  0.7,  0.6,  0.5,  0.4,  0.3,  0.2,  0.1,  0. ])

# použít je možné i komplexní čísla
numpy.linspace(0+0j, 1+0j, 10)

array([ 0.00000000+0.j,  0.11111111+0.j,  0.22222222+0.j,  0.33333333+0.j,
        0.44444444+0.j,  0.55555556+0.j,  0.66666667+0.j,  0.77777778+0.j,
        0.88888889+0.j,  1.00000000+0.j])

# použít je možné i komplexní čísla
numpy.linspace(0+0j, 0+1j, 10)

array([ 0.+0.j        ,  0.+0.11111111j,  0.+0.22222222j,  0.+0.33333333j,
        0.+0.44444444j,  0.+0.55555556j,  0.+0.66666667j,  0.+0.77777778j,
        0.+0.88888889j,  0.+1.j        ])

# další možnost použití komplexních čísel
numpy.linspace(0+0j, 1+1j, 10)

array([ 0.00000000+0.j        ,  0.11111111+0.11111111j,
        0.22222222+0.22222222j,  0.33333333+0.33333333j,
        0.44444444+0.44444444j,  0.55555556+0.55555556j,
        0.66666667+0.66666667j,  0.77777778+0.77777778j,
        0.88888889+0.88888889j,  1.00000000+1.j        ])
</pre>

<img class="alignnone size-medium wp-image-6894" src="http://mojefedora.cz/wp-content/uploads/2016/04/09-1-418x450.png" alt="09" width="418" height="450" />
<p><i>Obrázek 9: Příklady použití funkce <strong>numpy.linspace</strong> v&nbsp;IPython Notebooku.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přetypování všech prvků v&nbsp;poli</h2>

<p>Při práci s&nbsp;rozměrnými maticemi je v&nbsp;některých případech nutné provést přetypování všech prvků matice (či vektoru). Tuto operaci je možné provést dvěma způsoby. První způsob spočívá v&nbsp;tom, že se názvy datových typů, jako je například <strong>numpy.float32</strong>, <strong>numpy.int32</strong> či <strong>numpy.complex128</strong> (viz též tabulku <a href="#k03">uvedenou ve třetí kapitole</a>), přímo použijí jako funkce pro přetypování:</p>

<pre>
# změna typu
numpy.float32(1.0)

# přetypování
numpy.int64([1,2,3,4])

# přetypování
numpy.float16([1,2,3,4])
array([ 1.,  2.,  3.,  4.], dtype=float16)

# vektor čísel typu float
numpy.linspace(0, 1, 10)

array([ 0.        ,  0.11111111,  0.22222222,  0.33333333,  0.44444444,
        0.55555556,  0.66666667,  0.77777778,  0.88888889,  1.        ])

# přetypování na vektor celých čísel
numpy.int32(numpy.linspace(0, 1, 10))
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 1], dtype=int32)
</pre>

<p>Alternativně se používá metoda (nikoli funkce) nazvaná <strong>astype</strong>, která se volá pro daný vektor, matici, či obecné n-dimenzionální pole. Této metodě se předá požadovaný typ prvků výsledného pole:</p>

<pre>
pole.astype(numpy.float32)
pole.astype(numpy.int8)
pole.astype(numpy.complex64)

a=numpy.arange(0, 10)

a.astype(numpy.complex64)
array([ 0.+0.j,  1.+0.j,  2.+0.j,  3.+0.j,  4.+0.j,  5.+0.j,  6.+0.j,
        7.+0.j,  8.+0.j,  9.+0.j], dtype=complex64)
</pre>

<img class="alignnone size-medium wp-image-6895" src="http://mojefedora.cz/wp-content/uploads/2016/04/10-1-418x450.png" alt="10" width="418" height="450" />
<p><i>Obrázek 10: Příklady přetypování a použití metody <strong>astype</strong> v&nbsp;IPython Notebooku.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Zjištění tvaru pole pomocí funkce <strong>numpy.shape</strong></h2>

<p>Termínem &bdquo;tvar pole&ldquo; je v&nbsp;knihovně Numpy myšlena n-tice obsahující rozměry pole v&nbsp;jednotlivých dimenzích. Pro vektor tato n-tice obsahuje jediné číslo s&nbsp;délkou vektoru, pro matici obsahuje n-tice dvě čísla s&nbsp;počtem řádků a sloupců atd. Zjištění tvaru libovolného pole je tedy značně jednoduché:</p>

<pre>
# jednorozměrný vektor
a=numpy.array([1,2,3])

# dvourozměrná matice
b=numpy.array([[1,2,3],[4,5,6]])

# tvar vektoru
a.shape
(3,)

# tvar matice
b.shape
(2, 3)

# trojrozměrné pole
c=numpy.zeros((2,3,4))

c
array([[[ 0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.]],

       [[ 0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.]]])

# tvar trojrozměrného pole
c.shape
(2, 3, 4)

# další trojrozměrné pole, tentokrát vytvořené explicitně
d=numpy.array([[[1,2], [3,4]], [[5,6], [7,8]]])

numpy.shape(d)
(2, 2, 2)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Změna tvarů polí s&nbsp;využitím funkce <strong>numpy.reshape</strong></h2>

<p>Další velmi důležitou funkcí, s&nbsp;níž se v&nbsp;praxi často setkáme, je funkce nazvaná <strong>numpy.reshape</strong>, která dokáže změnit velikost matice a vhodným způsobem přeorganizovat prvky v&nbsp;původní matici. Této funkci se předávají dva parametry &ndash; prvním parametrem je vstupní pole (vektor, matice, ...), druhým parametrem pak specifikace tvaru výsledného pole, přičemž tvar je reprezentován n-ticí, v&nbsp;níž jsou uloženy velikosti pole v&nbsp;jednotlivých dimenzích. Podívejme se na několik příkladů:</p>

<pre>
# běžná matice se dvěma řádky a třemi sloupci
b=numpy.array([[1,2,3],[4,5,6]])

# změna tvaru matice na 3x2 prvky
numpy.reshape(b,(3,2))

array([[1, 2],
       [3, 4],
       [5, 6]])

# zde vlastně dostaneme původní matici
numpy.reshape(b,(2,3))

array([[1, 2, 3],
       [4, 5, 6]])

# vytvoření matice s jediným řádkem
numpy.reshape(b,(1,6))

array([[1, 2, 3, 4, 5, 6]])

# vytvoření matice s jediným sloupcem
numpy.reshape(b,(6,1))

array([[1],
       [2],
       [3],
       [4],
       [5],
       [6]])
</pre>

<img class="alignnone size-medium wp-image-6896" src="http://mojefedora.cz/wp-content/uploads/2016/04/11-1-418x450.png" alt="11" width="418" height="450" />
<p><i>Obrázek 11: Příklady použití funkce <strong>numpy.reshape</strong> na dvanáctiprvkový vstupní vektor v&nbsp;IPython Notebooku.</i></p>

<p>Při použití funkce <strong>numpy.reshape</strong> si dejte pozor na to, aby se při změně tvarů pole přesně dodržel počet prvků. Pokud by se měl počet prvků změnit, dojde ke vzniku výjimky:</p>

<pre>
a=numpy.array([1,2,3])

numpy.reshape(a, (2,2))
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-74-fa31403e23c0&gt; in &lt;module&gt;()
----&gt; 1 numpy.reshape(a,(2,2))

/usr/lib/python3/dist-packages/numpy/core/fromnumeric.py in reshape(a, newshape, order)
    216     except AttributeError:
    217         return _wrapit(a, 'reshape', newshape, order=order)
--&gt; 218     return reshape(newshape, order=order)
    219 
    220 

ValueError: total size of new array must be unchanged
</pre>

<p>K&nbsp;chybě dojde i v&nbsp;opačném případě, tj.&nbsp;pokud by byl počet prvků vstupního pole sice dostatečný, ale některé prvky by ve výsledném (vytvářeném) poli přebývaly:</p>

<pre>
x=numpy.arange(0,12)

numpy.reshape(x, (2,2))
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-47-0943fdd71a8f&gt; in &lt;module&gt;()
----&gt; 1 numpy.reshape(x, (2,2))

/usr/lib/python3/dist-packages/numpy/core/fromnumeric.py in reshape(a, newshape, order)
    216     except AttributeError:
    217         return _wrapit(a, 'reshape', newshape, order=order)
--&gt; 218     return reshape(newshape, order=order)
    219 
    220 

ValueError: total size of new array must be unchanged
</pre>

<p>Proč tomu tak je? Ve skutečnosti se totiž funkcí <strong>numpy.reshape</strong> nevytváří zcela nové pole s&nbsp;jiným tvarem, ale dochází pouze ke vzniku odlišného pohledu na jediné (zdrojové) pole.</p>

<p>Další příklad pro vstupní vektor s&nbsp;24 prvky a výsledná pole se třemi či čtyřmi dimenzemi:</p>

<pre>
# zdrojový vektor
m=numpy.arange(24)

m

array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23])

# změna tvaru na trojrozměrné pole
numpy.reshape(m, (2,3,4))

array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])

# změna tvaru vektoru na trojrozměrné pole
numpy.reshape(m, (4,2,3))

array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]],

       [[12, 13, 14],
        [15, 16, 17]],

       [[18, 19, 20],
        [21, 22, 23]]])

# změna tvaru vektoru na čtyřrozměrné pole
numpy.reshape(m, (2,2,2,3))

array([[[[ 0,  1,  2],
         [ 3,  4,  5]],

        [[ 6,  7,  8],
         [ 9, 10, 11]]],


       [[[12, 13, 14],
         [15, 16, 17]],

        [[18, 19, 20],
         [21, 22, 23]]]])

# změna tvaru vektoru na čtyřrozměrné pole
numpy.reshape(m, (3,2,2,2))

array([[[[ 0,  1],
         [ 2,  3]],

        [[ 4,  5],
         [ 6,  7]]],


       [[[ 8,  9],
         [10, 11]],

        [[12, 13],
         [14, 15]]],


       [[[16, 17],
         [18, 19]],

        [[20, 21],
         [22, 23]]]])
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vliv nepovinného parametru &bdquo;order&ldquo; na (zdánlivou) změnu tvaru pole</h2>

<p>S&nbsp;nepovinným parametrem &bdquo;order&ldquo; jsme se již setkali u funkce <strong>numpy.array</strong>. Tento parametr lze použít i při změně tvaru pole funkcí <strong>numpy.reshape</strong>. Opět platí, že je možné specifikovat řazení prvků podle jazyka Fortran či podle jazyka C. Změní se tedy pohled na původní pole resp.&nbsp;pohled na to, jakým způsobem knihovna Numpy počítá indexy prvků (k&nbsp;vlastnímu přeorganizování pole v&nbsp;operační paměti však nedojde):</p>

<pre>
# nyní vyzkoušíme význam nepovinného parametru order
numpy.reshape(m, (6,4))

array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15],
       [16, 17, 18, 19],
       [20, 21, 22, 23]])

numpy.reshape(m, (6,4), order='C')

array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15],
       [16, 17, 18, 19],
       [20, 21, 22, 23]])

numpy.reshape(m, (6,4), order='F')

array([[ 0,  6, 12, 18],
       [ 1,  7, 13, 19],
       [ 2,  8, 14, 20],
       [ 3,  9, 15, 21],
       [ 4, 10, 16, 22],
       [ 5, 11, 17, 23]])
</pre>

<img class="alignnone size-medium wp-image-6897" src="http://mojefedora.cz/wp-content/uploads/2016/04/12-1-418x450.png" alt="12" width="418" height="450" />
<p><i>Obrázek 12: Příklady použití funkce <strong>numpy.reshape</strong> na dvanáctiprvkový vstupní vektor v&nbsp;IPython Notebooku.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Předchozí části seriálu</h2>

<ol>

<li>Vývojová prostředí ve Fedoře (1. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-1-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-1-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (2. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-2-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-2-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (3. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-3-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-3-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: PyDev<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: PyDev (2.část)<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev-2-cast/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev-2-cast/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: IPython a IPython Notebook<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/</a>
</li>

</ol>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>IPython homepage<br />
<a href="http://ipython.org/">http://ipython.org/</a>
</li>

<li>Dokumentace k IPythonu<br />
<a href="http://ipython.org/documentation.html#">http://ipython.org/documentation.html#</a>
</li>

<li>IPython Tutorial<br />
<a href="http://ipython.readthedocs.org/en/stable/interactive/tutorial.html">http://ipython.readthedocs.org/en/stable/interactive/tutorial.html</a>
</li>

<li>NumPy Home Page<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>NumPy v1.10 Manual<br />
<a href="http://docs.scipy.org/doc/numpy/index.html">http://docs.scipy.org/doc/numpy/index.html</a>
</li>

<li>NumPy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NumPy">https://en.wikipedia.org/wiki/NumPy</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>The cell magics in IPython<br />
<a href="http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb">http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb</a>
</li>

<li>0MQ Home Page<br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>Is IPython Notebook ever used as an IDE, or merely for presentations?<br />
<a href="https://www.reddit.com/r/IPython/comments/1uk7hp/is_ipython_notebook_ever_used_as_an_ide_or_merely/">https://www.reddit.com/r/IPython/comments/1uk7hp/is_ipython_notebook_ever_used_as_an_ide_or_merely/</a>
</li>

<li>The IDE as a Bad Programming Language Enabler <br />
<a href="https://dzone.com/articles/ide-bad-programming-language">https://dzone.com/articles/ide-bad-programming-language</a>
</li>

<li>Enhanced Interactive Python with IPython<br />
<a href="http://www.onlamp.com/pub/a/python/2005/01/27/ipython.html">http://www.onlamp.com/pub/a/python/2005/01/27/ipython.html</a>
</li>

<li>Direct mode<br />
<a href="https://en.wikipedia.org/wiki/Direct_mode">https://en.wikipedia.org/wiki/Direct_mode</a>
</li>

<li>Seznámení s&nbsp;Python IDE Spyder (článek vyšel zde na mojefedora.cz)<br />
<a href="http://mojefedora.cz/seznameni-s-python-ide-spyder/">http://mojefedora.cz/seznameni-s-python-ide-spyder/</a>
</li>

<li>Stránka s&nbsp;popisem různých IDE pro Python<br />
<a href="http://quintagroup.com/cms/python/ide">http://quintagroup.com/cms/python/ide</a>
</li>

<li>Eclipse (stránka o frameworku na Fedoraproject.org)<br />
<a href="https://fedoraproject.org/wiki/Eclipse">https://fedoraproject.org/wiki/Eclipse</a>
</li>

<li>PyDev (hlavní stránka)<br />
<a href="http://pydev.sourceforge.net/index.html">http://pydev.sourceforge.net/index.html</a>
</li>

<li>PyDev (download, v podstatě není zapotřebí)<br />
<a href="http://pydev.sourceforge.net/download.html">http://pydev.sourceforge.net/download.html</a>
</li>

<li>PyDev (stránka s metainformacemi o PyDev pluginu, použita v Eclipse)<br />
<a href="http://www.pydev.org/updates/">http://www.pydev.org/updates/</a>
</li>

<li>PyDev (stránka s pluginem, použita v Eclipse)<br />
<a href="https://dl.bintray.com/fabioz/pydev/4.5.4/">https://dl.bintray.com/fabioz/pydev/4.5.4/</a>
</li>

<li>Certifikát, který lze do Eclipse doinstalovat<br />
<a href="http://www.pydev.org/pydev_certificate.cer">http://www.pydev.org/pydev_certificate.cer</a>
</li>

<li>PyDev FAQ<br />
<a href="http://pydev.sourceforge.net/faq.html">http://pydev.sourceforge.net/faq.html</a>
</li>

<li>PyDev (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PyDev">https://en.wikipedia.org/wiki/PyDev</a>
</li>

<li>Python (oficiální stránky projektu)<br />
<a href="https://www.python.org/">https://www.python.org/</a>
</li>

<li>Jython<br />
<a href="http://www.jython.org/">http://www.jython.org/</a>
</li>

<li>IronPython<br />
<a href="http://ironpython.net/">http://ironpython.net/</a>
</li>

<li>Python 3.5.1 documentation<br />
<a href="https://docs.python.org/3/">https://docs.python.org/3/</a>
</li>

<li>PyDev: Unittest integration<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/</a>
</li>

<li>Continuous unit testing with Pydev (Python and Eclipse)<br />
<a href="http://stackoverflow.com/questions/1015581/continuous-unit-testing-with-pydev-python-and-eclipse">http://stackoverflow.com/questions/1015581/continuous-unit-testing-with-pydev-python-and-eclipse</a>
</li>

<li>Test-driven development<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

