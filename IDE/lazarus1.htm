<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Integrované vývojové prostředí Lazarus: jen zdánlivý anachronismus</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Integrované vývojové prostředí Lazarus: jen zdánlivý anachronismus</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku se ve stručnosti seznámíme s multiplatformním integrovaným vývojovým prostředím, které se jmenuje Lazarus. Jedná se o tzv. RAD, přičemž vzhled, možnosti i chování do značné míry odpovídá slavnému vývojovému prostředí Delphi.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Integrované vývojové prostředí Lazarus: jen zdánlivý anachronismus</a></p>
<p><a href="#k02">2. Nástroje typu RAD &ndash; Rapid Application Development</a></p>
<p><a href="#k03">3. Lazarus: návrh GUI + programovací jazyk + debugger</a></p>
<p><a href="#k04">4. A co databáze?</a></p>
<p><a href="#k05">5. Od standardního Pascalu přes Turbo Pascal a Object Pascal k&nbsp;Free Pascalu</a></p>
<p><a href="#k06">6. Vybrané vlastnosti podporované Free Pascalem</a></p>
<p><a href="#k07">7. Lazarus Component Library (LCL)</a></p>
<p><a href="#k08">8. Jednoduchý příklad: aplikace s&nbsp;formulářem</a></p>
<p><a href="#k09">9. Soubory, z&nbsp;nichž se projekt skládá</a></p>
<p><a href="#k10">10. Ukázka obsahu vybraných souborů</a></p>
<p><a href="#k11">11. Poznámka k&nbsp;výslednému binárnímu souboru s&nbsp;aplikací</a></p>
<p><a href="#k12">12. Ladění vyvíjených aplikací</a></p>
<p><a href="#k13">13. Přizpůsobení vývojového prostředí</a></p>
<p><a href="#k14">14. SynEdit</a></p>
<p><a href="#k15">15. Kombinace Pascalu s&nbsp;assemblerem</a></p>
<p><a href="#k16">16. Vytváření dokumentace</a></p>
<p><a href="#k17">17. Alternativní projekty</a></p>
<p><a href="#k18">18. Gambas &ndash; Gambas Almost Means BASIC</a></p>
<p><a href="#k19">19. PySide a Qt Creator</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Integrované vývojové prostředí Lazarus: jen zdánlivý anachronismus</h2>

<p>V&nbsp;dnešním článku se seznámíme s&nbsp;multiplatformním integrovaným
vývojovým prostředím, které se jmenuje <i>Lazarus</i>. Jedná se o
programátorské prostředí, které se snaží (a nutno říci, že velmi úspěšně) o
napodobení stylu (a dnes spíše ještě dalšího vylepšení) vývoje aplikací
použitého ve známém a především v&nbsp;minulosti velmi populárním komerčním IDE
nazvaném <i>Delphi</i>. Toto vývojové prostředí bylo vyvíjeno původně
společností Borland a později firmou Embarcadero Technologies následované
společností Idera. Samotné Delphi, jehož první verze vydaná v&nbsp;roce 1995
byla původně určena pro šestnáctibitový systém Windows 3.x, bylo v&nbsp;dalších
verzích upraveno pro 32bitové systémy Windows 95, Windows NT i navazující řadu
operačních systémů společnosti Microsoft. Současná verze Delphi vydaná výše
zmíněnou společností Idera je pochopitelně určena i pro 64bitové operační
systémy.</p>

<p><div class="rs-tip-major">Poznámka: celkový vzhled grafického uživatelského
rozhraní Lazaru a například i použité klávesové zkratky skutečně odpovídají
starším verzím Delphi, což je samozřejmě výhodné především pro ty programátory,
kteří s&nbsp;tímto prostředím dlouhodobě pracují či musí například udržovat
starší projekty.</div></p>

<p>Mimochodem &ndash; původně se mělo Delphi jmenovat Borland AppBuilder, ovšem
krátce před vydáním Delphi byla vydána aplikace AppBuilder společnosti Novell
(s&nbsp;jiným zaměřením). Z&nbsp;tohoto důvodu se přešlo na interní (a to velmi
populární) jméno Delphi, navíc s&nbsp;tím, že tento RAD nástroj dokázal dobře
komunikovat s&nbsp;databázemi, v&nbsp;té době především s&nbsp;Oracle. Takže
bylo možné psát &bdquo;If you want to talk to [the] Oracle, go to
Delphi&ldquo;.</p>

<a href="https://www.root.cz/obrazek/445646/"><img src="https://i.iinfo.cz/images/375/lazarus-2-prev.png" class="image-445646" alt="&#160;" width="370" height="268" /></a>
<p><i>Obrázek 1: Integrované vývojové prostředí projektu Lazarus spuštěné
v&nbsp;Linuxu.</i></p>

<p><div class="rs-tip-major">Poznámka pro netrpělivé čtenáře: nejsilnějším
prvkem projektu Lazarus je návrh aplikací s&nbsp;plnohodnotným desktopovým
grafickým uživatelským rozhraním. Lze ho pochopitelně použít i pro jiné účely,
například pro tvorbu webových služeb atd., ovšem v&nbsp;těchto oblastech se již
používají odlišná řešení. Lazarus tak do značné míry žije
&bdquo;paralelně&ldquo; s&nbsp;jazyky a IDE určenými pro jiné účely.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Nástroje typu RAD &ndash; Rapid Application Development</h2>

<p>Programová a tedy de facto i ruční tvorba grafického uživatelského rozhraní
trpí hned několika dosti zásadními neduhy. Zejména se jedná o mnohdy zbytečně
nízkoúrovňovou práci, ovšem horší problém spočívá v&nbsp;tom, že požadavek na
změnu GUI (například i pouhé posunutí nějakého ovládacího prvku) vyžaduje zásah
do programového kódu, který navíc není či nemusí vždy být triviální a
intuitivní. Tohoto úskalí si byly některé softwarové firmy vědomy již minimálně
od začátku devadesátých let minulého století a právě z&nbsp;tohoto důvodu
vznikly nástroje typu <i>RAD</i> neboli <i>Rapid Application Development</i>.
Tyto nástroje umožňují nejenom velmi rychlou tvorbu grafického uživatelského
rozhraní s&nbsp;využitím návrhářů GUI, ale &ndash; což je možná ještě
důležitější &ndash; obousměrnou vazbu mezi grafickým uživatelským rozhraním a
programovým kódem. Dnes se zkratkou RAD označují (alespoň v&nbsp;některých
případech) i nástroje typu Glade, které ovšem ve skutečnosti
&bdquo;pouze&ldquo; slouží k&nbsp;návrhu GUI. Ovšem skutečné RAD mají vazbu
mezi návrhem GUI a kódem oboustrannou A přesně do této kategorie spadá i
Lazarus.</p>

<a href="http://i.iinfo.cz/images/75/llang02images-1.jpg"><img src="http://i.iinfo.cz/images/75/llang02images-1-prev.jpg" width="370" height="248" alt=" " /></a>
<p><i>Obrázek 2: Historická první verze vývojového prostředí Delphi 1.0
běžícího ve Windows 3.11.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Lazarus: návrh GUI + programovací jazyk + debugger</h2>

<p>Silnou stránkou projektu Lazarus je jeho orientace na rychlou tvorbu
aplikací s&nbsp;plnohodnotným grafickým uživatelským rozhraním
popř.&nbsp;aplikací, které nějakým způsobem komunikují s&nbsp;databázemi.
Tvorba grafického uživatelského rozhraní přitom vyžaduje jak GUI navrhnout
(tj.&nbsp;navrhnout rozmístění ovládacích prvků do formulářů), tak ho propojit
s&nbsp;programovým kódem, konkrétně naprogramováním reakcí na události. A právě
snadnost tohoto propojení GUI a kódu byl asi největší faktor úspěchu projektu
Delphi, na který Lazarus navázal.</p>

*** image ***
<p><i>Obrázek 3. Samotné Delphi, přesněji řečeno jeho část orientovaná na návrh
grafického uživatelského rozhraní, bylo inspirováno Visual Basicem (zde
konkrétně první 32bitová verze Delphi 2.0).</i></p>

<p>Vzhledem k&nbsp;tomu, že je Delphi založeno na programovacím jazyku
<i>Object Pascal</i>, je v&nbsp;integrovaném vývojovém prostředí Lazarus
vytvořeno propojení s&nbsp;multiplatformním překladačem <i>fpc</i>
programovacího jazyka <i>Free Pascal</i> a samotné prostředí obsahuje jak
poměrně pokročilý programátorský editor (se zvýrazněním syntaxe, foldingem,
šablonami, podporou jednoduchého refaktoringu atd.) tak i interaktivní grafický
editor určený pro návrh formulářů. Nesmíme samozřejmě zapomenout ani na ladicí
program (debugger), který je do Lazaru plně integrován (stejně jako debugger do
Delphi &ndash; ostatně vývojová prostředí vyvíjená firmou Borland byla oblíbena
mj.&nbsp;i díky kvalitním interním debuggerům).</p>

<img src="https://i.iinfo.cz/images/257/pygubu-1.png" class="image-445652" alt="&#160;" width="642" height="537" />
<p><i>Obrázek 4: Obrazovka nástroje Pygubu designer určeného pro návrh
grafického uživatelského rozhraní aplikací vytvářených v&nbsp;Pythonu. Jedná se
o jeden z&nbsp;mnoha projektů, které byly inspirovány prostředím Borland Delphi
a Microsoft Visual Basic.</i></p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;posledních několika letech se
můžeme setkat s&nbsp;tím, že se desktopové aplikace začínají vytvářet
s&nbsp;využitím webových technologií. Typickým příkladem jsou aplikace
postavené na technologii <a href="https://www.electronjs.org/">Electron</a>.
Těmito typy aplikací &ndash; které pochopitelně opět trpí několika neduhy
&ndash; se ovšem v&nbsp;dnešním článku zabývat nebudeme.</div></p>

*** image ***
<p><i>Obrázek 5: 32bitová verze Delphi 2.0 (pravděpodobně jeden
z&nbsp;nejlepších SW té doby).</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. A co databáze?</h2>

<p>Jednou z&nbsp;velmi důležitých součástí integrovaného vývojového prostředí
Lazarus a taktéž jeho ideového předchůdce Delphi jsou komponenty nabídnuté
v&nbsp;nástrojovém panelu nazvaném <i>Data Access</i>, které do značné míry
zjednodušují použití relačních databází ve vyvíjených aplikacích, protože
nabízí dvě abstrakce: připojení k&nbsp;databázím a práci s&nbsp;výsledky
dotazů. Podporovány jsou různé typy a verze (většinou relačních) databází, do
nichž se vyvíjené aplikace mohou připojovat s&nbsp;využitím takzvaných datových
zdrojů (<i>data source</i>, představováno komponentou
<strong>TDataSource</strong>). Pro prezentaci dat získaných z&nbsp;databází na
formulářích vytvářené aplikace slouží množství specializovaných a mnohdy i
dosti komplikovaných ovládacích prvků, které lze nalézt na nástrojovém panelu
<i>Data Controls</i> a taktéž na panelu <i>SQLdb</i>.</p>

*** image ***
<p><i>Obrázek 6: Paleta (nástrojový panel) s&nbsp;komponentami Data
Controls.</i></p>

<p>Podporováno je připojení k&nbsp;následujícím databázím resp.&nbsp;přesněji
řečeno k&nbsp;datovým zdrojům (protože například textové soubory ve formátu CSV
atd. nejsou plnohodnotnou databází):</p>

<ol>
<li>Advantage</li>
<li>DBase</li>
<li>TurboPower</li>
<li>In memory</li>
<li>Firebird</li>
<li>(Visual) FoxPro</li>
<li>Interbase</li>
<li>Microsoft SQL Server</li>
<li>MySQL</li>
<li>ODBC</li>
<li>Oracle</li>
<li>Paradox</li>
<li>PostgreSQL</li>
<li>Sybase Adaptive Server Enterprise (ASE)</li>
<li>SQLite</li>
<li>Textové soubory s&nbsp;daty</li>
</ol>

<p><div class="rs-tip-major">Poznámka: existují i další komponenty od třetích
stran, které zpřístupňují další typy databází. Příkladem může být komponenta
nazvaná poměrně příznačně <i>Universal Data Access</i>.</div></p>

*** image ***
<p><i>Obrázek 7: Paleta (nástrojový panel) s&nbsp;komponentami Data
Access.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Od standardního Pascalu přes Turbo Pascal a Object Pascal k&nbsp;Free Pascalu</h2>

<p>Lazarus je projekt, v&nbsp;němž se (alespoň zdánlivě) setkáme s&nbsp;mnoha
anachronismy, což může být považováno jak za velkou přednost (stabilita), tak
za nedostatek (použití technologií, které dnes nejsou považovány za moderní či
alespoň &bdquo;moderní&ldquo;). Týká se to zejména samotného programovacího
jazyka, na němž je celý projekt Lazarus postaven. Již v&nbsp;úvodní kapitole
jsme se zmínili o tom, že předlohou pro Lazarus bylo integrované vývojové
prostředí Delphi, které je založeno na programovacím jazyku Object Pascal
odvozeného od Turbo Pascalu, který sám vznikl úpravami a rozšířením
standardního Pascalu (ovšem s&nbsp;několika důležitými odlišnostmi od původního
Pascalu).</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti je jméno Object Pascal
poněkud zavádějící, protože existuje více jazyků s&nbsp;tímto jménem.
Nejznámější je však varianta Pascalu použitá v&nbsp;Delphi.</div></p>

<p>Lazarus používá programovací jazyk nazvaný Free Pascal, jenž je od Object
Pascalu odvozen, ovšem ve skutečnosti došlo k&nbsp;dalším rozšířením tohoto
jazyka o další vlastnosti. Navíc je možné ve Free Pascalu definovat použitý
jazyk pro každý modul zvlášť a lze tak například zkombinovat několik modulů,
z&nbsp;nichž každý je naprogramovaný v&nbsp;jiné variantě Pascalu. Buďme ovšem
konkrétní &ndash; podporovány jsou tyto dialekty programovacího jazyka
Pascal:</p>

<ol>
<li>Free Pascal</li>
<li>Object Pascal</li>
<li>Turbo Pascal</li>
<li>Delphi</li>
<li>Delphi with Unicode</li>
<li>Mac Pascal</li>
<li>GNU Pascal</li>
<li>ISO 7185 Standard Pascal</li>
<li>Extended Pascal</li>
</ol>

<p><div class="rs-tip-major">Poznámka: mohlo by se zdát, že dlouhá cesta
vedoucí od standardního Pascalu přes Turbo Pascal až po Object Pascal povede
k&nbsp;tomu, že na sebe výsledný jazyk nabalí různé historické smetí. Kupodivu
to však v&nbsp;tomto případě není tak hrozné, i když pochopitelně narazíme na
některé problematičtější části jazyka. Týká se to například problematického
datového typu <strong>string</strong>, jehož původní vlastnosti (omezení na
ASCII + maximální délka 255 znaků) pochopitelně velmi brzy přestaly vyhovovat a
postupně vzniklo hned několik dalších datových typů určených pro reprezentaci
řetězců.</div></p>

*** image ***
<p><i>Obrázek 8: Součástí Free Pascalu je i integrované vývojové prostředí
pracující v&nbsp;terminálu, které jako by z&nbsp;oka vypadlo slavnému Turbo
Pascalu.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vybrané vlastnosti podporované Free Pascalem</h2>

<p>V&nbsp;této kapitole se seznámíme s&nbsp;vybranými zajímavými vlastnostmi
podporovanými Free Pascalem. Některé z&nbsp;těchto vlastností byly převzaty
z&nbsp;Turbo Pascalu (například skvělá integrace s&nbsp;assemblerem), další pak
buď z&nbsp;Delphi nebo se jedná o novinky představené přímo ve Free
Pascalu.</p>

<p>Jedním z&nbsp;relativně nových konceptů ve světě Pascalu (od Delphi 4) jsou
takzvaná dynamická pole (<i>dynamic arrays</i>), jejichž velikost není
resp.&nbsp;ani nemusí být známá v&nbsp;době překladu (<i>compile time</i>).
V&nbsp;původním Pascalu, ale například ještě i v&nbsp;Turbo Pascalu, totiž byla
součástí datového typu &bdquo;pole&ldquo; i informace o dolním a současně i o
horním indexu &ndash; a nepřímo tedy i velikost pole (překročení indexů navíc
bylo kontrolováno i v&nbsp;době běhu; kontrolu lze vypnout):</p>

<pre>
mzdy : Array[1..12] of Integer;
</pre>

<p>Možnost definovat jak horní, tak i dolní index je ve skutečnosti velmi silná
technika, která zjednodušuje mnoho algoritmů, ovšem na druhou stranu není vždy
možné znát již v&nbsp;době překladu aplikace velikost pole. A právě
v&nbsp;takových případech se (pochopitelně kromě dalších více či méně vhodných
datových struktur) používají dynamická pole. Jedná se o datový typ, u něhož se
definuje typ prvků, ovšem nikoli již délka pole ani horní a dolní index:</p>

<pre>
pixels: Array of Byte
</pre>

<p>Alokace paměti pro dynamické pole se provádí v&nbsp;čase běhu aplikace
(<i>runtime</i>), a to konkrétně procedurou <strong>setLength</strong>. To
ovšem není vše, protože stejným způsobem, tj.&nbsp;zavoláním procedury
<strong>setLength</strong>, je možné pole zvětšit i zmenšit. To se interně
provádí alokací nového bloku paměti a kopií prvků z&nbsp;původního pole do pole
nového (což nemusí být velmi efektivní, pokud se realokace provádí velmi
často). Navíc je typ <strong>Array of Typ</strong> pochopitelně použitelný i
v&nbsp;deklaracích procedur a funkcí &ndash; v&nbsp;tomto případě se tedy jedná
o rozšíření již dříve používaného typu nazvaného <i>open array</i>.</p>

<p>Interně jsou dynamická pole vlastně obdobou ukazatelů, což znamená, že
sémantika práce s&nbsp;nimi je odlišná od statických polí. Týká se to i
indexování, které začíná od nuly atd.</p>

<a href="https://www.root.cz/obrazek/445647/"><img src="https://i.iinfo.cz/images/375/lazarus-3-prev.png" class="image-445647" alt="&#160;" width="370" height="268" /></a>
<p><i>Obrázek 9: Informace o použité verzi projektu Lazarus.</i></p>

<p>Dalším užitečným rozšířením Free Pascalu je podpora pro generické datové
typy. Pro příklad nemusíme chodit daleko, protože je popsán přímo
v&nbsp;referenční příručce tohoto jazyka. Jedná se o implementaci seznamu,
přičemž jeho prvky jsou popsány genericky:</p>

<pre>
Type  
  generic TList&lt;_T&gt;=class(TObject)
  Public
    type
       TCompareFunc = function(const Item1, Item2: _T): Integer;
    var
      data : _T;
    procedure Add(item: _T);
    procedure Sort(compare: TCompareFunc);
  end
</pre>

<p>Za touto definicí by měla následovat implementace metod <strong>Add</strong>
a <strong>Sort</strong>, opět s&nbsp;generickým datovým typem:</p>

<pre>
procedure TList.Add(item: _T);
begin
    ...
    ...
    ...
end;
&nbsp;
procedure TList.Sort(compare: TCompareFunc);  
begin
    ...
    ...
    ...
end;
</pre>

<p>Ve skutečnosti nejsou generické typy navázány pouze na třídy. Lze vytvářet
například i generické záznamy (struktury) apod:</p>

<pre>
type
&nbsp;
  generic PlanarCoordinate&lt;t&gt; = record
    x,y : t;
  end;
 &nbsp;
  TScreenCoordinate = specialize PLanarCoordinate&lt;word&gt;;
  TDiscreteCoordinate = specialize PlanarCoordinate&lt;integer&gt;;
  TRealCoordinate = specialize PlanarCoordinate&lt;extended&gt;;
&nbsp;
  generic TDistanceFunction&lt;t&gt; = function (x,y : t) : Extended of object;
</pre>

<p><div class="rs-tip-major">Poznámka: tento příklad byl opět zkopírován
z&nbsp;originální dokumentace.</div></p>

<img src="https://i.iinfo.cz/images/375/lazarus-1.png" class="image-445645" alt="&#160;" width="622" height="415" />
<p><i>Obrázek 10: Dialog s&nbsp;konfigurací prostředí projektu Lazarus.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Lazarus Component Library (LCL)</h2>

<p>Součástí integrovaného vývojového prostředí Lazarus je i <i>LCL</i>, neboli
plným jménem <i>Lazarus Component Library</i>. Toto jméno zcela záměrně
připomíná <i>VCL</i> (<i>Visual Component Library</i>), což byla knihovna
(nejenom grafických) komponent používaná v&nbsp;originálním prostředí Delphi.
Ovšem zatímco VCL bylo orientováno především na použití v&nbsp;operačních
systémech Microsoft Windows, obsahuje LCL rozhraní hned pro několik
&bdquo;nativních&ldquo; GUI knihoven, zejména GTK+ (verze 2.x i 3.x), Qt, Win
API a pro operační systém Mac OS X existuje vazba pro knihovny Cocoa a
Carbon.</p>

*** image ***
<p><i>Obrázek 11: Rozšiřující komponenty, z&nbsp;nichž lze skládat GUI
aplikace.</i></p>

<p>To mj.&nbsp;znamená, že programátor vytvářející svoji aplikaci
s&nbsp;grafickým uživatelským rozhraním s&nbsp;využitím knihovny LCL nemusí ve
svém programovém kódu složitě řešit, jaké konkrétní grafické prvky (widgety) se
ve výsledku použijí, protože bude komunikovat pouze s&nbsp;univerzálním
rozhraním společným pro všechny zmíněné GUI knihovny. Napojení projektu na
zvolenou konkrétní GUI knihovnu se provede v&nbsp;čase překladu aplikace. Na
druhou stranu ovšem snadné tímto způsobem není možné využívat některé
speciality konkrétní nativní knihovny, například některé specifické ovládací
prvky.</p>

*** image ***
<p><i>Obrázek 12: Seznam všech nainstalovaných komponent s&nbsp;možností jejich
vyhledávání.</i></p>

<p><div class="rs-tip-major">Poznámka: o komponentách dostupných na paletě
<i>SynEdit</i> se zmíníme v&nbsp;samostatné kapitole.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Jednoduchý příklad: aplikace s&nbsp;formulářem</h2>

<p>Pro prozatím velmi stručné představení možností projektu Lazarus si zkusme
vytvořit jednoduchou aplikaci s&nbsp;jediným formulářem, který bude obsahovat
jedno tlačítko. Po stisku tohoto tlačítka se zobrazí dialog s&nbsp;klasickou
zprávou &bdquo;Hello, world!&ldquo;. Samotný návrh takové aplikace není nijak
složitý. Ihned po spuštění projektu Lazarus by se totiž měl otevřít
předpřipravený projekt. Ten obsahuje prázdný formulář. Přitom každý formulář
(tedy okno aplikace) se skládá jak z&nbsp;vizuálního návrhu formuláře, tak i
z&nbsp;programové jednotky (<i>unit</i>) naprogramované ve Free Pascalu.
Připraveny jsou přitom obě tyto části:</p>

*** image ***
<p><i>Obrázek 13: Prostředí projektu Lazarus po spuštění s&nbsp;otevřeným
výchozím projektem. Na popředí vidíme návrh formuláře, na pozadí pak
programovou jednotku (unit) přiřazenou k&nbsp;tomuto formuláři.</i></p>

<p>Do formuláře přidáme tlačítko z&nbsp;nástrojového pruhu
&bdquo;Standard&ldquo;. Následně u tlačítka změníme jeho popisek
(<i>Caption</i>). Vazba mezi vlastností (<i>properties)</i> <i>Caption</i> a
skutečným popisem tlačítka je okamžitá:</p>

*** image ***
<p><i>Obrázek 14: Přidání tlačítka do formuláře se změnou popisku tohoto
tlačítka.</i></p>

<p>Nakonec se dvojím klikem na tlačítko automaticky vytvoří metoda
<strong>Button1Click</strong> (lze později přejmenovat) formuláře
<strong>TForm1</strong>, která bude při běhu aplikace zavolána po stisku daného
tlačítka. Prozatím je tělo této metody prázdné:</p>

<pre>
{ TForm1 }
&nbsp;
procedure <strong>TForm1.Button1Click</strong>(Sender: TObject);
begin
end;
</pre>

<p>Naprogramování reakce na stisk tlačítka je v&nbsp;našem případě triviální,
protože můžeme použít proceduru <strong>ShowMessage</strong> pro zobrazení
standardního dialogu:</p>

<pre>
{ TForm1 }
&nbsp;
procedure <strong>TForm1.Button1Click</strong>(Sender: TObject);
begin
  ShowMessage('Hello, world!')
end;
</pre>

<p>Aplikaci lze nyní spustit. Již tradičně (a tato tradice je delší než 30
let!) se pro tento účel používá klávesa <strong>F9</strong>:</p>

*** image ***
<p><i>Obrázek 15: Aplikace po spuštění.</i></p>

<p>Po kliknutí na tlačítko ve formuláři se zobrazí standardní dialog
s&nbsp;připraveným hlášením:</p>

*** image ***
<p><i>Obrázek 16: Otevření dialogu po výběru tlačítka.</i></p>

<p><div class="rs-tip-major">Poznámka: jak jméno formuláře, tak i jméno
tlačítka je možné změnit, což se projeví jak v&nbsp;návrháři GUI, tak i ve
zdrojových kódech.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Soubory, z&nbsp;nichž se projekt skládá</h2>

<p>Lazarus vytváří několik souborů, z&nbsp;nichž se skládá výsledný projekt.
V&nbsp;našem konkrétním případě, tj.&nbsp;pro projekt s&nbsp;jediným
formulářem, se jedná o následující soubory (ponechal jsem výchozí jména, i když
v&nbsp;praxi je pochopitelně mnohem lepší používat správné identifikátory):</p>

<table>
<tr><th>Soubor</th><th>Význam koncovky</th><th>Stručný popis</th></tr>
<tr><td>project1</td><td>&times;</td><td>vygenerovaný spustitelný soubor pro zvolenou architekturu</td></tr>
<tr><td>project1.ico</td><td>icon</td><td>binární soubor s&nbsp;ikonou projektu (lze změnit)</td></tr>
<tr><td>project1.lpi</td><td>Lazarus Project Information file</td><td>strukturovaný soubor s&nbsp;informacemi o projektu</td></tr>
<tr><td>project1.lpr</td><td>Lazarus Program File</td><td>zdrojový soubor tvořící &bdquo;vstupní bod&ldquo; celé aplikace</td></tr>
<tr><td>project1.lps</td><td>Lazarus project Session</td><td>soubor obsahující aktuální rozložení oken, nastavení projektu atd.</td></tr>
<tr><td>project1.res</td><td>resource</td><td>všechny zdroje (obrázky, datové soubory) používané projektem</td></tr>
<tr><td>unit1.lfm</td><td>Lazarus Form</td><td>textová podoba návrhu formuláře</td></tr>
<tr><td>unit1.pas</td><td>Pascal</td><td>zdrojový kód s&nbsp;implementací metod reagujících na události ve formuláři</td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Ukázka obsahu vybraných souborů</h2>

<p>Nejprve se podívejme na to, jak vlastně vypadá soubor nazvaný
<strong>project1.lpr</strong>. Víme již, že <strong>lpr</strong> znamená
<i>Lazarus Program file</i>. Jde o zdrojový soubor psaný v&nbsp;Pascalu, který
tvoří vstupní bod do aplikace a lze ho pochopitelně upravovat:</p>

<pre>
program project1;
&nbsp;
{$mode objfpc}{$H+}
&nbsp;
uses
  {$IFDEF UNIX}{$IFDEF UseCThreads}
  cthreads,
  {$ENDIF}{$ENDIF}
  Interfaces, // this includes the LCL widgetset
  Forms, Unit1
  { you can add units after this };
&nbsp;
{$R *.res}
&nbsp;
begin
  RequireDerivedFormResource:=True;
  Application.Scaled:=True;
  <strong>Application.Initialize;</strong>
  <strong>Application.CreateForm(TForm1, Form1);</strong>
  <strong>Application.Run;</strong>
end.
</pre>

<p>Povšimněte si především zvýrazněných řádků, které provádí inicializaci
aplikace, vytvoření formuláře (na obrazovce) a následné spuštění aplikace.</p>

<p>Dále se podívejme na soubor nazvaný <strong>unit1.pas</strong>. Opět se
jedná o zdrojový soubor, tentokrát s&nbsp;definicí (jediného) formuláře
aplikace. Je zde definována i výše zmíněná callback metoda (viz sekci nazvanou
příznačně <strong>implementation</strong>):</p>

<pre>
unit Unit1;
&nbsp;
{$mode objfpc}{$H+}
&nbsp;
interface
&nbsp;
uses
  Classes, SysUtils, Forms, Controls, Graphics, Dialogs, StdCtrls;
&nbsp;
type
&nbsp;
  { TForm1 }
&nbsp;
  TForm1 = class(TForm)
    Button1: TButton;
    procedure Button1Click(Sender: TObject);
  private
&nbsp;
  public
&nbsp;
  end;
&nbsp;
var
  Form1: TForm1;
&nbsp;
implementation
&nbsp;
{$R *.lfm}
&nbsp;
{ TForm1 }
&nbsp;
procedure TForm1.Button1Click(Sender: TObject);
begin
  ShowMessage('Hello, world!')
end;
&nbsp;
end.
</pre>

<p>A konečně se podívejme na soubor <strong>Unit1.lfm</strong>. Tento soubor je
v&nbsp;čitelné (textové) podobně a obsahuje definici (popis) formuláře, tedy
jak jeho vizuální podobu, tak i například vazby na callback metody atd.:</p>

<pre>
object Form1: TForm1
  Left = 335
  Height = 240
  Top = 269
  Width = 320
  Caption = 'Form1'
  ClientHeight = 240
  ClientWidth = 320
  LCLVersion = '2.0.6.0'
  object Button1: TButton
    Left = 16
    Height = 25
    Top = 16
    Width = 75
    Caption = 'Say Hello'
    OnClick = Button1Click
    TabOrder = 0
  end
end
</pre>

<p><div class="rs-tip-major">Poznámka: starší verze Delphi umožňovaly, aby
tento soubor byl v&nbsp;binární podobě, což však (pochopitelně) bude dělat
problémy při používání systémů pro správu verzí, při review procesu
atd.</div></p>

*** image ***
<p><i>Obrázek 17: Nastavení vlastností projektu.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Poznámka k&nbsp;výslednému binárnímu souboru s&nbsp;aplikací</h2>

<p>V&nbsp;mém konkrétním případě (Linux na 64bitové architektuře) má
spustitelný soubor <strong>project1</strong>, který vznikl překladem projektu,
velikost úctyhodných 21&nbsp;458&nbsp;912 bajtů (tedy přibližně 21MB). To se
může zdát hodně, ovšem mnoho prostoru zabírají ladicí symboly. Pokud nepočítáte
s&nbsp;laděním výsledného binárního spustitelného souboru, lze velikost zmenšit
například nástrojem <strong>strip</strong>. Po této operaci bude jeho velikost
&bdquo;pouhých&ldquo; 6&nbsp;030&nbsp;512 bajtů (tedy zhruba 6MB). I to se může
zdát hodně, ovšem relativně značná velikost tohoto souboru je způsobena
statickou kompilací knihoven Lazaru. Jinými slovy &ndash; výsledný binární
soubor by měl být přenositelný i na další počítače se stejným operačním
systémem běžícím na shodné architektuře.</p>

<p>Pro zajímavost se ještě podívejme, které dynamické knihovny jsou zapotřebí
pro běh:</p>

<pre>
linux-vdso.so.1 (0x00007ffd5dff2000)
libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f02c72b3000)
libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f02c7290000)
libgdk-x11-2.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libgdk-x11-2.0.so.0 (0x00007f02c71d5000)
libX11.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libX11.so.6 (0x00007f02c7098000)
libgdk_pixbuf-2.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libgdk_pixbuf-2.0.so.0 (0x00007f02c7070000)
libgtk-x11-2.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libgtk-x11-2.0.so.0 (0x00007f02c6c16000)
libgobject-2.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 (0x00007f02c6bb4000)
libglib-2.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0 (0x00007f02c6a8b000)
libgthread-2.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libgthread-2.0.so.0 (0x00007f02c6a86000)
libgmodule-2.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libgmodule-2.0.so.0 (0x00007f02c6a80000)
libpango-1.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libpango-1.0.so.0 (0x00007f02c6a31000)
libcairo.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libcairo.so.2 (0x00007f02c690e000)
libatk-1.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libatk-1.0.so.0 (0x00007f02c68e2000)
libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f02c66f0000)
/lib64/ld-linux-x86-64.so.2 (0x00007f02c72d6000)
libpangocairo-1.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libpangocairo-1.0.so.0 (0x00007f02c66de000)
libgio-2.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libgio-2.0.so.0 (0x00007f02c64fd000)
libfontconfig.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libfontconfig.so.1 (0x00007f02c64b6000)
libXrender.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libXrender.so.1 (0x00007f02c62ac000)
libXinerama.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libXinerama.so.1 (0x00007f02c62a5000)
libXi.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXi.so.6 (0x00007f02c6293000)
libXrandr.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libXrandr.so.2 (0x00007f02c6286000)
libXcursor.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libXcursor.so.1 (0x00007f02c6279000)
libXcomposite.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libXcomposite.so.1 (0x00007f02c6274000)
libXdamage.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libXdamage.so.1 (0x00007f02c626f000)
libXfixes.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libXfixes.so.3 (0x00007f02c6265000)
libXext.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXext.so.6 (0x00007f02c6250000)
libxcb.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libxcb.so.1 (0x00007f02c6226000)
libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f02c60d7000)
libpangoft2-1.0.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libpangoft2-1.0.so.0 (0x00007f02c60be000)
libffi.so.7 =&gt; /usr/lib/x86_64-linux-gnu/libffi.so.7 (0x00007f02c60b0000)
libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007f02c603d000)
libfribidi.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libfribidi.so.0 (0x00007f02c6020000)
libthai.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libthai.so.0 (0x00007f02c6015000)
libharfbuzz.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libharfbuzz.so.0 (0x00007f02c5f10000)
libpixman-1.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libpixman-1.so.0 (0x00007f02c5e67000)
libfreetype.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libfreetype.so.6 (0x00007f02c5da8000)
libpng16.so.16 =&gt; /usr/lib/x86_64-linux-gnu/libpng16.so.16 (0x00007f02c5d70000)
libxcb-shm.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-shm.so.0 (0x00007f02c5d6b000)
libxcb-render.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-render.so.0 (0x00007f02c5d5c000)
libz.so.1 =&gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00007f02c5d40000)
libmount.so.1 =&gt; /lib/x86_64-linux-gnu/libmount.so.1 (0x00007f02c5cde000)
libselinux.so.1 =&gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f02c5cb3000)
libresolv.so.2 =&gt; /lib/x86_64-linux-gnu/libresolv.so.2 (0x00007f02c5c97000)
libexpat.so.1 =&gt; /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007f02c5c69000)
libuuid.so.1 =&gt; /lib/x86_64-linux-gnu/libuuid.so.1 (0x00007f02c5c60000)
libXau.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXau.so.6 (0x00007f02c5c58000)
libXdmcp.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 (0x00007f02c5c50000)
libdatrie.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libdatrie.so.1 (0x00007f02c5c46000)
libgraphite2.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libgraphite2.so.3 (0x00007f02c5c19000)
libblkid.so.1 =&gt; /lib/x86_64-linux-gnu/libblkid.so.1 (0x00007f02c5bc2000)
libpcre2-8.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libpcre2-8.so.0 (0x00007f02c5b30000)
libbsd.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libbsd.so.0 (0x00007f02c5b16000)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Ladění vyvíjených aplikací</h2>

<p>Vývojová prostředí společnosti Borland byla oblíbená mj.&nbsp;i kvůli velmi
dobré integraci s&nbsp;debuggery. Tyto ladicí prostředky byly většinou přímo
součástí vývojového prostředí. V&nbsp;projektu Lazarus, který se snaží o
podobnou uživatelskou přítulnost, se pro ladění používá <i>GNU debugger</i>
neboli <i>gdb</i>, kterému jsme se již <a
href="https://www.root.cz/clanky/trasovani-a-ladeni-nativnich-aplikaci-v-linuxu-pouziti-gdb-a-jeho-nadstaveb/">na
stránkách Roota</a> věnovali. Ovšem <i>GNU debugger</i> je ve skutečnosti volán
na pozadí, tj.&nbsp;sice se skutečně používá, ovšem bez nutnosti opuštění
grafického uživatelského rozhraní projektu Lazarus.</p>

<p>Lazarus podporuje všechny základní možnosti debuggerů, tj.&nbsp;krokování,
nastavení breakpointů, zobrazení obsahu lokálních proměnných, sledování obsahu
vybraných proměnných, zobrazení zásobníku s&nbsp;historií volání funkcí atd.
Většinou při ladění postačuje nastavit do laděné části kódu breakpoint (buď bez
nebo s&nbsp;podmínkou):</p>

*** image ***
<p><i>Obrázek 18: Nastavení breakpointu v&nbsp;laděné aplikaci.</i></p>

<p>Následně se po spuštění aplikace a příchodu na breakpoint může začít
s&nbsp;laděním. Některá okna používaná pro ladění jsou zobrazena na dalším
screenshotu:</p>

*** image ***
<p><i>Obrázek 19: Průběh ladění aplikace. Tři další okna obsahují zásobník
s&nbsp;volanými funkcemi/procedurami/metodami, dále obsah lokálních proměnných
a třetí okno pak obsah uživatelem vybraných proměnných.</i></p>

<p><div class="rs-tip-major">Poznámka: dokonce je možné nakonfigurovat vzdálené
ladění, tj.&nbsp;stav, kdy aplikace běží na jiném stroji, než grafické
uživatelské rozhraní vývojového prostředí.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Přizpůsobení vývojového prostředí</h2>

<p>Nastavení integrovaného vývojového prostředí Lazarus je možné poměrně široce
modifikovat. Týká se to například chování integrovaného programátorského
textového editoru, konfigurace překladače, ale v&nbsp;neposlední řadě i chování
GUI. Některé možnosti jsou ukázány na následujících screenshotech, včetně jedné
(alespoň podle mého názoru) velmi důležité volby, která mění chování GUI
v&nbsp;okenních manažerech.</p>

*** image ***
<p><i>Obrázek 20: Nastavení chování integrovaného textového editoru.</i></p>

*** image ***
<p><i>Obrázek 21: Toto je velmi důležitá volba, která dokáže nastavit chování
podobné, jaké má původní Delphi. Jedná se o to, jestli se každé okno IDE bude
v&nbsp;okenním manažeru zobrazovat samostatně (například na dolní liště, což je
výchozí chování), či zda se bude celý Lazarus chovat jako jediná aplikace (a to
včetně minimalizace/obnovení oken atd.).</i></p>

*** image ***
<p><i>Obrázek 22: Nakonfigurovat je možné i automatické či poloautomatické
formátování zdrojového kódu v&nbsp;prostředí IDE.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. SynEdit</h2>

<p>Velmi užitečnou komponentou, kterou je možné použít v&nbsp;projektech
s&nbsp;GUI, je <i>SynEdit</i>. Jedná se o implementaci textového editoru (což
je mnohem sofistikovanější komponenta, než běžné víceřádkové textové pole),
který je možné nakonfigurovat takovým způsobem, aby zvýrazňoval syntaxi, která
je definována v&nbsp;dalších komponentách na paletě SynEditu. Tyto komponenty
podporují syntaxi Pascalu, Pythonu, C++, Visual Basicu, Perlu (což si myslím,
že nelze vyřešit 100% korektně), ale i SQL, XML či HTML. Ostatně i vlastní
programátorský textový editor projektu Lazarus je na <i>SynEditu</i>
založen.</p>

*** image ***
<p><i>Obrázek 23: Informace o nepatrně starší verzi projektu Lazarus.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Kombinace Pascalu s&nbsp;assemblerem</h2>

<p>Jen pro zajímavost si ukažme, jak je implementována další typicky
&bdquo;turbopascalácká&ldquo; vlastnost. Jedná se o možnost kombinace
zdrojového kódu psaného ve Free Pascalu s&nbsp;assemblerem. Původně se ve Free
Pascalu pro tyto účely volal <i>GNU Assembler</i>, nyní se používá interní
assembler, takže překlad není zdržován voláním externího nástroje. Podporována
je především architektura x86(64) a taktéž z&nbsp;historického pohledu
přelomová architektura Motorola 68k (68000).</p>

<p>Následuje příklad kombinace kódu psaného v&nbsp;Pascalu a v&nbsp;assembleru
v&nbsp;rámci jediného programového bloku (samotný <strong>asm-end</strong>
tvoří nový podblok). Povšimněte si, že z&nbsp;assembleru je možné přistupovat
k&nbsp;proměnným Pascalu:</p>

<pre>
var
    x : integer;
begin
    x := 42;
    asm
        movl x,%eax
    end;
end;
</pre>

<p>Dokonce je možné deklarovat celou funkci či proceduru, jejíž tělo je psané
v&nbsp;assembleru:</p>

<pre>
function foobar : pointer;assembler;  
asm  
    movl (%esp),%ebx  
    ret  
end;
</pre>

<p><div class="rs-tip-major">Poznámka: použitá syntaxe je skutečně velmi
příjemná na používání, i když dnes se bude s&nbsp;velkou pravděpodobností
jednat spíše o zajímavost.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Vytváření dokumentace</h2>

<p>Pro tvorbu dokumentace o jednotlivých programových jednotkách ale i o celém
projektu slouží nástroj nazvaný <strong>fpdoc</strong>. Ten dokáže načíst
zdrojové kódy, zpracovat jejich strukturu, najít v&nbsp;nich dokumentační
řetězce atd. a následně vytvořit dokumentaci ve zvoleném formátu. Výstup může
být proveden do HTML (tak ostatně vznikla i celá <a
href="https://www.freepascal.org/docs-html/current/rtl/index.html">dokumentace
ke standardní knihovně Free Pascalu</a>), XML, LaTeXu, ale i do prostého textu
či do formátu <i>Microsoft Compiled HTML Help</i> (CHM) používaném primárně ve
Windows, ovšem zobrazitelném i v&nbsp;Linuxu.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Alternativní projekty</h2>

<p>V&nbsp;závěru dnešního článku se ve stručnosti seznámíme s&nbsp;některými
alternativními projekty, které vývojářům většinou nabízí plnohodnotné
<i>RAD</i>. Do této skupiny aplikací patří kromě Lazara i projekt
<i>Gambas</i>, jenž vývojářům přináší obdobu <a
href="https://www.techworm.net/2017/11/perl-hated-programming-language-developers-says-report.html">nechvalně
proslulého</a> programovacího jazyka Visual Basic (ovšem spíše se jedná o
dialekt) a konečně nesmíme zapomenout ani na projekt <a href="#k19">Qt
Creator</a> (dříve <i>Qt Designer</i>). S&nbsp;příchodem aplikací založených na
webových technologiích sice význam těchto nástrojů poněkud klesl, ovšem
například pro vnitropodnikové aplikace se stále (podle mého skromného názoru)
jedná o velmi snadno a především rychle použitelnou technologii vyžadující méně
vstupních znalostí (a méně systémových prostředků na straně uživatele).</p>

<img src="https://i.iinfo.cz/images/428/gambas-1.png" class="image-445649" alt="&#160;" width="484" height="416" />
<p><i>Obrázek 24: Dnes již historická verze Gambasu 1.0.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Gambas &ndash; Gambas Almost Means BASIC</h2>

<p>První &bdquo;alternativní&ldquo; integrované vývojové prostředí
s&nbsp;možnostmi RAD, s&nbsp;nímž se v&nbsp;dnešním článku alespoň ve
stručnosti seznámíme, se jmenuje <i>Gambas</i> neboli <i>Gambas Almost Means
BASic</i>. Jak již druhá část jména tohoto IDE napovídá, jedná se o integrované
vývojové prostředí, v&nbsp;němž se používá programovací jazyk odvozený (či
spíše inspirovaný) <i>Visual Basicem</i>. Autor Gambasu, jímž je programátor
<i>Benoit Minisini</i>, sám v&nbsp;přiložené dokumentaci píše, že na vývoji
Gambasu začal původně pracovat především z&nbsp;toho důvodu, že mu množství
chyb a různých nekonzistencí, které můžeme najít v&nbsp;původním Visual Basicu
(nikoli ovšem nutně ve VB .NET) prostě připadalo rozkošné, takže se nechal
Visual Basicem inspirovat (a tím pádem demonstroval platnost tvrzení
&bdquo;worse is better&ldquo;).</p>

<img src="https://i.iinfo.cz/images/428/gambas-2.png" class="image-445650" alt="&#160;" width="450" height="337" />
<p><i>Obrázek 25: SDI (Single Document Interface) integrovaného vývojového
prostředí Gambasu.</i></p>

<p><div class="rs-tip-major">Poznámka: na tomto místě je však nutné vysvětlit,
že Gambas ve své současné verzi (v&nbsp;praxi se ještě stále používá jak verze
1.x, tak i v&nbsp;mnoha ohledech vylepšená verze 2.x a 3.x, poslední stabilní
verzí je 3.16.3 z&nbsp;roku 2021) je stabilní a poměrně schopné vývojové
prostředí a i programovací jazyk založený na strukturovaném Visual Basicu
rozšířeném o konstrukce určené pro práci s&nbsp;objekty, nemá
s&nbsp;prapůvodním BASICem s&nbsp;čísly řádků a nestrukturovanými konstrukcemi
založenými na příkazu GOTO prakticky nic společného (až na jméno).</div></p>

<img src="https://i.iinfo.cz/images/428/gambas-3.png" class="image-445651" alt="&#160;" width="577" height="519" />
<p><i>Obrázek 26: Dialog zobrazený při vytváření nového projektu
v&nbsp;prostředí Gambasu.</i></p>

<p>Ovšem tím hlavním důvodem, proč se v&nbsp;tomto článku vůbec integrovaným
vývojovým prostředím Gambas v&nbsp;dnešním článku zabýváme, však není zvolený
programovací jazyk, ale další velmi důležitá součást tohoto IDE &ndash; jedná
se totiž mj.&nbsp;i o interaktivní grafický návrhář formulářů, díky jehož
existenci je možné velmi jednoduše a především rychle a navíc s&nbsp;relativně
velkým komfortem vytvořit i poměrně složitou aplikaci s&nbsp;plnohodnotným
grafickým uživatelským rozhraním.</p>

<p>Interaktivní návrhář formulářů v&nbsp;prostředí Gambas je samozřejmě
obousměrně propojen s&nbsp;ostatními částmi integrovaného vývojového prostředí,
zejména s&nbsp;programátorským editorem zdrojových kódů. To například znamená,
že pokud se na formuláři vytvoří nové tlačítko, je možné ihned začít psát
obslužný kód zavolaný ve chvíli, kdy bude toto tlačítko na reálném GUI použito.
Způsob propojení návrháře a programátorského editoru je obdobný způsobu, který
byl využit v&nbsp;již výše zmíněném Visual Basicu (Microsoft) a později taktéž
ve slavném Delphi vytvořeném a prodávaném společností Borland. Později došlo
&ndash; to již ovšem víme z&nbsp;úvodních kapitol &ndash; k&nbsp;rozšíření
tohoto úspěšného konceptu i do dalších IDE, konkrétně například do Lazaru.</p>

<p><div class="rs-tip-major">Poznámka: Gambas nativně podporuje Linux, FreeBSD,
dále je vyvíjena verze pro Mac OS X, ovšem provoz na Microsoft Windows je možný
pouze přes Cygwin. Naproti tomu Lazarus pracuje nativně na všech
nejpoužívanějších platformách.</div></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. PySide a Qt Creator</h2>

<p>Možnou alternativou k&nbsp;projektu Lazarus může být <i>PySide</i> založené
na frameworku Qt. Zde se používají tzv.&nbsp;UI soubory popř.&nbsp;QML (<i>Qt
Modeling Language</i>).</p>

<p>Do souborů UI se ukládají popisy jednotlivých uživatelsky definovaných
ovládacích prvků (widgetů), formulářů i celých oken. Jedná se o formát založený
na XML, což znamená, že tyto soubory je možné relativně snadno zpracovat i
dalšími nástroji (XML editory atd.). Tyto soubory lze vytvářet například <i>Qt
Creatorem</i>. Ve chvíli, kdy je soubor UI s&nbsp;popisem nějakého prvku GUI
(widget, formulář, okno) vytvořen, dá se použít několika různými způsoby:</p>

<ul>

<li>Soubor UI lze načíst do běžící aplikace naprogramované v&nbsp;C++
s&nbsp;využitím třídy <strong>QUiLoader</strong>.</li>

<li>Soubor UI lze načíst do běžící aplikace naprogramované v&nbsp;Pythonu, opět
s&nbsp;využitím třídy <strong>QUiLoader</strong>.</li>

<li>Soubor UI je možné konvertovat na zdrojový kód v&nbsp;C++ nástrojem
<i>UIC</i> (<i>User Interface Compiler</i>).</li>

<li>Soubor UI je možné konvertovat na zdrojový kód v&nbsp;Pythonu nástrojem
<i>Python-uic</i>. Výsledek by měl být dobře pochopitelný, protože se používají
postupy, které jsme si popsali v&nbsp;předchozích článcích.</li>

</ul>

<p>Jedním z&nbsp;nástrojů, který dokáže vytvářet soubory <strong>.ui</strong>,
je aplikace nazvaná <i>Qt Creator</i>. Jak již název tohoto nástroje napovídá,
jedná se o IDE určené primárně pro desktopové prostředí KDE založené na
knihovně Qt, ovšem ve skutečnosti nám samozřejmě nic nebrání použít Qt Creator
i na desktopu se spuštěným Gnome Shellem popř.&nbsp;s&nbsp;nějakým
&bdquo;alternativním&ldquo; desktopovým prostředím (jediným problémem bude
nepatrně delší čas spouštění zapříčiněný načítáním knihovny Qt do paměti). To,
že je Qt Creator původně orientován na vývoj aplikací postavených na knihovně
Qt a tím pádem i na programovacím jazyku C++, je patrné již při pohledu na
screenshoty, kde jsou ukázány dialogy zobrazené při vytváření nového
projektu.</p>

<p><div class="rs-tip-major">Poznámka: dříve (před Qt 5) existovala samostatná
aplikace nazvaná <i>Qt Designer</i>, která byla určená prakticky výhradně na
návrh GUI. Dnes jsou funkce obou nástrojů sjednoceny právě v&nbsp;<i>Qt
Creatoru</i>, i když se například ve starší dokumentaci stále setkáme
s&nbsp;původním názvem.</div></p>

<a href="https://www.root.cz/obrazek/329330/"><img src="https://i.iinfo.cz/images/619/qtcreator-3-prev.png" class="image-329330" alt="&#160;" width="370" height="264" /></a>
<p><i>Obrázek 2&: Vítací obrazovka dnes již poněkud starší verze Qt
Creatoru.</i></p>

<p>Formát souborů vytvářených Qt Creatorem se však odlišuje od stejně
pojmenovaných souborů vytvářených systémem Pygubu:</p>

<pre>
&lt;ui version="4.0"&gt;
 &lt;class&gt;MainWindow&lt;/class&gt;
 &lt;widget class="QMainWindow" name="MainWindow" &gt;
  &lt;property name="geometry" &gt;
   &lt;rect&gt;
    &lt;x&gt;0&lt;/x&gt;
    &lt;y&gt;0&lt;/y&gt;
    &lt;width&gt;400&lt;/width&gt;
    &lt;height&gt;300&lt;/height&gt;
   &lt;/rect&gt;
  &lt;/property&gt;
  &lt;property name="windowTitle" &gt;
   &lt;string&gt;MainWindow&lt;/string&gt;
  &lt;/property&gt;
  &lt;widget class="QMenuBar" name="menuBar" /&gt;
  &lt;widget class="QToolBar" name="mainToolBar" /&gt;
  &lt;widget class="QWidget" name="centralWidget" /&gt;
  &lt;widget class="QStatusBar" name="statusBar" /&gt;
 &lt;/widget&gt;
 &lt;layoutDefault spacing="6" margin="11" /&gt;
 &lt;pixmapfunction&gt;&lt;/pixmapfunction&gt;
 &lt;resources/&gt;
 &lt;connections/&gt;
&lt;/ui&gt;
</pre>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Lazarus &ndash; home page<br />
<a href="https://www.lazarus-ide.org/">https://www.lazarus-ide.org/</a>
</li>

<li>Lazarus (IDE)<br />
<a href="https://en.wikipedia.org/wiki/Lazarus_(IDE)">https://en.wikipedia.org/wiki/Lazarus_(IDE)</a>
</li>

<li>Lazarus &ndash; dokumentace<br />
<a href="https://www.getlazarus.org/learn/">https://www.getlazarus.org/learn/</a>
</li>

<li>Lazarus &ndash; dokumentace ve formátu chm<br />
<a href="https://sourceforge.net/projects/lazarus/files/Lazarus%20Documentation/Lazarus%202.2RC2/">https://sourceforge.net/projects/lazarus/files/Lazarus%20Documentation/Lazarus%202.2RC2/</a>
</li>

<li>Lazarus &ndash; getting started<br />
<a href="https://www.getlazarus.org/learn/tutorials/start/">https://www.getlazarus.org/learn/tutorials/start/</a>
</li>

<li>Introducing Lazarus<br />
<a href="https://www.getlazarus.org/learn/tutorials/introduction/#introducing_lazarus">https://www.getlazarus.org/learn/tutorials/introduction/#introducing_lazarus</a>
</li>

<li>Lexikální struktura Free Pascalu<br />
<a href="https://www.getlazarus.org/learn/language/lexical/">https://www.getlazarus.org/learn/language/lexical/</a>
</li>

<li>Object Pascal<br />
<a href="https://en.wikipedia.org/wiki/Object_Pascal">https://en.wikipedia.org/wiki/Object_Pascal</a>
</li>

<li>Comparison of integrated development environments: Pascal, Object Pascal<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Pascal,_Object_Pascal">https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Pascal,_Object_Pascal</a>
</li>

<li>Free Pascal and Lazarus Wiki<br />
<a href="https://wiki.lazarus.freepascal.org/">https://wiki.lazarus.freepascal.org/</a>
</li>

<li>Projects using Free Pascal<br />
<a href="https://wiki.freepascal.org/Projects_using_Free_Pascal">https://wiki.freepascal.org/Projects_using_Free_Pascal</a>
</li>

<li>Free Pascal<br />
<a href="https://www.freepascal.org/">https://www.freepascal.org/</a>
</li>

<li>Free Pascal: Online documentation<br />
<a href="https://www.freepascal.org/docs.html">https://www.freepascal.org/docs.html</a>
</li>

<li>Free Pascal User’s Guide<br />
<a href="https://www.freepascal.org/docs-html/current/user/user.html">https://www.freepascal.org/docs-html/current/user/user.html</a>
</li>

<li>Free Pascal Programmer’s Guide<br />
<a href="https://www.freepascal.org/docs-html/current/prog/prog.html">https://www.freepascal.org/docs-html/current/prog/prog.html</a>
</li>

<li>Free Pascal Reference guide<br />
<a href="https://www.freepascal.org/docs-html/current/ref/ref.html">https://www.freepascal.org/docs-html/current/ref/ref.html</a>
</li>

<li>Free Pascal Run-Time Library<br />
<a href="https://www.freepascal.org/docs-html/current/rtl/index.html">https://www.freepascal.org/docs-html/current/rtl/index.html</a>
</li>

<li>Free Pascal FCL: Free Component Library<br />
<a href="https://www.freepascal.org/docs-html/current/fcl/index.html">https://www.freepascal.org/docs-html/current/fcl/index.html</a>
</li>

<li>Reference for package 'fcl-res'<br />
<a href="https://www.freepascal.org/docs-html/current/fclres/index.html">https://www.freepascal.org/docs-html/current/fclres/index.html</a>
</li>

<li>Free Pascal code documenter: Reference manual<br />
<a href="https://www.freepascal.org/docs-html/current/fpdoc/fpdoc.html">https://www.freepascal.org/docs-html/current/fpdoc/fpdoc.html</a>
</li>

<li>Free Pascal Run-Time Library: Reference guide (zastaralé)<br />
<a href="https://www.root.cz/knihy/free-pascal-run-time-library-reference-guide/">https://www.root.cz/knihy/free-pascal-run-time-library-reference-guide/</a>
</li>

<li>Topic: The future of Free Pascal<br />
<a href="https://forum.lazarus.freepascal.org/index.php?topic=31347.30">https://forum.lazarus.freepascal.org/index.php?topic=31347.30</a>
</li>

<li>Free Pascal: Future plans<br />
<a href="https://freepascal.org/future.var">https://freepascal.org/future.var</a>
</li>

<li>SynEdit<br />
<a href="https://wiki.freepascal.org/SynEdit">https://wiki.freepascal.org/SynEdit</a>
</li>

<li>Interaktivní tvorba grafického uživatelského rozhraní nástrojem Pygubu<br />
<a href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-nastrojem-pygubu/">https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-nastrojem-pygubu/</a>
</li>

<li>Interaktivní tvorba grafického uživatelského rozhraní s využitím nástroje Pygubu (2)<br />
<a href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-s-vyuzitim-nastroje-pygubu-2/">https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-s-vyuzitim-nastroje-pygubu-2/</a>
</li>

<li>Interaktivní tvorba grafického uživatelského rozhraní s využitím nástroje Pygubu (dokončení)<br />
<a href="https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-s-vyuzitim-nastroje-pygubu-dokonceni/">https://www.root.cz/clanky/interaktivni-tvorba-grafickeho-uzivatelskeho-rozhrani-s-vyuzitim-nastroje-pygubu-dokonceni/</a>
</li>

<li>Graphical user interface builder<br />
<a href="https://en.wikipedia.org/wiki/Graphical_user_interface_builder">https://en.wikipedia.org/wiki/Graphical_user_interface_builder</a>
</li>

<li>Seriál Grafické uživatelské rozhraní v&nbsp;Pythonu<br />
<a href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/</a>
</li>

<li>User interface markup language<br />
<a href="https://en.wikipedia.org/wiki/User_interface_markup_language">https://en.wikipedia.org/wiki/User_interface_markup_language</a>
</li>

<li>Dynamic array<br />
<a href="https://wiki.freepascal.org/Dynamic_array">https://wiki.freepascal.org/Dynamic_array</a>
</li>

<li>Platformy podporované Free Pascalem<br />
<a href="https://wiki.freepascal.org/Platform_list">https://wiki.freepascal.org/Platform_list</a>
</li>

<li>Databases<br />
<a href="https://wiki.freepascal.org/Databases">https://wiki.freepascal.org/Databases</a>
</li>

<li>Lazarus Database Overview<br />
<a href="https://wiki.freepascal.org/Lazarus_Database_Overview">https://wiki.freepascal.org/Lazarus_Database_Overview</a>
</li>

<li>PostgreSQL Data Access Components<br />
<a href="https://www.devart.com/pgdac/">https://www.devart.com/pgdac/</a>
</li>

<li>Trasování a ladění nativních aplikací v Linuxu: použití GDB a jeho nadstaveb<br />
<a href="https://www.root.cz/clanky/trasovani-a-ladeni-nativnich-aplikaci-v-linuxu-pouziti-gdb-a-jeho-nadstaveb/">https://www.root.cz/clanky/trasovani-a-ladeni-nativnich-aplikaci-v-linuxu-pouziti-gdb-a-jeho-nadstaveb/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

