<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s využitím knihoven Numpy a matplotlib (2.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s využitím knihoven Numpy a matplotlib (2.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na předchozí článek, v&nbsp;němž jsme se seznámili se základními typy grafů dostupných v&nbsp;knihovně Matplotlib, dnes navážeme. Ukážeme si totiž způsob vykreslení sloupcových grafů, oblíbených koláčových grafů, práci s&nbsp;histogramy i některé pokročilejší techniky použité při změnách stylů vykreslování.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s&nbsp;využitím knihoven Numpy a matplotlib (2.část)</a></p>
<p><a href="#k02">2. Propojení naměřených či vypočtených bodů úsečkami</a></p>
<p><a href="#k03">3. Graf používající &bdquo;schodky&ldquo;</a></p>
<p><a href="#k04">4. Jednoduchý sloupcový graf</a></p>
<p><a href="#k05">5. Sloupcový graf se dvěma skupinami sloupců</a></p>
<p><a href="#k06">6. Zobrazení histogramu</a></p>
<p><a href="#k07">7. Koláčový graf</a></p>
<p><a href="#k08">8. Změna stylu vykreslování koláčových grafů</a></p>
<p><a href="#k09">9. Sloupcový graf se zobrazením odchylek (či chyb)</a></p>
<p><a href="#k10">10. Pokročilejší nastavení způsobu vykreslení odchylek</a></p>
<p><a href="#k11">11. Repositář s&nbsp;demonstračními příklady z&nbsp;předchozího článku</a></p>
<p><a href="#k12">12. Repositář s&nbsp;demonstračními příklady z&nbsp;dnešního článku</a></p>
<p><a href="#k13">13. Předchozí části seriálu</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s&nbsp;využitím knihoven Numpy a matplotlib (2.část)</h2>

<p>Na <a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-vykreslovani-grafu-s-vyuzitim-knihoven-numpy-a-matplotlib/">předchozí článek</a>, v&nbsp;němž jsme si popsali základní vlastnosti knihovny <i>Matplotlib</i>, zejména kombinaci možností této knihovny s&nbsp;knihovnou <i>Numpy</i>, dnes navážeme. Ukážeme si totiž, jakým způsobem je možné vykreslit další typy grafů, zejména <a href="#k04">sloupcové grafy s&nbsp;jedním polem vstupním dat</a>, <a href="#k05">sloupcové grafy s&nbsp;větším množstvím polí se vstupními daty</a>, <a href="#k09">sloupcové grafy se zobrazením odchylek (či chyb)</a>, <a href="#k06">histogramy</a> a samozřejmě taktéž oblíbené, i když mnohdy spíše zneužívané <a href="#k07">koláčové grafy</a> i jejich <a href="#k08">vylepšené varianty</a>. Taktéž si ukážeme rozdíl mezi propojením naměřených či vypočtených hodnot <a href="#k02">úsečkami</a> a grafem, na němž jsou jasně patrné <a href="#k03">&bdquo;schodky&ldquo;</a>.</p>

<img class="alignnone size-medium wp-image-7015" src="http://mojefedora.cz/wp-content/uploads/2016/04/figure_11-450x339.png" alt="figure_11" width="450" height="339" />
<p><i>Obrázek 1: V&nbsp;předchozím článku jsme si mj.&nbsp;ukázali i způsob tvorby polárních grafů.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Propojení naměřených či vypočtených bodů úsečkami</h2>

<p>Minule jsme se seznámili se dvěma typy grafů. Jednalo se především o snad vůbec nejběžnější typ grafu, v&nbsp;němž byly naměřené či vypočtené hodnoty pospojovány úsečkami, takže se vlastně pro celý průběh použila jediná lomená čára (polyčára). Jednou z&nbsp;možných modifikací tohoto typu grafu bylo vyplnění plochy pod vykreslenou lomenou čárou. Druhým typem grafu byl polární graf, který se vykresluje naprosto stejným způsobem (lomená čára popř.&nbsp;vyplněné segmenty pod touto čárou), ovšem při výpočtu jednotlivých bodů se namísto kartézských souřadnic používají souřadnice polární.</p>

<img class="alignnone size-medium wp-image-7007" src="http://mojefedora.cz/wp-content/uploads/2016/04/figure_03-450x339.png" alt="figure_03" width="450" height="339" />
<p><i>Obrázek 2: Graf, na němž jsou nakresleny průběhy dvou funkcí.</i></p>

<p>Pro připomenutí programové tvorby podobných grafů se podívejme na způsob vykreslení průběhu tří funkcí. Povšimněte si, že i když může mít rastrový či vektorový obrázek s&nbsp;grafem libovolnou velikost, je ve skutečnosti vypočteno pouze sto bodů každého průběhu a tyto body jsou následně pospojovány úsečkami. Vzhledem k&nbsp;tomu, že sto bodů je relativně vysoké číslo a samotné průběhy funkcí nevykazují velké změny (skoky apod.), vypadají všechny tři průběhy přirozeně, ovšem při snížení počtu bodů na pouhých deset se již ukazuje, jakým způsobem se graf vykresluje:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Dvanáctý demonstrační příklad:
# - vykreslení průběhu funkce sinc
# - při vykreslování se jednotlivé body spojí úsečkami

import numpy as np
import matplotlib.pyplot as plt

# hodnoty na x-ové ose
x = np.linspace(0.2, 2*np.pi, 100)

# hodnoty na y-ové ose
y = np.sin(5*x)/x
y2 = 1/x
y3 = -y2

# vykreslit průběh funkce
plt.plot(x, y2, color='red',  label='obalka sinc')
plt.plot(x, y3, color='red',  label='obalka sinc')
plt.plot(x, y,  color='blue', label='sinc(x)')

# povolení zobrazení mřížky
plt.grid(True)

# popis os
plt.xlabel("x")
plt.ylabel("sinc(x)")

# přidání legendy
plt.legend(loc="lower right")

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7087" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_1-450x339.png" alt="figure_1" width="450" height="339" />
<p><i>Obrázek 3: Vykreslení průběhu tří funkcí. Ve skutečnosti se však pro každou funkci vypočte pouze sto bodů, které jsou propojeny úsečkami. Díky velké hustotě bodů není (alespoň na těchto funkcích) náhrada hladkých křivek za lomenou čáru viditelné.</i></p>

<img class="alignnone size-medium wp-image-7101" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_1a-450x339.png" alt="figure_1a" width="450" height="339" />
<p><i>Obrázek 4: Pokud se počet vypočtených bodů sníží (zde na pouhých deset), je již jasně patrné, jakým způsobem byl graf vykreslen.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Graf používající &bdquo;schodky&ldquo;</h2>

<p>V&nbsp;některých případech nám nemusí výše popsaný způsob vykreslení průběhů funkcí vyhovovat. Knihovna <i>Matplotlib</i> nám samozřejmě vychází vstříc, protože nabízí i další styly vykreslování, přičemž poměrně zajímavý a užitečný styl je založen na vykreslení &bdquo;schodů&ldquo;. Jedná se vlastně o přechodový typ grafu, v&nbsp;němž se sice stále vykresluje (spojitá) křivka, ovšem její tvar se již začíná podobat sloupcovému grafu (to je někdy poměrně důležité, protože můžeme naznačit například vzorkování apod.). Použití &bdquo;schodků&ldquo; je vlastně velmi jednoduché, protože do příkazu pro vykreslení průběhu jedné funkce postačuje doplnit pojmenovaný parametr <strong>drawstyle</strong> a přiřadit mu hodnotu <strong>default</strong>:</p>

<img class="alignnone size-medium wp-image-7088" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_2-450x339.png" alt="figure_2" width="450" height="339" />
<p><i>Obrázek 5: Zde se namísto lomené čáry použilo vykreslení průběhu funkcí se &bdquo;schodky&ldquo;.</i></p>

<p>Podívejme se na jednoduchý demonstrační příklad, v&nbsp;němž se v&nbsp;jednom grafu kombinují oba dva způsoby vykreslování &ndash; obálky funkce <i>sinc</i> jsou vykresleny lomenou čarou zatímco samotná funkce <i>sinc</i> je vykreslena s&nbsp;využitím &bdquo;schodů&ldquo;. Parametr <strong>drawstyle</strong> lze samozřejmě vynechat ve chvíli, kdy je mu přiřazena hodnota &bdquo;default&ldquo;:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Třináctý demonstrační příklad:
# - vykreslení průběhu funkce sinc
# - při vykreslování se použijí "schodky"

import numpy as np
import matplotlib.pyplot as plt

# hodnoty na x-ové ose
x = np.linspace(0.2, 2*np.pi, 100)

# hodnoty na y-ové ose
y = np.sin(5*x)/x
y2 = 1/x
y3 = -y2

# vykreslit průběh funkce
plt.plot(x, y2, color='red',  label='obalka sinc', drawstyle='default')
plt.plot(x, y3, color='red',  label='obalka sinc', drawstyle='default')
plt.plot(x, y,  color='blue', label='sinc(x)',     drawstyle='steps')

# povolení zobrazení mřížky
plt.grid(True)

# popis os
plt.xlabel("x")
plt.ylabel("sinc(x)")

# přidání legendy
plt.legend(loc="lower right")

# zobrazení grafu
plt.show()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Jednoduchý sloupcový graf</h2>

<p>Nyní se již dostáváme k&nbsp;dalšímu populárnímu a velmi často používanému typu grafu. Jedná se o sloupcový graf, přičemž sloupce (odpovídající naměřeným nebo vypočteným hodnotám) mohou být buď vodorovné nebo &ndash; a to častěji &ndash; svislé. Pro tvorbu sloupcového grafu se používají funkce <strong>matplotlib.pyplot.bar()</strong> (sloupce jsou svislé) popř.&nbsp;<strong>matplotlib.pyplot.barh()</strong> (sloupce jsou vodorovné). První dva parametry těchto funkcí jsou povinné &ndash; v&nbsp;obou případech se jedná o pole, přičemž první pole obsahuje x-ové souřadnice sloupců (většinou se tedy jedná o pole vytvořené příkazem <strong>numpy.arange(počet_prvků)</strong>) a pole druhé obsahuje výšky sloupců. Třetí parametr je nepovinný, ovšem poměrně důležitý, protože obsahuje relativní šířku sloupců. Tu můžeme zadat buď skalární hodnotou (což je obvyklé řešení) nebo taktéž pomocí pole. To znamená, že je možné vykreslit graf se sloupci, které mají rozdílnou šířku.</p>

<img class="alignnone size-medium wp-image-7089" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_3-450x339.png" alt="figure_3" width="450" height="339" />
<p><i>Obrázek 6: Sloupcový graf, v&nbsp;němž je šířka sloupců nastavena na hodnotu 1.0. Při této šířce se sloupce dotýkají.</i></p>

<p>Pro demonstrační příklad na vykreslení sloupcového grafu jsem vybral reálná data. Konkrétně se jedná o (v&nbsp;době vydaní článku již historické) ceny ropy uvedené v&nbsp;dolarech za barel. Při vykreslování byly funkci <strong>matplotlib.pyplot.bar()</strong> předány tři nepovinné parametry určující barvu výplně sloupců, barvu okrajů sloupců a popisek datové řady:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Čtrnáctý demonstrační příklad:
# - jednoduchý sloupcový graf

import numpy as np
import matplotlib.pyplot as plt

# historické ceny ropy
cena_ropy = [
46.68, 44.68, 46.90, 47.15, 44.59, 44.00, 44.63, 45.92, 44.15, 45.94,
46.05, 46.75, 46.25, 45.41, 49.20, 45.22, 42.56, 38.60, 39.31, 38.24,
40.45, 41.32, 40.80, 42.62, 41.87, 42.50, 42.23, 43.30, 43.08, 44.96,
43.87, 44.66, 45.15, 47.12, 48.52, 48.79, 47.98, 47.39, 48.14, 48.45]

# počet prvků
N = len(cena_ropy)

# indexy prvků
indexes = np.arange(N)

# šířka sloupců
width = 1.00

# sloupcový graf
plt.bar(indexes, cena_ropy, width, color='yellow', edgecolor='black', label='Cena ropy')

# povolení zobrazení mřížky
plt.grid(True)

# přidání legendy
plt.legend(loc="lower right")

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7090" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_3a-450x339.png" alt="figure_3a" width="450" height="339" />
<p><i>Obrázek 7: Sloupcový graf, v&nbsp;němž je šířka sloupců nastavena na hodnotu 0.3.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Sloupcový graf se dvěma skupinami sloupců</h2>

<p>Podívejme se, co se stane ve chvíli, kdy se pokusíme do jediného grafu vykreslit dvě datové řady. Předpokládejme, že hodnoty první datové řady jsou uloženy v&nbsp;poli <strong>vals1</strong>, hodnoty řady druhé pak v&nbsp;poli pojmenovaném <strong>vals2</strong>. Indexy, tj.&nbsp;vlastně x-ové souřadnice sloupců, jsou shodné:</p>

<pre>
# první pole hodnot
vals1 = [10, 15, 20, 12, 14, 8]

# druhé pole hodnot
vals2 = [19, 18,  6, 11,  6, 14]

# počet prvků
N = len(vals1)

# indexy prvků
indexes = np.arange(N)

# sloupcový graf se dvěma skupinami sloupců
plt.bar(indexes, vals1, width, color='gray', edgecolor='black', label='CPU#1')
# posunuté sloupce
plt.bar(indexes, vals2, width, color='red', edgecolor='black', label='CPU#2')
</pre>

<p>Výsledkem je graf s&nbsp;překrývajícími se sloupci:</p>

<img class="alignnone size-medium wp-image-7097" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_10-450x339.png" alt="figure_10" width="450" height="339" />
<p><i>Obrázek 8: Sloupcový graf se dvěma datovými řadami ve chvíli, kdy jsou x-ové souřadnice sloupců shodné.</i></p>

<p>Graf z&nbsp;obrázku číslo 8 nám v&nbsp;mnoha případech pochopitelně nebude vyhovovat. Řešení je však jednoduché &ndash; postačuje posunout sloupce pro druhou (třetí, čtvrtou ...) řadu doprava. To se provede jednoduše přičtením skalární hodnoty k&nbsp;poli <strong>indexes</strong>. Proč toto řešení bude funkční již víme, neboť jsme si ve článku o knihovně <i>Numpy</i> řekli, že pro operace s&nbsp;poli (vektory, maticemi) byl přetížen operátor +, který zadanou skalární hodnotu přičte ke všem prvkům.</p>

<img class="alignnone size-medium wp-image-7091" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_4-450x339.png" alt="figure_4" width="450" height="339" />
<p><i>Obrázek 9: Sloupcový graf se dvěma datovými řadami ve chvíli, kdy jsou x-ové souřadnice druhé datové řady posunuty.</i></p>

<p>Úplný zdrojový kód demonstračního příkladu vypadá následovně:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Patnáctý demonstrační příklad:
# - sloupcový graf se dvěma skupinami sloupců

import numpy as np
import matplotlib.pyplot as plt

# první pole hodnot
vals1 = [10, 15, 20, 12, 14, 8]

# druhé pole hodnot
vals2 = [19, 18,  6, 11,  6, 14]

# počet prvků
N = len(vals1)

# indexy prvků
indexes = np.arange(N)

# šířka sloupců
width = 0.30

# sloupcový graf se dvěma skupinami sloupců
plt.bar(indexes, vals1, width, color='gray', edgecolor='black', label='CPU#1')
# posunuté sloupce
plt.bar(indexes+width, vals2, width, color='red', edgecolor='black', label='CPU#2')

# povolení zobrazení mřížky
plt.grid(True)

# přidání legendy
plt.legend(loc="lower right")

# zobrazení grafu
plt.show()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zobrazení histogramu</h2>

<p>Dalším typem grafu, který je možné při použití knihovny <i>Matplotlib</i> použít, je histogram. Ten se vykresluje funkcí pojmenovanou logicky <strong>matplotlib.pyplot.hist()</strong>. Povinným parametrem jsou podle očekávání data, která se mají do histogramu vykreslit, ovšem funkce <strong>matplotlib.pyplot.hist()</strong> podporuje i další nepovinné parametry, zejména parametr <strong>normed</strong> řídicí normalizaci histogramu. Dalším mnohdy důležitým nepovinným parametrem je <strong>bins</strong>, jehož hodnotou se řídí šířka intervalů (tříd), tj.&nbsp;nepřímo počet sloupců v&nbsp;histogramu. Podívejme se na několik ukázek, z&nbsp;nichž bude použití nepovinného parametru <strong>bins</strong> patrné:</p>

<img class="alignnone size-medium wp-image-7092" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_5-450x339.png" alt="figure_5" width="450" height="339" />
<p><i>Obrázek 10: Histogram náhodných hodnot s&nbsp;normálním rozložením: parametr <strong>bins</strong> je nastaven na hodnotu 30.</i></p>

<img class="alignnone size-medium wp-image-7098" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_11-450x339.png" alt="figure_11" width="450" height="339" />
<p><i>Obrázek 11: Histogram náhodných hodnot s&nbsp;normálním rozložením: parametr <strong>bins</strong> je nastaven na hodnotu 10.</i></p>

<img class="alignnone size-medium wp-image-7099" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_12-450x339.png" alt="figure_12" width="450" height="339" />
<p><i>Obrázek 12: Histogram náhodných hodnot s&nbsp;normálním rozložením: parametr <strong>bins</strong> je nastaven na hodnotu 100.</i></p>

<p>Tyto histogramy byly vytvořeny následujícím programem:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Šestnáctý demonstrační příklad:
# - jednoduchý histogram

import numpy as np
import matplotlib.pyplot as plt

# náhodné hodnoty
y = np.random.normal(0, 0.1, 10000)

plt.hist(y, bins=30, range=None, normed=True)

# zobrazení grafu
plt.show()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Koláčový graf</h2>

<p>Posledním typem grafu, s&nbsp;nímž se v&nbsp;dnešním článku seznámíme, jsou takzvané koláčové grafy, které již každý čtenář zcela jistě viděl. Tyto typy grafů se používají v&nbsp;případě, že nás nezajímají absolutní hodnoty, ale hodnoty relativní, konkrétně vzájemné poměry. Nejprve se podívejme, jak může koláčový graf vykreslený knihovnou Matplotlib vypadat. V&nbsp;grafu je zobrazeno zastoupení skriptovacích jazyků, přičemž nás nyní nezajímá, v&nbsp;kolika projektech se jednotlivé jazyky použily, ale jaké jsou poměry tohoto zastoupení:</p>

<img class="alignnone size-medium wp-image-7093" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_6-450x450.png" alt="figure_6" width="450" height="450" />
<p><i>Obrázek 13: Koláčový graf zobrazující poměry mezi třemi hodnotami (zde konkrétně zastoupení skriptovacích jazyků).</i></p>

<p>Při vykreslení koláčového grafu můžeme použít přímo funkci <strong>matplotlib.pyplot.pie()</strong>, popř.&nbsp;lze použít podobný postup, jakým jsme minule vykreslili polární graf. Důležitý je především fakt, že koláčovému grafu můžeme předat pole s&nbsp;libovolnými hodnotami, nemusí se tedy jednat ani o procentuální poměry (se součtem 100%) ani o relativní hodnoty (se součtem 1.00). Knihovna Matplotlib si z&nbsp;předaných hodnot poměry vypočte automaticky. Dále si povšimněte použití nepovinného pojmenovaného parametru <strong>labels</strong> (s&nbsp;popisem jednotlivých výřezů) a parametru <strong>shadow</strong>, kterým se povoluje či zakazuje zobrazení 3D stínu:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Sedmnáctý demonstrační příklad:
# - koláčový graf

from matplotlib import pyplot as plt
from matplotlib import font_manager as fm

# make a square figure and axes
fig = plt.figure(1, figsize=(6,6), dpi=50)
ax = fig.add_axes([0.16, 0.16, 0.68, 0.68])

plt.title("Scripting languages")
ax.title.set_fontsize(30)

# popisky jednotlivých výřezů
labels = ['Perl', 'Python', 'Ruby']

# šířky jednotlivých výřezů
fracs = [90, 150, 70]

# vytvoření koláčového grafu
ax.pie(fracs, labels=labels, autopct='%1.1f%%', shadow=True)

# zobrazení grafu
plt.show()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Změna stylu vykreslování koláčových grafů</h2>

<p>Koláčové grafy je samozřejmě možné upravovat. V&nbsp;této kapitole si ukážeme, jak se v&nbsp;grafu změní barvy jednotlivých výřezů a jak se jeden (nebo v&nbsp;případě potřeby i větší množství) výřezů &bdquo;vysune&ldquo; od středové osy. Výsledkem bude následující obrázek:</p>

<img class="alignnone size-medium wp-image-7094" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_7-450x450.png" alt="figure_7" width="450" height="450" />
<p><i>Obrázek 14: Změna stylu vykreslení koláčových grafů.</i></p>

<p>Změnu velikosti nadpisu zařizuje metoda <strong>set_fontsize()</strong>, změnu stylu písma pak kombinace <strong>set_size()</strong> společně s&nbsp;nastavením vlastností (<i>properties</i>) písma. Pravděpodobně nejdůležitější je však nepovinný parametr <strong>explode</strong> funkce <strong>matplotlib.pyplot.pie()</strong>, kterému se předá pole s&nbsp;relativními hodnotami určujícími míru vysunutí jednotlivých řezů:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Osmnáctý demonstrační příklad:
# - změna stylu koláčových grafů

from matplotlib import pyplot as plt
from matplotlib import font_manager as fm

# make a square figure and axes
fig = plt.figure(1, figsize=(6,6), dpi=50)
ax = fig.add_axes([0.16, 0.16, 0.68, 0.68])

plt.title("Scripting languages")
ax.title.set_fontsize(30)

# popisky jednotlivých výřezů
labels = ['Perl', 'Python', 'Ruby']

# šířky jednotlivých výřezů
fracs = [90, 150, 70]

# vytáhnutí výřezů
explode=(0.0, 0.0, 0.15)

# barvy
colors = ('yellow', '#60ff60', 'red')

# vytvoření koláčového grafu
patches, texts, autotexts = ax.pie(fracs, explode=explode, colors=colors, labels=labels, autopct='%1.1f%%', shadow=True)

# změna stylu písma
proptease = fm.FontProperties()
proptease.set_size('xx-large')
plt.setp(autotexts, fontproperties=proptease)
plt.setp(texts, fontproperties=proptease)

# zobrazení grafu
plt.show()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Sloupcový graf se zobrazením odchylek (či chyb)</h2>

<p>Vraťme se ještě na chvíli ke sloupcovým grafům. V&nbsp;některých případech je nutné ke sloupcům přidat i povolené odchylky či chyby. I to je samozřejmě možné, a to díky existenci nepovinného pojmenovaného parametru <strong>yerr</strong>, kterému se předá buď skalární hodnota nebo pole o stejné délce, jakou má samotné vstupní pole hodnot. Podívejme se na způsob úpravy sloupcového grafu se dvěma datovými řadami o zobrazení odchylek. Tyto odchylky jsou uloženy v&nbsp;polích <strong>delta1</strong> a <strong>delta2</strong>:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Devatenáctý demonstrační příklad:
# - sloupcový graf se dvěma skupinami sloupců
#   a se zobrazením odchylek

import numpy as np
import matplotlib.pyplot as plt

# první pole hodnot a pole odchylek
vals1 = [10, 15, 20, 12, 14, 8]
delta1 = [1, 2, 3, 4, 5, 0]

# druhé pole hodnot a pole odchylek
vals2 = [19, 18,  6, 11,  6, 14]
delta2 = [4, 2, 3, 2, 2, 4]

# počet prvků
N = len(vals1)

# indexy prvků
indexes = np.arange(N)

# šířka sloupců
width = 0.30

# sloupcový graf se dvěma skupinami sloupců
plt.bar(indexes, vals1, width, color='gray', edgecolor='black', label='CPU#1',
        yerr=delta1)

# posunuté sloupce
plt.bar(indexes+width, vals2, width, color='red', edgecolor='black', label='CPU#2',
        yerr=delta2)

# povolení zobrazení mřížky
plt.grid(True)

# přidání legendy
plt.legend(loc="lower right")

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7095" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_8-450x339.png" alt="figure_8" width="450" height="339" />
<p><i>Obrázek 15: Sloupcový graf se zobrazením odchylek.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Pokročilejší nastavení způsobu vykreslení odchylek</h2>

<p>Pokud budeme potřebovat změnit styl vykreslení odchylek/chyb, záhy zjistíme, že funkce <strong>matplotlib.pyplot.pie()</strong> nemá žádné povinné ani nepovinné parametry, které by bylo pro tento účel možné přímo použít! Ve skutečnosti se totiž všechny podobné parametry ukládají do slovníku (<i>dictionary</i>) předaného v&nbsp;pojmenovaném parametru <strong>error_kw</strong>. Podívejme se tedy, jak se změní barva a šířka úsečky vykreslených odchylek (přímo při vytváření slovníku ho i inicializujeme):</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Dvacátý demonstrační příklad:
# - sloupcový graf se dvěma skupinami sloupců
#   a se zobrazením odchylek

import numpy as np
import matplotlib.pyplot as plt

# první pole hodnot a pole odchylek
vals1 = [10, 15, 20, 12, 14, 8]
delta1 = [1, 2, 3, 4, 5, 0]

# druhé pole hodnot a pole odchylek
vals2 = [19, 18,  6, 11,  6, 14]
delta2 = [4, 2, 3, 2, 2, 4]

# počet prvků
N = len(vals1)

# indexy prvků
indexes = np.arange(N)

# šířka sloupců
width = 0.30

# sloupcový graf se dvěma skupinami sloupců
plt.bar(indexes, vals1, width, color='gray', edgecolor='black', label='CPU#1',
        yerr=delta1, error_kw=dict(elinewidth=2,ecolor='red'))

# posunuté sloupce
plt.bar(indexes+width, vals2, width, color='red', edgecolor='black', label='CPU#2',
        yerr=delta2, error_kw=dict(elinewidth=2,ecolor='black'))

# povolení zobrazení mřížky
plt.grid(True)

# přidání legendy
plt.legend(loc="lower right")

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7096" src="http://mojefedora.cz/wp-content/uploads/2016/05/figure_9-450x339.png" alt="figure_9" width="450" height="339" />
<p><i>Obrázek 16: Změna stylu vykreslování odchylek (chyb).</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Repositář s&nbsp;demonstračními příklady z&nbsp;předchozího článku</h2>

<p>Všechny demonstrační příklady, s&nbsp;nimiž jsme se seznámili v&nbsp;předchozím i v&nbsp;dnešním článku, byly uloženy do Git repositáře umístěného na GitHubu (<a href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>). Poslední verze zdrojových kódů naleznete pod odkazy uvedenými v&nbsp;tabulce pod tímto odstavcem. Začneme nejprve příklady, s&nbsp;nimiž jsme se seznámili již <a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-vykreslovani-grafu-s-vyuzitim-knihoven-numpy-a-matplotlib/">minule</a>:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Popis</th><th>Zdrojový kód</th></tr>
<tr><td> 1</td><td>example01.py</td><td>vykreslení průběhu funkce sin</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example01.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example01.py</a></td></tr>
<tr><td> 2</td><td>example02.py</td><td>uložení grafu do různých typů souborů</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example02.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example02.py</a></td></tr>
<tr><td> 3</td><td>example03.py</td><td>vykreslení průběhů funkcí sin a cos do jediného grafu</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example03.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example03.py</a></td></tr>
<tr><td> 4</td><td>example04.py</td><td>změna stylu vykreslování průběhů funkcí</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example04.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example04.py</a></td></tr>
<tr><td> 5</td><td>example05.py</td><td>vykreslení průběhů funkcí sin a sinc do jediného grafu, vyplnění plochy pod průběhy</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example05.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example05.py</a></td></tr>
<tr><td> 6</td><td>example06.py</td><td>kombinace různých stylů vykreslení</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example06.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example06.py</a></td></tr>
<tr><td> 7</td><td>example07.py</td><td>nastavení mřížky a rozsahů na obou osách</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example07.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example07.py</a></td></tr>
<tr><td> 8</td><td>example08.py</td><td>přidání popisku přímo do grafu</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example08.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example08.py</a></td></tr>
<tr><td> 9</td><td>example09.py</td><td>základní polární graf</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example09.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example09.py</a></td></tr>
<tr><td>10</td><td>example10.py</td><td>vykreslení průběhů několika funkcí do polárního grafu</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example10.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example10.py</a></td></tr>
<tr><td>11</td><td>example11.py</td><td>vykreslení průběhů několika funkcí do polárního grafu</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example11.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example11.py</a></td></tr>
</table>



<p><a name="k12"></a></p>
<h2 id="k12">12. Repositář s&nbsp;demonstračními příklady z&nbsp;dnešního článku</h2>

<p>Nyní nám pouze zbývá uvést odkazy na příklady popsané v&nbsp;dnešním článku:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Popis</th><th>Zdrojový kód</th></tr>
<tr><td>1</td><td>example12.py</td><td>vykreslení grafu, kde jsou jednotlivé body spojeny úsečkami</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example12.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example12.py</a></td></tr>
<tr><td>2</td><td>example13.py</td><td>vykreslení grafu se &bdquo;schodky&ldquo;</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example13.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example13.py</a></td></tr>
<tr><td>3</td><td>example14.py</td><td>jednoduchý sloupcový graf</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example14.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example14.py</a></td></tr>
<tr><td>4</td><td>example15.py</td><td>sloupcový graf se dvěma skupinami sloupců</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example15.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example15.py</a></td></tr>
<tr><td>5</td><td>example16.py</td><td>jednoduchý histogram</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example16.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example16.py</a></td></tr>
<tr><td>6</td><td>example17.py</td><td>koláčový graf</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example17.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example17.py</a></td></tr>
<tr><td>7</td><td>example18.py</td><td>změna stylu koláčových grafů</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example18.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example18.py</a></td></tr>
<tr><td>8</td><td>example19.py</td><td>sloupcový graf se dvěma skupinami sloupců a se zobrazením odchylek</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example19.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example19.py</a></td></tr>
<tr><td>9</td><td>example20.py</td><td>úprava stylu předchozího typu grafu</td><td><a href="https://github.com/tisnik/presentations/blob/master/matplotlib/example20.py">https://github.com/tisnik/presentations/blob/master/matplotlib/example20.py</a></td></tr>
</table>



<p><a name="k13"></a></p>
<h2 id="k13">13. Předchozí části seriálu</h2>

<ol>

<li>Vývojová prostředí ve Fedoře (1. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-1-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-1-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (2. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-2-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-2-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (3. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-3-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-3-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: PyDev<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: PyDev (2.část)<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev-2-cast/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev-2-cast/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: IPython a IPython Notebook<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy (2.část)<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s využitím knihoven Numpy a matplotlib<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-vykreslovani-grafu-s-vyuzitim-knihoven-numpy-a-matplotlib/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-vykreslovani-grafu-s-vyuzitim-knihoven-numpy-a-matplotlib/</a>
</li>

</ol>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Graphics with Matplotlib<br />
<a href="http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html">http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html</a>
</li>

<li>Systémy lineárních rovnic<br />
<a href="http://www.matematika.cz/systemy-linearnich-rovnic">http://www.matematika.cz/systemy-linearnich-rovnic</a>
</li>

<li>IPython homepage<br />
<a href="http://ipython.org/">http://ipython.org/</a>
</li>

<li>Dokumentace k IPythonu<br />
<a href="http://ipython.org/documentation.html#">http://ipython.org/documentation.html#</a>
</li>

<li>IPython Tutorial<br />
<a href="http://ipython.readthedocs.org/en/stable/interactive/tutorial.html">http://ipython.readthedocs.org/en/stable/interactive/tutorial.html</a>
</li>

<li>NumPy Home Page<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>NumPy v1.10 Manual<br />
<a href="http://docs.scipy.org/doc/numpy/index.html">http://docs.scipy.org/doc/numpy/index.html</a>
</li>

<li>NumPy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NumPy">https://en.wikipedia.org/wiki/NumPy</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>The cell magics in IPython<br />
<a href="http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb">http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb</a>
</li>

<li>0MQ Home Page<br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>Is IPython Notebook ever used as an IDE, or merely for presentations?<br />
<a href="https://www.reddit.com/r/IPython/comments/1uk7hp/is_ipython_notebook_ever_used_as_an_ide_or_merely/">https://www.reddit.com/r/IPython/comments/1uk7hp/is_ipython_notebook_ever_used_as_an_ide_or_merely/</a>
</li>

<li>The IDE as a Bad Programming Language Enabler <br />
<a href="https://dzone.com/articles/ide-bad-programming-language">https://dzone.com/articles/ide-bad-programming-language</a>
</li>

<li>Enhanced Interactive Python with IPython<br />
<a href="http://www.onlamp.com/pub/a/python/2005/01/27/ipython.html">http://www.onlamp.com/pub/a/python/2005/01/27/ipython.html</a>
</li>

<li>Direct mode<br />
<a href="https://en.wikipedia.org/wiki/Direct_mode">https://en.wikipedia.org/wiki/Direct_mode</a>
</li>

<li>Seznámení s&nbsp;Python IDE Spyder (článek vyšel zde na mojefedora.cz)<br />
<a href="http://mojefedora.cz/seznameni-s-python-ide-spyder/">http://mojefedora.cz/seznameni-s-python-ide-spyder/</a>
</li>

<li>Stránka s&nbsp;popisem různých IDE pro Python<br />
<a href="http://quintagroup.com/cms/python/ide">http://quintagroup.com/cms/python/ide</a>
</li>

<li>Eclipse (stránka o frameworku na Fedoraproject.org)<br />
<a href="https://fedoraproject.org/wiki/Eclipse">https://fedoraproject.org/wiki/Eclipse</a>
</li>

<li>PyDev (hlavní stránka)<br />
<a href="http://pydev.sourceforge.net/index.html">http://pydev.sourceforge.net/index.html</a>
</li>

<li>PyDev (download, v podstatě není zapotřebí)<br />
<a href="http://pydev.sourceforge.net/download.html">http://pydev.sourceforge.net/download.html</a>
</li>

<li>PyDev (stránka s metainformacemi o PyDev pluginu, použita v Eclipse)<br />
<a href="http://www.pydev.org/updates/">http://www.pydev.org/updates/</a>
</li>

<li>PyDev (stránka s pluginem, použita v Eclipse)<br />
<a href="https://dl.bintray.com/fabioz/pydev/4.5.4/">https://dl.bintray.com/fabioz/pydev/4.5.4/</a>
</li>

<li>Certifikát, který lze do Eclipse doinstalovat<br />
<a href="http://www.pydev.org/pydev_certificate.cer">http://www.pydev.org/pydev_certificate.cer</a>
</li>

<li>PyDev FAQ<br />
<a href="http://pydev.sourceforge.net/faq.html">http://pydev.sourceforge.net/faq.html</a>
</li>

<li>PyDev (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PyDev">https://en.wikipedia.org/wiki/PyDev</a>
</li>

<li>Python (oficiální stránky projektu)<br />
<a href="https://www.python.org/">https://www.python.org/</a>
</li>

<li>Jython<br />
<a href="http://www.jython.org/">http://www.jython.org/</a>
</li>

<li>IronPython<br />
<a href="http://ironpython.net/">http://ironpython.net/</a>
</li>

<li>Python 3.5.1 documentation<br />
<a href="https://docs.python.org/3/">https://docs.python.org/3/</a>
</li>

<li>PyDev: Unittest integration<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/</a>
</li>

<li>Continuous unit testing with Pydev (Python and Eclipse)<br />
<a href="http://stackoverflow.com/questions/1015581/continuous-unit-testing-with-pydev-python-and-eclipse">http://stackoverflow.com/questions/1015581/continuous-unit-testing-with-pydev-python-and-eclipse</a>
</li>

<li>Test-driven development<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

