<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Integrovaná vývojová prostředí ve Fedoře: PyDev (2.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Integrovaná vývojová prostředí ve Fedoře: PyDev (2.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém článku o vývojovém prostředí PyDev se seznámíme s&nbsp;některými pokročilejšími technikami, které lze v&nbsp;tomto propracovaném IDE použít. Ukážeme si například nástroje sloužící k&nbsp;refaktoringu zdrojových kódů a taktéž si popíšeme propojení PyDev s&nbsp;nástroji určenými pro práci s&nbsp;jednotkovými testy (spouštění, automatické znovuspuštění, výpis výsledků).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Integrovaná vývojová prostředí ve Fedoře: PyDev (2.část)</a></p>
<p><a href="#k02">2. Automatické doplňování kódu a odskok na volané funkce či metody</a></p>
<p><a href="#k03">3. Kontrola chyb prováděná v&nbsp;průběhu vytváření a editace zdrojového kódu</a></p>
<p><a href="#k04">4. Základy refaktoringu zdrojových kódů</a></p>
<p><a href="#k05">5. Vygenerování properties pro vybranou třídu</a></p>
<p><a href="#k06">6. Vytvoření inicializátoru s&nbsp;předáním hodnot atributů</a></p>
<p><a href="#k07">7. Přesun vybraného bloku kódu do samostatné funkce či metody</a></p>
<p><a href="#k08">8. Transformace zdrojových kódů z&nbsp;Pythonu 2.x do Pythonu 3.x</a></p>
<p><a href="#k09">9. Podpora pro jednotkové testy v&nbsp;prostředí PyDev</a></p>
<p><a href="#k10">10. Manuální spuštění a kontinuální spouštění jednotkových testů</a></p>
<p><a href="#k11">11. Předchozí části seriálu</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Integrovaná vývojová prostředí ve Fedoře: PyDev (2.část)</h2>

<p><a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/">V&nbsp;první části</a> článku o vývojovém prostředí PyDev jsme si popsali způsob instalace této aplikace (jedná se o přídavný modul/plugin určený pro Eclipse) a taktéž jsme se seznámili se základními koncepty, na nichž je Eclipse a tím pádem i PyDev postaveno. Připomeňme si jen, že v&nbsp;PyDev + Eclipse se používají takzvané <i>perspektivy</i>, v&nbsp;nichž jsou sdružovány okna editoru a další specializované <i>pohledy</i>. Programátor se může mezi jednotlivými perspektivami přepínat, popř.&nbsp;k&nbsp;přepnutí může dojít automaticky, například při ladění kódu atd. Při práci s&nbsp;PyDev je nutné vytvářet <i>projekty</i>, což není nic jiného než adresář obsahující zdrojové soubory psané v&nbsp;Pythonu, další datové či multimediální soubory a taktéž adresář s&nbsp;konfigurací projektu. Projekty i konfigurace perspektiv je možné přenášet mezi různými počítači popř.&nbsp;je ukládat a verzovat například s&nbsp;využitím GITu. Díky této vlastnosti je možné mít shodné vývojové prostředí jak na pracovním počítači tak i na domácím notebooku atd.</p>

<img class="alignnone size-medium wp-image-6777" src="http://mojefedora.cz/wp-content/uploads/2016/03/01-1-450x322.png" alt="01" width="450" height="322" />
<p><i>Obrázek 1: Nástroj PyDev ve spolupráci s&nbsp;interpretrem programovacího jazyka Python dokáže detekovat některé problematické části zdrojového kódu. Pro kontrolu sémantických chyb je však nutné používat testy.</i></p>

<p>Dnes se budeme zabývat popisem dalších nástrojů, které je možné v&nbsp;PyDev používat. Nejprve se zaměříme na nástroje určené pro doplňování kódu a kontrolu chyb ve zdrojových kódech, což je téma zpracované <a href="#k02">ve druhé</a> a <a href="#k03">ve třetí</a> kapitole. <a href="#k04">V&nbsp;navazujících kapitolách</a> se seznámíme s&nbsp;některými technikami používanými při <i>refaktoringu</i> zdrojových kódů. Následovat bude popis transformace zdrojových kódů z&nbsp;Pythonu 2.x do Pythonu 3.x, protože se stále jedná o poměrně aktuální (a definitivně nevyřešené) téma. V&nbsp;závěrečné části článku bude popsáno rozhraní používané pro spouštění a generování výsledků z&nbsp;jednotkových testů (<i>unit tests</i>). Užitečná může být především podpora pro automatické spouštění těch testů, které nebyly úspěšné. Takové testy lze spouštět kdykoli po změně zdrojového kódu a zjistit tak, zda kód skutečně odpovídá podmínkám popsaným v&nbsp;testech (ještě více se tato vlastnost využije ve chvíli, kdy se používá <a href="https://en.wikipedia.org/wiki/Test-driven_development">test-driven development</a>).</p>

<img class="alignnone size-medium wp-image-6778" src="http://mojefedora.cz/wp-content/uploads/2016/03/02-1-450x322.png" alt="02" width="450" height="322" />
<p><i>Obrázek 2: Označení nedefinované proměnné a nedefinované funkce patří mezi základní nástroje používané pro detekci chyb ve zdrojových kódech. Naproti tomu si povšimněte, že se nevypisují informace o nepoužitém parametru funkce <strong>reciprocal</strong> ani o nesouladu počtu parametrů při volání této funkce. Pro detekci těchto potenciálních chyb je možné použít například nástroj <strong>Pylint</strong>.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Automatické doplňování kódu a odskok na volané funkce či metody</h2>

<p>Mezi další vlastnosti integrovaného vývojového prostředí PyDev patří automatické doplňování kódu a podpora okamžitého odskoku na zdrojový kód volané funkce či metody (popř.&nbsp;třídy). Použití automatického doplňování kódu je velmi snadné a intuitivní &ndash; kdykoli při psaní jména třídy, metody, atributu či lokální proměnné je možné použít klávesovou zkratku <strong>Ctrl+Space</strong> a editor implementovaný v&nbsp;PyDev buď přímo doplní celé jméno (které dává v&nbsp;daném kontextu smysl), nebo zobrazí seznam všech možných jmen, z&nbsp;nichž je možné provést výběr. Druhou možností je zapsat jméno třídy (popř.&nbsp;jméno objektu implementujícího nějakou třídu) a za ním tečku. V&nbsp;této chvíli se zobrazí podobné okno jako v&nbsp;předchozím případě, z&nbsp;něhož lze vybrat požadovanou metodu či atribut (to funguje velmi dobře především u zápisu &bdquo;self.&ldquo;, kdy editor přesně zná kontext). Užitečná je i klávesová zkratka <strong>F3</strong>, po jejímž stisku se zobrazí zdrojový kód příslušné třídy, metody či funkce (pokud je třída/metoda/funkce deklarována v&nbsp;jiném souboru, otevře se tento soubor v&nbsp;samostatném tabu).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Kontrola chyb prováděná v&nbsp;průběhu vytváření a editace zdrojového kódu</h2>

<p>Integrované vývojové prostředí Eclipse se ve spolupráci s&nbsp;PyDev a interpretrem Pythonu snaží při každém uložení zdrojového kódu zavolat interpret a zjistit všechny chyby, které se ve zdrojovém kódu nachází. Tyto chyby jsou pak zvýrazněny červenou vlnovkou a navíc se na pravé straně editoru zobrazí červený obdélník, díky němuž lze chyby snadno lokalizovat i v&nbsp;rozsáhlejších zdrojových textech (ve výchozí konfiguraci se na levém okraji editoru zobrazí i ikona informující o chybě). Seznam všech chyb a případných varování se taktéž zobrazuje v&nbsp;pohledu &bdquo;Problems&ldquo;, jehož okno je v&nbsp;typické konfiguraci umístěno ve spodní části grafického uživatelského rozhraní integrovaného vývojového prostředí. U každé chyby je vypsána cesta k&nbsp;příslušnému zdrojovému souboru i konkrétní řádek, kde se chyba vyskytuje. PyDev nabízí i možnost opravy některých chyb &ndash; postačuje přejít kurzorem na konkrétní chybu a stlačit klávesovou zkratku <strong>Ctrl+1</strong>. V&nbsp;porovnání s&nbsp;Eclipse JDT jsou však nabízené možnosti menší, což souvisí s&nbsp;dynamickou povahou Pythonu. Nicméně takové základní operace, jako například doplnění importu, přidání funkce či metody, v&nbsp;okně &bdquo;Quick Fix&ldquo; nalezneme.</p>

<img class="alignnone size-medium wp-image-6779" src="http://mojefedora.cz/wp-content/uploads/2016/03/03-1-450x322.png" alt="03" width="450" height="322" />
<p><i>Obrázek 3: Poměrně častá chyba &ndash; u inicializátoru chybí uvedení parametru &bdquo;self&ldquo;, což PyDev správně označí jako chybu a napíše návod na opravu (samotnou opravu však musí provést programátor).</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Základy refaktoringu zdrojových kódů</h2>

<p>Konečně se dostáváme k&nbsp;mnohem zajímavější a pro naprostou většinu programátorů velmi užitečné technologii &ndash; k&nbsp;podpoře takzvaného refaktoringu (<i>refactoring</i>). Integrované vývojové prostředí Eclipse ve spolupráci s&nbsp;PyDev totiž dokáže na žádost programátora měnit obsah zdrojových kódů, a to mnohdy i velmi radikálním způsobem. Mnoho změn je prováděno na globální úrovni celého projektu, což například znamená, že přejmenování metody je provedeno ve všech částech projektu, kde se tato metoda volá. Ovšem v&nbsp;žádném případě se nejedná o primitivní operaci typu &bdquo;najdi a nahraď zadaný řetězec&ldquo;, protože Eclipse dokáže v&nbsp;mnoha případech zjistit, kde je použita přejmenovávaná metoda a kde je naopak použita lokální proměnná, parametr apod. (v&nbsp;Pythonu ovšem tato operace nemusí být za všech okolností úspěšná, opět kvůli dynamičnosti jazyka.</p>

<img src="http://mojefedora.cz/wp-content/uploads/2016/03/04_-450x336.png" alt="04_" width="450" height="336" class="alignnone size-medium wp-image-6800" />
<p><i>Obrázek 4: Dialog zobrazující změny ve zdrojovém kódu provedené po přejmenování funkce.</i></p>

<p>Podporovány jsou následující operace:</p>

<ol>

<li>Uložení mezivýsledku nějakého výpočtu do nové lokální proměnné. Postačuje vybrat část výrazu a zvolit příkaz Refactoring &rarr; Extract Local Variable.</li>

<li>Vygenerování properties pro vybranou třídu. Bude ukázáno <a href="#k05">v&nbsp;páté kapitole</a>.</li>

<li>Vytvoření inicializátoru s&nbsp;předáním hodnot atributů. Touto technikou se budeme zabývat <a href="#k06">v&nbsp;šesté kapitole</a>.</li>

<li>Blok příkazů se může přesunout do samostatné funkce či metody. Bude ukázáno <a href="#k07">v&nbsp;sedmé kapitole</a>.</li>

</ol>

<img class="alignnone size-medium wp-image-6780" src="http://mojefedora.cz/wp-content/uploads/2016/03/04-1-450x322.png" alt="04" width="450" height="322" />
<p><i>Obrázek 5: Opravený kód z&nbsp;předchozího obrázku, který zároveň slouží jako základ pro další příklady popsané v&nbsp;navazujících dvou kapitolách.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vygenerování properties pro vybranou třídu</h2>

<p>V&nbsp;programovacím jazyku Python je možné pro vybranou třídu (či objekt) vytvořit takzvané <i>properties</i>, které umožňují, aby se volaly settery a gettery nějakého atributu s&nbsp;využitím operátoru tečky, tj.&nbsp;stylem <strong>objekt.atribut=výraz</strong> či <strong>xxx=objekt.atribut</strong>. Navíc je možné, pokud to samozřejmě povaha řešeného problému vyžaduje, povolit i volání speciální metody v&nbsp;případě použití příkazu <strong>del objekt.atribut</strong> (tato metoda se potom nazývá <i>deleter</i>). Properties se deklarují minimálně dvěma způsoby. První způsob spočívá v&nbsp;použití takzvaných dekorátorů, druhý pak v&nbsp;použití funkce <strong>property</strong>, díky níž je možné navázat určitý atribut na příslušný getter, setter, deleter atd. A právě vygenerování programového kódu, který toto navázání zajistí, může být provedeno automaticky v&nbsp;prostředí PyDev po zadání příkazu Refactoring &rarr; Generate Properties.</p>

<p>Průběh celé operace je rozdělen do několika kroků, které jsou vysvětleny na čtyřech snímcích grafického uživatelského rozhraní prostředí PyDev:</p>

<img class="alignnone size-medium wp-image-6781" src="http://mojefedora.cz/wp-content/uploads/2016/03/05-1-450x322.png" alt="05" width="450" height="322" />
<p><i>Obrázek 6: Dialog pro určení, které atributy budou dostupné přes properties. Před vyvoláním tohoto dialogu se musí textový kurzor nacházet uvnitř třídy a následně se musí zadat příkaz Refactoring &rarr; Generate Properties. Může se zvolit, pro které atributy se vytvoří gettery, settery, deletery atd.</i></p>

<img class="alignnone size-medium wp-image-6782" src="http://mojefedora.cz/wp-content/uploads/2016/03/06-1-450x322.png" alt="06" width="450" height="322" />
<p><i>Obrázek 7: Nástroj PyDev automaticky vygeneruje příslušný programový kód s&nbsp;metodami pro přístup k&nbsp;atributům a zobrazuje jeho náhled ve druhém dialogu.</i></p>

<img class="alignnone size-medium wp-image-6783" src="http://mojefedora.cz/wp-content/uploads/2016/03/07-1-450x322.png" alt="07" width="450" height="322" />
<p><i>Obrázek 8: Po stisku tlačítka Finish se vygenerované metody použité pro přístup k&nbsp;atributům vloží do zdrojového kódu.</i></p>

<img class="alignnone size-medium wp-image-6784" src="http://mojefedora.cz/wp-content/uploads/2016/03/08-1-450x322.png" alt="08" width="450" height="322" />
<p><i>Obrázek 9: V&nbsp;dolní části programátorského editoru můžeme vidět vygenerovaný kód s&nbsp;definicemi properties.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vytvoření inicializátoru s&nbsp;předáním hodnot atributů</h2>

<p>Při vytváření instance nějaké třídy se automaticky volají dvě metody: <strong>__new__</strong> a <strong>__init__</strong> (v&nbsp;tomto pořadí). První z&nbsp;těchto metod je volána ještě ve chvíli, kdy není objekt zkonstruován, druhá pak v&nbsp;okamžiku, kdy došlo ke konstrukci objektu a je nutné provést inicializaci jeho stavu. Tyto dvě metody jsou v&nbsp;ostatních programovacích jazycích většinou spojeny do jediné subrutiny nazývané konstruktor, ovšem Python je v&nbsp;tomto případě otevřenější a umožňuje programátorům, aby si definovali jak chování při vzniku objektu, tak i při inicializaci jeho stavu. Nás nyní bude zajímat &bdquo;druhá polovina konstruktoru&ldquo; představovaná metodou <strong>__init__</strong>, protože v&nbsp;této metodě se nastavuje stav právě vytvořeného objektu, tj.&nbsp;inicializují se jeho atributy. Hodnoty atributů se typicky (ne však vždy) odvozují od parametrů předaných konstruktoru a právě zde existuje možnost si celou situaci zautomatizovat a nechat si příslušný zdrojový kód vygenerovat PyDevem. Opět se podívejme na sekvenci screenshotů s&nbsp;podrobnějším popisem:</p>

<img class="alignnone size-medium wp-image-6785" src="http://mojefedora.cz/wp-content/uploads/2016/03/09-1-450x322.png" alt="09" width="450" height="322" />
<p><i>Obrázek 10: V&nbsp;tomto dialogu zobrazeném po zadání příkazu Refactoring &rarr; Generate Constructor using Fields je možné vybrat ty atributy, jejichž hodnoty se budou nastavovat přes parametry předané inicializátoru, tj.&nbsp;funkci __init__.</i></p>

<img class="alignnone size-medium wp-image-6786" src="http://mojefedora.cz/wp-content/uploads/2016/03/10-1-450x322.png" alt="10" width="450" height="322" />
<p><i>Obrázek 11: Zajímají nás pouze atributy přístupné přes properties, proto vybereme jen část nabízených možností.</i></p>

<img class="alignnone size-medium wp-image-6787" src="http://mojefedora.cz/wp-content/uploads/2016/03/11-1-450x322.png" alt="11" width="450" height="322" />
<p><i>Obrázek 12: Kód vygenerovaný nástrojem PyDev. Povšimněte si, že původní inicializátor zůstal zachován a bude ho nutné smazat (popř.&nbsp;oba kódy ručně sloučit).</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Přesun vybraného bloku kódu do samostatné funkce či metody</h2>

<p>Pravděpodobně nejužitečnější funkce určená pro refaktoring programového kódu se vyvolává příkazem Refactoring &rarr; Extract Method. Tato funkce umožňuje, aby se určitý vybraný blok přenesl do samostatné funkce nebo metody, což může vést ke zjednodušení programu, k&nbsp;jeho snadnější testovatelnosti a samozřejmě taktéž k&nbsp;možnosti volat takto vytvořenou funkci či metodu i z&nbsp;dalších částí aplikace. Před extrakcí funkce/metody je nejdříve zapotřebí vybrat (do bloku) programový kód, který se má přenést. Přitom je zapotřebí zahrnout i případné lokální proměnné (jinak by se do nové funkce předávaly explicitně) a kód by měl mít jeden jasný výsledek. Ukažme si nyní použití této technologie pro přenos algoritmu pro výpočet faktoriálu do samostatné funkce (samotný výpočet obsahuje chybu, ale tou se budeme zabývat až v&nbsp;navazujícím textu):</p>

<img class="alignnone size-medium wp-image-6788" src="http://mojefedora.cz/wp-content/uploads/2016/03/12-1-450x338.png" alt="12" width="450" height="338" />
<p><i>Obrázek 13: Původní kód pro výpočet faktoriálu (tento kód navíc obsahuje chybu, kterou odhalíme při spouštění jednotkových testů &ndash; viz další text).</i></p>

<img class="alignnone size-medium wp-image-6789" src="http://mojefedora.cz/wp-content/uploads/2016/03/13-1-450x338.png" alt="13" width="450" height="338" />
<p><i>Obrázek 14: Vybereme tu část programového kódu, ze které budeme chtít vytvořit funkci. Zde se jedná o celý výpočet faktoriálu i s&nbsp;použitím pomocné proměnné (výběr se provádí běžnými blokovými operacemi, například Shift+kurzorové šipky).</i></p>

<img class="alignnone size-medium wp-image-6790" src="http://mojefedora.cz/wp-content/uploads/2016/03/14-1-450x338.png" alt="14" width="450" height="338" />
<p><i>Obrázek 15: Vybereme příkaz Refactoring &rarr; Extract Method. V&nbsp;dialogu, který se zobrazí, je nutné specifikovat parametry předávané do vytvářené funkce či metody. Zde je to jednoduché &ndash; jediným parametrem bude &bdquo;n&ldquo;.</i></p>

<img class="alignnone size-medium wp-image-6791" src="http://mojefedora.cz/wp-content/uploads/2016/03/15-1-450x338.png" alt="15" width="450" height="338" />
<p><i>Obrázek 16: Došlo k&nbsp;vytvoření funkce, samozřejmě se správným parametrem i příkazem pro předání návratové hodnoty zpět do volajícího kódu.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Transformace zdrojových kódů z&nbsp;Pythonu 2.x do Pythonu 3.x</h2>

<p>V&nbsp;některých případech potřebují vývojáři upravit své aplikace, které byly původně psány pro Python 2.x, takovým způsobem, aby tyto aplikace byly použitelné s&nbsp;Pythonem 3.x. Pro tyto účely existuje nástroj (<i>transcompiler, transpiler</i>) nazvaný <strong>2to3</strong>, který se více či méně úspěšně snaží detekovat a upravit ty programové konstrukce, které již v&nbsp;Pythonu 3.x nejsou podporovány či mají odlišný význam. Tento nástroj je možné vyvolat přímo z&nbsp;prostředí PyDev, a to konkrétně z&nbsp;kontextového menu vyvolaného pravým tlačítkem myši buď v&nbsp;editoru, nebo v&nbsp;Package Exploreru (to je okno zobrazené na screenshotech v&nbsp;levém sloupci). Z&nbsp;tohoto menu se vybere příkaz PyDev &rarr; Apply 2to3, který vyvolá dialog zobrazený na screenshotu číslo 18. Zde máme možnost ovlivnit chování nástroje <strong>2to3</strong>. Nejdůležitější je přepínač -w, který povede k&nbsp;tomu, že <strong>2to3</strong> skutečně změní původní programový kód a nahradí ho kódem novým:</p>

<img class="alignnone size-medium wp-image-6792" src="http://mojefedora.cz/wp-content/uploads/2016/03/16-1-450x322.png" alt="16" width="450" height="322" />
<p><i>Obrázek 17: Původní programový kód psaný ve stylu Pythonu 2.x.</i></p>

<img class="alignnone size-medium wp-image-6793" src="http://mojefedora.cz/wp-content/uploads/2016/03/17-1-450x322.png" alt="17" width="450" height="322" />
<p><i>Obrázek 18: Dialog zobrazený po zadání příkazu PyDev &rarr; Apply 2to3 z&nbsp;kontextového menu programátorského editoru popř.&nbsp;Package Exploreru. Povšimněte si explicitního zadání přepínače -w.</i></p>

<img class="alignnone size-medium wp-image-6794" src="http://mojefedora.cz/wp-content/uploads/2016/03/18-1-450x322.png" alt="18" width="450" height="322" />
<p><i>Obrázek 19: Výsledný kód odpovídající konvencím Pythonu 3.x. V&nbsp;Package Exploreru si povšimněte, že se vytvořila záloha původního obsahu souboru se zdrojovým kódem.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Podpora pro jednotkové testy v&nbsp;prostředí PyDev</h2>

<p>Integrované vývojové prostředí PyDev obsahuje podporu pro spouštění a následné generování výsledků z&nbsp;jednotkových testů (<i>unit tests</i>). Pro mnoho účelů může být užitečná především podpora pro automatické spouštění těch testů, které nebyly úspěšné. Takové testy lze spouštět kdykoli po změně zdrojového kódu a zjistit tak, zda upravený programový kód skutečně odpovídá podmínkám popsaným v&nbsp;testech. Podívejme se nyní na jednoduchý příklad, v&nbsp;němž otestujeme výše vytvořenou funkci <strong>factorial</strong> a zjistíme, že je ve skutečnosti naprogramována špatně :-). Test je představován třídou nazvanou pro jednoduchost <strong>Test</strong>. Tato třída musí být odvozena od třídy <strong>unittest.TestCase</strong>. Ve třídě bude implementováno mnoho testovacích metod, jejichž názvy začínají na <strong>test...</strong>. Vzhledem k&nbsp;tomu, že testujeme chování poměrně jednoduché funkce, vystačíme si s&nbsp;porovnáním výsledků, což má na starost zděděná metoda nazvaná <strong>assertEqual</strong>:</p>

<img class="alignnone size-medium wp-image-6795" src="http://mojefedora.cz/wp-content/uploads/2016/03/19-1-450x322.png" alt="19" width="450" height="322" />
<p><i>Obrázek 20: Vytvoření nové třídy nazvané Test, která je odvozena od třídy unittest.TestCase (to je velmi důležité pro další běh jednotkových testů). Povšimněte si použití self.assertEqual, jméno této metody naznačuje vše o jejím fungování. Testy byly spuštěny, což je vidět na výpisu na konzoli.</i></p>

<img class="alignnone size-medium wp-image-6796" src="http://mojefedora.cz/wp-content/uploads/2016/03/20-1-450x322.png" alt="20" width="450" height="322" />
<p><i>Obrázek 21: Výsledky běhu testů se nejlépe prohlížejí v&nbsp;okně PyUnit. Zde je patrné, že všechny testy proběhly bez chyby, což ovšem nemusí znamenat, že je i testovaný kód bez chyby, ale jen to, že netestujeme všechny varianty.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Manuální spuštění a kontinuální spouštění jednotkových testů</h2>

<p>Manuálně se jednotkové testy spouští z&nbsp;hlavního menu Run příkazem Run As. Podívejme se, co se stane ve chvíli, kdy do testů přidáme další kontroly, zejména pak kontrolu výsledků pro n=2 a n=3:</p>

<img class="alignnone size-medium wp-image-6797" src="http://mojefedora.cz/wp-content/uploads/2016/03/21-1-450x322.png" alt="21" width="450" height="322" />
<p><i>Obrázek 22: Vzhledem k&nbsp;tomu, že je algoritmus implementovaný ve funkci <strong>factorial</strong> ve skutečnosti chybný, nahlásí správně vytvořené jednotkové testy chybu, což se stalo i v&nbsp;tomto případě. V&nbsp;pravé dolní části plochy IDE je vypsáno podrobnější hlášení o chybě &ndash; na kterém místě vznikla a co ji způsobilo.</i></p>

<p>Než chybu opravíme, přesvědčte se, že v&nbsp;pohledu PyUnit je vybráno (zatlačeno) tlačítko obsahující ikonu tužky a žluté šipky (na screenshotech se jedná o pátou ikonu v&nbsp;řadě). Pokud je toto tlačítko vybráno, budou se při změně zdrojového kódu, přesněji řečeno při jeho ukládání na disk, automaticky spouštět ty testy, které předtím proběhly neúspěšně. Ostatně si to můžeme snadno vyzkoušet, a to opravou zdrojového kódu funkce <strong>factorial</strong>, konkrétně v&nbsp;místě předání parametrů funkci <strong>range</strong>. Ihned po uložení zdrojového kódu pomocí Ctrl+S se testy spustí znovu, tentokrát již s&nbsp;očekávaným &bdquo;zeleným&ldquo; výsledkem:</p>

<img class="alignnone size-medium wp-image-6798" src="http://mojefedora.cz/wp-content/uploads/2016/03/22-1-450x322.png" alt="22" width="450" height="322" />
<p><i>Obrázek 23: Po malé úpravě programového kódu funkce <strong>factorial</strong> již jednotkové testy žádné chyby (podle očekávání) nehlásí.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Předchozí části seriálu</h2>

<ol>

<li>Vývojová prostředí ve Fedoře (1. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-1-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-1-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (2. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-2-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-2-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (3. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-3-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-3-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: PyDev<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/</a>
</li>

</ol>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Seznámení s&nbsp;Python IDE Spyder (článek vyšel zde na mojefedora.cz)<br />
<a href="http://mojefedora.cz/seznameni-s-python-ide-spyder/">http://mojefedora.cz/seznameni-s-python-ide-spyder/</a>
</li>

<li>Stránka s&nbsp;popisem různých IDE pro Python<br />
<a href="http://quintagroup.com/cms/python/ide">http://quintagroup.com/cms/python/ide</a>
</li>

<li>Eclipse (stránka o frameworku na Fedoraproject.org)<br />
<a href="https://fedoraproject.org/wiki/Eclipse">https://fedoraproject.org/wiki/Eclipse</a>
</li>

<li>PyDev (hlavní stránka)<br />
<a href="http://pydev.sourceforge.net/index.html">http://pydev.sourceforge.net/index.html</a>
</li>

<li>PyDev (download, v podstatě není zapotřebí)<br />
<a href="http://pydev.sourceforge.net/download.html">http://pydev.sourceforge.net/download.html</a>
</li>

<li>PyDev (stránka s metainformacemi o PyDev pluginu, použita v Eclipse)<br />
<a href="http://www.pydev.org/updates/">http://www.pydev.org/updates/</a>
</li>

<li>PyDev (stránka s pluginem, použita v Eclipse)<br />
<a href="https://dl.bintray.com/fabioz/pydev/4.5.4/">https://dl.bintray.com/fabioz/pydev/4.5.4/</a>
</li>

<li>Certifikát, který lze do Eclipse doinstalovat<br />
<a href="http://www.pydev.org/pydev_certificate.cer">http://www.pydev.org/pydev_certificate.cer</a>
</li>

<li>PyDev FAQ<br />
<a href="http://pydev.sourceforge.net/faq.html">http://pydev.sourceforge.net/faq.html</a>
</li>

<li>PyDev (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PyDev">https://en.wikipedia.org/wiki/PyDev</a>
</li>

<li>Python (oficiální stránky projektu)<br />
<a href="https://www.python.org/">https://www.python.org/</a>
</li>

<li>Jython<br />
<a href="http://www.jython.org/">http://www.jython.org/</a>
</li>

<li>IronPython<br />
<a href="http://ironpython.net/">http://ironpython.net/</a>
</li>

<li>Python 3.5.1 documentation<br />
<a href="https://docs.python.org/3/">https://docs.python.org/3/</a>
</li>

<li>PyDev: Unittest integration<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/</a>
</li>

<li>Continuous unit testing with Pydev (Python and Eclipse)<br />
<a href="http://stackoverflow.com/questions/1015581/continuous-unit-testing-with-pydev-python-and-eclipse">http://stackoverflow.com/questions/1015581/continuous-unit-testing-with-pydev-python-and-eclipse</a>
</li>

<li>Test-driven development<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

