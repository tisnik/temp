<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s využitím knihoven Numpy a matplotlib</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s využitím knihoven Numpy a matplotlib</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Knihovna Numpy, s&nbsp;níž jsme se seznámili v&nbsp;předchozích článcích, nabízí uživatelům poměrně velké množství modulů a funkcí vhodných pro zpracování numerických dat, včetně poměrně pokročilých operací typu FFT (rychlá Fourierova transformace), řešení soustavy lineárních rovnic apod. Ovšem naplno tuto knihovnu využijeme teprve až ve chvíli, kdy ji propojíme s&nbsp;další knihovnou, která se jmenuje matplotlib. Knihovna matplotlib totiž umožňuje vytvářet a modifikovat různé typy grafů, a to mnohdy velmi jednoduchým a přímočarým způsobem.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s&nbsp;využitím knihoven Numpy a matplotlib</a></p>
<p><a href="#k02">2. Vykreslení průběhu funkce sinus</a></p>
<p><a href="#k03">3. Volba výstupního souboru</a></p>
<p><a href="#k04">4. Vykreslení průběhů dvou funkcí do jediného grafu</a></p>
<p><a href="#k05">5. Změna stylu vykreslování a přidání legendy</a></p>
<p><a href="#k06">6. Vyplnění plochy pod funkcí</a></p>
<p><a href="#k07">7. Kombinace různých stylů vykreslování grafů</a></p>
<p><a href="#k08">8. Zobrazení mřížky a nastavení rozsahů na obou osách</a></p>
<p><a href="#k09">9. Přidání popisků do grafů</a></p>
<p><a href="#k10">10. Základní polární graf</a></p>
<p><a href="#k11">11. Vykreslení průběhů většího množství funkcí v&nbsp;polárním grafu</a></p>
<p><a href="#k12">12. Vyplnění plochy pod funkcí v&nbsp;polárním grafu</a></p>
<p><a href="#k13">13. Předchozí části seriálu</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s&nbsp;využitím knihoven Numpy a matplotlib</h2>

<p>V&nbsp;předchozích dvou částech <a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/">[1]</a>, <a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/">[2]</a> seriálu o vývojových prostředích, která jsou dostupná všem programátorům využívajícím distribuci Fedora, jsme si vysvětlili některé koncepty, na nichž je postavena knihovna <i>Numpy</i>. V&nbsp;mnoha případech se však nespokojíme pouze s&nbsp;výstupem výpočtů ve formě různých tabulek, ale potřebujeme vytvořit i vhodný grafický výstup, tj.&nbsp;nějaký graf či diagram. Podporu pro vykreslování grafů sice přímo v&nbsp;knihovně <i>Numpy</i> nenalezneme (což je ostatně naprosto v&nbsp;pořádku, neboť její zaměření je poněkud odlišné), ovšem <i>Numpy</i> je možné velmi snadno propojit s&nbsp;knihovnou <i>matplotlib</i>, která je na práci s&nbsp;různými typy grafů určená.</p>

<img class="alignnone size-medium wp-image-6844" src="http://mojefedora.cz/wp-content/uploads/2016/04/08-450x275.png" alt="08" width="450" height="275" />
<p><i>Obrázek 1: Knihovnu matplotlib je možné použít i interaktivně v&nbsp;IPythonu či v&nbsp;IPython Notebooku.</i></p>

<p>Právě vzájemnou kombinací obou knihoven <i>Numpy+matplotlib</i> lze relativně snadno dosáhnout velmi pěkných výsledků plně porovnatelných s&nbsp;výsledky vytvořenými komerčními balíky. V&nbsp;dnešním článku se seznámíme pouze se základy práce s&nbsp;knihovnou <i>matplotlib</i>. Nejprve si ukážeme tvorbu klasických grafů funkcí jedné proměnné, následně do grafu přidáme průběh další funkce, popisky os, legendu, popisky vlastních průběhů atd. V&nbsp;závěru si pak ukážeme další typy grafů, zejména polární grafy. V&nbsp;navazující části si pak ukážeme tvorbu grafů s&nbsp;konturami, 3D grafů funkcí se dvěma nezávislými proměnnými, 3D grafů funkcí typu <i>x,y=f(t)</i>, <i>x,y,z=f(t)</i> apod. Přesvědčíme se, že možnosti knihovny <i>matplotlib</i> jsou skutečně široké a přitom je její použití poměrně jednoduché a snadno pochopitelné (pokud samozřejmě vynecháme některé pokročilejší operace).</p>

<img class="alignnone size-medium wp-image-6855" src="http://mojefedora.cz/wp-content/uploads/2016/04/19-450x369.png" alt="19" width="450" height="369" />
<p><i>Obrázek 2: Vykreslení průběhu funkce s&nbsp;využitím pouhých pěti příkazů (z&nbsp;toho dva příkazy slouží k&nbsp;importu knihoven).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vykreslení průběhu funkce sinus</h2>

<p>Popišme si velmi jednoduchý demonstrační příklad (naprogramovaný v&nbsp;Pythonu 3), který po svém spuštění vykreslí graf s&nbsp;průběhem funkce sinus. V&nbsp;příkladu nalezneme pouze osm programových řádků. Nejprve je nutné naimportovat hlavní modul knihovny <i>Numpy</i> nazvaný <strong>numpy</strong> a následně i submodul <strong>plt</strong> z&nbsp;knihovny <i>matplotlib</i>. Většina aplikací, ale i demonstračních příkladů, s&nbsp;nimiž se setkáte, používá pro importované moduly zkratky <strong>np</strong> a <strong>plt</strong>, čehož se z&nbsp;důvodu zachování konzistence budeme držet i my. Následně je pomocí funkce <strong>numpy.linspace()</strong> (tu již dobře známe z&nbsp;předchozích dvou článků) vytvořeno pole sta prvků s&nbsp;hodnotami od 0 do 2&pi;. Na toto pole je aplikována funkce <strong>numpy.sin()</strong>, jejímž výsledkem je nové stoprvkové pole (hodnoty prvků leží v&nbsp;rozsahu od -1 do 1). Funkcí <strong>matplotlib.pyplot.plot()</strong> je vykreslen průběh funkce, ovšem graf ještě není zobrazen, takže do něj můžeme přidat popis obou os a graf následně zobrazit příkazem <strong>matplotlib.pyplot.show()</strong>. Způsob zobrazení závisí na nastavení Pythonu; implicitně se použije speciální prohlížeč naprogramovaný s&nbsp;použitím knihovny Tk:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# První demonstrační příklad:
# - vykreslení průběhu funkce sin

import numpy as np
import matplotlib.pyplot as plt

# hodnoty na x-ové ose
x = np.linspace(0, 2*np.pi, 100)

# hodnoty na y-ové ose
y = np.sin(x)

# vykreslit průběh funkce
plt.plot(x, y)

# popis os
plt.xlabel("x")
plt.ylabel("sin(x)")

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7005" src="http://mojefedora.cz/wp-content/uploads/2016/04/figure_01-450x339.png" alt="figure_01" width="450" height="339" />
<p><i>Obrázek 3: Průběh funkce sin(x) vykreslený prvním demonstračním příkladem.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Volba výstupního souboru</h2>

<p>Implicitní prohlížeč, o němž jsme se zmínili <a href="#k03">v&nbsp;předchozí kapitole</a>, sice dokáže uložit nakreslený graf do výstupního souboru, ovšem mnohdy je nutné, aby knihovna <i>matplotlib</i> graf vyexportovala automaticky (programově). Můžeme si například představit generátor výsledků spouštěný ze skriptu, pomocnou službu pro tvorbu grafů umisťovaných na webové stránky apod. Při takovýchto požadavcích, které jsou poměrně časté, je možné využít funkce <strong>matplotlib.pyplot.savefig()</strong>, které se v&nbsp;nejjednodušším případě předá pouze jméno výstupního souboru. Tato funkce pak na základě analýzy přípony souboru rozhodne o tom, který formát použije. K&nbsp;dispozici jsou mj.&nbsp;tyto formáty:</p>

<table>
<tr><th>#</th><th>Koncovka</th><th>Formát</th></tr>
<tr><td>1</td><td>png</td><td>rastrový formát <a href="http://www.root.cz/clanky/png-is-not-gif/">PNG</a></td></tr>
<tr><td>2</td><td>pdf</td><td>dokument ve formátu PDF s&nbsp;vektorovým grafem</td></tr>
<tr><td>3</td><td>eps</td><td>vektorový formát Encapsulated PostScript (varianta PostScriptu určená pro vložení do dalších dokumentů, včetně (La)TeXu)</td></tr>
<tr><td>4</td><td>ps </td><td>vektorový formát <a href="http://www.root.cz/clanky/graficky-metaformat-postscript/">PostScript</a></td></tr>
<tr><td>5</td><td>svg</td><td>vektorový formát <a href="http://www.root.cz/clanky/vektorovy-graficky-format-svg/">SVG</a></td></tr>
</table>

<p>Použití funkce <strong>matplotlib.pyplot.savefig()</strong> je v&nbsp;praxi velmi snadné, o čemž se ostatně můžete sami přesvědčit po porovnání zdrojového kódu prvního demonstračního příkladu a příkladu druhého, do něhož jsme pouze vložili vytvoření pěti souborů s&nbsp;exportovaným grafem:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Druhý demonstrační příklad:
# - vykreslení průběhu funkce sin
# - uložení grafu do různých typů souboru

import numpy as np
import matplotlib.pyplot as plt

# hodnoty na x-ové ose
x = np.linspace(0, 2*np.pi, 100)

# hodnoty na y-ové ose
y = np.sin(x)

# vykreslit průběh funkce
plt.plot(x, y)

# popis os
plt.xlabel("x")
plt.ylabel("sin(x)")

# vykreslení a uložení grafu do různých typů souborů
plt.savefig("example02.png")
plt.savefig("example02.pdf")
plt.savefig("example02.eps")
plt.savefig("example02.ps")
plt.savefig("example02.svg")

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7006" src="http://mojefedora.cz/wp-content/uploads/2016/04/figure_02-450x339.png" alt="figure_02" width="450" height="339" />
<p><i>Obrázek 4: Průběh funkce sin(x) vykreslený druhým demonstračním příkladem.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vykreslení průběhů dvou funkcí do jediného grafu</h2>

<p>Velmi často se můžeme setkat s&nbsp;požadavkem vložení průběhů několika funkcí do jediného grafu. Zde knihovna <i>matplotlib</i> svým uživatelům nabízí větší množství řešení. Je například možné do jednoho obrázku či dokumentu vložit více grafů s&nbsp;totožnou x-ovou osou (a většinou odlišným měřítkem na y-ových osách), popř.&nbsp;lze skutečně sloučit větší množství průběhů v&nbsp;jediném grafu. Ukažme si nejdříve druhou zmiňovanou možnost, tj.&nbsp;vytvoření grafu s&nbsp;dvěma funkcemi, ovšem s&nbsp;totožnými x-ovými a y-ovými osami. I u takto vytvořeného grafu můžeme použít již zmíněnou funkci <strong>matplotlib.pyplot.plot()</strong>, které se ovšem předají čtyři pole: hodnoty na ose x, hodnoty první funkce, opět hodnoty na ose x (pro nás stejné pole) a hodnoty druhé funkce. Žádné další operace nejsou zapotřebí, což je ostatně patrné i při pohledu na zdrojový kód dnešního třetího demonstračního příkladu:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Třetí demonstrační příklad:
# - vykreslení průběhů funkcí sin a cos
#   do jediného grafu

import numpy as np
import matplotlib.pyplot as plt

# hodnoty na x-ové ose
x = np.linspace(0, 2*np.pi, 100)

# hodnoty na y-ové ose: první funkce
y1 = np.sin(x)

# hodnoty na y-ové ose: druhá funkce
y2 = np.cos(x)

# vykreslit průběh obou funkcí
plt.plot(x, y1, x, y2)

# popis os
plt.xlabel("x")
plt.ylabel("sin(x) a cos(x)")

# zobrazení grafu
plt.show()
</pre>

<p>Poznámka: toto řešení není příliš vhodné v&nbsp;situaci, kdy jsou hodnoty obou funkcí značně rozdílné, neboť se používá stejné měřítko.</p>

<img class="alignnone size-medium wp-image-7007" src="http://mojefedora.cz/wp-content/uploads/2016/04/figure_03-450x339.png" alt="figure_03" width="450" height="339" />
<p><i>Obrázek 5: Graf, na němž jsou nakresleny průběhy dvou funkcí.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Změna stylu vykreslování a přidání legendy</h2>

<p>Při pohledu na graf vykreslený na obrázku číslo 5 je patrné, že knihovna <i>matplotlib</i> automaticky zvolila pro průběh každé funkce odlišnou barvu, ovšem styl vykreslení (šířka čáry atd.) zůstal stejný. Pokud budeme potřebovat ovlivnit styl vykreslování průběhů funkcí, lze to samozřejmě zařídit a to poměrně jednoduše. Funkci <strong>matplotlib.pyplot.plot()</strong> je totiž možné předat nepovinný (a nepojmenovaný) parametr typu řetězec, v&nbsp;němž je &bdquo;zakódována&ldquo; jak barva (první písmeno anglického názvu barvy), tak i styl vykreslování (-- je plná čára, - čárkovaná čára, . tečkovaná čára apod.). Dalším nepovinným parametrem, tentokrát již pojmenovaným, je parametr &bdquo;label&ldquo;, pomocí něhož je možné libovolný průběh funkce označit jménem. Toto jméno se následně použije například v&nbsp;legendě přidané do grafu funkcí <strong>matplotlib.pyplot.legend()</strong>. Nepovinným pojmenovaným parametrem <strong>loc</strong> se popíše, do kterého místa grafu se má legenda vložit:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Čtvrtý demonstrační příklad:
# - vykreslení průběhů funkcí sin a cos a sinc
#   do jediného grafu
# - změna stylu vykreslování průběhů funkcí

import numpy as np
import matplotlib.pyplot as plt

# hodnoty na x-ové ose
x = np.linspace(0.01, 2*np.pi, 100)

# hodnoty na y-ové ose: první funkce
y1 = np.sin(x)

# hodnoty na y-ové ose: druhá funkce
y2 = np.cos(x)

# hodnoty na y-ové ose: třetí funkce
y3 = np.sin(x)/x

# vykreslit průběh všech tří funkcí
# se změnou stylu vykreslování
plt.plot(x, y1, "b-", label="sin")
plt.plot(x, y2, "r.", label="cos")
plt.plot(x, y3, "g--", label="sinc")

# přidání legendy
plt.legend(loc="lower left")

# popis os
plt.xlabel("x")
plt.ylabel("sin(x), cos(x) a sinc(x)")

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7008" src="http://mojefedora.cz/wp-content/uploads/2016/04/figure_04-450x339.png" alt="figure_04" width="450" height="339" />
<p><i>Obrázek 6: Různé styly vykreslování. Povšimněte si, že v&nbsp;grafu je v&nbsp;levém dolním rohu zobrazena i legenda.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vyplnění plochy pod funkcí</h2>

<p>V&nbsp;případě, že se namísto funkce <strong>matplotlib.pyplot.plot()</strong> použije pro vykreslení grafu funkce pojmenovaná <strong>matplotlib.pyplot.fill()</strong>, změní se poměrně zásadním způsobem styl vykreslení. Namísto (lomené) čáry se totiž plocha pod funkcí vyplní konstantní barvou. Tu je možné zadat slovně, například "red", "yellow" atd. Ovšem ve chvíli, kdy se funkce překrývají, by dříve vykreslený průběh nebyl viditelný, protože by jedna barevná plocha překreslila plochu druhou. Abychom tomuto problému předešli, stačí knihovně <i>matplotlib</i> předepsat průhlednost barvy v&nbsp;rozsahu 0.0 až 1.0. Konkrétně to znamená, že při požadavku na vykreslení dvou funkcí a použití barev s&nbsp;průhledností 30% můžeme zadat příkaz <strong>plt.fill(x, y1, "red", x, y2, "yellow", alpha=0.3)</strong>. Podívejme se na úplné znění zdrojového kódu dnešního pátého demonstračního příkladu, v&nbsp;němž je tento příkaz použit:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Pátý demonstrační příklad:
# - vykreslení průběhů funkcí sin a sinc
#   do jediného grafu
#   s vyplněním plochy pod průběhu

import numpy as np
import matplotlib.pyplot as plt

# hodnoty na x-ové ose
x = np.linspace(0, 2*np.pi, 100)

# hodnoty na y-ové ose: první funkce
y1 = np.sin(x)

# hodnoty na y-ové ose: druhá funkce
y2 = np.sin(3*x)/(x+1)

# vykreslit průběh obou funkcí
# se změnou stylu vykreslování
plt.fill(x, y1, "red", x, y2, "yellow", alpha=0.3)

# popis os
plt.xlabel("x")
plt.ylabel("sin(x) a sinc(3x)")

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7009" src="http://mojefedora.cz/wp-content/uploads/2016/04/figure_05-450x339.png" alt="figure_05" width="450" height="339" />
<p><i>Obrázek 7: Dva průběhy funkcí vykreslených červenou a žlutou barvou s&nbsp;průhledností 30%.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Kombinace různých stylů vykreslování grafů</h2>

<p>V&nbsp;knihovně <i>matplotlib</i> je možné jednotlivé příkazy pro vykreslení funkcí vzájemně kombinovat. V&nbsp;dnešním šestém demonstračním příkladu je vykreslena funkce <i>sinus</i>, dále pak známá funkce <i>sinc</i> (s&nbsp;posunutou osou) a následně dva průběhy funkcí, které vlastně tvoří obálku <i>sinc</i>. Funkce <i>sinus</i> i <i>sinc</i> jsou vykresleny takovým způsobem, že je plocha pod průběhem funkce vyplněna, zatímco obálky jsou pouze naznačeny čárkovanými čarami. Legenda se navíc přesunula do pravého horního rohu, kde je pro ni mnohem více místa:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Šestý demonstrační příklad:
# - vykreslení průběhů čtyř různých funkcí
#   do jediného grafu
#   s vyplněním plochy pod průběhu
# - kombinace různých stylů vykreslení

import numpy as np
import matplotlib.pyplot as plt

# hodnoty na x-ové ose
x = np.linspace(0.001, 2*np.pi, 100)

# hodnoty na y-ové ose: první funkce
y1 = np.sin(5*x)

# hodnoty na y-ové ose: druhá funkce
y2 = np.sin(5*x)/(x+1/2)

# hodnoty na y-ové ose: třetí čtvrtá funkce
y3 = 1/(x+1/2)
y4 = -y3

# vykreslit průběh obou funkcí
# se změnou stylu vykreslování
plt.fill(x, y1, "yellow", alpha=0.3, label="sin x")
plt.fill(x, y2, "r.", alpha=1.0, label="sinc 5x")
plt.plot(x, y3, "g--", label="obalka sinc")
plt.plot(x, y4, "g--", label="obalka sinc")

# přidání legendy
plt.legend(loc="upper right")

# popis os
plt.xlabel("x")
plt.ylabel("sin(x) a sinc(3x)")

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7010" src="http://mojefedora.cz/wp-content/uploads/2016/04/figure_06-450x339.png" alt="figure_06" width="450" height="339" />
<p><i>Obrázek 8: Kombinace několika různých stylů vykreslení funkcí.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zobrazení mřížky a nastavení rozsahů na obou osách</h2>

<p>Doposud nakreslené grafy ve skutečnosti nevypadaly příliš profesionálně, a to mj.&nbsp;i proto, že bylo poměrně obtížné rozeznat počátek souřadnic atd. Poměrně snadno je možné tento nedostatek opravit přidáním mřížky příkazem <strong>matplotlib.pyplot.grid(True)</strong>. Navíc ještě můžeme zvětšit oblast grafu pomocí <strong>matplotlib.pyplot.axis([-1, 8, -1.5, 1.5])</strong>, kde čtveřice čísel značí postupně x<sub>min</sub>, x<sub>max</sub>, y<sub>min</sub> a y<sub>max</sub> (přesněji řečeno se nezvětší samotný obrázek s&nbsp;grafem, ale dojde ke změně jeho měřítka). Vlastní průběh funkce tedy přestane zasahovat do samotných hranic grafu, takže nový výsledek vypadá mnohem lépe:</p>

<img class="alignnone size-medium wp-image-7011" src="http://mojefedora.cz/wp-content/uploads/2016/04/figure_07-450x339.png" alt="figure_07" width="450" height="339" />
<p><i>Obrázek 9: Graf se zobrazením mřížky a změnou měřítka (plochy).</i></p>

<p>Podívejme se na upravený zdrojový kód:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Sedmý demonstrační příklad:
# - vykreslení průběhů funkcí sin a cos
# - nastavení mřížky
# - nastavení rozsahů na obou osách

import numpy as np
import matplotlib.pyplot as plt

# hodnoty na x-ové ose
x = np.linspace(0, 2*np.pi, 100)

# hodnoty na y-ové ose: první funkce
y1 = np.sin(x)

# hodnoty na y-ové ose: druhá funkce
y2 = np.cos(x)

# vykreslit průběh obou funkcí
# se změnou stylu vykreslování
plt.plot(x, y1, "b-", label="sin")
plt.plot(x, y2, "r-", label="cos")

# přidání legendy
plt.legend(loc="lower left")

# nastavení rozsahů na obou osách
plt.axis([-1, 8, -1.5, 1.5])

# povolení zobrazení mřížky
plt.grid(True)

# popis os
plt.xlabel("x")
plt.ylabel("sin(x) a cos(x)")

# zobrazení grafu
plt.show()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přidání popisků do grafů</h2>

<p>Nyní se již dostáváme k&nbsp;poněkud složitějšímu úkolu. Předpokládejme, že je do grafu se dvěma funkcemi zapotřebí přidat popisky se šipkami ukazujícími na určité místo na křivce. Výsledek by měl vypadat nějak takto:</p>

<img class="alignnone size-medium wp-image-7012" src="http://mojefedora.cz/wp-content/uploads/2016/04/figure_08-450x339.png" alt="figure_08" width="450" height="339" />
<p><i>Obrázek 10: Přidání popisků do grafů.</i></p>

<p>Průběhy obou funkcí si necháme vykreslit nám již známým způsobem, zde tedy k&nbsp;žádné podstatné změně nedojde. Ovšem pro přidání popisků již musíme použít novou funkci, konkrétně funkci pojmenovanou <strong>matplotlib.pyplot.annotate()</strong>. Této funkci se předá jeden nepojmenovaný parametr s&nbsp;popiskem, tj.&nbsp;například "maximální hodnota sin(x)". Dále budou následovat pojmenované parametry, konkrétně parametr se jménem <strong>xy</strong> a přesnou souřadnicí vrcholu šipky (tj.&nbsp;místa, kam šipka míří), dále pak parametr se jménem <strong>xytext</strong>, jehož hodnotou je souřadnice umístění textu (n-tice) a posledním parametrem je parametr s&nbsp;názvem <strong>arrowprops</strong> (<i>properties</i>), přes nějž nastavíme styl vykreslené šipky:</p>

<pre>
plt.annotate("maximální hodnota sin(x)",
             xy=(np.pi/2,1.0),
             xytext=(1, 1.3),
             arrowprops=dict(arrowstyle="->"))
</pre>

<p>Do grafu ve skutečnosti vložíme dva popisky, což je ostatně patrné z&nbsp;výpisu zdrojového kódu osmého demonstračního příkladu:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Osmý demonstrační příklad:
# - vykreslení průběhů funkcí sin a cos
# - nastavení mřížky
# - nastavení rozsahů na obou osách
# - přidání popisku přímo do grafu

import numpy as np
import matplotlib.pyplot as plt

# hodnoty na x-ové ose
x = np.linspace(0, 2*np.pi, 100)

# hodnoty na y-ové ose: první funkce
y1 = np.sin(x)

# hodnoty na y-ové ose: druhá funkce
y2 = np.cos(x)

# vykreslit průběh obou funkcí
# se změnou stylu vykreslování
plt.plot(x, y1, "b-", label="sin")
plt.plot(x, y2, "r-", label="cos")

# přidání legendy
plt.legend(loc="lower left")

# nastavení rozsahů na obou osách
plt.axis([-1, 8, -1.5, 1.5])

# povolení zobrazení mřížky
plt.grid(True)

# popis os
plt.xlabel("x")
plt.ylabel("sin(x) a cos(x)")

# vložit první popisek do grafu
plt.annotate("maximální hodnota sin(x)",
             xy=(np.pi/2,1.0),
             xytext=(1, 1.3),
             arrowprops=dict(arrowstyle="->"))

# vložit druhý popisek do grafu
plt.annotate("minimální hodnota cos(x)",
             xy=(np.pi,-1.0),
             xytext=(2,-1.3),
             arrowprops=dict(arrowstyle="->"))

# zobrazení grafu
plt.show()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Základní polární graf</h2>

<p>Pokud je zapotřebí vykreslit polární graf, je možné postupovat následujícím způsobem. Nejprve se plocha obrázku či dokumentu určená pro vykreslení grafu rozdělí do pomyslné mřížky o velikosti 1&times;1 buňka. Do této mřížky se funkcí <strong>matplotlib.pyplot.subplot()</strong> vloží &bdquo;podgraf&ldquo;, u něhož se pojmenovaným parametrem <strong>projection</strong> specifikuje použitá projekce. Magická konstanta 111 při volání této funkce značí, že se skutečně má vytvořit mřížka 1&times;1 buňka a podgraf se má vložit do této buňky (ta má index 1). Další vykreslování již vlastně známe, ovšem s&nbsp;tím nepatrným rozdílem, že se nevolá funkce <strong>matplotlib.pyplot.plot()</strong>, ale metoda objektu získaného výše zmíněnou funkcí <strong>matplotlib.pyplot.subplot()</strong>. Dále si povšimněte toho, že namísto polí pojmenovaných <strong>x</strong> a <strong>y</strong> používáme pole hodnot se jmény <strong>theta</strong> a <strong>radius</strong>, což se pro tento typ grafu hodí mnohem více:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Devátý demonstrační příklad:
# - základní polární graf

import numpy as np
import matplotlib.pyplot as plt

# úhel v polárním grafu
theta = np.linspace(0.01, 2*np.pi, 150)

# vzdálenost od středu
radius = np.log(theta)

ax=plt.subplot(111, projection="polar")

# vykreslit průběh funkce
# v polárním grafu
ax.plot(theta, radius)

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7013" src="http://mojefedora.cz/wp-content/uploads/2016/04/figure_09-450x339.png" alt="figure_09" width="450" height="339" />
<p><i>Obrázek 11: Polární graf se slavnou logaritmickou spirálou.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vykreslení průběhů většího množství funkcí v&nbsp;polárním grafu</h2>

<p>Podobně, jako tomu bylo u normálního grafu se dvěma na sebe kolmými osami, i v&nbsp;polárním grafu je možné současně zobrazit větší množství průběhů funkcí; postačuje pouze volat několikrát metodu <strong>plot</strong> objektu získaného voláním funkce <strong>matplotlib.pyplot.subplot()</strong>. Taktéž je možné specifikovat styl zobrazení průběhu jednotlivých funkcí, pojmenovat daný průběh (resp.&nbsp;přesněji řečeno mu přiřadit jméno) apod. V&nbsp;dnešním předposledním demonstračním příkladu jsou v&nbsp;polárním grafu zobrazeny průběhy tří funkcí &ndash; dvě funkce vytvoří spirálu (první je lineární, druhá pak logaritmická), třetí funkce má v&nbsp;polárním grafu tvar srdce. Podívejme se na zdrojový kód tohoto příkladu:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Desátý demonstrační příklad:
# - vykreslení průběhů několika funkcí
# - do polárního grafu

import numpy as np
import matplotlib.pyplot as plt

# úhel v polárním grafu
theta = np.linspace(0.01, 2*np.pi, 150)

# první funkce: vzdálenost od středu
radius1 = theta

# druhá funkce: vzdálenost od středu
radius2 = 2*np.abs(theta-np.pi)

# třetí funkce: vzdálenost od středu
radius3 = 2*np.log(theta)

ax=plt.subplot(111, projection="polar")

# vykreslit průběh první funkce
# v polárním grafu
ax.plot(theta, radius1, "r.", label="f1")

# vykreslit průběh druhé funkce
# v polárním grafu
ax.plot(theta, radius2, "g", label="f2")

# vykreslit průběh třetí funkce
# v polárním grafu
ax.plot(theta, radius3, "b--", label="f3")

# přidání legendy
plt.legend(loc="lower left")

# zobrazení grafu
plt.show()
</pre>

<img class="alignnone size-medium wp-image-7014" src="http://mojefedora.cz/wp-content/uploads/2016/04/figure_10-450x339.png" alt="figure_10" width="450" height="339" />
<p><i>Obrázek 12: Kombinované zobrazení několika funkcí v&nbsp;jediném polárním grafu.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vyplnění plochy pod funkcí v&nbsp;polárním grafu</h2>

<p>I funkce, jejichž průběh má být vykreslen v&nbsp;polárním grafu, mohou být pod svou křivkou vyplněny, postačuje pouze namísto metody nazvané <strong>plot()</strong> zavolat metodu pojmenovanou <strong>fill()</strong>. Většinou je navíc nutné u vyplněného průběhu funkce specifikovat kromě barvy i průhlednost vykreslované plochy (v&nbsp;našem případě bude nastavena na 30%). V&nbsp;dnešním jedenáctém a současně i posledním demonstračním příkladu jsou vykresleny dvě funkce, jedna s&nbsp;použitím metody <strong>plot()</strong>, druhá pak pomocí <strong>fill()</strong>. Navíc si povšimněte další zajímavé vlastnosti &ndash; pole <strong>theta</strong> obsahující úhly je naplněno prvky s&nbsp;hodnotami od 0 až do 4&pi;. Co to znamená v&nbsp;praxi? &ndash; z&nbsp;pohledu na obrázek s&nbsp;grafem je patrné, že jsou zobrazeny dvě celé otočky spirály, protože 4&pi; rad odpovídá 720&deg;:</p>

<img class="alignnone size-medium wp-image-7015" src="http://mojefedora.cz/wp-content/uploads/2016/04/figure_11-450x339.png" alt="figure_11" width="450" height="339" />
<p><i>Obrázek 13: Spirála je vykreslena tak, že se plocha pod křivkou vyplnila. Povšimněte si, že v&nbsp;grafu došlo k&nbsp;dvěma úplným otočkám spirály.</i></p>

<p>Následuje úplný kód tohoto demonstračního příkladu:</p>

<pre>
# Knihovny Numpy a matplotlib
#
# Jedenáctý demonstrační příklad:
# - vykreslení průběhů několika funkcí
# - do polárního grafu

import numpy as np
import matplotlib.pyplot as plt

# úhel v polárním grafu
theta = np.linspace(0.00, 4*np.pi, 150)

# první funkce: vzdálenost od středu
radius1 = theta

# druhá funkce: vzdálenost od středu
radius2 = 3*np.abs(theta-2*np.pi)

ax=plt.subplot(111, projection="polar")

# vykreslit průběh první funkce
# v polárním grafu
ax.plot(theta, radius2, "b", label="f1")

# vykreslit průběh druhé funkce
# v polárním grafu
ax.fill(theta, radius1, "yellow", alpha=0.3, label="f1")

# přidání legendy
plt.legend(loc="lower left")

# zobrazení grafu
plt.show()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Předchozí části seriálu</h2>

<ol>

<li>Vývojová prostředí ve Fedoře (1. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-1-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-1-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (2. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-2-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-2-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (3. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-3-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-3-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: PyDev<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: PyDev (2.část)<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev-2-cast/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev-2-cast/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: IPython a IPython Notebook<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy (2.část)<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/</a>
</li>

</ol>

<img class="alignnone size-medium wp-image-7016" src="http://mojefedora.cz/wp-content/uploads/2016/04/figure_12-450x339.png" alt="figure_12" width="450" height="339" />
<p><i>Obrázek 14: V&nbsp;navazujícím článku se seznámíme mj.&nbsp;i se způsobem vykreslování grafu s&nbsp;konturami, což je jedna z&nbsp;variant vizualizace funkcí se dvěma nezávislými proměnnými. Relativně snadno je však možné vytvářet i složitější 3D grafy, vyplněné kontury apod.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Graphics with Matplotlib<br />
<a href="http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html">http://kestrel.nmt.edu/~raymond/software/python_notes/paper004.html</a>
</li>

<li>Systémy lineárních rovnic<br />
<a href="http://www.matematika.cz/systemy-linearnich-rovnic">http://www.matematika.cz/systemy-linearnich-rovnic</a>
</li>

<li>IPython homepage<br />
<a href="http://ipython.org/">http://ipython.org/</a>
</li>

<li>Dokumentace k IPythonu<br />
<a href="http://ipython.org/documentation.html#">http://ipython.org/documentation.html#</a>
</li>

<li>IPython Tutorial<br />
<a href="http://ipython.readthedocs.org/en/stable/interactive/tutorial.html">http://ipython.readthedocs.org/en/stable/interactive/tutorial.html</a>
</li>

<li>NumPy Home Page<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>NumPy v1.10 Manual<br />
<a href="http://docs.scipy.org/doc/numpy/index.html">http://docs.scipy.org/doc/numpy/index.html</a>
</li>

<li>NumPy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NumPy">https://en.wikipedia.org/wiki/NumPy</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>The cell magics in IPython<br />
<a href="http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb">http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb</a>
</li>

<li>0MQ Home Page<br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>Is IPython Notebook ever used as an IDE, or merely for presentations?<br />
<a href="https://www.reddit.com/r/IPython/comments/1uk7hp/is_ipython_notebook_ever_used_as_an_ide_or_merely/">https://www.reddit.com/r/IPython/comments/1uk7hp/is_ipython_notebook_ever_used_as_an_ide_or_merely/</a>
</li>

<li>The IDE as a Bad Programming Language Enabler <br />
<a href="https://dzone.com/articles/ide-bad-programming-language">https://dzone.com/articles/ide-bad-programming-language</a>
</li>

<li>Enhanced Interactive Python with IPython<br />
<a href="http://www.onlamp.com/pub/a/python/2005/01/27/ipython.html">http://www.onlamp.com/pub/a/python/2005/01/27/ipython.html</a>
</li>

<li>Direct mode<br />
<a href="https://en.wikipedia.org/wiki/Direct_mode">https://en.wikipedia.org/wiki/Direct_mode</a>
</li>

<li>Seznámení s&nbsp;Python IDE Spyder (článek vyšel zde na mojefedora.cz)<br />
<a href="http://mojefedora.cz/seznameni-s-python-ide-spyder/">http://mojefedora.cz/seznameni-s-python-ide-spyder/</a>
</li>

<li>Stránka s&nbsp;popisem různých IDE pro Python<br />
<a href="http://quintagroup.com/cms/python/ide">http://quintagroup.com/cms/python/ide</a>
</li>

<li>Eclipse (stránka o frameworku na Fedoraproject.org)<br />
<a href="https://fedoraproject.org/wiki/Eclipse">https://fedoraproject.org/wiki/Eclipse</a>
</li>

<li>PyDev (hlavní stránka)<br />
<a href="http://pydev.sourceforge.net/index.html">http://pydev.sourceforge.net/index.html</a>
</li>

<li>PyDev (download, v podstatě není zapotřebí)<br />
<a href="http://pydev.sourceforge.net/download.html">http://pydev.sourceforge.net/download.html</a>
</li>

<li>PyDev (stránka s metainformacemi o PyDev pluginu, použita v Eclipse)<br />
<a href="http://www.pydev.org/updates/">http://www.pydev.org/updates/</a>
</li>

<li>PyDev (stránka s pluginem, použita v Eclipse)<br />
<a href="https://dl.bintray.com/fabioz/pydev/4.5.4/">https://dl.bintray.com/fabioz/pydev/4.5.4/</a>
</li>

<li>Certifikát, který lze do Eclipse doinstalovat<br />
<a href="http://www.pydev.org/pydev_certificate.cer">http://www.pydev.org/pydev_certificate.cer</a>
</li>

<li>PyDev FAQ<br />
<a href="http://pydev.sourceforge.net/faq.html">http://pydev.sourceforge.net/faq.html</a>
</li>

<li>PyDev (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PyDev">https://en.wikipedia.org/wiki/PyDev</a>
</li>

<li>Python (oficiální stránky projektu)<br />
<a href="https://www.python.org/">https://www.python.org/</a>
</li>

<li>Jython<br />
<a href="http://www.jython.org/">http://www.jython.org/</a>
</li>

<li>IronPython<br />
<a href="http://ironpython.net/">http://ironpython.net/</a>
</li>

<li>Python 3.5.1 documentation<br />
<a href="https://docs.python.org/3/">https://docs.python.org/3/</a>
</li>

<li>PyDev: Unittest integration<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/</a>
</li>

<li>Continuous unit testing with Pydev (Python and Eclipse)<br />
<a href="http://stackoverflow.com/questions/1015581/continuous-unit-testing-with-pydev-python-and-eclipse">http://stackoverflow.com/questions/1015581/continuous-unit-testing-with-pydev-python-and-eclipse</a>
</li>

<li>Test-driven development<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

