<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy (2.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy (2.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém článku věnovaném IPython Notebooku a taktéž knihovně Numpy dokončíme popis základního modulu této knihovny. Nejdříve si vysvětlíme několik principů indexování prvků polí a následně se budeme zabývat vybranými operacemi s&nbsp;maticemi, které jsou v&nbsp;knihovně Numpy dostupné. Nezapomeneme ani na popis některých užitečných funkcí dostupných v&nbsp;submodulu numpy.linalg &ndash; výpočet determinantu, výpočet inverzní matice či vyřešení systému rovnic.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Indexování prvků polí</a></p>
<p><a href="#k02">2. Indexování prvků polí obsahem jiného pole</a></p>
<p><a href="#k03">3. Vytváření &bdquo;řezů&ldquo; z&nbsp;polí</a></p>
<p><a href="#k04">4. Použití &bdquo;kroku&ldquo; při provádění řezu polem</a></p>
<p><a href="#k05">5. Pole a relační operátory</a></p>
<p><a href="#k06">6. Výběr prvků pole na základě zadané podmínky</a></p>
<p><a href="#k07">7. Matematické funkce aplikovatelné na prvky polí</a></p>
<p><a href="#k08">8. Sčítání, odčítání a násobení matic</a></p>
<p><a href="#k09">9. Výpočet determinantu a výpočet inverzní matice</a></p>
<p><a href="#k10">10. Vyřešení systému lineárních rovnic</a></p>
<p><a href="#k11">11. Předchozí části seriálu</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Indexování prvků polí</h2>

<p><a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/">V&nbsp;předchozí části</a> seriálu o vývojových prostředích, která jsou dostupná všem programátorům využívajícím distribuci Fedora, jsme si vysvětlili základní koncepty knihovny <i>Numpy</i>, jež se stala velmi populární, a to nejenom mezi profesionálními vývojáři, ale také mezi amatérskými programátory. Připomeňme si pouze, že tato knihovna je postavena na zpracování polí, ovšem nejedná se o datové struktury spravované přímo interpretrem programovacího jazyka Python (tedy vlastně o seznamy seznamů), ale o skutečně homogenní datové struktury vytvářené a zpřístupněné přes nativní (binární) knihovny. Díky tomuto konceptu bylo možné dosáhnout snížení paměťových nároků a především pak zrychlit přístup k&nbsp;prvkům polí. Navíc je možné provádět změnu tvaru (<i>shape</i>) polí, a to bez nutnosti fyzického přesunu jednotlivých prvků. Tvar pole je tak vlastně jen &bdquo;pohledem&ldquo; (<i>view</i>) na fyzické pole uložené buď v&nbsp;operační paměti počítače či na disku.</p>

<p>Jakým způsobem se pole s&nbsp;využitím knihovny <i>Numpy</i> vytváří již víme. Ještě si však musíme říct, jak se prvky uložené v&nbsp;polích vybírají neboli indexují. V&nbsp;případě jednorozměrných polí je to ve skutečnosti velmi jednoduché &ndash; prvky jsou totiž číslovány od nuly a díky přetížení operátoru [] (operátor indexování) je možné prvky v&nbsp;případě potřeby indexovat i od konce pole. V&nbsp;tomto případě se musí použít záporné číslo, takže a[1] značí druhý prvek pole zatímco a[-1] první prvek od konce:</p>

<pre>
a=numpy.arange(12)

a
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])

a[0]
0

a[5]
5

a[-1]
11

a[-5]
7
</pre>

<img class="alignnone size-medium wp-image-6898" src="http://mojefedora.cz/wp-content/uploads/2016/04/13-1-418x450.png" alt="13" width="418" height="450" />
<p><i>Obrázek 1: Indexování prvků v&nbsp;jednorozměrných polích.</i></p>

<p>U dvourozměrných či vícerozměrných polí je situace poněkud komplikovanější, neboť v&nbsp;tomto případě je nutné použít dva či větší počet indexů (jeden index pro každou dimenzi). Vzhledem k&nbsp;tomu, že v&nbsp;různých programovacích jazycích a rozličných specializovaných nástrojích typu <i>R</i> či <i>Matlab</i>, se používají odlišné způsoby zápisu více indexů, podporuje knihovna <i>Numpy</i> dva způsoby zápisu &ndash; buď se všechny indexy oddělí čárkou a vloží se do jediného bloku omezeného hranatými závorkami [], nebo se alternativně pro každou dimenzi použije zvláštní hranatá závorka (syntaxe odvozená od Céčka):</p>

<pre>
import numpy

m=numpy.reshape(numpy.arange(12), (3,4))

m
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])

m[0]
array([0, 1, 2, 3])

m[0][2]
2

m[0,2]
2
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Indexování prvků polí obsahem jiného pole</h2>

<p>Třetí možností, jak získat část prvků z&nbsp;nějakého pole, spočívá v&nbsp;indexování prvků tohoto pole jiným polem. To je velmi zajímavá a v&nbsp;mnoha operacích užitečná alternativa, takže se podívejme, jak ji je možné použít v&nbsp;praxi. Pole <strong>b</strong>, resp.&nbsp;jeho obsah slouží pro indexování pole <strong>a</strong>:</p>

<pre>
a=numpy.arange(12)

a
array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19])

b=numpy.array([1,2,9,8,5])

a[b]
array([11, 12, 19, 18, 15])

b=numpy.array([1,2,-1,8,5])

a[b]
array([11, 12, 19, 18, 15])
</pre>

<img class="alignnone size-medium wp-image-6899" src="http://mojefedora.cz/wp-content/uploads/2016/04/14-1-418x450.png" alt="14" width="418" height="450" />
<p><i>Obrázek 2: Indexování prvků ve dvourozměrném poli.</i></p>

<p>Zkusme stejnou operaci provést s&nbsp;dvourozměrným polem:</p>

<pre>
m1=numpy.array([[1,2,3],[4,5,6],[7,8,9]])

m1
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])

m2=numpy.array([0,2,1])

m1[m2]
array([[1, 2, 3],
       [7, 8, 9],
       [4, 5, 6]])
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vytváření &bdquo;řezů&ldquo; z&nbsp;polí</h2>

<p>V&nbsp;mnoha případech je nutné z&nbsp;polí získat hodnoty většího množství prvků tvořících souvislý blok. Může se například jednat o všechny prvky pole kromě prvku prvního a posledního (typické pro některé filtry), prvky z&nbsp;první poloviny pole atd. I v&nbsp;tomto případě knihovna <i>Numpy</i> nabízí vývojářům velmi elegantní řešení, a to ve formě takzvaných řezů (<i>slices</i>). Namísto jediného indexu je totiž možné zadat dva indexy oddělené dvojtečkou, které potom reprezentují začátek a konec řezu. Opět se podívejme na demonstrační příklad:</p>

<pre>
a=numpy.arange(12)

a
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])

a[3:7]
array([3, 4, 5, 6])
</pre>

<p>Pokud se vynechá první index, automaticky se za něj dosadí 0, pokud se vynechá index druhý, dosadí se za něj velikost dimenze pole-1. Vynechat je možné i oba indexy; v&nbsp;tomto případě je řezem původní pole (tento zápis je sice možný, ale poněkud postrádá smysl):</p>

<pre>
a=numpy.arange(12)

a[:7]
array([0, 1, 2, 3, 4, 5, 6])

a[5:]
array([ 5,  6,  7,  8,  9, 10, 11])

a[:]
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
</pre>

<p>Někdy může být řez polem prázdný:</p>

<pre>
a=numpy.arange(12)

a
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])

a[-4:-6]
array([], dtype=int64)
</pre>

<p>Použít je možné i záporné indexy popř.&nbsp;první či druhý index zcela vynechat:</p>

<pre>
a[-6:-4]
array([6, 7])

a[-6:]
array([ 6,  7,  8,  9, 10, 11])

a[:-4]
array([0, 1, 2, 3, 4, 5, 6, 7])
</pre>

<img class="alignnone size-medium wp-image-6900" src="http://mojefedora.cz/wp-content/uploads/2016/04/15-1-418x450.png" alt="15" width="418" height="450" />
<p><i>Obrázek 3: Řezy jednorozměrným polem.</i></p>

<p>Řezy je možné provádět i u dvourozměrných či vícerozměrných polí. V&nbsp;tomto případě se zkombinuje zápis popsaný <a href="#k01">v&nbsp;první kapitole</a> s&nbsp;dvojtečkou:</p>

<pre>
import numpy

m=numpy.reshape(numpy.arange(25), (5,5))

m
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])

array([[10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])

m[2:4,3]

array([13, 18])

m[2:4,3:5]

array([[13, 14],
       [18, 19]])

m[1:4,1:4]

array([[ 6,  7,  8],
       [11, 12, 13],
       [16, 17, 18]])

m[-4:-2,-4:-2]

array([[ 6,  7],
       [11, 12]])
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Použití &bdquo;kroku&ldquo; při provádění řezu polem</h2>

<p>Při provádění operace řezu polem jsme doposud používali zápis <strong>pole[i1:i2]</strong>, popř.&nbsp;se jeden z&nbsp;indexů <strong>i1</strong> či <strong>i2</strong> mohl vynechat. Ovšem knihovna <i>Numpy</i> podporuje ještě zápis <strong>pole[i1:i2:step]</strong>, přičemž poslední použitá hodnota udává vzdálenost mezi sousedními prvky řezu. Podívejme se na příklad:</p>

<pre>
a=numpy.arange(1,11)

a
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])

a[1:10:1]
array([ 2,  3,  4,  5,  6,  7,  8,  9, 10])

a[1:10:2]
array([ 2,  4,  6,  8, 10])

a[1:10:3]
array([2, 5, 8])

a[::3]
array([ 1,  4,  7, 10])
</pre>

<img class="alignnone size-medium wp-image-6901" src="http://mojefedora.cz/wp-content/uploads/2016/04/16-1-418x450.png" alt="16" width="418" height="450" />
<p><i>Obrázek 4: Řezy jednorozměrným polem s&nbsp;udáním kroku.</i></p>

<p>Samozřejmě je možné prakticky tutéž operaci provést i u dvourozměrných polí:</p>

<pre>
m1=numpy.reshape(numpy.arange(0,25), (5,5))

m1
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])

m1[0:5:2]
array([[ 0,  1,  2,  3,  4],
       [10, 11, 12, 13, 14],
       [20, 21, 22, 23, 24]])

m1[1::2]
array([[ 5,  6,  7,  8,  9],
       [15, 16, 17, 18, 19]])
</pre>

<p>Či dokonce takto (sudé sloupce a sudé řádky):</p>

<pre>
m1[::2,::2]

array([[ 0,  2,  4],
       [10, 12, 14],
       [20, 22, 24]])
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Pole a relační operátory</h2>

<p>V&nbsp;případě importu knihovny <i>Numpy</i> dojde k&nbsp;přetížení mnoha dalších operátorů. Jedná se zejména o relační operátory, tj.&nbsp;o takové operátory, které slouží k&nbsp;porovnání dvou hodnot. Ve svém původním významu tyto operátory vrací jedinou pravdivostní hodnotu <strong>True</strong> nebo <strong>False</strong>. Ovšem pokud se relační operátory použijí ve své přetížené variantě pro porovnání polí (vektorů, matic), je výsledkem opět pole, ovšem pouze s&nbsp;hodnotami <strong>True</strong> a <strong>False</strong> vzniklými porovnáním prvků polí se stejným indexem. Při porovnávání musí mít obě pole stejný tvar, což je kontrolováno za běhu aplikace:</p>

<pre>
a=numpy.arange(1,11)
b=numpy.array([100,0,100,0,100,0,100,0,100,0])

a
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])

b
array([100,   0, 100,   0, 100,   0, 100,   0, 100,   0])

a==b
array([False, False, False, False, False, False, False, False, False, False], dtype=bool)

a!=b
array([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True], dtype=bool)

a&lt;b
array([ True, False,  True, False,  True, False,  True, False,  True, False], dtype=bool)
</pre>

<p>Relační operátory je možné použít i tak, že jedním z&nbsp;operandů je pole a druhým operandem je skalární hodnota. Výsledkem takového porovnání je opět pole, tentokrát vytvořené porovnáním každého prvku zdrojového pole s&nbsp;jedinou skalární hodnotou:</p>

<pre>
a=numpy.arange(12)

a
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])

a==5
array([False, False, False, False,  True, False, False, False, False, False], dtype=bool)

a&lt;6
array([ True,  True,  True,  True,  True,  True, False, False, False,
       False, False, False], dtype=bool)
</pre>

<p>Podobně můžeme vytvořit &bdquo;Booleovská&ldquo; dvourozměrná pole:</p>

<pre>
m=numpy.arange(24)

m

array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23])

x=numpy.reshape(m, (6,4), order='F')

x&gt;10

array([[False, False,  True,  True],
       [False, False,  True,  True],
       [False, False,  True,  True],
       [False, False,  True,  True],
       [False, False,  True,  True],
       [False,  True,  True,  True]], dtype=bool)

x%2==1

array([[False, False, False, False],
       [ True,  True,  True,  True],
       [False, False, False, False],
       [ True,  True,  True,  True],
       [False, False, False, False],
       [ True,  True,  True,  True]], dtype=bool)
</pre>

<img class="alignnone size-medium wp-image-6960" src="http://mojefedora.cz/wp-content/uploads/2016/04/05-2-419x450.png" alt="05" width="419" height="450" />
<p><i>Obrázek 5: Porovnání dvojice jednorozměrných polí (vektorů).</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Výběr prvků pole na základě zadané podmínky</h2>

<p>K&nbsp;čemu však mohou být pole, která jsou výsledkem aplikace přetížených relačních operátorů, užitečná v&nbsp;praxi? Knihovna <i>Numpy</i> svým uživatelům ve skutečnosti nabízí ještě jednu důležitou metodu výběru prvků z&nbsp;polí. Jedná se o takzvanou filtraci, kdy se pro výběr prvku z&nbsp;jednoho pole použije jiné pole obsahující pouze pravdivostní hodnoty. V&nbsp;takovém případě se vrátí nové pole, ovšem pouze s&nbsp;těmi prvky, pro které platí pole2[index]==True. Podívejme se na typický demonstrační příklad:</p>

<pre>
a=numpy.arange(12)

a
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])

a&lt;6
array([ True,  True,  True,  True,  True,  True, False, False, False,
       False, False, False], dtype=bool)
</pre>

<p>Nyní na řadu přichází zmíněný trik: nové pole (které ovšem není uloženo do žádné proměnné) vytvořené operací a&lt;6, se použije pro &bdquo;filtraci&ldquo; původního pole:</p>

<pre>
a[a&lt;6]
array([0, 1, 2, 3, 4, 5])
</pre>

<img class="alignnone size-medium wp-image-6902" src="http://mojefedora.cz/wp-content/uploads/2016/04/17-1-418x450.png" alt="17" width="418" height="450" />
<p><i>Obrázek 6: Výběr prvků na základě &bdquo;Boolovského&ldquo; pole.</i></p>

<p>Podobně můžeme z&nbsp;pole získat jen sudé prvky:</p>

<pre>
a[a%2 == 0]
array([ 0,  2,  4,  6,  8, 10])
</pre>

<p>U dvourozměrných či vícerozměrných polí je situace poněkud složitější, protože výsledkem filtrace je jednorozměrné pole s&nbsp;vybranými (filtrovanými) prvky. Ostatně se o tom můžeme snadno přesvědčit:</p>

<pre>
m1=numpy.reshape(numpy.arange(100,125),(5,5))

m1
array([[100, 101, 102, 103, 104],
       [105, 106, 107, 108, 109],
       [110, 111, 112, 113, 114],
       [115, 116, 117, 118, 119],
       [120, 121, 122, 123, 124]])

m1[m1%2 == 0]
array([100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124])
</pre>

<p>Popř.&nbsp;pro pole se třemi dimenzemi:</p>

<pre>
d3=numpy.reshape(numpy.arange(0,27), (3,3,3))

d3
array([[[ 0,  1,  2],
        [ 3,  4,  5],
        [ 6,  7,  8]],

       [[ 9, 10, 11],
        [12, 13, 14],
        [15, 16, 17]],

       [[18, 19, 20],
        [21, 22, 23],
        [24, 25, 26]]])

d3[d3%3 == 1]
array([ 1,  4,  7, 10, 13, 16, 19, 22, 25])
</pre>

<img class="alignnone size-medium wp-image-6903" src="http://mojefedora.cz/wp-content/uploads/2016/04/18-1-418x450.png" alt="18" width="418" height="450" />
<p><i>Obrázek 7: Pole a relační operátory.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Matematické funkce aplikovatelné na prvky polí</h2>

<p>Vzhledem k&nbsp;tomu, že pro práci s&nbsp;poli byly přetíženy relační operátory, asi nás příliš nepřekvapí, že přetíženy byly i běžné aritmetické operátory. V&nbsp;knihovně <i>Numpy</i> není prakticky nic jednoduššího, než přičíst nějakou skalární hodnotu ke všem prvkům pole (resp.&nbsp;přesněji řečeno matice o rozměrech 5&times;5 prvků):</p>

<pre>
m=numpy.reshape(numpy.arange(25),(5,5))

m-10

array([[-10,  -9,  -8,  -7,  -6],
       [ -5,  -4,  -3,  -2,  -1],
       [  0,   1,   2,   3,   4],
       [  5,   6,   7,   8,   9],
       [ 10,  11,  12,  13,  14]])
</pre>

<p>Podobným způsobem lze použít i další aritmetické operace:</p>

<pre>
m*2

array([[ 0,  2,  4,  6,  8],
       [10, 12, 14, 16, 18],
       [20, 22, 24, 26, 28],
       [30, 32, 34, 36, 38],
       [40, 42, 44, 46, 48]])

m%2

array([[0, 1, 0, 1, 0],
       [1, 0, 1, 0, 1],
       [0, 1, 0, 1, 0],
       [1, 0, 1, 0, 1],
       [0, 1, 0, 1, 0]])
</pre>

<p>Kromě toho v&nbsp;knihovně <i>Numpy</i> nalezneme i množství běžných matematických (zejména goniometrických) funkcí upravených takovým způsobem, aby tyto funkce byly aplikovatelné na pole. Přesný popis těchto funkcí naleznete na stránce <a href="http://docs.scipy.org/doc/numpy/reference/routines.math.html">http://docs.scipy.org/doc/numpy/reference/routines.math.html</a>:</p>

<pre>
numpy.abs(m-10)

array([[10,  9,  8,  7,  6],
       [ 5,  4,  3,  2,  1],
       [ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14]])
</pre>

<p>Příklad použití goniometrické funkce sinus:</p>

<pre>
a=numpy.linspace(0, numpy.pi/2)

a
array([ 0.        ,  0.03205707,  0.06411414,  0.0961712 ,  0.12822827,
        0.16028534,  0.19234241,  0.22439948,  0.25645654,  0.28851361,
        0.32057068,  0.35262775,  0.38468481,  0.41674188,  0.44879895,
        0.48085602,  0.51291309,  0.54497015,  0.57702722,  0.60908429,
        0.64114136,  0.67319843,  0.70525549,  0.73731256,  0.76936963,
        0.8014267 ,  0.83348377,  0.86554083,  0.8975979 ,  0.92965497,
        0.96171204,  0.9937691 ,  1.02582617,  1.05788324,  1.08994031,
        1.12199738,  1.15405444,  1.18611151,  1.21816858,  1.25022565,
        1.28228272,  1.31433978,  1.34639685,  1.37845392,  1.41051099,
        1.44256806,  1.47462512,  1.50668219,  1.53873926,  1.57079633])

numpy.sin(a)
array([ 0.        ,  0.03205158,  0.06407022,  0.09602303,  0.12787716,
        0.1595999 ,  0.19115863,  0.22252093,  0.25365458,  0.28452759,
        0.31510822,  0.34536505,  0.375267  ,  0.40478334,  0.43388374,
        0.46253829,  0.49071755,  0.51839257,  0.5455349 ,  0.57211666,
        0.59811053,  0.6234898 ,  0.6482284 ,  0.67230089,  0.69568255,
        0.71834935,  0.740278  ,  0.76144596,  0.78183148,  0.80141362,
        0.82017225,  0.8380881 ,  0.85514276,  0.8713187 ,  0.88659931,
        0.90096887,  0.91441262,  0.92691676,  0.93846842,  0.94905575,
        0.95866785,  0.96729486,  0.97492791,  0.98155916,  0.98718178,
        0.99179001,  0.99537911,  0.99794539,  0.99948622,  1.        ])
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Sčítání, odčítání a násobení matic</h2>

<p>V&nbsp;případě, že uživatel vytvoří matice o stejné velikosti, lze takové matice sčítat či odčítat. Pokud se k&nbsp;matici přičte či odečte skalární hodnota (matice+10, matice-42), jedná se o operaci prováděnou s&nbsp;každým prvkem matice zvlášť (sčítají se prvky se shodným indexem či indexy):</p>

<pre>
m1=numpy.reshape(numpy.arange(25), (5,5))

m1

array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])

m2=m1-10

m2

array([[-10,  -9,  -8,  -7,  -6],
       [ -5,  -4,  -3,  -2,  -1],
       [  0,   1,   2,   3,   4],
       [  5,   6,   7,   8,   9],
       [ 10,  11,  12,  13,  14]])
</pre>

<p>Zajímavá situace nastane ve chvíli, kdy použijeme operátor *, tedy násobení. Nejprve se podívejme, jaký získáme výsledek při aplikaci &bdquo;obyčejného&ldquo; operátoru *:</p>

<pre>
m1*m1

array([[  0,   1,   4,   9,  16],
       [ 25,  36,  49,  64,  81],
       [100, 121, 144, 169, 196],
       [225, 256, 289, 324, 361],
       [400, 441, 484, 529, 576]])

m1*m2

array([[  0,  -9, -16, -21, -24],
       [-25, -24, -21, -16,  -9],
       [  0,  11,  24,  39,  56],
       [ 75,  96, 119, 144, 171],
       [200, 231, 264, 299, 336]])
</pre>

<p>Vidíme, že operátor * aplikovaný na matice ve skutečnosti vynásobil vždy příslušné prvky se shodnými indexy, chová se tedy podobně, jako operátory + a - (samozřejmě se provádí odlišná operace, ale princip výběru prvků zůstává stejný). Pokud budeme chtít provést skutečný maticový součin, je nutné namísto prosté aplikace operátoru * zavolat funkci <strong>numpy.dot(matice1, matice2)</strong>:</p>

<pre>
numpy.dot(m1,m1)

array([[ 150,  160,  170,  180,  190],
       [ 400,  435,  470,  505,  540],
       [ 650,  710,  770,  830,  890],
       [ 900,  985, 1070, 1155, 1240],
       [1150, 1260, 1370, 1480, 1590]])

numpy.dot(m1,m2)

array([[ 50,  60,  70,  80,  90],
       [ 50,  85, 120, 155, 190],
       [ 50, 110, 170, 230, 290],
       [ 50, 135, 220, 305, 390],
       [ 50, 160, 270, 380, 490]])

numpy.dot(m2,m1)

array([[-350, -390, -430, -470, -510],
       [-100, -115, -130, -145, -160],
       [ 150,  160,  170,  180,  190],
       [ 400,  435,  470,  505,  540],
       [ 650,  710,  770,  830,  890]])
</pre>

<p>Lepší bude si tuto operaci otestovat na menších maticích:</p>

<pre>
m1=numpy.array([[1,0],[0,1]])

m2=numpy.array([[1,2],[3,4]])

numpy.dot(m2,m1)
array([[1, 2],
       [3, 4]])

m3=numpy.array([[2,0],[0,1]])
numpy.dot(m2,m3)
array([[2, 2],
       [6, 4]])

numpy.dot(m3,m3)
array([[4, 0],
       [0, 1]])
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Výpočet determinantu a výpočet inverzní matice</h2>

<p>Často prováděnou maticovou operací je výpočet determinantu. Pro tento (ale samozřejmě nejenom pouze pro tento) účel byl do knihovny <i>Numpy</i> přidán submodul nazvaný <i>Numpy.linalg</i>, který je zapotřebí importovat samostatně:</p>

<pre>
import numpy
import numpy.linalg
</pre>

<p>Po úspěšném importu mají uživatelé k&nbsp;dispozici funkci nazvanou <strong>numpy.linalg.det</strong>, kterou je možné použít pro výpočet determinantu:</p>

<pre>
m=numpy.array([[0,1,0],[1,1,1],[0,1,1]])

m

array([[0, 1, 0],
       [1, 1, 1],
       [0, 1, 1]])

numpy.linalg.det(m)
-1.0
</pre>

<p>Další užitečnou funkcí, kterou v&nbsp;tomto submodulu nalezneme, je funkce pro výpočet inverzní matice. Tato funkce se jmenuje <strong>numpy.linalg.inv</strong> a její použití je snadné:</p>

<pre>
m=numpy.array([[0,1,0],[1,1,1],[0,1,1]])

numpy.linalg.inv(m)

array([[ 0.,  1., -1.],
       [ 1.,  0.,  0.],
       [-1.,  0.,  1.]])
</pre>

<p>Snadno si můžeme otestovat, že po vynásobení původní matice a matice inverzní dostaneme jednotkovou matici:</p>

<pre>
m2=numpy.linalg.inv(m)
numpy.dot(m,m2)

array([[ 1.,  0.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  0.,  1.]])
</pre>

<p>Při výpočtu se samozřejmě provádí kontroly, zda je možné inverzní matici vypočítat, tj.&nbsp;zda není původní matice singulární:</p>

<pre>
In [6]: m5
Out[6]: 
array([[100, 101, 102, 103, 104],
       [105, 106, 107, 108, 109],
       [110, 111, 112, 113, 114],
       [115, 116, 117, 118, 119],
       [120, 121, 122, 123, 124]])

m5inv=numpy.linalg.inv(m5)
---------------------------------------------------------------------------
LinAlgError                               Traceback (most recent call last)
&lt;ipython-input-7-aacc01ed4fc8&gt; in &lt;module&gt;()
----&gt; 1 m5inv=numpy.linalg.inv(m5)

/usr/lib/python3/dist-packages/numpy/linalg/linalg.py in inv(a)
    518     signature = 'D-&gt;D' if isComplexType(t) else 'd-&gt;d'
    519     extobj = get_linalg_error_extobj(_raise_linalgerror_singular)
--&gt; 520     ainv = _umath_linalg.inv(a, signature=signature, extobj=extobj)
    521     return wrap(ainv.astype(result_t))
    522 

/usr/lib/python3/dist-packages/numpy/linalg/linalg.py in _raise_linalgerror_singular(err, flag)
     88 
     89 def _raise_linalgerror_singular(err, flag):
---&gt; 90     raise LinAlgError("Singular matrix")
     91 
     92 def _raise_linalgerror_nonposdef(err, flag):

LinAlgError: Singular matrix
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vyřešení systému lineárních rovnic</h2>

<p>Další užitečnou funkcí (asi nejvíce pro studenty :-) je funkce nazvaná <strong>numpy.linalg.solve</strong>, která slouží pro vyřešení systému lineárních rovnic. Tato funkce akceptuje dva parametry &ndash; matici s&nbsp;koeficienty původních rovnic a vektor obsahující pravé strany původních rovnic. Nejprve se podívejme na triviální příklad jediné rovnice:</p>

<pre>
2x = 10
</pre>

<p>Matice s&nbsp;koeficienty obsahuje jediný prvek &ndash; dvojku. Vektor pravých stran obsahuje taktéž jediný prvek &ndash; 10. Řešení tedy získáme takto:</p>

<pre>
a=numpy.array([[2]])

b=numpy.array([10])

numpy.linalg.solve(a,b)
array([ 5.])
</pre>

<p>Důkaz, že je řešení x=5 správné, asi není zapotřebí provádět...</p>

<p>V&nbsp;případě soustavy dvou rovnic:</p>

<pre>
x + y = 2
x - y = 0
</pre>

<p>budeme postupovat následovně:</p>

<pre>
# matice koeficientů původních rovnic
# [1,1] znamená 1*x + 1*y
a=numpy.array([ [1,1] , [1,-1] ])

# matice pravých stran rovnic
b=numpy.array([2,0])

# výpočet
numpy.linalg.solve(a,b)
array([ 1.,  1.])
</pre>

<p>Dostali jsme podle očekávání výsledek x=1 a y=1.</p>

<p>Zadání posledního příkladu jsem získal z&nbsp;adresy <a href="http://www.matematika.cz/systemy-linearnich-rovnic">http://www.matematika.cz/systemy-linearnich-rovnic</a>:</p>

<p>
2x<sub>1</sub> + 3x<sub>2</sub> + 7x<sub>3</sub> = 47<br />
3x<sub>1</sub> + 8x<sub>2</sub> + x<sub>3</sub> = 50<br />
 3x<sub>2</sub> + 3x<sub>3</sub> = 27<br />
</p>

<p>Proveďme výpočet této soustavy:</p>

<pre>
a=numpy.array([[2,3,7],[3,8,1],[0,3,3]])

b=numpy.array([47,50,27])

numpy.linalg.solve(a,b)
array([ 2.,  5.,  4.])
</pre>

<p>Výsledek tedy je: x<sub>1</sub>=2, x<sub>2</sub>=5 a x<sub>3</sub>=4, což je ostatně možné si ověřit na výše uvedené adrese.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Předchozí části seriálu</h2>

<ol>

<li>Vývojová prostředí ve Fedoře (1. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-1-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-1-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (2. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-2-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-2-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (3. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-3-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-3-dil/</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">http://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: PyDev<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: PyDev (2.část)<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev-2-cast/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev-2-cast/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: IPython a IPython Notebook<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/</a>
</li>

</ol>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Systémy lineárních rovnic<br />
<a href="http://www.matematika.cz/systemy-linearnich-rovnic">http://www.matematika.cz/systemy-linearnich-rovnic</a>
</li>

<li>IPython homepage<br />
<a href="http://ipython.org/">http://ipython.org/</a>
</li>

<li>Dokumentace k IPythonu<br />
<a href="http://ipython.org/documentation.html#">http://ipython.org/documentation.html#</a>
</li>

<li>IPython Tutorial<br />
<a href="http://ipython.readthedocs.org/en/stable/interactive/tutorial.html">http://ipython.readthedocs.org/en/stable/interactive/tutorial.html</a>
</li>

<li>NumPy Home Page<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>NumPy v1.10 Manual<br />
<a href="http://docs.scipy.org/doc/numpy/index.html">http://docs.scipy.org/doc/numpy/index.html</a>
</li>

<li>NumPy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NumPy">https://en.wikipedia.org/wiki/NumPy</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>The cell magics in IPython<br />
<a href="http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb">http://nbviewer.jupyter.org/github/ipython/ipython/blob/1.x/examples/notebooks/Cell%20Magics.ipynb</a>
</li>

<li>0MQ Home Page<br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>Is IPython Notebook ever used as an IDE, or merely for presentations?<br />
<a href="https://www.reddit.com/r/IPython/comments/1uk7hp/is_ipython_notebook_ever_used_as_an_ide_or_merely/">https://www.reddit.com/r/IPython/comments/1uk7hp/is_ipython_notebook_ever_used_as_an_ide_or_merely/</a>
</li>

<li>The IDE as a Bad Programming Language Enabler <br />
<a href="https://dzone.com/articles/ide-bad-programming-language">https://dzone.com/articles/ide-bad-programming-language</a>
</li>

<li>Enhanced Interactive Python with IPython<br />
<a href="http://www.onlamp.com/pub/a/python/2005/01/27/ipython.html">http://www.onlamp.com/pub/a/python/2005/01/27/ipython.html</a>
</li>

<li>Direct mode<br />
<a href="https://en.wikipedia.org/wiki/Direct_mode">https://en.wikipedia.org/wiki/Direct_mode</a>
</li>

<li>Seznámení s&nbsp;Python IDE Spyder (článek vyšel zde na mojefedora.cz)<br />
<a href="http://mojefedora.cz/seznameni-s-python-ide-spyder/">http://mojefedora.cz/seznameni-s-python-ide-spyder/</a>
</li>

<li>Stránka s&nbsp;popisem různých IDE pro Python<br />
<a href="http://quintagroup.com/cms/python/ide">http://quintagroup.com/cms/python/ide</a>
</li>

<li>Eclipse (stránka o frameworku na Fedoraproject.org)<br />
<a href="https://fedoraproject.org/wiki/Eclipse">https://fedoraproject.org/wiki/Eclipse</a>
</li>

<li>PyDev (hlavní stránka)<br />
<a href="http://pydev.sourceforge.net/index.html">http://pydev.sourceforge.net/index.html</a>
</li>

<li>PyDev (download, v podstatě není zapotřebí)<br />
<a href="http://pydev.sourceforge.net/download.html">http://pydev.sourceforge.net/download.html</a>
</li>

<li>PyDev (stránka s metainformacemi o PyDev pluginu, použita v Eclipse)<br />
<a href="http://www.pydev.org/updates/">http://www.pydev.org/updates/</a>
</li>

<li>PyDev (stránka s pluginem, použita v Eclipse)<br />
<a href="https://dl.bintray.com/fabioz/pydev/4.5.4/">https://dl.bintray.com/fabioz/pydev/4.5.4/</a>
</li>

<li>Certifikát, který lze do Eclipse doinstalovat<br />
<a href="http://www.pydev.org/pydev_certificate.cer">http://www.pydev.org/pydev_certificate.cer</a>
</li>

<li>PyDev FAQ<br />
<a href="http://pydev.sourceforge.net/faq.html">http://pydev.sourceforge.net/faq.html</a>
</li>

<li>PyDev (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PyDev">https://en.wikipedia.org/wiki/PyDev</a>
</li>

<li>Python (oficiální stránky projektu)<br />
<a href="https://www.python.org/">https://www.python.org/</a>
</li>

<li>Jython<br />
<a href="http://www.jython.org/">http://www.jython.org/</a>
</li>

<li>IronPython<br />
<a href="http://ironpython.net/">http://ironpython.net/</a>
</li>

<li>Python 3.5.1 documentation<br />
<a href="https://docs.python.org/3/">https://docs.python.org/3/</a>
</li>

<li>PyDev: Unittest integration<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/</a>
</li>

<li>Continuous unit testing with Pydev (Python and Eclipse)<br />
<a href="http://stackoverflow.com/questions/1015581/continuous-unit-testing-with-pydev-python-and-eclipse">http://stackoverflow.com/questions/1015581/continuous-unit-testing-with-pydev-python-and-eclipse</a>
</li>

<li>Test-driven development<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

