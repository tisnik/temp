<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o projektu Redis si ukážeme další možnosti, které nám tento nástroj nabízí. Zaměříme se přitom jak na přímé použití konzole redis-cli, tak i na volání funkcí Redisu z Pythonu.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Odpovědi serveru vracející pole (<i>array</i>)</a></p>
<p><a href="#k03">*** 3. Hodnoty <strong>nil</strong></a></p>
<p><a href="#k04">*** 4. Podpora pro paradigma publish-subscribe v&nbsp;Redisu</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. Protokol použitý pro komunikaci se serverem</a></p>
<p><a href="#k15">*** 15. Odpověď obsahující jednoduchý řetězec</a></p>
<p><a href="#k16">*** 16. Odpověď vrácená serverem v&nbsp;případě chyby</a></p>
<p><a href="#k17">*** 17. Odpověď obsahující celé číslo (<i>integer</i>)</a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p><a href="">V&nbsp;úvodním článku o projektu Redis</a> jsme se seznámili se základními vlastnosti tohoto systému. Taktéž jsme si popsali základní datové typy, s&nbsp;nimiž tato databáze dokáže pracovat. V&nbsp;závěrečných kapitolách byl zmíněn způsob volání funkcí Redisu z&nbsp;aplikací vyvinutých v&nbsp;programovacím jazyku Python. Dnes budeme v&nbsp;popisu Redisu pokračovat &ndash; vše bude opět vysvětleno jak na příkladech spouštěných z&nbsp;interaktivní konzole Redisu, tak i z&nbsp;programů napsaných v&nbsp;Pythonu.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Odpovědi serveru vracející pole (<i>array</i>)</h2>

<p>Nejdříve si připomeneme, jakým způsobem se vlastně v&nbsp;interaktivní konzoli vypisuje seznam hodnot, protože právě se seznamy hodnot budeme často pracovat v&nbsp;dalším textu. Přímo v&nbsp;konzoli vytvoříme nový seznam, do něhož vložíme několik hodnot (prvků):</p>

<pre>
127.0.0.1:6379&gt; <strong>rpush seznam1 prvni</strong>
(integer) 1
127.0.0.1:6379&gt; <strong>rpush seznam1 druhy</strong>
(integer) 2
127.0.0.1:6379&gt; <strong>rpush seznam1 treti</strong>
(integer) 3
127.0.0.1:6379&gt; <strong>rpush seznam1 ctvrty</strong>
(integer) 4
</pre>

<p>Pokud budeme chtít získat větší množství hodnot (prvků) z&nbsp;tohoto seznamu, můžeme použít například příkaz <strong>lrange</strong> (<i>list range</i>), kterému zadáme nejnižší a nejvyšší index prvku:</p>

127.0.0.1:6379&gt; <strong>lrange seznam1 0 1000</strong>
1) "prvni"
2) "druhy"
3) "treti"
4) "ctvrty"

<p>Povšimněte si, jakým způsobem jsou v&nbsp;tomto případě jednotlivé prvky vráceny.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Hodnoty <strong>nil</strong></h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. Podpora pro paradigma publish-subscribe v&nbsp;Redisu</h2>

nejde o systém s frontami zpráv!
není zaručeno doručení
není ukládáno na disk

<table>
<tr><th></th><th></th></tr>
<tr><td>SUBSCRIBE</td><td></td></tr>
<tr><td>UNSUBSCRIBE</td><td></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>PSUBSCRIBE</td><td></td></tr>
<tr><td>PUNSUBSCRIBE</td><td></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>PUBLISH</td><td></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>PUBSUB</td><td></td></tr>
</table>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p>Příkazy, které jsme si popsali <a href="#k04">v&nbsp;předchozí kapitole</a>, si nyní můžeme poměrně snadno vyzkoušet. Vzhledem k&nbsp;tomu, že mezi sebou budou komunikovat dva klienti (v&nbsp;praxi dvě klientské aplikace), bude příklad používat trojici terminálů:</p>

<ol>
<li>V&nbsp;prvním terminálu bude spuštěn <strong>redis-server</strong>.</li>
<li>Ve druhém terminálu spustíme první konzoli Redisu.</li>
<li>Ve třetím terminálu spustíme druhou konzoli Redisu, takže ji budeme moci snadno ovládat nezávisle na konzoli první.</li>
</ol>

<pre>
$ <strong>redis-server redis.conf</strong>
</pre>

<pre>
$ <strong>redis-cli</strong>
</pre>

<pre>
$ <strong>redis-cli</strong>
</pre>

<pre>
127.0.0.1:6379&gt; <strong>subscribe kanal1</strong>
Reading messages... (press Ctrl-C to quit)
1) "subscribe"
2) "kanal1"
3) (integer) 1
1) "message"
2) "kanal1"
3) "zprava"
1) "message"
2) "kanal1"
3) "zprava"
</pre>

<pre>
127.0.0.1:6379&gt; <strong>publish kanal2 zprava</strong>
(integer) 0
127.0.0.1:6379&gt; <strong>publish kanal1 zprava</strong>
(integer) 1
127.0.0.1:6379&gt; <strong>publish kanal1 zprava</strong>
(integer) 1
127.0.0.1:6379&gt; <strong>publish kanal3 zprava</strong>
(integer) 0
</pre>

<pre>
^C
$ 
</pre>

<pre>
127.0.0.1:6379&gt; <strong>publish kanal1 zprava</strong>
(integer) 0
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Protokol použitý pro komunikaci se serverem</h2>

<p>Další zajímavou technologií, s&nbsp;nímž se můžete setkat, je samotný protokol použitý pro přenos dat mezi serverem Redisu a jednotlivými klienty, kteří se k&nbsp;serveru připojují. Tento protokol se jmenuje <i>RESP</i> neboli <i>REdis Serialization Protocol</i>. Tento protokol byl navržen s&nbsp;ohledem na to, aby byl:</p>

<ol>
<li>Jednoduchý na implementaci</li>
<li>Čitelný i pro člověka</li>
<li>Umožňující rychlý a efektivní parsing zpráv</li>
</ol>

<p>Se základním použitím tohoto protokolu (dotaz-odpověď) jsme se již seznámili a taktéž jsme si řekli, že existují dvě výjimky, kdy se dotaz-odpověď nepoužívá: <i>pipeline</i> a <i>Pub/Sub</i> kanály.</p>

<p>Samotný dotaz je reprezentován jedním textovým řádkem, ovšem zajímavější je formát odpovědi. Redis totiž musí klientovi oznámit, jaký typ dat vlastně vrací. Typ odpovědi je jednoznačně určen prvním znakem &ndash; viz též následující tabulku:</p>

<table>
<tr><th>První znak</th><th>Význam</th></tr>
<tr><td>+</td><td>vrací se jednoduchý řetězec, typicky nějaká zpráva</td></tr>
<tr><td>-</td><td>příkaz skončil z&nbsp;nějakého důvodu chybou</td></tr>
<tr><td>:</td><td>vrací se celé číslo</td></tr>
<tr><td>$</td><td>vrací se takzvaný Bulk String, což jsou ve skutečnosti binární data</td></tr>
<tr><td>*</td><td>vrací se pole</td></tr>
</table>



<p><a name="k15"></a></p>
<h2 id="k15">15. Odpověď obsahující jednoduchý řetězec</h2>

<p>Jednoduchý řetězec může obsahovat prakticky libovolné znaky s&nbsp;výjimkou konce řádku. Konec řetězce je rozpoznán podle dvojice znaků CR LF neboli "\r\n" (tato dvojice znaků bude považována za konec řádku na prakticky všech operačních systémech). Příkladem odpovědi serveru používající jednoduchý řetězec může být:</p>

<pre>
"+OK\r\n"
</pre>

<p><div class="rs-tip-major">Poznámka: uvozovky nejsou součástí řetězce.</div></p>

$ echo "flushall" | ncat localhost 6379 
+OK

$ echo "flushall async" | ncat localhost 6379 
+OK

$ echo "memory purge" | ncat localhost 6379 
+OK



<p><a name="k16"></a></p>
<h2 id="k16">16. Odpověď vrácená serverem v&nbsp;případě chyby</h2>

<p>V&nbsp;případě, že nějaký příkaz skončil s&nbsp;chybou, opět se vrací řetězec, ovšem jeho prvním znakem bude &bdquo;-&ldquo; a nikoli &bdquo;+&ldquo; (klient tedy může použít nějakou jednoduchou formu <strong>switch</strong>):</p>

<pre>
"-Chybova zprava\r\n"
</pre>

Příklad reálných chybových hlášení:

<pre>
"-ERR unknown command 'cmd'"
"-WRONGTYPE Operation against a key holding the wrong kind of value"
</pre>

$ echo "Ereš pikloš neméšči huňár scépeň kámoš" | ncat localhost 6379 
-ERR unknown command 'Ereš'

<p>Ve skutečnosti však mnoho příkazů nekončí chybovým hlášením, ale prostým zasláním celočíselné hodnoty typu 0 nebo 1.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Odpověď obsahující celé číslo (<i>integer</i>)</h2>

<p>Dalším typem odpovědi je odpověď obsahující celé číslo (délka seznamu atd.). To je přeneseno v&nbsp;textové podobě, takže jediný rozdíl oproti jednořádkovému řetězci nebo chybové zprávě představuje první znak, který u celočíselné odpovědi musí obsahovat dvojtečku. Opět si ukažme příklad:</p>

<pre>
":42\r\n"
</pre>

client1$ echo "incr citac" | ncat localhost 6379 
:1
client1$ echo "incr citac" | ncat localhost 6379 
:2

$ echo "llen seznam1" | ncat localhost 6379 
:4

client1$ echo "llen seznamX" | ncat localhost 6379 
:0




<p><a name="k18"></a></p>
<h2 id="k18">18. Odpověď s&nbsp;dlouhým řetězcem resp.&nbsp;blokem bajtů</h2>

Tento typ odpovědi začíná znakem &bdquo;$&ldquo;. Za tímto znakem je uvedena celková délka řetězce oddělená od zbytku odpovědi nám již známou dvojicí znaků CR LF. Délka reprezentuje počet <i>bajtů</i>, nikoli počet <i>znaků</i>. Následuje sekvence jednotlivých bajtů, která je ukončena znaky CR LF (ty jsou ve skutečnosti nadbytečné, neboť si klient může hlídat počet průběžně načítaných bajtů.

<pre>
"$4\r\ntest\r\n"
</pre>

<p>V&nbsp;případě, že je zapotřebí reprezentovat prázdný řetězec (což může být poměrně častý požadavek), pošle server následující sekvenci bajtů:</p>

<pre>
"$0\r\n\r\n"
</pre>

<p>Tento typ odpovědi navíc může být použit v&nbsp;těch případech, kdy server vrací hodnotu s&nbsp;významem <strong>Null</strong> (žádná požadovaná hodnota neexistuje). Taková odpověď je reprezentována řetězcem, jehož délka je rovna -1. Povšimněte si, že takový řetězec se od prázdného řetězce odlišuje mj.&nbsp;i v&nbsp;tom, že neobsahuje druhou dvojici znaků CR LF:</p>

<pre>
"$-1\r\n"
</pre>
$ echo "client list" | ncat localhost 6379 
$148
id=14 addr=127.0.0.1:54950 fd=9 name= age=0 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=32768 obl=0 oll=0 omem=0 events=r cmd=client

$ echo "lrange seznam1 0 1000" | ncat localhost 6379 
*4
$5
prvni
$5
druhy
$5
treti
$6
ctvrty



<p><a name="k19"></a></p>
<h2 id="k19">19. Odpověď obsahující pole hodnot</h2>

<p>Nejsložitější je poslední typ odpovědi, kterou server vrací pole hodnot. Tato odpověď začíná znakem &bdquo;*&ldquo;, za nímž následuje počet prvků pole, který je opět ukončen dvojicí znaků CR LF. Za těmito znaky následují jednotlivé prvky pole zakódované způsobem popsaným v&nbsp;předchozích kapitolách (řetězec, celočíselná hodnota, bulk string atd.).</p>

<p>Nejjednodušší je samozřejmě prázdné pole, které má nulový počet prvků. Takové pole je serverem vráceno ve formátu:</p>

<pre>
"*0\r\n"
</pre>

<p>Ukažme si ještě další typy polí. Pokud se má vrátit pole s&nbsp;několika řetězci typu Bulk String (zde konkrétně se třemi řetězci), pošle server následující odpověď:</p>

<pre>
"*3\r\n$5\r\nprvni\r\n$5\r\ndruhy\r\n$5\r\ntreti\r\n"
</pre>

<p>Neboli v&nbsp;čitelnější podobě po přepisu znaků CR LF za konec řádku:</p>

<pre>
*3
$5
prvni
$5
druhy
$5treti
</pre>

<pre>
"*3\r\n:1\r\n:2\r\n:3\r\n"
</pre>

<pre>
*3
:10
:20
:30
</pre>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránky projektu Redis<br />
<a href="https://redis.io/">https://redis.io/</a>
</li>

<li>Introduction to Redis<br />
<a href="https://redis.io/topics/introduction">https://redis.io/topics/introduction</a>
</li>

<li>Try Redis<br />
<a href="http://try.redis.io/">http://try.redis.io/</a>
</li>

<li>Redis tutorial, April 2010 (starší, ale pěkně udělaný)<br />
<a href="https://static.simonwillison.net/static/2010/redis-tutorial/">https://static.simonwillison.net/static/2010/redis-tutorial/</a>
</li>

<li>Python Redis<br />
<a href="https://redislabs.com/lp/python-redis/">https://redislabs.com/lp/python-redis/</a>
</li>

<li>Redis: key-value databáze v paměti i na disku<br />
<a href="https://www.zdrojak.cz/clanky/redis-key-value-databaze-v-pameti-i-na-disku/">https://www.zdrojak.cz/clanky/redis-key-value-databaze-v-pameti-i-na-disku/</a>
</li>

<li>Praktický úvod do Redis (1): vaše distribuovaná NoSQL cache<br />
<a href="http://www.cloudsvet.cz/?p=253">http://www.cloudsvet.cz/?p=253</a>
</li>

<li>Praktický úvod do Redis (2): transakce<br />
<a href="http://www.cloudsvet.cz/?p=256">http://www.cloudsvet.cz/?p=256</a>
</li>

<li>Praktický úvod do Redis (3): cluster<br />
<a href="http://www.cloudsvet.cz/?p=258">http://www.cloudsvet.cz/?p=258</a>
</li>

<li>Connection pool<br />
<a href="https://en.wikipedia.org/wiki/Connection_pool">https://en.wikipedia.org/wiki/Connection_pool</a>
</li>

<li>Instant Redis Sentinel Setup<br />
<a href="https://github.com/ServiceStack/redis-config">https://github.com/ServiceStack/redis-config</a>
</li>

<li>How to install REDIS in LInux<br />
<a href="https://linuxtechlab.com/how-install-redis-server-linux/">https://linuxtechlab.com/how-install-redis-server-linux/</a>
</li>

<li>Redis RDB Dump File Format<br />
<a href="https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format">https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format</a>
</li>

<li>Lempel–Ziv–Welch<br />
<a href="https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch">https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch</a>
</li>

<li>Redis Persistence<br />
<a href="https://redis.io/topics/persistence">https://redis.io/topics/persistence</a>
</li>

<li>Redis persistence demystified<br />
<a href="http://oldblog.antirez.com/post/redis-persistence-demystified.html">http://oldblog.antirez.com/post/redis-persistence-demystified.html</a>
</li>

<li>Redis reliable queues with Lua scripting<br />
<a href="http://oldblog.antirez.com/post/250">http://oldblog.antirez.com/post/250</a>
</li>

<li>Ost (knihovna)<br />
<a href="https://github.com/soveran/ost">https://github.com/soveran/ost</a>
</li>

<li>NoSQL<br />
<a href="https://en.wikipedia.org/wiki/NoSQL">https://en.wikipedia.org/wiki/NoSQL</a>
</li>

<li>Shard (database architecture)<br />
<a href="https://en.wikipedia.org/wiki/Shard_%28database_architecture%29">https://en.wikipedia.org/wiki/Shard_%28database_architecture%29</a>
</li>

<li>What is sharding and why is it important?<br />
<a href="https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important">https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important</a>
</li>

<li>What Is Sharding?<br />
<a href="https://btcmanager.com/what-sharding/">https://btcmanager.com/what-sharding/</a>
</li>

<li>Redis clients<br />
<a href="https://redis.io/clients">https://redis.io/clients</a>
</li>

<li>Category:Lua-scriptable software<br />
<a href="https://en.wikipedia.org/wiki/Category:Lua-scriptable_software">https://en.wikipedia.org/wiki/Category:Lua-scriptable_software</a>
</li>

<li>Seriál Programovací jazyk Lua<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-lua/">https://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Redis memory usage<br />
<a href="http://nosql.mypopescu.com/post/1010844204/redis-memory-usage">http://nosql.mypopescu.com/post/1010844204/redis-memory-usage</a>
</li>

<li>Ukázka konfigurace Redisu pro lokální testování<br />
<a href="https://github.com/tisnik/presentations/blob/master/redis/redis.conf">https://github.com/tisnik/presentations/blob/master/redis/redis.conf</a>
</li>

<li>Resque<br />
<a href="https://github.com/resque/resque">https://github.com/resque/resque</a>
</li>

<li>Nested transaction<br />
<a href="https://en.wikipedia.org/wiki/Nested_transaction">https://en.wikipedia.org/wiki/Nested_transaction</a>
</li>

<li>Publish–subscribe pattern<br />
<a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern</a>
</li>

<li>Messaging pattern<br />
<a href="https://en.wikipedia.org/wiki/Messaging_pattern">https://en.wikipedia.org/wiki/Messaging_pattern</a>
</li>

<li>Using pipelining to speedup Redis queries<br />
<a href="https://redis.io/topics/pipelining">https://redis.io/topics/pipelining</a>
</li>

<li>Pub/Sub<br />
<a href="https://redis.io/topics/pubsub">https://redis.io/topics/pubsub</a>
</li>

<li>ZeroMQ distributed messaging<br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>Publish/Subscribe paradigm: Why must message classes not know about their subscribers?<br />
<a href="https://stackoverflow.com/questions/2908872/publish-subscribe-paradigm-why-must-message-classes-not-know-about-their-subscr">https://stackoverflow.com/questions/2908872/publish-subscribe-paradigm-why-must-message-classes-not-know-about-their-subscr</a>
</li>

<li>Python &amp; Redis PUB/SUB<br />
<a href="https://medium.com/@johngrant/python-redis-pub-sub-6e26b483b3f7">https://medium.com/@johngrant/python-redis-pub-sub-6e26b483b3f7</a>
</li>

<li>Message broker<br />
<a href="https://en.wikipedia.org/wiki/Message_broker">https://en.wikipedia.org/wiki/Message_broker</a>
</li>

<li>RESP Arrays<br />
<a href="https://redis.io/topics/protocol#array-reply">https://redis.io/topics/protocol#array-reply</a>
</li>

<li>Redis Protocol specification<br />
<a href="https://redis.io/topics/protocol">https://redis.io/topics/protocol</a>
</li>

<li>Redis Pub/Sub: Intro Guide<br />
<a href="https://www.redisgreen.net/blog/pubsub-intro/">https://www.redisgreen.net/blog/pubsub-intro/</a>
</li>

<li>Redis Pub/Sub: Howto Guide<br />
<a href="https://www.redisgreen.net/blog/pubsub-howto/">https://www.redisgreen.net/blog/pubsub-howto/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

