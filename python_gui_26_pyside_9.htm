<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba GUI v Pythonu s využitím frameworku PySide: použití cest při kreslení 2D scén</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba GUI v Pythonu s využitím frameworku PySide: použití cest při kreslení 2D scén</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V devátém článku věnovaném tvorbě grafického uživatelského rozhraní v Pythonu s využitím frameworku PySide se budeme zabývat popisem cest (paths), které se v PySide používají pro kreslení složitějších 2D scén mj. s využitím Bézierových křivek a množinových operací aplikovaných na cesty.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba GUI v&nbsp;Pythonu s&nbsp;využitím frameworku PySide: použití cest při kreslení 2D scén</a></p>
<p><a href="#k02">2. Koncepty, na nichž je založen objekt typu <strong>QPainterPath</strong></a></p>
<p><a href="#k03">3. Základní příkazy určené pro vytvoření cesty</a></p>
<p><a href="#k04">4. První demonstrační příklad: vytvoření a vykreslení jednoduché cesty složené z&nbsp;úsečkových segmentů</a></p>
<p><a href="#k05">5. Kvadratické Bézierovy křivky</a></p>
<p><a href="#k06">6. Kubické Bézierovy křivky</a></p>
<p><a href="#k07">7. Druhý demonstrační příklad: vytvoření cest složených z&nbsp;kvadratických a kubických Bézierových křivek</a></p>
<p><a href="#k08">8. Tvorba vyplněných cest s&nbsp;využitím konstantní barvy, gradientu nebo textury</a></p>
<p><a href="#k09">9. Třetí demonstrační příklad: vykreslení vyplněných cest</a></p>
<p><a href="#k10">10. Množinové operace aplikované na cesty</a></p>
<p><a href="#k11">11. Sjednocení</a></p>
<p><a href="#k12">12. Rozdíl</a></p>
<p><a href="#k13">13. Průnik</a></p>
<p><a href="#k14">14. Symetrická diference</a></p>
<p><a href="#k15">15. Demonstrační příklad: množinové operace aplikované na cesty</a></p>
<p><a href="#k16">16. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k17">17. Obsah následující části seriálu</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba GUI v&nbsp;Pythonu s&nbsp;využitím frameworku PySide: použití cest při kreslení 2D scén</h2>

<p>V&nbsp;dnešním článku o frameworku <i>PySide</i> se budeme zabývat popisem
konceptu takzvaných cest (<i>paths</i>), protože z&nbsp;cest jsou složeny
prakticky všechny složitěji tvarované dvourozměrné objekty, ať již se jedná o
objekty otevřené (úsečky, polyčáry/lomené čáry, oblouky či křivky) či naopak
objekty uzavřené (kruh, elipsa, obdélník, vyplněné mnohoúhelníky apod.). Každá
cesta se skládá z&nbsp;prakticky libovolného množství takzvaných segmentů
(<i>segments</i>), přičemž je zajímavé, že jednotlivé segmenty na sebe mohou,
ale také nemusí navazovat (cesta tedy může obsahovat &bdquo;skoky&ldquo;).
Použití cest v&nbsp;2D grafice samozřejmě není nic nového; spíš by se dalo
říci, že se jedná o dlouhým časem prověřenou technologii použitou například <a
href="http://www.root.cz/clanky/vytvarime-krivky-v-postscriptu/">v&nbsp;PostScriptu</a>
či <a
href="http://www.root.cz/clanky/vlastnosti-cest-a-zakladnich-geometrickych-tvaru-v-svg/">v&nbsp;SVG</a>
(PostScript lze přitom chápat jako souborový formát, programovací jazyk a
současně i vykreslovací knihovnu).</p>

<a href="http://www.root.cz/obrazek/241572/"><img src="https://i.iinfo.cz/images/224/openvg1-1.png" class="image-241572" alt="&#160;" width="125" height="170" /></a>
<p><i>Obrázek 1: Příklad cesty vytvořené z&nbsp;několika úsečkových
(lineárních) segmentů a s&nbsp;nastaveným režimem vyplňování.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Koncepty, na nichž je založen objekt typu <strong>QPainterPath</strong></h2>

<p>Cesty jsou ve frameworku <i>PySide</i> představovány instancemi třídy
pojmenované <strong>QPainterPath</strong>. Jak jsme si již řekli <a
href="#k01">v&nbsp;úvodní kapitole</a>, může se každá cesta skládat
z&nbsp;libovolného množství segmentů, přičemž segmentem může být úsečka,
kvadratická Bézierova křivka, kubická Bézierova křivka, kruhový oblouk,
eliptický oblouk, mnohoúhelník, text, elipsa či obdélník se zaoblenými hranami.
Uzavřené segmenty cest tvoří takzvané podcesty (<i>subpath</i>); v&nbsp;případě
potřeby je možné podcesty vytvořit programově pomocí metod
<strong>moveTo</strong> a <strong>closeSubpath</strong>.</p>

<p>Pokud navíc máme vytvořeno několik cest, lze je pomocí množinových operací
skládat a vytvořit tak novou cestu s&nbsp;využitím operace sjednocení, průniku,
rozdílu a nepřímo také symetrické diference. Na vytvořenou cestu je také možné
aplikovat vybranou lineární transformaci, což znamená, že celý 2D objekt lze
snadno přesunout, otočit, zkosit nebo změnit jeho měřítko, a to bez nutnosti
ručního přepočtu jednotlivých vrcholů. V&nbsp;dalších kapitolách se setkáme se
všemi těmito koncepty.</p>

<p>Samotné vytvoření (prázdné) cesty a její následné vykreslení je snadné. Celý
postup vypadá zhruba následovně:</p>

<pre>
<i># vytvoření objektu typu QPainter s předáním</i>
<i># reference na "pokreslovaný" objekt</i>
qp = QtGui.QPainter(self.image)
&nbsp;
<i># vytvoření cesty</i>
path = <strong>QtGui.QPainterPath()</strong>
...
...
...
&nbsp;
<i># vytvoření pera a nastavení barvy kreslení</i>
pen = QtGui.QPen(QtGui.QColor(255, 0, 0))
&nbsp;
<i># kreslit se bude právě vytvořeným perem</i>
qPainter.setPen(pen)
&nbsp;
<i># vykreslení cesty</i>
<strong>qPainter.drawPath(path)</strong>
</pre>

<img src="https://i.iinfo.cz/images/600/beziers-1.png" class="image-256831" alt="&#160;" height="238" width="403" />
<p><i>Obrázek 2: Cesta složená ze dvou kvadratických Bézierových
křivek.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Základní příkazy určené pro vytvoření cesty</h2>

<p>Třída <strong>QPainterPath</strong> programátorům nabízí poměrně velké
množství příkazů určených pro definici segmentů cest. Jednotlivé typy segmentů
budou podrobněji popsány v&nbsp;navazujících kapitolách, proto si zde pouze
uveďme jednotlivé metody a jejich význam:</p>

<table>
<tr><th> #</th><th>Metoda</th><th>Stručný popis</th></tr>
<tr><td> 1</td><td>closeSubpath</td><td>uzavření podcesty nakreslením úsečky do jejího počátečního vrcholu</td></tr>
<tr><td> 2</td><td>moveTo</td><td>přesun aktivního bodu bez kreslení</td></tr>
<tr><td> 3</td><td>lineTo</td><td>lineární segment (úsečka)</td></tr>
<tr><td> 4</td><td>quadTo</td><td>kvadratická Bézierova křivka</td></tr>
<tr><td> 5</td><td>cubicTo</td><td>kubická Bézierova křivka</td></tr>
<tr><td> 6</td><td>arcTo</td><td>kruhový či eliptický oblouk</td></tr>
<tr><td> 7</td><td>arcMoveTo</td><td>přesun po kruhovém či eliptickém oblouku</td></tr>
<tr><td> 8</td><td>addEllipse</td><td>přidání podcesty ve tvaru elipsy</td></tr>
<tr><td> 9</td><td>addRect</td><td>přidání podcesty ve tvaru obdélníku</td></tr>
<tr><td>10</td><td>addRoundRect</td><td>přidání podcesty ve tvaru obdélníku se zaoblenými hranami</td></tr>
<tr><td>11</td><td>addPolygon</td><td>přidání podcesty ve tvaru polygonu</td></tr>
<tr><td>12</td><td>addText</td><td>přidání podcesty složené z&nbsp;textu (křivek znaků)</td></tr>
<tr><td>13</td><td>addPath</td><td>přidání další cesty ke stávající cestě (propojení pomocí úsečky)</td></tr>
<tr><td>14</td><td>addRegion</td><td>přidání regionu (oblasti) do cesty. Viz druhá část článku</td></tr>
</table>

<p>Doplňme si nyní úryvek kódu ze druhé kapitoly o příkazy, které vykreslí
domek jedním tahem. Pro tento účel nám poslouží metody <strong>moveTo</strong>
(přesun do počátečního bodu kreslení) a <strong>lineTo</strong> (kreslení
úsečkového segmentu):</p>

<pre>
<i># vytvoření objektu typu QPainter s předáním</i>
<i># reference na "pokreslovaný" objekt</i>
qp = QtGui.QPainter(self.image)
&nbsp;
<i># vytvoření cesty</i>
path = <strong>QtGui.QPainterPath()</strong>
<i># nakreslení domku jedním tahem</i>
<strong>path.moveTo(100, 200)</strong>
<strong>path.lineTo(200, 200)</strong>
<strong>path.lineTo(100, 100)</strong>
<strong>path.lineTo(100, 200)</strong>
<strong>path.lineTo(200, 100)</strong>
<strong>path.lineTo(100, 100)</strong>
<strong>path.lineTo(150,  50)</strong>
<strong>path.lineTo(200, 100)</strong>
<strong>path.lineTo(200, 200)</strong>
&nbsp;
<i># vytvoření pera a nastavení barvy kreslení</i>
pen = QtGui.QPen(QtGui.QColor(255, 0, 0))
&nbsp;
<i># kreslit se bude právě vytvořeným perem</i>
qPainter.setPen(pen)
&nbsp;
<i># vykreslení cesty</i>
qPainter.drawPath(path)
</pre>

<img src="https://i.iinfo.cz/images/458/pyside9-1.png" class="image-318878" alt="&#160;" width="302" height="317" />
<p><i>Obrázek 3: Domek vykreslený předchozím úryvkem kódu.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. První demonstrační příklad: vytvoření a vykreslení jednoduché cesty složené z&nbsp;úsečkových segmentů</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázán způsob vykreslení
jednoduché cesty složené pouze z&nbsp;úsečkových segmentů. Z&nbsp;úseček je
vykreslen domek jedním tahem (viz <a href="#k03">předchozí kapitolu</a>), takže
výsledek je podobný příkladu z&nbsp;předchozí části tohoto seriálu, v&nbsp;níž
jsme si ukázali podobný příklad, v&nbsp;němž však byla použita
&bdquo;pouze&ldquo; polyčára (lomená čára), jejíž možnosti jsou menší, než
možnosti objektů typu <i>cesta</i>:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nastavení barvy kreslení (pera) na zadanou barvu</i>
def <strong>setColor</strong>(qPainter, color):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
&nbsp;
<i># vytvoření cesty</i>
def <strong>createPath</strong>():
    path = QtGui.QPainterPath()
    path.moveTo(100, 200)
    path.lineTo(200, 200)
    path.lineTo(100, 100)
    path.lineTo(100, 200)
    path.lineTo(200, 100)
    path.lineTo(100, 100)
    path.lineTo(150,  50)
    path.lineTo(200, 100)
    path.lineTo(200, 200)
    return path
&nbsp;
&nbsp;
<i># funkce pro vykreslení cesty zadanou barvou</i>
def <strong>drawPath</strong>(qPainter, color, path):
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení cesty</i>
    qPainter.drawPath(path)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 300
    IMAGE_HEIGHT = 250
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># vytvoření cesty</i>
        path = createPath()
&nbsp;
        <i># vykreslení cesty</i>
        drawPath(qp, YELLOW, path)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Kvadratické Bézierovy křivky</h2>

<p>Při tvorbě cest jsou podporovány jak kvadratické, tak i kubické Bézierovy
křivky, což je jen dobře, protože kvadratické křivky jsou často používány
například při definici fontů zatímco křivky kubické najdeme například
v&nbsp;mnoha vektorových grafických editorech a tím pádem i v&nbsp;souborech
exportovaných z&nbsp;těchto nástrojů. Bézierovy kvadratické křivky jsou určeny
pouze jedním řídicím bodem a dvojicí bodů kotvicích (koncových). Křivka
prochází prvním a třetím bodem (kotvicí body), druhý bod (řídicí) určuje
současně oba tečné vektory. Ukázka Bézierovy kvadratické křivky spolu
s&nbsp;jejími určujícími body je zobrazena na čtvrtém obrázku:</p>

<img alt="404" width="400" height="300" src="http://i.iinfo.cz/urs/40_4-117932623830727.png" />
<p><i>Obrázek 4: Bézierova kvadratická křivka zadaná dvojicí kotvicích bodů a
jedním bodem řídicím.</i></p>

<p>Následuje příklad cesty s&nbsp;jedinou Bézierovou kvadratickou křivkou.
Povšimněte si nutnosti použít metody <strong>moveTo</strong> pro specifikaci
počátečního bodu křivky:</p>

<pre>
<i># vytvoření cesty složené z jediné kvadratické Bézierovy křivky</i>
def <strong>createPath1</strong>():
    path = QtGui.QPainterPath()
    path.moveTo(10, 100)
    path.quadTo(50, 10, 90, 100)
    return path
</pre>

<p>Hladké napojení Bézierových kvadratických křivek lze zajistit zadáním
identického koncového bodu první křivky a počátečního bodu křivky druhé.
Současně musí být shodné tečné vektory v&nbsp;těchto bodech,
tj.&nbsp;prostřední (řídicí) body musí být středově symetrické okolo společného
bodu obou křivek.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Kubické Bézierovy křivky</h2>

<p>Kubické Bézierovy křivky většina uživatelů používajících vektorové grafické
editory již pravděpodobně velmi dobře zná (ale nalezneme je i v&nbsp;rastrových
grafických editorech, například v&nbsp;GIMPu). Připomeňme si tedy, že tyto
křivky jsou definovány počátečním bodem, koncovým bodem a dvojicí řídicích bodů
(těmi křivka obecně neprochází, tyto body však ovlivňují její tvar). Větší
množství řídicích bodů dává uživatelům i větší možnosti tvarování křivky,
protože je možné vytvořit i esíčko, smyčku atd. Ve frameworku <i>PySide</i> se
tyto křivky (resp.&nbsp;segmenty složené z&nbsp;kubických Bézierových křivek)
přidávají do cesty pomocí metody <strong>cubicTo</strong>, přičemž tato metoda
očekává tři body popř.&times;šestici souřadnic, protože počáteční bod již známe
&ndash; je jím dočasný poslední bod aktuálně vytvářené cesty.</p>

<img alt="403" width="400" height="300" src="http://i.iinfo.cz/urs/40_3-117932622699099.png" />
<p><i>Obrázek 5: Bézierova kubická křivka zadaná dvojicí kotvicích (koncových)
bodů a dvojicí bodů řídicích.</i></p>

<p>Následuje příklad cesty s&nbsp;jedinou Bézierovou kubickou křivkou. Opět si
povšimněte nutnosti použít metody <strong>moveTo</strong> pro specifikaci
počátečního bodu křivky:</p>

<pre>
<i># vytvoření cesty složené z jediné kubické Bézierovy křivky</i>
def <strong>createPath</strong>():
    path = QtGui.QPainterPath()
    path.moveTo(10, 100)
    path.quadTo(50, 10, 90, 100)
    return path
</pre>

<img alt="405" width="400" height="300" src="http://i.iinfo.cz/urs/40_5-117932624892835.png" />
<p><i>Obrázek 6: Rozdíl mezi kvadratickými a kubickými Bézierovými křivkami.</i></p>

<p>Poznámka: Bézierovy kubické křivky jsou v&nbsp;počítačové grafice velmi
rozšířeny. Mezi jejich hlavní východy patří intuitivní zadávání a snadné hladké
navazování křivek na sebe. Také výpočet bodů, které leží na křivce, je velmi
jednoduchý a rychlý. Pomocí Bézierových kubických křivek však nelze přesně
modelovat kuželosečky, zejména kruh a elipsu, což omezuje použití těchto křivek
v&nbsp;CAD systémech. Také nelze k&nbsp;obecné Bézierově kubice vytvořit
offsetovou křivku, tj.&nbsp;křivku, která se od zadané křivky nachází
v&nbsp;určité vzdálenosti. Toto omezení se teoreticky může projevit i
v&nbsp;komerční grafice (doména programů typu &bdquo;Illustrator&ldquo;), ale
je nutno říci, že chyba vzniklá použitím Bézierových křivek bývá velmi malá,
mnohdy pod rozlišovací schopností lidského oka (opět však platí, že pro přesné
CAD a CAM je nutné přijít s&nbsp;přesnějším řešením). Většinou postačí
(automatické) rozdělení Bézierovy křivky, která má tvořit offsetovou cestu, na
více částí, čímž se získá i větší množství řídicích bodů, se kterými je možné
manipulovat. Tuto funkci však přímo v&nbsp;PySide nenajdeme.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Druhý demonstrační příklad: vytvoření cest složených z&nbsp;kvadratických a kubických Bézierových křivek</h2>

<p>V&nbsp;dnešním druhém demonstračním příkladu je ukázán způsob použití výše
zmíněných metod <strong>cubicTo</strong> a <strong>quadTo</strong> pro
vytvoření několika cest složených z&nbsp;Bézierových kvadratických a kubických
křivek. Po spuštění tohoto příkladu by se mělo zobrazit toto okno:</p>

<img src="https://i.iinfo.cz/images/458/pyside9-2.png" class="image-318879" alt="&#160;" width="342" height="367" />
<p><i>Obrázek 7: Okno s&nbsp;vykreslenými křivkami získanými druhým
demonstračním příkladem.</i></p>

<p>Následuje výpis zdrojového kódu příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nastavení barvy kreslení (pera) na zadanou barvu</i>
def <strong>setColor</strong>(qPainter, color):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
&nbsp;
<i># vytvoření cesty složené z kvadratických křivek</i>
def <strong>createPath1</strong>():
    path = QtGui.QPainterPath()
    path.moveTo(10, 100)
    path.quadTo(50, 10, 90, 100)
    path.quadTo(130, 190, 170, 100)
    path.quadTo(210, 10, 250, 100)
    path.quadTo(290, 190, 330, 100)
    return path
&nbsp;
&nbsp;
<i># vytvoření cesty z kubických křivek</i>
def <strong>createPath2</strong>():
    path = QtGui.QPainterPath()
    path.moveTo(10, 250)
    path.cubicTo(120, 100,
                 -20, 100,
                  90, 250)
    return path
&nbsp;
&nbsp;
<i># vytvoření cesty z kubických křivek</i>
def <strong>createPath3</strong>():
    path = QtGui.QPainterPath()
    path.moveTo(150, 200)
    path.cubicTo(225,  50,
                 225, 350,
                 300, 200)
    return path
&nbsp;
&nbsp;
<i># funkce pro vykreslení cesty zadanou barvou</i>
def <strong>drawPath</strong>(qPainter, color, path):
    <i># nastavení barvy</i>
    setColor(qPainter, color)
&nbsp;
    <i># vykreslení cesty</i>
    qPainter.drawPath(path)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 340
    IMAGE_HEIGHT = 300
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># vytvoření cesty</i>
        path1 = createPath1()
&nbsp;
        <i># vykreslení cesty</i>
        drawPath(qp, GREEN, path1)
&nbsp;
        <i># vytvoření cesty</i>
        path2 = createPath2()
&nbsp;
        <i># vykreslení cesty</i>
        drawPath(qp, YELLOW, path2)
&nbsp;
        <i># vytvoření cesty</i>
        path3 = createPath3()
&nbsp;
        <i># vykreslení cesty</i>
        drawPath(qp, MAGENTA, path3)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Tvorba vyplněných cest s&nbsp;využitím konstantní barvy, gradientu nebo textury</h2>

<p>Již z&nbsp;předchozích kapitol víme, že cesty mohou tvořit buď uzavřené
tvary, nebo se jedná o cesty složené z&nbsp;liniových segmentů. Pokud při
kresbě cesty vybereme neprůhledný (viditelný) štětec, budou uzavřené tvary
tímto štětcem jednoduše vyplněny. U cesty tvořených liniovými segmenty také
dojde k&nbsp;vyplnění, a to takovým způsobem, že se cesta (či jednotlivé
izolované segmenty) automaticky uzavřou úsečkou spojující konec cesty
s&nbsp;jejím začátkem. V&nbsp;takové situaci může dojít k&nbsp;tomu, že se
některé hrany tvořící hranici cesty mohou protínat. Podívejme se na tři
příklady ukazující, jakým způsobem k&nbsp;vyplnění cest dojde.</p>

<p>V&nbsp;prvním příkladu je cesta tvořena jen dvěma úsečkovými segmenty
zobrazenými širší zelenou stopou:</p>

<pre>
path = QtGui.QPainterPath()
path.moveTo(50, 50)
path.lineTo(50, 150)
path.lineTo(150, 150)
</pre>

<p>Výsledek vykreslení cesty vyplněné lineárním gradientem:</p>

<img src="https://i.iinfo.cz/images/458/pyside9-3.png" class="image-318880" alt="&#160;" width="170" height="156" />
<p><i>Obrázek 8: Cesta tvořená jen dvěma úsečkovými segmenty, která byla
vyplněna lineárním gradientem.</i></p>

<p>Ve druhém příkladu je cesta opět otevřená a tvoří ji protínající se úsečky
tvořící hvězdu (ovšem povšimněte si chybějící hrany):</p>

<pre>
<i># výpočet souřadnic n-tého vrcholu hvězdy</i>
def starVertex(cx, cy, radius, n):
    angle = math.radians(n*144)
    return cx + radius * math.sin(angle), cy - radius * math.cos(angle)
&nbsp;
path = QtGui.QPainterPath()
path.moveTo(*starVertex(140, 140, 120, 0))
path.lineTo(*starVertex(140, 140, 120, 1))
path.lineTo(*starVertex(140, 140, 120, 2))
path.lineTo(*starVertex(140, 140, 120, 3))
path.lineTo(*starVertex(140, 140, 120, 4))
</pre>

<p>Výsledek vykreslení cesty vyplněné radiálním gradientem:</p>

<img src="https://i.iinfo.cz/images/458/pyside9-4.png" class="image-318881" alt="&#160;" width="273" height="260" />
<p><i>Obrázek 9: Cesta tvořená hranami hvězdy.</i></p>

<p>V&nbsp;posledním příkladu můžeme vidět použití segmentů tvořených
Bézierovými křivkami. Jedna cesta je vyplněna texturou, další lineárním
barevným přechodem a třetí přechodem radiálním:</p>

<pre>
# vytvoření cesty složené z kvadratických křivek
def <strong>createPath1</strong>():
    path = QtGui.QPainterPath()
    path.moveTo(10, 100)
    path.quadTo(50, 10, 90, 100)
    path.quadTo(130, 190, 170, 100)
    path.quadTo(210, 10, 250, 100)
    path.quadTo(290, 190, 330, 100)
    return path
&nbsp;
&nbsp;
# vytvoření cesty z kubických křivek
def <strong>createPath2</strong>():
    path = QtGui.QPainterPath()
    path.moveTo(10, 250)
    path.cubicTo(120, 100,
                 -20, 100,
                  90, 250)
    return path
&nbsp;
&nbsp;
# vytvoření cesty z kubických křivek
def <strong>createPath3</strong>():
    path = QtGui.QPainterPath()
    path.moveTo(150, 200)
    path.cubicTo(225,  50,
                 225, 350,
                 300, 200)
    return path
</pre>

<img src="https://i.iinfo.cz/images/458/pyside9-5.png" class="image-318882" alt="&#160;" width="332" height="246" />
<p><i>Obrázek 10: Cesty tvořené Bézierovými křivkami.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Třetí demonstrační příklad: vykreslení vyplněných cest</h2>

<p>Metody pro tvorbu vyplněných cest, které byly popsané v&nbsp;předchozí
kapitole, použijeme ve třetím demonstračním příkladu, jehož zdrojový kód je
vypsán níže:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># vytvoření štětce z pixmapy</i>
def <strong>createBrushFromPixmap</strong>(filename):
    pixmap = QtGui.QPixmap(filename)
    return QtGui.QBrush(pixmap)
&nbsp;
&nbsp;
<i># vytvoření štětce z gradientního přechodu</i>
def <strong>createBrushFromLinearGradient</strong>(color1, color2):
    gradient = QtGui.QLinearGradient(100, 100, 100, 140)
    gradient.setColorAt(0.2, QtGui.QColor(*color1))
    gradient.setColorAt(1.0, QtGui.QColor(*color2))
    gradient.setSpread(QtGui.QGradient.Spread.ReflectSpread)
    return QtGui.QBrush(gradient)
&nbsp;
&nbsp;
<i># vytvoření štětce z gradientního přechodu</i>
def <strong>createBrushFromRadialGradient</strong>(color1, color2):
    gradient = QtGui.QRadialGradient(225, 200, 10)
    gradient.setColorAt(0.2, QtGui.QColor(*color1))
    gradient.setColorAt(1.0, QtGui.QColor(*color2))
    gradient.setSpread(QtGui.QGradient.Spread.ReflectSpread)
    return QtGui.QBrush(gradient)
&nbsp;
&nbsp;
<i># nastavení barvy kreslení (pera) na zadanou barvu</i>
def <strong>setColor</strong>(qPainter, color):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
&nbsp;
<i># vytvoření cesty složené z kvadratických křivek</i>
def <strong>createPath1</strong>():
    path = QtGui.QPainterPath()
    path.moveTo(10, 100)
    path.quadTo(50, 10, 90, 100)
    path.quadTo(130, 190, 170, 100)
    path.quadTo(210, 10, 250, 100)
    path.quadTo(290, 190, 330, 100)
    return path
&nbsp;
&nbsp;
<i># vytvoření cesty z kubických křivek</i>
def <strong>createPath2</strong>():
    path = QtGui.QPainterPath()
    path.moveTo(10, 250)
    path.cubicTo(120, 100,
                 -20, 100,
                  90, 250)
    return path
&nbsp;
&nbsp;
<i># vytvoření cesty z kubických křivek</i>
def <strong>createPath3</strong>():
    path = QtGui.QPainterPath()
    path.moveTo(150, 200)
    path.cubicTo(225,  50,
                 225, 350,
                 300, 200)
    return path
&nbsp;
&nbsp;
<i># funkce pro vykreslení cesty zadanou barvou a stylem štětce</i>
def <strong>drawPath</strong>(qPainter, color, brush, path):
    <i># nastavení barvy</i>
    setColor(qPainter, color)
&nbsp;
    <i># nastavení stylu štětce</i>
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení cesty</i>
    qPainter.drawPath(path)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 340
    IMAGE_HEIGHT = 300
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># vytvoření štětců</i>
        brush1 = createBrushFromLinearGradient(WHITE, BLUE)
        brush2 = createBrushFromPixmap("pixmaps/voronoi.png")
        brush3 = createBrushFromRadialGradient(YELLOW, BLACK)
&nbsp;
        <i># vytvoření cesty</i>
        path1 = createPath1()
&nbsp;
        <i># vykreslení cesty</i>
        drawPath(qp, GREEN, brush1, path1)
&nbsp;
        <i># vytvoření cesty</i>
        path2 = createPath2()
&nbsp;
        <i># vykreslení cesty</i>
        drawPath(qp, YELLOW, brush2, path2)
&nbsp;
        <i># vytvoření cesty</i>
        path3 = createPath3()
&nbsp;
        <i># vykreslení cesty</i>
        drawPath(qp, MAGENTA, brush3, path3)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Množinové operace aplikované na cesty</h2>

<p>V&nbsp;případě, že máme vytvořeny dvě cesty, lze nad nimi aplikovat základní
množinové operace sjednocení, průniku a rozdílu. Výsledkem těchto operací je
nová cesta. Pro množinové operace se používají buď metody
<strong>united</strong>, <strong>intersected</strong> a
<strong>subtracted</strong>, nebo lze alternativně použít i přetížené operátory
aplikovatelné na dvojici libovolných cest:</p>

<table>
<tr><th>Operace</th><th>Metoda</th><th>Přetížený operátor</th><th>Alternativní operátor</th></tr>
<tr><td>sjednocení</td><td><strong>united</strong></td><td>|, |=</td><td>+, +=</td></tr>
<tr><td>průnik</td><td><strong>intersected</strong></td><td>&amp;, &amp;=</td><td>&nbsp;</td></tr>
<tr><td>rozdíl</td><td><strong>subtracted</strong></td><td>-, -=</td><td>&nbsp;</td></tr>
</table>

<p>Vzhledem k&nbsp;tomu, že výsledkem těchto operací je nová cesta, je možné
operace snadno &bdquo;zřetězit&ldquo;, například takto:</p>

<pre>
path = path1 + path2 - path3 &amp; path4
</pre>

<p>V&nbsp;těchto případech se aplikují běžná pravidla priorit operátorů!</p>

<p>Poznámka: pokud jsou použity operátory ve tvaru +=, -=, &amp;= a |=, je nově
vytvořená cesta uložena do prvního (tj.&nbsp;levého) operandu, což je u těchto
operátorů očekávané chování.</p>

<img src="https://i.iinfo.cz/images/458/pyside9-6.png" class="image-318883" alt="&#160;" width="316" height="319" />
<p><i>Obrázek 11: Dvě překrývající se uzavřené cesty, na které budeme aplikovat
množinové operace.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Sjednocení</h2>

<p>Operaci sjednocení dvou cest je možné provést buď metodou
<strong>united</strong>, nebo alternativně s&nbsp;využitím přetížených
operátorů + a | (ty samozřejmě existují i ve variantách += a |=). Ukažme si
použití operátoru | pro sjednocení dvou cest do cesty jediné:</p>

<pre>
<i># vytvoření první cesty</i>
path1 = createPath1()
&nbsp;
<i># vytvoření druhé cesty</i>
path2 = createPath2()
&nbsp;
<i># SJEDNOCENÍ #</i>
&nbsp;
<i># vykreslení kombinace obou cest</i>
drawPath(qp, RED, 4, brush, path1 | path2)
</pre>

<p>Zcela stejný výsledek bude mít použití přetíženého operátoru +:</p>

<pre>
<i># vytvoření první cesty</i>
path1 = createPath1()
&nbsp;
<i># vytvoření druhé cesty</i>
path2 = createPath2()
&nbsp;
<i># SJEDNOCENÍ #</i>
&nbsp;
<i># vykreslení kombinace obou cest</i>
drawPath(qp, RED, 4, brush, path1 + path2)
</pre>

<p>Použití metody <strong>united</strong>:</p>

<pre>
<i># vytvoření první cesty</i>
path1 = createPath1()
&nbsp;
<i># vytvoření druhé cesty</i>
path2 = createPath2()
&nbsp;
<i># SJEDNOCENÍ #</i>
&nbsp;
<i># vykreslení kombinace obou cest</i>
drawPath(qp, RED, 4, brush, path1.united(path2))
</pre>

<img src="https://i.iinfo.cz/images/458/pyside9-7.png" class="image-318884" alt="&#160;" width="310" height="310" />
<p><i>Obrázek 12: Výsledek operace sjednocení dvou cest.</i></p>

<p>Poznámka: operace sjednocení realizovaná pomocí + či | je komutativní, takže
výsledek nezáleží na pořadí operandů.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Rozdíl</h2>

<p>Operace rozdílu, tj.&nbsp;&bdquo;odečtení&ldquo; tvaru jedné cesty od cesty
druhé, je realizována buď metodou <strong>subtracted</strong>, nebo přetíženým
operátorem -. Tato operace pochopitelně není komutativní, neboť výsledkem
<strong>path1 - path2</strong> bude cesta odlišná od výsledku operace
<strong>path2 - path1</strong>:</p>

<pre>
<i># vytvoření první cesty</i>
path1 = createPath1()
&nbsp;
<i># vytvoření druhé cesty</i>
path2 = createPath2()
&nbsp;
<i># ROZDÍL</i>
&nbsp;
<i># vykreslení kombinace obou cest</i>
drawPath(qp, YELLOW, 4, brush, path1 - path2)
</pre>

<p>Použití metody <strong>subtracted</strong>:</p>

<pre>
<i># vytvoření první cesty</i>
path1 = createPath1()
&nbsp;
<i># vytvoření druhé cesty</i>
path2 = createPath2()
&nbsp;
<i># ROZDÍL</i>
&nbsp;
<i># vykreslení kombinace obou cest</i>
drawPath(qp, YELLOW, 4, brush, path1.subtracted(path2))
</pre>

<img src="https://i.iinfo.cz/images/458/pyside9-8.png" class="image-318885" alt="&#160;" width="310" height="310" />
<p><i>Obrázek 13: Výsledek operace rozdílu dvou cest.</i></p>

<p>Poznámka: výsledkem této operace může být prázdná cesta, což si ostatně
můžete sami otestovat: postačí, aby první cesta byla celá překrytá cestou
druhou.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Průnik</h2>

<p>Třetí přímo podporovanou množinovou operací je průnik, který lze realizovat
metodou <strong>intersected</strong> nebo alternativně pomocí přetíženého
operátoru &amp; (ale už ne operátoru *, ten má odlišný význam!). Použití této
komutativní operace je ukázáno na dalším úryvku kódu:</p>

<pre>
<i># vytvoření první cesty</i>
path1 = createPath1()
&nbsp;
<i># vytvoření druhé cesty</i>
path2 = createPath2()
&nbsp;
<i># PRŮNIK</i>
&nbsp;
<i># vykreslení kombinace obou cest</i>
drawPath(qp, CYAN, 4, brush, path1 &amp; path2)
</pre>

<p>Použití metody <strong>intersected</strong>:</p>

<pre>
<i># vytvoření první cesty</i>
path1 = createPath1()
&nbsp;
<i># vytvoření druhé cesty</i>
path2 = createPath2()
&nbsp;
<i># PRŮNIK</i>
&nbsp;
<i># vykreslení kombinace obou cest</i>
drawPath(qp, CYAN, 4, brush, path1.intersected(path2))
</pre>

<img src="https://i.iinfo.cz/images/458/pyside9-9.png" class="image-318886" alt="&#160;" width="310" height="310" />
<p><i>Obrázek 14: Výsledek operace průniku dvou cest.</i></p>

<p>Poznámka: i výsledkem této operace může být prázdná cesta, podobně jako tomu
bylo i u operace předchozí.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Symetrická diference</h2>

<p>Zajímavé je, že poslední často používaná množinová operace &ndash;
symetrická diference &ndash; není přímo podporována. Ve skutečnosti ji ale
můžeme snadno nahradit již výše popsanými operacemi, a to například takto:</p>

<pre>
<i># vytvoření první cesty</i>
path1 = createPath1()
&nbsp;
<i># vytvoření druhé cesty</i>
path2 = createPath2()
&nbsp;
<i># SYMETRICKÁ DIFERENCE</i>
&nbsp;
<i># vykreslení kombinace obou cest</i>
drawPath(qp, MAGENTA, 4, brush, (path1 | path2) - (path1 &amp; path2))
</pre>

<p>Použití metod namísto přetížených operátorů vede k&nbsp;relativně špatně
čitelnému kódu:</p>

<pre>
<i># vytvoření první cesty</i>
path1 = createPath1()
&nbsp;
<i># vytvoření druhé cesty</i>
path2 = createPath2()
&nbsp;
<i># SYMETRICKÁ DIFERENCE</i>
&nbsp;
<i># vykreslení kombinace obou cest</i>
drawPath(qp, MAGENTA, 4, brush, path1.united(path2).subtracted(path1.intersected(path2)))
</pre>

<img src="https://i.iinfo.cz/images/458/pyside9-10.png" class="image-318887" alt="&#160;" width="310" height="310" />
<p><i>Obrázek 15: Výsledek operace symetrické diference dvou cest.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Demonstrační příklad: množinové operace aplikované na cesty</h2>

<p>V&nbsp;dalším, dnes již posledním demonstračním příkladu, jsou ukázány
všechny výše popsané množinové operace aplikované na cesty:

<img src="https://i.iinfo.cz/images/458/pyside9-11.png" class="image-318888" alt="&#160;" width="642" height="707" />
<p><i>Obrázek 16: Screenshot demonstračního příkladu s&nbsp;výsledky všech výše
popsaných množinových operací nad cestami.</i></p>

<p>Zdrojový kód celého příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
import math
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># vytvoření štětce z pixmapy</i>
def <strong>createBrushFromPixmap</strong>(filename):
    pixmap = QtGui.QPixmap(filename)
    return QtGui.QBrush(pixmap)
&nbsp;
&nbsp;
<i># nastavení barvy kreslení (pera) na zadanou barvu a šířku stopy</i>
def <strong>setColorAndWidth</strong>(qPainter, color, width):
    <i># vytvoření pera a nastavení barvy kreslení</i>
    pen = QtGui.QPen(QtGui.QColor(*color))
    pen.setWidth(width)
&nbsp;
    <i># kreslit se bude právě vytvořeným perem</i>
    qPainter.setPen(pen)
&nbsp;
&nbsp;
<i># vytvoření cesty složené z obdélníku</i>
def <strong>createPath1</strong>():
    path = QtGui.QPainterPath()
    path.addRect(10, 10, 200, 200)
    return path
&nbsp;
&nbsp;
<i># vytvoření cesty složené z obdélníku</i>
def <strong>createPath2</strong>():
    path = QtGui.QPainterPath()
    path.addRect(100, 100, 200, 200)
    return path
&nbsp;
&nbsp;
<i># funkce pro vykreslení cesty zadanou barvou a stylem štětce</i>
def <strong>drawPath</strong>(qPainter, color, width, brush, path):
    <i># nastavení barvy</i>
    setColorAndWidth(qPainter, color, width)
&nbsp;
    <i># nastavení stylu štětce</i>
    qPainter.setBrush(brush)
&nbsp;
    <i># vykreslení cesty</i>
    qPainter.drawPath(path)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 640
    IMAGE_HEIGHT = 640
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vymazání obrázku</i>
        self.image.fill(0)
&nbsp;
        <i># vytvoření objektu typu QPainter s předáním</i>
        <i># reference na "pokreslovaný" objekt</i>
        qp = QtGui.QPainter(self.image)
&nbsp;
        <i># konstanty s n-ticemi představujícími základní barvy</i>
        BLACK = (0, 0, 0)
        BLUE = (0, 0, 255)
        CYAN = (0, 255, 255)
        GREEN = (0, 255, 0)
        YELLOW = (255, 255, 0)
        RED = (255, 0, 0)
        MAGENTA = (255, 0, 255)
        WHITE = (255, 255, 255)
&nbsp;
        <i># vytvoření štětce</i>
        brush = createBrushFromPixmap("pixmaps/voronoi.png")
&nbsp;
        <i># vytvoření první cesty</i>
        path1 = createPath1()
&nbsp;
        <i># vytvoření druhé cesty</i>
        path2 = createPath2()
&nbsp;
        <i># SJEDNOCENÍ #</i>
&nbsp;
        <i># vykreslení kombinace obou cest</i>
        drawPath(qp, RED, 4, brush, path1 | path2)
&nbsp;
        <i># posun</i>
        path1.translate(320, 0)
        path2.translate(320, 0)
&nbsp;
        <i># ROZDÍL</i>
&nbsp;
        <i># vykreslení kombinace obou cest</i>
        drawPath(qp, YELLOW, 4, brush, path1 - path2)
&nbsp;
        <i># posun</i>
        path1.translate(-320, 320)
        path2.translate(-320, 320)
&nbsp;
        <i># PRŮNIK</i>
&nbsp;
        <i># vykreslení kombinace obou cest</i>
        drawPath(qp, CYAN, 4, brush, path1 &amp; path2)
&nbsp;
        <i># posun</i>
        path1.translate(320, 0)
        path2.translate(320, 0)
&nbsp;
        <i># SYMETRICKÁ DIFERENCE</i>
&nbsp;
        <i># vykreslení kombinace obou cest</i>
        drawPath(qp, MAGENTA, 4, brush, (path1 | path2) - (path1 &amp; path2))
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QPainter')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech pěti dnes popsaných demonstračních příkladů byly opět,
podobně jako tomu bylo i v&nbsp;předchozích článcích, uloženy do Git repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>78_path_lineto.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/78_path_lineto.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/78_path_lineto.py</a></td></tr>
<tr><td>79_path_curves.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/79_path_curves.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/79_path_curves.py</a></td></tr>
<tr><td>80_path_and_brush.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/80_path_and_brush.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/80_path_and_brush.py</a></td></tr>
<tr><td>81_path_and_brush_star.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/81_path_and_brush_star.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/81_path_and_brush_star.py</a></td></tr>
<tr><td>82_set_operations.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/82_set_operations.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/82_set_operations.py</a></td></tr>
</table>


<p><a name="k17"></a></p>
<h2 id="k17">17. Obsah následující části seriálu</h2>

<p>V&nbsp;následující části seriálu o tvorbě grafického uživatelského rozhraní
s&nbsp;využitím frameworku <i>PySide</i> dokončíme téma tvorby 2D grafiky.
Budeme se zabývat dvěma užitečnými technikami &ndash; použitím takzvaných
oblastí (<i>region</i>) sloužících pro určení té části plochy, do níž má být
provedeno vykreslování. Ve druhé části si pak ukážeme způsoby vzájemné
kompozice dvourozměrných entit v&nbsp;z-ové rovině.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>QImage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html</a>
</li>

<li>QPixmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html</a>
</li>

<li>QBitmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html</a>
</li>

<li>QPaintDevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html</a>
</li>

<li>QPicture<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html</a>
</li>

<li>QPainter<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html</a>
</li>

<li>QPainterPath<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html</a>
</li>

<li>QGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html</a>
</li>

<li>QLinearGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html</a>
</li>

<li>QRadialGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html</a>
</li>

<li>Afinní zobrazení<br />
<a href="https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD">https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

