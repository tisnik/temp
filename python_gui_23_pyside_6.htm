<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba GUI v Pythonu s využitím frameworku PySide: rastrová a vektorová grafika</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba GUI v Pythonu s využitím frameworku PySide: rastrová a vektorová grafika</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku se budeme zabývat tím, jak lze frameworku PySide pracovat s grafickými informacemi. Jedná se o poměrně rozsáhlé téma, protože možnosti nabízené PySide jsou skutečně široké. Z tohoto důvodu si prozatím popíšeme možnosti tříd QImage, QBitmap, QPixmap a QTransform.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba GUI v&nbsp;Pythonu s&nbsp;využitím frameworku PySide: rastrová a vektorová grafika</a></p>
<p><a href="#k02">2. Konverze rastrového obrázku reprezentovaného třídami <strong>QImage</strong> a <strong>QPixmap</strong></a></p>
<p><a href="#k03">3. Vytvoření obrázku s&nbsp;jeho vykreslením do hlavního okna aplikace</a></p>
<p><a href="#k04">4. Zdrojový kód prvního demonstračního příkladu</a></p>
<p><a href="#k05">5. Manipulace s&nbsp;obsahem rastrového obrázku reprezentovaného třídou <strong>QImage</strong></a></p>
<p><a href="#k06">6. Určení barvy kreslení</a></p>
<p><a href="#k07">7. Druhý demonstrační příklad: použití metody <strong>QImage.fill</strong></a></p>
<p><a href="#k08">8. Změna barev jednotlivých pixelů</a></p>
<p><a href="#k09">9. Třetí demonstrační příklad: použití metody <strong>QImage.setPixel</strong></a></p>
<p><a href="#k10">10. Třída <strong>QBitmap</strong> a její odlišnost od třídy <strong>QPixmap</strong></a></p>
<p><a href="#k11">11. Čtvrtý demonstrační příklad &ndash; vykreslení obrázku se dvěma barvami</a></p>
<p><a href="#k12">12. Afinní transformace rastrových obrázků</a></p>
<p><a href="#k13">13. Pátý demonstrační příklad: otočení obrázku</a></p>
<p><a href="#k14">14. Šestý demonstrační příklad: skládání transformací</a></p>
<p><a href="#k15">15. Sedmý demonstrační příklad: ruční vytvoření transformační matice</a></p>
<p><a href="#k16">16. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k17">17. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba GUI v&nbsp;Pythonu s&nbsp;využitím frameworku PySide: rastrová a vektorová grafika</h2>

<p>Jak jsme se již zmínili v&nbsp;perexu, budeme se v&nbsp;dnešním článku
zabývat především tím, jakým způsobem je možné ve frameworku <i>PySide</i>
pracovat s&nbsp;grafickými informacemi (2D rastrovými obrázky, vektorovými
scénami v&nbsp;ploše i v&nbsp;3D prostoru). Jedná se o poměrně rozsáhlé téma,
protože možnosti nabízené framworkem <i>PySide</i> jsou v&nbsp;tomto ohledu
skutečně široké &ndash; možné je pracovat s&nbsp;jednoduchými ikonami
(<strong>QIcon</strong>), existuje rozhraní ke knihovně <a
href="https://www.root.cz/serialy/graficka-knihovna-opengl/">OpenGL</a>
(<strong>QtOpenGL</strong>), k&nbsp;vektorové grafice ukládané ve formátu <a
href="https://www.root.cz/clanky/vektorovy-graficky-format-svg/">SVG</a>
(<strong>QtSvg</strong>) a zapomenout nesmíme ani na možnost vysokoúrovňové
práce s&nbsp;grafickými daty s&nbsp;využitím třídy
<strong>QGraphicsScene</strong> a tříd odvozených od
<strong>QGraphicsItem</strong>.</p>

<p>Začneme popisem práce s&nbsp;rastrovými obrázky, které mohou být
reprezentovány hned několika třídami, které jsou vypsány v&nbsp;následující
tabulce:</p>

<table>
<tr><th>Třída</th><th>Stručný popis</th></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">QImage</a></td><td>umožňuje snadný přístup k&nbsp;hodnotám pixelů, nabízí možnost specifikace formátů pixelů</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">QPixmap</a></td><td>lze je snadno vykreslit přes vybraný widget, operace pro načtení a uložení obrázku do jednoho z&nbsp;podporovaných formátů</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">QBitmap</a></td><td>speciální případ <strong>QPixmap</strong> &ndash; bitmapa s&nbsp;dvěma barvami (typicky černobílá)</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">QPicture</a></td><td>kontejner, na který je možné kreslit s&nbsp;využitím třídy <strong>QPainter</strong> a následně data serializovat do grafického metaformátu</td></tr>
</table>

<p>Poznámka: třída <strong>QPicture</strong> ve skutečnosti vytváří rastrové
obrázky až ve chvíli, kdy skutečně budeme chtít provést vykreslení
(<i>rendering</i>). Před touto operací jsou grafické entity reprezentovány
vektorově. Podrobnosti si ukážeme příště.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Konverze rastrového obrázku reprezentovaného třídami <strong>QImage</strong> a <strong>QPixmap</strong></h2>

<p>Pokud budeme chtít manipulovat s&nbsp;rastrovými obrázky na úrovni
jednotlivých pixelů a následně výsledek zobrazit, lze postupovat například
takto:</p>

<ol>

<li>Vytvoří se instance třídy <strong>QImage</strong> se zvoleným rozlišením a
formátem pixelů (z&nbsp;něj se odvozuje bitová hloubka, existence barvové
palety atd.)</li>

<li>S&nbsp;využitím metody <strong>setPixel</strong> atd. se může
s&nbsp;rastrovým obrázkem libovolně manipulovat.</li>

<li>Následně se obrázek převede na instanci třídy <strong>QPixmap</strong> či
<strong>QBitmap</strong>, protože tyto třídy již umožňují snadné vykreslení do
zvoleného widgetu.</li>

<li>Provede se vykreslení obrázku, například použitím metody
<strong>setPixmap</strong>, kterou nabízí widget <strong>QLabel</strong>, ale i
některé další ovládací prvky.</li>

</ol>

<p>Ve skutečnosti je možné provádět konverze mezi <strong>QImage</strong>
&harr; <strong>QPixmap</strong> oběma směry. Použité metody jsou vypsány
v&nbsp;následující tabulce:</p>

<table>
<tr><th>Konverze</th><th>Metoda</th></tr>
<tr><td>QImage &rarr; QPixmap</td><td>QPixmap.fromImage()</td></tr>
<tr><td>QPixmap &rarr; QImage</td><td>QPixmap.toImage()</td></tr>
</table>

<p>Poznámka: první metoda je statická, protože ji můžeme zavolat i ve chvíli,
kdy žádná instance třídy <strong>QPixmap</strong> prozatím neexistuje.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vytvoření obrázku s&nbsp;jeho vykreslením do hlavního okna aplikace</h2>

<p>Podívejme se nyní na příklad &ndash; vytvoříme instanci třídy
<strong>QImage</strong> se zvoleným rozlišením a formátem pixelů RGB32
(tj.&nbsp;<i>truecolor</i>) a ihned poté provedeme konverzi na instanci třídy
<strong>QPixmap</strong>. Ve skutečnosti se interně žádná konverze nemusí
provádět, záleží to na konkrétních podmínkách a formátu pixelů:</p>

<pre>
def <strong>prepareImage</strong>(self):
    <i># vytvoření instance třídy QImage</i>
    self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                              MainWindow.IMAGE_HEIGHT,
                              QtGui.QImage.Format_RGB32)
&nbsp;
    <i># vytvoření instance třídy QPixmap z objektu QImage</i>
    self.pixmap = QtGui.QPixmap.fromImage(self.image)
</pre>

<p>Vykreslení se provede způsobem naznačeným v&nbsp;předchozí kapitole &ndash;
použitím metody <strong>setPixmap</strong> u návěští, které je vloženo do
hlavního okna aplikace. Velikost okna se přitom automaticky přizpůsobí rozměrům
návěstí:</p>

<pre>
def <strong>addLabelWithPixmap</strong>(self):
    <i># vytvoření návěští</i>
    label = QtGui.QLabel("test")
    <i># přiřazení rastrového obrázku k návěští</i>
    label.setPixmap(self.pixmap)
    <i># vložení návěští do hlavního okna</i>
    self.setCentralWidget(label)
</pre>

<img src="https://i.iinfo.cz/images/540/pyside6-1.png" class="image-316449" alt="&#160;" width="258" height="323" />
<p><i>Obrázek 1: Ze screenshotu je patrné, že rastrový obrázek je implicitně
naplněn zcela černými pixely.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zdrojový kód prvního demonstračního příkladu</h2>

<p>Screenshot zobrazený na obrázku číslo 1 byl získán spuštěním dnešního
prvního demonstračního příkladu, jehož úplný zdrojový kód vypadá
následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 256
    IMAGE_HEIGHT = 256
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QImage demo #1')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Manipulace s&nbsp;obsahem rastrového obrázku reprezentovaného třídou <strong>QImage</strong></h2>

<p>Ve třídě <strong>QImage</strong> najdeme několik (opravdu jen několik) metod
určených pro manipulaci s&nbsp;obsahem rastrového obrázku. Jedná se o zcela
základní operace, protože pro vykreslování složitějších grafických entit jsou
určeny jiné technologie nabízené například třídou <strong>QPainter</strong>.
Mezi operace podporované třídou <strong>QImage</strong> patří:</p>

<table>
<tr><th>Metoda</th><th>Provedená operace</th></tr>
<tr><td>setPixel(x, y, index)</td><td>nastavení barvy pixelu u obrázků s&nbsp;paletou</td></tr>
<tr><td>setPixel(x, y, rgb)</td><td>nastavení barvy pixelu u plnobarevných obrázků (<i>truecolor</i>)</td></tr>
<tr><td>setPixel(point: QPoint, index)</td><td>nastavení barvy pixelu u obrázků s&nbsp;paletou</td></tr>
<tr><td>setPixel(point: QPoint, rgb)</td><td>nastavení barvy pixelu u plnobarevných obrázků (<i>truecolor</i>)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>fill(color: QColor)</td><td>vyplnění celého obrázku konstantní barvou</td></tr>
<tr><td>fill(color: GlobalColor)</td><td>vyplnění celého obrázku konstantní barvou</td></tr>
<tr><td>fill(color: uint)</td><td>vyplnění celého obrázku konstantní barvou</td></tr>
</table>

<p>Vidíme, že obě metody <strong>setPixel()</strong> a <strong>fill()</strong>
existují v&nbsp;několika variantách, které se od sebe liší počtem a typem
parametrů. Obecně platí, že při specifikaci souřadnice pixelu, jehož hodnota se
má přečíst či změnit, je rychlejší použít souřadnice <strong>x</strong>,
<strong>y</strong> namísto objektu typu <strong>QPoint</strong>.</p>

<p>Poznámka: metoda <strong>setPixel()</strong> je pochopitelně pomalejší, než
přímá manipulace s&nbsp;hodnotami pixelů rastrového obrázku. Pokud tedy budete
potřebovat generovat větší množství různých textur atd., je výhodnější si
nejprve připravit data pro obrázek a až posléze zkonstruovat instanci třídy
<strong>QImage</strong> s&nbsp;využitím těchto dat.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Určení barvy kreslení</h2>

<p>Zajímavý je způsob získání barvy pro obě výše zmíněné operace
<strong>setPixel()</strong> a <strong>fill()</strong>. Existuje totiž hned
několik variant, které se od sebe odlišují podle toho, zda se používají obrázky
s&nbsp;paletou či plnobarevné (<i>truecolor</i>) obrázky. V&nbsp;případě
plnobarevných obrázků se hodnota pixelu vypočítá přes statickou metodu
<strong>QtGui.qRgb(r, g, b)</strong>, u obrázků s&nbsp;paletou je možné použít
přímo index barvy v&nbsp;paletě (těmito typy obrázků, které jsou velmi užitečné
například pro reprezentaci ikon, se budeme podrobněji zabývat příště).
V&nbsp;obou případech je barva reprezentována jediným celým číslem, které má u
obrázků s&nbsp;paletou význam indexu a u plnobarevných obrázků je do onoho
celého čísla zakódována hodnota všech tří barvových složek a popř.&nbsp;i alfa
kanálu. Alternativně lze získat barvu libovolného pixelu v&nbsp;obrázku
zavoláním metody <strong>pixel()</strong>, která také existuje ve dvou
variantách:</p>

<table>
<tr><th>Metoda</th><th>Provedená operace</th></tr>
<tr><td>pixel(x, y)</td><td>získání barvy pixelu</td></tr>
<tr><td>pixel(point: QPoint)</td><td>získání barvy pixelu</td></tr>
</table>



<p><a name="k07"></a></p>
<h2 id="k07">7. Druhý demonstrační příklad: použití metody <strong>QImage.fill</strong></h2>

<p>Ve druhém demonstračním příkladu je ukázáno použití metody
<strong>QImage.fill</strong> určené pro vyplnění celého obrázku konstantní
barvou. Princip je jednoduchý &ndash; ihned po vytvoření obrázku (který bude
vyplněn černou barvou) vypočítáme hodnotu barvy (RGB) a použijeme tuto hodnotu
při volání metody <strong>QImage.fill</strong>:</p>

<pre>
<i># vytvoření instance třídy QImage</i>
self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                          MainWindow.IMAGE_HEIGHT,
                          QtGui.QImage.Format_RGB32)
&nbsp;
<i># vyplnění celého obrázku konstantní barvou</i>
self.image.fill(QtGui.qRgb(10, 80, 20))
</pre>

<img src="https://i.iinfo.cz/images/540/pyside6-2.png" class="image-316450" alt="&#160;" width="258" height="323" />
<p><i>Obrázek 2: Vyplnění celého obrázku s&nbsp;rozlišením 256&times;256 pixelů
konstantní tmavě zelenou barvou.</i></p>

<p>Následuje výpis zdrojového kódu tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 256
    IMAGE_HEIGHT = 256
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vyplnění celého obrázku konstantní barvou</i>
        self.image.fill(QtGui.qRgb(10, 80, 20))
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QImage demo #2')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Změna barev jednotlivých pixelů</h2>

<p>Změna barev jednotlivých pixelů s&nbsp;využitím metody
<strong>QImage.setPixel</strong> je velmi snadná, především u plnobarevných
obrázků, v&nbsp;nichž můžeme barvu pixelu vypočítat pomocí
<strong>QtGui.qRgb</strong>. Před vlastním kreslením obrázek vytvoříme:</p>

<pre>
<i># vytvoření instance třídy QImage</i>
self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                          MainWindow.IMAGE_HEIGHT,
                          QtGui.QImage.Format_RGB32)
</pre>

<p>Následně s&nbsp;využitím dvojice do sebe vnořených programových smyček
vykreslíme gradientní přechod:</p>

<pre>
<i># vyplnění celého obrázku barvovým přechodem</i>
for y in range(MainWindow.IMAGE_HEIGHT):
    for x in range(MainWindow.IMAGE_WIDTH):
        self.image.setPixel(x, y, QtGui.qRgb(x, x, y))
</pre>

<img src="https://i.iinfo.cz/images/540/pyside6-3.png" class="image-316451" alt="&#160;" width="258" height="323" />
<p><i>Obrázek 3: Vyplnění obrázku o rozměrech 256&times;256 pixelů barevným
přechodem.</i></p>

<p>Poznámka: pokud bude šířka a/nebo výška obrázku přesahovat hodnotu 255,
znamená to, že při výpočtu barvy:</p>

<pre>
QtGui.qRgb(x, x, y)
</pre>

<p>bude docházet k&nbsp;přetečení hodnoty jednotlivých barvových složek,
protože funkce <strong>qRgb</strong> žádné kontroly neprovádí. Pokud tedy
například zadáme zelenou barvovou složku nastavenou na hodnotu 400, ve
skutečnosti se použije 400 % 256 = 144 a současně se ovlivní i hodnota složky
modré či červené (podle použitého formátu pixelů). Toho můžeme využít pro různé
efekty, například:</p>

<pre>
<i># rozměry rastrového obrázku vetší než 255</i>
IMAGE_WIDTH = 512
IMAGE_HEIGHT = 512
&nbsp;
<i># vyplnění celého obrázku barvovým přechodem</i>
for y in range(MainWindow.IMAGE_HEIGHT):
    for x in range(MainWindow.IMAGE_WIDTH):
        <i># zde dochází k přetečení hodnoty barvových složek</i>
        self.image.setPixel(x, y, QtGui.qRgb(x, x*10, y))
</pre>

<img src="https://i.iinfo.cz/images/540/pyside6-4.png" class="image-316452" alt="&#160;" width="514" height="579" />
<p><i>Obrázek 4: Efekt přetečení hodnot barvových složek.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Třetí demonstrační příklad: použití metody <strong>QImage.setPixel</strong></h2>

<p>Opět si ukažme, jak se <a href="#k08">výše uvedený</a> fragment kódu použije
v&nbsp;demonstračním příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 256
    IMAGE_HEIGHT = 256
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vyplnění celého obrázku barvovým přechodem</i>
        for y in range(MainWindow.IMAGE_HEIGHT):
            for x in range(MainWindow.IMAGE_WIDTH):
                self.image.setPixel(x, y, QtGui.qRgb(x, x, y))
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QImage demo #3')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

<p>Varianta s&nbsp;větším obrázkem a přetečením hodnoty barvových složek:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
<strong>class</strong> MainWindow(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku vetší než 255</i>
    IMAGE_WIDTH = 512
    IMAGE_HEIGHT = 512
&nbsp;
    <strong>def</strong> __init__(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    <strong>def</strong> prepareImage(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vyplnění celého obrázku barvovým přechodem</i>
        for y in range(MainWindow.IMAGE_HEIGHT):
            for x in range(MainWindow.IMAGE_WIDTH):
                <i># zde dochází k přetečení hodnoty barvových složek</i>
                <i># Red, Green, Blue</i>
                self.image.setPixel(x, y, QtGui.qRgb(x, x*10, y))
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    <strong>def</strong> prepareGUI(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QImage demo #3')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    <strong>def</strong> addLabelWithPixmap(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    <strong>def</strong> run(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
<strong>def</strong> main():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Třída <strong>QBitmap</strong> a její odlišnost od třídy <strong>QPixmap</strong></h2>

<p>Prozatím jsme v&nbsp;příkladech nejprve vytvořili objekt typu
<strong>QImage</strong>, změnili pixely obrázku a následně jsme obrázek
převedli na objekt typu <strong>QPixmap</strong>, jenž je možné relativně
snadno vykreslit do okna:</p>

<pre>
<i># vytvoření instance třídy QImage</i>
self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                          MainWindow.IMAGE_HEIGHT,
                          QtGui.QImage.Format_RGB32)
&nbsp;
...
... manipulace s obsahem obrázku
...
&nbsp;
<i># vytvoření instance třídy QPixmap z objektu QImage</i>
self.pixmap = QtGui.<strong>QPixmap</strong>.fromImage(self.image)
</pre>

<p>Takto převedený obrázek je stále plnobarevný, takže nedošlo k&nbsp;žádné
ztrátě informace. Můžeme však provést malou úpravu v&nbsp;posledním kroku a
vytvořit skutečnou <i>bitmapu</i> v&nbsp;původním slova smyslu,
tj.&nbsp;obrázek, v&nbsp;němž je každý pixel reprezentován jediným bitem:</p>

<pre>
<i># vytvoření instance třídy QBitmap z objektu QImage</i>
self.bitmap = QtGui.<strong>QBitmap</strong>.fromImage(self.image)
</pre>

<p>Při této konverzi už dochází ke ztrátě obrazové informace (v&nbsp;našem
případě dost podstatné), čemuž se framework PySide snaží alespoň trošku
zabránit použitím ditheringu:</p>

<img src="https://i.iinfo.cz/images/540/pyside6-5.png" class="image-316453" alt="&#160;" width="258" height="323" />
<p><i>Obrázek 5: Použití ditheringu při práci s&nbsp;bitmapami.</i></p>

<p>K&nbsp;čemu se vlastně <i>bitmapy</i> dnes hodí, když současné zobrazovací
systémy prakticky ve všech případech podporují plnobarevné zobrazení? Ve
skutečnosti se bitmapy již (většinou) nevyužívají pro přímé kreslení, ale plní
další funkce, například:</p>

<ul>
<li>Definice tvaru kurzoru (třída <strong>QCursor</strong>)</li>
<li>Definice štětce při kreslení (třída <strong>QBrush</strong>)</li>
<li>Definice složitějších regionů (třída <strong>QRegion</strong>), které omezují prostor, který se musí překreslit</li>
<li>Specifikace masky u pixmap</li>
</ul>



<p><a name="k11"></a></p>
<h2 id="k11">11. Čtvrtý demonstrační příklad &ndash; vykreslení obrázku se dvěma barvami</h2>

<p>V&nbsp;dnešním třetím příkladu je ukázáno, jak lze z&nbsp;plnobarevného
obrázku reprezentovaného objektem typu <strong>QImage</strong> vytvořit
černobílý obrázek se dvěma barvami. Při převodu se framework PySide snaží o
použití jednoduchého ditheringu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 256
    IMAGE_HEIGHT = 256
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vyplnění celého obrázku barvovým přechodem</i>
        for y in range(MainWindow.IMAGE_HEIGHT):
            for x in range(MainWindow.IMAGE_WIDTH):
                self.image.setPixel(x, y, QtGui.qRgb(y, y, y))
&nbsp;
        <i># vytvoření instance třídy QBitmap z objektu QImage</i>
        self.bitmap = QtGui.QBitmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QImage+QBitmap')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s monochromatickým rastrovým obrázkem</i>
        self.addLabelWithBitmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithBitmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení monochromatického rastrového obrázku k návěští</i>
        label.setPixmap(self.bitmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Afinní transformace rastrových obrázků</h2>

<p>Obrázky je možné před jejich vykreslením nebo dalším zpracováním otočit,
změnit jejich měřítko, posunout, zkosit atd. Pro specifikaci operace prováděné
s&nbsp;celým obrázkem slouží takzvané <i>afinní transformace</i>, které jsou
v&nbsp;počítačové grafice velmi často používány, a to jak ve 2D, tak i
v&nbsp;3D (zde se samozřejmě pracuje s&nbsp;další souřadnicí navíc). Afinní
transformace jsou představovány objekty typu <strong>QTransform</strong>,
přičemž samotná transformace je interně představována maticí o rozměrech
3&times;3 prvky. Většina transformací prováděných v&nbsp;rovině navíc
nepotřebuje specifikovat poslední sloupec transformační matice, protože tento
sloupec většinou obsahuje sloupcový vektor <i>[0, 0, 1]<sup>T</sup></i>, takže
se počet skutečně používaných prvků matice sníží na 2&times;3 prvky.</p>

<p>Velmi důležitou vlastností afinních transformací je možnost jejich skládání,
přičemž složením vznikne další afinní transformace. Vzhledem k&nbsp;tomu, že se
interně skládání transformací provádí maticovým součinem, je jasné, že se
NEjedná o komutativní operaci (to je ovšem logické, když si uvědomíme rozdíl
mezi otočením objektu okolo počátku souřadnic a jeho posunem a posunem objektu
následovaným otočením okolo počátku souřadnic).</p>

<p>Poznámka: po aplikaci transformace vznikne nový obrázek, ovšem pokud na
tento nový obrázek budeme aplikovat opačnou transformaci, nemusíme vždy dostat
obrázek původní, protože některé transformace jsou ztrátové (typicky zmenšení,
otočení).</p>

<p>Podívejme se, jak lze otočit obrázek o 30&deg; s&nbsp;využitím afinní
transformace. Není to nic těžkého, pouze vytvoříme instanci typu
<strong>QTransform</strong> a následně tuto transformaci použijeme pro
vytvoření nového obrázku (starý je zahozen správcem paměti):</p>

<pre>
<i># vytvoření instance třídy QImage</i>
self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                          MainWindow.IMAGE_HEIGHT,
                          QtGui.QImage.Format_RGB32)
&nbsp;
<i># vyplnění celého obrázku barvovým přechodem</i>
...
...
...
&nbsp;
<i># vytvoření transformace</i>
transform = QtGui.QTransform()
transform.rotate(30)
&nbsp;
<i># získání transformovaného obrázku</i>
self.image = self.image.transformed(transform)
</pre>

<img src="https://i.iinfo.cz/images/540/pyside6-6.png" class="image-316454" alt="&#160;" width="352" height="417" />
<p><i>Obrázek 6: Otočení obrázku o 30&deg; vede k&nbsp;jeho zvětšení.</i></p>

<p>Transformace můžeme skládat dohromady, takže například můžeme specifikovat
rotaci následovanou změnou měřítka a další rotací (výsledkem je stále jediný
objekt s&nbsp;jedinou transformační maticí):</p>

<pre>
<i># skládání transformací</i>
transform = QtGui.QTransform()
transform.rotate(30)
transform.scale(2.0, 1.0)
transform.rotate(-30)
</pre>

<img src="https://i.iinfo.cz/images/540/pyside6-7.png" class="image-316455" alt="&#160;" width="561" height="498" />
<p><i>Obrázek 7: Zkosení pomocí složené transformace rotace+změna měřítka+rotace.</i></p>

<p>V&nbsp;některých případech můžeme chtít specifikovat prvky transformační
matice ručně. To je samozřejmě možné, protože existuje přetížený konstruktor
třídy <strong>QTransform</strong>, který akceptuje buď prvky celé matice nebo
jen submatice o velikosti 2&times;3 prvky. Transformaci provádějící rotaci
obrázku o 45&deg; lze zapsat takto:</p>

<pre>
<i># vytvoření transformační matice</i>
angle = math.radians(45)
transform = QtGui.QTransform(math.cos(angle), math.sin(angle),
                             -math.sin(angle), math.cos(angle),
                             0, 0)
</pre>

<p>Poznámka: v&nbsp;tomto případě je samozřejmě mnohem kratší použít
<strong>QTransform.rotate(45)</strong>.</p>

<img src="https://i.iinfo.cz/images/540/pyside6-8.png" class="image-316456" alt="&#160;" width="366" height="430" />
<p><i>Obrázek 8: Otočení obrázku o 45&deg; ručně vytvořenou transformační
maticí.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Pátý demonstrační příklad: otočení obrázku</h2>

<p>V&nbsp;dnešním pátém příkladu je ukázán způsob otočení obrázku o 30&deg;
s&nbsp;využitím afinních transformací. Význam objektu
<strong>QTransform</strong> jsme si vysvětlili <a
href="#k12">v&nbsp;předchozí</a> kapitole:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 256
    IMAGE_HEIGHT = 256
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vyplnění celého obrázku barvovým přechodem</i>
        for y in range(MainWindow.IMAGE_HEIGHT):
            for x in range(MainWindow.IMAGE_WIDTH):
                self.image.setPixel(x, y, QtGui.qRgb(y, y, 0))
&nbsp;
        <i># vytvoření transformace</i>
        transform = QtGui.QTransform()
        transform.rotate(30)
&nbsp;
        <i># získání transformovaného obrázku</i>
        self.image = self.image.transformed(transform)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QImage transform')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Šestý demonstrační příklad: skládání transformací</h2>

<p>V&nbsp;šestém demonstračním příkladu je ukázán způsob skládání několika
afinních transformací. Výsledkem je samozřejmě opět afinní transformace
reprezentovaná jedinou transformační maticí. S&nbsp;teorií jsme se opět
seznámili <a href="#k12">ve dvanácté kapitole</a>:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 256
    IMAGE_HEIGHT = 256
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vyplnění celého obrázku barvovým přechodem</i>
        for y in range(MainWindow.IMAGE_HEIGHT):
            for x in range(MainWindow.IMAGE_WIDTH):
                self.image.setPixel(x, y, QtGui.qRgb(y, y, 0))
&nbsp;
        <i># skládání transformací</i>
        transform = QtGui.QTransform()
        transform.rotate(30)
        transform.scale(2.0, 1.0)
        transform.rotate(-30)
&nbsp;
        <i># získání transformovaného obrázku</i>
        self.image = self.image.transformed(transform)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QImage transform')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Sedmý demonstrační příklad: ruční vytvoření transformační matice</h2>

<p>Jak jsme se již dozvěděli <a href="#k12">ve dvanácté kapitole</a>, je možné
vytvořit transformační matici &bdquo;ručně&ldquo;, tj.&nbsp;specifikací jejích
jednotlivých prvků. Jak se to v&nbsp;praxi provádí je patrné ze zdrojového kódu
dalšího příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
import math
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    <i># rozměry rastrového obrázku</i>
    IMAGE_WIDTH = 256
    IMAGE_HEIGHT = 256
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        self.prepareImage()
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareImage</strong>(self):
        <i># vytvoření instance třídy QImage</i>
        self.image = QtGui.QImage(MainWindow.IMAGE_WIDTH,
                                  MainWindow.IMAGE_HEIGHT,
                                  QtGui.QImage.Format_RGB32)
&nbsp;
        <i># vyplnění celého obrázku barvovým přechodem</i>
        for y in range(MainWindow.IMAGE_HEIGHT):
            for x in range(MainWindow.IMAGE_WIDTH):
                self.image.setPixel(x, y, QtGui.qRgb(y, y, 0))
&nbsp;
        <i># vytvoření transformační matice</i>
        angle = math.radians(45)
        transform = QtGui.QTransform(math.cos(angle), math.sin(angle),
                                     -math.sin(angle), math.cos(angle),
                                     0, 0)
&nbsp;
        <i># aplikace transformace</i>
        self.image = self.image.transformed(transform)
&nbsp;
        <i># vytvoření instance třídy QPixmap z objektu QImage</i>
        self.pixmap = QtGui.QPixmap.fromImage(self.image)
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost okna nezadávejte ručně - špatně se počítá kvůli toolbaru</i>
        <i># self.resize(256, 300)</i>
        self.setWindowTitle('QImage transform')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
        self.toolbar.setMovable(False)
&nbsp;
        <i># přidání tlačítka na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
&nbsp;
        <i># doprostřed okna přidáme návěští s rastrovým obrázkem</i>
        self.addLabelWithPixmap()
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>addLabelWithPixmap</strong>(self):
        <i># vytvoření návěští</i>
        label = QtGui.QLabel("test")
        <i># přiřazení rastrového obrázku k návěští</i>
        label.setPixmap(self.pixmap)
        <i># vložení návěští do hlavního okna</i>
        self.setCentralWidget(label)
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů byly opět,
podobně jako tomu bylo i v&nbsp;předchozích článcích, uloženy do Git repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>55_qimage.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/55_qimage.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/55_qimage.py</a></td></tr>
<tr><td>56_qimage_fill.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/56_qimage_fill.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/56_qimage_fill.py</a></td></tr>
<tr><td>57_qimage_setpixel.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/57_qimage_setpixel.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/57_qimage_setpixel.py</a></td></tr>
<tr><td>58_qimage_setpixel_overflow.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/58_qimage_setpixel_overflow.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/58_qimage_setpixel_overflow.py</a></td></tr>
<tr><td>59_bitmap.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/59_bitmap.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/59_bitmap.py</a></td></tr>
<tr><td>60_qimage_transform_rotate.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/60_qimage_transform_rotate.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/60_qimage_transform_rotate.py</a></td></tr>
<tr><td>61_qimage_transform_composition.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/61_qimage_transform_composition.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/61_qimage_transform_composition.py</a></td></tr>
<tr><td>62_qimage_transformation_matrix.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/62_qimage_transformation_matrix.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/62_qimage_transformation_matrix.py</a></td></tr>
</table>

<p>Příklady prozatím připravené pro další část tohoto seriálu:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>63_qpainter.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/63_qpainter.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/63_qpainter.py</a></td></tr>
<tr><td>64_qpainter_smart_constructor.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/64_qpainter_smart_constructor.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/64_qpainter_smart_constructor.py</a></td></tr>
</table>



<p><a name="k17"></a></p>
<h2 id="k17">17. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>QImage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html</a>
</li>

<li>QPixmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html</a>
</li>

<li>QBitmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html</a>
</li>

<li>QPaintDevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html</a>
</li>

<li>QPicture<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html</a>
</li>

<li>QPainter<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html</a>
</li>

<li>Afinní zobrazení<br />
<a href="https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD">https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

