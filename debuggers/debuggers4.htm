<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Debuggery a jejich nadstavby v Linuxu (4): KDbg</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
</head>

<body>

<h1>Debuggery a jejich nadstavby v Linuxu (4): KDbg</h1>

<h3>Pavel Tišnovský</h3>

<h1>Úvodník</h1>

<p>Ve čtvrté a současně i předposlední části článku o debuggerech dostupných programátorům v Linuxu si popíšeme debugger (resp. přesněji řečeno nadstavbu pro GNU Debugger) nazvaný KDbg. Jak již název této aplikace napovídá, jedná se o nástroj určený primárně pro prostředí KDE, ovšem samozřejmě ho lze používat například i v GNOME Shellu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Aplikace KDbg</a></p>
<p><a href="#k02">2. Instalace nástroje KDbg</a></p>
<p><a href="#k03">3. Ladění programů: nastavení breakpointů a krokování</a></p>
<p><a href="#k04">4. Výpis zásobníku a hodnot lokálních proměnných</a></p>
<p><a href="#k05">5. Výpis hodnot uložených do pracovních registrů</a></p>
<p><a href="#k06">6. Obsah vybraného regionu operační paměti</a></p>
<p><a href="#k07">7. Prohlížení komplikovanějších datových struktur</a></p>
<p><a href="#k08">8. Porovnání vlastností nadstaveb nad GNU Debuggerem: DDD, Nemiver a KDbg</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Aplikace KDbg</h2>

<p>Další zajímavou a současně i užitečnou nadstavbou nad debuggerem <i>GNU Debugger</i> (ovládaným z&nbsp;příkazové řádky) je nástroj pojmenovaný jednoduše <i>KDbg</i>. Již počáteční písmeno v&nbsp;názvu této aplikace trošku napovídá, že se jedná o nástroj určený primárně pro desktopové prostředí <i>KDE</i>, ve skutečnosti je však samozřejmě možné <i>KDbg</i> použít i v&nbsp;GNOME Shellu či na desktopu, na němž se používá nějaký &bdquo;alternativní&ldquo; správce oken (Fluxbox atd.). <i>KDbg</i> vývojářům nabízí prakticky veškeré základní funkce, které jsou od debuggerů očekávány: nastavování breakpointů, nastavování watchpointů, krokování po jednotlivých příkazech, vstup do volaných funkcí, prohlížení obsahu operační paměti, prohlížení složitějších datových struktur apod. Již v&nbsp;úvodní větě jsme si řekli, že <i>KDbg</i> je ve skutečnosti nadstavbou nad klasickým <i>GNU Debuggerem</i>, což mj.&nbsp;znamená, že <i>KDbg</i> je možné v&nbsp;současné verzi použít pro ladění nativních aplikací naprogramovaných v&nbsp;jazycích Ada, C, C++, Go, Objective-C, D, Fortran, Modula-2, Pascal a Java (zde ovšem pouze při překladu do nativního strojového kódu). Nejpoužívanějšími jazyky laděných aplikací pravděpodobně zůstanou C a C++.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/011.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/011-450x312.png" alt="01" width="450" height="312" class="alignnone size-medium wp-image-5298" /></a>
<p><i>Obrázek 1: Grafické uživatelské rozhraní aplikace KDbg po spuštění.</i></p>

<p>Před dalším popisem aplikace <i>KDbg</i> je nutné se zmínit o tom, že tento nástroj ve své současné verzi neobsahuje všechny funkce, s&nbsp;nimiž jsme se seznámili v&nbsp;souvislosti s&nbsp;dnes již poněkud postarším ale v&nbsp;několika ohledech stále nepřekonaným <i>Data Display Debuggerem (DDD)</i>. Především &ndash; alespoň prozatím &ndash; neexistují pluginy, které by dokázaly <i>KDbg</i> propojit s&nbsp;dalšími typy řádkových debuggerů, například s&nbsp;debuggerem pro programovací jazyky Python, Perl či BASH. Na druhou stranu je však možné přímo v&nbsp;grafickém uživatelském prostředí <i>KDbg</i> ladit &bdquo;skripty&ldquo; napsané v&nbsp;jazyku <i>XSLT (Extensible Stylesheet Language Transformations)</i>, což může být v&nbsp;mnoha případech velmi užitečné. V&nbsp;navazujících kapitolách se budeme zabývat primárně laděním aplikací přeložených do nativního strojového kódu, tj.&nbsp;vlastně těmi vlastnostmi nástroje <i>KDbg</i>, které do značné míry závisí na možnostech interně volaného <i>GNU Debuggeru</i>.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/021.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/021-450x312.png" alt="02" width="450" height="312" class="alignnone size-medium wp-image-5299" /></a>
<p><i>Obrázek 2: Informace o licenci, autorech atd.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace nástroje KDbg</h2>

<p>Instalace nástroje <i>KDbg</i> je na systému Fedora snadná, ostatně podobně jako tomu bylo i u dříve popisovaných nástrojů <i>DDD</i> či <i>Nemiver</i>. Na Fedoře verze 20 a 21 se použije příkaz:</p>

<pre>
sudo yum install kdbg
</pre>

<p>Na Fedoře 22 se pak namísto nástroje <strong>yum</strong> může použít příkaz <strong>dnf</strong> (ovšem i příkaz <strong>yum</strong> je stále dostupný):</p>

<pre>
sudo dnf install kdbg
</pre>

<p>V&nbsp;případě, že používáte výchozí desktopové prostředí Fedory založené na GNOME Shellu, může instalace nástroje <i>KDbg</i> trval poněkud déle, a to z&nbsp;toho prostého důvodu, že se bude instalovat relativně velké množství knihoven pro Qt a KDE. Ostatně podívejme se na konkrétní příklad počítače používaného mj.&nbsp;i pro vývoj, na němž prozatím nebyly knihovny pro KDE nainstalovány:</p>

<pre>
sudo yum install kdbg
</pre>

<pre>
Loaded plugins: langpacks, priorities, refresh-packagekit
243 packages excluded due to repository priority protections
Resolving Dependencies
--&gt;gc Running transaction check
---&gt;gc Package kdbg.x86_64 1:2.5.4-1.fc20 will be installed
--&gt;gc Processing Dependency: libkio.so.5()(64bit) for package: 1:kdbg-2.5.4-1.fc20.x86_64
--&gt;gc Processing Dependency: libkdeui.so.5()(64bit) for package: 1:kdbg-2.5.4-1.fc20.x86_64
--&gt;gc Processing Dependency: libkdecore.so.5()(64bit) for package: 1:kdbg-2.5.4-1.fc20.x86_64
--&gt;gc Running transaction check
---&gt;gc Package kdelibs.x86_64 6:4.14.7-4.fc20 will be installed
--&gt;gc Processing Dependency: kdelibs-common = 6:4.14.7-4.fc20 for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: kde4-macros(api) = 2 for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: strigi-libs(x86-64) &gt;gc= 0.7.8 for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: soprano(x86-64) &gt;gc= 2.9.4 for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: shared-desktop-ontologies &gt;gc= 0.11.0 for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: phonon(x86-64) &gt;gc= 4.7.2 for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: kde-filesystem &gt;gc= 4-23 for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: dbusmenu-qt(x86-64) &gt;gc= 0.9.2 for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: kde-settings for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: kde-l10n for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: libstreams.so.0()(64bit) for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: libstreamanalyzer.so.0()(64bit) for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: libsopranoclient.so.1()(64bit) for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: libsoprano.so.4()(64bit) for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: libqca.so.2()(64bit) for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: libpolkit-qt-core-1.so.1()(64bit) for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: libphonon.so.4()(64bit) for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: libktexteditor.so.4()(64bit) for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: libkdewebkit.so.5()(64bit) for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: libfam.so.0()(64bit) for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: libdbusmenu-qt.so.2()(64bit) for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: libattica.so.0.4()(64bit) for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Processing Dependency: libHUpnp.so.1()(64bit) for package: 6:kdelibs-4.14.7-4.fc20.x86_64
--&gt;gc Running transaction check
</pre>

<p>Počet instalovaných balíčků je poměrně velký:</p>

<pre>
Dependencies Resolved
===============================================================================================================
 Package                                   Arch             Version                    Repository         Size
===============================================================================================================
Installing:
 kdbg                                      x86_64           1:2.5.4-1.fc20             updates           316 k
Installing for dependencies:
 attica                                    x86_64           0.4.2-2.fc20               fedora            233 k
 dbusmenu-qt                               x86_64           0.9.2-5.fc20               fedora             86 k
 gamin                                     x86_64           0.1.10-15.fc20             fedora            128 k
 herqq                                     x86_64           1.0.0-6.fc20               fedora            353 k
 kate-part                                 x86_64           4.14.3-5.fc20              updates           1.7 M
 kde-filesystem                            x86_64           4-46.fc20                  fedora             48 k
 kde-l10n                                  noarch           4.14.3-1.fc20              updates            14 k
 kde-settings                              noarch           20-18.fc20                 updates            48 k
 kdelibs                                   x86_64           6:4.14.7-4.fc20            updates            11 M
 kdelibs-common                            x86_64           6:4.14.7-4.fc20            updates           1.9 M
 kdelibs-ktexteditor                       x86_64           6:4.14.7-4.fc20            updates            78 k
 kdelibs-webkit                            x86_64           6:4.14.7-4.fc20            updates            60 k
 libiodbc                                  x86_64           3.52.7-6.fc20              fedora            182 k
 libqzeitgeist                             x86_64           0.8.0-10.fc20              fedora             72 k
 phonon                                    x86_64           4.7.2-1.fc20.1             updates           221 k
 phonon-backend-gstreamer                  x86_64           2:4.7.2-1.fc20             updates           147 k
 polkit-qt                                 x86_64           0.112.0-1.fc20             updates            72 k
 qca2                                      x86_64           2.0.3-6.fc20               fedora            429 k
 qtsoap                                    x86_64           2.7-6.fc20                 fedora             75 k
 redland-virtuoso                          x86_64           1.0.16-4.fc20              fedora             29 k
 shared-desktop-ontologies                 noarch           0.11.0-2.fc20              fedora            113 k
 soprano                                   x86_64           2.9.4-2.fc20               fedora            613 k
 strigi-libs                               x86_64           0.7.8-2.fc20               fedora            458 k
&nbsp;
Transaction Summary
===============================================================================================================
Install  1 Package (+23 Dependent packages)
&nbsp;
Total download size: 19 M
Installed size: 65 M
Is this ok [y/d/N]: 
</pre>

<p>Na distribucích založených na balíčcích .deb lze pro instalaci nástroje <i>KDbg</i> použít například utilitu <strong>apt-get</strong>:</p>

<pre>
sudo apt-get install kdbg
</pre>

<pre>
Reading package lists... Done
Building dependency tree
Reading state information... Done
Recommended packages:
  gdb
The following NEW packages will be installed:
  kdbg
0 upgraded, 1 newly installed, 0 to remove and 2 not upgraded.
Need to get 252 kB of archives.
After this operation, 1 184 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu/ trusty/universe kdbg amd64 2.5.4-1 [252 kB]
Fetched 252 kB in 1s (201 kB/s)
Selecting previously unselected package kdbg.
(Reading database ... 160357 files and directories currently installed.)
Preparing to unpack .../kdbg_2.5.4-1_amd64.deb ...
Unpacking kdbg (2.5.4-1) ...
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
Processing triggers for mime-support (3.54ubuntu1.1) ...
Processing triggers for gnome-menus (3.10.1-0ubuntu2) ...
Processing triggers for desktop-file-utils (0.22-1ubuntu1) ...
Setting up kdbg (2.5.4-1) ...
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Ladění programů: nastavení breakpointů a krokování</h2>

<p>Prakticky všechny základní pomůcky používané pro ladění aplikací, s&nbsp;nimiž jsme se seznámili v&nbsp;předchozích třech částech tohoto seriálu, samozřejmě nalezneme i v&nbsp;nástroji <i>KDbg</i>. Základem při ladění je propojení nativního (přeloženého) kódu se zdrojovým kódem, samozřejmě za předpokladu, že se při překladu aplikace použila volba <strong>-g</strong>. Ve chvíli, kdy dojde k&nbsp;načtení nativní aplikace do <i>KDbg</i>, pokusí se tento nástroj propojit laděnou aplikaci se zdrojovým kódem a použít čísla řádků uložená v&nbsp;nativní části pro zobrazování průběhu ladění i při nastavování breakpointů. V&nbsp;případě, že při ladění právě aktivní bod v&nbsp;programu &bdquo;náhodně&ldquo; přeskakuje mezi zdrojovými řádky, znamená to, že se při překladu použila optimalizace (ostatně s&nbsp;ní budou mít problém i další debuggery a nadstavby nad nimi). Podpora breakpointů je v&nbsp;nástroji <i>KDbg</i> srovnatelná s&nbsp;již popsanými nástroji: u každého breakpointu je možné nastavit podmínku, počet průchodů atd.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/032.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/032-450x312.png" alt="03" width="450" height="312" class="alignnone size-medium wp-image-5300" /></a>
<p><i>Obrázek 3: Laděný program bez nastaveného breakpointu podle očekávání zhavaroval na řádku číslo 5 (viz zpráva zobrazená v&nbsp;pravém dolním rohu). Aby bylo možné debuggerem odhalit, kde chyba vznikla, je nutné nastavit breakpoint před tento řádek.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/042.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/042-450x312.png" alt="04" width="450" height="312" class="alignnone size-medium wp-image-5301" /></a>
<p><i>Obrázek 4: Nastavení breakpointů. U každého breakpointu je v&nbsp;případě potřeby možné specifikovat podmínku pro zastavení popř.&nbsp;i počet průchodů bodem, na nějž je breakpoint nastaven.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výpis zásobníku a hodnot lokálních proměnných</h2>

<p>Nástroj <i>KDbg</i> dokáže přehledně zobrazit obsah zásobníku, resp.&nbsp;přesněji řečeno obsah zásobníkových rámců platných pro aktivní vlákno (ladění vícevláknových aplikací je ovšem funkční pouze v&nbsp;případě, že tuto funkci podporuje <i>GNU Debugger</i>!). Informace o zásobníkových rámcích je rozdělena do dvou podoken. V&nbsp;podoknu nazvaném <i>Stack</i> je možné sledovat pořadí volání funkcí a taktéž hodnoty předávaných parametrů. V&nbsp;podoknu nazvaném <i>Locals</i> naproti tomu můžeme vidět názvy a hodnoty všech lokálních proměnných a současně i názvy a hodnoty  předávaných parametrů (jak nestatické lokální proměnné, tak i parametry se ostatně nachází ve stejném zásobníkovém rámci). Příklad použití těchto dvou podoken je možné vidět na screenshotu číslo 5. Funkce <strong>main</strong> je zde volána s&nbsp;parametry <strong>argc==1</strong> a <strong>argv[0]=="/home/tester/a.out"</strong> (cesta ke spuštěné aplikaci); v&nbsp;okně <i>Locals</i> je navíc ještě zobrazena hodnota lokální proměnné <strong>p</strong>, což je ukazatel explicitně inicializovaný na NULL.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/052.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/052-450x312.png" alt="05" width="450" height="312" class="alignnone size-medium wp-image-5302" /></a>
<p><i>Obrázek 5: Prohlížení obsahu zásobníku (podokno vlevo dole) a lokálních proměnných (podokno vpravo nahoře).</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Výpis hodnot uložených do pracovních registrů</h2>

<p>Další velmi užitečnou funkcí nástroje <i>KDbg</i>, o níž je vhodné se v&nbsp;tomto článku alespoň ve stručnosti zmínit, je funkce zajišťující zobrazení hodnot uložených do pracovních registrů mikroprocesoru (to má samozřejmě význam pouze při krokování aplikace či při jejím zastavení na breakpointu). <i>KDbg</i> detekuje typ mikroprocesoru, na němž je laděná aplikace spuštěna, a dokáže zobrazit obsah prakticky všech pracovních registrů mikroprocesoru i koprocesorů, tj.&nbsp;jak registrů používaných pro celočíselné operace, tak i příznakových a řídicích registrů (flags, machine status word atd.), deskriptorů či segmentových registrů, registrů matematického mikroprocesoru popř.&nbsp;i registrů používaných v&nbsp;různých rozšířeních instrukčních sad (SSE, SSE2, ...). Pokud se v&nbsp;průběhu ladění obsah nějakého registru změní, dojde k&nbsp;jeho zvýraznění červenou barvou. Navíc se u registru <strong>IP</strong> (<i>Instruction Pointer</i>) může zobrazit jméno funkce a index právě zpracovávané instrukce (v&nbsp;rámci této funkce).</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/062.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/062-450x312.png" alt="06" width="450" height="312" class="alignnone size-medium wp-image-5303" /></a>
<p><i>Obrázek 6: Prohlížení obsahu pracovních registrů: všechny celočíselné registry platformy x86_64.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/073.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/073-450x312.png" alt="07" width="450" height="312" class="alignnone size-medium wp-image-5304" /></a>
<p><i>Obrázek 7: Prohlížení obsahu pracovních registrů: příznakové registry a deskriptory segmentů (opět platné pro platformu x86_64).</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/082.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/082-450x312.png" alt="08" width="450" height="312" class="alignnone size-medium wp-image-5305" /></a>
<p><i>Obrázek 8: Prohlížení obsahu pracovních registrů: všechny registry používané v&nbsp;rozšíření instrukční sady SSE.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Obsah vybraného regionu operační paměti</h2>

<p>Podobně jako tomu bylo u <a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">minule popsaného</a> nástroje <i>Nemiver</i>, dokáže i aplikace <i>KDbg</i> zobrazit obsah vybraného bloku operační paměti. Na listu <i>Memory</i> stačí do vstupního pole zadat adresu počáteční buňky sledovaného bloku paměti a z&nbsp;kontextového menu způsob interpretace dat uložených od zadané adresy. Jednotlivé bajty je možné sdružovat do vícebajtových slov a zobrazit tak celočíselné hodnoty typu <strong>byte/short int/int/long/long long</strong>, ovšem velmi užitečná je možnost interpretace bajtů jakoby se jednalo o hodnoty typu <i>float</i> či <i>double</i> (zde jsou možnosti <i>KDbg</i> větší, než u konkurenčního <i>Nemiveru</i>). Způsob použití zmíněné funkcionality můžeme vidět na sekvenci screenshotů zobrazených pod tímto odstavcem. Jedná se o ladění velmi jednoduché aplikace, která postupně naplní dvacetiprvkové pole typu <strong>float[]</strong>, takže je nutné, aby debugger uměl interpretovat obsah tohoto pole vhodným způsobem.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/092.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/092-450x312.png" alt="09" width="450" height="312" class="alignnone size-medium wp-image-5306" /></a>
<p><i>Obrázek 9: Tento krátký program použijeme pro zjištění možností výpisu vybraného regionu operační paměti. V&nbsp;programu je deklarováno globální pole typu float[] s&nbsp;dvaceti prvky.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/102.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/102-450x312.png" alt="10" width="450" height="312" class="alignnone size-medium wp-image-5307" /></a>
<p><i>Obrázek 10: Výpis obsahu pole prvek po prvku (pravé dolní podokno nazvané Watches). Povšimněte si, že sledovaný výraz je jednoduchý &ndash; obsahuje pouze jméno pole.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/112.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/112-450x312.png" alt="11" width="450" height="312" class="alignnone size-medium wp-image-5308" /></a>
<p><i>Obrázek 11: Zjištění adresy pole pomocí operátoru &amp; (pravé dolní podokno se zvýrazněným řádkem). Důležitá je hodnota <strong>0x601060</strong>, kterou použijeme dále.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/122.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/122-450x296.png" alt="12" width="450" height="296" class="alignnone size-medium wp-image-5309" /></a>
<p><i>Obrázek 12: Obsah operační paměti od adresy <strong>0x601060</strong> je vypsán ve formátu reálných čísel typu float (levé dolní podokno).</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Prohlížení komplikovanějších datových struktur</h2>

<p>Při pohledu na screenshoty je patrné, že <i>KDbg</i> má poměrně velké množství vlastností společných s&nbsp;nadstavbou <i>Nemiver</i>. Prakticky totožné je chování těchto dvou nadstaveb nad <i>GNU Debuggerem</i> ve chvíli, kdy vývojář stojí před úkolem zobrazit obsah komplikovanějších datových struktur. <i>KDbg</i> používá pro zobrazení obsahu složitějších struktur (stromu, lineárně vázaného seznamu atd.) způsob zobrazení, který můžeme vidět na screenshotech číslo 13 až 15. Na těchto obrázcích lze vidět GUI widget používaný v&nbsp;jiných aplikacích pro zobrazení stromové struktury, která sice není tak obecná jako orientované či neorientované grafy (viz <a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/#k02">popis</a> <i>Data Display Debuggeru</i>), ovšem pro potřeby většiny aplikací by toto zobrazení mohlo být dostatečné. Podobným způsobem se zobrazuje i obsah polí, což jsme si již ostatně ukázali na screenshotu číslo 10 uvedeného <a href="#k06">v&nbsp;předchozí kapitole</a>.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/132.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/132-450x312.png" alt="13" width="450" height="312" class="alignnone size-medium wp-image-5310" /></a>
<p><i>Obrázek 13: Program, který vytváří stromovou datovou strukturu.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/143.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/143-450x312.png" alt="14" width="450" height="312" class="alignnone size-medium wp-image-5311" /></a>
<p><i>Obrázek 14: Zobrazení kořenového uzlu stromové datové struktury.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/152.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/152-450x312.png" alt="15" width="450" height="312" class="alignnone size-medium wp-image-5312" /></a>
<p><i>Obrázek 15: Zobrazení dalších prvků stromové datové struktury.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Obsah poslední části seriálu</h2>

<p>V&nbsp;páté a současně i v&nbsp;poslední části seriálu o debuggerech pro Linux si popíšeme způsob propojení debuggeru s&nbsp;editorem Emacs. Taktéž se stručně zmíníme o propojení debuggeru s&nbsp;konkurenčním editorem Vim. Na závěr budou všechny doposud popsané debuggery a jejich GUI nadstavby porovnány, a to jak z&nbsp;hlediska nabízené funkcionality, tak i z&nbsp;pohledu vývojářů, kteří většinou potřebují používat debugger bez toho, aby se museli zdlouhavě a složitě naučit jeho ovládání.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/162.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/162-450x312.png" alt="16" width="450" height="312" class="alignnone size-medium wp-image-5313" /></a>
<p><i>Obrázek 16: Libovolnou oblast paměti lze zpětně přeložit disassemblerem.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Odkazy na Internetu</h2>

<ol>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (1.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (2.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>KDbg: úvodní stránka<br />
<a href="http://www.kdbg.org/">http://www.kdbg.org/</a>
</li>

<li>Nemiver (stránky projektu)<br />
<a href="https://wiki.gnome.org/Apps/Nemiver">https://wiki.gnome.org/Apps/Nemiver</a>
</li>

<li>Nemiver FAQ<br />
<a href="https://wiki.gnome.org/Apps/Nemiver/FAQ">https://wiki.gnome.org/Apps/Nemiver/FAQ</a>
</li>

<li>Nemiver (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Nemiver">https://en.wikipedia.org/wiki/Nemiver</a>
</li>

<li>Data Display Debugger<br />
<a href="https://www.gnu.org/software/ddd/">https://www.gnu.org/software/ddd/</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>BASH Debugger<br />
<a href="http://bashdb.sourceforge.net/">http://bashdb.sourceforge.net/</a>
</li>

<li>The Perl Debugger(s)<br />
<a href="http://debugger.perl.org/">http://debugger.perl.org/</a>
</li>

<li>Visual Debugging with DDD<br />
<a href="http://www.drdobbs.com/tools/visual-debugging-with-ddd/184404519">http://www.drdobbs.com/tools/visual-debugging-with-ddd/184404519</a>
</li>

<li>Pydb - Extended Python Debugger<br />
<a href="http://bashdb.sourceforge.net/pydb/">http://bashdb.sourceforge.net/pydb/</a>
</li>

<li>Insight<br />
<a href="http://www.sourceware.org/insight/">http://www.sourceware.org/insight/</a>
</li>

<li>Supported Languages (GNU Debugger)<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Clewn<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>Clewn installation<br />
<a href="http://clewn.sourceforge.net/install.html">http://clewn.sourceforge.net/install.html</a>
</li>

<li>Clewn - soubory ke stažení<br />
<a href="http://sourceforge.net/projects/clewn/files/OldFiles/">http://sourceforge.net/projects/clewn/files/OldFiles/</a>
</li>

<li>Pyclewn installation notes<br />
<a href="http://pyclewn.sourceforge.net/install.html">http://pyclewn.sourceforge.net/install.html</a>
</li>

<li>Debugging<br />
<a href="http://janus.uclan.ac.uk/pagray/labs/debug.htm">http://janus.uclan.ac.uk/pagray/labs/debug.htm</a>
</li>

</ol>



</body>
</html>

