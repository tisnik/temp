<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Debuggery a jejich nadstavby v Linuxu (3): Nemiver</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
</head>

<body>

<h1>Debuggery a jejich nadstavby v Linuxu (3): Nemiver</h1>

<h3>Pavel Tišnovský</h3>

<body>

<h1>Debuggery a jejich nadstavby v Linuxu (3): Nemiver</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části článku o debuggerech dostupných programátorům v Linuxu se budeme zabývat další nadstavbou vytvořenou nad GNU Debuggerem. Tato nadstavba se jmenuje Nemiver a určena je především vývojářům pracujících v programovacích jazycích C a C++.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Aplikace Nemiver</a></p>
<p><a href="#k02">2. Instalace Nemiveru</a></p>
<p><a href="#k03">3. We hate splash screens</a></p>
<p><a href="#k04">4. Nastavení breakpointů, spuštění a krokování laděné aplikace</a></p>
<p><a href="#k05">5. Ladění na úrovni assembleru</a></p>
<p><a href="#k06">6. Sledování obsahu operační paměti</a></p>
<p><a href="#k07">7. Prohlížení datových struktur použitých v&nbsp;laděné aplikaci</a></p>
<p><a href="#k08">8. Co v&nbsp;Nemiveru nenajdeme</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Aplikace Nemiver</h2>

<p><a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">V&nbsp;předchozí části</a> článku o debuggerech, které jsou dostupné vývojářům pracujícím s&nbsp;Linuxem, jsme se zabývali popisem nástroje <i>Data Display Debugger</i> neboli zkráceně <i>DDD</i>. Připomeňme si, že <i>Data Display Debugger</i> sice používá dnes již zastaralou knihovnu pro grafické uživatelské rozhraní a i vývoj <i>DDD</i> je dnes velmi pomalý, na druhou stranu se však jedná o vyspělou aplikaci, která programátorům nabízí rozhraní jak pro klasický GNU Debugger, tak i pro některé další debuggery používané například pro ladění aplikací v&nbsp;Perlu, Pythonu či v&nbsp;BASHi. Navíc nesmíme zapomenout na jednu velmi důležitou oblast, ve které <i>Data Display Debugger</i> exceluje &ndash; jedná se o možnost zobrazení i velmi složitých datových struktur, jakými jsou různé typy stromů či grafů.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/01.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/01-450x351.png" alt="01" width="450" height="351" class="alignnone size-medium wp-image-5258" /></a>
<p><i>Obrázek 1: Takto vypadá debugger Nemiver po spuštění.</i></p>

<p>Dnes si popíšeme další podobný nástroj, který se jmenuje <i>Nemiver</i>. Tento nástroj je navržen takovým způsobem, aby dobře zapadal do desktopového prostředí GNOME, ve skutečnosti ho však (pochopitelně) mohou používat i ti uživatelé, kteří preferují použití odlišného desktopového prostředí či namísto něho používají &bdquo;jen&ldquo; správce oken; ostatně většina screenshotů v&nbsp;dnešním článku byla pořízena na počítači s&nbsp;Fluxboxem a nikoli s&nbsp;plnohodnotným prostředím GNOME.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/02.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/02-450x351.png" alt="02" width="450" height="351" class="alignnone size-medium wp-image-5259" /></a>
<p><i>Obrázek 2: Logo Nemiveru je skutečně zvláštní.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace Nemiveru</h2>

<p>Instalace aplikace <i>Nemiver</i> je na Fedoře velmi jednoduchá. Na Fedoře verze 20 a 21 se použije příkaz:</p>

<pre>
sudo yum install nemiver
</pre>

<p>Na Fedoře 22 se pak namísto nástroje <strong>yum</strong> může použít příkaz <strong>dnf</strong> (ovšem i příkaz <strong>yum</strong> je stále dostupný):</p>

<pre>
sudo dnf install nemiver
</pre>

<a href="http://fedora.cz/wp-content/uploads/2015/06/031.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/031-450x288.png" alt="03" width="450" height="288" class="alignnone size-medium wp-image-5260" /></a>
<p><i>Obrázek 3: Průběh instalace Nemiveru na Fedoře verze 21.</i></p>

<p>Na distribucích založených na balíčcích .deb lze pro instalaci <i>Nemiveru</i> použít například utilitu <strong>apt-get</strong>:</p>

<pre>
sudo apt-get install nemiver
</pre>

<pre>
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following extra packages will be installed:
  gdb
Suggested packages:
  gdb-doc gdbserver
Recommended packages:
  libc-dbg
The following NEW packages will be installed:
  gdb nemiver
0 upgraded, 2 newly installed, 0 to remove and 2 not upgraded.
Need to get 5 608 kB of archives.
After this operation, 30,1 MB of additional disk space will be used.
Do you want to continue? [Y/n] 
...
...
...
Setting up gdb (7.7.1-0ubuntu5~14.04.2) ...
Setting up nemiver (0.9.5-2) ...
</pre>

<a href="http://fedora.cz/wp-content/uploads/2015/06/041.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/041-450x351.png" alt="04" width="450" height="351" class="alignnone size-medium wp-image-5261" /></a>
<p><i>Obrázek 4: Nemiver je možné na Debianu/Ubuntu/MINTu nainstalovat i přes nástroj Synaptic atd.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. We hate splash screens</h2>

<p>Název této kapitoly poměrně přesně vystihuje, jakou filozofií se řídili autoři debuggeru <i>Nemiver</i>: <a href="https://en.wikipedia.org/wiki/KISS_principle">KISS</a>. Tato aplikace se totiž snaží o použití přehledného a přitom snadno ovladatelného grafického uživatelského rozhraní, takže zde nalezneme jen několik dialogů (nejsložitějším dialogem je dialog <i>Preferences</i>), hlavní okno <i>Nemiveru</i> není přeplácáno mnoha ovládacími prvky a i samotný nástrojový pruh obsahuje pouze několik základních příkazů používaných při ladění. To ovšem neznamená, že by <i>Nemiver</i> své uživatele ochuzoval o základní funkce, o nichž jsme se zmínili při popisu <i>GNU Debuggeru</i>: <i>Nemiver</i> umožňuje krokování programu na úrovni zdrojového kódu či assembleru, je možné nastavovat breakpointy, sledovat hodnotu libovolné lokální či globální proměnné, připojit se k&nbsp;běžícímu procesu a díky použití <i>gdbserveru</i> je dokonce možné, aby se <i>Nemiver</i> připojil k&nbsp;aplikaci běžící na vzdáleném počítači. Užitečné je, že pro obarvení zdrojových kódů se používá stejný subsystém, jaký využívá textový editor <i>Gedit</i> (autoři se v&nbsp;této oblasti nesnažili znovuobjevit kolo, mimochodem pro zobrazení zdrojového kódu v&nbsp;aplikaci <i>Nemiver</i> se interně používá knihovna nazvaná <strong>gtksourceviewmm3</strong>).</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/051.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/051-450x351.png" alt="05" width="450" height="351" class="alignnone size-medium wp-image-5262" /></a>
<p><i>Obrázek 5: Prostředí aplikace Nemiver je skutečně přehledné a jednoduše použitelné.</i></p>

<p>Velmi užitečnou vlastností je podpora takzvaných &bdquo;sezení&ldquo; (session). Kdykoli je <i>Nemiver</i> ukončen, zapamatuje si, která aplikace byla laděna, na kterých řádcích byly nastaveny breakpointy atd. K&nbsp;ladění této aplikace se lze kdykoli k&nbsp;budoucnu vrátit a to bez nutnosti explicitně vytvářet projekty či se nějak dále o uložená sezení starat. Mimochodem &ndash; veškerá nastavení naleznete v&nbsp;souboru <strong>~/.nemiver/nemivercommon.db</strong> a jak již koncovka tohoto souboru napovídá, jedná se o SQLite databázi (obsah této databáze je jednoduché exportovat do textového souboru, takže uživatelé nemusí nutně ztratit všechny výhody textových souborů a nástrojů pro jejich zpracování).</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/061.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/061-450x351.png" alt="06" width="450" height="351" class="alignnone size-medium wp-image-5263" /></a>
<p><i>Obrázek 6: Velmi užitečná vlastnost &ndash; Nemiver si ukládá informace o předchozích &bdquo;sezeních&ldquo; a dovolí se k&nbsp;těmto sezením kdykoli v&nbsp;budoucnu vrátit. Není přitom zapotřebí vytvářet žádné projekty ani explicitně ukládat nastavení.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Nastavení breakpointů, spuštění a krokování laděné aplikace</h2>

<p><i>Nemiver</i> podporuje čtyři základní způsoby, jakými je možné začít ladit aplikaci. Buď je možné otevřít nativní soubor či knihovnu s&nbsp;aplikací a pokud byl překlad proveden s&nbsp;volbou <strong>-g</strong>, načte se do <i>Nemiveru</i> i příslušný zdrojový kód. Alternativně je možné se připojit k&nbsp;běžící aplikaci, připojit se ke vzdáleně běžící aplikaci popř.&nbsp;otevřít tzv.&nbsp;<i>core dump</i>, který je vygenerován ve chvíli pádu laděné aplikace (ovšem pouze v&nbsp;tom případě, že je systém korektně nastaven &ndash; soubory <i>core dumpu</i> jsou totiž obecně dosti rozsáhlé, protože mj.&nbsp;obsahují i kopii paměti přidělené procesu.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/072.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/072-450x351.png" alt="07" width="450" height="351" class="alignnone size-medium wp-image-5275" /></a>
<p><i>Obrázek 7: Nastavení breakpointu ve zdrojovém kódu laděné aplikace. V&nbsp;dolní části okna Nemiveru můžeme vidět aktuální hodnoty lokálních proměnných.</i></p>

<p>Nezávisle na způsobu zahájení ladění nabízí <i>Nemiver</i> jak společné GUI prvky (toolbar, menu), tak i klávesové zkratky používané při ladění. Význam těchto klávesových zkratek je vypsán v&nbsp;následující tabulce (některé klávesové zkratky pravděpodobně budete znát i z&nbsp;dalších vývojových nástrojů):</p>

<table>
<tr><th> #</th><th>Zkratka</th><th>Význam</th></tr>
<tr><td> 1</td><td>Shift+F5</td><td>spuštění laděné aplikace</td></tr>
<tr><td> 2</td><td>F5</td><td>znovuspuštění aplikace (konec krokování)</td></tr>
<tr><td> 3</td><td>F11</td><td>spuštění aplikace a zastavení na místě, kde se nachází kurzor</td></tr>
<tr><td> 4</td><td>F9</td><td>zastavení aplikace</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>F8</td><td>nastavení breakpointu či naopak vymazání breakpointu</td></tr>
<tr><td> 6</td><td>Ctrl+B</td><td>nastavení breakpointu</td></tr>
<tr><td> 7</td><td>Ctrl+T</td><td>nastavení watchpointu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>F6</td><td>přechod na další příkaz při krokování</td></tr>
<tr><td> 9</td><td>F7</td><td>dtto ale se vstupem do funkce</td></tr>
<tr><td>10</td><td>Shift+F7</td><td>výstup z funkce</td></tr>
</table>

<a href="http://fedora.cz/wp-content/uploads/2015/06/081.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/081-387x450.png" alt="08" width="387" height="450" class="alignnone size-medium wp-image-5265" /></a>
<p><i>Obrázek 8: Způsob nastavení breakpointů je ukázán ve vestavěné nápovědě (která využívá stejný systém nápovědy jako mnohé další aplikace pro desktopové prostředí Gnome).</i></p>

<p>Užitečná je především klávesová zkratka <strong>F8</strong> popř.&nbsp;<strong>Ctrl+B</strong> používaná pro nastavení breakpointů. Vytvořit je možné jednoduchý breakpoint popř.&nbsp;breakpoint aplikovaný až ve chvíli, kdy dojde ke splnění zadané podmínky nebo až dojde k&nbsp;vícenásobnému zavolání funkce či programové smyčky (počet volání nebo průchodů smyčkou je možné zapsat do příslušného dialogu). Podobným způsobem se nastavují watchpointy, pro něž je samozřejmě možné nastavit, zda se mají vyvolat při čtení hodnoty vybrané proměnné či naopak při zápisu do proměnné (popř.&nbsp;při čtení a taktéž při zápisu).</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/091.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/091-450x351.png" alt="09" width="450" height="351" class="alignnone size-medium wp-image-5266" /></a>
<p><i>Obrázek 9: Dialog s&nbsp;volbou, kam se má přenést řízení laděné aplikace.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Ladění na úrovni assembleru</h2>

<p><i>Nemiver</i> umožňuje, podobně jako je tomu v&nbsp;případě mnoha dalších debuggerů a nadstaveb nad debuggery, zobrazit kromě zdrojového kódu i disassemblovaný kód, čehož je možné využít jak při zkoumání vlastností překladače, tak i při hledání některých dobře ukrytých chyb :-). Při přepnutí do režimu disassembleru, které se provádí z&nbsp;menu popř.&nbsp;klávesovou zkratkou <strong>Ctrl+A</strong>, se změní i systém krokování, protože to se již neprovádí na úrovni jednotlivých příkazů příslušného vyššího programovacího jazyka, ale naopak na úrovni jednotlivých strojových instrukcí. Při krokování je možné si zobrazit obsah všech pracovních registrů mikroprocesoru a sledovat jejich změnu: registr, jehož obsah se změnil, se zvýrazní červenou barvou. Užitečné je, že <i>Nemiver</i> dokáže zobrazit jak celočíselné registry a segmentové registry, tak i registry matematického koprocesoru i registry používané v&nbsp;různých rozšířeních instrukčních sad (<i>XMM</i> atd.). Díky tomu je možné ladit i ty aplikace, které jsou přeloženy s&nbsp;příslušnými přepínači, například -mmmx, -msse, -msse2, -msse3, -mssse3, -msse4.1, -msse4.2, -msse4 či -mavx.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/161.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/161-450x351.png" alt="16" width="450" height="351" class="alignnone size-medium wp-image-5273" /></a>
<p><i>Obrázek 10: Takto vypadá část kódu funkce main při použití disassembleru.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Sledování obsahu operační paměti</h2>

<p>V&nbsp;některých případech je při hledání chyb důležité si prohlédnout obsah vybrané oblasti operační paměti přidělené aplikaci. I tuto funkci <i>Nemiver</i>, obsahuje, musíme se ovšem smířit s&nbsp;některými omezeními. Obsah paměti od specifikované adresy je zobrazen ve formátu používaném například historickými programy typu <i>monitor</i>, tj.&nbsp;jedná se o třísloupcový výpis, kde v&nbsp;prvním sloupci jsou zobrazeny adresy začátku řádku, následuje výpis obsahu buněk operační paměti (seskupený do bajtů či vícebajtových slov) a ve sloupci posledním pak nalezneme znaky odpovídající jednotlivým bajtům. Bohužel však není možné si vybrané bajty zobrazit ve formátu používaném matematickým koprocesorem, takže například &bdquo;pohled&ldquo; na pole hodnot typu <i>float</i> či <i>double</i> je dosti problematický. To stejné platí při snaze o zobrazení vybrané oblasti paměti ve formě řetězce uloženého s&nbsp;použitím UTF-8 či UTF-16.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/101.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/101-450x351.png" alt="10" width="450" height="351" class="alignnone size-medium wp-image-5267" /></a>
<p><i>Obrázek 11: Sledování obsahu operační paměti.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/111.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/111-450x162.png" alt="11" width="450" height="162" class="alignnone size-medium wp-image-5268" /></a>
<p><i>Obrázek 12: Sledování obsahu operační paměti.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Prohlížení datových struktur použitých v&nbsp;laděné aplikaci</h2>

<p><a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">Minule</a> jsme se seznámili s&nbsp;propracovanými možnostmi <i>Data Display Debuggeru</i> při zobrazování složitých datových struktur, například (binárních) stromů či grafů. <i>Data Display Debugger</i> mohl v&nbsp;případě potřeby tyto struktury zobrazit graficky &ndash; každý prvek struktury byl představován obdélníkem, šipky mezi obdélníky pak naznačovaly použití ukazatelů (pointerů). Dnes popisovaná aplikace <i>Nemiver</i> používá pro zobrazení obsahu jednoduchých proměnných ale i složitějších struktur poněkud jiný způsob zobrazení, který můžeme vidět na screenshotech číslo 12 a 13. Na těchto obrázcích lze vidět GUI widget používaný v&nbsp;jiných aplikacích pro zobrazení stromové struktury, která sice není tak obecná jako orientované či neorientované grafy, ovšem pro potřeby většiny aplikací by toto zobrazení mohlo být dostatečné. S&nbsp;využitím myši a ikon šipek lze jednotlivé uzly grafu zobrazit či naopak skrýt. Na screenshotu číslo 14 pak můžeme vidět způsob zobrazení obsahu jednorozměrného a dvourozměrného pole (což je samozřejmě taktéž velmi užitečné).</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/121.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/121-450x351.png" alt="12" width="450" height="351" class="alignnone size-medium wp-image-5269" /></a>
<p><i>Obrázek 13: Zobrazení kořenového elementu binárního stromu.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/131.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/131-439x450.png" alt="13" width="439" height="450" class="alignnone size-medium wp-image-5270" /></a>
<p><i>Obrázek 14: &bdquo;Rozbalení&ldquo;dalších elementů binárního stromu.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/142.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/142-361x450.png" alt="14" width="361" height="450" class="alignnone size-medium wp-image-5277" /></a>
<p><i>Obrázek 15: Způsob zobrazení obsahu jednorozměrného a dvourozměrného pole.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Co v&nbsp;Nemiveru nenajdeme</h2>

<p>Z&nbsp;předchozích kapitol je pravděpodobně patrné, že <i>Nemiver</i> může být pro mnoho vývojářů velmi užitečným a současně i snadno použitelným nástrojem, jehož ovládání se lze naučit doslova za několik minut. Ovšem na tomto místě je nutné dodat, že některé funkce programátorům a testerům v&nbsp;současné verzi nenabízí. Pokud <i>Nemiver</i> porovnáme s&nbsp;minule popsaným <i>Data Display Debuggerem</i>, zjistíme, že například není možné propojit <i>Nemiver</i> s&nbsp;dalšími debuggery určenými pro ladění aplikací naprogramovaných v&nbsp;Pythonu, Perlu či BASHi (v&nbsp;mnoha případech by se hodilo i propojení s&nbsp;řádkovým debuggerem Javy).</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/141.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/141-387x450.png" alt="14" width="387" height="450" class="alignnone size-medium wp-image-5271" /></a>
<p><i>Obrázek 16: Nemiver používá stejný systém (topic-based) nápovědy jako mnoho dalších aplikací z&nbsp;prostředí Gnome.</i></p>

<p>Taktéž možnosti zobrazení datových struktur jsou v&nbsp;porovnání s&nbsp;<i>Data Display Debuggerem</i> poněkud menší a některé možnosti <i>GNU Debuggeru</i> nejsou přímo z&nbsp;grafického uživatelského rozhraní <i>Nemiveru</i> dostupné vůbec. Jedná se například o možnost nastavení watchpointů &ndash; s&nbsp;těmi je sice možné pracovat (viz též předchozí kapitoly), ale některé nízkoúrovňové operace lze nastavit jen přímo v&nbsp;<i>GNU Debuggeru</i>.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/151.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/151-450x351.png" alt="15" width="450" height="351" class="alignnone size-medium wp-image-5272" /></a>
<p><i>Obrázek 17: V&nbsp;dolní polovině okna můžeme vidět zobrazení obsahu pracovních registrů mikroprocesoru.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Odkazy na Internetu</h2>

<ol>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (1.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (2.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Nemiver (stránky projektu)<br />
<a href="https://wiki.gnome.org/Apps/Nemiver">https://wiki.gnome.org/Apps/Nemiver</a>
</li>

<li>Nemiver FAQ<br />
<a href="https://wiki.gnome.org/Apps/Nemiver/FAQ">https://wiki.gnome.org/Apps/Nemiver/FAQ</a>
</li>

<li>Nemiver (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Nemiver">https://en.wikipedia.org/wiki/Nemiver</a>
</li>

<li>Data Display Debugger<br />
<a href="https://www.gnu.org/software/ddd/">https://www.gnu.org/software/ddd/</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>BASH Debugger<br />
<a href="http://bashdb.sourceforge.net/">http://bashdb.sourceforge.net/</a>
</li>

<li>The Perl Debugger(s)<br />
<a href="http://debugger.perl.org/">http://debugger.perl.org/</a>
</li>

<li>Visual Debugging with DDD<br />
<a href="http://www.drdobbs.com/tools/visual-debugging-with-ddd/184404519">http://www.drdobbs.com/tools/visual-debugging-with-ddd/184404519</a>
</li>

<li>Pydb - Extended Python Debugger<br />
<a href="http://bashdb.sourceforge.net/pydb/">http://bashdb.sourceforge.net/pydb/</a>
</li>

<li>Insight<br />
<a href="http://www.sourceware.org/insight/">http://www.sourceware.org/insight/</a>
</li>

<li>Supported Languages (GNU Debugger)<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Clewn<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>Clewn installation<br />
<a href="http://clewn.sourceforge.net/install.html">http://clewn.sourceforge.net/install.html</a>
</li>

<li>Clewn - soubory ke stažení<br />
<a href="http://sourceforge.net/projects/clewn/files/OldFiles/">http://sourceforge.net/projects/clewn/files/OldFiles/</a>
</li>

<li>Pyclewn installation notes<br />
<a href="http://pyclewn.sourceforge.net/install.html">http://pyclewn.sourceforge.net/install.html</a>
</li>

</ol>



</body>
</html>

