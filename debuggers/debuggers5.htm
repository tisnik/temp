<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v editorech Emacs a Vim</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
</head>

<body>

<h1>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v editorech Emacs a Vim</h1>

<h3>Pavel Tišnovský</h3>

<h1>Úvodník</h1>

<p>Pátá a současně i poslední část miniseriálu o debuggerech dostupných programátorům v Linuxu je věnována popisu propojení populárních textových editorů Emacs a Vim s debuggery, především pak s GNU Debuggerem. Toto propojení je v mnoha ohledech výhodné, protože programátoři mohou využívat známé uživatelské prostředí svých textových editorů a příkazy do GNU Debuggeru mohou zadávat pouze v odůvodněných případech.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Propojení textových editorů s debuggery</a></p>
<p><a href="#k02">2. Textový editor Emacs ve funkci integrovaného vývojového prostředí</a></p>
<p><a href="#k03">3. Emacs a GNU Debugger</a></p>
<p><a href="#k04">4. Spuštění debuggeru z&nbsp;prostředí Emacsu</a></p>
<p><a href="#k05">5. Breakpointy, krokování a základní klávesové zkratky</a></p>
<p><a href="#k06">6. Výpis obsahu bloku operační paměti a lokálních proměnných</a></p>
<p><a href="#k07">7. Obsah pracovních registrů procesoru a disassembler</a></p>
<p><a href="#k08">8. Textový editor Vim ve funkci integrovaného vývojového prostředí</a></p>
<p><a href="#k09">9. Funkce Vimu, které jsou používané pluginy spolupracujícími s&nbsp;debuggery</a></p>
<p><a href="#k10">10. Plugin <strong>Clewn</strong> zajišťující spolupráci s&nbsp;debuggery</a></p>
<p><a href="#k11">11. Použití pluginu <strong>Clewn</strong> v&nbsp;praxi</a></p>
<p><a href="#k12">12. Plugin <strong>Pyclewn</strong></a></p>
<p><a href="#k13">13. Předchozí části tohoto seriálu</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Propojení textových editorů s debuggery</h2>

<p>V&nbsp;předchozích čtyřech částech seriálu o debuggerech dostupných pro Linux jsme se zabývali převážně popisem debuggerů ovládaných z&nbsp;příkazové řádky (s&nbsp;důrazem na GNU Debugger) a taktéž některými nadstavbami nad těmito debuggery. Tyto nadstavby, ať již vývojářům nabízely celoobrazovkové textové uživatelské rozhraní či plnohodnotné grafické uživatelské rozhraní (GUI), byly v&nbsp;podstatě jednoúčelovými nástroji, protože jejich mnohdy jedinou funkcí bylo zobrazení zdrojového kódu laděné aplikace, posílání příkazů debuggeru a zobrazení zpráv či dalších informací vracených debuggerem (obsah paměti, disassemblovaný kód, hodnoty sledovaných proměnných, stav zásobníku) zpět do nadstavbové aplikace.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/07.png"><img class="alignnone size-medium wp-image-5220" src="http://fedora.cz/wp-content/uploads/2015/06/07-450x379.png" alt="07" width="450" height="379" /></a>
<p><i>Obrázek 1: Pro připomenutí: grafické uživatelské rozhraní Data Display Debuggeru popsané <a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">ve druhé části tohoto seriálu</a>.</i></p>

<p>Na tom, že většina dříve popsaných aplikací (<i>Data Display Debugger</i>, <i>Nemiver</i>, <i>KDbg</i>) je zaměřena pouze na jednu činnost, samozřejmě není nic špatného a odpovídá to filozofii, na které jsou postaveny všechny unixové systémy. Nicméně někteří uživatelé preferují integraci uživatelského rozhraní debuggeru s&nbsp;dalšími vývojovými nástroji, ať již s&nbsp;plnohodnotnými IDE nebo s&nbsp;programátorskými textovými editory. Dnes se budeme zabývat právě druhou zmíněnou možností, tedy možným způsobům propojení debuggerů s&nbsp;textovými editory.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/051.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/051-450x351.png" alt="05" width="450" height="351" class="alignnone size-medium wp-image-5262" /></a>
<p><i>Obrázek 2: Další popsaná nadstavba nad GNU Debuggerem: prostředí aplikace Nemiver (<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">třetí část seriálu</a>).</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/042.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/042-450x312.png" alt="04" width="450" height="312" class="alignnone size-medium wp-image-5301" /></a>
<p><i>Obrázek 3: Poslední již popsaná nadstavba nad GNU Debuggerem: prostředí aplikace KDbg (<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">čtvrtá část seriálu</a>).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Textový editor Emacs ve funkci integrovaného vývojového prostředí</h2>

<p>Prvním programátorským textovým editorem nabízejícím propojení s&nbsp;GNU Debuggerem, popř.&nbsp;i s&nbsp;dalšími typy debuggerů, je slavný a stále oblíbený editor <i>GNU Emacs (Editor MACroS)</i>, který poměrně nedávno dosáhl verze 24.5. Díky tomu, že je tento programátorský editor relativně snadno rozšiřitelný s&nbsp;využitím skriptů a modulů naprogramovaných v&nbsp;jazyce Lisp, přesněji řečeno v&nbsp;jeho dialektu nazvaném <a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html">Emacs Lisp</a> (též <i>Elisp</i>), existuje v&nbsp;současnosti poměrně velké množství propracovaných modulů, které z&nbsp;<i>Emacsu</i> vytváří sofistikované integrované vývojové prostředí (IDE), jež se navíc v&nbsp;případě potřeby dokáže přizpůsobit mnoha programovacím jazykům (překladačům i interpretrům).</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/043.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/043-450x336.png" alt="04" width="450" height="336" class="alignnone size-medium wp-image-5347" /></a>
<p><i>Obrázek 4: Spuštění textového editoru Emacs se zobrazením hypertextového souboru s&nbsp;nápovědou.</i></p>

<p>Textový editor <i>Emacs</i> je možné v&nbsp;závislosti na tom, jaký typ souboru je právě otevřený, přepínat mezi různými režimy, přičemž v&nbsp;každém režimu mohou být použity jiné klávesové zkratky, zobrazena odlišná okna (nejenom klasická okna s&nbsp;editovaným textem) apod. V&nbsp;dnešním článku se budeme zabývat jediným režimem &ndash; laděním programů s&nbsp;využitím GNU Debuggeru. O propojení debuggeru s&nbsp;Emacsem se stará knihovna <i>GUD</i> neboli <i>Grand Unified Debugger</i>.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/053.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/053-450x336.png" alt="05" width="450" height="336" class="alignnone size-medium wp-image-5348" /></a>
<p><i>Obrázek 5: Inicializace knihovny GUD a připojení Emacsu ke GNU Debuggeru.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Emacs a GNU Debugger</h2>

<p>Výše zmíněná knihovna <i>Grand Unified Debugger</i> mj.&nbsp;zajišťuje i propojení mezi textovým editorem <i>GNU Emacs</i> a debuggerem <i>GNU Debugger</i>. V&nbsp;tomto režimu je možné si v&nbsp;okně Emacsu zobrazit zdrojový kód a současně i několik bufferů obsahujících jak textové uživatelské rozhraní debuggeru (konzoli, která je aktivní, tj.&nbsp;lze do ní zapisovat příkazy), tak i speciální buffer s&nbsp;hodnotami pracovních registrů procesoru, další buffer se seznamem breakpointů, buffer se seznamem vláken atd. Kromě toho je možné (minimálně ve chvíli, kdy je Emacs spuštěn v&nbsp;prostředí grafického desktopu) otevřít další specializovaná okna, zejména okno s&nbsp;výpisem obsahu vybraných proměnných, obsahem bloku paměti, disassemblovaným kódem apod.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/063.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/063-450x336.png" alt="06" width="450" height="336" class="alignnone size-medium wp-image-5349" /></a>
<p><i>Obrázek 6: Nastavení breakpointu ve zdrojovém kódu laděné aplikace. Informace o nastaveném breakpointu se současně zobrazí i v&nbsp;interaktivním okně GNU Debuggeru.</i></p>

<p>Nabízené příkazy a operace jsou umístěny ve vlastním menu nazvaném <i>Gud</i>, některé příkazy mají vlastní klávesovou zkratku a ostatní příkazy lze zavolat i jako funkce Emacs Lispu (viz též navazující kapitoly). Důležité přitom je, že vývojář stále může zdrojový kód vyvíjené aplikace editovat, překládat, commitovat atd. bez nutnosti opuštění Emacsu (a tím pádem i debuggeru, jen je v&nbsp;některých případech nutné do něj znovu nahrát laděnou aplikaci). Celý vývojový cyklus se tak může poměrně výrazným způsobem urychlit.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/074.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/074-450x336.png" alt="07" width="450" height="336" class="alignnone size-medium wp-image-5350" /></a>
<p><i>Obrázek 7: Laděná aplikace podle očekávání havarovala na segmentation fault.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Spuštění debuggeru z&nbsp;prostředí Emacsu</h2>

<p>V&nbsp;závislosti na typu debuggeru se pro jeho inicializaci použije některý z&nbsp;následujících příkazů:</p>

<table>
<tr><th>Příkaz</th><th>Význam</th></tr>
<tr><td>Alt+X gdb    </td><td>Spustí se GNU Debugger</td></tr>
<tr><td>Alt+X gud-gdb</td><td>Spustí se taktéž GNU Debugger, ovšem s použitím speciálního bufferu</td></tr>
<tr><td>Alt+X perldb </td><td>Spustí se interpret Perlu v režimu ladění</td></tr>
<tr><td>Alt+X jdb    </td><td>Spustí se debugger JVM (virtuální stroj Javy)</td></tr>
<tr><td>Alt+X pdb    </td><td>Spustí se debugger pro interpret Pythonu</td></tr>
</table>

<a href="http://fedora.cz/wp-content/uploads/2015/06/083.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/083-450x336.png" alt="08" width="450" height="336" class="alignnone size-medium wp-image-5351" /></a>
<p><i>Obrázek 8: V&nbsp;nápovědě k&nbsp;Emacsu je režim knihovny GUD popsán do všech podrobností.</i></p>

<p>Poznámka: v&nbsp;tomto článku budu používat názvy klávesových zkratek způsobem, který se většinou v&nbsp;návodech ani v&nbsp;nápovědě Emacsu nepoužívá: textový editor Emacs totiž z&nbsp;dnes již převážně historických důvodů namísto klávesy <i>Alt</i> používá <i>M (Meta)</i>, podobně se namísto <i>Ctrl</i> či <i>Control</i> píše pouze <i>C</i> spojené pomlčkou s&nbsp;další současně stisknutou klávesou. To znamená, že například výše uvedená zkratka <i>Alt+X gdb</i> je v&nbsp;nápovědě k&nbsp;Emacsu zapsána následujícím způsobem: <i>M-x gdb</i>.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/093.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/093-450x336.png" alt="09" width="450" height="336" class="alignnone size-medium wp-image-5352" /></a>
<p><i>Obrázek 9: Spuštění GNU Debuggeru popsané v&nbsp;nápovědě k&nbsp;textovému editoru Emacs.</i></p>

<p>V&nbsp;nejjednodušším případě lze při ladění aplikace naprogramované v&nbsp;C, C++, Adě, Fortranu atd. postupovat následovně: otevře se zdrojový kód laděné aplikace (který je již přeložený s&nbsp;volbou -g), pomocí klávesové zkratky <strong>Ctrl+X 2</strong> se rozdělí okno na dvě okna a v&nbsp;jednom z&nbsp;těchto oken se spustí příkaz <strong>Alt+X gdb</strong>. Ten se nejdříve zeptá na jméno nativního souboru, který se bude ladit (výchozí hodnota je a.out) a posléze se spustí interaktivní konzole GNU Debuggeru.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/103.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/103-450x336.png" alt="10" width="450" height="336" class="alignnone size-medium wp-image-5353" /></a>
<p><i>Obrázek 10: Dalším zajímavým režimem je režim ladění skriptů naprogramovaných v&nbsp;Elispu.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Breakpointy, krokování a základní klávesové zkratky</h2>

<p>Spuštění laděného programu zajistí klávesová zkratka <strong>Ctrl+X Ctrl+A Ctrl+R</strong>, alternativně je možné použít i zkratku <strong>Ctrl+C Ctrl+R</strong> (viz poznámku pod odstavcem). Při krokování je nutné vkládat do laděného kódu na určitá místa breakpointy. V&nbsp;Emacsu s&nbsp;inicializovaným GUDem pro tento účel slouží klávesová zkratka <strong>Ctrl+X Ctrl+A Ctrl+B</strong>. Mezi další užitečné klávesové zkratky patří <strong>Ctrl+X Ctrl+A Ctrl+S</strong> či <strong>Ctrl+C Ctrl+S</strong> sloužící pro vykonání dalšího řádku, a to i v&nbsp;případě, že se na tomto řádku nachází volání funkce (v&nbsp;této situaci se debugger zastaví na začátku volané funkce). Pokud potřebujeme volanou funkci vykonat v&nbsp;jednom kroku (například většinou nemá smysl krokovat sáhodlouhou funkci <strong>printf</strong>), použije se klávesová zkratka <strong>Ctrl+X Ctrl+A Ctrl+N</strong> či <strong>Ctrl+C Ctrl+N</strong>. Krokování je ovšem možné provádět i na úrovni jednotlivých strojových instrukcí, k&nbsp;čemuž slouží klávesová zkratka <strong>Ctrl+X Ctrl+A Ctrl+I</strong> či <strong>Ctrl+C Ctrl+I</strong>.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/113.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/113-450x165.png" alt="11" width="450" height="165" class="alignnone size-medium wp-image-5354" /></a>
<p><i>Obrázek 11: Seznam nastavených breakpointů.</i></p>

<p>Proč se však u většiny příkazů objevují dvě klávesové zkratky? Delší zkratka začínající na <strong>Ctrl+X Ctrl+A</strong> je dostupná v&nbsp;Emacsu globálně, zatímco kratší zkratku začínající na <strong>Ctrl+C</strong> lze použít v&nbsp;bufferu GUDu:</p>

<table>
<tr><th>Operace</th><th>Globální zkratka</th><th>Zkratka v&nbsp;GUDu</th></tr>
<tr><td><strong>R</strong>un, continue</td><td>Ctrl+X Ctrl+A Ctrl+<strong>R</strong></td><td>Ctrl+C Ctrl+<strong>R</strong></td></tr>
<tr><td>next <strong>S</strong>ingle line</td><td>Ctrl+X Ctrl+A Ctrl+<strong>S</strong></td><td>Ctrl+C Ctrl+<strong>S</strong></td></tr>
<tr><td><strong>N</strong>ext line</td><td>Ctrl+X Ctrl+A Ctrl+<strong>N</strong></td><td>Ctrl+C Ctrl+<strong>N</strong></td></tr>
<tr><td>Next <strong>I</strong>nstruction</td><td>Ctrl+X Ctrl+A Ctrl+<strong>I</strong></td><td>Ctrl+C Ctrl+<strong>I</strong></td></tr>
<tr><td><strong>B</strong>reakpoint</td><td>Ctrl+X Ctrl+A Ctrl+<strong>B</strong></td><td></td></tr>
</table>

<p>V&nbsp;tabulce jsou zvýrazněny i mnemotechnické pomůcky sloužící ke snadnějšímu zapamatování zkratek.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/123.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/123-450x336.png" alt="12" width="450" height="336" class="alignnone size-medium wp-image-5355" /></a>
<p><i>Obrázek 12: Nápověda ke GNU Debuggeru zobrazená v&nbsp;jeho interaktivní konzoli.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Výpis obsahu bloku operační paměti a lokálních proměnných</h2>

<p>Po inicializaci GUDu je možné si v&nbsp;průběhu ladění aplikace zobrazit i další specializované buffery. Kromě bufferu či bufferů se zdrojovým kódem se jedná o již zmíněný buffer, v&nbsp;němž se zobrazují zprávy GNU Debuggeru popř.&nbsp;jiného spuštěného debuggeru. Mezi další specializované buffery patří:</p>

<table>
<tr><td>Breakpoints Buffer</td></tr>
<tr><td>Threads Buffer</td></tr>
<tr><td>Stack Buffer</td></tr>
<tr><td>Locals Buffer</td></tr>
<tr><td>Registers Buffer</td></tr>
<tr><td>Assembler Buffer</td></tr>
<tr><td>Memory Buffer</td></tr>
</table>

<a href="http://fedora.cz/wp-content/uploads/2015/06/133.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/133-450x166.png" alt="13" width="450" height="166" class="alignnone size-medium wp-image-5356" /></a>
<p><i>Obrázek 13: Výpis obsahu vybraného bloku operační paměti.</i></p>

<p>Užitečný je <i>Memory Buffer</i>, v&nbsp;němž je možné si nechat zobrazit vybranou část operační paměti přiřazené laděnému procesu. Je možné volit různé formáty zobrazení, samozřejmě v&nbsp;závislosti na tom, jaká data jsou v&nbsp;paměti uložena (byte, int, long, float, double, struktury atd.). Druhým užitečným speciálním bufferem je <i>Local Buffer</i> zobrazující obsah lokálních proměnných s&nbsp;tím, že pokud dojde ke změně hodnoty některé z&nbsp;těchto proměnných, dojde k&nbsp;jejímu zvýraznění (například červenou barvou, v&nbsp;závislosti na nastavení Emacsu.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/144.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/144-183x450.png" alt="14" width="183" height="450" class="alignnone size-medium wp-image-5357" /></a>
<p><i>Obrázek 14: Dvojice proměnných &ndash; desetiprvkové pole a celočíselné počitadlo.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Obsah pracovních registrů procesoru a disassembler</h2>

<p>Textový editor GNU Emacs dokáže při spolupráci s&nbsp;GNU Debuggerem zobrazit i mnoho dalších důležitých informací. Jedná se zejména o obsah pracovních registrů, přičemž se zobrazují jak normální celočíselné pracovní registry mikroprocesoru, tak i všechny další dostupné (viditelné) registry, tj.&nbsp;například registry matematického koprocesoru, registry rozšíření instrukční sady SSE apod. (zcela jiné registry se samozřejmě použijí na architektuře ARM či AArch64). Kromě toho si lze v&nbsp;průběhu ladění zobrazit i disassemblovaný nativní kód a jak jsme si již naznačili v&nbsp;předchozích kapitolách, lze laděnou aplikací krokovat po jednotlivých instrukcích, tj.&nbsp;nikoli po celých programových řádcích. Pro tento účel slouží klávesová zkratka <strong>Ctrl+C Ctrl+I</strong> popř.&nbsp;<strong>Ctrl+X Ctrl+A Ctrl+I</strong>.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/153.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/153-450x165.png" alt="15" width="450" height="165" class="alignnone size-medium wp-image-5358" /></a>
<p><i>Obrázek 15: Disassembler.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/163.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/163-450x336.png" alt="16" width="450" height="336" class="alignnone size-medium wp-image-5359" /></a>
<p><i>Obrázek 16: Obsah pracovních registrů mikroprocesoru.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/171.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/171-450x336.png" alt="17" width="450" height="336" class="alignnone size-medium wp-image-5360" /></a>
<p><i>Obrázek 17: Další pracovní registry, zde konkrétně registry používané v&nbsp;SSE.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Textový editor Vim ve funkci integrovaného vývojového prostředí</h2>

<p>Dlouholetým souputníkem a současně i rivalem textového editoru <i>Emacs</i> je programátorský editor nazvaný <i>Vi</i>, na nějž ideově navazuje v&nbsp;mnoha ohledech vylepšený textový editor <i>Vim</i> (zde se již nejedná &bdquo;pouze&ldquo; o programátorský editor, ale o víceúčelovou aplikaci). Podobně jako tomu bylo v&nbsp;případě <i>Emacsu</i> a jeho skriptovacímu jazyka <i>Elisp</i>, i textový editor <i>Vim</i> se díky existenci jeho skriptovacího jazyka nazvaného <i>Vim Script</i>, podpoře maker, záložek (tabů), oken a bufferů může po instalaci vhodných pluginů (zmíněných dále) změnit v&nbsp;poměrně robustní a přitom výkonné integrované vývojové prostředí. Pro <i>Vim</i> vzniklo relativně velké množství pluginů zajišťujících propojení tohoto textového editoru s&nbsp;debuggerem (většinou se zmíněným <i>GNU Debuggerem</i>). Pravděpodobně nejznámějším z&nbsp;těchto pluginů je zásuvný modul nazvaný <i>Clewn</i>.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/181.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/181-450x296.png" alt="18" width="450" height="296" class="alignnone size-medium wp-image-5361" /></a>
<p><i>Obrázek 18: Úvodní obrazovka textového editoru Vim v&nbsp;případě, že již při inicializaci nedošlo k&nbsp;načtení souboru.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Funkce Vimu, které jsou používané pluginy spolupracujícími s&nbsp;debuggery</h2>

<p>Editor <i>Vim</i> usnadňuje práci všem tvůrcům pluginů, které mají nějakým způsobem komunikovat s&nbsp;debuggery, protože jim nabízí tzv.&nbsp;<i>Vim NetBeans Protocol</i>. Název této technologie vychází z&nbsp;toho, že se kdysi jednalo o rozhraní používané výhradně pluginem nazvaným <i>NetBeans</i> pro komunikaci textového editoru <i>Vim</i> se známým integrovaným vývojovým prostředím <i>NetBeans</i>. Tento plugin již v&nbsp;současnosti není vyvíjen, ovšem samotný <i>Vim NetBeans Protocol</i> je podporován a taktéž používán mnoha dalšími pluginy, a to nikoli pro komunikaci s&nbsp;IDE NetBeans, ale právě při ovládání debuggerů.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/191.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/191-450x298.png" alt="19" width="450" height="298" class="alignnone size-medium wp-image-5362" /></a>
<p><i>Obrázek 19: Samotný Vim umožňuje ladění skriptů psaných ve Vim Scriptu, a to bez použití externího debuggeru.</i></p>

<p>Co vlastně <i>Vim NetBeans Protocol</i> tvůrcům pluginů nabízí? Především se jedná o podporu oboustranné komunikace, kdy debugger může Vimu poslat zprávu o tom, že se má překreslit obsah nějakého okna (například okna s&nbsp;výpisem sledovaných proměnných či okna disassembleru), Vim naopak může poslat příkaz debuggeru atd. Bližší informace o této zajímavé a užitečné technologii lze nalézt přímo ve <i>Vimu</i> zadáním příkazu:</p>

<pre>
:help netbeans
</pre>

<a href="http://fedora.cz/wp-content/uploads/2015/06/201.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/201-450x296.png" alt="20" width="450" height="296" class="alignnone size-medium wp-image-5363" /></a>
<p><i>Obrázek 20: Bez podpory této technologie (viz červený obdélník) nebudou mnohé pluginy pracovat korektně! To se týká i pluginu Clewn popisovaného v&nbsp;dnešním článku.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Plugin <strong>Clewn</strong> zajišťující spolupráci s&nbsp;debuggery</h2>

<p>Plugin nazvaný <i>Clewn</i> je přídavným modulem sloužícím pro propojení textového editoru <i>Vim</i> s&nbsp;debuggerem, konkrétně s&nbsp;<i>GNU Debuggerem</i>. Tento plugin umožňuje volat většinu základních příkazů <i>GNU Debuggeru</i>, ovšem způsob kooperace mezi <i>Vimem</i> a debuggerem, který je v&nbsp;pluginu <i>Clewn</i> implementován, nemusí všem uživatelům vyhovovat &ndash; v&nbsp;tomto případě je dobré se podívat na možnosti alternativního pluginu <i>Pyclewn</i>. Jakým způsobem vlastně přídavný modul <i>Clewn</i> funguje? Tento plugin obsahuje kromě části psané ve VimScriptu i binární (nativní) část, konkrétně spustitelný program nazvaný <strong>clewn</strong>, který je nainstalován v&nbsp;adresáři dostupném přes PATH (v&nbsp;případě lokální instalace se většinou jedná o adresář ~/bin). Tento binární program po svém spuštění provede inicializaci debuggeru a následně spuštění <i>Gvimu</i>, tj.&nbsp;<i>Vimu</i> s&nbsp;GUI. Tyto dvě aplikace pak spolu mohou přes nativní program <strong>clewn</strong> oboustranně komunikovat.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/211.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/211-450x296.png" alt="21" width="450" height="296" class="alignnone size-medium wp-image-5364" /></a>
<p><i>Obrázek 21: Připojení Vimu k&nbsp;debuggeru a nastavení breakpointu na začátek funkce main.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Použití pluginu <strong>Clewn</strong> v&nbsp;praxi</h2>

<p>Ukažme si nyní jen velmi stručně způsob použití pluginu <i>Clewn</i> při ladění aplikace nazvané <strong>test.c</strong>. V&nbsp;prvním kroku je nutné přeložit zdrojový kód a přitom překladači přikázat, že se mají do výsledného spustitelného souboru přidat i nezbytné ladicí informace. V&nbsp;případě programovacího jazyka C a překladače gcc je to velmi jednoduché:</p>

<pre>
gcc -O0 -g -o test test.c
</pre>

<p>Výsledkem dokončení překladu bude v&nbsp;tomto případě binární spustitelný soubor nazvaný <strong>test</strong>. Následuje spuštění výše zmíněné utility <strong>clewn</strong>:</p>

<pre>
clewn -d -ga test
</pre>

<p>Tento příkaz by měl spustit a inicializovat debugger <i>GNU Debugger</i> a současně v&nbsp;novém okně spustit <i>Gvim</i>. Ovládání debuggeru lze provádět přímo z&nbsp;Vimu, v&nbsp;němž se otevře příslušný zdrojový kód (<strong>test.c</strong>). K&nbsp;dispozici jsou následující klávesové zkratky:</p>

<table>
<tr><th>Klávesová zkratka</th><th>Význam</th></tr>
<tr><td>R</td><td>spuštění programu</td></tr>
<tr><td>Q</td><td>ukončení ladění</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Ctrl+B</td><td>nastavení breakpointu na řádku s&nbsp;kurzorem</td></tr>
<tr><td>Ctrl+E</td><td>vymazání breakpointů na řádku s&nbsp;kurzorem</td></tr>
<tr><td>B</td><td>zobrazení informací o breakpointech</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>S</td><td>jeden krok s&nbsp;vykonáním celé volané funkce (<i>step</i>)</td></tr>
<tr><td>I</td><td>jeden krok s&nbsp;případným vstupem do volané funkce (<i>step into</i>)</td></tr>
<tr><td>C</td><td>pokračovat ve vykonávání programu (<i>continue</i>)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>L</td><td>zobrazení informací o lokálních proměnných</td></tr>
<tr><td>A</td><td>zobrazení informací o argumentech</td></tr>
<tr><td>W</td><td>zobrazení informací, v jakém bodě se program nachází (<i>backtrace</i>)</td></tr>
</table>

<p>Ve skutečnosti existuje ještě více klávesových zkratek, naleznete je v&nbsp;nápovědě k&nbsp;pluginu.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Plugin <strong>Pyclewn</strong></h2>

<p>Druhým pluginem určeným pro propojení textového editoru <i>Vim</i> s&nbsp;debuggerem je přídavný modul nazvaný <i>Pyclewn</i>. Tento plugin umožňuje práci s&nbsp;debuggerem <i>GNU Debugger</i> (použijí ho céčkači, vývojáři pracující v&nbsp;C++, Fortranu atd. atd.) a taktéž s&nbsp;debuggerem <i>pdb</i> používaném při ladění aplikací naprogramovaných v&nbsp;Pythonu. Tento plugin nepotřebuje pro svoji práci <i>Gvim</i> spuštěný s&nbsp;grafickým uživatelským rozhraním, protože veškerá činnost se odehrává v&nbsp;jediném terminálu a navíc se tento plugin spouští přímo z&nbsp;<i>Vimu</i> (u výše popsaného nástroje to bylo naopak &ndash; nejprve se spustil <strong>clewn</strong>, který následně otevřel nové okno s&nbsp;<i>Gvimem</i>).</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/221.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/221-450x296.png" alt="22" width="450" height="296" class="alignnone size-medium wp-image-5365" /></a>
<p><i>Obrázek 22: Integrovaná nápověda k&nbsp;pluginu Pyclewn.</i></p>

<p>Samotné uživatelské prostředí připravené tímto pluginem (viz přiložené screenshoty) je snadno pochopitelné &ndash; jedno okno se používá pro zobrazení konzole debuggeru, další menší okna slouží pro výpis nastavených breakpointů, sledovaných proměnných atd. a poslední část plochy <i>Vimu</i> ukazuje laděný zdrojový kód, v&nbsp;němž jsou s&nbsp;využitím značek zvýrazněny breakpointy, zakázané breakpointy a ve chvíli krokování i právě prováděný prováděný řádek. Plugin mapuje i klávesové zkratky, další zkratky je samozřejmě možné v&nbsp;případě potřeby přidat.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/231.png"><img src="http://fedora.cz/wp-content/uploads/2015/06/231-450x296.png" alt="23" width="450" height="296" class="alignnone size-medium wp-image-5366" /></a>
<p><i>Obrázek 23: Ladění programu napsaného v&nbsp;céčku: nastavení breakpointů, sledování proměnných atd. Povšimněte si, že tento plugin bez problémů pracuje i v&nbsp;terminálu, ovšem je zapotřebí použít větší okno (zde 80&times;25 znaků je nedostatečných, což je ovšem pochopitelné)</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Předchozí části tohoto seriálu</h2>

<ol>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (1.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (2.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

</ol>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>An Introduction To Using GDB Under Emacs<br />
<a href="http://tedlab.mit.edu/~dr/gdbintro.html">http://tedlab.mit.edu/~dr/gdbintro.html</a>
</li>

<li>GNU Emacs<br />
<a href="https://www.gnu.org/software/emacs/emacs.html">https://www.gnu.org/software/emacs/emacs.html</a>
</li>

<li>The Emacs Editor<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html</a>
</li>

<li>Emacs Lisp<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html</a>
</li>

<li>An Introduction to Programming in Emacs Lisp<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html</a>
</li>

<li>27.6 Running Debuggers Under Emacs<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html</a>
</li>

<li>GdbMode<br />
<a href="http://www.emacswiki.org/emacs/GdbMode">http://www.emacswiki.org/emacs/GdbMode</a>
</li>

<li>Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Emacs">https://en.wikipedia.org/wiki/Emacs</a>
</li>

<li>Emacs Lisp (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Emacs_Lisp">https://en.wikipedia.org/wiki/Emacs_Lisp</a>
</li>

<li>Pyclewn installation notes<br />
<a href="http://pyclewn.sourceforge.net/install.html">http://pyclewn.sourceforge.net/install.html</a>
</li>

<li>pip Installation<br />
<a href="https://pip.pypa.io/en/latest/installing.html">https://pip.pypa.io/en/latest/installing.html</a>
</li>

<li>Clewn<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>Clewn installation<br />
<a href="http://clewn.sourceforge.net/install.html">http://clewn.sourceforge.net/install.html</a>
</li>

<li>Clewn - soubory<br />
<a href="http://sourceforge.net/projects/clewn/files/OldFiles/">http://sourceforge.net/projects/clewn/files/OldFiles/</a>
</li>

<li>KDbg: úvodní stránka<br />
<a href="http://www.kdbg.org/">http://www.kdbg.org/</a>
</li>

<li>Nemiver (stránky projektu)<br />
<a href="https://wiki.gnome.org/Apps/Nemiver">https://wiki.gnome.org/Apps/Nemiver</a>
</li>

<li>Nemiver FAQ<br />
<a href="https://wiki.gnome.org/Apps/Nemiver/FAQ">https://wiki.gnome.org/Apps/Nemiver/FAQ</a>
</li>

<li>Nemiver (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Nemiver">https://en.wikipedia.org/wiki/Nemiver</a>
</li>

<li>Data Display Debugger<br />
<a href="https://www.gnu.org/software/ddd/">https://www.gnu.org/software/ddd/</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>BASH Debugger<br />
<a href="http://bashdb.sourceforge.net/">http://bashdb.sourceforge.net/</a>
</li>

<li>The Perl Debugger(s)<br />
<a href="http://debugger.perl.org/">http://debugger.perl.org/</a>
</li>

<li>Visual Debugging with DDD<br />
<a href="http://www.drdobbs.com/tools/visual-debugging-with-ddd/184404519">http://www.drdobbs.com/tools/visual-debugging-with-ddd/184404519</a>
</li>

<li>Pydb - Extended Python Debugger<br />
<a href="http://bashdb.sourceforge.net/pydb/">http://bashdb.sourceforge.net/pydb/</a>
</li>

<li>Insight<br />
<a href="http://www.sourceware.org/insight/">http://www.sourceware.org/insight/</a>
</li>

<li>Supported Languages (GNU Debugger)<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Clewn<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>Clewn installation<br />
<a href="http://clewn.sourceforge.net/install.html">http://clewn.sourceforge.net/install.html</a>
</li>

<li>Clewn - soubory ke stažení<br />
<a href="http://sourceforge.net/projects/clewn/files/OldFiles/">http://sourceforge.net/projects/clewn/files/OldFiles/</a>
</li>

<li>Pyclewn installation notes<br />
<a href="http://pyclewn.sourceforge.net/install.html">http://pyclewn.sourceforge.net/install.html</a>
</li>

<li>Debugging<br />
<a href="http://janus.uclan.ac.uk/pagray/labs/debug.htm">http://janus.uclan.ac.uk/pagray/labs/debug.htm</a>
</li>

</ol>



</body>
</html>

