<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Debuggery a jejich nadstavby v Linuxu (2. část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
</head>

<body>

<h1>Debuggery a jejich nadstavby v Linuxu (2. část)</h1>

<h3>Pavel Tišnovský</h3>

<p>Ve druhé části článku o debuggerech dostupných programátorům v Linuxu si popíšeme nadstavbu nad GNU Debuggerem, která se jmenuje Data Display Debugger (zkráceně DDD či přesněji GNU DDD). Data Display Debugger nabízí svým uživatelům plnohodnotné grafické uživatelské rozhraní a kromě kooperace s GNU Debuggerem je DDD možné použít i při ladění aplikací naprogramovaných v Perlu, Pythonu či BASHi.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Debuggery a jejich nadstavby v&nbsp;Linuxu (2. část)</a></p>
<p><a href="#k02">2. Data Display Debugger (GNU DDD)</a></p>
<p><a href="#k03">3. Použití Data Display Debuggeru společně s&nbsp;GNU Debuggerem</a></p>
<p><a href="#k04">4. Prohlížení složitějších datových struktur</a></p>
<p><a href="#k05">5. Použití Data Display Debuggeru společně s&nbsp;Python Debuggerem</a></p>
<p><a href="#k06">6. Použití Data Display Debuggeru společně s&nbsp;BASH Debuggerem</a></p>
<p><a href="#k07">7. Další debuggery podporované DDD</a></p>
<p><a href="#k08">8. Obsah třetí části článku</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Debuggery a jejich nadstavby v&nbsp;Linuxu (2. část)</h2>

<p><a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">V&nbsp;první části</a> článku o debuggerech a jejich nadstavbách jsme se nejprve zabývali stručnou historií vývoje těchto užitečných vývojářských nástrojů a posléze jsme si řekli, že moderní debuggery je možné rozdělit na dvě skupiny. V&nbsp;první skupině nalezneme nástroje ovládané z&nbsp;příkazového řádku a ve druhé skupině pak debuggery, které již v&nbsp;základní konfiguraci mají plnohodnotné grafické uživatelské rozhraní; některé historické debuggery typu Turbo Debugger pak i celoobrazovkové textové uživatelské rozhraní. Následně jsme se již věnovali stručnému popisu základních vlastností známého <i>GNU Debuggeru</i> (gdb), což je v&nbsp;současnosti s&nbsp;velkou pravděpodobností nejpoužívanější debugger na Linuxu (pokud se bavíme o debuggerech určených pro ladění nativních binárních aplikací). Tento debugger je při ladění nativních aplikací volán i z&nbsp;některých integrovaných vývojových prostředí: jedná se například o <i>Eclipse CDT</i>, <i>Netbeans</i>, <i>KDevelop</i>, <i>Qt Creator</i> či o dnes poněkud opomíjený <i>Lazarus</i>.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/05/13_cgdb1.png"><img class="alignnone size-medium wp-image-5142" src="http://fedora.cz/wp-content/uploads/2015/05/13_cgdb1-450x296.png" alt="13_cgdb1" width="450" height="296" /></a>
<p><i>Obrázek 1: Na tomto screenshotu můžeme vidět průběh typického „sezení“ programátora využívajícího minule popsaný debugger <strong>gdb</strong> společně s <strong>cgdb</strong> při ladění jednoduché aplikace naprogramované v céčku. Nejprve je program přeložen do nativního kódu s vygenerováním ladicích informací (<strong>-g</strong>) a následně je spuštěn debugger s nadstavbou <strong>cgdb</strong>.</i></p>

<p>V&nbsp;některých případech však nemusí programátorům vyhohovat ani GNU Debugger ovládaný z&nbsp;příkazové řádky ani mnohdy zbytečně velké a komplikované integrované vývojové prostředí. V&nbsp;této chvíli přichází na řadu nadstavby nad GNU Debuggerem. Minule jsme se zmínili o velmi jednoduše použitelné nadstavbě nazvané <i>cgdb</i>, které používá celoobrazovkové textové uživatelské rozhraní. Dnes se budeme zabývat aplikací nazvanou <i>Data Display Debugger</i> neboli <i>DDD</i> (zcela korektně pak <i>GNU DDD</i>). Z dalšího popisu bude patrné, že tato aplikace je velmi jednoduše ovladatelná a její uživatelské rozhraní je poměrně přehledné, což mj. znamená, že může být užitečná i pro ty programátory, kteří se nechtějí učit mnohdy komplikované příkazy GNU Debuggeru. Navíc je <i>Data Display Debugger</i> navržen takovým způsobem, že ho lze použít i společně s dalšími debuggery, například pro ladění aplikací v Perlu, Pythonu či dokonce v BASHi.</p>

<img src="13_cgdb1.png" />
<p><i>Obrázek 2: Takto vypadá textové uživatelské rozhraní nástroje cgbd (popsaného minule) po spuštění. V&nbsp;horním okně můžeme vidět zdrojový kód se zeleně zvýrazněným aktivním řádkem, v&nbsp;dolní polovině terminálu se pak nachází rozhraní GNU Debuggeru.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Data Display Debugger (DDD)</h2>

<p>První nadstavbou (nejenom) nad GNU Debuggerem je aplikace nazvaná <i>Data Display Debugger</i> neboli zkráceně <i>DDD</i>. Tato nadstavba nabízí uživatelům při ladění aplikací plnohodnotné grafické uživatelské rozhraní, jehož jednotlivé ovládací prvky sice mohou působit zastarale (což je způsobeno použitou GUI knihovnou), ve skutečnosti je však celé uživatelské rozhraní <i>Data Display Debuggeru</i> velmi flexibilní, což vynikne především při použití dvou a více monitorů. Příkladem flexibility GUI jsou například &bdquo;odtrhávací&ldquo; menu (<i>tear off menu</i>), které je možné velmi snadno změnit na nemodální dialogy s&nbsp;nabídkou příkazů.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/03.png"><img class="alignnone size-medium wp-image-5216" src="http://fedora.cz/wp-content/uploads/2015/06/03-450x379.png" alt="03" width="450" height="379" /></a>
<p><i>Obrázek 3: Spuštění Data Display Debuggeru. V&nbsp;základní konfiguraci je nastaveno, že se ihned po spuštění a inicializaci objeví poněkud otravný dialog Tip of the Day. Zobrazování tohoto dialogu je však možné vypnout v&nbsp;konfiguračním formuláři DDD.</i></p>

<p><i>DDD</i> se používá, jak jsme si již naznačili v&nbsp;předchozí kapitole, společně s&nbsp;již zmíněným <i>GNU Debuggerem</i>, ovšem ve skutečnosti lze <i>Data Display Debugger</i> využít i pro komunikaci s&nbsp;dalšími debuggery, například s&nbsp;debuggerem jazyka Perl, debuggerem skriptů psaných v&nbsp;BASHi a v&nbsp;neposlední řadě taktéž pro ovládání <i>pydb</i>, což je jeden z&nbsp;debuggerů používaných vývojáři používajícími programovací jazyk Python (pro Python totiž existuje větší množství debuggerů).</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/04.png"><img class="alignnone size-medium wp-image-5217" src="http://fedora.cz/wp-content/uploads/2015/06/04-450x379.png" alt="04" width="450" height="379" /></a>
<p><i>Obrázek 4: Základní pohled na Data Display Debugger při ladění nativní aplikace. Největší plochu hlavního okna zabírá výpis zdrojového kódu, v&nbsp;dolní části se nachází terminál GNU Debuggeru. Nejdůležitější příkazy lze nalézt v&nbsp;samostatném toolbaru umístěného v&nbsp;pravé části tohoto snímku.</i></p>

<p>Instalace <i>Data Display Debuggeru</i> je na Fedoře velmi jednoduchá. Na Fedoře verze 20 a 21 se použije příkaz:</p>

<pre>
sudo yum install ddd
</pre>

<p>Na Fedoře 22 se pak namísto nástroje <i>yum</i> může použít <i>dnf</i>:</p>

<pre>
sudo dnf install ddd
</pre>

<p>Průběh instalace:</p>

<pre>
Last metadata expiration check performed 0:25:05 ago on Tue Jun  2 09:02:33 2015.
Dependencies resolved.
================================================================================
 Package                           Arch     Version             Repository
                                                                           Size
================================================================================
Installing:
 ddd                               x86_64   3.3.12-20.fc22      fedora    1.6 M
 dejavu-sans-fonts                 noarch   2.34-4.fc22         fedora    1.5 M
 gc                                x86_64   7.4.2-2.fc22        fedora    104 k
 gd                                x86_64   2.1.1-2.fc22        fedora    145 k
 gdb                               x86_64   7.9.1-13.fc22       updates   2.9 M
 gnuplot                           x86_64   5.0.0-8.fc22        fedora    747 k
 gnuplot-common                    x86_64   5.0.0-8.fc22        fedora    602 k
 guile                             x86_64   5:2.0.11-4.fc22     fedora    3.9 M
 libXp                             x86_64   1.0.2-4.fc22        fedora     34 k
 libXv                             x86_64   1.0.10-2.fc22       fedora     22 k
 libXxf86dga                       x86_64   1.1.4-4.fc22        fedora     23 k
 libatomic_ops                     x86_64   7.4.2-4.fc22        fedora     31 k
 libbabeltrace                     x86_64   1.2.1-3.fc22        fedora    155 k
 libdmx                            x86_64   1.1.3-4.fc22        fedora     20 k
 libvpx                            x86_64   1.3.0-6.fc22        fedora    513 k
 motif                             x86_64   2.3.4-9.fc22        fedora    1.4 M
 xorg-x11-apps                     x86_64   7.7-13.fc22         fedora    309 k
 xorg-x11-fonts-ISO8859-1-100dpi   noarch   7.5-14.fc22         fedora    1.1 M
 xorg-x11-fonts-ISO8859-1-75dpi    noarch   7.5-14.fc22         fedora    933 k
 xorg-x11-fonts-misc               noarch   7.5-14.fc22         fedora    5.8 M
 xorg-x11-utils                    x86_64   7.5-19.fc22         fedora    115 k
 xorg-x11-xbitmaps                 noarch   1.1.1-7.fc21        fedora     37 k

Transaction Summary
================================================================================
Install  22 Packages

Total download size: 22 M
Installed size: 51 M
Is this ok [y/N]: 
</pre>

<a href="http://fedora.cz/wp-content/uploads/2015/06/05.png"><img class="alignnone size-medium wp-image-5218" src="http://fedora.cz/wp-content/uploads/2015/06/05-450x379.png" alt="05" width="450" height="379" /></a>
<p><i>Obrázek 5: Zobrazit je možné i disassemblovaný strojový kód nativní aplikace.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Použití Data Display Debuggeru společně s&nbsp;GNU Debuggerem</h2>

<p>Jaké základní funkce <i>Data Display Debugger</i> nabízí? V&nbsp;první řadě se jedná o možnost spárování nativního (binárního) kódu se zdrojovým kódem, a to za předpokladu, že jsou k&nbsp;dispozici ladicí symboly, tj.&nbsp;v&nbsp;případě, že je program přeložen s&nbsp;použitím přepínače <strong>-g</strong> nebo jsou ladicí symboly doinstalovány. Dále lze do libovolného místa programu vložit breakpoint a definovat u každého breakpointu podmínku, po jejímž splnění se breakpoint aktivuje. K&nbsp;dispozici je taktéž disassembler, tj.&nbsp;modul překládající strojové instrukce do symbolického (čitelného) tvaru. Zapomenout samozřejmě nesmíme ani na podporu krokování programu po instrukcích, programových řádcích atd., ovšem nejužitečnější funkce nabízí <i>Data Display Debugger</i> při prohlížení datových struktur používaných programem &ndash; ostatně právě odtud získal <i>Data Display Debugger</i> svoje jméno. Způsobu zobrazení mnohdy i velmi komplikovaných datových struktur bude věnována samostatná kapitola, v&nbsp;níž si ukážeme, jakým způsobem je možné prozkoumat obsah binárního stromu. Další užitečné vlastnosti jsou ukázány na sérii screenshotů:</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/06.png"><img class="alignnone size-medium wp-image-5219" src="http://fedora.cz/wp-content/uploads/2015/06/06-450x379.png" alt="06" width="450" height="379" /></a>
<p><i>Obrázek 6: Pokud se nastaví breakpointy, jsou viditelné jak ve zdrojovém kódu (pokud je samozřejmě k&nbsp;dispozici), tak i v&nbsp;okně s&nbsp;disassemblovaným strojovým kódem.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/07.png"><img class="alignnone size-medium wp-image-5220" src="http://fedora.cz/wp-content/uploads/2015/06/07-450x379.png" alt="07" width="450" height="379" /></a>
<p><i>Obrázek 7: V&nbsp;průběhu ladění nativních aplikací může být užitečné si zobrazit obsahy všech pracovních registrů mikroprocesoru. I tuto možnost Data Display Debugger samozřejmě programátorům nabízí.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/08.png"><img class="alignnone size-medium wp-image-5221" src="http://fedora.cz/wp-content/uploads/2015/06/08-450x379.png" alt="08" width="450" height="379" /></a>
<p><i>Obrázek 8: Mnohé aplikace reagují na zaslané signály. V&nbsp;tomto dialogu je možné zvolit, jakým způsobem se bude s&nbsp;jednotlivými signály pracovat a taktéž je možné zvolený signál laděné aplikaci skutečně poslat.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/09.png"><img class="alignnone size-medium wp-image-5222" src="http://fedora.cz/wp-content/uploads/2015/06/09-450x371.png" alt="09" width="450" height="371" /></a>
<p><i>Obrázek 9: Důležitý dialog, v&nbsp;němž je možné dopodrobna nastavit chování Data Display Debuggeru.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/10.png"><img class="alignnone size-medium wp-image-5223" src="http://fedora.cz/wp-content/uploads/2015/06/10-450x371.png" alt="10" width="450" height="371" /></a>
<p><i>Obrázek 10: Změna nastavení GUI: ikony jsou barevné a tlačítka s&nbsp;ikonami plastická (aneb cesta zpět do devadesátých let :-).</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/11.png"><img class="alignnone size-medium wp-image-5224" src="http://fedora.cz/wp-content/uploads/2015/06/11-450x371.png" alt="11" width="450" height="371" /></a>
<p><i>Obrázek 11: Jakékoli menu je možné &bdquo;odtrhnout&ldquo; a vytvořit z&nbsp;něho toolbar, který je možné umístit například na plochu druhého monitoru atd.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Prohlížení složitějších datových struktur</h2>

<p><i>&bdquo;Seeing is believing when it comes to tracking errors.&ldquo;</i></p>

<p>Při ladění prakticky jakékoli složitější aplikace je nutné sledovat jak vlastní programový kód (ať již na úrovni zdrojového programového kódu či na úrovni assembleru, tj.&nbsp;jednotlivých strojových instrukcí), tak i datové struktury používané tímto kódem. Tyto struktury mohou být velmi komplikované, zejména pak ve chvíli, kdy je laděn program vytvořený v&nbsp;C či C++, kdy je mnohdy nutné používat lineárně vázané seznamy, různé typy stromů, pole struktur atd. Právě z&nbsp;tohoto důvodu dostala aplikace <i>Data Display Debugger</i> svoje jméno, protože prohlížení a analýza dat je zde poměrně propracovaná, což si ostatně ukážeme i na několika screenshotech zobrazených v&nbsp;této kapitole.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/12.png"><img class="alignnone size-medium wp-image-5226" src="http://fedora.cz/wp-content/uploads/2015/06/12-450x365.png" alt="12" width="450" height="365" /></a>
<p><i>Obrázek 12: Zobrazení několika prvků binárního stromu v&nbsp;Data Display Debuggeru. Povšimněte si, jakým způsobem se pracuje s&nbsp;ukazateli nastavenými na hodnotu NULL.</i></p>

<p>V&nbsp;průběhu ladění aplikace je možné kurzorem myši vybrat jakoukoli globální či lokální proměnnou a z&nbsp;kontextového menu zvolit příkaz <strong>Display</strong>, který tuto proměnnou přidá do zvláštního podokna. U jednoduchých proměnných je zobrazena hodnota proměnné, pokud se však jedná o strukturu obsahující ukazatel, lze &ndash; opět s&nbsp;využitím kurzoru myši &ndash; zobrazit i navazující datové struktury, například další uzly stromu, prvky lineárně vázaného seznamu apod. Informace o každém uzlu či o každé proměnné je umístěna v&nbsp;obdélníku, kterým lze pohybovat. Jednotlivé vazby (v&nbsp;kontextu jazyků C a C++ ukazatele) se zobrazují pomocí šipky.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/13.png"><img class="alignnone size-medium wp-image-5227" src="http://fedora.cz/wp-content/uploads/2015/06/13-450x312.png" alt="13" width="450" height="312" /></a>
<p><i>Obrázek 13: Alternativní pohled na data, se kterými aplikace
pracuje.</i></p>

<p>Pro zajímavost: na screenshotech číslo 13 až 15 byl laděn program obsahující následující kód pocházející ze skutečné aplikace:</p>

<pre>
typedef struct node
{
    struct node *left;   /* left subnode */
    struct node *right;  /* right subnode */
    char *test_name;     /* test name is stored as subnode value */
    result *results;     /* linked list with test results, day after date */
} node;

/*
 * Root of the tree.
 */
node *root = NULL;

/*
 * Insert new node containing just a test name into the tree.
 */
static void insert_new_node(node **root, char *test_name)
{
    /* tree is not yet created */
    if (*root == NULL)
    {
        *root = (node *)malloc(sizeof(node));
        /* copy is needed here because strings returned by JVM TI functions needs
         * to be dealocated ASAP */
        (*root)-&gt;test_name = (char*)calloc(strlen(test_name)+1, sizeof(char));
        strcpy((*root)-&gt;test_name, test_name);
        (*root)-&gt;left = NULL;
        (*root)-&gt;right = NULL;
        (*root)-&gt;results = NULL;
        return;
    }
    /* tree is created, insert new node to the right place */
    int cmp = strcmp(test_name, (*root)-&gt;test_name);
    if (cmp &lt; 0)
    {
        insert_new_node(&amp;(*root)-&gt;left, test_name);
    }
    else if (cmp &gt; 0)
    {
        insert_new_node(&amp;(*root)-&gt;right, test_name);
    }
}

/*
 * Insert new test result into a tree to the right node.
 */
static void insert(node **root, char *test_name, char *test_result)
{
    insert_new_node(root, test_name);
}

static void test_tree_structure(void)
{
    insert(&amp;root, "B", "b1");
    insert(&amp;root, "A", "a1");
    insert(&amp;root, "C", "b2");
    insert(&amp;root, "D", "a2");
    insert(&amp;root, "E", "z1");
    insert(&amp;root, "F", "z2");
    insert(&amp;root, "G", "z3");
    insert(&amp;root, "H", "last");
    insert(&amp;root, "A", "last");
    insert(&amp;root, "Z", "last");
    insert(&amp;root, "C", "last");
    insert(&amp;root, "D", "last");
    insert(&amp;root, "E", "last2");
    insert(&amp;root, "C", "last3");
    insert(&amp;root, "AAA", "xxxx");
}
</pre>

<a href="http://fedora.cz/wp-content/uploads/2015/06/14.png"><img class="alignnone size-medium wp-image-5228" src="http://fedora.cz/wp-content/uploads/2015/06/14-450x312.png" alt="14" width="450" height="312" /></a>
<p><i>Obrázek 14: Pohled na jinak zkonstruovaný binární strom při ladění aplikace.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/15.png"><img class="alignnone size-medium wp-image-5229" src="http://fedora.cz/wp-content/uploads/2015/06/15-450x309.png" alt="15" width="450" height="309" /></a>
<p><i>Obrázek 15: Jednotlivými uzly je možné pomocí myši pohybovat, což může být výhodné při zkoumání komplikovanějších datových struktur.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití Data Display Debuggeru společně s&nbsp;Python Debuggerem</h2>

<p>Aplikace <i>Data Display Debugger</i> nemusí být použita pouze pro uživatelsky přívětivé ovládání GNU Debuggeru, protože její možnosti jsou podstatně větší. Dnešní verze <i>DDD</i> dokáže komunikovat i s&nbsp;dalšími typy ladicích nástrojů ovládaných z&nbsp;příkazové řádky. Jedná se zejména o debugger používaný pro ladění skriptů napsaných v&nbsp;programovacím jazyku Perl, další debugger určený pro aplikace napsané v&nbsp;Pythonu a dokonce je možné přímo z&nbsp;grafického uživatelského rozhraní <i>Data Display Debuggeru</i> ovládat debugger skriptů naprogramovaných v&nbsp;BASHi. Nejprve si popišme způsob propojení <i>Data Display Debuggeru</i> s&nbsp;debuggerem aplikací naprogramovaných v&nbsp;Pythonu. V&nbsp;současnosti se sice používá větší počet debuggerů pro Python, které jsou ovládané buď z&nbsp;příkazové řádky nebo pomocí nabízeného API, ovšem <i>Data Display Debuggeru</i> oficiálně podporuje základní debugger nazvaný <i>pdb</i> a taktéž <i>pydb</i> neboli &bdquo;enhanced Python debugger&ldquo;, který může být ovládaný z&nbsp;příkazové řádky, podobně jako GNU Debugger.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/16.png"><img class="alignnone size-medium wp-image-5230" src="http://fedora.cz/wp-content/uploads/2015/06/16-450x346.png" alt="16" width="450" height="346" /></a>
<p><i>Obrázek 16: Data Display Debugger při ladění aplikace naprogramované v&nbsp;Pythonu.</i></p>

<p>Aby bylo možné ladit aplikace napsané v&nbsp;Pythonu s&nbsp;využitím <i>Data Display Debuggeru</i>, je nutné nejprve nainstalovat <i>pdb</i>, což se na Fedoře 20 a 21 provede následujícím způsobem:</p>

<pre>
sudo yum install pydb
</pre>

<p>Na Fedoře 22 pak takto:</p>

<pre>
sudo dnf install pydb
</pre>

<p>Průběh instalace:</p>

<pre>
Last metadata expiration check performed 0:35:50 ago on Tue Jun  2 09:02:33 2015.
Dependencies resolved.
================================================================================
 Package        Arch             Version                 Repository        Size
================================================================================
Installing:
 pydb           noarch           1.26-12.fc21            fedora           203 k

Transaction Summary
================================================================================
Install  1 Package

Total download size: 203 k
Installed size: 823 k
Is this ok [y/N]: 
</pre>

<a href="http://fedora.cz/wp-content/uploads/2015/06/17.png"><img class="alignnone size-medium wp-image-5231" src="http://fedora.cz/wp-content/uploads/2015/06/17-448x450.png" alt="17" width="448" height="450" /></a>
<p><i>Obrázek 17: Zobrazení lokálních proměnných v&nbsp;Data Display Debuggeru.</i></p>

<p><i>Data Display Debugger</i> je v&nbsp;tomto případě možné spustit takto:</p>

<pre>
ddd název_skriptu.py
</pre>

<p>Po spuštění <i>DDD</i> by se měl zobrazit zdrojový kód laděného skriptu a většina příkazů (run, next, step) by měla pracovat prakticky stejným způsobem, s&nbsp;jakým jsme se již seznámili v&nbsp;předchozích kapitolách.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/18.png"><img class="alignnone size-medium wp-image-5232" src="http://fedora.cz/wp-content/uploads/2015/06/18-447x450.png" alt="18" width="447" height="450" /></a>
<p><i>Obrázek 18: DDD nabízí několik konfiguračních voleb ovlivňujících kooperaci s&nbsp;pydb.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Použití Data Display Debuggeru společně s&nbsp;BASH Debuggerem</h2>

<p>Druhým zajímavým a pro mnohé vývojáře i užitečným debuggerem, který je možné ovládat přímo z&nbsp;grafického uživatelského rozhraní <i>Data Display Debuggeru</i>, je debugger určený pro ladění skriptů naprogramovaných v&nbsp;BASHi. Podívejme se nyní na způsob propojení <i>DDD</i> s&nbsp;tímto debuggerem. Nejprve je nutné nainstalovat BASH debugger, podobně jako tomu bylo u Python debuggeru.</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/19.png"><img class="alignnone size-full wp-image-5233" src="http://fedora.cz/wp-content/uploads/2015/06/19.png" alt="19" width="240" height="192" /></a>
<p><i>Obrázek 19: Laděná aplikace napsaná v&nbsp;BASHi.</i></p>

<p>Instalace na Fedoře 20 a 21:</p>

<pre>
sudo yum install bashdb
</pre>

<p>Instalace na Fedoře 22:</p>

<pre>
sudo dnf install bashdb
</pre>

<p>Průběh instalace:</p>

<pre>
Last metadata expiration check performed 0:49:30 ago on Tue Jun  2 09:02:33 2015.
Dependencies resolved.
================================================================================
 Package         Arch            Version                  Repository       Size
================================================================================
Installing:
 bashdb          noarch          4.3_0.9-1.fc22           fedora          227 k

Transaction Summary
================================================================================
Install  1 Package

Total download size: 227 k
Installed size: 717 k
Is this ok [y/N]:
</pre>

<a href="http://fedora.cz/wp-content/uploads/2015/06/20.png"><img class="alignnone size-medium wp-image-5234" src="http://fedora.cz/wp-content/uploads/2015/06/20-450x296.png" alt="20" width="450" height="296" /></a>
<p><i>Obrázek 20: Spuštění laděné aplikace přímo v&nbsp;řádkovém debuggeru BASHe.</i></p>

<p>Spuštění <i>Data Display Debuggeru</i> je podobné, jako při ladění aplikací naprogramovaných v&nbsp;Pythonu:</p>

<pre>
ddd script.sh
</pre>

<p>popř.:</p>

<pre>
ddd --bash script.sh
</pre>

<a href="http://fedora.cz/wp-content/uploads/2015/06/21.png"><img class="alignnone size-medium wp-image-5235" src="http://fedora.cz/wp-content/uploads/2015/06/21-450x316.png" alt="21" width="450" height="316" /></a>
<p><i>Obrázek 21: Data Display Debugger a BASHdb.</i></p>

<p>Pokud DDD nahlásí chybové hlášení o tom, že BASH nelze spustit, je možné vyzkoušet tento příkaz:</p>

<pre>
ddd --debugger /usr/bin/bashdb -- script.sh (parametry)
</pre>

<a href="http://fedora.cz/wp-content/uploads/2015/06/22.png"><img class="alignnone size-medium wp-image-5236" src="http://fedora.cz/wp-content/uploads/2015/06/22-450x372.png" alt="22" width="450" height="372" /></a>
<p><i>Obrázek 22: Data Display Debugger a BASHdb.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Další debuggery podporované DDD</h2>

<p>Mezi další řádkové debuggery, které je možné ovládat přímo z&nbsp;Data Display Debuggeru, patří i ladicí nástroj určený pro skripty naprogramované v&nbsp;Perlu. Tento debugger je již na Fedoře nainstalovaný společně s&nbsp;interpretrem Perlu, proto ho je možné ihned použít, což je ostatně patrné i při pohledu na screenshoty s&nbsp;laděným skriptem (mimochodem: jedná se o zajímavý skript, který zobrazí všechny barvy dostupné na použitém terminálu).</p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/23.png"><img class="alignnone size-medium wp-image-5237" src="http://fedora.cz/wp-content/uploads/2015/06/23-450x369.png" alt="23" width="450" height="369" /></a>
<p><i>Obrázek 23: Data Display Debugger a debugger Perlu.</i></p>

<a href="http://fedora.cz/wp-content/uploads/2015/06/24.png"><img class="alignnone size-medium wp-image-5238" src="http://fedora.cz/wp-content/uploads/2015/06/24-450x369.png" alt="24" width="450" height="369" /></a>
<p><i>Obrázek 24: Data Display Debugger a debugger Perlu.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Obsah třetí části článku</h2>

<p>Ve třetí části článku o debuggerech a jejich nadstavbách se budeme zabývat pravděpodobně nejpropracovanější nadstavbou nad <i>GNU Debuggerem</i>. Jedná se o nástroj nazvaný <i>KDbg</i>. Taktéž se zmíníme o nástroji <i>Nemiver</i>, který může v&nbsp;některých případech <i>KDbg</i> nahradit (v&nbsp;tomto případě však do značné míry záleží i na preferencích uživatelů).</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Odkazy na Internetu</h2>

<ol>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (1.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Data Display Debugger<br />
<a href="https://www.gnu.org/software/ddd/">https://www.gnu.org/software/ddd/</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>BASH Debugger<br />
<a href="http://bashdb.sourceforge.net/">http://bashdb.sourceforge.net/</a>
</li>

<li>The Perl Debugger(s)<br />
<a href="http://debugger.perl.org/">http://debugger.perl.org/</a>
</li>

<li>Visual Debugging with DDD<br />
<a href="http://www.drdobbs.com/tools/visual-debugging-with-ddd/184404519">http://www.drdobbs.com/tools/visual-debugging-with-ddd/184404519</a>
</li>

<li>Pydb - Extended Python Debugger<br />
<a href="http://bashdb.sourceforge.net/pydb/">http://bashdb.sourceforge.net/pydb/</a>
</li>

<li>Insight<br />
<a href="http://www.sourceware.org/insight/">http://www.sourceware.org/insight/</a>
</li>

<li>Supported Languages (GNU Debugger)<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Clewn<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>Clewn installation<br />
<a href="http://clewn.sourceforge.net/install.html">http://clewn.sourceforge.net/install.html</a>
</li>

<li>Clewn - soubory ke stažení<br />
<a href="http://sourceforge.net/projects/clewn/files/OldFiles/">http://sourceforge.net/projects/clewn/files/OldFiles/</a>
</li>

<li>Pyclewn installation notes<br />
<a href="http://pyclewn.sourceforge.net/install.html">http://pyclewn.sourceforge.net/install.html</a>
</li>

</ol>



</body>
</html>

