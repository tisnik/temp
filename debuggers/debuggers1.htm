<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Debuggery a jejich nadstavby v Linuxu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
</head>

<body>

<h1>Debuggery a jejich nadstavby v Linuxu</h1>

<h3>Pavel Tišnovský</h3>

<p>V dnešním článku se budeme zabývat problematikou programátorských nástrojů používaných pro ladění aplikací přeložených do nativního strojového kódu. Základním nástrojem vývojářů jsou v tomto případě takzvané debuggery. Pro Linux existuje větší množství debuggerů, ovšem nejpoužívanějším je stále GNU Debugger a jeho četné nadstavby, které svým uživatelům nabízí jednodušeji ovladatelné grafické uživatelské rozhraní. Rozhraní k GNU Debuggeru je taktéž součástí mnoha programátorských textových editorů a IDE.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Debuggery a jejich nadstavby v&nbsp;Linuxu</a></p>
<p><a href="#k02">2. Stručná historie vývoje debuggerů</a></p>
<p><a href="#k03">3. Debuggery ovládané z&nbsp;příkazové řádky</a></p>
<p><a href="#k04">4. Debuggery integrované do IDE a GUI nadstavby nad debuggery</a></p>
<p><a href="#k05">5. GNU Debugger</a></p>
<p><a href="#k06">6. Základní funkce nabízené GNU Debuggerem</a></p>
<p><a href="#k07">7. Nástroj cgdb</a></p>
<p><a href="#k08">8. Obsah druhé části článku</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Debuggery a jejich nadstavby v&nbsp;Linuxu</h2>

<p>Mezi nejdůležitější nástroje používané dennodenně prakticky všemi
programátory při vývoji a taktéž při testování aplikací patří vedle překladačů
(popř.&nbsp;i interpretrů) a programátorských textových editorů či
integrovaných vývojových prostředí (IDE) taktéž ladicí nástroje, zejména pak
takzvané <i>debuggery</i>. Moderní debuggery nabízí programátorům hned několik
funkcí: spuštění programu s&nbsp;možností jeho zastavení na takzvaných
<i>breakpointech</i> popř.&nbsp;zastavení při splnění nějaké podmínky (počet
průchodů breakpointem), krokování programu po jednotlivých programových
řádcích, příkazech či dokonce po jednotlivých strojových instrukcích,
prohlížení obsahu globálních i lokálních proměnných, prohlížení obsahu paměti
(haldy) i zásobníku (resp.&nbsp;přesněji řečeno zásobníkových rámců), práci
s&nbsp;jednotlivými vlákny, prohlížení obsahu registrů mikroprocesoru a
v&nbsp;neposlední řadě pak analýzu tzv. core dumpu vygenerovaného při pádu
aplikace (pokud ovšem tato funkce není zakázána).</p>

<img src="01_td_1.png" />
<p><i>Obrázek 1: V&nbsp;minulosti velmi populární nástroj Turbo Debugger je
vybaven celoobrazovkovým textovým uživatelským rozhraním (TUI) připomínajícím
další produkty vytvořené společností Borland.</i></p>

<p>Mnohé současné debuggery se dokonce dokážou připojit k&nbsp;již běžící
aplikaci a provádět výše uvedené operace na &bdquo;živém&ldquo; programu, a to
při správně provedené konfiguraci i vzdáleně. To znamená, že z&nbsp;uživatelské
stanice lze například ladit program běžící na serveru či naopak program běžící
na jednočipovém mikrořadiči připojeném přes sériovou linku, JTAG, rozhraní USB
apod. Samostatnou kapitolou jsou pak debuggery používané ve webových
prohlížečích pro ladění aplikací napsaných v&nbsp;JavaScriptu či debuggery,
které jsou součástí některých složitějších aplikací vybavených vlastním
programovacím jazykem. Dobrým příkladem může být AutoCAD. V&nbsp;dalším textu
se však zaměříme na debuggery používané především pro ladění nativních
aplikací, tj.&nbsp;aplikací přeložených do strojového kódu mikroprocesoru.
Zmíníme se i o některých nadstavbách nad existujícími debuggery, především pak
o nadstavbách nad <i>GNU Debuggerem</i>, které k&nbsp;tomuto užitečnému
nástroji doplňují grafické uživatelské rozhraní.</p>

<img src="02_td_2.png" />
<p><i>Obrázek 2: Jedno ze speciálních oken Turbo Debuggeru, v&nbsp;němž se
zobrazuje stav mikroprocesoru (obsahy pracovních registrů i příznakových bitů),
obsah vybrané části operační paměti a taktéž zdrojový kód proložený
disassemblovaným strojovým kódem (v&nbsp;této části okna je zvýrazněn právě
prováděný řádek).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Stručná historie vývoje debuggerů</h2>

<p>Historie vývoje a používání debuggerů je velmi dlouhá, protože se &ndash;
vedle assemblerů, makroassemblerů a překladačů &ndash; jedná o nejstarší
programátorské nástroje vůbec. Sálové počítače (mainframy) a později i
minipočítače většinou obsahovaly speciální hardwarovou konzoli určenou pro
ladění programů (představme si ovládací panel s&nbsp;tlačítky typu
<strong>Run</strong>, <strong>Step</strong> atd.). Debuggery implementované
jako běžné programy se pak nejvíce rozšířily na mikropočítačích. Mezi první
debugger v&nbsp;moderním slova smyslu, tedy program nabízející celoobrazovkové
uživatelské rozhraní a možnost interaktivní práce, patří zejména <a
href="https://en.wikipedia.org/wiki/IBM_OLIVER_(CICS_interactive_test/debug)">IBM
OLIVER (CICS interactive test/debug)</a>, jehož první verze vyšla již
v&nbsp;roce 1972. K&nbsp;rychlému vývoji debuggerů pak došlo v&nbsp;osmdesátých
a devadesátých letech, kdy se tyto nástroje staly nedílnou součástí
integrovaných vývojových prostředí.</p>

<img src="03_qbasic_1.png" />
<p><i>Obrázek 3: Velmi jednoduchý debugger byl použit i v&nbsp;QBasicu. Tento
debugger programátorům nabízel pouze základní funkce.</i></p>

<p>V&nbsp;našich zemích byla populární především integrovaná vývojová prostředí
prodávaná společností <i>Borland</i> (Turbo Pascal, Turbo C++, Borland Pascal,
částečně i Turbo Basic atd.), do kterých byl debugger postupně integrován.
Navíc tato společnost vytvořila i <i>Turbo Debugger</i>, který měl podobný
vzhled i ovládání jako další produkty <i>Borlandu</i>. Velmi jednoduchý
debugger byl součástí QBasicu, zde se ovšem jednalo o debugger doplněný do
interpretru a nikoli o &bdquo;plnohodnotný&ldquo; debugger sloužící pro ladění
nativních aplikací. Zapomenout nesmíme ani na <i>Watcom C++</i>, který kromě
dalších nástrojů (včetně komerčního Vi) obsahoval i debugger. Až do relativně
nedávné doby byla součástí jak MS DOSu, tak i různých verzí MS Windows utilitka
nazvaná <strong>debug</strong>, což je velmi jednoduchý debugger ovládaný
z&nbsp;příkazové řádky. Ve skutečnosti tento debugger nepodporuje všechny
očekávané funkce, zejména pak propojení strojového kódu se zdrojovým kódem.
Náhradou je <strong>Windbg</strong>. Nyní se již začneme zabývat především těmi
debuggery a jejich nadstavbami, které lze využít na Linuxu.</p>

<img src="04_blitz.png" />
<p><i>Obrázek 4: Takto vypadá rozhraní debuggeru pro kdysi populární Blitz
Basic (screenshot byl pořízen na Amize).</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Debuggery ovládané z&nbsp;příkazové řádky</h2>

<p>Naprostou většinu v&nbsp;současnosti vyvíjených a používaných debuggerů je
možné rozdělit do dvou skupin. V&nbsp;první skupině nalezneme debuggery
ovládané z&nbsp;příkazové řádky. Někdy se tyto debuggery označují zkratkou
<i>CLI</i> neboli <i>Command Line Interface</i>. Příkladem debuggerů
spadajících do této kategorie je již výše zmíněný historický <i>Debug</i>,
novější (taktéž zmíněný) <i>Windbg</i>, dnes již pravděpodobně dále nevyvíjený
<i>Intel Debugger</i> či naopak nováček na tomto poli nazvaný <i>LLDB</i>.
Nejznámějším, nejpoužívanějším a současně i nejstarším ale stále využívaným
zástupcem této kategorie debuggerů je však <i>GNU Debugger</i>. Příkazy
ovládající debugger se v&nbsp;tomto případě zapisují na standardní vstup a
debugger vypisuje všechny zprávy na standardní výstup (mnohé debuggery si
dokonce vystačí i s&nbsp;takzvaným &bdquo;hloupým terminálem&ldquo;, který
dokáže rozpoznat pouze základní řídicí kódy). Tento způsob ovládání má své
přednosti, ale samozřejmě i zápory.</p>

<img src="05_debug_1.png" />
<p><i>Obrázek 5: Minimalistické rozhraní jednoduchého debuggeru nazvaného
<strong>debug</strong>. Na tomto screenshotu je zobrazena integrovaná
nápověda.</i></p>

<p>Mezi přednosti aplikací ovládaných z&nbsp;příkazového řádku patří velká
portabilita takového debuggeru (stejný frontend totiž může být bez nutnosti
dalších úprav použit na různých platformách a na různých operačních systémech),
velmi malé nároky debuggeru na systémové prostředky (což je v&nbsp;mnoha
případech důležité, zejména při zásahu na &bdquo;živém&ldquo; systému) a
v&nbsp;neposlední řadě i možnost ladit aplikaci po připojení debuggeru ze
vzdáleného počítače a to i ve chvíli, kdy ještě není inicializován celý systém.
Dokonce ještě ani nemusí být načteny všechny ovladače, v&nbsp;nouzi postačuje
mít jen základní driver pro práci se sériovým portem. Další předností je
podpora i dosti komplikovaných příkazů, které je možné jen poměrně složitě
realizovat v&nbsp;GUI. Mezi zápory tohoto způsobu ovládání debuggerů patří
především nutnost si postupně zapamatovat alespoň nejpoužívanější příkazy,
nemožnost efektivně rozdělit sledované informace podle jejich typu (část
obrazovky vyhrazená pro výpis informací o breakpointech, proměnných, obsahu
paměti, zdrojového kódu) atd.</p>

<img src="06_debug_2.png" />
<p><i>Obrázek 6: Minimalistické rozhraní jednoduchého debuggeru nazvaného
<strong>debug</strong>. Výpis obsahu operační paměti (horní část screenshotu) a
disassembling neboli nepřesně zpětný překlad programu (dolní část
screenshotu).</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Debuggery integrované do IDE a GUI nadstavby nad debuggery</h2>

<p>Tvůrci debuggerů ovládaných z&nbsp;příkazové řádky si jsou většinou dobře
vědomi některých problémů, které s&nbsp;sebou použití CLI přináší a proto
například dále popisovaný <i>GNU Debugger</i> obsahuje rozhraní, kterým lze
debugger ovládat z&nbsp;jiného procesu popř.&nbsp;dokonce i z&nbsp;jiného
počítače připojeného přes sériovou linku či přes protokol TCP/IP (realizovaný
přes Ethernet, paralelní port atd.). Tímto jiným procesem může být aplikace
vybavená grafickým uživatelským rozhraním, která možnosti debuggeru zpřístupní
jednodušším a mnohdy i mnohem názornějším způsobem. Takovýchto aplikací dnes
existuje značné množství, ať již se jedná o v&nbsp;podstatě jednoúčelové
nadstavby nad debuggerem (<i>cgdb</i>, <i>DDD</i>, <i>Nemiver</i>,
<i>Xxgdb</i>), tak i o textové editory (<i>Vim+Clewn</i>, <i>Emacs</i>,
<i>Anjuta</i>, <i>Geany</i>, <i>Code::Blocks</i>, <i>JEdit</i>) či o
integrovaná vývojová prostředí (jmenujme zejména <i>Eclipse</i>,
<i>Netbeans</i>, <i>KDevelop</i>, <i>Qt Creator</i> a v&nbsp;neposlední řadě
<i>Lazarus</i>).</p>

<img src="07_turbo_1.png" />
<p><i>Obrázek 7: Debugger integrovaný do slavného Turbo Pascalu. Zde je
konkrétně zobrazen dialog pro vytvoření breakpointu.</i></p>

<p>Nesmíme ovšem zapomenout ani na debuggery, které přímo obsahují textové či
grafické uživatelské rozhraní. I tyto debuggery se mnohdy integrují do nějakého
vývojového prostředí. Příkladem může být <i>Gambas</i> se svým debuggerem či
(relativně) samostatný <i>Microsoft Visual Studio Debugger</i>. Nicméně je
zajímavé, že i přes existenci mnohdy velmi kvalitních nadstaveb nad CLI
debuggery i nástrojů s&nbsp;plnohodnotným textovým či grafickým uživatelským
rozhraním stále můžeme najít poměrně velké množství vývojářů využívajících
klasický řádkový debugger přímo z&nbsp;konzole, což se dnes týká především
uživatelů <i>GNU Debuggeru</i> (možná typické je, že se jedná o starší
programátory s&nbsp;perfektní znalostí Unixu, mikroprocesorové techniky a
většinou i překladačů). Právě <i>GNU Debuggerem</i> a některými jeho
nadstavbami se budeme zabývat jak v&nbsp;následujících kapitolách, tak i
v&nbsp;navazujících částech tohoto článku.</p>

<img src="08_turbo_2.png" />
<p><i>Obrázek 8: Další snímek debuggeru integrovaného do Turbo Pascalu.
Zobrazení obsahů pracovních registrů a okno se sledovanými proměnnými
(povšimněte si, že přeložený kód je určen pro 16bitový reálný režim
mikroprocesoru).</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. GNU Debugger</h2>

<p>Pro operační systém Linux existuje větší množství debuggerů, včetně
komerčních nástrojů <i>Affinic</i> a <i>TotalView</i>, ovšem nejpoužívanějším
debuggerem je stále <i>GNU Debugger</i>, jehož první verze vznikla již
v&nbsp;roce 1986, takže se po 29 letech kontinuálního vývoje jedná o velmi
vyzrálý produkt. <i>GNU Debugger</i> byl v&nbsp;průběhu svého vývoje portován
jak na mnoho operačních systémů, tak i na nepřeberné množství procesorových a
mikroprocesorových architektur, z&nbsp;nichž jmenujme především řadu x86,
x86_64, ARM, Motorola 68HC11, MIPS či PowerPC. Tento debugger podporuje všechny
překladače z&nbsp;rodiny GNU, což mj.&nbsp;znamená, že dokáže zobrazit a
pracovat se zdrojovými kódy v&nbsp;jazycích Ada, C, C++, Go, Objective-C, D,
Fortran, Modula-2, Pascal a Java (ovšem jen v&nbsp;případě překladu Javy do
nativního kódu). Na základě jazyka, v&nbsp;němž je laděný program napsán, se
upravují i zprávy <i>GNU Debuggeru</i>, takže se například používá správný
formát hexadecimálních čísel, struktur záznamů atd. Taktéž assemblery používané
na Linuxu <i>GNU Debugger</i> přímo podporují (jedná se jak o
<strong>as</strong>, tak i o <strong>NASM</strong>).</p>

<img src="09_gdb_1.png" />
<p><i>Obrázek 9: Na tomto screenshotu můžeme vidět průběh typického
&bdquo;sezení&ldquo; programátora využívajícího debugger <strong>gdb</strong>
při ladění jednoduché aplikace naprogramované v&nbsp;céčku. Nejprve je program
přelože s&nbsp;vygenerováním ladicích informací (<strong>-g</strong>) a
následné je spuštěn debugger.</i></p>

<p>Ladicí nástroj <i>GNU Debugger</i>, který je taktéž někdy po své spustitelné
(binární) části pojmenováván <strong>gdb</strong>, primárně používá ke
komunikaci s&nbsp;uživatelem příkazový řádek, alternativně lze použít i již
zmíněný protokol pro nepřímé ovládání debuggeru a v&nbsp;případě potřeby je
možné k&nbsp;laděné aplikaci přidat relativně krátký &bdquo;stub&ldquo;
sloužící pro přímé ladění takové aplikace (touto nepochybně zajímavou
problematikou se však dnes nebudeme zabývat). Většina často používaných příkazů
má i svoji zkrácenou podobu (<i>bt=backtrace</i>, <i>c=continue</i>,
<i>f=frame</i>) a navíc je možné používat klávesu [Tab] pro automatické
doplnění celého jména příkazu. Pokud je správně nastavený terminál, bude
fungovat i historie příkazového řádku, a to stejným způsobem, jaký známe ze
shellu. Alternativně je možné využít <strong>gdbtui</strong>
s&nbsp;celoobrazovkovým výstupem a přiblížit se tak možnostem debuggerů
s&nbsp;plnohodnotným grafickým uživatelským rozhraním.</p>

<img src="10_gdb_2.png" />
<p><i>Obrázek 10: Další screenshot představující typické &bdquo;sezení&ldquo;
programátora využívajícího debugger <strong>gdb</strong>. Nejprve je provedeno
nastavení breakpointu příkazem <strong>b main</strong>, následně spuštění
laděného programu příkazem <strong>r</strong> a posléze krokování příkazem
<strong>n</strong> (klávesa Enter zopakuje poslední zadaný příkaz, proto je
<strong>n</strong> vlastně v&nbsp;tomto příkladu používán nadbytečně).</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Základní funkce nabízené GNU Debuggerem</h2>

<p>V&nbsp;seznamu pod tímto odstavcem jsou zmíněny vybrané základní operace,
které je možné v&nbsp;<i>GNU Debuggeru</i> provádět:</p>

<ol>

<li>Ladění přeloženého programu (spuštění procesu přímo z&nbsp;debuggeru),
připojení debuggeru k&nbsp;běžícímu procesu, analýza core dumpu.</li>

<li>Spuštění (<i>run</i>), pozastavení a znovuspuštění laděného programu
(<i>continue</i>). Prakticky tytéž operace je možné provádět
s&nbsp;jednotlivými vlákny.</li>

<li>Krokování programu, přičemž se vývojář může rozhodnout, jestli se mají
volané funkce provést v&nbsp;jednom kroku (<i>step over</i>) či zda se naopak
má přejít i dovnitř těchto funkcí (<i>step into</i>).</li>

<li>Nastavení <i>breakpointů</i> i breakpointů s&nbsp;podmínkou,
tj.&nbsp;breakpointů, které začnou být aktivní až ve chvíli, kdy dojde ke
splnění zadané podmínky (vhodné například při sledování chování programových
smyček či rekurzivních algoritmů).</li>

<li>Nastavení takzvaných <i>watchpointů</i>. Jedná se o speciální případ
breakpointů; program se zastaví ve chvíli, kdy dojde ke změně zadaného výrazu,
v&nbsp;nejjednodušším případě ke změně hodnoty nějaké proměnné
(popř.&nbsp;místa v&nbsp;paměti). Alternativně lze watchpoint nastavit pro
detekci čtení z&nbsp;proměnné. To se samozřejmě týká i položek v&nbsp;záznamech
(record) či prvků polí.</li>

<li>Podpora <i>tracepointů</i>. Zjednodušeně řečeno je možné říci, že
tracepointy slouží pro zjištění stavu programu v&nbsp;nějakém specifikovaném
bodu, ovšem bez (po)zastavení programu. Samotné pozastavení programu totiž může
v&nbsp;některých případech způsobit jeho chybnou činnost či naopak zastínit
některé chyby vyplývající ze špatně implementované synchronizace vláken či při
přístupu ke sdíleným prostředkům.</li>

<li>Výpis obsahu zásobníkových rámců (<i>backtrace</i>) a tím pádem i zjištění
historie volaných funkcí (včetně informací o předaných parametrech).</li>

<li>Prohlížení obsahu paměti, k&nbsp;čemuž slouží výkonný příkaz <i>print</i>,
jemuž je možné zadat mnohdy i velmi komplikovaný výraz, jehož výsledek se
vypíše na standardní výstup. Lze kombinovat s&nbsp;krokováním.</li>

</ol>

<img src="11_gdb_3.png" />
<p><i>Obrázek 11: GNU Debugger samozřejmě taktéž podporuje disassembling ze
strojového kódu popř.&nbsp;z&nbsp;bajtkódu do čitelné podoby (jazyka
symbolických instrukcí). Z&nbsp;tohoto screenshotu je patrné, že program byl
přeložen do strojového kódu mikroprocesorů z&nbsp;rodiny x86_64.</i></p>

<p>O tom, jak se ladění aplikací provádí v&nbsp;praxi, si řekneme
v&nbsp;navazující části článku.</p>

<img src="12_gdb_4.png" />
<p><i>Obrázek 12: GNU Debugger je možné použít i v&nbsp;prostředí Cygwinu, zde
konkrétně můžeme vidět nastavení a použití výše zmíněných watchpointů.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Nástroj cgdb</h2>

<p>Vzhledem k&nbsp;tomu, že práce s&nbsp;příkazovým řádkem <i>GNU Debuggeru</i>
nemusí vyhovovat všem uživatelům, vznikla pro tento debugger poměrně
jednoúčelová nadstavba pojmenovaná <i>cgdb</i>, která taktéž pracuje
v&nbsp;terminálu a lze ji tedy využít v&nbsp;prakticky všech případech, kdy by
musel být spuštěn <i>gdb</i>. Ve svém základním nastavení nástroj <i>cgdb</i>
rozděluje okno terminálu (konzole) na dvě části. V&nbsp;horní části je zobrazen
zdrojový kód laděné aplikace a v&nbsp;části dolní pak rozhraní samotného <i>GNU
Debuggeru</i>. Mezi oběma částmi je možné se s&nbsp;využitím několika
klávesových zkratek přepínat, přičemž je nutné poznamenat, že většinu
složitějších příkazů je možné zadávat jen v&nbsp;rozhraní <i>GNU Debuggeru</i>.
Horní část slouží zejména pro dobrou orientaci v&nbsp;laděném programu, pro
zobrazení nastavených breakpointů (v&nbsp;základním nastavení je použita
červená barva) a taktéž pro zobrazení místa, v&nbsp;němž se právě nachází
laděný program (v&nbsp;základním nastavení je tento řádek zobrazen zeleně).</p>

<img src="13_cgdb1.png" />
<p><i>Obrázek 13: Takto vypadá textové uživatelské rozhraní nástroje cgbd po
spuštění. V&nbsp;horním okně můžeme vidět zdrojový kód se zeleně zvýrazněným
aktivním řádkem, v&nbsp;dolní polovině terminálu se pak nachází rozhraní GNU
Debuggeru.</i></p>

<p>V&nbsp;nástroji <i>cgbd</i> se využívají klávesové zkratky známé především
z&nbsp;textových editorů Vi a Vim, ovšem i ti uživatelé, kteří tyto editory
nepoužívají (a tudíž dané zkratky neznají), nebudou ztraceni, protože se
například ve zdrojovém textu mohou pro přesun kurzoru používat i kurzorové
klávesy atd. <i>cgdb</i> obsahuje i vestavěnou nápovědu dostupnou po stisku
klávesy F1.</p>

<img src="14_cgdb2.png" />
<p><i>Obrázek 14: Ladění programu v&nbsp;cgdb. Na řádku 21 je nastaven
breakpoint, proto je tento řádek zvýrazněn červeně. Řízení programu přešlo na
řádek číslo 23 (zvýrazněno zeleně) a v&nbsp;dolní části si vývojář
s&nbsp;využitím příkazu <strong>print</strong> vypsal obsah dvou lokálních
proměnných.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Obsah druhé části článku</h2>

<p>Ve druhé části tohoto článku se budeme zabývat popisem dalších nadstaveb
vytvořených nad <i>GNU Debuggerem</i>. Podrobně si popíšeme zejména nástroje
<i>DDD</i> a <i>Nemiver</i>, které svým uživatelům nabízí většinu funkcionality
<i>GNU Debuggeru</i>, ovšem se zachováním přehlednosti a taktéž snadnosti
použití svého grafického uživatelského rozhraní (podle mého názoru se
v&nbsp;případě <i>Nemiveru</i> jedná o jeden z&nbsp;nejzajímavějších podpůrných
nástrojů vůbec, zejména pro začátečníky). Taktéž si popíšeme propojení mezi
<i>GNU Debuggerem</i> a populárními textovými editory <i>Geany</i> a
<i>Atom</i> &ndash; viz též screenshoty zobrazené pod tímto odstavcem.</p>

<img src="15_ddd1.png" />
<p><i>Obrázek 15: Takto vypadá textové uživatelské rozhraní nástroje cgbd po
spuštění. V&nbsp;horním okně můžeme vidět zdrojový kód se zeleně zvýrazněným
aktivním řádkem, v&nbsp;dolní polovině terminálu se pak nachází rozhraní GNU
Debuggeru.</i></p>

<img src="16_atom_gdb.png" />
<p><i>Obrázek 16: GNU Debugger je možné po instalaci správného pluginu
používat i z&nbsp;populárního textového editoru Atom.</i></p>

<img src="17_anjuta.png" />
<p><i>Obrázek 17: Nastavení ladění v&nbsp;programátorském textovém editoru (a
současně i jednoduchém integrovaném vývojovém prostředí) Geany. Tento editor
při ladění volá GNU Debugger.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Odkazy na Internetu</h2>

<ol>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Clewn<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>Clewn installation<br />
<a href="http://clewn.sourceforge.net/install.html">http://clewn.sourceforge.net/install.html</a>
</li>

<li>Clewn - soubory ke stažení<br />
<a href="http://sourceforge.net/projects/clewn/files/OldFiles/">http://sourceforge.net/projects/clewn/files/OldFiles/</a>
</li>

<li>Pyclewn installation notes<br />
<a href="http://pyclewn.sourceforge.net/install.html">http://pyclewn.sourceforge.net/install.html</a>
</li>

</ol>



</body>
</html>

