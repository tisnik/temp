<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. Předání vektorů do funkce hodnotou vs.&nbsp;referencí</a></p>
<p><a href="#k04">*** 4. Způsob překladu vektorových operací do assembleru</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. Vektorové operace nad vektory s&nbsp;prvky typu <strong>float</strong> a <strong>double</strong></a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. Vektor není libovolně velké pole &ndash; omezení GCC</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. Ne všechny operace mohou být v&nbsp;SIMD podporovány</a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. Základní aritmetické operace s&nbsp;prvky vektorů typu <strong>float</strong></a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. Překlad do strojového kódu s&nbsp;použitím instrukcí SIMD</a></p>
<p><a href="#k16">*** 16. Zásadní omezení rozšíření GCC</a></p>
<p><a href="#k17">*** 17. SIMD a vektorové operace na architekturách AArch64 a RISC-V</a></p>
<p><a href="#k18">*** 18. Příloha &ndash; soubor Makefile použitý v&nbsp;dnešním článku</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vyplatí se používat dlouhé vektory?</h2>

<pre>
typedef float v256f __attribute__((vector_size(256)));
&nbsp;
int main(void)
{
    v256f x = { 1.0 };
    v256f y = { 1.0 };
    v256f z = x + y;
&nbsp;
    return 0;
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Předání vektorů do funkce hodnotou vs.&nbsp;referencí</h2>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
typedef unsigned char v16ub __attribute__((vector_size(16)));
&nbsp;
void add16ub(v16ub x, v16ub y, v16ub * z)
{
    *z = x + y;
}
&nbsp;
typedef unsigned short v16us __attribute__((vector_size(16)));
&nbsp;
void add16us(v16us x, v16us y, v16us * z)
{
    *z = x + y;
}
&nbsp;
typedef unsigned int v16ui __attribute__((vector_size(16)));
&nbsp;
void add16ui(v16ui x, v16ui y, v16ui * z)
{
    *z = x + y;
}
&nbsp;
typedef unsigned long int v16ul __attribute__((vector_size(16)));
&nbsp;
void add16ul(v16ul x, v16ul y, v16ul * z)
{
    *z = x + y;
}
&nbsp;
int main(void)
{
    {
        v16ub x = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
        v16ub y =
            { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff
        };
        v16ub z;
&nbsp;
        add16ub(x, y, &nbsp;z);
&nbsp;
        int i;
&nbsp;
        puts("vector of unsigned chars");
&nbsp;
        for (i = 0; i &lt; sizeof(v16ub) / sizeof(unsigned char); i++) {
            printf("%d %u\n", i, z[i]);
        }
    }
&nbsp;
    putchar('\n');
&nbsp;
    {
        v16us x = { 0, 1, 2, 3, 4, 5, 6, 7 };
        v16us y = { 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
            0xffff
        };
        v16us z;
&nbsp;
        add16us(x, y, &nbsp;z);
&nbsp;
        int i;
&nbsp;
        puts("vector of unsigned short ints");
&nbsp;
        for (i = 0; i &lt; sizeof(v16us) / sizeof(unsigned short); i++) {
            printf("%d %u\n", i, z[i]);
        }
    }
&nbsp;
    putchar('\n');
&nbsp;
    {
        v16ui x = { 0, 1, 2, 3 };
        v16ui y = { 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff };
        v16ui z;
&nbsp;
        add16ui(x, y, &nbsp;z);
&nbsp;
        int i;
&nbsp;
        puts("vector of unsigned ints");
&nbsp;
        for (i = 0; i &lt; sizeof(v16ui) / sizeof(unsigned int); i++) {
            printf("%d %u\n", i, z[i]);
        }
    }
&nbsp;
    putchar('\n');
&nbsp;
    {
        v16ul x = { 0, 1 };
        v16ul y = { 0xffffffffffffffff, 0xffffffffffffffff };
        v16ul z;
&nbsp;
        add16ul(x, y, &nbsp;z);
&nbsp;
        int i;
&nbsp;
        puts("vector of unsigned longs");
&nbsp;
        for (i = 0; i &lt; sizeof(v16ul) / sizeof(unsigned long); i++) {
            printf("%d %lu\n", i, z[i]);
        }
    }
&nbsp;
    return 0;
}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Způsob překladu vektorových operací do assembleru</h2>

<pre>
   c:   48 8b 45 10             mov    rax,QWORD PTR [rbp+0x10]
  10:   48 8b 55 20             mov    rdx,QWORD PTR [rbp+0x20]
  14:   48 89 c6                mov    rsi,rax
  17:   48 31 d6                xor    rsi,rdx
  1a:   48 b9 7f 7f 7f 7f 7f    movabs rcx,0x7f7f7f7f7f7f7f7f
  21:   7f 7f 7f 
  24:   48 21 d1                and    rcx,rdx
  27:   48 ba 7f 7f 7f 7f 7f    movabs rdx,0x7f7f7f7f7f7f7f7f
  2e:   7f 7f 7f 
  31:   48 21 d0                and    rax,rdx
  34:   48 ba 80 80 80 80 80    movabs rdx,0x8080808080808080
  3b:   80 80 80 
  3e:   48 21 f2                and    rdx,rsi
  41:   48 01 c8                add    rax,rcx
  44:   48 89 d6                mov    rsi,rdx
  47:   48 31 c6                xor    rsi,rax
  4a:   48 8b 45 18             mov    rax,QWORD PTR [rbp+0x18]
  4e:   48 8b 55 28             mov    rdx,QWORD PTR [rbp+0x28]
  52:   48 89 c7                mov    rdi,rax
  55:   48 31 d7                xor    rdi,rdx
  58:   48 b9 7f 7f 7f 7f 7f    movabs rcx,0x7f7f7f7f7f7f7f7f
  5f:   7f 7f 7f 
  62:   48 21 d1                and    rcx,rdx
  65:   48 ba 7f 7f 7f 7f 7f    movabs rdx,0x7f7f7f7f7f7f7f7f
  6c:   7f 7f 7f 
  6f:   48 21 d0                and    rax,rdx
  72:   48 ba 80 80 80 80 80    movabs rdx,0x8080808080808080
  79:   80 80 80 
  7c:   48 21 fa                and    rdx,rdi
  7f:   48 01 c8                add    rax,rcx
  82:   48 89 d1                mov    rcx,rdx
  85:   48 31 c1                xor    rcx,rax
  88:   b8 00 00 00 00          mov    eax,0x0
  8d:   ba 00 00 00 00          mov    edx,0x0
  92:   48 89 f0                mov    rax,rsi
  95:   48 89 ca                mov    rdx,rcx
  98:   48 8b 4d f8             mov    rcx,QWORD PTR [rbp-0x8]
  9c:   48 89 01                mov    QWORD PTR [rcx],rax
  9f:   48 89 51 08             mov    QWORD PTR [rcx+0x8],rdx
</pre>

<pre>
   8:   0f 29 45 f0             movaps XMMWORD PTR [rbp-0x10],xmm0
   c:   0f 29 4d e0             movaps XMMWORD PTR [rbp-0x20],xmm1
  10:   48 89 7d d8             mov    QWORD PTR [rbp-0x28],rdi
    *z = x + y;
  14:   66 0f 6f 45 f0          movdqa xmm0,XMMWORD PTR [rbp-0x10]
  19:   66 0f fc 45 e0          paddb  xmm0,XMMWORD PTR [rbp-0x20]
  1e:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  22:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>

<pre>
  30:   0f 29 45 f0             movaps XMMWORD PTR [rbp-0x10],xmm0
  34:   0f 29 4d e0             movaps XMMWORD PTR [rbp-0x20],xmm1
  38:   48 89 7d d8             mov    QWORD PTR [rbp-0x28],rdi
    *z = x + y;
  3c:   66 0f 6f 45 f0          movdqa xmm0,XMMWORD PTR [rbp-0x10]
  41:   66 0f fd 45 e0          paddw  xmm0,XMMWORD PTR [rbp-0x20]
  46:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  4a:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>

<pre>
  58:   0f 29 45 f0             movaps XMMWORD PTR [rbp-0x10],xmm0
  5c:   0f 29 4d e0             movaps XMMWORD PTR [rbp-0x20],xmm1
  60:   48 89 7d d8             mov    QWORD PTR [rbp-0x28],rdi
    *z = x + y;
  64:   66 0f 6f 45 f0          movdqa xmm0,XMMWORD PTR [rbp-0x10]
  69:   66 0f fe 45 e0          paddd  xmm0,XMMWORD PTR [rbp-0x20]
  6e:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  72:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>

<pre>
  80:   0f 29 45 f0             movaps XMMWORD PTR [rbp-0x10],xmm0
  84:   0f 29 4d e0             movaps XMMWORD PTR [rbp-0x20],xmm1
  88:   48 89 7d d8             mov    QWORD PTR [rbp-0x28],rdi
    *z = x + y;
  8c:   66 0f 6f 45 f0          movdqa xmm0,XMMWORD PTR [rbp-0x10]
  91:   66 0f d4 45 e0          paddq  xmm0,XMMWORD PTR [rbp-0x20]
  96:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  9a:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Tytéž operace, ovšem prováděné s&nbsp;prvky se znaménkem</h2>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
typedef signed char v16sb __attribute__((vector_size(16)));
&nbsp;
void add16ub(v16sb x, v16sb y, v16sb * z)
{
    *z = x + y;
}
&nbsp;
typedef signed short v16ss __attribute__((vector_size(16)));
&nbsp;
void add16us(v16ss x, v16ss y, v16ss * z)
{
    *z = x + y;
}
&nbsp;
typedef signed int v16si __attribute__((vector_size(16)));
&nbsp;
void add16ui(v16si x, v16si y, v16si * z)
{
    *z = x + y;
}
&nbsp;
typedef signed long int v16sl __attribute__((vector_size(16)));
&nbsp;
void add16ul(v16sl x, v16sl y, v16sl * z)
{
    *z = x + y;
}
&nbsp;
int main(void)
{
    {
        v16sb x = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
        v16sb y =
            { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff
        };
        v16sb z;
&nbsp;
        add16ub(x, y, &nbsp;z);
&nbsp;
        int i;
&nbsp;
        puts("vector of signed chars");
&nbsp;
        for (i = 0; i &lt; sizeof(v16sb) / sizeof(signed char); i++) {
            printf("%d %d\n", i, z[i]);
        }
    }
&nbsp;
    putchar('\n');
&nbsp;
    {
        v16ss x = { 0, 1, 2, 3, 4, 5, 6, 7 };
        v16ss y = { 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
            0xffff
        };
        v16ss z;
&nbsp;
        add16us(x, y, &nbsp;z);
&nbsp;
        int i;
&nbsp;
        puts("vector of signed short ints");
&nbsp;
        for (i = 0; i &lt; sizeof(v16ss) / sizeof(signed short); i++) {
            printf("%d %d\n", i, z[i]);
        }
    }
&nbsp;
    putchar('\n');
&nbsp;
    {
        v16si x = { 0, 1, 2, 3 };
        v16si y = { 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff };
        v16si z;
&nbsp;
        add16ui(x, y, &nbsp;z);
&nbsp;
        int i;
&nbsp;
        puts("vector of signed ints");
&nbsp;
        for (i = 0; i &lt; sizeof(v16si) / sizeof(signed int); i++) {
            printf("%d %d\n", i, z[i]);
        }
    }
&nbsp;
    putchar('\n');
&nbsp;
    {
        v16sl x = { 0, 1 };
        v16sl y = { 0xffffffffffffffff, 0xffffffffffffffff };
        v16sl z;
&nbsp;
        add16ul(x, y, &nbsp;z);
&nbsp;
        int i;
&nbsp;
        puts("vector of signed longs");
&nbsp;
        for (i = 0; i &lt; sizeof(v16sl) / sizeof(signed long); i++) {
            printf("%d %ld\n", i, z[i]);
        }
    }
&nbsp;
    return 0;
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Způsob překladu vektorových operací do assembleru</h2>

<pre>
    *z = x + y;
   c:   48 8b 45 10             mov    rax,QWORD PTR [rbp+0x10]
  10:   48 8b 55 20             mov    rdx,QWORD PTR [rbp+0x20]
  14:   48 89 c6                mov    rsi,rax
  17:   48 31 d6                xor    rsi,rdx
  1a:   48 b9 7f 7f 7f 7f 7f    movabs rcx,0x7f7f7f7f7f7f7f7f
  21:   7f 7f 7f 
  24:   48 21 d1                and    rcx,rdx
  27:   48 ba 7f 7f 7f 7f 7f    movabs rdx,0x7f7f7f7f7f7f7f7f
  2e:   7f 7f 7f 
  31:   48 21 d0                and    rax,rdx
  34:   48 ba 80 80 80 80 80    movabs rdx,0x8080808080808080
  3b:   80 80 80 
  3e:   48 21 f2                and    rdx,rsi
  41:   48 01 c8                add    rax,rcx
  44:   48 89 d6                mov    rsi,rdx
  47:   48 31 c6                xor    rsi,rax
  4a:   48 8b 45 18             mov    rax,QWORD PTR [rbp+0x18]
  4e:   48 8b 55 28             mov    rdx,QWORD PTR [rbp+0x28]
  52:   48 89 c7                mov    rdi,rax
  55:   48 31 d7                xor    rdi,rdx
  58:   48 b9 7f 7f 7f 7f 7f    movabs rcx,0x7f7f7f7f7f7f7f7f
  5f:   7f 7f 7f 
  62:   48 21 d1                and    rcx,rdx
  65:   48 ba 7f 7f 7f 7f 7f    movabs rdx,0x7f7f7f7f7f7f7f7f
  6c:   7f 7f 7f 
  6f:   48 21 d0                and    rax,rdx
  72:   48 ba 80 80 80 80 80    movabs rdx,0x8080808080808080
  79:   80 80 80 
  7c:   48 21 fa                and    rdx,rdi
  7f:   48 01 c8                add    rax,rcx
  82:   48 89 d1                mov    rcx,rdx
  85:   48 31 c1                xor    rcx,rax
  88:   b8 00 00 00 00          mov    eax,0x0
  8d:   ba 00 00 00 00          mov    edx,0x0
  92:   48 89 f0                mov    rax,rsi
  95:   48 89 ca                mov    rdx,rcx
  98:   48 8b 4d f8             mov    rcx,QWORD PTR [rbp-0x8]
  9c:   48 89 01                mov    QWORD PTR [rcx],rax
  9f:   48 89 51 08             mov    QWORD PTR [rcx+0x8],rdx
</pre>

<pre>
   8:   0f 29 45 f0             movaps XMMWORD PTR [rbp-0x10],xmm0
   c:   0f 29 4d e0             movaps XMMWORD PTR [rbp-0x20],xmm1
  10:   48 89 7d d8             mov    QWORD PTR [rbp-0x28],rdi
    *z = x + y;
  14:   66 0f 6f 45 f0          movdqa xmm0,XMMWORD PTR [rbp-0x10]
  19:   66 0f fc 45 e0          paddb  xmm0,XMMWORD PTR [rbp-0x20]
  1e:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  22:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>

<pre>
  30:   0f 29 45 f0             movaps XMMWORD PTR [rbp-0x10],xmm0
  34:   0f 29 4d e0             movaps XMMWORD PTR [rbp-0x20],xmm1
  38:   48 89 7d d8             mov    QWORD PTR [rbp-0x28],rdi
    *z = x + y;
  3c:   66 0f 6f 45 f0          movdqa xmm0,XMMWORD PTR [rbp-0x10]
  41:   66 0f fd 45 e0          paddw  xmm0,XMMWORD PTR [rbp-0x20]
  46:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  4a:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>

<pre>
  58:   0f 29 45 f0             movaps XMMWORD PTR [rbp-0x10],xmm0
  5c:   0f 29 4d e0             movaps XMMWORD PTR [rbp-0x20],xmm1
  60:   48 89 7d d8             mov    QWORD PTR [rbp-0x28],rdi
    *z = x + y;
  64:   66 0f 6f 45 f0          movdqa xmm0,XMMWORD PTR [rbp-0x10]
  69:   66 0f fe 45 e0          paddd  xmm0,XMMWORD PTR [rbp-0x20]
  6e:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  72:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>

<pre>
  80:   0f 29 45 f0             movaps XMMWORD PTR [rbp-0x10],xmm0
  84:   0f 29 4d e0             movaps XMMWORD PTR [rbp-0x20],xmm1
  88:   48 89 7d d8             mov    QWORD PTR [rbp-0x28],rdi
    *z = x + y;
  8c:   66 0f 6f 45 f0          movdqa xmm0,XMMWORD PTR [rbp-0x10]
  91:   66 0f d4 45 e0          paddq  xmm0,XMMWORD PTR [rbp-0x20]
  96:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  9a:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vektorové operace nad vektory s&nbsp;prvky typu <strong>float</strong> a <strong>double</strong></h2>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
typedef float v16float __attribute__((vector_size(16)));
&nbsp;
void add16float(v16float x, v16float y, v16float * z)
{
    *z = x + y;
}
&nbsp;
typedef double v16double __attribute__((vector_size(16)));
&nbsp;
void add16double(v16double x, v16double y, v16double * z)
{
    *z = x + y;
}
&nbsp;
int main(void)
{
    {
        v16float x = { 0, 1, 2, 3 };
        v16float y = { 0.1, 0.1, 0.1, 0.1 };
        v16float z;
&nbsp;
        add16float(x, y, &nbsp;z);
&nbsp;
        int i;
&nbsp;
        puts("vector of floats");
&nbsp;
        for (i = 0; i &lt; sizeof(v16float) / sizeof(float); i++) {
            printf("%d %f\n", i, z[i]);
        }
    }
&nbsp;
    putchar('\n');
&nbsp;
    {
        v16double x = { 0, 1 };
        v16double y = { 0.1, 0.1 };
        v16double z;
&nbsp;
        add16double(x, y, &nbsp;z);
&nbsp;
        int i;
&nbsp;
        puts("vector of doubles");
&nbsp;
        for (i = 0; i &lt; sizeof(v16double) / sizeof(double); i++) {
            printf("%d %f\n", i, z[i]);
        }
    }
    return 0;
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
    *z = x + y;
   c:   d9 45 10                fld    DWORD PTR [rbp+0x10]
   f:   d9 45 20                fld    DWORD PTR [rbp+0x20]
  12:   de c1                   faddp  st(1),st
  14:   d9 45 14                fld    DWORD PTR [rbp+0x14]
  17:   d9 45 24                fld    DWORD PTR [rbp+0x24]
  1a:   de c1                   faddp  st(1),st
  1c:   d9 45 18                fld    DWORD PTR [rbp+0x18]
  1f:   d9 45 28                fld    DWORD PTR [rbp+0x28]
  22:   de c1                   faddp  st(1),st
  24:   d9 45 1c                fld    DWORD PTR [rbp+0x1c]
  27:   d9 45 2c                fld    DWORD PTR [rbp+0x2c]
  2a:   de c1                   faddp  st(1),st
  2c:   d9 cb                   fxch   st(3)
  2e:   d9 5d d0                fstp   DWORD PTR [rbp-0x30]
  31:   d9 c9                   fxch   st(1)
  33:   d9 5d d4                fstp   DWORD PTR [rbp-0x2c]
  36:   d9 5d d8                fstp   DWORD PTR [rbp-0x28]
  39:   d9 5d dc                fstp   DWORD PTR [rbp-0x24]
  3c:   48 8b 45 d0             mov    rax,QWORD PTR [rbp-0x30]
  40:   48 89 45 f0             mov    QWORD PTR [rbp-0x10],rax
  44:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  48:   48 89 45 f8             mov    QWORD PTR [rbp-0x8],rax
  4c:   48 8b 45 e8             mov    rax,QWORD PTR [rbp-0x18]
  50:   48 8b 55 f0             mov    rdx,QWORD PTR [rbp-0x10]
  54:   48 89 10                mov    QWORD PTR [rax],rdx
  57:   48 8b 55 f8             mov    rdx,QWORD PTR [rbp-0x8]
  5b:   48 89 50 08             mov    QWORD PTR [rax+0x8],rdx
</pre>

<pre>
  6e:   dd 45 10                fld    QWORD PTR [rbp+0x10]
  71:   dd 45 20                fld    QWORD PTR [rbp+0x20]
  74:   de c1                   faddp  st(1),st
  76:   dd 45 18                fld    QWORD PTR [rbp+0x18]
  79:   dd 45 28                fld    QWORD PTR [rbp+0x28]
  7c:   de c1                   faddp  st(1),st
  7e:   d9 c9                   fxch   st(1)
  80:   dd 5d d0                fstp   QWORD PTR [rbp-0x30]
  83:   dd 5d d8                fstp   QWORD PTR [rbp-0x28]
  86:   48 8b 45 d0             mov    rax,QWORD PTR [rbp-0x30]
  8a:   48 89 45 f0             mov    QWORD PTR [rbp-0x10],rax
  8e:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  92:   48 89 45 f8             mov    QWORD PTR [rbp-0x8],rax
  96:   48 8b 45 e8             mov    rax,QWORD PTR [rbp-0x18]
  9a:   48 8b 55 f0             mov    rdx,QWORD PTR [rbp-0x10]
  9e:   48 89 10                mov    QWORD PTR [rax],rdx
  a1:   48 8b 55 f8             mov    rdx,QWORD PTR [rbp-0x8]
  a5:   48 89 50 08             mov    QWORD PTR [rax+0x8],rdx
</pre>

<pre>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vektor není libovolně velké pole &ndash; omezení GCC</h2>

<pre>
typedef float v1024f __attribute__((vector_size(1024)));

void addVectors(v1024f * x, v1024f * y, v1024f * z)
{
    *z = *x + *y;
}

int main(void)
{
    v1024f x = { 1.0 };
    v1024f y = { 1.0 };
    v1024f z;

    addVectors(&nbsp;x, &nbsp;y, &nbsp;z);

    return 0;
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
      3a:       48 8b 94 24 80 0b 00    mov    rdx,QWORD PTR [rsp+0xb80]
      41:       00 
      42:       48 8d 84 24 88 0b 00    lea    rax,[rsp+0xb88]
      49:       00 
      4a:       48 89 d6                mov    rsi,rdx
      4d:       ba 80 00 00 00          mov    edx,0x80
      52:       48 89 c7                mov    rdi,rax
      55:       48 89 d1                mov    rcx,rdx
      58:       f3 48 a5                rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
      5b:       48 8b 94 24 78 0b 00    mov    rdx,QWORD PTR [rsp+0xb78]
      62:       00 
      63:       48 8d 84 24 88 0f 00    lea    rax,[rsp+0xf88]
      6a:       00 
      6b:       48 89 d6                mov    rsi,rdx
      6e:       ba 80 00 00 00          mov    edx,0x80
      73:       48 89 c7                mov    rdi,rax
      76:       48 89 d1                mov    rcx,rdx
      79:       f3 48 a5                rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
</pre>

<pre>
      7c:       d9 84 24 88 0b 00 00    fld    DWORD PTR [rsp+0xb88]
      83:       d9 84 24 88 0f 00 00    fld    DWORD PTR [rsp+0xf88]
      8a:       de c1                   faddp  st(1),st
      8c:       d9 9c 24 64 07 00 00    fstp   DWORD PTR [rsp+0x764]
      93:       d9 84 24 8c 0b 00 00    fld    DWORD PTR [rsp+0xb8c]
      9a:       d9 84 24 8c 0f 00 00    fld    DWORD PTR [rsp+0xf8c]
      a1:       de c1                   faddp  st(1),st
      a3:       d9 9c 24 60 07 00 00    fstp   DWORD PTR [rsp+0x760]
      aa:       d9 84 24 90 0b 00 00    fld    DWORD PTR [rsp+0xb90]
      b1:       d9 84 24 90 0f 00 00    fld    DWORD PTR [rsp+0xf90]
      b8:       de c1                   faddp  st(1),st
      ba:       d9 9c 24 5c 07 00 00    fstp   DWORD PTR [rsp+0x75c]
</pre>

<pre>
    171b:       d9 84 24 7c 0f 00 00    fld    DWORD PTR [rsp+0xf7c]
    1722:       d9 84 24 7c 13 00 00    fld    DWORD PTR [rsp+0x137c]
    1729:       de c1                   faddp  st(1),st
    172b:       d9 84 24 80 0f 00 00    fld    DWORD PTR [rsp+0xf80]
    1732:       d9 84 24 80 13 00 00    fld    DWORD PTR [rsp+0x1380]
    1739:       de c1                   faddp  st(1),st
    173b:       d9 84 24 84 0f 00 00    fld    DWORD PTR [rsp+0xf84]
    1742:       d9 84 24 84 13 00 00    fld    DWORD PTR [rsp+0x1384]
    1749:       de c1                   faddp  st(1),st
    174b:       d9 84 24 64 07 00 00    fld    DWORD PTR [rsp+0x764]
    1752:       d9 9c 24 68 07 00 00    fstp   DWORD PTR [rsp+0x768]
</pre>

<pre>
  3a:   48 8b 94 24 80 07 00    mov    rdx,QWORD PTR [rsp+0x780]
  41:   00 
  42:   48 8d 84 24 88 07 00    lea    rax,[rsp+0x788]
  49:   00 
  4a:   48 89 d6                mov    rsi,rdx
  4d:   ba 80 00 00 00          mov    edx,0x80
  52:   48 89 c7                mov    rdi,rax
  55:   48 89 d1                mov    rcx,rdx
  58:   f3 48 a5                rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
  5b:   48 8b 94 24 78 07 00    mov    rdx,QWORD PTR [rsp+0x778]
  62:   00 
  63:   48 8d 84 24 88 0b 00    lea    rax,[rsp+0xb88]
  6a:   00 
  6b:   48 89 d6                mov    rsi,rdx
  6e:   ba 80 00 00 00          mov    edx,0x80
  73:   48 89 c7                mov    rdi,rax
  76:   48 89 d1                mov    rcx,rdx
  79:   f3 48 a5                rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
</pre>

<pre>
  7c:   0f 28 8c 24 88 07 00    movaps xmm1,XMMWORD PTR [rsp+0x788]
  83:   00 
  84:   0f 28 84 24 88 0b 00    movaps xmm0,XMMWORD PTR [rsp+0xb88]
  8b:   00 
  8c:   0f 58 c8                addps  xmm1,xmm0
  8f:   0f 29 8c 24 58 03 00    movaps XMMWORD PTR [rsp+0x358],xmm1
</pre>

<pre>
 78e:   0f 28 8c 24 58 0b 00    movaps xmm1,XMMWORD PTR [rsp+0xb58]
 795:   00 
 796:   0f 28 84 24 58 0f 00    movaps xmm0,XMMWORD PTR [rsp+0xf58]
 79d:   00 
 79e:   0f 28 d9                movaps xmm3,xmm1
 7a1:   0f 58 d8                addps  xmm3,xmm0
 7a4:   0f 28 8c 24 68 0b 00    movaps xmm1,XMMWORD PTR [rsp+0xb68]
 7ab:   00 
 7ac:   0f 28 84 24 68 0f 00    movaps xmm0,XMMWORD PTR [rsp+0xf68]
</pre>

<p>Po optimalizaci:</p>

<pre>
  4f:   0f 28 84 24 88 03 00    movaps xmm0,XMMWORD PTR [rsp+0x388]
  56:   00 
  57:   0f 58 84 24 88 07 00    addps  xmm0,XMMWORD PTR [rsp+0x788]
  5e:   00 
  5f:   0f 29 44 24 88          movaps XMMWORD PTR [rsp-0x78],xmm0
</pre>

<pre>
  64:   0f 28 84 24 98 03 00    movaps xmm0,XMMWORD PTR [rsp+0x398]
  6b:   00 
  6c:   0f 58 84 24 98 07 00    addps  xmm0,XMMWORD PTR [rsp+0x798]
  73:   00 
  74:   0f 29 44 24 98          movaps XMMWORD PTR [rsp-0x68],xmm0
</pre>

...

<pre>
 607:   0f 28 84 24 78 07 00    movaps xmm0,XMMWORD PTR [rsp+0x778]
 60e:   00 
 60f:   0f 58 84 24 78 0b 00    addps  xmm0,XMMWORD PTR [rsp+0xb78]
 616:   00 
 617:   0f 29 84 24 78 03 00    movaps XMMWORD PTR [rsp+0x378],xmm0
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Ne všechny operace mohou být v&nbsp;SIMD podporovány</h2>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
typedef signed char v16ib __attribute__((vector_size(16)));
&nbsp;
void add16ib(v16ib x, v16ib y, v16ib * z)
{
    *z = x + y;
}
&nbsp;
void sub16ib(v16ib x, v16ib y, v16ib * z)
{
    *z = x - y;
}
&nbsp;
void mul16ib(v16ib x, v16ib y, v16ib * z)
{
    *z = x * y;
}
&nbsp;
void div16ib(v16ib x, v16ib y, v16ib * z)
{
    *z = x / y;
}
&nbsp;
void mod16ib(v16ib x, v16ib y, v16ib * z)
{
    *z = x % y;
}
&nbsp;
void and16ib(v16ib x, v16ib y, v16ib * z)
{
    *z = x &amp; y;
}
&nbsp;
void or16ib(v16ib x, v16ib y, v16ib * z)
{
    *z = x | y;
}
&nbsp;
void xor16ib(v16ib x, v16ib y, v16ib * z)
{
    *z = x ^ y;
}
&nbsp;
void rshift16ib(v16ib x, v16ib y, v16ib * z)
{
    *z = x &gt;&gt; y;
}
&nbsp;
void lshift16ib(v16ib x, v16ib y, v16ib * z)
{
    *z = x &lt;&lt; y;
}
&nbsp;
void print_vectors(const char *message, const char *op, v16ib *x,v16ib  *y,v16ib  *z)
{
    int i;
&nbsp;
    puts(message);
    for (i = 0; i &lt; sizeof(v16ib) / sizeof(signed char); i++) {
        printf("%2d    %d %s %d = %d\n", i, (*x)[i], op, (*y)[i], (*z)[i]);
    }
&nbsp;
    putchar('\n');
}
&nbsp;
int main(void)
{
    v16ib x;
    v16ib y;
    v16ib z;
    int i;
&nbsp;
    for (i = 0; i &lt; sizeof(v16ib) / sizeof(signed char); i++) {
        x[i] = i*2;
        y[i] = 16-i;
    }
&nbsp;
    add16ib(x, y, &amp;z);
    print_vectors("vector addition", "+", &amp;x, &amp;y, &amp;z);
&nbsp;
    sub16ib(x, y, &amp;z);
    print_vectors("vector subtraction", "-", &amp;x, &amp;y, &amp;z);
&nbsp;
    mul16ib(x, y, &amp;z);
    print_vectors("vector multiply", "*", &amp;x, &amp;y, &amp;z);
&nbsp;
    div16ib(x, y, &amp;z);
    print_vectors("vector divide", "/", &amp;x, &amp;y, &amp;z);
&nbsp;
    mod16ib(x, y, &amp;z);
    print_vectors("vector modulo", "%", &amp;x, &amp;y, &amp;z);
&nbsp;
    and16ib(x, y, &amp;z);
    print_vectors("vector bitwise and", "&amp;", &amp;x, &amp;y, &amp;z);
&nbsp;
    or16ib(x, y, &amp;z);
    print_vectors("vector bitwise or", "|", &amp;x, &amp;y, &amp;z);
&nbsp;
    xor16ib(x, y, &amp;z);
    print_vectors("vector bitwise xor", "^", &amp;x, &amp;y, &amp;z);
&nbsp;
    rshift16ib(x, y, &amp;z);
    print_vectors("vector right shift", "&gt;&gt;", &amp;x, &amp;y, &amp;z);
&nbsp;
    lshift16ib(x, y, &amp;z);
    print_vectors("vector left shift", "&lt;&lt;", &amp;x, &amp;y, &amp;z);
&nbsp;
    return 0;
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
  14:   66 0f 6f 45 f0          movdqa xmm0,XMMWORD PTR [rbp-0x10]
  19:   66 0f fc 45 e0          paddb  xmm0,XMMWORD PTR [rbp-0x20]
  1e:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  22:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>

<pre>
  3c:   66 0f 6f 45 f0          movdqa xmm0,XMMWORD PTR [rbp-0x10]
  41:   66 0f f8 45 e0          psubb  xmm0,XMMWORD PTR [rbp-0x20]
  46:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  4a:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>

<pre>
  64:   66 0f 6f 45 f0          movdqa xmm0,XMMWORD PTR [rbp-0x10]
  69:   66 0f 6f 4d e0          movdqa xmm1,XMMWORD PTR [rbp-0x20]
  6e:   66 0f 6f d9             movdqa xmm3,xmm1
  72:   66 0f 60 d9             punpcklbw xmm3,xmm1
  76:   66 0f 6f d1             movdqa xmm2,xmm1
  7a:   66 0f 68 d1             punpckhbw xmm2,xmm1
  7e:   66 0f 6f c8             movdqa xmm1,xmm0
  82:   66 0f 60 c8             punpcklbw xmm1,xmm0
  86:   66 0f 68 c0             punpckhbw xmm0,xmm0
  8a:   66 0f 6f e1             movdqa xmm4,xmm1
  8e:   66 0f 6f cb             movdqa xmm1,xmm3
  92:   66 0f d5 cc             pmullw xmm1,xmm4
  96:   66 0f 6f d8             movdqa xmm3,xmm0
  9a:   66 0f 6f c2             movdqa xmm0,xmm2
  9e:   66 0f 6f d3             movdqa xmm2,xmm3
  a2:   66 0f d5 d0             pmullw xmm2,xmm0
  a6:   66 0f 6f 05 00 00 00    movdqa xmm0,XMMWORD PTR [rip+0x0]        # ae <mul16ib+0x5e>
  ad:   00 
  ae:   66 0f db c8             pand   xmm1,xmm0
  b2:   66 0f db c2             pand   xmm0,xmm2
  b6:   66 0f 6f e9             movdqa xmm5,xmm1
  ba:   66 0f 67 e8             packuswb xmm5,xmm0
  be:   66 0f 6f c5             movdqa xmm0,xmm5
  c2:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  c6:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>

<pre>
</pre>

<pre>
</pre>

<pre>
</pre>

<pre>
</pre>

<pre>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Základní aritmetické operace s&nbsp;prvky vektorů typu <strong>float</strong></h2>

<pre>
#include <stdio.h>

typedef float v16float __attribute__((vector_size(16)));

void add16float(v16float x, v16float y, v16float * z)
{
    *z = x + y;
}

void sub16float(v16float x, v16float y, v16float * z)
{
    *z = x - y;
}

void mul16float(v16float x, v16float y, v16float * z)
{
    *z = x * y;
}

void div16float(v16float x, v16float y, v16float * z)
{
    *z = x / y;
}

void print_vectors(const char *message, const char op, v16float * x,
                   v16float * y, v16float * z)
{
    int i;

    puts(message);
    for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
        printf("%2d    %5.3f %c %5.3f = %5.3f\n", i, (*x)[i], op, (*y)[i], (*z)[i]);
    }

    putchar('\n');
}

int main(void)
{
    v16float x;
    v16float y;
    v16float z;
    int i;

    for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
        x[i] = i;
        y[i] = i + 0.1;
    }

    add16float(x, y, &z);
    print_vectors("vector addition", '+', &x, &y, &z);

    sub16float(x, y, &z);
    print_vectors("vector subtraction", '-', &x, &y, &z);

    mul16float(x, y, &z);
    print_vectors("vector multiply", '*', &x, &y, &z);

    div16float(x, y, &z);
    print_vectors("vector divide", '/', &x, &y, &z);

    return 0;
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Překlad bez použití instrukcí SIMD</h2>

<pre>
   c:   d9 45 10                fld    DWORD PTR [rbp+0x10]
   f:   d9 45 20                fld    DWORD PTR [rbp+0x20]
  12:   de c1                   faddp  st(1),st
  14:   d9 45 14                fld    DWORD PTR [rbp+0x14]
  17:   d9 45 24                fld    DWORD PTR [rbp+0x24]
  1a:   de c1                   faddp  st(1),st
  1c:   d9 45 18                fld    DWORD PTR [rbp+0x18]
  1f:   d9 45 28                fld    DWORD PTR [rbp+0x28]
  22:   de c1                   faddp  st(1),st
  24:   d9 45 1c                fld    DWORD PTR [rbp+0x1c]
  27:   d9 45 2c                fld    DWORD PTR [rbp+0x2c]
  2a:   de c1                   faddp  st(1),st
  2c:   d9 cb                   fxch   st(3)
  2e:   d9 5d d0                fstp   DWORD PTR [rbp-0x30]
  31:   d9 c9                   fxch   st(1)
  33:   d9 5d d4                fstp   DWORD PTR [rbp-0x2c]
  36:   d9 5d d8                fstp   DWORD PTR [rbp-0x28]
  39:   d9 5d dc                fstp   DWORD PTR [rbp-0x24]
  3c:   48 8b 45 d0             mov    rax,QWORD PTR [rbp-0x30]
  40:   48 89 45 f0             mov    QWORD PTR [rbp-0x10],rax
  44:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  48:   48 89 45 f8             mov    QWORD PTR [rbp-0x8],rax
  4c:   48 8b 45 e8             mov    rax,QWORD PTR [rbp-0x18]
  50:   48 8b 55 f0             mov    rdx,QWORD PTR [rbp-0x10]
  54:   48 89 10                mov    QWORD PTR [rax],rdx
  57:   48 8b 55 f8             mov    rdx,QWORD PTR [rbp-0x8]
  5b:   48 89 50 08             mov    QWORD PTR [rax+0x8],rdx
</pre>

po optimalizaci

<pre>
   4:   d9 44 24 08             fld    DWORD PTR [rsp+0x8]
   8:   d8 44 24 18             fadd   DWORD PTR [rsp+0x18]
   c:   d9 5c 24 d8             fstp   DWORD PTR [rsp-0x28]
  10:   d9 44 24 0c             fld    DWORD PTR [rsp+0xc]
  14:   d8 44 24 1c             fadd   DWORD PTR [rsp+0x1c]
  18:   d9 5c 24 dc             fstp   DWORD PTR [rsp-0x24]
  1c:   d9 44 24 10             fld    DWORD PTR [rsp+0x10]
  20:   d8 44 24 20             fadd   DWORD PTR [rsp+0x20]
  24:   48 8b 44 24 d8          mov    rax,QWORD PTR [rsp-0x28]
  29:   48 89 07                mov    QWORD PTR [rdi],rax
  2c:   d9 5c 24 e0             fstp   DWORD PTR [rsp-0x20]
  30:   d9 44 24 14             fld    DWORD PTR [rsp+0x14]
  34:   d8 44 24 24             fadd   DWORD PTR [rsp+0x24]
  38:   d9 5c 24 e4             fstp   DWORD PTR [rsp-0x1c]
  3c:   48 8b 44 24 e0          mov    rax,QWORD PTR [rsp-0x20]
  41:   48 89 47 08             mov    QWORD PTR [rdi+0x8],rax
</pre>

<p>dělení</p>

<pre>
  f8:   d8 74 24 18             fdiv   DWORD PTR [rsp+0x18]
  fc:   d9 5c 24 d8             fstp   DWORD PTR [rsp-0x28]
 100:   d9 44 24 0c             fld    DWORD PTR [rsp+0xc]
 104:   d8 74 24 1c             fdiv   DWORD PTR [rsp+0x1c]
 108:   d9 5c 24 dc             fstp   DWORD PTR [rsp-0x24]
 10c:   d9 44 24 10             fld    DWORD PTR [rsp+0x10]
 110:   d8 74 24 20             fdiv   DWORD PTR [rsp+0x20]
 114:   48 8b 44 24 d8          mov    rax,QWORD PTR [rsp-0x28]
 119:   48 89 07                mov    QWORD PTR [rdi],rax
 11c:   d9 5c 24 e0             fstp   DWORD PTR [rsp-0x20]
 120:   d9 44 24 14             fld    DWORD PTR [rsp+0x14]
 124:   d8 74 24 24             fdiv   DWORD PTR [rsp+0x24]
 128:   d9 5c 24 e4             fstp   DWORD PTR [rsp-0x1c]
 12c:   48 8b 44 24 e0          mov    rax,QWORD PTR [rsp-0x20]
 131:   48 89 47 08             mov    QWORD PTR [rdi+0x8],rax
</pre>


<p><a name="k15"></a></p>
<h2 id="k15">15. Překlad do strojového kódu s&nbsp;použitím instrukcí SIMD</h2>

<pre>
  14:   0f 28 45 f0             movaps xmm0,XMMWORD PTR [rbp-0x10]
  18:   0f 58 45 e0             addps  xmm0,XMMWORD PTR [rbp-0x20]
  1c:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  20:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>

<pre>
  3a:   0f 28 45 f0             movaps xmm0,XMMWORD PTR [rbp-0x10]
  3e:   0f 5c 45 e0             subps  xmm0,XMMWORD PTR [rbp-0x20]
  42:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  46:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>

<pre>
  60:   0f 28 45 f0             movaps xmm0,XMMWORD PTR [rbp-0x10]
  64:   0f 59 45 e0             mulps  xmm0,XMMWORD PTR [rbp-0x20]
  68:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  6c:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>

<pre>
  86:   0f 28 45 f0             movaps xmm0,XMMWORD PTR [rbp-0x10]
  8a:   0f 5e 45 e0             divps  xmm0,XMMWORD PTR [rbp-0x20]
  8e:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]
  92:   0f 29 00                movaps XMMWORD PTR [rax],xmm0
</pre>

po optimalizaci



<p><a name="k16"></a></p>
<h2 id="k16">16. Zásadní omezení rozšíření GCC</h2>

<p></p>

<pre>
   4:   0f 58 c1                <strong>addps  xmm0,xmm1</strong>
   7:   0f 29 07                movaps XMMWORD PTR [rdi],xmm0
</pre>

<pre>
  14:   0f 5c c1                <strong>subps  xmm0,xmm1</strong>
  17:   0f 29 07                movaps XMMWORD PTR [rdi],xmm0
</pre>

<pre>
  24:   0f 59 c1                <strong>mulps  xmm0,xmm1</strong>
  27:   0f 29 07                movaps XMMWORD PTR [rdi],xmm0
</pre>

<pre>
  34:   0f 5e c1                <strong>divps  xmm0,xmm1</strong>
  37:   0f 29 07                movaps XMMWORD PTR [rdi],xmm0
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. SIMD a vektorové operace na architekturách AArch64 a RISC-V</h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha &ndash; soubor Makefile použitý v&nbsp;dnešním článku</h2>

<pre>
CC=gcc
OBJDUMP=objdump
&nbsp;
all:    simd04_1.lst simd04_2.lst \
        simd04B_1.lst simd04B_2.lst \
        simd07_1.lst simd07_2.lst \
        simd08_1.lst simd08_2.lst \
        simd12_1.lst simd12_2.lst \
        simd13_1.lst simd13_2.lst simd13_3.lst simd13_4.lst \
        simd14_1.lst simd14_2.lst simd14_3.lst simd14_4.lst \
        simd15_1.lst simd15_2.lst simd15_3.lst simd15_4.lst \
        simd16_1.lst simd16_2.lst simd16_3.lst simd16_4.lst \
        simd17_1.lst simd17_2.lst simd17_3.lst simd17_4.lst \
        simd18_1.lst simd18_2.lst simd18_3.lst simd18_4.lst
&nbsp;
clean:
        rm *.lst
        rm *.o

%.lst:  %.o
        objdump -d -M intel -S $< > $@ 

simd04_1.o:     simd04.c
        gcc -c -O0 -mno-sse -g -o $@ $<

simd04_2.o:     simd04.c
        gcc -c -O0 -g -o $@ $<

simd04B_1.o:    simd04B.c
        gcc -c -O0 -mno-sse -g -o $@ $<

simd04B_2.o:    simd04B.c
        gcc -c -O0 -g -o $@ $<

simd07_1.o:     simd07.c
        gcc -c -mno-sse -g -o $@ $<

simd07_2.o:     simd07.c
        gcc -c -g -o $@ $<

simd08_1.o:     simd08.c
        gcc -c -mno-sse -g -o $@ $<

simd08_2.o:     simd08.c
        gcc -c -g -o $@ $<

simd12_1.o:     simd12.c
        gcc -c -O0 -mno-sse -g -o $@ $<

simd12_2.o:     simd12.c
        gcc -c -O0 -g -o $@ $<

simd13_1.o:     simd13.c
        gcc -c -O0 -mno-sse -g -o $@ $<

simd13_2.o:     simd13.c
        gcc -c -O0 -g -o $@ $<

simd13_3.o:     simd13.c
        gcc -c -O3 -mno-sse -g -o $@ $<

simd13_4.o:     simd13.c
        gcc -c -O3 -g -o $@ $<

simd14_1.o:     simd14.c
        gcc -c -O0 -mno-sse -g -o $@ $<

simd14_2.o:     simd14.c
        gcc -c -O0 -g -o $@ $<

simd14_3.o:     simd14.c
        gcc -c -O3 -mno-sse -g -o $@ $<

simd14_4.o:     simd14.c
        gcc -c -O3 -g -o $@ $<

simd15_1.o:     simd15.c
        gcc -c -O0 -mno-sse -g -o $@ $<

simd15_2.o:     simd15.c
        gcc -c -O0 -g -o $@ $<

simd15_3.o:     simd15.c
        gcc -c -O3 -mno-sse -g -o $@ $<

simd15_4.o:     simd15.c
        gcc -c -O3 -g -o $@ $<

simd16_1.o:     simd16.c
        gcc -c -O0 -mno-sse -g -o $@ $<

simd16_2.o:     simd16.c
        gcc -c -O0 -g -o $@ $<

simd16_3.o:     simd16.c
        gcc -c -O3 -mno-sse -g -o $@ $<

simd16_4.o:     simd16.c
        gcc -c -O3 -g -o $@ $<

simd17_1.o:     simd17.c
        gcc -c -O0 -mno-sse -g -o $@ $<

simd17_2.o:     simd17.c
        gcc -c -O0 -g -o $@ $<

simd17_3.o:     simd17.c
        gcc -c -O3 -mno-sse -g -o $@ $<

simd17_4.o:     simd17.c
        gcc -c -O3 -g -o $@ $<

simd18_1.o:     simd18.c
        gcc -c -O0 -mno-sse -g -o $@ $<

simd18_2.o:     simd18.c
        gcc -c -O0 -g -o $@ $<

simd18_3.o:     simd18.c
        gcc -c -O3 -mno-sse -g -o $@ $<

simd18_4.o:     simd18.c
        gcc -c -O3 -g -o $@ $<
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;jazyku C, které jsou určené pro překlad
pomocí překladače <strong>GCC C</strong>, byly uložen do Git repositáře, který
je dostupný na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již velmi rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>simd01.c</td><td>vektor celých čísel typu <strong>short int</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd01.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd01.c</a></td></tr>
<tr><td> 2</td><td>simd02.c</td><td>ukázka použití vektorů s&nbsp;celočíselnými typy bez znaménka</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd02.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd02.c</a></td></tr>
<tr><td> 3</td><td>simd03.c</td><td>ukázka použití vektorů s&nbsp;celočíselnými typy se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd03.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd03.c</a></td></tr>
<tr><td> 4</td><td>simd04.c</td><td>paralelní součet celočíselných prvků vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd04.c</a></td></tr>
<tr><td> 5</td><td>simd04B.c</td><td>úprava pro další datové typy</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B.c</a></td></tr>
<tr><td> 6</td><td>simd05.c</td><td>přístup k&nbsp;jednotlivým prvkům vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05.c</a></td></tr>
<tr><td> 7</td><td>simd05B.c</td><td>korektnější výpočet počtu prvků vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05B.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05B.c</a></td></tr>
<tr><td> 8</td><td>simd05C.c</td><td>definice typu vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05C.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05C.c</a></td></tr>
<tr><td> 9</td><td>simd06.c</td><td>vektor čísel s&nbsp;plovoucí řádovou čárkou</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd06.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd06.c</a></td></tr>
<tr><td>10</td><td>simd07.c</td><td>paralelní součet prvků vektorů (typ <strong>float</strong>)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd07.c</a></td></tr>
<tr><td>11</td><td>simd08.c</td><td>paralelní součet prvků vektorů (typ <strong>double</strong>)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd08.c</a></td></tr>
<tr><td>12</td><td>simd09.c</td><td>překročení délky vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd09.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd09.c</a></td></tr>
<tr><td>13</td><td>simd10.c</td><td>přístup k&nbsp;jednotlivým prvkům vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd10.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd10.c</a></td></tr>
<tr><td>14</td><td>simd11.c</td><td>překročení délky vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd11.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd11.c</a></td></tr>
<tr><td>15</td><td>simd12.c</td><td>dlouhý vektor s&nbsp;256 bajty</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd12.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>simd13.c</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd13.c</a></td></tr>
<tr><td>17</td><td>simd14.c</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd14.c</a></td></tr>
<tr><td>18</td><td>simd15.c</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd15.c</a></td></tr>
<tr><td>19</td><td>simd16.c</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd16.c</a></td></tr>
<tr><td>20</td><td>simd17.c</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd17.c</a></td></tr>
<tr><td>21</td><td>simd18.c</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd18.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>22</td><td>Makefile</td><td>Makefile pro překlad demonstračních příkladů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/Makefile">https://github.com/tisnik/presentations/blob/master/SIMD/Makefile</a></td></tr>
</table>

<p>Soubory vzniklé překladem z&nbsp;jazyka C do assembleru:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/">https://github.com/tisnik/presentations/blob/master/SIMD/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/">https://github.com/tisnik/presentations/blob/master/SIMD/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/">https://github.com/tisnik/presentations/blob/master/SIMD/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/">https://github.com/tisnik/presentations/blob/master/SIMD/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/">https://github.com/tisnik/presentations/blob/master/SIMD/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>GCC documentation: Extensions to the C Language Family<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html#C-Extensions">https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html#C-Extensions</a>
</li>

<li>GCC documentation: Using Vector Instructions through Built-in Functions<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html">https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html</a>
</li>

<li>SSE (Streaming SIMD Extentions)<br />
<a href="http://www.songho.ca/misc/sse/sse.html">http://www.songho.ca/misc/sse/sse.html</a>
</li>

<li>Timothy A. Chagnon: SSE and SSE2<br />
<a href="http://www.cs.drexel.edu/~tc365/mpi-wht/sse.pdf">http://www.cs.drexel.edu/~tc365/mpi-wht/sse.pdf</a>
</li>

<li>Intel corporation: Extending the Worldr's Most Popular Processor Architecture<br />
<a href="http://download.intel.com/technology/architecture/new-instructions-paper.pdf">http://download.intel.com/technology/architecture/new-instructions-paper.pdf</a>
</li>

<li>SIMD architectures:<br />
<a href="http://arstechnica.com/old/content/2000/03/simd.ars/">http://arstechnica.com/old/content/2000/03/simd.ars/</a>
</li>

<li>Tour of the Black Holes of Computing!: Floating Point<br />
<a href="http://www.cs.hmc.edu/~geoff/classes/hmc.cs105.../slides/class02_floats.ppt">http://www.cs.hmc.edu/~geoff/classes/hmc.cs105.../slides/class02_floats.ppt</a>
</li>

<li>3Dnow! Technology Manual<br />
AMD Inc., 2000</li>

<li>Intel MMX<sup>TM</sup> Technology Overview<br />
Intel corporation, 1996</li>

<li>MultiMedia eXtensions<br />
<a href="http://softpixel.com/~cwright/programming/simd/mmx.php">http://softpixel.com/~cwright/programming/simd/mmx.php</a>i
</li>

<li>AMD K5 ("K5" / "5k86")<br />
<a href="http://www.pcguide.com/ref/cpu/fam/g5K5-c.html">http://www.pcguide.com/ref/cpu/fam/g5K5-c.html</a>
</li>

<li>Sixth Generation Processors<br />
<a href="http://www.pcguide.com/ref/cpu/fam/g6.htm">http://www.pcguide.com/ref/cpu/fam/g6.htm</a>
</li>

<li>Great Microprocessors of the Past and Present<br />
<a href="http://www.cpushack.com/CPU/cpu1.html">http://www.cpushack.com/CPU/cpu1.html</a>
</li>

<li>Very long instruction word (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Very_long_instruction_word">http://en.wikipedia.org/wiki/Very_long_instruction_word</a>
</li>

<li>CPU design (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/CPU_design">http://en.wikipedia.org/wiki/CPU_design</a>
</li>

<li>Bulldozer (microarchitecture)<br />
<a href="https://en.wikipedia.org/wiki/Bulldozer_(microarchitecture)">https://en.wikipedia.org/wiki/Bulldozer_(microarchitecture)</a>
</li>

<li>SIMD Instructions Considered Harmful<br />
<a href="https://www.sigarch.org/simd-instructions-considered-harmful/">https://www.sigarch.org/simd-instructions-considered-harmful/</a>
</li>

<li>GCC Compiler Intrinsics<br />
<a href="https://iq.opengenus.org/gcc-compiler-intrinsics/">https://iq.opengenus.org/gcc-compiler-intrinsics/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

