<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programování GPU na Raspberry Pi: použití Quad Processor Unit(s)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programování GPU  na  Raspberry  Pi:  použití  Quad  Processor  Unit(s)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Mikropočítače Raspberry Pi se používají v mnoha oblastech, ovšem u některých aplikací je limitujícím faktorem jejich relativně pomalý mikroprocesor, což platí zejména pro Raspberry Pi 1. Ve skutečnosti čipy BCM2835(6,7) nabízí vysoký výpočetní výkon teoreticky dosahující až 28.8 GFLOPS, ovšem s "malým" dodatkem: výpočet je nutné přenést z CPU (ARM) na tzv. QPU.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programování GPU na Raspberry Pi: použití Quad Processor Unit(s)</a></p>
<p><a href="#k02">2. VideoCore na čipech společnosti Broadcom</a></p>
<p><a href="#k03">3. Generace jader VideoCore</a></p>
<p><a href="#k04">4. Využití GPU na Raspberry Pi pro provádění výpočtů</a></p>
<p><a href="#k05">5. Základní architektura GPU</a></p>
<p><a href="#k06">6. Skupiny QPU (slices)</a></p>
<p><a href="#k07">7. Instrukční cache sdílená každou skupinou QPU</a></p>
<p><a href="#k08">8. SFU (Special Functions Unit) sdílená každou skupinou QPU</a></p>
<p><a href="#k09">9. Interní struktura každého QPU</a></p>
<p><a href="#k10">10. Pipeline a její &bdquo;viditelnost&ldquo; při provádění operací</a></p>
<p><a href="#k11">11. Aritmeticko-logické jednotky v&nbsp;QPU</a></p>
<p><a href="#k12">12. Sada pracovních registrů a akumulátorů</a></p>
<p><a href="#k13">13. Formát zpracovávaných hodnot (prvků vektorů)</a></p>
<p><a href="#k14">14. Formát instrukcí posílaných do QPU</a></p>
<p><a href="#k15">15. Celkový teoretický výpočetní výkon grafického čipu na Raspberry Pi</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programování GPU na Raspberry Pi: použití Quad Processor Unit(s)</h2>

<p>V&nbsp;současnosti existuje nepřeberné množství projektů, v&nbsp;nichž se
používají populární jednodeskové mikropočítače Raspberry Pi. Jedná se například
o ovládání různých zařízení (robotika), sledování nějakých veličin se
zpracováním a odesíláním výsledků, výpočetní &bdquo;clustery&ldquo; (k&nbsp;nim
se zakrátko dostaneme), multimediální centra atd. Ve skutečnosti však Raspberry
Pi, především pak výkonnější varianty RPi 2 a RPi 3, mohou zastat roli
jednoduchého desktopu. Při pohledu na specifikaci RPi by se mohlo zdát, že
mikroprocesor tvořící část čipu BCM nabízí poměrně malý výpočetní výkon.
Konkrétně se jedná o ARMovská jádra s&nbsp;mikroarchitekturou ARM11 a základní
hodinovou frekvencí pouhých 700 MHz (RPi 1), dále pak o čtveřici jader
Cortex-A7 s&nbsp;frekvencí 900 MHz (RPi 2) a konečně o čtveřici jader ARM
Cortex-A53 s&nbsp;frekvencí 1,2 GHz. Ve skutečnosti jsou však čipy BCM, zejména
pak BCM2835 použitý v&nbsp;RPi 1, navrženy pro použití v&nbsp;multimediálních
aplikacích, kde ARMovské jádro slouží &bdquo;pouze&ldquo; pro základní ovládání
a veškeré složitější výpočty, například kodeky, jsou prováděny v&nbsp;GPU,
které je pro tyto účely mnohem výkonnější, než ARMovské CPU.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. VideoCore na čipech společnosti Broadcom</h2>

<p>Všechny tři typy čipů BCM použitých ve všech modelech Raspberry Pi,
tj.&nbsp;BCM2835, BCM2836 i BCM2837, jsou postaveny na bázi multimediálních
procesorů pojmenovaných <i>VideoCore</i>. Tato architektura byla vyvinuta
firmou <i>Alphamosaic</i> a současně je vlastněna společností <i>Broadcom</i>,
což je ostatně jeden z&nbsp;důvodů, proč tuto architekturu nenalezneme u
dalších výrobců čipů s&nbsp;jádrem ARM (ovšem v&nbsp;této oblasti existuje
velká konkurence, takže se setkáme i s&nbsp;dalšími podobnými GPU, například od
firem TI, NVidia či Freescale). Architektura <i>VideoCore</i> je plně
programovatelná, což je poměrně důležité, protože je pro ni možné vytvářet nové
kodeky, používat kodeky, které nemusí být licencovány, využít <i>VideoCore</i>
i v&nbsp;těch aplikacích, které nepotřebují vysoký multimediální výkon, ale
například provádí mnoho operací s&nbsp;maticemi, výpočty FFT, implementují
neuronové sítě atd. Právě poslední možnost, tj.&nbsp;použití <i>VideoCore</i>
pro urychlení &bdquo;běžných&ldquo; aplikací, otevírá nové možnosti i pro
mikropočítače typu <i>Raspberry Pi</i>, zejména tehdy, pokud má hlavní CPU
nedostatečný výkon.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Generace jader VideoCore</h2>

<p>V&nbsp;současnosti existují minimálně čtyři generace grafických procesorů
založených na <i>VideoCore</i>. Tyto procesory jsou většinou umístěny na jednom
čipu s&nbsp;hlavním procesorem a řadičem periferních zařízení, takže vzniká SoC
(System on a Chip), což je ostatně i případ mikropočítače <i>Raspberry Pi</i>.
Podívejme se na některé čipy obsahující <i>VideoCore</i> a popř.&nbsp;i hlavní
procesor a další pomocné obvody:</p>

<table>
<tr><th> #</th><th>Čip</th><th>GPU</th><th>CPU</th></tr>
<tr><td> 1</td><td>VC01</td><td>VideoCore 1</td><td>&times;</td></tr>
<tr><td> 2</td><td>BCM2702 (VC02)</td><td>VideoCore 2</td><td>&times;</td></tr>
<tr><td> 3</td><td>BCM2705 (VC05)</td><td>VideoCore 2</td><td>&times;</td></tr>
<tr><td> 4</td><td>BCM2091</td><td>VideoCore 4</td><td>?</td></tr>
<tr><td> 5</td><td>BCM2722</td><td>VideoCore 2</td><td>&times;</td></tr>
<tr><td> 6</td><td>BCM2724</td><td>VideoCore 2</td><td>&times;</td></tr>
<tr><td> 7</td><td>BCM2727</td><td>VideoCore 3</td><td>&times;</td></tr>
<tr><td> 8</td><td>BCM11181</td><td>VideoCore 3</td><td>&times;</td></tr>
<tr><td> 9</td><td>BCM2763</td><td>VideoCore 4</td><td>&times;</td></tr>
<tr><td>10</td><td>BCM2820</td><td>VideoCore 4</td><td>ARM1176</td></tr>
<tr><td>11</td><td><strong>BCM2835</strong></td><td>VideoCore 4</td><td>ARM1176 (standardně 700 MHz)</td></tr>
<tr><td>12</td><td><strong>BCM2836</strong></td><td>VideoCore 4</td><td>Quad-core Cortex-A7 (standardně 900 MHz)</td></tr>
<tr><td>13</td><td><strong>BCM2837</strong></td><td>VideoCore 4</td><td>Quad-core Cortex-A53 (standardně 1200 MHz)</td></tr>
<tr><td>14</td><td>BCM11182</td><td>VideoCore 4</td><td>&times;</td></tr>
<tr><td>15</td><td>BCM11311</td><td>VideoCore 4</td><td>Dual-core Cortex-A9</td></tr>
<tr><td>16</td><td>BCM21654</td><td>VideoCore 4</td><td>Cortex-A9 + Cortex-R4</td></tr>
<tr><td>17</td><td>BCM21654G</td><td>VideoCore 4</td><td>Cortex-A9 (až do 1 GHz)</td></tr>
<tr><td>18</td><td>BCM21663</td><td>VideoCore 4</td><td>Cortex-A9 (až do 1.2 GHz)</td></tr>
<tr><td>19</td><td>BCM21664</td><td>VideoCore 4</td><td>Cortex-A9 (až do 1 GHz)</td></tr>
<tr><td>20</td><td>BCM21664T</td><td>VideoCore 4</td><td>Cortex-A9 (až do 1.2 GHz)</td></tr>
<tr><td>21</td><td>BCM28150</td><td>VideoCore 4</td><td>Dual-core Cortex-A9</td></tr>
<tr><td>22</td><td>BCM21553</td><td>VideoCore 4</td><td>ARM11</td></tr>
<tr><td>23</td><td>BCM28145/28155</td><td>VideoCore 4</td><td>Dual-core Cortex-A9 (až do 1.2 GHz)</td></tr>
<tr><td>24</td><td>BCM23550</td><td>VideoCore 4</td><td>Quad-core Cortex-A7 (až do 1.2 GHz)</td></tr>
</table>



<p><a name="k04"></a></p>
<h2 id="k04">4. Využití GPU na Raspberry Pi pro provádění výpočtů</h2>

<p>V&nbsp;dnešním článku si stručně popíšeme tu část GPU použitou na čipech
BCM, kterou je možné naprogramovat a použít tak pro mnohdy razantní urychlení
výpočtů. Teoretický maximální výpočetní výkon programovatelné části GPU
dosahuje 24 GFLOPS u čipů BCM2835 a BCM2836 resp.&nbsp;28,8 GFLOPS u čipu
BCM2837, musíme si však uvědomit, že tohoto stavu se v&nbsp;reálných programech
nemůže dosáhnout a navíc je tento výkon spočítán pro případ, že se zpracovávají
čtyřprvkové vektory obsahující osmibitové hodnoty (barvy atd.) a to navíc pouze
omezeným repertoárem operací (součet, součin, konverze). Pokud se výpočty mají
provádět se 16bitovými či 32bitovými hodnotami a s&nbsp;použitím dalších
operací (druhá odmocnina, podíl), bude reálný výpočetní výkon mnohem nižší, i
tak se však dá dosáhnout zajímavých hodnot. 10 GFLOPS nemusí být výjimkou, což
je pro mikropočítač s&nbsp;cenou 20 (35) dolarů a příkonem mezi jedním až
čtyřmi watty velmi zajímavá hodnota umožňující efektivně použít RPi ve
výpočetních clusterech (záleží samozřejmě na konkrétní aplikaci, neboť RPi se
na druhou stranu může &bdquo;pochlubit&ldquo; pomalou implementací Ethernetu,
takže lokalita dat hraje významnou roli při rozhodování).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Základní architektura GPU</h2>

<p>Podívejme se nejdříve na celkové schéma GPU VideoCore:</p>

<img src="https://i.iinfo.cz/images/211/rpi-gpu1-1.png" class="image-263918" alt="&#160;" height="972" width="768" />
<p><i>Obrázek 1: Schéma GPU VideoCore.</i></p>

<p>Na tomto obrázku můžeme vidět koncepci VideoCore. Na jednu stranu se nejedná
ani o univerzálně programovatelný čip s&nbsp;maticí nezávisle pracujících CPU,
na stranu druhou to ale není pevně nakonfigurovaný 3D akcelerátor. Některé
moduly, které VideoCore obsahuje, jsou určeny čistě pro provádění 2D a 3D
grafických operací a je možné je pouze překonfigurovat, nikoli přeprogramovat
(Front-End Pipe, Interpolator, celý koncept Z-bufferu atd.). Některé moduly
pracují s&nbsp;vertexy (vrcholy) zpracovávaných grafických primitiv, další
moduly naopak zpracovávají fragmenty, tj.&nbsp;data popisující jeden pixel,
který se má zapsat do framebufferu. Zajímavostí je použití TLB (Tile Bufferu),
který zde z&nbsp;důvodů lepší škálovatelnosti nahrazuje přímý přístup do
klasického framebufferu. Ovšem z&nbsp;hlediska programování obecných algoritmů
nejsou tyto bloky většinou podstatné; důležitější jsou programovatelné QPU
neboli <i>Quad Processor Unit(s)</i> a k&nbsp;nim přidružené pomocné moduly
popsané v&nbsp;dalších kapitolách (QPU je název používaný společností
Broadcom, obecný název pro tento typ programovatelných modulů je shader).</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Skupiny QPU (slices)</h2>

<p>Na GPU je implementováno dvanáct QPU. Ty jsou sdruženy po čtveřicích,
přičemž vždy jedna čtveřice QPU tvoří společně s&nbsp;instrukční cache a SFU
skupinu neboli <i>slice</i> (na tomto místě nechci <i>slice</i> překládat jako
řez, protože stejné slovo bude použito při popisu pipeline):</p>

<img src="https://i.iinfo.cz/images/325/rpi-gpu-2.png" class="image-263920" alt="&#160;" height="972" width="768" />
<p><i>Obrázek 2: Skupiny QPU.</i></p>

<p>Proč jsou QPU sdruženy do čtveřic? Samotný QPU interně obsahuje dvě
aritmeticko-logické jednotky, které ovšem dokážou provádět jen jednodušší
operace (navíc každá ALU jinou skupinu operací). Pro specializované výpočty,
které se při 2D a 3D renderingu používají, například pro výpočet druhé
odmocniny, se však minimalisticky pojatý QPU vůbec nehodí. Pro tyto výpočty je
vytvořen modul <i>SFU</i> popsaný dále, který je složitější a tudíž zabere
větší plochu čipu. Pravděpodobně by nebylo ekonomické implementovat pro každý
QPU vlastní SFU, proto je tento modul vždy sdílen mezi čtyřmi QPU a počítá se
s&nbsp;tím, že výpočet odmocniny nebude probíhat tak často, jako například
součet či součin (už zde můžete vidět určitou problematičnost výpočtu GFLOPS,
protože ne všechny FP operace jsou si zde rovny).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Instrukční cache sdílená každou skupinou QPU</h2>

<p>Z&nbsp;vnějšího pohledu je každý QPU vektorovým (nebo možná přesněji řečeno
SIMD) procesorem zpracovávajícím vektory se šestnácti prvky s&nbsp;latencí
čtyři cykly. Z&nbsp;vnitřního pohledu je situace jiná, protože SIMD operace se
zde provádí &bdquo;pouze&ldquo; se čtyřprvkovými vektory (odtud ostatně pochází
význam názvu Quad Processor Unit), ovšem postupně se do pipeline vloží
instrukce čtyřikrát pro různé vstupní vektory. Instrukce se do skupiny QPU
přenáší přes instrukční cache, která je na schématu pojmenována <i>QIC</i>.
Samotné řízení QPU má na starost blok <i>QSH</i> (scheduler). Pokud je GPU
naprogramován pro 2D či 3D rendering, používá scheduler relativně jednoduchý
postup pro nalezení prvního volného QPU, kterému dodá data (vertexy,
fragmenty), protože v&nbsp;tomto případě QPU zpracovávají stejný
algoritmus:</p>

<img src="https://i.iinfo.cz/images/325/rpi-gpu-3.png" class="image-263921" alt="&#160;" height="972" width="768" />
<p><i>Obrázek 3: Instrukční cache a scheduler.</i></p>

<p>Proč se SIMD operace provádí právě nad čtyřprvkovými vektory? Typickým
algoritmem je práce s&nbsp;fragmenty, tj.&nbsp;mj.&nbsp;i s&nbsp;barvami
pixelů, což jsou čtveřice A, R, G, B. Jak uvidíme dále, je barva (<i>color</i>)
reprezentována ve formátu vhodném pro provádění všech důležitých operací
s&nbsp;fragmenty &ndash; změnu barvy, aplikaci průhlednosti, interpolaci
atd.</p>

<img src="https://i.iinfo.cz/images/325/rpi-gpu-4.png" class="image-263922" alt="&#160;" height="972" width="768" />
<p><i>Obrázek 4: Skupina QPU sdílející společné moduly.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. SFU (Special Functions Unit) sdílená každou skupinou QPU</h2>

<p>Jak jsme si již řekli v&nbsp;předchozích kapitolách, sdílí skupina QPU ještě
blok nazvaný <i>SFU</i> určený pro provádění sice důležitých, ale přece jen
méně častých operací. Jedná se o výpočet druhé odmocniny, výpočet převrácené
hodnoty druhé odmocniny, výpočet logaritmu a exponenciální funkce. První dvě
operace nalezneme v&nbsp;mnoha grafických algoritmech, například při
normalizaci vektorů, druhé dvě operace při některých operacích s&nbsp;fragmenty
(například mlha ve scéně). Zajímavý je způsob volání těchto operací &ndash; pro
každou operaci je v&nbsp;QPU vyhrazen speciální registr. Zápisem hodnoty do
tohoto registru se výpočet spustí a po třech cyklech je výsledek uložen do
akumulátoru <strong>r4</strong>. Záleží jen na programátorovi, aby sám
zajistil, že se nespustí větší množství operací v&nbsp;QPU, a to v&nbsp;rámci
celé skupiny (slice). Navíc se po spuštění výpočtu nesmí po dobu dvou cyklů
přistupovat k&nbsp;akumulátoru <strong>r4</strong> (jeho hodnota je platná až
třetí cyklus po spuštění výpočtu).</p>

<img src="https://i.iinfo.cz/images/325/rpi-gpu-5.png" class="image-263923" alt="&#160;" height="972" width="768" />
<p><i>Obrázek 5: Special Functions Unit sdílená každou skupinou QPU.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Interní struktura každého QPU</h2>

<p>Všechny QPU mají stejnou interní strukturu a skládají se z&nbsp;několika
bloků:</p>

<ol>
<li>Banky A s&nbsp;32 pracovními registry. Každý registr má šířku 32 bitů.</li>
<li>Banky B, taktéž s&nbsp;32 pracovními registry. Každý registr má šířku 32 bitů.</li>
<li>Sady šesti akumulátorů (na schématu chybí šestý akumulátor <strong>r5</strong>, ten je z&nbsp;pohledu QPU určen jen pro čtení, z&nbsp;pohledu programátora naopak představuje možnost, jak do QPU přenést data)</li>
<li>První ALU orientovanou na operaci násobení (+ na operace hledání minima, maxima atd.).</li>
<li>První ALU orientovanou na operaci sčítání (+ na bitové posuny, logické operace, součty a rozdíly se saturací).</li>
<li>Několik multiplexorů, které vybírají ty vstupní registry, jenž se mají použít jako operandy v&nbsp;ALU.</li>
<li>Moduly označené <i>packer</i> a <i>unpacker</i> zajišťují základní konverze dat (32bitový registr totiž může obsahovat skalární hodnotu či vektor).</li>
</ol>

<img src="https://i.iinfo.cz/images/325/rpi-gpu-6.png" class="image-263924" alt="&#160;" height="557" width="734" /></p>
<p><i>Obrázek 6: Interní struktura každého QPU (zjednodušená, nejsou zde naznačeny řezy pipeline atd.).</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Pipeline a její &bdquo;viditelnost&ldquo; při provádění operací</h2>

<p>QPU jsou interně koncipovány skutečně minimalisticky, což mj.&nbsp;znamená,
že se programátor musí seznámit s&nbsp;principem pipeline, protože jednotlivé
fáze pipeline jsou pro programátora &bdquo;viditelné&ldquo;. Na běžných CPU je
naproti tomu většinou programátor od pipeline odstíněn, takže například nemusí
řešit konflikty při přístupu k&nbsp;registrům, které se &bdquo;magicky&ldquo;
vyřeší samy za cenu pozdržení další instrukce či použitím zkratky (forward
paths). Co to znamená v&nbsp;praxi při programování QPU? Například je nutné
čekat minimálně jeden takt mezi zápisem výsledku do registru a použitím
(čtením) tohoto registru v&nbsp;jiné operaci; dále programátor musí explicitně
používat branch delay sloty (délka tři takty) atd. QPU se většinou programují
v&nbsp;assembleru (existuje jich více a bohužel nejsou mezi sebou
kompatibilní), ale tyto assemblery většinou nevypisují žádné varování, pokud se
použije nekorektní operace (dva za sebou jdoucí ALU instrukce nad jedním
registrem jsou typickým příkladem).</p>

<p>Pipeline má osm řezů, výpočty se samozřejmě překrývají:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Operace</th></tr>
<tr><td>1</td><td>SP</td><td>synchronizace atd.</td></tr>
<tr><td>2</td><td>RA</td><td>zápis předchozích výsledků do registrů</td></tr>
<tr><td>3</td><td>RR</td><td>čtení z registrů a přenos do latchů</td></tr>
<tr><td>4</td><td>MS</td><td>výběr operandů pro sčítačku a násobičku, přečtení/zápis hodnot do akumulátorů</td></tr>
<tr><td>5</td><td>A0</td><td>první fáze výpočtu</td></tr>
<tr><td>6</td><td>A1</td><td>druhá fáze výpočtu</td></tr>
<tr><td>7</td><td>A2</td><td>třetí fáze výpočtu</td></tr>
<tr><td>8</td><td>WB</td><td>přenos výsledků zpět do pracovních registrů</td></tr>
</table>

<p>Poznámka: pokud hledáte operaci IF (instruction fetch), vězte, že tato
operace je provedena pro všechny čtyři QPU v&nbsp;již zmíněné instrukční cache.
Každému QPU se instrukční slovo předává postupně, takže QPU nejsou
synchronizovány, což je opraveno v&nbsp;prvním řezu.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Aritmeticko-logické jednotky v&nbsp;QPU</h2>

<p>Z&nbsp;obrázku 6 je patrné, že každý QPU obsahuje dvě samostatně pracující
aritmeticko-logické jednotky, přičemž první jednotka provádí operace součtu a
druhá jednotka především operaci součinu. ALU tedy nejsou zcela symetrické.
Kromě operace součtu dvou vektorů (32bitová FP operace) může první ALU provádět
bitové posuny, logické operace a v&nbsp;neposlední řadě taktéž vektorové součty
a rozdíly se saturací (myšleny jsou zde součty a rozdíly prováděné prvek po
prvku, výpočty se saturací jsou obzvlášť výhodné při zpracování signálů). Druhá
aritmeticko-logická jednotka dokáže kromě násobení dvou 32bitových FP hodnot
provést součet prvků dvou vektorů, rozdíl prvků, výpočet minima (prvek po
prvku), výpočet maxima a taktéž násobení vektorů prvek po prvku. Konkrétní
popis zpracovávaných instrukcí si uvedeme příště.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Sada pracovních registrů a akumulátorů</h2>

<p>Dále v&nbsp;každém QPU nalezneme dvě banky registrů A a B. V&nbsp;první
bance se nachází 32 registrů pojmenovaných <strong>ra0</strong> až
<strong>ra31</strong>, ve druhé bance pochopitelně nalezneme registry se jmény
<strong>rb1</strong> až <strong>rb31</strong>. Typicky se registry z&nbsp;banky
A používají v&nbsp;první ALU a registry z&nbsp;banky B ve druhé ALU, ovšem
jedním bitem v&nbsp;instrukci lze banky při zápisu výsledků prohodit (na
schématu je to naznačeno &bdquo;angličanem&ldquo; v&nbsp;pravé dolní části).
Kromě těchto registrů v&nbsp;QPU najdeme i šest akumulátorů <strong>r0</strong>
až <strong>r5</strong>. Akumulátory nabízejí rychlejší přístup, protože
výsledky se do akumulátorů zapisují už ve fázi MS (o jeden takt dříve), navíc
zde neexistuje omezení, která aritmeticko-logická jednotka může do
akumulátoru(ů) zapisovat výsledek (samozřejmě nesmí dojít k&nbsp;souběžnému
zápisu, což je opět věc, která musí být zajištěna programátorem). Akumulátory
<strong>r4</strong> a především pak <strong>r5</strong> mají další speciální
funkci, protože jsou využity pro přenos dat z&nbsp;dalších modulů čipu.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Formát zpracovávaných hodnot (prvků vektorů)</h2>

<p>QPU mohou zpracovávat data v&nbsp;několika různých formátech. Vždy však
platí, že do první i druhé aritmeticko-logické jednotky vstupují hodnoty
přečtené z&nbsp;32 bitových registrů či z&nbsp;akumulátorů (tyto hodnoty se
označují termínem <i>vektor</i>, i když se ve skutečnosti může jednat o
skalární hodnotu). Každou 32bitovou hodnotu je možné interpretovat jako:</p>

<ul>
<li>32bitová hodnota typu celé číslo (integer)</li>
<li>32bitová FP hodnota (single/float)</li>
<li>16bitová celočíselná hodnota se znaménkem</li>
<li>16bitová FP hodnota (má poněkud omezený repertoár operací)</li>
<li>8bitová celočíselná hodnota bez znaménka (čtyři hodnoty/prvky mohou tvořit vektor)</li>
<li>8bitová hodnota reprezentující barvovou složku v&nbsp;rozsahu 0,0 až 1,0 (čtyři složky tvoří barvu)</li>
</ul>



<p><a name="k14"></a></p>
<h2 id="k14">14. Formát instrukcí posílaných do QPU</h2>

<p>QPU zpracovává instrukce se šířkou 64 bitů. Formát těchto instrukcí do
určité míry připomíná klasické VLIW procesory, protože v&nbsp;každé instrukci
nalezneme bitová pole s&nbsp;odlišnou funkcí (výběr operace pro první
aritmeticko-logickou jednotku, výběr operace pro druhou ALU, aplikace funkce
pack či unpack v&nbsp;první či druhé cestě do ALU, signalizace skoku, výběr
podmínky pro provedení operace atd.). Ovšem na rozdíl od VLIW zde není
rozdělení bitových polí pro všechny instrukce zcela totožné, takže se rozeznává
celkem sedm formátů, které se od sebe mohou rozlišit na základě prvních bitů
instrukčního slova. Podrobnější informace si uvedeme v&nbsp;případě zájmu
příště.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Celkový teoretický výpočetní výkon grafického čipu na Raspberry Pi</h2>

<p>Na závěr si ještě přibližme, jakým způsobem se vlastně výrobce čipů Broadcom
dopracoval k&nbsp;tvrzení, že teoretický maximální výpočetní výkon
programovatelné části GPU dosahuje 24 GFLOPS u čipů BCM2835 a BCM2836
resp.&nbsp;28,8 GFLOPS u čipu BCM2837. Jak je u těchto čísel zvykem &ndash; a
v&nbsp;tom není Broadcom sám &ndash; vypočetla se ta nejlepší teoretická
hodnota, které je možné dosáhnout. Pokud máme k&nbsp;dispozici celkem 12 QPU,
z&nbsp;nichž každý bude zpracovávat teoreticky nejrychlejší program (což
například znamená, že se musí správně střídat registry, nedochází
k&nbsp;synchronizaci, nejsou použity skoky atd.), tak každé QPU dokáže dokončit
dvě instrukce v&nbsp;každém taktu, protože je použita ALU se sčítačkou a navíc
samostatná ALU s&nbsp;násobičkou. Pokud se v&nbsp;každé instrukci zpracuje
čtyřprvkový vektor (4&times;bajt nebo 4&times;8bit float), dostaneme
jednoduchým výpočtem:</p>

<p>
12&times;2&times;4=96 FP operací (FLOP) v jednom taktu
</p>

<p>QPU používají na BCM2835 a BCM2836 hodinovou frekvenci 250 MHz, takže:</p>

<p>
250&times;10<sup>6</sup> &times; 96 = 24&times;10<sup>9</sup> FLOPS = 24 GFLOPS
</p>

<p>QPU u BCP2837 má poněkud vyšší hodinovou frekvenci 300 MHz:</p>

<p>
300&times;10<sup>6</sup> &times; 96 = 28,8&times;10<sup>9</sup> FLOPS = 28,8 GFLOPS
</p>

<p>Při ceně RPi tedy (teoreticky) zaplatíme za každý GFLOPS jeden dolar, se
všemi výše zmíněnými omezeními. U Tegry K1 je výpočetní výkon 365 GFLOPS se 192
jádry, takže při sumě přibližně 180 dolarů za desku se dostáváme
k&nbsp;výhodnější ceně přibližně 50 centů za GFLOPS. Naproti tomu u šestnácti
jádrového &bdquo;high performance&ldquo; Parallela boardu je cena více než 3
dolary za GFLOPS (spočtení ceny u desek s&nbsp;čipy Atom atd. ponechám na
váženém čtenáři).</p>

<p>Poznámka: programování QPU je mnohem pracnější a časově náročnější, než u
běžného CPU, navíc každé použití SFU snižuje počet reálně dokončených
operací.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>Hacking The GPU For Fun And Profit (Pt. 1)<br />
<a href="https://rpiplayground.wordpress.com/2014/05/03/hacking-the-gpu-for-fun-and-profit-pt-1/">https://rpiplayground.wordpress.com/2014/05/03/hacking-the-gpu-for-fun-and-profit-pt-1/</a>
</li>

<li>A birthday present from Broadcom<br />
<a href="https://www.raspberrypi.org/blog/a-birthday-present-from-broadcom/">https://www.raspberrypi.org/blog/a-birthday-present-from-broadcom/</a>
</li>

<li>VideoCoreIV-QPU<br />
<a href="https://github.com/hermanhermitage/videocoreiv-qpu">https://github.com/hermanhermitage/videocoreiv-qpu</a>
</li>

<li>VC4ASM - macro assembler for Broadcom VideoCore IV aka Raspberry Pi GPU<br />
<a href="http://maazl.de/project/vc4asm/doc/index.html">http://maazl.de/project/vc4asm/doc/index.html</a>
</li>

<li>BCM2835: High Definition 1080p Embedded Multimedia Applications Processor<br />
<a href="https://web.archive.org/web/20120513032855/http://www.broadcom.com/products/BCM2835">https://web.archive.org/web/20120513032855/http://www.broadcom.com/products/BCM2835</a>
</li>

<li>MoeASM released - VideoCore IV support to be added<br />
<a href="https://wk3.org/posts/588911">https://wk3.org/posts/588911</a>
</li>

<li>VideoCore (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/VideoCore">https://en.wikipedia.org/wiki/VideoCore</a>
</li>

<li>More QPU magic from Pete Warden (RPi blog)<br />
<a href="https://www.raspberrypi.org/blog/more-qpu-magic-from-pete-warden/">https://www.raspberrypi.org/blog/more-qpu-magic-from-pete-warden/</a>
</li>

<li>New QPU macro assembler (RPi blog)<br />
<a href="https://www.raspberrypi.org/blog/new-qpu-macro-assembler/">https://www.raspberrypi.org/blog/new-qpu-macro-assembler/</a>
</li>

<li>Raspberry Pi VideoCore APIs<br />
<a href="http://elinux.org/Raspberry_Pi_VideoCore_APIs">http://elinux.org/Raspberry_Pi_VideoCore_APIs</a>
</li>

<li>Programming AudioVideo on the Raspberry Pi GPU<br />
<a href="https://jan.newmarch.name/RPi/index.html">https://jan.newmarch.name/RPi/index.html</a>
</li>

<li>The Standard for Vector Graphics Acceleration<br />
<a href="https://www.khronos.org/openvg/">https://www.khronos.org/openvg/</a>
</li>

<li>Raspberry Pi pages<br />
<a href="https://www.raspberrypi.org/">https://www.raspberrypi.org/</a>
</li>

<li>BCM2835 registers<br />
<a href="http://elinux.org/BCM2835_registers">http://elinux.org/BCM2835_registers</a>
</li>

<li>VideoCore (archiv stránek společnosti Alphamosaic)<br />
<a href="http://web.archive.org/web/20030209213838/www.alphamosaic.com/videocore/">http://web.archive.org/web/20030209213838/www.alphamosaic.com/videocore/</a>
</li>

<li>RPi lessons: Lesson 6 Screen01<br />
<a href="http://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/os/screen01.html">http://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/os/screen01.html</a>
</li>

<li>Raspberry Pi forum: Bare metal<br />
<a href="https://www.raspberrypi.org/forums/viewforum.php?f=72">https://www.raspberrypi.org/forums/viewforum.php?f=72</a>
</li>

<li>C library for Broadcom BCM 2835 as used in Raspberry Pi<br />
<a href="http://www.airspayce.com/mikem/bcm2835/">http://www.airspayce.com/mikem/bcm2835/</a>
</li>

<li>Raspberry Pi Hardware Components<br />
<a href="http://elinux.org/RPi_Hardware#Components">http://elinux.org/RPi_Hardware#Components</a>
</li>

<li>RPi Framebuffer<br />
<a href="http://elinux.org/RPi_Framebuffer">http://elinux.org/RPi_Framebuffer</a>
</li>

<li>HOWTO: Boot your Raspberry Pi into a fullscreen browser kiosk<br />
<a href="http://blogs.wcode.org/2013/09/howto-boot-your-raspberry-pi-into-a-fullscreen-browser-kiosk/">http://blogs.wcode.org/2013/09/howto-boot-your-raspberry-pi-into-a-fullscreen-browser-kiosk/</a>
</li>

<li>Zdrojový kód fb.c pro RPI<br />
<a href="https://github.com/jncronin/rpi-boot/blob/master/fb.c">https://github.com/jncronin/rpi-boot/blob/master/fb.c</a>
</li>

<li>RPiconfig<br />
<a href="http://elinux.org/RPi_config.txt">http://elinux.org/RPi_config.txt</a>
</li>

<li>Mailbox framebuffer interface<br />
<a href="https://github.com/raspberrypi/firmware/wiki/Mailbox-framebuffer-interface">https://github.com/raspberrypi/firmware/wiki/Mailbox-framebuffer-interface</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

