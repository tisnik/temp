<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Mikroprocesory a mikrořadiče s instrukční sadou SuperH (SH)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Mikroprocesory a mikrořadiče s instrukční sadou SuperH (SH)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V oblasti mikrořadičů můžeme vidět rostoucí oblibu čipů s plně 32bitovými aritmeticko-logickými jednotkami. Kromě architektur ARM (Cortex-M) či MIPS se zejména v průmyslu setkáme i s mikrořadiči s instrukčními sadami SuperH (SH-2, SH-2A, SH-4), které mají zajímavou historii, protože původně byly určeny pro herní konzole.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Mikroprocesory a mikrořadiče s&nbsp;instrukční sadou SuperH (SH)</a></p>
<p><a href="#k02">2. Použití čipů s&nbsp;instrukční sadou SuperH v&nbsp;herních konzolích</a></p>
<p><a href="#k03">3. Sega 32X</a></p>
<p><a href="#k04">4. Sega Saturn</a></p>
<p><a href="#k05">5. Základní vlastnosti původních RISCových mikroprocesorů Hitachi SH-2</a></p>
<p><a href="#k06">6. Branch delay sloty</a></p>
<p><a href="#k07">7. Sada pracovních registrů v&nbsp;SH-2 ISA</a></p>
<p><a href="#k08">8. Stavový registr</a></p>
<p><a href="#k09">9. Další specializované registry</a></p>
<p><a href="#k10">10. Instrukční sada SH-2</a></p>
<p><a href="#k11">11. Použití bitu T</a></p>
<p><a href="#k12">12. Podporované adresovací režimy</a></p>
<p><a href="#k13">13. Význam vybraných adresovacích režimů</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Mikroprocesory a mikrořadiče s&nbsp;instrukční sadou SuperH (SH)</h2>

<p>O stále rostoucí oblibě 32bitových mikrořadičů jsme se již v&nbsp;tomto
seriálu několikrát zmiňovali. Je způsoben hned několika důvody, z&nbsp;nichž
nejviditelnější je stále se snižující cena těchto čipů. Rozdíly mezi podobně
vybaveným osmibitovým, šestnáctibitovým a 32bitovým mikrořadičem jsou
v&nbsp;některých případech již minimální, takže větší úlohu hrají jiné faktory,
například spotřeba. Ovšem existují i další důvody, mezi něž patří především
neustále se zkracující životní cykly různých produktů s&nbsp;mikrořadiči, což
mj.&nbsp;znamená, že se při vývoji používají vysokoúrovňové jazyky a nikoli
přímo assembler, jak tomu bylo (a mnohdy stále ještě je) ve sféře jednodušších
osmibitových mikrořadičů (viz například starodávné řady PIC, 8051 či Motorola
68HC11). U vyšších programovacích jazyků, mezi něž si v&nbsp;tomto oboru
dovolím počítat i klasické céčko, se negativně projevují mnohá omezení
instrukčních sad zmíněných osmibitových mikrořadičů: typicky se jedná o
akumulátorové architektury, osmibitové registry jsou nevhodné pro adresování,
adresovací režimy jsou mnohdy velmi komplikované a závislé na typu paměti
(EPROM/Flash, RAM, externí RAM, ...), mnohdy chybí podpora pro podmínky
s&nbsp;celými čísly se znaménky atd.</p>

<p>Určité vylepšení nabízí například osmibitové mikrořadiče AVR, které
nalezneme například v&nbsp;populárních Arduinech. Ovšem až 32bitové mikrořadiče
nabízí programátorům prakticky stejné možnosti a nástroje, jaké nalezneme u
běžných mikroprocesorů určených pro desktopy &ndash; plnohodnotné překladače
céčka, interpretry, debuggery atd. Zajímavé je, že v&nbsp;oblasti 32bitových
mikrořadičů se prosazují RISCové architektury, které však mnohdy musely být
upraveny kvůli specifickým požadavkům této oblasti (spouštění programů
z&nbsp;Flash atd.). Proto například již popsané čipy ARM Cortex-M používají
instrukční sadu Thumb s&nbsp;instrukcemi o šířce šestnáct bitů. Stejný princip
nalezneme i u čipů <i>SuperH</i> (SH-2, SH-2A, SH-4), které byly vyráběné
společností Hitachi a posléze největším výrobcem mikrořadičů na světě, firmou
Renesas Electronics Corporation. Čipy <i>SuperH</i> nalezneme v&nbsp;mnoha
průmyslových oblastech, například v&nbsp;oblasti komunikací, automotive atd.
Není bez zajímavosti, že některé dále popsané vlastnosti mají čipy SuperH
společné se zmíněnými čipy AVR.</p>

<a href="http://www.root.cz/obrazek/262264/"><img src="https://i.iinfo.cz/images/355/mcu32-1-prev.png" class="image-262264" alt="&#160;" height="206" width="370" /></a>
<p><i>Obrázek 1: Vývoj výnosů v&nbsp;oblasti 32bitových čipů (především
mikrořadičů). Kromě široce diskutovaného poklesu po roce 2008 (ten postihl celý
obor) je zajímavý výraznější růst čipů s&nbsp;jádry ARM. Power zde znamená
PowerPC, SH čipy SuperH, ARM zahrnuje jak klasické ARM11, tak i řady
Cortex.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Použití čipů s&nbsp;instrukční sadou SuperH v&nbsp;herních konzolích</h2>

<p>V&nbsp;současnosti se sice mikrořadiče a mikroprocesory s&nbsp;instrukčními
sadami SuperH používají v&nbsp;mnoha průmyslových aplikacích, ovšem původně
byly vyvinuty díky kooperaci společností <i>Hitachi</i> a <i>Sega</i> pro zcela
odlišnou oblast. Mělo se totiž jednat o čipy tvořící základ herních konzolí
páté generace. Tento cíl byl splněn, protože čipy SH-2 byly použity
v&nbsp;modulu <i>Sega 32X</i> a posléze i v&nbsp;plnohodnotné 32bitové herní
konzoli <i>Sega Saturn</i>. Spolupráce společností <i>Hitachi</i> a <i>Sega</i>
pokračovala i v&nbsp;dalších letech; výsledkem byl superskalární čip SH-4
použitý v&nbsp;konzoli <i>Dreamcast</i>, která se však s&nbsp;devíti miliony
prodaných kusů stala poměrně velkým propadákem, protože konkurenční
<i>PlayStation 2</i> se prodalo více než 150 milionů kusů (mimochodem, i
v&nbsp;PS2 byl použit RISCový mikroprocesor, tentokrát ovšem MIPS).
V&nbsp;dalších dvou kapitolách si řekneme základní informace o modulu <i>Sega
32X</i> a o konzoli <i>Sega Saturn</i>, v&nbsp;kapitolách navazujících se pak
budeme věnovat popisu programátorského modelu všech historických a především
současných čipů používajících instrukční sadu SH-2.</p>

<img src="http://i.iinfo.cz/images/625/games100-13.jpg" width="324" height="276" alt="&#160;" />
<p><i>Obrázek 2: Herní konzole Sega Mega Drive, na kterou měl navázat modul 32X
a posléze Sega Saturn.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Sega 32X</h2>

<p>Společnost <i>Sega</i> se, podobně jako konkurenční firma <i>Nintendo</i>,
v&nbsp;první polovině devadesátých let minulého století pokoušela o vylepšení
výpočetního i grafického výkonu svých stávajících herních konzolí čtvrté
generace. Jednalo se o pochopitelnou snahu, protože <i>Nintendo</i> i
<i>Sega</i> byly v&nbsp;té době na úplné špičce v&nbsp;tomto segmentu trhu a
neměly v&nbsp;této oblasti žádnou vážnější konkurenci &ndash; firma
<i>Nintendo</i> se umístila se svojí herní konzolí <i>Super NES (SNES)</i>, jíž
se prodalo přes 49 milionů kusů, na prvním místě a na druhém místě se umístila
firma <i>Sega</i> s&nbsp;herní konzolí <i>Sega Mega Drive</i>, které se podle
oficiálních statistik prodalo 40 milionů kusů. Až daleko za těmito vítězi
nalezneme konzoli <i>TurboGrafx-16</i> (přibližně 10 milionů) či neúspěšný
<i>Philips CD-i</i> (jen 570 tisíc kusů) a <i>Commodore CDTV</i> (což je
vlastně slavná Amiga 500 doplněná o dálkové ovládání a jednotku CD-ROM). Zdálo
se být tedy logické vylepšit původní herní konzole čtvrté generace (ideálně
s&nbsp;použitím výkonných 32bitových čipů, které by doplnily původní 32bitovou
Motorolu 68000 či 16bitový čip Ricoh 5A22) a zachovat přitom zpětnou
kompatibilitu s&nbsp;již vydanými hrami.</p>

<img src="http://i.iinfo.cz/images/638/10608.jpg" width="450" height="391" alt="&#160;" />
<p><i>Obrázek 3: Díky existenci výkonných čipů 80386, 80486DX a Motorola
68030/68040 již bylo možné vytvářet hry, v&nbsp;nichž se vykreslovala
prostorová scéna programově. Na tomto screenshotu pravděpodobně většina čtenářů
pozná slavný Doom, který bylo možné provozovat i na počítači
s&nbsp;mikroprocesorem AMD 80386 40MHz. Právě tento typ her se stal velmi
populární a jasně ukázal nutnost vylepšit původní šestnáctibitové herní konzole
čtvrté generace, které byly orientovány na spritovou grafiku (plošinovky
atd.).</i></p>

<p><i>Sega</i> se navíc v&nbsp;roce 1993 ocitla v&nbsp;určité krizi, protože se
sice její herní konzole <i>Sega Mega Drive</i> prodávala velmi dobře, ovšem
vývoj další konzole páté generace (která byla později nazvána <i>Sega
Saturn</i>, viz též navazující kapitolu) již nebyl tak rychlý, jak vedení firmy
očekávalo. Obavy, které se později ukázaly být oprávněné, vládly především
z&nbsp;rychlého uvedení konkurenční konzole <i>PlayStation</i> firmy
<i>Sony</i>, protože tato herní konzole měla (podle tehdy dostupných informací)
nabízet mnohem vyšší výkon než původní varianta <i>Saturnu</i> (původně byl
grafický subsystém <i>Saturnu</i> optimalizován na 2D hry se sprity, posléze
došlo k&nbsp;úpravám pro zobrazení 3D, ovšem odlišným způsobem, než u
PlayStation). Společnost <i>Sega</i> na tuto nepříjemnou situaci reagovala
vývojem doplňujícího modulu pro konzoli <i>Sega Mega Drive</i>, který byl
představen jako relativně levná alternativa ke vznikajícím 32bitovým herním
konzolím. Tento modul byl nazván <i>Sega 32X</i> a nejednalo se o úspěšný
produkt, protože se ho prodalo pouze 600 000 kusů.</p>

<img src="http://i.iinfo.cz/images/159/10610.jpg" width="450" height="390" alt="&#160;" />
<p><i>Obrázek 4: Hra Super Mario Bros - the Lost Levels je typickou ukázkou 2D
hry masivně používající sprity.</i></p>

<p>Zatímco původní <i>Sega Mega Drive</i> obsahovala jednu z&nbsp;variant
slavného CISCového mikroprocesoru Motorola 68000 (zde měl taktovací frekvenci
nastavenou na 7,61 resp.&nbsp;7,67 MHz podle použité televizní normy), byl
modul <i>Sega 32X</i> osazen dvojicí mnohem výkonnějších plně 32bitových
RISCových mikroprocesorů s&nbsp;instrukční sadou <i>SH-2</i> vyráběných
společností Hitachi, které využívaly taktovací frekvenci 23 MHz (dnes se
samozřejmě frekvence čipů se stejnou sadou pohybují na násobně vyšších
hodnotách). Samotná firma <i>Sega</i> inzerovala, že dvojice <i>Sega Mega
Drive+Sega 32X</i> je až 40&times; výkonnější, než pouze <i>Sega Mega Drive</i>
bez jakéhokoli rozšíření, ovšem benchmarky by pravděpodobně ukázaly poněkud
jiné hodnoty :-) Kromě dvojice CPU byl na <i>32X</i> nainstalován i nový
grafický procesor <i>VDP</i> nabízející rozlišení 320&times;240 pixelů
s&nbsp;využitím 32767 barevných odstínů s&nbsp;udávanou rychlostí vykreslování
vyšších primitiv 50000 polygonů za sekundu.</p>

<img src="http://i.iinfo.cz/images/60/sega32x2.jpg" class="image-153300" width="450" height="352" alt="&#160;" />
<p><i>Obrázek 5: Způsob zapojení Sega 32X do Sega Mega Drive/Sega Genesis.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Sega Saturn</h2>

<p>Po modulu <i>Sega 32X</i> byla v&nbsp;roce 1994 konečně vydána plnohodnotná
32bitová konzole <i>Sega Saturn</i>. Tato herní konzole je postavena na větším
množství vzájemně spolupracujících čipů, které jsou mezi sebou propojeny
několika sběrnicemi:</p>

<table>
<tr><th>#</th><th>Čip</th><th>Plné jméno</th><th>Funkce</th></tr>
<tr><td>1</td><td>SH-2</td><td>Hitachi SuperH-2</td><td>dvojice RISCových mikroprocesorů</td></tr>
<tr><td>2</td><td>SCU</td><td>System Control Unit</td><td>řízení sběrnic a koordinace ostatních čipů, centrální jednotka konzole</td></tr>
<tr><td>3</td><td>SMPC</td><td>System Manager and Peripheral Control</td><td>řízení RESETu, přepínání horizontálního rozlišení, čtení stavu ovladačů</td></tr>
<tr><td>4</td><td>SCSP</td><td>Saturn Custom Sound Processor</td><td>zvukový čip (Yamaha YMF292)</td></tr>
<tr><td>5</td><td>VDP1</td><td>Video Display Processor 1</td><td>první část grafického subsystému</td></tr>
<tr><td>6</td><td>VDP2</td><td>Video Display Processor 2</td><td>druhá část grafického subsystému</td></tr>
<tr><td>7</td><td>MC68E000</td><td>Motorola MC68E000</td><td>řízení zvukového čipu SCSP</td></tr>
<tr><td>8</td><td>DSP</td><td>DSP MC68E000</td><td>řízen CPU, může provádět různé funkce (nejde o samostatný čip, ale o modul)</td></tr>
</table>

<p>Srdcem herní konzole <i>Sega Saturnu</i> je samozřejmě dvojice
třicetidvoubitových mikroprocesorů <i>SH-2</i>, což mělo &ndash; alespoň podle
původních plánů &ndash; vést ke zvýšení čistého výpočetního výkonu této herní
konzole prakticky na dvojnásobnou hodnotu. Ve skutečnosti se však v&nbsp;praxi
dosahovalo přibližně 1,5 násobku výkonu jediného čipu, a to z&nbsp;toho důvodu,
že oba čipy sdílely společnou sběrnici, což se negativně projevovalo při
přístupu do operační paměti (i když je nutné říci, že SH-2 mají užší instrukce
než většina klasických RISCových čipů).</p>

<img src="http://i.iinfo.cz/images/123/sega-saturn-1.png" class="image-155159" width="262" height="243" alt="&#160;" />
<p><i>Obrázek 6: Blokové schéma herní konzole Sega Saturn.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Základní vlastnosti původních RISCových mikroprocesorů Hitachi SH-2</h2>

<p>Podívejme se nyní na základní vlastnosti původních RISCových mikroprocesorů
Hitachi SH-2. Již na úvod je nutné upozornit na poměrně důležitý fakt, že
původní architektura SH-2 zůstala zachována až dodnes a prošla pouze několika
změnami a vylepšeními. Typickým příkladem současného mikrořadiče, který je na
SH-2 založen, je čip SH7125. Čipy Hitachi SH-2 jsou typické tím, že jsou sice
postaveny na klasické RISCové (LOAD/STORE) architektuře, mají pipeline
s&nbsp;pěti řezy, ovšem oproti konkurenčním čipům MIPS, SPARC či ARM
v&nbsp;nich nalezneme i některé prvky inspirované DSP a CISCovými procesory.
Tyto čipy používají instrukce o konstantní šířce šestnácti bitů, což je pro
32bitové RISC procesory poněkud netypické, ovšem v&nbsp;aplikační oblasti, kde
se SuperH používají, je to ve skutečnosti velmi dobré řešení (opět vzpomeňme na
ARM Cortex-M, který již vůbec nepodporuje původní 32bitovou instrukční sadu
ARM, ale pouze Thumb a její varianty). Mimochodem &ndash; instrukční sada
obsahuje pouze 62 instrukcí, ovšem současně je podporováno jedenáct
adresovacích režimů (samozřejmě ne všechny instrukce lze kombinovat se všemi
adresovacími režimy).</p>

<p>S&nbsp;výjimkou několika instrukcí je možné díky již zmíněné pipeline
s&nbsp;pěti řezy v&nbsp;ideálním případě dokončit instrukci v&nbsp;každém taktu
procesoru. Výjimkou je například instrukce <strong>MAC</strong> (Multiply and
Accumulate), která v&nbsp;případě násobení dvou šestnáctibitových hodnot
(s&nbsp;32bitovým výsledkem) trvá dva cykly a v&nbsp;případě násobení dvou
32bitových hodnot (s&nbsp;64bitovým výsledkem) dokonce čtyři cykly. Právě kvůli
sice velmi užitečné, ovšem z&nbsp;hlediska architektury problematické instrukci
<strong>MAC</strong> obsahují čipy SuperH dva speciální registry nazvané
<strong>MACH</strong> a <strong>MACL</strong>, do nichž se ukládají
mezivýsledky.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Branch delay sloty</h2>

<p>Pro některé RISCové procesory (jmenujme například asi nejtypičtější MIPS,
PA-RISC či SPARC) je poměrně obvyklé taktéž použití technologie takzvaných
<i>branch delay slotů</i>, kterou najdeme i u zde popisovaných čipů
<i>SH-2</i>. SH-2 obsahoval jeden delay slot, což znamenalo, že instrukce
uložená ihned za instrukcí podmíněného či nepodmíněného skoku byla vykonána
vždy, bez ohledu na výsledek skoku (zda se provede či neprovede). Díky
existenci této technologie se mohla lépe využít instrukční pipeline, neboť
pipeline nebylo nutno celou vyprazdňovat po každém skoku, což znamenalo zdržení
až čtyři takty. Použití branch delay slotů je sice na první pohled poměrně
jednoduché (ostatně většinu práce odvede překladač), ovšem může způsobit
problémy ve chvíli, kdy dojde k&nbsp;výjimce v&nbsp;instrukci umístěné do delay
slotu; navíc ještě záleží na tom, zda výjimka nastane už při dekódování
instrukce nebo později.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Sada pracovních registrů v&nbsp;SH-2 ISA</h2>

<p>Podobně jako další RISCové procesory jsou i čipy SuperH vybaveny relativně
velkým množstvím pracovních registrů. Konkrétně se jedná o šestnáct 32bitových
registrů nazvaných jednoduše <strong>R0</strong> až <strong>R15</strong>.
Registr <strong>R0</strong> je význačný tím, že ho je možné použít ve funkci
indexového registru v&nbsp;adresním režimu <i>index register indirect</i> a
<i>index GRP indirect</i> (viz též <a href="#k12">kapitolu číslo 12</a>). Pro
některé operace je <strong>R0</strong> implicitním zdrojovým nebo cílovým
registrem, což je omezení způsobené použitím instrukcí se 16bitovými slovy,
v&nbsp;nichž není k&nbsp;dispozici dostatek bitů pro indexování dvou zdrojových
a jednoho cílového registru. Podobně i registr <strong>R15</strong> má
alternativní funkci, protože je ho možné využít ve funkci ukazatele na vrchol
zásobníku <strong>SP</strong> v&nbsp;kódu pro obsluhu výjimek.</p>

<p>Poznámka: na většině čipů SuperH nenalezneme speciální banky registrů
dostupné v&nbsp;různých režimech činnosti mikroprocesoru tak, jako je tomu
například u čipů ARM.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Stavový registr</h2>

<p>Kromě sady šestnácti pracovních registrů nalezneme v&nbsp;čipech SuperH i
stavový registr. Ten má taktéž šířku třiceti dvou bitů, ovšem ve skutečnosti se
v&nbsp;něm využívá jen osm bitů, jejichž význam je vypsán v&nbsp;následující
tabulce:</p>

<table>
<tr><th>Bit</th><th>Označení</th><th>Význam</th></tr>
<tr><td>9</td><td>M</td><td>použit instrukcemi <strong>DIV0U</strong>, <strong>DIV0S</strong> a <strong>DIV1</strong></td></tr>
<tr><td>8</td><td>Q</td><td>použit instrukcemi <strong>DIV0U</strong>, <strong>DIV0S</strong> a <strong>DIV1</strong></td></tr>
<tr><td>7</td><td>I3</td><td>maska pro přerušení (interrupt) číslo 3</td></tr>
<tr><td>6</td><td>I2</td><td>maska pro přerušení (interrupt) číslo 2</td></tr>
<tr><td>5</td><td>I1</td><td>maska pro přerušení (interrupt) číslo 1</td></tr>
<tr><td>4</td><td>I0</td><td>maska pro přerušení (interrupt) číslo 0</td></tr>
<tr><td>1</td><td>S</td><td>použit instrukcí <strong>MAC</strong></td></tr>
<tr><td>0</td><td>T</td><td>&bdquo;univerzální&ldquo; příznak nahrazující <i>carry</i> a <i>overflow</i></td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Další specializované registry</h2>

<p>Mezi další registry se speciálním významem patří především:</p>

<table>
<tr><th>Jméno</th><th>Význam</th></tr>
<tr><td>MACH</td><td>uložení (akumulace) mezivýsledků instrukce <strong>MAC</strong></td></tr>
<tr><td>MACL</td><td>uložení (akumulace) mezivýsledků instrukce <strong>MAC</strong></td></tr>
<tr><td>GBR</td><td>Global Base Register &ndash; obsahuje bázovou adresu pro nepřímý adresovací režim (viz další kapitoly). Použit pro přístup k&nbsp;periferním zařízením na čipu.</td></tr>
<tr><td>VBR</td><td>Vector Base Register &ndash; obsahuje bázovou adresu tabulky vektorů použitých při zpracování výjimek</td></tr>
<tr><td>PR</td><td>Procedure Register &ndash; </td></tr>
<tr><td>PC</td><td>Program Counter &ndash; známý z&nbsp;jiných procesorů, ukazatel na zpracovávanou instrukci</td></tr>
</table>

<p>Poznámka: všechny registry bez výjimky mají šířku 32 bitů.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Instrukční sada SH-2</h2>

<p>Již v&nbsp;předchozích kapitolách jsme si řekli, že instrukční sada
procesorů SH-2 obsahuje pouze 62 instrukcí. Tyto instrukce lze rozdělit do
několika kategorií:</p>

<ol>
<li>Pět instrukcí určených pro přenosy dat.</li>
<li>Dvacet jedna aritmetických instrukcí (včetně konverzních instrukcí).</li>
<li>Šest instrukcí pro logické a bitové operace.</li>
<li>Deset instrukcí pro různé typy bitových posunů a rotací.</li>
<li>Devět instrukcí pro podmíněné i nepodmíněné skoky.</li>
<li>Konečně jedenáct instrukcí pro nastavení/vynulování bitu T, nastavení stavového registru atd.</li>
</ol>

<p>Podrobnější popis jednotlivých instrukcí bude uveden v&nbsp;navazující části
článku.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Použití bitu T</h2>

<p>Při popisu stavového registru jste si pravděpodobně povšimli, že je
v&nbsp;něm obsažen pouze jediný příznakový bit nazvaný <strong>T</strong> (od
slova <i>test</i>). Tento bit slouží k&nbsp;mnoha účelům, pro které se
v&nbsp;jiných procesorech používá větší množství příznakových bitů, například
<i>Zero</i>, <i>Carry</i> a <i>Overflow</i>. Bit <strong>T</strong> lze
nastavit či vynulovat přímo instrukcemi <strong>CLRT</strong> a
<strong>SETT</strong>, ovšem většinou je nastavován a/nebo čten automaticky
aritmetickými instrukcemi <strong>ADDV</strong>, <strong>ADDC</strong>,
<strong>SUBV</strong>, <strong>SUBC</strong>, rotacemi a bitovými posuvy
<strong>SHAR</strong>, <strong>SHAL</strong>, <strong>SHLR</strong>,
<strong>SHLL</strong>, <strong>ROTR</strong>, <strong>ROTR</strong> i při
dělení <strong>DIV0U</strong>, <strong>DIV0S</strong> a
<strong>DIV1</strong>.</p>

<p>Tento bit lze testovat i v&nbsp;podmíněných skocích, konkrétně
v&nbsp;instrukcích <strong>BT</strong> (test na 1), <strong>BF</strong> (test
na 0) a dvojici <strong>BT/S</strong> a <strong>BF/S</strong> (varianty
s&nbsp;branch delay slotem).</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Podporované adresovací režimy</h2>

<p>Čipy s&nbsp;instrukční sadou SH-2 podporují relativně velké množství
adresovacích režimů, přičemž některé režimy by vlastně ani neměly být
v&nbsp;čistě RISCové architektuře použity. Jedná se například o v&nbsp;praxi
velmi užitečné režimy, při nichž dochází ke snížení či zvýšení obsahu
pracovního registru použitého pro adresování apod. I zde tedy můžeme vidět, že
SuperH je architektura, která se sice snaží využít všechny dostupné výhody
RISCových procesorů, ovšem v&nbsp;případě potřeby převáží praktické hledisko.
Ostatně podívejme se na následující tabulku, v&nbsp;níž nalezneme stručný popis
všech podporovaných adresovacích režimů:</p>

<table>
<tr><th> #</th><th>Adresovací režim</th><th>Zápis</th><th>Stručný popis</th></tr>
<tr><td> 1</td><td>Immediate                            </td><td>#xxx        </td><td>operandem je osmibitová konstanta</td></tr>
<tr><td> 2</td><td>Register direct                      </td><td>Rn          </td><td>operand je uložen přímo v registru Rn</td></tr>
<tr><td> 3</td><td>Register indirect                    </td><td>@Rn         </td><td>adresa=Rn</td></tr>
<tr><td> 4</td><td>Register indirect with post-increment</td><td>@Rn+        </td><td>dtto, ale následně je registr zvýšen o 1, 2 či 4</td></tr>
<tr><td> 5</td><td>Register indirect with pre-decrement </td><td>@-Rn        </td><td>před adresováním je obsah registru snížen o 1, 2 či 4,</td></tr>
<tr><td> 6</td><td>Register indirect with displacement  </td><td>@(disp, Rn) </td><td>adresa=Rn+disp(*1, *2, *4)</td></tr>
<tr><td> 7</td><td>Index register indirect              </td><td>@(R0, Rn)   </td><td>adresa=Rn+R0</td></tr>
<tr><td> 8</td><td>GBR indirect with displacement       </td><td>@(disp, GBR)</td><td>adresa=GBR+disp(*1, *2, *4)</td></tr>
<tr><td> 9</td><td>Index GBR indirect                   </td><td>@(R0, GBR)  </td><td>adresa=GBR+R0</td></tr>
<tr><td>10</td><td>PC relative                          </td><td>PC+Rn       </td><td>adresa=PC+Rn</td></tr>
<tr><td>11</td><td>PC relative with displacement        </td><td>@(disp, PC) </td><td>adresa=PC+disp(*2, *4)</td></tr>
</table>



<p><a name="k13"></a></p>
<h2 id="k13">13. Význam vybraných adresovacích režimů</h2>

<p>Některé adresovací režimy vypsané v&nbsp;tabulce v&nbsp;předchozí kapitole
přímo odpovídají konstrukcím, které nalezneme ve vyšších programovacích
jazycích. Jedná se především o možnost umístění adresy do zvoleného pracovního
registru Rn, popř.&nbsp;použití dvou registrů pro výpočet adresy. V&nbsp;tomto
případě může první registr sloužit pro uložení bázové adresy (začátek pole,
začátek datové struktury <strong>struct/record</strong> či objektu) a druhý
registr může obsahovat offset. Při průchodu polem se uplatní adresovací režimy
s&nbsp;post-inkrementem či pre-dekrementem pracovního registru, v&nbsp;němž je
uložena adresa právě zpracovávaného prvku (typicky se na začátku programové
smyčky do tohoto registru uloží bázová adresa pole). Povšimněte si přitom, že
hodnota registru je zvýšena/snížena o konstantu 1, 2 či 4, a to
v&nbsp;závislosti na typu prvku pole (bajt, 16bitové slovo, 32bitové
slovo).</p>

<p>Podobně je použit konstantní offset <i>disp(lacement)</i>, který je taktéž
v&nbsp;případě potřeby vynásoben konstantou 2 či 4. Interně se samozřejmě
namísto násobení pouze provede bitový posun v&nbsp;barrel shifteru. Adresování
@(disp, PC) je velmi užitečné v&nbsp;případě, že je zapotřebí do nějakého
registru vložit konstantu, protože kvůli instrukcím se šířkou šestnácti bitů
není možné mít v&nbsp;instrukčním slovu kromě kódu instrukce uloženu i
16bitovou či 32bitovou konstantu (pouze některé instrukce mohou použít
osmibitovou konstantu). Řešení je jednoduché &ndash; překladač či assembler
vytvoří na konci subrutiny tabulku, na níž se pak odkáže přes PC+disp*2 či
PC+disp*4. Ostatně s&nbsp;tímto řešením jsme se již setkali i u dalších
RISCových procesorů.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Konkurence procesorů s mikroprogramovým řadičem - RISC<br />
<a href="http://www.root.cz/clanky/konkurence-procesoru-s-mikroprogramovym-radicem-architektura-risc/">http://www.root.cz/clanky/konkurence-procesoru-s-mikroprogramovym-radicem-architektura-risc/</a>
</li>

<li>Mikroprocesory s architekturou RISC I<br />
<a href="http://www.root.cz/clanky/mikroprocesory-s-architekturou-risc-i/">http://www.root.cz/clanky/mikroprocesory-s-architekturou-risc-i/</a>
</li>

<li>Procesory RISC v pracovních stanicích a serverech<br />
<a href="http://www.root.cz/clanky/procesory-s-architekturou-risc-v-pracovnich-stanicich-a-serverech/">http://www.root.cz/clanky/procesory-s-architekturou-risc-v-pracovnich-stanicich-a-serverech/</a>
</li>

<li>Procesory RISC v pracovních stanicích a serverech - architektura SPARC V8 a<br />
<a href="http://www.root.cz/clanky/procesory-risc-v-pracovnich-stanicich-a-serverech-architektura-sparc-v8-a-v9/">http://www.root.cz/clanky/procesory-risc-v-pracovnich-stanicich-a-serverech-architektura-sparc-v8-a-v9/</a>
</li>

<li>Procesory RISC v pracovních stanicích a serverech - architektura PA-RISC<br />
<a href="http://www.root.cz/clanky/procesory-risc-v-pracovnich-stanicich-a-serverech-architektura-pa-risc/">http://www.root.cz/clanky/procesory-risc-v-pracovnich-stanicich-a-serverech-architektura-pa-risc/</a>
</li>

<li>Rozšíření instrukční sady procesorových jader s otevřenou architekturou RISC-V<br />
<a href="http://www.root.cz/clanky/rozsireni-instrukcni-sady-procesorovych-jader-s-otevrenou-architekturou-risc-v/">http://www.root.cz/clanky/rozsireni-instrukcni-sady-procesorovych-jader-s-otevrenou-architekturou-risc-v/</a>
</li>

<li>Sega documentation<br />
<a
href="http://koti.kapsi.fi/~antime/sega/docs.html">http://koti.kapsi.fi/~antime/sega/docs.html</a>
</li>

<li>1995 Programming on the Sega Saturn<br />
<a
href="http://cowboyprogramming.com/2010/06/03/1995-programming-on-the-sega-saturn/">http://cowboyprogramming.com/2010/06/03/1995-programming-on-the-sega-saturn/</a>
</li>

<li>Sega Myths-Saturn was the most difficult console to program for of 5th Gen<br />
<a href="http://forums.sega.com/showthread.php?313485-Sega-Myths-Saturn-was-the-most-difficult-console-to-program-for-of-5th-Gen">http://forums.sega.com/showthread.php?313485-Sega-Myths-Saturn-was-the-most-difficult-console-to-program-for-of-5th-Gen</a>
</li>

<li>SuperH RISC engine Family<br />
<a href="http://www.renesas.com/products/mpumcu/superh/index.jsp">http://www.renesas.com/products/mpumcu/superh/index.jsp</a>
</li>

<li>Sega Saturn<br />
<a href="http://en.wikipedia.org/wiki/Sega_saturn">http://en.wikipedia.org/wiki/Sega_saturn</a>
</li>

<li>Fourth-Generation Consoles<br />
<a href="http://gaming.wikia.com/wiki/Fourth-Generation_Consoles">http://gaming.wikia.com/wiki/Fourth-Generation_Consoles</a>
</li>

<li>Fifth-Generation Consoles<br />
<a href="http://gaming.wikia.com/wiki/Fifth-Generation_Consoles">http://gaming.wikia.com/wiki/Fifth-Generation_Consoles</a>
</li>

<li>History of video game consoles (fifth generation)<br />
<a href="http://en.wikipedia.org/wiki/History_of_video_game_consoles_(fifth_generation)">http://en.wikipedia.org/wiki/History_of_video_game_consoles_(fifth_generation)</a>
</li>

<li>Sega Mega Drive<br />
<a href="http://sega.jp/archive/segahard/md/">http://sega.jp/archive/segahard/md/</a>
</li>

<li>Sega Archives<br />
<a href="http://sega.jp/archive/segahard/">http://sega.jp/archive/segahard/</a>
</li>

<li>Sega Genesis<br />
<a href="http://www.dmoz.org/Games/Video_Games/Console_Platforms/Sega/Genesis/">http://www.dmoz.org/Games/Video_Games/Console_Platforms/Sega/Genesis/</a>
</li>

<li>The Sega Mega Drive/Genesis<br />
<a href="http://www.captainwilliams.co.uk/sega/megadrive/megadrive.php">http://www.captainwilliams.co.uk/sega/megadrive/megadrive.php</a>
</li>

<li>Sega Master System Museum<br />
<a href="http://alexkidd.com/">http://alexkidd.com/</a>
</li>

<li>Jadeite's Sega Master System Museum<br />
<a href="http://rp_gamer.tripod.com/SMS/1.html">http://rp_gamer.tripod.com/SMS/1.html</a>
</li>

<li>Sega Master System (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Sega_Master_System">http://en.wikipedia.org/wiki/Sega_Master_System</a>
</li>

<li>Sega Card (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Sega_Card">http://en.wikipedia.org/wiki/Sega_Card</a>
</li>

<li>Sega Master System VDP documentation<br />
<a href="http://www.smspower.org/uploads/Development/msvdp-20021112.txt?sid=28c370e1fcac51d5774319979bf96f4c">http://www.smspower.org/uploads/Development/msvdp-20021112.txt?sid=28c370e1fcac51d5774319979bf96f4c</a>
</li>

<li>The16bit Era Of Console Video Games<br />
<a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/The16bitEraOfConsoleVideoGames">http://tvtropes.org/pmwiki/pmwiki.php/Main/The16bitEraOfConsoleVideoGames</a>
</li>

<li>The Console Wars<br />
<a href="http://www.cracked.com/funny-2590-the-console-wars/">http://www.cracked.com/funny-2590-the-console-wars/</a>
</li>

<li>Console Wars<br />
<a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/ConsoleWars">http://tvtropes.org/pmwiki/pmwiki.php/Main/ConsoleWars</a>
</li>

<li>Era of the "Bit Wars"<br />
<a href="http://www.gtplanet.net/forum/threads/era-of-the-bit-wars.119796/">http://www.gtplanet.net/forum/threads/era-of-the-bit-wars.119796/</a>
</li>

<li>Rez Wars: How the Bit Wars never really ended<br />
<a href="http://www.ign.com/blogs/beastmastertoad/2013/01/31/rez-wars-how-the-bit-wars-never-really-ended">http://www.ign.com/blogs/beastmastertoad/2013/01/31/rez-wars-how-the-bit-wars-never-really-ended</a>
</li>

<li>Which system ended the "Bit Wars"?<br />
<a href="http://atariage.com/forums/topic/199163-which-system-ended-the-bit-wars/">http://atariage.com/forums/topic/199163-which-system-ended-the-bit-wars/</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Introduction to ARM Thumb<br />
<a href="http://www.embedded.com/electronics-blogs/beginner-s-corner/4024632/Introduction-to-ARM-thumb">http://www.embedded.com/electronics-blogs/beginner-s-corner/4024632/Introduction-to-ARM-thumb</a>
</li>

<li>Code Size – a comprehensive comparison of microMIPS32 and Thumb code size using many Megabytes of customer code<br />
<a href="https://community.arm.com/groups/processors/blog/2014/04/28/code-size-a-comprehensive-comparison-of-micromips32-and-thumb-code-size-using-many-megabytes-of-customer-code">https://community.arm.com/groups/processors/blog/2014/04/28/code-size-a-comprehensive-comparison-of-micromips32-and-thumb-code-size-using-many-megabytes-of-customer-code</a>
</li>

<li>MIPS MCUs Outrun ARM<br />
<a href="http://www.linleygroup.com/newsletters/newsletter_detail.php?num=5117">http://www.linleygroup.com/newsletters/newsletter_detail.php?num=5117</a>
</li>

<li>Carry bits, The Architect's Trap<br />
<a href="http://yarchive.net/comp/carry_bit.html">http://yarchive.net/comp/carry_bit.html</a>
</li>

<li>Microprocessor Design/ALU Flags<br />
<a href="https://en.wikibooks.org/wiki/Microprocessor_Design/ALU_Flags">https://en.wikibooks.org/wiki/Microprocessor_Design/ALU_Flags</a>
</li>

<li>Flags register in an out-of-order processor<br />
<a href="http://cs.stackexchange.com/questions/42095/flags-register-in-an-out-of-order-processor">http://cs.stackexchange.com/questions/42095/flags-register-in-an-out-of-order-processor</a>
</li>

<li>Berkeley RISC<br />
<a href="http://en.wikipedia.org/wiki/Berkeley_RISC">http://en.wikipedia.org/wiki/Berkeley_RISC</a>
</li>

<li>Great moments in microprocessor history<br />
<a href="http://www.ibm.com/developerworks/library/pa-microhist.html">http://www.ibm.com/developerworks/library/pa-microhist.html</a>
</li>

<li>RISC vs. CISC<br />
<a href="http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/risccisc/">http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/risccisc/</a>
</li>

<li>RISC and CISC definitions:<br />
<a href="http://www.cpushack.com/CPU/cpuAppendA.html">http://www.cpushack.com/CPU/cpuAppendA.html</a>
</li>

<li>The Evolution of RISC<br />
<a href="http://www.ibm.com/developerworks/library/pa-microhist.html#sidebar1">http://www.ibm.com/developerworks/library/pa-microhist.html#sidebar1</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

