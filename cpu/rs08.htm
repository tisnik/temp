<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Minimalistické osmibitové mikrořadiče s jádry RS08</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Minimalistické osmibitové mikrořadiče s jádry RS08</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Z osmibitových jader S08, která jsme si popsali minule, byla odvozena další řada jader nazvaná RS08. Tato jádra jsou určena pro výpočetně a paměťově nenáročné aplikace, v nichž je limitujícím faktorem minimální spotřeba.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Minimalistické osmibitové mikrořadiče s&nbsp;jádry RS08</a></p>
<p><a href="#k02">2. Adresní prostor mikrořadičů s&nbsp;jádry RS08</a></p>
<p><a href="#k03">3. Registry implementované v&nbsp;centrální procesorové jednotce</a></p>
<p><a href="#k04">4. Registry mapované do operační paměti</a></p>
<p><a href="#k05">5. Podporované adresovací režimy</a></p>
<p><a href="#k06">6. Instrukční sada jader RS08</a></p>
<p><a href="#k07">7. Aritmetické instrukce</a></p>
<p><a href="#k08">8. Logické instrukce</a></p>
<p><a href="#k09">9. Aritmetické posuny, bitové posuny a rotace</a></p>
<p><a href="#k10">10. Podmíněné i nepodmíněné skoky</a></p>
<p><a href="#k11">11. Instrukce Booleovského procesoru</a></p>
<p><a href="#k12">12. Ostatní operace</a></p>
<p><a href="#k13">13. Časovač a generátor PWM</a></p>
<p><a href="#k14">14. A/D převodník</a></p>
<p><a href="#k15">15. Analogový komparátor</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Minimalistické osmibitové mikrořadiče s&nbsp;jádry RS08</h2>

<p><a
href="https://www.root.cz/clanky/osmibitove-mikroradice-s-jadry-s08-a-rs08/">V&nbsp;předchozím
článku</a> <a href="https://www.root.cz/serialy/co-se-deje-v-pocitaci/">seriálu
o architekturách počítačů a procesorů</a> jsme se seznámili se základními
vlastnostmi i s&nbsp;instrukční sadou osmibitových mikrořadičových jader
<i>S08</i>. Připomeňme si, že tato jádra byla odvozena od starších osmibitových
mikrořadičů <i>Motorola 68HC08</i> a jejich společným prapředkem je slavný
osmibitový mikroprocesor <i>Motorola 6800</i>. Mikrořadiče s&nbsp;jádry
<i>S08</i> nalezneme i v&nbsp;dnešních zařízeních, pochopitelně ovšem
v&nbsp;těch oblastech, kde není vyžadován čip s&nbsp;vysokým výpočetním výkonem
a/nebo velkou kapacitou paměti RAM. Typické čipy postavené na těchto jádrech
mají hodinovou frekvenci mezi 20 MHz až 40 MHz, relativně vysoký počet GPIO (až
20 v&nbsp;závislosti na tom, zda se nepoužije alternativní funkce pinů),
sériové sběrnice SPI a SCI, modul pro PWM (pulsně šířkovou modulaci) a jeden až
dva časovače.</p>

<p>Kvůli požadavkům na dosažení co nejmenší spotřeby a taktéž nízké ceny celého
čipu byla úpravou architektury jader <i>S08</i> vytvořena další řada jader
označovaná <i>RS08</i>. Některé úpravy byly z&nbsp;pohledu programátorů
drastické &ndash; například počet příznakových bitů se snížil ze šesti na pouhé
dva, zmenšila se šířka adresové sběrnice na čtrnáct bitů, kapacita RAM dosahuje
pouze 64, 128 či 256 bajtů atd. Výsledkem jsou jádra, která se používají
v&nbsp;čipech, jenž se někdy s&nbsp;nadhledem (navíc poněkud nepřesně) označují
termínem &bdquo;programovatelné součástky&ldquo;. Podobný segment trhu obsadily
i některé konkurenční čipy, z&nbsp;nichž zmiňme například <a
href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1009&pageId=74">řadu
PIC10</a> či nepatrně výkonnější čipy <a
href="http://www.microchip.com/ParamChartSearch/chart.aspx?branchID=1001">PIC12</a>
(tyto dvě řady osmibitových mikrořadičů jsme si již v&nbsp;tomto seriálu
popsali dříve: <a
href="https://www.root.cz/clanky/osmibitove-mikroradice-pic-2/">[1]</a> a <a
href="https://www.root.cz/clanky/osmibitove-mikroradice-pic-3/">[2])</a>).</p>

<p>V&nbsp;následujících kapitolách si nejprve popíšeme největší rozdíly mezi
jádry S08 a RS08 a následně se zmíníme o typických konfiguracích mikrořadičů i
o jejich periferních modulech.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Adresní prostor mikrořadičů s&nbsp;jádry RS08</h2>

<p>Adresní prostor byl zmenšen z&nbsp;plných 64 kB na pouhých 16 kB. To se
odrazilo na menším čítači instrukcí, který má šířku pouze 14 bitů. Adresní
prostor byl dále rozdělen takovým způsobem, že v&nbsp;prvních čtrnácti bajtech
se nachází takzvaná paměť s&nbsp;rychlým přístupem (<i>fast access RAM</i>), za
ní se nachází registry <strong>X</strong> a <strong>D[X]</strong> (ty jsou tedy
mapovány do paměťového prostoru) a dalších šestnáct bajtů je určeno pro vybrané
řídicí registry. Po těchto třech oblastech nalezneme v&nbsp;adresním prostoru
zbylou část RAM, &bdquo;okno&ldquo; do něhož je možné mapovat jinou paměť (viz
další odstavec), zbylé řídicí registry a na samotném konci adresního prostoru
se nachází oblast s&nbsp;Flash ROM.</p>

<p>Zajímavá je funkce paměťového okna, které nalezneme na adresách 0x00c0 až
0x00ff. Do této oblasti o velikosti 64 bajtů je možné namapovat libovolnou
stránku paměti, přičemž každá stránka má velikost oněch zmíněných 64 bajtů
(celkový počet stránek je 256, takže skutečně získáme celý paměťový rozsah:
64&times;256=16384). Toto řešení bylo vynuceno zmenšením indexového registru na
osm bitů (původně se jednalo o registrový pár H:X), což znamená, že lze
adresovat jen prvních 256 bajtů z&nbsp;adresového prostoru. Výběr paměťové
stránky se provádí zápisem do registru <strong>PAGESEL</strong>.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Registry implementované v&nbsp;centrální procesorové jednotce</h2>

<p>U jader <i>S08</i> měl programátor pracující v&nbsp;assembleru
k&nbsp;dispozici několik registrů, především osmibitový akumulátor
<strong>A</strong>, šestnáctibitový indexový registr <strong>H:X</strong>
složený (jak jeho označení napovídá) ze dvou osmibitových registrů
<strong>H</strong> a <strong>X</strong>, šestnáctibitový ukazatel na vrchol
zásobníku <strong>SP</strong> a taktéž šestnáctibitový programový čítač
<strong>PC</strong>. Kromě toho se v&nbsp;registru pojmenovaném
<strong>CCR</strong> sdružovala šestice příznakových bitů nastavovaná
aritmetickými, logickými a bitovými operacemi, stejně jako bitovými rotacemi a
aritmetickými posuny. Tyto bity a jejich kombinace byly využity zejména pro
provádění podmíněných skoků.</p>

<p>U jednodušších jader <i>RS08</i> došlo k&nbsp;podstatným úpravám i
v&nbsp;této oblasti. Osmibitový akumulátor <strong>A</strong> sice zůstal
zachován, ovšem šířka programového čítače <strong>PC</strong> byla zůžena na
čtrnáct bitů, což mimochodem znamená, že adresovatelný rozsah byl zmenšen na
16384 adres (některé jsou obsazeny RAM, další pamětí ROM, do tohoto rozsahu
jsou mapovány i řídicí registry). Kromě programového čítače <strong>PC</strong>
byl přidán další čtrnáctibitový registr <strong>SPC</strong> neboli <i>Shadow
Program Counter</i>. Do tohoto registru se ukládá návratová adresa při volání
subrutin. Po přečtení tohoto popisu již pravděpodobně tušíte, že jádra
<i>RS08</i> neobsahují žádný zásobník a tudíž ani ukazatel na vrchol zásobníku
<strong>SP</strong>. To, že se pro uložení návratové adresy nepoužívá zásobník,
ale jen jediný registr, de facto znamená, že buď může existovat jen jediná
úroveň zanoření subrutin, nebo je nutné činnost zásobníku nějakým způsobem
emulovat, například explicitním ukládáním a obnovováním návratových adres do
operační paměti.</p>

<p>Počet příznakových bitů uložených do registru <strong>CCR</strong> byl
taktéž snížen, a to dosti drasticky, protože zachovány zůstaly pouhé dva
příznaky &ndash; <i>Zero flag</i> a <i>Carry flag</i>. To mj.&nbsp;znamená, že
na jádrech <i>RS08</i> neexistuje přímá podpora pro výpočty s&nbsp;celými čísly
se znaménkem (základní operace lze provádět, ale nikoli již některé podmínky)
ani s&nbsp;BCD kódem (to by mohlo vadit při ovládání některých displejů či
hodin reálného času &ndash; RTC).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Registry mapované do operační paměti</h2>

<p>V&nbsp;předchozí kapitole jsme se vůbec nezmínili o indexovém registru či
indexových registrech, i když již víme, že existence takových registrů je pro
čipy odvozené od mikroprocesoru <i>Motorola 6800</i> zcela zásadní. Ve
skutečnosti programátoři používající čipy <i>RS08</i> sice mají
k&nbsp;dispozici indexový registr <strong>X</strong>, ten ovšem není realizován
přímo na CPU, ale je mapován do &bdquo;rychlé&ldquo; operační paměti, konkrétně
na adresu 0x000f. Navíc je do operační paměti na adresu 0x000e mapován i
pseudoregistr označovaný <strong>D[X]</strong>. Při čtení či zápisu do tohoto
pseudoregistru se ve skutečnosti provede čtení/zápis do buňky aktuálně
adresované registrem <strong>X</strong>. Toto řešení může připomínat například
čipy 8051 (pracovní registry R0-R7 + &bdquo;index registr&ldquo; nazvaný
<strong>DPTR</strong>) nebo ještě více čipy PIC s&nbsp;pseudoregistrem
<strong>INDF</strong> a registrem <strong>FSR</strong>.</p>

<p>Pro porovnání možností různých čipů odvozených od Motoroly 6800 si zopakujme
tabulku uvedenou v&nbsp;předchozím článku:</p>

<table>
<tr><th>Čip   </th><th>Typ</th><th>Akumulátor(y) </th><th>D=A+B (16b)</th><th>Index registr(y)</th><th>Čítač instrukcí</th><th>Zásobníkové registry</th><th>Spec. registry</th></tr>
<tr><td>MC6800</td><td>CPU</td><td>A (8b), B (8b)</td><td>ne </td><td>X (16b)</td><td>PC (16b)</td><td>SP (16b)</td><td>CCR (6b)</td></tr>
<tr><td>68HC05</td><td>MCU</td><td>A (8b)</td><td>ne </td><td>X (8b)</td><td>PC (13b)</td><td>SP (13b)</td><td>CCR (5b)</td></tr>
<tr><td>68HC08</td><td>MCU</td><td>A (8b)</td><td>ne </td><td>H:X (16b)</td><td>PC (16b)</td><td>SP (16b)</td><td>CCR (6b)</td></tr>
<tr><td>68HC11</td><td>MCU</td><td>A (8b), B (8b)</td><td>ano</td><td>X (16b), Y (16b)</td><td>PC (16b)</td><td>SP (16b)</td><td>CCR (8b)</td></tr>
<tr><td>S08</td><td>MCU</td><td>A (8b)</td><td>ne</td><td>H:X (16b)</td><td>PC (16b)</td><td>SP (16b)</td><td>CCR (6b)</td></tr>
<tr><td>RS08</td><td>MCU</td><td>A (8b)</td><td>ne</td><td>X (8b)</td><td>PC (14b) + SPS (14bit)</td><td>&times;</td><td>CCR (2b)</td></tr>
</table>



<p><a name="k05"></a></p>
<h2 id="k05">5. Podporované adresovací režimy</h2>

<p>Adresovací režimy byly oproti jádrům <i>S08</i> taktéž změněny, a to
následujícím způsobem:</p>

<table>
<tr><th>#</th><th>Název</th><th>Zkratka</th><th>Stručný popis</th></tr>
<tr><td> 1</td><td>Inherent</td><td>INH</td><td>operand je umístěn v&nbsp;registru (nezměněno)</td></tr>
<tr><td> 2</td><td>Relative</td><td>REL</td><td>za instrukcí je osmibitový offset připočtený k&nbsp;PC (nezměněno)</td></tr>
<tr><td> 3</td><td>Immediate</td><td>IMM</td><td>za instrukcí je umístěna 8bit konstanta (16bit není podporován)</td></tr>
<tr><td> 4</td><td>Tiny</td><td>TNY</td><td>přímé adresování prvních 16 bajtů (novinka)</td></tr>
<tr><td> 5</td><td>Short</td><td>SRT</td><td>přímé adresování prvních 32 bajtů (novinka)</td></tr>
<tr><td> 6</td><td>Direct</td><td>DIR</td><td>za instrukcí je umístěna osmibitová adresa do nulté stránky (nezměněno)</td></tr>
<tr><td> 7</td><td>Extended</td><td>EXT</td><td>za instrukcí je umístěna 14bitová absolutní adresa (zmenšeno na 14 bitů)</td></tr>
<tr><td> 8</td><td>Indexed</td><td>IX</td><td>operand je adresován přes D[X] (omezení proti S08)</td></tr>
<tr><td> 9</td><td>Indexed with Post Increment</td><td>IX+</td><td>(neexistuje)</td></tr>
<tr><td>10</td><td>Indexed, 8-Bit Offset</td><td>IX1</td><td>(neexistuje)</td></tr>
<tr><td>11</td><td>Indexed, 16-Bit Offset</td><td>IX2</td><td>(neexistuje)</td></tr>
<tr><td>12</td><td>Indexed, 8-Bit Offset with Post Increment</td><td>IX1+</td><td>(neexistuje)</td></tr>
<tr><td>13</td><td>SP-Relative, 8-Bit Offset</td><td>SP1</td><td>(neexistuje)</td></tr>
<tr><td>14</td><td>SP-Relative, 16-Bit Offset</td><td>SP2</td><td>(neexistuje)</td></tr>
</table>

<p>Adresovací režim <i>Tiny</i> je zajímavý tím, že čtyřbitová adresa je přímo
součástí instrukčního kódu. Totéž platí pro režim <i>Short</i>, který je však
dostupný jen pro několik instrukcí (což dává smysl, protože jediná instrukce
zabere velkou část dostupných operačních kódů).</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instrukční sada jader RS08</h2>

<p>Instrukční sada jader <i>RS08</i> se v&nbsp;několika ohledech odlišuje od
původních jader <i>S08</i>, což je však očekávatelné, zejména s&nbsp;ohledem na
změny v&nbsp;konfiguraci registrů dostupných programátorům i kvůli menšímu
počtu příznakových bitů. Následující kapitoly jsou pojmenovány stejně, jako
tomu bylo <a
href="https://www.root.cz/clanky/osmibitove-mikroradice-s-jadry-s08-a-rs08/">v&nbsp;předchozím
článku</a>, takže si můžete rozdíly mezi instrukčními sadami snadno
porovnat:</p>

<table>
<tr><th>Skupina</th><th>Počet instrukcí</th></tr>
<tr><td><a href="#k07">Aritmetické instrukce</a></td><td>9</td></tr>
<tr><td><a href="#k08">Logické instrukce</a></td><td>4</td></tr>
<tr><td><a href="#k09">Posuny a rotace</a></td><td>5</td></tr>
<tr><td><a href="#k10">Podmíněné a nepodmíněné skoky</a></td><td>12</td></tr>
<tr><td><a href="#k11">Instrukce Booleovského procesoru</a></td><td>4</td></tr>
<tr><td><a href="#k12">Přesuny dat a další operace</a></td><td>15</td></tr>
<tr><th>Celkem:</th><th>49</th></tr>
</table>

<p>Malý počet instrukcí ovšem neznamená, že by mapa operačních kódů 0x00 až
0xff byla prázdná. Především kvůli adresovacím režimům <i>Tiny</i> a
<i>Short</i> jsou naopak prakticky všechny kódy obsazeny (celkem 245 kódů
z&nbsp;256).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Aritmetické instrukce</h2>

<p>Sada aritmetických (a testovacích) instrukcí se zmenšila. Chybí například
instrukce pro násobení a dělení (což je u jader RS08 pochopitelné) i všechny
16bitové instrukce typu <strong>AIS</strong>, <strong>CPHX</strong> apod.:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>ADD</td><td>součet A = A + mem</td></tr>
<tr><td>2</td><td>ADC</td><td>součet A = A + mem + carry</td></tr>
<tr><td>3</td><td>SUB</td><td>rozdíl A = A - mem</td></tr>
<tr><td>4</td><td>SBC</td><td>rozdíl A = A - mem - carry</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>INC</td><td>inkrementace A, X, nebo mem</td></tr>
<tr><td>6</td><td>DEC</td><td>dekrementace A, X, nebo mem</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>CLR</td><td>vynulování A, X, nebo mem</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>8</td><td>CMP</td><td>jako SUB, ale bez změny obsahu registru A</td></tr>
<tr><td>9</td><td>TST</td><td>porovnání A, X nebo mem s&nbsp;nulou</td></tr>
</table>

<p>Poznámka: operace prováděné pouze s&nbsp;registrem <strong>A</strong> či
<strong>X</strong> se ve skutečnosti zapisují ve formě
<strong>&lt;instrukce&gt;A</strong> a <strong>&lt;instrukce&gt;X</strong>, tedy
například <strong>INCA</strong>, <strong>INCX</strong>, <strong>CLRA</strong>,
<strong>TSTX</strong> atd.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Logické instrukce</h2>

<p>Ze skupiny logických instrukcí zmizela instrukce <strong>BIT</strong>,
instrukce <strong>COM</strong> byla redukována pouze na použití
s&nbsp;akumulátorem a ostatní tři instrukce podporují jen dva adresní režimy
(<i>Immediate</i> a <i>Direct</i>); další dva režimy jsou dostupné díky tomu,
že registry <strong>X</strong> a <strong>D[X]</strong> jsou mapovány do
adresního prostoru:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>AND</td><td>logický součin bit po bitu: A = A &amp; mem</td></tr>
<tr><td>2</td><td>ORA</td><td>logické součet bit po bitu: A = A | mem</td></tr>
<tr><td>3</td><td>EOR</td><td>logická nonekvivalence: A = A &oplus; memm</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>COMA</td><td>negace A</td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Aritmetické posuny, bitové posuny a rotace</h2>

<p>Všechny instrukce pro aritmetické i bitové posuny a rotace dokážou operand,
kterým je zde pouze akumulátor (!), posunout o jediný bit. U aritmetických a
logických posunů se přebytečný bit přesouvá do příznaku <i>carry</i>, u obou
instrukcí pro rotaci je <i>carry</i> naopak devátým bitem
v&nbsp;&bdquo;posuvném registru&ldquo;:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>LSLA</td><td>logický posun doleva (lze posouvat jen A)</td></tr>
<tr><td>2</td><td>LSRA</td><td>logický posun doprava (-//-)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>ASLA</td><td>pouze alias k&nbsp;instrukci LSL</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>ROLA</td><td>rotace doleva přes příznak <i>carry</i></td></tr>
<tr><td>5</td><td>RORA</td><td>rotace doprava přes příznak <i>carry</i></td></tr>
</table>

<p>Povšimněte si absence instrukce <strong>ASR/ASRA</strong>, tedy
aritmetického posunu doprava. Ten vlastně nemá valného významu, protože
zpracování celých čísel se znaménkem stejně není podporováno.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Podmíněné i nepodmíněné skoky</h2>

<p>Původní rozsáhlá skupina s&nbsp;podmíněnými a nepodmíněnými skoky se u jader
<i>RS08</i> výrazně zmenšila. Je tomu tak z&nbsp;toho důvodu, že byly
odstraněny příznaky <i>Overflow</i> a <i>Negative</i>, takže velké množství
podmínek vlastně není možné nijak vyhodnotit:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>JMP</td><td>nepodmíněný skok</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>2</td><td>BRA</td><td>nepodmíněný skok</td></tr>
<tr><td>3</td><td>BRN</td><td>v podstatě instrukce NOP</td></tr>
<tr><td>4</td><td>BEQ</td><td>skok za podmínky Z = 1</td></tr>
<tr><td>5</td><td>BNE</td><td>skok za podmínky Z = 0</td></tr>
<tr><td>6</td><td>BCC</td><td>skok za podmínky C = 0</td></tr>
<tr><td>7</td><td>BCS</td><td>skok za podmínky C = 1</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>8</td><td>CBEQ</td><td>skok pokud A = mem</td></tr>
<tr><td>9</td><td>DBNZ</td><td>dekrementace A nebo M se skokem, pokud je výsledek nenulový</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>JSR</td><td>skok do podprogramu</td></tr>
<tr><td>11</td><td>BSR</td><td>relativní skok do podprogramu</td></tr>
<tr><td>12</td><td>RTS</td><td>návrat z&nbsp;podprogramu</td></tr>
</table>

<p>Assemblery navíc rozpoznávají i instrukční aliasy <strong>BHS</strong> a
<strong>BLO</strong>.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Instrukce Booleovského procesoru</h2>

<p>Zajímavé je, že všechny čtyři instrukce Booleovského procesoru zůstaly na
jádrech <i>RS08</i> zachovány. Instrukce <strong>BCLR</strong> a
<strong>BSET</strong> podporují adresovací režim <i>Tiny</i>, což
mj.&nbsp;znamená, že jak adresa bajtu, tak i index bitu 0..7 jsou součástí
jediného instrukčního kódu:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>BCLR</td><td>vynulování bitu v&nbsp;paměti</td></tr>
<tr><td>2</td><td>BSET</td><td>nastavení bitu v&nbsp;paměti</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>BRCLR</td><td>skok, pokud je bit v&nbsp;paměti nulový</td></tr>
<tr><td>4</td><td>BRSET</td><td>skok, pokud je bit v&nbsp;paměti nastavený na 1</td></tr>
</table>



<p><a name="k12"></a></p>
<h2 id="k12">12. Ostatní operace</h2>

<p>Z&nbsp;ostatních operací stojí za zmínku především trojice nových instrukcí
<strong>MOV</strong>, <strong>SHA</strong> a <strong>SLA</strong>. Instrukce
<strong>MOV</strong> umožňuje přesunutí bajtu mezi dvěma místy v&nbsp;operační
paměti (ovšem pouze v&nbsp;rámci prvních 256 bajtů). Díky této instrukci i díky
tomu, že registry <strong>X</strong> a <strong>D[X]</strong> jsou mapovány do
této paměťové oblasti, je umožněna existence pseudoinstrukcí
<strong>LDX</strong>, <strong>STX</strong> a několika adresních režimů.
Instrukce <strong>SHA</strong> a <strong>SLA</strong> představují jedinou
možnost manipulace s&nbsp;návratovou adresou, takže tyto instrukce mohou být
užitečné při softwarové implementaci zásobníku:</p>

<table>
<tr><th> #</th><th>Instrukce</th><th>Stručný popis</th></tr>
<tr><td> 1</td><td>LDA</td><td>načtení bajtu do akumulátoru A</td></tr>
<tr><td> 2</td><td>LDX</td><td>načtení bajtu do index registru X (pseudoinstrukce)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>STA</td><td>uložení akumulátoru do mem</td></tr>
<tr><td> 4</td><td>STX</td><td>uložení index registru X do mem (pseudoinstrukce)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>TAX</td><td>přesun X=A (pseudoinstrukce)</td></tr>
<tr><td> 6</td><td>TXA</td><td>přesun A=X (pseudoinstrukce)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>MOV</td><td>přesun bajtu mezi dvěma adresami v&nbsp;paměti</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>SHA</td><td>prohození horních šesti bitů registru SPC s&nbsp;akumulátorem</td></tr>
<tr><td> 9</td><td>SLA</td><td>prohození dolních osmi bitů registru SPC s&nbsp;akumulátorem</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>NOP</td><td>NOP (na rozdíl od BRN má jen jeden bajt)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>SEC</td><td>nastavení C=1</td></tr>
<tr><td>12</td><td>CLC</td><td>vynulování C=0</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>BGND</td><td>pozastavení běhu programu</td></tr>
<tr><td>14</td><td>WAIT</td><td>čekání na přerušení</td></tr>
<tr><td>15</td><td>STOP</td><td>ukončení běhu programu a čekání na přerušení</td></tr>
</table>



<p><a name="k13"></a></p>
<h2 id="k13">13. Časovač a generátor PWM</h2>

<p>Většina mikrořadičů obsahujících jádro <i>RS08</i> je osazena jedním nebo
dvěma časovači nazvanými TPM, které mohou být použity pro ovládání externích
zařízení (motorů, osvětlení apod.) s&nbsp;využitím PWM (pulsně šířkovou
modulací). Pro každý TPM může být zvolen samostatný zdroj hodinových signálů
&ndash; buď interních (rozvedených přímo na čipu) nebo externích (přivedených
na pin TPMCLK). Hodinový signál může být před přivedením do čítače dělen
konstantou 1, 2, 4 .. 128. Každý TPM má dva kanály, které sice pracují
nezávisle na sobě, ale vždy používají stejný zdroj hodinových signálů.
V&nbsp;případě dvou TPM tedy existují čtyři kanály, kde každý kanál může být
nastaven na jinou funkci:</p>

<ol>

<li>Porovnání hodnoty čítače s&nbsp;nastavenou konstantou (<i>compare</i>).
Časovač a tedy i porovnávaná konstanta (uložená do řídicího registru), mají
šířku 16 bitů.</li>

<li>Zachycení aktuální hodnoty čítače na základě externího signálu
(<i>capture</i>). I v&nbsp;tomto případě se zachytí 16bitová hodnota čítače a
lze specifikovat, na jakou hranu externího signálu se má reagovat:</li>

<li>Reagovat lze na sestupnou hranu, vzestupnou hranu nebo na obě hrany
externího signálu.</li>

<li>Při porovnání (<i>compare</i>) může čítač automaticky nastavit, vynulovat
či znegovat zvolený pin.</li>

<li>Existuje i speciální režim pro pulsně šířkovou modulaci, kdy je možné
specifikovat střídu 0-100%. Tento režim se podobá režimu porovnávání
(<i>compare</i>), kdy se při dosažení nastavené hodnoty změní hodnota
výstupního pinu. Další automatická změna pinu nastane při přetečení časovače.
Samozřejmě lze zvolit polaritu signálu; při přetečení časovače se může signál
přepnout do hodnoty 1 a při dosažení nastavené hodnoty naopak spadnout do
nuly.</li>

<li>Pro všechny události (<i>compare</i>, <i>capture</i>) je možné specifikovat
přerušovací rutinu.</li>

</ol>

<p>Některé čipy obsahují kromě TPM i takzvaný modulo timer (MTIM), který je
taktéž programovatelný a pro nějž lze zvolit různé hodinové signály &ndash;
hodiny použité v&nbsp;CPU, externí hodinový signál, hodinový signál odvozený od
připojeného krystalu &ndash; i různé konstanty, jimiž se hodinový signál dělí
(1, 2, 4, ...256). MTIM je pouze osmibitový, takže obsahuje jen osmibitový
komparátor. Podporovány jsou dva základní režimy činnosti &ndash; kontinuální
čítání a režim porovnání (<i>compare</i>); v&nbsp;obou režimech lze samozřejmě
zvolit, za jakých podmínek (a jestli vůbec) se bude generovat přerušení.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. A/D převodník</h2>

<p>Některé čipy s&nbsp;jádry <i>RS08</i> jsou vybaveny i A/D převodníkem
s&nbsp;(teoretickým) rozlišením dvanáct bitů, ovšem lze ho nakonfigurovat i pro
rozlišení deseti či osmi bitů. Rychlost převodu a režim činnosti (kontinuální
vs.&nbsp;jedno měření) je taktéž konfigurovatelný. Zajímavé je, že existuje
celkem 32 vstupů do A/D převodníku, ovšem na externí piny je většinou vyvedeno
jen osm vstupů a u menších čipů je k&nbsp;dispozici ještě méně pinů. Další
vstupy jsou určeny pro přivedení referenčního napětí, teplotního senzoru atd.
Ovšem interní teplotní senzor není příliš přesný &ndash; bez kalibrace je
přesnost jen &pm;12&deg;C, s&nbsp;kalibrací pak &pm;4,5&deg;C (pro detekci
mezních teplot to však může dostačovat).</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Napěťový komparátor</h2>

<p>Napěťový komparátor pracuje podobně, jako je tomu u mnoha jiných
mikrořadičů. Dochází zde k&nbsp;porovnání dvou napětí, přičemž obě napětí mohou
být přivedena na vstupní piny (ACMP+ a ACMP-), nebo se namísto ACMP+ použije
interně přivedené referenční napětí. Na základě porovnání těchto dvou napětí se
na výstupu komparátoru (ACMPO) objevuje logická jednička či nula (jednička
pokud je napětí mezi ACMP+ a ACMP- kladné, nula v&nbsp;opačném případě,
samozřejmě s&nbsp;přihlédnutím k&nbsp;určité hysterezi, která zde dosahuje cca
15mV). Navíc je možné zvolit, za jakých podmínek dojde ke vzniku přerušení
&ndash; vzestupná hrana, sestupná hrana či libovolná hrana na výstupu
z&nbsp;napěťového komparátoru.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>8-bit S08<br />
<a href="http://www.nxp.com/products/microcontrollers-and-processors/more-processors/8-16-bit-mcus/8-bit-s08:HCS08">http://www.nxp.com/products/microcontrollers-and-processors/more-processors/8-16-bit-mcus/8-bit-s08:HCS08</a>
</li>

<li>S08QB: 8-bit QB MCUs<br />
<a href="http://www.nxp.com/products/microcontrollers-and-processors/more-processors/8-16-bit-mcus/8-bit-s08/8-bit-s08-3.6v-mcus/8-bit-qb-mcus:S08QB">http://www.nxp.com/products/microcontrollers-and-processors/more-processors/8-16-bit-mcus/8-bit-s08/8-bit-s08-3.6v-mcus/8-bit-qb-mcus:S08QB</a>
</li>

<li>8-bit RS08<br />
<a href="http://www.nxp.com/products/microcontrollers-and-processors/more-processors/8-16-bit-mcus/8-bit-rs08:RS08FAMILY">http://www.nxp.com/products/microcontrollers-and-processors/more-processors/8-16-bit-mcus/8-bit-rs08:RS08FAMILY</a>
</li>

<li>Wikipedia: Motorola 68HC05<br />
<a href="http://en.wikipedia.org/wiki/Motorola_68HC05">http://en.wikipedia.org/wiki/Motorola_68HC05</a>
</li>

<li>Wikipedia: Freescale 68HC08<br />
<a href="http://en.wikipedia.org/wiki/68HC08">http://en.wikipedia.org/wiki/68HC08</a>
</li>

<li>Wikipedia: Freescale 68HC11<br />
<a href="http://en.wikipedia.org/wiki/68HC11">http://en.wikipedia.org/wiki/68HC11</a>
</li>

<li>Wikipedia: Freescale 68HC12<br />
<a href="http://en.wikipedia.org/wiki/Freescale_68HC12">http://en.wikipedia.org/wiki/Freescale_68HC12</a>
</li>

<li>HC05 Processor Families<br />
<a href="http://www.freescale.com/webapp/sps/site/overview.jsp?nodeId=01624684498633">http://www.freescale.com/webapp/sps/site/overview.jsp?nodeId=01624684498633</a>
</li>

<li>HC08 Processor Families<br />
<a href="http://www.freescale.com/webapp/sps/site/overview.jsp?nodeId=01624684497663">http://www.freescale.com/webapp/sps/site/overview.jsp?nodeId=01624684497663</a>
</li>

<li>Digital Core Design 68HC08 - HDL IP Core <br />
<a href="http://www.dcd.pl/acore.php?idcore=82">http://www.dcd.pl/acore.php?idcore=82</a>
</li>

<li>Freescale 68HC11<br />
<a href="http://www.freescale.com/webapp/sps/site/taxonomy.jsp?nodeId=01624684498635">http://www.freescale.com/webapp/sps/site/taxonomy.jsp?nodeId=01624684498635</a>
</li>

<li>Lifecycle of a CPU:<br />
<a href="http://www.cpushack.net/life-cycle-of-cpu.html">http://www.cpushack.net/life-cycle-of-cpu.html</a>
</li>

<li>Great Microprocessors of the Past and Present (V 13.4.0)<br />
<a href="http://jbayko.sasktelwebsite.net/cpu.html">http://jbayko.sasktelwebsite.net/cpu.html</a>
</li>

<li>SPI interface tutorial<br />
<a href="http://www.best-microcontroller-projects.com/spi-interface.html">http://www.best-microcontroller-projects.com/spi-interface.html</a></li>

<li>Serial Peripheral Interface Bus<br />
<a href="http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus">http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus</a></li>

<li>What is SPI?<br />
<a href="http://www.fpga4fun.com/SPI1.html">http://www.fpga4fun.com/SPI1.html</a></li>

<li>SPI - A simple implementation<br />
<a href="http://www.fpga4fun.com/SPI2.html">http://www.fpga4fun.com/SPI2.html</a></li>

<li>Bit-banging<br />
<a href="http://en.wikipedia.org/wiki/Bit-banging">http://en.wikipedia.org/wiki/Bit-banging</a></li>

<li>Joint Test Action Group<br />
<a href="http://en.wikipedia.org/wiki/JTAG">http://en.wikipedia.org/wiki/JTAG</a></li>

<li>I<sup>2</sup>C<br />
<a href="http://en.wikipedia.org/wiki/I2C">http://en.wikipedia.org/wiki/I2C</a></li>

<li>I<sup>2</sup> Background<br />
<a href="http://www.microport.tw/blognew.php?blog_no=7#theory">http://www.microport.tw/blognew.php?blog_no=7#theory</a></li>

<li>H8/3802, 38002S, 38004, 38104 (manuály k&nbsp;čipům)<br />
<a href="https://www.renesas.com/en-us/document/hw-manual?hwLayerShowFlg=true&prdLayerId=184&layerName=H8%252F3802%252C%2B38002S%252C%2B38004%252C%2B38104&coronrService=document-prd-search&hwDocUrl=%2Fen-us%2Fdoc%2Fproducts%2Fmpumcu%2F001%2Frej09b0024_h83802.pdf&hashKey=c5e1fa0a18c01e6c789bc7b5c0184ed9">https://www.renesas.com/en-us/document/hw-manual?hwLayerShowFlg=true&prdLayerId=184&layerName=H8%252F3802%252C%2B38002S%252C%2B38004%252C%2B38104&coronrService=document-prd-search&hwDocUrl=%2Fen-us%2Fdoc%2Fproducts%2Fmpumcu%2F001%2Frej09b0024_h83802.pdf&hashKey=c5e1fa0a18c01e6c789bc7b5c0184ed9</a>
</li>

<li>Addressing mode (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Addressing_mode">https://en.wikipedia.org/wiki/Addressing_mode</a>
</li>

<li>Renesas SH Instruction Set Summary<br />
<a href="http://shared-ptr.com/sh_insns.html">http://shared-ptr.com/sh_insns.html</a>
</li>

<li>SH-4 RISC Processor by HITACHI<br />
<a href="http://www.cs.umd.edu/~meesh/cmsc411/website/projects/risc/risc.htm">http://www.cs.umd.edu/~meesh/cmsc411/website/projects/risc/risc.htm</a>
</li>

<li>SH-4 RISC Processor<br />
<a href="http://www.cs.umd.edu/~meesh/cmsc411/website/projects/risc/sh-4.htm">http://www.cs.umd.edu/~meesh/cmsc411/website/projects/risc/sh-4.htm</a>
</li>

<li>SuperH RISC engine Family Features<br />
<a href="https://www.renesas.com/en-us/products/microcontrollers-microprocessors/superh/superh-features.html">https://www.renesas.com/en-us/products/microcontrollers-microprocessors/superh/superh-features.html</a>
</li>

<li>Orthogonal instruction set<br />
<a href="https://en.wikipedia.org/wiki/Orthogonal_instruction_set">https://en.wikipedia.org/wiki/Orthogonal_instruction_set</a>
</li>

<li>An introduction to the TI MSP430 low-power microcontrollers<br />
<a href="http://mspgcc.sourceforge.net/manual/c68.html">http://mspgcc.sourceforge.net/manual/c68.html</a>
</li>

<li>MSP430 LaunchPad Tutorials<br />
<a href="http://processors.wiki.ti.com/index.php/MSP430_LaunchPad_Tutorials">http://processors.wiki.ti.com/index.php/MSP430_LaunchPad_Tutorials</a>
</li>

<li>LaunchPad MSP430 Assembly Language Tutorial<br />
<a href="http://robotics.hobbizine.com/asmlau.html">http://robotics.hobbizine.com/asmlau.html</a>
</li>

<li>TI 16-bit and 32-bit microcontrollers<br />
<a href="http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/overview.page">http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/overview.page</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

