<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Rozšíření instrukční sady F16C, FMA a AVX-512 na platformě x86-64</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Rozšíření instrukční sady F16C, FMA a AVX-512 na platformě x86-64</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Rozšíření instrukční sady F16C, FMA a AVX-512 na platformě x86-64, detekce podpory mikroprocesorem</a></p>
<p><a href="#k02">2. Rozšíření F16C</a></p>
<p><a href="#k03">3. Instrukce přidané v&nbsp;rámci rozšíření F16C</a></p>
<p><a href="#k04">*** 4. Převod vektoru s&nbsp;prvky <i>float</i> na vektor s&nbsp;prvky <i>half</i> a zpět</a></p>
<p><a href="#k05">5. Konverze velkých hodnot, automatický převod na nekonečna</a></p>
<p><a href="#k06">*** 6. Konverze malých hodnot s&nbsp;volbou režimu zaokrouhlení</a></p>
<p><a href="#k07">*** 7. Způsob uložení hodnot typu <i>half float</i></a></p>
<p><a href="#k08">8. Využití 256bitových vektorů při převodech <i>single/float</i> na <i>half float</i> a zpět</a></p>
<p><a href="#k09">*** 9. Rozšíření FMA</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">15. Rozšíření AVX-512</a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Rozšíření instrukční sady F16C, FMA a AVX-512 na platformě x86-64, detekce podpory mikroprocesorem</h2>

<p>V&nbsp;sedmé a současně i předposlední části miniseriálu o podpoře SIMD
operací na platformě x86-64 se seznámíme s&nbsp;rozšířeními instrukční sady,
které se jmenují <i>F16C</i>, <i>FMA</i> a <i>AVX-512</i>. Zejména u
instrukčních sad <i>FMA</i> (přesněji řečeno <i>FMA4</i>) a <i>AVX-512</i> se
již dostáváme k&nbsp;technologiím, která nemusí být dnes používanými
mikroprocesory s&nbsp;architekturou x86-64 podporovány (a to buď proto, že se
jedná o příliš nové instrukce, nebo naopak o instrukce již opuštěné či
využívané jen konkurencí). Prozatím jsme totiž předpokládali, že MMX, SSE i AVX
budou na většině CPU podporovány, ovšem ani u <i>FMA4</i> ani u <i>AVX-512</i>
to není pravda.</p>

<p>Někdy se tedy nevyhneme runtime testu, zda je nějaké rozšíření podporováno
či nikoli. Interně k&nbsp;tomuto účelu slouží instrukce <strong>CPUID</strong>,
ovšem GCC tuto instrukci (a další logiku okolo ní) &bdquo;obaluje&ldquo;
v&nbsp;<i>intrinsic</i> nazvanou <strong>__builtin_cpu_supports</strong>. Této
<i>intrinsic</i> je nutné předat řetězcovou konstantu (skutečně konstantu, ne
například ukazatel do pole řetězců &ndash; takže v&nbsp;programu nepoužívám
smyčku) se zkratkou rozšíření; návratovou hodnotou je pak kladná celočíselná
hodnota v&nbsp;případě, že je rozšíření podporováno a nula, pokud podporováno
není (takže se jedná o klasické céčkovské pravdivostní hodnoty):</p>

<pre>
#include &lt;stdio.h&lt;
&nbsp;
int main(void)
{
    printf("Extension SSE    is %ssupported\n",
           <strong>__builtin_cpu_supports("sse")</strong> ? "" : "un");
    printf("Extension SSE2   is %ssupported\n",
           <strong>__builtin_cpu_supports("sse2")</strong> ? "" : "un");
    printf("Extension SSE3   is %ssupported\n",
           <strong>__builtin_cpu_supports("sse3")</strong> ? "" : "un");
    printf("Extension SSE4.1 is %ssupported\n",
           <strong>__builtin_cpu_supports("sse4.1")</strong> ? "" : "un");
    printf("Extension SSE4.2 is %ssupported\n",
           <strong>__builtin_cpu_supports("sse4.2")</strong> ? "" : "un");
    printf("Extension AVX    is %ssupported\n",
           <strong>__builtin_cpu_supports("avx")</strong> ? "" : "un");
    printf("Extension AVX2   is %ssupported\n",
           <strong>__builtin_cpu_supports("avx2")</strong> ? "" : "un");
    printf("Extension FMA    is %ssupported\n",
           <strong>__builtin_cpu_supports("fma")</strong> ? "" : "un");
    printf("Extension FMA4   is %ssupported\n",
           <strong>__builtin_cpu_supports("fma4")</strong> ? "" : "un");
    return 0;
}
</pre>

<p>V&nbsp;mém případě se po překladu a spuštění výše uvedeného programového
kódu zobrazí tyto informace:</p>

<pre>
Extension SSE    is supported
Extension SSE2   is supported
Extension SSE3   is supported
Extension SSE4.1 is supported
Extension SSE4.2 is supported
Extension AVX    is supported
Extension AVX2   is supported
Extension FMA    is supported
Extension FMA4   is unsupported
</pre>

<p><div class="rs-tip-major">Poznámka: jedná se o tento
mikroprocesor:</div></p>

<pre>
$ <strong>cat /proc/cpuinfo |head -n 21</strong>
&nbsp;
processor       : 0
vendor_id       : GenuineIntel
cpu family      : 6
model           : 142
model name      : Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz
stepping        : 12
microcode       : 0xf0
cpu MHz         : 900.018
cache size      : 8192 KB
physical id     : 0
siblings        : 8
core id         : 0
cpu cores       : 4
apicid          : 0
initial apicid  : 0
fpu             : yes
fpu_exception   : yes
cpuid level     : 22
wp              : yes
flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov
pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb
rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology
nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est
tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt
tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch
cpuid_fault epb invpcid_single ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow
vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms
invpcid mpx rdseed adx smap clflushopt intel_pt xsaveopt xsavec xgetbv1 xsaves
dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp md_clear
flush_l1d arch_capabilities
bugs            : spectre_v1 spectre_v2 spec_store_bypass swapgs taa itlb_multihit srbds mmio_stale_data
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Rozšíření F16C</h2>

<p>Rozšíření <i>F16C</i> obsahuje instrukce určené pro převody mezi vektory,
jejichž prvky jsou typu <i>single/float</i> a <i>half float</i> (přesněji
<i>half precision floating point</i>). Nejsou zde ovšem přítomny instrukce
určené pro výpočty s&nbsp;typy <i>half float</i>, takže se toto rozšíření
používá &bdquo;jen&ldquo; pro načtení vektorů s&nbsp;prvky tohoto typu
z&nbsp;paměti popř.&nbsp;naopak pro uložení hodnot tohoto typu do paměti.
Výpočty budou probíhat s&nbsp;hodnotami <i>single/float</i> nebo <i>double</i>.
Díky tomuto přístupu je rozšíření <i>F16C</i> velmi malé, protože obsahuje
pouhé dvě instrukce <strong>VCVTPH2PS</strong> a <strong>VCVTPS2PH</strong>,
které si popíšeme níže. K&nbsp;čemu se však typ <i>half float</i> používá?</p>

<p>Zatímco výše zmíněné formáty <i>single</i> a <i>double</i> jsou určeny pro
běžné aritmetické výpočty a při správném použití mohou být využity v&nbsp;mnoha
numerických algoritmech, začal být společně s&nbsp;rozšiřováním grafických
akcelerátorů (a později s&nbsp;rozvojem neuronových sítí) vyvíjen tlak na
standardizaci formátů s&nbsp;menší bitovou hloubkou. Je tomu tak z&nbsp;toho
důvodu, že některé operace (již jsme se zmínili o paměti hloubky, ovšem i
operace s&nbsp;barvami pixelů atd.) někdy vyžadují vyšší dynamický rozsah,
ovšem přesnost nemusí být vysoká a více nám záleží na rychlosti provádění
operací.</p>

<p>Dobrým příkladem je dnes již pochopitelně dávno překonaný, ovšem
z&nbsp;hlediska vývoje IT velmi důležitý grafický akcelerátor Voodoo I,
resp.&nbsp;přesněji řečeno způsob implementace jeho paměti hloubky. Do paměti
hloubky (Z-bufferu) je možné ukládat vzdálenosti fragmentů od pozorovatele
(kamery) ve dvou formátech, v&nbsp;obou případech je však každý údaj vždy
uložen na šestnácti bitech. Při použití prvního způsobu se do Z-bufferu
skutečně ukládají vzdálenosti fragmentů, přesněji řečeno celočíselná část
vzdálenosti (výpočty vzdálenosti se provádí přesněji, ale výsledek je při
ukládání zaokrouhlen).</p>

<p>Tento formát ovšem ve skutečnosti není příliš výhodný, protože po projekci
3D scény ze světových souřadnic do prostoru obrazovky není krok mezi
jednotlivými vzdálenostmi konstantní, což vede k&nbsp;vizuálním chybám při
vykreslování (rozlišení pouze 2<sup>16</sup> vzdáleností je v&nbsp;tomto
případě nedostatečné). Z&nbsp;tohoto důvodu se preferuje alternativní způsob
(nazývaný také <i>w-buffer</i>), při němž se do Z-bufferu ukládají převrácené
hodnoty vzdálenosti, a to ve speciálním formátu čísel s&nbsp;pohyblivou řádovou
tečkou (čárkou), který má následující strukturu připomínající formát definovaný
v&nbsp;IEEE 754:</p>

<p>
1.mantissa &times; 2<sup>exponent</sup>
</p>

<p>V&nbsp;tomto formátu je pro mantisu vyhrazeno dvanáct bitů a pro exponent
čtyři bity. Povšimněte si implicitní jedničky před desetinnou tečkou i toho, že
žádný bit není vyhrazen pro uložení znaménka &ndash; vzdálenosti (a samozřejmě
i jejich převrácené hodnoty) jsou vždy kladné. Minimální hodnota, kterou lze
tímto způsobem uložit, je rovna jedničce (0x0000 ~
1.000000000000<sub>2</sub>&times;2<sup>0</sup>), maximální hodnota 65528.0
(0xffff ~ 1.111111111111<sub>2</sub>&times;2<sup>15</sup>).</p>

<p>Podobné &bdquo;krátké&ldquo; formáty čísel s&nbsp;plovoucí řádovou tečkou
jsou v&nbsp;oblasti grafických akcelerátorů velmi oblíbené. NVidia a firma
Microsoft zavedla typ <i>half</i> do jazyka Cg (v&nbsp;roce 2002), ILM
podporuje tento formát pro operace vyžadující velkou dynamiku (rozsah) hodnot
atd.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;některých grafických
akcelerátorech narazíme na formát <i>fp24</i>, který stojí na půl cesty mezi
typem <i>half</i> a <i>single</i>. Ten však není na architektuře x86-64 přímo
podporován.</div></p>

<p>Formát <i>half float</i>, jenž je dnes standardizován v&nbsp;<i>IEEE
754-2008</i>, používá pro ukládání hodnot s&nbsp;plovoucí řádovou čárkou
pouhých šestnáct bitů, tj.&nbsp;dva byty. Maximální hodnota je rovna 65504,
minimální hodnota (větší než nula) přibližně 5,9&times;10<sup>-8</sup>.
Předností tohoto formátu je malá bitová šířka (umožňuje paralelní přenos po
interních sběrnicích GPU) a také větší rychlost zpracování základních operací,
protože pro tak malou bitovou šířku mantisy je možné některé operace
&bdquo;zadrátovat&ldquo; a nepočítat pomocí ALU. Také některé iterativní
výpočty (sin, cos, sqrt) mohou být provedeny rychleji, než v&nbsp;případě
plnohodnotných typů <strong>float</strong> a <strong>single</strong>.</p>

<table>
<tr><td>Celkový počet bitů (bytů):</td><td>16 (2)</td></tr>
<tr><td>Bitů pro znaménko:</td><td>1</td></tr>
<tr><td>Bitů pro exponent:</td><td>5</td></tr>
<tr><td>Bitů pro mantisu:</td><td>10</td></tr>
<tr><td>BIAS (offset exponentu):</td><td>15</td></tr>
<tr><td>Přesnost:</td><td>5-6 číslic</td></tr>
<tr><td>Maximální hodnota:</td><td>65504</td></tr>
<tr><td>Minimální hodnota:</td><td>-65504</td></tr>
<tr><td>Nejmenší kladná nenulová hodnota:</td><td>5,96&times;10<sup>-8</sup></td></tr>
<tr><td>Nejmenší kladná normalizovaná hodnota:</td><td>6,104&times;10<sup>-5</sup></td></tr>
<tr><td>Podpora záporné nuly:</td><td>ano</td></tr>
<tr><td>Podpora +&infin;:</td><td>ano</td></tr>
<tr><td>Podpora -&infin;:</td><td>ano</td></tr>
<tr><td>Podpora NaN:</td><td>ano</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: způsob kódování hodnot si dovysvětlíme
v&nbsp;navazujících kapitolách.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instrukce přidané v&nbsp;rámci rozšíření F16C</h2>

<p>Jak jsme si již řekli <a href="#k02">v&nbsp;předchozí kapitole</a>, byly
v&nbsp;rámci rozšíření <i>F16C</i> přidány pouhé dvě instrukce, které existují
ve dvou variantách &ndash; první varianta je určena pro vektory o šířce 128
bitů a druhá varianta pro vektory o šířce 256 bitů:</p>

<table>
<tr><th>Instrukce</th><th>Operandy</th><th>Stručný popis</th></tr>
<tr><td>VCVTPH2PS</td><td>xmm,xmm (nebo xmm,mem)</td><td>konverze čtyř hodnot typu <i>half</i> na čtyři hodnoty typu <i>single/float</i></td></tr>
<tr><td>VCVTPH2PS</td><td>ymm,xmm (nebo ymm,mem)</td><td>konverze osmi hodnot typu <i>half</i> na osm hodnot typu <i>single/float</i></td></tr>
<tr><td>VCVTPS2PH</td><td>xmm,xmm,imm8 (nebo mem,xmm,imm8)</td><td>konverze čtyř hodnot typu <i>single/float</i> na čtyři hodnoty typu <i>half</i></td></tr>
<tr><td>VCVTPS2PH</td><td>xmm,ymm,imm8 (nebo mem,ymm,imm8)</td><td>konverze osmi hodnot typu <i>single/float</i> na osm hodnot typu <i>half</i></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že čtyři i osm hodnot
typu <i>half</i> se vejde do 128bitových registrů XMMx, kdežto u typu
<i>float</i> je nutné osm hodnot uložit do 256bitového registru YMMx.</div></p>

<p>Celočíselná konstanta <strong>imm8</strong> u obou variant instrukce
<strong>VCVTPS2PH</strong> dovoluje (kromě dalších věcí) specifikovat
zaokrouhlovací režim, protože při konverzi <i>single/float &rarr; half</i>
pochopitelně ztrácíme přesnost:</p>

<table>
<tr><th>Hodnota (bity)</th><th>Význam</th></tr>
<tr><td>00</td><td>zaokrouhlení na nejbližší hodnotu</td></tr>
<tr><td>01</td><td>zaokrouhlení směrem dolů</td></tr>
<tr><td>10</td><td>zaokrouhlení směrem nahoru</td></tr>
<tr><td>11</td><td>odříznutí nižších bitů</td></tr>
</table>



<p><a name="k04"></a></p>
<h2 id="k04">4. Převod vektoru s&nbsp;prvky <i>float</i> na vektor s&nbsp;prvky <i>half</i> a zpět</h2>

<pre>
#include &lt;stdio.h&gt;
#include &lt;immintrin.h&gt;
&nbsp;
int main(void)
{
    __v4sf x = { 0.0, 0.1, 1.0, 3.14 };
    __v8hi half;
    __v4sf y;
    int i;
&nbsp;
    <i>// konverze float -&gt; half</i>
    half = <strong>__builtin_ia32_vcvtps2ph(x, 0)</strong>;
&nbsp;
    <i>// konverze half -&gt; float</i>
    y = <strong>__builtin_ia32_vcvtph2ps(half)</strong>;
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d   %f   %04x   %f\n", i, x[i], half[i], y[i]);
    }
    return 0;
}
</pre>

<pre>
    // konverze float -&gt; half
    half = __builtin_ia32_vcvtps2ph(x, 0);
  28:   c5 f8 28 45 c0          vmovaps xmm0,XMMWORD PTR [rbp-0x40]
  2d:   c4 e3 79 1d c0 00       vcvtps2ph xmm0,xmm0,0x0
  33:   c5 f8 29 45 d0          vmovaps XMMWORD PTR [rbp-0x30],xmm0

    // konverze half -&gt; float
    y = __builtin_ia32_vcvtph2ps(half);
  38:   c5 f9 6f 45 d0          vmovdqa xmm0,XMMWORD PTR [rbp-0x30]
  3d:   c4 e2 79 13 c0          vcvtph2ps xmm0,xmm0
  42:   c5 f8 29 45 e0          vmovaps XMMWORD PTR [rbp-0x20],xmm0
</pre>




<p><a name="k05"></a></p>
<h2 id="k05">5. Konverze velkých hodnot, automatický převod na nekonečna</h2>

<p>Nyní se podívejme na způsob převodu &bdquo;velkých&ldquo; hodnot typu
<i>single/float</i> na typ <i>half float</i> a zpět. Slovo &bdquo;velké&ldquo;
jsem dal do uvozovek z&nbsp;toho důvodu, že ve skutečnosti je maximální
reprezentovatelnou hodnotou pouze 65504. Ostatně se podívejme na následující
demonstrační příklad:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;immintrin.h&gt;
&nbsp;
int main(void)
{
    __v4sf x = { 1e3, 1e4, 1e5, 1e6 };
    __v8hi half;
    __v4sf y;
    int i;
&nbsp;
    <i>// konverze float -&gt; half</i>
    half = <strong>__builtin_ia32_vcvtps2ph(x, 0)</strong>;
&nbsp;
    <i>// konverze half -&gt; float</i>
    y = <strong>__builtin_ia32_vcvtph2ps(half)</strong>;
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d  %7.0f   %04x   %7.0f\n", i, x[i], half[i], y[i]);
    }
    return 0;
}
</pre>

<p>Velmi zajímavý je výsledek, který ukazuje, že hodnoty nad 65504 se korektně
převedou na nekonečno a pochopitelně zůstávají nekonečnem i při zpětném
převodu:</p>

<pre>
 0     1000   63d0      1000
 1    10000   70e2     10000
 2   100000   7c00       inf
 3  1000000   7c00       inf
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Konverze malých hodnot s&nbsp;volbou režimu zaokrouhlení</h2>

<pre>
#include &lt;stdio.h&gt;
#include &lt;immintrin.h&gt;

void print_vectors(__v4sf x, __v4sf y, __v8hi half)
{
    int i;

    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d   %9.8f   %04x   %9.8f\n", i, x[i], half[i], y[i]);
    }

    putchar('\n');
}

int main(void)
{
    __v4sf x = { 5e-4, 5e-5, 5e-6, 5e-7 };
    __v8hi half;
    __v4sf y;

    // round to nearest even
    half = __builtin_ia32_vcvtps2ph(x, 0);
    y = __builtin_ia32_vcvtph2ps(half);
    print_vectors(x, y, half);

    // round down
    half = __builtin_ia32_vcvtps2ph(x, 1);
    y = __builtin_ia32_vcvtph2ps(half);
    print_vectors(x, y, half);

    // round up
    half = __builtin_ia32_vcvtps2ph(x, 2);
    y = __builtin_ia32_vcvtph2ps(half);
    print_vectors(x, y, half);

    // truncate
    half = __builtin_ia32_vcvtps2ph(x, 3);
    y = __builtin_ia32_vcvtph2ps(half);
    print_vectors(x, y, half);

    return 0;
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Způsob uložení hodnot typu <i>half float</i></h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. Využití 256bitových vektorů při převodech <i>single/float</i> na <i>half float</i> a zpět</h2>

<p>Jen pro úplnost se podívejme na dvě zbývající <i>instrinsic</i> nazvané
<strong>__builtin_ia32_vcvtps2ph256</strong> a
<strong>__builtin_ia32_vcvtph2ps256</strong>. Ty jsou určeny pro konverzi prvků
uložených do 256bitových vektorů, což umožňuje provádět paralelní konverze osmi
prvků (oběma směry):</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;immintrin.h&gt;
&nbsp;
int main(void)
{
    __v8sf x = { 0.0, 0.1, 1.0, 3.14, 1e5, 1e10, 1e15, -1e10 };
    __v8hi half;
    __v8sf y;
    int i;
&nbsp;
    <i>// konverze float -&gt; half</i>
    half = __builtin_ia32_vcvtps2ph256(x, 0);
&nbsp;
    <i>// konverze half -&gt; float</i>
    y = __builtin_ia32_vcvtph2ps256(half);
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d   %8.6g   %04hx   %f\n", i, x[i], half[i], y[i]);
    }
    return 0;
}
</pre>

<p>Hodnoty zobrazené po překladu a spuštění tohoto demonstračního příkladu:</p>

<pre>
 0          0   0000   0.000000
 1        0.1   2e66   0.099976
 2          1   3c00   1.000000
 3       3.14   4248   3.140625
 4     100000   7c00   inf
 5      1e+10   7c00   inf
 6      1e+15   7c00   inf
 7     -1e+10   fc00   -inf
</pre>

<p>Překlad do bajtkódu vypadá následovně (povšimněte si, že jeden
z&nbsp;operandů je vždy registr YMMx):</p>

<pre>
    <i>// konverze float -&gt; half</i>
    half = __builtin_ia32_vcvtps2ph256(x, 0);
  3a:   c5 fc 28 45 90          vmovaps ymm0,YMMWORD PTR [rbp-0x70]
  3f:   c4 e3 7d 1d c0 00       <strong>vcvtps2ph xmm0,ymm0,0x0</strong>
  45:   c5 f8 29 45 80          vmovaps XMMWORD PTR [rbp-0x80],xmm0
&nbsp;
    <i>// konverze half -&gt; float</i>
    y = __builtin_ia32_vcvtph2ps256(half);
  4a:   c5 f9 6f 45 80          vmovdqa xmm0,XMMWORD PTR [rbp-0x80]
  4f:   c4 e2 7d 13 c0          <strong>vcvtph2ps ymm0,xmm0</strong>
  54:   c5 fc 29 45 b0          vmovaps YMMWORD PTR [rbp-0x50],ymm0
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Rozšíření AVX-512</h2>

<p>V&nbsp;závěrečné části dnešního článku se zmíníme o rozšíření instrukční
sady nazvané <i>AVX-512</i>. Jak již název tohoto rozšíření částečně napovídá,
jedná se o vylepšení (či možná v&nbsp;tomto případě spíše
&bdquo;vylepšení&ldquo;) rozšíření AVX a AVX2 (<i>Advanced Vector
Extensions</i>), s&nbsp;nímž jsme se ve stručnosti seznámili <a
href="https://www.root.cz/clanky/rozsireni-instrukcni-sady-advanced-vector-extensions-na-platforme-x86-64/">v&nbsp;předchozím
článku</a>. Současně nám <i>AVX-512</i> naznačuje, že se šířka zpracovávaných
vektorů opět rozšířila, a to z&nbsp;256 bitů na celých 512 bitů. To však není
vše, protože došlo i k&nbsp;rozšíření počtu vektorových registrů, což může vést
k&nbsp;urychlení výpočtů, ale současně se za toto rozšíření &bdquo;platí&ldquo;
zdroji na mikroprocesoru (obsazená plocha na čipu + počet použitých
tranzistorů):</p>

<table>
<tr><th>#</th><th>Typ registrů</th><th>Počet registrů (x86)</th><th>Počet registrů (x86-64)</th><th>Bitová šířka registru</th><th>Jména registrů</th></tr>
<tr><td>1</td><td>Pracovní registry MMX</td><td>8</td><td>8</td><td>64 bitů</td><td>MM0 .. MM7</td></tr>
<tr><td>2</td><td>Pracovní registry SSE</td><td>8</td><td>16</td><td>128 bitů</td><td>XMM0 .. XMM7 (XMM15)</td></tr>
<tr><td>3</td><td>Pracovní registry AVX</td><td>8</td><td>16</td><td>256 bitů</td><td>YMM0 .. YMM7 (YMM15)</td></tr>
<tr><td>4</td><td>Pracovní registry AVX-512</td><td>8</td><td>32</td><td>512 bitů</td><td>ZMM0 .. ZMM31</td></tr>
</table>

<p>Z&nbsp;výše uvedené tabulky, s&nbsp;níž jsme se již ostatně seznámili
minule, je patrný dramatický skok v&nbsp;případě AVX-512, kdy se zdvojnásobil
(zečtyřnásobil) počet registrů a současně se i zdvojnásobila jejich bitová
šířka. Ve skutečnosti vznikly nové registry <i>AVX</i> se jmény
<strong>YMMx</strong> i registry <i>AVX-512</i> se jmény <strong>ZMMx</strong>
rozšířením registrů <i>SSE</i> na 256 nebo 512 bitů a přidáním nových registrů.
To například znamená, že operace s&nbsp;registrem <strong>XMM0</strong> ve
skutečnosti může změnit spodních 128 bitů registru <strong>YMM0</strong> i
<strong>ZMM0</strong>:</p>

<table>
<tr><th>512..256</th><th>255..128</th><th>127..0</th></tr>
<tr><td> ZMM0</td><td> YMM0</td><td> XMM0</td></tr>
<tr><td> ZMM1</td><td> YMM1</td><td> XMM1</td></tr>
<tr><td> ZMM2</td><td> YMM2</td><td> XMM2</td></tr>
<tr><td> ZMM3</td><td> YMM3</td><td> XMM3</td></tr>
<tr><td> ZMM4</td><td> YMM4</td><td> XMM4</td></tr>
<tr><td> ZMM5</td><td> YMM5</td><td> XMM5</td></tr>
<tr><td> ZMM6</td><td> YMM6</td><td> XMM6</td></tr>
<tr><td> ZMM7</td><td> YMM7</td><td> XMM7</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> ZMM8</td><td> YMM8</td><td> XMM8</td></tr>
<tr><td> ZMM9</td><td> YMM9</td><td> XMM9</td></tr>
<tr><td>ZMM10</td><td>YMM10</td><td>XMM10</td></tr>
<tr><td>ZMM11</td><td>YMM11</td><td>XMM11</td></tr>
<tr><td>ZMM12</td><td>YMM12</td><td>XMM12</td></tr>
<tr><td>ZMM13</td><td>YMM13</td><td>XMM13</td></tr>
<tr><td>ZMM14</td><td>YMM14</td><td>XMM14</td></tr>
<tr><td>ZMM15</td><td>YMM15</td><td>XMM15</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>ZMM16</td><td>YMM16</td><td>XMM16</td></tr>
<tr><td>ZMM17</td><td>YMM17</td><td>XMM17</td></tr>
<tr><td>ZMM18</td><td>YMM18</td><td>XMM18</td></tr>
<tr><td>ZMM19</td><td>YMM19</td><td>XMM19</td></tr>
<tr><td>ZMM20</td><td>YMM20</td><td>XMM20</td></tr>
<tr><td>ZMM21</td><td>YMM21</td><td>XMM21</td></tr>
<tr><td>ZMM22</td><td>YMM22</td><td>XMM22</td></tr>
<tr><td>ZMM23</td><td>YMM23</td><td>XMM23</td></tr>
<tr><td>ZMM24</td><td>YMM24</td><td>XMM24</td></tr>
<tr><td>ZMM25</td><td>YMM25</td><td>XMM25</td></tr>
<tr><td>ZMM26</td><td>YMM26</td><td>XMM26</td></tr>
<tr><td>ZMM27</td><td>YMM27</td><td>XMM27</td></tr>
<tr><td>ZMM28</td><td>YMM28</td><td>XMM28</td></tr>
<tr><td>ZMM29</td><td>YMM29</td><td>XMM29</td></tr>
<tr><td>ZMM30</td><td>YMM30</td><td>XMM30</td></tr>
<tr><td>ZMM31</td><td>YMM31</td><td>XMM31</td></tr>
</table>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
avx5124fmapsintrin.h
avx5124vnniwintrin.h
avx512bitalgintrin.h
avx512bwintrin.h
avx512cdintrin.h
avx512dqintrin.h
avx512erintrin.h
avx512fintrin.h
avx512ifmaintrin.h
avx512ifmavlintrin.h
avx512pfintrin.h
avx512vbmi2intrin.h
avx512vbmi2vlintrin.h
avx512vbmiintrin.h
avx512vbmivlintrin.h
avx512vlbwintrin.h
avx512vldqintrin.h
avx512vlintrin.h
avx512vnniintrin.h
avx512vnnivlintrin.h
avx512vpopcntdqintrin.h
avx512vpopcntdqvlintrin.h
</pre>

<table>
<tr><th>Množina instrukcí</th><th>Plné jméno</th><th>První procesor s&nbsp;implementací</th></tr>
<tr><td>F</td><td>AVX-512 Foundation</td><td>Xeon Phi x200 (Knights Landing), Xeon Gold/Platinum</td></tr>
<tr><td>CD</td><td>AVX-512 Conflict Detection Instructions</td><td>Xeon Phi x200 (Knights Landing), Xeon Gold/Platinum</td></tr>
<tr><td>ER</td><td>AVX-512 Exponential and Reciprocal Instructions</td><td>Xeon Phi x200 (Knights Landing)</td></tr>
<tr><td>PF</td><td>AVX-512 Prefetch Instructions</td><td>Xeon Phi x200 (Knights Landing)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>VL</td><td>AVX-512 Vector Length Extensions</td><td>Skylake X, Cannon Lake</td></tr>
<tr><td>DQ</td><td>AVX-512 Doubleword and Quadword Instructions</td><td>Skylake X, Cannon Lake</td></tr>
<tr><td>BW</td><td>AVX-512 Byte and Word Instructions</td><td>Skylake X, Cannon Lake</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>IFMA</td><td>AVX-512 Integer Fused Multiply Add</td><td>Cannon Lake</td></tr>
<tr><td>VBMI</td><td>AVX-512 Vector Byte Manipulation Instructions</td><td>Cannon Lake</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4VNNIW</td><td>AVX-512 Vector Neural Network Instructions Word variable precision</td><td>Knights Mill</td></tr>
<tr><td>4FMAPS</td><td>AVX-512 Fused Multiply Accumulation Packed Single precision</td><td>Knights Mill</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>VPOPCNTDQ</td><td>Vector population count instruction</td><td>Knights Mill, Ice Lake</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>VNNI</td><td>AVX-512 Vector Neural Network Instructions</td><td>Ice Lake</td></tr>
<tr><td>VBMI2</td><td>AVX-512 Vector Byte Manipulation Instructions 2</td><td>Ice Lake</td></tr>
<tr><td>BITALG</td><td>AVX-512 Bit Algorithms</td><td>Ice Lake</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>VP2INTERSECT</td><td>AVX-512 Vector Pair Intersection to a Pair of Mask Registers</td><td>Tiger Lake</td></tr>
</table>

<pre>
#include &lt;stdio.h&gt;

int main(void) {
    printf("Extension SSE    is %ssupported\n", __builtin_cpu_supports("sse") ? "" : "un");
    printf("Extension SSE2   is %ssupported\n", __builtin_cpu_supports("sse2") ? "" : "un");
    printf("Extension SSE3   is %ssupported\n", __builtin_cpu_supports("sse3") ? "" : "un");
    printf("Extension SSE4.1 is %ssupported\n", __builtin_cpu_supports("sse4.1") ? "" : "un");
    printf("Extension SSE4.2 is %ssupported\n", __builtin_cpu_supports("sse4.2") ? "" : "un");
    printf("Extension AVX    is %ssupported\n", __builtin_cpu_supports("avx") ? "" : "un");
    printf("Extension AVX2   is %ssupported\n", __builtin_cpu_supports("avx2") ? "" : "un");
    printf("Extension FMA    is %ssupported\n", __builtin_cpu_supports("fma") ? "" : "un");
    printf("Extension FMA4   is %ssupported\n", __builtin_cpu_supports("fma4") ? "" : "un");
    putchar('\n');

    printf("Extension AVX512F         is %ssupported\n", __builtin_cpu_supports("avx512f") ? "" : "un");
    printf("Extension AVX512VL        is %ssupported\n", __builtin_cpu_supports("avx512vl") ? "" : "un");
    printf("Extension AVX512BW        is %ssupported\n", __builtin_cpu_supports("avx512bw") ? "" : "un");
    printf("Extension AVX512DQ        is %ssupported\n", __builtin_cpu_supports("avx512dq") ? "" : "un");
    printf("Extension AVX512CD        is %ssupported\n", __builtin_cpu_supports("avx512cd") ? "" : "un");
    printf("Extension AVX512ER        is %ssupported\n", __builtin_cpu_supports("avx512er") ? "" : "un");
    printf("Extension AVX512PF        is %ssupported\n", __builtin_cpu_supports("avx512pf") ? "" : "un");
    printf("Extension AVX512VBMI      is %ssupported\n", __builtin_cpu_supports("avx512vbmi") ? "" : "un");
    printf("Extension AVX512IFMA      is %ssupported\n", __builtin_cpu_supports("avx512ifma") ? "" : "un");
    printf("Extension AVX5124VNNIW    is %ssupported\n", __builtin_cpu_supports("avx5124vnniw") ? "" : "un");
    printf("Extension AVX5124FMAPS    is %ssupported\n", __builtin_cpu_supports("avx5124fmaps") ? "" : "un");
    printf("Extension AVX512VPOPCNTDQ is %ssupported\n", __builtin_cpu_supports("avx512vpopcntdq") ? "" : "un");
    printf("Extension AVX512VBMI2     is %ssupported\n", __builtin_cpu_supports("avx512vbmi2") ? "" : "un");
    printf("Extension AVX512BITALG    is %ssupported\n", __builtin_cpu_supports("avx512bitalg") ? "" : "un");
    return 0;
}
</pre>

<pre>
Extension SSE    is supported
Extension SSE2   is supported
Extension SSE3   is supported
Extension SSE4.1 is supported
Extension SSE4.2 is supported
Extension AVX    is supported
Extension AVX2   is supported
Extension FMA    is supported
Extension FMA4   is unsupported

Extension AVX512F         is unsupported
Extension AVX512VL        is unsupported
Extension AVX512BW        is unsupported
Extension AVX512DQ        is unsupported
Extension AVX512CD        is unsupported
Extension AVX512ER        is unsupported
Extension AVX512PF        is unsupported
Extension AVX512VBMI      is unsupported
Extension AVX512IFMA      is unsupported
Extension AVX5124VNNIW    is unsupported
Extension AVX5124FMAPS    is unsupported
Extension AVX512VPOPCNTDQ is unsupported
Extension AVX512VBMI2     is unsupported
Extension AVX512BITALG    is unsupported
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Možné režimy SIMD</h2>

Name    Extension sets  Registers       Types
SSE            SSE-SSE4.2 xmm0–xmm15  single floats. From SSE2: bytes, words, doublewords, quadwords and double floats.
AVX-128 (VEX)  AVX, AVX2  xmm0–xmm15  byte, word, doubleword, quadword, single/float, double
AVX-256 (VEX)  AVX, AVX2  ymm0–ymm15  single/float, double. From AVX2: byte, word, doubleword, quadword
AVX-128 (EVEX) AVX-512VL  xmm0–xmm31 (k0–k7)  doubleword, quadword, single/float, double. AVX512BW: byte, word. AVX512-FP16: half float
AVX-256 (EVEX) AVX-512VL  ymm0–ymm31 (k0–k7)  doubleword, quadword, single/float, double. AVX512BW: byte, word. AVX512-FP16: half float
AVX-512 (EVEX) AVX-512F   zmm0–zmm31 (k0–k7)  doubleword, quadword, single/float, double. AVX512BW: byte, word. AVX512-FP16: half float


<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;jazyku C, které jsou určené pro překlad
pomocí překladače <strong>GCC C</strong>, byly uložen do Git repositáře, který
je dostupný na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již velmi rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>simd01.c</td><td>vektor celých čísel typu <strong>short int</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd01.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd01.c</a></td></tr>
<tr><td> 2</td><td>simd02.c</td><td>ukázka použití vektorů s&nbsp;celočíselnými typy bez znaménka</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd02.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd02.c</a></td></tr>
<tr><td> 3</td><td>simd03.c</td><td>ukázka použití vektorů s&nbsp;celočíselnými typy se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd03.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd03.c</a></td></tr>
<tr><td> 4</td><td>simd04.c</td><td>paralelní součet celočíselných prvků vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd04.c</a></td></tr>
<tr><td> 5</td><td>simd04B.c</td><td>úprava pro další datové typy</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B.c</a></td></tr>
<tr><td> 6</td><td>simd05.c</td><td>přístup k&nbsp;jednotlivým prvkům vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05.c</a></td></tr>
<tr><td> 7</td><td>simd05B.c</td><td>korektnější výpočet počtu prvků vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05B.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05B.c</a></td></tr>
<tr><td> 8</td><td>simd05C.c</td><td>definice typu vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05C.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05C.c</a></td></tr>
<tr><td> 9</td><td>simd06.c</td><td>vektor čísel s&nbsp;plovoucí řádovou čárkou</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd06.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd06.c</a></td></tr>
<tr><td>10</td><td>simd07.c</td><td>paralelní součet prvků vektorů (typ <strong>float</strong>)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd07.c</a></td></tr>
<tr><td>11</td><td>simd08.c</td><td>paralelní součet prvků vektorů (typ <strong>double</strong>)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd08.c</a></td></tr>
<tr><td>12</td><td>simd09.c</td><td>překročení délky vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd09.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd09.c</a></td></tr>
<tr><td>13</td><td>simd10.c</td><td>přístup k&nbsp;jednotlivým prvkům vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd10.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd10.c</a></td></tr>
<tr><td>14</td><td>simd11.c</td><td>překročení délky vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd11.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd11.c</a></td></tr>
<tr><td>15</td><td>simd12.c</td><td>dlouhý vektor s&nbsp;256 bajty</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd12.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>simd13.c</td><td>operace součtu pro vektory s&nbsp;celočíselnými prvky rozličné bitové šířky bez znaménka</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd13.c</a></td></tr>
<tr><td>17</td><td>simd14.c</td><td>operace součtu pro vektory s&nbsp;celočíselnými prvky rozličné bitové šířky se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd14.c</a></td></tr>
<tr><td>18</td><td>simd15.c</td><td>operace součtu pro vektory s&nbsp;prvky rozličné bitové šířky s&nbsp;plovoucí řádovou čárkou</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd15.c</a></td></tr>
<tr><td>19</td><td>simd16.c</td><td>operace součtu pro dlouhé vektory s&nbsp;prvky rozličné bitové šířky s&nbsp;plovoucí řádovou čárkou</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd16.c</a></td></tr>
<tr><td>20</td><td>simd17.c</td><td>všechny podporované binární operace nad vektory s&nbsp;celočíselnými prvky se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd17.c</a></td></tr>
<tr><td>21</td><td>simd18.c</td><td>všechny podporované binární operace nad vektory s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd18.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>intrinsic_mmx_1.c</td><td>intrinsic pro technologii MMX: instrukce <strong>paddb</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_1.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_1.c</a></td></tr>
<tr><td>24</td><td>intrinsic_mmx_2.c</td><td>intrinsic pro technologii MMX: instrukce <strong>paddw</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_2.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_2.c</a></td></tr>
<tr><td>25</td><td>intrinsic_mmx_3.c</td><td>intrinsic pro technologii MMX: instrukce <strong>paddb</strong> (přetečení)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_3.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_3.c</a></td></tr>
<tr><td>26</td><td>intrinsic_mmx_4.c</td><td>intrinsic pro technologii MMX: instrukce <strong>paddsb</strong> (saturace)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_4.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_4.c</a></td></tr>
<tr><td>27</td><td>intrinsic_mmx_5.c</td><td>intrinsic pro technologii MMX: instrukce <strong>pupckhbw</strong> (kombinace dvou vektorů)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_5.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_5.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>28</td><td>intrinsic_sse_1.c</td><td>součet dvou vektorů s&nbsp;šestnácti prvky typu <strong>char</strong> instrukcí <strong>paddb128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_1.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_1.c</a></td></tr>
<tr><td>29</td><td>intrinsic_sse_2.c</td><td>součet dvou vektorů s&nbsp;osmi prvky typu <strong>short</strong> instrukcí <strong>paddw128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_2.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_2.c</a></td></tr>
<tr><td>30</td><td>intrinsic_sse_3.c</td><td>součet dvou vektorů se čtyřmi prvky typu <strong>int</strong> instrukcí <strong>paddd128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_3.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_3.c</a></td></tr>
<tr><td>31</td><td>intrinsic_sse_4.c</td><td>součet dvou vektorů se dvěma prvky typu <strong>long</strong> instrukcí <strong>paddq128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_4.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_4.c</a></td></tr>
<tr><td>32</td><td>intrinsic_sse_5.c</td><td>součet dvou vektorů se čtyřmi prvky typu <strong>float</strong> instrukcí <strong>addps</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_5.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_5.c</a></td></tr>
<tr><td>33</td><td>intrinsic_sse_6.c</td><td>součet dvou vektorů se dvěma prvky typu <strong>double</strong> instrukcí <strong>addpd</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_6.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_6.c</a></td></tr>
<tr><td>34</td><td>intrinsic_sse_7.c</td><td>porovnání celočíselných prvků instrukcemi <strong>pcmpeqb128</strong> a <strong>pcmpgtb128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_7.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_7.c</a></td></tr>
<tr><td>35</td><td>intrinsic_sse_8.c</td><td>všech šest relačních operací pro vektory s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_8.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_8.c</a></td></tr>
<tr><td>36</td><td>intrinsic_sse_9.c</td><td>unární operace pro výpočet převrácené hodnoty, druhé odmocniny a převrácené hodnoty druhé odmocniny</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_9.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_9.c</a></td></tr>
<tr><td>37</td><td>intrinsic_sse_A.c</td><td>instrukce <strong>shufps</strong> a její intrinsic</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_A.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_A.c</a></td></tr>
<tr><td>38</td><td>intrinsic_sse_B.c</td><td>instrukce <strong>unpckhps</strong> a <strong>unpcklps</strong> a jejich intrinsics</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_B.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_B.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>39</td><td>simd19.c</td><td>operace součtu vektorů o délce 256 bitů s&nbsp;celočíselnými prvky bez znaménka</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd19.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd19.c</a></td></tr>
<tr><td>40</td><td>simd20.c</td><td>operace součtu vektorů o délce 256 bitů s&nbsp;celočíselnými prvky se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd20.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd20.c</a></td></tr>
<tr><td>41</td><td>simd21.c</td><td>operace součtu vektorů o délce 256 bitů s&nbsp;prvky typu <i>float</i> a <i>double</i></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd21.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd21.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>42</td><td>test_extensions.c</td><td>test, které instrukční sady mikroprocesor podporuje</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/test_extensions.c">https://github.com/tisnik/presentations/blob/master/SIMD/test_extensions.c</a></td></tr>
<tr><td>43</td><td>test_avx512_extensions.c</td><td>test, které instrukční sady mikroprocesor podporuje, rozšíření o AVX-512</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/test_avx512_extensions.c">https://github.com/tisnik/presentations/blob/master/SIMD/test_avx512_extensions</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>44</td><td>intrinsic_f16c_1.c</td><td>převod 128bitového vektoru s&nbsp;prvky typu <i>float</i> na <i>half</i> a zpět</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_1.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_1.c</a></td></tr>
<tr><td>45</td><td>intrinsic_f16c_2.c</td><td>převod 128bitového vektoru s&nbsp;prvky typu <i>float</i> na <i>half</i> a zpět, zpracování velkých hodnot</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_2.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_2.c</a></td></tr>
<tr><td>46</td><td>intrinsic_f16c_3.c</td><td>převod 128bitového vektoru s&nbsp;prvky typu <i>float</i> na <i>half</i> s&nbsp;volbou režimu zaokrouhlení</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_3.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_3.c</a></td></tr>
<tr><td>47</td><td>intrinsic_f16c_4.c</td><td>převod 256bitového vektoru s&nbsp;prvky typu <i>float</i> na <i>half</i> a zpět</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_4.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_4.c</a></td></tr>
<tr><td>48</td><td>intrinsic_fma3_1.c</td><td>využití instrukce pro provedení vektorové operace x = a*b+c</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_1.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_1.c</a></td></tr>
<tr><td>49</td><td>intrinsic_fma3_2.c</td><td>dtto, ale pro odlišné hodnoty</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_2.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_2.c</a></td></tr>
<tr><td>50</td><td>intrinsic_fma3_3.c</td><td>dtto, ale vynásobení maximálními možnými FP hodnotami</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_3.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_3.c</a></td></tr>
<tr><td>51</td><td>intrinsic_fma3_4.c</td><td>využití instrukce pro provedení vektorové operace x = -a*b+c</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_4.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_4.c</a></td></tr>
<tr><td>52</td><td>intrinsic_fma3_5.c</td><td>využití instrukce pro provedení vektorové operace x = a*b-c</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_5.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_5.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>53</td><td>Makefile</td><td>Makefile pro překlad všech výše uvedených demonstračních příkladů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/Makefile">https://github.com/tisnik/presentations/blob/master/SIMD/Makefile</a></td></tr>
</table>

<p>Soubory vzniklé překladem z&nbsp;jazyka C do assembleru procesorů x86-64:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>simd04_1.lst</td><td>překlad zdrojového kódu <strong>simd04_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04_1.lst</a></td></tr>
<tr><td> 2</td><td>simd04_2.lst</td><td>překlad zdrojového kódu <strong>simd04_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04_2.lst</a></td></tr>
<tr><td> 3</td><td>simd04B_1.lst</td><td>překlad zdrojového kódu <strong>simd04B_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_1.lst</a></td></tr>
<tr><td> 4</td><td>simd04B_2.lst</td><td>překlad zdrojového kódu <strong>simd04B_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_2.lst</a></td></tr>
<tr><td> 5</td><td>simd07_1.lst</td><td>překlad zdrojového kódu <strong>simd07_1.c</strong> s&nbsp;přepínači <strong>-mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd07_1.lst</a></td></tr>
<tr><td> 6</td><td>simd07_2.lst</td><td>překlad zdrojového kódu <strong>simd07_2.c</strong> s&nbsp;přepínači <strong>-g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd07_2.lst</a></td></tr>
<tr><td> 7</td><td>simd08_1.lst</td><td>překlad zdrojového kódu <strong>simd08_1.c</strong> s&nbsp;přepínači <strong>-mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd08_1.lst</a></td></tr>
<tr><td> 8</td><td>simd08_2.lst</td><td>překlad zdrojového kódu <strong>simd08_2.c</strong> s&nbsp;přepínači <strong>-g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd08_2.lst</a></td></tr>
<tr><td> 9</td><td>simd12_1.lst</td><td>překlad zdrojového kódu <strong>simd12_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g </strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd12_1.lst</a></td></tr>
<tr><td>10</td><td>simd12_2.lst</td><td>překlad zdrojového kódu <strong>simd12_2.c</strong> s&nbsp;přepínači <strong>-O0 -g </strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd12_2.lst</a></td></tr>
<tr><td>11</td><td>simd13_1.lst</td><td>překlad zdrojového kódu <strong>simd13_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_1.lst</a></td></tr>
<tr><td>12</td><td>simd13_2.lst</td><td>překlad zdrojového kódu <strong>simd13_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_2.lst</a></td></tr>
<tr><td>13</td><td>simd13_3.lst</td><td>překlad zdrojového kódu <strong>simd13_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_3.lst</a></td></tr>
<tr><td>14</td><td>simd13_4.lst</td><td>překlad zdrojového kódu <strong>simd13_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_4.lst</a></td></tr>
<tr><td>15</td><td>simd14_1.lst</td><td>překlad zdrojového kódu <strong>simd14_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_1.lst</a></td></tr>
<tr><td>16</td><td>simd14_2.lst</td><td>překlad zdrojového kódu <strong>simd14_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_2.lst</a></td></tr>
<tr><td>17</td><td>simd14_3.lst</td><td>překlad zdrojového kódu <strong>simd14_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_3.lst</a></td></tr>
<tr><td>18</td><td>simd14_4.lst</td><td>překlad zdrojového kódu <strong>simd14_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_4.lst</a></td></tr>
<tr><td>19</td><td>simd15_1.lst</td><td>překlad zdrojového kódu <strong>simd15_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_1.lst</a></td></tr>
<tr><td>20</td><td>simd15_2.lst</td><td>překlad zdrojového kódu <strong>simd15_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_2.lst</a></td></tr>
<tr><td>21</td><td>simd15_3.lst</td><td>překlad zdrojového kódu <strong>simd15_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_3.lst</a></td></tr>
<tr><td>22</td><td>simd15_4.lst</td><td>překlad zdrojového kódu <strong>simd15_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_4.lst</a></td></tr>
<tr><td>23</td><td>simd16_1.lst</td><td>překlad zdrojového kódu <strong>simd16_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_1.lst</a></td></tr>
<tr><td>24</td><td>simd16_2.lst</td><td>překlad zdrojového kódu <strong>simd16_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_2.lst</a></td></tr>
<tr><td>25</td><td>simd16_3.lst</td><td>překlad zdrojového kódu <strong>simd16_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_3.lst</a></td></tr>
<tr><td>26</td><td>simd16_4.lst</td><td>překlad zdrojového kódu <strong>simd16_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_4.lst</a></td></tr>
<tr><td>27</td><td>simd17_1.lst</td><td>překlad zdrojového kódu <strong>simd17_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_1.lst</a></td></tr>
<tr><td>28</td><td>simd17_2.lst</td><td>překlad zdrojového kódu <strong>simd17_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_2.lst</a></td></tr>
<tr><td>29</td><td>simd17_3.lst</td><td>překlad zdrojového kódu <strong>simd17_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_3.lst</a></td></tr>
<tr><td>30</td><td>simd17_4.lst</td><td>překlad zdrojového kódu <strong>simd17_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_4.lst</a></td></tr>
<tr><td>31</td><td>simd18_1.lst</td><td>překlad zdrojového kódu <strong>simd18_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_1.lst</a></td></tr>
<tr><td>32</td><td>simd18_2.lst</td><td>překlad zdrojového kódu <strong>simd18_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_2.lst</a></td></tr>
<tr><td>33</td><td>simd18_3.lst</td><td>překlad zdrojového kódu <strong>simd18_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_3.lst</a></td></tr>
<tr><td>34</td><td>simd18_4.lst</td><td>překlad zdrojového kódu <strong>simd18_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_4.lst</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>35</td><td>intrinsic_mmx_1.lst</td><td>překlad zdrojového kódu <strong>intrinsic_mmx_1.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_1.lst</a></td></tr>
<tr><td>36</td><td>intrinsic_mmx_2.lst</td><td>překlad zdrojového kódu <strong>intrinsic_mmx_2.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_2.lst</a></td></tr>
<tr><td>37</td><td>intrinsic_mmx_3.lst</td><td>překlad zdrojového kódu <strong>intrinsic_mmx_3.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_3.lst</a></td></tr>
<tr><td>39</td><td>intrinsic_mmx_5.lst</td><td>překlad zdrojového kódu <strong>intrinsic_mmx_5.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_5.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_5.lst</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>40</td><td>intrinsic_sse_1.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_1.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_1.lst</a></td></tr>
<tr><td>41</td><td>intrinsic_sse_2.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_2.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_2.lst</a></td></tr>
<tr><td>42</td><td>intrinsic_sse_3.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_3.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_3.lst</a></td></tr>
<tr><td>43</td><td>intrinsic_sse_4.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_4.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_4.lst</a></td></tr>
<tr><td>44</td><td>intrinsic_sse_5.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_5.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_5.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_5.lst</a></td></tr>
<tr><td>45</td><td>intrinsic_sse_6.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_6.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_6.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_6.lst</a></td></tr>
<tr><td>46</td><td>intrinsic_sse_7.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_7.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_7.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_7.lst</a></td></tr>
<tr><td>47</td><td>intrinsic_sse_8.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_8.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_8.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_8.lst</a></td></tr>
<tr><td>48</td><td>intrinsic_sse_9.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_9.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_9.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_9.lst</a></td></tr>
<tr><td>49</td><td>intrinsic_sse_A.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_A.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_A.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_A.lst</a></td></tr>
<tr><td>50</td><td>intrinsic_sse_B.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_B.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_B.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_B.lst</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>51</td><td>simd19_sse.lst</td><td>překlad zdrojového kódu <strong>simd19.c</strong> s&nbsp;přepínačem <strong>-msse -mno-avx</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd19_sse.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd19_sse.lst</a></td></tr>
<tr><td>52</td><td>simd19_avx.lst</td><td>překlad zdrojového kódu <strong>simd19.c</strong> s&nbsp;přepínačem <strong>-mavx</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd19_avx.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd19_avx.lst</a></td></tr>
<tr><td>53</td><td>simd19_avx2.lst</td><td>překlad zdrojového kódu <strong>simd19.c</strong> s&nbsp;přepínačem <strong>-mavx2</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd19_avx2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd19_avx2.lst</a></td></tr>
<tr><td>54</td><td>simd20_sse.lst</td><td>překlad zdrojového kódu <strong>simd20.c</strong> s&nbsp;přepínačem <strong>-msse -mno-avx</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd20_sse.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd20_sse.lst</a></td></tr>
<tr><td>55</td><td>simd20_avx.lst</td><td>překlad zdrojového kódu <strong>simd20.c</strong> s&nbsp;přepínačem <strong>-mavx</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd20_avx.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd20_avx.lst</a></td></tr>
<tr><td>56</td><td>simd20_avx2.lst</td><td>překlad zdrojového kódu <strong>simd20.c</strong> s&nbsp;přepínačem <strong>-mavx2</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd20_avx2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd20_avx2.lst</a></td></tr>
<tr><td>57</td><td>simd21_sse.lst</td><td>překlad zdrojového kódu <strong>simd21.c</strong> s&nbsp;přepínačem <strong>-msse -mno-avx</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd21_sse.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd21_sse.lst</a></td></tr>
<tr><td>58</td><td>simd21_avx.lst</td><td>překlad zdrojového kódu <strong>simd21.c</strong> s&nbsp;přepínačem <strong>-mavx</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd21_avx.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd21_avx.lst</a></td></tr>
<tr><td>59</td><td>simd21_avx2.lst</td><td>překlad zdrojového kódu <strong>simd21.c</strong> s&nbsp;přepínačem <strong>-mavx3</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd20_avx2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd21_avx2.lst</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>60</td><td>intrinsic_f16c_1.lst</td><td>překlad zdrojového kódu <strong>intrinsic_f16c_1.c</strong> s&nbsp;přepínačem <strong></strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_1.lst</a></td></tr>
<tr><td>61</td><td>intrinsic_f16c_2.lst</td><td>překlad zdrojového kódu <strong>intrinsic_f16c_2.c</strong> s&nbsp;přepínačem <strong></strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_2.lst</a></td></tr>
<tr><td>62</td><td>intrinsic_f16c_3.lst</td><td>překlad zdrojového kódu <strong>intrinsic_f16c_3.c</strong> s&nbsp;přepínačem <strong></strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_3.lst</a></td></tr>
<tr><td>63</td><td>intrinsic_f16c_4.lst</td><td>překlad zdrojového kódu <strong>intrinsic_f16c_4.c</strong> s&nbsp;přepínačem <strong></strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_4.lst</a></td></tr>
<tr><td>64</td><td>intrinsic_fma3_1.lst</td><td>překlad zdrojového kódu <strong>intrinsic_fma3_1.c</strong> s&nbsp;přepínačem <strong></strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_1.lst</a></td></tr>
<tr><td>65</td><td>intrinsic_fma3_2.lst</td><td>překlad zdrojového kódu <strong>intrinsic_fma3_2.c</strong> s&nbsp;přepínačem <strong></strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_2.lst</a></td></tr>
<tr><td>66</td><td>intrinsic_fma3_3.lst</td><td>překlad zdrojového kódu <strong>intrinsic_fma3_3.c</strong> s&nbsp;přepínačem <strong></strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_3.lst</a></td></tr>
<tr><td>67</td><td>intrinsic_fma3_4.lst</td><td>překlad zdrojového kódu <strong>intrinsic_fma3_4.c</strong> s&nbsp;přepínačem <strong></strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_4.lst</a></td></tr>
<tr><td>68</td><td>intrinsic_fma3_5.lst</td><td>překlad zdrojového kódu <strong>intrinsic_fma3_5.c</strong> s&nbsp;přepínačem <strong></strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_5.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_5.lst</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>GCC documentation: Extensions to the C Language Family<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html#C-Extensions">https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html#C-Extensions</a>
</li>

<li>GCC documentation: Using Vector Instructions through Built-in Functions<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html">https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html</a>
</li>

<li>SSE (Streaming SIMD Extentions)<br />
<a href="http://www.songho.ca/misc/sse/sse.html">http://www.songho.ca/misc/sse/sse.html</a>
</li>

<li>Timothy A. Chagnon: SSE and SSE2<br />
<a href="http://www.cs.drexel.edu/~tc365/mpi-wht/sse.pdf">http://www.cs.drexel.edu/~tc365/mpi-wht/sse.pdf</a>
</li>

<li>Intel corporation: Extending the Worldr's Most Popular Processor Architecture<br />
<a href="http://download.intel.com/technology/architecture/new-instructions-paper.pdf">http://download.intel.com/technology/architecture/new-instructions-paper.pdf</a>
</li>

<li>SIMD architectures:<br />
<a href="http://arstechnica.com/old/content/2000/03/simd.ars/">http://arstechnica.com/old/content/2000/03/simd.ars/</a>
</li>

<li>Tour of the Black Holes of Computing!: Floating Point<br />
<a href="http://www.cs.hmc.edu/~geoff/classes/hmc.cs105.../slides/class02_floats.ppt">http://www.cs.hmc.edu/~geoff/classes/hmc.cs105.../slides/class02_floats.ppt</a>
</li>

<li>3Dnow! Technology Manual<br />
AMD Inc., 2000</li>

<li>Intel MMX<sup>TM</sup> Technology Overview<br />
Intel corporation, 1996</li>

<li>MultiMedia eXtensions<br />
<a href="http://softpixel.com/~cwright/programming/simd/mmx.php">http://softpixel.com/~cwright/programming/simd/mmx.php</a>i
</li>

<li>AMD K5 ("K5" / "5k86")<br />
<a href="http://www.pcguide.com/ref/cpu/fam/g5K5-c.html">http://www.pcguide.com/ref/cpu/fam/g5K5-c.html</a>
</li>

<li>Sixth Generation Processors<br />
<a href="http://www.pcguide.com/ref/cpu/fam/g6.htm">http://www.pcguide.com/ref/cpu/fam/g6.htm</a>
</li>

<li>Great Microprocessors of the Past and Present<br />
<a href="http://www.cpushack.com/CPU/cpu1.html">http://www.cpushack.com/CPU/cpu1.html</a>
</li>

<li>Very long instruction word (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Very_long_instruction_word">http://en.wikipedia.org/wiki/Very_long_instruction_word</a>
</li>

<li>CPU design (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/CPU_design">http://en.wikipedia.org/wiki/CPU_design</a>
</li>

<li>Bulldozer (microarchitecture)<br />
<a href="https://en.wikipedia.org/wiki/Bulldozer_(microarchitecture)">https://en.wikipedia.org/wiki/Bulldozer_(microarchitecture)</a>
</li>

<li>SIMD Instructions Considered Harmful<br />
<a href="https://www.sigarch.org/simd-instructions-considered-harmful/">https://www.sigarch.org/simd-instructions-considered-harmful/</a>
</li>

<li>GCC Compiler Intrinsics<br />
<a href="https://iq.opengenus.org/gcc-compiler-intrinsics/">https://iq.opengenus.org/gcc-compiler-intrinsics/</a>
</li>

<li>Scalable_Vector_Extension_(SVE)<br />
<a href="https://en.wikipedia.org/wiki/AArch64#Scalable_Vector_Extension_(SVE)">https://en.wikipedia.org/wiki/AArch64#Scalable_Vector_Extension_(SVE)</a>
</li>

<li>FADD/FADDP/FIADD — Add<br />
<a href="https://www.felixcloutier.com/x86/fadd:faddp:fiadd">https://www.felixcloutier.com/x86/fadd:faddp:fiadd</a>
</li>

<li>ADDPS — Add Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/addps">https://www.felixcloutier.com/x86/addps</a>
</li>

<li>ADDPD — Add Packed Double-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/addpd">https://www.felixcloutier.com/x86/addpd</a>
</li>

<li>FDIV/FDIVP/FIDIV — Divide<br />
<a href="https://www.felixcloutier.com/x86/fdiv:fdivp:fidiv">https://www.felixcloutier.com/x86/fdiv:fdivp:fidiv</a>
</li>

<li>IDIV — Signed Divide<br />
<a href="https://www.felixcloutier.com/x86/idiv">https://www.felixcloutier.com/x86/idiv</a>
</li>

<li>PADDB/PADDW/PADDD/PADDQ — Add Packed Integers<br />
<a href="https://www.felixcloutier.com/x86/paddb:paddw:paddd:paddq">https://www.felixcloutier.com/x86/paddb:paddw:paddd:paddq</a>
</li>

<li>PSUBB/PSUBW/PSUBD — Subtract Packed Integers<br />
<a href="https://www.felixcloutier.com/x86/psubb:psubw:psubd">https://www.felixcloutier.com/x86/psubb:psubw:psubd</a>
</li>

<li>PMULLW — Multiply Packed Signed Integers and Store Low Result<br />
<a href="https://www.felixcloutier.com/x86/pmullw">https://www.felixcloutier.com/x86/pmullw</a>
</li>

<li>PUNPCKLBW/PUNPCKLWD/PUNPCKLDQ/PUNPCKLQDQ — Unpack Low Data<br />
<a href="https://www.felixcloutier.com/x86/punpcklbw:punpcklwd:punpckldq:punpcklqdq">https://www.felixcloutier.com/x86/punpcklbw:punpcklwd:punpckldq:punpcklqdq</a>
</li>

<li>PUNPCKHBW/PUNPCKHWD/PUNPCKHDQ/PUNPCKHQDQ — Unpack High Data<br />
<a href="https://www.felixcloutier.com/x86/punpckhbw:punpckhwd:punpckhdq:punpckhqdq">https://www.felixcloutier.com/x86/punpckhbw:punpckhwd:punpckhdq:punpckhqdq</a>
</li>

<li>PACKUSWB — Pack with Unsigned Saturation<br />
<a href="https://www.felixcloutier.com/x86/packuswb">https://www.felixcloutier.com/x86/packuswb</a>
</li>

<li>ADDPS — Add Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/addps">https://www.felixcloutier.com/x86/addps</a>
</li>

<li>SUBPS — Subtract Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/subps">https://www.felixcloutier.com/x86/subps</a>
</li>

<li>MULPS — Multiply Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/mulps">https://www.felixcloutier.com/x86/mulps</a>
</li>

<li>DIVPS — Divide Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/divps">https://www.felixcloutier.com/x86/divps</a>
</li>

<li>CBW/CWDE/CDQE — Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword<br />
<a href="https://www.felixcloutier.com/x86/cbw:cwde:cdqe">https://www.felixcloutier.com/x86/cbw:cwde:cdqe</a>
</li>

<li>PAND — Logical AND<br />
<a href="https://www.felixcloutier.com/x86/pand">https://www.felixcloutier.com/x86/pand</a>
</li>

<li>POR — Bitwise Logical OR<br />
<a href="https://www.felixcloutier.com/x86/por">https://www.felixcloutier.com/x86/por</a>
</li>

<li>PXOR — Logical Exclusive OR<br />
<a href="https://www.felixcloutier.com/x86/pxor">https://www.felixcloutier.com/x86/pxor</a>
</li>

<li>Improve the Multimedia User Experience<br />
<a href="https://www.arm.com/technologies/neon">https://www.arm.com/technologies/neon</a>
</li>

<li>NEON Technology (stránky ARM)<br />
<a href="https://developer.arm.com/technologies/neon">https://developer.arm.com/technologies/neon</a>
</li>

<li>SIMD Assembly Tutorial: ARM NEON - Xiph.org<br />
<a href="https://people.xiph.org/~tterribe/daala/neon_tutorial.pdf">https://people.xiph.org/~tterribe/daala/neon_tutorial.pdf</a>
</li>

<li>Ne10<br />
<a href="http://projectne10.github.io/Ne10/">http://projectne10.github.io/Ne10/</a>
</li>

<li>NEON and Floating-Point architecture<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/BABIGHEB.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/BABIGHEB.html</a>
</li>

<li>An Introduction to ARM NEON<br />
<a href="http://peterdn.com/post/an-introduction-to-ARM-NEON.aspx">http://peterdn.com/post/an-introduction-to-ARM-NEON.aspx</a>
</li>

<li>ARM NEON Intrinsics Reference<br />
<a href="http://infocenter.arm.com/help/topic/com.arm.doc.ihi0073a/IHI0073A_arm_neon_intrinsics_ref.pdf">http://infocenter.arm.com/help/topic/com.arm.doc.ihi0073a/IHI0073A_arm_neon_intrinsics_ref.pdf</a>
</li>

<li>Arm Neon Intrinsics vs hand assembly<br />
<a href="https://stackoverflow.com/questions/9828567/arm-neon-intrinsics-vs-hand-assembly">https://stackoverflow.com/questions/9828567/arm-neon-intrinsics-vs-hand-assembly</a>
</li>

<li>ARM NEON Optimization. An Example<br />
<a href="http://hilbert-space.de/?p=22">http://hilbert-space.de/?p=22</a>
</li>

<li>AArch64 NEON instruction format<br />
<a href="https://developer.arm.com/docs/den0024/latest/7-aarch64-floating-point-and-neon/73-aarch64-neon-instruction-format">https://developer.arm.com/docs/den0024/latest/7-aarch64-floating-point-and-neon/73-aarch64-neon-instruction-format</a>
</li>

<li>ARM SIMD instructions<br />
<a href="https://developer.arm.com/documentation/dht0002/a/Introducing-NEON/What-is-SIMD-/ARM-SIMD-instructions">https://developer.arm.com/documentation/dht0002/a/Introducing-NEON/What-is-SIMD-/ARM-SIMD-instructions</a>
</li>

<li>Learn the architecture - Migrate Neon to SVE Version 1.0<br />
<a href="https://developer.arm.com/documentation/102131/0100/?lang=en">https://developer.arm.com/documentation/102131/0100/?lang=en</a>
</li>

<li>1.2.2. Comparison between NEON technology and other SIMD solutions<br />
<a href="https://developer.arm.com/documentation/den0018/a/Introduction/Comparison-between-ARM-NEON-technology-and-other-implementations/Comparison-between-NEON-technology-and-other-SIMD-solutions?lang=en">https://developer.arm.com/documentation/den0018/a/Introduction/Comparison-between-ARM-NEON-technology-and-other-implementations/Comparison-between-NEON-technology-and-other-SIMD-solutions?lang=en</a>
</li>

<li>NEON Programmer’s Guide<br />
<a href="https://documentation-service.arm.com/static/63299276e68c6809a6b41308">https://documentation-service.arm.com/static/63299276e68c6809a6b41308</a>
</li>

<li>Brain Floating Point – nový formát uložení čísel pro strojové učení a chytrá čidla<br />
<a href="https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/">https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/</a>
</li>

<li>Other Built-in Functions Provided by GCC<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html">https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html</a>
</li>

<li>GCC: 6.60 Built-in Functions Specific to Particular Target Machines<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Target-Builtins.html#Target-Builtins">https://gcc.gnu.org/onlinedocs/gcc/Target-Builtins.html#Target-Builtins</a>
</li>

<li>Advanced Vector Extensions<br />
<a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions">https://en.wikipedia.org/wiki/Advanced_Vector_Extensions</a>
</li>

<li>AVX-512<br />
<a href="https://en.wikipedia.org/wiki/AVX-512">https://en.wikipedia.org/wiki/AVX-512</a>
</li>

<li>AVX-512<br />
<a href="https://iq.opengenus.org/avx512/">https://iq.opengenus.org/avx512/</a>
</li>

<li>Downclocking pro AVX-512<br />
<a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#Downclocking">https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#Downclocking</a>
</li>

<li>BLENDPS — Blend Packed Single Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/blendps">https://www.felixcloutier.com/x86/blendps</a>
</li>

<li>BLENDPD — Blend Packed Double Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/blendpd">https://www.felixcloutier.com/x86/blendpd</a>
</li>

<li>Why Intel is betting on BFLOAT16 to be a game changer for deep learning training? Hint: Range trumps Precision<br />
<a href="https://hub.packtpub.com/why-intel-is-betting-on-bfloat16-to-be-a-game-changer-for-deep-learning-training-hint-range-trumps-precision/">https://hub.packtpub.com/why-intel-is-betting-on-bfloat16-to-be-a-game-changer-for-deep-learning-training-hint-range-trumps-precision/</a>
</li>

<li>half-rs (pro Rust)<br />
<a href="https://github.com/starkat99/half-rs">https://github.com/starkat99/half-rs</a>
</li>

<li>float16 (pro Go)<br />
<a href="https://github.com/x448/float16">https://github.com/x448/float16</a>
</li>

<li>bfloat16 - Hardware Numerics Definition<br />
<a href="https://software.intel.com/en-us/download/bfloat16-hardware-numerics-definition">https://software.intel.com/en-us/download/bfloat16-hardware-numerics-definition</a>
</li>

<li>Intel Prepares To Graft Google’s Bfloat16 Onto Processors<br />
<a href="https://www.nextplatform.com/2019/07/15/intel-prepares-to-graft-googles-bfloat16-onto-processors/">https://www.nextplatform.com/2019/07/15/intel-prepares-to-graft-googles-bfloat16-onto-processors/</a>
</li>

<li>A Study of BFLOAT16 for Deep Learning Training<br />
<a href="https://arxiv.org/pdf/1905.12322.pdf">https://arxiv.org/pdf/1905.12322.pdf</a>
</li>

<li>BFloat16s.jl<br />
<a href="https://github.com/JuliaComputing/BFloat16s.jl">https://github.com/JuliaComputing/BFloat16s.jl</a>
</li>

<li>Half Precision Arithmetic: fp16 Versus bfloat16<br />
<a href="https://nhigham.com/2018/12/03/half-precision-arithmetic-fp16-versus-bfloat16/">https://nhigham.com/2018/12/03/half-precision-arithmetic-fp16-versus-bfloat16/</a>
</li>

<li>bfloat16 floating-point format (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Bfloat16_floating-point_format">https://en.wikipedia.org/wiki/Bfloat16_floating-point_format</a>
</li>

<li>Unum (number format)<br />
<a href="https://en.wikipedia.org/wiki/Unum_(number_format)#Posit">https://en.wikipedia.org/wiki/Unum_(number_format)#Posit</a>
</li>

<li>Performance Benefits of Half Precision Floats<br />
<a href="https://software.intel.com/en-us/articles/performance-benefits-of-half-precision-floats">https://software.intel.com/en-us/articles/performance-benefits-of-half-precision-floats</a>
</li>

<li>Norma IEEE 754 a příbuzní: formáty plovoucí řádové tečky<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/</a>
</li>

<li>IEEE-754 Floating-Point Conversion<br />
<a href="http://babbage.cs.qc.cuny.edu/IEEE-754.old/32bit.html">http://babbage.cs.qc.cuny.edu/IEEE-754.old/32bit.html</a>
</li>

<li>Small Float Formats<br />
<a href="https://www.khronos.org/opengl/wiki/Small_Float_Formats">https://www.khronos.org/opengl/wiki/Small_Float_Formats</a>
</li>

<li>Binary-coded decimal<br />
<a href="https://en.wikipedia.org/wiki/Binary-coded_decimal">https://en.wikipedia.org/wiki/Binary-coded_decimal</a>
</li>

<li>Floating-Point Formats<br />
<a href="http://www.quadibloc.com/comp/cp0201.htm">http://www.quadibloc.com/comp/cp0201.htm</a>
</li>

<li>Data types (SciPy)<br />
<a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.types.html">https://docs.scipy.org/doc/numpy-1.13.0/user/basics.types.html</a>
</li>

<li>New 16-bit floating point type &ndash; NumPy 1.6.0 Release Notes<br />
<a href="https://github.com/numpy/numpy/blob/7cfec2403486456b52b525eccf7541e1562d9ab3/doc/release/1.6.0-notes.rst#new-16-bit-floating-point-type">https://github.com/numpy/numpy/blob/7cfec2403486456b52b525eccf7541e1562d9ab3/doc/release/1.6.0-notes.rst#new-16-bit-floating-point-type</a>
</li>

<li>RFC pro Rust<br />
<a href="https://github.com/joshtriplett/rfcs/blob/f16b/text/0000-f16b.md">https://github.com/joshtriplett/rfcs/blob/f16b/text/0000-f16b.md</a>
</li>

<li>IEEE-754 Floating Point Converter<br />
<a href="https://www.h-schmidt.net/FloatConverter/IEEE754.html">https://www.h-schmidt.net/FloatConverter/IEEE754.html</a>
</li>

<li>Mediump float calculator<br />
<a href="https://oletus.github.io/float16-simulator.js/">https://oletus.github.io/float16-simulator.js/</a>
</li>

<li>IEEE 754 Calculator<br />
<a href="http://weitz.de/ieee/">http://weitz.de/ieee/</a>
</li>

<li>BFloat16 (Swift for TensorFlow)<br />
<a href="https://www.tensorflow.org/swift/api_docs/Structs/BFloat16">https://www.tensorflow.org/swift/api_docs/Structs/BFloat16</a>
</li>

<li>Using bfloat16 with TensorFlow models<br />
<a href="https://cloud.google.com/tpu/docs/bfloat16">https://cloud.google.com/tpu/docs/bfloat16</a>
</li>

<li>What is tf.bfloat16 “truncated 16-bit floating point”?<br />
<a href="https://stackoverflow.com/questions/44873802/what-is-tf-bfloat16-truncated-16-bit-floating-point">https://stackoverflow.com/questions/44873802/what-is-tf-bfloat16-truncated-16-bit-floating-point</a>
</li>

<li>BFloat16 processing for Neural Networks on Armv8-A<br />
<a href="https://community.arm.com/developer/ip-products/processors/b/ml-ip-blog/posts/bfloat16-processing-for-neural-networks-on-armv8_2d00_a">https://community.arm.com/developer/ip-products/processors/b/ml-ip-blog/posts/bfloat16-processing-for-neural-networks-on-armv8_2d00_a</a>
</li>

<li>Mixed precision training<br />
<a href="https://arxiv.org/pdf/1710.03740.pdf">https://arxiv.org/pdf/1710.03740.pdf</a>
</li>

<li>[R] Mixed Precision Training<br />
<a href="https://www.reddit.com/r/MachineLearning/comments/75phd2/r_mixed_precision_training/">https://www.reddit.com/r/MachineLearning/comments/75phd2/r_mixed_precision_training/</a>
</li>

<li>Floating Point Numbers<br />
<a href="https://floating-point-gui.de/formats/fp/">https://floating-point-gui.de/formats/fp/</a>
</li>

<li>Float exposed<br />
<a href="https://float.exposed/0x40490000">https://float.exposed/0x40490000</a>
</li>

<li>Float Toy<br />
<a href="http://evanw.github.io/float-toy/">http://evanw.github.io/float-toy/</a>
</li>

<li>IEEE-754 visualization<br />
<a href="https://bartaz.github.io/ieee754-visualization/">https://bartaz.github.io/ieee754-visualization/</a>
</li>

<li>Advantages Of BFloat16 For AI Inference<br />
<a href="https://semiengineering.com/advantages-of-bfloat16-for-ai-inference/">https://semiengineering.com/advantages-of-bfloat16-for-ai-inference/</a>
</li>

<li>ARMv8-A bude podporovat nový formát čísel BFloat16<br />
<a href="https://www.root.cz/zpravicky/armv8-a-bude-podporovat-novy-format-cisle-bfloat16/">https://www.root.cz/zpravicky/armv8-a-bude-podporovat-novy-format-cisle-bfloat16/</a>
</li>

<li>Intel oznámil nový formát BFloat16 pro budoucí procesory<br />
<a href="https://www.root.cz/zpravicky/intel-oznamil-novy-format-bfloat16-pro-budouci-procesory/">https://www.root.cz/zpravicky/intel-oznamil-novy-format-bfloat16-pro-budouci-procesory/</a>
</li>

<li>Nový formát čísel Intelu BFloat16 bude v GCC 10 a Clang 9 <br />
<a href="https://www.root.cz/zpravicky/novy-format-cisel-intelu-bfloat16-bude-v-gcc-10-a-clang-9/">https://www.root.cz/zpravicky/novy-format-cisel-intelu-bfloat16-bude-v-gcc-10-a-clang-9/</a>
</li>

<li>Mixed precision<br />
<a href="https://www.tensorflow.org/guide/keras/mixed_precision">https://www.tensorflow.org/guide/keras/mixed_precision</a>
</li>

<li>Training Performance: A user’s guide to converge faster (TensorFlow Dev Summit 2018)<br />
<a href="https://www.youtube.com/watch?v=SxOsJPaxHME">https://www.youtube.com/watch?v=SxOsJPaxHME</a>
</li>

<li>Programování GPU na Raspberry Pi: použití Quad Processor Unit(s) <br />
<a href="https://www.root.cz/clanky/programovani-gpu-na-raspberry-pi-pouziti-quad-processor-unit-s/">https://www.root.cz/clanky/programovani-gpu-na-raspberry-pi-pouziti-quad-processor-unit-s/</a>
</li>

<li>“Half Precision” 16-bit Floating Point Arithmetic<br />
<a href="https://blogs.mathworks.com/cleve/2017/05/08/half-precision-16-bit-floating-point-arithmetic/">https://blogs.mathworks.com/cleve/2017/05/08/half-precision-16-bit-floating-point-arithmetic/</a>
</li>

<li>Half Precision Arithmetic in Numerical Linear Algebra<br />
<a href="https://nla-group.org/2018/10/03/half-precision-arithmetic-in-numerical-linear-algebra/">https://nla-group.org/2018/10/03/half-precision-arithmetic-in-numerical-linear-algebra/</a>
</li>

<li>Enable BF16 support<br />
<a href="https://gcc.gnu.org/ml/gcc-patches/2019-04/msg00477.html">https://gcc.gnu.org/ml/gcc-patches/2019-04/msg00477.html</a>
</li>

<li>Survey of Floating-Point Formats<br />
<a href="https://mrob.com/pub/math/floatformats.html">https://mrob.com/pub/math/floatformats.html</a>
</li>

<li>VCVTPS2PH — Convert Single-Precision FP value to 16-bit FP value<br />
<a href="https://www.felixcloutier.com/x86/vcvtps2ph">https://www.felixcloutier.com/x86/vcvtps2ph</a>
</li>

<li>VCVTPH2PS — Convert 16-bit FP values to Single-Precision FP values<br />
<a href="https://www.felixcloutier.com/x86/vcvtph2ps">https://www.felixcloutier.com/x86/vcvtph2ps</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>
