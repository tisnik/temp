<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Rozšíření instrukční sady AVX-512 na platformě x86-64 (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Rozšíření instrukční sady AVX-512 na platformě x86-64 (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V závěrečném článku o SIMD operacích podporovaných (i když nepřímo) překladačem GCC C se zaměříme přímo na ty instrukce, které lze nalézt v jednotlivých rozšířeních instrukčních sad AVX-512.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Rozšíření instrukční sady AVX-512 na platformě x86-64 (dokončení)</a></p>
<p><a href="#k02">*** 2. Datové typy používané v&nbsp;GCC s&nbsp;podporou AVX-512</a></p>
<p><a href="#k03">*** 3. Intrinsic definované v&nbsp;GCC pro instrukční sady AVX-512</a></p>
<p><a href="#k04">4. Základ AVX-512: AVX-512F (foundation)</a></p>
<p><a href="#k05">5. Maskovací registry <strong>k0</strong> až <strong>k7</strong></a></p>
<p><a href="#k06">6. Operace prováděné přímo s&nbsp;maskovacími registry</a></p>
<p><a href="#k07">7. Intrinsic pro operace prováděné přímo s&nbsp;maskovacími registry</a></p>
<p><a href="#k08">8. Instrukce, v&nbsp;nichž se využívají nové maskovací registry</a></p>
<p><a href="#k09">9. Instrinsic pro instrukce <strong>vblendmps</strong> a <strong>addps</strong> s&nbsp;maskou</a></p>
<p><a href="#k10">10. Komprese a expanze dat</a></p>
<p><a href="#k11">11. Instrukce pro kompresi a expanzi dat</a></p>
<p><a href="#k12">12. Instrinsic pro instrukce komprese dat</a></p>
<p><a href="#k13">13. Instrukce pro provedení permutace (přerozdělení) prvků vektorů</a></p>
<p><a href="#k14">*** 14. Intrinsic pro provedení permutace</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">17. Příloha &ndash; soubor Makefile použitý v&nbsp;článcích o SIMD operacích</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Seznam všech předchozích částí tohoto seriálu</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Rozšíření instrukční sady AVX-512 na platformě x86-64 (dokončení)</h2>

<p></p>

<table>
<tr><th>Množina instrukcí</th><th>Plné jméno</th><th>První procesor s&nbsp;implementací</th></tr>
<tr><td>F</td><td>AVX-512 Foundation</td><td>Xeon Phi x200 (Knights Landing), Xeon Gold/Platinum</td></tr>
<tr><td>CD</td><td>AVX-512 Conflict Detection Instructions</td><td>Xeon Phi x200 (Knights Landing), Xeon Gold/Platinum</td></tr>
<tr><td>ER</td><td>AVX-512 Exponential and Reciprocal Instructions</td><td>Xeon Phi x200 (Knights Landing)</td></tr>
<tr><td>PF</td><td>AVX-512 Prefetch Instructions</td><td>Xeon Phi x200 (Knights Landing)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>VL</td><td>AVX-512 Vector Length Extensions</td><td>Skylake X, Cannon Lake</td></tr>
<tr><td>DQ</td><td>AVX-512 Doubleword and Quadword Instructions</td><td>Skylake X, Cannon Lake</td></tr>
<tr><td>BW</td><td>AVX-512 Byte and Word Instructions</td><td>Skylake X, Cannon Lake</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>IFMA</td><td>AVX-512 Integer Fused Multiply Add</td><td>Cannon Lake</td></tr>
<tr><td>VBMI</td><td>AVX-512 Vector Byte Manipulation Instructions</td><td>Cannon Lake</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4VNNIW</td><td>AVX-512 Vector Neural Network Instructions Word variable precision</td><td>Knights Mill</td></tr>
<tr><td>4FMAPS</td><td>AVX-512 Fused Multiply Accumulation Packed Single precision</td><td>Knights Mill</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>VPOPCNTDQ</td><td>Vector population count instruction</td><td>Knights Mill, Ice Lake</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>VNNI</td><td>AVX-512 Vector Neural Network Instructions</td><td>Ice Lake</td></tr>
<tr><td>VBMI2</td><td>AVX-512 Vector Byte Manipulation Instructions 2</td><td>Ice Lake</td></tr>
<tr><td>BITALG</td><td>AVX-512 Bit Algorithms</td><td>Ice Lake</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>VP2INTERSECT</td><td>AVX-512 Vector Pair Intersection to a Pair of Mask Registers</td><td>Tiger Lake</td></tr>
</table>




<p><a name="k02"></a></p>
<h2 id="k02">2. Datové typy používané v&nbsp;GCC s&nbsp;podporou AVX-512</h2>

<p></p>

<table>
<tr><th> #</th><th>Typ prvku</th><th>Počet prvků</th><th>Celkový počet bitů</th><th>Definice datového typu</th></tr>
<tr><td> 1</td><td>double</td><td>8</td><td>512</td><td>typedef double __v8df __attribute__ ((__vector_size__ (64)));</td></tr>
<tr><td> 2</td><td>float</td><td>16</td><td>512</td><td>typedef float __v16sf __attribute__ ((__vector_size__ (64)));</td></tr>
<tr><td> 3</td><td>long long</td><td>8</td><td>512</td><td>typedef long long __v8di __attribute__ ((__vector_size__ (64)));</td></tr>
<tr><td> 4</td><td>unsigned long long</td><td>8</td><td>512</td><td>typedef unsigned long long __v8du __attribute__ ((__vector_size__ (64)));</td></tr>
<tr><td> 5</td><td>int</td><td>16</td><td>512</td><td>typedef int __v16si __attribute__ ((__vector_size__ (64)));</td></tr>
<tr><td> 6</td><td>unsigned int</td><td>16</td><td>512</td><td>typedef unsigned int __v16su __attribute__ ((__vector_size__ (64)));</td></tr>
<tr><td> 7</td><td>short</td><td>32</td><td>512</td><td>typedef short __v32hi __attribute__ ((__vector_size__ (64)));</td></tr>
<tr><td> 8</td><td>unsigned short</td><td>32</td><td>512</td><td>typedef unsigned short __v32hu __attribute__ ((__vector_size__ (64)));</td></tr>
<tr><td> 9</td><td>char</td><td>64</td><td>512</td><td>typedef char __v64qi __attribute__ ((__vector_size__ (64)));</td></tr>
<tr><td>10</td><td>unsigned char</td><td>64</td><td>512</td><td>typedef unsigned char __v64qu __attribute__ ((__vector_size__ (64)));</td></tr>
</table>

<p></p>

<pre>
typedef long long __m512i __attribute__ ((__vector_size__ (64), __may_alias__));
typedef float __m512 __attribute__ ((__vector_size__ (64), __may_alias__));
typedef double __m512d __attribute__ ((__vector_size__ (64), __may_alias__));
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Intrinsic definované v&nbsp;GCC pro instrukční sady AVX-512</h2>

<pre>
__builtin_ia32_addpd512_mask
__builtin_ia32_addps512_mask
__builtin_ia32_addsd_mask_round
__builtin_ia32_addsd_round
__builtin_ia32_addss_mask_round
__builtin_ia32_addss_round
__builtin_ia32_alignd512_mask
__builtin_ia32_alignq512_mask
__builtin_ia32_blendmd_512_mask
__builtin_ia32_blendmpd_512_mask
__builtin_ia32_blendmps_512_mask
__builtin_ia32_blendmq_512_mask
__builtin_ia32_broadcastf32x4_512
__builtin_ia32_broadcastf64x4_512
__builtin_ia32_broadcasti32x4_512
__builtin_ia32_broadcasti64x4_512
__builtin_ia32_broadcastsd512
__builtin_ia32_broadcastss512
__builtin_ia32_cmpd512_mask
__builtin_ia32_cmppd512_mask
__builtin_ia32_cmpps512_mask
__builtin_ia32_cmpq512_mask
__builtin_ia32_cmpsd_mask
__builtin_ia32_cmpss_mask
__builtin_ia32_compressdf512_mask
__builtin_ia32_compressdi512_mask
__builtin_ia32_compresssf512_mask
__builtin_ia32_compresssi512_mask
__builtin_ia32_compressstoredf512_mask
__builtin_ia32_compressstoredi512_mask
__builtin_ia32_compressstoresf512_mask
__builtin_ia32_compressstoresi512_mask
__builtin_ia32_cvtdq2pd512_mask
__builtin_ia32_cvtdq2ps512_mask
__builtin_ia32_cvtpd2dq512_mask
__builtin_ia32_cvtpd2ps512_mask
__builtin_ia32_cvtpd2udq512_mask
__builtin_ia32_cvtps2dq512_mask
__builtin_ia32_cvtps2pd512_mask
__builtin_ia32_cvtps2udq512_mask
__builtin_ia32_cvtsd2ss_round
__builtin_ia32_cvtsi2sd64
__builtin_ia32_cvtsi2ss32
__builtin_ia32_cvtsi2ss64
__builtin_ia32_cvtss2sd_round
__builtin_ia32_cvttpd2dq512_mask
__builtin_ia32_cvttpd2udq512_mask
__builtin_ia32_cvttps2dq512_mask
__builtin_ia32_cvttps2udq512_mask
__builtin_ia32_cvtudq2pd512_mask
__builtin_ia32_cvtudq2ps512_mask
__builtin_ia32_cvtusi2sd32
__builtin_ia32_cvtusi2sd64
__builtin_ia32_cvtusi2ss32
__builtin_ia32_cvtusi2ss64
__builtin_ia32_divpd512_mask
__builtin_ia32_divps512_mask
__builtin_ia32_divsd_mask_round
__builtin_ia32_divsd_round
__builtin_ia32_divss_mask_round
__builtin_ia32_divss_round
__builtin_ia32_expanddf512_mask
__builtin_ia32_expanddf512_maskz
__builtin_ia32_expanddi512_mask
__builtin_ia32_expanddi512_maskz
__builtin_ia32_expandloaddf512_mask
__builtin_ia32_expandloaddf512_maskz
__builtin_ia32_expandloaddi512_mask
__builtin_ia32_expandloaddi512_maskz
__builtin_ia32_expandloadsf512_mask
__builtin_ia32_expandloadsf512_maskz
__builtin_ia32_expandloadsi512_mask
__builtin_ia32_expandloadsi512_maskz
__builtin_ia32_expandsf512_mask
__builtin_ia32_expandsf512_maskz
__builtin_ia32_expandsi512_mask
__builtin_ia32_expandsi512_maskz
__builtin_ia32_extractf32x4_mask
__builtin_ia32_extractf64x4_mask
__builtin_ia32_extracti32x4_mask
__builtin_ia32_extracti64x4_mask
__builtin_ia32_fixupimmpd512_mask
__builtin_ia32_fixupimmpd512_maskz
__builtin_ia32_fixupimmps512_mask
__builtin_ia32_fixupimmps512_maskz
__builtin_ia32_fixupimmsd_mask
__builtin_ia32_fixupimmsd_maskz
__builtin_ia32_fixupimmss_mask
__builtin_ia32_fixupimmss_maskz
__builtin_ia32_gatherdiv16sf
__builtin_ia32_gatherdiv16si
__builtin_ia32_gatherdiv8df
__builtin_ia32_gatherdiv8di
__builtin_ia32_gathersiv16sf
__builtin_ia32_gathersiv16si
__builtin_ia32_gathersiv8df
__builtin_ia32_gathersiv8di
__builtin_ia32_getexppd512_mask
__builtin_ia32_getexpps512_mask
__builtin_ia32_getexpsd128_round
__builtin_ia32_getexpsd_mask_round
__builtin_ia32_getexpss128_round
__builtin_ia32_getexpss_mask_round
__builtin_ia32_getmantpd512_mask
__builtin_ia32_getmantps512_mask
__builtin_ia32_getmantsd_mask_round
__builtin_ia32_getmantsd_round
__builtin_ia32_getmantss_mask_round
__builtin_ia32_getmantss_round
__builtin_ia32_insertf32x4_mask
__builtin_ia32_insertf64x4_mask
__builtin_ia32_inserti32x4_mask
__builtin_ia32_inserti64x4_mask
__builtin_ia32_kandhi
__builtin_ia32_kandnhi
__builtin_ia32_kmovw
__builtin_ia32_knothi
__builtin_ia32_korhi
__builtin_ia32_kortestchi
__builtin_ia32_kortestzhi
__builtin_ia32_kshiftlihi
__builtin_ia32_kshiftrihi
__builtin_ia32_kunpckhi
__builtin_ia32_kxnorhi
__builtin_ia32_kxorhi
__builtin_ia32_loadapd512_mask
__builtin_ia32_loadaps512_mask
__builtin_ia32_loaddqudi512_mask
__builtin_ia32_loaddqusi512_mask
__builtin_ia32_loadsd_mask
__builtin_ia32_loadss_mask
__builtin_ia32_loadupd512_mask
__builtin_ia32_loadups512_mask
__builtin_ia32_maxpd512_mask
__builtin_ia32_maxps512_mask
__builtin_ia32_maxsd_mask_round
__builtin_ia32_maxsd_round
__builtin_ia32_maxss_mask_round
__builtin_ia32_maxss_round
__builtin_ia32_minpd512_mask
__builtin_ia32_minps512_mask
__builtin_ia32_minsd_mask_round
__builtin_ia32_minsd_round
__builtin_ia32_minss_mask_round
__builtin_ia32_minss_round
__builtin_ia32_movapd512_mask
__builtin_ia32_movaps512_mask
__builtin_ia32_movddup512_mask
__builtin_ia32_movdqa32_512_mask
__builtin_ia32_movdqa32load512_mask
__builtin_ia32_movdqa32store512_mask
__builtin_ia32_movdqa64_512_mask
__builtin_ia32_movdqa64load512_mask
__builtin_ia32_movdqa64store512_mask
__builtin_ia32_movesd_mask
__builtin_ia32_movess_mask
__builtin_ia32_movntdq512
__builtin_ia32_movntdqa512
__builtin_ia32_movntpd512
__builtin_ia32_movntps512
__builtin_ia32_movshdup512_mask
__builtin_ia32_movsldup512_mask
__builtin_ia32_mulpd512_mask
__builtin_ia32_mulps512_mask
__builtin_ia32_mulsd_mask_round
__builtin_ia32_mulsd_round
__builtin_ia32_mulss_mask_round
__builtin_ia32_mulss_round
__builtin_ia32_pabsd512_mask
__builtin_ia32_pabsq512_mask
__builtin_ia32_paddd512_mask
__builtin_ia32_paddq512_mask
__builtin_ia32_pandd512_mask
__builtin_ia32_pandnd512_mask
__builtin_ia32_pandnq512_mask
__builtin_ia32_pandq512_mask
__builtin_ia32_pbroadcastd512
__builtin_ia32_pbroadcastd512_gpr_mask
__builtin_ia32_pbroadcastq512
__builtin_ia32_pbroadcastq512_gpr_mask
__builtin_ia32_pcmpeqd512_mask
__builtin_ia32_pcmpeqq512_mask
__builtin_ia32_pcmpgtd512_mask
__builtin_ia32_pcmpgtq512_mask
__builtin_ia32_pd512_256pd
__builtin_ia32_pd512_pd
__builtin_ia32_permdf512_mask
__builtin_ia32_permdi512_mask
__builtin_ia32_permvardf512_mask
__builtin_ia32_permvardi512_mask
__builtin_ia32_permvarsf512_mask
__builtin_ia32_permvarsi512_mask
__builtin_ia32_pmaxsd512_mask
__builtin_ia32_pmaxsq512_mask
__builtin_ia32_pmaxud512_mask
__builtin_ia32_pmaxuq512_mask
__builtin_ia32_pminsd512_mask
__builtin_ia32_pminsq512_mask
__builtin_ia32_pminud512_mask
__builtin_ia32_pminuq512_mask
__builtin_ia32_pmovdb512_mask
__builtin_ia32_pmovdb512mem_mask
__builtin_ia32_pmovdw512_mask
__builtin_ia32_pmovdw512mem_mask
__builtin_ia32_pmovqb512_mask
__builtin_ia32_pmovqb512mem_mask
__builtin_ia32_pmovqd512_mask
__builtin_ia32_pmovqd512mem_mask
__builtin_ia32_pmovqw512_mask
__builtin_ia32_pmovqw512mem_mask
__builtin_ia32_pmovsdb512_mask
__builtin_ia32_pmovsdb512mem_mask
__builtin_ia32_pmovsdw512_mask
__builtin_ia32_pmovsdw512mem_mask
__builtin_ia32_pmovsqb512_mask
__builtin_ia32_pmovsqb512mem_mask
__builtin_ia32_pmovsqd512_mask
__builtin_ia32_pmovsqd512mem_mask
__builtin_ia32_pmovsqw512_mask
__builtin_ia32_pmovsqw512mem_mask
__builtin_ia32_pmovsxbd512_mask
__builtin_ia32_pmovsxbq512_mask
__builtin_ia32_pmovsxdq512_mask
__builtin_ia32_pmovsxwd512_mask
__builtin_ia32_pmovsxwq512_mask
__builtin_ia32_pmovusdb512_mask
__builtin_ia32_pmovusdb512mem_mask
__builtin_ia32_pmovusdw512_mask
__builtin_ia32_pmovusdw512mem_mask
__builtin_ia32_pmovusqb512_mask
__builtin_ia32_pmovusqb512mem_mask
__builtin_ia32_pmovusqd512_mask
__builtin_ia32_pmovusqd512mem_mask
__builtin_ia32_pmovusqw512_mask
__builtin_ia32_pmovusqw512mem_mask
__builtin_ia32_pmovzxbd512_mask
__builtin_ia32_pmovzxbq512_mask
__builtin_ia32_pmovzxdq512_mask
__builtin_ia32_pmovzxwd512_mask
__builtin_ia32_pmovzxwq512_mask
__builtin_ia32_pmuldq512_mask
__builtin_ia32_pmulld512_mask
__builtin_ia32_pmuludq512_mask
__builtin_ia32_pord512_mask
__builtin_ia32_porq512_mask
__builtin_ia32_prold512_mask
__builtin_ia32_prolq512_mask
__builtin_ia32_prolvd512_mask
__builtin_ia32_prolvq512_mask
__builtin_ia32_prord512_mask
__builtin_ia32_prorq512_mask
__builtin_ia32_prorvd512_mask
__builtin_ia32_prorvq512_mask
__builtin_ia32_ps512_256ps
__builtin_ia32_ps512_ps
__builtin_ia32_pshufd512_mask
__builtin_ia32_pslld512_mask
__builtin_ia32_pslldi512_mask
__builtin_ia32_psllq512_mask
__builtin_ia32_psllqi512_mask
__builtin_ia32_psllv16si_mask
__builtin_ia32_psllv8di_mask
__builtin_ia32_psrad512_mask
__builtin_ia32_psradi512_mask
__builtin_ia32_psraq512_mask
__builtin_ia32_psraqi512_mask
__builtin_ia32_psrav16si_mask
__builtin_ia32_psrav8di_mask
__builtin_ia32_psrld512_mask
__builtin_ia32_psrldi512_mask
__builtin_ia32_psrlq512_mask
__builtin_ia32_psrlqi512_mask
__builtin_ia32_psrlv16si_mask
__builtin_ia32_psrlv8di_mask
__builtin_ia32_psubd512_mask
__builtin_ia32_psubq512_mask
__builtin_ia32_pternlogd512_mask
__builtin_ia32_pternlogd512_maskz
__builtin_ia32_pternlogq512_mask
__builtin_ia32_pternlogq512_maskz
__builtin_ia32_ptestmd512
__builtin_ia32_ptestmq512
__builtin_ia32_ptestnmd512
__builtin_ia32_ptestnmq512
__builtin_ia32_punpckhdq512_mask
__builtin_ia32_punpckhqdq512_mask
__builtin_ia32_punpckldq512_mask
__builtin_ia32_punpcklqdq512_mask
__builtin_ia32_pxord512_mask
__builtin_ia32_pxorq512_mask
__builtin_ia32_rcp14pd512_mask
__builtin_ia32_rcp14ps512_mask
__builtin_ia32_rcp14sd
__builtin_ia32_rcp14sd_mask
__builtin_ia32_rcp14ss
__builtin_ia32_rcp14ss_mask
__builtin_ia32_rndscalepd_mask
__builtin_ia32_rndscaleps_mask
__builtin_ia32_rndscalesd_round
__builtin_ia32_rndscaless_round
__builtin_ia32_rsqrt14pd512_mask
__builtin_ia32_rsqrt14ps512_mask
__builtin_ia32_rsqrt14sd
__builtin_ia32_rsqrt14sd_mask
__builtin_ia32_rsqrt14ss
__builtin_ia32_rsqrt14ss_mask
__builtin_ia32_scalefpd512_mask
__builtin_ia32_scalefps512_mask
__builtin_ia32_scalefsd_mask_round
__builtin_ia32_scalefss_mask_round
__builtin_ia32_scatterdiv16sf
__builtin_ia32_scatterdiv16si
__builtin_ia32_scatterdiv8df
__builtin_ia32_scatterdiv8di
__builtin_ia32_scattersiv16sf
__builtin_ia32_scattersiv16si
__builtin_ia32_scattersiv8df
__builtin_ia32_scattersiv8di
__builtin_ia32_shuf_f32x4_mask
__builtin_ia32_shuf_f64x2_mask
__builtin_ia32_shuf_i32x4_mask
__builtin_ia32_shuf_i64x2_mask
__builtin_ia32_shufpd512_mask
__builtin_ia32_shufps512_mask
__builtin_ia32_si512_256si
__builtin_ia32_si512_si
__builtin_ia32_sqrtpd512_mask
__builtin_ia32_sqrtps512_mask
__builtin_ia32_sqrtsd_mask_round
__builtin_ia32_sqrtss_mask_round
__builtin_ia32_storeapd512_mask
__builtin_ia32_storeaps512_mask
__builtin_ia32_storedqudi512_mask
__builtin_ia32_storedqusi512_mask
__builtin_ia32_storesd_mask
__builtin_ia32_storess_mask
__builtin_ia32_storeupd512_mask
__builtin_ia32_storeups512_mask
__builtin_ia32_subpd512_mask
__builtin_ia32_subps512_mask
__builtin_ia32_subsd_mask_round
__builtin_ia32_subsd_round
__builtin_ia32_subss_mask_round
__builtin_ia32_subss_round
__builtin_ia32_ucmpd512_mask
__builtin_ia32_ucmpq512_mask
__builtin_ia32_unpckhpd512_mask
__builtin_ia32_unpckhps512_mask
__builtin_ia32_unpcklpd512_mask
__builtin_ia32_unpcklps512_mask
__builtin_ia32_vcomisd
__builtin_ia32_vcomiss
__builtin_ia32_vcvtph2ps512_mask
__builtin_ia32_vcvtps2ph512_mask
__builtin_ia32_vcvtsd2si32
__builtin_ia32_vcvtsd2si64
__builtin_ia32_vcvtsd2usi32
__builtin_ia32_vcvtsd2usi64
__builtin_ia32_vcvtss2si32
__builtin_ia32_vcvtss2si64
__builtin_ia32_vcvtss2usi32
__builtin_ia32_vcvtss2usi64
__builtin_ia32_vcvttsd2si32
__builtin_ia32_vcvttsd2si64
__builtin_ia32_vcvttsd2usi32
__builtin_ia32_vcvttsd2usi64
__builtin_ia32_vcvttss2si32
__builtin_ia32_vcvttss2si64
__builtin_ia32_vcvttss2usi32
__builtin_ia32_vcvttss2usi64
__builtin_ia32_vfmaddpd512_mask
__builtin_ia32_vfmaddpd512_mask3
__builtin_ia32_vfmaddpd512_maskz
__builtin_ia32_vfmaddps512_mask
__builtin_ia32_vfmaddps512_mask3
__builtin_ia32_vfmaddps512_maskz
__builtin_ia32_vfmaddsd3_mask
__builtin_ia32_vfmaddsd3_mask3
__builtin_ia32_vfmaddsd3_maskz
__builtin_ia32_vfmaddsd3_round
__builtin_ia32_vfmaddss3_mask
__builtin_ia32_vfmaddss3_mask3
__builtin_ia32_vfmaddss3_maskz
__builtin_ia32_vfmaddss3_round
__builtin_ia32_vfmaddsubpd512_mask
__builtin_ia32_vfmaddsubpd512_mask3
__builtin_ia32_vfmaddsubpd512_maskz
__builtin_ia32_vfmaddsubps512_mask
__builtin_ia32_vfmaddsubps512_mask3
__builtin_ia32_vfmaddsubps512_maskz
__builtin_ia32_vfmsubaddpd512_mask3
__builtin_ia32_vfmsubaddps512_mask3
__builtin_ia32_vfmsubpd512_mask
__builtin_ia32_vfmsubpd512_mask3
__builtin_ia32_vfmsubpd512_maskz
__builtin_ia32_vfmsubps512_mask
__builtin_ia32_vfmsubps512_mask3
__builtin_ia32_vfmsubps512_maskz
__builtin_ia32_vfmsubsd3_mask3
__builtin_ia32_vfmsubss3_mask3
__builtin_ia32_vfnmaddpd512_mask
__builtin_ia32_vfnmaddpd512_mask3
__builtin_ia32_vfnmaddpd512_maskz
__builtin_ia32_vfnmaddps512_mask
__builtin_ia32_vfnmaddps512_mask3
__builtin_ia32_vfnmaddps512_maskz
__builtin_ia32_vfnmsubpd512_mask
__builtin_ia32_vfnmsubpd512_mask3
__builtin_ia32_vfnmsubpd512_maskz
__builtin_ia32_vfnmsubps512_mask
__builtin_ia32_vfnmsubps512_mask3
__builtin_ia32_vfnmsubps512_maskz
__builtin_ia32_vpermi2vard512_mask
__builtin_ia32_vpermi2varpd512_mask
__builtin_ia32_vpermi2varps512_mask
__builtin_ia32_vpermi2varq512_mask
__builtin_ia32_vpermilpd512_mask
__builtin_ia32_vpermilps512_mask
__builtin_ia32_vpermilvarpd512_mask
__builtin_ia32_vpermilvarps512_mask
__builtin_ia32_vpermt2vard512_mask
__builtin_ia32_vpermt2vard512_maskz
__builtin_ia32_vpermt2varpd512_mask
__builtin_ia32_vpermt2varpd512_maskz
__builtin_ia32_vpermt2varps512_mask
__builtin_ia32_vpermt2varps512_maskz
__builtin_ia32_vpermt2varq512_mask
__builtin_ia32_vpermt2varq512_maskz
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Základ AVX-512: AVX-512F (foundation)</h2>

<p>Všechny mikroprocesory, které podporují nějaké podmnožiny <i>AVX-512</i>
musí v&nbsp;každém případě podporovat minimálně podmnožinu označovanou
<i>AVX-512F</i>, kde <i>F</i> je odvozeno od slova <i>foundation</i>. Jedná se
o základní sadu, která rozšiřuje většinu instrukcí z&nbsp;původního <i>AVX</i>
takovým způsobem, že se namísto vektorů o délce 256 bitů pracuje s&nbsp;vektory
o délce 512 bitů. Taktéž se změnila resp.&nbsp;rozšířila sémantika mnohých
instrukcí díky zavedení maskovacích registrů <strong>k0</strong> až
<strong>k7</strong>, z&nbsp;nichž každý má v&nbsp;<i>AVX-512F</i> šířku
šestnácti bitů. Významem těchto registrů se budeme zabývat <a
href="#k05">v&nbsp;páté kapitole</a> i v&nbsp;kapitolách navazujících. A
nesmíme zapomenout na to, že se (opět!, pokolikáté už?) změnilo kódování
instrukcí. Nové kódování se jmenuje <i>EVEX</i>, což je zkratka z&nbsp;označení
<i>Enhanced Vector Extension</i>. Díky EVEX je možné pracovat s&nbsp;32 SIMD
registry, specifikovat již zmíněné maskovací registry, provádět takzvaný
<i>broadcasting</i> atd.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Maskovací registry <strong>k0</strong> až <strong>k7</strong></h2>

<p>Novinkou v&nbsp;AVX-512F jsou maskovací registry <strong>k0</strong> až
<strong>k7</strong>. Jedná se o šestnáctibitové registry, teprve později
(konkrétně v&nbsp;AVX-512BW) došlo k&nbsp;jejich rozšíření na 64 bitů.
Jednotlivé bity v&nbsp;těchto registrech slouží jako maska, například pro
operace součtu, nebo tyto bity slouží k&nbsp;rozhodování, zda bude operace
provedena s&nbsp;prvkem prvního vstupního vektoru nebo naopak s&nbsp;prvkem
získaným z&nbsp;vektoru druhého. Původně mnohdy čistě vektorové operace
prováděné se všemi prvky vektorů se tak &bdquo;rozpadají&ldquo; na podmíněné
operace, přičemž podmínky jsou zakódovány do bitů zvoleného maskovacího
registru. Maskovací registry ovšem mohou sloužit naopak i pro uložení výsledků
nějakých operací &ndash; například porovnání prvků ze dvou vstupních registrů
atd. A konečně, vzhledem k&nbsp;tomu, že se jedná o šestnáctibitové hodnoty,
lze s&nbsp;maskovacími registry provádět některé bitové operace, bitové posuny
atd.</p>

<p><div class="rs-tip-major">Poznámka: snadno zjistíme, že 16bitové maskovací
registry mohou sloužit pro operace s&nbsp;vektory s&nbsp;prvky typu
<i>double</i>, <i>single/float</i>, <i>int32</i> a <i>int64</i>, ovšem nikoli
pro <i>int16</i> či <i>byte/char</i>.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Operace prováděné přímo s&nbsp;maskovacími registry</h2>

<p>V&nbsp;případě, že se zaměříme &bdquo;pouze&ldquo; na rozšíření AVX-512F,
lze říci, že všechny maskovací registry obsahují šestnáctibitové hodnoty
(masky), které lze využít v&nbsp;instrukcích popsaných v&nbsp;navazující
kapitole. V&nbsp;instrukční sadě nalezneme i několik instrukcí, které se
používají přímo pro manipulaci s&nbsp;obsahem maskovacích registrů, a to
prakticky stejně, jakoby se jednalo o běžné šestnáctibitové celočíselné
registry. Jedná se o tyto operace:</p>

<table>
<tr><th> #</th><th>Instrukce</th><th>Stručný popis instrukce</th></tr>
<tr><td> 1</td><td><a href="https://www.felixcloutier.com/x86/kmovw:kmovb:kmovq:kmovd">KMOV</a></td><td>načtení konstanty do maskovacího registru nebo převod hodnot mezi dvojicí registrů</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 2</td><td><a href="https://www.felixcloutier.com/x86/knotw:knotb:knotq:knotd">KNOT</a></td><td>negace obsahu zvoleného maskovacího registru</td></tr>
<tr><td> 3</td><td><a href="https://www.felixcloutier.com/x86/kandw:kandb:kandq:kandd">KAND</a></td><td>provedení bitové operace AND se dvěma maskovacími registry</td></tr>
<tr><td> 4</td><td><a href="https://www.felixcloutier.com/x86/kandnw:kandnb:kandnq:kandnd">KANDN</a></td><td>provedení bitové operace AND NOT se dvěma maskovacími registry</td></tr>
<tr><td> 5</td><td><a href="https://www.felixcloutier.com/x86/korw:korb:korq:kord">KOR</a></td>provedení bitové operace OR se dvěma maskovacími registry<td></td></tr>
<tr><td> 6</td><td><a href="https://www.felixcloutier.com/x86/kxorw:kxorb:kxorq:kxord">KXOR</a></td><td>provedení bitové operace XOR se dvěma maskovacími registry</td></tr>
<tr><td> 7</td><td><a href="https://www.felixcloutier.com/x86/kxnorw:kxnorb:kxnorq:kxnord">KXNOR</a></td><td>provedení bitové operace XNOR se dvěma maskovacími registry</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td><a href="https://www.felixcloutier.com/x86/kortestw:kortestb:kortestq:kortestd">KORTEST</a></td><td>operace OR s&nbsp;nastavením příznaků Zero (všechny bity nulové) a Carry (všechny bity výsledku jedničkové)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td><a href="https://www.felixcloutier.com/x86/kshiftlw:kshiftlb:kshiftlq:kshiftld">KSHIFTL</a></td><td>bitový posun doleva o <i>n</i> bitů</td></tr>
<tr><td>10</td><td><a href="https://www.felixcloutier.com/x86/kshiftrw:kshiftrb:kshiftrq:kshiftrd">KSHIFTR</a></td><td>bitový posun doprava o <i>n</i> bitů</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td><a href="https://www.felixcloutier.com/x86/kunpckbw:kunpckwd:kunpckdq">KUNPCK</a></td><td>kombinace spodní poloviny dvou maskovacích registrů do registru cílového</td></tr>
</table>



<p><a name="k07"></a></p>
<h2 id="k07">7. Intrinsic pro operace prováděné přímo s&nbsp;maskovacími registry</h2>

<p>Vyzkoušejme si nyní ty intrinsic, které lze v&nbsp;GCC použít pro instrukce
popsané v&nbsp;rámci <a href="#k06">předchozí kapitoly</a>. Provedeme několik
bitových operací s&nbsp;maskovacími registry:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;immintrin.h&gt;
&nbsp;
int main(void)
{
    short unsigned int x = 2;
    short unsigned int y = 3;
    short unsigned int z;
&nbsp;
    z = <strong>__builtin_ia32_kandhi(x, y);</strong>
    printf("and: %d\n", z);
&nbsp;
    z = <strong>__builtin_ia32_kandnhi(x, y);</strong>
    printf("and not: %d\n", z);
&nbsp;
    z = <strong>__builtin_ia32_korhi(x, y);</strong>
    printf("or: %d\n", z);
&nbsp;
    z = <strong>__builtin_ia32_kxorhi(x, y);</strong>
    printf("xor: %d\n", z);
&nbsp;
    z = <strong>__builtin_ia32_kxnorhi(x, y);</strong>
    printf("xnor: %d\n", z);
&nbsp;
    return 0;
}
</pre>

<p>Po překladu (s&nbsp;přepínačem <strong>-mavx512f</strong>) a spuštění by se
měla vypsat tato pětice řádků:</p>

<pre>
and: 2
and not: 1
or: 3
xor: 1
xnor: 65534
</pre>

<p>Z&nbsp;objektového kódu a disassemblovaného výstupu je patrné, že nové
instrukce pro manipulaci s&nbsp;maskovacími registry jsou zakódovány do pouhých
čtyř bajtů, což je na platformě x86-64 skoro zázrak:</p>

<pre>
    <i>z = __builtin_ia32_kandhi(x, y);</i>
  18:   0f b7 45 fc             movzx  eax,WORD PTR [rbp-0x4]
  1c:   0f b7 55 fa             movzx  edx,WORD PTR [rbp-0x6]
  20:   c5 f8 92 ca             kmovw  k1,edx
  24:   c5 f8 92 d0             kmovw  k2,eax
  28:   c5 f4 41 c2             <strong>kandw  k0,k1,k2</strong>
  2c:   c5 f8 91 45 fe          kmovw  WORD PTR [rbp-0x2],k0
&nbsp;
    <i>z = __builtin_ia32_kandnhi(x, y);</i>
  48:   0f b7 45 fc             movzx  eax,WORD PTR [rbp-0x4]
  4c:   0f b7 55 fa             movzx  edx,WORD PTR [rbp-0x6]
  50:   c5 f8 92 da             kmovw  k3,edx
  54:   c5 f8 92 e0             kmovw  k4,eax
  58:   c5 e4 42 c4             <strong>kandnw k0,k3,k4</strong>
  5c:   c5 f8 91 45 fe          kmovw  WORD PTR [rbp-0x2],k0
&nbsp;
    <i>z = __builtin_ia32_korhi(x, y);</i>
  78:   0f b7 45 fc             movzx  eax,WORD PTR [rbp-0x4]
  7c:   0f b7 55 fa             movzx  edx,WORD PTR [rbp-0x6]
  80:   c5 f8 92 ea             kmovw  k5,edx
  84:   c5 f8 92 f0             kmovw  k6,eax
  88:   c5 d4 45 c6             <strong>korw   k0,k5,k6</strong>
  8c:   c5 f8 91 45 fe          kmovw  WORD PTR [rbp-0x2],k0
&nbsp;
    <i>z = __builtin_ia32_kxorhi(x, y);</i>
  a8:   0f b7 45 fc             movzx  eax,WORD PTR [rbp-0x4]
  ac:   0f b7 55 fa             movzx  edx,WORD PTR [rbp-0x6]
  b0:   c5 f8 92 fa             kmovw  k7,edx
  b4:   c5 f8 92 c8             kmovw  k1,eax
  b8:   c5 c4 47 c1             <strong>kxorw  k0,k7,k1</strong>
  bc:   c5 f8 91 45 fe          kmovw  WORD PTR [rbp-0x2],k0
&nbsp;
    <i>z = __builtin_ia32_kxnorhi(x, y);</i>
  d8:   0f b7 45 fc             movzx  eax,WORD PTR [rbp-0x4]
  dc:   0f b7 55 fa             movzx  edx,WORD PTR [rbp-0x6]
  e0:   c5 f8 92 d2             kmovw  k2,edx
  e4:   c5 f8 92 d8             kmovw  k3,eax
  e8:   c5 ec 46 c3             <strong>kxnorw k0,k2,k3</strong>
  ec:   c5 f8 91 45 fe          kmovw  WORD PTR [rbp-0x2],k0
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Instrukce, v&nbsp;nichž se využívají nové maskovací registry</h2>

<p>V&nbsp;instrukční sadě AVX-512F se nachází poměrně velké množství instrukcí,
v&nbsp;nichž se využívají nové maskovací registry popsané v&nbsp;rámci
předchozích dvou kapitol. Tyto nové či upravené instrukce můžeme rozdělit do
několika kategorií.</p>

<p>Smíchání obsahu dvou registrů, tj.&nbsp;výběr, jak se vyberou prvky do
cílového registru na základě bitové masky:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis instrukce</th></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vblendmpd:vblendmps">VBLENDMPD</a></td><td>smíchání obsahu dvou registrů s&nbsp;prvky typu <i>double</i></td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vblendmpd:vblendmps">VBLENDMPS</a></td><td>smíchání obsahu dvou registrů s&nbsp;prvky typu <i>single/float</i></td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpblendmd:vpblendmq">VPBLENDMD</a></td><td>smíchání obsahu dvou registrů s&nbsp;prvky typu <i>int32</i></td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpblendmd:vpblendmq">VPBLENDMQ</a></td><td>smíchání obsahu dvou registrů s&nbsp;prvky typu <i>int64</i></td></tr>
</table>

<p>Porovnání obsahu dvou registrů vybranou operací (EQ, LT, LE atd.), přičemž
výsledek je uložen do maskovacího registru:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis instrukce</th></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpcmpd:vpcmpud">VPCMPD</a></td><td>porovnání obsahu dvou registrů s&nbsp;prvky typu <i>int32</i> s&nbsp;nastavením příznaků v&nbsp;maskovacím registru</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpcmpd:vpcmpud">VPCMPUD</a></td><td>porovnání obsahu dvou registrů s&nbsp;prvky typu <i>uint32</i> s&nbsp;nastavením příznaků v&nbsp;maskovacím registru</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpcmpq:vpcmpuq">VPCMPQ</a></td><td>porovnání obsahu dvou registrů s&nbsp;prvky typu <i>int64</i> s&nbsp;nastavením příznaků v&nbsp;maskovacím registru</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpcmpq:vpcmpuq">VPCMPUQ</a></td><td>porovnání obsahu dvou registrů s&nbsp;prvky typu <i>uint64</i> s&nbsp;nastavením příznaků v&nbsp;maskovacím registru</td></tr>
</table>

<p>Provedení logické operace AND nebo NAND nad registry, výsledek (0 nebo 1) se uloží do zvoleného maskovacího registru:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis instrukce</th></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vptestmb:vptestmw:vptestmd:vptestmq">VPTESTMD</a></td><td>logická operace AND pro vektor s&nbsp;32bitovými celými čísly</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vptestmb:vptestmw:vptestmd:vptestmq">VPTESTMQ</a></td><td>logická operace AND pro vektor s&nbsp;64bitovými celými čísly</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vptestmb:vptestmw:vptestmd:vptestmq">VPTESTNMD</a></td><td>logická operace NAND pro vektor s&nbsp;32bitovými celými čísly</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vptestmb:vptestmw:vptestmd:vptestmq">VPTESTNMQ</a></td><td>logická operace NAND pro vektor s&nbsp;64bitovými celými čísly</td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Instrinsic pro instrukce <strong>vblendmps</strong> a <strong>addps</strong> s&nbsp;maskou</h2>

<p>Podívejme se nyní na způsob použití některých instrukcí, v&nbsp;nichž se
využívají maskovací registry resp.&nbsp;bitová maska. Nejdříve si ukážeme
intrinsic nazvaný <strong>__builtin_ia32_blendmps_512_mask</strong>, která
implementuje instrukci typu <strong>vblendmps</strong>. Připomeňme si, že tato
instrukce promíchá prvky dvou vektorů, přičemž každý vektor obsahuje šestnáct
hodnot typu <i>single/float</i>. Promíchání se děje na základě obsahu
maskovacího registru &ndash; pokud n-tý bit tohoto registru obsahuje logickou
nulu, bude n-tý prvek výsledného vektoru získán z&nbsp;vektoru prvního,
v&nbsp;opačném případě z&nbsp;vektoru druhého:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;immintrin.h&gt;
&nbsp;
int main(void)
{
    __v16sf x = { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0 };
    __v16sf y = { 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6 };
    __v16sf z;
    int i;
&nbsp;
    z = <strong>__builtin_ia32_blendmps_512_mask(x, y, 0x0000);</strong>
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
    }
&nbsp;
    putchar('\n');
&nbsp;
    z = <strong>__builtin_ia32_blendmps_512_mask(x, y, 0x1111);</strong>
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
    }
&nbsp;
    putchar('\n');
&nbsp;
    z = <strong>__builtin_ia32_blendmps_512_mask(x, y, 0x5555);</strong>
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
    }
&nbsp;
    putchar('\n');
&nbsp;
    z = <strong>__builtin_ia32_blendmps_512_mask(x, y, 0xffff);</strong>
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
    }
&nbsp;
    return 0;
}
</pre>

<p>Výsledky získané po překladu a spuštění tohoto příkladu ukazují, jak fungují
jednotlivé šestnáctibitové masky:</p>

<pre>
 0 1.000000 0.100000 1.000000
 1 2.000000 0.200000 2.000000
 2 3.000000 0.300000 3.000000
 3 4.000000 0.400000 4.000000
 4 5.000000 0.500000 5.000000
 5 6.000000 0.600000 6.000000
 6 7.000000 0.700000 7.000000
 7 8.000000 0.800000 8.000000
 8 9.000000 0.900000 9.000000
 9 10.000000 1.100000 10.000000
10 11.000000 1.100000 11.000000
11 12.000000 1.200000 12.000000
12 13.000000 1.300000 13.000000
13 14.000000 1.400000 14.000000
14 15.000000 1.500000 15.000000
15 16.000000 1.600000 16.000000
&nbsp;
 0 1.000000 0.100000 0.100000
 1 2.000000 0.200000 2.000000
 2 3.000000 0.300000 3.000000
 3 4.000000 0.400000 4.000000
 4 5.000000 0.500000 0.500000
 5 6.000000 0.600000 6.000000
 6 7.000000 0.700000 7.000000
 7 8.000000 0.800000 8.000000
 8 9.000000 0.900000 0.900000
 9 10.000000 1.100000 10.000000
10 11.000000 1.100000 11.000000
11 12.000000 1.200000 12.000000
12 13.000000 1.300000 1.300000
13 14.000000 1.400000 14.000000
14 15.000000 1.500000 15.000000
15 16.000000 1.600000 16.000000
&nbsp;
 0 1.000000 0.100000 0.100000
 1 2.000000 0.200000 2.000000
 2 3.000000 0.300000 0.300000
 3 4.000000 0.400000 4.000000
 4 5.000000 0.500000 0.500000
 5 6.000000 0.600000 6.000000
 6 7.000000 0.700000 0.700000
 7 8.000000 0.800000 8.000000
 8 9.000000 0.900000 0.900000
 9 10.000000 1.100000 10.000000
10 11.000000 1.100000 1.100000
11 12.000000 1.200000 12.000000
12 13.000000 1.300000 1.300000
13 14.000000 1.400000 14.000000
14 15.000000 1.500000 1.500000
15 16.000000 1.600000 16.000000
&nbsp;
 0 1.000000 0.100000 0.100000
 1 2.000000 0.200000 0.200000
 2 3.000000 0.300000 0.300000
 3 4.000000 0.400000 0.400000
 4 5.000000 0.500000 0.500000
 5 6.000000 0.600000 0.600000
 6 7.000000 0.700000 0.700000
 7 8.000000 0.800000 0.800000
 8 9.000000 0.900000 0.900000
 9 10.000000 1.100000 1.100000
10 11.000000 1.100000 1.100000
11 12.000000 1.200000 1.200000
12 13.000000 1.300000 1.300000
13 14.000000 1.400000 1.400000
14 15.000000 1.500000 1.500000
15 16.000000 1.600000 1.600000
</pre>

<p>Způsob překladu výše uvedené intrinsic do objektového kódu a do assembleru
(nenechte se zmýlit odlišným jménem instrukce v&nbsp;GNU toolchainu):</p>

<pre>
    <i>z = __builtin_ia32_blendmps_512_mask(x, y, 0x0000);</i>
  55:   62 f1 7c 48 28 8d 10    vmovaps zmm1,ZMMWORD PTR [rbp-0xf0]
  5c:   ff ff ff 
  5f:   62 f1 7c 48 28 85 d0    vmovaps zmm0,ZMMWORD PTR [rbp-0x130]
  66:   fe ff ff 
  69:   c5 f4 47 c9             kxorw  k1,k1,k1
  6d:   62 f1 7c 49 28 c1       <strong>vmovaps zmm0{k1},zmm1</strong>
  73:   62 f1 7c 48 29 85 50    vmovaps ZMMWORD PTR [rbp-0xb0],zmm0
  7a:   ff ff ff 
&nbsp;
    <i>z = __builtin_ia32_blendmps_512_mask(x, y, 0x1111);</i>
  fd:   62 f1 7c 48 28 8d 10    vmovaps zmm1,ZMMWORD PTR [rbp-0xf0]
 104:   ff ff ff 
 107:   62 f1 7c 48 28 85 d0    vmovaps zmm0,ZMMWORD PTR [rbp-0x130]
 10e:   fe ff ff 
 111:   b8 11 11 00 00          mov    eax,0x1111
 116:   c5 f8 92 d0             kmovw  k2,eax
 11a:   62 f1 7c 4a 28 c1       <strong>vmovaps zmm0{k2},zmm1</strong>
 120:   62 f1 7c 48 29 85 50    vmovaps ZMMWORD PTR [rbp-0xb0],zmm0
 127:   ff ff ff
&nbsp;
    <i>z = __builtin_ia32_blendmps_512_mask(x, y, 0x5555);</i>
 1aa:   62 f1 7c 48 28 8d 10    vmovaps zmm1,ZMMWORD PTR [rbp-0xf0]
 1b1:   ff ff ff 
 1b4:   62 f1 7c 48 28 85 d0    vmovaps zmm0,ZMMWORD PTR [rbp-0x130]
 1bb:   fe ff ff 
 1be:   b8 55 55 00 00          mov    eax,0x5555
 1c3:   c5 f8 92 d8             kmovw  k3,eax
 1c7:   62 f1 7c 4b 28 c1       <strong>vmovaps zmm0{k3},zmm1</strong>
 1cd:   62 f1 7c 48 29 85 50    vmovaps ZMMWORD PTR [rbp-0xb0],zmm0
 1d4:   ff ff ff 
&nbsp;
    <i>z = __builtin_ia32_blendmps_512_mask(x, y, 0xffff);</i>
 257:   62 f1 7c 48 28 8d 10    vmovaps zmm1,ZMMWORD PTR [rbp-0xf0]
 25e:   ff ff ff 
 261:   62 f1 7c 48 28 85 d0    vmovaps zmm0,ZMMWORD PTR [rbp-0x130]
 268:   fe ff ff 
 26b:   c5 f4 46 c9             kxnorw k1,k1,k1
 26f:   62 f1 7c 49 28 c1       <strong>vmovaps zmm0{k1},zmm1</strong>
 275:   62 f1 7c 48 29 85 50    vmovaps ZMMWORD PTR [rbp-0xb0],zmm0
 27c:   ff ff ff 
</pre>

<p>V&nbsp;dalším demonstračním příkladu si ukážeme způsob použití intrinsic
nazvané <strong>__builtin_ia32_addps512_mask</strong>. Podle názvu této
intrinsic je zřejmé, že provádí vektorový součet, ovšem s&nbsp;využitím masky.
Této intrinsic se předává trojice vektorů, maskovací registr
(resp.&nbsp;přesněji řečeno hodnota, jenž se do maskovacího registru uloží) a
taktéž parametr určující způsob zaokrouhlení. Zajímavé bude zjistit, jak se
vlastně chová maska a proč se vůbec této instrukci předává trojice vektorů a
nikoli jen dvojice. Podívejme se tedy nejdříve na zdrojový kód demonstračního
příkladu:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;immintrin.h&gt;
&nbsp;
int main(void)
{
    __v16sf x = { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0 };
    __v16sf y = { 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6 };
    __v16sf z = -x;
    __v16sf w;
    int i;
&nbsp;
    w = <strong>__builtin_ia32_addps512_mask(x, y, z, 0, _MM_FROUND_CUR_DIRECTION)</strong>;
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d  %5.1f  %5.1f  %5.1f  %5.1f\n", i, x[i], y[i], z[i], w[i]);
    }
&nbsp;
    w = <strong>__builtin_ia32_addps512_mask(x, y, z, 0xf0f0, _MM_FROUND_CUR_DIRECTION)</strong>;
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d  %5.1f  %5.1f  %5.1f  %5.1f\n", i, x[i], y[i], z[i], w[i]);
    }
&nbsp;
    w = <strong>__builtin_ia32_addps512_mask(x, y, z, -1, _MM_FROUND_CUR_DIRECTION)</strong>;
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d  %5.1f  %5.1f  %5.1f  %5.1f\n", i, x[i], y[i], z[i], w[i]);
    }
&nbsp;
    return 0;
}
</pre>

<p>Výsledek výpočtů ukazuje, jak se vybírá operace součtu (dvou prvních
vstupních registrů) nebo pouhého přesunu (ze třetího vstupního registru) na
základě obsahu maskovacího registru:</p>

<pre>
 0    1.0    0.1   -1.0   -1.0
 1    2.0    0.2   -2.0   -2.0
 2    3.0    0.3   -3.0   -3.0
 3    4.0    0.4   -4.0   -4.0
 4    5.0    0.5   -5.0   -5.0
 5    6.0    0.6   -6.0   -6.0
 6    7.0    0.7   -7.0   -7.0
 7    8.0    0.8   -8.0   -8.0
 8    9.0    0.9   -9.0   -9.0
 9   10.0    1.1  -10.0  -10.0
10   11.0    1.1  -11.0  -11.0
11   12.0    1.2  -12.0  -12.0
12   13.0    1.3  -13.0  -13.0
13   14.0    1.4  -14.0  -14.0
14   15.0    1.5  -15.0  -15.0
15   16.0    1.6  -16.0  -16.0
&nbsp;
 0    1.0    0.1   -1.0   -1.0
 1    2.0    0.2   -2.0   -2.0
 2    3.0    0.3   -3.0   -3.0
 3    4.0    0.4   -4.0   -4.0
 4    5.0    0.5   -5.0    5.5
 5    6.0    0.6   -6.0    6.6
 6    7.0    0.7   -7.0    7.7
 7    8.0    0.8   -8.0    8.8
 8    9.0    0.9   -9.0   -9.0
 9   10.0    1.1  -10.0  -10.0
10   11.0    1.1  -11.0  -11.0
11   12.0    1.2  -12.0  -12.0
12   13.0    1.3  -13.0   14.3
13   14.0    1.4  -14.0   15.4
14   15.0    1.5  -15.0   16.5
15   16.0    1.6  -16.0   17.6
&nbsp;
 0    1.0    0.1   -1.0    1.1
 1    2.0    0.2   -2.0    2.2
 2    3.0    0.3   -3.0    3.3
 3    4.0    0.4   -4.0    4.4
 4    5.0    0.5   -5.0    5.5
 5    6.0    0.6   -6.0    6.6
 6    7.0    0.7   -7.0    7.7
 7    8.0    0.8   -8.0    8.8
 8    9.0    0.9   -9.0    9.9
 9   10.0    1.1  -10.0   11.1
10   11.0    1.1  -11.0   12.1
11   12.0    1.2  -12.0   13.2
12   13.0    1.3  -13.0   14.3
13   14.0    1.4  -14.0   15.4
14   15.0    1.5  -15.0   16.5
15   16.0    1.6  -16.0   17.6
</pre>

<p>Způsob překladu výše uvedené intrinsic do objektového kódu a do
assembleru:</p>

<pre>
    <i>w = __builtin_ia32_addps512_mask(x, y, z, 0, _MM_FROUND_CUR_DIRECTION);</i>
  79:   62 f1 7c 48 28 85 10    vmovaps zmm0,ZMMWORD PTR [rbp-0xf0]
  80:   ff ff ff 
  83:   62 f1 7c 48 28 8d d0    vmovaps zmm1,ZMMWORD PTR [rbp-0x130]
  8a:   fe ff ff 
  8d:   62 f1 7c 48 28 95 90    vmovaps zmm2,ZMMWORD PTR [rbp-0x170]
  94:   fe ff ff 
  97:   c5 f4 47 c9             kxorw  k1,k1,k1
  9b:   62 f1 6c 49 58 c1       <strong>vaddps zmm0{k1},zmm2,zmm1</strong>
  a1:   62 f1 7c 48 29 85 50    vmovaps ZMMWORD PTR [rbp-0xb0],zmm0
  a8:   ff ff ff 
&nbsp;
    <i>w = __builtin_ia32_addps512_mask(x, y, z, 0xf0f0, _MM_FROUND_CUR_DIRECTION);</i>
 136:   62 f1 7c 48 28 85 10    vmovaps zmm0,ZMMWORD PTR [rbp-0xf0]
 13d:   ff ff ff 
 140:   62 f1 7c 48 28 8d d0    vmovaps zmm1,ZMMWORD PTR [rbp-0x130]
 147:   fe ff ff 
 14a:   62 f1 7c 48 28 95 90    vmovaps zmm2,ZMMWORD PTR [rbp-0x170]
 151:   fe ff ff 
 154:   b8 f0 f0 ff ff          mov    eax,0xfffff0f0
 159:   c5 f8 92 d0             kmovw  k2,eax
 15d:   62 f1 6c 4a 58 c1       <strong>vaddps zmm0{k2},zmm2,zmm1</strong>
 163:   62 f1 7c 48 29 85 50    vmovaps ZMMWORD PTR [rbp-0xb0],zmm0
 16a:   ff ff ff 
&nbsp;
    <i>w = __builtin_ia32_addps512_mask(x, y, z, -1, _MM_FROUND_CUR_DIRECTION);</i>
 1f8:   62 f1 7c 48 28 85 10    vmovaps zmm0,ZMMWORD PTR [rbp-0xf0]
 1ff:   ff ff ff 
 202:   62 f1 7c 48 28 8d d0    vmovaps zmm1,ZMMWORD PTR [rbp-0x130]
 209:   fe ff ff 
 20c:   62 f1 7c 48 28 95 90    vmovaps zmm2,ZMMWORD PTR [rbp-0x170]
 213:   fe ff ff 
 216:   c5 f4 46 c9             kxnorw k1,k1,k1
 21a:   62 f1 6c 49 58 c1       <strong>vaddps zmm0{k1},zmm2,zmm1</strong>
 220:   62 f1 7c 48 29 85 50    vmovaps ZMMWORD PTR [rbp-0xb0],zmm0
 227:   ff ff ff 
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Komprese a expanze dat</h2>

<p>Nyní se dostáváme k&nbsp;zajímavé části AVX-512F. Jedná se o instrukce
určené ke &bdquo;kompresi&ldquo; a &bdquo;expanzi&ldquo; dat,
resp.&nbsp;přesněji řečeno prvků uložených ve vektorech. Na těchto operacích je
zajímavý fakt, že byly poprvé představeny <a
href="https://www.root.cz/vyhledavani/?qs=apl">v&nbsp;programovacím jazyku
APL</a>. Ovšem ukazuje se, že se jedná o užitečné operace, takže se staly
součástí mainstreamu. Jak však tyto operace pracují?</p>

<p>Podívejme se nejdříve na operaci <i>komprese</i>. Ta pracuje s&nbsp;dvojicí
vektorů &ndash; vektorem libovolných hodnot a bitovým vektorem. Do výsledného
vektoru se uloží (za sebou, tedy komprimovaně) pouze ty prvky ze vstupního
vektoru, pro které je odpovídající prvek bitového vektoru nastaven na jedničku.
Pro desetiprvkové vektory to může vypadat následovně:</p>

<pre>
compress([1 0 1 0 1 0 1 0 1 0], [1 2 3 4 5 6 7 8 9 10]) = [x x x x x 1 3 5 7 9]
compress([0 0 0 0 0 1 1 1 1 1], [1 2 3 4 5 6 7 8 9 10]) = [x x x x x 6 7 8 9 10]
compress([1 1 1 1 1 0 0 0 0 0], [1 2 3 4 5 6 7 8 9 10]) = [x x x x x 1 2 3 4 5]
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti se v&nbsp;AVX-512F
pracuje s&nbsp;dvojicí vstupních vektorů, takže se namísto hodnot
<strong>x</strong> doplní prvky ze druhého vektoru (a nikoli nuly).</div></p>

<p>Operace <i>expanze</i> naopak na vstupu očekává vektor
&bdquo;komprimovaných&ldquo; hodnot a bitový vektor. Výsledkem bude nový
vektor, do kterého jsou na příslušná místa přidány nulové prvky i prvky ze
vstupního vektoru: pokud je bit v&nbsp;bitovém vektoru jedničkový, je prvek
přečten ze vstupního vektoru, jinak je do výsledku přidána nula. Demonstrační
příklady ukážou přesně, jaká operace se provádí:</p>

<pre>
expand([0 0 0 0 0 1 1 1 1 1], [x x x x x 1 2 3 4 5], [0 0 0 0 0 1 2 3 4 5])
expand([1 0 1 0 1 0 1 0 1 0], [x x x x x 1 2 3 4 5], [1 0 2 0 3 0 4 0 5 0])
expand([1 0 0 0 0 0 1 1 1 1], [x x x x x 1 2 3 4 5], [1 0 0 0 0 0 2 3 4 5])
</pre>

<p>V&nbsp;tomto případě je výhodné zobrazit si bitový vektor a výsledný vektor
pod sebou, aby bylo zřejmé, jaká operace se provádí:</p>

<pre>
0 0 0 0 0 1 1 1 1 1
0 0 0 0 0 1 2 3 4 5
&nbsp;
1 0 1 0 1 0 1 0 1 0
1 0 2 0 3 0 4 0 5 0
&nbsp;
1 0 0 0 0 0 1 1 1 1
1 0 0 0 0 0 2 3 4 5
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si korespondence mezi
jedničkami v&nbsp;bitovém vektoru a prvky ve vektoru cílovém.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Instrukce pro kompresi a expanzi dat</h2>

<p><a href="#k10">Výše uvedené</a> instrukce pro kompresi a expanzi dat jsou
v&nbsp;AVX-512F pojmenovány takto:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis instrukce</th></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vcompresspd">VCOMPRESSPD</a></td><td>komprese dat pro prvky typu <i>double</i></td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vcompressps">VCOMPRESSPS</a></td><td>komprese dat pro prvky typu <i>single/float</i></td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpcompressd">VPCOMPRESSD</a></td><td>komprese dat pro prvky typu <i>int32</i></td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpcompressq">VPCOMPRESSQ</a></td><td>komprese dat pro prvky typu <i>int64</i></td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vexpandpd">VEXPANDPD</a></td><td>expanze dat pro prvky typu <i>double</i></td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vexpandps">VEXPANDPS</a></td><td>expanze dat pro prvky typu <i>single/float</i></td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpexpandd">VPEXPANDD</a></td><td>expanze dat pro prvky typu <i>int32</i></td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpexpandq">VPEXPANDQ</a></td><td>expanze dat pro prvky typu <i>int64</i></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: vzhledem k&nbsp;tomu, že nezáleží na
kódování hodnot, ale jen na jejich délce, jsou operace pro <i>int32</i> shodné
s&nbsp;operacemi pro <i>single/float</i> a totéž platí pro dvojici <i>int64</i>
a <i>double</i>.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Instrinsic pro instrukce komprese dat</h2>

<p>Otestujme si nyní intrinsic poskytovanou překladačem GCC C, která slouží pro
vygenerování některé z&nbsp;instrukcí pro kompresi dat. Konkrétně použijeme
intrinsic nazvanou <strong>__builtin_ia32_compresssf512_mask</strong>, která na
vstupu pracuje se dvěma vektory hodnot typu <i>float/single</i> a taky
s&nbsp;celočíselnou šestnáctibitovou maskou. Na základě bitů v&nbsp;masce je
potom seskládán výsledný vektor, který bude opět obsahovat šestnáct hodnot typu
<i>float/single</i>:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;immintrin.h&gt;
&nbsp;
int main(void)
{
    __v16sf x = { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0 };
    __v16sf y = -x;
    __v16sf z;
    int i;
&nbsp;
    z = <strong>__builtin_ia32_compresssf512_mask(x, y, 0b1010101010101010);</strong>
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
    }
&nbsp;
    putchar('\n');
&nbsp;
    z = <strong>__builtin_ia32_compresssf512_mask(x, y, 0b0000000011111111);</strong>
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
    }
&nbsp;
    putchar('\n');
&nbsp;
    z = <strong>__builtin_ia32_compresssf512_mask(x, y, 0b1111111100000000);</strong>
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
    }
&nbsp;
    return 0;
}
</pre>

<p>Výsledky získané pro trojici bitových masek podle zdrojového kódu
demonstračního příkladu:</p>

<pre>
 0 1.000000 -1.000000 2.000000
 1 2.000000 -2.000000 4.000000
 2 3.000000 -3.000000 6.000000
 3 4.000000 -4.000000 8.000000
 4 5.000000 -5.000000 10.000000
 5 6.000000 -6.000000 12.000000
 6 7.000000 -7.000000 14.000000
 7 8.000000 -8.000000 16.000000
 8 9.000000 -9.000000 -9.000000
 9 10.000000 -10.000000 -10.000000
10 11.000000 -11.000000 -11.000000
11 12.000000 -12.000000 -12.000000
12 13.000000 -13.000000 -13.000000
13 14.000000 -14.000000 -14.000000
14 15.000000 -15.000000 -15.000000
15 16.000000 -16.000000 -16.000000
&nbsp;
 0 1.000000 -1.000000 1.000000
 1 2.000000 -2.000000 2.000000
 2 3.000000 -3.000000 3.000000
 3 4.000000 -4.000000 4.000000
 4 5.000000 -5.000000 5.000000
 5 6.000000 -6.000000 6.000000
 6 7.000000 -7.000000 7.000000
 7 8.000000 -8.000000 8.000000
 8 9.000000 -9.000000 -9.000000
 9 10.000000 -10.000000 -10.000000
10 11.000000 -11.000000 -11.000000
11 12.000000 -12.000000 -12.000000
12 13.000000 -13.000000 -13.000000
13 14.000000 -14.000000 -14.000000
14 15.000000 -15.000000 -15.000000
15 16.000000 -16.000000 -16.000000
&nbsp;
 0 1.000000 -1.000000 9.000000
 1 2.000000 -2.000000 10.000000
 2 3.000000 -3.000000 11.000000
 3 4.000000 -4.000000 12.000000
 4 5.000000 -5.000000 13.000000
 5 6.000000 -6.000000 14.000000
 6 7.000000 -7.000000 15.000000
 7 8.000000 -8.000000 16.000000
 8 9.000000 -9.000000 -9.000000
 9 10.000000 -10.000000 -10.000000
10 11.000000 -11.000000 -11.000000
11 12.000000 -12.000000 -12.000000
12 13.000000 -13.000000 -13.000000
13 14.000000 -14.000000 -14.000000
14 15.000000 -15.000000 -15.000000
15 16.000000 -16.000000 -16.000000
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se skutečně nejdříve
provede &bdquo;komprese&ldquo; hodnot z&nbsp;prvního vektoru, ke kterým se
přidají hodnoty z&nbsp;vektoru druhého (kolik těchto hodnot bude nelze bez
znalosti masky říci).</div></p>

<p>Překlad intrinsic do objektového kódu (a do assembleru) bude vypadat
následovně:</p>

<pre>
    <i>z = __builtin_ia32_compresssf512_mask(x, y, 0b1010101010101010);</i>
  65:   62 f1 7c 48 28 8d 10    vmovaps zmm1,ZMMWORD PTR [rbp-0xf0]
  6c:   ff ff ff 
  6f:   62 f1 7c 48 28 85 d0    vmovaps zmm0,ZMMWORD PTR [rbp-0x130]
  76:   fe ff ff 
  79:   b8 aa aa ff ff          mov    eax,0xffffaaaa
  7e:   c5 f8 92 c8             kmovw  k1,eax
  82:   62 f2 7d 49 8a c1       <strong>vcompressps zmm1{k1},zmm0</strong>
  88:   62 f1 7c 48 28 c1       vmovaps zmm0,zmm1
  8e:   62 f1 7c 48 29 85 50    vmovaps ZMMWORD PTR [rbp-0xb0],zmm0
  95:   ff ff ff 
&nbsp;
    z = <i>__builtin_ia32_compresssf512_mask(x, y, 0b0000000011111111);</i>
 118:   62 f1 7c 48 28 8d 10    vmovaps zmm1,ZMMWORD PTR [rbp-0xf0]
 11f:   ff ff ff 
 122:   62 f1 7c 48 28 85 d0    vmovaps zmm0,ZMMWORD PTR [rbp-0x130]
 129:   fe ff ff 
 12c:   b8 ff 00 00 00          mov    eax,0xff
 131:   c5 f8 92 d0             kmovw  k2,eax
 135:   62 f2 7d 4a 8a c1       <strong>vcompressps zmm1{k2},zmm0</strong>
 13b:   62 f1 7c 48 28 c1       vmovaps zmm0,zmm1
 141:   62 f1 7c 48 29 85 50    vmovaps ZMMWORD PTR [rbp-0xb0],zmm0
 148:   ff ff ff 
&nbsp;
    z = <i>__builtin_ia32_compresssf512_mask(x, y, 0b1111111100000000);</i>
 1cb:   62 f1 7c 48 28 8d 10    vmovaps zmm1,ZMMWORD PTR [rbp-0xf0]
 1d2:   ff ff ff 
 1d5:   62 f1 7c 48 28 85 d0    vmovaps zmm0,ZMMWORD PTR [rbp-0x130]
 1dc:   fe ff ff 
 1df:   b8 00 ff ff ff          mov    eax,0xffffff00
 1e4:   c5 f8 92 d8             kmovw  k3,eax
 1e8:   62 f2 7d 4b 8a c1       <strong>vcompressps zmm1{k3},zmm0</strong>
 1ee:   62 f1 7c 48 28 c1       vmovaps zmm0,zmm1
 1f4:   62 f1 7c 48 29 85 50    vmovaps ZMMWORD PTR [rbp-0xb0],zmm0
 1fb:   ff ff ff 
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Instrukce pro provedení permutace (přerozdělení) prvků vektorů</h2>

<p>Mezi další instrukce přidané do AVX-512F (a tedy podporované všemi typy
mikroprocesorů, které mají implementovanou nějakou kombinaci sad AVX-512) patří
instrukce provádějící permutaci (tedy přerozdělení) prvků vektorů. Jedná se
konkrétně o tyto instrukce:</p>

<table>
<tr><th>Instrukce</th><th>Stručný popis instrukce</th></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpermi2w:vpermi2d:vpermi2q:vpermi2ps:vpermi2pd">VPERMI2PD</a></td><td>permutace vektorů s&nbsp;prvky typu <i>double</i> s&nbsp;přepisem indexu</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpermi2w:vpermi2d:vpermi2q:vpermi2ps:vpermi2pd">VPERMI2PS</a></td><td>permutace vektorů s&nbsp;prvky typu <i>single</i> s&nbsp;přepisem indexu</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpermi2w:vpermi2d:vpermi2q:vpermi2ps:vpermi2pd">VPERMI2D</a></td><td>permutace vektorů s&nbsp;prvky typu <i>int32</i> s&nbsp;přepisem indexu</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpermi2w:vpermi2d:vpermi2q:vpermi2ps:vpermi2pd">VPERMI2Q</a></td><td>permutace vektorů s&nbsp;prvky typu <i>int64</i> s&nbsp;přepisem indexu</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpermt2w:vpermt2d:vpermt2q:vpermt2ps:vpermt2pd">VPERMT2PD</a></td><td>permutace vektorů s&nbsp;prvky typu <i>double</i> s&nbsp;přepisem prvního zdrojového registru</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpermt2w:vpermt2d:vpermt2q:vpermt2ps:vpermt2pd">VPERMT2PS</a></td><td>permutace vektorů s&nbsp;prvky typu <i>single</i> s&nbsp;přepisem prvního zdrojového registru</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpermt2w:vpermt2d:vpermt2q:vpermt2ps:vpermt2pd">VPERMT2D</a></td><td>permutace vektorů s&nbsp;prvky typu <i>int32</i> s&nbsp;přepisem prvního zdrojového registru</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vpermt2w:vpermt2d:vpermt2q:vpermt2ps:vpermt2pd">VPERMT2Q</a></td><td>permutace vektorů s&nbsp;prvky typu <i>int64</i> s&nbsp;přepisem prvního zdrojového registru</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2">VSHUFF32x4</a></td><td>přeskládání čtveřice <i>lanes</i>, z&nbsp;nichž každá má šířku 128 bitů</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2">VSHUFF64x2</a></td><td>přeskládání čtveřice <i>lanes</i>, z&nbsp;nichž každá má šířku 128 bitů</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2">VSHUFI32x4</a></td><td>přeskládání čtveřice <i>lanes</i>, z&nbsp;nichž každá má šířku 128 bitů</td></tr>
<tr><td><a href="https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2">VSHUFI64x2</a></td><td>přeskládání čtveřice <i>lanes</i>, z&nbsp;nichž každá má šířku 128 bitů</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: konkrétní ukázku permutaci si ukážeme <a
href="#k14">v&nbsp;navazující kapitole</a>.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Intrinsic pro provedení permutace</h2>

<p></p>

<pre>
#include <stdio.h>
#include <immintrin.h>

int main(void)
{
    __v16sf x = { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0 };
    __v16sf y = -x;
    __v16sf z;
    int i;

    z = __builtin_ia32_vpermilps512_mask(x, 0x00, z, 0x0000);

    for (i = 0; i < sizeof(x) / sizeof(float); i++) {
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
    }

    putchar('\n');

    z = __builtin_ia32_vpermilps512_mask(x, 0x00, z, 0xffff);

    for (i = 0; i < sizeof(x) / sizeof(float); i++) {
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
    }

    putchar('\n');

    z = __builtin_ia32_vpermilps512_mask(x, 0xff, z, 0x0000);

    for (i = 0; i < sizeof(x) / sizeof(float); i++) {
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
    }

    putchar('\n');


    z = __builtin_ia32_vpermilps512_mask(x, 0xff, z, 0xffff);

    for (i = 0; i < sizeof(x) / sizeof(float); i++) {
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
    }

    putchar('\n');

    return 0;
}
</pre>

<pre>
 0 1.000000 -1.000000 0.000000
 1 2.000000 -2.000000 0.000000
 2 3.000000 -3.000000 0.000000
 3 4.000000 -4.000000 0.000000
 4 5.000000 -5.000000 0.000000
 5 6.000000 -6.000000 0.000000
 6 7.000000 -7.000000 0.000000
 7 8.000000 -8.000000 0.000000
 8 9.000000 -9.000000 0.000000
 9 10.000000 -10.000000 0.000000
10 11.000000 -11.000000 0.000000
11 12.000000 -12.000000 0.000000
12 13.000000 -13.000000 0.000000
13 14.000000 -14.000000 0.000000
14 15.000000 -15.000000 0.000000
15 16.000000 -16.000000 0.000000

 0 1.000000 -1.000000 1.000000
 1 2.000000 -2.000000 1.000000
 2 3.000000 -3.000000 1.000000
 3 4.000000 -4.000000 1.000000
 4 5.000000 -5.000000 5.000000
 5 6.000000 -6.000000 5.000000
 6 7.000000 -7.000000 5.000000
 7 8.000000 -8.000000 5.000000
 8 9.000000 -9.000000 9.000000
 9 10.000000 -10.000000 9.000000
10 11.000000 -11.000000 9.000000
11 12.000000 -12.000000 9.000000
12 13.000000 -13.000000 13.000000
13 14.000000 -14.000000 13.000000
14 15.000000 -15.000000 13.000000
15 16.000000 -16.000000 13.000000

 0 1.000000 -1.000000 1.000000
 1 2.000000 -2.000000 1.000000
 2 3.000000 -3.000000 1.000000
 3 4.000000 -4.000000 1.000000
 4 5.000000 -5.000000 5.000000
 5 6.000000 -6.000000 5.000000
 6 7.000000 -7.000000 5.000000
 7 8.000000 -8.000000 5.000000
 8 9.000000 -9.000000 9.000000
 9 10.000000 -10.000000 9.000000
10 11.000000 -11.000000 9.000000
11 12.000000 -12.000000 9.000000
12 13.000000 -13.000000 13.000000
13 14.000000 -14.000000 13.000000
14 15.000000 -15.000000 13.000000
15 16.000000 -16.000000 13.000000

 0 1.000000 -1.000000 4.000000
 1 2.000000 -2.000000 4.000000
 2 3.000000 -3.000000 4.000000
 3 4.000000 -4.000000 4.000000
 4 5.000000 -5.000000 8.000000
 5 6.000000 -6.000000 8.000000
 6 7.000000 -7.000000 8.000000
 7 8.000000 -8.000000 8.000000
 8 9.000000 -9.000000 12.000000
 9 10.000000 -10.000000 12.000000
10 11.000000 -11.000000 12.000000
11 12.000000 -12.000000 12.000000
12 13.000000 -13.000000 16.000000
13 14.000000 -14.000000 16.000000
14 15.000000 -15.000000 16.000000
15 16.000000 -16.000000 16.000000
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. Příloha &ndash; soubor Makefile použitý v&nbsp;článcích o SIMD operacích</h2>

<p>Následující soubor <strong>Makefile</strong> byl použit pro překlad
zdrojových kódů všech výše uvedených demonstračních příkladů do objektového
kódu jeho s&nbsp;následným disassemblingem do assembleru (resp.&nbsp;přesněji
řečeno do assembleru zkombinovaného s&nbsp;hexadecimálním výpisem obsahu
souboru s&nbsp;objektovým kódem). Makefile obsahuje i instrukce pro překlad
demonstračních příkladů z&nbsp;předchozích článků o SIMD operacích:</p>

<pre>
CC=gcc
OBJDUMP=objdump
&nbsp;
all:    simd04_1.lst simd04_2.lst \
        simd04B_1.lst simd04B_2.lst \
        simd07_1.lst simd07_2.lst \
        simd08_1.lst simd08_2.lst \
        simd12_1.lst simd12_2.lst \
        simd13_1.lst simd13_2.lst simd13_3.lst simd13_4.lst \
        simd14_1.lst simd14_2.lst simd14_3.lst simd14_4.lst \
        simd15_1.lst simd15_2.lst simd15_3.lst simd15_4.lst \
        simd16_1.lst simd16_2.lst simd16_3.lst simd16_4.lst \
        simd17_1.lst simd17_2.lst simd17_3.lst simd17_4.lst \
        simd18_1.lst simd18_2.lst simd18_3.lst simd18_4.lst \
        simd19_sse.lst simd19_avx.lst simd19_avx2.lst \
        simd20_sse.lst simd20_avx.lst simd20_avx2.lst \
        simd21_sse.lst simd21_avx.lst simd21_avx2.lst \
        intrinsic_mmx_1.lst \
        intrinsic_mmx_2.lst \
        intrinsic_mmx_3.lst \
        intrinsic_mmx_4.lst \
        intrinsic_mmx_5.lst \
        intrinsic_sse_1.lst \
        intrinsic_sse_2.lst \
        intrinsic_sse_3.lst \
        intrinsic_sse_4.lst \
        intrinsic_sse_5.lst \
        intrinsic_sse_6.lst \
        intrinsic_sse_7.lst \
        intrinsic_sse_8.lst \
        intrinsic_sse_9.lst \
        intrinsic_sse_A.lst \
        intrinsic_sse_B.lst \
        intrinsic_f16c_1.lst \
        intrinsic_f16c_2.lst \
        intrinsic_f16c_3.lst \
        intrinsic_f16c_4.lst \
        intrinsic_fma3_1.lst \
        intrinsic_fma3_2.lst \
        intrinsic_fma3_3.lst \
        intrinsic_fma3_4.lst \
        intrinsic_fma3_5.lst \
        intrinsic_avx_512_k_registers.lst \
        intrinsic_avx_512_vblendps.c \
        intrinsic_avx_512_addps.c \
        intrinsic_avx_512_compress.c
&nbsp;
clean:
        rm *.lst
        rm *.o
&nbsp;
%.lst:  %.o
        objdump -d -M intel -S $&lt; &gt; $@ 
&nbsp;
simd04_1.o:     simd04.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd04_2.o:     simd04.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd04B_1.o:    simd04B.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd04B_2.o:    simd04B.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd07_1.o:     simd07.c
        gcc -c -mno-sse -g -o $@ $&lt;
&nbsp;
simd07_2.o:     simd07.c
        gcc -c -g -o $@ $&lt;
&nbsp;
simd08_1.o:     simd08.c
        gcc -c -mno-sse -g -o $@ $&lt;
&nbsp;
simd08_2.o:     simd08.c
        gcc -c -g -o $@ $&lt;
&nbsp;
simd12_1.o:     simd12.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd12_2.o:     simd12.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd13_1.o:     simd13.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd13_2.o:     simd13.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd13_3.o:     simd13.c
        gcc -c -O3 -mno-sse -g -o $@ $&lt;
&nbsp;
simd13_4.o:     simd13.c
        gcc -c -O3 -g -o $@ $&lt;
&nbsp;
simd14_1.o:     simd14.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd14_2.o:     simd14.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd14_3.o:     simd14.c
        gcc -c -O3 -mno-sse -g -o $@ $&lt;
&nbsp;
simd14_4.o:     simd14.c
        gcc -c -O3 -g -o $@ $&lt;
&nbsp;
simd15_1.o:     simd15.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd15_2.o:     simd15.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd15_3.o:     simd15.c
        gcc -c -O3 -mno-sse -g -o $@ $&lt;
&nbsp;
simd15_4.o:     simd15.c
        gcc -c -O3 -g -o $@ $&lt;
&nbsp;
simd16_1.o:     simd16.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd16_2.o:     simd16.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd16_3.o:     simd16.c
        gcc -c -O3 -mno-sse -g -o $@ $&lt;
&nbsp;
simd16_4.o:     simd16.c
        gcc -c -O3 -g -o $@ $&lt;
&nbsp;
simd17_1.o:     simd17.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd17_2.o:     simd17.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd17_3.o:     simd17.c
        gcc -c -O3 -mno-sse -g -o $@ $&lt;
&nbsp;
simd17_4.o:     simd17.c
        gcc -c -O3 -g -o $@ $&lt;
&nbsp;
simd18_1.o:     simd18.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd18_2.o:     simd18.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd18_3.o:     simd18.c
        gcc -c -O3 -mno-sse -g -o $@ $&lt;
&nbsp;
simd18_4.o:     simd18.c
        gcc -c -O3 -g -o $@ $&lt;
&nbsp;
simd19_sse.o:   simd19.c
        gcc -c -O0 -msse -mno-avx -g -o $@ $&lt;
&nbsp;
simd19_avx.o:   simd19.c
        gcc -c -O0 -mavx -g -o $@ $&lt;
&nbsp;
simd19_avx2.o:  simd19.c
        gcc -c -O0 -mavx2 -g -o $@ $&lt;
&nbsp;
simd20_sse.o:   simd20.c
        gcc -c -O0 -msse -mno-avx -g -o $@ $&lt;
&nbsp;
simd20_avx.o:   simd20.c
        gcc -c -O0 -mavx -g -o $@ $&lt;
&nbsp;
simd20_avx2.o:  simd20.c
        gcc -c -O0 -mavx2 -g -o $@ $&lt;
&nbsp;
simd21_sse.o:   simd21.c
        gcc -c -O0 -msse -mno-avx -g -o $@ $&lt;
&nbsp;
simd21_avx.o:   simd21.c
        gcc -c -O0 -mavx -g -o $@ $&lt;
&nbsp;
simd21_avx2.o:  simd21.c
        gcc -c -O0 -mavx2 -g -o $@ $&lt;
&nbsp;
intrinsic_mmx_1.o:      intrinsic_mmx_1.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_mmx_2.o:      intrinsic_mmx_2.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_mmx_3.o:      intrinsic_mmx_3.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_mmx_4.o:      intrinsic_mmx_4.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_mmx_5.o:      intrinsic_mmx_5.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_1.o:      intrinsic_sse_1.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_2.o:      intrinsic_sse_2.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_3.o:      intrinsic_sse_3.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_4.o:      intrinsic_sse_4.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_5.o:      intrinsic_sse_5.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_6.o:      intrinsic_sse_6.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_7.o:      intrinsic_sse_7.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_8.o:      intrinsic_sse_8.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_9.o:      intrinsic_sse_9.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_A.o:      intrinsic_sse_A.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_B.o:      intrinsic_sse_B.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_avx_1.o:      intrinsic_avx_1.c
        gcc -c -mavx -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_avx_2.o:      intrinsic_avx_2.c
        gcc -c -mavx -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_avx_3.o:      intrinsic_avx_3.c
        gcc -c -mavx -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_f16c_1.o:     intrinsic_f16c_1.c
        gcc -c -mf16c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_f16c_2.o:     intrinsic_f16c_2.c
        gcc -c -mf16c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_f16c_3.o:     intrinsic_f16c_3.c
        gcc -c -mf16c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_f16c_4.o:     intrinsic_f16c_4.c
        gcc -c -mf16c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_fma3_1.o:     intrinsic_fma3_1.c
        gcc -c -mfma -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_fma3_2.o:     intrinsic_fma3_2.c
        gcc -c -mfma -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_fma3_3.o:     intrinsic_fma3_3.c
        gcc -c -mfma -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_fma3_4.o:     intrinsic_fma3_4.c
        gcc -c -mfma -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_fma3_5.o:     intrinsic_fma3_5.c
        gcc -c -mfma -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_avx_512_k_registers.o:        intrinsic_avx_512_k_registers.c
        gcc -c -mavx512f -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_avx_512_vblendps.o:   intrinsic_avx_512_vblendps.c
        gcc -c -mavx512f -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_avx_512_addps.o:      intrinsic_avx_512_addps.c
        gcc -c -mavx512f -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_avx_512_compress.o:   intrinsic_avx_512_compress.c
        gcc -c -mavx512f -O0 -g -o $@ $&lt;
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;jazyku C, které jsou určené pro překlad
pomocí překladače <strong>GCC C</strong>, byly uložen do Git repositáře, který
je dostupný na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již velmi rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>simd01.c</td><td>vektor celých čísel typu <strong>short int</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd01.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd01.c</a></td></tr>
<tr><td> 2</td><td>simd02.c</td><td>ukázka použití vektorů s&nbsp;celočíselnými typy bez znaménka</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd02.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd02.c</a></td></tr>
<tr><td> 3</td><td>simd03.c</td><td>ukázka použití vektorů s&nbsp;celočíselnými typy se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd03.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd03.c</a></td></tr>
<tr><td> 4</td><td>simd04.c</td><td>paralelní součet celočíselných prvků vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd04.c</a></td></tr>
<tr><td> 5</td><td>simd04B.c</td><td>úprava pro další datové typy</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B.c</a></td></tr>
<tr><td> 6</td><td>simd05.c</td><td>přístup k&nbsp;jednotlivým prvkům vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05.c</a></td></tr>
<tr><td> 7</td><td>simd05B.c</td><td>korektnější výpočet počtu prvků vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05B.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05B.c</a></td></tr>
<tr><td> 8</td><td>simd05C.c</td><td>definice typu vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05C.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05C.c</a></td></tr>
<tr><td> 9</td><td>simd06.c</td><td>vektor čísel s&nbsp;plovoucí řádovou čárkou</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd06.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd06.c</a></td></tr>
<tr><td>10</td><td>simd07.c</td><td>paralelní součet prvků vektorů (typ <strong>float</strong>)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd07.c</a></td></tr>
<tr><td>11</td><td>simd08.c</td><td>paralelní součet prvků vektorů (typ <strong>double</strong>)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd08.c</a></td></tr>
<tr><td>12</td><td>simd09.c</td><td>překročení délky vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd09.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd09.c</a></td></tr>
<tr><td>13</td><td>simd10.c</td><td>přístup k&nbsp;jednotlivým prvkům vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd10.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd10.c</a></td></tr>
<tr><td>14</td><td>simd11.c</td><td>překročení délky vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd11.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd11.c</a></td></tr>
<tr><td>15</td><td>simd12.c</td><td>dlouhý vektor s&nbsp;256 bajty</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd12.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>simd13.c</td><td>operace součtu pro vektory s&nbsp;celočíselnými prvky rozličné bitové šířky bez znaménka</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd13.c</a></td></tr>
<tr><td>17</td><td>simd14.c</td><td>operace součtu pro vektory s&nbsp;celočíselnými prvky rozličné bitové šířky se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd14.c</a></td></tr>
<tr><td>18</td><td>simd15.c</td><td>operace součtu pro vektory s&nbsp;prvky rozličné bitové šířky s&nbsp;plovoucí řádovou čárkou</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd15.c</a></td></tr>
<tr><td>19</td><td>simd16.c</td><td>operace součtu pro dlouhé vektory s&nbsp;prvky rozličné bitové šířky s&nbsp;plovoucí řádovou čárkou</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd16.c</a></td></tr>
<tr><td>20</td><td>simd17.c</td><td>všechny podporované binární operace nad vektory s&nbsp;celočíselnými prvky se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd17.c</a></td></tr>
<tr><td>21</td><td>simd18.c</td><td>všechny podporované binární operace nad vektory s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd18.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>intrinsic_mmx_1.c</td><td>intrinsic pro technologii MMX: instrukce <strong>paddb</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_1.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_1.c</a></td></tr>
<tr><td>24</td><td>intrinsic_mmx_2.c</td><td>intrinsic pro technologii MMX: instrukce <strong>paddw</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_2.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_2.c</a></td></tr>
<tr><td>25</td><td>intrinsic_mmx_3.c</td><td>intrinsic pro technologii MMX: instrukce <strong>paddb</strong> (přetečení)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_3.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_3.c</a></td></tr>
<tr><td>26</td><td>intrinsic_mmx_4.c</td><td>intrinsic pro technologii MMX: instrukce <strong>paddsb</strong> (saturace)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_4.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_4.c</a></td></tr>
<tr><td>27</td><td>intrinsic_mmx_5.c</td><td>intrinsic pro technologii MMX: instrukce <strong>pupckhbw</strong> (kombinace dvou vektorů)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_5.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_5.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>28</td><td>intrinsic_sse_1.c</td><td>součet dvou vektorů s&nbsp;šestnácti prvky typu <strong>char</strong> instrukcí <strong>paddb128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_1.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_1.c</a></td></tr>
<tr><td>29</td><td>intrinsic_sse_2.c</td><td>součet dvou vektorů s&nbsp;osmi prvky typu <strong>short</strong> instrukcí <strong>paddw128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_2.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_2.c</a></td></tr>
<tr><td>30</td><td>intrinsic_sse_3.c</td><td>součet dvou vektorů se čtyřmi prvky typu <strong>int</strong> instrukcí <strong>paddd128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_3.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_3.c</a></td></tr>
<tr><td>31</td><td>intrinsic_sse_4.c</td><td>součet dvou vektorů se dvěma prvky typu <strong>long</strong> instrukcí <strong>paddq128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_4.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_4.c</a></td></tr>
<tr><td>32</td><td>intrinsic_sse_5.c</td><td>součet dvou vektorů se čtyřmi prvky typu <strong>float</strong> instrukcí <strong>addps</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_5.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_5.c</a></td></tr>
<tr><td>33</td><td>intrinsic_sse_6.c</td><td>součet dvou vektorů se dvěma prvky typu <strong>double</strong> instrukcí <strong>addpd</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_6.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_6.c</a></td></tr>
<tr><td>34</td><td>intrinsic_sse_7.c</td><td>porovnání celočíselných prvků instrukcemi <strong>pcmpeqb128</strong> a <strong>pcmpgtb128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_7.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_7.c</a></td></tr>
<tr><td>35</td><td>intrinsic_sse_8.c</td><td>všech šest relačních operací pro vektory s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_8.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_8.c</a></td></tr>
<tr><td>36</td><td>intrinsic_sse_9.c</td><td>unární operace pro výpočet převrácené hodnoty, druhé odmocniny a převrácené hodnoty druhé odmocniny</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_9.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_9.c</a></td></tr>
<tr><td>37</td><td>intrinsic_sse_A.c</td><td>instrukce <strong>shufps</strong> a její intrinsic</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_A.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_A.c</a></td></tr>
<tr><td>38</td><td>intrinsic_sse_B.c</td><td>instrukce <strong>unpckhps</strong> a <strong>unpcklps</strong> a jejich intrinsics</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_B.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_B.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>39</td><td>simd19.c</td><td>operace součtu vektorů o délce 256 bitů s&nbsp;celočíselnými prvky bez znaménka</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd19.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd19.c</a></td></tr>
<tr><td>40</td><td>simd20.c</td><td>operace součtu vektorů o délce 256 bitů s&nbsp;celočíselnými prvky se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd20.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd20.c</a></td></tr>
<tr><td>41</td><td>simd21.c</td><td>operace součtu vektorů o délce 256 bitů s&nbsp;prvky typu <i>float</i> a <i>double</i></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd21.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd21.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>42</td><td>test_extensions.c</td><td>test, které instrukční sady mikroprocesor podporuje</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/test_extensions.c">https://github.com/tisnik/presentations/blob/master/SIMD/test_extensions.c</a></td></tr>
<tr><td>43</td><td>test_avx512_extensions.c</td><td>test, které instrukční sady mikroprocesor podporuje, rozšíření o AVX-512</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/test_avx512_extensions.c">https://github.com/tisnik/presentations/blob/master/SIMD/test_avx512_extensions</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>44</td><td>intrinsic_f16c_1.c</td><td>převod 128bitového vektoru s&nbsp;prvky typu <i>float</i> na <i>half</i> a zpět</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_1.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_1.c</a></td></tr>
<tr><td>45</td><td>intrinsic_f16c_2.c</td><td>převod 128bitového vektoru s&nbsp;prvky typu <i>float</i> na <i>half</i> a zpět, zpracování velkých hodnot</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_2.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_2.c</a></td></tr>
<tr><td>46</td><td>intrinsic_f16c_3.c</td><td>převod 128bitového vektoru s&nbsp;prvky typu <i>float</i> na <i>half</i> s&nbsp;volbou režimu zaokrouhlení</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_3.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_3.c</a></td></tr>
<tr><td>47</td><td>intrinsic_f16c_4.c</td><td>převod 256bitového vektoru s&nbsp;prvky typu <i>float</i> na <i>half</i> a zpět</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_4.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_4.c</a></td></tr>
<tr><td>48</td><td>intrinsic_fma3_1.c</td><td>využití instrukce pro provedení vektorové operace x = a*b+c</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_1.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_1.c</a></td></tr>
<tr><td>49</td><td>intrinsic_fma3_2.c</td><td>dtto, ale pro odlišné hodnoty</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_2.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_2.c</a></td></tr>
<tr><td>50</td><td>intrinsic_fma3_3.c</td><td>dtto, ale vynásobení maximálními možnými FP hodnotami</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_3.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_3.c</a></td></tr>
<tr><td>51</td><td>intrinsic_fma3_4.c</td><td>využití instrukce pro provedení vektorové operace x = -a*b+c</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_4.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_4.c</a></td></tr>
<tr><td>52</td><td>intrinsic_fma3_5.c</td><td>využití instrukce pro provedení vektorové operace x = a*b-c</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_5.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_5.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>53</td><td>decode_half_float.c</td><td>dekódování hodnot s&nbsp;plovoucí řádovou čárkou uložených ve formátu <i>half float</i></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/decode_half_float.c">https://github.com/tisnik/presentations/blob/master/SIMD/decode_half_float.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>54</td><td>intrinsic_avx_512_k_registers.c</td><td>bitové operace s&nbsp;maskovacími registry</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_k_registers.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_k_registers.c</a></td></tr>
<tr><td>55</td><td>intrinsic_avx_512_vblendps.c</td><td>operace typu <i>blend</i> založená na maskovacím registru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_vblendps.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_vblendps.c</a></td></tr>
<tr><td>56</td><td>intrinsic_avx_512_addps.c</td><td>operace typu <i>addps</i> s&nbsp;maskováním</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_addps.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_addps.c</a></td></tr>
<tr><td>57</td><td>intrinsic_avx_512_compress.c</td><td>operace typu <i>compress</i> s&nbsp;maskováním</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_compress.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_compress.c</a></td></tr>
<tr><td>58</td><td>intrinsic_avx_512_permute.c</td><td>operace typu <i>permute</i> s&nbsp;maskováním</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_permute.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_permute.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>59</td><td>Makefile</td><td>Makefile pro překlad všech výše uvedených demonstračních příkladů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/Makefile">https://github.com/tisnik/presentations/blob/master/SIMD/Makefile</a></td></tr>
</table>

<p>Soubory vzniklé překladem z&nbsp;jazyka C do assembleru procesorů x86-64:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>simd04_1.lst</td><td>překlad zdrojového kódu <strong>simd04_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04_1.lst</a></td></tr>
<tr><td> 2</td><td>simd04_2.lst</td><td>překlad zdrojového kódu <strong>simd04_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04_2.lst</a></td></tr>
<tr><td> 3</td><td>simd04B_1.lst</td><td>překlad zdrojového kódu <strong>simd04B_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_1.lst</a></td></tr>
<tr><td> 4</td><td>simd04B_2.lst</td><td>překlad zdrojového kódu <strong>simd04B_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_2.lst</a></td></tr>
<tr><td> 5</td><td>simd07_1.lst</td><td>překlad zdrojového kódu <strong>simd07_1.c</strong> s&nbsp;přepínači <strong>-mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd07_1.lst</a></td></tr>
<tr><td> 6</td><td>simd07_2.lst</td><td>překlad zdrojového kódu <strong>simd07_2.c</strong> s&nbsp;přepínači <strong>-g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd07_2.lst</a></td></tr>
<tr><td> 7</td><td>simd08_1.lst</td><td>překlad zdrojového kódu <strong>simd08_1.c</strong> s&nbsp;přepínači <strong>-mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd08_1.lst</a></td></tr>
<tr><td> 8</td><td>simd08_2.lst</td><td>překlad zdrojového kódu <strong>simd08_2.c</strong> s&nbsp;přepínači <strong>-g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd08_2.lst</a></td></tr>
<tr><td> 9</td><td>simd12_1.lst</td><td>překlad zdrojového kódu <strong>simd12_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g </strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd12_1.lst</a></td></tr>
<tr><td>10</td><td>simd12_2.lst</td><td>překlad zdrojového kódu <strong>simd12_2.c</strong> s&nbsp;přepínači <strong>-O0 -g </strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd12_2.lst</a></td></tr>
<tr><td>11</td><td>simd13_1.lst</td><td>překlad zdrojového kódu <strong>simd13_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_1.lst</a></td></tr>
<tr><td>12</td><td>simd13_2.lst</td><td>překlad zdrojového kódu <strong>simd13_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_2.lst</a></td></tr>
<tr><td>13</td><td>simd13_3.lst</td><td>překlad zdrojového kódu <strong>simd13_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_3.lst</a></td></tr>
<tr><td>14</td><td>simd13_4.lst</td><td>překlad zdrojového kódu <strong>simd13_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_4.lst</a></td></tr>
<tr><td>15</td><td>simd14_1.lst</td><td>překlad zdrojového kódu <strong>simd14_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_1.lst</a></td></tr>
<tr><td>16</td><td>simd14_2.lst</td><td>překlad zdrojového kódu <strong>simd14_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_2.lst</a></td></tr>
<tr><td>17</td><td>simd14_3.lst</td><td>překlad zdrojového kódu <strong>simd14_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_3.lst</a></td></tr>
<tr><td>18</td><td>simd14_4.lst</td><td>překlad zdrojového kódu <strong>simd14_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_4.lst</a></td></tr>
<tr><td>19</td><td>simd15_1.lst</td><td>překlad zdrojového kódu <strong>simd15_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_1.lst</a></td></tr>
<tr><td>20</td><td>simd15_2.lst</td><td>překlad zdrojového kódu <strong>simd15_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_2.lst</a></td></tr>
<tr><td>21</td><td>simd15_3.lst</td><td>překlad zdrojového kódu <strong>simd15_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_3.lst</a></td></tr>
<tr><td>22</td><td>simd15_4.lst</td><td>překlad zdrojového kódu <strong>simd15_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_4.lst</a></td></tr>
<tr><td>23</td><td>simd16_1.lst</td><td>překlad zdrojového kódu <strong>simd16_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_1.lst</a></td></tr>
<tr><td>24</td><td>simd16_2.lst</td><td>překlad zdrojového kódu <strong>simd16_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_2.lst</a></td></tr>
<tr><td>25</td><td>simd16_3.lst</td><td>překlad zdrojového kódu <strong>simd16_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_3.lst</a></td></tr>
<tr><td>26</td><td>simd16_4.lst</td><td>překlad zdrojového kódu <strong>simd16_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_4.lst</a></td></tr>
<tr><td>27</td><td>simd17_1.lst</td><td>překlad zdrojového kódu <strong>simd17_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_1.lst</a></td></tr>
<tr><td>28</td><td>simd17_2.lst</td><td>překlad zdrojového kódu <strong>simd17_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_2.lst</a></td></tr>
<tr><td>29</td><td>simd17_3.lst</td><td>překlad zdrojového kódu <strong>simd17_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_3.lst</a></td></tr>
<tr><td>30</td><td>simd17_4.lst</td><td>překlad zdrojového kódu <strong>simd17_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_4.lst</a></td></tr>
<tr><td>31</td><td>simd18_1.lst</td><td>překlad zdrojového kódu <strong>simd18_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_1.lst</a></td></tr>
<tr><td>32</td><td>simd18_2.lst</td><td>překlad zdrojového kódu <strong>simd18_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_2.lst</a></td></tr>
<tr><td>33</td><td>simd18_3.lst</td><td>překlad zdrojového kódu <strong>simd18_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_3.lst</a></td></tr>
<tr><td>34</td><td>simd18_4.lst</td><td>překlad zdrojového kódu <strong>simd18_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_4.lst</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>35</td><td>intrinsic_mmx_1.lst</td><td>překlad zdrojového kódu <strong>intrinsic_mmx_1.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_1.lst</a></td></tr>
<tr><td>36</td><td>intrinsic_mmx_2.lst</td><td>překlad zdrojového kódu <strong>intrinsic_mmx_2.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_2.lst</a></td></tr>
<tr><td>37</td><td>intrinsic_mmx_3.lst</td><td>překlad zdrojového kódu <strong>intrinsic_mmx_3.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_3.lst</a></td></tr>
<tr><td>39</td><td>intrinsic_mmx_5.lst</td><td>překlad zdrojového kódu <strong>intrinsic_mmx_5.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_5.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_5.lst</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>40</td><td>intrinsic_sse_1.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_1.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_1.lst</a></td></tr>
<tr><td>41</td><td>intrinsic_sse_2.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_2.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_2.lst</a></td></tr>
<tr><td>42</td><td>intrinsic_sse_3.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_3.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_3.lst</a></td></tr>
<tr><td>43</td><td>intrinsic_sse_4.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_4.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_4.lst</a></td></tr>
<tr><td>44</td><td>intrinsic_sse_5.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_5.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_5.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_5.lst</a></td></tr>
<tr><td>45</td><td>intrinsic_sse_6.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_6.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_6.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_6.lst</a></td></tr>
<tr><td>46</td><td>intrinsic_sse_7.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_7.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_7.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_7.lst</a></td></tr>
<tr><td>47</td><td>intrinsic_sse_8.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_8.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_8.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_8.lst</a></td></tr>
<tr><td>48</td><td>intrinsic_sse_9.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_9.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_9.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_9.lst</a></td></tr>
<tr><td>49</td><td>intrinsic_sse_A.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_A.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_A.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_A.lst</a></td></tr>
<tr><td>50</td><td>intrinsic_sse_B.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_B.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_B.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_B.lst</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>51</td><td>simd19_sse.lst</td><td>překlad zdrojového kódu <strong>simd19.c</strong> s&nbsp;přepínačem <strong>-msse -mno-avx</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd19_sse.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd19_sse.lst</a></td></tr>
<tr><td>52</td><td>simd19_avx.lst</td><td>překlad zdrojového kódu <strong>simd19.c</strong> s&nbsp;přepínačem <strong>-mavx</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd19_avx.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd19_avx.lst</a></td></tr>
<tr><td>53</td><td>simd19_avx2.lst</td><td>překlad zdrojového kódu <strong>simd19.c</strong> s&nbsp;přepínačem <strong>-mavx2</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd19_avx2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd19_avx2.lst</a></td></tr>
<tr><td>54</td><td>simd20_sse.lst</td><td>překlad zdrojového kódu <strong>simd20.c</strong> s&nbsp;přepínačem <strong>-msse -mno-avx</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd20_sse.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd20_sse.lst</a></td></tr>
<tr><td>55</td><td>simd20_avx.lst</td><td>překlad zdrojového kódu <strong>simd20.c</strong> s&nbsp;přepínačem <strong>-mavx</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd20_avx.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd20_avx.lst</a></td></tr>
<tr><td>56</td><td>simd20_avx2.lst</td><td>překlad zdrojového kódu <strong>simd20.c</strong> s&nbsp;přepínačem <strong>-mavx2</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd20_avx2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd20_avx2.lst</a></td></tr>
<tr><td>57</td><td>simd21_sse.lst</td><td>překlad zdrojového kódu <strong>simd21.c</strong> s&nbsp;přepínačem <strong>-msse -mno-avx</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd21_sse.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd21_sse.lst</a></td></tr>
<tr><td>58</td><td>simd21_avx.lst</td><td>překlad zdrojového kódu <strong>simd21.c</strong> s&nbsp;přepínačem <strong>-mavx</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd21_avx.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd21_avx.lst</a></td></tr>
<tr><td>59</td><td>simd21_avx2.lst</td><td>překlad zdrojového kódu <strong>simd21.c</strong> s&nbsp;přepínačem <strong>-mavx3</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd20_avx2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd21_avx2.lst</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>60</td><td>intrinsic_f16c_1.lst</td><td>překlad zdrojového kódu <strong>intrinsic_f16c_1.c</strong> s&nbsp;přepínačem <strong>-mf16c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_1.lst</a></td></tr>
<tr><td>61</td><td>intrinsic_f16c_2.lst</td><td>překlad zdrojového kódu <strong>intrinsic_f16c_2.c</strong> s&nbsp;přepínačem <strong>-mf16c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_2.lst</a></td></tr>
<tr><td>62</td><td>intrinsic_f16c_3.lst</td><td>překlad zdrojového kódu <strong>intrinsic_f16c_3.c</strong> s&nbsp;přepínačem <strong>-mf16c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_3.lst</a></td></tr>
<tr><td>63</td><td>intrinsic_f16c_4.lst</td><td>překlad zdrojového kódu <strong>intrinsic_f16c_4.c</strong> s&nbsp;přepínačem <strong>-mf16c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_f16c_4.lst</a></td></tr>
<tr><td>64</td><td>intrinsic_fma3_1.lst</td><td>překlad zdrojového kódu <strong>intrinsic_fma3_1.c</strong> s&nbsp;přepínačem <strong>-mfma</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_1.lst</a></td></tr>
<tr><td>65</td><td>intrinsic_fma3_2.lst</td><td>překlad zdrojového kódu <strong>intrinsic_fma3_2.c</strong> s&nbsp;přepínačem <strong>-mfma</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_2.lst</a></td></tr>
<tr><td>66</td><td>intrinsic_fma3_3.lst</td><td>překlad zdrojového kódu <strong>intrinsic_fma3_3.c</strong> s&nbsp;přepínačem <strong>-mfma</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_3.lst</a></td></tr>
<tr><td>67</td><td>intrinsic_fma3_4.lst</td><td>překlad zdrojového kódu <strong>intrinsic_fma3_4.c</strong> s&nbsp;přepínačem <strong>-mfma</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_4.lst</a></td></tr>
<tr><td>68</td><td>intrinsic_fma3_5.lst</td><td>překlad zdrojového kódu <strong>intrinsic_fma3_5.c</strong> s&nbsp;přepínačem <strong>-mfma</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_5.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_fma3_5.lst</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>69</td><td>intrinsic_avx_512_k_registers.lst</td><td>překlad zdrojového kódu <strong>intrinsic_avx_512_k_registers.c</strong> s&nbsp;přepínačem <strong>-mavx512</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_k_registers.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_k_registers.lst</a></td></tr>
<tr><td>70</td><td>intrinsic_avx_512_vblendps.lst</td><td>překlad zdrojového kódu <strong>intrinsic_avx_512_vblendps.c</strong> s&nbsp;přepínačem <strong>-mavx512</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_vblendps.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_vblendps.lst</a></td></tr>
<tr><td>71</td><td>intrinsic_avx_512_addps.lst</td><td>překlad zdrojového kódu <strong>intrinsic_avx_512_addps.c</strong> s&nbsp;přepínačem <strong>-mavx512</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_addps.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_addps.lst</a></td></tr>
<tr><td>72</td><td>intrinsic_avx_512_compress.lst</td><td>překlad zdrojového kódu <strong>intrinsic_avx_512_compress.c</strong> s&nbsp;přepínačem <strong>-mavx512</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_compress.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_compress.lst</a></td></tr>
<tr><td>73</td><td>intrinsic_avx_512_permute.lst</td><td>překlad zdrojového kódu <strong>intrinsic_avx_512_permute.c</strong> s&nbsp;přepínačem <strong>-mavx512</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_permute.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_avx_512_permute.lst</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Seznam všech předchozích částí tohoto seriálu</h2>

<ol>

<li>Užitečné rozšíření GCC: podpora SIMD (vektorových) instrukcí<br />
<a href="https://www.root.cz/clanky/uzitecne-rozsireni-gcc-podpora-simd-vektorovych-instrukci/">https://www.root.cz/clanky/uzitecne-rozsireni-gcc-podpora-simd-vektorovych-instrukci/</a>
</li>

<li>Užitečné rozšíření GCC – podpora SIMD (vektorových) instrukcí: nedostatky technologie<br />
<a href="https://www.root.cz/clanky/uzitecne-rozsireni-gcc-podpora-simd-vektorovych-instrukci-nedostatky-technologie/">https://www.root.cz/clanky/uzitecne-rozsireni-gcc-podpora-simd-vektorovych-instrukci-nedostatky-technologie/</a>
</li>

<li>Podpora SIMD (vektorových) instrukcí na RISCových procesorech<br />
<a href="https://www.root.cz/clanky/podpora-simd-vektorovych-instrukci-na-riscovych-procesorech/">https://www.root.cz/clanky/podpora-simd-vektorovych-instrukci-na-riscovych-procesorech/</a>
</li>

<li>Podpora SIMD operací v GCC s využitím intrinsic pro nízkoúrovňové optimalizace<br />
<a href="https://www.root.cz/clanky/podpora-simd-operaci-v-gcc-s-vyuzitim-intrinsic-pro-nizkourovnove-optimalizace/">https://www.root.cz/clanky/podpora-simd-operaci-v-gcc-s-vyuzitim-intrinsic-pro-nizkourovnove-optimalizace/</a>
</li>

<li>Podpora SIMD operací v GCC s využitím intrinsic: technologie SSE<br />
<a href="https://www.root.cz/clanky/podpora-simd-operaci-v-gcc-s-vyuzitim-intrinsic-technologie-sse/">https://www.root.cz/clanky/podpora-simd-operaci-v-gcc-s-vyuzitim-intrinsic-technologie-sse/</a>
</li>

<li>Rozšíření instrukční sady „Advanced Vector Extensions“ na platformě x86–64<br />
<a href="https://www.root.cz/clanky/rozsireni-instrukcni-sady-advanced-vector-extensions-na-platforme-x86-64/">https://www.root.cz/clanky/rozsireni-instrukcni-sady-advanced-vector-extensions-na-platforme-x86-64/</a>
</li>

<li>Rozšíření instrukční sady F16C, FMA a AVX-512 na platformě x86–64<br />
<a href="https://www.root.cz/clanky/rozsireni-instrukcni-sady-f16c-fma-a-avx-512-na-platforme-x86-64/">https://www.root.cz/clanky/rozsireni-instrukcni-sady-f16c-fma-a-avx-512-na-platforme-x86-64/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>GCC documentation: Extensions to the C Language Family<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html#C-Extensions">https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html#C-Extensions</a>
</li>

<li>GCC documentation: Using Vector Instructions through Built-in Functions<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html">https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html</a>
</li>

<li>SSE (Streaming SIMD Extentions)<br />
<a href="http://www.songho.ca/misc/sse/sse.html">http://www.songho.ca/misc/sse/sse.html</a>
</li>

<li>Timothy A. Chagnon: SSE and SSE2<br />
<a href="http://www.cs.drexel.edu/~tc365/mpi-wht/sse.pdf">http://www.cs.drexel.edu/~tc365/mpi-wht/sse.pdf</a>
</li>

<li>Intel corporation: Extending the Worldr's Most Popular Processor Architecture<br />
<a href="http://download.intel.com/technology/architecture/new-instructions-paper.pdf">http://download.intel.com/technology/architecture/new-instructions-paper.pdf</a>
</li>

<li>SIMD architectures:<br />
<a href="http://arstechnica.com/old/content/2000/03/simd.ars/">http://arstechnica.com/old/content/2000/03/simd.ars/</a>
</li>

<li>Tour of the Black Holes of Computing!: Floating Point<br />
<a href="http://www.cs.hmc.edu/~geoff/classes/hmc.cs105.../slides/class02_floats.ppt">http://www.cs.hmc.edu/~geoff/classes/hmc.cs105.../slides/class02_floats.ppt</a>
</li>

<li>3Dnow! Technology Manual<br />
AMD Inc., 2000</li>

<li>Intel MMX<sup>TM</sup> Technology Overview<br />
Intel corporation, 1996</li>

<li>MultiMedia eXtensions<br />
<a href="http://softpixel.com/~cwright/programming/simd/mmx.php">http://softpixel.com/~cwright/programming/simd/mmx.php</a>i
</li>

<li>AMD K5 ("K5" / "5k86")<br />
<a href="http://www.pcguide.com/ref/cpu/fam/g5K5-c.html">http://www.pcguide.com/ref/cpu/fam/g5K5-c.html</a>
</li>

<li>Sixth Generation Processors<br />
<a href="http://www.pcguide.com/ref/cpu/fam/g6.htm">http://www.pcguide.com/ref/cpu/fam/g6.htm</a>
</li>

<li>Great Microprocessors of the Past and Present<br />
<a href="http://www.cpushack.com/CPU/cpu1.html">http://www.cpushack.com/CPU/cpu1.html</a>
</li>

<li>Very long instruction word (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Very_long_instruction_word">http://en.wikipedia.org/wiki/Very_long_instruction_word</a>
</li>

<li>CPU design (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/CPU_design">http://en.wikipedia.org/wiki/CPU_design</a>
</li>

<li>Bulldozer (microarchitecture)<br />
<a href="https://en.wikipedia.org/wiki/Bulldozer_(microarchitecture)">https://en.wikipedia.org/wiki/Bulldozer_(microarchitecture)</a>
</li>

<li>SIMD Instructions Considered Harmful<br />
<a href="https://www.sigarch.org/simd-instructions-considered-harmful/">https://www.sigarch.org/simd-instructions-considered-harmful/</a>
</li>

<li>GCC Compiler Intrinsics<br />
<a href="https://iq.opengenus.org/gcc-compiler-intrinsics/">https://iq.opengenus.org/gcc-compiler-intrinsics/</a>
</li>

<li>Scalable_Vector_Extension_(SVE)<br />
<a href="https://en.wikipedia.org/wiki/AArch64#Scalable_Vector_Extension_(SVE)">https://en.wikipedia.org/wiki/AArch64#Scalable_Vector_Extension_(SVE)</a>
</li>

<li>FADD/FADDP/FIADD — Add<br />
<a href="https://www.felixcloutier.com/x86/fadd:faddp:fiadd">https://www.felixcloutier.com/x86/fadd:faddp:fiadd</a>
</li>

<li>ADDPS — Add Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/addps">https://www.felixcloutier.com/x86/addps</a>
</li>

<li>ADDPD — Add Packed Double-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/addpd">https://www.felixcloutier.com/x86/addpd</a>
</li>

<li>FDIV/FDIVP/FIDIV — Divide<br />
<a href="https://www.felixcloutier.com/x86/fdiv:fdivp:fidiv">https://www.felixcloutier.com/x86/fdiv:fdivp:fidiv</a>
</li>

<li>IDIV — Signed Divide<br />
<a href="https://www.felixcloutier.com/x86/idiv">https://www.felixcloutier.com/x86/idiv</a>
</li>

<li>PADDB/PADDW/PADDD/PADDQ — Add Packed Integers<br />
<a href="https://www.felixcloutier.com/x86/paddb:paddw:paddd:paddq">https://www.felixcloutier.com/x86/paddb:paddw:paddd:paddq</a>
</li>

<li>PSUBB/PSUBW/PSUBD — Subtract Packed Integers<br />
<a href="https://www.felixcloutier.com/x86/psubb:psubw:psubd">https://www.felixcloutier.com/x86/psubb:psubw:psubd</a>
</li>

<li>PMULLW — Multiply Packed Signed Integers and Store Low Result<br />
<a href="https://www.felixcloutier.com/x86/pmullw">https://www.felixcloutier.com/x86/pmullw</a>
</li>

<li>PUNPCKLBW/PUNPCKLWD/PUNPCKLDQ/PUNPCKLQDQ — Unpack Low Data<br />
<a href="https://www.felixcloutier.com/x86/punpcklbw:punpcklwd:punpckldq:punpcklqdq">https://www.felixcloutier.com/x86/punpcklbw:punpcklwd:punpckldq:punpcklqdq</a>
</li>

<li>PUNPCKHBW/PUNPCKHWD/PUNPCKHDQ/PUNPCKHQDQ — Unpack High Data<br />
<a href="https://www.felixcloutier.com/x86/punpckhbw:punpckhwd:punpckhdq:punpckhqdq">https://www.felixcloutier.com/x86/punpckhbw:punpckhwd:punpckhdq:punpckhqdq</a>
</li>

<li>PACKUSWB — Pack with Unsigned Saturation<br />
<a href="https://www.felixcloutier.com/x86/packuswb">https://www.felixcloutier.com/x86/packuswb</a>
</li>

<li>ADDPS — Add Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/addps">https://www.felixcloutier.com/x86/addps</a>
</li>

<li>SUBPS — Subtract Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/subps">https://www.felixcloutier.com/x86/subps</a>
</li>

<li>MULPS — Multiply Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/mulps">https://www.felixcloutier.com/x86/mulps</a>
</li>

<li>DIVPS — Divide Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/divps">https://www.felixcloutier.com/x86/divps</a>
</li>

<li>CBW/CWDE/CDQE — Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword<br />
<a href="https://www.felixcloutier.com/x86/cbw:cwde:cdqe">https://www.felixcloutier.com/x86/cbw:cwde:cdqe</a>
</li>

<li>PAND — Logical AND<br />
<a href="https://www.felixcloutier.com/x86/pand">https://www.felixcloutier.com/x86/pand</a>
</li>

<li>POR — Bitwise Logical OR<br />
<a href="https://www.felixcloutier.com/x86/por">https://www.felixcloutier.com/x86/por</a>
</li>

<li>PXOR — Logical Exclusive OR<br />
<a href="https://www.felixcloutier.com/x86/pxor">https://www.felixcloutier.com/x86/pxor</a>
</li>

<li>Improve the Multimedia User Experience<br />
<a href="https://www.arm.com/technologies/neon">https://www.arm.com/technologies/neon</a>
</li>

<li>NEON Technology (stránky ARM)<br />
<a href="https://developer.arm.com/technologies/neon">https://developer.arm.com/technologies/neon</a>
</li>

<li>SIMD Assembly Tutorial: ARM NEON - Xiph.org<br />
<a href="https://people.xiph.org/~tterribe/daala/neon_tutorial.pdf">https://people.xiph.org/~tterribe/daala/neon_tutorial.pdf</a>
</li>

<li>Ne10<br />
<a href="http://projectne10.github.io/Ne10/">http://projectne10.github.io/Ne10/</a>
</li>

<li>NEON and Floating-Point architecture<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/BABIGHEB.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/BABIGHEB.html</a>
</li>

<li>An Introduction to ARM NEON<br />
<a href="http://peterdn.com/post/an-introduction-to-ARM-NEON.aspx">http://peterdn.com/post/an-introduction-to-ARM-NEON.aspx</a>
</li>

<li>ARM NEON Intrinsics Reference<br />
<a href="http://infocenter.arm.com/help/topic/com.arm.doc.ihi0073a/IHI0073A_arm_neon_intrinsics_ref.pdf">http://infocenter.arm.com/help/topic/com.arm.doc.ihi0073a/IHI0073A_arm_neon_intrinsics_ref.pdf</a>
</li>

<li>Arm Neon Intrinsics vs hand assembly<br />
<a href="https://stackoverflow.com/questions/9828567/arm-neon-intrinsics-vs-hand-assembly">https://stackoverflow.com/questions/9828567/arm-neon-intrinsics-vs-hand-assembly</a>
</li>

<li>ARM NEON Optimization. An Example<br />
<a href="http://hilbert-space.de/?p=22">http://hilbert-space.de/?p=22</a>
</li>

<li>AArch64 NEON instruction format<br />
<a href="https://developer.arm.com/docs/den0024/latest/7-aarch64-floating-point-and-neon/73-aarch64-neon-instruction-format">https://developer.arm.com/docs/den0024/latest/7-aarch64-floating-point-and-neon/73-aarch64-neon-instruction-format</a>
</li>

<li>ARM SIMD instructions<br />
<a href="https://developer.arm.com/documentation/dht0002/a/Introducing-NEON/What-is-SIMD-/ARM-SIMD-instructions">https://developer.arm.com/documentation/dht0002/a/Introducing-NEON/What-is-SIMD-/ARM-SIMD-instructions</a>
</li>

<li>Learn the architecture - Migrate Neon to SVE Version 1.0<br />
<a href="https://developer.arm.com/documentation/102131/0100/?lang=en">https://developer.arm.com/documentation/102131/0100/?lang=en</a>
</li>

<li>1.2.2. Comparison between NEON technology and other SIMD solutions<br />
<a href="https://developer.arm.com/documentation/den0018/a/Introduction/Comparison-between-ARM-NEON-technology-and-other-implementations/Comparison-between-NEON-technology-and-other-SIMD-solutions?lang=en">https://developer.arm.com/documentation/den0018/a/Introduction/Comparison-between-ARM-NEON-technology-and-other-implementations/Comparison-between-NEON-technology-and-other-SIMD-solutions?lang=en</a>
</li>

<li>NEON Programmer’s Guide<br />
<a href="https://documentation-service.arm.com/static/63299276e68c6809a6b41308">https://documentation-service.arm.com/static/63299276e68c6809a6b41308</a>
</li>

<li>Brain Floating Point – nový formát uložení čísel pro strojové učení a chytrá čidla<br />
<a href="https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/">https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/</a>
</li>

<li>Other Built-in Functions Provided by GCC<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html">https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html</a>
</li>

<li>GCC: 6.60 Built-in Functions Specific to Particular Target Machines<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Target-Builtins.html#Target-Builtins">https://gcc.gnu.org/onlinedocs/gcc/Target-Builtins.html#Target-Builtins</a>
</li>

<li>Advanced Vector Extensions<br />
<a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions">https://en.wikipedia.org/wiki/Advanced_Vector_Extensions</a>
</li>

<li>AVX-512<br />
<a href="https://en.wikipedia.org/wiki/AVX-512">https://en.wikipedia.org/wiki/AVX-512</a>
</li>

<li>AVX-512<br />
<a href="https://iq.opengenus.org/avx512/">https://iq.opengenus.org/avx512/</a>
</li>

<li>Downclocking pro AVX-512<br />
<a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#Downclocking">https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#Downclocking</a>
</li>

<li>BLENDPS — Blend Packed Single Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/blendps">https://www.felixcloutier.com/x86/blendps</a>
</li>

<li>BLENDPD — Blend Packed Double Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/blendpd">https://www.felixcloutier.com/x86/blendpd</a>
</li>

<li>Why Intel is betting on BFLOAT16 to be a game changer for deep learning training? Hint: Range trumps Precision<br />
<a href="https://hub.packtpub.com/why-intel-is-betting-on-bfloat16-to-be-a-game-changer-for-deep-learning-training-hint-range-trumps-precision/">https://hub.packtpub.com/why-intel-is-betting-on-bfloat16-to-be-a-game-changer-for-deep-learning-training-hint-range-trumps-precision/</a>
</li>

<li>half-rs (pro Rust)<br />
<a href="https://github.com/starkat99/half-rs">https://github.com/starkat99/half-rs</a>
</li>

<li>float16 (pro Go)<br />
<a href="https://github.com/x448/float16">https://github.com/x448/float16</a>
</li>

<li>bfloat16 - Hardware Numerics Definition<br />
<a href="https://software.intel.com/en-us/download/bfloat16-hardware-numerics-definition">https://software.intel.com/en-us/download/bfloat16-hardware-numerics-definition</a>
</li>

<li>Intel Prepares To Graft Google’s Bfloat16 Onto Processors<br />
<a href="https://www.nextplatform.com/2019/07/15/intel-prepares-to-graft-googles-bfloat16-onto-processors/">https://www.nextplatform.com/2019/07/15/intel-prepares-to-graft-googles-bfloat16-onto-processors/</a>
</li>

<li>A Study of BFLOAT16 for Deep Learning Training<br />
<a href="https://arxiv.org/pdf/1905.12322.pdf">https://arxiv.org/pdf/1905.12322.pdf</a>
</li>

<li>BFloat16s.jl<br />
<a href="https://github.com/JuliaComputing/BFloat16s.jl">https://github.com/JuliaComputing/BFloat16s.jl</a>
</li>

<li>Half Precision Arithmetic: fp16 Versus bfloat16<br />
<a href="https://nhigham.com/2018/12/03/half-precision-arithmetic-fp16-versus-bfloat16/">https://nhigham.com/2018/12/03/half-precision-arithmetic-fp16-versus-bfloat16/</a>
</li>

<li>bfloat16 floating-point format (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Bfloat16_floating-point_format">https://en.wikipedia.org/wiki/Bfloat16_floating-point_format</a>
</li>

<li>Unum (number format)<br />
<a href="https://en.wikipedia.org/wiki/Unum_(number_format)#Posit">https://en.wikipedia.org/wiki/Unum_(number_format)#Posit</a>
</li>

<li>Performance Benefits of Half Precision Floats<br />
<a href="https://software.intel.com/en-us/articles/performance-benefits-of-half-precision-floats">https://software.intel.com/en-us/articles/performance-benefits-of-half-precision-floats</a>
</li>

<li>Norma IEEE 754 a příbuzní: formáty plovoucí řádové tečky<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/</a>
</li>

<li>IEEE-754 Floating-Point Conversion<br />
<a href="http://babbage.cs.qc.cuny.edu/IEEE-754.old/32bit.html">http://babbage.cs.qc.cuny.edu/IEEE-754.old/32bit.html</a>
</li>

<li>Small Float Formats<br />
<a href="https://www.khronos.org/opengl/wiki/Small_Float_Formats">https://www.khronos.org/opengl/wiki/Small_Float_Formats</a>
</li>

<li>Binary-coded decimal<br />
<a href="https://en.wikipedia.org/wiki/Binary-coded_decimal">https://en.wikipedia.org/wiki/Binary-coded_decimal</a>
</li>

<li>Floating-Point Formats<br />
<a href="http://www.quadibloc.com/comp/cp0201.htm">http://www.quadibloc.com/comp/cp0201.htm</a>
</li>

<li>Data types (SciPy)<br />
<a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.types.html">https://docs.scipy.org/doc/numpy-1.13.0/user/basics.types.html</a>
</li>

<li>New 16-bit floating point type &ndash; NumPy 1.6.0 Release Notes<br />
<a href="https://github.com/numpy/numpy/blob/7cfec2403486456b52b525eccf7541e1562d9ab3/doc/release/1.6.0-notes.rst#new-16-bit-floating-point-type">https://github.com/numpy/numpy/blob/7cfec2403486456b52b525eccf7541e1562d9ab3/doc/release/1.6.0-notes.rst#new-16-bit-floating-point-type</a>
</li>

<li>RFC pro Rust<br />
<a href="https://github.com/joshtriplett/rfcs/blob/f16b/text/0000-f16b.md">https://github.com/joshtriplett/rfcs/blob/f16b/text/0000-f16b.md</a>
</li>

<li>IEEE-754 Floating Point Converter<br />
<a href="https://www.h-schmidt.net/FloatConverter/IEEE754.html">https://www.h-schmidt.net/FloatConverter/IEEE754.html</a>
</li>

<li>Mediump float calculator<br />
<a href="https://oletus.github.io/float16-simulator.js/">https://oletus.github.io/float16-simulator.js/</a>
</li>

<li>IEEE 754 Calculator<br />
<a href="http://weitz.de/ieee/">http://weitz.de/ieee/</a>
</li>

<li>BFloat16 (Swift for TensorFlow)<br />
<a href="https://www.tensorflow.org/swift/api_docs/Structs/BFloat16">https://www.tensorflow.org/swift/api_docs/Structs/BFloat16</a>
</li>

<li>Using bfloat16 with TensorFlow models<br />
<a href="https://cloud.google.com/tpu/docs/bfloat16">https://cloud.google.com/tpu/docs/bfloat16</a>
</li>

<li>What is tf.bfloat16 “truncated 16-bit floating point”?<br />
<a href="https://stackoverflow.com/questions/44873802/what-is-tf-bfloat16-truncated-16-bit-floating-point">https://stackoverflow.com/questions/44873802/what-is-tf-bfloat16-truncated-16-bit-floating-point</a>
</li>

<li>BFloat16 processing for Neural Networks on Armv8-A<br />
<a href="https://community.arm.com/developer/ip-products/processors/b/ml-ip-blog/posts/bfloat16-processing-for-neural-networks-on-armv8_2d00_a">https://community.arm.com/developer/ip-products/processors/b/ml-ip-blog/posts/bfloat16-processing-for-neural-networks-on-armv8_2d00_a</a>
</li>

<li>Mixed precision training<br />
<a href="https://arxiv.org/pdf/1710.03740.pdf">https://arxiv.org/pdf/1710.03740.pdf</a>
</li>

<li>[R] Mixed Precision Training<br />
<a href="https://www.reddit.com/r/MachineLearning/comments/75phd2/r_mixed_precision_training/">https://www.reddit.com/r/MachineLearning/comments/75phd2/r_mixed_precision_training/</a>
</li>

<li>Floating Point Numbers<br />
<a href="https://floating-point-gui.de/formats/fp/">https://floating-point-gui.de/formats/fp/</a>
</li>

<li>Float exposed<br />
<a href="https://float.exposed/0x40490000">https://float.exposed/0x40490000</a>
</li>

<li>Float Toy<br />
<a href="http://evanw.github.io/float-toy/">http://evanw.github.io/float-toy/</a>
</li>

<li>IEEE-754 visualization<br />
<a href="https://bartaz.github.io/ieee754-visualization/">https://bartaz.github.io/ieee754-visualization/</a>
</li>

<li>Advantages Of BFloat16 For AI Inference<br />
<a href="https://semiengineering.com/advantages-of-bfloat16-for-ai-inference/">https://semiengineering.com/advantages-of-bfloat16-for-ai-inference/</a>
</li>

<li>ARMv8-A bude podporovat nový formát čísel BFloat16<br />
<a href="https://www.root.cz/zpravicky/armv8-a-bude-podporovat-novy-format-cisle-bfloat16/">https://www.root.cz/zpravicky/armv8-a-bude-podporovat-novy-format-cisle-bfloat16/</a>
</li>

<li>Intel oznámil nový formát BFloat16 pro budoucí procesory<br />
<a href="https://www.root.cz/zpravicky/intel-oznamil-novy-format-bfloat16-pro-budouci-procesory/">https://www.root.cz/zpravicky/intel-oznamil-novy-format-bfloat16-pro-budouci-procesory/</a>
</li>

<li>Nový formát čísel Intelu BFloat16 bude v GCC 10 a Clang 9 <br />
<a href="https://www.root.cz/zpravicky/novy-format-cisel-intelu-bfloat16-bude-v-gcc-10-a-clang-9/">https://www.root.cz/zpravicky/novy-format-cisel-intelu-bfloat16-bude-v-gcc-10-a-clang-9/</a>
</li>

<li>Mixed precision<br />
<a href="https://www.tensorflow.org/guide/keras/mixed_precision">https://www.tensorflow.org/guide/keras/mixed_precision</a>
</li>

<li>Training Performance: A user’s guide to converge faster (TensorFlow Dev Summit 2018)<br />
<a href="https://www.youtube.com/watch?v=SxOsJPaxHME">https://www.youtube.com/watch?v=SxOsJPaxHME</a>
</li>

<li>Programování GPU na Raspberry Pi: použití Quad Processor Unit(s) <br />
<a href="https://www.root.cz/clanky/programovani-gpu-na-raspberry-pi-pouziti-quad-processor-unit-s/">https://www.root.cz/clanky/programovani-gpu-na-raspberry-pi-pouziti-quad-processor-unit-s/</a>
</li>

<li>“Half Precision” 16-bit Floating Point Arithmetic<br />
<a href="https://blogs.mathworks.com/cleve/2017/05/08/half-precision-16-bit-floating-point-arithmetic/">https://blogs.mathworks.com/cleve/2017/05/08/half-precision-16-bit-floating-point-arithmetic/</a>
</li>

<li>Half Precision Arithmetic in Numerical Linear Algebra<br />
<a href="https://nla-group.org/2018/10/03/half-precision-arithmetic-in-numerical-linear-algebra/">https://nla-group.org/2018/10/03/half-precision-arithmetic-in-numerical-linear-algebra/</a>
</li>

<li>Enable BF16 support<br />
<a href="https://gcc.gnu.org/ml/gcc-patches/2019-04/msg00477.html">https://gcc.gnu.org/ml/gcc-patches/2019-04/msg00477.html</a>
</li>

<li>Survey of Floating-Point Formats<br />
<a href="https://mrob.com/pub/math/floatformats.html">https://mrob.com/pub/math/floatformats.html</a>
</li>

<li>VCVTPS2PH — Convert Single-Precision FP value to 16-bit FP value<br />
<a href="https://www.felixcloutier.com/x86/vcvtps2ph">https://www.felixcloutier.com/x86/vcvtps2ph</a>
</li>

<li>VCVTPH2PS — Convert 16-bit FP values to Single-Precision FP values<br />
<a href="https://www.felixcloutier.com/x86/vcvtph2ps">https://www.felixcloutier.com/x86/vcvtph2ps</a>
</li>

<li>KMOV<br />
<a href="https://www.felixcloutier.com/x86/kmovw:kmovb:kmovq:kmovd">https://www.felixcloutier.com/x86/kmovw:kmovb:kmovq:kmovd</a>
</li>

<li>KNOT<br />
<a href="https://www.felixcloutier.com/x86/knotw:knotb:knotq:knotd">https://www.felixcloutier.com/x86/knotw:knotb:knotq:knotd</a>
</li>

<li>KAND<br />
<a href="https://www.felixcloutier.com/x86/kandw:kandb:kandq:kandd">https://www.felixcloutier.com/x86/kandw:kandb:kandq:kandd</a>
</li>

<li>KANDN<br />
<a href="https://www.felixcloutier.com/x86/kandnw:kandnb:kandnq:kandnd">https://www.felixcloutier.com/x86/kandnw:kandnb:kandnq:kandnd</a>
</li>

<li>KOR<br />
<a href="https://www.felixcloutier.com/x86/korw:korb:korq:kord">https://www.felixcloutier.com/x86/korw:korb:korq:kord</a>
</li>

<li>KXOR<br />
<a href="https://www.felixcloutier.com/x86/kxorw:kxorb:kxorq:kxord">https://www.felixcloutier.com/x86/kxorw:kxorb:kxorq:kxord</a>
</li>

<li>KXNOR<br />
<a href="https://www.felixcloutier.com/x86/kxnorw:kxnorb:kxnorq:kxnord">https://www.felixcloutier.com/x86/kxnorw:kxnorb:kxnorq:kxnord</a>
</li>

<li>KORTEST<br />
<a href="https://www.felixcloutier.com/x86/kortestw:kortestb:kortestq:kortestd">https://www.felixcloutier.com/x86/kortestw:kortestb:kortestq:kortestd</a>
</li>

<li>KSHIFTL<br />
<a href="https://www.felixcloutier.com/x86/kshiftlw:kshiftlb:kshiftlq:kshiftld">https://www.felixcloutier.com/x86/kshiftlw:kshiftlb:kshiftlq:kshiftld</a>
</li>

<li>KSHIFTR<br />
<a href="https://www.felixcloutier.com/x86/kshiftrw:kshiftrb:kshiftrq:kshiftrd">https://www.felixcloutier.com/x86/kshiftrw:kshiftrb:kshiftrq:kshiftrd</a>
</li>

<li>KUNPCK<br />
<a href="https://www.felixcloutier.com/x86/kunpckbw:kunpckwd:kunpckdq">https://www.felixcloutier.com/x86/kunpckbw:kunpckwd:kunpckdq</a>
</li>

<li>VBLENDMPD<br />
<a href="https://www.felixcloutier.com/x86/vblendmpd:vblendmps">https://www.felixcloutier.com/x86/vblendmpd:vblendmps</a>
</li>

<li>VBLENDMPS<br />
<a href="https://www.felixcloutier.com/x86/vblendmpd:vblendmps">https://www.felixcloutier.com/x86/vblendmpd:vblendmps</a>
</li>

<li>VPBLENDMD<br />
<a href="https://www.felixcloutier.com/x86/vpblendmd:vpblendmq">https://www.felixcloutier.com/x86/vpblendmd:vpblendmq</a>
</li>

<li>VPBLENDMQ<br />
<a href="https://www.felixcloutier.com/x86/vpblendmd:vpblendmq">https://www.felixcloutier.com/x86/vpblendmd:vpblendmq</a>
</li>

<li>VPTESTMB/VPTESTMW/VPTESTMD/VPTESTMQ<br />
<a href="https://www.felixcloutier.com/x86/vptestmb:vptestmw:vptestmd:vptestmq">https://www.felixcloutier.com/x86/vptestmb:vptestmw:vptestmd:vptestmq</a>
</li>

<li>VPCMPD/VPCMPUD<br />
<a href="https://www.felixcloutier.com/x86/vpcmpd:vpcmpud">https://www.felixcloutier.com/x86/vpcmpd:vpcmpud</a>
</li>

<li>VPCMPQ/VPCMPUQ<br />
<a href="https://www.felixcloutier.com/x86/vpcmpq:vpcmpuq">https://www.felixcloutier.com/x86/vpcmpq:vpcmpuq</a>
</li>

<li>VCOMPRESSPD<br />
<a href="https://www.felixcloutier.com/x86/vcompresspd">https://www.felixcloutier.com/x86/vcompresspd</a>
</li>

<li>VCOMPRESSPS<br />
<a href="https://www.felixcloutier.com/x86/vcompressps">https://www.felixcloutier.com/x86/vcompressps</a>
</li>

<li>VPCOMPRESSQ<br />
<a href="https://www.felixcloutier.com/x86/vpcompressq">https://www.felixcloutier.com/x86/vpcompressq</a>
</li>

<li>VPCOMPRESSD<br />
<a href="https://www.felixcloutier.com/x86/vpcompressd">https://www.felixcloutier.com/x86/vpcompressd</a>
</li>

<li>VEXPANDPD<br />
<a href="https://www.felixcloutier.com/x86/vexpandpd">https://www.felixcloutier.com/x86/vexpandpd</a>
</li>

<li>VEXPANDPS<br />
<a href="https://www.felixcloutier.com/x86/vexpandps">https://www.felixcloutier.com/x86/vexpandps</a>
</li>

<li>VPEXPANDD<br />
<a href="https://www.felixcloutier.com/x86/vpexpandd">https://www.felixcloutier.com/x86/vpexpandd</a>
</li>

<li>VPEXPANDQ<br />
<a href="https://www.felixcloutier.com/x86/vpexpandq">https://www.felixcloutier.com/x86/vpexpandq</a>
</li>

<li>VPERMI2PD<br />
<a href="https://www.felixcloutier.com/x86/vpermi2w:vpermi2d:vpermi2q:vpermi2ps:vpermi2pd">https://www.felixcloutier.com/x86/vpermi2w:vpermi2d:vpermi2q:vpermi2ps:vpermi2pd</a>
</li>

<li>VPERMI2PS<br />
<a href="https://www.felixcloutier.com/x86/vpermi2w:vpermi2d:vpermi2q:vpermi2ps:vpermi2pd">https://www.felixcloutier.com/x86/vpermi2w:vpermi2d:vpermi2q:vpermi2ps:vpermi2pd</a>
</li>

<li>VPERMI2D<br />
<a href="https://www.felixcloutier.com/x86/vpermi2w:vpermi2d:vpermi2q:vpermi2ps:vpermi2pd">https://www.felixcloutier.com/x86/vpermi2w:vpermi2d:vpermi2q:vpermi2ps:vpermi2pd</a>
</li>

<li>VPERMI2Q<br />
<a href="https://www.felixcloutier.com/x86/vpermi2w:vpermi2d:vpermi2q:vpermi2ps:vpermi2pd">https://www.felixcloutier.com/x86/vpermi2w:vpermi2d:vpermi2q:vpermi2ps:vpermi2pd</a>
</li>

<li>VPERMT2PD<br />
<a href="https://www.felixcloutier.com/x86/vpermt2w:vpermt2d:vpermt2q:vpermt2ps:vpermt2pd">https://www.felixcloutier.com/x86/vpermt2w:vpermt2d:vpermt2q:vpermt2ps:vpermt2pd</a>
</li>

<li>VPERMT2PS<br />
<a href="https://www.felixcloutier.com/x86/vpermt2w:vpermt2d:vpermt2q:vpermt2ps:vpermt2pd">https://www.felixcloutier.com/x86/vpermt2w:vpermt2d:vpermt2q:vpermt2ps:vpermt2pd</a>
</li>

<li>VPERMT2D<br />
<a href="https://www.felixcloutier.com/x86/vpermt2w:vpermt2d:vpermt2q:vpermt2ps:vpermt2pd">https://www.felixcloutier.com/x86/vpermt2w:vpermt2d:vpermt2q:vpermt2ps:vpermt2pd</a>
</li>

<li>VPERMT2Q<br />
<a href="https://www.felixcloutier.com/x86/vpermt2w:vpermt2d:vpermt2q:vpermt2ps:vpermt2pd">https://www.felixcloutier.com/x86/vpermt2w:vpermt2d:vpermt2q:vpermt2ps:vpermt2pd</a>
</li>

<li>VSHUFF32x4<br />
<a href="https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2">https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2</a>
</li>

<li>VSHUFF64x2<br />
<a href="https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2">https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2</a>
</li>

<li>VSHUFI32x4<br />
<a href="https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2">https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2</a>
</li>

<li>VSHUFI64x2<br />
<a href="https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2">https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>
