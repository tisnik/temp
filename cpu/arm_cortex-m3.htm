<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Architektura mikrořadičů s jádry ARM Cortex-M3</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Architektura mikrořadičů s jádry ARM Cortex-M3</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na článek z předchozího týdne, v němž jsme si popsali nejmenší jádra ARM s názvem Cortex-M0 a Cortex-M0+, navážeme článkem dnešním, který je věnován poněkud výkonnějším mikroprocesorovým a mikrořadičovým jádrům. Tato jádra nesou označení Cortex-M3 a nalezneme je například v čipu, který &bdquo;pohání&ldquo; populární Arduino Due.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Architektura mikrořadičů s&nbsp;jádry ARM Cortex-M3</a></p>
<p><a href="#k02">2. Instrukční sada podporovaná jádry Cortex-M3</a></p>
<p><a href="#k03">3. Instrukce SDIV a UDIV</a></p>
<p><a href="#k04">4. Přerušení běhu instrukcí LDM, STM, PUSH, POP atd.</a></p>
<p><a href="#k05">5. Instrukční sada Thumb-2</a></p>
<p><a href="#k06">6. Podmínky v&nbsp;instrukcích (CBZ, CBNZ)</a></p>
<p><a href="#k07">7. Prefix IT aneb řešení mnoha problémů s&nbsp;podmíněnými skoky</a></p>
<p><a href="#k08">8. Bitové operace (Booleovský procesor)</a></p>
<p><a href="#k09">9. Booleovský procesor implementovaný v&nbsp;jádrech Cortex-M3</a></p>
<p><a href="#k10">10. Jednotka MPU</a></p>
<p><a href="#k11">11. Procesory Atmel založené na technologii ARM</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Architektura mikrořadičů s&nbsp;jádry ARM Cortex-M3</h2>

<p><a
href="http://www.root.cz/clanky/architektura-mikroradicu-s-jadry-arm-cortex-m0-a-arm-cortex-m0/">V&nbsp;předchozím
článku</a> jsme se zabývali popisem nejdůležitějších vlastností jader
<i>Cortex-M0</i> a <i>Cortex-M0+</i>, které tvoří základ řady <i>Cortex-M</i>
(architektura ARM pro mikrořadiče). Připomeňme si, že se jedná (alespoň
prozatím) o nejmenší procesorová jádra s&nbsp;architekturou ARM, která byla
navržena takovým způsobem, aby dokázala cenově, z&nbsp;pohledu spotřeby
elektrické energie, dostupností vývojových a ladicích prostředků atd.
konkurovat některým typům osmibitových a šestnáctibitových mikrořadičů. Tato
snaha vedla k&nbsp;cílenému omezení některých vlastností jader M0 a M0+,
především se to týká zjednodušení instrukční sady (podmnožina instrukční sady
<i>Thumb</i>), neexistence hardwarové děličky a samozřejmě též absence dalších
koprocesorů (matematický koprocesor, NEON apod.). Pro ty aplikace, kde je
vyžadován přece jen větší výpočetní výkon, jsou však určena jiná jádra navržená
ve společnosti ARM. Další v&nbsp;pořadí (na škále od nejméně výkonných až po
nejvýkonnější CPU) jsou jádra <i>Cortex-M3</i>, která se díky vyváženosti mezi
výpočetním výkonem, cenou a spotřebou stala poměrně populární a nalezneme je
například v&nbsp;čipech <i>SAM3x</i>.</p>

<p>Mezi základní cíl při návrhu jader <i>Cortex-M3</i> patřilo vytvoření CPU
s&nbsp;co nejmenší latencí, což znamená, že reakce na přerušení by měla
proběhnout ideálně v&nbsp;jediném taktu. Navíc měly mít tyto procesory
relativně dobrý výpočetní výkon, čehož bylo dosaženo hned několika způsoby.
Především mají jádra <i>Cortex-M3</i> Harvardskou architekturu umožňující
mj.&nbsp;provádět současné čtení další instrukce společně se čtením či zápisem
dat (zde ovšem závisí na konkrétním výrobci čipu, jak bude koncipovat interní
sběrnice připojené k&nbsp;pamětem). Dále je použita pipeline se třemi řezy
(klasické RISCové fetch, decode, execute) a nalezneme zde i modul určený pro
dopředné čtení instrukcí (<i>PFU &ndash; Prefetch Unit</i>) a další modul pro
pozdržení zápisu jednoho slova do datové paměti (ovšem pouze pro ty regiony
paměti, které jsou označeny příznakem &bdquo;bufferable&ldquo;). Vlastní jádro
<i>Cortex-M3</i> je v&nbsp;případě potřeby rozšiřitelné o další moduly, zejména
pak o modul <i>MPU (Memory Protection Unit)</i> popsaný níže, dále pak o modul
<i>DWT (Data Watchpoint and Trace Unit)</i> usnadňující ladění či <i>NVIC
(Nested Vectored Interrupt Controller)</i>, o němž se taktéž zmíníme
v&nbsp;navazujícím textu.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instrukční sada podporovaná jádry Cortex-M3</h2>

<p>Před podrobnějším popisem instrukční sady jader <i>Cortex-M3</i> si
zopakujme tabulku, s&nbsp;níž jsme se seznámili již minule:</p>

<table>
<tr><th>#</th><th>Jádro     </th><th>Architektura ARM</th><th>Architektura CPU/MCU</th><th>MPU</th></tr>
<tr><td>1</td><td>Cortex-M0 </td><td>ARMv6-M</td><td>Von Neumann</td><td>ne</td></tr>
<tr><td>2</td><td>Cortex-M0+</td><td>ARMv6-M</td><td>Von Neumann</td><td>volitelná</td></tr>
<tr><td>3</td><td>Cortex-M1 </td><td>ARMv6-M</td><td>Von Neumann</td><td>ne</td></tr>
<tr><td>4</td><td>Cortex-M3 </td><td>ARMv7-M</td><td>Harvardská</td><td>volitelná</td></tr>
<tr><td>5</td><td>Cortex-M4 </td><td>ARMv7E-M</td><td>Harvardská</td><td>volitelná</td></tr>
<tr><td>6</td><td>Cortex-M7 </td><td>ARMv7E-M</td><td>Harvardská</td><td>volitelná</td></tr>
</table>

<p>Z&nbsp;této tabulky mj.&nbsp;vyplývá, že jádra <i>Cortex-M3</i> jsou
založena na architektuře <i>ARMv7-M</i> a nikoli na architektuře
<i>ARMv6-M</i>, jako je tomu u <i>Cortex-M0(+)</i>. To s&nbsp;sebou přináší
změny zejména v&nbsp;instrukční sadě, protože jádra <i>Cortex-M3</i> plně
podporují jak instrukční sadu <i>Thumb</i> s&nbsp;16bitovými operačními kódy,
tak i instrukční sadu <i>Thumb-2</i>, v&nbsp;níž nalezneme i instrukce
s&nbsp;32bitovým slovem (jedná se však o odlišný formát, než jaký je použit
v&nbsp;původní RISCové instrukční sadě A32).</p>

<p>Přímo jsou podporovány i instrukce vykonávané hardwarovou násobičkou, která
dokáže provést vlastní operaci vynásobení za jediný takt (viz též <a
href="http://www.root.cz/clanky/architektura-mikroradicu-s-jadry-arm-cortex-m0-a-arm-cortex-m0/nazory/vlakno/5/">diskuzi
o rozdílných vlastnostech násobičky</a> u jader <i>Cortex-M0</i> a
<i>Cortex-M0+</i>). Tyto instrukce umožňují vynásobit dva 32bitové operandy
(volitelně bez znaménka či se znaménkem) a získat 32bitový popř.&nbsp;64bitový
výsledek, popř.&nbsp;provést po vynásobení operaci součtu či rozdílu, čehož lze
využít například při zpracování signálu:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Operandy</th><th>Výsledek</th><th>Operace</th></tr>
<tr><td>1</td><td>MUL  </td><td>32bit&times;32bit</td><td>32bit</td><td>násobení</td></tr>
<tr><td>2</td><td>MAL  </td><td>32bit&times;32bit</td><td>32bit</td><td>násobení a přičtení výsledku (Multiply and Accumulate)</td></tr>
<tr><td>3</td><td>MLS  </td><td>32bit&times;32bit</td><td>32bit</td><td>násobení a odečtení výsledku (Multiply and Subtract)</td></tr>
<tr><td>4</td><td>SMULL</td><td>32bit&times;32bit</td><td>64bit</td><td>násobení hodnot se znaménkem</td></tr>
<tr><td>5</td><td>SMLAL</td><td>32bit&times;32bit</td><td>64bit</td><td>Multiply and Accumulate</td></tr>
<tr><td>6</td><td>UMULL</td><td>32bit&times;32bit</td><td>64bit</td><td>násobení hodnot bez znaménka</td></tr>
<tr><td>7</td><td>UMLAL</td><td>32bit&times;32bit</td><td>64bit</td><td>Multiply and Accumulate</td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instrukce SDIV a UDIV</h2>

<p>Na rozdíl od jednodušších jader <i>Cortex-M0</i> a <i>Cortex-M0+</i> se u
jader <i>Cortex-M3</i> setkáme se i s&nbsp;hardwarovou děličkou. Ta však
pracuje relativně pomalu, protože operace dělení je v&nbsp;závislosti na
konkrétních hodnotách operandů dokončena ve dvou až šestnácti cyklech (a je
přerušitelná, viz též další kapitolu):</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Operandy</th><th>Výsledek</th><th>Operace</th></tr>
<tr><td>1</td><td>SDIV</td><td>32bit&times;32bit</td><td>32bit</td><td>operace dělení hodnot se znaménkem</td></tr>
<tr><td>2</td><td>UDIV</td><td>32bit&times;32bit</td><td>32bit</td><td>operace dělení hodnot bez znaménka</td></tr>
</table>

<p>Mimochodem, absence hardwarové děličky je u mnoha jader řady <i>Cortex-M</i>
a dokonce i <i>Cortex-A</i> poměrně běžná, což nám názorně přibližuje
následující tabulka:</p>

<table>
<tr><th> #</th><th>Jádro</th><th>DIV (Thumb)</th><th>DIV (A32)</th></tr>
<tr><td> 1</td><td>Cortex-M0 </td><td>ne</td><td>nedostupné</td></tr>
<tr><td> 2</td><td>Cortex-M0+</td><td>ne</td><td>nedostupné</td></tr>
<tr><td> 3</td><td>Cortex-M1 </td><td>ne</td><td>nedostupné</td></tr>
<tr><td> 4</td><td>Cortex-M3 </td><td>ano</td><td>nedostupné</td></tr>
<tr><td> 5</td><td>Cortex-M4 </td><td>ano</td><td>nedostupné</td></tr>
<tr><td> 6</td><td>Cortex-R4 </td><td>ano</td><td>ne</td></tr>
<tr><td> 7</td><td>Cortex-R5 </td><td>ano</td><td>jen s&nbsp;registrem r1</td></tr>
<tr><td> 8</td><td>Cortex-R7 </td><td>ano</td><td>ano</td></tr>
<tr><td> 9</td><td>Cortex-A5 </td><td>ne</td><td>ne</td></tr>
<tr><td>10</td><td>Cortex-A7 </td><td>ano</td><td>ano</td></tr>
<tr><td>11</td><td>Cortex-A8 </td><td>ne</td><td>ne</td></tr>
<tr><td>12</td><td>Cortex-A9 </td><td>ne</td><td>ne</td></tr>
<tr><td>13</td><td>Cortex-A15</td><td>ano</td><td>ano</td></tr>
<tr><td>14</td><td>Cortex-A53</td><td>ano</td><td>ano</td></tr>
<tr><td>15</td><td>Cortex-A57</td><td>ano</td><td>ano</td></tr>
</table>



<p><a name="k04"></a></p>
<h2 id="k04">4. Přerušení běhu instrukcí LDM, STM, PUSH, POP atd.</h2>

<p>Instrukční sada <i>Thumb</i> obsahuje i instrukce typu <strong>LDM</strong>
a <strong>STM</strong>, pomocí nichž je možné uložit či naopak načíst celou
řadu vybraných pracovních registrů, nikoli pouze registr jediný. Pro seznam
registrů platí některá omezení, například že adresa pro ukládání či načítání
nesmí být specifikována v&nbsp;registru PC, seznam ukládaných/načítaných
registrů nesmí obsahovat SP, u <strong>STM</strong> nesmí seznam obsahovat ani
PC a u <strong>LDM</strong> nesmí obsahovat PC v&nbsp;případě, že obsahuje LR
(tato pravidla jsou však vcelku pochopitelná, když si uvědomíme, jak RISCový
procesor uvnitř pracuje). Druhým typem instrukcí určených pro současný přenos
dat do/z většího počtu registrů jsou instrukce typu <i>PUSH</i> a <i>POP</i>,
které mohou v&nbsp;případě instrukční sady <i>Thumb</i> pracovat nikoli pouze
s&nbsp;jediným registrem, ale s&nbsp;libovolnou kombinací (ve skutečnosti jsou
<strong>PUSH</strong> a <strong>POP</strong> pouze často používaným aliasem pro
jednu z&nbsp;variant instrukcí <strong>LDM</strong> a
<strong>STM</strong>).</p>

<p>O těchto instrukcích se explicitně zmiňuji především z&nbsp;toho důvodu, že
v&nbsp;případě příchodu přerušení či výjimky musí procesor co nejdříve
pozastavit běh hlavního programu a umožnit spuštění rutiny pro obsluhu
přerušení/výjimky. Pro mnoho aplikací, v&nbsp;nichž se používají mikrořadiče,
je však neakceptovatelné čekat tak dlouho, až se dokončí výše zmíněné instrukce
(či taktéž dlouhotrvající operace dělení <strong>UDIV</strong> a
<strong>SDIV</strong>). To ve skutečnosti ani není zapotřebí, protože tyto
operace jsou přerušitelné, takže se na přerušení reaguje s&nbsp;velmi nízkou
latencí (1-2 takty). Tato jádra navíc podporují i takzvaný
<i>tail-chaining</i>, který urychluje zpracování většího množství výjimek
(vynechá se operace se zásobníkem na konci rutiny).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Instrukční sada Thumb-2</h2>

<p>V&nbsp;úvodních kapitolách jsme si řekli, že procesorová jádra řady
<i>Cortex-M3</i> podporují kromě 16bitové instrukční sady <i>Thumb</i> i
instrukční sadu <i>Thumb-2</i>. Na základě zveřejněných měření se ukazuje, že
díky použití <i>Thumb-2</i> se na jedné straně dosahuje jak velké hustoty kódu
(<i>code density</i>), tak i velkého výpočetního výkonu. <i>Thumb-2</i> sice
může vypadat problematicky (nejedná se o čistý RISC), ovšem sami konstruktéři
mikroprocesorů <i>ARM</i> se vyjádřili k&nbsp;tomu, z&nbsp;jakého důvodu
vlastně instrukční sada <i>Thumb-2</i> vznikla. Při jejím návrhu měli na mysli
čtyři parametry, které se navzájem ovlivňují a vylepšení jednoho
z&nbsp;parametrů většinou v&nbsp;důsledku vede ke zhoršení zbývajících třech
parametrů. Jedná se o následující parametry:</p>

<ol>

<li>Cenu vlastního procesoru, která je kromě jiných okolností ovlivněna i jeho
složitostí (existence branch prediktorů, spekulativního provádění instrukcí,
...), počtem aritmeticko-logických jednotek (obecně zda jde o skalární či
superskalární procesor), velikostí potřebných vyrovnávacích pamětí atd.</li>

<li>Dosahovaný výpočetní výkon v&nbsp;<strong>reálných</strong> aplikacích.
V&nbsp;praxi to znamená, že hodnota udávaná v&nbsp;jednotkách MIPS nebo MFLOPS
nemusí být vždy směrodatná: je to právě příklad jednodušších instrukcí
<i>Thumb</i> v&nbsp;porovnání s&nbsp;obecně výkonnějšími instrukcemi
<i>ARM</i>.</li>

<li>Nutný energetický příkon procesoru (závisí na technologii výroby, napájecím
napětí, hodinové frekvenci, počtu ALU, velikosti vyrovnávacích paměti,
struktuře pipeline, dekódovací tabulky atd.).</li>

<li>Cenu za vývoj a optimalizaci aplikací (tu ovlivňuje složitost instrukční
sady, nedostatky v&nbsp;instrukční sadě: například nutnost provádění
neefektivních skoků, složitost při načítání konstant do pracovních registrů
atd.).</li>

</ol>

<p>Za povšimnutí stojí především skutečnost, že snaha o vylepšení jednoho
parametru skutečně ve většině případů vede ke zhoršení ostatních parametrů.
Například zvýšení výpočetního výkonu pomocí větších vyrovnávacích pamětích
ovlivní jak cenu mikroprocesoru, tak i energetický příkon atd. Zajímavý je ale
především význam posledního parametru: cena za vývoj a optimalizaci aplikací.
Při zavádění instrukční sady <i>Thumb</i> (zde bez dvojky) se totiž
předpokládalo, že většina kódu bude překládána právě do této sady, což zmenší
počet výpadků vyrovnávacích pamětí pro srovnatelný program (binární kód), a jen
přibližně deset procent kritických částí kódu bude napsáno s&nbsp;využitím
instrukcí <i>ARM</i> (jedná se tedy o aplikaci známého pravidla 90:10 či
80:20). To sice může na první pohled velmi dobře fungovat, ovšem zjištění,
které jsou vlastně ony kritické části kódu, se muselo mnohdy provádět až
v&nbsp;pozdních fázích vývoje, což vedlo mj.&nbsp;i k&nbsp;rostoucí ceně za
vývoj (i když popravdě řečeno se to týká skutečně oněch částí kódu,
s&nbsp;nimiž si někdo dal tu práci a optimalizoval je ručně s&nbsp;využitím
výsledků získaných například z&nbsp;<i>profileru</i>).</p>

<p>Navíc není přepínání mezi instrukcemi <i>ARM</i> a <i>Thumb</i> zcela
&bdquo;zadarmo&ldquo;, což poněkud zmenšuje možnosti neustálého přepínání,
takže se hledal způsob, jak stávající stav ještě vylepšit. Výsledkem této snahy
je instrukční sada nazvaná <i>Thumb-2</i>. Její vznik byl umožněn postupným
vylepšováním technologie výroby integrovaných obvodů (zjednodušeně řečeno tím,
že bylo možné na čipu implementovat větší množství tranzistorů bez razantního
nárůstu ceny a/nebo spotřeby) a navíc byl &bdquo;vynucen&ldquo; tím, že se
stále zvětšoval rozdíl mezi rychlostí mikroprocesorů a dobou přístupu
k&nbsp;pamětem DRAM či u mikrořadičů do Flash ROM. Cílem tedy byl menší binární
kód (instrukce s&nbsp;větší hustotou) a současně stále dobrá výkonnost dosažená
tím, že ne všechny instrukce <i>Thumb-2</i> jsou tak jednoduché či
jednoúčelové, jako instrukce <i>Thumb</i>.</p>

<p>Důvodů pro vznik nové instrukční sady tedy bylo více než dost, takže se
podívejme na to, co se jejím tvůrcům podařilo splnit a co nikoli.
V&nbsp;následujícím textu budou uvedeny výsledky měření prezentované samotnou
společností <i>ARM</i> (takže je nutné je brát s&nbsp;rezervou :-).
V&nbsp;první tabulce je porovnána &bdquo;hustota&ldquo; binárního strojového
kódu měřená jeho délkou. Ve všech případech se jednalo o stejný algoritmus,
který byl poprvé implementován s&nbsp;využitím instrukční sady <i>ARM</i>,
podruhé s&nbsp;pomocí sady <i>Thumb</i> a potřetí byla použita instrukční sada
<i>Thumb-2</i>. Za základ je přitom brána délka původního kódu používajícího
instrukce <i>ARM</i> (tento kód odpovídá sto procentům, čím menší číslo, tím
menší je i výsledný binární program a tím lepší je využití I-cache či rychlejší
přístup do Flash ROM):</p>

<table>
<tr><th>Instrukční sada</th><th>Délka kódu</th></tr>
<tr><td>ARM    </td><td>100%</td></tr>
<tr><td>Thumb  </td><td> 70%</td></tr>
<tr><td>Thumb-2</td><td> 74%</td></tr>
</table>

<p>Ve druhé tabulce je uveden relativní výpočetní výkon přeloženého binárního
programu, přičemž 100% odpovídá nejrychlejší implementaci a 75% implementaci
nejpomalejší:</p>

<table>
<tr><th>Instrukční sada</th><th>Relativní výpočetní výkon</th></tr>
<tr><td>ARM    </td><td>100%</td></tr>
<tr><td>Thumb  </td><td> 75%</td></tr>
<tr><td>Thumb-2</td><td> 98%</td></tr>
</table>

<p>Z&nbsp;výsledků, které jsou prezentovány v&nbsp;předešlých dvou tabulkách
tedy vyplývá, že pro testovanou aplikaci se díky použití instrukční sady
<i>Thumb-2</i> podařilo zmenšit velikost kódu na tři čtvrtiny původní velikosti
a přitom výpočetní výkon poklesl pouze o zhruba 2% (zde se samozřejmě projevila
i nižší pravděpodobnost výpadku instrukční cache, která ovšem byla nižší i u
implementace využívající instrukce <i>Thumb</i>).</p>

<p><ins>Poznámka: jako u všech podobných měření je samozřejmě nutné mít na
paměti, že se jedná pouze o (reprezentativní) vzorek, který může ale taktéž
nemusí odpovídat jinému typu algoritmu. Vždy záleží jen na konkrétní aplikaci,
konkrétním vývojáři, jeho rozpočtu a času, zda si podobné měření udělá i
v&nbsp;případě jím vyvíjené aplikace, nebo zda se spolehne na cizí statistiku
:-) (to ovšem platí i pro výběr procesoru: opět záleží na mnoha okolnostech,
včetně dosavadních zkušeností vývojáře, ceně za vývojové nástroje
atd.).</ins></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Podmínky v&nbsp;instrukcích (CBZ, CBNZ)</h2>

<p>Jednou z&nbsp;předností instrukční sady <i>Thumb-2</i> je zavedení nových
instrukcí umožňujících v&nbsp;programovém kódu implementovat podmínky. Ty se
totiž v&nbsp;mnoha případech ukazují být kritickou částí kódu, protože zejména
podmíněné skoky mohou přerušit jinak plynulý tok zpracovávaných instrukcí,
takže se z&nbsp;ideálního stavu, kdy RISCové jádro díky existenci pipeline
dokončí v&nbsp;každém cyklu jednu instrukci (v&nbsp;případě superskalárních
čipů <i>Cortex-A</i> i více instrukcí) můžeme dostat do stavu, kdy podmíněný
skok způsobí nutnost přerušit již zpracovávané instrukce a začít znovu
(samozřejmě s&nbsp;latencí).</p>

<p>Při analýze reálných aplikací si tvůrci instrukční sady <i>Thumb-2</i>
všimli si, že se v&nbsp;programech velmi často vyskytuje sekvence instrukcí,
které nejdřív porovnají obsah vybraného pracovního registru s&nbsp;nulou a
posléze provedou podmíněný skok na základě toho, zda je onen pracovní registr
skutečně nulový nebo naopak nenulový. Poměrně velké frekvenci této sekvence
instrukcí se nelze ani divit, protože podobným způsobem mohou být
implementovány například testy na hodnotu <strong>NULL</strong>, počítané
smyčky, smyčky typu <strong>do-while</strong> v&nbsp;nichž je pravdivostní
hodnota vyjádřena celým číslem, práce s&nbsp;ASCIIZ řetězci atd. Aby bylo možné
zmenšit velikost binárního kódu programu a současně ho i urychlit, byly do
instrukční sady <i>Thumb-2</i> přidány dvě nové instrukce, které nejprve
provedou porovnání pracovního registru s&nbsp;nulou a poté provedou skok, pokud
je registr nulový či naopak není nulový. Součástí instrukčního slova je přitom
i krátký offset umožňující provést skok do vzdálenosti PC+4 až PC+130.</p>

<p>První z&nbsp;těchto instrukcí provede skok, pokud je vybraný pracovní
registr nulový:</p>

<pre>
CBZ Rn, offset   ; compare and branch if zero
</pre>

<p>Tato instrukce je ekvivalentní delší sekvenci:</p>

<pre>
CMP Rn, #0
BEQ label
</pre>

<p>Druhá instrukce provádí skok v&nbsp;přesně opačném případě, tj.&nbsp;tehdy,
když má registr nenulovou hodnotu:</p>

<pre>
CBNZ Rn, offset   ; compare and branch if non zero
</pre>

<p>Ekvivalentní zápis:</p>

<pre>
CMP Rn, #0
BNE label
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Prefix IT aneb řešení mnoha problémů s&nbsp;podmíněnými skoky</h2>

<p>Tvůrci instrukční sady <i>Thumb-2</i> se taktéž snažili nějakým způsobem
nahradit kdysi populární kombinaci příznakových bitů, které byly součástí
většiny instrukcí klasické RISCové instrukční sady A32. Z&nbsp;tohoto důvodu do
<i>Thumb-2</i> přidali jednu z&nbsp;nejzajímavějších instrukcí, které kdy pro
RISCové mikroprocesory vznikly. Jedná se vlastně o instrukční prefix nazvaný
<strong>IT</strong> podle sousloví <i>if-then</i>. Tento prefix může být
aplikován na jednu až čtyři instrukce následující za prefixem. Ihned za
prefixem <strong>IT</strong> se (bez mezery) udává, zda má být daná instrukce
provedena při splnění podmínky (<strong>T</strong> &ndash; <i>then</i>) či
naopak při jejím nesplnění (<strong>E</strong> &ndash; <i>else</i>). U první
instrukce je automaticky předpokládáno <strong>T</strong>, tudíž se uvádí
maximálně tři kombinace znaků T/E. Samozřejmě je taktéž nutné zapsat i
testovanou podmínku &ndash; může se jednat o kódy používané jak u podmíněných
skoků, tak i v&nbsp;podmínkových bitech:</p>

<table>
<tr><th>Kód</th><th>Význam</th><th>Předchozí operace porovnání</th></tr>
<tr><td>EQ</td><td>Z==1 (rovno)</td><td>signed i unsigned</td></tr>
<tr><td>NE</td><td>Z==0 (nerovno)</td><td>signed i unsigned</td></tr>
<tr><td>CS</td><td>C==1 (větší nebo rovno)</td><td>unsigned</td></tr>
<tr><td>CC</td><td>C==0 (menší než)</td><td>unsigned</td></tr>
<tr><td>MI</td><td>N==1 (záporný výsledek)</td><td>signed</td></tr>
<tr><td>PL</td><td>N==0 (kladný nebo nulový výsledek)</td><td>signed</td></tr>
<tr><td>VS</td><td>V==1 (přetečení)</td><td>signed</td></tr>
<tr><td>VC</td><td>V==0 (nedošlo k přetečení)</td><td>signed</td></tr>
<tr><td>HI</td><td>C==1 &amp; Z==0 (vetší než)</td><td>unsigned</td></tr>
<tr><td>LS</td><td>C==0 | Z==1 (menší nebo rovno)</td><td>unsigned</td></tr>
<tr><td>GE</td><td>N==V (větší nebo rovno)</td><td>signed</td></tr>
<tr><td>LT</td><td>N!=V (menší než)</td><td>signed</td></tr>
<tr><td>GT</td><td>Z==0 &amp; N==V (větší než)</td><td>signed</td></tr>
<tr><td>LE</td><td>Z==1 N!=V (menší nebo rovno)</td><td>signed</td></tr>
</table>

<p>V&nbsp;praxi to může znamenat, že zápis:</p>

<pre>
ITEEE EQ
</pre>

<p>značí, že pokud je nastaven příznak <i>zero</i> (rovnost), je provedena jen
první instrukce následující za prefixem, kdežto další tři instrukce nebudou
provedeny (třikrát &bdquo;else&ldquo;).</p>

<p>Pokud by se měly provést tři instrukce v&nbsp;případě kladného výsledku
předchozího porovnání, použil by se zápis:</p>

<pre>
ITTT PL
</pre>

<p>Porovnejme si nyní tři identické algoritmy. První z&nbsp;nich je
implementovaný s&nbsp;využitím instrukcí <i>A32</i> s&nbsp;podmínkovými
bity:</p>

<pre>
        LDREQ r0,[r1]      ; if EQ then LDR
        LDRNE r0,[r2]      ; if NE then LDR
        ADDEQ r0, r3, r0   ; if EQ then ADD
        ADDNE r0, r4, r0   ; if NE then ADD
</pre>

<p>V&nbsp;případě použití instrukční sady <i>Thumb</i> musíme využít podmíněné
skoky se všemi nepříjemnostmi, které z&nbsp;toho plynou:</p>

<pre>
        BNE L1             ; opačná podmínka - přeskočení instrukce
        LDR r0, [r1]
        ADD r0, r3, r0     ; máme štěstí: můžeme prohodit pořadí instrukcí
        B L2
L1                         
        LDR r0, [r2]
        ADD r0, r4, r0
L2
</pre>

<p>U instrukční sady <i>Thumb-2</i> lze v&nbsp;tomto případu s&nbsp;výhodou
použít prefixovou instrukci <strong>IT</strong>:</p>

<pre>
        ITETE EQ
        LDR r0, [r1]
        LDR r0, [r2]
        ADD r0, r3, r0
        ADD r0, r4, r0
</pre>

<p>Na závěr si ještě všechny tři implementace pro zajímavost porovnáme, a to
jak z&nbsp;hlediska velikosti programového kódu, tak i z&nbsp;hlediska celkové
doby trvání výpočtu:</p>

<table>
<tr><th>Instrukční sada</th><th>Velikost kódu</th><th>Počet cyklů</th></tr>
<tr><td>ARM (RISC)</td><td>16 bajtů</td><td>4 cykly</td></tr>
<tr><td>Thumb     </td><td>12 bajtů</td><td>4-20 cyklů</td></tr>
<tr><td>Thumb-2   </td><td>10 bajtů</td><td>4-5 cyklů</td></tr>
</table>

<p>Výsledek: pokud máme kvalitní překladač, bude instrukční sada <i>Thumb-2</i>
s&nbsp;velkou pravděpodobností lepší, než snaha o implementaci A32. Tento
rozdíl bude ještě více patrný na mikrořadičích a tedy i jádrech
<i>Cortex-M3</i>, protože zde může být program uložen v&nbsp;relativně pomalé
Flash ROM.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Bitové operace (Booleovský procesor)</h2>

<p>V&nbsp;oblasti mikrořadičů se již od dob slavného čipu <i>Intel 8051
(MCS-51)</i> můžeme setkat s&nbsp;implementací takzvaného Booleovského
procesoru. Tímto poněkud nadneseným jménem se označuje sada instrukcí, které
dokážou pracovat na úrovni jednotlivých bitů a nikoli celých slov, a to
(většinou) dokonce takovým způsobem, že i přístup do paměti či do řídicích
registrů periferních zařízení je prováděn po jednom bitu (například negace
jediného bitu je rozdílná operace od přečtení bajtu/slova do akumulátoru,
negace vybraného bitu a zápis celého bajtu/slova zpět). Jen pro zajímavost: na
již zmíněném mikrořadiči <i>MCS-51</i> je implementován úplný Booleovský
procesor s&nbsp;jednobitovým akumulátorem (tím je příznak
<strong>C</strong>/carry), 128 bitovou oblastí RAM a 128 bitovou oblastí
speciálních řídicích registrů (SFR). Tento Booleovský procesor měl
k&nbsp;dispozici sedmnáct instrukcí:</p>

<table>
<tr><th>#</th><th>Operace</th><th>S&nbsp;příznakem C</th><th>S&nbsp;bitem v&nbsp;RAM či SFR</th></tr>
<tr><td>1</td><td>Vynulování bitu</td><td>CLR C</td><td>CLR bit</td></tr>
<tr><td>2</td><td>Nastavení bitu </td><td>SETB C</td><td>SETB bit</td></tr>
<tr><td>3</td><td>Negace bitu    </td><td>CPL C</td><td>CPL bit</td></tr>
<tr><td>4</td><td>Logický součin </td><td>ANL C,bit  ANL C,/bit</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>Logický součet </td><td>ORL C,bit  ORL C,/bit</td><td>&nbsp;</td></tr>
<tr><td>6</td><td>Přesun bitu    </td><td>MOV C,bit</td><td>MOV bit,C</td></tr>
<tr><td>7</td><td>Skok při bit=1 </td><td>JC</td><td>JB</td></tr>
<tr><td>8</td><td>Skok při bit=0 </td><td>JNC</td><td>JNB</td></tr>
<tr><td>9</td><td>Skok + vynulování</td><td>&nbsp;</td><td>JBC</td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Booleovský procesor implementovaný v&nbsp;jádrech Cortex-M3</h2>

<p>Nyní nám již zbývá popsat, jakým způsobem je Booleovský procesor
implementován na jádrech <i>Cortex-M3</i>. Tvůrci zvolili odlišný přístup, než
tomu bylo v&nbsp;případě mikrořadiče 8051: namísto použití speciálních
instrukcí pro manipulaci s&nbsp;jednotlivými bity nedošlo ke změně instrukční
sady, ale k&nbsp;vyhrazení několika paměťových regionů, k&nbsp;nimž se
přistupuje po bitech. Tyto regiony leží na adresách 0x20000000-0x200FFFFF a
0x40000000-0x400FFFFF. Jak je ze zadaného rozsahu patrné, má každý region
velikost 1MB. Pro tento jeden megabajt existují adresové aliasy
0x22000000-0x23FFFFFF a 0x42000000-0x43FFFFFF. Ty mají zdánlivou velikost 32MB,
ovšem jen z&nbsp;toho důvodu, že při čtení slova se ve skutečnosti přečte pouze
jediný bit, takže se do registru načte hodnota 0x00000000 nebo 0x00000001. Při
zápisu se naopak zapisuje pouze nejnižší bit uložený v&nbsp;registru, takže
hodnota 0x00000000, 0xFFFFFFFE či 0x44444444 má stejný význam, stejně jako
hodnoty 0x00000001, 0xFFFFFFFF atd. Jednotka pro přístup do paměti automaticky
přepočte zadanou aliasovou adresu 0x22000000-0x23FFFFFF na reálnou adresu
0x20000000-0x200FFFFF a provede zápis či čtení jediného bitu.</p>

<p>Poznámka: ve skutečnosti je první paměťový region uložen v&nbsp;SRAM (a to
hned na jejím začátku), kdežto druhý region je mapován do oblasti periferních
zařízení. Opět se zde reflektuje situace mikrořadiče 8051, kde bylo provedeno
totéž rozdělení, ovšem v&nbsp;mnohem menším měřítku (128 bitů SRAM a 128 bitů
pro periferní zařízení versus 1 MB SRAM a 1 MB pro periferní zařízení). Další
zajímavostí je fakt, že operace čtení či zápisu bitů jsou atomické a
nepřerušitelné.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Jednotka MPU</h2>

<p>Mezi další zajímavé prvky, kterými mohou být jádra <i>Cortex-M3</i>
doplněny, patří jednotka <i>MPU</i> neboli <i>Memory Protection Unit</i>. Tato
jednotka neslouží k&nbsp;virtualizaci paměti (jako <i>MMU</i>), ale
&bdquo;pouze&ldquo; k&nbsp;definování až osmi paměťových regionů, u nichž lze
nastavovat různá práva, zejména právo XN (Execute Never, zákaz spouštění kódu
z&nbsp;daného regionu). Zajímavé je, že se tyto regiony dokonce mohou
překrývat, v&nbsp;tomto případě se práva převezmou z&nbsp;nastavení regionu
s&nbsp;vyšším indexem (0-7). Kromě práv je možné nastavit, zda se daná oblast
má sdílet s&nbsp;dalšími jádry (což u většiny implementací <i>Cortex-M3</i>
bude postrádat význam) a zda mají být zápisy do paměti provedeny vždy
v&nbsp;takovém pořadí, jak to odpovídá sekvenci instrukcí (to má význam
především při komunikaci s&nbsp;periferními zařízeními).</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Procesory Atmel založené na technologii ARM</h2>

<p>Nastal čas podívat se na nějaký reálný mikrořadič či SoC založený na
technologii <i>Cortex-M3</i>. Aby to bylo zajímavější, zaměříme se na čipy
<i>SAM3x</i> vyráběné firmou <i>Atmel</i>. Proč se jedná o zajímavé téma?
Společnou Atmel totiž některými svými dalšími čipy, zejména pak řadou AVR32,
vlastně ARMovským jádrům poměrně zdárně konkuruje, nicméně ani to jí
nezabraňuje, aby dokázala realizovat jedny z&nbsp;nejlepších integrovaných
obvodů s&nbsp;jádrem <i>Cortex-M3</i>. Má to vlastně svoji logiku, protože
<i>Atmel</i> vyniká i v&nbsp;implementaci periferních zařízení, které jsou pro
mikrořadiče většinou nezbytné. Kombinací jádra <i>Cortex-M3</i> a periferií od
Atmelu (A/D převodníky, USART, SPI, CAN, I<sup>2</sup>C atd.) tak zákazníci
dostávají k&nbsp;dispozici velmi zajímavý čip, který je navíc navržen takovým
způsobem, aby jednotlivé periferie spolu dokázaly komunikovat přímo a nechat
tak procesor v&nbsp;režimu <i>sleep</i>. Čipy <i>SAM3x</i> za sebou mají
relativně dlouhý vývoj, což je patrné i z&nbsp;následující tabulky:</p>

<table>
<tr><th>#</th><th>Čip</th><th>Rok uvedení do výroby</th></tr>
<tr><td>1</td><td>SAM3U</td><td>2009</td></tr>
<tr><td>2</td><td>SAM3S</td><td>2009</td></tr>
<tr><td>3</td><td>SAM3N</td><td>2010</td></tr>
<tr><td>4</td><td>SAM3A</td><td>2012</td></tr>
<tr><td>5</td><td>SAM3X</td><td>2012</td></tr>
</table>

<p>Například na čipu <i>Atmel SAM3X8E</i> s&nbsp;hodinovou frekvencí 84 MHz
použitém v&nbsp;populárním Arduinu Due kromě jádra <i>Cortex-M3</i> nalezneme
i:</p>

<ol>
<li>2 &times; 256 kB Flash ROM</li>
<li>64 + 32 kB SRAM</li>
<li>16 kB ROM (obsahuje především bootloader rutiny pro UART a USB)</li>
<li>54 I/O pinů (12 z&nbsp;nich vyhrazeno pro PWM)</li>
<li>16 kanálový ADC (12 bitů), jeden rezervován pro vnitřní senzor teploty</li>
<li>2 DAC (taktéž 12bitů)</li>
<li>3&times; USART</li>
<li>9 kanálový 32bitový čítač</li>
<li>2 TWI (Two Wire Interface, varianta I<sup>2</sup>C)</li>
<li>USB Device/Mini host</li>
<li>Ethernet MAC 10/100 + podpora pro přenos dat přes DMA (to je důležité, viz problémy s&nbsp;Raspberry)</li>
<li>True Random Number Generator (TRNG), dokáže každých 32 taktů vrátit 32bitové náhodné(?) číslo</li>
</ol>

<p>Tento čip je použit i v&nbsp;počítači <i>UDOO</i>, s&nbsp;nímž se seznámíme
někdy příště.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>A tour of the Cortex-M3 core:<br />
<a href="http://community.arm.com/groups/processors/blog/2013/11/04/a-tour-of-the-cortex-m3-core">http://community.arm.com/groups/processors/blog/2013/11/04/a-tour-of-the-cortex-m3-core</a>
</li>

<li>Five things you may not know about ARM Cortex-M:<br />
<a href="http://community.arm.com/docs/DOC-6912">http://community.arm.com/docs/DOC-6912</a>
</li>

<li>Divide and Conquer:<br />
<a href="http://community.arm.com/docs/DOC-8059">http://community.arm.com/docs/DOC-8059</a>
</li>

<li>MCU market turns to 32-bits and ARM<br />
<a href="http://www.eetimes.com/document.asp?doc_id=1280803">http://www.eetimes.com/document.asp?doc_id=1280803</a>
</li>

<li>Cortex-M0 Processor (ARM Holdings)<br />
<a href="http://www.arm.com/products/processors/cortex-m/cortex-m0.php">http://www.arm.com/products/processors/cortex-m/cortex-m0.php</a>
</li>

<li>Cortex-M0+ Processor (ARM Holdings)<br />
<a href="http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php">http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php</a>
</li>

<li>ARM Processors in a Mixed Signal World<br />
<a href="http://www.eeweb.com/blog/arm/arm-processors-in-a-mixed-signal-world">http://www.eeweb.com/blog/arm/arm-processors-in-a-mixed-signal-world</a>
</li>

<li>ARM Architecture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_architecture">https://en.wikipedia.org/wiki/ARM_architecture</a>
</li>

<li>Cortex-M0 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_Cortex-M0">https://en.wikipedia.org/wiki/ARM_Cortex-M0</a>
</li>

<li>Cortex-M0+ (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M0.2B">https://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M0.2B</a>
</li>

<li>Improving ARM Code Density and Performance<br />
<a href="New Thumb Extensions to the ARM Architecture Richard Phelan">New Thumb Extensions to the ARM Architecture Richard Phelan</a>
</li>

<li>The ARM Processor Architecture<br />
<a href="http://www.arm.com/products/processors/technologies/instruction-set-architectures.php">http://www.arm.com/products/processors/technologies/instruction-set-architectures.php</a>
</li>

<li>Thumb-2 instruction set<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0344c/Beiiegaf.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0344c/Beiiegaf.html</a>
</li>

<li>Introduction to ARM thumb<br />
<a href="http://www.eetimes.com/discussion/other/4024632/Introduction-to-ARM-thumb">http://www.eetimes.com/discussion/other/4024632/Introduction-to-ARM-thumb</a>
</li>

<li>ARM, Thumb, and ThumbEE instruction sets<br />
<a href="http://www.keil.com/support/man/docs/armasm/armasm_CEGBEIJB.htm">http://www.keil.com/support/man/docs/armasm/armasm_CEGBEIJB.htm</a>
</li>

<li>An Introduction to ARM Assembly Language<br />
<a href="http://dev.emcelettronica.com/introduction-to-arm-assembly-language">http://dev.emcelettronica.com/introduction-to-arm-assembly-language</a>
</li>

<li>Processors - ARM<br />
<a href="http://www.arm.com/products/processors/index.php">http://www.arm.com/products/processors/index.php</a>
</li>

<li>The ARM Instruction Set<br />
<a href="http://simplemachines.it/doc/arm_inst.pdf">http://simplemachines.it/doc/arm_inst.pdf</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

