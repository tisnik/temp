<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Architektura mikrořadičů s jádry ARM Cortex-M0 a ARM Cortex-M0+</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Architektura mikrořadičů s jádry ARM Cortex-M0 a ARM Cortex-M0+</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Přibližně před pěti lety došlo na trhu s mikrořadiči k poměrně významné události: obrat z prodejů 32bitových mikrořadičů přesáhl obrat dosahovaný u mikrořadičů osmibitových (PIC, řada 51, Atmel AVR). Od té doby počet vyrobených 32bitových mikrořadičů stále roste, přičemž nezanedbatelný podíl zde mají mikrořadiče ARM Cortex-M0 a Cortex-M0+, jejichž architekturu si dnes popíšeme.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Architektura mikrořadičů s&nbsp;jádry ARM Cortex-M0 a ARM Cortex-M0+</a></p>
<p><a href="#k02">2. Cortex-M0 a ostatní architektury a čipy ARM</a></p>
<p><a href="#k03">3. Produktová řada Cortex-M</a></p>
<p><a href="#k04">4. Základní vlastnosti mikrořadičů Cortex-M0</a></p>
<p><a href="#k05">5. Konfigurovatelná násobička</a></p>
<p><a href="#k06">6. Instrukční sada</a></p>
<p><a href="#k07">7. Odklon od původní čistě RISCové sady A32</a></p>
<p><a href="#k08">8. Thumb versus &bdquo;klasické&ldquo; instrukční sady mikrořadičů</a></p>
<p><a href="#k09">9. Mikrořadiče Cortex-M0+</a></p>
<p><a href="#k10">10. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Architektura mikrořadičů s&nbsp;jádry ARM Cortex-M0 a ARM Cortex-M0+</h2>

<p>Společnost <i>ARM Holdings</i> se v&nbsp;minulosti, tehdy ještě pod dnes již
nepožívaným názvem <i>Acorn RISC Machine</i>, proslavila především díky svým
32bitovým RISCovým procesorům ARM, které nabízely vysoký výpočetní výkon a
současně i malou spotřebu. Není tedy divu, že tyto čipy byly použity
v&nbsp;některých dobových výkonných mikropočítačích, například v&nbsp;počítači
<i>Acorn Archimedes</i> a jeho následovnících (<i>Acorn</i> řady R,
<i>Acorn</i> řady A apod.). Mezi jednu z&nbsp;největších předností čipů
<i>ARM</i> patří i to, že větší a patřičně technologicky vybavené firmy si
mohou zakoupit licenci na použití jádra mikroprocesorů ARM ve svých
integrovaných obvodech, kde lze (přímo na čipu) zkombinovat vlastní
mikroprocesor s&nbsp;dalšími moduly, například s&nbsp;GPU, řadičem sítě
(Ethernet, WiFi), řadičem LCD atd. Prakticky stejný způsob licencování
společnost <i>ARM</i> používá i u svých mikrořadičů, což jsou ve skutečnosti
32bitová RISCová mikroprocesorová jádra, která lze přímo při návrhu čipů
doplnit o další obvody a vytvořit tak mikrořadič vybavený přesně na základě
požadavků výrobce, což se vyplácí ve chvíli, kdy je takto navržený čip použit
v&nbsp;masově vyráběných zařízeních.</p>

<img src="http://i.iinfo.cz/images/605/pc118sada1-2.jpg" width="400" height="463" alt=" " />
<p><i>Obrázek 1: Dobový plakát s&nbsp;počítačem Acorn BBC Micro, což byl
předchůdce počítače Acorn Archimedes.</i></p>

<p>V&nbsp;současnosti se můžeme s&nbsp;integrovanými obvody obsahujícími
některé jádro mikroprocesoru <i>ARM</i> setkat v&nbsp;nepřeberné řadě různých
elektronických zařízení, počínaje (možná poněkud nadneseně řečeno) ovladačem
výtahu, přes různě výkonné smartphony, tablety, mikropočítače se SoC typu
<i>Raspberry</i>, kapesní herní konzole (pravděpodobně nejznámější je
<i>Nintendo 3DS</i>), a konče dnes již poněkud nemódními netbooky či naopak
velmi módními zařízeními pro <i>IoT (Internet of Things)</i>. U všech těchto
elektronických zařízení se ukazuje být velkou předností poměrně malá
energetická náročnost mikroprocesorů <i>ARM</i>, a to i v&nbsp;případě serverů,
protože s&nbsp;tím, jak cena za hardware obecně postupně klesá, tak současně i
celosvětově stoupá cena za elektřinu, která se stává poměrně zásadním faktorem
při provozování serverovny či cloudového centa (i když je veřejným tajemstvím,
že ve skutečnosti vypadá celý slavný &bdquo;cloud&ldquo; nějak <a
href="http://xkcd.com/908/">takto</a> :-). Dnes se budeme zabývat popisem
architektury těch <strong>nejméně výkonných</strong> čipů, které jsou dnes
v&nbsp;rodině <i>ARM</i> dostupné. Jedná se o mikrořadiče s&nbsp;jádrem
<i>Cortex-M0</i> a <i>Cortex-M0+</i>.</p>

<a href="http://i.iinfo.cz/images/605/pc118sada1-3.jpg"><img src="http://i.iinfo.cz/images/605/pc118sada1-3-prev.jpg" width="370" height="257" alt=" " /></a>
<p><i>Obrázek 2: Osmibitový mikropočítač Acorn BBC Micro.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Cortex-M0 a ostatní architektury a čipy ARM</h2>

<p>Mikroprocesory a mikrořadiče ARM za sebou mají dlouhou dobu vývoje, takže
není divu, že postupně vznikaly různé generace těchto čipů, které se odlišovaly
jak svým výpočetním výkonem, tak i různými změnami v&nbsp;instrukční sadě,
uspořádáním cache, počtem řezů (pipeline), použitými submoduly (hardwarová
násobička, dělička, jednotka pro SIMD operace) atd. Čipy ARM je možné rozlišit
podle architektury, přičemž základní dělení je naznačeno v&nbsp;následující
tabulce:</p> 

<table>
<tr><th>#</th><th>Architektura</th><th>Adresová/datová sběrnice</th><th>Jádro</th><th>Poznámka/profil (u Cortex)</th></tr>
<tr><td>1</td><td>ARMv1   </td><td>26/32 bitů</td><td>ARM1</td><td>první implementace, technologické demo</td></tr>
<tr><td>2</td><td>ARMv2   </td><td>26/32 bitů</td><td>ARM2, ARM3</td><td>přidána HW násobička a MMU</td></tr>
<tr><td>3</td><td>ARMv3   </td><td>26/32 bitů</td><td>ARM6, ARM7</td><td></td></tr>
<tr><td>4</td><td>ARMv4   </td><td>26/32 bitů</td><td>ARM8</td><td>patří sem mj.&nbsp;i řada čipů StrongARM</td></tr>
<tr><td>5</td><td>ARMv5   </td><td>32 bitů   </td><td>ARM7EJ, ARM9E, ARM10E</td><td>lze najít ve starších zařízeních</td></tr>
<tr><td>6</td><td>ARMv6   </td><td>32 bitů   </td><td>ARM11</td><td>dodnes používaná jádra</td></tr>
<tr><td>7</td><td>ARMv6-M </td><td>32 bitů   </td><td>Cortex-M0, Cortex-M0+, Cortex-M1</td><td>mikrořadiče (M v&nbsp;názvu)</td></tr>
<tr><td>8</td><td>ARMv7-M </td><td>32 bitů   </td><td>Cortex-M3</td><td>mikrořadiče (M v&nbsp;názvu)</td></tr>
<tr><td>9</td><td>ARMv7E-M</td><td>32 bitů   </td><td>Cortex-M4, Cortex-M7</td><td>mikrořadiče (M v&nbsp;názvu)</td></tr>
<tr><td>10</td><td>ARMv7-R </td><td>32 bitů   </td><td>Cortex-R4, Cortex-R5, Cortex-R7</td><td>realtime aplikace</td></tr>
<tr><td>11</td><td>ARMv7-A </td><td>32 bitů   </td><td>Cortex-A5, Cortex-A7, Cortex-A8, Cortex-A9, Cortex-A12, Cortex-A15, Cortex-A17</td><td>smartphony atd.</td></tr>
<tr><td>12</td><td>ARMv8-A </td><td>32/64 bitů</td><td>Cortex-A53, A57 a A72</td><td>smartphony atd.</td></tr>
</table>

<img src="http://i.iinfo.cz/images/188/arm1.jpg" class="image-222275" alt="&#160;" height="220" width="220" />
<p><i>Obrázek 3: Čipy StrongARM založené na architektuře ARMv4 byly
v&nbsp;minulosti velmi oblíbené. Zajímavé je, že původně tyto čipy vyvinula
společnost Digital Equipment Corporation ve spolupráci s&nbsp;firmou ARM a
později byla tato technologie prodána Intelu.</i></p>

<p>Poznámky:</p>

<ul>

<li>U čipů prvních dvou architektur ARMv1 a ARMv2 nebyly použity cache (ani
paměťová ani datová), ovšem i samotné CPU byly relativně pomalé (hodinová
frekvence 8MHz), takže se tehdy nejednalo o úzké hrdlo systému.</li>

<li>Můžeme zde vidět dělení na &bdquo;klasická&ldquo; jádra a
&bdquo;Cortex&ldquo; jádra.</li>

<li>V&nbsp;nových elektronických zařízeních se již s&nbsp;prvními čtyřmi
generacemi čipů většinou nesetkáme.</li>

<li>ARM11 je (poněkud zjednodušeně řečeno) poslední doposud masově používané
&bdquo;klasické&ldquo; jádro a současně i základ pro velké množství čipů
používaných v&nbsp;různých mobilních zařízeních.</li>

<li>Nové mikroprocesory a mikrořadiče ARM jsou děleny do třech skupin:
<u>A</u>pplication, <u>R</u>ealtime, <u>M</u>icrocontroller (název první
skupiny pravděpodobně vznikl ze snahy o její &bdquo;napasování&ldquo; na
zkratku ARM).</li>

<li>Populární mikropočítač Raspberry používá čip s&nbsp;mikroarchitekturou
ARM1176JZF-S, kde prefix ARM1176 značí třetí typ jádra ARM11.</li>

<li>Právě ARM11 se některými svými vlastnostmi blíží čipům Cortex-M0 a
Cortex-M0+, jimiž se dnes budeme zabývat (ARM11 je však určen pro výkonnější
aplikace, opět si připomeňme Raspberry a podobná zařízení).</li>

</ul>

<img src="http://i.iinfo.cz/images/566/arm2.jpg" class="image-222276" alt="&#160;" height="394" width="350" />
<p><i>Obrázek 4: Dnes již historický kousek: osobní mikropočítač vybavený
mikroprocesorem s&nbsp;architekturou ARM.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Produktová řada Cortex-M</h2>

<p>Již při letmém pohledu na druhou polovinu tabulky, kterou jsme si ukázali <a
href="#k02">v&nbsp;předchozí kapitole</a>, je patrné, že novější architektury
ARM tvoří základ pro jádra třech navzájem odlišných typů čipů. Jedná se o řadu
<i>Cortex-M</i>, kde nalezneme jádra určená především pro použití
v&nbsp;mikrořadičích (s&nbsp;různým výpočetním výkonem a energetickými nároky),
dále pak o řadu <i>Cortex-R</i> určenou pro realtime aplikace (tato jádra jsou
mnohdy vybavena instrukcemi typu SIMD) a konečně o řadu <i>Cortex-A</i>, kam
patří jak relativně málo výkonné čipy použitelné například v&nbsp;set-top
boxech, tak i čipy určené pro servery apod. (tato jádra jsou mnohdy vybavena i
matematickým koprocesorem, podporou pro kooperaci většího množství jader,
podporou pro adresování až jednoho terabajtu RAM atd.). Pojďme se nyní zaměřit
na řadu <i>Cortex-M</i>, tedy na rodinu jader určených pro různě výkonné
mikrořadiče:</p>

<table>
<tr><th>#</th><th>Jádro     </th><th>Architektura ARM</th><th>Architektura CPU/MCU</th><th>MPU</th></tr>
<tr><td>1</td><td>Cortex-M0 </td><td>ARMv6-M</td><td>Von Neumann</td><td>ne</td></tr>
<tr><td>2</td><td>Cortex-M0+</td><td>ARMv6-M</td><td>Von Neumann</td><td>volitelná</td></tr>
<tr><td>3</td><td>Cortex-M1 </td><td>ARMv6-M</td><td>Von Neumann</td><td>ne</td></tr>
<tr><td>4</td><td>Cortex-M3 </td><td>ARMv7-M</td><td>Harvardská</td><td>volitelná</td></tr>
<tr><td>5</td><td>Cortex-M4 </td><td>ARMv7E-M</td><td>Harvardská</td><td>volitelná</td></tr>
<tr><td>6</td><td>Cortex-M7 </td><td>ARMv7E-M</td><td>Harvardská</td><td>volitelná</td></tr>
</table>
  
<p>Vidíme, že do řady <i>Cortex-M</i> spadá celkem šest odlišných typů jader,
která jsou založena na architektuře ARMv6-M, ARMv7-M či ARMv7E-M. Důležité je
si uvědomit, že každá z&nbsp;těchto architektur má odlišné vlastnosti a obecně
i jinou instrukční sadu, z&nbsp;čehož také vyplývá, že například mikrořadiče
postavené na jádru <i>Cortex-M3</i> nebudou binárně kompatibilní
s&nbsp;mikrořadiči s&nbsp;jádrem <i>Cortex-M0</i> atd. To však v&nbsp;dnešní
době nepředstavuje závažný problém, minimálně ne tak velký, jako je tomu na
platformě Wintel.</p>

<p>Poznámka: MPU zde má skutečně význam jednotky pro ochranu vybraných oblastí
(regionů) paměti. Nejedná se o jednotku zajišťující virtualizaci paměti (někdy
se totiž tyto dvě funkce realizují společně).</p>

<a href="http://www.root.cz/obrazek/222277/"><img src="http://i.iinfo.cz/images/272/arm3-prev.jpg" class="image-222277" alt="&#160;" height="229" width="370" /></a>
<p><i>Obrázek 5: V&nbsp;oblasti serverů se teprve postupně začínají prosazovat
64bitové čipy ARM.</i></p>

<p>Podívejme se nyní podrobněji na to, co mají jednotlivá jádra z&nbsp;řady
<i>Cortex-M</i> společného a čím se od sebe odlišují. Asi nejdůležitější
společnou vlastností je, že <i>Cortex-M</i> nepodporuje původní 32bitovou
RISCovou instrukční sady (zde označovanou A32). Namísto toho je podporována
instrukční sada <i>Thumb</i> a u některých jader i <i>Thumb-2</i>. Jednodušší
jádra nemají hardwarovou děličku ani modul pro DSP operace. Všechny tyto
vlastnosti jsou přehledně vypsány v&nbsp;další tabulce:</p>

<table>
<tr><th>#</th><th>Jádro     </th><th>Dělička</th><th>DSP</th><th>A32</th><th>Thumb</th><th>Thumb-2</th></tr>
<tr><td>1</td><td>Cortex-M0 </td><td>ne </td><td>ne </td><td>ne</td><td>kromě 3 instrukcí</td><td>částečně</td></tr>
<tr><td>2</td><td>Cortex-M0+</td><td>ne </td><td>ne </td><td>ne</td><td>kromě 3 instrukcí</td><td>částečně</td></tr>
<tr><td>3</td><td>Cortex-M1 </td><td>ne </td><td>ne </td><td>ne</td><td>kromě 3 instrukcí</td><td>částečně</td></tr>
<tr><td>4</td><td>Cortex-M3 </td><td>ano</td><td>ne </td><td>ne</td><td>kompletně</td><td>kompletně</td></tr>
<tr><td>5</td><td>Cortex-M4 </td><td>ano</td><td>ano</td><td>ne</td><td>kompletně</td><td>kompletně</td></tr>
<tr><td>6</td><td>Cortex-M7 </td><td>ano</td><td>ano</td><td>ne</td><td>kompletně</td><td>kompletně</td></tr>
</table>

<p>Jak je tomu se vzájemnou binární kompatibilitou? Program přeložený pro
Cortex-M0 či Cortex-M0+ bude možné provozovat i na vyšších jádrech bez nutnosti
jeho modifikace (za předpokladu volby stejného pořadí bajtů &ndash; little či
big endian). Podobně kód pro Cortex-M3 lze spustit na čipech s&nbsp;jádrem
Cortex-M4 či Cortex-M7. Žádný z&nbsp;těchto čipů pochopitelně nedokáže pracovat
s&nbsp;kódem používajícím instrukce A32 či s&nbsp;kódem, který používá
například rozšíření Neon (SIMD), Jazelle (Java bajtkód), ThumbEE (dtto)
atd.</p>

<a href="http://www.root.cz/obrazek/222278/"><img src="http://i.iinfo.cz/images/61/arm4-prev.jpg" class="image-222278" alt="&#160;" height="262" width="370" /></a>
<p><i>Obrázek 6: Čipy s&nbsp;jádrem ARM nalezneme i v&nbsp;některých herních
konzolích.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Základní vlastnosti mikrořadičů Cortex-M0</h2>

<p>Jádro <i>Cortex-M0</i> tvoří základ pro čipy, u nichž je žádoucí dosáhnout
co nejnižší výrobní ceny, malých rozměrů a malého příkonu (s&nbsp;tím
samozřejmě souvisí i příslušně nízký výpočetní výkon). Tato jádra by měla
postupně nahrazovat některé aplikace, v&nbsp;nichž se nyní používají osmibitové
mikrořadiče. Malé plochy čipu se skutečně podařilo dosáhnout, protože nejmenší
vyráběný integrovaný obvod s&nbsp;jádrem <i>Cortex-M0</i> má plochu přibližně
1,6&times;2 mm. I spotřeba je velmi nízká, protože dosahuje 12.5µW na každý MHz
při použití napětí 1,2V a 64µW na každý MHz při napětí 1,8V (teoreticky roste
spotřeba s&nbsp;hodinovou frekvencí lineárně a s&nbsp;napětím kvadraticky,
mimochodem hodinová frekvence těchto jader dosahuje podle provedení až několika
desítek až stovek MHz, typicky 48 MHz, 80 MHz či 120 MHz).
Toto jádro je naprogramované ve Verilogu a po technologické stránce je zajímavé
tím, že se interně používá pipeline se třemi řezy, na rozdíl od jádra
<i>Cortex-M0+</i> popsaného v&nbsp;navazujících kapitolách.</p>

<img src="http://i.iinfo.cz/images/47/arm5.jpg" class="image-222279" alt="&#160;" height="234" width="390" />
<p><i>Obrázek 7: Čipy XMC4000 založené na jádru Cortex-M0.<br />
Autor původní fotky: Davewave88.</i></p>

<p>Vzhledem k&nbsp;tomu, že jádra <i>Cortex-M0</i> jsou používána
v&nbsp;aplikacích, kde se požaduje velmi nízký příkon CPU (například různá
zařízení s&nbsp;baterií či monočlánkem), podporují tyto čipy hned několik
režimů &bdquo;uspání&ldquo; (<i>sleep mode</i>). V&nbsp;základním režimu
<i>sleep</i> se jednoduše sníží hodinová frekvence až na 0 Hz, ovšem kromě toho
lze použít i režim nazvaný <i>deep sleep</i>, při jehož aktivaci se od napájení
odpojí i flash paměť atd. Při práci s&nbsp;různými režimy CPU slouží i
instrukce <strong>WFI</strong> (<i>Wait For Interrupt</i>) a
<strong>WFE</strong> a (<i>Wait for Event</i>). První instrukce čeká na vznik
výjimky, přerušení či signálu od debuggeru, druhá instrukce pak na nemaskovanou
výjimku, událost přijatou od některého koprocesoru či opět na signál od
debuggeru.</p>

<img src="http://i.iinfo.cz/images/640/arm6.jpg" class="image-222280" alt="&#160;" height="211" width="336" />
<p><i>Obrázek 8: Jiné zapouzdření čipů XMC4000 založených na jádru Cortex-M0.<br />
Autor původní fotky: Davewave88.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Konfigurovatelná násobička</h2>

<p>O tom, že jádro <i>Cortex-M0</i> je skutečně navrženo takovým způsobem, aby
mohlo spotřebou energie a částečně i cenou soutěžit s&nbsp;jednoduššími a
levnějšími mikrořadiči, svědčí i způsob vyřešení násobičky. V&nbsp;instrukční
sadě Thumb nalezneme mj.&nbsp;i instrukci MULS určenou pro násobení dvou
32bitových operandů, přičemž výsledek je taktéž 32bitový (zapamatuje se jen
spodních 32bitů výsledku). Při implementaci mikroprocesoru je možné zvolit,
jakým typem násobičky se tato instrukce bude provádět. Pokud se má jednat o
výkonnější čip (a aplikace násobení skutečně využije), může se použít rychlá
násobička, která celou operaci dokáže provést v&nbsp;jediném taktu (samozřejmě
se měření provádí při postupně zaplňované pipeline). Pokud se ovšem má jednat o
levnější a méně výkonný čip, lze násobení implementovat po krocích
(sčítání+bitové posuny), což sice trvá celých 32 taktů, ovšem potřebná plocha
čipu a i energetická náročnost je mnohem menší, než v&nbsp;případě jednocyklové
násobičky.</p>

<img src="http://i.iinfo.cz/images/610/arm7.jpg" class="image-222281" alt="&#160;" height="344" width="390" />
<p><i>Obrázek 9: Mezi další čipy založené na jádru Cortex-M0 patří integrované
obvody STM32 F0.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instrukční sada</h2>

<p>Z&nbsp;předchozího textu již víme, že jádra <i>Cortex-M0</i> nedokážou
správně dekódovat instrukce z&nbsp;původní 32bitové instrukční sady ARM (dnes
se označuje jako A32). Namísto toho je podporována instrukční sada Thumb,
z&nbsp;níž byly odstraněny jen tři instrukce: <strong>CBZ</strong>,
<strong>CBNZ</strong> a <strong>IT</strong> (zejména tato poslední instrukce by
však byla velmi užitečná, nicméně její zařazení by asi komplikovalo návrh
čipu). Tato jádra navíc rozpoznají i šest instrukcí z&nbsp;instrukční sady
Thumb-2, konkrétně se jedná o instrukce <strong>BL</strong>,
<strong>DMB</strong>, <strong>DSB</strong>, <strong>ISB</strong>,
<strong>MRS</strong> a <strong>MSR</strong>. Důvod, proč se tvůrci přiklonili
k&nbsp;instrukční sadě Thumb, je pochopitelný &ndash; je tak možné dosáhnout
větší hustoty kódu, což je zejména na mikrořadičích, kde jsou kapacity RAM a
(Flash)ROM relativně malé, poměrně kritická vlastnost. Díky relativně velké
ortogonalitě instrukční sady Thumb se navíc může dosáhnout větší hustoty kódu,
než je tomu u některých osmibitových mikrořadičů! (typické je to zejména
v&nbsp;porovnání s&nbsp;řadou 51).</p>

<a href="http://www.root.cz/obrazek/222282/"><img src="http://i.iinfo.cz/images/560/arm8-prev.png" class="image-222282" alt="&#160;" height="220" width="370" /></a>
<p><i>Obrázek 10: Kódování instrukcí v&nbsp;sadě Thumb.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Odklon od původní čistě RISCové sady A32</h2>

<p>Připomeňme si, že instrukční sada dnes označovaná A32 je založena na
původním režimu procesorů ARM, při němž se ideálně v&nbsp;každém taktu načte
jedno instrukční slovo o šířce 32 bitů (výjimku tvoří především skoky a taktéž
reakce na přerušení). Díky takto širokému instrukčnímu slovu bylo možné
instrukční sadu navrhnout tak, aby se v&nbsp;každé instrukci nacházely čtyři
podmínkové bity, aby byly aritmetické a logické instrukce tříadresové
(tj.&nbsp;obsahovaly adresy dvou zdrojových registrů a registru cílového) a
taktéž to, aby se kromě kódu vlastní operace mohl v&nbsp;instrukcích uvést i
počet bitů, o něž se má hodnota druhého operandu posunout či zrotovat
v&nbsp;<i>barrel shifteru</i>. Tato instrukční sada vycházela z&nbsp;dobových
požadavků a zkušeností, kdy se po několika nevydařených projektech se složitými
procesory s&nbsp;architekturou <i>CISC</i> konstruktéři obrátili opačným směrem
a začali se zabírat procesory s&nbsp;architekturou, pro niž se později vžil
název <i>RISC</i>.</p>

<a href="http://www.root.cz/obrazek/222284/"><img src="http://i.iinfo.cz/images/409/arm9-prev.png" class="image-222284" alt="&#160;" height="270" width="356" /></a>
<p><i>Obrázek 11: Kódování instrukcí u &bdquo;klasické&ldquo; 32bitové RISCové
architektury.</i></p>

<p>Ovšem mikroprocesory <i>ARM</i>, které byly původně navrženy pro využití
v&nbsp;osobních počítačích, se postupně začaly používat i v&nbsp;jiných
oblastech, především ve vestavěných (<i>embedded</i>) systémech, kde vládnou
poněkud jiné požadavky. Ve vestavěných systémech je totiž kromě nízké spotřeby,
popř.&nbsp;rychlé reakce na přerušení, kladen i velký důraz na to, aby binární
obrazy programů byly co nejmenší, protože programy jsou ukládány do pamětí
ROM/EPROM/EEPROM/Flash s&nbsp;relativně vysokou cenou za jeden bit a nikoli na
vysokokapacitních paměťových médiích (pevné disky) tak, jak je tomu na osobních
počítačích. Navíc došlo k&nbsp;postupné změně i v&nbsp;oblasti osobních
počítačů &ndash; rychlosti procesorů rostly větším tempem, než rychlost pamětí
DRAM &ndash; což s&nbsp;sebou přinášelo nutnost použití drahých vyrovnávacích
pamětí založených na technologii SRAM. V&nbsp;jeden okamžik se dokonce zdálo,
že tento vývoj bude znamenat konec procesorů typu <i>RISC</i>, které jsou
mj.&nbsp;typické i tím, že používají instrukční sady s&nbsp;instrukcemi pevné
šířky (asi nejblíže se klasické architektuře <i>RISC</i> v&nbsp;současnosti
blíží mikroprocesory <i>MIPS</i>, kterými jsme se již v&nbsp;tomto seriálu
zabývali).</p>


<p><a name="k08"></a></p>
<h2 id="k08">8. Thumb versus &bdquo;klasické&ldquo; instrukční sady mikrořadičů</h2>

<p>Odpovědí společnosti <i>ARM</i> na obě nové skutečnosti &ndash; požadavek na
menší velikost binárních obrazů programů a zvyšující se rozdíl v&nbsp;rychlosti
CPU a DRAM &ndash; bylo zavedení nové <strong>alternativní</strong> instrukční
sady nazvané <i>Thumb</i>, v&nbsp;níž mají všechny instrukce šířku jen šestnáct
bitů, což znamená, že v&nbsp;paměti určité kapacity lze uložit přibližně
dvakrát tolik instrukcí <i>Thumb</i>, něž původních RISCových instrukcí (slovo
&bdquo;přibližně&ldquo; je zde použito především z&nbsp;toho důvodu, že se
v&nbsp;kódu vyskytují i 32bitové konstanty, nezávisle na použité instrukční
sadě). Ovšem menší šířka instrukcí znamenala i určitá omezení. Zcela zmizely
podmínkové kódy, které zůstaly zachovány jen u instrukce podmíněného skoku.
Taktéž se možnost použití <i>barrel shifteru</i> omezila jen na určitou skupinu
instrukcí. Ovšem asi největší změnou bylo to, že se sada pracovních registrů
<strong>R0-R15</strong> rozdělila na spodní polovinu <strong>R0-R7</strong>
(<i>Lo registers</i>) a horní polovinu <strong>R8-R15</strong> (<i>Hi
registers</i>), přičemž většina instrukcí dokáže pracovat pouze s&nbsp;prvními
osmi registry, zatímco některé registry z&nbsp;horní skupiny mají speciální
význam (čítač instrukcí, ukazatel na vrchol zásobníku atd.).</p>

<img src="http://i.iinfo.cz/images/526/arm10.gif" class="image-222283" alt="&#160;" height="427" width="250" />
<p><i>Obrázek 12: Pracovní a řídicí registry: rozdíl mezi RISCovým režimem ARM
a režimem Thumb.</i></p>

<p>Výše zmíněné rozdělení pracovních registrů na dvě poloviny o různých
významech je patrné i na těch instrukcích, pomocí nichž se realizují
aritmetické a logické operace. Šestnáctibitové instrukční slovo je u těchto
instrukcí rozděleno na čtyři části: šestibitový prefix mající binární hodnotu
<strong>010000</strong>, čtyřbitový kód aritmetické či logické operace,
tříbitový index druhého zdrojového registru <strong>Rs</strong> a taktéž
tříbitový index prvního zdrojového registru <strong>Rd</strong>, který je
současně i registrem cílovým, tj.&nbsp;registrem, do nějž se uloží výsledek
operace (výjimku tvoří instrukce komparace a testu, u nichž se výsledek
porovnání nikam neukládá). Zde je ostatně patrné i další omezení instrukční
sady <i>Thumb</i>, kdy do úzkého instrukčního slova není možné vložit indexy
tří registrů, ale pouze registrů dvou, což potenciálně zvyšuje četnost přesunů
dat mezi registry a navíc se i snižuje účinnost některých optimalizačních
technik prováděných buď přímo programátory v&nbsp;assembleru nebo
překladači:</p>

<pre>
 15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
| 0 | 1 | 0 | 0 | 0 | 0 |    operace    |    Rs     |    Rd     |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
</pre>

<p>Podporováno je celkem šestnáct aritmetických a logických operací (+ operací
bitového posunu a rotace) určených bity 6 až 9 instrukčního slova. Tyto operace
jsou vypsány v&nbsp;tabulce pod tímto odstavcem. Ve třetím sloupci tabulky je
pro ilustraci uvedena ekvivalentní instrukce dostupná v&nbsp;režimu ARM):</p>

<table>
<tr><th>Kód</th><th>Operace</th><th>Ekvivalent ARM</th><th>Význam</th></tr>
<tr><td>0000</td><td>AND Rd, Rs</td><td>ANDS Rd, Rd, Rs</td><td>Rd:= Rd AND Rs</td></tr>
<tr><td>0001</td><td>EOR Rd, Rs</td><td>EORS Rd, Rd, Rs</td><td>Rd:= Rd EOR Rs (EOR=XOR)</td></tr>
<tr><td>0010</td><td>LSL Rd, Rs</td><td>MOVS Rd, Rd, LSL Rs</td><td>Rd := Rd &lt;&lt; Rs (bitový posun)</td></tr>
<tr><td>0011</td><td>LSR Rd, Rs</td><td>MOVS Rd, Rd, LSR Rs</td><td>Rd := Rd &gt;&gt; Rs (bitový posun)</td></tr>
<tr><td>0100</td><td>ASR Rd, Rs</td><td>MOVS Rd, Rd, ASR Rs</td><td>Rd := Rd ASR Rs (aritmetický posun)</td></tr>
<tr><td>0101</td><td>ADC Rd, Rs</td><td>ADCS Rd, Rd, Rs</td><td>Rd := Rd + Rs + C-bit</td></tr>
<tr><td>0110</td><td>SBC Rd, Rs</td><td>SBCS Rd, Rd, Rs</td><td>Rd := Rd - Rs - NOT C-bit</td></tr>
<tr><td>0111</td><td>ROR Rd, Rs</td><td>MOVS Rd, Rd, ROR Rs</td><td>Rd := Rd ROR Rs (rotace)</td></tr>
<tr><td>1000</td><td>TST Rd, Rs</td><td>TST Rd, Rs</td><td>Nastavení příznaků podle operace Rd AND Rs</td></tr>
<tr><td>1001</td><td>NEG Rd, Rs</td><td>RSBS Rd, Rs, #0</td><td>Rd = -Rs</td></tr>
<tr><td>1010</td><td>CMP Rd, Rs</td><td>CMP Rd, Rs</td><td>Nastavení příznaků podle operace Rd - Rs</td></tr>
<tr><td>1011</td><td>CMN Rd, Rs</td><td>CMN Rd, Rs</td><td>Nastavení příznaků podle operace Rd + Rs</td></tr>
<tr><td>1100</td><td>ORR Rd, Rs</td><td>ORRS Rd, Rd, Rs</td><td>Rd := Rd OR Rs</td></tr>
<tr><td>1101</td><td>MUL Rd, Rs</td><td>MULS Rd, Rs, Rd</td><td>Rd := Rs * Rd</td></tr>
<tr><td>1110</td><td>BIC Rd, Rs</td><td>BICS Rd, Rd, Rs</td><td>Rd := Rd AND NOT Rs</td></tr>
<tr><td>1111</td><td>MVN Rd, Rs</td><td>MVNS Rd, Rs</td><td>Rd := NOT Rs</td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Mikrořadiče Cortex-M0+</h2>

<p>Na mikrořadiče <i>Cortex-M0+</i> se můžeme dívat jako na vylepšení původních
jader <i>Cortex-M0</i>. Interně se ovšem jedná o odlišně navržená jádra,
protože <i>Cortex-M0+</i> obsahuje pipeline pouze se dvěma řezy a nikoli
s&nbsp;řezy třemi (vlastně se tak vracíme na samotný začátek platformy ARM). Co
je však pro případné uživatele důležitější &ndash; i díky zmenšenému počtu řezů
pipeline se podařilo dále snížit spotřebu a přitom zachovat obousměrnou
kompatibilitu s&nbsp;původními jádry <i>Cortex-M0</i>. Spotřeba klesá až na
hodnoty 9.8µW na MHz, takže tato jádra mohou nalézt uplatnění i v&nbsp;tak
(prozatím) veskrze zbytečných zařízeních, jako jsou chytré hodinky :-) apod.
Opět je možné si zvolit způsob implementace násobičky (rychlá versus
energeticky nenáročná) a nově i to, zda se má použít jednotka MPU. Čipů
s&nbsp;tímto jádrem existuje celá řada, například je vyrábí firmy Atmel,
Freescale, STMicroelectronics či NXP Semiconductors.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Odkazy na Internetu</h2>

<ol>

<li>MCU market turns to 32-bits and ARM<br />
<a href="http://www.eetimes.com/document.asp?doc_id=1280803">http://www.eetimes.com/document.asp?doc_id=1280803</a>
</li>

<li>Cortex-M0 Processor (ARM Holdings)<br />
<a href="http://www.arm.com/products/processors/cortex-m/cortex-m0.php">http://www.arm.com/products/processors/cortex-m/cortex-m0.php</a>
</li>

<li>Cortex-M0+ Processor (ARM Holdings)<br />
<a href="http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php">http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php</a>
</li>

<li>ARM Processors in a Mixed Signal World<br />
<a href="http://www.eeweb.com/blog/arm/arm-processors-in-a-mixed-signal-world">http://www.eeweb.com/blog/arm/arm-processors-in-a-mixed-signal-world</a>
</li>

<li>ARM Architecture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_architecture">https://en.wikipedia.org/wiki/ARM_architecture</a>
</li>

<li>Cortex-M0 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_Cortex-M0">https://en.wikipedia.org/wiki/ARM_Cortex-M0</a>
</li>

<li>Cortex-M0+ (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M0.2B">https://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M0.2B</a>
</li>

<li>Improving ARM Code Density and Performance<br />
<a href="New Thumb Extensions to the ARM Architecture Richard Phelan">New Thumb Extensions to the ARM Architecture Richard Phelan</a>
</li>

<li>The ARM Processor Architecture<br />
<a href="http://www.arm.com/products/processors/technologies/instruction-set-architectures.php">http://www.arm.com/products/processors/technologies/instruction-set-architectures.php</a>
</li>

<li>Thumb-2 instruction set<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0344c/Beiiegaf.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0344c/Beiiegaf.html</a>
</li>

<li>Introduction to ARM thumb<br />
<a href="http://www.eetimes.com/discussion/other/4024632/Introduction-to-ARM-thumb">http://www.eetimes.com/discussion/other/4024632/Introduction-to-ARM-thumb</a>
</li>

<li>ARM, Thumb, and ThumbEE instruction sets<br />
<a href="http://www.keil.com/support/man/docs/armasm/armasm_CEGBEIJB.htm">http://www.keil.com/support/man/docs/armasm/armasm_CEGBEIJB.htm</a>
</li>

<li>An Introduction to ARM Assembly Language<br />
<a href="http://dev.emcelettronica.com/introduction-to-arm-assembly-language">http://dev.emcelettronica.com/introduction-to-arm-assembly-language</a>
</li>

<li>Processors - ARM<br />
<a href="http://www.arm.com/products/processors/index.php">http://www.arm.com/products/processors/index.php</a>
</li>

<li>The ARM Instruction Set<br />
<a href="http://simplemachines.it/doc/arm_inst.pdf">http://simplemachines.it/doc/arm_inst.pdf</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

