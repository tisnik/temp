<p>Ústředním prvkem všech dnes nabízených modelů jednodeskových mikropočítačů Raspberry Pi je čip s&nbsp;mikroprocesorem s&nbsp;architekturou ARM. Méně výkonné mikropočítače Raspberry Pi jsou založeny na 32bitové variantě ARMu, výkonnější modely pak na variantě 64bitové, která je pro odlišení od původních čipů přejmenována na AArch64. V&nbsp;současnosti se můžeme s&nbsp;integrovanými obvody obsahujícími některé jádro mikroprocesoru s&nbsp;architekturou ARM setkat v&nbsp;celé řadě různých elektronických zařízení, počínaje (možná poněkud nadneseně řečeno) ovladačem výtahu přes různě výkonné smartphony, tablety, kapesní herní konzole (Nintendo DS a 3DS), netbooky až po, což je možná na první pohled poněkud překvapivé, různé typy serverů určených zejména pro nasazení do dnes populárních <i>cloudů</i> (zde se prosazuje především výkonnější 64bitová varianta).</p>

<p>U všech těchto zařízení se ukazuje být velkou předností poměrně malá energetická náročnost mikroprocesorů ARM a taktéž to, že větší a bohatší firmy si mohou zakoupit licenci na použití jádra mikroprocesorů ARM ve svých integrovaných obvodech, kde lze (přímo na čipu) zkombinovat mikroprocesor s&nbsp;dalšími moduly, například s&nbsp;GPU či digitálním signálovým procesorem (DSP). A přesně tímto způsobem, konkrétně kombinací mikroprocesoru a programovatelného GPU, vznikly i čipy používané v&nbsp;mikropočítačích Raspberry Pi.</p>

<h2>Původní mikroprocesory ARM 1</h2>

<p>Původní mikroprocesory pojmenované <i>ARM 1</i> byly založeny na pipeline se třemi řezy rozdělujícími vykonání každé instrukce do tří fází: <i>fetch</i> (načtení operačního kódu), <i>decode</i> (dekódování a příprava operandů) a <i>execute</i> (vykonání instrukce a zpětný zápis výsledků do pracovních registrů či do paměti). Interní i externí datové sběrnice měly šířku 32 bitů a i všechny instrukce v&nbsp;instrukční sadě <i>ARM 1</i> měly tutéž šířku 32 bitů. Díky tomu se zjednodušila řídicí logika v&nbsp;čipu, navíc bylo možné díky pevné délce instrukcí modifikovat obsah čítače instrukcí <i>PC (r15)</i> již ve chvíli, kdy se vykonávala fáze <i>decode</i> (výjimku samozřejmě tvořily podmíněné i nepodmíněné skoky).</p>

<p>Vzhledem k&nbsp;tomu, že procesory s&nbsp;architekturou <i>RISC</i>, mezi něž ARMy taktéž patří, používají při přístupu do operační paměti pouze instrukce typu <i>Load</i> a <i>Store</i>, musí být tyto čipy vybaveny poměrně velkým počtem pracovních registrů. V&nbsp;případě <i>ARM 1</i> bylo na čipu umístěno celkem 37 registrů, z&nbsp;nichž každý měl pevnou šířku 32 bitů. Některé registry byly pracovní, jiné měly speciální význam, například v&nbsp;nich byly uloženy různé bitové příznaky. Zajímavé je, že namísto takzvaných registrových oken použitých u jiných procesorů typu <i>RISC</i> se v&nbsp;případě <i>ARM 1</i> objevuje rozdělení registrů do skupin, podle toho, v&nbsp;jakém stavu se mikroprocesor v&nbsp;daném okamžiku nacházel.</p>

<p>První testovací várka mikroprocesorů <i>ARM 1</i> byla dokončena 26.4.1985.  Traduje se, že hned první série těchto čipů fungovala bez chyby, a to dokonce bez nutnosti průběžného testování při výrobě. Vzhledem k&nbsp;tomu, že se jednalo o čipy určené pouze pro demonstrační účely, nesetkáme se s&nbsp;nimi v&nbsp;žádných historických počítačích. Ovšem společnosti <i>Acorn</i> výpočetní výkon i další vlastnosti čipu <i>ARM 1</i> ukázaly, že se jedná o správnou cestu vývoje, takže již v&nbsp;roce 1986 spatřil světlo světa mikroprocesor <i>ARM 2</i>. Ten se od svého předchůdce lišil především přidáním hardwarové násobičky, která byla, jak je ostatně u procesorů s&nbsp;architekturou <i>RISC</i> zvykem, oddělena od vlastní aritmeticko-logické jednotky a pracovala nezávisle a paralelně s&nbsp;ALU.</p>

<h3>Instrukční sady mikroprocesorů ARM</h3>

<p>Mikroprocesory <i>ARM</i> byly zpočátku vybaveny jedinou instrukční sadou, v&nbsp;níž se nacházely instrukce o konstantní šířce 32 bitů. Postupně však byly navrženy a implementovány i další instrukční sady, které bylo u mnoha čipů možné použít společně s&nbsp;původní 32bitovou instrukční sadou. Jedná se o rozšíření <i>Thumb</i> následované vylepšenou variantou nazvanou <i>Thumb-2</i>. Dále nesmíme zapomenout na 64bitovou architekturu ARM, která se nazývá AArch64 a která používá jak novou množinu pracovních registrů, tak i v&nbsp;mnoha ohledech změněnou instrukční sadu. V&nbsp;navazujících kapitolách se tedy seznámíme s&nbsp;těmito sadami/rozšířeními:</p>

<ul>
<li>Původní 32bitová instrukční sada ARM</li>
<li>Rozšíření Thumb</li>
<li>Rozšíření Thumb-2</li>
<li>Nová instrukční sada používaná u mikroprocesorů s&nbsp;architekturou AArch64</li>
</ul>

<h3>Instrukční sada v&nbsp;pracovním režimu ARM</h3>

<p>Původní instrukční sada procesorů ARM používá převážně &bdquo;RISCové&ldquo; instrukce o konstantní šířce 32 bitů. Vzhledem k&nbsp;tomu, že šířka externí datové sběrnice byla rovna taktéž 32 bitům a instrukce musely být zarovnané na celá slova, znamenalo to, že se celá instrukce vždy načetla jedinou operací, což je velký rozdíl oproti typickým mikroprocesorům s&nbsp;architekturou <i>CISC</i>, u nichž je délka instrukcí proměnná a mnohdy může přesahovat hranici slov (což ve svém důsledku vedlo k&nbsp;nutnosti vytvoření takzvané &bdquo;fronty instrukcí&ldquo;, jejíž vlastnosti se mj.&nbsp;využívaly či spíše zneužívaly při tvorbě virů, které nešlo odhalit debuggerem).</p>

<p>Tuto instrukční sadu lze na procesorech <i>ARM</i> používat dodnes (s&nbsp;výjimkou některých čipů Cortex-M) a její největší předností je možnost uvést u <strong>každé</strong> instrukce podmínku, při jejímž splnění se má instrukce provést. Díky tomuto řešení je možné eliminovat velké množství skoků, jejichž provedení je samozřejmě problematické, a to nejenom na architektuře <i>RISC</i>, ale i na procesorech <i>CISC</i>.</p>

<h3>Instrukční sada Thumb</h3>

<p>I přes mnohé přednosti 32bitové instrukční sady <i>ARM</i> se však v&nbsp;některých případech projevují její nevýhody. Jedná se především o to, že použití 32bitových instrukcí může zmenšovat &bdquo;hustotu&ldquo; kódu, což se projevuje větší délkou binárních souborů, větší pravděpodobností výpadku stránky z&nbsp;vyrovnávací paměti a taktéž (obecně) vyšší cenou za zařízení v&nbsp;případě, že je mikroprocesor použit ve funkci mikrořadiče (zde se již může projevit cena za každý ušetřený kilobajt paměti ROM/EPROM/Flash s&nbsp;programovým kódem).</p>

<p>Z&nbsp;tohoto důvodu jsou procesory <i>ARM</i> patřící do novějších rodin vybaveny navíc další instrukční sadou pojmenovanou <i>Thumb</i>. Jedná se o instrukční sadu obsahující podmnožinu instrukcí vybranou na základě analýzy strojových programů generovaných překladači jazyků C a C++. Dále se v&nbsp;této instrukční sadě neobjevují bity určené pro podmíněné provádění instrukcí, což znamená, že je nutné se vrátit k&nbsp;použití podmíněných skoků. Na druhou stranu se však délka <i>všech</i> instrukcí zkrátila na šestnáct bitů, což dovoluje dosažení větší &bdquo;hustoty&ldquo; kódu.</p>


<p>Zavedení nové instrukční sady není v&nbsp;tomto případě tak složité, jak by se možná mohlo zdát, protože převod instrukce <i>Thumb</i> na původní instrukci <i>ARM</i> je záležitostí jednoduchého dekodéru, který může být například umístěn v&nbsp;interní paměti ROM či přímo &bdquo;zadrátován&ldquo; na čipu. Jedná se tedy o řádově jednodušší technologii, než jaká je použita na procesorech <i>x86</i> pro překlad <i>CISC</i> instrukcí do sekvence interních RISC-like instrukcí (zde se může jediná instrukce CISC rozložit na sekvenci několika instrukcí RISC, popř.&nbsp;dokonce na celý podprogram). A ta nejlepší zpráva na konec &ndash; s&nbsp;využitím speciální instrukce skoku je možné se přepínat mezi instrukční sadou <i>Thumb</i> a původní instrukční sadou <i>ARM</i>, a to dokonce i v&nbsp;rámci jednotlivých funkcí. Programátor či překladač tedy může využívat předností obou instrukčních sad.</p>

<h2>Instrukční sada Thumb-2</h2>

<p>Třetí instrukční sada, kterou nalezneme u mnoha mikroprocesorů ARM, se jmenuje <i>Thumb-2</i>. Tato instrukční sada se v&nbsp;sobě snaží sdružit jak přednosti původní 32bitové &bdquo;RISCové&ldquo; instrukční sady <i>ARM</i>, tak i přednosti šestnáctibitové instrukční sady <i>Thumb</i>. Sada <i>Thumb-2</i> díky tomu na jedné straně dosahuje jak velké hustoty kódu (<i>code density</i>), tak i velkého výpočetního výkonu. Zmíněný výpočetní výkon dosahovaný v&nbsp;reálných aplikacích totiž byl u sady <i>Thumb</i> v&nbsp;některých případech menší, protože mnohé operace musely být provedeny pomocí většího množství instrukcí &ndash; instrukce <i>Thumb</i> totiž vždy vykonávaly jen jednu operaci, na rozdíl od instrukcí <i>ARM</i>, které obsahovaly jak podmínkové bity, tak i v&nbsp;mnoha případech &bdquo;podoperaci&ldquo; pro bitový posun či rotaci jednoho z&nbsp;operandů vstupujícího do aritmeticko-logické jednotky.</p>

<p>Poznámka: na tomto místě je možná vhodné poznamenat, že i instrukční sada <i>Thumb-2</i> odpovídá základnímu charakteru RISCových mikroprocesorů, na nichž je implementována, tj.&nbsp;stále se jedná o instrukční sadu s&nbsp;operacemi prováděnými především nad sadou pracovních registrů, pouze s&nbsp;omezenou možností přístupu do paměti přes instrukce typu Load &amp; Store a s&nbsp;jednoduchými adresovacími režimy.</p>

<p>Sami konstruktéři mikroprocesorů <i>ARM</i> se vyjádřili k&nbsp;tomu, z&nbsp;jakého důvodu vlastně instrukční sada <i>Thumb-2</i> vznikla. Při jejím návrhu měli na mysli čtyři parametry, které se navzájem ovlivňují a vylepšení jednoho z&nbsp;parametrů většinou v&nbsp;důsledku vede ke zhoršení zbývajících třech parametrů. Jedná se o následující parametry:</p>

<ol>

<li>Cenu vlastního procesoru, která je kromě jiných okolností ovlivněna i jeho složitostí (existence branch prediktorů, spekulativního provádění instrukcí, ...), počtem aritmeticko-logických jednotek (obecně zda jde o skalární či superskalární procesor), velikostí potřebných vyrovnávacích pamětí atd.</li>

<li>Dosahovaný výpočetní výkon v&nbsp;<strong>reálných</strong> aplikacích.  V&nbsp;praxi to znamená, že hodnota udávaná v&nbsp;jednotkách MIPS nebo MFLOPS nemusí být vždy směrodatná: je to právě příklad jednodušších instrukcí <i>Thumb</i> v&nbsp;porovnání s&nbsp;obecně výkonnějšími instrukcemi <i>ARM</i>.</li>

<li>Nutný energetický příkon procesoru (závisí na technologii výroby, napájecím napětí, hodinové frekvenci, počtu ALU, velikosti vyrovnávacích paměti atd.).</li>

<li>Cenu za vývoj a optimalizaci aplikací (tu ovlivňuje složitost instrukční sady, nedostatky v&nbsp;instrukční sadě: například nutnost provádění neefektivních skoků, složitost při načítání konstant do pracovních registrů atd.).</li>

</ol>

<h2>Sady ARM vs. Thumb vs. Thumb-2</h2>

<p>Důvodů pro vznik nové instrukční sady tedy bylo více než dost, takže se podívejme na to, co se jejím tvůrcům podařilo splnit a co nikoli.  V&nbsp;následujícím textu budou uvedeny výsledky měření prezentované samotnou společností <i>ARM</i>. V&nbsp;první tabulce je porovnána &bdquo;hustota&ldquo; binárního strojového kódu měřená jeho délkou. Ve všech případech se jednalo o stejný algoritmus, který byl poprvé implementován s&nbsp;využitím instrukční sady <i>ARM</i>, podruhé s&nbsp;pomocí sady <i>Thumb</i> a potřetí byla použita instrukční sada <i>Thumb-2</i>. Za základ je přitom brána délka původního kódu používajícího instrukce <i>ARM</i> (tento kód odpovídá sto procentům, čím menší číslo, tím menší je i výsledný binární program):</p>

<table>
<tr><th>Instrukční sada</th><th>Délka kódu</th></tr>
<tr><td>ARM    </td><td>100%</td></tr>
<tr><td>Thumb  </td><td> 70%</td></tr>
<tr><td>Thumb-2</td><td> 74%</td></tr>
</table>

<p>Ve druhé tabulce je uveden relativní výpočetní výkon přeloženého binárního programu, přičemž 100% odpovídá nejrychlejší implementaci a 75% implementaci nejpomalejší:</p>

<table>
<tr><th>Instrukční sada</th><th>Relativní výpočetní výkon</th></tr>
<tr><td>ARM    </td><td>100%</td></tr>
<tr><td>Thumb  </td><td> 75%</td></tr>
<tr><td>Thumb-2</td><td> 98%</td></tr>
</table>

<p>Z&nbsp;výsledků, které jsou prezentovány v&nbsp;předešlých dvou tabulkách tedy vyplývá, že pro testovanou aplikaci se díky použití instrukční sady <i>Thumb-2</i> podařilo zmenšit velikost kódu na tři čtvrtiny původní velikosti a přitom výpočetní výkon poklesl pouze o zhruba 2% (zde se samozřejmě projevila i nižší pravděpodobnost výpadku instrukční cache, která ovšem byla nižší i u implementace využívající instrukce <i>Thumb</i>).</p>

<p>Poznámka: jako u všech podobných měření je samozřejmě nutné mít na paměti, že se jedná pouze o (reprezentativní) vzorek, který může ale taktéž nemusí odpovídat jinému typu algoritmu. Vždy záleží jen na konkrétní aplikaci, konkrétním vývojáři, jeho rozpočtu a času, zda si podobné měření udělá i v&nbsp;případě jím vyvíjené aplikace, nebo zda se spolehne na cizí statistiku (to ovšem platí i pro výběr procesoru: opět záleží na mnoha okolnostech, včetně dosavadních zkušeností vývojáře, ceně za vývojové nástroje atd.).</p>

<h2>Architektura AArch64 a její instrukční sada</h2>

<p></p>

