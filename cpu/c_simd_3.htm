<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. SIMD operace a mikroprocesory s&nbsp;RISCovou architekturou</a></p>
<p><a href="#k02">*** 2. Od technologie VFP k&nbsp;Advanced SIMD (NEON)</a></p>
<p><a href="#k03">*** 3. Registry používané instrukcemi NEON</a></p>
<p><a href="#k04">*** 4. Použitá terminologie: vector, lane, element</a></p>
<p><a href="#k05">*** 5. Podporované formáty prvků vektorů</a></p>
<p><a href="#k06">*** 6. Instrukce určené pro zpracování skalárních dat</a></p>
<p><a href="#k07">7. Formát instrukcí NEON, prefixy a suffixy u instrukcí</a></p>
<p><a href="#k08">*** 8. Konverze operandů (rozšíření, zmenšení), operace se saturací</a></p>
<p><a href="#k09">*** 9. Příklad různých variant instrukce ADD</a></p>
<p><a href="#k10">10. Typy podporovaných vektorových instrukcí, aritmetické a logické instrukce</a></p>
<p><a href="#k11">11. Instrukce určené pro provedení jednoho kroku delší operace</a></p>
<p><a href="#k12">*** 12. Podpora v&nbsp;GCC pro základní vektorové operace</a></p>
<p><a href="#k13">*** 13. Překlad do strojového kódu se zákazem SIMD instrukcí</a></p>
<p><a href="#k14">*** 14. Překlad do strojového kódu s&nbsp;povolením SIMD instrukcí</a></p>
<p><a href="#k15">*** 15. Základní vektorové operace s&nbsp;prvky vektorů typu <strong>float</strong> a <strong>double</strong></a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. SIMD operace a mikroprocesory s&nbsp;RISCovou architekturou</h2>

<p>Prakticky každá významnější společnost (v&nbsp;případě mikroprocesorů řady
PowerPC se pak dokonce jednalo o alianci několika společností) navrhující
mikroprocesory s&nbsp;architekturou <i>RISC</i> přišla dříve či později na trh
s&nbsp;instrukční sadou obsahující &bdquo;vektorové&ldquo; instrukce, které
jsou dnes souhrnně označovány zkratkou <i>SIMD</i> (původní vektorové instrukce
používané na superpočítačích jsou v&nbsp;některých ohledech flexibilnější,
proto budeme používat spíše poněkud přesnější zkratku <i>SIMD</i> znamenající
&bdquo;single instruction &ndash; multiple data&ldquo;, viz též například <a
href="https://www.root.cz/clanky/uzitecne-rozsireni-gcc-podpora-simd-vektorovych-instrukci/">úvodní
článek</a>). Rozšiřující instrukční sady byly pojmenovávány nejrůznějšími názvy
a zkratkami a nikdy vlastně nedošlo &ndash; částečně na rozdíl od platformy
<i>x86</i> &ndash; ke sjednocení těchto instrukcí do jediné skupiny &bdquo;SIMD
pro RISC&ldquo;, což je vlastně logické, protože procesory <i>RISC</i> jsou
mnohdy určeny pro specializované oblasti použití, od vestavných (embedded)
systémů přes smartphony a tablety až po superpočítače.</p>

<p>Nejvýznamnější implementace rozšiřujících instrukcí typu <i>SIMD</i> na
mikroprocesorech s&nbsp;architekturou <i>RISC</i>, ať již se jedná o instrukce
určené pro operace s&nbsp;celými čísly či s&nbsp;čísly reálnými (přesněji
řečeno s&nbsp;plovoucí řádovou čárkou), jsou pro větší přehlednost vypsány
v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Zkratka/název</th><th>Plný název</th><th>Rodina procesorů</th></tr>
<tr><td>1</td><td>MAX-1</td><td>Multimedia Acceleration eXtensions v1</td><td>HP-PA RISC</td></tr>
<tr><td>2</td><td>MAX-2</td><td>Multimedia Acceleration eXtensions v2</td><td>HP-PA RISC</td></tr>
<tr><td>3</td><td>VIS 1</td><td>Visual Instruction v1</td><td>Set SPARC V9</td></tr>
<tr><td>4</td><td>VIS 2</td><td>Visual Instruction v2</td><td>Set SPARC V9</td></tr>
<tr><td>5</td><td>AltiVec</td><td>(obchodní názvy Velocity Engine, VMX)</td><td>PowerPC</td></tr>
<tr><td>6</td><td>MDMX</td><td>MIPS Digital Media eXtension (MaDMaX)</td><td>MIPS</td></tr>
<tr><td>7</td><td>MIPS-3D</td><td>MIPS-3D</td><td>MIPS</td></tr>
<tr><td>8</td><td>MVI</td><td>Motion Video Instructions</td><td>DEC Alpha</td></tr>
<tr><td>9</td><td>NEON</td><td>Advanced SIMD</td><td>Cortex (ARMv7, ARMv8)</td></tr>
<tr><td>10</td><td>Packed SIMD</td><td>Packed SIMD</td><td>RISC-V</td></tr>
<tr><td>11</td><td>Vector Set</td><td>Vector Set</td><td>RISC-V</td></tr>
<tr><td>12</td><td>Scalable Vector Extension (SVE)</td><td>ARMv8.2-A a novější</td></tr>
</table>

<p>V&nbsp;dnešním článku nás bude zajímat především technologie nazvaná
<i>NEON</i> resp.&nbsp;celým názvem <i>Advanced SIMD</i>. Ta je určena pro
mikroprocesory (a mikrořadiče) z&nbsp;rodiny ARM s&nbsp;32bitovými i 64bitovými
jádry a typicky tuto technologii nalezneme v&nbsp;jádrech ARM Cortex-A.
Existuje několik variant implementace NEONu:</p>

<table>
<tr><th>Jádro</th><th>Povinné?</th><th>Šířka vektorů</th></tr>
<tr><td>ARM Cortex-A5 </td><td>ne </td><td>64 bitů </td></tr>
<tr><td>ARM Cortex-A7 </td><td>ano</td><td>64 bitů </td></tr>
<tr><td>ARM Cortex-A8 </td><td>ano</td><td>64 bitů </td></tr>
<tr><td>ARM Cortex-A9 </td><td>ne </td><td>64 bitů </td></tr>
<tr><td>ARM Cortex-A12</td><td>ano</td><td>128 bitů</td></tr>
<tr><td>ARM Cortex-A15</td><td>ano</td><td>128 bitů</td></tr>
<tr><td>ARM Cortex-A17</td><td>ano</td><td>128 bitů</td></tr>
<tr><td>ARM Cortex-A53</td><td>ano</td><td>128 bitů</td></tr>
<tr><td>ARM Cortex-A57</td><td>ano</td><td>128 bitů</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: v&nbsp;předchozí tabulce znamená sloupec
&bdquo;Šířka vektorů&ldquo; bitovou šířku &bdquo;vektorové ALU&ldquo;, tedy
vlastně, kolik bitů je možné zpracovat v&nbsp;rámci jednoho taktu. Pokud se
mají zpracovávat vektory o šířce 128 bitů (což je na úrovni strojového kódu
umožněno), je u starších jader takový vektor ve skutečnosti zpracován ve dvou
taktech, vždy po 64 bitech, což znamená, že teoretické urychlení není tak
velké, jak by se mohlo při čtení dalšího textu zdát.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Od technologie VFP k&nbsp;Advanced SIMD (NEON)</h2>

<p>Pokud se podíváme na historii mikroprocesorů ARM, zjistíme, že cesta k&nbsp;technologii NEON na jádrech AArch64 vlastně nebyla vůbec přímočará.  První implementace &bdquo;vektorových&ldquo; operací pro procesory ARM používaly rozhraní pro koprocesory, takže se vlastně používala paralelní/doplňková instrukční sada. Konkrétně se jednalo o technologii nazvanou <i>VFP</i> neboli <i>Vector Floating Point</i>. Touto technologií, která je stále na některých ARMovských jádrech podporována, jsme se již v&nbsp;seriálu o architekturách počítačů <a href="https://www.root.cz/clanky/mikroprocesory-arm-a-architektura-vfp-vector-floating-point/">zabývali</a>.  Na tomto místě je vhodné zdůraznit, že i přesto, že se v&nbsp;názvu VFP používá termín &bdquo;vector&ldquo;, nejednalo se o implementaci skutečných SIMD operací, protože se prvky vektorů zpracovávaly postupně, tedy sekvenčně (stále se však jednalo o vylepšení, protože se ušetřilo načtení instrukce a její dekódování). Z&nbsp;tohoto důvodu byl &bdquo;vektorový režim&ldquo; VFP poměrně rychle nahrazen novou technologií nazvanou NEON označovanou též Advanced SIMD.  Dnes se s&nbsp;VFP můžeme na některých ARMovských jádrech setkat, další jádra pak podporují jen <i>VFPLite</i>, kde však každá operace trvá zhruba deset strojových cyklů!</p>

<p>Technologie NEON již podporovala plnohodnotné SIMD operace, při použití vektorů s&nbsp;nejmenšími prvky o velikosti jednoho bajtu až šestnáct operací (například součtu) paralelně. Díky tomu bylo možné implementovat například dekodér pro známý formát MP3 na mikroprocesoru s&nbsp;taktem pouhých 10 MHz popř.&nbsp;implementovat <a href="https://cs.wikipedia.org/wiki/AMR_%28kodek%29">AMR kodek</a> na podobném čipu, ovšem s&nbsp;hodinovým taktem 13 MHz. Při použití klasických výpočtů se skalárními hodnotami by bylo nutné použít čip s&nbsp;vyšší hodinovou frekvencí či naopak &ndash; tento výkonný čip by již neměl dostatek výkonu pro provádění dalších činností. Pro ukázku: ještě mikroprocesory 486DX2 s&nbsp;hodinovou frekvencí 66 MHz měly s&nbsp;dekódováním MP3 velké problémy a zvládaly jen menší bitrate a monofonní výstup). Právě díky NEONu se začaly čipy ARM používat i v&nbsp;některých oblastech, které byly dříve vyhrazeny digitálním signálovým procesorům.</p>

<p>Mimo VFP a NEON bylo pro některá (dnes již notně stará) jádra ARM vyvinuto rozšíření pro <i>DSP</i> operace. Konkrétně se jednalo o jádra <i>ARMv5TE</i>.  Nové instrukce byly využitelné například při kódování a dekódování videa, při zpracování zvukového signálu (včetně zvukové syntézy), práci s&nbsp;rastrovými obrazy (<i>image processing</i>) atd. Instrukce typu <i>Load &amp; Store</i> mohly pracovat s&nbsp;registrovými páry, zavedeny byly nové adresovací režimy, aritmetika se saturací (tj.&nbsp;bez přetečení) a taktéž instrukce typu &bdquo;multiply and accumulate (<strong>MAC</strong>)&ldquo; 16&times;16 bitů a 32&times;16 bitů, které mohly být v&nbsp;instrukční pipeline vykonány v&nbsp;rozmezí jednoho taktu (v&nbsp;jejich průběhu se tedy mohly začít zpracovávat další instrukce). Uvádí se, že při zpracování signálů byla výkonnost nových instrukcí v&nbsp;jádrech <i>ARMv5TE</i> dvakrát až třikrát vyšší, než při použití &bdquo;běžných&ldquo; jader <i>ARMv5</i> (samozřejmě za předpokladu ruční optimalizace kódu, což ostatně až na některé výjimky platí dodnes, protože <i>intrinsic</i> nejsou samospasitelné).</p>

<p>Další odbočkou byla technologie <i>SIMD extensions for multimedia</i> pro jádra ARMv6, která byla později nahrazena Advanced SIMD (NEONem).</p>

<p><div class="rs-tip-major">Poznámka: skutečná míra paralelnosti SIMD operací se na různých ARM jádrech lišila. Například na Cortex-A8 se sice stále daly provádět operace se 128bitovými registry obsahujícími prvky vektorů (viz navazující kapitoly), ovšem ve skutečnosti se v&nbsp;daný okamžik zpracovávalo jen 64 bitů, tj.&nbsp;každá operace se musela provádět dvakrát. Naproti tomu na Cortex-15 se již zpracovávaly celé 128bitové registry.</div></p>

<p>Podle specifikace by všechny standardní implementace jader ARMv8 (s&nbsp;instrukční sadou AArch64) měly technologii NEON podporovat, stejně jako operace s&nbsp;FP hodnotami (jinými slovy &ndash; už není nutné řešit například problém &bdquo;hardfp versus softfp&ldquo;). Ovšem v&nbsp;budoucnosti se pravděpodobně setkáme i se specializovanými jádry nakonfigurovanými odlišným způsobem, například:</p>

<ul>
<li>NEON nebude vůbec podporován.</li>
<li>FP operace nebudou vůbec podporovány.</li>
<li>NEON+FP budou podporovány, ale bez zpracování výjimek u FP operací.</li>
</ul>

<p>Pro ARMv7 (stále velmi často používaný) mohou nastat všechny možné kombinace jednotek NEON a VFP (existencí jednotky je myšlen fakt, že je na ploše mikroprocesoru implementována):</p>

<ol>
<li>Bez jednotky NEON, bez jednotky VFP</li>
<li>S&nbsp;jednotkou NEON, ale bez jednotky VFP</li>
<li>Bez jednotky NEON, ale s&nbsp;jednotkou VFP</li>
<li>S&nbsp;jednotkou NEON i s&nbsp;jednotkou VFP</li>
</ol>

<p>Zajímavá je situace ve chvíli, kdy existuje jednotka NEON, ale nikoli jednotka VFP. V&nbsp;takovém případě není možné využívat operace s&nbsp;plovoucí řádovou čárkou.</p>

<p><div class="rs-tip-major">Poznámka: VFP sice taktéž podporuje vektorové operace, ale nikoli v&nbsp;takové efektivitě jako NEON. Proto se VFP dnes používá pro skalární FP operace a někdy se označuje jménem <i>Floating Point Unit</i> neboli zkráceně <i>FPU</i>.</div></p>

<p>Pro úplnost si ještě uveďme stručné porovnání technologie NEON s&nbsp;technologiemi SSE a Altivec (zmíněných v&nbsp;úvodní kapitole):</p>

<table>
<tr><th>Vlastnost</th><th>NEON</th><th>SSE</th><th>Altivec</th></tr>
<tr><td>Registry</td><td>32&times;64 bitů</td><td>8&times;128 bitů (+8 v&nbsp;x86-64)</td><td>32&times;128 bitů</td></tr>
<tr><td>Typ operací</td><td>3 operandy (registry)</td><td>registry/paměť</td><td>3 nebo 4 operandy (registry)</td></tr>
<tr><td>Load/store pro pixely atd.</td><td>2,3 nebo 4 prvky</td><td>&times;</td><td>&times;</td></tr>
<tr><td>Přenosy mezi skalárními a vektorovými registry</td><td>ano</td><td>ano</td><td>ne</td></tr>
<tr><td>Podpora float/double</td><td>32bitový float(single)</td><td>single i double</td><td>single</td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Registry používané instrukcemi NEON</h2>

<p>Původní technologie NEON, která byla implementovaná na 32bitových jádrech ARM, používala sadu třiceti dvou nových pracovních registrů, přičemž každý registr měl šířku 64 bitů. Tato sada byla oddělena od klasických celočíselných pracovních registrů, což samozřejmě zvýšilo možnosti překladače při optimalizacích kódu. Nové registry byly pojmenovány <strong>D0</strong> až <strong>D31</strong> (<strong>D</strong> = double), popř.&nbsp;mohly být vždy dva sousední registry spojeny do jednoho 128bitového registru (ty byly pojmenovány <strong>Q0</strong> až <strong>Q15</strong>, <strong>Q</strong> = quad). Pokud jádro kromě NEONu podporovalo i výše zmíněnou VFP (konkrétně VFPv3 nebo VFPv4), byly registry <strong>D0</strong> až <strong>D31</strong> sdíleny mezi oběma jednotkami.</p>

<p>U jader ARMv8-A s&nbsp;instrukční sadou AArch64 (tedy poněkud nepřesně &bdquo;u 64bitových ARMů&ldquo;) došlo v&nbsp;této oblasti k&nbsp;vylepšení, protože programátoři nově mají k&nbsp;dispozici 32 pracovních registrů, ovšem nyní se jedná o plnohodnotné 128bitové registry. Tyto registry jsou současně používány i při běžných matematických operacích s&nbsp;hodnotami uloženými v&nbsp;systému plovoucí řádové čárky a taktéž kryptografickým modulem. Došlo ještě k&nbsp;další změně &ndash; již nedochází k&nbsp;rozdělení jednoho registru pro typ <i>double</i> do dvou registrů pro hodnotu typu <i>single/float</i>, jako tomu bylo u <a href="https://www.root.cz/clanky/mikroprocesory-arm-a-architektura-vfp-vector-floating-point/#k02">VFP</a>.  Nově je možné každý registr použít jako 128bitový vektor, pro uložení hodnoty <i>double</i> (spodních 64 bitů), uložení hodnoty typu <i>single/float</i> (spodních 32 bitů) popř.&nbsp;pro uložení hodnoty typu <i>half float</i> (spodních 16 bitů). Horní bity jsou při čtení ignorovány, při zápisu nulovány:</p>

<table>
<tr><th>Jméno</th><th>Význam</th></tr>
<tr><td>v0..v31</td><td>128bitové registry</td></tr>
<tr><td>d0..d31</td><td>spodních 64 bitů registrů v0..v31, použito pro hodnoty typu <i>double</i></td></tr>
<tr><td>s0..s31</td><td>spodních 32 bitů registrů v0..v31, použito pro hodnoty typu <i>single/float</i></td></tr>
<tr><td>h0..h31</td><td>spodních 16 bitů registrů v0..v31, použito pro hodnoty typu <i>half float</i></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: datový typ <i>half float</i> o šířce pouhých šestnácti bitů je podporován jen několika instrukcemi. Nejedná se totiž o formát určený primárně pro zpracování hodnot, ale pouze o formát pro načtení či naopak uložení výsledků. S&nbsp;tímto formátem se můžeme setkat u grafických akcelerátorů či v&nbsp;OpenCL. Zde má použití <i>half float</i> svůj význam, protože u některých algoritmů se úzkým hrdlem výpočtu stává přenosová rychlost sběrnice, rychlost přístupu do operační paměti či výpadky cache (a u pole prvků typu <i>half float</i> bude výpadků méně, než u prvků typu <i>single/float</i> či dokonce <i>double</i>).</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Použitá terminologie: vector, lane, element</h2>

<p>U technologie NEON se používá následující terminologie:</p>

<ol>

<li><i>Vector</i> vždy značí 64bitovou či 128bitovou část pracovního registru <strong>Vn</strong>, která je rozdělena na prvky.</li>

<li><i>Element</i> je prvek vektoru.</li>

<li><i>Lane</i> označuje index prvku vektoru. U mnoha operací se kombinují prvky z&nbsp;různých vektorů, které mají shodný index.</li>

</ol>

<p>Indexy jednotlivých <i>lanes</i> se zvyšují směrem od nejnižšího bitu k&nbsp;bitu nejvyššímu. Pro pracovní registry <strong>V0</strong> až <strong>V31</strong> a použitý typ prvků mohou indexy nabývat těchto hodnot:</p>

<table>
<tr><th>Vektor</th><th>Indexy jednotlivých lanes</th></tr>
<tr><td>128bitový registr</td><td>&times;</td></tr>
<tr><td>2&times;64 bitů</td><td>1, 0</td></tr>
<tr><td>4&times;32 bitů</td><td>3, 2, 1, 0</td></tr>
<tr><td>8&times;16 bitů</td><td>7, 6, ..0</td></tr>
<tr><td>16&times;8 bitů</td><td>15..0</td></tr>
</table>

<p>Víme již, že je možné namísto 128bitových vektorů používat i vektory 64bitové, tj.&nbsp;registrové aliasy <strong>D0</strong> až <strong>D31</strong>. Zde samozřejmě bude k&nbsp;dispozici jen polovina indexů:</p>

<table>
<tr><th>Vektor</th><th>Indexy jednotlivých lanes</th></tr>
<tr><td>64bitový registr</td><td>&times;</td></tr>
<tr><td>1&times;64 bitů</td><td>0</td></tr>
<tr><td>2&times;32 bitů</td><td>1, 0</td></tr>
<tr><td>4&times;16 bitů</td><td>3, 2, 1, 0</td></tr>
<tr><td>8&times;8 bitů</td><td>7, 6, ..0</td></tr>
</table>



<p><a name="k05"></a></p>
<h2 id="k05">5. Podporované formáty prvků vektorů</h2>

<p>Instrukce NEON na 64bitových mikroprocesorech AArch64 podporují vektory s&nbsp;elementy (prvky) těchto typů:</p>

<table>
<tr><th>Typ</th><th>Šířka</th><th>Poznámka</th></tr>
<tr><td>float</td><td>32 bitů</td><td>hodnota s&nbsp;plovoucí řádovou čárkou, jednoduchá přesnost</td></tr>
<tr><td>double</td><td>64 bitů</td><td>hodnota s&nbsp;plovoucí řádovou čárkou, dvojitá přesnost</td></tr>
<tr><td>half</td><td>32 bitů</td><td>hodnota s&nbsp;plovoucí řádovou čárkou, poloviční přesnost (jen převody)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>int8</td><td>8 bitů</td><td>osmibitové celé číslo se znaménkem, obecné použití</td></tr>
<tr><td>int16</td><td>16 bitů</td><td>16bitové celé číslo se znaménkem, obecné použití</td></tr>
<tr><td>int32</td><td>32 bitů</td><td>32bitové celé číslo se znaménkem, obecné použití</td></tr>
<tr><td>int64</td><td>64 bitů</td><td>64bitové celé číslo se znaménkem, obecné použití</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>uint8</td><td>8 bitů</td><td>osmibitové celé číslo bez znaménka, typicky barvová složka pixelu</td></tr>
<tr><td>uint16</td><td>16 bitů</td><td>16bitové celé číslo bez znaménka, typicky zvukový vzorek</td></tr>
<tr><td>uint32</td><td>32 bitů</td><td>32bitové celé číslo bez znaménka, obecné použití</td></tr>
<tr><td>uint64</td><td>64 bitů</td><td>64bitové celé číslo bez znaménka, obecné použití</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>polynomial</td><td>8 bitů</td><td>používán pro výpočty korekcí chyb atd.</td></tr>
<tr><td>polynomial</td><td>16 bitů</td><td>používán pro výpočty korekcí chyb atd.</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: některé typy (formáty) jsou dostupné jen pro NEON implementovaný na mikroprocesorech s&nbsp;architekturou AArch64. Týká se to zejména použití vektorů s&nbsp;elementy typu <i>double</i>.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instrukce určené pro zpracování skalárních dat</h2>

<p>I přesto, že je technologie SIMD primárně určena pro provádění operací s&nbsp;prvky vektorů, nabízí NEON i mnoho instrukcí pracujících se skalárními daty. U těchto instrukcí se pracuje buď s&nbsp;celými 128bitovými hodnotami či s&nbsp;hodnotami 64bitovými popř.&nbsp;&bdquo;pouze&ldquo; 32bitovými.  V&nbsp;prvním případě jsou zdrojové a cílové registry pojmenovány <strong>Vn</strong>, v&nbsp;případě druhém pak <strong>Dn</strong> (zde se tedy využije spodních 64 bitů původně 128bitového registru, u 32bitových operací jen spodních 32 bitů). Příkladem může být instrukce <strong>ADD</strong>, která může být prováděna na běžné ALU, kde bude pracovat s&nbsp;registry <strong>Wn</strong> či <strong>Xn</strong>. NEON nabízí stejnou instrukci, ovšem pro použití s&nbsp;registry <strong>Dn</strong>, které obsahují celé číslo (pro FP operace je určena instrukce <strong>FADD</strong>). Některé instrukce pro zpracování skalárních dat jsou vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>Instrukce</th><th>Poznámka</th></tr>
<tr><td>ABS</td><td></td></tr>
<tr><td>ADDP</td><td></td></tr>
<tr><td>CMEQ</td><td></td></tr>
<tr><td>CMEQ</td><td></td></tr>
<tr><td>CMGE</td><td></td></tr>
<tr><td>CMGE</td><td></td></tr>
<tr><td>CMGT</td><td></td></tr>
<tr><td>CMGT</td><td></td></tr>
<tr><td>CMHI</td><td></td></tr>
<tr><td>CMHS</td><td></td></tr>
<tr><td>CMLE</td><td></td></tr>
<tr><td>CMLT</td><td></td></tr>
<tr><td>CMTST</td><td></td></tr>
<tr><td>DUP</td><td></td></tr>
<tr><td>FABD</td><td></td></tr>
<tr><td>FACGE</td><td></td></tr>
<tr><td>FACGT</td><td></td></tr>
<tr><td>FADDP</td><td></td></tr>
<tr><td>FCMEQ</td><td></td></tr>
<tr><td>FCMEQ</td><td></td></tr>
<tr><td>FCMGE</td><td></td></tr>
<tr><td>FCMGE</td><td></td></tr>
<tr><td>FCMGT</td><td></td></tr>
<tr><td>FCMGT</td><td></td></tr>
<tr><td>FCMLE</td><td></td></tr>
<tr><td>FCMLT</td><td></td></tr>
<tr><td>FCVTAS</td><td></td></tr>
<tr><td>FCVTAU</td><td></td></tr>
<tr><td>FCVTMS</td><td></td></tr>
<tr><td>FCVTMU</td><td></td></tr>
<tr><td>FCVTNS</td><td></td></tr>
<tr><td>FCVTNU</td><td></td></tr>
<tr><td>FCVTPS</td><td></td></tr>
<tr><td>FCVTPU</td><td></td></tr>
<tr><td>FCVTXN</td><td></td></tr>
<tr><td>FCVTZS</td><td></td></tr>
<tr><td>FCVTZS</td><td></td></tr>
<tr><td>FCVTZU</td><td></td></tr>
<tr><td>FCVTZU</td><td></td></tr>
<tr><td>FMAXNMP</td><td></td></tr>
<tr><td>FMAXP</td><td></td></tr>
<tr><td>FMINNMP</td><td></td></tr>
<tr><td>FMINP</td><td></td></tr>
<tr><td>FMLA</td><td></td></tr>
<tr><td>FMLS</td><td></td></tr>
<tr><td>FMUL</td><td></td></tr>
<tr><td>FMULX</td><td></td></tr>
<tr><td>FMULX</td><td></td></tr>
<tr><td>FRECPE</td><td></td></tr>
<tr><td>FRECPS</td><td></td></tr>
<tr><td>FRECPX</td><td></td></tr>
<tr><td>FRSQRTE</td><td></td></tr>
<tr><td>FRSQRTS</td><td></td></tr>
<tr><td>MOV</td><td></td></tr>
<tr><td>NEG</td><td></td></tr>
<tr><td>SCVTF</td><td></td></tr>
<tr><td>SCVTF</td><td></td></tr>
<tr><td>SHL</td><td></td></tr>
<tr><td>SLI</td><td></td></tr>
<tr><td>SQABS</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQADD</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQDMLAL</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQDMLAL</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQDMLSL</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQDMLSL</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQDMULH</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQDMULH</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQDMULL</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQDMULL</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQNEG</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQRDMULH</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQRDMULH</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQRSHL</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQRSHRN</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQRSHRUN</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQSHL</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQSHL</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQSHLU</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQSHRN</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQSHRUN</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQSUB</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQXTN</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SQXTUN</td><td>výpočet se saturací, operand je celé číslo se znaménkem</td></tr>
<tr><td>SRI</td><td></td></tr>
<tr><td>SRSHL</td><td></td></tr>
<tr><td>SRSHR</td><td></td></tr>
<tr><td>SRSRA</td><td></td></tr>
<tr><td>SSHL</td><td></td></tr>
<tr><td>SSHR</td><td></td></tr>
<tr><td>SSRA</td><td></td></tr>
<tr><td>SUB</td><td></td></tr>
<tr><td>SUQADD</td><td></td></tr>
<tr><td>UCVTF</td><td></td></tr>
<tr><td>UCVTF</td><td></td></tr>
<tr><td>UQADD</td><td>výpočet se saturací, operand je celé číslo bez znaménka</td></tr>
<tr><td>UQRSHL</td><td>výpočet se saturací, operand je celé číslo bez znaménka</td></tr>
<tr><td>UQRSHRN</td><td>výpočet se saturací, operand je celé číslo bez znaménka</td></tr>
<tr><td>UQSHL</td><td>výpočet se saturací, operand je celé číslo bez znaménka</td></tr>
<tr><td>UQSHL</td><td>výpočet se saturací, operand je celé číslo bez znaménka</td></tr>
<tr><td>UQSHRN</td><td>výpočet se saturací, operand je celé číslo bez znaménka</td></tr>
<tr><td>UQSUB</td><td>výpočet se saturací, operand je celé číslo bez znaménka</td></tr>
<tr><td>UQXTN</td><td>výpočet se saturací, operand je celé číslo bez znaménka</td></tr>
<tr><td>URSHL</td><td></td></tr>
<tr><td>URSHR</td><td></td></tr>
<tr><td>URSRA</td><td></td></tr>
<tr><td>USHL</td><td></td></tr>
<tr><td>USHR</td><td></td></tr>
<tr><td>USQADD</td><td></td></tr>
<tr><td>USRA</td><td></td></tr>
</table>



<p><a name="k07"></a></p>
<h2 id="k07">7. Formát instrukcí NEON, prefixy a suffixy u instrukcí</h2>

<p>Pojmenování instrukcí technologie NEON je u AArch64 v&nbsp;porovnání
s&nbsp;původní 32bitovou architekturou odlišné, s&nbsp;čímž se setkají
především programátoři pracující s&nbsp;assemblerem nebo s&nbsp;debuggerem.
Zejména došlo v&nbsp;první řadě k&nbsp;odstranění prefixového znaku
<strong>V</strong>, protože způsob provádění instrukce je odvozen z&nbsp;typů
operandů. Namísto toho se používají prefixy <strong>S</strong>,
<strong>U</strong>, <strong>F</strong> a <strong>P</strong> s&nbsp;následujícím
významem:</p>

<table>
<tr><th>Prefix</th><th>Význam</th></tr>
<tr><td>S</td><td>signed</td></tr>
<tr><td>U</td><td>unsigned</td></tr>
<tr><td>F</td><td>floating point</td></tr>
<tr><td>P</td><td>polynomial</td></tr>
</table>

<p>Přesná konfigurace vektorů, které se používají jako vstupní a výstupní
operandy instrukcí, je určena suffixem přidaným za jméno příslušného registru,
ať již se jedná o registr zdrojový či cílový. Suffix se od jména registru
odděluje tečkou:</p>

<table>
<tr><th>Suffix</th><th>Význam</th><th>Šířka vektoru</th></tr>
<tr><td>Vn.8B </td><td>8 bitů &times; 8</td><td>64 bitů</td></tr>
<tr><td>Vn.16B</td><td>8 bitů &times; 16</td><td>128 bitů</td></tr>
<tr><td>Vn.4H </td><td>16 bitů či half &times; 4</td><td>64 bitů</td></tr>
<tr><td>Vn.8H </td><td>16 bitů či half &times; 8</td><td>128 bitů</td></tr>
<tr><td>Vn.2S </td><td>32 bitů či single/float &times; 2</td><td>64 bitů</td></tr>
<tr><td>Vn.4S </td><td>32 bitů či single/float &times; 4</td><td>128 bitů</td></tr>
<tr><td>Vn.1D </td><td>64 bitů či double &times; 1</td><td>64 bitů</td></tr>
<tr><td>Vn.2D </td><td>64 bitů či double &times; 2</td><td>128 bitů</td></tr>
</table>

<p>Zde můžeme vidět, že je skutečně nutné použít kombinaci prefixu a suffixu,
aby bylo možné rozlišit například součet vektorů čtyř 32bitových celých čísel
se znaménkem od součtu 32bitových celých čísel bez znaménka či čtyř hodnot typu
single/float &ndash; ve všech případech mají vektory stejný počet prvků a prvky
mají stejnou bitovou šířku, ale prováděná operace může být diametrálně
odlišná.</p>

<p>Podívejme se nyní na praktické příklady &ndash; jak se výše uvedené názvy
registrů používají v&nbsp;assembleru. Následující sekvence čtyř strojových
instrukcí provádí vektorový součet pro vektory obsahující postupně celočíselné
prvky 16&times;8 bitů, 8&times;16 bitů, 4&times;32 bitů a 2&times;64 bitů:</p>

<pre>
  24:   4e208420        add     v0.16b, v1.16b, v0.16b
  48:   4e608420        add     v0.8h, v1.8h, v0.8h
  6c:   4ea08420        add     v0.4s, v1.4s, v0.4s
  90:   4ee08420        add     v0.2d, v1.2d, v0.2d
</pre>

<p><div class="rs-tip-major">Poznámka: zde (jedná se o GNU utils) není
prefixový znak použit, takže se jedná o celočíselné operace.</div></p>

<p>Následuje součet vektorů obsahujících buď čtyři hodnoty typu
<i>float/single</i> nebo dvě hodnoty typu <i>double</i>:</p>

<pre>
  18:   4e20d420        fadd    v0.4s, v1.4s, v0.4s
  48:   4e60d420        fadd    v0.2d, v1.2d, v0.2d
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že operační kódy
<i>všech</i> vektorových instrukcí mají shodnou šířku čtyř bajtů, stejně jako
všechny ostatní &bdquo;skalární&ldquo; instrukce.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Konverze operandů (rozšíření, zmenšení), operace se saturací</h2>

<p>Některé instrukce, typicky základní aritmetické instrukce prováděné nad prvky vektorů, existují v&nbsp;několika variantách:</p>

<ul>

<li>V&nbsp;<i>normální</i> variantě se paralelně provádí operace nad jednotlivými prvky bez dalších úprav či konverzí. U této varianty je typ výsledného vektoru shodný s&nbsp;vektory zdrojovými.</li>

<li>U varianty označované slovem <i>long (lengtening)</i> se nejprve prvky vstupních vektorů zkonvertují na dvojnásobnou šířku (osm bitů &rarr; 16 bitů, 16 bitů &rarr; 32 bitů či 32 bitů &rarr; 64 bitů), provede se zvolená operace a výsledky se uloží do cílového vektoru. Vzhledem k&nbsp;tomu, že došlo k&nbsp;rozšíření prvků vektorů, je možné zpracovat vždy jen polovinu prvků, protože druhou polovinu by nebylo možné nikam uložit. Z&nbsp;tohoto důvodu vždy existují dvě varianty každé instrukce, přičemž druhá varianta používá suffix <strong>2</strong> pro odlišení, zda se má pracovat s&nbsp;horní polovinou či dolní polovinou vektoru.</li>

<li>Další varianta se jmenuje <i>wide (widening)</i> a dochází u ní ke kombinaci dvou zdrojových vektorů různých typů. Druhý zdrojový vektor obsahuje prvky s&nbsp;poloviční šířkou, které jsou opět zkonvertovány a následně je provedena zvolená operace. Opět platí, že každá instrukce existuje ve dvou variantách podle toho, kterou polovinu druhého zdrojového vektoru zpracovává.</li>

<li>Opačná situace nastává u varianty označované <i>narrow (narrowing)</i>, kde se nejprve provede zvolená operace a následně se prvky sníží na poloviční šířku.</li>

<li>Další varianty rozlišují provedení operace se saturací. V&nbsp;tomto případě se používají prefixy <strong>SQ</strong> a <strong>UQ</strong> podle toho, zda prvky vstupních vektorů jsou hodnoty se znaménkem či bez znaménka.</li>

<li>Posledním suffixem je znak <strong>P</strong> značící, že se zvolená operace nemá provést vždy mezi korespondujícími prvky dvou vstupních vektorů, ale vždy mezi dvěma sousedními prvky prvního zdrojového vektoru a posléze mezi stejnými páry druhého zdrojového vektoru.</li>

</ul>



<p><a name="k09"></a></p>
<h2 id="k09">9. Příklad různých variant instrukce ADD</h2>

<p>Vzhledem k&nbsp;tomu, že u technologie NEON je možné používat vektory s&nbsp;prvky různých typů a navíc se při výpočtech může provádět konverze operandů, je celkový počet kombinací instrukcí velmi vysoký. Můžeme si to ukázat na instrukci <strong>ADD</strong>, tj.&nbsp;instrukci, která má provést součet. Přitom se může jednat o součet dvou skalárů (různých typů) nebo o součet prvků vektorů, přičemž počet prvků a jejich typ se může lišit (připomeňme si, že můžeme použít &bdquo;jen&ldquo; 64bitové vektory či naopak vektory 128bitové):</p>

<table>
<tr><th>Instrukce</th><th>Význam/provedená operace</th></tr>
<tr><td>ADD Wd, Wn, Wm</td><td>skalární součet s&nbsp;32bitovými operandy typu celé číslo</td></tr>
<tr><td>ADD Xd, Xn, Xm</td><td>skalární součet se 64bitovými operandy typu celé číslo</td></tr>
<tr><td>ADD Dd, Dn, Dm</td><td>skalární součet se 64bitovými operandy typu celé číslo, tentokrát s&nbsp;registry NEONu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>FADD Sd, Sn, Sm</td><td>skalární součet s&nbsp;FP operandy typu <i>float/single</i></td></tr>
<tr><td>FADD Dd, Dn, Dm</td><td>skalární součet s&nbsp;FP operandy typu <i>double</i></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>SQDD Vd.typ, Vn.typ, Vm.typ</td><td>skalární součet se saturací pro celá čísla se znaménkem</td></tr>
<tr><td>UQDD Vd.typ, Vn.typ, Vm.typ</td><td>skalární součet se saturací pro celá čísla bez znaménka</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>ADD Vd.8B, Vn.8B, Vm.8B</td><td>&bdquo;vektorový&ldquo; součet osmi prvků typu byte</td></tr>
<tr><td>ADD Vd.16B, Vn.16B, Vm.16B</td><td>&bdquo;vektorový&ldquo; součet šestnácti prvků typu byte</td></tr>
<tr><td>ADD Vd.4H, Vn.4H, Vm.4H</td><td>&bdquo;vektorový&ldquo; součet čtyř prvků typu 16bit integer</td></tr>
<tr><td>ADD Vd.8H, Vn.8H, Vm.8H</td><td>&bdquo;vektorový&ldquo; součet osmi prvků typu 16bit integer</td></tr>
<tr><td>ADD Vd.2S, Vn.2S, Vm.2S</td><td>&bdquo;vektorový&ldquo; součet dvou prvků typu 32bit integer</td></tr>
<tr><td>ADD Vd.4S, Vn.4S, Vm.4S</td><td>&bdquo;vektorový&ldquo; součet čtyř prvků typu 32bit integer</td></tr>
<tr><td>ADD Vd.2D, Vn.2D, Vm.2D</td><td>&bdquo;vektorový&ldquo; součet dvou prvků typu 64bit integer</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>FADD Vd.2S, Vn.2S, Vm.2S</td><td>&bdquo;vektorový&ldquo; součet dvou prvků typu <i>float/single</i></td></tr>
<tr><td>FADD Vd.4S, Vn.4S, Vm.4S</td><td>&bdquo;vektorový&ldquo; součet čtyř prvků typu <i>float/single</i></td></tr>
<tr><td>FADD Vd.2D, Vn.2D, Vm.2D</td><td>&bdquo;vektorový&ldquo; součet dvou prvků typu <i>double</i></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>UADDL Vd.8H, Vn.8B, Vm.8B</td><td>&bdquo;vektorový&ldquo; součet s&nbsp;rozšířením operandů bez znaménka (byte &rarr; 16bit integer)</td></tr>
<tr><td>UADDL Vd.4S, Vn.4H, Vm.4H</td><td>&bdquo;vektorový&ldquo; součet s&nbsp;rozšířením operandů bez znaménka (16bit integer &rarr; 32bit integer)</td></tr>
<tr><td>UADDL Vd.2D, Vn.2S, Vm.2S</td><td>&bdquo;vektorový&ldquo; součet s&nbsp;rozšířením operandů bez znaménka (32bit integer &rarr; 64bit integer)</td></tr>
<tr><td>UADDL2 Vd.8H, Vn.8B, Vm.8B</td><td>jako první UADDL, ale pro druhou polovinu vektoru</td></tr>
<tr><td>UADDL2 Vd.4S, Vn.4H, Vm.4H</td><td>jako první UADDL, ale pro druhou polovinu vektoru</td></tr>
<tr><td>UADDL2 Vd.2D, Vn.2S, Vm.2S</td><td>jako první UADDL, ale pro druhou polovinu vektoru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>SADDL Vd.8H, Vn.8B, Vm.8B</td><td>&bdquo;vektorový&ldquo; součet s&nbsp;rozšířením operandů se znaménkem (byte &rarr; 16bit integer)</td></tr>
<tr><td>SADDL Vd.4S, Vn.4H, Vm.4H</td><td>&bdquo;vektorový&ldquo; součet s&nbsp;rozšířením operandů se znaménkem (16bit integer &rarr; 32bit integer)</td></tr>
<tr><td>SADDL Vd.2D, Vn.2S, Vm.2S</td><td>&bdquo;vektorový&ldquo; součet s&nbsp;rozšířením operandů se znaménkem (32bit integer &rarr; 64bit integer)</td></tr>
<tr><td>SADDL2 Vd.8H, Vn.8B, Vm.8B</td><td>jako první SADDL, ale pro druhou polovinu vektoru</td></tr>
<tr><td>SADDL2 Vd.4S, Vn.4H, Vm.4H</td><td>jako první SADDL, ale pro druhou polovinu vektoru</td></tr>
<tr><td>SADDL2 Vd.2D, Vn.2S, Vm.2S</td><td>jako první SADDL, ale pro druhou polovinu vektoru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>UADDW Vd.8H, Vn.8H, Vm.8B</td><td>&bdquo;vektorový&ldquo; součet s&nbsp;rozšířením operandu bez znaménka (byte &rarr; 16bit integer)</td></tr>
<tr><td>UADDW Vd.4S, Vn.4S, Vm.4H</td><td>&bdquo;vektorový&ldquo; součet s&nbsp;rozšířením operandu bez znaménka (16bit integer &rarr; 32bit integer)</td></tr>
<tr><td>UADDW Vd.2D, Vn.2D, Vm.2S</td><td>&bdquo;vektorový&ldquo; součet s&nbsp;rozšířením operandu bez znaménka (32bit integer &rarr; 64bit integer)</td></tr>
<tr><td>UADDW2 Vd.8H, Vn.8H, Vm.8B</td><td>jako první UADDW, ale pro druhou polovinu vektoru</td></tr>
<tr><td>UADDW2 Vd.4S, Vn.4S, Vm.4H</td><td>jako první UADDW, ale pro druhou polovinu vektoru</td></tr>
<tr><td>UADDW2 Vd.2D, Vn.2D, Vm.2S</td><td>jako první UADDW, ale pro druhou polovinu vektoru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>SADDW Vd.8H, Vn.8H, Vm.8B</td><td>&bdquo;vektorový&ldquo; součet s&nbsp;rozšířením operandu se znaménkem (byte &rarr; 16bit integer)</td></tr>
<tr><td>SADDW Vd.4S, Vn.4S, Vm.4H</td><td>&bdquo;vektorový&ldquo; součet s&nbsp;rozšířením operandu se znaménkem (16bit integer &rarr; 32bit integer)</td></tr>
<tr><td>SADDW Vd.2D, Vn.2D, Vm.2S</td><td>&bdquo;vektorový&ldquo; součet s&nbsp;rozšířením operandu se znaménkem (32bit integer &rarr; 64bit integer)</td></tr>
<tr><td>SADDW2 Vd.8H, Vn.8H, Vm.8B</td><td>jako první SADDW, ale pro druhou polovinu vektoru</td></tr>
<tr><td>SADDW2 Vd.4S, Vn.4S, Vm.4H</td><td>jako první SADDW, ale pro druhou polovinu vektoru</td></tr>
<tr><td>SADDW2 Vd.2D, Vn.2D, Vm.2S</td><td>jako první SADDW, ale pro druhou polovinu vektoru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>ADDP Vd.typ, Vn.typ, Vm.typ</td><td>součet sousedních párů prvků obou zdrojových vektorů</td></tr>
<tr><td>FADDP Vd.typ, Vn.typ, Vm.typ</td><td>dtto, ale pro typy single a double</td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Typy podporovaných vektorových instrukcí, aritmetické a logické instrukce</h2>

<p>Instrukce zavedené v&nbsp;technologii NEON jsou navrženy takovým způsobem,
aby je bylo možné použít při zpracování 1D signálů (filtry s&nbsp;konečnou a
nekonečnou odezvou, FFT, DFT, DCT), při image processingu (tedy 2D matic),
zpracování videa (motion vektory atd.) popř.&nbsp;v&nbsp;3D grafice.
Z&nbsp;tohoto důvodu je sada instrukcí poměrně velká a neomezuje se pouze na
paralelní výpočet jednoduchých operací nad prvky vektorů:</p>

<table>
<tr><th>Instrukce</th><th>Zpracování signálu</th><th>Image/video processing</th><th>Další použití</th></tr>
<tr><td>vektorový součet</td><td>obecně použitelný</td><td>změna velikosti, změna jasu</td><td>detekce kolizí</td></tr>
<tr><td>maticový součet</td><td>FFT</td><td>rotace obrazu</td><td>&nbsp;</td></tr>
<tr><td>vektorový rozdíl</td><td>obecně použitelný, FFT</td><td>změna jasu</td><td>&nbsp;</td></tr>
<tr><td>maticový rozdíl</td><td>FIR</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>násobení prvků vektorů</td><td>FIR</td><td>změna kontrastu</td><td>&nbsp;</td></tr>
<tr><td>vektorový MAC</td><td>FIR</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>násobení matic</td><td>FIR</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>dělení prvků vektorů</td><td>IIR</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>výpočet délky vektoru</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>normalizace vektoru</td><td>&nbsp;</td><td>&nbsp;</td><td>3D grafika</td></tr>
<tr><td>absolutní hodnota</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>skalární součin</td><td>&nbsp;</td><td>&nbsp;</td><td>3D grafika</td></tr>
<tr><td>vektorový součin</td><td>&nbsp;</td><td>&nbsp;</td><td>3D grafika</td></tr>
<tr><td>determinant matice</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>inverzní matice</td><td>&nbsp;</td><td>&nbsp;</td><td>3D grafika</td></tr>
<tr><td>transpozice matice</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</table>

<p>Základní aritmetické a logické instrukce prováděné s&nbsp;prvky vektorů jsou
vypsány v&nbsp;následující tabulce. Povšimněte si, že některé instrukce
existují ve variantách pro celočíselné operandy i operandy s&nbsp;plovoucí
řádovou čárkou, u dalších instrukcí se navíc rozlišuje režim se saturací a
instrukce pro násobení pracuje i pro typ polynomial:</p>

<table>
<tr><th>Instrukce</th><th>Poznámka</th></tr>
<tr><td>ADD/FADD</td><td>součet (celočíselný, s&nbsp;FP hodnotami)</td></tr>
<tr><td>SQADD/UQADD/</td><td>součet se saturací</td></tr>
<tr><td>SUB/FSUB</td><td>rozdíl</td></tr>
<tr><td>SQSUB/UQSUB/</td><td>rozdíl se saturací</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>MUL/FMUL/PMUL</td><td>součin</td></tr>
<tr><td>MLA/FMLA</td><td>multiply-accumulate (MAC)</td></tr>
<tr><td>MLS/FMLS</td><td>multiply-subtract (podobné předchozímu, ale výsledek se odečte od akumulátoru)</td></tr>
<tr><td>FDIV</td><td>podíl (jen pro single a double)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>UABD/SABD/FABD</td><td>absolutní hodnota rozdílu</td></tr>
<tr><td>UABA/SABA</td><td>absolutní hodnota rozdílu se přičte s&nbsp;cílovému vektoru (akumulace)</td></tr>
<tr><td>UMAX/SMAX/FMAX</td><td>maximální hodnota</td></tr>
<tr><td>UMIN/SMIN/FMIN</td><td>minimální hodnota</td></tr>
<tr><td></td><td></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>AND</td><td>logický součin bit po bitu</td></tr>
<tr><td>EOR</td><td>logická operace XOR</td></tr>
<tr><td>ORR</td><td>logický součet bit po bitu</td></tr>
<tr><td>ORN</td><td>logický součet + negace</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: prefix <strong>F</strong> značí operace
s&nbsp;operandy s&nbsp;plovoucí řádovou čárkou, prefix <strong>P</strong> pak
typ &bdquo;polynomial&ldquo;. V&nbsp;některých případech se odlišuje i prefix
<strong>S</strong> a <strong>U</strong>, tedy &bdquo;signed&ldquo; a
&bdquo;unsigned&ldquo; (zde pro celočíselné hodnoty, protože u hodnot
s&nbsp;plovoucí řádovou čárkou dnes používáme znaménko vždy).</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Instrukce určené pro provedení jednoho kroku delší operace</h2>

<p>Některé delší operace se rozdělují do série několika instrukcí a provádí se
tak do jisté míry iterativně, přičemž v&nbsp;každé iteraci dochází ke zpřesnění
výsledku. Zde záleží na potřebách programátora, jakou přesnost vyžaduje,
resp.&nbsp;zda preferuje rychlý &bdquo;odhad&ldquo; výsledků či přesný výpočet
(otázkou zůstává, do jaké míry lze tyto požadavky vyjádřit ve vysokoúrovňových
programovacích jazycích). U těchto instrukcí se mezivýsledky ukládají do
speciálních registrů (konkrétně se jmenují <strong>FRECPS</strong> a
<strong>FRSQRTS</strong>).</p>

<p>První takovou instrukcí je <strong>FRECPS</strong>. Tato instrukce vynásobí
příslušné dvojice prvků vektorů, odečte tento výsledek od konstanty 2 a
výsledek uloží do příslušných prvků cílového vektoru. Ve skutečnosti se jedná o
jeden krok iterativního výpočtu:</p>

<p>
x<sub>n+1</sub> = x<sub>n</sub> (2-dx<sub>n</sub>)
</p>

<p>Tento výpočet konverguje k&nbsp;hodnotě 1/d, ovšem jen ve chvíli, pokud je
prvotní odhad výsledku x<sub>0</sub> proveden instrukcí
<strong>FRECPE</strong>.</p>

<p>Druhá instrukce se jmenuje <strong>FRSQRTS</strong> a provádí jeden krok
iterativního výpočtu:</p>

<p>
x<sub>n+1</sub> = x<sub>n</sub> (3-dx<sub>n</sub><sup>2</sup>)/2
</p>

<p>Tento výpočet konverguje k&nbsp;hodnotě 1/&radic;d, ovšem původní odhad
mezivýsledku je nutné spočítat instrukcí <strong>FRSQRTE</strong> (E znamená
&bdquo;estimate&ldquo; zatímco S v&nbsp;předchozí instrukci znamená
&bdquo;step&ldquo;).</p>

<p><div class="rs-tip-major">Poznámka: příklady použití těchto instrukcí budou
uvedeny později v&nbsp;článku o <i>intrinsic</i>.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Podpora v&nbsp;GCC pro základní vektorové operace</h2>

<p></p>

<pre>
typedef unsigned short int <strong>v16us</strong> __attribute__((vector_size(16)));
&nbsp;
int <strong>main</strong>(void)
{
    v16us x = { 1, 2, 3, 4, 5, 6, 7, 8 };
    v16us y = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
    v16us z = x + y;
&nbsp;
    return 0;
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Překlad do strojového kódu se zákazem SIMD instrukcí</h2>

<pre>
simd04_1.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <main>:
typedef unsigned short int v16us __attribute__((vector_size(16)));

int main(void)
{
   0:   d100c3ff        sub     sp, sp, #0x30
    v16us x = { 1, 2, 3, 4, 5, 6, 7, 8 };
   4:   90000000        adrp    x0, 0 <main>
   8:   91000000        add     x0, x0, #0x0
   c:   a9400400        ldp     x0, x1, [x0]
  10:   a90207e0        stp     x0, x1, [sp, #32]
    v16us y = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
  14:   90000000        adrp    x0, 0 <main>
  18:   91000000        add     x0, x0, #0x0
  1c:   a9400400        ldp     x0, x1, [x0]
  20:   a90107e0        stp     x0, x1, [sp, #16]
  24:   f94013e0        ldr     x0, [sp, #32]
  28:   f9400be1        ldr     x1, [sp, #16]
    v16us z = x + y;
  2c:   ca010003        eor     x3, x0, x1
  30:   9200b821        and     x1, x1, #0x7fff7fff7fff7fff
  34:   9200b802        and     x2, x0, #0x7fff7fff7fff7fff
  38:   92018060        and     x0, x3, #0x8000800080008000
  3c:   8b010041        add     x1, x2, x1
  40:   ca000024        eor     x4, x1, x0
  44:   f94017e0        ldr     x0, [sp, #40]
  48:   f9400fe1        ldr     x1, [sp, #24]
  4c:   ca010003        eor     x3, x0, x1
  50:   9200b821        and     x1, x1, #0x7fff7fff7fff7fff
  54:   9200b802        and     x2, x0, #0x7fff7fff7fff7fff
  58:   92018060        and     x0, x3, #0x8000800080008000
  5c:   8b010041        add     x1, x2, x1
  60:   ca000022        eor     x2, x1, x0
  64:   d2800000        mov     x0, #0x0                        // #0
  68:   d2800001        mov     x1, #0x0                        // #0
  6c:   aa0403e0        mov     x0, x4
  70:   aa0203e1        mov     x1, x2
  74:   a90007e0        stp     x0, x1, [sp]

    return 0;
  78:   52800000        mov     w0, #0x0                        // #0
}
  7c:   9100c3ff        add     sp, sp, #0x30
  80:   d65f03c0        ret
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Překlad do strojového kódu s&nbsp;povolením SIMD instrukcí</h2>

<pre>
simd04_2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <main>:
typedef unsigned short int v16us __attribute__((vector_size(16)));

int main(void)
{
   0:   d100c3ff        sub     sp, sp, #0x30
    v16us x = { 1, 2, 3, 4, 5, 6, 7, 8 };
   4:   90000000        adrp    x0, 0 <main>
   8:   3dc00000        ldr     q0, [x0]
   c:   3d800be0        str     q0, [sp, #32]
    v16us y = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
  10:   4f0787e0        movi    v0.8h, #0xff
  14:   3d8007e0        str     q0, [sp, #16]
    v16us z = x + y;
  18:   3dc00be1        ldr     q1, [sp, #32]
  1c:   3dc007e0        ldr     q0, [sp, #16]
  20:   4e608420        add     v0.8h, v1.8h, v0.8h
  24:   3d8003e0        str     q0, [sp]

    return 0;
  28:   52800000        mov     w0, #0x0                        // #0
}
  2c:   9100c3ff        add     sp, sp, #0x30
  30:   d65f03c0        ret
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Základní vektorové operace s&nbsp;prvky vektorů typu <strong>float</strong> a <strong>double</strong></h2>

<pre>
#include <stdio.h>

typedef float v16float __attribute__((vector_size(16)));

void add16float(v16float x, v16float y, v16float * z)
{
    *z = x + y;
}

typedef double v16double __attribute__((vector_size(16)));

void add16double(v16double x, v16double y, v16double * z)
{
    *z = x + y;
}

int main(void)
{
    {
        v16float x = { 0, 1, 2, 3 };
        v16float y = { 0.1, 0.1, 0.1, 0.1 };
        v16float z;

        add16float(x, y, &z);

        int i;

        puts("vector of floats");

        for (i = 0; i < sizeof(v16float) / sizeof(float); i++) {
            printf("%d %f\n", i, z[i]);
        }
    }

    putchar('\n');

    {
        v16double x = { 0, 1 };
        v16double y = { 0.1, 0.1 };
        v16double z;

        add16double(x, y, &z);

        int i;

        puts("vector of doubles");

        for (i = 0; i < sizeof(v16double) / sizeof(double); i++) {
            printf("%d %f\n", i, z[i]);
        }
    }
    return 0;
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;jazyku C, které jsou určené pro překlad
pomocí překladače <strong>GCC C</strong>, byly uložen do Git repositáře, který
je dostupný na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již velmi rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>simd01.c</td><td>vektor celých čísel typu <strong>short int</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd01.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd01.c</a></td></tr>
<tr><td> 2</td><td>simd02.c</td><td>ukázka použití vektorů s&nbsp;celočíselnými typy bez znaménka</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd02.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd02.c</a></td></tr>
<tr><td> 3</td><td>simd03.c</td><td>ukázka použití vektorů s&nbsp;celočíselnými typy se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd03.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd03.c</a></td></tr>
<tr><td> 4</td><td>simd04.c</td><td>paralelní součet celočíselných prvků vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd04.c</a></td></tr>
<tr><td> 5</td><td>simd04B.c</td><td>úprava pro další datové typy</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B.c</a></td></tr>
<tr><td> 6</td><td>simd05.c</td><td>přístup k&nbsp;jednotlivým prvkům vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05.c</a></td></tr>
<tr><td> 7</td><td>simd05B.c</td><td>korektnější výpočet počtu prvků vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05B.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05B.c</a></td></tr>
<tr><td> 8</td><td>simd05C.c</td><td>definice typu vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05C.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05C.c</a></td></tr>
<tr><td> 9</td><td>simd06.c</td><td>vektor čísel s&nbsp;plovoucí řádovou čárkou</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd06.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd06.c</a></td></tr>
<tr><td>10</td><td>simd07.c</td><td>paralelní součet prvků vektorů (typ <strong>float</strong>)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd07.c</a></td></tr>
<tr><td>11</td><td>simd08.c</td><td>paralelní součet prvků vektorů (typ <strong>double</strong>)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd08.c</a></td></tr>
<tr><td>12</td><td>simd09.c</td><td>překročení délky vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd09.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd09.c</a></td></tr>
<tr><td>13</td><td>simd10.c</td><td>přístup k&nbsp;jednotlivým prvkům vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd10.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd10.c</a></td></tr>
<tr><td>14</td><td>simd11.c</td><td>překročení délky vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd11.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd11.c</a></td></tr>
<tr><td>15</td><td>simd12.c</td><td>dlouhý vektor s&nbsp;256 bajty</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd12.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>simd13.c</td><td>operace součtu pro vektory s&nbsp;celočíselnými prvky rozličné bitové šířky bez znaménka</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd13.c</a></td></tr>
<tr><td>17</td><td>simd14.c</td><td>operace součtu pro vektory s&nbsp;celočíselnými prvky rozličné bitové šířky se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd14.c</a></td></tr>
<tr><td>18</td><td>simd15.c</td><td>operace součtu pro vektory s&nbsp;prvky rozličné bitové šířky s&nbsp;plovoucí řádovou čárkou</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd15.c</a></td></tr>
<tr><td>19</td><td>simd16.c</td><td>operace součtu pro dlouhé vektory s&nbsp;prvky rozličné bitové šířky s&nbsp;plovoucí řádovou čárkou</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd16.c</a></td></tr>
<tr><td>20</td><td>simd17.c</td><td>všechny podporované binární operace nad vektory s&nbsp;celočíselnými prvky se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd17.c</a></td></tr>
<tr><td>21</td><td>simd18.c</td><td>všechny podporované binární operace nad vektory s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd18.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>22</td><td>Makefile</td><td>Makefile pro překlad demonstračních příkladů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/Makefile">https://github.com/tisnik/presentations/blob/master/SIMD/Makefile</a></td></tr>
</table>

<p>Soubory vzniklé překladem z&nbsp;jazyka C do assembleru procesorů x86-64:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>simd04_1.lst</td><td>překlad zdrojového kódu <strong>simd04_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04_1.lst</a></td></tr>
<tr><td> 2</td><td>simd04_2.lst</td><td>překlad zdrojového kódu <strong>simd04_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04_2.lst</a></td></tr>
<tr><td> 3</td><td>simd04B_1.lst</td><td>překlad zdrojového kódu <strong>simd04B_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_1.lst</a></td></tr>
<tr><td> 4</td><td>simd04B_2.lst</td><td>překlad zdrojového kódu <strong>simd04B_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_2.lst</a></td></tr>
<tr><td> 5</td><td>simd07_1.lst</td><td>překlad zdrojového kódu <strong>simd07_1.c</strong> s&nbsp;přepínači <strong>-mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd07_1.lst</a></td></tr>
<tr><td> 6</td><td>simd07_2.lst</td><td>překlad zdrojového kódu <strong>simd07_2.c</strong> s&nbsp;přepínači <strong>-g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd07_2.lst</a></td></tr>
<tr><td> 7</td><td>simd08_1.lst</td><td>překlad zdrojového kódu <strong>simd08_1.c</strong> s&nbsp;přepínači <strong>-mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd08_1.lst</a></td></tr>
<tr><td> 8</td><td>simd08_2.lst</td><td>překlad zdrojového kódu <strong>simd08_2.c</strong> s&nbsp;přepínači <strong>-g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd08_2.lst</a></td></tr>
<tr><td> 9</td><td>simd12_1.lst</td><td>překlad zdrojového kódu <strong>simd12_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g </strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd12_1.lst</a></td></tr>
<tr><td>10</td><td>simd12_2.lst</td><td>překlad zdrojového kódu <strong>simd12_2.c</strong> s&nbsp;přepínači <strong>-O0 -g </strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd12_2.lst</a></td></tr>
<tr><td>11</td><td>simd13_1.lst</td><td>překlad zdrojového kódu <strong>simd13_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_1.lst</a></td></tr>
<tr><td>12</td><td>simd13_2.lst</td><td>překlad zdrojového kódu <strong>simd13_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_2.lst</a></td></tr>
<tr><td>13</td><td>simd13_3.lst</td><td>překlad zdrojového kódu <strong>simd13_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_3.lst</a></td></tr>
<tr><td>14</td><td>simd13_4.lst</td><td>překlad zdrojového kódu <strong>simd13_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_4.lst</a></td></tr>
<tr><td>15</td><td>simd14_1.lst</td><td>překlad zdrojového kódu <strong>simd14_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_1.lst</a></td></tr>
<tr><td>16</td><td>simd14_2.lst</td><td>překlad zdrojového kódu <strong>simd14_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_2.lst</a></td></tr>
<tr><td>17</td><td>simd14_3.lst</td><td>překlad zdrojového kódu <strong>simd14_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_3.lst</a></td></tr>
<tr><td>18</td><td>simd14_4.lst</td><td>překlad zdrojového kódu <strong>simd14_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_4.lst</a></td></tr>
<tr><td>19</td><td>simd15_1.lst</td><td>překlad zdrojového kódu <strong>simd15_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_1.lst</a></td></tr>
<tr><td>20</td><td>simd15_2.lst</td><td>překlad zdrojového kódu <strong>simd15_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_2.lst</a></td></tr>
<tr><td>21</td><td>simd15_3.lst</td><td>překlad zdrojového kódu <strong>simd15_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_3.lst</a></td></tr>
<tr><td>22</td><td>simd15_4.lst</td><td>překlad zdrojového kódu <strong>simd15_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_4.lst</a></td></tr>
<tr><td>23</td><td>simd16_1.lst</td><td>překlad zdrojového kódu <strong>simd16_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_1.lst</a></td></tr>
<tr><td>24</td><td>simd16_2.lst</td><td>překlad zdrojového kódu <strong>simd16_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_2.lst</a></td></tr>
<tr><td>25</td><td>simd16_3.lst</td><td>překlad zdrojového kódu <strong>simd16_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_3.lst</a></td></tr>
<tr><td>26</td><td>simd16_4.lst</td><td>překlad zdrojového kódu <strong>simd16_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_4.lst</a></td></tr>
<tr><td>27</td><td>simd17_1.lst</td><td>překlad zdrojového kódu <strong>simd17_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_1.lst</a></td></tr>
<tr><td>28</td><td>simd17_2.lst</td><td>překlad zdrojového kódu <strong>simd17_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_2.lst</a></td></tr>
<tr><td>29</td><td>simd17_3.lst</td><td>překlad zdrojového kódu <strong>simd17_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_3.lst</a></td></tr>
<tr><td>30</td><td>simd17_4.lst</td><td>překlad zdrojového kódu <strong>simd17_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_4.lst</a></td></tr>
<tr><td>31</td><td>simd18_1.lst</td><td>překlad zdrojového kódu <strong>simd18_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_1.lst</a></td></tr>
<tr><td>32</td><td>simd18_2.lst</td><td>překlad zdrojového kódu <strong>simd18_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_2.lst</a></td></tr>
<tr><td>33</td><td>simd18_3.lst</td><td>překlad zdrojového kódu <strong>simd18_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_3.lst</a></td></tr>
<tr><td>34</td><td>simd18_4.lst</td><td>překlad zdrojového kódu <strong>simd18_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_4.lst</a></td></tr>
</table>

<p>Soubory vzniklé překladem z&nbsp;jazyka C do assembleru procesorů ARMv8:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>simd04_1.lst</td><td>překlad zdrojového kódu <strong>simd04_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04_1.lst</a></td></tr>
<tr><td> 2</td><td>simd04_2.lst</td><td>překlad zdrojového kódu <strong>simd04_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04_2.lst</a></td></tr>
<tr><td> 3</td><td>simd04B_1.lst</td><td>překlad zdrojového kódu <strong>simd04B_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_1.lst</a></td></tr>
<tr><td> 4</td><td>simd04B_2.lst</td><td>překlad zdrojového kódu <strong>simd04B_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_2.lst</a></td></tr>
<tr><td> 5</td><td>simd07_1.lst</td><td>překlad zdrojového kódu <strong>simd07_1.c</strong> s&nbsp;přepínači <strong>-march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd07_1.lst</a></td></tr>
<tr><td> 6</td><td>simd07_2.lst</td><td>překlad zdrojového kódu <strong>simd07_2.c</strong> s&nbsp;přepínači <strong>-g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd07_2.lst</a></td></tr>
<tr><td> 7</td><td>simd08_1.lst</td><td>překlad zdrojového kódu <strong>simd08_1.c</strong> s&nbsp;přepínači <strong>-march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd08_1.lst</a></td></tr>
<tr><td> 8</td><td>simd08_2.lst</td><td>překlad zdrojového kódu <strong>simd08_2.c</strong> s&nbsp;přepínači <strong>-g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd08_2.lst</a></td></tr>
<tr><td> 9</td><td>simd12_1.lst</td><td>překlad zdrojového kódu <strong>simd12_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g </strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd12_1.lst</a></td></tr>
<tr><td>10</td><td>simd12_2.lst</td><td>překlad zdrojového kódu <strong>simd12_2.c</strong> s&nbsp;přepínači <strong>-O0 -g </strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd12_2.lst</a></td></tr>
<tr><td>11</td><td>simd13_1.lst</td><td>překlad zdrojového kódu <strong>simd13_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_1.lst</a></td></tr>
<tr><td>12</td><td>simd13_2.lst</td><td>překlad zdrojového kódu <strong>simd13_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_2.lst</a></td></tr>
<tr><td>13</td><td>simd13_3.lst</td><td>překlad zdrojového kódu <strong>simd13_3.c</strong> s&nbsp;přepínači <strong>-O3 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_3.lst</a></td></tr>
<tr><td>14</td><td>simd13_4.lst</td><td>překlad zdrojového kódu <strong>simd13_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_4.lst</a></td></tr>
<tr><td>15</td><td>simd14_1.lst</td><td>překlad zdrojového kódu <strong>simd14_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_1.lst</a></td></tr>
<tr><td>16</td><td>simd14_2.lst</td><td>překlad zdrojového kódu <strong>simd14_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_2.lst</a></td></tr>
<tr><td>17</td><td>simd14_3.lst</td><td>překlad zdrojového kódu <strong>simd14_3.c</strong> s&nbsp;přepínači <strong>-O3 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_3.lst</a></td></tr>
<tr><td>18</td><td>simd14_4.lst</td><td>překlad zdrojového kódu <strong>simd14_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_4.lst</a></td></tr>
<tr><td>19</td><td>simd15_1.lst</td><td>překlad zdrojového kódu <strong>simd15_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_1.lst</a></td></tr>
<tr><td>20</td><td>simd15_2.lst</td><td>překlad zdrojového kódu <strong>simd15_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_2.lst</a></td></tr>
<tr><td>21</td><td>simd15_3.lst</td><td>překlad zdrojového kódu <strong>simd15_3.c</strong> s&nbsp;přepínači <strong>-O3 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_3.lst</a></td></tr>
<tr><td>22</td><td>simd15_4.lst</td><td>překlad zdrojového kódu <strong>simd15_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_4.lst</a></td></tr>
<tr><td>23</td><td>simd16_1.lst</td><td>překlad zdrojového kódu <strong>simd16_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_1.lst</a></td></tr>
<tr><td>24</td><td>simd16_2.lst</td><td>překlad zdrojového kódu <strong>simd16_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_2.lst</a></td></tr>
<tr><td>25</td><td>simd16_3.lst</td><td>překlad zdrojového kódu <strong>simd16_3.c</strong> s&nbsp;přepínači <strong>-O3 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_3.lst</a></td></tr>
<tr><td>26</td><td>simd16_4.lst</td><td>překlad zdrojového kódu <strong>simd16_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_4.lst</a></td></tr>
<tr><td>27</td><td>simd17_1.lst</td><td>překlad zdrojového kódu <strong>simd17_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_1.lst</a></td></tr>
<tr><td>28</td><td>simd17_2.lst</td><td>překlad zdrojového kódu <strong>simd17_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_2.lst</a></td></tr>
<tr><td>29</td><td>simd17_3.lst</td><td>překlad zdrojového kódu <strong>simd17_3.c</strong> s&nbsp;přepínači <strong>-O3 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_3.lst</a></td></tr>
<tr><td>30</td><td>simd17_4.lst</td><td>překlad zdrojového kódu <strong>simd17_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_4.lst</a></td></tr>
<tr><td>31</td><td>simd18_1.lst</td><td>překlad zdrojového kódu <strong>simd18_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_1.lst</a></td></tr>
<tr><td>32</td><td>simd18_2.lst</td><td>překlad zdrojového kódu <strong>simd18_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_2.lst</a></td></tr>
<tr><td>33</td><td>simd18_3.lst</td><td>překlad zdrojového kódu <strong>simd18_3.c</strong> s&nbsp;přepínači <strong>-O3 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_3.lst</a></td></tr>
<tr><td>34</td><td>simd18_4.lst</td><td>překlad zdrojového kódu <strong>simd18_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_4.lst</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>GCC documentation: Extensions to the C Language Family<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html#C-Extensions">https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html#C-Extensions</a>
</li>

<li>GCC documentation: Using Vector Instructions through Built-in Functions<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html">https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html</a>
</li>

<li>SSE (Streaming SIMD Extentions)<br />
<a href="http://www.songho.ca/misc/sse/sse.html">http://www.songho.ca/misc/sse/sse.html</a>
</li>

<li>Timothy A. Chagnon: SSE and SSE2<br />
<a href="http://www.cs.drexel.edu/~tc365/mpi-wht/sse.pdf">http://www.cs.drexel.edu/~tc365/mpi-wht/sse.pdf</a>
</li>

<li>Intel corporation: Extending the Worldr's Most Popular Processor Architecture<br />
<a href="http://download.intel.com/technology/architecture/new-instructions-paper.pdf">http://download.intel.com/technology/architecture/new-instructions-paper.pdf</a>
</li>

<li>SIMD architectures:<br />
<a href="http://arstechnica.com/old/content/2000/03/simd.ars/">http://arstechnica.com/old/content/2000/03/simd.ars/</a>
</li>

<li>Tour of the Black Holes of Computing!: Floating Point<br />
<a href="http://www.cs.hmc.edu/~geoff/classes/hmc.cs105.../slides/class02_floats.ppt">http://www.cs.hmc.edu/~geoff/classes/hmc.cs105.../slides/class02_floats.ppt</a>
</li>

<li>3Dnow! Technology Manual<br />
AMD Inc., 2000</li>

<li>Intel MMX<sup>TM</sup> Technology Overview<br />
Intel corporation, 1996</li>

<li>MultiMedia eXtensions<br />
<a href="http://softpixel.com/~cwright/programming/simd/mmx.php">http://softpixel.com/~cwright/programming/simd/mmx.php</a>i
</li>

<li>AMD K5 ("K5" / "5k86")<br />
<a href="http://www.pcguide.com/ref/cpu/fam/g5K5-c.html">http://www.pcguide.com/ref/cpu/fam/g5K5-c.html</a>
</li>

<li>Sixth Generation Processors<br />
<a href="http://www.pcguide.com/ref/cpu/fam/g6.htm">http://www.pcguide.com/ref/cpu/fam/g6.htm</a>
</li>

<li>Great Microprocessors of the Past and Present<br />
<a href="http://www.cpushack.com/CPU/cpu1.html">http://www.cpushack.com/CPU/cpu1.html</a>
</li>

<li>Very long instruction word (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Very_long_instruction_word">http://en.wikipedia.org/wiki/Very_long_instruction_word</a>
</li>

<li>CPU design (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/CPU_design">http://en.wikipedia.org/wiki/CPU_design</a>
</li>

<li>Bulldozer (microarchitecture)<br />
<a href="https://en.wikipedia.org/wiki/Bulldozer_(microarchitecture)">https://en.wikipedia.org/wiki/Bulldozer_(microarchitecture)</a>
</li>

<li>SIMD Instructions Considered Harmful<br />
<a href="https://www.sigarch.org/simd-instructions-considered-harmful/">https://www.sigarch.org/simd-instructions-considered-harmful/</a>
</li>

<li>GCC Compiler Intrinsics<br />
<a href="https://iq.opengenus.org/gcc-compiler-intrinsics/">https://iq.opengenus.org/gcc-compiler-intrinsics/</a>
</li>

<li>Scalable_Vector_Extension_(SVE)<br />
<a href="https://en.wikipedia.org/wiki/AArch64#Scalable_Vector_Extension_(SVE)">https://en.wikipedia.org/wiki/AArch64#Scalable_Vector_Extension_(SVE)</a>
</li>

<li>FADD/FADDP/FIADD — Add<br />
<a href="https://www.felixcloutier.com/x86/fadd:faddp:fiadd">https://www.felixcloutier.com/x86/fadd:faddp:fiadd</a>
</li>

<li>ADDPS — Add Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/addps">https://www.felixcloutier.com/x86/addps</a>
</li>

<li>ADDPD — Add Packed Double-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/addpd">https://www.felixcloutier.com/x86/addpd</a>
</li>

<li>FDIV/FDIVP/FIDIV — Divide<br />
<a href="https://www.felixcloutier.com/x86/fdiv:fdivp:fidiv">https://www.felixcloutier.com/x86/fdiv:fdivp:fidiv</a>
</li>

<li>IDIV — Signed Divide<br />
<a href="https://www.felixcloutier.com/x86/idiv">https://www.felixcloutier.com/x86/idiv</a>
</li>

<li>PADDB/PADDW/PADDD/PADDQ — Add Packed Integers<br />
<a href="https://www.felixcloutier.com/x86/paddb:paddw:paddd:paddq">https://www.felixcloutier.com/x86/paddb:paddw:paddd:paddq</a>
</li>

<li>PSUBB/PSUBW/PSUBD — Subtract Packed Integers<br />
<a href="https://www.felixcloutier.com/x86/psubb:psubw:psubd">https://www.felixcloutier.com/x86/psubb:psubw:psubd</a>
</li>

<li>PMULLW — Multiply Packed Signed Integers and Store Low Result<br />
<a href="https://www.felixcloutier.com/x86/pmullw">https://www.felixcloutier.com/x86/pmullw</a>
</li>

<li>PUNPCKLBW/PUNPCKLWD/PUNPCKLDQ/PUNPCKLQDQ — Unpack Low Data<br />
<a href="https://www.felixcloutier.com/x86/punpcklbw:punpcklwd:punpckldq:punpcklqdq">https://www.felixcloutier.com/x86/punpcklbw:punpcklwd:punpckldq:punpcklqdq</a>
</li>

<li>PUNPCKHBW/PUNPCKHWD/PUNPCKHDQ/PUNPCKHQDQ — Unpack High Data<br />
<a href="https://www.felixcloutier.com/x86/punpckhbw:punpckhwd:punpckhdq:punpckhqdq">https://www.felixcloutier.com/x86/punpckhbw:punpckhwd:punpckhdq:punpckhqdq</a>
</li>

<li>PACKUSWB — Pack with Unsigned Saturation<br />
<a href="https://www.felixcloutier.com/x86/packuswb">https://www.felixcloutier.com/x86/packuswb</a>
</li>

<li>ADDPS — Add Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/addps">https://www.felixcloutier.com/x86/addps</a>
</li>

<li>SUBPS — Subtract Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/subps">https://www.felixcloutier.com/x86/subps</a>
</li>

<li>MULPS — Multiply Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/mulps">https://www.felixcloutier.com/x86/mulps</a>
</li>

<li>DIVPS — Divide Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/divps">https://www.felixcloutier.com/x86/divps</a>
</li>

<li>CBW/CWDE/CDQE — Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword<br />
<a href="https://www.felixcloutier.com/x86/cbw:cwde:cdqe">https://www.felixcloutier.com/x86/cbw:cwde:cdqe</a>
</li>

<li>PAND — Logical AND<br />
<a href="https://www.felixcloutier.com/x86/pand">https://www.felixcloutier.com/x86/pand</a>
</li>

<li>POR — Bitwise Logical OR<br />
<a href="https://www.felixcloutier.com/x86/por">https://www.felixcloutier.com/x86/por</a>
</li>

<li>PXOR — Logical Exclusive OR<br />
<a href="https://www.felixcloutier.com/x86/pxor">https://www.felixcloutier.com/x86/pxor</a>
</li>

<li>Improve the Multimedia User Experience<br />
<a href="https://www.arm.com/technologies/neon">https://www.arm.com/technologies/neon</a>
</li>

<li>NEON Technology (stránky ARM)<br />
<a href="https://developer.arm.com/technologies/neon">https://developer.arm.com/technologies/neon</a>
</li>

<li>SIMD Assembly Tutorial: ARM NEON - Xiph.org<br />
<a href="https://people.xiph.org/~tterribe/daala/neon_tutorial.pdf">https://people.xiph.org/~tterribe/daala/neon_tutorial.pdf</a>
</li>

<li>Ne10<br />
<a href="http://projectne10.github.io/Ne10/">http://projectne10.github.io/Ne10/</a>
</li>

<li>NEON and Floating-Point architecture<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/BABIGHEB.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/BABIGHEB.html</a>
</li>

<li>An Introduction to ARM NEON<br />
<a href="http://peterdn.com/post/an-introduction-to-ARM-NEON.aspx">http://peterdn.com/post/an-introduction-to-ARM-NEON.aspx</a>
</li>

<li>ARM NEON Intrinsics Reference<br />
<a href="http://infocenter.arm.com/help/topic/com.arm.doc.ihi0073a/IHI0073A_arm_neon_intrinsics_ref.pdf">http://infocenter.arm.com/help/topic/com.arm.doc.ihi0073a/IHI0073A_arm_neon_intrinsics_ref.pdf</a>
</li>

<li>Arm Neon Intrinsics vs hand assembly<br />
<a href="https://stackoverflow.com/questions/9828567/arm-neon-intrinsics-vs-hand-assembly">https://stackoverflow.com/questions/9828567/arm-neon-intrinsics-vs-hand-assembly</a>
</li>

<li>ARM NEON Optimization. An Example<br />
<a href="http://hilbert-space.de/?p=22">http://hilbert-space.de/?p=22</a>
</li>

<li>AArch64 NEON instruction format<br />
<a href="https://developer.arm.com/docs/den0024/latest/7-aarch64-floating-point-and-neon/73-aarch64-neon-instruction-format">https://developer.arm.com/docs/den0024/latest/7-aarch64-floating-point-and-neon/73-aarch64-neon-instruction-format</a>
</li>

<li>ARM SIMD instructions<br />
<a href="https://developer.arm.com/documentation/dht0002/a/Introducing-NEON/What-is-SIMD-/ARM-SIMD-instructions">https://developer.arm.com/documentation/dht0002/a/Introducing-NEON/What-is-SIMD-/ARM-SIMD-instructions</a>
</li>

<li>Learn the architecture - Migrate Neon to SVE Version 1.0<br />
<a href="https://developer.arm.com/documentation/102131/0100/?lang=en">https://developer.arm.com/documentation/102131/0100/?lang=en</a>
</li>

<li>1.2.2. Comparison between NEON technology and other SIMD solutions<br />
<a href="https://developer.arm.com/documentation/den0018/a/Introduction/Comparison-between-ARM-NEON-technology-and-other-implementations/Comparison-between-NEON-technology-and-other-SIMD-solutions?lang=en">https://developer.arm.com/documentation/den0018/a/Introduction/Comparison-between-ARM-NEON-technology-and-other-implementations/Comparison-between-NEON-technology-and-other-SIMD-solutions?lang=en</a>
</li>

<li>NEON Programmer’s Guide<br />
<a href="https://documentation-service.arm.com/static/63299276e68c6809a6b41308">https://documentation-service.arm.com/static/63299276e68c6809a6b41308</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>
