<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Instrukční sady SIMD a automatické vektorizace prováděné překladačem GCC</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Instrukční sady SIMD a automatické vektorizace prováděné překladačem GCC</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V paralelně běžícím seriálu jsme se seznámili se SIMD instrukcemi MMX, SSE a částečně i SSE2. Tyto instrukce lze volat z assembleru nebo využít takzvané intrinsic nabízené překladači. Ovšem existuje i další způsob jejich využití s využitím automatické vektorizace, se kterou se dnes seznámíme.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Instrukční sady SIMD a automatické vektorizace prováděné překladačem GCC</a></p>
<p><a href="#k02">2. První příklad: vynulování obsahu pole o předem známém počtu prvků</a></p>
<p><a href="#k03">3. Výsledek překladu se zákazem i povolením SSE instrukcí: neoptimalizované varianty</a></p>
<p><a href="#k04">4. Výsledek překladu se zákazem i povolením SSE instrukcí: optimalizované varianty a vliv zarovnání</a></p>
<p><a href="#k05">5. Vliv změny velikosti nulovaného pole na kód vytvořený překladačem</a></p>
<p><a href="#k06">6. Druhý příklad: přičtení konstantní hodnoty ke všem prvkům pole</a></p>
<p><a href="#k07">7. Výsledek překladu se zákazem a povolením vektorizace</a></p>
<p><a href="#k08">8. Vliv změny velikosti pole na kód vytvořený překladačem</a></p>
<p><a href="#k09">9. Třetí příklad: přičtení obsahu jednoho pole k&nbsp;poli druhému</a></p>
<p><a href="#k10">10. Výsledek překladu se zákazem a povolením vektorizace</a></p>
<p><a href="#k11">11. Pomáháme překladači: klíčové slovo <strong>restrict</strong></a></p>
<p><a href="#k12">12. Kombinace obou nápověd: zarovnání i aliasu ukazatelů</a></p>
<p><a href="#k13">13. Vliv změny velikosti pole na kód vytvořený překladačem</a></p>
<p><a href="#k14">14. Výpočet druhé odmocniny všech prvků polí</a></p>
<p><a href="#k15">15. Výsledek překladu se zákazem a povolením vektorizace</a></p>
<p><a href="#k16">16. Vliv přepínače <strong>-ffast-math</strong></a></p>
<p><a href="#k17">17. Automatická vektorizace u operací typu <i>reduce</i></a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Seznam všech předchozích částí tohoto seriálu a článků o SIMD instrukcích</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Instrukční sady SIMD a automatické vektorizace prováděné překladačem GCC</h2>

<p>Na stránkách Roota jsme se již několikrát setkali s&nbsp;instrukcemi typu
SIMD, které dokážou provádět zvolené operace paralelně, například se čtyřmi
prvky vektorů typu <i>float</i> nebo se šestnácti jednobajtovými prvky.
Prozatím jsme si ukázali tři možnosti využití těchto instrukcí:</p>

<ul>

<li>Tzv.&nbsp;vektorové rozšíření GCC o další datové typy
<strong>v16us</strong> atd. Základní operace s&nbsp;těmito typy (což jsou
vektory) jsou totiž prováděny právě SIMD instrukcemi.</li>

<li>Voláním takzvaných <i>intrinsic</i> zabudovaných přímo do překladače, které
opět generují SIMD instrukce.</li>

<li>Naprogramováním příslušných subrutin v&nbsp;assembleru</li>

</ul>

<p>Ovšem existuje ještě jeden způsob nabízený moderními překladači (a to
nejenom překladači jazyka C). Jedná se o takzvanou <i>autovektorizaci</i>, což
je sada optimalizací, které dokážou například převést některé formy
programových smyček do podoby se SIMD instrukcemi. Ovšem v&nbsp;mnoha případech
je nutné překladači vhodným způsobem <i>pomoci</i>, například specifikací
modifikátoru <strong>restrict</strong>, uvedením, že pole jsou zarovnána na 8,
16 atd. bajtů atd.</p>

<p>V&nbsp;dnešním článku si některé tyto techniky ukážeme. Přitom se (prozatím)
zaměříme na překladač GCC a jeho podporu autovektorizace. Ta se povoluje
přepínačem <strong>-ftree-vectorize</strong>. Navíc se dnes omezíme pouze na
SSE instrukce (ty jsou totiž poměrně dobře pochopitelné) a pole/vektory typu
<i>float/single</i>, takže použijeme i přepínač <strong>-msse</strong>.</p>

<p><div class="rs-tip-major">Poznámka: samozřejmě je možné použít GCC
nainstalovaný přímo na počítači, ovšem výhodnější může být využití velmi
propracovaného nástroje <a href="https://godbolt.org/">Compiler Explorer</a>,
který dokáže výstup do assembleru &bdquo;očistit&ldquo; a nabídnout čitelnější
výsledek. Pouze se přesvědčte, že máte v&nbsp;levém podokně s&nbsp;editorem
zdrojového textu vybraný jazyk C a nikoli C++, protože jinak budou hlášeny
problémy u těch demonstračních příkladů, v&nbsp;nichž je použito slovo
<strong>restrict</strong> (v&nbsp;C++ se píše s&nbsp;podtržítky).</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. První příklad: vynulování obsahu pole o předem známém počtu prvků</h2>

<p>Pokusy s&nbsp;autovektorizací začneme na triviálním příkladu. Jedná se o
funkci, která vynuluje obsah pole hodnot typu <strong>float</strong>
(v&nbsp;SIMD označovaných jako <i>single</i> podle IEEE 754). Počet prvků
nulovaného pole je pro jednoduchost dopředu známý a je uložen v&nbsp;konstantě
nazvané <strong>SIZE</strong>. Zdrojový kód, který vůbec nebere v&nbsp;úvahu
případné optimalizace, vypadá následovně:</p>

<pre>
void <strong>clear</strong>(float *a) {
    #define SIZE 8
    int i;
    for (i=0; i&lt;SIZE; i++) {
        a[i] = 0.0;
    }
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Výsledek překladu se zákazem i povolením SSE instrukcí: neoptimalizované varianty</h2>

<p>Jak bude vypadat překlad této jednoduché funkce do strojového kódu
mikroprocesorů s&nbsp;architekturou x86 (resp.&nbsp;přesněji řečeno x86-64)?
Výsledky se v&nbsp;tomto případě budou zásadně lišit podle toho, zda je
povoleno používat instrukce SSE nebo je to naopak zakázáno.</p>

<p>V&nbsp;případě, že jsou optimalizace zakázány a současně je zakázáno i
použití SSE, bude výsledný kód používat instrukce FPU a vše bude realizováno
v&nbsp;neoptimalizované smyčce:</p>

<pre>
<strong>clear</strong>(float*):
        push    rbp
        mov     rbp, rsp
        mov     QWORD PTR [rbp-24], rdi
        mov     DWORD PTR [rbp-4], 0
        jmp     .L2
.L3:
        mov     eax, DWORD PTR [rbp-4]
        cdqe
        lea     rdx, [0+rax*4]
        mov     rax, QWORD PTR [rbp-24]
        add     rax, rdx
        fldz
        fstp    DWORD PTR [rax]
        add     DWORD PTR [rbp-4], 1
.L2:
        cmp     DWORD PTR [rbp-4], 7
        jle     .L3
        nop
        nop
        pop     rbp
        ret
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si použití instrukcí FLDZ
(načtení nuly do FP registru) a FSTP (uložení FP registru do paměti). Jednou
z&nbsp;nejjednodušších optimalizací je přesun první z&nbsp;těchto instrukcí
mimo smyčku. A pochopitelně je možné i celou smyčku výrazně zkrátit.</div></p>

<p>Při zákazu optimalizací, ale povolení SSE je opět výsledkem neoptimalizovaná
smyčka, v&nbsp;níž ale nalezneme registr XMM0 a skalární instrukci MOVSS:</p>

<pre>
clear(float*):
        push    rbp
        mov     rbp, rsp
        mov     QWORD PTR [rbp-24], rdi
        mov     DWORD PTR [rbp-4], 0
        jmp     .L2
.L3:
        mov     eax, DWORD PTR [rbp-4]
        cdqe
        lea     rdx, [0+rax*4]
        mov     rax, QWORD PTR [rbp-24]
        add     rax, rdx
        pxor    xmm0, xmm0
        movss   DWORD PTR [rax], xmm0
        add     DWORD PTR [rbp-4], 1
.L2:
        cmp     DWORD PTR [rbp-4], 7
        jle     .L3
        nop
        nop
        pop     rbp
        ret
</pre>

<p><div class="rs-tip-major">Poznámka: oba tyto kódy jsou skutečně velmi špatné
a i začátečník v&nbsp;assembleru dokáže napsat optimálnější varianty.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výsledek překladu se zákazem i povolením SSE instrukcí: optimalizované varianty a vliv zarovnání</h2>

<p>V&nbsp;dalším kroku se pokusme o povolení optimalizací, prozatím
s&nbsp;využitím přepínače -O2. V&nbsp;případě, že jsou instrukce SSE zakázány,
bude zápis (na platformě x86-64) prováděn po 64bitových slovech, tj.&nbsp;po
dvojici hodnot typu <strong>float</strong>. To je již mnohem rychlejší a není
zapotřebí realizovat pomalou počítanou programovou smyčku:</p>

<pre>
<strong>clear</strong>(float*):
        mov     QWORD PTR [rdi], 0
        mov     QWORD PTR [rdi+8], 0
        mov     QWORD PTR [rdi+16], 0
        mov     QWORD PTR [rdi+24], 0
        ret
</pre>

<p>Při povolení instrukcí SSE je kód odlišný. Nejdříve se smaže obsah
128bitového registru XMM0 a následně se provedou pouze dva zápisy, z&nbsp;nichž
každý uloží do paměti čtyři hodnoty typu <strong>float</strong>:</p>

<pre>
<strong>clear</strong>(float*):
        pxor    xmm0, xmm0
        movups  XMMWORD PTR [rdi], xmm0
        movups  XMMWORD PTR [rdi+16], xmm0
        ret
</pre>

<p>Překladač jazyka C v&nbsp;tomto případě neví, jak budou prvky pole
(ne)zarovnány a proto musí použít instrukci <strong>MOVUPS</strong> a nikoli
<strong>MOVAPS</strong>. Ovšem pokud existuje jistota, že pole začíná na
zarovnané adrese, je možné překladači &bdquo;napovědět&ldquo;:</p>

<pre>
void <strong>clear</strong>(float *a) {
    #define SIZE 8
    <u>a = __builtin_assume_aligned (a, 16);</u>
    int i;
    for (i=0; i&lt;SIZE; i++) {
        a[i] = 0.0;
    }
}
</pre>

<p>Výsledkem nyní bude obecně rychlejší kód s&nbsp;instrukcemi
<strong>MOVAPS</strong> namísto <strong>MOVUPS</strong>:</p>

<pre>
<strong>clear</strong>(float*):
        pxor    xmm0, xmm0
        movaps  XMMWORD PTR [rdi], xmm0
        movaps  XMMWORD PTR [rdi+16], xmm0
        ret
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vliv změny velikosti nulovaného pole na kód vytvořený překladačem</h2>

<p>Předchozí zdrojový kód byl pro překladač snadným úkolem, protože délka
nulovaného pole byla rovna osmi prvkům. Co se však stane ve chvíli, kdy tuto
délku pozměníme? Nejprve nastavíme <strong>SIZE</strong> na hodnotu 16 a
provedeme překlad s&nbsp;využitím SSE instrukcí. Výsledkem je stále
&bdquo;rozbalená&ldquo; smyčka</p>

<pre>
<strong>clear</strong>(float*):
        pxor    xmm0, xmm0
        movups  XMMWORD PTR [rdi], xmm0
        movups  XMMWORD PTR [rdi+16], xmm0
        movups  XMMWORD PTR [rdi+32], xmm0
        movups  XMMWORD PTR [rdi+48], xmm0
        ret
</pre>

<p>Pro <strong>SIZE</strong> nastavené na hodnotu 18 již není možné (alespoň ne
jednoduše) všechny prvky zapsat instrukcemi <strong>MOVUPS</strong> nebo
<strong>MOVAPS</strong>, protože 18 není dělitelná čtyřmi, Překladač si poradí
tak, že 16 prvků zapíše po čtveřicích a další dva prvky jako jediné
čtyřslovo:</p>

<pre>
<strong>clear</strong>(float*):
        pxor    xmm0, xmm0
        mov     QWORD PTR [rdi+64], 0
        movups  XMMWORD PTR [rdi], xmm0
        movups  XMMWORD PTR [rdi+16], xmm0
        movups  XMMWORD PTR [rdi+32], xmm0
        movups  XMMWORD PTR [rdi+48], xmm0
        ret
</pre>

<p>A pro <strong>SIZE</strong> nastavené na 17 prvků dopadne výsledek takto
(poslední prvek je zapsán jako dvojslovo):</p>

<pre>
<strong>clear</strong>(float*):
        pxor    xmm0, xmm0
        mov     DWORD PTR [rdi+64], 0
        movaps  XMMWORD PTR [rdi], xmm0
        movaps  XMMWORD PTR [rdi+16], xmm0
        movaps  XMMWORD PTR [rdi+32], xmm0
        movaps  XMMWORD PTR [rdi+48], xmm0
        ret
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Druhý příklad: přičtení konstantní hodnoty ke všem prvkům pole</h2>

<p>V&nbsp;dnešním druhém ukázkovém příkladu je realizována funkce, která ke
všem prvkům pole o známé délce přičítá konstantu předanou formou argumentu.
Celý příklad je naprogramován naivním způsobem, bez jakékoli snahy o
optimalizace na úrovni céčkovského zdrojového kódu:</p>

<pre>
void <strong>add_delta</strong>(float *a, float delta) {
    #define SIZE 16
    int i;
    for (i=0; i&lt;SIZE; i++) {
        a[i] += delta;
    }
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Výsledek překladu se zákazem a povolením vektorizace</h2>

<p>Nejprve se podívejme na výsledek překladu v&nbsp;situaci, kdy není
automatická vektorizace povolena. V&nbsp;tomto případě se sice používají SSE
instrukce a registry SSE (XMM0, XMM1), ovšem realizace přičtení konstanty
používá programovou smyčku se skalárními instrukcemi <strong>ADDSS</strong> a
<strong>MOVSS</strong> (ty dobře známe):</p>

<pre>
<strong>add_delta</strong>(float*, float):
        lea     rax, [rdi+64]
.L2:
        movss   xmm1, DWORD PTR [rdi]
        add     rdi, 4
        addss   xmm1, xmm0
        movss   DWORD PTR [rdi-4], xmm1
        cmp     rdi, rax
        jne     .L2
        ret
</pre>

<p>Vektorizovaná varianta je opět realizována programovou smyčkou, ovšem nyní
se v&nbsp;každé iteraci provede přičtení konstanty ke čtyřem prvkům pole a
počet opakování smyčky je čtvrtinový. Díky tomu, že je délka pole dělitelná
čtyřmi, je tato optimalizace zcela legální. Za povšimnutí stojí především
použití instrukce <strong>SHUFPS</strong>, v&nbsp;níž je zdrojový i cílový
registr totožný. Díky tomu se nejnižší prvek registru XMM0 rozkopíruje do
ostatních tří prvků, což je trik, který je užitečné znát:</p>

<pre>
<strong>add_delta</strong>(float*, float):
        lea     rax, [rdi+64]
        shufps  xmm0, xmm0, 0
.L2:
        movups  xmm1, XMMWORD PTR [rdi]
        add     rdi, 16
        addps   xmm1, xmm0
        movups  XMMWORD PTR [rdi-16], xmm1
        cmp     rax, rdi
        jne     .L2
        ret
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vliv změny velikosti pole na kód vytvořený překladačem</h2>

<p>A jak bude vypadat výsledný kód při změně velikosti pole? Nejprve si ukažme
výsledek překladu pro <strong>SIZE</strong> nastavenou na hodnotu 24 (což je
stále dělitelné čtyřmi). Opět se použije plně optimalizovaná varianta
(nerozbalené) programové smyčky se součtem vektorů:</p>

<pre>
<strong>add_delta</strong>(float*, float):
        lea     rax, [rdi+96]
        shufps  xmm0, xmm0, 0
.L2:
        movups  xmm1, XMMWORD PTR [rdi]
        add     rdi, 16
        addps   xmm1, xmm0
        movups  XMMWORD PTR [rdi-16], xmm1
        cmp     rax, rdi
        jne     .L2
        ret
</pre>

<p>Zajímavá situace nastane pro <strong>SIZE</strong> nastavenou na hodnotu 17,
což v&nbsp;žádném případě není dělitelné čtyřmi. V&nbsp;takovém případě se
překladač bude snažit o rozdělení zápisu s&nbsp;využitím součtu vektorů ve
smyčce. A zbývající jeden až tři součty budou provedeny až za touto
smyčkou:</p>

<pre>
<strong>add_delta</strong>(float*, float):
        movaps  xmm2, xmm0
        mov     rax, rdi
        lea     rdx, [rdi+64]
        shufps  xmm2, xmm2, 0
.L2:
        movups  xmm1, XMMWORD PTR [rax]
        add     rax, 16
        addps   xmm1, xmm2
        movups  XMMWORD PTR [rax-16], xmm1
        cmp     rdx, rax
        jne     .L2
        addss   xmm0, DWORD PTR [rdi+64]
        movss   DWORD PTR [rdi+64], xmm0
        ret
</pre>

<p>Pro <strong>SIZE</strong> nastavené na hodnotu 18 se po dokončení smyčky
provede součet dvou prvků s&nbsp;využitím součtu vektorů:</p>

<pre>
<strong>add_delta</strong>(float*, float):
        movaps  xmm2, xmm0
        mov     rax, rdi
        lea     rdx, [rdi+64]
        shufps  xmm2, xmm2, 0
.L2:
        movups  xmm1, XMMWORD PTR [rax]
        add     rax, 16
        addps   xmm1, xmm2
        movups  XMMWORD PTR [rax-16], xmm1
        cmp     rdx, rax
        jne     .L2
        movq    xmm1, QWORD PTR [rdi+64]
        shufps  xmm0, xmm0, 0xe0
        movq    xmm0, xmm0
        addps   xmm0, xmm1
        movlps  QWORD PTR [rdi+64], xmm0
        ret
</pre>

<p>Dtto pro velikost 19:</p>

<pre>
<strong>add_delta</strong>(float*, float):
        movaps  xmm2, xmm0
        mov     rax, rdi
        lea     rdx, [rdi+64]
        shufps  xmm2, xmm2, 0
.L2:
        movups  xmm1, XMMWORD PTR [rax]
        add     rax, 16
        addps   xmm1, xmm2
        movups  XMMWORD PTR [rax-16], xmm1
        cmp     rdx, rax
        jne     .L2
        movq    xmm1, QWORD PTR [rdi+64]
        movaps  xmm2, xmm0
        addss   xmm0, DWORD PTR [rdi+72]
        shufps  xmm2, xmm2, 0xe0
        movq    xmm2, xmm2
        addps   xmm1, xmm2
        movss   DWORD PTR [rdi+72], xmm0
        movlps  QWORD PTR [rdi+64], xmm1
        ret
</pre>

<p><div class="rs-tip-major">Poznámka: z&nbsp;toho plyne první poučení &ndash;
je více než vhodné, aby délka polí byla dělitelná čtyřmi, ale ideálně osmi nebo
šestnácti (AVX/512). Výsledný kód bude kratší a je větší pravděpodobnost, že
celý zůstane v&nbsp;L1 cache.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Třetí příklad: přičtení obsahu jednoho pole k&nbsp;poli druhému</h2>

<p>Třetí příklad, který se pokusíme přeložit do strojového kódu ve
vektorizované podobě, provádí přičtení obsahu jednoho pole typu
<strong>float</strong> ke druhému poli typu <strong>float</strong>. Sčítají se
odpovídající si prvky pole, tedy nultý s&nbsp;nultým, první s&nbsp;prvním atd.
Opět si nejdříve ukažme naivní variantu zápisu tohoto algoritmu, ve které se
nijak nesnažíme překladači pomoci přidáním dalších informací:</p>

<pre>
void <strong>add_arrays</strong>(float *a, float *b) {
    #define SIZE 4
    int i;
    for (i=0; i&lt;SIZE; i++) {
        a[i] += b[i];
    }
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Výsledek překladu se zákazem a povolením vektorizace</h2>

<p>Překlad se zákazem automatické vektorizace vede k&nbsp;vytvoření programové
smyčky, ve které se postupně provádí skalární součet s&nbsp;využitím instrukce
<strong>addss</strong>. Jedná se sice o poměrně primitivní způsob překladu,
ovšem jeho výhodou je, že není zapotřebí zjišťovat překryvy polí atd.:</p>

<pre>
<strong>add_arrays</strong>(float*, float*):
        xor     eax, eax
.L2:
        movss   xmm0, DWORD PTR [rdi+rax]
        addss   xmm0, DWORD PTR [rsi+rax]
        movss   DWORD PTR [rdi+rax], xmm0
        add     rax, 4
        cmp     rax, 96
        jne     .L2
        ret
</pre>

<p>Při povolení vektorizace se vygeneruje poměrně dlouhý programový kód:</p>

<pre>
<strong>add_arrays</strong>(float*, float*):
        lea     rdx, [rsi+4]
        mov     rax, rdi
        sub     rax, rdx
        cmp     rax, 8
        mov     eax, 0
        jbe     .L2
.L3:
        movups  xmm0, XMMWORD PTR [rdi+rax]
        movups  xmm1, XMMWORD PTR [rsi+rax]
        addps   xmm0, xmm1
        movups  XMMWORD PTR [rdi+rax], xmm0
        add     rax, 16
        cmp     rax, 96
        jne     .L3
        ret
.L2:
        movss   xmm0, DWORD PTR [rdi+rax]
        addss   xmm0, DWORD PTR [rsi+rax]
        movss   DWORD PTR [rdi+rax], xmm0
        add     rax, 4
        cmp     rax, 96
        jne     .L2
        ret
</pre>

<p>Ovšem proč tomu tak je? Překladač si nemůže být jistý, že se předaná pole
nepřekrývají. Musí tedy provést kontrolu, jestli nedochází k&nbsp;překryvu (o
čtyři prvky) a pokud ano, provede se neoptimalizovaná &bdquo;skalární&ldquo;
část algoritmu. Tyto části jsou dobře viditelné. &bdquo;Vektorová část&ldquo;
provádějící součty po čtveřicích:</p>

<pre>
.L3:
        movups  xmm0, XMMWORD PTR [rdi+rax]
        movups  xmm1, XMMWORD PTR [rsi+rax]
        addps   xmm0, xmm1
        movups  XMMWORD PTR [rdi+rax], xmm0
        add     rax, 16
        cmp     rax, 96
        jne     .L3
        ret
</pre>

<p>Skalární část:</p>

<pre>
.L2:
        movss   xmm0, DWORD PTR [rdi+rax]
        addss   xmm0, DWORD PTR [rsi+rax]
        movss   DWORD PTR [rdi+rax], xmm0
        add     rax, 4
        cmp     rax, 96
        jne     .L2
        ret
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Pomáháme překladači: klíčové slovo <strong>restrict</strong></h2>

<p>V&nbsp;případě, že sčítáme dvě rozdílná pole, by bylo vhodné překladači
nějakým způsobem napovědět, že nemusí do výsledného kódu vkládat i variantu
s&nbsp;překrývajícími se poli. Pokud by byla pole odlišného typu
(resp.&nbsp;pokud by ukazatele byly odlišného typu), je řešení snadné &ndash;
podle normy je chování překladače nedefinované :-). Ovšem naše pole mají shodný
typ (přesněji řečeno oba ukazatele mají totožný typ <strong>float *</strong>),
takže překladač musí předpokládat, že se může jednat o stejné ukazatele nebo že
se budou oblasti překrývat. Jak překladači napovědět, že k&nbsp;této situaci
nedojde a nemusí se jí zabývat? V&nbsp;jazyku C, konkrétně ve verzi C99 a
vyšší, je pro tento účel rezervováno slovo <strong>restrict</strong>, které se
používá následujícím způsobem:</p>

<pre>
void <strong>add_arrays</strong>(float *<u>restrict</u> a, float * <u>restrict</u> b) {
    #define SIZE 4
    int i;
    for (i=0; i&tl;SIZE; i++) {
        a[i] += b[i];
    }
}
</pre>

<p>Překladač v&nbsp;tomto případě může provést optimalizace předpokládající, že
se sčítají odlišná pole a výsledek bude mnohem kratší:</p>

<pre>
<strong>add_arrays</strong>(float* restrict, float* restrict):
        movups  xmm1, XMMWORD PTR [rdi]
        movups  xmm0, XMMWORD PTR [rsi]
        addps   xmm0, xmm1
        movups  XMMWORD PTR [rdi], xmm0
        ret
</pre>

<p><div class="rs-tip-major">Poznámka: právě přidáním slova
<strong>restrict</strong> byly umožněny optimalizace, které byly zavedeny o dvě
dekády dříve do Fortranu, ale v&nbsp;céčku je nebylo možné standardním způsobem
provádět.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Kombinace obou nápověd: zarovnání i aliasu ukazatelů</h2>

<p>Samozřejmě můžeme zkombinovat obě nápovědy, které předáváme překladači,
tj.&nbsp;informaci o zarovnání polí i informaci o tom, že ukazatele obsahují
adresu rozdílných polí:</p>

<pre>
void <strong>add_arrays</strong>(float *restrict a, float * restrict b) {
    a = __builtin_assume_aligned (a, 16);
    b = __builtin_assume_aligned (b, 16);
&nbsp;
    #define SIZE 4
    int i;
    for (i=0; i&lt;SIZE; i++) {
        a[i] += b[i];
    }
}
</pre>

<p>Výsledek nyní obsahuje instrukci <strong>MOVAPS</strong> pro čtení a zápis
do &bdquo;zarovnané&ldquo; oblasti paměti. Nejenom to &ndash; výsledek je
kratší o jednu instrukci, protože <strong>ADDPS</strong> může jako druhý
operand mít zarovnanou adresu a nikoli pouze XMM registr:</p>

<pre>
<strong>add_arrays</strong>(float* restrict, float* restrict):
        movaps  xmm0, XMMWORD PTR [rdi]
        addps   xmm0, XMMWORD PTR [rsi]
        movaps  XMMWORD PTR [rdi], xmm0
        ret
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vliv změny velikosti pole na kód vytvořený překladačem</h2>

<p>Pro delší pole (SIZE je nastaveno na větší hodnotu) s&nbsp;počtem prvků
dělitelných šestnácti můžeme při povolení automatických vektorizací a současně
i zajištění zarovnání polí atd. získat tento výsledek se smyčkou, ve které se
vždy sčítají čtveřice prvků vektorů:</p>

<pre>
<strong>add_arrays</strong>(float* restrict, float* restrict):
        xor     eax, eax
.L2:
        movaps  xmm0, XMMWORD PTR [rdi+rax]
        addps   xmm0, XMMWORD PTR [rsi+rax]
        movaps  XMMWORD PTR [rdi+rax], xmm0
        add     rax, 16
        cmp     rax, 64
        jne     .L2
        ret
</pre>

<p>Pokud počet prvků není dělitelný čtyřmi, například je nastaven na 17, musí
se do kódu vložit i instrukce pro dokončení výpočtů pro poslední 1 až 3 prvky.
To je patrné z&nbsp;následujícího kódu pro SIZE=17:</p>

<pre>
<strong>add_arrays</strong>(float*, float*):
        xor     eax, eax
.L2:
        movaps  xmm0, XMMWORD PTR [rdi+rax]
        addps   xmm0, XMMWORD PTR [rsi+rax]
        movaps  XMMWORD PTR [rdi+rax], xmm0
        add     rax, 16
        cmp     rax, 64
        jne     .L2
        movss   xmm0, DWORD PTR [rdi+64]
        addss   xmm0, DWORD PTR [rsi+64]
        movss   DWORD PTR [rdi+64], xmm0
        ret
</pre>

<p><div class="rs-tip-major">Poznámka: podobně by se postupovalo pro SIZE=18
nebo SIZE=19 atd.</div></p>

<p>Jen pro ilustraci doplňme, jak dlouhý kód musí být vygenerován ve chvíli,
kdy překladač nemá informace o zarovnání ani o aliasu ukazatelů:</p>

<pre>
<strong>add_arrays</strong>(float*, float*):
        lea     rdx, [rsi+4]
        mov     rax, rdi
        sub     rax, rdx
        cmp     rax, 8
        mov     eax, 0
        jbe     .L2
.L3:
        movups  xmm0, XMMWORD PTR [rdi+rax]
        movups  xmm1, XMMWORD PTR [rsi+rax]
        addps   xmm0, xmm1
        movups  XMMWORD PTR [rdi+rax], xmm0
        add     rax, 16
        cmp     rax, 64
        jne     .L3
        movss   xmm0, DWORD PTR [rdi+64]
        addss   xmm0, DWORD PTR [rsi+64]
        movss   DWORD PTR [rdi+64], xmm0
        ret
.L2:
        movss   xmm0, DWORD PTR [rdi+rax]
        addss   xmm0, DWORD PTR [rsi+rax]
        movss   DWORD PTR [rdi+rax], xmm0
        add     rax, 4
        cmp     rax, 68
        jne     .L2
        ret
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Výpočet druhé odmocniny všech prvků polí</h2>

<p>Automatická vektorizace kódu může proběhnout i ve chvíli, kdy se pokusíme o
překlad funkce, ve které se pro všechny prvky pole počítá například jejich
převrácená hodnota nebo druhá odmocnina. Je tomu tak z&nbsp;toho důvodu, že
v&nbsp;instrukční sadě SSE existují příslušné SIMD instrukce SQRTSS/SQRTPS,
RSQRTSS/RSQRTPS a RCPSS/RCPPS určené pro přesný výpočet či o
&bdquo;odhad&ldquo; výsledku s&nbsp;předem známou přesností. Pokusme se tedy
přeložit následující funkci se snadno pochopitelným algoritmem:</p>

<pre>
#include &lt;math.h&gt;
&nbsp;
void <strong>array_sqrt</strong>(float *a) {
    #define SIZE 24
    int i;
    for (i=0; i&lt;SIZE; i++) {
        a[i] = sqrt(a[i]);
    }
}
</pre>

<p><div class="rs-tip-major">Poznámka: nyní je délka pole nastavena na
relativně vysokou hodnotu, abychom překladač &bdquo;přesvědčili&ldquo; o tom,
že je vhodné použít programovou smyčku (i když by bylo možné tuto smyčku
rozbalit).</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Výsledek překladu se zákazem a povolením vektorizace</h2>

<p>Výsledek překladu bude značně záviset na použitých přepínačích. Při zákazu
vektorizace dostaneme tento výsledek:</p>

<pre>
<strong>array_sqrt</strong>(float*):
        push    rbx
        pxor    xmm1, xmm1
        lea     rbx, [rdi+96]
        sub     rsp, 16
.L5:
        movss   xmm0, DWORD PTR [rdi]
        ucomiss xmm1, xmm0
        ja      .L8
        sqrtss  xmm0, xmm0
.L4:
        movss   DWORD PTR [rdi], xmm0
        add     rdi, 4
        cmp     rdi, rbx
        jne     .L5
        add     rsp, 16
        pop     rbx
        ret
.L8:
        mov     QWORD PTR [rsp+8], rdi
        call    sqrtf
        mov     rdi, QWORD PTR [rsp+8]
        pxor    xmm1, xmm1
        jmp     .L4
</pre>

<p>Vygenerovaný kód je tak dlouhý z&nbsp;toho důvodu, že se v&nbsp;případě
výpočtu druhé odmocniny (například) ze záporných čísel musí nastavit
<strong>errno</strong> atd. Pokud tuto hodnotu (tedy test, jak dopadly
předchozí FPU operace) stejně v&nbsp;našem algoritmu nepoužijeme, lze
překladači přes přepínač <strong>-fno-math-errno</strong> sdělit, že případné
chyby nemusí zaznamenávat.  Výsledný kód bude kratší a čitelnější:</p>

<pre>
<strong>array_sqrt</strong>(float*):
        lea     rax, [rdi+96]
.L2:
        movss   xmm0, DWORD PTR [rdi]
        add     rdi, 4
        sqrtss  xmm0, xmm0
        movss   DWORD PTR [rdi-4], xmm0
        cmp     rdi, rax
        jne     .L2
        ret
</pre>

<p>Povolením vektorizace získáme ještě optimálnější variantu, ve které se
provádí výpočty druhé odmocniny vždy pro čtyři hodnoty současně:</p>

<pre>
<strong>array_sqrt</strong>(float*):
        lea     rax, [rdi+96]
.L2:
        movups  xmm1, XMMWORD PTR [rdi]
        add     rdi, 16
        sqrtps  xmm0, xmm1
        movups  XMMWORD PTR [rdi-16], xmm0
        cmp     rax, rdi
        jne     .L2
        ret
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Vliv přepínače <strong>-ffast-math</strong></h2>

<p>Mohlo by se zdát, že <a href="#k15">v&nbsp;předchozí kapitole</a> uvedený
vektorizovaný kód již není možné žádným způsobem vylepšit. Ovšem
v&nbsp;případě, že jsou vyžadovány skutečně velmi rychlé výpočty, může být
užitečné použít přepínač <strong>-ffast-math</strong>, který překladači umožní
vygenerovat instrukce, které nebudou provádět výpočty přesně podle normy IEEE
754. Výsledkem bude v&nbsp;našem konkrétním případě kód, ve kterém se nejprve
provede přibližný (ale o to rychlejší) výpočet převrácené hodnoty druhé
odmocniny a poté se z&nbsp;této hodnoty (a s&nbsp;využitím dvou vhodně
zvolených konstant) dopočítají druhé odmocniny:</p>

<pre>
<strong>array_sqrt</strong>(float*):
        movss   xmm5, DWORD PTR .LC1[rip]
        movss   xmm4, DWORD PTR .LC3[rip]
        lea     rax, [rdi+96]
        pxor    xmm3, xmm3
        shufps  xmm5, xmm5, 0
        shufps  xmm4, xmm4, 0
.L2:
        movups  xmm1, XMMWORD PTR [rdi]
        movaps  xmm2, xmm3
        add     rdi, 16
        <u>rsqrtps xmm0, xmm1</u>
        cmpneqps        xmm2, xmm1
        andps   xmm0, xmm2
        mulps   xmm1, xmm0
        mulps   xmm0, xmm1
        mulps   xmm1, xmm4
        addps   xmm0, xmm5
        mulps   xmm0, xmm1
        movups  XMMWORD PTR [rdi-16], xmm0
        cmp     rax, rdi
        jne     .L2
        ret
.LC1:
        .long   -1069547520
.LC3:
        .long   -1090519040
</pre>

<p><div class="rs-tip-major">Poznámka: benchmark, který ověří, že je tento kód
skutečně rychlejší, než pouhé volání <strong>SQRTPS</strong>, si uvedeme
příště.</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Automatická vektorizace u operací typu <i>reduce</i></h2>

<p>Většina demonstračních příkladů, které jsme si až doposud uvedli,
vektorizovala programový kód zapsaný s&nbsp;využitím počítané programové
smyčky, ve které se postupně prochází (a popř.&nbsp;modifikují) prvky jednoho
pole nebo dvou polí. Ovšem současné verze překladačů dokážou vektorizovat i
takové programové smyčky, v&nbsp;nichž se například prvky sčítají, počítá se
skalární součin dvou vektorů, vyhledává se nejnižší nebo nejvyšší hodnota atd.
Takové operace se nazývají operace typu <i>reduce</i> a se způsobem jejich
vektorizace se seznámíme příště.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady naprogramované v&nbsp;jazyku, které jsou určené pro
překlad s&nbsp;využitím assembleru <strong>gcc</strong>, byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/8bit-fame">https://github.com/tisnik/8bit-fame</a>.
Kromě zdrojových kódů příkladů jsou do repositáře přidány i výsledky překladu
do assembleru v&nbsp;syntaxi kompatibilní s&nbsp;Intelem.  Jednotlivé
demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě
bez nutnosti klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>array_clear_size_8.c</td><td>smazání obsahu pole s&nbsp;osmi prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_8.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_8.c</a></td></tr>
<tr><td> 2</td><td>array_clear_size_8_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_8_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_8_non_vect.asm</a></td></tr>
<tr><td> 3</td><td>array_clear_size_8_no_sse.asm</td><td>výsledek překladu se zákazem SSE instrukcí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_8_no_sse.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_8_no_sse.asm</a></td></tr>
<tr><td> 4</td><td>array_clear_size_8_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_8_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_8_vect.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>array_clear_size_16.c</td><td>smazání obsahu pole se šestnácti prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_16.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_16.c</a></td></tr>
<tr><td> 6</td><td>array_clear_size_16_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_16_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_16_non_vect.asm</a></td></tr>
<tr><td> 7</td><td>array_clear_size_16_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_16_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_16_vect.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>array_clear_size_18.c</td><td>smazání obsahu pole se sedmnácti prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_18.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_18.c</a></td></tr>
<tr><td> 9</td><td>array_clear_size_18_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_18_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_18_non_vect.asm</a></td></tr>
<tr><td>10</td><td>array_clear_size_18_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_18_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_clear_size_18_vect.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>add_delta_size_16.c</td><td>přičtení konstanty ke všem prvkům pole obsahujícího 16 hodnot typu <strong>float</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_16.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_16.c</a></td></tr>
<tr><td>12</td><td>add_delta_size_16_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_16_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_16_non_vect.asm</a></td></tr>
<tr><td>13</td><td>add_delta_size_16_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_16_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_16_vect.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>14</td><td>add_delta_size_17.c</td><td>přičtení konstanty ke všem prvkům pole obsahujícího 17 hodnot typu <strong>float</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_17.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_17.c</a></td></tr>
<tr><td>15</td><td>add_delta_size_17_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_17_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_17_non_vect.asm</a></td></tr>
<tr><td>16</td><td>add_delta_size_17_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_17_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_17_vect.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>add_delta_size_24.c</td><td>přičtení konstanty ke všem prvkům pole obsahujícího 24 hodnot typu <strong>float</strong></td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_24.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_24.c</a></td></tr>
<tr><td>18</td><td>add_delta_size_24_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_24_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_24_non_vect.asm</a></td></tr>
<tr><td>19</td><td>add_delta_size_24_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_24_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_delta_size_24_vect.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td>array_sqrt.c</td><td>výpočet druhé odmocniny všech prvků polí</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_sqrt.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_sqrt.c</a></td></tr>
<tr><td>21</td><td>array_sqrt_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_sqrt_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_sqrt_non_vect.asm</a></td></tr>
<tr><td>22</td><td>array_sqrt_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_sqrt_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_sqrt_vect.asm</a></td></tr>
<tr><td>23</td><td>array_sqrt_vect_fast_math.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace a nepřesných výpočtů</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_sqrt_vect_fast_math.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/array_sqrt_vect_fast_math.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>24</td><td>dot_product_4.c</td><td>skalární součin vektorů, z&nbsp;nichž každý má délku čtyři prvky</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_4.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_4.c</a></td></tr>
<tr><td>25</td><td>dot_product_4_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_4_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_4_non_vect.asm</a></td></tr>
<tr><td>26</td><td>dot_product_4_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_4_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_4_vect.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>27</td><td>dot_product_8.c</td><td>skalární součin vektorů, z&nbsp;nichž každý má délku osmi prvků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_8.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_8.c</a></td></tr>
<tr><td>28</td><td>dot_product_8_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_8_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_8_non_vect.asm</a></td></tr>
<tr><td>29</td><td>dot_product_8_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_8_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_8_vect.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>30</td><td>dot_product_100.c</td><td>skalární součin vektorů, z&nbsp;nichž každý má délku 100 prvků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_100.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_100.c</a></td></tr>
<tr><td>31</td><td>dot_product_100_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_100_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_100_non_vect.asm</a></td></tr>
<tr><td>32</td><td>dot_product_100_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_100_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/dot_product_100_vect.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>add_arrays_size_4.c</td><td>součet prvků dvojice polí typu <strong>float</strong>, pole mají délku 4 prvků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_4.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_4.c</a></td></tr>
<tr><td>34</td><td>add_arrays_size_4_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_4_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_4_non_vect.asm</a></td></tr>
<tr><td>35</td><td>add_arrays_size_4_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_4_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_4_vect.asm</a></td></tr>
<tr><td>36</td><td>add_arrays_size_16.c</td><td>součet prvků dvojice polí typu <strong>float</strong>, pole mají délku 16 prvků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_16.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_16.c</a></td></tr>
<tr><td>37</td><td>add_arrays_size_16_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_16_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_16_non_vect.asm</a></td></tr>
<tr><td>38</td><td>add_arrays_size_16_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_16_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_16_vect.asm</a></td></tr>
<tr><td>39</td><td>add_arrays_size_17.c</td><td>součet prvků dvojice polí typu <strong>float</strong>, pole mají délku 17 prvků</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_17.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_17.c</a></td></tr>
<tr><td>40</td><td>add_arrays_size_17_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_17_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_17_non_vect.asm</a></td></tr>
<tr><td>41</td><td>add_arrays_size_17_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_17_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_size_17_vect.asm</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>42</td><td>add_arrays_restrict_size_4.c</td><td>součet prvků polí se čtyřmi prvky, pole se nepřekrývají</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_4.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_4.c</a></td></tr>
<tr><td>43</td><td>add_arrays_restrict_size_4_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_4_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_4_non_vect.asm</a></td></tr>
<tr><td>44</td><td>add_arrays_restrict_size_4_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_4_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_4_vect.asm</a></td></tr>
<tr><td>45</td><td>add_arrays_restrict_size_16.c</td><td>součet prvků polí se šestnácti prvky, pole se nepřekrývají</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_16.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_16.c</a></td></tr>
<tr><td>46</td><td>add_arrays_restrict_size_16_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_16_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_16_non_vect.asm</a></td></tr>
<tr><td>47</td><td>add_arrays_restrict_size_16_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_16_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_16_vect.asm</a></td></tr>
<tr><td>48</td><td>add_arrays_restrict_size_17.c</td><td>součet prvků polí se sedmnácti prvky, pole se nepřekrývají</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_17.c">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_17.c</a></td></tr>
<tr><td>49</td><td>add_arrays_restrict_size_17_non_vect.asm</td><td>výsledek překladu se zákazem vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_17_non_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_17_non_vect.asm</a></td></tr>
<tr><td>50</td><td>add_arrays_restrict_size_17_vect.asm</td><td>výsledek překladu s&nbsp;povolením vektorizace</td><td><a href="https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_17_vect.asm">https://github.com/tisnik/8bit-fame/blob/master/gcc-simd/add_arrays_restrict_size_17_vect.asm</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Seznam všech předchozích částí tohoto seriálu a článků o SIMD instrukcích</h2>

<p>Podporou SIMD instrukcí na úrovni <i>intrinsic</i> jsme se už na Rootu
zabývali, stejně jako samotnými SIMD instrukcemi na úrovni assembleru. Pro
úplnost jsou v&nbsp;této příloze uvedeny odkazy na příslušné články:</p>

<ol>

<li>Užitečné rozšíření GCC: podpora SIMD (vektorových) instrukcí<br />
<a href="https://www.root.cz/clanky/uzitecne-rozsireni-gcc-podpora-simd-vektorovych-instrukci/">https://www.root.cz/clanky/uzitecne-rozsireni-gcc-podpora-simd-vektorovych-instrukci/</a>
</li>

<li>Užitečné rozšíření GCC – podpora SIMD (vektorových) instrukcí: nedostatky technologie<br />
<a href="https://www.root.cz/clanky/uzitecne-rozsireni-gcc-podpora-simd-vektorovych-instrukci-nedostatky-technologie/">https://www.root.cz/clanky/uzitecne-rozsireni-gcc-podpora-simd-vektorovych-instrukci-nedostatky-technologie/</a>
</li>

<li>Podpora SIMD (vektorových) instrukcí na RISCových procesorech<br />
<a href="https://www.root.cz/clanky/podpora-simd-vektorovych-instrukci-na-riscovych-procesorech/">https://www.root.cz/clanky/podpora-simd-vektorovych-instrukci-na-riscovych-procesorech/</a>
</li>

<li>Podpora SIMD operací v&nbsp;GCC s&nbsp;využitím intrinsic pro nízkoúrovňové optimalizace<br />
<a href="https://www.root.cz/clanky/podpora-simd-operaci-v-gcc-s-vyuzitim-intrinsic-pro-nizkourovnove-optimalizace/">https://www.root.cz/clanky/podpora-simd-operaci-v-gcc-s-vyuzitim-intrinsic-pro-nizkourovnove-optimalizace/</a>
</li>

<li>Podpora SIMD operací v&nbsp;GCC s&nbsp;využitím intrinsic: technologie SSE<br />
<a href="https://www.root.cz/clanky/podpora-simd-operaci-v-gcc-s-vyuzitim-intrinsic-technologie-sse/">https://www.root.cz/clanky/podpora-simd-operaci-v-gcc-s-vyuzitim-intrinsic-technologie-sse/</a>
</li>

<li>Rozšíření instrukční sady „Advanced Vector Extensions“ na platformě x86–64<br />
<a href="https://www.root.cz/clanky/rozsireni-instrukcni-sady-advanced-vector-extensions-na-platforme-x86-64/">https://www.root.cz/clanky/rozsireni-instrukcni-sady-advanced-vector-extensions-na-platforme-x86-64/</a>
</li>

<li>Rozšíření instrukční sady F16C, FMA a AVX-512 na platformě x86–64<br />
<a href="https://www.root.cz/clanky/rozsireni-instrukcni-sady-f16c-fma-a-avx-512-na-platforme-x86-64/">https://www.root.cz/clanky/rozsireni-instrukcni-sady-f16c-fma-a-avx-512-na-platforme-x86-64/</a>
</li>

<li>Rozšíření instrukční sady AVX-512 na platformě x86–64 (dokončení)<br />
<a href="https://www.root.cz/clanky/rozsireni-instrukcni-sady-avx-512-na-platforme-x86-64-dokonceni/">https://www.root.cz/clanky/rozsireni-instrukcni-sady-avx-512-na-platforme-x86-64-dokonceni/</a>
</li>

<li>SIMD instrukce na platformě 80×86: instrukční sada MMX<br />
<a href="https://www.root.cz/clanky/simd-instrukce-na-platforme-80x86-instrukcni-sada-mmx/">https://www.root.cz/clanky/simd-instrukce-na-platforme-80x86-instrukcni-sada-mmx/</a>
</li>

<li>SIMD instrukce na 80×86: dokončení popisu MMX, instrukce 3DNow! <br />
<a href="https://www.root.cz/clanky/simd-instrukce-na-80-86-dokonceni-popisu-mmx-instrukce-3dnow/">https://www.root.cz/clanky/simd-instrukce-na-80-86-dokonceni-popisu-mmx-instrukce-3dnow/</a>
</li>

<li>SIMD instrukce v rozšíření SSE<br />
<a href="https://www.root.cz/clanky/simd-instrukce-v-rozsireni-sse/">https://www.root.cz/clanky/simd-instrukce-v-rozsireni-sse/</a>
</li>

<li>SIMD instrukce v rozšíření SSE (2. část)<br />
<a href="https://www.root.cz/clanky/simd-instrukce-v-rozsireni-sse-2-cast/">https://www.root.cz/clanky/simd-instrukce-v-rozsireni-sse-2-cast/</a>
</li>

<li>Pokročilejší SSE operace: přeskupení, promíchání a rozbalování prvků vektorů<br />
<a href="https://www.root.cz/clanky/pokrocilejsi-sse-operace-preskupeni-promichani-a-rozbalovani-prvku-vektoru/">https://www.root.cz/clanky/pokrocilejsi-sse-operace-preskupeni-promichani-a-rozbalovani-prvku-vektoru/</a>
</li>

<li>Od instrukční sady SSE k sadě SSE2<br />
<a href="https://www.root.cz/clanky/od-instrukcni-sady-sse-k-sade-sse2/">https://www.root.cz/clanky/od-instrukcni-sady-sse-k-sade-sse2/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Auto-vectorization in GCC<br />
<a href="https://gcc.gnu.org/projects/tree-ssa/vectorization.html">https://gcc.gnu.org/projects/tree-ssa/vectorization.html</a>
</li>

<li>GCC documentation: Extensions to the C Language Family<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html#C-Extensions">https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html#C-Extensions</a>
</li>

<li>GCC documentation: Using Vector Instructions through Built-in Functions<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html">https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html</a>
</li>

<li>SSE (Streaming SIMD Extentions)<br />
<a href="http://www.songho.ca/misc/sse/sse.html">http://www.songho.ca/misc/sse/sse.html</a>
</li>

<li>Timothy A. Chagnon: SSE and SSE2<br />
<a href="http://www.cs.drexel.edu/~tc365/mpi-wht/sse.pdf">http://www.cs.drexel.edu/~tc365/mpi-wht/sse.pdf</a>
</li>

<li>Intel corporation: Extending the Worldr's Most Popular Processor Architecture<br />
<a href="http://download.intel.com/technology/architecture/new-instructions-paper.pdf">http://download.intel.com/technology/architecture/new-instructions-paper.pdf</a>
</li>

<li>SIMD architectures:<br />
<a href="http://arstechnica.com/old/content/2000/03/simd.ars/">http://arstechnica.com/old/content/2000/03/simd.ars/</a>
</li>

<li>Tour of the Black Holes of Computing!: Floating Point<br />
<a href="http://www.cs.hmc.edu/~geoff/classes/hmc.cs105.../slides/class02_floats.ppt">http://www.cs.hmc.edu/~geoff/classes/hmc.cs105.../slides/class02_floats.ppt</a>
</li>

<li>3Dnow! Technology Manual<br />
AMD Inc., 2000</li>

<li>Intel MMX<sup>TM</sup> Technology Overview<br />
Intel corporation, 1996</li>

<li>MultiMedia eXtensions<br />
<a href="http://softpixel.com/~cwright/programming/simd/mmx.php">http://softpixel.com/~cwright/programming/simd/mmx.php</a>i
</li>

<li>AMD K5 ("K5" / "5k86")<br />
<a href="http://www.pcguide.com/ref/cpu/fam/g5K5-c.html">http://www.pcguide.com/ref/cpu/fam/g5K5-c.html</a>
</li>

<li>Sixth Generation Processors<br />
<a href="http://www.pcguide.com/ref/cpu/fam/g6.htm">http://www.pcguide.com/ref/cpu/fam/g6.htm</a>
</li>

<li>Great Microprocessors of the Past and Present<br />
<a href="http://www.cpushack.com/CPU/cpu1.html">http://www.cpushack.com/CPU/cpu1.html</a>
</li>

<li>Very long instruction word (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Very_long_instruction_word">http://en.wikipedia.org/wiki/Very_long_instruction_word</a>
</li>

<li>CPU design (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/CPU_design">http://en.wikipedia.org/wiki/CPU_design</a>
</li>

<li>Bulldozer (microarchitecture)<br />
<a href="https://en.wikipedia.org/wiki/Bulldozer_(microarchitecture)">https://en.wikipedia.org/wiki/Bulldozer_(microarchitecture)</a>
</li>

<li>SIMD Instructions Considered Harmful<br />
<a href="https://www.sigarch.org/simd-instructions-considered-harmful/">https://www.sigarch.org/simd-instructions-considered-harmful/</a>
</li>

<li>GCC Compiler Intrinsics<br />
<a href="https://iq.opengenus.org/gcc-compiler-intrinsics/">https://iq.opengenus.org/gcc-compiler-intrinsics/</a>
</li>

<li>Scalable_Vector_Extension_(SVE)<br />
<a href="https://en.wikipedia.org/wiki/AArch64#Scalable_Vector_Extension_(SVE)">https://en.wikipedia.org/wiki/AArch64#Scalable_Vector_Extension_(SVE)</a>
</li>

<li>Improve the Multimedia User Experience<br />
<a href="https://www.arm.com/technologies/neon">https://www.arm.com/technologies/neon</a>
</li>

<li>NEON Technology (stránky ARM)<br />
<a href="https://developer.arm.com/technologies/neon">https://developer.arm.com/technologies/neon</a>
</li>

<li>SIMD Assembly Tutorial: ARM NEON - Xiph.org<br />
<a href="https://people.xiph.org/~tterribe/daala/neon_tutorial.pdf">https://people.xiph.org/~tterribe/daala/neon_tutorial.pdf</a>
</li>

<li>Ne10<br />
<a href="http://projectne10.github.io/Ne10/">http://projectne10.github.io/Ne10/</a>
</li>

<li>NEON and Floating-Point architecture<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/BABIGHEB.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/BABIGHEB.html</a>
</li>

<li>An Introduction to ARM NEON<br />
<a href="http://peterdn.com/post/an-introduction-to-ARM-NEON.aspx">http://peterdn.com/post/an-introduction-to-ARM-NEON.aspx</a>
</li>

<li>ARM NEON Intrinsics Reference<br />
<a href="http://infocenter.arm.com/help/topic/com.arm.doc.ihi0073a/IHI0073A_arm_neon_intrinsics_ref.pdf">http://infocenter.arm.com/help/topic/com.arm.doc.ihi0073a/IHI0073A_arm_neon_intrinsics_ref.pdf</a>
</li>

<li>Arm Neon Intrinsics vs hand assembly<br />
<a href="https://stackoverflow.com/questions/9828567/arm-neon-intrinsics-vs-hand-assembly">https://stackoverflow.com/questions/9828567/arm-neon-intrinsics-vs-hand-assembly</a>
</li>

<li>ARM NEON Optimization. An Example<br />
<a href="http://hilbert-space.de/?p=22">http://hilbert-space.de/?p=22</a>
</li>

<li>AArch64 NEON instruction format<br />
<a href="https://developer.arm.com/docs/den0024/latest/7-aarch64-floating-point-and-neon/73-aarch64-neon-instruction-format">https://developer.arm.com/docs/den0024/latest/7-aarch64-floating-point-and-neon/73-aarch64-neon-instruction-format</a>
</li>

<li>ARM SIMD instructions<br />
<a href="https://developer.arm.com/documentation/dht0002/a/Introducing-NEON/What-is-SIMD-/ARM-SIMD-instructions">https://developer.arm.com/documentation/dht0002/a/Introducing-NEON/What-is-SIMD-/ARM-SIMD-instructions</a>
</li>

<li>Learn the architecture - Migrate Neon to SVE Version 1.0<br />
<a href="https://developer.arm.com/documentation/102131/0100/?lang=en">https://developer.arm.com/documentation/102131/0100/?lang=en</a>
</li>

<li>1.2.2. Comparison between NEON technology and other SIMD solutions<br />
<a href="https://developer.arm.com/documentation/den0018/a/Introduction/Comparison-between-ARM-NEON-technology-and-other-implementations/Comparison-between-NEON-technology-and-other-SIMD-solutions?lang=en">https://developer.arm.com/documentation/den0018/a/Introduction/Comparison-between-ARM-NEON-technology-and-other-implementations/Comparison-between-NEON-technology-and-other-SIMD-solutions?lang=en</a>
</li>

<li>NEON Programmer’s Guide<br />
<a href="https://documentation-service.arm.com/static/63299276e68c6809a6b41308">https://documentation-service.arm.com/static/63299276e68c6809a6b41308</a>
</li>

<li>Brain Floating Point – nový formát uložení čísel pro strojové učení a chytrá čidla<br />
<a href="https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/">https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/</a>
</li>

<li>Other Built-in Functions Provided by GCC<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html">https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html</a>
</li>

<li>GCC: 6.60 Built-in Functions Specific to Particular Target Machines<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Target-Builtins.html#Target-Builtins">https://gcc.gnu.org/onlinedocs/gcc/Target-Builtins.html#Target-Builtins</a>
</li>

<li>Advanced Vector Extensions<br />
<a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions">https://en.wikipedia.org/wiki/Advanced_Vector_Extensions</a>
</li>

<li>Top 10 Craziest Assembly Language Instructions<br />
<a href="https://www.youtube.com/watch?v=Wz_xJPN7lAY">https://www.youtube.com/watch?v=Wz_xJPN7lAY</a>
</li>

<li>Intel x86: let's take a look at one of the most complex instruction set!<br />
<a href="https://www.youtube.com/watch?v=KBLy23B38-c">https://www.youtube.com/watch?v=KBLy23B38-c</a>
</li>

<li>x64 Assembly Tutorial 58: Intro to AVX<br />
<a href="https://www.youtube.com/watch?v=yAvuHd8cBJY">https://www.youtube.com/watch?v=yAvuHd8cBJY</a>
</li>

<li>AVX512 (1 of 3): Introduction and Overview<br />
<a href="https://www.youtube.com/watch?v=D-mM6X5xnTY">https://www.youtube.com/watch?v=D-mM6X5xnTY</a>
</li>

<li>AVX512 (2 of 3): Programming AVX512 in 3 Different Ways<br />
<a href="https://www.youtube.com/watch?v=I3efQKLgsjM">https://www.youtube.com/watch?v=I3efQKLgsjM</a>
</li>

<li>AVX512 (3 of 3): Deep Dive into AVX512 Mechanisms<br />
<a href="https://www.youtube.com/watch?v=543a1b-cPmU">https://www.youtube.com/watch?v=543a1b-cPmU</a>
</li>

<li>AVX-512<br />
<a href="https://en.wikipedia.org/wiki/AVX-512">https://en.wikipedia.org/wiki/AVX-512</a>
</li>

<li>AVX-512<br />
<a href="https://iq.opengenus.org/avx512/">https://iq.opengenus.org/avx512/</a>
</li>

<li>SIMD Algorithms Youtube course<br />
<a href="https://denisyaroshevskiy.github.io/presentations/">https://denisyaroshevskiy.github.io/presentations/</a>
</li>

<li>Compiler explorer<br />
<a href="https://godbolt.org/">https://godbolt.org/</a>
</li>

<li>Restricting pointers<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Restricted-Pointers.html">https://gcc.gnu.org/onlinedocs/gcc/Restricted-Pointers.html</a>
</li>

<li>Does the restrict keyword provide significant benefits in gcc/g++<br />
<a href="https://stackoverflow.com/questions/1965487/does-the-restrict-keyword-provide-significant-benefits-in-gcc-g">https://stackoverflow.com/questions/1965487/does-the-restrict-keyword-provide-significant-benefits-in-gcc-g</a>
</li>

<li>Demystifying The Restrict Keyword<br />
<a href="https://cellperformance.beyond3d.com/articles/2006/05/demystifying-the-restrict-keyword.html">https://cellperformance.beyond3d.com/articles/2006/05/demystifying-the-restrict-keyword.html</a>
</li>

<li>Basics of Vectorization for Fortran Applications<br />
<a href="https://inria.hal.science/hal-01688488/document">https://inria.hal.science/hal-01688488/document</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

