<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Rozšíření instrukční sady procesorových jader s otevřenou architekturou RISC-V</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Rozšíření instrukční sady procesorových jader s otevřenou architekturou RISC-V</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části článku o otevřené architektuře RISCových jader RISC-V nejprve dokončíme popis základní instrukční sady nazvané RV32I a posléze se zaměříme na některá důležitá rozšíření této instrukční sady. Bude se jednat například o instrukce pro násobení a dělení a samozřejmě i o instrukce matematického koprocesoru.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Doplnění k&nbsp;předchozímu článku: absence stavového registru</a></p>
<p><a href="#k02">2. Instrukce pro čtení stavů čítačů, časovačů a hodin reálného času</a></p>
<p><a href="#k03">3. Instrukce <strong>FENCE</strong> a <strong>FENCE.I</strong></a></p>
<p><a href="#k04">4. Implementace <strong>syscall</strong> a podpora pro ladění kódu</a></p>
<p><a href="#k05">5. &bdquo;M&ldquo; &ndash; rozšíření instrukční sady o násobení a dělení</a></p>
<p><a href="#k06">6. Násobička</a></p>
<p><a href="#k07">7. Dělička</a></p>
<p><a href="#k08">8. Operace s&nbsp;hodnotami s&nbsp;plovoucí řádovou čárkou</a></p>
<p><a href="#k09">9. Nové registry použité v&nbsp;matematickém koprocesoru</a></p>
<p><a href="#k10">10. Instrukce pro zpracování hodnot s&nbsp;plovoucí řádovou čárkou</a></p>
<p><a href="#k11">11. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Doplnění k&nbsp;předchozímu článku: absence stavového registru</h2>

<p><i>&bdquo;This is an example of what is the most common misapprehension that
I encounter, i.e., analyzing implementations while THINKing of really simple,
non-pipelined designs (like the early 8-bit CPUs). Many features that work fine
in such designs are famous for causing great pain in more aggressive designs;
current CPUs do *not* work that way.&ldquo;<br />
John R. Mashey</i></p>

<p>Před popisem nových instrukcí, které je možné nalézt jak v&nbsp;základní
instrukční sadě <i>RV32I</i>, tak i v&nbsp;různých rozšířeních této instrukční
sady, se na chvíli vrátíme k&nbsp;jedné poměrně důležité vlastnosti, kterou
procesorová jádra <i>RISC-V</i> zdědila od architektury <i>MIPS</i> a nepřímo i
od dnes poněkud neprávem opomíjené architektury <i>AMD Am29000</i>. Všechny tři
zmíněné mikroprocesorové architektury totiž nepoužívají stavový registr a tím
pádem ani stavové bity. Naproti tomu většina architektur CISC a mnohé další
architektury RISC stavový registr (a příznaky <strong>Z</strong>ero,
<strong>C</strong>arry, <strong>O</strong>verflow popř.&nbsp;i
<strong>S</strong>ignum a <strong>P</strong>arity) používají, a to jak pro
provádění některých aritmetických operací (víceslovní aritmetika), tak i pro
bitové posuny a zejména pro podmíněné skoky. Pokud je například nutné provést
podmíněný skok za předpokladu, že se obsahy dvou registrů r<sub>0</sub> a
r<sub>1</sub> rovnají, povede to k&nbsp;následující sekvenci instrukcí
(mnemonické kódy se samozřejmě budou na různých architekturách odlišovat,
základní myšlenka však zůstává zachována):</p>

<pre>
START:
        <strong>cmp</strong> r0, r1    <i>; výpočet rozdílu bez uložení výsledků, pouze nastavení příznaků</i>
                      <i>; Carry, Overflow, Signum (Negative) a Zero</i>
        <strong>jz</strong>  EQUALS    <i>; provedení skoku za předpokladu, že výsledek byl nulový</i>
        ...
        ...
        ...
EQUALS: ...           <i>; cíl podmíněného skoku</i>
</pre>

<p>Podobně je možné provést podmíněný skok, pokud je obsah jednoho registru
menší či naopak větší, než obsah registru druhého:</p>

<pre>
START:
        <strong>cmp</strong> r0, r1    <i>; výpočet rozdílu bez uložení výsledků, pouze nastavení příznaků</i>
        <strong>jgt</strong>  GT       <i>; provedení skoku za předpokladu, že r0 &gt; r1 (či naopak, podle použité konvence)</i>
        <strong>jlt</strong>  LE       <i>; provedení skoku za předpokladu, že r0 &lt; r1 (či naopak, podle použité konvence)</i>
EQ:                   <i>; zde již víme, že oba registry obsahují stejnou hodnotu</i>
        ...
        ...
        ...
GT: ....              <i>; cíl prvního podmíněného skoku</i>
        ...
        ...
        ...
LE: ....              <i>; cíl druhého podmíněného skoku</i>
</pre>

<p>U architektur <i>RISC-V</i>, <i>MIPS</i> a <i>AMD Am29000</i> se naproti
tomu žádný příznakový registr nepoužívá. Namísto toho jsou instrukce
podmíněných skoků rozšířeny takovým způsobem, že se před provedením skoku
porovnají obsahy dvou registrů a skok se provede na základě výsledku tohoto
porovnání. Konkrétně u <i>RISC-V</i> jsou možné následující kombinace:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Význam</th></tr>
<tr><td>1</td><td>BEQ </td><td>porovnání dvou registrů a skok při splnění podmínky &bdquo;rovno&ldquo;</td></tr>
<tr><td>2</td><td>BNE </td><td>porovnání dvou registrů a skok při splnění podmínky &bdquo;nerovno&ldquo;</td></tr>
<tr><td>3</td><td>BLT </td><td>porovnání dvou registrů a skok při splnění podmínky &bdquo;menší než&ldquo;</td></tr>
<tr><td>4</td><td>BGE </td><td>porovnání dvou registrů a skok při splnění podmínky &bdquo;větší nebo rovno&ldquo;</td></tr>
<tr><td>5</td><td>BLTU</td><td>porovnání dvou registrů a skok při splnění podmínky &bdquo;menší než&ldquo;</td></tr>
<tr><td>6</td><td>BGEU</td><td>porovnání dvou registrů a skok při splnění podmínky &bdquo;větší nebo rovno&ldquo;</td></tr>
</table>

<p>Navíc tato architektura obsahuje další dvě instrukce, které nastavují obsah
vybraného (cílového) registru na hodnotu 0 či 1 na základě výsledku porovnání
dvou zdrojových registrů:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Význam</th></tr>
<tr><td>1</td><td>SLT </td><td>porovnání registrů na operaci &lt; (se znaménkem), výsledek je 0 nebo 1</td></tr>
<tr><td>2</td><td>SLTU</td><td>porovnání registrů na operaci &lt; (bez znaménka), výsledek je 0 nebo 1</td></tr>
</table>

<p>K&nbsp;čemu je možné tyto instrukce využít? Dobrým příkladem je implementace
víceslovní aritmetiky, u níž se jinak skutečně dá s&nbsp;výhodou použít příznak
<strong>C</strong>arry (minimálně při ruční optimalizaci na úrovni assembleru).
Při absenci příznaku přetečení může kód pro přičtení dvojice operandů (každý má
dvě slova) vypadat takto:</p>

<pre>
<i>; operace typu z = x + y</i>
<strong>add</strong>   z_low, x_low, y_low     <i>; přičtení spodních slov</i>
<strong>sltu</strong>  tmp,   z_low, y_low     <i>; tmp je buď 1 nebo 0:</i>
                              <i>; když z_low &lt; y_low, tmp=1 jinak 0</i>
<strong>add</strong>   z_high, x_high, y_high  <i>; přičtení horních slov (na out-of-order jádře se provádí paralelně)</i>
<strong>add</strong>   z_high, z_high, tmp     <i>; přičtení 1 v případě přetečení</i>
</pre>

<p>Tento kód sice vypadá poměrně komplikovaně (určitě je minimálně delší než
pouhé ADD + ADDC či CLC + ADDC + ADDC), ovšem absence příznakových bitů přináší
mnohá zjednodušení a zrychlení procesoru:</p>

<ol>

<li>Pro klasická in-order jádra je jasné, že každá operace má jen jediný
výsledek a tedy případný &bdquo;RISCový&ldquo; bypass je ještě poměrně
jednoduchý (není zapotřebí do bypassu přidávat stavový registr a už vůbec ne
kontrolovat, jestli má být do bypassu vůbec zahrnut).</li>

<li>Pro superskalární jádra je rozdíl ještě více evidentní, počet kolizí se
zmenší (viz zmíněná dvojice ADD + ADDC, která na sobě závisí právě kvůli
nutnosti &bdquo;probublání&ldquo; příznaku přes nejvyšší bit). Navíc musí CPU
rozhodnout, zda vůbec může paralelně spustit dvě ALU operace, když může nastat
kolize při zápisu do stavových bitů.</li>

<li>Lze použít jen dvouvstupovou ALU, což přináší (dnes již nepatrné)
zjednodušení.</li>

<li>Pro out-of-order jádra by se v&nbsp;případě použití příznakových bitů
muselo provádět jak přejmenování registrů (register renaming), tak i
přejmenování příznaků, což dále celé jádro komplikuje.</li>

<li>Reakce na přerušení je obecně rychlejší, neboť není nutné na začátku a
konci přerušení příznaky nikam ukládat, nastavovat a posléze obnovovat.</li>

</ol>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instrukce pro čtení stavů čítačů, časovačů a hodin reálného času</h2>

<p>Po malé odbočce k&nbsp;tématu, jemuž jsme se více věnovali v&nbsp;předchozím
článku, se nyní vraťme k&nbsp;popisu těch instrukcí ze sady <i>RV32I</i>, které
jsme si doposud podrobněji nepopsali. Následující šestice instrukcí slouží
k&nbsp;přečtení čítačů, časovačů a taktéž hodin reálného času:</p>

<table>
<tr><th>#</th><th>Instrukce </th><th>Stručný popis</th></tr>
<tr><td>1</td><td>RDCYCLE   </td><td>do určeného registru vloží spodních 32 bitů hodnoty počtu hodinových cyklů</td></tr>
<tr><td>2</td><td>RDCYCLEH  </td><td>do určeného registru vloží horních 32 bitů hodnoty počtu hodinových cyklů</td></tr>
<tr><td>3</td><td>RDTIME    </td><td>do určeného registru vloží spodních 32 bitů hodin reálného času</td></tr>
<tr><td>4</td><td>RDTIMEH   </td><td>do určeného registru vloží horních 32 bitů hodin reálného času</td></tr>
<tr><td>5</td><td>RDINSTRET </td><td>do určeného registru vloží spodních 32 bitů čítače instrukcí</td></tr>
<tr><td>6</td><td>RDINSTRETH</td><td>do určeného registru vloží horních 32 bitů čítače instrukcí</td></tr>
</table>

<p>Zajímavé je, že tyto instrukce jsou pro implementaci jádra <i>RISC-V</i>
vlastně povinné, což vychází z&nbsp;toho, že toto procesorové jádro je
mj.&nbsp;určeno i k&nbsp;výzkumu nových způsobů implementace procesorů i pro
výzkum možností překladačů. V&nbsp;obou případech je výhodné mít možnost si
kdykoli přečíst počet cyklů trvání nějaké sekvence kódu či počet skutečně
provedených instrukcí. U hodin reálného času je stanovena minimální přesnost
100 ns (10 MHz), což je důležitá informace i pro úpravu plánovačů operačních
systémů apod.  Bitová šířka čítačů i hodin reálného času je stanovena na 64
bitů, takže při použití běžných frekvencí vlastně nikdy nedojde
k&nbsp;přetečení (žádný problém roku 2038 atd.).</p>

<p>Jak vypadá doporučená sekvence načtení obsahu jednoho 64 bitového čítače (či
hodin reálného času) do libovolné dvojice registrů <strong>rx</strong> a
<strong>ry</strong>?</p>

<pre>
AGAIN:
      <strong>rdcycleh</strong>  x3
      <strong>rdcycle</strong>   x2
      <strong>rdcycleh</strong>  x4             <i>; pokud x3==x4, nedošlo k předečení rdcycle</i>
      <strong>bne</strong>       x3, x4, AGAIN  <i>; při x3!=x4 došlo k pretečení, čteme znovu</i>
</pre>

<p>Podmíněný skok v&nbsp;předchozím kódu zajišťuje správnou funkci (a malé
zdržení) v&nbsp;tom nepravděpodobném okamžiku, kdy hodnota čítače přejde
z&nbsp; 0x???????x_ffffffff na 0x???????(x+1)_00000000. Při použití 64bitové
instrukční sady <i>RV64I</i> je situace ještě jednodušší, neboť se namísto
šesti instrukcí použije pouze trojice instrukcí, z&nbsp;nichž každá načte celou
64bitovou hodnotu čítače či hodin, takže se zde obejdeme bez skoku.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instrukce <strong>FENCE</strong> a <strong>FENCE.I</strong></h2>

<p>V&nbsp;případě, že na jednom čipu bude implementováno větší množství jader
<i>RISC-V</i>, může při jejich souběžné práci docházet ke kolizím při přístupu
do paměti či k&nbsp;periferním zařízením. Základní instrukční sada sice
neobsahuje žádné instrukce určené pro synchronizaci ani pro atomické operace
typu read-modify-write, ovšem základní mechanismus kooperace mezi vlákny je zde
předepsán. Slouží k&nbsp;tomu instrukce <strong>FENCE</strong> a
<strong>FENCE.I</strong>:</p>

<table>
<tr><th>#</th><th>Instrukce </th><th>Stručný popis</th></tr>
<tr><td>1</td><td>FENCE  </td><td>garance pořadí operací přístupu do paměti či k periferním zařízením</td></tr>
<tr><td>2</td><td>FENCE.I</td><td>synchronizace instrukcí zápisu do paměti či I/O</td></tr>
</table>

<p>Instrukci <strong>FENCE</strong> je možné použít v&nbsp;případě, že je
zapotřebí garantovat pořadí, ve kterém proběhnou specifikované operace
s&nbsp;pamětí (čtení či zápis) či s&nbsp;periferními zařízeními (taktéž čtení
či zápis). Pokud je instrukce <strong>FENCE</strong> použita, musí procesor
zajistit, aby ostatní vlákna nejdříve &bdquo;uviděla&ldquo; provedení instrukcí
před <strong>FENCE</strong> a teprve poté provedení instrukcí za
<strong>FENCE</strong>. Ve dvou bitových polích, které jsou součástí
instrukčního slova, lze specifikovat, o které operace se má jednat:</p>

<ol>
<li>Čtení z&nbsp;RAM</li>
<li>Zápis do RAM</li>
<li>Čtení z&nbsp;I/O prostoru</li>
<li>Zápis do I/O prostoru</li>
</ol>

<p>Naproti tomu instrukce <strong>FENCE.I</strong> slouží k&nbsp;vynucení
provedení operace zápisu do RAM či do I/O (periferního zařízení). Pokud se
totiž provádí více zápisů, nemusí být jejich účinek hned viditelný, a to ani ve
stejném vlákně. <strong>FENCE.I</strong> je tedy podobná souborové operaci
<i>flush()</i> a skutečně se může jako flush cache implementovat (nebo je možné
použít bypass v&nbsp;rámci jednoho vlákna atd.).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Implementace <strong>syscall</strong> a podpora pro ladění kódu</h2>

<p>Ze základních čtyřiceti sedmi instrukcí ze sady <i>RV32I</i> nám zbývá si
popsat jen dvě instrukce, které se jmenují <strong>SCALL</strong> a
<strong>SBREAK</strong>. První z&nbsp;těchto instrukcí slouží k&nbsp;zavolání
vybrané funkce operačního systému, přičemž způsob předávání parametrů a vracení
hodnot či chybových kódů z&nbsp;jádra operačního systému není
v&nbsp;dokumentaci mikroprocesorů <i>RISC-V</i> specifikováno &ndash; vše
záleží na ABI operačního systému (s&nbsp;velkou pravděpodobností se budou
parametry předávat přes pracovní registry, ostatně stejným způsobem, jako je
tomu v&nbsp;Linuxu u x86, x86_64 i u ARMu). Poslední instrukce se jmenuje
<strong>SBREAK</strong>. Tato instrukce slouží k&nbsp;zastavení běhu programu a
vrácení řízení (daného vlákna) do debuggeru; jedná se tedy o instrukci určenou
především pro ladění (podobně jako například <strong>BRK</strong>
v&nbsp;osmibitových mikroprocesorech <i>MOS 6502</i>):</p>

<table>
<tr><th>#</th><th>Instrukce </th><th>Stručný popis</th></tr>
<tr><td>1</td><td>SCALL </td><td>zavolání nějaké funkce jádra operačního systému</td></tr>
<tr><td>2</td><td>SBREAK</td><td>přerušení běhu vlákna a vrácení řízení debuggeru</td></tr>
</table>



<p><a name="k05"></a></p>
<h2 id="k05">5. &bdquo;M&ldquo; &ndash; rozšíření instrukční sady o násobení a dělení</h2>

<p>V&nbsp;mnoha typech zařízení je možné využít mikroprocesor obsahující pouze
aritmeticko-logickou jednotku určenou pro základní práci s&nbsp;32bitovými či
64bitovými operandy (opět si na tomto místě dovolím připomenout koncept Minion
Cores, tj.&nbsp;jednoduchých 32bitových modulů RISC-V určených pro programové
ovládání GPIO). Tato aritmeticko-logická jednotka dokonce ani nemusí obsahovat
násobičku a děličku, což jsou relativně složité obvody, které navíc dobře
nezapadají do konceptu jednoduché a rychlé architektury RISC. Ovšem pro některé
účely, například pro obecně využitelné servery či desktopy, by absence
hardwarové násobičky a děličky mohla znamenat poměrně razantní snížení
výpočetního výkonu u těchto operací, takže tvůrci <i>RISC-V</i> navrhli i
rozšíření základní instrukční sady nazvané jednoduše &bdquo;M&ldquo; (od slova
Multiply). Pokud procesor toto rozšíření podporuje, budou mít programátoři
k&nbsp;dispozici několik dalších instrukcí, které pro zdrojové operandy i
výsledek používají běžné pracovní registry (tj.&nbsp;ne nějaká speciální
paměťová místa, jak je tomu například u klasického <i>MIPS</i>):</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Násobička</h2>

<p>Násobička provádí následující instrukce:</p>

<table>
<tr><th>#</th><th>Instrukce </th><th>Stručný popis</th></tr>
<tr><td>1</td><td>MUL   </td><td>násobení 32&times;32 bitů, spodních 32bitů se uloží do dest</td></tr>
<tr><td>2</td><td>MULH  </td><td>násobení 32&times;32 bitů signed &times; signed, horních 32bitů se uloží do dest</td></tr>
<tr><td>3</td><td>MULHU </td><td>násobení 32&times;32 bitů unsigned &times; unsigned, horních 32bitů se uloží do dest</td></tr>
<tr><td>4</td><td>MULHSU</td><td>násobení 32&times;32 bitů signed &times; unsigned, horních 32bitů se uloží do dest</td></tr>
</table>

<p>Povšimněte si, že neexistuje žádná instrukce, která by přímo vrátila
64bitový výsledek. Pokud je zapotřebí takovou operaci použít (většinou to
potřeba není), doporučuje se násobení provádět v&nbsp;pořadí
<strong>MULH+MUL</strong>, <strong>MULHU+MUL</strong> či
<strong>MULHSU+MUL</strong>. V&nbsp;takovém případě by mikroarchitektura mohla
provést jen jedinou operaci násobení, ale ve skutečnosti to není ve specifikaci
vyžadováno a ani zaručeno.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Dělička</h2>

<p>Dělička provádí následující instrukce:</p>

<table>
<tr><th>#</th><th>Instrukce </th><th>Stručný popis</th></tr>
<tr><td>1</td><td>DIV </td><td>dělení 32/32bitů, výsledek má taktéž 32bitů</td></tr>
<tr><td>2</td><td>DIVU</td><td>dtto, ovšem dělení bez znaménka </td></tr>
<tr><td>3</td><td>REM </td><td>zbytek po dělení 32/32bitů, výsledek je 32bitový</td></tr>
<tr><td>4</td><td>REMU</td><td>dtto, ovšem pro výpočet zbytku bez znaménka</td></tr>
</table>

<p>V&nbsp;případě, že se má provést jak dělení, tak i výpočet zbytku po dělení,
doporučuje se tyto operace provádět v&nbsp;pořadí <strong>DIV+REM</strong> či
<strong>DIVU+REMU</strong>. Mikroarchitektura by v&nbsp;tomto případě opět
mohla provést dělení jen jednou a pouze uložit výsledky do dvou pracovních
registrů.</p>

<p>U mnoha mikroprocesorů je možné zachytit případ dělení nulou (známé
&bdquo;Divide by Zero&ldquo;) či přetečení při dělení (tj.&nbsp;operaci
-2<sup>31</sup>/-1 s&nbsp;výsledkem 2<sup>31</sup>, který se do 32bitového
slova se znaménkem již nevejde). Tyto operace mohou vést k&nbsp;vyvolání
přerušení, ovšem u architektury <i>RISC-V</i> tomu tak není. Zde jsou
&bdquo;jen&ldquo; přesně specifikovány výsledky těchto operací s&nbsp;tím, že
postačuje pouze použít podmíněný skok pro zjištění, jak operace dopadla (pokud
je to ovšem nutné, opět někdy není):</p>

<table>
<tr><th>Operace</th><th>Dělenec</th><th>Dělitel</th><th>DIVU</th><th>REMU</th><th>DIV</th><th>REM</th></tr>
<tr><td>Dělení nulou</td><td>x</td><td>0</td><td>2<sup>32</sup>-1</td><td>x</td><td>-1</td><td>x</td></tr>
<tr><td>Přetečení   </td><td>-2<sup>31</sup></td><td>-1</td><td>nenastane</td><td>nenastane</td><td>-2<sup>31</sup></td><td>0</td></tr>
</table>



<p><a name="k08"></a></p>
<h2 id="k08">8. Operace s&nbsp;hodnotami s&nbsp;plovoucí řádovou čárkou</h2>

<p>Další rozšíření původní instrukční sady mikroprocesorových jader
<i>RISC-V</i> pochopitelně souvisí s&nbsp;problematikou provádění operací
s&nbsp;hodnotami s&nbsp;plovoucí řádovou čárkou. Ve skutečnosti existují
dokonce dvě rozšíření původní ISA. První rozšíření se jmenuje &bdquo;F&ldquo;,
protože specifikuje instrukce s&nbsp;hodnotami typu <i>single/float</i>,
tj.&nbsp;s&nbsp;čísly s&nbsp;jednoduchou přesností podle normy IEEE 754-2008
(jedná se o zpřesnění původní slavné normy IEEE 754). Druhé rozšíření se podle
očekávání jmenuje &bdquo;D&ldquo;, protože předepisuje operace s&nbsp;hodnotami
typu <i>double</i>, tj.&nbsp;s&nbsp;čísly s&nbsp;přesností dvojitou. Proč však
došlo k&nbsp;rozdělení funkcí matematického koprocesoru na dvě části? Existují
totiž aplikace, kde postačuje pracovat s&nbsp;typem <i>single/float</i>, takže
by v&nbsp;tomto případě podpora dvojnásobné přesnosti pouze přinášela
komplikace v&nbsp;realizaci mikroprocesoru (ostatně i tak jsou obecně operace
s&nbsp;plovoucí řádovou čárkou pomalejší, než celočíselné operace RISCové
aritmeticko-logické jednotky). Dokonce existují i aplikace vyžadující malý a
rychlý mikroprocesor s&nbsp;nativní podporou typu <i>half-float</i>, což jsou
16bitová čísla se znaménkem, mantisou i exponentem (zavedeny byly například
v&nbsp;Cg).</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Nové registry použité v&nbsp;matematickém koprocesoru</h2>

<p>Pro rozšíření &bdquo;F&ldquo; se používá nová sada pracovních registrů. Tyto
registry jsou pojmenovány <strong>f0</strong> až <strong>f31</strong> a každý
z&nbsp;těchto registrů má šířku 32 bitů. Navíc se u většiny operací používá i
stavový a řídicí registr nazvaný <strong>fcrs</strong>. K&nbsp;dispozici jsou
pseudoinstrukce <strong>FRCSR</strong> a <strong>FSCSR</strong> sloužící pro
přenos obsahu stavového a řídicího registru do libovolného pracovního registru
celočíselné části mikroprocesoru (tedy samozřejmě kromě nulového registru).
Registr <strong>fcsr</strong> obsahuje následující řídicí a stavové bity:</p>

<table>
<tr><th>Index bitu(ů)</th><th>Jméno</th><th>Význam</th></tr>
<tr><td>0</td><td>NX</td><td>inexact, nepřesný výsledek</td></tr>
<tr><td>1</td><td>UF</td><td>podtečení</td></tr>
<tr><td>2</td><td>OF</td><td>přetečení</td></tr>
<tr><td>3</td><td>DZ</td><td>dělení nulou</td></tr>
<tr><td>4</td><td>NV</td><td>invalid, neplatná operace</td></tr>
<tr><td>5-7</td><td>frm</td><td>vybraný zaokrouhlovací režim (5 možností)</td></tr>
</table>

<p>Podobně jako tomu bylo u celočíselné děličky, i u FP operací nedochází nikdy
k&nbsp;výjimce, a to ani při dělení nulou, ani při jiných operacích (dělení
dvou NaN, 0/0 apod.). Je tedy nutné sledovat stavové bity a podle jejich
aktuálního nastavení provádět příslušné testy.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Instrukce pro zpracování hodnot s&nbsp;plovoucí řádovou čárkou</h2>

<p>Jen ve stručnosti si popišme instrukce, které jsou předepsány
v&nbsp;rozšíření instrukční sady &bdquo;F&ldquo;, tj.&nbsp;instrukce pro
zpracování numerických hodnot typu <i>single/float</i>:</p>

<table>
<tr><th> #</th><th>Instrukce</th><th>Význam</th></tr>
<tr><td> 1</td><td>FLW</td><td>načtení FP hodnoty z&nbsp;paměti (adresa rs+offset)</td></tr>
<tr><td> 2</td><td>FSW</td><td>uložení FP hodnoty do paměti (adresa rs+offset)</td></tr>
<tr><td> 3</td><td>FADD.S</td><td>součet dvou FP hodnot (tříadresový kód)</td></tr>
<tr><td> 4</td><td>FSUB.S</td><td>rozdíl dvou FP hodnot</td></tr>
<tr><td> 5</td><td>FMUL.S</td><td>součin dvou FP hodnot</td></tr>
<tr><td> 6</td><td>FDIV.S</td><td>podíl dvou FP hodnot</td></tr>
<tr><td> 7</td><td>FMIN.S</td><td>vrací menší z&nbsp;obou FP hodnot</td></tr>
<tr><td> 8</td><td>FMAX.S</td><td>vrací větší z&nbsp;obou FP hodnot</td></tr>
<tr><td> 9</td><td>FSQRT.S</td><td>druhá odmocnina (použity jsou jen dva registry)</td></tr>
<tr><td>10</td><td>FMADD.S</td><td>rs1&times;rs2+rs3 (multiply-add, čtyřadresový kód!)</td></tr>
<tr><td>11</td><td>FMSUB.S</td><td>rs1&times;rs2-rs3</td></tr>
<tr><td>12</td><td>FNMADD.S</td><td>-(rs1&times;rs2+rs3)</td></tr>
<tr><td>13</td><td>FNMSUB.S</td><td>-(rs1&times;rs2-rs3)</td></tr>
<tr><td>14</td><td>FCVT.W.S</td><td>převod FP na integer</td></tr>
<tr><td>15</td><td>FCVT.S.W</td><td>převod integer na FP</td></tr>
<tr><td>16</td><td>FCVT.WU.S</td><td>převod FP na unsigned integer</td></tr>
<tr><td>17</td><td>FCVT.S.WU</td><td>převod unsigned integer na FP</td></tr>
<tr><td>18</td><td>FMV.X.S</td><td>pouze přesun mezi integer registrem a FP registrem (nikoli konverze)</td></tr>
<tr><td>19</td><td>FMV.S.X</td><td>pouze přesun mezi FP registrem a integer registrem (nikoli konverze)</td></tr>
<tr><td>20</td><td>FLT.S</td><td>porovnání dvou FP hodnot, zápis 0 či 1 do integer registru</td></tr>
<tr><td>21</td><td>FLE.S</td><td>porovnání dvou FP hodnot, zápis 0 či 1 do integer registru</td></tr>
<tr><td>22</td><td>FEQ.S</td><td>porovnání dvou FP hodnot, zápis 0 či 1 do integer registru</td></tr>
<tr><td>21</td><td>FCLASS</td><td>zjistí &bdquo;třídu&ldquo; FP hodnoty a nastaví deset bitů podle následující tabulky</td></tr>
</table>

<p>Výsledek instrukce <strong>FCLASS</strong> zapsaný do vybraného integer registru:</p>

<table>
<tr><th>Index bitu</th><th>Význam</th></tr>
<tr><td>0</td><td>záporné nekonečno</td></tr>
<tr><td>1</td><td>záporné číslo (normalizovaná hodnota)</td></tr>
<tr><td>2</td><td>záporné číslo (nelze normalizovat)</td></tr>
<tr><td>3</td><td>záporná nula</td></tr>
<tr><td>4</td><td>kladná nula</td></tr>
<tr><td>5</td><td>kladné číslo (nelze normalizovat)</td></tr>
<tr><td>6</td><td>kladné číslo (normalizovaná hodnota)</td></tr>
<tr><td>7</td><td>kladné nekonečno</td></tr>
<tr><td>8</td><td>NaN (signaling)</td></tr>
<tr><td>9</td><td>NaN (quiet, lze je předat do mnoha instrukcí)</td></tr>
</table>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odkazy na Internetu</h2>

<ol>

<li>Carry bits, The Architect's Trap<br />
<a href="http://yarchive.net/comp/carry_bit.html">http://yarchive.net/comp/carry_bit.html</a>
</li>

<li>Microprocessor Design/ALU Flags<br />
<a href="https://en.wikibooks.org/wiki/Microprocessor_Design/ALU_Flags">https://en.wikibooks.org/wiki/Microprocessor_Design/ALU_Flags</a>
</li>

<li>Flags register in an out-of-order processor<br />
<a href="http://cs.stackexchange.com/questions/42095/flags-register-in-an-out-of-order-processor">http://cs.stackexchange.com/questions/42095/flags-register-in-an-out-of-order-processor</a>
</li>

<li>AMD Am29000<br />
<a href="https://en.wikipedia.org/wiki/AMD_Am29000">https://en.wikipedia.org/wiki/AMD_Am29000</a>
</li>

<li>Status register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>AMD Am29000 microprocessor family<br />
<a href="http://www.cpu-world.com/CPUs/29000/">http://www.cpu-world.com/CPUs/29000/</a>
</li>

<li>AMD 29k (Streamlined Instruction Processor) ID Guide<br />
<a href="http://www.cpushack.com/Am29k.html">http://www.cpushack.com/Am29k.html</a>
</li>

<li>AMD Am29000 (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/AMD_Am29000">http://en.wikipedia.org/wiki/AMD_Am29000</a>
</li>

<li>AMD K5 ("K5" / "5k86")<br />
<a href="http://www.pcguide.com/ref/cpu/fam/g5K5-c.html">http://www.pcguide.com/ref/cpu/fam/g5K5-c.html</a>
</li>

<li>Comparing four 32-bit soft processor cores<br />
<a href="http://www.eetimes.com/author.asp?section_id=14&doc_id=1286116">http://www.eetimes.com/author.asp?section_id=14&doc_id=1286116</a>
</li>

<li>RISC-V Instruction Set<br />
<a href="http://riscv.org/download.html#spec_compressed_isa">http://riscv.org/download.html#spec_compressed_isa</a>
</li>

<li>RISC-V Spike (ISA Simulator)<br />
<a href="http://riscv.org/download.html#isa-sim">http://riscv.org/download.html#isa-sim</a>
</li>

<li>RISC-V (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/RISC-V">https://en.wikipedia.org/wiki/RISC-V</a>
</li>

<li>David Patterson (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/David_Patterson_(computer_scientist)">https://en.wikipedia.org/wiki/David_Patterson_(computer_scientist)</a>
</li>

<li>OpenRISC (oficiální stránky projektu)<br />
<a href="http://openrisc.io/">http://openrisc.io/</a>
</li>

<li>OpenRISC architecture<br />
<a href="http://openrisc.io/architecture.html">http://openrisc.io/architecture.html</a>
</li>

<li>Emulátor OpenRISC CPU v JavaScriptu<br />
<a href="http://s-macke.github.io/jor1k/demos/main.html">http://s-macke.github.io/jor1k/demos/main.html</a>
</li>

<li>OpenRISC (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/OpenRISC">https://en.wikipedia.org/wiki/OpenRISC</a>
</li>

<li>OpenRISC - instrukce<br />
<a href="http://sourceware.org/cgen/gen-doc/openrisc-insn.html">http://sourceware.org/cgen/gen-doc/openrisc-insn.html</a>
</li>

<li>OpenRISC - slajdy z přednášky o projektu<br />
<a href="https://iis.ee.ethz.ch/~gmichi/asocd/lecturenotes/Lecture6.pdf">https://iis.ee.ethz.ch/~gmichi/asocd/lecturenotes/Lecture6.pdf</a>
</li>

<li>Maska mikroprocesoru RISC 1<br />
<a href="http://www.cs.berkeley.edu/~pattrsn/Arch/RISC1.jpg">http://www.cs.berkeley.edu/~pattrsn/Arch/RISC1.jpg</a>
</li>

<li>Maska mikroprocesoru RISC 2<br />
<a href="http://www.cs.berkeley.edu/~pattrsn/Arch/RISC2.jpg">http://www.cs.berkeley.edu/~pattrsn/Arch/RISC2.jpg</a>
</li>

<li>C.E. Sequin and D.A.Patterson: Design and Implementation of RISC I<br />
<a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/1982/CSD-82-106.pdf">http://www.eecs.berkeley.edu/Pubs/TechRpts/1982/CSD-82-106.pdf</a>
</li>

<li>Berkeley RISC<br />
<a href="http://en.wikipedia.org/wiki/Berkeley_RISC">http://en.wikipedia.org/wiki/Berkeley_RISC</a>
</li>

<li>Great moments in microprocessor history<br />
<a href="http://www.ibm.com/developerworks/library/pa-microhist.html">http://www.ibm.com/developerworks/library/pa-microhist.html</a>
</li>

<li>Microprogram-Based Processors<br />
<a href="http://research.microsoft.com/en-us/um/people/gbell/Computer_Structures_Principles_and_Examples/csp0167.htm">http://research.microsoft.com/en-us/um/people/gbell/Computer_Structures_Principles_and_Examples/csp0167.htm</a>
</li>

<li>Great Microprocessors of the Past and Present<br />
<a href="http://www.cpushack.com/CPU/cpu1.html">http://www.cpushack.com/CPU/cpu1.html</a>
</li>

<li>A Brief History of Microprogramming<br />
<a href="http://www.cs.clemson.edu/~mark/uprog.html">http://www.cs.clemson.edu/~mark/uprog.html</a>
</li>

<li>What is RISC?<br />
<a href="http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/whatis/">http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/whatis/</a>
</li>

<li>RISC vs. CISC<br />
<a href="http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/risccisc/">http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/risccisc/</a>
</li>

<li>RISC and CISC definitions:<br />
<a href="http://www.cpushack.com/CPU/cpuAppendA.html">http://www.cpushack.com/CPU/cpuAppendA.html</a>
</li>

<li>FPGA<br />
<a href="https://cs.wikipedia.org/wiki/Programovateln%C3%A9_hradlov%C3%A9_pole">https://cs.wikipedia.org/wiki/Programovateln%C3%A9_hradlov%C3%A9_pole</a>
</li>

<li>The Evolution of RISC<br />
<a href="http://www.ibm.com/developerworks/library/pa-microhist.html#sidebar1">http://www.ibm.com/developerworks/library/pa-microhist.html#sidebar1</a>
</li>

<li>SPARC Processor Family Photo<br />
<a href="http://thenetworkisthecomputer.com/site/?p=243">http://thenetworkisthecomputer.com/site/?p=243</a>
</li>

<li>SPARC: Decades of Continuous Technical Innovation<br />
<a href="http://blogs.oracle.com/ontherecord/entry/sparc_decades_of_continuous_technical">http://blogs.oracle.com/ontherecord/entry/sparc_decades_of_continuous_technical</a>
</li>

<li>The SPARC processors<br />
<a href="http://www.top500.org/2007_overview_recent_supercomputers/sparc_processors">http://www.top500.org/2007_overview_recent_supercomputers/sparc_processors</a>
</li>

<li>Reduced instruction set computing (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Reduced_instruction_set_computer">http://en.wikipedia.org/wiki/Reduced_instruction_set_computer</a>
</li>

<li>MIPS architecture (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/MIPS_architecture">http://en.wikipedia.org/wiki/MIPS_architecture</a>
</li>

<li>Very long instruction word (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Very_long_instruction_word">http://en.wikipedia.org/wiki/Very_long_instruction_word</a>
</li>

<li>Classic RISC pipeline (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Classic_RISC_pipeline">http://en.wikipedia.org/wiki/Classic_RISC_pipeline</a>
</li>

<li>R2000 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R2000_(microprocessor)">http://en.wikipedia.org/wiki/R2000_(microprocessor)</a>
</li>

<li>R3000 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R3000">http://en.wikipedia.org/wiki/R3000</a>
</li>

<li>R4400 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R4400">http://en.wikipedia.org/wiki/R4400</a>
</li>

<li>R8000 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R8000">http://en.wikipedia.org/wiki/R8000</a>
</li>

<li>R10000 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R10000">http://en.wikipedia.org/wiki/R10000</a>
</li>

<li>SPARC (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Sparc">http://en.wikipedia.org/wiki/Sparc</a>
</li>

<li>CPU design (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/CPU_design">http://en.wikipedia.org/wiki/CPU_design</a>
</li>

<li>Control unit (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Control_unit">http://en.wikipedia.org/wiki/Control_unit</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

