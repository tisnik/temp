<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Nejvýkonnější MCU aneb architektura mikrořadičů s jádry ARM Cortex-M7</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Nejvýkonnější MCU aneb architektura mikrořadičů s jádry ARM Cortex-M7</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Třetí článek o mikrořadičích s architekturou ARM je věnován nejvýkonnějším jádrům, které jsou v současnosti v této oblasti nabízena. Jedná se o jádra s názvem Cortex-M7. Čipy s těmito jádry se v mnoha ohledech odlišují od již popsaných čipů založených na Cortex-M0, Cortex-M0+ a dokonce i od minule popsaného jádra Cortex-M3.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Nejvýkonnější MCU aneb architektura mikrořadičů s&nbsp;jádry ARM Cortex-M7</a></p>
<p><a href="#k02">2. Interní struktura jader Cortex-M7</a></p>
<p><a href="#k03">3. Volitelné moduly, které může výrobce čipu použít</a></p>
<p><a href="#k04">4. Pipeline v&nbsp;jádru CPU</a></p>
<p><a href="#k05">5. Prediktor skoků</a></p>
<p><a href="#k06">6. Instrukční sada</a></p>
<p><a href="#k07">7. Aritmetické operace se saturací</a></p>
<p><a href="#k08">8. Instrukce pro násobení a dělení</a></p>
<p><a href="#k09">9. Skoky, podmíněné skoky a prefix <strong>IT</strong></a></p>
<p><a href="#k10">10. Rozeskoky s&nbsp;využitím instrukcí TBB a TBH</a></p>
<p><a href="#k11">11. Práce s&nbsp;čísly s&nbsp;plovoucí řádovou čárkou</a></p>
<p><a href="#k12">12. Instrukční sada FPU</a></p>
<p><a href="#k13">13. Porovnání dvou hodnot, porovnání s&nbsp;nulou</a></p>
<p><a href="#k14">14. Přesuny dat, načtení konstanty a konverzní instrukce</a></p>
<p><a href="#k15">15. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Nejvýkonnější MCU aneb architektura mikrořadičů s&nbsp;jádry ARM Cortex-M7</h2>

<p><a
href="http://www.root.cz/clanky/architektura-mikroradicu-s-jadry-arm-cortex-m0-a-arm-cortex-m0/">V&nbsp;prvním
článku</a> o procesorových jádrech s&nbsp;architekturou ARM, která jsou určena
pro použití v&nbsp;mikrořadičích, jsme se seznámili s&nbsp;nejmenšími a
současně i s&nbsp;nejméně výkonnými jádry. Tato jádra nesou označení buď
<i>Cortex-M0</i> (starší řada) nebo <i>Cortex-M0+</i> (řada novější, která se
interně od původní řady hned v&nbsp;několika ohledech odlišuje) a jejich
aplikační oblastí je náhrada některých výkonnějších osmibitových a
šestnáctibitových mikrořadičů (čipy ARM jsou samozřejmě plně 32bitové) i
použití v&nbsp;zařízeních napájených z&nbsp;akumulátorů popř.&nbsp;dobíjených
z&nbsp;malých solárních panelů. <a
href="http://www.root.cz/clanky/architektura-mikroradicu-s-jadry-arm-cortex-m3/">Minule</a>
byla naopak popsána poněkud výkonnější procesorová jádra <i>Cortex-M3</i>,
která se díky příznivým poměrům cena:energetické nároky:výpočetní výkon
používají v&nbsp;poměrně mnoha zařízeních. Typickým příkladem je <i>Arduino
Due</i> s&nbsp;čipem <i>Atmel SAM3X8E</i>, jenž je na <i>Cortexu-M3</i>
založen.</p>

<p>Společnost ARM však navrhla i mnohem výkonnější procesorová jádra určená do
těch aplikací, u nichž je důležitý jak výpočetní výkon, tak i rychlá reakce na
přerušení. Tato jádra nesou označení <i>Cortex-M7</i> a jsou založena na
architektuře <i>ARMv7E-M</i>, na rozdíl od čipů <i>Cortex-M0/Cortex-M0+</i>
s&nbsp;jednodušší architekturou <i>ARMv6-M</i> či <i>Cortex-M3</i>
s&nbsp;architekturou <i>ARMv7-M</i>. V&nbsp;praxi to pro vývojáře znamená, že
binární programy jsou dopředně přenositelné ve směru Cortex-M0 &rarr; Cortex-M3
&rarr; Cortex-M7, ovšem v&nbsp;opačném směru Cortex-M7 &rarr; Cortex-M3 &rarr;
Cortex-M0 pouze za splnění několika předpokladů (v&nbsp;programech se například
nesmí využívat instrukce matematického koprocesoru, instrukční prefix
<strong>IT</strong> při přenosu na Cortex-M0/Cortex-M0+ apod.). Pro lepší
ilustraci se opět (již naposledy :-) podívejme na tabulku obsahující ARMovská
jádra určená pro použití v&nbsp;mikrořadičích:</p>

<table>
<tr><th>#</th><th>Jádro     </th><th>Architektura ARM</th><th>Architektura CPU/MCU</th><th>MPU</th></tr>
<tr><td>1</td><td>Cortex-M0 </td><td>ARMv6-M</td><td>Von Neumann</td><td>ne</td></tr>
<tr><td>2</td><td>Cortex-M0+</td><td>ARMv6-M</td><td>Von Neumann</td><td>volitelná</td></tr>
<tr><td>3</td><td>Cortex-M1 </td><td>ARMv6-M</td><td>Von Neumann</td><td>ne</td></tr>
<tr><td>4</td><td>Cortex-M3 </td><td>ARMv7-M</td><td>Harvardská</td><td>volitelná</td></tr>
<tr><td>5</td><td>Cortex-M4 </td><td>ARMv7E-M</td><td>Harvardská</td><td>volitelná</td></tr>
<tr><td>6</td><td>Cortex-M7 </td><td>ARMv7E-M</td><td>Harvardská</td><td>volitelná</td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Interní struktura jader Cortex-M7</h2>

<p>Interní struktura mikroprocesorových jader <i>Cortex-M7</i> je
v&nbsp;porovnání s&nbsp;poměrně minimalistickými jádry <i>Cortex-M0/M0+/M3</i>
již poměrně komplikovaná, protože obsahuje větší množství modulů, z&nbsp;nichž
některé jsou volitelné. To v&nbsp;praxi znamená, že při konkrétním návrhu čipu
se výrobce rozhodne, zda daný modul použije či nikoli (FPU, ECC),
popř.&nbsp;kolik plochy čipu a energetických nároků &bdquo;obětuje&ldquo; pro
jeho implementaci (může se například měnit velikost datové a instrukční cache
atd.). Ústředním prvkem každého mikrořadiče je samozřejmě vlastní jádro
s&nbsp;architekturou <i>ARMv7-M</i> (toto jádro obsahuje násobičky i děličky).
K&nbsp;tomuto jádru jsou připojeny další moduly či sběrnice stručně popsané
v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Modul</th><th>Význam</th><th>Stručný popis</th></tr>
<tr><td> 1</td><td>NVIC</td><td>Nested Vectored Interrupt Controller</td><td>řídí přerušení s&nbsp;až z&nbsp;240 vstupy a 256 prioritami</td></tr>
<tr><td> 2</td><td>WIC</td><td>Wake-up Interrupt Controller</td><td>umožňuje řídit přerušení, když CPU spí (je ve stavu SLEEP)</td></tr>
<tr><td> 3</td><td>FPU</td><td>Floating Point Unit</td><td>matematický koprocesor</td></tr>
<tr><td> 4</td><td>I-cache</td><td>I-cache</td><td>cache pro instrukce (binární programový kód)</td></tr>
<tr><td> 5</td><td>D-cache</td><td>D-cache</td><td>cache pro data</td></tr>
<tr><td> 6</td><td>Instr.TCM</td><td>Tightly-Coupled Memory</td><td>rozhraní pro komunikaci s&nbsp;TCM (velikost TCM je konfigurovatelná)</td></tr>
<tr><td> 7</td><td>Data TCM</td><td>Tightly-Coupled Memory</td><td>rozhraní pro komunikaci s&nbsp;TCM (velikost TCM je konfigurovatelná)</td></tr>
<tr><td> 8</td><td>MPU</td><td>Memory Protection Unit</td><td>jednotka pro řízení přístupu do paměti (počet oblastí je konfigurovatelný)</td></tr>
<tr><td> 9</td><td>DWT</td><td>Data Watchpoint and Trace Unit</td><td>modul pro ladění a trasování</td></tr>
<tr><td>10</td><td>ECC</td><td>Error Correcting Code</td><td>ECC pro instrukční cache či volitelně pro TCM</td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Volitelné moduly, které může výrobce čipu použít</h2>

<p>Jak jsme si již řekli <a href="#k02">v&nbsp;předchozí kapitole</a>, má
výrobce konkrétního mikrořadiče či SoC poměrně mnoho možností, jak ovlivnit
konfiguraci jednotlivých bloků:</p>

<table>
<tr><th> #</th><th>Modul</th><th>Možnosti výrobce čipu</th></tr>
<tr><td> 1</td><td>NVIC     </td><td>nedílná součást čipu umístěna mezi vstupy přerušení a CPU</td></tr>
<tr><td> 2</td><td>WIC      </td><td>volby: neimplementováno/implementováno</td></tr>
<tr><td> 3</td><td>FPU      </td><td>volby: neimplementováno/jen single/single i double</td></tr>
<tr><td> 4</td><td>I-cache  </td><td>volby: 4kB, 8kB, 16kB, 32kB, 64kB</td></tr>
<tr><td> 5</td><td>D-cache  </td><td>volby: 4kB, 8kB, 16kB, 32kB, 64kB</td></tr>
<tr><td> 6</td><td>Instr.TCM</td><td>volby: neimplementováno popř.&nbsp;4kB až 16MB</td></tr>
<tr><td> 7</td><td>Data TCM </td><td>volby: neimplementováno popř.&nbsp;4kB až 16MB</td></tr>
<tr><td> 8</td><td>MPU      </td><td>volby: 0, 8 či 16 regionů</td></tr>
<tr><td> 9</td><td>DWT      </td><td>volby: neimplementováno/implementováno</td></tr>
<tr><td>10</td><td>ECC      </td><td>volby: neimplementováno/implementováno</td></tr>
</table>

<p>Na tomto místě je vhodné upozornit zejména na možnosti konfigurace
matematického koprocesoru, protože s&nbsp;jeho existencí či naopak neexistencí
se setká prakticky každý vývojář. Navíc může být koprocesor nakonfigurován
takovým způsobem, že bude podporovat pouze numerické hodnoty typu
<i>float/single</i> a nikoli <i>double</i> (což má význam pro mnoho
aplikací).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Pipeline v&nbsp;jádru CPU</h2>

<p>Zajímavé je uspořádání pipeline procesorů s&nbsp;jádry <i>Cortex-M7</i>.
První tři řezy pipeline jsou shodné pro všechny typy operací: <i>fetch</i>,
<i>decode</i>, <i>issue</i>. V&nbsp;posledním řezu se provádí rozhodnutí, který
modul bude instrukci skutečně vykonávat (<i>execute</i>). K&nbsp;dispozici jsou
čtyři popř.&nbsp;u některých konfigurací i pět paralelně běžících modulů
(samostatných pipeline):</p>

<ol>
<li>Modul pro operace LOAD/STORE</li>
<li>Integer ALU1 (zpracuje i složitější operace)</li>
<li>Integer ALU2 (zpracuje jen základní operace)</li>
<li>MAC (Multiply &amp; Accumulate, pro DSP operace)</li>
<li>FPP (pokud je na čipu implementován FPU)</li>
</ol>

<p>Před vlastní pipeline se nachází ještě modul pro <i>prefetch</i>
s&nbsp;frontou instrukcí o kapacitě 4&times;64 bitů.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Prediktor skoků</h2>

<p>Důležitou součástí prakticky všech RISCových procesorů je i <i>prediktor
skoků</i>, jehož úkolem je dodávat do pipeline tu sekvenci instrukcí, která
odpovídá předpovězené větvi za podmíněným skokem. Prediktor by tedy měl dopředu
odhadnout, zda se podmíněný skok provede či nikoli a to ještě předtím, než
dojde k&nbsp;vyhodnocení podmínek. Jádra <i>Cortex-M7</i> kombinují možnosti
statického prediktoru s&nbsp;prediktorem dynamickým. Dynamický prediktor je
založen na <i>BTAC (Branch Target Address Cache)</i> pamatující si pro již
provedenou instrukci skoku (její adresu) příznak, zda byl skok proveden či
nikoli. Zde se jedná o jednobitový příznak, i když existují i složitější
prediktory. Statický prediktor skoků je použit v&nbsp;případě, že daný skok
ještě nebyl proveden. Statický prediktor pracuje jednoduše: u podmíněných skoků
s&nbsp;adresou směřující směrem k&nbsp;začátku programu se předpokládá, že se
skok provede (jedná se o smyčku), u ostatních skoků se předpokládá, že se
neprovede. Ihned poté, co je instrukce skoku vykonána, se informace o
provedení/neprovedení skoku uloží do již zmíněné <i>BTAC</i>. Úspěšnost
predikce této kombinace se uvádí okolo 90% (lze najít i vyšší hodnoty,
ovšem větší úspěšnost mívají dvoubitové dynamické prediktory).</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instrukční sada</h2>

<p>Podobně jako tomu bylo u procesorových jader řady <i>Cortex-M3</i>,
podporují i jádra <i>Cortex-M7</i> instrukční sady Thumb i Thumb-2. Navíc jsou
podporovány i instrukce matematického koprocesoru, které jsou vykonávány na
FPU, samozřejmě za předpokladu, že je FPU součástí čipu (jedná se totiž o jeho
volitelnou část). V&nbsp;následujících kapitolách se zmíníme o některých
zajímavých instrukcích, z&nbsp;nichž mnohé souvisí s&nbsp;jednou aplikační
oblastí jader <i>Cortex-M7</i> &ndash; zpracování digitálních signálů (typicky
se zde používají instrukce typu Multiply &amp; Accumulate apod.).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Aritmetické operace se saturací</h2>

<p>Kromě běžných aritmetických operací je možné u čipů s&nbsp;jádry
<i>Cortex-M7</i> použít i operace se saturací. Při využití těchto operací
nedojde k&nbsp;přetečení přes maximální či minimální 8bitovou, 16bitovou či
32bitovou hodnotu (se znaménkem či bez znaménka), ale výpočet se
&bdquo;zasekne&ldquo; na minimální či maximální hodnotě. Aritmetické operace se
saturací jsou velmi užitečné pro mnoho algoritmů z&nbsp;oblasti digitálního
zpracování signálu, což je ostatně vcelku dobře ilustrováno na obrázcích.</p>

<img src="http://i.iinfo.cz/images/51/pc140-11.png" width="256" height="256" alt=" " />
<p><i>Obrázek 1: Zdrojový rastrový obrázek (známá fotografie Lenny), který
tvoří zdroj pro jednoduchý konvoluční (FIR) filtr, jenž zvyšuje hodnoty pixelů
o pevně zadanou konstantu (offset).</i></p>

<p>V&nbsp;následující tabulce jsou vypsány všechny aritmetické operace se
saturací výsledků:</p>

<table>
<tr><th> #</th><th>Instrukce</th><th>Typ</th><th>Šířka operandů</th><th>Poznámka</th></tr>
<tr><td> 1</td><td>SSAT   </td><td>Signed  </td><td>32 bitů        </td><td>posun operandu před výpočtem</td></tr>
<tr><td> 2</td><td>SSAT16 </td><td>Signed  </td><td>2&times;16 bitů</td><td>posun operandu před výpočtem</td></tr>
<tr><td> 3</td><td>USAT   </td><td>Unsigned</td><td>32 bitů        </td><td>posun operandu před výpočtem</td></tr>
<tr><td> 4</td><td>USAT16 </td><td>Unsigned</td><td>2&times;16 bitů</td><td>posun operandu před výpočtem</td></tr>
<tr><td> 5</td><td>QADD   </td><td>Signed  </td><td>32 bitů        </td><td>součet se saturací</td></tr>
<tr><td> 6</td><td>QADD8  </td><td>Signed  </td><td>4&times;8 bitů </td><td>součet se saturací</td></tr>
<tr><td> 7</td><td>QADD16 </td><td>Signed  </td><td>2&times;16 bitů</td><td>součet se saturací</td></tr>
<tr><td> 8</td><td>QSUB   </td><td>Signed  </td><td>32 bitů        </td><td>rozdíl se saturací</td></tr>
<tr><td> 9</td><td>QSUB8  </td><td>Signed  </td><td>4&times;8 bitů </td><td>rozdíl se saturací</td></tr>
<tr><td>10</td><td>QSUB16 </td><td>Signed  </td><td>2&times;16 bitů</td><td>rozdíl se saturací</td></tr>
<tr><td>11</td><td>QASX   </td><td>Signed  </td><td>32 bitů        </td><td>add + exchange</td></tr>
<tr><td>12</td><td>QSAX   </td><td>Signed  </td><td>32 bitů        </td><td>sub + exchange</td></tr>
<tr><td>13</td><td>QDADD  </td><td>Signed  </td><td>32 bitů        </td><td>druhý operand je před výpočtem vynásoben dvěma</td></tr>
<tr><td>14</td><td>QDSUB  </td><td>Signed  </td><td>32 bitů        </td><td>druhý operand je před výpočtem vynásoben dvěma</td></tr>
<tr><td>15</td><td>UQADD8 </td><td>Unsigned</td><td>4&times;8 bitů </td><td>součet se saturací</td></tr>
<tr><td>16</td><td>UQADD16</td><td>Unsigned</td><td>2&times;16 bitů</td><td>součet se saturací</td></tr>
<tr><td>17</td><td>UQSUB8 </td><td>Unsigned</td><td>4&times;8 bitů </td><td>rozdíl se saturací</td></tr>
<tr><td>18</td><td>UQSUB16</td><td>Unsigned</td><td>2&times;16 bitů</td><td>rozdíl se saturací</td></tr>
<tr><td>19</td><td>UQASX  </td><td>Unsigned</td><td>32 bitů        </td><td>add + exchange</td></tr>
<tr><td>20</td><td>UQSAX  </td><td>Unsigned</td><td>32 bitů        </td><td>add + exchange</td></tr>
</table>                                                                    

<img src="http://i.iinfo.cz/images/51/pc140-12.png" width="256" height="256" alt=" " />
<p><i>Obrázek 2: Pokud je pro přičtení offsetu použita operace součtu se
zanedbáním přenosu (carry), tj.&nbsp;když se počítá systémem &bdquo;modulo
N&ldquo;, dochází při překročení maximální hodnoty pixelu (čistě bílá barva)
k&nbsp;jasně viditelným chybám.</i></p>

<img src="http://i.iinfo.cz/images/51/pc140-13.png" width="256" height="256" alt=" " />
<p><i>Obrázek 3: Při použití operace součtu se saturací sice taktéž dojde ke
ztrátě informace (vzniknou oblasti s&nbsp;pixely majícími hodnotu 255), ovšem
viditelná chyba je mnohem menší, než na předchozím obrázku.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Instrukce pro násobení a dělení</h2>

<p>Již v&nbsp;předchozím textu jsme si řekli, že jádra <i>Cortex-M7</i>
obsahují hardwarovou násobičku a děličku. Násobička podporuje takřka nepřeberné
množství instrukcí pro násobení celočíselných operandů typu <i>signed</i> či
<i>unsigned</i> (se znaménkem, bez znaménka) s&nbsp;tím, že výsledek je buď
32bitová hodnota či hodnota 64bitová. Navíc je možné určit, zda se má výsledek
násobení přičíst k&nbsp;mezivýsledku a provést tak v&nbsp;oblasti digitálního
zpracování signálů velmi užitečnou operaci nazývanou
&bdquo;Multiply&amp;Accumulate&ldquo;:</p>

<table>
<tr><th> #</th><th>Instrukce</th><th>Operandy</th><th>Výsledek</th><th>Operace</th></tr>
<tr><td> 1</td><td>MUL</td><td>32bit&times;32bit</td><td>32bit</td><td>násobení</td></tr>
<tr><td> 2</td><td>MAL</td><td>32bit&times;32bit</td><td>32bit</td><td>násobení a přičtení výsledku (Multiply and Accumulate)</td></tr>
<tr><td> 3</td><td>MLS</td><td>32bit&times;32bit</td><td>32bit</td><td>násobení a odečtení výsledku (Multiply and Subtract)</td></tr>
<tr><td> 4</td><td>SMULL </td><td>32bit&times;32bit</td><td>64bit</td><td>násobení hodnot se znaménkem</td></tr>
<tr><td> 5</td><td>SMLAL </td><td>32bit&times;32bit</td><td>64bit</td><td>Multiply and Accumulate (se znaménkem)</td></tr>
<tr><td> 6</td><td>SMLAB </td><td>16bit&times;32bit</td><td>32bit</td><td>Multiply and Accumulate (se znaménkem)</td></tr>
<tr><td> 7</td><td>SMLAT </td><td>16bit&times;32bit</td><td>32bit</td><td>Multiply and Accumulate (se znaménkem)</td></tr>
<tr><td> 8</td><td>SMLALB</td><td>16bit&times;32bit</td><td>64bit</td><td>Multiply and Accumulate (se znaménkem)</td></tr>
<tr><td> 9</td><td>SMLALT</td><td>16bit&times;32bit</td><td>64bit</td><td>Multiply and Accumulate (se znaménkem)</td></tr>
<tr><td>10</td><td>UMULL </td><td>32bit&times;32bit</td><td>64bit</td><td>násobení hodnot bez znaménka</td></tr>
<tr><td>11</td><td>UMLAL </td><td>32bit&times;32bit</td><td>64bit</td><td>Multiply and Accumulate (bez znaménka)</td></tr>
<tr><td>12</td><td>UMAAL </td><td>32bit&times;32bit+32+32</td><td>64bit</td><td>Multiply and Accumulate long (bez znaménka)</td></tr>
<tr><td>13</td><td>SMLAD </td><td>16bit&times;16bit</td><td>32bit</td><td>násobení dvouprvkových vektorů</td></tr>
<tr><td>14</td><td>SMLADX</td><td>16bit&times;16bit</td><td>32bit</td><td>násobení dvouprvkových vektorů</td></tr>
</table>

<p>Následují další kombinace typů operandů, výsledků a konverzí po provedení operace násobení:</p>

<table>
<tr><th> #</th><th>Instrukce</th><th>Operace</th></tr>
<tr><td> 1</td><td>SMLALD</td><td>Signed Multiply Accumulate Long Dual</td></tr>
<tr><td> 2</td><td>SMLAWB</td><td>Signed Multiply Accumulate (word by halfword)</td></tr>
<tr><td> 3</td><td>SMLAWT</td><td>Signed Multiply Accumulate (word by halfword)</td></tr>
<tr><td> 4</td><td>SMLSD </td><td>Signed Multiply Subtract Dual</td></tr>
<tr><td> 5</td><td>SMLSLD</td><td>Signed Multiply Subtract Long Dual</td></tr>
<tr><td> 6</td><td>SMMLA </td><td>Signed Most Significant Word Multiply Accumulate</td></tr>
<tr><td> 7</td><td>SMMLS </td><td>Signed Most Significant Word Multiply Subtract</td></tr>
<tr><td> 8</td><td>SMUAD </td><td>Signed Dual Multiply Add</td></tr>
<tr><td> 9</td><td>SMULB </td><td>Signed Multiply (word by halfword)</td></tr>
<tr><td>10</td><td>SMULT </td><td>Signed Multiply (word by halfword)</td></tr>
<tr><td>11</td><td>SMMUL </td><td>Signed Most Significant Word Multiply</td></tr>
<tr><td>12</td><td>SMULWB</td><td>Signed Multiply (word by halfword)</td></tr>
</table>

<p>Instrukce pro dělení zůstávají jednoduché a snadno pochopitelné. Připomeňme
si, že dělička pracuje relativně pomalu, na rozdíl od klasické ALU:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Operandy</th><th>Výsledek</th><th>Operace</th></tr>
<tr><td>1</td><td>SDIV</td><td>32bit&times;32bit</td><td>32bit</td><td>operace dělení hodnot se znaménkem</td></tr>
<tr><td>2</td><td>UDIV</td><td>32bit&times;32bit</td><td>32bit</td><td>operace dělení hodnot bez znaménka</td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Skoky, podmíněné skoky a prefix <strong>IT</strong></h2>

<p>V&nbsp;instrukční sadě nalezneme prakticky úplný repertoár skoků, a to jak
nepodmíněných skoků, tak i skoků s&nbsp;podmínkou. Samozřejmě nesmí chybět pro
architekturu ARM typické skoky, které zachovají původní (návratovou) adresu
v&nbsp;link registru. Podle toho, zda je adresa skoku součástí instrukce či zda
je použita adresa v&nbsp;registru, lze použít následující kombinace
instrukcí:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Adresa</th><th>Rozsah skoku</th></tr>
<tr><td>1</td><td>B</td><td>konstanta</td><td>-16MB..16MB</td></tr>
<tr><td>2</td><td>B+cond</td><td>konstanta</td><td>-1MB..1MB</td></tr>
<tr><td>3</td><td>B+cond v bloku IT</td><td>konstanta</td><td>-16MB..16MB</td></tr>
<tr><td>4</td><td>BL</td><td>konstanta</td><td>-16MB..16MB</td></tr>
<tr><td>5</td><td>BL+cond</td><td>konstanta</td><td>-1MB..1MB</td></tr>
<tr><td>6</td><td>BX</td><td>registr</td><td>kamkoli</td></tr>
<tr><td>7</td><td>BX+cond</td><td>registr</td><td>kamkoli</td></tr>
<tr><td>8</td><td>BLX</td><td>registr</td><td>kamkoli</td></tr>
<tr><td>9</td><td>BLX+cond</td><td>registr</td><td>kamkoli</td></tr>
</table>

<p>Podobně jako u jader <i>Cortex-M3</i>, i zde nalezneme instrukci pro
provedení skoku, pokud je vybraný registr nulový či naopak nenulový.
K&nbsp;instrukcím lze přiřadit i další podmínku umožňující nastavit, zda se má
vůbec instrukce provést:</p>

<table>
<tr><th>#</th><th>Instrukce</th></tr>
<tr><td>1</td><td>CBZ</td></tr>
<tr><td>2</td><td>CBZN</td></tr>
<tr><td>3</td><td>CBZ+cond</td></tr>
<tr><td>4</td><td>CBZN+cond</td></tr>
</table>

<p>Nesmíme zapomenout ani na minule zmíněný instrukční prefix
<strong>IT</strong>. Tento prefix může být aplikován na jednu až čtyři
instrukce následující za prefixem. Ihned za prefixem <strong>IT</strong> se
(bez mezery) udává, zda má být daná instrukce provedena při splnění podmínky
(<strong>T</strong> &ndash; <i>then</i>) či naopak při jejím nesplnění
(<strong>E</strong> &ndash; <i>else</i>). U první instrukce je automaticky
předpokládáno <strong>T</strong>, tudíž se uvádí maximálně tři kombinace znaků
T/E. Samozřejmě je taktéž nutné zapsat i testovanou podmínku &ndash; může se
jednat o kódy používané jak u podmíněných skoků, tak i v&nbsp;podmínkových
bitech.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Rozeskoky s&nbsp;využitím instrukcí TBB a TBH</h2>

<p>Zajímavé a vlastně i docela užitečné jsou instrukce <strong>TBB</strong>
(<i>Table Branch Byte</i>) a <strong>TBH</strong> (<i>Table Branch
Halfword)</i>, které mohou být použity například při překladu aplikací
napsaných ve vyšších programovacích jazycích, typicky céčka s&nbsp;jazykovou
konstrukcí typu <strong>switch</strong>. První registr předávaný této instrukci
obsahuje adresu tabulky skoků, přičemž platí, že pokud se použije PC, bude
tabulka umístěná ihned za instrukcí (pěkný trik). Druhý registr obsahuje index
do tabulky, z&nbsp;níž se přečte bajt či 16bitové slovo a na základě jeho
hodnoty se provede skok relativně k&nbsp;hodnotě uložené v&nbsp;PC. Zajímavé
je, že pokud se použije instrukce <strong>TBH</strong>, je načtený offset
nejprve zdvojnásoben. Kdy je možné tyto instrukce použít? Nabízí se množství
aplikací, například implementace interpretrů různých bajtkódů, skoková tabulka
pro jednotlivé klávesy (u komplikovanějšího programu) apod.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Práce s&nbsp;čísly s&nbsp;plovoucí řádovou čárkou</h2>

<p>Jádra <i>Cortex-M7</i> mohou obsahovat samostatně pracující jednotku určenou
pro provádění operací s&nbsp;hodnotami reprezentovanými v&nbsp;systému plovoucí
řádové čárky. Tato jednotka může, opět v&nbsp;závislosti na konkrétní
konfiguraci čipu zvolené výrobcem, pracovat pouze s&nbsp;čísly
s&nbsp;jednoduchou přesností (<i>single/float</i>) nebo alternativně i
s&nbsp;čísly s&nbsp;přesností dvojnásobnou (<i>double</i>). Přitom se operace
provádí s&nbsp;pracovními registry nazvanými <strong>S0-S31</strong>
(<i>single</i>), na které se mapují aliasy nazvané <strong>D0-D15</strong>
(<i>double</i>). Mimochodem: ne vždy je výhodné používat FPU, protože zejména
při příchodu přerušení je nutné uložit pracovní registry na zásobník, takže
v&nbsp;případě, že je FPU detekován a používán, se musí kromě osmice
<strong>R0, R1, R2, R3, R12, LR, PC, PSR</strong> navíc uložit i sedmnáct
registrů <strong>S0..S15, FPSCR</strong> (poslední registr obsahuje řídicí a
stavové příznaky FPU).</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Instrukční sada FPU</h2>

<p>Nyní se již dostáváme k&nbsp;popisu jednotlivých instrukcí FPU. Zajímavý je
především fakt, že každá instrukce obsahuje příznak, zda se má provádět operace
s&nbsp;hodnotami/registry typu <i>single</i> či <i>double</i>. Instrukce taktéž
obsahují příznakové bity určující, za jakých podmínek se instrukce má provést.
Význam těchto příznakových bitů je poněkud odlišný od bitů použitých
v&nbsp;instrukční sadě <i>ARM</i>, a to především z&nbsp;toho důvodu, že
příznak <strong>V</strong> má jiný význam (přetečení hodnoty celého čísla do
znaménkového bitu versus dvě FP hodnoty nelze porovnat).</p>

<p>V&nbsp;následující tabulce jsou vypsány základní aritmetické operace:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Význam</th><th>Prováděný výpočet</th></tr>
<tr><td> 1</td><td>VADD  Fd, Fn, Fm</td><td>součet</td><td>Fd := Fn + Fm</td></tr>
<tr><td> 2</td><td>VSUB  Fd, Fn, Fm</td><td>rozdíl</td><td>Fd := Fn - Fm</td></tr>
<tr><td> 3</td><td>VNEG  Fd, Fm</td><td>změna znaménka</td><td>Fd := - Fm</td></tr>
<tr><td> 4</td><td>VABS  Fd, Fm</td><td>absolutní hodnota</td><td>Fd := abs(Fm)</td></tr>
<tr><td> 5</td><td>VSQRT Fd, Fm</td><td>druhá odmocnina</td><td>Fd := sqrt(Fm)</td></tr>
<tr><td> 6</td><td>VDIV  Fd, Fn, Fm</td><td>dělení</td><td>Fd := Fn / Fm</td></tr>
<tr><td> 7</td><td>VMUL  Fd, Fn, Fm</td><td>násobení</td><td>Fd := Fn * Fm</td></tr>
<tr><td> 8</td><td>VMLA  Fd, Fn, Fm</td><td>násobení + akumulace</td><td>Fd := Fd + (Fn * Fm)</td></tr>
<tr><td> 9</td><td>VMLS  Fd, Fn, Fm</td><td>odečtení součinu</td><td>Fd := Fd - (Fn * Fm)</td></tr>
<tr><td>10</td><td>VNMUL Fd, Fn, Fm</td><td>násobení + změna znaménka</td><td>Fn := - (Fn * Fm)</td></tr>
<tr><td>11</td><td>VNMLA Fd, Fn, Fm</td><td>kombinace VNMUL a VMLA</td><td>Fd := - Fd - (Fn * Fm)</td></tr>
<tr><td>12</td><td>VNMLS Fd, Fn, Fm</td><td>kombinace VNMUL a VMLS</td><td>Fd := - Fd + (Fn * Fm)</td></tr>
</table>

<p><ins>Poznámka: povšimněte si především šesti různých variant násobení. To je
zapříčiněno tím, že se <i>FPU</i> používá například i pro filtraci obrazu, FFT
atd., kde lze tyto operace s&nbsp;výhodou použít.</ins></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Porovnání dvou hodnot, porovnání s&nbsp;nulou</h2>

<p>Mezi další důležité operace prováděné matematickými koprocesory patří
instrukce pro porovnání dvou hodnot (samozřejmě uložených ve dvojici registrů),
popř.&nbsp;porovnání hodnoty jednoho registru s&nbsp;nulou. Porovnání je
provedeno instrukcí <strong>VCMP</strong>, u níž lze navíc pomocí prefixu
&bdquo;P&ldquo; určit, ve kterých případech se má vyvolat výjimka. Porovnání
nastaví všechny čtyři příznakové bity <strong>C</strong>, <strong>Z</strong>,
<strong>N</strong> a <strong>V</strong>. Pro přesun příznakových bitů
z&nbsp;registru <strong>FPSCR</strong> do registru <strong>CSR</strong> je
nutné použít instrukci <strong>VMRS APSR_nzcv, FPSCR</strong>:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Význam</th><th>Prováděný výpočet</th></tr>
<tr><td>1</td><td>VCMP Fd, Fm</td><td>Porovnání obsahu dvou registrů</td><td>Fd - Fm</td></tr>
<tr><td>2</td><td>VCMP Fd, #0.0</td><td>Porovnání jednoho registru s nulou</td><td>Fd - 0.0</td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Přesuny dat, načtení konstanty a konverzní instrukce</h2>

<p>V&nbsp;poslední tabulce jsou vypsány instrukce FPU provádějící různé přesuny
dat s&nbsp;případnými konverzemi dat:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Význam</th></tr>
<tr><td> 1</td><td>VCVT{C}.F64.F32 Dd, Sm</td><td>Konverze single na double</td></tr>
<tr><td> 2</td><td>VCVT{C}.F32.F64 Sd, Dm</td><td>Konverze double na single</td></tr>
<tr><td> 3</td><td>VCVT{C}.F32/F64.U32 Fd, Sm</td><td>Konverze unsigned integer na float</td></tr>
<tr><td> 4</td><td>VCVT{C}.F32/F64.S32 Fd, Sm</td><td>Konverze signed integer na float</td></tr>
<tr><td> 5</td><td>VCVT{R}{C}.U32.F32/F64 Sd, Fm</td><td>Konverze float na unsigned integer</td></tr>
<tr><td> 6</td><td>VCVT{R}{C}.S32.F32/F64 Sd, Fm</td><td>Konverze float na signed integer</td></tr>
<tr><td> 7</td><td>VCVT.F32/F64.typ Fd, Fd, #bitů</td><td>Konverze fixed-point na float (volitelná pozice tečky)</td></tr>
<tr><td> 8</td><td>VCVT.typ.F32/F64 Fd, Fd, #bitů</td><td>Konverze float na fixed-point (volitelná pozice tečky)</td></tr>
<tr><td> 9</td><td>VCVTT.F16.F32 Sd,Sm</td><td>Konverze single na half (do horních 16 bitů registru)</td></tr>
<tr><td>10</td><td>VCVTB.F16.F32 Sd,Sm</td><td>Konverze single na half (do spodních 16 bitů registru)</td></tr>
<tr><td>11</td><td>VCVTT.F32.F16 Sd,Sm</td><td>Konverze half na single</td></tr>
<tr><td>12</td><td>VCVTB.F32.F16 Sd,Sm</td><td>Konverze half na single</td></tr>
<tr><td>13</td><td>VMOV.F32/F64 Fd, Fm</td><td>Fd := Fm (prostá kopie)</td></tr>
<tr><td>14</td><td>VMOV Sn, Rd</td><td>Sn := Rd (Rd = registr ARM procesoru)</td></tr>
<tr><td>15</td><td>VMOV Rd, Sn</td><td>Rd := Sn (Rd = registr ARM procesoru)</td></tr>
<tr><td>16</td><td>VMOV Sn, Sm, Rd, Rn</td><td>Sn := Rd, Sm := Rn (kopie dvou registrů)</td></tr>
<tr><td>17</td><td>VMOV Rd, Rn, Sn, Sm</td><td>Rd := Sn, Rn := Sm (kopie dvou registrů)</td></tr>
<tr><td>18</td><td>VMOV Dm, Rd, Rn</td><td>Dm[31:0] := Rd, Dm[63:32] := Rn (pro double jsou zapotřebí dva ARM registry)</td></tr>
<tr><td>19</td><td>VMOV Rd, Rn, Dm</td><td>Rd := Dm[31:0], Rn := Dm[63:32]  (pro double jsou zapotřebí dva ARM registry)</td></tr>
<tr><td>20</td><td>VMOV Dn[0], Rd</td><td>Dn[31:0] := Rd  (pouze spodní polovina double)</td></tr>
<tr><td>21</td><td>VMOV Rd, Dn[0]</td><td>Rd := Dn[31:0]  (pouze spodní polovina double)</td></tr>
<tr><td>22</td><td>VMOV Dn[1], Rd</td><td>Dn[63:32] := Rd  (pouze horní polovina double)</td></tr>
<tr><td>23</td><td>VMOV Rd, Dn[1]</td><td>Rd := Dn[63:32]  (pouze horní polovina double)</td></tr>
<tr><td>24</td><td>VMRS APSR_nzcv, FPSCR</td><td>APSR flags := FPSCR flags (přenos příznaků)</td></tr>
</table>



<p><a name="k15"></a></p>
<h2 id="k15">15. Odkazy na Internetu</h2>

<ol>

<li>A tour of the Cortex-M3 core:<br />
<a href="http://community.arm.com/groups/processors/blog/2013/11/04/a-tour-of-the-cortex-m3-core">http://community.arm.com/groups/processors/blog/2013/11/04/a-tour-of-the-cortex-m3-core</a>
</li>

<li>Five things you may not know about ARM Cortex-M:<br />
<a href="http://community.arm.com/docs/DOC-6912">http://community.arm.com/docs/DOC-6912</a>
</li>

<li>Divide and Conquer:<br />
<a href="http://community.arm.com/docs/DOC-8059">http://community.arm.com/docs/DOC-8059</a>
</li>

<li>MCU market turns to 32-bits and ARM<br />
<a href="http://www.eetimes.com/document.asp?doc_id=1280803">http://www.eetimes.com/document.asp?doc_id=1280803</a>
</li>

<li>Cortex-M0 Processor (ARM Holdings)<br />
<a href="http://www.arm.com/products/processors/cortex-m/cortex-m0.php">http://www.arm.com/products/processors/cortex-m/cortex-m0.php</a>
</li>

<li>Cortex-M0+ Processor (ARM Holdings)<br />
<a href="http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php">http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php</a>
</li>

<li>ARM Processors in a Mixed Signal World<br />
<a href="http://www.eeweb.com/blog/arm/arm-processors-in-a-mixed-signal-world">http://www.eeweb.com/blog/arm/arm-processors-in-a-mixed-signal-world</a>
</li>

<li>ARM Architecture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_architecture">https://en.wikipedia.org/wiki/ARM_architecture</a>
</li>

<li>Cortex-M0 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_Cortex-M0">https://en.wikipedia.org/wiki/ARM_Cortex-M0</a>
</li>

<li>Cortex-M0+ (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M0.2B">https://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M0.2B</a>
</li>

<li>Improving ARM Code Density and Performance<br />
<a href="New Thumb Extensions to the ARM Architecture Richard Phelan">New Thumb Extensions to the ARM Architecture Richard Phelan</a>
</li>

<li>The ARM Processor Architecture<br />
<a href="http://www.arm.com/products/processors/technologies/instruction-set-architectures.php">http://www.arm.com/products/processors/technologies/instruction-set-architectures.php</a>
</li>

<li>Thumb-2 instruction set<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0344c/Beiiegaf.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0344c/Beiiegaf.html</a>
</li>

<li>Introduction to ARM thumb<br />
<a href="http://www.eetimes.com/discussion/other/4024632/Introduction-to-ARM-thumb">http://www.eetimes.com/discussion/other/4024632/Introduction-to-ARM-thumb</a>
</li>

<li>ARM, Thumb, and ThumbEE instruction sets<br />
<a href="http://www.keil.com/support/man/docs/armasm/armasm_CEGBEIJB.htm">http://www.keil.com/support/man/docs/armasm/armasm_CEGBEIJB.htm</a>
</li>

<li>An Introduction to ARM Assembly Language<br />
<a href="http://dev.emcelettronica.com/introduction-to-arm-assembly-language">http://dev.emcelettronica.com/introduction-to-arm-assembly-language</a>
</li>

<li>Processors - ARM<br />
<a href="http://www.arm.com/products/processors/index.php">http://www.arm.com/products/processors/index.php</a>
</li>

<li>The ARM Instruction Set<br />
<a href="http://simplemachines.it/doc/arm_inst.pdf">http://simplemachines.it/doc/arm_inst.pdf</a>
</li>

<li>Instrukce typu SIMD na mikroprocesorech RISC<br />
<a href="http://www.root.cz/clanky/instrukce-typu-simd-na-mikroprocesorech-risc/">http://www.root.cz/clanky/instrukce-typu-simd-na-mikroprocesorech-risc/</a>
</li>

<li>Instrukce typu SIMD na mikroprocesorech RISC (2. část)<br />
<a href="http://www.root.cz/clanky/instrukce-typu-simd-na-mikroprocesorech-risc-2-cast/">http://www.root.cz/clanky/instrukce-typu-simd-na-mikroprocesorech-risc-2-cast/</a>
</li>

<li>Instrukce typu SIMD na mikroprocesorech RISC (3.část - MIPS-3D a VIS)<br />
<a href="http://www.root.cz/clanky/instrukce-typu-simd-na-mikroprocesorech-risc-3-cast-mips-3d-a-vis/">http://www.root.cz/clanky/instrukce-typu-simd-na-mikroprocesorech-risc-3-cast-mips-3d-a-vis/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

