<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p><i>"...sequential computers are approaching a fundamental physical limit on
their potential power. Such a limit is the speed of light..."</i></p>

<p>Připomeňme si, že z&nbsp;hlediska dosahovaného výpočetního výkonu leží na
samém &bdquo;výkonnostním dně&ldquo; klasické mikroprocesory
s&nbsp;architekturou <i>CISC</i>, které vykonávají všechny instrukce postupně a
dokončení jedné instrukce může v&nbsp;závislosti na jejich složitosti trvat i
několik desítek strojových taktů. Předností těchto procesorů může být poměrně
velká informační hustota instrukční sady (například i díky tomu, že operandy
některých instrukcí jsou zadány implicitně), což mj.&nbsp;znamená, že se
procesory tohoto typu po poměrně dlouhou dobu obešly bez nutnosti využití
drahých vyrovnávacích pamětí první a druhé úrovně (<i>L1 cache</i>, <i>L2
cache</i>). Klasické procesory s&nbsp;architekturou <i>CISC</i> byly založeny
na mikroprogramovém řadiči vybaveném pamětí mikroinstrukcí a teprve později
začaly být tyto procesory doplňovány technologiemi získanými z&nbsp;jiných
architektur &ndash; instrukční pipeline, prediktorem skoků, vektorovými
instrukcemi atd.</p>

<img src="http://i.iinfo.cz/images/311/pc158-1.png" width="450" height="310" alt="&#160;" />
<p><i>Obrázek 1: Ukázka časování instrukce ADC (Add with carry) osmibitového
mikroprocesoru MOS 6502 s&nbsp;architekturou CISC. V&nbsp;závislosti na
zvoleném adresním režimu se liší počty strojových cyklů od dvou do šesti. Liší
se samozřejmě i počet bajtů nutných pro zakódování instrukce, protože některé
adresní režimy vyžadují zápis absolutní 16bitové adresy a jiné režimy používají
jen 8bitový offset, popř.&nbsp;osmibitovou adresu v&nbsp;rámci takzvané nulté
stránky (zero page).</i></p>

<p>Výpočetní výkon mikroprocesorů se podařilo poměrně výrazným způsobem zvýšit
u architektury <i>RISC</i> s&nbsp;instrukční pipeline. Provedení jedné
instrukce sice stále trvalo větší počet strojových cyklů, ovšem díky
rozfázování operací v&nbsp;instrukční pipeline bylo umožněno překrývání většího
množství instrukcí, a to bez nutnosti zavádění skutečné paralelizace (která
vede k&nbsp;velkému nárůstu složitosti a tím i ceny čipu). Spolu se zavedením
mikroprocesorů <i>RISC</i> se skutečně stalo, že reálný i špičkový výpočetní
výkon procesorů vzrostl, ale relativně brzy bylo nutné k&nbsp;těmto čipům
přidat vyrovnávací paměti (<i>cache</i>), jelikož rychlost procesorů rostla
mnohem rychleji, než vybavovací doba pamětí. Tento rozpor mezi rychlostmi obou
nejdůležitějších součástí moderních počítačů ostatně trvá dodnes. Pro další
zvýšení výpočetního výkonu však bylo nutné použít další technologie, například
minule zmíněnou instrukční sadu <i>VLIW</i>, která však &ndash; opět &ndash;
měla velké nároky na rychlost pamětí. Podobně jako u procesorů <i>RISC</i>, i u
<i>VLIW</i> bylo pro zmírnění požadavků na rychlost pamětí možné použít
Harvardskou architekturu, tj.&nbsp;odděleni paměti programu od paměti dat
(programová paměť navíc mohla mít větší šířku datové sběrnice odpovídající
šířce instrukčních slov).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p>Všechny CISCové mikroprocesory firmy Intel řady <i>80x86</i>, od ještě
z&nbsp;poloviny osmibitového čipu <i>Intel 8088</i> až po model <i>Intel
80486</i> (včetně) byly založeny na skalární architektuře <i>SISD</i>, stejně
jako velké množství mikrořadičů či digitálních signálových procesorů (<i>DSP
&ndash; Digital Signal Processor</i>). Nevýhodou systémů <strong>SISD</strong>
ovšem je, že rychlost načítání a tím i zpracování instrukcí je shora omezena a
že ani s&nbsp;využitím velmi dlouhé instrukční pipeline se nedá &ndash; vcelku
logicky &ndash; překonat limit jedné zpracované instrukce za jeden takt. Příliš
velké množství řezů (<i>slices</i>) pipeline má naopak i své zápory, především
při zpracování skoků, návratů z&nbsp;podprogramů či odezvy na přerušení &ndash;
ve všech těchto případech je nutné vyřešit problém, co se má udělat
s&nbsp;instrukcemi, které se nachází v&nbsp;rozpracovaném stavu v&nbsp;pipeline
(mohou se buď zahodit nebo naopak dokončit, podle toho, jakým způsobem byl
lineární běh programu přerušen).</p>

<a href="http://i.iinfo.cz/images/311/pc158-5.png"><img src="http://i.iinfo.cz/images/311/pc158-5-prev.png" width="259" height="270" alt="&#160;" /></a>
<p><i>Obrázek 5: Schéma systému patřícího do kategorie SISD.</i></p>

<p>V&nbsp;současnosti se těší značné popularitě procesory patřící do kategorie
<strong>SIMD</strong>, jejíž kořeny ovšem sahají hluboko do minulosti,
konkrétně do šedesátých a sedmdesátých let minulého století (tato oblast
výpočetní techniky je spojena se <i>Symourem Crayem</i> a jeho superpočítači).
Do této kategorie patří ty architektury procesorů, u kterých se pomocí jedné
instrukce může zpracovat větší množství dat. Například u rozšířené instrukční
sady <strong>MMX</strong> je možné pomocí jediné instrukce provést součet dvou
vektorů číselných hodnot. Může se jednat o osm osmibitových hodnot uložených
v&nbsp;jednom vektoru, čtyři šestnáctibitové hodnoty v&nbsp;jednom vektoru atd.
Této vlastnosti se dá v&nbsp;mnoha případech využít pro urychlení běhu
programů, protože některé algoritmy (ve skutečnosti je těchto algoritmů možná
až udivující počet) provádí velké množství stejných operací s&nbsp;rozsáhlým
objemem dat &ndash; například se může jednat o aplikaci konvolučního filtru na
rastrový obrázek, zpracování zvukového signálu, vynásobení matice vektorem,
vynásobení dvou matic atd.</p>

<a href="http://i.iinfo.cz/images/311/pc158-7.png"><img src="http://i.iinfo.cz/images/311/pc158-7-prev.png" width="205" height="270" alt="&#160;" /></a>
<p><i>Obrázek 7: Schéma systému patřícího do kategorie SIMD.</i></p>

<p>Mezi přednosti čipů náležejících do kategorie <strong>SIMD</strong> patří
jak relativně kompaktní instrukční sada, tak i paralelní a tím pádem i rychlý
běh mnoha algoritmů, ovšem za cenu větších nároků kladených na programátora,
popř.&nbsp;na překladač. Stále jen velmi malé množství programovacích jazyků
totiž umožňuje explicitně vyjádřit vektorové či maticové operace (například u
překladače Fortranu určeného pro superpočítače <i>Cray</i> bylo v&nbsp;manuálu
explicitně řečeno, které jazykové konstrukce se budou skutečně provádět ve
vektorové &ndash; <strong>SISD</strong> &ndash; jednotce). Z&nbsp;tohoto důvodu
také není možné většinu <strong>SIMD</strong> konstrukcí zapsat
v&nbsp;konvenčním vyšším programovacím jazyce: musí se použít buď hotová makra,
ručně optimalizované knihovní funkce nebo specializované programovací jazyky.
Určitou, ale nezanedbatelnou výjimku představují <strong>GPU</strong> na
grafických akcelerátorech, které explicitně pracují s&nbsp;2D a 3D vektory,
přičemž programátor může předem zjistit, které operace budou skutečně provedeny
paralelně.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>
</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

