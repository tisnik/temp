<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Instrukční sada procesorových jader s otevřenou architekturou RISC-V</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Instrukční sada procesorových jader s otevřenou architekturou RISC-V</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na předchozí článek, v němž jsme se seznámili se základními vlastnosti otevřených RISCových procesorových jader OpenRISC a RISC-V dnes navážeme. Popíšeme si instrukční sadu RV32I, která je určena pro 32bitové čipy s jádry RISC-V. Tato instrukční sada je navržena velmi elegantně a navíc její tvůrci dobře vysvětlují všechna svá rozhodnutí.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Instrukční sada procesorových jader s&nbsp;otevřenou architekturou RISC-V</a></p>
<p><a href="#k02">2. Dvě kritická rozhodnutí při návrhu ISA: bitová šířka ALU a počet pracovních registrů</a></p>
<p><a href="#k03">3. Operační kódy instrukcí u procesorových jader RISC-V</a></p>
<p><a href="#k04">4. Základní instrukční sada RV32I</a></p>
<p><a href="#k05">5. Seznam instrukcí z&nbsp;instrukční sady RV32I</a></p>
<p><a href="#k06">6. Čtyři způsoby kódování instrukcí RV32I</a></p>
<p><a href="#k07">7. Aritmetické instrukce s&nbsp;registry (tříadresový kód)</a></p>
<p><a href="#k08">8. Aritmetické instrukce s&nbsp;konstantou</a></p>
<p><a href="#k09">9. Instrukce typu LOAD a STORE</a></p>
<p><a href="#k10">10. Instrukce nepodmíněného skoku (JUMP)</a></p>
<p><a href="#k11">11. Instrukce rozvětvení (BRANCH)</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Instrukční sada procesorových jader s&nbsp;otevřenou architekturou RISC-V</h2>

<p>V&nbsp;článku s&nbsp;nadpisem <a
href="http://www.root.cz/clanky/otevrene-riscove-architektury-openrisc-a-risc-v/">Otevřené
RISCové architektury OpenRISC a RISC-V</a>, který na Rootu vyšel minulý týden,
jsme se seznámili se základními vlastnostmi otevřených RISCových architektur
<i>OpenRISC</i> a zejména pak <i>RISC-V</i>. Připomeňme si, že tyto dvě
architektury sice mají společného ideového předka, jímž jsou původní 32bitová
jádra <a
href="http://www.root.cz/clanky/otevrene-riscove-architektury-openrisc-a-risc-v/#k03">MIPS</a>,
ovšem konkrétní implementace <i>OpenRISC</i> a <i>RISC-V</i> jsou od sebe dosti
odlišné. Dnes se budeme zabývat popisem instrukční sady <i>RV32I</i>, což je
základní instrukční sada 32bitových jader <i>RISC-V</i>, která však může být
v&nbsp;případě potřeby rozšířena o další oficiální či neoficiální sady
instrukcí v&nbsp;závislosti na tom, v&nbsp;jakém systému se budou jádra
<i>RISC-V</i> používat. Například pro takzvaná &bdquo;minion cores&ldquo; bude
tato instrukční sada plně dostačovat, při použití jádra <i>RISC-V</i>
v&nbsp;desktopovém mikroprocesoru bude nutné doplnit jednotku s&nbsp;násobičkou
a děličkou i matematickým koprocesorem, v&nbsp;serverech s&nbsp;čipy
s&nbsp;mnoha jádry se pak uplatní rozšíření o atomické operace atd. atd.</p>

<p>Připomeňme si, které základní a rozšiřující instrukční sady
v&nbsp;současnosti pro jádra <i>RISC-V</i> existují či které jsou teprve ve
stadiu návrhu:</p>

<table>
<tr><th>Označení</th><th>Význam</th></tr>
<tr><td>&nbsp;</td><th>Oficiální sady instrukcí</th></tr>
<tr><td>I</td><td>aritmetické instrukce (32/64 bit), load/store, skoky, rozvětvení, speciální operace</td></tr>
<tr><td>M</td><td>rozšíření o instrukce pro násobení a dělení</td></tr>
<tr><td>A</td><td>atomické operace typu read-modify-write (využitelné zejména pro multicore)</td></tr>
<tr><td>F</td><td>operace s&nbsp;hodnotami typu float/single (jednoduchá přesnost)</td></tr>
<tr><td>D</td><td>operace s&nbsp;hodnotami typu double (dvojitá přesnost)</td></tr>
<tr><td>&nbsp;</td><th>Další rozšíření</th></tr>
<tr><td>Q</td><td>operace s&nbsp;hodnotami typu quad (čtyřnásobná přesnost)</td></tr>
<tr><td>L</td><td>decimální aritmetika</td></tr>
<tr><td>C</td><td>komprimované instrukce (viz též navazující kapitoly)</td></tr>
<tr><td>B</td><td>bitové operace</td></tr>
<tr><td>T</td><td>podpora pro transakční paměť</td></tr>
<tr><td>P</td><td>SIMD operace</td></tr>
</table>

<p>Pod označení &bdquo;I&ldquo; ve skutečnosti spadají dvě sady: jedna
instrukční sada pro zpracování 32bitových operandů (<strong>RV32I</strong>) a
druhá instrukční sada pro 64bitové operandy (<strong>RV64I</strong>).</p>

<p>Poznámka: &bdquo;minion core&ldquo; je termín používaný společností
<i>LowRisc</i> pro (poněkud zjednodušeně řečeno) pojmenování jádra
s&nbsp;architekturou <i>RISC-V</i> připojeného přímo na GPIO, tedy na skupinu
vstupně-výstupních pinů. Toto jádro, či v&nbsp;případě potřeby větší množství
jader, se chová jako samostatně fungující koprocesor, který má přístup ke
společné sběrnici i k&nbsp;hlavnímu procesoru/procesorům. To v&nbsp;důsledku
znamená, že se vlastně jedná o &bdquo;inteligentní&ldquo; vstupně-výstupní
zařízení, které může softwarově implementovat chování různých sběrnic a
rozhraní, například U(S)ART, SPI, I<sup>2</sup>C, Ethernet, USB atd. atd.,
samozřejmě včetně možnosti návrhu zcela nových sběrnic (předpokládá se, že
RISCové procesorové jádro bude dostatečně levné na to, aby se nevyplatilo
použít specializovaný modul). Teoreticky se zde otevírá cesta k&nbsp;masivně
paralelním a přitom levným strojům, popřípadě ke kompletně
&bdquo;otevřenému&ldquo; hardwaru (zejména segment síťových karet mi přijde
býti dosti kritický), to však ukáže budoucnost.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Dvě kritická rozhodnutí při návrhu ISA: bitová šířka ALU a počet pracovních registrů</h2>

<p>Při návrhu architektury mikroprocesorových jader <i>RISC-V</i> museli tvůrci
provést minimálně dvě kritická rozhodnutí: bylo nutné stanovit implicitní
bitovou šířku operandů (a tím pádem i počet bitů operandů vstupujících do
aritmeticko-logické jednotky, šířku datových sběrnic i pracovních registrů) a
taktéž celkový počet pracovních registrů. Bitová šířka operandů ovlivňuje
složitost, cenu a spotřebu čipu. Navíc je nutné si uvědomit, že zdaleka
neplatí, že čím větší je šířka operandů, tím lépe, protože se mnoho operací
stále provádí nad &bdquo;pouhými&ldquo; bajty či šestnáctibitovými
operandy.</p>

<p>Celkový počet pracovních registrů přímo ovlivňuje strukturu instrukční sady,
protože je nutné rozhodnout, kolik registrů bude v&nbsp;instrukci zakódováno
(typicky jeden, dva či tři registry) a kolik bitů bude nutné obětovat pro
uložení indexu každého registru v&nbsp;instrukčním slově. Tvůrci <i>RISC-V</i>
uvažovali o možnosti použití šestnácti registrů a 16bitových operačních kódů
instrukcí, to by však pro tříadresový kód bylo stále málo; proto se rozhodli
použít 32 pracovních registrů a 32bitové operační kódy, stejně jako
v&nbsp;klasických &bdquo;ortodoxních&ldquo; RISCových architekturách. Vyhnuli
se ovšem zbytečně složitým řešením s&nbsp;registrovými okny apod.</p>

<p>Podívejme se nyní na tabulku, v&nbsp;níž jsou stručně (bez podrobnějších
vysvětlení různých specialit) vypsány počty a bitové šířky pracovních registrů
u některých oblíbených (i neoblíbených) a používaných mikroprocesorů a
mikroprocesorových jader. Z&nbsp;této tabulky je zřejmé, že klasické CISCové
procesory měly k&nbsp;dispozici menší počet registrů; navíc tyto registry
nebyly zcela univerzální, což platí jak pro procesory řady i386, tak i pro
Motorolu 68000 (rozdělení na datové a adresové registry). Naproti tomu většina
klasických RISCových procesorů, tj.&nbsp;MIPS a SPARC, se drží oblíbeného
schématu 31&times;32bitů, protože jeden z&nbsp;registrů obsahuje konstantní
nulu. Původní 32bitové čipy ARM (A32) stojí klasicky na pomezí mezi těmito
dvěma extrémy, což se změnilo s&nbsp;příchodem A64 (AArch 64):</p>

<table>
<tr><th>Řada</th><th>Architektura</th><th>Registry</th></tr>
<tr><td>Motorola 68000</td><td>CISC</td><td>8&times;32bit + 7&times;32bit</td></tr>
<tr><td>IA-32 (i386)</td><td>CISC</td><td>8&times;32bit</td></tr>
<tr><td>x86_64      </td><td>CISC</td><td>16&times;64bit</td></tr>
<tr><td>IA-64       </td><td>EPIC</td><td>128&times;64bit</td></tr>
<tr><td>Atmel AVR   </td><td>RISC</td><td>32&times;8bit</td></tr>
<tr><td>MIPS (32)   </td><td>RISC</td><td>31&times;32bit + zero</td></tr>
<tr><td>SPARC       </td><td>RISC</td><td>31&times;32bit + zero</td></tr>
<tr><td>ARM (A32)   </td><td>RISC</td><td>15&times;32bit</td></tr>
<tr><td>ARM (A64)   </td><td>RISC</td><td>31&times;64bit + zero</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>RISC-V      </td><td>RISC</td><td>31&times;32bit + zero</td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Operační kódy instrukcí u procesorových jader RISC-V</h2>

<p>Způsob kódování instrukcí v&nbsp;jádrech <i>RISC-V</i> je navržen takovým
způsobem, aby byla instrukční sada rozšiřitelná a aby se v&nbsp;budoucnu mohlo
začít pracovat na obdobě sady <i>Thumb</i> známé z&nbsp;řady ARM. <i>Thumb</i>
používá jen šestnáctibitové instrukce s&nbsp;omezeným repertoárem operací a
pracovních registrů, což ovšem zvyšuje hustotu strojového kódu.
V&nbsp;<i>RISC-V</i> se pro základní rozlišení mezi šestnáctibitovými
instrukcemi a instrukcemi větší šířky používají nejnižší dva bity instrukčního
slova, které pro 16bitové instrukce obsahují dvojici jedniček a pro instrukce
32bitové (či větší) pak jednu z&nbsp;kombinací 00, 01, 10. Dekodér tedy může
velmi snadno určit, jakým způsobem má instrukci zpracovat (<i>RISC-V</i> je
little endian, což je zde poměrně důležité):</p>

<pre>
 15             0
+----------------+
|xxxxxxxxxxxxxxaa| aa != 11
+----------------+
</pre>

<p>Ve skutečnosti však jdou možnosti <i>RISC-V</i> ještě dále, neboť
z&nbsp;dalších bitů operačního kódu instrukce lze zjistit, zda má instrukce
šířku 32bitů či zda je dokonce ještě širší. Používá se následující způsob
kódování, který teoreticky umožňuje tvořit instrukce o šířce až 320bitů, což by
pravděpodobně vedlo k&nbsp;monstróznímu čipu s&nbsp;architekturou <i>VLIW</i>
(i když: těžko říct, možnosti překladačů jsou dnes dosti značné
v&nbsp;porovnání s&nbsp;dobou, kdy <i>VLIW</i> začínalo). Nás bude samozřejmě
zajímat především kódování 32bitových operačních kódů, které vypadá
následovně:</p>

<pre>
 31            16 15             0
+----------------+----------------+
|xxxxxxxxxxxxxxxx|xxxxxxxxxxxbbb11| bb != 111
+----------------+----------------+
</pre>

<p>Pro (prozatím) teoretické instrukce o šířce 48 bitů, které dnes neexistují,
se používá tento formát:</p>

<pre>
 47            32 31            16 15             0
+----------------+----------------+----------------+
|xxxxxxxxxxxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxx011111|
+----------------+----------------+----------------+
</pre>

<p>A konečně pro instrukce s&nbsp;operačním kódem dlouhým 64 bitů by se použil
následující formát:</p>

<pre>
 63            48 47            32 31            16 15             0
+----------------+----------------+----------------+----------------+
|xxxxxxxxxxxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxxxxxxxxx|xxxxxxxxx0111111|
+----------------+----------------+----------------+----------------+
</pre>

<p>Poznámka: šířka operačních kódů instrukcí žádným způsobem neurčuje šířku
operandů. To, že základní instrukční sada <i>RISC-V</i> používá instrukce o
šířce 32 bitů a operandy o šířce taktéž 32 bitů, je z&nbsp;tohoto pohledu
vlastně &bdquo;náhoda&ldquo;. Ostatně vzpomeňme například na již zmíněnou
architekturu A32 (ARM) s&nbsp;instrukční sadou <i>Thumb</i> (32bitové operandy,
16bitové instrukce) či A64 (<i>AArch64</i>) s&nbsp;64bitovými operandy a
32bitovými instrukcemi.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Základní instrukční sada RV32I</h2>

<p>V&nbsp;základní instrukční sadě jsou definovány všechny instrukce, které
jsou zapotřebí pro implementaci plnohodnotného čistě RISCového jádra. Některé
instrukce, které by vážený čtenář možná v&nbsp;této sadě hledal, nejsou
v&nbsp;<i>RV32I</i> ve skutečnosti obsaženy. Především chybí instrukce pro
celočíselné násobení a dělení. Tyto ne čistě RISCové instrukce jsou definovány
v&nbsp;rozšířené sadě &bdquo;M&ldquo;, a to z&nbsp;toho důvodu, že například
pro implementaci <i>minion core</i> by byla implementace násobičky a děličky
zbytečným luxusem, ať již z&nbsp;hlediska ceny, tak i spotřeby. Dále zde
nenajdeme žádné instrukce pro atomický přístup k&nbsp;paměti; opět se jedná o
oblast, pro niž vzniklo rozšíření &bdquo;A&ldquo;. A konečně zde nehledejme ani
instrukce matematického koprocesoru.</p>

<p>Když nyní víme, co <i>RV32I</i> <strong>ne</strong>obsahuje, popišme si
implementované instrukce. Seznam je relativně krátký, což například znalce
architektury <i>MIPS</i> pravděpodobně nepřekvapí:</p>

<ol>
<li>Aritmetické a logické instrukce s&nbsp;dvojicí zdrojových registrů a registrem cílovým (tříadresový kód)</li>
<li>Aritmetické a logické instrukce s&nbsp;jedním zdrojovým registrem, konstantou a registrem cílovým</li>
<li>Nepodmíněné skoky (s&nbsp;případným uložením návratové adresy do registru)</li>
<li>Podmíněné skoky (rozvětvení)</li>
<li>Instrukce typu LOAD a STORE (práce s&nbsp;daty uloženými v&nbsp;paměti)</li>
<li>Systémové operace</li>
<li>Načtení aktuálního obsahu čítačů a časovačů (ty mají šířku 64 bitů a jsou tedy &bdquo;nekonečné&ldquo;)</li>
</ol>



<p><a name="k05"></a></p>
<h2 id="k05">5. Seznam instrukcí z&nbsp;instrukční sady RV32I</h2>

<p>Všechny instrukce, které jsou definovány v&nbsp;základní instrukční sadě
<i>RV32I</i>, jsou vypsány v&nbsp;tabulce pod tímto odstavcem. Instrukce jsou
rozděleny podle své funkce, i když ve skutečnosti by si <strong>LUI</strong> a
<strong>AUIPC</strong> zasloužily vlastní podkategorii:</p>

<table>
<tr><th colspan="2">ALU instrukce</th><th colspan="2">Skoky</th><th colspan="2">LOAD/STORE</th><th>Čítače</th><th>Ostatní</th></tr>
<tr><th>3 registry</th><th>konstanta</th><th>bez podmínky</th><th>s podmínkou</th><th>LOAD</th><th>STORE</th><th>&nbsp;</th><th>&nbsp;</th></th>
<tr><td>ADD </td><td>ADDI  </td><td>JAL   </td><td>BEQ   </td><td>LW    </td><td>SW    </td><td>RDCYCLE   </td><td>FENCE  </td></tr>
<tr><td>SUB </td><td>&nbsp;</td><td>JALR  </td><td>BNE   </td><td>LH    </td><td>SH    </td><td>RDCYCLEH  </td><td>FENCE.I</td></tr>
<tr><td>ADN </td><td>ANDI  </td><td>&nbsp;</td><td>BLT   </td><td>LHU   </td><td>      </td><td>RDTIME    </td><td>SCALL  </td></tr>
<tr><td>OR  </td><td>ORI   </td><td>&nbsp;</td><td>BLTU  </td><td>LB    </td><td>SB    </td><td>RDTIMEH   </td><td>SBREAK </td></tr>
<tr><td>XOR </td><td>XORI  </td><td>&nbsp;</td><td>BGE   </td><td>LBU   </td><td>&nbsp;</td><td>RDINSTRET </td><td>&nbsp; </td></tr>
<tr><td>SLL </td><td>SLLI  </td><td>&nbsp;</td><td>BGEU  </td><td>LUI   </td><td>&nbsp;</td><td>RDINSTRETH</td><td>&nbsp; </td></tr>
<tr><td>SRL </td><td>SRLI  </td><td>&nbsp;</td><td>&nbsp;</td><td>AUIPC </td><td>&nbsp;</td><td>&nbsp;    </td><td>&nbsp; </td></tr>
<tr><td>SRA </td><td>SRAI  </td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;    </td><td>&nbsp; </td></tr>
<tr><td>SLT </td><td>SLTI  </td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;    </td><td>&nbsp; </td></tr>
<tr><td>SLTU</td><td>SLTIU </td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;    </td><td>&nbsp; </td></tr>
</table>

<p>Ano, skutečně se jedná o pouhých 47 instrukcí!</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Čtyři způsoby kódování instrukcí RV32I</h2>

<p>Instrukce v&nbsp;základní sadě <i>RV32I</i> mají všechny konstantní šířku 32
bitů, přičemž instrukční slovo je rozděleno do několika bitových polí
s&nbsp;různou velikostí, což je naznačeno na následujícím obrázku:</p>

<pre>
31    25 24 20 19 15 14  11  7 6     0
+-------+-----+-----+---+-----+-------+
|  7b   | 5b  | 5b  |3b | 5b  |xxbbb11| bb!=111
+-------+-----+-----+---+-----+-------+
</pre>

<p>Podle způsobu využití jednotlivých bitových polí se instrukce dělí do čtyř
základních typů:</p>

<ol>
<li>Typ &bdquo;R&ldquo; pro tříadresový kód (specifikace třech registrů v&nbsp;instrukci)</li>
<li>Typ &bdquo;I&ldquo; pro instrukci se dvěma registry a 12bitovou konstantou (tato konstanta je použita jako druhý vstupní operand)</li>
<li>Typ &bdquo;S&ldquo; používaný pouze instrukcemi typu STORE (uložení obsahu registru do paměti) a BRANCH</li>
<li>Typ &bdquo;U&ldquo; pro instrukce s&nbsp;jediným registrem a 20bitovou konstantou</li>
</ol>

<p>Podívejme se nyní na způsob využití jednotlivých bitových polí
v&nbsp;instrukcích všech čtyř typů:</p>



<h3>Typ &bdquo;R&ldquo;</h3>

<p>Jedná se vlastně o nejjednodušší formát, v&nbsp;němž se tři pětibitová pole
používají pro uložení indexů dvou zdrojových registrů a jednoho registru
cílového. Jedním z&nbsp;registrů samozřejmě může být i <strong>x0</strong>
obsahující konstantní nulu (tím lze &bdquo;zadarmo&ldquo; vytvořit
pseudoinstrukci <strong>MOV</strong> apod.):</p>

<pre>
31    25 24 20 19 15 14  11  7 6     0
+-------+-----+-----+---+-----+-------+
| func7 | rs2 | rs1 |fn3| rd  | opcode|
+-------+-----+-----+---+-----+-------+
</pre>



<h3>Typ &bdquo;I&ldquo;</h3>

<p>Mnoho (nejenom) aritmetických instrukcí používá namísto jednoho zdrojového
registru konstantu. To je zajištěno instrukcemi typu &bdquo;I&ldquo;.
Povšimněte si, že dvanáctibitová konstanta je umístěna v&nbsp;horních dvanácti
bitech instrukčního slova, což není náhoda, protože konstanta je chápána jako
číslo se znaménkem (<i>signed</i>), takže se díky umístění znaménka v&nbsp;31
bitu (nejvyšším, MSB) zjednoduší návrh ALU:</p>

<pre>
31          20 19 15 14  11  7 6     0
+-------------+-----+---+-----+-------+
|konstanta 12b| rs1 |fn3| rd  | opcode|
+-------------+-----+---+-----+-------+
</pre>



<h3>Typ &bdquo;S&ldquo;</h3>

<p>U těchto instrukcí se specifikují dva zdrojové registry, <i>žádný</i> cílový
registr a konstanta je rozdělena na dvě části. Toto rozdělení má svůj význam,
protože se při návrhu instrukční sady dbalo na to, aby se indexy pracovních
registrů v&nbsp;instrukčním slovu vždy nacházely na stejné pozici, což může
zjednodušit a zrychlit instrukční dekodér:</p>

<pre>
31    25 24 20 19 15 14  11  7 6     0
+-------+-----+-----+---+-----+-------+
|kons.7b| rs2 | rs1 |fn3|k.5b | opcode|
+-------+-----+-----+---+-----+-------+
</pre>



<h3>Typ &bdquo;U&ldquo;</h3>

<p>Instrukce s&nbsp;jediným cílovým registrem a 20bitovou konstantou je použita
pouze u třech instrukcí: <strong>LUI</strong>, <strong>AUIPC</strong> a
<strong>JAL</strong>. U těchto instrukcí se vyžaduje využití co nejdelší
konstanty, k&nbsp;čemuž se ostatně dostaneme v&nbsp;navazujících
kapitolách:</p>

<pre>
31                       11  7 6     0
+-----------------------+-----+-------+
|   konstanta 20 bitů   | rd  | opcode|
+-----------------------+-----+-------+
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Aritmetické instrukce s&nbsp;registry (tříadresový kód)</h2>

<p>Existuje celkem deset aritmetických a logických instrukcí
s&nbsp;tříadresovým kódem, tj.&nbsp;se dvěma zdrojovými registry a jediným
registrem cílovým. Používá se zde kódování typu &bdquo;R&ldquo;:</p>

<table>
<tr><th> #</th><th>Instrukce</th><th>Význam</th></tr>
<tr><td> 1</td><td>ADD </td><td>součet</td></tr>
<tr><td> 2</td><td>SUB </td><td>rozdíl</td></tr>
<tr><td> 3</td><td>AND </td><td>logický součin bit po bitu</td></tr>
<tr><td> 4</td><td>OR  </td><td>logický součet bit po bitu</td></tr>
<tr><td> 5</td><td>XOR </td><td>nonekvivalence</td></tr>
<tr><td> 6</td><td>SLL </td><td>bitový posun doleva</td></tr>
<tr><td> 7</td><td>SRL </td><td>bitový posun doprava</td></tr>
<tr><td> 8</td><td>SRA </td><td>aritmetický posun doprava (zachovává se znaménko)</td></tr>
<tr><td> 9</td><td>SLT </td><td>porovnání registrů na operaci &lt; (se znaménkem), výsledek je 0 nebo 1</td></tr>
<tr><td>10</td><td>SLTU</td><td>porovnání registrů na operaci &lt; (bez znaménka), výsledek je 0 nebo 1</td></tr>
</table>

<p>Jednoduchá otázka pro čtenáře: v&nbsp;instrukční sadě neexistuje prázdná
instrukce <strong>NOP</strong> se speciálním kódem, pouze existuje doporučení
pro její implementaci jinou instrukcí. Jak by se dala instrukce
<strong>NOP</strong> implementovat pomocí některé z&nbsp;výše popsaných
instrukcí? (možností je více)</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Aritmetické instrukce s&nbsp;konstantou</h2>

<p>Aritmetických instrukcí s&nbsp;konstantou (rozšířenou z&nbsp;dvanácti bitů
na 32 bitů se znaménkem) existuje pouze devět a nikoli deset. Je tomu tak
z&nbsp;toho důvodu, že hypotetická operace <strong>SUBI</strong> je (až na
jednu hodnotu) shodná s&nbsp;operací <strong>ADDI</strong>, pouze konstanta
bude mít jiné znaménko:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Význam</th></tr>
<tr><td>1</td><td>ADDI</td><td>součet</td></tr>
<tr><td>2</td><td>ANDI</td><td>logický součin bit po bitu</td></tr>
<tr><td>3</td><td>ORI </td><td>logický součet bit po bitu</td></tr>
<tr><td>4</td><td>XORI</td><td>nonekvivalence</td></tr>
<tr><td>5</td><td>SLLI</td><td>bitový posun doleva (zde má konstanta jen pět bitů, více netřeba)</td></tr>
<tr><td>6</td><td>SRLI</td><td>bitový posun doprava (dtto)</td></tr>
<tr><td>7</td><td>SRAI</td><td>aritmetický posun doprava (zachovává se znaménko)</td></tr>
<tr><td>8</td><td>SLTI</td><td>porovnání registru s&nbsp;konstantou na operaci &lt; (se znaménkem), výsledek je 0 nebo 1</td></tr>
<tr><td>9</td><td>SLTIU</td><td>porovnání registrů s&nbsp;konstantou na operaci &lt; (bez znaménka), výsledek je 0 nebo 1</td></tr>
</table>

<p>Povšimněte si, že naprostá většina operací s&nbsp;konstantou považuje tuto
12bitovou konstantu za hodnotu se znaménkem, což mj.&nbsp;umožňuje
implementovat například negaci všech bitů v&nbsp;registru. Otázka pro čtenáře:
kterou instrukcí by se dala bitová negace (<strong>NOT</strong>)
implementovat?</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Instrukce typu LOAD a STORE</h2>

<p>Architektura <i>RISC-V</i> obsahuje instrukce typu LOAD a STORE, které mohou
pracovat na úrovni bajtů, šestnáctibitových slov i 32bitových slov. Pro
instrukce typu LOAD platí, že se adresa nachází v&nbsp;libovolném zdrojovém
registru, k&nbsp;němuž je přičten offset, který je součástí instrukčního slova,
hodnota je uložena do cílového registru. Totéž platí pro operaci typu STORE,
zakódování je v&nbsp;tomto případě odlišné, protože se zde nenachází cílový
registr:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Význam</th></tr>
<tr><td>1</td><td>LB</td><td>načtení bajtu, znaménkové rozšíření do 32 bitů</td></tr>
<tr><td>2</td><td>LBU</td><td>načtení bajtu, vynulování horních 24 bitů cílového registru</td></tr>
<tr><td>3</td><td>LH</td><td>načtení 16bitového slova, znaménkové rozšíření do 32 bitů</td></tr>
<tr><td>4</td><td>LHU</td><td>načtení 16bitového slova, vynulování horních 16 bitů cílového registru</td></tr>
<tr><td>4</td><td>LW</td><td>načtení 32bitového slova</td></tr>
<tr><td>5</td><td>LUI</td><td>načtení 20bitové konstanty do <i>horních</i> 20 bitů</td></tr>
<tr><td>6</td><td>SB</td><td>uložení bajtu (spodních osmi bitů registru)</td></tr>
<tr><td>7</td><td>SH</td><td>uložení 16bitového slova (spodních šestnácti bitů registru)</td></tr>
<tr><td>8</td><td>SW</td><td>uložení 32bitového slova</td></tr>
<tr><td>9</td><td>AUIPC</td><td>spočítá 32bitový offset z&nbsp;20bitové konstanty + PC a uloží do registru</td></tr>
</table>

<p>Třetí otázka: instrukce <strong>LUI</strong> dokáže naplnit horních 20 bitů
registru konstantou, která je přímo součástí instrukčního slova. Jak se doplní
spodních dvanáct bitů? Opět: máme k&nbsp;dispozici více možností.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Instrukce nepodmíněného skoku (JUMP)</h2>

<p>Nepodmíněné skoky jsou implementovány dvojicí instrukcí <strong>JAL</strong>
a <strong>JALR</strong>. Obě instrukce ukládají návratovou adresu skoku do
specifikovaného cílového registru, ovšem výpočet cíle skoku se liší.
V&nbsp;prvním případě se k&nbsp;registru PC přičte 20bitová konstanta (se
znaménkem), ve druhém případě je přičtena pouze 12bitová konstanta, ovšem
k&nbsp;libovolnému registru. Povšimněte si, že se vlastně &bdquo;zadarmo&ldquo;
dá vytvářet PIC (Position Independent Code):</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Význam</th></tr>
<tr><td>1</td><td>JAL</td><td>skok na adresu vypočtenou z&nbsp;registru a offsetu (20 bitů)</td></tr>
<tr><td>2</td><td>JALR</td><td>skok na adresu uloženou ve zdrojovém registru</td></tr>
</table>

<p>Poslední úkol pro čtenáře: jak je to s&nbsp;instrukcemi <strong>J</strong>
či <strong>JUMP</strong>? Lze je nějak implementovat? A co skok na absolutní
adresu?</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Instrukce rozvětvení (BRANCH)</h2>

<p>U instrukcí pro rozvětvení s&nbsp;podmínkou se vždy porovnají dva registry a
na základě výsledků porovnání se skok buď provede nebo neprovede. Relativní
adresa skoku (offset) je uložen přímo v&nbsp;instrukčním slovu. Existuje celkem
šest podmínek, přičemž zbývající podmínky se implementují jednoduše: prohodí se
první a druhý zdrojový registr:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Význam</th></tr>
<tr><td>1</td><td>BEQ </td><td>porovnání dvou registrů a skok při splnění podmínky &bdquo;rovno&ldquo;</td></tr>
<tr><td>2</td><td>BNE </td><td>porovnání dvou registrů a skok při splnění podmínky &bdquo;nerovno&ldquo;</td></tr>
<tr><td>3</td><td>BLT </td><td>porovnání dvou registrů a skok při splnění podmínky &bdquo;menší než&ldquo;</td></tr>
<tr><td>4</td><td>BGE </td><td>porovnání dvou registrů a skok při splnění podmínky &bdquo;větší nebo rovno&ldquo;</td></tr>
<tr><td>5</td><td>BLTU</td><td>porovnání dvou registrů a skok při splnění podmínky &bdquo;menší než&ldquo;</td></tr>
<tr><td>6</td><td>BGEU</td><td>porovnání dvou registrů a skok při splnění podmínky &bdquo;větší nebo rovno&ldquo;</td></tr>
</table>

<p>Na tomto místě si připomeňme poznámku uvedenou minule: zatímco u <i>MIPS</i>
existovaly jen dvě instrukce pro podmíněné skoky (<strong>beq</strong>,
<strong>bne</strong>) doplněné o instrukce <strong>slt</strong> a
<strong>slti</strong>), je u architektury <i>RISC-V</i> sada podmíněných skoků
doplněna na <strong>beq</strong>, <strong>bne</strong>, <strong>blt</strong> a
<strong>bge</strong>, přičemž další kombinace (<strong>bgt</strong> apod.)
vzniknou jednoduše prohozením obsahu prvního a druhého registru. Opět nesmíme
zapomenout na registr <strong>x0</strong> s&nbsp;konstantní nulou, který
umožňuje realizovat skoky typu <strong>bz</strong> a <strong>bnz</strong>.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Comparing four 32-bit soft processor cores<br />
<a href="http://www.eetimes.com/author.asp?section_id=14&doc_id=1286116">http://www.eetimes.com/author.asp?section_id=14&doc_id=1286116</a>
</li>

<li>RISC-V Instruction Set<br />
<a href="http://riscv.org/download.html#spec_compressed_isa">http://riscv.org/download.html#spec_compressed_isa</a>
</li>

<li>RISC-V Spike (ISA Simulator)<br />
<a href="http://riscv.org/download.html#isa-sim">http://riscv.org/download.html#isa-sim</a>
</li>

<li>RISC-V (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/RISC-V">https://en.wikipedia.org/wiki/RISC-V</a>
</li>

<li>David Patterson (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/David_Patterson_(computer_scientist)">https://en.wikipedia.org/wiki/David_Patterson_(computer_scientist)</a>
</li>

<li>OpenRISC (oficiální stránky projektu)<br />
<a href="http://openrisc.io/">http://openrisc.io/</a>
</li>

<li>OpenRISC architecture<br />
<a href="http://openrisc.io/architecture.html">http://openrisc.io/architecture.html</a>
</li>

<li>EmulĂĄtor OpenRISC CPU v JavaScriptu<br />
<a href="http://s-macke.github.io/jor1k/demos/main.html">http://s-macke.github.io/jor1k/demos/main.html</a>
</li>

<li>OpenRISC (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/OpenRISC">https://en.wikipedia.org/wiki/OpenRISC</a>
</li>

<li>OpenRISC - instrukce<br />
<a href="http://sourceware.org/cgen/gen-doc/openrisc-insn.html">http://sourceware.org/cgen/gen-doc/openrisc-insn.html</a>
</li>

<li>OpenRISC - slajdy z přednášky o projektu<br />
<a href="https://iis.ee.ethz.ch/~gmichi/asocd/lecturenotes/Lecture6.pdf">https://iis.ee.ethz.ch/~gmichi/asocd/lecturenotes/Lecture6.pdf</a>
</li>

<li>Maska mikroprocesoru RISC 1<br />
<a href="http://www.cs.berkeley.edu/~pattrsn/Arch/RISC1.jpg">http://www.cs.berkeley.edu/~pattrsn/Arch/RISC1.jpg</a>
</li>

<li>Maska mikroprocesoru RISC 2<br />
<a href="http://www.cs.berkeley.edu/~pattrsn/Arch/RISC2.jpg">http://www.cs.berkeley.edu/~pattrsn/Arch/RISC2.jpg</a>
</li>

<li>C.E. Sequin and D.A.Patterson: Design and Implementation of RISC I<br />
<a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/1982/CSD-82-106.pdf">http://www.eecs.berkeley.edu/Pubs/TechRpts/1982/CSD-82-106.pdf</a>
</li>

<li>Berkeley RISC<br />
<a href="http://en.wikipedia.org/wiki/Berkeley_RISC">http://en.wikipedia.org/wiki/Berkeley_RISC</a>
</li>

<li>Great moments in microprocessor history<br />
<a href="http://www.ibm.com/developerworks/library/pa-microhist.html">http://www.ibm.com/developerworks/library/pa-microhist.html</a>
</li>

<li>Microprogram-Based Processors<br />
<a href="http://research.microsoft.com/en-us/um/people/gbell/Computer_Structures_Principles_and_Examples/csp0167.htm">http://research.microsoft.com/en-us/um/people/gbell/Computer_Structures_Principles_and_Examples/csp0167.htm</a>
</li>

<li>Great Microprocessors of the Past and Present<br />
<a href="http://www.cpushack.com/CPU/cpu1.html">http://www.cpushack.com/CPU/cpu1.html</a>
</li>

<li>A Brief History of Microprogramming<br />
<a href="http://www.cs.clemson.edu/~mark/uprog.html">http://www.cs.clemson.edu/~mark/uprog.html</a>
</li>

<li>What is RISC?<br />
<a href="http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/whatis/">http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/whatis/</a>
</li>

<li>RISC vs. CISC<br />
<a href="http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/risccisc/">http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/risccisc/</a>
</li>

<li>RISC and CISC definitions:<br />
<a href="http://www.cpushack.com/CPU/cpuAppendA.html">http://www.cpushack.com/CPU/cpuAppendA.html</a>
</li>

<li>FPGA<br />
<a href="https://cs.wikipedia.org/wiki/Programovateln%C3%A9_hradlov%C3%A9_pole">https://cs.wikipedia.org/wiki/Programovateln%C3%A9_hradlov%C3%A9_pole</a>
</li>

<li>The Evolution of RISC<br />
<a href="http://www.ibm.com/developerworks/library/pa-microhist.html#sidebar1">http://www.ibm.com/developerworks/library/pa-microhist.html#sidebar1</a>
</li>

<li>SPARC Processor Family Photo<br />
<a href="http://thenetworkisthecomputer.com/site/?p=243">http://thenetworkisthecomputer.com/site/?p=243</a>
</li>

<li>SPARC: Decades of Continuous Technical Innovation<br />
<a href="http://blogs.oracle.com/ontherecord/entry/sparc_decades_of_continuous_technical">http://blogs.oracle.com/ontherecord/entry/sparc_decades_of_continuous_technical</a>
</li>

<li>The SPARC processors<br />
<a href="http://www.top500.org/2007_overview_recent_supercomputers/sparc_processors">http://www.top500.org/2007_overview_recent_supercomputers/sparc_processors</a>
</li>

<li>Reduced instruction set computing (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Reduced_instruction_set_computer">http://en.wikipedia.org/wiki/Reduced_instruction_set_computer</a>
</li>

<li>MIPS architecture (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/MIPS_architecture">http://en.wikipedia.org/wiki/MIPS_architecture</a>
</li>

<li>Very long instruction word (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Very_long_instruction_word">http://en.wikipedia.org/wiki/Very_long_instruction_word</a>
</li>

<li>Classic RISC pipeline (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Classic_RISC_pipeline">http://en.wikipedia.org/wiki/Classic_RISC_pipeline</a>
</li>

<li>R2000 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R2000_(microprocessor)">http://en.wikipedia.org/wiki/R2000_(microprocessor)</a>
</li>

<li>R3000 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R3000">http://en.wikipedia.org/wiki/R3000</a>
</li>

<li>R4400 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R4400">http://en.wikipedia.org/wiki/R4400</a>
</li>

<li>R8000 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R8000">http://en.wikipedia.org/wiki/R8000</a>
</li>

<li>R10000 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R10000">http://en.wikipedia.org/wiki/R10000</a>
</li>

<li>SPARC (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Sparc">http://en.wikipedia.org/wiki/Sparc</a>
</li>

<li>CPU design (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/CPU_design">http://en.wikipedia.org/wiki/CPU_design</a>
</li>

<li>Control unit (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Control_unit">http://en.wikipedia.org/wiki/Control_unit</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

