<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Mikroprocesory a mikrořadiče s jádrem SH-2A aneb vítězství superskalární architektury</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Mikroprocesory a mikrořadiče s jádrem SH-2A aneb vítězství superskalární architektury</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části článku o mikroprocesorech a mikrořadičích s architekturou SuperH se budeme věnovat popisu instrukční sady SH-2A. Jedná se o rozšíření původní sady SH-2 o instrukce užitečné zejména v mikrořadičích a taktéž při zpracování signálu, proto SH-2A nalezneme i v mnoha moderních čipech.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Mikroprocesory a mikrořadiče s jádrem SH-2A aneb vítězství superskalární architektury</a></p>
<p><a href="#k02">2. Základní vlastnosti čipů SH-2A</a></p>
<p><a href="#k03">3. Harvardská architektura a externí sběrnice</a></p>
<p><a href="#k04">4. Banky pracovních registrů</a></p>
<p><a href="#k05">5. Rozšíření možností při načítání konstant</a></p>
<p><a href="#k06">6. Instrukce určené pro provádění bitových operací</a></p>
<p><a href="#k07">7. Uložení či načtení většího množství registrů</a></p>
<p><a href="#k08">8. Oříznutí příliš velkých či malých hodnot při zpracování signálu instrukcí <strong>CLIPx</strong></a></p>
<p><a href="#k09">9. Nové instrukce pro násobení a dělení</a></p>
<p><a href="#k10">10. Přídavné instrukce pro práci se stavovým bitem T</a></p>
<p><a href="#k11">11. Použití dvanáctibitového offsetu při adresování dat v&nbsp;operační paměti</a></p>
<p><a href="#k12">12. Další nové instrukce</a></p>
<p><a href="#k13">13. Jádro SH2A-FPU</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Mikroprocesory a mikrořadiče s jádrem SH-2A aneb vítězství superskalární architektury</h2>

<p>Čipy s&nbsp;původní instrukční sadou <i>SH-2</i>, kterou jsme si popsali
v&nbsp;předchozích dvou článcích, se sice doposud používají, ale většinou se
již setkáme buď s&nbsp;instrukční sadou <i>SH-4</i> (tou se budeme zabývat
příště) nebo s&nbsp;instrukční sadou <i>SH-2A</i>. Mikroprocesory a mikrořadiče
<i>SH-2A</i> jsou při použití shodné hodinové frekvence obecně mnohem
výkonnější, než původní jádra <i>SH-2</i>. Větší výpočetní rychlost
<i>SH-2A</i> je způsobena více faktory; nejdůležitější je však to, že
v&nbsp;čipech <i>SH-2A</i> je použita superskalární architektura, takže je
možné (samozřejmě v&nbsp;ideálním případě, tj.&nbsp;pokud nedojde ke
konfliktům) v&nbsp;jednom taktu dokončit dvě instrukce. Superskalární
architektura je dále podporována použitím Harvardského procesoru, kdy je datová
sběrnice oddělena od sběrnice použité pro načítání instrukcí (tím se výrazně
sníží počet kolizí při přístupu do operační paměti). Navíc je instrukční sada
<i>SH-2A</i> doplněna o řadu nových instrukcí, s&nbsp;nimiž se seznámíme
v&nbsp;navazujících kapitolách.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní vlastnosti čipů SH-2A</h2>

<p>Čipy <i>SH-2A</i> byly navrženy zejména s&nbsp;ohledem na jejich praktické
použití v&nbsp;mikrořadičích a při zpracování signálů. Můžeme zde vidět určitý
odklon od čisté RISCové architektury, který je zejména patrný u instrukcí
s&nbsp;32bitovým instrukčním slovem, protože původní instrukce měly konstantní
šířku šestnácti bitů (to sice pravděpodobně způsobilo nějaké komplikace
v&nbsp;dekodéru instrukcí, ovšem na druhou stranu to vedlo ke zvýšení
efektivity kódu). Dále byly přidány takzvané banky registrů, s&nbsp;jejichž
využitím bylo možné zrychlit vstup a zahájení běhu přerušovací rutiny na šest
cyklů. Přidány byly instrukce určené pro zjednodušení zpracování signálů
(clipping), dále pak instrukce pro implementaci Booleovského procesoru (operace
s&nbsp;jednotlivými bity), blokové přenosy registrů atd. Volitelně bylo možné
čip rozšířit i o matematický koprocesor s&nbsp;vlastní sadou pracovních
registrů a instrukcí.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Harvardská architektura a externí sběrnice</h2>

<p>Původní pipeline s&nbsp;pěti řezy, o níž jsme se zmínili při popisu čipů
<i>SH-2</i>, je v&nbsp;případě čipů <i>SH-2A</i> rozšířena takovým způsobem,
aby bylo možné zpracovávat současně dvě instrukce. Uvnitř čipů nalezneme
dvojici sběrnic pojmenovaných F-bus a M-bus, přičemž první sběrnice slouží
pouze pro načítání instrukcí (zápis do paměti instrukcí se neprovádí, u
mikrořadičů je to ještě zvýrazněno použitím Flash EEPROM namísto běžné DRAM) a
druhá sběrnice slouží pro přenos dat. Díky tomuto poměrně striktnímu oddělení
instrukcí od dat bylo možné dosáhnout toho, aby se poslední fáze zpracování
instrukce v&nbsp;pipeline (<i>WB &ndash; write back</i>) popř.&nbsp;prostřední
fáze (<i>MA &ndash; memory access</i>) mohla překrývat s&nbsp;první fází jiné
instrukce (<i>IF &ndash; instruction fetch</i>), a to bez vzniku konfliktu.
Toto rozdělení je dále podpořeno i rozdělením cache první úrovně, která má pro
instrukce kapacitu 8 kB a pro data taktéž 8 kB.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Banky pracovních registrů</h2>

<p>Zejména pro rychlé reakce na přerušení (spuštění algoritmu
v&nbsp;přerušovací rutině) jsou procesory <i>SH-2A</i> vybaveny takzvanými
bankami registrů. V&nbsp;každém banku je uloženo devatenáct 32bitových registrů
&ndash; patnáct pracovních registrů R0 až R14 (bez R15), řídicí registr GBR,
registry MACH a MACL popsané minule (viz operaci <i>multiply and
accumulate</i>) a registr PR. Celkově je k&nbsp;dispozici patnáct banků, mezi
nimiž je možné se přepínat. Přepnutím je zde myšlena operace, při níž se naplní
všech devatenáct zmíněných registrů hodnotami z&nbsp;vybraného banku. Mezi
aktuálním bankem a jiným bankem lze přenášet vždy obsah jednoho registru
instrukcemi <strong>LDBANK</strong> a <strong>STBANK</strong>, viz též
následující tabulka instrukcí (zdrojovým a cílovým registrem v&nbsp;aktuálním
banku je vždy R0):</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis instrukce</th></tr>
<tr><td>1</td><td>RESBANK</td><td>9</td><td>přepnutí banky registrů a tím pádem přepsání všech 19 výše zmíněných registrů</td></tr>
<tr><td>2</td><td>STBANK</td><td>7</td><td>uložení registru R0 do vybrané banky registrů</td></tr>
<tr><td>3</td><td>LDBANK</td><td>6</td><td>načtení registru R0 z&nbsp;vybrané banky registrů</td></tr>
</table>



<p><a name="k05"></a></p>
<h2 id="k05">5. Rozšíření možností při načítání konstant</h2>

<p>Mnoho typů RISCových procesorů, včetně původních čipů s&nbsp;instrukční
sadou <i>SH-2</i>, trpí jedním společným nedostatkem &ndash; kvůli použití
instrukcí pevné délky, která většinou odpovídá bitové šířce zpracovávaných
operandů (typicky 32 bitů) není možné, aby v&nbsp;instrukční sadě existovala
instrukce, která dokáže načíst celou 32bitovou konstantu. U původních procesorů
<i>SH-2</i> byla situace ještě o něco horší, protože kvůli 16bitovým slovům
byla ve skutečnosti šířka konstant omezena na pouhých osm bitů. Typickým
příkladem je instrukce <strong>MOV #imm, Rn</strong> (nejdříve se zapisuje
zdrojový operand, poté operand cílový) s&nbsp;formátem:</p>

<pre>
15  12    8    4    0
+----+----+----+----+
|1110|dddd|iiii iiii|
+----+----+----+----+
</pre>

<p>Toto poměrně zásadní omezení bylo u instrukční sady <i>SH-2A</i> odstraněno,
protože několik vybraných instrukcí má šířku 32 bitů. To ve skutečnosti
nepřináší velká omezení, protože šířka externí sběrnice pro načítání instrukcí
je 32bitová, takže se &bdquo;pouze&ldquo; zmenší datový tok u několika
instrukcí. U dvou nových instrukcí pojmenovaných <strong>MOVI20</strong> a
<strong>MOVI20S</strong> je použita 20bitová hodnota, která je při načítání
instrukčního slova znaménkově rozšířena, tj.&nbsp;v&nbsp;praxi lze pracovat
s&nbsp;hodnotami od -2<sup>19</sup> do 2<sup>19</sup>-1. Povšimněte si, že obě
nové instrukce trvají pouhý jeden takt:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis instrukce</th></tr>
<tr><td>1</td><td>MOVI20 </td><td>1</td><td>přenos konstanty o šířce 20 bitů do registru Rn</td></tr>
<tr><td>2</td><td>MOVI20S</td><td>1</td><td>dtto, ale konstanta je posunuta o osm bitů doleva</td></tr>
</table>

<p>Formát instrukce <strong>MOVI20</strong> vypadá takto (<i>dddd</i> je index
registru Rn a <i>iiii</i> první čtyři bity konstanty):</p>

<pre>
15  12    8    4    0    15  12    8    4    0
+----+----+----+----+    +----+----+----+----+
|0000|dddd|iiii|0000|    |spodních 16 bitů # |
+----+----+----+----+    +----+----+----+----+
</pre>

<p>Formát instrukce <strong>MOVI20S</strong> je prakticky stejný, až na
nejnižší bit prvního instrukčního slova:</p>

<pre>
15  12    8    4    0    15  12    8    4    0
+----+----+----+----+    +----+----+----+----+
|0000|dddd|iiii|0001|    |spodních 16 bitů # |
+----+----+----+----+    +----+----+----+----+
</pre>

<p>V&nbsp;praxi se tedy můžeme setkat s&nbsp;následujícími způsoby načtení
konstanty. U osmibitové konstanty se použije obyčejná instrukce
<strong>MOV</strong>, u konstanty 20bitové instrukce <strong>MOVI20</strong>, u
konstanty s&nbsp;šířkou do 28 bitů můžeme použít kombinaci
<strong>MOVI20S+OR</strong> a konečně pokud je konstanta širší, nezbývá nic
jiného, než ji uložit někam za aktuální subrutinu a načíst ji adresováním přes
hodnotu registru PC+offset (výběr samozřejmě v&nbsp;případě vyššího
programovacího jazyka provádí překladač):</p>

<table>
<tr><th>Konstanta</th><th>Sekvence instrukcí</th></tr>
<tr><td>8 bitů </td><td>MOV #konstanta, R0</td></tr>
<tr><td>16 bitů</td><td>MOVI20 #konstanta, R0</td></tr>
<tr><td>20 bitů</td><td>MOVI20 #konstanta, R0</td></tr>
<tr><td>28 bitů</td><td>MOVI20S #konstanta, R0<br/>OR #k8, R0</td></tr>
<tr><td>32 bitů</td><td>MOV @(offset, PC), R0</td></tr>
</table>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instrukce určené pro provádění bitových operací</h2>

<p>V&nbsp;oblasti mikrořadičů se již od dob slavného (a bohužel dodnes
používaného) čipu <i>Intel 8051 (MCS-51)</i> můžeme setkat s&nbsp;implementací
takzvaného Booleovského procesoru. Tímto poněkud nadneseným jménem se označuje
sada instrukcí, které dokážou pracovat na úrovni jednotlivých bitů a nikoli
celých slov, a to (většinou) dokonce takovým způsobem, že i přístup do paměti
či do řídicích registrů periferních zařízení je prováděn po jednom bitu
(například negace jediného bitu je rozdílná operace od přečtení bajtu/slova do
akumulátoru, negace vybraného bitu a zápis celého bajtu/slova zpět). Jen pro
zajímavost: na již zmíněném mikrořadiči <i>MCS-51</i> je implementován úplný
Booleovský procesor s&nbsp;jednobitovým akumulátorem (tím je příznak
<strong>C</strong>/carry), 128 bitovou oblastí RAM a 128 bitovou oblastí
speciálních řídicích registrů (SFR).</p>

<p>Tento původní Booleovský procesor měl k&nbsp;dispozici devět instrukcí.
S&nbsp;podobným konceptem jsme se seznámili i při popisu jader <i>Cortex-M3</i>
a nalezneme ho i u čipů s&nbsp;instrukční sadou <i>SH-2A</i>, kde je
k&nbsp;dispozici čtrnáct nových instrukcí. Ty lze rozdělit do čtyř skupin.
V&nbsp;první skupině nalezneme instrukce pro vynulování či nastavení vybraného
bitu pracovního registru. Tyto instrukce trvají jeden takt. Ve druhé skupině
jsou instrukce, které vybraný bit pracovního registru přenesou do příznakového
bitu <strong>T</strong> či naopak. I tyto instrukce trvají jeden takt. Třetí
skupinu tvoří instrukce pro nastavení či vynulování bitu v&nbsp;paměti; zde si
již ovšem počkáme tři takty. A konečně v&nbsp;poslední skupině jsou instrukce,
které zkombinují příznakový bit <strong>T</strong> s&nbsp;bitem načteným
z&nbsp;operační paměti. I tyto instrukce trvají tři takty:</p>

<table>
<tr><th> #</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis instrukce</th></tr>
<tr><td> 1</td><td>BCLR</td><td>1</td><td>vynulování i-tého bitu registru Rn</td></tr>
<tr><td> 2</td><td>BSET</td><td>1</td><td>nastavení i-tého bitu registru Rn (na 1)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>BLD</td><td>1</td><td>přenos i-tého bitu registru Rn do příznakového bitu <strong>T</strong></td></tr>
<tr><td> 4</td><td>BST</td><td>1</td><td>přenos příznakového bitu <strong>T</strong> do i-tého bitu registru Rn</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>BCLR.B</td><td>3</td><td>uložení 0 na i-tý bit na adrese (disp + Rn))</td></tr>
<tr><td> 6</td><td>BSET.B</td><td>3</td><td>uložení 1 na i-tý bit na adrese (disp + Rn))</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>BLD.B    </td><td>3</td><td>načtení i-tého bitu z&nbsp;adresy (disp + Rn) a uložení do T</td></tr>
<tr><td> 8</td><td>BLDNOT.B </td><td>3</td><td>negace předchozího výpočtu</td></tr>
<tr><td> 9</td><td>BST.B    </td><td>3</td><td>uložení T do i-tého bitu na adrese (disp + Rn)</td></tr>
<tr><td>10</td><td>BAND.B   </td><td>3</td><td>(i-tý bit z&nbsp;adresy (disp + Rn)) &and; T &rarr; T</td></tr>
<tr><td>11</td><td>BANDNOT.B</td><td>3</td><td>negace předchozího výpočtu</td></tr>
<tr><td>12</td><td>BOR.B    </td><td>3</td><td>(i-tý bit z&nbsp;adresy (disp + Rn)) | T &rarr; T</td></tr>
<tr><td>13</td><td>BORNOT.B </td><td>3</td><td>negace předchozího výpočtu</td></tr>
<tr><td>14</td><td>BXOR.B   </td><td>3</td><td>(i-tý bit z&nbsp;adresy (disp + Rn)) &oplus; T &rarr; T</td></tr>
</table>



<p><a name="k07"></a></p>
<h2 id="k07">7. Uložení či načtení většího množství registrů</h2>

<p>Zajímavé a přitom užitečné je, že i u mikroprocesorů a mikrořadičů
s&nbsp;instrukční sadou <i>SH-2A</i> došlo k&nbsp;přidání instrukcí sloužících
pro načtení většího množství registrů z&nbsp;operační paměti či naopak pro
uložení většího množství registrů zpět do operační paměti. Podobné instrukce
nalezneme například i u mikroprocesorů ARM s&nbsp;instrukcemi
<strong>LDM</strong> a <strong>STM</strong> (viz též [<a
href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/ch02s08s01.html">1</a>]).
V&nbsp;instrukční sadě <i>SH-2A</i> sice nemáme možnost si zvolit registry
pomocí bitové masky, ale určitá volba zde přece jen existuje &ndash; můžeme
zvolit rozsah indexů ukládaných či načítaných registrů od 0 do R14 (poslední
registr R15 je použit pro adresování). Podívejme se na čtveřici nových
instrukcí, která se pro tyto účely používá:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis instrukce</th></tr>
<tr><td>1</td><td>MOVML.L Rm,@-R15</td><td>1 až 16</td><td>zápis registrů R0..Rm do paměti adresované R15</td></tr>
<tr><td>2</td><td>MOVML.L @R15+,Rn</td><td>1 až 16</td><td>přečtení registrů R0..Rn z paměti adresované R15</td></tr>
<tr><td>3</td><td>MOVMU.L Rm,@-R15</td><td>1 až 16</td><td>zápis PR a registrů Rn..R14 do paměti adresované R15</td></tr>
<tr><td>4</td><td>MOVMU.L @R15+,Rn</td><td>1 až 16</td><td>přečtení registrů PR a Rn..R14 z paměti adresované R15</td></tr>
</table>

<p>Povšimněte si, že doba trvání těchto instrukcí je proměnná a pochopitelně
závisí na počtu ukládaných či načítaných registrů.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Oříznutí příliš velkých či malých hodnot při zpracování signálu instrukcí <strong>CLIPx</strong></h2>

<p>Instrukce popsané v&nbsp;této kapitole jsou velmi užitečné při zpracování
signálů. Pro ilustraci si představme zpracování obrázků s&nbsp;osmibitovými
hodnotami pixelů:</p>

<img src="http://i.iinfo.cz/images/51/pc140-11.png" width="256" height="256" alt=" " />
<p><i>Obrázek 1: Zdrojový rastrový obrázek (známá fotografie Lenny), který
tvoří zdroj pro jednoduchý konvoluční (FIR) filtr, jenž zvyšuje hodnoty pixelů
o pevně zadanou konstantu (offset).</i></p>

<img src="http://i.iinfo.cz/images/51/pc140-12.png" width="256" height="256" alt=" " />
<p><i>Obrázek 2: Pokud je pro přičtení offsetu použita operace součtu se
zanedbáním přenosu (carry), tj.&nbsp;když se počítá systémem &bdquo;modulo
N&ldquo;, dochází při překročení maximální hodnoty pixelu (čistě bílá barva)
k&nbsp;jasně viditelným chybám.</i></p>

<img src="http://i.iinfo.cz/images/51/pc140-13.png" width="256" height="256" alt=" " />
<p><i>Obrázek 3: Při použití operace součtu se saturací sice taktéž dojde ke
ztrátě informace (vzniknou oblasti s&nbsp;pixely majícími hodnotu 255), ovšem
viditelná chyba je mnohem menší, než na předchozím obrázku.</i></p>

<p>Aby nebylo nutné po každém sčítání, násobení atd. neustále kontrolovat, zda
došlo k&nbsp;přetečení, byla u některých typů procesorů zavedena takzvaná
aritmetika se <i>saturací</i>, což zjednodušeně řečeno znamená, že při
provádění vybraných aritmetických operací nikdy nedošlo k&nbsp;přetečení či
podtečení. U mikroprocesorů s&nbsp;instrukční sadou <i>SH-2A</i> je tomu jinak,
protože aritmetické operace zůstaly nezměněny (ani se nijak nerozšířily), ovšem
ihned po jejich provedení lze aplikovat jednu z&nbsp;vybraných ořezových
operací (pro bajty či 16bitová slova, navíc buď pro hodnoty se znaménkem či bez
znaménka):</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis instrukce</th></tr>
<tr><td>1</td><td>CLIPS.B Rn</td><td>1</td><td>když Rn &gt; 127, zapiš do Rn 127 a nastav CS<br>totéž pro podmínku Rn &lt; -128</td></tr>
<tr><td>2</td><td>CLIPS.W Rn</td><td>1</td><td>když Rn &gt; 32767, zapiš do Rn 127 a nastav CS<br>totéž pro podmínku Rn &lt; -32768</td></tr>
<tr><td>3</td><td>CLIPU.B Rn</td><td>1</td><td>když Rn &gt; 255, zapiš do Rn 255 a nastav CS</td></tr>
<tr><td>4</td><td>CLIPU.W Rn</td><td>1</td><td>když Rn &gt; 65535, zapiš do Rn 65535 a nastav CS</td></tr>
</table>

<p>Poznámka: <i>CS</i> je označení bitu uloženého ve stavovém registru
<strong>SR</strong>.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Nové instrukce pro násobení a dělení</h2>

<p>Připomeňme si, že mikroprocesory s&nbsp;instrukční sadou <i>SH-2</i> vlastně
nepodporovaly instrukci pro provedení celočíselného dělení, ať již čísel se
znaménkem nebo bez znaménka. Namísto toho se používaly tři instrukce nazvané
<strong>DIV0S</strong>, <strong>DIV0U</strong> a <strong>DIV1</strong>. První
dvě instrukce připravily stavové bity M, Q a T používané při dělení a třetí
instrukce vždy provedla jeden krok dělení. Taktéž násobení bylo omezeno,
protože výsledek se ukládal do registru <strong>MAC</strong>, nikoli do běžného
pracovního registru. S&nbsp;tímto omezením se již na čipech <i>SH-2A</i>
nesetkáme, a to díky trojici nových instrukcí popsaných v&nbsp;následující
tabulce:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis instrukce</th></tr>
<tr><td>1</td><td>MULR</td><td>2</td><td>operace Rn &times; R0 &rarr; Rn</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>2</td><td>DIVU</td><td>36</td><td>operace Rn &div; R0 &rarr; Rn (hodnoty bez znaménka)</td></tr>
<tr><td>3</td><td>DIVS</td><td>34</td><td>operace Rn &div; R0 &rarr; Rn (hodnoty se znaménkem)</td></tr>
</table>

<p>Poznámka: pozorněji si u posledních dvou řádků prohlédněte sloupec nadepsaný
&bdquo;Počet cyklů&ldquo;, aby byl jasně patrný rozdíl mezi již popsanými
instrukcemi <strong>DIV0S</strong>, <strong>DIV0U</strong> a
<strong>DIV1</strong>, které sice trvají pouhý jeden takt, ovšem provedou vždy
jen jeden krok dělení (někdy není nutné skutečně dělit celá 32bitová čísla,
proto mají tyto instrukce svůj význam).</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Přídavné instrukce pro práci se stavovým bitem T</h2>

<p>Tato kapitola bude v&nbsp;porovnání s&nbsp;ostatními kapitolami velmi
krátká, protože si v&nbsp;ní popíšeme pouze dvě nové instrukce, které slouží
pro operace se stavovým bitem <strong>T</strong> (<i>Test</i>). Připomeňme si,
že pro přímou manipulaci s&nbsp;tímto bitem existuje už v&nbsp;původních
procesorech s&nbsp;instrukční sadou <i>SH-2</i> trojice instrukcí nazvaných
<strong>MOVT</strong>, <strong>CLRT</strong> a <strong>SETT</strong>, viz též
následující tabulku:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis instrukce</th></tr>
<tr><td>1</td><td>MOVT</td><td>1</td><td>uložení bitu <strong>T</strong> do zvoleného registru Rn (nastaví se nejnižší bit registru, ostatní bity se vynulují)</td></tr>
<tr><td>2</td><td>CLRT</td><td>1</td><td>vynulování stavového bitu; 0&rarr;<strong>T</strong></td></tr>
<tr><td>3</td><td>SETT</td><td>1</td><td>nastavení stavového bitu; 1&rarr;<strong>T</strong></td></tr>
</table>

<p>K&nbsp;těmto třem instrukcím byly přidány další dvě instrukce, z&nbsp;nichž
jedna přenáší negovanou hodnotu stavového bitu <strong>T</strong> do zvoleného
registru Rn a druhá instrukce tento bit neguje. Obě tyto nové instrukce jsou
podle očekávání dokončeny v&nbsp;jediném taktu:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis instrukce</th></tr>
<tr><td>1</td><td>MOVRT</td><td>1</td><td>přenos negovaného bitu <strong>T</strong> do vybraného registru Rn</td></tr>
<tr><td>2</td><td>NOTT</td><td>1</td><td>negace stavového bitu; <strong>T=~T</strong></td></tr>
</table>



<p><a name="k11"></a></p>
<h2 id="k11">11. Použití dvanáctibitového offsetu při adresování dat v&nbsp;operační paměti</h2>

<p>Při popisu nových instrukcí <strong>MOVI20</strong> a
<strong>MOVI20S</strong> jsme se seznámili s&nbsp;konceptem použití dvojnásobné
šířky instrukčního slova, tj.&nbsp;s&nbsp;využitím 32bitového slova namísto
slova šestnáctibitového. Podobným způsobem byly rozšířeny i instrukce
přenášející data mezi vybraným pracovním registrem a operační pamětí
adresovanou s&nbsp;využitím offsetu přičteného k&nbsp;jinému pracovnímu
registru. Rozšířené instrukce dokážou pracovat s&nbsp;dvanáctibitovým offsetem,
což samozřejmě rozšiřuje možnosti při použití velkých datových struktur atd.
Podívejme se, o jaké instrukce se jedná:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis instrukce</th></tr>
<tr><td>1</td><td>MOV.B Rm,@(disp12,Rn)</td><td>1</td><td>zápis bajtu z&nbsp;registru Rm na adresu (disp12+Rn)</td></tr>
<tr><td>2</td><td>MOV.W Rm,@(disp12,Rn)</td><td>1</td><td>zápis 16bitového slova z&nbsp;registru Rm na adresu (disp12+Rn)</td></tr>
<tr><td>3</td><td>MOV.L Rm,@(disp12,Rn)</td><td>1</td><td>zápis 32bitového slova z&nbsp;registru Rm na adresu (disp12+Rn)</td></tr>
<tr><td>4</td><td>MOV.B @(disp12,Rm),Rn</td><td>1</td><td>čtení bajtu z&nbsp;adresy (disp12+Rm) o registru Rn</td></tr>
<tr><td>5</td><td>MOV.W @(disp12,Rm),Rn</td><td>1</td><td>čtení 16bitového slova z&nbsp;adresy (disp12+Rm) o registru Rn</td></tr>
<tr><td>6</td><td>MOV.L @(disp12,Rm),Rn</td><td>1</td><td>čtení 32bitového slova z&nbsp;adresy (disp12+Rm) o registru Rn</td></tr>
</table>

<p>Formát všech těchto instrukcí je totožný:</p>

<pre>
15  12    8    4    0    15  12    8    4    0
+----+----+----+----+    +----+----+----+----+
|0011|dddd|ssss|0001|    |kód | displacement |
+----+----+----+----+    +----+----+----+----+
</pre>

<p>Kde:</p>

<ul>
<li><i>ssss</i> je index zdrojového pracovního registru (<i>source</i>)</li>
<li><i>dddd</i> je index cílového pracovního registru (<i>destination</i>)</li>
<li><i>kód</i> vybírá konkrétní instrukci</li>
<li><i>displacement</i> je dvanáctibitový offset</li>
</ul>



<p><a name="k12"></a></p>
<h2 id="k12">12. Další nové instrukce</h2>

<p>Mezi další instrukce, které najdeme pouze na čipech <i>SH-2A</i> a nikoli na
čipech <i>SH-2</i>, patří zejména tyto instrukce:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis instrukce</th></tr>
<tr><td>1</td><td>SHAD</td><td>1</td><td>aritmetický posun doleva či doprava podle obsahu pracovního registru</td></tr>
<tr><td>2</td><td>SHLD</td><td>1</td><td>bitový posun doleva či doprava podle obsahu pracovního registru</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>JSR/N</td><td>5</td><td>skok do subrutiny (ovšem bez branch delay slotu)</td></tr>
<tr><td>4</td><td>RTS/N</td><td>3</td><td>návrat ze subrutiny (opět bez branch delay slotu)</td></tr>
<tr><td>5</td><td>RTV/N</td><td>3</td><td>uložení vybraného registru do R0 a návrat ze subrutiny (opět bez branch delay slotu)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>6</td><td>PREF</td><td>1</td><td>cache prefetch</td></tr>
</table>



<p><a name="k13"></a></p>
<h2 id="k13">13. Jádro SH2A-FPU</h2>

<p>Některé čipy s&nbsp;instrukční sadou <i>SH-2A</i> mohou být doplněny o
matematický koprocesor, který je ovládán doplňkovou sadou instrukcí
označovaných názvem <i>SH2A-FPU</i> a taktéž má k&nbsp;dispozici vlastní
skupinu pracovních registrů. Většina těchto instrukcí, které si podrobněji
popíšeme příště, je dokončena v&nbsp;jediném taktu, výjimkou jsou pouze
instrukce pro konverzi operandů (dva takty), některé operace s&nbsp;čísly
s&nbsp;dvojnásobnou přesností (součet v&nbsp;šesti taktech) a zejména pak
instrukce podílu, která je pro hodnoty s&nbsp;jednoduchou přesností dokončena
v&nbsp;deseti cyklech a pro hodnoty s&nbsp;dvojnásobnou přesností až v&nbsp;23
cyklech (zajímavé je, že výpočet druhé odmocniny je se šesti resp.&nbsp;22
cykly nepatrně rychlejší).</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>SH7201 Group User's Manual: Hardware<br />
<a href="https://www.renesas.com/en-us/document/hw-manual?hwLayerShowFlg=true&amp;prdLayerId=2038&amp;layerName=SH7201&amp;coronrService=document-prd-search&amp;hwDocUrl=%2Fen-us%2Fdoc%2Fproducts%2Fmpumcu%2Fdoc%2Fsuperh%2Fr01uh0026ej_sh7201_hm.pdf&amp;hashKey=4d1ed116961466babf99bc7cf1d2cdec">https://www.renesas.com/en-us/document/hw-manual?hwLayerShowFlg=true&amp;prdLayerId=2038&amp;layerName=SH7201&amp;coronrService=document-prd-search&amp;hwDocUrl=%2Fen-us%2Fdoc%2Fproducts%2Fmpumcu%2Fdoc%2Fsuperh%2Fr01uh0026ej_sh7201_hm.pdf&amp;hashKey=4d1ed116961466babf99bc7cf1d2cdec</a>
</li>

<li>SH7203 Group User's Manual: Hardware<br />
<a href="https://www.renesas.com/en-us/document/hw-manual?hwLayerShowFlg=true&amp;prdLayerId=2126&amp;layerName=SH7203&amp;coronrService=document-prd-search&amp;hwDocUrl=%2Fen-us%2Fdoc%2Fproducts%2Fmpumcu%2F001%2Fr01uh0458ej0400_sh7203.pdf&amp;hashKey=68baf3ad6c52e9e2616e44024589e8cf">https://www.renesas.com/en-us/document/hw-manual?hwLayerShowFlg=true&amp;prdLayerId=2126&amp;layerName=SH7203&amp;coronrService=document-prd-search&amp;hwDocUrl=%2Fen-us%2Fdoc%2Fproducts%2Fmpumcu%2F001%2Fr01uh0458ej0400_sh7203.pdf&amp;hashKey=68baf3ad6c52e9e2616e44024589e8cf</a>
</li>

<li>SuperH RISC engine Family Features<br />
<a href="https://www.renesas.com/en-us/products/microcontrollers-microprocessors/superh/superh-features.html">https://www.renesas.com/en-us/products/microcontrollers-microprocessors/superh/superh-features.html</a>
</li>

<li>Konkurence procesorů s mikroprogramovým řadičem - RISC<br />
<a href="http://www.root.cz/clanky/konkurence-procesoru-s-mikroprogramovym-radicem-architektura-risc/">http://www.root.cz/clanky/konkurence-procesoru-s-mikroprogramovym-radicem-architektura-risc/</a>
</li>

<li>Mikroprocesory s architekturou RISC I<br />
<a href="http://www.root.cz/clanky/mikroprocesory-s-architekturou-risc-i/">http://www.root.cz/clanky/mikroprocesory-s-architekturou-risc-i/</a>
</li>

<li>Procesory RISC v pracovních stanicích a serverech<br />
<a href="http://www.root.cz/clanky/procesory-s-architekturou-risc-v-pracovnich-stanicich-a-serverech/">http://www.root.cz/clanky/procesory-s-architekturou-risc-v-pracovnich-stanicich-a-serverech/</a>
</li>

<li>Procesory RISC v pracovních stanicích a serverech - architektura SPARC V8 a<br />
<a href="http://www.root.cz/clanky/procesory-risc-v-pracovnich-stanicich-a-serverech-architektura-sparc-v8-a-v9/">http://www.root.cz/clanky/procesory-risc-v-pracovnich-stanicich-a-serverech-architektura-sparc-v8-a-v9/</a>
</li>

<li>Procesory RISC v pracovních stanicích a serverech - architektura PA-RISC<br />
<a href="http://www.root.cz/clanky/procesory-risc-v-pracovnich-stanicich-a-serverech-architektura-pa-risc/">http://www.root.cz/clanky/procesory-risc-v-pracovnich-stanicich-a-serverech-architektura-pa-risc/</a>
</li>

<li>Rozšíření instrukční sady procesorových jader s otevřenou architekturou RISC-V<br />
<a href="http://www.root.cz/clanky/rozsireni-instrukcni-sady-procesorovych-jader-s-otevrenou-architekturou-risc-v/">http://www.root.cz/clanky/rozsireni-instrukcni-sady-procesorovych-jader-s-otevrenou-architekturou-risc-v/</a>
</li>

<li>Sega documentation<br />
<a
href="http://koti.kapsi.fi/~antime/sega/docs.html">http://koti.kapsi.fi/~antime/sega/docs.html</a>
</li>

<li>1995 Programming on the Sega Saturn<br />
<a
href="http://cowboyprogramming.com/2010/06/03/1995-programming-on-the-sega-saturn/">http://cowboyprogramming.com/2010/06/03/1995-programming-on-the-sega-saturn/</a>
</li>

<li>Sega Myths-Saturn was the most difficult console to program for of 5th Gen<br />
<a href="http://forums.sega.com/showthread.php?313485-Sega-Myths-Saturn-was-the-most-difficult-console-to-program-for-of-5th-Gen">http://forums.sega.com/showthread.php?313485-Sega-Myths-Saturn-was-the-most-difficult-console-to-program-for-of-5th-Gen</a>
</li>

<li>SuperH RISC engine Family<br />
<a href="http://www.renesas.com/products/mpumcu/superh/index.jsp">http://www.renesas.com/products/mpumcu/superh/index.jsp</a>
</li>

<li>Sega Saturn<br />
<a href="http://en.wikipedia.org/wiki/Sega_saturn">http://en.wikipedia.org/wiki/Sega_saturn</a>
</li>

<li>Fourth-Generation Consoles<br />
<a href="http://gaming.wikia.com/wiki/Fourth-Generation_Consoles">http://gaming.wikia.com/wiki/Fourth-Generation_Consoles</a>
</li>

<li>Fifth-Generation Consoles<br />
<a href="http://gaming.wikia.com/wiki/Fifth-Generation_Consoles">http://gaming.wikia.com/wiki/Fifth-Generation_Consoles</a>
</li>

<li>History of video game consoles (fifth generation)<br />
<a href="http://en.wikipedia.org/wiki/History_of_video_game_consoles_(fifth_generation)">http://en.wikipedia.org/wiki/History_of_video_game_consoles_(fifth_generation)</a>
</li>

<li>Sega Mega Drive<br />
<a href="http://sega.jp/archive/segahard/md/">http://sega.jp/archive/segahard/md/</a>
</li>

<li>Sega Archives<br />
<a href="http://sega.jp/archive/segahard/">http://sega.jp/archive/segahard/</a>
</li>

<li>Sega Genesis<br />
<a href="http://www.dmoz.org/Games/Video_Games/Console_Platforms/Sega/Genesis/">http://www.dmoz.org/Games/Video_Games/Console_Platforms/Sega/Genesis/</a>
</li>

<li>The Sega Mega Drive/Genesis<br />
<a href="http://www.captainwilliams.co.uk/sega/megadrive/megadrive.php">http://www.captainwilliams.co.uk/sega/megadrive/megadrive.php</a>
</li>

<li>Sega Master System Museum<br />
<a href="http://alexkidd.com/">http://alexkidd.com/</a>
</li>

<li>Jadeite's Sega Master System Museum<br />
<a href="http://rp_gamer.tripod.com/SMS/1.html">http://rp_gamer.tripod.com/SMS/1.html</a>
</li>

<li>Sega Master System (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Sega_Master_System">http://en.wikipedia.org/wiki/Sega_Master_System</a>
</li>

<li>Sega Card (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Sega_Card">http://en.wikipedia.org/wiki/Sega_Card</a>
</li>

<li>Sega Master System VDP documentation<br />
<a href="http://www.smspower.org/uploads/Development/msvdp-20021112.txt?sid=28c370e1fcac51d5774319979bf96f4c">http://www.smspower.org/uploads/Development/msvdp-20021112.txt?sid=28c370e1fcac51d5774319979bf96f4c</a>
</li>

<li>The16bit Era Of Console Video Games<br />
<a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/The16bitEraOfConsoleVideoGames">http://tvtropes.org/pmwiki/pmwiki.php/Main/The16bitEraOfConsoleVideoGames</a>
</li>

<li>The Console Wars<br />
<a href="http://www.cracked.com/funny-2590-the-console-wars/">http://www.cracked.com/funny-2590-the-console-wars/</a>
</li>

<li>Console Wars<br />
<a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/ConsoleWars">http://tvtropes.org/pmwiki/pmwiki.php/Main/ConsoleWars</a>
</li>

<li>Era of the "Bit Wars"<br />
<a href="http://www.gtplanet.net/forum/threads/era-of-the-bit-wars.119796/">http://www.gtplanet.net/forum/threads/era-of-the-bit-wars.119796/</a>
</li>

<li>Rez Wars: How the Bit Wars never really ended<br />
<a href="http://www.ign.com/blogs/beastmastertoad/2013/01/31/rez-wars-how-the-bit-wars-never-really-ended">http://www.ign.com/blogs/beastmastertoad/2013/01/31/rez-wars-how-the-bit-wars-never-really-ended</a>
</li>

<li>Which system ended the "Bit Wars"?<br />
<a href="http://atariage.com/forums/topic/199163-which-system-ended-the-bit-wars/">http://atariage.com/forums/topic/199163-which-system-ended-the-bit-wars/</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Introduction to ARM Thumb<br />
<a href="http://www.embedded.com/electronics-blogs/beginner-s-corner/4024632/Introduction-to-ARM-thumb">http://www.embedded.com/electronics-blogs/beginner-s-corner/4024632/Introduction-to-ARM-thumb</a>
</li>

<li>Code Size – a comprehensive comparison of microMIPS32 and Thumb code size using many Megabytes of customer code<br />
<a href="https://community.arm.com/groups/processors/blog/2014/04/28/code-size-a-comprehensive-comparison-of-micromips32-and-thumb-code-size-using-many-megabytes-of-customer-code">https://community.arm.com/groups/processors/blog/2014/04/28/code-size-a-comprehensive-comparison-of-micromips32-and-thumb-code-size-using-many-megabytes-of-customer-code</a>
</li>

<li>MIPS MCUs Outrun ARM<br />
<a href="http://www.linleygroup.com/newsletters/newsletter_detail.php?num=5117">http://www.linleygroup.com/newsletters/newsletter_detail.php?num=5117</a>
</li>

<li>Carry bits, The Architect's Trap<br />
<a href="http://yarchive.net/comp/carry_bit.html">http://yarchive.net/comp/carry_bit.html</a>
</li>

<li>Microprocessor Design/ALU Flags<br />
<a href="https://en.wikibooks.org/wiki/Microprocessor_Design/ALU_Flags">https://en.wikibooks.org/wiki/Microprocessor_Design/ALU_Flags</a>
</li>

<li>Flags register in an out-of-order processor<br />
<a href="http://cs.stackexchange.com/questions/42095/flags-register-in-an-out-of-order-processor">http://cs.stackexchange.com/questions/42095/flags-register-in-an-out-of-order-processor</a>
</li>

<li>Berkeley RISC<br />
<a href="http://en.wikipedia.org/wiki/Berkeley_RISC">http://en.wikipedia.org/wiki/Berkeley_RISC</a>
</li>

<li>Great moments in microprocessor history<br />
<a href="http://www.ibm.com/developerworks/library/pa-microhist.html">http://www.ibm.com/developerworks/library/pa-microhist.html</a>
</li>

<li>RISC vs. CISC<br />
<a href="http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/risccisc/">http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/risccisc/</a>
</li>

<li>RISC and CISC definitions:<br />
<a href="http://www.cpushack.com/CPU/cpuAppendA.html">http://www.cpushack.com/CPU/cpuAppendA.html</a>
</li>

<li>The Evolution of RISC<br />
<a href="http://www.ibm.com/developerworks/library/pa-microhist.html#sidebar1">http://www.ibm.com/developerworks/library/pa-microhist.html#sidebar1</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

