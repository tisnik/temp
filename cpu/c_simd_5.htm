<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Nové typy vektorů, &nbsp;nimiž je možné provádět SIMD operace</a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">4. Součet 128bitových vektorů s&nbsp;celočíselnými prvky</a></p>
<p><a href="#k05">5. Překlad všech čtyř operací součtu do assembleru s&nbsp;povolením SSE operací</a></p>
<p><a href="#k06">6. Součet dvou vektorů s&nbsp;prvky typu <strong>float</strong> a <strong>double</strong></a></p>
<p><a href="#k07">7. Překlad obou operací součtu do assembleru s&nbsp;povolením SSE operací</a></p>
<p><a href="#k08">8. Porovnání celočíselných prvků instrukcemi <strong>pcmpeqb128</strong> a <strong>pcmpgtb128</strong></a></p>
<p><a href="#k09">9. Překlad obou operací porovnání do assembleru s&nbsp;povolením SSE operací</a></p>
<p><a href="#k10">10. Všech šest relačních operací pro vektory s&nbsp;prvky typu <strong>float</strong></a></p>
<p><a href="#k11">11. Překlad všech šesti operací porovnání do assembleru s&nbsp;povolením SSE operací</a></p>
<p><a href="#k12">*** 12. Unární operace pro výpočet převrácené hodnoty, druhé odmocniny a převrácené hodnoty druhé odmocniny</a></p>
<p><a href="#k13">13. Instrukce určené pro přeskupení, promíchání a výběr prvků uložených ve dvojici vektorů</a></p>
<p><a href="#k14">*** 14. Instrukce <strong>shufps</strong> a její intrinsic</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. Instrukce <strong>unpckhps</strong> a <strong>unpcklps</strong> a jejich intrinsics</a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">18. Příloha &ndash; soubor Makefile použitý v&nbsp;článcích o SIMD operacích</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>

<table>
<tr><th>Technologie</th><th>Hlavičkový soubor</th></tr>
<tr><td>MMX</td><td>mmintrin.h</td></tr>
<tr><td>SSE1</td><td>xmmintrin.h</td></tr>
<tr><td>SSE2</td><td>emmintrin.h</td></tr>
<tr><td>SSE4.1</td><td>smmintrin.h</td></tr>
<tr><td>AVX2</td><td>avx2intrin.h</td></tr>
</table>
 
<p>Nejprve se zaměřme na registry využívané v&nbsp;technologii <i>SSE</i>. U
mikroprocesorů implementujících instrukční sadu <i>SSE</i> je využita nová sada
registrů pojmenovaných <strong>XMM0</strong> až <strong>XMM7</strong>. Na
64bitové platformě (původně architektura AMD 64, dnes pochopitelně podporováno
i Intelem) navíc došlo k&nbsp;přidání dalších osmi registrů se jmény
<strong>XMM8</strong> až <strong>XMM15</strong> využitelných pouze
v&nbsp;64bitovém režimu. Všechny nové registry mají šířku 128 bitů. Navíc byl
přidán ještě řídicí registr <strong>MXCSR</strong>, o jehož významu se zmíníme
později:</p>

<table>
<tr><th> #</th><th>Typ registrů</th><th>Počet registrů</th><th>Bitová šířka registru</th><th>Příklady</th></tr>
<tr><td>1</td><td>Pracovní registry SSE</td><td>8</td><td>128 bitů</td><td>XMM0 .. XMM7</td></tr>
<tr><td>2</td><td>Řídicí registr SSE   </td><td>1</td><td> 32 bitů</td><td>MXCSR</td></tr>
</table>

<img src="http://i.iinfo.cz/images/503/pc160-3.jpg" width="220" height="194" alt="&#160;" />
<p><i>Obrázek 1: Sada nových pracovních registrů přidaných v&nbsp;rámci
rozšíření instrukční sady SSE.</i></p>

<p>V&nbsp;rámci technologie <i>SSE</i> byla instrukční sada x86 (a později
x86-64) rozšířena o několik typů instrukcí, které většinou pracovaly s&nbsp;již
výše zmíněnými registry <strong>XMM*</strong>, popř.&nbsp;taktéž
s&nbsp;operační pamětí nebo s&nbsp;obecnými celočíselnými 32bitovými registry
procesorů <i>x86</i>, tj.&nbsp;například s&nbsp;registrem <strong>EAX</strong>.
Všechny nové instrukce je možné rozdělit do několika kategorií:</p>

<table>
<tr><th> #</th><th>Kategorie</th><th>Příklad instrukce</th></tr>
<tr><td> 1</td><td>Přenosy dat</td><td>MOVUPS, MOVAPS, MOVHPS, MOVLPS...</td></tr>
<tr><td> 2</td><td>Aritmetické operace</td><td>ADDPS, SUBPS, MULPS, DIVPS, RCPPS...</td></tr>
<tr><td> 3</td><td>Porovnání</td><td>CMPEQSS, CMPEQPS, CMPLTSS, CMPNLTSS, ...</td></tr>
<tr><td> 4</td><td>Logické operace</td><td>ANDPS, ANDNPS, ORPS, XORPS</td></tr>
<tr><td> 5</td><td>Přenosy mezi prvky vektorů (shuffle) a konverze</td><td>SHUFPS, UNPCKHPS, UNPCKLPS</td></tr>
<tr><td> 6</td><td>Načtení dat do cache</td><td>PREFETCH0, ...</td></tr>
</table>

<img src="http://i.iinfo.cz/images/503/pc160-5.png" width="450" height="311" alt="&#160;" />
<p><i>Obrázek 22: Některé instrukce zavedené v&nbsp;rámci SSE pracují pouze s&nbsp;dvojicí skalárních hodnot.</i></p>

<p>Technologie <i>SSE2</i> vývojářům přinesla nové instrukce a samozřejmě i
podstatné změny v&nbsp;interní struktuře vektorové výpočetní jednotky, ovšem
počet registrů ani jejich bitová šířka se nijak nezměnila. Programátoři
používající, ať již přímo či nepřímo, rozšíření instrukční sady <i>SSE2</i>
mohli do osmice 128bitových registrů pojmenovaných <i>XMM*</i> ukládat celkem
šest různých typů vektorů. Základ zůstal nezměněn &ndash; jednalo se o
čtyřprvkové vektory obsahující čísla reprezentovaná ve formátu plovoucí řádové
čárky, přičemž každé číslo bylo uloženo v&nbsp;32 bitech (4&times;32=128 bitů),
což odpovídá typu <i>single/float</i> definovanému v&nbsp;normě <i>IEEE
754</i>. Kromě toho byly v&nbsp;rámci <i>SSE2</i> ještě zavedeny dvouprvkové
vektory obsahující taktéž hodnoty reprezentované ve formátu plovoucí řádové
čárky, ovšem tentokrát se jedná o čísla uložená v&nbsp;64 bitech
(2&times;64=128) odpovídající dvojité přesnosti (<i>double</i>) z&nbsp;normy
<i>IEEE 754</i>.</p>

<p>Zbývají nám ovšem ještě čtyři další podporované datové typy. Jedná se o
vektory s&nbsp;celočíselnými prvky: šestnáctiprvkové vektory
s&nbsp;osmibitovými hodnotami, osmiprvkové vektory s&nbsp;šestnáctibitovými
hodnotami, čtyřprvkové vektory s&nbsp;32bitovými hodnotami a konečně
dvouprvkové vektory s&nbsp;64bitovými celočíselnými hodnotami.</p>

<a href="http://i.iinfo.cz/images/221/pc161-03.png"><img src="http://i.iinfo.cz/images/221/pc161-03-prev.png" width="370" height="178" alt="&#160;" /></a>
<p><i>Obrázek 25: Nové typy vektorů, s&nbsp;kterými je nově možné nativně
pracovat na mikroprocesorech podporujících technologii SSE2.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Nové typy vektorů, &nbsp;nimiž je možné provádět SIMD operace</h2>

<p>Při použití technologie SSE (SSE2 atd.) se používají vektory o šířce 128
bitů. Tyto vektory je možné rozdělit na celočíselné prvky popř.&nbsp;na prvky
s&nbsp;hodnotami reprezentovanými s&nbsp;využitím systému plovoucí řádové
čárky. V&nbsp;následující tabulce jsou všechny možné a podporované kombinace
vypsány:</p>

<table>
<tr><th>Typ v&nbsp;C</th><th>Význam</th><th>Deklarace</th></tr>
<tr><td>_v16qi</td><td>16 celočíselných prvků, každý o šířce 8bitů (pro C++)</td><td>typedef char __v16qi __attribute__ ((__vector_size__ (16)));</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>_v16qs</td><td>16 celočíselných prvků se znaménkem, každý o šířce 8bitů</td><td>typedef signed char __v16qs __attribute__ ((__vector_size__ (16)));</td></tr>
<tr><td>_v8hi</td><td>8 celočíselných prvků se znaménkem, každý o šířce 16bitů</td><td>typedef short __v8hi __attribute__ ((__vector_size__ (16)));</td></tr>
<tr><td>_v4si</td><td>4 celočíselné prvky se znaménkem, každý o šířce 32bitů</td><td>typedef int __v4si __attribute__ ((__vector_size__ (16)));</td></tr>
<tr><td>_v2di</td><td>2 celočíselné prvky se znaménkem, každý o šířce 64bitů</td><td>typedef long long __v2di __attribute__ ((__vector_size__ (16)));</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>_v16qu</td><td>16 celočíselných prvků bez znaménka, každý o šířce 8bitů</td><td>typedef unsigned char __v16qu __attribute__ ((__vector_size__ (16)));</td></tr>
<tr><td>_v8hu</td><td>8 celočíselných prvků bez znaménka, každý o šířce 16bitů</td><td>typedef unsigned short __v8hu __attribute__ ((__vector_size__ (16)));</td></tr>
<tr><td>_v4su</td><td>4 celočíselné prvky bez znaménka, každý o šířce 32bitů</td><td>typedef unsigned int __v4su __attribute__ ((__vector_size__ (16)));</td></tr>
<tr><td>_v2du</td><td>2 celočíselné prvky bez znaménka, každý o šířce 64bitů</td><td>typedef unsigned long long __v2du __attribute__ ((__vector_size__ (16)));</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>_v4sf</td><td>čtyři prvky typu <i>float</i></td><td>typedef float __v4sf __attribute__ ((__vector_size__ (16)));</td></tr>
<tr><td>_v2df</td><td>dva prvky typu <i>double</i></td><td>typedef double __v2df __attribute__ ((__vector_size__ (16)));</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: pokud vám připadá, že pracovat se
128bitovými vektory je již pro CPU příliš, je dobré si uvědomit, že v&nbsp;AVX
se používají vektory s&nbsp;dvojnásobnou šířkou 256 bitů a v&nbsp;AVX-512
dokonce s&nbsp;šířkou 512 bitů (a to již přináší značné problémy se zátěží
CPU).</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<p>Pro prakticky každou SSE instrukci existuje příslušný <i>intrinsic</i>.
Všechny tyto intrinsic jsou vypsány pod tímto odstavcem:</p>

<pre>
int __builtin_ia32_comieq (v4sf, v4sf);
int __builtin_ia32_comineq (v4sf, v4sf);
int __builtin_ia32_comilt (v4sf, v4sf);
int __builtin_ia32_comile (v4sf, v4sf);
int __builtin_ia32_comigt (v4sf, v4sf);
int __builtin_ia32_comige (v4sf, v4sf);
int __builtin_ia32_ucomieq (v4sf, v4sf);
int __builtin_ia32_ucomineq (v4sf, v4sf);
int __builtin_ia32_ucomilt (v4sf, v4sf);
int __builtin_ia32_ucomile (v4sf, v4sf);
int __builtin_ia32_ucomigt (v4sf, v4sf);
int __builtin_ia32_ucomige (v4sf, v4sf);
v4sf __builtin_ia32_addps (v4sf, v4sf);
v4sf __builtin_ia32_subps (v4sf, v4sf);
v4sf __builtin_ia32_mulps (v4sf, v4sf);
v4sf __builtin_ia32_divps (v4sf, v4sf);
v4sf __builtin_ia32_addss (v4sf, v4sf);
v4sf __builtin_ia32_subss (v4sf, v4sf);
v4sf __builtin_ia32_mulss (v4sf, v4sf);
v4sf __builtin_ia32_divss (v4sf, v4sf);
v4sf __builtin_ia32_cmpeqps (v4sf, v4sf);
v4sf __builtin_ia32_cmpltps (v4sf, v4sf);
v4sf __builtin_ia32_cmpleps (v4sf, v4sf);
v4sf __builtin_ia32_cmpgtps (v4sf, v4sf);
v4sf __builtin_ia32_cmpgeps (v4sf, v4sf);
v4sf __builtin_ia32_cmpunordps (v4sf, v4sf);
v4sf __builtin_ia32_cmpneqps (v4sf, v4sf);
v4sf __builtin_ia32_cmpnltps (v4sf, v4sf);
v4sf __builtin_ia32_cmpnleps (v4sf, v4sf);
v4sf __builtin_ia32_cmpngtps (v4sf, v4sf);
v4sf __builtin_ia32_cmpngeps (v4sf, v4sf);
v4sf __builtin_ia32_cmpordps (v4sf, v4sf);
v4sf __builtin_ia32_cmpeqss (v4sf, v4sf);
v4sf __builtin_ia32_cmpltss (v4sf, v4sf);
v4sf __builtin_ia32_cmpless (v4sf, v4sf);
v4sf __builtin_ia32_cmpunordss (v4sf, v4sf);
v4sf __builtin_ia32_cmpneqss (v4sf, v4sf);
v4sf __builtin_ia32_cmpnltss (v4sf, v4sf);
v4sf __builtin_ia32_cmpnless (v4sf, v4sf);
v4sf __builtin_ia32_cmpordss (v4sf, v4sf);
v4sf __builtin_ia32_maxps (v4sf, v4sf);
v4sf __builtin_ia32_maxss (v4sf, v4sf);
v4sf __builtin_ia32_minps (v4sf, v4sf);
v4sf __builtin_ia32_minss (v4sf, v4sf);
v4sf __builtin_ia32_andps (v4sf, v4sf);
v4sf __builtin_ia32_andnps (v4sf, v4sf);
v4sf __builtin_ia32_orps (v4sf, v4sf);
v4sf __builtin_ia32_xorps (v4sf, v4sf);
v4sf __builtin_ia32_movss (v4sf, v4sf);
v4sf __builtin_ia32_movhlps (v4sf, v4sf);
v4sf __builtin_ia32_movlhps (v4sf, v4sf);
v4sf __builtin_ia32_unpckhps (v4sf, v4sf);
v4sf __builtin_ia32_unpcklps (v4sf, v4sf);
v4sf __builtin_ia32_cvtpi2ps (v4sf, v2si);
v4sf __builtin_ia32_cvtsi2ss (v4sf, int);
v2si __builtin_ia32_cvtps2pi (v4sf);
int __builtin_ia32_cvtss2si (v4sf);
v2si __builtin_ia32_cvttps2pi (v4sf);
int __builtin_ia32_cvttss2si (v4sf);
v4sf __builtin_ia32_rcpps (v4sf);
v4sf __builtin_ia32_rsqrtps (v4sf);
v4sf __builtin_ia32_sqrtps (v4sf);
v4sf __builtin_ia32_rcpss (v4sf);
v4sf __builtin_ia32_rsqrtss (v4sf);
v4sf __builtin_ia32_sqrtss (v4sf);
v4sf __builtin_ia32_shufps (v4sf, v4sf, int);
void __builtin_ia32_movntps (float *, v4sf);
int __builtin_ia32_movmskps (v4sf);
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se ve výše uvedeném seznamu nevyskytují instrukce pracující s&nbsp;vektory se dvěma prvky typu <i>double</i>. Ty byly přidány až do SSE2, společně s&nbsp;několika dalšími instrukcemi, pro něž opět existují <i>intrinsic</i>:</div></p>

<pre>
nt __builtin_ia32_comisdeq (v2df, v2df);
int __builtin_ia32_comisdlt (v2df, v2df);
int __builtin_ia32_comisdle (v2df, v2df);
int __builtin_ia32_comisdgt (v2df, v2df);
int __builtin_ia32_comisdge (v2df, v2df);
int __builtin_ia32_comisdneq (v2df, v2df);
int __builtin_ia32_ucomisdeq (v2df, v2df);
int __builtin_ia32_ucomisdlt (v2df, v2df);
int __builtin_ia32_ucomisdle (v2df, v2df);
int __builtin_ia32_ucomisdgt (v2df, v2df);
int __builtin_ia32_ucomisdge (v2df, v2df);
int __builtin_ia32_ucomisdneq (v2df, v2df);
v2df __builtin_ia32_cmpeqpd (v2df, v2df);
v2df __builtin_ia32_cmpltpd (v2df, v2df);
v2df __builtin_ia32_cmplepd (v2df, v2df);
v2df __builtin_ia32_cmpgtpd (v2df, v2df);
v2df __builtin_ia32_cmpgepd (v2df, v2df);
v2df __builtin_ia32_cmpunordpd (v2df, v2df);
v2df __builtin_ia32_cmpneqpd (v2df, v2df);
v2df __builtin_ia32_cmpnltpd (v2df, v2df);
v2df __builtin_ia32_cmpnlepd (v2df, v2df);
v2df __builtin_ia32_cmpngtpd (v2df, v2df);
v2df __builtin_ia32_cmpngepd (v2df, v2df);
v2df __builtin_ia32_cmpordpd (v2df, v2df);
v2df __builtin_ia32_cmpeqsd (v2df, v2df);
v2df __builtin_ia32_cmpltsd (v2df, v2df);
v2df __builtin_ia32_cmplesd (v2df, v2df);
v2df __builtin_ia32_cmpunordsd (v2df, v2df);
v2df __builtin_ia32_cmpneqsd (v2df, v2df);
v2df __builtin_ia32_cmpnltsd (v2df, v2df);
v2df __builtin_ia32_cmpnlesd (v2df, v2df);
v2df __builtin_ia32_cmpordsd (v2df, v2df);
v2di __builtin_ia32_paddq (v2di, v2di);
v2di __builtin_ia32_psubq (v2di, v2di);
v2df __builtin_ia32_addpd (v2df, v2df);
v2df __builtin_ia32_subpd (v2df, v2df);
v2df __builtin_ia32_mulpd (v2df, v2df);
v2df __builtin_ia32_divpd (v2df, v2df);
v2df __builtin_ia32_addsd (v2df, v2df);
v2df __builtin_ia32_subsd (v2df, v2df);
v2df __builtin_ia32_mulsd (v2df, v2df);
v2df __builtin_ia32_divsd (v2df, v2df);
v2df __builtin_ia32_minpd (v2df, v2df);
v2df __builtin_ia32_maxpd (v2df, v2df);
v2df __builtin_ia32_minsd (v2df, v2df);
v2df __builtin_ia32_maxsd (v2df, v2df);
v2df __builtin_ia32_andpd (v2df, v2df);
v2df __builtin_ia32_andnpd (v2df, v2df);
v2df __builtin_ia32_orpd (v2df, v2df);
v2df __builtin_ia32_xorpd (v2df, v2df);
v2df __builtin_ia32_movsd (v2df, v2df);
v2df __builtin_ia32_unpckhpd (v2df, v2df);
v2df __builtin_ia32_unpcklpd (v2df, v2df);
v16qi __builtin_ia32_paddb128 (v16qi, v16qi);
v8hi __builtin_ia32_paddw128 (v8hi, v8hi);
v4si __builtin_ia32_paddd128 (v4si, v4si);
v2di __builtin_ia32_paddq128 (v2di, v2di);
v16qi __builtin_ia32_psubb128 (v16qi, v16qi);
v8hi __builtin_ia32_psubw128 (v8hi, v8hi);
v4si __builtin_ia32_psubd128 (v4si, v4si);
v2di __builtin_ia32_psubq128 (v2di, v2di);
v8hi __builtin_ia32_pmullw128 (v8hi, v8hi);
v8hi __builtin_ia32_pmulhw128 (v8hi, v8hi);
v2di __builtin_ia32_pand128 (v2di, v2di);
v2di __builtin_ia32_pandn128 (v2di, v2di);
v2di __builtin_ia32_por128 (v2di, v2di);
v2di __builtin_ia32_pxor128 (v2di, v2di);
v16qi __builtin_ia32_pavgb128 (v16qi, v16qi);
v8hi __builtin_ia32_pavgw128 (v8hi, v8hi);
v16qi __builtin_ia32_pcmpeqb128 (v16qi, v16qi);
v8hi __builtin_ia32_pcmpeqw128 (v8hi, v8hi);
v4si __builtin_ia32_pcmpeqd128 (v4si, v4si);
v16qi __builtin_ia32_pcmpgtb128 (v16qi, v16qi);
v8hi __builtin_ia32_pcmpgtw128 (v8hi, v8hi);
v4si __builtin_ia32_pcmpgtd128 (v4si, v4si);
v16qi __builtin_ia32_pmaxub128 (v16qi, v16qi);
v8hi __builtin_ia32_pmaxsw128 (v8hi, v8hi);
v16qi __builtin_ia32_pminub128 (v16qi, v16qi);
v8hi __builtin_ia32_pminsw128 (v8hi, v8hi);
v16qi __builtin_ia32_punpckhbw128 (v16qi, v16qi);
v8hi __builtin_ia32_punpckhwd128 (v8hi, v8hi);
v4si __builtin_ia32_punpckhdq128 (v4si, v4si);
v2di __builtin_ia32_punpckhqdq128 (v2di, v2di);
v16qi __builtin_ia32_punpcklbw128 (v16qi, v16qi);
v8hi __builtin_ia32_punpcklwd128 (v8hi, v8hi);
v4si __builtin_ia32_punpckldq128 (v4si, v4si);
v2di __builtin_ia32_punpcklqdq128 (v2di, v2di);
v16qi __builtin_ia32_packsswb128 (v8hi, v8hi);
v8hi __builtin_ia32_packssdw128 (v4si, v4si);
v16qi __builtin_ia32_packuswb128 (v8hi, v8hi);
v8hi __builtin_ia32_pmulhuw128 (v8hi, v8hi);
void __builtin_ia32_maskmovdqu (v16qi, v16qi);
v2df __builtin_ia32_loadupd (double *);
void __builtin_ia32_storeupd (double *, v2df);
v2df __builtin_ia32_loadhpd (v2df, double const *);
v2df __builtin_ia32_loadlpd (v2df, double const *);
int __builtin_ia32_movmskpd (v2df);
int __builtin_ia32_pmovmskb128 (v16qi);
void __builtin_ia32_movnti (int *, int);
void __builtin_ia32_movnti64 (long long int *, long long int);
void __builtin_ia32_movntpd (double *, v2df);
void __builtin_ia32_movntdq (v2df *, v2df);
v4si __builtin_ia32_pshufd (v4si, int);
v8hi __builtin_ia32_pshuflw (v8hi, int);
v8hi __builtin_ia32_pshufhw (v8hi, int);
v2di __builtin_ia32_psadbw128 (v16qi, v16qi);
v2df __builtin_ia32_sqrtpd (v2df);
v2df __builtin_ia32_sqrtsd (v2df);
v2df __builtin_ia32_shufpd (v2df, v2df, int);
v2df __builtin_ia32_cvtdq2pd (v4si);
v4sf __builtin_ia32_cvtdq2ps (v4si);
v4si __builtin_ia32_cvtpd2dq (v2df);
v2si __builtin_ia32_cvtpd2pi (v2df);
v4sf __builtin_ia32_cvtpd2ps (v2df);
v4si __builtin_ia32_cvttpd2dq (v2df);
v2si __builtin_ia32_cvttpd2pi (v2df);
v2df __builtin_ia32_cvtpi2pd (v2si);
int __builtin_ia32_cvtsd2si (v2df);
int __builtin_ia32_cvttsd2si (v2df);
long long __builtin_ia32_cvtsd2si64 (v2df);
long long __builtin_ia32_cvttsd2si64 (v2df);
v4si __builtin_ia32_cvtps2dq (v4sf);
v2df __builtin_ia32_cvtps2pd (v4sf);
v4si __builtin_ia32_cvttps2dq (v4sf);
v2df __builtin_ia32_cvtsi2sd (v2df, int);
v2df __builtin_ia32_cvtsi642sd (v2df, long long);
v4sf __builtin_ia32_cvtsd2ss (v4sf, v2df);
v2df __builtin_ia32_cvtss2sd (v2df, v4sf);
void __builtin_ia32_clflush (const void *);
void __builtin_ia32_lfence (void);
void __builtin_ia32_mfence (void);
v16qi __builtin_ia32_loaddqu (const char *);
void __builtin_ia32_storedqu (char *, v16qi);
v1di __builtin_ia32_pmuludq (v2si, v2si);
v2di __builtin_ia32_pmuludq128 (v4si, v4si);
v8hi __builtin_ia32_psllw128 (v8hi, v8hi);
v4si __builtin_ia32_pslld128 (v4si, v4si);
v2di __builtin_ia32_psllq128 (v2di, v2di);
v8hi __builtin_ia32_psrlw128 (v8hi, v8hi);
v4si __builtin_ia32_psrld128 (v4si, v4si);
v2di __builtin_ia32_psrlq128 (v2di, v2di);
v8hi __builtin_ia32_psraw128 (v8hi, v8hi);
v4si __builtin_ia32_psrad128 (v4si, v4si);
v2di __builtin_ia32_pslldqi128 (v2di, int);
v8hi __builtin_ia32_psllwi128 (v8hi, int);
v4si __builtin_ia32_pslldi128 (v4si, int);
v2di __builtin_ia32_psllqi128 (v2di, int);
v2di __builtin_ia32_psrldqi128 (v2di, int);
v8hi __builtin_ia32_psrlwi128 (v8hi, int);
v4si __builtin_ia32_psrldi128 (v4si, int);
v2di __builtin_ia32_psrlqi128 (v2di, int);
v8hi __builtin_ia32_psrawi128 (v8hi, int);
v4si __builtin_ia32_psradi128 (v4si, int);
v4si __builtin_ia32_pmaddwd128 (v8hi, v8hi);
v2di __builtin_ia32_movq128 (v2di);
</pre>

sse3

<pre>
v2df __builtin_ia32_addsubpd (v2df, v2df)
v2df __builtin_ia32_addsubps (v2df, v2df)
v2df __builtin_ia32_haddpd (v2df, v2df)
v2df __builtin_ia32_haddps (v2df, v2df)
v2df __builtin_ia32_hsubpd (v2df, v2df)
v2df __builtin_ia32_hsubps (v2df, v2df)
v16qi __builtin_ia32_lddqu (char const *)
void __builtin_ia32_monitor (void *, unsigned int, unsigned int)
v2df __builtin_ia32_movddup (v2df)
v4sf __builtin_ia32_movshdup (v4sf)
v4sf __builtin_ia32_movsldup (v4sf)
void __builtin_ia32_mwait (unsigned int, unsigned int)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Součet 128bitových vektorů s&nbsp;celočíselnými prvky</h2>

<p>Nejprve si pro jednoduchost ukažme, jak lze provádět součty 128bitových
vektorů, v&nbsp;nichž jsou uloženy celočíselné prvky. Na výběr jsou čtyři typy
těchto vektorů:</p>

<ol>
<li>16 prvků s&nbsp;šířkou 8bitů (<strong>char</strong>)</li>
<li>8 prvků s&nbsp;šířkou 16bitů (<strong>short</strong>)</li>
<li>4 prvky s&nbsp;šířkou 32bitů (<strong>int</strong>)</li>
<li>2 prvky s&nbsp;šířkou 64bitů (<strong>long</strong>)</li>
</ol>

<p>Součet dvou vektorů s&nbsp;šestnácti prvky typu <strong>char</strong>:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;xmmintrin.h&gt;
&nbsp;
int main(void)
{
    __v16qi x = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
    __v16qi y = x;
    __v16qi z;
    int i;
&nbsp;
    z = __<strong>builtin_ia32_paddb128(x, y);</strong>
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(char); i++) {
        printf("%2d %2d %2d %2d\n", i, x[i], y[i], z[i]);
    }
}
</pre>

<p>Výsledky:</p>

<pre>
 0  1  1  2
 1  2  2  4
 2  3  3  6
 3  4  4  8
 4  5  5 10
 5  6  6 12
 6  7  7 14
 7  8  8 16
 8  9  9 18
 9 10 10 20
10 11 11 22
11 12 12 24
12 13 13 26
13 14 14 28
14 15 15 30
15 16 16 32
</pre>

<p>Součet dvou vektorů s&nbsp;osmi prvky typu <strong>short</strong>:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;xmmintrin.h&gt;
&nbsp;
int main(void)
{
    __v8hi x = { 1, 2, 3, 4, 5, 6, 7, 8 };
    __v8hi y = x;
    __v8hi z;
    int i;
&nbsp;
    z = <strong>__builtin_ia32_paddw128(x, y);</strong>
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(short int); i++) {
        printf("%2d %2d %2d %2d\n", i, x[i], y[i], z[i]);
    }
}
</pre>

<p>Výsledky:</p>

<pre>
 0  1  1  2
 1  2  2  4
 2  3  3  6
 3  4  4  8
 4  5  5 10
 5  6  6 12
 6  7  7 14
 7  8  8 16
</pre>

<p>Součet dvou vektorů se čtyřmi prvky typu <strong>int</strong>:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;xmmintrin.h&gt;
&nbsp;
int main(void)
{
    __v4si x = { 1, 2, 3, 4 };
    __v4si y = x;
    __v4si z;
    int i;
&nbsp;
    z = <strong>__builtin_ia32_paddd128(x, y);</strong>
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(int); i++) {
        printf("%2d %2d %2d %2d\n", i, x[i], y[i], z[i]);
    }
}
</pre>

<p>Výsledky:</p>

<pre>
 0  1  1  2
 1  2  2  4
 2  3  3  6
 3  4  4  8
</pre>

<p>Součet dvou vektorů se dvěma prvky typu <strong>long</strong>:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;xmmintrin.h&gt;
&nbsp;
int main(void)
{
    __v2di x = { 1, 2 };
    __v2di y = x;
    __v2di z;
    int i;
&nbsp;
    z = <strong>__builtin_ia32_paddq128(x, y);</strong>
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(long int); i++) {
        printf("%2d %2Ld %2Ld %2Ld\n", i, x[i], y[i], z[i]);
    }
}
</pre>

<p>Výsledky:</p>

<pre>
 0  1  1  2
 1  2  2  4
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Překlad všech čtyř operací součtu do assembleru s&nbsp;povolením SSE operací</h2>

<p>Podívejme se nyní na způsob překladu všech čtyř výše uvedených operací
součtu do assembleru. Pro stručnost bude uveden jen samotný výpočet a instrukce
určené pro načtení vektorů do registrů a pro uložení výsledku zpět do paměti
(na zásobník):</p>

<pre>
    z = __builtin_ia32_paddb128(x, y);
  30:   66 0f 6f 45 d0          movdqa xmm0,XMMWORD PTR [rbp-0x30]
  35:   66 0f 6f 4d c0          movdqa xmm1,XMMWORD PTR [rbp-0x40]
  3a:   66 0f fc c1             <strong>paddb  xmm0,xmm1</strong>
  3e:   0f 29 45 e0             movaps XMMWORD PTR [rbp-0x20],xmm0
</pre>

<pre>
    z = __builtin_ia32_paddw128(x, y);
  30:   66 0f 6f 45 d0          movdqa xmm0,XMMWORD PTR [rbp-0x30]
  35:   66 0f 6f 4d c0          movdqa xmm1,XMMWORD PTR [rbp-0x40]
  3a:   66 0f fd c1             <strong>paddw  xmm0,xmm1</strong>
  3e:   0f 29 45 e0             movaps XMMWORD PTR [rbp-0x20],xmm0
</pre>

<pre>
    z = __builtin_ia32_paddd128(x, y);
  30:   66 0f 6f 45 d0          movdqa xmm0,XMMWORD PTR [rbp-0x30]
  35:   66 0f 6f 4d c0          movdqa xmm1,XMMWORD PTR [rbp-0x40]
  3a:   66 0f fe c1             <strong>paddd  xmm0,xmm1</strong>
  3e:   0f 29 45 e0             movaps XMMWORD PTR [rbp-0x20],xmm0
</pre>

<pre>
    z = __builtin_ia32_paddq128(x, y);
  30:   66 0f 6f 45 d0          movdqa xmm0,XMMWORD PTR [rbp-0x30]
  35:   66 0f 6f 4d c0          movdqa xmm1,XMMWORD PTR [rbp-0x40]
  3a:   66 0f d4 c1             <strong>paddq  xmm0,xmm1</strong>
  3e:   0f 29 45 e0             movaps XMMWORD PTR [rbp-0x20],xmm0
</pre>

<p><div class="rs-tip-major">Poznámka: zde je patrné, že jméno <i>intrinsic</i>
odpovídá generované instrukci.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Součet dvou vektorů s&nbsp;prvky typu <strong>float</strong> a <strong>double</strong></h2>

<p>Mnoho výpočtů se v&nbsp;praxi provádí s&nbsp;prvky typu
<strong>float</strong> a <strong>double</strong>, tedy nad numerickými
hodnotami s&nbsp;plovoucí řádovou čárkou. &bdquo;Vektorové&ldquo; varianty
základních aritmetických operací samozřejmě existují a jsou dostupné i přes
<i>intrinsic</i>. Podívejme se nejdříve na součet dvou vektorů s&nbsp;prvky
typu <strong>float</strong>:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;xmmintrin.h&gt;
&nbsp;
int main(void)
{
    __v4sf x = { 1.0, 2.0, 3.0, 4.0 };
    __v4sf y = { 0.1, 0.1, 0.1, 0.1 };
    __v4sf z;
    int i;
&nbsp;
    z = <strong>__builtin_ia32_addps(x, y);</strong>
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(float); i++) {
        printf("%2d %f %f %f\n", i, x[i], y[i], z[i]);
    }
}
</pre>

<p>Výsledky:</p>

<pre>
 0 1.000000 0.100000 1.100000
 1 2.000000 0.100000 2.100000
 2 3.000000 0.100000 3.100000
 3 4.000000 0.100000 4.100000
</pre>

<p>Součet prvků typu <strong>double</strong> uložených do dvojice vektorů:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;xmmintrin.h&gt;
&nbsp;
int main(void)
{
    __v2df x = { 1.0, 2.0 };
    __v2df y = { 0.1, 0.1 };
    __v2df z;
    int i;
&nbsp;
    z = <strong>__builtin_ia32_addpd(x, y);</strong>
&nbsp;
    for (i = 0; i &lt; sizeof(x) / sizeof(double); i++) {
        printf("%2d %lf %lf %lf\n", i, x[i], y[i], z[i]);
    }
}
</pre>

<p>Výsledky:</p>

<pre>
 0 1.000000 0.100000 1.100000
 1 2.000000 0.100000 2.100000
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Překlad obou operací součtu do assembleru s&nbsp;povolením SSE operací</h2>

<p><i>Intrinsic</i> v&nbsp;předchozích dvou zdrojových kódech nám napovídají,
jak asi bude vypadat výsledek překladu do assembleru.</p>

<p>Součet dvou vektorů s&nbsp;prvky typu <strong>float</strong>:</p>

<pre>
    z = __builtin_ia32_addps(x, y);
  31:   0f 28 45 d0             movaps xmm0,XMMWORD PTR [rbp-0x30]
  35:   0f 28 4d c0             movaps xmm1,XMMWORD PTR [rbp-0x40]
  39:   0f 58 c1                <strong>addps  xmm0,xmm1</strong>
  3c:   0f 29 45 e0             movaps XMMWORD PTR [rbp-0x20],xmm0
</pre>

<p>Součet prvků typu <strong>double</strong> uložených do dvojice vektorů:</p>

<pre>
    z = __builtin_ia32_addpd(x, y);
  33:   66 0f 28 45 d0          movapd xmm0,XMMWORD PTR [rbp-0x30]
  38:   66 0f 28 4d c0          movapd xmm1,XMMWORD PTR [rbp-0x40]
  3d:   66 0f 58 c1             <strong>addpd  xmm0,xmm1</strong>
  41:   0f 29 45 e0             movaps XMMWORD PTR [rbp-0x20],xmm0
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si zcela odlišného
pojmenování funkcí. Nyní se zde nepoužívá prefix &bdquo;p&ldquo; (packed) a
suffix je buď &bdquo;s&ldquo; (<i>single</i>) nebo &bdquo;d&ldquo;
(<i>double</i>).</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Porovnání celočíselných prvků instrukcemi <strong>pcmpeqb128</strong> a <strong>pcmpgtb128</strong></h2>

<p>V&nbsp;praxi se poměrně často setkáme s&nbsp;nutností porovnání hodnot
uložených ve dvou polích. Takové operace lze převést do
&bdquo;vektorizované&ldquo; podoby s&nbsp;využitím SIMD intrinsic. Pro vektory
s&nbsp;celočíselnými operandy pro tento účel existují instrukce
<strong>pcmpeqX128</strong> a <strong>pcmpgtX128</strong>, kde se za
<strong>X</strong> dosadí konkrétní datový typ. Například pro vektory
s&nbsp;prvky typu <strong>char</strong> se použijí instrukce se jmény
<strong>pcmpeqb128</strong> a <strong>pcmpgtb128</strong>, kde
<strong>eq</strong>z znamená test na rovnost a <strong>gt</strong> test na
relaci &bdquo;větší než&ldquo;. Ostatní relace lze z&nbsp;těchto dvou odvodit,
a to buď prohozením vektorů nebo negací výsledků.</p>

<p><div class="rs-tip-major">Poznámka: suffix &bdquo;128&ldquo; se
v&nbsp;assemblerech většinou nepoužívá, nalezneme ho však v&nbsp;příslušných
<i>intrinsic</i>.</div></p>

<p>Pokusme se nyní porovnat prvky dvou vektorů, z&nbsp;nichž každý obsahuje
šestnáct prvků typu <strong>char</strong>. Celý kód může vypadat
následovně:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;xmmintrin.h&gt;
&nbsp;
void print_results(const char *title, __v16qi *x, __v16qi *y, __v16qi *z)
{
    int i;
&nbsp;
    puts(title);
    for (i = 0; i &lt; sizeof(*x) / sizeof(char); i++) {
        printf("%2d %2d %2d  %s\n", i, (*x)[i], (*y)[i], (*z)[i] == 0 ? "no":"yes");
    }
&nbsp;
    putchar('\n');
}
&nbsp;
int main(void)
{
    __v16qi x = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
    __v16qi y = { 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8 };
    __v16qi z;
&nbsp;
    z = <strong>__builtin_ia32_pcmpeqb128(x, y);</strong>
    print_results(" #  x  y  x==y?", &amp;x, &amp;y, &amp;z);
&nbsp;
    z = <strong>__builtin_ia32_pcmpgtb128(x, y);</strong>
    print_results(" #  x  y  x&gt;y?", &amp;x, &amp;y, &amp;z);
}
</pre>

<p><div class="rs-tip-major">Poznámka: ve funkci <strong>print_results</strong>
testujeme prvky výsledného vektoru na nulu. Ve vektoru je ve skutečnosti
uložena pravdivostní hodnota reprezentovaná buď nulou nebo -1 (tedy všechny
bity jsou nastaveny).</div></p>

<p>Výsledek získaný po spuštění tohoto demonstračního příkladu:</p>

<pre>
 #  x  y  x==y?
 0  1  8  no
 1  2  8  no
 2  3  8  no
 3  4  8  no
 4  5  8  no
 5  6  8  no
 6  7  8  no
 7  8  8  yes
 8  9  8  no
 9 10  8  no
10 11  8  no
11 12  8  no
12 13  8  no
13 14  8  no
14 15  8  no
15 16  8  no
&nbsp;
 #  x  y  x&gt;y?
 0  1  8  no
 1  2  8  no
 2  3  8  no
 3  4  8  no
 4  5  8  no
 5  6  8  no
 6  7  8  no
 7  8  8  no
 8  9  8  yes
 9 10  8  yes
10 11  8  yes
11 12  8  yes
12 13  8  yes
13 14  8  yes
14 15  8  yes
15 16  8  yes
</pre>

<p>Vidíme, že výsledky jsou korektní.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Překlad obou operací porovnání do assembleru s&nbsp;povolením SSE operací</h2>

<p>První intrinsic <strong>__builtin_ia32_pcmpeqb128</strong> byla podle
očekávání přeložena do strojové instrukce <strong>pcmpeqb</strong>:</p>

<pre>
    z = __builtin_ia32_pcmpeqb128(x, y);
  d7:   66 0f 6f 45 d0          movdqa xmm0,XMMWORD PTR [rbp-0x30]
  dc:   66 0f 6f 4d c0          movdqa xmm1,XMMWORD PTR [rbp-0x40]
  e1:   66 0f 74 c1             <strong>pcmpeqb xmm0,xmm1</strong>
  e5:   0f 29 45 e0             movaps XMMWORD PTR [rbp-0x20],xmm0
</pre>

<p>Druhá intrinsic <strong>__builtin_ia32_pcmpgtb128</strong> byla přeložena do
strojové instrukce <strong>pcmpgtb</strong>:</p>

<pre>
    z = __builtin_ia32_pcmpgtb128(x, y);
 104:   66 0f 6f 4d d0          movdqa xmm1,XMMWORD PTR [rbp-0x30]
 109:   66 0f 6f 45 c0          movdqa xmm0,XMMWORD PTR [rbp-0x40]
 10e:   66 0f 64 c1             <strong>pcmpgtb xmm0,xmm1</strong>
 112:   0f 29 45 e0             movaps XMMWORD PTR [rbp-0x20],xmm0
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Všech šest relačních operací pro vektory s&nbsp;prvky typu <strong>float</strong></h2>

<p>Zatímco pro vektory s&nbsp;celočíselnými prvky jsou k&nbsp;dispozici pouze
instrukce určené pro porovnání prvků vektorů na relace typu
&bdquo;shodný&ldquo; a &bdquo;větší než&ldquo; (s&nbsp;tím, že zbylé relace lze
&bdquo;dopočítat)&ldquo;, je tomu v&nbsp;případě prvků typu
<strong>float</strong> a <strong>double</strong> poněkud jinak, protože
v&nbsp;tomto případě nabízí instrukční soubor všech šest relačních operací.</p>

<p>Z&nbsp;tohoto důvodu nalezneme v&nbsp;GCC těchto šest intrinsic (příslušná
relace je vybrána pomocí dvojice zvýrazněných znaků se zřejmým významem
zavedeným již před 70 lety ve FORTRANu):</p>

<ol>
<li>__builtin_ia32_cmp<strong>eq</strong>ps</li>
<li>__builtin_ia32_cmp<strong>gt</strong>ps</li>
<li>__builtin_ia32_cmp<strong>lt</strong>ps</li>
<li>__builtin_ia32_cmp<strong>ge</strong>ps</li>
<li>__builtin_ia32_cmp<strong>le</strong>ps</li>
<li>__builtin_ia32_cmp<strong>ne</strong>qps</li>
</ol>

<p>Všech šest těchto operací otestujeme v&nbsp;příkladu, v&nbsp;němž se
porovnává dvojice vektorů, z&nbsp;nichž každý obsahuje čtveřici hodnot typu
<i>float/single</i>. Hodnoty uložené ve vektorech jsou zvoleny takovým
způsobem, aby výsledky byly pro každé porovnání odlišné:</p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;xmmintrin.h&gt;
&nbsp;
void print_results(const char *title, __v4sf *x, __v4sf *y, __v4sf *z)
{
    int i;
&nbsp;
    puts(title);
    for (i = 0; i &lt; sizeof(*x) / sizeof(float); i++) {
        printf("%2d  %3.1f  %3.1f  %s\n", i, (*x)[i], (*y)[i], (*z)[i] == 0 ? "no":"yes");
    }
&nbsp;
    putchar('\n');
}
&nbsp;
int main(void)
{
    __v4sf x = { 1, 2.5, 2.5, 4 };
    __v4sf y = { 2.5, 2.5, 2.5, 2.5 };
    __v4sf z;
&nbsp;
    z = <strong>__builtin_ia32_cmpeqps(x, y);</strong>
    print_results(" #  x    y    x==y?", &amp;x, &amp;y, &amp;z);
&nbsp;
    z = <strong>__builtin_ia32_cmpgtps(x, y);</strong>
    print_results(" #  x    y    x&gt;y?", &amp;x, &amp;y, &amp;z);
&nbsp;
    z = <strong>__builtin_ia32_cmpltps(x, y);</strong>
    print_results(" #  x    y    x&lt;y?", &amp;x, &amp;y, &amp;z);
&nbsp;
    z = <strong>__builtin_ia32_cmpgeps(x, y);</strong>
    print_results(" #  x    y    x&gt;=y?", &amp;x, &amp;y, &amp;z);
&nbsp;
    z = <strong>__builtin_ia32_cmpleps(x, y);</strong>
    print_results(" #  x    y    x&lt;=y?", &amp;x, &amp;y, &amp;z);
&nbsp;
    z = <strong>__builtin_ia32_cmpneqps(x, y);</strong>
    print_results(" #  x    y    x!=y?", &amp;x, &amp;y, &amp;z);
}
</pre>

<p>Výsledky získané po spuštění budou vypadat následovně:</p>

<pre>
 #  x    y    x==y?
 0  1.0  2.5  no
 1  2.5  2.5  yes
 2  2.5  2.5  yes
 3  4.0  2.5  no
&nbsp;
 #  x    y    x&gt;y?
 0  1.0  2.5  no
 1  2.5  2.5  no
 2  2.5  2.5  no
 3  4.0  2.5  yes
&nbsp;
 #  x    y    x&lt;y?
 0  1.0  2.5  yes
 1  2.5  2.5  no
 2  2.5  2.5  no
 3  4.0  2.5  no
&nbsp;
 #  x    y    x&gt;=y?
 0  1.0  2.5  no
 1  2.5  2.5  yes
 2  2.5  2.5  yes
 3  4.0  2.5  yes
&nbsp;
 #  x    y    x&lt;=y?
 0  1.0  2.5  yes
 1  2.5  2.5  yes
 2  2.5  2.5  yes
 3  4.0  2.5  no
&nbsp;
 #  x    y    x!=y?
 0  1.0  2.5  yes
 1  2.5  2.5  no
 2  2.5  2.5  no
 3  4.0  2.5  yes
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Překlad všech šesti operací porovnání do assembleru s&nbsp;povolením SSE operací</h2>

<p>Opět se nyní podívejme na to, jak je všech šest <i>intrinsic</i>
z&nbsp;předchozího demonstračního příkladu přeloženo do assembleru ve chvíli,
kdy je povoleno použití SIMD instrukcí.</p>

<p>Test na rovnost:</p>

<pre>
    z = __builtin_ia32_cmpeqps(x, y);
  eb:   0f 28 45 d0             movaps xmm0,XMMWORD PTR [rbp-0x30]
  ef:   0f 28 4d c0             movaps xmm1,XMMWORD PTR [rbp-0x40]
  f3:   0f c2 c1 00             <strong>cmpeqps xmm0,xmm1</strong>
  f7:   0f 29 45 e0             movaps XMMWORD PTR [rbp-0x20],xmm0
</pre>

<p>Test na relaci &bdquo;větší než&ldquo; (prohozené vstupy):</p>

<pre>
    z = __builtin_ia32_cmpgtps(x, y);
 116:   0f 28 45 d0             movaps xmm0,XMMWORD PTR [rbp-0x30]
 11a:   0f 28 4d c0             movaps xmm1,XMMWORD PTR [rbp-0x40]
 11e:   0f c2 c1 01             <strong>cmpltps xmm0,xmm1</strong>
 122:   0f 29 45 e0             movaps XMMWORD PTR [rbp-0x20],xmm0
</pre>

<p>Test na relaci &bdquo;menší než&ldquo;:</p>

<pre>
    z = __builtin_ia32_cmpltps(x, y);
 141:   0f 28 4d d0             movaps xmm1,XMMWORD PTR [rbp-0x30]
 145:   0f 28 45 c0             movaps xmm0,XMMWORD PTR [rbp-0x40]
 149:   0f c2 c1 01             <strong>cmpltps xmm0,xmm1</strong>
 14d:   0f 29 45 e0             movaps XMMWORD PTR [rbp-0x20],xmm0
</pre>

<p>Test na relaci &bdquo;větší nebo rovno&ldquo;: (prohozené vstupy)</p>

<pre>
    z = __builtin_ia32_cmpgeps(x, y);
 16c:   0f 28 45 d0             movaps xmm0,XMMWORD PTR [rbp-0x30]
 170:   0f 28 4d c0             movaps xmm1,XMMWORD PTR [rbp-0x40]
 174:   0f c2 c1 02             <strong>cmpleps xmm0,xmm1</strong>
 178:   0f 29 45 e0             movaps XMMWORD PTR [rbp-0x20],xmm0
</pre>

<p>Test na relaci &bdquo;menší nebo rovno&ldquo;:</p>

<pre>
    z = __builtin_ia32_cmpleps(x, y);
 197:   0f 28 4d d0             movaps xmm1,XMMWORD PTR [rbp-0x30]
 19b:   0f 28 45 c0             movaps xmm0,XMMWORD PTR [rbp-0x40]
 19f:   0f c2 c1 02             <strong>cmpleps xmm0,xmm1</strong>
 1a3:   0f 29 45 e0             movaps XMMWORD PTR [rbp-0x20],xmm0
</pre>

<p>Test na relaci &bdquo;nerovnost&ldquo;:</p>

<pre>
    z = __builtin_ia32_cmpneqps(x, y);
 1c2:   0f 28 45 d0             movaps xmm0,XMMWORD PTR [rbp-0x30]
 1c6:   0f 28 4d c0             movaps xmm1,XMMWORD PTR [rbp-0x40]
 1ca:   0f c2 c1 04             <strong>cmpneqps xmm0,xmm1</strong>
 1ce:   0f 29 45 e0             movaps XMMWORD PTR [rbp-0x20],xmm0
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Unární operace pro výpočet převrácené hodnoty, druhé odmocniny a převrácené hodnoty druhé odmocniny</h2>

<p></p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;xmmintrin.h&gt;
&nbsp;
void print_results(const char *title, __v4sf *x, __v4sf *y)
{
    int i;
&nbsp;
    puts(title);
    for (i = 0; i &lt; sizeof(*x) / sizeof(float); i++) {
        printf("%2d  %5.2f  %3.1f\n", i, (*x)[i], (*y)[i]);
    }
&nbsp;
    putchar('\n');
}
&nbsp;
int main(void)
{
    __v4sf x = { 1, 2, 4, 10 };
    __v4sf y;
&nbsp;
    y = <strong>__builtin_ia32_rcpps(x);</strong>
    print_results(" #   x     1/x", &amp;x, &amp;y);
&nbsp;
    y = <strong>__builtin_ia32_sqrtps(x);</strong>
    print_results(" #   x     sqrt(x)", &amp;x, &amp;y);
&nbsp;
    y = <strong>__builtin_ia32_rsqrtps(x);</strong>
    print_results(" #   x     1/sqrt(x)", &amp;x, &amp;y);
}
</pre>

<pre>
 #   x     1/x
 0   1.00  1.0
 1   2.00  0.5
 2   4.00  0.2
 3  10.00  0.1
&nbsp;
 #   x     sqrt(x)
 0   1.00  1.0
 1   2.00  1.4
 2   4.00  2.0
 3  10.00  3.2
&nbsp;
 #   x     1/sqrt(x)
 0   1.00  1.0
 1   2.00  0.7
 2   4.00  0.5
 3  10.00  0.3
</pre>

<pre>
</pre>

<pre>
</pre>

<pre>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Instrukce určené pro přeskupení, promíchání a výběr prvků uložených ve dvojici vektorů</h2>

<p>SIMD operace jsou v&nbsp;prvé řadě určeny pro paralelní výpočty založené na
provádění jedné zvolené operace nad všemi korespondujícími prvky dvou vstupních
vektorů popř.&nbsp;jediného vstupního vektoru (viz například operace ukázané
v&nbsp;rámci předchozí kapitoly, které pracují s&nbsp;jediným vstupním
vektorem). Ovšem v&nbsp;mnoha případech nejsou vstupní data, konkrétně
jednotlivé prvky, nad nimiž se mají &bdquo;vektorové&ldquo; výpočty provádět,
uspořádána v&nbsp;takovém pořadí, aby je bylo možné přímo přenést do vektorů.
Totéž platí pro výsledky vektorových operací &ndash; mnohdy je potřebujeme
nějakým způsobem přeuspořádat. Pro tyto účely se do instrukčních sad pro SIMD
operace vkládají instrukce, které jsou určeny pro konverzi dat, přeskupení,
promíchání, popř.&nbsp;pro výběr prvků typicky uložených v&nbsp;jednom vektoru
nebo ve dvojici vektorů. S&nbsp;vybranými instrukcemi z&nbsp;této dnes již
poměrně rozsáhlé skupiny skupiny se seznámíme v&nbsp;dalším textu.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Instrukce <strong>shufps</strong> a její intrinsic</h2>

<p></p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;xmmintrin.h&gt;

void print_results(const char *title, __v4sf * x, __v4sf * y, __v4sf * z)
{
    int i;

    puts(title);
    for (i = 0; i &lt; sizeof(*x) / sizeof(float); i++) {
        printf("%2d  %2.0f  %2.0f  %2.0f\n", i, (*x)[i], (*y)[i], (*z)[i]);
    }

    putchar('\n');
}

int main(void)
{
    __v4sf x = { 1, 2, 3, 4 };
    __v4sf y = { 6, 7, 8, 9 };
    __v4sf z;

    /* ------------------------------------- */
    /* | x3     | x2     | x1     | x0     | */
    /* | y2     | y2     | y1     | y0     | */
    /* | y3..y0 | y3..y0 | x3..x0 | x3..x0 | */
    /* ------------------------------------- */

    z = __builtin_ia32_shufps(x, y, 0);
    print_results(" #   x   y   z", &amp;x, &amp;y, &amp;z);

    z = __builtin_ia32_shufps(x, y, 0b11110000);
    print_results(" #   x   y   z", &amp;x, &amp;y, &amp;z);

    z = __builtin_ia32_shufps(x, y, 0b10100101);
    print_results(" #   x   y   z", &amp;x, &amp;y, &amp;z);
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
</pre>




<p><a name="k16"></a></p>
<h2 id="k16">16. Instrukce <strong>unpckhps</strong> a <strong>unpcklps</strong> a jejich intrinsics</h2>

<p></p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;xmmintrin.h&gt;
&nbsp;
void print_results(const char *title, __v4sf * x, __v4sf * y, __v4sf * z)
{
    int i;
&nbsp;
    puts(title);
    for (i = 0; i &lt; sizeof(*x) / sizeof(float); i++) {
        printf("%2d  %2.0f  %2.0f  %2.0f\n", i, (*x)[i], (*y)[i], (*z)[i]);
    }
&nbsp;
    putchar('\n');
}
&nbsp;
int main(void)
{
    __v4sf x = { 1, 2, 3, 4 };
    __v4sf y = { 6, 7, 8, 9 };
    __v4sf z;
&nbsp;
    z = <strong>__builtin_ia32_unpckhps(x, y);</strong>
    print_results(" #   x   y   z", &amp;x, &amp;y, &amp;z);
&nbsp;
    z = <strong>__builtin_ia32_unpcklps(x, y);</strong>
    print_results(" #   x   y   z", &amp;x, &amp;y, &amp;z);
}
</pre>

<p></p>

<pre>
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha &ndash; soubor Makefile použitý v&nbsp;článcích o SIMD operacích</h2>

<p>Následující soubor <strong>Makefile</strong> byl použit pro překlad
zdrojových kódů všech výše uvedených demonstračních příkladů do objektového
kódu jeho s&nbsp;následným disassemblingem do assembleru (resp.&nbsp;přesněji
řečeno do assembleru zkombinovaného s&nbsp;hexadecimálním výpisem obsahu
souboru s&nbsp;objektovým kódem). Makefile obsahuje i instrukce pro překlad
demonstračních příkladů z&nbsp;předchozích článků o SIMD operacích:</p>

<pre>
CC=gcc
OBJDUMP=objdump
&nbsp;
all:    simd04_1.lst simd04_2.lst \
        simd04B_1.lst simd04B_2.lst \
        simd07_1.lst simd07_2.lst \
        simd08_1.lst simd08_2.lst \
        simd12_1.lst simd12_2.lst \
        simd13_1.lst simd13_2.lst simd13_3.lst simd13_4.lst \
        simd14_1.lst simd14_2.lst simd14_3.lst simd14_4.lst \
        simd15_1.lst simd15_2.lst simd15_3.lst simd15_4.lst \
        simd16_1.lst simd16_2.lst simd16_3.lst simd16_4.lst \
        simd17_1.lst simd17_2.lst simd17_3.lst simd17_4.lst \
        simd18_1.lst simd18_2.lst simd18_3.lst simd18_4.lst \
        intrinsic_mmx_1.lst \
        intrinsic_mmx_2.lst \
        intrinsic_mmx_3.lst \
        intrinsic_mmx_4.lst \
        intrinsic_mmx_5.lst \
        intrinsic_sse_1.lst \
        intrinsic_sse_2.lst \
        intrinsic_sse_3.lst \
        intrinsic_sse_4.lst \
        intrinsic_sse_5.lst \
        intrinsic_sse_6.lst \
        intrinsic_sse_7.lst \
        intrinsic_sse_8.lst \
        intrinsic_sse_9.lst \
        intrinsic_sse_A.lst \
        intrinsic_sse_B.lst
&nbsp;
clean:
        rm *.lst
        rm *.o
&nbsp;
%.lst:  %.o
        objdump -d -M intel -S $&lt; &gt; $@ 
&nbsp;
simd04_1.o:     simd04.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd04_2.o:     simd04.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd04B_1.o:    simd04B.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd04B_2.o:    simd04B.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd07_1.o:     simd07.c
        gcc -c -mno-sse -g -o $@ $&lt;
&nbsp;
simd07_2.o:     simd07.c
        gcc -c -g -o $@ $&lt;
&nbsp;
simd08_1.o:     simd08.c
        gcc -c -mno-sse -g -o $@ $&lt;
&nbsp;
simd08_2.o:     simd08.c
        gcc -c -g -o $@ $&lt;
&nbsp;
simd12_1.o:     simd12.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd12_2.o:     simd12.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd13_1.o:     simd13.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd13_2.o:     simd13.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd13_3.o:     simd13.c
        gcc -c -O3 -mno-sse -g -o $@ $&lt;
&nbsp;
simd13_4.o:     simd13.c
        gcc -c -O3 -g -o $@ $&lt;
&nbsp;
simd14_1.o:     simd14.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd14_2.o:     simd14.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd14_3.o:     simd14.c
        gcc -c -O3 -mno-sse -g -o $@ $&lt;
&nbsp;
simd14_4.o:     simd14.c
        gcc -c -O3 -g -o $@ $&lt;
&nbsp;
simd15_1.o:     simd15.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd15_2.o:     simd15.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd15_3.o:     simd15.c
        gcc -c -O3 -mno-sse -g -o $@ $&lt;
&nbsp;
simd15_4.o:     simd15.c
        gcc -c -O3 -g -o $@ $&lt;
&nbsp;
simd16_1.o:     simd16.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd16_2.o:     simd16.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd16_3.o:     simd16.c
        gcc -c -O3 -mno-sse -g -o $@ $&lt;
&nbsp;
simd16_4.o:     simd16.c
        gcc -c -O3 -g -o $@ $&lt;
&nbsp;
simd17_1.o:     simd17.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd17_2.o:     simd17.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd17_3.o:     simd17.c
        gcc -c -O3 -mno-sse -g -o $@ $&lt;
&nbsp;
simd17_4.o:     simd17.c
        gcc -c -O3 -g -o $@ $&lt;
&nbsp;
simd18_1.o:     simd18.c
        gcc -c -O0 -mno-sse -g -o $@ $&lt;
&nbsp;
simd18_2.o:     simd18.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
simd18_3.o:     simd18.c
        gcc -c -O3 -mno-sse -g -o $@ $&lt;
&nbsp;
simd18_4.o:     simd18.c
        gcc -c -O3 -g -o $@ $&lt;
&nbsp;
intrinsic_mmx_1.o:      intrinsic_mmx_1.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_mmx_2.o:      intrinsic_mmx_2.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_mmx_3.o:      intrinsic_mmx_3.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_mmx_4.o:      intrinsic_mmx_4.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_mmx_5.o:      intrinsic_mmx_5.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_1.o:      intrinsic_sse_1.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_2.o:      intrinsic_sse_2.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_3.o:      intrinsic_sse_3.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_4.o:      intrinsic_sse_4.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_5.o:      intrinsic_sse_5.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_6.o:      intrinsic_sse_6.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_7.o:      intrinsic_sse_7.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_8.o:      intrinsic_sse_8.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_9.o:      intrinsic_sse_9.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_A.o:      intrinsic_sse_A.c
        gcc -c -O0 -g -o $@ $&lt;
&nbsp;
intrinsic_sse_B.o:      intrinsic_sse_B.c
        gcc -c -O0 -g -o $@ $&lt;
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady napsané v&nbsp;jazyku C, které jsou určené pro překlad
pomocí překladače <strong>GCC C</strong>, byly uložen do Git repositáře, který
je dostupný na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Jednotlivé demonstrační příklady si můžete v&nbsp;případě potřeby stáhnout i
jednotlivě bez nutnosti klonovat celý (dnes již velmi rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>simd01.c</td><td>vektor celých čísel typu <strong>short int</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd01.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd01.c</a></td></tr>
<tr><td> 2</td><td>simd02.c</td><td>ukázka použití vektorů s&nbsp;celočíselnými typy bez znaménka</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd02.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd02.c</a></td></tr>
<tr><td> 3</td><td>simd03.c</td><td>ukázka použití vektorů s&nbsp;celočíselnými typy se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd03.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd03.c</a></td></tr>
<tr><td> 4</td><td>simd04.c</td><td>paralelní součet celočíselných prvků vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd04.c</a></td></tr>
<tr><td> 5</td><td>simd04B.c</td><td>úprava pro další datové typy</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B.c</a></td></tr>
<tr><td> 6</td><td>simd05.c</td><td>přístup k&nbsp;jednotlivým prvkům vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05.c</a></td></tr>
<tr><td> 7</td><td>simd05B.c</td><td>korektnější výpočet počtu prvků vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05B.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05B.c</a></td></tr>
<tr><td> 8</td><td>simd05C.c</td><td>definice typu vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd05C.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd05C.c</a></td></tr>
<tr><td> 9</td><td>simd06.c</td><td>vektor čísel s&nbsp;plovoucí řádovou čárkou</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd06.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd06.c</a></td></tr>
<tr><td>10</td><td>simd07.c</td><td>paralelní součet prvků vektorů (typ <strong>float</strong>)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd07.c</a></td></tr>
<tr><td>11</td><td>simd08.c</td><td>paralelní součet prvků vektorů (typ <strong>double</strong>)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd08.c</a></td></tr>
<tr><td>12</td><td>simd09.c</td><td>překročení délky vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd09.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd09.c</a></td></tr>
<tr><td>13</td><td>simd10.c</td><td>přístup k&nbsp;jednotlivým prvkům vektorů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd10.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd10.c</a></td></tr>
<tr><td>14</td><td>simd11.c</td><td>překročení délky vektoru</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd11.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd11.c</a></td></tr>
<tr><td>15</td><td>simd12.c</td><td>dlouhý vektor s&nbsp;256 bajty</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd12.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>simd13.c</td><td>operace součtu pro vektory s&nbsp;celočíselnými prvky rozličné bitové šířky bez znaménka</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd13.c</a></td></tr>
<tr><td>17</td><td>simd14.c</td><td>operace součtu pro vektory s&nbsp;celočíselnými prvky rozličné bitové šířky se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd14.c</a></td></tr>
<tr><td>18</td><td>simd15.c</td><td>operace součtu pro vektory s&nbsp;prvky rozličné bitové šířky s&nbsp;plovoucí řádovou čárkou</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd15.c</a></td></tr>
<tr><td>19</td><td>simd16.c</td><td>operace součtu pro dlouhé vektory s&nbsp;prvky rozličné bitové šířky s&nbsp;plovoucí řádovou čárkou</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd16.c</a></td></tr>
<tr><td>20</td><td>simd17.c</td><td>všechny podporované binární operace nad vektory s&nbsp;celočíselnými prvky se znaménkem</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd17.c</a></td></tr>
<tr><td>21</td><td>simd18.c</td><td>všechny podporované binární operace nad vektory s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18.c">https://github.com/tisnik/presentations/blob/master/SIMD/simd18.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>intrinsic_mmx_1.c</td><td>intrinsic pro technologii MMX: instrukce <strong>paddb</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_1.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_1.c</a></td></tr>
<tr><td>24</td><td>intrinsic_mmx_2.c</td><td>intrinsic pro technologii MMX: instrukce <strong>paddw</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_2.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_2.c</a></td></tr>
<tr><td>25</td><td>intrinsic_mmx_3.c</td><td>intrinsic pro technologii MMX: instrukce <strong>paddb</strong> (přetečení)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_3.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_3.c</a></td></tr>
<tr><td>26</td><td>intrinsic_mmx_4.c</td><td>intrinsic pro technologii MMX: instrukce <strong>paddsb</strong> (saturace)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_4.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_4.c</a></td></tr>
<tr><td>27</td><td>intrinsic_mmx_5.c</td><td>intrinsic pro technologii MMX: instrukce <strong>pupckhbw</strong> (kombinace dvou vektorů)</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_5.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_5.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>28</td><td>intrinsic_sse_1.c</td><td>součet dvou vektorů s&nbsp;šestnácti prvky typu <strong>char</strong> instrukcí <strong>paddb128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_1.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_1.c</a></td></tr>
<tr><td>29</td><td>intrinsic_sse_2.c</td><td>součet dvou vektorů s&nbsp;osmi prvky typu <strong>short</strong> instrukcí <strong>paddw128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_2.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_2.c</a></td></tr>
<tr><td>30</td><td>intrinsic_sse_3.c</td><td>součet dvou vektorů se čtyřmi prvky typu <strong>int</strong> instrukcí <strong>paddd128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_3.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_3.c</a></td></tr>
<tr><td>31</td><td>intrinsic_sse_4.c</td><td>součet dvou vektorů se dvěma prvky typu <strong>long</strong> instrukcí <strong>paddq128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_4.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_4.c</a></td></tr>
<tr><td>32</td><td>intrinsic_sse_5.c</td><td>součet dvou vektorů se čtyřmi prvky typu <strong>float</strong> instrukcí <strong>addps</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_5.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_5.c</a></td></tr>
<tr><td>33</td><td>intrinsic_sse_6.c</td><td>součet dvou vektorů se dvěma prvky typu <strong>double</strong> instrukcí <strong>addpd</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_6.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_6.c</a></td></tr>
<tr><td>34</td><td>intrinsic_sse_7.c</td><td>porovnání celočíselných prvků instrukcemi <strong>pcmpeqb128</strong> a <strong>pcmpgtb128</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_7.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_7.c</a></td></tr>
<tr><td>35</td><td>intrinsic_sse_8.c</td><td>všech šest relačních operací pro vektory s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_8.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_8.c</a></td></tr>
<tr><td>36</td><td>intrinsic_sse_9.c</td><td>unární operace pro výpočet převrácené hodnoty, druhé odmocniny a převrácené hodnoty druhé odmocniny</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_9.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_9.c</a></td></tr>
<tr><td>37</td><td>intrinsic_sse_A.c</td><td>instrukce <strong>shufps</strong> a její intrinsic</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_A.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_A.c</a></td></tr>
<tr><td>38</td><td>intrinsic_sse_B.c</td><td>instrukce <strong>unpckhps</strong> a <strong>unpcklps</strong> a jejich intrinsics</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_B.c">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_B.c</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>39</td><td>Makefile</td><td>Makefile pro překlad demonstračních příkladů</td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/Makefile">https://github.com/tisnik/presentations/blob/master/SIMD/Makefile</a></td></tr>
</table>

<p>Soubory vzniklé překladem z&nbsp;jazyka C do assembleru procesorů x86-64:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>simd04_1.lst</td><td>překlad zdrojového kódu <strong>simd04_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04_1.lst</a></td></tr>
<tr><td> 2</td><td>simd04_2.lst</td><td>překlad zdrojového kódu <strong>simd04_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04_2.lst</a></td></tr>
<tr><td> 3</td><td>simd04B_1.lst</td><td>překlad zdrojového kódu <strong>simd04B_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_1.lst</a></td></tr>
<tr><td> 4</td><td>simd04B_2.lst</td><td>překlad zdrojového kódu <strong>simd04B_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_2.lst</a></td></tr>
<tr><td> 5</td><td>simd07_1.lst</td><td>překlad zdrojového kódu <strong>simd07_1.c</strong> s&nbsp;přepínači <strong>-mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd07_1.lst</a></td></tr>
<tr><td> 6</td><td>simd07_2.lst</td><td>překlad zdrojového kódu <strong>simd07_2.c</strong> s&nbsp;přepínači <strong>-g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd07_2.lst</a></td></tr>
<tr><td> 7</td><td>simd08_1.lst</td><td>překlad zdrojového kódu <strong>simd08_1.c</strong> s&nbsp;přepínači <strong>-mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd08_1.lst</a></td></tr>
<tr><td> 8</td><td>simd08_2.lst</td><td>překlad zdrojového kódu <strong>simd08_2.c</strong> s&nbsp;přepínači <strong>-g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd08_2.lst</a></td></tr>
<tr><td> 9</td><td>simd12_1.lst</td><td>překlad zdrojového kódu <strong>simd12_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g </strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd12_1.lst</a></td></tr>
<tr><td>10</td><td>simd12_2.lst</td><td>překlad zdrojového kódu <strong>simd12_2.c</strong> s&nbsp;přepínači <strong>-O0 -g </strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd12_2.lst</a></td></tr>
<tr><td>11</td><td>simd13_1.lst</td><td>překlad zdrojového kódu <strong>simd13_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_1.lst</a></td></tr>
<tr><td>12</td><td>simd13_2.lst</td><td>překlad zdrojového kódu <strong>simd13_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_2.lst</a></td></tr>
<tr><td>13</td><td>simd13_3.lst</td><td>překlad zdrojového kódu <strong>simd13_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_3.lst</a></td></tr>
<tr><td>14</td><td>simd13_4.lst</td><td>překlad zdrojového kódu <strong>simd13_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_4.lst</a></td></tr>
<tr><td>15</td><td>simd14_1.lst</td><td>překlad zdrojového kódu <strong>simd14_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_1.lst</a></td></tr>
<tr><td>16</td><td>simd14_2.lst</td><td>překlad zdrojového kódu <strong>simd14_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_2.lst</a></td></tr>
<tr><td>17</td><td>simd14_3.lst</td><td>překlad zdrojového kódu <strong>simd14_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_3.lst</a></td></tr>
<tr><td>18</td><td>simd14_4.lst</td><td>překlad zdrojového kódu <strong>simd14_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_4.lst</a></td></tr>
<tr><td>19</td><td>simd15_1.lst</td><td>překlad zdrojového kódu <strong>simd15_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_1.lst</a></td></tr>
<tr><td>20</td><td>simd15_2.lst</td><td>překlad zdrojového kódu <strong>simd15_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_2.lst</a></td></tr>
<tr><td>21</td><td>simd15_3.lst</td><td>překlad zdrojového kódu <strong>simd15_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_3.lst</a></td></tr>
<tr><td>22</td><td>simd15_4.lst</td><td>překlad zdrojového kódu <strong>simd15_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_4.lst</a></td></tr>
<tr><td>23</td><td>simd16_1.lst</td><td>překlad zdrojového kódu <strong>simd16_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_1.lst</a></td></tr>
<tr><td>24</td><td>simd16_2.lst</td><td>překlad zdrojového kódu <strong>simd16_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_2.lst</a></td></tr>
<tr><td>25</td><td>simd16_3.lst</td><td>překlad zdrojového kódu <strong>simd16_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_3.lst</a></td></tr>
<tr><td>26</td><td>simd16_4.lst</td><td>překlad zdrojového kódu <strong>simd16_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_4.lst</a></td></tr>
<tr><td>27</td><td>simd17_1.lst</td><td>překlad zdrojového kódu <strong>simd17_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_1.lst</a></td></tr>
<tr><td>28</td><td>simd17_2.lst</td><td>překlad zdrojového kódu <strong>simd17_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_2.lst</a></td></tr>
<tr><td>29</td><td>simd17_3.lst</td><td>překlad zdrojového kódu <strong>simd17_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_3.lst</a></td></tr>
<tr><td>30</td><td>simd17_4.lst</td><td>překlad zdrojového kódu <strong>simd17_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_4.lst</a></td></tr>
<tr><td>31</td><td>simd18_1.lst</td><td>překlad zdrojového kódu <strong>simd18_1.c</strong> s&nbsp;přepínači <strong>-O0 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_1.lst</a></td></tr>
<tr><td>32</td><td>simd18_2.lst</td><td>překlad zdrojového kódu <strong>simd18_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_2.lst</a></td></tr>
<tr><td>33</td><td>simd18_3.lst</td><td>překlad zdrojového kódu <strong>simd18_3.c</strong> s&nbsp;přepínači <strong>-O3 -mno-sse -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_3.lst</a></td></tr>
<tr><td>34</td><td>simd18_4.lst</td><td>překlad zdrojového kódu <strong>simd18_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_4.lst</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>35</td><td>intrinsic_mmx_1.lst</td><td>překlad zdrojového kódu <strong>intrinsic_mmx_1.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_1.lst</a></td></tr>
<tr><td>36</td><td>intrinsic_mmx_2.lst</td><td>překlad zdrojového kódu <strong>intrinsic_mmx_2.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_2.lst</a></td></tr>
<tr><td>37</td><td>intrinsic_mmx_3.lst</td><td>překlad zdrojového kódu <strong>intrinsic_mmx_3.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_3.lst</a></td></tr>
<tr><td>39</td><td>intrinsic_mmx_5.lst</td><td>překlad zdrojového kódu <strong>intrinsic_mmx_5.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_5.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_mmx_5.lst</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>40</td><td>intrinsic_sse_1.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_1.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_1.lst</a></td></tr>
<tr><td>41</td><td>intrinsic_sse_2.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_2.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_2.lst</a></td></tr>
<tr><td>42</td><td>intrinsic_sse_3.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_3.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_3.lst</a></td></tr>
<tr><td>43</td><td>intrinsic_sse_4.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_4.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_4.lst</a></td></tr>
<tr><td>44</td><td>intrinsic_sse_5.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_5.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_5.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_5.lst</a></td></tr>
<tr><td>45</td><td>intrinsic_sse_6.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_6.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_6.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_6.lst</a></td></tr>
<tr><td>46</td><td>intrinsic_sse_7.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_7.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_7.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_7.lst</a></td></tr>
<tr><td>47</td><td>intrinsic_sse_8.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_8.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_8.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_8.lst</a></td></tr>
<tr><td>48</td><td>intrinsic_sse_9.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_9.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_9.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_9.lst</a></td></tr>
<tr><td>49</td><td>intrinsic_sse_A.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_A.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_A.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_A.lst</a></td></tr>
<tr><td>50</td><td>intrinsic_sse_B.lst</td><td>překlad zdrojového kódu <strong>intrinsic_sse_B.c</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_B.lst">https://github.com/tisnik/presentations/blob/master/SIMD/intrinsic_sse_B.lst</a></td></tr>
</table>

<p>Soubory vzniklé překladem z&nbsp;jazyka C do assembleru procesorů ARMv8:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>simd04_1.lst</td><td>překlad zdrojového kódu <strong>simd04_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04_1.lst</a></td></tr>
<tr><td> 2</td><td>simd04_2.lst</td><td>překlad zdrojového kódu <strong>simd04_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04_2.lst</a></td></tr>
<tr><td> 3</td><td>simd04B_1.lst</td><td>překlad zdrojového kódu <strong>simd04B_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_1.lst</a></td></tr>
<tr><td> 4</td><td>simd04B_2.lst</td><td>překlad zdrojového kódu <strong>simd04B_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd04B_2.lst</a></td></tr>
<tr><td> 5</td><td>simd07_1.lst</td><td>překlad zdrojového kódu <strong>simd07_1.c</strong> s&nbsp;přepínači <strong>-march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd07_1.lst</a></td></tr>
<tr><td> 6</td><td>simd07_2.lst</td><td>překlad zdrojového kódu <strong>simd07_2.c</strong> s&nbsp;přepínači <strong>-g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd07_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd07_2.lst</a></td></tr>
<tr><td> 7</td><td>simd08_1.lst</td><td>překlad zdrojového kódu <strong>simd08_1.c</strong> s&nbsp;přepínači <strong>-march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd08_1.lst</a></td></tr>
<tr><td> 8</td><td>simd08_2.lst</td><td>překlad zdrojového kódu <strong>simd08_2.c</strong> s&nbsp;přepínači <strong>-g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd08_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd08_2.lst</a></td></tr>
<tr><td> 9</td><td>simd12_1.lst</td><td>překlad zdrojového kódu <strong>simd12_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g </strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd12_1.lst</a></td></tr>
<tr><td>10</td><td>simd12_2.lst</td><td>překlad zdrojového kódu <strong>simd12_2.c</strong> s&nbsp;přepínači <strong>-O0 -g </strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd12_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd12_2.lst</a></td></tr>
<tr><td>11</td><td>simd13_1.lst</td><td>překlad zdrojového kódu <strong>simd13_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_1.lst</a></td></tr>
<tr><td>12</td><td>simd13_2.lst</td><td>překlad zdrojového kódu <strong>simd13_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_2.lst</a></td></tr>
<tr><td>13</td><td>simd13_3.lst</td><td>překlad zdrojového kódu <strong>simd13_3.c</strong> s&nbsp;přepínači <strong>-O3 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_3.lst</a></td></tr>
<tr><td>14</td><td>simd13_4.lst</td><td>překlad zdrojového kódu <strong>simd13_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd13_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd13_4.lst</a></td></tr>
<tr><td>15</td><td>simd14_1.lst</td><td>překlad zdrojového kódu <strong>simd14_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_1.lst</a></td></tr>
<tr><td>16</td><td>simd14_2.lst</td><td>překlad zdrojového kódu <strong>simd14_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_2.lst</a></td></tr>
<tr><td>17</td><td>simd14_3.lst</td><td>překlad zdrojového kódu <strong>simd14_3.c</strong> s&nbsp;přepínači <strong>-O3 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_3.lst</a></td></tr>
<tr><td>18</td><td>simd14_4.lst</td><td>překlad zdrojového kódu <strong>simd14_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd14_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd14_4.lst</a></td></tr>
<tr><td>19</td><td>simd15_1.lst</td><td>překlad zdrojového kódu <strong>simd15_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_1.lst</a></td></tr>
<tr><td>20</td><td>simd15_2.lst</td><td>překlad zdrojového kódu <strong>simd15_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_2.lst</a></td></tr>
<tr><td>21</td><td>simd15_3.lst</td><td>překlad zdrojového kódu <strong>simd15_3.c</strong> s&nbsp;přepínači <strong>-O3 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_3.lst</a></td></tr>
<tr><td>22</td><td>simd15_4.lst</td><td>překlad zdrojového kódu <strong>simd15_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd15_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd15_4.lst</a></td></tr>
<tr><td>23</td><td>simd16_1.lst</td><td>překlad zdrojového kódu <strong>simd16_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_1.lst</a></td></tr>
<tr><td>24</td><td>simd16_2.lst</td><td>překlad zdrojového kódu <strong>simd16_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_2.lst</a></td></tr>
<tr><td>25</td><td>simd16_3.lst</td><td>překlad zdrojového kódu <strong>simd16_3.c</strong> s&nbsp;přepínači <strong>-O3 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_3.lst</a></td></tr>
<tr><td>26</td><td>simd16_4.lst</td><td>překlad zdrojového kódu <strong>simd16_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd16_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd16_4.lst</a></td></tr>
<tr><td>27</td><td>simd17_1.lst</td><td>překlad zdrojového kódu <strong>simd17_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_1.lst</a></td></tr>
<tr><td>28</td><td>simd17_2.lst</td><td>překlad zdrojového kódu <strong>simd17_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_2.lst</a></td></tr>
<tr><td>29</td><td>simd17_3.lst</td><td>překlad zdrojového kódu <strong>simd17_3.c</strong> s&nbsp;přepínači <strong>-O3 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_3.lst</a></td></tr>
<tr><td>30</td><td>simd17_4.lst</td><td>překlad zdrojového kódu <strong>simd17_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd17_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd17_4.lst</a></td></tr>
<tr><td>31</td><td>simd18_1.lst</td><td>překlad zdrojového kódu <strong>simd18_1.c</strong> s&nbsp;přepínači <strong>-O0 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_1.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_1.lst</a></td></tr>
<tr><td>32</td><td>simd18_2.lst</td><td>překlad zdrojového kódu <strong>simd18_2.c</strong> s&nbsp;přepínači <strong>-O0 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_2.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_2.lst</a></td></tr>
<tr><td>33</td><td>simd18_3.lst</td><td>překlad zdrojového kódu <strong>simd18_3.c</strong> s&nbsp;přepínači <strong>-O3 -march=armv8-a+nosimd -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_3.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_3.lst</a></td></tr>
<tr><td>34</td><td>simd18_4.lst</td><td>překlad zdrojového kódu <strong>simd18_4.c</strong> s&nbsp;přepínači <strong>-O3 -g</strong></td><td><a href="https://github.com/tisnik/presentations/blob/master/SIMD/simd18_4.lst">https://github.com/tisnik/presentations/blob/master/SIMD/simd18_4.lst</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>GCC documentation: Extensions to the C Language Family<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html#C-Extensions">https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html#C-Extensions</a>
</li>

<li>GCC documentation: Using Vector Instructions through Built-in Functions<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html">https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html</a>
</li>

<li>SSE (Streaming SIMD Extentions)<br />
<a href="http://www.songho.ca/misc/sse/sse.html">http://www.songho.ca/misc/sse/sse.html</a>
</li>

<li>Timothy A. Chagnon: SSE and SSE2<br />
<a href="http://www.cs.drexel.edu/~tc365/mpi-wht/sse.pdf">http://www.cs.drexel.edu/~tc365/mpi-wht/sse.pdf</a>
</li>

<li>Intel corporation: Extending the Worldr's Most Popular Processor Architecture<br />
<a href="http://download.intel.com/technology/architecture/new-instructions-paper.pdf">http://download.intel.com/technology/architecture/new-instructions-paper.pdf</a>
</li>

<li>SIMD architectures:<br />
<a href="http://arstechnica.com/old/content/2000/03/simd.ars/">http://arstechnica.com/old/content/2000/03/simd.ars/</a>
</li>

<li>Tour of the Black Holes of Computing!: Floating Point<br />
<a href="http://www.cs.hmc.edu/~geoff/classes/hmc.cs105.../slides/class02_floats.ppt">http://www.cs.hmc.edu/~geoff/classes/hmc.cs105.../slides/class02_floats.ppt</a>
</li>

<li>3Dnow! Technology Manual<br />
AMD Inc., 2000</li>

<li>Intel MMX<sup>TM</sup> Technology Overview<br />
Intel corporation, 1996</li>

<li>MultiMedia eXtensions<br />
<a href="http://softpixel.com/~cwright/programming/simd/mmx.php">http://softpixel.com/~cwright/programming/simd/mmx.php</a>i
</li>

<li>AMD K5 ("K5" / "5k86")<br />
<a href="http://www.pcguide.com/ref/cpu/fam/g5K5-c.html">http://www.pcguide.com/ref/cpu/fam/g5K5-c.html</a>
</li>

<li>Sixth Generation Processors<br />
<a href="http://www.pcguide.com/ref/cpu/fam/g6.htm">http://www.pcguide.com/ref/cpu/fam/g6.htm</a>
</li>

<li>Great Microprocessors of the Past and Present<br />
<a href="http://www.cpushack.com/CPU/cpu1.html">http://www.cpushack.com/CPU/cpu1.html</a>
</li>

<li>Very long instruction word (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Very_long_instruction_word">http://en.wikipedia.org/wiki/Very_long_instruction_word</a>
</li>

<li>CPU design (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/CPU_design">http://en.wikipedia.org/wiki/CPU_design</a>
</li>

<li>Bulldozer (microarchitecture)<br />
<a href="https://en.wikipedia.org/wiki/Bulldozer_(microarchitecture)">https://en.wikipedia.org/wiki/Bulldozer_(microarchitecture)</a>
</li>

<li>SIMD Instructions Considered Harmful<br />
<a href="https://www.sigarch.org/simd-instructions-considered-harmful/">https://www.sigarch.org/simd-instructions-considered-harmful/</a>
</li>

<li>GCC Compiler Intrinsics<br />
<a href="https://iq.opengenus.org/gcc-compiler-intrinsics/">https://iq.opengenus.org/gcc-compiler-intrinsics/</a>
</li>

<li>Scalable_Vector_Extension_(SVE)<br />
<a href="https://en.wikipedia.org/wiki/AArch64#Scalable_Vector_Extension_(SVE)">https://en.wikipedia.org/wiki/AArch64#Scalable_Vector_Extension_(SVE)</a>
</li>

<li>FADD/FADDP/FIADD — Add<br />
<a href="https://www.felixcloutier.com/x86/fadd:faddp:fiadd">https://www.felixcloutier.com/x86/fadd:faddp:fiadd</a>
</li>

<li>ADDPS — Add Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/addps">https://www.felixcloutier.com/x86/addps</a>
</li>

<li>ADDPD — Add Packed Double-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/addpd">https://www.felixcloutier.com/x86/addpd</a>
</li>

<li>FDIV/FDIVP/FIDIV — Divide<br />
<a href="https://www.felixcloutier.com/x86/fdiv:fdivp:fidiv">https://www.felixcloutier.com/x86/fdiv:fdivp:fidiv</a>
</li>

<li>IDIV — Signed Divide<br />
<a href="https://www.felixcloutier.com/x86/idiv">https://www.felixcloutier.com/x86/idiv</a>
</li>

<li>PADDB/PADDW/PADDD/PADDQ — Add Packed Integers<br />
<a href="https://www.felixcloutier.com/x86/paddb:paddw:paddd:paddq">https://www.felixcloutier.com/x86/paddb:paddw:paddd:paddq</a>
</li>

<li>PSUBB/PSUBW/PSUBD — Subtract Packed Integers<br />
<a href="https://www.felixcloutier.com/x86/psubb:psubw:psubd">https://www.felixcloutier.com/x86/psubb:psubw:psubd</a>
</li>

<li>PMULLW — Multiply Packed Signed Integers and Store Low Result<br />
<a href="https://www.felixcloutier.com/x86/pmullw">https://www.felixcloutier.com/x86/pmullw</a>
</li>

<li>PUNPCKLBW/PUNPCKLWD/PUNPCKLDQ/PUNPCKLQDQ — Unpack Low Data<br />
<a href="https://www.felixcloutier.com/x86/punpcklbw:punpcklwd:punpckldq:punpcklqdq">https://www.felixcloutier.com/x86/punpcklbw:punpcklwd:punpckldq:punpcklqdq</a>
</li>

<li>PUNPCKHBW/PUNPCKHWD/PUNPCKHDQ/PUNPCKHQDQ — Unpack High Data<br />
<a href="https://www.felixcloutier.com/x86/punpckhbw:punpckhwd:punpckhdq:punpckhqdq">https://www.felixcloutier.com/x86/punpckhbw:punpckhwd:punpckhdq:punpckhqdq</a>
</li>

<li>PACKUSWB — Pack with Unsigned Saturation<br />
<a href="https://www.felixcloutier.com/x86/packuswb">https://www.felixcloutier.com/x86/packuswb</a>
</li>

<li>ADDPS — Add Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/addps">https://www.felixcloutier.com/x86/addps</a>
</li>

<li>SUBPS — Subtract Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/subps">https://www.felixcloutier.com/x86/subps</a>
</li>

<li>MULPS — Multiply Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/mulps">https://www.felixcloutier.com/x86/mulps</a>
</li>

<li>DIVPS — Divide Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/divps">https://www.felixcloutier.com/x86/divps</a>
</li>

<li>CBW/CWDE/CDQE — Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword<br />
<a href="https://www.felixcloutier.com/x86/cbw:cwde:cdqe">https://www.felixcloutier.com/x86/cbw:cwde:cdqe</a>
</li>

<li>PAND — Logical AND<br />
<a href="https://www.felixcloutier.com/x86/pand">https://www.felixcloutier.com/x86/pand</a>
</li>

<li>POR — Bitwise Logical OR<br />
<a href="https://www.felixcloutier.com/x86/por">https://www.felixcloutier.com/x86/por</a>
</li>

<li>PXOR — Logical Exclusive OR<br />
<a href="https://www.felixcloutier.com/x86/pxor">https://www.felixcloutier.com/x86/pxor</a>
</li>

<li>Improve the Multimedia User Experience<br />
<a href="https://www.arm.com/technologies/neon">https://www.arm.com/technologies/neon</a>
</li>

<li>NEON Technology (stránky ARM)<br />
<a href="https://developer.arm.com/technologies/neon">https://developer.arm.com/technologies/neon</a>
</li>

<li>SIMD Assembly Tutorial: ARM NEON - Xiph.org<br />
<a href="https://people.xiph.org/~tterribe/daala/neon_tutorial.pdf">https://people.xiph.org/~tterribe/daala/neon_tutorial.pdf</a>
</li>

<li>Ne10<br />
<a href="http://projectne10.github.io/Ne10/">http://projectne10.github.io/Ne10/</a>
</li>

<li>NEON and Floating-Point architecture<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/BABIGHEB.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/BABIGHEB.html</a>
</li>

<li>An Introduction to ARM NEON<br />
<a href="http://peterdn.com/post/an-introduction-to-ARM-NEON.aspx">http://peterdn.com/post/an-introduction-to-ARM-NEON.aspx</a>
</li>

<li>ARM NEON Intrinsics Reference<br />
<a href="http://infocenter.arm.com/help/topic/com.arm.doc.ihi0073a/IHI0073A_arm_neon_intrinsics_ref.pdf">http://infocenter.arm.com/help/topic/com.arm.doc.ihi0073a/IHI0073A_arm_neon_intrinsics_ref.pdf</a>
</li>

<li>Arm Neon Intrinsics vs hand assembly<br />
<a href="https://stackoverflow.com/questions/9828567/arm-neon-intrinsics-vs-hand-assembly">https://stackoverflow.com/questions/9828567/arm-neon-intrinsics-vs-hand-assembly</a>
</li>

<li>ARM NEON Optimization. An Example<br />
<a href="http://hilbert-space.de/?p=22">http://hilbert-space.de/?p=22</a>
</li>

<li>AArch64 NEON instruction format<br />
<a href="https://developer.arm.com/docs/den0024/latest/7-aarch64-floating-point-and-neon/73-aarch64-neon-instruction-format">https://developer.arm.com/docs/den0024/latest/7-aarch64-floating-point-and-neon/73-aarch64-neon-instruction-format</a>
</li>

<li>ARM SIMD instructions<br />
<a href="https://developer.arm.com/documentation/dht0002/a/Introducing-NEON/What-is-SIMD-/ARM-SIMD-instructions">https://developer.arm.com/documentation/dht0002/a/Introducing-NEON/What-is-SIMD-/ARM-SIMD-instructions</a>
</li>

<li>Learn the architecture - Migrate Neon to SVE Version 1.0<br />
<a href="https://developer.arm.com/documentation/102131/0100/?lang=en">https://developer.arm.com/documentation/102131/0100/?lang=en</a>
</li>

<li>1.2.2. Comparison between NEON technology and other SIMD solutions<br />
<a href="https://developer.arm.com/documentation/den0018/a/Introduction/Comparison-between-ARM-NEON-technology-and-other-implementations/Comparison-between-NEON-technology-and-other-SIMD-solutions?lang=en">https://developer.arm.com/documentation/den0018/a/Introduction/Comparison-between-ARM-NEON-technology-and-other-implementations/Comparison-between-NEON-technology-and-other-SIMD-solutions?lang=en</a>
</li>

<li>NEON Programmer’s Guide<br />
<a href="https://documentation-service.arm.com/static/63299276e68c6809a6b41308">https://documentation-service.arm.com/static/63299276e68c6809a6b41308</a>
</li>

<li>Brain Floating Point – nový formát uložení čísel pro strojové učení a chytrá čidla<br />
<a href="https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/">https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/</a>
</li>

<li>Other Built-in Functions Provided by GCC<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html">https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html</a>
</li>

<li>GCC: 6.60 Built-in Functions Specific to Particular Target Machines<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Target-Builtins.html#Target-Builtins">https://gcc.gnu.org/onlinedocs/gcc/Target-Builtins.html#Target-Builtins</a>
</li>

<li>PCMPEQB/PCMPEQW/PCMPEQD — Compare Packed Data for Equal<br />
<a href="https://www.felixcloutier.com/x86/pcmpeqb:pcmpeqw:pcmpeqd">https://www.felixcloutier.com/x86/pcmpeqb:pcmpeqw:pcmpeqd</a>
</li>

<li>PCMPGTB/PCMPGTW/PCMPGTD — Compare Packed Signed Integers for Greater Than<br />
<a href="https://www.felixcloutier.com/x86/pcmpgtb:pcmpgtw:pcmpgtd">https://www.felixcloutier.com/x86/pcmpgtb:pcmpgtw:pcmpgtd</a>
</li>

<li>SHUFPS — Packed Interleave Shuffle of Quadruplets of Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/shufps">https://www.felixcloutier.com/x86/shufps</a>
</li>

<li>UNPCKHPS — Unpack and Interleave High Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/unpckhps">https://www.felixcloutier.com/x86/unpckhps</a>
</li>

<li>UNPCKLPS — Unpack and Interleave Low Packed Single-Precision Floating-Point Values<br />
<a href="https://www.felixcloutier.com/x86/unpcklps">https://www.felixcloutier.com/x86/unpcklps</a>
</li>

<li>Top 10 Craziest Assembly Language Instructions<br />
<a href="https://www.youtube.com/watch?v=Wz_xJPN7lAY">https://www.youtube.com/watch?v=Wz_xJPN7lAY</a>
</li>

<li>Intel x86: let's take a look at one of the most complex instruction set!<br />
<a href="https://www.youtube.com/watch?v=KBLy23B38-c">https://www.youtube.com/watch?v=KBLy23B38-c</a>
</li>

<li>x64 Assembly Tutorial 58: Intro to AVX<br />
<a href="https://www.youtube.com/watch?v=yAvuHd8cBJY">https://www.youtube.com/watch?v=yAvuHd8cBJY</a>
</li>

<li>AVX512 (1 of 3): Introduction and Overview<br />
<a href="https://www.youtube.com/watch?v=D-mM6X5xnTY">https://www.youtube.com/watch?v=D-mM6X5xnTY</a>
</li>

<li>AVX512 (2 of 3): Programming AVX512 in 3 Different Ways<br />
<a href="https://www.youtube.com/watch?v=I3efQKLgsjM">https://www.youtube.com/watch?v=I3efQKLgsjM</a>
</li>

<li>AVX512 (3 of 3): Deep Dive into AVX512 Mechanisms<br />
<a href="https://www.youtube.com/watch?v=543a1b-cPmU">https://www.youtube.com/watch?v=543a1b-cPmU</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>
