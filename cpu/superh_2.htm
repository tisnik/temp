<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Instrukční sada mikroprocesorů SuperH 2 (SH-2)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Instrukční sada mikroprocesorů SuperH 2 (SH-2)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o mikroprocesorech a mikrořadičích řady SuperH si popíšeme instrukční sadu SH-2, s&nbsp;níž se v&nbsp;minulosti mohli setkat programátoři vyvíjející hry pro konzoli Sega Saturn a v&nbsp;současnosti především vývojáři mikrořadičů pro průmyslové aplikace (včetně automotive).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Instrukční sada mikroprocesorů SuperH 2 (SH-2)</a></p>
<p><a href="#k02">2. Podporované formáty instrukčních slov</a></p>
<p><a href="#k03">3. Instrukční soubor SH-2</a></p>
<p><a href="#k04">4. Instrukce pro přesuny dat</a></p>
<p><a href="#k05">5. Základní aritmetické instrukce</a></p>
<p><a href="#k06">6. Porovnávání operandů</a></p>
<p><a href="#k07">7. Násobení, dělení a operace typu Multiply Accumulate</a></p>
<p><a href="#k08">8. Bitové posuny, rotace a aritmetické posuny</a></p>
<p><a href="#k09">9. Logické instrukce</a></p>
<p><a href="#k10">10. Práce se stavovým bitem</a></p>
<p><a href="#k11">11. Nepodmíněné skoky</a></p>
<p><a href="#k12">12. Podpora pro volání podprogramů</a></p>
<p><a href="#k13">13. Podmíněné skoky</a></p>
<p><a href="#k14">14. Ostatní instrukce</a></p>
<p><a href="#k15">15. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Instrukční sada mikroprocesorů SuperH 2 (SH-2)</h2>

<p><a
href="http://www.root.cz/clanky/mikroprocesory-a-mikroradice-s-instrukcni-sadou-superh-sh/">V&nbsp;úvodním
článku</a> o mikroprocesorech a mikrořadičích řady <i>SuperH</i> (<i>SH</i>)
jsme se nejprve seznámili s&nbsp;historií vzniku této architektury a poté jsme
se zabývali popisem základních vlastností těchto čipů. Připomeňme si, že
původní a stále používaná řada SH-2 je postavena na konceptu RISCových
procesorů, čemuž odpovídá použití relativně dlouhé pipeline s&nbsp;pěti řezy,
pevná šířka instrukčních slov i využití takzvaných &bdquo;branch delay
slotů&ldquo; u instrukcí pro podmíněné i nepodmíněné skoky. Oproti klasickým
RISCovým procesorům, mezi něž řadím například MIPS, PA-RISC, SPARC či dnes již
poněkud pozapomenutý AMD 29000, je však architektura <i>SH-2</i> přece jen
orientována více na oblast embedded zařízení. Především je zajímavé použití
relativně úzkých instrukčních slov, protože instrukce mají konstantní šířku
šestnáct bitů. S&nbsp;tím do značné míry souvisí i zmenšení počtu pracovních
registrů na šestnáct, což je pro RISCové procesory poměrně rozumné minimum (na
druhé straně spektra stojí architektura SPARC s&nbsp;registrovými okny a řádově
stovkami pracovních registrů).</p>

<p>Dnes si popíšeme především způsob kódování instrukcí (tj.&nbsp;uložení
vlastního kódu instrukce a indexů operandů do šestnáctibitového instrukčního
slova) a poté se budeme zabývat popisem jednotlivých instrukcí podporovaných
čipy s&nbsp;architekturou <i>SH-2</i>. O možnostech adresování operandu či
operandů jsme si již řekli podrobnější informace v&nbsp;závěru předchozího
článku, takže se v&nbsp;dalším textu budu na příslušné dvě kapitoly [<a
href="http://www.root.cz/clanky/mikroprocesory-a-mikroradice-s-instrukcni-sadou-superh-sh#k12">12</a>]
[<a
href="http://www.root.cz/clanky/mikroprocesory-a-mikroradice-s-instrukcni-sadou-superh-sh#k13">13</a>]
odkazovat.</p>

<p>Poznámka: u mikroprocesorů <i>SuperH</i> se v&nbsp;assembleru za instrukce
nejprve zapisuje zdrojový operand a až poté operand cílový. To například
znamená, že přičtení konstanty k&nbsp;registru R0 zajistí instrukce <strong>ADD
#konstanta, R0</strong>. Tento formát bude použit v&nbsp;navazujících
kapitolách.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Podporované formáty instrukčních slov</h2>

<p>Vzhledem k&nbsp;velkému množství adresovacích režimů nás pravděpodobně
nepřekvapí, že existuje hned několik různých formátů instrukcí (mnohem více,
než například na minimalisticky pojaté architektuře MIPS). Mezi jednotlivými
formáty nalezneme mnoho společných vlastností. Především je zajímavé (a také
dosti elegantní), že každé šestnáctibitové instrukční slovo je možné rozdělit
do čtyř bitových polí, přičemž každé pole má konstantní šířku čtyř bitů. Každé
bitové pole obsahuje buď část kódu instrukce (ten má proměnnou šířku 4, 8, 12
či 16 bitů), index zdrojového registru (4 bity), index cílového registru (4
bity), krátkou konstantu (4, 8, 12 bitů) popř.&nbsp;hodnotu chápanou jako posun
(<i>displacement</i>) v&nbsp;některých adresovacích režimech. Nyní se na
jednotlivé formáty podívejme.</p>

<p>Několik instrukcí nepotřebuje žádný operand a proto je všech šestnáct bitů
instrukčního slova rezervováno pro kód instrukce. Formát je proto velmi
jednoduchý:</p>

<pre>
15  12    8    4    0
+----+----+----+----+
|xxxx|xxxx|xxxx|xxxx|
+----+----+----+----+
</pre>

<p></p>

<p>Další instrukce vyžadují pouze jediný explicitně zadaný cílový operand
(registr s&nbsp;indexem <i>dddd</i>, &bdquo;destination&ldquo;), přičemž
zdrojovým operandem je typicky nějaký systémový registr specifikovaný přímo
v&nbsp;kódu instrukce:</p>

<pre>
15  12    8    4    0
+----+----+----+----+
|xxxx|dddd|xxxx|xxxx|
+----+----+----+----+
</pre>

<p>Podporované adresovací režimy: Rn, @-Rn (register indirect with
pre-decrement).</p>

<p>Prakticky totožný formát je použit u instrukcí vyžadujících pouze jediný
zdrojový (nikoli cílový) operand (<i>ssss</i> &bdquo;source&ldquo;):</p>

<pre>
15  12    8    4    0
+----+----+----+----+
|xxxx|ssss|xxxx|xxxx|
+----+----+----+----+
</pre>

<p>Podporované adresovací režimy: Rn, @Rn+ (register indirect with
post-increment).</p>

<p>Mnoho aritmetických a logických instrukcí podporuje specifikaci dvou
operandů a tudíž je pro ně nutné rezervovat dvojici bitových polí pro index
zdrojového registru <i>ssss</i> i registru cílového <i>dddd</i>:</p>

<pre>
15  12    8    4    0
+----+----+----+----+
|xxxx|dddd|ssss|xxxx|
+----+----+----+----+
</pre>

<p>Podporované adresovací režimy: Rn, @Rn+, @-Rn, @Rn atd. (podle typu
instrukce).</p>

<p>Několik instrukcí (konkrétně se jedná o instrukce určené pro přenosy dat)
podporuje adresovací režim @(disp, Rn), ať již pro zdrojový či cílový operand.
Druhým operandem je v&nbsp;tomto případě <strong>vždy</strong> registr R0, a to
z&nbsp;toho prostého důvodu, že se do instrukce musela &bdquo;vejít&ldquo;
krátká čtyřbitová konstanta <i>disp(lacement</i>), takže nezbylo místo na index
druhého operandu. Formáty instrukcí jsou následující:</p>

<pre>
15  12    8    4    0
+----+----+----+----+
|xxxx|xxxx|ssss|disp|
+----+----+----+----+
</pre>

<pre>
15  12    8    4    0
+----+----+----+----+
|xxxx|xxxx|dddd|disp|
+----+----+----+----+
</pre>

<p>Výjimkou z&nbsp;předchozího formátu je instrukce <strong>MOV.L</strong>,
která podporuje adresovací režim Rm, @(disp, Rn) a @(disp, Rm), Rn. Zde pro
uložení kódu operace zbývají čtyři bity:</p>

<pre>
15  12    8    4    0
+----+----+----+----+
|xxxx|ssss|dddd|disp|
+----+----+----+----+
</pre>

<p>U několika typů instrukcí, například u skoků s&nbsp;podmínkou, se používá
adresování typu @(disp, PC) spočívající v&nbsp;přičtení osmibitové konstanty
k&nbsp;registru PC. Podobně je možné použít i registr GBR popsaný minule atd.
V&nbsp;tomto případě je do instrukčního slova vložena osmibitová konstanta
<i>displacement</i> následujícím způsobem:</p>

<pre>
15  12    8    4    0
+----+----+----+----+
|xxxx|xxxx|disp+disp|
+----+----+----+----+
</pre>

<p>U delších skoků lze využít i dvanáctibitovou konstantu přičtenou
k&nbsp;aktuálnímu obsahu registru PC. Na kód prováděné operace nám zbylo pouze
jediné čtyřbitové pole:</p>

<pre>
15  12    8    4    0
+----+----+----+----+
|xxxx|disp+disp+disp|
+----+----+----+----+
</pre>

<p>Následuje další varianta na podobné téma, tentokrát ovšem u instrukcí typu
<strong>MOV.L (@disp, PC), Rn</strong>. Do instrukčního slova je nutné vložit
jak index pracovního registru, tak i osmibitovou konstantu:</p>

<pre>
15  12    8    4    0
+----+----+----+----+
|xxxx|ssss|disp+disp|
+----+----+----+----+
</pre>

<p>Existuje několik instrukcí s&nbsp;implicitním operandem (typicky registrem
R0) a osmibitovou konstantou. Příkladem může být instrukce <strong>ADD
#konstanta, R0</strong>. Formát těchto instrukcí vypadá následovně (<i>iiii</i>
značí <i>immediate</i>):</p>

<pre>
15  12    8    4    0
+----+----+----+----+
|xxxx|xxxx|iiii+iiii|
+----+----+----+----+
</pre>

<p>Poslední formát instrukcí je použit v&nbsp;případě, že prvním operandem je
pracovní registr a operandem druhým je osmibitová konstanta. Příkladem může být
například instrukce <strong>ADD #konstanta, Rn</strong> atd. V&nbsp;tomto
případě je osmibitová konstanta uložena přímo do operačního kódu instrukce:</p>

<pre>
15  12    8    4    0
+----+----+----+----+
|xxxx|ssss|iiii+iiii|
+----+----+----+----+
</pre>

<p>Poznámka: větší (resp.&nbsp;přesněji řečeno širší) konstanty je nutno
ukládat přímo do programového kódu a adresovat je (například) relativně vůči
aktuální hodnotě registru <strong>PC</strong>. Podobný koncept nalezneme i u
mikroprocesorů ARM.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instrukční soubor SH-2</h2>

<p>V&nbsp;navazujících jedenácti kapitolách si popíšeme všechny instrukce
podporované v&nbsp;mikroprocesorech a mikrořadičích <i>SH-2</i>. Připomeňme si,
že celkem existuje pouhých 62 instrukcí a pokud započítáme i různé varianty
instrukcí, které se od sebe odlišují použitým adresovacím režimem, dojdeme
k&nbsp;číslu 142. Instrukce je možné rozdělit podle různých kritérií; já jsem
v&nbsp;dalších kapitolách zvolil kritérium, které se sice v&nbsp;některých
ohledech odlišuje od původní dokumentace, ale je podle mého názoru logičtější
:-)</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instrukce pro přesuny dat</h2>

<p>Začneme popisem instrukcí pro přenosy dat. Tato skupina instrukcí je
nejrozmanitější, protože mnohé instrukce podporují několik adresovacích režimů,
různé typy operandů (bajt, 16bitové slovo, 32bitové slovo), některé instrukce
používají speciální registry atd.:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>MOV  </td><td>1</td><td>přesun dat do registru popř.&nbsp;uložení do operační paměti</td></tr>
<tr><td>2</td><td>MOVA </td><td>1</td><td>výpočet disp &times; 4 + PC &rarr; R0 (užitečné při načítání 32bitových konstant)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>LDC   </td><td>1-3</td><td>přenos dat mezi pracovním registrem Rs a speciálním registrem SR, GBR či VBR</td></tr>
<tr><td>4</td><td>LDS   </td><td>1</td><td>přenos dat mezi pracovním registrem Rs a speciálním registrem PR, MACH či MACL</td></tr>
<tr><td>5</td><td>STC   </td><td>1</td><td>přenos dat mezi speciálním registrem SR, GBR či VBR a pracovním registrem Rs</td></tr>
<tr><td>6</td><td>STS   </td><td>1</td><td>přenos dat mezi speciálním registrem PR, MACH či MACL a pracovním registrem Rd</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>SWAP  </td><td>1</td><td>prohození dvou nejnižších bajtů či dvou 16bitových slov (lze použít dva registry)</td></tr>
<tr><td>4</td><td>XTRCT </td><td>1</td><td>prostředních 32 bitů z registrového páru Rs:Rd se uloží do Rd</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>EXTS  </td><td>1</td><td>znaménkové rozšíření bajtu či 16bitového slova na 32bitové slovo</td></tr>
<tr><td>6</td><td>EXTU  </td><td>1</td><td>bezznaménkové rozšíření bajtu či 16bitového slova na 32bitové slovo (horních 24/16 bitů se vynuluje)</td></tr>
</table>

<p>Poznámka: užitečná je především instrukce <strong>MOVA</strong>, protože
umožňuje, aby se za každým podprogramem nacházely 32bitové konstanty, které lze
jednoduše načíst do registru R0. Jiné možnosti totiž nemáme, a to kvůli omezení
všech instrukcí na 16 bitů.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Základní aritmetické instrukce</h2>

<p>Mikroprocesory <i>SH-2</i> podle očekávání obsahují úplnou sadu základních
aritmetických instrukcí. V&nbsp;této kapitole budou uvedeny instrukce určené
pro součet dvou operandů, rozdíl dvou operandů a taktéž pro výpočet dvojkového
doplňku (pozor na to, že u jiných typů mikroprocesorů může instrukce
<strong>NEG</strong> provádět negaci bitů, tj.&nbsp;výpočet jednotkového
doplňku):</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>ADD </td><td>1</td><td>součet registr+registr či registr+konstanta</td></tr>
<tr><td>2</td><td>ADDC</td><td>1</td><td>součet registr+registr+<strong>T</strong>, přenos (<i>carry</i>) se uloží do <strong>T</strong></td></tr>
<tr><td>3</td><td>ADDV</td><td>1</td><td>součet registr+registr, přetečení (<i>overflow</i>) se uloží do <strong>T</strong></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>SUB </td><td>1</td><td>rozdíl registr-registr či registr-konstanta</td></tr>
<tr><td>5</td><td>SUBC</td><td>1</td><td>rozdíl registr-registr-<strong>T</strong>, výpůjčka (<i>borrow</i>) se uloží do <strong>T</strong></td></tr>
<tr><td>6</td><td>SUBV</td><td>1</td><td>rozdíl registr-registr, podtečení (<i>underflow</i>) se uloží do <strong>T</strong></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>NEG </td><td>1</td><td>rozdíl 0-registr</td></tr>
<tr><td>8</td><td>NEGC</td><td>1</td><td>rozdíl 0-registr-<strong>T</strong>, výpůjčka (<i>borrow</i>) se uloží do <strong>T</strong></td></tr>
</table>

<p>Povšimněte si, jak je instrukce <strong>ADD</strong> (ale i
<strong>SUB</strong>) rozdělena podle toho, zda jsou operandy bezznaménkové či
se znaménkem.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Porovnávání operandů</h2>

<p>U instrukcí určených pro porovnávání operandů se setkáme s&nbsp;první
zvláštností mikroprocesorů <i>SH-2</i>. Podmínkové instrukce vždy nastavují
jediný příznakový bit <strong>T</strong>, což je v&nbsp;kontrastu s&nbsp;mnoha
ostatními architekturami, kde se nastavuje více příznakových bitů (carry,
overflow, sign/negative, zero) a rozlišení, o jakou podmínku se jednalo, se
provede až ve chvíli skoku. Řešení nabídnuté procesory <i>SuperH</i> je opět
velmi elegantní a umožňuje, aby se u instrukčního slova pro podmíněný skok
mohlo co nejvíce bitů &bdquo;obětovat&ldquo; pro relativní adresu skoku. Navíc
jsou veškeré zápisy do <strong>T</strong> explicitní a provádí je jen několik
instrukcí, čímž se sníží počet kolizí v&nbsp;pipeline:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>CMP/EQ</td><td>1</td><td>nastavení 1&rarr;<strong>T</strong> za podmínky Rs=Rd</td></tr>
<tr><td>2</td><td>CMP/HS</td><td>1</td><td>nastavení 1&rarr;<strong>T</strong> za podmínky Rs&ge;Rd (unsigned)</td></tr>
<tr><td>3</td><td>CMP/GE</td><td>1</td><td>nastavení 1&rarr;<strong>T</strong> za podmínky Rs&ge;Rd (signed)</td></tr>
<tr><td>4</td><td>CMP/HI</td><td>1</td><td>nastavení 1&rarr;<strong>T</strong> za podmínky Rs&gt;Rd (unsigned)</td></tr>
<tr><td>5</td><td>CMP/GT</td><td>1</td><td>nastavení 1&rarr;<strong>T</strong> za podmínky Rs&gt;Rd (signed)</td></tr>
<tr><td>6</td><td>CMP/PZ</td><td>1</td><td>nastavení 1&rarr;<strong>T</strong> za podmínky Rs&ge;0</td></tr>
<tr><td>7</td><td>CMP/PL</td><td>1</td><td>nastavení 1&rarr;<strong>T</strong> za podmínky Rs&gt;0</td></tr>
<tr><td>8</td><td>CMP/STR</td><td>1</td><td>nastavení 1&rarr;<strong>T</strong> za podmínky Rs=Rd (jen spodní bajt)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>9</td><td>TAS</td><td>4</td><td>nastavení 1&rarr;<strong>T</strong> za podmínky (Rs)=0 (buňka v&nbsp;paměti)</td></tr>
<tr><td>10</td><td>TST</td><td>1</td><td>nastavení 1&rarr;<strong>T</strong> za podmínky Rs &amp; Rd == 0</td></tr>
<tr><td>11</td><td>DT</td><td>1</td><td>snížení obsahu registru o 1 a nastavení 1&rarr;<strong>T</strong> pokud Rs==0</td></tr>
</table>

<p>Kromě operace <strong>TAS</strong> pracující s&nbsp;operační pamětí jsou
všechny ostatní instrukce provedeny v&nbsp;jediném taktu.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Násobení, dělení a operace typu Multiply Accumulate</h2>

<p>Klasická aritmeticko-logická jednotka je doplněna o násobičku a děličku,
která používá speciální registry <strong>MACH</strong> a <strong>MACL</strong>
(dohromady <strong>MAC</strong>=Multiply Accumulate), což je ostatně podobný
princip, jaký známe například z&nbsp;architektury MIPS. Dokončení většiny
těchto instrukcí trvá více než jeden takt, což je pochopitelně způsobeno jejich
(relativní) složitostí:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>MUL </td><td>1-5</td><td>násobení 16bitových či 32bitových operandů s&nbsp;32bitovým výsledkem</td></tr>
<tr><td>2</td><td>MULS</td><td>1-3</td><td>násobení 16bitových operandů s&nbsp;32bitovým výsledkem (signed)</td></tr>
<tr><td>3</td><td>MULU</td><td>1-3</td><td>násobení 16bitových operandů s&nbsp;32bitovým výsledkem (unsigned)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>MAC</td><td>2-5</td><td>(Rn)*(Rm)+MAC &rarr; MAC, Rn++, Rm++ (posun v&nbsp;poli)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>DMULS</td><td>2-5</td><td>násobení 32bitových operandů s&nbsp;64bitovým výsledkem (signed)</td></tr>
<tr><td>6</td><td>DMULU</td><td>2-5</td><td>násobení 32bitových operandů s&nbsp;64bitovým výsledkem (unsigned)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>DIV1 </td><td>1</td><td>jeden krok dělení Rs/Rd</td></tr>
<tr><td>8</td><td>DIV0S</td><td>1</td><td>příprava na dělení dvou čísel se znaménkem (nastavení bitů M, Q a T)</td></tr>
<tr><td>9</td><td>DIV0U</td><td>1</td><td>příprava na dělení dvou čísel bez znaménka (nastavení bitů M, Q a T)</td></tr>
</table>

<p>Povšimněte si, že instrukce <strong>MAC</strong> je připravena na to, že se
bude používat pro implementaci číslicových filtrů, takže se adresují prvky
v&nbsp;poli.</p>

<p>Poznámka: při dělení je nutné nejprve provést jednu z&nbsp;instrukcí
<strong>DIV0S/DIV0U</strong> a poté v&nbsp;patřičném počtu kroků opakovat
instrukci <strong>DIV1</strong>.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Bitové posuny, rotace a aritmetické posuny</h2>

<p>U mikroprocesorů <i>SuperH</i> nalezneme obvyklou (a úplnou) sadu instrukcí
určených pro bitové posuny, bitové rotace a taktéž pro aritmetické posuny.
Ostatně se stačí podívat na následující tabulku se seznamem těchto instrukcí.
Všechny instrukce jsou dokončeny v&nbsp;jednom taktu, ovšem u rotací a posunů
existuje omezení, o kolik míst se má operace provést:</p>

<table>
<tr><th> #</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis</th></tr>
<tr><td> 1</td><td>ROTL </td><td>1</td><td>rotace registru doleva, do <strong>T</strong> se uloží původní nejvyšší bit</td></tr>
<tr><td> 2</td><td>ROTR </td><td>1</td><td>rotace registru doprava, do <strong>T</strong> se uloží původní nejnižší bit</td></tr>
<tr><td> 3</td><td>ROTCL</td><td>1</td><td>rotace registru doleva přes bit <strong>T</strong> (33 bitů)</td></tr>
<tr><td> 4</td><td>ROTCR</td><td>1</td><td>rotace registru doprava přes bit <strong>T</strong> (33 bitů)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>SHAL </td><td>1</td><td>aritmetický posun doleva (nasouvá se nula, nejvyšší bit se kopíruje do <strong>T</strong>)</td></tr>
<tr><td> 6</td><td>SHAR </td><td>1</td><td>aritmetický posun doprava (nejvyšší bit se klonuje, nejnižší se přesouvá do <strong>T</strong>)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>SHLL </td><td>1</td><td>bitový posun doleva, <strong>T</strong> se nemění</td></tr>
<tr><td> 8</td><td>SHLLn</td><td>1</td><td>bitový posun doleva o 2, 8 či 16 bitů, <strong>T</strong> se nemění</td></tr>
<tr><td> 9</td><td>SHLR </td><td>1</td><td>bitový posun doprava, <strong>T</strong> se nemění</td></tr>
<tr><td>10</td><td>SHLRn</td><td>1</td><td>bitový posun doprava o 2, 8 či 16 bitů, <strong>T</strong> se nemění</td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Logické instrukce</h2>

<p>Sada logických instrukcí (resp.&nbsp;možná přesněji řečeno logických operací
prováděných bit po bitu) je, podobně jako u mnoha dalších typů mikroprocesorů,
poměrně krátká, což je ostatně zřejmé po pohledu na následující tabulku:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>AND</td><td>1</td><td>provedení operace Rs &amp; Rd či Rs &amp; konstanta</td></tr>
<tr><td>2</td><td>OR </td><td>1</td><td>provedení operace Rs | Rd či Rs | konstanta</td></tr>
<tr><td>3</td><td>XOR</td><td>1</td><td>provedení operace Rs &oplus; Rd či Rs &oplus; konstanta</td></tr>
<tr><td>4</td><td>NOT</td><td>1</td><td>negace bitů zdrojového registru Rs</td></tr>
</table>

<p>Poznámka: u prvních tří instrukcí lze provést i adresování (R0 + GBR)
s&nbsp;výsledkem ukládaným rovněž do paměti adresované registry R0 a GBR.
V&nbsp;tomto případě &ndash; již jsme opustili doménu RISCových procesorů
&ndash; instrukce trvají tři takty.</p>

<p>Poznámka 2: žádná z&nbsp;těchto instrukcí neovlivňuje stav bitu
<strong>T</strong>, což mj.&nbsp;znamená, že v&nbsp;pipeline nedochází ke
zbytečným kolizím při čtení/zápisu.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Práce se stavovým bitem</h2>

<p>S&nbsp;jediným stavovým bitem <strong>T</strong> (<i>test</i>)
mikroprocesorů <i>SH-2</i> jsme se již setkali u mnoha předchozích instrukcí a
ještě se s&nbsp;ním setkáme v&nbsp;dalších kapitolách. Zde si pouze popíšeme
trojici instrukcí, které pracují výhradně s&nbsp;tímto bitem:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>MOVT</td><td>1</td><td>uložení bitu <strong>T</strong> do registru Rn</td></tr>
<tr><td>2</td><td>CLRT</td><td>1</td><td>vynulování bitu 0&rarr;<strong>T</strong></td></tr>
<tr><td>3</td><td>SETT</td><td>1</td><td>nastavení bitu 1&rarr;<strong>T</strong></td></tr>
</table>



<p><a name="k11"></a></p>
<h2 id="k11">11. Nepodmíněné skoky</h2>

<p>V&nbsp;následující tabulce jsou uvedeny nepodmíněné skoky, tj.&nbsp;skoky,
které se provedou za všech okolností bez závislosti na nastavení bitu
<strong>T</strong>. Všechny tři skokové instrukce obsahují branch delay slot
popsaný minule, takže počet cyklů pro dokončení (2) sice může vypadat hrozivě,
ale druhý cyklus lze využít pro dokončení jiné instrukce:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>JMP </td><td>2</td><td>skok na adresu Rs</td></tr>
<tr><td>2</td><td>BRA </td><td>2</td><td>skok na adresu PC+displacement*2</td></tr>
<tr><td>3</td><td>BRAF</td><td>2</td><td>skok na adresu PC+Rs</td></tr>
</table>

<p>Poznámka: u instrukce <strong>BRA</strong> je použita dvanáctibitová
konstanta <i>displacement</i>.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Podpora pro volání podprogramů</h2>

<p>Další skupina instrukcí slouží pro skok do podprogramů popř.&nbsp;pro návrat
z&nbsp;podprogramů. Opět platí, že skokové instrukce obsahují branch delay
slot, podobně jako u předchozích třech instrukcí (návrat z&nbsp;podprogramu je
taktéž skoková instrukce!):</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>JSR </td><td>2</td><td>uložení PC do registru PR, skok na adresu Rs</td></tr>
<tr><td>2</td><td>RTS </td><td>2</td><td>skok na adresu v&nbsp;PR</td></tr>
<tr><td>3</td><td>BSR </td><td>2</td><td>uložení PC do registru PR, skok na adresu PC+displacement*2</td></tr>
<tr><td>4</td><td>BSRF</td><td>2</td><td>uložení PC do registru PR, skok na adresu PC+Rs</td></tr>
</table>

<p>Poznámka: u instrukce <strong>BSR</strong> je použita dvanáctibitová
konstanta <i>displacement</i>.</p>

<p>Poznámka 2: <strong>PR</strong>=Procedure Register (v&nbsp;podstatě Link
Register).</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Podmíněné skoky</h2>

<p>Na rozdíl od mnoha dalších typů mikroprocesorů je skupina podmíněných skoků
na architektuře <i>SuperH</i> velmi malá, a to z&nbsp;toho prostého důvodu, že
lze testovat jen a pouze příznakový bit <strong>T</strong>. Důvod jsme si již
vysvětlili: namísto jinde obvyklé sekvence instrukcí:</p>

<pre>
CMP + nastavení Zero, Carry, Sign a Overflow
JMP za podmínky určité konstelace příznakových bitů
</pre>

<p>se zde setkáme spíše s&nbsp;tímto kódem:</p>

<pre>
CMP/podmínka + nastavení bitu T
JMP pokud T==1 nebo naopak T==0
</pre>

<p>Podívejme se nyní na seznam instrukcí pro podmíněné skoky:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>BF</td><td>3/1</td><td>skok na adresu PC+disp pokud platí <strong>T==0</strong></td></tr>
<tr><td>2</td><td>BT</td><td>3/1</td><td>skok na adresu PC+disp pokud platí <strong>T==0</strong></td></tr>
<tr><td>3</td><td>BF/S</td><td>2/1</td><td>totéž jako BF, ale bez branch delay slotu</td></tr>
<tr><td>4</td><td>BT/S</td><td>2/1</td><td>totéž jako BF, ale bez branch delay slotu</td></tr>
</table>

<p>Poznámka: zápis 3/1 značí: 3 cykly pokud je skok proveden (podmínka
splněna), 1 cyklus v&nbsp;opačném případě.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Ostatní instrukce</h2>

<p>Do této kategorie spadají různé typy instrukcí, od prajednoduché instrukce
<strong>NOP</strong> až po instrukci určenou pro obsluhu výjimky:</p>

<table>
<tr><th>#</th><th>Zkratka</th><th>Počet cyklů</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>NOP   </td><td>1</td><td>moje oblíbená instrukce, která je zde kupodivu zakódována slovem 0x0009 a nikoli 0x0000</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>2</td><td>CLRMAC</td><td>1</td><td>vynulování registrů MACH a MACL (například před aplikací číslicového filtru)</td></tr>
<tr><td>3</td><td>RTE   </td><td>5</td><td>návrat z&nbsp;přerušení atd. (obnovení SR a PC ze zásobníku)</td></tr>
<tr><td>4</td><td>SLEEP </td><td>4</td><td>přepnutí do stavu sleep (pouze u mikrořadičů SH-2)</td></tr>
<tr><td>5</td><td>TRAPA </td><td>8</td><td>příprava zásobníkového rámce, skok na adresu VBR+konstanta</td></tr>
</table>



<p><a name="k15"></a></p>
<h2 id="k15">15. Odkazy na Internetu</h2>

<ol>

<li>Konkurence procesorů s mikroprogramovým řadičem - RISC<br />
<a href="http://www.root.cz/clanky/konkurence-procesoru-s-mikroprogramovym-radicem-architektura-risc/">http://www.root.cz/clanky/konkurence-procesoru-s-mikroprogramovym-radicem-architektura-risc/</a>
</li>

<li>Mikroprocesory s architekturou RISC I<br />
<a href="http://www.root.cz/clanky/mikroprocesory-s-architekturou-risc-i/">http://www.root.cz/clanky/mikroprocesory-s-architekturou-risc-i/</a>
</li>

<li>Procesory RISC v pracovních stanicích a serverech<br />
<a href="http://www.root.cz/clanky/procesory-s-architekturou-risc-v-pracovnich-stanicich-a-serverech/">http://www.root.cz/clanky/procesory-s-architekturou-risc-v-pracovnich-stanicich-a-serverech/</a>
</li>

<li>Procesory RISC v pracovních stanicích a serverech - architektura SPARC V8 a<br />
<a href="http://www.root.cz/clanky/procesory-risc-v-pracovnich-stanicich-a-serverech-architektura-sparc-v8-a-v9/">http://www.root.cz/clanky/procesory-risc-v-pracovnich-stanicich-a-serverech-architektura-sparc-v8-a-v9/</a>
</li>

<li>Procesory RISC v pracovních stanicích a serverech - architektura PA-RISC<br />
<a href="http://www.root.cz/clanky/procesory-risc-v-pracovnich-stanicich-a-serverech-architektura-pa-risc/">http://www.root.cz/clanky/procesory-risc-v-pracovnich-stanicich-a-serverech-architektura-pa-risc/</a>
</li>

<li>Rozšíření instrukční sady procesorových jader s otevřenou architekturou RISC-V<br />
<a href="http://www.root.cz/clanky/rozsireni-instrukcni-sady-procesorovych-jader-s-otevrenou-architekturou-risc-v/">http://www.root.cz/clanky/rozsireni-instrukcni-sady-procesorovych-jader-s-otevrenou-architekturou-risc-v/</a>
</li>

<li>Sega documentation<br />
<a
href="http://koti.kapsi.fi/~antime/sega/docs.html">http://koti.kapsi.fi/~antime/sega/docs.html</a>
</li>

<li>1995 Programming on the Sega Saturn<br />
<a
href="http://cowboyprogramming.com/2010/06/03/1995-programming-on-the-sega-saturn/">http://cowboyprogramming.com/2010/06/03/1995-programming-on-the-sega-saturn/</a>
</li>

<li>Sega Myths-Saturn was the most difficult console to program for of 5th Gen<br />
<a href="http://forums.sega.com/showthread.php?313485-Sega-Myths-Saturn-was-the-most-difficult-console-to-program-for-of-5th-Gen">http://forums.sega.com/showthread.php?313485-Sega-Myths-Saturn-was-the-most-difficult-console-to-program-for-of-5th-Gen</a>
</li>

<li>SuperH RISC engine Family<br />
<a href="http://www.renesas.com/products/mpumcu/superh/index.jsp">http://www.renesas.com/products/mpumcu/superh/index.jsp</a>
</li>

<li>Sega Saturn<br />
<a href="http://en.wikipedia.org/wiki/Sega_saturn">http://en.wikipedia.org/wiki/Sega_saturn</a>
</li>

<li>Fourth-Generation Consoles<br />
<a href="http://gaming.wikia.com/wiki/Fourth-Generation_Consoles">http://gaming.wikia.com/wiki/Fourth-Generation_Consoles</a>
</li>

<li>Fifth-Generation Consoles<br />
<a href="http://gaming.wikia.com/wiki/Fifth-Generation_Consoles">http://gaming.wikia.com/wiki/Fifth-Generation_Consoles</a>
</li>

<li>History of video game consoles (fifth generation)<br />
<a href="http://en.wikipedia.org/wiki/History_of_video_game_consoles_(fifth_generation)">http://en.wikipedia.org/wiki/History_of_video_game_consoles_(fifth_generation)</a>
</li>

<li>Sega Mega Drive<br />
<a href="http://sega.jp/archive/segahard/md/">http://sega.jp/archive/segahard/md/</a>
</li>

<li>Sega Archives<br />
<a href="http://sega.jp/archive/segahard/">http://sega.jp/archive/segahard/</a>
</li>

<li>Sega Genesis<br />
<a href="http://www.dmoz.org/Games/Video_Games/Console_Platforms/Sega/Genesis/">http://www.dmoz.org/Games/Video_Games/Console_Platforms/Sega/Genesis/</a>
</li>

<li>The Sega Mega Drive/Genesis<br />
<a href="http://www.captainwilliams.co.uk/sega/megadrive/megadrive.php">http://www.captainwilliams.co.uk/sega/megadrive/megadrive.php</a>
</li>

<li>Sega Master System Museum<br />
<a href="http://alexkidd.com/">http://alexkidd.com/</a>
</li>

<li>Jadeite's Sega Master System Museum<br />
<a href="http://rp_gamer.tripod.com/SMS/1.html">http://rp_gamer.tripod.com/SMS/1.html</a>
</li>

<li>Sega Master System (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Sega_Master_System">http://en.wikipedia.org/wiki/Sega_Master_System</a>
</li>

<li>Sega Card (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Sega_Card">http://en.wikipedia.org/wiki/Sega_Card</a>
</li>

<li>Sega Master System VDP documentation<br />
<a href="http://www.smspower.org/uploads/Development/msvdp-20021112.txt?sid=28c370e1fcac51d5774319979bf96f4c">http://www.smspower.org/uploads/Development/msvdp-20021112.txt?sid=28c370e1fcac51d5774319979bf96f4c</a>
</li>

<li>The16bit Era Of Console Video Games<br />
<a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/The16bitEraOfConsoleVideoGames">http://tvtropes.org/pmwiki/pmwiki.php/Main/The16bitEraOfConsoleVideoGames</a>
</li>

<li>The Console Wars<br />
<a href="http://www.cracked.com/funny-2590-the-console-wars/">http://www.cracked.com/funny-2590-the-console-wars/</a>
</li>

<li>Console Wars<br />
<a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/ConsoleWars">http://tvtropes.org/pmwiki/pmwiki.php/Main/ConsoleWars</a>
</li>

<li>Era of the "Bit Wars"<br />
<a href="http://www.gtplanet.net/forum/threads/era-of-the-bit-wars.119796/">http://www.gtplanet.net/forum/threads/era-of-the-bit-wars.119796/</a>
</li>

<li>Rez Wars: How the Bit Wars never really ended<br />
<a href="http://www.ign.com/blogs/beastmastertoad/2013/01/31/rez-wars-how-the-bit-wars-never-really-ended">http://www.ign.com/blogs/beastmastertoad/2013/01/31/rez-wars-how-the-bit-wars-never-really-ended</a>
</li>

<li>Which system ended the "Bit Wars"?<br />
<a href="http://atariage.com/forums/topic/199163-which-system-ended-the-bit-wars/">http://atariage.com/forums/topic/199163-which-system-ended-the-bit-wars/</a>
</li>

<li>Status Register<br />
<a href="https://en.wikipedia.org/wiki/Status_register">https://en.wikipedia.org/wiki/Status_register</a>
</li>

<li>Introduction to ARM Thumb<br />
<a href="http://www.embedded.com/electronics-blogs/beginner-s-corner/4024632/Introduction-to-ARM-thumb">http://www.embedded.com/electronics-blogs/beginner-s-corner/4024632/Introduction-to-ARM-thumb</a>
</li>

<li>Code Size – a comprehensive comparison of microMIPS32 and Thumb code size using many Megabytes of customer code<br />
<a href="https://community.arm.com/groups/processors/blog/2014/04/28/code-size-a-comprehensive-comparison-of-micromips32-and-thumb-code-size-using-many-megabytes-of-customer-code">https://community.arm.com/groups/processors/blog/2014/04/28/code-size-a-comprehensive-comparison-of-micromips32-and-thumb-code-size-using-many-megabytes-of-customer-code</a>
</li>

<li>MIPS MCUs Outrun ARM<br />
<a href="http://www.linleygroup.com/newsletters/newsletter_detail.php?num=5117">http://www.linleygroup.com/newsletters/newsletter_detail.php?num=5117</a>
</li>

<li>Carry bits, The Architect's Trap<br />
<a href="http://yarchive.net/comp/carry_bit.html">http://yarchive.net/comp/carry_bit.html</a>
</li>

<li>Microprocessor Design/ALU Flags<br />
<a href="https://en.wikibooks.org/wiki/Microprocessor_Design/ALU_Flags">https://en.wikibooks.org/wiki/Microprocessor_Design/ALU_Flags</a>
</li>

<li>Flags register in an out-of-order processor<br />
<a href="http://cs.stackexchange.com/questions/42095/flags-register-in-an-out-of-order-processor">http://cs.stackexchange.com/questions/42095/flags-register-in-an-out-of-order-processor</a>
</li>

<li>Berkeley RISC<br />
<a href="http://en.wikipedia.org/wiki/Berkeley_RISC">http://en.wikipedia.org/wiki/Berkeley_RISC</a>
</li>

<li>Great moments in microprocessor history<br />
<a href="http://www.ibm.com/developerworks/library/pa-microhist.html">http://www.ibm.com/developerworks/library/pa-microhist.html</a>
</li>

<li>RISC vs. CISC<br />
<a href="http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/risccisc/">http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/risccisc/</a>
</li>

<li>RISC and CISC definitions:<br />
<a href="http://www.cpushack.com/CPU/cpuAppendA.html">http://www.cpushack.com/CPU/cpuAppendA.html</a>
</li>

<li>The Evolution of RISC<br />
<a href="http://www.ibm.com/developerworks/library/pa-microhist.html#sidebar1">http://www.ibm.com/developerworks/library/pa-microhist.html#sidebar1</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

