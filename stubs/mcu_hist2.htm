<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vznik mikrořadičů: čtyřbitový MCU Atmel MARC4</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Vznik mikrořadičů: čtyřbitový MCU Atmel MARC4</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Mikrořadič TMS 1000, s nímž jsme se seznámili minule, nebyl jediným zástupcem čtyřbitových mikrořadičů. Novějším čipem založeným na čtyřbitové ALU je mikrořadič nazvaný MARC4, který byl vyráběn firmou Eurosil později koupené společností Temic. Posledním výrobcem MARC4 je Atmel.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Vznik mikrořadičů: čtyřbitový MCU Atmel MARC4</a></p>
<p><a href="#k02">2. Mikrořadiče uvedené na trh po TMS 1000</a></p>
<p><a href="#k03">3. Základní parametry mikrořadičů MARC4</a></p>
<p><a href="#k04">4. Energetické nároky čipu v&nbsp;různých režimech činnosti</a></p>
<p><a href="#k05">5. Architektura čipů MARC4</a></p>
<p><a href="#k06">6. Paměti RAM, ROM, zásobníky a jejich použití</a></p>
<p><a href="#k07">7. Programátorský model &ndash; sada registrů</a></p>
<p><a href="#k08">8. Instrukční soubor čipů MARC4</a></p>
<p><a href="#k09">9. Aritmetické instrukce</a></p>
<p><a href="#k10">10. Logické instrukce</a></p>
<p><a href="#k11">11. Rotace a posuny</a></p>
<p><a href="#k12">12. Skoky, volání podprogramů</a></p>
<p><a href="#k13">13. Operace se zásobníkem operandů a zásobníkem návratových adres</a></p>
<p><a href="#k14">14. Načtení konstant</a></p>
<p><a href="#k15">15. Další instrukce</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Vznik mikrořadičů: čtyřbitový MCU Atmel MARC4</h2>

<p>Čtyřbitový mikrořadič <i>TMS 1000</i>, s&nbsp;nímž jsme se seznámili <a
href="https://www.root.cz/clanky/vznik-mikroradicu-ctyrbitovy-cip-tms-1000/">v&nbsp;předchozí
části seriálu o architekturách počítačů</a>, patřil společně s&nbsp;čipem
&micro;COM-4 mezi vůbec první mikrořadiče používané v&nbsp;různých řídicích
aplikacích, pro ovládání jednoduchých displejů, počitadel, kalkulaček atd. I
přes velký úspěch tohoto čipu, kterého se prodalo minimálně 100 milionů kusů
(což je s&nbsp;ohledem na dobu vzniku skutečně velké číslo) se však po uvedení
mikrořadiče Intel 8048 zdálo, že budoucnost bude patřit výkonnějším
mikrořadičům založeným na osmibitové aritmeticko-logické jednotce. To se
později skutečně vyplnilo, především po uvedení řady Intel 8051 (MCS 51),
konkurenční 68HC05/68HC08 a taktéž mikrořadičů řady PIC 16x84 (zejména 16C84 a
16F84). Ovšem i pro zdánlivě překonané čtyřbitové mikrořadiče se našlo využití,
a to v&nbsp;těch oblastech, kde je mikrořadič napájen z&nbsp;baterie, nemusí
provádět žádnou složitou činnost a přitom se od něj vyžaduje funkčnost i
v&nbsp;extrémnějších podmínkách. A právě v&nbsp;této oblasti se
mj.&nbsp;prosadil čip MARC4.</p>

<img src="https://i.iinfo.cz/images/641/marc4-1-1.jpg" class="image-285047" alt="&#160;" width="325" height="183" />
<p><i>Obrázek 1: Čtyřbitový mikrořadič TMS 1000 ve variantě s&nbsp;28 piny.
Kromě toho existují i rozšířené varianty se čtyřiceti piny.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Mikrořadiče uvedené na trh po TMS 1000</h2>

<p>Na druhém obrázku, který naleznete pod tímto odstavcem, je zjednodušeně
naznačen vývoj mikrořadičů, které byly běžně dostupné na trhu, tj.&nbsp;nejedná
se o mikrořadiče, jenž by využíval pro své potřeby jen jejich výrobce (což byla
například doména firmy Texas Instruments, která kvůli tomuto zvyku poněkud
zaostala za Intelem). Žlutě označené mikrořadiče jsou čtyřbitové, zeleně
označené mikrořadiče (u Motoroly i dva procesory, které mikrořadičům
předcházely) osmibitové a modrou barvou jsou označeny mikrořadiče částečně či
zcela šestnáctibitové. Toto rozdělení je založeno na porovnání šířky operandů
zpracovávaných v&nbsp;aritmeticko-logických jednotkách, nikoli například na
základě šířky instrukcí či šířky sběrnice programové paměti (i TMS 1000 měl
osmibitové instrukce, mikrořadiče PIC mají šířku instrukcí 12, 14, 16 či 24
bitů). Mimochodem, všechny zeleně označené čipy již byly v&nbsp;tomto seriálu
popsány.</p>

<img src="https://i.iinfo.cz/images/641/marc4-1-2.png" class="image-285048" alt="&#160;" width="595" height="326" />
<p><i>Obrázek 2: Zjednodušený vývoj základních větví čtyřbitových, osmibitových
a některých šestnáctibitových mikrořadičů.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Základní parametry mikrořadičů MARC4</h2>

<p>Čipy MARC4 jsou určeny do zařízení napájených baterií a/nebo nekvalitními
zdroji, protože nemají vysoký příkon a ani nevyžadují stabilizované napětí
(ostatně vlastní stabilizátor by pravděpodobně měl větší spotřebu i cenu, než
samotný mikrořadič). Na čipu je samozřejmě detektor poklesu napájecího napětí
(brown out) s&nbsp;konfigurovatelným chováním. Tyto mikrořadiče lze používat
v&nbsp;poměrně velkém rozsahu teplot od -40&deg;C do 125&deg;C. Kromě paměti
programu (šířka osm bitů) a datové paměti (šířka čtyři bity) mají některé čipy
i EEPROM a jedna varianta MARC4 obsahuje i RF vysílač. Další parametry jsou
vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>Čip</th><th>ROM</th><th>RAM</th><th>EEPROM</th><th>I/O piny</th><th>RF vysílač</th></tr>
<tr><td>ATAR080</td><td>2048&times;8</td><td>256&times;4</td><td>&times;</td><td>12</td><td>&times;</td></tr>
<tr><td>ATAR080</td><td>2048&times;8</td><td>256&times;4</td><td>&times;</td><td>12</td><td>&times;</td></tr>
<tr><td>ATAR890</td><td>2048&times;8</td><td>256&times;4</td><td>32&times;16</td><td>12</td><td>&times;</td></tr>
<tr><td>ATAR092</td><td>2048&times;8</td><td>256&times;4</td><td>&times;</td><td>16</td><td>&times;</td></tr>
<tr><td>ATAR892</td><td>2048&times;8</td><td>256&times;4</td><td>32&times;16</td><td>16</td><td>&times;</td></tr>
<tr><td>ATAR510</td><td>4096&times;8</td><td>256&times;4</td><td>&times;</td><td>34</td><td>&times;</td></tr>
<tr><td>ATAR862</td><td>4096&times;8</td><td>256&times;4</td><td>&times;</td><td>11</td><td>315, 433, 868 a 915 MHz</td></tr>
</table>

<p>Mezi aplikační oblasti mikrořadičů MARC4 patří například vzdálené ovládání
dveří (u garáže, vchodové dveře se zadáním kódu...), ovládání klimatizace (jak
vlastní jednotky, tak i &bdquo;krabičky&ldquo; s&nbsp;displeji), vzdálené
zapínaní zásuvek, meteorologické stanice, počítače pro jízdní kola (tam se
pravděpodobně používá dodnes), sledování a řízení jednodušších procesů ve
výrobě, alarmy atd.</p>

<p>Poznámka: na rozdíl od většiny současných osmibitových mikrořadičů nenajdeme
na čipech MARC4 velké množství periferních modulů &ndash; D/A a A/D převodníků,
PWM atd.  To opět odpovídá aplikační oblasti, v&nbsp;níž byly tyto čipy
nasazovány.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Energetické nároky čipu v&nbsp;různých režimech činnosti</h2>

<p>Jedním z&nbsp;velmi důležitých a pro mnohé aplikace i nejdůležitějších
parametrů čtyřbitových mikrořadičů je jejich spotřeba. V&nbsp;případě čipů
MARC4 je spotřeba určena především režimem, v&nbsp;němž se mohl mikrořadič
nacházet a mezi nimiž se bylo možné přepínat. V&nbsp;následující tabulce je
zobrazen typický proudový odběr čipů napájených napětím od 1,8 V (dnes by se
asi použila technologie s&nbsp;ještě nižším napětím) ve čtyřech různých
režimech:</p>

<table>
<tr><th>Režim</th><th>Odběr</th><th>Oscilátor</th><th>Jádro</th><th>Periferní moduly</th><th>Poznámka</th></tr>
<tr><td>Deep-sleep</td><td>0,1 &micro;A</td><td>zastaven</td><td>zastaveno</td><td>zastaveny</td><td>čekání na přerušení</td></tr>
<tr><td>Sleep</td><td>0,6 &micro;A</td><td>32 kHz</td><td>běží</td><td>zastaveno</td><td>čekání na přerušení</td></tr>
<tr><td>Power-down</td><td>70 &micro;A</td><td>4 MHz</td><td>běží</td><td>zastaveno</td><td>čekání na přerušení</td></tr>
<tr><td>Active</td><td>300 &micro;A</td><td>4 MHz</td><td>běží</td><td>běží</td><td>&times;</td></tr>
</table>

<p>Poznámka: pokud by tyto čipy byly upraveny tak, aby používaly dnešní
technologie s&nbsp;nižšími napájecími napětími, byla by samozřejmě jejich
reálná spotřeba ještě nižší. Ovšem s&nbsp;obecným snížením spotřeby použitím
lepší technologie se dosáhlo takového stavu, že se namísto čtyřbitových čipů
začaly používat výkonnější čipy osmibitové, a to i v&nbsp;těch oblastech, kde
se plně nevyužije jejich potenciál (to však samozřejmě není pro většinu
aplikací to hlavní kritérium :-).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Architektura čipů MARC4</h2>

<p>Zjednodušené schéma čtyřbitových mikrořadičů MARC4 je zobrazeno na třetím
obrázku umístěném pod tímto odstavcem. Můžeme zde vidět všechny důležité části
čipu, především pak:</p>

<ol>
<li>Programovou paměť (ROM) o kapacitě 2048&times;8 bitů nebo 4096&times;8 bitů.</li>
<li>Datovou paměť (RAM) o kapacitě 256&times;4 bity.</li>
<li>Čtyřbitovou aritmeticko-logickou jednotku (ALU).</li>
<li>Programový čítač (<strong>PC</strong>).</li>
<li>Čtveřici adresových registrů <strong>RP</strong>, <strong>SP</strong>, <strong>X</strong> a <strong>Y</strong>.</li>
<li>Registr <strong>TOS</strong> obsahující prvek umístěný na vrcholu zásobníku operandů.</li>
<li>Registr <strong>CCR</strong> s&nbsp;dvojicí příznaků <i>carry</i> a <i>branch</i>.</li>
<li>Sběrnici, po níž se přenáší instrukce.</li>
<li>Sběrnici, po níž se přenáší adresy do ROM.</li>
<li>Sběrnici, po níž se přenáší data.</li>
<li>Sběrnici, po níž se přenáší adresy do RAM.</li>
</ol>

<img src="https://i.iinfo.cz/images/641/marc4-1-3.png" class="image-285049" alt="&#160;" width="660" height="492" />
<p><i>Obrázek 3: Zjednodušené schéma čtyřbitových mikrořadičů MARC4.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Paměti RAM, ROM, zásobníky a jejich použití</h2>

<p>Paměť ROM, tedy programová paměť, má strukturu 2048&times;8 bitů či
4096&times;8 bitů, tj.&nbsp;přistupuje se k&nbsp;ní po bajtech. Některé
instrukce mají délku dvou bajtů a musí být zpracovány ve dvou cyklech. Naproti
tomu datová paměť má strukturu 256&times;4 bity a běžné instrukce (až na
několik výjimek) k&nbsp;ní skutečně takto přistupují &ndash; všechny operandy
mají šířku pouhé čtyři bity (což je poměrně elegantní). Mezi zmíněné výjimky
patří instrukce ukládající do RAM návratové adresy, které mají šířku 12
bitů.</p>

<p>Mikrořadič MARC4 se většinou neprogramuje přímo v&nbsp;assembleru, ale <a
href="https://www.root.cz/serialy/programovaci-jazyk-forth/">v&nbsp;programovacím
jazyku FORTH</a>, čemuž byla do značné míry podřízena i interní struktura čipu
a současně i jeho instrukční sada. Pokud se podíváme na schéma MARC4 uvedené
v&nbsp;předchozí kapitole, můžeme vidět, že k&nbsp;aritmeticko-logické jednotce
je jak na vstup, tak i na výstup připojen registr <strong>TOS</strong> (<i>Top
of Stack</i>), zatímco druhý operand je buď načten z&nbsp;paměti ROM (instrukce
<strong>LIT</strong>) či z&nbsp;paměti RAM (velké množství instrukcí). Při
načítání druhého operandu lze použít adresu umístěnou v&nbsp;registru
<strong>SP</strong>, <strong>X</strong>, <strong>Y</strong> či
<strong>RP</strong> &ndash; každý z&nbsp;těchto registrů je osmibitový a tudíž
při adresování obsáhne celou RAM. Většina instrukcí tedy do ALU předává obsah
čtyřbitového registru <strong>TOS</strong> (ten lze tedy považovat za
akumulátor) a čtyřbitovou hodnotu načtenou z&nbsp;RAM. V&nbsp;průběhu ALU
operace se navíc většinou modifikuje obsah jednoho adresového registru,
většinou <strong>SP</strong>.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Programátorský model &ndash; sada registrů</h2>

<p>Všechny registry viditelné programátorům jsme již viděli na třetím obrázku
<a href="#k05">v&nbsp;páté kapitole</a>. Šířky registrů a jejich popis je
uveden v&nbsp;tabulce:</p>

<table>
<tr><th>Registr</th><th>Šířka</th><th>Význam</th></tr>
<tr><td>PC</td><td>12 (13) bitů</td><td>adresa následující instrukce načítané z&nbsp;paměti ROM.</td></tr>
<tr><td>RP</td><td>8 bitů</td><td>ukazuje na vrchol zásobníku návratových adres, který je umístěný v&nbsp;RAM</td></tr>
<tr><td>SP</td><td>8 bitů</td><td>ukazuje na druhý prvek uložený na zásobníku operandů, který je umístěný v&nbsp;RAM</td></tr>
<tr><td>X</td><td>8 bitů</td><td>obecný (index) registr použitý při adresování</td></tr>
<tr><td>Y</td><td>8 bitů</td><td>obecný (index) registr použitý při adresování</td></tr>
<tr><td>TOS</td><td>4 bity</td><td>obsahuje operand umístěný na vrcholu zásobníku operandů (rychlejší přístup)</td></tr>
<tr><td>CCR</td><td>4 bity</td><td>pouze dva bity jsou obsazeny příznaky <i>carry</i> a <i>branch</i></td></tr>
</table>

<p>První tři registry se většinou používají nepřímo, protože registr
<strong>PC</strong> je automaticky měněn jak při provádění sekvenčního
programu, tak i při skocích, voláních subrutin (podprogramů) a návratech ze
subrutin. Registr <strong>RP</strong> ukazuje na vrchol zásobníku návratových
adres, takže se jeho hodnota mění při ukládání adres či dat na tento zásobník.
Podobně je tomu u registru <strong>SP</strong>, jehož hodnota je modifikována
při prakticky jakýchkoli aritmetických či logických instrukcích. Registry
<strong>X</strong> a <strong>Y</strong> jsou dostupné programátorům, kteří je
mohou používat při adresování (takže odpovídají běžným proměnným). Registr
<strong>TOS</strong> je na čipu umístěn kvůli rychlejšímu provádění všech ALU
instrukcí, protože obsahuje prvek na vrcholu zásobníku operandů (ten se tedy
nemusí stále načítat a ukládat z/do RAM).</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Instrukční soubor čipů MARC4</h2>

<p>Základní instrukce čipů MARC4 mají šířku osmi bitů, takže se celý instrukční
soubor může teoreticky skládat až z&nbsp;256 instrukcí. Ve skutečnosti je
instrukcí mnohem méně (cca 70), protože operační kód má šířku jen 2, 4 či 8
bitů, přičemž zbytek bajtu je použit pro data, ať již pro konstanty (literály)
o šířce čtyř bitů, tak o adresy. Existuje celkem pět formátů instrukcí, přičemž
u prvních třech formátů mají instrukce délku osm bitů (jeden bajt, jeden
cyklus) a u posledních dvou formátů mají instrukce délku šestnácti bitů (dva
bajty, dva cykly pro zpracování):</p>

<table>
<tr><th>Typ instrukce</th><th>Operační kód</th><th>Data</th><th>Adresa</th><th>Celkem</th></tr>
<tr><td>Bez operandů</td><td>8</td><td>0</td><td>0</td><td>8</td></tr>
<tr><td>Konstanta 4b</td><td>4</td><td>4</td><td>0</td><td>8</td></tr>
<tr><td>Krátká adresa v&nbsp;ROM 6b</td><td>2</td><td>0</td><td>6</td><td>8</td></tr>
<tr><td>Dlouhá adresa v&nbsp;ROM 12b</td><td>4</td><td>0</td><td>12</td><td>16</td></tr>
<tr><td>Adresa v&nbsp;RAM 8b</td><td>8</td><td>0</td><td>8</td><td>16</td></tr>
</table>

<p>Poznámka: naprostá většina instrukcí pracuje s&nbsp;operandy uloženými na
zásobníku a proto je u nich použit první formát. Třetí formát se taktéž používá
často, neboť je použit u krátkých (<i>short</i>) skoků i pro volání blízkých
subrutin &ndash; a takových skoků je díky velké hustotě kódu většina.</p>

<img src="https://i.iinfo.cz/images/641/marc4-1-4.png" class="image-285050" alt="&#160;" width="532" height="736" />
<p><i>Obrázek 4: Obsazení všech 256 osmibitových kombinací instrukcemi (zdroj:
Atmel).</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Aritmetické instrukce</h2>

<p>Čip MARC4 podporuje celkem sedm aritmetických instrukcí. Všechny tyto
instrukce pracují s&nbsp;příznaky <i>carry</i> a <i>branch</i>, které nastavují
shodně na hodnotu 1 (přenos) či 0 (bez přenosu). Výjimkou jsou poslední dvě
instrukce <strong>INC</strong> a <strong>DEC</strong>, které nastaví příznak
<i>branch</i> ve chvíli, kdy je výsledek nulový. Důvod je prostý &ndash;
implementace počítaných programových smyček:</p>

<table>
<tr><th>Instrukce</th><th>Význam</th></tr>
<tr><td>ADD</td><td>součet dvou operandů na nejvyšších místech zásobníku + nastavení příznaků</td></tr>
<tr><td>ADDC</td><td>dtto, ale k&nbsp;součtu se připočte i hodnota příznaku <i>carry</i></td></tr>
<tr><td>SUB</td><td>rozdíl dvou operandů na nejvyšších místech zásobníku</td></tr>
<tr><td>SUBB</td><td>dtto, ale navíc se přičte i znegovaná hodnota příznaku <i>carry</i></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>DAA</td><td>pokud je hodnota na TOS větší než 9, přičte se k&nbsp;ní konstanta 6 a nastaví se příznaky</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>INC</td><td>zvýšení hodnoty uložené na TOS o jedničku + nastavení příznaku <i>branch</i></td></tr>
<tr><td>DEC</td><td>snížení hodnoty uložené na TOS o jedničku + nastavení příznaku <i>branch</i></td></tr>
</table>

<p>Poznámka: přenos (logicky) nastane už ve chvíli, kdy je vypočtená hodnota
větší než 15.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Logické instrukce</h2>

<p>Následují logické instrukce prováděné nad jedním či dvěma čtyřbitovými
nibbly uloženými na vrcholu zásobníku operandů. Tyto instrukce nastavují
příznak <i>branch</i> podle toho, zda je výsledek instrukce nulový či naopak
nenulový. Opět se jedná o praktické chování, neboť těmito instrukcemi lze
implementovat například složitější podmínky v&nbsp;konstrukci if-then-else:</p>

<table>
<tr><th>Instrukce</th><th>Význam</th></tr>
<tr><td>AND</td><td>logický součin nad čtyřbitovými nibbly uloženými na nejvyšších místech zásobníku</td></tr>
<tr><td>OR</td><td>logický součet</td></tr>
<tr><td>XOR</td><td>logická nonekvivalence</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>NOT</td><td>negace nibblu uloženého na TOS</td></tr>
</table>



<p><a name="k11"></a></p>
<h2 id="k11">11. Rotace a posuny</h2>

<p>Instrukce pro rotace a posuny pracují s&nbsp;hodnotou uloženou na vrcholu
zásobníku operandů a navíc i s&nbsp;příznaky <i>branch</i> a <i>carry</i>.
Jedná se o tyto čtyři instrukce:</p>

<table>
<tr><th>Instrukce</th><th>Význam</th></tr>
<tr><td>SHL</td><td>logický posun čtyřbitové hodnoty doleva, nejvyšší bit se vysune do <i>carry/branch</i></td></tr>
<tr><td>SHR</td><td>logický posun čtyřbitové hodnoty doprava, nejnižší bit se vysune do <i>carry/branch</i> </td></tr>
<tr><td>ROL</td><td>rotace čtyřbitové hodnoty doleva přes <i>carry</i> (hodnota je na TOS)</td></tr>
<tr><td>ROR</td><td>rotace čtyřbitové hodnoty doprava přes <i>carry</i> (hodnota je na TOS)</td></tr>
</table>



<p><a name="k12"></a></p>
<h2 id="k12">12. Skoky, volání podprogramů</h2>

<p>Dalších pět instrukcí je určeno pro provedení skoků, volání podprogramů
(subrutin) a návrat z&nbsp;podprogramů. Povšimněte si, že skoky a volání
podprogramů existují vždy ve dvou variantách &ndash; &bdquo;dlouhé&ldquo; a
&bdquo;krátké&ldquo;. Důvod jsme si již vysvětlili <a href="#k08">v&nbsp;osmé
kapitole</a>: krátké skoky používají instrukci o délce jednoho bajtu vykonané
v&nbsp;jediném cyklu zatímco dlouhé skoky vyžadují dvoubajtové a dvoucyklové
instrukce:</p>

<table>
<tr><th>Instrukce</th><th>Význam</th></tr>
<tr><td>BRA</td><td>podmíněný skok při splnění <i>branch</i>==1 (dlouhá varianta s&nbsp;12bitovou adresou)</td></tr>
<tr><td>SBRA</td><td>podmíněný skok při splnění <i>branch</i>==1 (krátká varianta se šestibitovou adresou)</td></tr>
<tr><td>CALL</td><td>volání podprogramu (dlouhá varianta s&nbsp;12bitovou adresou)</td></tr>
<tr><td>SCALL</td><td>volání podprogramu (krátká varianta se šestibitovou adresou)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>EXIT</td><td>návrat z&nbsp;podprogramu (obnova PC ze zásobníku návratových adres)</td></tr>
</table>

<p>Poznámka: jméno poslední instrukce <strong>EXIT</strong> sice může vypadat
poněkud nepatřičně, protože na jiných architekturách se spíše setkáme
s&nbsp;instrukcí <strong>RET</strong>, ovšem čipy MARC4 odvozují názvy
instrukcí především od programovacího jazyka FORTH.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Operace se zásobníkem operandů a zásobníkem návratových adres</h2>

<p>Poměrně velká skupina instrukcí je určena pro manipulaci se zásobníkem
operandů. Nalezneme zde především instrukce odpovídající stejně či podobně
pojmenovaným slovům z&nbsp;programovacího jazyka FORTH:</p>

<table>
<tr><th>Instrukce</th><th>Význam</th></tr>
<tr><td>DUP</td><td>zduplikování hodnoty uložené na vrcholu zásobníku operandů</td></tr>
<tr><td>DROP</td><td>odstranění hodnoty z&nbsp;vrcholu zásobníku operandů</td></tr>
<tr><td>SWAP</td><td>prohození dvou nejvyšších prvků na vrcholu zásobníku operandů</td></tr>
<tr><td>OVER</td><td>prvek pod TOS se zduplikuje a uloží na TOS (zásobník se zvětší o jeden prvek)</td></tr>
<tr><td>ROT</td><td>rotace tří nejvyšších prvků (třetí prvek se přesune na TOS)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>DROPR</td><td>odstranění hodnoty z&nbsp;vrcholu zásobníku návratových adres</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>2&gt;R</td><td>přesun dvou prvků na zásobník návratových adres</td></tr>
<tr><td>3&gt;R</td><td>přesun tří prvků na zásobník návratových adres</td></tr>
<tr><td>2R@</td><td>přesun dvou prvků ze zásobníku návratových adres na zásobník operandů</td></tr>
<tr><td>3R@</td><td>přesun tří prvků ze zásobníku návratových adres na zásobník operandů</td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Načtení konstant</h2>

<p>V&nbsp;této kapitole se seznámíme s&nbsp;jedinou instrukcí určenou pro
načtení čtyřbitové konstanty na vrchol zásobníku operandů. Tato instrukce je
tvořena jediným bajtem, protože operační kód má šířku 4 bity a další čtyři bity
jsou tvořeny vlastní konstantou, což je velmi elegantní řešení ukazující jednu
z&nbsp;výhod čtyřbitových mikrořadičů (pokud nám samozřejmě stačí pracovat
s&nbsp;čtyřbitovými hodnotami):</p>

<table>
<tr><th>Instrukce</th><th>Význam</th></tr>
<tr><td>LIT_n</td><td>načtení čtyřbitové konstanty na TOS</td></tr>
</table>



<p><a name="k15"></a></p>
<h2 id="k15">15. Další instrukce</h2>

<p>Mezi další instrukce mikrořadiče MARC4 patří například instrukce určené pro
přímou manipulaci s&nbsp;příznaky <i>carry</i> a <i>branch</i>, instrukce pro
porovnání dvou operandů a nastavení příznaku <i>branch</i> na základě výsledku
porovnání a především pak sada instrukcí typu LOAD &amp; STORE, které používají
adresovací režimy s&nbsp;registry <strong>X</strong> a <strong>Y</strong>.
Podporovány jsou i instrukce, které po načtení či uložení operandu provedou
automatickou inkrementaci či dekrementaci adresového registru atd. Nesmíme
zapomenout ani na instrukce určené pro implementaci počítaných programových
smyček, jejichž sémantika vychází z&nbsp;možností programovacího jazyka FORTH.
Všechny zmíněné instrukce si podrobněji popíšeme v&nbsp;navazující části
seriálu.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>Zero-power Microcontrollers for Low-power and High-temperature Applications<br />
<a href="http://en.wikichip.org/w/images/1/17/Atmel_MARC4_brochure.pdf">http://en.wikichip.org/w/images/1/17/Atmel_MARC4_brochure.pdf</a>
</li>

<li>MARC4 Micro-Controller (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MARC4_Micro-Controller">https://en.wikipedia.org/wiki/MARC4_Micro-Controller</a>
</li>

<li>MARC4 - Atmel<br />
<a href="https://en.wikichip.org/wiki/atmel/marc4">https://en.wikichip.org/wiki/atmel/marc4</a>
</li>

<li>MARC 4bit Microcontrollers Programmer's Guide<br />
<a href="https://en.wikichip.org/w/images/4/44/MARC4_4-bit_Microcontrollers_Programmer%27s_Guide.pdf">https://en.wikichip.org/w/images/4/44/MARC4_4-bit_Microcontrollers_Programmer%27s_Guide.pdf</a>
</li>

<li>MARC4 User's Guide qFORTH Compiler<br />
<a href="https://en.wikichip.org/w/images/2/25/MARC4_User%27s_Guide_qFORTH_Compiler.pdf">https://en.wikichip.org/w/images/2/25/MARC4_User%27s_Guide_qFORTH_Compiler.pdf</a>
</li>

<li>Programovací jazyk Forth a zásobníkové procesory<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory/">http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory/</a>
</li>

<li>Seriál Programovací jazyk Forth<br />
<a href="http://www.root.cz/serialy/programovaci-jazyk-forth/">http://www.root.cz/serialy/programovaci-jazyk-forth/</a>
</li>

<li>Programovací jazyk Factor<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-factor/">http://www.root.cz/clanky/programovaci-jazyk-factor/</a>
</li>

<li>Grafický metaformát PostScript<br />
<a href="http://www.root.cz/clanky/graficky-metaformat-postscript/">http://www.root.cz/clanky/graficky-metaformat-postscript/</a>
</li>

<li>PMOS<br />
<a href="https://en.wikipedia.org/wiki/PMOS_logic">https://en.wikipedia.org/wiki/PMOS_logic</a>
</li>

<li>NMOS<br />
<a href="https://en.wikipedia.org/wiki/NMOS_logic">https://en.wikipedia.org/wiki/NMOS_logic</a>
</li>

<li>CMOS<br />
<a href="https://en.wikipedia.org/wiki/CMOS">https://en.wikipedia.org/wiki/CMOS</a>
</li>

<li>Vacuum Fluorescent Display<br />
<a href="https://en.wikipedia.org/wiki/Vacuum_fluorescent_display">https://en.wikipedia.org/wiki/Vacuum_fluorescent_display</a>
</li>

<li>Computer History Museum: TMS 1000 4-Bit microcontroller<br />
<a href="http://www.computerhistory.org/collections/catalog/102711697">http://www.computerhistory.org/collections/catalog/102711697</a>
</li>

<li>Texas Instruments TMS1000 microcontroller family<br />
<a href="http://www.cpu-world.com/CPUs/TMS1000/">http://www.cpu-world.com/CPUs/TMS1000/</a>
</li>

<li>Invention History of Microcontroller<br />
<a href="http://www.circuitstoday.com/microcontroller-invention-history">http://www.circuitstoday.com/microcontroller-invention-history</a>
</li>

<li>TMS1000 Series - TI<br />
<a href="https://en.wikichip.org/wiki/ti/tms1000">https://en.wikichip.org/wiki/ti/tms1000</a>
</li>

<li>TMX1795 - TI<br />
<a href="https://en.wikichip.org/wiki/ti/tmx1795">https://en.wikichip.org/wiki/ti/tmx1795</a>
</li>

<li>Milton Bradley Microvision (U.S.) (1979, LCD, 9 Volt (1 or 2), Model# 4952)<br />
<a href="http://www.handheldmuseum.com/MB/uVUS.htm">http://www.handheldmuseum.com/MB/uVUS.htm</a>
</li>

<li>8051 Microcontroller<br />
<a href="http://www.circuitstoday.com/8051-microcontroller">http://www.circuitstoday.com/8051-microcontroller</a>
</li>

<li>4-bit (computer architectures)<br />
<a href="https://en.wikipedia.org/wiki/4-bit">https://en.wikipedia.org/wiki/4-bit</a>
</li>

<li>TMS 1000 Data Manual<br />
<a href="http://blog.kevtris.org/blogfiles/TMS_1000_Data_Manual.pdf">http://blog.kevtris.org/blogfiles/TMS_1000_Data_Manual.pdf</a>
</li>

<li>Considerations for 4-bit processing<br />
<a href="http://www.embeddedinsights.com/channels/2010/12/10/considerations-for-4-bit-processing/">http://www.embeddedinsights.com/channels/2010/12/10/considerations-for-4-bit-processing/</a>
</li>

<li>Are you, or would you consider, using a 4-bit microcontroller?<br />
<a href="http://www.embeddedinsights.com/channels/2010/11/24/are-you-or-would-you-consider-using-a-4-bit-microcontroller/">http://www.embeddedinsights.com/channels/2010/11/24/are-you-or-would-you-consider-using-a-4-bit-microcontroller/</a>
</li>

<li>MARC4 Micro-Controller<br />
<a href="https://en.wikipedia.org/wiki/MARC4_Micro-Controller">https://en.wikipedia.org/wiki/MARC4_Micro-Controller</a>
</li>

<li>The Texas Instruments TMX 1795: the (almost) first, forgotten microprocessor <br />
<a href="http://www.righto.com/2015/05/the-texas-instruments-tmx-1795-first.html">http://www.righto.com/2015/05/the-texas-instruments-tmx-1795-first.html</a>
</li>

<li>O2 Homepage<br />
<a href="http://www.the-nextlevel.com/odyssey2/">http://www.the-nextlevel.com/odyssey2/</a>
</li>

<li>Magnavox Odyssey2 (1978), Philips Videopac G7000 / C52 (1979)<br />
<a href="http://www.mess.org/sysinfo:odyssey2">http://www.mess.org/sysinfo:odyssey2</a>
</li>

<li>The Video Game Critic's Odyssey 2 Reviews <br />
<a href="http://videogamecritic.net/odd.htm">http://videogamecritic.net/odd.htm</a>
</li>

<li>Computer Closet Collection: Magnavox Odyssey^2<br />
<a href="http://www.computercloset.org/MagnavoxOdyssey2.htm">http://www.computercloset.org/MagnavoxOdyssey2.htm</a>
</li>

<li>PHILIPS Videopac C52<br />
<a href="http://old-computers.com/museum/computer.asp?c=1060">http://old-computers.com/museum/computer.asp?c=1060</a>
</li>

<li>O2 Tech. Manual V.1.1 (PDF dokument)<br />
<a href="http://www.atarihq.com/danb/files/o2doc.pdf">http://www.atarihq.com/danb/files/o2doc.pdf</a>
</li>

<li>Magnavox Odyssey<sup>2</sup><br />
<a href="http://www.game-machines.com/consoles/odyssey2.php">http://www.game-machines.com/consoles/odyssey2.php</a>
</li>

<li>Magnavox Odyssey<sup>2</sup> (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Odyssey_2">http://en.wikipedia.org/wiki/Odyssey_2</a>
</li>

<li>Magnavox Odyssey<sup>2</sup> Games (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/List_of_Videopac_games">http://en.wikipedia.org/wiki/List_of_Videopac_games</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

