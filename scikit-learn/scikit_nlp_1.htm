<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Využití knihovny scikit-learn pro zpracování a analýzu přirozeného jazyka (NLP)</a></p>
<p><a href="#k02">2. První kroky: stažení datové sady i seznamů stopslov</a></p>
<p><a href="#k03">3. Načtení datové sady a zjištění základních informací o v&nbsp;ní uložených datech</a></p>
<p><a href="#k04">4. Informace o sloupcích v&nbsp;datovém rámci</a></p>
<p><a href="#k05">5. Statistické informace získané ze sloupců obsahujících numerická data</a></p>
<p><a href="#k06">6. Zjištění počtu tweetů o jednotlivých dopravcích</a></p>
<p><a href="#k07">7. Grafická vizualizace počtu tweetů o jednotlivých dopravcích</a></p>
<p><a href="#k08">8. Zjištění celkové nálady tweetů</a></p>
<p><a href="#k09">9. Vizualizace celkové nálady v&nbsp;koláčovém diagramu</a></p>
<p><a href="#k10">10. Hodnocení rozdělené podle jednotlivých dopravců</a></p>
<p><a href="#k11">11. Přečtení tweetů a jejich ohodnocení z&nbsp;datové sady</a></p>
<p><a href="#k12">12. Předzpracování textových dat</a></p>
<p><a href="#k13">13. Vektorizace textových dat založená na třídě <strong>CountVectorizer</strong></a></p>
<p><a href="#k14">14. Ukázka výsledků vektorizace a zpětného převodu na text</a></p>
<p><a href="#k15">15. Vektorizace textových dat založená na třídě <strong>TfidfVectorizer</strong></a></p>
<p><a href="#k16">16. Ukázka výsledků vektorizace a zpětného převodu na text</a></p>
<p><a href="#k17">*** 17. Trénink a predikce modelu natrénovaného s&nbsp;využitím vektorizovaných dat</a></p>
<p><a href="#k18">*** 18. Výsledky získané natrénovaným modelem</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Využití knihovny scikit-learn pro zpracování a analýzu přirozeného jazyka (NLP)</h2>

<p>V&nbsp;seriálu o <a
href="https://www.root.cz/serialy/datova-analyza-s-vyuzitim-jazyka-python/">datové
analýze s&nbsp;využitím programovacího jazyka Python</a> jsme se již mnohokrát
setkali s&nbsp;knihovnou <i>scikit-learn</i>. Prozatím jsme tuto knihovnu
primárně používali pro zpracování (a popř.&nbsp;pro predikce) numerických dat.
V&nbsp;praxi se dnes ovšem poměrně často setkáme i s&nbsp;nutností práce
s&nbsp;texty psanými v&nbsp;nějakém &bdquo;přirozeném&ldquo; jazyce, čímž jsou
většinou myšleny neumělé jazyky, které se postupně vyvinuly pro potřebu
komunikace mezi lidmi. A právě způsobem zpracování přirozeného jazyka (<i>NLP
&ndash; Natural Language Processing</i>) se budeme zabývat dnes i
v&nbsp;navazujících článcích. Dnes konkrétně si ukážeme, jakým způsobem můžeme
natrénovat model knihovny <i>scikit-learn</i> tak, aby na základě zadaného
tweetu o nějaké aerolince odhadl, jestli se jedná o pozitivní, negativní nebo
neutrální hodnocení. Takovéto zpracování textů je velmi časté (ostatně každý
e-shop popř.&nbsp;další online služby se ptají na zpětnou vazbu) a nazývá se
<i>sentiment analysis</i>.</p>

<p><div class="rs-tip-major">Poznámka: dnešní článek je do značné míry
inspirován článkem <a
href="https://stackabuse.com/python-for-nlp-sentiment-analysis-with-scikit-learn/">Python
for NLP: Sentiment Analysis with Scikit-Learn</a>, ovšem některé postupy jsem
se snažil rozšířit, vylepšit či zjednodušit.</div></p>

<p>Mezi knihovny, které dnes použijeme, patří <i>scikit-learn</i>,
<i>Pandas</i>, <i>NumPy</i>, <i>Matplotlib</i> a částečně též <i>NLTK</i>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. První kroky: stažení datové sady i seznamů stopslov</h2>

<p>Nejprve musíme získat datovou sadu s&nbsp;tweety, které hodnotí jednotlivé
aerolinky a kterou můžeme použít pro trénink modelu. Jedná se o známou datovou
sadu, která je dostupná mj.&nbsp;i na Gitu. Stáhnout ji můžete interaktivně
(přes browser), nástrojem <strong>wget</strong> nebo tímto skriptem napsaný
v&nbsp;Pythonu:</p>

<pre>
<i># Stažení datové sady, kterou budeme používat v dalších demonstračních</i>
<i># příkladech.</i>
&nbsp;
import requests
&nbsp;
url = "https://raw.githubusercontent.com/satyajeetkrjha/kaggle-Twitter-US-Airline-Sentiment-/refs/heads/master/Tweets.csv"
&nbsp;
response = requests.get(url)
&nbsp;
with open("Tweets_airlines.csv", "wb") as fout:
    fout.write(response.content)
</pre>

<p>Stažený soubor je v&nbsp;CSV formátu a jeho začátek vypadá následovně:</p>

<pre>
tweet_id,airline_sentiment,airline_sentiment_confidence,negativereason,negativereason_confidence,airline,airline_sentiment_gold,name,negativereason_gold,retweet_count,text,tweet_coord,tweet_created,tweet_location,user_timezone
570306133677760513,neutral,1.0,,,Virgin America,,cairdin,,0,@VirginAmerica What @dhepburn said.,,2015-02-24 11:35:52 -0800,,Eastern Time (US &amp; Canada)
570301130888122368,positive,0.3486,,0.0,Virgin America,,jnardino,,0,@VirginAmerica plus you've added commercials to the experience... tacky.,,2015-02-24 11:15:59 -0800,,Pacific Time (US &amp; Canada)
570301083672813571,neutral,0.6837,,,Virgin America,,yvonnalynn,,0,@VirginAmerica I didn't today... Must mean I need to take another trip!,,2015-02-24 11:15:48 -0800,Lets Play,Central Time (US &amp; Canada)
570301031407624196,negative,1.0,Bad Flight,0.7033,Virgin America,,jnardino,,0,"@VirginAmerica it's really aggressive to blast obnoxious ""entertainment"" in your guests' faces &amp; they have little recourse",,2015-02-24 11:15:36 -0800,,Pacific Time (US &amp; Canada)
570300817074462722,negative,1.0,Can't Tell,1.0,Virgin America,,jnardino,,0,@VirginAmerica and it's a really big bad thing about it,,2015-02-24 11:14:45 -0800,,Pacific Time (US &amp; Canada)
570300767074181121,negative,1.0,Can't Tell,0.6842,Virgin America,,jnardino,,0,"@VirginAmerica seriously would pay $30 a flight for seats that didn't have this playing.
</pre>

*** image ***
<p><i>Obrázek 1: Datová sada po otevření ve spreadsheetu.</i></p>

<p>Dále budeme v&nbsp;některých skriptech vyžadovat slovník s&nbsp;takzvanými
stopslovy (<i>stopwords</i>). Jedná se o slova, která v&nbsp;textu nenesou
žádnou skutečně užitečnou informaci a mohou být odfiltrována. Tento slovník
stáhneme jednoduchým skriptem založeným na knihovně NLTK. Vše se stáhne do
adresáře <strong>ntkl_data</strong> v&nbsp;domovském adresáři:</p>

<pre>
<i># Stažení slovníku, který bude použit pro předzpracování textu v dalších</i>
<i># demonstračních příkladech.</i>
&nbsp;
import nltk
&nbsp;
<i># tento příkaz zajistí stažení příslušných datových souborů</i>
nltk.download("stopwords")
</pre>

<p>Příklad několika stopslov pro angličtinu (ale slovník obsahuje i další
jazyky):</p>

<pre>
i
me
my
myself
we
our
ours
ourselves
you
you're
you've
you'll
you'd
your
yours
yourself
yourselves
he
...
...
...
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Načtení datové sady a zjištění základních informací o v&nbsp;ní uložených datech</h2>

<p>Jak jsme viděli <a href="#k02">v&nbsp;předchozí kapitole</a>, je datová
sada, kterou máme k&nbsp;dispozici, uložena ve formátu CSV. Taková data je
možné načíst různým způsobem, přičemž pravděpodobně nejjednodušší je použít
knihovnu <a href="https://www.root.cz/serialy/knihovna-pandas/">Pandas</a>
popř.&nbsp;<a
href="https://www.root.cz/clanky/knihovna-polars-vykonnejsi-alternativa-ke-knihovne-pandas/">Polars</a>.
Celý CSV soubor tedy načteme do datového rámce (<i>data frame</i>) a necháme si
zobrazit prvních pět a posledních pět záznamů. K&nbsp;tomu lze použít metody
<strong>head</strong> a <strong>tail</strong>:</p>

<pre>
<i># Načtení datové sady a zjištění základních informací o v ní uložených datech.</i>
&nbsp;
import pandas as pd 
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># zobrazení prvních deseti řádků tabulky</i>
print(airline_tweets.head())
&nbsp;
print()
&nbsp;
<i># zobrazení posledních deseti řádků tabulky</i>
print(airline_tweets.tail())
</pre>

<p>Prvních pět záznamů (nezobrazí se všechny sloupce):</p>

<pre>
             tweet_id  ...               user_timezone
0  570306133677760513  ...  Eastern Time (US &amp; Canada)
1  570301130888122368  ...  Pacific Time (US &amp; Canada)
2  570301083672813571  ...  Central Time (US &amp; Canada)
3  570301031407624196  ...  Pacific Time (US &amp; Canada)
4  570300817074462722  ...  Pacific Time (US &amp; Canada)
&nbsp;
[5 rows x 15 columns]
</pre>

<p>Posledních pět záznamů:</p>

<pre>
                 tweet_id  ...               user_timezone
14635  569587686496825344  ...                         NaN
14636  569587371693355008  ...                         NaN
14637  569587242672398336  ...                         NaN
14638  569587188687634433  ...  Eastern Time (US &amp; Canada)
14639  569587140490866689  ...                         NaN
&nbsp;
[5 rows x 15 columns]
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Informace o sloupcích v&nbsp;datovém rámci</h2>

<p>Při načítání datových sad uložených ve formátu CSV se knihovny Pandas i
Polars snaží o detekci typů dat v&nbsp;jednotlivých sloupcích. Na základě
zjištěného typu se následně nastaví typy celých sloupců. Tyto informace si
můžeme velmi snadno vypsat, a to konkrétně zavoláním metody
<strong>info</strong>. Ostatně ukažme si to prakticky:</p>

<pre>
<i># Načtení datové sady a zjištění základních informací o v ní uložených datech.</i>
&nbsp;
import pandas as pd 
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># zobrazení základních informací o datovém rámci</i>
print(airline_tweets.info())
</pre>

<p>Z&nbsp;výpisu je patrné, že v&nbsp;datové sadě je 14640 záznamů a každý
záznam má 15 sloupců. Mnoho sloupců obsahuje pouze neprázdné (nenullové)
hodnoty, ovšem sloupce <strong>negativereason</strong>,
<strong>tweet_coord</strong> atd.&nbsp;obsahují i prázdné hodnoty a sloupec
<strong>airline_sentiment_gold</strong> je prakticky prázdný:</p>

<pre>
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 14640 entries, 0 to 14639
Data columns (total 15 columns):
 #   Column                        Non-Null Count  Dtype  
---  ------                        --------------  -----  
 0   tweet_id                      14640 non-null  int64  
 1   airline_sentiment             14640 non-null  object 
 2   airline_sentiment_confidence  14640 non-null  float64
 3   negativereason                9178 non-null   object 
 4   negativereason_confidence     10522 non-null  float64
 5   airline                       14640 non-null  object 
 6   airline_sentiment_gold        40 non-null     object 
 7   name                          14640 non-null  object 
 8   negativereason_gold           32 non-null     object 
 9   retweet_count                 14640 non-null  int64  
 10  text                          14640 non-null  object 
 11  tweet_coord                   1019 non-null   object 
 12  tweet_created                 14640 non-null  object 
 13  tweet_location                9907 non-null   object 
 14  user_timezone                 9820 non-null   object 
dtypes: float64(2), int64(2), object(11)
memory usage: 1.7+ MB
None
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Statistické informace získané ze sloupců obsahujících numerická data</h2>

<p>Taktéž je možné zjistit základní statistické informace o těch sloupcích
(resp.&nbsp;přesněji řečeno o datech uložených v&nbsp;těchto sloupcích), které
obsahují numerická data. Těchto sloupců v&nbsp;naší datové sadě existuje jen
několik, což bylo ostatně patrné i z&nbsp;tabulky získané v&nbsp;rámci
předchozí kapitoly &ndash; jedná se o sloupce s&nbsp;datovými typy
<strong>int64</strong> a <strong>float64</strong> (většina sloupců obsahuje
hodnoty typu <strong>object</strong>, což si můžeme přeložit jako
&bdquo;řetězec&ldquo;):</p>

<p>Knihovna Pandas nám pro zjištění statistických informací nabízí užitečnou
metodu <strong>describe</strong>, která se používá následovně:</p>

<pre>
<i># Načtení datové sady a zjištění základních informací o v ní uložených datech.</i>
&nbsp;
import pandas as pd 
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># zobrazení základních statistických informací o datovém rámci</i>
print(airline_tweets.describe())
</pre>

<p>Výsledkem je nový datový rámec, kde každý sloupec obsahuje statistické
informace o jednom sloupci z&nbsp;původního datového rámce:</p>

<pre>
           tweet_id  ...  retweet_count
count  1.464000e+04  ...   14640.000000
mean   5.692184e+17  ...       0.082650
std    7.791112e+14  ...       0.745778
min    5.675883e+17  ...       0.000000
25%    5.685592e+17  ...       0.000000
50%    5.694779e+17  ...       0.000000
75%    5.698905e+17  ...       0.000000
max    5.703106e+17  ...      44.000000
&nbsp;
[8 rows x 4 columns]
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;dalším textu se však budeme
zabývat pouze sloupci s&nbsp;textem. Zde nám již Pandas příliš
nepomůže.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zjištění počtu tweetů o jednotlivých dopravcích</h2>

<p>V&nbsp;čem nám naopak knihovna Pandas může pomoci, je automatické sjednocení
shodných hodnot z&nbsp;nějakého sloupce, načež se můžeme dotázat, kolik
shodných hodnot existuje. To je již informace, která se nám bude hodit, protože
takto snadno zjistíme, kolik hodnocení (resp.&nbsp;tweetů) o jednotlivých
dopravcích máme k&nbsp;dispozici. Celý postup je ve skutečnosti snadný, protože
jen musíme vybrat vhodný sloupec (přes jeho selektor) a následně zavolat metodu
<strong>value_counts</strong>. Ta vrátí nový datový rámec s&nbsp;požadovanými
výsledky:</p>

<pre>
<i># Načtení datové sady a zjištění počtu tweetů o jednotlivých dopravcích</i>
&nbsp;
import pandas as pd
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># počet tweetů o jednotlivých dopravcích</i>
print(airline_tweets.airline.value_counts())
</pre>

<p>Nový datový rámec vypadá pro naši datovou sadu následovně (první řádek je
nadpis indexu, poslední řádek obsahuje typ sloupce v&nbsp;novém datovém
rámci):</p>

<pre>
airline
United            3822
US Airways        2913
American          2759
Southwest         2420
Delta             2222
Virgin America     504
Name: count, dtype: int64
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Grafická vizualizace počtu tweetů o jednotlivých dopravcích</h2>

<p>Informace, které jsme získali metodou <strong>value_counts</strong>, je
možné snadno vizualizovat. Pro tento účel zkombinujeme možnosti nabízené
knihovnami Pandas a Matplotlib. Nejdříve si necháme zobrazit jednoduchý
sloupcový diagram, kde výška sloupců (podle očekávání) odpovídá počtu tweetů o
daném dopravci:</p>

<pre>
<i># Vykreslení sloupcového diagramu s počty tweetů o jednotlivých dopravcích</i>
&nbsp;
import pandas as pd
import matplotlib.pyplot as plt
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># specifikace plochy grafu</i>
fig = plt.figure(1, figsize=(6, 6), dpi=150)
&nbsp;
<i># vykreslení sloupcového diagramu s počty tweetů o jednotlivých dopravcích</i>
airline_tweets.airline.value_counts().plot(
    kind="bar",
)
&nbsp;
<i># zajištění místa pro popisky os</i>
fig.tight_layout()
&nbsp;
<i># uložení sloupcového diagramu do souboru</i>
plt.savefig("178.png")
&nbsp;
<i># zobrazení diagramu na obrazovce</i>
plt.show()
</pre>

<p>Výsledek by měl vypadat následovně:</p>

*** image ***
<p><i>Obrázek 2: Počty tweetů o jednotlivých dopravcích vyjádřené sloupcovým diagramem.</i></p>

<p>V&nbsp;případě, že nás nezajímají absolutní hodnoty, ale pouze porovnání
počtu tweetů, je výhodnější použít koláčový (kruhový) diagram. Ten se vytvoří
taktéž velmi snadno. Pouze jsem diagram otočil o 90&deg; (lepší zarovnání jmen
dopravců) a nastavil styl vykreslení okrajů jednotlivých kruhových výsečí,
jinak jsou poměrně málo viditelné (ale tyto úpravy lze udělat později či
vůbec):</p>

<pre>
<i># Vykreslení koláčového diagramu s počty tweetů o jednotlivých dopravcích</i>
&nbsp;
import pandas as pd
import matplotlib.pyplot as plt
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># specifikace plochy grafu</i>
fig = plt.figure(1, figsize=(6, 6), dpi=150)
&nbsp;
<i># vykreslení koláčového diagramu s počty tweetů o jednotlivých dopravcích</i>
airline_tweets.airline.value_counts().plot(
    kind="pie",
    autopct="%1.0f%%",
    startangle=90,
    wedgeprops={"edgecolor": "black", "linewidth": 2, "antialiased": True},
)
&nbsp;
<i># uložení sloupcového diagramu do souboru</i>
plt.savefig("179.png")
&nbsp;
<i># zobrazení diagramu na obrazovce</i>
plt.show()
</pre>

<p>Nyní bude vizuální výsledek pochopitelně zcela odlišný od sloupcového
diagramu:</p>

*** image ***
<p><i>Obrázek 3: Počty tweetů o jednotlivých dopravcích vyjádřené koláčovým
(kruhovým) diagramem.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zjištění celkové nálady tweetů</h2>

<p>Námi používaná datová sada obsahuje i sloupec nazvaný <i>sentiment</i>.
Tento sloupec je vyplněn příznakem, zda daný tweet obsahuje kladné, záporné
nebo neutrální hodnocení. Právě díky existenci tohoto sloupce (ruční práce)
budeme moci natrénovat náš model tak, aby tweety (resp.&nbsp;jejich hodnocení)
ohodnocoval sám. Ovšem podívejme se nyní na obsah sloupce <i>sentiment</i>:</p>

<pre>
<i># Načtení datové sady a zjištění celkové nálady.</i>
&nbsp;
import pandas as pd 
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># celková nálada: počty pozitivních, negativních a neutrálních reakcí</i>
print(airline_tweets.airline_sentiment.value_counts())
</pre>

<p>Podle očekávání je většina hodnocení spíše negativní, protože spokojený
zákazník většinou necítí potřebu se ke službě nebo výrobku vyjadřovat (což je,
zcela na okraj, jeden z&nbsp;největších problémů dnešního informačního
prostoru):</p>

<pre>
airline_sentiment
negative    9178
neutral     3099
positive    2363
Name: count, dtype: int64
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se jedná o běžný text
&ndash; nemáme zde tedy mapování mezi hodnotou a jejím významem, což bylo
použito například v&nbsp;datové sadě Iris.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vizualizace celkové nálady v&nbsp;koláčovém diagramu</h2>

<p>Nyní je již snadné zobrazit koláčový (kruhový) diagram s&nbsp;relativní
mírou kladných, záporných a neutrálních hodnocení. Použijeme naprosto stejný
postup jako u prvního koláčového diagramu, pouze vstupní datový rámec bude
odlišný. Navíc explicitně nastavuji barvy jednotlivých výsečí, aby červená
odpovídala negativnímu hodnocení a zelená hodnocení pozitivnímu:</p>

<pre>
<i># Načtení datové sady a vizualizace celkové nálady.</i>
&nbsp;
import pandas as pd
import matplotlib.pyplot as plt
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># plocha grafu</i>
fig = plt.figure(1, figsize=(6, 6), dpi=150)
&nbsp;
<i># vykreslení koláčového diagramu s hodnoceními</i>
airline_tweets.airline_sentiment.value_counts().plot(
    kind="pie",
    autopct="%1.0f%%",
    colors=["#ff8080", "yellow", "#80ff80"],
    wedgeprops={"edgecolor": "black", "linewidth": 2, "antialiased": True},
)
&nbsp;
<i># uložení koláčového diagramu do souboru</i>
plt.savefig("181.png")
&nbsp;
<i># zobrazení koláčového diagramu na obrazovce</i>
plt.show()
</pre>

<p>Výsledný diagram by měl vypadat následovně:</p>

*** image ***
<p><i>Obrázek 4: Poměr kladných, záporných a neutrálních hodnocení.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Hodnocení rozdělené podle jednotlivých dopravců</h2>

<p>Kromě celkové nálady (kladná/záporná hodnocení) nás může zajímat i hodnocení
rozdělené podle jednotlivých dopravců. Na základě těchto hodnot by pak bylo
možné rozhodnout, který dopravce je (stále z&nbsp;úzkého pohledu tweetů)
nejpopulárnější a který naopak &bdquo;nasbíral&ldquo; nejvíce negativních
reakcí. Řešení by mohlo být založeno na velmi užitečné metodě
<strong>groupby</strong>, kterou jsme si již popsali v&nbsp;seriálu o knihovně
Pandas. Rozdělení na základě dvou sloupců s&nbsp;následným zjištěním počtu
záznamů v&nbsp;jednotlivých skupinách může být realizováno následujícím
způsobem:</p>

<pre>
<i># Výpočet hodnocení podle dopravce.</i>
&nbsp;
import pandas as pd
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># rozdělení hodnocení podle dopravce</i>
airline_sentiment = (
    airline_tweets
    .groupby(["airline", "airline_sentiment"])
    .airline_sentiment.count()
)
&nbsp;
<i># výsledný datový rámec (hierarchický)</i>
print(airline_sentiment)
&nbsp;
print()
&nbsp;
<i># pivot tabulka</i>
airline_sentiment = airline_sentiment.unstack()
&nbsp;
<i># výsledný datový rámec</i>
print(airline_sentiment)
</pre>

<p>Výsledná tabulka s&nbsp;počty sdružených hodnot i transformací zkonstruovaná
pivot tabulka by měly vypadat následovně:</p>

<pre>
airline         airline_sentiment
American        negative             1960
                neutral               463
                positive              336
Delta           negative              955
                neutral               723
                positive              544
Southwest       negative             1186
                neutral               664
                positive              570
US Airways      negative             2263
                neutral               381
                positive              269
United          negative             2633
                neutral               697
                positive              492
Virgin America  negative              181
                neutral               171
                positive              152
Name: airline_sentiment, dtype: int64
&nbsp;
airline_sentiment  negative  neutral  positive
airline                                       
American               1960      463       336
Delta                   955      723       544
Southwest              1186      664       570
US Airways             2263      381       269
United                 2633      697       492
Virgin America          181      171       152
</pre>

<p>Prakticky totožným způsobem je možné si nechat hodnocení vizualizovat. Pro
jednoduchost zůstaneme u sloupcových diagramů, i když by pochopitelně bylo
možné vytvořit graf, v&nbsp;němž bude umístěno několik koláčových diagramů:</p>

<pre>
<i># Vizualizace hodnocení podle dopravce.</i>
&nbsp;
import pandas as pd
import matplotlib.pyplot as plt
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># rozdělení hodnocení podle dopravce</i>
airline_sentiment = (
    airline_tweets
    .groupby(["airline", "airline_sentiment"])
    .airline_sentiment.count()
    .unstack()
)
&nbsp;
<i># zobrazení hodnocení podle dopravce</i>
airline_sentiment.plot(
    kind="bar",
    color=["#ff8080", "yellow", "#80ff80"],
    edgecolor="black",
    figsize=(6, 6),
).legend(loc='best')
&nbsp;
plt.tight_layout()
&nbsp;
<i># uložení koláčového diagramu do souboru</i>
plt.savefig("183.png")
&nbsp;
<i># zobrazení koláčového diagramu na obrazovce</i>
plt.show()
</pre>

<p>Výsledný graf:</p>

*** image ***
<p><i>Obrázek 5: Kladná, záporná a neutrální hodnocení rozdělená podle dopravce.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Přečtení tweetů a jejich ohodnocení z&nbsp;datové sady</h2>

<p>V&nbsp;navazujících kapitolách budeme pracovat pouze se dvěma sloupci
získanými z&nbsp;datové sady. Bude se jednat o sloupec pojmenovaný
&bdquo;text&ldquo; s&nbsp;vlastními tweety a taktéž o sloupec nazvaný
&bdquo;airline_sentiment&ldquo;, který obsahuje pouze hodnoty
&bdquo;positive&ldquo;, &bdquo;negative&ldquo; a &bdquo;neutral&ldquo;.
K&nbsp;přečtení hodnot z&nbsp;těchto sloupců použijeme standardní sadu nástrojů
knihovny Pandas, zejména její podporu <i>selektorů</i> (vybrat sloupec lze
mnoha různými způsoby):</p>

<pre>
<i># Načtení datové sady a získání vlastních tweetů a hodnocení</i>
&nbsp;
import pandas as pd 
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># hodnocení (pozitivní, negativní, neutrální)</i>
labels = airline_tweets["airline_sentiment"].values
&nbsp;
<i># vlastní text hodnocení</i>
features = airline_tweets["text"].values
&nbsp;
<i># hodnoty použité později pro trénink modelu</i>
print("Labels:")
print(labels)
print("Number of labels:", len(labels))
print()
&nbsp;
print("Features:")
print(features)
print("Number of features:", len(features))
</pre>

<p>Tento velmi jednoduchý skript po svém spuštění nejdříve zobrazí hodnocení
(použijeme při tréninku modelu) i vlastní texty tweetů:</p>

<pre>
Labels:
['neutral' 'positive' 'neutral' ... 'neutral' 'negative' 'neutral']
Number of labels: 14640
&nbsp;
Features:
['@VirginAmerica What @dhepburn said.'
 "@VirginAmerica plus you've added commercials to the experience... tacky."
 "@VirginAmerica I didn't today... Must mean I need to take another trip!"
 ... '@AmericanAir Please bring American Airlines to #BlackBerry10'
 "@AmericanAir you have my money, you change my flight, and don't answer your phones! Any other suggestions so I can make my commitment??"
 '@AmericanAir we have 8 ppl so we need 2 know how many seats are on the next flight. Plz put us on standby for 4 people on the next flight?']
Number of features: 14640
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Předzpracování textových dat</h2>

<p>V&nbsp;předchozích článcích o knihovně <i>scikit-learn</i> jsme používali
datové sady, které byly očištěny od neúplných nebo zbytečných dat.
V&nbsp;případě tweetů o dopravcích tomu však tak není, protože v&nbsp;tweetech
mohou být neúplná slova, překlepy atd. Bude tedy vhodné ještě před tréninkem
modelu data pročistit. V&nbsp;dalším skriptu je použit velmi přímočarý přístup,
který sice není na sto procent účinný, ale odstraní poměrně velkou část
&bdquo;šumu&ldquo;. Odstraňujeme v&nbsp;něm bílé znaky na začátku a konci vět,
opakující se bílé znaky, slova tvořená jediným znakem atd.:</p>

<pre>
<i># Preprocesing textových dat</i>
&nbsp;
import numpy as np
import pandas as pd
import re
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># hodnocení (pozitivní, negativní, neutrální)</i>
labels = airline_tweets["airline_sentiment"].values
&nbsp;
<i># vlastní text hodnocení</i>
features = airline_tweets["text"].values
&nbsp;
&nbsp;
def <strong>process_feature</strong>(feature):
    <i>"""Preprocesing textových dat."""</i>
    <i># odstranění speciálních znaků a dalšího smetí</i>
    processed_feature = re.sub(r"\W", " ", feature)
&nbsp;
    <i># odstranění samostatných znaků (oddělených bílými znaky)</i>
    processed_feature = re.sub(r"\s+[a-zA-Z]\s+", " ", processed_feature)
&nbsp;
    <i># odstranění samostatných znaků na začátku vět</i>
    processed_feature = re.sub(r"\^[a-zA-Z]\s+", " ", processed_feature)
&nbsp;
    <i># náhrada více mezer (nebo jiných bílých znaků) za jedinou mezeru</i>
    processed_feature = re.sub(r"\s+", " ", processed_feature, flags=re.I)
&nbsp;
    <i># odstranění prefixů ^b</i>
    processed_feature = re.sub(r"^b\s+", "", processed_feature)
&nbsp;
    <i># konverze výsledku na malá písmena</i>
    return processed_feature.lower()
&nbsp;
&nbsp;
<i># preprocesing všech hodnocení</i>
processed_features = [process_feature(feature) for feature in features]
&nbsp;
<i># hodnoty použité později pro trénink modelu</i>
print("Labels:")
print(labels)
print("Number of labels:", len(labels))
print()
&nbsp;
print("Features:")
print(processed_features)
print("Number of features:", len(processed_features))
print()
&nbsp;
<i># porovnání výsledků preprocesingu</i>
for i in range(10):
    print(features[i], " | ", processed_features[i])
</pre>

<p>Tento skript nejdříve (opět) zobrazí základní informace o datové sadě:</p>

<pre>
Labels:
['neutral' 'positive' 'neutral' ... 'neutral' 'negative' 'neutral']
Number of labels: 14640
&nbsp;
Features:
Number of features: 14640
</pre>

<p>Posléze dojde k&nbsp;výpisu původních textů i textů po předzpracování. Tento
výpis je ručně upraven do podoby tabulky:</p>

<table>
<tr><th>Původní text</th><th>Text po předzpracování</th></tr>
<tr><td>@VirginAmerica What @dhepburn said.</td><td>virginamerica what dhepburn said </td></tr>
<tr><td>@VirginAmerica plus you've added commercials to the experience... tacky.</td><td>virginamerica plus you ve added commercials to the experience tacky </td></tr>
<tr><td>@VirginAmerica I didn't today... Must mean I need to take another trip!</td><td>virginamerica didn today must mean need to take another trip </td></tr>
<tr><td>@VirginAmerica it's really aggressive to blast obnoxious "entertainment" in your guests' faces &amp; they have little recourse</td><td>virginamerica it really aggressive to blast obnoxious entertainment in your guests faces amp they have little recourse</td></tr>
<tr><td>@VirginAmerica and it's a really big bad thing about it</td><td>virginamerica and it a really big bad thing about it</td></tr>
<tr><td>@VirginAmerica seriously would pay $30 a flight for seats that didn't have this playing. it's really the only bad thing about flying VA</td><td>virginamerica seriously would pay 30 flight for seats that didn have this playing it really the only bad thing about flying va</td></tr>
<tr><td>@VirginAmerica yes, nearly every time I fly VX this “ear worm” won’t go away :)</td><td>virginamerica yes nearly every time fly vx this ear worm won go away </td></tr>
<tr><td>@VirginAmerica Really missed a prime opportunity for Men Without Hats parody, there. https://t.co/mWpG7grEZP</td><td>virginamerica really missed prime opportunity for men without hats parody there https co mwpg7grezp</td></tr>
<tr><td>@virginamerica Well, I didn't…but NOW I DO! :-D</td><td>virginamerica well didn but now do d</td></tr>
<tr><td>@VirginAmerica it was amazing, and arrived an hour early. You're too good to me.</td><td>virginamerica it was amazing and arrived an hour early you re too good to me </td></tr>
</table>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vektorizace textových dat založená na třídě <strong>CountVectorizer</strong></h2>

<p>Posledním krokem, který je nutné provést ještě před tréninkem modelu, je
<i>vektorizace</i> textových dat do numerické podoby. Na Rootu už jsme se
setkali s&nbsp;<i>tokenizací</i>, tedy náhradou celých slov nebo jejich částí
za numerické tokeny získané z&nbsp;nějakého globálního slovníku. Ovšem my
použijeme odlišný přístup, který je založen na tom, že si vytvoříme vlastní
slovník, který obsahuje pouze slova použitá ve všech vstupních textech (a žádná
jiná slova). Posléze vytvoříme matici s&nbsp;N řádky a M sloupci, kde N je
počet textů (korpus) a M je počet slov ve slovníku. V&nbsp;každém řádku matice
budou uloženy počty počty výskytů jednotlivých slov v&nbsp;jednom textu. Pokud
například jeden řádek matice obsahuje hodnoty [1, 0, 0, 2, 0], znamená to, že
příslušná vstupní věta (text) obsahovala jeden výskyt slova uloženého ve
slovníku pod indexem 0 a dva výskyty slov, které jsou uloženy pod indexem 3.
Další slova se ve větě nevyskytují. Typicky bývají takové matice <i>řídké</i>
(mnoho prvků má nulovou hodnotu) a proto bývají uloženy speciálním
způsobem.</p>

<p>Zkusme si takovou vektorizaci provést a následně dekódovat obsah spočtené
matice:</p>

<pre>
<i># Vektorizace textových dat</i>
&nbsp;
import numpy as np
import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import CountVectorizer
&nbsp;
&nbsp;
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># hodnocení (pozitivní, negativní, neutrální)</i>
labels = airline_tweets["airline_sentiment"].values
&nbsp;
<i># vlastní text hodnocení</i>
features = airline_tweets["text"].values
&nbsp;
&nbsp;
def <strong>process_feature</strong>(feature):
    <i>"""Preprocesing textových dat."""</i>
    <i># odstranění speciálních znaků a dalšího smetí</i>
    processed_feature = re.sub(r"\W", " ", feature)
&nbsp;
    <i># odstranění samostatných znaků (oddělených bílými znaky)</i>
    processed_feature = re.sub(r"\s+[a-zA-Z]\s+", " ", processed_feature)
&nbsp;
    <i># odstranění samostatných znaků na začátku vět</i>
    processed_feature = re.sub(r"\^[a-zA-Z]\s+", " ", processed_feature)
&nbsp;
    <i># náhrada více mezer (nebo jiných bílých znaků) za jedinou mezeru</i>
    processed_feature = re.sub(r"\s+", " ", processed_feature, flags=re.I)
&nbsp;
    <i># odstranění prefixů ^b</i>
    processed_feature = re.sub(r"^b\s+", "", processed_feature)
&nbsp;
    <i># konverze výsledku na malá písmena</i>
    return processed_feature.lower()
&nbsp;
&nbsp;
<i># preprocesing všech hodnocení</i>
processed_features = [process_feature(feature) for feature in features]
&nbsp;
<i># hodnoty použité později pro trénink modelu</i>
print("Labels:")
print(labels)
print("Number of labels:", len(labels))
print()
&nbsp;
print("Features:")
<i>#print(processed_features)</i>
print("Number of features:", len(processed_features))
print()
&nbsp;
<i># vektorizace textu</i>
vectorizer = CountVectorizer(
    max_features=2500,
    min_df=7, max_df=0.8, stop_words=stopwords.words("english")
)
vectorized_features = vectorizer.fit_transform(processed_features).toarray()
&nbsp;
<i># slova pro dekódování vah</i>
feature_names = vectorizer.get_feature_names_out()
print("Feature names count:", len(feature_names))
print("Feature names:")
for feature_name in feature_names:
    print(feature_name)
&nbsp;
print()
&nbsp;
<i># vlastní výsledek vektorizace</i>
print("Sparse matrix of size", vectorized_features.shape, ":")
print(vectorized_features)
print()
&nbsp;
<i># ukázka způsobu zakódování</i>
print("Selected tweet:")
print("Original:     ", features[2])
print("Preprocessed: ", processed_features[2])
print("Vectorized:   ", vectorized_features[2])
print()
&nbsp;
print("word# weight meaning")
for i, f in enumerate(vectorized_features[2]):
    if f &gt; 0:
        print(f"{i:4}  {f:5}  {feature_names[i]}")
</pre>

<p><div class="rs-tip-major">Poznámka: vektorizér může ale také nemusí
z&nbsp;textů odstranit stopslova. To je řízeno parametrem
<strong>stop_words</strong>.  Podrobnosti si ukážeme příště.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Ukázka výsledků vektorizace a zpětného převodu na text</h2>

<p>Zajímavé bude zjistit, jaké informace vlastně získáme po spuštění skriptu
popsaného <a href="#k13">v&nbsp;předchozí kapitole</a>.</p>

<p>Nejdříve se zobrazí nám již známé informace získané přímo ze vstupní datové
sady:</p>

<pre>
Labels:
['neutral' 'positive' 'neutral' ... 'neutral' 'negative' 'neutral']
Number of labels: 14640
&nbsp;
Features:
Number of features: 14640
&nbsp;
Feature names count: 2301
Feature names:
</pre>

<p>Dále se zobrazí slovník vybudovaný vektorizérem. Ten obsahuje 2301 slov,
takže si ukážeme jen výběr z&nbsp;celého slovníku:</p>

<pre>
ah
ahead
ahold
air
airbus
aircanada
aircraft
airfare
airline
airlines
airplane
airport
airports
airways
alert
alliance
allow
allowed
allowing
almost
alone
along
</pre>

<p>Nejdůležitější je vypočtená matice, která má 14640 řádků (= počet vstupních
tweetů) a 2301 sloupců (= počet slov ve slovníku). Většina prvků je nulových,
proto je tato matice uložena jako řídká matice:</p>

<pre>
Sparse matrix of size (14640, 2301) :
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
</pre>

<p>Skript dále zkusí zjistit, jakým způsobem je v&nbsp;matici uložen jeden
tweet. Zobrazí původní tweet, tweed po svém předzpracování a taktéž příslušný
řádek matice (vektor):</p>

<pre>
Selected tweet:
Original:      @VirginAmerica I didn't today... Must mean I need to take another trip!
Preprocessed:   virginamerica didn today must mean need to take another trip 
Vectorized:    [0 0 0 ... 0 0 0]
</pre>

<p>Z&nbsp;vektoru příliš informací nevyčteme, protože většinou obsahuje samé
nuly. Takže si programově vyfiltrujeme pouze ty prvky, které jsou nenulové a ze
slovníku zjistíme původní slovo:</p>

<pre>
word# weight meaning
 183      1  another
1300      1  mean
1379      1  must
1390      1  need
1995      1  take
2052      1  today
2087      1  trip
2176      1  virginamerica
</pre>

<p>Z&nbsp;původní věty nám tedy zbyl jen seznam slov &ndash; ztratili jsme
jednopísmenná slova, ztratili jsme stopslova a hlavně jsme ztratili posloupnost
slov! Nicméně vstup je dostatečně krátký pro další zpracování modelem.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Vektorizace textových dat založená na třídě <strong>TfidfVectorizer</strong></h2>

<p>S&nbsp;maticí obsahující počty slov vyskytujících se v&nbsp;jednotlivých
textech korpusu se setkáme poměrně často. Neméně často má ovšem matice poněkud
odlišný obsah, který je vypočten na základě metodiky <i>Tf-idf</i> neboli celým
jménem <i>term frequency–inverse document frequency</i>. Jednotlivé hodnoty
nyní neobsahují frekvenci daného slova v&nbsp;textu, ale <i>relevanci</i> nebo
možná lépe řečeno důležitost takového slova. V&nbsp;textu se totiž vyskytují
jak obecná slova, která text nijak necharakterizují (obecné názvy a vlastně i
všechna stopslova &ndash; ty jsme však vyfiltrovali), tak i zcela
charakteristická slova, jež je možné použít v&nbsp;případě klasifikace textů
(charakteristickými slovy mohou být jména postav, měst, fiktivních planet atd.
v&nbsp;knihách či filmech).</p>

<p>Touto tématikou se budeme podrobněji zabývat v&nbsp;navazujícím článku,
který je celý věnován vektorizaci, ovšem již dnes si můžeme ukázat, jak
<i>tf-idf</i> spočítat. Namísto třídy <strong>CountVectorizer</strong>
použijeme třídu <strong>TfidfVectorizer</strong>:</p>

<pre>
<i># Vektorizace textových dat</i>
&nbsp;
import numpy as np
import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
&nbsp;
&nbsp;
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># hodnocení (pozitivní, negativní, neutrální)</i>
labels = airline_tweets["airline_sentiment"].values
&nbsp;
<i># vlastní text hodnocení</i>
features = airline_tweets["text"].values
&nbsp;
&nbsp;
def <strong>process_feature</strong>(feature):
    <i>"""Preprocesing textových dat."""</i>
    <i># odstranění speciálních znaků a dalšího smetí</i>
    processed_feature = re.sub(r"\W", " ", feature)
&nbsp;
    <i># odstranění samostatných znaků (oddělených bílými znaky)</i>
    processed_feature = re.sub(r"\s+[a-zA-Z]\s+", " ", processed_feature)
&nbsp;
    <i># odstranění samostatných znaků na začátku vět</i>
    processed_feature = re.sub(r"\^[a-zA-Z]\s+", " ", processed_feature)
&nbsp;
    <i># náhrada více mezer (nebo jiných bílých znaků) za jedinou mezeru</i>
    processed_feature = re.sub(r"\s+", " ", processed_feature, flags=re.I)
&nbsp;
    <i># odstranění prefixů ^b</i>
    processed_feature = re.sub(r"^b\s+", "", processed_feature)
&nbsp;
    <i># konverze výsledku na malá písmena</i>
    return processed_feature.lower()
&nbsp;
&nbsp;
<i># preprocesing všech hodnocení</i>
processed_features = [process_feature(feature) for feature in features]
&nbsp;
<i># hodnoty použité později pro trénink modelu</i>
print("Labels:")
print(labels)
print("Number of labels:", len(labels))
print()
&nbsp;
print("Features:")
print(processed_features)
print("Number of features:", len(processed_features))
print()
&nbsp;
<i># vektorizace textu</i>
vectorizer = TfidfVectorizer(
    max_features=2500, min_df=7, max_df=0.8, stop_words=stopwords.words("english")
)
vectorized_features = vectorizer.fit_transform(processed_features).toarray()
&nbsp;
<i># slova pro dekódování vah</i>
feature_names = vectorizer.get_feature_names_out()
print("Feature names count:", len(feature_names))
print("Feature names:")
for feature_name in feature_names:
    print(feature_name)
&nbsp;
print()
&nbsp;
<i># vlastní výsledek vektorizace</i>
print("Sparse matrix of size", vectorized_features.shape, ":")
print(vectorized_features)
print()
&nbsp;
<i># ukázka způsobu zakódování</i>
print("Selected tweet:")
print("Original:     ", features[2])
print("Preprocessed: ", processed_features[2])
print("Vectorized:   ", vectorized_features[2])
print()
&nbsp;
print("word# weight meaning")
for i, f in enumerate(vectorized_features[2]):
    if f &gt; 0.0:
        print(f"{i:4}  {f:5.3}  {feature_names[i]}")
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Ukázka výsledků vektorizace a zpětného převodu na text</h2>

<p>Opět se podívejme na výsledky, které byly získány demonstračním příkladem <a
href="#k15">z&nbsp;předchozí kapitoly</a>. Začátek výstupu je shodný
s&nbsp;předchozím příkladem &ndash; základní informace o vstupní datové
sadě:</p>

<pre>
Labels:
['neutral' 'positive' 'neutral' ... 'neutral' 'negative' 'neutral']
Number of labels: 14640
&nbsp;
Features:
Number of features: 14640
&nbsp;
Feature names count: 2301
</pre>

<p>Následuje výpis 2301 slov, které byly přidány do slovníku. Nyní pro
zajímavost vypisuji slova začínající na &bdquo;un&ldquo;, které byly získány ze
všech tweetů:</p>

<pre>
Feature names:
unable
unacceptable
unavailable
unbelievable
uncomfortable
understaffing
understand
understandable
understood
unfortunately
unfriendly
unfriendlyskies
unhappy
unhelpful
united
unitedairlines
unitedfail
unitedsucks
unless
unprofessional
unreal
unused
</pre>

<p>Matice vypočtená vektorizérem bude nyní odlišná, což je patrné už jen
z&nbsp;toho, že obsahuje hodnoty s&nbsp;plovoucí řádovou čárkou a nikoli celá
čísla:</p>

<pre>
Sparse matrix of size (14640, 2301) :
[[0. 0. 0. ... 0. 0. 0.]
 [0. 0. 0. ... 0. 0. 0.]
 [0. 0. 0. ... 0. 0. 0.]
 ...
 [0. 0. 0. ... 0. 0. 0.]
 [0. 0. 0. ... 0. 0. 0.]
 [0. 0. 0. ... 0. 0. 0.]]
</pre>

<p>Skript na konci své činnosti opět provede zpětný převod vektoru na slova
z&nbsp;původní věty. Povšimněte si, že nyní jednotlivá slova nemají
v&nbsp;matici celočíselné hodnoty (počty výskytů ve větě), ale váhy
představující jejich unikátnost. Vypsána jsou pouze slova s&nbsp;nenulovou
váhou:</p>

<pre>
Selected tweet:
Original:      @VirginAmerica I didn't today... Must mean I need to take another trip!
Preprocessed:   virginamerica didn today must mean need to take another trip 
Vectorized:    [0. 0. 0. ... 0. 0. 0.]
&nbsp;
word# weight meaning
 183  0.332  another
1300  0.434  mean
1379  0.463  must
1390  0.286  need
1995  0.332  take
2052  0.302  today
2087  0.349  trip
2176  0.288  virginamerica
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Trénink a predikce modelu natrénovaného s&nbsp;využitím vektorizovaných dat</h2>

<p></p>

<pre>
<i># Trénink a predikce modelu nad vektorizovanými daty</i>
&nbsp;
import numpy as np
import pandas as pd
import re
import nltk
import matplotlib.pyplot as plt
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.neighbors import KNeighborsClassifier
&nbsp;
&nbsp;
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># hodnocení (pozitivní, negativní, neutrální)</i>
labels = airline_tweets["airline_sentiment"].values
&nbsp;
<i># vlastní text hodnocení</i>
features = airline_tweets["text"].values
&nbsp;
&nbsp;
def process_feature(feature):
    """Preprocesing textových dat."""
    <i># odstranění speciálních znaků a dalšího smetí</i>
    processed_feature = re.sub(r"\W", " ", feature)
&nbsp;
    <i># odstranění samostatných znaků (oddělených bílými znaky)</i>
    processed_feature = re.sub(r"\s+[a-zA-Z]\s+", " ", processed_feature)
&nbsp;
    <i># odstranění samostatných znaků na začátku vět</i>
    processed_feature = re.sub(r"\^[a-zA-Z]\s+", " ", processed_feature)
&nbsp;
    <i># náhrada více mezer (nebo jiných bílých znaků) za jedinou mezeru</i>
    processed_feature = re.sub(r"\s+", " ", processed_feature, flags=re.I)
&nbsp;
    <i># odstranění prefixů ^b</i>
    processed_feature = re.sub(r"^b\s+", "", processed_feature)
&nbsp;
    <i># konverze výsledku na malá písmena</i>
    return processed_feature.lower()
&nbsp;
&nbsp;
<i># preprocesing všech hodnocení</i>
processed_features = [process_feature(feature) for feature in features]
&nbsp;
<i># hodnoty použité později pro trénink modelu</i>
print("Labels:")
print(labels)
print("Number of labels:", len(labels))
print()
&nbsp;
print("Features:")
print(processed_features)
print("Number of features:", len(processed_features))
print()
&nbsp;
<i># vektorizace textu</i>
vectorizer = TfidfVectorizer(
    max_features=2500, min_df=7, max_df=0.8, stop_words=stopwords.words("english")
)
vectorized_features = vectorizer.fit_transform(processed_features).toarray()
&nbsp;
<i># klasické rozdělení datové sady na trénovací a testovací část</i>
trainX, testX, trainY, testY = train_test_split(
    vectorized_features, labels, test_size=0.2, random_state=0
)
&nbsp;
<i># konstrukce vybraného modelu s předáním hyperparametrů</i>
classifier = KNeighborsClassifier(n_neighbors=1)
&nbsp;
<i># trénink modelu</i>
classifier.fit(trainX, trainY)
&nbsp;
<i># predikce modelu pro testovací vstupy (ne pro trénovací data)</i>
predictions = classifier.predict(testX)
&nbsp;
<i># vyhodnocení kvality modelu</i>
print(classification_report(testY, predictions))
print(accuracy_score(testY, predictions))
&nbsp;
<i># matice záměn - absolutní hodnoty</i>
disp = ConfusionMatrixDisplay.from_estimator(
    classifier,
    testX,
    testY,
    cmap=plt.cm.Blues,
    normalize=None,
)
&nbsp;
<i># zobrazení matice v textové podobě</i>
print(disp.confusion_matrix)
&nbsp;
<i># uložení výsledků ve formě rastrového obrázku</i>
plt.savefig("180_1.png")
&nbsp;
<i># vizualizace matice</i>
plt.show()
&nbsp;
<i># matice záměn - relativní hodnoty</i>
disp = ConfusionMatrixDisplay.from_estimator(
    classifier,
    testX,
    testY,
    cmap=plt.cm.Blues,
    normalize="true",
)
&nbsp;
<i># zobrazení matice v textové podobě</i>
print(disp.confusion_matrix)
&nbsp;
<i># uložení výsledků ve formě rastrového obrázku</i>
plt.savefig("180_2.png")
&nbsp;
<i># vizualizace matice</i>
plt.show()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Výsledky získané natrénovaným modelem</h2>

<pre>
              precision    recall  f1-score   support
&nbsp;
    negative       0.83      0.65      0.73      1870
     neutral       0.38      0.58      0.46       614
    positive       0.45      0.53      0.48       444
&nbsp;
    accuracy                           0.62      2928
   macro avg       0.55      0.59      0.56      2928
weighted avg       0.68      0.62      0.63      2928
</pre>

<pre>
0.6154371584699454
</pre>

<pre>
[[1210  457  203]
 [ 172  358   84]
 [  82  128  234]]
</pre>

<pre>
[[0.64705882 0.24438503 0.10855615]
 [0.28013029 0.58306189 0.13680782]
 [0.18468468 0.28828829 0.52702703]]
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady využívající knihovnu Scikit-learn lze nalézt
v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady i na (Jupyter) diáře s&nbsp;postupem
výpočtů a analýz:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>01_show_matrix.py</td><td>kooperace mezi knihovnami Matplotlib a NumPy: vizualizace obsahu 2D matice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/01_show_matrix.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/01_show_matrix.py</a></td></tr>
<tr><td> 2</td><td>02_get_digits.py</td><td>datová množina obsahující naskenované ručně napsané číslice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/02_get_digits.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/02_get_digits.py</a></td></tr>
<tr><td> 3</td><td>03_get_features.py</td><td>další atributy datové množiny, které použijeme při trénování</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/03_get_features.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/03_get_features.py</a></td></tr>
<tr><td> 4</td><td>04_get_images.py</td><td>přečtení a následné vykreslení jednotlivých ručně nakreslených číslic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/04_get_images.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/04_get_images.py</a></td></tr>
<tr><td> 5</td><td>05_show_grayscale_matrix.py</td><td>odstranění umělé aplikované barvové palety (obrázky ve stupních šedi)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/05_show_grayscale_matrix.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/05_show_grayscale_matrix.py</a></td></tr>
<tr><td> 6</td><td>06_grayscale_images.py</td><td>vykreslení ručně nakreslených číslic ve formě obrázků ve stupních šedi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/06_grayscale_images.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/06_grayscale_images.py</a></td></tr>
<tr><td> 7</td><td>07_multiplot.py</td><td>rozdělení plochy grafu do oblastí; vykreslení více obrázků do jediného grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/07_multiplot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/07_multiplot.py</a></td></tr>
<tr><td> 8</td><td>08_model_preperation_1.py</td><td>obrázky s&nbsp;jejich ohodnocením</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/08_model_preperation_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/08_model_preperation_1.py</a></td></tr>
<tr><td> 9</td><td>09_training_set.py</td><td>příprava dat pro trénink</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/09_training_set.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/09_training_set.py</a></td></tr>
<tr><td>10</td><td>10_classification.py</td><td>klasifikace obrázků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/10_classification.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/10_classification.py</a></td></tr>
<tr><td>11</td><td>11_results.py</td><td>vykreslení obrázků společně s&nbsp;jejich klasifikací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/11_results.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/11_results.py</a></td></tr>
<tr><td>12</td><td>12_change_training_set.py</td><td>změna poměru rozdělení dat na tréninkovou a testovací množinu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/12_change_training_set.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/12_change_training_set.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>13_blobs.py</td><td>použití funkce <strong>make_blobs</strong> pro vygenerování sady bodů v&nbsp;rovině sdružených do oblastí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/13_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/13_blobs.py</a></td></tr>
<tr><td>14</td><td>14_swap_coords.py</td><td>úprava předchozího příkladu: prohození souřadnic na osách</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/14_swap_coords.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/14_swap_coords.py</a></td></tr>
<tr><td>15</td><td>15_blobs_scatter_plot.py</td><td>základní podoba bodového diagramu (<i>scatter plot</i>)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/15_blobs_scatter_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/15_blobs_scatter_plot.py</a></td></tr>
<tr><td>16</td><td>16_blobs_scatter_plot.py</td><td>úprava bodového diagramu při zobrazení většího množství bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/16_blobs_scatter_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/16_blobs_scatter_plot.py</a></td></tr>
<tr><td>17</td><td>17_colorized_blobs.py</td><td>obarvení bodů podle oblastí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/17_colorized_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/17_colorized_blobs.py</a></td></tr>
<tr><td>18</td><td>18_k-means.py</td><td>základní použití algoritmu K-means pro clustering</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/18_k-means.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/18_k-means.py</a></td></tr>
<tr><td>19</td><td>19_combination.py</td><td>zobrazení centroidů společně s&nbsp;původními body</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/19_combination.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/19_combination.py</a></td></tr>
<tr><td>20</td><td>20_combinations.py</td><td>vizualizace clusteringu původní množiny bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/20_combinations.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/20_combinations.py</a></td></tr>
<tr><td>21</td><td>21_other_settings.py</td><td>vizualizace clusteringu původní množiny bodů pro odlišnou množinu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/21_other_settings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/21_other_settings.py</a></td></tr>
<tr><td>22</td><td>22_random_points.py</td><td>clustering pro náhodná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/22_random_points.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/22_random_points.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>23_circles.py</td><td>pseudonáhodné rozmístění bodů do kružnic, menší náhodnost výsledku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/23_circles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/23_circles.py</a></td></tr>
<tr><td>24</td><td>24_more_noise_circles.py</td><td>pseudonáhodné rozmístění bodů do kružnic, větší náhodnost výsledku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/24_more_noise_circles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/24_more_noise_circles.py</a></td></tr>
<tr><td>25</td><td>25_moons.py</td><td>pseudonáhodné rozmístění bodů do tvaru dvou půlměsíců, menší náhodnost</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/25_moons.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/25_moons.py</a></td></tr>
<tr><td>26</td><td>26_more_noisy_moons.py</td><td>pseudonáhodné rozmístění bodů do tvaru dvou půlměsíců, větší náhodnost</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/26_more_noisy_moons.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/26_more_noisy_moons.py</a></td></tr>
<tr><td>27</td><td>27_circles_kmeans.py</td><td>výsledek clusteringu provedeného algoritmem K-means na &bdquo;kružnice&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/27_circles_kmeans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/27_circles_kmeans.py</a></td></tr>
<tr><td>28</td><td>28_moons_kmeans.py</td><td>výsledek clusteringu provedeného algoritmem K-means na &bdquo;půlměsíce&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/28_moons_kmeans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/28_moons_kmeans.py</a></td></tr>
<tr><td>29</td><td>29_blobs_spectral_clustering.py</td><td>spectral clustering pro body rozmístěné pomocí <strong>make_blobs</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/29_blobs_spectral_clustering.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/29_blobs_spectral_clustering.py</a></td></tr>
<tr><td>30</td><td>30_circles_spectral_clustering.py</td><td>spectral clustering pro body rozmístěné do kružnic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/30_circles_spectral_clustering.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/30_circles_spectral_clustering.py</a></td></tr>
<tr><td>31</td><td>31_moons_spectral_clustering.py</td><td>spectral clustering pro body rozmístěné do půlměsíců </td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/31_moons_spectral_clustering.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/31_moons_spectral_clustering.py</a></td></tr>
<tr><td>32</td><td>32_moons_spectral_clustering_limits.py</td><td>vyhledání limitů algoritmu spectral clustering</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/32_moons_spectral_clustering_limits.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/32_moons_spectral_clustering_limits.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>33_particles_load.py</td><td>načtení souřadnic částic uložených v&nbsp;souboru formátu CSV</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/33_particles_load.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/33_particles_load.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>34</td><td>34_lorenz_attractor.py</td><td>zobrazení Lorenzova atraktoru formou bodů propojených úsečkami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/34_lorenz_attractor.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/34_lorenz_attractor.py</a></td></tr>
<tr><td>35</td><td>35_lorenz_attractor_points.py</td><td>Lorenzův atraktor vykreslený formou jednotlivých bodů s&nbsp;definovaným stylem zobrazení a velikostí stopy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/35_lorenz_attractor_points.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/35_lorenz_attractor_points.py</a></td></tr>
<tr><td>36</td><td>36_blobs_3d.py</td><td>vygenerování a zobrazení sady bodů v&nbsp;3D prostoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/36_blobs_3d.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/36_blobs_3d.py</a></td></tr>
<tr><td>37</td><td>37_spread_blobs_3d.py</td><td>vygenerování a zobrazení sady bodů v&nbsp;3D prostoru, odlišné parametry při generování</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/37_spread_blobs_3d.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/37_spread_blobs_3d.py</a></td></tr>
<tr><td>38</td><td>38_views.py</td><td>různé pohledy na 3D graf</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/38_views.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/38_views.py</a></td></tr>
<tr><td>39</td><td>39_colorized_3d_blobs.py</td><td>obarvení bodů v&nbsp;prostoru na základě vstupních dat</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/39_colorized_3d_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/39_colorized_3d_blobs.py</a></td></tr>
<tr><td>40</td><td>40_kmeans_3d_blobs.py</td><td>shluková analýza v&nbsp;3D prostoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/40_kmeans_3d_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/40_kmeans_3d_blobs.py</a></td></tr>
<tr><td>41</td><td>41_kmeans_spread_3d_blobs.py</td><td>shluková analýza v&nbsp;3D prostoru pro odlišnou množinu bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/41_kmeans_spread_3d_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/41_kmeans_spread_3d_blobs.py</a></td></tr>
<tr><td>42</td><td>42_kmeans_random_3d.py</td><td>shluková analýza pro body rozmístěné zcela náhodně v&nbsp;omezeném prostoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/42_kmeans_random_3d.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/42_kmeans_random_3d.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>43_speed_measurements.py</td><td>benchmark pro postupně rostoucí počet bodů tvořících shluky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/43_speed_measurements.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/43_speed_measurements.py</a></td></tr>
<tr><td>44</td><td>44_speed_measurements.py</td><td>benchmark pro postupně rostoucí počet bodů rozmístěných náhodně</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/44_speed_measurements.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/44_speed_measurements.py</a></td></tr>
<tr><td>45</td><td>45_speed_measurements.py</td><td>benchmark pro stále stejný počet bodů, u jejichž rozmístění v&nbsp;prostoru se používá stále větší směrodatná odchylka</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/45_speed_measurements.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/45_speed_measurements.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>46</td><td>46_iris_dataset.py</td><td>načtení datové kolekce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/46_iris_dataset.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/46_iris_dataset.py</a></td></tr>
<tr><td>47</td><td>47_iris_description.py</td><td>metadata o datové kolekci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/47_iris_description.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/47_iris_description.py</a></td></tr>
<tr><td>48</td><td>48_iris_data.py</td><td>tvar dat &ndash; počet záznamů a počet proměnných</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/48_iris_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/48_iris_data.py</a></td></tr>
<tr><td>49</td><td>49_iris_targets.py</td><td>jména atributů, vztah mezi numerickou hodnotou atributu a jeho jménem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/49_iris_targets.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/49_iris_targets.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>50_iris_scatter_plot_1.py</td><td>korelační diagram pro dvojici vybraných proměnných</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/50_iris_scatter_plot_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/50_iris_scatter_plot_1.py</a></td></tr>
<tr><td>51</td><td>51_iris_scatter_plot_2.py</td><td>příprava pro tvorbu složitějších grafů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/51_iris_scatter_plot_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/51_iris_scatter_plot_2.py</a></td></tr>
<tr><td>52</td><td>52_iris_mutliplot.py</td><td>mřížka obsahující více korelačních diagramů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/52_iris_mutliplot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/52_iris_mutliplot.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>53</td><td>53_iris_histograms.py</td><td>zobrazení základního histogramu pro data v&nbsp;sadě Iris</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/53_iris_histograms.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/53_iris_histograms.py</a></td></tr>
<tr><td>54</td><td>54_iris_histograms.py</td><td>úprava histogramu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/54_iris_histograms.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/54_iris_histograms.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>55</td><td>55_pca.py</td><td>analýza hlavních komponent (PCA), výsledek zobrazený v&nbsp;2D grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/55_pca.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/55_pca.py</a></td></tr>
<tr><td>56</td><td>56_pca_3d.py</td><td>analýza hlavních komponent (PCA), výsledek zobrazený v&nbsp;3D grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/56_pca_3d.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/56_pca_3d.py</a></td></tr>
<tr><td>57</td><td>57_kmeans.py</td><td>základní shluková analýza</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/57_kmeans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/57_kmeans.py</a></td></tr>
<tr><td>58</td><td>58_multiple_kmeans.py</td><td>větší množství výsledků shlukové analýzy pro různé atributy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/58_multiple_kmeans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/58_multiple_kmeans.py</a></td></tr>
<tr><td>59</td><td>59_kmeans_errors.py</td><td>korektní a nekorektní výsledky základní shlukové analýzy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/59_kmeans_errors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/59_kmeans_errors.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>60</td><td>60_basic_classifier.py</td><td>aplikace jednoduchého modelu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/60_basic_classifier.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/60_basic_classifier.py</a></td></tr>
<tr><td>61</td><td>61_changed_model_parameters.py</td><td>změna parametrů modelu pro zjištění druhů rostil</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/61_changed_model_parameters.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/61_changed_model_parameters.py</a></td></tr>
<tr><td>62</td><td>62_different_model.py</td><td>použití odlišného modelu pro zjištění druhů rostlin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/62_different_model.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/62_different_model.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>63</td><td>63_verify_on_whole_data_1.py</td><td>otestování naučeného modelu s&nbsp;využitím tréninkových dat</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/63_verify_on_whole_data_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/63_verify_on_whole_data_1.py</a></td></tr>
<tr><td>64</td><td>64_verify_on_whole_data_2.py</td><td>využití funkce <strong>metrics.accuracy_score</strong> pro zjištění kvality modelu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/64_verify_on_whole_data_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/64_verify_on_whole_data_2.py</a></td></tr>
<tr><td>65</td><td>65_basic_comparison.py</td><td>porovnání vlastností různých modelů (prozatím nekorektní řešení)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/65_basic_comparison.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/65_basic_comparison.py</a></td></tr>
<tr><td>66</td><td>66_training_testing_split_1.py</td><td>rozdělení datové sady na trénovací data a testovací data (základní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/66_training_testing_split_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/66_training_testing_split_1.py</a></td></tr>
<tr><td>67</td><td>67_training_testing_split_2.py</td><td>rozdělení datové sady na trénovací data a testovací data (náhodné rozdělení sady)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/67_training_testing_split_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/67_training_testing_split_2.py</a></td></tr>
<tr><td>68</td><td>68_training_testing_split_3.py</td><td>rozdělení datové sady na trénovací data a testovací data (využití vestavěné funkce)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/68_training_testing_split_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/68_training_testing_split_3.py</a></td></tr>
<tr><td>69</td><td>69_better_comparison.py</td><td>vylepšené porovnání vlastností různých modelů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/69_better_comparison.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/69_better_comparison.py</a></td></tr>
<tr><td>70</td><td>70_multiple_runs.py</td><td>vliv generátoru náhodných čísel na změřené výsledky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/70_multiple_runs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/70_multiple_runs.py</a></td></tr>
<tr><td>71</td><td>71_stable_multiple_runs.py</td><td>generátor náhodných čísel a použití hodnoty <strong>random_state</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/71_stable_multiple_runs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/71_stable_multiple_runs.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>72</td><td>72_housings_dataset.py</td><td>načtení datové sady <i>California housings</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/72_housings_dataset.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/72_housings_dataset.py</a></td></tr>
<tr><td>73</td><td>73_housings_dataset_description.py</td><td>metainformace o datové sadě <i>California housings</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/73_housings_dataset_description.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/73_housings_dataset_description.py</a></td></tr>
<tr><td>74</td><td>74_housings_data.py</td><td>n-rozměrné pole s&nbsp;atributy jednotlivých domů/bloků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/74_housings_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/74_housings_data.py</a></td></tr>
<tr><td>75</td><td>75_housings_targets.py</td><td>jména atributů, ceny domů atd.</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/75_housings_targets.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/75_housings_targets.py</a></td></tr>
<tr><td>76</td><td>76_housings_scatter_plot.py</td><td>korelační diagram pro dvojici vybraných proměnných</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/76_housings_scatter_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/76_housings_scatter_plot.py</a></td></tr>
<tr><td>77</td><td>77_housings_mutliplot.py</td><td>korelační diagram pro všechny kombinace dvojic proměnných</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/77_housings_mutliplot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/77_housings_mutliplot.py</a></td></tr>
<tr><td>78</td><td>78_scatter.py</td><td>dvourozměrné hodnoty reprezentované jako dvojice atributů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/78_scatter.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/78_scatter.py</a></td></tr>
<tr><td>79</td><td>79_linear_regression_gen_data.py</td><td>model <i>LinearRegression</i> nad uměle vytvořenými daty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/79_linear_regression_gen_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/79_linear_regression_gen_data.py</a></td></tr>
<tr><td>80</td><td>80_linear_regression_predictions.py</td><td>predikce modelu provádějícího lineární regresi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/80_linear_regression_predictions.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/80_linear_regression_predictions.py</a></td></tr>
<tr><td>81</td><td>81_linear_regression_random_data.py</td><td>chování modelu pro zcela náhodná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/81_linear_regression_random_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/81_linear_regression_random_data.py</a></td></tr>
<tr><td>82</td><td>82_linear_regression_housings.py</td><td>model <i>LinearRegression</i> pro datovou sadu <i>California housings</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/82_linear_regression_housings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/82_linear_regression_housings.py</a></td></tr>
<tr><td>83</td><td>83_polynomial_regression_gen_data.py</td><td>polynomiální regrese (základní příklad)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/83_polynomial_regression_gen_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/83_polynomial_regression_gen_data.py</a></td></tr>
<tr><td>84</td><td>84_polynomial_regression_housings.py</td><td>polynomiální regrese a datová sada <i>California housings</i>, první příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/84_polynomial_regression_housings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/84_polynomial_regression_housings.py</a></td></tr>
<tr><td>85</td><td>85_polynomial_regression_housings_2.py</td><td>polynomiální regrese a datová sada <i>California housings</i>, druhý příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/85_polynomial_regression_housings_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/85_polynomial_regression_housings_2.py</a></td></tr>
<tr><td>86</td><td>86_polynomial_regression_housings_3.py</td><td>polynomiální regrese a datová sada <i>California housings</i>, třetí příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/86_polynomial_regression_housings_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/86_polynomial_regression_housings_3.py</a></td></tr>
<tr><td>87</td><td>87_linear_regression_errors.py</td><td>výpočet chyby a skóre modelu lineární regrese</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/87_linear_regression_errors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/87_linear_regression_errors.py</a></td></tr>
<tr><td>88</td><td>88_linear_regression_non_linear_data.py</td><td>lineární regrese nad nelineárními daty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/88_linear_regression_non_linear_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/88_linear_regression_non_linear_data.py</a></td></tr>
<tr><td>89</td><td>89_polynomial_regression_error.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/89_polynomial_regression_error.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/89_polynomial_regression_error.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>90</td><td>90_housings_prediction_1.py</td><td>regresní analýza nad daty <i>California housings</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/90_housings_prediction_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/90_housings_prediction_1.py</a></td></tr>
<tr><td>91</td><td>91_housings_prediction_2.py</td><td>korektní natrénování modelu pro regresi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/91_housings_prediction_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/91_housings_prediction_2.py</a></td></tr>
<tr><td>92</td><td>92_housings_prediction_3.py</td><td>omezení množství atributů (proměnných), na kterých je model natrénován</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/92_housings_prediction_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/92_housings_prediction_3.py</a></td></tr>
<tr><td>93</td><td>93_housings_prediction_errors_1.py</td><td>chybně natrénovaný model při náhodné volbě dat</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/93_housings_prediction_errors_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/93_housings_prediction_errors_1.py</a></td></tr>
<tr><td>94</td><td>94_housings_prediction_errors_2.py</td><td>omezení atributů + chybně natrénovaný model</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/94_housings_prediction_errors_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/94_housings_prediction_errors_2.py</a></td></tr>
<tr><td>95</td><td>95_housings_histograms.py</td><td>histogramy pro jednotlivé atributy (proměnné)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/95_housings_histograms.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/95_housings_histograms.py</a></td></tr>
<tr><td>96</td><td>96_housings_statistic.py</td><td>statistické údaje pro jednotlivé atributy (proměnné)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/96_housings_statistic.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/96_housings_statistic.py</a></td></tr>
<tr><td>97</td><td>97_housings_statistic_normalized.py</td><td>statistické údaje získané po normalizaci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/97_housings_statistic_normalized.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/97_housings_statistic_normalized.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 98</td><td>98_k_fold_help.py</td><td>zobrazení nápovědy ke třídě s&nbsp;realizací k-foldingu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/98_k_fold_help.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/98_k_fold_help.py</a></td></tr>
<tr><td> 99</td><td>99_k_fold_old.py</td><td>původní (nepodporovaná) varianta provedení k-foldingu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/99_k_fold_old.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/99_k_fold_old.py</a></td></tr>
<tr><td>100</td><td>100_k_fold_1.py</td><td>interní chování algoritmu k-foldingu (základní parametry)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/100_k_fold_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/100_k_fold_1.py</a></td></tr>
<tr><td>101</td><td>101_k_fold_2.py</td><td>interní chování algoritmu k-foldingu (odlišné parametry)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/101_k_fold_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/101_k_fold_2.py</a></td></tr>
<tr><td>102</td><td>102_k_fold_selection.py</td><td>k-folding a výběr dat pro otestování modelů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/102_k_fold_selection.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/102_k_fold_selection.py</a></td></tr>
<tr><td>103</td><td>103_average_score.py</td><td>realizace výpočtu průměrného skóre pro otestování modelů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/103_average_score.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/103_average_score.py</a></td></tr>
<tr><td>104</td><td>104_hyperparams_score.py</td><td>změna hyperparametrů s&nbsp;výpočtem průměrného skóre (tabulka)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/104_hyperparams_score.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/104_hyperparams_score.py</a></td></tr>
<tr><td>105</td><td>105_hyperparams_score_plot.py</td><td>změna hyperparametrů s&nbsp;výpočtem průměrného skóre (graf)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/105_hyperparams_score_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/105_hyperparams_score_plot.py</a></td></tr>
<tr><td>106</td><td>106_model_selection.py</td><td>výběr nejlepšího modelu s&nbsp;využitím k-foldingu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/106_model_selection.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/106_model_selection.py</a></td></tr>
<tr><td>107</td><td>107_features_selection_basic.py</td><td>výběr atributů (proměnných) pro trénink modelu (základní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/107_features_selection_basic.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/107_features_selection_basic.py</a></td></tr>
<tr><td>108</td><td>108_features_selection_iris.py</td><td>výběr atributů (proměnných) pro trénink modelu (datová sada Iris)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/108_features_selection_iris.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/108_features_selection_iris.py</a></td></tr>
<tr><td>109</td><td>109_features_selection_houses.py</td><td>výběr atributů (proměnných) pro trénink modelu (datová sada California Housings)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/109_features_selection_houses.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/109_features_selection_houses.py</a></td></tr>
<tr><td>110</td><td>110_best_features_selection_houses.py</td><td>získání nejlepší sady atributů (proměnných)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/110_best_features_selection_houses.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/110_best_features_selection_houses.py</a></td></tr>
<tr><td>111</td><td>111_features_selection_graphical.py</td><td>výběr atributů (proměnných) pro trénink modelu (datová sada Iris), grafický výstup</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/111_features_selection_graphical.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/111_features_selection_graphical.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>112</td><td>112_simplest_linear_regression.py</td><td>lineární regrese bodů ležících v&nbsp;rovině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/112_simplest_linear_regression.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/112_simplest_linear_regression.py</a></td></tr>
<tr><td>113</td><td>113_linear_regression_no_intercept.py</td><td>lineární regrese při vynucení <i>w<sub>0</sub>=0</i> pro obecná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/113_linear_regression_no_intercept.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/113_linear_regression_no_intercept.py</a></td></tr>
<tr><td>114</td><td>114_linear_regression_from_0_0.py</td><td>lineární regrese při vynucení <i>w<sub>0</sub>=0</i> v&nbsp;případě, že vstupní body obsahují počátek souřadného systému</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/114_linear_regression_from_0_0.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/114_linear_regression_from_0_0.py</a></td></tr>
<tr><td>115</td><td>115_linear_regression_multiple_y.py</td><td>model předpovídající pro každou vstupní hodnotu dvě výstupní hodnoty (odpovědi)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/115_linear_regression_multiple_y.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/115_linear_regression_multiple_y.py</a></td></tr>
<tr><td>116</td><td>116_grid_operations.py</td><td>konstrukce matice obsahující souřadnice bodů v&nbsp;mřížce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/116_grid_operations.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/116_grid_operations.py</a></td></tr>
<tr><td>117</td><td>117_linear_regression_multiple_x.py</td><td>proložení bodů v&nbsp;prostoru rovinou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/117_linear_regression_multiple_x.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/117_linear_regression_multiple_x.py</a></td></tr>
<tr><td>118</td><td>118_linear_regression_multiple_x.py</td><td>proložení bodů s&nbsp;náhodnou výškou rovinou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/118_linear_regression_multiple_x.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/118_linear_regression_multiple_x.py</a></td></tr>
<tr><td>119</td><td>119_linear_regression_multiple_x_and_y.py</td><td>proložení dvou sad bodů dvojicí rovin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/119_linear_regression_multiple_x_and_y.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/119_linear_regression_multiple_x_and_y.py</a></td></tr>
<tr><td>120</td><td>120_linear_regression_multiple_x_and_y.py</td><td>proložení dvou sad bodů dvojicí rovin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/120_linear_regression_multiple_x_and_y.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/120_linear_regression_multiple_x_and_y.py</a></td></tr>
<tr><td>121</td><td>121_linear_regression_poly.py</td><td>základní polynomická regrese</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/121_linear_regression_poly.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/121_linear_regression_poly.py</a></td></tr>
<tr><td>122</td><td>122_linear_regression_poly_multiple_x.py</td><td>polynomická regrese a body v&nbsp;prostoru, první příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/122_linear_regression_poly_multiple_x.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/122_linear_regression_poly_multiple_x.py</a></td></tr>
<tr><td>123</td><td>123_linear_regression_poly_multiple_x.py</td><td>polynomická regrese a body v&nbsp;prostoru, druhý příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/123_linear_regression_poly_multiple_x.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/123_linear_regression_poly_multiple_x.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>124</td><td>124_iris_set_statistic.py</td><td>získání statistických informací o datové sadě <i>Iris</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/124_iris_set_statistic.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/124_iris_set_statistic.py</a></td></tr>
<tr><td>125</td><td>125_california_housings_statistic.py</td><td>získání statistických informací o datové sadě <i>California Housings</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/125_california_housings_statistic.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/125_california_housings_statistic.py</a></td></tr>
<tr><td>126</td><td>126_variance_threshold_1.py</td><td>výběr atributů pro trénink modelu pomocí <strong>VarianceThreshold</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/126_variance_threshold_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/126_variance_threshold_1.py</a></td></tr>
<tr><td>127</td><td>127_variance_threshold_2.py</td><td>výběr atributů pro trénink modelu pomocí <strong>VarianceThreshold</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/127_variance_threshold_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/127_variance_threshold_2.py</a></td></tr>
<tr><td>128</td><td>128_variance_threshold_3.py</td><td>výběr atributů pro trénink modelu pomocí <strong>VarianceThreshold</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/128_variance_threshold_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/128_variance_threshold_3.py</a></td></tr>
<tr><td>129</td><td>129_select_best_iris.py</td><td>výběr nejvhodnějších atributů pro datovou sadu <i>Iris</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/129_select_best_iris.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/129_select_best_iris.py</a></td></tr>
<tr><td>130</td><td>130_select_best_housings.py</td><td>výběr nejvhodnějších atributů pro datovou sadu <i>California Housings</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/130_select_best_housings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/130_select_best_housings.py</a></td></tr>
<tr><td>131</td><td>131_select_k_best_housings.py</td><td>výběr K nejvhodnějších atributů pro datovou sadu <i>California Housings</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/131_select_k_best_housings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/131_select_k_best_housings.py</a></td></tr>
<tr><td>132</td><td>132_select_from_model.py</td><td>výběr atributů na základě k&nbsp;tomu určeného modelu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/132_select_from_model.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/132_select_from_model.py</a></td></tr>
<tr><td>133</td><td>133_cross_validation_1.py</td><td>křížová validace po výběru (filtraci) modelů (datová sada <i>Iris</i>)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/133_cross_validation_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/133_cross_validation_1.py</a></td></tr>
<tr><td>134</td><td>134_cross_validation_2.py</td><td>křížová validace po výběru (filtraci) modelů (datová sada <i>California Housings</i>)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/134_cross_validation_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/134_cross_validation_2.py</a></td></tr>
<tr><td>135</td><td>135_cross_validation_3.py</td><td>křížová validace po výběru (filtraci) modelů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/135_cross_validation_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/135_cross_validation_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>136</td><td>136_mlp_classifier_01.py</td><td>použití neuronové sítě pro klasifikaci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/136_mlp_classifier_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/136_mlp_classifier_01.py</a></td></tr>
<tr><td>137</td><td>137_mlp_classifier_02.py</td><td>výpočet úspěšnosti modelu založeného na neuronové síti</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/137_mlp_classifier_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/137_mlp_classifier_02.py</a></td></tr>
<tr><td>138</td><td>138_mlp_classifier_03.py</td><td>konfigurace vrstev neuronové sítě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/138_mlp_classifier_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/138_mlp_classifier_03.py</a></td></tr>
<tr><td>139</td><td>139_mlp_classifier_04.py</td><td>proměnný počet neuronů ve vrstvách neuronové sítě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/139_mlp_classifier_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/139_mlp_classifier_04.py</a></td></tr>
<tr><td>140</td><td>140_mlp_classifier_05.py</td><td>proměnný počet neuronů ve více vrstvách neuronové sítě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/140_mlp_classifier_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/140_mlp_classifier_05.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>141</td><td>141_mlp_regression_1.py</td><td>použití neuronové sítě pro regresi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/141_mlp_regression_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/141_mlp_regression_1.py</a></td></tr>
<tr><td>142</td><td>142_mlp_regression_2.py</td><td>modifikace parametrů neuronové sítě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/142_mlp_regression_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/142_mlp_regression_2.py</a></td></tr>
<tr><td>143</td><td>143_mlp_regression_2.py</td><td>další modifikace parametrů neuronové sítě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/143_mlp_regression_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/143_mlp_regression_2.py</a></td></tr>
<tr><td>144</td><td>144_mlp_regression_3.py</td><td>postupná změna počtu neuronů v&nbsp;jedné skryté vrstvě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/144_mlp_regression_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/144_mlp_regression_3.py</a></td></tr>
<tr><td>145</td><td>145_mlp_regression_4.py</td><td>postupná změna počtu neuronů ve třech skrytých vrstvách</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/145_mlp_regression_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/145_mlp_regression_4.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Python for NLP: Sentiment Analysis with Scikit-Learn<br />
<a href="https://stackabuse.com/python-for-nlp-sentiment-analysis-with-scikit-learn/">https://stackabuse.com/python-for-nlp-sentiment-analysis-with-scikit-learn/</a>
</li>

<li>Datová sada - hodnocení leteckých dopravců<br />
<a href="https://raw.githubusercontent.com/satyajeetkrjha/kaggle-Twitter-US-Airline-Sentiment-/refs/heads/master/Tweets.csv">https://raw.githubusercontent.com/satyajeetkrjha/kaggle-Twitter-US-Airline-Sentiment-/refs/heads/master/Tweets.csv</a>
</li>

<li>Twitter_US_Airline_Sentiment_Analysis <br />
<a href="https://github.com/rustagijanvi/Twitter_US_Airline_Sentiment_Analysis/tree/main">https://github.com/rustagijanvi/Twitter_US_Airline_Sentiment_Analysis/tree/main</a>
</li>

<li>Shluková analýza (clustering) a knihovna Scikit-learn<br />
<a href="https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn/">https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn/</a>
</li>

<li>Shluková analýza (clustering) a knihovna Scikit-learn (2)<br />
<a href="https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-2/">https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-2/</a>
</li>

<li>Shluková analýza (clustering) a knihovna Scikit-learn (z plochy do 3D prostoru)<br />
<a href="https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-z-plochy-do-3d-prostoru/">https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-z-plochy-do-3d-prostoru/</a>
</li>

<li>Rozpoznávání obrázků knihovnou Scikit-learn: první kroky<br />
<a href="https://www.root.cz/clanky/rozpoznavani-obrazku-knihovnou-scikit-learn-prvni-kroky/">https://www.root.cz/clanky/rozpoznavani-obrazku-knihovnou-scikit-learn-prvni-kroky/</a>
</li>

<li>scikit-learn: Machine Learning in Python<br />
<a href="https://scikit-learn.org/stable/index.html">https://scikit-learn.org/stable/index.html</a>
</li>

<li>Sklearn-pandas<br />
<a href="https://github.com/scikit-learn-contrib/sklearn-pandas">https://github.com/scikit-learn-contrib/sklearn-pandas</a>
</li>

<li>sklearn-xarray<br />
<a href="https://github.com/phausamann/sklearn-xarray/">https://github.com/phausamann/sklearn-xarray/</a>
</li>

<li>Clustering<br />
<a href="https://scikit-learn.org/stable/modules/clustering.html">https://scikit-learn.org/stable/modules/clustering.html</a>
</li>

<li>Cluster analysis (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Cluster_analysis">https://en.wikipedia.org/wiki/Cluster_analysis</a>
</li>

<li>Shluková analýza (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Shlukov%C3%A1_anal%C3%BDza">https://cs.wikipedia.org/wiki/Shlukov%C3%A1_anal%C3%BDza</a>
</li>

<li>K-means<br />
<a href="https://cs.wikipedia.org/wiki/K-means">https://cs.wikipedia.org/wiki/K-means</a>
</li>

<li>k-means clustering<br />
<a href="https://en.wikipedia.org/wiki/K-means_clustering">https://en.wikipedia.org/wiki/K-means_clustering</a>
</li>

<li>Spectral clustering<br />
<a href="https://en.wikipedia.org/wiki/Spectral_clustering">https://en.wikipedia.org/wiki/Spectral_clustering</a>
</li>

<li>Emergence<br />
<a href="https://cs.wikipedia.org/wiki/Emergence">https://cs.wikipedia.org/wiki/Emergence</a>
</li>

<li>Particle Life: Vivid structures from rudimentary rules<br />
<a href="https://particle-life.com/">https://particle-life.com/</a>
</li>

<li>Hertzsprungův–Russellův diagram<br />
<a href="https://cs.wikipedia.org/wiki/Hertzsprung%C5%AFv%E2%80%93Russell%C5%AFv_diagram">https://cs.wikipedia.org/wiki/Hertzsprung%C5%AFv%E2%80%93Russell%C5%AFv_diagram</a>
</li>

<li>Using Machine Learning in an HR Diagram<br />
<a href="https://cocalc.com/share/public_paths/08b6e03583cbdef3cdb9813a54ec68ff773c747f">https://cocalc.com/share/public_paths/08b6e03583cbdef3cdb9813a54ec68ff773c747f</a>
</li>

<li>Gaia H-R diagrams: Querying Gaia data for one million nearby stars<br />
<a href="https://vlas.dev/post/gaia-dr2-hrd/">https://vlas.dev/post/gaia-dr2-hrd/</a>
</li>

<li>The Hertzsprung–Russell diagram<br />
<a href="https://scipython.com/book2/chapter-9-data-analysis-with-pandas/problems/p92/the-hertzsprung-russell-diagram/">https://scipython.com/book2/chapter-9-data-analysis-with-pandas/problems/p92/the-hertzsprung-russell-diagram/</a>
</li>

<li>Animated Hertzsprung-Russell Diagram with 119,614 datapoints<br />
<a href="https://github.com/zonination/h-r-diagram">https://github.com/zonination/h-r-diagram</a>
</li>

<li>Neuraxle Pipelines<br />
<a href="https://github.com/Neuraxio/Neuraxle">https://github.com/Neuraxio/Neuraxle</a>
</li>

<li>scikit-learn: Getting Started<br />
<a href="https://scikit-learn.org/stable/getting_started.html">https://scikit-learn.org/stable/getting_started.html</a>
</li>

<li>Support Vector Machines<br />
<a href="https://scikit-learn.org/stable/modules/svm.html">https://scikit-learn.org/stable/modules/svm.html</a>
</li>

<li>Use Deep Learning to Detect Programming Languages<br />
<a href="http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/">http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/</a>
</li>

<li>Natural-language processing<br />
<a href="https://en.wikipedia.org/wiki/Natural-language_processing">https://en.wikipedia.org/wiki/Natural-language_processing</a>
</li>

<li>THE MNIST DATABASE of handwritten digits<br />
<a href="http://yann.lecun.com/exdb/mnist/">http://yann.lecun.com/exdb/mnist/</a>
</li>

<li>MNIST database (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MNIST_database">https://en.wikipedia.org/wiki/MNIST_database</a>
</li>

<li>MNIST For ML Beginners<br />
<a href="https://www.tensorflow.org/get_started/mnist/beginners">https://www.tensorflow.org/get_started/mnist/beginners</a>
</li>

<li>Stránka projektu Torch<br />
<a href="http://torch.ch/">http://torch.ch/</a>
</li>

<li>Torch: Serialization<br />
<a href="https://github.com/torch/torch7/blob/master/doc/serialization.md">https://github.com/torch/torch7/blob/master/doc/serialization.md</a>
</li>

<li>Torch: modul image<br />
<a href="https://github.com/torch/image/blob/master/README.md">https://github.com/torch/image/blob/master/README.md</a>
</li>

<li>Data pro neuronové sítě<br />
<a href="http://archive.ics.uci.edu/ml/index.php">http://archive.ics.uci.edu/ml/index.php</a>
</li>

<li>Torch na GitHubu (několik repositářů)<br />
<a href="https://github.com/torch">https://github.com/torch</a>
</li>

<li>Torch (machine learning), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Torch_%28machine_learning%29">https://en.wikipedia.org/wiki/Torch_%28machine_learning%29</a>
</li>

<li>Torch Package Reference Manual<br />
<a href="https://github.com/torch/torch7/blob/master/README.md">https://github.com/torch/torch7/blob/master/README.md</a>
</li>

<li>Torch Cheatsheet<br />
<a href="https://github.com/torch/torch7/wiki/Cheatsheet">https://github.com/torch/torch7/wiki/Cheatsheet</a>
</li>

<li>Neural network containres (Torch)<br />
<a href="https://github.com/torch/nn/blob/master/doc/containers.md">https://github.com/torch/nn/blob/master/doc/containers.md</a>
</li>

<li>Simple layers<br />
<a href="https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear">https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear</a>
</li>

<li>Transfer Function Layers<br />
<a href="https://github.com/torch/nn/blob/master/doc/transfer.md#nn.transfer.dok">https://github.com/torch/nn/blob/master/doc/transfer.md#nn.transfer.dok</a>
</li>

<li>Feedforward neural network<br />
<a href="https://en.wikipedia.org/wiki/Feedforward_neural_network">https://en.wikipedia.org/wiki/Feedforward_neural_network</a>
</li>

<li>Biologické algoritmy (4) - Neuronové sítě<br />
<a href="https://www.root.cz/clanky/biologicke-algoritmy-4-neuronove-site/">https://www.root.cz/clanky/biologicke-algoritmy-4-neuronove-site/</a>
</li>

<li>Biologické algoritmy (5) - Neuronové sítě<br />
<a href="https://www.root.cz/clanky/biologicke-algoritmy-5-neuronove-site/">https://www.root.cz/clanky/biologicke-algoritmy-5-neuronove-site/</a>
</li>

<li>Umělá neuronová síť (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Um%C4%9Bl%C3%A1_neuronov%C3%A1_s%C3%AD%C5%A5">https://cs.wikipedia.org/wiki/Um%C4%9Bl%C3%A1_neuronov%C3%A1_s%C3%AD%C5%A5</a>
</li>

<li>PyTorch<br />
<a href="http://pytorch.org/">http://pytorch.org/</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>Matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Galerie grafů vytvořených v&nbsp;Matplotlibu<br />
<a href="https://matplotlib.org/3.2.1/gallery/">https://matplotlib.org/3.2.1/gallery/</a>
</li>

<li>3D rendering<br />
<a href="https://en.wikipedia.org/wiki/3D_rendering">https://en.wikipedia.org/wiki/3D_rendering</a>
</li>

<li>3D computer graphics<br />
<a href="https://en.wikipedia.org/wiki/3D_computer_graphics">https://en.wikipedia.org/wiki/3D_computer_graphics</a>
</li>

<li>Primary 3D view planes<br />
<a href="https://matplotlib.org/stable/gallery/mplot3d/view_planes_3d.html">https://matplotlib.org/stable/gallery/mplot3d/view_planes_3d.html</a>
</li>

<li>Getting started in scikit-learn with the famous iris dataset<br />
<a href="https://www.youtube.com/watch?v=hd1W4CyPX58">https://www.youtube.com/watch?v=hd1W4CyPX58</a>
</li>

<li>Training a machine learning model with scikit-learn<br />
<a href="https://www.youtube.com/watch?v=RlQuVL6-qe8">https://www.youtube.com/watch?v=RlQuVL6-qe8</a>
</li>

<li>Iris (plant)<br />
<a href="https://en.wikipedia.org/wiki/Iris_(plant)">https://en.wikipedia.org/wiki/Iris_(plant)</a>
</li>

<li>Kosatec<br />
<a href="https://cs.wikipedia.org/wiki/Kosatec">https://cs.wikipedia.org/wiki/Kosatec</a>
</li>

<li>Iris setosa<br />
<a href="https://en.wikipedia.org/wiki/Iris_setosa">https://en.wikipedia.org/wiki/Iris_setosa</a>
</li>

<li>Iris versicolor<br />
<a href="https://en.wikipedia.org/wiki/Iris_versicolor">https://en.wikipedia.org/wiki/Iris_versicolor</a>
</li>

<li>Iris virginica<br />
<a href="https://en.wikipedia.org/wiki/Iris_virginica">https://en.wikipedia.org/wiki/Iris_virginica</a>
</li>

<li>Druh<br />
<a href="https://cs.wikipedia.org/wiki/Druh">https://cs.wikipedia.org/wiki/Druh</a>
</li>

<li>Iris subg. Limniris<br />
<a href="https://en.wikipedia.org/wiki/Iris_subg._Limniris">https://en.wikipedia.org/wiki/Iris_subg._Limniris</a>
</li>

<li>Iris Dataset Classification with Python: A Tutorial<br />
<a href="https://www.pycodemates.com/2022/05/iris-dataset-classification-with-python.html">https://www.pycodemates.com/2022/05/iris-dataset-classification-with-python.html</a>
</li>

<li>Iris flower data set<br />
<a href="https://en.wikipedia.org/wiki/Iris_flower_data_set">https://en.wikipedia.org/wiki/Iris_flower_data_set</a>
</li>

<li>List of datasets for machine-learning research<br />
<a href="https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research">https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research</a>
</li>

<li>Analýza hlavních komponent<br />
<a href="https://cs.wikipedia.org/wiki/Anal%C3%BDza_hlavn%C3%ADch_komponent">https://cs.wikipedia.org/wiki/Anal%C3%BDza_hlavn%C3%ADch_komponent</a>
</li>

<li>Principal component analysis<br />
<a href="https://en.wikipedia.org/wiki/Principal_component_analysis">https://en.wikipedia.org/wiki/Principal_component_analysis</a>
</li>

<li>Scikit-learn Crash Course - Machine Learning Library for Python<br />
<a href="https://www.youtube.com/watch?v=0B5eIE_1vpU">https://www.youtube.com/watch?v=0B5eIE_1vpU</a>
</li>

<li>calm-notebooks<br />
<a href="https://github.com/koaning/calm-notebooks">https://github.com/koaning/calm-notebooks</a>
</li>

<li>Should you teach Python or R for data science?<br />
<a href="https://www.dataschool.io/python-or-r-for-data-science/">https://www.dataschool.io/python-or-r-for-data-science/</a>
</li>

<li>nbviewer: A simple way to share Jupyter Notebooks<br />
<a href="https://nbviewer.org/">https://nbviewer.org/</a>
</li>

<li>AI vs Machine Learning (Youtube)<br />
<a href="https://www.youtube.com/watch?v=4RixMPF4xis">https://www.youtube.com/watch?v=4RixMPF4xis</a>
</li>

<li>Machine Learning | What Is Machine Learning? | Introduction To Machine Learning | 2024 | Simplilearn (Youtube)<br />
<a href="https://www.youtube.com/watch?v=ukzFI9rgwfU">https://www.youtube.com/watch?v=ukzFI9rgwfU</a>
</li>

<li>A Gentle Introduction to Machine Learning (Youtube)<br />
<a href="https://www.youtube.com/watch?v=Gv9_4yMHFhI">https://www.youtube.com/watch?v=Gv9_4yMHFhI</a>
</li>

<li>Machine Learning vs Deep Learning<br />
<a href="https://www.youtube.com/watch?v=q6kJ71tEYqM">https://www.youtube.com/watch?v=q6kJ71tEYqM</a>
</li>

<li>Umělá inteligence (slajdy)<br />
<a href="https://slideplayer.cz/slide/12119218/">https://slideplayer.cz/slide/12119218/</a>
</li>

<li>Úvod do umělé inteligence<br />
<a href="https://slideplayer.cz/slide/2505525/">https://slideplayer.cz/slide/2505525/</a>
</li>

<li>Umělá inteligence I / Artificial Intelligence I<br />
<a href="https://ktiml.mff.cuni.cz/~bartak/ui/">https://ktiml.mff.cuni.cz/~bartak/ui/</a>
</li>

<li>Matplotlib vs. seaborn vs. Plotly vs. MATLAB vs. ggplot2 vs. pandas<br />
<a href="https://ritza.co/articles/matplotlib-vs-seaborn-vs-plotly-vs-MATLAB-vs-ggplot2-vs-pandas/">https://ritza.co/articles/matplotlib-vs-seaborn-vs-plotly-vs-MATLAB-vs-ggplot2-vs-pandas/</a>
</li>

<li>Matplotlib, Seaborn or Plotnine?<br />
<a href="https://www.reddit.com/r/datascience/comments/jvrqxt/matplotlib_seaborn_or_plotnine/">https://www.reddit.com/r/datascience/comments/jvrqxt/matplotlib_seaborn_or_plotnine/</a>
</li>

<li>@Rabeez: Rabeez/plotting_comparison.ipynb<br />
<a href="https://gist.github.com/Rabeez/ffc0b59d4a41e20fa8d944c44a96adbc">https://gist.github.com/Rabeez/ffc0b59d4a41e20fa8d944c44a96adbc</a>
</li>

<li>Matplotlib, Seaborn, Plotly and Plotnine Comparison<br />
<a href="https://python.plainenglish.io/matplotlib-seaborn-plotly-and-plotnine-comparison-baf2db5a9c40">https://python.plainenglish.io/matplotlib-seaborn-plotly-and-plotnine-comparison-baf2db5a9c40</a>
</li>

<li>Data Visualization 101: How to Choose a Python Plotting Library<br />
<a href="https://towardsdatascience.com/data-visualization-101-how-to-choose-a-python-plotting-library-853460a08a8a">https://towardsdatascience.com/data-visualization-101-how-to-choose-a-python-plotting-library-853460a08a8a</a>
</li>

<li>Data science in Python: pandas, seaborn, scikit-learn<br />
<a href="https://www.youtube.com/watch?v=3ZWuPVWq7p4">https://www.youtube.com/watch?v=3ZWuPVWq7p4</a>
</li>

<li>7.2. Real world datasets<br />
<a href="https://scikit-learn.org/stable/datasets/real_world.html#california-housing-dataset">https://scikit-learn.org/stable/datasets/real_world.html#california-housing-dataset</a>
</li>

<li>7.2.7. California Housing dataset<br />
<a href="https://scikit-learn.org/stable/datasets/real_world.html#california-housing-dataset">https://scikit-learn.org/stable/datasets/real_world.html#california-housing-dataset</a>
</li>

<li>Comprehensive Guide to Classification Models in Scikit-Learn<br />
<a href="https://www.geeksforgeeks.org/comprehensive-guide-to-classification-models-in-scikit-learn/">https://www.geeksforgeeks.org/comprehensive-guide-to-classification-models-in-scikit-learn/</a>
</li>

<li>Tidy Data Visualization: ggplot2 vs seaborn<br />
<a href="https://blog.tidy-intelligence.com/posts/ggplot2-vs-seaborn/">https://blog.tidy-intelligence.com/posts/ggplot2-vs-seaborn/</a>
</li>

<li>seaborn: statistical data visualization<br />
<a href="https://seaborn.pydata.org/">https://seaborn.pydata.org/</a>
</li>

<li>Linear regression (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Linear_regression">https://en.wikipedia.org/wiki/Linear_regression</a>
</li>

<li>Lineární regrese (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Line%C3%A1rn%C3%AD_regrese">https://cs.wikipedia.org/wiki/Line%C3%A1rn%C3%AD_regrese</a>
</li>

<li>Iris Flower Classification with MLP Classifier<br />
<a href="https://www.metriccoders.com/post/iris-flower-classification-with-mlp-classifier">https://www.metriccoders.com/post/iris-flower-classification-with-mlp-classifier</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

