<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Využití knihovny scikit-learn pro zpracování a analýzu přirozeného jazyka (NLP)</a></p>
<p><a href="#k02">2. První kroky: stažení datové sady i seznamů stopslov</a></p>
<p><a href="#k03">3. Načtení datové sady a zjištění základních informací o v&nbsp;ní uložených datech</a></p>
<p><a href="#k04">4. Informace o sloupcích v&nbsp;datovém rámci</a></p>
<p><a href="#k05">5. Statistické informace získané ze sloupců obsahujících numerická data</a></p>
<p><a href="#k06">6. Zjištění počtu tweetů o jednotlivých dopravcích</a></p>
<p><a href="#k07">7. Grafická vizualizace počtu tweetů o jednotlivých dopravcích</a></p>
<p><a href="#k08">8. Zjištění celkové nálady tweetů</a></p>
<p><a href="#k09">9. Vizualizace celkové nálady v&nbsp;koláčovém diagramu</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Využití knihovny scikit-learn pro zpracování a analýzu přirozeného jazyka (NLP)</h2>

<p>V&nbsp;seriálu o <a
href="https://www.root.cz/serialy/datova-analyza-s-vyuzitim-jazyka-python/">datové
analýze s&nbsp;využitím programovacího jazyka Python</a> jsme se již mnohokrát
setkali s&nbsp;knihovnou <i>scikit-learn</i>. Prozatím jsme tuto knihovnu
primárně používali pro zpracování (a popř.&nbsp;pro predikce) numerických dat.
V&nbsp;praxi se dnes ovšem poměrně často setkáme i s&nbsp;nutností práce
s&nbsp;texty psanými v&nbsp;nějakém &bdquo;přirozeném&ldquo; jazyce, čímž jsou
většinou myšleny neumělé jazyky, které se postupně vyvinuly pro potřebu
komunikace mezi lidmi. A právě způsobem zpracování přirozeného jazyka (<i>NLP
&ndash; Natural Language Processing</i>) se budeme zabývat dnes i
v&nbsp;navazujících článcích. Dnes konkrétně si ukážeme, jakým způsobem můžeme
natrénovat model knihovny <i>scikit-learn</i> tak, aby na základě zadaného
tweetu o nějaké aerolince odhadl, jestli se jedná o pozitivní, negativní nebo
neutrální hodnocení. Takovéto zpracování textů je velmi časté (ostatně každý
e-shop popř.&nbsp;další online služby se ptají na zpětnou vazbu) a nazývá se
<i>sentiment analysis</i>.</p>

<p><div class="rs-tip-major">Poznámka: dnešní článek je do značné míry
inspirován článkem <a
href="https://stackabuse.com/python-for-nlp-sentiment-analysis-with-scikit-learn/">Python
for NLP: Sentiment Analysis with Scikit-Learn</a>, ovšem některé postupy jsem
se snažil rozšířit, vylepšit či zjednodušit.</div></p>

<p>Mezi knihovny, které dnes použijeme, patří <i>scikit-learn</i>,
<i>Pandas</i>, <i>NumPy</i>, <i>Matplotlib</i> a částečně též <i>NLTK</i>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. První kroky: stažení datové sady i seznamů stopslov</h2>

<p>Nejprve musíme získat datovou sadu s&nbsp;tweety, které hodnotí jednotlivé
aerolinky a kterou můžeme použít pro trénink modelu. Jedná se o známou datovou
sadu, která je dostupná mj.&nbsp;i na Gitu. Stáhnout ji můžete interaktivně
(přes browser), nástrojem <strong>wget</strong> nebo tímto skriptem napsaný
v&nbsp;Pythonu:</p>

<pre>
<i># Stažení datové sady, kterou budeme používat v dalších demonstračních</i>
<i># příkladech.</i>
&nbsp;
import requests
&nbsp;
url = "https://raw.githubusercontent.com/satyajeetkrjha/kaggle-Twitter-US-Airline-Sentiment-/refs/heads/master/Tweets.csv"
&nbsp;
response = requests.get(url)
&nbsp;
with open("Tweets_airlines.csv", "wb") as fout:
    fout.write(response.content)
</pre>

<p>Stažený soubor je v&nbsp;CSV formátu a jeho začátek vypadá následovně:</p>

<pre>
tweet_id,airline_sentiment,airline_sentiment_confidence,negativereason,negativereason_confidence,airline,airline_sentiment_gold,name,negativereason_gold,retweet_count,text,tweet_coord,tweet_created,tweet_location,user_timezone
570306133677760513,neutral,1.0,,,Virgin America,,cairdin,,0,@VirginAmerica What @dhepburn said.,,2015-02-24 11:35:52 -0800,,Eastern Time (US &amp; Canada)
570301130888122368,positive,0.3486,,0.0,Virgin America,,jnardino,,0,@VirginAmerica plus you've added commercials to the experience... tacky.,,2015-02-24 11:15:59 -0800,,Pacific Time (US &amp; Canada)
570301083672813571,neutral,0.6837,,,Virgin America,,yvonnalynn,,0,@VirginAmerica I didn't today... Must mean I need to take another trip!,,2015-02-24 11:15:48 -0800,Lets Play,Central Time (US &amp; Canada)
570301031407624196,negative,1.0,Bad Flight,0.7033,Virgin America,,jnardino,,0,"@VirginAmerica it's really aggressive to blast obnoxious ""entertainment"" in your guests' faces &amp; they have little recourse",,2015-02-24 11:15:36 -0800,,Pacific Time (US &amp; Canada)
570300817074462722,negative,1.0,Can't Tell,1.0,Virgin America,,jnardino,,0,@VirginAmerica and it's a really big bad thing about it,,2015-02-24 11:14:45 -0800,,Pacific Time (US &amp; Canada)
570300767074181121,negative,1.0,Can't Tell,0.6842,Virgin America,,jnardino,,0,"@VirginAmerica seriously would pay $30 a flight for seats that didn't have this playing.
</pre>

*** image ***
<p><i>Obrázek 1: Datová sada po otevření ve spreadsheetu.</i></p>

<p>Dále budeme v&nbsp;některých skriptech vyžadovat slovník s&nbsp;takzvanými
stopslovy (<i>stopwords</i>). Jedná se o slova, která v&nbsp;textu nenesou
žádnou skutečně užitečnou informaci a mohou být odfiltrována. Tento slovník
stáhneme jednoduchým skriptem založeným na knihovně NLTK. Vše se stáhne do
adresáře <strong>ntkl_data</strong> v&nbsp;domovském adresáři:</p>

<pre>
<i># Stažení slovníku, který bude použit pro předzpracování textu v dalších</i>
<i># demonstračních příkladech.</i>
&nbsp;
import nltk
&nbsp;
<i># tento příkaz zajistí stažení příslušných datových souborů</i>
nltk.download("stopwords")
</pre>

<p>Příklad několika stopslov pro angličtinu (ale slovník obsahuje i další
jazyky):</p>

<pre>
i
me
my
myself
we
our
ours
ourselves
you
you're
you've
you'll
you'd
your
yours
yourself
yourselves
he
...
...
...
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Načtení datové sady a zjištění základních informací o v&nbsp;ní uložených datech</h2>

<p>Jak jsme viděli <a href="#k02">v&nbsp;předchozí kapitole</a>, je datová
sada, kterou máme k&nbsp;dispozici, uložena ve formátu CSV. Taková data je
možné načíst různým způsobem, přičemž pravděpodobně nejjednodušší je použít
knihovnu <a href="https://www.root.cz/serialy/knihovna-pandas/">Pandas</a>
popř.&nbsp;<a
href="https://www.root.cz/clanky/knihovna-polars-vykonnejsi-alternativa-ke-knihovne-pandas/">Polars</a>.
Celý CSV soubor tedy načteme do datového rámce (<i>data frame</i>) a necháme si
zobrazit prvních pět a posledních pět záznamů. K&nbsp;tomu lze použít metody
<strong>head</strong> a <strong>tail</strong>:</p>

<pre>
<i># Načtení datové sady a zjištění základních informací o v ní uložených datech.</i>
&nbsp;
import pandas as pd 
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># zobrazení prvních deseti řádků tabulky</i>
print(airline_tweets.head())
&nbsp;
print()
&nbsp;
<i># zobrazení posledních deseti řádků tabulky</i>
print(airline_tweets.tail())
</pre>

<p>Prvních pět záznamů (nezobrazí se všechny sloupce):</p>

<pre>
             tweet_id  ...               user_timezone
0  570306133677760513  ...  Eastern Time (US &amp; Canada)
1  570301130888122368  ...  Pacific Time (US &amp; Canada)
2  570301083672813571  ...  Central Time (US &amp; Canada)
3  570301031407624196  ...  Pacific Time (US &amp; Canada)
4  570300817074462722  ...  Pacific Time (US &amp; Canada)
&nbsp;
[5 rows x 15 columns]
</pre>

<p>Posledních pět záznamů:</p>

<pre>
                 tweet_id  ...               user_timezone
14635  569587686496825344  ...                         NaN
14636  569587371693355008  ...                         NaN
14637  569587242672398336  ...                         NaN
14638  569587188687634433  ...  Eastern Time (US &amp; Canada)
14639  569587140490866689  ...                         NaN
&nbsp;
[5 rows x 15 columns]
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Informace o sloupcích v&nbsp;datovém rámci</h2>

<p>Při načítání datových sad uložených ve formátu CSV se knihovny Pandas i
Polars snaží o detekci typů dat v&nbsp;jednotlivých sloupcích. Na základě
zjištěného typu se následně nastaví typy celých sloupců. Tyto informace si
můžeme velmi snadno vypsat, a to konkrétně zavoláním metody
<strong>info</strong>. Ostatně ukažme si to prakticky:</p>

<pre>
<i># Načtení datové sady a zjištění základních informací o v ní uložených datech.</i>
&nbsp;
import pandas as pd 
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># zobrazení základních informací o datovém rámci</i>
print(airline_tweets.info())
</pre>

<p>Z&nbsp;výpisu je patrné, že v&nbsp;datové sadě je 14640 záznamů a každý
záznam má 15 sloupců. Mnoho sloupců obsahuje pouze neprázdné (nenullové)
hodnoty, ovšem sloupce <strong>negativereason</strong>,
<strong>tweet_coord</strong> atd.&nbsp;obsahují i prázdné hodnoty a sloupec
<strong>airline_sentiment_gold</strong> je prakticky prázdný:</p>

<pre>
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 14640 entries, 0 to 14639
Data columns (total 15 columns):
 #   Column                        Non-Null Count  Dtype  
---  ------                        --------------  -----  
 0   tweet_id                      14640 non-null  int64  
 1   airline_sentiment             14640 non-null  object 
 2   airline_sentiment_confidence  14640 non-null  float64
 3   negativereason                9178 non-null   object 
 4   negativereason_confidence     10522 non-null  float64
 5   airline                       14640 non-null  object 
 6   airline_sentiment_gold        40 non-null     object 
 7   name                          14640 non-null  object 
 8   negativereason_gold           32 non-null     object 
 9   retweet_count                 14640 non-null  int64  
 10  text                          14640 non-null  object 
 11  tweet_coord                   1019 non-null   object 
 12  tweet_created                 14640 non-null  object 
 13  tweet_location                9907 non-null   object 
 14  user_timezone                 9820 non-null   object 
dtypes: float64(2), int64(2), object(11)
memory usage: 1.7+ MB
None
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Statistické informace získané ze sloupců obsahujících numerická data</h2>

<p>Taktéž je možné zjistit základní statistické informace o těch sloupcích
(resp.&nbsp;přesněji řečeno o datech uložených v&nbsp;těchto sloupcích), které
obsahují numerická data. Těchto sloupců v&nbsp;naší datové sadě existuje jen
několik, což bylo ostatně patrné i z&nbsp;tabulky získané v&nbsp;rámci
předchozí kapitoly &ndash; jedná se o sloupce s&nbsp;datovými typy
<strong>int64</strong> a <strong>float64</strong> (většina sloupců obsahuje
hodnoty typu <strong>object</strong>, což si můžeme přeložit jako
&bdquo;řetězec&ldquo;):</p>

<p>Knihovna Pandas nám pro zjištění statistických informací nabízí užitečnou
metodu <strong>describe</strong>, která se používá následovně:</p>

<pre>
<i># Načtení datové sady a zjištění základních informací o v ní uložených datech.</i>
&nbsp;
import pandas as pd 
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># zobrazení základních statistických informací o datovém rámci</i>
print(airline_tweets.describe())
</pre>

<p>Výsledkem je nový datový rámec, kde každý sloupec obsahuje statistické
informace o jednom sloupci z&nbsp;původního datového rámce:</p>

<pre>
           tweet_id  ...  retweet_count
count  1.464000e+04  ...   14640.000000
mean   5.692184e+17  ...       0.082650
std    7.791112e+14  ...       0.745778
min    5.675883e+17  ...       0.000000
25%    5.685592e+17  ...       0.000000
50%    5.694779e+17  ...       0.000000
75%    5.698905e+17  ...       0.000000
max    5.703106e+17  ...      44.000000
&nbsp;
[8 rows x 4 columns]
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;dalším textu se však budeme
zabývat pouze sloupci s&nbsp;textem. Zde nám již Pandas příliš
nepomůže.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zjištění počtu tweetů o jednotlivých dopravcích</h2>

<p>V&nbsp;čem nám naopak knihovna Pandas může pomoci, je automatické sjednocení
shodných hodnot z&nbsp;nějakého sloupce, načež se můžeme dotázat, kolik
shodných hodnot existuje. To je již informace, která se nám bude hodit, protože
takto snadno zjistíme, kolik hodnocení (resp.&nbsp;tweetů) o jednotlivých
dopravcích máme k&nbsp;dispozici. Celý postup je ve skutečnosti snadný, protože
jen musíme vybrat vhodný sloupec (přes jeho selektor) a následně zavolat metodu
<strong>value_counts</strong>. Ta vrátí nový datový rámec s&nbsp;požadovanými
výsledky:</p>

<pre>
<i># Načtení datové sady a zjištění počtu tweetů o jednotlivých dopravcích</i>
&nbsp;
import pandas as pd
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># počet tweetů o jednotlivých dopravcích</i>
print(airline_tweets.airline.value_counts())
</pre>

<p>Nový datový rámec vypadá pro naši datovou sadu následovně (první řádek je
nadpis indexu, poslední řádek obsahuje typ sloupce v&nbsp;novém datovém
rámci):</p>

<pre>
airline
United            3822
US Airways        2913
American          2759
Southwest         2420
Delta             2222
Virgin America     504
Name: count, dtype: int64
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Grafická vizualizace počtu tweetů o jednotlivých dopravcích</h2>

<p>Informace, které jsme získali metodou <strong>value_counts</strong>, je
možné snadno vizualizovat. Pro tento účel zkombinujeme možnosti nabízené
knihovnami Pandas a Matplotlib. Nejdříve si necháme zobrazit jednoduchý
sloupcový diagram, kde výška sloupců (podle očekávání) odpovídá počtu tweetů o
daném dopravci:</p>

<pre>
<i># Vykreslení sloupcového diagramu s počty tweetů o jednotlivých dopravcích</i>
&nbsp;
import pandas as pd
import matplotlib.pyplot as plt
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># specifikace plochy grafu</i>
fig = plt.figure(1, figsize=(6, 6), dpi=150)
&nbsp;
<i># vykreslení sloupcového diagramu s počty tweetů o jednotlivých dopravcích</i>
airline_tweets.airline.value_counts().plot(
    kind="bar",
)
&nbsp;
<i># zajištění místa pro popisky os</i>
fig.tight_layout()
&nbsp;
<i># uložení sloupcového diagramu do souboru</i>
plt.savefig("178.png")
&nbsp;
<i># zobrazení diagramu na obrazovce</i>
plt.show()
</pre>

<p>Výsledek by měl vypadat následovně:</p>

*** image ***
<p><i>Obrázek 2: Počty tweetů o jednotlivých dopravcích vyjádřené sloupcovým diagramem.</i></p>

<p>V&nbsp;případě, že nás nezajímají absolutní hodnoty, ale pouze porovnání
počtu tweetů, je výhodnější použít koláčový (kruhový) diagram. Ten se vytvoří
taktéž velmi snadno. Pouze jsem diagram otočil o 90&deg; (lepší zarovnání jmen
dopravců) a nastavil styl vykreslení okrajů jednotlivých kruhových výsečí,
jinak jsou poměrně málo viditelné (ale tyto úpravy lze udělat později či
vůbec):</p>

<pre>
<i># Vykreslení koláčového diagramu s počty tweetů o jednotlivých dopravcích</i>
&nbsp;
import pandas as pd
import matplotlib.pyplot as plt
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># specifikace plochy grafu</i>
fig = plt.figure(1, figsize=(6, 6), dpi=150)
&nbsp;
<i># vykreslení koláčového diagramu s počty tweetů o jednotlivých dopravcích</i>
airline_tweets.airline.value_counts().plot(
    kind="pie",
    autopct="%1.0f%%",
    startangle=90,
    wedgeprops={"edgecolor": "black", "linewidth": 2, "antialiased": True},
)
&nbsp;
<i># uložení sloupcového diagramu do souboru</i>
plt.savefig("179.png")
&nbsp;
<i># zobrazení diagramu na obrazovce</i>
plt.show()
</pre>

<p>Nyní bude vizuální výsledek pochopitelně zcela odlišný od sloupcového
diagramu:</p>

*** image ***
<p><i>Obrázek 3: Počty tweetů o jednotlivých dopravcích vyjádřené koláčovým
(kruhovým) diagramem.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Zjištění celkové nálady tweetů</h2>

<p>Námi používaná datová sada obsahuje i sloupec nazvaný <i>sentiment</i>.
Tento sloupec je vyplněn příznakem, zda daný tweet obsahuje kladné, záporné
nebo neutrální hodnocení. Právě díky existenci tohoto sloupce (ruční práce)
budeme moci natrénovat náš model tak, aby tweety (resp.&nbsp;jejich hodnocení)
ohodnocoval sám. Ovšem podívejme se nyní na obsah sloupce <i>sentiment</i>:</p>

<pre>
<i># Načtení datové sady a zjištění celkové nálady.</i>
&nbsp;
import pandas as pd 
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># celková nálada: počty pozitivních, negativních a neutrálních reakcí</i>
print(airline_tweets.airline_sentiment.value_counts())
</pre>

<p>Podle očekávání je většina hodnocení spíše negativní, protože spokojený
zákazník většinou necítí potřebu se ke službě nebo výrobku vyjadřovat (což je,
zcela na okraj, jeden z&nbsp;největších problémů dnešního informačního
prostoru):</p>

<pre>
airline_sentiment
negative    9178
neutral     3099
positive    2363
Name: count, dtype: int64
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se jedná o běžný text
&ndash; nemáme zde tedy mapování mezi hodnotou a jejím významem, což bylo
použito například v&nbsp;datové sadě Iris.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vizualizace celkové nálady v&nbsp;koláčovém diagramu</h2>

<p>Nyní je již snadné zobrazit koláčový (kruhový) diagram s&nbsp;relativní
mírou kladných, záporných a neutrálních hodnocení. Použijeme naprosto stejný
postup jako u prvního koláčového diagramu, pouze vstupní datový rámec bude
odlišný. Navíc explicitně nastavuji barvy jednotlivých výsečí, aby červená
odpovídala negativnímu hodnocení a zelená hodnocení pozitivnímu:</p>

<pre>
<i># Načtení datové sady a vizualizace celkové nálady.</i>
&nbsp;
import pandas as pd
import matplotlib.pyplot as plt
&nbsp;
<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")
&nbsp;
<i># plocha grafu</i>
fig = plt.figure(1, figsize=(6, 6), dpi=150)
&nbsp;
<i># vykreslení koláčového diagramu s hodnoceními</i>
airline_tweets.airline_sentiment.value_counts().plot(
    kind="pie",
    autopct="%1.0f%%",
    colors=["#ff8080", "yellow", "#80ff80"],
    wedgeprops={"edgecolor": "black", "linewidth": 2, "antialiased": True},
)
&nbsp;
<i># uložení koláčového diagramu do souboru</i>
plt.savefig("181.png")
&nbsp;
<i># zobrazení koláčového diagramu na obrazovce</i>
plt.show()
</pre>

<p>Výsledný diagram by měl vypadat následovně:</p>

*** image ***
<p><i>Obrázek 4: Poměr kladných, záporných a neutrálních hodnocení.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>

<pre>
<i># Výpočet hodnocení podle dopravce.</i>

import pandas as pd

<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")

<i># rozdělení hodnocení podle dopravce</i>
airline_sentiment = (
    airline_tweets
    .groupby(["airline", "airline_sentiment"])
    .airline_sentiment.count()
)

<i># výsledný datový rámec (hierarchický)</i>
print(airline_sentiment)

print()

<i># pivot tabulka</i>
airline_sentiment = airline_sentiment.unstack()

<i># výsledný datový rámec</i>
print(airline_sentiment)
</pre>

<pre>
<i># Vizualizace hodnocení podle dopravce.</i>

import pandas as pd
import matplotlib.pyplot as plt

<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")

<i># rozdělení hodnocení podle dopravce</i>
airline_sentiment = (
    airline_tweets
    .groupby(["airline", "airline_sentiment"])
    .airline_sentiment.count()
    .unstack()
)

<i># zobrazení hodnocení podle dopravce</i>
airline_sentiment.plot(
    kind="bar",
    color=["#ff8080", "yellow", "#80ff80"],
    edgecolor="black",
    figsize=(6, 6),
).legend(loc='best')

plt.tight_layout()

<i># uložení koláčového diagramu do souboru</i>
plt.savefig("183.png")

<i># zobrazení koláčového diagramu na obrazovce</i>
plt.show()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>

<pre>
<i># Načtení datové sady a získání vlastních tweetů a hodnocení</i>

import pandas as pd 

<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")

<i># hodnocení (pozitivní, negativní, neutrální)</i>
labels = airline_tweets["airline_sentiment"].values

<i># vlastní text hodnocení</i>
features = airline_tweets["text"].values

<i># hodnoty použité později pro trénink modelu</i>
print("Labels:")
print(labels)
print("Number of labels:", len(labels))
print()

print("Features:")
print(features)
print("Number of features:", len(features))
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>

<pre>
<i># Preprocesing textových dat</i>

<i># Založeno na příkladu uvedeného v článku:</i>
<i># Based on example presented in following article:</i>
<i># https://stackabuse.com/python-for-nlp-sentiment-analysis-with-scikit-learn/</i>

import numpy as np
import pandas as pd
import re

<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")

<i># hodnocení (pozitivní, negativní, neutrální)</i>
labels = airline_tweets["airline_sentiment"].values

<i># vlastní text hodnocení</i>
features = airline_tweets["text"].values


def process_feature(feature):
    """Preprocesing textových dat."""
    <i># odstranění speciálních znaků a dalšího smetí</i>
    processed_feature = re.sub(r"\W", " ", feature)

    <i># odstranění samostatných znaků (oddělených bílými znaky)</i>
    processed_feature = re.sub(r"\s+[a-zA-Z]\s+", " ", processed_feature)

    <i># odstranění samostatných znaků na začátku vět</i>
    processed_feature = re.sub(r"\^[a-zA-Z]\s+", " ", processed_feature)

    <i># náhrada více mezer (nebo jiných bílých znaků) za jedinou mezeru</i>
    processed_feature = re.sub(r"\s+", " ", processed_feature, flags=re.I)

    <i># odstranění prefixů ^b</i>
    processed_feature = re.sub(r"^b\s+", "", processed_feature)

    <i># konverze výsledku na malá písmena</i>
    return processed_feature.lower()


<i># preprocesing všech hodnocení</i>
processed_features = [process_feature(feature) for feature in features]

<i># hodnoty použité později pro trénink modelu</i>
print("Labels:")
print(labels)
print("Number of labels:", len(labels))
print()

print("Features:")
print(processed_features)
print("Number of features:", len(processed_features))
print()

<i># porovnání výsledků preprocesingu</i>
for i in range(10):
    print(features[i], " | ", processed_features[i])
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>

<pre>
<i># Vektorizace textových dat</i>

<i># Založeno na příkladu uvedeného v článku:</i>
<i># Based on example presented in following article:</i>
<i># https://stackabuse.com/python-for-nlp-sentiment-analysis-with-scikit-learn/</i>

import numpy as np
import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer



<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")

<i># hodnocení (pozitivní, negativní, neutrální)</i>
labels = airline_tweets["airline_sentiment"].values

<i># vlastní text hodnocení</i>
features = airline_tweets["text"].values


def process_feature(feature):
    """Preprocesing textových dat."""
    <i># odstranění speciálních znaků a dalšího smetí</i>
    processed_feature = re.sub(r"\W", " ", feature)

    <i># odstranění samostatných znaků (oddělených bílými znaky)</i>
    processed_feature = re.sub(r"\s+[a-zA-Z]\s+", " ", processed_feature)

    <i># odstranění samostatných znaků na začátku vět</i>
    processed_feature = re.sub(r"\^[a-zA-Z]\s+", " ", processed_feature)

    <i># náhrada více mezer (nebo jiných bílých znaků) za jedinou mezeru</i>
    processed_feature = re.sub(r"\s+", " ", processed_feature, flags=re.I)

    <i># odstranění prefixů ^b</i>
    processed_feature = re.sub(r"^b\s+", "", processed_feature)

    <i># konverze výsledku na malá písmena</i>
    return processed_feature.lower()


<i># preprocesing všech hodnocení</i>
processed_features = [process_feature(feature) for feature in features]

<i># hodnoty použité později pro trénink modelu</i>
print("Labels:")
print(labels)
print("Number of labels:", len(labels))
print()

print("Features:")
print(processed_features)
print("Number of features:", len(processed_features))
print()

<i># vektorizace textu</i>
vectorizer = TfidfVectorizer(
    max_features=2500, min_df=7, max_df=0.8, stop_words=stopwords.words("english")
)
vectorized_features = vectorizer.fit_transform(processed_features).toarray()

<i># slova pro dekódování vah</i>
feature_names = vectorizer.get_feature_names_out()
print("Feature names count:", len(feature_names))
print("Feature names:")
for feature_name in feature_names:
    print(feature_name)

print()

<i># vlastní výsledek vektorizace</i>
print("Sparse matrix of size", vectorized_features.shape, ":")
print(vectorized_features)
print()

<i># ukázka způsobu zakódování</i>
print("Selected tweet:")
print("Original:     ", features[2])
print("Preprocessed: ", processed_features[2])
print("Vectorized:   ", vectorized_features[2])
print()

print("word# weight meaning")
for i, f in enumerate(vectorized_features[2]):
    if f > 0.0:
        print(f"{i:4}  {f:5.3}  {feature_names[i]}")
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
<i># Trénink a predikce modelu nad vektorizovanými daty</i>

<i># Založeno na příkladu uvedeného v článku:</i>
<i># Based on example presented in following article:</i>
<i># https://stackabuse.com/python-for-nlp-sentiment-analysis-with-scikit-learn/</i>

import numpy as np
import pandas as pd
import re
import nltk
import matplotlib.pyplot as plt
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.neighbors import KNeighborsClassifier



<i># načtení tabulky do datového rámce s předzpracováním numerických dat</i>
airline_tweets = pd.read_csv("Tweets_airlines.csv")

<i># hodnocení (pozitivní, negativní, neutrální)</i>
labels = airline_tweets["airline_sentiment"].values

<i># vlastní text hodnocení</i>
features = airline_tweets["text"].values


def process_feature(feature):
    """Preprocesing textových dat."""
    <i># odstranění speciálních znaků a dalšího smetí</i>
    processed_feature = re.sub(r"\W", " ", feature)

    <i># odstranění samostatných znaků (oddělených bílými znaky)</i>
    processed_feature = re.sub(r"\s+[a-zA-Z]\s+", " ", processed_feature)

    <i># odstranění samostatných znaků na začátku vět</i>
    processed_feature = re.sub(r"\^[a-zA-Z]\s+", " ", processed_feature)

    <i># náhrada více mezer (nebo jiných bílých znaků) za jedinou mezeru</i>
    processed_feature = re.sub(r"\s+", " ", processed_feature, flags=re.I)

    <i># odstranění prefixů ^b</i>
    processed_feature = re.sub(r"^b\s+", "", processed_feature)

    <i># konverze výsledku na malá písmena</i>
    return processed_feature.lower()


<i># preprocesing všech hodnocení</i>
processed_features = [process_feature(feature) for feature in features]

<i># hodnoty použité později pro trénink modelu</i>
print("Labels:")
print(labels)
print("Number of labels:", len(labels))
print()

print("Features:")
print(processed_features)
print("Number of features:", len(processed_features))
print()

<i># vektorizace textu</i>
vectorizer = TfidfVectorizer(
    max_features=2500, min_df=7, max_df=0.8, stop_words=stopwords.words("english")
)
vectorized_features = vectorizer.fit_transform(processed_features).toarray()

<i># klasické rozdělení datové sady na trénovací a testovací část</i>
trainX, testX, trainY, testY = train_test_split(
    vectorized_features, labels, test_size=0.2, random_state=0
)

<i># konstrukce vybraného modelu s předáním hyperparametrů</i>
classifier = KNeighborsClassifier(n_neighbors=1)

<i># trénink modelu</i>
classifier.fit(trainX, trainY)

<i># predikce modelu pro testovací vstupy (ne pro trénovací data)</i>
predictions = classifier.predict(testX)

<i># vyhodnocení kvality modelu</i>
print(classification_report(testY, predictions))
print(accuracy_score(testY, predictions))

<i># matice záměn - absolutní hodnoty</i>
disp = ConfusionMatrixDisplay.from_estimator(
    classifier,
    testX,
    testY,
    cmap=plt.cm.Blues,
    normalize=None,
)

<i># zobrazení matice v textové podobě</i>
print(disp.confusion_matrix)

<i># uložení výsledků ve formě rastrového obrázku</i>
plt.savefig("180_1.png")

<i># vizualizace matice</i>
plt.show()

<i># matice záměn - relativní hodnoty</i>
disp = ConfusionMatrixDisplay.from_estimator(
    classifier,
    testX,
    testY,
    cmap=plt.cm.Blues,
    normalize="true",
)

<i># zobrazení matice v textové podobě</i>
print(disp.confusion_matrix)

<i># uložení výsledků ve formě rastrového obrázku</i>
plt.savefig("180_2.png")

<i># vizualizace matice</i>
plt.show()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady využívající knihovnu Scikit-learn lze nalézt
v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady i na (Jupyter) diáře s&nbsp;postupem
výpočtů a analýz:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>01_show_matrix.py</td><td>kooperace mezi knihovnami Matplotlib a NumPy: vizualizace obsahu 2D matice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/01_show_matrix.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/01_show_matrix.py</a></td></tr>
<tr><td> 2</td><td>02_get_digits.py</td><td>datová množina obsahující naskenované ručně napsané číslice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/02_get_digits.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/02_get_digits.py</a></td></tr>
<tr><td> 3</td><td>03_get_features.py</td><td>další atributy datové množiny, které použijeme při trénování</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/03_get_features.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/03_get_features.py</a></td></tr>
<tr><td> 4</td><td>04_get_images.py</td><td>přečtení a následné vykreslení jednotlivých ručně nakreslených číslic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/04_get_images.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/04_get_images.py</a></td></tr>
<tr><td> 5</td><td>05_show_grayscale_matrix.py</td><td>odstranění umělé aplikované barvové palety (obrázky ve stupních šedi)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/05_show_grayscale_matrix.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/05_show_grayscale_matrix.py</a></td></tr>
<tr><td> 6</td><td>06_grayscale_images.py</td><td>vykreslení ručně nakreslených číslic ve formě obrázků ve stupních šedi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/06_grayscale_images.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/06_grayscale_images.py</a></td></tr>
<tr><td> 7</td><td>07_multiplot.py</td><td>rozdělení plochy grafu do oblastí; vykreslení více obrázků do jediného grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/07_multiplot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/07_multiplot.py</a></td></tr>
<tr><td> 8</td><td>08_model_preperation_1.py</td><td>obrázky s&nbsp;jejich ohodnocením</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/08_model_preperation_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/08_model_preperation_1.py</a></td></tr>
<tr><td> 9</td><td>09_training_set.py</td><td>příprava dat pro trénink</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/09_training_set.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/09_training_set.py</a></td></tr>
<tr><td>10</td><td>10_classification.py</td><td>klasifikace obrázků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/10_classification.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/10_classification.py</a></td></tr>
<tr><td>11</td><td>11_results.py</td><td>vykreslení obrázků společně s&nbsp;jejich klasifikací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/11_results.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/11_results.py</a></td></tr>
<tr><td>12</td><td>12_change_training_set.py</td><td>změna poměru rozdělení dat na tréninkovou a testovací množinu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/12_change_training_set.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/12_change_training_set.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>13_blobs.py</td><td>použití funkce <strong>make_blobs</strong> pro vygenerování sady bodů v&nbsp;rovině sdružených do oblastí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/13_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/13_blobs.py</a></td></tr>
<tr><td>14</td><td>14_swap_coords.py</td><td>úprava předchozího příkladu: prohození souřadnic na osách</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/14_swap_coords.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/14_swap_coords.py</a></td></tr>
<tr><td>15</td><td>15_blobs_scatter_plot.py</td><td>základní podoba bodového diagramu (<i>scatter plot</i>)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/15_blobs_scatter_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/15_blobs_scatter_plot.py</a></td></tr>
<tr><td>16</td><td>16_blobs_scatter_plot.py</td><td>úprava bodového diagramu při zobrazení většího množství bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/16_blobs_scatter_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/16_blobs_scatter_plot.py</a></td></tr>
<tr><td>17</td><td>17_colorized_blobs.py</td><td>obarvení bodů podle oblastí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/17_colorized_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/17_colorized_blobs.py</a></td></tr>
<tr><td>18</td><td>18_k-means.py</td><td>základní použití algoritmu K-means pro clustering</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/18_k-means.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/18_k-means.py</a></td></tr>
<tr><td>19</td><td>19_combination.py</td><td>zobrazení centroidů společně s&nbsp;původními body</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/19_combination.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/19_combination.py</a></td></tr>
<tr><td>20</td><td>20_combinations.py</td><td>vizualizace clusteringu původní množiny bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/20_combinations.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/20_combinations.py</a></td></tr>
<tr><td>21</td><td>21_other_settings.py</td><td>vizualizace clusteringu původní množiny bodů pro odlišnou množinu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/21_other_settings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/21_other_settings.py</a></td></tr>
<tr><td>22</td><td>22_random_points.py</td><td>clustering pro náhodná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/22_random_points.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/22_random_points.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>23_circles.py</td><td>pseudonáhodné rozmístění bodů do kružnic, menší náhodnost výsledku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/23_circles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/23_circles.py</a></td></tr>
<tr><td>24</td><td>24_more_noise_circles.py</td><td>pseudonáhodné rozmístění bodů do kružnic, větší náhodnost výsledku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/24_more_noise_circles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/24_more_noise_circles.py</a></td></tr>
<tr><td>25</td><td>25_moons.py</td><td>pseudonáhodné rozmístění bodů do tvaru dvou půlměsíců, menší náhodnost</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/25_moons.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/25_moons.py</a></td></tr>
<tr><td>26</td><td>26_more_noisy_moons.py</td><td>pseudonáhodné rozmístění bodů do tvaru dvou půlměsíců, větší náhodnost</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/26_more_noisy_moons.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/26_more_noisy_moons.py</a></td></tr>
<tr><td>27</td><td>27_circles_kmeans.py</td><td>výsledek clusteringu provedeného algoritmem K-means na &bdquo;kružnice&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/27_circles_kmeans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/27_circles_kmeans.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Python for NLP: Sentiment Analysis with Scikit-Learn<br />
<a href="https://stackabuse.com/python-for-nlp-sentiment-analysis-with-scikit-learn/">https://stackabuse.com/python-for-nlp-sentiment-analysis-with-scikit-learn/</a>
</li>

<li>Datová sada - hodnocení leteckých dopravců<br />
<a href="https://raw.githubusercontent.com/satyajeetkrjha/kaggle-Twitter-US-Airline-Sentiment-/refs/heads/master/Tweets.csv">https://raw.githubusercontent.com/satyajeetkrjha/kaggle-Twitter-US-Airline-Sentiment-/refs/heads/master/Tweets.csv</a>
</li>

<li>Twitter_US_Airline_Sentiment_Analysis <br />
<a href="https://github.com/rustagijanvi/Twitter_US_Airline_Sentiment_Analysis/tree/main">https://github.com/rustagijanvi/Twitter_US_Airline_Sentiment_Analysis/tree/main</a>
</li>

<li>Shluková analýza (clustering) a knihovna Scikit-learn<br />
<a href="https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn/">https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn/</a>
</li>

<li>Shluková analýza (clustering) a knihovna Scikit-learn (2)<br />
<a href="https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-2/">https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-2/</a>
</li>

<li>Shluková analýza (clustering) a knihovna Scikit-learn (z plochy do 3D prostoru)<br />
<a href="https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-z-plochy-do-3d-prostoru/">https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-z-plochy-do-3d-prostoru/</a>
</li>

<li>Rozpoznávání obrázků knihovnou Scikit-learn: první kroky<br />
<a href="https://www.root.cz/clanky/rozpoznavani-obrazku-knihovnou-scikit-learn-prvni-kroky/">https://www.root.cz/clanky/rozpoznavani-obrazku-knihovnou-scikit-learn-prvni-kroky/</a>
</li>

<li>scikit-learn: Machine Learning in Python<br />
<a href="https://scikit-learn.org/stable/index.html">https://scikit-learn.org/stable/index.html</a>
</li>

<li>Sklearn-pandas<br />
<a href="https://github.com/scikit-learn-contrib/sklearn-pandas">https://github.com/scikit-learn-contrib/sklearn-pandas</a>
</li>

<li>sklearn-xarray<br />
<a href="https://github.com/phausamann/sklearn-xarray/">https://github.com/phausamann/sklearn-xarray/</a>
</li>

<li>Clustering<br />
<a href="https://scikit-learn.org/stable/modules/clustering.html">https://scikit-learn.org/stable/modules/clustering.html</a>
</li>

<li>Cluster analysis (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Cluster_analysis">https://en.wikipedia.org/wiki/Cluster_analysis</a>
</li>

<li>Shluková analýza (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Shlukov%C3%A1_anal%C3%BDza">https://cs.wikipedia.org/wiki/Shlukov%C3%A1_anal%C3%BDza</a>
</li>

<li>K-means<br />
<a href="https://cs.wikipedia.org/wiki/K-means">https://cs.wikipedia.org/wiki/K-means</a>
</li>

<li>k-means clustering<br />
<a href="https://en.wikipedia.org/wiki/K-means_clustering">https://en.wikipedia.org/wiki/K-means_clustering</a>
</li>

<li>Spectral clustering<br />
<a href="https://en.wikipedia.org/wiki/Spectral_clustering">https://en.wikipedia.org/wiki/Spectral_clustering</a>
</li>

<li>Emergence<br />
<a href="https://cs.wikipedia.org/wiki/Emergence">https://cs.wikipedia.org/wiki/Emergence</a>
</li>

<li>Particle Life: Vivid structures from rudimentary rules<br />
<a href="https://particle-life.com/">https://particle-life.com/</a>
</li>

<li>Hertzsprungův–Russellův diagram<br />
<a href="https://cs.wikipedia.org/wiki/Hertzsprung%C5%AFv%E2%80%93Russell%C5%AFv_diagram">https://cs.wikipedia.org/wiki/Hertzsprung%C5%AFv%E2%80%93Russell%C5%AFv_diagram</a>
</li>

<li>Using Machine Learning in an HR Diagram<br />
<a href="https://cocalc.com/share/public_paths/08b6e03583cbdef3cdb9813a54ec68ff773c747f">https://cocalc.com/share/public_paths/08b6e03583cbdef3cdb9813a54ec68ff773c747f</a>
</li>

<li>Gaia H-R diagrams: Querying Gaia data for one million nearby stars<br />
<a href="https://vlas.dev/post/gaia-dr2-hrd/">https://vlas.dev/post/gaia-dr2-hrd/</a>
</li>

<li>The Hertzsprung–Russell diagram<br />
<a href="https://scipython.com/book2/chapter-9-data-analysis-with-pandas/problems/p92/the-hertzsprung-russell-diagram/">https://scipython.com/book2/chapter-9-data-analysis-with-pandas/problems/p92/the-hertzsprung-russell-diagram/</a>
</li>

<li>Animated Hertzsprung-Russell Diagram with 119,614 datapoints<br />
<a href="https://github.com/zonination/h-r-diagram">https://github.com/zonination/h-r-diagram</a>
</li>

<li>Neuraxle Pipelines<br />
<a href="https://github.com/Neuraxio/Neuraxle">https://github.com/Neuraxio/Neuraxle</a>
</li>

<li>scikit-learn: Getting Started<br />
<a href="https://scikit-learn.org/stable/getting_started.html">https://scikit-learn.org/stable/getting_started.html</a>
</li>

<li>Support Vector Machines<br />
<a href="https://scikit-learn.org/stable/modules/svm.html">https://scikit-learn.org/stable/modules/svm.html</a>
</li>

<li>Use Deep Learning to Detect Programming Languages<br />
<a href="http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/">http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/</a>
</li>

<li>Natural-language processing<br />
<a href="https://en.wikipedia.org/wiki/Natural-language_processing">https://en.wikipedia.org/wiki/Natural-language_processing</a>
</li>

<li>THE MNIST DATABASE of handwritten digits<br />
<a href="http://yann.lecun.com/exdb/mnist/">http://yann.lecun.com/exdb/mnist/</a>
</li>

<li>MNIST database (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MNIST_database">https://en.wikipedia.org/wiki/MNIST_database</a>
</li>

<li>MNIST For ML Beginners<br />
<a href="https://www.tensorflow.org/get_started/mnist/beginners">https://www.tensorflow.org/get_started/mnist/beginners</a>
</li>

<li>Stránka projektu Torch<br />
<a href="http://torch.ch/">http://torch.ch/</a>
</li>

<li>Torch: Serialization<br />
<a href="https://github.com/torch/torch7/blob/master/doc/serialization.md">https://github.com/torch/torch7/blob/master/doc/serialization.md</a>
</li>

<li>Torch: modul image<br />
<a href="https://github.com/torch/image/blob/master/README.md">https://github.com/torch/image/blob/master/README.md</a>
</li>

<li>Data pro neuronové sítě<br />
<a href="http://archive.ics.uci.edu/ml/index.php">http://archive.ics.uci.edu/ml/index.php</a>
</li>

<li>Torch na GitHubu (několik repositářů)<br />
<a href="https://github.com/torch">https://github.com/torch</a>
</li>

<li>Torch (machine learning), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Torch_%28machine_learning%29">https://en.wikipedia.org/wiki/Torch_%28machine_learning%29</a>
</li>

<li>Torch Package Reference Manual<br />
<a href="https://github.com/torch/torch7/blob/master/README.md">https://github.com/torch/torch7/blob/master/README.md</a>
</li>

<li>Torch Cheatsheet<br />
<a href="https://github.com/torch/torch7/wiki/Cheatsheet">https://github.com/torch/torch7/wiki/Cheatsheet</a>
</li>

<li>Neural network containres (Torch)<br />
<a href="https://github.com/torch/nn/blob/master/doc/containers.md">https://github.com/torch/nn/blob/master/doc/containers.md</a>
</li>

<li>Simple layers<br />
<a href="https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear">https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear</a>
</li>

<li>Transfer Function Layers<br />
<a href="https://github.com/torch/nn/blob/master/doc/transfer.md#nn.transfer.dok">https://github.com/torch/nn/blob/master/doc/transfer.md#nn.transfer.dok</a>
</li>

<li>Feedforward neural network<br />
<a href="https://en.wikipedia.org/wiki/Feedforward_neural_network">https://en.wikipedia.org/wiki/Feedforward_neural_network</a>
</li>

<li>Biologické algoritmy (4) - Neuronové sítě<br />
<a href="https://www.root.cz/clanky/biologicke-algoritmy-4-neuronove-site/">https://www.root.cz/clanky/biologicke-algoritmy-4-neuronove-site/</a>
</li>

<li>Biologické algoritmy (5) - Neuronové sítě<br />
<a href="https://www.root.cz/clanky/biologicke-algoritmy-5-neuronove-site/">https://www.root.cz/clanky/biologicke-algoritmy-5-neuronove-site/</a>
</li>

<li>Umělá neuronová síť (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Um%C4%9Bl%C3%A1_neuronov%C3%A1_s%C3%AD%C5%A5">https://cs.wikipedia.org/wiki/Um%C4%9Bl%C3%A1_neuronov%C3%A1_s%C3%AD%C5%A5</a>
</li>

<li>PyTorch<br />
<a href="http://pytorch.org/">http://pytorch.org/</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>Matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Galerie grafů vytvořených v&nbsp;Matplotlibu<br />
<a href="https://matplotlib.org/3.2.1/gallery/">https://matplotlib.org/3.2.1/gallery/</a>
</li>

<li>3D rendering<br />
<a href="https://en.wikipedia.org/wiki/3D_rendering">https://en.wikipedia.org/wiki/3D_rendering</a>
</li>

<li>3D computer graphics<br />
<a href="https://en.wikipedia.org/wiki/3D_computer_graphics">https://en.wikipedia.org/wiki/3D_computer_graphics</a>
</li>

<li>Primary 3D view planes<br />
<a href="https://matplotlib.org/stable/gallery/mplot3d/view_planes_3d.html">https://matplotlib.org/stable/gallery/mplot3d/view_planes_3d.html</a>
</li>

<li>Getting started in scikit-learn with the famous iris dataset<br />
<a href="https://www.youtube.com/watch?v=hd1W4CyPX58">https://www.youtube.com/watch?v=hd1W4CyPX58</a>
</li>

<li>Training a machine learning model with scikit-learn<br />
<a href="https://www.youtube.com/watch?v=RlQuVL6-qe8">https://www.youtube.com/watch?v=RlQuVL6-qe8</a>
</li>

<li>Iris (plant)<br />
<a href="https://en.wikipedia.org/wiki/Iris_(plant)">https://en.wikipedia.org/wiki/Iris_(plant)</a>
</li>

<li>Kosatec<br />
<a href="https://cs.wikipedia.org/wiki/Kosatec">https://cs.wikipedia.org/wiki/Kosatec</a>
</li>

<li>Iris setosa<br />
<a href="https://en.wikipedia.org/wiki/Iris_setosa">https://en.wikipedia.org/wiki/Iris_setosa</a>
</li>

<li>Iris versicolor<br />
<a href="https://en.wikipedia.org/wiki/Iris_versicolor">https://en.wikipedia.org/wiki/Iris_versicolor</a>
</li>

<li>Iris virginica<br />
<a href="https://en.wikipedia.org/wiki/Iris_virginica">https://en.wikipedia.org/wiki/Iris_virginica</a>
</li>

<li>Druh<br />
<a href="https://cs.wikipedia.org/wiki/Druh">https://cs.wikipedia.org/wiki/Druh</a>
</li>

<li>Iris subg. Limniris<br />
<a href="https://en.wikipedia.org/wiki/Iris_subg._Limniris">https://en.wikipedia.org/wiki/Iris_subg._Limniris</a>
</li>

<li>Iris Dataset Classification with Python: A Tutorial<br />
<a href="https://www.pycodemates.com/2022/05/iris-dataset-classification-with-python.html">https://www.pycodemates.com/2022/05/iris-dataset-classification-with-python.html</a>
</li>

<li>Iris flower data set<br />
<a href="https://en.wikipedia.org/wiki/Iris_flower_data_set">https://en.wikipedia.org/wiki/Iris_flower_data_set</a>
</li>

<li>List of datasets for machine-learning research<br />
<a href="https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research">https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research</a>
</li>

<li>Analýza hlavních komponent<br />
<a href="https://cs.wikipedia.org/wiki/Anal%C3%BDza_hlavn%C3%ADch_komponent">https://cs.wikipedia.org/wiki/Anal%C3%BDza_hlavn%C3%ADch_komponent</a>
</li>

<li>Principal component analysis<br />
<a href="https://en.wikipedia.org/wiki/Principal_component_analysis">https://en.wikipedia.org/wiki/Principal_component_analysis</a>
</li>

<li>Scikit-learn Crash Course - Machine Learning Library for Python<br />
<a href="https://www.youtube.com/watch?v=0B5eIE_1vpU">https://www.youtube.com/watch?v=0B5eIE_1vpU</a>
</li>

<li>calm-notebooks<br />
<a href="https://github.com/koaning/calm-notebooks">https://github.com/koaning/calm-notebooks</a>
</li>

<li>Should you teach Python or R for data science?<br />
<a href="https://www.dataschool.io/python-or-r-for-data-science/">https://www.dataschool.io/python-or-r-for-data-science/</a>
</li>

<li>nbviewer: A simple way to share Jupyter Notebooks<br />
<a href="https://nbviewer.org/">https://nbviewer.org/</a>
</li>

<li>AI vs Machine Learning (Youtube)<br />
<a href="https://www.youtube.com/watch?v=4RixMPF4xis">https://www.youtube.com/watch?v=4RixMPF4xis</a>
</li>

<li>Machine Learning | What Is Machine Learning? | Introduction To Machine Learning | 2024 | Simplilearn (Youtube)<br />
<a href="https://www.youtube.com/watch?v=ukzFI9rgwfU">https://www.youtube.com/watch?v=ukzFI9rgwfU</a>
</li>

<li>A Gentle Introduction to Machine Learning (Youtube)<br />
<a href="https://www.youtube.com/watch?v=Gv9_4yMHFhI">https://www.youtube.com/watch?v=Gv9_4yMHFhI</a>
</li>

<li>Machine Learning vs Deep Learning<br />
<a href="https://www.youtube.com/watch?v=q6kJ71tEYqM">https://www.youtube.com/watch?v=q6kJ71tEYqM</a>
</li>

<li>Umělá inteligence (slajdy)<br />
<a href="https://slideplayer.cz/slide/12119218/">https://slideplayer.cz/slide/12119218/</a>
</li>

<li>Úvod do umělé inteligence<br />
<a href="https://slideplayer.cz/slide/2505525/">https://slideplayer.cz/slide/2505525/</a>
</li>

<li>Umělá inteligence I / Artificial Intelligence I<br />
<a href="https://ktiml.mff.cuni.cz/~bartak/ui/">https://ktiml.mff.cuni.cz/~bartak/ui/</a>
</li>

<li>Matplotlib vs. seaborn vs. Plotly vs. MATLAB vs. ggplot2 vs. pandas<br />
<a href="https://ritza.co/articles/matplotlib-vs-seaborn-vs-plotly-vs-MATLAB-vs-ggplot2-vs-pandas/">https://ritza.co/articles/matplotlib-vs-seaborn-vs-plotly-vs-MATLAB-vs-ggplot2-vs-pandas/</a>
</li>

<li>Matplotlib, Seaborn or Plotnine?<br />
<a href="https://www.reddit.com/r/datascience/comments/jvrqxt/matplotlib_seaborn_or_plotnine/">https://www.reddit.com/r/datascience/comments/jvrqxt/matplotlib_seaborn_or_plotnine/</a>
</li>

<li>@Rabeez: Rabeez/plotting_comparison.ipynb<br />
<a href="https://gist.github.com/Rabeez/ffc0b59d4a41e20fa8d944c44a96adbc">https://gist.github.com/Rabeez/ffc0b59d4a41e20fa8d944c44a96adbc</a>
</li>

<li>Matplotlib, Seaborn, Plotly and Plotnine Comparison<br />
<a href="https://python.plainenglish.io/matplotlib-seaborn-plotly-and-plotnine-comparison-baf2db5a9c40">https://python.plainenglish.io/matplotlib-seaborn-plotly-and-plotnine-comparison-baf2db5a9c40</a>
</li>

<li>Data Visualization 101: How to Choose a Python Plotting Library<br />
<a href="https://towardsdatascience.com/data-visualization-101-how-to-choose-a-python-plotting-library-853460a08a8a">https://towardsdatascience.com/data-visualization-101-how-to-choose-a-python-plotting-library-853460a08a8a</a>
</li>

<li>Data science in Python: pandas, seaborn, scikit-learn<br />
<a href="https://www.youtube.com/watch?v=3ZWuPVWq7p4">https://www.youtube.com/watch?v=3ZWuPVWq7p4</a>
</li>

<li>7.2. Real world datasets<br />
<a href="https://scikit-learn.org/stable/datasets/real_world.html#california-housing-dataset">https://scikit-learn.org/stable/datasets/real_world.html#california-housing-dataset</a>
</li>

<li>7.2.7. California Housing dataset<br />
<a href="https://scikit-learn.org/stable/datasets/real_world.html#california-housing-dataset">https://scikit-learn.org/stable/datasets/real_world.html#california-housing-dataset</a>
</li>

<li>Comprehensive Guide to Classification Models in Scikit-Learn<br />
<a href="https://www.geeksforgeeks.org/comprehensive-guide-to-classification-models-in-scikit-learn/">https://www.geeksforgeeks.org/comprehensive-guide-to-classification-models-in-scikit-learn/</a>
</li>

<li>Tidy Data Visualization: ggplot2 vs seaborn<br />
<a href="https://blog.tidy-intelligence.com/posts/ggplot2-vs-seaborn/">https://blog.tidy-intelligence.com/posts/ggplot2-vs-seaborn/</a>
</li>

<li>seaborn: statistical data visualization<br />
<a href="https://seaborn.pydata.org/">https://seaborn.pydata.org/</a>
</li>

<li>Linear regression (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Linear_regression">https://en.wikipedia.org/wiki/Linear_regression</a>
</li>

<li>Lineární regrese (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Line%C3%A1rn%C3%AD_regrese">https://cs.wikipedia.org/wiki/Line%C3%A1rn%C3%AD_regrese</a>
</li>

<li>Iris Flower Classification with MLP Classifier<br />
<a href="https://www.metriccoders.com/post/iris-flower-classification-with-mlp-classifier">https://www.metriccoders.com/post/iris-flower-classification-with-mlp-classifier</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

