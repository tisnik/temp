<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Shluková analýza (clustering) a knihovna Scikit-learn (3D prostor)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Shluková analýza (clustering) a knihovna Scikit-learn (3D prostor)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Třetí článek o shlukové analýze prováděné s využitím knihovny Scikit-learn je zaměřen na problematiku výpočtu shlukové analýzy v trojrozměrném prostoru (a obecně i v prostorech s vyšším počtem dimenzí).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Shluková analýza (clustering) a knihovna Scikit-learn (3D prostor)</a></p>
<p><a href="#k02">2. Krátká odbočka: Lorenzův atraktor</a></p>
<p><a href="#k03">3. Zobrazení Lorenzova atraktoru formou bodů propojených úsečkami</a></p>
<p><a href="#k04">4. Lorenzův atraktor vykreslený formou jednotlivých bodů s&nbsp;definovaným stylem zobrazení a velikostí stopy</a></p>
<p><a href="#k05">5. Pomocná metoda pro vygenerování sady bodů v&nbsp;3D prostoru</a></p>
<p><a href="#k06">6. Vygenerování sady 3D bodů s&nbsp;jejich vizualizací</a></p>
<p><a href="#k07">7. Zvětšení směrodatné odchylky při generování bodů v&nbsp;3D prostoru</a></p>
<p><a href="#k08">8. Několik různých pohledů na body v&nbsp;3D prostoru</a></p>
<p><a href="#k09">9. Zobrazení skupiny 3D bodů ze tří směrů</a></p>
<p><a href="#k10">10. Obarvení bodů na základě toho, do jakého clusteru patří</a></p>
<p><a href="#k11">11. Nalezení centroidů a provedení shlukové analýzy algoritmem K-means</a></p>
<p><a href="#k12">12. Algoritmus K-means a náhodněji rozmístěné body v&nbsp;prostoru</a></p>
<p><a href="#k13">13. Algoritmus K-means a zcela náhodně rozmístěné body v&nbsp;prostoru</a></p>
<p><a href="#k14">14. Časová náročnost algoritmu K-means</a></p>
<p><a href="#k15">15. Zdrojové kódy benchmarků</a></p>
<p><a href="#k16">16. Zobrazení vlivu počtu bodů na rychlost algoritmu K-means</a></p>
<p><a href="#k17">17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Shluková analýza (clustering) a knihovna Scikit-learn (3D prostor)</h2>

<p>V&nbsp;úvodních dvou článcích [<a
href="https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn/">1</a>]
[<a
href="https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-2/">2</a>]
o knihovně Scikit-learn a algoritmech shlukové analýzy, která tato knihovna
datovým analytikům poskytuje, jsme se zaměřili na ty nejjednodušší případy.
Konkrétně se jednalo o problémy, v&nbsp;nichž se vyskytují data, která lze
v&nbsp;případě potřeby zobrazit v&nbsp;2D prostoru (tedy například svítivost
hvězdy a její barva atd.). Taková data jsme mohli snadno zobrazit formou bodů
vynesených do takzvaného <i>korelačního diagramu</i>. A výsledkem shlukové
analýzy (ať již byla provedena jakýmkoli algoritmem) je přiřazení indexu
(čísla) clusteru každému takovému bodu ze vstupní množiny. Toto číslo můžeme
převést na barvu a opět použít korelační diagram pro vizualizaci výsledků,
tj.&nbsp;v&nbsp;tomto případě obarvených bodů v&nbsp;2D prostoru. Výsledek je
snadno pochopitelný a případné problematické chování algoritmu pro shlukovou
analýzu můžeme relativně rychle odhalit.</p>

<img src="https://i.iinfo.cz/images/593/scikit-learn-2-7.webp" class="image-1111752" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 1: Výsledek shlukové analýzy pro překrývající se oblasti
centroidů. Analýza byla provedena algoritmem K-means, který již známe.</i></p>

<p>Ovšem v&nbsp;případě, že data, která se mají analyzovat, mají vyšší
dimenzionalitu (například se jedná o údaje o teplotě, vlhkosti a tlaku), je
situace komplikovanější, protože sice můžeme na obrazovce vykreslit &bdquo;3D
graf&ldquo;, ovšem stále se bude fyzicky jednat pouze o dvoudimenzionální
obrázek, který trojdimenzionální prostor jen napodobuje. Můžeme si pomoci
některými technikami &ndash; interaktivním natáčením grafu, zobrazením grafu ze
tří (či šesti) směrů odpovídajících souřadným osám (nárys, půdorys, bokorys a
jejich protějšky), projekcí grafu z&nbsp;několika směrů na plochy tvořené
souřadnými osami atd. (což vlastně jinými slovy znamená &ndash; použijeme
nějaký výpočet pro snížení počtu dimenzí). A navíc se budou komplikovat i
samotné algoritmy pro shlukovou analýzu, protože přidání další dimenze (či
dimenzí) není triviální ani v&nbsp;počítačové grafice, ani
v&nbsp;matematice.</p>

<img src="https://i.iinfo.cz/images/581/scikit-learn-clustering-2a-7.webp" class="image-1111843" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 2: Výsledek shlukové analýzy provedené algoritmem Spectral
clustering, a to opět na dvourozměrných vstupních datech.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Krátká odbočka: Lorenzův atraktor</h2>

<p>Poměrně vděčným příkladem funkce zobrazené v&nbsp;3D prostoru je dynamický
systém s&nbsp;takzvaným <i>podivným atraktorem</i>, který je nazvaný
<i>Lorenzův atraktor</i> podle svého objevitele. Tento systém sestávající ze
tří dynamických rovnic použil Edward Lorenz v&nbsp;roce 1963 při simulaci
vývoje počasí (resp.&nbsp;ve velmi zjednodušeném modelu počasí). Na tomto
systému byla také numericky a analyticky ověřena velká citlivost na počáteční
podmínky (někdy také nazývaná &bdquo;motýlí efekt&ldquo;).</p>

<p>Pro upřesnění je však nutné říci, že při simulaci na počítači vlastně
získáme atraktor, jenž je periodický. Je tomu tak z&nbsp;toho důvodu, že pro
zobrazení číselných hodnot je použito konečného počtu bitů, z&nbsp;toho nutně
vyplývá, že se po určitém počtu kroků (který je však obrovský, takže tento jev
mnohdy nezaregistrujeme) začne dráha Lorenzova atraktoru překrývat.
V&nbsp;matematicky přesném modelu však tato situace nenastane, každá smyčka
funkce bude mít unikátní tvar a dráhy se nebudou překrývat, pouze protínat.</p>

<p>Diferenciální rovnice Lorenzova atraktoru mají po převodu na diferenční tvar
následující formát:</p>

<pre>
dx/dt = &sigma; (y-x)
dy/dt = x(&rho; - z) - y
dz/dt = xy - &Beta;z
</pre>

<p>Takže pro iterativní (samozřejmě že nepřesný) výpočet můžeme pracovat
s&nbsp;následujícími vztahy, které pro dostatečně malé <i>dt</i> vedou
k&nbsp;výpočtu bodů ležících na Lorenzově atraktoru:</p>

<pre>
x<sub>n+1</sub>=x<sub>n</sub>+(&sigma; (y-x)) dt
y<sub>n+1</sub>=y<sub>n</sub>+(x(&rho; - z) - y) dt
z<sub>n+1</sub>=z<sub>n</sub>+(xy - &Beta;z) dt
</pre>

<p>Podívejme se nyní na způsob implementace této funkce v&nbsp;Pythonu, což je
snadné:</p>

<pre>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s*(y - x)
    y_dot = r*x - y - x*z
    z_dot = x*y - b*z
    return x_dot, y_dot, z_dot
</pre>

<p>Následuje ukázka způsobu výpočtu sekvence bodů ležících na atraktoru:</p>

<pre>
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0., 1., 1.05)
&nbsp;
<i># vlastní výpočet atraktoru (resp. bodů na něm ležících)</i>
for i in range(n-1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i+1] = x[i] + x_dot * dt
    y[i+1] = y[i] + y_dot * dt
    z[i+1] = z[i] + z_dot * dt
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zobrazení Lorenzova atraktoru formou bodů propojených úsečkami</h2>

<p>Pro zobrazení průběhu reprezentovaného body vypočtenými na základě kódu <a
href="#k02">z&nbsp;předchozí kapitoly</a> můžeme použít následující postup:</p>

<ul>

<li>S&nbsp;využitím konstruktoru <strong>matplotlib.pyplot.figure</strong>
získáme instanci třídy <strong>matplotlib.figure.Figure</strong>, což je
kontejner pro vlastní grafy a diagramy.</li>

<li>Metodou <strong>add_subplot</strong> do kontejneru přidáme graf (či
diagram), což nám navíc umožní specifikovat způsob zobrazení (projekci).
Výsledkem je instance třídy <strong>matplotlib.axes.Axes</strong>.</li>

<p>Zavoláním metody <strong>matplotlib.axes.Axes.plot</strong> vykreslíme graf,
který bude obsahovat jednotlivé body propojené úsečkami (což v&nbsp;tomto
případě můžeme udělat, alespoň v&nbsp;aproximované podobě).</p>

</ul>

<p>Celý výše zmíněný postup je realizován v&nbsp;následujícím pythonovském
skriptu:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Vykreslení Lorenzova atraktoru</i>
&nbsp;
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s * (y - x)
    y_dot = r * x - y - x * z
    z_dot = x * y - b * z
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 10000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0.0, 1.0, 1.05)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># příprava 3D grafu</i>
fig = plt.figure(figsize=(6.4, 6.4))
ax = fig.add_subplot(projection="3d")
&nbsp;
<i># vykreslení grafu</i>
ax.plot(x, y, z)
&nbsp;
<i># uložení grafu do souboru</i>
plt.savefig("lorenz_attractor.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p>Takto vypadá výsledek po vizualizaci nástrojem Matplotlib:</p>

<img src="https://i.iinfo.cz/images/313/scikit-learn-3a-1.webp" class="image-1112112" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 3: Lorenzův atraktor vykreslený formou bodů propojených
úsečkami.</i></p>

<p><div class="rs-tip-major">Poznámka: graf na obrazovce lze interaktivně
natáčet, posouvat a měnit přiblížení.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Lorenzův atraktor vykreslený formou jednotlivých bodů s&nbsp;definovaným stylem zobrazení a velikostí stopy</h2>

<p>V&nbsp;dalších kapitolách budeme potřebovat v&nbsp;3D grafu zobrazit
jednotlivé body, nikoli body propojené úsečkami. Pro tento účel lze
v&nbsp;knihovně Matplotlib použít několik způsobů (například lze upravit styl
zobrazení u předchozího typu grafu), ovšem nejjednodušší a většinou i
nejrychlejší je využít metodu <strong>matplotlib.axes.Axes.scatter</strong>,
které se předají tři vektory s&nbsp;x-ovými, y-ovými a z-ovými souřadnicemi.
Tvar jednotlivých bodů se specifikuje nepovinným parametrem
<strong>marker</strong> a jejich velikost parametrem <strong>s</strong>.
Upravený skript, který toto vykreslení provede, bude vypadat následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Vykreslení Lorenzova atraktoru</i>
&nbsp;
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s * (y - x)
    y_dot = r * x - y - x * z
    z_dot = x * y - b * z
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 10000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0.0, 1.0, 1.05)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># příprava 3D grafu</i>
fig = plt.figure(figsize=(6.4, 6.4))
ax = fig.add_subplot(projection="3d")
&nbsp;
<i># vykreslení grafu</i>
ax.scatter(x, y, z, marker=".", s=1)
&nbsp;
<i># uložení grafu do souboru</i>
plt.savefig("lorenz_attractor_2.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p>Podívejme se na výsledek získaný po spuštění tohoto skriptu:</p>

<img src="https://i.iinfo.cz/images/313/scikit-learn-3a-2.webp" class="image-1112113" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 4: Lorenzův atraktor vykreslený formou jednotlivých bodů
s&nbsp;definovaným stylem zobrazení a velikostí stopy.</i></p>

<p><div class="rs-tip-major">Poznámka: samozřejmě opět platí, že graf na
obrazovce je možné interaktivně natáčet, posouvat a měnit přiblížení.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Pomocná metoda pro vygenerování sady bodů v&nbsp;3D prostoru</h2>

<p>Pro další pokusy budeme potřebovat získat vhodnou sadu bodů rozmístěných
v&nbsp;3D prostoru. Ovšem je nutné, aby tyto body nebyly rozmístěny zcela
náhodně (tam poněkud postrádá shluková analýza smysl). Existuje relativně velké
množství způsobů a algoritmů, jak body v&nbsp;prostoru rozmístit.
V&nbsp;dalších kapitolách použijeme funkci, kterou již dobře známe. Jedná se o
funkci nazvanou <strong>sklearn.datasets.make_blobs</strong>, která nejprve
vybere <i>n</i> centrálních bodů a poté rozmisťuje další body okolo těchto
center tak, že pravděpodobnost umístění bodu dále od centra klesá podle
Gaussovy křivky (teoreticky tedy může být bod umístěn v&nbsp;prostoru kdekoli,
ovšem s&nbsp;větší vzdáleností od centrálních bodů pravděpodobnost jeho
umístění do daného místa klesá &ndash; což si ověříme vizuálně).</p>

<p>Minule i předminule jsme funkcí <strong>sklearn.datasets.make_blobs</strong>
vytvořili sadu bodů v&nbsp;rovině. Aby se generovaly 3D souřadnice
(popř.&nbsp;i souřadnice do n-dimenzionálního prostoru), je nutné této funkci
mj.&nbsp;předat i parametr <strong>n_features</strong> s&nbsp;požadovaným
počtem souřadnic pro každý bod:</p>

<pre>
samples, labels = make_blobs(
    n_samples=n_samples, <strong>n_features=3</strong>, centers=n_components,
    cluster_std=0.80, random_state=0
)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vygenerování sady 3D bodů s&nbsp;jejich vizualizací</h2>

<p>Nyní již máme k&nbsp;dispozici všechny potřebné znalosti proto, abychom si
nechali vygenerovat sadu bodů v&nbsp;prostoru, které se budou shlukovat okolo
několika center (bude jich celkem osm, ovšem samozřejmě se jedná o
konfigurovatelný parametr) a následně jsme si mohli tyto body zobrazit na
grafu. Celý postup je realizován v&nbsp;tomto skriptu:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Vykreslení bodů v 3D prostoru</i>
&nbsp;
import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import make_blobs
&nbsp;
&nbsp;
<i># celkový počet vypočtených bodů</i>
n_samples = 10000
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 8
&nbsp;
samples, labels = make_blobs(
    n_samples=n_samples, n_features=3, centers=n_components,
    cluster_std=0.80, random_state=0
)
&nbsp;
<i># příprava 3D grafu</i>
fig = plt.figure(figsize=(6.4, 6.4))
ax = fig.add_subplot(projection="3d")
&nbsp;
<i># vykreslení grafu</i>
ax.scatter(samples[:,0], samples[:,1], samples[:,2], marker=".", s=1)
&nbsp;
<i># uložení grafu do souboru</i>
plt.savefig("blobs_3D.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p>Výsledkem činnosti tohoto skriptu bude graf s&nbsp;celkem 10000 body:</p>

<img src="https://i.iinfo.cz/images/313/scikit-learn-3a-3.webp" class="image-1112114" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 5: 10000 bodů, které se seskupují okolo osmi center.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zvětšení směrodatné odchylky při generování bodů v&nbsp;3D prostoru</h2>

<p>Modifikací nepovinného parametru <strong>cluster_std</strong> předaného do
funkce <strong>sklearn.datasets.make_blobs</strong> se specifikuje hodnota <a
href="https://cs.wikipedia.org/wiki/Sm%C4%9Brodatn%C3%A1_odchylka">směrodatné
odchylky</a> využité při generování bodů v&nbsp;prostoru. Čím menší je tato
hodnota, tím více se budou výsledné body přibližovat svému centrálnímu bodu a
naopak. Pokud tedy hodnotu směrodatné odchylky zvětšíme, budou body rozmístěny
v&nbsp;prostoru dále od centrálních bodů a oblasti centrálních bodů se mohou
začít překrývat (což přesně potřebujeme, abychom mohli odhadnout kvality
algoritmů pro shlukovou analýzu). Pokusme se tedy směrodatnou odchylku nastavit
na hodnotu 1,8:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Vykreslení bodů v 3D prostoru</i>
&nbsp;
import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import make_blobs
&nbsp;
&nbsp;
<i># celkový počet vypočtených bodů</i>
n_samples = 10000
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 8
&nbsp;
samples, labels = make_blobs(
    n_samples=n_samples, n_features=3, centers=n_components,
    <strong>cluster_std=1.80</strong>, random_state=0
)
&nbsp;
<i># příprava 3D grafu</i>
fig = plt.figure(figsize=(6.4, 6.4))
ax = fig.add_subplot(projection="3d")
&nbsp;
<i># vykreslení grafu</i>
ax.scatter(samples[:,0], samples[:,1], samples[:,2], marker=".", s=1)
&nbsp;
<i># uložení grafu do souboru</i>
plt.savefig("blobs_3D_spread.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<p>Výsledný graf by měl vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/313/scikit-learn-3a-4.webp" class="image-1112115" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 6: 10000 bodů, které se seskupují okolo osmi center, ovšem
s&nbsp;větší směrodatnou odchylkou.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Několik různých pohledů na body v&nbsp;3D prostoru</h2>

<p>Z&nbsp;předchozích obrázků není zřejmé, zda body netvoří pouze shluky
v&nbsp;rovině (přesněji řečeno v&nbsp;několika rovinách), protože je zobrazen
pohled na ně pouze z&nbsp;jediného místa. Ovšem knihovna Matplotlib umožňuje
natočení celého 3D grafu, což nám umožní nechat si vytvořit několik obrázků,
typicky s&nbsp;nárysem, půdorysem a bokorysem. Natočení se specifikuje metodou
<strong>mpl_toolkits.mplot3d.axes3d.Axes3D.view_init</strong>, které se předává
dvojice úhlů <i>elevation</i>, <i>azimuth</i> a <i>roll</i>. Posledním úhlem se
specifikuje natočení kamery podle osy objektivu, takže tento úhel ponecháme na
nule.</p>

<p>Hodnoty prvních dvou úhlů mohou být jakékoli, ovšem pro zobrazení tak, aby
byla s&nbsp;rovinou obrázku rovnoběžná některá rovina tvořená osami, se
používají pouze násobky 90&deg; (tím zajistíme zobrazení nárysu, půdorysu,
bokorysu a jejich zrcadlových protějšků &ndash; alternativně lze navíc vypnout
3D projekci):</p>

<table>
<tr><th>Rovina rovnoběžná s&nbsp;obrázkem</th><th>Elevation</th><th>Azimuth</th></tr>
<tr><td> XY</td><td> 90&deg;</td><td>-90&deg;</td></tr>
<tr><td> XZ</td><td>  0&deg;</td><td>-90&deg;</td></tr>
<tr><td> YZ</td><td>  0&deg;</td><td>  0&deg;</td></tr>
<tr><td>-XY</td><td>-90&deg;</td><td> 90&deg;</td></tr>
<tr><td>-XZ</td><td>  0&deg;</td><td> 90&deg;</td></tr>
<tr><td>-YZ</td><td>  0&deg;</td><td>180&deg;</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: viz též <a
href="https://matplotlib.org/stable/gallery/mplot3d/view_planes_3d.html">https://matplotlib.org/stable/gallery/mplot3d/view_planes_3d.html</a>.</div></p>

<p>Prakticky bude celý postup vypadat následovně. Nejdříve vytvoříme kontejner
pro graf a vložíme do něj graf (s&nbsp;případným povolením 3D projekce):</p>

<pre>
fig = plt.figure(figsize=(6.4, 6.4))
ax = fig.add_subplot(projection="3d")
</pre>

<p>Dále lze před či po vykreslení bodů specifikovat způsob pohledu na graf:</p>

<pre>
ax.view_init(elevation, azimuth, roll)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Zobrazení skupiny 3D bodů ze tří směrů</h2>

<p>Modifikace příkladu, který v&nbsp;prostoru pseudonáhodně rozmístí 10000 bodů
a posléze je zobrazí ze tří směrů (nárys, půdorys, bokorys, ovšem stále
s&nbsp;nastavenou 3D projekcí) může vypadat následovně:</p>

<p></p>
<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Vykreslení bodů v 3D prostoru</i>
&nbsp;
import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import make_blobs
&nbsp;
&nbsp;
<i># celkový počet vypočtených bodů</i>
n_samples = 10000
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 8
&nbsp;
samples, labels = make_blobs(
    n_samples=n_samples, n_features=3, centers=n_components,
    cluster_std=1.20, random_state=0
)
&nbsp;
<i># příprava 3D grafu</i>
fig = plt.figure(figsize=(6.4, 6.4))
ax = fig.add_subplot(projection="3d")
ax.set_xlabel("X")
ax.set_ylabel("Y")
ax.set_zlabel("Z")
&nbsp;
<i># vykreslení grafu</i>
ax.scatter(samples[:,0], samples[:,1], samples[:,2], marker=".", s=1)
&nbsp;
<i># uložení grafu do souboru</i>
<strong>ax.view_init(90, -90, 0)</strong>
plt.savefig("blobs_view_1.png")
&nbsp;
<strong>ax.view_init(0, -90, 0)</strong>
plt.savefig("blobs_view_2.png")
&nbsp;
<strong>ax.view_init(0, 0, 0)</strong>
plt.savefig("blobs_view_3.png")
</pre>

<p>A takto by měly vypadat výsledné obrázky získané po spuštění skriptu:</p>

<img src="https://i.iinfo.cz/images/313/scikit-learn-3a-5.webp" class="image-1112116" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 7: Pohled na 3D body s&nbsp;použitím Elevation=90&deg; a Azimuth=-90&deg;</i></p>

<img src="https://i.iinfo.cz/images/313/scikit-learn-3a-6.webp" class="image-1112117" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 8: Pohled na 3D body s&nbsp;použitím Elevation=0&deg; a Azimuth=-90&deg;</i></p>

<img src="https://i.iinfo.cz/images/313/scikit-learn-3a-7.webp" class="image-1112118" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 9: Pohled na 3D body s&nbsp;použitím Elevation=0&deg; a Azimuth=0&deg;</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Obarvení bodů na základě toho, do jakého clusteru patří</h2>

<p>Postup pro obarvení bodů na základě toho, do jakého clusteru patří, jsme si
již popsali v&nbsp;úvodním článku, takže tento postup pouze rozšíříme do 3D
prostoru. Připomeňme si, že funkce <strong>sklearn.datasets.make_blobs</strong>
vrací nejenom souřadnice bodů (v&nbsp;prostoru s&nbsp;libovolným počtem
dimenzí), ale i index (celé číslo) udávající oblast (řekněme poněkud nepřesně
<i>cluster</i>), do které daný bod náleží. Tuto hodnotu můžeme využít ke dvěma
účelům:</p>

<ol>
<li>Pro ověření algoritmu pro shlukovou analýzu</li>
<li>Pro vizualizaci bodů, přesněji řečeno pro jejich obarvení podle oblasti</li>
</ol>

<p>Vyzkoušejme si nyní obarvení bodů podle oblasti. Je to snadné a vlastně
zcela nezávislé na tom, zda body leží v&nbsp;rovině nebo v&nbsp;prostoru.
Vytvoříme si seznam (či n-tici) s&nbsp;osmi kódy barev, protože body jsou
vytvářeny v&nbsp;osmi oblastech:</p>

<pre>
colors = ["#4444cc", "#44bb44", "#cc4444", "#cccc44", "#44cccc", "#cc44cc", "#cccccc", "#000000"]
</pre>

<p>Dále budeme iterovat přes prvky této kolekce a vykreslíme pouze ty body,
které mají shodnou hodnotu <i>label</i> s&nbsp;indexem barvy (0-7):</p>

<pre>
for i, color in enumerate(colors):
    ...
    ...
    ...
</pre>

<p>Jak se vlastně provádí výběr bodů z&nbsp;dvourozměrného pole? Nejprve si
vytvoříme pomocný vektor obsahující pouze 0 a 1, kde 1 znamená, že se má
příslušný bod vybrat. Tento vektor bude použit jako <i>selektor</i> do
původního dvourozměrného pole se souřadnicemi:</p>

<pre>
for i, color in enumerate(colors):
    selector = labels == i
</pre>

<p>Nyní již stačí provést výběr z&nbsp;původního 3D pole s&nbsp;množinou bodů a
následně pouze vybrané body vykreslit:</p>

<pre>
    ax.scatter(samples[selector,0], samples[selector,1], samples[selector,2], marker=".", s=1)
</pre>

<p>Celý skript bude vypadat následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Vykreslení bodů v 3D prostoru</i>
&nbsp;
import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import make_blobs
&nbsp;
&nbsp;
<i># celkový počet vypočtených bodů</i>
n_samples = 10000
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 8
&nbsp;
samples, labels = make_blobs(
    n_samples=n_samples, n_features=3, centers=n_components,
    cluster_std=0.80, random_state=0
)
&nbsp;
<i># barvy použité pro obarvení bodů</i>
colors = ["#4444cc", "#44bb44", "#cc4444", "#cccc44", "#44cccc", "#cc44cc", "#cccccc", "#000000"]
&nbsp;
<i># příprava 3D grafu</i>
fig = plt.figure(figsize=(6.4, 6.4))
ax = fig.add_subplot(projection="3d")
ax.set_xlabel("X")
ax.set_ylabel("Y")
ax.set_zlabel("Z")
&nbsp;
<i># vykreslení grafu</i>
for i, color in enumerate(colors):
    selector = labels == i
    ax.scatter(samples[selector,0], samples[selector,1], samples[selector,2], marker=".", s=1)
&nbsp;
<i># uložení grafu do souboru</i>
plt.savefig("colorized_blobs_3D.png")
&nbsp;
<i># uložení grafu do souboru</i>
ax.view_init(90, -90, 0)
plt.savefig("colorized_blobs_view_1.png")
&nbsp;
ax.view_init(0, -90, 0)
plt.savefig("colorized_blobs_view_2.png")
&nbsp;
ax.view_init(0, 0, 0)
plt.savefig("colorized_blobs_view_3.png")
</pre>

<p>Získané výsledky ukazují, že náš postup je korektní:</p>

<img src="https://i.iinfo.cz/images/313/scikit-learn-3a-8.webp" class="image-1112119" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 10: 3D projekce a pohled na obarvené body.</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-1.webp" class="image-1112120" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 11: Pohled na obarvené 3D body s&nbsp;použitím Elevation=90&deg; a Azimuth=-90&deg;</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-2.webp" class="image-1112121" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 12: Pohled na obarvené 3D body s&nbsp;použitím Elevation=0&deg; a Azimuth=-90&deg;</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-3.webp" class="image-1112123" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 13: Pohled na obarvené 3D body s&nbsp;použitím Elevation=0&deg; a Azimuth=0&deg;</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Nalezení centroidů a provedení shlukové analýzy algoritmem K-means</h2>

<p>Následuje nejdůležitější krok &ndash; vlastní provedení shlukové analýzy.
Použijeme přitom opět algoritmus K-means, který není omezen pouze na 2D rovinu.
Je tomu tak proto, že tento algoritmus je založen na předpokladu, že vstupní
objekty jsou chápány jako skutečné body v&nbsp;nějakém eukleidovském prostoru a
již dopředu víme, kolik shluků (clusterů) má existovat. A eukleidovský prostor
může být i trojrozměrný (resp.&nbsp;n-rozměrný). Algoritmus K-means nejprve
nalezne takzvané <i>centroidy</i> a následně jsou vstupní objekty (body)
zařazeny k&nbsp;tomu centroidu, který je k&nbsp;bodu nejblíže. Poté se provádí
další iterace; centroidy se přesunou do těžiště clusteru a provede se nové
přiřazení.</p>

<p>Díky tomu, že již algoritmus K-means dobře známe, můžeme bez dalšího
podrobnějšího popisu přistoupit k&nbsp;jeho použití. Oproti příkladům
z&nbsp;předchozích dvou článků pouze nesmíme zapomenout na správné vyplnění
parametru <strong>n_clusters</strong>, protože budeme hledat osm centroidů:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Vykreslení bodů v 3D prostoru</i>
&nbsp;
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs
&nbsp;
&nbsp;
<i># celkový počet vypočtených bodů</i>
n_samples = 10000
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 8
&nbsp;
samples, _ = make_blobs(
    n_samples=n_samples, n_features=3, centers=n_components,
    cluster_std=0.80, random_state=0
)
&nbsp;
<i># barvy použité pro obarvení bodů</i>
colors = ["#4444cc", "#44bb44", "#cc4444", "#cccc44", "#44cccc", "#cc44cc", "#cccccc", "#000000"]
&nbsp;
<i># příprava 3D grafu</i>
fig = plt.figure(figsize=(6.4, 6.4))
ax = fig.add_subplot(projection="3d")
ax.set_xlabel("X")
ax.set_ylabel("Y")
ax.set_zlabel("Z")
&nbsp;
<i># clustering</i>
kmeans = KMeans(n_clusters=n_components, random_state=0, n_init="auto").fit(samples)
&nbsp;
<i># vykreslit centra nalezených oblastí</i>
ax.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], kmeans.cluster_centers_[:, 2], c="red", s=50)
&nbsp;
<i># vykreslení bodů s jejich přiřazením ke clusteru</i>
for i, color in enumerate(colors):
    selector = kmeans.labels_ == i
    ax.scatter(samples[selector,0], samples[selector,1], samples[selector,2], marker=".", s=1)
&nbsp;
<i># uložení grafu do souboru</i>
plt.savefig("kmeans_blobs_3D.png")
&nbsp;
<i># uložení grafu do souboru</i>
ax.view_init(90, -90, 0)
plt.savefig("kmeans_blobs_view_1.png")
&nbsp;
ax.view_init(0, -90, 0)
plt.savefig("kmeans_blobs_view_2.png")
&nbsp;
ax.view_init(0, 0, 0)
plt.savefig("kmeans_blobs_view_3.png")
</pre>

<p>Opět se samozřejmě podívejme na výsledky získané shlukovou analýzou:</p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-4.webp" class="image-1112124" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 14: 3D projekce a pohled na výsledek shlukové analýzy</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-5.webp" class="image-1112125" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 15: Pohled na výsledek shlukové analýzy s&nbsp;použitím Elevation=90&deg; a Azimuth=-90&deg;</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-6.webp" class="image-1112126" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 16: Pohled na výsledek shlukové analýzy s&nbsp;použitím Elevation=0&deg; a Azimuth=-90&deg;</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-7.webp" class="image-1112127" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 17: Pohled na výsledek shlukové analýzy s&nbsp;použitím Elevation=0&deg; a Azimuth=0&deg;</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Algoritmus K-means a náhodněji rozmístěné body v&nbsp;prostoru</h2>

<p>Z&nbsp;příkladů v&nbsp;2D jsme se dozvěděli, že pokud jsou body
v&nbsp;rovině rozmístěny náhodněji (a navíc pokud se budou oblasti centroidů
překrývat), začne výsledek připomínat Voronoiův diagram:</p>

<img src="https://i.iinfo.cz/images/593/scikit-learn-2-7.webp" class="image-1111752" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 18: Výsledek clusteringu pro překrývající se oblasti centroidů.</i></p>

<p>Jak tomu bude v&nbsp;3D prostoru? Můžeme si to vyzkoušet tak, že budeme
postupně zvětšovat směrodatnou odchylku (viz <a href="#k07">sedmou kapitolu</a>):</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Vykreslení bodů v 3D prostoru</i>
&nbsp;
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs
&nbsp;
&nbsp;
<i># celkový počet vypočtených bodů</i>
n_samples = 10000
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 8
&nbsp;
samples, _ = make_blobs(
    n_samples=n_samples, n_features=3, centers=n_components,
    <strong>cluster_std=1.80</strong>, random_state=0
)
&nbsp;
<i># barvy použité pro obarvení bodů</i>
colors = ["#4444cc", "#44bb44", "#cc4444", "#cccc44", "#44cccc", "#cc44cc", "#cccccc", "#000000"]
&nbsp;
<i># příprava 3D grafu</i>
fig = plt.figure(figsize=(6.4, 6.4))
ax = fig.add_subplot(projection="3d")
ax.set_xlabel("X")
ax.set_ylabel("Y")
ax.set_zlabel("Z")
&nbsp;
<i># clustering</i>
kmeans = KMeans(n_clusters=n_components, random_state=0, n_init="auto").fit(samples)
&nbsp;
<i># vykreslit centra nalezených oblastí</i>
ax.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], kmeans.cluster_centers_[:, 2], c="red", s=50)
&nbsp;
<i># vykreslení bodů s jejich přiřazením ke clusteru</i>
for i, color in enumerate(colors):
    selector = kmeans.labels_ == i
    ax.scatter(samples[selector,0], samples[selector,1], samples[selector,2], marker=".", s=1)
&nbsp;
<i># uložení grafu do souboru</i>
plt.savefig("kmeans_spread_blobs_3D.png")
&nbsp;
<i># uložení grafu do souboru</i>
ax.view_init(90, -90, 0)
plt.savefig("kmeans_spread_blobs_view_1.png")
&nbsp;
ax.view_init(0, -90, 0)
plt.savefig("kmeans_spread_blobs_view_2.png")
&nbsp;
ax.view_init(0, 0, 0)
plt.savefig("kmeans_spread_blobs_view_3.png")
</pre>

<p>Výsledky:</p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-8.webp" class="image-1112128" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 19: 3D projekce a pohled na výsledek shlukové analýzy</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-9.webp" class="image-1112129" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 20: Pohled na výsledek shlukové analýzy s&nbsp;použitím Elevation=90&deg; a Azimuth=-90&deg;</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-10.webp" class="image-1112130" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 21: Pohled na výsledek shlukové analýzy s&nbsp;použitím Elevation=0&deg; a Azimuth=-90&deg;</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-11.webp" class="image-1112131" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 22: Pohled na výsledek shlukové analýzy s&nbsp;použitím Elevation=0&deg; a Azimuth=0&deg;</i></p>

<p>Ještě více náhodné rozmístění bodů společně se zvýšením jejich počtu:</p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-12.webp" class="image-1112132" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 23: 3D projekce a pohled na výsledek shlukové analýzy</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-13.webp" class="image-1112133" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 24: Pohled na výsledek shlukové analýzy s&nbsp;použitím Elevation=90&deg; a Azimuth=-90&deg;</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-14.webp" class="image-1112134" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 25: Pohled na výsledek shlukové analýzy s&nbsp;použitím Elevation=0&deg; a Azimuth=-90&deg;</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-15.webp" class="image-1112135" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 26: Pohled na výsledek shlukové analýzy s&nbsp;použitím Elevation=0&deg; a Azimuth=0&deg;</i></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že vizualizace 3D grafů
již není v&nbsp;žádném případě tak přehledná, jako tomu bylo u 2D grafů. A
v&nbsp;případě shlukové analýzy pro ještě větší počet dimenzí to bude
pochopitelně ještě horší.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Algoritmus K-means a zcela náhodně rozmístěné body v&nbsp;prostoru</h2>

<p>Zajímavé bude zjistit, jak algoritmus K-means rozdělí oblast, v&nbsp;níž
budou body rozmístěny zcela náhodně. Budeme přitom chtít detekovat osm oblastí.
Proč právě osm bude patrné při pohledu na obrázky s&nbsp;obarvenými body, které
tímto způsobem získáme:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># Vykreslení bodů v 3D prostoru</i>
&nbsp;
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
from sklearn.cluster import KMeans
&nbsp;
&nbsp;
<i># počet oblastí, kam se budou data sdružovat</i>
n_components = 8
&nbsp;
<i># počet vygenerovaných bodů</i>
n_samples = 50000
&nbsp;
samples = np.random.rand(n_samples, 3)
&nbsp;
<i># barvy použité pro obarvení bodů</i>
colors = ["#4444cc", "#44bb44", "#cc4444", "#cccc44", "#44cccc", "#cc44cc", "#cccccc", "#000000"]
&nbsp;
<i># příprava 3D grafu</i>
fig = plt.figure(figsize=(6.4, 6.4))
ax = fig.add_subplot(projection="3d")
ax.set_xlabel("X")
ax.set_ylabel("Y")
ax.set_zlabel("Z")
&nbsp;
<i># clustering</i>
kmeans = KMeans(n_clusters=n_components, random_state=0, n_init="auto").fit(samples)
&nbsp;
<i># vykreslit centra nalezených oblastí</i>
ax.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], kmeans.cluster_centers_[:, 2], c="red", s=50)
&nbsp;
<i># vykreslení bodů s jejich přiřazením ke clusteru</i>
for i, color in enumerate(colors):
    selector = kmeans.labels_ == i
    ax.scatter(samples[selector,0], samples[selector,1], samples[selector,2], marker=".", s=1)
&nbsp;
<i># uložení grafu do souboru</i>
plt.savefig("kmeans_spread_random_3D.png")
&nbsp;
<i># uložení grafu do souboru</i>
ax.view_init(90, -90, 0)
plt.savefig("kmeans_spread_random_view_1.png")
&nbsp;
ax.view_init(0, -90, 0)
plt.savefig("kmeans_spread_random_view_2.png")
&nbsp;
ax.view_init(0, 0, 0)
plt.savefig("kmeans_spread_random_view_3.png")
</pre>

<p>Ze zobrazených výsledků je patrné, že centroidy byly nalezeny ve středech
osmi pomyslných krychlí, které celý prostor rozdělí na osm prakticky shodných
oblastí:</p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-16.webp" class="image-1112136" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 27: 3D projekce a pohled na výsledek shlukové analýzy</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-17.webp" class="image-1112137" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 28: Pohled na výsledek shlukové analýzy s&nbsp;použitím Elevation=90&deg; a Azimuth=-90&deg;</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-18.webp" class="image-1112138" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 29: Pohled na výsledek shlukové analýzy s&nbsp;použitím Elevation=0&deg; a Azimuth=-90&deg;</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-19.webp" class="image-1112139" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 30: Pohled na výsledek shlukové analýzy s&nbsp;použitím Elevation=0&deg; a Azimuth=0&deg;</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Časová náročnost algoritmu K-means</h2>

<p>Časová složitost algoritmu K-means je pochopitelně závislá na počtu bodů,
které se mají rozdělit do oblastí shlukovou analýzou. Ovšem bude závislá i na
náhodnosti či naopak nějaké regularitě v&nbsp;rozmístění bodů? To se pokusíme
zjistit s&nbsp;využitím tří benchmarků, které budou provádět tato měření:</p>

<ol>
<li>Benchmark pro postupně rostoucí počet bodů tvořících shluky</li>
<li>Benchmark pro postupně rostoucí počet bodů rozmístěných náhodně</li>
<li>Benchmark pro stále stejný počet bodů, u jejichž rozmístění v&nbsp;prostoru se používá stále větší směrodatná odchylka</li>
</ol>



<p><a name="k15"></a></p>
<h2 id="k15">15. Zdrojové kódy benchmarků</h2>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
from time import perf_counter
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs
&nbsp;
&nbsp;
def <strong>run_k_means</strong>(n_samples):
    # počet oblastí, kam se budou data sdružovat
    n_components = 8
&nbsp;
    samples, _ = make_blobs(
        n_samples=n_samples, n_features=3, centers=n_components,
        cluster_std=0.80, random_state=0
    )
&nbsp;
    # clustering
    kmeans = KMeans(n_clusters=n_components, random_state=0, n_init="auto").fit(samples)
&nbsp;
&nbsp;
x = []
y = []
&nbsp;
for i in range(10000, 1000000, 10000):
    started = perf_counter()
    run_k_means(i)
    finished = perf_counter()
    duration = finished - started
    x.append(i)
    y.append(duration)
    print(i, duration)
&nbsp;
plt.figure(1)
plt.plot(x, y, marker="o")
plt.savefig("benchmark1.png")
plt.show()
</pre>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
from time import perf_counter
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
from sklearn.cluster import KMeans
&nbsp;
&nbsp;
def <strong>run_k_means</strong>(n_samples):
    # počet oblastí, kam se budou data sdružovat
    n_components = 8
&nbsp;
    samples = np.random.rand(n_samples, 3)
&nbsp;
    # clustering
    kmeans = KMeans(n_clusters=n_components, random_state=0, n_init="auto").fit(samples)
&nbsp;
&nbsp;
x = []
y = []
&nbsp;
for i in range(10000, 1000000, 10000):
    started = perf_counter()
    run_k_means(i)
    finished = perf_counter()
    duration = finished - started
    x.append(i)
    y.append(duration)
    print(i, duration)
&nbsp;
plt.figure(1)
plt.plot(x, y, marker="o")
plt.savefig("benchmark3.png")
plt.show()
</pre>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
from time import perf_counter
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs
&nbsp;
&nbsp;
def <strong>run_k_means</strong>(n_samples, std):
    # počet oblastí, kam se budou data sdružovat
    n_components = 8
&nbsp;
    samples, _ = make_blobs(
        n_samples=n_samples, n_features=3, centers=n_components,
        cluster_std=std, random_state=0
    )
&nbsp;
    # clustering
    kmeans = KMeans(n_clusters=n_components, random_state=0, n_init="auto").fit(samples)
&nbsp;
&nbsp;
x = []
y = []
&nbsp;
for i in range(0, 100):
    std = i / 10.0
    started = perf_counter()
    run_k_means(20000, std)
    finished = perf_counter()
    duration = finished - started
    x.append(std)
    y.append(duration)
    print(std, duration)
&nbsp;
plt.figure(1)
plt.plot(x, y, marker="o")
plt.savefig("benchmark4.png")
plt.show()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Zobrazení vlivu počtu bodů na rychlost algoritmu K-means</h2>

<p>Předností standardně implementovaného algoritmu K-means je fakt, že je jeho
časová složitost pouze lineární a závislá jak na počtu centroidů, tak na počtu
vstupních bodů. Ovšem pozor: to platí pro algoritmus s&nbsp;pevným počtem
iterací, protože jeho &bdquo;ideální&ldquo; podoba, která vrací ideální
rozdělení bodů, je NP-složitá!:</p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-20.webp" class="image-1112140" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 31: Benchmark pro postupně rostoucí počet bodů tvořících shluky.</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-22.webp" class="image-1112141" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 32: Benchmark pro postupně rostoucí počet bodů tvořících shluky s&nbsp;větší směrodatnou odchylkou.</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-21.webp" class="image-1112142" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 33: Benchmark pro postupně rostoucí počet bodů rozmístěných náhodně.</i></p>

<img src="https://i.iinfo.cz/images/82/scikit-learn-3b-23.webp" class="image-1112142" width="640" height="640" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" />
<p><i>Obrázek 34: Benchmark pro stále stejný počet bodů, u jejichž rozmístění v&nbsp;prostoru se používá stále větší směrodatná odchylka.</i></p>

<p><div class="rs-tip-major">Poznámka: k&nbsp;těmto grafům se ještě vrátíme u
dalších algoritmů pro shlukovou analýzu, které již nemají tak
&bdquo;příjemnou&ldquo; časovou složitost.</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady využívající knihovnu Scikit-learn lze nalézt
v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady i na (Jupyter) diáře s&nbsp;postupem
výpočtů a analýz:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>01_show_matrix.py</td><td>kooperace mezi knihovnami Matplotlib a NumPy: vizualizace obsahu 2D matice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/01_show_matrix.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/01_show_matrix.py</a></td></tr>
<tr><td> 2</td><td>02_get_digits.py</td><td>datová množina obsahující naskenované ručně napsané číslice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/02_get_digits.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/02_get_digits.py</a></td></tr>
<tr><td> 3</td><td>03_get_features.py</td><td>další atributy datové množiny, které použijeme při trénování</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/03_get_features.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/03_get_features.py</a></td></tr>
<tr><td> 4</td><td>04_get_images.py</td><td>přečtení a následné vykreslení jednotlivých ručně nakreslených číslic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/04_get_images.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/04_get_images.py</a></td></tr>
<tr><td> 5</td><td>05_show_grayscale_matrix.py</td><td>odstranění umělé aplikované barvové palety (obrázky ve stupních šedi)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/05_show_grayscale_matrix.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/05_show_grayscale_matrix.py</a></td></tr>
<tr><td> 6</td><td>06_grayscale_images.py</td><td>vykreslení ručně nakreslených číslic ve formě obrázků ve stupních šedi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/06_grayscale_images.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/06_grayscale_images.py</a></td></tr>
<tr><td> 7</td><td>07_multiplot.py</td><td>rozdělení plochy grafu do oblastí; vykreslení více obrázků do jediného grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/07_multiplot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/07_multiplot.py</a></td></tr>
<tr><td> 8</td><td>08_model_preperation_1.py</td><td>obrázky s&nbsp;jejich ohodnocením</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/08_model_preperation_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/08_model_preperation_1.py</a></td></tr>
<tr><td> 9</td><td>09_training_set.py</td><td>příprava dat pro trénink</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/09_training_set.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/09_training_set.py</a></td></tr>
<tr><td>10</td><td>10_classification.py</td><td>klasifikace obrázků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/10_classification.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/10_classification.py</a></td></tr>
<tr><td>11</td><td>11_results.py</td><td>vykreslení obrázků společně s&nbsp;jejich klasifikací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/11_results.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/11_results.py</a></td></tr>
<tr><td>12</td><td>12_change_training_set.py</td><td>změna poměru rozdělení dat na tréninkovou a testovací množinu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/12_change_training_set.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/12_change_training_set.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>13_blobs.py</td><td>použití funkce <strong>make_blobs</strong> pro vygenerování sady bodů v&nbsp;rovině sdružených do oblastí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/13_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/13_blobs.py</a></td></tr>
<tr><td>14</td><td>14_swap_coords.py</td><td>úprava předchozího příkladu: prohození souřadnic na osách</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/14_swap_coords.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/14_swap_coords.py</a></td></tr>
<tr><td>15</td><td>15_blobs_scatter_plot.py</td><td>základní podoba bodového diagramu (<i>scatter plot</i>)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/15_blobs_scatter_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/15_blobs_scatter_plot.py</a></td></tr>
<tr><td>16</td><td>16_blobs_scatter_plot.py</td><td>úprava bodového diagramu při zobrazení většího množství bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/16_blobs_scatter_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/16_blobs_scatter_plot.py</a></td></tr>
<tr><td>17</td><td>17_colorized_blobs.py</td><td>obarvení bodů podle oblastí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/17_colorized_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/17_colorized_blobs.py</a></td></tr>
<tr><td>18</td><td>18_k-means.py</td><td>základní použití algoritmu K-means pro clustering</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/18_k-means.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/18_k-means.py</a></td></tr>
<tr><td>19</td><td>19_combination.py</td><td>zobrazení centroidů společně s&nbsp;původními body</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/19_combination.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/19_combination.py</a></td></tr>
<tr><td>20</td><td>20_combinations.py</td><td>vizualizace clusteringu původní množiny bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/20_combinations.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/20_combinations.py</a></td></tr>
<tr><td>21</td><td>21_other_settings.py</td><td>vizualizace clusteringu původní množiny bodů pro odlišnou množinu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/21_other_settings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/21_other_settings.py</a></td></tr>
<tr><td>22</td><td>22_random_points.py</td><td>clustering pro náhodná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/22_random_points.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/22_random_points.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>23_circles.py</td><td>pseudonáhodné rozmístění bodů do kružnic, menší náhodnost výsledku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/23_circles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/23_circles.py</a></td></tr>
<tr><td>24</td><td>24_more_noise_circles.py</td><td>pseudonáhodné rozmístění bodů do kružnic, větší náhodnost výsledku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/24_more_noise_circles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/24_more_noise_circles.py</a></td></tr>
<tr><td>25</td><td>25_moons.py</td><td>pseudonáhodné rozmístění bodů do tvaru dvou půlměsíců, menší náhodnost</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/25_moons.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/25_moons.py</a></td></tr>
<tr><td>26</td><td>26_more_noisy_moons.py</td><td>pseudonáhodné rozmístění bodů do tvaru dvou půlměsíců, větší náhodnost</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/26_more_noisy_moons.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/26_more_noisy_moons.py</a></td></tr>
<tr><td>27</td><td>27_circles_kmeans.py</td><td>výsledek clusteringu provedeného algoritmem K-means na &bdquo;kružnice&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/27_circles_kmeans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/27_circles_kmeans.py</a></td></tr>
<tr><td>28</td><td>28_moons_kmeans.py</td><td>výsledek clusteringu provedeného algoritmem K-means na &bdquo;půlměsíce&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/28_moons_kmeans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/28_moons_kmeans.py</a></td></tr>
<tr><td>29</td><td>29_blobs_spectral_clustering.py</td><td>spectral clustering pro body rozmístěné pomocí <strong>make_blobs</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/29_blobs_spectral_clustering.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/29_blobs_spectral_clustering.py</a></td></tr>
<tr><td>30</td><td>30_circles_spectral_clustering.py</td><td>spectral clustering pro body rozmístěné do kružnic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/30_circles_spectral_clustering.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/30_circles_spectral_clustering.py</a></td></tr>
<tr><td>31</td><td>31_moons_spectral_clustering.py</td><td>spectral clustering pro body rozmístěné do půlměsíců </td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/31_moons_spectral_clustering.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/31_moons_spectral_clustering.py</a></td></tr>
<tr><td>32</td><td>32_moons_spectral_clustering_limits.py</td><td>vyhledání limitů algoritmu spectral clustering</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/32_moons_spectral_clustering_limits.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/32_moons_spectral_clustering_limits.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>33_particles_load.py</td><td>načtení souřadnic částic uložených v&nbsp;souboru formátu CSV</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/33_particles_load.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/33_particles_load.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>34</td><td>34_lorenz_attractor.py</td><td>zobrazení Lorenzova atraktoru formou bodů propojených úsečkami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/34_lorenz_attractor.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/34_lorenz_attractor.py</a></td></tr>
<tr><td>35</td><td>35_lorenz_attractor_points.py</td><td>Lorenzův atraktor vykreslený formou jednotlivých bodů s&nbsp;definovaným stylem zobrazení a velikostí stopy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/35_lorenz_attractor_points.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/35_lorenz_attractor_points.py</a></td></tr>
<tr><td>36</td><td>36_blobs_3d.py</td><td>vygenerování a zobrazení sady bodů v&nbsp;3D prostoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/36_blobs_3d.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/36_blobs_3d.py</a></td></tr>
<tr><td>37</td><td>37_spread_blobs_3d.py</td><td>vygenerování a zobrazení sady bodů v&nbsp;3D prostoru, odlišné parametry při generování</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/37_spread_blobs_3d.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/37_spread_blobs_3d.py</a></td></tr>
<tr><td>38</td><td>38_views.py</td><td>různé pohledy na 3D graf</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/38_views.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/38_views.py</a></td></tr>
<tr><td>39</td><td>39_colorized_3d_blobs.py</td><td>obarvení bodů v&nbsp;prostoru na základě vstupních dat</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/39_colorized_3d_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/39_colorized_3d_blobs.py</a></td></tr>
<tr><td>40</td><td>40_kmeans_3d_blobs.py</td><td>shluková analýza v&nbsp;3D prostoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/40_kmeans_3d_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/40_kmeans_3d_blobs.py</a></td></tr>
<tr><td>41</td><td>41_kmeans_spread_3d_blobs.py</td><td>shluková analýza v&nbsp;3D prostoru pro odlišnou množinu bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/41_kmeans_spread_3d_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/41_kmeans_spread_3d_blobs.py</a></td></tr>
<tr><td>42</td><td>42_kmeans_random_3d.py</td><td>shluková analýza pro body rozmístěné zcela náhodně v&nbsp;omezeném prostoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/42_kmeans_random_3d.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/42_kmeans_random_3d.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>43_speed_measurements.py</td><td>benchmark pro postupně rostoucí počet bodů tvořících shluky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/43_speed_measurements.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/43_speed_measurements.py</a></td></tr>
<tr><td>44</td><td>44_speed_measurements.py</td><td>benchmark pro postupně rostoucí počet bodů rozmístěných náhodně</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/44_speed_measurements.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/44_speed_measurements.py</a></td></tr>
<tr><td>45</td><td>45_speed_measurements.py</td><td>benchmark pro stále stejný počet bodů, u jejichž rozmístění v&nbsp;prostoru se používá stále větší směrodatná odchylka</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/45_speed_measurements.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/45_speed_measurements.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>46</td><td>pyproject.toml</td><td>projektový soubor (pro PDM) se všemi závislostmi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pyproject.toml">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pyproject.toml</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>47</td><td>pdm.lock</td><td>lock soubor s&nbsp;konkrétními verzemi všech přímých i tranzitivních závislostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pdm.lock">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pdm.lock</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>48</td><td>Rozpoznání_obrazu_scikit-learn.ipynb</td><td>Jupyter notebook s&nbsp;celým postupem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/Rozpoznání_obrazu_scikit-learn.ipynb">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/Rozpoznání_obrazu_scikit-learn.ipynb</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>49</td><td>particle_life.py</td><td>emergence: příklad vzniku struktury</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/particles/particle_life.py">https://github.com/tisnik/most-popular-python-libs/blob/master/particles/particle_life.py</a></td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>scikit-learn: Machine Learning in Python<br />
<a href="https://scikit-learn.org/stable/index.html">https://scikit-learn.org/stable/index.html</a>
</li>

<li>Sklearn-pandas<br />
<a href="https://github.com/scikit-learn-contrib/sklearn-pandas">https://github.com/scikit-learn-contrib/sklearn-pandas</a>
</li>

<li>sklearn-xarray<br />
<a href="https://github.com/phausamann/sklearn-xarray/">https://github.com/phausamann/sklearn-xarray/</a>
</li>

<li>Clustering<br />
<a href="https://scikit-learn.org/stable/modules/clustering.html">https://scikit-learn.org/stable/modules/clustering.html</a>
</li>

<li>Cluster analysis (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Cluster_analysis">https://en.wikipedia.org/wiki/Cluster_analysis</a>
</li>

<li>Shluková analýza (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Shlukov%C3%A1_anal%C3%BDza">https://cs.wikipedia.org/wiki/Shlukov%C3%A1_anal%C3%BDza</a>
</li>

<li>K-means<br />
<a href="https://cs.wikipedia.org/wiki/K-means">https://cs.wikipedia.org/wiki/K-means</a>
</li>

<li>k-means clustering<br />
<a href="https://en.wikipedia.org/wiki/K-means_clustering">https://en.wikipedia.org/wiki/K-means_clustering</a>
</li>

<li>Spectral clustering<br />
<a href="https://en.wikipedia.org/wiki/Spectral_clustering">https://en.wikipedia.org/wiki/Spectral_clustering</a>
</li>

<li>Emergence<br />
<a href="https://cs.wikipedia.org/wiki/Emergence">https://cs.wikipedia.org/wiki/Emergence</a>
</li>

<li>Particle Life: Vivid structures from rudimentary rules<br />
<a href="https://particle-life.com/">https://particle-life.com/</a>
</li>

<li>Hertzsprungův–Russellův diagram<br />
<a href="https://cs.wikipedia.org/wiki/Hertzsprung%C5%AFv%E2%80%93Russell%C5%AFv_diagram">https://cs.wikipedia.org/wiki/Hertzsprung%C5%AFv%E2%80%93Russell%C5%AFv_diagram</a>
</li>

<li>Using Machine Learning in an HR Diagram<br />
<a href="https://cocalc.com/share/public_paths/08b6e03583cbdef3cdb9813a54ec68ff773c747f">https://cocalc.com/share/public_paths/08b6e03583cbdef3cdb9813a54ec68ff773c747f</a>
</li>

<li>Gaia H-R diagrams: Querying Gaia data for one million nearby stars<br />
<a href="https://vlas.dev/post/gaia-dr2-hrd/">https://vlas.dev/post/gaia-dr2-hrd/</a>
</li>

<li>The Hertzsprung–Russell diagram<br />
<a href="https://scipython.com/book2/chapter-9-data-analysis-with-pandas/problems/p92/the-hertzsprung-russell-diagram/">https://scipython.com/book2/chapter-9-data-analysis-with-pandas/problems/p92/the-hertzsprung-russell-diagram/</a>
</li>

<li>Animated Hertzsprung-Russell Diagram with 119,614 datapoints<br />
<a href="https://github.com/zonination/h-r-diagram">https://github.com/zonination/h-r-diagram</a>
</li>

<li>Neuraxle Pipelines<br />
<a href="https://github.com/Neuraxio/Neuraxle">https://github.com/Neuraxio/Neuraxle</a>
</li>

<li>scikit-learn: Getting Started<br />
<a href="https://scikit-learn.org/stable/getting_started.html">https://scikit-learn.org/stable/getting_started.html</a>
</li>

<li>Support Vector Machines<br />
<a href="https://scikit-learn.org/stable/modules/svm.html">https://scikit-learn.org/stable/modules/svm.html</a>
</li>

<li>Use Deep Learning to Detect Programming Languages<br />
<a href="http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/">http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/</a>
</li>

<li>Natural-language processing<br />
<a href="https://en.wikipedia.org/wiki/Natural-language_processing">https://en.wikipedia.org/wiki/Natural-language_processing</a>
</li>

<li>THE MNIST DATABASE of handwritten digits<br />
<a href="http://yann.lecun.com/exdb/mnist/">http://yann.lecun.com/exdb/mnist/</a>
</li>

<li>MNIST database (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MNIST_database">https://en.wikipedia.org/wiki/MNIST_database</a>
</li>

<li>MNIST For ML Beginners<br />
<a href="https://www.tensorflow.org/get_started/mnist/beginners">https://www.tensorflow.org/get_started/mnist/beginners</a>
</li>

<li>Stránka projektu Torch<br />
<a href="http://torch.ch/">http://torch.ch/</a>
</li>

<li>Torch: Serialization<br />
<a href="https://github.com/torch/torch7/blob/master/doc/serialization.md">https://github.com/torch/torch7/blob/master/doc/serialization.md</a>
</li>

<li>Torch: modul image<br />
<a href="https://github.com/torch/image/blob/master/README.md">https://github.com/torch/image/blob/master/README.md</a>
</li>

<li>Data pro neuronové sítě<br />
<a href="http://archive.ics.uci.edu/ml/index.php">http://archive.ics.uci.edu/ml/index.php</a>
</li>

<li>Torch na GitHubu (několik repositářů)<br />
<a href="https://github.com/torch">https://github.com/torch</a>
</li>

<li>Torch (machine learning), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Torch_%28machine_learning%29">https://en.wikipedia.org/wiki/Torch_%28machine_learning%29</a>
</li>

<li>Torch Package Reference Manual<br />
<a href="https://github.com/torch/torch7/blob/master/README.md">https://github.com/torch/torch7/blob/master/README.md</a>
</li>

<li>Torch Cheatsheet<br />
<a href="https://github.com/torch/torch7/wiki/Cheatsheet">https://github.com/torch/torch7/wiki/Cheatsheet</a>
</li>

<li>Neural network containres (Torch)<br />
<a href="https://github.com/torch/nn/blob/master/doc/containers.md">https://github.com/torch/nn/blob/master/doc/containers.md</a>
</li>

<li>Simple layers<br />
<a href="https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear">https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear</a>
</li>

<li>Transfer Function Layers<br />
<a href="https://github.com/torch/nn/blob/master/doc/transfer.md#nn.transfer.dok">https://github.com/torch/nn/blob/master/doc/transfer.md#nn.transfer.dok</a>
</li>

<li>Feedforward neural network<br />
<a href="https://en.wikipedia.org/wiki/Feedforward_neural_network">https://en.wikipedia.org/wiki/Feedforward_neural_network</a>
</li>

<li>Biologické algoritmy (4) - Neuronové sítě<br />
<a href="https://www.root.cz/clanky/biologicke-algoritmy-4-neuronove-site/">https://www.root.cz/clanky/biologicke-algoritmy-4-neuronove-site/</a>
</li>

<li>Biologické algoritmy (5) - Neuronové sítě<br />
<a href="https://www.root.cz/clanky/biologicke-algoritmy-5-neuronove-site/">https://www.root.cz/clanky/biologicke-algoritmy-5-neuronove-site/</a>
</li>

<li>Umělá neuronová síť (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Um%C4%9Bl%C3%A1_neuronov%C3%A1_s%C3%AD%C5%A5">https://cs.wikipedia.org/wiki/Um%C4%9Bl%C3%A1_neuronov%C3%A1_s%C3%AD%C5%A5</a>
</li>

<li>PyTorch<br />
<a href="http://pytorch.org/">http://pytorch.org/</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>Matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Galerie grafů vytvořených v&nbsp;Matplotlibu<br />
<a href="https://matplotlib.org/3.2.1/gallery/">https://matplotlib.org/3.2.1/gallery/</a>
</li>

<li>3D rendering<br />
<a href="https://en.wikipedia.org/wiki/3D_rendering">https://en.wikipedia.org/wiki/3D_rendering</a>
</li>

<li>3D computer graphics<br />
<a href="https://en.wikipedia.org/wiki/3D_computer_graphics">https://en.wikipedia.org/wiki/3D_computer_graphics</a>
</li>

<li>Primary 3D view planes<br />
<a href="https://matplotlib.org/stable/gallery/mplot3d/view_planes_3d.html">https://matplotlib.org/stable/gallery/mplot3d/view_planes_3d.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

