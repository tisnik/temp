<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Standardní dialogy v&nbsp;knihovně PySide</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Standardní dialogy v&nbsp;knihovně PySide</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V již čtrnáctém článku věnovaném popisu knihovny PySide se budeme zabývat způsobem použití standardních dialogů, které je možné v&nbsp;aplikacích využít. Jedná se jak o skutečně základní dialogy (zobrazení zprávy, vstup textu), tak i o dialogy komplikovanější.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Standardní dialogy v&nbsp;knihovně PySide</a></p>
<p><a href="#k02">2. Dialog pro zobrazení zprávy uživateli</a></p>
<p><a href="#k03">3. První demonstrační příklad: jednoduchý dialog s&nbsp;ikonou a textovou zprávou</a></p>
<p><a href="#k04">4. Dialog určený pro zobrazení chybové zprávy</a></p>
<p><a href="#k05">5. Druhý demonstrační příklad: zobrazení chybové zprávy</a></p>
<p><a href="#k06">6. Jednoduché dialogy pro vstup údajů</a></p>
<p><a href="#k07">7. Vstupní dialog nakonfigurovaný pro zadání běžného textu</a></p>
<p><a href="#k08">8. Třetí demonstrační příklad: dialog pro zadání jednořádkového textu</a></p>
<p><a href="#k09">9. Vstupní dialog nakonfigurovaný pro zadání celého čísla</a></p>
<p><a href="#k10">10. Čtvrtý demonstrační příklad: dialog pro specifikaci celého čísla</a></p>
<p><a href="#k11">11. Vstupní dialog nakonfigurovaný pro zadání reálného čísla</a></p>
<p><a href="#k12">12. Pátý demonstrační příklad: dialog pro specifikaci reálného čísla</a></p>
<p><a href="#k13">13. Dialog s&nbsp;výběrem prvku ze seznamu nebo kombo boxu</a></p>
<p><a href="#k14">14. Šestý demonstrační příklad: výběr prvku z&nbsp;kombo boxu</a></p>
<p><a href="#k15">15. Sedmý demonstrační příklad: výběr prvku ze seznamu</a></p>
<p><a href="#k16">16. Standardní dialog pro výběr barvy z&nbsp;palety</a></p>
<p><a href="#k17">17. Osmý demonstrační příklad: dialog pro výběr barvy</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Standardní dialogy v&nbsp;knihovně PySide</h2>

<p>V&nbsp;dnešním článku se seznámíme s&nbsp;dalšími možnostmi nabízenými
knihovnou PySide. Podobně, jako je tomu i v&nbsp;dalších frameworcích určených
pro tvorbu aplikací s&nbsp;grafickým uživatelským rozhraním, nabízí i knihovna
PySide programátorům několik typů standardních dialogů. Tyto dialogy jsou
navrženy takovým způsobem, aby svým vzhledem i chováním odpovídaly chování
aplikací na dané platformě. Současná verze knihovny PySide nabízí tyto dialogy
(jejich třídy jsou odvozeny od obecného dialogu <strong>QDialog</strong>):</p>

<table>
<tr><th>Třída</th><th>Stručný popis</th></tr>
<tr><td><a href="#k02">QMessageBox</a></td><td>zobrazení zprávy uživateli</td></tr>
<tr><td><a href="#k04">QErrorMessage</a></td><td>zobrazení chybové zprávy popř.&nbsp;průběžně se doplňujících informací</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td><a href="#k06">QInputDialog</a></td><td>vyžádání vstupu od uživatele</td></tr>
<tr><td><a href="#k16">QColorDialog</a></td><td>výběr barvy</td></tr>
<tr><td>QFontDialog</td><td>výběr fontu</td></tr>
<tr><td>QFileDialog</td><td>výběr souboru nebo adresáře</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>QAbstractPrintDialog</td><td>základní implementace dialogu pro konfiguraci tiskáren</td></tr>
<tr><td>QPrintDialog</td><td>ucelený dialog pro výběr a konfiguraci tiskárny</td></tr>
<tr><td>QAbstractPageSetupDialog</td><td>základní implementace dialogu pro nastavení tisku dokumentu</td></tr>
<tr><td>QPageSetupDialog</td><td>nastavení tisku dokumentu</td></tr>
<tr><td>QWizard</td><td>dialog sestavený ze sekvence &bdquo;stránek&ldquo;, které uživatel postupně vyplňuje</td></tr>
<tr><td>QProgressDialog</td><td>zobrazení průběhu déletrvající operace</td></tr>
<tr><td>QPrintPreviewDialog</td><td>dialog pro náhled na dokument, který se má vytisknout + pro nastavení tiskových stran atd.</td></tr>
</table>

<p>Všechny tyto typy dialogů si postupně popíšeme.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Dialog pro zobrazení zprávy uživateli</h2>

<p>Nejjednodušším dialogem podporovaným knihovnou PySide je dialog určený pro
zobrazení zprávy uživateli. V&nbsp;tomto dialogu je možné kromě vlastní
jednořádkové či víceřádkové zprávy specifikovat i ikonu zobrazenou uživateli a
popř.&nbsp;upravit počet a význam tlačítek. Podívejme se, jak se tento dialog
zobrazí. Není to nic složitého:</p>

<pre>
def <strong>showMessageBox(self):</strong>
    msgBox = QtGui.QMessageBox()
    msgBox.setText(u'Zpráva')
    msgBox.exec_()
</pre>

<img src="https://i.iinfo.cz/images/369/pyside14-1.png" class="image-321634" alt="&#160;" height="127" width="339" />
<p><i>Obrázek 1: Dialog s&nbsp;ikonou QMessageBox.Information.</i></p>

<p>Ikonu vkládanou do dialogu je možné nakonfigurovat dvěma způsoby. Buď lze
použít metodu <strong>setIconPixmap()</strong>, které se předá libovolná
pixmapa, což je sice řešení flexibilní, ovšem bude složité vybrat takovou
ikonu, která zapadne do L&amp;F celého desktopového prostředí. Pokud se jedná o
nějakou zprávu se standardním významem, je výhodnější namísto
<strong>setIconPixmap()</strong> zavolat metodu nazvanou
<strong>setIcon()</strong>, které se předá jedna z&nbsp;následujících
konstant:</p>

<table>
<tr><th>Ikona</th></tr>
<tr><td>QMessageBox.NoIcon</td></tr>
<tr><td>QMessageBox.Question</td></tr>
<tr><td>QMessageBox.Information</td></tr>
<tr><td>QMessageBox.Warning</td></tr>
<tr><td>QMessageBox.Critical</td></tr>
</table>

<img src="https://i.iinfo.cz/images/369/pyside14-2.png" class="image-321635" alt="&#160;" height="127" width="339" />
<p><i>Obrázek 2: Dialog s&nbsp;ikonou QMessageBox.Question.</i></p>

<p>Vytvoření dialogu tedy může vypadat následovně:</p>

<pre>
def <strong>showMessageBox(self):</strong>
    msgBox = QtGui.QMessageBox()
    msgBox.setText(u'Zpráva')
    msgBox.setIcon(QtGui.QMessageBox.Information)
    msgBox.exec_()
</pre>

<img src="https://i.iinfo.cz/images/369/pyside14-3.png" class="image-321636" alt="&#160;" height="127" width="339" />
<p><i>Obrázek 3: Dialog s&nbsp;ikonou QMessageBox.Warning.</i></p>

<p>Dialog lze konfigurovat i dalšími způsoby, například do něj je možné
přidávat další tlačítka. S&nbsp;těmito způsoby se seznámíme v&nbsp;závěrečné
části tohoto článku.</p>

<img src="https://i.iinfo.cz/images/369/pyside14-4.png" class="image-321637" alt="&#160;" height="127" width="339" />
<p><i>Obrázek 4: Dialog s&nbsp;ikonou QMessageBox.Critical.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad: jednoduchý dialog s&nbsp;ikonou a textovou zprávou</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázán způsob zobrazení
jednoduchého dialogu, v&nbsp;němž je umístěna informační ikona a taktéž zpráva.
Ta může být jednořádková či víceřádková. Tento dialog zobrazíte po výběru
tlačítka &bdquo;Message Box&ldquo;, jehož stisk zavolá handler
<strong>showMessageBox</strong> (kód této funkce byl ukázán <a
href="#k02">v&nbsp;předchozí kapitole</a>):</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
        messageBoxButton = self.prepareMessageBoxButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(messageBoxButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareMessageBoxButton(self):</strong>
        <i># tlačítko</i>
        messageBoxButton = QtGui.QPushButton('Message Box', self)
        messageBoxButton.resize(messageBoxButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        messageBoxButton.clicked.connect(self.showMessageBox)
        return messageBoxButton
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showMessageBox(self):</strong>
        msgBox = QtGui.QMessageBox()
        msgBox.setText(u'Zpráva')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMessageBox")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Dialog pro zobrazení chybové zprávy</h2>

<p>Druhým typem dialogu, s&nbsp;nímž se v&nbsp;dnešním článku setkáme, je
dialog sloužící pro zobrazení chybové zprávy popř.&nbsp;pro doplnění dalších
informací o chybě. Tento dialog je reprezentován třídou
<strong>QErrorMessage</strong> popř.&nbsp;potomky této třídy. Jedním
z&nbsp;podstatných rozdílů mezi tímto dialogem a <a href="#k02">výše popsaným
dialogem <strong>QMessageBox</strong></a> je fakt, že u chybového dialogu je
možné s&nbsp;využitím zobrazeného zatrhávacího tlačítka (<i>checkboxu</i>)
zajistit, aby se již podobné typy zpráv uživateli nezobrazovaly. Nejprve se
však podívejme na tu nejjednodušší variantu dialogu se zobrazením chybové
zprávy. Ten se nakonfiguruje následujícím způsobem:</p>

<pre>
def <strong>showErrorMessage(self):</strong>
    msgBox = QtGui.QErrorMessage()
    msgBox.showMessage(u'Chybová zpráva')
    msgBox.exec_()
</pre>

<img src="https://i.iinfo.cz/images/369/pyside14-5.png" class="image-321638" alt="&#160;" height="185" width="328" />
<p><i>Obrázek 5: Dialog se zobrazením chybové zprávy a taktéž se zatrhávacím
tlačítkem, pomocí něhož lze pozastavit výpis podobných typů zpráv.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Druhý demonstrační příklad: zobrazení chybové zprávy</h2>

<p>Zobrazení jednoduché chybové zprávy v&nbsp;chybovém dialogu, prozatím ovšem
bez naprogramování reakce na nastavení checkboxu uživatelem, je ukázán
v&nbsp;dnešním druhém demonstračním příkladu, jehož zdrojový kód je zobrazen
pod tímto odstavcem:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
        errorMessageButton = self.prepareErrorMessageButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(errorMessageButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareErrorMessageButton(self):</strong>
        <i># tlačítko</i>
        errorMessageButton = QtGui.QPushButton('Error Message', self)
        errorMessageButton.resize(errorMessageButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        errorMessageButton.clicked.connect(self.showErrorMessage)
        return errorMessageButton
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showErrorMessage(self):</strong>
        msgBox = QtGui.QErrorMessage()
        msgBox.showMessage(u'Chybová zpráva')
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QErrorMessage")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Jednoduché dialogy pro vstup údajů</h2>

<p>V&nbsp;případě, že budeme od uživatele vyžadovat zadání nějakých údajů
popř.&nbsp;výběr prvků z&nbsp;nějakého seznamu, máme k&nbsp;dispozici tři
možnosti:</p>

<ol>

<li>Použít běžné ovládací prvky (widgety) určené pro vstup údajů a zabudovat
tyto widgety přímo do oken aplikace. S&nbsp;většinou těchto widgetů jsme se již
setkali, další si popíšeme v&nbsp;navazujících částech tohoto seriálu.</li>

<li>Naprogramovat si vlastní vstupní dialogy, ať již modální či nemodální.</li>

<li>Využít standardní typ dialogu představovaný třídou
<strong>QInputDialog</strong>. Možnosti nabízené touto třídou jsou sice na
jednu stranu omezené (vždy jen jeden typ vstupu), na stranu druhou je však
použití standardních dialogů velmi jednoduché &ndash; většinou se jedná o
pouhých několik řádků v&nbsp;programu.</li>

</ol>

<p>V&nbsp;navazujících kapitolách si ukážeme pět různých podob dialogů
podporovaných třídou <strong>QInputDialog</strong></p>

<ul>
<li>Dialog pro vstup textu</li>
<li>Dialog pro vstup celočíselné hodnoty</li>
<li>Dialog pro vstup reálné hodnoty</li>
<li>Dialog pro výběr prvku s&nbsp;využitím kombo boxu</li>
<li>Dialog pro výběr prvku ze seznamu</li>
</ul>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vstupní dialog nakonfigurovaný pro zadání běžného textu</h2>

<p>První typ dialogu, který očekává vstup od uživatele, je dialog určený pro
zápis běžného jednořádkového textu. Pokud budete chtít tento dialog
v&nbsp;aplikaci použít, postačuje vytvořit instanci třídy
<strong>QInputDialog</strong>, nastavit typ vstupu na hodnotu
<strong>QInputDialog.TextInput</strong> a po uzavření dialogu zjistit, jaký
text byl uživatelem zapsán, pomocí metody
<strong>QInputDialog.textValue()</strong>:</p>

<pre>
def <strong>textInputDialogHandler(self):</strong>
    <i># vytvoření a konfigurace vstupního dialogu</i>
    dialog = QtGui.QInputDialog(self)
    dialog.setInputMode(QtGui.QInputDialog.TextInput)
&nbsp;
    <i># zobrazení dialogu a čekání na uživatelský vstup</i>
    result = dialog.exec_()
&nbsp;
    <i># zpracování výsledků</i>
    return dialog.textValue()
</pre>

<p>Při práci s&nbsp;tímto typem dialogu můžeme použít několik metod pro jeho
další konfiguraci:</p>

<table>
<tr><th>Metoda</th><th>Význam</th></tr>
<tr><td>setLabelText</td><td>výzva, která je zobrazena nad nebo vedle vstupního textového pole</td></tr>
<tr><td>setTextValue</td><td>výchozí text, který je do pole zapsán ve chvíli zobrazení dialogu</td></tr>
<tr><td>setOkButtonText</td><td>text zobrazený na tlačítku <strong>[Ok]</strong></td></tr>
<tr><td>setCancelButtonText</td><td>text zobrazený na tlačítku <strong>[Storno]</strong></td></tr>
<tr><td>setEchoMode</td><td>nastavení zpětné vazby mezi zapisovaným textem a obsahem textového pole (modifikováno u zápisu hesla atd.)</td></tr>
</table>

<p>Samotné vstupní textové pole se ovládá naprosto stejně jako již popsaný
widget <strong>QLineEdit</strong>.</p>

<p>Většinou je nutné rozlišit, zda bylo stlačeno tlačítko <strong>[Ok]</strong>
nebo <strong>[Storno]</strong>. Pro tento účel je nutné otestovat návratovou
hodnotu metody <strong>QInputDialog.exec_()</strong>, například takto:</p>

<pre>
def <strong>textInputDialogHandler(self):</strong>
    <i># vytvoření a konfigurace vstupního dialogu</i>
    dialog = QtGui.QInputDialog(self)
    dialog.setInputMode(QtGui.QInputDialog.TextInput)
    dialog.setLabelText("Text input:")
    dialog.setTextValue("default text")
&nbsp;
    <i># zobrazení dialogu a čekání na uživatelský vstup</i>
    result = dialog.exec_()
&nbsp;
    <i># zpracování a zobrazení výsledků</i>
    text = dialog.textValue()
    message = "Entered text: '{t}'\nClicked on: {c}".format(
        t=text, c="Ok" if result == 1 else "Cancel")
&nbsp;
    self.showMessageBox(message)
</pre>

<img src="https://i.iinfo.cz/images/369/pyside14-6.png" class="image-321639" alt="&#160;" height="130" width="202" />
<p><i>Obrázek 6: Dialog pro vstup běžného jednořádkového textu.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Třetí demonstrační příklad: dialog pro zadání jednořádkového textu</h2>

<p>V&nbsp;dnešním třetím demonstračním příkladu je ukázán jak způsob zobrazení
dialogu určeného pro zadání jednořádkového textu, tak i otestování, zda
uživatel po zadání textu vybral tlačítko [Ok] nebo [Storno], což je důležité,
protože i při stisku tlačítka [Storno] se vrátí vyplněná hodnota textového
políčka a nikoli (například) prázdný řetězec či <strong>None</strong>.
Podívejme se nyní na zdrojový kód tohoto demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
&nbsp;
        textInputDialogButton = self.prepareButton(
            "Text Input", self.textInputDialogHandler)
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(textInputDialogButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>textInputDialogHandler(self):</strong>
        <i># vytvoření a konfigurace vstupního dialogu</i>
        dialog = QtGui.QInputDialog(self)
        dialog.setInputMode(QtGui.QInputDialog.TextInput)
        dialog.setLabelText("Text input:")
        dialog.setTextValue("default text")
&nbsp;
        <i># zobrazení dialogu a čekání na uživatelský vstup</i>
        result = dialog.exec_()
&nbsp;
        <i># zpracování a zobrazení výsledků</i>
        text = dialog.textValue()
        message = "Entered text: '{t}'\nClicked on: {c}".format(
            t=text, c="Ok" if result == 1 else "Cancel")
&nbsp;
        self.showMessageBox(message)
&nbsp;
    def <strong>prepareButton(self, label, handler):</strong>
        <i># tlačítko</i>
        button = QtGui.QPushButton(label, self)
        button.resize(button.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        button.clicked.connect(handler)
        return button
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showMessageBox(self, text):</strong>
        msgBox = QtGui.QMessageBox()
        msgBox.setText(text)
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QInputDialog")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vstupní dialog nakonfigurovaný pro zadání celého čísla</h2>

<p>Vstupní dialog <strong>QInputDialog</strong> je možné nakonfigurovat takovým
způsobem, aby namísto libovolného textu bylo možné zadat pouze celočíselnou
hodnotu, navíc v&nbsp;předem známém rozsahu. Vedle vstupního pole se zobrazí
pomocná tlačítka &bdquo;nahoru&ldquo; a &bdquo;dolů&ldquo;, kterými lze číselné
hodnoty přetáčet (stejně bude fungovat i kolečko myši). Aby se skutečně povolil
vstup celočíselných údajů, je nutné specifikovat vstupní režim, a to takto:</p>

<pre>
dialog.setInputMode(QtGui.QInputDialog.IntInput)
</pre>

<p>Dialog se zobrazí metodou <strong>exec_()</strong>, s&nbsp;níž jsme se již
setkali v&nbsp;předchozích kapitolách. Po uzavření dialogu se přečtení hodnoty
ze vstupního pole provádí metodou <strong>intValue()</strong> a nikoli
<strong>textValue()</strong>:</p>

<pre>
def <strong>integerInputDialogHandler(self):</strong>
    <i># vytvoření a konfigurace vstupního dialogu</i>
    dialog = QtGui.QInputDialog(self)
    dialog.setInputMode(QtGui.QInputDialog.IntInput)
&nbsp;
    <i># zobrazení dialogu a čekání na uživatelský vstup</i>
    result = dialog.exec_()
&nbsp;
    <i># zpracování výsledků</i>
    return dialog.intValue()
</pre>

<img src="https://i.iinfo.cz/images/369/pyside14-7.png" class="image-321640" alt="&#160;" height="130" width="202" />
<p><i>Obrázek 7: Dialog pro vstup celočíselné hodnoty ze zadaného
rozsahu.</i></p>

<p>Kromě již zmíněných metod je ještě možné nastavit další parametry pole pro
vstup celočíselných údajů a tím do jisté míry omezit další programové kontroly
prováděné po uzavření dialogu (implicitně je možné zadávat jen hodnoty do
99):</p>

<table>
<tr><th>Metoda</th><th>Význam</th></tr>
<tr><td>setIntValue</td><td>výchozí číselná hodnota zobrazená společně s&nbsp;dialogem</td></tr>
<tr><td>setIntMinimum</td><td>minimální povolená číselná hodnota</td></tr>
<tr><td>setIntMaximum</td><td>maximální povolená číselná hodnota</td></tr>
<tr><td>setIntRange</td><td>kombinace obou předchozích metod (předávají se dvě hodnoty min a max)</td></tr>
<tr><td>setIntStep</td><td>krok při použití kolečka myši nebo tlačítek &bdquo;nahoru&ldquo; a &bdquo;dolů&ldquo;</td></tr>
</table>

<p>Výše uvedené metody se použijí takto:</p>

<pre>
def <strong>integerInputDialogHandler(self):</strong>
    <i># vytvoření a konfigurace vstupního dialogu</i>
    dialog = QtGui.QInputDialog(self)
    dialog.setInputMode(QtGui.QInputDialog.IntInput)
    dialog.setLabelText("Integer input:")
    dialog.setIntValue(15)
    dialog.setIntMinimum(10)
    dialog.setIntMaximum(20)
&nbsp;
    <i># zobrazení dialogu a čekání na uživatelský vstup</i>
    result = dialog.exec_()
&nbsp;
    <i># zpracování a zobrazení výsledků</i>
    value = dialog.intValue()
    message = "Entered value: '{v}'\nClicked on: {c}".format(
        v=value, c="Ok" if result == 1 else "Cancel")
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Čtvrtý demonstrační příklad: dialog pro specifikaci celého čísla</h2>

<p>Použití standardního dialogu, který po svém zobrazení očekává zadání celého
čísla od uživatele, je ukázáno v&nbsp;dnešním čtvrtém demonstračním příkladu,
jehož zdrojový kód je zobrazen pod tímto odstavcem:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
&nbsp;
        integerInputDialogButton = self.prepareButton(
            "Integer value input", self.integerInputDialogHandler)
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(integerInputDialogButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>integerInputDialogHandler(self):</strong>
        <i># vytvoření a konfigurace vstupního dialogu</i>
        dialog = QtGui.QInputDialog(self)
        dialog.setInputMode(QtGui.QInputDialog.IntInput)
        dialog.setLabelText("Integer input:")
        dialog.setIntMinimum(10)
        dialog.setIntMaximum(20)
&nbsp;
        <i># zobrazení dialogu a čekání na uživatelský vstup</i>
        result = dialog.exec_()
&nbsp;
        <i># zpracování a zobrazení výsledků</i>
        value = dialog.intValue()
        message = "Entered value: '{v}'\nClicked on: {c}".format(
            v=value, c="Ok" if result == 1 else "Cancel")
&nbsp;
        self.showMessageBox(message)
&nbsp;
    def <strong>prepareButton(self, label, handler):</strong>
        <i># tlačítko</i>
        button = QtGui.QPushButton(label, self)
        button.resize(button.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        button.clicked.connect(handler)
        return button
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showMessageBox(self, text):</strong>
        msgBox = QtGui.QMessageBox()
        msgBox.setText(text)
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QInputDialog")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vstupní dialog nakonfigurovaný pro zadání reálného čísla</h2>

<p>Jen nepatrnou úpravou je možné zajistit, aby vstupní dialog akceptoval
reálná čísla a nikoli jen čísla celá:</p>

<pre>
dialog.setInputMode(QtGui.QInputDialog.DoubleInput)
</pre>

<p>U tohoto typu vstupu je opět možné nastavit minimální a maximální
akceptovatelné hodnoty, navíc je ovšem možné specifikovat, kolik desetinných
míst se implicitně zobrazí:</p>

<table>
<tr><th>Metoda</th><th>Význam</th></tr>
<tr><td>setDoubleValue</td><td>výchozí číselná hodnota zobrazená společně s&nbsp;dialogem</td></tr>
<tr><td>setDoubleMinimum</td><td>minimální povolená číselná hodnota</td></tr>
<tr><td>setDoubleMaximum</td><td>maximální povolená číselná hodnota</td></tr>
<tr><td>setDoubleRange</td><td>kombinace obou předchozích metod (předávají se dvě hodnoty min a max)</td></tr>
<tr><td>setDoubleStep</td><td>krok při použití kolečka myši nebo tlačítek &bdquo;nahoru&ldquo; a &bdquo;dolů&ldquo;</td></tr>
<tr><td>setDoubleDecimals</td><td>počet zobrazených desetinných míst</td></tr>
</table>

<p>Příklad použití dialogu pro zadání reálného čísla:</p>

<pre>
def <strong>doubleInputDialogHandler(self):</strong>
    <i># vytvoření a konfigurace vstupního dialogu</i>
    dialog = QtGui.QInputDialog(self)
    dialog.setInputMode(QtGui.QInputDialog.DoubleInput)
    dialog.setLabelText("Double value input:")
    dialog.setDoubleRange(0.0, 7.5)
    dialog.setDoubleDecimals(2)
&nbsp;
    <i># zobrazení dialogu a čekání na uživatelský vstup</i>
    result = dialog.exec_()
&nbsp;
    <i># zpracování a zobrazení výsledků</i>
    value = dialog.doubleValue()
    message = "Entered value: '{v}'\nClicked on: {c}".format(
        v=value, c="Ok" if result == 1 else "Cancel")
&nbsp;
    self.showMessageBox(message)
</pre>

<img src="https://i.iinfo.cz/images/369/pyside14-8.png" class="image-321641" alt="&#160;" height="130" width="202" />
<p><i>Obrázek 8: Dialog pro vstup reálné hodnoty ze zadaného rozsahu.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Pátý demonstrační příklad: dialog pro specifikaci reálného čísla</h2>

<p>Opět se podívejme na to, jakým způsobem lze nakonfigurovat dialog určený pro
specifikaci reálného čísla uživatelem. Používáme přitom metody popsané <a
href="#k11">v&nbsp;předchozí kapitole</a>. Následuje výpis zdrojového kódu
demonstračního příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
&nbsp;
        doubleInputDialogButton = self.prepareButton(
            "Double value input", self.doubleInputDialogHandler)
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(doubleInputDialogButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>doubleInputDialogHandler(self):</strong>
        <i># vytvoření a konfigurace vstupního dialogu</i>
        dialog = QtGui.QInputDialog(self)
        dialog.setInputMode(QtGui.QInputDialog.DoubleInput)
        dialog.setLabelText("Double value input:")
        dialog.setDoubleRange(0.0, 7.5)
        dialog.setDoubleDecimals(2)
&nbsp;
        <i># zobrazení dialogu a čekání na uživatelský vstup</i>
        result = dialog.exec_()
&nbsp;
        <i># zpracování a zobrazení výsledků</i>
        value = dialog.doubleValue()
        message = "Entered value: '{v}'\nClicked on: {c}".format(
            v=value, c="Ok" if result == 1 else "Cancel")
&nbsp;
        self.showMessageBox(message)
&nbsp;
    def <strong>prepareButton(self, label, handler):</strong>
        <i># tlačítko</i>
        button = QtGui.QPushButton(label, self)
        button.resize(button.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        button.clicked.connect(handler)
        return button
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showMessageBox(self, text):</strong>
        msgBox = QtGui.QMessageBox()
        msgBox.setText(text)
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QInputDialog")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Dialog s&nbsp;výběrem prvku ze seznamu nebo kombo boxu</h2>

<p>Poslední možností, kterou nám <strong>QInputDialog</strong> nabízí, je výběr
prvku z&nbsp;předem zadaného seznamu. Tento seznam se zobrazí buď pomocí kombo
boxu (což šetří místo na úkor přehlednosti) nebo klasickým seznamem. Použití
kombo boxu se provede následovně:</p>

<pre>
def <strong>textInputDialogHandler(self):</strong>
    <i># vytvoření a konfigurace vstupního dialogu</i>
    dialog = QtGui.QInputDialog(self)
    dialog.setLabelText("Your choice:")
    dialog.setComboBoxItems(["Assembler", "Bash", "C", "C++", "Clojure", "Python"])
&nbsp;
    <i># zobrazení dialogu a čekání na uživatelský vstup</i>
    result = dialog.exec_()
&nbsp;
    <i># zpracování výsledků</i>
    return dialog.textValue()
</pre>

<img src="https://i.iinfo.cz/images/369/pyside14-9.png" class="image-321642" alt="&#160;" height="134" width="202" />
<p><i>Obrázek 9: Výběr prvku s&nbsp;využitím kombo boxu.</i></p>

<p>Pokud preferujete klasický seznam, je funkci zapotřebí nepatrně upravit:</p>

<pre>
def <strong>textInputDialogHandler(self):</strong>
    <i># vytvoření a konfigurace vstupního dialogu</i>
    dialog = QtGui.QInputDialog(self)
    dialog.setLabelText("Your choice:")
    <strong>dialog.setOption(QtGui.QInputDialog.UseListViewForComboBoxItems, True)</strong>
    dialog.setComboBoxItems(["Assembler", "Bash", "C", "C++", "Clojure", "Python"])
&nbsp;
    <i># zobrazení dialogu a čekání na uživatelský vstup</i>
    result = dialog.exec_()
&nbsp;
    <i># zpracování výsledků</i>
    return dialog.textValue()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Šestý demonstrační příklad: výběr prvku z&nbsp;kombo boxu</h2>

<p>Zobrazení dialogu, který si od uživatele vyžádá výběr prvku z&nbsp;kombo
boxu, je implementováno v&nbsp;dnešním šestém demonstračním příkladu, jehož
zdrojový kód je zobrazen pod tímto odstavcem:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
&nbsp;
        textInputDialogButton = self.prepareButton(
            "Text Input", self.textInputDialogHandler)
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(textInputDialogButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>textInputDialogHandler(self):</strong>
        <i># vytvoření a konfigurace vstupního dialogu</i>
        dialog = QtGui.QInputDialog(self)
        dialog.setLabelText("Your choice:")
        dialog.setComboBoxItems(["Assembler", "Bash", "C", "C++", "Clojure", "Python"])
&nbsp;
        <i># zobrazení dialogu a čekání na uživatelský vstup</i>
        result = dialog.exec_()
&nbsp;
        <i># zpracování a zobrazení výsledků</i>
        text = dialog.textValue()
        message = "Entered text: '{t}'\nClicked on: {c}".format(
            t=text, c="Ok" if result == 1 else "Cancel")
&nbsp;
        self.showMessageBox(message)
&nbsp;
    def <strong>prepareButton(self, label, handler):</strong>
        <i># tlačítko</i>
        button = QtGui.QPushButton(label, self)
        button.resize(button.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        button.clicked.connect(handler)
        return button
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showMessageBox(self, text):</strong>
        msgBox = QtGui.QMessageBox()
        msgBox.setText(text)
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QInputDialog")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Sedmý demonstrační příklad: výběr prvku ze seznamu</h2>

<p>Sedmý demonstrační příklad se od příkladu předchozího odlišuje pouze
v&nbsp;jediném řádku:</p>

<pre>
dialog.setOption(QtGui.QInputDialog.UseListViewForComboBoxItems, True)
</pre>

<p>Tímto řádkem se specifikuje použití klasického list boxu namísto kombo boxu.
Navíc si povšimněte, že implicitně není vybrán žádný prvek a tudíž dialog
zobrazí tlačítko <strong>[Ok]</strong> šedou barvou a nebude ho možné stisknout
do té doby, dokud uživatel nějaký prvek explicitně nevybere:</p>

<img src="https://i.iinfo.cz/images/369/pyside14-10.png" class="image-321643" alt="&#160;" height="297" width="280" />
<p><i>Obrázek 10: Screenshot dialogu ze sedmého demonstračního
příkladu.</i></p>

<p>Opět následuje výpis zdrojového kódu tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
&nbsp;
        textInputDialogButton = self.prepareButton(
            "Text Input", self.textInputDialogHandler)
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(textInputDialogButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>textInputDialogHandler(self):</strong>
        <i># vytvoření a konfigurace vstupního dialogu</i>
        dialog = QtGui.QInputDialog(self)
        dialog.setLabelText("Your choice:")
        dialog.setOption(QtGui.QInputDialog.UseListViewForComboBoxItems, True)
        dialog.setComboBoxItems(["Assembler", "Bash", "C", "C++", "Clojure", "Python"])
&nbsp;
        <i># zobrazení dialogu a čekání na uživatelský vstup</i>
        result = dialog.exec_()
&nbsp;
        <i># zpracování a zobrazení výsledků</i>
        text = dialog.textValue()
        message = "Entered text: '{t}'\nClicked on: {c}".format(
            t=text, c="Ok" if result == 1 else "Cancel")
&nbsp;
        self.showMessageBox(message)
&nbsp;
    def <strong>prepareButton(self, label, handler):</strong>
        <i># tlačítko</i>
        button = QtGui.QPushButton(label, self)
        button.resize(button.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        button.clicked.connect(handler)
        return button
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showMessageBox(self, text):</strong>
        msgBox = QtGui.QMessageBox()
        msgBox.setText(text)
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QInputDialog")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Standardní dialog pro výběr barvy z&nbsp;palety</h2>

<p>Poslední typ standardního dialogu, s&nbsp;nímž se dnes setkáme, slouží pro
výběr barvy z&nbsp;barvové palety. Tento dialog je představován třídou
<strong>QColorDialog</strong> a zobrazit je ho snadné:</p>

<pre>
def <strong>showColorDialog(self):</strong>
    colorDialog = QtGui.QColorDialog()
    result = colorDialog.exec_()
&nbsp;
    selected = colorDialog.selectedColor()
</pre>

<p>Před zobrazením tohoto dialogu je možné přednastavit barvu, a to
s&nbsp;využitím metody <strong>setCurrentColor()</strong>, které se předá
instanci třídy <strong>QColor</strong>:</p>

<pre>
def <strong>showColorDialog(self):</strong>
    colorDialog = QtGui.QColorDialog()
    colorDialog.setCurrentColor(QtGui.QColor("<i>#aabbcc"))</i>
    result = colorDialog.exec_()
&nbsp;
    selected = colorDialog.selectedColor()
</pre>

<p>Pokud budete chtít zjistit, jakou barvu uživatel vybral, stačí po zobrazení
dialogu zavolat metodu <strong>selectedColor()</strong> a z&nbsp;navrácené
hodnoty pak metodami <strong>red()</strong>, <strong>green()</strong> a
<strong>blue()</strong> získat jednotlivé barvové složky:</p>

<pre>
def <strong>showColorDialog(self):</strong>
    colorDialog = QtGui.QColorDialog()
    colorDialog.setCurrentColor(QtGui.QColor("<i>#aabbcc"))</i>
    result = colorDialog.exec_()
&nbsp;
    selected = colorDialog.selectedColor()
    message = "Selected color: {r} {g} {b}\nClicked on: {c}".format(
        r=selected.red(),
        g=selected.green(),
        b=selected.blue(),
        c="Ok" if result == 1 else "Cancel")
&nbsp;
    self.showMessageBox(message)
</pre>

<a href="https://www.root.cz/obrazek/321644/"><img src="https://i.iinfo.cz/images/369/pyside14-11-prev.png" class="image-321644" alt="&#160;" height="270" width="361" /></a>
<p><i>Obrázek 11: Standardní dialog pro výběr barvy.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Osmý demonstrační příklad: dialog pro výběr barvy</h2>

<p>V&nbsp;osmém demonstračním příkladu si ukážeme, jakým způsobem je možné
použít standardní dialog určený pro výběr barvy. Základní postup pro použití
tohoto typu dialogu jsme si již vysvětlili <a href="#k16">v&nbsp;předchozí
kapitole</a>, takže zde jen pro úplnost dialog zabudujeme do naší testovací
aplikace:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent(QtGui.QWidget):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        quitButton = self.prepareQuitButton()
        colorDialogButton = self.prepareColorDialogButton()
&nbsp;
        <i># vytvoření správce geometrie</i>
        topLayout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        topLayout.addWidget(colorDialogButton)
        topLayout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(topLayout)
&nbsp;
    def <strong>prepareColorDialogButton(self):</strong>
        <i># tlačítko</i>
        colorDialogButton = QtGui.QPushButton('Select color', self)
        colorDialogButton.resize(colorDialogButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        colorDialogButton.clicked.connect(self.showColorDialog)
        return colorDialogButton
&nbsp;
    def <strong>prepareQuitButton(self):</strong>
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
        return quitButton
&nbsp;
    def <strong>showColorDialog(self):</strong>
        colorDialog = QtGui.QColorDialog()
        colorDialog.setCurrentColor(QtGui.QColor("<i>#aabbcc"))</i>
        result = colorDialog.exec_()
&nbsp;
        selected = colorDialog.selectedColor()
        message = "Selected color: {r} {g} {b}\nClicked on: {c}".format(
            r=selected.red(),
            g=selected.green(),
            b=selected.blue(),
            c="Ok" if result == 1 else "Cancel")
&nbsp;
        self.showMessageBox(message)
&nbsp;
    def <strong>showMessageBox(self, text):</strong>
        msgBox = QtGui.QMessageBox()
        msgBox.setText(text)
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow(QtGui.QMainWindow):</strong>
&nbsp;
    def <strong>__init__(self):</strong>
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI(self):</strong>
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QColorDialog")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run(self, app):</strong>
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main():</strong>
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech osmi dnes popsaných demonstračních příkladů byly opět,
podobně jako tomu bylo i v&nbsp;předchozích článcích, uloženy do Git repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Adresa</th></tr>
<tr><td>1</td><td>118_message_box.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/118_message_box.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/118_message_box.py</a></td></tr>
<tr><td>2</td><td>119_error_message.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/119_error_message.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/119_error_message.py</a></td></tr>
<tr><td>3</td><td>120_text_input_dialog.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/120_text_input_dialog.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/120_text_input_dialog.py</a></td></tr>
<tr><td>4</td><td>121_integer_value_input_dialog.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/121_integer_value_input_dialog.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/121_integer_value_input_dialog.py</a></td></tr>
<tr><td>5</td><td>122_double_value_input_dialog.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/122_double_value_input_dialog.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/122_double_value_input_dialog.py</a></td></tr>
<tr><td>6</td><td>123_dialog_with_combo_box.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/123_dialog_with_combo_box.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/123_dialog_with_combo_box.py</a></td></tr>
<tr><td>7</td><td>124_dialog_with_listbox.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/124_dialog_with_listbox.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/124_dialog_with_listbox.py</a></td></tr>
<tr><td>8</td><td>125_color_dialog.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/125_color_dialog.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/125_color_dialog.py</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>QAbstractSlider<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractSlider.html">https://pyside.github.io/docs/pyside/PySide/QtGui/AbstractSlider.html</a>
</li>

<li>QScrollBar<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QScrollBar.html">https://pyside.github.io/docs/pyside/PySide/QtGui/ScrollBar.html</a>
</li>

<li>QSlider<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QSlider.html">https://pyside.github.io/docs/pyside/PySide/QtGui/Slider.html</a>
</li>

<li>QDial<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QDial.html">https://pyside.github.io/docs/pyside/PySide/QtGui/Dial.html</a>
</li>

<li>QImage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QImage.html</a>
</li>

<li>QPixmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPixmap.html</a>
</li>

<li>QBitmap<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBitmap.html</a>
</li>

<li>QPaintDevice<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPaintDevice.html</a>
</li>

<li>QPicture<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPicture.html</a>
</li>

<li>QPainter<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainter.html</a>
</li>

<li>QPainterPath<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QPainterPath.html</a>
</li>

<li>QGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGradient.html</a>
</li>

<li>QLinearGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLinearGradient.html</a>
</li>

<li>QRadialGradient<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadialGradient.html</a>
</li>

<li>QTableWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidget.html</a>
</li>

<li>QTableWidgetItem<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTableWidgetItem.html</a>
</li>

<li>QTreeWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidget.html</a>
</li>

<li>QTreeWidgetItem <br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTreeWidgetItem.html</a>
</li>

<li>Afinní zobrazení<br />
<a href="https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD">https://cs.wikipedia.org/wiki/Afinn%C3%AD_zobrazen%C3%AD</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Drawing in PySide<br />
<a href="http://zetcode.com/gui/pysidetutorial/drawing/">http://zetcode.com/gui/pysidetutorial/drawing/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QDialog.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QErrorMessage<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QErrorMessage.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QErrorMessage.html</a>
</li>

<li>QInputDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QInputDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QInputDialog.html</a>
</li>

<li>QColorDialog<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QColorDialog.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QColorDialog.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QLineEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html</a>
</li>

<li>QTextEdit<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html</a>
</li>

<li>QValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QValidator.html</a>
</li>

<li>QIntValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QIntValidator.html</a>
</li>

<li>QRegExpValidator<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRegExpValidator.html</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

