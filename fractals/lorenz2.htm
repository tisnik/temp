<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. Podivné atraktory v&nbsp;ploše</a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Příloha: pomocné moduly pro vykreslení dynamických systémů s&nbsp;využitím knihovny Pygame</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
"""Výpočet a vykreslení upraveného Lorenzova podivného atraktoru."""

# Lorenz attractor

# import všech potřebných knihoven - Numpy a Matplotlibu
import matplotlib.pyplot as plt
import numpy as np


def lorenz_mod2(x, y, z, alfa, beta, gamma, delta):
    """Výpočet dalšího bodu Lorenzove mod2 atraktoru."""
    x_dot = -alfa * x + y * y - z * z + alfa * gamma
    y_dot = x * (y - beta * z) + delta
    z_dot = -z + x * (beta * y + z)
    return x_dot, y_dot, z_dot


# krok (změna času)
dt = 0.001

# celkový počet vypočtených bodů na Lorenzově atraktoru
n = 100000

# prozatím prázdné pole připravené pro výpočet
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))

# počáteční hodnoty
x[0], y[0], z[0] = (0.1, 0.1, 0)

# vlastní výpočet atraktoru
for i in range(n - 1):
    x_dot, y_dot, z_dot = lorenz_mod2(x[i], y[i], z[i], 0.9, 5.0, 9.9, 1.0)
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt

# konstrukce 3D grafu
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(projection="3d")

# změna velikosti komponent v grafu.
plt.tight_layout()

# vykreslení grafu
ax.plot(x[50000:], y[50000:], z[50000:])

# uložení grafu
plt.savefig("lorenz_mod_1.png")

# zobrazení grafu
plt.show()

# grafy s více pohledy na atraktor
ch_3d = np.stack((x, y, z))
lim_xyz = [(np.min(ch_3d[ii]), np.max(ch_3d[ii])) for ii in range(3)]

fig2 = plt.figure("3D Coordinates", figsize=(8, 6))
plt.subplot(2, 2, 1)
plt.plot(y, x, linewidth=0.75)
plt.grid()
plt.xlabel("X")
plt.ylabel("Y")
plt.xlim(lim_xyz[1])
plt.ylim(lim_xyz[0])

plt.subplot(2, 2, 2)
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
"""Výpočet a vykreslení Rosslerova podivného atraktoru v 3D."""

# Rossler attractor


# import všech potřebných knihoven - Numpy a Matplotlibu
import matplotlib.pyplot as plt
import numpy as np


def rossler(x, y, z, a=0.2, b=0.2, c=5.7):
    """Výpočet dalšího bodu Rosslerova atraktoru."""
    x_dot = -y - z
    y_dot = x + a * y
    z_dot = b + z * (x - c)
    return x_dot, y_dot, z_dot


# krok (změna času)
dt = 0.001

# celkový počet vypočtených bodů na Lorenzově atraktoru
n = 100000

# prozatím prázdné pole připravené pro výpočet
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))

# počáteční hodnoty
x[0], y[0], z[0] = (0.1, 0.1, 6)

# vlastní výpočet atraktoru
for i in range(n - 1):
    x_dot, y_dot, z_dot = rossler(x[i], y[i], z[i], 0.3, 0.2, 5.7)
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt

# konstrukce 3D grafu
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(projection="3d")

# změna velikosti komponent v grafu.
plt.tight_layout()

# vykreslení grafu
ax.plot(x[50000:], y[50000:], z[50000:])

# uložení grafu
plt.savefig("rossler_1.png")

# zobrazení grafu
plt.show()

# grafy s více pohledy na atraktor
ch_3d = np.stack((x, y, z))
lim_xyz = [(np.min(ch_3d[ii]), np.max(ch_3d[ii])) for ii in range(3)]

fig2 = plt.figure("3D Coordinates", figsize=(8, 6))
plt.subplot(2, 2, 1)
plt.plot(y, x, linewidth=0.75)
plt.grid()
plt.xlabel("X")
plt.ylabel("Y")
plt.xlim(lim_xyz[1])
plt.ylim(lim_xyz[0])
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
"""Výpočet a vykreslení Wan-Sunova podivného atraktoru."""

# # The Wang - Sun attractor
# Please also see https://hipwallpaper.com/view/9W3CM8


# import všech potřebných knihoven - Numpy a Matplotlibu
import matplotlib.pyplot as plt
import numpy as np


def wang_sun(x, y, z, alfa, beta, gamma, delta, epsilon, zeta):
    """Výpočet dalšího bodu Wang-Sunova atraktoru."""
    x_dot = x * alfa + gamma * y * z
    y_dot = x * beta + y * delta - x * z
    z_dot = z * epsilon + zeta * x * y
    return x_dot, y_dot, z_dot


# krok (změna času)
dt = 0.001

# celkový počet vypočtených bodů na Lorenzově atraktoru
n = 1000000

# prozatím prázdné pole připravené pro výpočet
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))

# počáteční hodnoty
x[0], y[0], z[0] = (1.05, 1.1, 1.5)

# vlastní výpočet atraktoru
for i in range(n - 1):
    x_dot, y_dot, z_dot = wang_sun(x[i], y[i], z[i], 0.2, -0.01, 1.0, -0.4, -1.0, -1.0)
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt

# konstrukce 3D grafu
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(projection="3d")

# změna velikosti komponent v grafu.
plt.tight_layout()

# vykreslení grafu
ax.plot(x, y, z)

# uložení grafu
plt.savefig("wang_sun_1.png")

# zobrazení grafu
plt.show()

# grafy s více pohledy na atraktor
ch_3d = np.stack((x, y, z))
lim_xyz = [(np.min(ch_3d[ii]), np.max(ch_3d[ii])) for ii in range(3)]

fig2 = plt.figure("3D Coordinates", figsize=(8, 6))
plt.subplot(2, 2, 1)
plt.plot(y, x, linewidth=0.75)
plt.grid()
plt.xlabel("X")
plt.ylabel("Y")
plt.xlim(lim_xyz[1])
plt.ylim(lim_xyz[0])
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Podivné atraktory v&nbsp;ploše</h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
# Dynamic system renderer

# Import všech potřebných knihoven - Numpy, Matplotlibu a standardní
# matematické knihovny, ze které se využijí jen některé vybrané funkce.
from math import sin

import matplotlib.pyplot as plt
import numpy as np


def dynamic(x, y, a, b):
    """Funkce pro výpočet dalšího bodu podivného atraktoru."""
    x_dot = -sin(y + a * sin(b * y))
    y_dot = sin(x + a * sin(b * x))
    return x_dot, y_dot


# Konstanta pro numerickou integraci. Menší hodnoty znamenají přesnější
# výpočty, ovšem na úkor výpočetního času.
dt = 0.3

# Parametry mřížky s počátečními hodnotami dynamického systému.
max_x = 50
step_x = 5
max_y = 50
step_y = 5

# Počet iterací pro zadané počáteční podmínky.
maxiter = 1000

# Počet vypočtených bodů na podivném atraktoru.
n = maxiter * max_x // step_x * max_y // step_y

# Prozatím prázdné pole připravené pro výpočet.
x = np.zeros((n,))
y = np.zeros((n,))

# Počáteční hodnoty pro výpočet.
# x[0], y[0] = (10, 10)

# Parametry ovlivňující výpočet podivného atraktoru.
A = -2.7
B = 2.8

i = 0
# Vlastní výpočet podivného atraktoru  pro různé počáteční podmínky.
for x0 in range(0, max_x, step_x):
    for y0 in range(0, max_y, step_y):
        # Počáteční hodnoty pro výpočet.
        x[i], y[i] = (x0, y0)
        # Jedno "vlákno" atraktoru.
        for r in range(1, maxiter):
            x_dot, y_dot = dynamic(x[i], y[i], A, B)
            x[i + 1] = x[i] + dt * x_dot
            y[i + 1] = y[i] + dt * y_dot
            i += 1

# Vykreslení grafu s podivným atraktorem.
plt.plot(x, y, "o", markersize=0.1)

# Změna velikosti komponent v grafu.
plt.tight_layout()

# Uložení grafu pro jeho další zpracování.
plt.savefig("dynamic_1.png")

# Výsledek by měl vypadat následovně:
# ![dynamic_1.png](dynamic_1.png)
# (oproti originálu zmenšeno)

# Zobrazení grafu.
plt.show()

# Druhý atraktor

# Parametry ovlivňující výpočet podivného atraktoru.
A = 2.7
B = -2.8
step_x = step_x // 2
step_y = step_y * 2
maxiter = maxiter // 2

i = 0
# Vlastní výpočet podivného atraktoru  pro různé počáteční podmínky.
for x0 in range(0, max_x, step_x):
    for y0 in range(0, max_y, step_y):
        # Počáteční hodnoty pro výpočet.
        x[i], y[i] = (x0, y0)
        # Jedno "vlákno" atraktoru.
        for r in range(1, maxiter):
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: pomocné moduly pro vykreslení dynamických systémů s&nbsp;využitím knihovny Pygame</h2>

<h3>colors.py</h3>

<pre>
from enum import Enum


class Colors(Enum):
    """Named colors used everywhere on demo screens."""

    BLACK = (0, 0, 0)
    BLUE = (0, 0, 255)
    CYAN = (0, 255, 255)
    GREEN = (0, 255, 0)
    YELLOW = (255, 255, 0)
    RED = (255, 0, 0)
    MAGENTA = (255, 0, 255)
    WHITE = (255, 255, 255)
</pre>

<h3>ui.py</h3>

<pre>
import sys
from typing import Tuple

import pygame
import pygame.locals
from colors import Colors


def initialize(
    title: str, width: int, height: int
) -> Tuple[pygame.Surface, pygame.Surface, pygame.time.Clock]:
    """Initialize Pygame display, drawing surface, and clocks."""
    # set window title
    pygame.display.set_caption(title)

    # initialize window
    display = pygame.display.set_mode([width, height])
    display.fill(Colors.BLACK.value)

    # create all required Pygame objects
    surface = pygame.Surface([width, height])
    surface.fill(Colors.BLACK.value)

    clock = pygame.time.Clock()

    return display, surface, clock


def event_loop(
    display: pygame.Surface, surface: pygame.Surface, clock: pygame.time.Clock
) -> None:
    """Event loop that just waits for keypress or window close operation."""
    while True:
        for event in pygame.event.get():
            if event.type == pygame.locals.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.locals.KEYDOWN:
                if event.key == pygame.locals.K_ESCAPE:
                    pygame.quit()
                    sys.exit()
                if event.key == pygame.locals.K_RETURN:
                    pygame.quit()
                    sys.exit()

        # all events has been processed - update scene and redraw the screen
        display.blit(surface, (0, 0))
        pygame.display.update()
        clock.tick(25)
</pre>

<h3></h3>

<pre>
</pre>

<h3>renderer.py</h3>

<pre>
from typing import Callable

from bitmap import create_bitmap, draw_bitmap
from pygame import Surface, image


def render_attractor(
    surface: Surface,
    x: float,
    y: float,
    scale: float,
    x_offset: int,
    y_offset: int,
    max_points: int,
    settle_down_points: int,
    contrast: float,
    attractor_formula: Callable,
    filename: str,
    **attractor_params: float
) -> None:
    width, height = surface.get_size()
    bitmap = create_bitmap(width, height)

    for i in range(max_points):
        x_dot, y_dot = attractor_formula(x, y, **attractor_params)

        xi = width // 2 + int(scale * x_dot) + x_offset
        yi = height // 2 + int(scale * y_dot) + y_offset

        # try to draw pixel
        if i > settle_down_points:
            if xi >= 0 and yi >= 0 and xi < width and yi < height:
                bitmap[yi][xi] += 1

        # next point calculation
        x, y = x_dot, y_dot

    draw_bitmap(bitmap, surface, contrast)
    image.save(surface, filename)
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny skripty, které byly v&nbsp;předchozích kapitolách použity pro tvorbu
obrázků a animací, jsou uloženy v&nbsp;Git repositáři dostupném na adrese <a
href="https://github.com/tisnik/fractals/">https://github.com/tisnik/fractals/</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis příkladu</th><th>Cesta ke zdrojovému kódu příkladu</th></tr>
<tr><td> 1</td><td>Lorenz_x_y_z.py</td><td>zobrazení vývoje hodnot x, y a z v&nbsp;trojici samostatných grafů</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/Lorenz_x_y_z.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/Lorenz_x_y_z.py</a></td></tr>
<tr><td> 2</td><td>Lorenz.py</td><td>zobrazení fázového prostoru ve formě 3D grafu popř.&nbsp;průmětů do vybraných rovin</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/Lorenz.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/Lorenz.py</a></td></tr>
<tr><td> 3</td><td>Lorenz_butterfly_effect.py</td><td>animace efektu motýlích křídel</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/Lorenz_butterfly_effect.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/Lorenz_butterfly_effect.py</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/">https://github.com/tisnik/fractals/blob/master/attractors/3D/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/">https://github.com/tisnik/fractals/blob/master/attractors/3D/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/">https://github.com/tisnik/fractals/blob/master/attractors/3D/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/">https://github.com/tisnik/fractals/blob/master/attractors/3D/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/">https://github.com/tisnik/fractals/blob/master/attractors/3D/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/">https://github.com/tisnik/fractals/blob/master/attractors/3D/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/">https://github.com/tisnik/fractals/blob/master/attractors/3D/</a></td></tr>
</table>


<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Lorenz Attractor by Dr. Bruce Stewart<br />
<a href="https://www.youtube.com/watch?v=YS_xtBMUrJg">https://www.youtube.com/watch?v=YS_xtBMUrJg</a>
</li>

<li>Welcome - Dynamical Systems | Intro Lecture<br />
<a href="https://www.youtube.com/watch?v=41P4vFP7RWo">https://www.youtube.com/watch?v=41P4vFP7RWo</a>
</li>

<li>The Lorenz Equations - Dynamical Systems | Lecture 27<br />
<a href="https://www.youtube.com/watch?v=0Rpy-xSsAo8">https://www.youtube.com/watch?v=0Rpy-xSsAo8</a>
</li>

<li>Phase space<br />
<a href="https://en.wikipedia.org/wiki/Phase_space">https://en.wikipedia.org/wiki/Phase_space</a>
</li>

<li>Fázový prostor<br />
<a href="https://cs.wikipedia.org/wiki/F%C3%A1zov%C3%BD_prostor">https://cs.wikipedia.org/wiki/F%C3%A1zov%C3%BD_prostor</a>
</li>

<li>Lorenzův atraktor<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-vi/#k02">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-vi/#k02</a>
</li>

<li>Lorenzův atraktor<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03</a>
</li>

<li>Lorenz system<br />
<a href="https://en.wikipedia.org/wiki/Lorenz_system">https://en.wikipedia.org/wiki/Lorenz_system</a>
</li>

<li>The Lorenz system - An introduction to chaos<br />
<a href="https://www.math.toronto.edu/kzhang/teaching/courses/mat332-2022/_8-lorenz-system/">https://www.math.toronto.edu/kzhang/teaching/courses/mat332-2022/_8-lorenz-system/</a>
</li>

<li>Dynamical system<br />
<a href="https://en.wikipedia.org/wiki/Dynamical_system">https://en.wikipedia.org/wiki/Dynamical_system</a>
</li>

<li>What are Dynamical Systems?<br />
<a href="https://math.libretexts.org/Bookshelves/Scientific_Computing_Simulations_and_Modeling/Introduction_to_the_Modeling_and_Analysis_of_Complex_Systems_(Sayama)/03%3A_Basics_of_Dynamical_Systems/3.01%3A_What_are_Dynamical_Systems%3F">https://math.libretexts.org/Bookshelves/Scientific_Computing_Simulations_and_Modeling/Introduction_to_the_Modeling_and_Analysis_of_Complex_Systems_(Sayama)/03%3A_Basics_of_Dynamical_Systems/3.01%3A_What_are_Dynamical_Systems%3F</a>
</li>

<li>TEACHING MATHEMATICS WITH A HISTORICAL PERSPECTIVE: Lecture 11: Dynamical systems<br />
<a href="https://abel.math.harvard.edu/~knill/teaching/mathe320_2022/handouts/10-dynamics.pdf">https://abel.math.harvard.edu/~knill/teaching/mathe320_2022/handouts/10-dynamics.pdf</a>
</li>

<li>Emergence (Wikipedia CS)<br />
<a href="https://cs.wikipedia.org/wiki/Emergence">https://cs.wikipedia.org/wiki/Emergence</a>
</li>

<li>Emergence (Wikipedia EN)<br />
<a href="https://en.wikipedia.org/wiki/Emergence">https://en.wikipedia.org/wiki/Emergence</a>
</li>

<li>Particle Life: Vivid structures from rudimentary rules<br />
<a href="https://particle-life.com/">https://particle-life.com/</a>
</li>

<li>Self-organization<br />
<a href="https://en.wikipedia.org/wiki/Self-organization">https://en.wikipedia.org/wiki/Self-organization</a>
</li>

<li>Samoorganizace<br />
<a href="https://cs.wikipedia.org/wiki/Samoorganizace">https://cs.wikipedia.org/wiki/Samoorganizace</a>
</li>

<li>Spontaneous order<br />
<a href="https://en.wikipedia.org/wiki/Spontaneous_order">https://en.wikipedia.org/wiki/Spontaneous_order</a>
</li>

<li>NumPy Home Page<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>NumPy v1.10 Manual<br />
<a href="http://docs.scipy.org/doc/numpy/index.html">http://docs.scipy.org/doc/numpy/index.html</a>
</li>

<li>NumPy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NumPy">https://en.wikipedia.org/wiki/NumPy</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

