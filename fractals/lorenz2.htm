<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Od Lorenzova atraktoru k dalším typům atraktorů v ploše i prostoru</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Od Lorenzova atraktoru k dalším typům atraktorů v ploše i prostoru</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Od Lorenzova atraktoru k&nbsp;dalším typům atraktorů v&nbsp;ploše i prostoru</a></p>
<p><a href="#k02">2. Upravený vzorec pro výpočet Lorenzova systému</a></p>
<p><a href="#k03">3. Rösslerův dynamický systém</a></p>
<p><a href="#k04">4. Skript pro vykreslení Rösslerova dynamického systému</a></p>
<p><a href="#k05">5. Wang Sunův dynamický systém</a></p>
<p><a href="#k06">6. Podivné atraktory v&nbsp;2D ploše</a></p>
<p><a href="#k07">7. Kostra programu pro vykreslení dynamického systému v&nbsp;ploše s&nbsp;využitím Matplotlibu</i></a></p>
<p><a href="#k08">8. Dynamické systémy, v&nbsp;nichž nelinearitu zajišťují goniometrické funkce</a></p>
<p><a href="#k09">9. Dynamické systémy v&nbsp;nichž nelinearitu zajišťuje funkce <strong>sgn</strong></a></p>
<p><a href="#k10">10. Nelinearita zajištěná operací podílu</a></p>
<p><a href="#k11">*** 11. Dynamický systém nazvaný jednoduše <i>Dynamic</i></a></p>
<p><a href="#k12">*** 12. Dynamický systém nazvaný <i>Icon</i> &ndash; výpočet v&nbsp;komplexní rovině</a></p>
<p><a href="#k13">*** 13. Dynamický systém nazvaný <i>Kamtorus</i></a></p>
<p><a href="#k14">*** 14. Vylepšení vizualizace dynamických systémů v&nbsp;ploše: obarvení pixelů na základě počtu bodů, které reprezentují</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">18. Příloha: pomocné moduly pro vykreslení dynamických systémů s&nbsp;využitím knihovny Pygame</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Od Lorenzova atraktoru k&nbsp;dalším typům atraktorů v&nbsp;ploše i prostoru</h2>

<p>Na článek <a
href="https://www.root.cz/clanky/lorenzuv-system-idealni-pomucka-pro-studium-chaosu/">Lorenzův
systém: ideální pomůcka pro studium chaosu</a> dnes navážeme. Pokusíme se totiž
popsat si některé další dynamické systémy s&nbsp;podivným atraktorem
(<i>strange attractor</i>), které je možné vykreslit v&nbsp;3D prostoru nebo ve
2D rovině. Ovšem zatímco původní Lorenzův dynamický systém je skutečným (i když
značně zjednodušeným) modelem navrženým pro analýzu reálných fyzikálních dějů,
je tomu u většiny dynamických systémů popsaných dnes jinak &ndash; tyto systémy
totiž byly navrženy takovým způsobem, aby jejich vizualizací primárně vznikly
zajímavé obrázky; nejedná se tedy (v&nbsp;mnoha případech &ndash; je několik
výjimek) o systémy získané jako model či řešení nějakých fyzikálních
problémů.</p>

<a href="https://www.root.cz/obrazek/1124955/"><img src="https://i.iinfo.cz/images/632/lorenz-1-7-prev.webp"  class="image-1124955" width="360" height="270" data-prev-filename="https://i.iinfo.cz/images/632/lorenz-1-7-prev.webp" data-prev-width="360" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/632/lorenz-1-7-large.webp" data-large-width="700" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 1: 3D graf se zobrazením fázového prostoru Lorenzova dynamického
systému.</i></p>

<p>A podobně jako v&nbsp;předchozím článku, i dnes pro vizualizaci použijeme
zejména knihovnu <i>Matplotlib</i>. Ovšem u dynamických systémů vykreslovaných
v&nbsp;rovině navíc alternativně použijeme i knihovnu <i>Pygame</i>, protože
pro vykreslení takových systémů nám postačuje vlastně pouze jediná grafická
funkce &ndash; obarvení pixelu na zvolených souřadnicích. Řešení využívající
knihovnu <i>Pygame</i> bude rychlejší, než vykreslování s&nbsp;využitím
Matplotlibu; navíc je možný překlad těchto demonstračních příkladů do nativního
kódu (Cython, Nuitka atd.) a otevírá se zde možnost použít nějakou hodnotu pro
výpočet barvy.</p>

<a href="https://www.root.cz/obrazek/1124956/"><img src="https://i.iinfo.cz/images/632/lorenz-1-8-prev.webp"  class="image-1124956" width="360" height="270" data-prev-filename="https://i.iinfo.cz/images/632/lorenz-1-8-prev.webp" data-prev-width="360" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/632/lorenz-1-8-large.webp" data-large-width="700" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 2: Průměty do jednotlivých os fázového prostoru Lorenzova
dynamického systému.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Upravený vzorec pro výpočet Lorenzova systému</h2>

<p>Dnešní článek začneme poměrně jednoduchým skriptem, v&nbsp;němž původní
rovnice pro výpočet dalšího stavu Lorenzova systému poněkud pozměníme.
Připomeňme si, že původně jsme Lorenzovy diferenciální rovince převedli do
následující jednoduché podoby (samotná &bdquo;integrace&ldquo; je provedena až
v&nbsp;navazujícím programovém kódu):</p>

<pre>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    <i>"""Výpočet dalšího bodu Lorenzova atraktoru."""</i>
    x_dot = s * (y - x)
    y_dot = r * x - y - x * z
    z_dot = x * y - b * z
    return x_dot, y_dot, z_dot
</pre>

<p>Nyní tuto sadu tří výrazů upravíme do odlišné podoby, v&nbsp;níž se
vyskytují celkem čtyři parametry nazvané <strong>alfa</strong>,
<strong>beta</strong>, <strong>gamma</strong> a <strong>delta</strong>. Tyto
parametry již nemají fyzikální význam. Proč k&nbsp;této změně došlo? Při
použití původních rovnic pro Lorenzův atraktor je vykreslen obrazec, ve kterém
jsou patrné dvě charakteristické smyčky, přičemž dráha počítaných bodů
chaoticky mezi oběma smyčkami přeskakuje.  Autoři <i>Rick Miranda</i> a
<i>Emily Stone</i> vytvořili několik modifikací původních rovnic Lorenzova
atraktoru tak, aby se při jejich aplikaci vytvořily obrazce s&nbsp;obecně
různým počtem smyček. My si dnes jeden z&nbsp;jejich dynamických systémů
implementujeme:</p>

<pre>
def <strong>lorenz_mod2</strong>(x, y, z, alfa, beta, gamma, delta):
    <i>"""Výpočet dalšího bodu Lorenzove mod2 atraktoru."""</i>
    x_dot = -alfa * x + y * y - z * z + alfa * gamma
    y_dot = x * (y - beta * z) + delta
    z_dot = -z + x * (beta * y + z)
    return x_dot, y_dot, z_dot
</pre>

<p>Tuto novou funkci zaintegrujeme do původního skriptu určeného pro výpočet a
vykreslení Lorenzova systému. Skript vykreslí 3D graf a posléze grafy
s&nbsp;průměty do tří rovin definovaných souřadnými osami:</p>

<pre>
<i>"""Výpočet a vykreslení upraveného Lorenzova podivného atraktoru."""</i>
&nbsp;
<i># Lorenz attractor</i>
&nbsp;
<i># import všech potřebných knihoven - Numpy a Matplotlibu</i>
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
&nbsp;
def <strong>lorenz_mod2</strong>(x, y, z, alfa, beta, gamma, delta):
    <i>"""Výpočet dalšího bodu Lorenzove mod2 atraktoru."""</i>
    x_dot = -alfa * x + y * y - z * z + alfa * gamma
    y_dot = x * (y - beta * z) + delta
    z_dot = -z + x * (beta * y + z)
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.001
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 100000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0.1, 0.1, 0)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = lorenz_mod2(x[i], y[i], z[i], 0.9, 5.0, 9.9, 1.0)
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># konstrukce 3D grafu</i>
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(projection="3d")
&nbsp;
<i># změna velikosti komponent v grafu.</i>
plt.tight_layout()
&nbsp;
<i># vykreslení grafu</i>
ax.plot(x[50000:], y[50000:], z[50000:])
&nbsp;
<i># uložení grafu</i>
plt.savefig("lorenz_mod_1.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
&nbsp;
<i># grafy s více pohledy na atraktor</i>
ch_3d = np.stack((x, y, z))
lim_xyz = [(np.min(ch_3d[ii]), np.max(ch_3d[ii])) for ii in range(3)]
&nbsp;
fig2 = plt.figure("3D Coordinates", figsize=(8, 6))
plt.subplot(2, 2, 1)
plt.plot(y, x, linewidth=0.75)
plt.grid()
plt.xlabel("X")
plt.ylabel("Y")
plt.xlim(lim_xyz[1])
plt.ylim(lim_xyz[0])
&nbsp;
plt.subplot(2, 2, 2)
</pre>

<p>Výsledkem běhu tohoto skriptu by měl být 3D graf s&nbsp;vykresleným systémem
a taktéž graf s&nbsp;průměty do všech tří rovin:</p>

*** image ***
<p><i>Obrázek 3: 3D graf se zobrazením fázového prostoru upraveného Lorenzova
dynamického systému.</i></p>

*** image ***
<p><i>Obrázek 4: Průměty do jednotlivých os fázového prostoru upraveného
Lorenzova dynamického systému.</i></p>

<p><div class="rs-tip-major">Poznámka: z&nbsp;těchto snímků je patrné, že
možnosti modifikace tohoto dynamického systému jsou větší, než v&nbsp;případě
původního Lorenzova systému s&nbsp;&bdquo;pouhou&ldquo; trojicí parametrů.
Určitou nevýhodou je, že tyto dynamické systémy nejsou prozkoumány tak pečlivě,
jako klasický Lorenzův atraktor.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Rösslerův dynamický systém</h2>

<p>Další dynamický systém s&nbsp;velmi zajímavým atraktorem publikoval
v&nbsp;sedmdesátých letech minulého století lékař <i>Otto Rössler</i>, který
zkoumal problematiku <i>bifurkací</i> (stručně a nepřesně řečeno: rozdvojení
bodů, které původně sledovaly prakticky totožnou trajektorii do zcela odlišných
trajektorií). Jeho dynamický systém je, podobně jako je tomu u klasického
Lorenzova atraktoru, tvořen trojicí diferenčních rovnic:</p>

<p>
x<sub>n+1</sub> = x<sub>n</sub> – y<sub>n</sub> × dt – z<sub>n</sub> × dt<br />
y<sub>n+1</sub> = y<sub>n</sub> + x<sub>n</sub> × dt + a y<sub>n</sub> × dt<br />
z<sub>n+1</sub> = z<sub>n</sub> + b × dt + x<sub>n</sub> × z<sub>n</sub> × dt – c × z<sub>n</sub> × dt
</p>

<p>s&nbsp;počáteční podmínkou x0=y0=z0=1. Atraktor tohoto dynamického systému
vytváří v&nbsp;prostoru (pochopitelně při použití vhodných parametrů) zajímavý
obrazec, který připomíná několik do sebe vložených a ohnutých smyček (ohnutí do
3D je zde ještě více patrné, než u Lorenzova atraktoru, který vypadá plošší). A
opět pochopitelně platí, že se tyto smyčky <i>nikdy</i> neprotínají, protože
fázový prostor vlastně tvoří vektorové pole a při protnutí by systém musel
pokračovat v&nbsp;původní cestě (byl by tedy periodický a nikoli
chaotický).</p>

*** image ***
<p><i>Obrázek 5: Rösslerův atraktor (autor: Wofl, CC).</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Skript pro vykreslení Rösslerova dynamického systému</h2>

<p>Výpočet nového bodu ve fázovém prostoru Rösslerova dynamického systému je
možné realizovat snadno, pouze úpravou tří výrazů v&nbsp;této funkci:</p>

<pre>
def <strong>rossler</strong>(x, y, z, a=0.2, b=0.2, c=5.7):
    <i>"""Výpočet dalšího bodu Rosslerova atraktoru."""</i>
    x_dot = -y - z
    y_dot = x + a * y
    z_dot = b + z * (x - c)
    return x_dot, y_dot, z_dot
</pre>

<p>Pro úplnost se podívejme, jak bude vypadat skript, který po svém spuštění
opět zobrazí trojrozměrný graf s&nbsp;fázovým prostorem Rösslerova dynamického
systému a následně průměty do tří rovin (což už pro nás není nic nového):</p>

<pre>
<i>"""Výpočet a vykreslení Rosslerova podivného atraktoru v 3D."""</i>
&nbsp;
<i># Rossler attractor</i>
&nbsp;
&nbsp;
<i># import všech potřebných knihoven - Numpy a Matplotlibu</i>
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
&nbsp;
def <strong>rossler</strong>(x, y, z, a=0.2, b=0.2, c=5.7):
    <i>"""Výpočet dalšího bodu Rosslerova atraktoru."""</i>
    x_dot = -y - z
    y_dot = x + a * y
    z_dot = b + z * (x - c)
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.001
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 100000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0.1, 0.1, 6)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = rossler(x[i], y[i], z[i], 0.3, 0.2, 5.7)
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># konstrukce 3D grafu</i>
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(projection="3d")
&nbsp;
<i># změna velikosti komponent v grafu.</i>
plt.tight_layout()
&nbsp;
<i># vykreslení grafu</i>
ax.plot(x[50000:], y[50000:], z[50000:])
&nbsp;
<i># uložení grafu</i>
plt.savefig("rossler_1.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
&nbsp;
<i># grafy s více pohledy na atraktor</i>
ch_3d = np.stack((x, y, z))
lim_xyz = [(np.min(ch_3d[ii]), np.max(ch_3d[ii])) for ii in range(3)]
&nbsp;
fig2 = plt.figure("3D Coordinates", figsize=(8, 6))
plt.subplot(2, 2, 1)
plt.plot(y, x, linewidth=0.75)
plt.grid()
plt.xlabel("X")
plt.ylabel("Y")
plt.xlim(lim_xyz[1])
plt.ylim(lim_xyz[0])
</pre>

*** image ***
<p><i>Obrázek 6: 3D graf se zobrazením fázového prostoru Rösslerova dynamického
systému.</i></p>

*** image ***
<p><i>Obrázek 7: Průměty do jednotlivých os fázového prostoru Rösslerova
dynamického systému.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Wang Sunův dynamický systém</h2>

<p>Již bez podrobnějšího popisu se podívejme na Wang Sunův dynamický systém,
který opět vychází z&nbsp;fyzikálního modelu, podobně jako původní Lorenzův
atraktor:</p>

*** image ***
<p><i>Obrázek 8: 3D graf se zobrazením fázového prostoru Wang Sunova dynamického
systému.</i></p>

*** image ***
<p><i>Obrázek 9: Průměty do jednotlivých os fázového prostoru Wang Sunova
dynamického systému.</i></p>

<p><div class="rs-tip-major">Poznámka: tento dynamický systém bude mít čtyři
pevné body a nikoli body dva.</div></p>

<p>Grafy vyobrazené na obrázcích 8 a 9 byly vytvořeny následujícím
skriptem:</p>

<pre>
<i>"""Výpočet a vykreslení Wang-Sunova podivného atraktoru."""</i>
&nbsp;
<i># # The Wang - Sun attractor</i>
<i># Please also see https://hipwallpaper.com/view/9W3CM8</i>
&nbsp;
&nbsp;
<i># import všech potřebných knihoven - Numpy a Matplotlibu</i>
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
&nbsp;
def <strong>wang_sun</strong>(x, y, z, alfa, beta, gamma, delta, epsilon, zeta):
    """Výpočet dalšího bodu Wang-Sunova atraktoru."""
    x_dot = x * alfa + gamma * y * z
    y_dot = x * beta + y * delta - x * z
    z_dot = z * epsilon + zeta * x * y
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.001
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 1000000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (1.05, 1.1, 1.5)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = wang_sun(x[i], y[i], z[i], 0.2, -0.01, 1.0, -0.4, -1.0, -1.0)
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># konstrukce 3D grafu</i>
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(projection="3d")
&nbsp;
<i># změna velikosti komponent v grafu.</i>
plt.tight_layout()
&nbsp;
<i># vykreslení grafu</i>
ax.plot(x, y, z)
&nbsp;
<i># uložení grafu</i>
plt.savefig("wang_sun_1.png")
&nbsp;
<i># zobrazení grafu</i>
plt.show()
&nbsp;
<i># grafy s více pohledy na atraktor</i>
ch_3d = np.stack((x, y, z))
lim_xyz = [(np.min(ch_3d[ii]), np.max(ch_3d[ii])) for ii in range(3)]
&nbsp;
fig2 = plt.figure("3D Coordinates", figsize=(8, 6))
plt.subplot(2, 2, 1)
plt.plot(y, x, linewidth=0.75)
plt.grid()
plt.xlabel("X")
plt.ylabel("Y")
plt.xlim(lim_xyz[1])
plt.ylim(lim_xyz[0])
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Podivné atraktory v&nbsp;2D ploše</h2>

<p>Dynamické systémy s&nbsp;podivnými atraktory mohou vznikat i v&nbsp;2D
ploše, nikoli nutně v&nbsp;3D prostoru. Opět ovšem platí, že takový dynamický
systém musí být popsán modelem s&nbsp;nelineárními závislostmi mezi (nyní jen
dvojicí) hodnot <strong>x</strong> a <strong>y</strong>. Povšimněte si, že
v&nbsp;dynamických systémech ve 3D byly tyto nelinearity realizovány
vynásobením dvojice souřadnic (ostatní části výpočtu jsou lineární).
V&nbsp;dále popsaných 2D systémech je tomu většinou jinak, protože zde namísto
prostého součinu přímo nalezneme využití nelineárních funkcí, například
goniometrických funkcí atd.</p>

*** image ***
<p><i>Obrázek 10: Dynamický systém nazvaný jednoduše Dynamic tak, jak ho
vykreslil stařičký program FractInt.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Kostra programu pro vykreslení dynamického systému v&nbsp;ploše s&nbsp;využitím Matplotlibu</h2>

<p>Pro vykreslení většiny dynamických systémů v&nbsp;ploše budeme používat
stále stejnou &bdquo;šablonu&ldquo; založenou na knihovně <i>Matplotlib</i>.
Tato šablona vypadá následovně:</p>

<pre>
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
&nbsp;
def <strong>dyn_system</strong>(x, y, a, b, c, d):
    <i>"""Funkce pro výpočet dalšího bodu podivného atraktoru."""</i>
    x_dot = ...
    y_dot = ...
    return x_dot, y_dot
&nbsp;
&nbsp;
<i># Celkový počet vypočtených bodů na atraktoru.</i>
<i># (může se měnit)</i>
n = 500000
&nbsp;
<i># Počet bodů ze začátku výpočtu, které se nevykreslí.</i>
<i># (může se měnit)</i>
settle_down_points = 1000
&nbsp;
<i># Prozatím prázdné pole připravené pro uložení výsledků výpočtu.</i>
x = np.zeros((n,))
y = np.zeros((n,))
&nbsp;
<i># Počáteční hodnoty pro výpočet podivného atraktoru.</i>
<i># (mohou se měnit)</i>
x[0], y[0] = (1.0, 1.0)
&nbsp;
<i># Parametry ovlivňující výpočet prvního podivného atraktoru.</i>
<i># (mohou se měnit)</i>
A = ...
B = ...
C = ...
D = ...
&nbsp;
<i># Vlastní výpočet podivného atraktoru.</i>
for i in range(n - 1):
    x_dot, y_dot = dyn_system(x[i], y[i], A, B, C, D)
    x[i + 1] = x_dot
    y[i + 1] = y_dot
&nbsp;
<i># Vykreslení grafu s atraktorem.</i>
plt.plot(x[settle_down_points:], y[settle_down_points:], "o", markersize=0.1)
&nbsp;
<i># Změna velikosti komponent v grafu.</i>
plt.tight_layout()
&nbsp;
<i># Uložení grafu pro jeho další zpracování.</i>
plt.savefig("dyn_system.png")
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Dynamické systémy, v&nbsp;nichž nelinearitu zajišťují goniometrické funkce</h2>

<p>Ukažme si nyní několik dynamických systémů, ve kterých potřebnou nelinearitu
zajišťuje použití goniometrických funkcí. Vždy si pouze uvedeme funkci pro
výpočet jednoho bodu takového systému a výsledné obrázky.</p>

<pre>
def <strong>bedhead</strong>(x, y, a, b):
    x_dot = sin(x * y / b) * y + cos(a * x - y)
    y_dot = x + sin(y) / b
    return x_dot, y_dot
</pre>

*** image ***
<p><i>Obrázek 11: Dynamický systém nazvaný Bedhead.</i></p>

*** image ***
<p><i>Obrázek 12: Dynamický systém nazvaný Bedhead.</i></p>

<pre>
def <strong>de_jong</strong>(x, y, a, b, c, d):
    <i>"""Funkce pro výpočet dalšího bodu De Jongova atraktoru."""</i>
    x_dot = sin(a * y) - cos(b * x)
    y_dot = sin(c * x) - cos(d * y)
    return x_dot, y_dot
</pre>

*** image ***
<p><i>Obrázek 13: De Jongův dynamický systém.</i></p>

*** image ***
<p><i>Obrázek 14: De Jongův dynamický systém.</i></p>

<pre>
def <strong>fractal_dream</strong>(x, y, a, b, c, d):
    x_dot = sin(b * y) - c * sin(b * x)
    y_dot = sin(a * x) - d * sin(a * y)
    return x_dot, y_dot
</pre>

*** image ***
<p><i>Obrázek 15: Dynamický systém nazvaný Fractal Dream.</i></p>

<pre>
def <strong>rason_rampe_1</strong>(x, y, a, b, c, d):
    x_dot = cos(b * y) + c * sin(b * x)
    y_dot = cos(a * x) + d * sin(a * y)
    return x_dot, y_dot
</pre>

*** image ***
<p><i>Obrázek 16: Dynamický systém navržený Jasonem Rampe (první varianta).</i></p>

<pre>
def <strong>rason_rampe_2</strong>(x, y, a, b, c, d):
    x_dot = cos(b * y) + c * cos(b * x)
    y_dot = cos(a * x) + d * cos(a * y)
    return x_dot, y_dot
</pre>

*** image ***
<p><i>Obrázek 17: Dynamický systém navržený Jasonem Rampe (druhá varianta).</i></p>

<pre>
def <strong>rason_rampe_3</strong>(x, y, a, b, c, d):
    x_dot = sin(b * y) + c * cos(b * x)
    y_dot = cos(a * x) + d * sin(a * y)
    return x_dot, y_dot
</pre>

*** image ***
<p><i>Obrázek 18: Dynamický systém navržený Jasonem Rampe (třetí varianta).</i></p>

<pre>
def <strong>pickover</strong>(x, y, a, b, c, d):
    x_dot = sin(a * y) + c * cos(a * x)
    y_dot = sin(b * x) + d * cos(b * y)
    return x_dot, y_dot
</pre>

*** image ***
<p><i>Obrázek 19: Pickoverův dynamický systém.</i></p>

*** image ***
<p><i>Obrázek 20: Pickoverův dynamický systém.</i></p>

<pre>
def <strong>svensson</strong>(x, y, a, b, c, d):
    x_dot = d * sin(x * a) - sin(y * b)
    y_dot = c * cos(x * a) + cos(y * b)
    return x_dot, y_dot
</pre>

*** image ***
<p><i>Obrázek 21: Svenssonův dynamický systém.</i></p>

*** image ***
<p><i>Obrázek 22: Svenssonův dynamický systém.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Dynamické systémy v&nbsp;nichž nelinearitu zajišťuje funkce <strong>sgn</strong></h2>

<p>Nelinearitu (a to skokovou změnu) zajišťuje pochopitelně i funkce pro
detekci znaménka <strong>sgn</strong>. I takové dynamické systémy existují,
takže si některé z&nbsp;nich ukažme.</p>

<pre>
def <strong>hopalong</strong>(x, y, a, b, c):
    x_dot = y - sign(x) * sqrt(abs(b * x - c))
    y_dot = a - x
    return x_dot, y_dot
</pre>

*** image ***
<p><i>Obrázek 23: Dynamický systém Hopalong.</i></p>

*** image ***
<p><i>Obrázek 24: Dynamický systém Hopalong.</i></p>

<pre>
def <strong>quadruptwo</strong>(x, y, a, b, c):
    x_dot = y - sign(x) * sin(ln(abs(b * x - c))) * atan(sqr(ln(abs(c * x - b))))
    y_dot = a - x
    return x_dot, y_dot
</pre>

*** image ***
<p><i>Obrázek 25: Dynamický systém Quadruptwo.</i></p>

<pre>
def <strong>threeply</strong>(x, y, a, b, c):
    x_dot = y - sign(x) * abs(sin(x) * cos(b) + c - x * sin(a + b + c))
    y_dot = a - x
    return x_dot, y_dot
</pre>

*** image ***
<p><i>Obrázek 26: Dynamický systém Threeply.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Nelinearita zajištěná operací podílu</h2>

<p>Nelinearitu mezi hodnotami <strong>x</strong> a <strong>y</strong> dokáže
zajistit i operace podílu. Tato operace je využita například v&nbsp;dynamickém
systému založeném na Gumowského funkci. Celý výpočet vypadá následovně:</p>

<pre>
def <strong>Gumowski</strong>(x, mu):
    <i>"""Gumovského funkce."""</i>
    g = x * mu + 2 * x * x * (1 - mu) / (1 + x * x)
    return g
&nbsp;
&nbsp;
def <strong>gumowski_mira</strong>(x, y, a, b, mu):
    <i>"""Funkce pro výpočet dalšího bodu podivného atraktoru Gumowski-Mira."""</i>
    x_dot = a * y * (1 - b * y * y) + y + Gumowski(x, mu)
    y_dot = -x + Gumowski(x_dot, mu)
    return x_dot, y_dot
</pre>

<p>A takto vypadají vypočtené a vizualizované výsledky:</p>

*** image ***
<p><i>Obrázek 27: Dynamický systém Gumowski-Mira.</i></p>

*** image ***
<p><i>Obrázek 28: Dynamický systém Gumowski-Mira.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Dynamický systém nazvaný jednoduše <i>Dynamic</i></h2>

<p></p>

<pre>
def <strong>dynamic</strong>(x, y, a, b):
    <i>"""Funkce pro výpočet dalšího bodu podivného atraktoru."""</i>
    x_dot = -sin(y + a * sin(b * y))
    y_dot = sin(x + a * sin(b * x))
    return x_dot, y_dot
</pre>

<p></p>

<pre>
for x0 in range(0, max_x, step_x):
    for y0 in range(0, max_y, step_y):
        <i># Počáteční hodnoty pro výpočet.</i>
        x[i], y[i] = (x0, y0)
        <i># Jedno "vlákno" atraktoru.</i>
        for r in range(1, maxiter):
            x_dot, y_dot = dynamic(x[i], y[i], A, B)
            x[i + 1] = x[i] + dt * x_dot
            y[i + 1] = y[i] + dt * y_dot
            i += 1
</pre>

<p></p>

<pre>
<i># Dynamic system renderer</i>
&nbsp;
<i># Import všech potřebných knihoven - Numpy, Matplotlibu a standardní</i>
<i># matematické knihovny, ze které se využijí jen některé vybrané funkce.</i>
from math import sin
&nbsp;
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
&nbsp;
def dynamic(x, y, a, b):
    """Funkce pro výpočet dalšího bodu podivného atraktoru."""
    x_dot = -sin(y + a * sin(b * y))
    y_dot = sin(x + a * sin(b * x))
    return x_dot, y_dot
&nbsp;
&nbsp;
<i># Konstanta pro numerickou integraci. Menší hodnoty znamenají přesnější</i>
<i># výpočty, ovšem na úkor výpočetního času.</i>
dt = 0.3
&nbsp;
<i># Parametry mřížky s počátečními hodnotami dynamického systému.</i>
max_x = 50
step_x = 5
max_y = 50
step_y = 5
&nbsp;
<i># Počet iterací pro zadané počáteční podmínky.</i>
maxiter = 1000
&nbsp;
<i># Počet vypočtených bodů na podivném atraktoru.</i>
n = maxiter * max_x // step_x * max_y // step_y
&nbsp;
<i># Prozatím prázdné pole připravené pro výpočet.</i>
x = np.zeros((n,))
y = np.zeros((n,))
&nbsp;
<i># Počáteční hodnoty pro výpočet.</i>
<i># x[0], y[0] = (10, 10)</i>
&nbsp;
<i># Parametry ovlivňující výpočet podivného atraktoru.</i>
A = -2.7
B = 2.8
&nbsp;
i = 0
<i># Vlastní výpočet podivného atraktoru  pro různé počáteční podmínky.</i>
for x0 in range(0, max_x, step_x):
    for y0 in range(0, max_y, step_y):
        <i># Počáteční hodnoty pro výpočet.</i>
        x[i], y[i] = (x0, y0)
        <i># Jedno "vlákno" atraktoru.</i>
        for r in range(1, maxiter):
            x_dot, y_dot = dynamic(x[i], y[i], A, B)
            x[i + 1] = x[i] + dt * x_dot
            y[i + 1] = y[i] + dt * y_dot
            i += 1
&nbsp;
<i># Vykreslení grafu s podivným atraktorem.</i>
plt.plot(x, y, "o", markersize=0.1)
&nbsp;
<i># Změna velikosti komponent v grafu.</i>
plt.tight_layout()
&nbsp;
<i># Uložení grafu pro jeho další zpracování.</i>
plt.savefig("dynamic_1.png")
&nbsp;
<i># Zobrazení grafu.</i>
plt.show()
&nbsp;
<i># Druhý atraktor</i>
&nbsp;
<i># Parametry ovlivňující výpočet podivného atraktoru.</i>
A = 2.7
B = -2.8
step_x = step_x // 2
step_y = step_y * 2
maxiter = maxiter // 2
&nbsp;
i = 0
<i># Vlastní výpočet podivného atraktoru  pro různé počáteční podmínky.</i>
for x0 in range(0, max_x, step_x):
    for y0 in range(0, max_y, step_y):
        <i># Počáteční hodnoty pro výpočet.</i>
        x[i], y[i] = (x0, y0)
        <i># Jedno "vlákno" atraktoru.</i>
        for r in range(1, maxiter):
</pre>


<p><a name="k12"></a></p>
<h2 id="k12">12. Dynamický systém nazvaný <i>Icon</i> &ndash; výpočet v&nbsp;komplexní rovině</h2>

<p></p>

<pre>
def icon(x, y, lambda_, alpha, beta, gamma, omega, degree):
    """Funkce pro výpočet dalšího bodu podivného atraktoru."""
    zzbar = x * x + y * y
    p = alpha * zzbar + lambda_
    zreal = x
    zimag = y
    for i in range(degree - 2):
        za = zreal * x - zimag * y
        zb = zimag * x + zreal * y
        zreal = za
        zimag = zb
    zn = x * zreal - y * zimag
    p = p + beta * zn
    x_dot = p * x + gamma * zreal - omega * y
    y_dot = p * y - gamma * zimag + omega * x
    return x_dot, y_dot
</pre>

<pre>
for i in range(n - 1):
    x_dot, y_dot = icon(x[i], y[i], LAMBDA, ALFA, BETA, GAMMA, OMEGA, DEGREE)
    x[i + 1] = x_dot
    y[i + 1] = y_dot
</pre>

<pre>
# Icon attractor

# Import všech potřebných knihoven - Numpy, Matplotlibu a standardní
# matematické knihovny, ze které se využijí jen některé vybrané funkce.
import matplotlib.pyplot as plt
import numpy as np


def icon(x, y, lambda_, alpha, beta, gamma, omega, degree):
    """Funkce pro výpočet dalšího bodu podivného atraktoru."""
    zzbar = x * x + y * y
    p = alpha * zzbar + lambda_
    zreal = x
    zimag = y
    for i in range(degree - 2):
        za = zreal * x - zimag * y
        zb = zimag * x + zreal * y
        zreal = za
        zimag = zb
    zn = x * zreal - y * zimag
    p = p + beta * zn
    x_dot = p * x + gamma * zreal - omega * y
    y_dot = p * y - gamma * zimag + omega * x
    return x_dot, y_dot


def draw_icon(filename, lambda_, alfa, beta, gamma, omega, degree, color):
    """Vykreslení atraktoru se zadanými parametry."""
    # Celkový počet vypočtených bodů na atraktoru.
    n = 100000

    # Počet bodů ze začátku výpočtu, které se nevykreslí.
    settle_down_points = 10

    # Prozatím prázdné pole připravené pro uložení výsledků výpočtu.
    x = np.zeros((n,))
    y = np.zeros((n,))

    # Počáteční hodnoty pro výpočet.
    x[0], y[0] = (0.01, 0.01)

    # Vlastní výpočet podivného atraktoru.
    for i in range(n - 1):
        x_dot, y_dot = icon(x[i], y[i], LAMBDA, ALFA, BETA, GAMMA, OMEGA, DEGREE)
        x[i + 1] = x_dot
        y[i + 1] = y_dot

    # Změna velikosti komponent v grafu.
    plt.figure(figsize=(8, 8))

    # Vykreslení grafu.
    plt.plot(
        x[settle_down_points:], y[settle_down_points:], "o", markersize=0.1, color=color
    )

    # Uložení grafu pro jeho další zpracování.
    plt.savefig(filename)

    # Zobrazení grafu.
    plt.show()


# První atraktor

# Parametry ovlivňující výpočet podivného atraktoru.
LAMBDA = -2.5
ALFA = 5
BETA = -1.9
GAMMA = 1
OMEGA = 0.188
DEGREE = 5

draw_icon("icon_1.png", LAMBDA, ALFA, BETA, GAMMA, OMEGA, DEGREE, "blue")

# Druhý atraktor

LAMBDA = 1.56
ALFA = -1
BETA = 0.1
GAMMA = -0.82
OMEGA = 0.12
DEGREE = 3

draw_icon("icon_2.png", LAMBDA, ALFA, BETA, GAMMA, OMEGA, DEGREE, "red")
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Dynamický systém nazvaný <i>Kamtorus</i></h2>

<pre>
def kam_torus(orbit_start, orbit_end, orbit_step, points_per_orbit, a):
    """Výpočet atraktoru."""
    # Celkový počet vypočtených bodů na podivném atraktoru.
    n = 100000

    # Prozatím prázdné pole připravené pro výpočet.
    x = np.zeros((n,))
    y = np.zeros((n,))

    # Vlastní výpočet podivného atraktoru.
    i = 0
    for orbit in frange(orbit_start, orbit_end, orbit_step):
        x[i] = orbit / 3.0
        y[i] = orbit / 3.0
        i += 1
        if i >= n:
            return x, y
        for p in range(1, points_per_orbit):
            x[i] = x[i - 1] * cos(a) + (x[i - 1] * x[i - 1] - y[i - 1]) * sin(a)
            y[i] = x[i - 1] * sin(a) - (x[i - 1] * x[i - 1] - y[i - 1]) * cos(a)
            i += 1
            if i >= n:
                return x, y
    return x, y
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Vylepšení vizualizace dynamických systémů v&nbsp;ploše: obarvení pixelů na základě počtu bodů, které reprezentují</h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: pomocné moduly pro vykreslení dynamických systémů s&nbsp;využitím knihovny Pygame</h2>

<p>Demonstrační příklady, které jsou postaveny nad knihovnou <i>Pygame</i> (a
nikoli nad <i>Matplotlibem</i>) používají čtyři pomocné moduly zajišťující
vytvoření okna pro vykreslování, manipulaci s&nbsp;bitmapami i vlastní
vizualizaci dynamického systému. Do těchto modulů postačuje pouze předat funkci
pro výpočet jednoho bodu ve fázovém prostoru, parametry dynamického systému,
měřítko a požadovaný kontrast výsledného obrázku.</p>



<h3>colors.py</h3>

<p>Obsahuje pouze výčet se jmény barev, použito při konstrukci okna pro vykreslování:</p>

<pre>
from enum import Enum
&nbsp;
&nbsp;
class <strong>Colors</strong>(Enum):
    <i>"""Named colors used everywhere on demo screens."""</i>
&nbsp;
    BLACK = (0, 0, 0)
    BLUE = (0, 0, 255)
    CYAN = (0, 255, 255)
    GREEN = (0, 255, 0)
    YELLOW = (255, 255, 0)
    RED = (255, 0, 0)
    MAGENTA = (255, 0, 255)
    WHITE = (255, 255, 255)
</pre>



<h3>ui.py</h3>

<p>Realizuje otevření okna pro vykreslování a obsahuje implementaci smyčky pro
obsluhu událostí (<i>event loop</i>):</p>

<pre>
import sys
from typing import Tuple
&nbsp;
import pygame
import pygame.locals
from colors import Colors
&nbsp;
&nbsp;
def <strong>initialize</strong>(
    title: str, width: int, height: int
) -&gt; Tuple[pygame.Surface, pygame.Surface, pygame.time.Clock]:
    <i>"""Initialize Pygame display, drawing surface, and clocks."""</i>
    <i># set window title</i>
    pygame.display.set_caption(title)
&nbsp;
    <i># initialize window</i>
    display = pygame.display.set_mode([width, height])
    display.fill(Colors.BLACK.value)
&nbsp;
    <i># create all required Pygame objects</i>
    surface = pygame.Surface([width, height])
    surface.fill(Colors.BLACK.value)
&nbsp;
    clock = pygame.time.Clock()
&nbsp;
    return display, surface, clock
&nbsp;
&nbsp;
def <strong>event_loop</strong>(
    display: pygame.Surface, surface: pygame.Surface, clock: pygame.time.Clock
) -&gt; None:
    <i>"""Event loop that just waits for keypress or window close operation."""</i>
    while True:
        for event in pygame.event.get():
            if event.type == pygame.locals.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.locals.KEYDOWN:
                if event.key == pygame.locals.K_ESCAPE:
                    pygame.quit()
                    sys.exit()
                if event.key == pygame.locals.K_RETURN:
                    pygame.quit()
                    sys.exit()
&nbsp;
        <i># all events has been processed - update scene and redraw the screen</i>
        display.blit(surface, (0, 0))
        pygame.display.update()
        clock.tick(25)
</pre>



<h3>bitmap.py</h3>

<p>Manipulace s&nbsp;bitmapou, do které je vykreslen dynamický systém.
Realizuje i normalizaci hodnot pro vykreslení bitmapy do okna:</p>

<pre>
from typing import List, Tuple
&nbsp;
from pygame import Surface
&nbsp;
&nbsp;
def <strong>compute_min_max</strong>(
    bitmap: List[List[float]], width: int, height: int
) -&gt; Tuple[float, float]:
    <i># initial limits for pixel values normalization</i>
    min = float("inf")
    max = float("-inf")
&nbsp;
    <i># retrieve minimal and maximal pixel values</i>
    for j in range(height):
        for i in range(width):
            z = bitmap[j][i]
            if max < z:
                max = z
            if min > z:
                min = z
    return min, max
&nbsp;
&nbsp;
def <strong>create_bitmap</strong>(width: int, height: int) -&gt; List[List[float]]:
    return [[0 for x in range(width)] for y in range(height)]
&nbsp;
&nbsp;
def <strong>draw_bitmap</strong>(bitmap: List[List[float]], surface: Surface, max_factor: float) -&gt; None:
    print("contrast adjustment")
    width, height = surface.get_size()
&nbsp;
    <i># retrieve minimal and maximal pixel values</i>
    min, max = compute_min_max(bitmap, width, height)
    max *= max_factor
    k = 255.0 / (max - min)
&nbsp;
    <i># contrast change</i>
    for y in range(height):
        for x in range(width):
            f = float(bitmap[y][x])
            f -= min
            f *= k
            if f &gt; 255.0:
                f = 255
            i = int(f) &amp; 255
            surface.set_at((x, y), i + (i &lt;&lt; 8) + (i &lt;&lt; 16))
</pre>



<h3>renderer.py</h3>

<p>Funkce realizující vykreslení dynamického systému; ústřední prvek celého
&bdquo;frameworku&ldquo;:</p>

<pre>
from typing import Callable
&nbsp;
from bitmap import create_bitmap, draw_bitmap
from pygame import Surface, image
&nbsp;
&nbsp;
def <strong>render_attractor</strong>(
    surface: Surface,
    x: float,
    y: float,
    scale: float,
    x_offset: int,
    y_offset: int,
    max_points: int,
    settle_down_points: int,
    contrast: float,
    attractor_formula: Callable,
    filename: str,
    **attractor_params: float
) -&gt; None:
    width, height = surface.get_size()
    bitmap = create_bitmap(width, height)
&nbsp;
    for i in range(max_points):
        x_dot, y_dot = attractor_formula(x, y, **attractor_params)
&nbsp;
        xi = width // 2 + int(scale * x_dot) + x_offset
        yi = height // 2 + int(scale * y_dot) + y_offset
&nbsp;
        <i># try to draw pixel</i>
        if i &gt; settle_down_points:
            if xi &gt;= 0 and yi &gt;= 0 and xi &lt; width and yi &lt; height:
                bitmap[yi][xi] += 1
&nbsp;
        <i># next point calculation</i>
        x, y = x_dot, y_dot
&nbsp;
    draw_bitmap(bitmap, surface, contrast)
    image.save(surface, filename)
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny skripty, které byly v&nbsp;předchozích kapitolách použity pro tvorbu
obrázků a animací, jsou uloženy v&nbsp;Git repositáři dostupném na adrese <a
href="https://github.com/tisnik/fractals/">https://github.com/tisnik/fractals/</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis příkladu</th><th>Cesta ke zdrojovému kódu příkladu</th></tr>
<tr><td> 1</td><td>Lorenz_x_y_z.py</td><td>zobrazení vývoje hodnot x, y a z v&nbsp;trojici samostatných grafů</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/Lorenz_x_y_z.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/Lorenz_x_y_z.py</a></td></tr>
<tr><td> 2</td><td>Lorenz.py</td><td>zobrazení fázového prostoru ve formě 3D grafu popř.&nbsp;průmětů do vybraných rovin</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/Lorenz.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/Lorenz.py</a></td></tr>
<tr><td> 3</td><td>Lorenz_butterfly_effect.py</td><td>animace efektu motýlích křídel</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/Lorenz_butterfly_effect.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/Lorenz_butterfly_effect.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 4</td><td>lorenz_change_params.py</td><td>vykreslení Lorenzova atraktoru s&nbsp;různými parametry s a r</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/lorenz_change_params.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/lorenz_change_params.py</a></td></tr>
<tr><td> 5</td><td>lorenz_change_params_multiplot.py</td><td>vykreslení Lorenzova atraktoru s&nbsp;různými parametry s a r</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/lorenz_change_params_multiplot.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/lorenz_change_params_multiplot.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>lorenz_change_params_anim.py</td><td>animace změny parametrů Lorenzova atraktoru</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/lorenz_change_params_anim.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/lorenz_change_params_anim.py</a></td></tr>
<tr><td> 7</td><td>lorenz_change_params_anim_2.py</td><td>vylepšení animace změny atraktorů Lorenzova atraktoru</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/lorenz_change_params_anim_2.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/lorenz_change_params_anim_2.py</a></td></tr>
<tr><td> 8</td><td>lorenz_2d_dynamic.py</td><td>Vliv počátečních podmínek na tvar Lorenzova systému, vykreslení do jediného grafu</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/lorenz_2d_dynamic.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/lorenz_2d_dynamic.py</a></td></tr>
<tr><td> 9</td><td>lorenz_2d_dynamic_multiplot.py</td><td>Vliv počátečních podmínek na tvar Lorenzova systému, vykreslení do mřížky grafů</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/lorenz_2d_dynamic_multiplot.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/lorenz_2d_dynamic_multiplot.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>Lorenz-mod-2.py</td><td>modifikovaný Lorenzův atraktor</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/Lorenz-mod-2.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/Lorenz-mod-2.py</a></td></tr>
<tr><td>11</td><td>Pickover.py</td><td>Pickoverův atraktor</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/Pickover.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/Pickover.py</a></td></tr>
<tr><td>12</td><td>Rossler.py</td><td>Rösslerův atraktor</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/Rossler.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/Rossler.py</a></td></tr>
<tr><td>13</td><td>Wang-Sun.py</td><td>Wang-Sunův atraktor</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/Wang-Sun.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/Wang-Sun.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>14</td><td>lorenz_map.py</td><td>výpočet a zobrazení mapy Lorenzova atraktoru</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/lorenz_map.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/lorenz_map.py</a></td></tr>
<tr><td>15</td><td>rossler_map.py</td><td>výpočet a zobrazení mapy Rösslerova atraktoru</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/3D/rossler_map.py">https://github.com/tisnik/fractals/blob/master/attractors/3D/rossler_map.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>Bedhead.py</td><td>atraktor nazvaný <i>Bedhead</i> s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Bedhead.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Bedhead.py</a></td></tr>
<tr><td>17</td><td>De_jong.py</td><td>De Jongům atraktor s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/De_jong.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/De_jong.py</a></td></tr>
<tr><td>18</td><td>Dynamic.py</td><td>atraktor nazvaný <i>Dynamic</i> s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Dynamic.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Dynamic.py</a></td></tr>
<tr><td>19</td><td>Fractal_dream.py</td><td>atraktor nazvaný <i>Fractal Dream</i> s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Fractal_dream.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Fractal_dream.py</a></td></tr>
<tr><td>20</td><td>Gumowski-Mira.py</td><td>atraktor autorů Gumowski a Mira s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Gumowski-Mira.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Gumowski-Mira.py</a></td></tr>
<tr><td>21</td><td>Hopalong.py</td><td>atraktor nazvaný <i>Hopalong</i> s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Hopalong.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Hopalong.py</a></td></tr>
<tr><td>22</td><td>Icon.py</td><td>atraktor nazvaný <i>Icon</i> s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Icon.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Icon.py</a></td></tr>
<tr><td>23</td><td>JasonRampe1.py</td><td>první dynamický systém Jasona Rampeho s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/JasonRampe1.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/JasonRampe1.py</a></td></tr>
<tr><td>24</td><td>JasonRampe2.py</td><td>druhý dynamický systém Jasona Rampeho s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/JasonRampe2.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/JasonRampe2.py</a></td></tr>
<tr><td>25</td><td>JasonRampe3.py</td><td>třetí dynamický systém Jasona Rampeho s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/JasonRampe3.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/JasonRampe3.py</a></td></tr>
<tr><td>26</td><td>Kam_Torus.py</td><td>atraktor nazvaný <i>Kam Torus</i> s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Kam_Torus.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Kam_Torus.py</a></td></tr>
<tr><td>27</td><td>Pickover.py</td><td>Pickoverův atraktor s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pickover.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pickover.py</a></td></tr>
<tr><td>28</td><td>Quadruptwo.py</td><td>atraktor nazvaný <i>Quadruptwo</i> s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Quadruptwo.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Quadruptwo.py</a></td></tr>
<tr><td>29</td><td>Svensson.py</td><td>Svenssoneův atraktor s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Svensson.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Svensson.py</a></td></tr>
<tr><td>30</td><td>Threeply.py</td><td>atraktor nazvaný <i>Threeply</i> s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Matplotlib</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Threeply.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Threeply.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>Bedhead.py</td><td>atraktor nazvaný <i>Bedhead</i> s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Pygame</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Bedhead.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Bedhead.py</a></td></tr>
<tr><td>32</td><td>De_jong.py</td><td>De Jongům atraktor s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Pygame</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/De_jong.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/De_jong.py</a></td></tr>
<tr><td>33</td><td>Fractal_dream.py</td><td>atraktor nazvaný <i>Fractal Dream</i> s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Pygame</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Fractal_dream.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Fractal_dream.py</a></td></tr>
<tr><td>34</td><td>Gumowski-Mira.py</td><td>atraktor autorů Gumowski a Mira s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Pygame</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Gumowski-Mira.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Gumowski-Mira.py</a></td></tr>
<tr><td>35</td><td>Hopalong.py</td><td>atraktor nazvaný <i>Hopalong</i> s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Pygame</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Hopalong.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Hopalong.py</a></td></tr>
<tr><td>36</td><td>JasonRampe1.py</td><td>první dynamický systém Jasona Rampeho s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Pygame</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/JasonRampe1.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/JasonRampe1.py</a></td></tr>
<tr><td>37</td><td>JasonRampe2.py</td><td>druhý dynamický systém Jasona Rampeho s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Pygame</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/JasonRampe2.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/JasonRampe2.py</a></td></tr>
<tr><td>38</td><td>JasonRampe3.py</td><td>třetí dynamický systém Jasona Rampeho s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Pygame</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/JasonRampe3.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/JasonRampe3.py</a></td></tr>
<tr><td>39</td><td>Pickover.py</td><td>Pickoverův atraktor s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Pygame</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Pickover.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Pickover.py</a></td></tr>
<tr><td>40</td><td>Quadruptwo.py</td><td>atraktor nazvaný <i>Quadruptwo</i> s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Pygame</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Quadruptwo.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Quadruptwo.py</a></td></tr>
<tr><td>41</td><td>Svensson.py</td><td>Svenssoneův atraktor s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Pygame</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Svensson.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Svensson.py</a></td></tr>
<tr><td>42</td><td>Threeply.py</td><td>atraktor nazvaný <i>Threeply</i> s&nbsp;2D fázovým prostorem, vykresleno přes knihovnu Pygame</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Threeply.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/Threeply.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>bitmap.py</td><td>pomocný modul pro manipulaci s&nbsp;bitmapami, jejich normalizaci atd.</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/bitmap.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/bitmap.py</a></td></tr>
<tr><td>44</td><td>colors.py</td><td>pomocný modul se jmény barev</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/colors.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/colors.py</a></td></tr>
<tr><td>45</td><td>ui.py</td><td>pomocný modul s&nbsp;funkcemi pro vytvoření jednoduchého uživatelského rozhraní přes knihovnu Pygame</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/ui.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/ui.py</a></td></tr>
<tr><td>46</td><td>renderer.py</td><td>pomocný modul s&nbsp;funkcí pro vykreslení dynamického systému v&nbsp;2D ploše</td><td><a href="https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/renderer.py">https://github.com/tisnik/fractals/blob/master/attractors/2D/Pygame/renderer.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Lorenz Attractor by Dr. Bruce Stewart<br />
<a href="https://www.youtube.com/watch?v=YS_xtBMUrJg">https://www.youtube.com/watch?v=YS_xtBMUrJg</a>
</li>

<li>Welcome - Dynamical Systems | Intro Lecture<br />
<a href="https://www.youtube.com/watch?v=41P4vFP7RWo">https://www.youtube.com/watch?v=41P4vFP7RWo</a>
</li>

<li>The Lorenz Equations - Dynamical Systems | Lecture 27<br />
<a href="https://www.youtube.com/watch?v=0Rpy-xSsAo8">https://www.youtube.com/watch?v=0Rpy-xSsAo8</a>
</li>

<li>Phase space<br />
<a href="https://en.wikipedia.org/wiki/Phase_space">https://en.wikipedia.org/wiki/Phase_space</a>
</li>

<li>Fázový prostor<br />
<a href="https://cs.wikipedia.org/wiki/F%C3%A1zov%C3%BD_prostor">https://cs.wikipedia.org/wiki/F%C3%A1zov%C3%BD_prostor</a>
</li>

<li>Lorenzův atraktor<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-vi/#k02">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-vi/#k02</a>
</li>

<li>Lorenzův atraktor<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03</a>
</li>

<li>Lorenz system<br />
<a href="https://en.wikipedia.org/wiki/Lorenz_system">https://en.wikipedia.org/wiki/Lorenz_system</a>
</li>

<li>The Lorenz system - An introduction to chaos<br />
<a href="https://www.math.toronto.edu/kzhang/teaching/courses/mat332-2022/_8-lorenz-system/">https://www.math.toronto.edu/kzhang/teaching/courses/mat332-2022/_8-lorenz-system/</a>
</li>

<li>Dynamical system<br />
<a href="https://en.wikipedia.org/wiki/Dynamical_system">https://en.wikipedia.org/wiki/Dynamical_system</a>
</li>

<li>What are Dynamical Systems?<br />
<a href="https://math.libretexts.org/Bookshelves/Scientific_Computing_Simulations_and_Modeling/Introduction_to_the_Modeling_and_Analysis_of_Complex_Systems_(Sayama)/03%3A_Basics_of_Dynamical_Systems/3.01%3A_What_are_Dynamical_Systems%3F">https://math.libretexts.org/Bookshelves/Scientific_Computing_Simulations_and_Modeling/Introduction_to_the_Modeling_and_Analysis_of_Complex_Systems_(Sayama)/03%3A_Basics_of_Dynamical_Systems/3.01%3A_What_are_Dynamical_Systems%3F</a>
</li>

<li>TEACHING MATHEMATICS WITH A HISTORICAL PERSPECTIVE: Lecture 11: Dynamical systems<br />
<a href="https://abel.math.harvard.edu/~knill/teaching/mathe320_2022/handouts/10-dynamics.pdf">https://abel.math.harvard.edu/~knill/teaching/mathe320_2022/handouts/10-dynamics.pdf</a>
</li>

<li>Emergence (Wikipedia CS)<br />
<a href="https://cs.wikipedia.org/wiki/Emergence">https://cs.wikipedia.org/wiki/Emergence</a>
</li>

<li>Emergence (Wikipedia EN)<br />
<a href="https://en.wikipedia.org/wiki/Emergence">https://en.wikipedia.org/wiki/Emergence</a>
</li>

<li>Particle Life: Vivid structures from rudimentary rules<br />
<a href="https://particle-life.com/">https://particle-life.com/</a>
</li>

<li>Self-organization<br />
<a href="https://en.wikipedia.org/wiki/Self-organization">https://en.wikipedia.org/wiki/Self-organization</a>
</li>

<li>Samoorganizace<br />
<a href="https://cs.wikipedia.org/wiki/Samoorganizace">https://cs.wikipedia.org/wiki/Samoorganizace</a>
</li>

<li>Spontaneous order<br />
<a href="https://en.wikipedia.org/wiki/Spontaneous_order">https://en.wikipedia.org/wiki/Spontaneous_order</a>
</li>

<li>NumPy Home Page<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>NumPy v1.10 Manual<br />
<a href="http://docs.scipy.org/doc/numpy/index.html">http://docs.scipy.org/doc/numpy/index.html</a>
</li>

<li>NumPy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NumPy">https://en.wikipedia.org/wiki/NumPy</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Rössler attractor<br />
<a href="https://en.wikipedia.org/wiki/R%C3%B6ssler_attractor">https://en.wikipedia.org/wiki/R%C3%B6ssler_attractor</a>
</li>

<li>Rossler attractor <br />
<a href="http://scholarpedia.org/article/Rossler_attractor">http://scholarpedia.org/article/Rossler_attractor</a>
</li>

<li>List of chaotic maps<br />
<a href="https://en.wikipedia.org/wiki/List_of_chaotic_maps">https://en.wikipedia.org/wiki/List_of_chaotic_maps</a>
</li>

<li>Wolfram MathWorld: Rössler attractor<br />
<a href="https://mathworld.wolfram.com/RoesslerAttractor.html">https://mathworld.wolfram.com/RoesslerAttractor.html</a>
</li>

<li>Wolfram MathWorld: Lorenz attractor<br />
<a href="https://www.wolframalpha.com/input?i=Lorenz+attractor&amp;assumption=%22ClashPrefs%22+-%3E+%7B%22MathWorld%22%2C+%22LorenzAttractor%22%7D">https://www.wolframalpha.com/input?i=Lorenz+attractor&amp;assumption=%22ClashPrefs%22+-%3E+%7B%22MathWorld%22%2C+%22LorenzAttractor%22%7D</a>
</li>

<li>Attracteur de Rössler (interaktivní, lze používat i bez znalosti jazyka)<br />
<a href="https://experiences.mathemarium.fr//Attracteur-de-Rossler.html">https://experiences.mathemarium.fr//Attracteur-de-Rossler.html</a>
</li>

<li>A 3-D four-wing attractor | Wang Sun attractor| Chaos Theory<br />
<a href="https://www.youtube.com/watch?v=Agx8LsMmokA">https://www.youtube.com/watch?v=Agx8LsMmokA</a>
</li>

<li>This is not a Lorenz attractor | Sprott C attractor| Chaos Theory<br />
<a href="https://www.youtube.com/watch?v=NoFkOwsT0XQ">https://www.youtube.com/watch?v=NoFkOwsT0XQ</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

