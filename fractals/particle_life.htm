<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Emergence: struktury vzniklé ze zdánlivého chaosu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Emergence: struktury vzniklé ze zdánlivého chaosu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Emergence: struktury vzniklé ze zdánlivého chaosu</a></p>
<p><a href="#k02">2. Jednoduchý framework pro zobrazení částicového systému</a></p>
<p><a href="#k03">3. Ukázka obrazovky s&nbsp;vizualizovaným statickým částicovým systémem</a></p>
<p><a href="#k04">4. Realizace dynamického částicového systému</a></p>
<p><a href="#k05">5. Výpočet nové pozice částic na základě jejich rychlosti a případných odrazů</a></p>
<p><a href="#k06">6. Ukázky obrazovek s&nbsp;vizualizovaným dynamickým částicovým systémem</a></p>
<p><a href="#k07">*** 7. Přidání pravidla pro vzájemné odpuzování částic</a></p>
<p><a href="#k08">8. Ukázky obrazovek s&nbsp;vizualizovaným dynamickým částicovým systémem</a></p>
<p><a href="#k09">*** 9. Větší množství částicových systémů</a></p>
<p><a href="#k10">*** 10. Pravidla pro interakci mezi částicemi z&nbsp;různých systémů</a></p>
<p><a href="#k11">*** 11. Změna funkce <strong>apply_rule</strong> na <strong>apply_rules</strong></a></p>
<p><a href="#k12">*** 12. Ukázky obrazovek s&nbsp;vizualizovaným dynamickým částicovým systémem</a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. Ukázky obrazovek s&nbsp;vizualizovaným dynamickým částicovým systémem</a></p>
<p><a href="#k17">17. Realizace částicového systému v&nbsp;Pythonu</a></p>
<p><a href="#k18">18. Příloha: modul <strong>gfx</strong></a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Emergence: struktury vzniklé ze zdánlivého chaosu</h2>

<p>V&nbsp;některých dynamických systémech mohou i na základě aplikace mnohdy
velmi jednoduchých pravidel vznikat složitější <i>emergentní</i> struktury.
Tato vlastnost se týká mnoha typů <i>komplexních systémů</i> s&nbsp;mnohdy
složitě popsanými entitami (nebo objekty, i když v&nbsp;kontextu IT je tento
termín zavádějící), ovšem nás budou v&nbsp;dnešním (i v&nbsp;navazujícím)
článku zajímat především takové komplexní systémy, v&nbsp;nichž je možné
vlastnosti jejich jednotlivých entit resp.&nbsp;elementů reprezentovat jako
body v&nbsp;ploše či v&nbsp;prostoru. Stav takového dynamického systému je tedy
popsán pozicemi těchto bodů, k&nbsp;nimž se většinou přidává i vektor
rychlosti.</p>

<img src="https://i.iinfo.cz/images/578/bokeh-02-5.png" class="image-576828" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="907" height="915" />
<p><i>Obrázek 1: Lorenzův atraktor je známým dynamickým systémem s&nbsp;podivným atraktorem.</i></p>

<p>Poměrně známým příkladem mohou být různé systémy částic (<i>particle
systems</i>), v&nbsp;nichž je možné při vhodné definici pravidel chování
jednotlivých částic taktéž nalézt mnohdy velmi zajímavě vypadající emergentní
struktury. Toto téma je sice poměrně rozsáhlé a vyžádá si nejméně jeden
samostatný článek (navíc trošku mimo hlavní záběr Roota), ovšem již dnes si
můžeme jeden takový jednoduše implementovatelný částicový systém ukázat. A
vzhledem k&nbsp;tomu, že dále zmíněný částicový systém vede ke vzniku
emergentní struktury (a nikoli pouze náhodného &bdquo;oblaku&ldquo; bodů),
budeme moci výsledek vizualizovat a to nikoli jako pouhý statický obrázek, ale
jako animaci ukazující postupný rozvoj tohoto dynamického systému.</p>

<p><div class="rs-tip-major">Poznámka: vzhledem k&nbsp;tomu, že budeme chtít
zobrazit animaci s&nbsp;postupným vývojem dynamického systému, bude jeho
realizace provedena v&nbsp;jazyku C. Pokud vás zajímá, jak by mohla vypadat
realizace v&nbsp;Pythonu, podívejte se na <a href="#k17">kapitolu
17</a>.</div></p>

<img src="https://i.iinfo.cz/images/392/torch4-4.png" class="image-309065" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 2: Lorenzův atraktor vykreslený ve formě 3D grafu.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Jednoduchý framework pro zobrazení částicového systému</h2>

<p>Pro účely vizualizace postupné změny stavu dynamického systému (tedy pro
tvorbu animací) si vytvoříme jednoduchý framework, který budeme v&nbsp;rámci
dalších kapitol postupně vylepšovat. Nejprve nastavíme okraje okna, do kterých
nebude zasahovat žádná částice. A taktéž specifikujeme maximální počet částic
v&nbsp;systému:</p>

<pre>
<i>/* model options */</i>
#define BORDER 50
&nbsp;
<i>/* total number of particles */</i>
#define MAX_PARTICLES 1000
</pre>

<p>Každá částice bude prozatím reprezentována strukturou s&nbsp;jejími
souřadnicemi:</p>

<pre>
typedef struct {
    float x;
    float y;
} <strong>Particle</strong>;
</pre>

<p>Reprezentace barvy částic v&nbsp;systému je triviální:</p>

<pre>
typedef struct Color {
    unsigned char r;
    unsigned char g;
    unsigned char b;
} <strong>Color</strong>;
</pre>

<p>Celý částicový systém bude prozatím reprezentován strukturou
s&nbsp;částicemi (alokovaný blok &ndash; částice nevytváříme ani je neničíme),
s&nbsp;počtem částic a taktéž s&nbsp;barvou všech částic v&nbsp;systému:</p>

<pre>
typedef struct {
    Particle *particles;
    int max;
    Color color;
} <strong>ParticleSystem</strong>;
</pre>

<p>A modelovaný svět je prozatím reprezentován triviálním způsobem (opět se
postupně tato struktura bude rozšiřovat):</p>

<pre>
typedef struct {
    ParticleSystem particle_system;
} <strong>Model</strong>;

<p>Pro prvotní náhodné rozmístění částic na obrazovce použijeme funkci nazvanou
<strong>create_particles</strong> s&nbsp;pomocnými funkcemi
<strong>random_x</strong> a <strong>random_y</strong> (používám zvláštní
funkce, aby bylo možné generátor souřadnic částic později parametrizovat):</p>

<pre>
float <strong>random_x</strong>() {
    return (WIDTH - BORDER * 2) * (float)rand() / RAND_MAX + BORDER;
}
&nbsp;
float <strong>random_y</strong>() {
    return (HEIGHT - BORDER * 2) * (float)rand() / RAND_MAX + BORDER;
}
&nbsp;
void <strong>create_particles</strong>(int max, Particle *particles) {
    int i;
    for (i = 0; i &lt; max; i++) {
        particles[i].x = random_x();
        particles[i].y = random_y();
    }
}
</pre>

<p>Funkce <strong>init_model</strong> se stará o vytvoření celého modelovaného
světa s&nbsp;částicemi:</p>

<pre>
Model <strong>init_model</strong>(void) {
    Color color = {255, 255, 80};
    Model model;
&nbsp;
    model.particle_system.color = color;
&nbsp;
    model.particle_system.particles =
        (Particle *)malloc(MAX_PARTICLES * sizeof(Particle));
    model.particle_system.max = MAX_PARTICLES;
&nbsp;
    createParticles(MAX_PARTICLES, model.particle_system.particles);
&nbsp;
    return model;
}
</pre>

<p>A konečně funkce <strong>redraw</strong> poslouží pro překreslení
částicového systému na obrazovku. Povšimněte si, že každá částice je vykreslena
jako malý symbol + (samotné vykreslování na úrovni pixelů je dosti pomalé! a
lze ho optimalizovat):</p>

<pre>
void <strong>redraw</strong>(GraphicsState *graphicsState, SDL_Surface *pixmap, Model *model) {
    int i;
&nbsp;
    ParticleSystem particle_system = model-&gt;particle_system;
&nbsp;
    SDL_FillRect(pixmap, NULL, 0x00);
    for (i = 0; i &lt; particle_system.max; i++) {
        Particle particle = particle_system.particles[i];
        Color color = particle_system.color;
        putpixel(pixmap, particle.x, particle.y, color.r, color.g, color.b);
        putpixel(pixmap, particle.x - 1, particle.y, color.r, color.g, color.b);
        putpixel(pixmap, particle.x + 1, particle.y, color.r, color.g, color.b);
        putpixel(pixmap, particle.x, particle.y - 1, color.r, color.g, color.b);
        putpixel(pixmap, particle.x, particle.y + 1, color.r, color.g, color.b);
    }
&nbsp;
    show_pixmap(graphicsState, pixmap);
}
</pre>

<p><div class="rs-tip-major">Poznámka: adresář s&nbsp;tímto projektem se
nachází na adrese <a
href="https://github.com/tisnik/presentations/tree/master/particle_life/v0/">https://github.com/tisnik/presentations/tree/master/particle_life/v0/</a>.</div></p>




