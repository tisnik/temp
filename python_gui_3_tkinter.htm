<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Grafické uživatelské rozhraní v Pythonu: knihovna Tkinter (2.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Grafické uživatelské rozhraní v Pythonu: knihovna Tkinter (2.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části seriálu o knihovnách určených pro tvorbu GUI v Pythonu si popíšeme další koncepty, na nichž je postavena knihovna Tkinter. Budeme se zabývat nastavováním stylů, změnou témat a taktéž použitím proměnných, které přímo &bdquo;sledují&ldquo; stav zvoleného widgetu.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Styly ovládacích prvků u původních widgetů knihovny Tk</a></p>
<p><a href="#k02">2. Nastavování stylů u widgetů z&nbsp;knihovny Ttk</a></p>
<p><a href="#k03">3. Předpřipravená témata nabízená knihovnou Ttk</a></p>
<p><a href="#k04">4. Výběr tématu za běhu programu</a></p>
<p><a href="#k05">5. Nastavení stylů pro jednotlivá témata</a></p>
<p><a href="#k06">6. Vizuální podoba okrajů tlačítek</a></p>
<p><a href="#k07">*** 7. Změna konfigurace mřížky &ndash; padding</a></p>
<p><a href="#k08">*** 8. Změna šířky okrajů tlačítek</a></p>
<p><a href="#k09">9. Použití manažeru geometrie &bdquo;pack&ldquo;</a></p>
<p><a href="#k10">10. Widget checkbutton</a></p>
<p><a href="#k11">11. Proměnná, která bude automaticky sledovat stav checkbuttonu</a></p>
<p><a href="#k12">*** 12. Explicitní nastavení hodnot sledovací proměnné</a></p>
<p><a href="#k13">*** 13. Widget entry</a></p>
<p><a href="#k14">*** 14. Proměnná s&nbsp;obsahem vstupního textového pole</a></p>
<p><a href="#k15">15. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Styly ovládacích prvků u původních widgetů knihovny Tk</h2>

<p></p>

<pre>
button1 = tkinter.Button(root, background='yellow', text="1st btn",
                         command=lambda: sys.exit(0))
</pre>

<pre>
button2 = tkinter.Button(root, background='#ff8080', text="Second button",
                         command=lambda: sys.exit(0))
</pre>

<pre>
button3.configure(background='#8080ff')
</pre>

<pre>
button4['background'] = '#80ff80'
</pre>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
button1 = tkinter.Button(root, background='yellow', text="1st btn",
                         command=lambda: sys.exit(0))
button2 = tkinter.Button(root, background='#ff8080', text="Second button",
                         command=lambda: sys.exit(0))
button3 = tkinter.Button(root, text="Third button",
                         command=lambda: sys.exit(0))
button4 = tkinter.Button(root, text="This is fourth button, the last one",
                         command=lambda: sys.exit(0))
&nbsp;
button3.configure(background='#8080ff')
button4['background'] = '#80ff80'
&nbsp;
button1.grid(column=1, row=1, sticky="we")
button2.grid(column=2, row=1, sticky="we")
button3.grid(column=1, row=2, sticky="we")
button4.grid(column=2, row=2, sticky="we")
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 1: Čtyři tlačítka, každé s&nbsp;odlišným pozadím.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Nastavování stylů u widgetů z&nbsp;knihovny Ttk</h2>

<p>U widgetů nabízených nadstavbovou knihovnou <i>Ttk</i> (neboli &bdquo;themed
Tk&ldquo;) se jejich vizuální styly nastavují odlišně a výše uvedený příklad by
při náhradě konstruktoru <strong>tkinter.Button</strong> za konstruktor
<strong>ttk.Button</strong> nepracoval korektně). Nejprve je totiž nutné
explicitně vytvořit nový styl, pojmenovat ho, nastavit jeho vlastnosti
(například barvu pozadí) a teprve poté tento styl přiřadit ke zvolenému
ovládacímu prvku. Toto řešení sice může vypadat komplikovaně (a nepochybně je
delší), ovšem oddělení stylů od konkrétních komponent je vhodnější ve chvíli,
kdy má mít celá aplikace konzistentní vzhled, který je současně nutné
jednoduchými zásahy modifikovat. Ostatně prakticky stejný problém je řešen u
statických webových stránek i u webových aplikací použitím kaskádních stylů
(CSS). Podívejme se nyní na to, jak je možné změnit pozadí čtyř tlačítek
z&nbsp;knihovny <i>Ttk</i>. Nejdříve si vytvoříme objekt reprezentující
pojmenované styly (můžeme jim říkat třídy) a přiřadíme mu vizuální
vlastnosti:</p>

<pre>
style = ttk.Style()
style.configure('Yellow.TButton', background='yellow')
style.configure('Red.TButton', background='#ff8080')
style.configure('Blue.TButton', background='#8080ff')
style.configure('Green.TButton', background='#80ff80')
</pre>

<p>Pojmenované třídy stylu potom přiřadíme jednotlivým ovládacím prvkům:</p>

<pre>
button1 = ttk.Button(root, text="1st btn", style='Yellow.TButton',
                     command=exit)
button2 = ttk.Button(root, text="Second button", style='Red.TButton',
                     command=exit)
</pre>

<p>Přiřazení lze ovšem v&nbsp;případě potřeby provést až po konstrukci
příslušného ovládacího prvku. Existují dvě varianty zápisu, přičemž varianta
druhá je sice kratší, ovšem bez přímé kontroly, jaký atribut se vlastně
nastavuje:</p>

<pre>
button3.configure(style='Green.TButton')
&nbsp;
button4["style"] = 'Blue.TButton'
</pre>

<p>Předchozí příklad je tedy možné relativně snadno upravit takovým způsobem,
aby se namísto tlačítek <strong>tkinter.Button</strong> používala tlačítka
<strong>tkinter.ttk.Button</strong>:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
style.configure('Yellow.TButton', background='yellow')
style.configure('Red.TButton', background='#ff8080')
style.configure('Blue.TButton', background='#8080ff')
style.configure('Green.TButton', background='#80ff80')
&nbsp;
button1 = ttk.Button(root, text="1st btn", style='Yellow.TButton',
                     command=exit)
button2 = ttk.Button(root, text="Second button", style='Red.TButton',
                     command=exit)
button3 = ttk.Button(root, text="Third button",
                     command=exit)
button4 = ttk.Button(root, text="This is fourth button, the last one",
                     command=exit)
&nbsp;
button3.configure(style='Green.TButton')
&nbsp;
button4["style"] = 'Blue.TButton'
&nbsp;
button1.grid(column=1, row=1, sticky="we")
button2.grid(column=2, row=1, sticky="we")
button3.grid(column=1, row=2, sticky="we")
button4.grid(column=2, row=2, sticky="we")
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 2: Tlačítka z&nbsp;knihovny Ttk s&nbsp;nastaveným stylem
pozadí.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Předpřipravená témata nabízená knihovnou Ttk</h2>

<p><a href="#k02">V&nbsp;předchozí kapitole</a> jsme viděli, že
v&nbsp;nadstavbové knihovně Ttk je možné v&nbsp;případě potřeby měnit styly
jednotlivých komponent. Ovšem co přesně znamená slovo &bdquo;themed&ldquo;
v&nbsp;plném názvu této knihovny? Kromě stylů totiž tato knihovna obsahuje
předpřipravená témata (<i>themes</i>), v&nbsp;nichž je poměrně přesně definován
vzhled i chování komponent. Některá témata jsou navržena takovým způsobem, aby
se výsledná aplikace podobala nativním aplikacím (i když označení
&bdquo;nativní&ldquo; má zejména na Linuxu poměrně vágní význam), další témata
emulují původní vzhled komponent knihovny Tk (s&nbsp;Motifem) atd. Seznam
existujících témat je dostupný na adrese <a
href="https://wiki.tcl.tk/48689">https://wiki.tcl.tk/48689</a>, ovšem
v&nbsp;této tabulce si všímejte především těch témat, která jsou označena
<i>built-in</i> (tedy jsou dostupná ve standardní instalaci knihovny Ttk) a
současně u nich není v&nbsp;poznámce napsáno &bdquo;systém_xyz only&ldquo;.
Další témata je samozřejmě možné v&nbsp;případě potřeby doinstalovat a pokud to
licence umožňuje, distribuovat je společně s&nbsp;aplikací.</p>

<p>Seznam aktuálně nainstalovaných a dostupných témat se získá velmi jednoduše,
a to přímo za běhu aplikace:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
style = ttk.Style()
&nbsp;
print(<strong>style.theme_names()</strong>)
</pre>

<p>Na Linuxu by se měla vypsat následující témata:</p>

<ol>
<li>clam</li>
<li>alt</li>
<li>default</li>
<li>classic</li>
</ol>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výběr tématu za běhu programu</h2>

<p>Téma je možné vybrat i změnit prakticky kdykoli za běhu programu, což
skutečně funguje (například ve Swingu je to problematičtější). Podívejme se
však na to, co se stane, když si pomocí čtyř tlačítek necháme přepínat čtyři
základní témata &bdquo;clam&ldquo;, &bdquo;alt&ldquo;, &bdquo;default&ldquo; a
&bdquo;classic&ldquo; a současně bude nastaven styl
<strong>Red.TButton</strong>. Téma přepneme jednoduše zavoláním:</p>

<pre>
style.theme_use("jméno_tématu"))
</pre>

<p>kde <strong>style</strong> je objekt získaný konstruktorem:</p>

<pre>
style = ttk.Style()
</pre>

<p>Příklad změny tématu po stisku tlačítka:</p>

<pre>
button1 = ttk.Button(root, text="clam",
                     command=lambda: style.theme_use("clam"))
</pre>

<p>Úplný demonstrační příklad se změnou témat za běhu vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
&nbsp;
style.configure('Red.TButton', background='#ff8080')
&nbsp;
button1 = ttk.Button(root, text="clam",
                     command=lambda: style.theme_use("clam"))
button2 = ttk.Button(root, text="alt",
                     command=lambda: style.theme_use("alt"))
button3 = ttk.Button(root, text="default",
                     command=lambda: style.theme_use("default"))
button4 = ttk.Button(root, text="classic",
                     command=lambda: style.theme_use("classic"))
&nbsp;
quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
button1.grid(column=1, row=1, sticky="we")
button2.grid(column=2, row=1, sticky="we")
button3.grid(column=1, row=2, sticky="we")
button4.grid(column=2, row=2, sticky="we")
&nbsp;
quitButton.grid(column=2, row=5, sticky="we")
&nbsp;
label = tkinter.Label(root, text='Hello world')
entry = tkinter.Entry(root)
checkbutton = tkinter.Checkbutton(text='Do you like Tkinter?')
&nbsp;
checkbutton.grid(column=1, row=3, columnspan=2, sticky="w")
label.grid(column=1, row=4)
entry.grid(column=2, row=4)
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 3: Demonstrační příklad po výběru tématu &bdquo;default&ldquo;.</i></p>

<p>Program sice skutečně bude plně funkční, ovšem tlačítko [Quit] bude červené
pouze při zvolení jednoho tématu, zatímco u ostatních témat bude zachována
původní barva. Toto chování je korektní (můžeme si to představit tak, že téma
je slovník obsahující styly), ovšem je nutné na něj myslet ve chvíli, kdy
uživatelům současně umožňujeme změnu tématu a nastavujeme vlastní styly. Způsob
řešení tohoto problému si ukážeme v&nbsp;navazující kapitole.</p>

*** image ***
<p><i>Obrázek 4: Demonstrační příklad po výběru tématu &bdquo;default&ldquo;.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Nastavení stylů pro jednotlivá témata</h2>

<p>Pokud si skutečně budete přát nastavit nějaký styl, například barvu pozadí
vybraných tlačítek, pro všechna témata (což ovšem nemusí být vždy to nejlepší
řešení) či pro vybraná témata, lze na začátku aplikace (tedy ještě než se
zobrazí hlavní okno) spustit tuto programovou smyčku, která vždy téma nastaví
jako výchozí a ihned poté se změní příslušný styl:</p>

<pre>
for style_name in ('clam', 'alt', 'default', 'classic'):
    style.theme_use(style_name)
    style.configure('Red.TButton', background='#ff8080')
</pre>

<p>Úplný demonstrační příklad se změnou témat za běhu i s&nbsp;nastavením stylů
pro jednotlivá témata vypadá následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
&nbsp;
for style_name in ('clam', 'alt', 'default', 'classic'):
    style.theme_use(style_name)
    style.configure('Red.TButton', background='#ff8080')
&nbsp;
button1 = ttk.Button(root, text="clam",
                     command=lambda: style.theme_use("clam"))
button2 = ttk.Button(root, text="alt",
                     command=lambda: style.theme_use("alt"))
button3 = ttk.Button(root, text="default",
                     command=lambda: style.theme_use("default"))
button4 = ttk.Button(root, text="classic",
                     command=lambda: style.theme_use("classic"))
&nbsp;
quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
button1.grid(column=1, row=1, sticky="we")
button2.grid(column=2, row=1, sticky="we")
button3.grid(column=1, row=2, sticky="we")
button4.grid(column=2, row=2, sticky="we")
&nbsp;
quitButton.grid(column=2, row=5, sticky="we")
&nbsp;
label = tkinter.Label(root, text='Hello world')
entry = tkinter.Entry(root)
checkbutton = tkinter.Checkbutton(text='Do you like Tkinter?')
&nbsp;
checkbutton.grid(column=1, row=3, columnspan=2, sticky="w")
label.grid(column=1, row=4)
entry.grid(column=2, row=4)
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 5: Výběr tématu &bdquo;clam&ldquo;.</i></p>

*** image ***
<p><i>Obrázek 6: Výběr tématu &bdquo;default&ldquo;.</i></p>

*** image ***
<p><i>Obrázek 7: Výběr tématu &bdquo;alt&ldquo;.</i></p>

*** image ***
<p><i>Obrázek 8: Výběr tématu &bdquo;classic&ldquo;.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vizuální podoba okrajů tlačítek</h2>

<p>U tlačítka lze, podobně jako u mnoha dalších ovládacích prvků, přesně
specifikovat, jak má v&nbsp;okně vypadat. Kromě zadání jména fontu a barvy
popředí i pozadí je možné zadat tvar okraje tlačítka. Vyzkoušejte si
následující příklad, který ukazuje všechny možnosti tvarů okraje tlačítek:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
style.configure('Red.TButton', background='#ff8080')
&nbsp;
button1 = tkinter.Button(root, text="sunken", relief="sunken")
button2 = tkinter.Button(root, text="solid", relief="solid")
button3 = tkinter.Button(root, text="flat", relief="flat")
button4 = tkinter.Button(root, text="groove", relief="groove")
button5 = tkinter.Button(root, text="raised", relief="raised")
button6 = tkinter.Button(root, text="ridge", relief="ridge")
&nbsp;
quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
button1.grid(column=1, row=1, sticky="we")
button2.grid(column=1, row=2, sticky="we")
button3.grid(column=1, row=3, sticky="we")
button4.grid(column=1, row=4, sticky="we")
button5.grid(column=1, row=5, sticky="we")
button6.grid(column=1, row=6, sticky="we")
&nbsp;
quitButton.grid(column=2, row=6, sticky="we")
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 9: Šest typů okrajů tlačítek.</i></p>

<p>Zdrojový kód příkladu lze i zkrátit, přičemž využijeme toho, že tvary okrajů
tlačítek jsou reprezentovány řetězci, takže tlačítka i jejich vlastnosti lze
vytvořit v&nbsp;jediné smyčce (generátorová notace seznamu) a přidat je do okna
ve smyčce další:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
style.configure('Red.TButton', background='#ff8080')
&nbsp;
buttonStyles = ("sunken", "solid", "flat", "groove", "raised", "ridge")
&nbsp;
buttons = (tkinter.Button(root, text=buttonStyle, relief=buttonStyle)
           for buttonStyle in buttonStyles)
&nbsp;
quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
for i, button in enumerate(buttons):
    button.grid(column=1, row=i, sticky="we")
&nbsp;
quitButton.grid(column=2, row=6, sticky="we")
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 10: Šest typů okrajů tlačítek.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Změna konfigurace mřížky &ndash; padding</h2>

<p></p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
style.configure('Red.TButton', background='#ff8080')
&nbsp;
buttonStyles = ("sunken", "solid", "flat", "groove", "raised", "ridge")
&nbsp;
buttons = (tkinter.Button(root, text=buttonStyle, relief=buttonStyle)
           for buttonStyle in buttonStyles)
&nbsp;
quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
for i, button in enumerate(buttons):
    button.grid(column=1, row=i, sticky="we", padx=6, pady=6)
&nbsp;
quitButton.grid(column=2, row=6, sticky="we", padx=6, pady=6)
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 11: Nastavení hodnot <strong>padx</strong> a
<strong>pady</strong> na hodnotu 6.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Změna šířky okrajů tlačítek</h2>

<p></p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
style.configure('Red.TButton', background='#ff8080')
&nbsp;
buttonStyles = ("sunken", "solid", "flat", "groove", "raised", "ridge")
&nbsp;
buttons = (Button(root, text=buttonStyle, relief=buttonStyle, borderwidth=2)
           for buttonStyle in buttonStyles)
&nbsp;
quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
for i, button in enumerate(buttons):
    button.grid(column=1, row=i, sticky="we", padx=6, pady=6)
&nbsp;
quitButton.grid(column=2, row=6, sticky="we", padx=6, pady=6)
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 12: Šířka okrajů tlačítek je nastavena na dva pixely.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Použití manažeru geometrie &bdquo;pack&ldquo;</h2>

<p>Jen ve stručnosti si ukažme, jakým způsobem je možné použít manažer
geometrie nazvaný &bdquo;pack&ldquo;. S&nbsp;tímto správcem jsme se vlastně již
setkali v&nbsp;předchozím článku, takže si připomeňme, že tento manažer
umožňuje vkládat komponenty do kontejneru (typicky do okna) tak, že se zadává
jejich relativní umístění (horizontální či vertikální zarovnání):</p>

<pre>
button1.pack()
button2.pack()
button3.pack()
button4.pack()
</pre>

<p>Pro jednodušší dialogy může být tento správce použitelnější jednodušeji, než
správce &bdquo;grid&ldquo; (není nutné počítat řádky a sloupce), což je možná
patrné z&nbsp;dalšího demonstračního příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
style.configure('Red.TButton', background='#ff8080')
&nbsp;
button1 = ttk.Button(root, text="1s button", command=exit)
button2 = ttk.Button(root, text="2nd button with long text", command=exit)
button3 = ttk.Button(root, text="3rd button", command=exit)
button4 = ttk.Button(root, text="4th button", command=exit)
&nbsp;
quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
button1.pack()
button2.pack()
button3.pack()
button4.pack()
&nbsp;
label = tkinter.Label(root, text='Hello world')
entry = tkinter.Entry(root)
checkbutton = tkinter.Checkbutton(text='Do you like Tkinter?')
&nbsp;
checkbutton.pack()
label.pack()
entry.pack()
&nbsp;
quitButton.pack()
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 13: Widgety jsou umístěny pod sebou, což je implicitní chování
manažeru geometrie &bdquo;pack&ldquo;.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Widget checkbutton</h2>

<p>Dalším typem grafického ovládacího prvku (widgetu) je takzvaný
<strong>checkbutton</strong>, dnes poněkud nepřesně nazývaný checkbox. Od
obyčejného tlačítka se tento widget liší především tím, že je vizuálně patrný
jeho stav &ndash; nastaveno/nenastaveno. Tento typ tlačítek je zobrazován
různým způsobem, typicky se však jedná o čtvereček, který je buď zatržený (znak
&check; či &times;) nebo prázdný; v&nbsp;některých GUI prostředích se však stav
tlačítka reprezentuje pouze jeho barvou. V&nbsp;nejjednodušším případě se
přepínací tlačítko vytvoří následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
style.configure('Red.TButton', background='#ff8080')
&nbsp;
checkbutton = ttk.Checkbutton(root, text="Delete Internet?",
                              command=lambda: print("changed"))
&nbsp;
quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
checkbutton.grid(column=1, row=1, sticky="we", padx=6, pady=6)
quitButton.grid(column=1, row=2, sticky="we", padx=6, pady=6)
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 14: Checkbutton nastavený do polohy &bdquo;off&ldquo;, použito je
téma &bdquo;default&ldquo;.</i></p>

*** image ***
<p><i>Obrázek 15: Checkbutton nastavený do polohy &bdquo;off&ldquo;, použito je
téma &bdquo;default&ldquo;.</i></p>

<p>Jak je patrné z&nbsp;předešlých dvou screenshotů, není checkbutton ve
výchozím stylu vykreslen nijak vábně. Lepší je &ndash; alespoň podle mého
názoru &ndash; použít styl &bdquo;alt&ldquo;, v&nbsp;němž je checkbutton
vykreslen přece jen civilizovanějším způsobem. Příklad stačí nepatrně
upravit:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
style.theme_use("alt")
style.configure('Red.TButton', background='#ff8080')
&nbsp;
checkbutton = ttk.Checkbutton(root, text="Delete Internet?",
                              command=lambda: print("changed"))
&nbsp;
quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
checkbutton.grid(column=1, row=1, sticky="we", padx=6, pady=6)
quitButton.grid(column=1, row=2, sticky="we", padx=6, pady=6)
&nbsp;
root.mainloop()
</pre>

*** image ***
<p><i>Obrázek 16: Checkbutton nastavený do polohy &bdquo;off&ldquo;, použito je
téma &bdquo;alt&ldquo;.</i></p>

*** image ***
<p><i>Obrázek 17: Checkbutton nastavený do polohy &bdquo;off&ldquo;, použito je
téma &bdquo;alt&ldquo;.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Proměnná, která bude automaticky sledovat stav checkbuttonu</h2>

<p>Velmi praktická je další vlastnost widgetu <strong>checkbutton</strong>.
Stav přepínacího tlačítka je totiž možné navázat na vybranou proměnnou, která
tak bude automaticky sledovat jeho stav. Pokud je tlačítko nastaveno (je
v&nbsp;něm znak &times; nebo &check;), bude do proměnné implicitně vložena
hodnota 1, pokud je naopak nenastaveno, nastaví se nulová hodnota. Sledující
proměnnou je nutné vytvořit konstruktorem <strong>tkinter.IntVar()</strong> a
specifikovat ji pojmenovaným parametrem <strong>variable</strong>:</p>

<pre>
<strong>delete_internet = tkinter.IntVar()</strong>
&nbsp;
checkbutton = ttk.Checkbutton(root, text="Delete Internet?",
                              <strong>variable=delete_internet</strong>)
</pre>

<p>K&nbsp;hodnotě sledující proměnné se můžeme dostat s&nbsp;využitím getteru,
tedy metody <strong>get()</strong>:</p>

<pre>
checkbutton = ttk.Checkbutton(root, text="Delete Internet?",
                              variable=delete_internet,
                              command=<strong>lambda: print(delete_internet.get())</strong>)
</pre>

<p>Vše je patrné z&nbsp;následujícího demonstračního příkladu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
&nbsp;
import sys
&nbsp;
root = tkinter.Tk()
&nbsp;
style = ttk.Style()
style.theme_use("alt")
style.configure('Red.TButton', background='#ff8080')
&nbsp;
<strong>delete_internet = tkinter.IntVar()</strong>
&nbsp;
checkbutton = ttk.Checkbutton(root, text="Delete Internet?",
                              <strong>variable=delete_internet</strong>,
                              command=lambda: print(delete_internet.get()))
&nbsp;
quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)
&nbsp;
checkbutton.grid(column=1, row=1, sticky="we", padx=6, pady=6)
quitButton.grid(column=1, row=2, sticky="we", padx=6, pady=6)
&nbsp;
root.mainloop()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Explicitní nastavení hodnot sledovací proměnné</h2>

<pre>
</pre>

*** image ***
<p><i>Obrázek xx: .</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Widget entry</h2>

<p>S&nbsp;využitím widgetu typu <strong>entry</strong> je možné v&nbsp;okně či
dialogu zobrazit jeden řádek textu. Od minule popsaného widgetu
<strong>label</strong> se tento widget liší především v&nbsp;tom, že zobrazený
řádek textu je možné editovat. Při editaci jsou k&nbsp;dispozici základní
klávesy pro pohyb kurzoru (šipka doleva, šipka doprava, klávesa [Home] a
klávesa [End]) a mimo jiné také další klávesové zkratky, které jsou známé
například z&nbsp;shellu či editoru <strong>Emacs</strong>, <strong>Joe</strong>
a <strong>Pico</strong>: [Ctrl+A] (posun na začátek textu), [Ctrl+E] (posun na
konec textu). K tomu připočítejme dnes již standardní klávesy pro práci se
schránkou: [Ctrl+C], [Ctrl+V] a [Ctrl+X] a na některých systémech i kombinace
kláves [Ctrl+Insert], [Shift+Insert] a [Shift+Delete]. Bude ovšem fungovat i
použití výběru, tedy stisk prostředního tlačítka myši vloží obsah výběru do
widgetu <strong>entry</strong>.</p>

<p>Použití tohoto widgetu si ukážeme na příkladu, ve kterém zobrazíme dialog
s&nbsp;textovým políčkem a tlačítkem Quit. První verze dialogu může vypadat
například následovně:</p>

<pre>
#!/usr/bin/env python

import tkinter
from tkinter import ttk

import sys

root = tkinter.Tk()

style = ttk.Style()
style.theme_use("alt")
style.configure('Red.TButton', background='#ff8080')

entry = ttk.Entry(root)
entry.insert(0, "xyzzy")

quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)

entry.grid(column=1, row=1, sticky="we", padx=6, pady=6)
quitButton.grid(column=1, row=2, sticky="we", padx=6, pady=6)

root.mainloop()
</pre>

*** image ***
<p><i>Obrázek xx: </i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Proměnná s&nbsp;obsahem vstupního textového pole</h2>

<pre>
#!/usr/bin/env python

import tkinter
from tkinter import ttk

import sys

root = tkinter.Tk()

style = ttk.Style()
style.theme_use("alt")
style.configure('Red.TButton', background='#ff8080')

value = tkinter.StringVar()

entry = ttk.Entry(root, textvariable=value)
entry.insert(0, "xyzzy")

showButton = ttk.Button(root, text="Show var",
                        command=lambda: print(value.get()))

quitButton = ttk.Button(root, text="Exit", style='Red.TButton',
                        command=exit)

entry.grid(column=1, row=1, sticky="we", padx=6, pady=6)
showButton.grid(column=1, row=2, sticky="we", padx=6, pady=6)
quitButton.grid(column=1, row=3, sticky="we", padx=6, pady=6)

root.mainloop()
</pre>

*** image ***
<p><i>Obrázek xx: .</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnešních demonstračních příkladů naleznete pod
následujícími odkazy:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>15_button_styles.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/15_button_styles.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/15_button_styles.py</a></td></tr>
<tr><td>16_ttk_styles.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/16_ttk_styles.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/16_ttk_styles.py</a></td></tr>
<tr><td>17_themes.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/17_themes.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/17_themes.py</a></td></tr>
<tr><td>18_theme_selection.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/18_theme_selection.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/18_theme_selection.py</a></td></tr>
<tr><td>19_theme_settings_and_selection.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/19_theme_settings_and_selection.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/19_theme_settings_and_selection.py</a></td></tr>
<tr><td>20_button_styles.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/20_button_styles.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/20_button_styles.py</a></td></tr>
<tr><td>21_button_styles_2.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/21_button_styles_2.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/21_button_styles_2.py</a></td></tr>
<tr><td>22_grid_padding.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/22_grid_padding.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/22_grid_padding.py</a></td></tr>
<tr><td>23_border_width.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/23_border_width.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/23_border_width.py</a></td></tr>
<tr><td>24_pack_manager.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/24_pack_manager.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/24_pack_manager.py</a></td></tr>
<tr><td>25_checkbutton.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/25_checkbutton.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/25_checkbutton.py</a></td></tr>
<tr><td>26_checkbutton_alt_theme.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/26_checkbutton_alt_theme.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/26_checkbutton_alt_theme.py</a></td></tr>
<tr><td>27_checkbox_variable.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/27_checkbox_variable.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/27_checkbox_variable.py</a></td></tr>
<tr><td>28_checkbox_specific_values.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/28_checkbox_specific_values.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/28_checkbox_specific_values.py</a></td></tr>
<tr><td>29_entry.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/29_entry.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/29_entry.py</a></td></tr>
<tr><td>30_entry_variable.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/30_entry_variable.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/30_entry_variable.py</a></td></tr>
</table>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Seznam existujících témat pro Ttk<br />
<a href="https://wiki.tcl.tk/48689">https://wiki.tcl.tk/48689</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

