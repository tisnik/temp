<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Nial Array Language: další z jazyků inspirovaných APL</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Nial Array Language: další z jazyků inspirovaných APL</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Nial Array Language: další z&nbsp;jazyků inspirovaných APL</a></p>
<p><a href="#k02">2. Základní vlastnosti programovacího jazyka Nial</a></p>
<p><a href="#k03">*** 3. Stručné porovnání s&nbsp;dalšími jazyky z&nbsp;rodiny APL</a></p>
<p><a href="#k04">4. Překlad a první spuštění interpretru jazyka Nial</a></p>
<p><a href="#k05">5. Pole ve funkci základního datového typu programovacího jazyka Nial</a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">7. Počet dimenzí a tvar pole</a></p>
<p><a href="#k08">8. Změna tvaru pole funkcí <strong>reshape</strong></a></p>
<p><a href="#k09">9. Funkce umožňující konstrukce polí</a></p>
<p><a href="#k10">10. Funkce pro vygenerování polí</a></p>
<p><a href="#k11">11. Pole a relační operátory</a></p>
<p><a href="#k12">*** 12. Funkce operující s&nbsp;celým polem</a></p>
<p><a href="#k13">*** 13. Pole jakožto rekurzivní datová struktura</a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Předchozí články o rozsáhlém světu &bdquo;array programmingu&ldquo;</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Nial Array Language: další z&nbsp;jazyků inspirovaných APL</h2>

<p>V&nbsp;pořadí již desátém článku věnovaném programovacím jazykům
z&nbsp;oblasti &bdquo;array programmingu&ldquo; (viz též odkazy uvedené <a
href="#k19">v&nbsp;devatenácté kapitole</a>) se budeme věnovat programovacímu
jazyku, který se jmenuje <i>Nial</i> neboli <i>Nested Interactive Array
Language</i>. Tento programovací jazyk patří do rodiny jazyků, které jsou
odvozeny od APL, jehož autorem je, jak již víme, <a
href="https://en.wikipedia.org/wiki/Kenneth_E._Iverson">Ken Iverson</a>. Do
této rodiny patří kromě samotného jazyka <a
href="https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/">APL</a> i
jazyky <a
href="https://www.root.cz/clanky/specializovane-jazyky-pro-praci-s-n-dimenzionalnimi-poli-jazyk-j/">J</a>,
<a
href="https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane/">K</a>,
Q a v&nbsp;neposlední řadě i relativní novinka &ndash; <a
href="https://www.root.cz/clanky/programovaci-jazyky-odvozene-od-apl-bqn-a-ivy-aneb-1-1-10/#k02">jazyk
BQN</a> (ovšem patří sem i &bdquo;kalkulačka&ldquo; <a
href="https://www.root.cz/clanky/programovaci-jazyky-odvozene-od-apl-bqn-a-ivy-aneb-1-1-10/#k16">Ivy</a>).
Naproti tomu se v&nbsp;případě programovacího jazyka <i>Nial</i>, kterému se
budeme věnovat dnes, o žádnou žhavou novinku nejedná, protože tento
programovací jazyk začal vznikat již na začátku osmdesátých let minulého
století. I přesto však v&nbsp;něm nalezneme některé zajímavé koncepty, díky
nimž se <i>Nial</i> odlišuje od všech výše uvedených jazyků a tedy má smysl se
jím zabývat.</p>

<p><div class="rs-tip-major">Poznámka: některé &bdquo;historické
novinky&ldquo;, které byly přidány do Nialu v&nbsp;průběhu předchozích
čtyřiceti let, se objevily například v&nbsp;NumPy a Julii (viz další
text).</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní vlastnosti programovacího jazyka Nial</h2>

<p>Jak jsme si již naznačili <a href="#k01">v&nbsp;úvodní kapitole</a>, je
<i>Nial</i> programovacím jazykem pocházejícím z&nbsp;rodiny APL. Do samotného
jazyka však byly přidány některé funkcionální prvky, podobně, jako tomu je
například v&nbsp;jazyku K či BQN. Základním a ústředním datovým typem je zde
(což asi není velké překvapení) n-dimenzionální pole (<i>array</i>), které
dokonce při provádění výpočtů nahrazuje i skalární hodnoty. To například
znamená, že i znaky, pravdivostní hodnoty nebo celá čísla jsou při provádění
různých operací chápána jako pole s&nbsp;jediným prvkem, ovšem jejich typ je
odlišný, protože se jedná o takzvané <i>atomy</i>. A logicky je tomu i naopak
&ndash; pole mohou jako své prvky obsahovat jiná pole, tj.&nbsp;jedná se o
<i>rekurzivní datovou strukturu</i> (tento koncept chápání polí ovšem nenajdeme
ve všech jazycích odvozených od APL, například ji nemá jazyk J).</p>

<p>Ovšem stejně jako v&nbsp;APL se i v&nbsp;Nialu pracuje s&nbsp;funkcemi jako
s&nbsp;operátory, tj.&nbsp;operandy/parametry se mohou zapsat okolo jména
funkce (což vyžaduje, aby funkce byly monadické nebo dyadické). Uveďme si
jednoduchý příklad:</p>

<pre>
     <strong>1 + 2</strong>
3
</pre>

<p>Výše uvedený zápis znamená volání funkce nazvané <strong>+</strong> alias
<strong>sum</strong>, které se předávají dva parametry &ndash; každý
z&nbsp;parametrů je přitom chápán jako pole s&nbsp;jediným prvkem,
tj.&nbsp;první pole obsahuje prvek s&nbsp;hodnotou 1 a druhé pole obsahuje
prvek s&nbsp;hodnotou 2. Hodnota 3 vypsaná na dalším řádku je výsledek celé
operace. Opět se z&nbsp;pohledu dalšího zpracování nemusí jednat jen o skalární
hodnotu 3, ale o pole s&nbsp;jediným prvkem rovným trojce.</p>

<p>Alternativně lze ovšem funkci volat i tak, že se její jméno uvede na začátku
výrazu, za nímž následují parametry funkce:</p>

<pre>
     <strong>+ 1 2</strong>
3
</pre>

<p>Takto volaná funkce akceptuje i větší množství parametrů:</p>

<pre>
     <strong>+ 1 2 3</strong>
6
</pre>

<p>Namísto symbolu <strong>+</strong> ovšem můžeme použít i plné jméno funkce
<strong>sum</strong> a přepsat všechny tři předchozí výrazy následovně:</p>

<pre>
     <strong>1 sum 2</strong>
3
&nbsp;
     <strong>sum 1 2</strong>
3
&nbsp;
     <strong>sum 1 2 3</strong>
6
</pre>

<p>Sčítat je ovšem možné i dvě pole, resp.&nbsp;v&nbsp;tomto případě dvojici
dvouprvkových vektorů:</p>

<pre>
     <strong>1 2 + 2 3</strong>
3 5
</pre>

<p>Podporováno je i přičtení (zdánlivé) skalární hodnoty s&nbsp;polem:</p>

<pre>
     <strong>1 + 2 3 4</strong>
3 4 5

     <strong>1 2 3 + 4</strong>
5 6 7
</pre>

<p>Pozor si musíme dát především na to, že se nerozlišují priority
aritmetických operací (protože se vlastně jedná o volání funkcí) a operace se
vyhodnocují zleva doprava, <i>na rozdíl</i> od většiny ostatních jazyků
z&nbsp;rodiny APL. V&nbsp;případě potřeby se tedy musíme pomoci závorkami:</p>

<pre>
     <strong>1 + 2 * 3</strong>
9
     <strong>1 + (2 * 3)</strong>
7
     <strong>(1 + 2) * 3</strong>
9
</pre>

<p><div class="rs-tip-major">Poznámka: to jsou ovšem jen naprosté základy
jazyka Nial. Více příkladů si ukážeme ve chvíli, kdy budeme mít nainstalovánu
interaktivní smyčku REPL tohoto jazyka.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Stručné porovnání s&nbsp;dalšími jazyky z&nbsp;rodiny APL</h2>

<p>Jazyk Nial sice vychází z&nbsp;konceptů, které byly zavedeny v&nbsp;rámci
programovacího jazyka APL, ovšem v&nbsp;některých ohledech se od těchto jazyků
odlišuje. Především je zde patrná snaha o pojmenování funkcí a operátorů
takovým způsobem, aby byl výsledek čitelný. To je poměrně velký posun od
filozofie APL, J i K (Q), kde je čitelnost nahrazena za krátký zápis výpočtů či
celých algoritmů (což značí, že se jedná o odlišný způsob nasazení těchto
jazyků &ndash; APL evidentně sází na rozpoznávání vzorů, které se tak postupně
stanou součástí &bdquo;slovníku&ldquo; programátora). To je ovšem především
syntaktický rozdíl, který nemusí být až tak zásadní. Důležitější jsou další
rozdíly, z&nbsp;nichž některé jsou zmíněny na stránce <a
href="https://github.com/codereport/array-language-comparisons">https://github.com/codereport/array-language-comparisons</a>:</p>

<table>
<tr><th></th><th></th></tr>
<tr><td></td><td></td></tr>
</table>



<p><a name="k04"></a></p>
<h2 id="k04">4. Překlad a první spuštění interpretru jazyka Nial</h2>

<p>Programovací jazyk Nial je dostupný jak <a
href="https://www.nial-array-language.org/download/">ve formě binárních
spustitelných souborů</a>, tak i ve formě zdrojových kódů. Ukažme si tedy
překlad Nialu. K&nbsp;tomu budeme potřebovat překladač programovacího jazyka C,
překladač jazyka C++ (kvůli naprosto marginální části kódu), a taktéž <a
href="https://cmake.org/">CMake</a>.</p>

<p>Nejprve naklonujeme repositář se zdrojovými kódy:</p>

<pre>
$ <strong>git clone https://github.com/niallang/Nial_Development.git</strong>
&nbsp;
Cloning into 'Nial_Development'...
remote: Enumerating objects: 2024, done.
remote: Counting objects: 100% (205/205), done.
remote: Compressing objects: 100% (140/140), done.
remote: Total 2024 (delta 83), reused 144 (delta 57), pack-reused 1819
Receiving objects: 100% (2024/2024), 31.04 MiB | 36.83 MiB/s, done.
Resolving deltas: 100% (549/549), done.
</pre>

<p>Ve druhém kroku se přesuneme do naklonovaného repositáře a spustíme
překlad:</p>

<pre>
$ <strong>bash ./build.sh</strong>
&nbsp;
-- The C compiler identification is GNU 12.2.1
-- The CXX compiler identification is GNU 12.2.1
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Configuring done
-- Generating done
-- Build files have been written to: /root/Nial_Development/BuildCore/build
[  3%] Building C object CMakeFiles/nialcore.dir/absmach.c.o
[  7%] Building C object CMakeFiles/nialcore.dir/arith.c.o
[ 10%] Building C object CMakeFiles/nialcore.dir/atops.c.o
[ 14%] Building C object CMakeFiles/nialcore.dir/basics.c.o
[ 17%] Building C object CMakeFiles/nialcore.dir/blders.c.o
[ 21%] Building C object CMakeFiles/nialcore.dir/compare.c.o
[ 25%] Building C object CMakeFiles/nialcore.dir/eval.c.o
[ 28%] Building C object CMakeFiles/nialcore.dir/insel.c.o
[ 32%] Building C object CMakeFiles/nialcore.dir/lib_main.c.o
[ 35%] Building C object CMakeFiles/nialcore.dir/linalg.c.o
[ 39%] Building C object CMakeFiles/nialcore.dir/logicops.c.o
[ 42%] Building C object CMakeFiles/nialcore.dir/main_stu.c.o
[ 46%] Building C object CMakeFiles/nialcore.dir/linenoise.c.o
[ 50%] Building C object CMakeFiles/nialcore.dir/parse.c.o
[ 53%] Building C object CMakeFiles/nialcore.dir/picture.c.o
[ 57%] Building C object CMakeFiles/nialcore.dir/profile.c.o
[ 60%] Building C object CMakeFiles/nialcore.dir/scan.c.o
[ 64%] Building C object CMakeFiles/nialcore.dir/symtab.c.o
[ 67%] Building C object CMakeFiles/nialcore.dir/systemops.c.o
[ 71%] Building C object CMakeFiles/nialcore.dir/trig.c.o
[ 75%] Building C object CMakeFiles/nialcore.dir/trs.c.o
[ 78%] Building C object CMakeFiles/nialcore.dir/unixif.c.o
[ 82%] Building C object CMakeFiles/nialcore.dir/windowsif.c.o
[ 85%] Building C object CMakeFiles/nialcore.dir/utils.c.o
[ 89%] Building C object CMakeFiles/nialcore.dir/wsmanage.c.o
[ 92%] Building C object CMakeFiles/nialcore.dir/bitops.c.o
[ 96%] Building C object CMakeFiles/nialcore.dir/fileio.c.o
[100%] Linking C executable nialcore
[100%] Built target nialcore
Completed work to generate source code for basic nial: 
-- The C compiler identification is GNU 12.2.1
-- The CXX compiler identification is GNU 12.2.1
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Configuring done
-- Generating done
-- Build files have been written to: /root/Nial_Development/BuildNial/build
[  3%] Building C object CMakeFiles/nial.dir/absmach.c.o
[  7%] Building C object CMakeFiles/nial.dir/arith.c.o
[ 10%] Building C object CMakeFiles/nial.dir/atops.c.o
[ 14%] Building C object CMakeFiles/nial.dir/basics.c.o
[ 17%] Building C object CMakeFiles/nial.dir/blders.c.o
[ 21%] Building C object CMakeFiles/nial.dir/compare.c.o
[ 25%] Building C object CMakeFiles/nial.dir/eval.c.o
[ 28%] Building C object CMakeFiles/nial.dir/insel.c.o
[ 32%] Building C object CMakeFiles/nial.dir/lib_main.c.o
[ 35%] Building C object CMakeFiles/nial.dir/linalg.c.o
[ 39%] Building C object CMakeFiles/nial.dir/logicops.c.o
[ 42%] Building C object CMakeFiles/nial.dir/main_stu.c.o
[ 46%] Building C object CMakeFiles/nial.dir/linenoise.c.o
[ 50%] Building C object CMakeFiles/nial.dir/parse.c.o
[ 53%] Building C object CMakeFiles/nial.dir/picture.c.o
[ 57%] Building C object CMakeFiles/nial.dir/profile.c.o
[ 60%] Building C object CMakeFiles/nial.dir/scan.c.o
[ 64%] Building C object CMakeFiles/nial.dir/symtab.c.o
[ 67%] Building C object CMakeFiles/nial.dir/systemops.c.o
[ 71%] Building C object CMakeFiles/nial.dir/trig.c.o
[ 75%] Building C object CMakeFiles/nial.dir/trs.c.o
[ 78%] Building C object CMakeFiles/nial.dir/unixif.c.o
[ 82%] Building C object CMakeFiles/nial.dir/windowsif.c.o
[ 85%] Building C object CMakeFiles/nial.dir/utils.c.o
[ 89%] Building C object CMakeFiles/nial.dir/wsmanage.c.o
[ 92%] Building C object CMakeFiles/nial.dir/bitops.c.o
[ 96%] Building C object CMakeFiles/nial.dir/fileio.c.o
[100%] Linking C executable nial
[100%] Built target nial
</pre>

<p>Samotné jádro jazyka Nial (bez dalších knihoven) je dostupné
v&nbsp;podadresáři <strong>BuildCore/build</strong>:</p>

<pre>
$ <strong>cd BuildCore/build</strong>
</pre>

<p>Výsledný spustitelný soubor se jmenuje <strong>nialcore</strong>:</p>

<pre>
$ <strong>ls -l</strong>
&nbsp;
total 584
-rw-r--r--. 1 tester tester  14019 Sep 29 08:46 CMakeCache.txt
drwxr-xr-x. 1 tester tester    294 Sep 29 08:46 CMakeFiles
-rw-r--r--. 1 tester tester   1644 Sep 29 08:46 cmake_install.cmake
-rw-r--r--. 1 tester tester  23109 Sep 29 08:46 Makefile
-rwxr-xr-x. 1 tester tester 549280 Sep 29 08:46 <u>nialcore</u>
</pre>

<p>Můžeme si otestovat jeho spuštění:</p>

<pre>
$ <strong>./nialcore </strong>
&nbsp;
SYNTAX: nial  [(+|-)size Wssize] [-defs Filename] [-i] [-lws WSName] [-h]
&nbsp;
-size Wssize
      Begin with a workspace size of Wssize words. A suffix of G, M or K
      can be used to indicate Giga words, Mega words or Kilo words respectively.
      The workspace expands if space is available.
+size Wssize
      Fix the workspace size at Wssize words with no expansion.
-defs Filename
      After loading the initial workspace the file Filename.ndf
      is loaded and executed without displaying input lines.
-lws  Wsname
      A previously saved workspace file is loaded on startup.
-i
      Execute in interactive mode with a top level loop.
-h
      Display command line syntax (this text).
&nbsp;
Examples:
   nial -i
   nial -defs app.ndf
   nial +size 50M -defs newfns
</pre>

<p>Interaktivní smyčka REPL se spustí po zadání přepínače
<strong>-i</strong>:</p>

<pre>
$ <strong>./nialcore -i</strong>
&nbsp;
Q'Nial V7.0 Open Source Edition Intel x86 64bit Linux Sep 29 2022
Copyright (c) NIAL Systems Limited
clear workspace created
</pre>

<p><div class="rs-tip-major">Poznámka: Plnohodnotný interpret i se standardní
knihovnou je umístěn v&nbsp;adresáři
<strong>Nial_Development/binaries/Linux</strong> a je možné ho spustit naprosto
stejným způsobem.</div></p>

<p>Nyní lze zadat nějaký výraz, který se ihned vyhodnotí:</p>

<pre>
     <strong>1+2</strong>
3
</pre>

<p>Pro opuštění REPLu nelze použít klávesovou zkratku Ctrl+D, ale příkaz
&bdquo;Bye&ldquo;:</p>

<pre>
     <strong>Bye</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: u názvů se nerozlišují velikosti písmen,
takže lze psát i:</div></p>

<pre>
     <strong>bye</strong>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Pole ve funkci základního datového typu programovacího jazyka Nial</h2>

<p>V&nbsp;programovacím jazyku Nial, ostatně podobně, jako je tomu i u dalších
jazyků odvozených od APL, je základním datovým typem pole (<i>array</i>),
konkrétně obdélníkové pole, které může (rekurzivně) jako své prvky obsahovat
další pole. V&nbsp;Nialu jsou pole obecně <i>nehomogenním</i> datovým typem,
což znamená, že prvky jednoho pole mohou být různého typu. Obecně platí, že
prvek pole je buď další pole (rekurzivní datová struktura) nebo se jedná o
atom. Existuje přitom šest typů atomů: pravdivostní hodnota, celé číslo, reálné
číslo, znak, řetězec a tzv.&nbsp;fault reprezentující nějakou formu chyby,
například ?noexpr, ?eof, ?O nebo ?I.</p>

<p>Jednorozměrné pole se zapisuje výčtem svých prvků (jako oddělovač slouží
bílé znaky):</p>

<pre>
     <strong>1 2 3</strong>
&nbsp;
1 2 3
</pre>

<p>Aby bylo zřejmé, že se skutečně jedná o pole, změníme způsob jejich výpisu
na terminál příkazy <strong>set</strong>:</p>

<pre>
     <strong>set "diagram</strong>
&nbsp;
sketch
</pre>

<p>Tento příkaz zajistí, že se vykreslí vždy celá interní struktura pole,
včetně vnořených polí.</p>

<p>Další volbou je:</p>

<pre>
     <strong>set "decor</strong>
&nbsp;
"nodecor
</pre>

<p>Touto volbou se určuje, jakým způsobem se zobrazí znaky, řetězce a hodnoty
<i>fault</i> tak, aby bylo zřejmé, o jaké hodnoty/struktury se jedná.</p>

<p>Nyní znovu zapíšeme výraz s&nbsp;jednorozměrným polem:</p>

<pre>
     <strong>1 2 3</strong>
&nbsp;
+-+-+-+
|1|2|3|
+-+-+-+
</pre>

<p>Pole lze ovšem zkonstruovat i s&nbsp;využitím různých funkcí, například
funkce <strong>count</strong> (což zhruba odpovídá iotě z&nbsp;APL):</p>

<pre>
     <strong>count 12</strong>
&nbsp;
+-+-+-+-+-+-+-+-+-+--+--+--+
|1|2|3|4|5|6|7|8|9|10|11|12|
+-+-+-+-+-+-+-+-+-+--+--+--+
</pre>

<p>Poněkud speciální formou pole je prázdné pole, tj.&nbsp;pole bez prvků. To
je reprezentováno symbolem <strong>null</strong>:</p>

<pre>
     <strong>null</strong>
&nbsp;
+
|
+
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>

     + 1 2
3
     + [2 3]
2 3
     + [1,2]
3
     + 1 2 3
6
     + [1,2,3]
6
     + [1,2,3] [4,5,6]
5 7 9
     + 1 2 3, 4 5 6
?tokens left: 1 2 3 <***> , 4 5
     reshape [3 4,count 12]
+-+--+--+--+
|1| 2| 3| 4|
+-+--+--+--+
|5| 6| 7| 8|
+-+--+--+--+
|9|10|11|12|
+-+--+--+--+
     sum[reshape [3 4,count 12], 100]
+---+---+---+---+
|101|102|103|104|
+---+---+---+---+
|105|106|107|108|
+---+---+---+---+
|109|110|111|112|
+---+---+---+---+



<p><a name="k07"></a></p>
<h2 id="k07">7. Počet dimenzí a tvar pole</h2>

<p>Interně je pole uloženo v&nbsp;jediném bloku paměti, ke kterému jsou přidány
další metainformace. Především se jedná o počet dimenzí pole
(v&nbsp;terminologii jazyka Nial se používá označení <i>valence</i>) a tvar
pole neboli <i>shape</i>. Samotný tvar pole je reprezentován jako vektor délek
rozsahů jednotlivých dimenzí pole, což například znamená, že pro matici se
třemi řádky a čtyřmi sloupci bude tvar (<i>shape</i>) reprezentován vektorem
<strong>3, 4</strong> (délka vektoru = počet jeho prvků, odpovídá počtu dimenzí
pole.</p>

<p>Pole s&nbsp;počtem dimenzí 0 až 2 mají speciální označení a setkáme se
s&nbsp;nimi jak v&nbsp;matematice, tak i v&nbsp;informatice:</p>

<table>
<tr><th>Dimenzí</th><th>Běžné označeni</th></tr>
<tr><td>0</td><td>single, atom, &bdquo;jednice&ldquo;?</td></tr>
<tr><td>1</td><td>seznam, vektor</td></tr>
<tr><td>2</td><td>tabulka, matice</td></tr>
<tr><td>2 a více</td><td>n-rozměrné pole/matice</td></tr>
</table>

<p>Počet dimenzí lze získat funkcí <strong>valence</strong>:</p>

<pre>
     <strong>valence null</strong>
1
&nbsp;
     <strong>valence 42</strong>
0
&nbsp;
     <strong>valence 1 2 3</strong>
1
</pre>

<p><div class="rs-tip-major">Poznámka: hodnota 42 je atomem, tudíž má nulový
počet dimenzí.</div></p>

<p>Dvourozměrné pole získáme funkcí <strong>reshape</strong> popsané <a
href="#k08">dále</a>. Zde nejdříve uložíme pole do proměnné <strong>x</strong>
a následně získáme počet jeho dimenzí:</p>

<pre>
     <strong>x is 3 4 reshape 0</strong>
&nbsp;
     <strong>x</strong>
+-+-+-+-+
|0|0|0|0|
+-+-+-+-+
|0|0|0|0|
+-+-+-+-+
|0|0|0|0|
+-+-+-+-+
&nbsp;
     <strong>valence x</strong>
2
</pre>

<p>Podobně pro pole trojrozměrné:</p>

<pre>
     <strong>y is 2 2 2 reshape 0</strong>
&nbsp;
     <strong>y</strong>
+-+-+  +-+-+
|0|0|  |0|0|
+-+-+  +-+-+
|0|0|  |0|0|
+-+-+  +-+-+
&nbsp;
     <strong>valence y</strong>
3
</pre>

<p>Tvar pole (<i>shape</i>) se získá funkcí <strong>shape</strong>, přičemž pro
atomy se bude vracet prázdné pole:</p>

<pre>
     <strong>shape null</strong>
+-+
|0|
+-+
&nbsp;
     <strong>shape 42</strong>
+
|
+
&nbsp;
     <strong>shape 1 2</strong>
+-+
|2|
+-+
&nbsp;
     <strong>shape 1 2 3 4</strong>
+-+
|4|
+-+
&nbsp;
     <strong>shape []</strong>
+-+
|0|
+-+
</pre>

<p>Dvourozměrné a trojrozměrné pole:</p>

<pre>
     <strong>x is 3 4 reshape count 12</strong>
     shape x
+-+-+
|3|4|
+-+-+
&nbsp;
     <strong>x is 3 4 2 reshape count 24</strong>
     shape x
+-+-+-+
|3|4|2|
+-+-+-+
</pre>

<p><div class="rs-tip-major">Poznámka: funkcí <strong>reshape</strong> se
budeme zabývat <a href="#k08">v&nbsp;navazující kapitole</a>.</div></p>

<p>Existují ještě další dvě užitečné funkce, které se dotazují na metainformace
o polích. Tyto funkce se jmenují <strong>tally</strong> (počet prvků) a
<strong>axes</strong> (informace o osách, resp.&nbsp;&bdquo;indexy&ldquo; os
nebo dimenzí):</p>

<pre>
     <strong>tally null</strong>
0
&nbsp;
     <strong>tally 42</strong>
1
&nbsp;
     <strong>tally 1 2 3</strong>
3
&nbsp;
     <strong>x is 3 4 reshape 0</strong>
     <strong>tally x</strong>
12
</pre>

<p>a:</p>

<pre>
     <strong>axes null</strong>
0
&nbsp;
     <strong>axes 42</strong>
(prázdná hodnota)
&nbsp;
     <strong>axes 1 2 3</strong>
0
&nbsp;
     <strong>axes x</strong>
0 1
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Změna tvaru pole funkcí <strong>reshape</strong></h2>

<p>Další velmi důležitou funkcí, s&nbsp;níž se v&nbsp;praxi poměrně často
setkáme (například i v&nbsp;NumPy, které z&nbsp;&bdquo;array jazyků&ldquo;
vychází), je funkce nazvaná <strong>reshape</strong>, která dokáže změnit
velikost matice a vhodným způsobem přeorganizovat prvky v&nbsp;původní matici
(celý koncept je převzat z&nbsp;původního APL, ostatně jak jinak). Této funkci
se předávají dva parametry. Prvním parametrem je vektor s&nbsp;prvky určujícími
tvar výsledného pole a druhým parametrem je vstupní pole (vektor, matice,
...).</p>

<p>V&nbsp;následujícím příkladu je ukázáno, jak se z&nbsp;původního
šestiprvkového vektoru vytvoří matice se třemi sloupci a dvěma řádky:</p>

<pre>
     <strong>2 3 reshape 1 2 3 4 5 6 </strong>
&nbsp;
+-+-+-+
|1|2|3|
+-+-+-+
|4|5|6|
+-+-+-+
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti se prvky v&nbsp;operační
paměti nepřesouvají &ndash; tvar pole je pouze metainformací; celý koncept se
tedy značně liší například od céčkového pojetí pole.</div></p>

<p>Víme již, že funkcí <strong>count</strong> můžeme vytvořit vektor
s&nbsp;číselnou posloupností:</p>

<pre>
     <strong>count 12</strong>
&nbsp;
+-+-+-+-+-+-+-+-+-+--+--+--+
|1|2|3|4|5|6|7|8|9|10|11|12|
+-+-+-+-+-+-+-+-+-+--+--+--+
</pre>

<p>Toho můžeme využít pro tvorbu 2D matic:</p>

<pre>
     <strong>4 3 reshape count 12</strong>
&nbsp;
+--+--+--+
| 1| 2| 3|
+--+--+--+
| 4| 5| 6|
+--+--+--+
| 7| 8| 9|
+--+--+--+
|10|11|12|
+--+--+--+
</pre>

<p>Trojrozměrná datová struktura, kterou si můžeme představit jako dvě matice
umístěné nad sebe:</p>

<pre>
     <strong>2 3 4 reshape count 12</strong>
&nbsp;
+-+--+--+--+  +-+--+--+--+
|1| 2| 3| 4|  |1| 2| 3| 4|
+-+--+--+--+  +-+--+--+--+
|5| 6| 7| 8|  |5| 6| 7| 8|
+-+--+--+--+  +-+--+--+--+
|9|10|11|12|  |9|10|11|12|
+-+--+--+--+  +-+--+--+--+
</pre>

<p>Pokud je na pravé straně <strong>reshape</strong> nedostatečný počet prvků
pro vyplnění nové matice, budou prvky opakovány:</p>

<pre>
     <strong>5 5 reshape 42</strong>
&nbsp;
+--+--+--+--+--+
|42|42|42|42|42|
+--+--+--+--+--+
|42|42|42|42|42|
+--+--+--+--+--+
|42|42|42|42|42|
+--+--+--+--+--+
|42|42|42|42|42|
+--+--+--+--+--+
|42|42|42|42|42|
+--+--+--+--+--+
</pre>

<p>Dtto, ovšem pro vstupní vektor s&nbsp;pouhými dvěma prvky:</p>

<pre>
     <strong>9 9 reshape 1 0</strong>
&nbsp;
+-+-+-+-+-+-+-+-+-+
|1|0|1|0|1|0|1|0|1|
+-+-+-+-+-+-+-+-+-+
|0|1|0|1|0|1|0|1|0|
+-+-+-+-+-+-+-+-+-+
|1|0|1|0|1|0|1|0|1|
+-+-+-+-+-+-+-+-+-+
|0|1|0|1|0|1|0|1|0|
+-+-+-+-+-+-+-+-+-+
|1|0|1|0|1|0|1|0|1|
+-+-+-+-+-+-+-+-+-+
|0|1|0|1|0|1|0|1|0|
+-+-+-+-+-+-+-+-+-+
|1|0|1|0|1|0|1|0|1|
+-+-+-+-+-+-+-+-+-+
|0|1|0|1|0|1|0|1|0|
+-+-+-+-+-+-+-+-+-+
|1|0|1|0|1|0|1|0|1|
+-+-+-+-+-+-+-+-+-+
</pre>

<p>Použít lze i další datové typy, nikoli pouze celočíselné prvky:</p>

<pre>
     <strong>9 9 reshape " "X</strong>
&nbsp;
+--+--+--+--+--+--+--+--+--+
|" |"X|" |"X|" |"X|" |"X|" |
+--+--+--+--+--+--+--+--+--+
|"X|" |"X|" |"X|" |"X|" |"X|
+--+--+--+--+--+--+--+--+--+
|" |"X|" |"X|" |"X|" |"X|" |
+--+--+--+--+--+--+--+--+--+
|"X|" |"X|" |"X|" |"X|" |"X|
+--+--+--+--+--+--+--+--+--+
|" |"X|" |"X|" |"X|" |"X|" |
+--+--+--+--+--+--+--+--+--+
|"X|" |"X|" |"X|" |"X|" |"X|
+--+--+--+--+--+--+--+--+--+
|" |"X|" |"X|" |"X|" |"X|" |
+--+--+--+--+--+--+--+--+--+
|"X|" |"X|" |"X|" |"X|" |"X|
+--+--+--+--+--+--+--+--+--+
|" |"X|" |"X|" |"X|" |"X|" |
+--+--+--+--+--+--+--+--+--+
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Funkce umožňující konstrukce polí</h2>

<p>V&nbsp;programovacím jazyku Nial existuje několik funkcí, které umožňují
konstrukci pole, typicky ze zadaných prvků (nebo jediného prvku), popř.&nbsp;na
základě určitého algoritmu. Základní funkce zkonstruují pole z&nbsp;jediného
prvku, dvojice prvků popř.&nbsp;ze seznamu prvků a dalšího prvku (tedy
připojením dalšího prvku). Jedná se o následující funkce:</p>

<pre>
     <i># pole s jediným prvkem</i>
     <strong>solitary 42</strong>
+--+
|42|
+--+
</pre>

<p>Konstrukce pole s&nbsp;pouhými dvěma prvky &ndash; páru:</p>

<pre>
     <i># pár neboli pole se dvěma prvky</i>
     <strong>1 pair 2</strong>
+-+-+
|1|2|
+-+-+
&nbsp;
     <i># pár, kterému se předají složitější vstupy</i>
     <strong>1 pair 2 3 4</strong>
+-+-------+
|1|+-+-+-+|
| ||2|3|4||
| |+-+-+-+|
+-+-------+
&nbsp;
     <i># pár, kterému se předají složitější vstupy</i>
     <strong>1 2 3 pair 4</strong>
+-------+-+
|+-+-+-+|4|
||1|2|3|| |
|+-+-+-+| |
+-------+-+
</pre>

<p>Další funkce se jmenuje <strong>hitch</strong>. Tato funkce pracuje jinak,
protože na své pravé straně (druhý operand) očekává větší množství prvků:</p>

<pre>
     <strong>1 hitch 2</strong>
+-+-+
|1|2|
+-+-+
&nbsp;
     <strong>1 hitch 2 3 4</strong>
+-+-+-+-+
|1|2|3|4|
+-+-+-+-+
&nbsp;
     <strong>1 2 3 hitch 4</strong>
+-------+-+
|+-+-+-+|4|
||1|2|3|| |
|+-+-+-+| |
+-------+-+
</pre>

<p>A funkce s&nbsp;opačným významem se jmenuje <strong>append</strong>. Tato
funkce přidává prvek na konec seznamu a vrací pole:</p>

<pre>
     <strong>1 append 2</strong>
+-+-+
|1|2|
+-+-+
&nbsp;
     <strong>1 append 2 3 4</strong>
+-+-------+
|1|+-+-+-+|
| ||2|3|4||
| |+-+-+-+|
+-+-------+
&nbsp;
     <strong>1 2 3 append 4</strong>
+-+-+-+-+
|1|2|3|4|
+-+-+-+-+
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Funkce pro vygenerování polí</h2>

<p>Další sada funkcí slouží pro vygenerování celého pole na základě zvoleného
algoritmu.</p>

<p>Vytvoření jednorozměrného pole se sekvencí hodnot začínajících buď od nuly
(<strong>tell</strong>) nebo od jedničky (<strong>count</strong>):</p>

<pre>
     <strong>tell 10</strong>
+-+-+-+-+-+-+-+-+-+-+
|0|1|2|3|4|5|6|7|8|9|
+-+-+-+-+-+-+-+-+-+-+
&nbsp;
     <strong>count 10</strong>
+-+-+-+-+-+-+-+-+-+--+
|1|2|3|4|5|6|7|8|9|10|
+-+-+-+-+-+-+-+-+-+--+
</pre>

<p>V&nbsp;případě, že budeme chtít odlišnou sekvenci, můžeme použít výpočty
s&nbsp;poli:</p>

<pre>
     <strong>1 + count 10</strong>
+-+-+-+-+-+-+-+-+--+--+
|2|3|4|5|6|7|8|9|10|11|
+-+-+-+-+-+-+-+-+--+--+
&nbsp;
     <strong>count 10 + count 10</strong>
+-+-+-+-+--+--+--+--+--+--+
|2|4|6|8|10|12|14|16|18|20|
+-+-+-+-+--+--+--+--+--+--+
</pre>

<p>Konstrukce dvourozměrného pole kombinací <strong>reshape</strong> a
<strong>count/tell</strong>:</p>

<pre>
     <strong>3 4 reshape count 12</strong>
+-+--+--+--+
|1| 2| 3| 4|
+-+--+--+--+
|5| 6| 7| 8|
+-+--+--+--+
|9|10|11|12|
+-+--+--+--+
&nbsp;
     <strong>3 4 reshape tell 12</strong>
+-+-+--+--+
|0|1| 2| 3|
+-+-+--+--+
|4|5| 6| 7|
+-+-+--+--+
|8|9|10|11|
+-+-+--+--+
</pre>

<p>Další možnosti:</p>

<pre>
     <strong>3 4 reshape count 12 + 100</strong>
+---+---+---+---+
|101|102|103|104|
+---+---+---+---+
|105|106|107|108|
+---+---+---+---+
|109|110|111|112|
+---+---+---+---+
</pre>

<p>Získat je možné i pole s&nbsp;<i>indexy</i> (adresami) prvků původního
pole:</p>

<pre>
     <strong>grid 1 2</strong>
+-+-+
|0|1|
+-+-+
&nbsp;
     <strong>grid 1 2 3</strong>
+-+-+-+
|0|1|2|
+-+-+-+
&nbsp;
     <strong>grid 3 4 2 1</strong>
+-+-+-+-+
|0|1|2|3|
+-+-+-+-+
&nbsp;
     <strong>grid (3 4 reshape 12)</strong>
+-----+-----+-----+-----+
|+-+-+|+-+-+|+-+-+|+-+-+|
||0|0|||0|1|||0|2|||0|3||
|+-+-+|+-+-+|+-+-+|+-+-+|
+-----+-----+-----+-----+
|+-+-+|+-+-+|+-+-+|+-+-+|
||1|0|||1|1|||1|2|||1|3||
|+-+-+|+-+-+|+-+-+|+-+-+|
+-----+-----+-----+-----+
|+-+-+|+-+-+|+-+-+|+-+-+|
||2|0|||2|1|||2|2|||2|3||
|+-+-+|+-+-+|+-+-+|+-+-+|
+-----+-----+-----+-----+
</pre>

<p>A konečně si ukažme, jak lze vytvořit pole s&nbsp;pseudonáhodnými
hodnotami:</p>

<pre>
     <strong>random 10</strong>
0.726391 0.448169 0.384064 0.961273 0.123186 0.384953 0.911016 0.44919 0.536883 0.385413
</pre>

<p>Změna rozsahu pseudonáhodných hodnot:</p>

<pre>
     <strong>10 * random 20</strong>
0.124268 8.57941 4.22553 8.50044 6.85217 4.47933 4.07353 3.74976 2.13688 4.55871
 8.20644 5.64311 3.67626 6.82072 5.87837 7.69379 9.57127 4.40364 1.92131 1.42347
</pre>

<p>Vygenerování náhodných hodnot od 0 do 9:</p>

<pre>
     <strong>floor(10 * random 20)</strong>
4 8 4 4 6 7 7 6 8 2 4 1 0 3 9 7 3 8 8 7
</pre>

<p>Dosazení pole do proměnné:</p>

<pre>
     <strong>x is floor(10 * random 20)</strong>
     <strong>x</strong>
8 6 2 1 0 0 5 6 5 4 2 6 5 3 1 6 5 4 5 3
</pre>

<p>Dtto, ale pro dvourozměrné pole:</p>

<pre>
     <strong>random 5 5</strong>
+----------+--------+--------+--------+--------+
|  0.123186|0.384953|0.911016| 0.44919|0.536883|
+----------+--------+--------+--------+--------+
|  0.385413|0.639681|0.119586|0.882235| 0.72909|
+----------+--------+--------+--------+--------+
|  0.810901|0.819432|0.193461|0.498833|0.880408|
+----------+--------+--------+--------+--------+
|0.00925989|0.631015|0.476912|0.455139| 0.52156|
+----------+--------+--------+--------+--------+
|  0.851008|0.893033|0.210305|0.603614|0.940779|
+----------+--------+--------+--------+--------+
</pre>

<p>popř.:</p>

<pre>
     <strong>floor(10*random 10 10)</strong>
+-+-+-+-+-+-+-+-+-+-+
|8|2|6|9|6|2|6|7|5|6|
+-+-+-+-+-+-+-+-+-+-+
|2|6|0|6|1|9|7|1|1|6|
+-+-+-+-+-+-+-+-+-+-+
|3|8|5|8|1|7|7|6|0|7|
+-+-+-+-+-+-+-+-+-+-+
|2|9|5|2|4|8|2|2|3|7|
+-+-+-+-+-+-+-+-+-+-+
|7|9|2|3|0|3|7|8|1|2|
+-+-+-+-+-+-+-+-+-+-+
|6|8|3|6|9|1|8|3|3|1|
+-+-+-+-+-+-+-+-+-+-+
|5|0|0|6|8|9|3|2|5|8|
+-+-+-+-+-+-+-+-+-+-+
|5|7|4|4|8|4|1|6|8|5|
+-+-+-+-+-+-+-+-+-+-+
|4|0|0|6|3|2|9|4|7|2|
+-+-+-+-+-+-+-+-+-+-+
|2|9|8|9|3|0|8|4|8|6|
+-+-+-+-+-+-+-+-+-+-+
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Pole a relační operátory</h2>

<p>Jazyk Nial umožňuje porovnání všech prvků pole s&nbsp;nějakou zadanou
hodnotou. Výsledkem je potom nové pole, jehož prvky jsou pravdivostní hodnoty,
jenž jsou ovšem v&nbsp;Nialu reprezentovány znaky <strong>l</strong>
(<i>true</i>) a <strong>o</strong> (<i>false</i>). To je netradiční
reprezentace pravdivostních hodnot, na druhou stranu je však jisté, že tyto
hodnoty budou uloženy v&nbsp;jediném bajtu a nikoli například jako celé
32bitové číslo:</p>

<pre>
     <strong>1=1</strong>
l
&nbsp;
     <strong>1=2</strong>
o
</pre>

<p>Nejprve vytvoříme pole (zde vektor), který budeme testovat:</p>

<pre>
     <strong>x is count 10</strong>
     x
+-+-+-+-+-+-+-+-+-+--+
|1|2|3|4|5|6|7|8|9|10|
+-+-+-+-+-+-+-+-+-+--+
</pre>

<p>Porovnání všech prvků se zadanou hodnotou:</p>

<pre>
     <strong>x &lt;= 5</strong>
+-+-+-+-+-+-+-+-+-+-+
|l|l|l|l|l|o|o|o|o|o|
+-+-+-+-+-+-+-+-+-+-+
&nbsp;
     <strong>x &gt;= 5</strong>
+-+-+-+-+-+-+-+-+-+-+
|o|o|o|o|l|l|l|l|l|l|
+-+-+-+-+-+-+-+-+-+-+
&nbsp;
     <strong>5 &lt; x</strong>
+-+-+-+-+-+-+-+-+-+-+
|o|o|o|o|o|l|l|l|l|l|
+-+-+-+-+-+-+-+-+-+-+
&nbsp;
</pre>

<p>Stejnou operaci je možné provést i s&nbsp;dvourozměrným polem:</p>

<pre>
     <strong>x is 5 5 reshape count 25</strong>
     <strong>x</strong>
&nbsp;
 1  2  3  4  5
 6  7  8  9 10
11 12 13 14 15
16 17 18 19 20
21 22 23 24 25
&nbsp;
     <strong>x &lt;= 12</strong>
lllll
lllll
llooo
ooooo
ooooo
</pre>

<p><div class="rs-tip-major">Poznámka: velký pozor si musíme dát na to, že
pomocí = resp.&nbsp;jeho negace ~= se provádí odlišná operace &ndash; test,
jestli jsou dvě pole zcela stejná či naopak rozdílná:</div></p>

<pre>
     <strong>x is count 10</strong>
     <strong>y is count 10</strong>
     <strong>x = y</strong>
l
&nbsp;
     <strong>x ~= y</strong>
o
</pre>

<p>A pro nepatrně odlišná pole, která se od sebe odlišují jediným prvkem:</p>

<pre>
     <strong>x is count 10</strong>
     <strong>y is 1 2 3 4 -5 6 7 8 9</strong>
     <strong>x</strong>
+-+-+-+-+-+-+-+-+-+--+
|1|2|3|4|5|6|7|8|9|10|
+-+-+-+-+-+-+-+-+-+--+
&nbsp;
     <strong>y</strong>
+-+-+-+-+--+-+-+-+-+
|1|2|3|4|-5|6|7|8|9|
+-+-+-+-+--+-+-+-+-+
&nbsp;
     <strong>x = y</strong>
o
&nbsp;
     <strong>x ~= y</strong>
l
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Funkce operující s&nbsp;celým polem</h2>

<p>Některé funkce, které nalezneme ve standardní knihovně jazyka Nial, operují
s&nbsp;celým polem, resp.&nbsp;přesněji řečeno se u většiny těchto funkcí
předpokládá, že se bude jednat o vektory nebo matice. Dále popsané funkce
budeme testovat s&nbsp;následujícím polem (maticí):</p>

<pre>
     <strong>x is 2 3 reshape count 6</strong>
     <strong>x</strong>
+-+-+-+
|1|2|3|
+-+-+-+
|4|5|6|
+-+-+-+
</pre>

<p>Transpozice matice:</p>

<pre>
     <strong>transpose x</strong>
+-+-+
|1|4|
+-+-+
|2|5|
+-+-+
|3|6|
+-+-+
</pre>

<p>Rotace prvků doprava (první operand je záporný) nebo doleva (první operand
je kladný). Povšimněte si, že prvky jsou v&nbsp;poli posouvány nejenom
v&nbsp;rámci sloupců, ale překračují i řádky:</p>

<pre>
     <strong>-1 rotate x</strong>
+-+-+-+
|6|1|2|
+-+-+-+
|3|4|5|
+-+-+-+
&nbsp;
     <strong>-2 rotate x</strong>
+-+-+-+
|5|6|1|
+-+-+-+
|2|3|4|
+-+-+-+
&nbsp;
     <strong>-3 rotate x</strong>
+-+-+-+
|4|5|6|
+-+-+-+
|1|2|3|
+-+-+-+
&nbsp;
     <strong>1 rotate x</strong>
+-+-+-+
|2|3|4|
+-+-+-+
|5|6|1|
+-+-+-+
</pre>

<p>Otočení všech prvků ve vektoru nebo matici:</p>

<pre>
     <strong>reverse x</strong>
+-+-+-+
|6|5|4|
+-+-+-+
|3|2|1|
+-+-+-+
</pre>

<p>Tato operace je zvláště výhodná u vektorů:</p>

<pre>
     <strong>reverse count 10</strong>
+--+-+-+-+-+-+-+-+-+-+
|10|9|8|7|6|5|4|3|2|1|
+--+-+-+-+-+-+-+-+-+-+
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Pole jakožto rekurzivní datová struktura</h2>

<p></p>

<pre>
     count 10 + [1 2]
+-----+-----+-----+-----+-----+-----+-----+------+-------+-------+
|+-+-+|+-+-+|+-+-+|+-+-+|+-+-+|+-+-+|+-+-+|+-+--+|+--+--+|+--+--+|
||2|3|||3|4|||4|5|||5|6|||6|7|||7|8|||8|9|||9|10|||10|11|||11|12||
|+-+-+|+-+-+|+-+-+|+-+-+|+-+-+|+-+-+|+-+-+|+-+--+|+--+--+|+--+--+|
+-----+-----+-----+-----+-----+-----+-----+------+-------+-------+
</pre>


     3 4 reshape count 12 + [10 10 10 10]
+-------------+-------------+-------------+-------------+
|+--+--+--+--+|+--+--+--+--+|+--+--+--+--+|+--+--+--+--+|
||11|11|11|11|||12|12|12|12|||13|13|13|13|||14|14|14|14||
|+--+--+--+--+|+--+--+--+--+|+--+--+--+--+|+--+--+--+--+|
+-------------+-------------+-------------+-------------+
|+--+--+--+--+|+--+--+--+--+|+--+--+--+--+|+--+--+--+--+|
||15|15|15|15|||16|16|16|16|||17|17|17|17|||18|18|18|18||
|+--+--+--+--+|+--+--+--+--+|+--+--+--+--+|+--+--+--+--+|
+-------------+-------------+-------------+-------------+
|+--+--+--+--+|+--+--+--+--+|+--+--+--+--+|+--+--+--+--+|
||19|19|19|19|||20|20|20|20|||21|21|21|21|||22|22|22|22||
|+--+--+--+--+|+--+--+--+--+|+--+--+--+--+|+--+--+--+--+|
+-------------+-------------+-------------+-------------+

     (1)
1
     (1 2)
+-+-+
|1|2|
+-+-+
     (1 (2 3))
+-+-----+
|1|+-+-+|
| ||2|3||
| |+-+-+|
+-+-----+

     (1 (2 (3 4 5 6)))
+-+-------------+
|1|+-+---------+|
| ||2|+-+-+-+-+||
| || ||3|4|5|6|||
| || |+-+-+-+-+||
| |+-+---------+|
+-+-------------+
     (1 (2 (3 4 5 6) 7) 8)
+-+---------------+-+
|1|+-+---------+-+|8|
| ||2|+-+-+-+-+|7|| |
| || ||3|4|5|6|| || |
| || |+-+-+-+-+| || |
| |+-+---------+-+| |
+-+---------------+-+
     (1 2 (3 4 5 6) 7 8)
+-+-+---------+-+-+
|1|2|+-+-+-+-+|7|8|
| | ||3|4|5|6|| | |
| | |+-+-+-+-+| | |
+-+-+---------+-+-+
     (1 2 (3 4) (5 6) 7 8)
+-+-+-----+-----+-+-+
|1|2|+-+-+|+-+-+|7|8|
| | ||3|4|||5|6|| | |
| | |+-+-+|+-+-+| | |
+-+-+-----+-----+-+-+

     (1 2 (3 4) (5 6) 7 8) + 100
+---+---+---------+---------+---+---+
|101|102|+---+---+|+---+---+|107|108|
|   |   ||103|104|||105|106||   |   |
|   |   |+---+---+|+---+---+|   |   |
+---+---+---------+---------+---+---+

     1 'abc' 'def'
+-+-------+-------+
|1|+-+-+-+|+-+-+-+|
| ||a|b|c|||d|e|f||
| |+-+-+-+|+-+-+-+|
+-+-------+-------+






<p>Ovšem </p>
     max x
10
     5 max x
+-+-+-+-+-+-+-+-+-+--+
|5|5|5|5|5|6|7|8|9|10|
+-+-+-+-+-+-+-+-+-+--+

     min x
1
     5 min x
+-+-+-+-+-+-+-+-+-+-+
|1|2|3|4|5|5|5|5|5|5|
+-+-+-+-+-+-+-+-+-+-+

     x mod 2
1 0 1 0 1
0 1 0 1 0
1 0 1 0 1
0 1 0 1 0
1 0 1 0 1




     x is 10
     x
10

     x is 10 20 30
     x
+--+--+--+
|10|20|30|
+--+--+--+
     shape x
+-+
|3|
+-+
     x+1
+--+--+--+
|11|21|31|
+--+--+--+

     x is 3 4 reshape 0
     x
+-+-+-+-+
|0|0|0|0|
+-+-+-+-+
|0|0|0|0|
+-+-+-+-+
|0|0|0|0|
+-+-+-+-+
     shape x
+-+-+
|3|4|
+-+-+

     x is 4 3 2 reshape count 24
     x
+-+-+  +--+--+  +--+--+  +--+--+
|1|2|  | 7| 8|  |13|14|  |19|20|
+-+-+  +--+--+  +--+--+  +--+--+
|3|4|  | 9|10|  |15|16|  |21|22|
+-+-+  +--+--+  +--+--+  +--+--+
|5|6|  |11|12|  |17|18|  |23|24|
+-+-+  +--+--+  +--+--+  +--+--+
     shape x
+-+-+-+
|4|3|2|
+-+-+-+
     x*x
+--+--+  +---+---+  +---+---+  +---+---+
| 1| 4|  | 49| 64|  |169|196|  |361|400|
+--+--+  +---+---+  +---+---+  +---+---+
| 9|16|  | 81|100|  |225|256|  |441|484|
+--+--+  +---+---+  +---+---+  +---+---+
|25|36|  |121|144|  |289|324|  |529|576|
+--+--+  +---+---+  +---+---+  +---+---+

     2 2 2 2 2 2 reshape count 64
+-+-+    +-+-+      +--+--+  +--+--+
|1|2|    |5|6|      |17|18|  |21|22|
+-+-+    +-+-+      +--+--+  +--+--+
|3|4|    |7|8|      |19|20|  |23|24|
+-+-+    +-+-+      +--+--+  +--+--+
                                    
+--+--+  +--+--+    +--+--+  +--+--+
| 9|10|  |13|14|    |25|26|  |29|30|
+--+--+  +--+--+    +--+--+  +--+--+
|11|12|  |15|16|    |27|28|  |31|32|
+--+--+  +--+--+    +--+--+  +--+--+
                                    
                                    
+--+--+  +--+--+    +--+--+  +--+--+
|33|34|  |37|38|    |49|50|  |53|54|
+--+--+  +--+--+    +--+--+  +--+--+
|35|36|  |39|40|    |51|52|  |55|56|
+--+--+  +--+--+    +--+--+  +--+--+
                                    
+--+--+  +--+--+    +--+--+  +--+--+
|41|42|  |45|46|    |57|58|  |61|62|
+--+--+  +--+--+    +--+--+  +--+--+
|43|44|  |47|48|    |59|60|  |63|64|
+--+--+  +--+--+    +--+--+  +--+--+

     x is 2 3 reshape count 6
     x
1 2 3
4 5 6
     display x
2 3 reshape 1 2 3 4 5 6

     x is 2 2 2 2 2 2 reshape count 64
     display x
2 2 2 2 2 2 reshape 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23

24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50

 51 52 53 54 55 56 57 58 59 60 61 62 63 64



     sum x
55
     product x
3628800

     + x
55
     * x
3628800



<p><a name="k13"></a></p>
<h2 id="k13">13. Řetězce jsou vlastně taktéž pole</h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Předchozí články o rozsáhlém světu &bdquo;array programmingu&ldquo;</h2>

<p>Programovacími jazyky, které jsou z&nbsp;větší či menší míry odvozeny od
APL, jsme se již na stránkách Roota zabývali v&nbsp;několika článcích. Odkazy
na tyto články naleznete pod odstavcem:</p>

<ol>

<li>Jazyky umožňující operace s&nbsp;poli aneb rozsáhlý svět &bdquo;array programmingu&ldquo;<br />
<a href="https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/">https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/</a>
</li>

<li>Specializované jazyky pro práci s&nbsp;N-dimenzionálními poli: jazyk J<br />
<a href="https://www.root.cz/clanky/specializovane-jazyky-pro-praci-s-n-dimenzionalnimi-poli-jazyk-j/">https://www.root.cz/clanky/specializovane-jazyky-pro-praci-s-n-dimenzionalnimi-poli-jazyk-j/</a>
</li>

<li>Programovací jazyky odvozené od APL: BQN a ivy aneb 1~×`1↓↕10<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-odvozene-od-apl-bqn-a-ivy-aneb-1-1-10/">https://www.root.cz/clanky/programovaci-jazyky-odvozene-od-apl-bqn-a-ivy-aneb-1-1-10/</a>
</li>

<li>Programovací jazyk K: důkaz, že mezi námi žijí mimozemšťané<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane/">https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane/</a>
</li>

<li>Programovací jazyk K: důkaz, že mezi námi žijí mimozemšťané (dokončení)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane-dokonceni/">https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane-dokonceni/</a>
</li>

<li>Programování mainframů: jazyk APL<br />
<a href="https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/">https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/</a>
</li>

<li>Programovací jazyk APL: programování bez smyček<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-apl-programovani-bez-smycek/">https://www.root.cz/clanky/programovaci-jazyk-apl-programovani-bez-smycek/</a>
</li>

<li>Programovací jazyk APL - dokončení<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-apl-dokonceni/">https://www.root.cz/clanky/programovaci-jazyk-apl-dokonceni/</a>
</li>

<li>Oslava 55 let od vzniku první implementace jazyka APL<br />
<a href="https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/">https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Nial: A powerful, interactive array language with support for flexible multiparadigm code<br />
<a href="https://www.nial-array-language.org/">https://www.nial-array-language.org/</a>
</li>

<li>Nial: dokumentace<br />
<a href="https://www.nial-array-language.org/ndocs/">https://www.nial-array-language.org/ndocs/</a>
</li>

<li>Nial na GitHubu<br />
<a href="https://github.com/niallang/Nial_Development">https://github.com/niallang/Nial_Development</a>
</li>

<li>Nial na Rosetta Code<br />
<a href="https://rosettacode.org/wiki/Category:Nial">https://rosettacode.org/wiki/Category:Nial</a>
</li>

<li>Array language comparisons<br />
<a href="https://github.com/codereport/array-language-comparisons">https://github.com/codereport/array-language-comparisons</a>
</li>

<li>K language - an introduction<br />
<a href="http://www.math.bas.bg/bantchev/place/k.html">http://www.math.bas.bg/bantchev/place/k.html</a>
</li>

<li>K7 Tutorial<br />
<a href="https://cs.nyu.edu/~shasha/papers/tutorial">https://cs.nyu.edu/~shasha/papers/tutorial</a>
</li>

<li>An Interview with Arthur Whitney, Kx CEO and Developer of Kx Technology, January 4, 2004<br />
<a href="https://web.archive.org/web/20150813004101/http://kx.com/arthur-interview.php">https://web.archive.org/web/20150813004101/http://kx.com/arthur-interview.php</a>
</li>

<li>A Shallow Introduction to the K Programming Language<br />
<a href="https://web.archive.org/web/20130801233812/http://www.kuro5hin.org/story/2002/11/14/22741/791">https://web.archive.org/web/20130801233812/http://www.kuro5hin.org/story/2002/11/14/22741/791</a>
</li>

<li>A Conversation with Arthur Whitney<br />
<a href="https://queue.acm.org/detail.cfm?id=1531242">https://queue.acm.org/detail.cfm?id=1531242</a>
</li>

<li>Anecdote about Arthur Whitney<br />
<a href="https://news.ycombinator.com/item?id=13590065">https://news.ycombinator.com/item?id=13590065</a>
</li>

<li>K - list of idioms<br />
<a href="https://github.com/kevinlawler/kona/wiki/Idioms">https://github.com/kevinlawler/kona/wiki/Idioms</a>
</li>

<li>Appendix A. Incunabulum<br />
<a href="http://keiapl.org/rhui/remember.htm#incunabulum">http://keiapl.org/rhui/remember.htm#incunabulum</a>
</li>

<li>K code study<br />
<a href="https://docs.google.com/document/d/1W83ME5JecI2hd5hAUqQ1BVF32wtCel8zxb7WPq-D4f8/edit">https://docs.google.com/document/d/1W83ME5JecI2hd5hAUqQ1BVF32wtCel8zxb7WPq-D4f8/edit</a>
</li>

<li>K tutorial<br />
<a href="https://github.com/kevinlawler/kona/wiki/Tutorial">https://github.com/kevinlawler/kona/wiki/Tutorial</a>
</li>

<li>K by EXAMPLE<br />
<a href="http://vrabi.web.elte.hu/k/kbyeg.k">http://vrabi.web.elte.hu/k/kbyeg.k</a>
</li>

<li>BQN: An APL Variant from Marshall Lochbaum (mlochbaum.github.io)<br />
<a href="https://news.ycombinator.com/item?id=24167804">https://news.ycombinator.com/item?id=24167804</a>
</li>

<li>Raytracer in 7 lines in K<br />
<a href="http://www.nsl.com/k/ray/ray.k">http://www.nsl.com/k/ray/ray.k</a>
</li>

<li>Marshall Lochbaum<br />
<a href="https://www.aplwiki.com/wiki/Marshall_Lochbaum">https://www.aplwiki.com/wiki/Marshall_Lochbaum</a>
</li>

<li>BQN<br />
<a href="https://www.aplwiki.com/wiki/BQN">https://www.aplwiki.com/wiki/BQN</a>
</li>

<li>Co-dfns<br />
<a href="https://www.aplwiki.com/wiki/Co-dfns">https://www.aplwiki.com/wiki/Co-dfns</a>
</li>

<li>Array model<br />
<a href="https://www.aplwiki.com/wiki/Array_model#Based_array_theory">https://www.aplwiki.com/wiki/Array_model#Based_array_theory</a>
</li>

<li>Fonts for BQN<br />
<a href="https://mlochbaum.github.io/BQN/fonts.html">https://mlochbaum.github.io/BQN/fonts.html</a>
</li>

<li>Leading axis theory<br />
<a href="https://www.aplwiki.com/wiki/Leading_axis_theory">https://www.aplwiki.com/wiki/Leading_axis_theory</a>
</li>

<li>A based system for general arrays<br />
<a href="https://dl.acm.org/doi/abs/10.1145/586656.586663">https://dl.acm.org/doi/abs/10.1145/586656.586663</a>
</li>

<li>APL – A Glimpse of Heaven (2006)<br />
<a href="https://news.ycombinator.com/item?id=19325361">https://news.ycombinator.com/item?id=19325361</a>
</li>

<li>APL and J<br />
<a href="https://crypto.stanford.edu/~blynn/c/apl.html">https://crypto.stanford.edu/~blynn/c/apl.html</a>
</li>

<li>ivy (dokumentace)<br />
<a href="https://pkg.go.dev/robpike.io/ivy#section-readme">https://pkg.go.dev/robpike.io/ivy#section-readme</a>
</li>

<li>ivy na GitHubu<br />
<a href="https://github.com/robpike/ivy/">https://github.com/robpike/ivy/</a>
</li>

<li>Ivy na APL wiki<br />
<a href="https://aplwiki.com/wiki/Ivy">https://aplwiki.com/wiki/Ivy</a>
</li>

<li>Implementing a bignum calculator (slajdy)<br />
<a href="https://talks.godoc.org/github.com/robpike/ivy/talks/ivy.slide#1">https://talks.godoc.org/github.com/robpike/ivy/talks/ivy.slide#1</a>
</li>

<li>Implementing a bignum calculator - Rob Pike - golang-syd November 2014<br />
<a href="https://www.youtube.com/watch?v=PXoG0WX0r_E">https://www.youtube.com/watch?v=PXoG0WX0r_E</a>
</li>

<li>Rob Pike na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/Rob_Pike">https://en.wikipedia.org/wiki/Rob_Pike</a>
</li>

<li>Rob Pike na cat-v<br />
<a href="http://genius.cat-v.org/rob-pike/">http://genius.cat-v.org/rob-pike/</a>
</li>

<li>Jazyky umožňující operace s&nbsp;poli aneb rozsáhlý svět „array programmingu“<br />
<a href="https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/">https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/</a>
</li>

<li>Programovací technika nazvaná <i>tacit programming</i><br />
<a href="https://www.root.cz/clanky/programovaci-technika-nazvana-tacit-programming/">https://www.root.cz/clanky/programovaci-technika-nazvana-tacit-programming/</a>
</li>

<li>Oslava 55 let od vzniku první implementace jazyka APL<br />
<a href="https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/">https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/</a>
</li>

<li>NuVoc<br />
<a href="https://code.jsoftware.com/wiki/NuVoc">https://code.jsoftware.com/wiki/NuVoc</a>
</li>

<li>J (programming language) [Wikipedia]<br />
<a href="https://en.wikipedia.org/wiki/J_%28programming_language%29">https://en.wikipedia.org/wiki/J_%28programming_language%29</a>
</li>

<li>J &ndash; Absolutely Essential Terms<br />
<a href="https://code.jsoftware.com/wiki/Vocabulary/AET">https://code.jsoftware.com/wiki/Vocabulary/AET</a>
</li>

<li>J &ndash; Atoms and Arrays<br />
<a href="https://code.jsoftware.com/wiki/Vocabulary/Nouns#Atom">https://code.jsoftware.com/wiki/Vocabulary/Nouns#Atom</a>
</li>

<li>Why J<br />
<a href="https://www.jsoftware.com/help/primer/why_j.htm">https://www.jsoftware.com/help/primer/why_j.htm</a>
</li>

<li>What is an Array?<br />
<a href="https://vector.org.uk/what-is-an-array/">https://vector.org.uk/what-is-an-array/</a>
</li>

<li>Comments<br />
<a href="http://www.gavilan.edu/csis/languages/comments.html">http://www.gavilan.edu/csis/languages/comments.html</a>
</li>

<li>Vector (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/Vector.html">https://mathworld.wolfram.com/Vector.html</a>
</li>

<li>n-Tuple (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/n-Tuple.html">https://mathworld.wolfram.com/n-Tuple.html</a>
</li>

<li>n-Vector (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/n-Vector.html">https://mathworld.wolfram.com/n-Vector.html</a>
</li>

<li>Matrix (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/Matrix.html">https://mathworld.wolfram.com/Matrix.html</a>
</li>

<li>Array (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/Array.html">https://mathworld.wolfram.com/Array.html</a>
</li>

<li>ND Arrays (Tensors) in different languages<br />
<a href="https://www.youtube.com/watch?v=WbpbEilgQBc">https://www.youtube.com/watch?v=WbpbEilgQBc</a>
</li>

<li>Extending APL to Infinity\<br />
<a href="https://www.jsoftware.com/papers/eem/infinity.htm">https://www.jsoftware.com/papers/eem/infinity.htm</a>
</li>

<li>Vector Library (R7RS-compatible)<br />
<a href="https://srfi.schemers.org/srfi-133/srfi-133.html">https://srfi.schemers.org/srfi-133/srfi-133.html</a>
</li>

<li>Vectors (pro Gauche)<br />
<a href="https://practical-scheme.net/gauche/man/gauche-refe/Vectors.html">https://practical-scheme.net/gauche/man/gauche-refe/Vectors.html</a>
</li>

<li>Kawa: Compiling Scheme to Java<br />
<a href="https://www.mit.edu/afs.new/sipb/project/kawa/doc/kawa-tour.html">https://www.mit.edu/afs.new/sipb/project/kawa/doc/kawa-tour.html</a>
</li>

<li>Kawa in Languages shootout<br />
<a href="http://per.bothner.com/blog/2010/Kawa-in-shootout/">http://per.bothner.com/blog/2010/Kawa-in-shootout/</a>
</li>

<li>Kawa 2.0 Supports Scheme R7RS<br />
<a href="https://developers.slashdot.org/story/14/12/13/2259225/kawa-20-supports-scheme-r7rs/">https://developers.slashdot.org/story/14/12/13/2259225/kawa-20-supports-scheme-r7rs/</a>
</li>

<li>Kawa — fast scripting on the Java platform<br />
<a href="https://lwn.net/Articles/623349/">https://lwn.net/Articles/623349/</a>
</li>

<li>Incanter is a Clojure-based, R-like platform for statistical computing and graphics.<br />
<a href="http://incanter.org/">http://incanter.org/</a>
</li>

<li>Evolution of incanter (Gource Visualization)<br />
<a href="https://www.youtube.com/watch?v=TVfL5nPELr4">https://www.youtube.com/watch?v=TVfL5nPELr4</a>
</li>

<li>Questions tagged [incanter] (na Stack Overflow)<br />
<a href="https://stackoverflow.com/questions/tagged/incanter?sort=active">https://stackoverflow.com/questions/tagged/incanter?sort=active</a>
</li>

<li>Data Sorcery with Clojure<br />
<a href="https://data-sorcery.org/contents/">https://data-sorcery.org/contents/</a>
</li>

<li>Back to the Future: Lisp as a Base for a Statistical Computing System<br />
<a href="https://rd.springer.com/chapter/10.1007/978-3-7908-2084-3_2">https://rd.springer.com/chapter/10.1007/978-3-7908-2084-3_2</a>
</li>

<li>Incanter Cheat Sheet<br />
<a href="http://incanter.org/docs/incanter-cheat-sheet.pdf">http://incanter.org/docs/incanter-cheat-sheet.pdf</a>
</li>

<li>Back to the Future: Lisp as a Base for a Statistical Computing System (celá verze článku)<br />
<a href="https://www.researchgate.net/publication/227019917_Back_to_the_Future_Lisp_as_a_Base_for_a_Statistical_Computing_System">https://www.researchgate.net/publication/227019917_Back_to_the_Future_Lisp_as_a_Base_for_a_Statistical_Computing_System</a>
</li>

<li>BQN: finally, an APL for your flying saucer<br />
<a href="https://mlochbaum.github.io/BQN/">https://mlochbaum.github.io/BQN/</a>
</li>

<li>Is BQN stable?<br />
<a href="https://mlochbaum.github.io/BQN/commentary/stability.html">https://mlochbaum.github.io/BQN/commentary/stability.html</a>
</li>

<li>Specification: BQN system-provided values<br />
<a href="https://mlochbaum.github.io/BQN/spec/system.html">https://mlochbaum.github.io/BQN/spec/system.html</a>
</li>

<li>Tutorial: BQN expressions<br />
<a href="https://mlochbaum.github.io/BQN/tutorial/expression.html">https://mlochbaum.github.io/BQN/tutorial/expression.html</a>
</li>

<li>BQN primitives<br />
<a href="https://mlochbaum.github.io/BQN/doc/primitive.html">https://mlochbaum.github.io/BQN/doc/primitive.html</a>
</li>

<li>Function trains<br />
<a href="https://mlochbaum.github.io/BQN/doc/train.html">https://mlochbaum.github.io/BQN/doc/train.html</a>
</li>

<li>BQN community links<br />
<a href="https://mlochbaum.github.io/BQN/community/index.html">https://mlochbaum.github.io/BQN/community/index.html</a>
</li>

<li>BQN UV<br />
<a href="https://observablehq.com/@lsh/bqn-uv">https://observablehq.com/@lsh/bqn-uv</a>
</li>

<li>APL Wiki<br />
<a href="https://aplwiki.com/wiki/">https://aplwiki.com/wiki/</a>
</li>

<li>The Array Cast<br />
<a href="https://www.arraycast.com/episodes/episode-03-what-is-an-array">https://www.arraycast.com/episodes/episode-03-what-is-an-array</a>
</li>

<li>EnthusiastiCon 2019 &ndash; An Introduction to APL<br />
<a href="https://www.youtube.com/watch?v=UltnvW83_CQ">https://www.youtube.com/watch?v=UltnvW83_CQ</a>
</li>

<li>Dyalog<br />
<a href="https://www.dyalog.com/">https://www.dyalog.com/</a>
</li>

<li>Try APL!<br />
<a href="https://tryapl.org/">https://tryapl.org/</a>
</li>

<li>Lisp-Stat Information<br />
<a href="http://homepage.cs.uiowa.edu/~luke/xls/xlsinfo/">http://homepage.cs.uiowa.edu/~luke/xls/xlsinfo/</a>
</li>

<li>Sample Plots in Incanter<br />
<a href="https://github.com/incanter/incanter/wiki/Sample-Plots-in-Incanter#line">https://github.com/incanter/incanter/wiki/Sample-Plots-in-Incanter#line</a>
</li>

<li>vectorz-clj<br />
<a href="https://github.com/mikera/vectorz-clj">https://github.com/mikera/vectorz-clj</a>
</li>

<li>vectorz &ndash; Examples<br />
<a href="https://github.com/mikera/vectorz-clj/wiki/Examples">https://github.com/mikera/vectorz-clj/wiki/Examples</a>
</li>

<li>Basic Vector and Matrix Operations in Julia: Quick Reference and Examples<br />
<a href="https://queirozf.com/entries/basic-vector-and-matrix-operations-in-julia-quick-reference-and-examples">https://queirozf.com/entries/basic-vector-and-matrix-operations-in-julia-quick-reference-and-examples</a>
</li>

<li>Vectors and matrices in Julia<br />
<a href="https://fncbook.github.io/v1.0/linsys/demos/matrices-julia.html">https://fncbook.github.io/v1.0/linsys/demos/matrices-julia.html</a>
</li>

<li>Array vs Matrix in R Programming<br />
<a href="https://www.geeksforgeeks.org/array-vs-matrix-in-r-programming/">https://www.geeksforgeeks.org/array-vs-matrix-in-r-programming/</a>
</li>

<li>Concurrency (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Category:Concurrency_%28computer_science%29">https://en.wikipedia.org/wiki/Category:Concurrency_%28computer_science%29</a>
</li>

<li>Koprogram<br />
<a href="https://cs.wikipedia.org/wiki/Koprogram">https://cs.wikipedia.org/wiki/Koprogram</a>
</li>

<li>Coroutine<br />
<a href="https://en.wikipedia.org/wiki/Coroutine">https://en.wikipedia.org/wiki/Coroutine</a>
</li>

<li>Coroutines in C<br />
<a href="http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html">http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html</a>
</li>

<li>S-expression (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/S-expression">https://en.wikipedia.org/wiki/S-expression</a>
</li>

<li>S-Expressions (Rosetta Code)<br />
<a href="http://rosettacode.org/wiki/S-Expressions">http://rosettacode.org/wiki/S-Expressions</a>
</li>

<li>Introducing Julia/Metaprogramming<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming">https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming</a>
</li>

<li>Tutorial for the Common Lisp Loop Macro<br />
<a href="http://www.ai.sri.com/pkarp/loop.html">http://www.ai.sri.com/pkarp/loop.html</a>
</li>

<li>Clojure Macro Tutorial (Part I, Getting the Compiler to Write Your Code For You)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html</a>
</li>

<li>Clojure Macro Tutorial (Part II: The Compiler Strikes Back)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html</a>
</li>

<li>Clojure Macro Tutorial (Part III: Syntax Quote)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html</a>
</li>

<li>Clojure Macros and Metaprogramming<br />
<a href="http://clojure-doc.org/articles/language/macros.html">http://clojure-doc.org/articles/language/macros.html</a>
</li>

<li>Fatvat &ndash; Exploring functional programming: Clojure Macros<br />
<a href="http://www.fatvat.co.uk/2009/02/clojure-macros.html">http://www.fatvat.co.uk/2009/02/clojure-macros.html</a>
</li>

<li>CS 2101 Parallel Computing with Julia<br />
<a href="https://www.coursehero.com/file/11508091/CS-2101-Parallel-Computing-with-Julia/">https://www.coursehero.com/file/11508091/CS-2101-Parallel-Computing-with-Julia/</a>
</li>

<li>Julia By Example<br />
<a href="https://samuelcolvin.github.io/JuliaByExample/">https://samuelcolvin.github.io/JuliaByExample/</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>Introducing Julia/Functions<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Functions">https://en.wikibooks.org/wiki/Introducing_Julia/Functions</a>
</li>

<li>Functions (Julia documentation)<br />
<a href="https://docs.julialang.org/en/v1/manual/functions/">https://docs.julialang.org/en/v1/manual/functions/</a>
</li>

<li>Evaluate binomial coefficients<br />
<a href="http://rosettacode.org/wiki/Evaluate_binomial_coefficients">http://rosettacode.org/wiki/Evaluate_binomial_coefficients</a>
</li>

<li>Ackermann function<br />
<a href="http://rosettacode.org/wiki/Ackermann_function">http://rosettacode.org/wiki/Ackermann_function</a>
</li>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; dokumentace<br />
<a href="http://docs.julialang.org/">http://docs.julialang.org/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>Learn X in Y minutes (where X=Julia)<br />
<a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a>
</li>

<li>New Julia language seeks to be the C for scientists<br />
<a href="http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html">http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html</a>
</li>

<li>Julia: A Fast Dynamic Language for Technical Computing<br />
<a href="http://karpinski.org/publications/2012/julia-a-fast-dynamic-language">http://karpinski.org/publications/2012/julia-a-fast-dynamic-language</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="http://llvm.org/">http://llvm.org/</a>
</li>

<li>Julia: benchmarks<br />
<a href="http://julialang.org/benchmarks/">http://julialang.org/benchmarks/</a>
</li>

<li>Type system<br />
<a href="https://en.wikipedia.org/wiki/Type_system">https://en.wikipedia.org/wiki/Type_system</a>
</li>

<li>Half-precision floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Half-precision_floating-point_format">https://en.wikipedia.org/wiki/Half-precision_floating-point_format</a>
</li>

<li>Dartmouth BASIC<br />
<a href="https://en.wikipedia.org/wiki/Dartmouth_BASIC">https://en.wikipedia.org/wiki/Dartmouth_BASIC</a>
</li>

<li>BASIC 4th Edition<br />
<a href="http://www.bitsavers.org/pdf/dartmouth/BASIC_4th_Edition_Jan68.pdf">http://www.bitsavers.org/pdf/dartmouth/BASIC_4th_Edition_Jan68.pdf</a>
</li>

<li>VECTRAN<br />
<a href="https://encyclopedia2.thefreedictionary.com/VECTRAN">https://encyclopedia2.thefreedictionary.com/VECTRAN</a>
</li>

<li>Comparison of programming languages (array)<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array)">https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array)</a>
</li>

<li>BASIC at 50<br />
<a href="https://www.dartmouth.edu/basicfifty/commands.html">https://www.dartmouth.edu/basicfifty/commands.html</a>
</li>

<li>BBC Basic - arrays<br />
<a href="http://www.riscos.com/support/developers/bbcbasic/part2/arrays.html">http://www.riscos.com/support/developers/bbcbasic/part2/arrays.html</a>
</li>

<li>Datová struktura<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%A1_struktura">https://cs.wikipedia.org/wiki/Datov%C3%A1_struktura</a>
</li>

<li>SIMD instrukce využívané v&nbsp;moderních mikroprocesorech řady x86<br />
<a href="https://www.root.cz/clanky/simd-instrukce-vyuzivane-v-modernich-mikroprocesorech-rady-x86/">https://www.root.cz/clanky/simd-instrukce-vyuzivane-v-modernich-mikroprocesorech-rady-x86/</a>
</li>

<li>SIMD instrukce v&nbsp;moderních mikroprocesorech řady x86 (2.část: SSE)<br />
<a href="https://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-2-cast-sse/">https://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-2-cast-sse/</a>
</li>

<li>SIMD instrukce v&nbsp;moderních mikroprocesorech řady x86 (3.část: SSE2)<br />
<a href="https://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-3-cast-sse2/">https://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-3-cast-sse2/</a>
</li>

<li>Inductive type<br />
<a href="https://en.wikipedia.org/wiki/Inductive_type">https://en.wikipedia.org/wiki/Inductive_type</a>
</li>

<li>JuliaMono, a font for programming<br />
<a href="https://github.com/cormullion/juliamono">https://github.com/cormullion/juliamono</a>
</li>

<li>It’s arrays all the way down<br />
<a href="https://xpqz.github.io/learnapl/array.html">https://xpqz.github.io/learnapl/array.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

