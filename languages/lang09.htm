<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Scratch - plnohodnotný programovací jazyk nebo jen dětské puzzle? (2. část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Scratch - plnohodnotný programovací jazyk nebo jen dětské puzzle? (2. část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;dnešní části seriálu o programovacích jazycích navržených pro výuku programování budeme pokračovat v&nbsp;popisu projektu Scratch. Řekneme si, jak lze vytvářet různé typy programových smyček a podmínek i to, jakým způsobem se pracuje se skalárními proměnnými i se seznamy.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Projekt Scratch jakožto nástroj pro výuku v&nbsp;21.století</a></p>
<p><a href="#k02">2. Tvorba nekonečných programových smyček</a></p>
<p><a href="#k03">3. Počítané programové smyčky</a></p>
<p><a href="#k04">4. Programové smyčky s&nbsp;podmínkou vyhodnocovanou před každou iterací  (<strong>forever if</strong>)</a></p>
<p><a href="#k05">5. Programové smyčky typu <strong>repeat-until</strong></a></p>

<p><a href="#k06">6. Podmínky typu <strong>if-then</strong> (neúplný podmíněný příkaz) a <strong>if-then-else</strong> (úplný podmíněný příkaz)</a></p>
<p><a href="#k07">7. Využití skalárních proměnných</a></p>
<p><a href="#k08">8. Práce se seznamy</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Projekt Scratch jakožto nástroj pro výuku v&nbsp;21.století</h2>

<p>V&nbsp;předchozí části seriálu o programovacích jazycích, které byly
navrženy s&nbsp;ohledem na jejich použití při výuce programování, jsme se
seznámili s&nbsp;projektem <i>Scratch</i>, v&nbsp;němž je možné programy
vytvářet vizuálně pouhým přesunem programových bloků, přičemž každý blok
představuje určitou (dále již většinou nedělitelnou) operaci. Díky tomu, že se
programy nezapisují ve strukturovaném textově orientovaném programovacím
jazyce, jsou eliminovány syntaktické chyby, takže se uživatelé <i>Scratche</i>
mohou plně soustředit na vlastní řešení určitého problému a nikoli na to, kam
správně zapsat středník nebo závorku, aby byl interpret či překladač konečně
spokojený (kromě toho je velmi snadné provést lokalizaci celého
<i>Scratche</i>). Navíc sami tvůrci <i>Scratche</i> tvrdí, že
v&nbsp;současnosti se již kromě znalosti čtení a psaní po dětech (a nejenom po
nich) požaduje i schopnost manipulace s&nbsp;dalšími médii a s&nbsp;jejich
vzájemnou interakcí. S&nbsp;tím souvisí i další vlastnosti <i>Scratche</i>:
orientace na využití bitmapové i vektorové grafiky, hudby, zvuků a částečně i
ve využití Internetu (což je nejen atraktivnější, než pouhý textový výstup, ale
otevírá to možnosti pro tvorbu zajímavých projektů).</p>

<img src="http://i.iinfo.cz/images/694/lang09-1.png" width="450" height="502" alt="&#160;" />
<p><i>Obrázek 1: Jednoduchý simulátor elektrického obvodu naprogramovaný ve
Scratchi. Každý prvek obvodu je představován jedním bitmapovým objektem
(spritem), ke kterému je přiřazena obslužná rutina. Seznam spritů je zobrazený
dole (včetně jednoho spritu obsahujícího pouze instrukce), samotné propojovací
vodiče jsou součástí pozadí (background). Tento simulátor lze najít
v&nbsp;demonstračních příkladech dodávaných se samotným Scratchem.</i></p>

<p>Díky podpoře různých typů médií je tak projekt <i>Scratch</i> použitelný
například i pro tvorbu jednodušších her a interaktivních prezentací (některé
jsou součástí jeho standardní instalace). A právě zde se dostáváme k&nbsp;další
zajímavosti. I v&nbsp;jednoduché hře je většinou zapotřebí naprogramovat
interakci většího množství různých objektů, například hráče, NPC a několika
statických objektů. To je při využití &bdquo;klasického&ldquo; způsobu
programování relativně složitá záležitost, především z&nbsp;hlediska časování a
taktéž korektní obsluhy všech stavů, ke kterým ve hře může dojít. Ve
<i>Scratchi</i> je však využito událostmi řízené programování doplněné o
možnosti posílání zpráv mezi jednotlivými objekty, což v&nbsp;důsledku vede
k&nbsp;tomu, že naprogramování chování jednoho objektu nemusí přesáhnout ani
velikost jedné obrazovky zaplněné &bdquo;skriptem&ldquo; (sestaveným, jak již
víme, z&nbsp;příkazových bloků). Právě s&nbsp;těmito vlastnostmi
<i>Scratche</i> se seznámíme v&nbsp;dnešním článku.</p>

<img src="http://i.iinfo.cz/images/694/lang09-2.png" width="293" height="550" alt="&#160;" />
<p><i>Obrázek 2: Sada obslužných rutin řídicích pohyb hráče využitá ve (značně
zjednodušené) hře Pac Man. Díky rozdělení chování hráče do šesti samostatných
rutin je obsah těchto rutin velmi snadno pochopitelný &ndash; první rutina
zajišťuje inicializaci a animaci postavy, čtyři další rutiny slouží pro reakci
na stisk kurzorových kláves a poslední rutina pro pohyb hráče s&nbsp;testem,
zda nenarazil do zdi.</i></p>



<p><a name="k02"></a></p>
<h2>2. Tvorba nekonečných programových smyček</h2>

<p>Programy tvořené ve <i>Scratchi</i> se samozřejmě neskládají z&nbsp;pouhé
řady (či spíše sloupce) bloků, které by se spouštěly sekvenčně &ndash; tímto
způsobem by bylo možné vytvořit jen ty nejjednodušší algoritmy, které
neobsahují opakující se části kódu. Vzhledem k&nbsp;tomu, že původní
<i>Scratch</i> bez nainstalovaných rozšíření neumožňuje přímou implementaci
skoků ani tvorbu podprogramů, díky nimž by bylo možné využít rekurze, je nutné
pro opakující se části kódu použít některý z&nbsp;podporovaných typů programové
smyčky. Ty jsou ve <i>Scratchi</i> reprezentovány &ndash; jak zajisté uhodnete
&ndash; taktéž pomocí příkazových bloků, ovšem tyto bloky jsou poněkud
zvláštní, protože v&nbsp;sobě mohou obsahovat další (pod)bloky. Kvůli tomu mají
bloky reprezentující programové smyčky odlišný tvar a navíc jsou elastické, aby
do nich bylo možné vložit další bloky. Samozřejmě je umožněno, aby programové
smyčky byly vnořeny a v&nbsp;reálných programech se s&nbsp;vnořenými
programovými smyčkami i velmi často můžeme setkat.</p>

<img src="http://i.iinfo.cz/images/694/lang09-3.png" width="251" height="249" alt="&#160;" />
<p><i>Obrázek 3: Ukázka využití nekonečné programové smyčky použité při popisu
chování spritu, který se má po každém nárazu na stěnu nakreslenou červenou
barvou otočit zpět směrem ke středu &bdquo;ohrady&ldquo;.</i></p>

<p>Nejjednodušším typem programové smyčky podporované <i>Scratchem</i> je
nekonečná smyčka. S&nbsp;tímto typem smyčky se můžeme setkat například při
popisu chování nějakého objektu ve hře, protože takový objekt má většinou
neustále opakovat nějakou činnost, například se posunovat po naprogramované
trase. Využití nekonečné smyčky je ukázáno na třetím obrázku, na němž je
zobrazen program pro řízení pohybu spritu po ploše, přičemž se sprite po nárazu
do &bdquo;ohrady&ldquo; nakreslené červenou barvou otočí zpět směrem do středu
ohrady.</p>

<img src="http://i.iinfo.cz/images/694/lang09-4.png" width="204" height="156" alt="&#160;" />
<p><i>Obrázek 4: Ukázka použití počítané smyčky (viz též další kapitolu) pro
přehrání jednoduché melodie.</i></p>



<p><a name="k03"></a></p>
<h2>3. Počítané programové smyčky</h2>

<p>Druhým ve <i>Scratchi</i> podporovaným typem programových smyček jsou smyčky
s&nbsp;pevně zadaným počtem opakování. Zatímco v&nbsp;mnoha jiných
(mainstreamových) programovacích jazycích se tento typ smyček implementuje
s&nbsp;využitím řídicí proměnné (počitadla), ve <i>Scratchi</i> se, podobně
jako například v&nbsp;příbuzném <i>Logu</i>, pouze určí celkový počet opakování
programové smyčky. Na pátém obrázku můžete vidět program využívající počítanou
smyčku k&nbsp;tomu, aby nakreslil červenou čtvercovou &bdquo;ohradu&ldquo;
využívanou v&nbsp;programu z&nbsp;obrázku třetího. Na tomto programu si
povšimněte jednoho poměrně důležitého detailu &ndash; zatímco blok pro
nekonečnou smyčku neměl na své spodní části umístěn výčnělek sloužící pro
přichycení dalšího bloku (což je ostatně u nekonečné smyčky logické), u smyčky
počítané tento prvek již existuje. To mj.&nbsp;znamená, že na tuto smyčku mohou
navazovat další příkazové bloky.</p>

<img src="http://i.iinfo.cz/images/694/lang09-5.png" width="181" height="239" alt="&#160;" />
<p><i>Obrázek 5: Program, pomocí něhož byla nakreslena červená ohrada využívaná
programem číslo 3.</i></p>

<p>Na následujících screenshotech je ukázáno, jakým způsobem je možné využít
dvojici vnořených počítaných programových smyček pro vykreslení relativně
složitého obrazce &ndash; květu složeného ze sekvence kružnic. Vnitřní
programová smyčka slouží pro vykreslení jedné kružnice, přesněji řečeno
mnohoúhelníku, který se již kružnici podobá. Vnější smyčka mění počáteční
natočení spritu tak, aby byla pootočená i každá další kružnice. Kromě toho ve
vnější smyčce dochází i ke změně barvy kreslicího pera.</p>

<img src="http://i.iinfo.cz/images/694/lang09-6.png" width="175" height="223" alt="&#160;" />
<p><i>Obrázek 6: Program sloužící pro vykreslení květu složeného
z&nbsp;kružnic.</i></p>

<img src="http://i.iinfo.cz/images/694/lang09-7.png" width="427" height="355" alt="&#160;" />
<p><i>Obrázek 7: Výsledek běhu programu z&nbsp;obrázku číslo 6.</i></p>



<p><a name="k04"></a></p>
<h2>4. Programové smyčky s&nbsp;podmínkou vyhodnocovanou před každou iterací (<strong>forever if</strong>)</h2>

<p>Kromě nekonečných programových smyček a programových smyček s&nbsp;pevně
zadaným počtem opakování lze ve <i>Scratchi</i> využít i další dva typy
programových smyček. Jedná se o smyčky s&nbsp;podmínkou vyhodnocovanou před
každou iterací. Zatímco se v&nbsp;mnoha běžných programovacích jazycích můžeme
setkat se smyčkami typu <strong>while</strong> a <strong>do-while</strong>
(popř.&nbsp;taktéž s&nbsp;variantou <strong>repeat-until</strong>), je situace
ve <i>Scratchi</i> poněkud odlišná, protože jsou k&nbsp;dispozici dva odlišné
typy smyček s&nbsp;podmínkou. První z&nbsp;těchto programových smyček
vyhodnocuje podmínku před provedením každé iterace a v&nbsp;případě, že je tato
podmínka splněna, provede se tělo smyčky, tj.&nbsp;příkazové bloky umístěné
uvnitř bloku představujícího smyčku. V&nbsp;podmínce se mohou vyskytovat buď
speciální typy bloků vracejících pravdivostní hodnotu (viz též programy
zobrazené na obrázcích 2 a 3) nebo například relační výrazy, s&nbsp;nimiž se
seznámíme v&nbsp;dalším textu.</p>

<img src="http://i.iinfo.cz/images/694/lang09-8.png" width="235" height="131" alt="&#160;" />
<p><i>Obrázek 8: Ukázka využití programové smyčky typu <strong>forever if</strong>.</i></p>

<p>Na první pohled se tedy tato smyčka, jejíž princip činnosti je ukázán na
osmém obrázku, podobá klasické programové smyčce <strong>while</strong>,
existuje zde však jeden podstatný rozdíl &ndash; na blok se smyčkou již není
možné navázat další příkazové bloky, protože neobsahuje na spodní části
&bdquo;výčnělek&ldquo; umožňující připojení těchto bloků. V&nbsp;tomto ohledu
se tedy jedná o určité zobecnění nekonečné smyčky, s&nbsp;níž jsme se seznámili
ve druhé kapitole. Právě z&nbsp;tohoto důvodu se v&nbsp;originální anglické
verzi tato smyčka jmenuje <strong>forever if</strong> a normální nekonečná
smyčka nese název <strong>forever</strong>.</p>

<img src="http://i.iinfo.cz/images/694/lang09-9.png" width="293" height="111" alt="&#160;" />
<p><i>Obrázek 9: Programová smyčka typu <strong>forever if</strong> byla
využita i pro řízení pohybu Pac Mana.</i></p>



<p><a name="k05"></a></p>
<h2>5. Programové smyčky typu <strong>repeat-until</strong></h2>

<p>Druhým typem programové smyčky s&nbsp;podmínkou určující provedení iterace
je smyčka, jejíž využití můžeme vidět na desátém obrázku. V&nbsp;tomto typu
smyčky se podmínka (pro jejíž konstrukci platí stejná pravidla, jako pro
předchozí typ smyčky) taktéž vyhodnocuje před každou iterací, ovšem do těla
smyčky se řízení běhu programu dostane pouze ve chvíli, kdy podmínka
<strong>není</strong> splněna. Při (prvním) splnění podmínky je smyčka ukončena
a řízení běhu programu se přesune na blok, který je připojen za smyčku,
popř.&nbsp;dojde k&nbsp;ukončení běhu programu, když už žádný další blok není
připojen. To mj.&nbsp;znamená, že řídicí blok představující tento typ
programové smyčky obsahuje potřebný &bdquo;výčnělek&ldquo; na spodní části,
který umožňuje napojení na další bloky. V&nbsp;teorii strukturovaného
programování se tomuto typu smyčky říká programová smyčka
<strong>repeat-until</strong> a přesně tato klíčová slova jsou použita i
v&nbsp;některých programovacích jazycích, typicky v&nbsp;<i>Pascalu</i>.</p>

<img src="http://i.iinfo.cz/images/694/lang09-10.png" width="252" height="168" alt="&#160;" />
<p><i>Obrázek 10: Použití programové smyčky typu <strong>repeat-until</strong>
pro počítání od nuly do devíti.</i></p>

<p>Na následující dvojici obrázků je ukázáno, jak je možné pomocí smyčky typu
<strong>repeat-until</strong> vykreslit spirálu. Programová smyčka je prováděna
tak dlouho, dokud se sprite vykreslující spirálu nedotkne okraje hrací plochy.
Ihned poté je běh programu ukončen, protože za programovou smyčkou již
nenásledují žádné další příkazy (tj.&nbsp;žádné příkazové bloky).</p>

<img src="http://i.iinfo.cz/images/694/lang09-11.png" width="314" height="259" alt="&#160;" />
<p><i>Obrázek 11: Použití programové smyčky typu <strong>repeat-until</strong>
pro vykreslení jednoduché spirály.</i></p>

<img src="http://i.iinfo.cz/images/694/lang09-12.png" width="315" height="354" alt="&#160;" />
<p><i>Obrázek 12: Spirála vykreslená programem, jehož skript je zobrazen na
předchozím screenshotu.</i></p>



<p><a name="k06"></a></p>
<h2>6. Podmínky typu <strong>if-then</strong> (neúplný podmíněný příkaz) a <strong>if-then-else</strong> (úplný podmíněný příkaz)</h2>

<p>S&nbsp;programovými smyčkami s&nbsp;podmínkami vyhodnocovanými před každou
iterací samozřejmě poměrně úzce souvisí i samotné příkazové bloky určené pro
podmíněné provádění příkazů. Ve <i>Scratchi</i> jsou k&nbsp;dispozici dva typy
příkazových bloků, pomocí nichž je možné vyjádřit větvení programu na základě
vyhodnocení nějaké podmínky. První z&nbsp;těchto bloků je obdobou klasického
příkazu <strong>if-then</strong>, tj.&nbsp;příkazové bloky umístěné uvnitř
tohoto bloku jsou provedeny pouze za předpokladu, že je podmínka vyhodnocena
jako pravdivá. Příklad této podmínky jsme již mohli vidět na demonstračním
příkladu zobrazeném na třetím obrázku, další příklad použití je na obrázku
následujícím, v&nbsp;němž je příkazový blok typu <strong>if-then</strong>
použitý uvnitř nekonečné smyčky pro její podmíněné zastavení (u tohoto programu
opět poněkud předbíháme, protože je v&nbsp;něm využita proměnná představovaná
bloky oranžové barvy a taktéž funkce vracející náhodné číslo v&nbsp;rozmezí
-10..10; funkce a výrazy jsou reprezentovány barvou zelenou).</p>

<img src="http://i.iinfo.cz/images/694/lang09-13.png" width="336" height="274" alt="&#160;" />
<p><i>Obrázek 13: Příklad použití příkazového bloku
<strong>if-then</strong>.</i></p>

<p>Druhý podmínkový příkazový blok již umožňuje specifikovat obě větve
programu, tj.&nbsp;jak větev, která se má spustit při splnění podmínky, tak i
větev, jejíž obsah je spuštěn v&nbsp;případě, že podmínka splněna naopak není.
Jedná se tedy o obdobu strukturovaného příkazu <strong>if-then-else</strong>.
Na osmém obrázku je zobrazen program využívající tento typ řídicího bloku. Jde
o relativně jednoduchý program simulující náhodný pohyb, přičemž změnou kroku
(poslední modrý blok) i změnou rozsahu generovaných náhodných čísel je možné
měnit náhodnost pohybu spritu po herní ploše. Na pozadí herní plochy je
nakreslen souřadný systém představovaný bitmapou, která je součástí instalace
<i>Scratche</i>. Na herní plochu se navíc vykresluje jak stopa spritu a samotný
sprite (myš), tak i aktuální hodnota pomocné proměnné nazvané
<strong>otocka</strong>. Ale to se již dostáváme k&nbsp;další kapitole a
k&nbsp;dalším vlastnostem <i>Scratche</i> &ndash; práci s&nbsp;proměnnými.</p>

<img src="http://i.iinfo.cz/images/694/lang09-14.png" width="361" height="309" alt="&#160;" />
<p><i>Obrázek 14: Příklad použití příkazového bloku
<strong>if-then-else</strong>.</i></p>

<img src="http://i.iinfo.cz/images/694/lang09-15.png" width="478" height="360" alt="&#160;" />
<p><i>Obrázek 15: Výsledek běhu simulace náhodného pohybu, v&nbsp;níž se kromě
programové smyčky využíval i příkazový blok
<strong>if-then-else</strong>.</i></p>



<p><a name="k07"></a></p>
<h2>7. Využití skalárních proměnných</h2>

<p>Již v&nbsp;předchozích kapitolách jsme v&nbsp;několika demonstračních
příkladech použili <i>proměnné</i>. Ty mají ve <i>Scratchi</i> podobný význam,
jako v&nbsp;běžných programovacích jazycích, ovšem způsob použití proměnných se
v&nbsp;několika ohledech od běžných jazyků odlišuje. Základní příkazové bloky
pro práci s&nbsp;proměnnými se nachází v&nbsp;sekci <strong>Proměnné</strong>,
což zajisté není překvapivé, ovšem zajímavý je fakt, že tato sekce při
inicializaci <i>Scratche</i> obsahuje pouze dvojici příkazů (nikoli příkazových
bloků) <strong>Vytvoř proměnnou</strong> a <strong>Vytvoř seznam</strong>.
Pokud se příkaz <strong>Vytvoř proměnnou</strong> vybere a spustí, zeptá se
<i>Scratch</i> v&nbsp;samostatném dialogu na název proměnné i na oblast její
viditelnosti &ndash; zda se má jednat o proměnnou viditelnou pouze pro jeden
sprite nebo naopak pro všechny sprity, které jsou v&nbsp;projektu použity.
V&nbsp;případě, že se proměnná vytváří pro pozadí (což je taktéž umožněno),
není možné oblast viditelnosti proměnné změnit.</p>

<img src="http://i.iinfo.cz/images/694/lang09-16.png" width="250" height="334" alt="&#160;" />
<p><i>Obrázek 16: Ukázka programu využívajícího proměnné nazvané
<strong>krok</strong>.</i></p>

<p>Ihned poté, co je proměnná vytvořena, se v&nbsp;sekci
<strong>Proměnné</strong> ukáže pětice nových příkazových bloků sloužících pro
nastavení nové hodnoty do proměnné, pro změnu hodnoty proměnné (vhodné
například pro implementaci počítaných programových smyček) a taktéž bloky
sloužící pro zobrazení či naopak skrytí proměnné na pracovní ploše.
<i>Scratch</i> totiž umožňuje, aby se jméno proměnné a její aktuální hodnota
zobrazovala na pracovní ploše i v&nbsp;době běhu programu &ndash; jedná se
vlastně o jednoduše použitelnou podobu sledování proměnných při trasování
programu v&nbsp;debuggeru. Navíc se při dvoukliku na obsah proměnné na pracovní
ploše mění způsob zobrazení. Lze vybírat ze tří formátů: jméno proměnné +
hodnota, pouze hodnota proměnné (lze například použít jako měřič skóre
v&nbsp;nějaké hře) a konečně jméno proměnné + hodnota + posuvník, kterým je
možné hodnotu proměnné interaktivně měnit. Ještě jsme si však nepopsali pátý
příkazový blok vytvořený ihned po přidání nové proměnné do programu. Tento blok
je možné využít v&nbsp;programových smyčkách, podmínkách či v&nbsp;dalších
blocích všude tam, kde je očekávána nějaká hodnota.</p>

<img src="http://i.iinfo.cz/images/694/lang09-17.png" width="372" height="355" alt="&#160;" />
<p><i>Obrázek 17: Výsledek běhu programu, jehož kód byl zobrazen na šestnáctém
screenshotu.</i></p>



<p><a name="k08"></a></p>
<h2>8. Práce se seznamy</h2>

<p>V&nbsp;předchozí kapitole jsme si popsali práci s&nbsp;proměnnými, které
mohly obsahovat pouze skalární hodnoty. Většinou se do těchto proměnných
ukládají čísla, a to jak čísla celá, tak i čísla reálná (<i>Scratch</i> mezi
nimi téměř nikdy nedělá rozdíl), ovšem v&nbsp;případě potřeby disponuje
<i>Scratch</i> i podporou práce s&nbsp;řetězci. Tato podpora však ve
skutečnosti není tak velká, aby s&nbsp;řetězci bylo možné provádět taková
kouzla, jako v&nbsp;mnoha mainstreamových programovacích jazycích. Kromě
skalárních proměnných lze ve <i>Scratchi</i> používat i seznamy (<i>list</i>).
Jedná se o lineární seznamy s&nbsp;dynamicky měnitelným počtem prvků (což se od
seznamů obecně očekává). Jejich prvky však nemohou obsahovat další seznamy, což
například znamená, že při přidání seznamu do jiného seznamu se původní seznam
změní na jediný prvek s&nbsp;řetězcem, jehož obsah odpovídá textové
reprezentaci původního seznamu (toho je možné využít například tak, že každý
seznam bude využit pro uložení jedné věty sestavené ze slov, podobně jako je
tomu v&nbsp;<i>Logu</i>).</p>

<p>Se seznamy je možné provádět běžné operace, mezi něž patří zejména přidání
nového prvku na konec seznamu (<i>append</i>), vložení prvku na určené místo
(<i>insert</i>), přečtení prvku z&nbsp;určité pozice v&nbsp;seznamu a taktéž
zjištění délky seznamu. Kromě toho je k&nbsp;dispozici i příkazový blok
vracející pravdivostní hodnotu <strong>true</strong> nebo
<strong>false</strong> na základě toho, zda seznam obsahuje prvek s&nbsp;daným
obsahem. Podobně jako tomu bylo u skalárních proměnných, i seznamy je možné
zobrazit na pracovní ploše. V&nbsp;tomto případě se zobrazí jak název seznamu,
tak i obsah všech jeho prvků, popř.&nbsp;posuvník, pokud je počet prvků příliš
velký na to, aby se obsah celého seznamu vešel do zvolené oblasti. Přímo na
pracovní ploše je možné obsah seznamu editovat, přidávat do něj nové prvky,
mazat prvky nebo měnit jejich obsah.</p>

<img src="http://i.iinfo.cz/images/694/lang09-18.png" width="477" height="352" alt="&#160;" />
<p><i>Obrázek 18: Způsob zobrazení seznamu na pracovní ploše.</i></p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>Scratch: oficiální stránka projektu<br />
<a href="http://scratch.mit.edu/">http://scratch.mit.edu/</a>
</li>

<li>Scratch: galerie projektů vytvořených ve Scratchi<br />
<a href="http://scratch.mit.edu/galleries/browse/newest">http://scratch.mit.edu/galleries/browse/newest</a>
</li>

<li>Scratch: nápověda<br />
<a href="file:///usr/share/scratch/Help/en/index.html">file:///usr/share/scratch/Help/en/index.html</a>
</li>

<li>Scratch: obrazovky nápovědy<br />
<a href="file:///usr/share/scratch/Help/en/allscreens.html">file:///usr/share/scratch/Help/en/allscreens.html</a>
</li>

<li>Scratch (Wikipedie CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Scratch">http://cs.wikipedia.org/wiki/Scratch</a>
</li>

<li>Scratch (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Scratch_(programming_language)">http://en.wikipedia.org/wiki/Scratch_(programming_language)</a>
</li>

<li>Mitchel Resnick (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Mitchel_Resnick">http://en.wikipedia.org/wiki/Mitchel_Resnick</a>
</li>

<li>Domácí stránka Mitchela Resnicka<br />
<a href="http://web.media.mit.edu/~mres/">http://web.media.mit.edu/~mres/</a>
</li>

<li>BASIC-256 - BASIC256 - An easy to use BASIC language and IDE<br />
<a href="http://www.basic256.org/">http://www.basic256.org/</a>
</li>

<li>PythonTurtle<br />
<a href="http://pythonturtle.org/">http://pythonturtle.org/</a>
</li>

<li>Turtle graphics for Tk<br />
<a href="http://docs.python.org/library/turtle.html">http://docs.python.org/library/turtle.html</a>
</li>

<li>Scratch Lowers Resistance to Programming<br />
<a href="http://www.wired.com/gadgetlab/2009/03/scratch-lowers/">http://www.wired.com/gadgetlab/2009/03/scratch-lowers/</a>
</li>

<li>Stopařův průvodce jedním převážně neškodným programovacím jazykem<br />
<a href="http://www.squeak.cz/">http://www.squeak.cz/</a>
</li>

<li>CamelCase<br />
<a href="http://en.wikipedia.org/wiki/Camel_case">http://en.wikipedia.org/wiki/Camel_case</a>
</li>

<li>Smalltalk tutorial chapter 5 &ndash; Variables<br />
<a href="http://www.tutorials4u.com/smalltalk/smalltalk-tutorial-05.htm">http://www.tutorials4u.com/smalltalk/smalltalk-tutorial-05.htm</a>
</li>

<li>History around Pascal Casing and Camel Casing<br />
<a href="http://blogs.msdn.com/b/brada/archive/2004/02/03/67024.aspx">http://blogs.msdn.com/b/brada/archive/2004/02/03/67024.aspx</a>
</li>

<li>Xerox Alto<br />
<a href="http://en.wikipedia.org/wiki/Xerox_Alto">http://en.wikipedia.org/wiki/Xerox_Alto</a>
</li>

<li>WIMP (computing)<br />
<a href="http://en.wikipedia.org/wiki/WIMP_(computing)">http://en.wikipedia.org/wiki/WIMP_(computing)</a>
</li>

<li>Graphical user interface<br />
<a href="http://en.wikipedia.org/wiki/GUI">http://en.wikipedia.org/wiki/GUI</a>
</li>

<li>Xerox Star<br />
<a href="http://en.wikipedia.org/wiki/Xerox_Star">http://en.wikipedia.org/wiki/Xerox_Star</a>
</li>

<li>The Xerox Star 8010 "Dandelion"<br />
<a href="http://www.digibarn.com/collections/systems/xerox-8010/index.html">http://www.digibarn.com/collections/systems/xerox-8010/index.html</a>
</li>

<li>Fibonacci number<br />
<a href="http://en.wikipedia.org/wiki/Fibonacci_number">http://en.wikipedia.org/wiki/Fibonacci_number</a>
</li>

<li>Squeak home page<br />
<a href="http://www.squeak.org/">http://www.squeak.org/</a>
</li>

<li>XO: The Children's Machine<br />
<a href="http://wiki.laptop.org/go/The_Children's_Machine">http://wiki.laptop.org/go/The_Children's_Machine</a>
</li>

<li>Squeak na Wikipedii EN<br />
<a href="http://en.wikipedia.org/wiki/Squeak">http://en.wikipedia.org/wiki/Squeak</a>
</li>

<li>Squeak na Wikipedii CZ<br />
<a href="http://cs.wikipedia.org/wiki/Squeak">http://cs.wikipedia.org/wiki/Squeak</a>
</li>

<li>Squeak by Example<br />
<a href="http://squeakbyexample.org/">http://squeakbyexample.org/</a>
</li>

<li>Squeak Land<br />
<a href="http://www.squeakland.org/">http://www.squeakland.org/</a>
</li>

<li>SqueakNotes<br />
<a href="http://squeak.zwiki.org/SqueakNotes">http://squeak.zwiki.org/SqueakNotes</a>
</li>

<li>Squeak FAQ<br />
<a href="http://wiki.squeak.org/squeak/471">http://wiki.squeak.org/squeak/471</a>
</li>

<li>Learning Squeak<br />
<a href="http://c2.com/cgi/wiki?LearningSqueak">http://c2.com/cgi/wiki?LearningSqueak</a>
</li>

<li>Lazarus (Software)<br />
<a href="http://en.wikipedia.org/wiki/Lazarus_%28software%29">http://en.wikipedia.org/wiki/Lazarus_%28software%29</a>
</li>

<li>FreePascal<br />
<a href="http://www.freepascal.org/">http://www.freepascal.org/</a>
</li>

<li>"Why I Love Python" slides<br />
<a href="http://www.mindviewinc.com/downloads/pub/eckel/LovePython.zip">http://www.mindviewinc.com/downloads/pub/eckel/LovePython.zip</a>
</li>

<li>"Why I love Python" (presentation)<br />
<a href="http://www.slideshare.net/didip/why-i-love-python">http://www.slideshare.net/didip/why-i-love-python</a>
</li>

<li>První jazyk: Python<br />
<a href="http://macek.sandbox.cz/texty/prvni-jazyk-python/">http://macek.sandbox.cz/texty/prvni-jazyk-python/</a>
</li>

<li>Programovací jazyk Python<br />
<a href="http://www.py.cz/FrontPage">http://www.py.cz/FrontPage</a>
</li>

<li>Python &ndash; Wikipedia CS<br />
<a href="http://cs.wikipedia.org/wiki/Python">http://cs.wikipedia.org/wiki/Python</a>
</li>

<li>IPython<br />
<a href="http://en.wikipedia.org/wiki/Ipython">http://en.wikipedia.org/wiki/Ipython</a>
</li>

<li>IPython: an interactive computing environment<br />
<a href="http://ipython.scipy.org/moin/">http://ipython.scipy.org/moin/</a>
</li>

<li>Category:Python<br />
<a href="http://rosettacode.org/wiki/Category:Python">http://rosettacode.org/wiki/Category:Python</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a></li>

<li>Language Poster (O'Reilly):<br />
<a href="http://www.oreilly.com/news/graphics/prog_lang_poster.pdf">http://www.oreilly.com/news/graphics/prog_lang_poster.pdf</a></li>

<li>Informace o Comenius Logu:<br />
<a href="http://www.comlogo.input.sk/index.html">http://www.comlogo.input.sk/index.html</a></li>

<li>Stránka nabízející stažení Comenius Loga:<br />
<a href="http://www.comlogo.input.sk/nastiahnutie.html">http://www.comlogo.input.sk/nastiahnutie.html</a></li>

<li>Seminární práce o Comenius Logu:<br />
<a href="http://nwit.pedf.cuni.cz/rotal9ap/logo/">http://nwit.pedf.cuni.cz/rotal9ap/logo/</a></li>

<li>Informace o LEGO/Logu:<br />
<a href="http://education.otago.ac.nz/nzlnet/Logo/legologo.html">http://education.otago.ac.nz/nzlnet/Logo/legologo.html</a></li>

<li>Informace o systému Elica:<br />
<a href="http://www.elica.net/site/index.html">http://www.elica.net/site/index.html</a></li>

<li>Informace o systému NetLogo:<br />
<a href="http://ccl.northwestern.edu/netlogo/">http://ccl.northwestern.edu/netlogo/</a></li>

<li>Stažení NetLoga:<br />
<a href="http://ccl.northwestern.edu/netlogo/download.shtml">http://ccl.northwestern.edu/netlogo/download.shtml</a></li>

<li>Uživatelský manuál NetLoga ve formátu PDF:<br />
<a href="http://ccl.northwestern.edu/netlogo/docs/NetLogo%20User%20Manual.pdf">http://ccl.northwestern.edu/netlogo/docs/NetLogo%20User%20Manual.pdf</a></li>

<li>NetLogo FAQ:<br />
<a href="http://ccl.northwestern.edu/netlogo/docs/faq.html">http://ccl.northwestern.edu/netlogo/docs/faq.html</a></li>

<li>Domácí stránka Daniela Azumy (autora implementace Turtle Tracks):<br />
<a href="http://alumnus.caltech.edu/~dazuma/home/">http://alumnus.caltech.edu/~dazuma/home/</a></li>

<li>Informace o <i>aUCBLogu</i>:<br />
<a href="http://www.physik.uni-augsburg.de/~micheler/">http://www.physik.uni-augsburg.de/~micheler/</a></li>

<li>Domácí stránka MSW Loga:<br />
<a href="http://www.softronix.com/logo.html">http://www.softronix.com/logo.html</a></li>

<li>Karel online<br />
<a href="http://karel.oldium.net/">http://karel.oldium.net/</a>
</li>

<li>EDU-SIG: Python in Education<br />
<a href="http://www.python.org/community/sigs/current/edu-sig/">http://www.python.org/community/sigs/current/edu-sig/</a>
</li>

<li>Guido van Robot<br />
<a href="http://en.wikipedia.org/wiki/Guido_van_Robot">http://en.wikipedia.org/wiki/Guido_van_Robot</a>
</li>

<li>The Guido van Robot Programming Language<br />
<a href="http://gvr.sourceforge.net/">http://gvr.sourceforge.net/</a>
</li>

<li>An Introduction to Programming with Karel J. Robot<br />
<a href="http://blog.thingoid.com/2003/10/karel-intro/">http://blog.thingoid.com/2003/10/karel-intro/</a>
</li>

<li>Teaching a young robot new tricks<br />
<a href="http://blog.thingoid.com/2003/11/karel-new-tricks/">http://blog.thingoid.com/2003/11/karel-new-tricks/</a>
</li>

<li>Karel and Company - More Robots<br />
<a href="http://blog.thingoid.com/2003/12/karel-and-company/">http://blog.thingoid.com/2003/12/karel-and-company/</a>
</li>

<li>Karel heads for the stars<br />
<a href="http://blog.thingoid.com/2004/03/karel-star/">http://blog.thingoid.com/2004/03/karel-star/</a>
</li>

<li>Karel programming language documentation<br />
<a href="http://mormegil.wz.cz/prog/karel/prog_doc.htm">http://mormegil.wz.cz/prog/karel/prog_doc.htm</a>
</li>

<li>Karel J. Robot<br />
<a href="http://www.mainlandregional.net/dklipp/Honors%20Computer%20Science%20Java.htm">http://www.mainlandregional.net/dklipp/Honors%20Computer%20Science%20Java.htm</a>
</li>

<li>Karel (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Karel_(programming_language)">http://en.wikipedia.org/wiki/Karel_(programming_language)</a>
</li>

<li>Richard E. Pattis<br />
<a href="http://en.wikipedia.org/wiki/Richard_E._Pattis">http://en.wikipedia.org/wiki/Richard_E._Pattis</a>
</li>

<li>XKarel home page<br />
<a href="http://xkarel.sourceforge.net/eng/">http://xkarel.sourceforge.net/eng/</a>
</li>

<li>XKarel - screenshoty oken<br />
<a href="http://xkarel.sourceforge.net/eng/program.php#Okna">http://xkarel.sourceforge.net/eng/program.php#Okna</a>
</li>

<li>Greenfoot<br />
<a href="http://www.greenfoot.org/about/whatis.html">http://www.greenfoot.org/about/whatis.html</a>
</li>

<li>Computer programming -- Educational programming languages<br />
<a href="http://www.kidslike.info/computer_programming_educational_programming_languages">http://www.kidslike.info/computer_programming_educational_programming_languages</a>
</li>

<li>Making Great Programmers: Why BASIC is Still Relevant<br />
<a href="http://kidbasic.sourceforge.net/en/why.html">http://kidbasic.sourceforge.net/en/why.html</a>
</li>

<li>Gambas Wiki<br />
<a href="http://en.wikibooks.org/wiki/Gambas">http://en.wikibooks.org/wiki/Gambas</a>
</li>

<li>Free tool offers 'easy' coding<br />
<a href="http://news.bbc.co.uk/2/hi/technology/6647011.stm">http://news.bbc.co.uk/2/hi/technology/6647011.stm</a>
</li>

<li>Základy želví grafiky<br />
<a href="http://www.root.cz/clanky/zaklady-zelvi-grafiky/">http://www.root.cz/clanky/zaklady-zelvi-grafiky/</a>
</li>

<li>Bill Kendrick's Web Turtle<br />
<a href="http://www.sonic.net/~nbs/webturtle/">http://www.sonic.net/~nbs/webturtle/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2011</small></p>
</body>
</html>

