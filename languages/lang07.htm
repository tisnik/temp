<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Základy programování ve Squeaku - dokončení popisu syntaxe a sémantiky jazyka</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Základy programování ve Squeaku - dokončení popisu syntaxe a sémantiky jazyka</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;sedmé části seriálu o programovacích jazycích vhodných pro výuku programování dokončíme popis syntaxe a sémantiky Squeaku. Řekneme si, jakým způsobem lze použít zprávy se selektory whileTrue, whileFalse, whileTrue: a whileFalse: pro náhradu cyklů s&nbsp;podmínkou vyhodnocovanou na začátku či konci každé iterace, dále si ukážeme použití lokálních proměnných a taktéž si vysvětlíme princip tvorby tříd a využívání metatříd.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Práce s&nbsp;lokálními proměnnými</a></p>
<p><a href="#k02">2. Cykly s&nbsp;podmínkou testovanou na začátku každé iterace</a></p>
<p><a href="#k03">3. Cykly s&nbsp;podmínkou testovanou na konci těla smyčky</a></p>
<p><a href="#k04">4. Třídy a objekty</a></p>
<p><a href="#k05">5. Zjišťování informací o objektech</a></p>
<p><a href="#k06">6. Metatřídy</a></p>
<p><a href="#k07">7. Instanční proměnné (atributy objektů) a metody</a></p>
<p><a href="#k08">8. Obsah následující části seriálu</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Práce s&nbsp;lokálními proměnnými</h2>

<p>V&nbsp;předchozích částech tohoto seriálu jsme si sice již řekli poměrně
značnou část informací nutných pro úspěšnou tvorbu aplikací ve <i>Squeaku</i>,
ovšem zbývá nám doplnit ještě několik poměrně důležitých údajů. Nejprve si
řekneme, jakým způsobem se ve <i>Squeaku</i> (přesněji řečeno ve
<i>Smalltalku</i> a jeho dialektech) pracuje s&nbsp;proměnnými. Ve
<i>Squeaku</i> lze vytvářet a používat několik typů proměnných. Jedná se o
takzvané instanční proměnné (tj.&nbsp;atributy objektů), třídní proměnné (ty
v&nbsp;některých dalších dialektech <i>Smalltalku</i> neexistují), sdílené
slovníky a především lokální proměnné, jejichž platnost je omezena na jednu
metodu popř.&nbsp;na programový blok. Pravidla pro pojmenovávání proměnných se
příliš neliší od jiných programovacích jazyků, snad s&nbsp;jedinou výjimkou
&ndash; v&nbsp;názvu proměnné se nesmí používat podtržítko, protože to má,
především z&nbsp;historických důvodů, poněkud odlišný význam. Původně se totiž
pro přiřazení hodnoty (objektu) k&nbsp;proměnné používal namísto dvojznaku
<strong>:=</strong> symbol šipky doleva &larr;, který se pro účely snadnějšího
zápisu i zobrazení na různých typech displejů a tiskáren nahrazoval právě
podtržítkem.</p>

<img src="http://i.iinfo.cz/images/630/squeak7-1.png" width="200" height="221" alt=" " />
<p><i>Obrázek 1: Konvence psaní identifikátorů CamelCase připomínala jejím
autorům (resp.&nbsp;autorům tohoto názvu) velbloudí hrby.</i></p>

<p>Ve <i>Squeaku</i> je dodržováno pravidlo, že názvy lokálních proměnných,
tj.&nbsp;proměnných platných pouze v&nbsp;rámci jedné metody nebo programového
bloku, začínají malým písmenem a každé další slovo v&nbsp;názvu proměnné začíná
písmenem velkým (jedná se o takzvanou <i>CamelCase</i> konvenci). Příklad
pojmenování lokálních proměnných: <strong>x</strong>, <strong>var1</strong>,
<strong>onlyLocalVariable</strong>. Proměnné globální začínají naopak písmenem
velkým. Vzhledem k&nbsp;tomu, že i třídy jsou ve <i>Squeaku</i> globálními
proměnnými (viz též další kapitoly), začínají i jejich jména velkým písmenem,
například <strong>Color</strong>, <strong>WarningDialog</strong> (jedná se o
stejnou konvenci, jaká je dodržována i v&nbsp;jiných programovacích jazycích).
Před svým použitím musí být lokální proměnné deklarovány, a to velmi
jednoduchým způsobem &ndash; postačuje zapsat identifikátor či identifikátory
všech lokálních proměnných mezi znaky | (<i>pipe</i>). Viz též následující
příklad:</p>

<pre>
| x y var1 localVariable |
x := true
y := 42
var1 := y * y
</pre>

<p>Lokální proměnné mohou být deklarovány a použity i v&nbsp;rámci programového
bloku. V&nbsp;tomto případě se jejich deklarace vkládá až <strong>za</strong>
seznam výrazů, opět mezi znaky <i>pipe</i> (to znamená, že první z&nbsp;těchto
znaků není součástí deklarace proměnných, ale jedná se o oddělovač názvu
parametrů od zbytku bloku), viz následující dvojice příkladů:</p>

<pre>
[ :par1 :par2 | | local | local := par1 * par2. local ] value: 6 value: 7
42
</pre>

<p>Blok s&nbsp;dvojicí parametrů a dvojicí lokálních proměnných:</p>

<pre>
[ :par1 :par2 | | var1 var2 | var1 := par1 - par2. var2 := par1 + par2. var1*var2 ] value: 12345 value: 6780
106430625
</pre>



<p><a name="k02"></a></p>
<h2>2. Cykly s&nbsp;podmínkou testovanou na začátku každé iterace</h2>

<p>Programové bloky, jimiž jsme se poměrně podrobně zabývali především
v&nbsp;předchozí části tohoto seriálu, umožňují díky zprávám se selektory
<strong>ifTrue:</strong>, <strong>ifFalse</strong> atd. vytváření částí
programového kódu, který se provede pouze při splnění nějaké podmínky. Jedná se
o ekvivalenty podmíněných příkazů a podmíněných výrazů známých z&nbsp;ostatních
programovacích jazyků, které jsou však ve <i>Squeaku</i> implementovány pomocí
&bdquo;obyčejného&ldquo; posílání zpráv, tj.&nbsp;nejedná se o žádný
syntaktický prvek jazyka. Podobným způsobem, tj.&nbsp;opět bez
&bdquo;magického&ldquo; přispění speciální syntaktické kategorie, lze vytvářet
i ekvivalenty programových smyček (cyklů), u nichž se podmínka testuje buď vždy
před provedením další iterace nebo naopak až po provedení každé iterace. Pro
tyto účely jsou ve <i>Squeaku</i> vytvořeny ve třídě
<strong>BlockContext</strong> (představující programový blok) metody
zajišťující příjem zpráv se selektory <strong>whileTrue</strong>,
<strong>whileFalse</strong>, <strong>whileTrue:</strong> a
<strong>whileFalse:</strong>. Povšimněte si, že první dva selektory se
používají pro unární zprávy, protože za svým jménem nemají uvedenou
dvojtečku.</p>

<p>Nejprve si popíšeme zprávy se selektory <strong>whileTrue:</strong> a
<strong>whileFalse:</strong>, pomocí nichž je možné vytvořit ekvivalent
programových smyček s&nbsp;testem prováděným před začátkem každé iterace.
Zprávy s&nbsp;těmito selektory je možné poslat instancím třídy
<strong>BlockContext</strong>, tj.&nbsp;programovým blokům (které jsou příjemci
zprávy). Parametrem těchto zpráv je opět programový blok, přičemž příkazy
v&nbsp;něm umístěné představují tělo cyklu. Blok představující příjemce zprávy
je před každou iterací spuštěn, přičemž jeho návratová hodnota je použita pro
rozhodnutí, zda se má tělo smyčky provést či nikoli (připomeňme si, že výsledek
posledního příkazu v&nbsp;bloku je současně i jeho návratovou hodnotou). Pomocí
zprávy se selektorem <strong>whileTrue:</strong> se vytváří ekvivalent klasické
universální smyčky <i>while</i>, zatímco zpráva se selektorem
<strong>whileFalse:</strong> se používá v&nbsp;těch případech, kdy se
vyhodnocuje opačná podmínka (ušetří se jedna negace). V&nbsp;následujícím
demonstračním příkladu je ukázáno, jakým způsobem je možné vytvořit cyklus,
který postupně vypisuje do okna <strong>Transcript</strong> druhé mocniny
základu 2. Povšimněte si, jakým způsobem jsou odděleny jednotlivé zprávy ve
druhém bloku pomocí znaku tečka:</p>

<pre>
Transcript clear

|n|
n := 1
Transcript show: n
Transcript cr

[ n &lt; 1000 ] whileTrue: [ Transcript show: n. Transcript cr. n := n*2 ]
</pre>

<a href="http://i.iinfo.cz/images/630/squeak7-2.png"><img src="http://i.iinfo.cz/images/630/squeak7-2-prev.png" width="347" height="270" alt=" " /></a>
<p><i>Obrázek 2: Programová smyčka se v&nbsp;předchozím demonstračním příkladu
zastaví po dosažení takové mocniny základu 2, která převyšuje hodnotu
1000.</i></p>

<p>Vzhledem k&nbsp;tomu, že tělo příjemce zprávy <strong>whileTrue:</strong> či
<strong>whileFalse:</strong> může obsahovat libovolné množství příkazů, lze
pomocí těchto zpráv implementovat, i když poněkud složitěji, i smyčky typu
<strong>do-while</strong> či <strong>repeat-until</strong>, tj.&nbsp;programové
smyčky s&nbsp;testem prováděným na konci každé iterace:</p>

<pre>
Transcript clear

|val|
val := 0
[ 
    val := val + 1
    Transcript show: val
    Transcript cr
    val &lt; 10
] whileTrue: [ ]
</pre>

<a href="http://i.iinfo.cz/images/630/squeak7-3.png"><img src="http://i.iinfo.cz/images/630/squeak7-3-prev.png" width="326" height="270" alt=" " /></a>
<p><i>Obrázek 3: Předchozí demonstrační příklad po svém spuštění ve
Squeaku. Povšimněte si, že se vytiskne i hodnota 10, která již splňuje podmínku
pro ukončení smyčky. Ovšem tato podmínka je testována až poté, co je daná
hodnota vypsána.</i></p>



<p><a name="k03"></a></p>
<h2>3. Cykly s&nbsp;podmínkou testovanou na konci těla smyčky</h2>

<p>V&nbsp;předešlém demonstračním příkladu, který byl uvedený v&nbsp;předchozí
kapitole, jsme si ukázali jednu variantu programové smyčky implementované
pomocí zprávy <strong>whileTrue:</strong>, u níž se podmínka pro další iteraci
testovala až po (alespoň jednom) provedení těla smyčky. Vzhledem k&nbsp;tomu,
že použití prázdného bloku ve zprávách se selektory <strong>whileTrue:</strong>
a <strong>whileFalse:</strong> je nadbytečné a zbytečně zhoršuje čitelnost
programového kódu, byla ve třídě <strong>BlockContext</strong> vytvořena ještě
jedna dvojice metod, které akceptují unární (bezparametrické) zprávy se
selektory. Jedná se o zprávy nazvané <strong>whileTrue</strong> a
<strong>whileFalse</strong>. Použití těchto zpráv je velmi jednoduché, o čemž
se ostatně můžete přesvědčit po shlédnutí následujících dvou demonstračních
příkladů. První z&nbsp;těchto demonstračních příkladů po svém spuštění vypíše
sekvenci celých čísel od jedničky do desíti:</p>

<pre>
Transcript clear

|val|
val := 0
[ 
    val := val + 1.
    Transcript show: val.
    Transcript cr.
    val &lt; 10
] whileTrue
</pre>

<a href="http://i.iinfo.cz/images/630/squeak7-4.png"><img src="http://i.iinfo.cz/images/630/squeak7-4-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 4: Výsledek běhu předchozího demonstračního příkladu ve
Squeaku.</i></p>

<p>Druhý příklad slouží pro vygenerování prvních několika prvků Fibonacciho
řady (jedná se o implementaci bez rekurze a bez použití pomocných polí):</p>

<pre>
Transcript clear.

|x y|
x := 1
y := 1
[ 
  Transcript show: x.
  Transcript cr.
  y := x + y.
  x := y - x.
  x &lt; 100
] whileFalse
</pre>

<a href="http://i.iinfo.cz/images/630/squeak7-5.png"><img src="http://i.iinfo.cz/images/630/squeak7-5-prev.png" width="326" height="270" alt=" " /></a>
<p><i>Obrázek 5: Fibonacciho řada vygenerovaná demonstračním příkladem.</i></p>

<p>Důležitá poznámka na závěr: výše uvedené metody implementující zprávy se
selektory <strong>whileTrue</strong>, <strong>whileFalse</strong>,
<strong>whileTrue:</strong> a <strong>whileFalse:</strong> jsou optimalizovány
na úrovni bajtkódu <i>Squeaku</i>. To mimo jiné znamená, že i když se
z&nbsp;hlediska zdrojového kódu stále jedná o posílání zpráv programovým
blokům, při běhu programu se ve skutečnosti žádná zpráva bloku nepošle &ndash;
namísto toho se spustí inline kód, což je samozřejmě rychlejší, zejména
v&nbsp;případech, kdy je počet opakování programové smyčky vysoký.</p>



<p><a name="k04"></a></p>
<h2>4. Třídy a objekty</h2>

<p>Již v&nbsp;úvodním článku o programovacím jazyce <i>Squeak</i> jsme si řekli
základní informace o jeho objektovém systému, který se v&nbsp;některých
ohledech odlišuje například od objektového systému Javy nebo C++. Připomeňme
si, že prakticky vše, s&nbsp;čím ve <i>Squeaku</i> programátor přichází do
styku, jsou objekty; dokonce i samotné třídy jsou objekty. Každý objekt může
obsahovat privátní atributy a (obecně neprivátní) metody. Objekty mezi sebou
komunikují výhradně pomocí mechanizmu nazvaného <i>posílání zpráv</i>, přičemž
zprávy mohou být tří typů (unární, binární a slovní), v&nbsp;tomto případě se
ovšem spíše jedná o syntaktickou záležitost vedoucí ke zpřehlednění posílání
unárních a binárních zpráv. Objekt buď dokáže na zprávu, která mu byla zaslána,
nějakým způsobem zareagovat, tj.&nbsp;zavolá nějakou svoji metodu, která zprávu
zpracuje, nebo může při přijetí zprávy, které nerozumí (a nebo nechce rozumět!)
vyvolat výjimku <strong>MessageNotUnderstood</strong>.</p>



<p><a name="k05"></a></p>
<h2>5. Zjišťování informací o objektech</h2>

<p>S&nbsp;objektovým systémem <i>Squeaku</i> úzce souvisí i jeho reflexivita,
která mj.&nbsp;umožňuje získávat za běhu některé důležité informace o
libovolném objektu. Každému objektu, který existuje ve virtuálním stroji
<i>Squeaku</i> je například možné poslat unární zprávu se selektorem
<strong>class</strong>, přičemž výsledkem této zprávy je reference na
&bdquo;svoji&ldquo; třídu, tj.&nbsp;na třídu, jejíž instancí daný objekt
vznikl. Můžeme si jednoduše vyzkoušet, že unární zprávu <strong>class</strong>
je skutečně možné poslat jakémukoli objektu, tj.&nbsp;například i programovému
bloku (který sám o sobě prozradí, že je instancí třídy
<strong>BlockContext</strong>), speciální proměnné <strong>nil</strong> či
<strong>false</strong> nebo řetězci:</p>

<pre>
42 class
SmallInteger
</pre>

<pre>
42 factorial class
LargePositiveInteger
</pre>

<pre>
[ 42 ] class
BlockContext
</pre>

<pre>
(1/2) class
Fraction
</pre>

<pre>
nil class
UndefinedObject
</pre>

<pre>
true class
True
</pre>

<pre>
false class
False
</pre>

<pre>
Object new class
Object
</pre>

<pre>
'hello' class
ByteString
</pre>

<p>Dotazování z&nbsp;jaké třídy nějaký objekt vznikl je sice v&nbsp;některých
případech užitečné (i když ne v&nbsp;takové míře, jako ve staticky typovaných
jazycích), většinou je však mnohem důležitější zjistit, zda objekt dokáže
zpracovat zprávu s&nbsp;určitým selektorem. I to je samozřejmě možné jednoduše
zajistit &ndash; postačuje objektu poslat zprávu se selektorem
<strong>respondsTo:</strong>. Parametrem této zprávy je symbol představující
selektor zprávy, o které chceme zjistit, zda ji objekt dokáže nebo naopak
nedokáže zpracovat. Výsledkem poslání zprávy <strong>respondsTo:</strong> je
samozřejmě hodnota <strong>true</strong> či <strong>false</strong>. Ukažme si
vše na několika demonstračních příkladech. Povšimněte si především toho, že se
skutečně jako parametr zprávy <strong>respondsTo</strong> posílá symbol, nikoli
selektor samotný. Taktéž si povšimněte, že součástí selektoru zprávy je i
dvojtečka na konci jeho názvu, viz rozdíl mezi výrazy &bdquo;true respondsTo:
#ifTrue&ldquo; a &bdquo;true respondsTo: #ifTrue:&ldquo;.</p>

<pre>
42 respondsTo: #+
true
</pre>

<pre>
42 respondsTo: #abs
true
</pre>

<pre>
42 respondsTo: #toString
false
</pre>

<pre>
42 respondsTo: #asString
true
</pre>

<pre>
true respondsTo: #asString
true
</pre>

<pre>
true respondsTo: #not
true
</pre>

<pre>
true respondsTo: #ifTrue
false
</pre>

<pre>
true respondsTo: #ifTrue:
true
</pre>

<pre>
[] respondsTo: #whileTrue
true
</pre>

<pre>
[] respondsTo: #whileTrue:
true
</pre>



<p><a name="k06"></a></p>
<h2>6. Metatřídy</h2>

<p>Objektový systém <i>Sqeaku</i> je zkonstruovaný takovým způsobem, že každý
objekt je instancí nějaké třídy (ostatně tak je tomu i v&nbsp;mnoha dalších
objektově orientovaných jazycích). Vzhledem k&nbsp;tomu, že jsme si
v&nbsp;předchozích kapitolách řekli, že i třídy jsou objekty, vyplývá
z&nbsp;toho, že třídy musí být instancí jiné třídy či jiných tříd. Ve
<i>Squeaku</i> a samozřejmě i ve <i>Smalltalku</i> tomu tak skutečně je. Třída,
jejímiž instancemi jsou jiné (běžné) třídy, se nazývá <i>metatřída</i>
(<i>metaclass</i>). Tuto třídu (pojmenovanou <strong>Metaclass</strong>) je
samozřejmě možné si prohlédnout v&nbsp;<strong>System Browseru</strong>,
konkrétně ji lze nalézt v&nbsp;sekci <strong>Kernel-Classes</strong>. Zajímavá
je zejména implementace metody <strong>new</strong>, z&nbsp;níž je patrné, že
v&nbsp;celém systému existuje pouze jedna jediná instance třídy
<strong>Metaclass</strong>, což dává smysl, protože je tímto
&bdquo;omezením&ldquo; zaručeno konzistentní chování celého prostředí
<i>Squeaku</i> (a navíc není nutné, aby existovalo více metatříd, když se
všechny mají chovat stejným způsobem):</p>

<pre>
new
    "The receiver can only have one instance. Create it or complain that one already exists."
    thisClass class ~~ self
        ifTrue: [^thisClass _ self basicNew]
        ifFalse: [self error: 'A Metaclass should only have one instance!']
</pre>



<p><a name="k07"></a></p>
<h2>7. Instanční proměnné (atributy objektů) a metody</h2>

<p>V&nbsp;této kapitole si stručně řekneme, jakým způsobem se zapisují metody a
instanční proměnné (atributy). Jako příklad nám poslouží třída
<strong>Random</strong>, kterou najdeme v&nbsp;<strong>System Browseru</strong>
ve skupině (kategorii) <strong>Kernel-Numbers</strong>. Objekty, které jsou
instancemi této třídy, obsahují instanční proměnné nazvané
<strong>seed</strong>, <strong>a</strong>, <strong>m</strong>,
<strong>q</strong> a <strong>r</strong>. Instanční proměnné nejsou ve
<i>Sqeaku</i> viditelné mimo danou instanci třídy (na rozdíl od jiných jazyků,
kde je možné viditelnost měnit), proto, pokud potřebujeme získat hodnotu
některé z&nbsp;instančních proměnných, musí pro ně být nadefinován příslušný
<i>getter</i>, tj.&nbsp;metoda pojmenovaná stejně jako daná instanční proměnná,
která explicitně vrátí její hodnotu. Naproti tomu pokud je zapotřebí nastavit
hodnotu instanční proměnné, je nutné nadefinovat <i>setter</i>, což je metoda
pojmenovaná stejně jako daná instanční proměnná, ovšem za jejím jménem je
uvedena dvojtečka. Tato konvence v&nbsp;pojmenování dává smysl &ndash; getter
je zavolán pomocí unární zprávy (bez parametrů), zatímco setter vždy
s&nbsp;jedním parametrem.</p>

<p>Pokud má metoda vracet nějakou hodnotu, musí její poslední příkaz začínat
symbolem ^ (stříška, popř.&nbsp;šipka nahoru). Tento příkaz se při zavolání
metody vyhodnotí a jeho výsledek se vrátí jako návratová hodnota celé metody.
Ukažme si nyní několik metod třídy <strong>Random</strong>:</p>

<p>Privátní <i>getter</i> pro instanční proměnnou <i>seed</i>:</p>

<pre>
seed
        ^ seed
</pre>

<p>Veřejný <i>setter</i>, kterým se nastavuje &bdquo;semínko&ldquo; generátoru
náhodných čísel (tj.&nbsp;privátní instanční proměnná nazvaná <i>seed</i>):</p>

<pre>
seed: anInteger 
        seed := anInteger
</pre>

<p>Veřejná metoda bez parametrů, která vrátí další hodnotu ze sekvence
pseudonáhodných čísel:</p>

<pre>
next
        "Answer a random Float in the interval [0 to 1)."
        ^ (seed _ self nextValue) / m
</pre>

<p>Veřejná metoda s&nbsp;více parametry vracející hodnotu. Povšimněte si, že
tato metoda má dvě lokální proměnné <strong>attacks</strong> a
<strong>defends</strong>:</p>

<pre>
check: nAttack against: nDefend difficulty: diff
        "Roll some dice, WoD-style."

        | attacks defends |
        attacks := self check: nAttack difficulty: diff.
        attacks &lt; 0 ifTrue: [^ attacks].
        defends := self check: nDefend difficulty: diff.
        ^ attacks - defends min: 0
</pre>

<p>S&nbsp;tvorbou nových tříd, popř.&nbsp;s&nbsp;úpravou tříd stávajících se
seznámíme příště při vysvětlování objektové hierarchie grafického uživatelského
rozhraní <i>Squeaku</i>.</p>



<p><a name="k08"></a></p>
<h2>8. Obsah následující části seriálu</h2>

<p>V&nbsp;následující části seriálu o programovacích jazycích vhodných pro
výuku programování se již nebudeme zabývat popisem syntaxe a sémantiky
<i>Squeaku</i>. Namísto toho se zaměříme na oblast jeho grafického
uživatelského rozhraní, možností tohoto rozhraní, měnitelnosti jednotlivých
komponent (widgetů) atd. Ostatně není bez zajímavosti, že koncepty grafického
uživatelského rozhraní (GUI) založeného na bitmapové grafice (což byla
v&nbsp;té době žhavá novinka) vznikaly právě ve <i>Smalltalku</i> jehož je
<i>Squeak</i> dialektem. Prvním komerčně dostupným počítačovým systémem
s&nbsp;plnohodnotným grafickým uživatelským rozhraním byl mikropočítač <i>Xerox
8010 Star Information System</i> z&nbsp;roku 1981, který předběhl jak
osmibitový mikropočítač <i>Apple Lisa</i> z&nbsp;roku 1983, tak i mnohem
slavnější <i>Macintosh</i> z&nbsp;roku 1984, jehož uživatelské rozhraní bylo
z&nbsp;velké míry založeno právě na výsledcích projektů naprogramovaných ve
<i>Smalltalku</i> na počítačových systémech firmy <i>Xerox</i>.</p>

<a href="http://i.iinfo.cz/images/460/squeak7b.png"><img src="http://i.iinfo.cz/images/460/squeak7b-prev.png" width="342" height="270" alt=" " /></a>
<p><i>Obrázek 6: Ukázka grafického uživatelského rozhraní počítačového systému
Xerox 8010 Star Information System.</i></p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>Stopařův průvodce jedním převážně neškodným programovacím jazykem<br />
<a href="http://www.squeak.cz/">http://www.squeak.cz/</a>
</li>

<li>CamelCase<br />
<a href="http://en.wikipedia.org/wiki/Camel_case">http://en.wikipedia.org/wiki/Camel_case</a>
</li>

<li>Smalltalk tutorial chapter 5 &ndash; Variables<br />
<a href="http://www.tutorials4u.com/smalltalk/smalltalk-tutorial-05.htm">http://www.tutorials4u.com/smalltalk/smalltalk-tutorial-05.htm</a>
</li>

<li>History around Pascal Casing and Camel Casing<br />
<a href="http://blogs.msdn.com/b/brada/archive/2004/02/03/67024.aspx">http://blogs.msdn.com/b/brada/archive/2004/02/03/67024.aspx</a>
</li>

<li>Xerox Alto<br />
<a href="http://en.wikipedia.org/wiki/Xerox_Alto">http://en.wikipedia.org/wiki/Xerox_Alto</a>
</li>

<li>WIMP (computing)<br />
<a href="http://en.wikipedia.org/wiki/WIMP_(computing)">http://en.wikipedia.org/wiki/WIMP_(computing)</a>
</li>

<li>Graphical user interface<br />
<a href="http://en.wikipedia.org/wiki/GUI">http://en.wikipedia.org/wiki/GUI</a>
</li>

<li>Xerox Star<br />
<a href="http://en.wikipedia.org/wiki/Xerox_Star">http://en.wikipedia.org/wiki/Xerox_Star</a>
</li>

<li>The Xerox Star 8010 "Dandelion"<br />
<a href="http://www.digibarn.com/collections/systems/xerox-8010/index.html">http://www.digibarn.com/collections/systems/xerox-8010/index.html</a>
</li>

<li>Fibonacci number<br />
<a href="http://en.wikipedia.org/wiki/Fibonacci_number">http://en.wikipedia.org/wiki/Fibonacci_number</a>
</li>

<li>Squeak home page<br />
<a href="http://www.squeak.org/">http://www.squeak.org/</a>
</li>

<li>XO: The Children's Machine<br />
<a href="http://wiki.laptop.org/go/The_Children's_Machine">http://wiki.laptop.org/go/The_Children's_Machine</a>
</li>

<li>Squeak na Wikipedii EN<br />
<a href="http://en.wikipedia.org/wiki/Squeak">http://en.wikipedia.org/wiki/Squeak</a>
</li>

<li>Squeak na Wikipedii CZ<br />
<a href="http://cs.wikipedia.org/wiki/Squeak">http://cs.wikipedia.org/wiki/Squeak</a>
</li>

<li>Squeak by Example<br />
<a href="http://squeakbyexample.org/">http://squeakbyexample.org/</a>
</li>

<li>Squeak Land<br />
<a href="http://www.squeakland.org/">http://www.squeakland.org/</a>
</li>

<li>SqueakNotes<br />
<a href="http://squeak.zwiki.org/SqueakNotes">http://squeak.zwiki.org/SqueakNotes</a>
</li>

<li>Squeak FAQ<br />
<a href="http://wiki.squeak.org/squeak/471">http://wiki.squeak.org/squeak/471</a>
</li>

<li>Learning Squeak<br />
<a href="http://c2.com/cgi/wiki?LearningSqueak">http://c2.com/cgi/wiki?LearningSqueak</a>
</li>

<li>Scratch home page<br />
<a href="http://scratch.mit.edu/">http://scratch.mit.edu/</a>
</li>

<li>Scratch (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Scratch_(programming_language)">http://en.wikipedia.org/wiki/Scratch_(programming_language)</a>
</li>

<li>Lazarus (Software)<br />
<a href="http://en.wikipedia.org/wiki/Lazarus_%28software%29">http://en.wikipedia.org/wiki/Lazarus_%28software%29</a>
</li>

<li>FreePascal<br />
<a href="http://www.freepascal.org/">http://www.freepascal.org/</a>
</li>

<li>"Why I Love Python" slides<br />
<a href="http://www.mindviewinc.com/downloads/pub/eckel/LovePython.zip">http://www.mindviewinc.com/downloads/pub/eckel/LovePython.zip</a>
</li>

<li>"Why I love Python" (presentation)<br />
<a href="http://www.slideshare.net/didip/why-i-love-python">http://www.slideshare.net/didip/why-i-love-python</a>
</li>

<li>První jazyk: Python<br />
<a href="http://macek.sandbox.cz/texty/prvni-jazyk-python/">http://macek.sandbox.cz/texty/prvni-jazyk-python/</a>
</li>

<li>Programovací jazyk Python<br />
<a href="http://www.py.cz/FrontPage">http://www.py.cz/FrontPage</a>
</li>

<li>Python &ndash; Wikipedia CS<br />
<a href="http://cs.wikipedia.org/wiki/Python">http://cs.wikipedia.org/wiki/Python</a>
</li>

<li>IPython<br />
<a href="http://en.wikipedia.org/wiki/Ipython">http://en.wikipedia.org/wiki/Ipython</a>
</li>

<li>IPython: an interactive computing environment<br />
<a href="http://ipython.scipy.org/moin/">http://ipython.scipy.org/moin/</a>
</li>

<li>Category:Python<br />
<a href="http://rosettacode.org/wiki/Category:Python">http://rosettacode.org/wiki/Category:Python</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a></li>

<li>Language Poster (O'Reilly):<br />
<a href="http://www.oreilly.com/news/graphics/prog_lang_poster.pdf">http://www.oreilly.com/news/graphics/prog_lang_poster.pdf</a></li>

<li>Informace o Comenius Logu:<br />
<a href="http://www.comlogo.input.sk/index.html">http://www.comlogo.input.sk/index.html</a></li>

<li>Stránka nabízející stažení Comenius Loga:<br />
<a href="http://www.comlogo.input.sk/nastiahnutie.html">http://www.comlogo.input.sk/nastiahnutie.html</a></li>

<li>Seminární práce o Comenius Logu:<br />
<a href="http://nwit.pedf.cuni.cz/rotal9ap/logo/">http://nwit.pedf.cuni.cz/rotal9ap/logo/</a></li>

<li>Informace o LEGO/Logu:<br />
<a href="http://education.otago.ac.nz/nzlnet/Logo/legologo.html">http://education.otago.ac.nz/nzlnet/Logo/legologo.html</a></li>

<li>Informace o systému Elica:<br />
<a href="http://www.elica.net/site/index.html">http://www.elica.net/site/index.html</a></li>

<li>Informace o systému NetLogo:<br />
<a href="http://ccl.northwestern.edu/netlogo/">http://ccl.northwestern.edu/netlogo/</a></li>

<li>Stažení NetLoga:<br />
<a href="http://ccl.northwestern.edu/netlogo/download.shtml">http://ccl.northwestern.edu/netlogo/download.shtml</a></li>

<li>Uživatelský manuál NetLoga ve formátu PDF:<br />
<a href="http://ccl.northwestern.edu/netlogo/docs/NetLogo%20User%20Manual.pdf">http://ccl.northwestern.edu/netlogo/docs/NetLogo%20User%20Manual.pdf</a></li>

<li>NetLogo FAQ:<br />
<a href="http://ccl.northwestern.edu/netlogo/docs/faq.html">http://ccl.northwestern.edu/netlogo/docs/faq.html</a></li>

<li>Domácí stránka Daniela Azumy (autora implementace Turtle Tracks):<br />
<a href="http://alumnus.caltech.edu/~dazuma/home/">http://alumnus.caltech.edu/~dazuma/home/</a></li>

<li>Informace o <i>aUCBLogu</i>:<br />
<a href="http://www.physik.uni-augsburg.de/~micheler/">http://www.physik.uni-augsburg.de/~micheler/</a></li>

<li>Domácí stránka MSW Loga:<br />
<a href="http://www.softronix.com/logo.html">http://www.softronix.com/logo.html</a></li>

<li>Karel online<br />
<a href="http://karel.oldium.net/">http://karel.oldium.net/</a>
</li>

<li>EDU-SIG: Python in Education<br />
<a href="http://www.python.org/community/sigs/current/edu-sig/">http://www.python.org/community/sigs/current/edu-sig/</a>
</li>

<li>Guido van Robot<br />
<a href="http://en.wikipedia.org/wiki/Guido_van_Robot">http://en.wikipedia.org/wiki/Guido_van_Robot</a>
</li>

<li>The Guido van Robot Programming Language<br />
<a href="http://gvr.sourceforge.net/">http://gvr.sourceforge.net/</a>
</li>

<li>An Introduction to Programming with Karel J. Robot<br />
<a href="http://blog.thingoid.com/2003/10/karel-intro/">http://blog.thingoid.com/2003/10/karel-intro/</a>
</li>

<li>Teaching a young robot new tricks<br />
<a href="http://blog.thingoid.com/2003/11/karel-new-tricks/">http://blog.thingoid.com/2003/11/karel-new-tricks/</a>
</li>

<li>Karel and Company - More Robots<br />
<a href="http://blog.thingoid.com/2003/12/karel-and-company/">http://blog.thingoid.com/2003/12/karel-and-company/</a>
</li>

<li>Karel heads for the stars<br />
<a href="http://blog.thingoid.com/2004/03/karel-star/">http://blog.thingoid.com/2004/03/karel-star/</a>
</li>

<li>Karel programming language documentation<br />
<a href="http://mormegil.wz.cz/prog/karel/prog_doc.htm">http://mormegil.wz.cz/prog/karel/prog_doc.htm</a>
</li>

<li>Karel J. Robot<br />
<a href="http://www.mainlandregional.net/dklipp/Honors%20Computer%20Science%20Java.htm">http://www.mainlandregional.net/dklipp/Honors%20Computer%20Science%20Java.htm</a>
</li>

<li>Karel (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Karel_(programming_language)">http://en.wikipedia.org/wiki/Karel_(programming_language)</a>
</li>

<li>Richard E. Pattis<br />
<a href="http://en.wikipedia.org/wiki/Richard_E._Pattis">http://en.wikipedia.org/wiki/Richard_E._Pattis</a>
</li>

<li>XKarel home page<br />
<a href="http://xkarel.sourceforge.net/eng/">http://xkarel.sourceforge.net/eng/</a>
</li>

<li>XKarel - screenshoty oken<br />
<a href="http://xkarel.sourceforge.net/eng/program.php#Okna">http://xkarel.sourceforge.net/eng/program.php#Okna</a>
</li>

<li>Greenfoot<br />
<a href="http://www.greenfoot.org/about/whatis.html">http://www.greenfoot.org/about/whatis.html</a>
</li>

<li>Computer programming -- Educational programming languages<br />
<a href="http://www.kidslike.info/computer_programming_educational_programming_languages">http://www.kidslike.info/computer_programming_educational_programming_languages</a>
</li>

<li>Making Great Programmers: Why BASIC is Still Relevant<br />
<a href="http://kidbasic.sourceforge.net/en/why.html">http://kidbasic.sourceforge.net/en/why.html</a>
</li>

<li>Gambas Wiki<br />
<a href="http://en.wikibooks.org/wiki/Gambas">http://en.wikibooks.org/wiki/Gambas</a>
</li>

<li>Free tool offers 'easy' coding<br />
<a href="http://news.bbc.co.uk/2/hi/technology/6647011.stm">http://news.bbc.co.uk/2/hi/technology/6647011.stm</a>
</li>

<li>Scratch Lowers Resistance to Programming<br />
<a href="http://www.wired.com/gadgetlab/2009/03/scratch-lowers/">http://www.wired.com/gadgetlab/2009/03/scratch-lowers/</a>
</li>

<li>Základy želví grafiky<br />
<a href="http://www.root.cz/clanky/zaklady-zelvi-grafiky/">http://www.root.cz/clanky/zaklady-zelvi-grafiky/</a>
</li>

<li>Bill Kendrick's Web Turtle<br />
<a href="http://www.sonic.net/~nbs/webturtle/">http://www.sonic.net/~nbs/webturtle/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2010</small></p>
</body>
</html>

