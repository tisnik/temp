<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory XV</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Forth a zásobníkové procesory XV</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h2>Úvodník</h2>

<p>V předchozí části seriálu o programovacím jazyce Forth a zásobníkových
procesorech jsme si popsali základní vlastnosti těchto procesorů a způsob
jejich rozdělení podle několika vlastností. Dnes si podrobněji popíšeme velmi
zajímavý zásobníkový procesor, který se jmenuje F21.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Zevrubná specifikace mikroprocesorů M21 CPU a F21</a><br />
<a href="#k02">2. Zásobníky a jejich vlastnosti</a><br />
<a href="#k03">3. Sada registrů</a><br />
<a href="#k04">4. Šířka sběrnic a zpracovávaného slova</a><br />
<a href="#k05">5. Funkční bloky</a><br />
<a href="#k06">6. Instrukční soubor</a><br />
<a href="#k07">7. Skokové instrukce</a><br />
<a href="#k08">8. Obsah dalšího pokračování</a><br />
</p>



<p><a name="k01" id="k01"></a></p>
<h2>1. Zevrubná specifikace mikroprocesorů M21 CPU a F21</h2>

<p><em>San Mateo, CA (November, 1994) - Offete Enterprises announces successful
production of the high performance, multiprocessor chip MuP21. MuP21 has a
21-bit CPU core, a memory coprocessor, and a video coprocessor, implemented
with 1.2 micron CMOS process. It is targeted for applications in video
displays, CAD design, communication, video games, and embedded
systems.</em></p>

<p><em>M21 CPU</em> (a jeho varianta <em>MuP 21)</em> je, jak již název
napovídá, mikroprocesor, tj. elektronická součástka, která v sobě mimo jiné
obsahuje aritmeticko-logickou jednotku ALU, sadu registrů a řadič sběrnice.
Tento mikroprocesor je založen na virtuálním stroji jazyka Forth. <em>Virtuální
stroj</em> je v tomto kontextu značně vzletný pojem, protože se jedná pouze o
implementaci základních instrukcí jazyka Forth, žádné další podpůrné prostředky
nejsou k dispozici.</p>

<p>Procesor <em>M21 CPU</em> vznikl jako rozšířená varianta mikroprocesoru
<em>MuP21</em> - byl rozšířen zásobník operandů (viz dále), je implementováno
více instrukcí, včetně nepřímého adresování a podmíněných skoků; a v neposlední
řadě jsou přímo na mikroprocesoru vytvořeny další podpůrné koprocesory: řadič
videa, obvod pro sériový přenos dat a obvod pro paralelní přenos dat.
Pokračovatelem tohoto procesoru je čip <em>F21</em> který dále obsahuje D/A a
A/D převodník.</p>

<p>Původní mikroprocesor <em>MuP21</em> byl vytvořen samotným Chuckem Moorem,
vynálezcem Forthu. Chuck Moore pro návrh tohoto čipu použil svůj vlastní CAD
systém pro poloautomatizovaný návrh VLSI obvodů - <em>OKAD</em>. Tento systém
byl později použit i pro vývoj dalších mikroprocesorů založených na
zásobnících.</p>

<p>Ekvivalentní počet tranzistorů, ze kterých je procesor i se všemi
koprocesory sestrojen, je roven pouze patnácti tisícům, což je o několik řádů
méně, než počet tranzistorů v procesorech řady x86. Tak malý počet tranzistorů
byl dosažen pouze díky promyšlené koncepci tohoto procesoru - bitové šířce a
instrukčnímu souboru.</p>

<p>V dalších kapitolách si popíšeme některé zajímavé části tohoto
mikroprocesoru a způsob jeho použití.</p>



<p><a name="k02" id="k02"></a></p>
<h2>2. Zásobníky a jejich vlastnosti</h2>

<p>Jak jsem již napsal v předchozím odstavci, je procesor F21 chápán jako
virtuální stroj jazyka Forth, což mimo jiné znamená, že veškeré datové přenosy
a výpočty se provádí přes zásobníky. Tento procesor obsahuje dva zásobníky:</p>

<p>První zásobník je určen pro přenos dat a provádění aritmetických výpočtů -
jedná se tedy o datový zásobník - <em>Data Stack</em>. Tento zásobník má
kapacitu 18ti položek a je celý umístěn přímo na mikroprocesoru, čímž nahrazuje
sadu registrů, které se používají u klasických mikroprocesorů typu CISC a
RISC.</p>

<p>Druhý zásobník je určen především pro úschovu návratových adres z volaných
funkcí - jedná se tedy o zásobník <em>Return Stack</em>. Kromě toho lze na
tento zásobník ukládat data, ovšem pouze v rámci jedné funkce. Typicky se zde
ukládají také počitadla smyček. Tento zásobník má kapacitu 17ti položek a je,
podobně jako datový zásobník, umístěn přímo na mikroprocesoru.</p>

<p>Proč však mají oba zásobníky tak divné kapacity? Osmnáct resp. sedmnáct
položek jsou ve výpočetní technice poměrně netypické. Ve skutečnosti má datový
zásobník kapacitu "pouze" 16 položek (to už je zajímavější číslo) a zbývající
dvě položky jsou umístěny přímo v aritmeticko-logické jednotce, protože u
zásobníkového procesoru je dopředu zřejmé, že se data budou vždy brát ze
zásobníku. Tyto dvě položky se označují písmeny <strong>T</strong> (<em>Top of
Stack</em>) a <strong>S</strong> (<em>Second Item on Stack</em>).</p>

<p>U zásobníku návratových adres je situace podobná - nejvrchnější položka je
umístěna ve speciálním registru nazývaném <strong>R</strong> (<em>Return</em>)
a zbývající kapacita zásobníku je rovna opět šestnácti položkám.</p>



<p><a name="k03" id="k03"></a></p>
<h2>3. Sada registrů</h2>

<p>Vzhledem k tomu, že tento mikroprocesor je založen na dvojici zásobníků, má
programátor k dispozici poměrně omezenou sadu registrů. První tři de-facto
registry už známe - jsou to položky na vrcholu obou zásobníků, které jsou
implicitně použity k vykonávání většiny aritmetických, logických i řídicích
instrukcí. Mezi další registry patří adresový registr a programový čítač, který
obsahuje adresu právě vykonávané instrukce a může být programátorem měněn pouze
skokovými instrukcemi.</p>

<p>Všechny registry si můžeme přehledně vypsat:</p>

<ul>

<li><strong>A</strong> - adresový registr, který je možné použít při práci s
pamětí (pole atd.), ale také například při blokových přesunech dat. Existuje
totiž instrukce pro čtení či zápis z adresy a současně inkrementace tohoto
registru.</li>

<li><strong>PC</strong> - programový čítač, který obsahuje adresu právě
prováděné instrukce. Obsah tohoto registru je možné měnit pomocí skokových a
návratových instrukcí, v opačném případě se jeho hodnota pouze
inkrementuje.</li>

<li><strong>T</strong> - vrchol datového zásobníku. Je použit při všech
aritmetických a logických operacích a také při přenosech dat. K dispozici jsou
také operace pro přesun dat mezi tímto registrem a vrcholem zásobníku
návratových adres.</li>

<li><strong>S</strong> - druhá položka na datovém zásobníku, která je použita u
těch operací, které vyžadují dva operandy.</li>

<li><strong>R</strong> - vrchol zásobníku návratových adres. Je ho také možné
použít pro odkládání mezivýsledků a/nebo čítače smyček.</li>

</ul>



<p><a name="k04" id="k04"></a></p>
<h2>4. Šířka sběrnic a zpracovávaného slova</h2>

<p>Mezi nejzajímavější aspekty popisovaného mikroprocesoru patří zajisté
použitá šířka sběrnice. Ta má totiž šířku 20 bitů (ano 20). Je to zejména z
toho důvodu, že 16 bitů je pro zakódování některé skupiny instrukcí příliš malá
hodnota a naopak 32 bitů je spíše "těžká váha" pro mikroprocesor, který je
určený především pro vestavěná zařízení.</p>

<p>Do jednoho dvacetibitového slova je možné uložit čtyři instrukce, protože
počet bitů na jednu instrukci je roven pouze pěti! Maximální počet instrukcí
tak dosahuje na první pohled směšné hodnoty 32, instrukcí je však ve
skutečnosti ještě méně. To je, zejména v porovnání s procesory typu CISC,
například x86 opravdu malé množství, ale na druhou stranu se tato vlastnost
může stát velmi výhodnou, především při pečlivém výběru instrukční sady.</p>

<p>Vždy čtyři pětibitové instrukce jsou spojeny tak, že vytvoří jedno
dvacetibitové slovo. To znamená, že vlastní procesor může pracovat na
čtyřnásobné frekvenci oproti přístupové době použitých pamětí, protože v každém
paměťovém taktu je umožněn přístup ke všem dvaceti bitům. Zde je vidět velká
výhoda malého instrukčního souboru, který vede k redukci počtu bitů na jednu
instrukci, protože procesor může pracovat i na poměrně velkých frekvencích bez
použití drahých cache pamětí.</p>

<p>Vylepšená verze procesoru <em>MuP21</em>, jež se jmenuje <em>F21</em>,
dosahuje teoretického výkonu 500 MIPS, protože doba vykonání jedné instrukce
trvá 2 nanosekundy. Tento výkon však při použití pamětí ROM klesá na 333 MIPS,
s SRAM paměťmi na 200 MIPS a s DRAM paměťmi bez cache dokonce na "pouhých" 100
MIPS. V praxi je však možné použít novou generaci DRAM pamětí, které nabízí
kratší přístupovou dobu, takže se výkon celého systému může i několikanásobně
zvýšit.</p>

<p>Při provádění aritmetických operací se výpočty aplikují v ALU, která má
bitovou šířku 21 bitů. Poslední bit slouží jako <em>CARRY</em>, tj. obsahuje
jedničku v případě, že došlo k přetečení kapacity registrů. Toho lze využít
například při implementaci vícebitové aritmetiky. I adresy jsou reprezentovány
21 bity, skokové instrukce však mohou měnit pouze nižší bity adresy.</p>



<p><a name="k05" id="k05"></a></p>
<h2>5. Funkční bloky</h2>

<p>Pro zajištění velké rychlosti celého procesoru se v ALU používá velmi
jednoduchá sčítačka, která nemusí v jednom taktu zajistit součet všech bitů
dvaceti bitového slova. Z tohoto důvodu musí být dlouhé instrukce sčítání, při
kterých dochází k přenosům, kódovány spolu s instrukcemi <tt>NOP</tt>, při
jejichž zpracování procesor vlastně počká na výsledek sčítání.</p>

<p>Pokud je instrukce sčítání uložena v instrukčním slovu hned v prvním slotu,
nemusí se čekací instrukce zadávat, stačí, když v dalších slotech nebude
přítomna další sčítací operace.</p>



<p><a name="k06" id="k06"></a></p>
<h2>6. Instrukční soubor</h2>

<p>Jak jsem již psal v předchozích odstavcích, je každá instrukce kódována
pětibitovým slovem, takže maximální počet instrukcí je roven 32. Ne všechny
kódy jsou však obsazeny, proto je instrukcí ve skutečnosti méně než 32. V
dalším textu si jednotlivé instrukce podrobněji popíšeme. Je to pouze na
ukázku, že velmi záleží na pečlivém výběru opravdu důležitých instrukcí.</p>

<p><strong><tt>JMP</tt> - unconditional jump</strong><br />

tato instrukce slouží k provedení nepodmíněného skoku. Pokud je ve
dvacetibitovém slově tato instrukce uvedena jako první, je zbylých 14 bitů
použito pro adresu (patnáctý bit je vždy nulový). Pokud je uvedena na druhém
místě, je pro adresu použito 10 bitů. Poslední možností je uvedení instrukce na
třetím místě. V tomto případě na adresu zbývá pouze 5 bitů. Adresa nikdy
nepřekročí jedno slovo - je to z důvodu zjednodušení návrhu celého procesoru a
také se tím zjednoduší časování. Je na překladači, jakým způsobem provede
optimalizaci skoku. Většinou je totiž pro skok dostačujících pouze 10 bitů,
čímž mohou být do jednoho slova zakódovány dvě instrukce. Více o skokových
instrukcích povím v další podkapitole.</p>

<p><strong><tt>T=0</tt> - branch if TOP of stack =0 (DUP IF)</strong><br />

jedná se také o skokovou instrukci, ale na rozdíl od instrukce <tt>JMP</tt> zde
jde o skok podmíněný. Pokud je na vrcholu zásobníku (tzn. ve skutečnosti v
registru T) uložena nulová hodnota, skok se provede. V opačném případě skok
proveden nebude a program bude pokračovat dále. Stejně jako u instrukce
<tt>JMP</tt>, jsou i zde možné tři typy skoků (5 bitů, 10 bitů, 14 bitů) podle
toho, ve které části instrukčního slova se instrukce nachází.</p>

<p><strong><tt>C=0</tt> - branch if CARRY bit not set</strong><br />

jedná se o poslední typ skokové instrukce, která provádí skok v programu pouze
v případě, že není nastaven bit CARRY. Tento bit je automaticky nastavován
aritmetickými instrukcemi a je pomocí něho možné implementovat například
víceslovní aritmetiku, nebo testovat výskok z počítaných smyček (zde je ve
většině případů výhodnější použití instrukce <tt>T0</tt>).</p>

<p><strong><tt>CALL</tt> - call subroutine</strong><br />

ve Forthu je velmi časté, že se volají podprogramy/funkce, které se zde
označují jako slova. Proto také tento procesor obsahuje optimalizovanou
instrukci pro zavolání podprogramu. Tato instrukce existuje, stejně jako
instrukce skokové, ve třech verzích, které se liší počtem bitů, jimiž je
vyjádřena adresa skoku. Vzhledem k tomu, že je instrukce skoku optimalizovaná,
může se skok provádět i v době, kdy se dokončuje výpočet předchozí instrukce,
protože je zřejmé, že se výsledek bude ukládat na zásobník operandů.</p>

<p><strong><tt>RET</tt> - return from subroutine</strong><br />

Po zavolání této instrukce se provede výběr adresy ze zásobníku návratových
adres a běh programu bude pokračovat od právě vybrané adresy - provede se
návrat z podprogramu. Jedná se tedy o opak instrukce <tt>CALL</tt>. I návrat z
podprogramu je optimalizovaný, takže se v jeho průběhu mohou dokončit
probíhající výpočty.</p>

<p><strong><tt>#</tt> - literal</strong><br />

jedna z nejjednodušších instrukcí, pomocí které se na zásobník operandů vloží
konstanta, která následuje ihned za instrukčním slovem. Konstanta má bitovou
šířku stejnou jako zásobník, tj. 20 bitů.</p>

<p><strong><tt>@A</tt> - fetch</strong><br />

jedná se o instrukci určenou pro práci s pamětí. Z adresy, kterou obsahuje
registr <strong>A</strong> se přečte hodnota, která se uloží na zásobník
operandů.</p>

<p><strong><tt>@A+</tt></strong><br />

také se jedná o instrukci určenou pro práci s pamětí. Z adresy, kterou obsahuje
registr <strong>A</strong> se přečte hodnota, která se uloží na zásobník.
Současně je zvýšena hodnota v registru <strong>A</strong>. S pomocí této
instrukce lze velmi efektivně realizovat blokový přenos dat nebo průchod polem
se čtením hodnot.</p>

<p><strong><tt>@R+</tt></strong><br />

poslední instrukce pro čtení obsahu paměti. Z adresy, kterou obsahuje registr
<strong>R</strong> se přečte hodnota, která se uloží na zásobník. Současně se
inkrementuje hodnota uložená v registru <strong>R</strong>. Při provádění
smyček je v registru <strong>R</strong> uložen čítač, proto lze tuto instrukci
použít také pro blokový přenos dat.</p>

<p><strong><tt>!A</tt> - store</strong><br />

instrukce pro zápis do paměti. Na adresu, kterou obsahuje registr
<strong>A</strong> se zapíše hodnota z vrcholu zásobníku operandů.</p>

<p><strong><tt>!A+</tt></strong><br />

tato instrukce provádí stejnou činnost jako instrukce předchozí s tím rozdílem,
že po zápisu hodnoty do paměti se inkrementuje hodnota uložená v registru
<strong>A</strong>.</p>

<p><strong><tt>!R+</tt></strong><br />

i tato instrukce provádí zápis do paměti, tentokrát však na adresu, jež je
uložena v registru <strong>R</strong>. Po provedení zápisu se zvýší hodnota v
registru <strong>R</strong> o jednotku.</p>

<p><strong><tt>COM</tt></strong><br />

jedná se o unární operaci, která vypočte doplněk hodnoty uložené na vrcholu
zásobníku operandů - v registru <strong>T</strong>. Nová hodnota nahradí na
zásobníku hodnotu původní.</p>

<p><strong><tt>AND</tt></strong><br />

binární operace, která přečte dvě hodnoty uložené na vrcholu zásobníku
<strong>T</strong> a ve druhé pozici <strong>S</strong> a následně vypočte
jejich bitový součin. Výsledek přepíše hodnotu uloženou na vrcholu
zásobníku.</p>

<p><strong><tt>-OR</tt></strong><br />

binární operace, která taktéž přečte dvě hodnoty uložené na vrcholu zásobníku
<strong>T</strong> a ve druhé pozici <strong>S</strong> a provede s nimi
bitovou nonekvivalenci. Výsledek přepíše hodnotu uloženou na vrcholu
zásobníku.</p>

<p><strong><tt>+</tt></strong><br />

binární operace, která sečte hodnoty uložené na vrcholu zásobníku
<strong>T</strong> a na druhé pozici <strong>S</strong>. Výsledek přepíše
hodnotu uloženou na vrcholu zásobníku.</p>

<p><strong><tt>2*</tt></strong><br />

unární operace, při které se provádí bitový posun doleva s hodnotou uloženou na
vrcholu zásobníku. Bitovým posunem doleva se vlastně provádí vynásobení hodnoty
na vrcholu zásobníku dvojkou.</p>

<p><strong><tt>2/</tt></strong><br />

unární operace, při které se provádí bitový posun doprava s hodnotou uloženou
na vrcholu zásobníku. Touto bitovou operací se provádí dělení hodnoty
dvěma.</p>

<p><strong><tt>+*</tt></strong><br />

podobná operace, jakou je operace <strong>+</strong> s tím rozdílem, že se
součet provede pouze v případě, že nejnižší bit hodnoty na vrcholu zásobníku má
hodnotu 1.</p>

<p><strong><tt>A@</tt></strong><br />

při této operaci se hodnota uložená v registru <strong>A</strong> zkopíruje na
vrchol zásobníku. Jedná se o jedinou operaci, při které lze zjistit obsah
registru <strong>A</strong>.</p>

<p><strong><tt>A!</tt></strong><br />

tato operace slouží k přesunu hodnoty uložené na vrcholu zásobníku do registru
<strong>A</strong>. Jedná se o jedinou operaci, kterou lze přímo změnit obsah
registru <strong>A</strong>, nepřímá změna je možná pomocí operací
<strong><tt>@A+</tt></strong> a <strong><tt>!A+</tt></strong>.</p>

<p><strong><tt>DUP</tt></strong><br />

tato operace jednoduše zduplikuje hodnotu na vrcholu zásobníku. Instrukce tedy
dělá to samé, co slovo <strong>DUP</strong> ve Forthu.</p>

<p><strong><tt>DROP</tt></strong><br />

tato operace odstraní hodnotu z vrcholu zásobníku. Instrukce odpovídá slovu
<strong>DROP</strong> ve Forthu.</p>

<p><strong><tt>OVER</tt></strong><br />

podobně jako slovo <strong>OVER</strong> ve Forthu, i tato instrukce přečte
hodnotu z druhé položky zásobníku a vloží ji na vrchol zásobníku.</p>

<p><strong><tt>PUSH</tt></strong><br />

tato instrukce vezme hodnotu z vrcholu zásobníku operandů a vloží ji na vrchol
zásobníku návratových adres. Jde o jediný způsob přímé manipulace se zásobníkem
adres.</p>

<p><strong><tt>POP</tt></strong><br />

tato instrukce vezme hodnotu z vrcholu zásobníku adres a vloží ji na vrchol
zásobníku operandů. Pomocí instrukcí <strong>PUSH</strong> a
<strong>POP</strong> lze ukládat mezivýsledky výpočtů na zásobník návratových
adres, čímž se minimalizují pomalé přístupy do paměti.</p>

<p><strong><tt>NOP</tt></strong><br />

tato instrukce neprovádí žádnou operaci. Její význam tkví především v tom, že
může sloužit jako výplň v instrukčním slově (které obsahuje čtyři instrukce).
Používá se například v případě, že je zapotřebí zakódovat "dlouhou" instrukci
skoku, která zabere celé instrukční slovo.</p>



<p><a name="k07" id="k07"></a></p>
<h2>7. Skokové instrukce</h2>

<p>Nejprve si schematicky ukažme instrukční slovo, ve kterém mohou být uloženy
až čtyři instrukce, každá s délkou pět bitů:</p>

<pre>
bit  20 ...15  ...10  ....5  ....0
        slot0  slot1  slot2  slot3
</pre>

<p>Vidíme, že celé instrukční slovo je rozděleno do čtyř slotů, v každém slotu
může být uložena jedna krátká instrukce. Jak se však kódují skokové instrukce,
u kterých je zapotřebí specifikovat i adresu skoku? Jednoduše, tato instrukce
zabere více slotů, jejichž počet je implicitně určen pozicí instrukce v
instrukčním slově.</p>

<p>Zakódování instrukce skoku, při kterém je v instrukčním slově uloženo deset
bitů adresy, vypadá následovně:</p>

<pre>
bit  20 ...15  ...10  ....5  ....0
        slot0   jump  aaaaa  aaaaa
                      v   v   v 
adresa p pppp pppp ppaa aaaa aaaa (p je z registru PC)
</pre>

<p>Vidíme, že pouze nejnižších deset bitů adresy je ovlivněno instrukcí skoku,
dalších jedenáct bitů zůstává nezměněno.</p>

<p>Dalším typem skokové instrukce je skok, kdy je zadáno čtrnáct bitů
adresy:</p>

<pre>
bit  20 ...15  ...10  ....5  ....0
         jump  0aaaa  aaaaa  aaaaa
                      v   v   v 
adresa p pppp ppaa aaaa aaaa aaaa (p je z registru PC)
</pre>

<p>Při použití tohoto typu skoku zůstává neovlivněno pouze nejvyšších sedm
bitů. Tuto instrukci lze modifikovat tak, že se nultý patnáctý bit nastaví na
jedničku - v tom případě se jedná o skok mezi adresou v rozsahu paměti DRAM na
adresu, jež leží v rozsahu paměti SRAM. Z tohoto důvodu se takto modifikovaná
instrukce nazývá <em>home page jump</em>, protože ve SRAM je uložen počáteční
bootovací program.</p>

<p>Jakým způsobem je však možné zajistit skok na libovolnou adresu? Taková
instrukce není přímo povolena, protože by ve slotu instrukčního slova nezůstaly
žádné volné bity na zakódování skokové instrukce. Řešení je však velmi
jednoduché: adresa se uloží na zásobník návratových adres a provede se
instrukce <strong>ret</strong>, která ze zásobníku adresu vyzvedne a provede
skok.</p>

<p>Jak je z předchozích řádků patrné, má procesor MuP21, M21 a F21 opravdu
velmi zajímavý návrh a na mnoha jeho vlastnostech je patrný typický Moorův
minimalistický přístup k řešení problémů.</p>



<p><a name="k08" id="k08"></a></p>
<h2>8. Obsah dalšího pokračování</h2>

<p>V dalším pokračování tohoto seriálu si popíšeme poněkud odlišné zásobníkové
procesory - WISC CPU/16 a MISC M17.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small></p>
</body>
</html>

