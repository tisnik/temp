<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory XX</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Forth a zásobníkové procesory XX</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h2>Úvodník</h2>

<p>V posledním pokračování seriálu o programovacím jazyku Forth a zásobníkových
procesorech si shrneme základní přednosti a nedostatky Forthu vzhledem k jiným
programovacím jazykům. Také si uvedeme příklady použití Forthu ve větších
aplikacích a odkazy na další webové stránky, které se zabývají podobnou
tématikou, nebo z kterých je možné získat některou z volně dostupných verzí
Forthu.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Shrnutí výhod a nevýhod Forthu v porovnání s jinými programovacími jazyky</a><br />
&nbsp; &nbsp; <a href="#k011">1.1 Postfixová notace</a><br />
&nbsp; &nbsp; <a href="#k012">1.2 Testování napsaného kódu</a><br />
&nbsp; &nbsp; <a href="#k013">1.3 Vytváření a testování velkých projektů</a><br />
&nbsp; &nbsp; <a href="#k014">1.4 Nekompatibilita jednotlivých implementací Forthu</a><br />
&nbsp; &nbsp; <a href="#k015">1.5 Assembler</a><br />
&nbsp; &nbsp; <a href="#k016">1.6 Interpreter Forthu</a><br />
<a href="#k02">2. Současné použití jazyků založených na Forthu</a><br />
<a href="#k03">3. Příklady použití Forthu v minulosti</a><br />
&nbsp; &nbsp; <a href="#k031">3.1 Správa databáze pro řízení telefonních transakcí</a><br />
&nbsp; &nbsp; <a href="#k032">3.2 Systém pro zpracování obrazu</a><br />
<a href="#k04">4. Odkazy na české zdroje informací o Forthu</a><br />
<a href="#k05">5. Odkazy na světové zdroje informací o Forthu</a><br />
</p>



<p><a name="k01" id="k01"></a></p>
<h2>1. Shrnutí výhod a nevýhod Forthu v porovnání s jinými programovacími jazyky</h2>

<p>V první kapitole si shrneme základní přednosti a nedostatky programovacího
jazyka Forth, zejména se budu snažit porovnat Forth s ostatními programovacími
jazyky.</p>



<p><a name="k011" id="k011"></a></p>
<h3>1.1 Postfixová notace</h3>

<p>O postfixové notaci, kterou Forth intenzivně používá, jsme se zmiňovali
prakticky ve všech předchozích dílech tohoto seriálu. Je to totiž
charakteristická část Forthu, bez jejíhož použití by se jednalo o zcela jiný
programovací jazyk. Postfixová notace (RPN) je ve Forthu používána velmi
důsledně, tj. jak při zápisu matematických a logických výrazů, tak i při zápisu
řídicích příkazů. V tomto ohledu je Forth (a jazyky na něm postavené)
jedinečný, ostatní programovací jazyky buď používají infixovou notaci (C, C++,
Pascal, Delphi, Perl, ...) nebo notaci prefixovou (Lisp, Scheme, Guile). Z
problémově orientovaných jazyků používá postfixovou notaci například jazyk pro
popis stránek <a
href="http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory-12/#k02">PostScript</a>
a od něj odvozený formát PDF.</p>



<p><a name="k012" id="k012"></a></p>
<h3>1.2 Testování napsaného kódu</h3>

<p>Velmi zajímavé je, že po několikadenním používání Forthu se programátor
automaticky naučí jednoduše a rychle testovat napsaná slova (funkce). Je to z
toho důvodu, že testování slov je mnohem jednodušší, než v jiných
programovacích jazycích. Zpravidla stačí zapsat vstupní hodnoty na zásobník,
zavolat testované slovo a přečíst si ze zásobníku výsledek. To vše je
samozřejmě interaktivní bez nutnosti nějakého překladu nebo přepínání do
debuggeru. Podobně jednoduché ladění a testování nabízí pouze několik
programovacích jazyků, například Lisp a dnes již částečně obstarožní Basic
(plus skriptovací jazyky zakomponované do větších aplikací).</p>

<p>Vzhledem k tomu, že práce se zásobníkem je u delších kódů slov poněkud
obtížná (programátor si musí pamatovat, co je kde uloženo, zásobník je
dynamický), je programátor nucen k zápisu jednoduchých slov o délce několika
instrukcí. Tyto slova se pak jednoduše testují a vzhledem k jejich krátkosti se
v nich nemíchají "jablka s hruškami" (což je případ mnoha funkcí napsaných v
programovacích jazycích C a Pascal).</p>

<p>Typická slova vytvořená ve Forthu jsou zapsána na cca dvou až pěti řádcích,
zatímco v jiných jazycích je to několikrát více - zejména je to zaviněno
obtížným předáváním parametrů, vytvářením lokálních proměnných a mnohdy také
snahou o efektivnost, protože volání funkcí je v těchto jazycích, na rozdíl od
Forthu, poměrně zdlouhavé, jelikož se musí vytvářet celý zásobníkový rám
(<em>stack frame</em>).</p>



<p><a name="k013" id="k013"></a></p>
<h3>1.3 Vytváření a testování velkých projektů</h3>

<p>Forth není, a také nikdy nebyl, určen pro práci s velkými projekty, ve
skutečnosti pouze málo opravdu velkých projektů bylo ve Forthu vytvořeno a
zdárně dokončeno (tj. předáno zákazníkovi a skutečně použito). Veškeré výhody
Forthu se projevují zejména v menších aplikacích, v aplikacích větších je
kladen důraz především na škálovatelnost, tvorbu dokumentace, OOP přístup,
spolupráci více vývojářů atd. Proto se pro větší projekty používají jiné
programovací jazyky (dříve se používal C++ a v dnešní době především Java) nebo
kombinace více jazyků (obecně vícevrstvá architektura).</p>



<p><a name="k014" id="k014"></a></p>
<h3>1.4 Nekompatibilita jednotlivých implementací Forthu</h3>

<p>Jazyk Forth se vyvíjel velmi bouřlivě a byl implementován na mnoha různých
(a mnohdy obskurních) procesorech a mikroprocesorech. Nepřekvapí tedy, že
existuje velké množství implementací, které mezi sebou nejsou vzájemně
kompatibilní. Nejhorší je, že se liší význam některých základních slov z
Forthovského slovníku, například slova pro vytváření smyček.</p>

<p>Vzájemná nekompatibilita knihoven je také problémem, se kterým se však
potýká valná většina programovacích jazyků, nevyjímaje moderní jazyky jako je
Java nebo C++.</p>

<p>Z těchto důvodů vznikl i standard Forthu spolu se sadou knihoven.
Implementace tohoto standardu se nazývají ANS Forth. I když ne všechny
implementace Forthu splňují tento standard (jmenujme například oblíbený
<strong>4th</strong>), bývají v dokumentaci rozdíly oproti ANS Forthu
zmíněny.</p>

<p>ANS Forth byl vytvořen tak, aby se v něm neopakovaly některé "historické
omyly", které by jazyk do budoucna zbytečně zatěžovaly (v C patří mezi takové
zkameněliny například způsob zápisu funkcí podle K&amp;R nebo implicitní
návratové hodnoty funkcí). Proto jsou také některé konstrukce známé ze starších
Forthů v ANS Forthu nepoužitelné. Obecně je však možné říci, že jednotlivé
implementace Forthu mezi sebou nejsou kompatibilní a při přenosu programů mezi
různými dialekty se musí provést mnohdy netriviální úpravy.</p>



<p><a name="k015" id="k015"></a></p>
<h3>1.5 Assembler</h3>

<p>Většina systémů založených na jazyku Forth obsahuje i výkonný makro
assembler. Tento assembler je určený buď přímo pro platformu, na které Forth
běží, nebo i pro jinou platformu - potom vlastně Forth pracuje jako
crosscompiler pro překlad aplikací na jiný typ procesoru či výpočetního
systému.</p>

<p>Kód v assembleru je možné zapisovat pomocí Forthovského slova
<strong>CODE</strong>, přičemž je možné vzájemně míchat Forthovský kód s
assemblerovským kódem. Syntax
Forthovského assembleru je upravena tak, aby se co nejvíce umožnil přechod na
jiný typ procesoru. Tento stav je tedy podobný situacím, ve kterých se používá
například GNU assembler, ovšem s tím rozdílem, že Forthovský assembler je
čitelnější (GNU assembler je pouze back-end pro GNU C a další překladače, proto
je de facto write-only s minimem kontroly chyb).</p>

<p>Forthovský assembler dokonce podporoval strukturované programování, protože
nabízel makra jako <strong>BEGIN</strong>, <strong>UNTIL</strong> a
<strong>IF-ELSE-THEN</strong>, podobně jako samotný Forth. To znamená, že se ve
zdrojovém kódu eliminovaly prakticky veškeré skokové instrukce, které velmi
znepřehledňují assemblerovské zdrojové texty. Ve výsledném strojovém kódu se
samozřejmě pro implementaci strukturovaných konstrukcí podmíněné a nepodmíněné
skoky používaly.</p>

<p>Registry byly označovány čísly, což je pro alespoň teoretickou
přenositelnost výhodnější, než označení písmeny či skupinami písmen. Jedinou
výjimkou je ukazatel na vrchol zásobníku, který je, díky své důležitosti při
práci se zásobníkem, označen písmenem S. Vlastní zápis instrukcí se většinou
řídil podle originálního assembleru, který byl dodáván přímo výrobcem
procesoru.</p>

<p>Obecně je možné říci, že podpora práce s assemblerem je ve Forthu jedna z
nejlépe propracovaných, ovšem je nutné říci, že i v některých jiných
programovacích jazycích a jejich implementacích se dá s assemblerem pracovat na
velmi dobré úrovni, včetně míchání obou kódů, předávání parametrů atd.
(jmenujme například Watcom C, Borland Pascal apod.).</p>



<p><a name="k016" id="k016"></a></p>
<h3>1.6 Interpreter Forthu</h3>

<p>Forth je původně vytvořen jako interpretovaný jazyk. Běh programu, napsaného
v jazyce Forth a předkompilovaného do zásobníkového kódu, je řízen poměrně
krátkou rutinou o velikosti jednotek, maximálně desítek strojových instrukcí.
Tato rutina postupně načítá a interpretuje kódy Forthových slov, které jsou
většinou uloženy ve formě vázaného seznamu s ukazateli na operandy.</p>

<p>Interpret je velmi rychlý, zejména v porovnání s klasickými interpretovanými
jazyky, jako je Lisp, Prolog nebo Basic. Rychlost je dokonce vyšší než u
Javovských interpreterů, a to z toho důvodu, že Forthový mezikód (tj. kódy
slov) jsou jednodušší, než kódy Javovského bytekódu a při interpretaci tohoto
kódu se nepoužívají žádné testy na přetečení apod. - vše je v rukou
programátora, stejně jako v programovacím jazyku C.</p>

<p>Podobně jako bytekód Javy a Smalltalku, je i bytekód Forthu velmi úsporný,
protože aritmetické a logické instrukce pracují se zásobníkem - není proto
potřeba ukládat adresy operandů. Typicky bývá každé slovo uloženo v jednom či
dvou bytech, výjimkou je samozřejmě zápis literálu (tj. konstanty, jež má být
uložena na zásobník operandů), který podle bitové šířky čísel zabírá 2, 4 nebo
i 8 bytů (poslední údaj je platný pro datové typy <em>double</em> a <em>long
int</em>, samozřejmě za předpokladu, že je daná implementace Forthu
podporuje).</p>



<p><a name="k02" id="k02"></a></p>
<h2>2. Současné použití jazyků založených na Forthu</h2>

<p>Jednou z velmi zdařilých implementací jazyka založeného na Forthu, je systém
<em>OpenBoot</em> resp. <em>Open Firmware</em>, který vyvinula firma Sun
(nejenom) pro svoji platformu Sparc.</p>

<p>Kromě jednotlivých implementací Forthu také vznikají poněkud odlišné jazyky,
které si z Forthu vybírají pouze některé jeho vlastnosti. Jednou z význačných
vlastností Forthu je způsob předávání a vracení parametrů funkcím.</p>

<p>Všechny parametry se předávají na zásobníku, což není dnes nic neobvyklého
(snad kromě Fortranu, který se také stále v určitých oblastech používá). Také
výsledky funkcí se však ve Forthu předávají přes zásobník a nikoli v registru.
To znamená, že funkce může ve Forthu jednoduše vracet několik hodnot bez
složité manipulace s ukazateli a referencemi. Forthovský způsob práce s
parametry a návratovými hodnotami funkcí je tak velmi elegantní a nezdržuje
vytváření programu (na rozdíl od ostatních jazyků, např. C, kde se musí chvíli
přemýšlet a kontrolovat správné naplnění). Způsob práce se zásobníkem přímo
převzal a poněkud rozšířil funkcionální programovací jazyk <em>Joy</em>.</p>

<p>Prakticky nejrozšířenějším jazykem založeným na Forthu je však
<em>PostScript</em>. S jistou mírou nepřesnosti je možné říct, že prakticky
každé PC a každý Macintosh obsahuje na svém disku alespoň jeden program napsaný
v <em>PostScriptu</em>, tj. tiskovou stranu či strany uložené v souboru s
koncovkou <tt>.ps</tt>, <tt>.eps</tt> či <tt>.pdf</tt>. Každá postscriptová
tiskárna obsahuje interpretr <em>PostScriptu</em>, stejně tak jako některé
aplikace - GhostScript, Adobe Illustrator, Corel Draw, částečně i aplikace
Office apod.</p>



<p><a name="k03" id="k03"></a></p>
<h2>3. Příklady použití Forthu v minulosti</h2>

<p>V této kapitole budou popsány některé významné aplikace, které byly založeny
na Forthu.</p>



<p><a name="k031" id="k031"></a></p>
<h3>3.1 Správa databáze pro řízení telefonních transakcí</h3>

<p>Jednou z prvních velkých zakázek, jejíž programové zabezpečení bylo
vytvořeno ve Forthu, byl systém pro řízení telefonních transakcí. Tento systém,
který si objednala firma Cybek Corporation, podporoval až 32 terminálů, jež
umožňovaly přístup k databázi s 300 MB uložených transakcí. V pozdější době
došlo k rozšíření systému, který podporoval 64 terminálů a databázi o velikosti
600 MB.</p>

<p>Zatímco při zadání projektu bylo požadováno, aby systém zvládl 40000
transakcí za den, ve skutečnosti bylo dosaženo rychlosti 100000 transakcí
denně, tedy 2,5 krát tolik.</p>

<p>Zajímavé bylo, že se nepoužíval žádný operační systém, veškerá funkcionalita
vstupně-výstupních operací byla napsána ve Forthu. To bylo umožněno zejména
díky tomu, že ve Forthu je velmi snadné pracovat s blokovým souborovým
systémem, což je při práci s databází mnohem výhodnější než dnes převážně
používaný "streamový" přístup (samozřejmě za předpokladu, že řádky v tabulce
mají stejnou velikost).</p>

<p>Tento systém je prý dodnes prodávaný jednou z divizí firmy McDonnell
Douglas, ale osobně o jeho dalším vývoji žádné přesnější informace nemám.</p>



<p><a name="k032" id="k032"></a></p>
<h3>3.2 Systém pro zpracování obrazu</h3>

<p>Systém pro zpracování obrazu vytvořila firma <em>FORTH Inc.</em> (kterou
spoluzakládal Chuck Moore) pro NASA, přesněji pro Greenwich Observatory in
England. Systém však byl po dokončení použit na více místech. Při vývoji tohoto
systému byl vytvořen nový interpreter Forthu, který používal speciální operace
pro celočíselné dělení a také dělení ve formátu pevné řádové tečky (fixed
point).</p>

<p>Jedná se pravděpodobně o jeden z nejúspěšnějších projektů, které kdy byly ve
Forthu vytvořeny (a o kterých se obecně ví, otázkou samozřejmě je, kolik
projektů je neveřejných). Ani ne tak komerčním úspěchem ale faktem, že se při
práci na projektu vyjasnily některé postupy používané v objektově orientovaném
programování.</p>

<p>Při zpracování rastrového obrazu je používána sada standardních, neměnných
operací, jako je filtrace pomocí konvolučního filtru, aplikace FFT transformace
apod. Proto je vytvoření systému pro práci s obrazy v leččemž podobné
databázím, kde obrazy odpovídají datům a operace s obrazy operacím s databází.
Při práci s obrázky se opět využíval blokově orientovaný souborový systém.</p>

<p>Při vytváření aplikací pro zpracování rastrového obrazu zde firma FORTH Inc.
použila některé postupy, které se později staly základem objektově
orientovaného programování. Jedná se zejména o:</p>

<ol>

<li><em>zapouzdření</em> - rastrový obrázek je považován za objekt s mnoha
parametry a metodami, které na něj lze aplikovat.</li>

<li><em>dědičnost</em> - je možné vytvořit nový obraz na základě obrazu
stávajícího, přičemž si nový obraz od svého předka převezme všechny vlastnosti,
tj. rozlišení, barevnou hloubku, formát pixelů atd.</li>

<li><em>polymorfismus</em> - operace (metody) mohou pracovat nad obrazem s
rozdílnými parametry, například FFT lze použít jak na černobílý obraz, tak na
obraz ve formátu TrueColor.</li>

</ol>

<p>Moore, který systém z velké části vytvářel, nevěděl nic o akademických
výsledcích z oblasti OOP, takže vlastně principy OOP spoluobjevil samostatně -
takto ostatně na více místech světa víceméně současně vznikly i další objevy a
postupy.</p>



<p><a name="k04" id="k04"></a></p>
<h2>4. Odkazy na české zdroje informací o Forthu</h2>

<p>V této podkapitole budou uvedeny odkazy na další zdroje o zásobníkových
procesorech a programovacím jazyku Forth, které lze najít na Internetu. Zaměřím
se především na informační zdroje dostupné v českém jazyce.</p>

<ul>

<li><a
href="http://www.hnilica.cz/book/forth/index.html">http://www.hnilica.cz/book/forth/index.html</a>
- rozsáhlá site Radka Hnilici o Forthu, která má přehledný a strukturovaný
formát stránek, avšak některé kapitoly nejsou prozatím dokončeny.</li>

<li><a href="http://web.quick.cz/kopato/forth/obsah.html">Forth a imperativní
paradigma</a> - stránky Petra Erbena a Petra Koňaříka o Forthu.</li>

</ul>



<p><a name="k05" id="k05"></a></p>
<h2>5. Odkazy na světové zdroje informací o Forthu</h2>

<p>V této kapitole budou uvedeny odkazy na zahraniční zdroje informací o Forhu
a zásobníkových procesorech:</p>

<ul>

<li><a href="http://www.forth.org/fig.html">http://www.forth.org/fig.html</a> -
stránka mezinárodní neziskové organizace nazvané <em>FIG - Forth Interest
Group</em>. Toto sdružení se zaměřuje na rozšiřování informací o programovacím
jazyku Forth, popisu programovacích nástrojů, volných implementací Forthu na
různých platformách a v neposlední řadě i na šíření referenčních materiálů o
ANS-Forthu.</li>

<li><a href="http://www.fig-uk.org/">http://www.fig-uk.org/</a> - stránka
sdružení <em>FIG UK - The United Kingdom Forth Interest Group</em>. Jedná se o
jedno z prvních sdružení FIG, které se zaměřuje na vydávání časopisu
<em>ForthWrite</em> (6 čísel za rok) a také údržbě a rozšiřování rozsáhlé
knihovny zaměřené na Forth. Členové tohoto sdružení pochází zejména z Velké
Británie, někteří členové jsou však i z USA, Ruska, Japonska apod.</li>

<li><a href="http://www.colorforth.com/">http://www.colorforth.com/</a> -
domácí stránka Chucka Moorea, vynálezce Forthu. Na této stránce jsou k
dispozici některé technické detaily o zásobníkových procesorech a zejména popis
systému <em>ColorForth</em> spolu s jeho zdrojovými texty napsanými v
assembleru.</li>

<li><a href="http://zforth.com/">http://zforth.com/</a> - takzvaný <em>The
Forth Programming Webring</em>, počátek řetězce stránek věnovaných Forthu a
příbuzným tématům. Zajímavé je, že tento server je vytvořen pomocí systému
<em>zHTTP</em>, který je napsaný v dialektu programovacího jazyka Forth
nazvaného <em>zForth</em>.</li>

<li><a href="http://www.forth.com/">http://www.forth.com/</a> - úvodní stránka
firmy <em>Forth Inc.</em>, která vytváří komerční verze programovacího jazyka
Forth spolu s propracovaným vývojovým prostředím, na stránce lze nalézt i odkaz
na známý <em>SwiftForth</em>. Spoluzakladatelem této firmy je Chuck Moore - viz
také <a
href="http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory-2">druhý
díl tohoto seriálu</a>.</li>

<li><a
href="http://playground.sun.com/1275/home.html">http://playground.sun.com/1275/home.html</a>
- stránka, na které je popsán Open Firmware, tj. technologie pro systémově
nezávislou tvorbu ovladačů. Bližší informace o této velmi zajímavé technologii
byly popsány v <a
href="http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory-12">dvanácté
části tohoto seriálu</a>.</li>

<li><a
href="http://www.hp.com/calculators/articles/rpn.html">http://www.hp.com/calculators/articles/rpn.html</a>
- stránka firmy HP, na které je velmi podrobně popsána obrácená polská notace
(RPN - Reverse Polish Notation), která je použitá jak u kalkulátorů této firmy,
tak i při zápisu výrazů v programovacím jazyku Forth.</li>

<li><a
href="http://en.wikipedia.org/wiki/Forth_programming_language">http://en.wikipedia.org/wiki/Forth_programming_language</a>
- stránka Wikipedie o programovacím jazyku Forth.</li>

<li><a
href="http://en.wikipedia.org/wiki/Chuck_Moore">http://en.wikipedia.org/wiki/Chuck_Moore</a>
- stránka Wikipedie o Chucku Moorovi, vynálezci Forthu.</li>

<li><a
href="http://home.earthlink.net/~mrob/pub/lang_srom.html">http://home.earthlink.net/~mrob/pub/lang_srom.html</a>
- porovnání programovacích jazyků podle názoru programátorů.</li>

<li><a
href="http://www.jwdt.com/~paysan/gforth.html">http://www.jwdt.com/~paysan/gforth.html</a>
- GForth (GNU Forth)</li>

<li><a
href="http://www.forth.com/resources/evolution/index.html">http://www.forth.com/resources/evolution/index.html</a>
- The Evolution of Forth - velmi dobře zpracovaná historie Forthu.</li>

</ul>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small></p>
</body>
</html>

