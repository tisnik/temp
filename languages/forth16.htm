<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory XVI</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Forth a zásobníkové procesory XVI</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h2>Úvodník</h2>

<p>V dnešním pokračování seriálu o programovacím jazyce Forth a zásobníkových
procesorech si popíšeme dva zajímavé šestnáctibitové zásobníkové procesory:
WISC CPU/16 a MISC M17. Před popisem těchto procesorů si však ještě shrneme
základní vlastnosti šestnáctibitových zásobníkových procesorů, zejména jejich
klady a zápory v porovnání se zásobníkovými procesory jiných bitových
šířek.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Zásobníkové procesory kategorie MS0 a ML0</a><br />
<a href="#k02">2. Vlastnosti šestnáctibitových zásobníkových procesorů</a><br />
<a href="#k03">3. Zásobníkový procesor WISC CPU/16</a><br />
<a href="#k04">4. Instrukce a mikroinstrukce procesoru WISC CPU/16</a><br />
<a href="#k05">5. Zásobníkový procesor MISC M17</a><br />
<a href="#k06">6. Architektura procesoru MISC M17</a><br />
<a href="#k07">7. Základní vlastnosti procesoru MISC M17</a><br />
<a href="#k08">8. Instrukční soubor procesoru MISC M17</a><br />
<a href="#k09">9. Obsah dalšího pokračování</a><br />
</p>



<p><a name="k01" id="k01"></a></p>
<h2>1. Zásobníkové procesory kategorie MS0 a ML0</h2>

<p><em>Multiple stack, 0-operand machines have two inherent advantages over
other machines: 0-operand addressing leads to a small instruction size, and
multiple stacks allow concurrent subroutine calls and data manipulations. These
features and others lead to small programs, low system complexity, and high
system performance. The main difference between MS0 and ML0 machines is that
MS0 machines give up some performance in order to reduce the CPU cost by
minimizing the resources used for the stack buffers.</em></p>

<p>Všechny zásobníkové procesory, které budou v tomto i dalším pokračování
seriálu popisovány, spadají buď do kategorie MS0 nebo ML0. Jak již víme z <a
href="http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory-14">předcházejících
dílů</a>, vyznačují se tyto kategorie procesorů použitím dvou samostatných
zásobníků a použitím instrukcí, ve kterých nejsou (většinou) adresovány
operandy, protože je předem zřejmé, že se hodnoty pro provádění operací
získávají pouze z jednoho zásobníku, na který se posléze ukládá i výsledek
operace. Víme také, že první zásobník je určen pro předávání parametrů a
provádění výpočtů a druhý zásobník pro úschovu návratových adres volaných
funkcí. Dvouzásobníkové procesory jsou často navrhovány tak, aby na nich bylo
možné efektivně provozovat aplikace napsané v programovacím jazyce Forth.
Instrukce jsou u této kategorie procesorů poměrně krátké, neboť v nich chybí
část nutná pro adresování operandů.</p>

<p>Rozdíl mezi kategoriemi MS0 a ML0 spočívá ve velikosti zásobníku resp.
zásobníků. Pokud je použit procesor kategorie MS0, znamená to, že je větší část
zásobníku či dokonce celý zásobník uložen ve speciálních registrech
mikroprocesoru. Výhodou je rychlejší přístup ke všem položkám zásobníku, může
však dojít k jeho přetečení, zejména v případě použití špatně navržených
programů. Přetečení buď způsobí chybu, nebo je nutné celý zásobník uložit resp.
načíst z operační paměti počítače, což samozřejmě znamená značné zdržení
výpočtů.</p>

<p>U kategorie ML0 je naproti tomu skoro celý zásobník vytvořen v operační
paměti počítače, kromě minimálně dvou položek na vrcholu zásobníku, které jsou
prakticky vždy mapovány do speciálních registrů procesoru. Tento přístup k
vytváření zásobníku patří mezi nejjednodušší a přitom prakticky neomezuje
velikost zásobníků. Nevýhodou je pomalejší přístup k jednotlivým položkám,
protože rychlost pamětí tvoří v současné době úzké hrdlo velké části
mikroprocesorových systémů.</p>



<p><a name="k02" id="k02"></a></p>
<h2>2. Vlastnosti šestnáctibitových zásobníkových procesorů</h2>

<p><em>The primary motivating factor for making Forth machines 16 bits wide is
that the Forth programming model has traditionally been 16 bits. This is
consistent with average Forth program sizes of less than 32K bytes and the
implementation of most of the first Forth compilers on microprocessors with 64K
byte address ranges.</em></p>

<p>Oba dále popisované zásobníkové procesory jsou šestnáctibitové, tj. bitová
šířka zásobníku operandů i zásobníku návratových adres je rovna šestnácti
bitům, stejně jako bitová šířka aritmeticko-logické jednotky těchto procesorů.
Šestnáctibitové zásobníkové procesory jsou velmi populární, a to i v dnešní
době, kdy se na osobních počítačích a pracovních stanicích objevují procesory
šedesátičtyřbitové. Otázkou je, proč tato popularita šestnáctibitových
zásobníkových procesorů přetrvala i do dnešních dnů.</p>

<p>Nejprve začněme u jednodušších procesorů. Čtyřbitové a osmibitové procesory
se pro provozování většiny aplikací nehodí, protože čtyři resp. osm bitů nabízí
poměrně malý rozsah hodnot, které lze do registrů a zásobníků uložit. Ve své
podstatě tyto procesory ve většině aplikací simulovaly šestnáctibitové
prostředí, a to jak bitovou šířkou adresové sběrnice, tak i posloupností
instrukcí provádějících aritmetické a logické operace (sčítání
šestnáctibitových hodnot pomocí příznaku přetečení apod.). Na druhou stranu se
ukazuje, že šestnáct bitů již může být pro mnoho operací dostačující hodnotou,
dokonce se traduje, že většina systémů založených na Forthu si vystačí s
pouhými 64kB paměti, kterou lze adresovat právě šestnáctibitovou adresou.</p>

<p>Šestnáctibitové procesory jsou také v dostatečné míře jednoduché, oproti
třicetidvoubitovým procesorům je použito mnohem méně logických prvků v ALU
(zejména sčítačky a násobičky jsou "žrouty" logických prvků) i při implementaci
vnitřních sběrnic. Menší počet logických prvků se samozřejmě odráží jak v ceně
samotného procesoru, tak i v jeho velikosti, spotřebě energie aj. To, spolu s
menší potřebnou kapacitou operační paměti, činí tyto procesory ideálními pro
velkou část vestavěných systémů, zejména v případě, kdy osmibitové procesory
neposkytují dostatečný výpočetní výkon.</p>

<p>V dalším textu budou popsány dva čistě šestnáctibitové zásobníkové
procesory: procesor <em>WISC CPU/16</em> a <em>MISC M17</em>.</p>



<p><a name="k03" id="k03"></a></p>
<h2>3. Zásobníkový procesor WISC CPU/16</h2>

<p><em>There can be a great advantage to getting a high performance CPU, and
specialized i/o coprocessors on a single chip. In volume the $1 manufacture
cost becomes very attractive.<br />Jef Fox</em></p>

<p>Šestnáctibitový zásobníkový procesor <em>WISC CPU/16</em> získal své
označení podle zkratky <em>Writable Instruction Set Computer</em>. Jak již
tento název napovídá, jedná se o procesor, ve kterém je možné použít vlastní
instrukční sadu; každá instrukce uložená v této instrukční sadě je kódována
pomocí několika takzvaných <em>mikroinstrukcí</em> (to je výrazný rozdíl oproti
jiným mikroprocesorům, ve kterých bývají instrukce napevno "zadrátovány").
Tento procesor byl vytvořen zejména proto, aby se otestovaly některé klíčové
vlastnosti modernějšího procesoru <em>RTX 32P</em>, který bude v dalších dílech
tohoto seriálu také popsán. Velkou předností procesoru <em>WISC CPU/16</em> je
- na svoji dobu výborný - poměr cena/výkon, který byl překonán až v době
příchodu vyspělejších mikroprocesorů a zejména mikrořadičů.</p>

<p>Tento procesor byl vytvořen z diskrétních MSI komponentů na bázi řady 74LS00
(ALU bylo například tvořena čipem 74LS181), což umožnilo například jeho snadné
rozšiřování a testování (připojení osciloskopu či logického analyzátoru na
vnitřní sběrnice). Celý procesor byl, spolu s pomocnými obvody, vytvořen na
plošném spoji, který bylo možné zasunout do PC jako koprocesor. Vzhledem k době
vývoje tohoto procesoru byla pro komunikaci s PC použita sběrnice ISA.
Adresovat bylo možné operační paměť o kapacitě 128kB, adresa totiž byla uložena
v šestnácti bitech, každá adresovatelná buňka měla velikost šestnáct bitů (po
bytech nebylo možné adresování provést, podobně jako u následujících
procesorů). V prakticky všech implementacích (zejména na testovací přídavné
desce do PC) se však používala dynamická paměť o kapacitě pouhých 16kB.</p>

<p>Datový zásobník má hloubku 256 položek, přičemž každá položka (v řeči Forthu
buňka - <em>cell</em>) má velikost šestnáct bitů. Taktéž zásobník návratových
adres má hloubku 256 položek po šestnácti bitech. Ukazatele na datový zásobník
i zásobník návratových adres jsou uloženy na osmi bitech a lze je považovat za
registry, do kterých lze číst i zapisovat - teoreticky by však měla stačit
pouze inkrementace a dekrementace.</p>



<p><a name="k04" id="k04"></a></p>
<h2>4. Instrukce a mikroinstrukce procesoru WISC CPU/16</h2>

<p>Kromě pracovní paměti byla použita ještě mikroprogramová paměť o kapacitě
2kB x 32 bitů. Tato paměť byla použita pro kódování mikroinstrukcí a díky
konstrukci celého procesoru ji bylo možné po resetu naplnit z řídicího PC, což
výrazným způsobem zjednodušovalo návrh a testování mikroinstrukcí. Formát
mikroinstrukcí byl velmi jednoduchý, protože se používal takzvaný horizontální
formát kódování. Pomocí mikroinstrukčního kódu bylo možné vytvořit například
instrukce, které prováděly rozeskok a současně smyčky. Nejkratší mikrokód byl
proveden již za 2-3 mikrocykly, nejdelší mohl zabrat i několik tisíc
mikrocyklů.</p>

<p>Adresování mikroinstrukcí probíhá po 256 stránkách, v jedné stránce je možné
vytvořit osm slov. Každá mikroinstrukce má délku 32 bitů, jež jsou rozděleny do
několika polí o pevné délce. Existuje osm způsobů nastavení podmínky, 17
základních aritmetických a logických operací, inkrementace registru PC,
autoinkrementace či autodekrementace některého operandu a bitový posun doleva a
doprava o jeden bit. Vstupní operand je možné adresovat jedenácti způsoby (může
být na zásobníku, na adrese uložené v registru PC, v operační paměti apod.),
výstupní operand je možné adresovat až třinácti způsoby (dokonce je možné
tvořit datové smyčky, kdy je jako vstupní operand použit výsledek předchozí
instrukce). Zajímavé je, že procesor neobsahuje registr pro příznaky
(<em>carry</em>, <em>zero</em> atd.), příznaky se tedy musí ukládat na datový
zásobník jako hodnoty 0, -1 apod.</p>

<p>Pomocí mikroinstrukcí lze vytvořit prakticky libovolnou instrukční sadu.
Standardně dodávaná instrukční sada se skládá z instrukcí, z nichž každá má
fixní délku šestnáct bitů. Existují dva formáty instrukcí: pomocí instrukce
prvního formátu se zavolá příslušná mikroinstrukce (provede se operace), pomocí
instrukce druhého formátu se provede vyvolání podprogramu (<em>call</em>). Při
použití instrukce prvního formátu musí být všechny bity 8-15 nastaveny na
jedničku, zbývající bity 0-7 obsahují operační kód mikroinstrukce, kterých tak
může být pouze 256. Při použití druhého formátu musí být alespoň jeden z bitů
8-15 nulový, na všech bitech dohromady je uložena adresa šestnáctibitového
slova (nikoli bytu), na které se provede skok. Jelikož musí být alespoň jeden z
horních osmi bitů nulový, nelze v adresovém prostoru o celkem 65536 slovech
skákat na 2048 slov, což jsou pouhá tři procenta adresového prostoru.</p>

<p>Vlastní instrukce mohou být vytvořeny uživatelem vhodně naplněnou
mikroprogramovou pamětí, existuje například implementace slov MVP-Forthu,
Forthu-79 apod. Standardní mikrokód podporuje například následující Forthovská
primitivní slova (průměrně trvá jedna instrukce tři hodinové cykly):</p>

<pre>
    !                        DDROP
    +                        DDUP
    +!                       DNEGATE
    -                        DROP
    0                        DSWAP
    0&lt;                       DUP
    0=                       I
    0BRANCH                  I'
    1+                       J
    1-                       LEAVE
    2*                       LIT
    2/                       NEGATE
    &lt;                        NOP
    PICK                     NOT
    ROLL                     OR
    =                        OVER
    &gt;R                       R&gt;
    ?DUP                     R@
    @                        ROT
    ABS                      S-&gt;D
    AND                      SWAP
    BRANCH                   U*
    D!                       U/MOD
    D+                       XOR
    D@
</pre>

<p>Do jedné instrukce je možné zakódovat i různé složeniny primitivních
Forthovských slov, například:</p>

<pre>
    @ +
    @ -
    DROP ;
    DROP DUP
    I +
    I + @
    OVER +
    OVER -
    R&gt; DROP
    R&gt; SWAP &gt;R
    SWAP -
    SWAP DROP
    DUP @ SWAP 1+        (fetch and increment address)
    DUP ROT ROT ! 1-     (store and decrement address)
    @ @                  (indirect fetch)
    @ !                  (indirect store)
    DUP @  @  1 ROT +!   (auto-postincrement indirect fetch for software stack)
    -1 OVER +!  @ !      (auto-predecrement indirect store for software stack)
</pre>



<p><a name="k05" id="k05"></a></p>
<h2>5. Zásobníkový procesor MISC M17</h2>

<p><em>Several features of the MISC M17 are directed to the designer of small
volume, high performance products. Example applications include remote sensing
for smoke stacks, mines, hazardous areas, and remote equipment installations.
The decision to place stacks in program memory results in lower system cost and
complexity. The asynchronous memory bus protocol allows coupling high speed
processing and data transmission operations without complicating the interface
to low speed data acquisition devices.</em></p>

<p>Procesor <em>MISC M17</em> byl vyráběný firmou se zajímavým názvem
<em>Minimum Instruction Set Computer, Inc.</em>. Jedná se o zásobníkový
procesor, který je primárně určený pro vestavěné systémy. Hlavním cílem, který
se podle všeho podařilo splnit, byla nízká prodejní cena, což však negativně
ovlivnilo některé další vlastnosti tohoto procesoru, zejména umístění obou
zásobníků v operační paměti (nejvyšší položky zásobníků jsou samozřejmě uloženy
v interních registrech, jinak by byl procesor velmi pomalý).</p>

<p>Zásobníky jsou v operační paměti umístěny tak, že rostou proti sobě, volný
prostor mezi nimi lze využít k uložení dynamických dat.</p>



<p><a name="k06" id="k06"></a></p>
<h2>6. Architektura procesoru MISC M17</h2>

<p>Procesor <em>MISC M17</em> obsahuje několik interních registrů. Registry
označené symboly <strong>X</strong>, <strong>Y</strong> a <strong>Z</strong>
obsahují nejvyšší tři elementy (buňky) datového zásobníku. Pomocí instrukcí
procesoru lze mezi těmito registry přenášet data v jednom cyklu, současně lze
také do registru <strong>Z</strong> načítat či naopak ukládat hodnoty z paměti
- tímto způsobem lze jednoduše realizovat Forthovská slova <em>dup</em>,
<em>drop</em>, <em>swap</em>, <em>over</em>, <em>rot</em>, <em>nip</em>
atd.</p>

<p>Interní registr <strong>LASTX</strong> obsahuje v každém cyklu kopii hodnoty
registru <strong>X</strong>. Tento registr je možné využít pro některé výpočty
a pro uložení mezivýsledků operací.</p>

<p>Interní registr <strong>INDEX</strong> obsahuje nejvyšší položku zásobníku
návratových adres. Je ho také možné použít jako čítač (čítá se směrem k nule),
čehož lze využít při tvorbě počítaných smyček.</p>

<p>Mezi další registry patří ukazatele na vrcholy datového zásobníku a
zásobníku návratových adres. Tyto registry jsou vytvořeny jako čítače +-1. V
registru <strong>PC</strong> je, jak již bývá zvykem, uložena adresa právě
zpracovávané instrukce. Tento registr je možné měnit instrukcemi skoku a
instrukcí pro návrat z podprogramu.</p>



<p><a name="k07" id="k07"></a></p>
<h2>7. Základní vlastnosti procesoru MISC M17</h2>

<p>Tento procesor může adresovat až 128kB paměti, protože se, podobně jako u
procesoru předchozího, provádí adresování po šestnáctibitových slovech.
Existují však instrukce pro prohazování, pakování a rozdělování bytů, takže lze
poměrně jednoduše implementovat i bytovou aritmetiku.</p>

<p>Kromě toho je z procesoru vyvedeno pět pinů, které svou logickou úrovní
určují, která část paměti se bude číst či zapisovat - datový zásobník (1),
zásobník návratových adres (2), část paměti s kódem programu (3), buffer A (4)
nebo buffer B (5). Tyto piny se mohou buď ignorovat, nebo je možné použít pět
na sobě nezávislých banků paměti, každý s kapacitou 128kB (v tomto případě je
možné signál z pěti zmíněných pinů negovat a přivést na vstup CS paměti).</p>

<p>Provedení každé instrukce z instrukčního souboru trvá vždy dva cykly, včetně
skoků a návratů z podprogramu. Rychlost procesoru je při použití statických
pamětí RAM s přístupovou dobou 30ns rovna 15MHz, při použití pamětí s
přístupovou dobou 120ns potom 6MHz. Dynamické paměti se nepoužívají, jejich
funkčnost ve vestavěných systémech je velmi problematická.</p>



<p><a name="k08" id="k08"></a></p>
<h2>8. Instrukční soubor procesoru MISC M17</h2>

<p>Jak již bylo zmíněno výše, používá zásobníkový mikroprocesor <em>MISC
M17</em> instrukce s délkou šestnáct bitů. Je použitý takzvaný horizontální
formát instrukcí, čímž se značným způsobem zjednodušil instrukční dekodér na
mikroprocesoru. Existují tři typy instrukcí. Prvním typem instrukce je skok do
podprogramu, tato instrukce je charakterizovaná tím, že nejspodnější bit má
nulovou hodnotu. Všech ostatních patnáct bitů potom specifikuje adresu (ve
slovech), na kterou se má skok provést.</p>

<p>Dalším typem instrukce je instrukce s podmínkou. Pomocí dvanácti bitů je
možné specifikovat libovolnou kombinaci dvanácti podmínek, po splnění těchto
podmínek se může provést jedna ze tří operací: nastavení hodnoty, skok nebo
návrat z podprogramu. Třetím a posledním typem instrukce je provedení
aritmetické či logické operace; k dispozici je celkem šestnáct operací, volba
zdroje a cíle operace a případně i bitový posuv doprava či doleva (bitový posuv
je řešen samostatně a sériově k datům posílaným do ALU).</p>



<p><a name="k09" id="k09"></a></p>
<h2>9. Obsah dalšího pokračování</h2>

<p>V dalším pokračování tohoto seriálu si popíšeme šestnáctibitové zásobníkové
procesory <em>Novix NC4016</em> a <em>Harris RTX 2000</em>. Poté se již budeme
věnovat mnohem výkonnějším třiceti dvoubitovým zásobníkovým procesorům.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small></p>
</body>
</html>

