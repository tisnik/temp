<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Uiua: nevšední kombinace zásobníkového jazyka s jazykem pro práci s poli</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Uiua: nevšední kombinace zásobníkového jazyka s jazykem pro práci s poli</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Mainstreamové, ne-mainstreamové a esoterické programovací jazyky</a></p>
<p><a href="#k02">*** 2. Uiua: nevšední kombinace zásobníkového jazyka s&nbsp;jazykem pro práci s&nbsp;poli</a></p>
<p><a href="#k03">*** 3. Základní koncepty, na nichž je programovací jazyk Uiua postaven</a></p>
<p><a href="#k04">*** 4. Programovací jazyky založené na zásobníku operandů a RPN</a></p>
<p><a href="#k05">*** 5. Použití zásobníku v&nbsp;programovacím jazyku Uiua</a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Předchozí články o rozsáhlém světu &bdquo;array programmingu&ldquo;</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Mainstreamové, ne-mainstreamové a esoterické programovací jazyky</h2>

<p>Na stránkách Roota jsme se již mohli seznámit s&nbsp;různými programovacími jazyky. Jednalo se jak o jazyky patřící spíše do mainstreamu, tak i o programovací jazyky velmi specializované. A zapomenout nesmíme ani na různé esoterické programovací jazyky, o nichž jsme psali v&nbsp;seriálu <a href="https://www.root.cz/serialy/programovaci-jazyky-z-vyvojarskeho-pekla/">Programovací jazyky z&nbsp;vývojářského pekla</a>. Minimálně dvě skupiny programovacích jazyků, s&nbsp;nimiž jsme se prozatím seznámili, nepatří (alespoň ne v&nbsp;současnosti) mezi mainstream. V&nbsp;první skupině nalezneme jazyky založené na použití dvojice zásobníků (zásobníku operandů a zásobníku návratových hodnot). Mezi tyto jazyky patří především <a href="https://www.root.cz/serialy/programovaci-jazyk-forth/">programovací jazyk Forth</a>, ale například taktéž jazyky <a href="https://www.root.cz/serialy/zasobnikove-jazyky/">Joy a Factor</a>. A druhou skupinou ne-mainstreamových programovacích jazyků tvoří jazyky určené pro práci s&nbsp;poli, tedy zejména APL, J, BQN, K, Q či jazyk Nial.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Uiua: nevšední kombinace zásobníkového jazyka s&nbsp;jazykem pro práci s&nbsp;poli</h2>

<p>Dnes se ve stručnosti setkáme s&nbsp;programovacím jazykem, který je možné zařadit jak mezi jazyky zásobníkové, tak i mezi jazyky určené pro práci s&nbsp;poli. Tento jazyk, jehož syntaxe a sémantika je poněkud esoterická, má i prapodivné jméno &ndash; <strong>Uiua</strong> (vyslovováno má být jako <i>wee-wuh</i>). Mohlo by se zdát, že propojení zásobníkového jazyka s&nbsp;jazykem pro práci s&nbsp;poli je poněkud umělé, ale výsledek je až překvapivě konzistentní, i když bez předchozího tréninku pochopitelně velmi špatně čitelný. Navíc je díky syntaxi zápisu umožněn a podporován <i>tacit programming</i> neboli <i>point-free style</i>, což je způsob programování, jemuž jsme se věnovali v&nbsp;článku <a href="https://www.root.cz/clanky/jazyk-apl-kombinatory-vlacky-a-point-free-style/"> Jazyk APL, kombinátory, vláčky a point-free style</a> (a který je vlastně implicitně podporován prakticky všemi zásobníkovými jazyky).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Základní koncepty, na nichž je programovací jazyk Uiua postaven</h2>

<p></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Programovací jazyky založené na zásobníku operandů a RPN</h2>

<p>V&nbsp;úvodním textu jsme se zmínili o jazycích <i>Forth</i>, <i>Joy</i>, <i>Factor</i> či <i>PostScript</i>. I přesto, že se tyto jazyky od sebe v&nbsp;mnoha ohledech odlišují, mají jednu důležitou vlastnost společnou &ndash; výpočty, tj.&nbsp;aritmetické operace, logické operace a rozhodovací (řídicí) konstrukce jsou prováděny s&nbsp;hodnotami uloženými na zásobníku.  Díky tomu bylo možné tyto jazyky interně značně zjednodušit, protože se o transformaci výrazů z&nbsp;dnes běžné infixové podoby do podoby postfixové (jinak známé pod taktéž již zmíněným názvem <i>Převrácená Polská Notace/Reverse Polish Notation &ndash; RPN</i>) musí postarat sám programátor. To ve skutečnosti není nijak složité, ostatně s&nbsp;prakticky stejným (pseudo)problémem se musí potýkat i ti uživatelé, kteří například používají kalkulačky <i>Hewlett-Packard</i>.</p>

<p><div class="rs-tip-major">Poznámka: mimochodem &ndash; podle názoru některých vývojářů se všechny čtyři výše zmíněné programovací jazyky už nachází na hranici mezi &bdquo;civilizovanými&ldquo; programovacími jazyky a jazyky esoterickými, i když autor článku je velkým <a href="http://www.root.cz/serialy/programovaci-jazyk-forth/">fandou</a> zásobníkových jazyků, takže tento názor nesdílí :-).</div></p>

<p>Zde si jen v&nbsp;krátkosti připomeňme, že při použití zásobníku operandů přímo v&nbsp;programovacím jazyku jsou hodnoty na zásobník ukládány explicitně (zápis <strong>42</strong> tedy většinou znamená uložení této hodnoty na vrchol zásobníku operandů), aritmetické a logické operace používají implicitní adresování operandů (vždy se totiž jedná o hodnotu uloženou na vrcholu zásobníku či těsně pod ním) a kromě toho se většinou setkáme i s několika pomocnými operacemi určenými pro manipulaci s&nbsp;obsahem zásobníku. Tyto operace bývají nazývány <strong>dup</strong> (zduplikování hodnoty uložené na vrcholu zásobníku), <strong>drop</strong> (odstranění hodnoty z&nbsp;vrcholu zásobníku operandů), <strong>swap</strong> (prohození dvou nejvyšších prvků uložených na zásobníku) a <strong>rot</strong> (rotace tří nejvyšších prvků).  Tyto názvy mají dnes již vlastně historický původ, protože byly použity v&nbsp;programovacím jazyku Forth; později se začaly používat například i v&nbsp;zásobníkových virtuálních strojích.</p>

<p><div class="rs-tip-major">Poznámka: vrchol zásobníku se označuje zkratkou <i>TOS</i> neboli <i>Top Of Stack</i>.</div></p>

<p>Nicméně se vraťme k&nbsp;tacit programmingu. Ve <i>Forthu</i> je možné napsat například následující funkci:</p>

<pre>
<strong>:foo + * ;</strong>
</pre>

<p>Tato funkce na zásobníku očekává alespoň tři číselné hodnoty, které ovšem uvnitř funkce nejsou nikde explicitně pojmenovány ani (explicitně) použity.  Použití této funkce je stejně snadné jako její zápis, pochopitelně pokud si zvyknete na RPN:</p>

<pre>
<strong>3 2 1 foo .</strong>
9
</pre>

<p>Nejprve jsme na zásobník uložili tři hodnoty. Posléze se zavolala funkce <strong>foo</strong>, která tyto hodnoty nějakým způsobem zpracovala. Na nakonec byla hodnota umístěná na TOS vypsána další funkcí se jménem . (ano, toto je ve Forthu skutečně zcela legitimní jméno funkce).</p>

<p>Povšimněte si, že nyní těla funkce <strong>foo</strong>:

<pre>
<strong>+ *</strong>
</pre>

<p>Tělo této funkce obsahuje pouze dvě tzv.&nbsp;slova &bdquo;+&ldquo; a &bdquo;*&ldquo;. Každé z&nbsp;těchto slov očekává na zásobníku operandů dvojici hodnot, které jsou sečteny popř.&nbsp;vynásobeny a výsledek je uložen zpět na zásobník operandů. Nikde tedy není nutné psát, jak se operandy jmenují a už vůbec ne, jak se jmenuje výsledná hodnota. Navíc ani funkce <strong>foo</strong> tyto údaje neobsahuje.</p>

<p><div class="rs-tip-major">Poznámka: a právě zápis <strong>:foo + * ;</strong> ukazuje typické znaky <i>tacit programmingu</i>. Na jednu stranu je tento zápis velmi úsporný a v&nbsp;mnoha případech i idiomatický. Na stranu druhou může být tento zápis těžko rozluštitelný, a to právě díky jeho úspornosti &ndash; všechny nepodstatné detaily byly vynechány, takže kód prakticky postrádá redundanci (která je například v&nbsp;hovorovém jazyce užitečná, neboť usnadňuje porozumění zprávě i při jejím &bdquo;zašumění&ldquo; či nedokonalé znalosti jazyka).</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití zásobníku v&nbsp;programovacím jazyku Uiua</h2>

<p><div class="rs-tip-major">Poznámka: ve všech následujících příkladech bude prostředí programovacího jazyka Uiua zobrazovat obsah zásobníku operandů. Přitom je použit takový způsob zobrazení, že nejvyšší prvek zásobníku operandů (<i>TOS &ndash; Top Of Stack</i>) je zobrazen na nejvyšším řádku. Toto chování je ovšem nutné v&nbsp;prostředí nastavit po kliknutí na ikonu ozubeného kolečka (<i>show settings</i>) a výběrem položky &bdquo;Top at Top&ldquo; ve výběrovém boxu <i>Stack</i>. V&nbsp;implicitním nastavení jsou prvky zásobníku zobrazeny v&nbsp;opačném pořadí, což však znamená, že označení <i>Top Of Stack</i> nebude mít svoji vizuální obdobu.</div></p>

<p>V&nbsp;programovacím jazyku <i>Uiua</i> se nepoužívá klasická a standardní převrácená polská notace (RPN) ale určitá obdoba (přímé) polské notace, což může být poměrně matoucí. Navíc se operátory a operandy zapsané na řádku zpracovávají <i>zprava doleva</i>. To má sice své logické důvody, o nichž se zmíníme dále, ovšem opět se jedná o koncept, který může být dosti nezvyklý. Jak se tyto dvě vlastnosti projeví v&nbsp;praxi? Pokud například na jediný řádek zapíšeme trojici číselných hodnot, budou tyto hodnoty uloženy na zásobník (až potud je vše očekávatelné). Ovšem číselné hodnoty jsou zpracovávány zprava doleva a právě v&nbsp;tomto pořadí jsou uloženy na zásobník. Výsledkem tedy bude, že první zapsaná hodnota bude uložena na vrchol zásobníku operandů, tedy zcela opačně, než je tomu v&nbsp;klasické RPN:</p>

<pre>
<strong>1 2 3</strong>
1
2
3
</pre>

<pre>
<strong>+ 1 2</strong>
3
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Předchozí články o rozsáhlém světu &bdquo;array programmingu&ldquo;</h2>

<p>Programovacími jazyky, které jsou z&nbsp;větší či menší míry odvozeny od
APL, jsme se již na stránkách Roota zabývali v&nbsp;několika článcích (a
samozřejmě i v&nbsp;dnešním článku). Odkazy na tyto články naleznete pod
odstavcem:</p>

<ol>

<li>Jazyky umožňující operace s&nbsp;poli aneb rozsáhlý svět &bdquo;array programmingu&ldquo;<br />
<a href="https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/">https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/</a>
</li>

<li>Specializované jazyky pro práci s&nbsp;N-dimenzionálními poli: jazyk J<br />
<a href="https://www.root.cz/clanky/specializovane-jazyky-pro-praci-s-n-dimenzionalnimi-poli-jazyk-j/">https://www.root.cz/clanky/specializovane-jazyky-pro-praci-s-n-dimenzionalnimi-poli-jazyk-j/</a>
</li>

<li>Programovací jazyky odvozené od APL: BQN a ivy aneb 1~×`1↓↕10<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-odvozene-od-apl-bqn-a-ivy-aneb-1-1-10/">https://www.root.cz/clanky/programovaci-jazyky-odvozene-od-apl-bqn-a-ivy-aneb-1-1-10/</a>
</li>

<li>Programovací jazyk K: důkaz, že mezi námi žijí mimozemšťané<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane/">https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane/</a>
</li>

<li>Programovací jazyk K: důkaz, že mezi námi žijí mimozemšťané (dokončení)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane-dokonceni/">https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane-dokonceni/</a>
</li>

<li>Nial Array Language: další z&nbsp;jazyků inspirovaných APL<br />
<a href="https://www.root.cz/clanky/nial-array-language-dalsi-z-jazyku-inspirovanych-apl/">https://www.root.cz/clanky/nial-array-language-dalsi-z-jazyku-inspirovanych-apl/</a>
</li>

<li>Programování mainframů: jazyk APL<br />
<a href="https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/">https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/</a>
</li>

<li>Programovací jazyk APL: programování bez smyček<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-apl-programovani-bez-smycek/">https://www.root.cz/clanky/programovaci-jazyk-apl-programovani-bez-smycek/</a>
</li>

<li>Programovací jazyk APL - dokončení<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-apl-dokonceni/">https://www.root.cz/clanky/programovaci-jazyk-apl-dokonceni/</a>
</li>

<li>Oslava 55 let od vzniku první implementace jazyka APL<br />
<a href="https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/">https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/</a>
</li>

<li>Jazyk APL, kombinátory, vláčky a point-free style<br />
<a href="https://www.root.cz/clanky/jazyk-apl-kombinatory-vlacky-a-point-free-style/">https://www.root.cz/clanky/jazyk-apl-kombinatory-vlacky-a-point-free-style/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Uiua: A stack-based array programming language<br />
<a href="https://www.uiua.org/">https://www.uiua.org/</a>
</li>

<li>uiua na GitHubu<br />
<a href="https://github.com/uiua-lang/uiua">https://github.com/uiua-lang/uiua</a>
</li>

<li>Nial: A powerful, interactive array language with support for flexible multiparadigm code<br />
<a href="https://www.nial-array-language.org/">https://www.nial-array-language.org/</a>
</li>

<li>Nial: dokumentace<br />
<a href="https://www.nial-array-language.org/ndocs/">https://www.nial-array-language.org/ndocs/</a>
</li>

<li>Nial na GitHubu<br />
<a href="https://github.com/niallang/Nial_Development">https://github.com/niallang/Nial_Development</a>
</li>

<li>Nial na Rosetta Code<br />
<a href="https://rosettacode.org/wiki/Category:Nial">https://rosettacode.org/wiki/Category:Nial</a>
</li>

<li>Array language comparisons<br />
<a href="https://github.com/codereport/array-language-comparisons">https://github.com/codereport/array-language-comparisons</a>
</li>

<li>K language - an introduction<br />
<a href="http://www.math.bas.bg/bantchev/place/k.html">http://www.math.bas.bg/bantchev/place/k.html</a>
</li>

<li>K7 Tutorial<br />
<a href="https://cs.nyu.edu/~shasha/papers/tutorial">https://cs.nyu.edu/~shasha/papers/tutorial</a>
</li>

<li>An Interview with Arthur Whitney, Kx CEO and Developer of Kx Technology, January 4, 2004<br />
<a href="https://web.archive.org/web/20150813004101/http://kx.com/arthur-interview.php">https://web.archive.org/web/20150813004101/http://kx.com/arthur-interview.php</a>
</li>

<li>A Shallow Introduction to the K Programming Language<br />
<a href="https://web.archive.org/web/20130801233812/http://www.kuro5hin.org/story/2002/11/14/22741/791">https://web.archive.org/web/20130801233812/http://www.kuro5hin.org/story/2002/11/14/22741/791</a>
</li>

<li>A Conversation with Arthur Whitney<br />
<a href="https://queue.acm.org/detail.cfm?id=1531242">https://queue.acm.org/detail.cfm?id=1531242</a>
</li>

<li>Anecdote about Arthur Whitney<br />
<a href="https://news.ycombinator.com/item?id=13590065">https://news.ycombinator.com/item?id=13590065</a>
</li>

<li>K - list of idioms<br />
<a href="https://github.com/kevinlawler/kona/wiki/Idioms">https://github.com/kevinlawler/kona/wiki/Idioms</a>
</li>

<li>Appendix A. Incunabulum<br />
<a href="http://keiapl.org/rhui/remember.htm#incunabulum">http://keiapl.org/rhui/remember.htm#incunabulum</a>
</li>

<li>K code study<br />
<a href="https://docs.google.com/document/d/1W83ME5JecI2hd5hAUqQ1BVF32wtCel8zxb7WPq-D4f8/edit">https://docs.google.com/document/d/1W83ME5JecI2hd5hAUqQ1BVF32wtCel8zxb7WPq-D4f8/edit</a>
</li>

<li>K tutorial<br />
<a href="https://github.com/kevinlawler/kona/wiki/Tutorial">https://github.com/kevinlawler/kona/wiki/Tutorial</a>
</li>

<li>K by EXAMPLE<br />
<a href="http://vrabi.web.elte.hu/k/kbyeg.k">http://vrabi.web.elte.hu/k/kbyeg.k</a>
</li>

<li>BQN: An APL Variant from Marshall Lochbaum (mlochbaum.github.io)<br />
<a href="https://news.ycombinator.com/item?id=24167804">https://news.ycombinator.com/item?id=24167804</a>
</li>

<li>Raytracer in 7 lines in K<br />
<a href="http://www.nsl.com/k/ray/ray.k">http://www.nsl.com/k/ray/ray.k</a>
</li>

<li>Marshall Lochbaum<br />
<a href="https://www.aplwiki.com/wiki/Marshall_Lochbaum">https://www.aplwiki.com/wiki/Marshall_Lochbaum</a>
</li>

<li>BQN<br />
<a href="https://www.aplwiki.com/wiki/BQN">https://www.aplwiki.com/wiki/BQN</a>
</li>

<li>Co-dfns<br />
<a href="https://www.aplwiki.com/wiki/Co-dfns">https://www.aplwiki.com/wiki/Co-dfns</a>
</li>

<li>Array model<br />
<a href="https://www.aplwiki.com/wiki/Array_model#Based_array_theory">https://www.aplwiki.com/wiki/Array_model#Based_array_theory</a>
</li>

<li>Fonts for BQN<br />
<a href="https://mlochbaum.github.io/BQN/fonts.html">https://mlochbaum.github.io/BQN/fonts.html</a>
</li>

<li>Leading axis theory<br />
<a href="https://www.aplwiki.com/wiki/Leading_axis_theory">https://www.aplwiki.com/wiki/Leading_axis_theory</a>
</li>

<li>A based system for general arrays<br />
<a href="https://dl.acm.org/doi/abs/10.1145/586656.586663">https://dl.acm.org/doi/abs/10.1145/586656.586663</a>
</li>

<li>APL – A Glimpse of Heaven (2006)<br />
<a href="https://news.ycombinator.com/item?id=19325361">https://news.ycombinator.com/item?id=19325361</a>
</li>

<li>APL and J<br />
<a href="https://crypto.stanford.edu/~blynn/c/apl.html">https://crypto.stanford.edu/~blynn/c/apl.html</a>
</li>

<li>ivy (dokumentace)<br />
<a href="https://pkg.go.dev/robpike.io/ivy#section-readme">https://pkg.go.dev/robpike.io/ivy#section-readme</a>
</li>

<li>ivy na GitHubu<br />
<a href="https://github.com/robpike/ivy/">https://github.com/robpike/ivy/</a>
</li>

<li>Ivy na APL wiki<br />
<a href="https://aplwiki.com/wiki/Ivy">https://aplwiki.com/wiki/Ivy</a>
</li>

<li>Implementing a bignum calculator (slajdy)<br />
<a href="https://talks.godoc.org/github.com/robpike/ivy/talks/ivy.slide#1">https://talks.godoc.org/github.com/robpike/ivy/talks/ivy.slide#1</a>
</li>

<li>Implementing a bignum calculator - Rob Pike - golang-syd November 2014<br />
<a href="https://www.youtube.com/watch?v=PXoG0WX0r_E">https://www.youtube.com/watch?v=PXoG0WX0r_E</a>
</li>

<li>Rob Pike na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/Rob_Pike">https://en.wikipedia.org/wiki/Rob_Pike</a>
</li>

<li>Rob Pike na cat-v<br />
<a href="http://genius.cat-v.org/rob-pike/">http://genius.cat-v.org/rob-pike/</a>
</li>

<li>NuVoc<br />
<a href="https://code.jsoftware.com/wiki/NuVoc">https://code.jsoftware.com/wiki/NuVoc</a>
</li>

<li>J (programming language) [Wikipedia]<br />
<a href="https://en.wikipedia.org/wiki/J_%28programming_language%29">https://en.wikipedia.org/wiki/J_%28programming_language%29</a>
</li>

<li>J &ndash; Absolutely Essential Terms<br />
<a href="https://code.jsoftware.com/wiki/Vocabulary/AET">https://code.jsoftware.com/wiki/Vocabulary/AET</a>
</li>

<li>J &ndash; Atoms and Arrays<br />
<a href="https://code.jsoftware.com/wiki/Vocabulary/Nouns#Atom">https://code.jsoftware.com/wiki/Vocabulary/Nouns#Atom</a>
</li>

<li>Why J<br />
<a href="https://www.jsoftware.com/help/primer/why_j.htm">https://www.jsoftware.com/help/primer/why_j.htm</a>
</li>

<li>What is an Array?<br />
<a href="https://vector.org.uk/what-is-an-array/">https://vector.org.uk/what-is-an-array/</a>
</li>

<li>Comments<br />
<a href="http://www.gavilan.edu/csis/languages/comments.html">http://www.gavilan.edu/csis/languages/comments.html</a>
</li>

<li>Vector (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/Vector.html">https://mathworld.wolfram.com/Vector.html</a>
</li>

<li>n-Tuple (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/n-Tuple.html">https://mathworld.wolfram.com/n-Tuple.html</a>
</li>

<li>n-Vector (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/n-Vector.html">https://mathworld.wolfram.com/n-Vector.html</a>
</li>

<li>Matrix (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/Matrix.html">https://mathworld.wolfram.com/Matrix.html</a>
</li>

<li>Array (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/Array.html">https://mathworld.wolfram.com/Array.html</a>
</li>

<li>ND Arrays (Tensors) in different languages<br />
<a href="https://www.youtube.com/watch?v=WbpbEilgQBc">https://www.youtube.com/watch?v=WbpbEilgQBc</a>
</li>

<li>Extending APL to Infinity\<br />
<a href="https://www.jsoftware.com/papers/eem/infinity.htm">https://www.jsoftware.com/papers/eem/infinity.htm</a>
</li>

<li>Vector Library (R7RS-compatible)<br />
<a href="https://srfi.schemers.org/srfi-133/srfi-133.html">https://srfi.schemers.org/srfi-133/srfi-133.html</a>
</li>

<li>Vectors (pro Gauche)<br />
<a href="https://practical-scheme.net/gauche/man/gauche-refe/Vectors.html">https://practical-scheme.net/gauche/man/gauche-refe/Vectors.html</a>
</li>

<li>Kawa: Compiling Scheme to Java<br />
<a href="https://www.mit.edu/afs.new/sipb/project/kawa/doc/kawa-tour.html">https://www.mit.edu/afs.new/sipb/project/kawa/doc/kawa-tour.html</a>
</li>

<li>Kawa in Languages shootout<br />
<a href="http://per.bothner.com/blog/2010/Kawa-in-shootout/">http://per.bothner.com/blog/2010/Kawa-in-shootout/</a>
</li>

<li>Kawa 2.0 Supports Scheme R7RS<br />
<a href="https://developers.slashdot.org/story/14/12/13/2259225/kawa-20-supports-scheme-r7rs/">https://developers.slashdot.org/story/14/12/13/2259225/kawa-20-supports-scheme-r7rs/</a>
</li>

<li>Kawa — fast scripting on the Java platform<br />
<a href="https://lwn.net/Articles/623349/">https://lwn.net/Articles/623349/</a>
</li>

<li>Incanter is a Clojure-based, R-like platform for statistical computing and graphics.<br />
<a href="http://incanter.org/">http://incanter.org/</a>
</li>

<li>Evolution of incanter (Gource Visualization)<br />
<a href="https://www.youtube.com/watch?v=TVfL5nPELr4">https://www.youtube.com/watch?v=TVfL5nPELr4</a>
</li>

<li>Questions tagged [incanter] (na Stack Overflow)<br />
<a href="https://stackoverflow.com/questions/tagged/incanter?sort=active">https://stackoverflow.com/questions/tagged/incanter?sort=active</a>
</li>

<li>Data Sorcery with Clojure<br />
<a href="https://data-sorcery.org/contents/">https://data-sorcery.org/contents/</a>
</li>

<li>Back to the Future: Lisp as a Base for a Statistical Computing System<br />
<a href="https://rd.springer.com/chapter/10.1007/978-3-7908-2084-3_2">https://rd.springer.com/chapter/10.1007/978-3-7908-2084-3_2</a>
</li>

<li>Incanter Cheat Sheet<br />
<a href="http://incanter.org/docs/incanter-cheat-sheet.pdf">http://incanter.org/docs/incanter-cheat-sheet.pdf</a>
</li>

<li>Back to the Future: Lisp as a Base for a Statistical Computing System (celá verze článku)<br />
<a href="https://www.researchgate.net/publication/227019917_Back_to_the_Future_Lisp_as_a_Base_for_a_Statistical_Computing_System">https://www.researchgate.net/publication/227019917_Back_to_the_Future_Lisp_as_a_Base_for_a_Statistical_Computing_System</a>
</li>

<li>BQN: finally, an APL for your flying saucer<br />
<a href="https://mlochbaum.github.io/BQN/">https://mlochbaum.github.io/BQN/</a>
</li>

<li>Is BQN stable?<br />
<a href="https://mlochbaum.github.io/BQN/commentary/stability.html">https://mlochbaum.github.io/BQN/commentary/stability.html</a>
</li>

<li>Specification: BQN system-provided values<br />
<a href="https://mlochbaum.github.io/BQN/spec/system.html">https://mlochbaum.github.io/BQN/spec/system.html</a>
</li>

<li>Tutorial: BQN expressions<br />
<a href="https://mlochbaum.github.io/BQN/tutorial/expression.html">https://mlochbaum.github.io/BQN/tutorial/expression.html</a>
</li>

<li>BQN primitives<br />
<a href="https://mlochbaum.github.io/BQN/doc/primitive.html">https://mlochbaum.github.io/BQN/doc/primitive.html</a>
</li>

<li>Function trains<br />
<a href="https://mlochbaum.github.io/BQN/doc/train.html">https://mlochbaum.github.io/BQN/doc/train.html</a>
</li>

<li>BQN community links<br />
<a href="https://mlochbaum.github.io/BQN/community/index.html">https://mlochbaum.github.io/BQN/community/index.html</a>
</li>

<li>BQN UV<br />
<a href="https://observablehq.com/@lsh/bqn-uv">https://observablehq.com/@lsh/bqn-uv</a>
</li>

<li>APL Wiki<br />
<a href="https://aplwiki.com/wiki/">https://aplwiki.com/wiki/</a>
</li>

<li>The Array Cast<br />
<a href="https://www.arraycast.com/episodes/episode-03-what-is-an-array">https://www.arraycast.com/episodes/episode-03-what-is-an-array</a>
</li>

<li>EnthusiastiCon 2019 &ndash; An Introduction to APL<br />
<a href="https://www.youtube.com/watch?v=UltnvW83_CQ">https://www.youtube.com/watch?v=UltnvW83_CQ</a>
</li>

<li>Dyalog<br />
<a href="https://www.dyalog.com/">https://www.dyalog.com/</a>
</li>

<li>Try APL!<br />
<a href="https://tryapl.org/">https://tryapl.org/</a>
</li>

<li>Lisp-Stat Information<br />
<a href="http://homepage.cs.uiowa.edu/~luke/xls/xlsinfo/">http://homepage.cs.uiowa.edu/~luke/xls/xlsinfo/</a>
</li>

<li>Sample Plots in Incanter<br />
<a href="https://github.com/incanter/incanter/wiki/Sample-Plots-in-Incanter#line">https://github.com/incanter/incanter/wiki/Sample-Plots-in-Incanter#line</a>
</li>

<li>vectorz-clj<br />
<a href="https://github.com/mikera/vectorz-clj">https://github.com/mikera/vectorz-clj</a>
</li>

<li>vectorz &ndash; Examples<br />
<a href="https://github.com/mikera/vectorz-clj/wiki/Examples">https://github.com/mikera/vectorz-clj/wiki/Examples</a>
</li>

<li>Basic Vector and Matrix Operations in Julia: Quick Reference and Examples<br />
<a href="https://queirozf.com/entries/basic-vector-and-matrix-operations-in-julia-quick-reference-and-examples">https://queirozf.com/entries/basic-vector-and-matrix-operations-in-julia-quick-reference-and-examples</a>
</li>

<li>Vectors and matrices in Julia<br />
<a href="https://fncbook.github.io/v1.0/linsys/demos/matrices-julia.html">https://fncbook.github.io/v1.0/linsys/demos/matrices-julia.html</a>
</li>

<li>Array vs Matrix in R Programming<br />
<a href="https://www.geeksforgeeks.org/array-vs-matrix-in-r-programming/">https://www.geeksforgeeks.org/array-vs-matrix-in-r-programming/</a>
</li>

<li>Concurrency (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Category:Concurrency_%28computer_science%29">https://en.wikipedia.org/wiki/Category:Concurrency_%28computer_science%29</a>
</li>

<li>Koprogram<br />
<a href="https://cs.wikipedia.org/wiki/Koprogram">https://cs.wikipedia.org/wiki/Koprogram</a>
</li>

<li>Coroutine<br />
<a href="https://en.wikipedia.org/wiki/Coroutine">https://en.wikipedia.org/wiki/Coroutine</a>
</li>

<li>Coroutines in C<br />
<a href="http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html">http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html</a>
</li>

<li>S-expression (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/S-expression">https://en.wikipedia.org/wiki/S-expression</a>
</li>

<li>S-Expressions (Rosetta Code)<br />
<a href="http://rosettacode.org/wiki/S-Expressions">http://rosettacode.org/wiki/S-Expressions</a>
</li>

<li>Introducing Julia/Metaprogramming<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming">https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming</a>
</li>

<li>Tutorial for the Common Lisp Loop Macro<br />
<a href="http://www.ai.sri.com/pkarp/loop.html">http://www.ai.sri.com/pkarp/loop.html</a>
</li>

<li>Clojure Macro Tutorial (Part I, Getting the Compiler to Write Your Code For You)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html</a>
</li>

<li>Clojure Macro Tutorial (Part II: The Compiler Strikes Back)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html</a>
</li>

<li>Clojure Macro Tutorial (Part III: Syntax Quote)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html</a>
</li>

<li>Clojure Macros and Metaprogramming<br />
<a href="http://clojure-doc.org/articles/language/macros.html">http://clojure-doc.org/articles/language/macros.html</a>
</li>

<li>Fatvat &ndash; Exploring functional programming: Clojure Macros<br />
<a href="http://www.fatvat.co.uk/2009/02/clojure-macros.html">http://www.fatvat.co.uk/2009/02/clojure-macros.html</a>
</li>

<li>CS 2101 Parallel Computing with Julia<br />
<a href="https://www.coursehero.com/file/11508091/CS-2101-Parallel-Computing-with-Julia/">https://www.coursehero.com/file/11508091/CS-2101-Parallel-Computing-with-Julia/</a>
</li>

<li>Julia By Example<br />
<a href="https://samuelcolvin.github.io/JuliaByExample/">https://samuelcolvin.github.io/JuliaByExample/</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>Introducing Julia/Functions<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Functions">https://en.wikibooks.org/wiki/Introducing_Julia/Functions</a>
</li>

<li>Functions (Julia documentation)<br />
<a href="https://docs.julialang.org/en/v1/manual/functions/">https://docs.julialang.org/en/v1/manual/functions/</a>
</li>

<li>Evaluate binomial coefficients<br />
<a href="http://rosettacode.org/wiki/Evaluate_binomial_coefficients">http://rosettacode.org/wiki/Evaluate_binomial_coefficients</a>
</li>

<li>Ackermann function<br />
<a href="http://rosettacode.org/wiki/Ackermann_function">http://rosettacode.org/wiki/Ackermann_function</a>
</li>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; dokumentace<br />
<a href="http://docs.julialang.org/">http://docs.julialang.org/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>Learn X in Y minutes (where X=Julia)<br />
<a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a>
</li>

<li>New Julia language seeks to be the C for scientists<br />
<a href="http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html">http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html</a>
</li>

<li>Julia: A Fast Dynamic Language for Technical Computing<br />
<a href="http://karpinski.org/publications/2012/julia-a-fast-dynamic-language">http://karpinski.org/publications/2012/julia-a-fast-dynamic-language</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="http://llvm.org/">http://llvm.org/</a>
</li>

<li>Julia: benchmarks<br />
<a href="http://julialang.org/benchmarks/">http://julialang.org/benchmarks/</a>
</li>

<li>Type system<br />
<a href="https://en.wikipedia.org/wiki/Type_system">https://en.wikipedia.org/wiki/Type_system</a>
</li>

<li>Half-precision floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Half-precision_floating-point_format">https://en.wikipedia.org/wiki/Half-precision_floating-point_format</a>
</li>

<li>Dartmouth BASIC<br />
<a href="https://en.wikipedia.org/wiki/Dartmouth_BASIC">https://en.wikipedia.org/wiki/Dartmouth_BASIC</a>
</li>

<li>BASIC 4th Edition<br />
<a href="http://www.bitsavers.org/pdf/dartmouth/BASIC_4th_Edition_Jan68.pdf">http://www.bitsavers.org/pdf/dartmouth/BASIC_4th_Edition_Jan68.pdf</a>
</li>

<li>VECTRAN<br />
<a href="https://encyclopedia2.thefreedictionary.com/VECTRAN">https://encyclopedia2.thefreedictionary.com/VECTRAN</a>
</li>

<li>Comparison of programming languages (array)<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array)">https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array)</a>
</li>

<li>BASIC at 50<br />
<a href="https://www.dartmouth.edu/basicfifty/commands.html">https://www.dartmouth.edu/basicfifty/commands.html</a>
</li>

<li>BBC Basic - arrays<br />
<a href="http://www.riscos.com/support/developers/bbcbasic/part2/arrays.html">http://www.riscos.com/support/developers/bbcbasic/part2/arrays.html</a>
</li>

<li>Datová struktura<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%A1_struktura">https://cs.wikipedia.org/wiki/Datov%C3%A1_struktura</a>
</li>

<li>SIMD instrukce využívané v&nbsp;moderních mikroprocesorech řady x86<br />
<a href="https://www.root.cz/clanky/simd-instrukce-vyuzivane-v-modernich-mikroprocesorech-rady-x86/">https://www.root.cz/clanky/simd-instrukce-vyuzivane-v-modernich-mikroprocesorech-rady-x86/</a>
</li>

<li>SIMD instrukce v&nbsp;moderních mikroprocesorech řady x86 (2.část: SSE)<br />
<a href="https://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-2-cast-sse/">https://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-2-cast-sse/</a>
</li>

<li>SIMD instrukce v&nbsp;moderních mikroprocesorech řady x86 (3.část: SSE2)<br />
<a href="https://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-3-cast-sse2/">https://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-3-cast-sse2/</a>
</li>

<li>Inductive type<br />
<a href="https://en.wikipedia.org/wiki/Inductive_type">https://en.wikipedia.org/wiki/Inductive_type</a>
</li>

<li>JuliaMono, a font for programming<br />
<a href="https://github.com/cormullion/juliamono">https://github.com/cormullion/juliamono</a>
</li>

<li>It’s arrays all the way down<br />
<a href="https://xpqz.github.io/learnapl/array.html">https://xpqz.github.io/learnapl/array.html</a>
</li>

<li>APL vs BQN vs J vs Q vs NumPy vs Julia vs R<br />
<a href="https://www.youtube.com/watch?v=8ynsN4nJxzU">https://www.youtube.com/watch?v=8ynsN4nJxzU</a>
</li>

<li>Trainspotting (APL)<br />
<a href="https://xpqz.github.io/learnapl/tacit.html">https://xpqz.github.io/learnapl/tacit.html</a>
</li>

<li>Train Spotting in Dyalog APL – Dyalog Webinar with Richard Park<br />
<a href="https://www.youtube.com/watch?v=Enlh5qwwDuY">https://www.youtube.com/watch?v=Enlh5qwwDuY</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

