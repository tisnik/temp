<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory X</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=iso-8859-2" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Forth a zásobníkové procesory X</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h2>Úvodník</h2>

<p>V dnešní části seriálu o programovacím jazyce Forth a zásobníkových
procesorech si ukážeme způsob práce s paměťovými médii pomocí čtení a zápisu
jednotlivých bloků dat. Také si řekneme, jakým způsobem je možné provést
pokročilé formátování číselných hodnot na výstupu.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Práce s datovými médii</a><br />
<a href="#k02">2. Čtení a zápis bloků dat</a><br />
<a href="#k03">3. Uložení zdrojového kódu programu do bloků (obrazovek)</a><br />
<a href="#k04">4. Pokročilé formátování výstupu</a><br />
<a href="#k05">5. Výpis telefonních čísel</a><br />
<a href="#k06">6. Výpis data a času</a><br />
<a href="#k07">7. Obsah dalšího pokračování</a><br />
</p>



<p><a name="k01" id="k01"></a></p>
<h2>1. Práce s datovými médii</h2>

<p>Již v prvních dílech tohoto seriálu jsme si řekli, že Forth je nejenom
programovací jazyk, ale také ucelené vývojové prostředí a současně i (alespoň v
některých implementacích) jednoduchý operační systém. Základním rysem prakticky
všech historických i moderních operačních systémů je podpora práce s datovými
médii, nezávisle na konkrétním typu média a způsobu jeho připojení k
výpočetnímu systému, tuto vlastnost ostatně splňoval i historický CP/M. Dnes se
tedy budeme zabývat zejména Forthovskými slovy, která je možné použít při práci
s datovými médii, jakými jsou například pevný disk, disketa či jiné podobné
blokové zařízení.</p>

<p>Datová média je možné rozdělit do různých skupin podle mnoha vlastností.
Jednou z nejvýznačnějších vlastností je (alespoň pro vývojáře nových aplikací)
způsob čtení a zápisu dat. Z tohoto hlediska se média (později nazývaná
příznačněji <em>zařízení</em>, ve Forthovské literatuře se však stále mluví o
médiích) dělí na bloková a znaková. U blokových médií jsou informace
seskupovány do větších celků, takzvaných bloků, přičemž každý blok má
konstantní délku, která je většinou specifikována v bytech. Naproti tomu se u
znakového média informace sice také sdružují, ale pouze do jednotlivých znaků,
tj. vždy po osmi bitech (v některých případech je dokonce nejvyšší bit znaku
ignorován). Příkladem blokového média je disketa, pevný disk, kompaktní disk
apod. Znakovým médiem/zařízením je typicky modem a částečně také různé páskové
mechaniky.</p>

<p>Práci se znakovými zařízeními jsme si ve své podstatě vysvětlili už v
předchozích částech tohoto seriálu. Pro zápis jednotlivých znaků se používá
slovo <strong>EMIT</strong> (kód znaku, jež se má vypsat, je přečten z vrcholu
zásobníku operandů), pro čtení slovo <strong>KEY</strong> (uložení kódu
naposledy přečteného znaku na zásobník operandů). Zápis skupiny znaků (řetězce)
zajistí slovo <strong>TYPE</strong>, načtení celého řetězce slovo
<strong>EXPECT</strong>. V některých implementacích Forthu jsou tato slova
rezervována pouze pro přístup ke konzoli (tj. ke klávesnici a znakové
obrazovce), v jiných je možné programově provést "přesměrování" vstupu nebo
výstupu na jiné zařízení.</p>

<p>Poněkud složitější je práce s blokovými zařízeními. V dřívějších dobách se k
blokovým médiím opravdu přistupovalo přes jednotlivé bloky (viz například
starší verze DOSu pro počítače PC, kde se údaje o otevřených souborech
uchovávaly ve strukturách nazvaných FCB - File Control Block), dnes je jasně
patrná snaha o přístup k blokovým datovým médiím pomocí stejných funkcí, jako u
médií orientovaných na přesuny jednotlivých znaků.</p>

<p>To je na jednu stranu jistě potěšitelné, neboť se zjednoduší vývoj aplikací,
na druhou stranu se mezi vlastní zařízení a aplikaci vkládá další (mnohdy
zbytečná) vrstva, díky které může dojít ke zpomalení čtení a/nebo zápisu. Pokud
je Forth skutečně použit jako operační systém (například u vestavěných
systémů), probíhá čtení a zápis bloků dat přímo, tj. pomocí komunikace jádra
Forthu přímo s daným zařízením. U disků připojených přes rozhraní IDE se
používají ATA příkazy, u zařízení na sběrnici SCSI příkazy typické pro tuto
sběrnici apod. Věci jako souborový systém nejsou implementovány.</p>

<p>Jelikož byl Forth koncipován také jako operační systém s podporou práce s
datovými médii (a multitaskingem - viz <a
href="http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory">http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory</a>),
podporuje také přímo práci s blokovými zařízeními. Blok má ve Forthu velikost
přesně 1KB (1024 byte), což je hodnota zvolená tak, aby byla vhodná jak pro
zařízení s malou kapacitou, tak i pro zařízení s kapacitou vyšší. Například
sektor diskety má podle použité mechaniky a způsobu organizace stop velikost
128 byte až 1024 byte, velikost sektoru pevného disku se pohybuje v rozmezí
jednoho kilobyte a "sektor" na disku CD-ROM má (při použití samoopravného kódu)
velikost 2KB. Kromě toho se do velikosti jednoho bloku zapisují i takzvané
obrazovky (<em>screens</em>) ve Forthu, jejichž použití bude uvedeno v dalších
kapitolách.</p>



<p><a name="k02" id="k02"></a></p>
<h2>2. Čtení a zápis bloků dat</h2>

<p>Jak jsme si již uvedli v <a href="#k01">předchozí kapitole</a>, má blok ve
Forthu velikost přesně jednoho kilobyte. Veškeré zápisy a čtení probíhají po
celých blocích, což od programátora aplikace vyžaduje určitou pozornost. Na
druhou stranu je však blokový přístup vhodný pro vytváření databází s pevnou
délkou záznamu, kdy je přístup či modifikace jednotlivých záznamů (či jejich
skupin) velmi rychlá a přitom efektivní.</p>

<p>Při práci s blokovým zařízením se nepoužívá klasický souborový systém,
jediná úroveň abstrakce nad daným zařízením jsou právě bloky. To sice
komplikuje organizaci dat na disku, při správně zvolené metodě organizace je
však velmi jednoduché vytvářet různé struktury (například stromy apod.) s tím,
že přístup k jednotlivým blokům nahrazuje posun na určitá místa v souborech
(známé funkce typu <em>seek</em>).</p>

<p>Načtení bloku z blokového zařízení do paměti je možné provést pomocí slova
<strong>BLOCK</strong>, jehož zásobníkový diagram je možné zapsat: <tt>( u --
addr )</tt>, kde <strong>u</strong> značí číslo bloku zadané celým číslem bez
znaménka a <strong>addr</strong> je počáteční adresa, od které Forth načtený
blok uložil.</p>

<p>Pokud se v načteném bloku nachází čitelný text (například část samotného
programu napsaného ve Forthu), je možné část bloku či celý blok zobrazit na
obrazovce. Stačí si vzpomenout na slovo <strong>TYPE</strong>, které vyžaduje,
aby na vrcholu zásobníku operandů byla uložena adresa řetězce následovaná
počtem znaků (délkou řetězce). Výpis prvního řádku (64 znaků) z bloku číslo
jedna tedy zajistí příkaz:</p>

<pre>

1 block 64 type

</pre>

<p>Výpis celého bloku je také snadný, protože blok má pevně danou velikost 1024
bytů, což lze rozepsat na šestnáct řádků po 64 znacích:</p>

<pre>

1 block 16 64 * type

</pre>

<p>Opakem slova <strong>BLOCK</strong> je slovo <strong>UPDATE</strong>. Toto
slovo nastaví u současného bloku příznak modifikace. Při následném ukládání
bloků (viz následující odstavec) se postupně projdou všechny bloky načtené do
paměti a modifikované bloky se uloží zpět na blokové zařízení, například pevný
disk. Zásobníkový diagram slova <strong>UPDATE</strong> je velmi jednoduchý:
<tt>( -- )</tt>.</p>

<p>Po zavolání slova <strong>SAVE-BUFFERS</strong> se interně projdou všechny
bloky a ty z nich, které mají nastaven příznak modifikovanosti (viz slovo
<strong>UPDATE</strong>), jsou uloženy zpět na paměťové zařízení. Použití
tohoto slova tedy zhruba odpovídá funkci <em>flush</em> operačního systému.</p>

<p>To je vše, žádné další funkce pro práci s bloky nejsou zapotřebí. Je vidět,
že se nemusíme starat o otevírání a zavírání souborů, kontrolu zápisu apod.
Vše je díky organizaci dat do bloku velmi jednoduché - komplikace samozřejmě
nastávají při výpočtu čísel jednotlivých bloků, tato problematika však již úzce
souvisí s charakterem vytvářené aplikace a není ji vhodné řešit obecně.</p>

<p>V následující kapitole bude ukázáno, jakým způsobem je možné organizovat
samotný zdrojový kód programu do jednotlivých bloků.</p>



<p><a name="k03" id="k03"></a></p>
<h2>3. Uložení zdrojového kódu programu do bloků (obrazovek)</h2>

<p>V tradičních Forthech se zdrojový text kódu programu neukládal do textových
souborů (jak je tomu dnes), ale do jednotlivých bloků. V případě práce se
zdrojovým textem se většinou nemluví o blocích, ale o takzvaných
<em>obrazovkách (screens)</em>.</p>

<p>Velikost <em>obrazovky</em> je za jakýchkoli podmínek rovna šestnácti
řádkům, kde na každém řádku je uloženo 64 znaků. Celková velikost obrazovky je
tedy rovna 64x16=1024 znakům/bytům, což přesně odpovídá velikosti jednoho
bloku.  Všimněte si, že délka řádku je vždy rovna 64 znakům, nezávisle na
aktuálním obsahu řádku. Pokud je řádek "prázdný", je v bloku jednoduše zapsáno
64 mezer (ASCII znaků s kódem 32). Konce řádků tedy není zapotřebí žádným
způsobem kódovat.</p>

<p>Jisté je, že tento způsob zápisu je neúsporný, zejména při zápisu programů
"vertikálním" způsobem. I z tohoto důvodu někteří zkušení programátoři zapisují
definice nových slov "horizontálním" způsobem, tj. na jeden řádek - slova tak
musejí být krátká, což vede k důsledné faktorizaci kódu (ta ostatně není nikdy
na škodu, zvláště ve Forthu).</p>

<p>Pro načtení a zpracování (tj. překlad a interpretaci) celé obrazovky se
používá slovo <strong>LOAD</strong>, jehož zásobníkový diagram je následující:
<tt>( u --)</tt>. Před provedením tohoto slova musí být na zásobník operandů
uloženo číslo bloku, který se má načíst a přeložit.</p>

<p>Pro souvislé načítání bloků/obrazovek je vytvořeno slovo s krásným zápisem
<strong>--&gt;</strong> (pomlčka pomlčka nerovnítko), které načte následující
blok z disku, tj. po bloku <strong>U</strong> je načten blok
<strong>U+1</strong>. Pro automatizované načítání sekvence obrazovek je možné
využít malého triku: na konci každé obrazovky je uvedeno výše popsané slovo
<strong>--&gt;</strong>, které při interpretaci automaticky způsobí odskok.</p>

<p>Pro výpis obsahu obrazovky na obrazovku :-) (tj. na monitor) lze použít
slovo <strong>LIST</strong> se zásobníkovým diagramem <tt>( U -- )</tt>, kde
<strong>u</strong> je index požadované obrazovky.</p>

<p>Orientace v číslech obrazovek může být složitá, takže se, především u
rozsáhlejších aplikací, na některé z prvních obrazovek uvádí konstanty, které
lze pro indexaci používat. Jednoduchý příklad:</p>

<pre>

1   constant app-init
90  constant graphics
125 constant sound

app-init load
graphics load
graphics list
sound load

</pre>

<p>Pro tisk obsahu obrazovek na tiskárnu se používá slovo
<strong>TRIAD</strong>, které způsobí tisk třech obrazovek (index první z nich
je uložen na zásobníku operandů). Proč zrovna tři obrazovky? Na tiskárnách
formátu A4 je možné vytisknout 60 řádků, což pro čtyři obrazovky nedostačuje
(16*4&gt;60), ale pro tři obrazovky je tato hodnota ideální (obrazovky mohou
být odděleny prázdným řádkem nebo několika řádky). Z tohoto důvodu se mnohdy
zdrojový kód organizuje tak, aby důležité části (například začátky modulů)
začínaly na začátku tiskové strany.</p>

<p>Při tisku lze také využít slovo <strong>INDEX</strong>, které vytiskne první
řádky z šedesáti po sobě jdoucích obrazovek. Pokud tedy obsahuje každá
obrazovka stručný popis (samozřejmě v poznámce), je možné velmi jednoduchým
způsobem získat "obsah" programu. Důležitá je zejména odsazení prvních řádků
tak, aby se při tisku zdůraznila hierarchie. Implementaci slova
<strong>INDEX</strong> ponechám na čtenáři, je totiž poměrně jednoduchá - stačí
použít počítaný cyklus, slovo <strong>TYPE</strong> a nezapomenout na uložení
délky řetězce na zásobník operandů.</p>

<p>Při zápisu zdrojových textů se často používají dvě slova uvozující poznámku.
První slovo se zapisuje <strong>\</strong> a značí, že se ignoruje zbytek
aktuálního řádku (tj. podobně jako v C-čku znaky <strong>//</strong>). Druhé
slovo, které se zapisuje jako <strong>\S</strong> způsobí, že se ignoruje text
až do konce aktuální obrazovky. Pokud je tedy toto slovo uvedeno na prvním
řádku, je celá obrazovka považována za komentář.</p>



<p><a name="k04" id="k04"></a></p>
<h2>4. Pokročilé formátování výstupu</h2>

<p>Prozatím jsme si při výpisu číselných hodnot ukázali slova, pomocí kterých
je možné tisknout hodnoty zarovnané doleva (slovo <strong>.</strong>) a doprava
(slovo <strong>.R</strong>). Forth však umožňuje formátovat číselné hodnoty na
úrovni jednotlivých znaků, což je vlastnost, kterou neposkytuje žádný jiný
vyšší programovací jazyk.</p>

<p>Základními slovy, které se při formátování používají, jsou:</p>

<ol>

<li><strong>&lt;#</strong> - toto slovo označuje začátek formátování/výpisu</li>

<li><strong>#&gt;</strong> - opak předchozího slova, tj. konec formátování/výpisu</li>

<li><strong>#</strong> - toto slovo se na výstupu nahradí jednou cifrou z převáděné hodnoty</li>

<li><strong>#S</strong> - výpis zbytku čísla, tj. všech dosud nevytištěných
cifer</li>

<li><strong>HOLD</strong> - přímý tisk znaku, jehož kód je uložen na vrcholu
zásobníku operandů</li>

<li><strong>[CHAR]</strong> - následující znak je převeden na interní kód
(většinou ASCII) a posléze uložen na zásobník operandů. Používá se v
součinnosti se slovem <strong>HOLD</strong>.</li>

<li><strong>SIGN</strong> - pokud je zpracovávaná hodnota záporná, vypíše se
znak - (minus).</li>

</ol>

<p>Při formátování čísel se bere do úvahy nastavená báze (základ číselné
soustavy), protože převod čísla na jednotlivé cifry se děje postupným
prováděním operací dělení a modulo, přičemž se zpracovávaná hodnota postupně
dělí nastavenou bází. Veškeré výpočetní operace přitom probíhají nad čísly bez
znaménka uloženými v dvojitém rozsahu.</p>

<p>Dále si musíme uvědomit, že převod probíhá pozpátku, tj. od cifry v
nejnižším řádu až po řád nejvyšší. V desítkové soustavě to znamená, že se
nejdříve zpracují jednotky, potom desítky, následně stovky atd.</p>

<p>Ukažme si některé jednoduchá slova určená pro formátování čísel. Začneme
prakticky nejjednodušším slovem, které pouze vypíše hodnotu celého čísla v
dvojnásobném rozsahu bez znaménka. Slovo nazveme <strong>UINT.</strong> (ve
Forthu je zvykem dávat slovům, které provádí tisk hodnot, na konec tečku):</p>

<pre>

: uint. &lt;# #s #&gt; type cr ;

</pre>

<p>Použití tohoto slova je snadné, pouze nesmíme zapomenout provést převod
čísla z jednoduchého rozsahu do rozsahu dvojitého:</p>

<pre>

123 s&gt;d uint.

</pre>

<p>Převod čísel z jednoduchého rozsahu je samozřejmě možné provést i uvnitř
slova, zamezí se tak vzniku chyb v případě, že programátor na převod zapomene
(v tomto případě by se ze zásobníku odstranila ještě jedna položka):</p>

<pre>

: uint2. s&gt;d &lt;# #s #&gt; type cr ;

</pre>

<p>Příklad použití:</p>

<pre>

123 uint2.

</pre>



<p><a name="k05" id="k05"></a></p>
<h2>5. Výpis telefonních čísel</h2>

<p>Ukažme si složitější příklad na formátování výstupu. Máme za úkol vypsat
telefonní číslo tak, aby poslední trojčíslí bylo odděleno znakem - (pomlčka).
Pokud si uvědomíme skutečnost, že se jednotlivé cifry generují pozpátku, je
řešení přímočaré.  Trojice slov <strong>[char] - hold</strong> slouží k výpisu
znaku "-" na zadanou pozici, slovo <strong>#</strong> vypíše vždy jednu cifru a
slovo <strong>#S</strong> zbytek čísla (obecně nevíme, kolik bude mít telefonní
číslo cifer:</p>

<pre>

: phone. &lt;# # # # [char] - hold #s #&gt; type cr ;

</pre>

<p>Pro otestování slova <strong>phone.</strong> je možné zadat příkaz:</p>

<pre>

12345678 s&gt;d phone.

</pre>

<p>Výpis:</p>

<pre>

12345-679

</pre>



<p><a name="k06" id="k06"></a></p>
<h2>6. Výpis data a času</h2>

<p>Dalším nově nadefinovaným slovem je slovo <strong>DATE.</strong>, které
slouží k výpisu data, které je uloženo ve formátu <em>ddmmrrrr</em>. Při výpisu
data musíme mezi dny, měsíce a roky vložit vhodný oddělovač, v našich končinách
je to podle ČSN tečka. Slovo <strong>DATE.</strong> tedy musí nejprve vypsat
čtyři cifry s rokem (výpis se provádí odzadu), potom vypsat oddělovací znak,
dvě cifry s měsícem, opět oddělovací znak a posléze jednu nebo dvě cifry s
pořadovým číslem dne v měsíci:</p>

<pre>

: date. &lt;# # # # # [char] . hold # # [char] . hold #s #&gt; type cr ;

</pre>

<p>Test tohoto slova je stejně snadný, jako u předchozího slova
<strong>PHONE.</strong>:</p>

<pre>

17111989 s&gt;d date.
17.11.1989

</pre>

<p>Složitější slovo je použito pro výpis času. V tomto případě není čas zadán
symbolicky (jako v případě data), ale jako počet sekund od půlnoci, protože
takto je možné s časovým údajem provádět různé matematické operace. Při převodu
se tedy musí při rozdělování času na jednotlivé cifry měnit číselná báze. Pro
jednotky sekund a minut se použije desítková soustava, pro "desítky" sekund a
minut soustava šestková (aby se správně generovaly i vyšší jednotky). Jelikož
je tento problém rozsáhlejší, je výhodnější provést jeho rozdělení na více
jednoduchých slov.</p>

<p>Slovo <strong>BASE6</strong> slouží k přepnutí na šestkovou soustavu, zpět
na desítkovou soustavu je možné použít slovo <strong>DECIMAL</strong>. Slovo
<strong>OO</strong> vypíše dvě cifry, před něž se vloží znak dvojtečky
(oddělovač hodin, minut a sekund) a konečně slovo <strong>TIME.</strong>
provede převod jednotek a veškeré formátování:</p>

<pre>

: base6 6 base ! ;
: OO # base6 # decimal [char] : hold ;
: time. s&gt;d &lt;# OO OO #s #&gt; type cr ;

</pre>

<p>Příklady použití tohoto slova:</p>

<pre>

60 time.
0:01:00

120 time.
0:02:00

1210 time.
0:20:10

123456 time.
34:17:36

</pre>

<p>Jak je z výše uvedených slov <strong>DATE.</strong> a <strong>TIME.</strong>
patrné, je formátování číselných hodnot ve Forthu poměrně snadné, protože máme
k dispozici všechna slova, která se interně používají v samotném interpretru.
Zejména možnost měnit základ číselné soustavy v průběhu formátování je v naší
civilizaci (která chaoticky používá mnoho číselných soustav) velmi vítaná.</p>



<p><a name="k07" id="k07"></a></p>
<h2>7. Obsah dalšího pokračování</h2>

<p>V dalším pokračování tohoto seriálu dokončíme rozsáhlou část věnovanou
programovacímu jazyku Forth a v navazujících dílech si popíšeme související
oblasti, zejména problematiku zásobníkových procesorů.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small></p>
</body>
</html>

