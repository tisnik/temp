<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory IX</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Forth a zásobníkové procesory IX</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h2>Úvodník</h2>

<p>Dnešní díl seriálu o programovacím jazyce Forth je věnován popisu slov,
které je možné použít pro základní vstupně-výstupní operace (včetně základního
formátování výstupu) a pro práci s externími soubory. Také si uvedeme
vlastnosti paměťových oblastí TIB a PAD spolu se způsobem jejich využití.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Paměťové oblasti TIB a PAD</a><br />
<a href="#k02">2. Konstantní řetězce</a><br />
<a href="#k03">3. Tisk číselných hodnot a řetězců</a><br />
<a href="#k04">4. Základ číselné soustavy</a><br />
<a href="#k05">5. Načítání řetězců</a><br />
<a href="#k06">6. Práce se soubory</a><br />
<a href="#k07">7. Obsah dalšího pokračování</a><br />
</p>



<p><a name="k01" id="k01"></a></p>
<h2>1. Paměťové oblasti TIB a PAD</h2>

<p>Pro vstupní a výstupní operace se ve Forthu používají dvě paměťové oblasti,
které jsou již tradičně nazývané <em>TIB</em> a <em>PAD</em>. Pochopení významu
těchto oblastí nám objasní některé interní činnosti, které se ve Forthu při
vstupně/výstupních operacích provádí. Pojďme se tedy podívat tvůrcům tohoto
jazyka pod pokličku.</p>

<p>Název paměťové oblasti <em>TIB</em> vychází z anglického sousloví
<em>Terminal Input Buffer</em> a jak již samotný název napovídá, jedná se o
oblast, do které se načítají řetězce zadané uživatelem z klávesnice či přečtené
z jiného vstupního zařízení. Samotný Forth tuto oblast také používá, zejména
pro rozdělení uživatelem zadaného řetězce na jednotlivá slova. <em>TIB</em> je
samozřejmě možné přímo adresovat, používat různá specifická slova pro
rozpoznání lexikálních prvků (typicky <strong>REFILL</strong>, v některých
implementacích i <strong>NUMBER</strong> apod.) a dokonce je možné <em>TIB</em>
používat jako dočasný úložný prostor pro větší množství dat.</p>

<p>Toto použití sice není doporučováno (viz například standard ANS-Forth),
protože se <em>TIB</em> často přemazává během vlastní interpretace, ale zejména
v malých vestavěných systémech je možné paměť alokovanou pro <em>TIB</em>
prakticky zadarmo využít i pro další účely. V jiných programovacích jazycích
takovou možnost většinou nemáme (vzpomeňme například na poněkud tajnůstkářské
<strong>scanf()</strong> v C-čku nebo <strong>readln</strong> v Pascalu, u
kterých není zřejmé, co a kde se alokuje a dealokuje). Obě paměťové oblasti
mohou mít buď konstantní velikost, nebo je jejich velikost proměnná v
závislosti na ostatních paměťových oblastech (například obou Forthských
zásobnících a slovníku). V každém případě je možné velikost oblasti
<em>TIB</em> zjistit pomocí slova <strong>TIB#</strong>, které uloží počet
právě alokovaných buněk na zásobník operandů.</p>

<p>Paměťová oblast <em>PAD</em> získala svůj název z anglického slova
<em>scratch-pad</em>, což lze volně přeložit jako "čmárací blok". Tuto oblast
používá Forth při formátování výstupu, například pro rozdělení čísla na
jednotlivé znaky. Podobně jako <em>TIB</em>, je i <em>PAD</em> možné použít pro
dočasné uložení hodnot, ale opět záleží na programátorově umu a zkušenostech
rozpoznat, kdy bude oblast <em>PAD</em> systémem přemazána - Forth nám při
práci neklade prakticky žádné překážky, ale musíme přesně vědět, co
děláme...</p>

<p>Některá slova, která budou popsána v dalším textu, využívají jednu z oblastí
<em>TIB</em> či <em>PAD</em>. Zejména se jedná o slova používaná pro načítání a
výstup řetězců nebo číselných hodnot.</p>

<p>Poznámka: některé dnešní implementace Forthu <em>TIB</em> a <em>PAD</em>
nepoužívají v klasickém významu, což může negativně ovlivnit přenositelnost
dříve vytvořených programů. Pokud se však na obě oblasti díváme jako na pole,
není problém je pomocí slova <strong>ALLOT</strong> alokovat v operační paměti
počítače na nějakou "rozumnou" velikost:</p>

<pre>

create PAD 512 allot
create TIB 512 allot

</pre>

<p>Je samozřejmé, že do takto vytvořených paměťových oblastí (polí) nebude Forth nijak zasahovat.</p>



<p><a name="k02" id="k02"></a></p>
<h2>2. Konstantní řetězce</h2>

<p>Slova pro tvorbu konstantních řetězců jsme si uvedli již v předchozích
částech tohoto seriálu. Zde si pouze zopakujme, že řetězec lze ve Forthu
vytvořit několika různými způsoby. Buď se jedná o pole bytů, kde v prvním byte
je uložena délka řetězce, nebo se jedná o řetězec ukončený speciálním znakem
(například nulou, podobně jako v C-čku). Třetí možnost představuje řetězec,
jehož délka je uložena ve zvláštní proměnné, nezávisle na umístění vlastního
řetězce v operační paměti. Při práci s třetím typem řetězce se na zásobník
operandů musí uložit jak adresa prvního znaku v řetězci, tak i délka
řetězce.</p>

<p>Forth přímo obsahuje slova pro vytvoření konstantního řetězce prvního typu i
třetího typu. Řetězec prvního typu, který je v literatuře také nazývaný
počítaný řetězec (<em>counted string</em>), se vytváří pomocí slova
<strong>C"</strong> a omezujícího znaku <strong>"</strong> následujícím
způsobem:</p>

<pre>

C" znaky řetězce"

</pre>

<p>Po provedení výše uvedené sekvence se v paměti vytvoří konstantní počítaný
řetězec a na zásobník operandů se uloží adresa tohoto řetězce. Zásobníkový
diagram slova <strong>C"</strong> je tedy možné zapsat následovně: <tt>( --
adresa)</tt>. Důležité je, že tento typ řetězce NENÍ možné přímo vytisknout
pomocí slova <strong>TYPE</strong>, neboť na zásobníku není uložena délka
řetězce, kterou slovo <strong>TYPE</strong> pro svou korektní činnost vyžaduje.
To znamená, že následující zápis je chybný:</p>

<pre>

C" chybný zápis" type cr

</pre>

<p>Stejně tak je chybný i zápis:</p>

<pre>

C"chybný řetězec"

</pre>

<p>Protože <strong>C"</strong> je slovo, které musí být od řetězce odděleno
alespoň jedním bílým znakem. Při tisku řetězce je nejprve nutné spočítat délku
řetězce pomocí slova <strong>COUNT</strong>, které současně zvýší i adresu
řetězce o jednotku, aby při tisku došlo k přeskočení bytu s délkou řetězce.
Teprve poté lze řetězec vypsat:</p>

<pre>

C" korektní zápis" count type cr

</pre>

<p>Třetí typ řetězce, tj. řetězce, u kterého je délka uložená přímo na
zásobníku operandů, se vytvoří pomocí slova <strong>S"</strong>, opět v
součinnosti s omezujícím znakem <strong>"</strong>. Slovo se používá následovně
(opět pozor na oddělení slova <strong>S"</strong> od vlastního řetězce pomocí
bílého znaku!):</p>

<pre>

S" znaky řetězce"

</pre>

<p>Po provedení tohoto slova je na zásobníku uložena jak počáteční adresa
řetězce (jehož první znak leží přímo na této adrese), tak i jeho délka.
Zásobníkový diagram tohoto slova tedy vypadá následovně: <tt>( -- adresa
n)</tt>, kde <em>n</em> je počet znaků v řetězci. Na takto vytvořený řetězec je
ihned možné zavolat slovo <strong>TYPE</strong>:</p>

<pre>

S" korektní zápis" type cr

</pre>

<p>Jak je řetězec na zásobníku uložen nám ilustruje příklad:</p>

<pre>

S" pokus" . cr . cr

</pre>

<p>který vypíše jak délku řetězce, tak i jeho počáteční adresu (ta je
samozřejmě systémově závislá). Obě tyto hodnoty se přitom ze zásobníku
odstraní, takže řetězec je pro další operace nepoužitelný.</p>

<p>Poznámka: pro nedestruktivní čtení zásobníku je možné použít slovo
<strong>.S</strong> (tečka-S), které vypíše celý obsah zásobníku a případně i
celkový počet položek na zásobníku uložených. Konkrétní formát výstupu záleží
na použité implementaci Forthu, někdy se například setkáme s odlišnostmi při
výpisu prázdného zásobníku. Některé Forthy v tomto případě vypíšou slovo
<tt>&lt;empty&gt;</tt>, některé pouze <tt>0</tt> (nulu) a některé vůbec nic :-)
Podobně je při ladění vhodné používat slovo <strong>DEPTH</strong>, které na
zásobník vloží počet položek na zásobníku operandů před voláním tohoto
slova.</p>



<p><a name="k03" id="k03"></a></p>
<h2>3. Tisk číselných hodnot a řetězců</h2>

<p>Začněme nejprve tiskem řetězců bez specifikace formátu, které je velmi
snadné. Pro tento účel se používá výše zmíněné slovo <strong>TYPE</strong>,
které vyžaduje, aby byla na zásobníku operandů uložena adresa prvního znaku v
řetězci a délka řetězce. Počítané řetězce je nutné do tohoto formátu převést,
například pomocí slova <strong>COUNT</strong> - viz předchozí kapitola.</p>

<p>Základy tisku číselných hodnot také známe, jedná se o slovo
<strong>.</strong> (tečka), které vytiskne hodnotu uloženou na vrcholu
zásobníku operandů. Při čtení je hodnota ze zásobníku odstraněna, takže se
zejména při kontrolních tiscích používá spíše dvojice slov <strong>dup
.</strong>.</p>

<p>V mnoha případech, zejména při tisku jednoduchých tabulek, je zapotřebí
provést zarovnání číselných hodnot. K tomuto účelu se používá slovo
<strong>.R</strong>, jehož zásobníkový diagram vypadá následovně: <tt>(n1 n2
--)</tt>. Číselná hodnota <em>n1</em> je vypsána tak, že je zarovnána doprava,
přičemž je použito <em>n2</em> znaků (číslo je tedy zleva doplněno znakem
mezery). Příklad použití tohoto slova při tisku jednoduché tabulky:</p>

<pre>

1 10 .r cr 10 10 .r cr 100 10 .r cr -10 10 .r cr

</pre>

<p>dá výsledek:</p>

<pre>

         1
        10
       100
       -10
 ok

</pre>

<p>Kromě toho je pro tisk číselných hodnot možné použít i slova
<strong>.U</strong>, <strong>U.R</strong> a <strong>D.R</strong>. Slova
<strong>.U</strong> a <strong>U.R</strong> vytisknou hodnotu z vrcholu
zásobníku, která je přitom chápána jako bezznaménková hodnota (<em>unsigned
integer</em>). Slovo <strong>D.R</strong> slouží k tisku doprava zarovnaných
hodnot uložených ve dvojitém rozsahu.</p>

<p>Veškerý tisk číselných hodnot je ovlivněn základem číselné soustavy, který
nemusí být nutně desítkový. Více se o číselných soustavách dozvíte v
následující kapitole.</p>



<p><a name="k04" id="k04"></a></p>
<h2>4. Základ číselné soustavy</h2>

<p>Ve Forthu je možné číselné hodnoty zadávat i tisknout v různých číselných
soustavách -- od binární soustavy po soustavu o základu 36. Nastavená číselná
soustava ovlivňuje vlastní interpreter Forthu a zejména pak slova pro vstup a
výstup čísel (například slovo <strong>.</strong>). Číselná soustava se zvolí
buď zápisem nové hodnoty do slova/proměnné <strong>BASE</strong> nebo použitím
některého z následujících slov pro vybrané (nejpoužívanější) číselné
soustavy:</p>

<ul>
<li><strong>bin</strong> - binární soustava</li>
<li><strong>decimal</strong> - desítková soustava (je nastavena jako implicitní)</li>
<li><strong>oct</strong> - osmičková soustava</li>
<li><strong>hex</strong> - hexadecimální soustava</li>
</ul>

<p>Pokud některé z výše zmíněných slov ve slovníku Forthu chybí (typicky se
jedná o slovo <strong>oct</strong>), není problém si je dodefinovat:</p>

<pre>

: bin 2 base ! ;
: decimal 10 base ! ;
: oct 8 base ! ;
: hex 16 base ! ;

</pre>

<p>Poněkud zvláštní je číselná soustava o základu 36, protože pro vyjádření
jedné cifry se musí provést výběr jak ze všech číslic 0-9, tak i veškerých
znaků abecedy A-Z. Z toho důvodu může být někdy výhodné uchovávat krátké
řetězce do délky 6ti znaků (36<sup>6</sup> je méně než 2<sup>32</sup>) v
celočíselných proměnných.</p>



<p><a name="k05" id="k05"></a></p>
<h2>5. Načítání řetězců</h2>

<p>Pro načítání řetězců z klávesnice či jiného nastaveného vstupního zařízení
se ve Forthu používá slovo <strong>EXPECT</strong>. Před použitím tohoto slova
se na zásobník operandů musí uložit adresa paměti, do které se načtený řetězec
uloží, a také maximální počet znaků, který bude uložen. Použití tohoto slova je
tedy bezpečnější než C-čkovské <em>gets()</em>, protože při korektně nastavené
délce řetězce nemůže dojít k přepsání cizí paměti.</p>

<p>Alternativní způsob načítání řetězců spočívá v použití slova
<strong>KEY</strong>, pomocí kterého se přečte z klávesnice jeden znak, jehož
ASCII kód se uloží na zásobník operandů. Pokud se bude čtení pomocí
<strong>KEY</strong> provádět ve smyčce až do dosažení stanoveného počtu znaků
či po dosažení konce dat, je možné simulovat výše uvedené slovo
<strong>EXPECT</strong>.</p>



<p><a name="k06" id="k06"></a></p>
<h2>6. Práce se soubory</h2>

<p>V této kapitole si uvedeme slova, která je možné použít pro manipulaci se
soubory. Tato slova mohou být vytvořena a používána především na těch
platformách, které disponují paměťovými médii, na kterých je vytvořen klasický
souborový systém (jedná se tedy o Unixy, různé DOSy, Microsoft Windows aj.). Na
platformách, které média se souborovým systémem neobsahují, je většinou
výhodnější přímo přistupovat k jednotlivým blokům o velikosti 1024 byte.
Princip práce s bloky dat, jež je typická zejména pro vestavěné systémy, bude
vysvětlen v následující části tohoto seriálu.</p>

<p>Vzhledem k tomu, že Forth byl implementován na velkém množství vzájemně
značně odlišných systémů, byla na různých systémech použita různá slova pro
práci se soubory, nebo slova se stejným jménem ale s jiným chováním. Vzniklý
chaos, který trval cca deset let, byl vyřešen až v <em>ANS-Forth</em>u, ve
kterém jsou předepsána následující slova, která lze pro práci se soubory použít
(všimněte si, že všechna dále zmíněná slova končí na suffix -FILE):</p>

<ul>

<li><strong>CREATE-FILE</strong> <tt>(adresa_řetězce délka_řetězce fam -- handle kód_chyby)</tt><br />
Pomocí tohoto slova je možné vytvořit a otevřít nový soubor. Před zavoláním
slova musí být na zásobníku operandů uloženy tři hodnoty. První hodnota značí
adresu řetězce, ve kterém je uloženo jméno vytvářeného souboru. Ve druhé
hodnotě je uložena délka řetězce. Třetí hodnota, která je ve skutečnosti
uložena na vrcholu zásobníku operandů, obsahuje mód otevření souboru, jež je
reprezentován například slovy <strong>R/O</strong> nebo <strong>R/W</strong>.
Po provedení operace se na zásobník uloží takzvaný handle souboru (číselná
hodnota, kterou vrací operační systém) a kód chyby, která při otevírání souboru
případně nastane. V případě, že se vytvoření souboru podařilo bez chyby, je
navrácena nulová hodnota.</li>

<li><strong>DELETE-FILE</strong> <tt>(adresa_řetězce délka_řetězce -- kód_chyby)</tt><br />
Toto slovo je určeno pro vymazání již existujícího souboru. Podobně jako u
předcházejícího slova <strong>CREATE-FILE</strong>, i zde musí být na zásobníku
operandů uložena adresa řetězce s názvem souboru a délka tohoto řetězce.</li>

<li><strong>OPEN-FILE</strong> <tt>(adresa_řetězce délka_řetězce fam -- handle kód_chyby)</tt><br />
Toto slovo slouží k otevření souboru pro čtení či pro zápis. Operandy
<em>adresa_řetězce</em> a <em>délka_řetězce</em> opět určují řetězec obsahující
jméno souboru, v posledním operandu <em>fam</em> je hodnota obsahující mód
otevření souboru (<strong>R/O</strong>...). Po provedení tohoto slova jsou na
zásobník operandů uloženy hodnoty stejné, jako v případě slova
<strong>CREATE-FILE</strong>.</li>

<li><strong>CLOSE-FILE</strong> <tt>(handle -- kód_chyby)</tt><br />
Pomocí tohoto slova se uzavře soubor, který je v běžícím systému identifikovaný
svým handlem. Po provedení slova se na zásobník operandů uloží kód chyby nebo
nula v případě, že žádná chyba při uzavírání souboru nenastala.
</li>

<li><strong>READ-FILE</strong> <tt>(adresa délka handle -- kód_chyby)</tt><br />
Toto slovo slouží k přečtení dat z otevřeného souboru. Před zavoláním tohoto
slova musí být na zásobníku operandů uložena adresa, od které se budou
zapisovat přečtená data, délka čtené sekvence a handle souboru (otevřeného pro
čtení či pro čtení/zápis).
</li>

<li><strong>WRITE-FILE</strong> <tt>(adresa délka handle -- kód_chyby)</tt><br />
Zápis po sobě jdoucí sekvence hodnot do souboru, který je určen svým handlem.
Po provedení tohoto slova je na vrchol zásobníku vrácen kód chyby.
</li>

<li><strong>FILE-POSITION</strong> <tt>(handle -- pozice kód_chyby)</tt><br />
Toto slovo slouží k získání aktuální pozice, ze které se provádí čtení nebo
naopak zápis do souboru.
</li>

<li><strong>FILE-SIZE</strong> <tt>(handle -- velikost kód_chyby)</tt><br />
Po provedení tohoto slova je na vrchol zásobníku operandů vložena délka
zpracovávaného souboru.
</li>

<li><strong>FILE-EXISTS</strong> <tt>(adresa_řetězce délka_řetězce  -- příznak)</tt><br />
Test, zda soubor se zadaným jménem existuje. Výsledkem testu je hodnota
<strong>TRUE</strong> nebo <strong>FALSE</strong>.
</li>

<li><strong>READ-LINE</strong> <tt>(adresa délka handle -- u2 flag kód_chyby)</tt><br />
Přečtení celého řádku textu (řetězcově orientovaný přístup do souboru).
</li>

<li><strong>WRITE-LINE</strong> <tt>(adresa délka handle -- kód_chyby)</tt><br />
Zápis celého řádku textu (opět se jedná o řetězcově orientovaný přístup do
souboru).
</li>

</ul>

<p>Výše popsaná slova je možné použít podobným způsobem, jaký je ukázán v
následujících sekvencích kódu. Nejprve si zkusme nadefinovat slovo pro
vytvoření souboru s konkrétním jménem:</p>

<pre>

: pokus-se-soubory 
    s" test.txt" r/w create-file
    abort" Nepovedlo se vytvořit soubor"
;

</pre>

<p>V nově vytvořeném slovu <strong>pokus-se-soubory</strong> je použito slovo
<strong>ABORT"</strong>, které provádí dvě činnosti. Nejprve přečte hodnotu ze
zásobníku operandů a pokud je zde uložená hodnota nenulová, zobrazí se text
uvedený ihned za tímto slovem (text je ukončený omezujícím znakem
<strong>"</strong>) a celý běh programu se ukončí. Vzhledem k tomu, že
návratový kód slova <strong>CREATE-FILE</strong> je v případě chyby nenulový,
bude <strong>ABORT</strong> velmi jednoduše nahrazovat podmínku současně s
výpisem chyby a ukončením běhu programu.</p>

<p>Dále si můžeme všimnout použití slova <strong>R/W</strong>, kterým je
definován mód otevření souborů. Pokud se má soubor otevřít pouze pro čtení, lze
použít slovo <strong>R/O</strong>, otevření pro čtení i zápis dosáhneme slovem
<strong>R/W</strong> a otevření pouze pro zápis se zabezpečí slovem
<strong>W/O</strong>. Tato slova jsou ve skutečnosti konstantami, tj. po jejich
uvedení v programu se na zásobník uloží nějaká předem zadaná konstantní hodnota
(systémově závislá).</p>

<p>Otevření souboru je stejně snadné jako vytvoření nového souboru:</p>

<pre>

: pokus-se-soubory 
    s" test.txt" r/w open-file
    abort" Nepovedlo se vytvořit soubor"
;

</pre>

<p>Pro zápis řetězce se jménem souboru je opět použito slovo
<strong>s"</strong> spolu se "zarážkou" na konci řetězce - <strong>"</strong>.
Místo konstantního řetězce je samozřejmě možné použít i řetězcovou proměnnou,
kdy se na zásobník uloží počáteční adresa řetězce.</p>



<p><a name="k07" id="k07"></a></p>
<h2>7. Obsah dalšího pokračování</h2>

<p>V následující části tohoto seriálu bude uveden zejména způsob práce s
blokovými paměťovými médii. Dále se budeme zabývat velmi zajímavou vlastností
Forthu - pokročilému formátování řetězců na výstupu.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small></p>
</body>
</html>

