<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyky určené pro výuku programování</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyky určené pro výuku programování</h1>

<h3>Pavel Tišnovský</h3>

<h1>Úvodník</h1>

<p>V&nbsp;dnešním článku si jako malou oslavu konce školního roku :-) stručně popíšeme některé programovací jazyky, které byly vytvořeny za účelem výuky programování. Jedná se jak o jazyky určené pro školní a v&nbsp;některých případech dokonce i pro předškolní děti, tak i o jazyky směrované spíše k&nbsp;výuce na středních a odborných vysokých školách.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyky určené pro výuku programování</a></p>
<p><a href="#k02">2. Programovací jazyk Logo</a></p>
<p><a href="#k03">3. Želví grafika a její vliv na další vývoj výukových programovacích jazyků</a></p>
<p><a href="#k04">4. Ukázka použití programových smyček, rekurze a želví grafiky v&nbsp;LOGU</a></p>
<p><a href="#k05">5. KROK, VLEVO, KROK, KROK, ZVEDNI: programovací jazyk Karel</a></p>
<p><a href="#k06">6. Řešení algoritmizovatelných problémů v&nbsp;programovacím jazyku Karel</a></p>
<p><a href="#k07">7. Obsah následující části článku</a></p>
<p><a href="#k08">8. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Programovací jazyky určené pro výuku programování</h2>

<p>V&nbsp;dnešním článku, který shodou okolností vychází právě v&nbsp;první den
letních prázdnin (popravdě řečeno se o úplnou náhodu nejedná ;-), si popíšeme
některé známé i méně známé programovací jazyky a jejich dialekty, které byly
navrženy pro výuku programování, algoritmizace, programovacích technik a
v&nbsp;některých případech též návrhu datových struktur. Není bez zajímavosti,
že mnohé z&nbsp;těchto jazyků jsou použity v&nbsp;projektech typu <i>One Laptop
per Child (OLPC)</i>. Některé z&nbsp;dále popsaných programovacích jazyků jsou
určeny pro předškolní děti, popř.&nbsp;pro děti na prvním stupni základních
škol. I přes zdánlivou jednoduchost jsou však některé z&nbsp;těchto jazyků
překvapivě efektivní i pro tvorbu složitějších aplikací, samozřejmě
v&nbsp;závislosti na tom, jaké knihovny daný programovací jazyk či jeho
implementace obsahuje (například tvorba jednodušší hry v&nbsp;dále zmíněném
systému <i>Scratch</i> je i pro začínajícího programátora otázkou několika
desítek minut). Jedním z&nbsp;těchto jednodušších programovacích jazyků je i
jazyk <i>Karel</i> (pojmenovaný po spisovateli Karlu Čapkovi), jehož základní
vlastnosti i různá rozšíření budou popsány v&nbsp;navazujících kapitolách.</p>

<a href="http://i.iinfo.cz/images/402/lang-01-a-1.png"><img src="http://i.iinfo.cz/images/402/lang-01-a-1-prev.png" width="301" height="270" alt=" " /></a>
<p><i>Obrázek 1: Jedna z&nbsp;variant vývojového prostředí programovacího
jazyka Karel.</i></p>

<p>Zajímavé však je, že například několik prvních týdnů výuky metodiky
programování na Stanfordské universitě je věnováno zdánlivě velmi jednoduchému
programovacímu jazyku <i>Karel</i>, s&nbsp;pomocí něhož se studenti seznamují
se základy programování a teprve v&nbsp;navazujících týdnech (a samozřejmě i
v&nbsp;mnoha pokročilejších kurzech) se přechází na složitější universální i
specializované programovací jazyky. Ostatně sami můžete tento kurz alespoň
virtuálně navštívit &ndash; jednotlivé lekce úvodního kurzu do programování na
Stanfordské universitě jsou dostupná online: <a
href="http://academicearth.org/lectures/programming-methodology-handout-information">Introduction
to Karel</a> (prvních několik minut je věnováno organizaci výuky, vlastní popis
programovacího jazyka <i>Karel</i> začíná až od cca páté minuty). U některých
současných dialektů tohoto programovacího jazyka se jejich podoba
s&nbsp;původním <i>Karlem</i> hledá již velmi nesnadno &ndash; příkladem mohou
být například rozsáhlé virtuální světy s&nbsp;mnoha samostatně
programovatelnými entitami či na druhé straně spektra tuzemský jazyk
<i>Baltík</i>, v&nbsp;němž se příkazy nemusí zadávat textově, ale pomocí
ikon.</p>

<a href="http://i.iinfo.cz/images/402/lang-01-a-2.png"><img src="http://i.iinfo.cz/images/402/lang-01-a-2-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 2: Grafické uživatelské rozhraní aplikace Imagine Logo, což je
jedna z&nbsp;moderních variant Loga.</i></p>

<p>Jiným příkladem může být například programovací jazyk <i>LOGO</i>, jehož
některé verze jsou používány i mnoha váženými vědci při programování různých
simulací, expertních systémů nebo systémů umělé inteligence &ndash; <i>AI</i>.
Další programovací jazyky, s&nbsp;nimiž se dnes alespoň ve stručnosti
seznámíme, jsou určeny spíše pro výuku programování či algoritmizace na
středních či vysokých školách, což je případ dnes již poněkud zastaralého
<i>Pascalu</i>, který je postupně nahrazován jinými programovacími jazyky, ať
již dynamicky typovanými (<i>Python</i>, různými verzemi <i>Lispu</i> a
<i>Scheme</i> či na některých universitách <i>Scalou</i> a <i>Groovy</i>) nebo
některým zástupcem &bdquo;mainstreamových&ldquo; programovacích jazyků,
především <i>Javou</i> a <i>C#</i>. Výčet dnes uvedených programovacích jazyků
určených pro výuku programování samozřejmě není úplný, takže se
s&nbsp;některými dalšími jazyky, vývojovými prostředími či nadstavbami obecných
programovacích jazyků seznámíme v&nbsp;navazujícím článku.</p>

<a href="http://i.iinfo.cz/images/402/lang-01-a-3.png"><img src="http://i.iinfo.cz/images/402/lang-01-a-3-prev.png" width="370" height="217" alt=" " /></a>
<p><i>Obrázek 3: Rozhraní projektu Squeak založeného na Smalltalku.</i></p>



<p><a name="k02"></a></p>
<h2>2. Programovací jazyk Logo</h2>

<p>Historicky jedním z&nbsp;prvních programovacích jazyků, který byl vyvinut
s&nbsp;ohledem na snadnou a efektivní výuku programování, je jazyk <i>Logo</i>,
jehož první verze vznikla již v&nbsp;roce 1967, tj.&nbsp;o celé desetiletí
dříve, než začaly být dostupné první typy domácích osmibitových počítačů,
jejichž vliv na výuku programování je značný. Někteří lidé sice považují tento
jazyk za pouhou dětskou hračku (určitou obdobu počítačových her), ovšem ve
skutečnosti se jedná o velmi zajímavý programovací jazyk, který je neustále
zdokonalován a používán, zejména na základních ale i středních školách, kde je
využíván jak pro výuku algoritmizace, tak i jako pomůcka při názorné výuce
geometrie. Programovací jazyk <i>Logo</i> je postaven na takzvané
<i>konstruktivní vzdělávací filozofií</i> a je navržen k&nbsp;podpoře
<i>konstruktivního učení</i>. Konstruktivismus vysvětluje znalosti a
dovednosti, jak jsou vytvořeny žáky v&nbsp;jejich vlastních myslích,
prostřednictvím vzájemné interakce s&nbsp;jinými lidmi a okolím. Tato zajímavá
teorie je spojena především se švýcarským psychologem Jeanem Piagetem, který
strávil mnoho času studováním a zdokumentováním procesu učení malých dětí.
S&nbsp;Piagetem spolupracoval i Seymour Papert, který později stál u vzniku
Loga.</p>

<img src="http://i.iinfo.cz/images/402/lang-01-a-4.png" width="272" height="540" alt=" " />
<p><i>Obrázek 4: UCB Logo je jedním z&nbsp;představitelů tradičních interpretrů
jazyka Logo, vybavený systémem pro práci se želví grafikou popsanou
v&nbsp;navazující kapitole. Tento interpret je dostupný pro většinu platforem,
samozřejmě včetně Linuxu.</i></p>

<p>Z&nbsp;programátorského hlediska je programovací jazyk <i>Logo</i> postaven
na podobných principech jako například jazyk <i>LISP</i> (ostatně není bez
zajímavosti, že první verze <i>Loga</i> byla implementována právě
v&nbsp;<i>LISPu</i>), ovšem jeho syntaxe je odlišná, což v&nbsp;případě
<i>Loga</i> vede k&nbsp;tvorbě čitelnějších programů, které se vizuálně
odlišují od Lispovského &bdquo;lesa závorek&ldquo;. Navíc se matematické a
logické výrazy v&nbsp;<i>Logu</i> zapisují v&nbsp;infixové podobě, na rozdíl od
formy prefixové používané <i>LISPem</i>. Tvorba programů v&nbsp;<i>Logu</i>
vede žáky k&nbsp;dekompozici problému na jednodušší podproblémy, ale i
k&nbsp;opačnému postupu &ndash; tvorbě nových slov (což jsou pouze jinak
pojmenované funkce), kterými se repertoár dostupných příkazů (slovník) postupně
rozšiřuje &ndash; jazyk se &bdquo;učí&ldquo; novým příkazům. <i>Logo</i> pro
řízení běhu programu nabízí standardní příkaz <strong>if</strong>,
popř.&nbsp;jeho plnou verzi <strong>ifelse</strong>.</p>

<img src="http://i.iinfo.cz/images/402/lang-01-a-5.png" width="400" height="400" alt=" " />
<p><i>Obrázek 5: Obrazec vzniklý pomocí želví grafiky a programu obsahujícího
dvojici vnořených programových smyček typu &bdquo;repeat&ldquo;.</i></p>

<p>Kromě toho jsou v&nbsp;mnoha interpretrech tohoto jazyka dostupné i příkazy
<strong>case</strong> a <strong>cond</strong>, které nahrazují v&nbsp;několika
ohledech běžnou programovou konstrukci typu <strong>switch-case</strong>. Pokud
však nějaký interpret <i>Loga</i> příkaz <strong>case</strong> či
<strong>cond</strong> neobsahuje (příkladem mohou být verze <i>Loga</i> určené
pro osmibitové mikropočítače), je možné ho doprogramovat &ndash; stačí si
uvědomit, že program je chápán jako (datový) seznam příkazů a podmínky je možné
zapsat formou výrazů, které se vyhodnotí na logickou nepravdu či pravdu. Na
tomto místě možná již začíná být zřejmé, že na první pohled zdánlivě jednoduchý
programovací jazyk ve skutečnosti umožňuje díky přímé manipulaci
s&nbsp;programem zavádět do syntaxe jazyka nové konstrukce, podobně jako je
tomu například v&nbsp;<i>LISPu</i>.</p></p>

<img src="http://i.iinfo.cz/images/402/lang-01-a-6.png" width="400" height="389" alt=" " />
<p><i>Obrázek 6: Ukázka použití želví grafiky v&nbsp;Logu.</i></p>

<p>Standardní <i>Logo</i> dále programátorům nabízí pouze jeden typ smyčky.
Jedná se o počítanou smyčku volanou příkazem <strong>repeat n</strong>, kde
<strong>n</strong> je výraz znamenající počet opakování těla smyčky. Tvůrci
Loga předpokládali, že se ostatní typy smyček nahradí rekurzí, podobně jako
v&nbsp;programovacích jazycích <i>LISP</i> a <i>Scheme</i>, a z&nbsp;tohoto
důvodu také žádné další typy smyček do interpretru nepřidávali (dokonce i
počítaná smyčka <strong>repeat</strong> v&nbsp;některých dialektech <i>Loga</i>
nepoužívá počitadlo, tj.&nbsp;proměnnou, která by se zvyšovala s&nbsp;počtem
opakování smyčky).</p>

<img src="http://i.iinfo.cz/images/402/lang-01-a-7.jpg" width="450" height="435" alt=" " />
<p><i>Obrázek 7: Další ukázka možností želví grafiky.</i></p>

<p>Ve většině moderních implementací Loga však můžeme narazit i na další typy
smyček, například počítanou smyčku <strong>for</strong>, <strong>while</strong>
(s&nbsp;podmínkou vyhodnocovanou na začátku smyčky) či
<strong>do-while</strong> (s&nbsp;podmínkou vyhodnocovanou naopak na konci těla
smyčky). Taktéž se můžeme poměrně často setkat se smyčkami typu
<strong>for-each</strong>, které jsou v&nbsp;<i>Logu</i> velmi užitečné,
zejména při práci se seznamy a textem (jenž je z&nbsp;historických důvodů
představován seznamem slov, nikoli jedním řetězcem).</p>

<img src="http://i.iinfo.cz/images/402/lang-01-a-8.jpg" width="450" height="435" alt=" " />
<p><i>Obrázek 8: Při tvorbě tohoto obrázku se, na rozdíl od obrázků
předchozích, již musely používat proměnné. Zajímavé je, že v&nbsp;Logu je možné
programovat poměrně dlouho bez znalosti proměnných (ostatně podobné je to
v&nbsp;případě programovacího jazyka Karel).</i></p>



<p><a name="k03"></a></p>
<h2>3. Želví grafika a její vliv na další vývoj výukových programovacích jazyků</h2>

<p>Jednou z&nbsp;nejznámějších a pro výuku algoritmizace taktéž
nejužitečnějších vlastností programovacího jazyka <i>Logo</i> je takzvaná
<strong>želví grafika</strong>, anglicky <strong>turtle graphics</strong>.
Právě želví grafika velkou mírou přispěla k&nbsp;poměrně značné oblíbenosti a
také rozšíření tohoto programovacího jazyka, především v&nbsp;zahraničním
školství. V&nbsp;USA se zpočátku <i>Logo</i> šířilo spolu s&nbsp;počítačem
Apple II a později Commodore C64 i Apple Macintosh, zatímco v&nbsp;Evropě se
děti poprvé s&nbsp;<i>Logem</i> seznámily na domácích osmibitových počítačích,
především na Atari, Spectru, v&nbsp;tuzemsku na PMD, Didaktiku, IQ 151 atd.
Pojďme si nyní říci základní informace o této zajímavé součásti <i>Loga</i> a
také o začlenění želví grafiky do dalších programovacích jazyků a aplikací
(želví grafika totiž byla tak úspěšná a přitom implementačně jednoduchá, že se
začala používat i mimo samotné <i>Logo</i>).</p>

<a href="http://i.iinfo.cz/images/402/lang-01-a-9.jpg"><img src="http://i.iinfo.cz/images/402/lang-01-a-9-prev.jpg" width="361" height="270" alt=" " /></a>
<p><i>Obrázek 9: Historický screenshot pořízený v&nbsp;jedné z&nbsp;prvních
verzí programovacího jazyka Logo.</i></p>

<p>Základem želví grafiky je virtuální želva (<i>turtle</i>), která se na
základě poměrně malé množiny příkazů dodávaných napsaným programem (skriptem)
či přímo pomocí interaktivního zápisu příkazů, pohybuje po obrazovce a přitom
za sebou vykresluje stopu složenou z&nbsp;úseček. Tato virtuální želva se tedy
chová podobně jako reálná želva, která se pohybuje po hladké pískové pláži a
zanechává za sebou stopu. Původní <i>Logo</i> nedisponovalo pouze virtuální
(vykreslovanou) želvou, ale skutečným malým robotem ve tvaru želvy, který byl
radiovým spojením propojen s&nbsp;řídicím počítačem a reagoval na základní
příkazy: pohyb vpřed, pohyb vzad, otočení doleva a otočení doprava. Navíc uměl
tento robot reagovat i na jeden &bdquo;multimediální&ldquo; příkaz &ndash;
zapnutí zvonku. Je zřejmé, že pro výuku malých dětí je pohybující se reálný
předmět mnohem zajímavější než pouhý obrázek, na druhou stranu však byl (prý)
pohyb robota poměrně nepřesný, zejména při otáčení.</p>

<img src="http://i.iinfo.cz/images/402/lang-01-a-10.png" width="427" height="498" alt=" " />
<p><i>Obrázek 10: Projekt NetLogo je sice založený na tradičním jazyku Logo,
ovšem rozšiřuje možnosti tohoto jazyka mnoha způsoby, zejména s&nbsp;ohledem na
možnost snadné tvorby různých simulací.</i></p>

<p>Dnešní implementace programovacího jazyka <i>Logo</i> většinou (kromě
několika komerčních distribucí, například LEGO/Loga a několika amatérských
projektů) touto možností již nedisponují, takže se budeme muset spokojit
s&nbsp;virtuální želvou pohybující se na obrazovce. V&nbsp;některých
implementacích Loga je želva zobrazena poměrně reálným obrázkem želvy viděné
z&nbsp;ptačí perspektivy (jedná se například o Atari Logo, Commenius Logo,
Imagine), většinou se však na obrazovce zobrazuje pouhý rovnoramenný
trojúhelník, podobně jako ve hrách typu Xpilot nebo Asteroids. Jednotlivé
implementace se od sebe také liší tím, zda za sebou želva stopu vykresluje
&bdquo;hlavičkou&ldquo;, svým středem či &bdquo;zadečkem&ldquo;.</p>

<a href="http://i.iinfo.cz/images/402/lang-01-a-11.png"><img src="http://i.iinfo.cz/images/402/lang-01-a-11-prev.png" width="319" height="270" alt=" " /></a>
<p><i>Obrázek 11: Simulace spuštěná v&nbsp;NetLogu.</i></p>

<p>To jsou však pouze kosmetické rozdíly, funkce želví grafiky tím není nijak
ovlivněna, což konkrétně znamená, že při zatáčení želvy nedochází ke kreslení
oblouku, ale pouze k&nbsp;ostrému lomu kreslené polyčáry. Význam želví grafiky
spočívá v&nbsp;tom, že pohyb želvy dává uživatelům (tj.&nbsp;především dětem)
okamžitou a vizuální odezvu na jejich programy, takže všechny chyby je poměrně
snadné ihned identifikovat (a někdy méně snadné opravit :-)). Díky želví
grafice se taktéž dají tvořit i poměrně složité programy bez použití proměnných
&ndash; jediným <i>stavem</i> běžícího procesu je pozice a natočení želvy
v&nbsp;ploše.</p>



<p><a name="k04"></a></p>
<h2>4. Ukázka použití programových smyček, rekurze a želví grafiky v&nbsp;LOGU</h2>

<p>V&nbsp;předchozí kapitole jsme si řekli, že virtuální želva zobrazená na
obrazovce dokáže reagovat na několik příkazů. Jedná se především o příkazy
<strong>left</strong> (natočení doleva o zadaný počet stupňů),
<strong>right</strong> (natočení doprava), <strong>forward</strong> (posun
želvy dopředu o zadaný počet kroků) a <strong>back</strong> (posun želvy zpět).
Plocha, po níž se želva pohybuje, má u většiny implementací rozměry
400&times;400 kroků, přičemž je možné nastavit, zda se želva z&nbsp;této plochy
může dostat ven (tj.&nbsp;kreslit mimo vyhrazenou oblast), nebo se při pokusu o
opuštění plochy objeví na druhé straně oblasti (takzvaný <i>wrapping</i>).
S&nbsp;využitím programové smyčky typu <strong>repeat</strong> a čtyř výše
zmíněných příkazů pro změnu stavu želvy je možné vykreslit překvapivě složité
obrazce, například květ, který si můžete prohlédnout na pátém obrázku (viz
předchozí kapitoly):</p>

<pre>
to kruznice :krok
    repeat 360 [
        forward :krok
        left 1
    ]
end

to kvet :pocet
    repeat :pocet [
        kruznice 1
        left 360/:pocet
    ]
end

draw
kvet 10
</pre>

<img src="http://i.iinfo.cz/images/402/lang-01-a-12.png" width="400" height="300" alt=" " />
<p><i>Obrázek 12: Takzvaná sněhová vločka Helge von Kocha je fraktální útvar,
který je možné v&nbsp;Logu vytvořit pomocí jednoduché rekurzivně volané
procedury.</i></p>

<p>Mnohem silnější nástroj, než je pouhé opakování části kódu pomocí programové
smyčky <strong>repeat</strong>, však představuje rekurze, která je samozřejmě
v&nbsp;<i>Logu</i> plně podporována. V&nbsp;následujícím příkladu je ukázáno,
jak lze rekurzi použít spolu s&nbsp;želví grafikou pro vykreslení fraktální
sněhové vločky <a href="http://en.wikipedia.org/wiki/Helge_von_Koch">Helge von
Kocha</a>:</p>

<pre>
to koch_curve :size :iteration
    ifelse :iteration&gt;0 [
        koch_curve :size/3 :iteration-1
        left 60
        koch_curve :size/3 :iteration-1
        right 120
        koch_curve :size/3 :iteration-1
        left 60
        koch_curve :size/3 :iteration-1
    ][  
        forward :size
    ]
end

to koch_snowflake :size :iteration
    repeat 3 [
        koch_curve :size :iteration
        right 120
    ]
end

; nastavení velikosti kreslicí plochy v Turtle Tracks
(draw 300 300)

; vykreslení pěti iterací sněhové vločky Helge von Kocha
koch_snowflake 100 5
</pre>

<img src="http://i.iinfo.cz/images/402/lang-01-a-13.png" width="400" height="300" alt=" " />
<p><i>Obrázek 13: Sněhová vločka Helge von Kocha &ndash; úroveň rekurze
nastavena na hodnotu 2.</i></p>

<p>Další příklady je možné si vyzkoušet přímo z&nbsp;webového prohlížeče na
adrese <a
href="http://www.sonic.net/~nbs/webturtle/">http://www.sonic.net/~nbs/webturtle/</a>,
viz například následující ukázky:</p>

<ol>
<li><a href="http://www.sonic.net/~nbs/webturtle/webturtle.cgi?file=kosmolov">http://www.sonic.net/~nbs/webturtle/webturtle.cgi?file=kosmolov</a></li>
<li><a href="http://www.sonic.net/~nbs/webturtle/webturtle.cgi?file=pinwheel">http://www.sonic.net/~nbs/webturtle/webturtle.cgi?file=pinwheel</a></li>
</ol>

<img src="http://i.iinfo.cz/images/402/lang-01-a-14.png" width="400" height="300" alt=" " />
<p><i>Obrázek 14: Sněhová vločka Helge von Kocha &ndash; úroveň rekurze
nastavena na hodnotu 3.</i></p>



<p><a name="k05"></a></p>
<h2>5. KROK, VLEVO, KROK, KROK, ZVEDNI: programovací jazyk Karel</h2>

<p>Dalším &bdquo;dětským&ldquo; programovacím jazykem, který se
v&nbsp;některých ohledech podobá výše zmíněnému <i>Logu</i>, je programovací
jazyk <i>Karel</i> pojmenovaný po Karlu Čapkovi na paměť jeho hry R.U.R. Tento
jazyk vytvořil v&nbsp;roce 1981 Richard E.&nbsp;Pattis a vzápětí po svém
uvedení se tento jazyk rozšířil na všechny v&nbsp;té době používané osmibitové
domácí mikropočítače. Není se čemu divit, protože se jedná o jazyk velmi
jednoduše implementovatelný (dokonce existovalo mnoho jeho implementací
v&nbsp;BASICu) a i jeho nároky na grafické schopnosti počítače jsou mnohem
menší než v&nbsp;případě programovacího jazyka <i>Logo</i>. Základem prostředí
<i>Karla</i> je dvourozměrná plocha rozdělená pravidelnou mřížkou na políčka,
po kterých se může pohybovat robot (nazvaný samozřejmě Karel :-). Některá
políčka mohou být obsazena zdí (nelze na ně tedy vkročit) nebo se na políčku
může nacházet takzvaná <i>značka</i> (v&nbsp;anglických implementacích nazvaná
<i>beeper</i>).</p>

<a href="http://i.iinfo.cz/images/156/lang-01-b-1.png"><img src="http://i.iinfo.cz/images/156/lang-01-b-1-prev.png" width="370" height="246" alt=" " /></a>
<p><i>Obrázek 15: Česká varianta programovacího jazyka Karel, která navíc
k&nbsp;původnímu jazyku přidává možnost práce s&nbsp;proměnnými.</i></p>

<p>Robota lze ovládat pomocí čtyř příkazů vypsaných v&nbsp;následující
tabulce:</p>

<table>
<tr><th>Příkaz</th><th>Význam</th></tr>
<tr><td>move      </td><td>přesun robota ve směru, kterým se dívá (S, J, Z, V) o jedno políčko</td></tr>
<tr><td>turnLeft  </td><td>otočení robota o 90&deg;doleva</td></tr>
<tr><td>putBeeper </td><td>položení značky na políčko, na němž se robot právě nachází</td></tr>
<tr><td>pickBeeper</td><td>zvednutí značky (pokud se na políčku nachází)</td></tr>
</table>

<a href="http://i.iinfo.cz/images/156/lang-01-b-2.jpg"><img src="http://i.iinfo.cz/images/156/lang-01-b-2-prev.jpg" width="370" height="257" alt=" " /></a>
<p><i>Obrázek 16: V&nbsp;projektu Greenfood lze mj.&nbsp;používat i dialekt
programovacího jazyka Karel.</i></p>

<p>Povšimněte si, že robot se zprvu nedokáže například otočit doprava nebo
chodit pozpátku &ndash; tyto &bdquo;vyspělé&ldquo; příkazy se musí teprve
naučit pomocí uživatelských procedur. Aby se robot mohl při procházení po
čtverečkové ploše zorientovat a zjistit, jaké je jeho okolí, má
k&nbsp;dispozici několik takzvaných <i>predikátů</i>, které lze použít jak
v&nbsp;podmíněných blocích při větvení programu, tak i jako podmínky pro
ukončení smyčky typu <strong>while</strong> (jiné typy smyček většinou nejsou
implementovány a ani nebývají zapotřebí). Základní predikáty jsou vypsány
v&nbsp;tabulce (identifikátory predikátů se však v&nbsp;různých implementacích
<i>Karla</i> mohou měnit):</p>

<table>
<tr><th>Predikát</th><th>Význam</th></tr>
<tr><td>IsBeeper</td><td>robot stojí na políčku se značkou</td></tr>
<tr><td>IsWall</td><td>před robotem se nachází zeď</td></tr>
<tr><td>IsNorth</td><td>robot je otočen směrem k&nbsp;severu, tj.&nbsp;k&nbsp;hornímu okraji obrazovky</td></tr>
</table>

<a href="http://i.iinfo.cz/images/156/lang-01-b-2.jpg"><img src="http://i.iinfo.cz/images/156/lang-01-b-2-prev.jpg" width="370" height="257" alt=" " /></a>
<p><i>Obrázek 17: Guido van Robot je adaptace Karla v&nbsp;programovacím jazyce
Python. Tento název má jeden skrytý význam &ndash; Guido (tvůrce Pythonu) se
příjmením jmenuje Rossum, což je současně i příjmení vynálezce robotů
z&nbsp;Čapkovy hry R.U.R.</i></p>



<p><a name="k06"></a></p>
<h2>6. Řešení algoritmizovatelných problémů v&nbsp;programovacím jazyku Karel</h2>

<p>Příkazy a predikáty uvedené v&nbsp;předchozí kapitole jsou doplněny ještě
příkazem pro tvorbu nových slov (<strong>Procedure</strong>
popř.&nbsp;<strong>Define</strong>) a taktéž příkazem pro tvorbu programové
smyčky <strong>while</strong> zapisovaným formou <strong>while
<i>predikát</i></strong> nebo <strong>while not <i>predikát</i></strong>. Tento
zdánlivě velmi jednoduchý jazyk, který například vůbec nezná pojem
&bdquo;proměnné&ldquo; nebo &bdquo;parametru funkce&ldquo;, je ve skutečnosti
možné použít pro řešení poměrně velkého množství různých algoritmizovatelných
problémů. Prvním úkolem, který většina začínajících programátorů musí vyřešit,
je naučení robota <i>Karla</i> novým příkazům a predikátům, například
<strong>turnRight</strong> (otočení robota doprava, realizováno třemi otočeními
doleva), <strong>back</strong> (krok směrem vzad &ndash; musí se implementovat
s&nbsp;využitím otočení vzad), <strong>frontIsClear</strong> (dotaz, zda je
políčko před robotem prázdné), <strong>leftIsClear</strong> (zda je políčko
nalevo od robota prázdné) atd.</p>

<a href="http://i.iinfo.cz/images/156/lang-01-b-3.png"><img src="http://i.iinfo.cz/images/156/lang-01-b-3-prev.png" width="311" height="270" alt=" " /></a>
<p><i>Obrázek 18: V&nbsp;prostředí Greenfoot je robot Karel představován
objektem, jehož stav je možné měnit pomocí metod pojmenovaných stejně či
podobně jako v&nbsp;původním jazyku Karel.</i></p>

<p>S&nbsp;využitím těchto příkazů je dále možné implementovat i tak složité
algoritmy, jako je průchod bludištěm (značky lze použít namísto Ariadniny
nitě), uklizení značek na jediné místo označené zdí popř.&nbsp;jinou značkou,
řešení problému N dam na šachovnici atd. Právě z&nbsp;tohoto důvodu se
programovací jazyk <i>Karel</i> poněkud překvapivě používá i na středních a
vysokých školách, i když se jedná, jak jsme sami viděli, o jazyk s&nbsp;pouhými
čtyřmi příkazy, trojicí predikátů a jedním typem programové smyčky. Jeden
z&nbsp;důvodů, proč je i takto jednoduchý jazyk použitelný pro tvorbu relativně
složitých algoritmů je ten, že celý stav běžícího programu je, podobně jako
v&nbsp;<i>Logu</i>, uložen ve formě pozice a orientace robota a taktéž pozic
značek a zdí v&nbsp;ploše rozdělené na políčka. Stav programu nelze ukládat
nikam jinam, což je zaručeno neexistencí proměnných a parametrů funkcí
(procedur).</p>

<img src="http://i.iinfo.cz/images/657/lang-01-ondra-1.png" width="326" height="281" alt=" " />
<p><i>Obrázek 19: Implementace programovacího jazyka Karel na československém
osmibitovém mikropočítači Ondra.</i></p>

<p>Animované ukázky řešení některých problémů Karlem lze najít například na
YouTube:</p>

<ol>
<li><a href="http://www.youtube.com/watch?v=Xjs4u1vglqM">Problém N dam na šachovnici</a></li>
<li><a href="http://www.youtube.com/watch?v=qjag374Xxo0">Nalezení prostředního prvku v&nbsp;řadě</a></li>
<li><a href="http://www.youtube.com/watch?v=FHOWdi9yvGE&feature=related">Procházení bludištěm 1</a></li>
<li><a href="http://www.youtube.com/watch?v=RpwWS5ZU03M&feature=related">Procházení bludištěm 2</a></li>
</ol>



<p><a name="k07"></a></p>
<h2>7. Obsah následující části článku</h2>

<p>Ve druhé části článku o programovacích jazycích vhodných pro výuku
programování se zaměříme především na jazyky, které kladou důraz na návrh
vhodné struktury dat popř.&nbsp;se s&nbsp;pomocí nich dá procvičit objektově
orientovaný návrh a objektově orientované programování. Zmíníme se jak o
klasickém výukovém jazyce <i>Pascal</i>, tak i o projektu <i>Squeak</i>, což je
implementace virtuálního stroje plně objektově orientovaného programovacího
jazyka Smalltalk s&nbsp;vlastním grafickým uživatelským rozhraním, knihovnami
pro práci s&nbsp;multimédii atd. Na <i>Squeaku</i> jsou založeny projekty
<i>Scratch</i> a <i>Etoys</i> určené jak pro výuku programování, tak i pro
snadnou a rychlou tvorbu multimediálních aplikací, především her (což je
samozřejmě pro děti mnohem zajímavější než stá implementace algoritmu pro
řazení prvků v&nbsp;poli :-). I o těchto projektech se příště zmíníme, protože
se v&nbsp;současnosti jedná o jedny z&nbsp;nejzajímavějších multimediálních
vývojových prostředí, které je možné ve školách či programátorských kroužcích
použít.</p>

<a href="http://i.iinfo.cz/images/156/lang-01-b-5.png"><img src="http://i.iinfo.cz/images/156/lang-01-b-5-prev.png" width="370" height="250" alt=" " /></a>
<p><i>Obrázek 20: Ve Squeaku je vše objektem &ndash; pravdivostní hodnoty,
čísla ale i geometrické tvary.</i></p>

<a href="http://i.iinfo.cz/images/156/lang-01-b-6.png"><img src="http://i.iinfo.cz/images/156/lang-01-b-6-prev.png" width="370" height="217" alt=" " /></a>
<p><i>Obrázek 21: Pracovní prostředí Squeaku se v&nbsp;mnoha ohledech odlišuje
od běžných programátorských vývojových prostředí (IDE).</i></p>



<p><a name="k08"></a></p>
<h2>8. Odkazy na Internetu</h2>

<ol>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a></li>

<li>Language Poster (O'Reilly):<br />
<a href="http://www.oreilly.com/news/graphics/prog_lang_poster.pdf">http://www.oreilly.com/news/graphics/prog_lang_poster.pdf</a></li>

<li>Informace o Comenius Logu:<br />
<a href="http://www.comlogo.input.sk/index.html">http://www.comlogo.input.sk/index.html</a></li>

<li>Stránka nabízející stažení Comenius Loga:<br />
<a href="http://www.comlogo.input.sk/nastiahnutie.html">http://www.comlogo.input.sk/nastiahnutie.html</a></li>

<li>Seminární práce o Comenius Logu:<br />
<a href="http://nwit.pedf.cuni.cz/rotal9ap/logo/">http://nwit.pedf.cuni.cz/rotal9ap/logo/</a></li>

<li>Informace o LEGO/Logu:<br />
<a href="http://education.otago.ac.nz/nzlnet/Logo/legologo.html">http://education.otago.ac.nz/nzlnet/Logo/legologo.html</a></li>

<li>Informace o systému Elica:<br />
<a href="http://www.elica.net/site/index.html">http://www.elica.net/site/index.html</a></li>

<li>Informace o systému NetLogo:<br />
<a href="http://ccl.northwestern.edu/netlogo/">http://ccl.northwestern.edu/netlogo/</a></li>

<li>Stažení NetLoga:<br />
<a href="http://ccl.northwestern.edu/netlogo/download.shtml">http://ccl.northwestern.edu/netlogo/download.shtml</a></li>

<li>Uživatelský manuál NetLoga ve formátu PDF:<br />
<a href="http://ccl.northwestern.edu/netlogo/docs/NetLogo%20User%20Manual.pdf">http://ccl.northwestern.edu/netlogo/docs/NetLogo%20User%20Manual.pdf</a></li>

<li>NetLogo FAQ:<br />
<a href="http://ccl.northwestern.edu/netlogo/docs/faq.html">http://ccl.northwestern.edu/netlogo/docs/faq.html</a></li>

<li>Domácí stránka Daniela Azumy (autora implementace Turtle Tracks):<br />
<a href="http://alumnus.caltech.edu/~dazuma/home/">http://alumnus.caltech.edu/~dazuma/home/</a></li>

<li>Informace o <i>aUCBLogu</i>:<br />
<a href="http://www.physik.uni-augsburg.de/~micheler/">http://www.physik.uni-augsburg.de/~micheler/</a></li>

<li>Domácí stránka MSW Loga:<br />
<a href="http://www.softronix.com/logo.html">http://www.softronix.com/logo.html</a></li>

<li>Karel online<br />
<a href="http://karel.oldium.net/">http://karel.oldium.net/</a>
</li>

<li>EDU-SIG: Python in Education<br />
<a href="http://www.python.org/community/sigs/current/edu-sig/">http://www.python.org/community/sigs/current/edu-sig/</a>
</li>

<li>Guido van Robot<br />
<a href="http://en.wikipedia.org/wiki/Guido_van_Robot">http://en.wikipedia.org/wiki/Guido_van_Robot</a>
</li>

<li>The Guido van Robot Programming Language<br />
<a href="http://gvr.sourceforge.net/">http://gvr.sourceforge.net/</a>
</li>

<li>An Introduction to Programming with Karel J. Robot<br />
<a href="http://blog.thingoid.com/2003/10/karel-intro/">http://blog.thingoid.com/2003/10/karel-intro/</a>
</li>

<li>Teaching a young robot new tricks<br />
<a href="http://blog.thingoid.com/2003/11/karel-new-tricks/">http://blog.thingoid.com/2003/11/karel-new-tricks/</a>
</li>

<li>Karel and Company - More Robots<br />
<a href="http://blog.thingoid.com/2003/12/karel-and-company/">http://blog.thingoid.com/2003/12/karel-and-company/</a>
</li>

<li>Karel heads for the stars<br />
<a href="http://blog.thingoid.com/2004/03/karel-star/">http://blog.thingoid.com/2004/03/karel-star/</a>
</li>

<li>Karel programming language documentation<br />
<a href="http://mormegil.wz.cz/prog/karel/prog_doc.htm">http://mormegil.wz.cz/prog/karel/prog_doc.htm</a>
</li>

<li>Karel J. Robot<br />
<a href="http://www.mainlandregional.net/dklipp/Honors%20Computer%20Science%20Java.htm">http://www.mainlandregional.net/dklipp/Honors%20Computer%20Science%20Java.htm</a>
</li>

<li>Karel (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Karel_(programming_language)">http://en.wikipedia.org/wiki/Karel_(programming_language)</a>
</li>

<li>Richard E. Pattis<br />
<a href="http://en.wikipedia.org/wiki/Richard_E._Pattis">http://en.wikipedia.org/wiki/Richard_E._Pattis</a>
</li>

<li>XKarel home page<br />
<a href="http://xkarel.sourceforge.net/eng/">http://xkarel.sourceforge.net/eng/</a>
</li>

<li>KKarel - screenshoty oken<br />
<a href="http://xkarel.sourceforge.net/eng/program.php#Okna">http://xkarel.sourceforge.net/eng/program.php#Okna</a>
</li>

<li>Greenfoot<br />
<a href="http://www.greenfoot.org/about/whatis.html">http://www.greenfoot.org/about/whatis.html</a>
</li>

<li>Computer programming -- Educational programming languages<br />
<a href="http://www.kidslike.info/computer_programming_educational_programming_languages">http://www.kidslike.info/computer_programming_educational_programming_languages</a>
</li>

<li>Making Great Programmers: Why BASIC is Still Relevant<br />
<a href="http://kidbasic.sourceforge.net/en/why.html">http://kidbasic.sourceforge.net/en/why.html</a>
</li>

<li>Gambas Wiki<br />
<a href="http://en.wikibooks.org/wiki/Gambas">http://en.wikibooks.org/wiki/Gambas</a>
</li>

<li>Squeak home page<br />
<a href="http://www.squeak.org/">http://www.squeak.org/</a>
</li>

<li>XO: The Children's Machine<br />
<a href="http://wiki.laptop.org/go/The_Children's_Machine">http://wiki.laptop.org/go/The_Children's_Machine</a>
</li>

<li>Squeak<br />
<a href="http://en.wikipedia.org/wiki/Squeak">http://en.wikipedia.org/wiki/Squeak</a>
</li>

<li>Squeak by Example<br />
<a href="http://squeakbyexample.org/">http://squeakbyexample.org/</a>
</li>

<li>Scratch home page<br />
<a href="http://scratch.mit.edu/">http://scratch.mit.edu/</a>
</li>

<li>Scratch (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Scratch_(programming_language)">http://en.wikipedia.org/wiki/Scratch_(programming_language)</a>
</li>

<li>Free tool offers 'easy' coding<br />
<a href="http://news.bbc.co.uk/2/hi/technology/6647011.stm">http://news.bbc.co.uk/2/hi/technology/6647011.stm</a>
</li>

<li>Scratch Lowers Resistance to Programming<br />
<a href="http://www.wired.com/gadgetlab/2009/03/scratch-lowers/">http://www.wired.com/gadgetlab/2009/03/scratch-lowers/</a>
</li>

<li>Základy želví grafiky<br />
<a href="http://www.root.cz/clanky/zaklady-zelvi-grafiky/">http://www.root.cz/clanky/zaklady-zelvi-grafiky/</a>
</li>

<li>Bill Kendrick's Web Turtle<br />
<a href="http://www.sonic.net/~nbs/webturtle/">http://www.sonic.net/~nbs/webturtle/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2010</small></p>
</body>
</html>

