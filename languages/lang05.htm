<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Základy programování ve Squeaku - (2)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Základy programování ve Squeaku (2)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;páté části seriálu o programovacích jazycích vhodných pro výuku programování si podrobněji popíšeme, jakým způsobem spolu mohou objekty ve Squeaku komunikovat pomocí posílání zpráv. Popsány budou všechny tři typy zpráv i nejčastější chyby, kterých se mohou začínající programátoři ve Squeaku dopustit.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Unární zprávy</a></p>
<p><a href="#k02">2. Umístění objektů na pracovní plochu Squeaku</a></p>
<p><a href="#k03">3. Zřetězení unárních zpráv</a></p>
<p><a href="#k04">4. Binární zprávy</a></p>
<p><a href="#k05">5. Pořadí vyhodnocování unárních a binárních zpráv</a></p>
<p><a href="#k06">6. Zprávy s&nbsp;obecným počtem parametrů</a></p>
<p><a href="#k07">7. Nejčastější problémy při zápisu zpráv s&nbsp;obecným počtem parametrů</a></p>
<p><a href="#k08">8. Programové bloky</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Unární zprávy</h2>

<p>V&nbsp;předchozí části článku o programovacím jazyce <i>Squeak</i> jsme se
již ve stručnosti zmínili o tom, že objekty (ať již se jedná o objekty
vytvořené uživatelem či o systémové objekty, které například reprezentují prvky
grafického uživatelského rozhraní) mezi sebou komunikují pomocí takzvaného
&bdquo;posílání zpráv&ldquo; a taktéž to, že ve <i>Squeaku</i> existují tři
typy zpráv, které se od sebe odlišují především syntakticky, tj.&nbsp;způsobem
zápisu. Jedná se o <i>unární zprávy</i>, <i>binární zprávy</i> a o <i>zprávy
s&nbsp;obecným počtem parametrů</i>. Nejdříve se budeme zabývat unárními
zprávami, protože práce s&nbsp;nimi je nejjednodušší. Unární zprávy poslané
nějakému objektu neobsahují žádný parametr, objekt se tedy rozhoduje, jakým
způsobem má na poslanou zprávu zareagovat, přímo podle toho, o jakou zprávu se
jedná, tj.&nbsp;na základě jejího <i>selektoru</i> (zjednodušeně řečeno: podle
toho jaké má zpráva jméno). Proč se však těmto zprávám říká
&bdquo;unární&ldquo;? Je tomu tak z&nbsp;toho důvodu, že se při poslání tohoto
typu zprávy pracuje pouze s&nbsp;jediným objektem &ndash; příjemcem zprávy.</p>

<p>Formát zápisu unárních zpráv je ze syntaktického hlediska velmi jednoduchý:
<i>selektor</i> zprávy se zapíše přímo za jméno objektu (<i>příjemce
zprávy</i>), jak je to ostatně patrné z&nbsp;následujících demonstračních
příkladů. Poznámka: na prvním řádku ve výpisu je vždy uveden výraz zapsaný
uživatelem, na řádku druhém objekt, který vznikl na základě reakce příjemce
zprávy. Příklady je možné si vyzkoušet například v&nbsp;okně
<strong>Workspace</strong> popsaném v&nbsp;předchozích dvou částech tohoto
seriálu (po zapsání výrazu postačuje stlačit klávesovou zkratku
<strong>CTRL+p</strong>, popř.&nbsp;z&nbsp;kontextového menu vybrat příkaz
<i>print it</i>, aby došlo k&nbsp;vytištění výsledného objektu,
resp.&nbsp;textové reprezentace tohoto objektu do okna
<strong>Workspace</strong>):</p>

<pre>
42 factorial
1405006117752879898543142606244511569936384000000000
</pre>

<pre>
1405006117752879898543142606244511569936384000000000 digitLength
22
</pre>

<pre>
-42 abs
42
</pre>

<pre>
42 threeDigitName
'forty-two'
</pre>

<pre>
'www.root.cz' stringhash
157059795
</pre>

<pre>
true not
false
</pre>

<pre>
false not
true
</pre>

<a href="http://i.iinfo.cz/images/652/lang05-1.png"><img src="http://i.iinfo.cz/images/652/lang05-1-prev.png" width="368" height="270" alt=" " /></a>
<p><i>Obrázek 1: Okno Workspace, v&nbsp;němž je možné jednoduše posílat zprávy
různým objektům a vypisovat textové reprezentace objektů, které vzniknou na
základě těchto zpráv.</i></p>

<p>Pokud příjemce zprávy nedokáže unární zprávu s&nbsp;daným selektorem
zpracovat, dojde k&nbsp;chybě:</p>

<pre>
'www.root.cz' abs
" na tomto místě dojde k&nbsp;zahlášení chyby,"
" protože objekt 'www.root.cz' (tj.&nbsp;řetězec)"
" nedokáže zareagovat na zprávu se selektorem abs."
</pre>

<a href="http://i.iinfo.cz/images/652/lang05-2.png"><img src="http://i.iinfo.cz/images/652/lang05-2-prev.png" width="368" height="270" alt=" " /></a>
<p><i>Obrázek 2: Výsledek pokusu o poslání zprávy se selektorem
<strong>abs</strong> řetězci, který na tuto zprávu nedokáže korektně
zareagovat. Z&nbsp;vypsaného chybového hlášení je patrné, že instance třídy
<strong>ByteString</strong> nezná metodu <strong>abs</strong>.</i></p>



<p><a name="k02"></a></p>
<h2>2. Umístění objektů na pracovní plochu Sqeaku</h2>

<p>Výsledkem poslání unární zprávy může být dokonce i objekt, který se stane
součástí grafického uživatelského rozhraní <i>Squeaku</i>, například bude
umístěn na jeho pracovní ploše. Bez dalšího podrobnějšího popisu (k&nbsp;němu
se však v&nbsp;tomto seriálu později ještě několikrát vrátíme) si můžete sami
vyzkoušet následující demonstrační příklad. Po poslání zprávy se selektorem
<strong>openAsMorph</strong> objektu (příjemci zprávy), jenž je instancí třídy
<strong>String</strong> nebo některého jejího potomka, například
<strong>ByteString</strong>, se na pracovní plochu do určeného místa umístí
nový prvek grafického uživatelského rozhraní, s&nbsp;nímž je možné libovolným
způsobem manipulovat, podobně jako s&nbsp;jakýmkoli jiným prvkem GUI
<i>Squeaku</i>. Lze například provést přesun tohoto objektu, jeho zvětšení,
zmenšení, otáčení, vytvoření kopie (klonu) atd. Tento objekt samozřejmě
&bdquo;přežije&ldquo; i ukončení virtuálního stroje a jeho opětovné
nastartování, a to dokonce i v&nbsp;případě, že je znovuspuštění virtuálního
stroje provedeno na zcela odlišné platformě:</p>

<pre>
'maly testik' openAsMorph
</pre>

<a href="http://i.iinfo.cz/images/652/lang05-3.png"><img src="http://i.iinfo.cz/images/652/lang05-3-prev.png" width="368" height="270" alt=" " /></a>
<p><i>Obrázek 3: Poslání zprávy se selektorem <strong>openAsMorph</strong>
řetězci. Ihned po poslání zprávy se vytvoří nový prvek grafického uživatelského
rozhraní, který lze umístit pomocí myši na pracovní plochu.</i></p>

<a href="http://i.iinfo.cz/images/652/lang05-4.png"><img src="http://i.iinfo.cz/images/652/lang05-4-prev.png" width="358" height="270" alt=" " /></a>
<p><i>Obrázek 4: S&nbsp;objektem umístěným na pracovní plochu lze manipulovat
stejným způsobem, jako s&nbsp;jakýmkoli jiným objektem, například oknem.
K&nbsp;objektu je samozřejmě také přiřazené kontextové menu i
&bdquo;obrázkové&ldquo; menu.</i></p>



<p><a name="k03"></a></p>
<h2>3. Zřetězení unárních zpráv</h2>

<p>Vzhledem k&nbsp;tomu, že výsledkem poslání zprávy jejímu příjemci je vznik
(většinou nového) objektu, je možné zprávy za sebou jednoduše zřetězit bez
toho, aby se mezivýsledné objekty vzniklé voláním zpráv musely ukládat do
pojmenovaných proměnných. Syntakticky se zřetězení zpráv podobá například
volání uživatelských nebo systémových slov ve <i>Forthu</i>, ale to již trošku
odbíháme od tématu :-). V&nbsp;následujícím demonstračním příkladu se nejdříve
pošle zpráva se selektorem <strong>factorial</strong> příjemci, jenž je malým
celým číslem (<strong>SmallInteger</strong>) a tento objekt zprávu zpracuje
takovým způsobem, že vytvoří nový objekt (poněkud větší číslo, konkrétně
instanci třídy <strong>LargePositiveInteger</strong>). Tomuto objektu je
následně poslána unární zpráva se selektorem <strong>asWords</strong>. Příjemce
tuto zprávu zpracuje a jako výsledek vrátí řetězec (což je samozřejmě taktéž
objekt), který obsahuje slovní vyjádření vypočtené hodnoty (kvůli omezení šířky
stránky v&nbsp;prohlížeči jsou do výsledku přidány konce řádků):</p>

<pre>
42 factorial asWords 'one sexdecillion, four hundred five quindecillion,
six quattuordecillion, one hundred seventeen tredecillion, seven hundred fifty-two duodecillion,
eight hundred seventy-nine undecillion, eight hundred ninety-eight decillion,
five hundred forty-three nonillion, one hundred forty-two octillion, six hundred six septillion,
two hundred forty-four sextillion, five hundred eleven quintillion,
five hundred sixty-nine quadrillion, nine hundred thirty-six trillion,
three hundred eighty-four billion'
</pre>

<a href="http://i.iinfo.cz/images/652/lang05-5.png"><img src="http://i.iinfo.cz/images/652/lang05-5-prev.png" width="368" height="270" alt=" " /></a>
<p><i>Obrázek 5: Poslání unární zprávy se selektorem <strong>className</strong>
různým typům objektů.</i></p>

<p>V&nbsp;předchozím odstavci jsem bez dalších důkazů tvrdil, že objekt
<strong>42</strong> je instancí třídy <strong>SmallInteger</strong>, zatímco
výsledek zprávy <strong>42 factorial</strong> je instancí třídy
<strong>LargePositiveInteger</strong>. Toto tvrzení lze velmi jednoduše
dokázat, protože každému objektu je možné poslat unární zprávu se selektorem
<strong>className</strong> a objekt (příjemce zprávy) vrátí textovou
reprezentaci jména příslušné třídy:</p>

<pre>
42 className
'SmallInteger'
</pre>

<pre>
42 factorial className
'LargePositiveInteger'
</pre>

<pre>
'www.root.cz' className
'ByteString'
</pre>

<pre>
nil className
'UndefinedObject'
</pre>

<a href="http://i.iinfo.cz/images/652/lang05-6.png"><img src="http://i.iinfo.cz/images/652/lang05-6-prev.png" width="368" height="270" alt=" " /></a>
<p><i>Obrázek 6: Metoda className existuje již ve třídě
<strong>Object</strong>, proto ji dědí i všechny uživatelem vytvořené
objekty.</i></p>

<p>Podobným způsobem se lze pomocí zprávy se selektorem
<strong>basicType</strong> dotazovat na bázový typ objektu (výsledkem je
v&nbsp;tomto případě symbol, nikoli řetězec):</p>

<pre>
42 basicType
#Number
</pre>

<pre>
true basicType
#Boolean
</pre>

<pre>
'www.root.cz' basicType
#String
</pre>

<pre>
nil basicType
#Object
</pre>



<p><a name="k04"></a></p>
<h2>4. Binární zprávy</h2>

<p>Druhým typem zpráv, které je možné ve <i>Squeaku</i> použít, jsou takzvané
<i>binární zprávy</i>. Jak již název těchto zpráv naznačuje, tyto zprávy
pracují s&nbsp;dvojicí objektů. Prvním objektem je příjemce zprávy. Podobně
jako u unárních zpráv se jedná o objekt, který zprávu musí přijmout a
zpracovat; právě tento objekt tedy rozhoduje o tom, jak bude se zprávou
naloženo (to může být zpočátku poněkud matoucí, protože binární zprávy se
podobají, jak si ukážeme dále, zápisu aritmetických či logických výrazů,
v&nbsp;nichž mají oba operandy binární operace shodný význam). Druhý objekt je
použit jako parametr zprávy. Formát zápisu binárních zpráv vypadá následovně:
<strong>příjemce_zprávy selektor parametr</strong>. Zatímco unární zprávy mohly
mít takřka libovolně pojmenovaný selektor (nemohly v&nbsp;něm být použity pouze
některé znaky se speciálním významem), jména (selektory) binárních zpráv jsou
ve <i>Squeaku</i> a taktéž i v&nbsp;dalších dialektech <i>Smalltalku</i>
omezena pouze na některé znaky a jejich kombinace, které jsou vypsány
v&nbsp;následující tabulce:</p>

<table>
<tr><th>Znak</th></tr>
<tr><td>+</td></tr>
<tr><td>-</td></tr>
<tr><td>*</td></tr>
<tr><td>/</td></tr>
<tr><td>\</td></tr>
<tr><td>~</td></tr>
<tr><td>&lt;</td></tr>
<tr><td>&gt;</td></tr>
<tr><td>=</td></tr>
<tr><td>@</td></tr>
<tr><td>%</td></tr>
<tr><td>|</td></tr>
<tr><td>&amp;</td></tr>
<tr><td>?</td></tr>
<tr><td>,</td></tr>
</table>

<p>Následují demonstrační příklady poslání binárních zpráv různým typům
objektů. Z&nbsp;toho, že každý objekt může na zprávu se stejným selektorem
reagovat různě taktéž vyplývá, že není žádný problém si některé ze selektorů
binárních zpráv &bdquo;přetížit&ldquo; ve vlastních třídách:</p>

<pre>
6 * 7
42
</pre>

<pre>
123456 \\ 78
60
</pre>

<pre>
true &amp; false
false
</pre>

<pre>
true | false
true
</pre>

<p>Ve třídě <strong>Boolean</strong> můžeme nalézt metodu pro výpočet logické
operace implikace zapisované pomocí znaků ==&gt;:</p>

<pre>
false ==&gt; false
true
</pre>

<pre>
false ==&gt; true
true
</pre>

<pre>
true ==&gt; false
false
</pre>

<pre>
true ==&gt; true
true
</pre>

<p>Řetězce, tj.&nbsp;instance třídy <strong>String</strong> nebo některého
potomka této třídy, lze lexikograficky porovnávat:</p>

<pre>
'www' &lt; 'aaa'
false
</pre>

<pre>
'aaa' &lt; 'www'
true
</pre>

<pre>
'aaa' == 'www'
false
</pre>

<pre>
'aaa' == 'aaa'
true
</pre>

<a href="http://i.iinfo.cz/images/652/lang05-7.png"><img src="http://i.iinfo.cz/images/652/lang05-7-prev.png" width="368" height="270" alt=" " /></a>
<p><i>Obrázek 7: Posílání binárních zpráv různým typům objektů.</i></p>



<p><a name="k05"></a></p>
<h2>5. Pořadí vyhodnocování unárních a binárních zpráv</h2>

<p>Podobně jako je možné řetězit unární zprávy (viz <a href="#k03">třetí
kapitola</a>), lze v&nbsp;jednom výrazu kombinovat zprávy unární i binární.
Přitom vždy platí, že unární zprávy jsou vyhodnoceny nejdříve (zjednodušeně by
se dalo říci, že jsou okolo nich vytvořeny implicitní závorky) a binární zprávy
se vyhodnocují zleva doprava, bez ohledu na to, že se znaky používané jako
selektory binárních zpráv podobají aritmetickým či logickým operacím, jenž mají
rozdílnou prioritu (násobení má vyšší prioritu než sčítání atd.).
V&nbsp;případě, že je zapotřebí změnit pořadí volání zpráv, lze pro tento účel
použít kulaté závorky. V&nbsp;následujících příkladech je ukázán rozdíl mezi
běžnými aritmetickými výrazy (které ve skutečnosti <i>Squeak</i> vůbec nezná a
v&nbsp;podstatě ani znát nepotřebuje) a voláním binárních zpráv,
popř.&nbsp;kombinace zpráv unárních a binárních. Povšimněte si především toho,
že v&nbsp;prvních několika výrazech není brána v&nbsp;potaz priorita binárních
zpráv, které se vyhodnotí, tj.&nbsp;postupně zavolají tak, jak jsou zapsány
&ndash; zleva doprava:</p>

<pre>
2 + 4 * 10
60
</pre>

<pre>
(2 + 4) * 10
60
</pre>

<pre>
2 + (4 * 10)
42
</pre>

<pre>
2 + 3 factorial
8
</pre>

<pre>
(2 + 3) factorial
120
</pre>

<pre>
3 factorial + 2
8
</pre>

<a href="http://i.iinfo.cz/images/652/lang05-8.png"><img src="http://i.iinfo.cz/images/652/lang05-8-prev.png" width="368" height="270" alt=" " /></a>
<p><i>Obrázek 8: Výsledek volání různých kombinací unárních a binárních
zpráv.</i></p>

<p>Ve chvíli, kdy zapomeneme na to, že ve <i>Squeaku</i> neexistují aritmetické
a logické operace, ale &bdquo;pouze&ldquo; posílání zpráv s&nbsp;pevně daným
pořadím vyhodnocování, můžeme v&nbsp;programu použít zdánlivě korektní výraz,
který však ve skutečnosti povede k&nbsp;chybě. Jeden z&nbsp;typických chybně
zapsaných výrazů je například: <strong>42 == 2 + (4 * 10)</strong>. Tento zápis
totiž znamená poslání zprávy se selektorem <strong>==</strong>, jejímž
příjemcem je objekt <strong>42</strong> a parametrem objekt <strong>2</strong>.
Výsledkem je objekt <strong>false</strong>, který je příjemcem zprávy se
selektorem <strong>+</strong>... &ndash; a právě zde dojde k&nbsp;chybě,
protože objekt <strong>false</strong> nedokáže na tuto zprávu korektně
zareagovat. Náprava je snadná &ndash; buď je možné prohodit pořadí zpráv nebo
lze použít závorky:</p>

<pre>
42 == 2 + (4 * 10)
" chyba - objekt typu Boolean nedokáže zpracovat zprávu se selektorem + "
</pre>

<pre>
2 + (4 * 10) == 42
true
</pre>

<pre>
42 == (2 + (4 * 10))
true
</pre>

<a href="http://i.iinfo.cz/images/652/lang05-9.png"><img src="http://i.iinfo.cz/images/652/lang05-9-prev.png" width="368" height="270" alt=" " /></a>
<p><i>Obrázek 9: Výsledek pokusu o vyhodnocení výrazu <strong>42 == 2 + (4 *
10)</strong>.</i></p>



<p><a name="k06"></a></p>
<h2>6. Zprávy s&nbsp;obecným počtem parametrů</h2>

<p>Třetím a současně i posledním typem zpráv, pomocí nichž mohou objekty ve
<i>Squeaku</i> (nebo i jiném dialektu programovacího jazyka <i>Smalltalk</i>)
navzájem komunikovat, jsou <i>zprávy s&nbsp;proměnným počtem parametrů</i>,
někdy také nazývané <i>keyword messages</i>. V&nbsp;těchto zprávách může být
použito libovolné množství klíčových slov ukončených dvojtečkou, přičemž za
každým klíčovým slovem následuje parametr. To mj.&nbsp;znamená, že počet
parametrů zprávy odpovídá počtu použitých klíčových slov. <i>Selektorem</i>
těchto zpráv jsou všechna klíčová slova. Tento typ zpráv má nejnižší prioritu,
což znamená, že nejdříve jsou vyhodnoceny zprávy unární, posléze zprávy binární
a teprve poté zprávy s&nbsp;proměnným počtem parametrů (samozřejmě je možné
v&nbsp;případě potřeby použít závorky, které pořadí volání zpráv mění).
Porovnání syntaxe binární zprávy (popsané v&nbsp;předchozích kapitolách) a
zprávy s&nbsp;proměnným počtem parametrů je zobrazeno na desátém obrázku.</p>

<img src="http://i.iinfo.cz/images/652/lang05-10.png" width="368" height="269" alt=" " />
<p><i>Obrázek 10: Syntaxe binární zprávy a zprávy s&nbsp;proměnným počtem
parametrů.</i></p>

<p>Příklady zpráv používajících klíčová slova:</p>

<pre>
42 gcd: 123456
6
</pre>

<pre>
1024 log: 2
10.0
</pre>

<pre>
42 raisedTo: 42
150130937545296572356771972164254457814047970568738777235893533016064
</pre>

<pre>
42 between: 0 and: 100
true
</pre>

<pre>
42 between: 100 and: 200
false
</pre>

<p>V&nbsp;posledních dvou příkladech je <strong>between:and:</strong> metoda
definovaná ve třídě <strong>Magnitude</strong>, která je předkem tříd
<strong>Integer</strong> a <strong>SmallInteger</strong>.</p>



<p><a name="k07"></a></p>
<h2>7. Nejčastější problémy při zápisu zpráv s&nbsp;obecným počtem parametrů</h2>

<p>Při používání zpráv s&nbsp;proměnným počtem parametrů je nutné si uvědomit,
že se příjemci zprávy skutečně posílá celá zpráva, jejíž selektor je složen ze
všech klíčových slov a počet parametrů odpovídá počtu těchto slov. To například
znamená, že následující zápis:</p>

<pre>
2 raisedTo: 3 raisedTo: 4
</pre>

<p><i>Squeak</i> pochopí tak, že se objektu <strong>2</strong>
(tj.&nbsp;instanci třídy <strong>SmallInteger</strong>) posílá zpráva se
selektorem <strong>raisedTo:raisedTo:</strong> a s&nbsp;parametry
<strong>3</strong> a <strong>4</strong>; tudíž dojde při pokusu o vyhodnocení
tohoto výrazu k&nbsp;chybě, pokud si tedy sami nerozšíříme chování třídy
<strong>SmallInteger</strong> takovým způsobem, aby dokázala tuto zprávu
korektně zpracovat. Náprava je v&nbsp;tomto případě jednoduchá &ndash;
v&nbsp;závislosti na tom, jakou aritmetickou operaci máme skutečně na mysli
(zda 2<sup>(3<sup>4</sup>)</sup> nebo (2<sup>3</sup>)<sup>4</sup>), je nutné
použít uzávorkování:</p>

<pre>
2 raisedTo: (3 raisedTo: 4)
2417851639229258349412352
</pre>

<pre>
(2 raisedTo: 3) raisedTo: 4
4096
</pre>



<p><a name="k08"></a></p>
<h2>8. Programové bloky</h2>

<p>Poslední vlastností <i>Squeaku</i>, o které se dnes zmíníme, je podpora
takzvaných <i>programových bloků</i>, bez nichž by například nebylo možné
tvořit programové smyčky ani struktury s&nbsp;podmínkami (tyto řídicí struktury
ve <i>Squeaku</i> neexistují jako samostatná syntaktická kategorie právě díky
tomu, že se dají nahradit pomocí bloků). Programové bloky se skládají
z&nbsp;nepovinných parametrů následovaných posloupností výrazů. Ze sémantického
hlediska se programový blok chová jako <i>uzávěr</i> (closure), který je (ve
<i>Squeaku</i>) považován za plnohodnotný objekt. To mj.&nbsp;znamená, že bloku
lze posílat různé zprávy a blok může vystupovat jako parametr zpráv, což je
v&nbsp;mnoha případech důležitější vlastnost. Z&nbsp;hlediska syntaktického je
blok uzavřen do hranatých závorek [] a jeho případné parametry jsou od těla
bloku (seznamu výrazů) odděleny pomocí znaku roury (pipe, |). Pokud blok žádné
parametry nemá, není použit ani oddělovač. Následuje příklad jednoduchého bloku
bez parametrů:</p>

<pre>
[ 6 * 7 ]
</pre>

<p>Jak jsme si již řekli v&nbsp;předchozím odstavci, lze blokům posílat zprávy.
V&nbsp;následujících příkladech je ukázáno, jak lze blok vyhodnotit (zavolat
výrazy, které se v&nbsp;jeho těle nachází), jak lze zjistit, kolikrát se blok
vyhodnotí za 5 sekund (jednoduchý benchmark), jak dlouho trvá jedno vyhodnocení
bloku (v&nbsp;tomto případě prakticky neměřitelné :-) a jak lze vytvořit
nekonečnou smyčku (prakticky měřitelné :-)</p>

<pre>
[ 6 * 7 ] value
42
</pre>

<pre>
[ 6 * 7 ] bench
'722571.4857028595 per second.'
</pre>

<pre>
[ 6 * 7 ] durationToRun
0:00:00:00
</pre>

<pre>
[ 6 * 7 ] repeat
" není dobrý nápad tento kód spouštět, protože blok"
" neobsahuje explicitiní příkaz pro jeho zastavení"
</pre>

<p>Programový blok může vystupovat jako parametr nějaké zprávy, čehož se
poměrně často využívá například při programování smyček nebo struktur
s&nbsp;podmínkami. Na následujících příkladech je ukázáno, jak lze využít
zprávy se selektorem <strong>ifTrue:</strong> a <strong>ifFalse:</strong>,
které jsou implementovány jako metody ve třídách <strong>Boolean</strong>,
<strong>True</strong> a <strong>False</strong>, pro tvorbu části kódu, jenž se
provede pouze v&nbsp;případě splnění či naopak nesplnění nějaké podmínky:</p>

<pre>
true ifFalse: [ 6 * 7 ]
nil
</pre>

<pre>
false ifFalse: [ 6 * 7 ]
42
</pre>

<pre>
1 == 1 ifFalse: [ 6 * 7 ]
nil
</pre>

<pre>
1 == 2 ifFalse: [ 6 * 7 ]
42
</pre>

<pre>
true ifTrue: [ 6 * 7 ]
42
</pre>

<pre>
false ifTrue: [ 6 * 7 ]
nil
</pre>

<pre>
1 == 1 ifTrue: [ 6 * 7 ]
42
</pre>

<pre>
1 == 2 ifTrue: [ 6 * 7 ]
nil
</pre>

<p>Podrobnější informace o použití bloků, které tvoří jednu
z&nbsp;nejzajímavějších částí <i>Squeaku</i>, si uvedeme příště.</p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>Squeak home page<br />
<a href="http://www.squeak.org/">http://www.squeak.org/</a>
</li>

<li>XO: The Children's Machine<br />
<a href="http://wiki.laptop.org/go/The_Children's_Machine">http://wiki.laptop.org/go/The_Children's_Machine</a>
</li>

<li>Squeak na Wikipedii EN<br />
<a href="http://en.wikipedia.org/wiki/Squeak">http://en.wikipedia.org/wiki/Squeak</a>
</li>

<li>Squeak na Wikipedii CZ<br />
<a href="http://cs.wikipedia.org/wiki/Squeak">http://cs.wikipedia.org/wiki/Squeak</a>
</li>

<li>Squeak by Example<br />
<a href="http://squeakbyexample.org/">http://squeakbyexample.org/</a>
</li>

<li>Squeak Land<br />
<a href="http://www.squeakland.org/">http://www.squeakland.org/</a>
</li>

<li>SqueakNotes<br />
<a href="http://squeak.zwiki.org/SqueakNotes">http://squeak.zwiki.org/SqueakNotes</a>
</li>

<li>Squeak FAQ<br />
<a href="http://wiki.squeak.org/squeak/471">http://wiki.squeak.org/squeak/471</a>
</li>

<li>Learning Squeak<br />
<a href="http://c2.com/cgi/wiki?LearningSqueak">http://c2.com/cgi/wiki?LearningSqueak</a>
</li>

<li>Scratch home page<br />
<a href="http://scratch.mit.edu/">http://scratch.mit.edu/</a>
</li>

<li>Scratch (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Scratch_(programming_language)">http://en.wikipedia.org/wiki/Scratch_(programming_language)</a>
</li>

<li>Lazarus (Software)<br />
<a href="http://en.wikipedia.org/wiki/Lazarus_%28software%29">http://en.wikipedia.org/wiki/Lazarus_%28software%29</a>
</li>

<li>FreePascal<br />
<a href="http://www.freepascal.org/">http://www.freepascal.org/</a>
</li>

<li>"Why I Love Python" slides<br />
<a href="http://www.mindviewinc.com/downloads/pub/eckel/LovePython.zip">http://www.mindviewinc.com/downloads/pub/eckel/LovePython.zip</a>
</li>

<li>"Why I love Python" (presentation)<br />
<a href="http://www.slideshare.net/didip/why-i-love-python">http://www.slideshare.net/didip/why-i-love-python</a>
</li>

<li>První jazyk: Python<br />
<a href="http://macek.sandbox.cz/texty/prvni-jazyk-python/">http://macek.sandbox.cz/texty/prvni-jazyk-python/</a>
</li>

<li>Programovací jazyk Python<br />
<a href="http://www.py.cz/FrontPage">http://www.py.cz/FrontPage</a>
</li>

<li>Python &ndash; Wikipedia CS<br />
<a href="http://cs.wikipedia.org/wiki/Python">http://cs.wikipedia.org/wiki/Python</a>
</li>

<li>IPython<br />
<a href="http://en.wikipedia.org/wiki/Ipython">http://en.wikipedia.org/wiki/Ipython</a>
</li>

<li>IPython: an interactive computing environment<br />
<a href="http://ipython.scipy.org/moin/">http://ipython.scipy.org/moin/</a>
</li>

<li>Category:Python<br />
<a href="http://rosettacode.org/wiki/Category:Python">http://rosettacode.org/wiki/Category:Python</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a></li>

<li>Language Poster (O'Reilly):<br />
<a href="http://www.oreilly.com/news/graphics/prog_lang_poster.pdf">http://www.oreilly.com/news/graphics/prog_lang_poster.pdf</a></li>

<li>Informace o Comenius Logu:<br />
<a href="http://www.comlogo.input.sk/index.html">http://www.comlogo.input.sk/index.html</a></li>

<li>Stránka nabízející stažení Comenius Loga:<br />
<a href="http://www.comlogo.input.sk/nastiahnutie.html">http://www.comlogo.input.sk/nastiahnutie.html</a></li>

<li>Seminární práce o Comenius Logu:<br />
<a href="http://nwit.pedf.cuni.cz/rotal9ap/logo/">http://nwit.pedf.cuni.cz/rotal9ap/logo/</a></li>

<li>Informace o LEGO/Logu:<br />
<a href="http://education.otago.ac.nz/nzlnet/Logo/legologo.html">http://education.otago.ac.nz/nzlnet/Logo/legologo.html</a></li>

<li>Informace o systému Elica:<br />
<a href="http://www.elica.net/site/index.html">http://www.elica.net/site/index.html</a></li>

<li>Informace o systému NetLogo:<br />
<a href="http://ccl.northwestern.edu/netlogo/">http://ccl.northwestern.edu/netlogo/</a></li>

<li>Stažení NetLoga:<br />
<a href="http://ccl.northwestern.edu/netlogo/download.shtml">http://ccl.northwestern.edu/netlogo/download.shtml</a></li>

<li>Uživatelský manuál NetLoga ve formátu PDF:<br />
<a href="http://ccl.northwestern.edu/netlogo/docs/NetLogo%20User%20Manual.pdf">http://ccl.northwestern.edu/netlogo/docs/NetLogo%20User%20Manual.pdf</a></li>

<li>NetLogo FAQ:<br />
<a href="http://ccl.northwestern.edu/netlogo/docs/faq.html">http://ccl.northwestern.edu/netlogo/docs/faq.html</a></li>

<li>Domácí stránka Daniela Azumy (autora implementace Turtle Tracks):<br />
<a href="http://alumnus.caltech.edu/~dazuma/home/">http://alumnus.caltech.edu/~dazuma/home/</a></li>

<li>Informace o <i>aUCBLogu</i>:<br />
<a href="http://www.physik.uni-augsburg.de/~micheler/">http://www.physik.uni-augsburg.de/~micheler/</a></li>

<li>Domácí stránka MSW Loga:<br />
<a href="http://www.softronix.com/logo.html">http://www.softronix.com/logo.html</a></li>

<li>Karel online<br />
<a href="http://karel.oldium.net/">http://karel.oldium.net/</a>
</li>

<li>EDU-SIG: Python in Education<br />
<a href="http://www.python.org/community/sigs/current/edu-sig/">http://www.python.org/community/sigs/current/edu-sig/</a>
</li>

<li>Guido van Robot<br />
<a href="http://en.wikipedia.org/wiki/Guido_van_Robot">http://en.wikipedia.org/wiki/Guido_van_Robot</a>
</li>

<li>The Guido van Robot Programming Language<br />
<a href="http://gvr.sourceforge.net/">http://gvr.sourceforge.net/</a>
</li>

<li>An Introduction to Programming with Karel J. Robot<br />
<a href="http://blog.thingoid.com/2003/10/karel-intro/">http://blog.thingoid.com/2003/10/karel-intro/</a>
</li>

<li>Teaching a young robot new tricks<br />
<a href="http://blog.thingoid.com/2003/11/karel-new-tricks/">http://blog.thingoid.com/2003/11/karel-new-tricks/</a>
</li>

<li>Karel and Company - More Robots<br />
<a href="http://blog.thingoid.com/2003/12/karel-and-company/">http://blog.thingoid.com/2003/12/karel-and-company/</a>
</li>

<li>Karel heads for the stars<br />
<a href="http://blog.thingoid.com/2004/03/karel-star/">http://blog.thingoid.com/2004/03/karel-star/</a>
</li>

<li>Karel programming language documentation<br />
<a href="http://mormegil.wz.cz/prog/karel/prog_doc.htm">http://mormegil.wz.cz/prog/karel/prog_doc.htm</a>
</li>

<li>Karel J. Robot<br />
<a href="http://www.mainlandregional.net/dklipp/Honors%20Computer%20Science%20Java.htm">http://www.mainlandregional.net/dklipp/Honors%20Computer%20Science%20Java.htm</a>
</li>

<li>Karel (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Karel_(programming_language)">http://en.wikipedia.org/wiki/Karel_(programming_language)</a>
</li>

<li>Richard E. Pattis<br />
<a href="http://en.wikipedia.org/wiki/Richard_E._Pattis">http://en.wikipedia.org/wiki/Richard_E._Pattis</a>
</li>

<li>XKarel home page<br />
<a href="http://xkarel.sourceforge.net/eng/">http://xkarel.sourceforge.net/eng/</a>
</li>

<li>XKarel - screenshoty oken<br />
<a href="http://xkarel.sourceforge.net/eng/program.php#Okna">http://xkarel.sourceforge.net/eng/program.php#Okna</a>
</li>

<li>Greenfoot<br />
<a href="http://www.greenfoot.org/about/whatis.html">http://www.greenfoot.org/about/whatis.html</a>
</li>

<li>Computer programming -- Educational programming languages<br />
<a href="http://www.kidslike.info/computer_programming_educational_programming_languages">http://www.kidslike.info/computer_programming_educational_programming_languages</a>
</li>

<li>Making Great Programmers: Why BASIC is Still Relevant<br />
<a href="http://kidbasic.sourceforge.net/en/why.html">http://kidbasic.sourceforge.net/en/why.html</a>
</li>

<li>Gambas Wiki<br />
<a href="http://en.wikibooks.org/wiki/Gambas">http://en.wikibooks.org/wiki/Gambas</a>
</li>

<li>Free tool offers 'easy' coding<br />
<a href="http://news.bbc.co.uk/2/hi/technology/6647011.stm">http://news.bbc.co.uk/2/hi/technology/6647011.stm</a>
</li>

<li>Scratch Lowers Resistance to Programming<br />
<a href="http://www.wired.com/gadgetlab/2009/03/scratch-lowers/">http://www.wired.com/gadgetlab/2009/03/scratch-lowers/</a>
</li>

<li>Základy želví grafiky<br />
<a href="http://www.root.cz/clanky/zaklady-zelvi-grafiky/">http://www.root.cz/clanky/zaklady-zelvi-grafiky/</a>
</li>

<li>Bill Kendrick's Web Turtle<br />
<a href="http://www.sonic.net/~nbs/webturtle/">http://www.sonic.net/~nbs/webturtle/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2010</small></p>
</body>
</html>

