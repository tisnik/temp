<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory XVIII</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Forth a zásobníkové procesory XVIII</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h2>Úvodník</h2>

<p>V předchozích dvou dílech <a
href="http://www.root.cz/serialy/programovaci-jazyk-forth/">tohoto seriálu</a>
jsme si popsali čtyři typické představitele šestnáctibitových zásobníkových
procesorů, jež byly určeny zejména pro různé vestavěné systémy, u nichž hraje
jednu z rozhodujících rolí celková cena těchto systémů. V dnešním pokračování
se již budeme zabývat zásobníkovými procesory, jejichž zásobníky i ALU mají
bitovou šířku plných 32 bitů, což dále rozšiřuje možnosti nasazení těchto čipů
v různých řídicích systémech.</p>
 


<h2>Obsah</h2>
<p>
<a href="#k01">1. Vlastnosti třicetidvoubitových zásobníkových procesorů</a><br />
<a href="#k02">2. Zásobníkový mikroprocesor FRISC 3</a><br />
<a href="#k03">3. Hardwarová konfigurace mikroprocesoru FRISC 3</a><br />
<a href="#k04">4. Zásobníky a jejich řízení</a><br />
<a href="#k05">5. Instrukční sada mikroprocesoru FRISC 3</a><br />
<a href="#k06">6. Zásobníkový mikroprocesor RTX 32P</a><br />
<a href="#k07">7. Hardwarová konfigurace mikroprocesoru RTX 32P</a><br />
<a href="#k08">8. Instrukční sada mikroprocesoru RTX 32P</a><br />
<a href="#k09">9. Obsah dalšího pokračování</a><br />
</p>



<p><a name="k01" id="k01"></a></p>
<h2>1. Vlastnosti třicetidvoubitových zásobníkových procesorů</h2>

<p>Třicetidvoubitové zásobníkové procesory ve své podstatě představují logické
pokračování či rozšíření zásobníkových procesorů šestnáctibitových (osmibitové
zásobníkové procesory se, jak již víme z <a
href="http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory-16">předchozích
dílů</a> tohoto seriálu, příliš nerozšířily). Větší šířka jednotlivých elementů
obou zásobníků i aritmeticko-logické jednotky umožňuje urychlení a současně i
zjednodušení mnoha aplikací, které nebylo možné na šestnáctibitových
procesorech úspěšně provozovat. Zatímco jsou šestnáctibitové zásobníkové
procesory určeny především pro vestavěné systémy (kde jsou v mnoha případech
nezastupitelné, zejména díky své nízké ceně, spotřebě a rychlosti reakce na
přerušení), jsou možnosti třicetidvoubitových procesorů mnohem větší -
uplatňují se například v kosmickém programu (družice, řídicí a signalizační
systémy raketoplánů), pro správu databází, aplikačních webových serverů,
některé z těchto procesorů lze najít i ve webových boxech atd.</p>

<p>Popišme si tedy některé výhody třicetidvoubitových zásobníkových procesorů
oproti jejich "tenčím" kolegům. Zásadní předností je plně 32bitová aritmetika,
kdy se již nemusí výpočty v tomto bitovém rozsahu provádět pomocí sekvencí
několika operací. Také se podstatně zvyšují možnosti adresace paměti, odpadá
tak určitá schizofrenie některých šestnáctibitových procesorů, které prováděly
adresní aritmetiku na více bitech, než měla jejich ALU - čistě šestnáctibitové
procesory jsou omezeny na adresování 64kB resp. 128kB operační paměti. Kromě
toho je u těchto procesorů někdy přímo na jádře přítomna i jednotka pro
provádění výpočtů v pohyblivé řádové čárce (<em>FPU - Floating Point
Unit</em>), jejíž umístění přímo v jádře je umožněno díky mnohem větší
integraci logických prvků. Taktovací frekvence je obecně větší, než v případě
šestnáctibitových zásobníkových procesorů, přičemž však zůstává zachován
konstantní kmitočet provádění instrukcí: jedna instrukce za takt, stejně tak
jako slučování více operací do jedné instrukce.</p>

<p>Použití třicetidvoubitových zásobníkových procesorů však přináší i některé
nevýhody, z nichž jmenujme například vyšší cenu těchto procesorů (ta je pro
vestavěné systémy mnohdy kritická), problém se šestnáctibitovými Forthy, které
jsou velmi rozšířené a problémy s nasazením čipů vyšší integrace v kosmickém
prostředí (i z tohoto důvodu se například do mnoha družic kromě zásobníkových
procesorů používají i historické procesory 80386). Zvýšení bitové šířky u
datových položek obou zásobníků způsobuje problémy při jejich implementaci,
protože se samozřejmě zvětšuje i potřebná kapacita paměti, která musí být pro
tyto zásobníky alokována. Tento problém se obecně řeší třemi metodami:
ponecháním separátní paměti či pamětí pro jednotlivé zásobníky, uložením celých
zásobníků přímo na čip či uložením vrcholů zásobníků (TOS) na čipu, zbytek je
alokován v operační paměti. Každá z těchto možností má své výhody a nevýhody,
zejména si musíme uvědomit fakt, že současné technologie neumožňují na jednom
čipu libovolně kombinovat logické členy (hradla a klopné obvody) s dynamickými
paměťovými buňkami, což omezuje kapacity zásobníků vytvořených přímo na čipu
mikroprocesoru.</p>

<p>V následujících kapitolách si popíšeme dva typické zástupce starší generace
třicetidvoubitových zásobníkových mikroprocesorů: <em>FRISC 3</em> a <em>RTX
32P</em>. Poznámka: novější generace zásobníkových mikroprocesorů je
představována zejména procesory přizpůsobenými pro běh Javovského bytekódu,
zaměření na optimální provádění Forthovských operací se tedy pomalu
vytrácí.</p>



<p><a name="k02" id="k02"></a></p>
<h2>2. Zásobníkový mikroprocesor FRISC 3</h2>

<p>Třicetidvoubitový zásobníkový mikroprocesor <em>FRISC 3</em> byl vyvinut na
Univerzitě Johna Hopkinse v Laboratoři aplikované fyziky (<em>Johns Hopkins
University/Applied Physics Laboratory - JHU/APL</em>). Samotné označení tohoto
mikroprocesoru vychází ze slov <em>Forth Reduced Instruction Set Computer</em>
a jak již tento název napovídá, jedná se o procesor ze "staré školy", který je
optimalizován pro běh aplikací vytvořených v programovacím jazyce Forth. Na
výše zmíněné univerzitě byly navrženy i další zásobníkové mikroprocesory,
<em>FRISC 1</em> a <em>FRISC 2</em>. Ty však byly vyrobeny pouze v testovacích
sériích, k jejich hromadné výrobě nikdy nedošlo. Procesor <em>FRISC 3</em> byl
vytvořen především pro vesmírný program, kde byl také skutečně použit, zejména
v úspěšném projektu <strong>Space Shuttle</strong> a v neposlední řadě také v
několika družicích. Vzhledem k úspěšnosti těchto programů byly práva na výrobu
tohoto procesoru odkoupeny komerční firmou <em>Silicon Composers</em>, která je
po úpravě prodávala pod názvem <em>SC32</em>.</p>

<p>Ve <a href="#k03">třetí kapitole</a> bude stručně popsána hardwarová
konfigurace tohoto procesoru, <a href="#k04">čtvrtá kapitola</a> je věnována
zásobníkům a jejich řízení a <a href="#k05">kapitola pátá</a> instrukční sadě,
která je vytvořena podobným způsobem, jako u <a
href="http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory-16">dříve
popsaných</a> šestnáctibitových zásobníkových procesorů.</p>



<p><a name="k03" id="k03"></a></p>
<h2>3. Hardwarová konfigurace mikroprocesoru FRISC 3</h2>

<p>Architektura tohoto mikroprocesoru se v mnohém podobá jeho šestnáctibitovým
předchůdcům, s tím rozdílem, že do jádra procesoru jsou přidány další důležité
funkční bloky. Přímo v jádře jsou vytvořeny dvě interní sběrnice, které jsou
označeny jako <em>ABUS</em> a <em>BBUS</em> - obdobu těchto sběrnic nalezneme i
v dalších zásobníkových procesorech. Na tyto sběrnice je napojena
aritmeticko-logická jednotka a blok pro provádění bitových posunů, který běží
nezávisle na ALU. Kromě toho je v jádře vytvořeno i několik registrů, které
jsou pomocí některých instrukcí přímo přístupné programátorům.</p>

<p>Jedná se zejména o čtyři uživatelské registry, dále o registr
<strong>PC</strong>, který se mění pomocí skokových instrukcí a instrukcí pro
návrat z podprogramu, registr <strong>FL</strong> obsahující jeden ze šestnácti
volitelných příznaků a velmi zajímavý registr <strong>ZERO</strong>, který na
interní sběrnici vždy posílá nulovou hodnotu - je trošku škoda, že nelze
programově nastavit hodnotu tohoto registru, pro některé aplikace by byl rychlý
přístup k jedné konstantě jistě výhodný, což je ostatně patrné i z instrukční
sady zásobníkových procesorů určených pro běh Javy.</p>

<p>Aritmeticko-logická jednotka kromě své základní funkce slouží i pro výpočet
efektivní adresy a dovoluje tak provádět adresování typu ukazatel+offset, což
je výhodné zejména při práci s poli.</p>



<p><a name="k04" id="k04"></a></p>
<h2>4. Zásobníky a jejich řízení</h2>

<p>Podobně jako u jiných zásobníkových procesorů, i zde zásobník operandů a
zásobník návratových adres vytvořeny identicky, tj. skládají se ze stejných
funkčních bloků. Paměť pro zásobníky (či jejich část) je vytvořena jako kruhový
buffer o šestnácti třicetidvoubitových položkách přímo v jádře procesoru, k
zásobníkům se přitom přistupuje pomocí logiky, která již na hardwarové úrovni
zajistí, že nikdy nedojde k přetečení či podtečení těchto bufferů - v případě
nutnosti se provede přesun dat z a do operační paměti, kde je uložen zbytek
obsahu zásobníků. Tato logika nebyla na dříve popisovaných zásobníkových
procesorech použita, což mohlo vést k nekorektní práci běžících aplikací v
případě, že došlo k přetečení interních zásobníků.</p>

<p>Kruhové buffery tak slouží jako zásobníková vyrovnávací paměť, se kterou se
setkáme i v dalším pokračování tohoto seriálu, kde jsou popisovány Javovské
zásobníkové procesory. Kromě přístupu k nejvrchnějším položkám zásobníků pomocí
známých instrukcí typu <strong>push</strong>, <strong>pop</strong>,
<strong>dup</strong>, <strong>drop</strong>, <strong>over</strong> a
<strong>rot</strong> je možné přímo adresovat čtyři nejvrchnější elementy
zásobníků, čímž se možnosti zásobníků blíží možnostem obecných registrů (či je
dokonce převyšují, díky automatickému posunu jednotlivých hodnot při přidávání
a ubírání hodnot ze zásobníků).</p>



<p><a name="k05" id="k05"></a></p>
<h2>5. Instrukční sada mikroprocesoru FRISC 3</h2>

<p>Všechny instrukce zásobníkového mikroprocesoru <em>FRISC 3</em> mají délku
32 bitů a jejich formát je horizontální, podobně jako u dříve popsaných
šestnáctibitových procesorů. Instrukce mohou být čtyřech typů: skoky (podmíněné
i nepodmíněné), práce s pamětí, operace s ALU a bitové posuny. Jednotlivé typy
instrukcí si nyní zevrubně popíšeme.</p>

<p><em>Skokové instrukce</em> se vyznačují tím, že nejvyšší tři bity
instrukčního kódu specifikují typ skoku a zbývající bity jsou rezervovány pro
adresu instrukce. Pokud jsou první tři bity nastaveny na hodnotu
<strong>000</strong>, jedná se o skok do podprogramu, při hodnotě
<strong>001</strong> se jedná o nepodmíněný skok a při hodnotě
<strong>010</strong> o skok, který se provede v případě, že je registr
<strong>FL</strong> nastaven na nulu. To kupodivu postačuje, protože registr
<strong>FL</strong> může být naplňován mnoha způsoby při ALU operacích -
ostatně způsob práce s tímto registrem je asi nejzajímavější věcí, kterou
tvůrci procesoru <em>FRISC 3</em> implementovali.</p>

<p>Instrukce <em>přístupu do paměti</em> se poznají tak, že nejvyšší tři bity
jsou nastaveny na některou z hodnot <strong>100</strong>, <strong>101</strong>,
<strong>110</strong> či <strong>111</strong>. Podle toho se pozná, zda se má
provést čtení či zápis do paměti. Zbylé dvě kombinace jsou určeny pro načtení
horního či dolního adresního slova (konstanta je totiž kódována přímo v dolních
šestnácti bitech instrukce). Dále je možné zvolit, do kterého zásobníku či
registru se hodnota načte - je možné adresovat jednu z nejvyšších čtyřech buněk
každého zásobníku, dále jeden ze čtyř uživatelských registrů, registr PC apod.
Kromě toho je jeden bit v instrukci rezervován na provedení návratu z
podprogramu (<em>return</em>), který tak může být proveden paralelně k běžící
operaci.</p>

<p><em>ALU operace</em> patří k velmi zajímavým, protože je pomocí nich možné
provádět i poměrně komplikované výpočty. Nejvyšší čtyři bity musí být nastaveny
na hodnotu <strong>0110</strong>. Podobně jako u předchozího typu instrukce, i
zde je možné specifikovat zdrojové operandy a uložení výsledku. Kromě toho se
specifikují základní operace s oběma zásobníky (<strong>push</strong>,
<strong>pop</strong> atd.), jedna z celkem 28 (!) ALU operací a jeden ze
šestnácti způsobů naplnění podmínkového registru <strong>FL</strong>, který tak
nahrazuje vícebitový registr <strong>FLAGS</strong>, známý z jiných typů
procesorů.</p>

<p><em>Bitové posuny</em> mohou být poměrně komplikované, neboť do jejich
průběhu může zasahovat i obsah registru <strong>FL</strong>. Pomocí dvou bitů z
instrukčního kódu se specifikuje, zda se provádí běžné bitové posuny, nebo
posuny upravené pro operace násobení a dělení. Obsah registru
<strong>FL</strong> může být změněn buď pomocí bitu, který je bitovým posunem
"vysunut" ze zpracovávaného slova, nebo se může nad výsledkem operace provést
jedna ze šestnácti podmínek, na jejichž výsledku je posléze naplnění provedeno
(tyto podmínky jsou stejné, jako v případě ALU operací).</p>

<p>Všechny výše zmíněné typy instrukcí jsou vytvořeny tak, aby se provedly v
jednom instrukčním cyklu, což zajišťuje velkou rychlost provádění operací.
Výjimkou jsou samozřejmě instrukce pro čtení či zápis do paměti, které pro své
provedení vyžadují cykly dva. Skok do podprogramu zabere pouze jeden takt, což
je jistě, zejména v porovnání s procesory řady x86, velmi zajímavé. Návrat z
podprogramu se dokonce provede současně s probíhající instrukcí, protože se
nejedná o samostatnou instrukci, ale pouze o jeden bit instrukčního slova.</p>

<p>V následující tabulce jsou ukázána některá základní slova programovacího
jazyka Forth, která lze přímo zakódovat pomocí jedné instukce procesoru
<em>FRISC 3</em>:</p>

<pre>

0                        &gt;R
0&lt;                       @
0=                       AND
0&gt;                       BRANCH
0BRANCH                  CALL
1                        DROP
1+                       DUP
1-                       EXIT
2*                       LITERAL
2+                       NEGATE
2/                       NOT
4+                       OR
+                        OVER
-1                       R&gt;
-                        R@
&lt;                        S-&gt;D
&lt;&gt;                       U&lt;
=                        U&gt;
&gt;                        XOR

</pre>

<p>Podobně jako u předchozích zásobníkových procesorů, i zde je možné do jedné
instrukce zakódovat více slov jazyka Forth (popisované zásobníkové procesory
jsou v tomto ohledu podobné, jako procesory typu <strong>VLIW</strong>):</p>

<pre>

LIT + @              (adresa posunutá o offset)
LIT + !              (adresa posunutá o offset)
&lt;variable&gt; @         (načtení proměnné)
&lt;variable&gt; !         (uložení proměnné)
2 PICK               (kopie třetí položky uložené na zásobníku operandů)
3 PICK               (kopie čtvrté položky uložené na zásobníku operandů)

R&gt; DROP                  R@ &lt;
SWAP DROP                OVER OVER +
LIT +                    DROP LIT
OVER +                   DUP LIT +
OVER -                   DROP DUP
DUP +                    DROP OVER
DUP AND                  OVER @
DUP XOR                  2 PICK @
DUP 1+                   3 PICK @
OVER +                   OVER !
2 PICK +                 2 PICK !
3 PICK +                 3 PICK !
R@ +                     + &gt;R
R&gt; +                     DUP &gt;R
DUP &lt;                    DUP R&gt; DROP
DUP &gt;                    R&gt; DROP DUP

</pre>

<p>Tomuto zásobníkovému procesoru je podobný třicetidvoubitový zásobníkový
procesor <em>RTX 32P</em>, který je popsán v <a href="#k06">následujících
kapitolách</a>.</p>



<p><a name="k06" id="k06"></a></p>
<h2>6. Zásobníkový mikroprocesor RTX 32P</h2>

<p>Zásobníkový procesor <em>RTX 32P</em> je prototypovým procesorem firmy
Harris Semiconductor, která na něm postavila i své další komerční produkty
založené na třicetidvoubitových zásobníkových procesorech. Procesor je primárně
určen pro běh aplikací napsaných v programovacím jazyce Forth, avšak vzhledem k
možnosti dynamické změny instrukční sady je možné velmi efektivním způsobem
používat i aplikace napsané v některém jiném programovacím jazyce, například v
C-čku, Pascalu, ale i v LISPu a Prologu.</p>



<p><a name="k07" id="k07"></a></p>
<h2>7. Hardwarová konfigurace mikroprocesoru RTX 32P</h2>

<p>Zajímavé na tomto procesoru je především to, že jádro používá
mikroinstrukce, které jsou uloženy přímo na čipu v poměrně velké paměti RAM.
Změna instrukční sady je tedy velmi jednoduchá, což umožňuje optimalizaci
procesoru pro různé aplikace a programovací jazyky. Podobně jako u předchozího
procesoru, i zde jsou zásobníky vytvořeny přímo na čipu, což nemalým způsobem
urychluje přístup k jejich obsahu. Vzhledem k tomu, že je kapacita pamětí pro
mikroinstrukce a pro jednotlivé zásobníky poměrně velká, rozhodli se tvůrci
celý procesor pro testovací účely vytvořit na dvou čipech, v komerčních verzích
se však samozřejmě přešlo k jednočipovému řešení, které je levnější.</p>

<p>Vzhledem k tomu, že díky velkému zrychlování logických prvků dochází k
soustavnému urychlování práce procesorů, je procesor <em>RTX 32P</em> vytvořen
tak, že aritmeticko-logická jednotka může zpracovat dvě operace při jednom
přístupu do operační paměti. Tato paměť tak může být až dvakrát tak pomalejší,
než vlastní procesor bez toho, aby bylo znatelné zpomalení běhu programu. To
samozřejmě vyžaduje, aby bylo možné do jedné instrukce zakódovat více operací
(prováděných pomocí mikroinstrukcí), což není, vzhledem k horizontálnímu
instrukčnímu kódu, problematické. Samotné mikroinstrukce jsou na čipu uloženy v
paměti RAM, tj. po resetu mikroprocesoru již musí být tato paměť naplněna, což
se v testovací verzi procesoru dělo z připojeného řídicího počítače.</p>

<p>Zásobník operandů i zásobník návratových adres jsou vytvořeny přímo na
procesoru. Každý ze zásobníků obsahuje 512 položek, pro jejich adresování
slouží dva devítibitové čítače, které podle použité operace se zásobníkem mohou
čítat nahoru i dolů (<em>up/down counters</em>). Ukazatele na vrchol zásobníku
je možné programově přečíst i změnit, čímž je umožněno pracovat i s položkami
umístěnými ve větší hloubce zásobníků (to odpovídá sémantice Forthovských slov
<strong>pick</strong> a <strong>roll</strong>).</p>

<p>Na tomto procesoru je však nejzajímavější skutečnost, že <strong>neobsahuje
registr PC (Program Counter)</strong> ani žádnou jeho obdobu. Místo toho si s
sebou každá instrukce nese adresu instrukce následující, což umožňuje provádění
častých skoků, které jsou pro programy vytvořené ve Forthu typické. Nejedná se
sice o první procesor bez čítače instrukcí, ale i tak jde o poměrně vzácnou
vlastnost, která může být plně využita pouze ve Forthovských (a částečně i
LISPovských) programovacích jazycích.</p>



<p><a name="k08" id="k08"></a></p>
<h2>8. Instrukční sada mikroprocesoru RTX 32P</h2>

<p>Mikroprocesor <em>RTX 32P</em> má pouze jeden formát instrukcí, které mají
konstantní délku 32 bitů. V bitech 23-31 je uložen operační kód instrukce, bity
2-22 obsahují adresu další instrukce (zde existuje možnost provádění skoků či
zavolání podprogramů). Pomocí bitů 0-1 je specifikováno, jak se má chápat
uložená adresa: 00-přímý skok, 01-návrat z podprogramu, 10-volání podprogramu,
11-není použito. Pomocí jedné instrukce lze provést následující Forthovská
slova:</p>

<pre>

!                        DDROP
+                        DDUP
+!                       DNEGATE
-                        DROP
0                        DSWAP
0&lt;                       DUP
0=                       I
0BRANCH                  I'
1+                       J
1-                       LEAVE
2*                       LIT
2/                       NEGATE
&lt;                        NOP
PICK                     NOT
ROLL                     OR
=                        OVER
&gt;R                       R&gt;
?DUP                     R@
@                        ROT
ABS                      S-&gt;D
AND                      SWAP
BRANCH                   U*
D!                       U/MOD
D+                       XOR
D@

</pre>

<p>Samozřejmě je možné vytvořit i jiný formát instrukcí a to nahráním jiných
mikroinstrukčních kódů do paměti mikroinstrukcí. V současné době existují sady
instrukcí, které jsou vhodné pro provádění programů napsaných v programovacích
jazycích C, Pascal a ADA, případně i předkompilovaného LISPu a Prologu.</p>



<p><a name="k09" id="k09"></a></p>
<h2>9. Obsah dalšího pokračování</h2>

<p>V dalším, už předposledním pokračování tohoto seriálu si popíšeme funkci
třicetidvoubitových zásobníkových mikroprocesorů, které jsou určené pro běh
Javovského bytekódu. Tyto procesory měly ve své době představovat základ pro
takzvaný <em>Network computer</em>, jehož myšlenka se však prozatím příliš
neujala.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small></p>
</body>
</html>

