<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Instalace balíčků vyžadovaných pro překlad C3</a></p>
<p><a href="#k03">*** 3. Překlad C3</a></p>
<p><a href="#k04">*** 4. První spuštění překladače</a></p>
<p><a href="#k05">*** 5. Je jazyk C3 zpětně kompatibilní s&nbsp;jazykem C?</a></p>
<p><a href="#k06">*** 6. Porovnání syntaxe jazyka C s&nbsp;dalšími mainstreamovými programovacími jazyky</a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>

<p><div class="rs-tip-major">Poznámka: jazyk C3 je na poli programovacích jazyků skutečně nováčkem. Ostatně prozatím ani nebyl přidán do seznamu jazyků více či méně odvozených od jazyka C (kam bezpochyby patří). Tento seznam lze nalézt na adrese <a href="https://en.wikipedia.org/wiki/List_of_C-family_programming_languages">https://en.wikipedia.org/wiki/List_of_C-family_programming_languages</a> (najdeme zde &bdquo;staré známé&ldquo;, včetně C++, Rustu i Go).</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace balíčků vyžadovaných pro překlad C3</h2>

<p></p>

<pre>
$ <strong>sudo dnf install cmake clang git llvm llvm-devel lld lld-devel ncurses-devel</strong>
</pre>

<p></p>

<pre>
Last metadata expiration check: 0:14:31 ago on Fri 29 Aug 2025 11:36:33 AM CEST.
Package cmake-3.30.8-1.fc41.x86_64 is already installed.
Package git-2.49.0-1.fc41.x86_64 is already installed.
Dependencies resolved.
========================================================================================================================================
 Package                            Architecture             Version                                    Repository                 Size
========================================================================================================================================
Installing:
 clang                              x86_64                   18.1.8-2.fc41                              updates                    78 k
 lld                                x86_64                   18.1.8-1.fc41                              updates                    36 k
 lld-devel                          x86_64                   18.1.8-1.fc41                              updates                    25 k
 llvm                               x86_64                   18.1.8-4.fc41                              updates                    27 M
 llvm-devel                         x86_64                   18.1.8-4.fc41                              updates                   4.1 M
 ncurses-devel                      x86_64                   6.4-12.20240127.fc41                       fedora                    562 k
Installing dependencies:
 libedit-devel                      x86_64                   3.1-54.20250104cvs.fc41                    updates                    41 k
 lld-libs                           x86_64                   18.1.8-1.fc41                              updates                   1.5 M
 llvm-googletest                    x86_64                   18.1.8-4.fc41                              updates                   382 k
 llvm-static                        x86_64                   18.1.8-4.fc41                              updates                    36 M
 llvm-test                          x86_64                   18.1.8-4.fc41                              updates                   648 k
 ncurses-c++-libs                   x86_64                   6.4-12.20240127.fc41                       fedora                     38 k
&nbsp;
Transaction Summary
========================================================================================================================================
Install  12 Packages
&nbsp;
Total download size: 71 M
Installed size: 409 M
Is this ok [y/N]: 
&nbsp;
Installed:
  clang-18.1.8-2.fc41.x86_64           libedit-devel-3.1-54.20250104cvs.fc41.x86_64      lld-18.1.8-1.fc41.x86_64
  lld-devel-18.1.8-1.fc41.x86_64       lld-libs-18.1.8-1.fc41.x86_64                     llvm-18.1.8-4.fc41.x86_64
  llvm-devel-18.1.8-4.fc41.x86_64      llvm-googletest-18.1.8-4.fc41.x86_64              llvm-static-18.1.8-4.fc41.x86_64
  llvm-test-18.1.8-4.fc41.x86_64       ncurses-c++-libs-6.4-12.20240127.fc41.x86_64      ncurses-devel-6.4-12.20240127.fc41.x86_64
&nbsp;
Complete!
</pre>

<p></p>

<pre>
$ <strong>sudo dnf install libcurl-devel zlib-devel libzstd-devel libxml2-devel libffi-devel</strong>
</pre>

<p></p>

<pre>
Last metadata expiration check: 0:15:55 ago on Fri 29 Aug 2025 11:36:33 AM CEST.
Package zlib-ng-compat-devel-2.1.7-2.fc41.x86_64 is already installed.
Package libzstd-devel-1.5.7-1.fc41.x86_64 is already installed.
Package libxml2-devel-2.12.10-1.fc41.x86_64 is already installed.
Package libffi-devel-3.4.4-7.fc41.x86_64 is already installed.
Dependencies resolved.
========================================================================================================================================
 Package                            Architecture                Version                              Repository                    Size
========================================================================================================================================
Installing:
 libcurl-devel                      x86_64                      8.6.0-10.fc41                        updates                      851 k
&nbsp;
Transaction Summary
========================================================================================================================================
Install  1 Package
&nbsp;
Total download size: 851 k
Installed size: 1.2 M
Is this ok [y/N]:
&nbsp;
Installed:
  libcurl-devel-8.6.0-10.fc41.x86_64
&nbsp;
Complete!
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Překlad C3</h2>

<p>Nyní, když máme v&nbsp;operačním systému nainstalovány všechny potřebné nástroje i knihovny, můžeme provést druhý krok. Tím je překlad překladače (sic!) jazyka C3.</p>

<pre>
$ <strong>git clone https://github.com/c3lang/c3c.git</strong>
</pre>

<p></p>

<pre>
Cloning into 'c3c'...
remote: Enumerating objects: 52579, done.
remote: Counting objects: 100% (173/173), done.
remote: Compressing objects: 100% (97/97), done.
remote: Total 52579 (delta 107), reused 81 (delta 74), pack-reused 52406 (from 3)
Receiving objects: 100% (52579/52579), 18.51 MiB | 10.34 MiB/s, done.
Resolving deltas: 100% (38876/38876), done.
</pre>

<pre>
$ <strong>cd c3c</strong>
&nbsp;
$ <strong>cmake -B build -S . -DC3_LINK_DYNAMIC=1</strong>
&nbsp;
-- Output to: "/tmp/ramdisk/c3c/build"
-- Configuring done (1.7s)
-- Generating done (0.0s)
-- Build files have been written to: /tmp/ramdisk/c3c/build
&nbsp;
</pre>

<pre>
$ <strong>cmake --build build</strong>
&nbsp;
[  1%] Building C object CMakeFiles/miniz.dir/dependencies/miniz/miniz.c.o
[  2%] Linking C static library libminiz.a
[  2%] Built target miniz
[  3%] Building CXX object CMakeFiles/c3c_wrappers.dir/wrapper/src/wrapper.cpp.o
[  4%] Linking CXX static library libc3c_wrappers.a
[  4%] Built target c3c_wrappers
[  5%] Generating git_hash.h
Git Hash: ca2fabc9f9cf511f1abf671b95e6f058ec512f5a
[  6%] Building C object CMakeFiles/c3c.dir/src/build/builder.c.o
...
...
...
[ 96%] Building C object CMakeFiles/c3c.dir/src/compiler/llvm_codegen_value.c.o
[ 97%] Building C object CMakeFiles/c3c.dir/src/compiler/llvm_codegen_storeload.c.o
[ 98%] Building C object CMakeFiles/c3c.dir/src/compiler/llvm_codegen_builtins.c.o
[100%] Linking CXX executable c3c
[100%] Built target c3c
</pre>

<pre>
$ <strong>cd build</strong>
$ <strong>ls -l</strong>
total 25664
-rwxr-xr-x.  1 ptisnovs ptisnovs 14267984 Aug 29 11:55 c3c
-rw-r--r--.  1 ptisnovs ptisnovs    23222 Aug 29 11:54 CMakeCache.txt
drwxr-xr-x. 11 ptisnovs ptisnovs      380 Aug 29 11:55 CMakeFiles
-rw-r--r--.  1 ptisnovs ptisnovs     3232 Aug 29 11:54 cmake_install.cmake
-rw-r--r--.  1 ptisnovs ptisnovs       73 Aug 29 11:55 git_hash.h
drwxr-xr-x.  3 ptisnovs ptisnovs       60 Aug 29 11:54 lib
-rw-r--r--.  1 ptisnovs ptisnovs 11505170 Aug 29 11:55 libc3c_wrappers.a
-rw-r--r--.  1 ptisnovs ptisnovs   368636 Aug 29 11:54 libminiz.a
-rw-r--r--.  1 ptisnovs ptisnovs    99155 Aug 29 11:54 Makefile
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. První spuštění překladače</h2>

<pre>
$ <strong>./c3c</strong>
</pre>

<pre>
Usage: ./c3c [&lt;options&gt;] &lt;command&gt; [&lt;args&gt;]
&nbsp;
Commands:
&nbsp;
  compile &lt;file1&gt; [&lt;file2&gt; ...]                       Compile files without a project into an executable.
  init &lt;project name&gt;                                 Initialize a new project structure.
  init-lib &lt;library name&gt;                             Initialize a new library structure.
  build [&lt;target&gt;]                                    Build the target in the current project.
  benchmark [&lt;target&gt;]                                Run the benchmarks for the target in the current project.
  test [&lt;target&gt;]                                     Run the unit tests for the target in the current project.
  clean                                               Clean all build files.
  run [&lt;target&gt;] [-- [&lt;arg1&gt; ...]]                    Run (and build if needed) the target in the current project.
  dist [&lt;target&gt;]                                     Clean and build a target for distribution.
  clean-run [&lt;target&gt;] [-- [&lt;arg1&gt; ...]]              Clean, then run the target.
  compile-run &lt;file1&gt; [&lt;file2&gt; ...] [-- [&lt;arg1&gt; ...]] Compile files then immediately run the result.
  compile-only &lt;file1&gt; [&lt;file2&gt; ...]                  Compile files but do not perform linking.
  compile-benchmark &lt;file1&gt; [&lt;file2&gt; ...]             Compile files into a test-executable and run benchmarks.
  compile-test &lt;file1&gt; [&lt;file2&gt; ...]                  Compile files into a benchmark-executable and run unit tests.
  static-lib &lt;file1&gt; [&lt;file2&gt; ...]                    Compile files without a project into a static library.
  dynamic-lib &lt;file1&gt; [&lt;file2&gt; ...]                   Compile files without a project into a dynamic library.
  vendor-fetch &lt;library&gt; ...                          Fetches one or more libraries from the vendor collection.
  project &lt;subcommand&gt; ...                            Manipulate or view project files.

Common options:
  -h -hh --help              - Print the help, -h for the normal options, -hh for the full help.
  -V --version               - Print version information.
  -q --quiet                 - Silence unnecessary output.
  -v -vv -vvv                - Verbose output, -v for default, -vv and -vvv gives more information.
  -E                         - Lex only.
  -P                         - Only parse and output the AST as JSON.
  -C                         - Only lex, parse and check.
  -                          - Read code from standard in.
  -o &lt;file&gt;                  - Write output to &lt;file&gt;.
  -O0                        - Safe, no optimizations, emit debug info.
  -O1                        - Safe, high optimization, emit debug info.
  -O2                        - Unsafe, high optimization, emit debug info.
  -O3                        - Unsafe, high optimization, single module, emit debug info.
  -O4                        - Unsafe, highest optimization, relaxed maths, single module, emit debug info, no panic messages.
  -O5                        - Unsafe, highest optimization, fast maths, single module, emit debug info, no panic messages, no backtrace.
  -Os                        - Unsafe, high optimization, small code, single module, no debug info, no panic messages.
  -Oz                        - Unsafe, high optimization, tiny code, single module, no debug info, no panic messages, no backtrace.
  -D &lt;name&gt;                  - Add feature flag &lt;name&gt;.
  -U &lt;name&gt;                  - Remove feature flag &lt;name&gt;.

  --about                    - Prints a short description of C3.
  --build-env                - Prints build environment information (only valid with in combination with a command such as 'compile').
  --run-dir &lt;dir&gt;            - Set the directory from where to run the binary (only for run and compile-run).
  --libdir &lt;dir&gt;             - Add this directory to the c3l library search paths.
  --lib &lt;name&gt;               - Add this c3l library to the compilation.
  --sources &lt;file1&gt; [&lt;file2&gt; ...] - Add these additional sources to the compilation.

  -g                         - Emit debug info.
  -g0                        - Emit no debug info.

  -l &lt;library&gt;               - Link with the static or dynamic library provided.
  -L &lt;library dir&gt;           - Append the directory to the linker search paths.
  -z &lt;argument&gt;              - Send the &lt;argument&gt; as a parameter to the linker.

Use --help or -hh to view the full list of options.
</pre>

<p><div class="rs-tip-major">Poznámka: prozatím si vystačíme pouze se dvěma příkazy, a to konkrétně s&nbsp;příkazem <strong>compile</strong> a taktéž <strong>compile-run</strong>. Jejich význam by měl být zřejmý; pouze si musíme dát pozor na to, že výsledkem překladu je přímo spustitelný soubor &ndash; nemusíme explicitně provádět fázi linkování.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Je jazyk C3 zpětně kompatibilní s&nbsp;jazykem C?</h2>

<p></p>

<pre>
1: #include &lt;stdlib.h&gt;
   ^^^^^^^^
(/tmp/ramdisk/c3c/build/renderer.c3:1:1) Error: Expected the start of a global declaration here.
&nbsp;
 2: #include &lt;string.h&gt;
 3: #include &lt;stdio.h&gt;
 4: 
 5: #define NULL_CHECK(value)                                                      \
                                                                                   ^
(/tmp/ramdisk/c3c/build/renderer.c3:5:80) Error: '\' may not be placed outside of a string or comment, did you perhaps forget a " somewhere?
&nbsp;
 3: #include &lt;stdio.h&gt;
 4: 
 5: #define NULL_CHECK(value)                                                      \
 6:     if (value == NULL) {                                                       \
                                                                                   ^
(/tmp/ramdisk/c3c/build/renderer.c3:6:80) Error: '\' may not be placed outside of a string or comment, did you perhaps forget a " somewhere?
&nbsp;
 4: 
 5: #define NULL_CHECK(value)                                                      \
 6:     if (value == NULL) {                                                       \
 7:         fprintf(stderr, "NULL parameter: %s\n", #value);                       \
                                                                                   ^
(/tmp/ramdisk/c3c/build/renderer.c3:7:80) Error: '\' may not be placed outside of a string or comment, did you perhaps forget a " somewhere?
&nbsp;
 5: #define NULL_CHECK(value)                                                      \
 6:     if (value == NULL) {                                                       \
 7:         fprintf(stderr, "NULL parameter: %s\n", #value);                       \
 8:         return;                                                                \
                                                                                   ^
(/tmp/ramdisk/c3c/build/renderer.c3:8:80) Error: '\' may not be placed outside of a string or comment, did you perhaps forget a " somewhere?
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Porovnání syntaxe jazyka C s&nbsp;dalšími mainstreamovými programovacími jazyky</h2>

<p>Jak jsme si již řekli <a href="#k01">v&nbsp;úvodní kapitole</a>, patří programovací jazyk C3 do rozsáhlé rodiny &bdquo;céčkovských&ldquo; jazyků, tj.&nbsp;jazyků více či méně inspirovaných jazykem C (typicky ANSI C, pozdější verze C jsou již do jisté míry specifické). Asi nejznámějším příkladem je jazyk C++, který byl dokonce ve svých prvních verzích s&nbsp;céčkem kompatibilní. Podobnost mezi céčkovskými jazyky není pouze sémantická, ale můžeme zde vidět i značnou syntaktickou podobnost.</p>

<pre>
int <strong>factorial</strong>(int n) {
    int result = 1;
    for (int i = 1; i &lt;= n; ++i) {
        result *= i;
    }
    return result;
}
</pre>

<pre>
int <strong>factorial_recursive</strong>(int n) {
    return n == 0 ? 1 : n * factorial(n - 1);
}
</pre>

<p></p>

<pre>
fn int <strong>factorial</strong>(int n)
{
    int result = 1;
    for (int i = 1; i &lt;= n; ++i)
    {
        result *= i;
    }
    return result;
}
</pre>

<p></p>

<pre>
fn int <strong>factorial_recursive</strong>(int n)
{
    return n == 0 ? 1 : n * factorial(n - 1);
}
</pre>

V:

<pre>
fn <strong>factorial_recursive</strong>(n int) int {
  if n == 0 {
    return 1
  }
  return n * factorial_r(n - 1)
}
</pre>

zig

<pre>
fn <strong>factorial_recursive</strong>(x: u32) u32 {
    if (x == 0) {
        return 1;
    } else {
        return fact(x - 1) * x;
    }
}
</pre>

Go

func factorial(n uint) uint {
	if n == 0 {
		return 1
	}
	result := 1
	for i := 1; i &lt;= n; i++ {
		result *= i
	}
	return result
}

func factorial_recursive(n uint64)(result uint64) {
	if (n &gt; 0) {
		result = n * Factorial(n-1)
		return result
	}
	return 1
}


Rust

fn factorial(number : u32) -&gt; u32{
    let mut factorial : u32 = 1;

    for i in 1..(number+1) {
        factorial*=i;
    }

    return factorial
}

fn factorial_recursive(number : u32) -&gt; u32{
    if number&lt;=1 {
        return 1;
    }

    return number * factorial_recursive(number-1);
}


<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>

<pre>
import std::io;

fn int factorial(int n)
{
    int result = 1;
    for (int i = 1; i &lt;= n; ++i)
    {
        result *= i;
    }
    return result;
}

fn void main()
{
    for (int n = 0; n &lt;= 10; n++)
    {
        io::printf("%d! = %d\n", n, factorial(n));
    }
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>

<pre>
import std::io;

macro int factorial($n)
{
    $if $n == 0:
        return 1;
    $else
        return $n * factorial($n - 1);
    $endif
}

fn void main()
{
    const int N = 10;
    io::printf("%d! = %d\n", N, factorial(N));
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>

<pre>
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

#define NULL_CHECK(value)                                                      \
    if (value == NULL) {                                                       \
        fprintf(stderr, "NULL parameter: %s\n", #value);                       \
        return;                                                                \
    }

typedef struct {
    unsigned int width;
    unsigned int height;
} <strong>resolution_t</strong>;

void calc_julia(resolution_t *resolution, const unsigned int maxiter, const unsigned char *palette, double cx, double cy)
{
    double zy0 = -1.5;
    int y;

    NULL_CHECK(palette);

    puts("P3");
    printf("%d %d\n", resolution&gt;-width, resolution&gt;-height);
    puts("255");

    for (y=0; y &lt; resolution&gt;-height; y++) {
        double zx0 = -1.5;
        int x;
        for (x=0; x &lt; resolution&gt;-width; x++) {
            double zx = zx0;
            double zy = zy0;
            unsigned int i = 0;
            while (i &lt; maxiter) {
                double zx2 = zx * zx;
                double zy2 = zy * zy;
                if (zx2 + zy2 &gt; 4.0) {
                    break;
                }
                zy = 2.0 * zx * zy + cy;
                zx = zx2 - zy2 + cx;
                i++;
            }
            {
                const unsigned char *color = palette + 3*(i % 256);
                unsigned char r = *color++;
                unsigned char g = *color++;
                unsigned char b = *color;
                printf("%d %d %d\n", r, g, b);
            }
            zx0 += 3.0/resolution&gt;-width;
        }
        zy0 += 3.0/resolution&gt;-height;
    }
}

<i>/* Generate color palette: 256 colors, each color is represented as RGB triple. */</i>
unsigned char *generate_palette(void) {
    unsigned char *palette = (unsigned char *)malloc(256 * 3);
    unsigned char *p = palette;
    int i;

    if (palette == NULL) {
        return NULL;
    }

    <i>/* fill in by black color */</i>
    memset(palette, 0, 256 * 3);

    <i>/* green gradient */</i>
    for (i = 0; i &lt; 32; i++) {
        *p++ = 0;
        *p++ = 4 + i*6;
        *p++ = 0;
    }

    <i>/* gradient from green to yellow */</i>
    for (i = 0; i &lt; 32; i++) {
        *p++ = 4 + i * 6;
        *p++ = i * 2 &lt; 52 ? 200 + i * 2 : 252;
        *p++ = 0;
    }

    <i>/* gradient from yellow to white */</i>
    for (i = 0; i &lt; 32; i++) {
        *p++ = i * 2 &lt; 52 ? 200 + i * 2 : 252;
        *p++ = 252;
        *p++ = i * 6;
    }

    <i>/* gradient from white to yellow */</i>
    for (i = 0; i &lt; 48; i++) {
        *p++ = 252;
        *p++ = 252;
        *p++ = 252 - i * 6;
    }
    
    <i>/* gradient from yellow to green */</i>
    for (i = 0; i &lt; 48; i++) {
        *p++ = 252 - i * 6;
        *p++ = 252;
        *p++ = 0;
    }
    
    <i>/* gradient green to black */</i>
    for (i = 0; i &lt; 48; i++) {
        *p++ = 0;
        *p++ = 252 - i * 6;
        *p++ = 0;
    }

    return palette;
}

int main(int argc, char **argv)
{
    resolution_t resolution;
    unsigned char *palette = generate_palette();
    int maxiter;

    if (argc &lt; 4) {
        puts("usage: ./mandelbrot width height maxiter");
        return 1;
    }
    resolution.width = atoi(argv[1]);
    resolution.height = atoi(argv[2]);
    maxiter = atoi(argv[3]);
    calc_julia(&resolution, maxiter, palette, -0.207190825, 0.676656625);
    return 0;
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>

<pre>
import std::io;

struct Resolution {
    uint width;
    uint height;
}

fn void calc_julia(Resolution *resolution, uint maxiter, char *palette, double cx, double cy)
{
}

fn char *generate_palette() {
    char *palette = null;
    return palette;
}

fn void main()
{
    calc_julia(null, 0, null, 0.0, 0.0);
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>

<pre>
import std::io;

struct Resolution {
    uint width;
    uint height;
}

<*
 @param [in] resolution
 @param [in] palette
*>
fn void calc_julia(Resolution *resolution, uint maxiter, char *palette, double cx, double cy)
{
}

fn char *generate_palette() {
    char *palette = null;
    return palette;
}

fn void main()
{
    calc_julia(null, 0, null, 0.0, 0.0);
}
</pre>




<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>

<pre>
import std::io;

struct Resolution {
    uint width;
    uint height;
}

<*
 @param [&in] resolution
 @param [&in] palette
*>
fn void calc_julia(Resolution *resolution, uint maxiter, char *palette, double cx, double cy)
{
}

fn char *generate_palette() {
    char *palette = null;
    return palette;
}

fn void main()
{
    calc_julia(null, 0, null, 0.0, 0.0);
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>

<pre>
import std::io;

struct Resolution {
    uint width;
    uint height;
}

<*
 @param [&in] resolution
 @param [&in] palette
*>
fn void calc_julia(Resolution *resolution, uint maxiter, char *palette, double cx, double cy)
{
}

fn char *generate_palette() {
    char *palette = null;
    return palette;
}

fn void main()
{
    Resolution resolution;
    resolution.width = 512;
    resolution.height = 512;

    char* palette = generate_palette();

    calc_julia(&resolution, 0, palette, 0.0, 0.0);
}
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>

<pre>
import std::io;
import libc;

struct Resolution {
    uint width;
    uint height;
}

<*
 @param [&in] resolution
 @param [&in] palette
*>
fn void calc_julia(Resolution *resolution, uint maxiter, char *palette, double cx, double cy)
{
}

fn char *generate_palette() {
    char *palette = malloc(256*3);
    char *p = palette;

    <i>/* fill in by black color */</i>
    libc::memset(palette, 0, 256 * 3);

    <i>/* green gradient */</i>
    for (int i = 0; i &lt; 32; i++) {
        *p++ = 0;
        *p++ = 4 + i*6;
        *p++ = 0;
    }

    <i>/* gradient from green to yellow */</i>
    for (int i = 0; i &lt; 32; i++) {
        *p++ = 4 + i * 6;
        *p++ = i * 2 &lt; 52 ? 200 + i * 2 : 252;
        *p++ = 0;
    }

    <i>/* gradient from yellow to white */</i>
    for (int i = 0; i &lt; 32; i++) {
        *p++ = i * 2 &lt; 52 ? 200 + i * 2 : 252;
        *p++ = 252;
        *p++ = i * 6;
    }

    <i>/* gradient from white to yellow */</i>
    for (int i = 0; i &lt; 48; i++) {
        *p++ = 252;
        *p++ = 252;
        *p++ = 252 - i * 6;
    }
    
    <i>/* gradient from yellow to green */</i>
    for (int i = 0; i &lt; 48; i++) {
        *p++ = 252 - i * 6;
        *p++ = 252;
        *p++ = 0;
    }
    
    <i>/* gradient green to black */</i>
    for (int i = 0; i &lt; 48; i++) {
        *p++ = 0;
        *p++ = 252 - i * 6;
        *p++ = 0;
    }

    return palette;
}

fn void main()
{
    Resolution resolution;
    resolution.width = 512;
    resolution.height = 512;

    char* palette = generate_palette();

    calc_julia(&resolution, 0, palette, 0.0, 0.0);
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
import std::io;
import libc;

struct Resolution {
    uint width;
    uint height;
}

<*
 @param [&in] resolution
 @param [&in] palette
*>
fn void calc_julia(Resolution *resolution, uint maxiter, char *palette, double cx, double cy)
{
}

fn char *generate_palette() {
    char *palette = malloc(256*3);
    char *p = palette;

    <i>/* fill in by black color */</i>
    libc::memset(palette, 0, 256 * 3);

    <i>/* green gradient */</i>
    for (char i = 0; i &lt; 32; i++) {
        *p++ = 0;
        *p++ = 4 + i*6;
        *p++ = 0;
    }

    <i>/* gradient from green to yellow */</i>
    for (char i = 0; i &lt; 32; i++) {
        *p++ = 4 + i * 6;
        *p++ = i * 2 &lt; 52 ? 200 + i * 2 : 252;
        *p++ = 0;
    }

    <i>/* gradient from yellow to white */</i>
    for (char i = 0; i &lt; 32; i++) {
        *p++ = i * 2 &lt; 52 ? 200 + i * 2 : 252;
        *p++ = 252;
        *p++ = i * 6;
    }

    <i>/* gradient from white to yellow */</i>
    for (char i = 0; i &lt; 48; i++) {
        *p++ = 252;
        *p++ = 252;
        *p++ = 252 - i * 6;
    }
    
    <i>/* gradient from yellow to green */</i>
    for (char i = 0; i &lt; 48; i++) {
        *p++ = 252 - i * 6;
        *p++ = 252;
        *p++ = 0;
    }
    
    <i>/* gradient green to black */</i>
    for (char i = 0; i &lt; 48; i++) {
        *p++ = 0;
        *p++ = 252 - i * 6;
        *p++ = 0;
    }

    return palette;
}

fn void main()
{
    Resolution resolution;
    resolution.width = 512;
    resolution.height = 512;

    char* palette = generate_palette();

    calc_julia(&resolution, 0, palette, 0.0, 0.0);
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>

<pre>
import std::io;
import libc;

extern fn int puts(char*);

struct Resolution {
    uint width;
    uint height;
}

<*
 @param [&in] resolution
 @param [&in] palette
*>
fn void calc_julia(Resolution *resolution, uint maxiter, char *palette, double cx, double cy)
{
    puts("P3");
    io::printf("%d %d\n", resolution.width, resolution.height);
    puts("255");
}

fn char *generate_palette() {
    char *palette = malloc(256*3);
    char *p = palette;

    <i>/* fill in by black color */</i>
    libc::memset(palette, 0, 256 * 3);

    <i>/* green gradient */</i>
    for (char i = 0; i &lt; 32; i++) {
        *p++ = 0;
        *p++ = 4 + i*6;
        *p++ = 0;
    }

    <i>/* gradient from green to yellow */</i>
    for (char i = 0; i &lt; 32; i++) {
        *p++ = 4 + i * 6;
        *p++ = i * 2 &lt; 52 ? 200 + i * 2 : 252;
        *p++ = 0;
    }

    <i>/* gradient from yellow to white */</i>
    for (char i = 0; i &lt; 32; i++) {
        *p++ = i * 2 &lt; 52 ? 200 + i * 2 : 252;
        *p++ = 252;
        *p++ = i * 6;
    }

    <i>/* gradient from white to yellow */</i>
    for (char i = 0; i &lt; 48; i++) {
        *p++ = 252;
        *p++ = 252;
        *p++ = 252 - i * 6;
    }
    
    <i>/* gradient from yellow to green */</i>
    for (char i = 0; i &lt; 48; i++) {
        *p++ = 252 - i * 6;
        *p++ = 252;
        *p++ = 0;
    }
    
    <i>/* gradient green to black */</i>
    for (char i = 0; i &lt; 48; i++) {
        *p++ = 0;
        *p++ = 252 - i * 6;
        *p++ = 0;
    }

    return palette;
}

fn void main()
{
    Resolution resolution;
    resolution.width = 512;
    resolution.height = 512;

    char* palette = generate_palette();

    calc_julia(&resolution, 0, palette, 0.0, 0.0);
}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>

<pre>
import std::io;
import libc;

extern fn int puts(char*);

struct Resolution {
    uint width;
    uint height;
}

<*
 @param [&in] resolution
 @param [&in] palette
*>
fn void calc_julia(Resolution *resolution, uint maxiter, char *palette, double cx, double cy)
{
    puts("P3");
    io::printf("%d %d\n", resolution.width, resolution.height);
    puts("255");

    double zy0 = -1.5;
    int y;

    for (y=0; y &lt; resolution.height; y++) {
        double zx0 = -1.5;
        int x;
        for (x=0; x &lt; resolution.width; x++) {
            double zx = zx0;
            double zy = zy0;
            uint i = 0;
            while (i &lt; maxiter) {
                double zx2 = zx * zx;
                double zy2 = zy * zy;
                if (zx2 + zy2 &gt; 4.0) {
                    break;
                }
                zy = 2.0 * zx * zy + cy;
                zx = zx2 - zy2 + cx;
                i++;
            }
            char *color = palette + 3*(i % 256);
            char r = *color++;
            char g = *color++;
            char b = *color;
            io::printf("%d %d %d\n", r, g, b);
            zx0 += 3.0/resolution.width;
        }
        zy0 += 3.0/resolution.height;
    }
}

fn char *generate_palette() {
    char *palette = malloc(256*3);
    char *p = palette;

    <i>/* fill in by black color */</i>
    libc::memset(palette, 0, 256 * 3);

    <i>/* green gradient */</i>
    for (char i = 0; i &lt; 32; i++) {
        *p++ = 0;
        *p++ = 4 + i*6;
        *p++ = 0;
    }

    <i>/* gradient from green to yellow */</i>
    for (char i = 0; i &lt; 32; i++) {
        *p++ = 4 + i * 6;
        *p++ = i * 2 &lt; 52 ? 200 + i * 2 : 252;
        *p++ = 0;
    }

    <i>/* gradient from yellow to white */</i>
    for (char i = 0; i &lt; 32; i++) {
        *p++ = i * 2 &lt; 52 ? 200 + i * 2 : 252;
        *p++ = 252;
        *p++ = i * 6;
    }

    <i>/* gradient from white to yellow */</i>
    for (char i = 0; i &lt; 48; i++) {
        *p++ = 252;
        *p++ = 252;
        *p++ = 252 - i * 6;
    }
    
    <i>/* gradient from yellow to green */</i>
    for (char i = 0; i &lt; 48; i++) {
        *p++ = 252 - i * 6;
        *p++ = 252;
        *p++ = 0;
    }
    
    <i>/* gradient green to black */</i>
    for (char i = 0; i &lt; 48; i++) {
        *p++ = 0;
        *p++ = 252 - i * 6;
        *p++ = 0;
    }

    return palette;
}

fn void main()
{
    Resolution resolution;
    resolution.width = 512;
    resolution.height = 512;

    char* palette = generate_palette();

    calc_julia(&resolution, 1000, palette, -0.207190825, 0.676656625);
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>factorial.c3</td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/factorial.c3">https://github.com/tisnik/c3-examples/blob/master/factorial.c3</a></td></tr>
<tr><td> 2</td><td>factorial_macro.c3</td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/factorial_macro.c3">https://github.com/tisnik/c3-examples/blob/master/factorial_macro.c3</a></td></tr>
<tr><td> 3</td><td>swap_macro.c3</td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/swap_macro.c3">https://github.com/tisnik/c3-examples/blob/master/swap_macro.c3</a></td></tr>
<tr><td> 4</td><td>renderer.c</td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/renderer.c">https://github.com/tisnik/c3-examples/blob/master/renderer.c</a></td></tr>
<tr><td> 5</td><td>renderer_v1.c3</td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/renderer_v1.c3">https://github.com/tisnik/c3-examples/blob/master/renderer_v1.c3</a></td></tr>
<tr><td> 6</td><td>renderer_v2.c3</td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/renderer_v2.c3">https://github.com/tisnik/c3-examples/blob/master/renderer_v2.c3</a></td></tr>
<tr><td> 7</td><td>renderer_v3.c3</td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/renderer_v3.c3">https://github.com/tisnik/c3-examples/blob/master/renderer_v3.c3</a></td></tr>
<tr><td> 8</td><td>renderer_v4.c3</td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/renderer_v4.c3">https://github.com/tisnik/c3-examples/blob/master/renderer_v4.c3</a></td></tr>
<tr><td> 9</td><td>renderer_v5.c3</td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/renderer_v5.c3">https://github.com/tisnik/c3-examples/blob/master/renderer_v5.c3</a></td></tr>
<tr><td>10</td><td>renderer_v6.c3</td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/renderer_v6.c3">https://github.com/tisnik/c3-examples/blob/master/renderer_v6.c3</a></td></tr>
<tr><td>11</td><td>renderer_v7.c3</td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/renderer_v7.c3">https://github.com/tisnik/c3-examples/blob/master/renderer_v7.c3</a></td></tr>
<tr><td>12</td><td>renderer_v8.c3</td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/renderer_v8.c3">https://github.com/tisnik/c3-examples/blob/master/renderer_v8.c3</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The C3 Programming Language<br />
<a href="https://c3-lang.org/">https://c3-lang.org/</a>
</li>

<li>C3 For C Programmers<br />
<a href="https://c3-lang.org/language-overview/primer/">https://c3-lang.org/language-overview/primer/</a>
</li>

<li>C3 is a C-like language trying to be an incremental improvement over C rather than a whole new language<br />
<a href="https://www.reddit.com/r/ProgrammingLanguages/comments/oohij6/c3_is_a_clike_language_trying_to_be_an/">https://www.reddit.com/r/ProgrammingLanguages/comments/oohij6/c3_is_a_clike_language_trying_to_be_an/</a>
</li>

<li>Tiobe index<br />
<a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a>
</li>

<li>PYPL PopularitY of Programming Language<br />
<a href="https://pypl.github.io/PYPL.html">https://pypl.github.io/PYPL.html</a>
</li>

<li>C3 Tutorial<br />
<a href="https://learn-c3.org/">https://learn-c3.org/</a>
</li>

<li>History of programming languages<br />
<a href="https://devskiller.com/history-of-programming-languages/">https://devskiller.com/history-of-programming-languages/</a>
</li>

<li>History of programming languages (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/History_of_programming_languages">https://en.wikipedia.org/wiki/History_of_programming_languages</a>
</li>

<li>D language<br />
<a href="https://dlang.org/">https://dlang.org/</a>
</li>

<li>Zig programming language<br />
<a href="https://ziglang.org/">https://ziglang.org/</a>
</li>

<li>V language<br />
<a href="https://vlang.io/">https://vlang.io/</a>
</li>

<li>D programming language<br />
<a href="https://en.wikipedia.org/wiki/D_(programming_language)">https://en.wikipedia.org/wiki/D_(programming_language)</a>
</li>

<li>Zig programming language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Zig_(programming_language)">https://en.wikipedia.org/wiki/Zig_(programming_language)</a>
</li>

<li>V programming language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/V_(programming_language)">https://en.wikipedia.org/wiki/V_(programming_language)</a>
</li>

<li>Syntax highlighting for C3's programming language<br />
<a href="https://github.com/Airbus5717/c3.vim">https://github.com/Airbus5717/c3.vim</a>
</li>

<li>Go factorial<br />
<a href="https://gist.github.com/esimov/9622710">https://gist.github.com/esimov/9622710</a>
</li>

<li>Generational list of programming languages<br />
<a href="https://en.wikipedia.org/wiki/Generational_list_of_programming_languages">https://en.wikipedia.org/wiki/Generational_list_of_programming_languages</a>
</li>

<li>The Language Tree: Almost Every Programming Language Ever Made<br />
<a href="https://github.com/Phileosopher/langmap">https://github.com/Phileosopher/langmap</a>
</li>

<li>List of C-family programming languages<br />
<a href="https://en.wikipedia.org/wiki/List_of_C-family_programming_languages">https://en.wikipedia.org/wiki/List_of_C-family_programming_languages</a>
</li>

<li>Compatibility of C and C++<br />
<a href="https://en.wikipedia.org/wiki/Compatibility_of_C_and_C%2B%2B">https://en.wikipedia.org/wiki/Compatibility_of_C_and_C%2B%2B</a>
</li>

<li>C++23: compatibility with C<br />
<a href="https://www.sandordargo.com/blog/2023/08/23/cpp23-c-compatibility">https://www.sandordargo.com/blog/2023/08/23/cpp23-c-compatibility</a>
</li>

<li>Can C++ Run C Code? Understanding Language Compatibility<br />
<a href="https://www.codewithc.com/can-c-run-c-code-understanding-language-compatibility/">https://www.codewithc.com/can-c-run-c-code-understanding-language-compatibility/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

