<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory IV</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Forth a zásobníkové procesory IV</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h2>Úvodník</h2>

<p>V dnešním pokračování seriálu o programovacím jazyku Forth si popíšeme
základy práce s Forthem, zejména bude vysvětlena funkce zásobníků, které se ve
Forthu používají. Také se popíšeme postfixovou notaci (RPN notaci) při zápisu
výrazů a příkazů spolu s jejich využitím ve Forthu.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Co je to zásobník?</a><br />
<a href="#k02">2. Praktická implementace zásobníku</a><br />
<a href="#k03">3. Základní operace nad zásobníkem</a><br />
<a href="#k04">4. Abstraktní dvouzásobníkový procesor</a><br />
<a href="#k05">5. Zápis matematických operací v postfixové notaci</a><br />
<a href="#k06">6. Výpis hodnoty uložené na vrcholu zásobníku</a><br />
<a href="#k07">7. Obsah dalšího pokračování</a><br />
</p>



<p><a name="k01" id="k01"></a></p>
<h2>1. Co je to zásobník?</h2>

<p><em>Zásobník</em> (anglicky <em>stack</em>) je z hlediska programování a
programovacích technik dynamická datová struktura, pomocí které lze, podobně
jako u jednosměrně či obousměrně vázaného seznamu, ukládat a zpětně získávat
data. Zásobník se od seznamu a dalších dynamických datových struktur, jako je
fronta, strom či graf liší především množinou základních operací, určenou pro
práci s touto datovou strukturou.</p>

<p>Datová struktura zásobník, nebo jeho hardwarová implementace, se někdy
označuje akronymem <strong>LIFO</strong>, který pochází z anglického výrazu
<em><strong>L</strong>ast <strong>I</strong>n - <strong>F</strong>irst
<strong>O</strong>ut</em>. Tento výraz docela přesně vystihuje základní
vlastnost zásobníku: data, která byla do zásobníku vložena nejpozději, lze
nejdříve přečíst. Naopak to platí samozřejmě také: nejdříve vložená data do
zásobníku lze přečíst až po vyjmutí později vložených dat. Čistě implementovaný
zásobník totiž neumožňuje přímo manipulovat s daty uloženými pod jeho
vrcholem.</p>

<p>Zásobník si můžeme znázornit i graficky spolu se dvěma základními operacemi:
vložení prvku (operace <em>push</em>) a vyjmutí prvku spolu s navrácením jeho
hodnoty (operace <em>pop</em>):</p>

<p><img src="forth04_1.png" alt="Dynamická datová struktura zásobník společně s dvojicí základních operací" /></p>
<p>Obrázek 1: Dynamická datová struktura zásobník společně s dvojicí základních operací</p>

<p>Princip práce s daty u zásobníku je tedy přesně opačný než u další lineární
dynamické datové struktury - fronty (anglicky <em>queue</em>) - ze které je
možné data číst pouze v tom pořadí, v jakém byla zapsána. Fronta se proto
označuje akronymem <strong>FIFO</strong>, tj. <em><strong>F</strong>irst
<strong>I</strong>n - <strong>F</strong>irst <strong>O</strong>ut</em>.</p>

<p>Také frontu je možné znázornit graficky. Všimněte si rozdílných míst, ve
kterých do fronty data vstupují pomocí operace <em>push</em> a vystupují pomocí
operace <em>pop</em>.</p>

<p><img src="forth04_2.png" alt="Dynamická datová struktura fronta společně s dvojicí základních operací" /></p>
<p>Obrázek 2: Dynamická datová struktura fronta společně s dvojicí základních operací</p>



<p><a name="k02" id="k02"></a></p>
<h2>2. Praktická implementace zásobníku</h2>

<p>Při implementaci je většinou zásobník interně v operační paměti či externí
paměti uložen jako kontinuální blok hodnot. Hodnoty tak mezi sebou nejsou nijak
provázány, protože už podle jejich uspořádání v paměti je jasná struktura
zásobníku. Kromě toho musí existovat ještě dva ukazatele, které se používají
při veškerých operacích nad zásobníkem:</p>

<ol>

<li>První ukazatel, který se označuje zkratkou <em>SB</em>
(<strong>s</strong>tack <strong>b</strong>ase). Tento ukazatel je v rámci
jednoho procesu nebo vlákna konstantní a ukazuje na dno zásobníku. U mnoha
mikroprocesorů a operačních systémů je vrchol zásobníku pro každý proces
nastaven na maximální dostupnou adresu.  Například při práci v šestnáctibitovém
režimu (tj. většinou reálném režimu) mikroprocesorů Intel x86 je vrchol
zásobníku umístěn na adrese <tt>0xfffe</tt> v segmentu <em>SS</em>
(<strong>s</strong>tack <strong>s</strong>egment).</li>

<li>Druhý ukazatel se označuje zkratkou <em>SP</em> (<strong>s</strong>tack
<strong>p</strong>ointer). Tento ukazatel ukazuje buď na první volnou pozici v
zásobníku nebo na vrchol zásobníku - konkrétní chování závisí také na konkrétní
implementaci a z hlediska práce se zásobníkem není důležité. Na mnoha
mikroprocesorech se hodnota vrcholu zásobníku se zaplňováním snižuje, tj.
zásobník roste v paměti shora dolů (ve smyslu adres). Programátor je však od
konkrétní implementace zásobníku dostatečně odstíněn programovacím jazykem,
takže směr růstu zásobníku je pro něj ve většině případů nezajímavý.</li>

</ol>

<p>Se zásobníkem lze provádět několik základních operací, které jsou popsány v
následující kapitole.</p>



<p><a name="k03" id="k03"></a></p>
<h2>3. Základní operace nad zásobníkem</h2>

<p>V první kapitole jsem uvedl obrázek, kde je nakreslen zásobník, do nějž lze
vkládat prvky pomocí operace <em>push</em> a tyto prvky následně vybírat pomocí
operace <em>pop</em>. Tyto operace však nejsou pro plně definovanou abstraktní
datovou strukturu dostačující, protože je nutné přidat operace, které zajišťují
inicializaci zásobníku a test, zda není zásobník prázdný (ideální zásobník
nemůže být nikdy "zaplněn", proto také příslušná testovací funkce chybí).</p>

<p>Také se ukazuje, že operace <em>pop</em> vlastně provádí dva kroky, které
lze popsat dvěma jednoduššími operacemi. Nad abstraktním datovým typem zásobník
je z tohoto důvodu definováno pět základních operací:</p>

<ol>

<li><strong>Init</strong> - inicializace zásobníku. Po provedení této operace
se zásobník vyprázdní, tj. nebude obsahovat žádná data. Při implementaci této
operace bude ukazatel vrcholu zásobníku <em>SP</em> ukazovat na jeho dno -
<em>SB</em>.</li>

<li><strong>Push</strong> - vložení jedné položky do zásobníku. Pokud je
zásobník prázdný (tj. při implementaci platí <em>SP=SB</em>), tak se nová
položka vloží na jeho dno. Pokud již zásobník obsahuje nějaké položky, vloží se
nová položka na vrchol zásobníku.</li>

<li><strong>Top</strong> - tato operace vrátí hodnotu položky, která se nachází
na vrcholu zásobníku. Jedná se o poslední položku vloženou operací
<strong>Push</strong>. Tato operace skončí chybou v případě, že je zásobník
prázdný, tj. není v něm uložena žádná hodnota.</li>

<li><strong>Drop</strong> - odstranění položky z vrcholu zásobníku. Po
provedení této operace je položka, která byla naposledy vložena do zásobníku
pomocí operace <strong>Push</strong> ze zásobníku odstraněna. Tato operace
skončí s chybou v případě, že je zásobník prázdný. Jak uvidíme v dalším textu
(a jak jsme viděli i na prvním obrázku), operace <strong>Push</strong> a
<strong>Drop</strong> se při praktické implementaci většinou slučují do jedné
operace <strong>Pop</strong>, která vyjme a současně vrátí poslední položku ze
zásobníku.</li>

<li><strong>Empty</strong> - dotaz, zda je zásobník prázdný, tj. zda obsahuje
nějaké datové položky. Výsledkem této operace je pravdivostní hodnota
<em>true</em>, pokud je zásobník prázdný a <em>false</em>, pokud obsahuje
alespoň jednu datovou položku (prvek). Při implementaci se jednoduše provádí
porovnání obsahu ukazatelů <em>SP</em> a <em>SB</em>.</li>

</ol>



<p><a name="k04" id="k04"></a></p>
<h2>4. Abstraktní dvouzásobníkový procesor</h2>

<p>Programovací jazyk <a
href="http://en.wikipedia.org/wiki/Forth_programming_language">Forth</a> byl
určen zejména pro implementaci na zásobníkových procesorech, přesněji řečeno na
procesorech s minimálně dvěma zásobníky - <em>zásobníkem operandů</em>
(<strong>operand stack</strong> nebo pouze <strong>stack</strong>) a
<em>zásobníkem návratových adres</em> (<strong>return stack</strong>). Tyto
procesory se od dnes nejpoužívanějších registrových procesorů liší především
způsobem provádění aritmetických a logických operací.</p>

<p>Před popisem zásobníkových procesorů si nejprve stručně řekněme, jakým
způsobem můžeme provádět aritmetické a logické operace, tj. operace, které
pracují s jednou až třemi hodnotami na vstupu a s jednou hodnotou na výstupu.
Jedním ze základních bloků každého procesoru je aritmeticko-logická jednotka
(ALU), která vykonává veškeré aritmetické, logické a bitové operace. Na vstup
této jednotky se přivádí vstupní hodnoty (vyčíslené operandy) a kód operace,
která se má provést. Jednotka ALU žádanou operaci provede a výsledek této
operace pošle na svůj výstup.</p>

<p>Až do této chvíle není žádný podstatný rozdíl mezi jednotlivými druhy
procesorů, protože všechny ALU nabízí v podstatě stejnou funkcionalitu, liší se
pouze svým vnitřním uspořádáním, repertoárem funkcí, bitovou šířkou operandů
apod. Rozdíl však nastává ve způsobu, jakým ALU získává hodnoty, se kterými má
aritmetické a logické operace provádět (získávání hodnot operandů však
pochopitelně není věcí ALU, ale dalších bloků procesoru).</p>

<p>Principiálně je možné využít dvou strategií, z čehož vychází i dva typy
procesorů.</p>

<h3>Registrové procesory</h3>

<p>Registrové procesory ukládají všechny hodnoty pro provádění operací do
registrů, proto musí být v každé instrukci obsažena informace, se kterými
registry se má žádaná funkce provést. Tato informace je buď v instrukci
obsažena implicitně (tj. instrukce se provádí vždy nad stejným registrem či
registry) či explicitně, tj. přímo v operačním kódu instrukce.</p>

<p>Příkladem instrukce s implicitním určením registru je například instrukce
pro součet <tt>ada</tt> dostupná u procesorů Intel 8080 či Zilog Z80. Instrukce
s podobným významem má však u procesorů řady Motorola 68xxx, Intel x86 aj.
explicitní určení registrů (prvně uvedený registr je současně i registrem pro
uložení výsledků):</p>

<pre>
add ax, bx
add cx, 10
add dx, [bp+10]
</pre>

<p>Zjednodušením registrových procesorů vznikne procesor s akumulátorem.
Zjednodušení spočívá v odstranění určení prvního zdrojového a cílového operandu
z kódu instrukcí s tím, že tímto operandem je vždy speciální registr nazvaný
akumulátor. Příkladem takového typu procesoru je například Intel 8048.</p>

<h3>Zásobníkové procesory</h3>

<p>U zásobníkového procesoru je situace odlišná, protože u něj je vždy
zaručeno, že se hodnoty pro provádění operací nachází na vrcholu zásobníku.
Proto jsou operační kódy instrukcí velmi jednoduché, například:</p>

<pre>
add
</pre>

<p>Při provádění této operace je zřejmé, že se hodnoty operandů získají ze
zásobníku a výsledek se taktéž uloží na zásobník. Proto je také zakódování
operačního kódu této instrukce přímočaré, neboť se v něm nemusí vytvářet pole
pro specifikaci operandů.</p>

<p>Podrobnější popis rozdílů mezi zásobníkovými procesory a registrovými
procesory je uveden v knize <em>Stack Computers: the new wave</em>, která je
dostupná i v elektronické verzi na adrese <a
href="http://www.ece.cmu.edu/~koopman/stack_computers/">http://www.ece.cmu.edu/~koopman/stack_computers/</a>.
Tato kniha je psána velmi podrobně a čtivě (samozřejmě, že v angličtině).</p>



<p><a name="k05" id="k05"></a></p>
<h2>5. Zápis matematických operací v postfixové notaci</h2>

<p>Forth je mezi programátory znám především jako jazyk, ve kterém se
aritmetické a logické výrazy zapisují pomocí <strong>RPN</strong> -
<strong>R</strong>everse <strong>P</strong>olish <strong>N</strong>otation
(obrácené polské notace), označované také jako postfixová notace. Při tomto
způsobu zápisu se nejdříve uvádějí operandy a teprve poté operace, která se s
těmito operandy může provádět - viz také <a
href="http://www.hp.com/calculators/articles/rpn.html">RPN, An introduction to
Reverse Polish Notation</a>.</p>

<p>Už na základní škole se však každý člověk učí infixovou notaci zápisu, ve
které se operátory píšou mezi operandy. Vzhledem k prioritě operátorů je však
nutné v infixové notaci používat závorky. Rozdíl mezi následujícími dvěma
výrazy uvedenými v infixové notaci je snad zřejmý:</p>

<pre>

a+b*c
(a+b)*c

</pre>

<p>Při použití postfixové notace nejsou závorky zapotřebí, protože se priorita
operací vyjadřuje přímo posloupností operátorů. Výše uvedené výrazy lze tedy do
postfixové notace přepsat následovně:</p>

<pre>

a b c * +   nebo též   b c * a +
a b + c *   nebo též   c a b + *

</pre>

<p>Všimněte si, že u výrazů napsaných na levé straně se oproti infixové notaci
nemění pořadí operátorů.</p>

<p>Jaké jsou však výhody postfixového zápisu výrazů oproti zápisu infixovému?
Mezi základní přednost patří absence závorek, pomocí nichž se v infixové notaci
mění priority operací. Priorita je totiž v postfixové notaci velmi intuitivně
určena pozicí operátoru či funkce ve výrazu.</p>

<p>Mezi druhou výhodu patří, možná poněkud překvapivě, konzistence zápisu. Ve
skutečnosti se v běžně používané infixové notaci zapisují pouze některé
základní matematické operace, jako je sčítání, násobení nebo dělení. Další
operace se zapisují pomocí funkcí v prefixové notaci (například sinus,
odmocnina, logaritmus, minimum) a některé dokonce v notaci postfixové
(například faktoriál).</p>

<p>Pomocí postfixové notace je možné zapisovat všechny operace i funkce,
dokonce ani nezáleží na počtu operandů (stírá se rozdíl mezi unárními.
binárními, ternárními apod. operacemi). Ve skutečnosti není v postfixové notaci
prakticky žádný rozdíl mezi operacemi a funkcemi, takže pro ně není nutné
zavádět nějaká zvláštní syntaktická pravidla.</p>

<p>Důsledkem výše uvedených skutečností je fakt, že znaky běžně používané pro
operátory je možné použít pro jiné účely, podobně jako například v jazyce Lisp
nebo Scheme (což jsou mimochodem jazyky používající prefixovou notaci).</p>

<p>Aritmetické operace se ve Forthu zapisují přesně podle infixové notace s tou
podmínkou, že jednotlivé operátory od sebe musí být odděleny mezerou, znakem
tabelátoru či znakem pro konec řádku. Příklad zápisu některých aritmetických
operací a jejich kombinací:</p>

<pre>

10 20 +
10 20 *
10 20 -
10 20 + 30 *
5 4 3 2 1 * / + -

</pre>

<p>Význam výše uvedených operací ve Forthu je následující: samotný zápis čísla
znamená, že se toto číslo uloží do zásobníku. Zápis operátoru způsobí, že se
operandy vyberou ze zásobníku, provede se s nimi operace a výsledek se uloží
zpět na zásobník. Vzhledem k tomu, že všechny zmíněné operace jsou binární,
vyberou se ze zásobníku dvě hodnoty a zpět se zapíše pouze jediná hodnota, tj.
počet položek na zásobníku se o jednu sníží. (Cvičení - jaký je výsledek
poslední sekvence operací?).</p>

<p>To si můžeme ilustrovat na následujícím diagramu, kde na levé straně od
pomlček jsou naznačeny významné položky na vrcholu zásobníku před provedením
operace a na pravé straně od pomlček je uveden stav zásobníku po provedení
operace. Tento diagram se nazývá <em>stack diagram</em> a hojně se vyskytuje ve
zdrojových textech programů psaných ve Forthu:</p>

<pre>

(x y -- x+y)

</pre>



<p><a name="k06" id="k06"></a></p>
<h2>6. Výpis hodnoty uložené na vrcholu zásobníku</h2>

<p>Po spuštění některého interpretru Forthu je možné ihned (podobně jako u
kalkulaček HP) zapisovat aritmetické operace v postfixové notaci s využitím
známých operátorů <strong>+</strong> <strong>-</strong> <strong>*</strong> a
<strong>/</strong>. Pouze potřebujeme znát příkaz, kterým je možné vypsat
hodnotu na vrcholu zásobníku. Tento příkaz je velmi jednoduchý - jedná se o
prostou tečku: <strong>.</strong>, kterou je však nutné od ostatních příkazů
oddělit alespoň jednou mezerou nebo jiným "bílým" znakem.</p>

<p>Stack diagram tohoto příkazu je velmi jednoduchý, protože dochází k vyjmutí
prvku uloženého na vrcholu zásobníku:</p>

<pre>

(n -- )

</pre>

<p>Po zadání příkazu tečka se přečte hodnota uložená na vrcholu zásobníku a
zapíše se na standardní výstup. Současně je hodnota ze zásobníku odebrána,
takže se počet uložených položek o jednotku sníží. Pokud je tento příkaz
zavolán na prázdný zásobník, znamená to chybu, kterou by měl interpretr
ohlásit. Příklady použití:</p>

<pre>

10 .
10 20 + .
10 20 30 * + .
10 20 * 30 + .

</pre>

<p>Všimněte si, že všechny výše zmíněné operace pracují se zásobníkem korektně,
tj. po jejich provedení je zásobník zcela vyprázdněn. Při programování ve
Forthu je důležité, aby na zásobníku nezůstala žádná zbytečná data, neboť to ve
většině případů značí nesprávně napsanou operaci či funkci. Kód je možné
upravit libovolným způsobem, vždy se však musí dodržet podmínka, že operandy a
operátory musí být odděleny "bílým" znakem:</p>

<pre>

10 20 + .

10 20 +
.

10 20
+ .

10
20
+
.

</pre>



<p><a name="k07" id="k07"></a></p>
<h2>7. Obsah dalšího pokračování</h2>

<p>V další části tohoto seriálu se již budeme nekompromisně věnovat Forthu.
Popíšeme si zejména způsob vytváření nových slov (funkcí) a dále slova pro
tvorbu smyček a rozhodovacích příkazů.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small></p>
</body>
</html>

