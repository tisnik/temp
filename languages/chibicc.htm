<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Překladače programovacího jazyka C v&nbsp;Linuxu</a></p>
<p><a href="#k02">2. Programovací jazyk C</a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Překladače programovacího jazyka C v&nbsp;Linuxu</h2>

<p>Když vývojář používající operační systém Linux (nebo abychom neurazili, tak
GNU/Linux) použije sousloví &bdquo;překladač céčka&ldquo;, je prakticky
stoprocentně jisté, že má na mysli překladač programovacího jazyka C patřící do
rodiny GCC (GNU Compiler Collection) nebo Clang (postavený nad LLVM). Ovšem ve
skutečnosti existuje pro Linux mnohem větší množství překladačů programovacího
jazyka C. Mezi ně patří například minimalisticky pojatý projekt <i>Tiny C
Compiler</i>, jehož největší předností je velká rychlost překladu i možnost
použít tento překladač ve funkci interpretru &ndash; je jím tedy možné céčkové
programy přímo &bdquo;spouštět&ldquo;, podobně jako skripty psané v&nbsp;Perlu
či v&nbsp;BASHi, Pythonu, Ruby atd. atd. Ovšem existuje i relativně velké
množství dalších překladačů céčka.  V&nbsp;dnešním článku se kromě již
zmíněného <i>Tiny C Compileru</i> (zkráceně jen <i>tcc</i>) zaměříme i na
překladač nazvaný <i>chibicc: A Small C Compiler</i> (zkracovat to budeme na
<i>chibicc</i>).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Programovací jazyk C</h2>

<p>Jedním z&nbsp;nejpopulárnějších v&nbsp;současnosti používaných
programovacích jazyků je stále (což je mimochodem zajímavé a hodně to vypovídá
o realitě v&nbsp;IT) programovací jazyk C navržený Dennisem Ritchiem. Jazyk C
se postupně vyvinul z&nbsp;programovacích jazyků BPCL (autor Martin Richards,
1966) a B (autor Ken Thompson, 1970) až do současné podoby, která byla
standardizována v&nbsp;několika normách, z&nbsp;nichž nejznámější je
pravděpodobně stále ještě ISO/IEC 9899:1999 známá pod zkráceným označením
<i>C99</i> (následoval <i>C11</i> neboli ISO/IEC 9899:2011, <i>C17</i> neboli
ISO/IEC 9899:2018 a konečně <i>C23</i> neboli ISO/IEC 9899:2024 ). Starší,
dodnes v&nbsp;některých případech stále ještě používaný standard se jmenuje ISO
9899:1990, tento starší standard je prakticky shodný (až na jiné číslování
jednotlivých paragrafů) s&nbsp;normou ANSI C (ANSI X3.159-1989
&bdquo;Programming Language C&ldquo;) a zkráceně se označuje <i>C89</i> či méně
často <i>C90</i>. Se všemi zkratkami C89, C90, C99, C11, C17 a C23 se ještě
v&nbsp;tomto článku setkáme.</p>

<p>Programovací jazyk C je i přes absenci některých důležitých vlastností
(například mu chybí automatický správce paměti či podpora silného typování a
práce s&nbsp;objekty, výjimkami, uzávěry atd.) využívaný jak pro tvorbu open
source aplikací, tak i v&nbsp;čistě komerční oblasti &ndash; nejedná se jen o
vývoj aplikací pro desktopy a servery, ale i pro mikrořadiče či digitální
signálové procesory (DSP). Céčko je mnohdy využíváno i ve funkci cílového
jazyka, do něhož se překládají (transpilují) programy zapsané v&nbsp;některých
vyšších programovacích jazycích &ndash; vývojáři, kteří překladače těchto
jazyků vytváří, se tak nemusí starat například o nízkoúrovňové optimalizace,
protože je za ně již naprogramovali vývojáři překladače céčka.
Z&nbsp;historického hlediska je zajímavé, že právě tímto způsobem vznikla první
verze jazyka C++ (nástroj Cpre), i když moderní překladače C++ jsou již řešeny
odděleně.</p>

<p>To však není zdaleka vše, protože programovací jazyk C je dodnes důležitý i
z&nbsp;toho důvodu, že jak rozhraní jader některých operačních systémů (Linux,
Microsoft Windows i dalších systémů), tak rozhraní systémových knihoven bylo
navrženo s&nbsp;ohledem na jmenné konvence céčka i s&nbsp;ohledem na možnosti
jeho linkeru (a ostatní jazyky toto rozhraní s&nbsp;většími či menšími problémy
dodržují).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Překladače programovacího jazyka C v&nbsp;Linuxu</h2>

Vývoj operačního systému GNU/Linux byl do značné míry ovlivněn, a možná bych si dokonce dovolil říci, že vůbec umožněn tím, že na něj byly portovány nástroje označované souhrnným názvem „GNU Compiler Collection (GCC)“. Tyto nástroje obsahují překladače několika programovacích jazyků, především pak překladače jazyků C, C++, Objective C, Java, Ada a Fortran. Kromě překladačů jsou součástí GCC i další nástroje, zejména preprocesor používaný jazyky C a C++, GNU assembler, linker, nástroj sledující pokrytí kódu testy (gconv) atd. Jedná se o velmi kvalitní nástroje, které navíc podporují obrovské množství různých platforem, operačních systémů a procesorových architektur, samozřejmě včetně procesorů řady x86 a x86_64.

Kromě překladače céčka patřícího do skupiny nástrojů GCC (i samotný překladač se jmenuje GCC – GNU C Compiler, což může být poněkud matoucí, je tedy nutné vždy sledovat kontext, ve kterém se o GCC mluví či píše) je možné v operačním systému Linux použít i další překladače. Mezi ně patří například Clang z projektu LLVM, jenž je zajímavý především po technologické stránce. Dále se pak můžeme setkat s překladači komerčních firem, například překladačem vytvořeným společností Intel, který v případě některých typů optimalizací překonává GCC. V neposlední řadě je pak možné v Linuxu (a nutno říci, že nejenom v něm) použít překladač nazvaný „Tiny C Compiler“ (tcc), jehož popisem a porovnáním s GCC se budeme zabývat v následujících kapitolách.



<p><a name="k04"></a></p>
<h2 id="k04">4. Tiny C Compiler</h2>

Tiny C Compiler (tcc) je překladač programovacího jazyka C, který byl původně vytvořen Fabricem Bellardem a nyní se o jeho další vývoj a portaci na nové platformy stará komunita vývojářů, protože se samozřejmě jedná o open-source projekt. Tiny C Compiler v sobě kromě vlastního překladače obsahuje i linker, což znamená, že jeden binární program může sloužit jak pro překlad zdrojových textů (včetně preprocesingu) do objektového kódu, tak pro vytvoření výsledného spustitelného binárního programu. Všechny tři zmíněné funkce jsou implementovány v jediném spustitelném souboru, jehož velikost na platformě x86 nepřesahuje sto kilobajtů, což je například v porovnání s GCC zcela zanedbatelná velikost (dokonce i pouze GNU assembler je v binární podobě větší než celý tcc).



<pre>
$ <strong>git clone git@github.com:rui314/chibicc.git</strong>
&nbsp;
Cloning into 'chibicc'...
remote: Enumerating objects: 4584, done.
remote: Counting objects: 100% (686/686), done.
remote: Compressing objects: 100% (292/292), done.
remote: Total 4584 (delta 409), reused 664 (delta 394), pack-reused 3898
Receiving objects: 100% (4584/4584), 822.69 KiB | 1.61 MiB/s, done.
Resolving deltas: 100% (3406/3406), done.
</pre>

<pre>
$ <strong>ls -l *.[hc]</strong>
&nbsp;
-rw-rw-r-- 1 ptisnovs ptisnovs  9811 Dec 31 14:26 chibicc.h
-rw-rw-r-- 1 ptisnovs ptisnovs 43920 Dec 31 14:26 codegen.c
-rw-rw-r-- 1 ptisnovs ptisnovs  4564 Dec 31 14:26 hashmap.c
-rw-rw-r-- 1 ptisnovs ptisnovs 18392 Dec 31 14:26 main.c
-rw-rw-r-- 1 ptisnovs ptisnovs 91158 Dec 31 14:26 parse.c
-rw-rw-r-- 1 ptisnovs ptisnovs 33021 Dec 31 14:26 preprocess.c
-rw-rw-r-- 1 ptisnovs ptisnovs   690 Dec 31 14:26 strings.c
-rw-rw-r-- 1 ptisnovs ptisnovs 19317 Dec 31 14:26 tokenize.c
-rw-rw-r-- 1 ptisnovs ptisnovs  7503 Dec 31 14:26 type.c
-rw-rw-r-- 1 ptisnovs ptisnovs  6980 Dec 31 14:26 unicode.c
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
$ <strong>cd chibicc/</strong>
$ <strong>make</strong>
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o strings.o strings.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o tokenize.o tokenize.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o hashmap.o hashmap.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o type.o type.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o main.o main.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o parse.o parse.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o codegen.o codegen.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o preprocess.o preprocess.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o unicode.o unicode.c
cc -std=c11 -g -fno-common -Wall -Wno-switch -o chibicc strings.o tokenize.o hashmap.o type.o main.o parse.o codegen.o preprocess.o unicode.o
</pre>

<pre>
$ make clean
$ time make
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o strings.o strings.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o tokenize.o tokenize.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o hashmap.o hashmap.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o type.o type.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o main.o main.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o parse.o parse.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o codegen.o codegen.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o preprocess.o preprocess.c
cc -std=c11 -g -fno-common -Wall -Wno-switch   -c -o unicode.o unicode.c
cc -std=c11 -g -fno-common -Wall -Wno-switch -o chibicc strings.o tokenize.o hashmap.o type.o main.o parse.o codegen.o preprocess.o unicode.o

real    0m0,667s
user    0m0,563s
sys     0m0,098s
</pre>

<pre>
$ <strong>ls -l chibicc</strong>
&nbsp;
-rwxrwxr-x 1 ptisnovs ptisnovs 315128 Dec 31 14:28 chibicc
</pre>

<pre>
$ <strong>./chibicc --help</strong>
&nbsp;
chibicc [ -o &lt;path&gt; ] &lt;file&gt;
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
$ <strong>chibicc -I/usr/include -I/usr/include/SDL2/ main.c gfx.c</strong>
</pre>

<pre>
/usr/include/SDL2/SDL_cpuinfo.h:86: #include <immintrin.h>
                                             ^ immintrin.h: cannot open file: No such file or directory
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Chibicc na GitHubu<br />
<a href="https://github.com/rui314/chibicc">https://github.com/rui314/chibicc</a>
</li>

<li>Tiny C Compiler<br />
<a href="https://en.wikipedia.org/wiki/Tiny_C_Compiler">https://en.wikipedia.org/wiki/Tiny_C_Compiler</a>
</li>

<li>Defending Against Compiler-Based Backdoors<br />
<a href="https://blog.regehr.org/archives/1241">https://blog.regehr.org/archives/1241</a>
</li>

<li>Reflections on Trusting Trust<br />
<a href="https://www.win.tue.nl/~aeb/linux/hh/thompson/trust.html">https://www.win.tue.nl/~aeb/linux/hh/thompson/trust.html</a>
</li>

<li>Coding Machines (povídka)<br />
<a href="https://www.teamten.com/lawrence/writings/coding-machines/">https://www.teamten.com/lawrence/writings/coding-machines/</a>
</li>

<li>Stage0<br />
<a href="https://bootstrapping.miraheze.org/wiki/Stage0">https://bootstrapping.miraheze.org/wiki/Stage0</a>
</li>

<li>Projekt stage0 na GitHubu<br />
<a href="https://github.com/oriansj/stage0">https://github.com/oriansj/stage0</a>
</li>

<li>Bootstraping wiki<br />
<a href="https://bootstrapping.miraheze.org/wiki/Main_Page">https://bootstrapping.miraheze.org/wiki/Main_Page</a>
</li>

<li>Bootstrapped 6502 Assembler<br />
<a href="https://github.com/robinluckey/bootstrap-6502">https://github.com/robinluckey/bootstrap-6502</a>
</li>

<li>IBM Basic assembly language and successors (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors">https://en.wikipedia.org/wiki/IBM_Basic_assembly_language_and_successors</a>
</li>

<li>X86 Assembly/Bootloaders<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders">https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders</a>
</li>

<li>run6502, lib6502 — 6502 microprocessor emulator<br />
<a href="http://piumarta.com/software/lib6502/">http://piumarta.com/software/lib6502/</a>
</li>

<li>Simple Computer Simulator Instruction-Set<br />
<a href="http://www.science.smith.edu/dftwiki/index.php/Simple_Computer_Simulator_Instruction-Set">http://www.science.smith.edu/dftwiki/index.php/Simple_Computer_Simulator_Instruction-Set</a>
</li>

<li>Bootstrapping#Computing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Bootstrapping#Computing">https://en.wikipedia.org/wiki/Bootstrapping#Computing</a>
</li>

<li>Bootstrapping (compilers)<br />
<a href="https://en.wikipedia.org/wiki/Bootstrapping_%28compilers%29">https://en.wikipedia.org/wiki/Bootstrapping_%28compilers%29</a>
</li>

<li>Bootstrapable Builds<br />
<a href="http://bootstrappable.org/">http://bootstrappable.org/</a>
</li>

<li>What is a coder's worst nightmare?<br />
<a href="https://www.quora.com/What-is-a-coders-worst-nightmare/answer/Mick-Stute">https://www.quora.com/What-is-a-coders-worst-nightmare/answer/Mick-Stute</a>
</li>

<li>Linux Assembly<br />
<a href="http://asm.sourceforge.net/">http://asm.sourceforge.net/</a>
</li>

<li>Tombstone diagram (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tombstone_diagram">https://en.wikipedia.org/wiki/Tombstone_diagram</a>
</li>

<li>History of compiler construction (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/History_of_compiler_construction">https://en.wikipedia.org/wiki/History_of_compiler_construction</a>
</li>

<li>Self-hosting (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Self-hosting">https://en.wikipedia.org/wiki/Self-hosting</a>
</li>

<li>GNU Mes: Maxwell Equations of Software<br />
<a href="https://gitlab.com/janneke/mes">https://gitlab.com/janneke/mes</a>
</li>

<li>Tiny C Compiler<br />
<a href="https://bellard.org/tcc/">https://bellard.org/tcc/</a>
</li>

<li>Welcome to C--<br />
<a href="https://www.cs.tufts.edu/~nr/c--/index.html">https://www.cs.tufts.edu/~nr/c--/index.html</a>
</li>

<li>c4 - C in four functions<br />
<a href="https://github.com/rswier/c4">https://github.com/rswier/c4</a>
</li>

<li>Tiny BASIC (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tiny_BASIC">https://en.wikipedia.org/wiki/Tiny_BASIC</a>
</li>

<li>David A. Wheeler’s Page on Fully Countering Trusting Trust through Diverse Double-Compiling (DDC) - Countering Trojan Horse attacks on Compilers<br />
<a href="https://www.dwheeler.com/trusting-trust/">https://www.dwheeler.com/trusting-trust/</a>
</li>

<li>Reviewing Microsoft's Automatic Insertion of Telemetry into C++ Binaries<br />
<a href="https://www.infoq.com/news/2016/06/visual-cpp-telemetry">https://www.infoq.com/news/2016/06/visual-cpp-telemetry</a>
</li>

<li>Visual Studio adding telemetry function calls to binary?<br />
<a href="https://www.reddit.com/r/cpp/comments/4ibauu/visual_studio_adding_telemetry_function_calls_to/d30dmvu/">https://www.reddit.com/r/cpp/comments/4ibauu/visual_studio_adding_telemetry_function_calls_to/d30dmvu/</a>
</li>

<li>LWN - The Trojan Horse<br />
<a href="https://www.dwheeler.com/trusting-trust/spencer-19981123.txt">https://www.dwheeler.com/trusting-trust/spencer-19981123.txt</a>
</li>

<li>reproducible-builds.org<br />
<a href="https://reproducible-builds.org/">https://reproducible-builds.org/</a>
</li>

<li>Other Assemblers<br />
<a href="http://asm.sourceforge.net/howto/other.html">http://asm.sourceforge.net/howto/other.html</a>
</li>

<li>Projekt bootstrap<br />
<a href="https://github.com/ras52/bootstrap">https://github.com/ras52/bootstrap</a>
</li>

<li>Projekt bcompiler<br />
<a href="https://github.com/certik/bcompiler">https://github.com/certik/bcompiler</a>
</li>

<li>Zadní vrátka<br />
<a href="https://cs.wikipedia.org/wiki/Zadn%C3%AD_vr%C3%A1tka#Reflections_on_Trusting_Trust">https://cs.wikipedia.org/wiki/Zadn%C3%AD_vr%C3%A1tka#Reflections_on_Trusting_Trust</a>
</li>

<li>David A. Wheeler’s Personal Home Page<br />
<a href="https://www.dwheeler.com/">https://www.dwheeler.com/</a>
</li>

<li>David A. Wheeler<br />
<a href="https://en.wikipedia.org/wiki/David_A._Wheeler">https://en.wikipedia.org/wiki/David_A._Wheeler</a>
</li>

<li>Multics Security Evaluation: Vulnerability Analysis<br />
<a href="http://csrc.nist.gov/publications/history/karg74.pdf">http://csrc.nist.gov/publications/history/karg74.pdf</a>
</li>

<li>Reflections on Rusting Trust<br />
<a href="https://manishearth.github.io/blog/2016/12/02/reflections-on-rusting-trust/">https://manishearth.github.io/blog/2016/12/02/reflections-on-rusting-trust/</a>
</li>

<li>Reflections on Trusting Trust for Go (slajdy)<br />
<a href="https://www.slideshare.net/yeokm1/reflections-on-trusting-trust-for-go">https://www.slideshare.net/yeokm1/reflections-on-trusting-trust-for-go</a>
</li>

<li>Reflections on Trusting Trust for Go (zdrojové materiály)<br />
<a href="https://github.com/yeokm1/reflections-on-trusting-trust-go">https://github.com/yeokm1/reflections-on-trusting-trust-go</a>
</li>

<li>Reflections on Trusting Trust for Go - GopherConSG 2018<br />
<a href="https://www.youtube.com/watch?v=T82JttlJf60">https://www.youtube.com/watch?v=T82JttlJf60</a>
</li>

<li>Reproducing Go binaries byte-by-byte<br />
<a href="https://blog.filippo.io/reproducing-go-binaries-byte-by-byte/">https://blog.filippo.io/reproducing-go-binaries-byte-by-byte/</a>
</li>

<li>Trojský kůň<br />
<a href="https://cs.wikipedia.org/wiki/Trojsk%C3%BD_k%C5%AF%C5%88_%28program%29">https://cs.wikipedia.org/wiki/Trojsk%C3%BD_k%C5%AF%C5%88_%28program%29</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

