<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Základy programování ve Squeaku - bloky a strukturované příkazy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Základy programování ve Squeaku - bloky a strukturované příkazy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;šesté části seriálu o programovacích jazycích vhodných pro výuku programování si popíšeme, jakým způsobem se ve Squeaku používají bloky a jaký význam bloky mají (společně se třídami Boolean, True, False aj.) při tvorbě strukturovaných příkazů, tj.&nbsp;podmínek a programových smyček.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programové bloky</a></p>
<p><a href="#k02">2. Předávání parametrů do bloků</a></p>
<p><a href="#k03">3. Třídy Boolean, True, False a jejich význam</a></p>
<p><a href="#k04">4. Implementace podmíněných příkazů pomocí bloků</a></p>
<p><a href="#k05">5. Zprávy &amp; a |</a></p>
<p><a href="#k06">6. Konstrukce programových smyček s&nbsp;využitím bloků</a></p>
<p><a href="#k07">7. Počítaná smyčka s&nbsp;explicitně zadaným krokem</a></p>
<p><a href="#k08">8. Další typy cyklů</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Programové bloky</h2>

<p>V&nbsp;předchozí části seriálu o programovacích jazycích vhodných pro výuku
programování jsme se v&nbsp;poslední kapitole stručně zmínili o takzvaných
<i>programových blocích</i> neboli zkráceně o <i>blocích</i> používaných ve
<i>Squeaku</i> i dalších dialektech jazyka <i>Smalltalk</i>. Programový blok se
skládá ze dvou částí. První část tvoří nepovinné parametry, které jsou
následovány posloupností výrazů. Celý blok je uzavřen do hranatých závorek [] a
v&nbsp;případě, že se jedná o blok s&nbsp;parametry, jsou názvy parametrů bloku
odděleny od posloupnosti výrazů pomocí znaku roury (<i>pipe</i>, |). Ze způsobu
zápisu bloku by se mohlo zdát, že se jedná o obdobu běžných programových bloků
známých z&nbsp;jiných programovacích jazyků
(<strong>begin</strong>-<strong>end</strong> v&nbsp;Pascalu, {} v&nbsp;céčku či
Javě atd.), ovšem ve skutečnosti se ve <i>Squeaku</i> bloky chovají poněkud
odlišně, především v&nbsp;tom ohledu, že každý blok je současně plnohodnotným
objektem, konkrétně instancí třídy <strong>BlockClosure</strong>.</p>

<p>To mj.&nbsp;znamená, že se bloku&ndash;objektu dají posílat různé zprávy a
taktéž to, že blok může být parametrem jiných zpráv. Oba zmíněné mechanismy se
poměrně často používají mj.&nbsp;i pro implementaci řídicích struktur
(podmínek, programových smyček), které si popíšeme v&nbsp;následujících
kapitolách. Další velmi důležitou vlastností bloků je to, že jsou vyhodnocovány
explicitně, konkrétně po přijetí unární (bezparametrické) zprávy
<strong>value</strong>. Dokud tato zpráva není bloku poslána, chová se blok
jako objekt obsahující ve svých atributech seznam parametrů i seznam výrazů
(jakým způsobem je uvnitř blok implementován nás prozatím nemusí zajímat),
který není nijak vyhodnocován. Pomocí bloků lze, kromě již zmíněných řídicích
struktur, implementovat například i <i>uzávěry</i> (<i>closures</i>),
popř.&nbsp;zapisovat <i>lambda výrazy</i>, se kterými je ostatně syntaxe zápisu
bloku velmi podobná. Například následující lambda výraz představující výpočet
druhé mocniny:</p>

<pre>
&lambda;x &rarr; x*x
</pre>

<p>je možné ve <i>Squeaku</i> zapsat velmi jednoduše pomocí bloku:</p>

<pre>
[ :x | x * x ]
</pre>



<p><a name="k02"></a></p>
<h2>2. Předávání parametrů do bloků</h2>

<p>Zastavme se nyní na chvíli u programového bloku, který byl uveden na konci
první kapitoly. Jedná se o blok s&nbsp;jedním parametrem pojmenovaným
<strong>x</strong> a jedním výrazem umístěným v&nbsp;těle bloku. Jakým způsobem
však lze tento blok vyhodnotit, tj.&nbsp;jak mu lze předat skutečnou hodnotu
parametru a získat výsledek (v&nbsp;tomto případě jediného) výrazu, který tvoří
jeho tělo? Pokud by se jednalo o blok bez parametrů, byla by situace velmi
jednoduchá, protože by postačovalo poslat bloku unární zprávu se selektorem
<strong>value</strong>, což je ukázáno na následujících fragmentech kódu:</p>

<pre>
[ 6 * 7 ] value
42
</pre>

<pre>
[42 factorial] value
1405006117752879898543142606244511569936384000000000
</pre>

<pre>
[ 'ahoj' ] value
'ahoj'
</pre>

<p>U programového bloku, který akceptuje nějaký parametr nebo dokonce více
parametrů, je situace odlišná pouze v&nbsp;tom, že se namísto unární zprávy se
selektorem <strong>value</strong> musí bloku poslat zpráva s&nbsp;více
parametry (nic jiného než posílání zpráv ostatně <i>Squeak</i> u bloků nezná a
ani znát nepotřebuje). Takovým typem zprávy je například zpráva se selektorem
<strong>value:</strong>, která umožňuje předat do bloku jeden parametr, zpráva
se selektorem <strong>value:value:</strong>, pomocí níž lze předat parametry
dva atd. Pohledem do <i>System Browseru</i> snadno zjistíme, že pro třídu
<strong>BlockClosure</strong> (a taktéž <strong>BlockContext</strong>) existují
ještě metody zpracovávající zprávy se selektory
<strong>value:value:value:</strong> a
<strong>value:value:value:value:</strong>. Pokud je zapotřebí do bloku předat
více jak čtyři parametry (což je ovšem náznak toho, že blok pravděpodobně
vykonává víc činností, než je obecně vhodné), lze mu předat zprávu se
selektorem <strong>valueWithArguments:</strong>, která má (jak ostatně název
jejího selektoru napovídá &ndash; obsahuje jen jednu dvojtečku) pouze jeden
parametr, kterým je v&nbsp;tomto případě pole, přičemž počet prvků tohoto pole
není omezený. Jak si řekneme dále, lze použít jak konstantní pole, tak i
takzvaná pole výrazová.</p>

<p>Vraťme se však k&nbsp;našemu prvnímu příkladu &ndash; k&nbsp;programovému
bloku, který dokáže vypočítat druhou mocninu svého parametru, popř.&nbsp;poslat
zprávu se selektorem <strong>*</strong> obecnému objektu, který je do bloku
předán jako parametr (záleží již pouze na tomto objektu, zda a jak tuto zprávu
dokáže zpracovat). Chování tohoto bloku si můžeme jednoduše odzkoušet,
například následujícími způsoby. Povšimněte si, že se pokaždé do bloku předává
objekt jiného typu, v&nbsp;posledním příkladu konstantní pole (jehož syntaxi
jsme si prozatím nepopsali, ale pravděpodobně je z&nbsp;tohoto příkladu
zřejmá):</p>

<pre>
[:x | x*x] value: 42
1764
</pre>

<pre>
[:x | x*x] value: 42.5
1806.25
</pre>

<pre>
[:x | x*x] value: 1/2
1/4
</pre>

<pre>
[:x | x*x] value: #(1 2 3 4 5 6 7 8 9)
#(1 4 9 16 25 36 49 64 81)
</pre>



<p><a name="k03"></a></p>
<h2>3. Třídy Boolean, True, False a jejich význam</h2>

<p>Při konstrukci řídicích struktur ve <i>Squeaku</i> s&nbsp;využitím
programových bloků se neobejdeme bez znalostí několika metod definovaných
v&nbsp;abstraktní třídě <strong>Boolean</strong> a z&nbsp;ní odvozených tříd
pojmenovaných příhodně <strong>True</strong> a <strong>False</strong>.
Mimochodem, třídy <strong>True</strong> a <strong>False</strong> neumožňují
vytváření libovolného množství svých instancí, takže v&nbsp;celém virtuálním
stroji <i>Squeaku</i> je zaručeno, že existuje pouze jediná instance každé
z&nbsp;těchto tříd. Jedná se o takzvané pseudo-proměnné <strong>true</strong> a
<strong>false</strong> (jejichž hodnotu nelze měnit), které můžeme pro
jednoduchost považovat za klíčová slova (dalšími de-facto klíčovými slovy jsou
<strong>nil</strong>, <strong>self</strong>, <strong>super</strong>,
<strong>thisContext</strong> a v&nbsp;některých dialektem Smalltalku i
<strong>homeContext</strong>, další klíčová slova ve <i>Squeaku</i> neexistují
a ani nejsou zapotřebí).</p>

<p>Omezení počtu instancí tříd <strong>True</strong> a <strong>False</strong>
na jedináčky (<i>singletony</i>) má samozřejmě svůj význam, protože se tak
například umožňuje lepší optimalizace volání jejich metod (posílání zpráv) na
úrovni bajtkódu virtuálního stroje <i>Squeaku</i> (nehledě na to, že postačuje
porovnávat reference těchto objektů a nikoli jejich atributy). V&nbsp;praxi je
volání mnoha metod těchto instancí překládáno jako inline kód, čímž se obchází
klasické a poněkud zdlouhavé posílání zpráv. Jinými slovy to znamená, že
<i>Squeak</i> dokáže být (alespoň v&nbsp;této oblasti) stejně výkonný jako jiné
programovací jazyky s&nbsp;virtuálním strojem a to bez toho, aby musel pro
některé programové konstrukce zavádět speciální syntaktické kategorie. Ve třídě
<strong>Boolean</strong> je zadefinováno několik metod, pomocí nichž lze
implementovat jak strukturované podmínky, tak i například obdobu zkráceného
vyhodnocování výrazů, které známe z&nbsp;některých dalších programovacích
jazyků, jakými jsou například C, C++ či Java. Tyto metody jsou popsány
v&nbsp;navazujících kapitolách.</p>



<p><a name="k04"></a></p>
<h2>4. Implementace podmíněných příkazů pomocí bloků</h2>

<p>Nejprve si ukažme použití třídy <strong>Boolean</strong>
(resp.&nbsp;potomků této třídy &ndash; singletonů) při konstrukci obdoby
strukturovaných podmínek. Základem pro tvorbu těchto řídicích struktur jsou
metody <strong>ifTrue:</strong>, <strong>ifFalse:</strong>,
<strong>ifTrue:ifFalse:</strong> a <strong>ifFalse:ifTrue:</strong>. Jejich
použití je poměrně jednoduché a přímočaré. Pokud je například singletonu
<strong>true</strong> poslána zpráva se selektorem <strong>ifTrue:</strong>,
vyhodnotí se parametr této zprávy, což by měl být programový blok (provádí se
kontrola na typ parametru). V&nbsp;případě, že je zpráva s&nbsp;tímtéž
selektorem naopak poslána singletonu <strong>false</strong>, blok (parametr
zprávy) se nevyhodnotí a vrátí se pseudo-proměnná <strong>nil</strong>, což je
jedinečná instance (tj.&nbsp;opět singleton &ndash; jedináček) třídy
<strong>UndefinedObject</strong>. Přesně opačný význam má zpráva se selektorem
<strong>ifFalse:</strong>, která v&nbsp;případě, že je jejím příjemcem objekt
<strong>true</strong> vrátí <strong>nil</strong> a pokud je jejím příjemcem
naopak objekt <strong>false</strong>, vrátí hodnotu vzniklou vyhodnocením
bloku, který je v&nbsp;této zprávě předán jako parametr. Podívejme se na
jednoduché příklady, v&nbsp;nichž se tyto zprávy posílají přímo objektům
<strong>true</strong> a <strong>false</strong>:</p>

<pre>
true ifTrue: [ 42 ]
42
</pre>

<pre>
false ifTrue: [ 42 ]
nil
</pre>

<pre>
true ifFalse: [ 42 ]
nil
</pre>

<pre>
false ifFalse: [ 42 ]
42
</pre>

<p>Samozřejmě lze použít i složitější a současně i praktičtější konstrukce,
protože některé metody vracejí <strong>true</strong> či
<strong>false</strong>:</p>

<pre>
1 &lt; 2 ifTrue: [ 'skutecne je 1 mensi nez 2' ]
'skutecne je 1 mensi nez 2'
</pre>

<pre>
1 &lt; 2 ifTrue: [ 6*7 ]
42
</pre>

<pre>
(1/2) &lt; (1/4) ifTrue: [ 'prvni zlomek je mensi' ]
nil
</pre>

<pre>
(1/4) &lt; (1/2) ifTrue: [ 'prvni zlomek je mensi' ]
'prvni zlomek je mensi'
</pre>

<pre>
4 isString ifTrue: [ 'objekt je retezcem' ]
nil
</pre>

<pre>
'ahoj' isString ifTrue: [ 'objekt je retezcem' ]
'objekt je retezcem'
</pre>

<p>Další dvě metody <strong>ifTrue:ifFalse:</strong> a
<strong>ifFalse:ifTrue:</strong> vždy vrátí, samozřejmě v&nbsp;závislosti na
příjemci zprávy, jeden z&nbsp;vyhodnocených bloků, jsou tedy obdobou
strukturovaných příkazů typu if-then-else:</p>

<pre>
true ifTrue: [ 'prvni blok' ] ifFalse: [ 'druhy blok' ]
'prvni blok'
</pre>

<pre>
false ifTrue: [ 'prvni blok' ] ifFalse: [ 'druhy blok' ]
'druhy blok'
</pre>

<pre>
true ifFalse: [ 'prvni blok' ] ifTrue: [ 'druhy blok' ]
'druhy blok'
</pre>

<pre>
false ifFalse: [ 'prvni blok' ] ifTrue: [ 'druhy blok' ]
'prvni blok'
</pre>

<pre>
1 &lt; 2 ifTrue: [ 'jedna je mensi nez dva' ] ifFalse: [ 'je to presne naopak' ]
'jedna je mensi nez dva'
</pre>



<p><a name="k05"></a></p>
<h2>5. Zprávy &amp; a |</h2>

<p>Ve třídě <strong>Boolean</strong> jsou kromě metod zmíněných
v&nbsp;předchozí kapitole dostupné i další užitečné metody, které je možné
použít například při vytváření programového kódu, jehož některé části se mají
provést pouze při splnění (nebo naopak nesplnění) nějaké podmínky. Jedná se o
metody <strong>and:</strong>, <strong>or:</strong>, <strong>and:and:</strong>,
<strong>or:or:</strong> (plus jejich varianty se třemi a čtyřmi parametry),
<strong>&amp;</strong> (ampersand) a <strong>|</strong> (pipe). Příjemcem
těchto zpráv je vždy objekt <strong>true</strong> nebo <strong>false</strong>,
který se rozhodne, jakým způsobem zpracuje parametr nebo parametry dané zprávy.
Popišme si například metodu <strong>and:</strong> (vlastnosti metody
<strong>or:</strong> jsou obdobné). Pokud je příjemcem zprávy se selektorem
<strong>and:</strong> objekt <strong>true</strong>, vrátí se hodnota získaná
vyhodnocením bloku předaného jako parametr zprávy, ale pokud je příjemcem
objekt <strong>false</strong>, vrátí se, bez ohledu na obsah předaného bloku,
samotný příjemce zprávy, tj.&nbsp;objekt <strong>false</strong> (zde se tedy
chování zprávy <strong>and:</strong> odlišuje od zprávy
<strong>ifTrue:</strong>). Podívejme se na příklady (opět jsou velmi
jednoduché):</p>

<pre>
true and: [ 'blok' ]
'blok'
</pre>

<pre>
false and: [ 'blok' ]
false
</pre>

<pre>
1&lt;2 and: [ 'jedna je mensi nez dva' ]
'jedna je mensi nez dva'
</pre>

<pre>
1&gt;2 and: [ 'jedna je vetsi nez dva' ]
false
</pre>

<p>Zprávě <strong>and:</strong> se, i když poněkud vzdáleně, podobá zpráva
mající selektor <strong>&amp;</strong>. Jedná se o binární zprávu, tj.&nbsp;o
zprávu posílanou s&nbsp;jedním parametrem. Při poslání této zprávy objektu
<strong>true</strong> se vyhodnotí výraz (nikoli blok!), který je předán
v&nbsp;parametru zprávy a vrátí se hodnota vyhodnoceného výrazu. Pokud se
naopak tato zpráva pošle objektu <strong>false</strong>, vždy se vrátí hodnota
<strong>false</strong> (to je logické, protože v&nbsp;Booleovské logice platí,
že false and cokoli=false). Důležité přitom je, že se výraz vyhodnotí ve všech
případech, tj.&nbsp;i tehdy, kdy je přímo na základě příjemce zprávy zřejmé, že
by se výraz ve skutečnosti vyhodnocovat nemusel (viz příklad s&nbsp;objektem
<strong>false</strong> jakožto příjemcem zprávy). Nedochází zde tedy ke
zkrácenému vyhodnocování výrazů, na rozdíl od zpráv se selektorem
<strong>and:</strong> a <strong>or:</strong>. Toto chování si můžeme ukázat na
několika demonstračních příkladech:</p>

<pre>
true &amp; 42
42
</pre>

<pre>
false &amp; 42
false
</pre>

<pre>
true &amp; (1+1)
2
</pre>

<pre>
false &amp; (1+1)
false
</pre>

<pre>
true &amp; (1/0)
*** dojde k&nbsp;chybě dělení nulou ***
</pre>

<pre>
false &amp; (1/0)
*** dojde k&nbsp;chybě dělení nulou ***
</pre>

<p>Zpráva | má obdobné chování, které však odpovídá Booleovskému operátoru
disjunkce. Pokud je zpráva s&nbsp;tímto selektorem poslána objektu
<strong>true</strong>, vrátí se samotný příjemce zprávy, pokud je naopak
poslána objektu <strong>false</strong>, je vrácen vyhodnocený výraz:</p>

<pre>
true | 'a'
true
</pre>

<pre>
false | 'b'
'b'
</pre>



<p><a name="k06"></a></p>
<h2>6. Konstrukce programových smyček s&nbsp;využitím bloků</h2>

<p>Podobným způsobem, jakým jsme vytvářeli strukturované podmíněné příkazy lze
ve <i>Squeaku</i> implementovat i programové smyčky, a to jak smyčky
s&nbsp;podmínkami vyhodnocovanými na začátku či na konci těla smyčky (typy
<strong>while</strong> i <strong>repeat-until</strong>), tak i počítané
programové smyčky (<strong>for</strong>). Jak již pravděpodobně tušíte, ani pro
tvorbu smyček není ve <i>Squeaku</i> zavedena žádná speciální syntaktická
kategorie, protože si můžeme bez větších omezení vystačit s&nbsp;programovými
bloky a zprávami (to mj.&nbsp;znamená i to, že je možné si relativně snadno
vytvořit nový typ programové smyčky). Pravděpodobně nejjednodušším typem
smyčky, kterou lze ve <i>Squeaku</i> velmi snadno použít, je počítaná
smyčka, u níž není k&nbsp;dispozici aktuální hodnota jejího počitadla (právě
díky tomu je použití této smyčky jednoduché, složitější typy smyček budou
ukázány v&nbsp;dalším textu). Tuto smyčku lze vytvořit pomocí zprávy
<strong>timesRepeat:</strong>, která se pošle některé instanci třídy
<strong>Integer</strong>, tj.&nbsp;většinou číselné konstantě. Podívejme se na
příklad použití tohoto typu smyčky (před spuštěním následujícího příkazu si
otevřete okno <i>Transcript</i>):</p>

<pre>
10 timesRepeat: [ Transcript show: 'test' ]
</pre>

<p>Po spuštění předchozího příkladu se do okna <i>Transcript</i> vypíše
desetkrát slovo 'test'. Aby se za každé slovo vložil konec řádky, musí se
objektu <strong>Transcript</strong> navíc poslat unární zpráva
<strong>cr</strong>:</p>

<pre>
10 timesRepeat: [ Transcript show: 'test'. Transcript cr ]
</pre>

<p>Vzhledem k&nbsp;tomu, že unární i binární zprávy mají vyšší prioritu než
zprávy s&nbsp;více parametry, lze zapsat i následující příkaz:</p>

<pre>
10+20 timesRepeat: [ Transcript show: 'test'. Transcript cr ]
</pre>

<p>Popř.:</p>

<pre>
3 factorial timesRepeat: [ Transcript show: 'test'. Transcript cr ]
</pre>

<p>Namísto číselné konstanty se může použít i proměnná, která je stále instancí
třídy <strong>Integer</strong>, přesněji řečeno jejího potomka
<strong>SmallInteger</strong>:</p>

<pre>
a:=10
a timesRepeat: [ Transcript show: 'test'. Transcript cr ]
</pre>



<p><a name="k07"></a></p>
<h2>7. Počítaná smyčka s&nbsp;explicitně zadaným krokem</h2>

<p>Zůstaňme ještě na chvíli u počítaných smyček. V&nbsp;mnoha případech je
nutné přímo v&nbsp;těle smyčky, tj.&nbsp;v&nbsp;případě <i>Squeaku</i>
v&nbsp;bloku představujícího tělo smyčky, pracovat s&nbsp;aktuální hodnotou
počitadla smyčky. Pro tento účel je možné použít zprávu se selektorem
<strong>to:do:</strong>, kterou lze poslat jakékoli instanci třídy
<strong>Number</strong> a samozřejmě i instancím potomků této třídy, například
<strong>Integer</strong> či <strong>SmallInteger</strong>. Zpráva s&nbsp;tímto
selektorem musí být poslána se dvěma parametry. Prvním parametrem je koncová
hodnota počitadla (počáteční hodnota samozřejmě odpovídá hodnotě volaného
objektu) a druhým parametrem je jednoparametrický blok, kterému je při každé
iteraci předána aktuální hodnota počitadla. V&nbsp;následujícím příkladu je
blok volán pro indexy, která nabývají hodnoty od 10 do 20 (včetně obou
zmíněných hodnot):</p>

<pre>
10 to: 20 do: [ :i | Transcript show: i ]
</pre>

<p>Opět je přehlednější v&nbsp;okně <i>Transcript</i> po každém výpisu provést
odřádkování:</p>

<pre>
10 to: 20 do: [ :i | Transcript show: i. Transcript cr ]
</pre>

<p>V&nbsp;případě, že je nutné počitadlo smyčky zvyšovat nikoli o jedničku, ale
o uživatelem specifikovanou hodnotu, lze namísto zprávy se selektorem
<strong>to:do:</strong> zavolat zprávu mající selektor
<strong>to:by:do:</strong>. V&nbsp;této zprávě je navíc použit další
(prostřední) parametr, kterým lze nastavit krok, o nějž se zvyšuje nebo naopak
snižuje hodnota počitadla v&nbsp;každé iteraci. Chování této zprávy si můžeme
jednoduše otestovat na dvojici příkladů. V&nbsp;prvním příkladu se počitadlo
zvyšuje, ovšem s&nbsp;krokem 2, ve druhém příkladu se o dvojku naopak
v&nbsp;každé iteraci snižuje:</p>

<pre>
1 to: 10 by: 2 do: [ :i | Transcript show: i. Transcript cr ]
10 to: 0 by: -2 do: [ :i | Transcript show: i. Transcript cr ]
</pre>

<p><i>Squeak</i> si sám ohlídá některé mezní stavy, například pokus o vytvoření
nekonečné smyčky s&nbsp;krokem 0. Následující příklad skončí s&nbsp;chybou:</p>

<pre>
0 to: 10 by: 0 do: [ :i | Transcript show: i. Transcript cr ]
</pre>

<p>Jako zajímavost si vyzkoušejte použití zlomků, se kterými lze ve
<i>Squeaku</i> pracovat velmi komfortním způsobem:</p>

<pre>
0 to: 1 by: 1/10 do: [ :i | Transcript show: i. Transcript cr ]
</pre>



<p><a name="k08"></a></p>
<h2>8. Další typy cyklů</h2>

<p>Kromě počítaných smyček je ve <i>Squeaku</i> možné relativně snadno používat
i smyčky s&nbsp;podmínkou testovanou na začátku či konci těla smyčky a taktéž
smyčky typu <strong>for-each</strong>, u nichž je tělo smyčky voláno pro každý
prvek nějaké datové struktury (pole, seznamu...). Pro tyto účely se většinou
používají některé zprávy posílané přímo programovým blokům. Jedná se především
o zprávy se selektory <strong>whileTrue</strong>, <strong>whileFalse</strong>,
<strong>whileTrue:</strong> a <strong>whileFalse:</strong>. Vzhledem
k&nbsp;tomu, že se při použití těchto smyček ve většině případů neobejdeme bez
proměnných (o nichž jsme prozatím takticky pomlčeli :-), vysvětlíme si způsob
využití těchto zpráv příště, kde si taktéž ukážeme tvorbu tříd a objektů i
práci s&nbsp;poli a vlastně tak popis vlastního programovacího jazyka
<i>Squeak</i> ukončíme (později se budeme věnovat jeho grafickému uživatelskému
rozhraní a způsobu úprav tohoto rozhraní, využití jednotlivých typů nabízených
objektů atd.).</p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>Squeak home page<br />
<a href="http://www.squeak.org/">http://www.squeak.org/</a>
</li>

<li>XO: The Children's Machine<br />
<a href="http://wiki.laptop.org/go/The_Children's_Machine">http://wiki.laptop.org/go/The_Children's_Machine</a>
</li>

<li>Squeak na Wikipedii EN<br />
<a href="http://en.wikipedia.org/wiki/Squeak">http://en.wikipedia.org/wiki/Squeak</a>
</li>

<li>Squeak na Wikipedii CZ<br />
<a href="http://cs.wikipedia.org/wiki/Squeak">http://cs.wikipedia.org/wiki/Squeak</a>
</li>

<li>Squeak by Example<br />
<a href="http://squeakbyexample.org/">http://squeakbyexample.org/</a>
</li>

<li>Squeak Land<br />
<a href="http://www.squeakland.org/">http://www.squeakland.org/</a>
</li>

<li>SqueakNotes<br />
<a href="http://squeak.zwiki.org/SqueakNotes">http://squeak.zwiki.org/SqueakNotes</a>
</li>

<li>Squeak FAQ<br />
<a href="http://wiki.squeak.org/squeak/471">http://wiki.squeak.org/squeak/471</a>
</li>

<li>Learning Squeak<br />
<a href="http://c2.com/cgi/wiki?LearningSqueak">http://c2.com/cgi/wiki?LearningSqueak</a>
</li>

<li>Scratch home page<br />
<a href="http://scratch.mit.edu/">http://scratch.mit.edu/</a>
</li>

<li>Scratch (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Scratch_(programming_language)">http://en.wikipedia.org/wiki/Scratch_(programming_language)</a>
</li>

<li>Lazarus (Software)<br />
<a href="http://en.wikipedia.org/wiki/Lazarus_%28software%29">http://en.wikipedia.org/wiki/Lazarus_%28software%29</a>
</li>

<li>FreePascal<br />
<a href="http://www.freepascal.org/">http://www.freepascal.org/</a>
</li>

<li>"Why I Love Python" slides<br />
<a href="http://www.mindviewinc.com/downloads/pub/eckel/LovePython.zip">http://www.mindviewinc.com/downloads/pub/eckel/LovePython.zip</a>
</li>

<li>"Why I love Python" (presentation)<br />
<a href="http://www.slideshare.net/didip/why-i-love-python">http://www.slideshare.net/didip/why-i-love-python</a>
</li>

<li>První jazyk: Python<br />
<a href="http://macek.sandbox.cz/texty/prvni-jazyk-python/">http://macek.sandbox.cz/texty/prvni-jazyk-python/</a>
</li>

<li>Programovací jazyk Python<br />
<a href="http://www.py.cz/FrontPage">http://www.py.cz/FrontPage</a>
</li>

<li>Python &ndash; Wikipedia CS<br />
<a href="http://cs.wikipedia.org/wiki/Python">http://cs.wikipedia.org/wiki/Python</a>
</li>

<li>IPython<br />
<a href="http://en.wikipedia.org/wiki/Ipython">http://en.wikipedia.org/wiki/Ipython</a>
</li>

<li>IPython: an interactive computing environment<br />
<a href="http://ipython.scipy.org/moin/">http://ipython.scipy.org/moin/</a>
</li>

<li>Category:Python<br />
<a href="http://rosettacode.org/wiki/Category:Python">http://rosettacode.org/wiki/Category:Python</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a></li>

<li>Language Poster (O'Reilly):<br />
<a href="http://www.oreilly.com/news/graphics/prog_lang_poster.pdf">http://www.oreilly.com/news/graphics/prog_lang_poster.pdf</a></li>

<li>Informace o Comenius Logu:<br />
<a href="http://www.comlogo.input.sk/index.html">http://www.comlogo.input.sk/index.html</a></li>

<li>Stránka nabízející stažení Comenius Loga:<br />
<a href="http://www.comlogo.input.sk/nastiahnutie.html">http://www.comlogo.input.sk/nastiahnutie.html</a></li>

<li>Seminární práce o Comenius Logu:<br />
<a href="http://nwit.pedf.cuni.cz/rotal9ap/logo/">http://nwit.pedf.cuni.cz/rotal9ap/logo/</a></li>

<li>Informace o LEGO/Logu:<br />
<a href="http://education.otago.ac.nz/nzlnet/Logo/legologo.html">http://education.otago.ac.nz/nzlnet/Logo/legologo.html</a></li>

<li>Informace o systému Elica:<br />
<a href="http://www.elica.net/site/index.html">http://www.elica.net/site/index.html</a></li>

<li>Informace o systému NetLogo:<br />
<a href="http://ccl.northwestern.edu/netlogo/">http://ccl.northwestern.edu/netlogo/</a></li>

<li>Stažení NetLoga:<br />
<a href="http://ccl.northwestern.edu/netlogo/download.shtml">http://ccl.northwestern.edu/netlogo/download.shtml</a></li>

<li>Uživatelský manuál NetLoga ve formátu PDF:<br />
<a href="http://ccl.northwestern.edu/netlogo/docs/NetLogo%20User%20Manual.pdf">http://ccl.northwestern.edu/netlogo/docs/NetLogo%20User%20Manual.pdf</a></li>

<li>NetLogo FAQ:<br />
<a href="http://ccl.northwestern.edu/netlogo/docs/faq.html">http://ccl.northwestern.edu/netlogo/docs/faq.html</a></li>

<li>Domácí stránka Daniela Azumy (autora implementace Turtle Tracks):<br />
<a href="http://alumnus.caltech.edu/~dazuma/home/">http://alumnus.caltech.edu/~dazuma/home/</a></li>

<li>Informace o <i>aUCBLogu</i>:<br />
<a href="http://www.physik.uni-augsburg.de/~micheler/">http://www.physik.uni-augsburg.de/~micheler/</a></li>

<li>Domácí stránka MSW Loga:<br />
<a href="http://www.softronix.com/logo.html">http://www.softronix.com/logo.html</a></li>

<li>Karel online<br />
<a href="http://karel.oldium.net/">http://karel.oldium.net/</a>
</li>

<li>EDU-SIG: Python in Education<br />
<a href="http://www.python.org/community/sigs/current/edu-sig/">http://www.python.org/community/sigs/current/edu-sig/</a>
</li>

<li>Guido van Robot<br />
<a href="http://en.wikipedia.org/wiki/Guido_van_Robot">http://en.wikipedia.org/wiki/Guido_van_Robot</a>
</li>

<li>The Guido van Robot Programming Language<br />
<a href="http://gvr.sourceforge.net/">http://gvr.sourceforge.net/</a>
</li>

<li>An Introduction to Programming with Karel J. Robot<br />
<a href="http://blog.thingoid.com/2003/10/karel-intro/">http://blog.thingoid.com/2003/10/karel-intro/</a>
</li>

<li>Teaching a young robot new tricks<br />
<a href="http://blog.thingoid.com/2003/11/karel-new-tricks/">http://blog.thingoid.com/2003/11/karel-new-tricks/</a>
</li>

<li>Karel and Company - More Robots<br />
<a href="http://blog.thingoid.com/2003/12/karel-and-company/">http://blog.thingoid.com/2003/12/karel-and-company/</a>
</li>

<li>Karel heads for the stars<br />
<a href="http://blog.thingoid.com/2004/03/karel-star/">http://blog.thingoid.com/2004/03/karel-star/</a>
</li>

<li>Karel programming language documentation<br />
<a href="http://mormegil.wz.cz/prog/karel/prog_doc.htm">http://mormegil.wz.cz/prog/karel/prog_doc.htm</a>
</li>

<li>Karel J. Robot<br />
<a href="http://www.mainlandregional.net/dklipp/Honors%20Computer%20Science%20Java.htm">http://www.mainlandregional.net/dklipp/Honors%20Computer%20Science%20Java.htm</a>
</li>

<li>Karel (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Karel_(programming_language)">http://en.wikipedia.org/wiki/Karel_(programming_language)</a>
</li>

<li>Richard E. Pattis<br />
<a href="http://en.wikipedia.org/wiki/Richard_E._Pattis">http://en.wikipedia.org/wiki/Richard_E._Pattis</a>
</li>

<li>XKarel home page<br />
<a href="http://xkarel.sourceforge.net/eng/">http://xkarel.sourceforge.net/eng/</a>
</li>

<li>XKarel - screenshoty oken<br />
<a href="http://xkarel.sourceforge.net/eng/program.php#Okna">http://xkarel.sourceforge.net/eng/program.php#Okna</a>
</li>

<li>Greenfoot<br />
<a href="http://www.greenfoot.org/about/whatis.html">http://www.greenfoot.org/about/whatis.html</a>
</li>

<li>Computer programming -- Educational programming languages<br />
<a href="http://www.kidslike.info/computer_programming_educational_programming_languages">http://www.kidslike.info/computer_programming_educational_programming_languages</a>
</li>

<li>Making Great Programmers: Why BASIC is Still Relevant<br />
<a href="http://kidbasic.sourceforge.net/en/why.html">http://kidbasic.sourceforge.net/en/why.html</a>
</li>

<li>Gambas Wiki<br />
<a href="http://en.wikibooks.org/wiki/Gambas">http://en.wikibooks.org/wiki/Gambas</a>
</li>

<li>Free tool offers 'easy' coding<br />
<a href="http://news.bbc.co.uk/2/hi/technology/6647011.stm">http://news.bbc.co.uk/2/hi/technology/6647011.stm</a>
</li>

<li>Scratch Lowers Resistance to Programming<br />
<a href="http://www.wired.com/gadgetlab/2009/03/scratch-lowers/">http://www.wired.com/gadgetlab/2009/03/scratch-lowers/</a>
</li>

<li>Základy želví grafiky<br />
<a href="http://www.root.cz/clanky/zaklady-zelvi-grafiky/">http://www.root.cz/clanky/zaklady-zelvi-grafiky/</a>
</li>

<li>Bill Kendrick's Web Turtle<br />
<a href="http://www.sonic.net/~nbs/webturtle/">http://www.sonic.net/~nbs/webturtle/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2010</small></p>
</body>
</html>

