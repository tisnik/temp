<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory XI</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Forth a zásobníkové procesory XI</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h2>Úvodník</h2>

<p>V dnešním pokračování seriálu o programovacím jazyku Forth a zásobníkových
procesorech dokončíme část věnovanou vlastnímu popisu Forthu. Popíšeme si slova
používaná pro přesuny bloků dat, zbývající slova pro manipulaci s řetězci a
také se podíváme, jakým způsobem je možné rozšiřovat či modifikovat samotný
překladač a interpretr Forthu.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Přesuny bloků dat</a><br />
<a href="#k02">2. Slova pro práci s řetězci</a><br />
<a href="#k03">3. Rozšíření překladače</a><br />
<a href="#k04">4. Defining words</a><br />
<a href="#k05">5. Adresy vytvořených slov</a><br />
<a href="#k06">6. Podmíněný překlad</a><br />
<a href="#k07">7. Slova pro konstrukci typu switch-case</a><br />
<a href="#k08">8. Rozšíření možností v GForthu</a><br />
<a href="#k09">9. Obsah dalšího pokračování</a><br />
</p>



<p><a name="k01" id="k01"></a></p>
<h2>1. Přesuny bloků dat</h2>

<p><em>There is no better environment for figuring out hardware, though. When
we're confronted with a peripheral with 50 programmable registers, most
probably poorly documented, we've got no choice but to sit down and play with
the device. Though it's possible to use any debugger to issue specific port
input/output commands, Forth shines as we can try something simple and then
enshrine it as a "word", which gets reused as we learn more about the device.
</em></p>

<p>Jednou ze základních operací, které se při programování často provádí, je
přesun bloků dat. Tato operace se například objevuje při manipulaci s řetězci,
práci se soubory, databázemi apod. Vzhledem k tomu, že se tyto operace mnohdy
aplikují na velké objemy dat, je nutné, aby doba trvání přesunu byla co
nejkratší. Vlastní přesuny jsou proto různým způsobem optimalizovány, mnohdy se
k tomuto účelu využívají i speciální instrukce mikroprocesorů.</p>

<p>Forth pro přesuny bloků dat nabízí dokonce tři slova. Tato slova se liší
zejména tím, kterým směrem probíhá přenos dat, zda od nejnižší adresy, či
naopak od adresy nejvyšší. Ve většině případů nás nemusí směr přenosu dat
zajímat, problémy však nastanou tehdy, když se zdrojová a cílová oblast
překrývá. Potom již samozřejmě na pořadí adres záleží.</p>

<p>Prvním slovem, které provádí blokový přesun dat, je slovo
<strong>CMOVE</strong>, které má zásobníkový diagram <tt>( adr1 adr2 u --
)</tt>. Před provedením tohoto slova musí být na zásobníku operandů uložena
počáteční adresa zdrojové oblasti paměti, počáteční adresa cílové oblasti
paměti a počet přenášených bytů. Přenos se provádí od nejnižší adresy směrem k
adrese nejvyšší. Pokud se zdrojová a cílová oblast překrývá, je možné toto
slovo využít k zaplnění paměti jedním znakem (adresa se liší o jednotku) nebo
vzorkem (adresa se liší o větší počet bytů). Samozřejmě, že vyplnění paměti
jedním znakem pomocí slova <strong>CMOVE</strong> je neefektivní, protože se
každá paměťová buňka musí zapsat i přečíst. Při běžně pojaté výplni dochází
pouze k zápisu.</p>

<p>Dalším slovem určeným pro blokový přesun dat je slovo
<strong>CMOVE&gt;</strong>, jehož zásobníkový diagram je stejný, jako u slova
předchozího, tj. <tt>( adr1 adr2 u -- )</tt>. Přenos se v tomto případě provádí
od nejvyšší adresy směrem k adrese nejnižší. Toto slovo pochází z ANS-Forthu, v
některých starších dialektech se jmenovalo <strong>&lt;CMOVE</strong>, kde
menšítko naznačovalo způsob čítání adres. Naproti tomu se u standardizovaného
slova naznačuje, že cílová adresa může být bezpečně vyšší, než adresa
zdrojová.</p>

<p>Třetím slovem, kterým je možné blokově přenášet data, je slovo
<strong>MOVE</strong>, které má stejný zásobníkový diagram jako obě slova
předchozí. Po provedení tohoto slova je od cílové adresy uložena přesná kopie
dat začínající na adrese zdrojové, bez ohledu na případný překryv obou
oblastí.</p>



<p><a name="k02" id="k02"></a></p>
<h2>2. Slova pro práci s řetězci</h2>

<p><em>Forth is portable. If the implementation rigidly specifies the memory
architecture and data types used (and this can be done with essentially no
sacrifice in speed), Forth programs can be made 100% compatible among
implementations. Programs can be transferred as ASCII files, universally
interchangeable across systems. Application data types defined in Forth, using
its object creation facilities, automatically gain the portability of the
underlying data types.</em></p>

<p>Práci s řetězci jsme si popsali již v <a
href="http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory-8">osmé
části</a> tohoto seriálu (jednalo se o slova typu <strong>STRLEN</strong>,
<strong>COPY$</strong>, <strong>TYPE</strong> apod.), dnes si pouze ve zkrácené
formě uvedeme slova, která dříve nebyla popsána a která se při práci s řetězci
mohou hodit.</p>

<p>Slovo <strong>COMPARE</strong> se zásobníkovým diagramem <tt>( adr1 u1 adr2
u2 -- n )</tt> provádí porovnání dvou řetězců klasickým způsobem, tj. znak po
znaku. V případě, že jsou řetězce shodné, vrátí se nulová hodnota, jinak je na
zásobník operandů uložena hodnota -1 v případě, že je první řetězec
lexikograficky menší než řetězec druhý, nebo hodnota +1 v případě, že je první
řetězec lexikograficky větší.</p>

<p>Slovo <strong>BLANK</strong> slouží k vymazání všech znaků v řetězci
mezerou, tj. znakem, jehož ASCII kód je roven třiceti dvěma. Zásobníkový
diagram tohoto slova je <tt>( adr u -- )</tt>, tj. očekává se adresa začátku
řetězce následovaná jeho délkou.</p>

<p><strong>/STRING</strong> - změní délku řetězce tak, aby obsahoval právě
<em>N</em> znaků. Zásobníkový diagram tohoto slova je <tt>( adr1 u1 n -- adr2
u2 )</tt>.</p>

<p><strong>-TRAILING</strong> - odstraní z řetězce přebytečné mezery na
začátku. Používá se zejména při načítání ze standardního vstupu. Toto slovo
také intenzivně používá samotný interpretr Forthu.</p>

<p>Slovo <strong>PAGE</strong> sice nemanipuluje přímo s řetězci, nicméně se v
souvislosti s nimi velmi často používá. Je to obdoba příkazu pro smazání
obrazovky, s tím, že korektní funkčnost je zaručena pouze na běžných
terminálech, nikoli při přesměrování výstupu.</p>



<p><a name="k03" id="k03"></a></p>
<h2>3. Rozšíření překladače</h2>

<p><em>Forth is surprisingly modern. Although it appears to be an artifact of
the bygone days of 64K computers and teletype machines, many of its concepts,
viewed through contemporary eyes, are remarkably up to date. For example, few
languages share its ability to define new fundamental data types, along with
methods that operate upon them. The multiple dictionary facility of Forth
permits one to create objects that inherit, by default, properties of their
parents, and to implement such structures in an efficient manner.</em></p>

<p>Prozatím jsme si uvedli různé vlastnosti jazyka Forth, které byly jistě
zajímavé a neobvyklé, ale neuvedli jsme si jeho největší zvláštnost, která není
k vidění prakticky u žádného vyššího programovacího jazyka. Touto zvláštností
je přístup k samotnému interpretu a překladači, kdy se zejména překladač dá
rozšířit o další slova, nebo je možné změnit jeho interní strukturu.</p>

<p>Před stručným nástinem možností rozšiřování překladače si musíme vysvětlit
podstatný rozdíl mezi chováním slov při překladu a běhu. Forth se může nacházet
ve dvou stavech: ve stavu překladu slova či slov (<em>compile time</em>) a ve
stavu běhu slov/programu (<em>run time</em>). Každé nové slovo může být
vytvořeno tak, že se při překladu chová jinak než za běhu. Toho lze dosáhnout
pomocí slova <strong>DOES&gt;</strong>, které ukončuje část překládanou a
začíná část běhovou. Vlastní použití vypadá následovně:</p>

<pre>

: nové_slovo ...překládaná část slova... does&gt; ...běhová část slova... ;

</pre>

<p>Pro rozšiřování překladače a také pro vytváření strukturovaných proměnných,
se používají takzvané <em>defining words</em>, které jsou popsány v <a
href="#k04">následující kapitole</a>.</p>



<p><a name="k04" id="k04"></a></p>
<h2>4. Defining words</h2>

<p>Slova, jež se nazývají <em>defining words</em> (žádný přesný překlad do
češtiny mě nenapadá, snad "vytvářející slova"), tvoří velmi důležitou součást
Forthu. Tato slova totiž při svém provádění (běhu) vytváří ve slovníku slova
nová, nebo alokují paměť v již vytvořeném slovu. Mezi <em>defining words</em>
patří především již dříve popsaná slova:</p>

<pre>

variable
constant
create

</pre>

<p>Příklad slova <strong>CONSTANT</strong>:</p>

<pre>

: constant create , does&gt; @ ;

</pre>

<p>Můžeme si například vytvořit nové slovo <strong>STRING</strong>, kterým lze
deklarovat řetězce o zadané délce:</p>

<pre>

: string create allot does&gt; + ;

</pre>

<p>Použití tohoto slova při vytváření řetězce je velmi jednoduché:</p>

<pre>

30 string pozdrav

</pre>



<p><a name="k05" id="k05"></a></p>
<h2>5. Adresy vytvořených slov</h2>

<p>Jak již víme z <a
href="http://www.root.cz/serialy/programovaci-jazyk-forth/">předchozích částí
tohoto seriálu</a>, je každé nově vytvořené slovo uloženo do <em>slovníku</em>
(<em>dictionary</em>), který je interně vytvořen jako zásobník nebo jednosměrně
vázaný lineární seznam. Kód slova se v interpretru Forthu (tj. v interaktivním
režimu) vyvolá pouhým zadáním jeho jména (interně se samozřejmě pracuje s
adresou slova, to nás však v tomto případě nemusí trápit). Naopak, při
vytváření, tj. kompilaci jiného slova se do jeho těla vkládají adresy později
volaných slov. To je běžné chování, které od programovacího jazyka tohoto typu
očekáváme. Příklad:</p>

<pre>

: add + ;        \ vytvoření nového slova
                 \ a uložení do slovníku
10 20 add        \ vyvolání slova v interaktivním režimu
: scitej add ;   \ vytvoření dalšího slova
                 \ v jehož těle je adresa slova add

</pre>

<p>V některých případech však potřebujeme mít přístup přímo k adrese slova i v
interaktivním režimu. Pro tento účel se používá slovo <strong>'</strong>
(apostrof), které ve své podstatě "zabraňuje" spuštění slova; podobně se v
LISPu chová speciální forma <strong>QUOTE</strong> - <strong>"</strong>.
Použití slova <strong>'</strong> si můžeme ukázat na příkladu:</p>

<pre>

: add + ;        \ vytvoření nového slova
' add . cr       \ výpis adresy slova

</pre>

<p>Pokud by se v předchozím příkladu na druhém řádku nepoužilo slovo
<strong>'</strong>, došlo by ke spuštění/provedení slova <strong>ADD</strong>,
s uvedeným apostrofem se však pouze prohledá slovník a adresa prvního výskytu
slova <strong>ADD</strong> se uloží na zásobník operandů, odkud je potom
načtena a vytištěna slovem <strong>.</strong> (tečka).</p>

<p>Znalost adresy jednotlivých slov lze použít například pro tvorbu
samomodifikujících se programů (fuj), nebo pro jednoduchou práci s takzvanými
<em>callback funkcemi</em> (huj). U obou postupů je však nutné zajistit, aby se
slovo, jehož adresa je uložená na vrcholu zásobníku operandů, spustilo. K tomu
slouží slovo <strong>EXECUTE</strong>. Ukažme si krátký příklad, ve kterém jsou
vytvořena dvě slova pro tisk řetězce, jedna proměnná <strong>ADRESA</strong>
pro uložení adresy jednoho slova a následně slovo <strong>TISK</strong>, které
vytiskne řetězec podle adresy uložené v proměnné <strong>ADRESA</strong>:</p>

<pre>

: tisk1 ." Tisknu první řetězec" cr;
: tisk2 ." Tisknu druhý řetězec" cr;

variable adresa

: tisk a @ execute ;

\ zavolání slova, které vytiskne první řetězec
' tisk1 adresa !
tisk

\ zavolání slova, které vytiskne druhý řetězec
' tisk2 adresa !
tisk

</pre>

<p>Je zřejmé, že způsob úschovy adres slov do proměnných je velmi efektivní,
například při programování složitých rozskoků typu <strong>switch-case</strong>
(druhá možnost řešení tohoto problému je uvedena v <a href="#k07">sedmé
kapitole</a>), práci s výše zmíněnými callback funkcemi, ale i pro implementaci
jednoduchého rozšíření Forthu o objektově orientované techniky.</p>



<p><a name="k06" id="k06"></a></p>
<h2>6. Podmíněný překlad</h2>

<p>Podobně jako v C-čku a C++ je i ve Forthu možné provádět podmíněný překlad,
tj. vynechání části celého zdrojového textu z fáze překladu (fáze načtení však
probíhá vždy pro celý zdrojový text). Podmíněný překlad se například používá
při vytváření přenositelných programů, kdy se definice slov pro různé platformy
může lišit (na některých platformách například jádro Forthu již obsahuje
optimalizovaná slova pro práci s řetězci, takže je zbytečné je tvořit znovu).
Nebo je možné jeden zdrojový kód použít pro vytvoření více verzí stejné
aplikace. Při ladění je možné pomocí podmíněného překladu jednoduše a rychle
"zneviditelnit" část zdrojového kódu - použití slov pro začátek a konec
komentáře není v tomto případě vhodné.</p>

<p>Pro podmíněný překlad se používají tři slova: <strong>[if]</strong>,
<strong>[else]</strong> a <strong>[then]</strong>. Slovo <strong>[if]</strong>
vyžaduje, aby se před ním uvedl konstantní výraz, který se vyhodnotí jako
logická hodnota. Pokud je tato hodnota rovna <strong>TRUE</strong>, přeloží se
větev mezi slovy <strong>[if]</strong> a <strong>[else]</strong>, v opačném
případě se přeloží větev programu mezi slovy <strong>[else]</strong> a
<strong>[then]</strong>.</p>

<p>Jak je z předchozího odstavce patrné, je podmíněný překlad používán
prakticky stejným způsobem, jako v C/C++. Podmínky pro překlad se mohou
navzájem vnořovat, pouze je zapotřebí dát pozor na to, aby nenastal překryv
dvou podmínek. Větev mezi <strong>[else]</strong> a <strong>[then]</strong> je
možné vynechat, slovo <strong>[then]</strong> se však samozřejmě musí uvést.
Ukažme si jednoduchý příklad:</p>

<pre>

false [if]
: test ." Testovací slovo" ;
[then]

</pre>

<p>Ve složitějších případech je vhodné použít konstanty, neboť ty se při
načítání ihned překládají do slovníku:</p>

<pre>

true constant demo

demo [if]
: test ." Testovací slovo" ;
[then]

</pre>

<p>Forth by neměl provádět kontrolu syntaxe textu, který je uveden ve větvi,
jež je přeskakována. Zadaný text by se tedy měl kompletně ignorovat - z toho
vyplývá, že konstrukci <strong>[if]-[else]-[then]</strong> nelze nahradit
klasickou podmínkou <strong>if-else-then</strong> (podobnou věc mimo jiné
tvrdili tvůrci Javy, kteří do její definice nezavedli podmíněný překlad s tím,
že se vystačí s podmínkami <strong>if (demo) {} else {}</strong>, což
samozřejmě není ve všech případech možné).</p>



<p><a name="k07" id="k07"></a></p>
<h2>7. Slova pro konstrukci typu switch-case</h2>

<p>V ANS-Forthu jsou předepsána slova, která je možné použít pro jazykovou
konstrukci typu <em>switch-case</em> známou z prakticky všech imperativních
programovacích jazyků (ale je například i v LISPu). Tuto konstrukci lze složit
ze slov <strong>CASE</strong>, <strong>ENDCASE</strong>, <strong>OF</strong> a
<strong>ENDOF</strong>. Slovní popis těchto slov by byl zbytečně složitý, proto
si ukážeme jednoduchý příklad použití na slovu <strong>den-v-tydnu</strong>,
které podle hodnoty uložené na vrcholu zásobníku operandů vypíše jméno dne v
týdnu (pro jednoduchost není použit vstupní test na korektnost dat):</p>

<pre>

: den-v-tydnu
    case
        1 of ." pondělí" endof
        2 of ." úterý"   endof
        3 of ." středa"  endof
        4 of ." čtvrtek" endof
        5 of ." pátek" " endof
        6 of ." sobota"  endof
        7 of ." neděle"  endof
    endcase
    cr
;

</pre>

<p>(výše uvedený příklad by se samozřejmě v reálné aplikaci řešil spíše s
použitím tabulek, což je efektivnější)</p>



<p><a name="k08" id="k08"></a></p>
<h2>8. Rozšíření možností v GForthu</h2>

<p>Programovací jazyky GNU většinou pouze nekopírují nějaký standard, ale
přidávají k implementovaným jazykům další vlastnosti. Jestli je to dobrý či
špatný přístup záleží zejména na úhlu pohledu (viz například mnohá rozšíření
GCC), avšak některá rozšíření jsou opravdu přínosná. Podívejme se tedy, co v
této oblasti nabízí <em>GForth</em>, což je GNU verze programovacího jazyku
Forth (viz <a
href="http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory-3">třetí
část</a> tohoto seriálu).</p>

<p>Patrně nejzajímavější novou vlastností je, že je možné pojmenovat parametry
slov. Zápis názvů parametrů ke jménu slova vypadá podobně jako zápis
zásobníkového diagramu daného slova. Prakticky vypadá použití pojmenovaných
parametrů následovně:</p>

<pre>

: max { n1 n2 -- n3 }
    n1 n2 &gt; if
        n1
    else
        n2
    then
;

</pre>

<p>Ihned za jménem vytvářeného slova se nachází úhlové závorky, v nichž jsou
napsány parametry slova (samozřejmě bez specifikace typu). Potom přichází
nepovinný komentář, který začíná znaky <strong>--</strong>. Celkově tedy zápis
vypadá podobně, jako zásobníkový diagram, pouze jsou použity jiné závorky
(zásobníkový diagram je zapisován ve formě poznámky v kulatých závorkách).</p>

<p>V čem mohou být pojmenované parametry výhodné? Zejména je možné k parametrům
přistupovat přímo, bez nutnosti používat slov jako <strong>OVER</strong> a
<strong>ROT</strong>. Dále se zjednoduší a zpřehlední zápis vlastních programů,
protože je ihned patrné, které parametry mají být použity. Nevýhodou je
samozřejmě nekompatibilita s ostatními verzemi jazyka Forth a v některých
případech i neefektivita použití parametrů.</p>



<p><a name="k09" id="k09"></a></p>
<h2>9. Obsah dalšího pokračování</h2>

<p>V následujícím pokračování tohoto seriálu budou popsány některé další
programovací jazyky, které ideově vycházejí z Forthu. Uvidíme, že možnosti
těchto jazyků, jež jsou založeny na postfixové notaci a zprostředkovaně i na
dvojici zásobníků, mohou zasahovat i do oblasti grafiky či funkcionálních
jazyků.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small></p>
</body>
</html>

