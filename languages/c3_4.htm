<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Rozvětvení běhu programu založené na konstrukcích <strong>if</strong> a <strong>if-else</strong></a></p>
<p><a href="#k03">*** 3. Porovnání s&nbsp;jazykem C: nekorektní způsoby zápisu konstrukce <strong>if-else</strong></a></p>
<p><a href="#k04">*** 4. Složitější rozvětvení založené na konstrukci <strong>if-else if-else</strong></a></p>
<p><a href="#k05">*** 5. Základní forma rozvětvení založeného na konstrukci <strong>switch-case</strong></a></p>
<p><a href="#k06">*** 6. Větší množství podmínek a konstrukce <strong>switch-case</strong></a></p>
<p><a href="#k07">*** 7. Podmínky v&nbsp;konstrukci <strong>switch-case</strong> vyhodnocované v&nbsp;čase běhu procesu</a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>

<pre>
module program_stub;

fn void <strong>main</strong>()
{
}
</pre>

<pre>
Program linked to executable './program_stub'.
Launching ./program_stub
Program completed with exit code 0.
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Rozvětvení běhu programu založené na konstrukcích <strong>if</strong> a <strong>if-else</strong></h2>

<p></p>

<pre>
module if_branch;
import std::io;
&nbsp;
fn void <strong>which_number</strong>(int x) {
    if (x % 2 == 0) {
        io::printfn("%d is even number", x);
    }
}
&nbsp;
fn void <strong>main</strong>()
{
    for (int i=0; i&lt;10; i++) {
        which_number(i);
    }
}
</pre>

<pre>
0 is even number
2 is even number
4 is even number
6 is even number
8 is even number
</pre>

<p></p>

<pre>
module if_else_branch;
import std::io;
&nbsp;
fn void <strong>which_number</strong>(int x) {
    if (x % 2 == 0) {
        io::printfn("%d is even number", x);
    }
    else {
        io::printfn("%d is odd number", x);
    }
}
&nbsp;
fn void <strong>main</strong>()
{
    for (int i=0; i&lt;10; i++) {
        which_number(i);
    }
}
</pre>

<pre>
0 is even number
1 is odd number
2 is even number
3 is odd number
4 is even number
5 is odd number
6 is even number
7 is odd number
8 is even number
9 is odd number
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Porovnání s&nbsp;jazykem C: nekorektní způsoby zápisu konstrukce <strong>if-else</strong></h2>

<p></p>

<pre>
module improper_if_else;
import std::io;
&nbsp;
fn void <strong>which_number</strong>(int x) {
    if (x % 2 == 0)
        io::printfn("%d is even number", x);
    else
        io::printfn("%d is odd number", x);
}
&nbsp;
fn void <strong>main</strong>()
{
    for (int i=0; i&lt;10; i++) {
        which_number(i);
    }
}
</pre>

<pre>
 3: 
 4: fn void which_number(int x) {
 5:     if (x % 2 == 0)
 6:         io::printfn("%d is even number", x);
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
(/tmp/ramdisk/c3-control-flow/04_improper_if.c3:6:9) Error: The 'then' part of a single line if-statement must start on the same line as the 'if' or use '{ }'
</pre>

<p></p>

<pre>
module improper_if_else;
import std::io;
&nbsp;
fn void <strong>which_number</strong>(int x) {
    if (x % 2 == 0) io::printfn("%d is even number", x);
    else io::printfn("%d is odd number", x);
}
&nbsp;
fn void <strong>main</strong>()
{
    for (int i=0; i&lt;10; i++) {
        which_number(i);
    }
}
</pre>

<pre>
 2: import std::io;
 3: 
 4: fn void which_number(int x) {
 5:     if (x % 2 == 0) io::printfn("%d is even number", x);
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
(/tmp/ramdisk/c3-control-flow/05_improper_if.c3:5:21) Error: if-statements with an 'else' must use '{ }' even around a single statement.
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Složitější rozvětvení založené na konstrukci <strong>if-else if-else</strong></h2>

<p></p>

<pre>
module if_else_if;
import std::io;
&nbsp;
fn void <strong>which_number</strong>(int x) {
    if (x == 0) {
        io::printfn("%d is zero", x);
    }
    else if (x % 2 == 0) {
        io::printfn("%d is even number", x);
    }
    else {
        io::printfn("%d is odd number", x);
    }
}
&nbsp;
fn void <strong>main</strong>()
{
    for (int i=0; i&lt;10; i++) {
        which_number(i);
    }
}
</pre>

<pre>
0 is zero
1 is odd number
2 is even number
3 is odd number
4 is even number
5 is odd number
6 is even number
7 is odd number
8 is even number
9 is odd number
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Základní forma rozvětvení založeného na konstrukci <strong>switch-case</strong></h2>

<p></p>

<pre>
module switch_statement;
import std::io;
&nbsp;
fn void <strong>which_number</strong>(int x) {
    switch (x) {
        case 0:
            io::printfn("%d is zero", x);
        case 1:
            io::printfn("%d is odd number", x);
        case 2:
            io::printfn("%d is even number", x);
        default:
            io::printfn("I don't know what to say about %d", x);
    }
}
&nbsp;
fn void <strong>main</strong>()
{
    for (int i=0; i&lt;10; i++) {
        which_number(i);
    }
}
</pre>

<pre>
0 is zero
1 is odd number
2 is even number
I don't know what to say about 3
I don't know what to say about 4
I don't know what to say about 5
I don't know what to say about 6
I don't know what to say about 7
I don't know what to say about 8
I don't know what to say about 9
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Větší množství podmínek a konstrukce <strong>switch-case</strong></h2>

<p></p>

<pre>
module switch_statement;
import std::io;
&nbsp;
fn void <strong>which_number</strong>(int x) {
    switch (x) {
        case 0:
            io::printfn("%d is zero", x);
        case 1:
        case 3:
        case 5:
        case 7:
        case 9:
            io::printfn("%d is odd number", x);
        case 2:
        case 4:
        case 6:
        case 8:
        case 10:
            io::printfn("%d is even number", x);
        default:
            io::printfn("I don't know what to say about %d", x);
    }
}
&nbsp;
fn void <strong>main</strong>()
{
    for (int i=0; i&lt;10; i++) {
        which_number(i);
    }
}
</pre>

<pre>
0 is zero
1 is odd number
2 is even number
3 is odd number
4 is even number
5 is odd number
6 is even number
7 is odd number
8 is even number
9 is odd number
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Podmínky v&nbsp;konstrukci <strong>switch-case</strong> vyhodnocované v&nbsp;čase běhu procesu</h2>

<p></p>

<pre>
module switch_statement;
import std::io;
&nbsp;
fn void <strong>which_number</strong>(int x) {
    switch (true) {
        case x == 0:
            io::printfn("%d is zero", x);
        case x % 2 == 0:
            io::printfn("%d is even number", x);
        default:
            io::printfn("%d is odd number", x);
    }
}
&nbsp;
fn void <strong>main</strong>()
{
    for (int i=0; i&lt;10; i++) {
        which_number(i);
    }
}
</pre>

<pre>
0 is zero
1 is odd number
2 is even number
3 is odd number
4 is even number
5 is odd number
6 is even number
7 is odd number
8 is even number
9 is odd number
</pre>

<p></p>

<pre>
module switch_statement;
import std::io;
&nbsp;
fn void <strong>which_number</strong>(int x) {
    switch {
        case x == 0:
            io::printfn("%d is zero", x);
        case x % 2 == 0:
            io::printfn("%d is even number", x);
        default:
            io::printfn("%d is odd number", x);
    }
}
&nbsp;
fn void <strong>main</strong>()
{
    for (int i=0; i&lt;10; i++) {
        which_number(i);
    }
}
</pre>

<pre>
0 is zero
1 is odd number
2 is even number
3 is odd number
4 is even number
5 is odd number
6 is even number
7 is odd number
8 is even number
9 is odd number
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>

<pre>
module switch_statement;
import std::io;
&nbsp;
fn void <strong>which_number</strong>(int x) {
    switch (true) {
        case x == 0:
            io::printfn("%d is zero", x);
        case x % 2 == 0:
            io::printfn("%d is even number", x);
        case x % 2 != 0:
            io::printfn("%d is odd number", x);
        default:
            break;
    }
}
&nbsp;
fn void <strong>main</strong>()
{
    for (int i=0; i&lt;10; i++) {
        which_number(i);
    }
}
</pre>

<pre>
0 is zero
1 is odd number
2 is even number
3 is odd number
4 is even number
5 is odd number
6 is even number
7 is odd number
8 is even number
9 is odd number
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>

<pre>
module switch_statement;
import std::io;
&nbsp;
fn void <strong>which_number</strong>(int x) {
    switch (true) {
        case x == 0:
            io::printfn("%d is zero", x);
            nextcase;
        case x % 2 == 0:
            io::printfn("%d is even number", x);
        case x % 2 != 0:
            io::printfn("%d is odd number", x);
        default:
            break;
    }
}
&nbsp;
fn void <strong>main</strong>()
{
    for (int i=0; i&lt;10; i++) {
        which_number(i);
    }
}
</pre>

<pre>
0 is zero
0 is even number
1 is odd number
2 is even number
3 is odd number
4 is even number
5 is odd number
6 is even number
7 is odd number
8 is even number
9 is odd number
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
module loops;
import std::io;
&nbsp;
fn void <strong>main</strong>()
{
    int[10] a;
&nbsp;
    for (int i=0; i&lt;a.len; i++) {
        a[i] = (i + 1)*10;
    }
    io::printf("a=%s\n", a);
}
</pre>

<pre>
a=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
module loops;
import std::io;
&nbsp;
fn void <strong>main</strong>()
{
    int[10] a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
&nbsp;
    foreach (item : a)
    {
        io::printfn("item: %s", item);
    }
}
</pre>

<pre>
item: 1
item: 2
item: 3
item: 4
item: 5
item: 6
item: 7
item: 8
item: 9
item: 10
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
module loops;
import std::io;
&nbsp;
fn void <strong>main</strong>()
{
    int[10] a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
&nbsp;
    foreach (index, item : a)
    {
        io::printfn("item #%d: %s", index, item);
    }
}
</pre>

<pre>
item #0: 1
item #1: 2
item #2: 3
item #3: 4
item #4: 5
item #5: 6
item #6: 7
item #7: 8
item #8: 9
item #9: 10
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
module loops;
import std::io;
&nbsp;
fn void <strong>main</strong>()
{
    int[10] a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
&nbsp;
    foreach (i, item : a)
    {
        a[i] = ((int)i + 1)*10;
    }
    io::printf("a=%s\n", a);
}
</pre>

<pre>
a=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
module loops;
import std::io;
&nbsp;
fn void <strong>main</strong>()
{
    int[10] a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
&nbsp;
    foreach (i, item : a)
    {
        item = ((int)i + 1)*10;
    }
    io::printf("a=%s\n", a);
}
</pre>

<pre>
a=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</pre>

<pre>
module loops;
import std::io;
&nbsp;
fn void <strong>main</strong>()
{
    int[10] a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
&nbsp;
    foreach (i, &amp;item : a)
    {
        *item = ((int)i + 1)*10;
    }
    io::printf("a=%s\n", a);
}
</pre>

<pre>
a=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
module loops;
import std::io;
&nbsp;
fn void <strong>main</strong>()
{
    int[10] a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
&nbsp;
    foreach_r (item : a)
    {
        io::printfn("item: %s", item);
    }
}
</pre>

<pre>
item: 10
item: 9
item: 8
item: 7
item: 6
item: 5
item: 4
item: 3
item: 2
item: 1
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
module loops;
import std::io;
&nbsp;
fn void <strong>main</strong>()
{
    int[10] a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
&nbsp;
    int i = 0;
    while (i&lt;a.len) {
        io::printfn("item: %s", a[i]);
        i++;
    }
}
</pre>

<pre>
item: 1
item: 2
item: 3
item: 4
item: 5
item: 6
item: 7
item: 8
item: 9
item: 10
</pre>

<pre>
module loops;
import std::io;
&nbsp;
fn void <strong>main</strong>()
{
    int[10] a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
&nbsp;
    int i = 0;
    while (i&lt;a.len) {
        if (a[i] &gt;= 6) {
            break;
        }
        io::printfn("item: %s", a[i]);
        i++;
    }
}
</pre>

<pre>
item: 1
item: 2
item: 3
item: 4
item: 5
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
module loops;
import std::io;
&nbsp;
fn void <strong>main</strong>()
{
    for (int y=1; y&lt;=10; y++) {
        for (int x=1; x&lt;=10; x++) {
            int z = x * y;
            io::printf("%3d ", z);
        }
        io::printn();
    }
}
</pre>

<pre>
  1   2   3   4   5   6   7   8   9  10 
  2   4   6   8  10  12  14  16  18  20 
  3   6   9  12  15  18  21  24  27  30 
  4   8  12  16  20  24  28  32  36  40 
  5  10  15  20  25  30  35  40  45  50 
  6  12  18  24  30  36  42  48  54  60 
  7  14  21  28  35  42  49  56  63  70 
  8  16  24  32  40  48  56  64  72  80 
  9  18  27  36  45  54  63  72  81  90 
 10  20  30  40  50  60  70  80  90 100 
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<pre>
module loops;
import std::io;
&nbsp;
fn void <strong>main</strong>()
{
    for (int y=1; y&lt;=10; y++) {
        for (int x=1; x&lt;=10; x++) {
            int z = x * y;
            io::printf("%3d ", z);
            if (z == 42) {
                break;
            }
        }
        io::printn();
    }
}
</pre>

<pre>
  1   2   3   4   5   6   7   8   9  10 
  2   4   6   8  10  12  14  16  18  20 
  3   6   9  12  15  18  21  24  27  30 
  4   8  12  16  20  24  28  32  36  40 
  5  10  15  20  25  30  35  40  45  50 
  6  12  18  24  30  36  42 
  7  14  21  28  35  42 
  8  16  24  32  40  48  56  64  72  80 
  9  18  27  36  45  54  63  72  81  90 
 10  20  30  40  50  60  70  80  90 100 
</pre>

<pre>
module loops;
import std::io;
&nbsp;
fn void <strong>main</strong>()
{
    for END: (int y=1; y&lt;=10; y++) {
        for (int x=1; x&lt;=10; x++) {
            int z = x * y;
            io::printf("%3d ", z);
            if (z == 42) {
                break END;
            }
        }
        io::printn();
    }
}
</pre>

<pre>
  1   2   3   4   5   6   7   8   9  10 
  2   4   6   8  10  12  14  16  18  20 
  3   6   9  12  15  18  21  24  27  30 
  4   8  12  16  20  24  28  32  36  40 
  5  10  15  20  25  30  35  40  45  50 
  6  12  18  24  30  36  42
</pre>

<pre>
module loops;
import std::io;
&nbsp;
fn void <strong>main</strong>()
{
    int y = 1;
    while END: (y&lt;=10) {
        int x = 1;
        while (x&lt;=10) {
            int z = x * y;
            io::printf("%3d ", z);
            if (z == 42) {
                break END;
            }
            x++;
        }
        io::printn();
        y++;
    }
}
</pre>

<pre>
  1   2   3   4   5   6   7   8   9  10 
  2   4   6   8  10  12  14  16  18  20 
  3   6   9  12  15  18  21  24  27  30 
  4   8  12  16  20  24  28  32  36  40 
  5  10  15  20  25  30  35  40  45  50 
  6  12  18  24  30  36  42
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady vytvořené pro nejnovější verzi programovacího jazyka
C3 byly uloženy do repositáře dostupného na adrese <a
href="https://github.com/tisnik/c3-examples">https://github.com/tisnik/c3-examples</a>.
Následují odkazy na jednotlivé příklady (či jejich nedokončené části).</p>

<p>Demonstrační příklady <a
href="https://www.root.cz/clanky/programovaci-jazyk-c3-evoluce-nikoli-revoluce/">z&nbsp;prvního
článku o jazyku C3</a>:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>factorial.c3</td><td>realizace výpočtu faktoriálu</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/introduction/factorial.c3">https://github.com/tisnik/c3-examples/blob/master/introduction/factorial.c3</a></td></tr>
<tr><td> 2</td><td>factorial_macro.c3</td><td>výpočet faktoriálu konkrétní hodnoty implementovaný formou makra</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/introduction/factorial_macro.c3">https://github.com/tisnik/c3-examples/blob/master/introduction/factorial_macro.c3</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>swap_macro.c3</td><td>makro realizující prohození dvou hodnot</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/introduction/swap_macro.c3">https://github.com/tisnik/c3-examples/blob/master/introduction/swap_macro.c3</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 4</td><td>renderer.c</td><td>výpočet a vykreslení Juliovy množiny implementovaný v&nbsp;jazyku C</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/introduction/renderer.c">https://github.com/tisnik/c3-examples/blob/master/introduction/renderer.c</a></td></tr>
<tr><td> 5</td><td>renderer_v1.c3</td><td>definice datové struktury s&nbsp;rozměry rastrového obrázku a skeleton všech funkcí</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v1.c3">https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v1.c3</a></td></tr>
<tr><td> 6</td><td>renderer_v2.c3</td><td>anotace parametrů funkcí typu ukazatel (<i>pointer</i>)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v2.c3">https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v2.c3</a></td></tr>
<tr><td> 7</td><td>renderer_v3.c3</td><td>statická kontrola, zda se nepředávají neinicializované ukazatele</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v3.c3">https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v3.c3</a></td></tr>
<tr><td> 8</td><td>renderer_v4.c3</td><td>runtime kontrola, zda se nepředávají neinicializované ukazatele</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v4.c3">https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v4.c3</a></td></tr>
<tr><td> 9</td><td>renderer_v5.c3</td><td>první (nekorektní) varianta funkce pro inicializaci barvové palety</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v5.c3">https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v5.c3</a></td></tr>
<tr><td>10</td><td>renderer_v6.c3</td><td>druhá (korektní) varianta funkce pro inicializaci barvové palety</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v6.c3">https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v6.c3</a></td></tr>
<tr><td>11</td><td>renderer_v7.c3</td><td>volání knihovní I/O funkce a volání nativní céčkovské funkce</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v7.c3">https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v7.c3</a></td></tr>
<tr><td>12</td><td>renderer_v8.c3</td><td>plně funkční program pro výpočet a vykreslení Juliovy množiny</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v8.c3">https://github.com/tisnik/c3-examples/blob/master/introduction/renderer_v8.c3</a></td></tr>
</table>

<p>Demonstrační příklady <a
href="https://www.root.cz/clanky/programovaci-jazyk-c3-datove-typy-pro-moderni-architektury/">ze
druhého článku o jazyku C3</a>:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>13</td><td>01_just_main.c3</td><td>struktura nejjednoduššího programu obsahujícího pouze prázdnou funkci <strong>main</strong></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/01_just_main.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/01_just_main.c3</a></td></tr>
<tr><td>14</td><td>02_module_name.c3</td><td>struktura programu s&nbsp;uvedeným plným jménem modulu</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/02_module_name.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/02_module_name.c3</a></td></tr>
<tr><td>15</td><td>03_hello_world.c3</td><td>klasický program typu &bdquo;Hello, world!&ldquo; napsaný v&nbsp;jazyku C3</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/03_hello_world.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/03_hello_world.c3</a></td></tr>
<tr><td>16</td><td>04_exit_value.c3</td><td>ukončení procesu s&nbsp;předáním návratového kódu zpět volajícímu programu</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/04_exit_value.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/04_exit_value.c3</a></td></tr>
<tr><td>17</td><td>05_c_function.c3</td><td>zavolání funkce definované v&nbsp;knihovně programovacího jazyka C</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/05_c_function.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/05_c_function.c3</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>06_bool_type.c3</td><td>definice proměnných typu <i>pravdivostní hodnota</i> (<strong>bool</strong>)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/06_bool_type.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/06_bool_type.c3</a></td></tr>
<tr><td>19</td><td>07_int_to_bool.c3</td><td>implicitní převod hodnoty typu <strong>int</strong> na pravdivostní hodnotu (nekorektní řešení)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/07_int_to_bool.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/07_int_to_bool.c3</a></td></tr>
<tr><td>20</td><td>08_int_to_bool.c3</td><td>explicitní převod hodnoty typu <strong>int</strong> na pravdivostní hodnotu (korektní řešení)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/08_int_to_bool.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/08_int_to_bool.c3</a></td></tr>
<tr><td>21</td><td>09_int_to_bool.c3</td><td>explicitní převod hodnoty typu <strong>int</strong> na pravdivostní hodnotu (nekorektní řešení)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/09_int_to_bool.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/09_int_to_bool.c3</a></td></tr>
<tr><td>22</td><td>10_bool_sizeof.c3</td><td>zjištění velikosti paměti obsazené hodnotou typu <strong>bool</strong></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/10_bool_sizeof.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/10_bool_sizeof.c3</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>11_int_types.c3</td><td>definice proměnných typu <i>celé číslo se znaménkem</i> s&nbsp;různou bitovou šířkou</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/11_int_types.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/11_int_types.c3</a></td></tr>
<tr><td>24</td><td>12_uint_types.c3</td><td>definice proměnných typu <i>celé číslo bez znaménka</i> s&nbsp;různou bitovou šířkou</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/12_uint_types.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/12_uint_types.c3</a></td></tr>
<tr><td>25</td><td>13_no_suffixes.c3</td><td>celočíselné konstanty bez uvedení suffixu (bitové šířky)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/13_no_suffixes.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/13_no_suffixes.c3</a></td></tr>
<tr><td>26</td><td>14_suffixes.c3</td><td>celočíselné konstanty s&nbsp;uvedením sufficu (bitové šířky)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/14_suffixes.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/14_suffixes.c3</a></td></tr>
<tr><td>27</td><td>15_int_sizeof.c3</td><td>zjištění velikosti paměti obsazené celočíselnými hodnotami se znaménkem</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/15_int_sizeof.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/15_int_sizeof.c3</a></td></tr>
<tr><td>28</td><td>16_uint_sizeof.c3</td><td>zjištění velikosti paměti obsazené celočíselnými hodnotami bez znaménka</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/16_uint_sizeof.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/16_uint_sizeof.c3</a></td></tr>
<tr><td>29</td><td>17_int_conversions.c3</td><td>korektní převody mezi celočíselnými hodnotami s&nbsp;různou bitovou šířkou</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/17_int_conversions.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/17_int_conversions.c3</a></td></tr>
<tr><td>30</td><td>18_int_conversions.c3</td><td>nekorektní převody mezi celočíselnými hodnotami s&nbsp;různou bitovou šířkou</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/18_int_conversions.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/18_int_conversions.c3</a></td></tr>
<tr><td>31</td><td>19_int_conversions.c3</td><td>explicitní převody a přetečení hodnot</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/19_int_conversions.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/19_int_conversions.c3</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>32</td><td>20_float_types.c3</td><td>definice proměnných typu <i>numerická hodnota s&nbsp;plovoucí řádovou čárkou (tečkou)</i></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/20_float_types.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/20_float_types.c3</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>21_vector_type.c3</td><td>definice vektoru obsahujícího celočíselné hodnoty</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/21_vector_type.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/21_vector_type.c3</a></td></tr>
<tr><td>34</td><td>22_vector_operations.c3</td><td>základní operace s&nbsp;celými vektory</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/22_vector_operations.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/22_vector_operations.c3</a></td></tr>
<tr><td>35</td><td>23_vector_sizes.c3</td><td>zjištění a tisk velikosti vektorů (různé datové typy prvků vektorů, shodná délka)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/23_vector_sizes.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/23_vector_sizes.c3</a></td></tr>
<tr><td>36</td><td>24_vector_sizes.c3</td><td>zjištění a tisk velikosti vektorů (stejné datové typy prvků vektorů, odlišná délka)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-basics/24_vector_sizes.c3">https://github.com/tisnik/c3-examples/blob/master/c3-basics/24_vector_sizes.c3</a></td></tr>
</table>

<p>Demonstrační příklady z&nbsp;předchozího článku o jazyku C3:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>37</td><td>01_vector_type.c3</td><td>definice vektoru, modifikace prvků vektoru, tisk obsahu celého vektoru</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/01_vector_type.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/01_vector_type.c3</a></td></tr>
<tr><td>38</td><td>02_vector_parameter.c3</td><td>předání vektoru do funkce hodnotou</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/02_vector_parameter.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/02_vector_parameter.c3</a></td></tr>
<tr><td>39</td><td>03_vector_pointer.c3</td><td>předání vektoru do funkce odkazem (přes ukazatel)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/03_vector_pointer.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/03_vector_pointer.c3</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>40</td><td>04_array_type.c3</td><td>definice pole, modifikace prvků pole, tisk obsahu celého pole</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/04_array_type.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/04_array_type.c3</a></td></tr>
<tr><td>41</td><td>05_array_parameter.c3</td><td>předání pole do funkce hodnotou</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/05_array_parameter.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/05_array_parameter.c3</a></td></tr>
<tr><td>42</td><td>06_array_pointer.c3</td><td>předání pole do funkce odkazem (přes ukazatel)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/06_array_pointer.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/06_array_pointer.c3</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>07_slice_type.c3</td><td>vytvoření (konstrukce) řezu (<i>slice</i>)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/07_slice_type.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/07_slice_type.c3</a></td></tr>
<tr><td>44</td><td>08_slice_parameter.c3</td><td>předání řezu do funkce</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/08_slice_parameter.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/08_slice_parameter.c3</a></td></tr>
<tr><td>45</td><td>09_slice_slicing.c3</td><td>konstrukce řezu z&nbsp;pole stejně pojmenovanou operací (řez od..do)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/09_slice_slicing.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/09_slice_slicing.c3</a></td></tr>
<tr><td>46</td><td>10_slice_slicing.c3</td><td>konstrukce řezu z&nbsp;pole stejně pojmenovanou operací (záporné indexy)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/10_slice_slicing.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/10_slice_slicing.c3</a></td></tr>
<tr><td>47</td><td>11_slice_slicing.c3</td><td>konstrukce řezu z&nbsp;pole stejně pojmenovanou operací (určení délky řezu)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/11_slice_slicing.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/11_slice_slicing.c3</a></td></tr>
<tr><td>48</td><td>12_slice_of_slice.c3</td><td>konstrukce řezu z&nbsp;jiného řezu</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/12_slice_of_slice.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/12_slice_of_slice.c3</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>49</td><td>13_list_type.c3</td><td>vytvoření (konstrukce) seznamu</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/13_list_type.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/13_list_type.c3</a></td></tr>
<tr><td>50</td><td>14_list_parameter.c3</td><td>předání seznamu do funkce</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/14_list_parameter.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/14_list_parameter.c3</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>51</td><td>15_dynamic_array.c3</td><td>vytvoření (konstrukce) dynamicky alokovaného pole</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/15_dynamic_array.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/15_dynamic_array.c3</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>52</td><td>16_string_type.c3</td><td>základní typ řetězce <strong>string</strong></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/16_string_type.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/16_string_type.c3</a></td></tr>
<tr><td>53</td><td>17_string_unicode.c3</td><td>Unicode znaky v&nbsp;řetězci typu <strong>string</strong></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/17_string_unicode.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/17_string_unicode.c3</a></td></tr>
<tr><td>54</td><td>18_zstring_type.c3</td><td>řetězce ukončené nulou (C-string, ASCIIZ)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/18_zstring_type.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/18_zstring_type.c3</a></td></tr>
<tr><td>55</td><td>19_zstring_unicode.c3</td><td>Unicode znaky v&nbsp;řetězci typu <strong>zstring</strong></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/19_zstring_unicode.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/19_zstring_unicode.c3</a></td></tr>
<tr><td>56</td><td>20_string_comparison.c3</td><td>porovnávání obsahu řetězců</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-containers/20_string_comparison.c3">https://github.com/tisnik/c3-examples/blob/master/c3-containers/20_string_comparison.c3</a></td></tr>
</table>

<p>Demonstrační příklady z&nbsp;dnešního článku o jazyku C3:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>57</td><td>01_program_stub.c3</td><td>struktura programu s&nbsp;uvedeným plným jménem modulu</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/01_program_stub.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/01_program_stub.c3</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>58</td><td>02_if.c3</td><td>nejjednodušší forma rozvětvení založené na konstrukci <strong>if</strong></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/02_if.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/02_if.c3</a></td></tr>
<tr><td>59</td><td>03_if_else.c3</td><td>plné rozvětvení realizované konstrukcí <strong>if-else</strong></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/03_if_else.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/03_if_else.c3</a></td></tr>
<tr><td>60</td><td>04_improper_if.c3</td><td>nekorektní způsob zápisu konstrukce <strong>if-else</strong> (porovnání s&nbsp;jazykem C)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/04_improper_if.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/04_improper_if.c3</a></td></tr>
<tr><td>61</td><td>05_improper_if.c3</td><td>nekorektní způsob zápisu konstrukce <strong>if-else</strong> (porovnání s&nbsp;jazykem C)</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/05_improper_if.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/05_improper_if.c3</a></td></tr>
<tr><td>62</td><td>06_if_else_if.c3</td><td>složitější rozvětvení založené na konstrukci <strong>if-else if-else</strong></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/06_if_else_if.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/06_if_else_if.c3</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>63</td><td>07_switch_basic.c3</td><td>základní forma rozvětvení založeného na konstrukci <strong>switch-case</strong></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/07_switch_basic.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/07_switch_basic.c3</a></td></tr>
<tr><td>64</td><td>08_switch_basic.c3</td><td>větší množství podmínek a konstrukce <strong>switch-case</strong></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/08_switch_basic.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/08_switch_basic.c3</a></td></tr>
<tr><td>65</td><td>09_switch_condition.c3</td><td>podmínky v&nbsp;konstrukci <strong>switch-case</strong> vyhodnocované v&nbsp;čase běhu procesu</td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/09_switch_condition.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/09_switch_condition.c3</a></td></tr>
<tr><td>66</td><td>10_switch_true.c3     </td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/10_switch_true.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/10_switch_true.c3</a></td></tr>
<tr><td>67</td><td>11_switch_break.c3    </td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/11_switch_break.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/11_switch_break.c3</a></td></tr>
<tr><td>68</td><td>12_switch_nextcase.c3 </td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/12_switch_nextcase.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/12_switch_nextcase.c3</a></td></tr>
<tr><td>69</td><td>13_for_loop.c3        </td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/13_for_loop.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/13_for_loop.c3</a></td></tr>
<tr><td>70</td><td>14_foreach_loop.c3    </td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/14_foreach_loop.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/14_foreach_loop.c3</a></td></tr>
<tr><td>71</td><td>15_foreach_loop.c3    </td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/15_foreach_loop.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/15_foreach_loop.c3</a></td></tr>
<tr><td>72</td><td>16_foreach_loop.c3    </td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/16_foreach_loop.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/16_foreach_loop.c3</a></td></tr>
<tr><td>73</td><td>17_foreach_loop.c3    </td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/17_foreach_loop.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/17_foreach_loop.c3</a></td></tr>
<tr><td>74</td><td>18_foreach_loop.c3    </td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/18_foreach_loop.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/18_foreach_loop.c3</a></td></tr>
<tr><td>75</td><td>19_foreach_r_loop.c3  </td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/19_foreach_r_loop.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/19_foreach_r_loop.c3</a></td></tr>
<tr><td>76</td><td>20_while_loop.c3      </td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/20_while_loop.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/20_while_loop.c3</a></td></tr>
<tr><td>77</td><td>21_while_loop_2.c3</td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/21_while_loop_2.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/21_while_loop_2.c3</a></td></tr>
<tr><td>78</td><td>22_nested_loops.c3</td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/22_nested_loops.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/22_nested_loops.c3</a></td></tr>
<tr><td>79</td><td>23_break.c3       </td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/23_break.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/23_break.c3</a></td></tr>
<tr><td>80</td><td>24_break.c3       </td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/24_break.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/24_break.c3</a></td></tr>
<tr><td>81</td><td>25_break.c3       </td><td></td><td><a href="https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/25_break.c3">https://github.com/tisnik/c3-examples/blob/master/c3-control-flow/25_break.c3</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Programovací jazyk C3: evoluce, nikoli revoluce<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-c3-evoluce-nikoli-revoluce/">https://www.root.cz/clanky/programovaci-jazyk-c3-evoluce-nikoli-revoluce/</a>
</li>

<li>Programovací jazyk C3: datové typy pro moderní architektury<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-c3-datove-typy-pro-moderni-architektury/">https://www.root.cz/clanky/programovaci-jazyk-c3-datove-typy-pro-moderni-architektury/</a>
</li>

<li>Programovací jazyk C3: složené datové typy a kontejnery<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-c3-slozene-datove-typy-a-kontejnery/">https://www.root.cz/clanky/programovaci-jazyk-c3-slozene-datove-typy-a-kontejnery/</a>
</li>

<li>The C3 Programming Language<br />
<a href="https://c3-lang.org/">https://c3-lang.org/</a>
</li>

<li>C3 For C Programmers<br />
<a href="https://c3-lang.org/language-overview/primer/">https://c3-lang.org/language-overview/primer/</a>
</li>

<li>C3 is a C-like language trying to be an incremental improvement over C rather than a whole new language<br />
<a href="https://www.reddit.com/r/ProgrammingLanguages/comments/oohij6/c3_is_a_clike_language_trying_to_be_an/">https://www.reddit.com/r/ProgrammingLanguages/comments/oohij6/c3_is_a_clike_language_trying_to_be_an/</a>
</li>

<li>Tiobe index<br />
<a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a>
</li>

<li>PYPL PopularitY of Programming Language<br />
<a href="https://pypl.github.io/PYPL.html">https://pypl.github.io/PYPL.html</a>
</li>

<li>C3 Tutorial<br />
<a href="https://learn-c3.org/">https://learn-c3.org/</a>
</li>

<li>History of programming languages<br />
<a href="https://devskiller.com/history-of-programming-languages/">https://devskiller.com/history-of-programming-languages/</a>
</li>

<li>History of programming languages (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/History_of_programming_languages">https://en.wikipedia.org/wiki/History_of_programming_languages</a>
</li>

<li>D language<br />
<a href="https://dlang.org/">https://dlang.org/</a>
</li>

<li>Zig programming language<br />
<a href="https://ziglang.org/">https://ziglang.org/</a>
</li>

<li>V language<br />
<a href="https://vlang.io/">https://vlang.io/</a>
</li>

<li>D programming language<br />
<a href="https://en.wikipedia.org/wiki/D_(programming_language)">https://en.wikipedia.org/wiki/D_(programming_language)</a>
</li>

<li>Zig programming language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Zig_(programming_language)">https://en.wikipedia.org/wiki/Zig_(programming_language)</a>
</li>

<li>V programming language (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/V_(programming_language)">https://en.wikipedia.org/wiki/V_(programming_language)</a>
</li>

<li>Syntax highlighting for C3's programming language<br />
<a href="https://github.com/Airbus5717/c3.vim">https://github.com/Airbus5717/c3.vim</a>
</li>

<li>Go factorial<br />
<a href="https://gist.github.com/esimov/9622710">https://gist.github.com/esimov/9622710</a>
</li>

<li>Generational list of programming languages<br />
<a href="https://en.wikipedia.org/wiki/Generational_list_of_programming_languages">https://en.wikipedia.org/wiki/Generational_list_of_programming_languages</a>
</li>

<li>The Language Tree: Almost Every Programming Language Ever Made<br />
<a href="https://github.com/Phileosopher/langmap">https://github.com/Phileosopher/langmap</a>
</li>

<li>List of C-family programming languages<br />
<a href="https://en.wikipedia.org/wiki/List_of_C-family_programming_languages">https://en.wikipedia.org/wiki/List_of_C-family_programming_languages</a>
</li>

<li>Compatibility of C and C++<br />
<a href="https://en.wikipedia.org/wiki/Compatibility_of_C_and_C%2B%2B">https://en.wikipedia.org/wiki/Compatibility_of_C_and_C%2B%2B</a>
</li>

<li>C++23: compatibility with C<br />
<a href="https://www.sandordargo.com/blog/2023/08/23/cpp23-c-compatibility">https://www.sandordargo.com/blog/2023/08/23/cpp23-c-compatibility</a>
</li>

<li>Can C++ Run C Code? Understanding Language Compatibility<br />
<a href="https://www.codewithc.com/can-c-run-c-code-understanding-language-compatibility/">https://www.codewithc.com/can-c-run-c-code-understanding-language-compatibility/</a>
</li>

<li>C3: Comparisons With Other Languages<br />
<a href="https://c3-lang.org/faq/compare-languages/">https://c3-lang.org/faq/compare-languages/</a>
</li>

<li>C3 Programming Language Gains Traction as Modern C Alternative<br />
<a href="https://biggo.com/news/202504040125_C3_Programming_Language_Alternative_to_C">https://biggo.com/news/202504040125_C3_Programming_Language_Alternative_to_C</a>
</li>

<li>The case against a C alternative<br />
<a href="https://c3.handmade.network/blog/p/8486-the_case_against_a_c_alternative">https://c3.handmade.network/blog/p/8486-the_case_against_a_c_alternative</a>
</li>

<li>C (programming language) Alternatives<br />
<a href="https://alternativeto.net/software/c-programming-language-/">https://alternativeto.net/software/c-programming-language-/</a>
</li>

<li>Seriál Programovací jazyk Go<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-go/">https://www.root.cz/serialy/programovaci-jazyk-go/</a>
</li>

<li>Is C3 the Underdog That Will Overtake Zig and Odin?<br />
<a href="https://bitshifters.cc/2025/05/22/c3-c-tradition.html">https://bitshifters.cc/2025/05/22/c3-c-tradition.html</a>
</li>

<li>"Hello, World!" program<br />
<a href="https://en.wikipedia.org/wiki/%22Hello%2C_World!%22_program">https://en.wikipedia.org/wiki/%22Hello%2C_World!%22_program</a>
</li>

<li>The C Programming Language<br />
<a href="https://en.wikipedia.org/wiki/The_C_Programming_Language">https://en.wikipedia.org/wiki/The_C_Programming_Language</a>
</li>

<li>Kontejner (abstraktní datový typ)<br />
<a href="https://cs.wikipedia.org/wiki/Kontejner_(abstraktn%C3%AD_datov%C3%BD_typ)">https://cs.wikipedia.org/wiki/Kontejner_(abstraktn%C3%AD_datov%C3%BD_typ)</a>
</li>

<li>Are arrays not considered containers because they are not based off of a class?<br />
<a href="https://stackoverflow.com/questions/37710975/are-arrays-not-considered-containers-because-they-are-not-based-off-of-a-class">https://stackoverflow.com/questions/37710975/are-arrays-not-considered-containers-because-they-are-not-based-off-of-a-class</a>
</li>

<li>Array declaration (C, C++)<br />
<a href="https://en.cppreference.com/w/cpp/language/array.html">https://en.cppreference.com/w/cpp/language/array.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

