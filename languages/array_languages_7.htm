<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Jazyk APL, kombinátory a point-free style</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V pořadí již jedenáctém článku věnovaném programovacím jazykům z oblasti &bdquo;array programmingu&ldquo; se ještě jednou vrátíme ke slavnému jazyku APL. Ukážeme si totiž, jak se v nových verzích APL (Dyalog APL atd.) používá programovací technika nazývaná point-free style nebo též tacit programming.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Programovací jazyk APL, kombinátory a point-free style</a></p>
<p><a href="#k02">*** 2. Od výrazů s&nbsp;explicitně zapsanými proměnnými k&nbsp;point-free stylu</a></p>
<p><a href="#k03">*** 3. S-kombinátor a &bdquo;vláčky&ldquo; v&nbsp;APL</a></p>
<p><a href="#k04">*** 4. Výpočet matice s&nbsp;malou násobilkou</a></p>
<p><a href="#k05">*** 5. Symbol ⊢ v&nbsp;APL a S-kombinátor</a></p>
<p><a href="#k06">*** 6. Výpočet průměrné hodnoty prvků vektoru</a></p>
<p><a href="#k07">*** 7. Vláček se dvěma vagony</a></p>
<p><a href="#k08">*** 8. Vláček se čtyřmi vagony</a></p>
<p><a href="#k09">*** 9. Vláček s&nbsp;pěti vagony</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Předchozí články o rozsáhlém světu &bdquo;array programmingu&ldquo;</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyk APL, kombinátory a point-free style</h2>

<p>V&nbsp;pořadí již jedenáctém článku věnovaném programovacím jazykům z oblasti &bdquo;array programmingu&ldquo; (viz též odkazy uvedené <a href="#k19">v&nbsp;devatenácté kapitole</a>) se ještě jednou vrátíme ke slavnému programovacímu jazyku APL. Ukážeme si totiž, jak se v&nbsp;nových verzích APL (Dyalog APL atd.) používá programovací technika nazývaná <i>point-free style</i> nebo též <i>tacit programming</i>, s&nbsp;jejímiž základy jsme se již seznámili v&nbsp;článku <a href=""></a>.</p>

<p>Přesný a přitom dostatečně jednoznačný český ekvivalent tohoto označení mě nenapadá, proto raději zůstanu u termínu anglického, který se ostatně snadněji vyhledává. Co se ovšem pod názvy <i>tacit programming</i> nebo <i>point-free style</i> skrývá? Jedná se o styl zápisu bloků programů (typicky jednotlivých výrazů, ale i uživatelských funkcí popř.&nbsp;sekvencí funkcí, někdy o zápis dekorátorů), ve kterých se nachází volání jiných funkcí, ovšem bez explicitního udání jmen jejich argumentů (parametrů). A nejenom to &ndash; většinou není naznačen ani počet argumentů. Proč by se však <i>tacit programming</i> měl používat, resp.&nbsp;jaká je jeho přednost? Základní idea spočívá v&nbsp;tom, že se seskupením funkcí popř.&nbsp;operátorů vytvoří abstraktnější funkce nebo operátor, takže je možné v&nbsp;programovacím jazyce vybaveném relativně základními operacemi vytvářet vyšší úrovně abstrakce podle potřeb programátora, a to za použití snadno pochopitelných a testovatelných prostředků a idiomů.</p>

<p><div class="rs-tip-major">Poznámka: poměrně často používám v&nbsp;článcích pojem &bdquo;idiom&ldquo; pro ustálenou strukturu/notaci v&nbsp;daném obvyklou programovacím jazyce. Důsledné používání idiomů vede ke kódu, který je srozumitelný i pro další programátory. A nejenom to &ndash; v&nbsp;takovém kódu se obecně nachází menší množství logických chyb. Naopak <i>ne</i>použití idiomu programátory zbytečně zmate.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Od výrazů s&nbsp;explicitně zapsanými proměnnými k&nbsp;point-free stylu</h2>

<p></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. S-kombinátor a &bdquo;vláčky&ldquo; v&nbsp;APL</h2>

<p></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výpočet matice s&nbsp;malou násobilkou</h2>

<p>Abychom si vysvětlili, jak lze v&nbsp;S-kombinátoru využít jak <i>dyadické funkce</i> (s&nbsp;levým i pravým operandem/parametrem), tak i funkce <i>monadické</i> (pouze s&nbsp;pravým operandem), zaměříme se na relativně jednoduchý příklad &ndash; na výpočet a tisk matice s&nbsp;malou násobilkou. Budeme tedy chtít, aby se v&nbsp;matici objevily všechny možné kombinace vstupních hodnot od 1 do 10.</p>

<pre>
<strong>(⍳10) ∘.× (⍳10)</strong>
</pre>

<p></p>

<pre>
 1  2  3  4  5  6  7  8  9  10
 2  4  6  8 10 12 14 16 18  20
 3  6  9 12 15 18 21 24 27  30
 4  8 12 16 20 24 28 32 36  40
 5 10 15 20 25 30 35 40 45  50
 6 12 18 24 30 36 42 48 54  60
 7 14 21 28 35 42 49 56 63  70
 8 16 24 32 40 48 56 64 72  80
 9 18 27 36 45 54 63 72 81  90
10 20 30 40 50 60 70 80 90 100
</pre>

<pre>
<strong>(⍳ ∘.× ⍳)</strong>
</pre>

<pre>
┌─┼─┐
⍳ . ⍳
 ┌┴┐ 
 ∘ × 
</pre>

<pre>
<strong>(⍳ ∘.× ⍳)10</strong>
</pre>

<pre>
 1  2  3  4  5  6  7  8  9  10
 2  4  6  8 10 12 14 16 18  20
 3  6  9 12 15 18 21 24 27  30
 4  8 12 16 20 24 28 32 36  40
 5 10 15 20 25 30 35 40 45  50
 6 12 18 24 30 36 42 48 54  60
 7 14 21 28 35 42 49 56 63  70
 8 16 24 32 40 48 56 64 72  80
 9 18 27 36 45 54 63 72 81  90
10 20 30 40 50 60 70 80 90 100
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Symbol ⊢ v&nbsp;APL a S-kombinátor</h2>

<p></p>

<pre>
(⊢--)
</pre>

      (⊢*inc)
┌─┼─┐    
⊢ * {1+⍵}
      (⊢*inc)10
1E11
      (⊢×inc)10
110
      (⊢×inc)1
2
      (⊢×inc)2
6

      (⊢×inc(⊢×inc))2
7
      (⊢×inc(⊢×inc))
┌─┴─┐              
⊢ ┌─┼───────┐      
  × {1+⍵} ┌─┼─┐    
          ⊢ × {1+⍵}



<p><a name="k06"></a></p>
<h2 id="k06">6. Výpočet průměrné hodnoty prvků vektoru</h2>

<p></p>

<pre>
      <strong>Avg←{(+⌿⍵)÷≢⍵}</strong>
      <strong>Avg 1 2 3 4 5</strong>
&nbsp;
3
</pre>

<pre>
      <strong>(+⌿)÷≢</strong>
&nbsp;
  ┌─┼─┐
  ⌿ ÷ ≢
┌─┘    
+      
</pre>

<pre>
      <strong>Avg←(+⌿)÷≢</strong>
      <strong>Avg 1 2 3 4 5</strong>
3
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vláček se dvěma vagony</h2>

<p></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Vláček se čtyřmi vagony</h2>

<p></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vláček s&nbsp;pěti vagony</h2>

<p></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Předchozí články o rozsáhlém světu &bdquo;array programmingu&ldquo;</h2>

<p>Programovacími jazyky, které jsou z&nbsp;větší či menší míry odvozeny od
APL, jsme se již na stránkách Roota zabývali v&nbsp;několika článcích (a
samozřejmě i v&nbsp;dnešním článku). Odkazy na tyto články naleznete pod
odstavcem:</p>

<ol>

<li>Jazyky umožňující operace s&nbsp;poli aneb rozsáhlý svět &bdquo;array programmingu&ldquo;<br />
<a href="https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/">https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/</a>
</li>

<li>Specializované jazyky pro práci s&nbsp;N-dimenzionálními poli: jazyk J<br />
<a href="https://www.root.cz/clanky/specializovane-jazyky-pro-praci-s-n-dimenzionalnimi-poli-jazyk-j/">https://www.root.cz/clanky/specializovane-jazyky-pro-praci-s-n-dimenzionalnimi-poli-jazyk-j/</a>
</li>

<li>Programovací jazyky odvozené od APL: BQN a ivy aneb 1~×`1↓↕10<br />
<a href="https://www.root.cz/clanky/programovaci-jazyky-odvozene-od-apl-bqn-a-ivy-aneb-1-1-10/">https://www.root.cz/clanky/programovaci-jazyky-odvozene-od-apl-bqn-a-ivy-aneb-1-1-10/</a>
</li>

<li>Programovací jazyk K: důkaz, že mezi námi žijí mimozemšťané<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane/">https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane/</a>
</li>

<li>Programovací jazyk K: důkaz, že mezi námi žijí mimozemšťané (dokončení)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane-dokonceni/">https://www.root.cz/clanky/programovaci-jazyk-k-dukaz-ze-mezi-nami-ziji-mimozemstane-dokonceni/</a>
</li>

<li>Nial Array Language: další z jazyků inspirovaných APL<br />
<a href="https://www.root.cz/clanky/nial-array-language-dalsi-z-jazyku-inspirovanych-apl/">https://www.root.cz/clanky/nial-array-language-dalsi-z-jazyku-inspirovanych-apl/</a>
</li>

<li>Programování mainframů: jazyk APL<br />
<a href="https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/">https://www.root.cz/clanky/programovani-mainframu-jazyk-apl/</a>
</li>

<li>Programovací jazyk APL: programování bez smyček<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-apl-programovani-bez-smycek/">https://www.root.cz/clanky/programovaci-jazyk-apl-programovani-bez-smycek/</a>
</li>

<li>Programovací jazyk APL - dokončení<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-apl-dokonceni/">https://www.root.cz/clanky/programovaci-jazyk-apl-dokonceni/</a>
</li>

<li>Oslava 55 let od vzniku první implementace jazyka APL<br />
<a href="https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/">https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Tacit programming (APL Wiki)<br />
<a href="https://aplwiki.com/wiki/Tacit_programming">https://aplwiki.com/wiki/Tacit_programming</a>
</li>

<li>Function trains<br />
<a href="https://mlochbaum.github.io/BQN/doc/train.html">https://mlochbaum.github.io/BQN/doc/train.html</a>
</li>

<li>Tacit programming (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tacit_programming">https://en.wikipedia.org/wiki/Tacit_programming</a>
</li>

<li>Beyond Functional Programming: Manipulate Functions with the J Language<br />
<a href="https://www.adamtornhill.com/articles/jlang/beyondfunctional.html">https://www.adamtornhill.com/articles/jlang/beyondfunctional.html</a>
</li>

<li>Real World Uses of Tacit Programming: Part 1 of 2<br />
<a href="https://medium.com/@jesterxl/real-world-uses-of-tacit-programming-part-1-of-2-f2a0c3f9e00c">https://medium.com/@jesterxl/real-world-uses-of-tacit-programming-part-1-of-2-f2a0c3f9e00c</a>
</li>

<li>Programovací jazyk Forth a zásobníkové procesory<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory/">http://www.root.cz/clanky/programovaci-jazyk-forth-a-zasobnikove-procesory/</a>
</li>

<li>Seriál Programovací jazyk Forth<br />
<a href="http://www.root.cz/serialy/programovaci-jazyk-forth/">http://www.root.cz/serialy/programovaci-jazyk-forth/</a>
</li>

<li>Programovací jazyk Factor<br />
<a href="http://www.root.cz/clanky/programovaci-jazyk-factor/">http://www.root.cz/clanky/programovaci-jazyk-factor/</a>
</li>

<li>Grafický metaformát PostScript<br />
<a href="http://www.root.cz/clanky/graficky-metaformat-postscript/">http://www.root.cz/clanky/graficky-metaformat-postscript/</a>
</li>

<li>Factor: revoluce v&nbsp;programování nebo propadák?<br />
<a href="https://www.root.cz/clanky/factor-revoluce-v-programovani-nebo-propadak/">https://www.root.cz/clanky/factor-revoluce-v-programovani-nebo-propadak/</a>
</li>

<li>Integrované vývojové prostředí Factoru<br />
<a href="https://www.root.cz/clanky/integrovane-vyvojove-prostredi-factoru/">https://www.root.cz/clanky/integrovane-vyvojove-prostredi-factoru/</a>
</li>

<li>Programujeme ve Factoru<br />
<a href="https://www.root.cz/clanky/programujeme-ve-factoru/">https://www.root.cz/clanky/programujeme-ve-factoru/</a>
</li>

<li>Joy: radost z&nbsp;programování<br />
<a href="https://www.root.cz/clanky/joy-radost-z-programovani/">https://www.root.cz/clanky/joy-radost-z-programovani/</a>
</li>

<li>Joy: programovací jazyk od protinožců<br />
<a href="https://www.root.cz/clanky/joy-programovaci-jazyk-od-protinozcu/">https://www.root.cz/clanky/joy-programovaci-jazyk-od-protinozcu/</a>
</li>

<li>Jazyk Joy a rekurzivní kombinátory<br />
<a href="https://www.root.cz/clanky/jazyk-joy-a-rekurzivni-kombinatory/">https://www.root.cz/clanky/jazyk-joy-a-rekurzivni-kombinatory/</a>
</li>

<li>Point-Free or Die: Tacit Programming in Haskell and Beyond<br />
<a href="https://www.thestrangeloop.com/2016/point-free-or-die-tacit-programming-in-haskell-and-beyond.html">https://www.thestrangeloop.com/2016/point-free-or-die-tacit-programming-in-haskell-and-beyond.html</a>
</li>

<li>Threading macro (dokumentace k&nbsp;jazyku Clojure)<br />
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;">https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-&gt;</a>
</li>

<li>Understanding the Clojure -&gt; macro<br />
<a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/</a>
</li>

<li>Transducers<br />
<a href="https://clojure.org/reference/transducers">https://clojure.org/reference/transducers</a>
</li>

<li>dc (computer program)<br />
<a href="https://en.wikipedia.org/wiki/Dc_%28computer_program%29">https://en.wikipedia.org/wiki/Dc_%28computer_program%29</a>
</li>

<li>dc (na Esolang)<br />
<a href="http://esolangs.org/wiki/Dc">http://esolangs.org/wiki/Dc</a>
</li>

<li>Relational pipes<br />
<a href="https://relational-pipes.globalcode.info/v_0/">https://relational-pipes.globalcode.info/v_0/</a>
</li>

<li>Roura (Unix)<br />
<a href="https://cs.wikipedia.org/wiki/Roura_(Unix)">https://cs.wikipedia.org/wiki/Roura_(Unix)</a>
</li>

<li>Roura (software)<br />
<a href="https://cs.wikipedia.org/wiki/Roura_(software)">https://cs.wikipedia.org/wiki/Roura_(software)</a>
</li>

<li>APL Wiki<br />
<a href="https://aplwiki.com/wiki/">https://aplwiki.com/wiki/</a>
</li>

<li>The Array Cast<br />
<a href="https://www.arraycast.com/episodes/episode-03-what-is-an-array">https://www.arraycast.com/episodes/episode-03-what-is-an-array</a>
</li>

<li>EnthusiastiCon 2019 – An Introduction to APL<br />
<a href="https://www.youtube.com/watch?v=UltnvW83_CQ">https://www.youtube.com/watch?v=UltnvW83_CQ</a>
</li>

<li>Dyalog<br />
<a href="https://www.dyalog.com/">https://www.dyalog.com/</a>
</li>

<li>Try APL!<br />
<a href="https://tryapl.org/">https://tryapl.org/</a>
</li>

<li>APL na replit<br />
<a href="https://replit.com/languages/apl">https://replit.com/languages/apl</a>
</li>

<li>Advent of Code 2020 in APL!<br />
<a href="https://www.youtube.com/watch?v=0RQFW6P1Tt0">https://www.youtube.com/watch?v=0RQFW6P1Tt0</a>
</li>

<li>Python vs APL (1 Problem)<br />
<a href="https://www.youtube.com/watch?v=APdKFJkmBbM">https://www.youtube.com/watch?v=APdKFJkmBbM</a>
</li>

<li>APL Wins (vs C++, Java &amp; Python)<br />
<a href="https://www.youtube.com/watch?v=59vAjBS3yZM">https://www.youtube.com/watch?v=59vAjBS3yZM</a>
</li>

<li>A Tour de Force of APL in 16 Expressions by Roger Hui<br />
<a href="https://www.youtube.com/watch?v=e0rywC7-i0U">https://www.youtube.com/watch?v=e0rywC7-i0U</a>
</li>

<li>Conway's Game Of Life in APL<br />
<a href="https://www.youtube.com/watch?v=a9xAKttWgP4">https://www.youtube.com/watch?v=a9xAKttWgP4</a>
</li>

<li>A List of companies that use Array Languages (J, K, APL, q)<br />
<a href="https://github.com/interregna/arraylanguage-companies">https://github.com/interregna/arraylanguage-companies</a>
</li>

<li>APL - one of the greatest programming languages ever<br />
<a href="http://www.vaxman.de/publications/apl_slides.pdf">http://www.vaxman.de/publications/apl_slides.pdf</a>
</li>

<li>"The J Programming Language" by Tracy Harms (2013)<br />
<a href="https://www.youtube.com/watch?v=RWYkx6-L04Q">https://www.youtube.com/watch?v=RWYkx6-L04Q</a>
</li>

<li>Dyalog Modern Programming Language, Morten Kromberg, Talks at Google<br />
<a href="https://www.youtube.com/watch?v=PlM9BXfu7UY">https://www.youtube.com/watch?v=PlM9BXfu7UY</a>
</li>

<li>The J Language: Consistency, Adjacency, and Solution-Oriented Programming - Tracy Harms<br />
<a href="https://www.youtube.com/watch?v=gLULrFY2-fI">https://www.youtube.com/watch?v=gLULrFY2-fI</a>
</li>

<li>Un-directed programming<br />
<a href="https://www.sacrideo.us/un-structured-programming/">https://www.sacrideo.us/un-structured-programming/</a>
</li>

<li>Concatenative programming language<br />
<a href="https://en.wikipedia.org/wiki/Concatenative_programming_language">https://en.wikipedia.org/wiki/Concatenative_programming_language</a>
</li>

<li>Repositáře s&nbsp;jazykem Joy<br />
<a href="https://github.com/joy-language">https://github.com/joy-language</a>
</li>

<li>J language: Chapter 8: Composing Verbs<br />
<a href="https://www.jsoftware.com/help/learning/08.htm">https://www.jsoftware.com/help/learning/08.htm</a>
</li>

<li>J language: Chapter 9: Trains of Verbs<br />
<a href="https://www.jsoftware.com/help/learning/09.htm">https://www.jsoftware.com/help/learning/09.htm</a>
</li>

<li>Combinatory logic<br />
<a href="https://en.wikipedia.org/wiki/Combinatory_logic">https://en.wikipedia.org/wiki/Combinatory_logic</a>
</li>

<li>Four Features of Modern APL<br />
<a href="https://www.youtube.com/watch?v=cBuqDHA-zEI">https://www.youtube.com/watch?v=cBuqDHA-zEI</a>
</li>

<li>How to read trains in Dyalog APL code<br />
<a href="https://www.youtube.com/watch?v=kt4lMZbn-so">https://www.youtube.com/watch?v=kt4lMZbn-so</a>
</li>

<li>Tacit programming<br />
<a href="https://xpqz.github.io/cultivations/Trains.html">https://xpqz.github.io/cultivations/Trains.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

