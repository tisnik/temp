<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory VIII</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Forth a zásobníkové procesory VIII</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h2>Úvodník</h2>

<p>Dnešní část seriálu o programovacím jazyku Forth bude věnována práci s
řetězci znaků. I když není manipulace s řetězci ve Forthu tak elegantní a
snadná jako v některých jiných programovacích jazycích, má Forth i v této
oblasti některé přednosti, zejména při skládání složitějších operací, nebo při
manipulaci s textovými záznamy o pevné délce.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Základy práce s řetězci</a><br />
<a href="#k02">2. Vytvoření a inicializace řetězce</a><br />
<a href="#k03">3. Výpis jednoho znaku</a><br />
<a href="#k04">4. Výpis celého řetězce</a><br />
<a href="#k05">5. Další slova určená pro manipulaci s řetězci</a><br />
<a href="#k06">6. Obsah dalšího pokračování</a><br />
</p>



<p><a name="k01" id="k01"></a></p>
<h2>1. Základy práce s řetězci</h2>

<p><em>From the standpoint of programming methodology, the advantage to the
Forth approach is that new words and new syntaxes can easily be added. Forth
cannot be said to be "looking" for words - it finds words and executes them. If
you add new words Forth will find and execute them as well. There's no
difference between existing words and words that you add.<br />
What's more, this "extensibility" applies to all types of words, not just
action-type functions. For instance, Forth allows you to add new compiling
words "like" IF and THEN that provide structured control flow. You can easily
add a case statement or a multiple-exit loop if you need them, or, just as
importantly, take them out if you don't need them.<br />
Leo Brodie, Thinking Forth
</em></p>

<p>Práce s řetězci znaků je ve Forthu poněkud těžkopádnější, než v jiných
programovacích jazycích, protože programátor musí ve své režii zajistit veškeré
alokace paměti, inicializace řetězců, kontrolu délky řetězců při jejich
naplňování i čtení apod. V tomto aspektu se Forth do jisté míry podobá C-čku,
které také žádnou výraznější podporu pro práci s řetězci neobsahuje (samozřejmě
kromě možnosti inicializace pole bytů konstantním řetězcem a používání
konstantních řetězců ve výrazech a příkazech). Pomocí vhodně naprogramovaných
slov je však možné s řetězci pracovat i ve Forthu poměrně rozumným a přehledným
způsobem.</p>

<p>Nejprve si řekněme, jakým způsobem jsou řetězce ve Forthu reprezentovány,
tj. jaký je jejich obraz v operační paměti počítače. Nejedná se o nic jiného,
než o pole znaků, kde je každý znak uložen na jednom byte. Vzhledem k tomu, že
u řetězce je při mnoha manipulacích zapotřebí znát i jeho délku, je první byte
v poli rezervován právě pro uložení délky řetězce. Z toho mimo jiné vyplývá, že
maximální počet znaků v řetězci je roven 255 (2<sup>8</sup>-1). Tento způsob
úschovy řetězce v operační paměti, který je mimo jiné použit i u standardního
programovacího jazyka Pascal, je nevýhodný především v nemožnosti úschovy
delších textů. Na druhou stranu je možné explicitní znalost délky řetězce
použít v různých smyčkách, které manipulují s jednotlivými znaky.</p>

<p>Je však samozřejmě možné vytvořit nová slova, pomocí kterých se z řetězci
pracuje podobně jako v C-čku, tj. jednalo by se o nulou ukončené řetězce (ve
starší literatuře označované také jako ASCIIZ). Také je možné provést rozšíření
z původní osmibitové znakové sady na znaky reprezentované v Unicode apod. Zde
se projevuje významná vlastnost Forthu: přidání těchto nových jazykových
konstrukcí není spojeno se změnou v samotném jazyku (viz motto na začátku této
kapitoly). To v jiných jazycích není možné - i když se například v C-čku
vytvoří funkce pro práci s jinak ukládanými řetězci, není pro takto vytvořené
řetězce možné použít stávající jazykové konstrukce, například konstantní
řetězce.</p>

<p>V dalším textu se budu zabývat především prací s původními Forthovskými
řetězci, tj. poli o maximálně 256ti bytech, kde v prvním byte je uložena
velikost pole (délka řetězce).</p>



<p><a name="k02" id="k02"></a></p>
<h2>2. Vytvoření a inicializace řetězce</h2>

<p><em>An artist's paintbrush doesn't notify the artist of a mistake; the
painter will be the judge of that. The chef's skillet and the composer's piano
remain simple and yielding. Why let a programming language try to out think
you?<br />
Leo Brodie, Thinking Forth
</em></p>

<p>Prvním úkolem před jakoukoli další manipulací s řetězci je alokace paměti,
do které se bude řetězec ukládat. Pro alokaci paměti už známe potřebná slova:
<strong>CREATE</strong> a <strong>ALLOT</strong>. Při alokaci paměti je nutné
udat počet alokovaných byte. Výpočet paměti, kterou je nutné alokovat pro jeden
znak, zajistí slovo <strong>CHARS</strong>, které tvoří analogii s již dříve
popsaným slovem <strong>CELLS</strong>. Ve většině případů toto slovo neprovádí
žádnou činnost (tj. ponechá na zásobníku původní hodnotu), protože znak je
uložen na jednom byte. Z tohoto důvodu může definice slova
<strong>CHARS</strong> vypadat velmi triviálně:</p>

<pre>

: chars ;

</pre>

<p>Vytvoření slova pro alokaci paměti pro řetězec se tedy provede pomocí
následující sekvence, která kopíruje známou sekvenci slov pro vytvoření
pole:</p>

<pre>

create jméno_řetězce délka_řetězce chars allot

</pre>

<p>například:</p>

<pre>

create pozdrav 10 chars allot

</pre>

<p>Jak je z výše uvedeného kódu patrné, je vytvoření řetězce a pole prováděno
naprosto stejným způsobem, pouze se liší slova pro výpočet alokovaného místa
(původní slovo <strong>CELLS</strong> je nahrazeno slovem
<strong>CHARS</strong>).</p>

<p>Inicializace řetězce, tj. vlastní zápis textu do řetězce, je poněkud
obtížnější, protože některé implementace Forthu pro tuto činnost neposkytují
potřebné slovo. Dokonce ani ANS-Forth (tj. prakticky oficiální standard Forthu)
žádným podobným slovem neoplývá. Toto slovo, které se již tradičně a výstižně
nazývá <strong>PLACE</strong> je možné vytvořit například následujícím způsobem
(pokud již slovo se stejným jménem existuje, bude novou definicí "překryto", to
vyplývá ze způsobu procházení slovníkem, který jsme si taktéž uvedli v
předchozích částech tohoto seriálu):</p>

<pre>

: place over over &gt;r &gt;r char+ swap chars cmove r&gt; r&gt; c! ;

</pre>

<p>Za zmínku stojí použité slovo <strong>CMOVE</strong>, pomocí kterého je
možné přenášet bloky paměti. S tímto užitečným slovem se několikrát setkáme i v
dalším textu. Prozatím se tedy nebudeme ani podrobněji zabývat parametry, které
toto slovo vyžaduje; ty lze ostatně z výše uvedeného kódu velmi přesně
odhadnout, připomenu jen, že pomocí slov <strong>&gt;r</strong> a
<strong>r&gt;</strong> lze přesunovat hodnoty mezi zásobníkem operandů a
zásobníkem návratových adres.</p>

<p>Pokud tedy máme ve slovníku uložené slovo <strong>PLACE</strong>, je možné
řetězec inicializovat řetězcovou konstantou (ta začíná slovem
<strong>S"</strong>, které na zásobník operandů uloží počáteční adresu
řetězcové konstanty), což neznačí nic jiného, než kopii konstantního řetězce na
adresu, která reprezentuje začátek námi vytvořeného řetězce:</p>

<pre>

create pozdrav 10 chars allot
s" Hello! " pozdrav place

</pre>

<p>Při inicializaci řetězce se neprovádí žádné kontroly na překročení mezí
předem alokovaného pole. Pokud by se například řetězec <em>pozdrav</em>
inicializoval hodnotou <em>"Hello world!"</em>, došlo by k přemazání další
oblasti paměti, která již do řetězce nepatří. Ve většině situací tato chyba
nekončí přepsáním kódu (ten je uložen na relativně bezpečném místě - ve
slovníku), ale modifikací nějakého jiného řetězce, popř. jiného pole.</p>



<p><a name="k03" id="k03"></a></p>
<h2>3. Výpis jednoho znaku</h2>

<p>Ještě předtím, než si ukážeme slovo pro výpis řetězce, se musím krátce
zmínit o velmi důležitém slovu <strong>EMIT</strong>. Toto slovo, které tvoří
základ prakticky všech výstupních operací, je používáno pro výpis jednoho
znaku, jeho účinek tedy odpovídá C-čkovským funkcím <em>putc()</em> a
<em>putchar()</em>. Při vyvolání slova <strong>EMIT</strong> se musí na
zásobníku operandů nacházet číselný kód znaku - prakticky vždy jde o ASCII kód,
avšak při použití nějaké značně specifické architektury se kódy znaků mohou
lišit.</p>

<p>Použití slova <strong>EMIT</strong> v programech je velmi jednoduché. Ukažme
si výpis znaku <em>'A'</em>, který má v ASCII znakové sadě číselný kód 65:</p>

<pre>

65 emit

</pre>

<p>Již v předchozích částech tohoto seriálu jsme používali slovo
<strong>CR</strong>, které provádí odřádkování, tj. přesun textového kurzoru na
nový řádek. Toto slovo může být - a mnohdy také je - definováno následovně (v
ASCII sadě je pozice 10 rezervována pro znak konce řádku):</p>

<pre>

: cr 10 emit ;

</pre>

<p>Ve Forthu dále existuje konstanta (resp. slovo ukládající na zásobník
operandů konstantu) <strong>BL</strong>, kterou je reprezentován prázdný znak
(<em>blank</em>), mezera je totiž jiným způsobem (například řetězcovou
konstantou) složitě zapisovatelná. Toto slovo může být vytvořeno například
následujícím způsobem:</p>

<pre>

: bl 32 ;

</pre>

<p>protože kód mezery je v ASCII roven právě třiceti dvěma. S pomocí tohoto
slova lze vytvořit nové slovo <strong>SPACE</strong>, které mezeru
vytiskne:</p>

<pre>

: space bl emit ;

</pre>

<p>Z tohoto slova lze dále odvodit slovo <strong>SPACES</strong>, které vytiskne několik mezer. Počet mezer je uložen na vrcholu zásobníku operandů. Pokud toto slovo není v původním slovníku Forthu obsaženo, je možné ho velmi jednoduše doplnit:</p>

<pre>

: spaces 0 do space loop ;

</pre>

<p>Toto slovo předpokládá, že počet opakování pro smyčku
<strong>DO-LOOP</strong> je zadán na vrcholu zásobníku operandů (před začátkem
smyčky je ještě vhodné otestovat uložené číslo, aby byla zaručena jeho kladná
hodnota, případnou úpravu slova ponechám na čtenáři). Použití slova
<strong>SPACES</strong> je triviální:</p>

<pre>

10 spaces

</pre>

<p>Nyní již máme dostatek informací k tomu, abychom se mohli zabývat způsobem
tisku celých řetězců na obrazovku nebo na jiné výstupní zařízení.</p>



<p><a name="k04" id="k04"></a></p>
<h2>4. Výpis celého řetězce</h2>

<p><em>Forth has often been characterized as offbeat, totally unlike any other
popular language in structure or in philosophy, On the contrary, Forth
incorporates many principles now boasted by the most contemporary languages.
Structured design, modularity, and information-hiding are among the buzzwords
of the day.<br />
Leo Brodie, Thinking Forth
</em></p>

<p>Výpis řetězce se dá provést například následujícím způsobem: řetězec se
postupně ve smyčce prochází, přičemž se každý znak řetězce (resp. jeho ASCII
kód) uloží na zásobník operandů a zavolá se slovo <strong>EMIT</strong>, které
daný znak vytiskne. Před procházením se musí zjistit délka řetězce, to
zajišťuje slovo <strong>COUNT</strong>, které je součástí ANS-Forthu. Toto
slovo má jedinou nevýhodu - ponechává na zásobníku operandů délku řetězce.
Proto si nadefinujeme slovo <strong>LENGTH$</strong> (návrat k Basicu :-), ale
označování slov pro práci s řetězci dolarem je běžné i ve Forthu), které po
zavolání ponechá na zásobníku pouze jedno číslo odpovídající délce řetězce:</p>

<pre>

: length$ count swap drop ;

</pre>

<p>Pro ladění si ještě vytvoříme slovo <strong>PRINTLEN$</strong> pro přímý výpis délky řetězce:</p>

<pre>

: printlen$ length$ . cr ;

</pre>

<p>S využitím výše uvedených slov již můžeme vytvořit nové slovo, které řetězec
vytiskne na obrazovku. Toto slovo, které se ve Forthu nazývá
<strong>TYPE</strong> můžeme zapsat například následujícím způsobem:</p>

<pre>

: type
    ?dup
    if over + swap
        do
            i
            c@
            emit
        loop
    else
        drop
    then
;

</pre>

<p>Před zavoláním slova <strong>TYPE</strong> musí být ve druhé buňce zásobníku
operandů umístěna adresa počátku řetězce a na vrcholu zásobníku musí být uložen
počet znaků, který se má vypsat. Jediné neznámé slovo je <strong>c@</strong>,
které slouží k přečtení jednoho znaku z paměti (adresa paměťového místa je
získána pomocí slova <strong>I</strong>) a uložení přečtené hodnoty na zásobník
(s případnou konverzí kódu znaku na celé číslo). Na tomto slovu je také názorně
vidět, že jako hodnoty počitadla smyčky <strong>DO-LOOP</strong> mohou bez
problémů vystupovat adresy. Slovo <strong>TYPE</strong> si můžeme ihned
odzkoušet na jednoduchém prográmku:</p>

<pre>

s" Hello world!"
type

</pre>

<p>Pro jistotu ještě uvedu celý program, který nejprve vytvoří řetězec, uloží
do něj text a tento text posléze vypíše. Uvedený program by měl pracovat
prakticky ve všech implementacích Forthu, tedy i těch, které neobsahují žádná
slova pro práci s řetězci (kromě <strong>CMOVE</strong> a
<strong>EMIT</strong>):</p>

<pre>

: chars ;          ( některé Forthy toto slovo neznají )
: place over over &gt;r &gt;r char+ swap chars cmove r&gt; r&gt; c! ;
: type ?dup if over + swap do i c@ emit loop else drop then ;
: cr 10 emit ;     ( pro ne-ASCII platformy nutno změnit )

create pozdrav 20 chars allot
s" Hello world! " pozdrav place
pozdrav count type cr

</pre>



<p><a name="k05" id="k05"></a></p>
<h2>5. Další slova určená pro manipulaci s řetězci</h2>

<p><em>Software development in Forth seeks first to find the simplest solution
to a given problem. This is done by implementing selected parts of the problem
separately and by ignoring as many constraints as possible. Then one or a few
constraints are imposed and the program is modified.<br />
Kim Harris, The Forth Philosophy, Dr. Dobb's Journal.
</em></p>

<p>Pro kopii řetězců (a nejenom jich) se používá velmi důležité slovo
<strong>CMOVE</strong>. Toto slovo provádí přesun bloku paměti a vzhledem k
tomu, že se jedná o činnost, která má trvat co nejkratší dobu, je toto slovo
většinou vytvořeno v inline assembleru s optimalizací na použitý procesor.
Slovo <strong>CMOVE</strong> vyžaduje před svým zavoláním následující strukturu
uloženou na zásobníku operandů: (zdroj cíl počet_znaků), přičemž počet znaků
většinou odpovídá počtu bytů.</p>

<p>Toto slovo je sice možné přímo použít pro kopie celých řetězců, ale problém
nastává se správným umístěním všech hodnot na zásobník, zejména s výpočtem
počtu kopírovaných znaků a s posunem adres počátků řetězců. Z tohoto důvodu je
pro provádění kopií řetězců mnohem výhodnější následující slovo
<strong>COPY$</strong>, které nejprve provede přípravu a uložení všech
potřebných parametrů a posléze zavolá slovo <strong>CMOVE</strong>:</p>

<pre>

: copy$
    swap dup count 1+
    swap drop rot swap
    cmove
;

</pre>

<p>Použití slova <strong>COPY$</strong> je velmi jednoduché, jak ukazuje
následující příklad:</p>

<pre>

create prvni 10 chars allot
create druhy 10 chars allot
s" Hello!" prvni place

prvni druhy copy$

prvni count type cr
druhy count type cr

</pre>

<p>Pro zopakování významu slov operujících se zásobníkem si na zásobníkovém
diagramu ukážeme, jakým způsobem je slovo <strong>COPY$</strong>
interpretováno v sekvenci <tt>prvni druhy copy$</tt>:</p>

<pre>

swap    ( prvni druhy -- druhy prvni )
dup     ( druhy prvni -- druhy prvni prvni )
count   ( druhy prvni prvni -- druhy prvni prvni delka )
1+      ( druhy prvni prvni delka -- druhy prvni prvni delka+1 )
swap    ( druhy prvni prvni delka+1 -- druhy prvni delka+1 prvni )
drop    ( druhy prvni delka+1 prvni -- druhy prvni delka+1 )
rot     ( druhy prvni delka+1 -- prvni delka+1 druhy )
swap    ( prvni delka+1 druhy -- prvni druhy delka+1 )
cmove   ( prvni druhy delka+1 -- )

</pre>

<p>Ve Forthu je samozřejmě možné pracovat i s řetězci ve stylu jazyka C, tj. s
poli znaků, které jsou ukončeny nulou. Tyto řetězce mohou mít prakticky
neomezenou délku, jejich nevýhodou je fakt, že při manipulacích s řetězci se
musí jejich délka zjišťovat postupným průchodem, což je mnohdy značně pomalé,
zejména na moderních architekturách procesorů, které provádí přístupy do paměti
po jednotlivých bytech poměrně neefektivním způsobem.</p>

<p>Alokace řetězců ve stylu C-čka se provádí prakticky stejným způsobem, jako
tomu bylo v případě Forthovských řetězců. Jediný rozdíl nastane při
inicializaci řetězce, kdy je zapotřebí vytvořit nové slovo
<strong>PLACE$</strong>, které řetězec správně ukončí nulou. Jako příklad práce
s řetězci ukončenými nulou si uvedeme slovo <strong>STRLEN</strong>, které
vrací délku řetězce, podobně jako C-čkovská funkce <em>strlen()</em>:</p>

<pre>

: strlen ( adresa -- délka )
    0
    begin
        over c@ 0= dup not if
            -rot 1+ swap 1+ swap rot
        then 
    until
    nip
;

</pre>

<p>(u některých verzí Forthu je nutné dodefinovat slova <strong>NIP</strong> a
<strong>-ROT</strong> - jejich význam při práci se zásobníkem operandů jsme si
uvedli v předchozí části tohoto seriálu.</p>

<p>Jak je z předchozích kapitol patrné, nepatří práce s řetězci (a texty
obecně) ve Forthu k příjemným a jednoduchým činnostem. To je zčásti způsobeno
jak syntaktickou odlišností samotného Forthu, tak i neexistencí potřebných slov
v normě ANS-Forth. Uživatel je v mnoha případech nucen vytvořit si vlastní sadu
potřebných slov (typicky <strong>PLACE</strong>, <strong>TYPE</strong>,
<strong>SLICE</strong>, <strong>APPEND</strong> atd.) nebo použít některou z
četných knihoven, které pro práci s řetězci ve Forthu existují (v kForthu je to
například knihovna <em>strings.4th</em>).</p>



<p><a name="k06" id="k06"></a></p>
<h2>6. Obsah dalšího pokračování</h2>

<p>V dalším pokračování tohoto seriálu si uvedeme funkce pro přístup k
informacím, které jsou uloženy v externích souborech. Řeč tedy bude o
klasických vstupně-výstupních operací, které však jsou ve Forthu implementovány
poněkud odlišným způsobem, než je tomu v jiných programovacích jazycích.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small></p>
</body>
</html>

