<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Scratch - plnohodnotný programovací jazyk nebo jen dětské puzzle? (4. část: pokročilá práce s BYOB)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Scratch - plnohodnotný programovací jazyk nebo jen dětské puzzle? (4. část: pokročilá práce s BYOB)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o programovacích jazycích navržených pro výuku programování budeme pokračovat v popisu systému BYOB, což je jeden z projektů, jehož cílem je rozšíření možností Scratche. Budeme se zabývat problematikou rozdělení programu na podprogramy, využitím rekurze a na závěr se zmíníme o zajímavém projektu s názvem Elements.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Scratch - plnohodnotný programovací jazyk nebo jen dětské puzzle? (4. část: pokročilá práce s BYOB)</a></p>
<p><a href="#k02">2. Kreslíme domek aneb základní obrazec Pythagorova stromu</a></p>
<p><a href="#k03">3. Využití rekurze při vykreslování Pythagorova stromu</a></p>
<p><a href="#k04">4. Rozdělení programu na podprogramy a zobecnění algoritmu pro vykreslení Pythagorova stromu</a></p>
<p><a href="#k05">5. Problematika vzájemného volání dvou podprogramů</a></p>
<p><a href="#k06">6. Demonstrační příklad &ndash; Sierpinského trojúhelník vykreslený rekurzivním algoritmem</a></p>
<p><a href="#k07">7. Algoritmus vykreslení Sierpinského trojúhelníku v&nbsp;projektu BYOB</a></p>
<p><a href="#k08">8. Od Scratche přes BYOB až k&nbsp;vizuální tvorbě programů ve Smalltalku s&nbsp;využitím bloků</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Scratch - plnohodnotný programovací jazyk nebo jen dětské puzzle? (4. část: pokročilá práce s BYOB)</h2>

<p>V&nbsp;předchozí části seriálu o programovacích jazycích navržených
s&nbsp;ohledem na výuku programování jsme se seznámili s&nbsp;projektem
<i>BYOB</i>, neboli plným názvem <i>Build Your Own Block</i>. Tento poměrně
zajímavý projekt vznikl rozšířením projektu <i>Scratch</i> o relativně velké
množství nových funkcí. Z&nbsp;hlediska uživatelů je nejdůležitější novinkou
možnost tvorby nových příkazových bloků (podprogramů), u nichž je možné
specifikovat jejich parametry, určit typ parametrů, jejich implicitní hodnoty
atd. Každý nově vytvořený blok může být umístěn do jedné z&nbsp;osmi kategorií
bloků &ndash; pohyb, vzhled, zvuk, pero, ovládání, vnímání, operátory a
proměnné. Minule jsme si taktéž ukázali, jakým způsobem se bloky vytváří. Dnes
si na několika demonstračních příkladech vysvětlíme použití uživatelsky
definovaných bloků při vykreslování rekurzivních obrazců a taktéž si řekneme,
jak lze (i když poněkud nešikovně) vyřešit problém, který nastane ve chvíli,
když má blok <strong>A</strong> volat blok <strong>B</strong> a současně se
z&nbsp;bloku <strong>B</strong> volá blok <strong>A</strong> (je ostatně
zajímavé sledovat, jak je tento problém řešen v&nbsp;ostatních programovacích
jazycích, ať již se jedná o překladače, nebo o interpretry).</p>

<img src="http://i.iinfo.cz/images/463/lang11-1.png" width="400" height="322" alt="&#160;" />
<p><i>Obrázek 1: Zobecněná forma takzvaného Pythagorova stromu, která byla
vykreslena programem, v&nbsp;němž byla využita rekurze. Finální verze tohoto
programu je ukázána ve čtvrté kapitole.</i></p>

<p>Ve druhé části dnešního článku si popíšeme projekt s&nbsp;názvem
<i>Elements</i>, jenž je součástí <i>BYOBu</i> (i když součástí poněkud
nenápadnou, pravděpodobně proto, že se prozatím jedná o testovací verzi).
Projekt <i>Elements</i>, jehož autorem <i>Jens Mönig</i>, se snaží využít
stejnou techniku vizuální tvorby programů pomocí příkazových bloků, jaká je
použita ve <i>Scratchi</i>, ovšem aplikuje ji na samotný programovací jazyk
<i>Smalltalk</i>, v&nbsp;němž je <i>Scratch</i> a samozřejmě i <i>BYOB</i>
naprogramován. Vzhledem k&nbsp;tomu, že v&nbsp;jazyku <i>Smalltalk</i> jsou
prakticky všechny elementy jazyka považovány za objekty, a to včetně
pravdivostních hodnot, čísel, programových bloků, programových smyček atd.,
obsahuje projekt <i>Elements</i> jen velmi málo typů základních stavebních
bloků (konkrétně pouze sedm). Pokud by podobný projekt vznikl například pro
mainstreamové jazyky (od céčka přes JavaScript až k&nbsp;Pythonu), bylo by
nutné navrhnout mnohem větší počet stavebních bloků, čímž by se celé ovládání
(i způsob &bdquo;vykreslení zdrojových kódů&ldquo;) mohlo zkomplikovat.</p>

<a href="http://i.iinfo.cz/images/463/lang11-2.png"><img src="http://i.iinfo.cz/images/463/lang11-2-prev.png" width="358" height="270" alt="&#160;" /></a>
<p><i>Obrázek 2: U parametrů podprogramů lze zavést kontrolu na správný typ
předávaných parametrů. V&nbsp;demonstračních příkladech, které si dnes budeme
ukazovat, je vždy použit numerický datový typ. Povšimněte si možnosti zadání
implicitní hodnoty parametru ve spodní části formuláře.</i></p>



<p><a name="k02"></a></p>
<h2>2. Kreslíme domek aneb základní obrazec Pythagorova stromu</h2>

<p>V&nbsp;úvodní části dnešního článku se budeme zabývat problematikou návrhu a
implementace rekurzivních algoritmů, protože se jedná o poměrně důležitou část
algoritmizace. Díky tomu, že projekt <i>Scratch</i> (a samozřejmě i na něj
navazující projekt <i>BYOB</i>) umožňuje využití takzvané &bdquo;želví
grafiky&ldquo;, je možné problematiku rekurzivních algoritmů vysvětlit na
rekurzivně tvořených obrazcích, což je názorné a současně je na grafickém
výstupu vidět jakákoli chyba vzniklá špatně navrženým algoritmem (například je
ihned patrné, kdy se zapomene uvést ukončující podmínka rekurze atd.). Prvním
programem, který v&nbsp;několika krocích vytvoříme, bude program na vykreslení
takzvaného <i>Pythagorova stromu</i>. Základem Pythagorova stromu je známý
domeček kreslený jedním tahem, jenž je zobrazen na třetím obrázku. Pokud
považujeme šířku domku a výšku jeho stěn za základní jednotkovou délku, pak
mají úhlopříčné tahy délku rovnou odmocnině dvou (<i>sqrt 2</i>) a délka stran
střechy je naopak rovná převrácené hodnotě odmocnině dvou (<i>1/sqrt 2</i>).
Obě hodnoty samozřejmě vychází ze známého vztahu pro délky stran pravoúhlého
rovnoramenného trojúhelníku:</p>

<p><ins>2a<sup>2</sup>=c<sup>2</sup></ins></p>

<img src="http://i.iinfo.cz/images/463/lang11-3.png" width="333" height="329" alt="&#160;" />
<p><i>Obrázek 3: Známá dětská hádanka &ndash; domeček vykreslený jediným tahem
&ndash; tvoří základ jedné varianty Pythagorova stromu.</i></p>

<p>Původní implementace vykreslení domku jedním tahem je zapsána v&nbsp;syntaxi
programovacího jazyka <i>Logo</i>:</p>

<pre>
<strong>to</strong> domek :strana
    <i>; základna</i>
    forward :strana
&nbsp;
    <i>; úhlopříčka</i>
    left 90+45
    forward :strana*sqrt 2
&nbsp;
    <i>; stěna</i>
    left 90+45
    forward :strana
&nbsp;
    <i>; úhlopříčka</i>
    left 90+45
    forward :strana*sqrt 2
&nbsp;
    <i>; úsečka pod střechou</i>
    left 90+45
    forward :strana
&nbsp;
    <i>; první část střechy</i>
    right 90+45
    forward :strana/sqrt 2
&nbsp;
    <i>; druhá část střechy</i>
    right 90
    forward :strana/sqrt 2
&nbsp;
    <i>; zbývající stěna</i>
    right 45
    forward :strana
    left 90
end
&nbsp;
<i>; zobrazení pracovní plochy a její smazání</i>
draw
clean
right 90
<i>; vykreslení domku</i>
domek 70
</pre>

<p>Převedení výše uvedeného programu na sekvenci do sebe zapojených příkazových
bloků v&nbsp;projektu <i>Scratch</i> či <i>BYOB</i> je v&nbsp;tomto případě
přímočaré &ndash; viz též screenshot zobrazený pod tímto odstavcem. Jak si
můžete všimnout, nejsou ve variantě programu pro <i>Scratch</i> zapsány
poznámky, protože <i>Scratch</i> kupodivu neumožňuje jejich tvorbu, což je
škoda (poznámky by se například mohly zobrazit v&nbsp;bublinové nápovědě,
podobně jako je tomu v&nbsp;některých textových procesorech či tabulkových
kalkulátorech). V&nbsp;případě potřeby je možné v&nbsp;projektu <i>BYOB</i>
namísto poznámky použít prázdný uživatelsky definovaný blok s&nbsp;jedním
řetězcovým parametrem.</p>

<img src="http://i.iinfo.cz/images/463/lang11-4.png" width="258" height="387" alt="&#160;" />
<p><i>Obrázek 4: Sekvence příkazů pro vykreslení domku jedním tahem. Před
provedením těchto příkazů je nutné nastavit hodnotu proměnné
<strong>strana</strong>.</i></p>



<p><a name="k03"></a></p>
<h2>3. Využití rekurze při vykreslování Pythagorova stromu</h2>

<p>V&nbsp;případě, že se vykreslení každé strany střechy nahradí rekurzivním
voláním podprogramu pro vykreslení celého domku, získáme charakteristický tvar
vzdáleně podobný stromu či keři &ndash; viz též obrázek číslo 5. Díky tomu, že
oba segmenty střechy jsou kratší než základna původního domku, jsou další
rekurzivně vykreslované domky menší (o odmocninu ze dvou), čehož lze využít při
konstrukci podmínky pro zastavení rekurze. Při ladění programu je zajímavé
taktéž sledování postupného vykreslování Pythagorova stromu, zejména na
pomalejším počítači (ve skutečnosti se však právě na rekurzivních algoritmech
projevuje relativní pomalost interpretace programů ve <i>Scratchi</i> i
<i>BYOBu</i>).</p>

<img src="http://i.iinfo.cz/images/463/lang11-5.png" width="424" height="311" alt="&#160;" />
<p><i>Obrázek 5: Pokud se namísto střechy domku rekurzivně vykreslí dva nové
(menší) domky, je výsledkem obrazec Pythagorova stromu.</i></p>

<p>Samozřejmě je nutné opět zavést podmínku pro ukončení rekurze, jinak by
program teoreticky nikdy neskončil (ve skutečnosti by byl ukončen běhovou
chybou při překročení volné kapacity operační paměti). Podmínka pro ukončení
rekurze může být zadána různým způsobem, ale zde můžeme využít již výše
zmíněného faktu, že se domky postupně zmenšují. V&nbsp;případě, že je délka
strany pro vykreslení domku menší než délka předaná v&nbsp;parametru
<strong>min_delka</strong>, je namísto domku vykreslena pouze úsečka o této
délce, čímž je zajištěno vykreslení střech domků ležících na konci větví
&bdquo;stromu&ldquo;. Pokud však délka strany přesahuje tuto hodnotu, je jedním
tahem vykreslen celý domek. Tato podmínka je použita i v&nbsp;podprogramu
<strong>domek</strong>, jenž je zobrazen na šestém obrázku. Jedná se prozatím o
nerekurzivní variantu.</p>

<img src="http://i.iinfo.cz/images/463/lang11-6.png" width="280" height="544" alt="&#160;" />
<p><i>Obrázek 6: Nerekurzivní (testovací) varianta podprogramu
<strong>domek</strong>, která již obsahuje podmínku na minimální délku strany
domku.</i></p>

<p>Z&nbsp;výše uvedené nerekurzivní varianty programu je možné vytvořit
rekurzivní variantu velmi snadno &ndash; namísto dvou příkazů pro vykreslení
střechy postačuje rekurzivně zavolat samotný podprogram <strong>domek</strong>,
samozřejmě s&nbsp;parametrem <strong>strana</strong> poděleným o odmocninu ze
dvou. Nic dalšího není zapotřebí, protože podmínka pro ukončení rekurze
automaticky zajistí, že program skončí v&nbsp;konečném čase.</p>

<img src="http://i.iinfo.cz/images/463/lang11-7.png" width="296" height="620" alt="&#160;" />
<p><i>Obrázek 7: Rekurzivní varianta podprogramu <strong>domek</strong>. Do
programu jsou navíc přidány příkazy pro změnu barvy pera pro každý rekurzivně
vykreslený domek.</i></p>

<p><ins>Poznámka: v&nbsp;programovacím jazyce Logo by se vykreslení Pythagorova
stromu mohlo řešit následujícím způsobe:</ins></p>

<pre>
<strong>to</strong> domek :strana
    <strong>ifelse</strong> :strana&gt;10 [
        <i>; základna</i>
        forward :strana
&nbsp;
        <i>; úhlopříčka</i>
        left 90+45
        forward :strana*sqrt 2
&nbsp;
        <i>; stěna</i>
        left 90+45
        forward :strana
&nbsp;
        <i>; úhlopříčka</i>
        left 90+45
        forward :strana*sqrt 2
&nbsp;
        <i>; úsečka pod střechou</i>
        left 90+45
        forward :strana
&nbsp;
        <i>; první část střechy</i>
        right 90+45
        domek :strana/sqrt 2
&nbsp;
        <i>; druhá část střechy</i>
        right 90
        domek :strana/sqrt 2
&nbsp;
        <i>; zbývající stěna</i>
        right 45
        forward :strana
        left 90
    ][
        forward :strana
    ]
end
&nbsp;
draw
clean
right 90
domek 70
</pre>

<img src="http://i.iinfo.cz/images/463/lang11-8.png" width="473" height="337" alt="&#160;" />
<p><i>Obrázek 8: Výsledek běhu programu, jehož struktura byla zobrazena na
předchozím obrázku.</i></p>



<p><a name="k04"></a></p>
<h2>4. Rozdělení programu na podprogramy a zobecnění algoritmu pro vykreslení Pythagorova stromu</h2>

<p>Program, jehož struktura byla zobrazena na sedmém obrázku, sice pracuje
korektně (pro správné parametry), ale není moc univerzální a ani přehledný.
Program je však možné poměrně jednoduše rozdělit na menší a přehlednější
podprogramy, což vede k&nbsp;jeho snadnější údržbě. Prvním krokem je vytvoření
podprogramu (=uživatelského příkazového bloku) sloužícího pro vykreslení
základny. Tento podprogram, jenž je nazvaný jednoduše
<strong>zakladna</strong>, je velmi jednoduchý a bude volán přímo
z&nbsp;upraveného podprogramu <strong>domek</strong>:</p>

<img src="http://i.iinfo.cz/images/463/lang11-9.png" width="272" height="322" alt="&#160;" />
<p><i>Obrázek 9: Podprogram nazvaný <strong>zakladna</strong>.</i></p>

<p>Další úprava programu může vést ke zobecnění Pythagorova stromu takovým
způsobem, aby se větvení provádělo o libovolný úhel, nejenom pro 45&deg;. Při
kresbě zobecněného Pythagorova stromu je nutné vytvořit podprogram, který
dokáže nakreslit pravoúhlý trojúhelník o zadané délce přepony (nejdelší strany)
a úhlu mezi přeponou a jednou odvěsnou. Proč však potřebujeme vytvořit takový
podprogram? Zobecněný Pythagorův strom se od pravidelného Pythagorova stromu,
který jsme si popsali v&nbsp;předchozích dvou kapitolách, odlišuje především
v&nbsp;tom, že je použit jiný úhel větvení, což jinými slovy znamená, že se
změní tvar střechy z&nbsp;rovnoramenného pravoúhlého trojúhelníku na jiný
pravoúhlý trojúhelník:</p>

<img src="http://i.iinfo.cz/images/463/lang11-10.png" width="398" height="328" alt="&#160;" />
<p><i>Obrázek 10: Zobecněný Pythagorův strom s&nbsp;odlišným úhlem
rozvětvení.</i></p>

<p>Délka přepony v&nbsp;tomto trojúhelníku odpovídá šířce &bdquo;domku&ldquo;,
který tvoří základ celého stromu, a odvěsny představují obě plochy střechy.
Změnou úhlu odchylky první odvěsny se změní i tvar celého trojúhelníku.</p>

<p>Výpočet délky odvěsen je velmi jednoduchý. První odvěsna bude mít délku
rovnou:<br />
<i>a=c&times;cos &alpha;</i><br />
a druhá odvěsna:<br />
<i>b=c&times;sin &alpha;</i><br />
kde &alpha; je úhel, který svírá odvěsna <i>a</i> s&nbsp;přeponou <i>c</i>.</p>

<p>Pokud již známe vzorce pro výpočet délky obou odvěsen, je již snadné napsat
podprogram, který střechu skutečně vykreslí. Povšimněte si, že nový podprogram
pojmenovaný <strong>strecha</strong> volá původní podprogram
<strong>domek</strong>, ovšem museli jsme přidat nový parametr
<strong>uhel</strong>. Teoreticky by se mohlo jednat o globální proměnnou, to
však není z&nbsp;programátorského hlediska příliš čisté řešení, i když je to
paměťově poněkud méně náročné:</p>

<img src="http://i.iinfo.cz/images/463/lang11-11.png" width="321" height="202" alt="&#160;" />
<p><i>Obrázek 11: Podprogram nazvaný <strong>strecha</strong>.</i></p>

<p>Vlastní podprogram <strong>domek</strong> se nám značně zkrátil a zpřehlednil:</p>

<img src="http://i.iinfo.cz/images/463/lang11-12.png" width="273" height="268" alt="&#160;" />
<p><i>Obrázek 12: Podprogram <strong>domek</strong> se nám díky dekompozici
programu značně zjednodušil.</i></p>

<p>A zde je vidět výsledek běhu celého programu pro úhel 20&deg;:</p>

<img src="http://i.iinfo.cz/images/463/lang11-13.png" width="400" height="337" alt="&#160;" />
<p><i>Obrázek 13: Zobecněný Pythagorův strom.</i></p>



<p><a name="k05"></a></p>
<h2>5. Problematika vzájemného volání dvou podprogramů</h2>

<p>Jak jste se již mohli všimnout v&nbsp;poslední verzi programu pro vykreslení
zobecněného Pythagorova stromu, můžeme se při implementaci některých
rekurzivních algoritmů dostat do situace, kdy se má z&nbsp;bloku
<strong>A</strong> volat blok <strong>B</strong> a současně se má z&nbsp;bloku
<strong>B</strong> naopak volat blok <strong>A</strong>. U programu uvedeného
v&nbsp;předchozí kapitole se tomuto stavu můžeme relativně snadno vyhnout
(postačuje blok <strong>strecha</strong> přenést do bloku
<strong>domek</strong>), ovšem existují i algoritmy, v&nbsp;nichž je nutné tuto
<i>nepřímou rekurzi</i> použít a nelze se jí žádnou (rozumnou a čitelnou)
úpravou programu zbavit. Ovšem v&nbsp;projektu <i>BYOB</i> se při tvorbě
příkazových bloků nazvaných <strong>A</strong> a <strong>B</strong> dostaneme
do situace, kdy není zdánlivě možné první blok <strong>A</strong> celý
naprogramovat, protože ještě neexistuje druhý blok <strong>B</strong>, jehož
box by se mohl přemístit do těla bloku <strong>A</strong>.</p>

<img src="http://i.iinfo.cz/images/463/lang11-14.png" width="486" height="401" alt="&#160;" />
<p><i>Obrázek 14: Současně otevřená okna s&nbsp;definicemi uživatelských
příkazových bloků <strong>A</strong> a <strong>B</strong>.</i></p>

<p>V&nbsp;běžných programovacích jazycích, v&nbsp;nichž se program zapisuje
formou textových souborů, se tato situace řeší různým způsobem.
V&nbsp;<i>Pascalu</i> se například využívá předběžná deklarace druhého bloku
s&nbsp;klíčovým slovem <strong>forward</strong>. Podobné je to ve <i>Forthu</i>
a v&nbsp;jazyku <i>C</i> je nutné alespoň nadeklarovat hlavičky volaných
funkcí. Některé interpretované programovací jazyky dokážou příslušnou funkci či
metodu vyhledat až v&nbsp;čase běhu programu, nezávisle na tom, kde je ve
skutečnosti deklarována. V&nbsp;projektu <i>BYOB</i> můžeme využít techniku,
která se v&nbsp;určitém ohledu podobná předběžným deklaracím. Nejprve se totiž
vytvoří hlavičky obou bloků <strong>A</strong> a <strong>B</strong>,
tj.&nbsp;vytvoří se prázdné bloky, u nichž je zadán jejich název a počet i typ
parametrů. V&nbsp;této chvíli je již možné nechat současně otevřená okna pro
editaci obou bloků a z&nbsp;levé části uživatelského prostředí <i>BYOBu</i> do
těchto oken přetáhnout boxy obou bloků <strong>A</strong> a <strong>B</strong>
&ndash; viz též obrázek číslo 14.</p>



<p><a name="k06"></a></p>
<h2>6. Demonstrační příklad &ndash; Sierpinského trojúhelník vykreslený rekurzivním algoritmem</h2>

<p>Využití nepřímé rekurze si můžeme snadno odzkoušet na rekurzivním algoritmu
pro vykreslení jedné z&nbsp;forem <i>Sierpinského trojúhelníku</i>. Tato forma
Sierpinského trojúhelníku je vytvořena pomocí jediné lomené čáry (polyčáry),
přičemž úhel napojení sousedních úseček (které se stýkají ve společném vrcholu)
je roven 120&deg; a délka všech úseček tvořících lomenou čáru je
konstantní.</p>

<img src="http://i.iinfo.cz/images/463/lang11-15.png" width="338" height="289" alt="&#160;" />
<p><i>Obrázek 15: Sierpinského trojúhelník vykreslený jedinou nepřerušovanou
lomenou čarou.</i></p>

<p>Existuje hned několik způsobů vykreslení této formy Sierpinského
trojúhelníku. My si v&nbsp;dnešním článku ukážeme způsob založený na nepřímé
rekurzi, tj.&nbsp;na algoritmu, ve kterém nějaká procedura <strong>A</strong>
volá proceduru <strong>B</strong>, ve které se rekurzivně volá opět procedura
<strong>A</strong> (ve skutečnosti je v&nbsp;použitém algoritmu přítomna i
rekurze přímá, tj.&nbsp;procedura <strong>A</strong> volá jak sama sebe, tak i
proceduru <strong>B</strong>). Obě vytvořené procedury mají pro jednoduchost
názvy <strong>sierpinsky_x</strong> a <strong>sierpinsky_y</strong> (tyto názvy
jsou odvozeny z&nbsp;názvů nonterminálních symbolů v&nbsp;přepisovací gramatice
L-systému, to však již zabíháme do podrobností, které s&nbsp;dnešním článkem
souvisí jen částečně) a výsledný tvar programu pro vykreslení lomené čáry ve
tvaru Sierpinského trojúhelníka pro daný počet iterací a délku úseček vypadá
v&nbsp;programovacím jazyku <i>Logo</i> následovně:</p>

<pre>
&nbsp;
<strong>to</strong> sierpinsky_x :strana :iter
    <strong>if</strong> :iter&gt;0 [
        sierpinsky_y :strana :iter-1
        forward :strana
        left 60
        sierpinsky_x :strana :iter-1
        forward :strana
        left 60
        sierpinsky_y :strana :iter-1
    ]
<strong>end</strong>
&nbsp;
<strong>to</strong> sierpinsky_y :strana :iter
    <strong>if</strong> :iter&gt;0 [
        sierpinsky_x :strana :iter-1
        forward :strana
        right 60
        sierpinsky_y :strana :iter-1
        forward :strana
        right 60
        sierpinsky_x :strana :iter-1
    ]
<strong>end</strong>
&nbsp;
(draw 300 300)
y 10 5
forward 10
&nbsp;
</pre>

<img src="http://i.iinfo.cz/images/463/lang11-16.png" width="275" height="240" alt="&#160;" />
<p><i>Obrázek 16: Sierpinského trojúhelník vykreslený jedinou nepřerušovanou
lomenou čarou. Oproti předchozímu obrázku se zmenšil krok, zvětšil počet
iterací a do bloku <strong>sierpinsky_x</strong> byl přidán příkaz pro změnu
barvy kreslicího pera.</i></p>



<p><a name="k07"></a></p>
<h2>7. Algoritmus vykreslení Sierpinského trojúhelníku v&nbsp;projektu BYOB</h2>

<p>Při implementaci tohoto programu v&nbsp;projektu <i>BYOB</i> můžeme nejprve
vytvořit kostru bloku <strong>sierpinsky_x</strong>, který je zde nazvaný
<strong>sierpinsky-x</strong> a prozatím obsahuje pouze přímou rekurzi:</p>

<img src="http://i.iinfo.cz/images/463/lang11-17.png" width="216" height="234" alt="&#160;" />
<p><i>Obrázek 17: Prozatím neúplné tělo bloku nazvaného
<strong>sierpinsky-x</strong>.</i></p>

<p>Dále je již možné vytvořit celý blok <strong>y</strong>
(resp.&nbsp;<strong>sierpinsky-y</strong>), protože druhý blok
<strong>sierpinsky-x</strong> již existuje, i když jeho tělo není úplné (to nás
však nemusí v&nbsp;tomto okamžiku trápit, protože se program nebude ihned
spouštět):</p>

<img src="http://i.iinfo.cz/images/463/lang11-18.png" width="218" height="277" alt="&#160;" />
<p><i>Obrázek 18: Úplné tělo bloku nazvaného
<strong>sierpinsky-y</strong>.</i></p>

<p>Ve třetím kroku dokončíme tělo bloku <strong>sierpinsky-x</strong>:</p>

<img src="http://i.iinfo.cz/images/463/lang11-19.png" width="216" height="283" alt="&#160;" />
<p><i>Obrázek 19: Nyní je již možné dokončit blok
<strong>sierpinsky-x</strong>.</i></p>

<p>Hlavní program (blok) pouze vhodně nastaví sprite i pracovní plochu a
posléze spustí vykreslování:</p>

<img src="http://i.iinfo.cz/images/463/lang11-20.png" width="234" height="207" alt="&#160;" />
<p><i>Obrázek 20: Hlavní program s&nbsp;inicializací spritu i pracovní
plochy.</i></p>



<p><a name="k08"></a></p>
<h2>8. Od Scratche přes BYOB až k&nbsp;vizuální tvorbě programů ve Smalltalku s&nbsp;využitím bloků</h2>

<p>V&nbsp;projektu <i>BYOB</i> je ve skutečnosti ukryt (a to poměrně dokonale
:-) ještě jeden zajímavý projekt, který se nazývá <i>Elements</i>. Autorem
tohoto projektu, jenž se v&nbsp;současnosti nachází v&nbsp;testovací, nicméně
stabilní fázi, je <i>Jens Mönig</i>. <i>Jens</i> byl podle svých vlastních slov
doslova fascinován jednoduchostí a současně i názorností tvorby programů ve
<i>Scratchi</i> a rozhodl se k&nbsp;zajímavému počinu &ndash; vytvořit podobný
systém vizuální tvorby programů i pro programovací jazyk <i>Smalltalk</i>.</p>

<img src="http://i.iinfo.cz/images/463/lang11-21.png" width="100" height="100" alt="&#160;" />
<p><i>Obrázek 21: Projekty Scratch i BYOB jsou naprogramované ve Squeaku, což
je velmi zdařilá implementace jazyka Smalltalk a vlastního grafického
uživatelského prostředí Morphic. Se Squeakem jsme se už seznámili
v&nbsp;předchozích částech tohoto seriálu.</i></p>

<p>Vytvořením projektu <i>Elements</i> vlastně došlo k&nbsp;uzavření kruhu,
protože projekty <i>Scratch</i> i <i>BYOB</i> jsou naprogramovány právě ve
<i>Smalltalku</i>, což mj.&nbsp;znamená, že se v&nbsp;<i>Elements</i> mohou
upravovat jak základní třídy <i>Smalltalku</i> i <i>Squeaku</i>, tak i třídy
<i>Scratche</i> a <i>BYOBu</i> &ndash; to vše samozřejmě
v&nbsp;&bdquo;živém&ldquo; systému, jak je to ostatně v&nbsp;případě
<i>Smalltalku</i> zvykem (pokud dojde ke změně nějaké třídy, ihned se
v&nbsp;systému projeví její nové chování a současně je možné měnit chování
jakékoli třídy, například i třídy <strong>Boolean</strong>,
<strong>Number</strong> atd., i když to může být v&nbsp;těchto případech
poněkud nebezpečné).</p>

<img src="http://i.iinfo.cz/images/463/lang11-22.png" width="348" height="319" alt="&#160;" />
<p><i>Obrázek 22: Tímto způsobem se v&nbsp;projektu Elements zobrazuje tělo
zprávy + (součet) pro třídu Integer.</i></p>

<p>Díky tomu, že programovací jazyk <i>Smalltalk</i> má ve skutečnosti velmi
jednoduchou syntaxi, vyskytuje se v&nbsp;projektu <i>Elements</i> pouze sedm
základních typů bloků: objekt, zpráva, literál (konstanta), uzávěr, blok
představující jeden krok &ndash; příkaz, primitivum a návratová hodnota. Pro
zjednodušení jsou pseudoproměnné (a současně i objekty-jedináčci)
<strong>true</strong> a <strong>false</strong> společně se speciálními objekty
<strong>self</strong> a <strong>super</strong> reprezentovány vlastními bloky
s&nbsp;odlišnou barvou pozadí. Stejně tak existuje i speciální blok pro
přiřazení a taktéž blok reprezentující strukturovanou podmínku typu
<strong>if-then-else</strong>, který je překládán na smalltalkovské zprávy
<strong>#iftrue, #iffalse</strong> a jejich varianty (je to mnohem přehlednější
a navíc se tím tvar vizuálně zobrazených algoritmů přibližuje tvaru algoritmů
zapsaných přímo ve <i>Scratchi</i> či <i>BYOBu</i>).</p>

<img src="http://i.iinfo.cz/images/463/lang11-23.png" width="178" height="287" alt="&#160;" />
<p><i>Obrázek 23: Základní typy bloků, s&nbsp;nimiž se pracuje v&nbsp;projektu
Elements.</i></p>

<p>V&nbsp;kontextovém menu přiřazeném ke každému příkazovému bloku
v&nbsp;programu <i>BYOB</i> se nově nachází i příkaz <strong>Edit
Elements</strong>. Tento příkaz vede k&nbsp;otevření nového okna projektu
<i>Elements</i>, kde se vizuálně zobrazí programový kód vybraného bloku. Ovšem
po rozkliknutí šipky zobrazené vlevo nahoře vedle jména bloku se zobrazí
squeakovské menu s&nbsp;výběrem všech tříd, které se v&nbsp;systému nachází,
včetně objektů Scratche, Squaku, projektu Elements i základních objektů typu
Boolean, Number, Integer atd. Z&nbsp;tohoto menu lze vybrat kteroukoli třídu a
z&nbsp;menu o řádek níže pak libovolnou metodu této třídy.</p>

<img src="http://i.iinfo.cz/images/463/lang11-24.png" width="587" height="577" alt="&#160;" />
<p><i>Obrázek 24: Menu s&nbsp;výběrem všech tříd.</i></p>

<img src="http://i.iinfo.cz/images/463/lang11-25.png" width="419" height="425" alt="&#160;" />
<p><i>Obrázek 25: Projekt Elements by mohl odstranit určitou averzi
k&nbsp;programovacímu jazyku Smalltalk, kterou někteří programátoři cítí kvůli
neobvyklému zápisu programů. Vizuální tvar programů je velmi přehledný a skrývá
některé &bdquo;speciality&ldquo; Smalltalku.</i></p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>Scratch: oficiální stránka projektu<br />
<a href="http://scratch.mit.edu/">http://scratch.mit.edu/</a>
</li>

<li>Scratch: galerie projektů vytvořených ve Scratchi<br />
<a href="http://scratch.mit.edu/galleries/browse/newest">http://scratch.mit.edu/galleries/browse/newest</a>
</li>

<li>Scratch: nápověda<br />
<a href="file:///usr/share/scratch/Help/en/index.html">file:///usr/share/scratch/Help/en/index.html</a>
</li>

<li>Scratch: obrazovky nápovědy<br />
<a href="file:///usr/share/scratch/Help/en/allscreens.html">file:///usr/share/scratch/Help/en/allscreens.html</a>
</li>

<li>Scratch (Wikipedie CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Scratch">http://cs.wikipedia.org/wiki/Scratch</a>
</li>

<li>Scratch (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Scratch_(programming_language)">http://en.wikipedia.org/wiki/Scratch_(programming_language)</a>
</li>

<li>Mitchel Resnick (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Mitchel_Resnick">http://en.wikipedia.org/wiki/Mitchel_Resnick</a>
</li>

<li>Domácí stránka Mitchela Resnicka<br />
<a href="http://web.media.mit.edu/~mres/">http://web.media.mit.edu/~mres/</a>
</li>

<li>BASIC-256 - BASIC256 - An easy to use BASIC language and IDE<br />
<a href="http://www.basic256.org/">http://www.basic256.org/</a>
</li>

<li>PythonTurtle<br />
<a href="http://pythonturtle.org/">http://pythonturtle.org/</a>
</li>

<li>Turtle graphics for Tk<br />
<a href="http://docs.python.org/library/turtle.html">http://docs.python.org/library/turtle.html</a>
</li>

<li>Scratch Lowers Resistance to Programming<br />
<a href="http://www.wired.com/gadgetlab/2009/03/scratch-lowers/">http://www.wired.com/gadgetlab/2009/03/scratch-lowers/</a>
</li>

<li>Stopařův průvodce jedním převážně neškodným programovacím jazykem<br />
<a href="http://www.squeak.cz/">http://www.squeak.cz/</a>
</li>

<li>CamelCase<br />
<a href="http://en.wikipedia.org/wiki/Camel_case">http://en.wikipedia.org/wiki/Camel_case</a>
</li>

<li>Smalltalk tutorial chapter 5 &ndash; Variables<br />
<a href="http://www.tutorials4u.com/smalltalk/smalltalk-tutorial-05.htm">http://www.tutorials4u.com/smalltalk/smalltalk-tutorial-05.htm</a>
</li>

<li>History around Pascal Casing and Camel Casing<br />
<a href="http://blogs.msdn.com/b/brada/archive/2004/02/03/67024.aspx">http://blogs.msdn.com/b/brada/archive/2004/02/03/67024.aspx</a>
</li>

<li>Xerox Alto<br />
<a href="http://en.wikipedia.org/wiki/Xerox_Alto">http://en.wikipedia.org/wiki/Xerox_Alto</a>
</li>

<li>WIMP (computing)<br />
<a href="http://en.wikipedia.org/wiki/WIMP_(computing)">http://en.wikipedia.org/wiki/WIMP_(computing)</a>
</li>

<li>Graphical user interface<br />
<a href="http://en.wikipedia.org/wiki/GUI">http://en.wikipedia.org/wiki/GUI</a>
</li>

<li>Xerox Star<br />
<a href="http://en.wikipedia.org/wiki/Xerox_Star">http://en.wikipedia.org/wiki/Xerox_Star</a>
</li>

<li>The Xerox Star 8010 "Dandelion"<br />
<a href="http://www.digibarn.com/collections/systems/xerox-8010/index.html">http://www.digibarn.com/collections/systems/xerox-8010/index.html</a>
</li>

<li>Fibonacci number<br />
<a href="http://en.wikipedia.org/wiki/Fibonacci_number">http://en.wikipedia.org/wiki/Fibonacci_number</a>
</li>

<li>Squeak home page<br />
<a href="http://www.squeak.org/">http://www.squeak.org/</a>
</li>

<li>XO: The Children's Machine<br />
<a href="http://wiki.laptop.org/go/The_Children's_Machine">http://wiki.laptop.org/go/The_Children's_Machine</a>
</li>

<li>Squeak na Wikipedii EN<br />
<a href="http://en.wikipedia.org/wiki/Squeak">http://en.wikipedia.org/wiki/Squeak</a>
</li>

<li>Squeak na Wikipedii CZ<br />
<a href="http://cs.wikipedia.org/wiki/Squeak">http://cs.wikipedia.org/wiki/Squeak</a>
</li>

<li>Squeak by Example<br />
<a href="http://squeakbyexample.org/">http://squeakbyexample.org/</a>
</li>

<li>Squeak Land<br />
<a href="http://www.squeakland.org/">http://www.squeakland.org/</a>
</li>

<li>SqueakNotes<br />
<a href="http://squeak.zwiki.org/SqueakNotes">http://squeak.zwiki.org/SqueakNotes</a>
</li>

<li>Squeak FAQ<br />
<a href="http://wiki.squeak.org/squeak/471">http://wiki.squeak.org/squeak/471</a>
</li>

<li>Learning Squeak<br />
<a href="http://c2.com/cgi/wiki?LearningSqueak">http://c2.com/cgi/wiki?LearningSqueak</a>
</li>

<li>Lazarus (Software)<br />
<a href="http://en.wikipedia.org/wiki/Lazarus_%28software%29">http://en.wikipedia.org/wiki/Lazarus_%28software%29</a>
</li>

<li>FreePascal<br />
<a href="http://www.freepascal.org/">http://www.freepascal.org/</a>
</li>

<li>"Why I Love Python" slides<br />
<a href="http://www.mindviewinc.com/downloads/pub/eckel/LovePython.zip">http://www.mindviewinc.com/downloads/pub/eckel/LovePython.zip</a>
</li>

<li>"Why I love Python" (presentation)<br />
<a href="http://www.slideshare.net/didip/why-i-love-python">http://www.slideshare.net/didip/why-i-love-python</a>
</li>

<li>První jazyk: Python<br />
<a href="http://macek.sandbox.cz/texty/prvni-jazyk-python/">http://macek.sandbox.cz/texty/prvni-jazyk-python/</a>
</li>

<li>Programovací jazyk Python<br />
<a href="http://www.py.cz/FrontPage">http://www.py.cz/FrontPage</a>
</li>

<li>Python &ndash; Wikipedia CS<br />
<a href="http://cs.wikipedia.org/wiki/Python">http://cs.wikipedia.org/wiki/Python</a>
</li>

<li>IPython<br />
<a href="http://en.wikipedia.org/wiki/Ipython">http://en.wikipedia.org/wiki/Ipython</a>
</li>

<li>IPython: an interactive computing environment<br />
<a href="http://ipython.scipy.org/moin/">http://ipython.scipy.org/moin/</a>
</li>

<li>Category:Python<br />
<a href="http://rosettacode.org/wiki/Category:Python">http://rosettacode.org/wiki/Category:Python</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a></li>

<li>Language Poster (O'Reilly):<br />
<a href="http://www.oreilly.com/news/graphics/prog_lang_poster.pdf">http://www.oreilly.com/news/graphics/prog_lang_poster.pdf</a></li>

<li>Informace o Comenius Logu:<br />
<a href="http://www.comlogo.input.sk/index.html">http://www.comlogo.input.sk/index.html</a></li>

<li>Stránka nabízející stažení Comenius Loga:<br />
<a href="http://www.comlogo.input.sk/nastiahnutie.html">http://www.comlogo.input.sk/nastiahnutie.html</a></li>

<li>Seminární práce o Comenius Logu:<br />
<a href="http://nwit.pedf.cuni.cz/rotal9ap/logo/">http://nwit.pedf.cuni.cz/rotal9ap/logo/</a></li>

<li>Informace o LEGO/Logu:<br />
<a href="http://education.otago.ac.nz/nzlnet/Logo/legologo.html">http://education.otago.ac.nz/nzlnet/Logo/legologo.html</a></li>

<li>Informace o systému Elica:<br />
<a href="http://www.elica.net/site/index.html">http://www.elica.net/site/index.html</a></li>

<li>Informace o systému NetLogo:<br />
<a href="http://ccl.northwestern.edu/netlogo/">http://ccl.northwestern.edu/netlogo/</a></li>

<li>Stažení NetLoga:<br />
<a href="http://ccl.northwestern.edu/netlogo/download.shtml">http://ccl.northwestern.edu/netlogo/download.shtml</a></li>

<li>Uživatelský manuál NetLoga ve formátu PDF:<br />
<a href="http://ccl.northwestern.edu/netlogo/docs/NetLogo%20User%20Manual.pdf">http://ccl.northwestern.edu/netlogo/docs/NetLogo%20User%20Manual.pdf</a></li>

<li>NetLogo FAQ:<br />
<a href="http://ccl.northwestern.edu/netlogo/docs/faq.html">http://ccl.northwestern.edu/netlogo/docs/faq.html</a></li>

<li>Domácí stránka Daniela Azumy (autora implementace Turtle Tracks):<br />
<a href="http://alumnus.caltech.edu/~dazuma/home/">http://alumnus.caltech.edu/~dazuma/home/</a></li>

<li>Informace o <i>aUCBLogu</i>:<br />
<a href="http://www.physik.uni-augsburg.de/~micheler/">http://www.physik.uni-augsburg.de/~micheler/</a></li>

<li>Domácí stránka MSW Loga:<br />
<a href="http://www.softronix.com/logo.html">http://www.softronix.com/logo.html</a></li>

<li>Karel online<br />
<a href="http://karel.oldium.net/">http://karel.oldium.net/</a>
</li>

<li>EDU-SIG: Python in Education<br />
<a href="http://www.python.org/community/sigs/current/edu-sig/">http://www.python.org/community/sigs/current/edu-sig/</a>
</li>

<li>Guido van Robot<br />
<a href="http://en.wikipedia.org/wiki/Guido_van_Robot">http://en.wikipedia.org/wiki/Guido_van_Robot</a>
</li>

<li>The Guido van Robot Programming Language<br />
<a href="http://gvr.sourceforge.net/">http://gvr.sourceforge.net/</a>
</li>

<li>An Introduction to Programming with Karel J. Robot<br />
<a href="http://blog.thingoid.com/2003/10/karel-intro/">http://blog.thingoid.com/2003/10/karel-intro/</a>
</li>

<li>Teaching a young robot new tricks<br />
<a href="http://blog.thingoid.com/2003/11/karel-new-tricks/">http://blog.thingoid.com/2003/11/karel-new-tricks/</a>
</li>

<li>Karel and Company - More Robots<br />
<a href="http://blog.thingoid.com/2003/12/karel-and-company/">http://blog.thingoid.com/2003/12/karel-and-company/</a>
</li>

<li>Karel heads for the stars<br />
<a href="http://blog.thingoid.com/2004/03/karel-star/">http://blog.thingoid.com/2004/03/karel-star/</a>
</li>

<li>Karel programming language documentation<br />
<a href="http://mormegil.wz.cz/prog/karel/prog_doc.htm">http://mormegil.wz.cz/prog/karel/prog_doc.htm</a>
</li>

<li>Karel J. Robot<br />
<a href="http://www.mainlandregional.net/dklipp/Honors%20Computer%20Science%20Java.htm">http://www.mainlandregional.net/dklipp/Honors%20Computer%20Science%20Java.htm</a>
</li>

<li>Karel (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Karel_(programming_language)">http://en.wikipedia.org/wiki/Karel_(programming_language)</a>
</li>

<li>Richard E. Pattis<br />
<a href="http://en.wikipedia.org/wiki/Richard_E._Pattis">http://en.wikipedia.org/wiki/Richard_E._Pattis</a>
</li>

<li>XKarel home page<br />
<a href="http://xkarel.sourceforge.net/eng/">http://xkarel.sourceforge.net/eng/</a>
</li>

<li>XKarel - screenshoty oken<br />
<a href="http://xkarel.sourceforge.net/eng/program.php#Okna">http://xkarel.sourceforge.net/eng/program.php#Okna</a>
</li>

<li>Greenfoot<br />
<a href="http://www.greenfoot.org/about/whatis.html">http://www.greenfoot.org/about/whatis.html</a>
</li>

<li>Computer programming -- Educational programming languages<br />
<a href="http://www.kidslike.info/computer_programming_educational_programming_languages">http://www.kidslike.info/computer_programming_educational_programming_languages</a>
</li>

<li>Making Great Programmers: Why BASIC is Still Relevant<br />
<a href="http://kidbasic.sourceforge.net/en/why.html">http://kidbasic.sourceforge.net/en/why.html</a>
</li>

<li>Gambas Wiki<br />
<a href="http://en.wikibooks.org/wiki/Gambas">http://en.wikibooks.org/wiki/Gambas</a>
</li>

<li>Free tool offers 'easy' coding<br />
<a href="http://news.bbc.co.uk/2/hi/technology/6647011.stm">http://news.bbc.co.uk/2/hi/technology/6647011.stm</a>
</li>

<li>Základy želví grafiky<br />
<a href="http://www.root.cz/clanky/zaklady-zelvi-grafiky/">http://www.root.cz/clanky/zaklady-zelvi-grafiky/</a>
</li>

<li>Bill Kendrick's Web Turtle<br />
<a href="http://www.sonic.net/~nbs/webturtle/">http://www.sonic.net/~nbs/webturtle/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2011</small></p>
</body>
</html>

