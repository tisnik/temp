<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory V</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=iso-8859-2" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Forth a zásobníkové procesory V</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h2>Úvodník</h2>

<p>V dnešním pokračování seriálu o Forthu se již zaměříme na základní stavební
prvky tohoto zajímavého programovacího jazyka. Popíšeme si totiž princip
vytváření nových slov, které odpovídají procedurám, funkcím a operátorům známým
z jiných programovacích jazyků. Také si popíšeme slova použitá pro zápis
jednoduchých podmínek typu IF-THEN-ELSE a slova pro tvorbu počítaných cyklů -
programových smyček.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Paradigma programování ve Forthu</a><br />
<a href="#k02">2. Základní operace s obsahem zásobníku operandů</a><br />
<a href="#k03">3. Vytváření nových slov</a><br />
<a href="#k04">4. Podmínky</a><br />
<a href="#k05">5. Počítané cykly</a><br />
<a href="#k06">6. Poznámky</a><br />
<a href="#k07">7. Obsah dalšího pokračování</a><br />
</p>



<p><a name="k01" id="k01"></a></p>
<h2>1. Paradigma programování ve Forthu</h2>

<p>Programovací jazyk Forth přímo podporuje strukturované a modulární
programování, i když ponechává na každém vývojáři, zda bude či nebude tyto dva
mechanismy používat (podobně se chová Pascal, Céčko, Python apod.). Tento styl
programování vychází z následujících principů (viz například známé články od
Dijkstry):</p>

<ol>

<li>Každý program je popsán jako lineární sekvence modulů.</li>

<li>Každý modul má jeden vstupní bod a jeden bod výstupní. Modul by měl
vykonávat pouze jednu přesně specifikovanou funkci s jasně specifikovanou
množinou vstupních a výstupních hodnot.</li>

<li>Každý modul může obsahovat pouze následující jazykové struktury: odkazy
(volání) jiných modulů, smyčky (pouze uvnitř modulů) a rozhodovací struktury
typu IF-THEN, IF-THEN-ELSE, popř. SWITCH-CASE.</li>

</ol>

<p>Forth již z principu své práce neobsahuje příkaz <em>goto</em> ani žádnou
jeho alternativu - všechny příkazy pracují přísně lokálně. Pomocí několika
nových slov lze do Forthu zavést i principy OOP, tj. objektově orientovaného
programování.</p>

<p>V následujících kapitolách si popíšeme operace prováděné s datovými
položkami uloženými na zásobníku, princip tvorby nových slov a vestavěná slova
pro programování podmínek a cyklů.</p>



<p><a name="k02" id="k02"></a></p>
<h2>2. Základní operace s obsahem zásobníku operandů</h2>

<p>V předchozích dílech tohoto seriálu jsme si vysvětlili několik operací,
kterými lze ovládat obsah zásobníku operandů. Umíme již na zásobník ukládat
číselné hodnoty pouhým zadáním číselné konstanty, provádět základní matematické
operace a nakonec vytisknout hodnotu uloženou na vrcholu zásobníku operandů
pomocí interního slova <strong>.</strong> (tečka).</p>

<p>Vzhledem k tomu, že zásobník operandů tvoří ve Forthu ústřední místo
veškerého dění, je zapotřebí mít k dispozici i další operace, které mohou
manipulovat s datovými položkami na zásobníku uloženými. V některých případech
nám totiž nemusí vyhovovat pořadí položek uložených na zásobníku, položky je
nutné duplikovat, mazat apod. Z tohoto důvodu má jazyk Forth implementovány
následující základní operace (slova) nad zásobníkem, resp. nad jeho
obsahem:</p>



<h3>2.1 Slovo "swap"</h3>

<p>Pomocí tohoto slova se provede prohození nejvyšší a druhé nejvyšší datové
položky uložené na zásobníku. Pokud byly na zásobníku uložena čísla 1 a 2, je
po provedení tohoto slova na nejvyšších dvou pozicích zásobníku uložena
posloupnost 2 1. Následuje jednoduchý příklad použití:</p>

<p>Uložení dvou čísel na zásobník a jejich následný výpis na obrazovku, spolu s
odřádkováním pomocí slova <strong>cr</strong>:</p>

<pre>

1 2 . . cr

</pre>

<p>Uložení dvou čísel na zásobník, provedení slova <strong>swap</strong> a
následný výpis čísel na obrazovku:</p>

<pre>

1 2 swap . . cr

</pre>



<h3>2.2 Slovo "dup"</h3>

<p>Pomocí vestavěného slova <strong>dup</strong> se provede kopie (duplikace)
hodnoty uložené na vrcholu zásobníku. Velikost zásobníku se tedy o jednotku
zvětší. Toto slovo se využívá v mnoha případech, například pro přípravu na
matematickou operaci násobení dvěma, umocnění, předání parametru na zásobník
návratových adres apod. Ilustrační příklad použití této operace:</p>

<pre>

1 dup . . cr

</pre>

<p>V následující kapitole bude ukázáno, jakým způsobem se slovo
<strong>dup</strong> použije při výpočtu druhé mocniny.</p>



<h3>2.3 Slovo "drop"</h3>

<p>Opakem interního slova <strong>dup</strong> je slovo <strong>drop</strong>,
pomocí něhož se odstraní položka z vrcholu zásobníku. Toto slovo, jež se často
používá při "úklidu" po nějaké složitější operaci, je podobné slovu
<strong>.</strong> (tečka), avšak s tím rozdílem, že neprovádí výpis hodnoty
odstraňované položky. Příklad použití:</p>

<pre>

1 2 drop . cr

</pre>



<h3>2.4 Slovo "over"</h3>

<p>Slovo <strong>over</strong> se podobá výše popsanému slovu
<strong>dup</strong>, tj. provádí se kopie hodnoty uložené v zásobníku. V tomto
případě se však jedná o hodnotu uloženou <em>pod</em> vrcholem zásobníku,
nikoli o hodnotu uloženou přímo <em>na</em> vrcholu zásobníku. Chování této
funkce se nejlépe předvede na jednoduchém příkladu, který porovná význam
operací <strong>over</strong> a <strong>dup</strong>:</p>

<pre>

1 2 dup . . . cr
1 2 over . . . cr

</pre>



<h3>2.5 Slovo "rot"</h3>

<p>Slovo <strong>rot</strong> manipuluje hned se třemi položkami uloženými na
zásobníku. Jak již název tohoto slova napovídá, provádí se rotace položek a to
tak, že datová položka na třetí nejvyšší pozici v zásobníku operandů je vyjmuta
a uložena na jeho vrchol. Opět je vhodné si vyzkoušet jednoduchý příklad,
nejprve výpis tří položek bez rotace:</p>

<pre>

1 2 3 . . . cr

</pre>

<p>A následně s rotací:</p>

<pre>

1 2 3 rot . . . cr

</pre>



<h3>2.6 Manipulace s položkami uloženými na nižších úrovních v zásobníku</h3>

<p>Pro manipulaci s datovými položkami, které jsou na zásobníku uloženy ve
větší hloubce než tři je možné ve většině implementací Forthu použít slova
<strong>pick</strong> a <strong>roll</strong>. Jedná se ve své podstatě o
selektory podobné indexům do polí u jiných programovacích jazyků - pokud se
ovšem na zásobník díváme jako na dynamicky alokované pole s proměnnou
velikostí.</p>

<p>V reálných programech se však tato slova nevyskytují a jejich použití ani
není doporučováno, protože neodpovídá programovacímu stylu používanému ve
Forthu.</p>

<p>Pokud je zapotřebí získat či uložit informace do dalších míst na zásobníku,
je možné využít zásobník návratových adres (<em>return stack</em>) nebo použít
proměnných pro uložení dočasných hodnot. Většinou však potřeba zásahu do
hloubky zásobníku vychází ze špatného návrhu programu.</p>



<p><a name="k03" id="k03"></a></p>
<h2>3. Vytváření nových slov</h2>

<p>Forth místo funkcí, operací a řídicích struktur používá pouze
<strong>slova</strong>. Slova se zadávají z klávesnice, nebo ze vstupního
souboru a jsou určena svým jménem. Jméno je ve Forthu libovolný řetězec znaků,
který je oddělen (ukončen) mezerou nebo v novějších verzích libovolným "bílým
znakem". Každé volání funkce je ve Forthovském programu nahrazeno svým jménem
bez dalších znaků (závorek apod.), protože veškeré parametry funkce i její
návratová hodnota jsou uloženy na zásobníku.</p>

<p>Ve Forthu jsou rozeznávány tři typy slov: definovaná slova, nedefinovaná
slova a číselné konstanty. Základní slova, například operace se zásobníkem
popsané v předcházející kapitole, jsou většinou vytvořena přímo pomocí operací
napsaných v assembleru.</p>

<p>Definovaná slova jsou ukládána do slovníku (dictionary), který je většinou
implementován jako lineární seznam nebo jako zásobník. V multiuživatelských
systémech má každý uživatel k dispozici svůj slovník, přičemž existuje ještě
slovník společný.</p>

<p>První krok, který se před spuštěním Forthovských aplikací provádí, je
rozklad řetězců, které jsou zadané uživatelem nebo načtené z datového zařízení
(pevného disku, paměti EPROM apod.), do jednotlivých slov, což je operace
triviální (na rozdíl od prakticky všech ostatních programovacích jazyků, které
mají složitější syntaxi), protože za slova je považován souvislý řetězec
oddělený bílými znaky. Tomu, kdo psal lexikální analyzátory pro jazyky podobné
C-čku či Pascalu, je zřejmé že napsání základní lexikální analýzy pro Forth je
otázka několika řádků kódu.</p>

<p>Každé slovo v řetězcové podobě je následně vyhledáno ve slovníku. Pokud je
nalezeno, je proveden jeho kód (slovo je v paměti uloženo jako seznam ukazatelů
na další slova nebo primitivní operace). Pokud slovo ve slovníku nalezeno není,
je považováno za číslo, které je po převodu do binární podoby uloženo na
zásobník. Pokud převod na číselnou konstantu z nějakého důvodu selže, znamená
to, že jde o neznámé slovo, proto interpreter nahlásí chybu. Zde je opět vidět
syntaktická jednoduchost jazyka, který rozeznává pouze slova a numerické
hodnoty (operandy a řídicí struktury jsou také slova).</p>

<p>Pro vytváření nových slov se používají pouze dvě zabudovaná slova. Prvním
slovem je <strong>:</strong> (dvojtečka) a druhým slovem je <strong>;</strong>
(středník). Po zadání dvojtečky se interpretr Forthu přepne z režimu
<em>Execute</em> (přímého vykonávání zadávaných příkazů) do režimu
<em>Compile</em> (překlad nového slova). Naopak, po zadání středníku se
interpretr přepne z režimu <em>Compile</em> do režimu <em>Execute</em> (samotný
středník se přitom překládá jako <em>return</em>). Za slovem dvojtečka musí
následovat jméno nového slova.</p>

<p>Nově vytvořená slova se chovají stejným způsobem jako slova zabudovaná, tj.
jejich parametry se vybírají ze zásobníku a výsledek je taktéž uložen na
zásobník. V tom spočívá jedna z krásných vlastností Forthu, kdy je vytváření a
volání slov velmi jednoduché a rychlé. Ukažme si vytvoření nového slova
<strong>print</strong>, které vytiskne hodnotu uloženou na vrcholu zásobníku a
potom kurzor přesune na nový řádek:</p>

<pre>

: print
  .
  cr
;

</pre>

<p>Slovo print, které musí být od slova dvojtečky odděleno bílým znakem, tedy
vytiskne hodnotu uloženou na vrcholu zásobníku (to zajistí volání zabudovaného
slova tečka) a potom provede odřádkování pomocí interního slova
<strong>cr</strong>. Středník ukončí kompilaci nového slova a vrátí řízení
zpátky do režimu <em>Execute</em>. Můžeme ihned provést několik interaktivních
testů s nově vytvořeným slovem:</p>

<pre>

10 print
1 2 + print
1 2 3 * - print

</pre>

<p>Vzhledem k tomu, že je tělo slova <strong>print</strong> velmi krátké,
můžeme ho zapsat i na jeden řádek:</p>

<pre>

: print . cr ;

</pre>

<p>Příkladem složitějšího slova může být například <strong>mocnina</strong>.
Toto slovo vezme ze zásobníku hodnotu a na zásobník vrátí její druhou mocninu.
Slovo může vypadat následovně:</p>

<pre>

: mocnina dup * ;

</pre>

<p>Nejdříve se tedy provede duplikace hodnoty na vrcholu zásobníku. Poté se obě
(shodné) hodnoty ze zásobníku vyjmou, vynásobí a na zásobník se uloží výsledek
operace násobení. Použití tohoto slova je opět velmi jednoduché:</p>

<pre>

2 mocnina . cr
10 mocnina print

</pre>

<p>(na druhém programovém řádku používáme dříve vytvořené slovo
<strong>print</strong>)</p>



<p><a name="k04" id="k04"></a></p>
<h2>4. Podmínky</h2>

<p>Nedílnou součástí všech imperativních programovacích jazyků je i jazyková
konstrukce pro podmínky. Forth se k této problematice staví poněkud odlišným
způsobem: pro zápis podmínek používá tři slova, nejedná se tedy o speciální
jazykovou konstrukci, ale o mimořádně flexibilní mechanismus, který umožňuje
přidávat i další "strukturované" konstrukce bez zásahu do překladače.</p>

<p>Tři slova pro zápis podmínky jsou <strong>if</strong>, <strong>else</strong>
a <strong>then</strong>. Jejich použití (zejména umístění) se však již na první
pohled liší od jiných programovacích jazyků. Schematicky lze celou konstrukci
zapsat následovně:</p>

<pre>

logický_výraz
if
  příkazy_1_větve
else
  příkazy_2_větve
then

</pre>

<p>To znamená, že slovo <strong>then</strong> se zde spíš používá ve významu
<strong>endif</strong>. Výsledek logického výrazu musí být uložen na zásobník
operandů, odkud je při zavolání slova <strong>if</strong> vyjmut a je zjištěna
jeho hodnota. Při nenulové hodnotě (<em>true</em>) je vykonána první větev, při
nulové hodnotě větev druhá. Po vykonání jedné z obou větví běh programu
pokračuje slovem, které se nachází za <strong>then</strong>.</p>

<p>Zkrácená podoba podmínky bez druhé větve má tvar:</p>

<pre>

logický_výraz
if
  příkazy_1_větve
then

</pre>

<p>Příklady použití podmínek budou uvedeny v následujících částech tohoto
seriálu.</p>



<p><a name="k05" id="k05"></a></p>
<h2>5. Počítané cykly</h2>

<p>Forth patří mezi jazyky nižší úrovně; tyto jazyky jsou mimo jiné
charakteristické častým používáním počítaných a nepočítaných cyklů. U jazyků
vyšší úrovně, zejména jazyků funkcionálních se spíše setkáváme s použitím
rekurze a konstrukcí typu <strong>foreach</strong> (tj. skrytých smyček).</p>

<p>Jedním ze základních typů cyklů ve Forthu je smyčka typu
<strong>do-loop</strong>. Jedná se o počítanou smyčku, která zhruba odpovídá
smyčce <strong>for</strong> z Pascalu, Fortranu či Basicu. Podobnost klíčových
slov pro smyčku <strong>do-loop</strong> ve Forthu a C-čku svádí k jejich
záměně, v C-čku se ale jedná o nepočítanou smyčku s podmínkou, která se hodí
pro poněkud jiné operace než její Forthovská příbuzná.</p>

<p>Inicializace smyčky <strong>do-loop</strong> je jednoduchá - na zásobník
operandů se nejprve uloží dvě hodnoty. První hodnotou se specifikuje počet
opakování smyčky, druhou hodnotou (tj. hodnotou uloženou na vrcholu zásobníku)
pak počáteční hodnota.</p>

<p>Příkazy, které se mají ve smyčce opakovat, jsou umístěny uvnitř "příkazových
závorek" specifikovaných slovy <strong>do</strong> a <strong>loop</strong>.
Smyčka probíhá tak, že se aktuální hodnota počitadla ukládá na zásobník
návratových adres (<em>return stack</em>), na konci smyčky je pak tato hodnota
přesunuta na zásobník operandů, kde je počitadlo porovnáno s koncovou hodnotou.
Z toho vyplývá, že smyčka proběhne alespoň jednou, podobně jako smyčka typu
<em>do-while</em> v céčku nebo <em>repeat-until</em> v Pascalu.</p>

<p>Nejjednodušší forma smyčky <strong>do-loop</strong>, která se má opakovat
desetkrát, vypadá následovně:</p>

<pre>

10 1 do loop

</pre>

<p>Jak je z předchozího úryvku kódu patrné, bude se smyčka provádět desetkrát,
přičemž první hodnota počitadla bude rovna jednotce.</p>

<p>Uvnitř smyčky je možné používat speciální klíčové slovo <strong>i</strong>,
pomocí kterého se na zásobník operandů uloží aktuální hodnota počitadla smyčky.
Pokud by tedy měla smyčka proběhnout desetkrát a postupně vypisovat hodnotu
počitadla, může celý kód vypadat následovně:</p>

<pre>

: smycka1
    10 1 do
        i . cr
    loop
;

</pre>

<p>Jak je z předchozího programu patrné, vytvořili jsme nové slovo
<em>smycka1</em>, po jehož zavolání se smyčka desetkrát provede a vypíše
všechny hodnoty počitadla. Připomínám, že slovo <em>.</em> (tečka) slouží k
vypsání hodnoty uložené na vrcholu zásobníku a slovo <em>cr</em> provede
přechod na nový řádek.</p>

<p>Výše vytvořené slovo <em>smycka1</em> však není příliš flexibilní,
výhodnější by bylo vytvořit slovo, které provede smyčku <em>n</em>-krát s
různou počáteční hodnotou. To je možné provést jednoduchou úpravou kódu:</p>

<pre>

: smycka2
    do
        i . cr
    loop
;

</pre>

<p>Před provedením nově vytvořeného slova <em>smycka2</em> je nutné na zásobník
vložit počet opakování smyčky a počáteční hodnotu. Celé volání může vypadat
například takto:</p>

<pre>

10 1 smycka2

</pre>

<p>Všimněte si velké jednoduchosti vytvoření nového slova a způsobu "předávání
parametrů" přes zásobník. Nikde není zapotřebí pojmenovávat parametry, vytvářet
lokální proměnné ani používat závorky. Tento způsob předávání parametrů pracuje
samozřejmě pouze v případě, že se využívají čísla typu integer. V případě
použití jiných datových typů (například reálných čísel) je nutné pracovat se
zásobníkem nepřímo pomocí slov pro zpracování dalších datových typů.</p>

<p>Místo slova <strong>do</strong> je možné použít i slovo
<strong>?do</strong>, při jehož vyvolání se nejprve provede test, zda se
nerovná hodnota indexu a počáteční hodnoty. Pokud dojte k rovnosti, smyčka se
neprovede a běh programu pokračuje až za slovem <strong>loop</strong>.
Následující dva řádky tedy budou mít zcela odlišný efekt:</p>

<pre>

10 10 do i . cr loop
10 10 ?do i . cr loop

</pre>

<p>Poznámka: některé interpretery Forthu (například Atlast) nepovolí výše
uvedené smyčky použít v příkazu zapsaném na příkazovou řádku mimo definici
slova. V takovém případě je nutné smyčky uzavřít do jednoduchých slov a tato
slova následně vyvolat, např.:</p>

<pre>

: test1 10 10 do i . cr loop ;
: test2 10 10 ?do i . cr loop ;
test1 \ nutno ukončit například klávesou
      \ Ctrl+D, Ctrl+C, Ctrl+Break
      \ - podle zvyklostí OS
test2

</pre>



<p><a name="k06" id="k06"></a></p>
<h2>6. Poznámky</h2>

<p>Poznámky lze vytvářet pomocí dvou slov. Prvním slovem je <strong>\</strong>
(zpětné lomítko), od jehož výskytu až do konce řádku je text ignorován. Toto
slovo je tedy určeno pro vytváření jednořádkových poznámek:</p>

<pre>

1 2 + \ nyní sečteme dvě čísla

</pre>

<p>Druhý typ poznámek začíná slovem <strong>(</strong> (levá závorka). Text,
který je za závorkou zapsán (včetně znaků pro nový řádek) je ignorovaný až do
výskytu pravé závorky. Příklad:</p>

<pre>

2 dup *    ( provedeme výpočet
             druhé mocniny čísla)
</pre>

<p>Vzhledem k tomu, že oba typy poznámek jsou uvozeny slovy, musí být za těmito
slovy vždy alespoň jedna mezera nebo jiný bílý znak.</p>



<p><a name="k07" id="k07"></a></p>
<h2>7. Obsah dalšího pokračování</h2>

<p>Následující část tohoto seriálu bude věnována práci s proměnnými, základním
matematickým a logickým operacím, rozšířeným funkcím pro manipulaci se
zásobníkem a samozřejmě bude uvedeno větší množství demonstračních
příkladů.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small></p>
</body>
</html>

