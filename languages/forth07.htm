<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory VII</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Forth a zásobníkové procesory VII</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h2>Úvodník</h2>

<p>Dnešní část seriálu pojednávajícího o programovacím jazyku Forth je věnována
popisu nejčastěji prováděných matematických operací, manipulaci se zásobníkem
návratových adres (return stackem) a v neposlední řadě také způsobu práce s
konstantními hodnotami a poli.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Matematické operace</a><br />
<a href="#k02">2. Manipulace se zásobníkem návratových adres</a><br />
<a href="#k03">3. Rozšiřující funkce pro práci se zásobníkem operandů</a><br />
<a href="#k04">4. Číselné konstanty</a><br />
<a href="#k05">5. Pole konstantních hodnot</a><br />
<a href="#k06">6. Pole celočíselných hodnot</a><br />
<a href="#k07">7. Práce s řetězci</a><br />
<a href="#k08">8. Obsah dalšího pokračování</a><br />
</p>



<p><a name="k01" id="k01"></a></p>
<h2>1. Matematické operace</h2>

<p>Již v předchozích částech tohoto seriálu jsme si popsali některé matematické
operace, které lze provádět s hodnotami uloženými na zásobníku operandů. Dnes
si uvedeme soupis nejpoužívanějších matematických operací spolu s jejich
zásobníkovými diagramy. Připomínám, že v zásobníkovém diagramu se na jeho levé
straně zobrazuje obsah zásobníku operandů <strong>před</strong> provedením
operace a po dvojici znaků <tt>--</tt> obsah zásobníku operandů
<strong>po</strong> provedení popisované operace. Pro jednoduchost budu mezi
matematické operace zahrnovat i některé komparativní operace. V následujícím
seznamu budou názvy operací (tj. slov) uvedeny <strong>tučně</strong>,
zásobníkový diagram bude vypsán <tt>neproporcionálním textem</tt>.</p>

<ol>

<li><strong>0&lt;</strong> &nbsp; <tt>(N1 -- FLAG)</tt><br />
pokud je na vrcholu zásobníku uloženo záporné číslo, vrací se na zásobník
hodnota <em>TRUE</em> (-1), jinak <em>FALSE</em> (0). Původní hodnota je ze
zásobníku odstraněna.
</li>

<li><strong>0=</strong> &nbsp; <tt>(N1 -- FLAG)</tt><br />
pokud je na vrcholu zásobníku uložena nula, vrací se na zásobník hodnota
<em>TRUE</em> (-1), jinak <em>FALSE</em> (0). Původní hodnota je ze zásobníku
opět odstraněna, podobně jako při zavolání předchozího slova.
</li>

<li><strong>0&gt;</strong> &nbsp; <tt>(N1 -- FLAG)</tt><br />
pokud je na vrcholu zásobníku uloženo kladné nenulové číslo, vrací se na
zásobník operandů hodnota <em>TRUE</em>, jinak <em>FALSE</em>.
</li>

<li><strong>0BRANCH</strong> &nbsp; <tt>(N1 --)</tt><br />
pokud je na vrcholu zásobníku uložena nula, provede se skok (získaný z hodnoty
uvedené ihned za touto instrukcí/slovem). Tato operace je interně provedena
mnohem efektivněji, než porovnání a následný skok.
</li>

<li><strong>1+</strong> &nbsp; <tt>(N1 -- N2)</tt><br />
přičtení jedničky k hodnotě uložené na vrcholu zásobníku. Nahrazuje slova
<strong>1 +</strong>, je však interně implementováno efektivněji, mnohdy pomocí
jediné instrukce procesoru.
</li>

<li><strong>1-</strong> &nbsp; <tt>(N1 -- N2)</tt><br />
odečtení jedničky od hodnoty uložené na vrcholu zásobníku. Nahrazuje slova
<strong>1 -</strong>, ale opět s efektivnější implementací.
</li>

<li><strong>2+</strong> &nbsp; <tt>(N1 -- N2)</tt><br />
přičtení dvojky k hodnotě uložené na vrcholu zásobníku. Toto slovo lze použít
zejména ve smyčkách pro přístup do paměti či k indexování polí.
</li>

<li><strong>4+</strong> &nbsp; <tt>(N1 -- N2)</tt><br />
přičtení čtyřky k hodnotě uložené na vrcholu zásobníku. Nejčastější použití
tohoto slova spočívá opět ve vytváření smyček.
</li>

<li><strong>2*</strong> &nbsp; <tt>(N1 -- N2)</tt><br />
vynásobení hodnoty uložené na vrcholu zásobníku dvěma. Interně se většinou
provádí pomocí bitového posuvu.
</li>

<li><strong>2/</strong> &nbsp; <tt>(N1 -- N2)</tt><br />
vydělení hodnoty uložené na vrcholu zásobníku dvěma. Interně se provádí pomocí
bitového či aritmetického posuvu.
</li>

<li><strong>?DUP</strong> &nbsp; <tt>(N1 -- N1 N1)</tt> nebo <tt>(N1 -- N1)</tt><br />
pokud je na vrcholu zásobníku uložena nenulová hodnota, provede se operace
<strong>DUP</strong>. Toto slovo je velmi často používané, protože může mnohdy
nahradit podmíněný příkaz.
</li>

<li><strong>ABS</strong> &nbsp; <tt>(N1 -- N2)</tt><br />
výpočet absolutní hodnoty čísla uloženého na vrcholu zásobníku.
</li>

<li><strong>/MOD</strong> &nbsp; <tt>(N1 N2 -- N3 N4)</tt><br />
současné provedení dělení a výpočtu zbytku po dělení. Po provedení operace je
na vrcholu zásobníku operandů uložen výsledek dělení a na druhé pozici zbytek
po dělení. Jedná se o jednu z operací, kterou lze například na procesorech
Intel provést jedinou instrukcí a je škoda, že další programovací jazyky
podobnou jazykovou konstrukci neobsahují.
</li>

<li><strong>*/MOD</strong> &nbsp; <tt>(N1 N2 N3 -- N4 N5)</tt><br />
toto je jedno z mých nejoblíbenějších slov :-). Nejprve se provede vynásobení
hodnot N1 a N2 s tím, že výsledek je uložen ve dvojitém rozsahu, takže
nedochází k přetečení výsledků. Posléze je hodnota vzniklá násobením vydělena
hodnotou N3 a výsledek dělení je spolu se zbytkem po dělení zapsán zpět na
zásobník. Tuto instrukci lze velmi jednoduše a efektivně použít například pro
provádění operací s čísly reprezentovanými ve formátu pevné řádové tečky
(FX-fixed point).
</li>

<li><strong>U&lt;</strong> &nbsp; <tt>(U1 U2 -- FLAG)</tt><br />
porovnání dvou celých kladných čísel, které v tomto případě nejsou vyjádřeny ve
dvojkovém doplňku, a vrácení výsledku operace "je menší" zpět na zásobník
operandů.
</li>

<li><strong>U&gt;</strong> &nbsp; <tt>(U1 U2 -- FLAG)</tt><br />
porovnání dvou celých kladných čísel, které opět nejsou vyjádřeny ve dvojkovém
doplňku, a vrácení výsledku operace "je větší".
</li>

<li><strong>U*</strong> &nbsp; <tt>(N1 N2 -- D3)</tt><br />
vynásobení dvou celých kladných čísel a uložení výsledku na dvě pozice v
zásobníku (výsledek má dvojitý rozsah, typicky 0..2<sup>32</sup>-1).
</li>

<li><strong>U/MOD</strong> &nbsp; <tt>(D1 N2 -- N3 N4)</tt><br />
celočíselné dělení s vrácením výsledku dělení v N3 a zbytku v N4. Dělenec je
uložen na dvou pozicích zásobníku ve dvojitém rozsahu, dělitel má jednoduchý
rozsah.
</li>

<li><strong>WITHIN</strong> &nbsp; <tt>(N1 N2 N3 -- FLAG)</tt><br />
další z mých oblíbených slov. Provede se porovnání, zda hodnota N3 leží mezi
hodnotami N1 a N2, tj. zda platí nerovnost N1&lt;N3&lt;N2. Podle výsledku
porovnání se na zásobník operandů uloží buď hodnota <em>TRUE</em> nebo
<em>FALSE</em>. Pokud toto slovo není v nějaké implementaci Forthu přítomno,
může se jednoduše dodefinovat:<br />
<tt>: WITHIN  OVER - &gt;R - R&gt; U&lt; ;</tt>
</li>

</ol>



<p><a name="k02" id="k02"></a></p>
<h2>2. Manipulace se zásobníkem návratových adres</h2>

<p>Doposud jsme si ukazovali operace, které lze provádět se zásobníkem
operandů. Druhý Forthovský zásobník, tj. zásobník návratových adres, jsme
poněkud opomíjeli. To mělo své důvody, protože tento zásobník je používán
zejména pro uložení návratových adres slov (jak již naznačuje jeho název) a
jakákoli "nerovnováha" zde uložených hodnot může mít pro běžící program fatální
následky.</p>

<p>Na druhou stranu se však často vyskytují situace, kdy je zapotřebí nějakou
hodnotu odložit ze zásobníku operandů pro pozdější použití. K tomu účelu je
možné použít buď proměnné (což je neefektivní a ve Forthu prakticky nepoužívané
řešení) nebo právě zásobník návratových adres (viz předchozí deklarace slova
<strong>WITHIN</strong>). Pro práci s hodnotami uloženými na zásobníku
návratových adres jsou určena následující slova:</p>

<ol>

<li><strong>&gt;R</strong> &nbsp; <tt>(N -- )</tt><br />
přenesení hodnoty ze zásobníku operandů na zásobník návratových adres.
</li>

<li><strong>R&gt;</strong> &nbsp; <tt>( -- N)</tt><br />
přenesení hodnoty ze zásobníku návratových adres na zásobník operandů.
</li>

<li><strong>R@</strong> &nbsp; <tt>( -- N)</tt><br />
kopie hodnoty ze zásobníku návratových adres na zásobník operandů.
</li>

<li><strong>2&gt;R</strong> &nbsp; <tt>(D -- )</tt><br />
přenesení hodnot ze dvou pozic zásobníku operandů na dvě pozice v zásobníku
návratových adres.
</li>

<li><strong>2R&gt;</strong> &nbsp; <tt>( -- D)</tt><br />
přenesení hodnot ze dvou pozic na zásobníku návratových adres na zásobník
operandů.
</li>

<li><strong>2R@</strong> &nbsp; <tt>( -- D)</tt><br />
kopie dvou hodnot ze zásobníku návratových adres.
</li>

</ol>

<p>Je samozřejmě možné přímo ze zásobníku návratových adres vyčíst návratovou
adresu volajícího slova a dále ji různým způsobem upravovat, či na něj naopak
vložit nějakou adresu, na kterou program při návratu z aktuálně prováděného
slova skočí. Tento způsob programování však již vyžaduje pokročilé znalosti
interních struktur Forthu, zejména implementace slovníku a adresové
aritmetiky.</p>



<p><a name="k03" id="k03"></a></p>
<h2>3. Rozšiřující funkce pro práci se zásobníkem operandů</h2>

<p>Ve většině implementací Forthu jsou k dispozici následující operace (slova),
které pracují s hodnotami uloženými na zásobníku operandů. Tato slova jsou
určena zejména pro práci s celočíselnými hodnotami s dvojitým rozsahem, než je
rozsah základních celočíselných hodnot. Z toho důvodu je každá hodnota s
dvojitým rozsahem rozložena na zásobníku do dvou položek. Tradiční Forthy
pracují s šestnáctibitovými hodnotami, to znamená, že čísla s dvojitým rozsahem
mají délku 32 bitů (včetně znaménka, protože formát uložení je ve dvojkovém
doplňku). Pro tato čísla jsou k dispozici následující operace:</p>

<ol>

<li><strong>2DROP</strong> (někdy také označeno jako <strong>DDROP</strong>) -
tato operace odstraní ze zásobníku operandů jednu hodnotu uloženou ve dvojitém
rozsahu. Ve skutečnosti se tedy dvakrát provede slovo <strong>DROP</strong>.
Zásobníkový diagram této operace je <tt>(D1 -- )</tt>, kde <em>D1</em> značí
hodnotu ve dvojitém rozsahu.</li>

<li><strong>2DUP</strong> (někdy také <strong>DDUP</strong>) - tato operace
duplikuje na zásobníku operandů hodnotu uloženou ve dvojitém rozsahu. Tuto
operace lze naprogramovat s využitím slov <strong>OVER</strong>. Zásobníkový
diagram této operace lze zapsat následovně: <tt>(D1 -- D1 D1)</tt>.</li>

<li><strong>2NEGATE</strong> (někdy také <strong>DNEGATE</strong>) - pomocí
této operace se vyčíslí dvojkový doplněk hodnoty uložené na vrcholu zásobníku
ve dvojitém rozsahu. Zásobníkový diagram: <tt>(D1 -- D2)</tt>.</li>

<li><strong>2SWAP</strong> (někdy také <strong>DSWAP</strong>) - prohození dvou
hodnot uložených ve dvojitém rozsahu. Zásobníkový diagram tohoto slova lze
zapsat: <tt>(D1 D2 -- D2 D1)</tt>. Toto slovo lze samozřejmě využít i při práci
s čísly v jednoduchém rozsahu:<br /> <tt>1 2 3 4 2SWAP . . . . cr</tt></li>

<li><strong>D+</strong> - součet dvou hodnot uložených ve dvojitém rozsahu a
uložení výsledku operace zpět na zásobník. Tuto operaci lze popsat zásobníkovým
diagramem <tt>(D1 D2 -- D3)</tt>.</li>

<li><strong>D!</strong> - uložení číselné hodnoty ve dvojité přesnosti ze
zásobníku operandů do paměti. Zásobníkový diagram: <tt>(D1 ADDR -- )</tt>.</li>

<li><strong>D@</strong> - načtení číselné hodnoty ve dvojité přesnosti z paměti
do zásobníku operandů. Zásobníkový diagram: <tt>(ADDR -- D1)</tt>.</li>

<li><strong>D&lt;</strong> - porovnání dvou čísel uložených ve dvojité
přesnosti.</li>

<li><strong>D&gt;</strong> - porovnání dvou čísel uložených ve dvojité
přesnosti.</li>

<li><strong>D&gt;S</strong> - převod čísla uloženého ve formátu dvojité
přesnosti na číslo uložené v jednoduché přesnosti.</li>

<li><strong>DMIN</strong> - vyjme ze zásobníku dvě čísla ve dvojitém rozsahu a
uloží zpět na zásobník číslo s menší hodnotou. Toto slovo lze naprogramovat
následovně:<br />
<tt>: DMIN ( d1 d2 -- d1 | d2) 2OVER 2OVER D&lt; NOT IF 2SWAP THEN 2DROP ;</tt></li>

<li><strong>DMAX</strong> - opak předchozího slova: vyjme ze zásobníku dvě
čísla ve dvojitém rozsahu a uloží zpět na zásobník číslo s větší hodnotou.
Vytvoření tohoto slova je opět jednoduché:<br />
<tt>: DMAX ( d1 d2 -- d1 | d2) 2OVER 2OVER D&lt; IF 2SWAP THEN 2DROP ;</tt></li>

</ol>

<p>Dále jsou k dispozici slova <strong>TUCK</strong> se zásobníkovým diagramem
<tt>(N1 N2 -- N2 N1 N2)</tt>, <strong>NIP</strong> s diagramem <tt>(N1 N2 --
N2)</tt> a <strong>-ROT</strong> s diagramem <tt>(N1 N2 N3 -- N3 N1 N2)</tt>,
které doplňují repertoár slov pro manipulaci s obsahem zásobníku operandů po
jednotlivých položkách: celkově je tedy možné používat slova
<strong>DUP</strong>, <strong>SWAP</strong>, <strong>OVER</strong>,
<strong>ROT</strong>, <strong>-ROT</strong>, <strong>DROP</strong>,
<strong>TUCK</strong> a <strong>NIP</strong> (to se krásně rýmuje).</p>



<p><a name="k04" id="k04"></a></p>
<h2>4. Číselné konstanty</h2>

<p>Číselné konstanty (tj. neměnné hodnoty jednoduchého rozsahu) se vytváří
velmi jednoduše pomocí slova <strong>constant</strong> následující
konstrukcí:</p>

<pre>

hodnota constant jméno_konstanty

</pre>

<p>například:</p>

<pre>

1048576 constant megabyte

</pre>

<p>Hodnota však nemusí být nutně vyjádřena pouze číslem, je možné použít i
složitější výraz:</p>

<pre>

1024 1024 * constant megabyte

</pre>

<p>Podobně jako ve všech programovacích jazycích zvyšuje použití konstant
čitelnost i modifikovatelnost vytvářených programů. Podle platformy, na které
Forth běží mohou mít číselné konstanty rozsah 16ti bitů nebo 32 bitů (viz
předchozí příklad). V každém případě je však konstanta uložena v jedné buňce
(<em>cell</em>).</p>



<p><a name="k05" id="k05"></a></p>
<h2>5. Pole konstantních hodnot</h2>

<p>V mnoha případech je nutné pracovat s konstantami, které jsou uloženy do
pole. Může se jednat například o pole, ve kterém jsou uloženy kódy barev, počty
dnů v jednotlivých měsících apod. Pro tyto účely Forth umožňuje vytváření polí
konstantních hodnot, jejichž položky se velmi snadno zapisují pomocí slova
<strong>CREATE</strong> a <strong>,</strong> (čárka). Vytvoření pole s
konstantami vypadá následovně:</p>

<pre>

create název_pole hodnota1 , hodnota2 , hodnota3 ,

</pre>

<p>Při zápisu si musíme uvědomit, že <strong>,</strong> (čárka) je slovo, nemá
tedy žádný jiný význam. Z toho důvodu je nutné mezi čárkou a hodnotou vložit
alespoň jeden bílý znak, typicky mezeru. Vytvoření pole konstant může v praxi
vypadat například následovně:</p>

<pre>

create pole 10 , 20 , 30 , 35 , 100 ,

</pre>

<p>Prvky se z pole konstant čtou pomocí následující konstrukce:</p>

<pre>

název_pole index cells + @

</pre>

<p>Vysvětlení této konstrukce bude uvedeno v následující kapitole.</p>



<p><a name="k06" id="k06"></a></p>
<h2>6. Pole celočíselných hodnot</h2>

<p>Pole celočíselných hodnot je velmi často používaná datová struktura. Forth
se od ostatních programovacích jazyků odlišuje zejména způsobem přístupu k
jednotlivým prvkům pole. Ostatní jazyky používají indexaci, kdy je v kulatých
či hranatých závorkách zapsána hodnota specifikující pořadí čteného či
zapisovaného prvku. Forth se chová podobně jako C-čko, protože povoluje přístup
k jednotlivým prvkům přes jejich adresu, která je získána součtem počáteční
adresy pole a indexu prvku pole.</p>

<p>Pole lze ve Forthu vytvořit následujícím způsobem:</p>

<pre>

create název_pole počet_prvků cells allot

</pre>

<p>Slovo <strong>CELLS</strong> převádí číselnou hodnotu uloženou na zásobníku
na hodnotu reprezentující počet adresovatelných buněk paměti (<em>cells</em>),
což typicky znamená vynásobení uložené hodnoty dvěma nebo čtyřmi, podle použité
architektury počítače. Pomocí tohoto slova lze obejít závislost vytvářeného
programu na použitém procesoru, v mnohém se tedy podobá C-čkovské konstrukci
<em>sizeof(int)</em> nebo <em>sizeof(void *)</em>. Slovo <strong>ALLOT</strong>
provede alokaci požadovaného počtu buněk, jde tedy o obdobu funkce
<em>malloc()</em>.</p>

<p>Zápis hodnoty do pole je možné provést následujícím příkazem:</p>

<pre>

hodnota název_pole index cells + !

</pre>

<p>Uvedený zápis sice na první pohled vypadá složitě, jeho stavba je však
naprosto logická. Nejprve se na zásobník uloží hodnota, která se má posléze
zapsat do pole. Potom se na zásobník uloží adresa počátku pole a index prvku,
na který se má provést zápis. Tento index je převeden na počet buněk a sečten s
adresou začátku pole. Nyní je tedy na zásobníku uložena pouze hodnota a adresa.
Vlastní zápis se provede pomocí nám již známého slova <strong>!</strong>
(store). Toť vše, kromě odlišného zápisu se provádí naprosto stejná operace,
jako v jiných programovacích jazycích, ovšem s tím rozdílem, že ve Forthu je
nutné násobit index velikostí adresovatelné buňky.</p>

<p>Čtení hodnoty z pole se provádí obdobným způsobem, jako zápis:</p>

<pre>

název_pole index cells + @

</pre>

<p>Po provedení výše uvedeného kódu se na zásobník operandů uloží hodnota z
vybraného prvku pole.</p>

<p>Pro ilustraci si můžeme uvést konkrétní příklad:</p>

<pre>

create pole 20 cells allot
10 pole 5 cells + !
pole 5 cells + @
. cr

</pre>



<p><a name="k07" id="k07"></a></p>
<h2>7. Práce s řetězci</h2>

<p>Manipulace s řetězci dnes patří mezi základní operace, které by měl každý
programovací jazyk zvládat. Forth samozřejmě není výjimkou, je však nutné
přiznat, že podpora práce s řetězci je ve Forthu dosti těžkopádná a v žádném
případě nesnese srovnání například s Basicem či dokonce Perlem. Řetězce jsou ve
Forthu používány podobně jako v klasickém Pascalu - jedná se o pole
jednobytových položek, kde první položka obsahuje délku řetězce. Z toho také
vyplývá, že maximální počet znaků, které lze do jednoho řetězce uložit, je 255
(2^8-1=255), toto pole má tedy maximální velikost 256 bytů.</p>

<p>To sice může z dnešního hlediska vypadat naprosto nedostatečně, Forth však
nikdy nebyl určen pro aplikace, ve kterých se hromadně pracuje s texty - to
ostatně cílové platformy (jednočipy, řídicí systémy apod.) ani neumožňují.
Samozřejmě existují rozšíření, kde se s textem (resp. s řetězci) dá pracovat
podobně jako v C-čku, ve Forthu přidání takového rozšíření znamená pouze
vytvoření několika vhodně naprogramovaných slov. Více informací o práci s
textem si uvedeme až v navazujícím pokračování tohoto seriálu.</p>



<p><a name="k08" id="k08"></a></p>
<h2>8. Obsah dalšího pokračování</h2>

<p>V následující části tohoto seriálu si probereme nejčastěji prováděné operace
s řetězci a také se začneme zabývat vstupně-výstupními operacemi.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small></p>
</body>
</html>

