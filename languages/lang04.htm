<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Základy programování ve Squeaku</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>



<body>

<h1>Základy programování ve Squeaku</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtvrté části seriálu o programovacích jazycích vhodných pro výuku programování částečně navážeme na část předchozí, protože si popíšeme další vlastnosti grafického uživatelského rozhraní Squeaku. Budeme se zabývat především funkcí oken Inspector, Explorer a System Browser. Dále se budeme zabývat samotnou syntaxí a sémantikou Squeaku &ndash; řekneme si například, které tři typy zpráv je možné v&nbsp;tomto programovacím jazyku používat při komunikaci mezi objekty.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Základní operace prováděné v&nbsp;GUI Squeaku</a></p>
<p><a href="#k02">2. Zobrazení atributů objektů v&nbsp;okně Inspector</a></p>
<p><a href="#k03">3. Zobrazení vlastností objektů v&nbsp;okně Explorer</a></p>
<p><a href="#k04">4. Okno System Browser</a></p>
<p><a href="#k05">5. Okno Hierarchy Browser</a></p>
<p><a href="#k06">6. Objektově orientované programování ve Squeaku</a></p>
<p><a href="#k07">7. Posílání zpráv</a></p>
<p><a href="#k08">8. Tři typy zpráv posílaných objektům</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Základní operace prováděné v&nbsp;GUI Squeaku</h2>

<p>V&nbsp;předchozí části seriálu o programovacích jazycích vhodných či dokonce
přímo vytvořených pro výuku programování jsme se seznámili se základními
vlastnostmi programovacího jazyka <i>Squeak</i> i jeho vývojového a běhového
prostředí založeného na projektu <i>Morphic</i>. Víme již, že definice všech
objektů používaných <i>Squeakem</i> jsou uloženy v&nbsp;jediném (neměnném)
zdrojovém souboru s&nbsp;koncovkou <strong>.source</strong>, změny oproti
původním definicím se průběžně ukládají do textového souboru s&nbsp;koncovkou
<strong>.changes</strong> a atributy objektů (tj.&nbsp;jejich datové složky)
jsou uloženy v&nbsp;binárním souboru majícím koncovku <strong>.image</strong>
&ndash; všechny objekty jsou tedy neustále &bdquo;živé&ldquo;, pouze se
v&nbsp;případě ukončení běhu <i>Squeaku</i> hibernují a mohou být kdykoli
obnoveny, a to dokonce na zcela jiné platformě, protože běhové prostředí
<i>Squeaku</i> obsahuje i platformně nezávislý virtuální stroj zpracovávající
velmi jednoduchý bajtkód.</p>

<a href="http://i.iinfo.cz/images/652/lang04-1.png"><img src="http://i.iinfo.cz/images/652/lang04-1-prev.png" width="370" height="210" alt=" " /></a>
<p><i>Obrázek 1: Změnový soubor (.changes) vygenerovaný Squeakem na platformě
Wintel.</i></p>

<p>Výše popsanému principu se, i když poněkud vzdáleně, podobá například
serializace všech objektů aktivních ve virtuálním stroji jazyka Java (JVM
&ndash; Java Virtual Machine), ovšem <i>Squeak</i> je v&nbsp;několika ohledech
poněkud pružnější, mj.&nbsp;i díky tomu, že samotné třídy jsou objekty (každá
třída je instancí takzvané <i>metatřídy</i>, což je pojem, který si vysvětlíme
později). Minule jsme se taktéž ve stručnosti seznámili s&nbsp;grafickým
uživatelským rozhraním <i>Squeaku</i> založeného na projektu <i>Morphic</i>,
které je navrženo tak, aby bylo přenositelné a chovalo se do co největší míry
stejně či alespoň velmi podobně i na zcela odlišných platformách, zařízeními
PDA a SmartPhony s&nbsp;malým displejem i výpočetním výkonem počínaje, přes
běžné osobní počítače až po výkonné superpočítače.</p>

<a href="http://i.iinfo.cz/images/652/lang04-2.png"><img src="http://i.iinfo.cz/images/652/lang04-2-prev.png" width="361" height="270" alt=" " /></a>
<p><i>Obrázek 2: Ukázka některých možností grafického uživatelského rozhraní
Squeaku.</i></p>

<p>Z&nbsp;poměrně velkého množství různých typů oken nabízených tímto
prostředím jsme si ukázali a popsali základy použití okna
<strong>Workspace</strong>, které lze považovat za interaktivní konzoli, do níž
je možné zapisovat příkazy a ty následně spouštět a taktéž okna
<strong>Transcript</strong>. Toto okno si můžeme poněkud zjednodušeně
představit jako standardní terminálový výstup, do nějž mohou různé procesy (či
přesněji řečeno vlákna) zapisovat libovolné informace, například posláním
zprávy se selektorem <strong>show:</strong> objektu
<strong>Transcript</strong>. Jakým způsobem je toto poslání zprávy provedeno se
dozvíme v&nbsp;následujících kapitolách; jedná se totiž o základní operaci,
která se v&nbsp;programech psaných ve <i>Squeaku</i> provádí.</p>

<a href="http://i.iinfo.cz/images/652/lang04-3.png"><img src="http://i.iinfo.cz/images/652/lang04-3-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 3: Ve Squeaku lze vytvářet i grafické tvary, které se chovají
jako plnohodnotné objekty.</i></p>



<p><a name="k02"></a></p>
<h2>2. Zobrazení atributů objektů v&nbsp;okně Inspector</h2>

<p>Okno <strong>Workspace</strong>, které bylo popsané v&nbsp;předchozí části
tohoto seriálu, slouží nejenom pro editaci a spouštění uživatelem zapsaných
příkazů, ale je možné ho taktéž použít k&nbsp;vyvolání mnoha dalších více či
méně užitečných operací.</p>

<a href="http://i.iinfo.cz/images/652/lang04-4.png"><img src="http://i.iinfo.cz/images/652/lang04-4-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 4: Otevření okna Workspace z&nbsp;World Menu vyvolaného většinou
levým tlačítkem myši na pracovní ploše Squeaku.</i></p>

<p>Již v&nbsp;předchozí části tohoto seriálu jsme si řekli, že zapsané příkazy
lze spouštět buď z&nbsp;kontextového menu vyvolaného &bdquo;modrým&ldquo;,
tj.&nbsp;většinou pravým tlačítkem myši příkazem <strong>do it</strong> nebo
pomocí klávesové zkratky <strong>CTRL+d</strong> (používá se malé písmeno
&bdquo;d&ldquo;, protože prostředí <i>Squeaku</i> při vyhodnocování klávesových
zkratek rozlišuje mezi kombinací <strong>CTRL+písmeno</strong> a
<strong>CTRL+PÍSMENO</strong>). Dalším již popsaným příkazem je příkaz
<strong>print it</strong> mající klávesovou zkratku <strong>CTRL+p</strong>,
který spolupracuje s&nbsp;oknem <strong>Transcript</strong>.</p>

<a href="http://i.iinfo.cz/images/652/lang04-5.png"><img src="http://i.iinfo.cz/images/652/lang04-5-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 5: Zápis příkazu &ndash; poslání zprávy objektu
Transcript.</i></p>

<p>Následujícím příkazem dostupným z&nbsp;okna <strong>Workspace</strong>,
který je velmi užitečný a taktéž často používaný, je příkaz <strong>inspect
it</strong>. Tento příkaz lze vyvolat jak z&nbsp;kontextového menu (viz obrázek
číslo 6), tak i pomocí klávesové zkratky <strong>CTRL+i</strong>. Příkaz
<strong>inspect it</strong> slouží k&nbsp;zobrazení nového okna
<strong>Inspector</strong> pro objekt, na němž se nachází kurzor (tento objekt
je barevně zvýrazněn).</p>

<a href="http://i.iinfo.cz/images/652/lang04-6.png"><img src="http://i.iinfo.cz/images/652/lang04-6-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 6: Vyvolání okna Inspector z&nbsp;kontextového menu.</i></p>

<p>Okno <strong>Inspector</strong> je rozděleno do tří sekcí, které můžeme
vidět na obrázku číslo 7. V&nbsp;levé horní sekci se nachází seznam všech
atributů objektu, v&nbsp;pravé horní sekci aktuální hodnota vybraného atributu
(samozřejmě pouze v&nbsp;tom případě, pokud je nějaký atribut vybrán) a
v&nbsp;sekci spodní se nachází textové pole, do nějž lze zadávat libovolné
zprávy posílané vybranému objektu (v&nbsp;tomto případě se využívá klíčové
slovo <strong>self</strong> zastupující vybraný objekt). Tímto způsobem lze
například jednoduše otestovat chování objektu nebo dokonce měnit chování celého
vývojového prostředí (samozřejmě pokud se pošlou zprávy těm správným objektům
:-). Poznamenejme, že okno <strong>Inspector</strong> je možné vyvolat i
z&nbsp;několika dalších míst grafického uživatelského rozhraní <i>Sqeaku</i>,
například je dostupné i pro geometrické tvary umístěné na pracovní ploše,
protože i tyto prvky jsou ve <i>Sqeaku</i> považovány za plnohodnotné objekty
s&nbsp;atributy a metodami.</p>

<a href="http://i.iinfo.cz/images/652/lang04-7.png"><img src="http://i.iinfo.cz/images/652/lang04-7-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 7: Zobrazené názvy a hodnoty atributů objektu.</i></p>



<p><a name="k03"></a></p>
<h2>3. Zobrazení vlastností objektů v&nbsp;okně Explorer</h2>

<p>Dalším typem okna, které se v&nbsp;několika ohledech podobá výše popsanému
oknu <strong>Inspect</strong>, je okno nazvané příhodně
<strong>Explorer</strong>. Toto okno lze vyvolat
z&nbsp;<strong>Workspace</strong> (ale i z&nbsp;několika dalších typů oken)
stiskem klávesové zkratky <strong>CTRL+I</strong> (zde je mimochodem vidět
rozdíl mezi klávesovou zkratkou <strong>CTRL+i</strong> a
<strong>CTRL+I</strong>) nebo pomocí kontextového menu takovým způsobem, jaký
je naznačen na následujícím obrázku. Okno <strong>Explorer</strong> je
rozděleno na dvě části. Dolní část je shodná s&nbsp;textovým polem okna
<strong>Inspect</strong> a v&nbsp;horní části se nachází strom s&nbsp;atributy
objektu. V&nbsp;některých případech je atribut ve stromu reprezentován více
způsoby &ndash; zkuste si například vyvolat menu <strong>Explorer</strong> nad
celočíselnou konstantou (která je ve <i>Sqeaku</i> taktéž plnohodnotným
objektem) s&nbsp;jediným atributem, jímž je samotná hodnota, nebo nad objektem
<strong>Workspace</strong>, který mj.&nbsp;obsahuje i celočíselný atribut
<i>format</i>. Některé další typy atributů, například barva objektu či barva
jeho obrysu, může být reprezentována graficky.</p>

<a href="http://i.iinfo.cz/images/652/lang04-8.png"><img src="http://i.iinfo.cz/images/652/lang04-8-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 8: Vyvolání okna Explorer z&nbsp;kontextového menu.</i></p>

<p>Podobně jako v&nbsp;případě výše popsaného okna <strong>Inspect</strong>, i
zde je možné pro každý atribut (jenž je objektem) vyvolat k&nbsp;němu vázané
okno <strong>Inspect</strong> nebo <strong>Explorer</strong>. Pro první možnost
postačuje provést dvojklik na příslušném atributu, druhou možnost lze vyvolat
z&nbsp;kontextového menu nebo klávesovou zkratkou. Pokud jste si vyzkoušeli
možnosti oken <strong>Explorer</strong> a <strong>Inspector</strong>, jistě
jste si všimli, že některé jejich funkce jsou buď podobné nebo zcela totožné.
Jedná se o jednu z&nbsp;poměrně typických vlastností <i>Squeaku</i>, která
spočívá v&nbsp;tom, že nějakou operaci lze provést z&nbsp;několika různých míst
a mnohdy i navzájem odlišnými způsoby; záleží pouze na uživateli (či
programátorovi), který způsob preferuje nebo který mu v&nbsp;dané chvíli lépe
vyhovuje. Tento přístup má tu výhodu, že uživatel většinou nemusí nějakou
operaci, o níž ví, že existuje, složitě hledat &ndash; většinou ji nalezne
v&nbsp;nejbližším kontextovém menu :-)</p>

<a href="http://i.iinfo.cz/images/652/lang04-9.png"><img src="http://i.iinfo.cz/images/652/lang04-9-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 9: Zkoumání objektu v&nbsp;okně Explorer.</i></p>



<p><a name="k04"></a></p>
<h2>4. Okno System Browser</h2>

<p>Velmi důležitým typem okna, které bylo mimochodem převzato i do několika
dalších vývojových prostředí, je okno nazvané <strong>System Browser</strong>.
Toto okno slouží pro vyhledávání a prohlížení tříd, jejich metod, hierarchie,
zděděných metod atd. <strong>System Browser</strong> lze vyvolat buď
z&nbsp;kontextového menu (viz obrázek číslo 10), nebo z&nbsp;mnoha míst
vývojového prostředí, například z&nbsp;okna <strong>Workspace</strong> (což je
mimochodem jedna z&nbsp;nejjednodušších možností, jak najít nějakou třídu),
pomocí klávesové zkratky <strong>CTRL+B</strong>. Okno <strong>System
Browseru</strong> obsahuje několik různých sekcí, z&nbsp;nichž nejdůležitější
je čtveřice seznamů zobrazená v&nbsp;jeho horní části. V&nbsp;prvním seznamu
jsou vypsány takzvané <i>kategorie</i>, do nichž jsou rozděleny všechny
dostupné třídy. Ve druhém seznamu se zobrazují třídy spadající do vybrané
kategorie. Třetí seznam obsahuje výpis <i>protokolů</i> pro vybranou třídu
&ndash; protokol přitom odpovídá skupině metod se stejným či podobným významem
&ndash; stejně jako jsou příbuzné třídy seskupeny do <i>kategorií</i>, jsou
příbuzné metody každé třídy seskupeny do <i>protokolů</i>.</p>

<a href="http://i.iinfo.cz/images/652/lang04-10.png"><img src="http://i.iinfo.cz/images/652/lang04-10-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 10: Vyvolání okna Browser z&nbsp;kontextového menu.</i></p>

<p>Na samotném začátku seznamu protokolů je uveden pseudoprotokol nazvaný
<i>--all--</i>, pod nějž spadají všechny metody vybrané třídy (u tříd
s&nbsp;malým počtem metod se protokoly ani nedefinují, takže automaticky
&bdquo;padnou&ldquo; do pseudoprotokolu <i>--all--</i>). Pokud je při vyvolání
<strong>System Browseru</strong> kurzor umístěn na identifikátoru objektu
(například v&nbsp;okně <strong>Workspace</strong>), je příslušná třída
v&nbsp;<strong>System Browseru</strong> automaticky vybrána; v&nbsp;opačném
případě je nejdříve zapotřebí vybrat příslušnou kategorii i třídu,
popř.&nbsp;použít možnost hledání třídy podle jejího názvu. Povšimněte si
taktéž, že po výběru nějaké kategorie, třídy, protokolu či metody se ve spodní
části okna <strong>System Browser</strong> zobrazuje dokumentace přidaná ke
třídě nebo přímo zdrojový kód vybrané metody. Například při výběru třídy
<strong>SmallInteger</strong>, která je umístěna v&nbsp;kategorii
<strong>Kernel-Numbers</strong>, se vypíše následující text (nebo podobný text,
v&nbsp;závislosti na konkrétní verzi <i>Squeaku</i>):</p>

<pre>
My instances are 31-bit numbers, stored in twos complement form.
The allowable range is approximately +- 1 billion (see SmallInteger minVal, maxVal).
</pre>

<p>Pokud dále vybereme metodu <strong>=</strong> (tj.&nbsp;vlastně implementaci
operátoru ekvivalence), můžeme se o ní dozvědět tyto údaje:</p>

<pre>
= aNumber 
        "Primitive. Compare the receiver with the argument and answer true if
        the receiver is equal to the argument. Otherwise answer false. Fail if the
        argument is not a SmallInteger. Essential. No Lookup. See Object
        documentation whatIsAPrimitive. "

        &lt;primitive: 7&gt;
        ^super = aNumber
</pre>

<a href="http://i.iinfo.cz/images/652/lang04-11.png"><img src="http://i.iinfo.cz/images/652/lang04-11-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 11: Kategorie tříd, seznam tříd ve vybrané kategorii, seznam
protokolů pro vybranou třídu a seznam metod pro daný protokol.</i></p>



<p><a name="k05"></a></p>
<h2>5. Okno Hierarchy Browser</h2>

<p>S&nbsp;oknem <strong>System Browser</strong> popsaným v&nbsp;předchozí
kapitole poměrně úzce souvisí i další typ okna &ndash; <strong>Hierarchy
Browser</strong>. Každá třída, která se v&nbsp;prostředí <i>Squeaku</i>
nachází, totiž spadá do jednotné hierarchie, kterou je možné jednoduše zobrazit
právě pomocí tohoto typu okna. <strong>Hierarchy Browser</strong> lze vyvolat
například přímo ze <strong>System Browseru</strong> po stisku tlačítka
<i>Hierarchy</i>, které se stane aktivní ve chvíli, kdy je vybrána nějaká
třída. Funkce okna <strong>Hierarchy Browser</strong> se v&nbsp;mnoha ohledech
podobá předchozímu oknu, tj.&nbsp;pro každou třídu ve vybrané hierarchii se
zobrazí seznam jejich protokolů a taktéž seznam metod spadajících do vybraného
protokolu (i další ovládací prvky jsou prakticky shodné). Příklad jednoduché
hierarchie objektů je zobrazen na dvanáctém obrázku. Jedná se o všechny třídy,
které jsou předky třídy <strong>SmallInteger</strong>, tj.&nbsp;třídy jejíž
instance představují celočíselné hodnoty.</p>

<a href="http://i.iinfo.cz/images/652/lang04-12.png"><img src="http://i.iinfo.cz/images/652/lang04-12-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 12: Hierarchie tříd.</i></p>

<a href="http://i.iinfo.cz/images/652/lang04-13.png"><img src="http://i.iinfo.cz/images/652/lang04-13-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 13: Graf dědičnosti pro zvolenou metodu.</i></p>



<p><a name="k06"></a></p>
<h2>6. Objektově orientované programování ve Squeaku</h2>

<p>V&nbsp;předchozích kapitolách jsme si popsali všechny typy oken, které
budeme potřebovat při tvorbě jednoduchých programů ve <i>Squeaku</i> (popravdě
řečeno budeme pro většinu operací používat pouze okno
<strong>Workspace</strong>). Ovšem ještě než se pustíme do programování, musíme
si říci základní informace o tom, jaký je vlastně <i>Squeak</i> programovací
jazyk. Již v&nbsp;předchozí části tohoto seriálu jsme si řekli, že
<i>Squeak</i> je založen na programovacím jazyku <i>Smalltalk</i>, tj.&nbsp;na
programovacím jazyku, který plně podporuje objektově orientované programování,
a to dokonce do takové míry, že prakticky všechny prvky, se kterými se
v&nbsp;programech setkáme, jsou objekty. Dokonce i třídy jsou objekty,
konkrétně se jedná o instance takzvané <i>metatřídy</i> (metatřída je taková
třída, jejíž instance jsou jiné třídy). Ve <i>Smalltalku</i> (a tím pádem i ve
<i>Sqeaku</i>) jsou za plnohodnotné objekty považována i čísla či booleovské
(pravdivostní) hodnoty, což s&nbsp;sebou přináší poměrně značné zjednodušení
syntaxe, jak si ukážeme v&nbsp;následujících kapitolách.</p>

<a href="http://i.iinfo.cz/images/652/lang04-14.png"><img src="http://i.iinfo.cz/images/652/lang04-14-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 14: Ve Squeaku je plnohodnotným objektem řetězec...</i></p>

<a href="http://i.iinfo.cz/images/652/lang04-15.png"><img src="http://i.iinfo.cz/images/652/lang04-15-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 15: ... celé číslo ...</i></p>

<a href="http://i.iinfo.cz/images/652/lang04-16.png"><img src="http://i.iinfo.cz/images/652/lang04-16-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 16: ... i geometrický tvar umístěný na pracovní ploše.</i></p>

<p>Tak jako v&nbsp;jiných objektově orientovaných jazycích, i ve <i>Squeaku</i>
může každý objekt obsahovat atributy (instanční proměnné) a metody. Atributy
nejsou mimo daný objekt viditelné, takže se pro přístup k&nbsp;nim používají
přístupové metody (dnes se obvykle nazývají <i>settery</i> a <i>gettery</i>).
Ovšem <i>Squeak</i> se od některých dalších objektově orientovaných jazyků,
například od <i>C++</i> či od <i>Javy</i> odlišuje v&nbsp;tom, že atributy jsou
dostupné jen v&nbsp;rámci dané instance třídy, popř.&nbsp;z&nbsp;některé
odvozené třídy, nikoli ze všech instancí stejné třídy. Pro zamyšlení pro znalce
<i>Javy</i> či <i>C++</i>: jakým způsobem bude následující kód pracovat a půjde
vůbec přeložit, když se v&nbsp;jedné instanci třídy <strong>Test</strong>
snažíme měnit privátní atribut jiné instance téže třídy?</p>

<pre>
public class Test
{
    private int atribut;

    public void change(Test test)
    {
        test.atribut=10;
    }

    public String toString()
    {
        return "" + this.atribut;
    }

    public static void main(String[] args)
    {
        Test test1 = new Test();
        Test test2 = new Test();
        System.out.println("test1: " + test1);
        System.out.println("test2: " + test2);
        test1.change(test2);
        System.out.println("test1: " + test1);
        System.out.println("test2: " + test2);
    }
}
</pre>



<p><a name="k07"></a></p>
<h2>7. Posílání zpráv</h2>

<p>Jednotlivé objekty, které &bdquo;žijí&ldquo; v&nbsp;prostředí
<i>Squeaku</i>, mezi sebou komunikují pomocí takzvaného &bdquo;posílání
zpráv&ldquo;. Na první pohled by se mohlo zdát, že posílání zpráv je naprosto
stejná operace jako volání metod, ovšem jiná terminologie odráží poněkud
odlišnou filozofii <i>Squeaku</i>, popř.&nbsp;<i>Smalltalku</i> a podobných
objektově orientovaných programovacích jazyků oproti jazykům mainstreamovým.
Zatímco voláním metody programátor přímo v&nbsp;programu (a mnohdy, i když ne
vždy, již v&nbsp;čase překladu) vybranému objektu přesně nařizuje, jakou
činnost má objekt provést, posláním zprávy se přesně neříká, jaký kód se má
spustit &ndash; rozhodnutí, jakým způsobem objekt, který je příjemcem zprávy,
na tuto zprávu zareaguje, je ponecháno na samotném objektu, který se navíc
&bdquo;rozhoduje&ldquo; až v&nbsp;čase běhu programu (runtime time), nikoli při
jeho překladu (compile time). To je sice časově poněkud náročnější, než přímé
zavolání metody, na druhou stranu je však toto řešení mnohem flexibilnější, což
oceníme především v&nbsp;následujících částech seriálu při popisu některých
pokročilejších programátorských postupů.</p>

<a href="http://i.iinfo.cz/images/652/lang04-17.png"><img src="http://i.iinfo.cz/images/652/lang04-17-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 17: Zařazení malých celých čísel do kategorie tříd.</i></p>



<p><a name="k08"></a></p>
<h2>8. Tři typy zpráv posílaných objektům</h2>

<p>Ve <i>Squeaku</i> je možné při komunikaci s&nbsp;objekty používat tři typy
zpráv. Nejjednodušší jsou zprávy <i>unární</i>, které nemají žádný argument.
Objekt se rozhoduje, jakým způsobem na zprávu zareaguje, přímo z&nbsp;toho, o
jakou zprávu se jedná. Typickým příkladem je zápis <strong>42
factorial</strong>, kterým se pošle zpráva &bdquo;factorial&ldquo; objektu 42
(tj.&nbsp;instanci třídy SmallInteger). Objekt 42 tuto zprávu zpracuje a jako
výsledek vrátí nový objekt představující hodnotu
1405006117752879898543142606244511569936384000000000, což je (pravděpodobně :-)
skutečně výsledek výpočtu 42!. Jiným příkladem unární zprávy může být
<strong>Transcript clear</strong>, jejíž význam je zřejmý.</p>

<a href="http://i.iinfo.cz/images/652/lang04-18.png"><img src="http://i.iinfo.cz/images/652/lang04-18-prev.png" width="360" height="270" alt=" " /></a>
<p><i>Obrázek 18: Vlastnosti instance třídy EllipseMorph; na tomto obrázku je
patrné, že okno Explorer dokáže některé atributy objektu zobrazit i graficky,
například barvu.</i></p>

<p>Druhým typem zpráv jsou zprávy <i>binární</i>. Tyto zprávy obsahují přesně
jeden argument, který se zapisuje za jméno zprávy. Ve <i>Squeaku</i> jsou jména
binárních zpráv představována následujícími znaky nebo jejich kombinacemi:</p>

<pre>
+ -- / \ * ~ &lt; &gt; = @ % | &amp; ? ,
</pre>

<p>Příkladem binární zprávy je například zápis <strong>6 * 7</strong>, kterým
se objektu 6 posílá binární zpráva * s&nbsp;argumentem 7. Objekt 6 tuto zprávu
zpracuje a jako výsledek vrátí objekt 42. Dalším příkladem binární zprávy je
zápis <strong>6 = 7</strong>, jehož výsledkem je objekt <strong>false</strong>.
Vidíme, že díky zavedení binárních zpráv je možné zapisovat i aritmetické
výrazy s&nbsp;operátory (ovšem bez rozlišení priority), i když podpora pro
výrazy není v&nbsp;samotném jazyku nijak zakotvena. Na binární zprávy může
reagovat jakýkoli objekt, takže se vlastně bez většího úsilí dosáhlo toho, že
<i>Squeak</i> alespoň syntakticky podporuje přetěžování operátorů.</p>

<img src="http://i.iinfo.cz/images/652/lang04-19.png" width="368" height="269" alt=" " />
<p><i>Obrázek 19: Selektory a argumenty zpráv.</i></p>

<p>Třetím typem zpráv jsou zprávy s&nbsp;obecným počtem parametrů. Tyto zprávy
obsahují ve svém zápisu takzvané <i>selektory</i>, přičemž vždy za každým
selektorem následuje argument. Příkladem tohoto typu zprávy může být například
zápis: <strong>3 raisedTo: 3 modulo: 2</strong>, jehož výsledkem je objekt
s&nbsp;hodnotou 1 (povšimněte si, že za selektorem následuje dvojtečka). Tímto
typem zpráv se budeme podrobněji zabývat v&nbsp;následující části tohoto
seriálu.</p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>Squeak home page<br />
<a href="http://www.squeak.org/">http://www.squeak.org/</a>
</li>

<li>XO: The Children's Machine<br />
<a href="http://wiki.laptop.org/go/The_Children's_Machine">http://wiki.laptop.org/go/The_Children's_Machine</a>
</li>

<li>Squeak na Wikipedii EN<br />
<a href="http://en.wikipedia.org/wiki/Squeak">http://en.wikipedia.org/wiki/Squeak</a>
</li>

<li>Squeak na Wikipedii CZ<br />
<a href="http://cs.wikipedia.org/wiki/Squeak">http://cs.wikipedia.org/wiki/Squeak</a>
</li>

<li>Squeak by Example<br />
<a href="http://squeakbyexample.org/">http://squeakbyexample.org/</a>
</li>

<li>Squeak Land<br />
<a href="http://www.squeakland.org/">http://www.squeakland.org/</a>
</li>

<li>SqueakNotes<br />
<a href="http://squeak.zwiki.org/SqueakNotes">http://squeak.zwiki.org/SqueakNotes</a>
</li>

<li>Squeak FAQ<br />
<a href="http://wiki.squeak.org/squeak/471">http://wiki.squeak.org/squeak/471</a>
</li>

<li>Learning Squeak<br />
<a href="http://c2.com/cgi/wiki?LearningSqueak">http://c2.com/cgi/wiki?LearningSqueak</a>
</li>

<li>Scratch home page<br />
<a href="http://scratch.mit.edu/">http://scratch.mit.edu/</a>
</li>

<li>Scratch (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Scratch_(programming_language)">http://en.wikipedia.org/wiki/Scratch_(programming_language)</a>
</li>

<li>Lazarus (Software)<br />
<a href="http://en.wikipedia.org/wiki/Lazarus_%28software%29">http://en.wikipedia.org/wiki/Lazarus_%28software%29</a>
</li>

<li>FreePascal<br />
<a href="http://www.freepascal.org/">http://www.freepascal.org/</a>
</li>

<li>"Why I Love Python" slides<br />
<a href="http://www.mindviewinc.com/downloads/pub/eckel/LovePython.zip">http://www.mindviewinc.com/downloads/pub/eckel/LovePython.zip</a>
</li>

<li>"Why I love Python" (presentation)<br />
<a href="http://www.slideshare.net/didip/why-i-love-python">http://www.slideshare.net/didip/why-i-love-python</a>
</li>

<li>První jazyk: Python<br />
<a href="http://macek.sandbox.cz/texty/prvni-jazyk-python/">http://macek.sandbox.cz/texty/prvni-jazyk-python/</a>
</li>

<li>Programovací jazyk Python<br />
<a href="http://www.py.cz/FrontPage">http://www.py.cz/FrontPage</a>
</li>

<li>Python &ndash; Wikipedia CS<br />
<a href="http://cs.wikipedia.org/wiki/Python">http://cs.wikipedia.org/wiki/Python</a>
</li>

<li>IPython<br />
<a href="http://en.wikipedia.org/wiki/Ipython">http://en.wikipedia.org/wiki/Ipython</a>
</li>

<li>IPython: an interactive computing environment<br />
<a href="http://ipython.scipy.org/moin/">http://ipython.scipy.org/moin/</a>
</li>

<li>Category:Python<br />
<a href="http://rosettacode.org/wiki/Category:Python">http://rosettacode.org/wiki/Category:Python</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a></li>

<li>Language Poster (O'Reilly):<br />
<a href="http://www.oreilly.com/news/graphics/prog_lang_poster.pdf">http://www.oreilly.com/news/graphics/prog_lang_poster.pdf</a></li>

<li>Informace o Comenius Logu:<br />
<a href="http://www.comlogo.input.sk/index.html">http://www.comlogo.input.sk/index.html</a></li>

<li>Stránka nabízející stažení Comenius Loga:<br />
<a href="http://www.comlogo.input.sk/nastiahnutie.html">http://www.comlogo.input.sk/nastiahnutie.html</a></li>

<li>Seminární práce o Comenius Logu:<br />
<a href="http://nwit.pedf.cuni.cz/rotal9ap/logo/">http://nwit.pedf.cuni.cz/rotal9ap/logo/</a></li>

<li>Informace o LEGO/Logu:<br />
<a href="http://education.otago.ac.nz/nzlnet/Logo/legologo.html">http://education.otago.ac.nz/nzlnet/Logo/legologo.html</a></li>

<li>Informace o systému Elica:<br />
<a href="http://www.elica.net/site/index.html">http://www.elica.net/site/index.html</a></li>

<li>Informace o systému NetLogo:<br />
<a href="http://ccl.northwestern.edu/netlogo/">http://ccl.northwestern.edu/netlogo/</a></li>

<li>Stažení NetLoga:<br />
<a href="http://ccl.northwestern.edu/netlogo/download.shtml">http://ccl.northwestern.edu/netlogo/download.shtml</a></li>

<li>Uživatelský manuál NetLoga ve formátu PDF:<br />
<a href="http://ccl.northwestern.edu/netlogo/docs/NetLogo%20User%20Manual.pdf">http://ccl.northwestern.edu/netlogo/docs/NetLogo%20User%20Manual.pdf</a></li>

<li>NetLogo FAQ:<br />
<a href="http://ccl.northwestern.edu/netlogo/docs/faq.html">http://ccl.northwestern.edu/netlogo/docs/faq.html</a></li>

<li>Domácí stránka Daniela Azumy (autora implementace Turtle Tracks):<br />
<a href="http://alumnus.caltech.edu/~dazuma/home/">http://alumnus.caltech.edu/~dazuma/home/</a></li>

<li>Informace o <i>aUCBLogu</i>:<br />
<a href="http://www.physik.uni-augsburg.de/~micheler/">http://www.physik.uni-augsburg.de/~micheler/</a></li>

<li>Domácí stránka MSW Loga:<br />
<a href="http://www.softronix.com/logo.html">http://www.softronix.com/logo.html</a></li>

<li>Karel online<br />
<a href="http://karel.oldium.net/">http://karel.oldium.net/</a>
</li>

<li>EDU-SIG: Python in Education<br />
<a href="http://www.python.org/community/sigs/current/edu-sig/">http://www.python.org/community/sigs/current/edu-sig/</a>
</li>

<li>Guido van Robot<br />
<a href="http://en.wikipedia.org/wiki/Guido_van_Robot">http://en.wikipedia.org/wiki/Guido_van_Robot</a>
</li>

<li>The Guido van Robot Programming Language<br />
<a href="http://gvr.sourceforge.net/">http://gvr.sourceforge.net/</a>
</li>

<li>An Introduction to Programming with Karel J. Robot<br />
<a href="http://blog.thingoid.com/2003/10/karel-intro/">http://blog.thingoid.com/2003/10/karel-intro/</a>
</li>

<li>Teaching a young robot new tricks<br />
<a href="http://blog.thingoid.com/2003/11/karel-new-tricks/">http://blog.thingoid.com/2003/11/karel-new-tricks/</a>
</li>

<li>Karel and Company - More Robots<br />
<a href="http://blog.thingoid.com/2003/12/karel-and-company/">http://blog.thingoid.com/2003/12/karel-and-company/</a>
</li>

<li>Karel heads for the stars<br />
<a href="http://blog.thingoid.com/2004/03/karel-star/">http://blog.thingoid.com/2004/03/karel-star/</a>
</li>

<li>Karel programming language documentation<br />
<a href="http://mormegil.wz.cz/prog/karel/prog_doc.htm">http://mormegil.wz.cz/prog/karel/prog_doc.htm</a>
</li>

<li>Karel J. Robot<br />
<a href="http://www.mainlandregional.net/dklipp/Honors%20Computer%20Science%20Java.htm">http://www.mainlandregional.net/dklipp/Honors%20Computer%20Science%20Java.htm</a>
</li>

<li>Karel (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Karel_(programming_language)">http://en.wikipedia.org/wiki/Karel_(programming_language)</a>
</li>

<li>Richard E. Pattis<br />
<a href="http://en.wikipedia.org/wiki/Richard_E._Pattis">http://en.wikipedia.org/wiki/Richard_E._Pattis</a>
</li>

<li>XKarel home page<br />
<a href="http://xkarel.sourceforge.net/eng/">http://xkarel.sourceforge.net/eng/</a>
</li>

<li>XKarel - screenshoty oken<br />
<a href="http://xkarel.sourceforge.net/eng/program.php#Okna">http://xkarel.sourceforge.net/eng/program.php#Okna</a>
</li>

<li>Greenfoot<br />
<a href="http://www.greenfoot.org/about/whatis.html">http://www.greenfoot.org/about/whatis.html</a>
</li>

<li>Computer programming -- Educational programming languages<br />
<a href="http://www.kidslike.info/computer_programming_educational_programming_languages">http://www.kidslike.info/computer_programming_educational_programming_languages</a>
</li>

<li>Making Great Programmers: Why BASIC is Still Relevant<br />
<a href="http://kidbasic.sourceforge.net/en/why.html">http://kidbasic.sourceforge.net/en/why.html</a>
</li>

<li>Gambas Wiki<br />
<a href="http://en.wikibooks.org/wiki/Gambas">http://en.wikibooks.org/wiki/Gambas</a>
</li>

<li>Free tool offers 'easy' coding<br />
<a href="http://news.bbc.co.uk/2/hi/technology/6647011.stm">http://news.bbc.co.uk/2/hi/technology/6647011.stm</a>
</li>

<li>Scratch Lowers Resistance to Programming<br />
<a href="http://www.wired.com/gadgetlab/2009/03/scratch-lowers/">http://www.wired.com/gadgetlab/2009/03/scratch-lowers/</a>
</li>

<li>Základy želví grafiky<br />
<a href="http://www.root.cz/clanky/zaklady-zelvi-grafiky/">http://www.root.cz/clanky/zaklady-zelvi-grafiky/</a>
</li>

<li>Bill Kendrick's Web Turtle<br />
<a href="http://www.sonic.net/~nbs/webturtle/">http://www.sonic.net/~nbs/webturtle/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2010</small></p>
</body>
</html>

