<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory XIV</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Forth a zásobníkové procesory XIV</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h2>Úvodník</h2>

<p>V dnešní části seriálu o programovacím jazyku Forth a zásobníkových
procesorech si povíme, jakým způsobem je možné roztřídit všechny typy
zásobníkových procesorů (a vlastně i všech procesorů obecně) do několika
kategorií. Ukážeme si také, že každá kategorie má některé přednosti i některé
záporné vlastnosti.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Tři osy technologických vlastností zásobníkových procesorů</a><br />
<a href="#k02">2. Jednozásobníkové procesory</a><br />
<a href="#k03">3. Vícezásobníkové procesory</a><br />
<a href="#k04">4. Velikost zásobníku či zásobníků</a><br />
<a href="#k05">5. Počet adresovatelných operandů v instrukcích</a><br />
<a href="#k06">6. Příklady procesorů z jednotlivých kategorií</a><br />
<a href="#k07">7. Obsah dalšího pokračování</a><br />
</p>



<p><a name="k01" id="k01"></a></p>
<h2>1. Tři osy technologických vlastností zásobníkových procesorů</h2>

<p>Pokud se podíváme na výčet možností různých typů procesorů, kterých je v
dnešní době snad již několik tisíc, nezbude nám nic jiného, než si procesory
roztřídit do různých kategorií a posléze porovnávat jednotlivé kategorie mezi
sebou. Z hlediska zásobníkových procesorů se používá třídění podle třech
vlastností (toto třídění například používá i <a
href="http://www.cs.cmu.edu/~koopman/index.html">Philip Koopman</a>):</p>

<ol>
<li>počtu implementovaných zásobníků (jeden zásobník nebo více zásobníků)</li>
<li>velikosti implementovaných zásobníků (tj. počtu uložitelných hodnot)</li>
<li>počtu explicitně adresovatelných operandů v instrukcích, které procesor ve
strojovém kódu rozeznává (0, 1 nebo dva operandy)</li>
</ol>

<p>Třídění podle třech vlastností má výhodu v tom, že jednotlivé vlastnosti lze
jednoduše vynést na souřadné osy trojrozměrného diagramu, čímž vznikne dvanáct
oblastí. Každý typ procesoru padá právě do jedné z těchto oblastí, bez ohledu
na jeho další vlastnosti (rychlost, bitová šířka apod. zde nehrají žádnou
roli). Zajímavé je, že každá z dvanácti oblastí je obsazená, to znamená, že
každé pojetí zásobníkového procesoru může mít své výhody.</p>



<p><a name="k02" id="k02"></a></p>
<h2>2. Jednozásobníkové procesory</h2>

<p>Jednozásobníkové procesory obsahují, jak je patrné již z jejich pojmenování,
pouze jeden zásobník. Tento zásobník může být použit pro více účelů - pro
výpočty, pro předávání parametrů do volaných funkcí, pro úschovu návratových
adres volaných funkcí či pro úschovu lokálních proměnných. Všechny uvedené
operace se však na jednom zásobníku provádí komplikovaným způsobem. Z tohoto
důvodu se na zásobníku vytváří takzvaný <strong>zásobníkový rámec</strong>
(<em>stack frame</em>), což je (při běhu programu) přesně definovaná oblast, se
kterou se na zásobníku pracuje.</p>

<p>Nejpoužívanější imperativní programovací jazyky (například C, C++, Pascal)
vytváří při běhu přeložených programů zásobníkový rámec následujícím způsobem
(popis je značně zjednodušený a neobsahuje například popis rozdílů mezi volací
konvencí C-čka a Pascalu; uvedený postup tvorby zásobníkového rámce je však
přibližně stejný):</p>

<ol>

<li>Nejprve se na zásobník uloží parametry volané funkce. Uložení parametrů na
zásobník je výhodné, protože je možné použít rekurzi. Jazyky, u kterých se
parametry předávají jiným způsobem (například přes registry), většinou rekurzi
nepovolují - příkladem jsou starší verze Fortranu. Pořadí parametrů závisí na
použitém programovacím jazyce a způsobu deklarace funkce (například C-čko má
několik modifikátorů, kterými lze tzv. volací konvenci změnit).</li>

<li>Dále se provede skok do funkce, přičemž se použije instrukce typu
<em>call</em>, která na zásobník automaticky uloží návratovou adresu z funkce.
Tímto způsobem je zajištěn jak jednoduchý návrat z funkce, tak i možnost
provedení rekurze.</li>

<li>Nyní dochází k uložení ukazatele na vrchol zásobníku (<em>SP</em> - Stack
Pointer) do některého adresového registru, jehož původní obsah je rovněž uložen
na zásobník (na procesorech Intel x86 je to většinou registr <em>BP</em>).
Tento adresový registr bude ve funkci plnit úlohu jakéhosi středobodu při práci
se zásobníkovým rámcem, protože bude na jednu stranu ukazovat na parametry
právě prováděné funkce, na druhou stranu na lokální proměnné.</li>

<li>Lokální proměnné jsou vytvářeny taktéž na zásobníku. Vzhledem k tomu, že
adresa ve vybraném adresovém registru je v době běhu celé funkce neměnná, má
funkce přístup jak ke svým parametrům (se kterými je volána), tak i k lokálním
proměnným. Naproti tomu se ukazatel na vrchol zásobníku samozřejmě mění,
například při volání dalších funkcí.</li>

<li>Při návratu z funkce je obnoven ukazatel na vrchol zásobníku tak, aby
ukazoval na návratovou adresu (ve skutečnosti může ukazovat na buňku ZA nebo
PŘED návratovou adresou, to již závisí na typu použitého procesoru). Dále je
obnoven vybraný adresový registr (například <em>BP</em>) a proveden návrat z
funkce instrukcí typu <em>ret</em>. O "úklid" parametrů funkce ze zásobníku se
podle použitého programovacího jazyka stará buď volající funkce, nebo funkce
volaná.</li>

</ol>

<p>Jak je z výše uvedeného popisu práce se zásobníkovým rámcem patrné, je
zásobník velmi intenzivně používán i v běžných imperativních jazycích. S tím
samozřejmě počítají i výrobci procesorů (zejména procesorů typu CISC), protože
se v instrukční sadě objevují instrukce jako <em>enter</em>, <em>leave</em> a
<em>ret n</em>, které práci se zásobníkovým rámcem poněkud usnadňují. Také je
umožněn přístup do libovolné paměťové buňky v zásobníkovém rámci přes
adresování s offsetem - to je nutné zejména pro efektivní přístup k parametrům
funkce a k lokálním proměnným.</p>



<p><a name="k03" id="k03"></a></p>
<h2>3. Vícezásobníkové procesory</h2>

<p><em>A key conceptual feature of stack machines is their uniformity of
interface between high level code and machine instructions. Both procedure
calls and opcodes use the stack as a means of passing data. This consistent
interface has several positive impacts on software development.<br />
Philip Koopman, Stack Computers: The New Wave</em></p>

<p>U vícezásobníkových procesorů je pro programátory k dispozici zásobníků
více. Typicky to bývají zásobníky dva, kdy první je určen pro předávání
parametrů a provádění výpočtů a druhý pro úschovu návratových adres volaných
funkcí. Dvouzásobníkové procesory jsou často navrhovány tak, aby na nich bylo
možné efektivně provozovat aplikace napsané v programovacím jazyce Forth. V čem
však spočívá úprava procesoru pro Forth? Existuje více přístupů,
nejpoužívanější jsou následující úpravy:</p>

<ol>

<li>Zásobníky mají různé oblasti použití a proto pro ně existují i rozdílné
instrukce. Jeden zásobník bývá používán pro aritmetické a logické výpočty (to
odpovídá Forthskému zásobníku operandů), druhý zásobník se používá zejména pro
uložení návratových adres volaných funkcí/slov. Procesory, které podporují běh
programů napsaných ve Forthu, většinou přímo obsahují instrukce typu
<strong>DUP</strong>, <strong>DROP</strong>, <strong>OVER</strong>,
<strong>ROT</strong>, <strong>R&gt;</strong> či <strong>&gt;R</strong>.</li>

<li>Programy napsané ve Forthu se často vyznačují velkým množstvím skoků do
podprogramů a návratu z podprogramů. Je to způsobeno stylem programování, kdy
se používají poměrně krátká slova. Z tohoto důvodu obsahují zásobníkové
procesory vhodně zakódované instrukce typu <strong>CALL</strong> a
<strong>RET</strong> (ve Forthu se příslušné slovo značí samozřejmě
<strong>";"</strong>). Instrukce typu <strong>RET</strong> bývá typicky
párována s ostatními instrukcemi. Například v případě použití instrukčního kódu
širokého šestnáct bitů bývá jeden bit (například nejvyšší) vždy použit pro
označení návratu z podprogramu. To znamená, že procesor mohl současně provádět
návrat z podprogramu (tj. změnu registru PC) a výpočet - místo uložení výsledku
je totiž dopředu známé. Také instrukce <strong>CALL</strong> spolu s adresou
bývá zakódována velmi ekonomickým způsobem, většinou přímo v instrukčním
kódu.</li>

<li>Pro zásobníkové procesory (s výjimkou některých netypických řešení,
například F21 apod.) je typický zvláštní formát instrukcí, kdy lze přímo z
operačního kódu instrukce vyčíst prováděné operace. Uvedu příklad:
šestnáctibitový kód každé instrukce obsahuje jeden bit pro indikaci návratu z
podprogramu (viz předchozí bod), další čtyři bity jsou použity pro specifikaci
aritmetické či logické operace, tři bity jsou určeny pro specifikaci operace
nad zásobníkem (<strong>ROT</strong> apod.) a zbývajících osm bitů může být
použito například pro uložení literálu na zásobník. Ve skutečnosti se tedy do
jedné instrukce dalo zakódovat více Forthovských slov, což zhruba (!) odpovídá
VLIW procesorům (<em>Very Long Instruction Word</em>).</li>

</ol>

<p>U některých procesorů je použito i více zásobníků než "pouze" dva. Pokud
jsou použity tři zásobníky, je jeden typicky využíván jako zásobník operandů,
druhý pro uložení návratových adres z podprogramů a třetí pro čítače smyček.
Samostatné uložení čítačů smyček může zefektivnit překlad některých
Forthovských programů, protože se omezí použití slov typu
<strong>R&gt;</strong> a <strong>&gt;R</strong>. Důležité přitom je, že
instrukce umožňují práci se všemi zásobníky současně, což výrazným způsobem
přispívá k celkové rychlosti aplikace.</p>

<p>Občas se setkáme i s procesory, které obsahují více zásobníků - například se
jedná o procesor <em>SF 1: Stack Frame computer number 1</em>, který obsahuje
pět zásobníků. Využití těchto procesorů vypadá lákavě, například možnost
využití dvou zásobníků pro operandy instrukcí. Zde se však dostavují
komplikace, protože instrukce již musí být složitější (je nutné jednotlivé
zásobníky "adresovat") a více zásobníků se již prakticky nedá ve Forthu
rozumným způsobem obsloužit (možná s využitím jiné sady základních slov a
odlišné struktury programů).</p>

<p>Vícezásobníkové procesory se z tohoto důvodu více uplatňují při běhu
funkcionálních jazyků, zejména LISPu. Požadavkem ovšem je, aby bylo možné
spustit kód, který je na zásobníku uložen.</p>



<p><a name="k04" id="k04"></a></p>
<h2>4. Velikost zásobníku či zásobníků</h2>

<p>Velikost zásobníku či zásobníků úzce souvisí s technologií implementace
zásobníků. V zásadě jsou možné tři strategie při vytváření zásobníků:</p>

<ol>

<li>Celý zásobník je vytvořen v operační paměti počítače, kromě minimálně dvou
položek na vrcholu zásobníku, které jsou prakticky vždy mapovány do speciálních
registrů procesoru. Tento přístup k vytváření zásobníku patří mezi
nejjednodušší a přitom prakticky neomezuje velikost zásobníků. Nevýhodou je
pomalejší přístup k jednotlivým položkám, protože rychlost pamětí tvoří v
současné době úzké hrdlo mikroprocesorových systémů.</li>

<li>Větší část zásobníku (blízko jeho vrcholu) je uložena ve speciálních
registrech mikroprocesoru, zbytek zásobníku je uložen v operační paměti
počítače. Výhodou tohoto přístupu je větší rychlost zpracování programu,
zejména v porovnání s předchozí strategií. Problém představují vyšší nároky na
počet hradel, ze kterých je procesor sestaven a nutnost přesunovat větší
množství dat při přepínání kontextu (pokud samozřejmě daný systém pracuje s
multitaskingem).</li>

<li>Celý zásobník je tvořen speciální HW strukturou, například dlouhým posuvným
registrem či podobným číslicovým obvodem. Tento přístup se uplatňuje především
u specializovaných procesorů se známými nároky běžících procesů na zdroje.
Výhodou může být velká rychlost zpracování, protože přístup do zásobníků může
být v jednom cyklu kombinován s přístupem do operační paměti. Nevýhodou je
značná režie při přepnutí kontextu, problémy při překročení kapacity zásobníku
a v neposlední řadě také vyšší nároky na HW řešení celého systému (opět stoupá
počet hradel, stejně jako počet vývodů procesoru).</li>

</ol>



<p><a name="k05" id="k05"></a></p>
<h2>5. Počet adresovatelných operandů v instrukcích</h2>

<p>Důležitou vlastností všech procesorů je jejich schopnost adresovat
jednotlivé operandy, se kterými se mají provádět výpočty. Tuto skutečnost jsme
si ostatně uvedli již v předchozí části tohoto seriálu. Zásobníkové procesory
používají prakticky vždy implicitní adresování, proto se v operačním kódu
instrukce nenachází pole (rezervované bity), které by bylo použito pro
specifikaci operandů. Naproti tomu se u RISC a CISC procesorů objevují
instrukce s jedním operandem, dvěma operandy a v některých případech i se třemi
operandy.</p>

<p>Při použití implicitně adresovaných operandů je dopředu známo, že se
operandy vybírají ze zásobníku a výsledek operace se taktéž ukládá na zásobník.
Jeden explicitně zadaný operand se typicky používá u procesorů s akumulátorem,
protože tento vždy uchovává první operand i výsledek výpočtu. Dva či tři
explicitně zadané operandy nachází své uplatnění v registrových procesorech, ať
už typu CISC či RISC.</p>



<p><a name="k06" id="k06"></a></p>
<h2>6. Příklady procesorů z jednotlivých kategorií</h2>

<p>Jak již bylo řečeno v předchozích kapitolách, v každé ze dvanácti kategorií
vynesených na trojrozměrném grafu se nachází nějaký typ procesoru. To znamená,
že tvůrci procesorů po zvážení všech kladů a záporů museli jednu z kategorií
upřednostnit, každá z kategorií má tedy svůj smysl. Pokusme se vypsat
nejznámější procesory z každé kategorie.</p>

<p>Každou kategorii přitom budeme značit třemi znaky. Prvním znakem je řečeno,
zda je použit jeden zásobník (<strong>S</strong>ingle) či více zásobníků
(<strong>M</strong>ultiple). Druhým znakem je naznačena velikost zásobníku -
<strong>S</strong>mall nebo <strong>L</strong>arge. Třetí znak je číslo 0-2,
kterým je uveden počet operandů adresovatelných v jedné instrukci.</p>

<h3>6.1 Kategorie SS0</h3>

<p><strong>Transputery</strong> - některé transputery spadají právě do
kategorie <strong>SS0</strong>, tj. instrukce nemají explicitně zadaný žádný
operand a je použit pouze jeden zásobník malého rozsahu.</p>

<h3>6.2 Kategorie SS1</h3>

<p>V této kategorii se nachází procesory, které obsahují jeden zásobník a v
instrukcích se používá pouze jeden explicitně zadaný operand. Typicky se jedná
o procesory s akumulátorem, mezi něž patří například známý <a
href="http://en.wikipedia.org/wiki/8080">Intel 8080</a> a dále velké množství
mikrořadičů, zejména <a href="http://en.wikipedia.org/wiki/8048">Intel 8048</a>
a jeho následovníci.</p>

<h3>6.3 Kategorie SS2</h3>

<p><strong>Intel x86</strong> - známá procesorová řada, jejíž procesory
podporují práci s jedním zásobníkem (přes registry <strong>SS</strong> a
<strong>SP</strong>). V instrukcích se adresují dva operandy, první operand je
zároveň i operandem cílovým. Existují samozřejmě i vyjímečné instrukce
(například <em>MUL</em> a <em>DIV</em>), ale vcelku tento procesor patří do
kategorie <strong>SS2</strong>.</p>

<h3>6.4 Kategorie SL0</h3>

<p>Procesory spadající do kategorie <strong>SL0</strong> nejsou příliš
rozšířené, neboť se práce pouze s jedním zásobníkem komplikuje, zejména při
skocích do podprogramů. Z tohoto důvodu se v této kategorii vyskytují zejména
vývojové typy, například G Machine apod.</p>

<h3>6.5 Kategorie SL1</h3>

<p>Tato kategorie obsahuje procesory s jedním zásobníkem o velké kapacitě,
přičemž instrukce mohly explicitně používat jeden operand (samozřejmě v
součinnosti s jedním operandem implicitním). Do této kategorie spadají některé
méně známé CISC a RISC procesory. Najdeme zde například procesor Micro-3L.</p>

<h3>6.6 Kategorie SL2</h3>

<p>V této kategorii se nachází mnoho procesorů typu RISC. Možnost explicitního
adresování dvou operandů je využita při práci s obecně použitelnými registry,
jediný zásobník se používá pro vytváření výše popsaného <em>zásobníkového
rámce</em>. Do této kategorie patří například procesory RISC I, CRISP a
Dragon.</p>

<h3>6.7 Kategorie MS0</h3>

<p>V této kategorii se nachází velké množství zásobníkových procesorů určených
pro běh aplikací napsaných v programovacím jazyce Forth. Mezi tyto procesory
patří například dále popisovaný MISC M17. Některé další zásobníkové procesory
spadají do kategorie <strong>ML0</strong>, která aplikacím nabízí větší prostor
na zásobníku.</p>

<h3>6.8 Kategorie MS1</h3>

<p>Některé akumulátorové procesory obsahují více zásobníků. Částečně sem spadá
i známý procesor <a href="http://en.wikipedia.org/wiki/6809">Motorola 6809</a>,
která obsahuje dva nezávislé ukazatele vrcholu zásobníku.</p>

<h3>6.9 Kategorie MS2</h3>

<p>Procesory, které obsahují více zásobníků a současně mohou v instrukci
adresovat dva operandy, jsou velmi flexibilní, zejména pro programátory v
assembleru (překladače mají raději jednodušší instrukční sadu). Takovým
procesorem je známá <a href="http://en.wikipedia.org/wiki/68000">Motorola
68000</a>, která byla použita v mnoha počítačových systémech. Zásobníky se na
tomto procesoru vytvářely přímo v operační paměti, do níž se přistupovalo
pomocí instrukcí s post-inkrementací nebo naopak pre-dekrementací adresy.</p>

<h3>6.10 Kategorie ML0</h3>

<p>Prakticky všechny moderní zásobníkové procesory spadají do této kategorie;
jedná se například o procesor RTX 32P, RTX 2000 a WISC CPU/32. Oproti podobné
kategorii <strong>MS0</strong> je u procesorů z této kategorie použitý větší
zásobník, což přináší některé výhody, ale i problémy (přepínání kontextu
apod.).</p>

<h3>6.11 Kategorie ML1</h3>

<p>V této kategorii se nachází jak procesory určené pro běh programů napsaných
ve Forthu (procesor <strong>SF1</strong>), tak i procesory pro rychlý běh
aplikací napsaných v programovacím jazyku LISP. Použití většího množství
zásobníků společně s jednoadresovými instrukcemi může skutečně běh LISPovských
programů podstatným způsobem urychlit.</p>

<h3>6.12 Kategorie ML2</h3>

<p>Opět se jedná o kategorii vyhrazenou zejména vývojovým typům procesorů,
například Socrates apod.</p>



<p><a name="k07" id="k07"></a></p>
<h2>7. Obsah dalšího pokračování</h2>

<p>V následujících pokračováních tohoto seriálu si uvedeme popis několika
známých a typických zásobníkových procesorů. Bude se jednat jak o starší
šestnáctibitové procesory, tak i o novou generaci třicetidvoubitových
procesorů. Určitě také nezapomeneme na mikroprocesor <em>F21</em>, který navrhl
Chuck Moore (vynálezce Forthu).</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small></p>
</body>
</html>

