<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Třetí článek o programovacích jazycích určených pro provádění operací s poli bude již naposledy věnován programovacím jazykům odvozených od APL. Nejdříve si popíšeme programovací jazyk BQN, jenž na APL přímo navazuje a poté si představíme interpret APL nazvaný ivy.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyky odvozené od APL</a></p>
<p><a href="#k02">2. Programovací jazyk BQN &ndash; Big Questions Notation</a></p>
<p><a href="#k03">3. Webová a terminálová varianta BQN</a></p>
<p><a href="#k04">4. Základní vlastnosti jazyka BQN</a></p>
<p><a href="#k05">5. Ilustrace pořadí vykonávání operací funkcí <i>Explain</i></a></p>
<p><a href="#k06">6. Porušení mantry &bdquo;vše je pole&ldquo;</a></p>
<p><a href="#k07">7. Seznamy, konstrukce polí, způsob zobrazení polí</a></p>
<p><a href="#k08">8. Tabulka se všemi základními funkcemi jazyka BQN</a></p>
<p><a href="#k09">9. Modifikátor <i>table</i></a></p>
<p><a href="#k10">*** 10. Další modifikátory jazyka BQN</a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. Programovací jazyk ivy</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyky odvozené od APL</h2>

<p><i>Joel Moses: “APL is like a beautiful diamond - flawless, beautifully
symmetrical. But you can’t add anything to it. If you try to glue on another
diamond, you don’t get a bigger diamond. Lisp is like a ball of mud. Add more
and it’s still a ball of mud - it still looks like Lisp.”</i></p>

<p>Na úvodní dvojici článků <a
href="https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/">[1]</a>
<a
href="https://www.root.cz/clanky/specializovane-jazyky-pro-praci-s-n-dimenzionalnimi-poli-jazyk-j/">[2]</a>
o programovacích jazycích určených a mnohdy i přímo optimalizovaných pro
provádění operací s&nbsp;N-dimenzionálními poli dnes navážeme. Připomeňme si,
že v&nbsp;úvodním článku jsme se zabývali především univerzálními
programovacími jazyky podporujícími (kromě dalších operací) i
&bdquo;nativní&ldquo; zpracování vícerozměrných polí, v&nbsp;článku druhém jsme
se pak podrobněji věnovali programovacímu jazyku nazvanému <i>J</i>, jenž je
přímo odvozen od v&nbsp;mnoha ohledech přelomového programovacího jazyka
<i>APL</i> (i když to na první pohled nemusí být patrné kvůli zcela odlišné
sadě symbolů, z&nbsp;nichž se programy skládají). Do této série článků ovšem
nepřímo patří i článek o <a
href="https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/">historii
vzniku a dalšího vývoje programovacího jazyka APL</a>.</p>

<p>Na všechny tři výše zmíněné články dnes navážeme, protože si popíšeme další
dva zajímavé programovací jazyky, které jsou do značné míry inspirovány právě
programovacím jazykem <i>APL</i>. Nejdříve se budeme zabývat jazykem nazvaným
poněkud neobvykle <i>BQN</i>, za jehož vývojem stojí programátor, který se APL
jazykům věnuje již velmi dlouho a tudíž poměrně do hloubky zná i jejich limity
a pochopitelně i jejich nedokonalosti (ostatně který programovací jazyk je
dokonalý?). Druhým jazykem, na který se dnes zaměříme, je jazyk nazvaný
<i>ivy</i>. Ten je zajímavý mj.&nbsp;i kvůli tomu, že je naprogramován
v&nbsp;Go a za jeho vývojem stojí přímo <a
href="https://en.wikipedia.org/wiki/Rob_Pike">Rob Pike</a>, tedy jeden ze
spoluautorů Go. Současně dnes již téma programovacích jazyků odvozených od APL
opustíme, a to mj.&nbsp;i z&nbsp;toho důvodu, že práce s&nbsp;vícerozměrnými
poli (a zejména pak s&nbsp;jednorozměrnými vektory a dvourozměrnými maticemi)
je dobře rozpracována i v&nbsp;dalších jazycích, které jsou přece jen více
mainstreamové &ndash; jedná se v&nbsp;první řadě o Fortran, ale taktéž o
programovací jazyk C++.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Programovací jazyk BQN &ndash; Big Questions Notation</h2>

<p><i>&bdquo;BQN: finally, an APL for your flying saucer&ldquo;</i></p>

<p>Nejprve se budeme zabývat programovacím jazykem, který se jmenuje <i>BQN</i>
a za jehož vývojem stojí především <a
href="https://www.aplwiki.com/wiki/Marshall_Lochbaum">Marshall Lochbaum</a>.
Tento autor se dlouhodobě zabývá programovacími jazyky z&nbsp;rodiny APL (a
částečně i Scheme) a před <i>BQN</i> vytvořil programovací jazyk pojmenovaný
jednoduše <i>I</i>, který je do značné míry inspirován jazykem <i>J</i>, jímž
jsme se zabývali <a
href="https://www.root.cz/clanky/specializovane-jazyky-pro-praci-s-n-dimenzionalnimi-poli-jazyk-j/">minule</a>.
Vraťme se ovšem k&nbsp;jazyku <i>BQN</i>. Jedná se o programovací jazyk, jenž
je do značné míry inspirován jazykem <i>APL</i>, ovšem některé (i poměrně
základní) operace jsou v&nbsp;<i>BQN</i> prováděny odlišně. Odlišnosti
nalezneme již u způsobu implementace n-dimenzionálních polí, kde se BQN vrací
k&nbsp;původnímu APL (a nikoli k&nbsp;APL modernímu). Liší se ovšem i základní
symboly, z&nbsp;nichž se skládají větší celky a z&nbsp;nich pak ucelené
algoritmy i celé programy.</p>

<p><div class="rs-tip-major">Poznámka: mimochodem, název jazyka <i>BQN</i> měl
původně znít <i>BQM</i>, což je trojice písmen vzniklá posunem názvu jazyka
<i>APL</i> o jednu pozici v&nbsp;abecedě doprava (což ostatně není v&nbsp;IT
žádná novinka &ndash; takto vzniklo již několik nových názvů). Nicméně jméno
<i>BQM</i> není příliš pěkné, takže se ujalo přece jen zajímavější <i>BQN</i> a
teprve zpětně bylo domyšleno, co tato zkratka znamená &ndash; &bdquo;Big
Questions Notation&ldquo; (význam tohoto slovního spojení si můžete sami
domyslet či vymyslet).</div></p>

*** image ***
<p><i>Obrázek 1: Logo programovacího jazyka BQN.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Webová a terminálová varianta BQN</h2>

<p>Programovací jazyk <i>BQN</i> v&nbsp;současnosti existuje ve dvou
variantách. První variantu lze spustit přímo ve webovém prohlížeči. Tuto
variantu můžeme najít na stránce <a
href="https://mlochbaum.github.io/BQN/">https://mlochbaum.github.io/BQN/</a> a
její výhodou je, že obsahuje volbu <i>Explain</i>, kterou si ukážeme dále.
Navíc dostaneme &bdquo;zadarmo&ldquo; podporu všech potřebných znaků Unicode,
na nichž je jazyk BQN postaven. Druhá varianta se jmenuje <i>CBQN</i>. Tato
varianta, jejíž repositář je umístěn na adrese <a
href="https://github.com/dzaima/CBQN">https://github.com/dzaima/CBQN</a>, je
naprogramována v&nbsp;čistém C (což ostatně naznačuje již její název) a lze ji
přeložit a spustit přímo z&nbsp;terminálu.</p>

*** image ***
<p><i>Obrázek 2: Webové rozhraní programovacího jazyka BQN.</i></p>

<p>Překlad a slinkování <i>CBQN</i> je snadný a rychlý. Nejprve je nutné
naklonovat repositář s&nbsp;touto variantou jazyka <i>BQN</i>:</p>

<pre>
$ <strong>git clone git@github.com:dzaima/CBQN.git</strong>
&nbsp;
Cloning into 'CBQN'...
remote: Enumerating objects: 5753, done.
remote: Counting objects: 100% (4177/4177), done.
remote: Compressing objects: 100% (3078/3078), done.
remote: Total 5753 (delta 3342), reused 1905 (delta 1084), pack-reused 1576
Receiving objects: 100% (5753/5753), 1.07 MiB | 3.77 MiB/s, done.
Resolving deltas: 100% (4592/4592), done.
</pre>

<p>Ve druhém kroku provedeme překlad s&nbsp;volbou překladače, který se má
použít:</p>

<pre>
$ <strong>cd CBQN/</strong>
$ <strong>make CC=gcc</strong>
</pre>

<p>Výsledkem překladu je spustitelný soubor &bdquo;BQN&ldquo; (který se
v&nbsp;případě potřeby vleze na disketu :-):</p>

<pre>
$ <strong>ls -l</strong>
&nbsp;
-rwxrwxr-x. 1 ptisnovs ptisnovs 1027984 Dec 25 20:13 <strong>BQN</strong>
-rwxrwxr-x. 1 ptisnovs ptisnovs    2779 Dec 25 20:12 cc.bqn
-rwxrwxr-x. 1 ptisnovs ptisnovs     442 Dec 25 20:12 genRuntime
-rwxrwxr-x. 1 ptisnovs ptisnovs     354 Dec 25 20:12 genRuntimeSrc
-rw-rw-r--. 1 ptisnovs ptisnovs   35148 Dec 25 20:12 LICENSE
-rw-rw-r--. 1 ptisnovs ptisnovs    4665 Dec 25 20:12 makefile
drwxrwxr-x. 3 ptisnovs ptisnovs      60 Dec 25 20:13 obj
-rwxrwxr-x. 1 ptisnovs ptisnovs    1120 Dec 25 20:12 precompiled.bqn
-rw-rw-r--. 1 ptisnovs ptisnovs    2283 Dec 25 20:12 README.md
drwxrwxr-x. 2 ptisnovs ptisnovs      40 Dec 25 20:12 SingeliClone
-rwxrwxr-x. 1 ptisnovs ptisnovs     688 Dec 25 20:12 SingeliMake.bqn
drwxrwxr-x. 9 ptisnovs ptisnovs     440 Dec 25 20:12 src
-rwxrwxr-x. 1 ptisnovs ptisnovs    1188 Dec 25 20:12 test.bqn
</pre>

<p>Otestujeme, zda je možné <strong>BQN</strong> spustit:</p>

<pre>
$ <strong>./BQN --help</strong>
&nbsp;
Usage: ./BQN [options] [file.bqn [arguments]]
Options:
-f file: execute the contents of the file with all further arguments as •args
-e code: execute the argument as BQN
-p code: execute the argument as BQN and print its result pretty-printed
-o code: execute the argument as BQN and print its raw result
-M num : set maximum heap size to num megabytes
-r     : start the REPL after executing all arguments
-s     : start a silent REPL
</pre>

<p>Spuštění v&nbsp;režimu interpretru:</p>

<pre>
$ <strong>./BQN</strong>
&nbsp;
   <strong>1+1</strong>
2
&nbsp;
   <strong>π</strong>
3.141592653589793
&nbsp;
   <strong>∞</strong>
∞
</pre>

<p><div class="rs-tip-major">Poznámka: je pochopitelně nutné použít terminál
s&nbsp;podporou Unicode (což dnes platí pro prakticky všechny
terminály).</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Základní vlastnosti jazyka BQN</h2>

<p>Jazyk <i>BQN</i>, podobně jako jeho ideový předchůdce <i>APL</i>, podporuje
infixovou notaci zápisu výrazů. To znamená, že jméno či symbol funkce (nebo,
chcete-li, operátoru) se zapisuje mezi oba operandy. Příkladem může být
funkce/operátor pro podíl dvou hodnot:</p>

<pre>
<strong>10 ÷ 4</strong>
2.5
</pre>

<p>Mnoho funkcí akceptuje pouze jediný operand. Příkladem může být opět funkce
zapisovaná znakem &bdquo;÷&ldquo;, jejíž jednooperandová podoba slouží pro
výpočet převrácené hodnoty:</p>

<pre>
<strong>÷ 4</strong>
0.25
</pre>

<p><div class="rs-tip-major">Poznámka: již v&nbsp;APL se z&nbsp;tohoto důvodu
rozlišuje mezi <i>monadickými</i> a <i>dyadickými</i> funkcemi.</div></p>

<p>Operátory/funkce nemají stanovenou prioritu (resp.&nbsp;přesněji řečeno mají
shodnou prioritu) a vyhodnocují se zprava doleva, tedy stejně, jako je tomu
v&nbsp;APL:</p>

<pre>
<strong>7 × 4 + 2</strong>
42
&nbsp;
4 + 5 × 6
34
</pre>

<p>Pořadí výpočtů lze ovlivnit závorkami:</p>

<pre>
<strong>(4 + 5) × 6</strong>
54
&nbsp;
<strong>(1 + (2 + 3) × 4) × 2</strong>
42
</pre>

<p>Popř.:</p>

<pre>
<strong>(((10 ÷ 9) ÷ 8) ÷ 7) + (100 ÷ ((4 + 3) ÷ (2 + 1)))</strong>
</pre>

<p>Existuje i mnoho dalších funkcí majících monadickou a současně i dyadickou
podobu reprezentovanou jediným symbolem. Příkladem může být funkce pro výpočet
druhé odmocniny (monadická podoba) nebo n-té odmocniny (dyadická podoba):</p>

<pre>
√2
<strong>1.4142135623730951</strong>
&nbsp;
4√81
<strong>3</strong>
&nbsp;
8√65536
<strong>4</strong>
</pre>

<p>Popř.&nbsp;výpočet e<sup>x</sup> nebo x<sup>y</sup>:</p>

<pre>
<strong>⋆1</strong>
2.718281828459045
&nbsp;
<strong>2⋆8</strong>
256
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Ilustrace pořadí vykonávání operací funkcí <i>Explain</i></h2>

<p>V&nbsp;některých případech nemusí být jednoduché pravidlo &bdquo;funkce mají
shodné priority a vyhodnocují se zprava doleva&ldquo; zcela zřejmé
v&nbsp;případě složitějších výrazů, zejména při použití takzvaných
<i>manipulátorů</i>. V&nbsp;takových případech lze použít funkci <i>Explain</i>
dostupnou z&nbsp;webového prostředí, která kromě vlastního výpočtu zobrazí i
pořadí vyhodnocování jednotlivých částí výrazů. Podívejme se na několik
jednoduchých ukázek, v&nbsp;nichž budeme používat základní funkce:</p>

*** image ***
<p><i>Obrázek 3: Ukázka vyhodnocení výrazu 1+2.</i></p>

*** image ***
<p><i>Obrázek 4: Ukázka vyhodnocení výrazu 6&times;3+4 (3+4 se vyhodnotí
dříve).</i></p>

*** image ***
<p><i>Obrázek 5: Ukázka vyhodnocení výrazu s&nbsp;několika podvýrazy
v&nbsp;závorkách.</i></p>

*** image ***
<p><i>Obrázek 6: Ukázka vyhodnocení výrazu s&nbsp;několika podvýrazy
v&nbsp;závorkách.</i></p>

*** image ***
<p><i>Obrázek 7: Ukázka vyhodnocení výrazu s&nbsp;několika podvýrazy
v&nbsp;závorkách.</i></p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti se nejedná o absolutní
novinku, protože podobnou funkci můžeme najít i v&nbsp;některých variantách
programovacího jazyka APL.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Porušení mantry &bdquo;vše je pole&ldquo;</h2>

<p>V&nbsp;prvních variantách programovacího jazyka APL se používala takzvaná
&bdquo;plochá&ldquo; pole neboli <i>flat arrays</i>. Jednalo se (poněkud
zjednodušeně řečeno) o pole, jejichž prvky mohly být skalární hodnoty
(skaláry), tj.&nbsp;typicky buď hodnoty typu <i>float</i> nebo znaky. Okolo
roku 1981 však došlo k&nbsp;rozšíření sémantiky datového typu pole &ndash; nyní
mohla pole obsahovat jako své prvky další pole. První komerčně dostupná
varianta APL, která tato rozšířená pole implementovala, se jmenovala
<i>APL*PLUS</i> a nová vlastnost se označovala zkratkou <i>NARS</i> neboli
<i>Nested Array Research System</i>.</p>

<p>Později se tento koncept &bdquo;vše je pole&ldquo; začal používat i
v&nbsp;dalších variantách programovacího jazyka APL. Kromě několika výhod se
ovšem ukázalo, že tento koncept může mít i nevýhody. Ty vyplývají
z&nbsp;&bdquo;podivné&ldquo; resp.&nbsp;přesněji řečeno neintuitivní sémantiky
některých operací, kdy se skalární hodnota někdy považuje za pole 1&times;1
prvek a jindy nikoli (navíc se zde objevuje nová vlastnost
&bdquo;hloubka&ldquo; pole; dále se jednoprvkové pole rovná tomuto prvku při
porovnávání). Z&nbsp;tohoto důvodu se <i>BQN</i> vrací k&nbsp;myšlence původní
varianty APL &ndash; pole zde pochopitelně stále existují, mohou mít libovolný
počet dimenzí i libovolný tvar, ovšem prvky polí jsou skalární hodnoty a nikoli
další pole.</p>

<p>V&nbsp;BQN se hodnoty rozdělují do dvou hlavních kategorií:</p>

<ol>
<li><i>atomy</i>: čísla, znaky, funkce, modifikátory, jmenné prostory</li>
<li><i>pole</i></li>
</ol>

<p><div class="rs-tip-major">Poznámka: navíc existuje ještě jeden typ
kontejneru &ndash; seznam.</div></p>

<p>Přitom platí, že atomy mají vždy hloubku (<i>depth</i>) rovnou nule a nemají
tvar (<i>shape</i>). Pole naproti tomu mají tvar a jejich identita je odvozena
právě z&nbsp;tvaru a navíc z&nbsp;typu elementů.</p>

<p><div class="rs-tip-major">Poznámka: některé operace ovšem automaticky atom
obalí polem s&nbsp;hodností 0 a tvarem &lt;&gt;, což si ukážeme v&nbsp;dalším
textu.</div></p>

<p>Rozdíl mezi atomem a jednotkovým polem je vidět ihned na výstupu:</p>

<p>Atom:</p>

<pre>
<strong>3</strong>
3
</pre>

<p>Pole s&nbsp;jediným prvkem:</p>

<pre>
<strong>&lt;3</strong>
&nbsp;
┌·   
· 3  
    ┘
</pre>

<p>Mezi další vlastnosti polí v&nbsp;BQN patří, že pole jsou <i>neměnná
(immutable)</i> v&nbsp;tom smyslu, že nelze měnit jejich tvar ani typ elementů.
Ovšem hodnoty elementů (prvků) již měnit lze.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Seznamy, konstrukce polí, způsob zobrazení polí</h2>

<p>Na rozdíl od jazyka APL či J, v&nbsp;němž existuje způsob konstrukce
literálu představujícího pole, je nutné v&nbsp;BQN pole vytvářet nepřímo;
typicky přes seznamy. Literál představující celý seznam totiž existuje &ndash;
jedná se o hodnoty prvků, které jsou propojeny ligaturou &bdquo;‿&ldquo;.
Následuje příklad seznamu se třemi prvky s&nbsp;hodnotami 1, 2 a 3:</p>

<pre>
<strong>1‿2‿3</strong>
&nbsp;
⟨ 1 2 3 ⟩
</pre>

<p>Existuje taktéž funkce nazvaná <i>range</i>, která vrací seznam (ne vektor!)
s&nbsp;prvky od 0 omezené zadanou hodnotou. Jedná se tedy o obdobu funkce
<i>iota</i> z&nbsp;klasického APL:</p>

<pre>
<strong>↕ 6</strong>
⟨ 0 1 2 3 4 5 ⟩
</pre>

<p>Další užitečná funkce se jmenuje <i>reshape</i> a slouží k&nbsp;vytvoření
pole o zadaném tvaru. Prvky pole lze získat například z&nbsp;vektoru, samotný
tvar pak taktéž typicky bývá představován seznamem:</p>

<pre>
<strong>1‿12 ⥊ ↕ 12</strong>
&nbsp;
┌─                           
╵ 0 1 2 3 4 5 6 7 8 9 10 11  
                            ┘
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto případě se nejdříve zavolá
funkce <i>range</i></div> vracející vektor a posléze funkce <i>reshape</i> se
dvěma parametry &ndash; samotný 1‿12 je v&nbsp;tomto případě skutečně literálem
a nijak nemění pořadí prováděných operací.</p>

<p>Konstrukce sloupcového vektoru:</p>

<pre>
<strong>12‿1 ⥊ ↕ 12</strong>
&nbsp;
┌─    
╵  0  
   1  
   2  
   3  
   4  
   5  
   6  
   7  
   8  
   9  
  10  
  11  
     ┘
</pre>

<p>Konstrukce pole 2&times;6 prvků:</p>

<pre>
<strong>2‿6 ⥊ ↕ 12</strong>
&nbsp;
┌─               
╵ 0 1 2 3  4  5  
  6 7 8 9 10 11  
                ┘
</pre>

<p>Konstrukce pole 3&times;4 prvků:</p>

<pre>
<strong>3‿4 ⥊ ↕ 12</strong>
&nbsp;
┌─           
╵ 0 1  2  3  
  4 5  6  7  
  8 9 10 11  
            ┘
</pre>

<p>Konstrukce pole 2&times;3&times;4 prvků:</p>

<pre>
<strong>2‿3‿4 ⥊ ↕ 12</strong>
&nbsp;
┌─           
╎ 0 1  2  3  
  4 5  6  7  
  8 9 10 11  
&nbsp;
  0 1  2  3  
  4 5  6  7  
  8 9 10 11  
            ┘
</pre>

<p><div class="rs-tip-major">Poznámka: původní vektor neobsahoval dostatek
prvků pro naplnění tohoto pole, takže se prvky v&nbsp;trojrozměrném výsledném
poli opakují.</div></p>

<p>Čtyřrozměrné pole:</p>

<pre>
<strong>2‿2‿2‿3 ⥊ ↕ 12</strong>
&nbsp;
┌─         
┆ 0  1  2  
  3  4  5  
&nbsp;
  6  7  8  
  9 10 11  
&nbsp;
&nbsp;
  0  1  2  
  3  4  5  
 &nbsp;    
  6  7  8  
  9 10 11  
          ┘
</pre>

<p>Šestirozměrné pole:</p>

<pre>
<strong>2‿2‿2‿2‿2‿2 ⥊ ↕ 32</strong>
&nbsp;
┌6       
┊  0  1  
   2  3  
&nbsp;
   4  5  
   6  7  
&nbsp;
...
...
...
</pre>

<p>Povšimněte si, že počet rozměrů pole je zakódován tvarem levého horního rohu
pole. Pouze u polí s&nbsp;šesti a více rozměry už musí být zapsán počet dimenzí
číselně:</p>

<pre>
 0     1     2     3     4     5
┌·    ┌─    ┌─    ┌─    ┌─    ┌─    ┌6    ┌7  …
·     ·     ╵     ╎     ┆     ┊     ┊     ┊   …
</pre>

<p><i>Boxing</i> atomu do pole:</p>

<pre>
<strong>&lt;3</strong>
&nbsp;
┌·   
· 3  
    ┘
</pre>

<p>Konstrukce pole, jehož všechny prvky mají shodnou hodnotu:</p>

<pre>
<strong>5‿5 ⥊ &lt;1</strong>
&nbsp;
┌─           
╵ 1 1 1 1 1  
  1 1 1 1 1  
  1 1 1 1 1  
  1 1 1 1 1  
  1 1 1 1 1  
            ┘
</pre>

<p>V&nbsp;tomto konkrétním případě však můžeme <i>boxing</i> vynechat:</p>

<pre>
<strong>5‿5 ⥊ 1</strong>
&nbsp;
┌─           
╵ 1 1 1 1 1  
  1 1 1 1 1  
  1 1 1 1 1  
  1 1 1 1 1  
  1 1 1 1 1  
            ┘
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Tabulka se všemi základními funkcemi jazyka BQN</h2>

<p>V&nbsp;této kapitole je uvedena tabulka obsahující všechny základní funkce
jazyka <i>BQN</i>. Originál tabulky je dostupný na adrese <a
href="https://pastebin.com/raw/ynsghrHM">https://pastebin.com/raw/ynsghrHM</a>:</p>

<table>
<tr><th>Funkce/modifikátor</th><th>Alternativní zápis</th><th>Popis</th><th>Funkce/modifikátor</th><th>Alternativní zápis</th><th>Popis</th></tr>
<tr><td>+</td><td> +</td><td>conjugate / add</td><td>⥊</td><td>\z</td><td>deshape / reshape</td></tr>
<tr><td>-</td><td> -</td><td>negate / subtract</td><td>∾</td><td>\,</td><td>join / join to</td></tr>
<tr><td>×</td><td>\=</td><td>sign / multiply</td><td>≍</td><td>\.</td><td>solo / couple</td></tr>
<tr><td>÷</td><td>\-</td><td>reciprocal / divide</td><td>↑</td><td>\r</td><td>prefixes / take</td></tr>
<tr><td>⋆</td><td>\+</td><td>exponential / power</td><td>↓</td><td>\c</td><td>sufixes / drop</td></tr>
<tr><td>√</td><td>\_</td><td>square root / nth root</td><td>↕</td><td>\d</td><td>range / windows</td></tr>
<tr><td>⌊</td><td>\b</td><td>floor / minimum</td><td>«</td><td>\H</td><td>nudge / shift before</td></tr>
<tr><td>⌈</td><td>\B</td><td>ceiling / maximum</td><td>»</td><td>\L</td><td>nudge after / shift after</td></tr>
<tr><td>∧</td><td>\t</td><td>sort up / and</td><td>⌽</td><td>\q</td><td>reverse / rotate</td></tr>
<tr><td>∨</td><td>\v</td><td>sort down / or</td><td>⍉</td><td>\a</td><td>transpose / reorder axes</td></tr>
<tr><td>¬</td><td>\~</td><td>not / span</td><td>/</td><td> /</td><td>indices / replicate</td></tr>
<tr><td>|</td><td>| </td><td>absolute value / modulus</td><td>⊏</td><td>\i</td><td>first cell / select</td></tr>
<tr><td>≤</td><td>\&lt;</td><td>less than or equal to</td><td>⊑</td><td>\I</td><td>first / pick</td></tr>
<tr><td>&lt;;</td><td>&lt;</td><td>enclose / less than</td><td>⊐</td><td>\o</td><td>classify / index of</td></tr>
<tr><td>&gt;</td><td>&gt;</td><td>merge / greater than</td><td>⊒</td><td>\O</td><td>occurence count / progressive index of</td></tr>
<tr><td>≥</td><td>\&gt;</td><td>greater than or equal to</td><td>⍋</td><td>\T</td><td>grade up / bins up</td></tr>
<tr><td>=</td><td> =</td><td>rank / equals</td><td>⍒</td><td>\V</td><td>grade down / bins down</td></tr>
<tr><td>≠</td><td>\/</td><td>length / not equals</td><td>∊</td><td>\e</td><td>mark first / member of</td></tr>
<tr><td>≡</td><td>\m</td><td>depth / match</td><td>⍷</td><td>\E</td><td>deduplicate / find</td></tr>
<tr><td>≢</td><td>\M</td><td>shape / not match</td><td>⊔</td><td>\u</td><td>group indices / group</td></tr>
<tr><td>⊣</td><td>\{</td><td>identity / left</td><td>!</td><td> !</td><td>assert / assert with message</td></tr>
<tr><td>⊢</td><td>\}</td><td>identity / right</td><td>&nbsp;</td><td></td><td>&nbsp;</tr></tr>
</table>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že většina funkcí
existuje jak v&nbsp;monadické, tak i v&nbsp;dyadické podobě, přičemž význam
bývá &bdquo;logický&ldquo; (podíl vs.&nbsp;výpočet převrácené hodnoty atd.).
Alternativní zápis je podporován i ve webové variantě jazyka BQN &ndash;
v&nbsp;tomto případě po stisku prefixové klávesy (což je zpětné lomítko) pruh
s&nbsp;dostupnými funkcemi a modifikátory změní svoji barvu.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Modifikátor <i>table</i></h2>

<p>V&nbsp;článku o programovacím jazyku APL jsme se zmínili o <a
href="https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/#k14">operátoru
nazvaném &bdquo;outer product&ldquo;</a>. Podobný koncept existuje i
v&nbsp;jazyku BQN, ovšem namísto pojmu &bdquo;operátor&ldquo; se zde používá
pojem &bdquo;modifikátor&ldquo; a z&nbsp;&bdquo;outer product&ldquo; se stal
modifikátor &bdquo;table&ldquo;. Tento modifikátor dokáže aplikovat zvolenou
dyadickou funkci (například +) na všechny kombinace prvků vstupních vektorů
nebo polí. Můžeme si například vytvořit pole s&nbsp;malou násobilkou (prozatím
v&nbsp;nedokonalé podobě):</p>

<pre>
<strong>(↕ 10) ×⌜ (↕ 10)</strong>
&nbsp;
┌─                             
╵ 0 0  0  0  0  0  0  0  0  0  
  0 1  2  3  4  5  6  7  8  9  
  0 2  4  6  8 10 12 14 16 18  
  0 3  6  9 12 15 18 21 24 27  
  0 4  8 12 16 20 24 28 32 36  
  0 5 10 15 20 25 30 35 40 45  
  0 6 12 18 24 30 36 42 48 54  
  0 7 14 21 28 35 42 49 56 63  
  0 8 16 24 32 40 48 56 64 72  
  0 9 18 27 36 45 54 63 72 81  
                              ┘
</pre>

<p>Funkcí <i>drop</i> odstraníme ze vstupních vektorů nuly:</p>

<pre>
<strong>(1↓ (↕ 10)) ×⌜ (1↓ (↕ 10))</strong>
&nbsp;
┌─                           
╵ 1  2  3  4  5  6  7  8  9  
  2  4  6  8 10 12 14 16 18  
  3  6  9 12 15 18 21 24 27  
  4  8 12 16 20 24 28 32 36  
  5 10 15 20 25 30 35 40 45  
  6 12 18 24 30 36 42 48 54  
  7 14 21 28 35 42 49 56 63  
  8 16 24 32 40 48 56 64 72  
  9 18 27 36 45 54 63 72 81  
                            ┘
</pre>

<p>Ještě lepší je však vytvořit vektory s&nbsp;hodnotami od 1 do 10
(včetně):</p>

<pre>
<strong>(1 + (↕ 10)) ×⌜ (1 + (↕ 10))</strong>
&nbsp;
┌─                                
╵  1  2  3  4  5  6  7  8  9  10  
   2  4  6  8 10 12 14 16 18  20  
   3  6  9 12 15 18 21 24 27  30  
   4  8 12 16 20 24 28 32 36  40  
   5 10 15 20 25 30 35 40 45  50  
   6 12 18 24 30 36 42 48 54  60  
   7 14 21 28 35 42 49 56 63  70  
   8 16 24 32 40 48 56 64 72  80  
   9 18 27 36 45 54 63 72 81  90  
  10 20 30 40 50 60 70 80 90 100  
                                 ┘
</pre>

<p>Většina závorek je zbytečná, pochopitelně za předpokladu, že dodržíme
pravidlo vyhodnocování funkcí zprava doleva:</p>

<pre>
<strong>(1+↕10)×⌜1+↕10</strong>
&nbsp;
┌─                                
╵  1  2  3  4  5  6  7  8  9  10  
   2  4  6  8 10 12 14 16 18  20  
   3  6  9 12 15 18 21 24 27  30  
   4  8 12 16 20 24 28 32 36  40  
   5 10 15 20 25 30 35 40 45  50  
   6 12 18 24 30 36 42 48 54  60  
   7 14 21 28 35 42 49 56 63  70  
   8 16 24 32 40 48 56 64 72  80  
   9 18 27 36 45 54 63 72 81  90  
  10 20 30 40 50 60 70 80 90 100  
                                 ┘
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Další modifikátory jazyka BQN</h2>

anonymní funkce (podobně jako v lispu apod.)
funkce vyššího řádu (kombinátory atd.)
trains
kombinátory+trains -> tacit programming



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Programovací jazyk ivy</h2>

$ go install robpike.io/ivy@latest
go: downloading robpike.io/ivy v0.1.10

$ ./ivy
1+2
3

1 2 3 + 3 4 5
4 6 8



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>BQN: An APL Variant from Marshall Lochbaum (mlochbaum.github.io)<br />
<a href="https://news.ycombinator.com/item?id=24167804">https://news.ycombinator.com/item?id=24167804</a>
</li>

<li>Marshall Lochbaum<br />
<a href="https://www.aplwiki.com/wiki/Marshall_Lochbaum">https://www.aplwiki.com/wiki/Marshall_Lochbaum</a>
</li>

<li>BQN<br />
<a href="https://www.aplwiki.com/wiki/BQN">https://www.aplwiki.com/wiki/BQN</a>
</li>

<li>Co-dfns<br />
<a href="https://www.aplwiki.com/wiki/Co-dfns">https://www.aplwiki.com/wiki/Co-dfns</a>
</li>

<li>Array model<br />
<a href="https://www.aplwiki.com/wiki/Array_model#Based_array_theory">https://www.aplwiki.com/wiki/Array_model#Based_array_theory</a>
</li>

<li>Fonts for BQN<br />
<a href="https://mlochbaum.github.io/BQN/fonts.html">https://mlochbaum.github.io/BQN/fonts.html</a>
</li>

<li>Leading axis theory<br />
<a href="https://www.aplwiki.com/wiki/Leading_axis_theory">https://www.aplwiki.com/wiki/Leading_axis_theory</a>
</li>

<li>A based system for general arrays<br />
<a href="https://dl.acm.org/doi/abs/10.1145/586656.586663">https://dl.acm.org/doi/abs/10.1145/586656.586663</a>
</li>

<li>APL – A Glimpse of Heaven (2006)<br />
<a href="https://news.ycombinator.com/item?id=19325361">https://news.ycombinator.com/item?id=19325361</a>
</li>

<li>APL and J<br />
<a href="https://crypto.stanford.edu/~blynn/c/apl.html">https://crypto.stanford.edu/~blynn/c/apl.html</a>
</li>

<li>ivy (dokumentace)<br />
<a href="https://pkg.go.dev/robpike.io/ivy#section-readme">https://pkg.go.dev/robpike.io/ivy#section-readme</a>
</li>

<li>ivy na GitHubu<br />
<a href="https://github.com/robpike/ivy/">https://github.com/robpike/ivy/</a>
</li>

<li>Ivy na APL wiki<br />
<a href="https://aplwiki.com/wiki/Ivy">https://aplwiki.com/wiki/Ivy</a>
</li>

<li>Implementing a bignum calculator (slajdy)<br />
<a href="https://talks.godoc.org/github.com/robpike/ivy/talks/ivy.slide#1">https://talks.godoc.org/github.com/robpike/ivy/talks/ivy.slide#1</a>
</li>

<li>Implementing a bignum calculator - Rob Pike - golang-syd November 2014<br />
<a href="https://www.youtube.com/watch?v=PXoG0WX0r_E">https://www.youtube.com/watch?v=PXoG0WX0r_E</a>
</li>

<li>Rob Pike na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/Rob_Pike">https://en.wikipedia.org/wiki/Rob_Pike</a>
</li>

<li>Rob Pike na cat-v<br />
<a href="http://genius.cat-v.org/rob-pike/">http://genius.cat-v.org/rob-pike/</a>
</li>

<li>Jazyky umožňující operace s&nbsp;poli aneb rozsáhlý svět „array programmingu“<br />
<a href="https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/">https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/</a>
</li>

<li>Programovací technika nazvaná <i>tacit programming</i><br />
<a href="https://www.root.cz/clanky/programovaci-technika-nazvana-tacit-programming/">https://www.root.cz/clanky/programovaci-technika-nazvana-tacit-programming/</a>
</li>

<li>Oslava 55 let od vzniku první implementace jazyka APL<br />
<a href="https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/">https://www.root.cz/clanky/oslava-55-let-od-vzniku-prvni-implementace-programovaciho-jazyka-apl/</a>
</li>

<li>NuVoc<br />
<a href="https://code.jsoftware.com/wiki/NuVoc">https://code.jsoftware.com/wiki/NuVoc</a>
</li>

<li>J (programming language) [Wikipedia]<br />
<a href="https://en.wikipedia.org/wiki/J_%28programming_language%29">https://en.wikipedia.org/wiki/J_%28programming_language%29</a>
</li>

<li>J &ndash; Absolutely Essential Terms<br />
<a href="https://code.jsoftware.com/wiki/Vocabulary/AET">https://code.jsoftware.com/wiki/Vocabulary/AET</a>
</li>

<li>J &ndash; Atoms and Arrays<br />
<a href="https://code.jsoftware.com/wiki/Vocabulary/Nouns#Atom">https://code.jsoftware.com/wiki/Vocabulary/Nouns#Atom</a>
</li>

<li>Why J<br />
<a href="https://www.jsoftware.com/help/primer/why_j.htm">https://www.jsoftware.com/help/primer/why_j.htm</a>
</li>

<li>What is an Array?<br />
<a href="https://vector.org.uk/what-is-an-array/">https://vector.org.uk/what-is-an-array/</a>
</li>

<li>Comments<br />
<a href="http://www.gavilan.edu/csis/languages/comments.html">http://www.gavilan.edu/csis/languages/comments.html</a>
</li>

<li>Vector (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/Vector.html">https://mathworld.wolfram.com/Vector.html</a>
</li>

<li>n-Tuple (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/n-Tuple.html">https://mathworld.wolfram.com/n-Tuple.html</a>
</li>

<li>n-Vector (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/n-Vector.html">https://mathworld.wolfram.com/n-Vector.html</a>
</li>

<li>Matrix (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/Matrix.html">https://mathworld.wolfram.com/Matrix.html</a>
</li>

<li>Array (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/Array.html">https://mathworld.wolfram.com/Array.html</a>
</li>

<li>ND Arrays (Tensors) in different languages<br />
<a href="https://www.youtube.com/watch?v=WbpbEilgQBc">https://www.youtube.com/watch?v=WbpbEilgQBc</a>
</li>

<li>Extending APL to Infinity\<br />
<a href="https://www.jsoftware.com/papers/eem/infinity.htm">https://www.jsoftware.com/papers/eem/infinity.htm</a>
</li>

<li>Vector Library (R7RS-compatible)<br />
<a href="https://srfi.schemers.org/srfi-133/srfi-133.html">https://srfi.schemers.org/srfi-133/srfi-133.html</a>
</li>

<li>Vectors (pro Gauche)<br />
<a href="https://practical-scheme.net/gauche/man/gauche-refe/Vectors.html">https://practical-scheme.net/gauche/man/gauche-refe/Vectors.html</a>
</li>

<li>Kawa: Compiling Scheme to Java<br />
<a href="https://www.mit.edu/afs.new/sipb/project/kawa/doc/kawa-tour.html">https://www.mit.edu/afs.new/sipb/project/kawa/doc/kawa-tour.html</a>
</li>

<li>Kawa in Languages shootout<br />
<a href="http://per.bothner.com/blog/2010/Kawa-in-shootout/">http://per.bothner.com/blog/2010/Kawa-in-shootout/</a>
</li>

<li>Kawa 2.0 Supports Scheme R7RS<br />
<a href="https://developers.slashdot.org/story/14/12/13/2259225/kawa-20-supports-scheme-r7rs/">https://developers.slashdot.org/story/14/12/13/2259225/kawa-20-supports-scheme-r7rs/</a>
</li>

<li>Kawa — fast scripting on the Java platform<br />
<a href="https://lwn.net/Articles/623349/">https://lwn.net/Articles/623349/</a>
</li>

<li>Incanter is a Clojure-based, R-like platform for statistical computing and graphics.<br />
<a href="http://incanter.org/">http://incanter.org/</a>
</li>

<li>Evolution of incanter (Gource Visualization)<br />
<a href="https://www.youtube.com/watch?v=TVfL5nPELr4">https://www.youtube.com/watch?v=TVfL5nPELr4</a>
</li>

<li>Questions tagged [incanter] (na Stack Overflow)<br />
<a href="https://stackoverflow.com/questions/tagged/incanter?sort=active">https://stackoverflow.com/questions/tagged/incanter?sort=active</a>
</li>

<li>Data Sorcery with Clojure<br />
<a href="https://data-sorcery.org/contents/">https://data-sorcery.org/contents/</a>
</li>

<li>Back to the Future: Lisp as a Base for a Statistical Computing System<br />
<a href="https://rd.springer.com/chapter/10.1007/978-3-7908-2084-3_2">https://rd.springer.com/chapter/10.1007/978-3-7908-2084-3_2</a>
</li>

<li>Incanter Cheat Sheet<br />
<a href="http://incanter.org/docs/incanter-cheat-sheet.pdf">http://incanter.org/docs/incanter-cheat-sheet.pdf</a>
</li>

<li>Back to the Future: Lisp as a Base for a Statistical Computing System (celá verze článku)<br />
<a href="https://www.researchgate.net/publication/227019917_Back_to_the_Future_Lisp_as_a_Base_for_a_Statistical_Computing_System">https://www.researchgate.net/publication/227019917_Back_to_the_Future_Lisp_as_a_Base_for_a_Statistical_Computing_System</a>
</li>

<li>BQN: finally, an APL for your flying saucer<br />
<a href="https://mlochbaum.github.io/BQN/">https://mlochbaum.github.io/BQN/</a>
</li>

<li>Is BQN stable?<br />
<a href="https://mlochbaum.github.io/BQN/commentary/stability.html">https://mlochbaum.github.io/BQN/commentary/stability.html</a>
</li>

<li>Specification: BQN system-provided values<br />
<a href="https://mlochbaum.github.io/BQN/spec/system.html">https://mlochbaum.github.io/BQN/spec/system.html</a>
</li>

<li>Tutorial: BQN expressions<br />
<a href="https://mlochbaum.github.io/BQN/tutorial/expression.html">https://mlochbaum.github.io/BQN/tutorial/expression.html</a>
</li>

<li>BQN primitives<br />
<a href="https://mlochbaum.github.io/BQN/doc/primitive.html">https://mlochbaum.github.io/BQN/doc/primitive.html</a>
</li>

<li>Function trains<br />
<a href="https://mlochbaum.github.io/BQN/doc/train.html">https://mlochbaum.github.io/BQN/doc/train.html</a>
</li>

<li>BQN community links<br />
<a href="https://mlochbaum.github.io/BQN/community/index.html">https://mlochbaum.github.io/BQN/community/index.html</a>
</li>

<li>BQN UV<br />
<a href="https://observablehq.com/@lsh/bqn-uv">https://observablehq.com/@lsh/bqn-uv</a>
</li>

<li>APL Wiki<br />
<a href="https://aplwiki.com/wiki/">https://aplwiki.com/wiki/</a>
</li>

<li>The Array Cast<br />
<a href="https://www.arraycast.com/episodes/episode-03-what-is-an-array">https://www.arraycast.com/episodes/episode-03-what-is-an-array</a>
</li>

<li>EnthusiastiCon 2019 &ndash; An Introduction to APL<br />
<a href="https://www.youtube.com/watch?v=UltnvW83_CQ">https://www.youtube.com/watch?v=UltnvW83_CQ</a>
</li>

<li>Dyalog<br />
<a href="https://www.dyalog.com/">https://www.dyalog.com/</a>
</li>

<li>Try APL!<br />
<a href="https://tryapl.org/">https://tryapl.org/</a>
</li>

<li>Lisp-Stat Information<br />
<a href="http://homepage.cs.uiowa.edu/~luke/xls/xlsinfo/">http://homepage.cs.uiowa.edu/~luke/xls/xlsinfo/</a>
</li>

<li>Sample Plots in Incanter<br />
<a href="https://github.com/incanter/incanter/wiki/Sample-Plots-in-Incanter#line">https://github.com/incanter/incanter/wiki/Sample-Plots-in-Incanter#line</a>
</li>

<li>vectorz-clj<br />
<a href="https://github.com/mikera/vectorz-clj">https://github.com/mikera/vectorz-clj</a>
</li>

<li>vectorz &ndash; Examples<br />
<a href="https://github.com/mikera/vectorz-clj/wiki/Examples">https://github.com/mikera/vectorz-clj/wiki/Examples</a>
</li>

<li>Basic Vector and Matrix Operations in Julia: Quick Reference and Examples<br />
<a href="https://queirozf.com/entries/basic-vector-and-matrix-operations-in-julia-quick-reference-and-examples">https://queirozf.com/entries/basic-vector-and-matrix-operations-in-julia-quick-reference-and-examples</a>
</li>

<li>Vectors and matrices in Julia<br />
<a href="https://fncbook.github.io/v1.0/linsys/demos/matrices-julia.html">https://fncbook.github.io/v1.0/linsys/demos/matrices-julia.html</a>
</li>

<li>Array vs Matrix in R Programming<br />
<a href="https://www.geeksforgeeks.org/array-vs-matrix-in-r-programming/">https://www.geeksforgeeks.org/array-vs-matrix-in-r-programming/</a>
</li>

<li>Concurrency (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Category:Concurrency_%28computer_science%29">https://en.wikipedia.org/wiki/Category:Concurrency_%28computer_science%29</a>
</li>

<li>Koprogram<br />
<a href="https://cs.wikipedia.org/wiki/Koprogram">https://cs.wikipedia.org/wiki/Koprogram</a>
</li>

<li>Coroutine<br />
<a href="https://en.wikipedia.org/wiki/Coroutine">https://en.wikipedia.org/wiki/Coroutine</a>
</li>

<li>Coroutines in C<br />
<a href="http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html">http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html</a>
</li>

<li>S-expression (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/S-expression">https://en.wikipedia.org/wiki/S-expression</a>
</li>

<li>S-Expressions (Rosetta Code)<br />
<a href="http://rosettacode.org/wiki/S-Expressions">http://rosettacode.org/wiki/S-Expressions</a>
</li>

<li>Introducing Julia/Metaprogramming<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming">https://en.wikibooks.org/wiki/Introducing_Julia/Metaprogramming</a>
</li>

<li>Tutorial for the Common Lisp Loop Macro<br />
<a href="http://www.ai.sri.com/pkarp/loop.html">http://www.ai.sri.com/pkarp/loop.html</a>
</li>

<li>Clojure Macro Tutorial (Part I, Getting the Compiler to Write Your Code For You)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-i-getting.html</a>
</li>

<li>Clojure Macro Tutorial (Part II: The Compiler Strikes Back)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-compiler.html</a>
</li>

<li>Clojure Macro Tutorial (Part III: Syntax Quote)<br />
<a href="http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html">http://www.learningclojure.com/2010/09/clojure-macro-tutorial-part-ii-syntax.html</a>
</li>

<li>Clojure Macros and Metaprogramming<br />
<a href="http://clojure-doc.org/articles/language/macros.html">http://clojure-doc.org/articles/language/macros.html</a>
</li>

<li>Fatvat &ndash; Exploring functional programming: Clojure Macros<br />
<a href="http://www.fatvat.co.uk/2009/02/clojure-macros.html">http://www.fatvat.co.uk/2009/02/clojure-macros.html</a>
</li>

<li>CS 2101 Parallel Computing with Julia<br />
<a href="https://www.coursehero.com/file/11508091/CS-2101-Parallel-Computing-with-Julia/">https://www.coursehero.com/file/11508091/CS-2101-Parallel-Computing-with-Julia/</a>
</li>

<li>Julia By Example<br />
<a href="https://samuelcolvin.github.io/JuliaByExample/">https://samuelcolvin.github.io/JuliaByExample/</a>
</li>

<li>Array Programming<br />
<a href="https://en.wikipedia.org/wiki/Array_programming">https://en.wikipedia.org/wiki/Array_programming</a>
</li>

<li>Discovering Array Languages<br />
<a href="http://archive.vector.org.uk/art10008110">http://archive.vector.org.uk/art10008110</a>
</li>

<li>no stinking loops -- Kalothi<br />
<a href="http://www.nsl.com/">http://www.nsl.com/</a>
</li>

<li>Vector (obsahuje odkazy na články, knihy a blogy o programovacích jazycích APL, J a K)<br />
<a href="http://www.vector.org.uk/">http://www.vector.org.uk/</a>
</li>

<li>APL Interpreters<br />
<a href="http://www.vector.org.uk/?area=interpreters">http://www.vector.org.uk/?area=interpreters</a>
</li>

<li>APL_(programming_language<br />
<a href="http://en.wikipedia.org/wiki/APL_(programming_language">http://en.wikipedia.org/wiki/APL_(programming_language</a>
</li>

<li>APL FAQ<br />
<a href="http://www.faqs.org/faqs/apl-faq/">http://www.faqs.org/faqs/apl-faq/</a>
</li>

<li>APL FAQ (nejnovější verze)<br />
<a href="http://home.earthlink.net/~swsirlin/apl.faq.html">http://home.earthlink.net/~swsirlin/apl.faq.html</a>
</li>

<li>A+<br />
<a href="http://www.aplusdev.org/">http://www.aplusdev.org/</a>
</li>

<li>APLX<br />
<a href="http://www.microapl.co.uk/">http://www.microapl.co.uk/</a>
</li>

<li>FreeAPL<br />
<a href="http://www.pyr.fi/apl/index.htm">http://www.pyr.fi/apl/index.htm</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>J: a modern, high-level, general-purpose, high-performance programming language<br />
<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a>
</li>

<li>K, Kdb: an APL derivative for Solaris, Linux, Windows<br />
<a href="http://www.kx.com">http://www.kx.com</a>
</li>

<li>openAPL (GPL)<br />
<a href="http://sourceforge.net/projects/openapl">http://sourceforge.net/projects/openapl</a>
</li>

<li>Parrot APL (GPL)<br />
<a href="http://www.parrotcode.org/">http://www.parrotcode.org/</a>
</li>

<li>Learning J (Roger Stokes)<br />
<a href="http://www.jsoftware.com/help/learning/contents.htm">http://www.jsoftware.com/help/learning/contents.htm</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Main_Page">http://rosettacode.org/wiki/Main_Page</a>
</li>

<li>Why APL<br />
<a href="http://www.acm.org/sigapl/whyapl.htm">http://www.acm.org/sigapl/whyapl.htm</a>
</li>

<li>Introducing Julia/Functions<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Functions">https://en.wikibooks.org/wiki/Introducing_Julia/Functions</a>
</li>

<li>Functions (Julia documentation)<br />
<a href="https://docs.julialang.org/en/v1/manual/functions/">https://docs.julialang.org/en/v1/manual/functions/</a>
</li>

<li>Evaluate binomial coefficients<br />
<a href="http://rosettacode.org/wiki/Evaluate_binomial_coefficients">http://rosettacode.org/wiki/Evaluate_binomial_coefficients</a>
</li>

<li>Ackermann function<br />
<a href="http://rosettacode.org/wiki/Ackermann_function">http://rosettacode.org/wiki/Ackermann_function</a>
</li>

<li>Julia (front page)<br />
<a href="http://julialang.org/">http://julialang.org/</a>
</li>

<li>Julia &ndash; dokumentace<br />
<a href="http://docs.julialang.org/">http://docs.julialang.org/</a>
</li>

<li>Julia &ndash; repositář na GitHubu<br />
<a href="https://github.com/JuliaLang/julia">https://github.com/JuliaLang/julia</a>
</li>

<li>Julia (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29">https://en.wikipedia.org/wiki/Julia_%28programming_language%29</a>
</li>

<li>IJulia<br />
<a href="https://github.com/JuliaLang/IJulia.jl">https://github.com/JuliaLang/IJulia.jl</a>
</li>

<li>Introducing Julia<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia">https://en.wikibooks.org/wiki/Introducing_Julia</a>
</li>

<li>Julia: the REPL<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL">https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL</a>
</li>

<li>Month of Julia<br />
<a href="https://github.com/DataWookie/MonthOfJulia">https://github.com/DataWookie/MonthOfJulia</a>
</li>

<li>Learn X in Y minutes (where X=Julia)<br />
<a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a>
</li>

<li>New Julia language seeks to be the C for scientists<br />
<a href="http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html">http://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html</a>
</li>

<li>Julia: A Fast Dynamic Language for Technical Computing<br />
<a href="http://karpinski.org/publications/2012/julia-a-fast-dynamic-language">http://karpinski.org/publications/2012/julia-a-fast-dynamic-language</a>
</li>

<li>The LLVM Compiler Infrastructure<br />
<a href="http://llvm.org/">http://llvm.org/</a>
</li>

<li>Julia: benchmarks<br />
<a href="http://julialang.org/benchmarks/">http://julialang.org/benchmarks/</a>
</li>

<li>Type system<br />
<a href="https://en.wikipedia.org/wiki/Type_system">https://en.wikipedia.org/wiki/Type_system</a>
</li>

<li>Half-precision floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Half-precision_floating-point_format">https://en.wikipedia.org/wiki/Half-precision_floating-point_format</a>
</li>

<li>Dartmouth BASIC<br />
<a href="https://en.wikipedia.org/wiki/Dartmouth_BASIC">https://en.wikipedia.org/wiki/Dartmouth_BASIC</a>
</li>

<li>BASIC 4th Edition<br />
<a href="http://www.bitsavers.org/pdf/dartmouth/BASIC_4th_Edition_Jan68.pdf">http://www.bitsavers.org/pdf/dartmouth/BASIC_4th_Edition_Jan68.pdf</a>
</li>

<li>VECTRAN<br />
<a href="https://encyclopedia2.thefreedictionary.com/VECTRAN">https://encyclopedia2.thefreedictionary.com/VECTRAN</a>
</li>

<li>Comparison of programming languages (array)<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array)">https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array)</a>
</li>

<li>BASIC at 50<br />
<a href="https://www.dartmouth.edu/basicfifty/commands.html">https://www.dartmouth.edu/basicfifty/commands.html</a>
</li>

<li>BBC Basic - arrays<br />
<a href="http://www.riscos.com/support/developers/bbcbasic/part2/arrays.html">http://www.riscos.com/support/developers/bbcbasic/part2/arrays.html</a>
</li>

<li>Datová struktura<br />
<a href="https://cs.wikipedia.org/wiki/Datov%C3%A1_struktura">https://cs.wikipedia.org/wiki/Datov%C3%A1_struktura</a>
</li>

<li>SIMD instrukce využívané v&nbsp;moderních mikroprocesorech řady x86<br />
<a href="https://www.root.cz/clanky/simd-instrukce-vyuzivane-v-modernich-mikroprocesorech-rady-x86/">https://www.root.cz/clanky/simd-instrukce-vyuzivane-v-modernich-mikroprocesorech-rady-x86/</a>
</li>

<li>SIMD instrukce v&nbsp;moderních mikroprocesorech řady x86 (2.část: SSE)<br />
<a href="https://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-2-cast-sse/">https://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-2-cast-sse/</a>
</li>

<li>SIMD instrukce v&nbsp;moderních mikroprocesorech řady x86 (3.část: SSE2)<br />
<a href="https://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-3-cast-sse2/">https://www.root.cz/clanky/simd-instrukce-v-modernich-mikroprocesorech-rady-x86-3-cast-sse2/</a>
</li>

<li>Inductive type<br />
<a href="https://en.wikipedia.org/wiki/Inductive_type">https://en.wikipedia.org/wiki/Inductive_type</a>
</li>

<li>JuliaMono, a font for programming<br />
<a href="https://github.com/cormullion/juliamono">https://github.com/cormullion/juliamono</a>
</li>

<li>It’s arrays all the way down<br />
<a href="https://xpqz.github.io/learnapl/array.html">https://xpqz.github.io/learnapl/array.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

