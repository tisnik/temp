<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
           "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory I</title>
<meta name="Author" content="Pavel Tisnovsky">
<meta name="Generator" content="vim">
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<style type="text/css">
         H1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background:#c00000; text-align:center; padding-left:1em}
         H2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background:#0000c0; padding-left:1em; text-align:left}
         H3  {font-family: arial, helvetica, sans-serif; color:#000000; background:#c0c0c0; padding-left:1em; text-align:left}
         H4  {font-family: arial, helvetica, sans-serif; color:#000000; background:#e0e0e0; padding-left:1em; text-align:left}
         A   {font-family: arial, helvetica, sans-serif;}
         P   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px}
         LI  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px}
         OL  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px}
         UL  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px}
         PRE {background:#e0e0e0}
</style>
</head>

<body bgcolor="#ffffff" text="#000000" link="#0000ff" alink="#ff00ff" vlink="#ff0000">

<h2>Programovací jazyk Forth a zásobníkové procesory I</h2>

<h4>Pavel Tišnovský</h4>

<br><br>

<h3>Úvodník</h3>

<p>S novým rokem začíná na Rootu i nový seriál, ve kterém bych chtěl čtenáře
seznámit s neobvyklým a současně velmi zajímavým programovacím jazykem Forth,
který se v dnešní době používá zejména ve vestavěných (embedded) systémech a
real-time prostředích. Pro urychlení běhu aplikací vytvořených ve Forthu byly
zkonstruovány specializované mikroprocesory, které místo sady obecných registrů
používají dvojici zásobníků. Také tyto procesory budou v dalších dílech tohoto
seriálu popsány.</p>



<h3>Obsah</h3>
<a href="#01">1. Prehistorie</a><br>
<a href="#02">2. Počátky Forthu</a><br>
<a href="#03">3. Výhody a nevýhody Forthu oproti jiným programovacím jazykům</a><br>
<a href="#04">4. Dostupnost veškeré funkcionality prostředí</a><br>
<a href="#05">5. Snadná přenositelnost vývojového prostředí</a><br>
<a href="#06">6. Obsah dalšího pokračování</a><br>



<a name="01"></a>
<h3>1. Prehistorie</h3>

<p>Na počátku sedmdesátých let minulého století, které byly z hlediska vývoje
výpočetní techniky a informačních technologií obecně velmi důležité až
přelomové, se většina aplikací stále programovala v <em>assembleru</em>,
přesněji řečeno v jazyku symbolických adres. Ve druhé polovině sedmdesátých let
se postupně začalo přecházet na vyšší programovací jazyky, zejména na
<em>Fortran</em> a <em>Basic</em>, protože se začaly vytvářet složitější
aplikace, jejichž vývoj v assembleru byl velmi namáhavý a pomalý (což můžu
nejenom já z vlastní zkušenosti potvrdit) a výsledný produkt byl většinou
nepřenositelný na jiné platformy.</p>

<p>Pro specializované úlohy, například pro v těch dobách vznikající projekty
umělé inteligence, nebo pro hromadné zpracování dat, byly vyvinuty další
programovací jazyky, zejména stále populární a velmi zajímavý <em>LISP</em> a
od něj odvozené <em>Scheme</em>. Tyto jazyky jsou i v současné době využívány v
mnoha aplikacích, jmenujme například AutoCAD, hru Abuse, grafický editor GIMP,
textový editor Emacs apod. Vývoj programovacích jazyků je naznačen na
přehledném grafu dostupném z adresy <a
href="http://www.levenez.com/lang/">http://www.levenez.com/lang/</a>.</p>

<p>Současně s těmito systémy a programovacími jazyky se začaly objevovat i
první systémy umožňující spuštění více procesů současně (dnes známý
<em>mutliprocessing</em>), například systém DEC RT-11. Víceuživatelské
(<em>multiuser</em>) operační systémy byly teprve ve svých počátcích, například
se jedná o systémy používané na minipočítačích PDP-11, které podporovaly
současnou práci až osmi uživatelů, i když současné připojení všech osmi
uživatelů znamenalo značné zpomalení jejich práce.</p>

<p>Pro tyto doby bylo také typické, že existovalo značné množství různých typů
počítačů (dnes bychom řekli spíše platforem), které mezi sebou nebyly
kompatibilní a to nejenom ze strany podporovaných aplikací a programových
knihoven, ale i například používanými formáty souborů (textové ASCII vs.
EBCDIC), sběrnicemi, porty, externími pamětmi (disky, páskové mechaniky)
apod.</p>

<p>Poznámka: <small>současnost je z tohoto pohledu pro programátory i výrobce
periferních zařízení mnohem jednodušší, protože i přes velké množství různých
digitálních zařízení, jako jsou osobní počítače, pracovní stanice, herní
konzole, PDA nebo "inteligentní" telefony, existují hardwarové i softwarové
standardy, které většina výrobců docela dodržuje (dokonce i jedna nejmenovaná
firma z Redmontu).</small></p>



<a name="02"></a>
<h3>2. Počátky Forthu</h3>

<p>Vývoj programovacího jazyka <em>Forth</em> probíhal velmi zajímavě. Nikdy se
totiž nejednalo o čistě "akademický produkt", který by měl reprezentovat
nějakou nosnou myšlenku (a tím méně o jazyk určený pro výuku programování), ale
o programovací jazyk, který vytvořil v podstatě jeden člověk pro svoji osobní
potřebu tak, aby přesně splňoval jeho pracovní požadavky.</p>

<p>Tento člověk se jmenuje <a href="http://www.colorforth.com/bio.html">Charles
"Chuck" Moore</a>, a dodnes patří velmi mezi zajímavé a současně velmi
rozporuplné osobnosti, které se podílely na rozvoji výpočetní techniky, zejména
vestavěných (embedded) řídicích systémů a systémů běžících v reálném čase.
Moore byl prý překvapen když zjistil, že systém, který vyvinul pro své potřeby,
používají i další lidé, kterým v jejich práci vyhovuje více než v té době
komerčně prosazovaný <em>Fortran</em>). Podrobnější informace o Chucku Moorovi
budou uvedeny v dalších pokračováních tohoto seriálu.</p>

<p>Do značně heterogenního prostředí počítačů a operačních systémů sedmdesátých
let přišel Moore se svým jazykem (či lépe řečeno celou vývojovou platformou)
<em>Forth</em>. Vývojové prostředí Forthu obsahovalo interaktivní editor,
interpret jazyka <em>Forth</em> a univerzální vazbu na <em>assembler</em>
upravený na právě provozovaný systém. Toto prostředí umožňovalo spouštět
souběžně více procesů a současně mohlo v systému nezávisle pracovat až 64
uživatelů, a to i na platformách, jejichž operační systém nebyl
multiuživatelský a dokonce ani multitaskový.</p>

<p>Ve skutečnosti <em>Forth</em> (resp. jeho vývojové prostředí, tyto dva pojmy
však většinou splývají) nepotřeboval pro své spuštění žádný operační systém,
pracoval totiž přímo s periferními zařízeními - z toho také vyplývá skutečnost,
že se zdrojové kódy vytvářených aplikací neukládaly tak jako dnes do textových
souborů, ale byly v předkompilované či přímo přeložené podobě uloženy v blocích
pevné délky (takzvaných <em>obrazovkách</em>), které se podle potřeby nahrávaly
do operační paměti počítače. Tyto programové bloky u mnoha systémů odpovídaly
velikosti bloků na disku (typická velikost je 512B a 1kB), což značně
urychlovalo práci s disky, protože se nemusely provádět složité přepočty adres
na bloky.</p>

<p>Chuck Moore začal vytvářet programovací jazyk <em>Forth</em> docela nevinně
- zpočátku se jednalo pouze o jakási makra, která používal při programování
aplikací z oblasti astronomie (jednalo se o poměrně složité astronomické
výpočty a řízení radioteleskopů). Tato makra se postupným vývojem proměnila v
translátor vyšších operací do jazyka symbolických adres (<em>assembleru</em>) a
v dalších letech do plnohodnotného interaktivního programovacího jazyka s
vlastním vývojovým prostředím.</p>

<p>Jedná se přitom o jazyk interpretovaný a současně interaktivní, proto se v
něm aplikace vyvíjí a především testují velmi jednoduše, zejména v porovnání s
jazyky kompilovanými, jako jsou dnes často používané programovací jazyky
<em>C</em>, <em>C++</em>, <em>Pascal</em>, <em>C#</em> a v podstatě i
<em>Java</em>. Všechny vyjmenované kompilované jazyky potřebují pro vývoj
programů mnoho podpůrných prostředků (editor, překladač, linker, debugger),
které však mezi sebou nejsou (a ani nemohou být) příliš propojeny - proto je v
nich ladění programů těžkopádné.</p>

<p>Ve <em>Forthu</em> jsou všechny tyto prostředky sloučeny, ale to v žádném
případě neznamená, že by vznikl mnohasetkilový moloch. Naopak, celé vývojové
prostředí <em>Forthu</em> zabírá jednotky, maximálně desítky kilobytů. Vývojové
prostředí <em>Forth</em>u je totiž účelně vytvořeno tak, že obsahuje jen
nejnutnější součásti (jak uvidíme v dalších dílech, je Chuck Moore zapřísáhlý
minimalista).</p>

<p>Výpočetní výkon počítačů v té době nebyl příliš vysoký, k čemuž se dále
přidávala poměrně vysoká cena za jednotku strojového času. Programátoři byli
nuceni vytvářet programy co nejrychlejší a s co nejmenšími nároky na kapacitu
operační paměti (v té době se to vyplatilo, v dnešním světě je jednodušší
programovat resp. "bastlit" co nejrychleji a ušetřené prostředky investovat do
nového hardwaru).  Časově kritické úseky aplikací se tedy neustále tvořily v
assembleru, k čemuž byl <em>Forth</em> dokonale připraven, neboť existovalo
jednoduché programátorské i aplikační rozhraní pro přístup k assembleru.</p>

<p>Také fakt, že <em>Forth</em> využíval vlastní blokový souborový systém (v
dnešních OS se využívá pouze "streamový" souborový systém, i když nejmenší
adresovatelná jednotka na disku je právě jeden blok), v některých aplikacích
značně urychlil práci se soubory. Týká se to zejména databázových aplikací a
aplikací pro zpracování obrazu (viz další díly).</p>



<a name="03"></a>
<h3>3. Výhody a nevýhody Forthu oproti jiným programovacím jazykům</h3>

<p>Je zajímavé, že téměř všechny univerzální programovací jazyky vychází z
některého ze tří "základních" programovacích jazyků nebo z jeho kombinací. Tyto
jazyky jsou <em>Algol/Fortran</em>, <em>LISP</em> a <em>Forth</em>. Všechny
tyto jazyky jsou velmi staré - několik desítek let. S vyjímkou <em>Algolu</em>
a <em>Fortranu</em>, který byly až na výjimky postupně nahrazeny
<em>Pascalem</em>, <em>Céčkem</em> a jeho následovníky, se <em>LISP</em> a
<em>Forth</em> stále používají a zejména <em>LISP</em> a <em>Scheme</em> je v
některých svých aspektech doposud nepřekonatelný.</p>

<p>Současně existují dva konzistentní a čisté modely programovacích jazyků:
model jazyka <em>C</em> a model jazyka <em>LISP</em>. Nově vznikající jazyky
vyšší úrovně postupně nabírají detaily jazyků z úrovně nižší a postupně se tak
přechází od modelu jazyka <em>C</em> (<em>Algol</em>, <em>Fortran</em>,
<em>Pascal</em>) k <em>LISP</em>-like jazykům, jako je <em>Ruby</em>,
<em>Python</em> a částečně i <em>Perl</em>.</p>

<p>Všechny univerzální programovací jazyky jsou samozřejmě Turingovsky úplné -
ve vyjadřovací schopnosti algoritmů mezi nimi není žádný rozdíl. Dosti
diametrálně se však liší složitostí, s jakou programátor ten Turingův stroj na
pozadí naprogramuje pro řešení daného problému.</p>

<p>Klasické jazyky, které leží v <em>C</em>-čkovské (resp. <em>Algol</em>ské)
generační větvi, se vyznačují tím, že striktně oddělují výrazy a příkazy.
Funkce jsou také považovány za něco odlišného od datových typů. V
<em>LISP</em>ovských jazycích jsou naopak výrazy, příkazy a funkce z hlediska
konstrukce totožné. Funkce jsou totiž považovány za běžný datový typ (datové
typy jsou samozřejmě v <em>LISP</em>ovských jazycích používány, ale odlišným
způsobem: proměnná nemá typ, ale hodnota ano. Ve skutečnosti je interně každá
proměnná pouze ukazatelem, což zjednodušuje práci s pamětí).</p>

<p><em>Forth</em> se v některých svých vlastnostech i původem přibližuje
programovacímu jazyku <em>Perl</em>. Oba dva jazyky byly vytvořeny pro
praktické použití, proto také jejich návrh není zdaleka tak "čistý" jako u
jazyků vytvořených v akademických institucích, jakými jsou například
<em>LISP</em>, <em>Pascal</em> nebo <em>SmallTalk</em>. To je v některých
ohledech výhodné (možnost vytváření kompaktních a elegantních algoritmů), ale
při programování komplikovanějších a rozsáhlejších systémů to může přinášet
potíže. <em>Forth</em> a <em>Perl</em> se však výrazně odlišují svým zaměřením
a datem vzniku. <em>Perl</em> je výborný při zpracování textových dat a na
one-line utilitky, <em>Forth</em> zase při složitějších výpočtech s
rozhodováním a velkým množstvím podprogramů a funkcí (ve <em>Forth</em>u jsou
podprogramy a funkce nazývané slova, bližší informace si uvedeme v dalších
dílech).</p>

<p><em>Forth</em> však <strong>nebyl</strong> vytvořen, aby napravil chyby či
nedostatky některého jiného programovacího jazyka, ale aby dovoloval psát
kompaktní a snadno odladitelné programy. Z minulosti známe celou řadu takových
"upgrade" programovacích jazyků, například <em>Algol-&gt;Pascal</em>,
<em>C-&gt;C++</em>, <em>C++-&gt;Java</em> nebo <em>C-&gt;C#</em>.
<em>Forth</em> je prostě odlišný, což je z hlediska programátora, který
přechází z jiného jazyka, nevýhodné, protože se musí naučit jinak přemýšlet o
výstavbě svých programů.</p>

<p>Mezi největší nevýhody <em>Forthu</em> patří z tohoto hlediska postfixová
notace zápisu matematických operací a řídicích příkazů, která mnoha
programátorům zpočátku vadí. Stejnou notaci však používá i <em>PostScript</em>
(který z <em>Forthu</em> vychází), takže jednou naučené zvyky je možné uplatnit
i v oblasti DTP apod. Druhou nevýhodou je, že za <em>Forthem</em> nestála a
dosud nestojí žádná opravdu silná firma, která by ho propagovala. Open source
komunita je orientovaná spíše do oblasti serverů a výkonných osobních počítačů,
<em>Forth</em> je však vhodný zejména pro embedded systémy, PDA, mobilní
telefony apod.</p>



<a name="04"></a>
<h3>4. Dostupnost veškeré funkcionality prostředí</h3>

<p>Zajímavé bylo, že Moore a jeho spolupracovníci vytvořili vývojové prostředí
<em>Forthu</em> v samotném <em>Forthu</em>. To s sebou přinášelo resp. stále
přináší několik výhod, které si popíšeme v dalších odstavcích.</p>

<p>První výhodou je dostupnost veškeré funkcionality překladače, editoru a
interpreteru jazyka <em>Forth</em> programátorovi aplikací. O tomto se nikdy
ani nesnilo programátorům, kteří pracují nebo znají pouze jazyky typu
<em>C</em>, <em>C++</em>, <em>Pascal</em> nebo <em>Java</em>. V těchto jazycích
například existují operace nad primitivními datovými typy (a to i v Javě,
kterou někteří dodnes mylně nazývají čistě objektový jazyk :-), jejichž význam
nelze žádným způsobem změnit.</p>

<p>Nelze také použít například část překladače pro parsing nebo pro překlad
kódu za běhu aplikace. Často by se to hodilo v situacích, kdy uživatel napíše
výraz, který se následně programově vyhodnotí. Ve <em>Forthu</em> s tímto nebyl
problém, proto bylo možné v aplikacích používat například celý integrovaný
editor nebo části interpreteru. Taktéž stránkovací mechanismus (dnes bychom
řekli virtuální paměť) použitý v prostředí Forthu byl automaticky použit při
běhu programu. Rozdělení programu a dat na bloky fixní délky bylo mnohdy s
úspěchem použito při zpracování databází, kdy jeden blok představoval jednu či
více položek v databázi, takže přístup k nim mohl být velmi rychlý (samozřejmě,
že v případě databází, kde má každý záznam jinou délku, je situace opačná).</p>

<p>Tyto vlastnosti <em>Forthu</em> bývají někdy srovnávány s vlastnostmi
programovacího jazyka <em>LISP</em>, ve kterém se programy reprezentovaly,
stejně jako data, ve formě seznamů. V <em>LISP</em>u však obecně neexistuje
možnost měnit samotný interpreter, i když v samotné reprezentaci programu a dat
zůstává <em>LISP</em> stále nepřekonán (proto se také pro přenos dat v jiných
jazycích vymýšlí mnohdy zbytečně složité věci jako XML; v <em>LISP</em>u je
přenos dat mnohem jednodušší - přenesou se data ve formě seznamu a program pro
zpracování těchto dat, taktéž ve formě seznamu). <em>LISP</em> je také jazyk na
mnohem vyšší úrovni (ve smyslu hierarchie jazyků) než <em>Forth</em>, se všemi
svými výhodami i nevýhodami.</p>



<a name="05"></a>
<h3>5. Snadná přenositelnost vývojového prostředí</h3>

<p>Druhou vlastností, kterou již první verze Forthu disponovaly, je fakt, že
samotné vývojové prostředí Forthu bylo velmi dobře přenositelné na další
platformy a/nebo operační systémy. Pro vlastní překlad celého prostředí i s
editorem a překladačem bylo potřeba pouze nadefinovat cca 60 primitiv
(základních příkazů či chcete-li operací), které prováděly "překlad" z
<em>Forthu</em> do <em>assembleru</em> dané platformy.</p>

<p>Uvádí se, že přenos <em>Forthu</em> na novou platformu zabral Moorovi necelé
dva týdny, což není mnoho, když si uvědomíme, že toto prostředí bylo
víceuživatelské, podporovalo i multitasking a ve své podstatě nahrazovalo celý
operační systém. Před vlastním přenosem (tj. překladem <em>Forthu</em>) bylo
někdy zapotřebí napsat nebo upravit assembler na tuto novou platformu, takže je
docela pravděpodobné, že sám Moore napsal více assemblerů pro různé typy
procesorů než kdokoli jiný (bylo by to dostačující pro zápis do Guinessovy
knihy rekordů? :-).</p>

<p>Určitě stojí za povšimnutí rozdíl mezi <em>Forthem</em> a dalšími
programovacími jazyky, u nichž se uvádí, že jsou určeny pro vytváření
multiplatformních aplikací. Zatímco jazyky jako je <em>Java</em> nebo
<em>SmallTalk</em> (viz například články vyšlé zde na <a
href="http://www.root.cz">Rootu</a>) potřebují pro spouštění aplikací operační
systém a nad ním simulovaný virtuální počítač (virtuální počítač - VM - obou
jazyků je představován zásobníkovým strojem! <em>Forth</em> je celý postaven
nad zásobníkem), je <em>Forth</em> určen pro nasazení do oblastí, kde se
operační systém nenachází, pouze je k dispozici operační paměť a někdy i
blokové paměťové zařízení (disk, disketa atd.). Virtuální počítač
<em>Forthu</em> tak neběží nad operačním systémem, ale přímo nad hardwarem, což
znamená odstranění jedné potenciálně zpomalující a mnohdy zbytečné vrstvy.</p>

<p>Ostatní programovací jazyky řeší multiplatformnost tak, že uživatele
odstiňují od operačního systému a hardwaru pomocí standardních knihoven
(<em>libc</em>, <em>math</em> apod.). Pro větší systémy je tento přístup určitě
výhodnější, ale pro systémy omezené jak výpočetním výkonem, tak i dostupnou
pamětí, nejsou standardní knihovny nejvhodnější - například pouze implementace
funkce <em>printf()</em> obsahuje více kódu než některé jednodušší interprety
<em>Basicu</em> nebo <em>Forthu</em>.</p>



<a name="06"></a>
<h3>6. Obsah dalšího pokračování</h3>

<p>V dalším pokračování tohoto seriálu si popíšeme, ve kterých oblastech
probíhalo nasazení Forthu, který sice při svém vzniku zcela jistě znamenal
revoluci ve vývoji programovacích jazyků, ale zpočátku musel čelit nedůvěře
programátorů - to ostatně není, vzhledem k jeho odlišnému přístupu k
programování, nic divného.</p>



<br><br><br><hr>
<small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small>
</body>
</html>

