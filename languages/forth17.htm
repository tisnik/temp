<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory XVII</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Forth a zásobníkové procesory XVII</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h2>Úvodník</h2>

<p>V dnešním pokračování seriálu o grafických kartách a grafických
akcelerátorech si popíšeme zásobníkové mikroprocesory Novix NC4016 a Harris RTX
2000. Tyto dva procesory jsou určené zejména do vestavěných systémů, kde je
požadována nízká cena, velká rychlost zpracování dat a zejména velmi rychlé
reakce na přerušení.</p>
 


<h2>Obsah</h2>
<p>
<a href="#k01">1. Šestnáctibitový zásobníkový mikroprocesor Novix NC4016</a><br />
<a href="#k02">2. Hardwarové parametry mikroprocesoru Novix NC4016</a><br />
<a href="#k03">3. Zásobníky a externí sběrnice mikroprocesoru Novix NC4016</a><br />
<a href="#k04">4. Instrukční sada mikroprocesoru Novix NC4016</a><br />
&nbsp; &nbsp; <a href="#k041">4.1 Horizontální kódování instrukcí</a><br />
&nbsp; &nbsp; <a href="#k042">4.2 Slova programovacího jazyka Forth, která lze provést pomocí jedné instrukce</a><br />
&nbsp; &nbsp; <a href="#k043">4.3 Složená Forthovská slova, která lze provést pomocí jedné instrukce</a><br />
<a href="#k05">5. Šestnáctibitový zásobníkový mikroprocesor Harris RTX 2000</a><br />
<a href="#k06">6. Jádro procesoru Harris RTX 2000</a><br />
<a href="#k07">7. Hardwarová konfigurace procesoru Harris RTX 2000</a><br />
<a href="#k08">8. Obsah dalšího pokračování</a><br />
</p>



<p><a name="k01" id="k01"></a></p>
<h2>1. Šestnáctibitový zásobníkový mikroprocesor Novix NC4016</h2>

<p>V oblasti vestavěných systémů se často používal šestnáctibitový zásobníkový
mikroprocesor nazvaný <em>Novix NC4016</em>, jehož prototypovým předchůdcem byl
<em>Novix NC4000</em>. Tento mikroprocesor, jež je navržený tak, aby bylo možné
co nejvíce instrukcí provést v jednom taktu CPU, což je zajisté výhodné,
například při zpracování přerušení, kdy není zapotřebí složitě přerušovat či
naopak dokončovat právě běžící instrukce. Celá instrukční sada tohoto
mikroprocesoru byla navržena tak, aby bylo možné co nejjednodušším a
nejrychlejším způsobem provádět kód napsaný v programovacím jazyku Forth. Mnoho
základních (primitivních) Forthovských slov je tak možné přeložit do jedné
instrukce, dokonce je možné do jedné strojové instrukce přeložit vhodně zvolené
<em>kombinace</em> Forthovských slov. Bližší informace o instrukční sadě budou
uvedeny ve <a href="#k04">čtvrté kapitole</a>. Mikroprocesor <em>Novix
NC4016</em> byl v minulosti použit například v různých řídicích real-time
systémech, ale také v řadičích CRT obrazovek, T1 switchích, řadičích laserových
tiskáren apod.</p>

<p>Mikroprocesor <em>Novix NC4016</em> je současně i prvním zásobníkovým
procesorem vytvořeným na jednom čipu, v minulosti používané zásobníkové
procesory byly většinou vytvořeny tak, že oddělovaly ALU a řídicí část. Mnoho
zásobníkových mikroprocesorů je založeno právě na <em>NC4016</em>, a to jak z
hlediska vnitřní architektury, tak i z hlediska horizontálně kódovaného
instrukčního souboru, který je díky tomu do velké míry ortogonální (což je,
zejména pokud se podíváme na základní Forthovská slova, poněkud překvapivé).
Bližší popis tohoto zajímavého mikroprocesoru bude rozdělen do několika
kapitol. Ve <a href="#k02">druhé kapitole</a> budou popsány některé hardwarové
detaily, <a href="#k03">kapitola třetí</a> je věnována ústřednímu bodu
zásobníkových procesorů, tj. vlastním zásobníkům a konečně ve <a
href="#k04">čtvrté kapitole</a> budou uvedeny podrobnější informace o
instrukční sadě a způsobu zápisu základních Forthovských slov v této instrukční
sadě.</p>



<p><a name="k02" id="k02"></a></p>
<h2>2. Hardwarové parametry mikroprocesoru Novix NC4016</h2>

<p>Tento šestnáctibitový zásobníkový mikroprocesor byl vytvořen pomocí cca 4000
logických hradel (ostatně z této hodnoty se odvozuje i samotné jméno
mikroprocesoru), pro implementaci byla použita v té době dostupná třímikronová
technologie HCMOS. Pouzdro procesoru obsahovalo 121 pinů (viz další povídání o
několika implementovaných sběrnicích) a bylo provedeno pro patice <em>PGA - Pin
Grid Array</em> (podobně, jako například starší mikroprocesory 486 a Pentium).
Taktovací frekvence byla rovna 8MHz, přičemž muselo být zaručeno, aby přístup
do paměti byl dvakrát tak rychlý, jako hodinový kmitočet (resp. jeho časová
základna). V dnešní době by tato podmínka byla neakceptovatelná, protože
dynamické paměti jsou mnohem pomalejší než moderní procesory, v minulosti tomu
však bylo zcela opačně - ostatně rychlost dynamických pamětí se o mnoho
nezvyšuje, pro procesory však stále platí známý Moorův zákon.</p>

<p>Interně jsou na procesoru vytvořeny sběrnice <strong>TBUS</strong> a
<strong>YBUS</strong>, které slouží k přenosu hodnot z a do aritmeticko-logické
jednotky. K ALU je připojen i interní registr <strong>TOP</strong>, který lze
použít jak pro vstup hodnot (operandů), tak i pro uložení výsledné hodnoty. ALU
obsahuje na vstupu dva interní registry označené <strong>T</strong> (<em>top of
data stack</em>) a <strong>N</strong> (<em>next data stack cell</em>). Kromě
toho se na procesoru nachází i čtyři další registry, které jsou viditelné i
programátorům.</p>

<p>Prvním z těchto registrů je známý registr <strong>PC</strong>, který je
napojený na specializovaný blok, který provádí operaci <strong>PC++</strong>.
Skoky lze provádět pouze po šestnácti bitech, podobně jako u předchozích
popisovaných zásobníkových mikroprocesorů. Dalším registrem je registr
<strong>I</strong>, (index) který slouží k rychlému řízení počítaných smyček.
Tento registr je chápán jako vrchol zásobníku návratových adres. K tomuto
registru je připojen specializovaný blok, který provádí operaci
<strong>I--</strong>. Dalším registrem je registr <strong>MD</strong>, který
slouží k násobení a dělení a registr <strong>SR</strong> zajišťující provedení
operace celočíselného umocnění.</p>



<p><a name="k03" id="k03"></a></p>
<h2>3. Zásobníky a externí sběrnice mikroprocesoru Novix NC4016</h2>

<p>Velmi zajímavé je řešení paměťového subsystému. Místo použití jedné sběrnice
pro čtení a zápis do paměti obsahuje tento mikroprocesor hned sběrnice tři.
Kromě programové paměti je totiž možné připojit i samostatnou paměť s uloženým
zásobníkem návratových adres a zásobníkem operandů. Díky použití tří
nezávislých sběrnic pro přístup ke třem paměťovým čipům bylo možné zajistit
provedení většiny instrukcí v jednom strojovém cyklu.</p>

<p>Kapacita zásobníku operandů je 256 elementů, které jsou umístěny ve
specializované paměti připojené na separátní sběrnici. Dvě nejvyšší buňky jsou
umístěny v interních registrech <strong>T</strong> a <strong>N</strong>. Tento
procesor však neobsahuje obvod, který by zjistil, že došlo k přetečení či
podtečení zásobníku operandů, takže ladění programů ve Forthu muselo být
prováděno jejich zdlouhavou interpretací.</p>

<p>Kapacita zásobníku návratových adres je taktéž rovna 256 elementům, které
jsou umístěny ve specializované paměti, která je odlišná od paměti použité pro
implementaci zásobníku operandů. Nejvyšší položka ze zásobníku návratových
adres je umístěna v interním registru <strong>I</strong>, takže provádění
smyček či dalších jednoduchých operací se zásobníkem návratových adres je velmi
rychlé.</p>



<p><a name="k04" id="k04"></a></p>
<h2>4. Instrukční sada mikroprocesoru Novix NC4016</h2>

<p>Mikroprocesor <em>Novix NC4016</em> byl prvním zásobníkovým mikroprocesorem,
který používal horizontální formát instrukcí. Na druhou stranu jsou zásobníkové
procesory dnes prakticky jediné, které tento formát používají, jakousi paralelu
je možné vidět pouze u některých procesorů typu <em>VLIW</em> (<em>Very Long
Instruction Word</em>). Všechny instrukce procesoru mají pevnou délku šestnáct
bitů, což velmi zjednodušuje celý vnitřní design.</p>



<p><a name="k041" id="k041"></a></p>
<h3>4.1 Horizontální kódování instrukcí</h3>

<p>Při použití horizontálního kódování instrukcí se v instrukčním slově přímo
nachází pole určená pro jednotlivé bloky na mikroprocesoru. Mezi tyto bloky
řadíme například ALU, řadič, interní sběrnice, interní registry, čítače apod.
Odpadá tak nutnost použití složité dekódovací jednotky. Instrukce jsou
rozděleny do několika kategorií, které se odlišují pomocí několika nejvyšších
bitů instrukce - jedná se tedy o princip vzdáleně podobný Huffmanovu kódu.
Popišme si nyní několik základních kategorií instrukcí:</p>

<h4>Instrukce typu <em>CALL</em></h4>

<p>Při kódování této instrukce je vždy nejvyšší (tj. patnáctý) bit nastavený na
nulu. Ostatní bity tvoří patnáctibitovou adresu, pomocí které je možné
adresovat 32k slov programové paměti. Vzhledem k tomu, že adresace vždy probíhá
po celých slovech, může mít programová paměť kapacitu 64kB, což je dostačující
pro prakticky všechny implementace vestavěných systémů postavených na
Forthu.</p>

<h4>Podmíněný skok</h4>

<p>Kód této instrukce je vytvořený tak, že nejvyšší bit je nastavený na
jedničku (tím se odlišuje od instrukce typu <em>call</em>) a druhý nejvyšší bit
je nulový. Další dva bity obsahují kód podmínky, při které nastane skok. Buď se
testuje hodnota uložená v interním registru <strong>T</strong>, nebo hodnota
indexového registru <strong>I</strong>. Zbývajících dvanáct bitů instrukčního
slova tvoří relativní adresu.</p>

<h4>Operace s ALU</h4>

<p>Tyto instrukce jsou vytvořeny tak, že nejvyšší čtyři bity obsahují bitový
vzorek <tt>1000</tt>. Na dalších třech bitech je zakódována jedna z osmi
funkcí, které může ALU provádět (<em>+</em>, <em>-</em>, <em>and</em>,
<em>or</em>, <em>xor</em>, <em>first</em>, <em>second</em>), jeden bit je
rezervován pro návrat z podprogramu (<em>return</em>), a další bity pro
specifikaci operací bitového posuvu a dělení (tyto operace se provádí mimo
ALU).</p>

<h4>Operace s pamětí</h4>

<p>Bity 15-13 obsahují bitový vzorek <tt>111</tt>. Spolu s ALU funkcemi (viz
výše) je možné provádět inkrementaci a dekrementaci o konstantu uloženou přímo
v instrukčním slovu. Tato konstanta má délku pět bitů, což je pro mnoho operací
dostačující.</p>

<h4>Načtení literálu</h4>

<p>Bity 15-13 obsahují bitový vzorek <tt>110</tt>. Načtení literálu je možné
kombinovat s ALU funkcemi a návratem z podprogramu. Vše se samozřejmě provádí v
jednom strojovém taktu.</p>



<p><a name="k042" id="k042"></a></p>
<h3>4.2 Slova programovacího jazyka Forth, která lze provést pomocí jedné instrukce</h3>

<p>Pomocí výše nastíněných typů instrukcí lze přímo vytvořit základní
(primitivní) Forthovská slova, která se díky tomu provedou v jednom strojovém
cyklu:</p>

<pre>

        :  (skok do podprogramu)  AND
        ;  (návrat z podprogramu) BRANCH
        !                         DROP
        +                         DUP
        -                         I
        0                         LIT (zápis konstanty)
        0&lt;                        NOP
        0BRANCH                   OR
        1+                        OVER
        1-                        R&gt;
        2*                        R@
        &gt;R                        SWAP
        @                         XOR

</pre>



<p><a name="k043" id="k043"></a></p>
<h3>4.3 Složená Forthovská slova, která lze provést pomocí jedné instrukce</h3>

<p>Vzhledem k tomu, že procesor <em>Novix NC4016</em> má instrukce navrženy
tak, že je v jedné instrukci možné kombinovat návrat z podprogramu, ALU operaci
a práci s literálem, je možné v jednom taktu (tj. v jedné instrukci) zakódovat
i několik Forthovských slov, například:</p>

<pre>

        nn                       @ +
        nn !                     @ +c
        nn +                     @ -
        nn +c                    @ -c
        nn -                     @ SWAP -
        nn -c                    @ SWAP -c
        nn @                     @ OR
        nn @ +                   @ XOR
        nn @ +c                  @ AND
        nn @ -                   DROP DUP
        nn @ -c                  DUP nn !
        nn @ AND                 DUP nn ! +
        nn @ SWAP -              DUP nn ! -
        nn @ SWAP -c             DUP nn ! AND
        nn @ OR                  DUP nn ! OR
        nn @ XOR                 DUP nn ! SWAP -
        nn AND                   DUP nn ! XOR
        nn I@                    DUP nn I!
        nn I@ +                  DUP nn I! +
        nn I@ -                  DUP nn I! -
        nn I@ AND                DUP nn I! AND
        nn I@ OR                 DUP nn I! OR
        nn I@ SWAP -             DUP nn I! SWAP -
        nn I@ XOR                DUP nn I! XOR
        nn I@!                   DUP @ SWAP nn +
        nn I!                    DUP @ SWAP nn -
        nn OR                    OVER +
        nn SWAP -                OVER +c
        nn SWAP -c               OVER -
        nn XOR                   OVER -c
        lit +                    OVER SWAP -
        lit +c                   OVER SWAP -c
        lit -                    R&gt; DROP
        lit -c                   R&gt; SWAP &gt;R
        lit AND                  SWAP -
        lit OR                   SWAP -c
        lit SWAP -               SWAP DROP
        lit SWAP -c              SWAP OVER !
        lit XOR                  SWAP OVER ! nn +
                                 SWAP OVER ! nn -

</pre>

<p>Ve výše uvedeném přehledu je pomocí znaků <em>nn</em> naznačeno, že se jedná
o pětibitovou konstantu, která je obsažena přímo v instrukčním slově.
<em>lit</em> naopak představuje "plný" šestnáctibitový literál, který je uložen
v programové paměti za instrukcí.</p>



<p><a name="k05" id="k05"></a></p>
<h2>5. Šestnáctibitový zásobníkový mikroprocesor Harris RTX 2000</h2>

<p><em>Stack machines have been successful mostly in embedded applications
where some real-time performance requirements might have been very costly to
meet with other technologies. The Harris RTX was not successful like the 486
but did see quite a few sales in its day until it was discontinued. I was told
it was used in some large product runs in Europe. There is stack machine
currently being designed for Postscript printers and also has been chosen for
the Web-Book product. It is a pretty complex processor with lots of things that
would make a C compiler happy.<br /> Jeff Fox</em></p>

<p>Mikroprocesor <em>Harris RTX 2000</em> byl vytvořen na základě výše
zmíněného mikroprocesoru <em>Novix NC4016</em>. Oproti tomuto procesoru však
došlo k mnohem větší integraci, což se projevilo i na nových funkčních blocích,
které byly přímo do jádra procesoru zahrnuty. Jednalo se především o integraci
zásobníkových pamětí, implementaci hardwarové násobičky, čítačů a časovačů.</p>



<p><a name="k06" id="k06"></a></p>
<h2>6. Jádro procesoru Harris RTX 2000</h2>

<p>Jádro zásobníkového mikroprocesoru <em>Harris RTX 2000</em> vychází z jádra
procesoru <em>Novix NC4016</em>, to znamená, že jsou vytvořeny interní sběrnice
<strong>YBUS</strong> a <strong>TBUS</strong>, stejně jako interní registry
<strong>TOP</strong>, <strong>T</strong>, <strong>N</strong>,
<strong>PC</strong> a <strong>I</strong>. Kromě toho je přidán i takzvaný
<em>page register</em>, který je možné použít pro rozšíření programové paměti z
původních 64kB na celý 1MB. Page register se tedy v mnohém podobá známým
segmentům procesorů <em>Intel x86</em>.</p>

<p>Kromě toho je v jádru procesoru implementována i hardwarová násobička 16x16
bitů, řadič přerušení (ten na předešlém procesoru chyběl) a tři čítače společně
s časovači (tj. dané čítače je možné ovládat buď pomocí externích signálů, nebo
pomocí hodin, před něž je připojena dělička). Zásobník operandů i zásobník
návratových adres mají kapacitu 256 položek a oba jsou vytvořeny přímo v
mikroprocesoru, odpadá tak nutnost použití speciálních sběrnic pro přístup k
externím pamětem.</p>



<p><a name="k07" id="k07"></a></p>
<h2>7. Hardwarová konfigurace procesoru Harris RTX 2000</h2>

<p>Na rozdíl od předchozího procesoru je mikroprocesor <em>Harris RTX 2000</em>
vytvořen pomocí dvoumikronové technologie CMOS, je zde tedy patrný velký pokrok
kupředu, alespoň co se týče míry integrace. Vzhledem k tomu, že oba zásobníky
jsou integrované přímo na procesoru, bylo možné snížit počet pinů na
přijatelných 84, jako pouzdro je použito <em>PGA</em> (<em>Pin Grid
Array</em>). Procesor je vytvořen tak, aby pracoval na frekvenci 10MHz,
výkonově tak zhruba odpovídá procesoru 286 pracujícím na 20MHz.</p>

<p>Při vývoji jádra tohoto mikroprocesoru byla použita technologie, ve které je
možné spojovat přímo jednotlivá logická hradla, čímž bylo umožněno
implementovat současně kombinační obvody s pamětí (registry, oba zásobníky
atd.). V dnešní době jsou pro podobné návrhy dostupné programovatelné obvody
FPGA, v minulosti však tyto možnosti neexistovaly, proto bylo nutné sáhnout po
"primitivnějším" řešení, které na druhou stranu dalo vývojářům větší možnosti
optimalizace jednotlivých funkčních bloků.</p>



<p><a name="k08" id="k08"></a></p>
<h2>8. Obsah dalšího pokračování</h2>

<p>V dalším pokračování tohoto seriálu budou popsány třicetidvoubitové
zásobníkové procesory <em>FRISC 3</em> a <em>RTX 32P</em>. Zajímavý je zejména
zmíněný <em>FRISC 3</em>, neboť u něj došlo k velkému nárůstu počtu zásobníků,
takže bylo možné provádět skutečně paralelní běh více programů (tj. nikoli
pomocí přepínání kontextu).</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small></p>
</body>
</html>

