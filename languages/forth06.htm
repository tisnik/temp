<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovací jazyk Forth a zásobníkové procesory VI</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=iso-8859-2" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovací jazyk Forth a zásobníkové procesory VI</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h2>Úvodník</h2>

<p>V dnešní části seriálu pojednávajícího o programovacím jazyku Forth se
budeme věnovat způsobům manipulace s proměnnými, logickým operátorům a
operacím, relačním operátorům a v neposlední řadě také výstavbě složitějších
algoritmů pomocí rekurze a programových smyček.</p>



<h2>Obsah</h2>
<p>
<a href="#k01">1. Práce s proměnnými</a><br />
&nbsp; &nbsp; <a href="#k011">1.1 Vytvoření proměnné</a><br />
&nbsp; &nbsp; <a href="#k012">1.2 Uložení hodnoty do proměnné</a><br />
&nbsp; &nbsp; <a href="#k013">1.3 Získání hodnoty z proměnné</a><br />
&nbsp; &nbsp; <a href="#k014">1.4 Tisk hodnoty proměnné</a><br />
<a href="#k02">2. Logické hodnoty a logické operace</a><br />
&nbsp; &nbsp; <a href="#k021">2.1 Unární a binární logické operace</a><br />
&nbsp; &nbsp; <a href="#k022">2.2 Pravdivostní tabulky binárních logických operací</a><br />
<a href="#k03">3. Relační operátory</a><br />
<a href="#k04">4. Rekurze</a><br />
<a href="#k05">5. Nepočítané smyčky</a><br />
&nbsp; &nbsp; <a href="#k051">5.1 Smyčky s testem na začátku</a><br />
&nbsp; &nbsp; <a href="#k052">5.2 Smyčky s testem na konci</a><br />
&nbsp; &nbsp; <a href="#k053">5.3 Nekonečné smyčky</a><br />
<a href="#k06">6. Obsah dalšího pokračování</a><br />
</p>



<p><a name="k01" id="k01"></a></p>
<h2>1. Práce s proměnnými</h2>

<p><em>The only problem we Forthers have is that each time someone tells us he
has found something new, we answer: "Oh, I know three guys, none of them has a
CS degree, and each one invented this independently 10 years ago, but they had
a much better approach than you". He'll hate you for that.<br /> Bernd Paysan
</em></p>

<p>Programovací jazyk Forth podporuje, podobně jako prakticky všechny ostatní
programovací jazyky, práci s proměnnými, které však mají poněkud odlišný význam
od jiných programovacích jazyků. Ve Forthu se totiž proměnné používají převážně
k relativně trvalému uložení výsledků výpočtů; pro vlastní výpočty, řízení
výpočtů a uložení mezivýsledků se používá zásobník operandů a zásobník
návratových adres. Nutnost použití proměnných pro uložení výsledků mezivýpočtů
ve Forthu prakticky vždy ukazuje na špatně navržený program.</p>

<p>V dalších odstavcích si popíšeme všechny základní činnosti prováděné s
proměnnými, tj. jejich vytvoření v operační paměti (deklaraci), uložení hodnoty
do proměnné, zpětné získání uložené hodnoty a také tisk aktuální hodnoty
proměnné na standardní výstup. Pro všechny tyto činnosti není zapotřebí
vytvářet specializované jazykové konstrukce, vystačíme si pouze s prostředky
jakými jsou slovník (<em>dictionary</em>) a slova v něm uložená
(<em>words</em>).</p>



<p><a name="k011" id="k011"></a></p>
<h3>1.1 Vytvoření proměnné</h3>

<p>Pro deklaraci číselné proměnné se používá slovo <strong>variable</strong>,
po němž následuje jméno proměnné. Jelikož je jméno proměnné taktéž považováno
za slovo, nemělo by kolidovat s žádným jiným jménem, jinak by došlo k jejich
"zastínění". Příklad deklarace dvou proměnných nazvaných <em>one</em> a
<em>two</em>:</p>

<pre>

variable one
variable two

</pre>

<p>Při běhu programu se jméno proměnné vždy nahradí adresou, na které je
uložena hodnota proměnné.</p>



<p><a name="k012" id="k012"></a></p>
<h3>1.2 Uložení hodnoty do proměnné</h3>

<p>Do proměnných se samozřejmě mohou ukládat hodnoty. Pro tento účel se používá
slovo <strong>!</strong> (vykřičník), které se nazývá <em>store</em>. Při
použití slova <strong>!</strong> musí být na druhém místě zásobníku operandů
uložena hodnota, která se má do proměnné uložit a na vrcholu zásobníku musí být
adresa proměnné, tj. paměťového místa s uloženou hodnotou. Na následujícím kódu
je ukázáno, jakým způsobem se do výše deklarovaných proměnných zapíše jejich
hodnota:</p>

<pre>

1 one !
2 two !

</pre>

<p>Vzhledem k tomu, že hodnota pro uložení musí být umístěna na druhém místě v
zásobníku operandů, je možné sloučit výpočet a přiřazení:</p>

<pre>

1 1 + two !

</pre>

<p>Pokud někomu nevyhovuje způsob psaní slova <strong>!</strong>, tj. nechce se
ztratit ve změti "paznaků", může si samozřejmě nadefinovat vlastní slovo se
stejným významem a jiným jménem, například:</p>

<pre>

: store ! ;

</pre>

<p>které je možné použít následovně:</p>

<pre>

1 one store
1 1 + two store

</pre>



<p><a name="k013" id="k013"></a></p>
<h3>1.3 Získání hodnoty z proměnné</h3>

<p>Pro získání (přečtení) hodnoty proměnné a uložení na zásobník operandů se
používá slovo <strong>@</strong> (zavináč), které se čte jako <em>fetch</em>.
Před použitím tohoto slova se musí na zásobník operandů uložit adresa proměnné
reprezentovaná jejím jménem. Po provedení operace bude na vrcholu zásobníku
uložena aktuální hodnota zvolené proměnné. Příklad výpisu hodnot obou výše
zmíněných proměnných:</p>

<pre>

one @ . cr
two @ . cr

</pre>

<p>Slovo <strong>@</strong> je možné opět nahradit "ukecanější" variantou,
například:</p>

<pre>

: fetch @ ;

</pre>

<p>a po přidání dalších slov <strong>print</strong> a <strong>multiply</strong>:</p>

<pre>

: print . cr ;
: multiply * ;

</pre>

<p>se již Forth prakticky stává zjednodušenou angličtinou:</p>

<pre>

variable acceleration
variable mass
variable force

10 mass store
3 acceleration store
mass fetch
acceleration fetch
multiply dup print
force store

</pre>



<p><a name="k014" id="k014"></a></p>
<h3>1.4 Tisk hodnoty proměnné</h3>

<p>Přímočarý způsob tisku hodnoty proměnné spočívá v uložení její hodnoty na
zásobník s následným použitím slova <strong>.</strong> (tečka) pro tisk hodnoty
uložené na vrcholu zásobníku - to jsme ostatně viděli už v předchozích
příkladech. Sekvence slov tedy může pro proměnnou <em>a</em> vypadat
následovně:</p>

<pre>

a @ .

</pre>

<p>Pro dvojici slov <strong>@ .</strong> existuje zkratka v podobě slova
<strong>?</strong> (otazník). Toto slovo nejprve uloží hodnotu proměnné na
zásobník a poté tuto hodnotu vytiskne. Místo předchozí sekvence slov tedy
můžeme psát pouze:</p>

<pre>

a ?

</pre>

<p>Nebo si přímo vytvořit specializované slovo <strong>print_a</strong>:</p>

<pre>

: print_a
    a ? cr
;

</pre>

<p>Použití výše vytvořených slov může být například následující (slovo
<strong>factorial</strong> bude uvedeno dále):</p>

<pre>

10 factorial a ! print_a

</pre>



<p><a name="k02" id="k02"></a></p>
<h2>2. Logické hodnoty a logické operace</h2>

<p><em>Like most programmers, my choice of language is based on personal
preference. I find that I think more clearly in Forth, and from past experience
I estimate I'm 5 to 10 times more productive in Forth than in C. Others may not
share this preference or facility. Forth may not be your preference, but it's
certainly "relevant" -- now more than ever.<br />
Brad Rodriguez
</em></p>

<p>Při práci s logickými hodnotami, které tvoří základ Booleovy algebry,
rozlišuje Forth dvě slova: <strong>true</strong> a <strong>false</strong>. Při
zadání slova <strong>true</strong> se na zásobník uloží desítková hodnota -1 (v
binární podobě má toto číslo všechny bity jedničkové). Po zadání slova
<strong>false</strong> se na vrchol zásobníku naopak uloží nulová hodnota
(všechny bity jsou samozřejmě nastaveny na nulu).</p>

<p>Hodnoty obou výše zmíněných slov si můžeme jednoduchým způsobem vypsat
pomocí již známého slova <strong>.</strong> (tečka):</p>

<pre>

true .
false .

</pre>



<p><a name="k021" id="k021"></a></p>
<h3>2.1 Unární a binární logické operace</h3>

<p>Forth přímo implementuje také základní unární i binární logické operace.
Operandy těchto operací musí být před provedením operace uloženy na zásobníku
operandů, kam je po provedení operace uložen i její výsledek. Mezi základní
logické operace patří <strong>and</strong>, <strong>or</strong>,
<strong>xor</strong> a unární operace <strong>not</strong> (někdy také
označovaná <strong>invert</strong>).</p>

<p>Logické operace pracují s jednotlivými bity, ale vzhledem ke způsobu
reprezentace logických hodnot není mezi bitovými a logickými operacemi
prakticky žádný rozdíl (ten samozřejmě nastane při práci s jinými hodnotami než
<strong>true</strong> a <strong>false</strong>).</p>

<p>Následuje ukázka použití logických operací:</p>

<pre>

true false and .
false not .
true not .
true true false and xor .

</pre>

<p>Programátoři znalí C-čka a z něj odvozených jazyků si mohou některé operace
přejmenovat vytvořením nových slov, například následujícím způsobem:</p>

<pre>

: &amp; and ;
: | or ;
: ^ xor ;

</pre>

<p>Operace <strong>not</strong> resp. <strong>invert</strong> je unární, tj.
bere ze zásobníku pouze jeden operand a na stejné místo v zásobníku posléze
vrací výsledek operace:</p>

<pre>

false .
false not .
false not not .
true .
true not .
true not not .

</pre>



<p><a name="k022" id="k022"></a></p>
<h3>2.2 Pravdivostní tabulky binárních logických operací</h3>

<p>Následuje ukázka slova pro výpis pravdivostní tabulky binárních logických
operací:</p>

<pre>

: pravdivostni_tabulka
    ." Operace and" cr
    false false and . cr
    true false  and . cr
    false true  and . cr
    true true   and . cr

    ." Operace or" cr
    false false or . cr
    true false  or . cr
    false true  or . cr
    true true   or . cr

    ." Operace xor" cr
    false false xor . cr
    true false  xor . cr
    false true  xor . cr
    true true   xor . cr
;

</pre>




<p><a name="k03" id="k03"></a></p>
<h2>3. Relační operátory</h2>

<p><em>You define each word so that the computer knows what it means. The way
it knows is that it executes some code as a consequence of being invoked. The
computer takes an action on every word. It doesn't store the word away and keep
it in mind for later.<br />
In a philosophical sense I think this means that the computer "understands" a
word. It understands the word DUP, perhaps more profoundly than you do, because
there's never any question in its mind what DUP means.<br />
The connection between words that have meaning to you and words that have
meaning to the computer is a profound one. The computer becomes the vehicle for
communication between human being and concept.<br />Chuck Moore</em></p>

<p>S logickými operacemi úzce souvisí i relační operátory, které porovnávají
dvě číselné hodnoty a jejichž výsledkem je logická hodnota <em>true</em> nebo
<em>false</em>. Provedení relačního operátoru, který je ve Forthu opět zadán
slovem, spočívá ve vyzvednutí dvou hodnot ze zásobníku, provedení operace a
uložení výsledku operace zpět na vrchol zásobníku.</p>

<p>U relačních operátorů je nutné správně rozlišit jejich operandy, tj.
operand, který se nachází na levé straně a který na pravé. Obecně platí, že
operand, který se v infixové notaci nachází na levé straně relačního operátoru,
musí být uložen na druhém místě na zásobníku, kdežto pravý operand je umístěn
na vrcholu zásobníku.</p>

<p>V následující ukázce kódu jsou vypsány všechny podporované relační operátory
definované nad celočíselným datovým typem (výsledkem aplikace operátorů je
hodnota <em>true</em> nebo <em>false</em>, ta je však při tisku zobrazena jako
číslo 0 nebo -1):</p>

<pre>

1 2 &lt;&gt; .
1 2 = .
1 2 &lt; .
1 2 &lt;= .
1 2 &gt; .
1 2 &gt;= .

</pre>

<p>Relační operátory je samozřejmě možné použít současně s logickými operátory.
V následující ukázce kódu je uveden jednoduchý test intervalu (v reálném
příkladu by se samozřejmě místo hodnoty 5 použila proměnná):</p>

<pre>
1 5 &lt; 5 100 &lt; and .
</pre>

<p>Vzhledem ke způsobu reprezentace hodnoty slov <strong>true</strong> a
<strong>false</strong> je zapotřebí mít na mysli, že ve Forthu platí vztah
<em>true&lt;false</em> (na rozdíl od Pascalu a podobných jazyků). Tuto
vlastnost ilustruje následující příklad:</p>

<pre>

true false &lt; . cr
true false &gt; . cr
false true &lt; . cr
false true &gt; . cr

</pre>



<p><a name="k04" id="k04"></a></p>
<h2>4. Rekurze</h2>

<p>Programovací jazyk Forth již z podstaty své činnosti podporuje rekurzivní
funkce. Vyplývá to z toho, že parametry "procedur" a "funkcí" (tj. slov) se
nachází na zásobníku operandů a návratové adresy do nadřazených funkcí se
ukládají do zásobníku návratových adres. Volání slov je ve Forthu mnohem
jednodušší, než v jiných programovacích jazycích, protože se nemusí složitě
ukládat parametry na zásobník a vytvářet na něm takzvaný zásobníkový rámec
(<em>stack frame</em>).</p>

<p>Jako příklad rekurzivní funkce uvedu známou funkci pro výpočet
faktoriálu:</p>

<pre>

: factorial
    dup 0= if
        drop 1
    else
        dup 1- factorial *
    then
;

</pre>

<p>Ve výše uvedené funkci (slovu) se používá jediné nám neznámé slovo -
<strong>0=</strong>, které provádí test, zda je hodnota na vrcholu zásobníku
nulová.</p>

<p>Při používání rekurzivních funkcí/slov je samozřejmě nutné řešený problém
důkladně analyzovat a zvážit, zda pro nějaké vstupní hodnoty nebude docházet k
přeplňování zásobníků.</p>



<p><a name="k05" id="k05"></a></p>
<h2>5. Nepočítané smyčky</h2>

<p>V předchozí části tohoto seriálu jsme si uvedli příklad počítané smyčky,
kterou lze vytvořit pomocí vestavěných slov <strong>do</strong> a
<strong>loop</strong>. Počítané smyčky jsou při implementaci velmi efektivní,
protože pro jejich tvorbu většinou existují specializované instrukce procesoru,
například <tt>DJNZ</tt>.</p>

<p>Ve Forthu je však možné použít i nepočítané smyčky, tj. smyčky, u nichž není
předem známý počet opakování. V takové smyčce proto musí být při každé iteraci
testována nějaká podmínka a na základě jejího výsledku musí být rozhodnuto, zda
se má smyčka opakovat či ukončit.</p>



<p><a name="k051" id="k051"></a></p>
<h3>5.1 Smyčky s testem na začátku</h3>

<p>Pro tvorbu prvního typu nepočítaných smyček, kdy se podmínka pro ukončení
smyčky testuje ještě před první iterací, se používají slova
<strong>begin</strong>, <strong>while</strong> a <strong>repeat</strong>.
Způsob jejich použití ilustruje následující kód:</p>

<pre>

begin
podmínka
while
    tělo smyčky
repeat

</pre>

<p>Kde <em>podmínka</em> značí hodnotu uloženou na vrcholu zásobníku. Při každé
iteraci se podmínka vyhodnotí a na základě výsledku vyhodnocení (tj. hodnoty
<em>true</em> či <em>false</em>) se smyčka buď provede, nebo se z ní vyskočí.
Následuje jednoduchý příklad použití, kdy vytvořený program vypíše čísla od 1
do 10:</p>

<pre>

: pokus
    0
    begin
        dup 10 &lt;
    while
        1 +
        dup . cr
    repeat
    drop
;

</pre>



<p><a name="k052" id="k052"></a></p>
<h3>5.2 Smyčky s testem na konci</h3>

<p>Další formou nepočítané smyčky je smyčka, při které se test provádí až na
konci. Tato smyčka se konstruuje pomocí slov <strong>begin</strong> a
<strong>until</strong>. Způsob použití je následující:</p>

<pre>

begin
    tělo smyčky
    podmínka
until

</pre>

<p>Vzhledem k tomu, že se podmínka testuje až na konci smyčky, proběhne smyčka
minimálně jedenkrát. Toho lze využít při tvorbě malých elegantních funkcí.
Příkladem budiž funkce (slovo) <strong>lcd</strong>, která pomocí známého
postupu vypočítá největší společný dělitel dvou čísel:</p>

<pre>

: lcd
    begin
        swap over mod
        dup 0=
    until
    drop
    . cr
;

</pre>

<p>Příklad použití výše vytvořeného slova:</p>

<pre>

10 15 lcd
20 21 lcd
384 1024 lcd

</pre>



<p><a name="k053" id="k053"></a></p>
<h3>5.3 Nekonečné smyčky</h3>

<p>V některých případech se hodí testovat podmínku na ukončení smyčky uvnitř
jejího těla, tj. nikoli přísně na začátku a na konci. Pro tento typ problémů je
možné použít nekonečné smyčky, které se tvoří pomocí slov
<strong>begin</strong> a <strong>again</strong>. Způsob použití tohoto typu
smyček je jednoduchý:</p>

<pre>

begin
    tělo smyčky
again

</pre>

<p>Příklad použití:</p>

<pre>

: infinite_loop
    begin
        ." looping" cr
    again
;

</pre>

<p>Smyčky je možné kdykoli opustit pomocí následujících slov:
<strong>leave</strong>, <strong>exit</strong> a <strong>abort</strong>. Některá
slova je možné použít na dříve popsané smyčky, tj. na smyčku, která podmínku
testuje před první iterací i na smyčku s testem na konci (slovo
<strong>leave</strong> se používá spolu se smyčkou obsahující počitadlo).
Následující dvě slova ilustrují použití nekonečné smyčky s podmíněným
ukončením. Při vyvolání prvního slova se vypíše číselná řada, druhé slovo
vypíše hodnoty mocniny dvou:</p>

<pre>

: infinite_loop2
    0
    begin
        1 +
        dup . cr
        dup 10 &gt; if
            abort
        then
    again
;

: infinite_loop3
    1
    begin
        2 *
        dup . cr
        dup 10000 &gt; if
            abort
        then
    again
;

</pre>


<p><a name="k06" id="k06"></a></p>
<h2>6. Obsah dalšího pokračování</h2>

<p>V následující části tohoto seriálu si popíšeme práci s poli a řetězci. Také
si řekneme, jakým způsobem je možné ve Forthu pracovat s hodnotami uloženými ve
formátu pohyblivé řádové čárky.</p>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2005</small></p>
</body>
</html>

