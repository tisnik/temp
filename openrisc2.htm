<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Problematika operací pro celočíselný součin a podíl</a></p>
<p><a href="#k02">*** 2. Operace s&nbsp;hodnotami s&nbsp;plovoucí řádovou čárkou</a></p>
<p><a href="#k03">*** 3. Význam prefixů u instrukcí</a></p>
<p><a href="#k04">*** 4. Instrukční sady ORFPX32/64</a></p>
<p><a href="#k05">*** 5. Registr FPSCR</a></p>
<p><a href="#k06">*** 6. Rychlost provedení základních FP operací</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. Instrukce určené pro porovnání dvou hodnot s&nbsp;nastavením příznaku <strong>F</strong></a></p>
<p><a href="#k09">*** 9. Krátké porovnání s&nbsp;architekturou RISC-V v&nbsp;oblasti FP operací</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Problematika operací pro celočíselný součin a podíl</h2>

<p></p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Význam</th></tr>
<tr><td>1</td><td>l.mul</td><td>násobení (se znaménkem)</td></tr>
<tr><td>2</td><td>l.mulu</td><td>násobení (bez znaménka)</td></tr>
<tr><td>3</td><td>l.muli</td><td>násobení konstantou (se znaménkem)</td></tr>
<tr><td>4</td><td>l.muld</td><td>násobení s&nbsp;přesunem výsledku do MAC</td></tr>
<tr><td>5</td><td>l.muldu</td><td>násobení s&nbsp;přesunem výsledku do MAC</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>6</td><td>l.div</td><td>celočíselné dělení (se znaménkem)</td></tr>
<tr><td>7</td><td>l.divu</td><td>celočíselné dělení (bez znaménka)</td></tr>
</table>

<table>
<tr><th>Instrukce</th><th>Počet cyklů pro výpočet</th></tr>
<tr><td>základní aritmetické operace</td><td>1</td></tr>
<tr><td>celočíselné násobení</td><td>3</td></tr>
<tr><td>celočíselné dělení</td><td>32</td></tr>
<tr><td>porovnání, nastavení <strong>F</strong></td><td>1</td></tr>
<tr><td>logické operace</td><td>1</td></tr>
<tr><td>rotace a posuny</td><td>1</td></tr>
<tr><td>přenosy dat</td><td>1</td></tr>
</table>

<p>To, že výpočet některých operací trvá déle, než jeden strojový cyklus, je poměrně velký problém, zvláště pro RISCové procesory. Při návrhu různých RISCových architektur se inženýři s&nbsp;tímto problémem vypořádali různými způsoby. Pěkným příkladem může být řešení použité u architektury MIPS-I, v&nbsp;níž byla násobička a dělička zcela oddělena od ALU a dokonce se v&nbsp;ní využívaly vlastní registry nazvané <strong>HI</strong> a <strong>LO</strong>.</p>

<p>Odlišným způsobem bylo násobení a dělení řešeno v&nbsp;instrukční sadě procesorů <i>SPARC-V7</i>. V&nbsp;této ISA je možné najít instrukci nazvanou <strong>MULScc</strong>, neboli <i>Multiply Step and Modify icc</i>, která dokázala při svém zavolání provést jeden krok násobení dvojice 32bitových celých čísel s&nbsp;64bitovým mezivýsledkem (polovina mezivýsledku se ukládala do pomocného speciálního registru <strong>Y</strong> ležícího mimo sadu 32 viditelných pracovních registrů). Optimalizovaný programový kód pro násobení dokázal s&nbsp;pomocí instrukce <strong>MULScc</strong> vynásobit dvě celá čísla bez znaménka za 47 strojových cyklů, popř.&nbsp;dvě celá čísla se znaménkem za 51 strojových cyklů, což sice není zanedbatelná doba, ale operace násobení i dělení trvaly poměrně dlouho i u dalších dobových mikroprocesorů, které je měly implementovány přímo v&nbsp;mikrokódu (například 80x86).</p>

<p>Jednou z&nbsp;nejviditelnějších změn, s&nbsp;níž se setkali programátoři mikroprocesorů s&nbsp;architekturou <i>SPARC-V8</i>, bylo přidání nových instrukcí určených pro provedení aritmetické operace celočíselného násobení a dělení. Ukazuje se zde částečný odklon od čistého RISCového procesoru, kde čistota návrhu byla vyvážena praktičtějším používáním. Navíc se díky tomu, že násobení a dělení probíhá v&nbsp;součinnosti s&nbsp;ALU, mohly instrukce pro násobení a dělení nastavovat příznakové bity, podobně jako to dokážou ostatní ALU operace:</p>

<table>
<tr><th>#</th><th>Instrukce</th><th>Význam</th></tr>
<tr><td>1</td><td>MULScc</td><td>provedení jednoho kroku násobení (převzato z V7)</td></tr>
<tr><td>2</td><td>UMUL</td><td>násobení dvojice celočíselných hodnot bez znaménka</td></tr>
<tr><td>3</td><td>SMUL</td><td>násobení dvojice celočíselných hodnot se znaménkem</td></tr>
<tr><td>4</td><td>UDIV</td><td>dělení dvojice celočíselných hodnot bez znaménka</td></tr>
<tr><td>5</td><td>SDIV</td><td>dělení dvojice celočíselných hodnot se znaménkem</td></tr>
<tr><td>6</td><td>UMULcc</td><td>odpovídá instrukci <strong>UMUL</strong>, ovšem nastaví i příznakové bity</td></tr>
<tr><td>7</td><td>SMULcc</td><td>odpovídá instrukci <strong>SMUL</strong>, ovšem nastaví i příznakové bity</td></tr>
<tr><td>8</td><td>UDIVcc</td><td>odpovídá instrukci <strong>UDIV</strong>, ovšem nastaví i příznakové bity</td></tr>
<tr><td>9</td><td>SDIVcc</td><td>odpovídá instrukci <strong>SDIV</strong>, ovšem nastaví i příznakové bity</td></tr>
</table>



<p><a name="k01"></a></p>
<h2 id="k01">1. Operace s&nbsp;hodnotami s&nbsp;plovoucí řádovou čárkou</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. ORFPX32/64</h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Registr FPSCR</h2>

Floating Point Control Status Register

<table>
<tr><th>Bit</th><th>Význam</th></tr>
<tr><td></td><td></td></tr>
</table>


<p><a name="k04"></a></p>
<h2 id="k04">4. Rychlost základních FP operací</h2>

<table>
<tr><th>Instrukce</th><th>Počet cyklů pro výpočet</th></tr>
<tr><td>součet, rozdíl</td><td>10</td></tr>
<tr><td>součin</td><td>38</td></tr>
<tr><td>podíl</td><td>37</td></tr>
<tr><td>porovnání, nastavení <strong>F</strong></td><td>2</td></tr>
<tr><td>konverze hodnot</td><td>7</td></tr>
</table>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<table>
<tr><th>#</th><th>Instrukce</th><th>Datový typ</th><th>Význam</th></tr>
<tr><td>1</td><td>single</td><td></td></tr>
<tr><td>2</td><td>double</td><td></td></tr>
<tr><td>3</td><td>single</td><td></td></tr>
<tr><td>4</td><td>double</td><td></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>single</td><td></td></tr>
<tr><td>6</td><td>double</td><td></td></tr>
<tr><td>7</td><td>single</td><td></td></tr>
<tr><td>8</td><td>double</td><td></td></tr>
<tr><td>9</td><td>single</td><td></td></tr>
<tr><td>10</td><td>double</td><td></td></tr>
</table>

lf.add.s
lf.add.d
lf.sub.s
lf.sub.d
lf.mul.s
lf.mul.d
lf.div.s
lf.div.d
lf.rem.s
lf.rem.d



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<table>
<tr><th>#</th><th>Instrukce</th><th>Význam</th></tr>
<tr><td>1</td><td></td><td></td></tr>
<tr><td>2</td><td></td><td></td></tr>
<tr><td>3</td><td></td><td></td></tr>
</table>
lf.ftoi.d
lf.ftoi.s
lf.itof.d
lf.itof.s


<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<table>
<tr><th>#</th><th>Instrukce</th><th>Význam</th></tr>
<tr><td>1</td><td></td><td>single</td><td></td></tr>
<tr><td>2</td><td></td><td>double</td><td></td></tr>
</table>
lf.madd.s
lf.madd.d


<p><a name="k08"></a></p>
<h2 id="k08">8. Instrukce určené pro porovnání dvou hodnot s&nbsp;nastavením příznaku <strong>F</strong></h2>

<table>
<tr><th> #</th><th>Instrukce</th><th>Datový typ</th><th>Význam</th></tr>
<tr><td> 1</td><td>lf.sfeq.s</td><td>single</td><td></td></tr>
<tr><td> 2</td><td>lf.sfeq.d</td><td>double</td><td></td></tr>
<tr><td> 3</td><td>lf.sfne.s</td><td>single</td><td></td></tr>
<tr><td> 4</td><td>lf.sfne.d</td><td>double</td><td></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>lf.sfge.s</td><td>single</td><td></td></tr>
<tr><td> 6</td><td>lf.sfge.d</td><td>double</td><td></td></tr>
<tr><td> 7</td><td>lf.sfgt.s</td><td>single</td><td></td></tr>
<tr><td> 8</td><td>lf.sfgt.d</td><td>double</td><td></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>lf.sfle.s</td><td>single</td><td></td></tr>
<tr><td>10</td><td>lf.sfle.d</td><td>double</td><td></td></tr>
<tr><td>11</td><td>lf.sflt.s</td><td>single</td><td></td></tr>
<tr><td>12</td><td>lf.sflt.d</td><td>double</td><td></td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Krátké porovnání s&nbsp;architekturou RISC-V</h2>

<p>Jen pro zajímavost se podívejme, jakým způsobem jsou výpočty s&nbsp;hodnotami v&nbsp;pohyblivé řádové čárce realizovány v&nbsp;konkurenčním projektu <i>RISC-V</i>. I tato zajímavá architektura totiž umožňuje &ndash; pokud je to samozřejmě s&nbsp;ohledem na řešený problém nutné &ndash; FPU do čipu přidat. Ve skutečnosti existují dokonce dvě rozšíření původní ISA. První rozšíření se jmenuje jednoduše &bdquo;F&ldquo;, protože specifikuje instrukce s&nbsp;hodnotami typu <i>single/float</i>, tj.&nbsp;s&nbsp;čísly s&nbsp;jednoduchou přesností podle normy IEEE 754-2008 (jedná se o zpřesnění původní slavné normy IEEE 754). Instrukce, které v&nbsp;tomto rozíření ISA nalezneme, zhruba odpovídají výše popsané instrukční sadě <i>ORFPX32</i>.</p>

<p>Druhé rozšíření se podle očekávání jmenuje &bdquo;D&ldquo;, protože předepisuje operace s&nbsp;hodnotami typu <i>double</i>, tj.&nbsp;s&nbsp;čísly s&nbsp;přesností dvojitou. To zhruba odpovídá instrukční sadě <i>ORFPX64</i>. Proč však došlo k&nbsp;rozdělení funkcí matematického koprocesoru na dvě části? Existují totiž aplikace, v&nbsp;nichž postačuje pracovat s&nbsp;typem <i>single/float</i>, takže by v&nbsp;tomto případě podpora dvojnásobné přesnosti pouze přinášela komplikace v&nbsp;realizaci mikroprocesoru (ostatně i tak jsou obecně operace s&nbsp;plovoucí řádovou čárkou pomalejší, než celočíselné operace RISCové aritmeticko-logické jednotky). Dokonce existují i aplikace vyžadující malý a rychlý mikroprocesor s&nbsp;nativní podporou typu <i>half-float</i>, což jsou 16bitová čísla se znaménkem, mantisou i exponentem (zavedeny byly například v&nbsp;Cg).</p>

<p>Dalším rozšířením instrukčních sad je rozšíření označené písmenem &bdquo;Q&ldquo;. To přidává možnost práce s&nbsp;numerickými hodnotami s&nbsp;plovoucí řádovou čárkou se čtyřnásobnou přesností. Formát uložení těchto hodnot je specifikován v&nbsp;již několikrát zmíněné normě <i>IEEE 754-2008</i>. Ostatně podívejme se na následující tabulku, v&nbsp;níž jsou vypsány vybrané formáty numerických hodnot, které jsou v&nbsp;této normě specifikovány (vynechávám takzvané &bdquo;decimální&ldquo; formáty) a jak se tyto formáty mapují na rozšířené instrukční sady mikroprocesorů RISC-V:</p>

<table>
<tr><th>Oficiální jméno</th><th>Známo též jako</th><th>Znaménko</th><th>Exponent</th><th>Mantisa</th><th>Celkem</th><th>Decimálních číslic</th><th>RISV-5</th></tr>
<tr><td>binary16 </td><td>half</td><td>1</td><td> 5b</td><td>10b</td><td>16b</td><td>cca 3,3</td><td>není</td></tr>
<tr><td>binary32 </td><td>single/float</td><td>1</td><td> 8b</td><td>23b</td><td>32b</td><td>cca 7,2</td><td>&bdquo;F&ldquo;</td></tr>
<tr><td>binary64 </td><td>double</td><td>1</td><td>11b</td><td>52b</td><td>64b</td><td>cca 15,9</td><td>&bdquo;D&ldquo;</td></tr>
<tr><td>binary128</td><td>quadruple</td><td>1</td><td>15b</td><td>112b</td><td>128b</td><td>cca 34,0</td><td>&bdquo;Q&ldquo;</td></tr>
</table>

<p>Pro rozšíření &bdquo;F&ldquo; se používá nová sada pracovních registrů. Tyto registry jsou pojmenovány <strong>f0</strong> až <strong>f31</strong> a každý z&nbsp;těchto registrů má šířku 32 bitů. Podobně je tomu u rozšíření &bdquo;D&ldquo;, ovšem s&nbsp;tím rozdílem, že registry budou mít šířku celých 64 bitů. Navíc se u většiny operací používá i stavový a řídicí registr nazvaný <strong>fcrs</strong>.</p>

<p><div class="rs-tip-major">Poznámka: zde můžeme vidět poměrně zásadní rozdíl mezi RISC-V a OpenRISCem. U OpenRISCu jsou čísla s&nbsp;plovoucí řádovou čárkou uložena v&nbsp;běžných pracovních registrech, zatímco u RISC-V se používají specializované registry. Obě řešení mají své výhody a nevýhody. U RISC-V se za cenu větší plochy čipu a jeho větší komplikovanosti prakticky zcela oddělila klasická ALU od FPU, takže výpočty mohou běžet nezávisle na sobě (záleží na konkrétní implementaci). Také rozšíření o dalších 32 registrů může zjednodušit práci překladače. U OpenRISCu se používají stejné registry pro celočíselné i FP operace, takže se zjednodušila instrukční sada (načtení FP hodnoty je shodné s&nbsp;načtením celočíselné hodnoty atd.), ovšem za cenu větších omezení (typ <i>double</i> u 32bitového čipu atd.)</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Implementace instrukcí SIMD na mikroprocesorech RISC</h2>

<p>Prakticky u všech RISCových architektur došlo (dříve či později) k&nbsp;rozšíření jejich ISA o SIMD operace, což si samozřejmě vyžádalo modifikace ALU. Ve skutečnosti se dokonce tento typ instrukcí poprvé objevil právě na mikroprocesorech <i>RISC</i> a teprve se zhruba dvouletým zpožděním byl převzat i na původně čistě <i>CISCovou</i> architekturu <i>x86</i> (ostatně se zdaleka nejedná o první ani o poslední technologii, která byla na <i>x86</i> převzata právě z&nbsp;<i>RISCových</i> procesorů).</p>

<img src="http://i.iinfo.cz/images/625/37cray-a-1.jpg" width="350" height="467" alt=" " />
<p><i>Obrázek 1: Superpočítač Cray-1 byl jedním ze superpočítačů s&nbsp;velmi dobrou podporou vektorových operací, ať se to týkalo instrukční sady, tak i podpory v&nbsp;překladači Fortranu. Ve skutečnosti se však dnešní &bdquo;vektorové&ldquo; instrukce odlišují od implementace provedené Seymourem Crayem.</i></p>

<p>Důvodů, proč se vlastně instrukce typu <i>SIMD</i> na RISCových procesorech vůbec objevily, je větší množství. Jedním z&nbsp;nich je to, že se tyto procesory začaly používat v&nbsp;grafických pracovních stanicích, mj.&nbsp;i pro zpracování videa, provádění rastrových operací i 3D operací, což je přesně ta oblast, v&nbsp;níž je možné informace zpracovávat nikoli jen ve formě skalárních dat, ale i jako vektory pevné délky. Dalším důvodem byla snaha výrobců RISCových procesorů o průnik na trh s&nbsp;počítači určenými pro náročné výpočty (jedná se o určitý mezistupeň mezi výkonnými pracovními stanicemi a superpočítači). V&nbsp;tomto oboru se mnoho algoritmů provádí nad maticemi a vektory obsahujícími numerické hodnoty reprezentované v&nbsp;systému plovoucí řádové čárky (FP: Floating Point). Třetím důvodem je samozřejmě snaha o zvýšení výpočetního výkonu a právě <i>SIMD</i> instrukce k&nbsp;němu mohou vést, aniž by bylo nutné radikálně měnit používanou výrobní technologii čipů (zvyšovat úroveň integrace, snižovat napěťové úrovně či zvyšovat frekvenci, popř.&nbsp;přidávat vyrovnávací paměti/cache).</p>

<img src="http://i.iinfo.cz/images/308/comp-hist-61-1.jpg" width="450" height="345" alt=" " />
<p><i>Obrázek 2: Superpočítač CDC 7600 je předchůdcem superpočítačů
Cray.</i></p>

<p>Prakticky každá významnější společnost (v&nbsp;případě PowerPC pak dokonce
aliance) navrhující mikroprocesory s&nbsp;architekturou <i>RISC</i> přišla
dříve či později na trh s&nbsp;instrukční sadou obsahující
&bdquo;vektorové&ldquo; instrukce, které jsou dnes souhrnně označovány zkratkou
<i>SIMD</i> (původní vektorové instrukce používané na superpočítačích jsou
v&nbsp;některých ohledech flexibilnější, proto budeme používat spíše zkratku
<i>SIMD</i>). Rozšiřující instrukční sady byly pojmenovávány nejrůznějšími
názvy a zkratkami a nikdy vlastně nedošlo &ndash; na rozdíl od platformy
<i>x86</i> &ndash; ke sjednocení těchto instrukcí do jediné skupiny &bdquo;SIMD
pro RISC&ldquo;, což je vlastně logické, protože procesory <i>RISC</i> jsou
mnohdy určeny pro specializované oblasti použití, od vestavných (embedded)
systémů přes smartphony a tablety až po superpočítače.</p>

<img src="http://i.iinfo.cz/images/491/pc147-2.jpg" width="220" height="220" alt=" " />
<p><i>Obrázek 3: Mikroprocesor HP PA-RISC 7300LC (PA=Precision Architecture).
Jedná se moderní variantu procesorů RISC se zabudovaným matematickým
koprocesorem a sadou 32bitových celočíselných registrů a taktéž 64bitových
registrů pro FPU operace.<br />
Zdroj: Wikipedia</i></p>

<p>Nejvýznamnější implementace instrukcí <i>SIMD</i> na mikroprocesorech
s&nbsp;architekturou <i>RISC</i>, ať již se jedná o instrukce určené pro
operace s&nbsp;celými čísly či s&nbsp;čísly reálnými (přesněji řečeno
s&nbsp;plovoucí řádovou čárkou), jsou vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Zkratka/název</th><th>Plný název</th><th>Rodina procesorů</th></tr>
<tr><td>1</td><td>MAX-1  </td><td>Multimedia Acceleration eXtensions v1</td><td>HP-PA RISC    </td></tr>
<tr><td>2</td><td>MAX-2  </td><td>Multimedia Acceleration eXtensions v2</td><td>HP-PA RISC    </td></tr>
<tr><td>3</td><td>VIS 1  </td><td>Visual Instruction v1                </td><td>Set SPARC V9  </td></tr>
<tr><td>4</td><td>VIS 2  </td><td>Visual Instruction v2                </td><td>Set SPARC V9  </td></tr>
<tr><td>5</td><td>AltiVec</td><td>(obchodní názvy Velocity Engine, VMX)</td><td>PowerPC       </td></tr>
<tr><td>6</td><td>MDMX   </td><td>MIPS Digital Media eXtension (MaDMaX)</td><td>MIPS          </td></tr>
<tr><td>7</td><td>MIPS-3D</td><td>MIPS-3D                              </td><td>MIPS          </td></tr>
<tr><td>8</td><td>MVI    </td><td>Motion Video Instructions            </td><td>DEC Alpha     </td></tr>
<tr><td>9</td><td>NEON   </td><td>Advanced SIMD                        </td><td>Cortex (ARMv7)</td></tr>
</table>


<p><a name="k11"></a></p>
<h2 id="k11">11. &bdquo;Vektorové&ldquo; operace podporované architekturou OpenRISC</h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<table>
<tr><th> #</th><th>Instrukce</th><th>Datový typ</th><th>Význam</th></tr>
<tr><td> 1</td><td></td><td></td><td></td></tr>
<tr><td> 2</td><td></td><td></td><td></td></tr>
<tr><td> 3</td><td></td><td></td><td></td></tr>
<tr><td> 4</td><td></td><td></td><td></td></tr>
</table>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

openrisc v risc-v


<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>OpenRISC (oficiální stránky)<br />
<a href="http://openrisc.io/">http://openrisc.io/</a>
</li>

<li>OpenRISC architecture<br />
<a href="http://openrisc.io/architecture.html">http://openrisc.io/architecture.html</a>
</li>

<li>Emulátor OpenRISC CPU v JavaScriptu<br />
<a href="http://s-macke.github.io/jor1k/demos/main.html">http://s-macke.github.io/jor1k/demos/main.html</a>
</li>

<li>Why Not Build on OpenRISC?<br />
<a href="https://riscv.org/2014/10/why-not-build-on-openrisc/">https://riscv.org/2014/10/why-not-build-on-openrisc/</a>
</li>

<li>OpenRISC (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/OpenRISC">https://en.wikipedia.org/wiki/OpenRISC</a>
</li>

<li>OpenRISC - instrukce<br />
<a href="http://sourceware.org/cgen/gen-doc/openrisc-insn.html">http://sourceware.org/cgen/gen-doc/openrisc-insn.html</a>
</li>

<li>OpenRISC - slajdy z přednášky<br />
<a href="https://iis.ee.ethz.ch/~gmichi/asocd/lecturenotes/Lecture6.pdf">https://iis.ee.ethz.ch/~gmichi/asocd/lecturenotes/Lecture6.pdf</a>
</li>

<li>OpenRISC System-on-Chip Design Emulation<br />
<a href="https://arxiv.org/pdf/1602.03095.pdf">https://arxiv.org/pdf/1602.03095.pdf</a>
</li>

<li>Open cores<br />
<a href="https://opencores.org/">https://opencores.org/</a>
</li>

<li>Projekt OpenRISC 2000<br />
<a href="https://opencores.org/project/or2k">https://opencores.org/project/or2k</a>
</li>

<li>OpenRISC na GitHubu<br />
<a href="https://github.com/openrisc">https://github.com/openrisc</a>
</li>

<li>OpenRISC 1200<br />
<a href="https://en.wikipedia.org/wiki/OpenRISC_1200">https://en.wikipedia.org/wiki/OpenRISC_1200</a>
</li>

<li>OpenRISC 1200 IP Core Specification (Preliminary Draft)<br />
<a href="https://opencores.org/ocsvn/openrisc/openrisc/trunk/or1200/doc/openrisc1200_spec.pdf">https://opencores.org/ocsvn/openrisc/openrisc/trunk/or1200/doc/openrisc1200_spec.pdf</a>
</li>

<li>Comparing four 32-bit soft processor cores<br />
<a href="http://www.eetimes.com/author.asp?section_id=14&doc_id=1286116">http://www.eetimes.com/author.asp?section_id=14&doc_id=1286116</a>
</li>

<li>RISC-V Instruction Set<br />
<a href="http://riscv.org/download.html#spec_compressed_isa">http://riscv.org/download.html#spec_compressed_isa</a>
</li>

<li>RISC-V Spike (ISA Simulator)<br />
<a href="http://riscv.org/download.html#isa-sim">http://riscv.org/download.html#isa-sim</a>
</li>

<li>RISC-V (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/RISC-V">https://en.wikipedia.org/wiki/RISC-V</a>
</li>

<li>David Patterson (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/David_Patterson_(computer_scientist)">https://en.wikipedia.org/wiki/David_Patterson_(computer_scientist)</a>
</li>

<li>Maska mikroprocesoru RISC 1<br />
<a href="http://www.cs.berkeley.edu/~pattrsn/Arch/RISC1.jpg">http://www.cs.berkeley.edu/~pattrsn/Arch/RISC1.jpg</a>
</li>

<li>Maska mikroprocesoru RISC 2<br />
<a href="http://www.cs.berkeley.edu/~pattrsn/Arch/RISC2.jpg">http://www.cs.berkeley.edu/~pattrsn/Arch/RISC2.jpg</a>
</li>

<li>C.E. Sequin and D.A.Patterson: Design and Implementation of RISC I<br />
<a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/1982/CSD-82-106.pdf">http://www.eecs.berkeley.edu/Pubs/TechRpts/1982/CSD-82-106.pdf</a>
</li>

<li>Berkeley RISC<br />
<a href="http://en.wikipedia.org/wiki/Berkeley_RISC">http://en.wikipedia.org/wiki/Berkeley_RISC</a>
</li>

<li>Great moments in microprocessor history<br />
<a href="http://www.ibm.com/developerworks/library/pa-microhist.html">http://www.ibm.com/developerworks/library/pa-microhist.html</a>
</li>

<li>Microprogram-Based Processors<br />
<a href="http://research.microsoft.com/en-us/um/people/gbell/Computer_Structures_Principles_and_Examples/csp0167.htm">http://research.microsoft.com/en-us/um/people/gbell/Computer_Structures_Principles_and_Examples/csp0167.htm</a>
</li>

<li>Great Microprocessors of the Past and Present<br />
<a href="http://www.cpushack.com/CPU/cpu1.html">http://www.cpushack.com/CPU/cpu1.html</a>
</li>

<li>A Brief History of Microprogramming<br />
<a href="http://www.cs.clemson.edu/~mark/uprog.html">http://www.cs.clemson.edu/~mark/uprog.html</a>
</li>

<li>What is RISC?<br />
<a href="http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/whatis/">http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/whatis/</a>
</li>

<li>RISC vs. CISC<br />
<a href="http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/risccisc/">http://www-cs-faculty.stanford.edu/~eroberts/courses/soco/projects/2000-01/risc/risccisc/</a>
</li>

<li>RISC and CISC definitions:<br />
<a href="http://www.cpushack.com/CPU/cpuAppendA.html">http://www.cpushack.com/CPU/cpuAppendA.html</a>
</li>

<li>FPGA<br />
<a href="https://cs.wikipedia.org/wiki/Programovateln%C3%A9_hradlov%C3%A9_pole">https://cs.wikipedia.org/wiki/Programovateln%C3%A9_hradlov%C3%A9_pole</a>
</li>

<li>The Evolution of RISC<br />
<a href="http://www.ibm.com/developerworks/library/pa-microhist.html#sidebar1">http://www.ibm.com/developerworks/library/pa-microhist.html#sidebar1</a>
</li>

<li>SPARC Processor Family Photo<br />
<a href="http://thenetworkisthecomputer.com/site/?p=243">http://thenetworkisthecomputer.com/site/?p=243</a>
</li>

<li>SPARC: Decades of Continuous Technical Innovation<br />
<a href="http://blogs.oracle.com/ontherecord/entry/sparc_decades_of_continuous_technical">http://blogs.oracle.com/ontherecord/entry/sparc_decades_of_continuous_technical</a>
</li>

<li>The SPARC processors<br />
<a href="http://www.top500.org/2007_overview_recent_supercomputers/sparc_processors">http://www.top500.org/2007_overview_recent_supercomputers/sparc_processors</a>
</li>

<li>Reduced instruction set computing (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Reduced_instruction_set_computer">http://en.wikipedia.org/wiki/Reduced_instruction_set_computer</a>
</li>

<li>MIPS architecture (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/MIPS_architecture">http://en.wikipedia.org/wiki/MIPS_architecture</a>
</li>

<li>Very long instruction word (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Very_long_instruction_word">http://en.wikipedia.org/wiki/Very_long_instruction_word</a>
</li>

<li>Classic RISC pipeline (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Classic_RISC_pipeline">http://en.wikipedia.org/wiki/Classic_RISC_pipeline</a>
</li>

<li>R2000 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R2000_(microprocessor)">http://en.wikipedia.org/wiki/R2000_(microprocessor)</a>
</li>

<li>R3000 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R3000">http://en.wikipedia.org/wiki/R3000</a>
</li>

<li>R4400 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R4400">http://en.wikipedia.org/wiki/R4400</a>
</li>

<li>R8000 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R8000">http://en.wikipedia.org/wiki/R8000</a>
</li>

<li>R10000 Microprocessor (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/R10000">http://en.wikipedia.org/wiki/R10000</a>
</li>

<li>SPARC (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Sparc">http://en.wikipedia.org/wiki/Sparc</a>
</li>

<li>CPU design (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/CPU_design">http://en.wikipedia.org/wiki/CPU_design</a>
</li>

<li>Control unit (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Control_unit">http://en.wikipedia.org/wiki/Control_unit</a>
</li>

<li>CPUID na x86-64<br />
<a href="http://www.felixcloutier.com/x86/CPUID.html">http://www.felixcloutier.com/x86/CPUID.html</a>
</li>

<li>Endianness<br />
<a href="https://en.wikipedia.org/wiki/Endianness">https://en.wikipedia.org/wiki/Endianness</a>
</li>

<li>Otevřené RISCové architektury OpenRISC a RISC-V<br />
<a href="https://www.root.cz/clanky/otevrene-riscove-architektury-openrisc-a-risc-v/">https://www.root.cz/clanky/otevrene-riscove-architektury-openrisc-a-risc-v/</a>
</li>

<li>Instrukční sada procesorových jader s otevřenou architekturou RISC-V<br />
<a href="https://www.root.cz/clanky/instrukcni-sada-procesorovych-jader-s-otevrenou-architekturou-risc-v/">https://www.root.cz/clanky/instrukcni-sada-procesorovych-jader-s-otevrenou-architekturou-risc-v/</a>
</li>

<li>Rozšíření instrukční sady procesorových jader s otevřenou architekturou RISC-V<br />
<a href="https://www.root.cz/clanky/rozsireni-instrukcni-sady-procesorovych-jader-s-otevrenou-architekturou-risc-v/">https://www.root.cz/clanky/rozsireni-instrukcni-sady-procesorovych-jader-s-otevrenou-architekturou-risc-v/</a>
</li>

<li>Instrukční sady procesorových jader s otevřenou architekturou RISC-V (dokončení)<br />
<a href="https://www.root.cz/clanky/instrukcni-sady-procesorovych-jader-s-otevrenou-architekturou-risc-v-dokonceni/">https://www.root.cz/clanky/instrukcni-sady-procesorovych-jader-s-otevrenou-architekturou-risc-v-dokonceni/</a>
</li>

<li>RISCové mikroprocesory s komprimovanými instrukčními sadami<br />
<a href="https://www.root.cz/clanky/riscove-mikroprocesory-s-komprimovanymi-instrukcnimi-sadami/">https://www.root.cz/clanky/riscove-mikroprocesory-s-komprimovanymi-instrukcnimi-sadami/</a>
</li>

<li>RISCové mikroprocesory s komprimovanými instrukčními sadami (2)<br />
<a href="https://www.root.cz/clanky/riscove-mikroprocesory-s-komprimovanymi-instrukcnimi-sadami-2/">https://www.root.cz/clanky/riscove-mikroprocesory-s-komprimovanymi-instrukcnimi-sadami-2/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

