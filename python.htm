<p>Jednou z&nbsp;významných vlastností <i>Pythonu</i> je jeho důraz na
minimalistickou syntaxi (malý počet klíčových slov), takže první programy je
možné začít psát již po několika desítkách minut studia.</p>

<p>Obliba <i>Pythonu</i> spočívá mj.&nbsp;i v&nbsp;tom, že podporuje (ale
současně nevyžaduje!) objektově orientovaný přístup v&nbsp;programování.
V&nbsp;praxi se například začátečníci mohou nejdříve seznámit se základními
konstrukcemi používanými při strukturovaném programování
(tj.&nbsp;s&nbsp;podmínkami, programovými smyčkami, uživatelskými funkcemi) a
teprve po zvládnutí základních technik se mohou začít věnovat objektově
orientovanému návrhu a objektově orientovanému programování.</p>

<p>Další vlastností <i>Pythonu</i>, které zjednodušuje programování jak
začátečníkům, tak i profesionálům, je dynamické typování, což znamená, že se
kontrola typů provádí až v&nbsp;době běhu programu a nikoli při jeho překladu
(což ostatně mnohdy není, například i kvůli použití polymorfismu, možné ani ve
staticky typovaných jazycích). Díky použití bílých znaků, tj.&nbsp;mezer a
tabulátorů, se navíc začínající programátoři musí naučit korektně odsazovat
jednotlivé bloky programového kódu (tato vlastnost <i>Pythonu</i> pravděpodobně
vzbuzuje nejvíce emocí jak na straně jejích zastánců, tak i odpůrců).</p>

<p>Vývojová a interaktivní prostředí pro Python</p>

<p>Při využití programovacího jazyka <i>Python</i> je samozřejmě užitečné mít
k&nbsp;dispozici vhodné vývojové prostředí, protože samotný <i>Python</i> sice
obsahuje možnost spuštění interaktivní konzole, ovšem ta uživatelům nabízí
pouze základní možnosti editace (řádkový editor s&nbsp;historií zapsaných
řádků), ale například neobsahuje žádnou podporu pro barevné zvýraznění syntaxe
či automatického doplňování názvů objektů (funkcí, proměnných).</p>

<p>IPython</p>

<p>Jednou z&nbsp;mnoha možností je použití <i>IPythonu</i>, což je interaktivní
shell, který uživatelům nabízí vylepšené (textové) uživatelské rozhraní,
v&nbsp;němž se například zvýrazňuje syntaxe jednotlivých jazykových prvků,
funguje doplňování názvů funkcí či proměnných, pro zápis delších částí kódu lze
volat vybraný textový editor atd. I přes zdánlivou jednoduchost se
<i>IPython</i> ukazuje jako velmi výkonný nástroj, který dokonce může být pro
některé účely vhodnější než vývojová prostředí s&nbsp;grafickým uživatelským
rozhraním, ve kterých se začínající programátor může poměrně snadno
&bdquo;ztratit&ldquo;.</p>

<p>IDLE</p>

<p>První &bdquo;skutečné&ldquo; integrované vývojové prostředí pro Python se jmenuje IDLE, neboli celým názvem Integrated DeveLopment Environment. Dalším významem tohoto názvu je odkaz na jméno herce Erica Idleho, který byl členem skupiny Monty Python's Flying Circus. Na této aplikaci je zajímavý především fakt, že IDLE je (a to mnohdy bez vědomí uživatelů) nainstalováno na velkém množství počítačů, a to včetně Raspbiannu. Ovšem IDLE je možné použít například i na systémech Microsoft Windows, protože ho nalezneme v&nbsp;populárním instalačním balíčku Pythonu připraveném společností Active State. Tento balíček se nazývá ActivePython, existují však i čistě open source varianty Pythonu pro zmiňovaný operační systém.</p>

<p>Jak již z&nbsp;výše uvedených informací vyplývá, jedná se v&nbsp;případě IDLE o multiplatformní integrované vývojové prostředí naprogramované čistě v&nbsp;Pythonu, přičemž multiplatformnost je zaručena mj.&nbsp;i tím, že IDLE využívá pro své grafické uživatelské rozhraní knihovnu (modul) nazvaný Tkinter zajišťující propojení programovacího jazyka Python s Tcl/Tk. Tcl je programovací jazyk navržený Johnem Ousterhoutem. Vrchol popularity tohoto jazyka nastal zhruba před patnácti lety, ovšem stále se používá a to mj.&nbsp;i díky existenci knihovny Tk pro tvorbu GUI. Modul Tkinter byl vytvořen Steenem Lumholtem a Quidem van Rossumem (autorem samotného Pythonu).</p>

<p>Integrované vývojové prostředí IDLE s velkou pravděpodobností nebude vyhovovat všem uživatelům a to mj. i z toho důvodu, že se v něm používá poněkud jiná filozofie práce s GUI. Samotné grafické uživatelské rozhraní IDLE je totiž založeno na systému samostatných oken a nikoli na dnes asi nejvíce používaném přístupu s jedním oknem, v němž se kromě různých nástrojových lišt zobrazuje i strom projektu a jednotlivé zdrojové soubory jsou umístěny v záložkách (tabech).</p>

<p>Kromě Python Shellu se v IDLE každý zdrojový soubor otevírá v samostatném okně (editoru), což s sebou přináší klady, ale i některé zápory ne nepodobné chování grafického editoru GIMP. Jedním z problémů je fakt, že se okna otevírají na nejvyšší úrovni desktopu, takže se mezi nimi poměrně obtížně přepíná, alespoň v případě použití těch správců oken, které neumožňují sdružování oken s využitím tabů (mezi správce oken, které tuto funkci mají, patří například známý Fluxbox).</p>

<p>Programátorský editor zabudovaný do integrovaného vývojového prostředí IDLE patří do skupiny spíše jednodušších editorů, i když v něm najdeme i funkci pro automatické doplňování, zobrazení &bdquo;bublinové&ldquo; nápovědy k metodám a funkcím či automatické odsazování bloků kódu (což je v Pythonu velmi důležitá vlastnost). Programátoři zvyklí na používání maker, automatické skládání kódu (folding) či na automatický refaktoring však budou možnostmi editoru v IDLE spíše zklamáni.</p>

Programátorský editor IDLE samozřejmě podporuje i zvýraznění syntaxe (což je dnes již vlastnost očekávaná ve všech typech IDE) a s editorem taktéž souvisí další typ okna – Class Browser. V Class Browseru se zobrazuje seznam všech tříd i funkcí/metod přítomných v jednom zdrojovém souboru, což částečně nahrazuje klasický stromový pohled na projekt – viz též screenshoty číslo 14 a 15. Class Browser kromě pasivního zobrazení tříd, funkcí a metod samozřejmě umožňuje i rychlý přechod na vybraný objekt.

<p>Eric</p>

<p>PyDev</p>

