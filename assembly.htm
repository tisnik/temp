<p>Programovací jazyky, které jsme si představili v&nbsp;předchozím textu, jsou vysokoúrovňové, což mj.&nbsp;znamená, že zdrojové kódy programů se v&nbsp;nich zapisují s&nbsp;využitím konstrukcí, které mikroprocesor nedokáže vykonat přímo. Aby bylo možné programy vytvořené například v&nbsp;jazyku Python či C skutečně spustit, je nutné je nějakým způsobem transformovat do podoby, které již mikroprocesor dokáže provést. Výsledná (transformovaná) podoba programu se nazývá <i>strojový kód (machine code)</i> a pro zmíněnou transformaci se používají interpretry (což je případ jazyka Python) nebo překladače (případ programovacího jazyka C). V&nbsp;některých situacích, zejména při programování mikrořadičů, však může být vhodnější vytvářet programy či jejich části v&nbsp;nízkoúrovňovém jazyku, který se přibližuje strojovému kódu. Důvodem může být snaha o vytvoření co nejrychlejšího a/nebo co nejmenšího programového kódu.</p>

<p>Assembler (jazyk symbolických adres)</p>

<p>Vzhledem k&nbsp;tomu, že přímý zápis strojového kódu je pracný, náchylný k&nbsp;chybám a prakticky neudržovatelný, používá se poněkud odlišný přístup &ndash; použití takzvaného <i>assembleru</i>. Assembler neboli též <i>jazyk symbolických adres (JSA)</i> popř.&nbsp;alternativně <i>jazyk symbolických instrukcí (JSI)</i> je nízkoúrovňovým programovacím jazykem, který na hierarchii jazyků sice stojí nad strojovým kódem, ovšem na straně druhé je umístěn hluboko pod vyššími kompilovanými programovacími jazyky typu C či interpretovanými jazyky typu Python. Typickou vlastností assembleru je jeho vazba na určitý typ mikroprocesoru popř.&nbsp;řadu mikroprocesorů (architekturu). Týká se to především sady dostupných instrukcí. Programy se ve většině typech assemblerů zapisují formou symbolických instrukcí, přičemž každá instrukce je představována svou mnemotechnickou zkratkou a případnými operandy (konstantami, adresami, nepřímými adresami, jmény pracovních registrů procesoru atd.).</p>

<p>Použití assembleru v&nbsp;praxi</p>

<p>Programování v&nbsp;jazyku symbolických adres již v&nbsp;současnosti není nijak masivní záležitostí, a to především z&nbsp;toho důvodu, že tvorba aplikací ve vyšších programovacích jazycích je v&nbsp;porovnání s&nbsp;assemblerem mnohem (mnohdy o jeden až dva řády) rychlejší, aplikace jsou snáze přenositelné na jiné platformy a změna aplikací, tj.&nbsp;přidávání nových vlastností či refaktoring, je ve vyšších programovacích jazycích jednodušší. Nesmíme taktéž zapomenout na to, že díky vývoji překladačů vyšších programovacích jazyků se běžně stává, že například algoritmus zapsaný v&nbsp;programovacím jazyku C může co do rychlosti snadno soutěžit s&nbsp;programem napsaným průměrným programátorem v&nbsp;assembleru. I přesto má assembler stále má své nezastupitelné místo, a to jak při zkoumání systémových volání v&nbsp;Linuxu a programování speciálního SW (části ovladačů, multimediální kodeky, některé kritické algoritmy typu FFT). V&nbsp;neposlední řadě se díky použití assembleru můžeme seznámit s&nbsp;principem funkce mikroprocesoru, který tvoří ústřední část nejenom Raspberry Pi, ale i všech dalších mikropočítačů.</p>

<p>Malá odbočka: vznik assembleru</p>

<p><i>Assemblery</i> za sebou mají velmi dlouhý vývoj, protože první nástroje, které se začaly tímto názvem označovat, vznikly již v&nbsp;padesátých letech minulého století, a to na <i>mainframech</i> vyráběných společností IBM i jejími konkurenty (UNIVAC, Burroughs, Honeywell, General Electric atd.). Před vznikem skutečných assemblerů byla situace poněkud složitá. První aplikace pro mainframy totiž byly programovány přímo ve strojovém kódu, který bylo možné přímo zadávat z&nbsp;takzvaného <i>řídicího panelu (control panel)</i> počítače či načítat z&nbsp;externích paměťových médií (děrných štítků, magnetických pásek atd.). Ovšem zapisovat programy přímo ve strojovém kódu je zdlouhavé, vedoucí k&nbsp;častým chybám a pro větší aplikace z&nbsp;mnoha důvodů nepraktické. Z&nbsp;důvodu usnadnění práce programátorů tedy vznikly první utility, jejichž úkolem bylo transformovat programy zapsané s&nbsp;využitím symbolických jmen strojových instrukcí do (binárního) strojového kódu určeného pro konkrétní typ počítače a jeho procesoru.</p>

<p>Těmto programům, jejichž možnosti se postupně vylepšovaly (například do nich přibyla podpora textových maker, řízení víceprůchodového překladu, vytváření výstupních sestav s&nbsp;překládanými symboly, později i skutečné linkování s&nbsp;knihovnami atd.), se začalo říkat <i>assemblery</i> a jazyku určenému pro symbolický zápis programů pak <i>jazyk symbolických instrukcí</i> či <i>jazyk symbolických adres</i> &ndash; <i>assembly language</i> (někdy též zkráceně nazývaný assembler, takže toto slovo má vlastně dodnes oba dva významy). Jednalo se o svým způsobem převratnou myšlenku: sám počítač byl použit pro tvorbu programů, čímž odpadla namáhavá práce s&nbsp;tužkou a papírem. Posléze se zjistilo, že i programování přímo v&nbsp;assembleru je většinou pracné a zdlouhavé, takže se na mainframech začaly používat různé vyšší programovací jazyky, zejména FORTRAN a COBOL. Použití vyšších programovacích jazyků bylo umožněno relativně vysokým výpočetním výkonem mainframů i (opět relativně) velkou kapacitou operační paměti; naopak se díky vyšším programovacím jazykům mohly aplikace přenášet na různé typy počítačů, což je nesporná výhoda.</p>

<p>Assemblery v&nbsp;Linuxu</p>

<p>V&nbsp;tomto odstavci budeme pod termínem &bdquo;assembler&ldquo; chápat programový nástroj určený pro transformaci zdrojového kódu naprogramovaného v&nbsp;jazyku symbolických adres do strojového kódu. Pro operační systém Linux vzniklo hned několik takových nástrojů, přičemž některé nástroje jsou komerční a jiné patří mezi open source. Z&nbsp;nekomerčních nástrojů se jedná o známý <i>GNU Assembler</i>, dále pak o nástroj nazvaný <i>Netwide assembler (NASM)</i>, nástroj <i>Yasm Modular Assembler</i> či až překvapivě výkonný <i>vasm</i>. <i>NASM</i> a <i>Yasm</i> jsou pro první krůčky v&nbsp;assembleru velmi dobře použitelné, neboť mají dobře zpracovaný mechanismus reakce na chyby, dají se v&nbsp;nich psát čitelné programy atd.</p>

<p>Assembler pro mikroprocesory ARM</p>

<p>Zásadní problém při snaze o použití <i>Netwide assembleru</i> či <i>Yasmu</i> však nastává v&nbsp;případě, kdy je nutné vyvíjet aplikace určené pro jinou architekturu, než je i386 či x86_64, a to z&nbsp;toho důvodu, že tyto dva nástroje nedokážou pracovat s&nbsp;odlišnou instrukční sadou. Naproti tomu <i>GNU Assembler</i> tímto problémem ani zdaleka netrpí, takže se v&nbsp;následujících podkapitolách budeme zabývat především <i>GNU Assemblerem</i>.</p>

<p>GNU Assembler a sada nástrojů GNU Binutils</p>

<p><i>GNU Assembler</i> (zkráceně jen <i>gas</i>) je součástí skupiny nástrojů nazvaných <i>GNU Binutils</i>. Jedná se o nástroje určené pro vytváření a správu binárních souborů obsahujících takzvaný &bdquo;objektový kód&ldquo;, dále nástrojů určených pro práci s&nbsp;nativními knihovnami i pro takzvané profilování (profilováním se testuje, ve které části programu se stráví nejvíce času). Mezi nástroje spadající do <i>GNU Binutils</i> patří vedle <i>GNU Assembleru</i> i linker <strong>ld</strong>, profiler <strong>gprof</strong>, správce archivů strojových funkcí <strong>ar</strong>, nástroj pro odstranění symbolů z&nbsp;objektových a spustitelných souborů <strong>strip</strong> a několik pomocných utilit typu <strong>nm</strong>, <strong>objdump</strong>, <strong>size</strong> a v&nbsp;neposlední řadě také <strong>strings</strong>.</p>

<p><i>GNU Assembler</i> je možné použít buď pro překlad uživatelem vytvořených zdrojových kódů nebo pro zpracování kódů vygenerovaných překladači vyšších programovacích jazyků (<strong>GCC</strong> atd.). Zajímavé je, že všechny moderní verze <i>GNU Assembleru</i> podporují jak původní AT&amp;T syntaxi, tak i (podle mnoha programátorů čitelnější) syntaxi používanou společností Intel.</p>

<p>Volání funkcí kernelu &ndash; syscalls</p>

<p>Vzhledem k&nbsp;tomu, že i ta nejjednodušší aplikace naprogramovaná v&nbsp;assembleru musí nějakým způsobem ukončit svou činnost, je nutné buď zavolat vhodnou knihovní funkci (z&nbsp;<strong>libc</strong>) popř.&nbsp;použít takzvaný &bdquo;syscall&ldquo;. V&nbsp;kontextu operačního systému Linux se pod tímto termínem skrývá volání nějaké funkce umístěné přímo v&nbsp;jádru operačního systému.</p>

<p>V&nbsp;praxi to funguje následovně: podle požadavků konkrétní funkce se naplní pracovní registry popř.&nbsp;datové struktury uložené v&nbsp;paměti, následně se číslo služby uloží do pracovního registru <strong>r7</strong> (32bitový ARM s&nbsp;použitím EABI) popř.&nbsp;<strong>x8</strong> (ARM64) a následně se zavolá nějaká instrukce, která přepne kontext procesoru do privilegovaného režimu &bdquo;jádra&ldquo; (vyvolá výjimku atd.). Na procesorech s&nbsp;architekturou ARM32 je to instrukce <strong>SWI 0h</strong> a u ARM64 instrukce <strong>SVC #0</strong>:</p>

<table>
<tr><th>Architektura</th><th>Číslo služby v</th><th>Instrukce pro syscall</th><th>Návratová hodnota v</th></tr>
<tr><td>ARM 32 s EABI</td><td>r7</td><td>SWI 0h</td><td>r0</td></tr>
<tr><td>ARM 64</td><td>x8</td><td>SVC #0</td><td>x0</td></tr>
<tr><td>i386</td><td>eax</td><td>INT 80h</td><td>eax</td></tr>
<tr><td>x86_64</td><td>rax</td><td>SYSCALL</td><td>rax</td></tr>
<tr><td>Motorola 68k</td><td>d0</td><td>TRAP #0</td><td>d0</td></tr>
</table>

<p>Zkratky</p>

JSA jazyk symbolických adres, assembler
JSI jazyk symbolických instrukcí, též assembler

