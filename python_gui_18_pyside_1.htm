<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba grafického uživatelského rozhraní v Pythonu s využitím frameworku PySide</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba grafického uživatelského rozhraní v Pythonu s využitím frameworku PySide</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V seriálu o tvorbě aplikací s grafickým uživatelským rozhraním s využitím jazyka Python postoupíme k další GUI knihovně. Tentokrát se začneme zabývat praktickým použitím PySide, jenž zprostředkovává propojení Pythonu s multiplatformním frameworkem Qt.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba grafického uživatelského rozhraní v&nbsp;Pythonu s&nbsp;využitím frameworku PySide</a></p>
<p><a href="#k02">2. PyQt vs.&nbsp;PySide</a></p>
<p><a href="#k03">3. Moduly frameworku Qt dostupné přes PySide vývojářům používajícím Python</a></p>
<p><a href="#k04">4. Základní widgety a jejich hierarchie</a></p>
<p><a href="#k05">5. Nejjednodušší aplikace používající PySide: prázdné okno</a></p>
<p><a href="#k06">6. Zjednodušený import modulu <strong>QtGui</strong></a></p>
<p><a href="#k07">7. Kdy přesně se vlastně zobrazí hlavní okno aplikace?</a></p>
<p><a href="#k08">8. Nastavení titulku a rozměrů okna</a></p>
<p><a href="#k09">9. Okno založené na komponentě <strong>QLabel</strong> a nikoli na <strong>QWidget</strong></a></p>
<p><a href="#k10">10. Odvození vlastní třídy z&nbsp;komponenty <strong>QLabel</strong></a></p>
<p><a href="#k11">11. Styl textu aneb použití vybraných HTML značek</a></p>
<p><a href="#k12">12. Složitější okno ve funkci kontejneru pro další widget(y)</a></p>
<p><a href="#k13">13. Okno s&nbsp;tlačítkem</a></p>
<p><a href="#k14">14. Uzavření aplikace po stisku tlačítka &ndash; použití metody <strong>QCoreApplication.quit</strong></a></p>
<p><a href="#k15">15. Přidání nápovědy (<i>tooltip</i>) k&nbsp;tlačítku</a></p>
<p><a href="#k16">16. Signály a události: reakce na stisk tlačítka podruhé</a></p>
<p><a href="#k17">17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba grafického uživatelského rozhraní v&nbsp;Pythonu s&nbsp;využitím frameworku PySide</h2>

<p>V&nbsp;předchozích sedmnácti částech <a
href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">seriálu
o tvorbě aplikací s&nbsp;grafickým uživatelským rozhraním v&nbsp;Pythonu</a>
jsme si nejprve popsali knihovnu <i>Tkinter</i> a následně pak i knihovnu
nazvanou <i>appJar</i>, která je na Tkinteru založena. Samozřejmě se však
nejedná o jediné knihovny, které je možné pro tvorbu grafického uživatelského
rozhraní využít. Velmi často se například setkáme s&nbsp;aplikacemi psanými
v&nbsp;Pythonu, které používají vazbu na populární framework <a
href="https://www.qt.io/">Qt</a>. Přitom existuje hned několik možností, jak
propojit Python a Qt. Základ tvoří knihovny <a
href="https://riverbankcomputing.com/software/pyqt/intro">PyQt</a>
(s&nbsp;duální licencí GNU GPL v3 a Riverbank Commercial License) a <a
href="https://wiki.qt.io/PySide">PySide</a> (s&nbsp;licencí LGPL) pro Qt &le;
4.8, další možností je právě vyvíjená <a
href="https://wiki.qt.io/PySide2">PySide2</a> určená pro Qt 5.x.</p>

<a href="https://www.root.cz/obrazek/312508/"><img src="https://i.iinfo.cz/images/458/pyside1-1-prev.png" class="image-312508" alt="&#160;" height="270" width="327" /></a>
<p><i>Obrázek 1: Příkladem aplikace postavené na PyQt je integrované vývojové
prostředí Eric.</i></p>

<p>Podobně jako knihovna <a href="http://www.pygtk.org/">PyGTK</a>, která
vývojářům zajišťuje rozhraní mezi programovacím jazykem Python a knihovnou
GTK+, je tomu podobně i u knihovny nazvané PyQt, samozřejmě ovšem s&nbsp;tím
&bdquo;nepatrným&ldquo; rozdílem, že PyQt představuje rozhraní pro Qt, která je
používána (nejenom) v&nbsp;desktopovém prostředí KDE (ve skutečnosti se
s&nbsp;Qt setkáme i iOS či Androidu). Ve skutečnosti však Qt není pouze
knihovna určená pro tvorbu grafického uživatelského rozhraní, ale ucelený
framework, což mj.&nbsp;znamená, že v&nbsp;PyQt mají vývojáři k&nbsp;dispozici
rozhraní se zhruba 440 třídami a 6000 funkcemi i metodami, s&nbsp;jejichž
využitím je možné vytvářet grafické uživatelské rozhraní (i s&nbsp;použitím
deklarativního jazyka <a
href="http://doc.qt.io/qt-5/qmlapplications.html">QML</a>), používat známý
widget <i>QScintilla</i> používaný v&nbsp;textových editorech a procesorech,
pracovat s&nbsp;relačními databázemi, používat vektorový grafický formát <a
href="https://www.root.cz/clanky/vektorovy-graficky-format-svg/">SVG</a>,
pracovat se soubory XML apod.</p>

<a href="https://www.root.cz/obrazek/312509/"><img src="https://i.iinfo.cz/images/458/pyside1-2-prev.png" class="image-312509" alt="&#160;" height="270" width="347" /></a>
<p><i>Obrázek 2: GUI nabízené integrovaným vývojovým prostředím Eric.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. PyQt vs.&nbsp;PySide</h2>

<p>Kvůli problémům s&nbsp;duální licencí PyQt (resp.&nbsp;přesněji řečeno
v&nbsp;nemožnosti využít LGPL či podobnou licenci vhodnější pro knihovny)
vznikla na bázi PyQt knihovna PySide používající, jak jsme se již dozvěděli
v&nbsp;první kapitole, licenci <a
href="https://www.gnu.org/copyleft/lesser.html">LGPL</a>. Díky tomu lze PySide
bez problémů použít jak v&nbsp;uzavřených komerčních aplikacích, tak i
v&nbsp;open source programech. Další &ndash; tentokrát již technologické
&ndash; rozdíly mezi PyQt a PySide naleznete na stránce <a
href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">Differences
Between PySide and PyQt</a>. Všechny další demonstrační příklady, které si
postupně popíšeme, jsou otestovány vůči PySide; později si ukážeme možnost
přechodu na PySide2.</p>

<a href="https://www.root.cz/obrazek/312510/"><img src="https://i.iinfo.cz/images/458/pyside1-3-prev.png" class="image-312510" alt="&#160;" height="235" width="370" /></a></p>
<p><i>Obrázek 3: Poměrně dobrým příkladem aplikace, která využívá možnosti
komponenty QScintilla, je outline editor Leo (screenshot byl získán
z&nbsp;domovské stránky tohoto programu).</i></p>

<p>Před otestováním příkladů si nainstalujte metabalíček, který je obvykle
nazvaný <strong>python-pyside</strong>
popř.&nbsp;<strong>python3-pyside</strong> (pozor na to, že v&nbsp;některých
distribucích je první balíček určen pro Python 3 a druhý tím pádem neexistuje,
v&nbsp;dalších distribucích naopak zatím neexistuje balíček pro Python 3
apod.).</p>

<a href="https://www.root.cz/obrazek/312511/"><img src="https://i.iinfo.cz/images/458/pyside1-4-prev.png" class="image-312511" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek 4: Informace o metabalíčku python-pyside v&nbsp;Linux
Mintu.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Moduly frameworku Qt dostupné přes PySide vývojářům používajícím Python</h2>

<p>V&nbsp;následující tabulce jsou vypsány moduly frameworku Qt, které jsou
díky PySide dostupné i vývojářům používajícím programovací jazyk Python:</p>

<table>
<tr><th>Modul</th><th>Stručný popis</th></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtCore/index.html">QtCore</a></td><td>kromě dalšího i implementace smyčky událostí a mechanizmu signálů a slotů (používáno především v&nbsp;GUI)</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/index.html">QtGui</a></td><td>většina tříd používaných v&nbsp;GUI, kromě tříd zmíněných výše</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtMultimedia/index.html">QtMultimedia</a></td><td>nízkoúrovňové multimediální funkce</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtOpenGL/index.html">QtOpenGL</a></td><td>rozhraní k&nbsp;OpenGL</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtSvg/index.html">QtSvg</a></td><td>podpora pro zobrazení SVG (vektorová grafika)</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/phonon/index.html">Phonon</a></td><td>multimediální funkce (audio, video)</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtUiTools/index.html">QtUiTools</a></td><td>zpracování formulářů a dialogů vytvořených Qt Designerem</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtDeclarative/index.html">QtDeclarative</a></td><td>umožňuje deklarativní tvorbu UI</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtHelp/index.html">QtHelp</a></td><td>integrace nápovědy do aplikací</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtNetwork/index.html">QtNetwork</a></td><td>tvorba klientů a serverů komunikujících přes TCP/IP</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtSql/index.html">QtSql</a></td><td>rozhraní k&nbsp;(relačním) databázím</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtXml/index.html">QtXml</a></td><td>zpracování XML dokumentů (proudové i založené na DOM)</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtWebKit/index.html">QtWebkit</a></td><td>známý engine pro použití (nejenom) ve webových prohlížečích</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtScript/index.html">QtScript</a></td><td>společně s&nbsp;dalším modulem umožňuje tvorbu skriptovatelných aplikací</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtScriptTools/index.html">QtScriptTools</a></td><td>společně s&nbsp;předchozím modulem umožňuje tvorbu skriptovatelných aplikací</td></tr>
</table>

<p>Na tomto místě je vhodné poznamenat, že nativní programové rozhraní (API)
modulů frameworku Qt je pro účely PySide upraveno, takže se zjednodušila
například práce se signály atd. Podrobnosti o této problematice se samozřejmě
ve správném okamžiku :-) dozvíme. Na druhou stranu nejsou změny tak velké, aby
se při studiu jednotlivých modulů nebylo možné odkazovat na původní dokumentaci
ke Qt.</p>

<a href="https://www.root.cz/obrazek/312512/"><img src="https://i.iinfo.cz/images/458/pyside1-5-prev.png" class="image-312512" alt="&#160;" height="270" width="330" /></a>
<p><i>Obrázek 5: Další příklad vhodné kombinace frameworku Qt a programovacího
jazyka Python &ndash; Qt Console aneb vylepšený interaktivní terminál
s&nbsp;možnostmi grafického výstupu (a mnoha dalšími vylepšeními).</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Základní widgety a jejich hierarchie</h2>

<p>Modul <i>QtGui</i> je založen na základní komponentě grafického
uživatelského rozhraní, která se jmenuje jednoduše <a
href="https://srinikom.github.io/pyside-docs/PySide/QtGui/QWidget.html">QWidget</a>.
Tato komponenta může vystupovat skutečně v&nbsp;roli ovládacího prvku vloženého
do nějakého okna či dialogu, nebo je možné tuto komponentu využít jako vlastní
okno, tj.&nbsp;jako kontejner pro další widgety. <strong>QWidget</strong> také
může přijímat a zpracovávat události od uživatele (myš, klávesnice) či od
správce oken. Samotný <strong>QWidget</strong>  má jen minimalistický vzhled
&ndash; jedná se totiž o obdélníkovou plochu s&nbsp;konfigurovatelným pozadím.
Od <strong>QWidgetu</strong> se odvozují další &ndash; specializovanější
&ndash; ovládací prvky, zejména pak:</p>

<table>
<tr><th>Komponenta</th><th>Stručný popis</th></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#qframe">QFrame</a></td><td>komponenta s&nbsp;volitelným okrajem, odvozují se od ní další widgety</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html#qlabel">QLabel</a></td><td>textové či grafické (obrázek, video) návěští</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPushButton.html#qpushbutton">QPushButton</a></td><td>klasické tlačítko</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QToolButton.html#qtoolbutton">QToolButton</a></td><td>tlačítko obvykle umisťované na toolbar</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html#qradiobutton">QRadioButton</a></td><td>přepínací tlačítko</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html#qcheckbox">QCheckBox</a></td><td>zaškrtávací tlačítko</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListView.html#qlistview">QListView</a></td><td>seznam prvků</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QComboBox.html#qcombobox">QComboBox</a></td><td>kombo box (vstupní prvek + seznam prvků)</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html#qlineedit">QLineEdit</a></td><td>vstup jednoho řádku textu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPlainTextEdit.html#qplaintextedit">QPlainTextEdit</a></td><td>jednoduché vstupní víceřádkové textové pole</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html#qtextedit">QTextEdit</a></td><td>vstupní textové pole (umožňuje práci s tabulkami, obrázky atd.)</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextBrowser.html#qtextbrowser">QTextBrowser</a></td><td>komponenta s&nbsp;textem, který může obsahovat hypertextové odkazy</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgWidget.html#qsvgwidget">QSvgWidget</a></td><td>komponenta pro zobrazení SVG (vektorová grafika)</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtOpenGL/QGLWidget.html#qglwidget">QGLWidget</a></td><td>komponenta pro zobrazení 2D/3D výstupu generovaného přes OpenGL</td></tr>
</table>

<p>Tyto komponenty si postupně popíšeme a samozřejmě nezapomeneme ani na
komponenty složitější (hotové dialogy, zobrazení stromové struktury atd.).</p>

<a href="https://www.root.cz/obrazek/312513/"><img src="https://i.iinfo.cz/images/458/pyside1-6-prev.png" class="image-312513" alt="&#160;" height="203" width="370" /></a>
<p><i>Obrázek 6: Další příklad možností Qt Console (pro IPython).</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Nejjednodušší aplikace používající PySide: prázdné okno</h2>

<p>Podívejme se nyní na způsob implementace té nejjednodušší aplikace
s&nbsp;grafickým uživatelským rozhraním. Tato aplikace je tvořena jediným
oknem, které je odvozeno od obecného widgetu <strong>QWidget</strong>. Tento
ovládací prvek nemá žádného předka, tudíž je zobrazen přímo na obrazovce a
nikoli <i>v</i> jiném widgetu:</p>

<pre>
# konstrukce obecného widgetu bez předka
window = PySide.QtGui.QWidget()
&nbsp;
# zobrazení widgetu na obrazovce
window.show()
</pre>

<p>Povšimněte si především toho, že je zapotřebí vytvořit takzvaný aplikační
objekt a poté zajistit vstup do smyčky událostí zavoláním metody
<strong>exec_</strong> tohoto objektu:</p>

<pre>
# konstrukce výchozího tzv. aplikačního objektu
app = PySide.QtGui.QApplication(sys.argv)
...
...
...
# vstup do smyčky událostí (event loop)
app.exec_()
</pre>

<p>Typicky bývá volání <strong>app.exec_()</strong> poslední explicitně volanou
funkcí v&nbsp;aplikaci; zbylá funkcionalita je řešena přes smyčku událostí
(navíc se na některých systémech řízení z&nbsp;této funkce vůbec nemusí vrátit
zpět do volajícího kódu!).</p>

<p>První demonstrační příklad používající PySide může vypadat následovně:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
# prozatím budeme využívat jen modul QtGui
import PySide.QtGui
&nbsp;
# konstrukce výchozího tzv. aplikačního objektu
app = PySide.QtGui.QApplication(sys.argv)
&nbsp;
# konstrukce obecného widgetu bez předka
window = PySide.QtGui.QWidget()
&nbsp;
# zobrazení widgetu na obrazovce
window.show()
&nbsp;
# vstup do smyčky událostí (event loop)
app.exec_()
</pre>

<a href="https://www.root.cz/obrazek/312514/"><img src="https://i.iinfo.cz/images/458/pyside1-7-prev.png" class="image-312514" alt="&#160;" height="198" width="370" /></a>
<p><i>Obrázek 7: Poněkud nudné GUI naší první aplikace.</i></p>

<p>Poznámka: ve skutečnosti se tímto způsobem složitější aplikace nepíšou.
Lepší je využít principů OOP, o čemž se zmíníme v&nbsp;navazujících
kapitolách.</p>

<p>Zbývá nám ještě odpovědět na otázku, proč se vlastně metoda
<strong>exec_</strong> zapisuje s&nbsp;podtržítkem.  V&nbsp;Pythonu 2.x (ale už
ne ve verzi 3.x) je totiž slovo <strong>exec</strong> (bez podtržítka)
rezervovaným klíčovým slovem, o čemž se lze snadno přesvědčit:</p>

<pre>
$ <strong>python</strong>
&nbsp;
Python 2.7.6 (default, Oct 26 2016, 20:30:19) 
[GCC 4.8.4] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; <strong>import keyword</strong>
&gt;&gt;&gt; <strong>keyword.kwlist</strong>
['and', 'as', 'assert', 'break', 'class', 'continue', 'def',
 'del', 'elif', 'else', 'except', '<strong>exec</strong>',
 'finally', 'for', 'from', 'global', 'if', 'import', 'in',
 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise',
 'return', 'try', 'while', 'with', 'yield']
</pre>

<p>V&nbsp;Pythonu 3 získáme nepatrně odlišný seznam, nyní již bez
<strong>exec</strong>:</p>

<pre>
$ <strong>python3</strong>
&nbsp;
Python 3.4.3 (default, Nov 17 2016, 01:08:31) 
[GCC 4.8.4] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; <strong>import keyword</strong>
&gt;&gt;&gt; <strong>keyword.kwlist</strong>
['False', 'None', 'True', 'and', 'as', 'assert', 'break',
 'class', 'continue', 'def', 'del', 'elif', 'else',
 'except', 'finally', 'for', 'from', 'global', 'if',
 'import', 'in', 'is', 'lambda', 'nonlocal', 'not',
 'or', 'pass', 'raise', 'return', 'try', 'while',
 'with', 'yield']
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zjednodušený import modulu <strong>QtGui</strong></h2>

<p>Předchozí demonstrační příklad ještě nepatrně upravíme. Především se namísto
importu ve tvaru:</p>

<pre>
import PySide.QtGui
</pre>

<p>použije následující zápis zajišťující, že nebudeme muset explicitně
zapisovat jmenný prostor u objektů typu <strong>QApplication</strong>,
<strong>QWidget</strong> atd. (někteří programátoři tento způsob preferují,
ovšem při větším množství importovaných modulů je to spíše na obtíž):</p>

<pre>
from PySide.QtGui import *
</pre>

<p>Dále ještě zajistíme explicitní ukončení a předání návratové hodnoty
z&nbsp;aplikace, samozřejmě ovšem jen na těch systémech, v&nbsp;nichž skutečně
dochází k&nbsp;návratu z&nbsp;metody <strong>exec_</strong>:</p>

<pre>
sys.exit(app.exec_())
</pre>

<p>Upravená druhá verze příkladu vypadá následovně:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# prozatím budeme využívat jen modul QtGui
from PySide.QtGui import *
&nbsp;
# konstrukce výchozího tzv. aplikačního objektu
app = QApplication(sys.argv)
&nbsp;
# konstrukce obecného widgetu bez předka
window = QWidget()
&nbsp;
# zobrazení widgetu na obrazovce
window.show()
&nbsp;
# vstup do smyčky událostí (event loop)
sys.exit(app.exec_())
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Kdy přesně se vlastně zobrazí hlavní okno aplikace?</h2>

<p>V&nbsp;předchozích dvou variantách demonstračního příkladu jsme volali
metodu pojmenovanou <strong>window.show</strong> pro zobrazení widgetu
představujícího hlavní okno aplikace na obrazovce. Ve skutečnosti však widget
není ihned po zavolání této metody zobrazen, protože aplikace ještě nevstoupila
do smyčky obsluhy událostí (<i>event loop</i>), v&nbsp;níž se interně zpracuje
událost se žádostí o překreslení widgetu. O tom, že je toto tvrzení pravdivé,
se můžeme přesvědčit velmi snadno, a to konkrétně vložením viditelného zpoždění
mezi volání <strong>window.show</strong> a <strong>app.exec_</strong>:</p>

<pre>
# zobrazení widgetu na obrazovce
window.show()
&nbsp;
print('after window.show()')
sleep(5)
&nbsp;
&nbsp;
# vstup do smyčky událostí (event loop)
app.exec_()
</pre>

<p>Funkce zajišťující kýžené (pětisekundové) zpoždění může vypadat například
takto:</p>

<pre>
def sleep(seconds):
    print('sleeping')
&nbsp;
    for i in range(seconds, 0, -1):
        print(i)
        time.sleep(1)
&nbsp;
    print('waking up')
</pre>

<p>Po spuštění příkladu se nejdříve spustí odpočítávání a až po přibližně pěti
sekundách je okno aplikace zobrazeno, i když metoda
<strong>window.show</strong> byla zavolána před funkcí
<strong>sleep</strong>:</p>

<a href="https://www.root.cz/obrazek/312515/"><img src="https://i.iinfo.cz/images/578/pyside11-1-prev.png" class="image-312515" alt="&#160;" height="198" width="370" /></a>
<p><i>Obrázek 8: Okno se (až na titulek) nijak neodlišuje od okna vytvořeného
prvním demonstračním příkladem.</i></p>

<p>Zdrojový kód tohoto příkladu se změnil takto:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
import time
&nbsp;
# prozatím budeme využívat jen modul QtGui
from PySide.QtGui import *
&nbsp;
&nbsp;
def sleep(seconds):
    print('sleeping')
&nbsp;
    for i in range(seconds, 0, -1):
        print(i)
        time.sleep(1)
&nbsp;
    print('waking up')
&nbsp;
&nbsp;
# konstrukce výchozího tzv. aplikačního objektu
app = QApplication(sys.argv)
&nbsp;
# konstrukce obecného widgetu bez předka
window = QWidget()
&nbsp;
print('before window.show()')
&nbsp;
# zobrazení widgetu na obrazovce
window.show()
&nbsp;
print('after window.show()')
<strong>sleep(5)</strong>
&nbsp;
&nbsp;
# vstup do smyčky událostí (event loop)
app.exec_()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Nastavení titulku a rozměrů okna</h2>

<p>Widgety nabízené modulem <i>QtGui</i> je možné různým způsobem modifikovat,
ať již se to týká jejich vzhledu či chování. Prozatím si ukážeme jen základní
modifikaci spočívající v&nbsp;nastavení titulku okna přes vlastnost
(<i>property</i>) <a
href="https://srinikom.github.io/pyside-docs/PySide/QtGui/QWidget.html#PySide.QtGui.PySide.QtGui.QWidget.setWindowTitle">setWindowTitle</a>
a změnu rozměrů okna metodou <a
href="https://srinikom.github.io/pyside-docs/PySide/QtGui/QWidget.html#PySide.QtGui.PySide.QtGui.QWidget.resize">resize</a>.
Použití je snadné, minimálně ve chvíli, kdy měníme vlastnosti widgetů ještě
před vstupem do smyčky obsluhy událostí:</p>

<pre>
# nastavení titulku
window.setWindowTitle('Hello world!')
&nbsp;
# změna rozměrů okna
window.resize(400, 300)
</pre>

<img src="https://i.iinfo.cz/images/578/pyside11-2.png" class="image-312516" alt="&#160;" height="327" width="402" />
<p><i>Obrázek 9: Na tomto screenshotu můžeme vidět, že se okno aplikace
skutečně zmenšilo a má korektně nastavený titulek.</i></p>

<p>Upravený zdrojový kód demonstračního příkladu nyní bude vypadat
následovně:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# prozatím budeme využívat jen modul QtGui
from PySide.QtGui import *
&nbsp;
# konstrukce výchozího tzv. aplikačního objektu
app = QApplication(sys.argv)
&nbsp;
# konstrukce obecného widgetu bez předka
window = QWidget()
&nbsp;
# nastavení titulku a rozměrů okna
<strong>window.setWindowTitle('Hello world!')</strong>
<strong>window.resize(400, 300)</strong>
&nbsp;
# zobrazení widgetu na obrazovce
window.show()
&nbsp;
# vstup do smyčky událostí (event loop)
app.exec_()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Okno založené na komponentě <strong>QLabel</strong> a nikoli na <strong>QWidget</strong></h2>

<p>Pro vytvoření hlavního okna aplikace nemusíme použít jen obecný widget
představovaný instancí třídy <strong>QWidget</strong>. Můžeme totiž využít i
některého potomka této třídy, například <strong>QLabel</strong>. Ten může být
pro první kroky s&nbsp;PySide užitečný, protože příslušný widget dokáže na své
ploše zobrazit zvolený text, který navíc může mít uživatelsky nastavený styl
(to ale zdaleka není vše, protože tento widget zobrazuje i rastrový obrázek
nebo video). Zkusme si tedy předchozí příklady upravit takovým způsobem, aby
byl ovládací prvek <strong>QWidget</strong> nahrazen za
<strong>QLabel</strong>. Navíc využijeme faktu, že při konstrukci návěští
můžeme nově vzniklému widgetu předat text, který má být tímto ovládacím prvkem
zobrazen:</p>

<pre>
# konstrukce návěští bez předka
label = QLabel('Hello world!')
&nbsp;
# zobrazení widgetu na obrazovce
label.show()
</pre>

<p><i>Obrázek 10: Velikost okna se zmenší, protože okno bude nastaveno na
vypočtenou velikost návěští.</i></p>

<p>Ostatní části příkladu se vlastně nebudou odlišovat od příkladu druhého:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# prozatím budeme využívat jen modul QtGui
from PySide.QtGui import *
&nbsp;
# konstrukce výchozího tzv. aplikačního objektu
app = QApplication(sys.argv)
&nbsp;
# konstrukce návěští bez předka
<strong>label = QLabel('Hello world!')</strong>
&nbsp;
# zobrazení widgetu na obrazovce
<strong>label.show()</strong>
&nbsp;
# vstup do smyčky událostí (event loop)
sys.exit(app.exec_())
</pre>

<p>Zajímavé bude zjistit, do jaké míry se tento zdrojový kód bude podobat
aplikaci s&nbsp;GUI naprogramované s&nbsp;využitím již popsané knihovny
<i>appJar</i>. Zkusme si příklady nepatrně upravit (na stejný počet řádků) a
porovnat v&nbsp;textovém editoru:</p>

<a href="https://www.root.cz/obrazek/312518/"><img src="https://i.iinfo.cz/images/578/pyside11-4-prev.png" class="image-312518" alt="&#160;" height="187" width="370" /></a>
<p><i>Obrázek 11: Porovnání podobných aplikací &ndash; jedna používá knihovnu
appJar, druhá PySide (pro lepší čitelnost na obrázek klikněte, aby se zvětšil
na původní velikost).</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Odvození vlastní třídy z&nbsp;komponenty <strong>QLabel</strong></h2>

<p>Všechny předchozí demonstrační příklady byly schválně vytvořeny co
nejjednodušším způsobem, takže se vlastně jednalo o pouhou  sérii volání
několika konstruktorů a metod. Ovšem při tvorbě rozsáhlejších aplikací je nutné
aplikovat jiný styl programování. Ten je ukázán v&nbsp;dalším demonstračním
příkladu, v&nbsp;němž je deklarována třída <strong>HelloWorldLabel</strong>,
jejímž předkem je třída <strong>QLabel</strong>. Tím vlastně říkáme, že
rozšiřujeme a také specializujeme možnosti původního obecného návěští.
V&nbsp;první verzi příkladu voláme konstruktor předka &bdquo;starým&ldquo;
způsobem, s&nbsp;nímž se však ještě můžeme v&nbsp;praxi setkat. Novější způsob
již využívá <strong>super</strong>:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# prozatím budeme využívat jen modul QtGui
from PySide.QtGui import *
&nbsp;
# konstrukce výchozího tzv. aplikačního objektu
app = QApplication(sys.argv)
&nbsp;
&nbsp;
# nový widget bude odvozen od standardního návěští
class HelloWorldLabel(QLabel):
&nbsp;
    def __init__(self):
        # zavoláme konstruktor předka (nedoporučovaná varianta)
        <strong>QLabel.__init__(self, "Hello world!")</strong>
&nbsp;
    def run(self):
        # zobrazení okna na obrazovce
        self.show()
        # vstup do smyčky událostí (event loop)
        app.exec_()
&nbsp;
&nbsp;
HelloWorldLabel().run()
</pre>

<img src="https://i.iinfo.cz/images/160/pyside12-1.png" class="image-312610" alt="&#160;" height="44" width="82" />
<p><i>Obrázek 12: Po spuštění aplikace s&nbsp;výše zobrazeným zdrojovým kódem
by se mělo ukázat toto malé okno.</i></p>

<p>Ještě lepší bude &bdquo;schovat&ldquo; proměnnou s&nbsp;aplikačním objektem
do funkce <strong>main</strong>, která se zavolá buď explicitně
(v&nbsp;případě, že skript spouštíme přímo z&times;příkazového řádku) nebo
nepřímo z&nbsp;libovolného jiného modulu:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# prozatím budeme využívat jen modul QtGui
from PySide import QtGui
&nbsp;
&nbsp;
# nový widget bude odvozen od standardního návěští
class HelloWorldLabel(QtGui.QLabel):
&nbsp;
    def __init__(self):
        # zavoláme konstruktor předka
&nbsp;
        # varianta pro Python 2.x i pro Python 3.x
        super(HelloWorldLabel, self).__init__("Hello world!")
&nbsp;
        # varianta pro Python 3.x
        # super().__init__("Hello world!")
&nbsp;
    def run(self, app):
        # zobrazení okna na obrazovce
        self.show()
        # vstup do smyčky událostí (event loop)
        app.exec_()
&nbsp;
&nbsp;
def main():
    app = QtGui.QApplication(sys.argv)
    HelloWorldLabel().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Styl textu aneb použití vybraných HTML značek</h2>

<p>Návěští představované v&nbsp;knihovně PySide objektem typu
<strong>QLabel</strong> je až pozoruhodně flexibilní, protože kromě obyčejného
jednořádkového textu dokáže pracovat i s&nbsp;rastrovými obrázky, víceřádkovým
textem, textem s&nbsp;formátováním atd. Ukažme si nyní způsob použití
naformátovaného textu, který se v&nbsp;dokumentaci označuje termínem
&bdquo;rich text document&ldquo;. Pro specifikaci formátu můžeme použít některé
vybrané HTML značky, což je výhodné, protože tvůrci Qt/PySide nemuseli vymýšlet
nový značkovací jazyk a programátoři se ho nemusí učit:</p>

<pre>
def __init__(self):
    # text pro návěští
    labelText = "normal text&lt;br&gt;&lt;b&gt;bold&lt;/b&gt;&lt;br&gt;&lt;i&gt;italic&lt;/i&gt;"
&nbsp;
    # zavoláme konstruktor předka
&nbsp;
    # varianta pro Python 2.x i pro Python 3.x
    super(HelloWorldLabel, self).__init__(labelText)
&nbsp;
    # varianta pro Python 3.x
    # super().__init__(labelText)
</pre>

<img src="https://i.iinfo.cz/images/160/pyside12-2.png" class="image-312611" alt="&#160;" height="78" width="81" />
<p><i>Obrázek 13: Návěští zobrazující třířádkový text
s&nbsp;formátováním.</i></p>

<p>Jak ale vlastně návěští pozná, že má například namísto textu
&bdquo;&lt;br&gt;&ldquo; tento text interpretovat jako konec řádku? Konkrétní
chování se řídí pomocí metody <strong>QLabel.setTextFormat</strong>, které se
předá jedna z&nbsp;následujících konstant z&nbsp;výčtového typu
<strong>QtCore.Qt.TextFormat</strong>:</p>

<ol>
<li><strong>Qt.PlainText</strong></li>
<li><strong>Qt.RichText</strong></li>
<li><strong>Qt.AutoText</strong></li>
</ol>

<p>Implicitně je nastaven <strong>Qt.AutoText</strong>, který na základě
návratové hodnoty metody <strong>Qt.mightBeRichText</strong> rozhodne, jak se
má řetězec interpretovat. Samozřejmě můžete v&nbsp;případě potřeby pro jistotu
nastavit přímo hodnotu <strong>Qt.RichText</strong>, což však v&nbsp;našem
případě nebylo nutné.</p>

<p>Opět následuje výpis celého zdrojového kódu demonstračního příkladu:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# prozatím budeme využívat jen modul QtGui
from PySide import QtGui
&nbsp;
&nbsp;
# nový widget bude odvozen od standardního návěští
class HelloWorldLabel(QtGui.QLabel):
&nbsp;
    def __init__(self):
        # text pro návěští
        labelText = <strong>"normal text&lt;br&gt;&lt;b&gt;bold&lt;/b&gt;&lt;br&gt;&lt;i&gt;italic&lt;/i&gt;"</strong>
&nbsp;
        # zavoláme konstruktor předka
&nbsp;
        # varianta pro Python 2.x i pro Python 3.x
        super(HelloWorldLabel, self).__init__(<strong>labelText</strong>)
&nbsp;
        # varianta pro Python 3.x
        # super().__init__(<strong>labelText</strong>)
&nbsp;
    def run(self, app):
        # zobrazení okna na obrazovce
        self.show()
        # vstup do smyčky událostí (event loop)
        sys.exit(app.exec_())
&nbsp;
&nbsp;
def main():
    app = QtGui.QApplication(sys.argv)
    HelloWorldLabel().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Složitější okno ve funkci kontejneru pro další widget(y)</h2>

<p>Naši testovací aplikaci si dále upravíme, a to konkrétně takovým způsobem,
že do hlavního okna (což byl prozatím náš jediný widget) přidáme další ovládací
prvek. Je to jednoduché, protože okno slouží jako kontejner a při konstrukci
návěští pouze musíme do konstruktoru předat referenci na tento kontejner.
Podívejme se, jak se to provádí. Metoda <strong>prepareGUI</strong> je
deklarována ve třídě <strong>HelloWorldLabel</strong>, takže referenci na
kontejner máme k&nbsp;dispozici &ndash; je jím hodnota parametru
<strong>self</strong>:</p>

<pre>
def prepareGUI(<strong>self</strong>):
    self.resize(320, 240)
    self.setWindowTitle("Window and label")
&nbsp;
    # návěští
    label = <strong>QtGui.QLabel("Hello world!", self)</strong>
    # posun v rámci nadřazeného widgetu
    label.move(100, 100)
</pre>

<p>Návěští je v&nbsp;rámci svého kontejneru posunuto na souřadnice 100, 100.
V&nbsp;další části tohoto seriálu si ukážeme, jak se dá tato operace provést
mnohem lépe a s&nbsp;ohledem na různá rozlišení displejů.</p>

<img src="https://i.iinfo.cz/images/160/pyside12-3.png" class="image-312612" alt="&#160;" height="267" width="322" />
<p><i>Obrázek 14: Okno (kontejner) obsahující další widget, v&nbsp;tomto
případě návěští.</i></p>

<p>Opět se podívejme na celý zdrojový kód příkladu, po jehož spuštění získáme
okno z&nbsp;obrázku číslo 14:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# prozatím budeme využívat jen modul QtGui
from PySide import QtGui
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného widgetu
class MainWindow(QtGui.QWidget):
&nbsp;
    def __init__(self):
        # zavoláme konstruktor předka
        super(MainWindow, self).__init__()
&nbsp;
        # konfigurace GUI + přidání widgetu do okna
        self.prepareGUI()
&nbsp;
    def prepareGUI(self):
        self.resize(320, 240)
        self.setWindowTitle("Window and label")
&nbsp;
        # návěští
        label = QtGui.QLabel("Hello world!", self)
        # posun v rámci nadřazeného widgetu
        label.move(100, 100)
&nbsp;
    def run(self, app):
        # zobrazení okna na obrazovce
        self.show()
        # vstup do smyčky událostí (event loop)
        sys.exit(app.exec_())
&nbsp;
&nbsp;
def main():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Okno s&nbsp;tlačítkem</h2>

<p>Konečně se dostáváme k&nbsp;zajímavější oblasti, konkrétně k&nbsp;ovládacím
prvkům, které jsou aktivní. Návěští je totiž, i přes svou flexibilitu, jen
pasivním prvkem, který většinou nijak nereaguje na činnost uživatele.
Nejjednodušším, ale velmi důležitým, aktivním widgetem jsou tlačítka, přičemž
tlačítko se základním chováním je představováno objekty typu
<strong>QPushButton</strong>. Upravme si tedy naši metodu
<strong>prepareGUI</strong> tak, aby se do okna namísto návěští vložilo právě
tlačítko. Povšimněte si, že tlačítku opět předáváme referenci na kontejner, do
kterého má být umístěno. Ihned po vytvoření také změníme velikost tlačítka,
ovšem nikam ho neposuneme, takže se tlačítko umístí do levého horního rohu
svého kontejneru:</p>

<pre>
def prepareGUI(self):
    self.resize(320, 240)
    self.setWindowTitle("Simple Button")
&nbsp;
    # tlačítko
    button = <strong>QtGui.QPushButton("Button", self)</strong>
    button.resize(button.sizeHint())
</pre>

<img src="https://i.iinfo.cz/images/160/pyside12-4.png" class="image-312613" alt="&#160;" height="267" width="322" />
<p><i>Obrázek 15: Okno (kontejner) obsahující další widget, v&nbsp;tomto
případě tlačítko.</i></p>

<p>Kromě výše uvedené změny je zbytek zdrojového kódu shodný s&nbsp;předchozím
příkladem:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# prozatím budeme využívat jen modul QtGui
from PySide import QtGui
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného widgetu
class MainWindow(QtGui.QWidget):
&nbsp;
    def __init__(self):
        # zavoláme konstruktor předka
        super(MainWindow, self).__init__()
&nbsp;
        # konfigurace GUI + přidání widgetu do okna
        self.prepareGUI()
&nbsp;
    def prepareGUI(self):
        self.resize(320, 240)
        self.setWindowTitle("Simple Button")
&nbsp;
        # tlačítko
        <strong>button = QtGui.QPushButton("Button", self)</strong>
        <strong>button.resize(button.sizeHint())</strong>
&nbsp;
    def run(self, app):
        # zobrazení okna na obrazovce
        self.show()
        # vstup do smyčky událostí (event loop)
        sys.exit(app.exec_())
&nbsp;
&nbsp;
def main():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Uzavření aplikace po stisku tlačítka &ndash; použití metody <strong>QCoreApplication.quit</strong></h2>

<p>Knihovna PySide samozřejmě podporuje i práci s&nbsp;takzvanými signály a
sloty, což je koncept, kterému se budeme podrobněji věnovat příště. Dnes si
pouze ukážeme, jakým způsobem je možné navázat akci typu &bdquo;kliknutí na
tlačítko&ldquo; se zavoláním nějaké funkce či metody. Následující příkaz
zajistí, že se po kliknutí na jediné tlačítko v&nbsp;aplikaci zavolá metoda <a
href="https://pyside.github.io/docs/pyside/PySide/QtCore/QCoreApplication.html#PySide.QtCore.PySide.QtCore.QCoreApplication.quit">QCoreApplication.quit</a>.
Nejprve ovšem musíme získat referenci na objekt typu <a
href="https://pyside.github.io/docs/pyside/PySide/QtGui/QApplication.html#PySide.QtGui.QApplication">QtGui.QApplication</a>:</p>

<pre>
# navázání akce na signál
button.clicked.connect(QtCore.QCoreApplication.instance().quit)
</pre>

<p>Opět si ukažme, jak vypadá úplný spustitelný kód další varianty
demonstračního příkladu:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# import "jádra" frameworku Qt i modulu pro GUI
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného widgetu
class MainWindow(QtGui.QWidget):
&nbsp;
    def __init__(self):
        # zavoláme konstruktor předka
        super(MainWindow, self).__init__()
&nbsp;
        # konfigurace GUI + přidání widgetu do okna
        self.prepareGUI()
&nbsp;
    def prepareGUI(self):
        self.resize(320, 240)
        self.setWindowTitle("Quit Button")
&nbsp;
        # tlačítko
        button = QtGui.QPushButton("Quit", self)
        button.resize(button.sizeHint())
&nbsp;
        # navázání akce na signál
        <strong>button.clicked.connect(QtCore.QCoreApplication.instance().quit)</strong>
&nbsp;
    def run(self, app):
        # zobrazení okna na obrazovce
        self.show()
        # vstup do smyčky událostí (event loop)
        sys.exit(app.exec_())
&nbsp;
&nbsp;
def main():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

<p>Ve skutečnosti můžeme poněkud neobratné volání
<strong>QtCore.QCoreApplication.instance()</strong> nahradit za
<strong>app</strong>, ovšem to si vyžádá nepatrné úpravy kódu:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# import "jádra" frameworku Qt i modulu pro GUI
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného widgetu
class MainWindow(QtGui.QWidget):
&nbsp;
    def __init__(self, app):
        <strong>self.app = app</strong>
&nbsp;
        # zavoláme konstruktor předka
        super(MainWindow, self).__init__()
&nbsp;
        # konfigurace GUI + přidání widgetu do okna
        self.prepareGUI()
&nbsp;
    def prepareGUI(self):
        self.resize(320, 240)
        self.setWindowTitle("Quit Button")
&nbsp;
        # tlačítko
        button = QtGui.QPushButton("Quit", self)
        button.resize(button.sizeHint())
&nbsp;
        # navázání akce na signál
        button.clicked.connect(<strong>self.app.quit</strong>)
&nbsp;
    def run(self):
        # zobrazení okna na obrazovce
        self.show()
        # vstup do smyčky událostí (event loop)
        sys.exit(<strong>self.app.exec_()</strong>)
&nbsp;
&nbsp;
def main():
    app = QtGui.QApplication(sys.argv)
    MainWindow(<strong>app</strong>).run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Přidání nápovědy (<i>tooltip</i>) k&nbsp;tlačítku</h2>

<p>Velmi jednoduše (na rozdíl od knihovny Tkinter, kde je to o mnoho
komplikovanější), také můžeme k&nbsp;tlačítku přidat bublinovou nápovědu
(<i>tooltip</i>, <i>hint</i>) zobrazenou ve chvíli, kdy se nad tlačítkem na
určitou (konfigurovatelnou dobu) zastaví kurzor myši. Podívejme se, jak to lze
provést. Použijeme metodu <a
href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html?highlight=settooltip#PySide.QtGui.PySide.QtGui.QWidget.setToolTip">QWidget.setToolTip</a>:</p>

<pre>
# tlačítko
button = QtGui.QPushButton("Quit", self)
button.resize(button.sizeHint())
button.setToolTip("Immediately quit this application")
</pre>

<img src="https://i.iinfo.cz/images/160/pyside12-5.png" class="image-312614" alt="&#160;" height="267" width="322" />
<p><i>Obrázek 16: Nápověda k&nbsp;tlačítku zobrazená ve chvíli, kdy se nad ním
zastaví kurzor myši.</i></p>

<p>Příklad se jen nepatrně prodlouží:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
import sys
&nbsp;
# import "jádra" frameworku Qt i modulu pro GUI
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
# nový widget bude odvozen od obecného widgetu
class MainWindow(QtGui.QWidget):
&nbsp;
    def __init__(self):
        # zavoláme konstruktor předka
        super(MainWindow, self).__init__()
&nbsp;
        # konfigurace GUI + přidání widgetu do okna
        self.prepareGUI()
&nbsp;
    def prepareGUI(self):
        self.resize(320, 240)
        self.setWindowTitle("Quit Button")
&nbsp;
        # tlačítko
        button = QtGui.QPushButton("Quit", self)
        button.resize(button.sizeHint())
        <strong>button.setToolTip("Immediately quit this application")</strong>
&nbsp;
        # navázání akce na signál
        button.clicked.connect(QtCore.QCoreApplication.instance().quit)
&nbsp;
    def run(self, app):
        # zobrazení okna na obrazovce
        self.show()
        # vstup do smyčky událostí (event loop)
        sys.exit(app.exec_())
&nbsp;
&nbsp;
def main():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Signály a události: reakce na stisk tlačítka podruhé</h2>

<p>Na nějakou událost je samozřejmě možné navázat i volání uživatelské funkce,
například funkce, která aplikaci ihned (a nutno říci, že nepříliš čistě)
uzavře:</p>

<pre>
# callback funkce
def closeApplication():
    print("Closing...")
    sys.exit(0)
</pre>

<p>Existují hned dva způsoby propojení události a callback funkce. Ten starší
poměrně přesně reflektuje způsob registrace události pomocí metody <a
href="https://pyside.github.io/docs/pyside/PySide/QtCore/QObject.html#PySide.QtCore.PySide.QtCore.QObject.connect">QObject.connect</a>
tak, jak by mohl být naprogramován s&nbsp;využitím Qt a C++:</p>

<pre>
# starý způsob navázání signálu, který není příliš Python-friendly
QtCore.QObject.connect(button, QtCore.SIGNAL ('clicked()'), closeApplication)
</pre>

<p>Novější způsob již nevyžaduje přesnou specifikaci typu signálu, protože je
určeno přímo jeho jménem v&nbsp;deklaraci třídy
<strong>QAbstractButton</strong>. Pro tuto třídu existují čtyři signály:
pressed, released, clicked a toggled:</p>

<pre>
# navázání akce (callback funkce) na signál - zavolání běžné funkce
button.clicked.connect(closeApplication)
</pre>

<p>Taktéž je možné po stisku tlačítka zavolat metodu; v&nbsp;tomto případě
nezapomeňte na <strong>self.jméno_metody</strong> (pokud je metoda deklarována
ve stejné třídě, jako samotné tlačítko):</p>

<pre>
# navázání akce (callback funkce) na signál - zavolání metody
button.clicked.connect(self.quit)
</pre>

<p>Podrobnosti o konceptu signálů, tzv.&nbsp;slotů a s&nbsp;nimi související
konfigurace aplikace, si řekneme příště.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dvanácti dnes popsaných demonstračních příkladů byly
opět uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>01_empty_window.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/01_empty_window.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/01_empty_window.py</a></td></tr>
<tr><td>02_empty_window_simpler_import.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/02_empty_window_simpler_import.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/02_empty_window_simpler_import.py   </a></td></tr>
<tr><td>03_show_in_event_loop.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/03_show_in_event_loop.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/03_show_in_event_loop.py</a></td></tr>
<tr><td>04_window_style.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/04_window_style.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/04_window_style.py</a></td></tr>
<tr><td>05_simple_label.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/05_simple_label.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/05_simple_label.py</a></td></tr>
<tr><td>06_custom_label_class.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/06_custom_label_class.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/06_custom_label_class.py</a></td></tr>
<tr><td>07_custom_label_class2.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/07_custom_label_class2.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/07_custom_label_class2.py</a></td></tr>
<tr><td>08_basic_text_style.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/08_basic_text_style.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/08_basic_text_style.py</a></td></tr>
<tr><td>09_window_and_label.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/09_window_and_label.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/09_window_and_label.py</a></td></tr>
<tr><td>10_simple_button.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/10_simple_button.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/10_simple_button.py</a></td></tr>
<tr><td>11_quit_button.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/11_quit_button.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/11_quit_button.py</a></td></tr>
<tr><td>12_button_tooltip.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/12_button_tooltip.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/12_button_tooltip.py</a></td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>PySide documentation<br />
<a href="https://srinikom.github.io/pyside-docs/index.html">https://srinikom.github.io/pyside-docs/index.html</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide tutorials<br />
<a href="https://srinikom.github.io/pyside-docs/tutorials/index.html">https://srinikom.github.io/pyside-docs/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QWidget<br />
<a href="https://srinikom.github.io/pyside-docs/PySide/QtGui/QWidget.html">https://srinikom.github.io/pyside-docs/PySide/QtGui/QWidget.html</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a></li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

