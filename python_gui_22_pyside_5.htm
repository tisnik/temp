<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba GUI v Pythonu s využitím frameworku PySide: hlavní menu, nástrojový pruh a výběrové seznamy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba GUI v Pythonu s využitím frameworku PySide: hlavní menu, nástrojový pruh a výběrové seznamy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V pátém článku o knihovně PySide si ukážeme, jak se do hlavního okna aplikace přidává menu (samozřejmě i s ikonami a klávesovými zkratkami) a nástrojový pruh. Ve druhé polovině si popíšeme další užitečné widgety, především výběrový seznam.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Rozšíření možností hlavního okna odvozeného od třídy <strong>QMainWindow</strong></a></p>
<p><a href="#k02">2. Přidání menu do hlavního okna</a></p>
<p><a href="#k03">3. První příklad: jednoduché rozbalovací menu</a></p>
<p><a href="#k04">4. Druhý příklad: zobrazení nápovědy k&nbsp;aktuálně vybraným položkám menu</a></p>
<p><a href="#k05">5. Třetí příklad: položky menu vyvolávané klávesovými zkratkami</a></p>
<p><a href="#k06">6. Ikony ve frameworku PySide</a></p>
<p><a href="#k07">7. Čtvrtý příklad: položky menu s&nbsp;ikonami</a></p>
<p><a href="#k08">8. Přidání nástrojového pruhu do hlavního okna</a></p>
<p><a href="#k09">9. Pátý příklad: jednoduchý nástrojový pruh se dvěma tlačítky</a></p>
<p><a href="#k10">10. Šestý příklad: kombinace hlavního menu i nástrojového pruhu</a></p>
<p><a href="#k11">11. Další užitečné widgety nabízené frameworkem PySide</a></p>
<p><a href="#k12">12. Výběrový seznam (listbox)</a></p>
<p><a href="#k13">13. Sedmý příklad: jednoduchý výběrový seznam s&nbsp;textovými položkami</a></p>
<p><a href="#k14">14. Osmý příklad: alternativní způsob přidání položek do výběrového seznamu</a></p>
<p><a href="#k15">15. Události generované při práci s&nbsp;výběrovým seznamem</a></p>
<p><a href="#k16">16. Devátý příklad: reakce na základní události při práci s&nbsp;výběrovým seznamem</a></p>
<p><a href="#k17">17. Desátý příklad: seznam s&nbsp;ikonami</a></p>
<p><a href="#k18">18. Obsah dalšího pokračování seriálu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Rozšíření možností hlavního okna odvozeného od třídy <strong>QMainWindow</strong></h2>

<p>V&nbsp;<a
href="https://www.root.cz/clanky/tvorba-gui-v-pythonu-s-pyside-prepinaci-tlacitka-a-tvorba-hlavnich-oken-aplikaci/">předchozí
části</a> <a
href="https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/">seriálu
o tvorbě aplikací s&nbsp;grafickým uživatelským rozhraním v&nbsp;Pythonu</a>
jsme se seznámili se základními vlastnostmi třídy <strong>QMainWindow</strong>.
Ukázali jsme si, jak se od této třídy odvozuje vlastní hlavní okno aplikace,
způsob přidání stavového řádku, dalších ovládacích prvků atd. Dnes budeme
v&nbsp;popisu možností této třídy pokračovat, protože do hlavního okna aplikace
postupně přidáme menu (položkám v&nbsp;menu samozřejmě přiřadíme klávesové
zkratky a ikony) a taktéž nástrojový pruh (<i>toolbar</i>). Druhá část článku
je pak věnována dalším užitečným a často používaným ovládacím prvkům, především
výběrovému seznamu, který je reprezentován třídou <strong>QListWidget</strong>.
Tento seznam může obsahovat jak jednoduché textové prvky, tak i ikony a
samozřejmě též kombinaci text+ikona.</p>

<p>Pro začátek si připomeňme, jak vypadá ta prakticky nejjednodušší aplikace
s&nbsp;hlavním oknem odvozeným od třídy <strong>QMainWindow</strong>:</p>

<pre>
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow")
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
    def <strong>quit</strong>(self):
        print("Closing...")
        self.close()
</pre>

<p>Hlavní okno aplikace se zobrazí (a tím pádem i &bdquo;spustí&ldquo;)
jednoduše:</p>

<pre>
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
</pre>

<img src="https://i.iinfo.cz/images/217/pyside5a-1.png" class="image-316205" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 1: Prázdné hlavní okno jednoduché aplikace postavené na widgetu
<strong>QMainWindow</strong>.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Přidání menu do okna</h2>

<p>Podívejme se nyní, jakým způsobem je možné do hlavního okna aplikace přidat
menu. Stále budeme rozšiřovat funkcionalitu třídy <strong>QMainWindow</strong>,
tj.&nbsp;budeme postupovat stejně, jak to bylo naznačeno v&nbsp;předchozím
příkladu:</p>

<pre>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
</pre>

<p>Přidání plochy pro menu (resp.&nbsp;přesněji pro pruh či lištu s&nbsp;menu)
zajistí jediný příkaz:</p>

<pre>
menubar = self.menuBar()
</pre>

<p>Pokud ovšem nebude do menu přidán žádný obsah, bude skutečná plocha
alokovaná pro menu jen zcela minimální:</p>

<img src="https://i.iinfo.cz/images/217/pyside5a-2.png" class="image-316206" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 2: Po přidání pruhu pro menu vypadá hlavní okno aplikace
následovně. V&nbsp;porovnání s&nbsp;prvním screenshotem můžeme vidět jen malou
změnu &ndash; pětipixelový proužek na horním okraji okna.</i></p>

<p>Prozatím prázdné listy rozbalovacích menu lze vytvořit následovně.
Povšimněte si, že můžeme použít znak &amp; pro specifikaci klávesové zkratky
Alt+znak:</p>

<pre>
fileMenu = menubar.addMenu('&amp;File')
helpMenu = menubar.addMenu('&amp;Help')
</pre>

<img src="https://i.iinfo.cz/images/217/pyside5a-3.png" class="image-316207" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 3: Hlavní menu s&nbsp;dvojicí prázdných listů File a
Help.</i></p>

<p>Do jednotlivých listů můžeme přidat jednotlivé položky menu. Každá položka
je reprezentována instancí třídy <strong>QAction</strong>:</p>

<pre>
fileQuitItem = QtGui.QAction('&amp;Quit', self)
</pre>

<p>Přidání již vytvořené položky do listu menu zajistí metoda
<strong>addAction</strong></p>

<pre>
fileMenu.addAction(fileQuitItem)
</pre>

<p>U každé položky lze s&nbsp;využitím signálu specifikovat, jaká funkce,
metoda či anonymní funkce se zavolá ve chvíli, kdy je položka menu vybrána
myší, klávesnicí (najetím + Enter) nebo klávesovou zkratkou:</p>

<pre>
fileQuitItem.triggered.connect(self.close)
</pre>

<img src="https://i.iinfo.cz/images/217/pyside5a-4.png" class="image-316208" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 4: Menu s&nbsp;naplněnými listy.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První příklad: jednoduché rozbalovací menu</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázán způsob vytvoření
lišty menu se dvěma položkami <i>File</i> a <i>Help</i>. Po výběru každé
z&nbsp;těchto položek se příslušné menu rozbalí a zobrazí svůj obsah (což je
v&nbsp;každém případě jediný příkaz, alespoň v&nbsp;této verzi aplikace). První
příkaz ukončí aplikaci voláním metody <strong>QMainWindow.close()</strong>,
druhý příkaz zobrazí dialog s&nbsp;informacemi o aplikaci. Používá se zde třída
<strong>QMessageBox</strong>, kterou jsme si sice prozatím nepopsali, ale její
základní použití je viditelné ze zdrojového kódu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle('QMainWindow + statusBar + mainMenu')
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction('&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># příkaz Help/About</i>
        helpAboutItem = QtGui.QAction('&amp;About', self)
        helpAboutItem.triggered.connect(self.aboutDialog)
&nbsp;
        <i># položka Help v hlavním menu</i>
        helpMenu = menubar.addMenu('&amp;Help')
        helpMenu.addAction(helpAboutItem)
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
        pass
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Druhý příklad: zobrazení nápovědy k&nbsp;aktuálně vybraným položkám menu</h2>

<p>Ve druhém demonstračním příkladu je do hlavního okna přidán stavový
řádek:</p>

<pre>
<i># stavový řádek</i>
self.statusBar().showMessage('QMainWindow')
</pre>

<img src="https://i.iinfo.cz/images/217/pyside5a-5.png" class="image-316209" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 5: Druhý příklad ihned po svém spuštění s&nbsp;inicializovaným
stavovým řádkem.</i></p>

<p>Navíc budeme u každé položky menu specifikovat krátký text s&nbsp;nápovědou.
Ta bude zcela automaticky zobrazena ve stavovém řádku ve chvíli, kdy je daná
položka vybrána. Pro mnoho aplikací se složitějšími příkazy se jedná o
důležitou část GUI, kterou navíc získáme prakticky &bdquo;zadarmo&ldquo;, takže
vlastně pravděpodobně ani neexistuje žádný důvod, proč ji nevyužít:</p>

<pre>
<i># příkaz File/Quit</i>
fileQuitItem = QtGui.QAction('&amp;Quit', self)
fileQuitItem.triggered.connect(self.close)
fileQuitItem.setStatusTip('Quit the application')
&nbsp;
<i># příkaz Help/About</i>
helpAboutItem = QtGui.QAction('&amp;About', self)
helpAboutItem.triggered.connect(self.aboutDialog)
helpAboutItem.setStatusTip('About this application')
</pre>

<img src="https://i.iinfo.cz/images/217/pyside5a-6.png" class="image-316210" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 6: Způsob zobrazení nápovědy k&nbsp;vybrané položce menu ve
stavovém řádku.</i></p>

<p>Následuje výpis zdrojového kódu dnešního druhého demonstračního
příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle('QMainWindow + statusBar + mainMenu')
&nbsp;
        <i># stavový řádek</i>
        self.statusBar().showMessage('QMainWindow')
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction('&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># příkaz Help/About</i>
        helpAboutItem = QtGui.QAction('&amp;About', self)
        helpAboutItem.triggered.connect(self.aboutDialog)
        helpAboutItem.setStatusTip('About this application')
&nbsp;
        <i># položka Help v hlavním menu</i>
        helpMenu = menubar.addMenu('&amp;Help')
        helpMenu.addAction(helpAboutItem)
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
        pass
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Třetí příklad: položky menu vyvolávané klávesovými zkratkami</h2>

<p>Menu můžeme dále vylepšit, a to tak, že jednotlivým položkám/příkazům
přiřadíme klávesové zkratky. Jedná se o téma, kterému jsme se již částečně
věnovali minule v&nbsp;kontextu dalších ovládacích prvků, takže si dnes jen
rychle ukážeme, jak příkazu <i>File&rarr;Quit</i> přiřadíme klávesovou zkratku
<strong>Ctrl+Q</strong> a příkazu <i>Help&rarr;About</i> klávesovou zkratku
<strong>F1</strong>:</p>

<pre>
<i># příkaz File/Quit</i>
fileQuitItem = QtGui.QAction('&amp;Quit', self)
fileQuitItem.triggered.connect(self.close)
fileQuitItem.setStatusTip('Quit the application')
fileQuitItem.setShortcut('Ctrl+Q')
</pre>

<img src="https://i.iinfo.cz/images/217/pyside5a-7.png" class="image-316211" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 7: Položka menu (příkaz), který je možné vyvolat i klávesovou
zkratkou.</i></p>

<p>Druhá položka (příkaz) menu:</p>

<pre>
<i># příkaz Help/About</i>
helpAboutItem = QtGui.QAction('&amp;About', self)
helpAboutItem.triggered.connect(self.aboutDialog)
helpAboutItem.setStatusTip('About this application')
helpAboutItem.setShortcut('F1')
</pre>

<img src="https://i.iinfo.cz/images/217/pyside5a-8.png" class="image-316212" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 8: Druhá položka menu (příkaz), který je možné vyvolat i
klávesovou zkratkou.</i></p>

<p>Žádné další úpravy již v&nbsp;aplikaci nemusíme provádět, což je ostatně
patrné i při pohledu na úplný zdrojový kód dnešního třetího demonstračního
příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle('QMainWindow + statusBar + mainMenu')
&nbsp;
        <i># stavový řádek</i>
        self.statusBar().showMessage('QMainWindow')
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction('&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># příkaz Help/About</i>
        helpAboutItem = QtGui.QAction('&amp;About', self)
        helpAboutItem.triggered.connect(self.aboutDialog)
        helpAboutItem.setStatusTip('About this application')
        helpAboutItem.setShortcut('F1')
&nbsp;
        <i># položka Help v hlavním menu</i>
        helpMenu = menubar.addMenu('&amp;Help')
        helpMenu.addAction(helpAboutItem)
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
        pass
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Ikony ve frameworku PySide</h2>

<p>V&nbsp;mnoha ovládacích prvcích je možné kromě textu zobrazit i ikony. Týká
se to samozřejmě i položek menu, takže si nyní ukažme, jak se s&nbsp;ikonami
pracuje. Je to ve skutečnosti velmi jednoduché, protože při vytváření
(konstrukci) nové položky můžeme v&nbsp;prvním parametru konstruktoru uvést
objekt typu <strong>QIcon</strong>. A vytvoření tohoto objektu je opět snadné,
protože konstruktoru pouze předáme cestu k&nbsp;externímu souboru
s&nbsp;rastrovým obrázkem. Na rozdíl od knihovny Tkinter, v&nbsp;níž se nijak
nehlídala existence reference na objekt s&nbsp;ikonou (a musel to tedy zajistit
programátor, například použitím globálních proměnných a/nebo atributů třídy) je
kód psaný pro framework PySide mnohem čistší:</p>

<pre>
<i># příkaz File/Quit</i>
fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                             '&amp;Quit', self)
fileQuitItem.triggered.connect(self.close)
fileQuitItem.setStatusTip('Quit the application')
fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
<i># příkaz Help/About</i>
helpAboutItem = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                              '&amp;About', self)
helpAboutItem.triggered.connect(self.aboutDialog)
helpAboutItem.setStatusTip('About this application')
helpAboutItem.setShortcut('F1')
</pre>

<img src="https://i.iinfo.cz/images/217/pyside5a-9.png" class="image-316213" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 9: Menu s&nbsp;ikonami použitými u jednotlivých
položek/příkazů.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Čtvrtý příklad: položky menu s&nbsp;ikonami</h2>

<p>Ve čtvrtém příkladu použijeme dvě ikony, které přiřadíme položkám menu
<i>File&rarr;Quit</i> a <i>Help&rarr;About</i>. Obě ikony jsou uloženy
v&nbsp;podadresáři <strong>icons</strong>, který samozřejmě taktéž <a
href="https://github.com/tisnik/presentations/tree/master/Python_GUI/PySide/icons">naleznete
v&nbsp;repositáři s&nbsp;projekty</a>. Další zde uložené ikony budou použity
v&nbsp;následujících příkladech popsaných v&nbsp;navazujících kapitolách.</p>

<img src="https://i.iinfo.cz/images/217/pyside5a-10.png" class="image-316214" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 10: Druhé menu s&nbsp;ikonami použitými u jednotlivých
položek/příkazů.</i></p>

<p>Zdrojový kód dnešního čtvrtého demonstračního příkladu vypadá
následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle('QMainWindow + statusBar + mainMenu')
&nbsp;
        <i># stavový řádek</i>
        self.statusBar().showMessage('QMainWindow')
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># příkaz Help/About</i>
        helpAboutItem = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                      '&amp;About', self)
        helpAboutItem.triggered.connect(self.aboutDialog)
        helpAboutItem.setStatusTip('About this application')
        helpAboutItem.setShortcut('F1')
&nbsp;
        <i># položka Help v hlavním menu</i>
        helpMenu = menubar.addMenu('&amp;Help')
        helpMenu.addAction(helpAboutItem)
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
        pass
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Přidání nástrojového pruhu do hlavního okna</h2>

<p>Kromě menu, jehož existenci očekává většina uživatelů klasických
desktopových aplikací, je možné do hlavního okna přidat i nástrojový pruh
neboli <i>toolbar</i>. Na tomto pruhu mohou být umístěny různé widgety, typicky
se však setkáme s&nbsp;tlačítky (mnohdy bez textu) a s&nbsp;výběrovými seznamy.
Nástrojový pruh může být vybaven &bdquo;ouškem&ldquo; určeným pro jeho přesun
do jiné oblasti hlavního okna či dokonce zcela mimo hlavní okno. Na sekvenci
screenshotů zobrazených pod tímto odstavcem můžeme vidět jednotlivé možnosti
umístění jednoduchého nástrojového pruhu se dvěma tlačítky:</p>

<img src="https://i.iinfo.cz/images/692/pyside5b-1.png" class="image-316215" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 11: Nástrojový pruh je zadokován u horního okraje okna.</i></p>

<img src="https://i.iinfo.cz/images/692/pyside5b-2.png" class="image-316216" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 12: Nástrojový pruh je zadokován u levého okraje okna.</i></p>

<img src="https://i.iinfo.cz/images/692/pyside5b-3.png" class="image-316217" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 13: Nástrojový pruh je zadokován u dolního okraje okna.</i></p>

<img src="https://i.iinfo.cz/images/692/pyside5b-4.png" class="image-316218" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 14: Nástrojový pruh je zadokován u pravého okraje okna.</i></p>

<img src="https://i.iinfo.cz/images/692/pyside5b-5.png" class="image-316219" alt="&#160;" width="300" height="127" />
<p><i>Obrázek 15: Nástrojový pruh se chová jako samostatné okno.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Pátý příklad: jednoduchý nástrojový pruh se dvěma tlačítky</h2>

<p>Ukažme si nyní použití jednoduchého nástrojového pruhu, který bude obsahovat
dvě tlačítka s&nbsp;ikonami. První z&nbsp;těchto tlačítek ukončí aplikaci,
druhé vyvolá dialog s&nbsp;informacemi o aplikaci. Samotný (prozatím prázdný)
nástrojový pruh se vytvoří zavoláním metody <strong>addToolBar()</strong>:</p>

<pre>
self.toolbar = self.addToolBar('title')
</pre>

<p>Dále vytvoříme obě tlačítka a také nadeklarujeme klávesové zkratky pro
ně:</p>

<pre>
<i># tlačítko Quit</i>
quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                           '&amp;Quit', self)
quitAction.triggered.connect(self.close)
quitAction.setStatusTip('Quit the application')
quitAction.setShortcut('Ctrl+Q')
&nbsp;                                            
<i># tlačítko About</i>
aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                            '&amp;About', self)
aboutAction.triggered.connect(self.aboutDialog)
aboutAction.setStatusTip('About this application')
aboutAction.setShortcut('F1')
</pre>

<p>Poznámka: texty sice nejsou u tlačítek zobrazeny, ale pokud přejedeme
kurzorem myši na zvolené tlačítko, zobrazí se popisek tlačítka v&nbsp;bublinové
nápovědě:</p>

<img src="https://i.iinfo.cz/images/400/pyside5c-1.png" class="image-316220" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 16: Zobrazení popisku tlačítka v&nbsp;bublinové nápovědě.</i></p>

<p>Tlačítka samozřejmě musíme přidat na nástrojový pruh, což je už snadné:</p>

<pre>
self.toolbar.addAction(quitAction)
self.toolbar.addAction(aboutAction)
</pre>

<p>Následuje výpis zdrojového kódu příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle('QMainWindow + statusBar + toolBar')
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
        quitAction.setShortcut('Ctrl+Q')
                                            
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
        aboutAction.setShortcut('F1')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
        pass
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Šestý příklad: kombinace hlavního menu i nástrojového pruhu</h2>

<p>Samozřejmě nám nic nebrání v&nbsp;tom, abychom zkombinovali hlavní menu a
nástrojový pruh. Jen si musíme dát pozor na to, aby se ke dvěma různým
ovládacím prvkům nepřiřadila stejná klávesová zkratka.</p>

<img src="https://i.iinfo.cz/images/242/pyside5d-1.png" class="image-316221" alt="&#160;" width="202" height="127" />
<p><i>Obrázek 17: Kombinace hlavního menu s&nbsp;nástrojovým pruhem
v&nbsp;jednom oknu.</i></p>

<p>Použití hlavního menu i nástrojového pruhu si můžete vyzkoušet po spuštění
dalšího příkladu:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle('QMainWindow + statusBar + mainMenu + toolBar')
&nbsp;
        <i># stavový řádek</i>
        self.statusBar().showMessage('QMainWindow')
&nbsp;
        <i># hlavní menu</i>
        menubar = self.menuBar()
&nbsp;
        <i># příkaz File/Quit</i>
        fileQuitItem = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                     '&amp;Quit', self)
        fileQuitItem.triggered.connect(self.close)
        fileQuitItem.setStatusTip('Quit the application')
        fileQuitItem.setShortcut('Ctrl+Q')
&nbsp;
        <i># položka File v hlavním menu</i>
        fileMenu = menubar.addMenu('&amp;File')
        fileMenu.addAction(fileQuitItem)
&nbsp;
        <i># příkaz Help/About</i>
        helpAboutItem = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                      '&amp;About', self)
        helpAboutItem.triggered.connect(self.aboutDialog)
        helpAboutItem.setStatusTip('About this application')
        helpAboutItem.setShortcut('F1')
&nbsp;
        <i># položka Help v hlavním menu</i>
        helpMenu = menubar.addMenu('&amp;Help')
        helpMenu.addAction(helpAboutItem)
&nbsp;
        <i># tlačítko Quit</i>
        quitAction = QtGui.QAction(QtGui.QIcon('icons/application-exit.png'),
                                   '&amp;Quit', self)
        quitAction.triggered.connect(self.close)
        quitAction.setStatusTip('Quit the application')
&nbsp;
        <i># tlačítko About</i>
        aboutAction = QtGui.QAction(QtGui.QIcon('icons/dialog-information.png'),
                                    '&amp;About', self)
        aboutAction.triggered.connect(self.aboutDialog)
        aboutAction.setStatusTip('About this application')
&nbsp;
        <i># nástrojový pruh</i>
        self.toolbar = self.addToolBar('title')
&nbsp;
        <i># přidání tlačítek na nástrojový pruh</i>
        self.toolbar.addAction(quitAction)
        self.toolbar.addAction(aboutAction)
&nbsp;
        <i># zobrazení hlavního okna</i>
        self.show()
&nbsp;
    def <strong>aboutDialog</strong>(self):
        msgBox = QtGui.QMessageBox()
        msgBox.setText('About:\n...\n...\n...')
        msgBox.setIcon(QtGui.QMessageBox.Information)
        msgBox.exec_()
        pass
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Další užitečné widgety nabízené frameworkem PySide</h2>

<p>Kromě ovládacích prvků popsaných v&nbsp;předchozích částech tohoto seriálu
nabízí framework PySide programátorům i další typy widgetů. V&nbsp;tabulce jsou
vypsány ty widgety, které si ještě postupně popíšeme:</p>

<table>
<tr><th>Komponenta</th><th>Stručný popis</th></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#qframe">QFrame</a></td><td>komponenta s&nbsp;volitelným okrajem, odvozují se od ní další widgety</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html#qlistwidget">QListWidget</a></td><td>seznam prvků</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QComboBox.html#qcombobox">QComboBox</a></td><td>kombo box (vstupní prvek + seznam prvků)</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLineEdit.html#qlineedit">QLineEdit</a></td><td>vstup jednoho řádku textu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QPlainTextEdit.html#qplaintextedit">QPlainTextEdit</a></td><td>jednoduché vstupní víceřádkové textové pole</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextEdit.html#qtextedit">QTextEdit</a></td><td>vstupní textové pole (umožňuje práci s tabulkami, obrázky atd.)</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QTextBrowser.html#qtextbrowser">QTextBrowser</a></td><td>komponenta s&nbsp;textem, který může obsahovat hypertextové odkazy</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtSvg/QSvgWidget.html#qsvgwidget">QSvgWidget</a></td><td>komponenta pro zobrazení SVG (vektorová grafika)</td></tr>
<tr><td><a href="https://pyside.github.io/docs/pyside/PySide/QtOpenGL/QGLWidget.html#qglwidget">QGLWidget</a></td><td>komponenta pro zobrazení 2D/3D výstupu generovaného přes OpenGL</td></tr>
</table>

<p>V&nbsp;dalších kapitolách si popíšeme způsob použití klasického výběrového
seznamu, který je představován třídou <strong>QListWidget</strong>.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Výběrový seznam (listbox)</h2>

<p>Dalším užitečným ovládacím prvkem, který nalezneme v&nbsp;mnoha aplikacích,
je výběrový seznam neboli <i>listbox</i>. Tento prvek je možné ve frameworku
PySide vytvořit minimálně dvěma způsoby, a to s&nbsp;využitím třídy <a
href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListView.html">QListView</a>
nebo pouze třídy <a
href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">QListWidget</a>,
přičemž se první zmíněná třída používá až ve chvíli, kdy je užitečnější oddělit
pohled na data od jejich vlastní reprezentace. V&nbsp;dalších příkladech však
použijeme &bdquo;pouze&ldquo; třídu <strong>QListWidget</strong>, přičemž
uvidíme, že pro jednodušší aplikace může být její použití dostačující.</p>

<img src="https://i.iinfo.cz/images/242/pyside5d-2.png" class="image-316222" alt="&#160;" width="276" height="270" />
<p><i>Obrázek 18: Nejjednodušší varianta výběrového seznamu (listbox).</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Sedmý příklad: jednoduchý výběrový seznam s&nbsp;textovými položkami</h2>

<p>Výběrový seznam obsahující několik textových položek se vytvoří následovně.
Nejdříve zavoláme konstruktor seznamu:</p>

<pre>
listWidget = QtGui.QListWidget(self)
</pre>

<p>Dále vytvoříme několik položek (prvků) seznamu, a to s&nbsp;využitím
konstruktoru <strong>QListWidgetItem</strong>. Povšimněte si, že druhým
parametrem konstruktoru je reference na již dříve vytvořený seznam, takže se
prvky automaticky do seznamu vloží, a to ve správném pořadí:</p>

<pre>
QtGui.QListWidgetItem(u'jedna', listWidget)
QtGui.QListWidgetItem(u'dvě', listWidget)
QtGui.QListWidgetItem(u'tři', listWidget)
</pre>

<p>Samozřejmě ještě musíme seznam umístit na plochu okna, a to s&nbsp;využitím
layout manageru:</p>

<pre>
layout.addWidget(listWidget)
</pre>

<p>Úplný zdrojový kód příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
&nbsp;
        <i># seznam prvků</i>
        listWidget = QtGui.QListWidget(self)
        QtGui.QListWidgetItem(u'jedna', listWidget)
        QtGui.QListWidgetItem(u'dvě', listWidget)
        QtGui.QListWidgetItem(u'tři', listWidget)
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(listWidget)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow + QListWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Osmý příklad: alternativní způsob přidání položek do výběrového seznamu</h2>

<p>V&nbsp;předchozím příkladu jsme do seznamu vkládali prvky explicitně jeden
po druhém:</p>

<pre>
QtGui.QListWidgetItem(u'jedna', listWidget)
QtGui.QListWidgetItem(u'dvě', listWidget)
QtGui.QListWidgetItem(u'tři', listWidget)
</pre>

<p>Existuje však i jednodušší způsob, který lze využít ve chvíli, kdy do
výběrového seznamu vkládáme textové prvky. S&nbsp;využitím metody
<strong>insertItems()</strong> je totiž možné do výběrového seznamu vložit
běžný Pythonovský seznam (řetězců). Podívejme se, jak se tato operace provede
v&nbsp;praxi:</p>

<pre>
items = [u'jedna',
         u'dva',
         u'tři',
         u'čtyři']
listWidget.insertItems(listWidget.currentRow(), items)
</pre>

<p>Prvním parametrem metody <strong>insertItems()</strong> je index prvku
v&nbsp;rámci seznamu, od něhož budeme vkládat další prvky. My jsme zde použili
volání <strong>listWidget.currentRow()</strong>, což je užitečné
v&nbsp;případě, že do výběrového seznamu postupně vkládáme více běžných
Pythonovských seznamů a nechce se nám postupně zjišťovat indexy prvků pro
vkládání.</p>

<img src="https://i.iinfo.cz/images/242/pyside5d-3.png" class="image-316223" alt="&#160;" width="276" height="270" />
<p><i>Obrázek 19: Výběrový seznam se čtyřmi prvky, které do něj byly vloženy
jediným voláním metody <strong>insertItems</strong>.</i></p>

<p>Výsledný zdrojový kód příkladu vypadá takto:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
&nbsp;
        <i># seznam prvků</i>
        listWidget = QtGui.QListWidget(self)
        items = [u'jedna',
                 u'dva',
                 u'tři',
                 u'čtyři']
        listWidget.insertItems(listWidget.currentRow(), items)
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(listWidget)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow + QListWidget")
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent())
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Události generované při práci s&nbsp;výběrovým seznamem</h2>

<p>Při práci s&nbsp;výběrovým seznamem může vzniknout celkem deset typů
událostí, pro které je samozřejmě možné si zaregistrovat příslušné
handlery:</p>

<ol>
<li>currentItemChanged</li>
<li>currentRowChanged</li>
<li>currentTextChanged</li>
<li>itemActivated</li>
<li>itemChanged</li>
<li>itemClicked</li>
<li>itemDoubleClicked</li>
<li>itemEntered</li>
<li>itemPressed</li>
<li>itemSelectionChanged</li>
</ol>

<p>U klasických seznamů, jejichž prvky nejsou editovatelné, patří mezi
nejdůležitější události <strong>itemPressed</strong>,
<strong>itemClicked</strong> a <strong>itemActivated</strong>. Událost
<strong>itemPressed</strong> vznikne ve chvíli stisku (levého) tlačítka myši na
prvku. Po ukončení stisku se vygeneruje událost <strong>itemClicked</strong>,
což je chování, které již známe z&nbsp;dalších typů widgetů. Užitečnější je ale
událost <strong>itemActivated</strong>, neboť ta je vygenerována buď po
dvojkliku nebo ve chvíli, kdy je prvek vybrán klávesnicí (tedy posunem kurzoru
šipkami a stiskem klávesy Enter).</p>

<img src="https://i.iinfo.cz/images/242/pyside5d-4.png" class="image-316224" alt="&#160;" width="276" height="292" />
<p><i>Obrázek 20: První událost je vygenerována po kliknutí na prvek umístěný
ve výběrovém seznamu.</i></p>

<p>Registrace handlerů událostí je stejně snadná, jako u dalších widgetů:</p>

<pre>
listWidget = QtGui.QListWidget(self)
&nbsp;
listWidget.itemActivated.connect(self.onItemActivated)
listWidget.itemPressed.connect(self.onItemPressed)
listWidget.itemClicked.connect(self.onItemClicked)
</pre>

<p>Samotné handlery mohou být implementovány formou metod třídy odvozené od
<strong>QMainWindow</strong>:</p>

<pre>
def <strong>onItemPressed</strong>(self, item):
    message = u"tlačítko stisknuto na prvku: {text}".format(text=item.text())
    self.showMessage(message)
&nbsp;
def <strong>onItemActivated</strong>(self, item):
    message = u"aktivován prvek: {text}".format(text=item.text())
    self.showMessage(message)
&nbsp;
def <strong>onItemClicked</strong>(self, item):
    message = u"kliknuto na prvek: {text}".format(text=item.text())
    self.showMessage(message)
</pre>

<img src="https://i.iinfo.cz/images/242/pyside5d-5.png" class="image-316225" alt="&#160;" width="276" height="292" />
<p><i>Obrázek 21: Druhá událost vznikne po dvojkliku, tedy po
&bdquo;aktivaci&ldquo; prvku.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Devátý příklad: reakce na základní události při práci s&nbsp;výběrovým seznamem</h2>

<p>Podívejme se nyní, jak lze události popsané <a href="#k15">v&nbsp;předchozí
kapitole</a> propojit s&nbsp;příslušnými handlery. Po spuštění následující
aplikace zkuste prvky vybírat myší, podržet stlačené tlačítko myši nad prvkem,
vybrat prvky klávesnicí apod:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self, parentWidget):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
        self._parentWidget = parentWidget
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
&nbsp;
        <i># seznam prvků</i>
        listWidget = QtGui.QListWidget(self)
        items = [u'jedna',
                 u'dva',
                 u'tři',
                 u'čtyři']
        listWidget.insertItems(listWidget.currentRow(), items)
&nbsp;
        <i># události vyvolávané manipulací se seznamem</i>
        listWidget.itemActivated.connect(self.onItemActivated)
        listWidget.itemPressed.connect(self.onItemPressed)
        listWidget.itemClicked.connect(self.onItemClicked)
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(listWidget)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>showMessage</strong>(self, message):
        self._parentWidget.statusBar().showMessage(message)
&nbsp;
    def <strong>onItemPressed</strong>(self, item):
        message = u"tlačítko stisknuto na prvku: {text}".format(text=item.text())
        self.showMessage(message)
&nbsp;
    def <strong>onItemActivated</strong>(self, item):
        message = u"aktivován prvek: {text}".format(text=item.text())
        self.showMessage(message)
&nbsp;
    def <strong>onItemClicked</strong>(self, item):
        message = u"kliknuto na prvek: {text}".format(text=item.text())
        self.showMessage(message)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow + QListWidget")
&nbsp;
        <i># vytvoření stavového řádku</i>
        self.statusBar().showMessage('QMainWindow')
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent(self))
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Desátý příklad: seznam s&nbsp;ikonami</h2>

<p>V&nbsp;dnešním posledním demonstračním příkladu si ukážeme, jakým způsobem
je možné k&nbsp;položkám výběrového seznamu přidávat ikony. Ve skutečnosti to
není nic složitého, protože použijeme naprosto stejný postup, jaký jsme zvolili
u položek hlavního menu &ndash; do prvního parametru konstruktoru prvku seznamu
předáme objekt s&nbsp;ikonou:</p>

<pre>
listWidget = QtGui.QListWidget(self)
QtGui.QListWidgetItem(QtGui.QIcon('icons/battery-low.png'), u'0%', listWidget)
QtGui.QListWidgetItem(QtGui.QIcon('icons/battery-040.png'), u'40%', listWidget)
QtGui.QListWidgetItem(QtGui.QIcon('icons/battery-060.png'), u'60%', listWidget)
QtGui.QListWidgetItem(QtGui.QIcon('icons/battery-080.png'), u'80%', listWidget)
QtGui.QListWidgetItem(QtGui.QIcon('icons/battery-100.png'), u'100%', listWidget)
</pre>

<p>Výsledek můžeme vidět na následujícím screenshotu:</p>

<img src="https://i.iinfo.cz/images/242/pyside5d-6.png" class="image-316226" alt="&#160;" width="276" height="292" />
<p><i>Obrázek 22: Seznam, jehož prvky obsahují ikony.</i></p>

<p>Opět následuje výpis úplného zdrojového kódu příkladu, který až na
předchozích pět řádků nijak zásadně neliší od předchozí dvojice ukázkových
aplikací:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného widgetu</i>
class <strong>MainWindowContent</strong>(QtGui.QWidget):
&nbsp;
    def <strong>__init__</strong>(self, parentWidget):
        <i># zavoláme konstruktor předka</i>
        super(MainWindowContent, self).__init__()
        self._parentWidget = parentWidget
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># tlačítko</i>
        quitButton = QtGui.QPushButton('Quit', self)
        quitButton.resize(quitButton.sizeHint())
&nbsp;
        <i># navázání akce na signál</i>
        quitButton.clicked.connect(QtCore.QCoreApplication.instance().quit)
&nbsp;
        <i># seznam prvků</i>
        listWidget = QtGui.QListWidget(self)
        QtGui.QListWidgetItem(QtGui.QIcon('icons/battery-low.png'), u'0%', listWidget)
        QtGui.QListWidgetItem(QtGui.QIcon('icons/battery-040.png'), u'40%', listWidget)
        QtGui.QListWidgetItem(QtGui.QIcon('icons/battery-060.png'), u'60%', listWidget)
        QtGui.QListWidgetItem(QtGui.QIcon('icons/battery-080.png'), u'80%', listWidget)
        QtGui.QListWidgetItem(QtGui.QIcon('icons/battery-100.png'), u'100%', listWidget)
&nbsp;
        <i># události vyvolávané manipulací se seznamem</i>
        listWidget.itemActivated.connect(self.onItemActivated)
        listWidget.itemPressed.connect(self.onItemPressed)
&nbsp;
        <i># vytvoření správce geometrie</i>
        layout = QtGui.QVBoxLayout()
&nbsp;
        <i># umístění widgetů do okna</i>
        layout.addWidget(listWidget)
        layout.addWidget(quitButton)
&nbsp;
        <i># nastavení správce geometrie a vložení všech komponent do okna</i>
        self.setLayout(layout)
&nbsp;
    def <strong>showMessage</strong>(self, message):
        self._parentWidget.statusBar().showMessage(message)
&nbsp;
    def <strong>onItemPressed</strong>(self, item):
        message = u"kliknuto na prvek: {text}".format(text=item.text())
        self.showMessage(message)
&nbsp;
    def <strong>onItemActivated</strong>(self, item):
        message = u"aktivován prvek: {text}".format(text=item.text())
        self.showMessage(message)
&nbsp;
&nbsp;
<i># nový widget bude odvozen od obecného hlavního okna</i>
class <strong>MainWindow</strong>(QtGui.QMainWindow):
&nbsp;
    def <strong>__init__</strong>(self):
        <i># zavoláme konstruktor předka</i>
        super(MainWindow, self).__init__()
&nbsp;
        <i># konfigurace GUI + přidání widgetu do okna</i>
        self.prepareGUI()
&nbsp;
    def <strong>prepareGUI</strong>(self):
        <i># velikost není potřeba specifikovat</i>
        <i># self.resize(320, 240)</i>
        self.setWindowTitle("QMainWindow + QListWidget")
&nbsp;
        <i># vytvoření stavového řádku</i>
        self.statusBar().showMessage('QMainWindow')
&nbsp;
        <i># vložení komponenty do okna</i>
        self.setCentralWidget(MainWindowContent(self))
&nbsp;
    def <strong>run</strong>(self, app):
        <i># zobrazení okna na obrazovce</i>
        self.show()
        <i># vstup do smyčky událostí (event loop)</i>
        app.exec_()
&nbsp;
&nbsp;
def <strong>main</strong>():
    app = QtGui.QApplication(sys.argv)
    MainWindow().run(app)
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

<img src="https://i.iinfo.cz/images/242/pyside5d-7.png" class="image-316227" alt="&#160;" width="276" height="292" />
<p><i>Obrázek 23: Výběr druhého prvku seznamu.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah dalšího pokračování seriálu</h2>

<p>V&nbsp;navazujícím článku se budeme zabývat tím, jak je možné ve frameworku
PySide pracovat s&nbsp;grafickými informacemi (2D rastrovými obrázky,
vektorovými scénami ve 2D i ve 3D). Jedná se o poměrně rozsáhlé téma, protože
možnosti nabízené PySide jsou skutečně široké &ndash; možné je pracovat
s&nbsp;jednoduchými ikonami (<strong>QIcon</strong>), existuje rozhraní ke
knihovně <a
href="https://www.root.cz/serialy/graficka-knihovna-opengl/">OpenGL</a>
(<strong>QtOpenGL</strong>), k&nbsp;vektorové grafice ukládané ve formátu <a
href="https://www.root.cz/clanky/vektorovy-graficky-format-svg/">SVG</a>
(<strong>QtSvg</strong>) a zapomenout nesmíme ani na možnost vysokoúrovňové
práce s&nbsp;grafickými daty s&nbsp;využitím třídy
<strong>QGraphicsScene</strong> a tříd odvozených od
<strong>QGraphicsItem</strong>.</p>

<img src="https://i.iinfo.cz/images/242/pyside5d-8.png" class="image-316228" alt="&#160;" width="276" height="292" />
<p><i>Obrázek 24: Aktivace čtvrtého prvku výběrového seznamu.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech deseti dnes popsaných demonstračních příkladů byly opět,
podobně jako tomu bylo i v&nbsp;předchozích článcích, uloženy do Git repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>45_main_menu.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/45_main_menu.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/45_main_menu.py</a></td></tr>
<tr><td>46_tips_in_status_bar.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/46_tips_in_status_bar.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/46_tips_in_status_bar.py</a></td></tr>
<tr><td>47_shortcuts.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/47_shortcuts.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/47_shortcuts.py</a></td></tr>
<tr><td>48_icons_in_menu.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/48_icons_in_menu.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/48_icons_in_menu.py</a></td></tr>
<tr><td>49_toolbar.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/49_toolbar.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/49_toolbar.py</a></td></tr>
<tr><td>50_main_menu_and_toolbar.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/50_main_menu_and_toolbar.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/50_main_menu_and_toolbar.py</a></td></tr>
<tr><td>51_simple_list_view.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/51_simple_list_view.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/51_simple_list_view.py</a></td></tr>
<tr><td>52_insert_items.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/52_insert_items.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/52_insert_items.py</a></td></tr>
<tr><td>53_list_events.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/53_list_events.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/53_list_events.py</a></td></tr>
<tr><td>54_list_with_icons.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/54_list_with_icons.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide/54_list_with_icons.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>Differences Between PySide and PyQt<br />
<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">https://wiki.qt.io/Differences_Between_PySide_and_PyQt</a>
</li>

<li>PySide 1.2.1 tutorials<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/index.html">https://pyside.github.io/docs/pyside/tutorials/index.html</a>
</li>

<li>PySide tutorial<br />
<a href="http://zetcode.com/gui/pysidetutorial/">http://zetcode.com/gui/pysidetutorial/</a>
</li>

<li>Qt Core<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html">https://pyside.github.io/docs/pyside/PySide/QtCore/Qt.html</a>
</li>

<li>QLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLayout.html</a>
</li>

<li>QStackedLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QStackedLayout.html</a>
</li>

<li>QFormLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QFormLayout.html</a>
</li>

<li>QBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QBoxLayout.html</a>
</li>

<li>QHBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QHBoxLayout.html</a>
</li>

<li>QVBoxLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QVBoxLayout.html</a>
</li>

<li>QGridLayout<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</a>
</li>

<li>QAction<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAction.html</a>
</li>

<li>QMessageBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMessageBox.html</a>
</li>

<li>QListWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QListWidget.html</a>
</li>

<li>Signals &amp; Slots<br />
<a href="http://doc.qt.io/qt-4.8/signalsandslots.html">http://doc.qt.io/qt-4.8/signalsandslots.html</a>
</li>

<li>Signals and Slots in PySide<br />
<a href="http://wiki.qt.io/Signals_and_Slots_in_PySide">http://wiki.qt.io/Signals_and_Slots_in_PySide</a>
</li>

<li>Intro to PySide/PyQt: Basic Widgets and Hello, World!<br />
<a href="http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/">http://www.pythoncentral.io/intro-to-pysidepyqt-basic-widgets-and-hello-world/</a>
</li>

<li>QWidget<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QWidget.html</a>
</li>

<li>QMainWindow<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QMainWindow.html</a>
</li>

<li>QLabel<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QLabel.html</a>
</li>

<li>QAbstractButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QAbstractButton.html</a>
</li>

<li>QCheckBox<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QCheckBox.html</a>
</li>

<li>QRadioButton<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QRadioButton.html</a>
</li>

<li>QButtonGroup<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html">https://pyside.github.io/docs/pyside/PySide/QtGui/QButtonGroup.html</a>
</li>

<li>QFrame<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame</a>
</li>

<li>QFrame.frameStyle<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle">https://pyside.github.io/docs/pyside/PySide/QtGui/QFrame.html#PySide.QtGui.PySide.QtGui.QFrame.frameStyle</a>
</li>

<li>Leo editor<br />
<a href="http://leoeditor.com/">http://leoeditor.com/</a>
</li>

<li>IPython Qt Console aneb vylepšený pseudoterminál<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/#k06</a>
</li>

<li>Vývojová prostředí ve Fedoře (4. díl)<br />
<a href="https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">https://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Educational programming language<br />
<a href="http://en.wikipedia.org/wiki/Educational_programming_language">http://en.wikipedia.org/wiki/Educational_programming_language</a>
</li>

<li>Logo Tree Project:<br />
<a href="http://www.elica.net/download/papers/LogoTreeProject.pdf">http://www.elica.net/download/papers/LogoTreeProject.pdf</a></li>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>24.1. turtle — Turtle graphics<br />
<a href="https://docs.python.org/3.5/library/turtle.html#module-turtle">https://docs.python.org/3.5/library/turtle.html#module-turtle</a>
</li>

<li>TkDND<br />
<a href="http://freecode.com/projects/tkdnd">http://freecode.com/projects/tkdnd</a>
</li>

<li>Python Tkinter Fonts<br />
<a href="https://www.tutorialspoint.com/python/tk_fonts.htm">https://www.tutorialspoint.com/python/tk_fonts.htm</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>appJar widgets<br />
<a href="http://appjar.info/pythonWidgets/">http://appjar.info/pythonWidgets/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>
</li>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

