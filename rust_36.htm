<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Užitečné nástroje pro programovací jazyk Rust: rustup a rust-clippy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Užitečné nástroje pro programovací jazyk Rust: rustup a rust-clippy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku o jazyku Rust se budeme věnovat popisu dvou velmi užitečných nástrojů, které vývojáři používají prakticky každý den. První nástroj slouží k rychlému přepínání mezi různými verzemi Rustu (typicky verzí stabilní a nightly), druhý nástroj pak ve zdrojových kódech hledá potenciální problémy a neidiomatický kód.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Užitečné nástroje pro programovací jazyk Rust: rustup a rust-clippy</a></p>
<p><a href="#k02">2. Nástroj <strong>rustup</strong></a></p>
<p><a href="#k03">3. Instalace nástroje rustup</a></p>
<p><a href="#k04">4. Přepínání mezi stabilní verzí Rustu a nightly buildem</a></p>
<p><a href="#k05">5. Aktualizace zvolené verze Rustu na poslední verzi</a></p>
<p><a href="#k06">6. Struktura adresáře ~/.rustup</a></p>
<p><a href="#k07">7. Clippy aneb lint na steroidech</a></p>
<p><a href="#k08">8. Instalace nástroje Clippy</a></p>
<p><a href="#k09">9. Spuštění Clippy nad projektem</a></p>
<p><a href="#k10">10. Jednoduchý projekt na otestování základních chybových hlášení a varování</a></p>
<p><a href="#k11">11. Chybová hlášení a varování vygenerovaná nástrojem Clippy</a></p>
<p><a href="#k12">12. Základní detekované problémy</a></p>
<p><a href="#k13">13. Kontrola operátorů a konstant</a></p>
<p><a href="#k14">14. Kontrola chyb v&nbsp;rozhodovacích konstrukcích</a></p>
<p><a href="#k15">15. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Užitečné nástroje pro programovací jazyk Rust: rustup a rust-clippy</h2>

<p>Okolo programovacího jazyka Rust vznikl, podobně jako to můžeme vidět u
prakticky každého jiného programovacího jazyka, ekosystém různých pomocných
nástrojů určených jak pro podporu samotného vývoje, tak i pro testování
aplikací, jejich balení, nasazení atd. V&nbsp;tomto seriálu už jsme se jedním
z&nbsp;takových nástrojů zabývali. Jedná se o správce projektů <i>Cargo</i>,
bez jehož pomoci by bylo poměrně obtížné vyvíjet aplikace, které vyžadují další
podpůrné knihovny. Dnes si popíšeme další velmi užitečné nástroje, které možná
budete používat prakticky každý den.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Nástroj <strong>rustup</strong></h2>

<p>První z&nbsp;těchto nástrojů se jmenuje <strong>rustup</strong> a slouží
mj.&nbsp;ke snadnému přepínání mezi několika nainstalovanými verzemi překladače
a běhového prostředí Rustu. S&nbsp;využitím <strong>rustup</strong> je také
možné kdykoli překladač i běhové prostředí aktualizovat, a to i ve chvíli, kdy
například ještě nejsou k&nbsp;dispozici balíčky pro danou distribuci Linuxu (a
nutno říci, že zrovna v&nbsp;případě Rustu je pro správce balíčků poměrně
problematické nezaostat za vývojem). Ve většině případů bývá výhodnější vůbec
neinstalovat Rust z&nbsp;repositáře Linuxové distribuce, ale použít namísto
toho přímo <strong>rustup</strong>.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace nástroje rustup</h2>

<p>Nástroj <strong>rustup</strong> pravděpodobně ve vaší distribuci
nenaleznete, popř.&nbsp;v&nbsp;ní bude jen starší verze této utility. Proto je
lepší &ndash; i když méně bezpečné! &ndash; získat nejnovější verzi
instalačního skriptu <strong>rustupu</strong> ze stránky <a
href="https://www.rustup.rs/">https://www.rustup.rs/</a>. Na této stránce se
doporučuje použít příkaz:</p>

<pre>
$ <strong>curl https://sh.rustup.rs -sSf | sh</strong>
</pre>

<p>Bezpečnější je ovšem si nejdříve skript pouze stáhnout, přesvědčit se, že
neprovádí žádné nebezpečné akce a spustit ho lokálně:</p>

<pre>
$ <strong>wget -O rustup.sh https://sh.rustup.rs</strong>
...
...
...
$ <strong>sh rustup.sh</strong>
</pre>

<p>Po spuštění instalačního skriptu se nejdříve stáhne vlastní instalátor (již
pro danou architekturu a operační systém) a ten provede zbylé kroky instalace.
Instalátor byl spuštěn pro uživatele <strong>tester</strong>, čemuž odpovídají
všechny lokální cesty atd.:</p>

<pre>
info: downloading installer
&nbsp;
Welcome to Rust!
&nbsp;
This will download and install the official compiler for the Rust programming 
language, and its package manager, Cargo.
&nbsp;
It will add the cargo, rustc, rustup and other commands to Cargo's bin 
directory, located at:
&nbsp;
  /home/tester/.cargo/bin
&nbsp;
This path will then be added to your PATH environment variable by modifying the
profile file located at:
&nbsp;
  /home/tester/.profile
&nbsp;
You can uninstall at any time with rustup self uninstall and these changes will
be reverted.
&nbsp;
Current installation options:
&nbsp;
   default host triple: x86_64-unknown-linux-gnu
     default toolchain: stable
  modify PATH variable: yes
&nbsp;
1) Proceed with installation (default)
2) Customize installation
3) Cancel installation
</pre>

<p>Instalaci jsem schválně spustil před dvěma měsíci, aby bylo později možné
otestovat, zda se provádí aktualizace:</p>

<pre>
info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'
info: latest update on 2017-06-08, rust version 1.18.0 (03fc9d622 2017-06-06)
info: downloading component 'rustc'
 43.2 MiB /  43.2 MiB (100 %) 207.4 KiB/s ETA:   0 s                
info: downloading component 'rust-std'
 72.2 MiB /  72.2 MiB (100 %) 944.0 KiB/s ETA:   0 s                 
info: downloading component 'cargo'
  4.9 MiB /   4.9 MiB (100 %) 947.0 KiB/s ETA:   0 s                
info: downloading component 'rust-docs'
 11.7 MiB /  11.7 MiB (100 %) 937.6 KiB/s ETA:   0 s                
info: installing component 'rustc'
info: installing component 'rust-std'
info: installing component 'cargo'
info: installing component 'rust-docs'
info: default toolchain set to 'stable'
&nbsp;
  stable installed - rustc 1.18.0 (03fc9d622 2017-06-06)
&nbsp;
&nbsp;
Rust is installed now. Great!
&nbsp;
To get started you need Cargo's bin directory ($HOME/.cargo/bin) in your PATH 
environment variable. Next time you log in this will be done automatically.
&nbsp;
To configure your current shell run source $HOME/.cargo/env
</pre>

<p>Nyní by měl být nainstalován jak překladač Rustu, tak i jeho běhové
prostředí. Kromě toho se nainstaloval i správce projektů
<strong>Cargo</strong>:</p>

<pre>
$ <strong>rustc --version</strong>
rustc 1.18.0 (03fc9d622 2017-06-06)
&nbsp;
$ <strong>cargo --version</strong>
cargo 0.20.0 (a60d185c8 2017-07-13)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Přepínání mezi stabilní verzí Rustu a nightly buildem</h2>

<p>Důležitá poznámka na začátek: instalace stabilní verze Rustu společně
s&nbsp;nightly buildem bude na vašem disku vyžadovat přibližně jeden gigabajt
prostoru. Instalace implicitně proběhne do adresáře <strong>.rustup</strong>
umístěného ve vašem domácím adresáři, takže si prosím pomocí
<strong>df</strong> zkontrolujte, zda máte na příslušném oddílu/LVM dostatek
místa.</p>

<p>Již na konci předchozí kapitoly jsme si vyzkoušeli, jaká verze Rustu byla
přes <strong>rustup</strong> nainstalována:</p>

<pre>
$ <strong>rustc --version</strong>
rustc 1.18.0 (03fc9d622 2017-06-06)
</pre>

<p>V&nbsp;mnoha případech, například při použití dále popsaného nástroje
<strong>Clippy</strong>, je nutné použít takzvanou <i>nightly</i> verzi
překladače, která je sice považována za nestabilní, ale obsahuje podporu pro
nejnovější jazykové konstrukce, má pěknější systém hlášení chyb atd. Pokud pro
instalaci nightly verze použijeme <strong>rustup</strong>, nebude tato
instalace nijak kolidovat se stabilní verzí. Pusťme se tedy do toho:</p>

<pre>
$ <strong>rustup install nightly</strong>
</pre>

<p>Průběh instalace jak Rustu, tak i dalších podpůrných nástrojů (Cargo
atd.):</p>

<pre>
info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'
info: latest update on 2017-07-07, rust version 1.20.0-nightly (696412de7 2017-07-06)
info: downloading component 'rustc'
 38.7 MiB /  38.7 MiB (100 %) 928.0 KiB/s ETA:   0 s                
info: downloading component 'rust-std'
 57.9 MiB /  57.9 MiB (100 %) 947.2 KiB/s ETA:   0 s                
info: downloading component 'cargo'
  3.7 MiB /   3.7 MiB (100 %) 895.8 KiB/s ETA:   0 s                
info: downloading component 'rust-docs'
  3.7 MiB /   3.7 MiB (100 %) 907.8 KiB/s ETA:   0 s                
info: installing component 'rustc'
info: installing component 'rust-std'
info: installing component 'cargo'
info: installing component 'rust-docs'
</pre>

<p>Příkazem <strong>rustup default __verze__</strong> se nyní můžeme snadno
přepínat mezi stabilní verzí a nightly verzí. Můžeme se o tom snadno
přesvědčit. Nejdříve se přepneme do stabilní verze:</p>

<pre>
$ <strong>rustup default stable</strong>
info: using existing install for 'stable-x86_64-unknown-linux-gnu'
info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'
&nbsp;
  stable-x86_64-unknown-linux-gnu unchanged - rustc 1.18.0 (03fc9d622 2017-06-06)
</pre>

<p>Aktivní verze překladače a nástroje Cargo:</p>

<pre>
$ <strong>rustc --version</strong>
rustc 1.18.0 (03fc9d622 2017-06-06)
&nbsp;
$ <strong>cargo --version</strong>
cargo 0.20.0 (a60d185c8 2017-07-13)
</pre>

<p>Přepnutí na nightly verzi:</p>

<pre>
$ <strong>rustup default nightly</strong>
info: using existing install for 'nightly-x86_64-unknown-linux-gnu'
info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'
&nbsp;
  nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.20.0-nightly (696412de7 2017-07-06)
</pre>

<p>Aktivní verze překladače a nástroje Cargo se nyní podle očekávání
změnila:</p>

<pre>
$ <strong>rustc --version</strong>
rustc 1.20.0-nightly (696412de7 2017-07-06)
&nbsp;
$ <strong>cargo --version</strong>
cargo 0.22.0-nightly (305bc25d5 2017-07-28)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Aktualizace zvolené verze Rustu na poslední verzi</h2>

<p>Pro výpis aktuálně používané verze použijeme tento příkaz:</p>

<pre>
$ <strong>rustup show</strong>
</pre>

<p>Na standardní výstup by se měly vypsat následující řádky, z&nbsp;nichž nás
zajímá především sekce <strong>active toolchain</strong>:</p>

<pre>
Default host: x86_64-unknown-linux-gnu
&nbsp;
installed toolchains
--------------------
&nbsp;
stable-x86_64-unknown-linux-gnu
nightly-x86_64-unknown-linux-gnu (default)
&nbsp;
active toolchain
----------------
&nbsp;
nightly-x86_64-unknown-linux-gnu (default)
rustc 1.20.0-nightly (696412de7 2017-07-06)
</pre>

<p>Pokud budete chtít provést aktualizaci na poslední nightly verzi, provede se
to velmi snadno příkazem:</p>

<pre>
$ <strong>rustup update</strong>
</pre>

<p>Tento příkaz stáhne dalších zhruba 300-500 MB (aktualizace jedné verze)
popř.&nbsp;až 1 GB (aktualizace obou verzí)!</p>

<pre>
info: latest update on 2017-08-08, rust version 1.21.0-nightly (cbbe17aa7 2017-08-07)
info: downloading component 'rustc'
...
...
...
   stable-x86_64-unknown-linux-gnu updated - rustc 1.19.0 (0ade33941 2017-07-17)
     nightly-x86_64-unknown-linux-gnu updated - rustc 1.21.0-nightly (cbbe17aa7 2017-08-07)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Struktura adresáře ~/.rustup</h2>

<p>Jak jsme si již řekli výše, používá nástroj <strong>rustup</strong> jako
pracovní adresář <strong>~/.rustup</strong> (ostatně proto taky nikde
nepoužíváme <strong>sudo</strong> ani <strong>su</strong>). Pojďme se tedy
podívat, jak vypadá struktura tohoto adresáře. Nebudou nás zajímat všechny
podrobnosti, takže stromovou strukturu vypíšeme jen pro první tři úrovně:</p>

<pre>
$ <strong>tree -L 3 ~/.rustup</strong>
</pre>

<p>Tento podadresář vypadá zhruba takto (samozřejmě na odlišné architektuře se
budou podadresáře jmenovat jinak):</p>

<pre>
/home/tester/.rustup
├── downloads
├── settings.toml
├── tmp
├── toolchains
│   ├── nightly-x86_64-unknown-linux-gnu
│   │   ├── bin
│   │   ├── etc
│   │   ├── lib
│   │   └── share
│   └── stable-x86_64-unknown-linux-gnu
│       ├── bin
│       ├── etc
│       ├── lib
│       └── share
└── update-hashes
    ├── nightly-x86_64-unknown-linux-gnu
    └── stable-x86_64-unknown-linux-gnu
&nbsp;
14 directories, 3 files
</pre>

<p>Aktuální nastavení je uloženo v&nbsp;souboru
<strong>settings.toml</strong>.</p>

<p>Při výběru nightly verze:</p>

<pre>
default_host_triple = "x86_64-unknown-linux-gnu"
default_toolchain = "nightly-x86_64-unknown-linux-gnu"
telemetry = false
version = "12"
&nbsp;
[overrides]
</pre>

<p>Při výběru stabilní verze:</p>

<pre>
default_host_triple = "x86_64-unknown-linux-gnu"
default_toolchain = "stable-x86_64-unknown-linux-gnu"
telemetry = false
version = "12"
&nbsp;
[overrides]
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Clippy aneb lint na steroidech</h2>

<p>Druhý nástroj, s&nbsp;nímž se dnes alespoň ve stručnosti seznámíme, se
jmenuje <strong>rust-clippy</strong> popř.&nbsp;zkráceně jen
<strong>clippy</strong>. Tuto užitečnou utilitu je možné použít pro hledání
potenciálních chyb ve zdrojových kódech popř.&nbsp;pro nalezení takových obratů
a jazykových konstrukcí, které jsou z&nbsp;různých důvodů neefektivní či které
nejsou pro Rust idiomatické. Utilita <strong>rust-clippy</strong> tedy
nahrazuje především klasický <a
href="https://en.wikipedia.org/wiki/Lint_%28software%29">lint (linter)</a>,
ovšem z&nbsp;vypisovaných varování se můžeme dozvědět i mnohé zajímavé
informace o způsobu práce s&nbsp;proměnnými, funkci pattern matchingu apod.
Mimochodem &ndash; tuto utilitu si můžeme vyzkoušet i bez nutnosti její
instalace, protože je dostupná (společně s&nbsp;automatickým formátovačem
zdrojového kódu) například i ve &bdquo;webovém IDE pro Rust&ldquo;, které
naleznete na adrese <a
href="https://play.rust-lang.org/">https://play.rust-lang.org/</a>.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Instalace nástroje Clippy</h2>

<p>Nástroj Clippy vyžaduje poslední <i>nightly</i> verzi jazyka Rust a jeho
běhového prostředí. Pokud jste si prošli předchozí kapitoly, máte
nejaktuálnější verzi již nainstalovanou, takže se do ní jen přepneme:</p>

<pre>
$ <strong>rustup default nightly</strong>
info: using existing install for 'nightly-x86_64-unknown-linux-gnu'
info: default toolchain set to 'nightly-x86_64-unknown-linux-gnu'
&nbsp;
  nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.20.0-nightly (cbbe17aa7 2017-08-07)
</pre>

<p>Pro jistotu si verzi ještě jednou zkontrolujeme</p>

<pre>
$ <strong>rustc --version</strong>
rustc 1.21.0-nightly (cbbe17aa7 2017-08-07)
</pre>

<p>Ve skutečnosti existuje hned <a
href="https://github.com/rust-lang-nursery/rust-clippy#usage">několik
možností</a>, jak nástroj Clippy nainstalovat a používat; nejjednodušší je však
jeho instalace s&nbsp;využitím správce projektů Cargo. Posléze bude možné
Clippy používat, aniž by bylo nutné upravovat projektové soubory. Instalace se
provede snadno:</p>

<pre>
$ <strong>cargo install clippy</strong>
    Updating registry `https://github.com/rust-lang/crates.io-index`
  Installing clippy v0.0.149
   Compiling unicode-xid v0.0.4
   Compiling serde v1.0.11
   Compiling lazy_static v0.2.8
   Compiling quine-mc_cluskey v0.2.4
   Compiling either v1.1.0
   Compiling unicode-normalization v0.1.5
   Compiling matches v0.1.6
   Compiling itoa v0.3.1
   Compiling num-traits v0.1.40
   Compiling quote v0.3.15
   Compiling pulldown-cmark v0.0.15
   Compiling semver-parser v0.7.0
   Compiling getopts v0.2.14
   Compiling regex-syntax v0.4.1
   Compiling dtoa v0.4.1
   Compiling bitflags v0.9.1
   Compiling synom v0.11.3
   Compiling itertools v0.6.1
   Compiling semver v0.6.0
   Compiling serde_json v1.0.2
   Compiling toml v0.4.4
   Compiling syn v0.11.11
   Compiling serde_derive_internals v0.15.1
   Compiling serde_derive v1.0.11
   Compiling cargo_metadata v0.2.3
   Compiling clippy_lints v0.0.149
   Compiling clippy v0.0.149
    Finished release [optimized] target(s) in 296.89 secs
  Installing /home/tester/.cargo/bin/cargo-clippy
</pre>

<p>Pokud se instalace nepodaří, bude to velmi pravděpodobně kvůli chybám při
překladu balíčků <strong>clippy_lints</strong> nebo <strong>clippy</strong>.
V&nbsp;tom případě si prosím ještě jednou zkontrolujte, zda máte aktualizovanou
nightly verzi Rustu a jestli je tato verze implicitně používána.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Spuštění Clippy nad projektem</h2>

<p>Po (doufejme) úspěšné instalaci je možné Clippy spustit nad prakticky
jakýmkoli projektem spravovaným systémem Cargo. Základní příkaz pro spuštění
vypadá následovně:</p>

<pre>
$ <strong>cargo clippy</strong>
</pre>

<p>Pozor: Clippy kromě kontroly provádí i překlad, takže pokud stejný příkaz
spustíte znovu, zdánlivě se již nic neprovede, neboť mezitím nedošlo ke změně
zdrojových kódů:</p>

<pre>
$ <strong>cargo clippy</strong>
    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
</pre>

<p>Použijte například:</p>

<pre>
$ <strong>cargo clean;cargo clippy</strong>
</pre>

<p>Nástroji Clippy je možné předávat různé parametry, které ovlivňují, které
programové konstrukce a obraty budou považovány za chyby či u kterých se vypíše
varování. Implicitní nastavení je popsané na stránce <a
href="https://github.com/rust-lang-nursery/rust-clippy/wiki">https://github.com/rust-lang-nursery/rust-clippy/wiki</a>.
Pokud například budete chtít, aby se chybějící podtržítko mezi numerickou
konstantou a uvedením typu konstanty hlásilo jako varování (<i>warning</i>),
lze to provést následovně:</p>

<pre>
$ <strong>cargo clippy -- -W unseparated_literal_suffix</strong>
</pre>

<p>(viz též podrobnější popis uvedený na <a
href="https://github.com/rust-lang-nursery/rust-clippy/wiki#unseparated_literal_suffix">https://github.com/rust-lang-nursery/rust-clippy/wiki#unseparated_literal_suffix</a>)</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Jednoduchý projekt na otestování základních chybových hlášení a varování</h2>

<p>Podívejme se nyní na jednoduchý projekt, který neobsahuje žádné chyby
hlášené překladačem, ovšem je v&nbsp;něm poměrně hodně potenciálně
problematických či neidiomatických míst. Dokážete je najít?</p>

<pre>
fn main() {
    print!("Hello, world!\n");
&nbsp;
    let mut a = 123456789;
    let mut b = 123i32;
&nbsp;
    println!("{}", a);
    println!("{}", b);
&nbsp;
    a = a + 1;
    println!("{}", a);
&nbsp;
    b = 2 * b;
    println!("{}", b);
&nbsp;
    let foo = 42;
    println!("{}", foo);
&nbsp;
    let pi = 3.14;
    println!("{}", pi);
&nbsp;
    let e = 2.718;
    println!("{}", e);
&nbsp;
    let s = 1.4142;
    println!("{}", s);
&nbsp;
    let x = true;
&nbsp;
    if x == true {
        println!("T");
    }
&nbsp;
    if x == false {
        println!("nil");
    }
&nbsp;
    println!("{}",
        match x {
            true =&gt; 1,
            false =&gt; 2
        }
    );
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Chybová hlášení a varování vygenerovaná nástrojem Clippy</h2>

<p>Zkusme si nyní tento projekt přeložit a současně i analyzovat nástrojem
Clippy:</p>

<pre>
$ <strong>cargo clippy</strong>
</pre>

<p>Výsledek může být (na tak jednoduchý projekt) až překvapující:</p>

<pre>
   Compiling clippy-test v0.1.0 (file:///home/tester/rust/projects/clippy-test)
warning: 5th binding whose name is just one char
  --&gt; src/main.rs:28:9
   |
28 |     let x = true;
   |         ^
   |
   = note: #[warn(many_single_char_names)] on by default
   = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#many_single_char_names
&nbsp;
warning: long literal lacking separators
 --&gt; src/main.rs:4:17
  |
4 |     let mut a = 123456789;
  |                 ^^^^^^^^^
  |
  = note: #[warn(unreadable_literal)] on by default
  = help: consider: 123_456_789
  = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#unreadable_literal
&nbsp;
warning: using `print!()` with a format string that ends in a newline, consider using `println!()` instead
 --&gt; src/main.rs:2:5
  |
2 |     print!("Hello, world!\n");
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: #[warn(print_with_newline)] on by default
  = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#print_with_newline
&nbsp;
warning: manual implementation of an assign operation
  --&gt; src/main.rs:10:5
   |
10 |     a = a + 1;
   |     ^^^^^^^^^ help: replace it with: `a += 1`
   |
   = note: #[warn(assign_op_pattern)] on by default
   = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#assign_op_pattern
&nbsp;
warning: manual implementation of an assign operation
  --&gt; src/main.rs:13:5
   |
13 |     b = 2 * b;
   |     ^^^^^^^^^ help: replace it with: `b *= 2`
   |
   = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#assign_op_pattern
&nbsp;
warning: use of a blacklisted/placeholder name `foo`
  --&gt; src/main.rs:16:9
   |
16 |     let foo = 42;
   |         ^^^
   |
   = note: #[warn(blacklisted_name)] on by default
   = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#blacklisted_name
&nbsp;
warning: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly
  --&gt; src/main.rs:19:14
   |
19 |     let pi = 3.14;
   |              ^^^^
   |
   = note: #[warn(approx_constant)] on by default
   = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#approx_constant
&nbsp;
warning: approximate value of `f{32, 64}::consts::E` found. Consider using it directly
  --&gt; src/main.rs:22:13
   |
22 |     let e = 2.718;
   |             ^^^^^
   |
   = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#approx_constant
&nbsp;
warning: approximate value of `f{32, 64}::consts::SQRT_2` found. Consider using it directly
  --&gt; src/main.rs:25:13
   |
25 |     let s = 1.4142;
   |             ^^^^^^
   |
   = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#approx_constant
&nbsp;
warning: equality checks against true are unnecessary
  --&gt; src/main.rs:30:8
   |
30 |     if x == true {
   |        ^^^^^^^^^ help: try simplifying it as shown: `x`
   |
   = note: #[warn(bool_comparison)] on by default
   = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#bool_comparison
&nbsp;
warning: equality checks against false can be replaced by a negation
  --&gt; src/main.rs:34:8
   |
34 |     if x == false {
   |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`
   |
   = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#bool_comparison
&nbsp;
warning: you seem to be trying to match on a boolean expression
  --&gt; src/main.rs:39:9
   |
39 | /         match x {
40 | |             true =&gt; 1,
41 | |             false =&gt; 2
42 | |         }
   | |_________^ help: consider using an if/else expression: `if x { 1 } else { 2 }`
   |
   = note: #[warn(match_bool)] on by default
   = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#match_bool
&nbsp;
    Finished dev [unoptimized + debuginfo] target(s) in 0.63 secs
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Základní detekované problémy</h2>

<p>Příklad byl zcela záměrně vytvořen takovým způsobem, aby se v&nbsp;něm
nacházely jen snadno popsatelné problémy :-), takže si je nyní ve stručnosti
popišme:</p>

<ul>

<li>Provádí se kontrola, kolik je v&nbsp;bloku (typicky ve funkci) použito pět
jednoznakových identifikátorů. Limitní hodnotou je 5 (lze změnit). Větší počet
naznačuje, že je funkce příliš složitá a měl by se provést refaktoring či
alespoň proměnným přiřadit &bdquo;rozumná&ldquo; jména. V&nbsp;příkladu je
použito právě pět jednoznakových konstant.</li>

<li>Podobně se testuje počet parametrů funkce, kde je limit stanoven na sedm
parametrů. Větší počet parametrů vede k&nbsp;potenciálně špatně čitelnému kódu,
především při volání takových funkcí.</li>

<li>I některé víceznakové názvy proměnných mohou být problematické, takže
Clippy obsahuje konfigurovatelný seznam jmen, mezi něž patří například i
<strong>foo</strong> atd. Použití takových jmen může značit buď copy&amp;paste
kódu nebo to, že se programátor moc nezamýšlí nad čitelností.</li>

<li>Použití makra print!("řetězec\n") by mělo být nahrazeno makrem
println!("řetězec"), aneb nemá smysl zbytečně komplikovat zápis řetězce
s&nbsp;řídicími znaky, když pro odřádkování existuje speciální makro. I tuto
chybu máme v&nbsp;našem příkladu zavedenu.</li>

</ul>



<p><a name="k13"></a></p>
<h2 id="k13">13. Kontrola operátorů a konstant</h2>

<p>Další kontroly se týkají zápisu operátorů a konstant:</p>

<ul>

<li>Provádí se kontrola na konstanty začínající nulou. Ty jsou potenciálně
velmi problematické, protože v&nbsp;jazyku C jsou konstanty začínající nulou
reprezentovány v&nbsp;osmičkové soustavě, kdežto v&nbsp;Rustu v&nbsp;soustavě
desítkové! Proto jsou zápisy s&nbsp;nulou na začátku jak špatně čitelné (hlavně
pro céčkaře), tak i potenciálně chybné ve chvíli, kdy kód vznikl transformací
z&nbsp;céčka.</li>

<li>Lze zapnout kontrolu pro oddělení typu konstanty od vlastní konstanty:
123i32 versus 123_i32, což je nejenom čitelnější, ale zabraňuje to vzniku
špatně dohledatelných chyb.</li>

<li>Dále se testuje, zda dlouhé číselné konstanty obsahují znak podtržítka, což
zvyšuje čitelnost. Typicky se podtržítko vkládá jako oddělovač miliard, milionů
a tisíců, tedy například: 123_456_789, v&nbsp;našem příkladu však máme jen
123456789.</li>

<li>Velmi zajímavá je detekce známých konstant typu &pi;, e, &radic;2,
resp.&nbsp;hodnot, které se těmto konstantám podobají. U takových hodnot je
doporučeno použít konstanty z&nbsp;modulů <strong>f32</strong> a
<strong>f64</strong>. V&nbsp;příkladu máme hned několik takových konstant let
pi = 3.14, let e = 2.718 a let s = 1.4142.</li>

<li>Taktéž se kontrolují zápisy typu a = a + 1, které jdou nahradit za a += 1.
Totéž platí i v&nbsp;případě zápisu b = 2 * b, protože v&nbsp;tomto případě je
operátor * komutativní, což Clippy rozpozná (někdy však test proběhne špatně,
například při implementaci traitu pro operátor * aplikovaný pro matice).</li>

<li>Dále se testuje použití operátorů == a != pro dvě konstanty/proměnné typu
<i>f32</i> a <i>f64</i>, protože tato porovnání je lepší explicitně provádět se
<a href="http://www.floating-point-gui.de/errors/comparison/">specifikovanou
povolenou odchylkou</a>. Jediné porovnání, které se nehlásí jako chyba, je
porovnání konstanty s&nbsp;nulou.</li>

<li>Provádí se i kontrola, zda se na obou stranách některých operátorů (typicky
==, ale i &amp;&amp; či -) nenachází stejné operandy nebo celé výrazy. Typicky
se jedná o výsledek copy&amp;paste.</li>

<li>Kontroluje se zápis --x, který má v&nbsp;Rustu význam změny znaménka
provedené dvakrát, nikoli operace dekrementace!</li>

</ul>



<p><a name="k14"></a></p>
<h2 id="k14">14. Kontrola chyb v&nbsp;rozhodovacích konstrukcích</h2>

<p>Další sada testů se týká chyb v&nbsp;logických konstrukcích, například:</p>

<ul>

<li>Podmínka typu <strong>x == true</strong> či <strong>x == false</strong>
patří mezi typické &bdquo;školácké chyby&ldquo;, které Clippy snadno odhalí a
nabídne použití <strong>x</strong> nebo <strong>!x</strong>.</li>

<li>Zajímavější je detekce stavu, kdy lze konstrukci <strong>match</strong>
nahradit za pouhý výraz s&nbsp;<strong>if-then-else</strong>.</li>

<li>Totéž platí pro náhradu konstrukce <strong>match</strong> a <strong>if
let</strong>, ovšem tato kontrola je implicitně vypnuta.</li>

<li>Podobně se nabízí náhrada konstrukce <strong>loop+match</strong> za kratší
konstrukci <strong>while let</strong>.</li>

<li>Naopak konstrukci typu <strong>while let Some(val) = iter()</strong> je
lepší přepsat na mnohem čitelnější smyčku typu <strong>for-each</strong>.</li>

</ul>



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;demonstračními příklady</h2>

<p>Jediný dnes použitý projekt naprogramovaný v&nbsp;Rustu byl, ostatně podobně
jako ve všech předchozích částech <a
href="https://www.root.cz/serialy/programovaci-jazyk-rust/">tohoto seriálu</a>,
uložen do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Demonstrační příklad si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez
nutnosti klonovat celý repositář (ovšem u projektů je lepší mít celý repositář,
abyste nemuseli pracně stahovat všechny potřebné soubory):</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>Cargo.toml</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/projects/clippy-test/Cargo.toml">https://github.com/tisnik/presentations/blob/master/rust/projects/ndarray-map/Cargo.toml</a></td></tr>
<tr><td>main.rs</td><td><a href="https://github.com/tisnik/presentations/blob/master/rust/projects/clippy-test/src/main.rs">https://github.com/tisnik/presentations/blob/master/rust/projects/ndarray-map/src/main.rs</a></td></tr>
</table>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>Rust-clippy Wiki<br />
<a href="https://github.com/rust-lang-nursery/rust-clippy/wiki">https://github.com/rust-lang-nursery/rust-clippy/wiki</a>
</li>

<li>Rust-clippy<br />
<a href="https://rust.libhunt.com/project/rust-clippy">https://rust.libhunt.com/project/rust-clippy</a>
</li>

<li>ndarray - dokumentace<br />
<a href="https://bluss.github.io/rust-ndarray/master/ndarray/index.html">https://bluss.github.io/rust-ndarray/master/ndarray/index.html</a>
</li>

<li>ndarray - Crate<br />
<a href="https://crates.io/crates/ndarray">https://crates.io/crates/ndarray</a>
</li>

<li>rustup<br />
<a href="https://www.rustup.rs/">https://www.rustup.rs/</a>
</li>

<li>rustup: the Rust toolchain installer (Git repositář + dokumentace)<br />
<a href="https://github.com/rust-lang-nursery/rustup.rs">https://github.com/rust-lang-nursery/rustup.rs</a>
</li>

<li>The Rust FFI Omnibus<br />
<a href="http://jakegoulding.com/rust-ffi-omnibus/">http://jakegoulding.com/rust-ffi-omnibus/</a>
</li>

<li>Build Script Support<br />
<a href="http://doc.crates.io/build-script.html">http://doc.crates.io/build-script.html</a>
</li>

<li>Calling Rust From Python<br />
<a href="https://bheisler.github.io/post/calling-rust-in-python/">https://bheisler.github.io/post/calling-rust-in-python/</a>
</li>

<li>Calling Rust in Python (komentáře k předchozímu článku)<br />
<a href="https://www.reddit.com/r/rust/comments/63iy5a/calling_rust_in_python/">https://www.reddit.com/r/rust/comments/63iy5a/calling_rust_in_python/</a>
</li>

<li>CFFI Documentation<br />
<a href="https://cffi.readthedocs.io/en/latest/">https://cffi.readthedocs.io/en/latest/</a>
</li>

<li>Build Script Support<br />
<a href="http://doc.crates.io/build-script.html">http://doc.crates.io/build-script.html</a>
</li>

<li>Creating a shared and static library with the gnu compiler [gcc]<br />
<a href="http://www.adp-gmbh.ch/cpp/gcc/create_lib.html">http://www.adp-gmbh.ch/cpp/gcc/create_lib.html</a>
</li>

<li>ctypes — A foreign function library for Python<br />
<a href="https://docs.python.org/2/library/ctypes.html">https://docs.python.org/2/library/ctypes.html</a>
</li>

<li>FFI: Foreign Function Interface<br />
<a href="https://doc.rust-lang.org/book/ffi.html">https://doc.rust-lang.org/book/ffi.html</a>
</li>

<li>Primitive Type pointer<br />
<a href="https://doc.rust-lang.org/std/primitive.pointer.html">https://doc.rust-lang.org/std/primitive.pointer.html</a>
</li>

<li>Cargo: správce projektů a balíčků pro programovací jazyk Rust<br />
<a href="https://mojefedora.cz/cargo-spravce-projektu-a-balicku-pro-programovaci-jazyk-rust/">https://mojefedora.cz/cargo-spravce-projektu-a-balicku-pro-programovaci-jazyk-rust/</a>
</li>

<li>Network Communication and Serialization in Rust<br />
<a href="https://www.safaribooksonline.com/blog/2014/01/28/network-communication-serialization-rust/">https://www.safaribooksonline.com/blog/2014/01/28/network-communication-serialization-rust/</a>
</li>

<li>Crate bincode<br />
<a href="http://tyoverby.com/bincode/bincode/index.html">http://tyoverby.com/bincode/bincode/index.html</a>
</li>

<li>Struct std::fs::File<br />
<a href="https://doc.rust-lang.org/std/fs/struct.File.html">https://doc.rust-lang.org/std/fs/struct.File.html</a>
</li>

<li>Trait std::io::Seek<br />
<a href="https://doc.rust-lang.org/std/io/trait.Seek.html">https://doc.rust-lang.org/std/io/trait.Seek.html</a>
</li>

<li>Trait std::io::Read<br />
<a href="https://doc.rust-lang.org/std/io/trait.Read.html">https://doc.rust-lang.org/std/io/trait.Read.html</a>
</li>

<li>Trait std::io::Write<br />
<a href="https://doc.rust-lang.org/std/io/trait.Write.html">https://doc.rust-lang.org/std/io/trait.Write.html</a>
</li>

<li>Trait std::io::BufRead<br />
<a href="https://doc.rust-lang.org/std/io/trait.BufRead.html">https://doc.rust-lang.org/std/io/trait.BufRead.html</a>
</li>

<li>Module std::io::prelude<br />
<a href="https://doc.rust-lang.org/std/io/prelude/index.html">https://doc.rust-lang.org/std/io/prelude/index.html</a>
</li>

<li>std::net::IpAddr<br />
<a href="https://doc.rust-lang.org/std/net/enum.IpAddr.html">https://doc.rust-lang.org/std/net/enum.IpAddr.html</a>
</li>

<li>std::net::Ipv4Addr<br />
<a href="https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html">https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html</a>
</li>

<li>std::net::Ipv6Addr<br />
<a href="https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html">https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html</a>
</li>

<li>TcpListener<br />
<a href="https://doc.rust-lang.org/std/net/struct.TcpListener.html">https://doc.rust-lang.org/std/net/struct.TcpListener.html</a>
</li>

<li>TcpStream<br />
<a href="https://doc.rust-lang.org/std/net/struct.TcpStream.html">https://doc.rust-lang.org/std/net/struct.TcpStream.html</a>
</li>

<li>Binary heap (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Binary_heap">https://en.wikipedia.org/wiki/Binary_heap</a>
</li>

<li>Binární halda (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Bin%C3%A1rn%C3%AD_halda">https://cs.wikipedia.org/wiki/Bin%C3%A1rn%C3%AD_halda</a>
</li>

<li>Halda (datová struktura)<br />
<a href="https://cs.wikipedia.org/wiki/Halda_%28datov%C3%A1_struktura%29">https://cs.wikipedia.org/wiki/Halda_%28datov%C3%A1_struktura%29</a>
</li>

<li>Struct std::collections::HashSet<br />
<a href="https://doc.rust-lang.org/std/collections/struct.HashSet.html">https://doc.rust-lang.org/std/collections/struct.HashSet.html</a>
</li>

<li>Struct std::collections::BTreeSet<br />
<a href="https://doc.rust-lang.org/std/collections/struct.BTreeSet.html">https://doc.rust-lang.org/std/collections/struct.BTreeSet.html</a>
</li>

<li>Struct std::collections::BinaryHeap<br />
<a href="https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html">https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html</a>
</li>

<li>Set (abstract data type)<br />
<a href="https://en.wikipedia.org/wiki/Set_%28abstract_data_type%29#Language_support">https://en.wikipedia.org/wiki/Set_%28abstract_data_type%29#Language_support</a>
</li>

<li>Associative array<br />
<a href="https://en.wikipedia.org/wiki/Associative_array">https://en.wikipedia.org/wiki/Associative_array</a>
</li>

<li>Hash Table<br />
<a href="https://en.wikipedia.org/wiki/Hash_table">https://en.wikipedia.org/wiki/Hash_table</a>
</li>

<li>B-tree<br />
<a href="https://en.wikipedia.org/wiki/B-tree">https://en.wikipedia.org/wiki/B-tree</a>
</li>

<li>Pedro Celis: Robin Hood Hashing (naskenované PDF!)<br />
<a href="https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf">https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf</a>
</li>

<li>Robin Hood hashing<br />
<a href="http://codecapsule.com/2013/11/11/robin-hood-hashing/">http://codecapsule.com/2013/11/11/robin-hood-hashing/</a>
</li>

<li>Robin Hood hashing: backward shift deletion<br />
<a href="http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/">http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/</a>
</li>

<li>Module std::collections<br />
<a href="https://doc.rust-lang.org/std/collections/">https://doc.rust-lang.org/std/collections/</a>
</li>

<li>Module std::vec<br />
<a href="https://doc.rust-lang.org/nightly/std/vec/index.html">https://doc.rust-lang.org/nightly/std/vec/index.html</a>
</li>

<li>Struct std::collections::VecDeque<br />
<a href="https://doc.rust-lang.org/std/collections/struct.VecDeque.html">https://doc.rust-lang.org/std/collections/struct.VecDeque.html</a>
</li>

<li>Struct std::collections::LinkedList<br />
<a href="https://doc.rust-lang.org/std/collections/struct.LinkedList.html">https://doc.rust-lang.org/std/collections/struct.LinkedList.html</a>
</li>

<li>Module std::fmt<br />
<a href="https://doc.rust-lang.org/std/fmt/">https://doc.rust-lang.org/std/fmt/</a>
</li>

<li>Macro std::println<br />
<a href="https://doc.rust-lang.org/std/macro.println.html">https://doc.rust-lang.org/std/macro.println.html</a>
</li>

<li>Enum std::result::Result<br />
<a href="https://doc.rust-lang.org/std/result/enum.Result.html">https://doc.rust-lang.org/std/result/enum.Result.html</a>
</li>

<li>Module std::result<br />
<a href="https://doc.rust-lang.org/std/result/">https://doc.rust-lang.org/std/result/</a>
</li>

<li>Result<br />
<a href="http://rustbyexample.com/std/result.html">http://rustbyexample.com/std/result.html</a>
</li>

<li>Rust stdlib: Option<br />
<a href="https://doc.rust-lang.org/std/option/enum.Option.html">https://doc.rust-lang.org/std/option/enum.Option.html</a>
</li>

<li>Module std::option<br />
<a href="https://doc.rust-lang.org/std/option/index.html">https://doc.rust-lang.org/std/option/index.html</a>
</li>

<li>Rust by example: option<br />
<a href="http://rustbyexample.com/std/option.html">http://rustbyexample.com/std/option.html</a>
</li>

<li>Rust by example: if-let<br />
<a href="http://rustbyexample.com/flow_control/if_let.html">http://rustbyexample.com/flow_control/if_let.html</a>
</li>

<li>Rust by example: while let<br />
<a href="http://rustbyexample.com/flow_control/while_let.html">http://rustbyexample.com/flow_control/while_let.html</a>
</li>

<li>Rust by example: Option&lt;i32&gt;<br />
<a href="http://rustbyexample.com/std/option.html">http://rustbyexample.com/std/option.html</a>
</li>

<li>An Overview of Macros in Rust<br />
<a href="http://words.steveklabnik.com/an-overview-of-macros-in-rust">http://words.steveklabnik.com/an-overview-of-macros-in-rust</a>
</li>

<li>A Practical Intro to Macros in Rust 1.0<br />
<a href="https://danielkeep.github.io/practical-intro-to-macros.html">https://danielkeep.github.io/practical-intro-to-macros.html</a>
</li>

<li>The Rust Programming Language: macros<br />
<a href="https://doc.rust-lang.org/beta/book/macros.html">https://doc.rust-lang.org/beta/book/macros.html</a>
</li>

<li>Rust by example: 15 macro_rules!<br />
<a href="http://rustbyexample.com/macros.html">http://rustbyexample.com/macros.html</a>
</li>

<li>Primitive Type isize<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.isize.html">https://doc.rust-lang.org/nightly/std/primitive.isize.html</a>
</li>

<li>Primitive Type usize<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.usize.html">https://doc.rust-lang.org/nightly/std/primitive.usize.html</a>
</li>

<li>Primitive Type array<br />
<a href="https://doc.rust-lang.org/nightly/std/primitive.array.html">https://doc.rust-lang.org/nightly/std/primitive.array.html</a>
</li>

<li>Module std::slice<br />
<a href="https://doc.rust-lang.org/nightly/std/slice/">https://doc.rust-lang.org/nightly/std/slice/</a>
</li>

<li>Rust by Example: 2.3 Arrays and Slices<br />
<a href="http://rustbyexample.com/primitives/array.html">http://rustbyexample.com/primitives/array.html</a>
</li>

<li>What is the difference between Slice and Array (stackoverflow)<br />
<a href="http://stackoverflow.com/questions/30794235/what-is-the-difference-between-slice-and-array">http://stackoverflow.com/questions/30794235/what-is-the-difference-between-slice-and-array</a>
</li>

<li>Learning Rust With Entirely Too Many Linked Lists<br />
<a href="http://cglab.ca/~abeinges/blah/too-many-lists/book/">http://cglab.ca/~abeinges/blah/too-many-lists/book/</a>
</li>

<li>Testcase: linked list<br />
<a href="http://rustbyexample.com/custom_types/enum/testcase_linked_list.html">http://rustbyexample.com/custom_types/enum/testcase_linked_list.html</a>
</li>

<li>Operators and Overloading<br />
<a href="https://doc.rust-lang.org/book/operators-and-overloading.html">https://doc.rust-lang.org/book/operators-and-overloading.html</a>
</li>

<li>Module std::ops<br />
<a href="https://doc.rust-lang.org/std/ops/index.html">https://doc.rust-lang.org/std/ops/index.html</a>
</li>

<li>Module std::cmp<br />
<a href="https://doc.rust-lang.org/std/cmp/index.html">https://doc.rust-lang.org/std/cmp/index.html</a>
</li>

<li>Trait std::ops::Add<br />
<a href="https://doc.rust-lang.org/stable/std/ops/trait.Add.html">https://doc.rust-lang.org/stable/std/ops/trait.Add.html</a>
</li>

<li>Trait std::ops::AddAssign<br />
<a href="https://doc.rust-lang.org/std/ops/trait.AddAssign.html">https://doc.rust-lang.org/std/ops/trait.AddAssign.html</a>
</li>

<li>Trait std::ops::Drop<br />
<a href="https://doc.rust-lang.org/std/ops/trait.Drop.html">https://doc.rust-lang.org/std/ops/trait.Drop.html</a>
</li>

<li>Trait std::cmp::Eq<br />
<a href="https://doc.rust-lang.org/std/cmp/trait.Eq.html">https://doc.rust-lang.org/std/cmp/trait.Eq.html</a>
</li>

<li>Struct std::boxed::Box<br />
<a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">https://doc.rust-lang.org/std/boxed/struct.Box.html</a>
</li>

<li>Explore the ownership system in Rust<br />
<a href="https://nercury.github.io/rust/guide/2015/01/19/ownership.html">https://nercury.github.io/rust/guide/2015/01/19/ownership.html</a>
</li>

<li>Rust's ownership and move semantic<br/>
<a href="http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics">http://www.slideshare.net/saneyuki/rusts-ownership-and-move-semantics</a>
</li>

<li>Trait std::marker::Copy<br/>
<a href="https://doc.rust-lang.org/stable/std/marker/trait.Copy.html">https://doc.rust-lang.org/stable/std/marker/trait.Copy.html</a>
</li>

<li>Trait std::clone::Clone<br />
<a href="https://doc.rust-lang.org/stable/std/clone/trait.Clone.html">https://doc.rust-lang.org/stable/std/clone/trait.Clone.html</a>
</li>

<li>The Stack and the Heap<br />
<a href="https://doc.rust-lang.org/book/the-stack-and-the-heap.html">https://doc.rust-lang.org/book/the-stack-and-the-heap.html</a>
</li>

<li>Rust Compare: Pointers &amp; References<br />
<a href="http://www.rust-compare.com/site/pointers.html">http://www.rust-compare.com/site/pointers.html</a>
</li>

<li>Rust Compare: Parameters<br />
<a href="http://www.rust-compare.com/site/params.html">http://www.rust-compare.com/site/params.html</a>
</li>

<li>Why does this compile? Automatic dereferencing?<br />
<a href="https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183">https://users.rust-lang.org/t/why-does-this-compile-automatic-dereferencing/2183</a>
</li>

<li>Understanding Pointers, Ownership, and Lifetimes in Rust<br />
<a href="http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">http://koerbitz.me/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html</a>
</li>

<li>Rust lang series episode #25 — pointers (#rust-series)<br />
<a href="https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series">https://steemit.com/rust-series/@jimmco/rust-lang-series-episode-25-pointers-rust-series</a>
</li>

<li>Rust - home page<br />
<a href="https://www.rust-lang.org/en-US/">https://www.rust-lang.org/en-US/</a>
</li>

<li>Rust - Frequently Asked Questions<br />
<a href="https://www.rust-lang.org/en-US/faq.html">https://www.rust-lang.org/en-US/faq.html</a>
</li>

<li>Destructuring and Pattern Matching<br />
<a href="https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/">https://pzol.github.io/getting_rusty/posts/20140417_destructuring_in_rust/</a>
</li>

<li>The Rust Programming Language<br />
<a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>
</li>

<li>Rust (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29">https://en.wikipedia.org/wiki/Rust_%28programming_language%29</a>
</li>

<li>Go - home page<br />
<a href="https://golang.org/">https://golang.org/</a>
</li>

<li>Stack Overflow - Most Loved, Dreaded, and Wanted language<br />
<a href="https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted">https://stackoverflow.com/research/developer-survey-2016#technology-most-loved-dreaded-and-wanted</a>
</li>

<li>Rust vs Go (dva roky staré hodnocení, od té doby došlo k posunům v obou jazycích)<br />
<a href="http://jaredforsyth.com/2014/03/22/rust-vs-go/">http://jaredforsyth.com/2014/03/22/rust-vs-go/</a>
</li>

<li>Rust vs Go: My experience<br />
<a href="https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/">https://www.reddit.com/r/golang/comments/21m6jq/rust_vs_go_my_experience/</a>
</li>

<li>Friends of Rust (Organizations running Rust in production)<br />
<a href="https://www.rust-lang.org/en-US/friends.html">https://www.rust-lang.org/en-US/friends.html</a>
</li>

<li>Rust programs versus C++ g++<br />
<a href="https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp">https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=rust&lang2=gpp</a>
</li>

<li>Další benchmarky (nejedná se o reálné příklady &bdquo;ze života&ldquo;)<br />
<a href="https://github.com/kostya/benchmarks">https://github.com/kostya/benchmarks</a>
</li>

<li>Go na Redditu<br />
<a href="https://www.reddit.com/r/golang/">https://www.reddit.com/r/golang/</a>
</li>

<li>Rust vs. Go<br />
<a href="http://vschart.com/compare/rust/vs/go-language">http://vschart.com/compare/rust/vs/go-language</a>
</li>

<li>Abstraction without overhead: traits in Rust<br />
<a href="https://blog.rust-lang.org/2015/05/11/traits.html">https://blog.rust-lang.org/2015/05/11/traits.html</a>
</li>

<li>Method Syntax<br />
<a href="https://doc.rust-lang.org/book/method-syntax.html">https://doc.rust-lang.org/book/method-syntax.html</a>
</li>

<li>Traits in Rust<br />
<a href="https://doc.rust-lang.org/book/traits.html">https://doc.rust-lang.org/book/traits.html</a>
</li>

<li>Functional Programming in Rust - Part 1 : Function Abstraction<br />
<a href="http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/">http://blog.madhukaraphatak.com/functional-programming-in-rust-part-1/</a>
</li>

<li>Of the emerging systems languages Rust, D, Go and Nim, which is the strongest language and why?<br />
<a href="https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why">https://www.quora.com/Of-the-emerging-systems-languages-Rust-D-Go-and-Nim-which-is-the-strongest-language-and-why</a>
</li>

<li>Chytré ukazatele (moderní verze jazyka C++) [MSDN]<br />
<a href="https://msdn.microsoft.com/cs-cz/library/hh279674.aspx">https://msdn.microsoft.com/cs-cz/library/hh279674.aspx</a>
</li>

<li>UTF-8 Everywhere<br />
<a href="http://utf8everywhere.org/">http://utf8everywhere.org/</a>
</li>

<li>Rust by Example<br />
<a href="http://rustbyexample.com/">http://rustbyexample.com/</a>
</li>

<li>Rust oficiálně ve Fedoře<br />
<a href="https://mojefedora.cz/rust-oficialne-ve-fedore/">https://mojefedora.cz/rust-oficialne-ve-fedore/</a>
</li>

<li>Resource acquisition is initialization<br />
<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization</a>
</li>

<li>TIOBE index (October 2016)<br />
<a href="http://www.tiobe.com/tiobe-index/">http://www.tiobe.com/tiobe-index/</a>
</li>

<li>Porovnání Go, D a Rustu na OpenHubu:<br />
<a href="https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits">https://www.openhub.net/languages/compare?language_name[]=-1&language_name[]=-1&language_name[]=dmd&language_name[]=golang&language_name[]=rust&language_name[]=-1&measure=commits</a>
</li>

<li>String Types in Rust<br />
<a href="http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/">http://www.suspectsemantics.com/blog/2016/03/27/string-types-in-rust/</a>
</li>

<li>Trait (computer programming)<br />
<a href="https://en.wikipedia.org/wiki/Trait_%28computer_programming%29">https://en.wikipedia.org/wiki/Trait_%28computer_programming%29</a>
</li>

<li>Type inference<br />
<a href="https://en.wikipedia.org/wiki/Type_inference">https://en.wikipedia.org/wiki/Type_inference</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

