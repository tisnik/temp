<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Základní informace o projektu LSP</a></p>
<p><a href="#k03">*** 3. Některé starší projekty založené na podobném principu</a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. Python Language Server</a></p>
<p><a href="#k07">*** 7. Kooperace mezi Python Language Serverem a Vimem</a></p>
<p><a href="#k08">*** 8. Konfigurace pluginu <strong>vim-lsp</strong></a></p>
<p><a href="#k09">*** 9. Otestování základní funkcionality pluginu <strong>vim-lsp</strong></a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. Technologie <i>Omni Completion</i> ve Vimu</a></p>
<p><a href="#k12">*** 12. Nastavení funkce Omni Completion pro plugin vim-lsp</a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. Nastavení automatického doplňování volbou <strong>completeopt</strong></a></p>
<p><a href="#k15">*** 15. Přijdou další protokoly &ndash; tentokrát pro ladění aplikací?</a></p>
<p><a href="#k16">*** 16. Protokol používaný pro připojení GNU Debuggeru</a></p>
<p><a href="#k17">*** 17. VSCode Debug Protocol</a></p>
<p><a href="#k18">*** 18. Ukázka konfiguračního souboru <strong>.vimrc</strong> připraveného pro Python</a></p>
<p><a href="#k19">*** 19. Popis jednotlivých částí konfiguračního souboru</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní informace o projektu LSP</h2>

Standard umožňující komunikaci mezi textovým editorem popř.&nbsp;mezi integrovaným vývojovým prostředím na jedné straně a různými typy programátorských nástrojů na straně druhé. Mezi nástroji, které je možné z&nbsp;editoru/IDE použít, mohou patřit zejména různé lintery, statické analyzátory kódu, programy pro kontrolu stylu zápisu programů, nástroje umožňující refaktoring zdrojového kódu atd. Tyto nástroje mohou komunikovat s&nbsp;editorem/IDE přímo (pokud obsahují podporu pro LSP), nebo je možné využít nějaký obecnější nástroj nazývaný Language Server.

Poznámka: samotný protokol je nezávislý na tom, jestli Language Server běží na stejném počítači jako samotný editor/IDE, či zda běží na nějakém vzdáleném serveru (jako služba). V prvním případě samozřejmě budou odezvy rychlejší a doba odezvy by neměla být uživatelem vůbec zaznamenána.

textDocument/didOpen ->
textDocument/didChange ->
<- textDocument/publishDiagnostics
<- textDocument/didClose



<p><a name="k03"></a></p>
<h2 id="k03">3. Některé starší projekty založené na podobném principu</h2>

Myšlenka, na které je LSP postaven, samozřejmě není nijak nová ani převratná, protože se podobný princip využíval v&nbsp;editorech Vim a Emacs, které takto mohly komunikovat s&nbsp;nástroji běžícími na pozadí (daemons), viz též https://github.com/Microsoft/language-server-protocol/wiki/Protocol-History.

https://www.root.cz/clanky/knihovna-jedi-doplnovani-kodu-a-staticka-analyza-kodu-v-pythonu/#k15

Poznámka: to, že je LSP vůbec reálně využitelný, je do značné míry zajištěno díky vysokému výpočetnímu výkonu současných (desktopových) počítačů. Dříve byly podobné nástroje velmi úzce propojeny se samotným editorem právě z toho důvodu, aby byla odezva editoru/IDE dostatečně rychlá. Na druhou stranu se samozřejmě nejedná o univerzální řešení a dnes již například IDE specializované na jediný jazyk nebývají tolik oblíbena, jako v minulosti.



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. Python Language Server</h2>

<pre>
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Kooperace mezi Python Language Serverem a Vimem</h2>

<pre>
Collecting python-language-server
  Downloading https://files.pythonhosted.org/packages/9f/1d/2817b5dc2dd77f897410a11c1c9e2a6d96b3273c53d4219dd9edab7882af/python-language-server-0.21.2.tar.gz (51kB)
Requirement already satisfied: future>=0.14.0 in ./.local/lib/python3.6/site-packages (from python-language-server)
Requirement already satisfied: jedi>=0.12 in ./.local/lib/python3.6/site-packages (from python-language-server)
Requirement already satisfied: python-jsonrpc-server in ./.local/lib/python3.6/site-packages (from python-language-server)
Requirement already satisfied: pluggy in /usr/lib/python3.6/site-packages (from python-language-server)
Requirement already satisfied: parso>=0.3.0 in ./.local/lib/python3.6/site-packages (from jedi>=0.12->python-language-server)
Installing collected packages: python-language-server
  Running setup.py install for python-language-server: started
    Running setup.py install for python-language-server: finished with status 'done'
Successfully installed python-language-server-0.21.2
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Konfigurace pluginu <strong>vim-lsp</strong></h2>

<pre>
.
├── autoload
│   ├── async
│   │   └── job.vim
│   ├── lsp
│   │   ├── capabilities.vim
│   │   ├── client.vim
│   │   ├── omni.vim
│   │   ├── ui
│   │   │   ├── vim
│   │   │   │   ├── diagnostics
│   │   │   │   │   └── echo.vim
│   │   │   │   ├── diagnostics.vim
│   │   │   │   ├── hover.vim
│   │   │   │   ├── output.vim
│   │   │   │   ├── signs.vim
│   │   │   │   └── utils.vim
│   │   │   └── vim.vim
│   │   ├── utils
│   │   │   └── step.vim
│   │   └── utils.vim
│   └── lsp.vim
├── doc
│   └── vim-lsp.txt
├── ftplugin
│   └── lsp-hover.vim
├── plugin
│   └── lsp.vim
├── pythonx
├── spell
│   ├── cs.utf-8.add
│   ├── cs.utf-8.add.spl
│   ├── cs.utf-8.spl
│   ├── en.utf-8.add
│   └── en.utf-8.add.spl
└── syntax
</pre>

:helptags ~/.vim/doc

<pre>
vim-lsp

================================================================================
CONTENTS                                                  vim-lsp-contents

    Introduction                vim-lsp-introduction
    Install                     vim-lsp-install
    Language Servers            vim-lsp-language-servers
      Configure                   vim-lsp-configure-source
      Wiki                        vim-lsp-configure-wiki
    Options                     vim-lsp-options
      g:lsp_auto_enable           g:lsp_auto_enable
      g:lsp_preview_keep_focus    g:lsp_preview_keep_focus
    Functions                   vim-lsp-functions
      enable                      vim-lsp-enable
      disable                     vim-lsp-disable
      register_server             vim-lsp-register_server
      stop_server                 vim-lsp-stop_server
    Commands                    vim-lsp-commands
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Otestování základní funkcionality pluginu <strong>vim-lsp</strong></h2>

:echo lsp#get_server_info('pyls')
{'cmd': function('<lambda>1'), 'name': 'pyls', 'whitelist': ['python']}

:echo lsp#get_server_status('pyls')
not running

:e test.py

:echo lsp#get_server_status('pyls')
running



$ ps -ax |grep pyls
20787 ?        Ssl    0:01 /usr/bin/python3 /home/ptisnovs/.local/bin/pyls
20800 pts/3    S+     0:00 grep pyls


<p><a name="k10"></a></p>
<h2 id="k10">10. Dostupné příkazy</h2>

<table>
<tr><th></th><th></th></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
</table>

LspDocumentDiagnostics
LspDefinition
LspDocumentFormat
LspDocumentRangeFormat
LspDocumentSymbol
LspHover
LspNextError
LspPreviousError
LspImplementation
LspReferences
LspRename
LspTypeDefinition
LspWorkspaceSymbols
LspStatus



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
def hello_world():
    print("Hello world")


def hex():
    """Foobar"""
    print("HEX")

hex(40)
hello_world
</pre>

:LspHover
:LspDefinition
:LspDocumentDiagnostic
:LspReferences

:imap <tab> <C-X><C-O>


<p><a name="k11"></a></p>
<h2 id="k11">11. Technologie <i>Omni Completion</i> ve Vimu</h2>

<p>Velmi užitečnou vlastností textového editoru <i>Vim</i>, kterou se dnes budeme v&nbsp;souvislosti s&nbsp;LSP zabývat, je technologie nazvaná &bdquo;omni completion&ldquo; (někdy se setkáme i s&nbsp;jednoslovným zápisem &bdquo;omnicompletion&ldquo;). Tato technologie, která se ve Vimu objevila až <a href="http://vimdoc.sourceforge.net/htmldoc/version7.html#new-omni-completion">v&nbsp;jeho sedmé verzi</a>, rozšiřuje možnosti automatického doplňování kódu (či obecně textu) o externí nástroje. Připomeňme si, že Vim nabízí ve vkládacím a přepisovacím režimu klávesovou zkratku <strong>Ctrl+P</strong> (<i>previous</i>) pro nalezení a doplnění slova nacházejícího se před kurzorem a taktéž zkratku <strong>Ctrl+N</strong> (<i>next</i>), která slouží ke stejnému účelu, ovšem hledá slovo pro doplnění v&nbsp;textu za kurzorem (pokud je k&nbsp;dispozici více možností, zobrazí se v&nbsp;kontextovém menu). V&nbsp;praxi tedy postačuje napsat jen začátek slova a stlačit <strong>Ctrl+P</strong> nebo <strong>Ctrl+N</strong>. Rozsah vyhledávání se specifikuje volbou <strong>complete</strong> popsanou <a href="http://vimdoc.sourceforge.net/htmldoc/options.html#'complete'">zde</a> a samozřejmě i ve vestavěné nápovědě.</p>

<a href="http://i.iinfo.cz/images/257/vim03-10.png"><img src="http://i.iinfo.cz/images/257/vim03-10-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek XX: Doplňování kódu pomocí příkazů CTRL+P a CTRL+N zavolaných v&nbsp;režimu zápisu (insert mode).</i></p>

<p>Ovšem možnosti automatického doplňování kódu jsou ve skutečnosti daleko větší a textový editor <i>Vim</i> pro ně dokonce nabízí samostatný režim vyvolávaný z&nbsp;vkládacího či přepisovacího režimu klávesovou zkratkou <strong>Ctrl+X</strong> (z&nbsp;tohoto důvodu se tento režim nazývá <i>^X-mode</i> nebo též <i>CTRL-X</i> mode). Po stlačení této klávesové zkratky se v&nbsp;příkazové řádce objeví řádkové menu s&nbsp;příkazy platnými pro režim doplňování:</p>

***
<p><i>Obrázek XX: Menu s&nbsp;dostupnými klávesovými zkratkami platnými v&nbsp;režimu CTRL-X.</i></p>

<p>Všechny dostupné příkazy jsou vypsány v&nbsp;tabulce níže:</p>

<table>
<tr><th></th><th></th><th></th></tr>
<tr><td></td><td></td><td></td></tr>
</table>

<table>
<tr><th> #</th><th>Příkaz</th><th>Význam</th></tr>
<tr><td> 1</td><td>Ctrl+X Ctrl+L</td><td>nalezení a doplnění celého (shodného) řádku, užitečné především v&nbsp;případě editace některých typů konfiguračních souborů</td></tr>
<tr><td> 2</td><td>Ctrl+X Ctrl+N</td><td>doplnění slova, které se nalézá v&nbsp;aktuálně editovaném souboru</td></tr>
<tr><td> 3</td><td>Ctrl+X Ctrl+K</td><td>podobné Ctrl+N, ovšem slova se hledají v&nbsp;souborech specifikovaných pomocí konfiguračního parametru <strong>dictionary</strong> (jedná se o běžný textový soubor se seznamem slov)</td></tr>
<tr><td> 4</td><td>Ctrl+X Ctrl+T</td><td>podobné Ctrl+T, ovšem slova se hledají v&nbsp;souborech specifikovaných pomocí konfiguračního parametru <strong>thesaurus</strong></td></tr>
<tr><td> 5</td><td>Ctrl+X Ctrl+I</td><td>podobné Ctrl+N, ovšem prohledávají se i všechny vkládané (included) soubory</td></tr>
<tr><td> 6</td><td>Ctrl+X Ctrl+]</td><td>vyhledávání v&nbsp;seznamu značek</td></tr>
<tr><td> 7</td><td>Ctrl+X Ctrl+F</td><td>doplnění názvu souboru a/nebo cesty, postačuje například zadat text ~/ za nímž následuje klávesová zkratka Ctrl+X Ctrl+F a zobrazí se výpis souborů v&nbsp;domácím adresáři</td></tr>
<tr><td> 8</td><td>Ctrl+X Ctrl+D</td><td>vyhledání definice makra a doplnění jména tohoto makra</td></tr>
<tr><td> 9</td><td>Ctrl+X Ctrl+U</td><td>zavolání funkce zadané v&nbsp;konfiguračním parametru <strong>completefunc</strong>, které se předá právě editovaný text</td></tr>
<tr><td>10</td><td>Ctrl+X Ctrl+O</td><td>vyvolání omni completion popsané v&nbsp;následující kapitole (dostupné od Vimu 7)</td></tr>
</table>

<a href="http://i.iinfo.cz/images/257/vim03-11.png"><img src="http://i.iinfo.cz/images/257/vim03-11-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek xx: Doplnění názvu souboru v&nbsp;pracovním adresáři pomocí
příkazu CTRL+X CTRL+F.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Nastavení funkce Omni Completion pro plugin vim-lsp</h2>

<p><a href="#k12">V&nbsp;předchozí kapitole</a> jsme si řekli, že s&nbsp;využitím klávesové zkratky <strong>Ctrl+X Ctrl+O</strong> lze ve vkládacím a přepisovacím režimu zavolat technologii &bdquo;omni completion&ldquo;. Tuto technologii lze využít pro (pseudo)inteligentní doplňování textů založeném na analýze zdrojových kódů. Podobnou funkci můžeme najít v&nbsp;nejrůznějších integrovaných vývojových prostředích (Eclipse, Netbeans, Visual Studio, Visual Studio Code, nověji například i v&nbsp;Atomu), v&nbsp;nichž lze doplňovat například jména prvků ve strukturách či uniích, atributů objektů, metod objektů či tříd, jmen balíčků atd. Plugin <i>vim-lsp</i> tuto funkci samozřejmě nabízí; její jméno je <strong>lsp#complete</strong>. Aby byla tato funkce použita po stisku <strong>Ctrl+X Ctrl+O</strong> je nutné tuto funkci přiřadit konfigurační volbě <strong>omnifunc</strong>. Globálně (pro celý Vim) se to provede jednoduše příkazem:</p>

<pre>
:set omnifunc=lsp#complete
</pre>

<p>Popř.&nbsp;lze stejnou funkci nastavit pouze lokálně pro právě aktivní buffer:</p>

<pre>
:setlocal omnifunc=lsp#complete
</pre>

<p>Samozřejmě nemusíme toto nastavení stále provádět ručně, ale můžeme do konfiguračního souboru <strong>.vimrc</strong> přidat příkaz, který se automaticky zavolá při otevření souboru s&nbsp;koncovkou Python:</p>

<pre>
augroup __python__
  au!
  au BufRead,BufNewFile *.py setlocal omnifunc=lsp#complete
augroup END
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p>Pokud se navíc ve zdrojových textech nikde nepoužívá tabulátor (záleží samozřejmě na zvolené &bdquo;štábní kultuře&ldquo; a taktéž i na zvyklostech platící pro daný programovací jazyk), může pomoci toto mapování umožňující, aby se místo Ctrl+X Ctrl+O mohla stlačit pouze klávesa Tab:</p>

<pre>
:imap &lt;Tab&gt; &lt;C-X&gt;&lt;C-O&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě Pythonu se sice znak Tab (přesněji HT &ndash; horizontal tab) ve zdrojových kódech nemá používat, ovšem klávesa Tab může sloužit pro vkládání mezer odpovídajících jednomu odsazení. Záleží tudíž jen na vás, zda si tuto klávesu budete &bdquo;rezervovat&ldquo; pro omni completion či nikoli. Alternativně je možné napsat funkci, která bude na začátku řádku klávesu Tab používat pro vkládání mezer a naopak po stisku Tab za písmenem pro zavolání omni completion. Podobné řešení bylo použito v&nbsp;pluginu <a href="https://github.com/vim-scripts/IndentTab/blob/master/autoload/IndentTab.vim">IndentTab</a> popř.&nbsp;pluginu <a href="https://github.com/vim-scripts/Smart-Tabs">Smart-Tabs</a>. Další ideu naleznete například na stránce <a href="http://vim.wikia.com/wiki/Smart_mapping_for_tab_completion">Smart mapping for tab completion</a></div></p>

<p>V&nbsp;případě, že používáte GVIM, lze namísto klávesy Tab použít například i klávesovou zkratku Ctrl+Space:</p>

<pre>
:imap &lt;C-Space&gt; &lt;C-X&gt;&lt;C-O&gt;
</pre>

<p>Na terminálech sice většinou není klávesová zkratka Ctrl+Space rozpoznána, ale můžete se pokusit zjistit, zda terminál namísto Ctrl+Space nerozpozná Ctrl+@, tj.&nbsp;zda obě klávesové zkratky nejsou rozpoznány jako shodný kód. Pokud tomu tak je, můžete mapování změnit na:</p>

<pre>
:imap &lt;C-@&gt; &lt;C-X&gt;&lt;C-O&gt;
</pre>

<p>a používat Ctrl+Space i v&nbsp;terminálu.</p>

<p><div class="rs-tip-major">Poznámka: technicky se klávesovou zkratkou Ctrl+@ zadává ASCII kód NUL, tj.&nbsp;první znak v&nbsp;ASCII tabulce, protože znak @ má ASCII kód 64 a stiskem Ctrl snižujeme ASCII kód právě o hodnotu 64. To je také důvod, proč <strong>Ctrl+I</strong> tak odpovídá znaku HT (<i>Horizontal Tab</i>), <strong>Ctrl+H</strong> znaku BS (<i>Backspace</i>), <strong>Ctrl+[</strong> řídicímu znaku ESC, <strong>Ctrl+M</strong> konci řádku (CR) atd. Vše osvětlí pohled na <a href="https://en.wikipedia.org/wiki/ASCII#Character_set">ASCII tabulku</a>.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Nastavení automatického doplňování volbou <strong>completeopt</strong></h2>

<p></p>

<pre>
:set completeopt=longest,menuone
</pre>

<p></p>

<pre>
:inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
</pre>

<p></p>

<pre>
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Přijdou další protokoly &ndash; tentokrát pro ladění aplikací?</h2>

<p>Po přečtení předchozích kapitol možná čtenáře napadlo, že existence LSP je sice skvělá věc pro samotné psaní programového kódu, pro hledání chyb, formátování, refaktorizaci atd., ovšem jedna podstatná věc v&nbsp;protokolu chybí. Jedná se samozřejmě o možnosti ladění aplikací. Bylo by pravděpodobně velmi užitečné mít k&nbsp;dispozici jeden protokol, který by umožňoval spustit libovolný debugger (například GDB nebo <a href="https://lldb.llvm.org/">LLDB</a>, debugger Pythonu atd. atd.) a ovládat tento debugger jedním standardizovaným způsobem.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Protokol používaný pro připojení GNU Debuggeru</h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. VSCode Debug Protocol</h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Ukázka konfiguračního souboru <strong>.vimrc</strong> připraveného pro Python</h2>

<p>Podívejme se nyní, jak by </p>

<pre>
<i>" .vimrc by Tisnik</i>
&nbsp;
set nocompatible                <i>" rezim nekompatibilni s vi</i>
set encoding=utf-8
set novisualbell                <i>" pri chybe se nepipa, ale zablika obrazovka</i>
set hlsearch                    <i>" zvyrazneni vysledku hledani</i>
set incsearch                   <i>" zvyrazneni pri hledani</i>
set showmatch                   <i>" bude se zobrazovat prislusna druha zavorka</i>
set showmode                    <i>" bude se zobrazovat rezim cinnosti (-- INSERT --, -- REPLACE --, -- VISUAL -- ...)</i>
set showcmd                     <i>" bude se zobrazovat prave zadavany prikaz (3dd ...)</i>
set ruler                       <i>" bude se zobrazovat pravitko s pozici kurzoru</i>
set shiftwidth=4                <i>" velikost 'tabulatoru'</i>
set bs=2                        <i>" backspace maze vse</i>
&nbsp;
set backupdir=~/temp,.          <i>" adresar pro ulozeni zaloznich souboru</i>
set directory=~/temp,.          <i>" adresar pro swapovaci soubor</i>
set viminfo='20,\"50,n~/temp/_viminfo
&nbsp;
augroup __python__
  au!
  au BufRead,BufNewFile *.py map &lt;F1&gt; :LspStatus&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F2&gt; :!python2 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F3&gt; :!python3 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F4&gt; :LspDocumentDiagnostics&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F5&gt; :LspHover&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F6&gt; :LspDocumentSymbol&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F8&gt; :!pep8 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F9&gt; :!pydocstyle ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F10&gt; :!radon cc ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F11&gt; :!pudb3 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F12&gt; &lt;C-W&gt;&lt;C-Z&gt;
  au BufRead,BufNewFile *.py imap &lt;F12&gt; &lt;C-O&gt;&lt;C-W&gt;&lt;C-Z&gt;
  au BufRead,BufNewFile *.py imap &lt;Tab&gt; &lt;C-X&gt;&lt;C-O&gt;
  au BufRead,BufNewFile *.py highlight OverLength ctermbg=yellow ctermfg=white guibg=#592929
  au BufRead,BufNewFile *.py match OverLength /\%99v.\+/
  au BufRead,BufNewFile *.py setlocal omnifunc=lsp#complete
augroup END
&nbsp;
if (executable('pyls'))
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info-&gt;['pyls']},
        \ 'whitelist': ['python']
        \ })
endif
</pre>


<p><a name="k19"></a></p>
<h2 id="k19">19. Popis jednotlivých částí konfiguračního souboru</h2>

<p></p>

<table>
<tr><th>Režim</th><th>Klávesa</th><th>Funkce</th></tr>
<tr><td>normální</td><td>F2</td><td></td></tr>
<tr><td>normální</td><td>F3</td><td></td></tr>
<tr><td>normální</td><td>F8</td><td></td></tr>
<tr><td>normální</td><td>F9</td><td></td></tr>
<tr><td>normální</td><td>F10</td><td></td></tr>
<tr><td>normální</td><td>F11</td><td></td></tr>
</table>

<pre>
  au BufRead,BufNewFile *.py map &lt;F2&gt; :!python2 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F3&gt; :!python3 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F8&gt; :!pep8 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F9&gt; :!pydocstyle ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F10&gt; :!radon cc ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F11&gt; :!pudb3 %&lt;cr&gt;
</pre>

<p></p>

<table>
<tr><th>Režim</th><th>Klávesa</th><th>Funkce</th></tr>
<tr><td>normální</td><td>F1</td><td></td></tr>
<tr><td>normální</td><td>F4</td><td></td></tr>
<tr><td>normální</td><td>F5</td><td></td></tr>
<tr><td>normální</td><td>F6</td><td></td></tr>
</table>

<pre>
  au BufRead,BufNewFile *.py map &lt;F1&gt; :LspStatus&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F4&gt; :LspDocumentDiagnostics&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F5&gt; :LspHover&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F6&gt; :LspDocumentSymbol&lt;cr&gt;
</pre>

<p></p>

<table>
<tr><th>Režim</th><th>Klávesa</th><th>Funkce</th></tr>
<tr><td>normální</td><td></td><td></td></tr>
<tr><td>vkládací</td><td></td><td></td></tr>
<tr><td>vkládací</td><td></td><td></td></tr>
</table>

<pre>
  au BufRead,BufNewFile *.py map &lt;F12&gt; &lt;C-W&gt;&lt;C-Z&gt;
  au BufRead,BufNewFile *.py imap &lt;F12&gt; &lt;C-O&gt;&lt;C-W&gt;&lt;C-Z&gt;
  au BufRead,BufNewFile *.py imap &lt;Tab&gt; &lt;C-X&gt;&lt;C-O&gt;
</pre>

<p></p>

<pre>
  au BufRead,BufNewFile *.py highlight OverLength ctermbg=yellow ctermfg=white guibg=#592929
  au BufRead,BufNewFile *.py match OverLength /\%99v.\+/
  au BufRead,BufNewFile *.py setlocal omnifunc=lsp#complete
</pre>

<p></p>

<pre>
if (executable('pyls'))
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info-&gt;['pyls']},
        \ 'whitelist': ['python']
        \ })
endif
</pre>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Langserver.org<br />
<a href="https://langserver.org/">https://langserver.org/</a>
</li>

<li>Language Server Protocol<br />
<a href="https://microsoft.github.io/language-server-protocol/">https://microsoft.github.io/language-server-protocol/</a>
</li>

<li>Language Server Protocol Specification<br />
<a href="https://microsoft.github.io/language-server-protocol/specification">https://microsoft.github.io/language-server-protocol/specification</a>
</li>

<li>Implementations Language Servers<br />
<a href="https://microsoft.github.io/language-server-protocol/implementors/servers">https://microsoft.github.io/language-server-protocol/implementors/servers</a>
</li>

<li>JSON-RPC 2.0 Specification<br />
<a href="https://www.jsonrpc.org/specification">https://www.jsonrpc.org/specification</a>
</li>

<li>Why You Should Know the Language Server Protocol<br />
<a href="https://tomassetti.me/what-is-the-language-server-protocol/">https://tomassetti.me/what-is-the-language-server-protocol/</a>
</li>

<li>Language Server Protocol: A Language Server For DOT With Visual Studio Code<br />
<a href="https://tomassetti.me/language-server-dot-visual-studio/">https://tomassetti.me/language-server-dot-visual-studio/</a>
</li>

<li>Python Language Server<br />
<a href="https://github.com/palantir/python-language-server">https://github.com/palantir/python-language-server</a>
</li>

<li>Jedi - an awesome autocompletion/static analysis library for Python<br />
<a href="https://github.com/davidhalter/jedi">https://github.com/davidhalter/jedi</a>
</li>

<li>What is lsp<br />
<a href="https://www.reddit.com/r/vim/comments/7lnhrt/which_lsp_plugin_should_i_use/">https://www.reddit.com/r/vim/comments/7lnhrt/which_lsp_plugin_should_i_use/</a>
</li>

<li>Vim-lsp<br />
<a href="https://github.com/prabirshrestha/vim-lsp">https://github.com/prabirshrestha/vim-lsp</a>
</li>

<li>Using LSP &amp; clangd in Vim<br />
<a href="https://jonasdevlieghere.com/vim-lsp-clangd/">https://jonasdevlieghere.com/vim-lsp-clangd/</a>
</li>

<li>Seriál Textový editor Vim jako IDE<br />
<a href="https://www.root.cz/serialy/textovy-editor-vim-jako-ide/">https://www.root.cz/serialy/textovy-editor-vim-jako-ide/</a>
</li>

<li>Seriál VIM na plný výkon<br />
<a href="https://www.root.cz/serialy/vim-na-plny-vykon/">https://www.root.cz/serialy/vim-na-plny-vykon/</a>
</li>

<li>What about a Common Debug Protocol?<br />
<a href="https://kichwacoders.com/2017/07/28/what-about-a-common-debug-protocol/">https://kichwacoders.com/2017/07/28/what-about-a-common-debug-protocol/</a>
</li>

<li>Example - Debug Adapter<br />
<a href="https://code.visualstudio.com/docs/extensions/example-debuggers">https://code.visualstudio.com/docs/extensions/example-debuggers</a>
</li>

<li>Konfigurační volba <strong>complete</strong><br />
<a href="http://vimdoc.sourceforge.net/htmldoc/options.html#'complete'">http://vimdoc.sourceforge.net/htmldoc/options.html#'complete'</a>
</li>

<li>Konfigurační volba <strong>completeopt</strong><br />
<a href="http://vimdoc.sourceforge.net/htmldoc/options.html#'completeopt'">http://vimdoc.sourceforge.net/htmldoc/options.html#'completeopt'</a>
</li>

<li>Make Vim completion popup menu work just like in an IDE<br />
<a href="http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE">http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE</a>
</li>

<li>Novinky ve Vimu 7.0<br />
<a href="http://vimdoc.sourceforge.net/htmldoc/version7.html#new-omni-completion">http://vimdoc.sourceforge.net/htmldoc/version7.html#new-omni-completion</a>
</li>

<li>IndentTab<br />
<a href="https://github.com/vim-scripts/IndentTab">https://github.com/vim-scripts/IndentTab</a>
</li>

<li>Smart-Tabs<br />
<a href="https://github.com/vim-scripts/Smart-Tabs">https://github.com/vim-scripts/Smart-Tabs</a>
</li>

<li>Omni completion<br />
<a href="http://vim.wikia.com/wiki/Omni_completion">http://vim.wikia.com/wiki/Omni_completion</a>
</li>

<li>Smart mapping for tab completion<br />
<a href="http://vim.wikia.com/wiki/Smart_mapping_for_tab_completion">http://vim.wikia.com/wiki/Smart_mapping_for_tab_completion</a>
</li>

<li>Make Vim completion popup menu work just like in an IDE<br />
<a href="http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE">http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE</a>
</li>

<li>The LLDB Debugger<br />
<a href="https://lldb.llvm.org/">https://lldb.llvm.org/</a>
</li>

<li>GDB: The GNU Project Debugger<br />
<a href="https://www.gnu.org/software/gdb/">https://www.gnu.org/software/gdb/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

