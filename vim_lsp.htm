<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Základní informace o projektu LSP</a></p>
<p><a href="#k03">*** 3. Některé starší projekty založené na podobném principu</a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. Python Language Server</a></p>
<p><a href="#k07">*** 7. Kooperace mezi Python Language Serverem a Vimem</a></p>
<p><a href="#k08">*** 8. Konfigurace pluginu <strong>vim-lsp</strong></a></p>
<p><a href="#k09">*** 9. Otestování základní funkcionality pluginu <strong>vim-lsp</strong></a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. Nastavení funkce technologie omnicompletion</a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. Přijdou další protokoly &ndash; tentokrát pro ladění aplikací?</a></p>
<p><a href="#k16">*** 16. Protokol používaný pro připojení GNU Debuggeru</a></p>
<p><a href="#k17">*** 17. VSCode Debug Protocol</a></p>
<p><a href="#k18">*** 18. Ukázka konfiguračního souboru <strong>.vimrc</strong> připraveného pro Python</a></p>
<p><a href="#k19">*** 19. Popis jednotlivých částí konfiguračního souboru</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní informace o projektu LSP</h2>

Standard umožňující komunikaci mezi textovým editorem popř.&nbsp;mezi integrovaným vývojovým prostředím na jedné straně a různými typy programátorských nástrojů na straně druhé. Mezi nástroji, které je možné z&nbsp;editoru/IDE použít, mohou patřit zejména různé lintery, statické analyzátory kódu, programy pro kontrolu stylu zápisu programů, nástroje umožňující refaktoring zdrojového kódu atd. Tyto nástroje mohou komunikovat s&nbsp;editorem/IDE přímo (pokud obsahují podporu pro LSP), nebo je možné využít nějaký obecnější nástroj nazývaný Language Server.

Poznámka: samotný protokol je nezávislý na tom, jestli Language Server běží na stejném počítači jako samotný editor/IDE, či zda běží na nějakém vzdáleném serveru (jako služba). V prvním případě samozřejmě budou odezvy rychlejší a doba odezvy by neměla být uživatelem vůbec zaznamenána.

textDocument/didOpen ->
textDocument/didChange ->
<- textDocument/publishDiagnostics
<- textDocument/didClose



<p><a name="k03"></a></p>
<h2 id="k03">3. Některé starší projekty založené na podobném principu</h2>

Myšlenka, na které je LSP postaven, samozřejmě není nijak nová ani převratná, protože se podobný princip využíval v&nbsp;editorech Vim a Emacs, které takto mohly komunikovat s&nbsp;nástroji běžícími na pozadí (daemons), viz též https://github.com/Microsoft/language-server-protocol/wiki/Protocol-History.

https://www.root.cz/clanky/knihovna-jedi-doplnovani-kodu-a-staticka-analyza-kodu-v-pythonu/#k15

Poznámka: to, že je LSP vůbec reálně využitelný, je do značné míry zajištěno díky vysokému výpočetnímu výkonu současných (desktopových) počítačů. Dříve byly podobné nástroje velmi úzce propojeny se samotným editorem právě z toho důvodu, aby byla odezva editoru/IDE dostatečně rychlá. Na druhou stranu se samozřejmě nejedná o univerzální řešení a dnes již například IDE specializované na jediný jazyk nebývají tolik oblíbena, jako v minulosti.



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. Python Language Server</h2>

<pre>
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Kooperace mezi Python Language Serverem a Vimem</h2>

<pre>
Collecting python-language-server
  Downloading https://files.pythonhosted.org/packages/9f/1d/2817b5dc2dd77f897410a11c1c9e2a6d96b3273c53d4219dd9edab7882af/python-language-server-0.21.2.tar.gz (51kB)
Requirement already satisfied: future>=0.14.0 in ./.local/lib/python3.6/site-packages (from python-language-server)
Requirement already satisfied: jedi>=0.12 in ./.local/lib/python3.6/site-packages (from python-language-server)
Requirement already satisfied: python-jsonrpc-server in ./.local/lib/python3.6/site-packages (from python-language-server)
Requirement already satisfied: pluggy in /usr/lib/python3.6/site-packages (from python-language-server)
Requirement already satisfied: parso>=0.3.0 in ./.local/lib/python3.6/site-packages (from jedi>=0.12->python-language-server)
Installing collected packages: python-language-server
  Running setup.py install for python-language-server: started
    Running setup.py install for python-language-server: finished with status 'done'
Successfully installed python-language-server-0.21.2
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Konfigurace pluginu <strong>vim-lsp</strong></h2>

<pre>
.
├── autoload
│   ├── async
│   │   └── job.vim
│   ├── lsp
│   │   ├── capabilities.vim
│   │   ├── client.vim
│   │   ├── omni.vim
│   │   ├── ui
│   │   │   ├── vim
│   │   │   │   ├── diagnostics
│   │   │   │   │   └── echo.vim
│   │   │   │   ├── diagnostics.vim
│   │   │   │   ├── hover.vim
│   │   │   │   ├── output.vim
│   │   │   │   ├── signs.vim
│   │   │   │   └── utils.vim
│   │   │   └── vim.vim
│   │   ├── utils
│   │   │   └── step.vim
│   │   └── utils.vim
│   └── lsp.vim
├── doc
│   └── vim-lsp.txt
├── ftplugin
│   └── lsp-hover.vim
├── plugin
│   └── lsp.vim
├── pythonx
├── spell
│   ├── cs.utf-8.add
│   ├── cs.utf-8.add.spl
│   ├── cs.utf-8.spl
│   ├── en.utf-8.add
│   └── en.utf-8.add.spl
└── syntax
</pre>

:helptags ~/.vim/doc

<pre>
vim-lsp

================================================================================
CONTENTS                                                  vim-lsp-contents

    Introduction                vim-lsp-introduction
    Install                     vim-lsp-install
    Language Servers            vim-lsp-language-servers
      Configure                   vim-lsp-configure-source
      Wiki                        vim-lsp-configure-wiki
    Options                     vim-lsp-options
      g:lsp_auto_enable           g:lsp_auto_enable
      g:lsp_preview_keep_focus    g:lsp_preview_keep_focus
    Functions                   vim-lsp-functions
      enable                      vim-lsp-enable
      disable                     vim-lsp-disable
      register_server             vim-lsp-register_server
      stop_server                 vim-lsp-stop_server
    Commands                    vim-lsp-commands
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Otestování základní funkcionality pluginu <strong>vim-lsp</strong></h2>

:echo lsp#get_server_info('pyls')
{'cmd': function('<lambda>1'), 'name': 'pyls', 'whitelist': ['python']}

:echo lsp#get_server_status('pyls')
not running

:e test.py

:echo lsp#get_server_status('pyls')
running



$ ps -ax |grep pyls
20787 ?        Ssl    0:01 /usr/bin/python3 /home/ptisnovs/.local/bin/pyls
20800 pts/3    S+     0:00 grep pyls


<p><a name="k10"></a></p>
<h2 id="k10">10. Dostupné příkazy</h2>

<table>
<tr><th></th><th></th></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
</table>

LspDocumentDiagnostics
LspDefinition
LspDocumentFormat
LspDocumentRangeFormat
LspDocumentSymbol
LspHover
LspNextError
LspPreviousError
LspImplementation
LspReferences
LspRename
LspTypeDefinition
LspWorkspaceSymbols
LspStatus



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
def hello_world():
    print("Hello world")


def hex():
    """Foobar"""
    print("HEX")

hex(40)
hello_world
</pre>

:LspHover
:LspDefinition
:LspDocumentDiagnostic
:LspReferences

:imap <tab> <C-X><C-O>


<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

Velmi užitečnou vlastností textového editoru Vim, kterou se dnes budeme zabývat, je technologie nazvaná „omni completion“. Tato technologie, která se ve Vimu objevila až v jeho sedmé verzi, rozšiřuje možnosti automatického doplňování kódu o externí nástroje. Připomeňme si, že Vim nabízí ve vkládacím a přepisovacím režimu klávesovou zkratku Ctrl+P (previous) pro nalezení a doplnění slova nacházejícího se před kurzorem a taktéž zkratku Ctrl+N (next), která slouží ke stejnému účelu, ovšem hledá slovo pro doplnění v textu za kurzorem (pokud je k dispozici více možností, zobrazí se v kontextovém menu).

Ovšem možnosti automatického doplňování kódu jsou daleko větší, textový editor Vim pro ně dokonce nabízí samostatný režim vyvolávaný z vkládacího či přepisovacího režimu klávesovou zkratkou Ctrl+X. Po stlačení této klávesové zkratky se v příkazové řádce objeví řádkové menu s příkazy platnými pro režim doplňování. Všechny dostupné příkazy jsou vypsány v tabulce níže:

# 	Příkaz 	Význam
1 	Ctrl+X Ctrl+L 	nalezení a doplnění celého (shodného) řádku, užitečné především v případě editace některých typů konfiguračních souborů
2 	Ctrl+X Ctrl+N 	doplnění slova, které se nalézá v aktuálně editovaném souboru
3 	Ctrl+X Ctrl+K 	podobné Ctrl+N, ovšem slova se hledají v souborech specifikovaných pomocí konfiguračního parametru dictionary (jedná se o běžný textový soubor se seznamem slov)
4 	Ctrl+X Ctrl+T 	podobné Ctrl+T, ovšem slova se hledají v souborech specifikovaných pomocí konfiguračního parametru thesaurus
5 	Ctrl+X Ctrl+I 	podobné Ctrl+N, ovšem prohledávají se i všechny vkládané (included) soubory
6 	Ctrl+X Ctrl+] 	vyhledávání v seznamu značek
7 	Ctrl+X Ctrl+F 	doplnění názvu souboru a/nebo cesty, postačuje například zadat text ~/ za nímž následuje klávesová zkratka Ctrl+X Ctrl+F a zobrazí se výpis souborů v domácím adresáři
8 	Ctrl+X Ctrl+D 	vyhledání definice makra a doplnění jména tohoto makra
9 	Ctrl+X Ctrl+U 	zavolání funkce zadané v konfiguračním parametru completefunc, které se předá právě editovaný text
10 	Ctrl+X Ctrl+O 	vyvolání omni completion popsané v následující kapitole (dostupné od Vimu 7 a 8)


<p><a name="k12"></a></p>
<h2 id="k12">12. Nastavení funkce technologie omnicompletion</h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Přijdou další protokoly &ndash; tentokrát pro ladění aplikací?</h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Protokol používaný pro připojení GNU Debuggeru</h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. VSCode Debug Protocol</h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Ukázka konfiguračního souboru <strong>.vimrc</strong> připraveného pro Python</h2>

<p></p>

<pre>
<i>" .vimrc by Tisnik</i>
&nbsp;
set nocompatible                <i>" rezim nekompatibilni s vi</i>
set encoding=utf-8
set novisualbell                <i>" pri chybe se nepipa, ale zablika obrazovka</i>
set hlsearch                    <i>" zvyrazneni vysledku hledani</i>
set incsearch                   <i>" zvyrazneni pri hledani</i>
set showmatch                   <i>" bude se zobrazovat prislusna druha zavorka</i>
set showmode                    <i>" bude se zobrazovat rezim cinnosti (-- INSERT --, -- REPLACE --, -- VISUAL -- ...)</i>
set showcmd                     <i>" bude se zobrazovat prave zadavany prikaz (3dd ...)</i>
set ruler                       <i>" bude se zobrazovat pravitko s pozici kurzoru</i>
set shiftwidth=4                <i>" velikost 'tabulatoru'</i>
set bs=2                        <i>" backspace maze vse</i>
&nbsp;
set backupdir=~/temp,.          <i>" adresar pro ulozeni zaloznich souboru</i>
set directory=~/temp,.          <i>" adresar pro swapovaci soubor</i>
set viminfo='20,\"50,n~/temp/_viminfo
&nbsp;
augroup __python__
  au!
  au BufRead,BufNewFile *.py map &lt;F1&gt; :LspStatus&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F2&gt; :!python2 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F3&gt; :!python3 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F4&gt; :LspDocumentDiagnostics&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F5&gt; :LspHover&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F6&gt; :LspDocumentSymbol&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F8&gt; :!pep8 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F9&gt; :!pydocstyle ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F10&gt; :!radon cc ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F11&gt; :!pudb3 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F12&gt; &lt;C-W&gt;&lt;C-Z&gt;
  au BufRead,BufNewFile *.py imap &lt;F12&gt; &lt;C-O&gt;&lt;C-W&gt;&lt;C-Z&gt;
  au BufRead,BufNewFile *.py imap &lt;Tab&gt; &lt;C-X&gt;&lt;C-O&gt;
  au BufRead,BufNewFile *.py highlight OverLength ctermbg=yellow ctermfg=white guibg=#592929
  au BufRead,BufNewFile *.py match OverLength /\%99v.\+/
  au BufRead,BufNewFile *.py setlocal omnifunc=lsp#complete
augroup END
&nbsp;
if (executable('pyls'))
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info-&gt;['pyls']},
        \ 'whitelist': ['python']
        \ })
endif
</pre>


<p><a name="k19"></a></p>
<h2 id="k19">19. Popis jednotlivých částí konfiguračního souboru</h2>

<p></p>

<table>
<tr><th>Režim</th><th>Klávesa</th><th>Funkce</th></tr>
<tr><td>normální</td><td>F2</td><td></td></tr>
<tr><td>normální</td><td>F3</td><td></td></tr>
<tr><td>normální</td><td>F8</td><td></td></tr>
<tr><td>normální</td><td>F9</td><td></td></tr>
<tr><td>normální</td><td>F10</td><td></td></tr>
<tr><td>normální</td><td>F11</td><td></td></tr>
</table>

<pre>
  au BufRead,BufNewFile *.py map &lt;F2&gt; :!python2 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F3&gt; :!python3 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F8&gt; :!pep8 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F9&gt; :!pydocstyle ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F10&gt; :!radon cc ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F11&gt; :!pudb3 %&lt;cr&gt;
</pre>

<p></p>

<table>
<tr><th>Režim</th><th>Klávesa</th><th>Funkce</th></tr>
<tr><td>normální</td><td>F1</td><td></td></tr>
<tr><td>normální</td><td>F4</td><td></td></tr>
<tr><td>normální</td><td>F5</td><td></td></tr>
<tr><td>normální</td><td>F6</td><td></td></tr>
</table>

<pre>
  au BufRead,BufNewFile *.py map &lt;F1&gt; :LspStatus&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F4&gt; :LspDocumentDiagnostics&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F5&gt; :LspHover&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F6&gt; :LspDocumentSymbol&lt;cr&gt;
</pre>

<p></p>

<table>
<tr><th>Režim</th><th>Klávesa</th><th>Funkce</th></tr>
<tr><td>normální</td><td></td><td></td></tr>
<tr><td>vkládací</td><td></td><td></td></tr>
<tr><td>vkládací</td><td></td><td></td></tr>
</table>

<pre>
  au BufRead,BufNewFile *.py map &lt;F12&gt; &lt;C-W&gt;&lt;C-Z&gt;
  au BufRead,BufNewFile *.py imap &lt;F12&gt; &lt;C-O&gt;&lt;C-W&gt;&lt;C-Z&gt;
  au BufRead,BufNewFile *.py imap &lt;Tab&gt; &lt;C-X&gt;&lt;C-O&gt;
</pre>

<p></p>

<pre>
  au BufRead,BufNewFile *.py highlight OverLength ctermbg=yellow ctermfg=white guibg=#592929
  au BufRead,BufNewFile *.py match OverLength /\%99v.\+/
  au BufRead,BufNewFile *.py setlocal omnifunc=lsp#complete
</pre>

<p></p>

<pre>
if (executable('pyls'))
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info-&gt;['pyls']},
        \ 'whitelist': ['python']
        \ })
endif
</pre>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Langserver.org<br />
<a href="https://langserver.org/">https://langserver.org/</a>
</li>

<li>Language Server Protocol<br />
<a href="https://microsoft.github.io/language-server-protocol/">https://microsoft.github.io/language-server-protocol/</a>
</li>

<li>Language Server Protocol Specification<br />
<a href="https://microsoft.github.io/language-server-protocol/specification">https://microsoft.github.io/language-server-protocol/specification</a>
</li>

<li>Implementations Language Servers<br />
<a href="https://microsoft.github.io/language-server-protocol/implementors/servers">https://microsoft.github.io/language-server-protocol/implementors/servers</a>
</li>

<li>JSON-RPC 2.0 Specification<br />
<a href="https://www.jsonrpc.org/specification">https://www.jsonrpc.org/specification</a>
</li>

<li>Why You Should Know the Language Server Protocol<br />
<a href="https://tomassetti.me/what-is-the-language-server-protocol/">https://tomassetti.me/what-is-the-language-server-protocol/</a>
</li>

<li>Language Server Protocol: A Language Server For DOT With Visual Studio Code<br />
<a href="https://tomassetti.me/language-server-dot-visual-studio/">https://tomassetti.me/language-server-dot-visual-studio/</a>
</li>

<li>Python Language Server<br />
<a href="https://github.com/palantir/python-language-server">https://github.com/palantir/python-language-server</a>
</li>

<li>Jedi - an awesome autocompletion/static analysis library for Python<br />
<a href="https://github.com/davidhalter/jedi">https://github.com/davidhalter/jedi</a>
</li>

<li>What is lsp<br />
<a href="https://www.reddit.com/r/vim/comments/7lnhrt/which_lsp_plugin_should_i_use/">https://www.reddit.com/r/vim/comments/7lnhrt/which_lsp_plugin_should_i_use/</a>
</li>

<li>Vim-lsp<br />
<a href="https://github.com/prabirshrestha/vim-lsp">https://github.com/prabirshrestha/vim-lsp</a>
</li>

<li>Using LSP &amp; clangd in Vim<br />
<a href="https://jonasdevlieghere.com/vim-lsp-clangd/">https://jonasdevlieghere.com/vim-lsp-clangd/</a>
</li>

<li>Seriál Textový editor Vim jako IDE<br />
<a href="https://www.root.cz/serialy/textovy-editor-vim-jako-ide/">https://www.root.cz/serialy/textovy-editor-vim-jako-ide/</a>
</li>

<li>Seriál VIM na plný výkon<br />
<a href="https://www.root.cz/serialy/vim-na-plny-vykon/">https://www.root.cz/serialy/vim-na-plny-vykon/</a>
</li>

<li>What about a Common Debug Protocol?<br />
<a href="https://kichwacoders.com/2017/07/28/what-about-a-common-debug-protocol/">https://kichwacoders.com/2017/07/28/what-about-a-common-debug-protocol/</a>
</li>

<li>Example - Debug Adapter<br />
<a href="https://code.visualstudio.com/docs/extensions/example-debuggers">https://code.visualstudio.com/docs/extensions/example-debuggers</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

