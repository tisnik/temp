<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textový editor Vim 8 - dokončení popisu novinek ve skriptovacím engine</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textový editor Vim 8 - dokončení popisu novinek ve skriptovacím engine</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí a současně i poslední části článku o novinkách, které můžeme nalézt v&nbsp;osmé verzi populárního textového editoru Vim, dokončíme popis změn a rozšíření provedených ve skriptovacím engine Vimu a tedy i v&nbsp;jeho skriptovacím jazyku nazvaném VimScript. Jedná se především o podporu práce s&nbsp;formátem JSON, práci s&nbsp;takzvanými kanály (channels) a úlohami (jobs).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Textový editor Vim 8 - dokončení popisu novinek ve skriptovacím engine</a></p>
<p><a href="#k02">2. Práce s&nbsp;datovým formátem JSON</a></p>
<p><a href="#k03">3. Demonstrační příklady: použití funkcí pro práci s&nbsp;formátem JSON</a></p>
<p><a href="#k04">4. Převody hodnot mezi VimScriptem a formátem JSON</a></p>
<p><a href="#k05">5. Použití seznamů (polí, vektorů)</a></p>
<p><a href="#k06">6. Použití slovníků (hashů, asociativních polí)</a></p>
<p><a href="#k07">7. Speciální hodnoty pro reprezentaci nekonečna a NaN při použití typu Float</a></p>
<p><a href="#k08">8. Speciální hodnoty určené pro reprezentaci true, false a null ve formátu JSON</a></p>
<p><a href="#k09">9. Kanály (channels)</a></p>
<p><a href="#k10">10. Vytvoření kanálu a přenos dat</a></p>
<p><a href="#k11">11. Demonstrační plugin</a></p>
<p><a href="#k12">12. Úlohy (jobs)</a></p>
<p><a href="#k13">13. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Textový editor Vim 8 - dokončení popisu novinek ve skriptovacím engine</h2>

<p>Ve <a href="https://mojefedora.cz/textovy-editor-vim-8-zmeny-ve-skriptovacim-engine-vimu/">druhé části</a> článku o novinkách, které nalezneme v&nbsp;osmé verzi populárního textového editoru Vim, jsme se seznámili s&nbsp;některými změnami provedenými ve skriptovacím engine Vimu. S&nbsp;těmito změnami a vylepšeními se sice v&nbsp;naprosté většině případů přímo setkají pouze vývojáři pluginů, ovšem těžit z&nbsp;nich (alespoň nepřímo) mohou i všichni ostatní uživatelé textového editoru Vim, protože implementované změny a rozšíření (anonymní funkce, časovače, unikátní čísla oken, asynchronní spouštění programového kódu atd.) umožňují tvorbu složitějších pluginů pracujících asynchronně s&nbsp;operacemi prováděnými uživatelem. Připomeňme si, že minule byly popsány následující změny a vylepšení:</p>

<ol>
<li><a href="https://mojefedora.cz/textovy-editor-vim-8-zmeny-ve-skriptovacim-engine-vimu/#k02">Podpora pro použití unikátních čísel (identifikátorů) oken</a>.</li>
<li><a href="https://mojefedora.cz/textovy-editor-vim-8-zmeny-ve-skriptovacim-engine-vimu/#k05">Anonymní funkce a uzávěry (closures) ve VimScriptu</a>.</li>
<li><a href="https://mojefedora.cz/textovy-editor-vim-8-zmeny-ve-skriptovacim-engine-vimu/#k06">Reference na funkce</a> (to sice ve skutečnosti není úplná novinka, ale úzce souvisí s&nbsp;předchozím bodem).</li>
<li><a href="https://mojefedora.cz/textovy-editor-vim-8-zmeny-ve-skriptovacim-engine-vimu/#k11">Časovače a s&nbsp;nimi související asynchronně spouštěný kód</a>.</li>
</ol>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/01-1.png"><img class="alignnone size-thumbnail wp-image-8295" src="https://mojefedora.cz/wp-content/uploads/2017/01/01-1-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 1: Všechny demonstrační příklady budou funkční ve Vimu 8. Verzi Vimu zjistíte snadno &ndash; pokud se při spouštění tohoto textového editoru neotevře žádný soubor, zobrazí se toto hlášení.</i></p>

<p>V&nbsp;dnešním článku popis všech změn a rozšíření VimScriptu dokončíme, protože si postupně popíšeme a na demonstračních příkladech ukážeme tyto novinky:</p>

<ol>
<li><a href="#k02">Použití datového formátu JSON</a></li>
<li><a href="#k04">Převody hodnot (jak skalárních, tak i strukturovaných) do JSONu a zpět</a></li>
<li><a href="#k09">Využití takzvaných kanálů (channels)</a></li>
<li><a href="#k12">Tvorba takzvaných úloh (jobs)</a></li>
</ol>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/02-2.png"><img class="alignnone size-thumbnail wp-image-8296" src="https://mojefedora.cz/wp-content/uploads/2017/01/02-2-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 2: Druhá možnost zjištění verze Vimu spočívá ve spuštění příkazu <strong>:ver</strong>.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Práce s&nbsp;datovým formátem JSON</h2>

<p>Na první pohled sice možná ne příliš výraznou, ale o to důležitější a užitečnější novinkou, je přidání čtyř nových funkcí do skriptovacího engine Vimu. Tyto čtyři funkce slouží pro převod datových struktur VimScriptu do JSON formátu a zpět. Proč je vlastně tato novinka tak důležitá? Souvisí totiž s&nbsp;další novou technologií, konkrétně s&nbsp;úlohami (<i>jobs</i>) a kanály (<i>channels</i>). Úlohy umožňují přesně definovaným způsobem vytvářet pluginy (i externí pluginy) s&nbsp;tím, že tyto pluginy mohou běžet asynchronně, tj.&nbsp;částečně nezávisle na samotném Vimu. Důležité je, že pluginy s&nbsp;Vimem komunikují právě přes JSON formát, což je pěkně navržené řešení, protože <a href="http://json.org/">JSON</a> je dnes podporovaný v&nbsp;prakticky všech relevantních programovacích jazycích, v&nbsp;nichž se externí pluginy většinou píšou (typicky se jedná o Python, ale lze použít i jazyk Lua apod.).</p>

<p>Skriptovací engine Vimu nabízí programátorům dvě funkce určené pro převod datových struktur do formátu JSON (<i>encode</i>) a dvě funkce určené pro parsování JSON dat do interních struktur VimScriptu (<i>decode</i>). Dvě varianty jsou implementovány z&nbsp;toho důvodu, že někdy je zapotřebí, aby byly klíče objektů (či slovníků) reprezentovány řetězci a jinde se může jednat o identifikátory bez uvozovek (záleží na konkrétní situaci):</p>

<table>
<tr><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td><strong>json_encode(výraz)</strong></td><td>převod výrazu do JSON formátu, který se vrátí ve formě řetězce</td></tr>
<tr><td><strong>json_decode(řetězec)</strong></td><td>opak předchozí funkce, parsování řetězce s&nbsp;daty uloženými v&nbsp;JSON formátu do interních datových struktur VimScriptu</td></tr>
<tr><td><strong>js_encode(výraz)</strong></td><td>podobné funkci <strong>json_encode()</strong>, ovšem klíče nejsou umístěny v&nbsp;uvozovkách</td></tr>
<tr><td><strong>js_decode(řetězec)</strong></td><td>podobné funkci <strong>json_decode()</strong>, ovšem při parsingu se nevyžaduje, aby byly klíče umístěny v&nbsp;uvozovkách</td></tr>
</table>

<p>Poznámka: převod do JSON formátu se někdy nazývá <i>serializace</i>, zpětný převod pak pochopitelně <i>deserializace</i>.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/03-2.png"><img class="alignnone size-thumbnail wp-image-8297" src="https://mojefedora.cz/wp-content/uploads/2017/01/03-2-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 3: Nápověda k&nbsp;funkcím <strong>js_decode()</strong> a <strong>js_encode()</strong>.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Demonstrační příklady: použití funkcí pro práci s&nbsp;formátem JSON</h2>

<p>Chování výše popsaných funkcí si můžeme velmi snadno otestovat. Pro jednoduchost si nejprve ukážeme, jakým způsobem se do formátu JSON (a zpět) převádí skalární datové typy, tj.&nbsp;zejména numerické hodnoty a řetězce. První příklad používá funkci <strong>json_encode()</strong>:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #8 - usage of json_encode()
" function for scalar values.
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

let integerNumber = 42
echo json_encode(integerNumber)

let realNumber = 3.0/2
echo json_encode(realNumber)

let booleanValueTrue = 1==1
echo json_encode(booleanValueTrue)

let booleanValueFalse = 1==2
echo json_encode(booleanValueFalse)

let greetings = "VimPerfect"
echo json_encode(greetings)
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/04-2.png"><img class="alignnone size-thumbnail wp-image-8298" src="https://mojefedora.cz/wp-content/uploads/2017/01/04-2-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 4: Výsledek po spuštění demonstračního příkladu <strong>json_encode_scalars.vim</strong>. Povšimněte si především toho, že výsledek výrazů 1==1 (pravda) a 1==2 (nepravda) se převede na celé číslo 0 či 1. Pokud skutečně budeme do JSON formátu zapisovat pravdivostní hodnoty "true" a "false", je nutné na straně VimScriptu použít speciální hodnoty zmíněné v&nbsp;osmé kapitole.</i></p>

<p>V&nbsp;případě použití funkce <strong>js_encode()</strong> bude výsledek totožný, protože chování této funkce se odlišuje především při práci se slovníky (dict) nazývanými také asociativní pole či objekty:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #9 - usage of js_encode()
" function for scalar values.
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

let integerNumber = 42
echo js_encode(integerNumber)

let realNumber = 3.0/2
echo js_encode(realNumber)

let booleanValueTrue = 1==1
echo js_encode(booleanValueTrue)

let booleanValueFalse = 1==2
echo js_encode(booleanValueFalse)

let greetings = "VimPerfect"
echo js_encode(greetings)
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/05-2.png"><img class="alignnone size-thumbnail wp-image-8299" src="https://mojefedora.cz/wp-content/uploads/2017/01/05-2-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 5: Výsledek po spuštění demonstračního příkladu <strong>js_encode_scalars.vim</strong>.</i></p>

<p>Ve chvíli, kdy se nám nějakým způsobem podaří získat textový řetězec obsahující data v&nbsp;JSON formátu (může se jednat o obsah souboru, data přečtená z&nbsp;kanálu atd.), je parsing takového řetězce snadný. Lze použít funkci <strong>json_decode()</strong> či <strong>js_decode()</strong>. Podívejme se nejprve na výsledek použití první z&nbsp;těchto funkcí:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #10 - usage of json_decode()
" function for scalar values.
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

let integerNumber = 42
let jsonValue = json_encode(integerNumber)
echo json_decode(jsonValue)

let realNumber = 3.0/2
let jsonValue = json_encode(realNumber)
echo json_decode(jsonValue)

let booleanValueTrue = 1==1
let jsonValue = json_encode(booleanValueTrue)
echo json_decode(jsonValue)

let booleanValueFalse = 1==2
let jsonValue = json_encode(booleanValueFalse)
echo json_decode(jsonValue)

let greetings = "VimPerfect"
let jsonValue = json_encode(greetings)
echo json_decode(jsonValue)
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/06-2.png"><img class="alignnone size-thumbnail wp-image-8300" src="https://mojefedora.cz/wp-content/uploads/2017/01/06-2-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 6: Výsledek po spuštění demonstračního příkladu <strong>json_decode_scalars.vim</strong>.</i></p>

<p>Použití funkce <strong>js_decode()</strong> je shodné s&nbsp;použitím výše zmíněné funkce <strong>json_decode()</strong>:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #11 - usage of js_decode()
" function for scalar values.
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

let integerNumber = 42
let jsonValue = json_encode(integerNumber)
echo js_decode(jsonValue)

let realNumber = 3.0/2
let jsonValue = json_encode(realNumber)
echo js_decode(jsonValue)

let booleanValueTrue = 1==1
let jsonValue = json_encode(booleanValueTrue)
echo js_decode(jsonValue)

let booleanValueFalse = 1==2
let jsonValue = json_encode(booleanValueFalse)
echo js_decode(jsonValue)

let greetings = "VimPerfect"
let jsonValue = json_encode(greetings)
echo js_decode(jsonValue)
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/07-2.png"><img class="alignnone size-thumbnail wp-image-8301" src="https://mojefedora.cz/wp-content/uploads/2017/01/07-2-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 7: Výsledek po spuštění demonstračního příkladu <strong>js_decode_scalars.vim</strong>.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Převody hodnot mezi VimScriptem a formátem JSON</h2>

<p>Ve VimScriptu existuje celkem deset datových typů, přičemž pět z&nbsp;těchto typů do jisté míry koresponduje s&nbsp;typy používanými ve formátu JSON (Number, Float, String, List a Dictionary) a dva další typy (Boolean, None) lze taktéž do formátu JSON převést, pokud se ovšem dodrží určitá pravidla. Výše zmíněné čtyři funkce <strong>json_encode(), json_decode(), js_encode()</strong> a <strong>js_decode()</strong> provádí převody mezi jednotlivými typy (resp.&nbsp;mezi hodnotami různých typů) zcela automaticky, ovšem existuje několik potenciálně problematických výjimek, kterými se budeme zabývat v&nbsp;navazujících kapitolách. V&nbsp;následující tabulce jsou vypsány korespondující datové typy. Povšimněte si, že v&nbsp;JSON formátu se nerozlišuje mezi celými čísly a čísly s&nbsp;plovoucí řádovou čárkou, což do značné míry souvisí s&nbsp;původním návrhem tohoto formátu založeném na JavaScriptu:</p>

<table>
<tr><th>Typ ve VimScriptu</th><th>Převod do JSONu</th></tr>
<tr><td>Number</td><td>celé číslo, výjimky viz <a href="#k07">sedmou kapitolu</a></td></tr>
<tr><td>Float</td><td>číslo s desetinnou čárkou a/nebo exponentem</td></tr>
<tr><td>String</td><td>řetězec umístěný v&nbsp;uvozovkách</td></tr>
<tr><td>List</td><td>pole hodnot, viz <a href="#k05">pátou kapitolu</a></td></tr>
<tr><td>Dictionary</td><td>objekt (asociativní pole), viz <a href="#k06">šestou kapitolu</a></td></tr>
<tr><td>Funcref</td><td>nelze (teoreticky by se jednalo o serializaci kódu)</td></tr>
<tr><td>Boolean</td><td>True/False (viz <a href="#k08">kapitolu číslo 8</a>)</td></tr>
<tr><td>None</td><td>Null (viz <a href="#k08">kapitolu číslo 8</a>)</td></tr>
<tr><td>Job</td><td>nelze</td></tr>
<tr><td>Channel</td><td>nelze</td></tr>
</table>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/08-2.png"><img class="alignnone size-thumbnail wp-image-8302" src="https://mojefedora.cz/wp-content/uploads/2017/01/08-2-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 8: Prakticky vše o datových typech používaných ve VimScriptu se dozvíte po zadání příkazu <strong>:help variables</strong>.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití seznamů (polí, vektorů)</h2>

<p>Převod mezi skalárními typy je ve většině běžných případů triviální, proto se podívejme, jakým způsobem je možné v&nbsp;JSON formátu reprezentovat složený datový typ. Prvním typem, s&nbsp;nímž se setká prakticky každý programátor používající VimScript, je seznam (<i>list</i>), který je ovšem někdy taktéž nazýván vektorem (<i>vector)</i> či polem (<i>array</i>), což ale není zcela přesné. V&nbsp;následujícím příkladu je do JSON formátu převeden seznam čísel, dále seznam řetězců a dvě matice reprezentované seznamem seznamů. Povšimněte si, že ve VimScriptu je nutné při zápisu výrazu či příkazu na více řádků použít zpětné lomítko na začátku (nikoli na konci!) řádku, což je dosti neobvyklé:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #12 - usage of json_encode()
" function for vector (array) values.
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

let vector1 = [1, 2, 3]
echo json_encode(vector1)

let vector2 = ["Hello", "world", "!"]
echo json_encode(vector2)

let matrix1 = [[1,2,3], [4,5,6], [7,8,9]]

echo json_encode(matrix1)

let matrix2 = [[1,2,3],
\             [4,5,6],
\             [7,8,9]]

echo json_encode(matrix2)
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/09-2.png"><img class="alignnone size-thumbnail wp-image-8303" src="https://mojefedora.cz/wp-content/uploads/2017/01/09-2-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 9: Výsledek po spuštění demonstračního příkladu <strong>json_encode_vectors.vim</strong>.</i></p>

<p>Samozřejmě můžeme namísto funkce <strong>json_encode()</strong> použít funkci <strong>js_encode()</strong>, která ovšem vytvoří shodný výsledek (prozatím totiž nepracujeme se slovníky):</p>

<pre>
" ---------------------------------------------
" Vim8 example script #13 - usage of js_encode()
" function for vector (array) values.
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

let vector1 = [1, 2, 3]
echo js_encode(vector1)

let vector2 = ["Hello", "world", "!"]
echo js_encode(vector2)

let matrix1 = [[1,2,3], [4,5,6], [7,8,9]]

echo js_encode(matrix1)

let matrix2 = [[1,2,3],
\             [4,5,6],
\             [7,8,9]]

echo js_encode(matrix2)
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/10-2.png"><img class="alignnone size-thumbnail wp-image-8304" src="https://mojefedora.cz/wp-content/uploads/2017/01/10-2-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 10: Výsledek po spuštění demonstračního příkladu <strong>js_encode_vectors.vim</strong>.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Použití slovníků (hashů, asociativních polí)</h2>

<p>Nejsložitější datovou strukturou, kterou je možné do JSON formátu uložit (serializovat), jsou takzvané slovníky (<i>dictionary, dict</i>), které jsou v&nbsp;jiných programovacích jazycích nazývány hashe či asociativní pole. Právě u slovníků se projeví rozdíl mezi funkcemi <strong>json_encode()</strong> a <strong>js_encode()</strong>, a to konkrétně při serializaci klíčů. Rozdíly jsou shrnuty v&nbsp;tabulce:</p>

<table>
<tr><th>Typ klíče</th><th>json_encode()</th><th>js_encode()</th></tr>
<tr><td>řetězec odpovídající názvu proměnné v JS</td><td>klíč je zapsán do uvozovek</td><td>klíč je zapsán bez uvozovek</td></tr>
<tr><td>jiný řetězec (s mezerou, pomlčkou...)   </td><td>klíč je zapsán do uvozovek</td><td>klíč je zapsán do uvozovek</td></tr>
<tr><td>číslo</td><td>klíč je zapsán do uvozovek</td><td>klíč je zapsán do uvozovek</td></tr>
<tr><td>jiný typ (seznam...)</td><td>nelze použít</td><td>nelze použít</td></tr>
</table>

<p>Název proměnné v&nbsp;JavaScriptu musí začínat písmenem, podtržítkem či znakem dolaru a musí obsahovat čísla, písmena (nikoli jen ASCII, možnosti jsou zde větší), dolary či podtržítka.</p>

<p>V&nbsp;následujícím příkladu je ukázáno, jak je možné do JSON formátu ukládat slovníky, slovníky se seznamy (hodnoty) či naopak seznam slovníků:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #14 - usage of json_encode()
" function for dictionaries.
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

let dict1 = {"first": 1, "second" : 2, "third" : 3}
echo json_encode(dict1)

let dict2 = {1 : "first", 2 : "second", 3 : "third"}
echo json_encode(dict2)

let dict3 = {"first" : [1,2,3], "second" : [4,5,6]}
echo json_encode(dict3)

let vectorOfDicts = [ {"first" : 1, "second" : 2}, {"another" : "dictionary"}]
echo json_encode(vectorOfDicts)
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/11-2.png"><img class="alignnone size-thumbnail wp-image-8305" src="https://mojefedora.cz/wp-content/uploads/2017/01/11-2-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 11: Výsledek po spuštění demonstračního příkladu <strong>json_encode_dict.vim</strong>.</i></p>

<p>Pokud budeme shodné datové struktury serializovat funkcí <strong>js_encode()</strong>, budou se klíče ukládat rozdílným způsobem, ale pouze pro ty řetězce, které odpovídají jménům proměnných v&nbsp;JavaScriptu:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #15 - usage of js_encode()
" function for dictionaries.
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

let dict1 = {"first": 1, "second" : 2, "third" : 3}
echo js_encode(dict1)

let dict2 = {1 : "first", 2 : "second", 3 : "third"}
echo js_encode(dict2)

let dict3 = {"first" : [1,2,3], "second" : [4,5,6]}
echo js_encode(dict3)

let vectorOfDicts = [ {"first" : 1, "second" : 2}, {"another" : "dictionary"}]
echo js_encode(vectorOfDicts)
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/12-2.png"><img class="alignnone size-thumbnail wp-image-8306" src="https://mojefedora.cz/wp-content/uploads/2017/01/12-2-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 12: Výsledek po spuštění demonstračního příkladu <strong>js_encode_dict.vim</strong>.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Speciální hodnoty pro reprezentaci nekonečna a NaN při použití typu Float</h2>

<p>Při ukládání (serializaci) dat do formátu JSON je v&nbsp;některých případech nutné korektně pracovat se speciálními hodnotami podporovanými typem Float (numerické hodnoty s&nbsp;plovoucí řádovou čárkou). Výsledkem některých aritmetických operací totiž může být kladné či záporné nekonečno, které se ve VimScriptu vypíše jako <strong>inf</strong> nebo <strong>-inf</strong>. Dokonce můžeme získat i hodnotu <strong>NaN</strong> (<i>Not a Number</i>), což je například výsledek dělení nuly nulou, výpočtem rozdílu dvou nekonečen, podílem nekonečen atd. Podívejme se nyní na to, jak s&nbsp;těmito speciálními hodnotami pracují funkce pro serializaci do JSON formátu. Předem upozorňuji na problematickou práci se záporným nekonečnem, které se do JSONu ukládá jako nekonečno kladné (!), i když <strong>echo negativeInfinity</strong> dokládá, že interně VimScript tuto hodnotu zpracovává korektně:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #15 - usage of json_encode()
" function for special float values.
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

let positiveInfinity = 1.0/0
let negativeInfinity = -1.0/0
let NaN1 = 0.0/0
let NaN2 = 1 + NaN1
let NaN3 = positiveInfinity - positiveInfinity
let NaN4 = positiveInfinity / positiveInfinity

let originalList = [0, 0.0, 1, 1.0, positiveInfinity, negativeInfinity, NaN1, NaN2, NaN3, NaN4]
let jsonList = json_encode(originalList)
echo jsonList
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/13-2.png"><img class="alignnone size-thumbnail wp-image-8307" src="https://mojefedora.cz/wp-content/uploads/2017/01/13-2-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 13: Výsledek po spuštění demonstračního příkladu <strong>json_encode_float_values.vim</strong>. Povšimněte si, že i původně záporné nekonečno je reprezentováno jako &bdquo;Infinity&ldquo;.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Speciální hodnoty určené pro reprezentaci true, false a null ve formátu JSON</h2>

<p>Mezi další tři speciální hodnoty, s&nbsp;nimiž je v&nbsp;některých případech nutné v&nbsp;JSON formátu pracovat, patří hodnoty <strong>true</strong>, <strong>false</strong> a <strong>null</strong>. Tyto hodnoty je nutné ve VimScriptu explicitně ošetřit, a to zejména z&nbsp;toho důvodu, že interně jsou pravdivostní hodnoty reprezentovány celými čísly: pravda je reprezentována hodnotou 1, nepravda hodnotou 0. To jsme ostatně viděli už v&nbsp;prvním demonstračním příkladu, v&nbsp;němž se výsledky výrazů 1==1 a 1==2 převedly na 1 a 0. Pro reprezentaci &bdquo;skutečných&ldquo; pravdivostních hodnot ve formátu JSON slouží speciální hodnoty <strong>v:true</strong> a <strong>v:false</strong>. Totéž platí i pro <strong>null</strong> (tedy prázdnou hodnotu), kterou je nutné ve VimScriptu zapisovat buď jako <strong>v:null</strong> či jako <strong>v:none</strong>. Vše je patrné z&nbsp;následující dvojice demonstračního příkladu. Povšimněte si toho, že prázdný řetězec není považován za hodnotu <strong>null</strong> (některé starší JSON knihovny právě prázdné řetězce zpracovávaly špatně):</p>

<pre>
" ---------------------------------------------
" Vim8 example script #16 - usage of json_encode()
" function for special values.
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

let originalDictionary = {
\    "true1"  : 1==1,
\    "true2"  : v:true,
\    "false1" : 1==2,
\    "false2" : v:false,
\    "null1"  : v:null,
\    "null2"  : v:none,
\    "emptyString"  : ""
\}

let jsonDictionary = json_encode(originalDictionary)
echo jsonDictionary
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/14-3.png"><img src="https://mojefedora.cz/wp-content/uploads/2017/01/14-3-405x254.png" alt="" width="405" height="254" class="alignnone size-thumbnail wp-image-8310" /></a>
<p><i>Obrázek 14: Výsledek po spuštění demonstračního příkladu <strong>json_encode_special_values.vim</strong>.</i></p>

<pre>
" ---------------------------------------------
" Vim8 example script #17 - usage of js_encode()
" function for special values.
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

let originalDictionary = {
\    "true1"  : 1==1,
\    "true2"  : v:true,
\    "false1" : 1==2,
\    "false2" : v:false,
\    "null1"  : v:null,
\    "null2"  : v:none,
\    "emptyString"  : ""
\}

let jsonDictionary = js_encode(originalDictionary)
echo jsonDictionary
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/15-3.png"><img src="https://mojefedora.cz/wp-content/uploads/2017/01/15-3-405x254.png" alt="" width="405" height="254" class="alignnone size-thumbnail wp-image-8311" /></a>
<p><i>Obrázek 15: Výsledek po spuštění demonstračního příkladu <strong>js_encode_special_values.vim</strong>.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Kanály (channels)</h2>

<p>Zcela novou technologií, s&nbsp;níž se můžeme setkat ve Vimu 8, je koncept takzvaných kanálů (<i>channels</i>). Kanály slouží ke komunikaci mezi Vimem (resp.&nbsp;přesněji řečeno mezi VimScriptem) a externími pluginy, které jsou spuštěny v&nbsp;samostatném procesu. Vim s&nbsp;těmito pluginy komunikuje buď s&nbsp;využitím socketů nebo pipe. Pro přenos dat se typicky používá formát JSON a proto jsou tak užitečné ty funkce, které jsme si popsali v&nbsp;předchozích kapitolách. Ve skutečnosti se mohou používat čtyři typy zpráv: RAW, NL, JSON a JS:</p>

<table>
<tr><th>Typ zprávy</th><th>Význam</th></tr>
<tr><td>RAW</td><td>obecný formát, s&nbsp;nímž Vim nijak speciálně nenakládá, pouze zprávu pošle či přijme</td></tr>
<tr><td>NL</td><td>každá textová zpráva je ukončena znakem pro konec řádku (NL)</td></tr>
<tr><td>JSON</td><td>formát JSON</td></tr>
<tr><td>JS</td><td>formát JSON s&nbsp;klíči odpovídajícími JavaScriptu</td></tr>
</table>

<p>Samotné pluginy mohou pracovat ve čtyřech režimech:</p>

<table>
<tr><th>Režim</th><th>Připojení</th><th>Popis</th></tr>
<tr><td>démon</td><td>socket</td><td>proces, ke kterému se může připojit více instancí Vimu</td></tr>
<tr><td>úloha (job)</td><td>socket nebo pipe</td><td>proces, ke kterému se připojuje jedna instance Vimu (ten ho typicky i spustí)</td></tr>
<tr><td>krátká úloha</td><td>socket nebo pipe</td><td>dtto jako předchozí, typicky však proces neběží po celou dobu existence Vimu</td></tr>
<tr><td>filtr</td><td>pipe</td><td>spouští se synchronně, Vim čeká na výsledek operace</td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vytvoření kanálu a přenos dat</h2>

<p>Nový kanál určený pro komunikaci s&nbsp;démonem či úlohou (viz tabulka v&nbsp;předchozí kapitole), se vytváří funkcí <strong>ch_open()</strong>. Například pro démona lokálně běžícího na stejném počítači a poslouchajícího na portu 1234 se použije tento příkaz:</p>

<pre>
let channel1 = ch_open("localhost:1234")
</pre>

<p>Jakmile je kanál vytvořen, lze démonu poslat data funkcí <strong>ch_evalexpr(kanál, data)</strong>:</p>

<pre>
ch_evalexpr(channel1, "Hello daemon")
</pre>

<p>Pokud démon vrátí nějakou zprávu, je tato zpráva vrácena jako výsledek funkce <strong>ch_evalexpr()</strong>:</p>

<pre>
let response = ch_evalexpr(channel1, "Hello daemon")
echo response
</pre>

<p>Na konci skriptu je nutné kanál zavřít a uvolnit tak příslušný socket:</p>

<pre>
ch_close(channel1)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Demonstrační plugin</h2>

<p>Při instalaci Vimu (či při jeho lokálním překladu) se mj.&nbsp;nainstaluje i demonstrační server, který můžeme použít pro otestování funkce kanálů. Tento server je dostupný v&nbsp;adresáři, který se vrátí zápisem <strong>:echo $VIMRUNTIME</strong>. Typicky jde o adresář <strong>/usr/share/vim/vim80</strong> či <strong>/usr/local/share/vim/vim80/</strong>. V&nbsp;tomto adresáři nalezneme podadresář nazvaný <strong>tools</strong> se souborem <strong>demoserver.py</strong>. Tento soubor spusťte v&nbsp;samostatném terminálu, aby byly vidět jeho zprávy:</p>

<pre>
/usr/local/share/vim/vim80/tools/demoserver.py 
Server loop running in thread:  Thread-1
Listening on port 8765
</pre>

<p>Následně otevřeme propojení se serverem (démonem), a to přímo ve Vimu:</p>

<pre>
:let channel1=ch_open("localhost:8765")
</pre>

<p>Na straně serveru by se měla objevit zpráva:</p>

<pre>
=== socket opened ===
</pre>

<p>Nyní již můžeme serveru poslat nějaká data:</p>

<pre>
:call ch_evalexpr(channel1, "Hello daemon")
</pre>

<p>Server zprávu přijme a příslušně odpoví:</p>

<pre>
received: [1,"Hello daemon"]

sending [1, "what?"]
</pre>

<p>Nyní můžeme kanál uzavřít (ve skutečnosti však může být otevřen libovolně dlouhou dobu, pokud je to potřeba):</p>

<pre>
:call ch_close(channel1)
</pre>

<p>Na straně serveru by se měla objevit zpráva:</p>

<pre>
=== socket closed ===
</pre>

<p>Namísto tohoto jednoduchého serveru si můžeme představit mnohem složitější program, například jádro překladače, nástroje pro refaktoring kódu atd.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Úlohy (jobs)</h2>

<p>Pro spuštění pluginů v&nbsp;samostatných procesech se používá nová funkce nazvaná <strong>job_start()</strong>. Tato funkce má jeden nepovinný parametr, kterým je příkaz pro spuštění (například cesta ke skriptu atd.). Nepovinným parametrem <i>options</i> je možné funkci <strong>job_start()</strong> předat způsob spuštění úlohy, například zda se mají pro komunikaci použít kanály či pipy, jak dlouho se má čekat na dokončení volání (timeout) atd. Jakmile je úloha spuštěna, lze její stav zjistit zavoláním funkce <strong>job_status()</strong> vracející řetězec &bdquo;run&ldquo;, &bdquo;fail&ldquo; (nepodařil se start) nebo &bdquo;dead&ldquo; (start se podařil, nicméně úloha již skončila). Explicitní ukončení úlohy zajišťuje funkce pojmenovaná jednoduše <strong>job_stop()</strong>, které lze navíc v&nbsp;Linuxu předat signál pro ukončení: &bdquo;term&ldquo;, &bdquo;hup&ldquo;, &bdquo;quit&ldquo; apod. A to nejdůležitější na konec: pokud se úloha spustila, je možné získat komunikační kanál funkcí <strong>job_channel()</strong> a následně použít techniku popsanou v&nbsp;předchozích třech kapitolách.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny v&nbsp;předchozích kapitolách popsané demonstrační skripty určené pro textový editor Vim verze 8 byly uloženy do Git repositáře dostupného na adrese <a href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>. V&nbsp;následující tabulce naleznete na jednotlivé skripty přímé odkazy:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>json_encode_scalars.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/json_encode_scalars.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/json_encode_scalars.vim</a></td></tr>
<tr><td>js_encode_scalars.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/js_encode_scalars.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/js_encode_scalars.vim</a></td></tr>
<tr><td>json_decode_scalars.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/json_decode_scalars.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/json_decode_scalars.vim</a></td></tr>
<tr><td>js_decode_scalars.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/js_decode_scalars.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/js_decode_scalars.vim</a></td></tr>
<tr><td>json_encode_vectors.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/json_encode_vectors.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/json_encode_vectors.vim</a></td></tr>
<tr><td>js_encode_vectors.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/js_encode_vectors.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/js_encode_vectors.vim</a></td></tr>
<tr><td>json_encode_dict.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/json_encode_dict.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/json_encode_dict.vim</a></td></tr>
<tr><td>js_encode_dict.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/js_encode_dict.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/js_encode_dict.vim</a></td></tr>
<tr><td>json_encode_float_values.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/json_encode_float_values.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/json_encode_float_values.vim</a></td></tr>
<tr><td>json_encode_special_values.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/json_encode_special_values.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/json_encode_special_values.vim</a></td></tr>
<tr><td>js_encode_special_values.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/js_encode_special_values.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/js_encode_special_values.vim</a></td></tr>
</table>

<p>Poznámka: ani jeden z&nbsp;těchto skriptů nebude funkční v&nbsp;předchozích verzích Vimu!</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Introducing JSON<br />
<a href="http://json.org/">http://json.org/</a>
</li>

<li>NULL v&nbsp;JSON formátu<br />
<a href="http://stackoverflow.com/questions/21120999/representing-null-in-json#21122019">http://stackoverflow.com/questions/21120999/representing-null-in-json#21122019</a>
</li>

<li>Vim &ndash; the editor<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Vim 8.0 is released<br />
<a href="https://laravel-news.com/2016/09/vim-8-0-is-released/">https://laravel-news.com/2016/09/vim-8-0-is-released/</a>
</li>

<li>Vim: So long Pathogen, hello native package loading<br />
<a href="https://shapeshed.com/vim-packages/">https://shapeshed.com/vim-packages/</a>
</li>

<li>:smile command was not backported! #5116<br />
<a href="https://github.com/neovim/neovim/issues/5116">https://github.com/neovim/neovim/issues/5116</a>
</li>

<li>Makejob<br />
<a href="http://www.vim.org/scripts/script.php?script_id=5479">http://www.vim.org/scripts/script.php?script_id=5479</a>
</li>

<li>Články o Vimu na Root.cz:<br />
<a href="http://www.root.cz/n/vim/clanky/">http://www.root.cz/n/vim/clanky/</a>
</li>

<li>Vim sedm - první část<br />
<a href="http://www.root.cz/clanky/vim-sedm-prvni-cast/">http://www.root.cz/clanky/vim-sedm-prvni-cast/</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>History of the Text Editor<br />
<a href="http://vanstee.me/history-of-the-text-editor.html">http://vanstee.me/history-of-the-text-editor.html</a>
</li>

<li>Interview with Bill Joy<br />
<a href="http://web.cecs.pdx.edu/~kirkenda/joy84.html">http://web.cecs.pdx.edu/~kirkenda/joy84.html</a>
</li>

<li>vi Editor Commands<br />
<a href="http://www.cs.rit.edu/~cslab/vi.html#A1.4">http://www.cs.rit.edu/~cslab/vi.html#A1.4</a>
</li>

<li>vi Manual<br />
<a href="http://www.cs.fsu.edu/general/vimanual.html">http://www.cs.fsu.edu/general/vimanual.html</a>
</li>

<li>Mastering the Vi Editor<br />
<a href="http://www.susnet.uk/mastering-the-vi-editor">http://www.susnet.uk/mastering-the-vi-editor</a>
</li>

<li>Vim as a Python IDE, or Python IDE as Vim<br />
<a href="http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/">http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/</a>
</li>

<li>Vi Improved<br />
<a href="https://wiki.python.org/moin/Vim">https://wiki.python.org/moin/Vim</a>
</li>

<li>Popis skriptu Vim Pathogen<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2332">http://www.vim.org/scripts/script.php?script_id=2332</a>
</li>

<li>Poslední­verze skriptu Vim Pathogen<br />
<a href="https://tpo.pe/pathogen.vim">https://tpo.pe/pathogen.vim</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://vimawesome.com/">http://vimawesome.com/</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://www.vim.org/scripts/script_search_results.php?order_by=rating">http://www.vim.org/scripts/script_search_results.php?order_by=rating</a>
</li>

<li>Building Vim<br />
<a href="http://vim.wikia.com/wiki/Building_Vim">http://vim.wikia.com/wiki/Building_Vim</a>
</li>

<li>Vim plugins for developers<br />
<a href="http://www.linuxtoday.com/upload/vim-plugins-for-developers-140619094010.html">http://www.linuxtoday.com/upload/vim-plugins-for-developers-140619094010.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

