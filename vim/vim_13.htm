<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textový editor Vim jako IDE (14.část: automatické formátování textů)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textový editor Vim jako IDE (14.část: automatické formátování textů)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;dnešní části seriálu o různých variantách využití textového editoru Vim nejprve dokončíme popis způsobů, jakými je možné zobrazovat důležité informace na pravítku a na stavovém řádku. Poté se zaměříme na velmi užitečnou oblast &ndash; ukážeme si, jak lze Vim nakonfigurovat do režimu, v&nbsp;němž se chová jako textový procesor umožňující automatické či poloautomatické formátování textů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Malé zopakování z&nbsp;minula: zobrazení informací na pravítku (ruler)</a></p>
<p><a href="#k02">2. Specifikace formátu stavového řádku (status line)</a></p>
<p><a href="#k03">3. Zjednodušení zápisu dlouhého formátovacího řetězce při konfiguraci pravítka</a></p>
<p><a href="#k04">4. Vim ve funkci textového procesoru</a></p>
<p><a href="#k05">5. Konfigurační parametry ovlivňující formátování a způsob zobrazení textů</a></p>
<p><a href="#k06">6. Vizuální zalamování textů</a></p>
<p><a href="#k07">7. Využití uživatelských funkcí psaných ve VimScriptu při zobrazení informací na pravítku</a></p>
<p><a href="#k08">8. Automatické přeformátování odstavců během úprav textů</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Malé zopakování z&nbsp;minula: zobrazení informací na pravítku (ruler)</h2>

<p><a href="http://www.root.cz/clanky/textovy-editor-vim-jako-ide-12-cast-konfigurace-pravitka-a-stavoveho-radku/">V&nbsp;předchozí části</a> seriálu o textovém editoru <i>Vim</i>
jsme si řekli, pomocí jakých konfiguračních voleb je možné měnit způsob
zobrazení pravítka (<i>ruler</i>) i stavového řádku (<i>status line</i>).
Připomeňme si, že zobrazení pravítka je nejprve nutné povolit pomocí
příkazu:</p>

<pre>
:set ruler
</pre>

<p>Formát pravítka se nastavuje pomocí konfiguračního řetězce přiřazeného do
konfiguračního parametru <strong>rulerformat</strong>, zatímco u stavového
řádku se jedná o konfigurační parametr <strong>statusline</strong>. Způsob
zobrazení stavového řádku pro poslední (nejspodnější) okno se řídí pomocí volby
<strong>laststatus</strong>. Také jsme si již řekli, jaké speciální (řídicí)
znaky se mohou objevit v&nbsp;řetězci předávaného do parametru
<strong>rulerformat</strong> a <strong>statusline</strong>: některé řídicí
znaky jsou nahrazeny jménem editovaného souboru, jeho typem, číslem textového
řádku, na němž se nachází kurzor, celkovým počtem řádků v&nbsp;souboru,
příznakem modifikace souboru atd.</p>

<img src="http://i.iinfo.cz/images/189/vim1301.png" width="636" height="420" alt="&#160;" />
<p><i>Obrázek 1: Zdrojový kód prvního demonstračního skriptu se zvýrazněnou
syntaxí.</i></p>

<p>Dnešní první demonstrační skript, jehož zdrojový soubor je vypsaný pod tímto
odstavcem, ukazuje, jak je možné na pravítku zobrazit základní informace o
editovaném souboru, přičemž se tyto informace pro lepší čitelnost odlišují
různou barvou textu:</p>

<pre>
"=============================================================================
" Vim script support file
" Maintainer:  Pavel Tisnovsky
" Last Change: 2011 Sep 27
"-----------------------------------------------------------------------------
" Skript, který může být součástí konfiguračního souboru .vimrc,
" popř. ho je možné z tohoto souboru načíst s využitím příkazu :source či :so
"
" Ukázka nastavení formátu pravítka
"=============================================================================
&nbsp;
" nastavení nových kategorií stylů textu použitých na pravítku
highlight RulerFileName guifg=#cc8080 ctermfg=red
highlight RulerColumn   guifg=#cccc80 ctermfg=yellow
highlight RulerLine     guifg=#80cc80 ctermfg=green
highlight RulerOffset   guifg=#8080cc ctermfg=blue
highlight RulerASCII    guifg=#808000 ctermfg=brown
&nbsp;
" povolení zobrazení pravítka (pro jistotu)
set ruler
&nbsp;
" nastavení formátu pravítka (konfigurační parametr "rulerformat")
set rulerformat=%50(%#RulerFileName#%t\ \ %#RulerLine#L:%l/%L\ \ %#RulerColumn#C:%-4c\ %#RulerOffset#%5o\ \ %#RulerASCII#[%03b=0x%02B]%)
</pre>

<img src="http://i.iinfo.cz/images/311/vim1302.png" width="469" height="23" alt="&#160;" />
<p><i>Obrázek 2: Pohled na informace zobrazené na pravítku po spuštění prvního
demonstračního skriptu.</i></p>



<p><a name="k02"></a></p>
<h2>2. Specifikace formátu stavového řádku (status line)</h2>

<p>Podobným způsobem, jakým jsme v&nbsp;předchozím demonstračním skriptu
změnili formát pravítka, je samozřejmě možné změnit i formát stavového řádku,
což je ukázáno na druhém příkladu. Povšimněte si dvou malých rozdílů &ndash;
pro zarovnání jména souboru na levý okraj stavového řádku a všech dalších
informací na okraj pravý se používá řídicí znak =, který je uvozený, stejně
jako ostatní řídicí znaky, pomocí procenta. Díky tomu se navíc nemusí zvětšovat
šířka zobrazovaných informací, protože stavový řádek je v&nbsp;tomto případě
natažen na maximální možnou šířku odpovídající šířce otevřeného okna.</p>

<img src="http://i.iinfo.cz/images/320/vim1303.png" width="644" height="404" alt="&#160;" />
<p><i>Obrázek 3: Zdrojový kód druhého demonstračního skriptu se zvýrazněnou
syntaxí.</i></p>

<p>Následuje výpis zdrojového kódu druhého demonstračního skriptu:</p>

<pre>
"=============================================================================
" Vim script support file
" Maintainer:  Pavel Tisnovsky
" Last Change: 2011 Sep 27
"-----------------------------------------------------------------------------
" Skript, který může být součástí konfiguračního souboru .vimrc,
" popř. ho je možné z tohoto souboru načíst s využitím příkazu :source či :so
"
" Ukázka nastavení formátu stavového řádku
"=============================================================================
&nbsp;
" nastavení nových kategorií stylů textu použitých na pravítku
highlight StatusLine         guibg=#444444 guifg=#cc8080 ctermfg=red
highlight StatusLineFileName guibg=#444444 guifg=#cc8080 ctermfg=red
highlight StatusLineColumn   guibg=#444444 guifg=#cccc80 ctermfg=yellow
highlight StatusLineLine     guibg=#444444 guifg=#80cc80 ctermfg=green
highlight StatusLineOffset   guibg=#444444 guifg=#8080cc ctermfg=blue
highlight StatusLineASCII    guibg=#444444 guifg=#808000 ctermfg=brown
&nbsp;
" nastavení formátu statového řádku (konfigurační parametr "statusline")
set statusline=%#StatusLineFileName#%t%=%#StatusLineLine#L:%l/%L\ \ %#StatusLineColumn#C:%-4c\ %#StatusLineOffset#%5o\ \ %#StatusLineASCII#[%03b=0x%02B]
</pre>

<p>V&nbsp;případě, že formát stavového řádku není nastaven (parametr
<strong>statusline</strong> obsahuje prázdný řetězec), zkopíruje se způsob jeho
nastavení z&nbsp;formátu pravítka, což nám však nemusí ve všech případech
vyhovovat.</p>

<img src="http://i.iinfo.cz/images/206/vim1304.png" width="644" height="404" alt="&#160;" />
<p><i>Obrázek 4: Pohled na informace zobrazené na třech stavových řádcích (pro
trojici podoken) po spuštění druhého demonstračního skriptu.</i></p>



<p><a name="k03"></a></p>
<h2>3. Zjednodušení zápisu dlouhého formátovacího řetězce při konfiguraci pravítka</h2>

<p>Vzhledem k&nbsp;tomu, že formátovací řetězec použitý pro konfiguraci
pravítka a příkazového řádku je ve většině případů velmi dlouhý a nepřehledný,
může být poměrně obtížné v&nbsp;něm hledat chyby, popř.&nbsp;do něj doplňovat
další informace. Ovšem s&nbsp;našimi znalostmi <i>VimScriptu</i> je celkem
snadné celý formátovací řetězec složit z&nbsp;dílčích řetězců do pomocné
proměnné, například s&nbsp;využitím operátoru .= (konkatenace ke stávajícímu
řetězci). Na závěr se pomocná proměnná uloží do konfiguračního parametru
<strong>rulerformat</strong>, protože již <a href="http://www.root.cz/clanky/textovy-editor-vim-jako-ide-6-cast-vim-script/">v&nbsp;šesté části</a>
tohoto seriálu jsme si řekli, že ke konfiguračním parametrům je možné ze
skriptů přistupovat pomocí prefixu &amp;:</p>

<pre>
"=============================================================================
" Vim script support file
" Maintainer: Pavel Tisnovsky
" Last Change: 2011 Sep 27
"-----------------------------------------------------------------------------
" Skript, který může být součástí konfiguračního souboru .vimrc, popř.
" ho je možné z tohoto souboru načíst s využitím příkazu :source
"
" Ukázka nastavení formátu pravítka
"=============================================================================
&nbsp;
&nbsp;
" nastavení nových kategorií stylů textu použitých na pravítku
highlight RulerFileName guifg=#cc8080 ctermfg=red
highlight RulerColumn   guifg=#cccc80 ctermfg=yellow
highlight RulerLine     guifg=#80cc80 ctermfg=green
highlight RulerOffset   guifg=#8080cc ctermfg=blue
highlight RulerASCII    guifg=#808000 ctermfg=brown
&nbsp;
" povolení zobrazení pravítka (pro jistotu)
set ruler
&nbsp;
" proměnná obsahující formát pravítka
let rulerformat="%50("                            " šířka pravítka
let rulerformat.="%#RulerFileName#%t\ \ "         " jméno souboru
let rulerformat.="%#RulerLine#L:%l/%L\ \ "        " číslo řádku a počet řádků
let rulerformat.="%#RulerColumn#C:%-4c\ "         " číslo sloupce,
                                                  " formátováno na čtyři znaky, zarovnání doleva
let rulerformat.="%#RulerOffset#%5o\ \ "          " offset od začátku souboru,
                                                  " formátován na pět znaků zarovnání doprava
let rulerformat.="%#RulerASCII#[%03b=0x%02B]\%)"  " ASCII hodnota znaku + to stejné v hexa
&nbsp;
" nastavení formátu pravítka (konfigurační parametr "rulerformat")
let &amp;rulerformat=rulerformat
&nbsp;
" zrušení pomocné proměnné
unlet rulerformat
&nbsp;
"=============================================================================
</pre>

<a href="http://i.iinfo.cz/images/188/vim1305.png"><img src="http://i.iinfo.cz/images/188/vim1305-prev.png" width="324" height="270" alt="&#160;" /></a>
<p><i>Obrázek 5: Zdrojový kód třetího demonstračního skriptu se zvýrazněnou
syntaxí.</i></p>

<p>Výše uvedený skript lze samozřejmě doplnit i o specifikaci formátu stavového
řádku, kde je důležité správně nastavit pozadí položek zde zobrazených (aby byl
celý stavový řádek zobrazený se stejným pozadím):</p>

<pre>
highlight StatusLineFileName guibg=#444444 guifg=#cc8080 ctermfg=red
highlight StatusLineFileName guibg=#444444 guifg=#cc8080 ctermfg=red
highlight StatusLineColumn   guibg=#444444 guifg=#cccc80 ctermfg=yellow
highlight StatusLineLine     guibg=#444444 guifg=#80cc80 ctermfg=green
highlight StatusLineOffset   guibg=#444444 guifg=#8080cc ctermfg=blue
highlight StatusLineASCII    guibg=#444444 guifg=#808000 ctermfg=brown
&nbsp;
" proměnná obsahující formát stavového řádku
let statusline="%&lt;"                                   " šířka pravítka
let statusline.="%#StatusLineFileName#%t\ \ %="       " jméno souboru
let statusline.="%#StatusLineLine#L:%l/%L\ \ "        " číslo řádku a počet řádků
let statusline.="%#StatusLineColumn#C:%-4c\ "         " číslo sloupce,
                                                      " formátováno na čtyři znaky, zarovnání doleva
let statusline.="%#StatusLineOffset#%5o\ \ "          " offset od začátku souboru,
                                                      " formátován na pět znaků zarovnání doprava
let statusline.="%#StatusLineASCII#[%03b=0x%02B]"  " ASCII hodnota znaku + to stejné v hexa
&nbsp;
" nastavení formátu pravítka (konfigurační parametr "statusline")
let &amp;statusline=statusline
&nbsp;
" zrušení pomocné proměnné
unlet statusline
</pre>

<img src="http://i.iinfo.cz/images/530/vim1306.png" width="564" height="379" alt="&#160;" />
<p><i>Obrázek 6: Zdrojový kód skriptu pro změnu formátování stavového
řádku.</i></p>



<p><a name="k04"></a></p>
<h2>4. Vim ve funkci textového procesoru</h2>

<p>Je známým faktem, že textový editor <i>Vim</i> se vyvinul ze starobylého
textového editoru <i>Vi</i>. V&nbsp;případě <i>Vi</i> se jednalo o editor
určený především pro neomylné :-) programátory (viz též pouze jednoúrovňové
<i>undo</i>), takže většina funkcionality <i>Vi</i> byla mířena především do
oblasti editace zdrojových kódů rozdělených do samostatných řádků, které se
většinou automaticky neformátovaly na více obrazových řádků. Ostatně i
v&nbsp;mnoha současných projektech se dodnes dodržuje štábní kultura diktující
nevytvářet programové řádky delší než 80 znaků, což je vlastně pozůstatek
z&nbsp;doby děrných štítků, jejichž formát byl dodržován i při konstrukci
textových terminálů (80&times;24, 80&times;25 znaků). Ovšem editor <i>Vim</i>
začal být postupně doplňován i o příkazy sloužící pro psaní běžného
odstavcového textu, při jehož zobrazení i editacích je nutné využívat jiné
funkce, než u zdrojových kódů. V&nbsp;současnosti tak je možné <i>Vim</i>
upravit takovým způsobem, že se způsob práce s&nbsp;ním přibližuje možnostem
textových procesorů, včetně automatického přeformátování odstavců, tvorbě
seznamů atd. (samozřejmě se nejedná a nebude jednat o WYSIWYG editor, což je
ostatně jen dobře).</p>

<img src="http://i.iinfo.cz/images/699/gui12-3.jpg" width="450" height="587" alt=" " />
<p><i>Obrázek 7: V&nbsp;dřevních dobách výpočetní techniky se texty
připravovaly na specializovaných systémech, například na tomto zařízení Wang
1220 firmy Wang Laboratories, které umožňovalo provádět přípravu textů, jejich
editaci, tvorbu revizí, archivaci a samozřejmě formátování a tisk.</i></p>

<p>Tato funkcionalita je navíc doplněna o několik balíků maker (například o
užitečnou sadu maker <strong>matchit.vim</strong>) zjednodušujících práci se
značkovacími jazyky, ať již se jedná o <i>TeX</i> a <i>LaTeX</i>, či o
<i>HTML/XHTML či XML</i>. Díky existenci těchto maker je například možné snadno
přeskakovat mezi párovými tagy v&nbsp;HTML. Základem při práci
s&nbsp;odstavcovými texty nejsou jednotlivé textové řádky, ale celé odstavce.
Ty mohou být podle preference uživatele buď ukládány jako &bdquo;nekonečný
řádek&ldquo; (tj.&nbsp;jeden odstavec je v&nbsp;souboru uložen jako jediný
řádek), popř.&nbsp;se může jednat o odstavce rozdělené fyzicky na jednotlivé
řádky, ovšem s&nbsp;tím, že mezi jednotlivými odstavci musí být umístěn vhodný
dělící znak. V&nbsp;případě <i>Vimu</i> se může jednat o prázdný textový řádek,
popř.&nbsp;o mezeru ponechanou za poslední větou odstavce &ndash; viz též další
kapitoly. Oba dva způsoby práce s&nbsp;odstavcovým textem &ndash; použití
&bdquo;nekonečného řádku&ldquo; i odstavce rozděleného do více textových řádků
&ndash; si popíšeme v&nbsp;dalším textu.</p>

<a href="http://i.iinfo.cz/images/450/gui14-12.png"><img src="http://i.iinfo.cz/images/450/gui14-12-prev.png" width="370" height="231" alt=" " /></a>
<p><i>Obrázek 8: Textový procesor XyWrite pracoval v&nbsp;textovém režimu,
takže taktéž nedokázal v&nbsp;průběhu editace přesně zobrazit text takovým
způsobem, jakým byl později vytištěn, což však v&nbsp;mnoha případech nemusí
vadit.</i></p>



<p><a name="k05"></a></p>
<h2>5. Konfigurační parametry ovlivňující formátování a způsob zobrazení textů</h2>

<p>Již v&nbsp;první části tohoto seriálu jsme si řekli, že v&nbsp;závislosti na
zvoleném formátu editovaného souboru je možné se přepínat mezi různými režimy
zalamování řádků. Všechny důležité konfigurační parametry jsou vypsány
v&nbsp;následující dvojici tabulek.</p>

<p>Nejprve si uvedeme konfigurační parametry ovlivňující způsob zobrazení
dlouhých textových řádků, tj.&nbsp;&bdquo;nekonečných odstavců&ldquo;:</p>

<table>
<tr><th>#</th><th>Jméno parametru</th><th>Zkrácený název</th><th>Význam</th></tr>
<tr><td>1</td><td>wrap       </td><td>wrap  </td><td>zapnutí vizuálního zalamování, při němž se do souborů automaticky nevkládá znak pro konec řádku</td></tr>
<tr><td>2</td><td>nowrap     </td><td>nowrap</td><td>vypnutí vizuálního zalamování, vypíná i volbu <strong>linebreak</strong></td></tr>
<tr><td>3</td><td>linebreak  </td><td>lbr   </td><td>zapnutí vizuálního zalamování na hranicích slov</td></tr>
<tr><td>4</td><td>nolinebreak</td><td>nolbr </td><td>vypnutí vizuálního zalamování na hranicích slov</td></tr>
<tr><td>5</td><td>showbreak  </td><td>sbr   </td><td>specifikace textu vkládaného na začátek vizuálně zalomené řádky (text se do souboru neuloží)</td></tr>
</table>

<p>Ve druhé tabulce jsou uvedeny konfigurační parametry, které se používají
v&nbsp;případě, že je text poloautomaticky či zcela automaticky formátován do
samostatných řádků (<i>Vim</i> tedy v&nbsp;textu vytváří či naopak ruší znaky
CR):</p>

<table>
<tr><th>#</th><th>Jméno parametru</th><th>Zkrácený název</th><th>Význam</th></tr>
<tr><td>1</td><td>textwidth </td><td>tw</td><td>automatické zalamování na xxx sloupci (při psaní se automaticky vkládá znak pro konec řádku)</td></tr>
<tr><td>2</td><td>wrapmargin</td><td>wm</td><td>alternativa k&nbsp;předchozí volbě, umožňuje vkládat znak konce řádku relativně vůči pravému okraji okna</td></tr>
<tr><td>3</td><td>formatoptions</td><td>fo</td><td>přesné určení způsobu formátování textů</td></tr>
<tr><td>4</td><td>formatlistpat</td><td>flp</td><td>použit při formátování seznamů</td></tr>
</table>



<p><a name="k06"></a></p>
<h2>6. Vizuální zalamování textů</h2>

<p>Pod pojmem vizuální zalamování textů je myšlen způsob zobrazení dlouhých
textových řádků na obrazovce, aniž by ovšem docházelo ke skutečnému vkládání
znaků pro konec řádku (CR) do editovaného souboru. Ve skutečnosti je právě
tento způsob přípravy textů nejjednodušší a nejpřirozenější, pro lepší práci
s&nbsp;textem však může být vhodné provést přemapování kláves pro posun kurzoru
nahoru a dolů následujícím způsobem:</p>

<pre>
" šipkou nahoru se pohybujeme po obrazových řádcích směrem nahoru
:map &lt;Up&gt;   gk
</pre>

<pre>
" šipkou dolů se pohybujeme po obrazových řádcích směrem dolů
:map &lt;Down&gt; gj
</pre>

<p>Význam všech parametrů ovlivňujících způsob vizuálního zalamování textů je
ukázán na následujících čtyřech screenshotech (obsahujících mimochodem část
předchozí kapitoly):</p>

<img src="http://i.iinfo.cz/images/67/vim1309.png" width="564" height="379" alt="&#160;" />
<p><i>Obrázek 9: Parametr <strong>nowrap</strong> zakáže vizuální zalamování
textů, takže dlouhé řádky nejsou celé viditelné.</i></p>

<img src="http://i.iinfo.cz/images/385/vim1310.png" width="564" height="379" alt="&#160;" />
<p><i>Obrázek 10: Parametrem <strong>wrap</strong> je povoleno vizuální
zalomení textu na jakémkoli znaku, který se zrovna nachází v&nbsp;posledním
sloupci obrazovky. Nevhodné pro běžné texty.</i></p>

<img src="http://i.iinfo.cz/images/500/vim1311.png" width="564" height="379" alt="&#160;" />
<p><i>Obrázek 11: Parametrem <strong>wrap</strong> a <strong>linebreak</strong>
je povoleno vizuální zarovnání takovým způsobem, že je řádek ukončen na
hranicích mezi slovy. Na rozdíl od předchozího režimu je tento způsob naopak
velmi vhodný pro psaní běžných textů.</i></p>

<img src="http://i.iinfo.cz/images/42/vim1312.png" width="564" height="379" alt="&#160;" />
<p><i>Obrázek 12: Někdy může být výhodné vidět, které řádky jsou skutečné a
které vznikly pouhým vizuálním zarovnáním. O to se stará volba
<strong>showbreak</strong>, které lze předat řetězec, který se bude zobrazovat
na začátku každého řádku vzniklého vizuálním zalomením (při zápisu mezery
před ni zapište zpětné lomítko!).</i></p>

<p>I další příkazové zkratky mohou být užitečné, například pro přepínání režimů
<strong>wrap</strong> a <strong>linebreak</strong>, popř.&nbsp;pro nastavení
vhodného řetězce do parametru <strong>showbreak</strong>:</p>

<pre>
:map ,br  :set invlinebreak&lt;cr&gt;
:map ,wr  :set invwrap&lt;cr&gt;
:map ,sbr :set showbreak=&gt;&gt;&gt;\ &lt;cr&gt;
:map ,nbr :set showbreak=&lt;cr&gt;
</pre>



<p><a name="k07"></a></p>
<h2>7. Využití uživatelských funkcí psaných ve VimScriptu při zobrazení informací na pravítku</h2>

<p>V&nbsp;předchozí kapitole jsme mohli vidět, jak může být v&nbsp;mnoha
případech užitečné měnit způsob vizuálního zobrazení editovaných textů na
obrazovce při jejich psaní a zejména následných úpravách. V&nbsp;mnoha
případech by se však navíc hodilo mít neustále k&nbsp;dispozici i informaci o
tom, jaký režim zobrazení textu je v&nbsp;daném okamžiku vlastně použit. Ve
skutečnosti to lze zařídit velmi jednoduše (člověk si na tento fakt při práci
ve <i>Vimu</i> rychle zvykne :-), protože postačuje využít informace získané
v&nbsp;předchozí části tohoto seriálu, kde jsme si řekli, že při zápisu
informací na pravítko či stavový řádek je možné využít uživatelské funkce
zapisované ve <i>VimScriptu</i>. Návratové hodnoty těchto funkcí jsou převedeny
na řetězec (samozřejmě za předpokladu, že se již o řetězce nejedná) a tento
řetězec je zarovnán a je popř.&nbsp;zkrácen na požadovanou hodnotu a posléze
ihned umístěn do správné pozice na pravítku nebo na stavovém řádku.</p>

<img src="http://i.iinfo.cz/images/4/vim1313.png" width="540" height="70" alt="&#160;" />
<p><i>Obrázek 13: Ukázka pravítka, na němž je kromě dalších informací zobrazena
i hodnota konfiguračního parametru <strong>textwidth</strong>,
<strong>wrap</strong> a <strong>linebreak</strong>.</i></p>

<p>Uživatelské funkce jsou využity i v&nbsp;následujícím skriptu, kde slouží
pro zobrazení třech důležitých konfiguračních parametrů na pravítku. Jedná se o
parametry <strong>wrap</strong>, <strong>linebreak</strong> a
<strong>textwidth</strong>. Povšimněte si především způsobu převodu číselné
hodnoty 0 a 1 na řetězec v&nbsp;případě parametrů <strong>wrap</strong> a
<strong>linebreak</strong> i toho, jak je volání funkcí vloženo do
formátovacího řetězce <strong>rulerformat</strong> &ndash; volaná funkce musí
být uzavřena mezi znaky %{ a }:</p>

<pre>
"=============================================================================
" Vim script support file
" Maintainer: Pavel Tisnovsky
" Last Change: 2011 Sep 27
"-----------------------------------------------------------------------------
" Skript, který může být součástí konfiguračního souboru .vimrc, popř.
" ho je možné z tohoto souboru načíst s využitím příkazu :source
"
" Ukázka nastavení formátu pravítka a pomocných funkcí pro formátování
" údajů zobrazených na pravítku.
"=============================================================================
&nbsp;
&nbsp;
" nastavení nových kategorií stylů textu použitých na pravítku
highlight RulerFileName      guifg=#cc8080 ctermfg=red
highlight RulerColumn        guifg=#cccc80 ctermfg=yellow
highlight RulerLine          guifg=#80cc80 ctermfg=green
highlight RulerOffset        guifg=#8080cc ctermfg=blue
highlight RulerASCII         guifg=#808000 ctermfg=brown
highlight RulerTextWidth     guifg=#cc80cc ctermfg=magenta
highlight RulerTextWrap      guifg=#cc8080 ctermfg=red
highlight RulerLineBreak     guifg=#8080cc ctermfg=blue
&nbsp;
" funkce vracející hodnotu konfiguračního parametru "textwidth"
function! ReturnTextWidth()
    return &amp;textwidth
endfunction
&nbsp;
" funkce vracející hodnotu konfiguračního parametru "wrap" ve formě řetězce
function! ReturnTextWrap()
    return &amp;wrap ? "wrap  " : "nowrap"
endfunction
&nbsp;
" funkce vracející hodnotu konfiguračního parametru "linebreak" ve formě řetězce
function! ReturnLineBreak()
    return &amp;linebreak ? "break  " : "nobreak"
endfunction
&nbsp;
" povolení zobrazení pravítka (pro jistotu)
set ruler
&nbsp;
" proměnná obsahující formát pravítka
let rulerformat="%60("                                          " šířka pravítka
let rulerformat.="%#RulerFileName#%t\ \ "                       " jméno souboru
let rulerformat.="%#RulerLine#L:%l/%L\ \ "                      " číslo řádku a počet řádků
let rulerformat.="%#RulerColumn#C:%-4c\ "                       " číslo sloupce
                                                                " formátováno na čtyři znaky, zarovnání doleva
let rulerformat.="%#RulerOffset#%5o\ \ "                        " offset od začátku souboru,
let rulerformat.="%#RulerASCII#[%03b=0x%02B]\ "                 " ASCII hodnota znaku + to stejné v hexa
let rulerformat.="%#RulerTextWidth#tw:%{ReturnTextWidth()}\ "   " šířka textu
let rulerformat.="%#RulerTextWrap#%{ReturnTextWrap()}\ "        " zalamování textů
let rulerformat.="%#RulerLineBreak#%{ReturnLineBreak()}\%)"     " zalomení řádků na bílém znaku
&nbsp;
" nastavení formátu pravítka (konfigurační parametr "rulerformat")
let &amp;rulerformat=rulerformat
&nbsp;
" zrušení pomocné proměnné
unlet rulerformat
&nbsp;
"=============================================================================
</pre>

<a href="http://i.iinfo.cz/images/262/vim1314.png"><img src="http://i.iinfo.cz/images/262/vim1314-prev.png" width="323" height="270" alt="&#160;" /></a>
<p><i>Obrázek 14: Zdrojový kód skriptu, který obsahuje trojici funkcí využitých
při formátování informací zobrazených na pravítku.</i></p>



<p><a name="k08"></a></p>
<h2>8. Automatické přeformátování odstavců během úprav textů</h2>

<p>V&nbsp;této kapitole si (prozatím jen stručně) popíšeme druhý způsob práce
s&nbsp;běžnými texty. Jedná se o způsob založený na tom, že textové odstavce
jsou rozděleny do fyzických textových řádků takovým způsobem, že je <i>Vim</i>
může rozeznat (pozná tedy začátek a konec odstavce) a tím pádem je i může
poloautomaticky či dokonce zcela automaticky zformátovat resp.&nbsp;přerovnat.
Základním parametrem, který ovlivňuje chování <i>Vimu</i> při formátování
odstavců, je volba <strong>textwidth</strong>, zkracovaná též na
<strong>tw</strong>. Nulová hodnota vypíná formátování, zatímco hodnota kladná
udává maximální délku textových řádků (typicky se používají hodnoty 60, 72 či
80). Podobný význam má i parametr <strong>wrapmargin</strong>, pomocí nějž je
možné zadat šířku odstavců relativně k&nbsp;pravému okraji okna. Pokud
například bude šířka okna 80 znaků a parametr <strong>wrapmargin</strong> bude
nastaven na 10, budou se odstavce přerovnávat tak, aby maximální délka každého
řádku byla rovna 80-10=70 znakům.</p>

<p>Textový editor <i>Vim</i> ovšem bez dalšího nastavení používá hodnoty
<strong>textwidth</strong> a <strong>wrapmargin</strong> pouze při vkládání
nového textu, nikoli například pro spojování kratších řádků při provádění
různých editačních operací. Buď je možné formátování vynutit ručně, například
příkazem <strong>gqap</strong> (<i>format (a) paragraph</i>), nebo lze do volby
<strong>formatoptions</strong> přidat znak <strong>a</strong>, který zajistí
automatické přeformátování odstavce při jakékoli manipulaci s&nbsp;textem:</p>

<pre>
:set formatoptions+=a
</pre>

<p>Pokud je nastavena volba <strong>textwidth</strong>, lze odstavec či
jakýkoli vybraný text zarovnat doleva, doprava či ho vycentrovat pomocí
příkazů:</p>

<pre>
:left
:right
:center
</pre>

<p>Text je nutné nejprve vybrat do bloku, popř.&nbsp;použít jiný způsob zadání
rozsahu výběru (například procento, určením čísel řádků atd.).</p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>vim.wikia: Display date-and-time on status line<br />
<a href="http://vim.wikia.com/wiki/Display_date-and-time_on_status_line">http://vim.wikia.com/wiki/Display_date-and-time_on_status_line</a>
</li>

<li>vim.wikia: Writing a valid statusline<br />
<a href="http://vim.wikia.com/wiki/Writing_a_valid_statusline">http://vim.wikia.com/wiki/Writing_a_valid_statusline</a>
</li>

<li>vim.wikia: Statusline tab level ruler<br />
<a href="http://vim.wikia.com/wiki/Statusline_tab_level_ruler">http://vim.wikia.com/wiki/Statusline_tab_level_ruler</a>
</li>

<li>vim.wikia: Switching between different statuslines<br />
<a href="http://vim.wikia.com/wiki/Switching_between_different_statuslines">http://vim.wikia.com/wiki/Switching_between_different_statuslines</a>
</li>

<li>X Selections, Cut Buffers, and Kill Rings<br />
<a href="http://www.jwz.org/doc/x-cut-and-paste.html">http://www.jwz.org/doc/x-cut-and-paste.html</a>
</li>

<li>Accessing the system clipboard<br />
<a href="http://vim.wikia.com/wiki/Accessing_the_system_clipboard">http://vim.wikia.com/wiki/Accessing_the_system_clipboard</a>
</li>

<li>
xcutsel(1) - Linux man page<br />
<a href="http://linux.die.net/man/1/xcutsel">http://linux.die.net/man/1/xcutsel</a>
</li>

<li>snipMate : TextMate-style snippets for Vim<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2540">http://www.vim.org/scripts/script.php?script_id=2540</a>
</li>

<li>msanders / snipmate.vim<br />
<a href="https://github.com/msanders/snipmate.vim">https://github.com/msanders/snipmate.vim</a>
</li>

<li>snipMate.vim Introductory Screencast<br />
<a href="http://vimeo.com/3535418">http://vimeo.com/3535418</a>
</li>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Exuberant ctags<br />
<a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a>
</li>

<li>xxd (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>ctags (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags</a>
</li>

<li>cscope (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Novinky ve VIM 7: Úvodní část - speller<br />
<a href="http://www.root.cz/vim-sedm-prvni-cast/">http://www.root.cz/vim-sedm-prvni-cast/</a>
</li>

<li>Novinky ve VIM 7: Skriptovací jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>vim2elvis: Přednosti a nedostaky Elvise v porovnání s Vimem<br />
<a href="http://www.root.cz/clanky/vim2elvis-1/">http://www.root.cz/clanky/vim2elvis-1/</a>
</li>

<li>vim2elvis: Shodné znaky mezi Elvisem a Vimem, nastavení­editoru<br />
<a href="http://www.root.cz/clanky/vim2elvis-2/">http://www.root.cz/clanky/vim2elvis-2/</a>
</li>

<li>Nej... VIM pluginy (1)<br />
<a href="http://www.root.cz/clanky/nej-vim-pluginy/">http://www.root.cz/clanky/nej-vim-pluginy/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Scroll Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Scroll_lock">http://necyklopedie.wikia.com/wiki/Scroll_lock</a>
</li>

<li>Caps Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Caps_Lock">http://necyklopedie.wikia.com/wiki/Caps_Lock</a>
</li>

<li>Avoid the escape key<br />
<a href="http://vim.wikia.com/wiki/Avoid_the_escape_key">http://vim.wikia.com/wiki/Avoid_the_escape_key</a>
</li>

<li>Map caps lock to escape in XWindows<br />
<a href="http://vim.wikia.com/wiki/VimTip166">http://vim.wikia.com/wiki/VimTip166</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2010</small></p>
</body>
</html>

