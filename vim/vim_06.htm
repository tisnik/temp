<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textový editor Vim jako IDE (6.část - Vim Script)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textový editor Vim jako IDE (6.část - Vim Script)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;šesté části seriálu o využití textového editoru Vim (nejenom) ve funkci vývojového prostředí si popíšeme základní vlastnosti skriptovacího jazyka, který byl do Vimu přidán již ve verzi 5.0 v&nbsp;roce 1998. Díky integrovanému skriptovacímu jazyku lze ve Vimu vytvářet i poměrně složité zásuvné moduly (pluginy), podobně jako je tomu i u dalších pokročilých skriptovatelných textových editorů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Vim jako skriptovatelný textový editor</a></p>
<p><a href="#k02">2. Základy skriptovacího jazyka Vimu</a></p>
<p><a href="#k03">3. Použití prefixů před jmény proměnných</a></p>
<p><a href="#k04">4. Pseudoproměnné</a></p>
<p><a href="#k05">5. Použití pseudoproměnných</a></p>
<p><a href="#k06">6. Operátory</a></p>
<p><a href="#k07">7. Seznamy (datový typ LIST)</a></p>
<p><a href="#k08">8. Slovníky (datový typ DICTIONARY)</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Vim jako skriptovatelný textový editor</h2>

<p>V&nbsp;mnoha snad nikdy nekončících diskusích vedených mezi uživateli
textového editoru <i>vi</i>/<i>Vim</i> a uživateli <i>Emacsu</i> je jako jedna
z&nbsp;největších předností <i>Emacsu</i> zdůrazňován fakt, že tento textový
editor je z&nbsp;velké části napsán v&nbsp;dialektu programovacího jazyka Lisp,
který je spouštěn nad relativně malým jádrem přeloženým pro danou platformu,
přičemž toto jádro zajišťuje pouze nízkoúrovňové a systémově závislé funkce.
Díky tomu je možné chování <i>Emacsu</i> různým způsobem upravovat, programovat
makra, vytvářet nové režimy (módy) atd. Je pravda, že původní textový editor
<i>vi</i> skutečně v&nbsp;tomto ohledu nemohl <i>Emacsu</i> či ještě staršímu
(a nutno říci, že mnohem podivnějšímu :-) editoru <i>TECO</i> konkurovat,
protože se v&nbsp;případě <i>vi</i> jedná o typickou ukázku Unixové aplikace
&ndash; tento nástroj dělá pouze jednu činnost (tou je samozřejmě editace
textu), přičemž všechny ostatní činnosti lze provádět díky možnosti volání
externích nástrojů, mezi něž patří například <strong>grep</strong>,
<strong>sort</strong>, <strong>fmt</strong>, <strong>col</strong>,
<strong>indent</strong> atd.</p>

<p>Ovšem textový editor <i>Vim</i> nerozšířil pouze repertoár příkazů původního
editoru <i>vi</i>, ale taktéž přišel s&nbsp;vlastním interním skriptovacím
jazykem, v&nbsp;němž je možné psát jak jednoduché několikařádkové pomocné
skripty (ostatně i soubor <strong>.vimrc</strong> je takovým skriptem), tak i
relativně složité nadstavby, například již popsaný <i>Vim Outliner</i>, <i>Java
Browser</i>, <i>NERD Tree</i> či <i>Taglist</i>. První verze tohoto
skriptovacího jazyka byla představena již v&nbsp;roce 1998 společně
s&nbsp;verzí <i>Vim 5</i>, poměrně zásadní rozšíření syntaxe a sémantiky bylo
představeno v&nbsp;sedmé verzi <i>Vimu</i>. V&nbsp;případě, že by interní
skriptovací jazyk z&nbsp;nějakého důvodu nedostačoval, je dokonce možné psát
skripty pro <i>Vim</i> v&nbsp;některém obecném externím jazyku, pro něž je
vytvořeno rozhraní, přes které mohou skripty s&nbsp;<i>Vimem</i> komunikovat.
Mezi podporované externí jazyky patří například <i>Perl</i>, <i>Python</i>,
<i>Tcl</i>, <i>Ruby</i> a dokonce i <i>MzScheme</i>, které by možná mohlo
zajímat uživatele <i>Emacsu</i>. V&nbsp;tomto článku se zaměříme především na
popis interního skriptovacího jazyka; popis možností propojení <i>Vimu</i> a
externích jazyků si necháme až na některý navazující díl tohoto seriálu.</p>



<p><a name="k02"></a></p>
<h2>2. Základy skriptovacího jazyka Vimu</h2>

<p>Začátky práce s&nbsp;interním skriptovacím jazykem textového editoru
<i>Vim</i> nejsou příliš složité, a to zejména z&nbsp;toho důvodu, že syntaxe a
sémantika tohoto jazyka se podobná mnoha dalším jazykům, jenž leží na
&bdquo;algolské větvi&ldquo; programovacích jazyků, což například znamená, že
se běžně pracuje s&nbsp;proměnnými, funkcemi, používají se strukturované
příkazy typu programových smyček atd. Dalším důvodem poměrně snadných prvních
pokusů o psaní skriptů spočívají v&nbsp;tom, že příkazy skriptovacího jazyka
lze zadávat přímo v&nbsp;příkazovém režimu <i>Vimu</i>, tj.&nbsp;ihned po
zápisu dvojtečky v&nbsp;normálním režimu. Textový editor <i>Vim</i> se snaží
tyto příkazy spustit a vyhodnotit co nejdříve je to možné a popř.&nbsp;vypsat
chybové hlášení, pokud se v&nbsp;příkazu vyskytuje chyba. <i>Vim</i> se tedy
v&nbsp;tomto ohledu chová podobně jako mnohé interpretry dalších programovacích
jazyků (spuštěné v&nbsp;interaktivním režimu), ovšem s&nbsp;tím malým rozdílem,
že se implicitně nevypisují vypočtené hodnoty výrazů. To například znamená, že
následující výrazy:</p>

<pre>
:let a=1+1
:let a=a*2
:let b="pokus"
</pre>

<p>se skutečně &bdquo;tiše&ldquo; provedou, ale pokud budeme chtít znát
výsledek výpočtu, musíme explicitně použít příkaz <strong>echo</strong>:</p>

<pre>
:echo 1+1
2
</pre>

<pre>
:echo a
4
</pre>

<pre>
:echo 3*a
12
</pre>

<pre>
:echo b
pokus
</pre>

<pre>
:echo b.b.b
pokuspokuspokus
</pre>

<p>Podobným způsobem je možné zapsat i složitější několikařádkový kód:</p>

<pre>
:let seznam1=[1,2,3,4]
:let i=0
:while i&lt;4
:    echo seznam1[i]
:    let i+=1
:endwhile
</pre>

<p>(prozatím si nedělejte nic z&nbsp;toho, že kódu nerozumíte, všechny použité
příkazy si postupně vysvětlíme)</p>

<p>Pokud si skutečně vyzkoušíte zápis předchozího kódu přímo v&nbsp;příkazovém
režimu <i>Vimu</i>, uvidíte, že po zápisu třetího řádku:</p>

<pre>
:while i&lt;4
</pre>

<p>se již <i>Vim</i> po stisku klávesy <strong>Enter</strong> nevrátí zpět do
normálního režimu, ale čeká na zadání celého těla smyčky. To je ostatně
logické, protože interpret skriptu se snaží smyčku ihned spustit
(vyhodnotit). Teprve po zadání posledního řádku:</p>

<pre>
:endwhile
</pre>

<p>se smyčka skutečně spustí a vypíšou se jednotlivé prvky uložené
v&nbsp;seznamu nazvaném <strong>seznam1</strong> (viz též sedmá kapitola
pojednávající o seznamech).</p>

<p>Při zápisu výše uvedené programové smyčky přímo v&nbsp;příkazovém režimu
jste si pravděpodobně také uvědomili, že pro skripty delší než přibližně pět
řádků zdrojového kódu tudy cesta opravdu nevede :-) Textový editor <i>Vim</i>
je totiž při tomto způsobu programování v&nbsp;podstatě degradován na poměrně
primitivní řádkový editor s&nbsp;historií příkazů. Praktičtější tedy bude
využití všech editačních schopností <i>Vimu</i>, včetně zvýrazňování syntaxe
zdrojových kódů, doplňování závorek atd. Pokud si tedy předchozí demonstrační
příklad:</p>

<pre>
:let seznam1=[1,2,3,4]
:let i=0
:while i&lt;4
:    echo seznam1[i]
:    let i+=1
:endwhile
</pre>

<p>uložíte do souboru s&nbsp;názvem <strong>test.vim</strong>, je možné tento
soubor přímo ve <i>Vimu</i> otevřít (<strong>vim test.vim</strong>), provést
editaci a následně skript spustit pomocí příkazu:</p>

<pre>
:source %
</pre>

<p>nebo pouze:</p>

<pre>
:so %
</pre>

<p>Dokonce je v&nbsp;tomto případě možné úplně vynechat všechny dvojtečky na
začátcích řádků, takže zdrojový kód bude vypadat lidsky:</p>

<pre>
let seznam1=[1,2,3,4]
let i=0
while i&lt;4
    echo seznam1[i]
    let i+=1
endwhile
</pre>

<p>Poznámka: předchozí příklad není zapsán optimálně; jednodušší je tato
smyčka:</p>

<pre>
let seznam1=[1,2,3,4]
for prvek in seznam1
    echo prvek
endfor
</pre>



<p><a name="k03"></a></p>
<h2>3. Použití prefixů před jmény proměnných</h2>

<p>Interní skriptovací jazyk <i>Vimu</i> samozřejmě umožňuje práci
s&nbsp;proměnnými. Do proměnných lze přiřadit hodnotu pomocí příkazu
<strong>let</strong>, čímž současně dojde i k&nbsp;deklaraci proměnné a
přiřazení typu k&nbsp;proměnné (což je důležité, protože typ proměnné není
možné libovolně měnit). Pokud totiž proměnná není deklarována, vypsal by
<i>Vim</i> při pokusu o přístup k&nbsp;takové neexistující proměnné chybu.
Můžeme si to ukázat na jednoduchém příkladu uvedeném pod tímto odstavcem.
Všechny příkazy se zapisují v&nbsp;příkazovém režimu, tj.&nbsp;po zadání
dvojtečky (texty bez dvojtečky jsou zprávami vypisovanými <i>Vimem</i>):</p>

<pre>
:let foo=42
:echo foo
42
</pre>

<pre>
:echo bar
E121: Undefined variable: bar
E15: Invalid expression: bar
</pre>

<p>V&nbsp;závislosti na tom, ve kterém místě je proměnná použita, se <i>Vim</i>
automaticky rozhodne, zda se jedná o proměnnou globální nebo lokální
v&nbsp;rámci jedné funkce. Ovšem viditelnost proměnných je možné určit i
explicitně a to pomocí prefixů, které se zapisují před jméno proměnné.
V&nbsp;následující tabulce jsou vypsány všechny prefixy, které je možné ve
skriptech i v&nbsp;jednotlivých příkazech použít:</p>

<table>
<tr><th>#</th><th>Prefix</th><th>Význam prefixu</th></tr>
<tr><td>1</td><td>g:jméno_proměnné</td><td>globální proměnné</td></tr>
<tr><td>2</td><td>s:jméno_proměnné</td><td>proměnné lokální v&nbsp;rámci souboru se skriptem</td></tr>
<tr><td>3</td><td>w:jméno_proměnné</td><td>proměnné lokální v&nbsp;rámci okna (nikoli bufferu!)</td></tr>
<tr><td>4</td><td>t:jméno_proměnné</td><td>proměnné lokální v&nbsp;rámci tabu</td></tr>
<tr><td>5</td><td>b:jméno_proměnné</td><td>proměnné lokální v&nbsp;rámci bufferu (nikoli okna!)</td></tr>
<tr><td>6</td><td>l:jméno_proměnné</td><td>proměnné lokální v&nbsp;rámci funkce (jde tedy o &bdquo;pravé&ldquo; lokální proměnné)</td></tr>
<tr><td>7</td><td>a:jméno_proměnné</td><td>parametry předávané volané funkci</td></tr>
<tr><td>8</td><td>v:jméno_proměnné</td><td>konstanty a proměnné nastavované samotným Vimem</td></tr>
</table>

<p>Zajímavý je především poslední (osmý) prefix, tj.&nbsp;<strong>v:</strong>.
S&nbsp;tímto prefixem lze přistupovat ke konstantám a proměnným, které jsou
automaticky nastavované samotným <i>Vimem</i>. Jednou z&nbsp;nejužitečnějších
Vimovských proměnných je proměnná <strong>v:version</strong> obsahující hlavní
i vedlejší číslo verze textového editoru, přičemž hlavní číslo je vynásobené
hodnotou sto a přičtené k&nbsp;vedlejší verzi, takže například verze 7.2 je
uložena ve formě hodnoty 702. Vzhledem k&nbsp;tomu, že výsledkem tohoto
interního výpočtu je celé číslo, lze se poměrně často ve skriptech setkat
s&nbsp;následujícím obratem:</p>

<pre>
" verze starsi nez 6.00 neumi pracovat s UTF-8
if v:version&gt;=600
    set encoding=utf-8
endif
</pre>

<p>Použitím samotného prefixu, tj.&nbsp;pouze zápisem <strong>g:</strong>,
<strong>v:</strong> apod. se přistupuje ke slovníku (<i>dictionary</i>)
obsahujícímu všechny proměnné daného typu, například všechny globální proměnné
nebo všechny speciální proměnné nastavované textovým editorem <i>Vim</i>. Sami
si můžete vyzkoušet, jaké informace se vypíšou po zadání jednoho
z&nbsp;následujících příkazů:</p>

<pre>
echo g:
echo t:
echo w:
echo b:
</pre>

<p>a především:</p>

<pre>
echo v:
</pre>

<p>Poznámka: slovníky <strong>l:</strong>, <strong>s:</strong> a
<strong>a:</strong> existují pouze při jejich použití uvnitř funkce.</p>



<p><a name="k04"></a></p>
<h2>4. Pseudoproměnné</h2>

<p>Kromě globálních proměnných, lokálních proměnných a parametrů funkcí je
možné ve <i>Vim skriptu</i> využívat i různé pseudoproměnné. Jedná se o objekty
různých typů (konfigurační parametry, registry, proměnné prostředí), jejichž
hodnotu lze ve skriptech číst nebo dokonce i měnit a ovlivnit tak chování
textového editoru i okolních aplikací (!), popř.&nbsp;zjistit základní
informace o konfiguraci systému. Od běžných proměnných se pseudoproměnné
odlišují prefixovými znaky, jejichž význam je vypsán v&nbsp;následující
tabulce:</p>

<table>
<tr><th>#</th><th>Prefix</th><th>Význam</th></tr>
<tr><td>1</td><td>&amp;jméno_konfiguračního_parametru</td><td>lokální nebo globální konfigurační parametr Vimu</td></tr>
<tr><td>2</td><td>&amp;l:jméno_konfiguračního_parametru</td><td>lokální parametr Vimu</td></tr>
<tr><td>3</td><td>&amp;g:jméno_konfiguračního_parametru</td><td>globální parametr Vimu</td></tr>
<tr><td>4</td><td>@jméno_registru</td><td>registr (viz též předchozí části tohoto seriálu s&nbsp;vysvětlením významu některých speciálních registrů)</td></tr>
<tr><td>5</td><td>$jméno_proměnné</td><td>proměnná prostředí předávaná do Vimu při jeho spuštění (jedná se o stejné proměnné, s&nbsp;jakými se pracuje v&nbsp;shellu)</td></tr>
</table>

<p>Ukázka výpisu proměnné prostředí</p>

<pre>
:echo $DISPLAY
:0.0  &lt;--- zde se jedná o zprávu vypsanou Vimem
</pre>

<pre>
:echo $USER
tisnik
</pre>

<p>Popř.&nbsp;složitější příklad:</p>

<pre>
:let @"=$PATH
p   &lt;--- příkaz "put" zadaný v normálním režimu
/home/tisnik/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
</pre>



<p><a name="k05"></a></p>
<h2>5. Použití pseudoproměnných</h2>

<p>Ukažme si použití některých pseudoproměnných na jednoduchých příkladech.
V&nbsp;jednom článku se objevil návod na definici nových klávesových zkratek,
které je možné použít pro zvýšení či snížení hodnoty konfiguračního parametru
<strong>tabstop (ts)</strong>. Vzhledem k&nbsp;tomu, že se v&nbsp;těchto
mapováních používají výpočty (i když poměrně jednoduché), není možné jednoduše
napsat například <strong>:set tabstop=xxx</strong>, ale je nutné použít krátký
skript. V&nbsp;následujícím výpisu si povšimněte použití &lt;CR&gt;, který je
součástí mapování. Pokud by nebyl tento znak použit, čekal by <i>Vim</i> na
odeslání příkazu klávesou <strong>Enter</strong>):</p>

<pre>
nmap ]] :let &amp;tabstop += 1&lt;CR&gt;
nmap [[ :let &amp;tabstop -= &amp;tabstop &gt; 1 ? 1 : 0&lt;CR&gt;
</pre>

<p>Pomocí zápisu <strong>@jméno_registru</strong> lze číst a dokonce i
modifikovat jméno jakéhokoli registru používaného <i>Vimem</i>. Po vykonání
následujícího příkazu:</p>

<pre>
:let @"="foo bar"
</pre>

<p>... se změní hodnota registru nazvaného " (uvozovky), který je implicitně
použit například v&nbsp;příkazu <strong>p</strong> (<i>put</i>). To znamená, že
po stisku klávesy <strong>p</strong> v&nbsp;normálním režimu se za pozici
kurzoru vloží text &bdquo;foo bar&ldquo; (samozřejmě bez uvozovek). Textový
editor <i>Vim</i> dokonce při správné konstelaci vhodných podmínek umožňuje
číst a modifikovat text uložený v&nbsp;systémové schránce &ndash;
<i>clipboardu</i>. Již v&nbsp;předchozích částech tohoto seriálu jsme si řekli,
že obsah schránky je umístěný v&nbsp;registru nazvaném <strong>*</strong> nebo
<strong>+</strong> (na systému Windows se jedná o stejnou oblast, na systémech
s&nbsp;X11 se rozlišuje schránka a oblast výběru textu &ndash;
<i>selection</i>). Vyzkoušejte si například spustit tento příkaz:</p>

<pre>
:let @*="xyzzy"
</pre>

<p>a následně v&nbsp;emulátoru terminálu či v&nbsp;jiné aplikaci nabízející
možnost vstupu textových dat (<i>GEdit</i>, <i>Firefox</i>) stlačit prostřední
tlačítko myši. Podobně to funguje i při použití registru
<strong>+</strong>:</p>

<pre>
:let @+=42
</pre>

<p>společně s&nbsp;klávesovými zkratkami <strong>Ctrl+V</strong>,
popř.&nbsp;<strong>Shift+Insert</strong>.</p>



<p><a name="k06"></a></p>
<h2>6. Operátory</h2>

<p>Ve Vimovských skriptech, přesněji řečeno ve výrazech, je možné použít
poměrně široký repertoár různých operátorů. Ve zkratce je možné říci, že snad
s&nbsp;výjimkou operátorů ++ a -- lze ve <i>Vimu</i> použít prakticky všechny
operátory známé z&nbsp;mainstreamových programovacích jazyků:</p>

<table>
<tr><th>Výraz</th><th>Popis</th></tr>
<tr><td>number + number     </td><td>součet dvou čísel (též spojení seznamů)</td></tr>
<tr><td>number - number     </td><td>rozdíl dvou čísel</td></tr>
<tr><td>number * number     </td><td>součin dvou čísel</td></tr>
<tr><td>number / number     </td><td>podíl dvou čísel (až u Vimu 7.2 jsou podporována reálná čísla)</td></tr>
<tr><td>number % number     </td><td>dělení modulo</td></tr>
<tr><td>+number             </td><td>konverze na číslo</td></tr>
<tr><td>-number             </td><td>změna znaménka</td></tr>
<tr><td>str . str           </td><td>konkatenace (spojení) řetězců</td></tr>
<tr><td>str =~ regexp       </td><td>porovnání řetězce s&nbsp;regulárním výrazem</td></tr>
<tr><td>str !~ regexp       </td><td>porovnání řetězce s&nbsp;regulárním výrazem (s&nbsp;negací)</td></tr>
<tr><td>bool || bool        </td><td>operace logického součtu</td></tr>
<tr><td>bool &amp;&amp; bool</td><td>operace logického součinu</td></tr>
<tr><td>!bool               </td><td>operace logické negace</td></tr>
<tr><td>expr ? expr : expr  </td><td>ternární operátor známý z&nbsp;céčkových jazyků</td></tr>
<tr><td>expr == expr        </td><td>porovnání čísel či řetězců na rovnost</td></tr>
<tr><td>expr != expr        </td><td>porovnání čísel či řetězců na nerovnost</td></tr>
<tr><td>expr &gt; expr      </td><td>porovnání čísel či řetězců na relaci &bdquo;větší než&ldquo;</td></tr>
<tr><td>expr &gt;= expr     </td><td>porovnání čísel či řetězců na relaci &bdquo;větší nebo rovno&ldquo;</td></tr>
<tr><td>expr &lt; expr      </td><td>porovnání čísel či řetězců na relaci &bdquo;menší než&ldquo;</td></tr>
<tr><td>expr &lt;= expr     </td><td>porovnání čísel či řetězců na relaci &bdquo;menší nebo rovno&ldquo;</td></tr>
<tr><td>var = expr          </td><td>běžné přiřazení</td></tr>
<tr><td>var += expr         </td><td>přičtení hodnoty výrazu k&nbsp;proměnné</td></tr>
<tr><td>var -= expr         </td><td>odečtení hodnoty výrazu od proměnné</td></tr>
<tr><td>var *= expr         </td><td>vynásobení proměnné hodnotou výrazu</td></tr>
<tr><td>var /= expr         </td><td>vynásobení proměnné hodnotou výrazu</td></tr>
<tr><td>var %= expr         </td><td>zkrácený zápis var = var % expr</td></tr>
<tr><td>var .= expr         </td><td>konkatenace řetězců</td></tr>
</table>

<p>Již ve čtvrté části tohoto seriálu jsme si řekli, že u všech operátorů
porovnávajících řetězce (jedná se o operátory <strong>==</strong>,
<strong>=~</strong>, <strong>!~</strong>) je možné s&nbsp;využitím postfixového
znaku určit, zda se má ignorovat velikost písmen, popř.&nbsp;zda se má použít
konfigurační parametr <strong>ignorecase</strong>:</p>

<table>
<tr><th>Operátor</th><th>Použít ignorecase</th><th>Brát ohled na velikost písma</th><th>Ignorovat velikost písma</th></tr>
<tr><td>equal                </td><td>==   </td><td>==#   </td><td>==?   </td></tr>
<tr><td>not equal            </td><td>!=   </td><td>!=#   </td><td>!=?   </td></tr>
<tr><td>greater than         </td><td>&gt; </td><td>&gt;# </td><td>&gt;? </td></tr>
<tr><td>greater than or equal</td><td>&gt;=</td><td>&gt;=#</td><td>&gt;=?</td></tr>
<tr><td>smaller than         </td><td>&lt; </td><td>&lt;# </td><td>&lt;? </td></tr>
<tr><td>smaller than or equal</td><td>&lt;=</td><td>&lt;=#</td><td>&lt;=?</td></tr>
<tr><td>regexp matches       </td><td>=~   </td><td>=~#   </td><td>=~?   </td></tr>
<tr><td>regexp doesn't match </td><td>!~   </td><td>!~#   </td><td>!~?   </td></tr>
</table>



<p><a name="k07"></a></p>
<h2>7. Seznamy (datový typ LIST)</h2>

<p>V&nbsp;předchozích kapitolách jsme se zabývali především tím, jakým způsobem
se pracuje s&nbsp;celými čísly (popř.&nbsp;s&nbsp;reálnými čísly ve <i>Vimu
7.2</i>) a s&nbsp;řetězci. Po relativně dlouhou dobu přibližně deseti let
skutečně bylo možné ve Vimovských skriptech používat tuto dvojici primitivních
datových typů, ovšem spolu se sedmou verzí se objevily i dva nové datové typy
známé i z&nbsp;mnoha dalších (nejenom) skriptovacích programovacích jazyků,
například z&nbsp;<i>Perlu</i>, <i>Pythonu</i> či <i>Ruby</i>. Těmito novými
typy jsou seznamy (<i>list</i>) a slovníky (<i>dictionary</i>). Nejprve si
popíšeme způsob práce se seznamy. V&nbsp;pojetí Vim Scriptu se seznam chová
podobně jako v&nbsp;programovacích jazycích <i>Lisp</i> či <i>Scheme</i>, což
znamená, že do seznamu lze vkládat buď přímo základní datové typy čísla a
řetězce) nebo další seznamy a vytvářet tak poměrně komplikované hierarchizované
datové struktury (v&nbsp;Lispu lze do seznamu zapsat i celý program či funkci,
to prozatím ve Vimu není možné a kvůli orientaci Vim Scriptu na syntaxi
odvozenou od mainstreamových jazyků ani možné nebude). Jednoduchý seznam lze
vytvořit například následujícím příkazem (<i>konstruktorem</i>):</p>

<pre>
:let seznam1=[1, 2, 3, 4]
:echo seznam1
[1, 2, 3, 4]
</pre>

<p>Jak jsme si již řekli v&nbsp;prvním odstavci, je v&nbsp;seznamu možné
kombinovat jednotlivé datové typy Vimu. Taktéž si povšimněte, že jméno proměnné
se správně vyhodnotí na její hodnotu:</p>

<pre>
:let two=2
:let seznam2=[1, two, "3", "čtyři"]
:echo seznam2
[1, 2, "3", "čtyři"]
</pre>

<p>Seznam složený z&nbsp;jiných seznamů se vytvoří následujícím konstruktorem
(jedná se tedy o seznam seznamů, který můžeme v&nbsp;tomto specifickém případě
považovat za dvourozměrné pole):</p>

<pre>
:let seznam3=[[11, 12, 13] , [21, 22, 23], [31, 32, 33]]
:echo seznam3
[[11, 12, 13] , [21, 22, 23], [31, 32, 33]]
</pre>

<p>K&nbsp;prvkům seznamu se přistupuje pomocí takzvaného <i>selektoru</i>,
který se zapisuje jako index v&nbsp;hranatých závorkách, podobně jako pole
v&nbsp;céčku, Pascalu a dalších programovacích jazycích. První prvek seznamu má
nulový index, další prvek má index rovný jedničce atd. Pokud je seznam složený
z&nbsp;více seznamů (tj.&nbsp;nějaký prvek seznamu je opět tvořen seznamem),
používá se indexace pomocí dvou indexů, z&nbsp;nichž každý musí být umístěn
v&nbsp;samostatných hranatých závorkách. &bdquo;Nejlevější&ldquo; index přitom
ovlivňuje výběr prvku z&nbsp;nejvýše postaveného seznamu v&nbsp;hierarchii.
Práce s&nbsp;prvky seznamu tedy může vypadat následovně:</p>

<pre>
:let prvni=seznam1[0]
:echo prvni
</pre>

<pre>
:let seznam2[1]="pokus"
:echo seznam2
</pre>

<pre>
:let seznam3=[[11, 12, 13] , [21, 22, 23], [31, 32, 33]]
:echo seznam3[2][2]
</pre>

<p>Pokud nastane při indexaci chyba, tj.&nbsp;indexuje se neexistující prvek
(například při průchodu seznamem pomocí programové smyčky), vypíše Vim chybové
hlášení <strong>list index out of range</strong> a ukončí provádění dalších
příkazů. Při psaní skriptů je však výhodnější, aby si skript sám otestoval, zda
k&nbsp;seznamu opravdu přistupuje korektním způsobem.
K&nbsp;&bdquo;bezpečnému&ldquo; přístupu k&nbsp;prvkům seznamu je možné použít
funkci <i>get()</i>, která v&nbsp;případě, že se přistoupí k&nbsp;indexu mimo
povolený rozsah vrátí nulovou hodnotu. Prvním parametrem funkce <i>get()</i> je
proměnná typu seznam, druhým parametrem je index:</p>

<pre>
:echo "Indexy v zadaném rozsahu"
:echo get(seznam1, 1)
:echo get(seznam1, 2)
</pre>

<pre>
:echo "Indexy mimo rozsah"
:echo get(seznam1,-1)
:echo get(seznam1, 4)
</pre>

<p>Pro spojení dvou seznamů je rozšířena funkce operátoru <strong>+</strong>.
Seznamy jsou spojeny tak, že se zřetězí všechny jejich prvky na nejvyšší
úrovni. V&nbsp;případě, že je některým prvkem seznamu další seznam, není
spojením ovlivněn. Vyzkoušet si operaci spojení seznamů můžeme na následujících
příkladech:</p>

<pre>
:echo [1,2]+[3,4]
:let seznam1=[1, 2, 3]
:let seznam2=["3", "4", "5"]
:let seznam3=[[11, 12, 13] , [21, 22, 23], [31, 32, 33]]
:let spojeni=seznam1+seznam2+seznam3
:echo spojeni
</pre>



<p><a name="k08"></a></p>
<h2>8. Slovníky (datový typ DICTIONARY)</h2>

<p>Pod datovým typem <i>slovník</i> (<i>dictionary</i>) se v&nbsp;textovém
editoru <i>Vim</i> neskrývá nic jiného, než asociativní pole, které je známé i
z&nbsp;velkého množství dalších programovacích jazyků, jakými jsou <i>Perl</i>,
<i>Python</i>, <i>Lua</i> či <i>JavaScript</i>. Malým omezením Vimovsky
pojatého asociativního pole je skutečnost, že klíčem musí být vždy řetězec, což
poněkud komplikuje přístup k&nbsp;jednotlivým prvkům pole (klíče jiných typů
jsou ovšem na řetězec převedeny). Slovník se jednoduše vytvoří pomocí
<i>konstruktoru</i>, který musí splňovat následující schéma, ve kterém se
postupně naplňují jednotlivé hodnoty společně se svými klíči. Jak jsme si již
řekli, musí být klíč vždycky reprezentován řetězcem. Pokud tomu tak při zápisu
konstruktoru není, je klíč na řetězec nejprve převeden:</p>

<pre>
{"klíč1":hodnota1, "klíč2":hodnota2}
</pre>

<p>Příklad použití:</p>

<pre>
:let slovnik1={"one":1, "two":2, "three":3, "four":4}
:echo slovnik1
{'one': 1, 'two': 2, 'three': 3, 'four': 4 }
</pre>

<p>Přístup k&nbsp;jednotlivým prvkům uloženým ve slovníku je podobný způsobu,
který byl využitý v&nbsp;případě seznamů, pouze se namísto číselného indexu
použije klíč ve formě řetězce (to je pravděpodobně jeden z&nbsp;důvodů, proč
musí být klíče slovníku vždy řetězce). Kromě toho je podporována i takzvaná
<strong>tečková notace</strong>, kdy se před tečku zapíše jméno slovníku a za
tečku klíč bez uvozovek. Slovník se potom v&nbsp;podstatě chová jako
strukturovaný datový typ <i>záznam</i> (record, struct) s&nbsp;měnitelným
počtem položek. Opět se nejedná o neznámé chování, protože podobně se
s&nbsp;asociativními poli pracuje například v&nbsp;<i>JavaScriptu</i> nebo
v&nbsp;programovacím jazyku <i>Lua</i>. Následuje ukázka použití obou možností
přístupu k&nbsp;prvkům uloženým ve slovníku:</p>

<pre>
:let seznam2={"one":1, "two":2, "three":3}
:echo seznam2["one"]
1
</pre>

<pre>
:echo seznam2.one
1
</pre>

<p>Řetězec představující klíč sice může obsahovat i české znaky (popř.&nbsp;i
další znaky s&nbsp;nabodeníčky či další Unikódové specialitky), potom však
<strong>nelze</strong> selektor použít ve formě tečkové notace, protože by se
tím porušila syntaktická pravidla skriptovacího jazyka:</p>

<pre>
:let seznam3={"jedna":1, "dvě":2, "tři":3}
:echo seznam3["tři"]
3
</pre>

<pre>
:echo seznam3.tři
E716: Key not present in Dictionary: tři
</pre>

<p>Ve třetí kapitole jsme se zmínili o tom, že prefixy typů proměnných ve
skutečnosti nahrazují slovníky. Můžeme si to ihned vyzkoušet:</p>

<pre>
:let xx=v:
:echo xx["version"]
701
:echo xx.version
701
</pre>

<pre>
:echo xx["progname"]
gvim
:echo xx.progname
gvim
</pre>

<p>Další možnosti práce se slovníky budou popsány v&nbsp;navazující části
seriálu.</p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Exuberant ctags<br />
<a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a>
</li>

<li>xxd (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>ctags (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags</a>
</li>

<li>cscope (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Novinky ve VIM 7: Úvodní část - speller<br />
<a href="http://www.root.cz/vim-sedm-prvni-cast/">http://www.root.cz/vim-sedm-prvni-cast/</a>
</li>

<li>Novinky ve VIM 7: Skriptovací jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>vim2elvis: Přednosti a nedostaky Elvise v porovnání s Vimem<br />
<a href="http://www.root.cz/clanky/vim2elvis-1/">http://www.root.cz/clanky/vim2elvis-1/</a>
</li>

<li>vim2elvis: Shodné znaky mezi Elvisem a Vimem, nastavení­editoru<br />
<a href="http://www.root.cz/clanky/vim2elvis-2/">http://www.root.cz/clanky/vim2elvis-2/</a>
</li>

<li>Nej... VIM pluginy (1)<br />
<a href="http://www.root.cz/clanky/nej-vim-pluginy/">http://www.root.cz/clanky/nej-vim-pluginy/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Scroll Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Scroll_lock">http://necyklopedie.wikia.com/wiki/Scroll_lock</a>
</li>

<li>Caps Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Caps_Lock">http://necyklopedie.wikia.com/wiki/Caps_Lock</a>
</li>

<li>Avoid the escape key<br />
<a href="http://vim.wikia.com/wiki/Avoid_the_escape_key">http://vim.wikia.com/wiki/Avoid_the_escape_key</a>
</li>

<li>Map caps lock to escape in XWindows<br />
<a href="http://vim.wikia.com/wiki/VimTip166">http://vim.wikia.com/wiki/VimTip166</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2010</small></p>
</body>
</html>

