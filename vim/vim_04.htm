<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textový editor Vim jako IDE (4.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textový editor Vim jako IDE (4.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtvrté části seriálu o použití textového editoru Vim (nejenom) ve funkci vývojového prostředí se budeme zabývat způsobem práce se značkami, včetně ukládání značek do souboru .viminfo. Poté si popíšeme práci s registry a jejich vztahem ke schránce. Následně si ukážeme, jak lze nakonfigurovat způsob obarvení zdrojových kódů, na což navážeme příště popisem příkazu :syntax sloužícího pro definici syntaktických kategorií.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Značky a způsob jejich použití při editaci souborů</a></p>
<p><a href="#k02">2. Příkazy pro práci se značkami</a></p>
<p><a href="#k03">3. Automatické ukládání značek do souboru .viminfo</a></p>
<p><a href="#k04">4. Využití pojmenovaných registrů ve Vimu</a></p>
<p><a href="#k05">5. Práce s&nbsp;registry prakticky</a></p>
<p><a href="#k06">6. Speciální registr =</a></p>
<p><a href="#k07">7. Změna způsobu obarvení zdrojových kódů</a></p>
<p><a href="#k08">8. Zvýraznění řádku a/nebo sloupce, na němž se nachází kurzor</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Značky a způsob jejich použití při editaci souborů</h2>

<p>V&nbsp;předchozí části seriálu o textovém editoru <i>Vim</i> jsme si popsali
některé příkazy a nastavení používaná zejména při editaci a automatickém
odsazování zdrojových kódů. Taktéž jsme se zabývali popisem technologie nazvané
&bdquo;omni completion&ldquo;, která byla do <i>Vimu</i> přidána v&nbsp;jeho
sedmé verzi. Dnes budeme pokračovat v&nbsp;popisu dalších vlastností tohoto
neobyčejného textového editoru. Začneme relativně jednoduchou věcí &ndash;
takzvanými značkami (<i>marks</i>. Nejedná se však o značky vytvářené externími
nástroji a ukládané většinou do souboru pojmenovaného <i>tags</i>, ale o
interní seznam pozic kurzoru (jakési &bdquo;špendlíky&ldquo; zapíchnuté do
důležitých míst) v&nbsp;souboru, na které se lze během editace vrátit, nebo na
něž se lze odkazovat. Podobnou funkcionalitu nabízí i mnohé další
programátorské textové editory, ovšem u nich se většinou jedná o maximálně
deset značek, zatímco ve <i>Vimu</i> může být značek mnohem více, protože každé
značce je přiřazeno jednopísmenné označení.</p>

<a href="http://i.iinfo.cz/images/42/vim04-1.png"><img src="http://i.iinfo.cz/images/42/vim04-1-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 1: Příkaz :marks vypíše všechny platné značky pro právě aktivní
buffer.</i></p>

<p>V&nbsp;rámci jednoho souboru lze lokálně používat značky pojmenované malými
písmeny <strong>a</strong> až <strong>z</strong>, zatímco značky pojmenované
velkými písmeny <strong>A</strong> až <strong>Z</strong> si
&bdquo;pamatují&ldquo; i jméno souboru, v&nbsp;němž jsou definovány, tudíž se
jedná o značky globální. Speciální význam mají značky se jmény
<strong>0</strong> až <strong>9</strong> (naplňované většinou při ukončování
<i>Vimu</i>) a taktéž v&nbsp;některých případech velmi užitečná značka
<strong>"</strong>. Významy některých jmen značek (ve skutečnosti jich je ještě
mnohem více) jsou vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>Jméno značky</th><th>Definice značky</th><th>Význam</th></tr>
<tr><td>a-z</td><td>manuálně</td><td>značky lokální v&nbsp;rámci souboru</td></tr>
<tr><td>A-Z</td><td>manuálně</td><td>značky globální, ke značce je připojeno i jméno souboru</td></tr>
<tr><td>0-9</td><td>automaticky</td><td>posledních deset pozic kurzoru při opuštění Vimu</td></tr>
<tr><td>&lt;</td><td>automaticky</td><td>začátek vybraného bloku</td></tr>
<tr><td>&gt;</td><td>automaticky</td><td>konec vybraného bloku</td></tr>
<tr><td>"</td><td>automaticky</td><td>pozice kurzoru při zavření bloku</td></tr>
<tr><td>^</td><td>automaticky</td><td>pozice kurzoru, na níž se kurzor naposledy nacházel ve vkládacím režimu</td></tr>
</table>

<a href="http://i.iinfo.cz/images/42/vim04-2.png"><img src="http://i.iinfo.cz/images/42/vim04-2-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 2: Příklad výstupu příkazu :marks v&nbsp;případě, že jsou
definovány čtyři globální značky A, B, C a Z.</i></p>



<p><a name="k02"></a></p>
<h2>2. Příkazy pro práci se značkami</h2>

<p>Práce se značkami je v&nbsp;mnoha ohledech velmi jednoduchá, ostatně všechny
důležité příkazy najdete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příkaz</th><th>Význam</th></tr>
<tr><td>:marks</td><td>výpis všech právě aktivních značek</td></tr>
<tr><td>:marks značka</td><td>výpis vybrané značky</td></tr>
<tr><td>ma - mz</td><td>definice lokální značky a-z</td></tr>
<tr><td>mA - mZ</td><td>definice globální značky A-Z</td></tr>
<tr><td>'a - 'z</td><td>skok na řádek, kde je značka definovaná (jedná se o příkaz pohybu kurzoru!)</td></tr>
<tr><td>'A - 'Z</td><td>skok na soubor a řádek, kde je značka definovaná</td></tr>
<tr><td>`a - `z</td><td>skok na přesné místo, kde je značka definovaná (jedná se o příkaz pohybu kurzoru!)</td></tr>
<tr><td>'A - 'Z</td><td>skok na přesné místo (řádek i sloupec), kde je značka definovaná</td></tr>
</table>

<p>Povšimněte si, že při práci s&nbsp;českou klávesnicí se znaky apostrofu a
zpětného apostrofu špatně zapisují. Ovšem, podobně jako u mnoha dalších
operací, i zde je možné použít mapování. V&nbsp;případě, že mají být funkce
kláves stejné, jako na anglické klávesnici (myšleno je tím to, že se použije
stejná fyzická klávesa, což je při častém přepínání rozložení klávesnice
zajisté žádoucí vlastnost), poslouží tyto příkazy:</p>

<pre>
:map § '
:map ;; `
</pre>

<p>Středník je zdvojený naschvál, aby se nezrušila jeho obvyklá funkce,
tj.&nbsp;opakování vyhledávacího příkazu <strong>t</strong> či
<strong>f</strong>. Pokud tuto funkci nepoužíváte, není ke zdvojení středníku
samozřejmě důvod.</p>

<a href="http://i.iinfo.cz/images/42/vim04-3.png"><img src="http://i.iinfo.cz/images/42/vim04-3-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 3: Výsledek příkazu v'a v&nbsp;případě, že je značka a
definována.</i></p>

<p>V&nbsp;předchozí tabulce bylo uvedeno, že příkazy <strong>'a</strong> -
<strong>'z</strong> i <strong>`a</strong> až <strong>`z</strong> jsou chápané
jako příkazy pro pohyb kurzoru, což znamená, že tyto příkazy lze kombinovat
například s&nbsp;editačními operátory <strong>d</strong> (<i>delete</i>),
<strong>y</strong> (<i>yank</i>) a <strong>c</strong> (<i>change</i>). To je
velmi užitečné, protože lze snadno vytvořit (lépe řečeno pouze označit) začátek
&bdquo;bloku&ldquo;, například příkazem <strong>ma</strong> a posléze je možné
kurzor přesunout na konec bloku a zvolit jeden z&nbsp;následujících příkazů
(užitečnost ještě mnohem více stoupá při použití značek v&nbsp;makrech):</p>

<table>
<tr><th>Příkaz</th><th>Význam</th></tr>
<tr><td>c`a</td><td>přepis části textu, jehož začátek je označený značkou <strong>a</strong> a konec je určený aktuální pozicí textového kurzoru</td></tr>
<tr><td>d`a</td><td>výmaz části textu, jehož začátek je označený značkou <strong>a</strong> a konec je určený aktuální pozicí textového kurzoru</td></tr>
<tr><td>y`a</td><td>vložení části textu, jehož začátek je označený značkou <strong>a</strong> a konec je určený aktuální pozicí textového kurzoru, do implicitního registru (bližší informace o registrech budou uvedeny v&nbsp;navazujícím textu)</td></tr>
<tr><td>gu`a</td><td>změna na malá písmena</td></tr>
<tr><td>gu`a</td><td>změna na velká písmena</td></tr>
<tr><td>gq`a</td><td>zformátování bloku (jako textu)</td></tr>
<tr><td>=`a </td><td>zformátování bloku (jako zdrojového kódu)</td></tr>
</table>

<a href="http://i.iinfo.cz/images/42/vim04-4.png"><img src="http://i.iinfo.cz/images/42/vim04-4-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 4: Výsledek příkazu gU'a v&nbsp;případě, že je značka a
definována.</i></p>



<p><a name="k03"></a></p>
<h2>3. Automatické ukládání značek do souboru .viminfo</h2>

<p>Důležitý a příjemný je fakt, že značky dokážou při správném nastavení
konfigurace textového editoru &bdquo;přežít&ldquo; i ukončení <i>Vimu</i>,
protože mohou být automaticky uloženy do souboru <strong>.viminfo</strong>.
Mimochodem: do tohoto souboru si textový editor <i>Vim</i> ukládá i další
důležité stavové informace, pozor tedy na to, že může obsahovat i citlivé
informace přenášené přes registry. Pokud například ve svém konfiguračním
souboru <strong>.vimrc</strong> uvedete následující příkaz:</p>

<pre>
set viminfo='20,\"50,n~/.viminfo
</pre>

<p>...bude se v&nbsp;souboru pojmenovaném <strong>.viminfo</strong> vytvářeném
v&nbsp;domácím adresáři ukládat informace o značkách pro posledních dvacet
editovaných souborů. Toto číslo lze samozřejmě zvětšit, celková velikost
souboru <strong>.viminfo</strong> totiž není v&nbsp;naprosté většině případů
nijak kritická. Pro zajímavost, jak vypadá část souboru
<strong>.viminfo</strong> s&nbsp;uloženými značkami. Nejprve jsou v&nbsp;něm
uloženy informace o globálních značkách, kde se kromě čísla řádku a čísla
sloupce ukládá i jméno souboru:</p>

<pre>
# File marks:
'A  4  0  ~/reports/mail-daily-report.sh
'Z  91  4  ~/reports/daily_report.txt
'0  91  4  ~/reports/daily_report.txt
'1  4  0  ~/reports/mail-daily-report.sh
'2  163  7  ~/temp/_viminfo
'3  1  0  ~/disable_selinux.sh
'4  50  0  /var/log/messages
'5  1  0  /var/log/messages
'6  29  0  /var/www/html/openjdk/style.css
'7  11  19  /var/www/html/openjdk/jtreg/icedtea6/2011-07-12/jtreg-summary.log
'8  8  0  /var/www/html/openjdk/jtreg/icedtea6/2011-07-08
'9  3  9  ~/reports/Java2Dbenchmark/graph_.sh
</pre>

<p>Poté se mohou v&nbsp;souboru <strong>.viminfo</strong> vyskytovat informace
o značkách definovaných pro dvacet posledně editovaných souborů. Pro každý
soubor je uložen zvláštní seznam značek (to je logické, protože by jinak
docházelo ke kolizi jmen):</p>

<pre>
# History of marks within files (newest to oldest):

&gt; ~/reports/daily_report.txt
        "       91      4
        .       64      0
        +       66      0
        +       67      0
        +       64      0


&gt; ~/reports/mail-daily-report.sh
        "       4       0

&gt; ~/temp/_viminfo
        "       163     7

&gt; ~/disable_selinux.sh
        "       1       0
...
...
...
</pre>

<a href="http://i.iinfo.cz/images/42/vim04-5.png"><img src="http://i.iinfo.cz/images/42/vim04-5-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 5: Část obsahu souboru .viminfo s&nbsp;globálními
značkami.</i></p>

<p>Jak je z&nbsp;výše uvedených příkladů patrné, pamatuje si <i>Vim</i> pozici
kurzoru jak pro deset naposled editovaných souborů (viz značky
<strong>0</strong> až <strong>9</strong>), tak i poslední pozici kurzoru pro
každý soubor zvlášť ve značce s&nbsp;názvem <strong>"</strong>. To znamená, že
pokud se potřebujeme přesunout přesně na to místo, kde probíhala poslední
editace, stačí zadat příkaz:</p>

<pre>
`"
</pre>

<p>Vzhledem k&nbsp;velké užitečnosti tohoto příkazu je vhodné si ho přidat i do
konfiguračního souboru <strong>.vimrc</strong>:</p>

<pre>
au BufReadPost * normal `"
</pre>

<p>Předchozí příkaz znamená, že se po načtení každého souboru (událost
<strong>BufReadPost</strong>) provede příkaz <strong>`"</strong>
v&nbsp;<i>normálním režimu</i>, tj.&nbsp;nikoli <i>režimu příkazovém</i> (po
<strong>au</strong> totiž následují příkazy jakoby zadávané s&nbsp;dvojtečkou
na začátku). Kdykoli tedy dojde k&nbsp;otevření již dříve editovaného souboru,
přesune se kurzor na místo poslední editace.</p>

<a href="http://i.iinfo.cz/images/42/vim04-6.png"><img src="http://i.iinfo.cz/images/42/vim04-6-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 6: Část obsahu souboru .viminfo se značkami definovanými pro
jednotlivé soubory.</i></p>



<p><a name="k04"></a></p>
<h2>4. Využití pojmenovaných registrů ve Vimu</h2>

<p>Dalším užitečným a často používaným nástrojem nabízeným textovým editorem
<i>Vim</i> jsou takzvané <i>registry</i>. Jedná se o proměnné <i>Vimu</i>
pojmenované jedním znakem, které v&nbsp;první řadě slouží pro kopii či přenos
editovaných textů pomocí příkazů <strong>c</strong> (<i>change</i>),
<strong>s</strong> (<i>substitute</i>), <strong>d</strong> (<i>delete</i>),
<strong>y</strong> (<i>yank</i>) a <strong>p</strong> (<i>paste</i>), což
vlastně znamená, že registry lze využít ve funkci pojmenovaných schránek
(<i>clipboard</i>). Druhou funkcí, které registry v&nbsp;tomto textovém editoru
mají, je úschova maker, která se zaznamenávají příkazem <strong>q</strong> a
vyvolávají se (spouští se) příkazem <strong>@</strong> (za těmito příkazy vždy
následuje jméno registru, v&nbsp;němž je makro uschováno). Podobně jako
v&nbsp;případě značek, existují registry naplňované uživatelem a registry,
jejichž obsah je měněn textovým editorem automaticky při provádění různých
operací. Jména a význam některých důležitých registrů můžete najít
v&nbsp;následující tabulce:</p>

<table>
<tr><th>Registr</th><th>Význam</th></tr>
<tr><td>a-z</td><td>registry, které je možné přímo měnit uživatelem</td></tr>
<tr><td>0-9</td><td>registry naplňované automaticky příkazy <strong>d</strong> a <strong>y</strong></td></tr>
<tr><td>%</td><td>registr obsahující jméno právě editovaného souboru</td></tr>
<tr><td>:</td><td>registr obsahující poslední příkaz, vhodné při vyvolání tohoto příkazu jako makra</td></tr>
<tr><td>=</td><td>pseudoregistr používaný pro výpočet matematických a &bdquo;řetězcových&ldquo; výrazů</td></tr>
<tr><td>*</td><td>registr obsahující obsah schránky (viz též sedmou kapitolu s&nbsp;vysvětlením)</td></tr>
<tr><td>+</td><td>registr obsahující obsah schránky (viz též sedmou kapitolu s&nbsp;vysvětlením)</td></tr>
<tr><td>/</td><td>registr obsahující posledně vyhledávaný řetězec (resp.&nbsp;text odpovídající regulárnímu výrazu)</td></tr>
<tr><td>"</td><td>implicitní registr pro operace <strong>c</strong>, <strong>d</strong>, <strong>s</strong> nebo <strong>y</strong></td></tr>
<tr><td>-</td><td>implicitní registr pro operace, které mění menší část textu, než je jeden textový řádek</td></tr>
</table>

<a href="http://i.iinfo.cz/images/42/vim04-7.png"><img src="http://i.iinfo.cz/images/42/vim04-7-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 7: Výpis všech aktuálně definovaných registrů. Povšimněte si, že
některé registry ve skutečnosti obsahují makra &ndash; jedná se například o
registry <strong>a</strong>, <strong>m</strong>, <strong>q</strong> a
<strong>s</strong>.</i></p>

<p>Registry mohou být, podobně jako značky, ukládány při ukončování práce
<i>Vimu</i> do souboru <strong>.viminfo</strong>, kde způsob jejich uložení
vypadá zhruba následovně:</p>

<pre>
# Registers:
"0      LINE    0
        -----------------------------------------------------------------------
"1      LINE    0
                frame.getContentPane().setBackground(Color.yellow);
"2      LINE    0
        
"3      LINE    0
        
"4      LINE    0
        
"5      LINE    0
        
"6      LINE    0
        
"7      LINE    0
        
"8      LINE    0
        
"9      LINE    0
        
"a      LINE    0
                frame.getContentPane().setBackground(Color.yellow);
"c      CHAR    0
        O
"m      CHAR    0
        kF
"q      CHAR    0
        gqap
"s      CHAR    0
        E1
""z     CHAR    0
        for (String[] testedString : testedStrings)
"-      CHAR    0
</pre>

<a href="http://i.iinfo.cz/images/42/vim04-8.png"><img src="http://i.iinfo.cz/images/42/vim04-8-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 8: Obsah souboru .viminfo s&nbsp;texty uloženými
v&nbsp;registrech.</i></p>



<p><a name="k05"></a></p>
<h2>5. Práce s&nbsp;registry prakticky</h2>

<p>Pro výpis obsahu všech registrů se používá příkaz
<strong>:registers</strong> nebo taktéž pouze jeho zkrácená forma
<strong>:reg</strong>. Pomocí tohoto příkazu lze samozřejmě zobrazit i obsah
maker zaznamenaných s&nbsp;využitím příkazu <strong>q</strong>. V&nbsp;tabulce
zobrazené v&nbsp;předchozí kapitole byl uveden i speciální registr nazvaný
prostě " (jde o ASCII uvozovky, nikoli o dvojici apostrofů). Tento registr je
implicitně používán při provádění základních editovacích příkazů (či spíše
operátorů) <strong>c</strong> (<i>change</i>), <strong>d</strong>
(<i>delete</i>), <strong>y</strong> (<i>yank</i>) a <strong>p</strong>
(<i>paste</i>). Pokud se má využít jiný registr, musí se před tyto příkazy
napsat " (taktéž uvozovky, ovšem v&nbsp;tomto případě neplést s&nbsp;názvem
registru), za nímž následuje jméno vybraného registru. Viz též následující
příklady ukazující, jak se poměrně logicky dají ve <i>Vi</i> i <i>Vimu</i>
tvořit složité editační operace z&nbsp;jednodušších operátorů a příkazů:</p>

<pre>
"add
"ap

"b3dw
"bP

"cdas
"cp

"dyap

"zyy
"xS
"q10s
</pre>

<a href="http://i.iinfo.cz/images/42/vim04-9.png"><img src="http://i.iinfo.cz/images/42/vim04-9-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 9: Vkládací režim Vimu se na stavovém řádku ohlašuje informací --
INSERT --.</i></p>

<p>Zajímavější (a pravděpodobně i méně známou) možností je však použití velkého
písmene namísto písmene malého při uvádění jména registru před příkazy
<strong>c</strong>, <strong>d</strong> a <strong>y</strong>. V&nbsp;takovém
případě se obsah vybraného registru nepřemaže novým obsahem, ale naopak se
připojí na konec původního obsahu. Tohoto chování lze využít v&nbsp;různých
situacích, například při kopiích nekontinuálních bloků textu. Ukážeme si to na
jednoduchém příkladu, v&nbsp;němž potřebujeme do bloku/registru vložit řádky
s&nbsp;definicemi konstant nazvaných <strong>rShift</strong>,
<strong>gShift</strong> a <strong>bShift</strong>:</p>

<pre>
  1 public class ColorModelRGBA
  2 {
  3     final static int aMask = 0xFF000000;
  4     final static int rMask = 0x00FF0000;
  5     final static int rShift = 16;
  6     final static int gMask = 0x0000FF00;
  7     final static int gShift = 8;
  8     final static int bMask = 0x000000FF;
  9     final static int bShift = 0;
</pre>

<p>To lze provést následovně (všechny tři příkazy se samozřejmě zapisují za
sebou bez stlačení klávesy <strong>Enter</strong>):</p>

<pre>
5G"ayy
7G"Ayy
9G"Ayy
</pre>

<p>Nový obsah registru <strong>a</strong> je možné vypsat pomocí příkazu:</p>

<pre>
:reg a
</pre>

<p>Popř.&nbsp;lze jeho obsah vložit do libovolného místa zdrojového kódu
příkazem:</p>

<pre>
"ap
</pre>

<a href="http://i.iinfo.cz/images/42/vim04-10.png"><img src="http://i.iinfo.cz/images/42/vim04-10-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 10: Přepisovací režim Vimu se na stavovém řádku ohlašuje
informací -- REPLACE --.</i></p>

<p>V&nbsp;relativně velkém množství případů se stává, že je potřeba obsah
některého registru vložit do textu ve vkládacím nebo přepisovacím režimu
(<i>insert mode</i>, popř.&nbsp;<i>replace mode</i>). V&nbsp;tomto případě
samozřejmě není nutné přecházet do normálního režimu (na což pro jeden příkaz
mimochodem existuje zkratka <strong>Ctrl+O</strong>), ale lze použít mnohem
rychlejší řešení: stlačení klávesové zkratky <strong>Ctrl+R</strong> za níž
následuje jméno vybraného registru. Tři řádky zkopírované ze zdrojového kódu do
registru <strong>a</strong> se tedy na aktuální pozici kurzoru vloží přímo ve
vkládacím režimu takto:</p>

<pre>
Ctrl+Ra
</pre>

<a href="http://i.iinfo.cz/images/42/vim04-11.png"><img src="http://i.iinfo.cz/images/42/vim04-11-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 11: Přepnutí do normálního režimu z&nbsp;režimu vkládacího pomocí
klávesové zkratky Ctrl+O. Hlášení na stavové řádce je -- (insert) --, což
znamená, že se po provedení jednoho příkazu editor automaticky vrátí zpět do
vkládacího režimu.</i></p>



<p><a name="k06"></a></p>
<h2>6. Speciální registr =</h2>

<p>Užitečné může být taktéž použití registru, jehož jméno je
<strong>=</strong>. Jedná se o speciální registr, do něhož se neukládá přímo
nějaký text příkazem <strong>d</strong>, <strong>s</strong>, <strong>c</strong>
či <strong>y</strong>, ale výsledek aritmetického,
popř.&nbsp;&bdquo;řetězcového&ldquo; výrazu. Chování tohoto registru si nejlépe
ukážeme na jednoduchém příkladu. Pokud se ve vkládacím režimu použije klávesová
zkratka <strong>Ctrl+R =</strong>, zobrazí se na příkazovém řádku výzva pro
zadání nějakého výrazu. Zadejme například něco jednoduchého:</p>

<pre>
2*(3+4)&lt;Enter&gt;
</pre>

<p>Textový editor <i>Vim</i> se po stlačení klávesy <strong>Enter</strong>
pokusí o vyhodnocení tohoto výrazu a do editovaného textu vloží jeho výsledek,
tj.&nbsp;řetězec "14" (samozřejmě bez uvozovek).</p>

<p><i>Vim</i> se sice nesnaží při vyhodnocování výrazů nahrazovat plnohodnotné
programovací jazyky či specializované programy typu <strong>bc</strong> nebo
hardcore nástroj <strong>dc</strong>, i tak však svým uživatelům v&nbsp;této
oblasti nabízí poměrně mnoho možností. Především je možné při zápisu výrazů
používat velké množství operátorů známých z&nbsp;mnoha dalších programovacích
jazyků. Při použití některých operátorů se <i>Vim</i> snaží převádět operandy
z&nbsp;řetězců na čísla:</p>

<table>
<tr><th>Operátory</th><th>Význam</th></tr>
<tr><td>+ - * / %</td><td>běžné aritmetické operátory</td></tr>
<tr><td>|| &amp;&amp; !</td><td>logické operátory</td></tr>
<tr><td>?:</td><td>ternární operátor (viz céčko, C++, Javu, JavaScript)</td></tr>
<tr><td>== != &gt; &gt;= &lt; &lt;=</td><td>relační operátory pro řetězce i čísla</td></tr>
</table>

<p>Další operátory se používají především při práci s&nbsp;řetězci a nejsou již
tak obvyklé:</p>

<table>
<tr><th>Operátory</th><th>Význam</th></tr>
<tr><td>== </td><td>porovnání řetězců (viz text pod tabulkou)</td></tr>
<tr><td>=~ </td><td>test, zda řetězec odpovídá zadanému regulárnímu výrazu (viz text pod tabulkou)</td></tr>
<tr><td>!~ </td><td>test, zda řetězec <strong>ne</strong>odpovídá zadanému regulárnímu výrazu (viz text pod tabulkou)</td></tr>
<tr><td>.  </td><td>konkatenace (spojení) řetězců</td></tr>
</table>

<p>Ve skutečnosti se u všech operátorů porovnávajících řetězce
(<strong>==</strong>, <strong>=~</strong>, <strong>!~</strong>) může pomocí
postfixového znaku určit, zda se má ignorovat velikost písmen, popř.&nbsp;zda
se má použít konfigurační parametr <strong>ignorecase</strong>. Celkový počet
relačních operátorů i operátorů využívajících regulární výraz je tedy poměrně
velký, což je ostatně patrné z&nbsp;následující tabulky:</p>

<table>
<tr><th>Operátor</th><th>Použít ignorecase</th><th>Brát ohled na velikost písma</th><th>Ignorovat velikost písma</th></tr>
<tr><td>equal                </td><td>==   </td><td>==#   </td><td>==?   </td></tr>
<tr><td>not equal            </td><td>!=   </td><td>!=#   </td><td>!=?   </td></tr>
<tr><td>greater than         </td><td>&gt; </td><td>&gt;# </td><td>&gt;? </td></tr>
<tr><td>greater than or equal</td><td>&gt;=</td><td>&gt;=#</td><td>&gt;=?</td></tr>
<tr><td>smaller than         </td><td>&lt; </td><td>&lt;# </td><td>&lt;? </td></tr>
<tr><td>smaller than or equal</td><td>&lt;=</td><td>&lt;=#</td><td>&lt;=?</td></tr>
<tr><td>regexp matches       </td><td>=~   </td><td>=~#   </td><td>=~?   </td></tr>
<tr><td>regexp doesn't match </td><td>!~   </td><td>!~#   </td><td>!~?   </td></tr>
</table>



<p><a name="k07"></a></p>
<h2>7. Změna způsobu obarvení zdrojových kódů</h2>

<p>Další funkcí <i>Vimu</i>, kterou se dnes budeme &ndash; prozatím alespoň ve
stručnosti &ndash; zabývat, je způsob nastavení barev, které tento textový
editor používá při zvýrazňování jednotlivých syntaktických (lexikálních) částí
zdrojových textů. <i>Vim</i> ve své instalaci obsahuje pro různé typy
zdrojových textů konfigurační soubory obsahující definice jejich syntaxe, což
je problematika, kterou se budeme podrobněji zabývat příště. Ovšem ve chvíli,
kdy jsou jednotlivé syntaktické kategorie již vytvořeny, jim lze přiřadit barvu
popředí, barvu pozadí a při práci s&nbsp;GUI i typ písma &ndash; to vše pomocí
příkazu <strong>:hi</strong> či <strong>:highlight</strong>. Začneme nejdříve
popisem způsobu definice barev v&nbsp;případě, že je <i>Vim</i> spuštěn
v&nbsp;terminálu umožňujícím práci s&nbsp;barvami (což dnes umí prakticky
všechny emulace terminálů). Zde máme většinou k&nbsp;dispozici osm či šestnáct
barev, které lze zadat číslem 0-15 nebo jménem (green, red, ...). Nastavit lze
barvu popředí pomocí vlastnosti <strong>ctermfg</strong> (fg=foreground) i
barvu pozadí s&nbsp;využitím vlastnosti <strong>ctermbg</strong>
(bg=background).</p>

<a href="http://i.iinfo.cz/images/42/vim04-12.png"><img src="http://i.iinfo.cz/images/42/vim04-12-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 12: Výpis aktuálně nastavené konfigurace barev pomocí příkazu
:highlight.</i></p>

<p>Syntaxe příkazu <strong>highlight</strong> je následující:</p>

<pre>
" příkaz  synt. kategorie  parametry/barvy
highlight Folded           ctermfg=7    ctermbg=8
highlight Comment          ctermfg=12
highlight PreProc          ctermfg=10
highlight Underlined       ctermbg=7    ctermfg=8
highlight htmlItalic       ctermbg=none ctermfg=green
</pre>

<a href="http://i.iinfo.cz/images/42/vim04-13.png"><img src="http://i.iinfo.cz/images/42/vim04-13-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 13: Změna barvy pozadí i barvy popředí pro syntaktickou kategorii
pojmenovanou Statement.</i></p>

<p>Při práci v&nbsp;GUI, tj.&nbsp;při jeho spuštění příkazy
<strong>gvim</strong> nebo <strong>vim -g</strong>, lze barvu písma či barvu
pozadí navíc nastavit podobně, jako je tomu v&nbsp;HTML,
tj.&nbsp;s&nbsp;využitím trojice barvových složek zapsaných do jednoho
šestimístného hexadecimálního čísla. Vlastnost se však v&nbsp;takovém případě
nejmenuje <strong>cterm*</strong>, ale <strong>gui*</strong>. V&nbsp;grafickém
uživatelském rozhraní je navíc možné specifikovat i barvu kurzoru, a to pro
kurzor v&nbsp;normálním režimu, kurzor v&nbsp;režimu vkládacím i režimu
přepisovacím (osobně volím pro každý režim jinou barvu kurzoru, která tak
slouží pro indikaci stavu editoru):</p>

<pre>
highlight Cursor       guibg=#80ffff guifg=bg
highlight Cursor2      guibg=#ff8080 guifg=bg
highlight Cursor3      guibg=#60e060 guifg=bg
highlight Normal       guifg=#f6f3e8 guibg=#242424
highlight Normal       guifg=#80ff80 guibg=#242424
highlight NonText      guifg=#808080 guibg=#303030
highlight LineNr       guifg=#857b6f guibg=#000000
highlight StatusLine   guifg=#f6f3e8 guibg=#444444
highlight StatusLineNC guifg=#857b6f guibg=#444444
highlight VertSplit    guifg=#444444 guibg=#444444
highlight Folded       guibg=#485058 guifg=#a0a8b0
highlight Title        guifg=#f6f3e8 guibg=NONE
highlight Visual       guifg=#f6f3e8 guibg=#444444
highlight SpecialKey   guifg=#808080 guibg=#343434

highlight Comment      guifg=#99968b
highlight Todo         guifg=#8f8f8f
highlight Constant     guifg=#e5786d
highlight String       guifg=#95e454
highlight Identifier   guifg=#cae682
highlight Function     guifg=#cae682
highlight Type         guifg=#cae682
highlight Statement    guifg=#8ac6f2
highlight Keyword      guifg=#8ac6f2
highlight PreProc      guifg=#e5786d
highlight Number       guifg=#e5786d
highlight Special      guifg=#e7f6da
</pre>

<a href="http://i.iinfo.cz/images/42/vim04-14.png"><img src="http://i.iinfo.cz/images/42/vim04-14-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 14: Obarvený zdrojový text po změně barvy popředí i barvy pozadí
syntaktické kategorie Statement (viz barva příkazů <strong>if</strong> a
operátoru <strong>sizeof</strong>).</i></p>



<p><a name="k08"></a></p>
<h2>8. Zvýraznění řádku a/nebo sloupce, na němž se nachází kurzor</h2>

<p>V&nbsp;textovém editoru <i>Vim</i> verze 7 se kromě jiných vylepšení
objevila i možnost zvýraznění &bdquo;řádkového&ldquo; a/nebo
&bdquo;sloupcového&ldquo; kurzoru. Pro povolení zobrazení řádkového kurzoru,
tj.&nbsp;zvýraznění celého řádku, na němž se kurzor nachází, je nutné použít
příkaz <strong>:set cursorline</strong>, pro zvýraznění sloupce pak příkaz
<strong>:set cursorcolumn</strong>. Pokud je řádkový a/nebo sloupcový kurzor
povolen, lze nastavit jeho barvu (většinou pozadí) následujícím způsobem (jedná
se o úryvek kódu z&nbsp;konfiguračního souboru <strong>.vimrc</strong>,
v&nbsp;příkazovém režimu se nemusí podmínka zapisovat, protože si starší verze
<i>Vimu</i> samy postěžují, že uvedené konfigurační volby neznají):</p>

<pre>
if version &gt;= 700
  set cursorcolumn
  set cursorline
  hi CursorLine   guibg=#2d2d2d
  hi CursorColumn guibg=#2d2d2d
endif
</pre>

<p>Při tvorbě screenshotů 15 a 16 byly použity následující volby, které
zvýraznění učinily více kontrastním:</p>

<pre>
  hi CursorLine   guibg=darkgreen
  hi CursorColumn guibg=darkred
</pre>

<a href="http://i.iinfo.cz/images/42/vim04-15.png"><img src="http://i.iinfo.cz/images/42/vim04-15-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 15: Textový editor Vim se zvýrazněným &bdquo;řádkovým&ldquo;
kurzorem.</i></p>

<a href="http://i.iinfo.cz/images/42/vim04-16.png"><img src="http://i.iinfo.cz/images/42/vim04-16-prev.png" width="370" height="221" alt=" " /></a>
<p><i>Obrázek 16: Textový editor Vim se zvýrazněným &bdquo;řádkovým&ldquo; i
&bdquo;sloupcovým&ldquo; kurzorem.</i></p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Exuberant ctags<br />
<a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a>
</li>

<li>xxd (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>ctags (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags</a>
</li>

<li>cscope (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Novinky ve VIM 7: Úvodní část - speller<br />
<a href="http://www.root.cz/vim-sedm-prvni-cast/">http://www.root.cz/vim-sedm-prvni-cast/</a>
</li>

<li>Novinky ve VIM 7: Skriptovací jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>vim2elvis: Přednosti a nedostaky Elvise v porovnání s Vimem<br />
<a href="http://www.root.cz/clanky/vim2elvis-1/">http://www.root.cz/clanky/vim2elvis-1/</a>
</li>

<li>vim2elvis: Shodné znaky mezi Elvisem a Vimem, nastavení­editoru<br />
<a href="http://www.root.cz/clanky/vim2elvis-2/">http://www.root.cz/clanky/vim2elvis-2/</a>
</li>

<li>Nej... VIM pluginy (1)<br />
<a href="http://www.root.cz/clanky/nej-vim-pluginy/">http://www.root.cz/clanky/nej-vim-pluginy/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Scroll Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Scroll_lock">http://necyklopedie.wikia.com/wiki/Scroll_lock</a>
</li>

<li>Caps Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Caps_Lock">http://necyklopedie.wikia.com/wiki/Caps_Lock</a>
</li>

<li>Avoid the escape key<br />
<a href="http://vim.wikia.com/wiki/Avoid_the_escape_key">http://vim.wikia.com/wiki/Avoid_the_escape_key</a>
</li>

<li>Map caps lock to escape in XWindows<br />
<a href="http://vim.wikia.com/wiki/VimTip166">http://vim.wikia.com/wiki/VimTip166</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2011</small></p>
</body>
</html>

