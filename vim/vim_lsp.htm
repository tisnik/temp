<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Použití Language Server Protocolu v textovém editoru Vim</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Použití Language Server Protocolu v textovém editoru Vim</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Použití Language Server Protocolu v&nbsp;textovém editoru Vim</a></p>
<p><a href="#k02">2. Základní informace o projektu LSP</a></p>
<p><a href="#k03">3. Některé starší projekty založené na podobném principu</a></p>
<p><a href="#k04">*** 4. LSP v&nbsp;Eclipse, Visual Studiu Code a Eclipse Che</a></p>
<p><a href="#k05">5. Python Language Server</a></p>
<p><a href="#k06">6. Kooperace mezi Python Language Serverem a Vimem</a></p>
<p><a href="#k07">7. Využití nových technologií Vimu 8 v&nbsp;pluginu vim-lsp</a></p>
<p><a href="#k08">*** 8. Konfigurace pluginu <strong>vim-lsp</strong></a></p>
<p><a href="#k09">*** 9. Otestování základní funkcionality pluginu <strong>vim-lsp</strong></a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">11. Technologie <i>Omni Completion</i> a další možnosti doplňování textu ve Vimu</a></p>
<p><a href="#k12">12. Nastavení funkce Omni Completion pro plugin vim-lsp</a></p>
<p><a href="#k13">13. Konfigurace klávesové zkratky pro vyvolání omni completion</a></p>
<p><a href="#k14">*** 14. Nastavení automatického doplňování volbou <strong>completeopt</strong></a></p>
<p><a href="#k15">15. Přijdou další protokoly &ndash; tentokrát pro ladění aplikací?</a></p>
<p><a href="#k16">*** 16. Protokol používaný pro připojení GNU Debuggeru</a></p>
<p><a href="#k17">*** 17. VSCode Debug Protocol</a></p>
<p><a href="#k18">18. Ukázka konfiguračního souboru <strong>.vimrc</strong> připraveného pro Python</a></p>
<p><a href="#k19">19. Popis jednotlivých částí konfiguračního souboru</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Použití Language Server Protocolu v&nbsp;textovém editoru Vim</h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní informace o projektu LSP</h2>

<p>Language Server Protocol je otevřený standard navržený takovým způsobem, aby
umožňoval komunikaci mezi textovými editory popř.&nbsp;mezi integrovanými
vývojovými prostředími (IDE) na jedné straně a různými typy programátorských
nástrojů na straně druhé. Mezi nástroje, které je díky existenci LSP možné
z&nbsp;editoru/IDE použít, mohou patřit zejména různé <a
href="https://en.wikipedia.org/wiki/Lint_%28software%29">lintery</a>, statické
analyzátory kódu, programy pro kontrolu stylu zápisu programů, nástroje
umožňující refaktoring zdrojového kódu, teoreticky i profilery atd. Nesmíme
samozřejmě zapomenout na dnes již všemi programátory očekávané nástroje pro
automatické doplňování jmen funkcí, metod, objektů atd.,
&bdquo;inteligentní&ldquo; vyhledávání ve zdrojovém kódu, doskoky na definici
funkce, objektu nebo proměnné apod. Všechny tyto nástroje mohou komunikovat
s&nbsp;editorem/IDE přímo (pokud obsahují podporu pro LSP), nebo je možné
využít nějaký obecnější nástroj, který je většinou nazývaný Language Server a
který podporuje větší množství funkcí (typicky vyhledání definic, refaktoring a
automatické doplňování; samozřejmě v&nbsp;závislosti na konkrétní
implementaci).</p>

<p><div class="rs-tip-major">Poznámka: samotný protokol je nezávislý na tom,
jestli Language Server běží na stejném počítači jako samotný editor/IDE, či zda
běží na nějakém vzdáleném serveru (jako služba). V&nbsp;prvním případě
samozřejmě budou odezvy rychlejší a doba odezvy by v&nbsp;ideálním případě
neměla být uživatelem vůbec zaznamenána (tj.&nbsp;prostředí musí reagovat do
max.&nbsp;jedné sekundy). Ve druhém případě se může jednat o sofistikovanější
nástroje, které například používají vlastní databázi, AI modul atd.</div></p>

<p>Samotný protokol je založen na formátu JSON. Při použití LSP je textový
editor či IDE považován za klienta a language server pochopitelně vystupuje
v&nbsp;roli serveru, který klientovi poskytuje tzv.&nbsp;&bdquo;language
service&ldquo;. Mezi klientem a serverem probíhá komunikace s&nbsp;využitím tří
typů zpráv:</p>

<ui>

<li>Požadavek (<i>request</i>) je posílán klientem na server. Server musí na
tento požadavek odpovědět. Používá se <a
href="https://en.wikipedia.org/wiki/JSON-RPC">protokol JSON-RPC</a>.</li>

<li>Odpověď (<i>response</i>) serveru na požadavek klienta. Klient vždy dokáže
spárovat svůj požadavek s&nbsp;odpovědí serveru (to je základ JSON-RPC).</li>

<li>Oznamovací zprávy (<i>notification</i>) může posílat jak klient, tak i
server, přičemž se na tyto zprávy nemusí posílat odpověď. Klient (editor) může
například serveru ohlásit, že uživatel posunul kurzor na další funkci, ale
prozatím od něj neočekává žádnou další službu.</li>

</ui>

<p>Příklad komunikace (na levé straně je klient/editor, na straně pravé
language server):</p>

<pre>
textDocument/didOpen -&gt;
textDocument/didChange -&gt;
&lt;- textDocument/publishDiagnostics
&lt;- textDocument/didClose
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Některé starší projekty založené na podobném principu</h2>

<p>Myšlenka, na které je <i>language server protocol</i> postaven, samozřejmě
není nijak nová ani převratná, protože se podobný princip využíval již dříve,
například v&nbsp;textových editorech <a
href="https://www.root.cz/n/vim/">Vim</a> a <a
href="https://www.root.cz/n/emacs/">Emacs</a>, které takto mohly komunikovat
s&nbsp;nástroji běžícími na pozadí (daemons), viz též <a
href="https://github.com/Microsoft/language-server-protocol/wiki/Protocol-History">https://github.com/Microsoft/language-server-protocol/wiki/Protocol-History</a>.
Příkladem může být integrace nástroje Jedi do Vimu, o níž jsme se nedávno
zmínili v&nbsp;článku <a
href="https://www.root.cz/clanky/knihovna-jedi-doplnovani-kodu-a-staticka-analyza-kodu-v-pythonu/#k15">Knihovna
Jedi: doplňování kódu a statická analýza kódu v Pythonu</a>.</p>

<p><div class="rs-tip-major">Poznámka: to, že je LSP vůbec reálně využitelný,
je do značné míry zajištěno díky vysokému výpočetnímu výkonu současných
(desktopových) počítačů. Dříve byly podobné nástroje velmi úzce propojeny se
samotným editorem právě z&nbsp;toho důvodu, aby byla odezva editoru/IDE
dostatečně rychlá. Na druhou stranu se samozřejmě nejedná o univerzální řešení
a dnes již například IDE specializované na jediný jazyk nebývají tolik
oblíbena, jako v&nbsp;minulosti, což je kvůli rostoucí složitosti a
provázanosti technologií v&nbsp;IT pochopitelné.</div></p>

<a href="https://www.root.cz/obrazek/304891/"><img src="https://i.iinfo.cz/images/373/fp-nubmers-9-prev.png" class="image-304891" alt="&#160;" width="370" height="231" /></a>
<p><i>Obrázek 2: Dnes již historické IDE Turbo Pascalu určené pouze pro jediný
jazyk. Prakticky všechny nástroje jsou nedílnou součástí tohoto IDE
(s&nbsp;výjimkou externích nástrojů grep a Turbo Debugger).</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. LSP v&nbsp;Eclipse, Visual Studiu Code a Eclipse Che</h2>

<p></p>
https://projects.eclipse.org/projects/technology.lsp4e



<p><a name="k05"></a></p>
<h2 id="k05">5. Python Language Server</h2>

<p>V&nbsp;dalších kapitolách si ukážeme, jakým způsobem je možné integrovat
language server protocol do Vimu s&nbsp;využitím pluginu
<strong>vim-lsp</strong>. Aby bylo možné použít reálné příklady, použijeme
jednu konkrétní <a
href="https://microsoft.github.io/language-server-protocol/implementors/servers/">implementaci
LSP</a> určenou pro programovací jazyk Python. Tato implementace se jmenuje
jednoduše <i>Python Language Server</i>, kráceně PYLS či jen pyls. Instalace
Python Language Serveru je jednoduchá. Postačuje použít nástroj
<strong>pip</strong> nebo <strong>pip3</strong> a provést instalaci lokálně pro
právě přihlášeného uživatele:</p>

<pre>
$ <strong>pip3 install --user python-language-server</strong>
</pre>

<p>Průběh instalace závisí na tom, zda již máte nainstalovány všechny závislé
balíčky či nikoli. V&nbsp;mém případě jsem již některé balíčky měl
nainstalované (minimálně od doby psaní <a
href="https://www.root.cz/clanky/knihovna-jedi-doplnovani-kodu-a-staticka-analyza-kodu-v-pythonu/">článku
o Jedi</a>), takže instalace byla prakticky okamžitá:</p>

<pre>
Collecting python-language-server
  Downloading https://files.pythonhosted.org/packages/9f/1d/2817b5dc2dd77f897410a11c1c9e2a6d96b3273c53d4219dd9edab7882af/python-language-server-0.21.2.tar.gz (51kB)
Requirement already satisfied: future&gt;=0.14.0 in ./.local/lib/python3.6/site-packages (from python-language-server)
Requirement already satisfied: jedi&gt;=0.12 in ./.local/lib/python3.6/site-packages (from python-language-server)
Requirement already satisfied: python-jsonrpc-server in ./.local/lib/python3.6/site-packages (from python-language-server)
Requirement already satisfied: pluggy in /usr/lib/python3.6/site-packages (from python-language-server)
Requirement already satisfied: parso&gt;=0.3.0 in ./.local/lib/python3.6/site-packages (from jedi&gt;=0.12-&gt;python-language-server)
Installing collected packages: python-language-server
  Running setup.py install for python-language-server: started
    Running setup.py install for python-language-server: finished with status 'done'
Successfully installed python-language-server-0.21.2
</pre>

<p>Pro velmi rychlou kontrolu, zda instalace proběhla v&nbsp;pořádku, si můžete
Python Language Server spustit a zjistit, zda příkaz vůbec existuje
popř.&nbsp;zda při spuštění nedojde k&nbsp;nějaké chybě:</p>

<pre>
$ <strong>pyls</strong>
</pre>

<p>Prozatím můžeme server ukončit pomocí Ctrl+C, protože dále popisovaný plugin
<i>vim-lsp</i> si server dokáže spustit sám automaticky.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Kooperace mezi Python Language Serverem a Vimem</h2>

<p>V&nbsp;tomto okamžiku máme nainstalován jak editor Vim (doufejme), tak i
Python Language Server. Zbývá nám tedy jen &bdquo;maličkost&ldquo; &ndash;
propojit tyto dva nástroje a začít používat všechny funkce Python Language
Serveru přímo z&nbsp;Vimu. K&nbsp;tomuto účelu je možné použít plugin
<i>vim-lsp</i>, který naleznete na GitHubu, konkrétně na adrese <a
href="https://github.com/prabirshrestha/vim-lsp">https://github.com/prabirshrestha/vim-lsp</a>.
Instalaci je možné provést různými způsoby (například využít různé správce
balíčků), ovšem lze zůstat u konzervativní metody a rozbalit všechny soubory
přímo do adresáře <strong>~./vim</strong>. Stejným způsobem (rozbalením
popř.&nbsp;prostým naklonováním) je nutné nainstalovat i závislý plugin <a
href="https://github.com/prabirshrestha/async.vim">async.vim</a>.</p>

<p>V&nbsp;podadresáři <strong>~/.vim</strong> by měla být vytvořena následující
adresářová struktura (samozřejmě zde můžeme mít uloženy další pluginy, ostatně
i já zde mám nainstalovány například slovníky):</p>

<pre>
.
├── autoload
│   ├── async
│   │   └── job.vim
│   ├── lsp
│   │   ├── capabilities.vim
│   │   ├── client.vim
│   │   ├── omni.vim
│   │   ├── ui
│   │   │   ├── vim
│   │   │   │   ├── diagnostics
│   │   │   │   │   └── echo.vim
│   │   │   │   ├── diagnostics.vim
│   │   │   │   ├── hover.vim
│   │   │   │   ├── output.vim
│   │   │   │   ├── signs.vim
│   │   │   │   └── utils.vim
│   │   │   └── vim.vim
│   │   ├── utils
│   │   │   └── step.vim
│   │   └── utils.vim
│   └── lsp.vim
├── doc
│   └── vim-lsp.txt
├── ftplugin
│   └── lsp-hover.vim
├── plugin
│   └── lsp.vim
├── pythonx
├── spell
│   ├── cs.utf-8.add
│   ├── cs.utf-8.add.spl
│   ├── cs.utf-8.spl
│   ├── en.utf-8.add
│   └── en.utf-8.add.spl
└── syntax
</pre>

<p>Po spuštění Vimu a napsání:</p>

<pre>
:Lsp<strong>&lt;Tab&gt;</strong>
</pre>

<p>by se měly vypsat všechny nové příkazy začínající prefixem
&bdquo;Lsp&ldquo;.</p>

<p>Následuje dokončení instalace, zejména indexace nápovědy. Spusťte textový
editor Vim a zadejte příkaz:</p>

<pre>
:helptags ~/.vim/doc
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Využití nových technologií Vimu 8 v&nbsp;pluginu vim-lsp</h2>

<p>Na tomto místě je vhodné upozornit na to, že plugin <i>vim-lsp</i> vyžaduje
pro svou korektní činnost Vim 8. Ve starších verzích nebude modul fungovat. Je
tomu tak z&nbsp;toho prostého důvodu, že (jak již víme) se pro komunikaci mezi
LSP klientem a LSP serverem používá <i>JSON-RPC</i> a funkce pro serializaci a
deserializaci dat do JSONu nalezneme až ve skriptovacím engine Vimu 8.
Pravděpodobně by bylo možné si tyto funkce dopsat i pro Vim 6 nebo Vim 7, ovšem
výhodnější je update editoru.</p>

<p>Jen pro krátké připomenutí informací <a
href="https://mojefedora.cz/textovy-editor-vim-8-dokonceni-popisu-novinek-ve-skriptovacim-engine/">z&nbsp;článku
o novinkách ve Vimu 8</a>: do skriptovacího engine Vimu byly přidány čtyři nové
funkce, které slouží pro převod datových struktur VimScriptu do JSON formátu a
zpět. Proč je vlastně tato novinka tak důležitá? Souvisí totiž s&nbsp;další
novou technologií, konkrétně s&nbsp;úlohami (<i>jobs</i>) a kanály
(<i>channels</i>). Úlohy umožňují přesně definovaným způsobem vytvářet pluginy
(i externí pluginy) s&nbsp;tím, že tyto pluginy mohou běžet asynchronně,
tj.&nbsp;částečně nezávisle na samotném Vimu. Důležité je, že pluginy
s&nbsp;Vimem komunikují právě přes JSON formát, což je pěkně navržené řešení,
protože JSON je dnes podporovaný v&nbsp;prakticky všech relevantních
programovacích jazycích, v&nbsp;nichž se externí pluginy většinou píšou
(typicky se jedná o Python, ale lze použít i jazyk Lua, JavaScript/TypeScript
apod.).</p>

<p>Skriptovací engine Vimu nabízí programátorům dvě funkce určené pro převod
datových struktur do formátu JSON (<i>encode</i>) a dvě funkce určené pro
parsování JSON dat do interních struktur VimScriptu (<i>decode</i>). Dvě
varianty jsou implementovány z&nbsp;toho prostého důvodu, že někdy je
zapotřebí, aby byly klíče objektů (či slovníků) reprezentovány řetězci a jinde
se může jednat o identifikátory bez uvozovek (záleží na konkrétní situaci, ne
vždy jsou totiž klíče současně i platnými identifikátory):</p>

<table>
<tr><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>json_encode(výraz)</td><td>převod výrazu do JSON formátu, který se vrátí ve formě řetězce</td></tr>
<tr><td>json_decode(řetězec)</td><td>opak předchozí funkce, parsování řetězce s daty uloženými v&nbsp;JSON formátu do interních datových struktur VimScriptu</td></tr>
<tr><td>js_encode(výraz)</td><td>podobné funkci json_encode(), ovšem klíče nejsou umístěny v&nbsp;uvozovkách</td></tr>
<tr><td>js_decode(řetězec)</td><td>podobné funkci json_decode(), ovšem při parsingu se nevyžaduje, aby byly klíče umístěny v&nbsp;uvozovkách</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: převod do JSON formátu se někdy nazývá
<i>serializace</i>, zpětný převod pak pochopitelně
<i>deserializace</i>.</div></p>

<p>V&nbsp;pluginu <i>vim-lsp</i> nalezneme funkce <strong>json_encode</strong>
a <strong>json_decode</strong>.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Konfigurace pluginu <strong>vim-lsp</strong></h2>

<pre>
vim-lsp

================================================================================
CONTENTS                                                  vim-lsp-contents

    Introduction                vim-lsp-introduction
    Install                     vim-lsp-install
    Language Servers            vim-lsp-language-servers
      Configure                   vim-lsp-configure-source
      Wiki                        vim-lsp-configure-wiki
    Options                     vim-lsp-options
      g:lsp_auto_enable           g:lsp_auto_enable
      g:lsp_preview_keep_focus    g:lsp_preview_keep_focus
    Functions                   vim-lsp-functions
      enable                      vim-lsp-enable
      disable                     vim-lsp-disable
      register_server             vim-lsp-register_server
      stop_server                 vim-lsp-stop_server
    Commands                    vim-lsp-commands
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Otestování základní funkcionality pluginu <strong>vim-lsp</strong></h2>

:echo lsp#get_server_info('pyls')
{'cmd': function('<lambda>1'), 'name': 'pyls', 'whitelist': ['python']}

:echo lsp#get_server_status('pyls')
not running

:e test.py

:echo lsp#get_server_status('pyls')
running



$ ps -ax |grep pyls
20787 ?        Ssl    0:01 /usr/bin/python3 /home/ptisnovs/.local/bin/pyls
20800 pts/3    S+     0:00 grep pyls


<p><a name="k10"></a></p>
<h2 id="k10">10. Dostupné příkazy</h2>

<table>
<tr><th></th><th></th></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
<tr><td></td><td></td></tr>
</table>

LspDocumentDiagnostics
LspDefinition
LspDocumentFormat
LspDocumentRangeFormat
LspDocumentSymbol
LspHover
LspNextError
LspPreviousError
LspImplementation
LspReferences
LspRename
LspTypeDefinition
LspWorkspaceSymbol
LspStatus



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
def hello_world():
    print("Hello world")


def hex():
    """Foobar"""
    print("HEX")

hex(40)
hello_world
</pre>

:LspHover
:LspDefinition
:LspDocumentDiagnostic
:LspReferences

:imap <tab> <C-X><C-O>



<p><a name="k11"></a></p>
<h2 id="k11">11. Technologie <i>Omni Completion</i> a další možnosti doplňování textu ve Vimu</h2>

<p>Velmi užitečnou vlastností textového editoru <i>Vim</i>, kterou se dnes
budeme v&nbsp;souvislosti s&nbsp;LSP zabývat, je technologie nazvaná
&bdquo;omni completion&ldquo; (někdy se setkáme i s&nbsp;jednoslovným zápisem
&bdquo;omnicompletion&ldquo;). Tato technologie, která se ve Vimu objevila až
<a
href="http://vimdoc.sourceforge.net/htmldoc/version7.html#new-omni-completion">v&nbsp;jeho
sedmé verzi</a>, rozšiřuje možnosti automatického doplňování kódu (či obecně
textu) o externí nástroje. Připomeňme si, že Vim nabízí ve vkládacím a
přepisovacím režimu klávesovou zkratku <strong>Ctrl+P</strong>
(<i>previous</i>) pro nalezení a doplnění slova nacházejícího se před kurzorem
a taktéž zkratku <strong>Ctrl+N</strong> (<i>next</i>), která slouží ke
stejnému účelu, ovšem hledá slovo pro doplnění v&nbsp;textu za kurzorem (pokud
je k&nbsp;dispozici více možností, zobrazí se v&nbsp;kontextovém menu).
V&nbsp;praxi tedy postačuje napsat jen začátek slova a stlačit
<strong>Ctrl+P</strong> nebo <strong>Ctrl+N</strong>. Rozsah vyhledávání se
specifikuje volbou <strong>complete</strong> popsanou <a
href="http://vimdoc.sourceforge.net/htmldoc/options.html#'complete'">zde</a> a
samozřejmě i ve vestavěné nápovědě.</p>

<a href="http://i.iinfo.cz/images/257/vim03-10.png"><img src="http://i.iinfo.cz/images/257/vim03-10-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek XX: Doplňování kódu nebo libovolného textu pomocí příkazů CTRL+P
a CTRL+N zavolaných v&nbsp;režimu zápisu (insert mode).</i></p>

<p>Ovšem možnosti automatického doplňování kódu jsou ve skutečnosti daleko
větší a textový editor <i>Vim</i> pro ně dokonce nabízí samostatný režim
vyvolávaný z&nbsp;vkládacího či přepisovacího režimu klávesovou zkratkou
<strong>Ctrl+X</strong> (právě z&nbsp;tohoto důvodu se tento režim nazývá
<i>^X-mode</i> nebo též <i>CTRL-X</i> mode). Po stlačení této klávesové zkratky
se v&nbsp;příkazové řádce objeví řádkové menu s&nbsp;příkazy platnými pro režim
doplňování:</p>

***
<p><i>Obrázek XX: Menu s&nbsp;dostupnými klávesovými zkratkami platnými
v&nbsp;režimu CTRL-X.</i></p>

<p>Všechny dostupné příkazy jsou vypsány v&nbsp;tabulce níže:</p>

<table>
<tr><th> #</th><th>Příkaz</th><th>Význam</th></tr>
<tr><td> 1</td><td>Ctrl+X Ctrl+L</td><td>nalezení a doplnění celého (shodného) řádku, užitečné především v&nbsp;případě editace některých typů konfiguračních souborů</td></tr>
<tr><td> 2</td><td>Ctrl+X Ctrl+N</td><td>doplnění slova, které se nalézá v&nbsp;aktuálně editovaném souboru</td></tr>
<tr><td> 3</td><td>Ctrl+X Ctrl+K</td><td>podobné Ctrl+N, ovšem slova se hledají v&nbsp;souborech specifikovaných pomocí konfiguračního parametru <strong>dictionary</strong> (jedná se o běžný textový soubor se seznamem slov)</td></tr>
<tr><td> 4</td><td>Ctrl+X Ctrl+T</td><td>podobné Ctrl+T, ovšem slova se hledají v&nbsp;souborech specifikovaných pomocí konfiguračního parametru <strong>thesaurus</strong></td></tr>
<tr><td> 5</td><td>Ctrl+X Ctrl+I</td><td>podobné Ctrl+N, ovšem prohledávají se i všechny vkládané (included) soubory</td></tr>
<tr><td> 6</td><td>Ctrl+X Ctrl+]</td><td>vyhledávání v&nbsp;seznamu značek</td></tr>
<tr><td> 7</td><td>Ctrl+X Ctrl+F</td><td>doplnění názvu souboru a/nebo cesty, postačuje například zadat text ~/ za nímž následuje klávesová zkratka Ctrl+X Ctrl+F a zobrazí se výpis souborů v&nbsp;domácím adresáři</td></tr>
<tr><td> 8</td><td>Ctrl+X Ctrl+D</td><td>vyhledání definice makra a doplnění jména tohoto makra</td></tr>
<tr><td> 9</td><td>Ctrl+X Ctrl+U</td><td>zavolání funkce zadané v&nbsp;konfiguračním parametru <strong>completefunc</strong>, které se předá právě editovaný text</td></tr>
<tr><td>10</td><td>Ctrl+X Ctrl+O</td><td>vyvolání funkce <i>omni completion</i> popsané v&nbsp;následující kapitole (dostupné od Vimu 7)</td></tr>
</table>

<a href="http://i.iinfo.cz/images/257/vim03-11.png"><img src="http://i.iinfo.cz/images/257/vim03-11-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek xx: Doplnění názvu souboru v&nbsp;pracovním adresáři pomocí
příkazu <strong>CTRL+X</strong> <strong>CTRL+F</strong>.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Nastavení funkce Omni Completion pro plugin vim-lsp</h2>

<p><a href="#k11">V&nbsp;předchozí kapitole</a> jsme si řekli, že
s&nbsp;využitím klávesové zkratky <strong>Ctrl+X Ctrl+O</strong> lze ve
vkládacím a přepisovacím režimu zavolat technologii &bdquo;omni
completion&ldquo;. Tuto technologii lze využít pro (pseudo)inteligentní
doplňování textů založeném na analýze zdrojových kódů. Podobnou funkci můžeme
najít v&nbsp;nejrůznějších integrovaných vývojových prostředích (Eclipse,
Netbeans, Visual Studio, Visual Studio Code, nověji například i v&nbsp;Atomu),
v&nbsp;nichž lze doplňovat například jména funkcí a metod, názvy prvků ve
strukturách či uniích, atributů objektů, metod objektů či tříd, jmen balíčků
atd. Plugin <i>vim-lsp</i> tuto funkci samozřejmě nabízí; její jméno je
<strong>lsp#complete</strong>. Aby byla tato funkce skutečně použita po stisku
<strong>Ctrl+X Ctrl+O</strong> je nutné tuto funkci přiřadit konfigurační volbě
<strong>omnifunc</strong>.</p>

<p>Implicitně tato funkce není specifikována vůbec, o čemž se můžete velmi
snadno přesvědčit při spuštění &bdquo;prázdného&ldquo; Vimu:</p>

<pre>
:set omnifunc?
   omnifunc=
</pre>

<p>Naopak při editaci tohoto článku (v&nbsp;HTML) je funkce nastavena, a to
konkrétně standardním filetype pluginem <strong>html.vim</strong>:</p>

<pre>
:set omnifunc?
   omnifunc=htmlcomplete#CompleteTags
</pre>

<p>V&nbsp;případě, že chceme použít možnosti nabízené pluginem <i>vim-lsp</i>,
můžeme <strong>omnifunc</strong> nastavit globálně (pro celý Vim). To se
provede jednoduše příkazem:</p>

<pre>
:set omnifunc=lsp#complete
</pre>

<p>Popř.&nbsp;lze stejnou funkci nastavit pouze lokálně pro právě aktivní
buffer:</p>

<pre>
:setlocal omnifunc=lsp#complete
</pre>

<p>Samozřejmě nemusíme toto nastavení stále provádět ručně po otevření každého
zdrojového souboru, ale můžeme do konfiguračního souboru
<strong>.vimrc</strong> přidat příkaz, který se automaticky zavolá při otevření
souboru s&nbsp;koncovkou *.py (Python):</p>

<pre>
augroup __python__
  au!
  au BufRead,BufNewFile *.py setlocal omnifunc=lsp#complete
augroup END
</pre>

<p><div class="rs-tip-major">Poznámka: další možnosti nastavení budou popsány
<a href="#k18">v&nbsp;osmnácté</a> a <a href="#k19">devatenácté
kapitole</a>.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Konfigurace klávesové zkratky pro vyvolání omni completion</h2>

<p>Výše uvedená konfigurace sice teoreticky postačuje po prakticky plnohodnotné
využití možností pluginu <i>vim-lsp</i>, ovšem skalní uživatelé Vimu
pravděpodobně očekávají nějaká vylepšení, která by Vim přiblížila
k&nbsp;moderním IDE. Týká se to mj.&nbsp;i klávesové zkratky použité pro
vyvolání funkce <i>omni completion</i>, protože <strong>Ctrl+X</strong>
<strong>Ctrl+O</strong> je spíše &bdquo;emacsovina&ldquo; :-) Řešení samozřejmě
existuje několik. Pokud se ve zdrojových textech nikde nepoužívá tabulátor
(záleží samozřejmě na zvolené &bdquo;štábní kultuře&ldquo; a taktéž i na
zvyklostech platící pro daný programovací jazyk), může pomoci následující
mapování umožňující, aby se místo <strong>Ctrl+X</strong>
<strong>Ctrl+O</strong> mohla stlačit pouze klávesa <strong>Tab</strong>:</p>

<pre>
:imap &lt;Tab&gt; &lt;C-X&gt;&lt;C-O&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě Pythonu se sice znak Tab
(přesněji HT &ndash; horizontal tab) ve zdrojových kódech nemá používat, ovšem
klávesa Tab může sloužit pro vkládání mezer odpovídajících jednomu odsazení.
Záleží tudíž jen na vás, zda si tuto klávesu budete &bdquo;rezervovat&ldquo;
pro omni completion či nikoli. Alternativně je možné napsat funkci, která bude
na začátku řádku klávesu Tab používat pro vkládání mezer a naopak po stisku Tab
za písmenem pro zavolání omni completion. Podobné řešení bylo použito
v&nbsp;pluginu <a
href="https://github.com/vim-scripts/IndentTab/blob/master/autoload/IndentTab.vim">IndentTab</a>
popř.&nbsp;pluginu <a
href="https://github.com/vim-scripts/Smart-Tabs">Smart-Tabs</a>. Další ideu
naleznete například na stránce <a
href="http://vim.wikia.com/wiki/Smart_mapping_for_tab_completion">Smart mapping
for tab completion</a></div></p>

<p>V&nbsp;případě, že používáte GVim nebo KVim, lze namísto klávesy
<strong>Tab</strong> použít například i klávesovou zkratku
<strong>Ctrl+Space</strong>:</p>

<pre>
:imap &lt;C-Space&gt; &lt;C-X&gt;&lt;C-O&gt;
</pre>

<p>Na terminálech sice většinou není klávesová zkratka
<strong>Ctrl+Space</strong> korektně rozpoznána, ale můžete se pokusit zjistit,
zda terminál namísto <strong>Ctrl+Space</strong> nerozpozná
<strong>Ctrl+@</strong>, tj.&nbsp;přesněji řečeno, zda obě klávesové zkratky
nejsou rozpoznány jako shodný kód. Pokud tomu tak je, můžete mapování změnit
na:</p>

<pre>
:imap &lt;C-@&gt; &lt;C-X&gt;&lt;C-O&gt;
</pre>

<p>a používat <strong>Ctrl+Space</strong> i v&nbsp;terminálu.</p>

<p><div class="rs-tip-major">Poznámka: technicky se klávesovou zkratkou
<strong>Ctrl+@</strong> zadává ASCII kód NUL, tj.&nbsp;první znak v&nbsp;ASCII
tabulce, protože znak @ má ASCII kód 64 a stiskem modifikátoru
<strong>Ctrl</strong> snižujeme ASCII kód právě o hodnotu 64. To je také důvod,
proč stisk <strong>Ctrl+I</strong> tak odpovídá znaku HT (<i>Horizontal
Tab</i>), <strong>Ctrl+H</strong> znaku BS (<i>Backspace</i>),
<strong>Ctrl+[</strong> řídicímu znaku ESC, <strong>Ctrl+M</strong> konci řádku
(CR) atd. Vše osvětlí pohled na <a
href="https://en.wikipedia.org/wiki/ASCII#Character_set">ASCII
tabulku</a>.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Nastavení automatického doplňování volbou <strong>completeopt</strong></h2>

<p></p>

<pre>
:set completeopt=longest,menuone
</pre>

<p></p>

<pre>
:inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
</pre>

<p></p>

<pre>
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Přijdou další protokoly &ndash; tentokrát pro ladění aplikací?</h2>

<p>Po přečtení předchozích kapitol možná čtenáře napadlo, že existence LSP je
sice skvělá a užitečná věc pro samotné psaní programového kódu, pro hledání
chyb, formátování kódu, refaktorizaci, statickou analýzu atd., ovšem jedna
podstatná věc v&nbsp;protokolu chybí. Jedná se samozřejmě o možnosti ladění
aplikací. Bylo by pravděpodobně velmi užitečné mít k&nbsp;dispozici jeden
protokol, který by umožňoval spustit libovolný debugger (například GDB nebo <a
href="https://lldb.llvm.org/">LLDB</a>, <a
href="https://github.com/rocky/python2-trepan">debugger Pythonu</a> atd. atd.)
a ovládat tento debugger jedním standardizovaným způsobem. Snahy o vytvoření
takového protokolu samozřejmě nejsou nijak nové, protože podobný přístup
nalezneme například v&nbsp;již zmíněném <a href="#k16">GNU Debuggeru</a>, který
lze spustit a ovládat z&nbsp;jiné aplikace (IDE) a navíc obsahuje i možnost
ladění aplikací běžících na jiném počítači přes <i>GDB Remote Serial
Protocol</i>. Novější přístup nabízí VSCode Debug protokol, s&nbsp;jehož
základy se seznámíme <a href="#k17">v&nbsp;sedmnácté kapitole</a>.</p>

<a href="https://www.root.cz/obrazek/297116/"><img src="https://i.iinfo.cz/images/627/gdb1-11-prev.png" class="image-297116" alt="&#160;" width="346" height="270" /></a>
<p><i>Obrázek xx: Příklad komunikace aplikace s&nbsp;GUI (zde Nemiver)
s&nbsp;GNU Debuggerem.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Protokol používaný pro připojení GNU Debuggeru</h2>

<p></p>

<a href="https://www.root.cz/obrazek/297106/"><img src="https://i.iinfo.cz/images/627/gdb1-1-prev.png" class="image-297106" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek xx: Klasické rozhraní GNU Debuggeru ovládaného z&nbsp;příkazového
řádku.</i></p>

<a href="https://www.root.cz/obrazek/297119/"><img src="https://i.iinfo.cz/images/627/gdb1-14-prev.png" class="image-297119" alt="&#160;" width="370" height="256" /></a>
<p><i>Obrázek xx: GNU Debugger ovládaný z&nbsp;aplikace KDbg.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. VSCode Debug Protocol</h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Ukázka konfiguračního souboru <strong>.vimrc</strong> připraveného pro Python</h2>

<p>Podívejme se nyní na to, jak by mohl vypadat konfigurační soubor
<strong>.vimrc</strong> připravený pro práci s&nbsp;Pythonem, přičemž jediným
externím pluginem, který použijeme, bude právě modul <strong>vim-lsp</strong>.
Snažil jsem se o minimalizaci počtu konfiguračních voleb v&nbsp;tomto souboru.
Jednotlivé části konfiguračního souboru budou popsány <a
href="#k19">v&nbsp;navazující kapitole</a>:</p>

<pre>
<i>" .vimrc by Tisnik</i>
&nbsp;
<i>" zakladni volby</i>
set nocompatible                <i>" rezim nekompatibilni s vi, pouzivejte jako prvni volbu</i>
set encoding=utf-8              <i>" interni format znaku ve Vimu (neovlivnuje nacitani a ukladani)</i>
set novisualbell                <i>" pri chybe se nepipa, ale zablika obrazovka</i>
set hlsearch                    <i>" zvyrazneni vysledku hledani</i>
set incsearch                   <i>" zvyrazneni pri hledani</i>
set showmatch                   <i>" bude se zobrazovat prislusna druha zavorka</i>
set showmode                    <i>" bude se zobrazovat rezim cinnosti (-- INSERT --, -- REPLACE --, -- VISUAL -- ...)</i>
set showcmd                     <i>" bude se zobrazovat prave zadavany prikaz (3dd ...)</i>
set ruler                       <i>" bude se zobrazovat pravitko s pozici kurzoru</i>
set shiftwidth=4                <i>" pocet mezer pri posunu bloku pomoci &lt;&lt; a &gt;&gt;</i>
set expandtab                   <i>" expanze znaků Tab na mezery</i>
set tabstop=4                   <i>" pocet mezer odpovidajicich znaku Tab</i>
set bs=2                        <i>" backspace maze vse</i>
&nbsp;
<i>" adresare pro docasne soubory, zalohy atd.</i>
set backupdir=~/temp,.          <i>" adresar pro ulozeni zaloznich souboru</i>
set directory=~/temp,.          <i>" adresar pro swapovaci soubor</i>
set viminfo='20,\"50,n~/temp/_viminfo
&nbsp;
<i>" nastaveni pro Python</i>
augroup __python__
  au!
  au BufRead,BufNewFile *.py map &lt;F1&gt; :LspStatus&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F2&gt; :!python2 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F3&gt; :!python3 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F4&gt; :LspDocumentDiagnostics&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F5&gt; :LspHover&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F6&gt; :LspDocumentSymbol&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F8&gt; :!pep8 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F9&gt; :!pydocstyle ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F10&gt; :!radon cc ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F11&gt; :!pudb3 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F12&gt; &lt;C-W&gt;&lt;C-Z&gt;
  au BufRead,BufNewFile *.py imap &lt;F12&gt; &lt;C-O&gt;&lt;C-W&gt;&lt;C-Z&gt;
  au BufRead,BufNewFile *.py imap &lt;Tab&gt; &lt;C-X&gt;&lt;C-O&gt;
  au BufRead,BufNewFile *.py highlight OverLength ctermbg=yellow ctermfg=white guibg=#592929
  au BufRead,BufNewFile *.py match OverLength /\%99v.\+/
  au BufRead,BufNewFile *.py setlocal omnifunc=lsp#complete
augroup END
&nbsp;
<i>" spusteni Python Language Serveru</i>
if (executable('pyls'))
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info-&gt;['pyls']},
        \ 'whitelist': ['python']
        \ })
endif
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Popis jednotlivých částí konfiguračního souboru</h2>

<p>První část souboru <strong>.vimrc</strong> obsahuje obecná nastavení,
z&nbsp;nichž se Pythonu týká především nastavení chování znaku Tab. Podle <a
href="https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces">PEP 8</a> se
nemají znaky Tab ve zdrojových kódech používat, takže nastavíme expanzi Tabů na
mezery a určíme odsazení bloků o čtyři znaky (pro posun bloků doleva a doprava
budou sloužit příkazy &lt;&lt; a &gt;&gt;, popř.&nbsp;jen &lt; a &gt; ve
chvíli, kdy je blok vybrán vizuálně):</p>

<pre>
set shiftwidth=4                <i>" pocet mezer pri posunu bloku pomoci &lt;&lt; a &gt;&gt;</i>
set expandtab                   <i>" expanze znaků Tab na mezery</i>
set tabstop=4                   <i>" pocet mezer odpovidajicich znaku Tab</i>
</pre>

<p>Dále nastavíme několik klávesových zkratek pro vyvolání externích příkazů.
První dvě zkratky jsou mnemotechnické:</p>

<table>
<tr><th>Režim</th><th>Klávesa</th><th>Funkce</th></tr>
<tr><td>normální</td><td>F2</td><td>spuštění aktuálně editovaného souboru Pythonem 2</td></tr>
<tr><td>normální</td><td>F3</td><td>spuštění aktuálně editovaného souboru Pythonem 3</td></tr>
<tr><td>normální</td><td>F8</td><td>kontrola aktuálně editovaného souboru nástrojem pep8</td></tr>
<tr><td>normální</td><td>F9</td><td>kontrola zápisu dokumentačních řetězců (existence, styl)</td></tr>
<tr><td>normální</td><td>F10</td><td>změření cyklomatické složitosti nástrojem <a href="https://www.root.cz/clanky/pouziti-nastroje-radon-pro-zjisteni-cyklomaticke-slozitosti-zdrojovych-kodu/">radon</a></td></tr>
<tr><td>normální</td><td>F11</td><td>spuštění aktuálně editovaného souboru <a href="https://www.root.cz/clanky/pudb-vykonny-debugger-pro-python-s-retro-uzivatelskym-rozhranim/">debuggerem pydb</a></td></tr>
</table>

<pre>
  au BufRead,BufNewFile *.py map &lt;F2&gt; :!python2 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F3&gt; :!python3 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F8&gt; :!pep8 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F9&gt; :!pydocstyle ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F10&gt; :!radon cc ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F11&gt; :!pudb3 %&lt;cr&gt;
</pre>

<p>Třetí skupina klávesových zkratek volá funkce pluginu <i>vim-lsp</i>, o
nichž jsme se zmínili výše:</p>

<table>
<tr><th>Režim</th><th>Klávesa</th><th>Funkce</th></tr>
<tr><td>normální</td><td>F1</td><td>LspStatus &ndash; stav LSP, připojení k&nbsp;serveru atd.</td></tr>
<tr><td>normální</td><td>F4</td><td>LspDocumentDiagnostics &ndash; analýza a nalezení případných chyb ve zdrojovém kódu</td></tr>
<tr><td>normální</td><td>F5</td><td>LspHover &ndash; informace o symbolu, na němž je kurzor</td></tr>
<tr><td>normální</td><td>F6</td><td>LspDocumentSymbol &ndash; nalezení symbolů začínajících daným prefixem</td></tr>
</table>

<pre>
  au BufRead,BufNewFile *.py map &lt;F1&gt; :LspStatus&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F4&gt; :LspDocumentDiagnostics&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F5&gt; :LspHover&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F6&gt; :LspDocumentSymbol&lt;cr&gt;
</pre>

<p>Poslední skupina kláves obsahuje mapování související s&nbsp;pomocnými okny
i s&nbsp;výše popsanou funkcí <i>omni completion</i>:</p>

<table>
<tr><th>Režim</th><th>Klávesa</th><th>Funkce</th></tr>
<tr><td>normální</td><td>F12</td><td>uzavření náhledového okna vytvořeného některými funkcemi LSP</td></tr>
<tr><td>vkládací</td><td>F12</td><td>uzavření náhledového okna vytvořeného některými funkcemi LSP</td></tr>
<tr><td>vkládací</td><td>Tab</td><td>zavolání funkce <i>omni completion</i></td></tr>
</table>

<pre>
  au BufRead,BufNewFile *.py map &lt;F12&gt; &lt;C-W&gt;&lt;C-Z&gt;
  au BufRead,BufNewFile *.py imap &lt;F12&gt; &lt;C-O&gt;&lt;C-W&gt;&lt;C-Z&gt;
  au BufRead,BufNewFile *.py imap &lt;Tab&gt; &lt;C-X&gt;&lt;C-O&gt;
</pre>

<p>V&nbsp;předposlední části skriptu provádíme dvě operace. První z&nbsp;nich
se zvýraznění těch částí textu na řádku, které přesahují 100 znaků. Samozřejmě
si můžete tuto hodnotu změnit a použít například konzervativnějších 80 znaků
atd. (opět podle nastavené &bdquo;štábní kultury&ldquo;). Druhá operace
nastavuje funkci volanou při <i>omni completion</i>:</p>

<pre>
  au BufRead,BufNewFile *.py highlight OverLength ctermbg=yellow ctermfg=white guibg=#592929
  au BufRead,BufNewFile *.py match OverLength /\%99v.\+/
  au BufRead,BufNewFile *.py setlocal omnifunc=lsp#complete
</pre>

<p>Poslední část skriptu spustí Python Language Server, samozřejmě
s&nbsp;testem, zda vůbec existuje spustitelný soubor <strong>pyls</strong>:</p>

<pre>
if (executable('pyls'))
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info-&gt;['pyls']},
        \ 'whitelist': ['python']
        \ })
endif
</pre>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Langserver.org<br />
<a href="https://langserver.org/">https://langserver.org/</a>
</li>

<li>Language Server Protocol<br />
<a href="https://microsoft.github.io/language-server-protocol/">https://microsoft.github.io/language-server-protocol/</a>
</li>

<li>Language Server Protocol Specification<br />
<a href="https://microsoft.github.io/language-server-protocol/specification">https://microsoft.github.io/language-server-protocol/specification</a>
</li>

<li>Implementations Language Servers<br />
<a href="https://microsoft.github.io/language-server-protocol/implementors/servers">https://microsoft.github.io/language-server-protocol/implementors/servers</a>
</li>

<li>JSON-RPC 2.0 Specification<br />
<a href="https://www.jsonrpc.org/specification">https://www.jsonrpc.org/specification</a>
</li>

<li>Why You Should Know the Language Server Protocol<br />
<a href="https://tomassetti.me/what-is-the-language-server-protocol/">https://tomassetti.me/what-is-the-language-server-protocol/</a>
</li>

<li>Language Server Protocol: A Language Server For DOT With Visual Studio Code<br />
<a href="https://tomassetti.me/language-server-dot-visual-studio/">https://tomassetti.me/language-server-dot-visual-studio/</a>
</li>

<li>Python Language Server<br />
<a href="https://github.com/palantir/python-language-server">https://github.com/palantir/python-language-server</a>
</li>

<li>Jedi - an awesome autocompletion/static analysis library for Python<br />
<a href="https://github.com/davidhalter/jedi">https://github.com/davidhalter/jedi</a>
</li>

<li>What is lsp<br />
<a href="https://www.reddit.com/r/vim/comments/7lnhrt/which_lsp_plugin_should_i_use/">https://www.reddit.com/r/vim/comments/7lnhrt/which_lsp_plugin_should_i_use/</a>
</li>

<li>Vim-lsp<br />
<a href="https://github.com/prabirshrestha/vim-lsp">https://github.com/prabirshrestha/vim-lsp</a>
</li>

<li>Using LSP &amp; clangd in Vim<br />
<a href="https://jonasdevlieghere.com/vim-lsp-clangd/">https://jonasdevlieghere.com/vim-lsp-clangd/</a>
</li>

<li>Seriál Textový editor Vim jako IDE<br />
<a href="https://www.root.cz/serialy/textovy-editor-vim-jako-ide/">https://www.root.cz/serialy/textovy-editor-vim-jako-ide/</a>
</li>

<li>Seriál VIM na plný výkon<br />
<a href="https://www.root.cz/serialy/vim-na-plny-vykon/">https://www.root.cz/serialy/vim-na-plny-vykon/</a>
</li>

<li>What about a Common Debug Protocol?<br />
<a href="https://kichwacoders.com/2017/07/28/what-about-a-common-debug-protocol/">https://kichwacoders.com/2017/07/28/what-about-a-common-debug-protocol/</a>
</li>

<li>Example - Debug Adapter<br />
<a href="https://code.visualstudio.com/docs/extensions/example-debuggers">https://code.visualstudio.com/docs/extensions/example-debuggers</a>
</li>

<li>Konfigurační volba <strong>complete</strong><br />
<a href="http://vimdoc.sourceforge.net/htmldoc/options.html#'complete'">http://vimdoc.sourceforge.net/htmldoc/options.html#'complete'</a>
</li>

<li>Konfigurační volba <strong>completeopt</strong><br />
<a href="http://vimdoc.sourceforge.net/htmldoc/options.html#'completeopt'">http://vimdoc.sourceforge.net/htmldoc/options.html#'completeopt'</a>
</li>

<li>Make Vim completion popup menu work just like in an IDE<br />
<a href="http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE">http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE</a>
</li>

<li>Novinky ve Vimu 7.0<br />
<a href="http://vimdoc.sourceforge.net/htmldoc/version7.html#new-omni-completion">http://vimdoc.sourceforge.net/htmldoc/version7.html#new-omni-completion</a>
</li>

<li>IndentTab<br />
<a href="https://github.com/vim-scripts/IndentTab">https://github.com/vim-scripts/IndentTab</a>
</li>

<li>Smart-Tabs<br />
<a href="https://github.com/vim-scripts/Smart-Tabs">https://github.com/vim-scripts/Smart-Tabs</a>
</li>

<li>Omni completion<br />
<a href="http://vim.wikia.com/wiki/Omni_completion">http://vim.wikia.com/wiki/Omni_completion</a>
</li>

<li>Smart mapping for tab completion<br />
<a href="http://vim.wikia.com/wiki/Smart_mapping_for_tab_completion">http://vim.wikia.com/wiki/Smart_mapping_for_tab_completion</a>
</li>

<li>Make Vim completion popup menu work just like in an IDE<br />
<a href="http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE">http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE</a>
</li>

<li>The LLDB Debugger<br />
<a href="https://lldb.llvm.org/">https://lldb.llvm.org/</a>
</li>

<li>GDB: The GNU Project Debugger<br />
<a href="https://www.gnu.org/software/gdb/">https://www.gnu.org/software/gdb/</a>
</li>

<li>gdbgui 0.7.8.3: browser-based gdb frontend using Flask and JavaScript to visually debug C, C++, Go, or Rust<br />
<a href="https://pypi.python.org/pypi/gdbgui">https://pypi.python.org/pypi/gdbgui</a>
</li>

<li>Repositář projektu gdbgui<br />
<a href="https://github.com/cs01/gdbgui">https://github.com/cs01/gdbgui</a>
</li>

<li>gdbgui - examples<br />
<a href="https://github.com/cs01/gdbgui/tree/master/examples">https://github.com/cs01/gdbgui/tree/master/examples</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Visual Debugging with DDD<br />
<a href="http://www.drdobbs.com/tools/visual-debugging-with-ddd/184404519">http://www.drdobbs.com/tools/visual-debugging-with-ddd/184404519</a>
</li>

<li>Pydb - Extended Python Debugger<br />
<a href="http://bashdb.sourceforge.net/pydb/">http://bashdb.sourceforge.net/pydb/</a>
</li>

<li>Debugging<br />
<a href="http://janus.uclan.ac.uk/pagray/labs/debug.htm">http://janus.uclan.ac.uk/pagray/labs/debug.htm</a>
</li>

<li>Insight<br />
<a href="http://www.sourceware.org/insight/">http://www.sourceware.org/insight/</a>
</li>

<li>Using Language Servers to Edit Code in the Eclipse IDE<br />
<a href="https://www.eclipse.org/community/eclipse_newsletter/2017/may/article3.php">https://www.eclipse.org/community/eclipse_newsletter/2017/may/article3.php</a>
</li>

<li>Eclipse LSP4E<br />
<a href="https://projects.eclipse.org/projects/technology.lsp4e">https://projects.eclipse.org/projects/technology.lsp4e</a>
</li>

<li>Textový editor Vim 8 (nejenom) ve Fedoře<br />
<a href="https://mojefedora.cz/textovy-editor-vim-8-nejenom-ve-fedore/">https://mojefedora.cz/textovy-editor-vim-8-nejenom-ve-fedore/</a>
</li>

<li>Textový editor Vim 8 – změny ve skriptovacím engine Vimu<br />
<a href="https://mojefedora.cz/textovy-editor-vim-8-zmeny-ve-skriptovacim-engine-vimu/">https://mojefedora.cz/textovy-editor-vim-8-zmeny-ve-skriptovacim-engine-vimu/</a>
</li>

<li>Textový editor Vim 8 – dokončení popisu novinek ve skriptovacím engine<br />
<a href="https://mojefedora.cz/textovy-editor-vim-8-dokonceni-popisu-novinek-ve-skriptovacim-engine/">https://mojefedora.cz/textovy-editor-vim-8-dokonceni-popisu-novinek-ve-skriptovacim-engine/</a>
</li>

<li>Sample code illustrating the VS Code extension API<br />
<a href="https://github.com/Microsoft/vscode-extension-samples">https://github.com/Microsoft/vscode-extension-samples</a>
</li>

<li>PEP 8: Tabs or Spaces?<br />
<a href="https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces">https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

