<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textový editor Vim jako IDE (16. část - kooperace mezi Vimem a skriptovacími jazyky)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textový editor Vim jako IDE (16. část - kooperace mezi Vimem a skriptovacími jazyky)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o využití textového editoru Vim (nejenom) ve funkci vývojového prostředí si řekneme, jakým způsobem je možné přímo z Vimu volat skripty naprogramované v některém z podporovaných skriptovacích jazyků. Mezi tyto jazyky v současné verzi Vimu patří zejména populární trojice Perl, Python a Ruby, ale taktéž TCL či Scheme. Taktéž si stručně přiblížíme problematiku použití tabulátorů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Kooperace mezi textovým editorem Vim a skriptovacími jazyky</a></p>
<p><a href="#k02">2. Zjištění existence rozhraní pro vybraný skriptovací jazyk</a></p>
<p><a href="#k03">3. Test existence rozhraní pro vybraný skriptovací jazyk přímo ve VimScriptu</a></p>
<p><a href="#k04">4. Rozhraní pro programovací jazyk Python</a></p>
<p><a href="#k05">5. Význam modulu <strong>vim</strong> dostupného ze skriptů psaných v&nbsp;Pythonu</a></p>
<p><a href="#k06">6. Obsah objektu <strong>vim.current</strong></a></p>
<p><a href="#k07">7. Demonstrační příklady</a></p>
<p><a href="#k08">8. Nastavení Vimu při editaci zdrojových textů v&nbsp;Pythonu</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Kooperace mezi textovým editorem Vim a skriptovacími jazyky</h2>

<p>V&nbsp;seriálu o využití textového editoru <i>Vim</i> (nejenom) ve funkci
vývojového prostředí jsme se již seznámili se skriptovacím jazykem nazývaným
<i>VimScript</i>. Interpret tohoto jazyka je součástí samotného textového
editoru, což mj.&nbsp;znamená, že uživatelské skripty mohou využívat přístup
jak ke všem globálním i lokálním konfiguračním parametrům <i>Vimu</i>, tak i
k&nbsp;obsahu jednotlivých bufferů, které samozřejmě mohou být těmito skripty
modifikovány. Pro úplnost si připomeňme, že základy <i>VimScriptu</i> byly
popsány v&nbsp;<a
href="http://www.root.cz/clanky/textovy-editor-vim-jako-ide-6-cast-vim-script/">šesté</a>,
<a
href="http://www.root.cz/clanky/textovy-editor-vim-jako-ide-7-cast-vim-script/">sedmé</a>
a <a
href="http://www.root.cz/clanky/textovy-editor-vim-jako-ide-8-cast/">osmé</a>
části seriálu. I přes poměrně rozsáhlé možnosti, které <i>VimScript</i>
uživatelům i programátorům poskytuje by však v&nbsp;některých případech mohlo
být výhodnější použít některý obecný skriptovací jazyk. Může se jednat o ty
případy, kdy je zapotřebí volat nějakou funkci dostupnou z&nbsp;externí
knihovny, volat již hotový (třeba i složitý) skript, analyzovat právě editovaný
program s&nbsp;využitím reflexe, nebo pouze to, že je programátor na daný jazyk
prostě navyklý atd.</p>

<p>Jak již zajisté tušíte, textový editor <i>Vim</i> má i v&nbsp;této oblasti
svým uživatelům co nabídnout, protože k&nbsp;němu mohou být (v&nbsp;čase
kompilace) doplněna rozhraní pro některé populární (i méně populární :-)
skriptovací jazyky, mezi něž patří především <a
href="http://www.perl.org/">Perl</a>, <a
href="http://www.python.org/">Python</a> a <a
href="http://www.ruby-lang.org/en/">Ruby</a>, které jsou doplněny o <a
href="http://www.dmoz.org/Computers/Programming/Languages/Tcl-Tk/">TCL</a> a <a
href="ftp://ftp.cs.utexas.edu/pub/garbage/cs345/schintro-v14/schintro_toc.html">Scheme</a>
(přesněji řečeno <a href="http://racket-lang.org/">mzscheme a.k.a. Racket</a>).
Existence rozhraní pro tyto jazyky neznamená jen to, že je možné přímo
z&nbsp;<i>Vimu</i> spustit nějaký skript či vybranou funkci, ale i to, že ze
skriptů je možné volat příkazy <i>Vimu</i> (například nastavovat konfigurační
parametry) a taktéž, což je možná i důležitější, přistupovat k&nbsp;obsahu
jednotlivých bufferů. Každý buffer bývá reprezentován seznamem řetězců, přičemž
každý řetězec odpovídá jednomu textovému řádku (některá rozhraní však mohou
vypadat odlišně).</p>



<p><a name="k02"></a></p>
<h2>2. Zjištění existence rozhraní pro vybraný skriptovací jazyk</h2>

<p>Před využitím skriptů napsaných v&nbsp;některém potenciálně podporovaném
programovacím jazyce je nejprve vhodné zjistit, zda vámi používaná verze
<i>Vimu</i> skutečně obsahuje příslušná rozhraní. Možností, jak zjistit
existenci těchto rozhraní, existuje více. Interaktivně je možné požadovanou
informaci zjistit s&nbsp;využitím příkazu:</p>

<pre>
:version
</pre>

<p>Po spuštění tohoto příkazu se na obrazovku vypíše seznam vlastností
<i>Vimu</i>, přičemž u každé vlastnosti je pomocí znaků <strong>+</strong> a
<strong>-</strong> naznačeno, zda je tato vlastnost podporována či nikoli.
Ukažme si, jak vypadá výpis pro variantu <i>Vimu</i> s&nbsp;podporou některých
skriptovacích jazyků (nikoli však všech jazyků, což je z&nbsp;výpisu taktéž
patrné). Konkrétně se jedná o <i>Vim</i> nainstalovaný z&nbsp;balíčku
<strong>vim-enhanced-7.2.148-1</strong> pro Fedoru:</p>

<pre>
:ver                                                
VIM - Vi IMproved 7.2 (2008 Aug 9, compiled Mar 27 2009 08:42:32)
Included patches: 1-148
Modified by &lt;bugzilla@redhat.com&gt;
Compiled by &lt;bugzilla@redhat.com&gt;
Huge version without GUI.  Features included (+) or not (-):
+arabic +autocmd -balloon_eval -browse ++builtin_terms +byte_offset +cindent
-clientserver -clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments
+cryptv +cscope +cursorshape +dialog_con +diff +digraphs -dnd -ebcdic
+emacs_tags +eval +ex_extra +extra_search +farsi +file_in_path +find_in_path
+float +folding -footer +fork() +gettext -hangul_input +iconv +insert_expand
+jumplist +keymap +langmap +libcall +linebreak +lispindent +listcmds +localmap
+menu +mksession +modify_fname +mouse -mouseshape +mouse_dec +mouse_gpm
-mouse_jsbterm +mouse_netterm -mouse_sysmouse +mouse_xterm +multi_byte
+multi_lang -mzscheme -netbeans_intg -osfiletype +path_extra +perl +postscript
            ^^^^^^^^^                                        ^^^^^
+printer +profile +python +quickfix +reltime +rightleft -ruby +scrollbind
                  ^^^^^^^                               ^^^^^
+signs +smartindent -sniff +statusline -sun_workshop +syntax +tag_binary
+tag_old_static -tag_any_white -tcl +terminfo +termresponse +textobjects +title
                               ^^^^
 -toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo
+vreplace +wildignore +wildmenu +windows +writebackup -X11 -xfontset -xim -xsmp
 -xterm_clipboard -xterm_save
   system vimrc file: "/etc/vimrc"
     user vimrc file: "$HOME/.vimrc"
      user exrc file: "$HOME/.exrc"
  fall-back for $VIM: "/usr/share/vim"
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -g -pipe -Wall -Wp,-D_FO
RTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m32 -ma
rch=i386 -mtune=generic -fasynchronous-unwind-tables -D_GNU_SOURCE -D_FILE_OFFSE
T_BITS=64 -D_FORTIFY_SOURCE=2 -D_FORTIFY_SOURCE=1    -D_REENTRANT -D_GNU_SOURCE
-DDEBUGGING  -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -I/
usr/include/gdbm  -I/usr/lib/perl5/5.10.0/i386-linux-thread-multi/CORE  -I/usr/i
nclude/python2.5 -pthread
Linking: gcc   -Wl,-E -Wl,-rpath,/usr/lib/perl5/5.10.0/i386-linux-thread-multi/C
ORE   -L/usr/local/lib -o vim       -lselinux  -lncurses -lacl -lgpm   -Wl,-E -W
l,-rpath,/usr/lib/perl5/5.10.0/i386-linux-thread-multi/CORE  -L/usr/local/lib  -
L/usr/lib/perl5/5.10.0/i386-linux-thread-multi/CORE -lperl -lresolv -lutil -lc -
L/usr/lib/python2.5/config -lpython2.5 -lutil -lm -Xlinker -export-dynamic
</pre>

<p>O tom, že zdaleka ne všechny binární balíčky <i>Vimu</i> mají
implementovanou podporu pro externí skriptovací jazyky, svědčí i následující
výpis pořízený z&nbsp;binárního balíčku <i>Vimu</i> dostupného pro systémy
Windows:</p>

<pre>
:version
VIM - Vi IMproved 7.1 (2007 May 12, compiled May 12 2007 14:14:51)
MS-Windows 32 bit console version
Compiled by Bram@KIBAALE
Big version without GUI.  Features included (+) or not (-):
+arabic +autocmd -balloon_eval -browse ++builtin_terms +byte_offset +cindent
+clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments
+cryptv +cscope +cursorshape +dialog_con +diff +digraphs -dnd -ebcdic
+emacs_tags +eval +ex_extra +extra_search +farsi +file_in_path +find_in_path
+folding -footer +gettext/dyn -hangul_input +iconv/dyn +insert_expand +jumplist
 +keymap +langmap +libcall +linebreak +lispindent +listcmds +localmap +menu
+mksession +modify_fname +mouse -mouseshape +multi_byte +multi_lang -mzscheme
                                                                    ^^^^^^^^^
-netbeans_intg -osfiletype +path_extra -perl -postscript +printer -profile
                                       ^^^^^
-python +quickfix +reltime +rightleft -ruby +scrollbind +signs +smartindent
^^^^^^^                               ^^^^^
-sniff +statusline -sun_workshop +syntax +tag_binary +tag_old_static
-tag_any_white -tcl -tgetent -termresponse +textobjects +title -toolbar
               ^^^^
+user_commands +vertsplit +virtualedit +visual +visualextra +viminfo +vreplace
+wildignore +wildmenu +windows +writebackup -xfontset -xim -xterm_save -xpm_w32

   system vimrc file: "$VIM\vimrc"
     user vimrc file: "$HOME\_vimrc"
 2nd user vimrc file: "$VIM\_vimrc"
      user exrc file: "$HOME\_exrc"
  2nd user exrc file: "$VIM\_exrc"
Compilation: cl -c /W3 /nologo  -D_MT -MT -I. -Iproto -DHAVE_PATHDEF -DWIN32   -
DFEAT_CSCOPE       -DWINVER=0x0400 -D_WIN32_WINNT=0x0400  /Fo.\ObjC/ /Ox -DNDEBU
G  -DDYNAMIC_ICONV -DDYNAMIC_GETTEXT -DFEAT_BIG /Zi /Fd.\ObjC/
Linking: link /RELEASE /nologo /subsystem:console /incremental:no /nodefaultlib:
libc advapi32.lib shell32.lib gdi32.lib comdlg32.lib ole32.lib uuid.lib  libcmt.
lib   user32.lib           /PDB:vim.pdb -debug
</pre>



<p><a name="k03"></a></p>
<h2>3. Test existence rozhraní pro vybraný skriptovací jazyk přímo ve VimScriptu</h2>

<p>V&nbsp;mnoha praktických případech je však nutné zjistit podporu rozhraní
pro vybraný programovací jazyk přímo ve skriptu (zde je myšlen
<i>VimScript</i>). Pro tento účel lze využít funkci
<strong>has("vlastnost")</strong>, která vrací numerickou hodnotu 0 nebo 1
v&nbsp;závislosti na tom, zda je vlastnost předaná funkci
<strong>has()</strong> ve formě řetězce ve <i>Vimu</i> podporována či nikoli.
Informace pro příkaz <strong>:version</strong> a hodnoty vrácené funkcí
<strong>has()</strong> jsou zjišťovány ze stejné interní struktury <i>Vimu</i>,
proto jsou konzistentní. Můžete si ostatně sami vyzkoušet, která rozhraní ke
skriptovacím jazykům jsou ve vaší variantě <i>Vimu</i> aktuálně
podporována.</p>

<p>Zjištění existence rozhraní pro programovací jazyk <i>Python</i>:</p>

<pre>
:echo has("Python")
1
</pre>

<p>Zjištění existence rozhraní pro programovací jazyk <i>Perl</i>:</p>

<pre>
:echo has("Perl")
1
</pre>

<p>Zjištění existence rozhraní pro programovací jazyk <i>Ruby</i>:</p>

<pre>
:echo has("Ruby")
0
</pre>

<p>Zjištění existence rozhraní pro programovací jazyk <i>Tcl</i>:</p>

<pre>
:echo has("Tcl")
0
</pre>

<p>Zjištění existence rozhraní pro programovací jazyk <i>Scheme</i>:</p>

<pre>
:echo has("mzscheme")
0
</pre>

<p>Vzhledem k&nbsp;tomu, že se ve <i>VimScriptu</i> používají pro reprezentaci
pravdivostních hodnot namísto atomů true/false právě číselné hodnoty 0 a 1, je
možné funkci <strong>has()</strong> vložit přímo do podmíněného příkazu:</p>

<pre>
:if has("Python")
:python print 6*7
:endif
</pre>

<p>Popř.&nbsp;s&nbsp;chybovým hlášením:</p>

<pre>
:if has("Python")
:python print 6*7
:else
:echo "Rozhraní pro Python není podporováno"
:endif
</pre>

<p>Dtto pro <i>Perl</i>:</p>

<pre>
:if has("Perl")
:perldo $_=reverse($_);
:endif
</pre>

<pre>
:if has("Perl")
:perldo $_=reverse($_);
:else
:echo "Rozhraní pro Perl není podporováno"
:endif
</pre>

<p>V&nbsp;následujících kapitolách si pro ilustraci možností rozhraní pro různé
skriptovací jazyky ukážeme, jaké funkce nám nabízí rozhraní mezi <i>Vimem</i> a
<i>Pythonem</i>. Další typy rozhraní si v&nbsp;případě zájmu popíšeme až
příště.</p>



<p><a name="k04"></a></p>
<h2>4. Rozhraní pro programovací jazyk Python</h2>

<p>Prvním rozhraním, se kterým se seznámíme, je rozhraní zajišťující
obousměrnou komunikaci <i>Vimu</i> s&nbsp;interpretrem programovacího jazyka
<i>Python</i>. Pokud je toto rozhraní součástí instalace <i>Vimu</i> (viz též
předchozí dvě kapitoly), je možné přímo z&nbsp;<i>Vimu</i> volat buď jednotlivé
příkazy nebo i celé skripty napsané v&nbsp;<i>Pythonu</i>. Nejjednodušší způsob
spočívá v&nbsp;přímém zápisu jednoho pythonovského příkazu za vimovský příkaz
<strong>:python</strong>:</p>

<pre>
:python print 6*7
</pre>

<p>popř.&nbsp;něco složitějšího:</p>

<pre>
:python for i in range(1,10): print i
</pre>

<p>Jak je však již z&nbsp;druhého příkladu patrné, není tento způsob vhodný pro
zápis delších (víceřádkových) sekvencí kódu. V&nbsp;tomto případě je výhodnější
využít druhého způsobu, který se podobá použití takzvaných <a
href="http://en.wikipedia.org/wiki/Here_document">here documents</a>
v&nbsp;shellu, Pythonu, Ruby, Perlu, PHP i v&nbsp;některých dalších
skriptovacích jazycích:</p>

<pre>
:python &lt;&lt; EOF
for i in range(1,10):
    print i
EOF
</pre>

<p>Namísto slova <strong>EOF</strong> je samozřejmě možné použít i jiný
identifikátor, například:</p>

<pre>
:python &lt;&lt; XYZZY
for i in range(1,10):
    for j in range(1,10):
        print i*j
XYZZY
</pre>

<p>Třetí možnost spuštění skriptu napsaného v&nbsp;Pythonu spočívá ve využití
automatických příkazů vykonaných při výskytu nějaké výjimky:</p>

<pre>
:autocmd BufNewFile,BufRead *.txt python příkaz_v_pythonu
</pre>

<p>Pravděpodobně nejčastěji se však setkáme s&nbsp;voláním skriptů uložených
v&nbsp;externím souboru. Pro tento případ se namísto příkazu
<strong>:python</strong> používá příkaz <strong>:pyfile</strong>:</p>

<pre>
:pyfile muj_skript.py
</pre>

<p>Tuto funkcionalitu si můžeme vyzkoušet na jednoduchém skriptu, který nejprve
na příkazovou řádku vypíše celkový počet textových řádků v&nbsp;aktuálně
aktivním bufferu a posléze do tohoto bufferu přidá (na konec) nový řádek:</p>

<pre>
import vim
buffer=vim.current.buffer
print len(buffer)
buffer.append("*** Novy radek ***")
</pre>

<p>V&nbsp;případě, že je tento skript uložen do souboru
<strong>test.py</strong>, lze ho snadno spustit pomocí příkazu:</p>

<pre>
:pyfile test.py
</pre>



<p><a name="k05"></a></p>
<h2>5. Význam modulu <strong>vim</strong> dostupného ze skriptů psaných v&nbsp;Pythonu</h2>

<p>Již na skriptu uvedeném v&nbsp;závěru předchozí kapitoly bylo patrné,
v&nbsp;čem ve skutečnosti spočívá největší odlišnost mezi pouhým spuštěním
externího skriptu pomocí interpretru jazyka Python:</p>

<pre>
:!python test.py
</pre>

<p>a spuštěním skriptu přes rozhraní poskytované textovým editorem <i>Vim</i>.
Rozdíl spočívá v&nbsp;tom, že při použití rozhraní mají skripty přístup jak ke
konfiguračním parametrům <i>Vimu</i>, tak i k&nbsp;editovaným bufferům, oknům,
pozici kurzoru v&nbsp;aktivním bufferu atd. To samozřejmě dává programátorům
k&nbsp;dispozici velmi mocný nástroj, díky němuž mohou s&nbsp;editovaným textem
provádět různá kouzla; jediné, co je zapotřebí provést, je import modulu
nazvaného (jak jinak) <strong>vim</strong>:</p>

<pre>
import vim
vim.buffers.xxx
vim.windows.xxx
vim.current.xxx
</pre>

<p>V&nbsp;následující tabulce jsou vypsány některé důležité objekty, atributy a
metody z&nbsp;modulu <strong>vim</strong>, k&nbsp;nimž je možné ve skriptech
přistupovat, popř.&nbsp;které je možné i měnit (ne všechny objekty a atributy
je však povoleno modifikovat):</p>

<table>
<tr><th>#</th><th>Atribut</th><th>Význam</th></tr>
<tr><td>1</td><td>vim.buffers</td><td>všechny otevřené buffery (přístup k&nbsp;jednotlivým bufferům se provádí pomocí indexování)</td></tr>
<tr><td>2</td><td>vim.windows</td><td>všechna otevřená okna (přístup k&nbsp;jednotlivým oknům se provádí pomocí indexování)</td></tr>
<tr><td>3</td><td>vim.current</td><td>objekt obsahující atributy typu: současný řádek, aktivní buffer, aktivní okno a aktivní rozsah, viz též další kapitolu</td></tr>
<tr><td>4</td><td>vim.command</td><td>metoda používaná pro spuštění Vimovského příkazu</td></tr>
<tr><td>5</td><td>vim.eval</td><td>podobné předchozí metodě, ale vrátí se výsledek Vimovského příkazu ve formě skaláru nebo seznamu</td></tr>
<tr><td>6</td><td>vim.error</td><td>výjimka vyhozená v&nbsp;případě výskytu nějaké chyby v&nbsp;rozhraní (nebo ve Vimu)</td></tr>
</table>

<p>Některé z&nbsp;atributů z&nbsp;předchozí tabulky si vyzkoušíme
v&nbsp;následujících velmi jednoduchých skriptech:</p>

<pre>
# tisk počtu otevřených bufferů
import vim
print len(vim.buffers)
</pre>

<pre>
# tisk počtu otevřených oken
import vim
print len(vim.windows)
</pre>

<pre>
# zavolání příkazu Vimu
import vim
vim.command("set expandtab")
</pre>

<pre>
# vyhodnocení výrazu (zde získání konfiguračního parametru)
import vim
print vim.eval("&amp;tabstop")
</pre>



<p><a name="k06"></a></p>
<h2>6. Obsah objektu <strong>vim.current</strong></h2>

<p>Z&nbsp;praktického hlediska je nejzajímavější objekt
<strong>vim.current</strong> obsahující reference na aktuální buffer, aktuální
okno a taktéž na aktuální výběr (například vizuálně vybraný blok):</p>

<table>
<tr><th>#</th><th>Atribut</th><th>Lze atribut modifikovat?</th><th>Význam</th></tr>
<tr><td>1</td><td>vim.current.line</td><td>ano</td><td>aktuálně editovaný textový řádek (samozřejmě v&nbsp;aktuálním bufferu)</td></tr>
<tr><td>2</td><td>vim.current.buffer</td><td>ne (pro čtení)</td><td>obsah aktuálně editovaného bufferu (jedná se o Pythonní seznam s&nbsp;poněkud omezenými možnostmi)</td></tr>
<tr><td>3</td><td>vim.current.window</td><td>ne (pro čtení)</td><td>objekt reprezentující vybrané okno</td></tr>
<tr><td>4</td><td>vim.current.window.cursor</td><td>ano</td><td>dvojice (tuple) obsahující pozici kurzoru v&nbsp;okně (lze ji samozřejmě i měnit, resp.&nbsp;přiřadit novou dvojici)</td></tr>
<tr><td>5</td><td>vim.current.range</td><td>ne (pro čtení)</td><td>výběr (rozsah vybraného textu)</td></tr>
</table>



<p><a name="k07"></a></p>
<h2>7. Demonstrační příklady</h2>

<p>Podívejme se na několik testovacích skriptů:</p>

<pre>
# změna všech znaků na aktuálním řádku na verzálky
import vim
import string
line = vim.current.line
vim.current.line = string.upper(line)
</pre>

<pre>
# záměna všech mezer za tildy (velmi primitivní základ utility "vlnka" :-)
import vim
import string
line = vim.current.line
lines = line.split()
vim.current.line = string.join(lines, "~")
</pre>

<pre>
# posun kurzoru o jeden řádek níže (nepraktické, ale jde jen o ilustraci možností)
import vim
cursor = vim.current.window.cursor
vim.current.window.cursor=(cursor[0] + 1, cursor[1])
</pre>

<pre>
# vymazání řádků 10 až 20 z aktuálně editovaného bufferu
import vim
buffer = vim.current.buffer
del(buffer[10:20])
</pre>

<pre>
# otočení všech řádků v aktuálně editovaném bufferu
import vim
buffer = vim.current.buffer
lines = len(buffer)
for line in range(lines/2):
    temp = buffer[line]
    buffer[line] = buffer[lines-line-1]
    buffer[lines-line-1] = temp
</pre>

<p>Na závěr si uvedeme poněkud užitečnější skript napsaný
v&nbsp;<i>Pythonu</i>, který slouží pro očíslování všech řádků
v&nbsp;editovaném bufferu, tj.&nbsp;pro vložení čísla řádku (zarovnaného na tři
znaky) na začátek každého textového řádku.</p>

<pre>
import vim
buffer = vim.current.window.buffer
# nebo jen vim.current.buffer
for line in range(len(buffer)):
    buffer[line] = "%3d" % (line) + " " + buffer[line]
</pre>

<p>Skript lze samozřejmě upravit i takovým způsobem, aby se řádky číslovaly od
jedničky a nikoli od nuly:</p>

<pre>
import vim
buffer = vim.current.window.buffer
# nebo jen vim.current.buffer
for line in range(len(buffer)):
    buffer[line] = "%3d" % (line + 1) + " " + buffer[line]
</pre>



<p><a name="k08"></a></p>
<h2>8. Nastavení Vimu při editaci zdrojových textů v&nbsp;Pythonu</h2>

<p>Vývojáři používající programovací jazyk <i>Python</i> jistě vědí, že
v&nbsp;tomto jazyku hraje velký význam odsazení jednotlivých řádků zdrojového
textu, protože právě pomocí odsazení se vyznačují jednotlivé bloky. Vzhledem
k&nbsp;tomu, že se (nejenom) pro odsazení používají buď mezery (znaky
<strong>SP</strong>) či tabulátory (znaky <strong>TAB</strong>), je poměrně
důležité vědět, jakým způsobem je možné textový editor <i>Vim</i>
nakonfigurovat nejenom tak, aby se znaky <strong>TAB</strong> zobrazovaly podle
potřeb (změna šířky tabulačních zarážek), ale aby se v&nbsp;případě náhrady
znaků <strong>TAB</strong> za mezery mohly tabulátory
&bdquo;simulovat&ldquo;.</p> <p>Vzájemná interakce různých konfiguračních
parametrů může v&nbsp;některých případech způsobovat problémy nebo neočekávané
chování <i>Vimu</i>. Ukažme si tedy takové nastavení konfiguračních parametrů,
které by měly vést k&nbsp;tomu, aby vytvářený zdrojový kód co nejlépe odpovídal
doporučení <a href="http://www.python.org/dev/peps/pep-0008/">PEP 8 &ndash;
Style Guide for Python Code</a>:</p>

<table>
<tr><th>#</th><th>Plná varianta volby</th><th>Zkrácená varianta</th><th>Popis</th></tr>
<tr><td>1</td><td>textwidth=79 </td><td>tw=79   </td><td>maximální šířka textu (stále ještě existuje několik důvodů, proč používat řádky o délce 80 znaků)</td></tr>
<tr><td>2</td><td>smartindent  </td><td>si      </td><td>povolení automatického odsazení nových řádků při stlačení klávesy Enter nebo po příkazu "o" a "O"</td></tr>
<tr><td>3</td><td>cinwords=??? </td><td>cinw=???</td><td>klíčová slova, po kterých nastává odsazení textu, pro Python použijte <strong>cinwords=if,elif,else,for,while,try,except,finally,def,class</strong></td></tr>
<tr><td>2</td><td>tabstop=8    </td><td>ts=8    </td><td>způsob zobrazení znaku <strong>TAB</strong>; zdroj neustálých hádek o tom, jak velká má být mezera mezi tabulačními zarážkami</td></tr>
<tr><td>3</td><td>shiftwidth=4 </td><td>sw=4    </td><td>počet znaků použitých při změně odsazení bloku pomocí klávesových zkratek &lt; a &gt;</td></tr>
<tr><td>4</td><td>smarttab     </td><td>sma     </td><td>na začátku řádku se po stlačení <strong>TAB</strong> vloží do dokumentu mezery, jejichž počet je určen pomocí <strong>shiftwidth</strong></td></tr>
<tr><td>5</td><td>expandtab    </td><td>et      </td><td>při stlačení klávesy <strong>TAB</strong> ve vkládacím režimu se ve skutečnosti použijí mezery (preferovaný styl)</td></tr>
<tr><td>6</td><td>softwatstop=4</td><td>sts=4   </td><td>simulace znaků <strong>TAB</strong> při mazání znaků na začátku řádků (například klávesa <strong>DELETE</strong> se chová tak, jakoby se mazal znak <strong>TAB</strong> namísto 4 mezer)</td></tr>
</table>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>VIM as Python IDE<br />
<a href="http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/">http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/</a>
</li>

<li>Python with a modular IDE (Vim)<br />
<a href="http://www.sontek.net/python-with-a-modular-ide-vim">http://www.sontek.net/python-with-a-modular-ide-vim</a>
</li>

<li>PEP 8 &ndash; Style Guide for Python Code<br />
<a href="http://www.python.org/dev/peps/pep-0008/">http://www.python.org/dev/peps/pep-0008/</a>
</li>

<li>pydoc.vim: Python documentation view- and search-tool (uses pydoc)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=910">http://www.vim.org/scripts/script.php?script_id=910</a>
</li>

<li>Getting to VIM's Python interface<br />
<a href="http://zerokspot.com/weblog/2009/02/21/getting-to-know-vims-python-interface/">http://zerokspot.com/weblog/2009/02/21/getting-to-know-vims-python-interface/</a>
</li>

<li>Pretty-formatting XML<br />
<a href="http://vim.wikia.com/wiki/Pretty-formatting_XML">http://vim.wikia.com/wiki/Pretty-formatting_XML</a>
</li>

<li>Delete a pair of XML/HTML tags<br />
<a href="http://vim.wikia.com/wiki/Delete_a_pair_of_XML/HTML_tags">http://vim.wikia.com/wiki/Delete_a_pair_of_XML/HTML_tags</a>
</li>

<li>Vim as XML Editor<br />
<a href="http://www.pinkjuice.com/howto/vimxml/">http://www.pinkjuice.com/howto/vimxml/</a>
</li>

<li>xmledit: A filetype plugin to help edit XML, HTML, and SGML documents<br />
<a href="http://www.vim.org/scripts/script.php?script_id=301">http://www.vim.org/scripts/script.php?script_id=301</a>
</li>

<li>Poslední vývojová verze makra xmledit<br />
<a href="http://github.com/sukima/xmledit/">http://github.com/sukima/xmledit/</a>
</li>

<li>vim.wikia: Display date-and-time on status line<br />
<a href="http://vim.wikia.com/wiki/Display_date-and-time_on_status_line">http://vim.wikia.com/wiki/Display_date-and-time_on_status_line</a>
</li>

<li>vim.wikia: Writing a valid statusline<br />
<a href="http://vim.wikia.com/wiki/Writing_a_valid_statusline">http://vim.wikia.com/wiki/Writing_a_valid_statusline</a>
</li>

<li>vim.wikia: Statusline tab level ruler<br />
<a href="http://vim.wikia.com/wiki/Statusline_tab_level_ruler">http://vim.wikia.com/wiki/Statusline_tab_level_ruler</a>
</li>

<li>vim.wikia: Switching between different statuslines<br />
<a href="http://vim.wikia.com/wiki/Switching_between_different_statuslines">http://vim.wikia.com/wiki/Switching_between_different_statuslines</a>
</li>

<li>X Selections, Cut Buffers, and Kill Rings<br />
<a href="http://www.jwz.org/doc/x-cut-and-paste.html">http://www.jwz.org/doc/x-cut-and-paste.html</a>
</li>

<li>Accessing the system clipboard<br />
<a href="http://vim.wikia.com/wiki/Accessing_the_system_clipboard">http://vim.wikia.com/wiki/Accessing_the_system_clipboard</a>
</li>

<li>
xcutsel(1) - Linux man page<br />
<a href="http://linux.die.net/man/1/xcutsel">http://linux.die.net/man/1/xcutsel</a>
</li>

<li>snipMate : TextMate-style snippets for Vim<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2540">http://www.vim.org/scripts/script.php?script_id=2540</a>
</li>

<li>msanders / snipmate.vim<br />
<a href="https://github.com/msanders/snipmate.vim">https://github.com/msanders/snipmate.vim</a>
</li>

<li>snipMate.vim Introductory Screencast<br />
<a href="http://vimeo.com/3535418">http://vimeo.com/3535418</a>
</li>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Exuberant ctags<br />
<a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a>
</li>

<li>xxd (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>ctags (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags</a>
</li>

<li>cscope (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Novinky ve VIM 7: Úvodní část - speller<br />
<a href="http://www.root.cz/vim-sedm-prvni-cast/">http://www.root.cz/vim-sedm-prvni-cast/</a>
</li>

<li>Novinky ve VIM 7: Skriptovací jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>vim2elvis: Přednosti a nedostaky Elvise v porovnání s Vimem<br />
<a href="http://www.root.cz/clanky/vim2elvis-1/">http://www.root.cz/clanky/vim2elvis-1/</a>
</li>

<li>vim2elvis: Shodné znaky mezi Elvisem a Vimem, nastavení­editoru<br />
<a href="http://www.root.cz/clanky/vim2elvis-2/">http://www.root.cz/clanky/vim2elvis-2/</a>
</li>

<li>Nej... VIM pluginy (1)<br />
<a href="http://www.root.cz/clanky/nej-vim-pluginy/">http://www.root.cz/clanky/nej-vim-pluginy/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Scroll Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Scroll_lock">http://necyklopedie.wikia.com/wiki/Scroll_lock</a>
</li>

<li>Caps Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Caps_Lock">http://necyklopedie.wikia.com/wiki/Caps_Lock</a>
</li>

<li>Avoid the escape key<br />
<a href="http://vim.wikia.com/wiki/Avoid_the_escape_key">http://vim.wikia.com/wiki/Avoid_the_escape_key</a>
</li>

<li>Map caps lock to escape in XWindows<br />
<a href="http://vim.wikia.com/wiki/VimTip166">http://vim.wikia.com/wiki/VimTip166</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2010</small></p>
</body>
</html>

