<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Užitečné skripty a pluginy pro textový editor Vim: propojení Vimu s debuggery</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Užitečné skripty a pluginy pro textový editor Vim: propojení Vimu s debuggery</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Poměrně velké množství vývojářů používá textový editor Vim pro vývoj aplikací. Aby však Vim mohl plnohodnotně konkurovat integrovaným vývojovým prostředím, musí svým uživatelům nabídnout ještě minimálně jednu funkci &ndash; propojení s debuggery. Právě tímto tématem se budeme zabývat dnes.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Užitečné skripty a pluginy pro textový editor Vim: propojení Vimu s&nbsp;debuggery</a></p>
<p><a href="#k02">2. Princip propojení Vimu s&nbsp;debuggery</a></p>
<p><a href="#k03">3. Funkce Vimu, které jsou používané pluginy spolupracujícími s&nbsp;debuggery</a></p>
<p><a href="#k04">4. Plugin <strong>Clewn</strong></a></p>
<p><a href="#k05">5. Instalace pluginu <strong>Clewn</strong></a></p>
<p><a href="#k06">6. Použití pluginu <strong>Clewn</strong></a></p>
<p><a href="#k07">7. Plugin <strong>Pyclewn</strong></a></p>
<p><a href="#k08">8. Instalace pluginu <strong>Pyclewn</strong></a></p>
<p><a href="#k09">9. Použití pluginu <strong>Pyclewn</strong></a></p>
<p><a href="#k10">10. Odkazy na předchozí části článku</a></p>
<p><a href="#k11">11. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Užitečné skripty a pluginy pro textový editor Vim: propojení Vimu s debuggery</h2>

<p>Textový editor <i>Vim</i> se díky svému skriptovacímu jazyku <i>Vim
Script</i>, podpoře maker, záložek (tabů), oken a bufferů může po instalaci
vhodných pluginů změnit v&nbsp;poměrně robustní a přitom výkonné integrované
vývojové prostředí, které navíc odpovídá Unixové filozofii &ndash; <i>Vim</i>
je v&nbsp;tomto případě komponentou volající další aplikace a nástroje, nikoli
monolitickým programem, který teoreticky umí všechno, ovšem nic pořádně :-)
V&nbsp;mnoha případech musí programátoři použít debugger pro nalezení chyby
v&nbsp;programu a právě v&nbsp;této chvíli stojí před rozhodnutím, zda debugger
spustit v&nbsp;samostatném terminálu nebo zda naopak použít vhodný plugin pro
spuštění a především pro ovládání debuggeru přímo z&nbsp;<i>Vimu</i>. Druhá
možnost je v&nbsp;mnoha ohledech lepší, protože debugger ovládaný
z&nbsp;příkazové řádky (<i>gdb</i> apod.) sice uživatelům nabízí nepřeberné
množství mnohdy i velmi komplikovaných příkazů, na druhou stranu však nemá
všechny možnosti celoobrazovkového debuggeru, na který jsou dnešní programátoři
zvyklí.</p>

<a href="http://www.root.cz/obrazek/208271/"><img src="http://i.iinfo.cz/images/521/vim-dbg-1-prev.png"  class="image-208271" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 1: Typické &bdquo;sezení&ldquo; programátora využívajícího
debugger gdb. Přeložení programu s&nbsp;vygenerováním ladicích informací
(<strong>-g</strong>) a následné spuštění debuggeru.</i></p>

<p>Pro <i>Vim</i> vzniklo relativně velké množství pluginů zajišťujících
propojení tohoto textového editoru s&nbsp;debuggerem (většinou se zmíněným
<i>gdb</i>). My se dnes zaměříme na dvojici pluginů nazvaných <i>Clewn</i> a
<i>Pyclewn</i>. První z&nbsp;těchto pluginů dokáže komunikovat
s&nbsp;debuggerem <i>gdb</i>, druhý pak i s&nbsp;debuggerem nazvaným <i>pdb</i>
používaným pro ladění aplikací naprogramovaných v&nbsp;Pythonu. Předností obou
zmíněných pluginů je fakt, že před uživatelem neskrývají způsob komunikace
s&nbsp;debuggerem, takže je v&nbsp;případě potřeby možné v&nbsp;debuggeru volat
i takové příkazy, které nejsou přímo v&nbsp;pluginu podporovány. To je velká
výhoda, protože především <i>gdb</i> je velmi mocným nástrojem, a to zejména ve
chvíli, kdy je zapotřebí odladit zákeřné chyby při přístupu do paměti či při
špatné koordinaci práce většího množství vláken (dokonce si troufnu tvrdit, že
v&nbsp;tomto ohledu debugger <i>gdb</i> překonává většinu komerčních
nástrojů).</p>

<a href="http://www.root.cz/obrazek/208272/"><img src="http://i.iinfo.cz/images/521/vim-dbg-2-prev.png"  class="image-208272" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 2: Typické &bdquo;sezení&ldquo; programátora využívajícího
debugger gdb. Nastavení breakpointu příkazem <strong>b main</strong>, spuštění
laděného programu příkazem <strong>r</strong> a krokování příkazem
<strong>n</strong> (klávesa Enter zopakuje poslední zadaný příkaz, proto je
<strong>n</strong> vlastně v&nbsp;tomto příkladu používán nadbytečně).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Princip propojení Vimu s&nbsp;debuggery</h2>

<p>Před popisem pluginů <i>Clewn</i> a <i>Pyclewn</i> se nejprve seznámíme
s&nbsp;možnostmi propojení textového editoru <i>Vim</i> s&nbsp;debuggery.
Debugger <i>gdb</i> je možné ovládat několika způsoby. V&nbsp;nejjednodušším
případě se z&nbsp;terminálu spustí příkaz <strong>gdb</strong>, který se
interaktivně ovládá příkazy zapisovanými z&nbsp;klávesnice a výstup je prováděn
na obrazovku terminálu. Tato možnost je ukázána na obrázku číslo 3.</p>

<a href="http://www.root.cz/obrazek/208273/"><img src="http://i.iinfo.cz/images/521/vim-dbg-3-prev.png"  class="image-208273" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 3: Každý skutečný debugger by měl podporovat disassembling ze
strojového kódu popř.&nbsp;z&nbsp;bajtkódu do čitelné podoby (jazyka
symbolických instrukcí).</i></p>

<p>Taktéž je možné použít nějakou nadstavbu nad <i>gdb</i>, například aplikaci
nazvanou <strong>gdbtui</strong>, která je taktéž ovládána z&nbsp;terminálu,
ale díky použití knihovny <i>curses</i> či <i>ncurses</i> je možné využít
celoobrazovkový výstup a přiblížit se tak možnostem debuggerů s&nbsp;grafickým
uživatelským rozhraním. <strong>gdbtui</strong> je sice zajímavá aplikace, ale
kvůli použití klávesových zkratek známých z&nbsp;Emacsu pravděpodobně nebude
skalním uživatelům textového editoru <i>Vim</i> příliš vyhovovat :-) (nicméně
za odzkoušení určitě stojí). Další možnost spočívá v&nbsp;komunikaci
s&nbsp;běžícím debuggerem s&nbsp;využitím protokolu, který je známý a poměrně
dobře popsaný. Mohou ho používat různé nástroje, včetně grafických nadstaveb
nad <i>gdb</i>.</p>

<a href="http://www.root.cz/obrazek/208274/"><img src="http://i.iinfo.cz/images/521/vim-dbg-4-prev.png"  class="image-208274" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 4: Aplikace <strong>gdbtui</strong> nabízí
&bdquo;alternativní&ldquo; celoobrazovkové ovládání debuggeru.</i></p>

<p>V&nbsp;pluginu <i>Pyclewn</i> je použita právě tato možnost &ndash; debugger
se spustí jako samostatný proces, který po své inicializaci otevře port, na
němž naslouchá příkazům posílaným z&nbsp;Vimu. Mimochodem &ndash; tento způsob
práce s&nbsp;debuggerem lze použít i pro ladění aplikace na vzdáleném počítači,
popř.&nbsp;na nějaké vývojové desce &ndash; Raspberry PI atd. To je
v&nbsp;mnoha případech poměrně výhodné, protože zmíněný vzdálený počítač či
vývojová deska vůbec nemusí být vybavena klávesnicí a displejem. Pokud vás toto
téma zajímá, podrobnosti o různých možnostech použití <i>gdb</i> jsou dostupné
na stránkách <a
href="http://davis.lbl.gov/Manuals/GDB/gdb_17.html">http://davis.lbl.gov/Manuals/GDB/gdb_17.html</a>
a <a
href="http://kegel.com/linux/gdbserver.html">http://kegel.com/linux/gdbserver.html</a>,
popř.&nbsp;se lze podívat na manuálovou stránku příkazu <a
href="http://linuxcommand.org/man_pages/gdbserver1.html">gdbserver</a>.</p>

<a href="http://www.root.cz/obrazek/208275/"><img src="http://i.iinfo.cz/images/521/vim-dbg-5-prev.png"  class="image-208275" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 5: Aplikace <strong>gdbtui</strong> nabízí
&bdquo;alternativní&ldquo; celoobrazovkové ovládání debuggeru.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Funkce Vimu, které jsou používané pluginy spolupracujícími s&nbsp;debuggery</h2>

<p>Textový editor <i>Vim</i> ve skutečnosti usnadňuje práci všem tvůrcům
pluginů, které mají komunikovat s&nbsp;debuggery, protože jim nabízí
tzv.&nbsp;<i>Vim NetBeans Protocol</i>. Název této technologie vychází
z&nbsp;toho, že se původně jednalo o rozhraní používané pluginem nazvaným
<i>NetBeans</i> pro komunikaci <i>Vimu</i> se známým integrovaným vývojovým
prostředím <i>NetBeans</i>. Tento plugin již není vyvíjen (pravděpodobně proto,
že se v&nbsp;<i>NetBeans</i> již nedá nastavit integrace s&nbsp;externím
editorem &ndash; to jsem ale netestoval), ovšem samotný <i>Vim NetBeans
Protocol</i> se dobře ujal, je podporován a taktéž používán mnoha dalšími
pluginy, a to nikoli pro komunikaci s&nbsp;IDE NetBeans, ale právě při ovládání
debuggerů. Ostatně přímo v&nbsp;nápovědě Vimu jsou některé pluginy, které tento
protokol používají, vypsány: VimIntegration, Agide, Clewn, Pyclewn, VimPlugin,
PIDA a VimWrapper. Co vlastně <i>Vim NetBeans Protocol</i> tvůrcům pluginů
nabízí? Především se jedná o podporu oboustranné komunikace, kdy debugger může
Vimu poslat zprávu o tom, že se má překreslit obsah nějakého okna (například
okna s&nbsp;výpisem sledovaných proměnných), Vim naopak může poslat příkaz
debuggeru atd. Bližší informace o této zajímavé a užitečné technologii lze
nalézt přímo ve <i>Vimu</i> zadáním příkazu:</p>

<pre>
:help netbeans
</pre>

<a href="http://www.root.cz/obrazek/208276/"><img src="http://i.iinfo.cz/images/521/vim-dbg-6-prev.png"  class="image-208276" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 6: Bez podpory této technologie (viz červený obdélník) nebudou
mnohé pluginy pracovat korektně! To se týká i dnes popisovaných
pluginů.</i></p>

<p>Další vlastností textového editoru <i>Vim</i>, která se v&nbsp;pluginech pro
komunikaci s&nbsp;debuggery (ale nejenom s&nbsp;nimi) používá, je podpora
takzvaných značek (<i>signs</i>). Pokud je <i>Vim</i> spuštěný
v&nbsp;terminálu, jedná se o textové značky typicky zobrazované na levém okraji
okna; tyto značky mohou například ukazovat na právě laděný příkaz, na
breakpoint atd. V&nbsp;případě použití <i>Vimu</i> s&nbsp;grafickým
uživatelským rozhraním je možné namísto textové značky použít i ikonu, na
terminálu se uživatelé musí spokojit s&nbsp;případným barevným vyznačením řádku
se značkou. Bližší informace o této technolgoii lze opět nalézt přímo ve
<i>Vimu</i>, a to zadáním příkazu:</p>

<pre>
:help signs
</pre>

<p>Značky ve skriptech lze vytvářet relativně snadno. Následující dva řádky
slouží k&nbsp;definici nové značky nazvané <strong>mojeznacka</strong>. Tato
značka bude zobrazena jako dvě hvězdičky vyobrazené stejnými barvami popředí a
pozadí, jaké jsou deklarovány pro lexikální kategorii Error. Samotná značka
bude umístěna na levém okraji aktivního okna, konkrétně na sedmém řádku. Symbol
3 reprezentuje identifikátor značky, na nějž je možné se později odkazovat:</p>

<pre>
:sign define mojeznacka text=** texthl=Error
:sign place 3 line=7 name=mojeznacka file=__jmeno_otevreneho_souboru__
</pre>

<a href="http://www.root.cz/obrazek/208277/"><img src="http://i.iinfo.cz/images/521/vim-dbg-7-prev.png"  class="image-208277" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 7: Takto vypadá značka vytvořená příkazy uvedenými před tímto
obrázkem.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Plugin <strong>Clewn</strong></h2>

<p>První plugin, o němž se dnes zmíníme, se jmenuje <i>Clewn</i>. Podle
očekávání se jedná o přídavný modul sloužící pro propojení textového editoru
<i>Vim</i> s&nbsp;debuggerem, konkrétně s&nbsp;debuggerem <i>gdb</i> (<a
href="https://www.gnu.org/software/gdb/">https://www.gnu.org/software/gdb/</a>).
Tento plugin umožňuje volat většinu základních příkazů <i>gdb</i>, ovšem způsob
kooperace mezi <i>Vimem</i> a <i>gdb</i>, který je v&nbsp;pluginu <i>Clewn</i>
implementován, nemusí všem uživatelům vyhovovat &ndash; v&nbsp;tomto případě je
dobré se podívat na možnosti pluginu <i>Pyclewn</i> popsaného <a
href="#k07">v&nbsp;sedmé kapitole</a> (nechci tvrdit, že <i>Pyclewn</i> je ve
všech ohledech lepší, ovšem jeho instalace i ovládání je podle mého názoru
jednodušší). Jak vlastně <i>Clewn</i> funguje? Tento plugin obsahuje kromě
části psané ve VimScriptu i binární (nativní) část, konkrétně spustitelný
program nazvaný <strong>clewn</strong>, který je nainstalován v&nbsp;adresáři
dostupném přes PATH (v&nbsp;případě lokální instalace se většinou jedná o
adresář ~/bin). Tento binární program po svém spuštění provede inicializaci
debuggeru a následně spuštění <i>Gvimu</i>, tj.&nbsp;<i>Vimu</i> s&nbsp;GUI.
Tyto dvě aplikace pak spolu mohou přes <strong>clewn</strong> komunikovat.</p>

<a href="http://www.root.cz/obrazek/208363/"><img src="http://i.iinfo.cz/images/55/clewn-1-prev.png" class="image-208363" width="370" height="267" alt="&#160;" /></a>
<p><i>Obrázek 8: Připojení Vimu k&nbsp;debuggeru a nastavení breakpointu na
začátek funkce main.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Instalace pluginu <strong>Clewn</strong></h2>

<p>Podívejme se nyní na instalaci pluginu <i>Clewn</i>, kterou lze rozdělit na
dvě části &ndash; překlad binární utility a instalaci skriptu. Pro překlad
binární utility je nutné mít v&nbsp;systému nainstalovány knihovny
<i>ncurses-devel</i> a <i>libreadline-devel</i>. Na Fedoře je instalace obou
zmíněných knihoven jednoduchá:</p>

<pre>
sudo yum install ncurses-devel
sudo yum install libreadline-devel
</pre>

<p>Následně stáhneme zdrojové kódy pluginu:</p>

<pre>
wget -O clewn.tar.gz "http://downloads.sourceforge.net/project/clewn/clewn/clewn-1.15/clewn-1.15.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fclewn%2Ffiles%2FOldFiles%2F&amp;ts=1432050333&amp;use_mirror=netcologne"
</pre>

<p>Ve třetím kroku se rozbalí stažený tarball a provede se známá magická
trojice příkazů configure+make+install. Pro instalaci pluginu pro všechny
uživatele je nutné mít práva roota:</p>

<pre>
tar xvfz clewn.tar.gz 
cd clewn-1.15/
./configure
make
make install
</pre>

<p>Osobně však pro první pokusy doporučuji lokální instalaci pro jednoho
uživatele:</p>

<pre>
tar xvfz clewn.tar.gz 
cd clewn-1.15/
vimdir=$HOME/.vim  ./configure  --prefix=$HOME
make
make install
</pre>

<p>V&nbsp;tomto případě by se v&nbsp;adresáři <strong>~/bin</strong> měl
objevit nový spustitelný soubor <strong>clewn</strong>, což lze snadno
ověřit:</p>

<pre>
ls -l ~/bin
total 400
-rwxr-xr-x. 1 tester tester    474 Jan 23 17:58 asciidoctor
-rwxr-xr-x. 1 tester tester    479 Jan 23 17:58 asciidoctor-safe
-rwxr-xr-x. 1 tester tester 400234 May 19 17:54 clewn
</pre>

<p>Současně se (alespoň doufejme) nainstaluje i vimovská část pluginu.</p>

<a href="http://www.root.cz/obrazek/208364/"><img src="http://i.iinfo.cz/images/55/clewn-2-prev.png" class="image-208364" width="370" height="267" alt="&#160;" /></a>
<p><i>Obrázek 9: Krokování programu z&nbsp;Vimu.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Použití pluginu <strong>Clewn</strong></h2>

<p>Ukažme si nyní použití pluginu <i>Clewn</i> při ladění aplikace
<strong>test.c</strong>. Nejprve je nutné přeložit zdrojový kód a přitom
překladači přikázat, že se mají do výsledného spustitelného souboru přidat i
ladicí informace. V&nbsp;případě programovacího jazyka C je to jednoduché:</p>

<pre>
gcc -O0 -g -o test test.c
</pre>

<p>Výsledkem dokončení překladu bude v&nbsp;tomto případě binární spustitelný
soubor nazvaný <strong>test</strong>. Následuje spuštění utility
<strong>clewn</strong>:</p>

<pre>
clewn -d -ga test
</pre>

<p>Tento příkaz by měl spustit a inicializovat debugger <i>gdb</i> a současně
v&nbsp;novém okně spustit <i>Gvim</i>. Ovládání debuggeru lze provádět přímo
z&nbsp;Vimu, v&nbsp;němž se otevře příslušný zdrojový kód
(<strong>test.c</strong>). K&nbsp;dispozici jsou následující klávesové
zkratky:</p>

<table>
<tr><th>Klávesová zkratka</th><th>Význam</th></tr>
<tr><td>R</td><td>spuštění programu</td></tr>
<tr><td>Q</td><td>ukončení ladění</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Ctrl+B</td><td>nastavení breakpointu na řádku s&nbsp;kurzorem</td></tr>
<tr><td>Ctrl+E</td><td>vymazání breakpointů na řádku s&nbsp;kurzorem</td></tr>
<tr><td>B</td><td>zobrazení informací o breakpointech</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>S</td><td>jeden krok s&nbsp;vykonáním celé volané funkce (step)</td></tr>
<tr><td>I</td><td>jeden krok s&nbsp;případným vstupem do volané funkce (step into)</td></tr>
<tr><td>C</td><td>pokračovat ve vykonávání programu (continue)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>L</td><td>zobrazení informací o lokálních proměnných</td></tr>
<tr><td>A</td><td>zobrazení informací o argumentech</td></tr>
<tr><td>W</td><td>zobrazení informací, v jakém bodě se program nachází (backtrace)</td></tr>
</table>

<p>Ve skutečnosti existuje ještě více klávesových zkratek, naleznete je
v&nbsp;nápovědě k&nbsp;pluginu.</p>

<a href="http://www.root.cz/obrazek/208365/"><img src="http://i.iinfo.cz/images/55/clewn-3-prev.png" class="image-208365" width="370" height="267" alt="&#160;" /></a>
<p><i>Obrázek 10: Zobrazení nápovědy k&nbsp;pluginu a výpis lokálních
proměnných (v&nbsp;debuggeru).</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Plugin <strong>Pyclewn</strong></h2>

<p>Druhým pluginem určeným pro propojení textového editoru <i>Vim</i>
s&nbsp;debuggerem je přídavný modul nazvaný <i>Pyclewn</i>. Tento plugin
umožňuje práci s&nbsp;debuggerem <i>gdb</i> (použijí ho céčkači, vývojáři
pracující v&nbsp;C++, Fortranu atd. atd.) a taktéž s&nbsp;debuggerem <i>pdb</i>
používaném při ladění aplikací naprogramovaných v&nbsp;Pythonu. Tento plugin
nepotřebuje pro svoji práci <i>Gvim</i> spuštěný s&nbsp;GUI, veškerá činnost se
odehrává v&nbsp;jediném terminálu a navíc se tento plugin spouští přímo
z&nbsp;<i>Vimu</i> (u výše popsaného nástroje to bylo naopak &ndash; nejprve se
spustil <strong>clewn</strong>, který následně otevřel nové okno
s&nbsp;<i>Gvimem</i>).</p>

<a href="http://www.root.cz/obrazek/208278/"><img src="http://i.iinfo.cz/images/521/vim-dbg-8-prev.png"  class="image-208278" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 11: Integrovaná nápověda k&nbsp;pluginu Pyclewn.</i></p>

<p>Samotné uživatelské prostředí připravené tímto pluginem (viz přiložené
screenshoty) je snadno pochopitelné &ndash; jedno okno se používá pro zobrazení
konzole debuggeru, další menší okna slouží pro výpis nastavených breakpointů,
sledovaných proměnných atd. a poslední část plochy <i>Vimu</i> ukazuje laděný
zdrojový kód, v&nbsp;němž jsou s&nbsp;využitím <a href="#k03">značek</a>
zvýrazněny breakpointy, zakázané breakpointy a ve chvíli krokování i právě
prováděný prováděný řádek. Plugin mapuje i klávesové zkratky, další zkratky je
samozřejmě možné v&nbsp;případě potřeby přidat.</p>

<a href="http://www.root.cz/obrazek/208279/"><img src="http://i.iinfo.cz/images/521/vim-dbg-9-prev.png"  class="image-208279" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 12: Připojování pluginu Pyclewn k&nbsp;debuggeru.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Instalace pluginu <strong>Pyclewn</strong></h2>

<p>Instalace pluginu <i>Pyclewn</i> je poněkud jednodušší, než tomu bylo u
dříve popsaného pluginu <i>Clewn</i>, protože při instalaci lze použít známý
správce Pythonovských balíčků <i>pip</i> (<a
href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>. Pokud
nemáte <i>pip</i> nainstalovaný ve svém systému, můžete použít instrukce
dostupné na stránce <a
href="https://pip.pypa.io/en/stable/installing.html">https://pip.pypa.io/en/stable/installing.html</a>,
kde je celá instalace podrobně popsána. Následně je nutné nainstalovat balíček
<strong>python-dev</strong>. Na operačních systémech založených na RPM lze
použít příkaz:</p>

<pre>
sudo yum install python-dev
</pre>

<p>Na systémech založených na .deb balíčcích pak příkaz:</p>

<pre>
sudo apt-get install python-dev
</pre>

<p>Dále již následuje vlastní instalace binární části pluginu
<i>Pyclewn</i>:</p>

<pre>
pip install --user pyclewn
</pre>

<p>Posledním krokem je instalace Vimovského pluginu, který je dostupný ve formě
takzvaného <i>vim-ballu</i>:</p>

<pre>
python -c "import clewn; clewn.get_vimball()"
vim -S pyclewn-2.1.vmb
</pre>

<p>Po zadání posledního příkazu se spustí <i>Vim</i>, který sám dokončí
instalaci, protože <i>vim-ball</i> obsahuje i instalační skript:</p>

<pre>
"pyclewn-2.1.vmb" 1900L, 70672C
Vimball Archive
extracted &lt;autoload/pyclewn/start.vim&gt;: 224 lines
wrote /home/tester/.vim/autoload/pyclewn/start.vim
extracted &lt;autoload/pyclewn/buffers.vim&gt;: 241 lines
wrote /home/tester/.vim/autoload/pyclewn/buffers.vim
extracted &lt;autoload/pyclewn/version.vim&gt;: 4 lines
wrote /home/tester/.vim/autoload/pyclewn/version.vim
extracted &lt;doc/pyclewn.txt&gt;: 1243 lines
wrote /home/tester/.vim/doc/pyclewn.txt
extracted &lt;plugin/pyclewn.vim&gt;: 11 lines
wrote /home/tester/.vim/plugin/pyclewn.vim
extracted &lt;syntax/clewn_variables.vim&gt;: 25 lines
wrote /home/tester/.vim/syntax/clewn_variables.vim
extracted &lt;macros/.pyclewn_keys.gdb&gt;: 49 lines
wrote /home/tester/.vim/macros/.pyclewn_keys.gdb
extracted &lt;macros/.pyclewn_keys.pdb&gt;: 44 lines
wrote /home/tester/.vim/macros/.pyclewn_keys.pdb
extracted &lt;macros/.pyclewn_keys.simple&gt;: 38 lines
wrote /home/tester/.vim/macros/.pyclewn_keys.simple
did helptags
</pre>

<a href="http://www.root.cz/obrazek/208280/"><img src="http://i.iinfo.cz/images/521/vim-dbg-10-prev.png" class="image-208280" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 13: Ladění programu napsaného v&nbsp;céčku: nastavení
breakpointů, sledování proměnných atd. Povšimněte si, že tento plugin bez
problémů pracuje i v&nbsp;terminálu, ovšem je zapotřebí použít větší okno (zde
80&times;25 znaků je nedostatečných, což je ovšem pochopitelné)</i></p>

<p>Výsledná struktura adresáře <strong>~/.vim</strong> může vypadat následovně.
Povšimněte si, že kromě pluginu <i>Pyclewn</i> jsou nainstalovány i další
pluginy, především již popsané pluginy <i>Pathogen</i>, <i>vim-diff</i>,
<i>vim-slime</i> a <i>matchit</i>:</p>

<pre>
.
├── autoload
│   ├── pathogen.vim
│   └── pyclewn
│       ├── buffers.vim
│       ├── start.vim
│       └── version.vim
├── bundle
│   ├── vim-dirdiff
│   │   ├── doc
│   │   │   ├── dirdiff.txt
│   │   │   └── tags
│   │   ├── plugin
│   │   │   └── dirdiff.vim
│   │   ├── README.md
│   │   └── screenshot.png
│   └── vim-slime
│       ├── doc
│       │   ├── tags
│       │   └── vim-slime.txt
│       ├── ftplugin
│       │   ├── coffee
│       │   │   └── slime.vim
│       │   ├── fsharp
│       │   │   └── slime.vim
│       │   ├── haskell
│       │   │   └── slime.vim
│       │   ├── lhaskell
│       │   │   └── slime.vim -&gt; ../haskell/slime.vim
│       │   ├── ocaml
│       │   │   └── slime.vim
│       │   ├── python
│       │   │   └── slime.vim
│       │   └── scala
│       │       └── slime.vim
│       ├── LICENSE.txt
│       ├── plugin
│       │   └── slime.vim
│       └── README.md
├── doc
│   ├── matchit.txt
│   ├── pyclewn.txt
│   └── tags
├── macros
├── plugin
│   ├── matchit.vim
│   └── pyclewn.vim
├── spell
│   ├── cs.iso-8859-2.spl
│   ├── cs.utf-8.add
│   ├── cs.utf-8.add.spl
│   └── cs.utf-8.spl
└── syntax
    └── clewn_variables.vim
</pre>

<a href="http://www.root.cz/obrazek/208281/"><img src="http://i.iinfo.cz/images/521/vim-dbg-11-prev.png" class="image-208281" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 14: Ladění programu napsaného v&nbsp;céčku: ukončení laděného
programu. V&nbsp;horním okně můžeme vidět rozhraní debuggeru gdb,
v&nbsp;prostředním okně breakpointy, sledované proměnné atd., ve spodním okně
pak laděný zdrojový kód.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Použití pluginu <strong>Pyclewn</strong></h2>

<p>V&nbsp;případě, že se plugin <i>Pyclewn</i> používá pro ladění
s&nbsp;využitím debuggeru <i>gdb</i>, stačí přeložit příslušný zdrojový kód a
přitom překladači přikázat, že se mají do výsledného spustitelného souboru
přidat i ladicí informace. V&nbsp;případě programovacího jazyka C je to
jednoduché:</p>

<pre>
gcc -O0 -g -o test test.c
</pre>

<p>Výsledkem dokončení překladu bude v&nbsp;tomto případě binární spustitelný
soubor nazvaný <strong>test</strong> (pokud máte správně nastavené cesty,
nedojde ke kolizi s&nbsp;existujícím příkazem stejného jména :-). Následně se
spustí <i>Vim</i>, v&nbsp;němž se otevře zdrojový soubor:</p>

<pre>
vim test.c
</pre>

<p>Ve <i>Vimu</i> se příkazem:</p>

<pre>
:pyclewn gdb
</pre>

<p>spustí debugger a plugin se k&nbsp;debuggeru připojí. Plugin následně
rozdělí okno editoru na pět podoken (viz screenshoty) a v&nbsp;horním podokně
zobrazí konzoli debuggeru. Následně se musí do debuggeru nahrát laděný binární
soubor:</p>

<pre>
:Cfile test
</pre>

<a href="http://www.root.cz/obrazek/208282/"><img src="http://i.iinfo.cz/images/521/vim-dbg-12-prev.png" class="image-208282" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 15: Ladění programu napsaného v&nbsp;Pythonu: připojení
k&nbsp;debuggeru.</i></p>

<p>Nyní by již vše mělo být připraveno na otestování funkcí nabízených pluginem
<i>Pyclewn</i>. Všechny příkazy začínají velkým písmenem C, za nímž následuje
jméno příkazu, který (většinou) odpovídá stejnojmennému příkazu
v&nbsp;<i>gdb</i>. Podívejme se nyní na několik nejpoužívanějších příkazů:</p>

<p>Nastavení breakpointu na začátek funkce <i>main</i> (breakpoint se objeví
v&nbsp;příslušném podokně &ndash; prvním podokně ve druhé sekci):</p>

<pre>
:Cbreak main
</pre>

<p>Spuštění laděného programu:</p>

<pre>
:Crun
</pre>

<p>Laděný program se (podle očekávání) zastaví na prvním příkazu ve funkci
<i>main</i>, protože právě zde jsme nastavili breakpoint. Pro provedení tohoto
příkazu &ndash; jednoho kroku &ndash; poslouží příkaz:</p>

<pre>
:Cstep
</pre>

<p>Nastavit lze samozřejmě i watchpointy hlídající přístup k&nbsp;proměnné či
k&nbsp;několika proměnným (informace o nastavených watchpointech se opět zapíše
do pomocného informačního podokna):</p>

<pre>
:Cwatch x,y,answer
</pre>

<p>Pro zobrazení obsahu proměnné či proměnných poslouží příkaz (otevře se další
podokno se seznamem a aktuálním obsahem všech sledovaných proměnných, změněná
proměnná je v&nbsp;každém kroku vysvícena, což je velmi užitečné):</p>

<pre>
:Cdbgvar x
</pre>

<p>Popř.&nbsp;je možné sledovat i výrazy:</p>

<pre>
:Cdbgvar x*10
</pre>

<p>Další možnosti použití tohoto pluginu, včetně možnosti namapování
klávesových zkratek, si v&nbsp;případě čtenářského zájmu popíšeme příště.</p>

<a href="http://www.root.cz/obrazek/208283/"><img src="http://i.iinfo.cz/images/521/vim-dbg-13-prev.png" class="image-208283" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 16: Ladění programu napsaného v&nbsp;Pythonu: krokování a
zobrazení nápovědy k&nbsp;pluginu Pyclewn.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Odkazy na předchozí části článku</h2>

<ol>

<li>Užitečné skripty a pluginy pro textový editor Vim<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (2.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-2-cast/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-2-cast/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (3.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-3-cast/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-3-cast/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (4.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-4-cast/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-4-cast/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (5.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-5-cast/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-5-cast/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (6.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-6-cast-cestovani-v-case/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-6-cast-cestovani-v-case/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (7.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-7-cast/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-7-cast/</a>
</li>

<li>Tvorba vlastního pluginu pro textový editor Vim<br />
<a href="http://www.root.cz/clanky/tvorba-vlastniho-pluginu-pro-textovy-editor-vim/">http://www.root.cz/clanky/tvorba-vlastniho-pluginu-pro-textovy-editor-vim/</a>
</li>

</ol>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odkazy na Internetu</h2>

<ol>

<li>Pyclewn installation notes<br />
<a href="http://pyclewn.sourceforge.net/install.html">http://pyclewn.sourceforge.net/install.html</a>
</li>

<li>pip Installation<br />
<a href="https://pip.pypa.io/en/latest/installing.html">https://pip.pypa.io/en/latest/installing.html</a>
</li>

<li>Clewn<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>Clewn installation<br />
<a href="http://clewn.sourceforge.net/install.html">http://clewn.sourceforge.net/install.html</a>
</li>

<li>Clewn - soubory<br />
<a href="http://sourceforge.net/projects/clewn/files/OldFiles/">http://sourceforge.net/projects/clewn/files/OldFiles/</a>
</li>

<li>Writing Vim Plugins<br />
<a href="http://stevelosh.com/blog/2011/09/writing-vim-plugins/">http://stevelosh.com/blog/2011/09/writing-vim-plugins/</a>
</li>

<li>how to understand this vim script?<br />
<a href="http://stackoverflow.com/questions/12625091/how-to-understand-this-vim-script">http://stackoverflow.com/questions/12625091/how-to-understand-this-vim-script</a>
</li>

<li>Novinky ve VIM 7: Skriptovací jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>DirDiff.vim : A plugin to diff and merge two directories recursively.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=102">http://www.vim.org/scripts/script.php?script_id=102</a>
</li>

<li>vim-dirdiff na GitHubu<br />
<a href="https://github.com/will133/vim-dirdiff">https://github.com/will133/vim-dirdiff</a>
</li>

<li>fakeclip : pseudo clipboard register for non-GUI version of Vim<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2098">http://www.vim.org/scripts/script.php?script_id=2098</a>
</li>

<li>vim-fakeclip na GitHubu<br />
<a href="https://github.com/kana/vim-fakeclip">https://github.com/kana/vim-fakeclip</a>
</li>

<li>vim-fakeclip: Dokumentace<br />
<a href="http://kana.github.io/config/vim/fakeclip.html">http://kana.github.io/config/vim/fakeclip.html</a>
</li>

<li>Vim Multiple Cursors na GitHubu<br />
<a href="https://github.com/terryma/vim-multiple-cursors">https://github.com/terryma/vim-multiple-cursors</a>
</li>

<li>SLIME (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/SLIME">http://en.wikipedia.org/wiki/SLIME</a>
</li>

<li>vim-slime na GitHubu<br />
<a href="https://github.com/jpalardy/vim-slime">https://github.com/jpalardy/vim-slime</a>
</li>

<li>vi Editor Commands<br />
<a href="http://www.cs.rit.edu/~cslab/vi.html#A1.4">http://www.cs.rit.edu/~cslab/vi.html#A1.4</a>
</li>

<li>vi Manual<br />
<a href="http://www.cs.fsu.edu/general/vimanual.html">http://www.cs.fsu.edu/general/vimanual.html</a>
</li>

<li>Mastering the Vi Editor<br />
<a href="http://www.susnet.uk/mastering-the-vi-editor">http://www.susnet.uk/mastering-the-vi-editor</a>
</li>

<li>Using undo branches<br />
<a href="http://vim.wikia.com/wiki/Using_undo_branches">http://vim.wikia.com/wiki/Using_undo_branches</a>
</li>

<li>Gundo<br />
<a href="http://sjl.bitbucket.org/gundo.vim/">http://sjl.bitbucket.org/gundo.vim/</a>
</li>

<li>Vim as a Python IDE, or Python IDE as Vim<br />
<a href="http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/">http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/</a>
</li>

<li>histwin na GitHubu<br />
<a href="https://github.com/chrisbra/histwin.vim">https://github.com/chrisbra/histwin.vim</a>
</li>

<li>histwin.vim : Browse the undo tree<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2932">http://www.vim.org/scripts/script.php?script_id=2932</a>
</li>

<li>undotree.vim : Display your undo history in a graph<br />
<a href="http://www.vim.org/scripts/script.php?script_id=4177">http://www.vim.org/scripts/script.php?script_id=4177</a>
</li>

<li>Surround<br />
<a href="http://www.bestofvim.com/plugin/surround/">http://www.bestofvim.com/plugin/surround/</a>
</li>

<li>SnipMate<br />
<a href="http://www.bestofvim.com/plugin/snipmate/">http://www.bestofvim.com/plugin/snipmate/</a>
</li>

<li>Getting a Clojure REPL in Vim With VimClojure, Nailgun, and Leiningen<br />
<a href="http://naleid.com/blog/2011/12/19/getting-a-clojure-repl-in-vim-with-vimclojure-nailgun-and-leiningen/">http://naleid.com/blog/2011/12/19/getting-a-clojure-repl-in-vim-with-vimclojure-nailgun-and-leiningen/</a>
</li>

<li>The NERD Commenter : A plugin that allows for easy commenting of code for many filetypes.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1218">http://www.vim.org/scripts/script.php?script_id=1218</a>
</li>

<li>NERD Commenter na GitHubu<br />
<a href="https://github.com/scrooloose/nerdcommenter">https://github.com/scrooloose/nerdcommenter</a>
</li>

<li>luarefvim : Lua reference manual<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1291">http://www.vim.org/scripts/script.php?script_id=1291</a>
</li>

<li>lua.vim : Lua file type plug-in for the Vim text editor<br />
<a href="http://www.vim.org/scripts/script.php?script_id=3625">http://www.vim.org/scripts/script.php?script_id=3625</a>
</li>

<li>vim-lua-ftplugin<br />
<a href="https://github.com/xolox/vim-lua-ftplugin">https://github.com/xolox/vim-lua-ftplugin</a>
</li>

<li>Vi Improved<br />
<a href="https://wiki.python.org/moin/Vim">https://wiki.python.org/moin/Vim</a>
</li>

<li>javacomplete : Omni Completion for JAVA<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1785">http://www.vim.org/scripts/script.php?script_id=1785</a>
</li>

<li>SearchComplete<br />
<a href="http://www.vim.org/scripts/script.php?script_id=474">http://www.vim.org/scripts/script.php?script_id=474</a>
</li>

<li>ShowMarks<br />
<a href="http://www.vim.org/scripts/script.php?script_id=152">http://www.vim.org/scripts/script.php?script_id=152</a>
</li>

<li>ctrlp.vim<br />
<a href="https://github.com/kien/ctrlp.vim">https://github.com/kien/ctrlp.vim</a>
</li>

<li>ctrlp.vim<br />
<a href="http://kien.github.io/ctrlp.vim/">http://kien.github.io/ctrlp.vim/</a>
</li>

<li>vim-signature<br />
<a href="https://github.com/kshenoy/vim-signature">https://github.com/kshenoy/vim-signature</a>
</li>

<li>Supertab<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1643">http://www.vim.org/scripts/script.php?script_id=1643</a>
</li>

<li>Supertab (GitHub)<br />
<a href="https://github.com/ervandew/supertab">https://github.com/ervandew/supertab</a>
</li>

<li>Vim Essential Plugin: NERD Tree<br />
<a href="http://code.tutsplus.com/tutorials/vim-essential-plugin-nerdtree--net-19692">http://code.tutsplus.com/tutorials/vim-essential-plugin-nerdtree--net-19692</a>
</li>

<li>The NERD tree : A tree explorer plugin for navigating the filesystem <br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=1658">http://vim.sourceforge.net/scripts/script.php?script_id=1658</a>
</li>

<li>NERD Tree Guide<br />
<a href="http://usevim.com/2012/07/18/nerdtree/">http://usevim.com/2012/07/18/nerdtree/</a>
</li>

<li>vcscommand.vim : CVS/SVN/SVK/git/hg/bzr integration plugin<br />
<a href="http://www.vim.org/scripts/script.php?script_id=90">http://www.vim.org/scripts/script.php?script_id=90</a>
</li>

<li>vcscommand na GitHubu<br />
<a href="https://github.com/vim-scripts/vcscommand.vim">https://github.com/vim-scripts/vcscommand.vim</a>
</li>

<li>Popis skriptu Vim Pathogen<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2332">http://www.vim.org/scripts/script.php?script_id=2332</a>
</li>

<li>Poslední­verze skriptu Vim Pathogen<br />
<a href="https://tpo.pe/pathogen.vim">https://tpo.pe/pathogen.vim</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://vimawesome.com/">http://vimawesome.com/</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://www.vim.org/scripts/script_search_results.php?order_by=rating">http://www.vim.org/scripts/script_search_results.php?order_by=rating</a>
</li>

<li>Vim-airline na GitHubu<br />
<a href="https://github.com/bling/vim-airline">https://github.com/bling/vim-airline</a>
</li>

<li>Vim-airline na www.vim.org<br />
<a href="http://www.vim.org/scripts/download_script.php?src_id=22726">http://www.vim.org/scripts/download_script.php?src_id=22726</a>
</li>

<li>Vim-fugitive na GitHubu<br />
<a href="https://github.com/tpope/vim-fugitive">https://github.com/tpope/vim-fugitive</a>
</li>

<li>Vim-fugitive na www.vim.org<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2975">http://www.vim.org/scripts/script.php?script_id=2975</a>
</li>

<li>Textový editor Vim jako IDE (seriál)<br />
<a href="http://www.root.cz/clanky/textovy-editor-vim-jako-ide/">http://www.root.cz/clanky/textovy-editor-vim-jako-ide/</a>
</li>

<li>Building Vim<br />
<a href="http://vim.wikia.com/wiki/Building_Vim">http://vim.wikia.com/wiki/Building_Vim</a>
</li>

<li>Getting the Vim source with Mercurial<br />
<a href="http://vim.wikia.com/wiki/Getting_the_Vim_source_with_Mercurial">http://vim.wikia.com/wiki/Getting_the_Vim_source_with_Mercurial</a>
</li>

<li>Vim Perl Interface<br />
<a href="http://vim.dindinx.net/vim7/html/if_perl.txt.php">http://vim.dindinx.net/vim7/html/if_perl.txt.php</a>
</li>

<li>Vim Perl Support<br />
<a href="http://www.softpanorama.org/Editors/Vimorama/vim_perl_support.shtml">http://www.softpanorama.org/Editors/Vimorama/vim_perl_support.shtml</a>
</li>

<li>VIM as Python IDE<br />
<a href="http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/">http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/</a>
</li>

<li>Stack Overflow: VIM: Perl interface: passing a variable to Perl and reading a vim variable from Perl<br />
<a href="http://stackoverflow.com/questions/4999902/vim-perl-interface-passing-a-variable-to-perl-and-reading-a-vim-variable-from">http://stackoverflow.com/questions/4999902/vim-perl-interface-passing-a-variable-to-perl-and-reading-a-vim-variable-from</a>
</li>

<li>Stack Overflow: Getting started with vim scripting with Perl<br />
<a href="http://stackoverflow.com/questions/2208618/getting-started-with-vim-scripting-with-perl">http://stackoverflow.com/questions/2208618/getting-started-with-vim-scripting-with-perl</a>
</li>

<li>Python with a modular IDE (Vim)<br />
<a href="http://www.sontek.net/python-with-a-modular-ide-vim">http://www.sontek.net/python-with-a-modular-ide-vim</a>
</li>

<li>Getting to VIM's Python interface<br />
<a href="http://zerokspot.com/weblog/2009/02/21/getting-to-know-vims-python-interface/">http://zerokspot.com/weblog/2009/02/21/getting-to-know-vims-python-interface/</a>
</li>

<li>Pretty-formatting XML<br />
<a href="http://vim.wikia.com/wiki/Pretty-formatting_XML">http://vim.wikia.com/wiki/Pretty-formatting_XML</a>
</li>

<li>Delete a pair of XML/HTML tags<br />
<a href="http://vim.wikia.com/wiki/Delete_a_pair_of_XML/HTML_tags">http://vim.wikia.com/wiki/Delete_a_pair_of_XML/HTML_tags</a>
</li>

<li>Vim as XML Editor<br />
<a href="http://www.pinkjuice.com/howto/vimxml/">http://www.pinkjuice.com/howto/vimxml/</a>
</li>

<li>xmledit: A filetype plugin to help edit XML, HTML, and SGML documents<br />
<a href="http://www.vim.org/scripts/script.php?script_id=301">http://www.vim.org/scripts/script.php?script_id=301</a>
</li>

<li>Poslední vývojová verze makra xmledit<br />
<a href="http://github.com/sukima/xmledit/">http://github.com/sukima/xmledit/</a>
</li>

<li>vim.wikia: Display date-and-time on status line<br />
<a href="http://vim.wikia.com/wiki/Display_date-and-time_on_status_line">http://vim.wikia.com/wiki/Display_date-and-time_on_status_line</a>
</li>

<li>vim.wikia: Writing a valid statusline<br />
<a href="http://vim.wikia.com/wiki/Writing_a_valid_statusline">http://vim.wikia.com/wiki/Writing_a_valid_statusline</a>
</li>

<li>vim.wikia: Statusline tab level ruler<br />
<a href="http://vim.wikia.com/wiki/Statusline_tab_level_ruler">http://vim.wikia.com/wiki/Statusline_tab_level_ruler</a>
</li>

<li>vim.wikia: Switching between different statuslines<br />
<a href="http://vim.wikia.com/wiki/Switching_between_different_statuslines">http://vim.wikia.com/wiki/Switching_between_different_statuslines</a>
</li>

<li>X Selections, Cut Buffers, and Kill Rings<br />
<a href="http://www.jwz.org/doc/x-cut-and-paste.html">http://www.jwz.org/doc/x-cut-and-paste.html</a>
</li>

<li>Accessing the system clipboard<br />
<a href="http://vim.wikia.com/wiki/Accessing_the_system_clipboard">http://vim.wikia.com/wiki/Accessing_the_system_clipboard</a>
</li>

<li>xcutsel(1) - Linux man page<br />
<a href="http://linux.die.net/man/1/xcutsel">http://linux.die.net/man/1/xcutsel</a>
</li>

<li>snipMate : TextMate-style snippets for Vim<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2540">http://www.vim.org/scripts/script.php?script_id=2540</a>
</li>

<li>msanders / snipmate.vim<br />
<a href="https://github.com/msanders/snipmate.vim">https://github.com/msanders/snipmate.vim</a>
</li>

<li>snipMate.vim Introductory Screencast<br />
<a href="http://vimeo.com/3535418">http://vimeo.com/3535418</a>
</li>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Vim plugins for developers<br />
<a href="http://www.linuxtoday.com/upload/vim-plugins-for-developers-140619094010.html">http://www.linuxtoday.com/upload/vim-plugins-for-developers-140619094010.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

