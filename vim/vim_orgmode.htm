<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Plugin vim-orgmode: portace populárního orgmode do Vimu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Plugin vim-orgmode: portace populárního orgmode do Vimu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Mezi jeden z nejpopulárnějších modulů textového editoru Emacs patří plugin nabízející uživatelům tzv. org mode, neboli režim pro správu poznámek, diáře, plánovače atd. Podobný modul, i když ještě ne zcela dokončený, existuje i pro editor Vim. Jmenuje se jednoduše vim-orgmode.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Plugin vim-orgmode: portace populárního orgmode do Vimu</a></p>
<p><a href="#k02">2. Princip, na němž je orgmode založen</a></p>
<p><a href="#k03">3. Použití správce balíčků Pathogen</a></p>
<p><a href="#k04">4. Instalace a konfigurace Pathogenu</a></p>
<p><a href="#k05">5. Instalace samotného modulu <strong>vim-orgmode</strong></a></p>
<p><a href="#k06">6. Instalace pomocných pluginů <strong>vim-speeddating</strong> a <strong>calendar</strong></a></p>
<p><a href="#k07">7. Dokončení konfigurace v&nbsp;souboru <strong>.vimrc</strong></a></p>
<p><a href="#k08">8. Nastavení proměnné <strong>maplocalleader</strong></a></p>
<p><a href="#k09">9. Základní struktura souborů s&nbsp;poznámkami a diářem</a></p>
<p><a href="#k10">10. Změna náhledu na dokument</a></p>
<p><a href="#k11">11. Seznamy</a></p>
<p><a href="#k12">12. Zaškrtávací políčka</a></p>
<p><a href="#k13">13. Značky &bdquo;Udělat&ldquo; a &bdquo;Hotovo&ldquo;</a></p>
<p><a href="#k14">14. Definice značek pro specifické procesy</a></p>
<p><a href="#k15">15. Vlastní štítky</a></p>
<p><a href="#k16">16. Základní operace pro práci s&nbsp;daty a časovými značkami</a></p>
<p><a href="#k17">17. Použití kalendáře</a></p>
<p><a href="#k18">18. Další užitečné pluginy pro zjednodušení práce s&nbsp;<strong>vim-orgmode</strong></a></p>
<p><a href="#k19">19. Prozatím neimplementované vlastnosti modulu <strong>vim-orgmode</strong></a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Plugin vim-orgmode: portace populárního orgmode do Vimu</h2>

<p><a href="https://www.root.cz/n/emacs/">Textový editor Emacs</a> je mezi
uživateli populární zejména kvůli svému rozsáhlému ekosystému různých
rozšiřovacích modulů naprogramovaných většinou přímo v&nbsp;Emacs Lispu.
Připomeňme si například některé užitečné moduly, s&nbsp;nimiž jsme se již na
stránkách Roota setkali: <a
href="https://www.root.cz/clanky/graficka-nadstavba-nad-gnu-debuggerem-gdbgui-a-jeji-alternativy/#k07">podpora
pro ladění aplikací</a>, režim pro <a
href="https://www.root.cz/clanky/pouziti-emacsu-pro-porovnavani-a-slucovani-souboru/">zvýraznění
rozdílů mezi soubory a pro jejich synchronizaci</a> (včetně porovnání tří verzí
souborů) a samozřejmě takzvaný <a
href="https://www.root.cz/clanky/evil-kombinace-editacnich-prikazu-vimu-a-sily-emacsu/">&bdquo;evil&ldquo;
režim s&nbsp;poměrně propracovanou emulací Vimu</a>. Uživatelé však mohou
použít i další užitečné moduly, například integrovaný webový prohlížeč, mailový
klient a zejména pak v&nbsp;žádném případě nesmíme zapomenout na modul
s&nbsp;implementací tzv.&nbsp;<i>org mode</i>, tj.&nbsp;režimu správy poznámek,
diáře, kalendáře, plánovače apod. I tento modul je samozřejmě <a
href="https://code.orgmode.org/bzg/org-mode/src/master/lisp">naprogramovaný
v&nbsp;Emacs Lispu</a>.</p>

<a href="https://www.root.cz/obrazek/340463/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-1-prev.png" class="image-340463" alt="&#160;" width="275" height="270" /></a>
<p><i>Obrázek 1: Jednoduchý dokument zobrazený v&nbsp;režimu Org mode
v&nbsp;textovém editoru Emacs.</i></p>

<p>Pro některé uživatele je <i>org mode</i> dokonce tou hlavní motivací pro
použití Emacsu (a zdaleka se nejedná pouze o programátory). Je tedy vlastně
pochopitelné, že podobný modul vznikl i pro textový editor Vim. Ve skutečnosti
dokonce vzniklo hned několik podobně koncipovaných pluginů, ovšem dnes se
seznámíme jen s&nbsp;jediným z&nbsp;nich. Jmenuje se
<strong>vim-orgmode</strong> a již název tohoto pluginu napovídá, že cílem je
dosažení co největší kompatibility s&nbsp;emacsovským režimem <i>org mode</i>.
Tohoto cíle sice ještě nebylo dosaženo (chybí například dotažená podpora pro
export dat), ovšem již v&nbsp;současném stavu se v&nbsp;každém případě jedná o
velmi dobře použitelný plugin.</p>

<a href="https://www.root.cz/obrazek/340464/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-2-prev.png" class="image-340464" alt="&#160;" width="275" height="270" /></a>
<p><i>Obrázek 2: Označení stavu úkolů (udělat, hotovo, ...).</i></p>

<p><div class="rs-tip-major">Poznámka: první třetina článku je věnována
instalaci pluginu <strong>vim-orgmode</strong> i pomocného pluginu
<strong>vim-speeddating</strong>. Pokud vás zajímají spíše vlastnosti a
možnosti poskytovanými popisovaným pluginem, přeskočte prosím <a
href="#k08">přímo na osmou kapitolu</a>, v&nbsp;níž je popsána základní
struktura souboru s&nbsp;poznámkami a diářem.</div></p>

<a href="https://www.root.cz/obrazek/340465/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-3-prev.png" class="image-340465" alt="&#160;" width="275" height="270" /></a>
<p><i>Obrázek 3: Práce s&nbsp;kalendářem (org-mode v&nbsp;Emacsu).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Princip, na němž je orgmode založen</h2>

<p>Na rozdíl od specializovaných aplikací pracuje <i>org mode</i> s&nbsp;čistě
textovými soubory, v&nbsp;nichž se rozeznává několik značek, které je možné se
velmi snadno naučit. Ostatně se stejným principem, tj.&nbsp;s&nbsp;použitím
běžných textových souborů s&nbsp;několika značkami, se pravděpodobně setkalo
hodně čtenářů: jedná se zejména o formáty AsciiDoc, Markdown, ReStructuredText
a podmnožiny těchto jazyků, které jsou použity například na GitHubu, některých
wiki apod. Ostatně i samotný formát používaný <i>org modem</i> je podporován
přímo na GitHubu &ndash; soubory tohoto typu jsou automaticky zformátovány před
zobrazením uživateli. Všechny nové příkazy, které <i>org mode</i> nabízí, tak
pracují nad čistě textovými daty, přičemž je nutné zdůraznit, že plugin nemá
k&nbsp;dispozici žádné další &bdquo;skryté&ldquo; soubory. V&nbsp;praxi to
znamená to, že si můžete poznámky a diář jednoduše synchronizovat mezi různými
počítači (přes Git popř.&nbsp;přes starý dobrý nástroj <strong>rsync</strong>)
a prakticky nikdy nedojde k&nbsp;poškození dat (pokud si je samozřejmě sami
nezmažete).</p>

<a href="https://www.root.cz/obrazek/340466/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-4-prev.png" class="image-340466" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 4: Nápověda k&nbsp;modulu <strong>vim-orgmode</strong> po jeho
úspěšné instalaci.</i></p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti se nemusíte učit význam
všech podporovaných značek, ale stačí se seznámit jen s&nbsp;těmi
nejpoužívanějšími. Další typy značek (například vlastní štítky, zaškrtávací
políčka apod.) je možné začít používat později. Totéž samozřejmě platí i pro
nové příkazy &ndash; pokud vám nezáleží na větší efektivitě práce, prakticky se
stačí naučit asi pět nových příkazů a ostatní příkazy popř.&nbsp;vyvolávat
z&nbsp;menu.</div></p>

<p>Režim <i>org mode</i> někteří uživatelé používají i pro vytváření
strukturované dokumentace. Příkladem mohou být všechny dokumenty popisující
projekt <i>Bootstrap</i>, se kterým jsme se seznámili v&nbsp;článku <a
href="https://www.root.cz/clanky/muzeme-verit-prekladacum-projekty-resici-schema-duverive-duvery/#k09">Můžeme
věřit překladačům? Projekty řešící schéma &bdquo;důvěřivé důvěry&ldquo;</a>.
Pro zajímavost se můžeme podívat na ukázku z&nbsp;této dokumentace, ve které se
mj.&nbsp;používají i tabulky:</p>

<pre>
* Platform specific information
** 8086
To encode assembly to hex, please reference: http://ref.x86asm.net/geek.html
WARNING encoding is an extremely slow and painful process by hand,
BE VERY VERY THANKFUL for those that came before us and made such wonderful
things as assemblers and C compilers that hide most of the horrible darkness from our eyes...
&nbsp;
*** Default memory map
| 16-bit mem map (seg:off)       | What is there                 |
|--------------------------------+-------------------------------|
| 0x0000:0x0000 -&gt; 0x0000:0x0500 | BIOS stuff                    |
| 0x0000:0x0500 -&gt; 0x0000:0x2100 | root                          |
| 0x0000:0x2100 -&gt; 0x0000:0x3300 | fat                           |
| 0x0000:0x3300 -&gt; 0x0000:0x6c00 | 14,25kb free space            |
| 0x0000:0x6c00 -&gt; 0x0000:0x7c00 | IDT and GDT (256 desc. eatch) |
| 0x0000:0x7c00 -&gt; 0x0000:0x7e00 | bootsector                    |
| 0x0000:0x7e00 &lt;/gc- 0x0000:0xffff | ~32,5kb stack for boot        |
| 0x1000:0x0000 -&gt; 0x9000:0xffff | 576kb free space              |
| 0xa000:0x0000 -&gt; ............. | VGA mem etc.                  |
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;původním režimu org-mode
v&nbsp;Emacsu je možné tabulky exportovat společně s&nbsp;dalším textem do
mnoha různých formátů.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Použití správce balíčků Pathogen</h2>

<p>Před popisem instalace balíčku <strong>vim-orgmode</strong> do Vimu si
alespoň ve stručnosti popíšeme způsob použití správce balíčků <i>Pathogen</i>,
protože právě tento správce bude následně použit pro instalaci jak pluginu
<strong>vim-orgmode</strong>, tak i pomocných pluginů
<strong>vim-speeddating</strong> a <strong>calendar</strong>.</p>

<p>Většina skriptů, maker, nápovědy, barvových schémat atd. nainstalovaných
společně s&nbsp;Vimem je většinou uložena do adresářové struktury umístěné
v&nbsp;<strong>/usr/share/vim/vimfiles</strong> popř.
<strong>/usr/share/vim/vim80</strong> (zde v&nbsp;závislosti na verzi). Na této
adresářové struktuře je poměrně dobře patrné rozdělení jednotlivých částí
pluginů do různých podadresářů:</p>

<pre>
├── autoload
│   ├── dist
│   └── xml
├── colors
├── compiler
├── doc
├── ftplugin
├── indent
├── keymap
├── lang
│   ├── af
│   │   └── LC_MESSAGES
...
...
...
├── macros
│   ├── hanoi
│   ├── life
│   ├── maze
│   └── urm
├── pack
│   └── dist
│       └── opt
│           ├── dvorak
│           │   ├── dvorak
│           │   └── plugin
│           ├── editexisting
│           │   └── plugin
│           ├── justify
│           │   └── plugin
│           ├── matchit
│           │   ├── doc
│           │   └── plugin
│           ├── shellmenu
│           │   └── plugin
│           ├── swapmouse
│           │   └── plugin
│           └── termdebug
│               └── plugin
├── plugin
├── print
├── spell
├── syntax
└── tutor
</pre>

<p>Skript <i>Vim Pathogen</i> mění nastavení textového editoru Vim takovým
způsobem, aby bylo možné každý plugin nainstalovat do samostatného podadresáře
pojmenovaného <strong>~/.vim/bundle/${jméno_pluginu}</strong>, což vlastně
znamená, že veškerá instalace pluginu se může provést jediným příkazem
<strong>cp -r ...</strong> popř.&nbsp;přímo naklonováním repositáře
s&nbsp;pluginem (což je technika, kterou použijeme v&nbsp;navazujících
kapitolách). Odinstalace je ještě jednodušší, protože vše zajistí příkaz
<strong>rm -rf ~/.vim/bundle/${jméno_pluginu}</strong>. Struktura adresáře
s&nbsp;pluginy tedy může vypadat následovně:</p>

<pre>
.
├── autoload
├── bundle
│   ├── ctrlp.vim
│   │   ├── autoload
│   │   │   └── ctrlp
│   │   ├── doc
│   │   └── plugin
│   ├── rainbow_parentheses.vim
│   │   ├── autoload
│   │   └── plugin
│   ├── todo.txt-vim
│   │   ├── autoload
│   │   │   └── todo
│   │   ├── doc
│   │   ├── ftdetect
│   │   ├── ftplugin
│   │   └── syntax
│   │       └── python
│   │           └── dateregex
│   │               └── dateregex
│   ├── vim-fugitive
│   │   ├── doc
│   │   └── plugin
│   ├── vim-slime
│   │   ├── doc
│   │   └── plugin
│   └── vim-vertigo
│       ├── doc
│       └── plugin
├── doc
├── plugin
├── spell
└── syntax
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace a konfigurace Pathogenu</h2>

<p>Instalace skriptu <i>Vim Pathogen</i> je ve skutečnosti velmi jednoduchá.
Tento skript je možné nainstalovat pro všechny uživatele, kteří se
k&nbsp;danému počítači připojují, nebo alternativně jen pro jednoho uživatele,
což je pro běžné pracovní laptopy i desktopy pravděpodobně typičtější případ.
Pokud má být <i>Vim Pathogen</i> používán všemi uživateli, bude jeho instalace
probíhat do adresáře <strong>/usr/share/vim/vimfiles</strong>,
<strong>/usr/share/vim/vim80</strong> atd. v&nbsp;závislosti na již zmíněné
konfigurační volbě <strong>runtimepath</strong>. Jednodušší a podle mého názoru
i v&nbsp;některých ohledech výhodnější je však instalace tohoto skriptu pouze
pro aktivního uživatele. Tuto instalaci si nyní ve stručnosti popíšeme.</p>

<p>Předpokládejme, že adresář <strong>~/.vim</strong> má následující strukturu
(jediné dva zobrazené soubory jsou používány při kontrole pravopisu, ovšem ve
skutečnosti je více než pravděpodobné, že tento adresář již bude obsahovat
pluginy nainstalované dříve &ndash; to vůbec nevadí):</p>

<pre>
.vim
└── spell
    ├── cs.iso-8859-2.spl
    └── cs.utf-8.spl
</pre>

<p><i>Vim Pathogen</i> je tvořen skutečně pouze jedním skriptem pojmenovaným
<strong>pathogen.vim</strong>. Tento skript se musí stáhnout a umístit do
adresáře <strong>~/.vim/autoload</strong>. Stažení a instalace skriptu je velmi
rychlá: zajistí ji pouhé dva příkazy vypsané pod tímto odstavcem:</p>

<pre>
mkdir -p ~/.vim/autoload
curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
</pre>

<p>Výsledná adresářová struktura bude vypadat takto:</p>

<pre>
.vim
├── autoload
│   └── pathogen.vim
└── spell
    ├── cs.iso-8859-2.spl
    └── cs.utf-8.spl
</pre>

<p>Aby se skript <i>Vim Pathogen</i> korektně aktivoval po každém spuštění
<i>Vimu</i>, je nutné provést ještě malou úpravu konfiguračního souboru
<strong>.vimrc</strong> umístěného v&nbsp;domácím adresáři. Do tohoto souboru
se musí dopsat volání funkce:</p>

<pre>
execute pathogen#infect()
</pre>

<p>Pozor: volání této funkce je nutné provést až ve chvíli, kdy je nastavena
volba <strong>set nocompatible</strong>, jinak inicializace neproběhne
korektně! (ostatně nastavení <strong>set nocompatible</strong> by mělo být
jednou z&nbsp;prvních věci prováděných při inicializaci <i>Vimu</i> :-)</p>

<p><div class="rs-tip-major">Poznámka: na systému Windows se můžeme setkat
s&nbsp;tím, že se namísto konfiguračního souboru <strong>.vimrc</strong>
používá soubor s&nbsp;podtržítkem na začátku, tedy
<strong>_vimrc</strong>.</div></p>

<p>Aby se správně zobrazovala i nápověda k&nbsp;nainstalovaným pluginům, je
vhodné ihned pod výše uvedený příkaz zadat i:</p>

<pre>
call pathogen#helptags()
</pre>

<p>Od této chvíle budou všechny pluginy instalovány do adresáře
<strong>~/.vim/bundle</strong>, který je nutné vytvořit, pokud již
neexistuje:</p>

<pre>
mkdir -p ~/.vim/bundle 
</pre>

<p>Výsledná struktura adresáře <strong>~/.vim</strong> by po provedení všech
výše zmíněných kroků měla vypadat následovně:</p>

<pre>
.vim
├── autoload
│   └── pathogen.vim
├── bundle
└── spell
    ├── cs.iso-8859-2.spl
    └── cs.utf-8.spl
</pre>

<p><div class="rs-tip-major">Poznámka: samozřejmě je možné (a pro čtenáře <a
href="https://www.root.cz/serialy/textovy-editor-vim-jako-ide/">tohoto
seriálu</a> více než pravděpodobné), že struktura vašeho adresáře
<strong>~/.vim</strong> bude &bdquo;košatější&ldquo;, ale pro účely tohoto
článku začneme skutečně se základní konfigurací.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Instalace samotného modulu <strong>vim-orgmode</strong></h2>

<p>Před instalací modulu <strong>vim-orgmode</strong> je vhodné se přesvědčit o
tom, že vaše verze Vimu obsahuje podporu pro pluginy psané v&nbsp;Pythonu.
Postačuje použít příkaz <strong>:ver</strong>, který by měl vypsat například
<strong>+python</strong>, <strong>+python3</strong>,
<strong>+python/dyn</strong> atd. Důležitá je právě značka + značící, že Vim
byl přeložen se zapnutou podporou příslušné vlastnosti:</p>

<a href="https://www.root.cz/obrazek/340467/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-5-prev.png" class="image-340467" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 5: Podporu pro pluginy psané v&nbsp;Pythonu lze zjistit po zadání
příkazu <strong>:ver</strong>.</i></p>

<p>Pokud je Python (2 či 3) podporován, provedeme instalaci pluginu
<strong>vim-orgmode</strong> pouhými dvěma příkazy:</p>

<pre>
cd ~/.vim/bundle
git clone https://github.com/jceb/vim-orgmode
</pre>

<p>Výsledná adresářová struktura ve <strong>~/.vim/</strong> nyní bude
košatější:</p>

<pre>
.vim
├── autoload
│   └── pathogen.vim
├── bundle
│   └── vim-orgmode
│       ├── debian
│       ├── doc
│       ├── documentation
│       ├── examples
│       │   └── plugins
│       ├── ftdetect
│       ├── ftplugin
│       │   └── orgmode
│       │       ├── docs
│       │       ├── liborgmode
│       │       ├── plugins
│       │       └── py3compat
│       ├── indent
│       ├── syntax
│       └── tests
└── spell
    ├── cs.iso-8859-2.spl
    └── cs.utf-8.spl
</pre>

<a href="https://www.root.cz/obrazek/340468/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-6-prev.png" class="image-340468" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 6: Nápověda zobrazená po zadání příkazu <strong>:help
orgguide</strong>.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instalace pomocných pluginů <strong>vim-speeddating</strong> a <strong>calendar</strong></h2>

<p>První pomocný plugin usnadňující práci s&nbsp;modulem
<strong>vim-orgmode</strong> se jmenuje <strong>vim-speeddating</strong>. Tento
plugin upravuje funkci příkazů <strong>Ctrl+A</strong> a
<strong>Ctrl+X</strong> volaných z&nbsp;normálního režimu. Připomeňme si, že
tyto příkazy slouží ke zvýšení popř.&nbsp;ke snížení celočíselné hodnoty, která
se nachází napravo od kurzoru popř.&nbsp;na místě kurzoru. Implicitně se
hodnota zvyšuje/snižuje o jedničku, ale samozřejmě je možné před vlastní příkaz
zadat počet opakování (v&nbsp;tomto ohledu je Vim velmi konzistentní). Vim
dokonce dokáže rozpoznat celočíselné hodnoty zapsané v&nbsp;hexadecimální
soustavě. Plugin <strong>vim-speeddating</strong> tyto vlastnosti zachovává,
ovšem umožňuje pomocí stejných klávesových zkratek změnit datum do minulosti či
do budoucnosti. Ukažme si to na jednoduchém příkladu. Pokud je v&nbsp;textovém
bufferu zapsáno následující datum:</p>

<pre>
2018-09-29
</pre>

<p>Můžeme se přesunem kurzoru na konec data a použitím příkazu
<strong>7Ctrl+A</strong> posunout o týden dopředu:</p>

<pre>
2018-10-06
</pre>

<p>Popř.&nbsp;se příkazem <strong>90Ctrl-X</strong> posunout o čtvrtletí
zpět:</p>

<pre>
2018-07-08
</pre>

<a href="https://www.root.cz/obrazek/340469/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-7-prev.png" class="image-340469" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 7: Nápověda k&nbsp;modulu
<strong>vim-speeddating</strong>.</i></p>

<p>Kurzor musel být u předchozích operací umístěn na poslední číslo;
v&nbsp;opačném případě by došlo ke zvýšení pořadového čísla měsíce či roku (u
měsíce se samozřejmě přepočítá i příslušný rok). Pokud se například budeme
chtít od posledního data posunout o půl roku dopředu, bude kurzor umístěn na
poslední nulu či sedmičku a provedeme příkaz <strong>6Ctrl+A</strong>
s&nbsp;následujícím výsledkem:</p>

<pre>
2019-01-08
</pre>

<p>Instalace tohoto pluginu je snadná (předpokládáme samozřejmě použití
<i>Pathogenu</i>):</p>

<pre>
cd ~/.vim/bundle
git clone https://github.com/tpope/vim-speeddating
</pre>

<p>Druhý plugin, který umožní provádění některých operací v&nbsp;modulu
<strong>vim-orgmode</strong>, se jmenuje jednoduše <i>Calendar</i>. Název
tohoto pluginu velmi přesně popisuje jeho funkci, protože se skutečně jedná o
kalendář, který je navíc doplněný o možnost psát (a samozřejmě i zobrazovat)
poznámky přidané k&nbsp;jednotlivým dnům. Samotný kalendář se zobrazuje ve
vyhrazeném okně <i>Vimu</i> a již při jeho vyvolání lze ovlivnit způsob
zobrazení kalendáře &ndash; umístění měsíců vedle sebe nebo pod sebe (viz též
přiložené screenshoty). Poznámky zapsané k&nbsp;jednotlivým dnům se ukládají do
jednoduchých textových souborů (používá se zvýraznění syntaxe Markdown)
umístěných v&nbsp;podadresářích uložených v&nbsp;adresáři
<strong>~/diary</strong>. Díky tomu, že je formát poznámek skutečně velmi
jednoduchý, lze je snadno prohledávat například příkazem
<strong>grep</strong>.</p>

<a href="http://www.root.cz/obrazek/202053/"><img src="http://i.iinfo.cz/images/173/vim3-3-prev.png" class="image-202053" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 8: Poznámka vytvořená k&nbsp;vybranému dni. Povšimněte si, že se
díky použití jazyka Markdown nadpisy a další prvky poznámky barevně
zvýrazňují.</i></p>

<p>Instalace pluginu <i>Calendar</i> je stejně rychlá, jako instalace obou
pluginů, s&nbsp;nimiž jsme se seznámili v&nbsp;předchozím textu:</p>

<pre>
cd ~/.vim/bundle
git clone https://github.com/mattn/calendar-vim
</pre>

<p>Výsledná struktura adresáře <strong>~/.vim/</strong> by nyní měla vypadat
následovně (jsou vypsány pouze adresáře, nikoli jednotlivé soubory):</p>

<pre>
.vim
├── autoload
│   └── pathogen.vim
├── bundle
│   ├── calendar-vim
│   │   ├── autoload
│   │   ├── doc
│   │   └── plugin
│   ├── vim-orgmode
│   │   ├── debian
│   │   ├── doc
│   │   ├── documentation
│   │   ├── examples
│   │   │   └── plugins
│   │   ├── ftdetect
│   │   ├── ftplugin
│   │   │   └── orgmode
│   │   │       ├── docs
│   │   │       ├── liborgmode
│   │   │       ├── plugins
│   │   │       └── py3compat
│   │   ├── indent
│   │   ├── syntax
│   │   └── tests
│   └── vim-speeddating
│       ├── autoload
│       ├── doc
│       └── plugin
└── spell
    ├── cs.iso-8859-2.spl
    └── cs.utf-8.spl
</pre>

<a href="https://www.root.cz/obrazek/340470/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-8-prev.png" class="image-340470" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 9: Zobrazení kalendáře v&nbsp;horizontálně rozděleném okně.
Aktuální den je zvýrazněn barevně a navíc je u něj zobrazena hvězdička.</i></p>

<p>V&nbsp;pluginu <i>Calendar</i> je definováno několik nových příkazů:</p>

<table>
<tr><th>Příkaz</th><th>Význam</th></tr>
<tr><td>:Calendar</td><td>vertikální rozdělení okna a zobrazení kalendáře v&nbsp;novém okně nalevo</td></tr>
<tr><td>:CalendarH</td><td>horizontální rozdělení okna a zobrazení kalendáře v&nbsp;novém okně dole</td></tr>
<tr><td>:CalendarVR</td><td>vertikální rozdělení okna a zobrazení kalendáře v&nbsp;novém okně napravo</td></tr>
<tr><td>:CalendarT</td><td>zobrazení kalendáře v&nbsp;režimu celého okna</td></tr>
</table>

<a href="https://www.root.cz/obrazek/340471/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-9-prev.png" class="image-340471" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 10: Zobrazení kalendáře ve vertikálně rozděleném okně. Aktuální
den je zvýrazněn barevně a navíc je u něj zobrazena hvězdička.</i></p>

<a href="https://www.root.cz/obrazek/340472/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-10-prev.png" class="image-340472" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 11: Zobrazení kalendáře v&nbsp;režimu celého okna.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Dokončení konfigurace v&nbsp;souboru <strong>.vimrc</strong></h2>

<p>Nyní musíme celou konfiguraci dokončit. Opět se nebude jednat o nijak
složité operace, spíše se přesvědčíme o tom, jestli se v&nbsp;souboru
<strong>.vimrc</strong> umístěného v&nbsp;domácím adresáři, nachází všechna
potřebná nastavení. V&nbsp;první řadě zkontrolujeme, zda je na začátku (či
v&nbsp;blízkosti) začátku tohoto konfiguračního souboru nastaven režim
NEkompatibility s&nbsp;původním editorem Vi. Tato volba je velmi důležitá,
protože ovlivňuje chování prakticky celého Vimu a mnoho pluginů v&nbsp;zapnutém
režimu kompatibility vůbec nebude pracovat:</p>

<pre>
set nocompatible
</pre>

<p>Dále se přesvědčíme o tom, že se správně inicializuje plugin
<i>Pathogen</i>. Toto nastavení by mělo být provedeno už v&nbsp;rámci instalace
a konfigurace Pathogenu &ndash; viz též <a href="#k04">čtvrtou kapitolu</a>
s&nbsp;podrobnějšími informacemi:</p>

<pre>
execute pathogen#infect()
</pre>

<p>Třetí volba je velmi důležitá, protože ovlivní chování klávesy
<strong>Tab</strong> a <strong>Shift+Tab</strong> při změně náhledu na poznámky
vytvářené v&nbsp;org-režimu. Pokud tuto volbu neuvedete nebo bude přepsaná
jiným nastavením, nemusí se načíst skripty s&nbsp;kódem určujícím jak režim
odsazení (což by až tak nevadilo), tak i způsob &bdquo;skládání&ldquo; textu
(<i>folding</i>), což je ovšem již kritické:</p>

<pre>
filetype plugin indent on
</pre>

<a href="https://www.root.cz/obrazek/340473/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-11-prev.png" class="image-340473" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 12: Pokud se vám při práci s&nbsp;poznámkami/diářem zobrazí toto
chybové hlášení, není pravděpodobně předchozí volba nastavena korektně, nebo
byla přepsána (toto chybové hlášení se typicky zobrazí po stisku klávesy
<strong>Tab</strong>).</i></p>

<p>Čtvrtou volbu využijí pouze uživatelé GVimu nebo KVimu. Slouží pro zobrazení
menu (pokud náhodou bylo vypnuto). Ve chvíli, kdy je inicializován režim
org-mode, objeví se v&nbsp;menu další panel se všemi dostupnými příkazy, což
samozřejmě použití nového režimu zjednodušuje.</p>

<pre>
set guioptions+=m
</pre>

<a href="https://www.root.cz/obrazek/340474/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-12-prev.png" class="image-340474" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 13: Chybové hlášení zobrazené ve chvíli, kdy plugin
<strong>vim-orgmode</strong> nenalezne modul
<strong>vim-speeddating</strong>.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Nastavení proměnné <strong>maplocalleader</strong></h2>

<p>V&nbsp;pluginu <strong>vim-orgmode</strong> začínají všechny klávesové
zkratky klávesou <strong>localleader</strong>. Vzhledem k&nbsp;tomu, že se
nejedná o žádnou reálnou klávesu, je na místě se zeptat, co se vlastně pod
tímto označením skrývá. Textový editor <i>Vim</i> umožňuje na
<strong>localleader</strong> nadeklarovat prakticky libovolnou klávesu
(přesněji řečeno znak), a to velmi jednoduše &ndash; nastavením proměnné
<strong>maplocalleader</strong>:</p>

<pre>
:let maplocalleader=","
</pre>

<p>Mezi vývojáři pluginů existuje dohoda, že nové příkazy budou jako prefix
používat právě hodnotu <strong>localleader</strong> nebo
<strong>leader</strong>, a to z&nbsp;toho důvodu, aby se minimalizovala možnost
interference se základními klávesovými zkratkami popř.&nbsp;s&nbsp;uživatelem
deklarovanými klávesovými zkratkami. <strong>Leader</strong> je nastavený na
znak zpětného lomítka, ovšem podle mého názoru je (z&nbsp;mnoha důvodů) lepší
ho nastavit na čárku (čímž ovšem dojde ke zrušení původního významu tohoto
znaku).</p>

<p><div class="rs-tip-major">Poznámka: V&nbsp;dalším textu budu předpokládat,
že je <strong>localleader</strong> nastavený právě na čárku.</div></p>

<a href="https://www.root.cz/obrazek/340475/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-13-prev.png" class="image-340475" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 14: Nápověda k&nbsp;nastavení <strong>leader</strong> a
<strong>localleader</strong>.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Základní struktura souborů s&nbsp;poznámkami a diářem</h2>

<p>Soubory (dokumenty) obsahující poznámky, diář, plánovač atd. mají koncovku
&bdquo;.org&ldquo;. Vim je nyní (konkrétně přes <strong>ftplugin</strong>)
nakonfigurovaný takovým způsobem, že aby se po otevření souborů s&nbsp;touto
koncovkou aktivoval plugin <strong>vim-orgmode</strong>. Základní struktura
poznámek (jedná se o strom) je určena nadpisy, které začínají hvězdičkami.
Jednou hvězdičkou je označen nadpis první úrovně, dvěma hvězdičkami nadpis
druhé úrovně atd.:</p>

<pre>
* Základní informace o OrgMode
  Textový dokument s koncovkou =.org= používá jednoduchý značkovací jazyk podobný /Markdownu/
** Formát dokumentů
*** Zvýraznění textu
    1. *bold*
    2. /italic/
    3. _underline_
    4. +strike-through+
    5. =code=
    6. ~verbatim~
*** Checkboxy
    - [ ] první
    - [ ] druhý
    - [ ] třetí
</pre>

<p>Způsob zobrazení nadpisů různých úrovní je řízen globální proměnnou
<strong>org_heading_shade_leading_stars</strong>. Aktuální nastavení této
proměnné zjistíte příkazem <strong>echo</strong> (před globální proměnné je
nutné zapsat prefix &bdquo;g:&ldquo;):</p>

<pre>
:echo g:org_heading_shade_leading_stars
</pre>

<p>Pokud je tato globální proměnná nastavena na nenulovou hodnotu, budou
hvězdičky na začátku řádky skryty (ve skutečnosti se pouze nastaví jejich barva
na barvu pozadí):</p>

<a href="https://www.root.cz/obrazek/340476/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-14-prev.png" class="image-340476" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 15: Skrytí hvězdiček na začátku řádku.</i></p>

<p>V&nbsp;opačném případě budou všechny hvězdičky zobrazeny:</p>

<a href="https://www.root.cz/obrazek/340477/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-15-prev.png" class="image-340477" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 16: Zobrazení všech hvězdiček na začátku řádku.</i></p>

<p>Můžete si tedy vybrat takový způsob zobrazení, který vám vyhovuje více.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Změna náhledu na dokument</h2>

<p>Ve chvíli, kdy počet zapsaných poznámek naroste, je nutné se dokázat
v&nbsp;rozsáhlejším dokumentu orientovat. Základními příkazy (přímo převzatými
z&nbsp;Emacsu) jsou zkratky <strong>Tab</strong> a <strong>Shift-Tab</strong>.
Tyto klávesové zkratky slouží pro postupnou změnu zobrazení resp.&nbsp;skrytí
jednotlivých úrovní dokumentu. Změna zobrazení se týká vždy té větve dokumentu,
v&nbsp;níž se nachází textový kurzor. Pokud se kurzor nachází na hlavním
nadpisu, bude se změna zobrazení týkat celého dokumentu. Podívejme se na
příklad postupného zviditelňování jednotlivých úrovní při použití klávesy
<strong>Tab</strong> (zkratka <strong>Shift-Tab</strong> funguje v&nbsp;opačném
směru):</p>

<a href="https://www.root.cz/obrazek/340478/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-16-prev.png" class="image-340478" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 17: Zobrazení nadpisu první úrovně.</i></p>

<a href="https://www.root.cz/obrazek/340479/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-17-prev.png" class="image-340479" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 18: Zobrazení nadpisů první a druhé úrovně.</i></p>

<a href="https://www.root.cz/obrazek/340480/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-18-prev.png" class="image-340480" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 19: Zobrazení nadpisů první až třetí úrovně.</i></p>

<a href="https://www.root.cz/obrazek/340481/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-19-prev.png" class="image-340481" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 20: Text na čtyřech úrovních.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Seznamy</h2>

<p>Dokument či poznámky je možné dále členit s&nbsp;využitím klasických
seznamů. Ty se dělí do třech kategorií: seznamy s&nbsp;odrážkami
(<i>unordered</i>), číslované seznamy (<i>ordered</i>) a seznamy obsahující
nějaké popisy (<i>description</i>). Ukažme si nyní způsob zápisu jednotlivých
typů seznamů:</p>

<pre>
*** Seznamy s odrážkami
    - mohou
    - začínat
    - pomlčkou
    + mohou
    + začínat
    + znakem +
    * a také
    * lze použít
    * hvězdičku
</pre>

<pre>
*** Číslované seznamy
    1. začínají
    2. číslicí
    3. která se automaticky
    4. zvětšuje
</pre>

<pre>
*** Seznamy s popisky
    - org-mode :: známý režim z Emacsu
    - vim-orgmode :: použitý ve Vimu
</pre>

<p>V&nbsp;případě, že se kurzor v&nbsp;normálním režimu nachází kdekoli uvnitř
seznamu, je možné další prvek přidat jednoduše klávesou Enter. Tato funkce je
sice dostupná i u číslovaných seznamů (nový prvek bude mít správné číslo o
jedničku vyšší než prvek předchozí), ovšem čísla u dalších prvků se automaticky
nepřepočítají!</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zaškrtávací políčka</h2>

<p>Zaškrtávací políčka jsou dalším typem seznamů. Zapisují se tímto
způsobem:</p>

<pre>
*** Checkboxy
    - [ ] první
    - [ ] druhý
    - [ ] třetí
</pre>

<p>V&nbsp;případě, že je zapotřebí políčko &bdquo;odškrtnout&ldquo;, postačuje
kdekoli na řádku použít příkaz <strong>,cc</strong>. Jeho zápis je samozřejmě
rychlejší než doskok na značku (mezera nebo &bdquo;X&ldquo;) a příkaz
<strong>rX</strong> nebo <strong>r(mezera)</strong>. Druhý zápis příkazu
<strong>,cc</strong> zatržení opět zruší:</p>

<pre>
*** Checkboxy
    - [X] první
    - [X] druhý
    - [ ] třetí
</pre>

<p>Přidání dalšího prvku se provádí naprosto stejně, jako u dalších typů
seznamů &ndash; stiskem klávesy <strong>Enter</strong> v&nbsp;normálním
režimu.</p>

<p><div class="rs-tip-major">Poznámka: prozatím není implementována funkce,
která by na základě zaškrtnutých polí spočítala, kolik procent úkolu je již
hotovo.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Značky &bdquo;Udělat&ldquo; a &bdquo;Hotovo&ldquo;</h2>

<p>K&nbsp;jakémukoli řádku je možné přiřadit značky &bdquo;TODO&ldquo; a
&bdquo;DONE&ldquo;. Pro (cyklické) přepínání mezi třemi stavy
výchozí&rarr;TODO&rarr;DONE slouží klávesové zkratky
<strong>Shift+doprava</strong> a <strong>Shift+doleva</strong>, které lze
použít kdekoli na řádku. Tyto příkazy se budou vztahovat k&nbsp;nejbližšímu
prvku stromu (netýkají se například seznamů, ale jen nadpisů).</p>

<a href="https://www.root.cz/obrazek/340482/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-20-prev.png" class="image-340482" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 21: Několik značek TODO a DONE.</i></p>

<p>Všechny značky TODO je možné si nechat zobrazit ve zvláštním okně. Aby tato
funkce pracovala korektně, je nejdříve nutné pluginu oznámit, které soubory
obsahují tzv.&nbsp;agendu. To se provede nastavením globální proměnné
<strong>g:org_agenda_files</strong>, které předáme seznam souborů:</p>

<pre>
:let g:org_agenda_files=["remarks.org"]
</pre>

<p>Jakmile je seznam souborů nastaven, lze použít příkaz <strong>,cat</strong>
pro zobrazení všech TODO.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Definice značek pro specifické procesy</h2>

<p>Pokud vám nevyhovuje, že značky obsahují pouze tři stavy (výchozí, TODO,
DONE), můžete si nadefinovat stavy vlastní. Je to poměrně jednoduché, protože
seznamy stavů jsou uloženy v&nbsp;globální proměnné pojmenované
<strong>org_todo_keywords</strong>. V&nbsp;případě, že budeme chtít použít šest
stavů namísto původních tří, lze tuto proměnnou změnit:</p>

<pre>
:let g:org_todo_keywords=['Nedodělek', 'Naplánováno', 'Udělat', 'WIP', 'Hotovo', 'Odevzdáno']
</pre>

<p>Přepínání mezi těmito stavy probíhá stejně: <strong>Shift+doprava</strong> a
<strong>Shift+doleva</strong>:</p>

<a href="https://www.root.cz/obrazek/340483/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-21-prev.png" class="image-340483" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 22: Několik nových značek.</i></p>

<p>Dokonce je možné použít několik seznamů stavů, které umožňují zpracovávat
různé typy položek (například si označovat stav chyb jiným způsobem, než
klasický TODO list):</p>

<pre>
:let g:org_todo_keywords = [['TODO(t)', '|', 'DONE(d)'],
      \ ['REPORT(r)', 'BUG(b)', 'KNOWNCAUSE(k)', '|', 'FIXED(f)'],
      \ ['CANCELED(c)']]
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Vlastní štítky</h2>

<p>Členění celého dokumentu do stromové struktury je sice velmi užitečné, ovšem
v&nbsp;některých případech nemusí být dostatečné. Ve chvíli, kdy je zapotřebí
si poznačit, k&nbsp;jakému tématu se nějaký prvek dokumentu (například
podnadpis) vztahuje, je možné takový prvek opatřit štítkem či dokonce několika
štítky (<i>tags</i>). Štítky začínají a končí dvojtečkou a pokud se štítků
nachází na řádku více, jsou mezi nimi taktéž uvedeny dvojtečky. Pro jednoduchý
zápis štítku existuje příkaz <strong>,st</strong> (<i>set tag</i>), po jehož
zadání se plugin <strong>vim-orgmode</strong> zeptá na jméno štítku.</p>

<a href="https://www.root.cz/obrazek/340484/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-22-prev.png" class="image-340484" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 23: Způsob zobrazení štítků v&nbsp;dokumentu.</i></p>

<p>Štítky, resp.&nbsp;přesněji řečeno nadpisy opatřené štítky, lze vyhledat
příkazem <strong>,ft</strong> (<i>find tag</i>).</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Základní operace pro práci s&nbsp;daty a časovými značkami</h2>

<p>Plugin <strong>vim-orgmode</strong> podporuje i základní práci
s&nbsp;časovými značkami (<i>timestamp</i>). Ty by měly mít standardní tvar
YYYY-MM-DD den-v-týdnu, popř&nbsp;YYYY-MM-DD den-v-týdnu čas.
V&nbsp;nejjednodušším případě je k&nbsp;nějaké poznámce pouze vložena časová
značka uložená mezi úhlové závorky &lt; a &gt;. Takovou časovou značku lze do
dokumentu přidat příkazem <strong>,sa</strong> (a &ndash; <i>active</i>).
Časová značka vložená mezi úhlové závorky je aktivní, ovšem pracovat lze i
s&nbsp;neaktivními značkami, které jsou vloženy mezi hranaté závorky [ a ].
Takové časové značky je možné do dokumentu vložit příkazem <strong>,si</strong>
(i &ndash; <i>inactive</i>). Při přidávání časové značky do dokumentu můžete
nabídnuté (aktuální) datum modifikovat, například zápisem &bdquo;+4&ldquo;,
který znamená &bdquo;aktuální datum + 3 dny&ldquo;</p>

<a href="https://www.root.cz/obrazek/340485/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-23-prev.png" class="image-340485" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 24: Několik aktivních i neaktivních časových značek.</i></p>

<p>Pokud máte nainstalovaný výše zmíněný plugin
<strong>vim-speeddating</strong>, je možné na časové značky aplikovat příkazy
<strong>Ctrl+A</strong> a <strong>Ctrl+X</strong>. Bližší informace jsme si
řekli <a href="#k06">v&nbsp;šesté kapitole</a>.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Použití kalendáře</h2>

<p>Jak jsme se již dozvěděli v&nbsp;předchozích kapitolách, je možné
v&nbsp;pluginu <strong>vim-orgmode</strong> pracovat i s&nbsp;kalendářem
poskytovaným modulem <strong>calendar</strong>. Pokud si přejete vložit časovou
značku s&nbsp;využitím kalendáře, můžete použít příkazy <strong>,pa</strong>
(aktivní značka) nebo <strong>,pi</strong> (neaktivní značka).</p>

<a href="https://www.root.cz/obrazek/340486/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-24-prev.png" class="image-340486" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 25: Vložení nové časové značky s&nbsp;využitím kalendáře.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Další užitečné pluginy pro zjednodušení práce s&nbsp;<strong>vim-orgmode</strong></h2>

<p>Modul <strong>vim-orgmode</strong> dokáže spolupracovat s&nbsp;dalšími
pluginy. S&nbsp;dvojicí těchto pluginů jsme se již v&nbsp;tomto článku setkali.
Připomeňme si, že se jednalo o plugin <strong>vim-speeddating</strong> a taktéž
o modul <strong>calendar</strong>. Kromě toho lze využít i další pluginy,
především pak <strong>Universal Text Linking</strong> umožňující korektní práci
s&nbsp;odkazy (budou fungovat skoky na odkazy), dále plugin nazvaný
<strong>repeat</strong>, který zajišťuje opakování složitějších operací (těch,
které nelze zopakovat jednoduše pomocí tečky) a v&nbsp;neposlední řadě se jedná
o přídavný modul pojmenovaný <strong>tagbar</strong>. Tento modul umožňuje
zobrazení značek a odkazů v&nbsp;samostatně zobrazeném buffery, který lze mít
zobrazen například na pravé či levé straně editovaného dokumentu.</p>

<p><div class="rs-tip-major">Poznámka: posledně jmenovaný modul se bude hodit i
programátorům, protože zdrojové kódy je možné zpracovat nástroji
<strong>ctags</strong> a <strong>etags</strong> a vytvořit z&nbsp;nich seznam
značek.</div></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Prozatím neimplementované vlastnosti modulu <strong>vim-orgmode</strong></h2>

<p>Mnoho pokročilejších operací, které čtenáři možná znají z&nbsp;originálního
emacsovského <i>org-mode</i>, prozatím ve Vimu nenajdeme. Týká se to například
složitější práce s&nbsp;úkoly (TODO), organizace poznámek podle štítků
(<i>tags</i>), výpočet již hotové práce na základě obsahu zaškrtnutých políček,
export poznámek a diáře do dalších formátů souborů atd. U exportu se krátce
zastavíme, protože ten je alespoň částečně podporován, ovšem jen nepřímo
&ndash; pro export se totiž volají funkce z&nbsp;původního <i>org-mode</i>
z&nbsp;Emacsu! Pro správnou funkci je tedy zapotřebí mít nainstalované a
nakonfigurované oba editory. Prostor pro další vylepšení tedy stále existuje
(ostatně <strong>vim-orgmode</strong> je aktivním projektem), ovšem
v&nbsp;navazujícím článku se již namísto <strong>vim-orgmode</strong> budu
zabývat původním slavným <i>org-mode</i> pro Emacs.</p>

<a href="https://www.root.cz/obrazek/340487/"><img src="https://i.iinfo.cz/images/80/vim-orgmode-25-prev.png" class="image-340487" alt="&#160;" width="370" height="243" /></a>
<p><i>Obrázek 26: Toto chybové hlášení je zobrazeno při pokusu o export dat
v&nbsp;případě, že není nainstalován textový editor Emacs.</i></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Org-Mode home page<br />
<a href="https://orgmode.org/">https://orgmode.org/</a>
</li>

<li>The Org Manual<br />
<a href="https://orgmode.org/manual/index.html">https://orgmode.org/manual/index.html</a>
</li>

<li>Org mode beginning at the basics<br />
<a href="https://orgmode.org/worg/org-tutorials/org4beginners.html">https://orgmode.org/worg/org-tutorials/org4beginners.html</a>
</li>

<li>Org-mode na Gitu<br />
<a href="https://code.orgmode.org/bzg/org-mode">https://code.orgmode.org/bzg/org-mode</a>
</li>

<li>Emacs Org-mode: Organizing a Scientist’s Life and Work<br />
<a href="https://vimeo.com/33725204">https://vimeo.com/33725204</a>
</li>

<li>Outlining Your Notes with Org<br />
<a href="http://sachachua.com/blog/2008/01/outlining-your-notes-with-org/">http://sachachua.com/blog/2008/01/outlining-your-notes-with-org/</a>
</li>

<li>The Plain Text Project<br />
<a href="https://plaintextproject.online/">https://plaintextproject.online/</a>
</li>

<li>Org-mode (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Org-mode">https://en.wikipedia.org/wiki/Org-mode</a>
</li>

<li>vim-orgmode na GitHubu<br />
<a href="https://github.com/jceb/vim-orgmode">https://github.com/jceb/vim-orgmode</a>
</li>

<li>vim-speeddating na GitHubu<br />
<a href="https://github.com/tpope/vim-speeddating">https://github.com/tpope/vim-speeddating</a>
</li>

<li>calendar.vim na GitHubu<br />
<a href="https://github.com/mattn/calendar-vim">https://github.com/mattn/calendar-vim</a>
</li>

<li>Org Guide<br />
<a href="https://github.com/jceb/vim-orgmode/blob/master/doc/orgguide.txt">https://github.com/jceb/vim-orgmode/blob/master/doc/orgguide.txt</a>
</li>

<li>Org Mode: which plugin to use. VimOrganizer or Vim-Orgmode?<br />
<a href="https://www.reddit.com/r/vim/comments/4ms4z0/org_mode_which_plugin_to_use_vimorganizer_or/">https://www.reddit.com/r/vim/comments/4ms4z0/org_mode_which_plugin_to_use_vimorganizer_or/</a>
</li>

<li>Writing Vim Plugins<br />
<a href="http://stevelosh.com/blog/2011/09/writing-vim-plugins/">http://stevelosh.com/blog/2011/09/writing-vim-plugins/</a>
</li>

<li>how to understand this vim script?<br />
<a href="http://stackoverflow.com/questions/12625091/how-to-understand-this-vim-script">http://stackoverflow.com/questions/12625091/how-to-understand-this-vim-script</a>
</li>

<li>Novinky ve VIM 7: Skriptovací­ jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>DirDiff.vim : A plugin to diff and merge two directories recursively.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=102">http://www.vim.org/scripts/script.php?script_id=102</a>
</li>

<li>vim-dirdiff na GitHubu<br />
<a href="https://github.com/will133/vim-dirdiff">https://github.com/will133/vim-dirdiff</a>
</li>

<li>fakeclip : pseudo clipboard register for non-GUI version of Vim<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2098">http://www.vim.org/scripts/script.php?script_id=2098</a>
</li>

<li>vim-fakeclip na GitHubu<br />
<a href="https://github.com/kana/vim-fakeclip">https://github.com/kana/vim-fakeclip</a>
</li>

<li>vim-fakeclip: Dokumentace<br />
<a href="http://kana.github.io/config/vim/fakeclip.html">http://kana.github.io/config/vim/fakeclip.html</a>
</li>

<li>Vim Multiple Cursors na GitHubu<br />
<a href="https://github.com/terryma/vim-multiple-cursors">https://github.com/terryma/vim-multiple-cursors</a>
</li>

<li>SLIME (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/SLIME">http://en.wikipedia.org/wiki/SLIME</a>
</li>

<li>vim-slime na GitHubu<br />
<a href="https://github.com/jpalardy/vim-slime">https://github.com/jpalardy/vim-slime</a>
</li>

<li>vi Editor Commands<br />
<a href="http://www.cs.rit.edu/~cslab/vi.html#A1.4">http://www.cs.rit.edu/~cslab/vi.html#A1.4</a>
</li>

<li>vi Manual<br />
<a href="http://www.cs.fsu.edu/general/vimanual.html">http://www.cs.fsu.edu/general/vimanual.html</a>
</li>

<li>Mastering the Vi Editor<br />
<a href="http://www.susnet.uk/mastering-the-vi-editor">http://www.susnet.uk/mastering-the-vi-editor</a>
</li>

<li>Using undo branches<br />
<a href="http://vim.wikia.com/wiki/Using_undo_branches">http://vim.wikia.com/wiki/Using_undo_branches</a>
</li>

<li>Gundo<br />
<a href="http://sjl.bitbucket.org/gundo.vim/">http://sjl.bitbucket.org/gundo.vim/</a>
</li>

<li>Vim as a Python IDE, or Python IDE as Vim<br />
<a href="http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/">http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/</a>
</li>

<li>histwin na GitHubu<br />
<a href="https://github.com/chrisbra/histwin.vim">https://github.com/chrisbra/histwin.vim</a>
</li>

<li>histwin.vim : Browse the undo tree<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2932">http://www.vim.org/scripts/script.php?script_id=2932</a>
</li>

<li>undotree.vim : Display your undo history in a graph<br />
<a href="http://www.vim.org/scripts/script.php?script_id=4177">http://www.vim.org/scripts/script.php?script_id=4177</a>
</li>

<li>Surround<br />
<a href="http://www.bestofvim.com/plugin/surround/">http://www.bestofvim.com/plugin/surround/</a>
</li>

<li>SnipMate<br />
<a href="http://www.bestofvim.com/plugin/snipmate/">http://www.bestofvim.com/plugin/snipmate/</a>
</li>

<li>Getting a Clojure REPL in Vim With VimClojure, Nailgun, and Leiningen<br />
<a href="http://naleid.com/blog/2011/12/19/getting-a-clojure-repl-in-vim-with-vimclojure-nailgun-and-leiningen/">http://naleid.com/blog/2011/12/19/getting-a-clojure-repl-in-vim-with-vimclojure-nailgun-and-leiningen/</a>
</li>

<li>The NERD Commenter : A plugin that allows for easy commenting of code for many filetypes.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1218">http://www.vim.org/scripts/script.php?script_id=1218</a>
</li>

<li>NERD Commenter na GitHubu<br />
<a href="https://github.com/scrooloose/nerdcommenter">https://github.com/scrooloose/nerdcommenter</a>
</li>

<li>luarefvim : Lua reference manual<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1291">http://www.vim.org/scripts/script.php?script_id=1291</a>
</li>

<li>lua.vim : Lua file type plug-in for the Vim text editor<br />
<a href="http://www.vim.org/scripts/script.php?script_id=3625">http://www.vim.org/scripts/script.php?script_id=3625</a>
</li>

<li>vim-lua-ftplugin<br />
<a href="https://github.com/xolox/vim-lua-ftplugin">https://github.com/xolox/vim-lua-ftplugin</a>
</li>

<li>Vi Improved<br />
<a href="https://wiki.python.org/moin/Vim">https://wiki.python.org/moin/Vim</a>
</li>

<li>javacomplete : Omni Completion for JAVA<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1785">http://www.vim.org/scripts/script.php?script_id=1785</a>
</li>

<li>SearchComplete<br />
<a href="http://www.vim.org/scripts/script.php?script_id=474">http://www.vim.org/scripts/script.php?script_id=474</a>
</li>

<li>ShowMarks<br />
<a href="http://www.vim.org/scripts/script.php?script_id=152">http://www.vim.org/scripts/script.php?script_id=152</a>
</li>

<li>ctrlp.vim<br />
<a href="https://github.com/kien/ctrlp.vim">https://github.com/kien/ctrlp.vim</a>
</li>

<li>ctrlp.vim<br />
<a href="http://kien.github.io/ctrlp.vim/">http://kien.github.io/ctrlp.vim/</a>
</li>

<li>vim-signature<br />
<a href="https://github.com/kshenoy/vim-signature">https://github.com/kshenoy/vim-signature</a>
</li>

<li>Supertab<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1643">http://www.vim.org/scripts/script.php?script_id=1643</a>
</li>

<li>Supertab (GitHub)<br />
<a href="https://github.com/ervandew/supertab">https://github.com/ervandew/supertab</a>
</li>

<li>Vim Essential Plugin: NERD Tree<br />
<a href="http://code.tutsplus.com/tutorials/vim-essential-plugin-nerdtree--net-19692">http://code.tutsplus.com/tutorials/vim-essential-plugin-nerdtree--net-19692</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem <br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=1658">http://vim.sourceforge.net/scripts/script.php?script_id=1658</a>
</li>

<li>NERD Tree Guide<br />
<a href="http://usevim.com/2012/07/18/nerdtree/">http://usevim.com/2012/07/18/nerdtree/</a>
</li>

<li>vcscommand.vim : CVS/SVN/SVK/git/hg/bzr integration plugin<br />
<a href="http://www.vim.org/scripts/script.php?script_id=90">http://www.vim.org/scripts/script.php?script_id=90</a>
</li>

<li>vcscommand na GitHubu<br />
<a href="https://github.com/vim-scripts/vcscommand.vim">https://github.com/vim-scripts/vcscommand.vim</a>
</li>

<li>Popis skriptu Vim Pathogen<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2332">http://www.vim.org/scripts/script.php?script_id=2332</a>
</li>

<li>Poslední­verze skriptu Vim Pathogen<br />
<a href="https://tpo.pe/pathogen.vim">https://tpo.pe/pathogen.vim</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://vimawesome.com/">http://vimawesome.com/</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://www.vim.org/scripts/script_search_results.php?order_by=rating">http://www.vim.org/scripts/script_search_results.php?order_by=rating</a>
</li>

<li>Vim-airline na GitHubu<br />
<a href="https://github.com/bling/vim-airline">https://github.com/bling/vim-airline</a>
</li>

<li>Vim-airline na www.vim.org<br />
<a href="http://www.vim.org/scripts/download_script.php?src_id=22726">http://www.vim.org/scripts/download_script.php?src_id=22726</a>
</li>

<li>Vim-fugitive na GitHubu<br />
<a href="https://github.com/tpope/vim-fugitive">https://github.com/tpope/vim-fugitive</a>
</li>

<li>Vim-fugitive na www.vim.org<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2975">http://www.vim.org/scripts/script.php?script_id=2975</a>
</li>

<li>Textový editor Vim jako IDE (seriál)<br />
<a href="http://www.root.cz/clanky/textovy-editor-vim-jako-ide/">http://www.root.cz/clanky/textovy-editor-vim-jako-ide/</a>
</li>

<li>VIM as Python IDE<br />
<a href="http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/">http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/</a>
</li>

<li>Stack Overflow: VIM: Perl interface: passing a variable to Perl and reading a vim variable from Perl<br />
<a href="http://stackoverflow.com/questions/4999902/vim-perl-interface-passing-a-variable-to-perl-and-reading-a-vim-variable-from">http://stackoverflow.com/questions/4999902/vim-perl-interface-passing-a-variable-to-perl-and-reading-a-vim-variable-from</a>
</li>

<li>Stack Overflow: Getting started with vim scripting with Perl<br />
<a href="http://stackoverflow.com/questions/2208618/getting-started-with-vim-scripting-with-perl">http://stackoverflow.com/questions/2208618/getting-started-with-vim-scripting-with-perl</a>
</li>

<li>Python with a modular IDE (Vim)<br />
<a href="http://www.sontek.net/python-with-a-modular-ide-vim">http://www.sontek.net/python-with-a-modular-ide-vim</a>
</li>

<li>Vim as XML Editor<br />
<a href="http://www.pinkjuice.com/howto/vimxml/">http://www.pinkjuice.com/howto/vimxml/</a>
</li>

<li>xmledit: A filetype plugin to help edit XML, HTML, and SGML documents<br />
<a href="http://www.vim.org/scripts/script.php?script_id=301">http://www.vim.org/scripts/script.php?script_id=301</a>
</li>

<li>snipMate : TextMate-style snippets for Vim<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2540">http://www.vim.org/scripts/script.php?script_id=2540</a>
</li>

<li>msanders / snipmate.vim<br />
<a href="https://github.com/msanders/snipmate.vim">https://github.com/msanders/snipmate.vim</a>
</li>

<li>snipMate.vim Introductory Screencast<br />
<a href="http://vimeo.com/3535418">http://vimeo.com/3535418</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

