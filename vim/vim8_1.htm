<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textový editor Vim 8 (nejenom) ve Fedoře</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textový editor Vim 8 (nejenom) ve Fedoře</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Letos v&nbsp;říjnu byla vydána osmá verze oblíbeného textového editoru Vim. Jedná se o poměrně přelomovou událost, protože předchozí (sedmá) verze se aktivně používá již deset let, i když v&nbsp;tomto dlouhém období samozřejmě vývoj úplně nestagnoval. V&nbsp;dnešním článku si nejprve řekneme, jakým způsobem je možné Vim 8 přeložit (nejenom) na Fedoře, a posléze se seznámíme s&nbsp;těmi změnami a vylepšeními, které jsou ihned viditelné a použitelné i běžnými uživateli. Navazující článek bude věnován rozšířením a vylepšením užitečným zejména pro autory pluginů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Od editoru Stevie k&nbsp;Vimu 8</a></p>
<p><a href="#k02">2. Příprava Vimu 8 pro Fedoru 25 či pro starší systémy</a></p>
<p><a href="#k03">3. Instalace balíčků potřebných pro překlad a slinkování</a></p>
<p><a href="#k04">4. Překlad Vimu</a></p>
<p><a href="#k05">5. Instalace přeloženého Vimu</a></p>
<p><a href="#k06">6. Nové vlastnosti Vimu viditelné všem uživatelům</a></p>
<p><a href="#k07">7. Stávající způsoby zobrazení dlouhých řádků v&nbsp;okně editoru</a></p>
<p><a href="#k08">8. Volba <strong>breakindent</strong></a></p>
<p><a href="#k09">9. Ukázka použití volby <strong>breakindent</strong></a></p>
<p><a href="#k10">10. Standardní správce balíčků</a></p>
<p><a href="#k11">11. Adresářová struktura s&nbsp;balíčky</a></p>
<p><a href="#k12">12. Zpracování souborů <strong>.viminfo</strong></a></p>
<p><a href="#k13">13. Blbinka na konec &ndash; příkaz <strong>:smile</strong> pro zvýšení (?) produktivity</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Od editoru Stevie k&nbsp;Vimu 8</h2>

<p>Většina administrátorů, programátorů ale i běžných uživatelů pracujících s&nbsp;Linuxem (a samozřejmě nejenom s&nbsp;Linuxem) se již pravděpodobně setkala s&nbsp;textovým editorem <i>Vim</i>. Ovšem možná již méně známým faktem je, že tento editor původně vznikl na legendárních osobních mikropočítačích <i>Amiga</i>. Historie Vimu se začala psát současně se vznikem aplikace nazvané <i>Vim 1.0</i>. Tento program vytvořil již v&nbsp;roce 1988 <i>Bram Moolenaar</i>. V&nbsp;podstatě se jednalo o prostou a k&nbsp;tomu ještě původně neúplnou imitaci původního textového editoru <i>vi</i> (<i>visual</i>). I prvotní nezkrácený název programu &ndash; Vi IMitation &ndash; napovídá, že šlo v&nbsp;prvé řadě o převod původního <i>vi</i> na Amigu. Bram sice začal svůj program stavět na cizích zdrojových kódech (jiného klonu editoru <i>vi</i>, konkrétně na programu <i>Stevie</i>, který původně vzniklo pro konkurenční Atari ST), později však došlo několikrát k&nbsp;přepsání celého editoru, takže z&nbsp;původních zdrojových kódů není nakonec použit ani bajt. Ostatně jenom díky tomu mohla být pro Vim v&nbsp;dalších letech vytvořena nová licence kompatibilní s&nbsp;GPL.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/01.png"><img class="alignnone size-thumbnail wp-image-7953" src="https://mojefedora.cz/wp-content/uploads/2016/11/01-318x254.png" alt="01" width="318" height="254" /></a>
<p><i>Obrázek 1: Příkazem <strong>:help credits</strong> je možné již od prvních rozšířených verzí textového editoru <strong>Vim</strong> zobrazit odkaz na editor <strong>Stevie</strong> a jeho autory.</i></p>

<p>První veřejně rozšířená verze textového editoru <i>Vim</i> nesla číslo 1.14. Stále se ještě jednalo o program vytvořený pouze pro Amigu, psal se totiž rok 1991 a tyto počítače před sebou měly ještě několik let úspěšného komerčního života. Tato verze již přinesla několik novinek a vylepšení oproti původnímu <i>vi</i>, zejména jiný způsob práce s&nbsp;operací <strong>undo</strong>.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/02.png"><img class="alignnone size-thumbnail wp-image-7954" src="https://mojefedora.cz/wp-content/uploads/2016/11/02-318x254.png" alt="02" width="318" height="254" /></a>
<p><i>Obrázek 2: Adresář s&nbsp;Vimem verze 3.0 pro Amigu zobrazený v&nbsp;souborovém manažeru Directory Opus.</i></p>

<p>Verze Vim 1.22 přinesla jednu zásadní změnu. Tato verze totiž byla s&nbsp;úspěchem portována na unixové systémy, čímž se kruh, jež začal u původního editoru <i>vi</i>, uzavřel. Původní editor <i>vi</i> tak získal na své vlastní platformě poměrně zdatného konkurenta (<i>Emacs</i> byl v&nbsp;té době editor zcela jiné kategorie) s&nbsp;mnoha výtečnými funkcemi, například vícestupňovou operací <strong>undo</strong> a možností pohybu kurzorem v&nbsp;režimu vkládání). Vzhledem k&nbsp;tomu, že se Vim v&nbsp;mnoha ohledech vylepšil, došlo také k&nbsp;jeho přejmenování: z&nbsp;původního &bdquo;Vi IMitation&ldquo; se po zásluze stává &bdquo;Vi IMproved&ldquo;.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/03.png"><img class="alignnone size-thumbnail wp-image-7955" src="https://mojefedora.cz/wp-content/uploads/2016/11/03-318x254.png" alt="03" width="318" height="254" /></a>
<p><i>Obrázek 3: První Vim, který autor tohoto článku aktivně používal, nesl číslo verze 3.0.</i></p>

<p>Vim 3, jenž byl vydán v&nbsp;roce 1994, nabídl vůči předchozím verzím řadu vylepšení. Mezi ně patří zejména podpora pro více oken (prozatím rozdělených horizontálně, vertikální dělení se objevuje až v&nbsp;šesté verzi), integrovaný systém nápovědy a také větší úroveň kompatibility s&nbsp;původním <i>vi</i>, což se projevilo zejména při práci s&nbsp;původními makry. Úroveň kompatibility lze řídit příkazem <strong>:set cpoptions</strong>, takže rychlá práce s&nbsp;editorem je možná jak pro vi-veterány, tak i pro nové uživatele, kteří mohou snadno využít všechny nové vlastnosti tohoto editoru. Již v&nbsp;této chvíli začal být Vim používán v&nbsp;mnoha linuxových distribucích, kde postupně nahrazoval další klony editoru vi, například Elvise či Nvi.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/04.png"><img class="alignnone size-thumbnail wp-image-7956" src="https://mojefedora.cz/wp-content/uploads/2016/11/04-318x254.png" alt="04" width="318" height="254" /></a>
<p><i>Obrázek 4: Seznam parametrů Vimu verze 3.0 je již poměrně dlouhý, zejména v&nbsp;porovnání s&nbsp;vi.</i></p>

<p>V&nbsp;dalších verzích editoru <i>Vim</i> se začaly objevovat nové vlastnosti, například horizontální i vertikální členění oken, podpora záložek, skriptovací jazyk Vim Script, rozhraní pro další skriptovací jazyky, režim <i>diff</i> atd. Verze 5 byla přelomová především pro programátory, protože jim nabídla možnost zvýraznění syntaxe. Navíc nebyla definice syntaxe pro různé typy souborů &bdquo;zadrátována&ldquo; přímo do editoru, ale bylo ji možné měnit s&nbsp;využitím skriptů (dnes je to zcela běžné, ale v&nbsp;době Vimu 5 byla tato vlastnost velmi vítaná). Současně se šestou verzí byla do Vimu přidána možnost rozdělení okna vertikálně. S&nbsp;tím souvisí i režim zobrazení dvou souborů v&nbsp;režimu porovnávání (<i>diff mode</i>). Mezi další viditelné a velmi důležité novinky přidané do této verze patří podpora pro UTF-8, která současně zavedla i podporu pro UCS-2, UCS-4 a UTF-16. Vim 6 bylo možné alternativně spustit v&nbsp;módu &bdquo;Easy Vim&ldquo; (Evim), který se od běžného chování Vimu odlišuje v&nbsp;tom, že se editor implicitně nachází ve vkládacím režimu. Easy Vim byl (teoreticky) měl ulehčit přechod nových uživatelů z&nbsp;jiného textového editoru na Vim.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/05.png"><img class="alignnone size-thumbnail wp-image-7957" src="https://mojefedora.cz/wp-content/uploads/2016/11/05-318x254.png" alt="05" width="318" height="254" /></a>
<p><i>Obrázek 5: Druhá obrazovka se seznamem parametrů dostupných ve Vimu 3.0.</i></p>

<p>Sedmá verze Vimu vyšla již v&nbsp;roce 2006 a přinesla uživatelům další užitečné změny, například podporu pro kontrolu překlepů v&nbsp;editovaných souborech s&nbsp;možností zápisu nových slov do uživatelských slovníků. Přidána byla i podpora pro záložky (<i>tab(s)</i>) a rozšířily se možnosti skriptovacího jazyka Vimu, což je vlastnost, kterou ocenili především autoři pluginů. Současně Vim 7 podporoval možnost spouštění pluginů naprogramovaných v&nbsp;jiném skriptovacím jazyce, například v&nbsp;Pythonu, Perlu či Lue. Nicméně po vydání Vimu 7 se vývoj pozastavil a začaly se objevovat některé problematické rysy původní koncepce pluginů (především fakt, že pokud je plugin spuštěn, nemůže uživatel provádět asynchronní změny v&nbsp;dokumentu, ale musí počkat na dokončení práce pluginu). Z&nbsp;tohoto důvodu vznikl fork Vimu nazvaný <i>Neovim</i>, v&nbsp;němž začali vývojáři implementovat některé nové vlastnosti, především asynchronní spouštění skriptů. A právě zpětná akceptace některých změn v&nbsp;hlavní větvi Vimu částečně stojí za vznikem jeho osmé verze.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Příprava Vimu 8 pro Fedoru 25 či pro starší systémy</h2>

<p>Textový editor Vim verze 8 můžete najít v&nbsp;repositářích Fedory 26 (<a href="http://rpmfind.net/linux/RPM/fedora/devel/rawhide/x86_64/v/vim-enhanced-8.0.094-1.fc26.x86_64.html">http://rpmfind.net/linux/RPM/fedora/devel/rawhide/x86_64/v/vim-enhanced-8.0.094-1.fc26.x86_64.html</a>, ovšem samozřejmě je možné provést překlad poslední verze a lokální instalaci tohoto editoru i pro starší Fedory. Budeme k&nbsp;tomu potřebovat překladač céčka, několik podpůrných utilit (make, linker, wget, unzip) a instalaci vývojových verzí knihovny <i>ncurses</i> (popř.&nbsp;dalších knihoven, pokud vyžadujete překlad Gvimu). Postup si popíšeme v&nbsp;navazujících kapitolách (vyzkoušen byl na Fedoře 25 a na Mintu).</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_01.png"><img class="alignnone size-thumbnail wp-image-7941" src="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_01-404x254.png" alt="vim8_01" width="404" height="254" /></a>
<p><i>Obrázek 6: Uživatelské prostředí Vimu 8 po jeho spuštění se vlastně nijak zásadně neliší od předchozí verze. Většina důležitých změn se skrývá uvnitř.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace balíčků potřebných pro překlad a slinkování</h2>

<p>Příprava před překladem je jednoduchá &ndash; nainstalujeme vývojovou verzi knihovny <i>ncurses</i> a popř.&nbsp;i dalších závislých balíčků.</p>

<p>Ve Fedoře:</p>

<pre>
sudo yum install ncurses-devel
</pre>

<p>či aktuálněji:</p>

<pre>
sudo dnf install ncurses-devel
</pre>

<p>V&nbsp;Mintu si dejte pozor na to, že se balíček jmenuje odlišně:</p>

<pre>
sudo apt-get install libncurses-dev
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Překlad Vimu</h2>

<p>Ve druhém kroku získáme archiv se zdrojovými kódy a rozbalíme ho do pracovního adresáře. Postup je shodný na všech systémech:</p>

<pre>
wget https://github.com/vim/vim/archive/master.zip	
unzip master.zip
</pre>

<p>Výsledkem je poměrně velký adresář s&nbsp;cca 75 MB zdrojových kódů a pomocných datových souborů.</p>

<p>V&nbsp;kroku následujícím se provede příprava Makefile následovaná vlastním překladem:</p>

<pre>
cd vim-master
cd src/
./configure
make
</pre>

<p>Pokud překlad proběhne v&nbsp;pořádku, měl by být v&nbsp;aktuálním adresáři připraven spustitelný binární soubor <strong>vim</strong>:</p>

<pre>
file vim
vim: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=a4a8c0450e172314d87769e0b0ed072e164c7f82, not stripped

ls -la vim
-rwxr-xr-x 1 tester tester 8904520 lis 26 22:04 vim
</pre>

<p>Můžeme si zkusit nově přeložený Vim spustit:</p>

<pre>
./vim
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Instalace přeloženého Vimu</h2>

<p>Instalace nově přeloženého Vimu se provede následujícím způsobem:</p>

<pre>
sudo make install
</pre>

<p>Instalace spustitelného binárního souboru se implicitně provede do adresáře <strong>/usr/local/bin</strong>, takže se přesvědčte, že tento adresář je zmíněn v&nbsp;proměnné $PATH:</p>

<pre>
echo $PATH
/home/tester/.npm/bin:/usr/local/sbin:<strong>/usr/local/bin</strong>:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/tester/bin
</pre>

<p>Pozor: pokud se po zadání příkazu <strong>vim</strong> spustí původní verze Vimu (7.x), znamená to, že cesta <strong>/usr/bin</strong> má přednost před <strong>/usr/local/bin</strong>. Pokud vám toto nastavení vyhovuje, lze Vim 8 spouštět i přímo:</p>

<pre>
/usr/local/bin/vim
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_02.png"><img class="alignnone size-thumbnail wp-image-7942" src="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_02-404x254.png" alt="vim8_02" width="404" height="254" /></a>
<p><i>Obrázek 7: Výpis informací o právě přeloženém a spuštěném Vimu 8. Povšimněte si data překladu zobrazeného v&nbsp;pravé horní části obrazovky.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Nové vlastnosti Vimu viditelné všem uživatelům</h2>

<p>V&nbsp;následujících kapitolách si popíšeme ty nové vlastnosti Vimu, které jsou viditelné všem uživatelům. V&nbsp;navazujícím článku se pak zaměříme na vlastnosti dostupné spíše programátorům vytvářejícím pluginy (z&nbsp;nich samozřejmě mohou profitovat všichni uživatelé, ale jen nepřímo).</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_03.png"><img class="alignnone size-thumbnail wp-image-7943" src="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_03-404x254.png" alt="vim8_03" width="404" height="254" /></a>
<p><i>Obrázek 8: Informace o nových vlastnostech Vimu jsou dostupné v&nbsp;nápovědě, stačí napsat příkaz <strong>:help version8</strong>.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Stávající způsoby zobrazení dlouhých řádků v&nbsp;okně editoru</h2>

<p>První užitečnou vlastností, kterou mohou využít prakticky všichni uživatelé textového editoru Vim, zejména pak autoři pracující s&nbsp;textovými dokumenty s&nbsp;dlouhými odstavci, je možnost úpravy zobrazení delších textových řádků začínajících bílými znaky. Připomeňme si, že ty textové řádky, které přesahují šířku aktivního okna editoru, mohou být v&nbsp;závislosti na nastavení editoru zobrazeny dvěma způsoby:</p>

<ol>

<li>Textový řádek může být zobrazen na jediném řádku na obrazovce, což znamená, že v&nbsp;jeden okamžik bude viditelná pouze část tohoto řádku, v&nbsp;závislosti na aktuální pozici textového kurzoru. Tuto možnost, kterou používají spíše programátoři při úpravách zdrojových kódů, zapneme volbou <strong>:set nowrap</strong>.</li>

<li>Alternativně může být textový řádek vizuálně zalomen, takže na obrazovce bude zobrazen jako větší množství &bdquo;vizuálních&ldquo; řádků. Při úpravách textu se text rozdělený do vizuálních řádků automaticky přeskládává, ovšem do editovaného textového souboru se ukládají jen skutečně vložené konce řádků. Tento způsob zobrazení se zapne volbou <strong>:set wrap</strong> a kdykoli je ho samozřejmě možné vypnout volbou <strong>:set nowrap</strong> &ndash; na obsah výsledného souboru nemá způsob zobrazení žádný vliv.</li>

</ol>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/06.png"><img class="alignnone size-thumbnail wp-image-7958" src="https://mojefedora.cz/wp-content/uploads/2016/11/06-404x254.png" alt="06" width="404" height="254" /></a>
<p><i>Obrázek 9: Text zobrazený bez vizuálního zalamování řádků.</i></p>

<p>Druhý způsob zobrazení textů je v&nbsp;případě potřeby ještě možné upravit volbou <strong>:set showbreak=text</strong>, která určuje, že na začátku každého &bdquo;vizuálního&ldquo; řádku bude zobrazen a patřičně obarven určený text, jenž uživateli pomůže v&nbsp;orientaci v&nbsp;dlouhých odstavcích. Může se například jednat o znak &gt; či o dvojici znaků &gt;\ (za zpětným lomítkem je mezera). Mimochodem: prefixy vizuálních řádků jsou obarveny podobně jako všechny další oblasti v&nbsp;textových oknech, které neobsahují editovaný text (typickým příkladem jsou znaky s&nbsp;tildami zobrazené za koncem souboru). Pro obarvení těchto oblastí lze použít volbu <strong>:hi NonText text=style cterm=styl ctermfg=barva ctermbg=barva</strong> atd.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/07.png"><img class="alignnone size-thumbnail wp-image-7959" src="https://mojefedora.cz/wp-content/uploads/2016/11/07-404x254.png" alt="07" width="404" height="254" /></a>
<p><i>Obrázek 10: Text zobrazený se zapnutým vizuálním zalamováním na okraji okna (bez ohledu na konce slov).</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Volba <strong>breakindent</strong></h2>

<p>Další úprava druhého způsobu spočívá v&nbsp;použití volby <strong>:set linebreak</strong>. Použití této volby zajistí zalomení &bdquo;vizuálního&ldquo; řádků nikoli přesně v&nbsp;místě konce okna editoru, ale na konci slov, což je v&nbsp;mnoha případech mnohem užitečnější (slova nejsou násilně rozdělována atd.). Dvojice voleb <strong>:set wrap</strong> a <strong>:set linebreak</strong> tedy zajistí práci s&nbsp;textovým souborem, která se do značné míry podobá způsobu práce s&nbsp;běžnými textovými procesory (ostatně přesně tyto dvě volby byly použity pro přípravu tohoto článku).</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/08.png"><img class="alignnone size-thumbnail wp-image-7960" src="https://mojefedora.cz/wp-content/uploads/2016/11/08-404x254.png" alt="08" width="404" height="254" /></a>
<p><i>Obrázek 11: Text zobrazený se zapnutým vizuálním zalamováním na koncích slov.</i></p>

<p>Způsob vizuálního (nikoli fyzického) zalamování dlouhých textových řádků, který se zapíná výše uvedenými volbami <strong>:set wrap</strong> a <strong>:set linebreak</strong>, je sice velmi užitečný, ale v&nbsp;některých případech není zobrazení zcela ideální. Příkladem nepříliš dobrého způsobu zobrazení jsou především ty textové řádky, které začínají bílými znaky (mezerami atd.). Tyto textové řádky jsou na obrazovce zalomeny takovým způsobem, že vizuální řádky (samozřejmě kromě řádku prvního) začínají vždy na prvním sloupci, což je poněkud nepřehledné (příkladem mohou být soubory uložené ve formátech AsciiDoc či Markdown, v&nbsp;nichž se odsazením řádků určuje způsob formátování výsledných dokumentů).</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/09.png"><img class="alignnone size-thumbnail wp-image-7961" src="https://mojefedora.cz/wp-content/uploads/2016/11/09-404x254.png" alt="09" width="404" height="254" /></a>....
<p><i>Obrázek 12: Text zobrazený se zapnutým vizuálním zalamováním na koncích slov a zvýrazněním zalomených řádků.</i></p>

<p>Naštěstí se v&nbsp;osmé verzi Vimu objevila nová volba nazvaná příhodně <strong>breakindent</strong>, která tuto nedokonalost napravuje. V&nbsp;případě, že je tato volba zapnuta příkazem <strong>:set breakindent</strong>, jsou ty obrazové řádky, jenž vznikly vizuálním rozdělením dlouhého textového řádku, zarovnány pod sebe. Tuto volbu lze v&nbsp;případě potřeby zkombinovat s&nbsp;ostatními dvěma výše uvedenými volbami, tedy <strong>linebreak</strong> a <strong>showbreak</strong>. Příklad použití této volby je ukázán v&nbsp;navazující kapitole.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_04.png"><img class="alignnone size-thumbnail wp-image-7944" src="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_04-404x254.png" alt="vim8_04" width="404" height="254" /></a>
<p><i>Obrázek 13: Nápověda k&nbsp;nové konfigurační volbě <strong>breakindent</strong>.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Ukázka použití volby <strong>breakindent</strong></h2>

<p>Podívejme se na použití volby <strong>breakindent</strong> při editaci známého textu &bdquo;Lorem Ipsum&ldquo;. Jednotlivé možnosti zobrazení můžeme vidět na následujících screenshotech:</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_05.png"><img class="alignnone size-thumbnail wp-image-7945" src="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_05-404x254.png" alt="vim8_05" width="404" height="254" /></a>
<p><i>Obrázek 14: Text zobrazený po nastavení volby <strong>:set wrap</strong>.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_06.png"><img class="alignnone size-thumbnail wp-image-7946" src="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_06-404x254.png" alt="vim8_06" width="404" height="254" /></a>
<p><i>Obrázek 15: Vložení několika mezer na začátek editovaného řádku.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_07.png"><img class="alignnone size-thumbnail wp-image-7947" src="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_07-404x254.png" alt="vim8_07" width="404" height="254" /></a>
<p><i>Obrázek 16: Způsob zobrazení řádku po zapnutí volby <strong>:set breakindent</strong>.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Standardní správce balíčků</h2>

<p>Pro textový editor Vim vzniklo nepřeberné množství různých pluginů. Některé pluginy jsou jednoduché; může se například jednat o rozšíření nápovědy (plugin <strong>luaref</strong>) či o přidání několika nových klávesových zkratek. Další pluginy jsou však složitější a existují i poměrně rozsáhlé pluginy, o nichž jsem se zmínil v&nbsp;následujících článcích (na konkurenčním Rootu :-):</p>

<ol>
<li><a href="https://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim/">Užitečné skripty a pluginy pro textový editor Vim</a></li>
<li><a href="https://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-2-cast/">Užitečné skripty a pluginy pro textový editor Vim (2.část) </a></li>
<li><a href="https://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-3-cast/">Užitečné skripty a pluginy pro textový editor Vim (3.část) </a></li>
<li><a href="https://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-4-cast/">Užitečné skripty a pluginy pro textový editor Vim (4.část) </a></li>
<li><a href="https://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-5-cast/?ic=serial-box&icc=text-title"> Užitečné skripty a pluginy pro textový editor Vim (5.část)</a></li>
<li><a href="https://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-propojeni-vimu-s-debuggery/">Užitečné skripty a pluginy pro textový editor Vim: propojení Vimu s debuggery</a></li>
</ol>

<p>Při instalaci většího množství pluginů však stojíme před závažným problémem &ndash; jak tyto pluginy instalovat či odinstalovat bez rozbití konfigurace ostatních pluginů. Problém spočívá v&nbsp;tom, že v&nbsp;předchozích verzích Vimu byly cesty nastavené takovým způsobem, že se pluginy musely buď rozbalovat do společných adresářů (všechny nápovědy v&nbsp;jednom adresáři, syntaktické soubory v&nbsp;dalším adresáři, skripty v&nbsp;adresáři třetím atd.) popř.&nbsp;bylo nutné použít některý správce pluginů &ndash; typicky Vundle či Pathogen. Ovšem situace, kdy se pro správu pluginů musel používat jiný plugin, byla ... suboptimální :-). Z&nbsp;tohoto důvodu je ve Vimu 8 možné použít interního správce a postupně tak odstranit nutnost použití Vundle či Pathogenu. To ale nějaký čas potrvá, protože se musí stávající balíčky s&nbsp;pluginy upravit. Nicméně již dnes můžeme několik nových balíčků kompatibilních s&nbsp;Vimem 8 nalézt, popř.&nbsp;lze zkombinovat standardního správce s&nbsp;Vundlem či Pathogenem.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_08.png"><img class="alignnone size-thumbnail wp-image-7948" src="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_08-404x254.png" alt="vim8_08" width="404" height="254" /></a>
<p><i>Obrázek 17: Informace o správci balíčků získáte po zadání příkazu <strong>:help packages</strong>.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Adresářová struktura s&nbsp;balíčky</h2>

<p>Při používání standardního správce balíčků z&nbsp;Vimu 8 je důležité, aby se pluginy po rozbalení umístily do správných adresářů, v&nbsp;nichž je bude Vim hledat. Nejjednodušší je instalace pluginů pouze pro aktivního uživatele, protože v&nbsp;tomto případě je celá adresářová struktura umístěna v&nbsp;adresáři <strong>~/.vim</strong>. Zde musí být vytvořen podadresář nazvaný <strong>pack</strong> a v&nbsp;něm další podadresář s&nbsp;libovolným jménem (já jsem v&nbsp;příkladu použil podadresář nazvaný <strong>balicky</strong>):</p>

<pre>
[~/.vim]$ <strong>tree</strong>
.
└── pack
    └── balicky
</pre>

<p>Další dělení je jednoduché &ndash; v&nbsp;dalším podadresáři nazvaném <strong>opt</strong> jsou umístěny ty pluginy, které se mají načítat až na základě žádosti uživatele (<i>optional</i>), zatímco v&nbsp;podadresáři <strong>start</strong> budou umístěny ty pluginy, které se načtou a inicializují automaticky. V&nbsp;případě, že je nainstalován jen jediný volitelně spustitelný plugin nazvaný &bdquo;makejob&ldquo; (viz odkazy na konci článku), bude celá adresářová struktura vypadat takto:</p>

<pre>
[~/.vim]$ <strong>tree</strong>
.
└── pack
    └── balicky
        └── opt
            └── makejob
                ├── doc
                │   └── makejob.txt
                ├── LICENSE
                ├── plugin
                │   └── makejob.vim
                └── README.md

6 directories, 4 files
</pre>

<p>Pokud je navíc nainstalován další plugin nazvaný <strong>pluginx</strong>, který se má spustit automaticky, rozšíří se adresářová struktura následujícím způsobem:</p>

<pre>
[~/.vim]$ <strong>tree</strong>
.
└── pack
    └── balicky
        ├── start
        │   └── pluginx
        │       ├── doc
        │       │   └── pluginx.txt
        │       ├── LICENSE
        │       ├── plugin
        │       │   └── pluginx.vim
        │       └── README.md
        └── opt
            └── makejob
                ├── doc
                │   └── makejob.txt
                ├── LICENSE
                ├── plugin
                │   └── makejob.vim
                └── README.md

10 directories, 8 files
</pre>

<p>Podobně v&nbsp;případě většího množství pluginů:</p>

<pre>
.
└── pack
    └── balicky
        ├── start
        │   ├── plugin1
        │   │   ├── doc
        │   │   │   └── plugin1.txt
        │   │   ├── LICENSE
        │   │   ├── plugin
        │   │   │   └── plugin1.vim
        │   │   └── README.md
        │   └── plugin2
        │       ├── doc
        │       │   └── plugin2.txt
        │       ├── LICENSE
        │       ├── plugin
        │       │   └── plugin2.vim
        │       └── README.md
        └── opt
            ├── makejob
            │   ├── doc
            │   │   └── makejob.txt
            │   ├── LICENSE
            │   ├── plugin
            │   │   └── makejob.vim
            │   └── README.md
            └── pluginZ
                ├── doc
                │   └── pluginZ.txt
                ├── LICENSE
                ├── plugin
                │   └── pluginZ.vim
                └── README.md
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zpracování souborů <strong>.viminfo</strong></h2>

<p>Jednou z&nbsp;užitečných vlastností textového editoru Vim je jeho schopnost ukládání důležitých stavových informací do souboru nazvaného implicitně <strong>.viminfo</strong>. Do tohoto souboru se ukládá například historie příkazů, historie vyhledávaných řetězců, obsah pracovních registrů, uživatelem definované značky (<i>marks</i>), poslední pozice kurzoru v&nbsp;otevřených souborech, globální proměnné atd. Práce s&nbsp;tímto souborem většinou probíhá zcela automaticky a je před uživatelem do značné míry skryta; samozřejmě za předpokladu, že nedojde k&nbsp;žádné výjimečné události (poškozený soubor, nečitelný soubor, chyba při zápisu atd.). Pro zajímavost si ukažme, jak vypadá část souboru <strong>.viminfo</strong> s&nbsp;uloženými značkami. Nejprve jsou v&nbsp;něm uloženy informace o globálních značkách, kde se kromě čísla řádku a čísla sloupce ukládá i jméno souboru:</p>

<pre>
# File marks:
'A  4  0  ~/reports/mail-daily-report.sh
'Z  91  4  ~/reports/daily_report.txt
'0  91  4  ~/reports/daily_report.txt
'1  4  0  ~/reports/mail-daily-report.sh
'2  163  7  ~/temp/_viminfo
'3  1  0  ~/disable_selinux.sh
'4  50  0  /var/log/messages
'5  1  0  /var/log/messages
'6  29  0  /var/www/html/openjdk/style.css
'7  11  19  /var/www/html/openjdk/jtreg/icedtea6/2011-07-12/jtreg-summary.log
'8  8  0  /var/www/html/openjdk/jtreg/icedtea6/2011-07-08
'9  3  9  ~/reports/Java2Dbenchmark/graph_.sh
</pre>

<p>Poté se mohou v&nbsp;souboru <strong>.viminfo</strong> vyskytovat informace o značkách definovaných pro dvacet posledně editovaných souborů. Pro každý soubor je uložen zvláštní seznam značek (to je logické, protože by jinak docházelo ke kolizi jmen):</p>

<pre>
# History of marks within files (newest to oldest):

&gt; ~/reports/daily_report.txt
        "       91      4
        .       64      0
        +       66      0
        +       67      0
        +       64      0


&gt; ~/reports/mail-daily-report.sh
        "       4       0

&gt; ~/temp/_viminfo
        "       163     7

&gt; ~/disable_selinux.sh
        "       1       0
...
...
...
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_09.png"><img class="alignnone size-thumbnail wp-image-7949" src="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_09-404x254.png" alt="vim8_09" width="404" height="254" /></a>
<p><i>Obrázek 18: Nápověda, v&nbsp;níž je popsána struktura souborů <strong>.viminfo</strong>.</i></p>

<p>Práce se souborem <strong>.viminfo</strong> začne být problematická ve chvíli, kdy je spuštěno více instancí Vimu. V&nbsp;tomto případě poslední Vim, který je uzavřen, zapíše své změny do tohoto souboru a přepíše tak všechny předchozí změny (tedy i historii příkazů, obsah registrů apod.). To může být poněkud nepříjemné a dokonce to může vést ke ztrátě dat, protože mnoho uživatelů například předpokládá, že jimi vytvořená makra &bdquo;přežijí&ldquo; ukončení Vimu a bude je možné použít kdykoli znovu. Aby bylo možné zajistit toto chování, je formát souboru <strong>.viminfo</strong> ve Vimu 8 změněn tak, že se u každého záznamu pamatuje i časová značka, takže se zabrání přepisu novějšího údaje údajem starším. Příkladem může být například obsah registru <strong>a</strong> &ndash; pokud se při ukončení Vimu zjistí, že je ve <strong>.viminfo</strong> novější údaj, nedojde k&nbsp;jeho přepsání.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_10.png"><img class="alignnone size-thumbnail wp-image-7950" src="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_10-404x254.png" alt="vim8_10" width="404" height="254" /></a>
<p><i>Obrázek 19: Takto nyní vypadá obsah souboru <strong>.viminfo</strong> vygenerovaný osmou verzí Vimu. Povšimněte si časových značek typu <strong>1480108745</strong>.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Blbinka na konec &ndash; příkaz <strong>:smile</strong> pro zvýšení (?) produktivity</h2>

<p>Posledním důležitým příkazem, který nalezneme v&nbsp;osmé verzi editoru Vim, je příkaz <strong>:smile</strong>. Po zadání tohoto příkazu se okno editoru změní následujícím způsobem, což je zajisté velmi užitečné (pokud vám ovšem za zády zrovna nestojí šéf, který by si mohl obrázek špatně vyložit):</p>

<a href="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_11.png"><img class="alignnone size-thumbnail wp-image-7951" src="https://mojefedora.cz/wp-content/uploads/2016/11/vim8_11-404x254.png" alt="vim8_11" width="404" height="254" /></a>
<p><i>Obrázek 20: Tato vlastnost je ten nejdůležitější důvod, proč si Vim 8 musíte nainstalovat.</i></p>

<p>Poznámka: zajímavé je, že do <i>Neovimu</i> nebyl, <a href="https://github.com/neovim/neovim/issues/5116">alespoň prozatím</a>, patch s&nbsp;touto důležitou novinkou přijat.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>Vim &ndash; the editor<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Vim 8.0 is released<br />
<a href="https://laravel-news.com/2016/09/vim-8-0-is-released/">https://laravel-news.com/2016/09/vim-8-0-is-released/</a>
</li>

<li>Vim: So long Pathogen, hello native package loading<br />
<a href="https://shapeshed.com/vim-packages/">https://shapeshed.com/vim-packages/</a>
</li>

<li>:smile command was not backported! #5116<br />
<a href="https://github.com/neovim/neovim/issues/5116">https://github.com/neovim/neovim/issues/5116</a>
</li>

<li>Makejob<br />
<a href="http://www.vim.org/scripts/script.php?script_id=5479">http://www.vim.org/scripts/script.php?script_id=5479</a>
</li>

<li>Články o Vimu na Root.cz:<br />
<a href="http://www.root.cz/n/vim/clanky/">http://www.root.cz/n/vim/clanky/</a>
</li>

<li>Vim sedm - první část<br />
<a href="http://www.root.cz/clanky/vim-sedm-prvni-cast/">http://www.root.cz/clanky/vim-sedm-prvni-cast/</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>History of the Text Editor<br />
<a href="http://vanstee.me/history-of-the-text-editor.html">http://vanstee.me/history-of-the-text-editor.html</a>
</li>

<li>Interview with Bill Joy<br />
<a href="http://web.cecs.pdx.edu/~kirkenda/joy84.html">http://web.cecs.pdx.edu/~kirkenda/joy84.html</a>
</li>

<li>vi Editor Commands<br />
<a href="http://www.cs.rit.edu/~cslab/vi.html#A1.4">http://www.cs.rit.edu/~cslab/vi.html#A1.4</a>
</li>

<li>vi Manual<br />
<a href="http://www.cs.fsu.edu/general/vimanual.html">http://www.cs.fsu.edu/general/vimanual.html</a>
</li>

<li>Mastering the Vi Editor<br />
<a href="http://www.susnet.uk/mastering-the-vi-editor">http://www.susnet.uk/mastering-the-vi-editor</a>
</li>

<li>Vim as a Python IDE, or Python IDE as Vim<br />
<a href="http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/">http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/</a>
</li>

<li>Vi Improved<br />
<a href="https://wiki.python.org/moin/Vim">https://wiki.python.org/moin/Vim</a>
</li>

<li>Popis skriptu Vim Pathogen<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2332">http://www.vim.org/scripts/script.php?script_id=2332</a>
</li>

<li>Poslední­verze skriptu Vim Pathogen<br />
<a href="https://tpo.pe/pathogen.vim">https://tpo.pe/pathogen.vim</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://vimawesome.com/">http://vimawesome.com/</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://www.vim.org/scripts/script_search_results.php?order_by=rating">http://www.vim.org/scripts/script_search_results.php?order_by=rating</a>
</li>

<li>Building Vim<br />
<a href="http://vim.wikia.com/wiki/Building_Vim">http://vim.wikia.com/wiki/Building_Vim</a>
</li>

<li>Vim plugins for developers<br />
<a href="http://www.linuxtoday.com/upload/vim-plugins-for-developers-140619094010.html">http://www.linuxtoday.com/upload/vim-plugins-for-developers-140619094010.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

