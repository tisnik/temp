<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textový editor Vim jako IDE (7.část - Vim Script)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textový editor Vim jako IDE (7.část - Vim Script)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;předchozí části seriálu o využití textového editoru Vim (nejenom) ve funkci vývojového prostředí jsme si řekli základní informace o interním programovacím (skriptovacím) jazyku Vim Script, který byl do Vimu přidán ve verzi 5.0 v&nbsp;roce 1998. Dnes budeme v&nbsp;popisu tohoto jazyka pokračovat, protože se budeme zabývat strukturovanými příkazy (včetně programových smyček) a zpracováním výjimek.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Základní řídicí příkazy &ndash; podmínky</a></p>
<p><a href="#k02">2. Programová smyčka typu <strong>while</strong></a></p>
<p><a href="#k03">3. Programová smyčka typu <strong>foreach</strong> při práci se seznamy (list)</a></p>
<p><a href="#k04">4. Seznamy seznamů &ndash; jeden ze způsobů reprezentace matic</a></p>
<p><a href="#k05">5. Programová smyčka typu <strong>foreach</strong> při práci se slovníky (dictionary)</a></p>
<p><a href="#k06">6. Jak lze ve Vim Scriptu elegantně vytvořit počítané programové smyčky?</a></p>
<p><a href="#k07">7. Zpracování výjimek</a></p>
<p><a href="#k08">8. Ukázka využití bloku try-catch-endcatch</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Základní řídicí příkazy &ndash; podmínky</h2>

<p>V&nbsp;šesté části seriálu o využití textového editoru <i>Vim</i> ve funkci
vývojového prostředí jsme si řekli základní informace o Vim Scriptu, tj.&nbsp;o
interním skriptovacím jazyce, v&nbsp;němž je možné psát jak jednoduché pomocné
funkce, tak i poměrně složité moduly typu <i>JavaBrowser</i> či <i>NERD
tree</i>. Víme již, že ve skriptech je možné používat číselné hodnoty či
řetězce a taktéž je možné využívat seznamy (<i>list</i>) a slovníky
(<i>dictionary</i>). Taktéž jsme si řekli, že před jména proměnných lze
zapisovat prefixy, pomocí nichž se rozlišují lokální proměnné, globální
proměnné, proměnné vztažené k&nbsp;editovanému bufferu atd. Pomocí dalších
prefixů lze přistupovat k&nbsp;takzvaným pseudoproměnným, například ke
konfiguračním parametrům či proměnným prostředí (shellu). Ovšem prozatím jsme
se neseznámili s&nbsp;tím, jakým způsobem je možné řídit běh programu,
tj.&nbsp;jak lze tvořit větvení a programové smyčky.</p>

<p>Pro větvení se využívá, tak jako v&nbsp;naprosté většině dalších
imperativních programovacích jazyků, příkaz <strong>if</strong>
s&nbsp;ukončujícím příkazem <strong>endif</strong>. Kromě toho lze použít i
nepovinnou větev <strong>else</strong>, popř.&nbsp;větev <strong>else</strong>
s&nbsp;podmínkou, pro niž se používá klíčové slovo <strong>elseif</strong>.
Syntaxe zápisu všech možností vypadá následovně:</p>

<pre>
if podmínka
    blok spuštěný při splnění podmínky
endif
</pre>

<pre>
if podmínka
    blok spuštěný při splnění podmínky
else
    blok spuštěný při nesplnění podmínky
endif
</pre>

<pre>
if podmínka
    blok spuštěný při splnění první podmínky
elseif podmínka
    blok spuštěný při splnění druhé podmínky
elseif podmínka
    blok spuštěný při splnění třetí podmínky
else
    blok spuštěný při nesplnění žádné podmínky
endif
</pre>

<a href="http://i.iinfo.cz/images/236/vim0701.png"><img src="http://i.iinfo.cz/images/236/vim0701-prev.png" width="370" height="251" alt=" " /></a>
<p><i>Obrázek 1: Příklad použití příkazů if v&nbsp;souboru .vimrc, který je
automaticky načítán při spouštění Vimu. V&nbsp;zobrazeném zdrojovém kódu je na
základě obsahu globální proměnné <strong>resolution</strong> provedeno
nastavení počtu zobrazených sloupců a řádků.</i></p>

<p>Ukažme si nyní základní využití příkazu <strong>if</strong>. Většina skriptů
nebo doplňkových modulů (<i>plugins</i>) nemusí pracovat korektně v&nbsp;tom
případě, když je nastaven režim kompatibility s&nbsp;původním textovým editorem
<i>vi</i>. Do tohoto režimu se <i>Vim</i> může dostat například tehdy, pokud je
spuštěn příkazem <i>vi</i> (zde ovšem záleží na konkrétní konfiguraci systému)
nebo tehdy, když je použita volba:</p>

<pre>
:set compatible
</pre>

<a href="http://i.iinfo.cz/images/594/vim0702.png"><img src="http://i.iinfo.cz/images/594/vim0702-prev.png" width="370" height="251" alt=" " /></a>
<p><i>Obrázek 2: Na začátku tohoto skriptu je proveden test, zda se textový
editor Vim nenachází v&nbsp;režimu kompatibility s&nbsp;původním textovým
editorem &bdquo;vi&ldquo;. V&nbsp;režimu kompatibility není možné provádět
velké množství užitečných operací.</i></p>

<p>V&nbsp;režimu kompatibility přestane pracovat velká část zajímavých a
užitečných funkcí <i>Vimu</i> (ostatně si to sami můžete vyzkoušet), proto
mnohé skripty a zásuvné moduly na začátku svého běhu testují, zda je režim
kompatibility nastaven a pokud tomu tak skutečně je, tak napíšou chybovou
zprávu a skončí běh skriptu pomocí řídicího příkazu <strong>finish</strong>. U
mnoha skriptů tedy můžeme na jejich začátku nalézt následující kód:</p>

<pre>
if &amp;compatible
    echo "Tento skript nebude pracovat v rezimu kompatibility"
    finish
endif
</pre>

<p>Připomeňme si, že prefixem &amp; začíná jméno pseudoproměnné obsahující
hodnotu stejně pojmenovaného konfiguračního parametru. Výše uvedený příklad
skutečně pracuje, ovšem korektnější je, aby skript vypisovat chybová hlášení
pouze v&nbsp;případě, kdy je nastaven konfigurační parametr
<strong>verbose</strong>. U &bdquo;slušných&ldquo; skriptů respektujících
uživatelské nastavení textového editoru <i>Vim</i> tedy můžeme nalézt dvojici
do sebe vnořených podmínek:</p>

<pre>
if &amp;compatible
    if &amp;verbose
        echo "Tento skript nebude pracovat v rezimu kompatibility"
    endif
    finish
endif
</pre>



<p><a name="k02"></a></p>
<h2>2. Programová smyčka typu <strong>while</strong></h2>

<p>Kromě větvení běhu programu na základě nějaké podmínky je mnohdy nutné
provádět určitou část kódu opakovaně. Může se například jednat o kód, který
prochází všemi editovanými buffery, popř.&nbsp;prochází položkami seznamu či
dvojicemi klíč-hodnota uloženými ve slovníku. Pro tyto účely jsou ve
<i>Vimu</i> k&nbsp;dispozici dva typy smyček. První smyčkou &ndash; tou zcela
základní, na níž lze postavit jakýkoli algoritmus &ndash; je smyčka typu
<strong>while</strong>, která začíná příkazem <strong>while</strong> společně
s&nbsp;podmínkou a blokem programového kódu a končí příkazem
<strong>endwhile</strong>. Podmínkou může být jakýkoli výraz, který se
vyhodnotí na pravdu či nepravdu. Pokud se výraz vyhodnotí na pravdu (nenulová
hodnota), je provedeno tělo smyčky, tj.&nbsp;jedna iterace a řízení se posléze
vrátí zpět na vyhodnocení podmínky. Pokud se naopak výraz vyhodnotí na
nepravdu, je řízení ihned přesunuto za tělo smyčky, což mj.&nbsp;znamená, že se
programová smyčka typu <strong>while</strong> ve skutečnosti nemusí provést ani
jednou:</p>

<pre>
while podmínka
    blok kódu
endwhile
</pre>

<a href="http://i.iinfo.cz/images/555/vim0703.png"><img src="http://i.iinfo.cz/images/555/vim0703-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 3: Použití programových smyček typu while v&nbsp;modulu
justify.vim, který je dodáván společně se samotným Vimem.</i></p>

<p>Ukažme si velmi jednoduchý ilustrační příklad, v&nbsp;němž je programová
smyčka typu <strong>while</strong> použita ve funkci počítané smyčky, kterou
Vim Script ve skutečnosti neobsahuje (i když ji lze částečně nahradit, jak si
řekneme v&nbsp;páté kapitole):</p>

<pre>
let i = 1
while i &lt;= 10
    echo "aktualni hodnota pocitadla: " . i
    let i = i + 1
endwhile
</pre>

<p>Pokud si tento příklad uložíte do samostatného souboru
<strong>while.vim</strong>, postačuje tento soubor otevřít ve <i>Vimu</i> a
v&nbsp;příkazovém režimu napsat následující příkaz:</p>

<pre>
:source %
</pre>

<p>popř.:</p>

<pre>
:so %
</pre>

<a href="http://i.iinfo.cz/images/57/vim0704.png"><img src="http://i.iinfo.cz/images/57/vim0704-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 4: Ukázka běhu demonstračního příkladu využívajícího programovou
smyčku typu while.</i></p>

<p>Ve druhém demonstračním příkladu je ukázána jednoduchá manipulace
s&nbsp;řetězcem &ndash; postupné odstraňování prvního znaku z&nbsp;řetězce
s&nbsp;využitím operace <i>substring</i>, kterou lze zapsat pomocí konstrukce
<strong>[ start : end ]</strong>:</p>

<pre>
let str = "http://www.root.cz"
while str != ""
    echo str
    let str = str[1 : strlen(str) - 1]
endwhile
</pre>

<p>Podobně jako v&nbsp;dalších programovacích jazycích, i ve <i>Vimu</i> je
možné ovlivnit smyčku <strong>while</strong> dvojicí příkazů
<strong>break</strong> a <strong>continue</strong>. První z&nbsp;těchto příkazů
ihned ukončí běh smyčky, přičemž běh programu bude pokračovat na prvním příkazu
uvedeným za smyčkou. Naproti tomu příkaz <strong>continue</strong> vrátí běh
programu na podmínku testovanou před prvním provedením těla smyčky. Příkaz
<strong>break</strong> je použit v&nbsp;následujícím příkladu pro ukončení
programové smyčky v&nbsp;případě, že testovaný řetězec začíná znaky "root". Již
v&nbsp;předchozí části tohoto seriálu jsme si řekli, že pomocí operátoru =~ je
možné zapsat test na to, zda obsah nějakého řetězce (popř.&nbsp;proměnné
obsahující řetězec) odpovídá zadanému regulárnímu výrazu:</p>

<pre>
let str = "http://www.root.cz"
while str != ""
    echo str
    if str =~ "^root.*"
        break
    endif
    let str = str[1 : strlen(str) - 1]
endwhile
</pre>



<p><a name="k03"></a></p>
<h2>3. Programová smyčka typu <strong>foreach</strong> při práci se seznamy (list)</h2>

<p>Již v&nbsp;předchozí části tohoto seriálu jsme si řekli, že ve Vim Scriptu
je od verze <i>Vim 7.0</i> podporován i datový typ seznam (<i>list</i>).
Připomeňme si, že seznam lze vytvořit pomocí takzvaného <i>konstruktoru</i>,
který může mít následující podobu:</p>

<pre>
:let seznam1=[1, 2, 3, 4]
</pre>

<p>Se seznamem je možné pracovat jako s&nbsp;celkem:</p>

<pre>
:echo seznam1
[1, 2, 3, 4]
</pre>

<p>popř.&nbsp;lze přistupovat k&nbsp;jednotlivým prvkům seznamu:</p>

<pre>
:let prvni=seznam1[0]
:echo prvni
</pre>

<pre>
:let seznam1[1]="pokus"
:echo seznam1
</pre>

<a href="http://i.iinfo.cz/images/123/vim0705.png"><img src="http://i.iinfo.cz/images/123/vim0705-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 5: Zdrojový kód demonstračního příkladu uvedeného
v&nbsp;předchozí kapitole.</i></p>

<p>Velmi často je nutné postupně procházet všemi prvky seznamu a provádět
s&nbsp;nimi nějakou operaci, například hodnoty prvků postupně předávat do
nějaké funkce. Pro tuto činnost lze samozřejmě použít v&nbsp;předchozí kapitole
popsanou programovou smyčku typu <strong>while</strong>, pomocí níž se bude
postupně zvyšovat hodnota pomocné numerické proměnné (počitadla) takovým
způsobem, aby se postupně prošlo indexy všech prvků v&nbsp;seznamu. Základní
podoba této smyčky může vypadat následovně:</p>

<pre>
let seznam1=[1,2,3,4,5]
let i=0
while i &lt; 5
    echo seznam1[i]
    let i = i + 1
endwhile
</pre>

<p>Ovšem jednodušší je použít namísto magické konstanty 5 funkci
<strong>len()</strong>, popř.&nbsp;lze navíc pro přístup k&nbsp;prvkům seznamu
používat funkci <strong>get</strong>:</p>

<pre>
let seznam1=[1,2,3,4,5]
let i=0
while i &lt; len(seznam1)
    echo get(seznam1, i)
    let i = i + 1
endwhile
</pre>

<p>Ani to však není nejlepší řešení, protože se musí relativně složitě pracovat
s&nbsp;čítačem smyčky, explicitně přistupovat ke každému prvku seznamu apod.
Textový editor <i>Vim</i> zde nabízí mnohem lepší řešení, které je používáno i
v&nbsp;mnoha dalších vyšších programovacích jazycích. Jedná se o smyčku typu
<strong>foreach</strong>, která automaticky projde všemi prvky seznamu, a to ve
správném pořadí. I když se pro zápis této smyčky používá klíčové slovo
<strong>for</strong>, je význam smyčky odlišný od podobně nazvaných C-čkovských
smyček. Výše uvedená smyčka <strong>while - endwhile</strong> se tedy může
přepsat následovně:</p>

<pre>
let seznam1=[1,2,3,4,5]
for item in seznam1
    echo item
endfor
</pre>

<a href="http://i.iinfo.cz/images/185/vim0706.png"><img src="http://i.iinfo.cz/images/185/vim0706-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 6: Příklad použití smyčky typu foreach v&nbsp;reálném
skriptu.</i></p>



<p><a name="k04"></a></p>
<h2>4. Seznamy seznamů &ndash; jeden ze způsobů reprezentace matic</h2>

<p>Můžeme si také vyzkoušet složitější příklad, v&nbsp;němž se seznam používá
pro reprezentaci matice (přesněji řečeno seznamu seznamů). Tento příklad po
svém spuštění uloží do registru nazvaného <strong>"</strong> text obsahující
matici, jejíž prvky mají dvojnásobnou hodnotu, než odpovídající prvky
z&nbsp;původní matice:</p>

<pre>
let matrix = [ [1,2,3], [4,5,6], [7,8,9] ]
let yank_reg = ""
for row in matrix
    for item in row
        let yank_reg = yank_reg . "\t" . (item*2)
    endfor
    let yank_reg = yank_reg . "\n"
endfor
let @" = yank_reg
</pre>

<a href="http://i.iinfo.cz/images/606/vim0707.png"><img src="http://i.iinfo.cz/images/606/vim0707-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 7: Demonstrační příklad pracující se seznamem seznamů.</i></p>

<p>Obsah registru <strong>"</strong> je možné uložit za pozici kurzoru pomocí
příkazu <strong>p</strong> (<i>put</i>), protože tento registr je u editačních
operací používán implicitně. Stejný příkaz je však možné zavolat přímo ze
skriptu s&nbsp;využitím klíčového slova <strong>normal</strong>:</p>

<pre>
let matrix = [ [1,2,3], [4,5,6], [7,8,9] ]
let yank_reg = ""
for row in matrix
    for item in row
        let yank_reg = yank_reg . "\t" . (item*2)
    endfor
    let yank_reg = yank_reg . "\n"
endfor
let @" = yank_reg
normal p
</pre>

<p>(dejte si pozor, na kterém místě se textový kurzor při spouštění skriptu
nachází).</p>

<a href="http://i.iinfo.cz/images/32/vim0708.png"><img src="http://i.iinfo.cz/images/32/vim0708-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 8: Demonstrační příklad pracující se seznamem seznamů po svém
spuštění.  V&nbsp;dolní části editační plochy je vypsán výsledek práce tohoto
příkladu.</i></p>



<p><a name="k05"></a></p>
<h2>5. Programová smyčka typu <strong>foreach</strong> při práci se slovníky (dictionary)</h2>

<p>Programovou smyčku typu <strong>foreach</strong> popsanou v&nbsp;předchozí
kapitole je možné kromě průchodu seznamem použít i pro procházení slovníků
(<i>dictionary</i>). Již v&nbsp;předchozí části tohoto seriálu jsme si řekli,
že klíči ve slovnících mohou být pouze řetězce, což však poněkud zmenšuje
možnosti průchodu celým slovníkem s&nbsp;využitím programové smyčky typu
<strong>while</strong>. Textový editor <i>Vim</i> však obsahuje interní funkci
<strong>keys()</strong>, která vrací všechny klíče ve slovníku ve formě seznamu
řetězců. S&nbsp;využitím této funkce je možné smyčku pro průchod slovníkem
napsat &ndash; i když dosti nešikovně &ndash; například následujícím
způsobem:</p></p>

<pre>
let dictionary={"one":1, "two":2, "three":3, "four":4}
echo dictionary

let keys=keys(dictionary)
let i = 0
while i &lt; len(keys)
    let key = get(keys, i)
    echo "Klic: " . key . "\thodnota: " . dictionary[key]
    let i = i + 1
endwhile
</pre>

<p>Popř.&nbsp;mnohem jednodušeji a čitelněji s&nbsp;využitím konstrukce
<strong>foreach</strong>:</p>

<pre>
let dictionary={"one":1, "two":2, "three":3, "four":4}
echo dictionary

for key in keys(dictionary)
    echo "Klic: " . key . "\thodnota: " . dictionary[key]
endfor
</pre>

<a href="http://i.iinfo.cz/images/602/vim0709.png"><img src="http://i.iinfo.cz/images/602/vim0709-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 9: Procházení slovníkem pomocí programové smyčky typu
while.</i></p>

<p>Jak je z&nbsp;předchozího příkladu patrné, nejprve se převedou všechny klíče
na seznam a poté se využije výše popsaná smyčka <strong>for - endfor</strong>,
která slouží k&nbsp;průchodu seznamem. Je zde však jeden poměrně zásadní
rozdíl: zatímco u seznamů bylo zaručeno, že se prvky seznamu prochází postupně
od prvku prvního směrem k&nbsp;prvku poslednímu, u slovníků (neboli
asociativních polí, hashů) je pořadí zdánlivě náhodné a odpovídá způsobu
interní reprezentace slovníku v&nbsp;operační paměti, což je ostatně patrné i
ze zpráv vypsaných předchozím demonstračním příkladem:</p>

<pre>
{'four': 4, 'one': 1, 'two': 2, 'three': 3}
Klic: four      hodnota: 4
Klic: one       hodnota: 1
Klic: two       hodnota: 2
Klic: three     hodnota: 3
</pre>

<p>Klíče je však možné například seřadit s&nbsp;využitím interní funkce
<strong>sort()</strong>, čímž se stane průchod slovníkem více deterministický;
viz též následující příklad:</p>

<pre>
let dictionary={"aaa":1, "xxx":2, "ccc":3, "zzz":4}
echo dictionary

let sorted_keys = sort(keys(dictionary))
for key in sorted_keys
    echo "Klic: " . key . "\thodnota: " . dictionary[key]
endfor
</pre>

<p>Výsledek běhu předchozího demonstračního příklad je následující:</p>

<pre>
{'zzz': 4, 'xxx': 2, 'ccc': 3, 'aaa': 1}
Klic: aaa       hodnota: 1
Klic: ccc       hodnota: 3
Klic: xxx       hodnota: 2
Klic: zzz       hodnota: 4
</pre>

<a href="http://i.iinfo.cz/images/184/vim0710.png"><img src="http://i.iinfo.cz/images/184/vim0710-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 10: Procházení slovníkem pomocí programové smyčky typu
foreach.</i></p>

<p>Seznam klíčů je samozřejmě možné setřídit opačně, k&nbsp;čemuž lze využít
buď vlastní porovnávací funkci, nebo na již setříděný seznam zavolat funkci
<strong>reverse()</strong>. Vzhledem k&nbsp;syntaktickým omezením Vim Scriptu
je však v&nbsp;tomto případě nutné tuto funkci volat pomocí konstrukce
<strong>call</strong> (Vim Script by totiž nepoznal, že se jedná a volání
funkce a předpokládal by, že <strong>reverse</strong> je nějaký příkaz):</p>

<pre>
let dictionary={"aaa":1, "xxx":2, "ccc":3, "zzz":4}
echo dictionary

let sorted_keys = sort(keys(dictionary))
call reverse(sorted_keys)

for key in sorted_keys
    echo "Klic: " . key . "\thodnota: " . dictionary[key]
endfor
</pre>

<p>Výsledek běhu předchozího demonstračního příklad je zobrazen níže:</p>

<pre>
{'zzz': 4, 'xxx': 2, 'ccc': 3, 'aaa': 1}
Klic: zzz       hodnota: 4
Klic: xxx       hodnota: 2
Klic: ccc       hodnota: 3
Klic: aaa       hodnota: 1
</pre>



<p><a name="k06"></a></p>
<h2>6. Jak lze ve Vim Scriptu elegantně vytvořit počítané programové smyčky?</h2>

<p>Po přečtení předchozích kapitol se možná ptáte, jakým způsobem se tedy ve
Vim Scriptu mohou zapisovat počítané smyčky typu <strong>for</strong> známé
z&nbsp;programovacích jazyků náležejících do Algolské větve. Samozřejmě je
možné pro implementaci počítané smyčky použít konstrukci <strong>while</strong>
a <strong>endwhile</strong>. To je však poměrně nečitelné, jak jsme mohli vidět
na příkladu uvedeném ve druhé kapitole:</p>

<pre>
let i = 1
while i &lt;= 10
    echo "aktualni hodnota pocitadla: " . i
    let i = i + 1
endwhile
</pre>

<p>Vim Script sice neobsahuje &bdquo;pravou&ldquo; počítanou smyčku typu
<strong>for</strong>, ovšem lze ji implementovat s&nbsp;využitím smyčky
<strong>foreach</strong> a interní funkce <strong>range()</strong>. Tato
užitečná funkce na základě svých parametrů vytvoří posloupnost čísel uloženou
v&nbsp;seznamu a průchod seznamem (zde konkrétně seznamem čísel) již známe.
Nejprve si ukažme, jak funkce <strong>range()</strong> pracuje. Pokud je funkce
zavolána pouze s&nbsp;jedním parametrem <i>n</i> (jímž by mělo být kladné
číslo), vrátí aritmetickou řadu začínající nulou a končící hodnotou
<i>n-1</i>:</p>

<pre>
:echo range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</pre>

<p>Samozřejmě je také možné zadat hodnotu prvního a posledního čísla
v&nbsp;aritmetické posloupnosti. V&nbsp;tomto případě má funkce
<strong>range()</strong> dva parametry: hodnotu prvního prvku a hodnotu prvku
posledního. Stále se však jedná o rostoucí posloupnost, tj.&nbsp;druhý parametr
by měl být vyšší, než parametr první, jinak se vrátí buď jednoprvkový seznam
(shodná hodnota obou parametrů) nebo prázdný seznam (popř.&nbsp;se nahlásí
chyba):</p>

<pre>
:echo range(1, 10)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</pre>

<pre>
:echo range(6, 16)
[6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
</pre>

<p>Jednoprvkový seznam:</p>

<pre>
:echo range(10, 10)
[10]
</pre>

<p>V&nbsp;mnoha skriptech je taktéž nutné zadat krok v&nbsp;aritmetické
posloupnosti &ndash; právě tímto způsobem je možné vytvořit klesající
posloupnost (krok se zadává jako třetí nepovinný parametr):</p>

<p>Kladný krok:</p>

<pre>
:echo range(0, 10, 2)
[0, 2, 4, 6, 8, 10]
</pre>

<p>Záporný krok:</p>

<pre>
:echo range(10, 1, -1)
[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
</pre>

<a href="http://i.iinfo.cz/images/561/vim0711.png"><img src="http://i.iinfo.cz/images/561/vim0711-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 11: Zdrojový kód demonstračního příkladu pro výpis sudých řádků
z&nbsp;aktuálně editovaného bufferu.</i></p>

<p>Nyní se již konečně dostáváme k&nbsp;využití této funkce při tvorbě
počítaných smyček. Asi nebude velkým překvapením, že smyčku lze s&nbsp;využitím
funkce <strong>range()</strong> zapsat velmi jednoduše</p>

<pre>
for i in range(1, 10)
    echo "aktualni hodnota pocitadla: " . i
endfor
</pre>

<p>Podobnou konstrukci je možné použít například při průchodu všemi řádky
aktuálně editovaného bufferu. Povšimněte si použití interní funkce
<strong>line()</strong>, která vrací číslo textového řádku v&nbsp;závislosti na
řetězci zadaném jako parametr této funkce. Více informací si o této funkci
řekneme v&nbsp;následujících částech tohoto seriálu:</p>

<pre>
let max = line("$")

for n in range(1, max)
    echo getline(n)
endfor
</pre>

<p>Samozřejmě je možné procházet například všemi sudými řádky od aktuální
pozice kurzoru směrem ke konci souboru, atd. atd.:</p>

<pre>
let max = line("$")
let current = line(".")

for n in range(current, max, 2)
    echo getline(n)
endfor
</pre>

<a href="http://i.iinfo.cz/images/427/vim0712.png"><img src="http://i.iinfo.cz/images/427/vim0712-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 12: Část zdrojového kódu tohoto článku, z&nbsp;něhož se zobrazují
jen sudé řádky.</i></p>



<p><a name="k07"></a></p>
<h2>7. Zpracování výjimek</h2>

<p>Skriptovací jazyk Vim Script obsahuje &ndash; možná poněkud překvapivě
&ndash; i konstrukci používanou při zachycování a zpracování výjimek,
tj.&nbsp;různých chybových stavů, které mohou během práce skriptu nastat.
Samotný princip zachycení výjimek není nijak neobvyklý, ale vzhledem
k&nbsp;tomu, že Vim Script sice umožňuje práci s&nbsp;objekty, ale není plně
objektově orientovaný, je každá výjimka jednoduše reprezentovaná řetězcem,
jehož obsah odpovídá řetězci, který je v&nbsp;případě chyby vypsán uživateli do
okna <i>Vimu</i> (zprávy o chybách mohou být samozřejmě ovlivněny aktuálně
nastaveným jazykovým prostředím). Právě na základě chybového řetězce nebo jeho
části může být výjimka skriptem zachycena a nějakým způsobem zpracována. Přitom
se velmi často využívá faktu, že každé chybové hlášení ve <i>Vimu</i> začíná
číslem chyby. Toto chování textového editoru si můžete jednoduše vyzkoušet,
například zadáním následujících příkazů.</p>

<p>Pokus o zápis obsahu bufferu do souboru či zařízení, pro nějž není zápis
povolený:</p>

<pre>
:set readonly
:w
</pre>

<a href="http://i.iinfo.cz/images/472/vim0713.png"><img src="http://i.iinfo.cz/images/472/vim0713-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 13: Chybové hlášení vypsané při pokusu o zápis do souboru
otevřeného v&nbsp;režimu read only.</i></p>

<p>Zadání špatného regulárního výrazu pro vyhledávání (závorka není
párová):</p>

<pre>
/\)
</pre>

<p>Pro odchycení výjimky se používá blok <strong>try-catch-endtry</strong>,
popř.&nbsp;<strong>try-catch-finally-endtry</strong>, který má následující
strukturu:</p>

<pre>
try
    blok příkazů
catch regulární výraz
    blok s příkazy reagujícími na výjimku
endtry
</pre>

<p>Popř.&nbsp;lze použít blok rozšířený o větev <strong>finally</strong>:</p>

<pre>
try
    blok příkazů
catch regulární výraz
    blok s příkazy reagujícími na výjimku
finally
    blok provedený nezávisle na tom, zda výjimka vznikne
endtry
</pre>

<p>Taktéž je možné blok <strong>catch</strong> zcela vynechat:</p>

<pre>
try
    blok příkazů
finally
    blok provedený nezávisle na tom, zda výjimka vznikne
endtry
</pre>

<a href="http://i.iinfo.cz/images/178/vim0714.png"><img src="http://i.iinfo.cz/images/178/vim0714-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 14: Chybová zpráva vypsaná ve chvíli, kdy není hledaný vzor
v&nbsp;textu nalezen.</i></p>



<p><a name="k08"></a></p>
<h2>8. Ukázka využití bloku try-catch-endcatch</h2>

<p>Po rychlém teoretickém úvodu do problematiky výjimek ve Vim Scriptu si již
můžeme ukázat jednoduchý příklad (převzatý přímo z&nbsp;nápovědy
k&nbsp;<i>Vimu</i>). V&nbsp;tomto příkladu probíhá pokus o otevření souboru na
zadané cestě a pokud soubor neexistuje, je o tom uživatel informován hlášením
vypsaným pomocí nám již známého příkazu <strong>echo</strong>:</p>

<pre>
try
    read ~/templates/pascal.tmpl
catch /E484:/
   echo "Sorry, the Pascal template file cannot be found."
endtry
</pre>

<p>Jak je z&nbsp;tohoto zdrojového příkladu patrné, je zachycována chyba
s&nbsp;číslem 484. Číslo této chyby bude vždy stejné, nezávisle na tom,
v&nbsp;jakém jazykovém prostředí je <i>Vim</i> ve skutečnosti spuštěn. Ovšem
regulární výraz pro zachycení výjimky může být i složitější, což můžeme vidět
z&nbsp;příkladu uvedeném níže:</p>

<pre>
try
    let config_lines = readfile('/etc/udev/udev.conf')
catch /^Vim\%((\a\+)\)\=:E484/
    return
endtry
</pre>

<a href="http://i.iinfo.cz/images/648/vim0715.png"><img src="http://i.iinfo.cz/images/648/vim0715-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 15: Chybová zpráva vypsaná ve chvíli, kdy je vyhledávaný vzor
chybný kvůli chybějící párové závorce.</i></p>

<p>Samozřejmě je taktéž možné zachytit a nějakým způsobem reagovat na větší
množství výjimek:</p>

<pre>
try
    call execute_code
catch /E484:/
    echo "No type annotations (.annot) file found"
catch /no_expression/
    echo "No expression found under the cursor"
catch /no_annotation/
    echo "No type annotation found for the given text"
catch /malformed_annot_file/
    echo "Malformed .annot file"
endtry
</pre>

<a href="http://i.iinfo.cz/images/118/vim0716.png"><img src="http://i.iinfo.cz/images/118/vim0716-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 16: Dvojice výjimek, v&nbsp;jejichž chybovém řetězci jsou sice
použita lokalizovaná hlášení, ovšem číslo chyby zůstává stále stejné.</i></p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Exuberant ctags<br />
<a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a>
</li>

<li>xxd (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>ctags (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags</a>
</li>

<li>cscope (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Novinky ve VIM 7: Úvodní část - speller<br />
<a href="http://www.root.cz/vim-sedm-prvni-cast/">http://www.root.cz/vim-sedm-prvni-cast/</a>
</li>

<li>Novinky ve VIM 7: Skriptovací jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>vim2elvis: Přednosti a nedostaky Elvise v porovnání s Vimem<br />
<a href="http://www.root.cz/clanky/vim2elvis-1/">http://www.root.cz/clanky/vim2elvis-1/</a>
</li>

<li>vim2elvis: Shodné znaky mezi Elvisem a Vimem, nastavení­editoru<br />
<a href="http://www.root.cz/clanky/vim2elvis-2/">http://www.root.cz/clanky/vim2elvis-2/</a>
</li>

<li>Nej... VIM pluginy (1)<br />
<a href="http://www.root.cz/clanky/nej-vim-pluginy/">http://www.root.cz/clanky/nej-vim-pluginy/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Scroll Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Scroll_lock">http://necyklopedie.wikia.com/wiki/Scroll_lock</a>
</li>

<li>Caps Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Caps_Lock">http://necyklopedie.wikia.com/wiki/Caps_Lock</a>
</li>

<li>Avoid the escape key<br />
<a href="http://vim.wikia.com/wiki/Avoid_the_escape_key">http://vim.wikia.com/wiki/Avoid_the_escape_key</a>
</li>

<li>Map caps lock to escape in XWindows<br />
<a href="http://vim.wikia.com/wiki/VimTip166">http://vim.wikia.com/wiki/VimTip166</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2011</small></p>
</body>
</html>

