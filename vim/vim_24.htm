<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Užitečné skripty a pluginy pro textový editor Vim (6.část - cestování v čase)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Užitečné skripty a pluginy pro textový editor Vim (6.část - cestování v čase)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části článku o užitečných pluginech určených pro textový editor Vim se budeme zabývat zdánlivou trivialitou &ndash; operacemi typu &bdquo;undo&ldquo; a &bdquo;redo&ldquo;. Uvidíme však, že v&nbsp;posledních verzích Vimu došlo i v&nbsp;této oblasti k&nbsp;poměrně dalekosáhlým změnám, které jsou dále podpořeny několika pluginy, například populárním modulem Gundo.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Užitečné skripty a pluginy pro textový editor Vim (6.část - cestování v&nbsp;čase)</a></p>
<p><a href="#k02">2. Chování příkazů <strong>undo</strong> a <strong>redo</strong> ve Vimu</a></p>
<p><a href="#k03">3. Příkaz <strong>U</strong></a></p>
<p><a href="#k04">4. Bloky vytvářené pro operace <strong>undo</strong>, rozdělení a spojování bloků</a></p>
<p><a href="#k05">5. Perzistentní operace <strong>undo</strong></a></p>
<p><a href="#k06">6. Strom změn v&nbsp;dokumentu (bufferu)</a></p>
<p><a href="#k07">7. Plugin <strong>histwin</strong></a></p>
<p>&nbsp;&nbsp;&nbsp;<a href="#k071">7.1 Popis pluginu <strong>histwin</strong></a></p>
<p>&nbsp;&nbsp;&nbsp;<a href="#k072">7.2 Instalace pluginu <strong>histwin</strong></a></p>
<p>&nbsp;&nbsp;&nbsp;<a href="#k073">7.3 Použití pluginu <strong>histwin</strong></a></p>
<p><a href="#k08">8. Plugin <strong>undotree</strong></a></p>
<p>&nbsp;&nbsp;&nbsp;<a href="#k081">8.1 Popis pluginu <strong>undotree</strong></a></p>
<p>&nbsp;&nbsp;&nbsp;<a href="#k082">8.2 Instalace pluginu <strong>undotree</strong></a></p>
<p>&nbsp;&nbsp;&nbsp;<a href="#k083">8.3 Použití pluginu <strong>undotree</strong></a></p>
<p><a href="#k09">9. Plugin <strong>Gundo</strong></a></p>
<p>&nbsp;&nbsp;&nbsp;<a href="#k091">9.1 Popis pluginu <strong>Gundo</strong></a></p>
<p>&nbsp;&nbsp;&nbsp;<a href="#k092">9.2 Instalace pluginu <strong>Gundo</strong></a></p>
<p>&nbsp;&nbsp;&nbsp;<a href="#k093">9.3 Použití pluginu <strong>Gundo</strong></a></p>
<p><a href="#k10">10. Odkazy na předchozí části článku</a></p>
<p><a href="#k11">11. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Užitečné skripty a pluginy pro textový editor Vim (6.část - cestování v&nbsp;čase)</h2>

<p>Mezi základní operace podporované prakticky všemi unixovými textovými
editory (a to včetně <a
href="http://fedora.cz/textove-editory-ve-fedore-1-cast/#e3">minimalistického
editoru <i>e3</i></a> naprogramovaného v&nbsp;assembleru) patří i operace typu
<i>undo</i> a <i>redo</i>, tj.&nbsp;operace sloužící k&nbsp;vracení provedených
změn popř.&nbsp;k&nbsp;obnovení těchto změn (&bdquo;odvolávám co jsem
odvolal&ldquo; :-)). Díky existenci těchto dvou operací je možné se vracet
v&nbsp;čase a sledovat, jaké změny byly v&nbsp;dokumentu provedeny (to, zda a
jak se informace o těchto změnách zachová i po ukončení práce editoru, si
vysvětlíme v&nbsp;navazujícím textu). Od dob textového editoru <i>Vi</i>, který
podporoval pouze jednoúrovňovou operaci <i>undo</i>, se <i>Vim</i> posunul
mnohem dále, takže dnes je podporováno dokonce i vracení změn s&nbsp;možností
větvení, které částečně připomíná funkce poskytované systémy pro správu verzí,
ovšem v&nbsp;menším časovém měřítku (pravděpodobně nikdo nedělá commity do VCS
s&nbsp;každou provedenou operací v&nbsp;textovém editoru). Některé relativně
nové vlastnosti <i>Vimu</i> v&nbsp;této oblasti si popíšeme v&nbsp;navazujících
kapitolách.</p>

<a href="http://www.root.cz/obrazek/205041/"><img src="http://i.iinfo.cz/images/597/vim-6-1-prev.png" class="image-205041" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 1: I tak zdánlivě jednoduchým operacím, jako je undo a redo, je
v&nbsp;integrované nápovědě textového editoru Vim věnována poměrně dlouhá
kapitola.</i></p>

<p>Nejprve si popišme základní operace typu <i>undo</i> a <i>redo</i>. Většina
těchto operací je &nbsp;velkou pravděpodobností uživatelům textového editoru
<i>Vim</i> dobře známá, možná až na příkaz <strong>U</strong>:</p>

<table>
<tr><th>#</th><th>Příkaz</th><th>Význam</th></tr>
<tr><td>1</td><td>u</td><td>vrátí poslední změnu provedenou v aktuálním bufferu</td></tr>
<tr><td>2</td><td><i>n</i>u</td><td>vrátí posledních <i>n</i> změn (<i>n</i> je číslo větší než nula, samotná nula je samostatným příkazem)</td></tr>
<tr><td>3</td><td>U</td><td>vrátí všechny změny provedené na jednom textovém řádku (velmi užitečné, viz též <a href="#k03">třetí kapitolu</a>)</td></tr>
<tr><td>4</td><td>Ctrl+R</td><td>opak operace <i>undo</i> (platí pro poslední provedenou změnu)</td></tr>
<tr><td>5</td><td><i>n</i>Ctrl+R</td><td>umožňuje odvolat posledních <i>n</i> operací <i>undo</i></td></tr>
</table>

<a href="http://www.root.cz/obrazek/205042/"><img src="http://i.iinfo.cz/images/597/vim-6-2-prev.png" class="image-205042" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 2: Novinkou ve Vim 7.3 je takzvané perzistentní undo, což je
téma, kterému se budeme věnovat v&nbsp;páté kapitole.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Chování příkazů <strong>undo</strong> a <strong>redo</strong> ve Vimu</h2>

<p>Připomeňme si ještě, že chování všech výše popsaných operací je do značné
míry ovlivněno volbou <strong>compatible</strong>
popř.&nbsp;<strong>nocompatible</strong>, tj.&nbsp;volbou určující, zda se má
textový editor <i>Vim</i> chovat podobně jako <a
href="http://www.susnet.uk/mastering-the-vi-editor">stařičký editor
<i>Vi</i></a> či zda má naopak nabízet funkce očekávané ve třetím tisíciletí
:-) Pokud je volba <strong>compatible</strong> nastavena, bude se operace
<strong>u</strong> chovat zcela odlišně, protože bude jen <a
href="http://www.rru.com/~meo/useful/vi/vi.rm.html#s44">jednoúrovňová</a>.
Editor si v&nbsp;tomto případě bude pamatovat jen poslední provedenou operaci,
což mj.&nbsp;znamená, že po zadání příkazu <strong>uu</strong> bude stav
aktuálně editovaného bufferu stejný, jako před stlačením prvního
<strong>u</strong>, neboť druhý příkaz <i>undo</i> vrátil změny provedené
prvním <i>undo</i> (to vlastně znamená, že ve <i>Vi</i> měla klávesová zkratka
<strong>u</strong> význam jak operace <i>undo</i> tak i <i>redo</i>).</p>

<img src="http://i.iinfo.cz/images/597/vim-6-3.png" class="image-205043" width="556" height="384" alt="&#160;" />
<p><i>Obrázek 3: Původní obsah zdrojového kódu po načtení do bufferu. Kurzor se
nachází na místě, kde dojde k&nbsp;modifikaci obsahu bufferu.</i></p>

<img src="http://i.iinfo.cz/images/597/vim-6-4.png" class="image-205044" width="556" height="384" alt="&#160;" />
<p><i>Obrázek 4: Buffer byl změněn smazáním jednoho řádku příkazem
<strong>dd</strong>.</i></p>

<img src="http://i.iinfo.cz/images/597/vim-6-5.png" class="image-205045" width="556" height="384" alt="&#160;" />
<p><i>Obrázek 5: Další změna bufferu: smazání druhého řádku příkazem
<strong>dd</strong>.</i></p>

<p>Zkušení uživatelé původního textového editoru <i>Vi</i> tuto vlastnost často
používali pro jednoduché vizuální ukázání změn provedené posledním editačním
příkazem, nicméně naprostá většina uživatelů modernějšího <i>Vimu</i> pro
jistotu zadává do svého konfiguračního souboru <strong>.vimrc</strong>
následující volbu (bez které ostatně nebude korektně fungovat ani žádný
plugin):</p>

<pre>
set nocompatible
</pre>

<p>Poznámka: současné verze <i>Vimu</i> v&nbsp;případě, že naleznou soubor
<strong>.vimrc</strong> či <strong>.gvimrc</strong> automaticky provedou
<strong>set nocompatible</strong>.</p>

<img src="http://i.iinfo.cz/images/597/vim-6-6.png" class="image-205046" width="556" height="384" alt="&#160;" />
<p><i>Obrázek 6: Po zadání příkazu <strong>uu</strong> se obnoví oba dva
smazané řádky, ovšem pouze v&nbsp;případě, že je nastavena volba
<strong>nocompatible</strong>.</i></p>

<p>Jen pro zajímavost si shrňme základní rozdíly mezi textovými editory
<i>Vi</i> a <i>Vim</i>, minimálně v&nbsp;jejich chování na příkaz
<strong>u</strong>:</p>

<table>
<tr><th>Příkazy</th><th>Chování editoru <i>Vi</i></th><th>Chování editoru <i>Vim</i></th></tr>
<tr><td>uu</td><td>undo+redo&rarr;nic se ve výsledku neprovede</td><td>vrácení posledních dvou změn (stejné jako 2u)</td></tr>
<tr><td>u Ctrl+R</td><td>překreslení terminálu</td><td>undo+redo&rarr;nic se ve výsledku neprovede</td></tr>
</table>

<img src="http://i.iinfo.cz/images/597/vim-6-7.png" class="image-205047" width="556" height="384" alt="&#160;" />
<p><i>Obrázek 7: Pokud je nastavena volba <strong>compatible</strong>, vede
použití příkazu <strong>uu</strong> k&nbsp;obnovení obsahu bufferu do podoby,
která již byla zobrazena na obrázku číslo 5.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Příkaz <strong>U</strong></h2>

<p>V&nbsp;tabulce uvedené <a href="#k01">v&nbsp;první kapitole</a> je zmíněn i
velmi užitečný, ale současně i poněkud záludný příkaz <strong>U</strong>. Ten
umožňuje vrátit všechny změny provedené na jednom textovém řádku, což se hodí
například při tvorbě programů. Musíme mít ovšem na paměti, že příkaz
<strong>U</strong> je <i>Vimem</i> považován za běžný editační příkaz, který
nespadá do kategorie &bdquo;undo/redo&ldquo;. V&nbsp;praxi to znamená to, že
změny provedené příkazem <strong>U</strong> se odvolávají příkazem
<strong>u</strong> a nikoli <strong>Ctrl+R</strong>. Navíc se &ndash; stále
kvůli tomu, že je příkaz <strong>U</strong> chápán jako běžný editační příkaz
&ndash; aktivně používaný buffer dostane do stavu &bdquo;modified&ldquo;, a to
i ve chvíli, kdy se příkazem <strong>U</strong> obnoví původní stav bufferu.
Naproti tomu příkaz <strong>u</strong> se chová odlišně: pokud se podaří vrátit
všechny změny až do takového stavu, v&nbsp;jakém byl buffer při posledním
uložení či naopak otevření, je stav &bdquo;modified&ldquo; vymazán. To zjistíme
snadno pohledem na pravítko, protože buffery ve stavu &bdquo;modified&ldquo;
obsahují vedle jména souboru znaky [+].</p>

<img src="http://i.iinfo.cz/images/597/vim-6-8.png" class="image-205048" width="556" height="384" alt="&#160;" />
<p><i>Obrázek 8: Původní obsah bufferu po načtení zdrojového souboru do editoru
Vim.</i></p>

<img src="http://i.iinfo.cz/images/597/vim-6-9.png" class="image-205049" width="556" height="384" alt="&#160;" />
<p><i>Obrázek 9: Změna na jediném textovém řádku operací
<strong>cw{}Esc</strong> (buffer je ve stavu
&bdquo;modifikován&ldquo;).</i></p>

<img src="http://i.iinfo.cz/images/597/vim-6-10.png" class="image-205050" width="556" height="384" alt="&#160;" />
<p><i>Obrázek 10: Vrácení této změny příkazem <strong>U</strong> (buffer je
stále ve stavu &bdquo;modifikován&ldquo;!).</i></p>

<img src="http://i.iinfo.cz/images/597/vim-6-11.png" class="image-205051" width="556" height="384" alt="&#160;" />
<p><i>Obrázek 11: Příkaz <strong>u</strong> obnoví stav bufferu před použitím
příkazu <strong>U</strong>, což znamená, že příkaz <strong>U</strong> vlastně
není plnohodnotným &bdquo;undo&ldquo;, ale jen další editační operací.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Bloky vytvářené pro operace <strong>undo</strong>, rozdělení a spojování bloků</h2>

<p>Textový editor <i>Vim</i> si udržuje přehled o všech nedávno provedených
operacích, které následně sdružuje do bloků nazývaných <i>undo blocks</i>.
Význam těchto bloků je jednoduchý &ndash; příkaz <strong>u</strong> vrátí
všechny změny zaznamenané v&nbsp;jednom bloku a příkaz
<i>n</i><strong>u</strong> vrátí změny zaznamenané v&nbsp;posledních <i>n</i>
blocích (pokud tedy není nastavený režim kompatibility s&nbsp;<i>Vi</i>).
V&nbsp;některých případech však může být vhodnější &bdquo;rozbít&ldquo; blok na
více částí. Předpokládejme například, že budu chtít v&nbsp;tomto odstavci,
jehož délka mimochodem přesahuje tisíc znaků, vrátit zpět pouze změny provedené
v&nbsp;posledních dvou větách. V&nbsp;případě, že by celý odstavec byl napsán
v&nbsp;jednom kroku, tj.&nbsp;přechodem do režimu vkládání (<i>insert
mode</i>), zápisem celého textu a následně přechodem zpět do normálního režimu
(<i>normal mode</i>), bylo by použití příkazu <strong>u</strong> vlastně
zbytečné, neboť tento příkaz by vrátil celý blok a vlastně tak smazal celý
odstavec.</p>

<p>Ve skutečnosti si však můžeme lehce vypomoci klávesovou zkratkou
<strong>Ctrl+G u</strong> zadanou přímo v&nbsp;režimu vkládání. Tato zkratka
sice zdánlivě nic nedělá (minimálně se nijak neprojeví v&nbsp;napsaném textu),
ve skutečnosti však interně zavře aktuální <i>undo block</i> a začne
zaznamenávat příkazy do bloku nového. Dokonce existuje i opačný postup, kterým
lze spojit dva po sobě jdoucí <i>undo blocky</i>, ten však má význam především
pro tvůrce skriptů a nikoli při běžné editaci (po skriptu totiž často
požadujeme, aby se <strong>celá</strong> operace provedená skriptem dala vrátit
jediným příkazem <strong>u</strong>). Krátké shrnutí:</p>

<table>
<tr><th>Příkaz</th><th>Režim</th><th>Význam</th></tr>
<tr><td>Ctrl+G u</td><td>insert mode</td><td>uzavření aktuálního <i>undo bloku</i> a vytvoření bloku nového</td></tr>
<tr><td>:undojoin</td><td>command mode</td><td>spojení dvou po sobě jdoucích <i>undo bloků</i></td></tr>
</table>

<p>Příkaz <strong>Ctrl+G u</strong> pracuje jen ve vkládacím režimu
z&nbsp;logických důvodů &ndash; jen zde totiž existuje praktická potřeba
rozdělit potenciálně komplikovaný příkaz (konkrétně
<strong>i</strong>sáhodlouhý_text<strong>Esc</strong>) do většího množství
bloků.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Perzistentní operace <strong>undo</strong></h2>

<p>Mezi poměrně nové vlastnosti textového editoru <i>Vim</i> patří možnost
zaznamenávat celou historii příkazů <i>undo</i> a <i>redo</i> na disk do
zvláštního souboru, což uživateli umožní i po zavření <i>Vimu</i> a novém
načtení dokumentu ihned použít příkaz <strong>u</strong> a vrátit tak poslední
provedené operace. Soubor s&nbsp;historií <i>undo/redo</i> je binární,
tj.&nbsp;některé jeho části jsou prakticky nečitelné bez znalosti jeho vnitřní
struktury (ovšem při jeho otevření najdeme i bloky čitelného textu). Binární
formát však v&nbsp;tomto případě vůbec není na škodu, protože tyto soubory
&ndash; podobně jako (taktéž binární) soubory <strong>.swp</strong> &ndash;
jsou určeny pouze pro zpracování <i>Vimem</i> a důraz je kladen na to, aby
uživatel nebyl při své práci zdržován (v&nbsp;tomto ohledu stojí <i>Vim</i> na
samotné technologické špičce).</p>

<a href="http://www.root.cz/obrazek/205052/"><img src="http://i.iinfo.cz/images/597/vim-6-12-prev.png" class="image-205052" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 12: Obsah binárního souboru s&nbsp;uloženými informacemi
potřebnými pro provedení operací undo/redo. Soubor je sice binární, ovšem
můžeme v&nbsp;něm vidět i části editovaného a modifikovaného textu.</i></p>

<p>Jak vlastně soubory držící historii příkazů <i>undo</i> a <i>redo</i> použít
v&nbsp;praxi? Je to velmi jednoduché, protože jediné, co se po uživateli
vyžaduje, je nastavení konfigurační volby <strong>undofile</strong>. Jedná se o
volbu typu ano/ne, tj.&nbsp;možné jsou jen dvě hodnoty
<strong>undofile</strong> a <strong>noundofile</strong>. Pokud se například
v&nbsp;konfiguračním souboru <strong>.vimrc</strong> použije následující
řádek:</p>

<pre>
set undofile
</pre>

<p>bude to znamenat, že pro každý otevřený soubor se automaticky při jeho
editaci vytvoří pomocný soubor s&nbsp;názvem
<strong>.jméno_původního_souboru.un~</strong>, kde tilda na konci značí, že
tento soubor je možné odstranit, nebude se ukládat do GIT repositáře atd. Je
totiž nutné mít na paměti, že i tyto soubory <i>mohou</i> obsahovat citlivá
data, která sice mohou být z&nbsp;finálního dokumentu odstraněna, ale strom
<i>undo</i> je stále obsahuje! (ovšem i tyto soubory lze kryptovat, více viz
<strong>:help encryption</strong>). To, ve kterém adresáři, se budou soubory
obsahující historii <i>undo/redo</i> ukládat, je určeno obsahem konfigurační
proměnné <strong>undodir</strong>, jejíž aktuální hodnotu lze zjistit velmi
snadno:</p>

<pre>
:set undodir?
</pre>

<p>Soubor s&nbsp;undo stromem může vypadat například takto:</p>

<pre>
xxd -g1 .clanek.html.un~
0000000: 56 69 6d 9f 55 6e 44 6f e5 00 02 65 2f 3b e6 97  Vim.UnDo...e/;..
0000010: 59 cc 9c 7b bb 6d f3 e9 d9 49 4e 60 12 bb 39 ee  Y..{.m...IN`..9.
0000020: 65 b0 14 4f 88 26 67 2a d4 93 bd 00 00 00 02 00  e..O.xg*........
0000030: 00 00 07 3c 70 3e 3c 2f 70 3e 00 00 00 01 00 00  ...[p][/p]......
0000040: 00 02 00 00 00 01 00 00 00 08 00 00 00 00 00 00  ................
0000050: 00 08 00 00 00 08 00 00 00 08 00 00 00 00 55 33  ..............U3
0000060: f2 4d 04 01 00 00 00 05 00 5f d0 00 00 00 00 00  .M......._......
0000070: 00 00 02 00 00 00 00 00 00 00 00 00 00 00 01 00  ................
0000080: 00 00 01 00 00 00 00 00 00 00 00 ff ff ff ff 00  ................
0000090: 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
</pre>

<p>Poznámka: soubory s&nbsp;historií operací <i>undo/redo</i> mohou být poměrně
velké, proto může být vhodné pro určité typy souborů (například při editaci
obrovských databázových exportů) nastavit volbu <strong>:set
noundofile</strong>.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Strom změn v&nbsp;dokumentu (bufferu)</h2>

<p>Před popisem pluginů se ještě musíme seznámit s&nbsp;jednou novou vlastností
<i>Vimu</i>, která opět souvisí s&nbsp;operacemi <i>undo</i> a <i>redo</i>.
V&nbsp;případě, že se kdykoli během práce s&nbsp;bufferem provede operace
<i>undo</i> a následně se provedou další změny v&nbsp;bufferu (které obecně
mohou být odlišné od původních změn), vytvoří <i>Vim</i> automaticky na pozadí
novou větev v&nbsp;interně udržovaném stromu nazvaném příhodně <i>undo
tree</i>. Všechny listy tohoto stromu je možné kdykoli vypsat s&nbsp;využitím
příkazu <strong>:undolist</strong>. Listy se vypíšou do jednoduché tabulky se
čtyřmi sloupci, jak je ukázáno na následujícím příkladu:</p>

<pre>
number changes  when               saved
     3       3  37 seconds ago
     5       4  32 seconds ago
     7       4  30 seconds ago
     9       4  28 seconds ago
    11       4  24 seconds ago
    13       4  21 seconds ago
    15       4  13 seconds ago
    17       4  8 seconds ago
    18       3  2 seconds ago   5
</pre>

<p>K&nbsp;jednotlivým změnám je možné se kdykoli vrátit, například
s&nbsp;využitím příkazů <strong>:earlier count</strong> či <strong>:later
count</strong> (popř.&nbsp;<strong>g+</strong> a <strong>g-</strong>), ovšem
mnohem jednodušší je využít některý z&nbsp;pluginů popsaných
v&nbsp;navazujících kapitolách.</p>

<a href="http://www.root.cz/obrazek/205053/"><img src="http://i.iinfo.cz/images/597/vim-6-13-prev.png" class="image-205053" width="370" height="221" alt="&#160;" /></a>
<p><i>Obrázek 13: Seznam změn, které vznikly při vytváření tohoto
článku.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Plugin <strong>histwin</strong></h2>

<p><a name="k071"></a></p>
<h3 id="k071">7.1 Popis pluginu <strong>histwin</strong></h3>

<p>Prvním pluginem, se kterým se v&nbsp;dnešním článku seznámíme, je přídavný
modul nazvaný <i>histwin</i>. Tento modul slouží zejména pro prohlížení
historie úprav jednotlivých bufferů a taktéž pro manipulaci se stromem
vytvářeným operacemi typu <i>undo</i> a <i>redo</i> způsobem, s&nbsp;nímž jsme
se seznámili v&nbsp;předchozích kapitolách. Navíc tento modul dokáže zobrazit
rozdíl mezi jednotlivými verzemi bufferu, popř.&nbsp;je možné si jednotlivé
stavy bufferu pojmenovat (přiřadit stavu nějakou značku neboli <i>tag</i>).
Modul <i>histwin</i> obsahuje vlastní textové uživatelské rozhraní, v&nbsp;němž
je zobrazeno jak jednoduché menu s&nbsp;příkazy, tak i jednotlivé větve stromu:
tento způsob zobrazení jsme ostatně viděli již u některých dalších modulů,
například u pluginu <i>NERDTree</i> či <i>JavaBrowser</i></p>

<a href="http://www.root.cz/obrazek/205054/"><img src="http://i.iinfo.cz/images/597/vim-6-14-prev.png" class="image-205054" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 14: Nápověda k&nbsp;pluginu histwin.</i></p>

<a href="http://www.root.cz/obrazek/205055/"><img src="http://i.iinfo.cz/images/597/vim-6-15-prev.png" class="image-205055" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 15: Okno pluginu histwin otevřené pro zcela prázdný buffer bez
historie operací.</i></p>



<p><a name="k072"></a></p>
<h3 id="k072">7.2 Instalace pluginu <strong>histwin</strong></h3>

<p>Pro instalaci modulu <i>histwin</i> lze jednoduše použít Git, protože
zdrojové kódy jsou uloženy na GitHubu, podobně jako tomu bylo u mnoha pluginů
popsaných minule a taktéž předminule:</p>

<pre>
<strong>cd ~/.vim/bundle</strong>
<strong>git clone https://github.com/chrisbra/histwin.vim</strong>
</pre>

<p>Struktura adresáře <strong>~/.vim/bundle</strong> může vypadat
následovně:</p>

<pre>
.
├── calendar
│   ├── autoload
│   ├── doc
│   └── plugin
├── ctrlp.vim
│   ├── autoload
│   │   └── ctrlp
│   ├── doc
│   └── plugin
├── <strong>histwin.vim</strong>
│   ├── <strong>autoload</strong>
│   ├── <strong>doc</strong>
│   └── <strong>plugin</strong>
├── SearchComplete
│   └── plugin
├── snipmate.vim
│   ├── after
│   │   └── plugin
│   ├── autoload
│   ├── doc
│   ├── ftplugin
│   ├── plugin
│   ├── snippets
│   └── syntax
├── vim-fireplace
│   ├── autoload
│   │   └── fireplace
│   ├── doc
│   ├── plugin
│   │   └── fireplace
│   └── python
├── vim-fugitive
│   ├── doc
│   └── plugin
└── vim-surround
    ├── doc
    └── plugin
</pre>

<a href="http://www.root.cz/obrazek/205056/"><img src="http://i.iinfo.cz/images/597/vim-6-16-prev.png" class="image-205056" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 16: Takto vypadá okno pluginu histwin ve chvíli, kdy se již
k&nbsp;bufferu zaznamenalo několik operací.</i></p>

<a href="http://www.root.cz/obrazek/205057/"><img src="http://i.iinfo.cz/images/597/vim-6-17-prev.png" class="image-205057" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 17: Zobrazení rozdílu mezi dvěma uzly stromu formou
diffu.</i></p>



<p><a name="k073"></a></p>
<h3 id="k073">7.3 Použití pluginu <strong>histwin</strong></h3>

<p>Základním příkazem pro vyvolání pluginu <i>histwin</i> je
<strong>:UB</strong>, což je zkratka znamenající &bdquo;Undo Browse&ldquo;
(samozřejmě je možné si tento příkaz namapovat na vybranou klávesovou zkratku,
například na klávesu <strong>F12</strong>). Po zadání tohoto příkazu se zobrazí
nové okno, v&nbsp;němž je zobrazena krátká nápověda a taktéž historie
provedených operací, včetně případných větvení v&nbsp;<i>undo stromu</i>.
V&nbsp;historii se u každé operace mohou zobrazit i příznaky ! (větev není
dostupná) či * (větev byla uložena) a navíc i případné pojmenování této větve.
Plugin <i>histwin</i> totiž umožňuje ke každé větvi přiřadit takzvaný
<i>tag</i> příkazem <strong>T</strong>, což je ostatně patrné i
z&nbsp;přiložených screenshotů. Kromě toho lze zobrazit i rozdíl (<i>diff</i>)
mezi vybranými větvemi.</p>

<a href="http://www.root.cz/obrazek/205058/"><img src="http://i.iinfo.cz/images/597/vim-6-18-prev.png" class="image-205058" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 18: V&nbsp;levém dolním rohu je ukázáno, jak lze jednotlivým
uzlům přiřadit tagy.</i></p>

<a href="http://www.root.cz/obrazek/205059/"><img src="http://i.iinfo.cz/images/597/vim-6-19-prev.png" class="image-205059" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 19: Okno modulu histwin ve chvíli, kdy je vypnuta
nápověda.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Plugin <strong>undotree</strong></h2>

<p><a name="k081"></a></p>
<h3 id="k081">8.1 Popis pluginu <strong>undotree</strong></h3>

<p>Druhým pluginem, se kterým se v&nbsp;dnešním článku seznámíme, je přídavný
modul pojmenovaný příznačně <i>undotree</i>. Tento plugin slouží, podobně jako
plugin předchozí, především pro grafické znázornění obsahu stromu vytvářeného
při editaci i při provádění operací <i>undo</i> a <i>redo</i> způsobem, o němž
jsme se zmínili zejména <a href="#k06">v&nbsp;šesté kapitole</a>. Se
znázorněným stromem, jehož pseudografika částečně připomíná způsob zobrazení
větvení v&nbsp;GITu, je možné různým způsobem manipulovat, především zobrazit,
jaké editační operace se již provedly a do kterého stavu dokumentu se má editor
přenést. Modul taktéž zobrazí rozdíl (diff) mezi dvěma větvemi.</p>

<a href="http://www.root.cz/obrazek/205060/"><img src="http://i.iinfo.cz/images/597/vim-6-20-prev.png" class="image-205060" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 20: Nápověda k&nbsp;pluginu undotree.</i></p>



<p><a name="k082"></a></p>
<h3 id="k082">8.2 Instalace pluginu <strong>undotree</strong></h3>

<p>Instalace tohoto modulu je stejně snadná jako instalace modulu předchozího,
protože lze opět provést naklonování pluginu z&nbsp;jeho repositáře umístěného
na populárním GitHubu:</p>

<pre>
<strong>cd ~/.vim/bundle</strong>
<strong>git clone https://github.com/mbbill/undotree</strong>
Cloning into 'undotree'...
remote: Counting objects: 434, done.
remote: Total 434 (delta 0), reused 0 (delta 0), pack-reused 434
Receiving objects: 100% (434/434), 110.64 KiB | 0 bytes/s, done.
Resolving deltas: 100% (117/117), done.
Checking connectivity... done.
</pre>

<p>Pro jistotu se podívejme, jak bude vypadat struktura adresáře <strong>cd
~/.vim/bundle</strong>:</p>

<pre>
.
├── calendar
│   ├── autoload
│   ├── doc
│   └── plugin
├── ctrlp.vim
│   ├── autoload
│   │   └── ctrlp
│   ├── doc
│   └── plugin
├── histwin.vim
│   ├── autoload
│   ├── doc
│   └── plugin
├── SearchComplete
│   └── plugin
├── snipmate.vim
│   ├── after
│   │   └── plugin
│   ├── autoload
│   ├── doc
│   ├── ftplugin
│   ├── plugin
│   ├── snippets
│   └── syntax
├── <strong>undotree</strong>
│   ├── <strong>doc</strong>
│   ├── <strong>plugin</strong>
│   └── <strong>syntax</strong>
├── vim-fireplace
│   ├── autoload
│   │   └── fireplace
│   ├── doc
│   ├── plugin
│   │   └── fireplace
│   └── python
├── vim-fugitive
│   ├── doc
│   └── plugin
└── vim-surround
    ├── doc
    └── plugin
</pre>

<a href="http://www.root.cz/obrazek/205061/"><img src="http://i.iinfo.cz/images/597/vim-6-21-prev.png" class="image-205061" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 21: Po delší editaci dokumentu je již historie změn poměrně
dlouhá. Povšimněte si i větvení.</i></p>



<p><a name="k083"></a></p>
<h3 id="k083">8.3 Použití pluginu <strong>undotree</strong></h3>

<p>Podobně jako výše popsaný modul <i>histwin</i> i modul <i>undotree</i>
používá vlastní okno se zobrazenou nápovědou, seznamem změn, stromem změn atd.
Toto okno se vyvolává příkazem <strong>:UndotreeToggle</strong>, ovšem díky
možnosti automatického doplnění názvů příkazů klávesou <strong>Tab</strong>
samozřejmě není zapotřebí zapisovat celý název tohoto příkazu. Samotné okno
pluginu <i>undotree</i> může mít více podob: jsou podporovány celkem čtyři
styly řízené globální proměnnou <strong>g:undotree_WindowLayout</strong>.
Některé možnosti pluginu tohoto pluginu naznačují screenshoty.</p>

<a href="http://www.root.cz/obrazek/205062/"><img src="http://i.iinfo.cz/images/597/vim-6-22-prev.png" class="image-205062" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 22: I modul undotree obsahuje možnost zobrazení nápovědy.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Plugin <strong>Gundo</strong></h2>

<p><a name="k091"></a></p>
<h3 id="k091">9.1 Popis pluginu <strong>Gundo</strong></h3>

<p>Třetím a současně i posledním modulem, jehož popisem se budeme
v&nbsp;dnešním článku zabývat, je plugin nazvaný <i>Gundo</i>. Tento modul je
mezi komunitou uživatelů textového editoru <i>Vim</i> velmi populární (řadí se
dokonce mezi top ten vimovských pluginů), a to nikoli snad kvůli množství
podporovaných funkcí, ale zejména díky jeho přehlednosti a v&nbsp;neposlední
řadě i snadnému ovládání, což je patrné i při pohledu na screenshoty zobrazené
na obrázcích číslo 23 až 25. Tento plugin opět dokáže ve vlastním podokně
zobrazit strom změn a navíc se při pohybu kurzoru po jednotlivých uzlech tohoto
stromu v&nbsp;dolním podokně automaticky zobrazuje změna mezi aktuálním stavem
bufferu a stavem, který je reprezentován vybraným stromem. Tyto operace jsou
velmi rychlé a především přehledné.</p>

<a href="http://www.root.cz/obrazek/205063/"><img src="http://i.iinfo.cz/images/597/vim-6-23-prev.png" class="image-205063" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 23: Nápověda k&nbsp;pluginu Gundo.</i></p>



<p><a name="k092"></a></p>
<h3 id="k092">9.2 Instalace pluginu <strong>Gundo</strong></h3>

<p>Instalaci modulu <i>Gundo</i> nemusíme zdlouhavě popisovat, neboť se opět
můžeme spolehnout na GIT a repositář pluginu umístněný na GitHubu:</p>

<pre>
<strong>cd ~/.vim/bundle</strong>
<strong>git clone https://github.com/sjl/gundo.vim</strong>
Cloning into 'gundo.vim'...
remote: Counting objects: 834, done.
remote: Total 834 (delta 0), reused 0 (delta 0), pack-reused 834
Receiving objects: 100% (834/834), 278.07 KiB | 0 bytes/s, done.
Resolving deltas: 100% (342/342), done.
Checking connectivity... done.
</pre>

<pre>
.
├── calendar
│   ├── autoload
│   ├── doc
│   └── plugin
├── ctrlp.vim
│   ├── autoload
│   │   └── ctrlp
│   ├── doc
│   └── plugin
├── gundo.vim
│   ├── autoload
│   ├── doc
│   ├── plugin
│   ├── site
│   └── tests
│       ├── bundled
│       │   ├── lh-vim-lib
│       │   │   ├── autoload
│       │   │   │   └── lh
│       │   │   │       ├── buffer
│       │   │   │       └── graph
│       │   │   ├── doc
│       │   │   ├── macros
│       │   │   ├── mkVba
│       │   │   ├── plugin
│       │   │   └── tests
│       │   │       └── lh
│       │   └── ut
│       │       ├── autoload
│       │       │   ├── lh
│       │       │   └── should
│       │       ├── doc
│       │       ├── ftplugin
│       │       │   └── vim
│       │       ├── mkVba
│       │       ├── plugin
│       │       └── tests
│       │           └── lh
│       └── vim_test
│           ├── autoload
│           │   └── lh -&gt; ../../bundled/lh-vim-lib/autoload/lh
│           ├── colors
│           ├── ftplugin
│           │   └── vim -&gt; ../../bundled/ut/ftplugin/vim
│           ├── macros
│           └── plugin
├── SearchComplete
│   └── plugin
├── snipmate.vim
│   ├── after
│   │   └── plugin
│   ├── autoload
│   ├── doc
│   ├── ftplugin
│   ├── plugin
│   ├── snippets
│   └── syntax
├── vim-fireplace
│   ├── autoload
│   │   └── fireplace
│   ├── doc
│   ├── plugin
│   │   └── fireplace
│   └── python
├── vim-fugitive
│   ├── doc
│   └── plugin
└── vim-surround
    ├── doc
    └── plugin
</pre>

<a href="http://www.root.cz/obrazek/205064/"><img src="http://i.iinfo.cz/images/597/vim-6-24-prev.png" class="image-205064" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 24: Strom změn provedených v&nbsp;dokumentu je podle mého názoru
v&nbsp;modulu Gundo zobrazen nejpřehlednějším způsobem.</i></p>



<p><a name="k093"></a></p>
<h3 id="k093">9.3 Použití pluginu <strong>Gundo</strong></h3>

<p>Základním příkazem přídavného modulu <i>Gundo</i> je příkaz
<strong>:GundoToggle</strong>, který zobrazí popř.&nbsp;naopak skryje dvojici
podoken. V&nbsp;horním podokně je zobrazen strom změn (aktuální uzel je označen
zavináčem), v&nbsp;podokně dolním pak rozdíl (<i>diff</i>) mezi vybraným uzlem
stromu změn a aktuálním stavem bufferu popř.&nbsp;diff znázorňující pouze změny
zaznamenané v&nbsp;daném uzlu, tj.&nbsp;přesně ty změny, které mohou být
vrácené příkazem <strong>u</strong>. Uzly stromu se vybírají pohybem kurzoru,
kde kromě kláves <strong>j</strong> a <strong>k</strong> je možné použít i
další příkazy, například <strong>G</strong> či <strong>gg</strong>.</p>

<a href="http://www.root.cz/obrazek/205065/"><img src="http://i.iinfo.cz/images/597/vim-6-25-prev.png" class="image-205065" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 25: Při přechodu na jakoukoli větev se v&nbsp;dolním podokně
zobrazí změna (diff) zaznamenaná v&nbsp;uzlu stromu změn.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Odkazy na předchozí části článku</h2>

<ol>

<li>Užitečné skripty a pluginy pro textový editor Vim<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (2.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-2-cast/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-2-cast/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (3.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-3-cast/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-3-cast/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (4.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-4-cast/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-4-cast/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (5.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-5-cast/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-5-cast/</a>
</li>

</ol>



<p><a name="k11"></a></p>
<h2 id="k11">11. Odkazy na Internetu</h2>

<ol>

<li>vi Editor Commands<br />
<a href="http://www.cs.rit.edu/~cslab/vi.html#A1.4">http://www.cs.rit.edu/~cslab/vi.html#A1.4</a>
</li>

<li>vi Manual<br />
<a href="http://www.cs.fsu.edu/general/vimanual.html">http://www.cs.fsu.edu/general/vimanual.html</a>
</li>

<li>Mastering the Vi Editor<br />
<a href="http://www.susnet.uk/mastering-the-vi-editor">http://www.susnet.uk/mastering-the-vi-editor</a>
</li>

<li>Using undo branches<br />
<a href="http://vim.wikia.com/wiki/Using_undo_branches">http://vim.wikia.com/wiki/Using_undo_branches</a>
</li>

<li>Gundo<br />
<a href="http://sjl.bitbucket.org/gundo.vim/">http://sjl.bitbucket.org/gundo.vim/</a>
</li>

<li>Vim as a Python IDE, or Python IDE as Vim<br />
<a href="http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/">http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/</a>
</li>

<li>histwin na GitHubu<br />
<a href="https://github.com/chrisbra/histwin.vim">https://github.com/chrisbra/histwin.vim</a>
</li>

<li>histwin.vim : Browse the undo tree<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2932">http://www.vim.org/scripts/script.php?script_id=2932</a>
</li>

<li>undotree.vim : Display your undo history in a graph<br />
<a href="http://www.vim.org/scripts/script.php?script_id=4177">http://www.vim.org/scripts/script.php?script_id=4177</a>
</li>

<li>Surround<br />
<a href="http://www.bestofvim.com/plugin/surround/">http://www.bestofvim.com/plugin/surround/</a>
</li>

<li>SnipMate<br />
<a href="http://www.bestofvim.com/plugin/snipmate/">http://www.bestofvim.com/plugin/snipmate/</a>
</li>

<li>Getting a Clojure REPL in Vim With VimClojure, Nailgun, and Leiningen<br />
<a href="http://naleid.com/blog/2011/12/19/getting-a-clojure-repl-in-vim-with-vimclojure-nailgun-and-leiningen/">http://naleid.com/blog/2011/12/19/getting-a-clojure-repl-in-vim-with-vimclojure-nailgun-and-leiningen/</a>
</li>

<li>The NERD Commenter : A plugin that allows for easy commenting of code for many filetypes.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1218">http://www.vim.org/scripts/script.php?script_id=1218</a>
</li>

<li>NERD Commenter na GitHubu<br />
<a href="https://github.com/scrooloose/nerdcommenter">https://github.com/scrooloose/nerdcommenter</a>
</li>

<li>luarefvim : Lua reference manual<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1291">http://www.vim.org/scripts/script.php?script_id=1291</a>
</li>

<li>lua.vim : Lua file type plug-in for the Vim text editor<br />
<a href="http://www.vim.org/scripts/script.php?script_id=3625">http://www.vim.org/scripts/script.php?script_id=3625</a>
</li>

<li>vim-lua-ftplugin<br />
<a href="https://github.com/xolox/vim-lua-ftplugin">https://github.com/xolox/vim-lua-ftplugin</a>
</li>

<li>Vi Improved<br />
<a href="https://wiki.python.org/moin/Vim">https://wiki.python.org/moin/Vim</a>
</li>

<li>javacomplete : Omni Completion for JAVA<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1785">http://www.vim.org/scripts/script.php?script_id=1785</a>
</li>

<li>SearchComplete<br />
<a href="http://www.vim.org/scripts/script.php?script_id=474">http://www.vim.org/scripts/script.php?script_id=474</a>
</li>

<li>ShowMarks<br />
<a href="http://www.vim.org/scripts/script.php?script_id=152">http://www.vim.org/scripts/script.php?script_id=152</a>
</li>

<li>ctrlp.vim<br />
<a href="https://github.com/kien/ctrlp.vim">https://github.com/kien/ctrlp.vim</a>
</li>

<li>ctrlp.vim<br />
<a href="http://kien.github.io/ctrlp.vim/">http://kien.github.io/ctrlp.vim/</a>
</li>

<li>vim-signature<br />
<a href="https://github.com/kshenoy/vim-signature">https://github.com/kshenoy/vim-signature</a>
</li>

<li>Supertab<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1643">http://www.vim.org/scripts/script.php?script_id=1643</a>
</li>

<li>Supertab (GitHub)<br />
<a href="https://github.com/ervandew/supertab">https://github.com/ervandew/supertab</a>
</li>

<li>Vim Essential Plugin: NERD Tree<br />
<a href="http://code.tutsplus.com/tutorials/vim-essential-plugin-nerdtree--net-19692">http://code.tutsplus.com/tutorials/vim-essential-plugin-nerdtree--net-19692</a>
</li>

<li>The NERD tree : A tree explorer plugin for navigating the filesystem <br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=1658">http://vim.sourceforge.net/scripts/script.php?script_id=1658</a>
</li>

<li>NERD Tree Guide<br />
<a href="http://usevim.com/2012/07/18/nerdtree/">http://usevim.com/2012/07/18/nerdtree/</a>
</li>

<li>vcscommand.vim : CVS/SVN/SVK/git/hg/bzr integration plugin<br />
<a href="http://www.vim.org/scripts/script.php?script_id=90">http://www.vim.org/scripts/script.php?script_id=90</a>
</li>

<li>vcscommand na GitHubu<br />
<a href="https://github.com/vim-scripts/vcscommand.vim">https://github.com/vim-scripts/vcscommand.vim</a>
</li>

<li>Popis skriptu Vim Pathogen<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2332">http://www.vim.org/scripts/script.php?script_id=2332</a>
</li>

<li>Poslední­ verze skriptu Vim Pathogen<br />
<a href="https://tpo.pe/pathogen.vim">https://tpo.pe/pathogen.vim</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://vimawesome.com/">http://vimawesome.com/</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://www.vim.org/scripts/script_search_results.php?order_by=rating">http://www.vim.org/scripts/script_search_results.php?order_by=rating</a>
</li>

<li>Vim-airline na GitHubu<br />
<a href="https://github.com/bling/vim-airline">https://github.com/bling/vim-airline</a>
</li>

<li>Vim-airline na www.vim.org<br />
<a href="http://www.vim.org/scripts/download_script.php?src_id=22726">http://www.vim.org/scripts/download_script.php?src_id=22726</a>
</li>

<li>Vim-fugitive na GitHubu<br />
<a href="https://github.com/tpope/vim-fugitive">https://github.com/tpope/vim-fugitive</a>
</li>

<li>Vim-fugitive na www.vim.org<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2975">http://www.vim.org/scripts/script.php?script_id=2975</a>
</li>

<li>Textový editor Vim jako IDE (seriál)<br />
<a href="http://www.root.cz/clanky/textovy-editor-vim-jako-ide/">http://www.root.cz/clanky/textovy-editor-vim-jako-ide/</a>
</li>

<li>Building Vim<br />
<a href="http://vim.wikia.com/wiki/Building_Vim">http://vim.wikia.com/wiki/Building_Vim</a>
</li>

<li>Getting the Vim source with Mercurial<br />
<a href="http://vim.wikia.com/wiki/Getting_the_Vim_source_with_Mercurial">http://vim.wikia.com/wiki/Getting_the_Vim_source_with_Mercurial</a>
</li>

<li>Vim Perl Interface<br />
<a href="http://vim.dindinx.net/vim7/html/if_perl.txt.php">http://vim.dindinx.net/vim7/html/if_perl.txt.php</a>
</li>

<li>Vim Perl Support<br />
<a href="http://www.softpanorama.org/Editors/Vimorama/vim_perl_support.shtml">http://www.softpanorama.org/Editors/Vimorama/vim_perl_support.shtml</a>
</li>

<li>VIM as Python IDE<br />
<a href="http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/">http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/</a>
</li>

<li>Stack Overflow: VIM: Perl interface: passing a variable to Perl and reading a vim variable from Perl<br />
<a href="http://stackoverflow.com/questions/4999902/vim-perl-interface-passing-a-variable-to-perl-and-reading-a-vim-variable-from">http://stackoverflow.com/questions/4999902/vim-perl-interface-passing-a-variable-to-perl-and-reading-a-vim-variable-from</a>
</li>

<li>Stack Overflow: Getting started with vim scripting with Perl<br />
<a href="http://stackoverflow.com/questions/2208618/getting-started-with-vim-scripting-with-perl">http://stackoverflow.com/questions/2208618/getting-started-with-vim-scripting-with-perl</a>
</li>

<li>Python with a modular IDE (Vim)<br />
<a href="http://www.sontek.net/python-with-a-modular-ide-vim">http://www.sontek.net/python-with-a-modular-ide-vim</a>
</li>

<li>Getting to VIM's Python interface<br />
<a href="http://zerokspot.com/weblog/2009/02/21/getting-to-know-vims-python-interface/">http://zerokspot.com/weblog/2009/02/21/getting-to-know-vims-python-interface/</a>
</li>

<li>Pretty-formatting XML<br />
<a href="http://vim.wikia.com/wiki/Pretty-formatting_XML">http://vim.wikia.com/wiki/Pretty-formatting_XML</a>
</li>

<li>Delete a pair of XML/HTML tags<br />
<a href="http://vim.wikia.com/wiki/Delete_a_pair_of_XML/HTML_tags">http://vim.wikia.com/wiki/Delete_a_pair_of_XML/HTML_tags</a>
</li>

<li>Vim as XML Editor<br />
<a href="http://www.pinkjuice.com/howto/vimxml/">http://www.pinkjuice.com/howto/vimxml/</a>
</li>

<li>xmledit: A filetype plugin to help edit XML, HTML, and SGML documents<br />
<a href="http://www.vim.org/scripts/script.php?script_id=301">http://www.vim.org/scripts/script.php?script_id=301</a>
</li>

<li>Poslední vývojová verze makra xmledit<br />
<a href="http://github.com/sukima/xmledit/">http://github.com/sukima/xmledit/</a>
</li>

<li>vim.wikia: Display date-and-time on status line<br />
<a href="http://vim.wikia.com/wiki/Display_date-and-time_on_status_line">http://vim.wikia.com/wiki/Display_date-and-time_on_status_line</a>
</li>

<li>vim.wikia: Writing a valid statusline<br />
<a href="http://vim.wikia.com/wiki/Writing_a_valid_statusline">http://vim.wikia.com/wiki/Writing_a_valid_statusline</a>
</li>

<li>vim.wikia: Statusline tab level ruler<br />
<a href="http://vim.wikia.com/wiki/Statusline_tab_level_ruler">http://vim.wikia.com/wiki/Statusline_tab_level_ruler</a>
</li>

<li>vim.wikia: Switching between different statuslines<br />
<a href="http://vim.wikia.com/wiki/Switching_between_different_statuslines">http://vim.wikia.com/wiki/Switching_between_different_statuslines</a>
</li>

<li>X Selections, Cut Buffers, and Kill Rings<br />
<a href="http://www.jwz.org/doc/x-cut-and-paste.html">http://www.jwz.org/doc/x-cut-and-paste.html</a>
</li>

<li>Accessing the system clipboard<br />
<a href="http://vim.wikia.com/wiki/Accessing_the_system_clipboard">http://vim.wikia.com/wiki/Accessing_the_system_clipboard</a>
</li>

<li>xcutsel(1) - Linux man page<br />
<a href="http://linux.die.net/man/1/xcutsel">http://linux.die.net/man/1/xcutsel</a>
</li>

<li>snipMate : TextMate-style snippets for Vim<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2540">http://www.vim.org/scripts/script.php?script_id=2540</a>
</li>

<li>msanders / snipmate.vim<br />
<a href="https://github.com/msanders/snipmate.vim">https://github.com/msanders/snipmate.vim</a>
</li>

<li>snipMate.vim Introductory Screencast<br />
<a href="http://vimeo.com/3535418">http://vimeo.com/3535418</a>
</li>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Vim plugins for developers<br />
<a href="http://www.linuxtoday.com/upload/vim-plugins-for-developers-140619094010.html">http://www.linuxtoday.com/upload/vim-plugins-for-developers-140619094010.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

