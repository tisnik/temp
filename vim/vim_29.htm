<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba pluginů pro Vim s využitím programovacího jazyka Lua (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba pluginů pro Vim s využitím programovacího jazyka Lua (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o tvorbě pluginů pro textový editor Vim s využitím programovacího jazyka Lua dokončíme popis této zajímavé a užitečné problematiky. Zaměříme se především na popis dalších možností nabízených modulem vim, voláním funkcí naprogramovaných v jazyku Lua atd.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba pluginů pro Vim s&nbsp;využitím programovacího jazyka Lua (dokončení)</a></p>
<p><a href="#k02">2. Ukázka dalších možností příkazu <strong>luado</strong></a></p>
<p><a href="#k03">3. První demonstrační příklad: základní varianta náhrad mezer za znaky &lt;Tab&gt;</a></p>
<p><a href="#k04">4. Rozhraní pro manipulaci s&nbsp;buffery</a></p>
<p><a href="#k05">5. Druhý demonstrační příklad: přidání hlavičky se jménem uživatele na začátek souboru a patičky s&nbsp;datem vzniku na konec souboru</a></p>
<p><a href="#k06">6. Rozhraní pro základní manipulaci s&nbsp;okny</a></p>
<p><a href="#k07">7. Třetí demonstrační příklad: zakomentování aktuálního řádku</a></p>
<p><a href="#k08">8. Čtení aktuálního nastavení Vimu, bufferu či okna z&nbsp;Lua skriptu</a></p>
<p><a href="#k09">9. Čtvrtý demonstrační příklad: vylepšený způsob zakomentování aktuálního řádku</a></p>
<p><a href="#k10">10. Pátý demonstrační příklad: vylepšená varianta náhrad mezer za znaky &lt;Tab&gt;</a></p>
<p><a href="#k11">11. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k12">12. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba pluginů pro Vim s&nbsp;využitím programovacího jazyka Lua (dokončení)</h2>

<p><a
href="http://www.root.cz/clanky/tvorba-pluginu-pro-vim-s-vyuzitim-programovaciho-jazyka-lua/">V&nbsp;první
části</a> článku pojednávajícího o tvorbě přídavných modulů (pluginů) určených
pro textový editor <i>Vim</i> s&nbsp;využitím programovacího jazyka <i>Lua</i>
jsme si řekli, jakým způsobem je realizováno rozhraní mezi Vimem a Luou i jaké
základní příkazy je možné ve Vimu použít ve chvíli, kdy je nutné vyhodnotit
nějaký výraz naprogramovaný v&nbsp;jazyku Lua či kdy se má spustit nějaký
rozsáhlejší skript. Připomeňme si, že test, zda konkrétní instance Vimu
obsahuje rozhraní pro jazyk Lua či pro jiný podporovaný programovací jazyk, <a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/lang_test.vim">je
vlastně velmi jednoduchý</a>, protože je možné si nechat zobrazit výsledek
volání standardní vimovské funkce <strong>has()</strong>, které se předá jméno
vlastnosti, jejíž podporu chceme zjistit. Pokud je výsledkem volání funkce
<strong>has()</strong> jednička, je daná vlastnost podporována, pokud se vrátí
nula, vlastnosti podporována není (ve Vimu, resp.&nbsp;přesněji řečeno ve Vim
Scriptu se namísto pravdivostních hodnot true/false používají celá čísla,
podobně jako například v&nbsp;céčku, navíc se u jména vlastnosti ignoruje
velikost písmen):</p>

<pre>
:echo has("Lua")
</pre>

<p>Dále jsme si <a
href="http://www.root.cz/clanky/tvorba-pluginu-pro-vim-s-vyuzitim-programovaciho-jazyka-lua/">v&nbsp;předchozím
článku</a> řekli, že je možné relativně snadno zkombinovat Vim Script
s&nbsp;programovacím jazykem Lua, a to především pomocí příkazu
<strong>:lua</strong>, který lze použít jak pro <a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script1.vim">volání
jednotlivých příkazů</a> (řádek po řádku):</p>

<pre>
lua x = 6
lua y = 7
lua print("The Answer to the Ultimate Question of Life, the Universe, and Everything: " .. x*y)
</pre>

<p>tak i pro <a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script2.vim">spouštění
rozsáhlejších skriptů</a>, resp.&nbsp;přesněji řečeno bloků programového
kódu:</p>

<pre>
lua &lt;&lt; EOF
local x = 6
local y = 7
print("The Answer to the Ultimate Question of Life, the Universe, and Everything: " .. x*y)
EOF
</pre>

<p>Alternativně je též možné <a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script3.vim">použít
tečku jako implicitní ukončovač bloku kódu napsaného v&nbsp;jazyku Lua</a>
(v&nbsp;předchozím skriptu to byl identifikátor EOF):</p>

<pre>
lua &lt;&lt;
local x = 6
local y = 7
print("The Answer to the Ultimate Question of Life, the Universe, and Everything: " .. x*y)
.
<i>" ^ tecka na zacatku predchoziho radku</i>
</pre>

<p>Na závěr této kapitoly si ještě zrekapitulujme, které příkazy související
s&nbsp;konektorem zajišťujícím komunikaci mezi programovacím jazykem Lua a
Vimem, je možné z&nbsp;Vimu volat (v&nbsp;příkazovém režimu):</p>

<table>
<tr><th>#</th><th>Příkaz ve Vimu</th><th>Stručný popis příkazu</th></tr>
<tr><td>1</td><td>:lua</td><td>spuštění a vyhodnocení jednoho příkazu či bloku příkazů naprogramovaných v&nbsp;jazyku Lua</td></tr>
<tr><td>2</td><td>:luafile</td><td>spuštění celého skriptu naprogramovaného v&nbsp;jazyku Lua; parametrem tohoto příkazu je jméno souboru se skriptem</td></tr>
<tr><td>3</td><td>:luado</td><td>umožňuje spouštět vybraný příkaz jazyka Lua, který je automaticky a postupně (iterativně) volán pro všechny řádky/vybrané řádky v&nbsp;aktivním bufferu</td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Ukázka dalších možností příkazu <strong>luado</strong></h2>

<p>V&nbsp;tabulce zobrazené na konci <a href="#k01">předchozí kapitoly</a> je
napsáno, že příkaz <strong>:luado</strong> dokáže volat vybraný příkaz (napsaný
v&nbsp;Lue) pro všechny řádky v&nbsp;aktivním bufferu, či alternativně pro
vybrané řádky. Pojďme si tuto možnost otestovat na skriptu, v&nbsp;němž je
deklarována funkce nazvaná <strong>addLineNumber</strong>. Tato funkce se pro
každý řádek volá příkazem <strong>:luado</strong>, který této funkci předá dva
parametry &ndash; obsah textového řádku a jeho číslo. Návratová hodnota funkce
potom slouží k&nbsp;úpravě daného řádku v&nbsp;aktuálním bufferu:</p>

<pre>
<i>-- Demonstracni priklad s ukazkou pouziti prikazu luado</i>
<i>-- Pavel Tisnovsky 2016</i>
<i>--</i>
<i>-- Nacteni prikladu do Vimu se provede prikazem:</i>
<i>-- :luafile add_line_number.lua</i>
&nbsp;
&nbsp;
&nbsp;
<i>-- Funkce urcena pro pridani cisla radku na kazdy (vybrany)</i>
<i>-- radek v aktualnim bufferu</i>
<strong>function</strong> addLineNumber(line, linenr)
    <strong>return</strong> linenr .. " " .. line
<strong>end</strong>
&nbsp;
&nbsp;
&nbsp;
<i>-- Namapovani volani funkce na klavesovou zkratku ,c</i>
vim.command("map ,n :luado return addLineNumber(line, linenr)&lt;cr&gt;")
</pre>

<p>Poznámka: zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/add_line_number.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/add_line_number.lua</a>.</p>

<p>Vzhledem k&nbsp;tomu, že je volání příkazu <strong>:luado</strong>
namapováno pomocí <strong>map</strong> na klávesovou zkratku ,n, lze čísla
řádků do aktuálního bufferu přidat například takto:</p>

<table>
<tr><th>Příkaz</th><th>Význam</th></tr>
<tr><td>,n</td><td>čísla řádků se přidají do celého bufferu</td></tr>
<tr><td>:10,$:luado return addLineNumber(line, linenr)</td><td>přidání čísla řádků od desátého řádku do konce bufferu</td></tr>
<tr><td>:1,10:luado return addLineNumber(line, linenr)</td><td>přidání čísla řádků na prvních deset řádků</td></tr>
<tr><td>:1,.:luado return addLineNumber(line, linenr)</td><td>přidání čísla řádků od začátku bufferu až do aktuálního řádku</td></tr>
<tr><td>:1,.:luado return addLineNumber(line, linenr)</td><td>přidání čísla řádků od začátku bufferu až do aktuálního řádku</td></tr>
<tr><td>:.-1,.+1:luado return addLineNumber(line, linenr)</td><td>přidání čísla řádků pouze na tři sousední řádky</td></tr>
<tr><td>[visual],n</td><td>nejzajímavější možnost: přidání čísla řádků pouze na vybraný blok</td></tr>
</table>

<p>Podívejme se nyní, jak operace vypadá v&nbsp;praxi:</p>

<a href="http://www.root.cz/obrazek/234055/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-1-prev.png"  class="image-234055" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 1: Testovací soubor před spuštěním skriptu add_line_number.</i></p>

<a href="http://www.root.cz/obrazek/234056/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-2-prev.png"  class="image-234056" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 2: Čísla řádků jsou přidána do celého bufferu klávesovou zkratkou
<strong>,n</strong>.</i></p>

<a href="http://www.root.cz/obrazek/234057/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-3-prev.png"  class="image-234057" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 3: Výběr bloku.</i></p>

<a href="http://www.root.cz/obrazek/234058/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-4-prev.png"  class="image-234058" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 4: Čísla řádků byla po příkazu <strong>,n</strong> přidána pouze
do vybraného bloku.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. První demonstrační příklad: základní varianta náhrad mezer za znaky &lt;Tab&gt;</h2>

<p>Dnešní první demonstrační příklad může posloužit k&nbsp;doplnění již
existujícího příkazu <strong>:retab</strong>. Připomeňme si, že tento příkaz
dokáže převést znaky &lt;Tab&gt; na počet mezer určený konfigurační volbou
<strong>ts</strong> či <strong>tabstop</strong>, ovšem pouze v&nbsp;případě, že
je současně nastavena konfigurační volba <strong>expandtab</strong>. Zpětný
převod zajišťuje příkaz <strong>:retab!</strong> (s&nbsp;vykřičníkem na konci),
ovšem pouze pokud <i>není</i> nastavena volba <strong>expandtab</strong>.
Demonstrační příklad je velmi jednoduchý &ndash; dokáže nahradit čtyři mezery
(což je prozatím konstanta, <a href="#k10">níže</a> si příklad vylepšíme) za
znak &lt;Tab&gt;, a to nezávisle na nastavení Vimu:</p>

<pre>
<i>-- Demonstracni priklad s ukazkou pouziti prikazu luado</i>
<i>-- Pavel Tisnovsky 2016</i>
<i>--</i>
<i>-- Nacteni prikladu do Vimu se provede prikazem:</i>
<i>-- :luafile reretab1.lua</i>
&nbsp;
&nbsp;
&nbsp;
<i>-- Funkce urcena pro nahrazeni ctyr mezer znakem &lt;Tab&gt;</i>
<strong>function</strong> reretab(line, linenr)
    <strong>local</strong> tabstop = 4
    <strong>local</strong> spaces = string.rep(" ", tabstop)
    <i>-- nahrazeni mezer za znaky &lt;Tab&gt;</i>
    <strong>return</strong> string.gsub(line, spaces, "\t")
<strong>end</strong>
&nbsp;
&nbsp;
&nbsp;
<i>-- Namapovani volani funkce na klavesovou zkratku ,c</i>
vim.command("map ,r :luado return reretab(line, linenr)&lt;cr&gt;")
</pre>

<p>Poznámka: zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/reretab1.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/reretab1.lua</a>.</p>

<p>Poznámka 2: opět platí, že je možné provést náhradu pouze ve vybrané části
bufferu, přičemž pro výběr lze využít bloky, čísla řádků, vyhledávání atd.</p>

<p>Opět se podívejme na způsob použití, který je zde velmi jednoduchý:</p>

<a href="http://www.root.cz/obrazek/234059/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-5-prev.png"  class="image-234059" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 5: Původní zdrojový soubor, v&nbsp;němž se nepoužívají znaky
&lt;Tab&gt;.</i></p>

<a href="http://www.root.cz/obrazek/234060/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-6-prev.png"  class="image-234060" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 6: Po použití klávesové zkratky <strong>,r</strong> se zdánlivě
nic nestalo...</i></p>

<a href="http://www.root.cz/obrazek/234061/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-7-prev.png"  class="image-234061" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 7: Zadáním volby <strong>:set list</strong> je odhaleno, že
k&nbsp;náhradě skutečně došlo.</i></p>

<p>Otázka pro čtenáře: jakým způsobem byste upravili skript tak, aby došlo
k&nbsp;náhradě jen na začátku řádku a nikoli už ve zbytku zdrojového kódu?</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Rozhraní pro manipulaci s&nbsp;buffery</h2>

<p>Příkaz <strong>:luado</strong> sice může být v&nbsp;mnoha případech
užitečný, ovšem někdy je zapotřebí manipulovat s&nbsp;obsahem bufferu
sofistikovanějším způsobem. Zde přichází na řadu volání funkce
<strong>vim.buffer()</strong>, která vrátí objekt představující aktuální
buffer, popř.&nbsp;buffer, jehož jméno je této funkci předáno. Pro jednoduchost
prozatím uvažujme, že se funkci <strong>vim.buffer()</strong> nepředávají žádné
parametry a vrátí se tedy objekt představující aktuální buffer, který uložíme
do proměnné <strong>b</strong>. Tento objekt obsahuje několik vlastností a
přetížených operátorů:</p>

<table>
<tr><th>#</th><th>Vlastnost/operátor</th><th>Význam</th></tr>
<tr><td>1</td><td>#b</td><td>počet textových řádků v&nbsp;bufferu</td></tr>
<tr><td>2</td><td>b[n]</td><td>vrátí n-tý řádek jako string</td></tr>
<tr><td>3</td><td>b[n]="xxx"</td><td>nahradí obsah n-tého řádku novým obsahem</td></tr>
<tr><td>4</td><td>b.name</td><td>krátké jméno bufferu (nelze měnit)</td></tr>
<tr><td>5</td><td>b.fname</td><td>dlouhé jméno bufferu (taktéž nelze měnit)</td></tr>
<tr><td>6</td><td>b.number</td><td>číslo bufferu v&nbsp;seznamu (opět nelze měnit)</td></tr>
</table>

<p>Taktéž je k&nbsp;dispozici několik metod, které se v&nbsp;jazyce Lua volají
způsobem <strong>objekt:metoda</strong>, tedy s&nbsp;dvojtečkou (jde o pouhý
syntaktický cukr):</p>

<table>
<tr><th>#</th><th>Metoda</th><th>Význam</th></tr>
<tr><td>1</td><td>b:next()</td><td>vrátí další buffer v&nbsp;seznamu</td></tr>
<tr><td>2</td><td>b:previous()</td><td>vrátí předchozí buffer v&nbsp;seznamu</td></tr>
<tr><td>3</td><td>b:isvalid()</td><td>vrátí hodnotu <strong>true</strong> pro reálný Vim buffer</td></tr>
<tr><td>4</td><td>b:insert(text)</td><td>vložení nového řádku za konec bufferu</td></tr>
<tr><td>5</td><td>b:insert(text,0)</td><td>vložení nového řádku před začátek bufferu</td></tr>
<tr><td>6</td><td>b:insert(text,n)</td><td>vložení nového řádku na n-tou pozici (1..#b)</td></tr>
</table>

<p>Podívejme se nyní na některé možnosti, které nám nabízí vlastnosti a metody
objektu typu <strong>buffer</strong>. Jedná se skutečně pouze o demonstrační
příklady, jejichž užitečnost je mnohdy sporná, protože pro ně existuje
jednodušší ekvivalent přímo ve Vimu, ovšem při psaní delších skriptů se mohou
tyto příklady hodit:</p>

<p>Výpis počtu řádků v&nbsp;aktuálním bufferu:</p>

<pre>
:lua print(#vim.buffer())
</pre>

<p>Smazání prvního řádku v&nbsp;aktuálním bufferu:</p>

<pre>
:lua vim.buffer()[1]=nil
</pre>

<p>Smazání posledního řádku v&nbsp;aktuálním bufferu:</p>

<pre>
:lua vim.buffer()[#vim.buffer()]=nil
</pre>

<p>Výpis podrobnějších informací o bufferu (skript je nutné načíst příkazem
<strong>:luafile</strong>):</p>

<pre>
local b = vim.buffer()
print("Buffer info:")
print("Short name: " .. b.name)
print("Long name:  " .. b.fname)
print("Lines:      " .. #b)
print("Buffer #:   " .. b.number)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Druhý demonstrační příklad: přidání hlavičky se jménem uživatele na začátek souboru a patičky s&nbsp;datem vzniku na konec souboru</h2>

<p>Vzhledem k&nbsp;tomu, že skripty napsané v&nbsp;programovacím jazyku Lua
mohou využívat všechny standardní moduly, které jsou společně
s&nbsp;interpretrem Lua dodávány, můžeme funkce nabízené těmito moduly použít i
při manipulaci s&nbsp;buffery. V&nbsp;následujícím demonstračním příkladu se po
jeho zavolání příkazem <strong>:luafile insert_template.lua</strong> vloží na
začátek aktuálního bufferu informace o uživateli, který buffer edituje a na
konec bufferu se vloží aktuální datum, a to včetně (lokalizovaného) dne
v&nbsp;týdnu. Pro získání informace o uživateli se použije standardní funkce
<strong>os.getenv("USER")</strong>, zformátované datum vrací funkce
<strong>os.date("%Y-%m-%d (%A)"</strong>. Povšimněte si, že pro vložení nových
řádků na začátek (přesněji řečeno <i>před</i> začátek) bufferu se používá
metoda <strong>buffer:insert(řetězec, 0)</strong> a pro vložení na konec
(<i>za</i> konec) bufferu metoda <strong>buffer:insert(řetězec)</strong>, což
ostatně odpovídá informacím z&nbsp;předcházející kapitoly:</p>

<pre>
<i>-- Demonstracni priklad s ukazkou manipulace s bufferem:</i>
<i>-- vlozeni informaci na zacatek i na konec bufferu.</i>
<i>-- Pavel Tisnovsky 2016</i>
<i>--</i>
<i>-- Nacteni prikladu do Vimu se provede prikazem:</i>
<i>-- :luafile insert_template</i>
&nbsp;
&nbsp;
&nbsp;
<i>-- ziskame objekt predstavujici aktualni buffer</i>
local b = vim.buffer()
&nbsp;
&nbsp;
<i>-- pridani informaci na zacatek bufferu</i>
b:insert("-------------------------------", 0)
b:insert("Edited by: " .. os.getenv("USER"), 0)
b:insert("-------------------------------", 0)
&nbsp;
<i>-- pridani informaci na konec bufferu</i>
b:insert("Created at: " .. os.date("%Y-%m-%d (%A)"))
</pre>

<p>Poznámka: zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/insert_template.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/insert_template.lua</a>.</p>

<p>Otestování funkčnosti:</p>

<a href="http://www.root.cz/obrazek/234062/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-8-prev.png"  class="image-234062" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 8: Obsah bufferu před spuštěním skriptu.</i></p>

<a href="http://www.root.cz/obrazek/234063/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-9-prev.png"  class="image-234063" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 9: Obsah bufferu po spuštění skriptu (povšimněte si, že
programovací jazyk Lua a jeho funkce dodržují nastavení LOCALE).</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Rozhraní pro základní manipulaci s&nbsp;okny</h2>

<p>Podobně jako existuje objekt reprezentující buffer, který je získán funkcí
<strong>vim.buffer()</strong> je možné získat i objekt typu window přečtený
funkcí <strong>vim.window()</strong>. I u tohoto objektu máme k&nbsp;dispozici
několik atributů a metod. Předpokládejme, že výsledek volání funkce
<strong>vim.window()</strong> je uložen do proměnné <strong>o</strong>:</p>

<table>
<tr><th>#</th><th>Vlastnost/operátor</th><th>Význam</th></tr>
<tr><td>1</td><td>w.buffer</td><td>buffer asociovaný s&nbsp;oknem (nelze měnit)</td></tr>
<tr><td>2</td><td>w.line</td><td>řádek, na němž se nachází kurzor (lze měnit)</td></tr>
<tr><td>3</td><td>w.col</td><td>sloupec, na němž se nachází kurzor (lze měnit)</td></tr>
<tr><td>4</td><td>w.width</td><td>šířka okna reprezentovaná ve znacích (lze měnit, pokud to má význam)</td></tr>
<tr><td>5</td><td>w.height</td><td>výška okna reprezentovaná v&nbsp;řádcích (lze měnit, pokud to má význam)</td></tr>
</table>

<p>Příklad změny výšky okna na dvacet řádků:</p>

<pre>
lua vim.window().height=20
</pre>

<p>Výpis metod pro objekt <strong>w</strong>:</p>

<table>
<tr><th>#</th><th>Metoda</th><th>Význam</th></tr>
<tr><td>1</td><td>w:next()</td><td>vrátí další logicky navazující okno</td></tr>
<tr><td>2</td><td>w:previous()</td><td>vrátí předchozí logicky navazující okno</td></tr>
<tr><td>3</td><td>w:isvalid()</td><td>test, zda se jedná o reálné okno (Vim ještě okno udržuje)</td></tr>
</table>



<p><a name="k07"></a></p>
<h2 id="k07">7. Třetí demonstrační příklad: zakomentování aktuálního řádku</h2>

<p>Informace, se kterými jsme se seznámili v&nbsp;předchozích dvou kapitolách,
nyní využijeme v&nbsp;dalším demonstračním příkladu, v&nbsp;němž je
implementována funkce, která po svém zavolání zakomentuje ten řádek
v&nbsp;aktuálním bufferu, na němž se nachází textový kurzor. Pro zakomentování
byly (alespoň prozatím) zvoleny znaky //, což znamená, že příklad bude
kompatibilní například s&nbsp;programovacími jazyky C (od C99), C++, C#, Java
či JavaScript (pokryje tedy majoritu případů :-). Funkce pojmenovaná příhodně
<strong>commentLine</strong> nejprve získá referenci na aktuální buffer,
posléze referenci na okno spojené s&nbsp;tímto bufferem a nakonec
s&nbsp;využitím těchto informací získá obsah toho řádku v&nbsp;bufferu, na němž
se nachází textový kurzor. Následně se s&nbsp;využitím běžných řetězcových
operací programovacího jazyka Lua vytvoří nový obsah tohoto řádku a posledním
příkazem se modifikuje obsah aktuálního bufferu. Volání funkce
<strong>commentLine</strong> je namapováno na klávesovou zkratku
<strong>,c</strong> (což lze samozřejmě snadno změnit):</p>

<pre>
<i>-- Demonstracni priklad s ukazkou manipulace s okny a buffery.</i>
<i>-- Pavel Tisnovsky 2016</i>
<i>--</i>
<i>-- Nacteni prikladu do Vimu se provede prikazem:</i>
<i>-- :luafile comment_line_1.lua</i>
&nbsp;
&nbsp;
&nbsp;
<i>-- Funkce urcena pro zakomentovani aktualniho radku</i>
<i>-- (bez detekce pouziteho programovaciho jazyka)</i>
<strong>function</strong> commentLine()
    <i>-- ziskame objekt predstavujici aktualni buffer</i>
    <strong>local</strong> buffer = vim.buffer()
    <i>-- ziskame objekt predstavujici aktualni okno a z nej</i>
    <i>-- vycteme cislo radku, na nemz se nachazi textovy kurzor</i>
    <strong>local</strong> lineNumber = vim.window().line
    <i>-- precteni puvodniho obsahu radku v bufferu</i>
    <strong>local</strong> line = buffer[lineNumber]
    print("Changing the line #" .. lineNumber .. ": " .. line)
    line = "// " .. line
    <i>-- modifikace radku v bufferu</i>
    buffer[lineNumber] = line
<strong>end</strong>
&nbsp;
&nbsp;
&nbsp;
<i>-- Namapovani volani funkce na klavesovou zkratku ,c</i>
vim.command("map ,c <strong>:lua</strong> commentLine()&lt;cr&gt;")
</pre>

<p>Poznámka: zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/comment_line_1.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/comment_line_1.lua</a>.</p>

<a href="http://www.root.cz/obrazek/234064/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-10-prev.png"  class="image-234064" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 10: Původní obsah bufferu.</i></p>

<a href="http://www.root.cz/obrazek/234065/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-11-prev.png"  class="image-234065" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 11: Zakomentování některých řádků po stisku klávesové zkratky
<strong>,c</strong>.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Čtení aktuálního nastavení Vimu, bufferu či okna z&nbsp;Lua skriptu</h2>

<p>V&nbsp;mnoha skriptech je nutné nějakým způsobem zjistit aktuální nastavení
celého Vimu, nastavení namapovaná pro aktuální buffer či nastavení namapovaná
pro aktuální okno. Připomeňme si, že konfigurační volby se nastavují příkazem
<strong>:set</strong>, a to následujícím způsobem:</p>

<pre>
:set volba=hodnota
</pre>

<p>Poněkud komplikovanější je přečtení konfigurační volby. Ve Vim Scriptu
k&nbsp;tomu slouží znak &amp;, což znamená, že lze například napsat:</p>

<pre>
:echo &amp;syntax
:echo &amp;fileencoding
:echo &amp;fileformat
:echo &amp;lines
</pre>

<p>Ve skriptech napsaných v&nbsp;programovacím jazyce Lua se musíme spokojit
s&nbsp;použitím funkce <strong>vim.eval()</strong>, které se předá jakýkoli
výraz Vim Scriptu, který se spustí, vyhodnotí a jeho výsledek se vrátí zpět.
Lze tedy například napsat:</p>

<pre>
:lua print(vim.eval("fileformat"))
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Čtvrtý demonstrační příklad: vylepšený způsob zakomentování aktuálního řádku</h2>

<p>Demonstrační příklad pro zakomentování aktuálního řádku, s&nbsp;nímž jsme se
seznámili <a href="#k07">v&nbsp;sedmé kapitole</a>, je možné vylepšit, a to
takovým způsobem, že se na základě detekce programovacího jazyka použitého
v&nbsp;aktuálně otevřeném bufferu použijí korektní znaky pro komentáře. Jak je
však možné detekovat použitý programovací jazyk? Možností je více, ovšem
pravděpodobně nejjednodušší bude přečtení nastavení konfigurační volby
<strong>syntax</strong>, protože právě na základě této volby se textový editor
Vim rozhodne, jakým způsobem se má obarvit obsah bufferu. Detekce syntaxe
realizovaná Vimem (resp.&nbsp;přesněji řečeno skripty, které jsou součástí
Vimu), sice není stoprocentní, ale pro naše účely a pro vybrané programovací
jazyky je více než dostačující. Přečtení konfigurační volby
<strong>syntax</strong> se v&nbsp;jazyku Lua provede příkazem:</p>

<pre>
<strong>local</strong> selectedSyntax = vim.eval("&amp;syntax")
</pre>

<p>Na základě získané hodnoty se pak vybere vhodný znak či znaky použité pro
jednořádkové komentáře z&nbsp;této tabulky:</p>

<table>
<tr><th> #</th><th>Hodnota <strong>syntax</strong></th><th>Programovací jazyk</th><th>Komentář začíná</th></tr>
<tr><td> 1</td><td>lua       </td><td>Lua</td><td>--</td></tr>
<tr><td> 2</td><td>c         </td><td>C</td><td>//</td></tr>
<tr><td> 3</td><td>cpp       </td><td>C++</td><td>//</td></tr>
<tr><td> 4</td><td>java      </td><td>Java</td><td>//</td></tr>
<tr><td> 5</td><td>javascript</td><td>JavaScript</td><td>//</td></tr>
<tr><td> 6</td><td>vim       </td><td>Vim Script</td><td>"</td></tr>
<tr><td> 7</td><td>clojure   </td><td>Clojure</td><td>;</td></tr>
<tr><td> 8</td><td>sh        </td><td>Sh, BASH, ...</td><td>#"</td></tr>
<tr><td> 9</td><td>python    </td><td>Python</td><td>#"</td></tr>
<tr><td>10</td><td>basic     </td><td>BASIC</td><td>REM</td></tr>
</table>

<p>Následuje výpis úplného zdrojového kódu demonstračního příkladu:</p>

<pre>
<i>-- Demonstracni priklad s ukazkou manipulace s okny a buffery</i>
<i>-- i se ctenim aktualniho nastaveni</i>
<i>-- Pavel Tisnovsky 2016</i>
<i>--</i>
<i>-- Nacteni prikladu do Vimu se provede prikazem:</i>
<i>-- :luafile comment_line_2.lua</i>
&nbsp;
&nbsp;
&nbsp;
<i>-- Funkce vracejici znaky urcene pro zakomentovani radku.</i>
<i>-- O ktere znaky se jedna, se zjisti na zaklade konfiguracni volby</i>
<i>-- "syntax"</i>
<strong>function</strong> getCommentChars()
    <strong>local</strong> languages = {
        lua        = "--",
        c          = "//",
        cpp        = "//",
        java       = "//",
        javascript = "//",
        vim        = "\"",
        clojure    = ";",
        sh         = "#",
        python     = "#",
        basic      = "REM"}
    <i>-- ziskani informace o aktualne nastavene syntaxi</i>
    <strong>local</strong> selectedSyntax = vim.eval("&amp;syntax")
    <i>-- vraceni znaku z tabulky (popr. vraceni nil ve chvili,</i>
    <i>-- kdy je syntaxe neznama)</i>
    <strong>return</strong> languages[selectedSyntax]
<strong>end</strong>
&nbsp;
&nbsp;
&nbsp;
<i>-- Funkce pro zakomentovani aktualniho radku</i>
<strong>function</strong> commentLine()
    <i>-- ziskame objekt predstavujici aktualni buffer</i>
    <strong>local</strong> buffer = vim.buffer()
    <i>-- ziskame objekt predstavujici aktualni okno a z nej</i>
    <i>-- vycteme cislo radku, na nemz se nachazi textovy kurzor</i>
    <strong>local</strong> lineNumber = vim.window().line
    <i>-- precteni puvodniho obsahu radku v bufferu</i>
    <strong>local</strong> line = buffer[lineNumber]
    <strong>local</strong> commentChars = getCommentChars()
&nbsp;
    <i>-- pokud je znama syntaxe, provede se zakomentovani</i>
    <strong>if</strong> commentChars <strong>then</strong>
        print("Changing the line #" .. lineNumber .. ": " .. line)
        line = commentChars .. " " .. line
        <i>-- modifikace radku v bufferu</i>
        buffer[lineNumber] = line
    <strong>end</strong>
<strong>end</strong>
&nbsp;
&nbsp;
&nbsp;
<i>-- Namapovani volani funkce na klavesovou zkratku ,c</i>
vim.command("map ,c <strong>:lua</strong> commentLine()&lt;cr&gt;")
</pre>

<p>Poznámka: zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/comment_line_2.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/comment_line_2.lua</a>.</p>

<p>Příklady použití:</p>

<a href="http://www.root.cz/obrazek/234066/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-12-prev.png"  class="image-234066" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 12: Zdrojový kód psaný v&nbsp;Clojure před zakomentováním řádků.</i></p>

<a href="http://www.root.cz/obrazek/234067/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-13-prev.png"  class="image-234067" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 13: Zdrojový kód psaný v&nbsp;Clojure po zakomentování řádků.</i></p>

<a href="http://www.root.cz/obrazek/234068/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-14-prev.png"  class="image-234068" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 14: Zdrojový kód psaný v&nbsp;C před zakomentováním řádků.</i></p>

<a href="http://www.root.cz/obrazek/234069/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-15-prev.png"  class="image-234069" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 15: Zdrojový kód psaný v&nbsp;C po zakomentování řádků.</i></p>

<a href="http://www.root.cz/obrazek/234070/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-16-prev.png"  class="image-234070" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 16: Zdrojový kód psaný v&nbsp;Pythonu před zakomentováním řádků.</i></p>

<a href="http://www.root.cz/obrazek/234071/"><img src="http://i.iinfo.cz/images/196/vim-lua-2-17-prev.png" class="image-234071" width="370" height="241" alt="&#160;" /></a>
<p><i>Obrázek 17: Zdrojový kód psaný v&nbsp;Pythonu po zakomentování řádků.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Pátý demonstrační příklad: vylepšená varianta náhrad mezer za znaky &lt;Tab&gt;</h2>

<p>V&nbsp;dnešním pátém a současně i posledním demonstračním příkladu poněkud
vylepšíme již popsaný příklad <strong>reretab1.lua</strong>. Vylepšení (i když
ve skutečnosti jen velmi malé) spočívá v&nbsp;tom, že se za znaky &lt;Tab&gt;
nenahrazují vždy čtyři sousední mezery, ale tolik mezer, kolik si uživatel
nastavil v&nbsp;konfigurační volbě <strong>tabstop</strong> příkazem:</p>

<pre>
:set tabstop=počet_mezer
</pre>

<p>či zkráceně jen:

<pre>
:set ts=počet_mezer
</pre>

<p>Pro přečtení numerické hodnoty uložené v&nbsp;této konfigurační volbě se
používá volání funkce <strong>vim.eval()</strong>, s&nbsp;níž jsme se již
seznámili:</p>

<pre>
vim.eval("&amp;ts")
</pre>

<p>Vzhledem k&nbsp;tomu, že se nahrazení může provést na všech řádcích
aktivního bufferu, lze pro zavolání skriptu použít příkaz
<strong>:luado</strong>, což je zajištěno mapováním:</p>

<pre>
vim.command("map ,r :luado return reretab(line, linenr)&lt;cr&gt;")
</pre>

<p>Následuje výpis zdrojového kódu tohoto demonstračního příkladu:</p>

<pre>
<i>-- Demonstracni priklad s ukazkou pouziti prikazu luado</i>
<i>-- Pavel Tisnovsky 2016</i>
<i>--</i>
<i>-- Nacteni prikladu do Vimu se provede prikazem:</i>
<i>-- :luafile reretab2.lua</i>
&nbsp;
&nbsp;
&nbsp;
<i>-- Funkce urcena pro nahrazeni mezer znakem &lt;Tab&gt;</i>
<strong>function</strong> reretab(line, linenr)
    <i>-- volba tabstob ci ts obsahuje pocet mezer</i>
    <strong>local</strong> tabstop = vim.eval("&amp;ts")
    <strong>local</strong> spaces = string.rep(" ", tabstop)
    <i>-- nahrazeni mezer za znaky &lt;Tab&gt;</i>
    <strong>return</strong> string.gsub(line, spaces, "\t")
<strong>end</strong>
&nbsp;
&nbsp;
&nbsp;
<i>-- Namapovani volani funkce na klavesovou zkratku ,c</i>
vim.command("map ,r :luado return reretab(line, linenr)&lt;cr&gt;")
</pre>

<p>Poznámka: zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/reretab2.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/reretab2.lua</a>.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady, s&nbsp;nimiž jsme se v&nbsp;dnešním článku
seznámili, byly, podobně jako v&nbsp;předchozích částech tohoto seriálu,
uloženy do Git repositáře umístěného na GitHubu (<a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>):</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Zdrojový kód</th></tr>
<tr><td>1</td><td>add_line_number.lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/add_line_number.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/add_line_number.lua</a></td></tr>
<tr><td>2</td><td>buffer_info.lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/buffer_info.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/buffer_info.lua</a></td></tr>
<tr><td>3</td><td>comment_line_1.lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/comment_line_1.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/comment_line_1.lua</a></td></tr>
<tr><td>4</td><td>comment_line_2.lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/comment_line_2.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/comment_line_2.lua</a></td></tr>
<tr><td>5</td><td>insert_teplate.lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/insert_template.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/insert_template.lua</a></td></tr>
<tr><td>6</td><td>reretab1.lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/reretab1.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/reretab1.lua</a></td></tr>
<tr><td>7</td><td>reretab2.lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/reretab2.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/reretab2.lua</a></td></tr>
</table>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odkazy na Internetu</h2>

<ol>

<li>Seriál o programovacím jazyku Lua<br />
<a href="http://www.root.cz/serialy/programovaci-jazyk-lua/">http://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Lua (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Lua_(programming_language)">http://en.wikipedia.org/wiki/Lua_(programming_language)</a>
</li>

<li>Lua 5.2 sources<br />
<a href="http://www.lua.org/source/5.2/">http://www.lua.org/source/5.2/</a>
</li>

<li>Pyclewn installation notes<br />
<a href="http://pyclewn.sourceforge.net/install.html">http://pyclewn.sourceforge.net/install.html</a>
</li>

<li>pip Installation<br />
<a href="https://pip.pypa.io/en/latest/installing.html">https://pip.pypa.io/en/latest/installing.html</a>
</li>

<li>Clewn<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>Clewn installation<br />
<a href="http://clewn.sourceforge.net/install.html">http://clewn.sourceforge.net/install.html</a>
</li>

<li>Clewn - soubory<br />
<a href="http://sourceforge.net/projects/clewn/files/OldFiles/">http://sourceforge.net/projects/clewn/files/OldFiles/</a>
</li>

<li>Writing Vim Plugins<br />
<a href="http://stevelosh.com/blog/2011/09/writing-vim-plugins/">http://stevelosh.com/blog/2011/09/writing-vim-plugins/</a>
</li>

<li>how to understand this vim script?<br />
<a href="http://stackoverflow.com/questions/12625091/how-to-understand-this-vim-script">http://stackoverflow.com/questions/12625091/how-to-understand-this-vim-script</a>
</li>

<li>Novinky ve VIM 7: Skriptovací­ jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>DirDiff.vim : A plugin to diff and merge two directories recursively.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=102">http://www.vim.org/scripts/script.php?script_id=102</a>
</li>

<li>vim-dirdiff na GitHubu<br />
<a href="https://github.com/will133/vim-dirdiff">https://github.com/will133/vim-dirdiff</a>
</li>

<li>fakeclip : pseudo clipboard register for non-GUI version of Vim<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2098">http://www.vim.org/scripts/script.php?script_id=2098</a>
</li>

<li>vim-fakeclip na GitHubu<br />
<a href="https://github.com/kana/vim-fakeclip">https://github.com/kana/vim-fakeclip</a>
</li>

<li>vim-fakeclip: Dokumentace<br />
<a href="http://kana.github.io/config/vim/fakeclip.html">http://kana.github.io/config/vim/fakeclip.html</a>
</li>

<li>Vim Multiple Cursors na GitHubu<br />
<a href="https://github.com/terryma/vim-multiple-cursors">https://github.com/terryma/vim-multiple-cursors</a>
</li>

<li>SLIME (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/SLIME">http://en.wikipedia.org/wiki/SLIME</a>
</li>

<li>vim-slime na GitHubu<br />
<a href="https://github.com/jpalardy/vim-slime">https://github.com/jpalardy/vim-slime</a>
</li>

<li>vi Editor Commands<br />
<a href="http://www.cs.rit.edu/~cslab/vi.html#A1.4">http://www.cs.rit.edu/~cslab/vi.html#A1.4</a>
</li>

<li>vi Manual<br />
<a href="http://www.cs.fsu.edu/general/vimanual.html">http://www.cs.fsu.edu/general/vimanual.html</a>
</li>

<li>Mastering the Vi Editor<br />
<a href="http://www.susnet.uk/mastering-the-vi-editor">http://www.susnet.uk/mastering-the-vi-editor</a>
</li>

<li>Using undo branches<br />
<a href="http://vim.wikia.com/wiki/Using_undo_branches">http://vim.wikia.com/wiki/Using_undo_branches</a>
</li>

<li>Gundo<br />
<a href="http://sjl.bitbucket.org/gundo.vim/">http://sjl.bitbucket.org/gundo.vim/</a>
</li>

<li>Vim as a Python IDE, or Python IDE as Vim<br />
<a href="http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/">http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/</a>
</li>

<li>histwin na GitHubu<br />
<a href="https://github.com/chrisbra/histwin.vim">https://github.com/chrisbra/histwin.vim</a>
</li>

<li>histwin.vim : Browse the undo tree<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2932">http://www.vim.org/scripts/script.php?script_id=2932</a>
</li>

<li>undotree.vim : Display your undo history in a graph<br />
<a href="http://www.vim.org/scripts/script.php?script_id=4177">http://www.vim.org/scripts/script.php?script_id=4177</a>
</li>

<li>Surround<br />
<a href="http://www.bestofvim.com/plugin/surround/">http://www.bestofvim.com/plugin/surround/</a>
</li>

<li>SnipMate<br />
<a href="http://www.bestofvim.com/plugin/snipmate/">http://www.bestofvim.com/plugin/snipmate/</a>
</li>

<li>Getting a Clojure REPL in Vim With VimClojure, Nailgun, and Leiningen<br />
<a href="http://naleid.com/blog/2011/12/19/getting-a-clojure-repl-in-vim-with-vimclojure-nailgun-and-leiningen/">http://naleid.com/blog/2011/12/19/getting-a-clojure-repl-in-vim-with-vimclojure-nailgun-and-leiningen/</a>
</li>

<li>The NERD Commenter : A plugin that allows for easy commenting of code for many filetypes.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1218">http://www.vim.org/scripts/script.php?script_id=1218</a>
</li>

<li>NERD Commenter na GitHubu<br />
<a href="https://github.com/scrooloose/nerdcommenter">https://github.com/scrooloose/nerdcommenter</a>
</li>

<li>luarefvim : Lua reference manual<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1291">http://www.vim.org/scripts/script.php?script_id=1291</a>
</li>

<li>lua.vim : Lua file type plug-in for the Vim text editor<br />
<a href="http://www.vim.org/scripts/script.php?script_id=3625">http://www.vim.org/scripts/script.php?script_id=3625</a>
</li>

<li>vim-lua-ftplugin<br />
<a href="https://github.com/xolox/vim-lua-ftplugin">https://github.com/xolox/vim-lua-ftplugin</a>
</li>

<li>Vi Improved<br />
<a href="https://wiki.python.org/moin/Vim">https://wiki.python.org/moin/Vim</a>
</li>

<li>javacomplete : Omni Completion for JAVA<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1785">http://www.vim.org/scripts/script.php?script_id=1785</a>
</li>

<li>SearchComplete<br />
<a href="http://www.vim.org/scripts/script.php?script_id=474">http://www.vim.org/scripts/script.php?script_id=474</a>
</li>

<li>ShowMarks<br />
<a href="http://www.vim.org/scripts/script.php?script_id=152">http://www.vim.org/scripts/script.php?script_id=152</a>
</li>

<li>ctrlp.vim<br />
<a href="https://github.com/kien/ctrlp.vim">https://github.com/kien/ctrlp.vim</a>
</li>

<li>ctrlp.vim<br />
<a href="http://kien.github.io/ctrlp.vim/">http://kien.github.io/ctrlp.vim/</a>
</li>

<li>vim-signature<br />
<a href="https://github.com/kshenoy/vim-signature">https://github.com/kshenoy/vim-signature</a>
</li>

<li>Supertab<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1643">http://www.vim.org/scripts/script.php?script_id=1643</a>
</li>

<li>Supertab (GitHub)<br />
<a href="https://github.com/ervandew/supertab">https://github.com/ervandew/supertab</a>
</li>

<li>Vim Essential Plugin: NERD Tree<br />
<a href="http://code.tutsplus.com/tutorials/vim-essential-plugin-nerdtree--net-19692">http://code.tutsplus.com/tutorials/vim-essential-plugin-nerdtree--net-19692</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem <br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=1658">http://vim.sourceforge.net/scripts/script.php?script_id=1658</a>
</li>

<li>NERD Tree Guide<br />
<a href="http://usevim.com/2012/07/18/nerdtree/">http://usevim.com/2012/07/18/nerdtree/</a>
</li>

<li>vcscommand.vim : CVS/SVN/SVK/git/hg/bzr integration plugin<br />
<a href="http://www.vim.org/scripts/script.php?script_id=90">http://www.vim.org/scripts/script.php?script_id=90</a>
</li>

<li>vcscommand na GitHubu<br />
<a href="https://github.com/vim-scripts/vcscommand.vim">https://github.com/vim-scripts/vcscommand.vim</a>
</li>

<li>Popis skriptu Vim Pathogen<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2332">http://www.vim.org/scripts/script.php?script_id=2332</a>
</li>

<li>Poslední­verze skriptu Vim Pathogen<br />
<a href="https://tpo.pe/pathogen.vim">https://tpo.pe/pathogen.vim</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://vimawesome.com/">http://vimawesome.com/</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://www.vim.org/scripts/script_search_results.php?order_by=rating">http://www.vim.org/scripts/script_search_results.php?order_by=rating</a>
</li>

<li>Vim-airline na GitHubu<br />
<a href="https://github.com/bling/vim-airline">https://github.com/bling/vim-airline</a>
</li>

<li>Vim-airline na www.vim.org<br />
<a href="http://www.vim.org/scripts/download_script.php?src_id=22726">http://www.vim.org/scripts/download_script.php?src_id=22726</a>
</li>

<li>Vim-fugitive na GitHubu<br />
<a href="https://github.com/tpope/vim-fugitive">https://github.com/tpope/vim-fugitive</a>
</li>

<li>Vim-fugitive na www.vim.org<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2975">http://www.vim.org/scripts/script.php?script_id=2975</a>
</li>

<li>Textový editor Vim jako IDE (seriál)<br />
<a href="http://www.root.cz/clanky/textovy-editor-vim-jako-ide/">http://www.root.cz/clanky/textovy-editor-vim-jako-ide/</a>
</li>

<li>Building Vim<br />
<a href="http://vim.wikia.com/wiki/Building_Vim">http://vim.wikia.com/wiki/Building_Vim</a>
</li>

<li>Getting the Vim source with Mercurial<br />
<a href="http://vim.wikia.com/wiki/Getting_the_Vim_source_with_Mercurial">http://vim.wikia.com/wiki/Getting_the_Vim_source_with_Mercurial</a>
</li>

<li>Vim Perl Interface<br />
<a href="http://vim.dindinx.net/vim7/html/if_perl.txt.php">http://vim.dindinx.net/vim7/html/if_perl.txt.php</a>
</li>

<li>Vim Perl Support<br />
<a href="http://www.softpanorama.org/Editors/Vimorama/vim_perl_support.shtml">http://www.softpanorama.org/Editors/Vimorama/vim_perl_support.shtml</a>
</li>

<li>VIM as Python IDE<br />
<a href="http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/">http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/</a>
</li>

<li>Stack Overflow: VIM: Perl interface: passing a variable to Perl and reading a vim variable from Perl<br />
<a href="http://stackoverflow.com/questions/4999902/vim-perl-interface-passing-a-variable-to-perl-and-reading-a-vim-variable-from">http://stackoverflow.com/questions/4999902/vim-perl-interface-passing-a-variable-to-perl-and-reading-a-vim-variable-from</a>
</li>

<li>Stack Overflow: Getting started with vim scripting with Perl<br />
<a href="http://stackoverflow.com/questions/2208618/getting-started-with-vim-scripting-with-perl">http://stackoverflow.com/questions/2208618/getting-started-with-vim-scripting-with-perl</a>
</li>

<li>Python with a modular IDE (Vim)<br />
<a href="http://www.sontek.net/python-with-a-modular-ide-vim">http://www.sontek.net/python-with-a-modular-ide-vim</a>
</li>

<li>Getting to VIM's Python interface<br />
<a href="http://zerokspot.com/weblog/2009/02/21/getting-to-know-vims-python-interface/">http://zerokspot.com/weblog/2009/02/21/getting-to-know-vims-python-interface/</a>
</li>

<li>Pretty-formatting XML<br />
<a href="http://vim.wikia.com/wiki/Pretty-formatting_XML">http://vim.wikia.com/wiki/Pretty-formatting_XML</a>
</li>

<li>Delete a pair of XML/HTML tags<br />
<a href="http://vim.wikia.com/wiki/Delete_a_pair_of_XML/HTML_tags">http://vim.wikia.com/wiki/Delete_a_pair_of_XML/HTML_tags</a>
</li>

<li>Vim as XML Editor<br />
<a href="http://www.pinkjuice.com/howto/vimxml/">http://www.pinkjuice.com/howto/vimxml/</a>
</li>

<li>xmledit: A filetype plugin to help edit XML, HTML, and SGML documents<br />
<a href="http://www.vim.org/scripts/script.php?script_id=301">http://www.vim.org/scripts/script.php?script_id=301</a>
</li>

<li>Poslední vývojová verze makra xmledit<br />
<a href="http://github.com/sukima/xmledit/">http://github.com/sukima/xmledit/</a>
</li>

<li>vim.wikia: Display date-and-time on status line<br />
<a href="http://vim.wikia.com/wiki/Display_date-and-time_on_status_line">http://vim.wikia.com/wiki/Display_date-and-time_on_status_line</a>
</li>

<li>vim.wikia: Writing a valid statusline<br />
<a href="http://vim.wikia.com/wiki/Writing_a_valid_statusline">http://vim.wikia.com/wiki/Writing_a_valid_statusline</a>
</li>

<li>vim.wikia: Statusline tab level ruler<br />
<a href="http://vim.wikia.com/wiki/Statusline_tab_level_ruler">http://vim.wikia.com/wiki/Statusline_tab_level_ruler</a>
</li>

<li>vim.wikia: Switching between different statuslines<br />
<a href="http://vim.wikia.com/wiki/Switching_between_different_statuslines">http://vim.wikia.com/wiki/Switching_between_different_statuslines</a>
</li>

<li>X Selections, Cut Buffers, and Kill Rings<br />
<a href="http://www.jwz.org/doc/x-cut-and-paste.html">http://www.jwz.org/doc/x-cut-and-paste.html</a>
</li>

<li>Accessing the system clipboard<br />
<a href="http://vim.wikia.com/wiki/Accessing_the_system_clipboard">http://vim.wikia.com/wiki/Accessing_the_system_clipboard</a>
</li>

<li>xcutsel(1) - Linux man page<br />
<a href="http://linux.die.net/man/1/xcutsel">http://linux.die.net/man/1/xcutsel</a>
</li>

<li>snipMate : TextMate-style snippets for Vim<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2540">http://www.vim.org/scripts/script.php?script_id=2540</a>
</li>

<li>msanders / snipmate.vim<br />
<a href="https://github.com/msanders/snipmate.vim">https://github.com/msanders/snipmate.vim</a>
</li>

<li>snipMate.vim Introductory Screencast<br />
<a href="http://vimeo.com/3535418">http://vimeo.com/3535418</a>
</li>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Vim plugins for developers<br />
<a href="http://www.linuxtoday.com/upload/vim-plugins-for-developers-140619094010.html">http://www.linuxtoday.com/upload/vim-plugins-for-developers-140619094010.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2016</small></p>
</body>
</html>

