<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba pluginů pro Vim s využitím programovacího jazyka Lua</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba pluginů pro Vim s využitím programovacího jazyka Lua</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Textový editor Vim je oblíbený mj. i díky dostupnosti poměrně velkého množství pluginů (přídavných modulů). Tyto pluginy je možné vytvářet s využitím Vim Scriptu, což je skriptovací jazyk, který je přímo součástí Vimu. Ovšem pro složitější a rozsáhlejší pluginy lze použít i některé další skriptovací jazyky, mezi něž se zařadila i Lua.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba pluginů pro Vim s&nbsp;využitím programovacího jazyka Lua</a></p>
<p><a href="#k02">2. Interaktivní test, zda Vim obsahuje konektor pro zvolený programovací jazyk</a></p>
<p><a href="#k03">3. Test existence rozhraní pro vybraný skriptovací jazyk přímo ve Vim Scriptu</a></p>
<p><a href="#k04">4. Základní rozhraní pro využití programovacího jazyka Lua</a></p>
<p><a href="#k05">5. Příkaz <strong>luafile</strong></a></p>
<p><a href="#k06">6. Příkaz <strong>luado</strong></a></p>
<p><a href="#k07">7. Modul <strong>vim</strong> využitelný z&nbsp;programovacího jazyka Lua</a></p>
<p><a href="#k08">8. Praktický příklad: přepis promítačky slajdů z&nbsp;Vim Scriptu do jazyka Lua</a></p>
<p><a href="#k09">9. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k10">10. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba pluginů pro Vim s&nbsp;využitím programovacího jazyka Lua</h2>

<p>V&nbsp;seriálu o <a
href="http://www.root.cz/serialy/textovy-editor-vim-jako-ide/">textovém editoru
Vim</a> jsme se již seznámili s&nbsp;některými způsoby tvorby pluginů
(přídavných modulů) pro tento textový editor. Připomeňme si, že primárním
programovacím jazykem pro tvorbu jednoduchých několikařádkových pomocných
nástrojů ale i rozsáhlých pluginů je stále interní skriptovací jazyk nazývaný
<i>Vim script</i>, <i>vimscript</i> či pouze <i>viml</i>. Tento imperativní
programovací jazyk je přímo součástí samotného textového editoru, což lze
samozřejmě považovat za výhodu (ostatně i samotné konfigurační soubory jsou
psané v&nbsp;tomto jazyce).  Díky tomu, že <i>Vim script</i> je zabudován přímo
do Vimu, mohou uživatelské skripty využívat přístup jak ke všem globálním i
lokálním konfiguračním parametrům Vimu, tak i k&nbsp;obsahu jednotlivých
bufferů, které samozřejmě mohou být těmito skripty modifikovány (mnoho skriptů
taktéž využívá vlastní buffery se speciálním obsahem, příkladem mohou být
například pluginy <i>histwin</i> či <i>undotree</i>, které ve speciálních
bufferech zobrazují historii editace dokumentů.</p>

<a href="http://www.root.cz/obrazek/205056/"><img src="http://i.iinfo.cz/images/597/vim-6-16-prev.png" class="image-205056" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 1: Příklad pluginu, který používá vlastní buffer pro zobrazení
svého (textového) uživatelského rozhraní &ndash; takto vypadá okno pluginu
nazvaného &bdquo;histwin&ldquo; ve chvíli, kdy se již k&nbsp;bufferu
zaznamenalo několik operací.</i></p>

<p>I přes poměrně rozsáhlé možnosti, které programovací jazyk <i>Vim Script</i>
uživatelům textového editoru Vim i programátorům poskytuje, by však
v&nbsp;některých případech mohlo být výhodnější použít některý obecný
skriptovací jazyk. Může se jednat o ty případy, kdy je zapotřebí volat nějakou
funkci dostupnou z&nbsp;externí knihovny, volat již hotový (mnohdy i velmi
složitý) skript, analyzovat právě editovaný program s&nbsp;využitím reflexe,
nebo pouze to, že je programátor na daný jazyk prostě navyklý, má pro něj
vhodné vývojové a ladicí nástroje atd. Zatímco v&nbsp;konkurenčním editoru
<i>Emacs</i> jsou tvůrci pluginů vedeni k&nbsp;použití Elispu, ve Vimu je tomu
jinak &ndash; komu z&nbsp;nějakých důvodů nevyhovuje <i>VimScript</i>, může
použít rozhraní (konektor) pro některý jiný skriptovací jazyk, mezi něž patří
zejména Perl, Python, Ruby, které jsou doplněny o TCL a Scheme (přesněji řečeno
mzscheme a.k.a. Racket) a nověji taktéž o programovací jazyk <a
href="http://www.root.cz/serialy/programovaci-jazyk-lua/">Lua</a>.</p>

<a href="http://www.root.cz/obrazek/205061/"><img src="http://i.iinfo.cz/images/597/vim-6-21-prev.png" class="image-205061" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 2: Další plugin s&nbsp;vlastním uživatelským rozhraním tvořeným
pomocí skriptu: undotree.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Interaktivní test, zda Vim obsahuje konektor pro zvolený programovací jazyk</h2>

<p>Před využitím skriptů napsaných v&nbsp;některém potenciálně podporovaném
programovacím jazyce je nejprve vhodné zjistit, zda vámi používaná verze
<i>Vimu</i> skutečně obsahuje příslušná rozhraní (konektor). Možností, jak
zjistit existenci těchto rozhraní, existuje více. Interaktivně je možné
požadovanou informaci nejjednodušeji zjistit s&nbsp;využitím příkazu:</p>

<pre>
:version
</pre>

<a href="http://www.root.cz/obrazek/227828/"><img src="http://i.iinfo.cz/images/240/e10-prev.png" class="image-227828" alt="&#160;" height="231" width="370" /></a>
<p><i>Obrázek 3: Ukázka minimalisticky pojaté varianty Vimu: na výpisu
podporovaných a nepodporovaných vlastností Vimu je patrné, že šestnáctibitová
DOSová varianta tohoto textového editoru má mnohá omezení, která vycházejí
především z&nbsp;toho, že se celý editor i editované soubory (+ historie
operací) musí vejít do necelých 640kB RAM.</i></p>

<p>Po spuštění tohoto příkazu se na obrazovku vypíše seznam vlastností
<i>Vimu</i>, přičemž u každé vlastnosti je s&nbsp;využitím znaků
<strong>+</strong> a <strong>-</strong> naznačeno, zda je tato vlastnost
podporována či nikoli. Ukažme si, jak vypadá výpis pro variantu <i>Vimu</i>
s&nbsp;podporou některých skriptovacích jazyků (nikoli však všech jazyků, což
je z&nbsp;výpisu taktéž patrné). Konkrétně se jedná o stařičký <i>Vim</i>
nainstalovaný z&nbsp;balíčku <strong>vim-enhanced-7.2.148-1</strong> pro Fedoru
(zajímají nás jen podtržené vlastnosti, bohužel tato starší verze Vimu ještě
nedokázala vlastnosti seřadit do přehledných sloupců):</p>

<pre>
:ver                                                
VIM - Vi IMproved 7.2 (2008 Aug 9, compiled Mar 27 2009 08:42:32)
Included patches: 1-148
Modified by &lt;bugzilla@redhat.com&gt;
Compiled by &lt;bugzilla@redhat.com&gt;
Huge version without GUI.  Features included (+) or not (-):
+arabic +autocmd -balloon_eval -browse ++builtin_terms +byte_offset +cindent
-clientserver -clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments
+cryptv +cscope +cursorshape +dialog_con +diff +digraphs -dnd -ebcdic
+emacs_tags +eval +ex_extra +extra_search +farsi +file_in_path +find_in_path
+float +folding -footer +fork() +gettext -hangul_input +iconv +insert_expand
+jumplist +keymap +langmap +libcall +linebreak +lispindent +listcmds +localmap
+menu +mksession +modify_fname +mouse -mouseshape +mouse_dec +mouse_gpm
-mouse_jsbterm +mouse_netterm -mouse_sysmouse +mouse_xterm +multi_byte
+multi_lang <u>-mzscheme</u> -netbeans_intg -osfiletype +path_extra <u>+perl</u> +postscript
+printer +profile <u>+python</u> +quickfix +reltime +rightleft <u>-ruby</u> +scrollbind
+signs +smartindent -sniff +statusline -sun_workshop +syntax +tag_binary
+tag_old_static -tag_any_white <u>-tcl</u> +terminfo +termresponse +textobjects +title
 -toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo
+vreplace +wildignore +wildmenu +windows +writebackup -X11 -xfontset -xim -xsmp
 -xterm_clipboard -xterm_save
   system vimrc file: "/etc/vimrc"
     user vimrc file: "$HOME/.vimrc"
      user exrc file: "$HOME/.exrc"
  fall-back for $VIM: "/usr/share/vim"
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -g -pipe -Wall -Wp,-D_FO
RTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m32 -ma
rch=i386 -mtune=generic -fasynchronous-unwind-tables -D_GNU_SOURCE -D_FILE_OFFSE
T_BITS=64 -D_FORTIFY_SOURCE=2 -D_FORTIFY_SOURCE=1    -D_REENTRANT -D_GNU_SOURCE
-DDEBUGGING  -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -I/
usr/include/gdbm  -I/usr/lib/perl5/5.10.0/i386-linux-thread-multi/CORE  -I/usr/i
nclude/python2.5 -pthread
Linking: gcc   -Wl,-E -Wl,-rpath,/usr/lib/perl5/5.10.0/i386-linux-thread-multi/C
ORE   -L/usr/local/lib -o vim       -lselinux  -lncurses -lacl -lgpm   -Wl,-E -W
l,-rpath,/usr/lib/perl5/5.10.0/i386-linux-thread-multi/CORE  -L/usr/local/lib  -
L/usr/lib/perl5/5.10.0/i386-linux-thread-multi/CORE -lperl -lresolv -lutil -lc -
L/usr/lib/python2.5/config -lpython2.5 -lutil -lm -Xlinker -export-dynamic
</pre>

<p>Novější verze Vimu již umí vlastnosti vypsat přehledněji do sloupců (počet
sloupců závisí na šířce okna editoru):</p>

<pre>
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Jan  2 2014 19:39:59)
Included patches: 1-52
Modified by pkg-vim-maintainers@lists.alioth.debian.org
Compiled by buildd@
Huge version with GTK2 GUI.  Features included (+) or not (-):
+acl             +farsi           +mouse_netterm   +syntax
+arabic          +file_in_path    +mouse_sgr       +tag_binary
+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static
+balloon_eval    +float           +mouse_urxvt     -tag_any_white
+browse          +folding         +mouse_xterm     <u>+tcl</u>
++builtin_terms  -footer          +multi_byte      +terminfo
+byte_offset     +fork()          +multi_lang      +termresponse
+cindent         +gettext         <u>-mzscheme</u>        +textobjects
+clientserver    -hangul_input    +netbeans_intg   +title
+clipboard       +iconv           +path_extra      +toolbar
+cmdline_compl   +insert_expand   <u>+perl</u>            +user_commands
+cmdline_hist    +jumplist        +persistent_undo +vertsplit
+cmdline_info    +keymap          +postscript      +virtualedit
+comments        +langmap         +printer         +visual
+conceal         +libcall         +profile         +visualextra
+cryptv          +linebreak       <u>+python</u>          +viminfo
+cscope          +lispindent      <u>-python3</u>         +vreplace
+cursorbind      +listcmds        +quickfix        +wildignore
+cursorshape     +localmap        +reltime         +wildmenu
+dialog_con_gui  <u>+lua</u>             +rightleft       +windows
+diff            +menu            <u>+ruby</u>            +writebackup
+digraphs        +mksession       +scrollbind      +X11
+dnd             +modify_fname    +signs           -xfontset
-ebcdic          +mouse           +smartindent     +xim
+emacs_tags      +mouseshape      -sniff           +xsmp_interact
+eval            +mouse_dec       +startuptime     +xterm_clipboard
+ex_extra        +mouse_gpm       +statusline      -xterm_save
+extra_search    -mouse_jsbterm   -sun_workshop    +xpm
</pre>

<p>Poznámka: povšimněte si, že se zde již rozlišuje mezi Pythonem 2 a Pythonem
3, což je samozřejmě pro tvůrce pluginů důležité.</p>

<a href="http://www.root.cz/obrazek/233317/"><img src="http://i.iinfo.cz/images/152/vim04-prev.png" class="image-233317" alt="&#160;" height="270" width="283" /></a>
<p><i>Obrázek 4: Dostupnost či naopak nedostupnost konektorů k&nbsp;některým
programovacím jazykům v&nbsp;moderní verzi Vimu.</i></p>

<a href="http://www.root.cz/obrazek/233318/"><img src="http://i.iinfo.cz/images/33/vim05-prev.png" class="image-233318" alt="&#160;" height="270" width="280" /></a>
<p><i>Obrázek 5: Stejná verze Vimu, jako na předchozím screenshotu, ovšem
zkompilovaná pouze s&nbsp;minimální množinou vlastností.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Test existence rozhraní pro vybraný skriptovací jazyk přímo ve Vim Scriptu</h2>

<p>V&nbsp;mnoha praktických případech je však nutné zjistit podporu rozhraní
pro vybraný programovací jazyk přímo ve skriptu (zde je myšlen <i>Vim
Script</i> a.k.a. <i>viml</i>, tj.&nbsp;interní skriptovací jazyk Vimu). Pro
tento účel lze využít funkci nazvanou <strong>has</strong>, které se ve formě
řetězce předá jméno testované vlastnosti, tj.&nbsp;provede se toto volání:</p>

<pre>
<strong>has("vlastnost")</strong>
</pre>

<p>Funkce <strong>has</strong> vrací numerickou hodnotu 0 nebo 1
v&nbsp;závislosti na tom, zda je vlastnost předaná funkci
<strong>has()</strong> ve formě řetězce ve <i>Vimu</i> podporována či nikoli (u
jména vlastnosti se ignoruje velikost písmen, což znamená, že například řetězec
"Lua", "lua", "LUA" či dokonce "lUA" označuje shodnou vlastnost). Informace pro
příkaz <strong>:version</strong> a hodnoty vrácené funkcí
<strong>has()</strong> jsou zjišťovány ze stejné interní struktury <i>Vimu</i>,
proto jsou konzistentní. Můžete si ostatně sami vyzkoušet, která rozhraní ke
skriptovacím jazykům jsou ve vaší variantě <i>Vimu</i> aktuálně
podporována.</p>

<p>Zjištění existence rozhraní pro programovací jazyk <i>Python</i>:</p>

<pre>
:echo has("Python")
1
</pre>

<p>Zjištění existence rozhraní pro programovací jazyk <i>Python 3</i>:</p>

<pre>
:echo has("Python3")
0
</pre>

<p>Zjištění existence rozhraní pro programovací jazyk <i>Perl</i>:</p>

<pre>
:echo has("Perl")
1
</pre>

<p>Zjištění existence rozhraní pro programovací jazyk <i>Ruby</i>:</p>

<pre>
:echo has("Ruby")
0
</pre>

<p>Zjištění existence rozhraní pro programovací jazyk <i>Tcl</i>:</p>

<pre>
:echo has("Tcl")
0
</pre>

<p>Zjištění existence rozhraní pro programovací jazyk <i>Scheme</i>:</p>

<pre>
:echo has("mzscheme")
0
</pre>

<p>A pro nás dnes nejdůležitější test existence rozhraní pro programovací jazyk
<i>Lua</i>:</p>

<pre>
:echo has("lua")
1
</pre>

<p>Vzhledem k&nbsp;tomu, že se ve <i>Vim Scriptu</i> používají pro reprezentaci
pravdivostních hodnot namísto konstant true/false právě číselné hodnoty 0 a 1
(podobně jako v&nbsp;céčku), je možné funkci <strong>has()</strong> vložit
přímo do podmíněného příkazu:</p>

<pre>
:if has("Python")
:  <strong>python</strong> print 6*7
:endif
</pre>

<p>Popř.&nbsp;s&nbsp;chybovým hlášením:</p>

<pre>
:if has("Python")
:  <strong>python</strong> print 6*7
:else
:  echo "Rozhraní pro Python není podporováno"
:endif
</pre>

<p>Dtto pro programovací jazyk <i>Perl</i>:</p>

<pre>
:if has("Perl")
:  <strong>perldo</strong> $_=reverse($_);
:endif
</pre>

<pre>
:if has("Perl")
:  <strong>perldo</strong> $_=reverse($_);
:else
:  echo "Rozhraní pro Perl není podporováno"
:endif
</pre>

<p>Či pro programovací jazyk <i>Lua</i>:</p>

<pre>
:if has("Lua")
:  <strong>lua</strong> local x = 6*7
:  <strong>lua</strong> print(x)
:else
:  echo "Rozhraní pro Perl není podporováno"
:endif
</pre>

<p><a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/lang_test.vim">Následující
skript</a> naprogramovaný přímo ve <i>Vim Scriptu</i> po svém spuštění
příkazem:</p>

<pre>
:source lang_test.vim
</pre>

<p>či pouze:</p>

<pre>
:so lang_test.vim
</pre>

<p>vypíše informace o podporovaných i nepodporovaných konektorech na vybrané
programovací jazyky:</p>

<pre>
function! SupportForLanguage(languageName)
    echo "Support for language " . a:languageName . ":"
    if has(a:languageName)
        echo "provided"
    else
        echo "absent"
    end
endfunction
&nbsp;
let s:langs=["Python", "Python3", "Perl", "Tcl", "mzscheme", "Lua", "Ruby"]
&nbsp;
for lang in s:langs
    call SupportForLanguage(lang)
endfor
</pre>

<p>Poznámka: povšimněte si, jak může být psaní nástrojů ve <i>Vim Scriptu</i>
komplikované; týká se to například nutnosti mít na začátku funkcí velké písmeno
nebo prefix <strong>s:</strong>, argumenty funkcí musí mít prefix
<strong>a:</strong>, proměnné lokální v&nbsp;rámci modulu taktéž prefix
<strong>s:</strong>, globální proměnné prefix <strong>g:</strong> atd.</p>

<a href="http://www.root.cz/obrazek/233319/"><img src="http://i.iinfo.cz/images/139/vim06-prev.png" class="image-233319" alt="&#160;" height="270" width="367" /></a>
<p><i>Obrázek 6: Výsledek běhu skriptu pro zjištění informací o podporovaných i
nepodporovaných konektorech na vybrané programovací jazyky.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Základní rozhraní pro využití programovacího jazyka Lua</h2>

<p>Pokud je do aktuální (vámi používané) verze textového editoru Vim zařazen i
konektor pro programovací jazyk Lua, je možné přímo z&nbsp;editoru či
z&nbsp;libovolného skriptu zavolat jeden příkaz napsaný v&nbsp;Lue či dokonce
sérii příkazů. Přitom je zachován kontext, což například znamená, že globální
proměnné v&nbsp;jazyku Lua jsou zapamatovány, stejně tak deklarace funkcí atd.
Základním příkazem sloužícím pro spuštění či vyhodnocení libovolného příkazu
nebo výrazu napsaného v&nbsp;programovacím jazyku Lua, je příkaz
<strong>lua</strong> zapisovaný v&nbsp;příkazovém režimu. Ostatně funkci tohoto
příkazu si můžeme velmi snadno otestovat.</p>

<p>V&nbsp;příkazovém režimu:</p>

<pre>
:lua x = 6
:lua y = 7
:lua print("The Answer to the Ultimate Question of Life, the Universe, and Everything: " .. x*y)
</pre>

<p>Ve skriptu (viz též <a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script1.vim">zdrojový
kód tohoto skriptu</a>, spustíte ho příkazem <strong>:so
script1.vim</strong>):</p>

<pre>
lua x = 6
lua y = 7
lua print("The Answer to the Ultimate Question of Life, the Universe, and Everything: " .. x*y)
</pre>

<p>Jak je však již z&nbsp;tohoto příkladu patrné, není tento způsob vhodný pro
zápis delších (víceřádkových) sekvencí kódu. V&nbsp;tomto případě je výhodnější
využít druhého způsobu, který se podobá použití takzvaných <a
href="http://en.wikipedia.org/wiki/Here_document">here documents</a>
v&nbsp;shellu, Pythonu, Ruby, Perlu, PHP i v&nbsp;některých dalších
skriptovacích jazycích. Za příkazem <strong>lua</strong> se použije dvojice
znaků &lt;&lt; následovaná symbolem, který ohraničuje tu část skriptu, která je
naprogramována v&nbsp;jazyku Lua (<a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script2.vim">celý
skript</a>):</p>

<pre>
lua &lt;&lt; EOF
local x = 6
local y = 7
print("The Answer to the Ultimate Question of Life, the Universe, and Everything: " .. x*y)
EOF
</pre>

<p>Alternativně je možné vynechat symbol ohraničující část Lua skriptu.
V&nbsp;tomto případě musí být tato část oddělena znakem tečka uvedeným na
začátku řádku:</p>

<pre>
lua &lt;&lt;
local x = 6
local y = 7
print("The Answer to the Ultimate Question of Life, the Universe, and Everything: " .. x*y)
.
<i>" ^ tecka na zacatku predchoziho radku</i>
</pre>

<p>Pozor ovšem na to, aby tečka byla skutečně umístěna na začátku řádku,
protože <a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script4.vim">tento</a>
skript je chybný, ovšem chybové hlášení je poněkud kryptické:</p>

<pre>
lua &lt;&lt;
local x = 6
local y = 7
print("The Answer to the Ultimate Question of Life, the Universe, and Everything: " .. x*y)
  .
<i>" ^ tecka musi byt umistena na zacatku radku</i>
</pre>

<a href="http://www.root.cz/obrazek/233320/"><img src="http://i.iinfo.cz/images/228/vim07-prev.png" class="image-233320" alt="&#160;" height="232" width="370" /></a>
<p><i>Obrázek 7: Pokud není tečka ukončující část Lua skriptu umístěna na
začátku řádku, vypíše Vim (ve spolupráci s&nbsp;interpretrem jazyka Lua) toto
kryptické chybové hlášení.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Příkaz <strong>luafile</strong></h2>

<p>Z&nbsp;popisu uvedeného <a href="#k04">v&nbsp;předchozí kapitole</a>
vyplývá, že jedna z&nbsp;možností, jak vytvořit delší plugin napsaný kompletně
v&nbsp;jazyku Lua, spočívá v&nbsp;tom, že se tento skript uloží do zdrojového
souboru s&nbsp;koncovkou <strong>.vim</strong>, na jeho začátku se uvede řádek
<strong>lua &lt;&lt;</strong> a na samotném konci pak samostatná tečka. To je
ovšem poměrně nevýhodné, protože mnoho textových editorů (včetně Vimu) bude
špatně rozeznávat typ souborů atd. Výhodnější by bylo z&nbsp;Vimu volat skript
napsaný kompletně v&nbsp;jazyku Lua, tj.&nbsp;bez prvního a posledního
&bdquo;speciálního řádku&ldquo;. To je samozřejmě taktéž možné, a to konkrétně
příkazem <strong>:luafile</strong>, který se podobá příkazu
<strong>:source</strong>, ovšem skript je interpretován přímo jazykem Lua a
nikoli Vimem. Příkladem může být <a
href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script5.lua">následující
skript</a>, který pracuje stejně jako oba skripty předchozí, ovšem současně se
jedná o syntakticky bezchybný program v&nbsp;Lue:</p>

<pre>
<i>-- This script does not use lua &lt;&lt; etc.</i>
&nbsp;
<strong>local</strong> x = 6
<strong>local</strong> y = 7
print("The Answer to the Ultimate Question of Life, the Universe, and Everything: " .. x*y)
</pre>

<p>Tento skript se snadno spustí příkazem:</p>

<pre>
:luafile script5.lua
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Příkaz <strong>luado</strong></h2>

<p>Velmi zajímavým příkazem, který může být v&nbsp;mnoha pluginech dobře
využitelný, je příkaz <strong>:luado</strong>. Před tímto příkazem je možné
uvést rozsah řádků, podobně jako u běžných vimovských příkazů typu
<strong>:w</strong> apod. V&nbsp;případě, že rozsah není uveden, uvažuje se, že
je vybrán celý buffer, tj.&nbsp;implicitně se použije rozsah <strong>%</strong>
nebo <strong>1,$</strong>. Za <strong>:luado</strong> se uvádí libovolný příkaz
jazyka Lua, který je automaticky a postupně (iterativně) spuštěn pro všechny
řádky/vybrané řádky v&nbsp;aktivním bufferu. Jinými slovy to znamená, že pokud
není explicitně uveden rozsah platnosti, je příkaz v&nbsp;implicitní programové
smyčce aplikován na každý textový řádek, jenž se nachází v&nbsp;aktivním
bufferu, počínaje prvním řádkem. Obsah tohoto řádku je vždy umístěn do proměnné
<strong>line</strong>, číslo řádku pak do proměnné <strong>linenr</strong>.</p>

<p>Ukažme si jednoduchý příklad, který pro každý vybraný řádek (či všechny
řádky) aktivního bufferu vypíše jejich číslo a délku:</p>

<pre>
:luado print(linenr .. " -&gt; " .. string.len(line))
</pre>

<p>Zajímavé je, že pokud funkce volaná příkazem <strong>luado</strong> má
nějakou návratovou hodnotu, je aktuální (právě zpracovávaný řádek) touto
hodnotou ovlivněn. Potřebujete tedy řádky očíslovat? Žádný problém:</p>

<pre>
:luado return linenr .. " " .. line
</pre>

<p><ins>Poznámka: i když je možné pomocí <strong>:luado</strong> měnit obsah
všech řádků v&nbsp;aktivním bufferu, nelze s&nbsp;jeho využitím textové řádky
do bufferu přidávat ani je mazat. Pro takovou činnost je nutné použít techniky
popsané příště.</ins></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Modul <strong>vim</strong> využitelný z&nbsp;programovacího jazyka Lua</h2>

<p>Skripty vytvořené v&nbsp;jazyce Lua mohou používat všechny základní knihovny
tohoto jazyka, tj.&nbsp;například včetně knihovny <strong>io</strong> atd.
Ovšem navíc je možné použít ještě jeden speciální modul nazvaný
<strong>vim</strong>, který programátorům nabízí API k&nbsp;Vimu.
V&nbsp;následující tabulce jsou vypsány některé funkce, které tento modul
programátorům nabízí. Bližší popis těchto funkcí bude &ndash; samozřejmě
společně s&nbsp;demonstračními příklady &ndash; uveden příště:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Význam</th></tr>
<tr><td>1</td><td>vim.command(příkaz)</td><td>spustí libovolný příkaz Vimu přímo z&nbsp;Lua skriptu</td></tr>
<tr><td>2</td><td>vim.eval(výraz)</td><td>vyhodnotí libovolný vimovský příkaz přímo z&nbsp;Lua skriptu</td></tr>
<tr><td>3</td><td>vim.open(jméno_souboru)</td><td>otevře nový buffer</td></tr>
<tr><td>4</td><td>vim.line()</td><td>vrátí obsah aktuálního textového řádku v&nbsp;aktivním bufferu (jako řetězec)</td></tr>
</table>



<p><a name="k08"></a></p>
<h2 id="k08">8. Praktický příklad: přepis promítačky slajdů z&nbsp;Vim Scriptu do jazyka Lua</h2>

<p>S&nbsp;jednoduchou verzí skriptu určeného pro prohlížení slajdů jsme se již
<a
href="http://www.root.cz/clanky/tvorba-vlastniho-pluginu-pro-textovy-editor-vim/">v&nbsp;tomto
seriálu setkali</a>, takže se podívejme na způsob konverze tohoto prográmku
z&nbsp;Vim Scriptu do programovacího jazyka Lua. Budeme převádět následující
(velmi jednoduchou) variantu skriptu:</p>

<pre>
<i>" Slideshow tool v1.1</i>
<i>" Pavel Tisnovsky 2012, 2013, 2014</i>
&nbsp;
&nbsp;
&nbsp;
<i>" Seznam s nazvy slajdu</i>
<strong>let</strong> g:slides=readfile("list.txt")
&nbsp;
<i>" Prvky v poli se cisluji od nuly!</i>
<strong>let</strong> g:index=0
&nbsp;
<strong>function</strong>! GotoFirstSlide()
    <strong>let</strong> g:index = 0
<strong>endfunction</strong>
&nbsp;
<strong>function</strong>! GotoLastSlide()
    <strong>let</strong> g:index = len(g:slides) - 1
<strong>endfunction</strong>
&nbsp;
<strong>function</strong>! BeforeFirstSlide()
    <strong>return</strong> g:index &lt; 0
<strong>endfunction</strong>
&nbsp;
<strong>function</strong>! AfterLastSlide()
    <strong>return</strong> g:index &gt;= len(g:slides)
<strong>endfunction</strong>
&nbsp;
<strong>function</strong>! ShowNextSlide()
    <strong>let</strong> g:index += 1
    <strong>if</strong> AfterLastSlide()
        <strong>call</strong> GotoFirstSlide()
    <strong>endif</strong>
    <strong>call</strong> ShowActualSlide()
<strong>endfunction</strong>
&nbsp;
<strong>function</strong>! ShowPrevSlide()
    <strong>let</strong> g:index -= 1
    <strong>if</strong> BeforeFirstSlide()
        <strong>call</strong> GotoLastSlide()
    <strong>endif</strong>
    <strong>call</strong> ShowActualSlide()
<strong>endfunction</strong>
&nbsp;
<strong>function</strong>! ShowFirstSlide()
    <strong>call</strong> GotoFirstSlide()
    <strong>call</strong> ShowActualSlide()
<strong>endfunction</strong>
&nbsp;
<strong>function</strong>! ShowLastSlide()
    <strong>call</strong> GotoLastSlide()
    <strong>call</strong> ShowActualSlide()
<strong>endfunction</strong>
&nbsp;
<strong>function</strong>! ShowActualSlide()
    execute "edit" g:slides[g:index]
<strong>endfunction</strong>
&nbsp;
<strong>function</strong>! StatusLine()
    <strong>return</strong> "Slide " . (1+g:index) . "/" . len(g:slides) . " : " . g:slides[g:index]
<strong>endfunction</strong>
&nbsp;
<i>" Hot keys</i>
<strong>map</strong> &lt;PageUp&gt;   :<strong>call</strong> ShowPrevSlide()&lt;cr&gt;
<strong>map</strong> &lt;PageDown&gt; :<strong>call</strong> ShowNextSlide()&lt;cr&gt;
<strong>map</strong> &lt;Home&gt;     :<strong>call</strong> ShowFirstSlide()&lt;cr&gt;
<strong>map</strong> &lt;End&gt;      :<strong>call</strong> ShowLastSlide()&lt;cr&gt;
&nbsp;
<i>" Setup</i>
<strong>set</strong> statusline=%!StatusLine()
&nbsp;
<i>" Potrebujeme zobrazit stavovy radek i ve chvili,</i>
<i>" kdy je zobrazeno pouze jedno okno</i>
<strong>set</strong> laststatus=2
&nbsp;
<i>" Spustit prezentaci</i>
:<strong>call</strong> ShowFirstSlide()
</pre>

<p>Při převodu se budeme řídit následujícími body:</p>

<ol>

<li>Namísto globálních proměnných použijeme dvojici proměnných lokálních
(přesněji řečeno lokálních v&nbsp;rámci jednoho modulu). První proměnná bude
obsahovat pole jmen všech slajdů, druhá pak číslo aktuálního slajdu.</li>

<li>Položky v&nbsp;poli se číslují od jedničky!</li>

<li>Délka pole se zjistí jednoduše pomocí operátoru #.</li>

<li>Funkce mohou začínat v&nbsp;Lue malými písmeny.</li>

<li>Pro načtení souboru se seznamem slajdů použijeme vlastní funkci nazvanou
<strong>loadSlideList</strong>, která využije možnosti standardního modulu
<strong>io</strong>.</li>

<li>Pro zobrazení slajdu (načtení do aktuálního okna) se použije příkaz
<strong>vim.command("edit jméno_slajdu")</strong>.</li>

<li>Mapování funkcí na klávesy se provede pomocí příkazu:
<strong>vim.command("map klávesa :lua funkce()&lt;cr&gt;")</strong> &ndash; to
znamená, že i Lua funkce jsou z&nbsp;tohoto hlediska prakticky plnohodnotnými
funkcemi!</li>

<li>Nejsložitější bude registrace funkce volané pro aktualizaci obsahu stavové
řádky. Zde si budeme muset pomoci krátkou funkcí naprogramovanou ve Vim
Scriptu, která obsahuje volání <strong>luaeval</strong>. Není to sice příliš
elegantní řešení, ale v&nbsp;IT existují mnohem mnohem komplikovanější
&bdquo;mosty&ldquo; mezi dvěma programovacími jazyky.</li>

</ol>

<p>Výsledný skript bude vypadat následovně (podle mého názoru je mnohem
čitelnější, než jeho původní varianta):</p>

<pre>
<i>-- Slideshow tool v1.1</i>
<i>-- Pavel Tisnovsky 2016</i>
&nbsp;
&nbsp;
&nbsp;
<i>-- Pole s nazvy slajdu</i>
<strong>local</strong> slides = nil
&nbsp;
<i>-- Prvky v poli se cisluji od jednicky!</i>
<strong>local</strong> index = 1
&nbsp;
<strong>function</strong> loadSlideList(filename)
    <strong>local</strong> slides = {}
    <strong>for</strong> line in io.lines(filename) do
        table.insert(slides, line)
    <strong>end</strong>
    <strong>return</strong> slides
<strong>end</strong>
&nbsp;
<strong>function</strong> gotoFirstSlide()
    index = 1
<strong>end</strong>
&nbsp;
<strong>function</strong> gotoLastSlide()
    index = #slides
<strong>end</strong>
&nbsp;
<strong>function</strong> beforeFirstSlide()
    <strong>return</strong> index &lt; 1
<strong>end</strong>
&nbsp;
<strong>function</strong> afterLastSlide()
    <strong>return</strong> index &gt; #slides
<strong>end</strong>
&nbsp;
<strong>function</strong> showNextSlide()
    index = index + 1
    <strong>if</strong> afterLastSlide() <strong>then</strong>
        gotoFirstSlide()
    <strong>end</strong>
    showActualSlide()
<strong>end</strong>
&nbsp;
<strong>function</strong> showPrevSlide()
    index = index - 1
    <strong>if</strong> beforeFirstSlide() <strong>then</strong>
        gotoLastSlide()
    <strong>end</strong>
    showActualSlide()
<strong>end</strong>
&nbsp;
<strong>function</strong> showFirstSlide()
    gotoFirstSlide()
    showActualSlide()
<strong>end</strong>
&nbsp;
<strong>function</strong> showLastSlide()
    gotoLastSlide()
    showActualSlide()
<strong>end</strong>
&nbsp;
<strong>function</strong> showActualSlide()
    vim.command("edit " .. slides[index])
<strong>end</strong>
&nbsp;
<strong>function</strong> statusLine()
    <strong>return</strong> "Slide " .. index .. "/" .. #slides .. " : " .. slides[index]
<strong>end</strong>
&nbsp;
slides = loadSlideList("list.txt")
&nbsp;
<i>-- Hot keys</i>
vim.command("map &lt;PageUp&gt;   :lua showPrevSlide()&lt;cr&gt;")
vim.command("map &lt;PageDown&gt; :lua showNextSlide()&lt;cr&gt;")
vim.command("map &lt;Home&gt;     :lua showFirstSlide()&lt;cr&gt;")
vim.command("map &lt;End&gt;      :lua showLastSlide()&lt;cr&gt;")
&nbsp;
<i>-- Setup</i>
vim.command([[
function! StatusLine()
    return luaeval('statusLine()')
endfunction]])
vim.command("set statusline=%!StatusLine()")
&nbsp;
<i>-- Potrebujeme zobrazit stavovy radek i ve chvili,</i>
<i>-- kdy je zobrazeno pouze jedno okno</i>
vim.command("set laststatus=2")
&nbsp;
<i>-- Spustit prezentaci</i>
showFirstSlide()
</pre>

<a href="http://www.root.cz/obrazek/207322/"><img src="http://i.iinfo.cz/images/137/vim-weakpoint-2-prev.png" class="image-207322" alt="&#160;" height="234" width="370" /></a>
<p><i>Obrázek 8: Promítání slajdů v&nbsp;praxi.</i></p>

<a href="http://www.root.cz/obrazek/207323/"><img src="http://i.iinfo.cz/images/137/vim-weakpoint-3-prev.png" class="image-207323" alt="&#160;" height="234" width="370" /></a>
<p><i>Obrázek 9: Promítání slajdů v&nbsp;praxi.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady, s&nbsp;nimiž jsme se v&nbsp;dnešním článku
seznámili, byly, podobně jako v&nbsp;předchozích částech tohoto seriálu,
uloženy do Git repositáře umístěného na GitHubu (<a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>):</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Zdrojový kód</th></tr>
<tr><td>1</td><td>lang_test.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/lang_test.vim">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/lang_test.vim</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>2</td><td>script1.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script1.vim">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script1.vim</a></td></tr>
<tr><td>3</td><td>script2.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script2.vim">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script2.vim</a></td></tr>
<tr><td>4</td><td>script3.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script3.vim">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script3.vim</a></td></tr>
<tr><td>5</td><td>script4.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script4.vim">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script4.vim</a></td></tr>
<tr><td>6</td><td>script5.lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script5.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/script5.lua</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>slideshow.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/slideshow.vim">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/slideshow.vim</a></td></tr>
<tr><td>8</td><td>slideshow.lua</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim_lua/slideshow.lua">https://github.com/tisnik/presentations/blob/master/vim/vim_lua/slideshow.lua</a></td></tr>
</table>



<p><a name="k10"></a></p>
<h2 id="k10">10. Odkazy na Internetu</h2>

<ol>

<li>Seriál o programovacím jazyku Lua<br />
<a href="http://www.root.cz/serialy/programovaci-jazyk-lua/">http://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Lua (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Lua_(programming_language)">http://en.wikipedia.org/wiki/Lua_(programming_language)</a>
</li>

<li>Lua 5.2 sources<br />
<a href="http://www.lua.org/source/5.2/">http://www.lua.org/source/5.2/</a>
</li>

<li>Pyclewn installation notes<br />
<a href="http://pyclewn.sourceforge.net/install.html">http://pyclewn.sourceforge.net/install.html</a>
</li>

<li>pip Installation<br />
<a href="https://pip.pypa.io/en/latest/installing.html">https://pip.pypa.io/en/latest/installing.html</a>
</li>

<li>Clewn<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>Clewn installation<br />
<a href="http://clewn.sourceforge.net/install.html">http://clewn.sourceforge.net/install.html</a>
</li>

<li>Clewn - soubory<br />
<a href="http://sourceforge.net/projects/clewn/files/OldFiles/">http://sourceforge.net/projects/clewn/files/OldFiles/</a>
</li>

<li>Writing Vim Plugins<br />
<a href="http://stevelosh.com/blog/2011/09/writing-vim-plugins/">http://stevelosh.com/blog/2011/09/writing-vim-plugins/</a>
</li>

<li>how to understand this vim script?<br />
<a href="http://stackoverflow.com/questions/12625091/how-to-understand-this-vim-script">http://stackoverflow.com/questions/12625091/how-to-understand-this-vim-script</a>
</li>

<li>Novinky ve VIM 7: Skriptovací­ jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>DirDiff.vim : A plugin to diff and merge two directories recursively.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=102">http://www.vim.org/scripts/script.php?script_id=102</a>
</li>

<li>vim-dirdiff na GitHubu<br />
<a href="https://github.com/will133/vim-dirdiff">https://github.com/will133/vim-dirdiff</a>
</li>

<li>fakeclip : pseudo clipboard register for non-GUI version of Vim<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2098">http://www.vim.org/scripts/script.php?script_id=2098</a>
</li>

<li>vim-fakeclip na GitHubu<br />
<a href="https://github.com/kana/vim-fakeclip">https://github.com/kana/vim-fakeclip</a>
</li>

<li>vim-fakeclip: Dokumentace<br />
<a href="http://kana.github.io/config/vim/fakeclip.html">http://kana.github.io/config/vim/fakeclip.html</a>
</li>

<li>Vim Multiple Cursors na GitHubu<br />
<a href="https://github.com/terryma/vim-multiple-cursors">https://github.com/terryma/vim-multiple-cursors</a>
</li>

<li>SLIME (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/SLIME">http://en.wikipedia.org/wiki/SLIME</a>
</li>

<li>vim-slime na GitHubu<br />
<a href="https://github.com/jpalardy/vim-slime">https://github.com/jpalardy/vim-slime</a>
</li>

<li>vi Editor Commands<br />
<a href="http://www.cs.rit.edu/~cslab/vi.html#A1.4">http://www.cs.rit.edu/~cslab/vi.html#A1.4</a>
</li>

<li>vi Manual<br />
<a href="http://www.cs.fsu.edu/general/vimanual.html">http://www.cs.fsu.edu/general/vimanual.html</a>
</li>

<li>Mastering the Vi Editor<br />
<a href="http://www.susnet.uk/mastering-the-vi-editor">http://www.susnet.uk/mastering-the-vi-editor</a>
</li>

<li>Using undo branches<br />
<a href="http://vim.wikia.com/wiki/Using_undo_branches">http://vim.wikia.com/wiki/Using_undo_branches</a>
</li>

<li>Gundo<br />
<a href="http://sjl.bitbucket.org/gundo.vim/">http://sjl.bitbucket.org/gundo.vim/</a>
</li>

<li>Vim as a Python IDE, or Python IDE as Vim<br />
<a href="http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/">http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/</a>
</li>

<li>histwin na GitHubu<br />
<a href="https://github.com/chrisbra/histwin.vim">https://github.com/chrisbra/histwin.vim</a>
</li>

<li>histwin.vim : Browse the undo tree<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2932">http://www.vim.org/scripts/script.php?script_id=2932</a>
</li>

<li>undotree.vim : Display your undo history in a graph<br />
<a href="http://www.vim.org/scripts/script.php?script_id=4177">http://www.vim.org/scripts/script.php?script_id=4177</a>
</li>

<li>Surround<br />
<a href="http://www.bestofvim.com/plugin/surround/">http://www.bestofvim.com/plugin/surround/</a>
</li>

<li>SnipMate<br />
<a href="http://www.bestofvim.com/plugin/snipmate/">http://www.bestofvim.com/plugin/snipmate/</a>
</li>

<li>Getting a Clojure REPL in Vim With VimClojure, Nailgun, and Leiningen<br />
<a href="http://naleid.com/blog/2011/12/19/getting-a-clojure-repl-in-vim-with-vimclojure-nailgun-and-leiningen/">http://naleid.com/blog/2011/12/19/getting-a-clojure-repl-in-vim-with-vimclojure-nailgun-and-leiningen/</a>
</li>

<li>The NERD Commenter : A plugin that allows for easy commenting of code for many filetypes.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1218">http://www.vim.org/scripts/script.php?script_id=1218</a>
</li>

<li>NERD Commenter na GitHubu<br />
<a href="https://github.com/scrooloose/nerdcommenter">https://github.com/scrooloose/nerdcommenter</a>
</li>

<li>luarefvim : Lua reference manual<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1291">http://www.vim.org/scripts/script.php?script_id=1291</a>
</li>

<li>lua.vim : Lua file type plug-in for the Vim text editor<br />
<a href="http://www.vim.org/scripts/script.php?script_id=3625">http://www.vim.org/scripts/script.php?script_id=3625</a>
</li>

<li>vim-lua-ftplugin<br />
<a href="https://github.com/xolox/vim-lua-ftplugin">https://github.com/xolox/vim-lua-ftplugin</a>
</li>

<li>Vi Improved<br />
<a href="https://wiki.python.org/moin/Vim">https://wiki.python.org/moin/Vim</a>
</li>

<li>javacomplete : Omni Completion for JAVA<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1785">http://www.vim.org/scripts/script.php?script_id=1785</a>
</li>

<li>SearchComplete<br />
<a href="http://www.vim.org/scripts/script.php?script_id=474">http://www.vim.org/scripts/script.php?script_id=474</a>
</li>

<li>ShowMarks<br />
<a href="http://www.vim.org/scripts/script.php?script_id=152">http://www.vim.org/scripts/script.php?script_id=152</a>
</li>

<li>ctrlp.vim<br />
<a href="https://github.com/kien/ctrlp.vim">https://github.com/kien/ctrlp.vim</a>
</li>

<li>ctrlp.vim<br />
<a href="http://kien.github.io/ctrlp.vim/">http://kien.github.io/ctrlp.vim/</a>
</li>

<li>vim-signature<br />
<a href="https://github.com/kshenoy/vim-signature">https://github.com/kshenoy/vim-signature</a>
</li>

<li>Supertab<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1643">http://www.vim.org/scripts/script.php?script_id=1643</a>
</li>

<li>Supertab (GitHub)<br />
<a href="https://github.com/ervandew/supertab">https://github.com/ervandew/supertab</a>
</li>

<li>Vim Essential Plugin: NERD Tree<br />
<a href="http://code.tutsplus.com/tutorials/vim-essential-plugin-nerdtree--net-19692">http://code.tutsplus.com/tutorials/vim-essential-plugin-nerdtree--net-19692</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem <br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=1658">http://vim.sourceforge.net/scripts/script.php?script_id=1658</a>
</li>

<li>NERD Tree Guide<br />
<a href="http://usevim.com/2012/07/18/nerdtree/">http://usevim.com/2012/07/18/nerdtree/</a>
</li>

<li>vcscommand.vim : CVS/SVN/SVK/git/hg/bzr integration plugin<br />
<a href="http://www.vim.org/scripts/script.php?script_id=90">http://www.vim.org/scripts/script.php?script_id=90</a>
</li>

<li>vcscommand na GitHubu<br />
<a href="https://github.com/vim-scripts/vcscommand.vim">https://github.com/vim-scripts/vcscommand.vim</a>
</li>

<li>Popis skriptu Vim Pathogen<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2332">http://www.vim.org/scripts/script.php?script_id=2332</a>
</li>

<li>Poslední­verze skriptu Vim Pathogen<br />
<a href="https://tpo.pe/pathogen.vim">https://tpo.pe/pathogen.vim</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://vimawesome.com/">http://vimawesome.com/</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://www.vim.org/scripts/script_search_results.php?order_by=rating">http://www.vim.org/scripts/script_search_results.php?order_by=rating</a>
</li>

<li>Vim-airline na GitHubu<br />
<a href="https://github.com/bling/vim-airline">https://github.com/bling/vim-airline</a>
</li>

<li>Vim-airline na www.vim.org<br />
<a href="http://www.vim.org/scripts/download_script.php?src_id=22726">http://www.vim.org/scripts/download_script.php?src_id=22726</a>
</li>

<li>Vim-fugitive na GitHubu<br />
<a href="https://github.com/tpope/vim-fugitive">https://github.com/tpope/vim-fugitive</a>
</li>

<li>Vim-fugitive na www.vim.org<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2975">http://www.vim.org/scripts/script.php?script_id=2975</a>
</li>

<li>Textový editor Vim jako IDE (seriál)<br />
<a href="http://www.root.cz/clanky/textovy-editor-vim-jako-ide/">http://www.root.cz/clanky/textovy-editor-vim-jako-ide/</a>
</li>

<li>Building Vim<br />
<a href="http://vim.wikia.com/wiki/Building_Vim">http://vim.wikia.com/wiki/Building_Vim</a>
</li>

<li>Getting the Vim source with Mercurial<br />
<a href="http://vim.wikia.com/wiki/Getting_the_Vim_source_with_Mercurial">http://vim.wikia.com/wiki/Getting_the_Vim_source_with_Mercurial</a>
</li>

<li>Vim Perl Interface<br />
<a href="http://vim.dindinx.net/vim7/html/if_perl.txt.php">http://vim.dindinx.net/vim7/html/if_perl.txt.php</a>
</li>

<li>Vim Perl Support<br />
<a href="http://www.softpanorama.org/Editors/Vimorama/vim_perl_support.shtml">http://www.softpanorama.org/Editors/Vimorama/vim_perl_support.shtml</a>
</li>

<li>VIM as Python IDE<br />
<a href="http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/">http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/</a>
</li>

<li>Stack Overflow: VIM: Perl interface: passing a variable to Perl and reading a vim variable from Perl<br />
<a href="http://stackoverflow.com/questions/4999902/vim-perl-interface-passing-a-variable-to-perl-and-reading-a-vim-variable-from">http://stackoverflow.com/questions/4999902/vim-perl-interface-passing-a-variable-to-perl-and-reading-a-vim-variable-from</a>
</li>

<li>Stack Overflow: Getting started with vim scripting with Perl<br />
<a href="http://stackoverflow.com/questions/2208618/getting-started-with-vim-scripting-with-perl">http://stackoverflow.com/questions/2208618/getting-started-with-vim-scripting-with-perl</a>
</li>

<li>Python with a modular IDE (Vim)<br />
<a href="http://www.sontek.net/python-with-a-modular-ide-vim">http://www.sontek.net/python-with-a-modular-ide-vim</a>
</li>

<li>Getting to VIM's Python interface<br />
<a href="http://zerokspot.com/weblog/2009/02/21/getting-to-know-vims-python-interface/">http://zerokspot.com/weblog/2009/02/21/getting-to-know-vims-python-interface/</a>
</li>

<li>Pretty-formatting XML<br />
<a href="http://vim.wikia.com/wiki/Pretty-formatting_XML">http://vim.wikia.com/wiki/Pretty-formatting_XML</a>
</li>

<li>Delete a pair of XML/HTML tags<br />
<a href="http://vim.wikia.com/wiki/Delete_a_pair_of_XML/HTML_tags">http://vim.wikia.com/wiki/Delete_a_pair_of_XML/HTML_tags</a>
</li>

<li>Vim as XML Editor<br />
<a href="http://www.pinkjuice.com/howto/vimxml/">http://www.pinkjuice.com/howto/vimxml/</a>
</li>

<li>xmledit: A filetype plugin to help edit XML, HTML, and SGML documents<br />
<a href="http://www.vim.org/scripts/script.php?script_id=301">http://www.vim.org/scripts/script.php?script_id=301</a>
</li>

<li>Poslední vývojová verze makra xmledit<br />
<a href="http://github.com/sukima/xmledit/">http://github.com/sukima/xmledit/</a>
</li>

<li>vim.wikia: Display date-and-time on status line<br />
<a href="http://vim.wikia.com/wiki/Display_date-and-time_on_status_line">http://vim.wikia.com/wiki/Display_date-and-time_on_status_line</a>
</li>

<li>vim.wikia: Writing a valid statusline<br />
<a href="http://vim.wikia.com/wiki/Writing_a_valid_statusline">http://vim.wikia.com/wiki/Writing_a_valid_statusline</a>
</li>

<li>vim.wikia: Statusline tab level ruler<br />
<a href="http://vim.wikia.com/wiki/Statusline_tab_level_ruler">http://vim.wikia.com/wiki/Statusline_tab_level_ruler</a>
</li>

<li>vim.wikia: Switching between different statuslines<br />
<a href="http://vim.wikia.com/wiki/Switching_between_different_statuslines">http://vim.wikia.com/wiki/Switching_between_different_statuslines</a>
</li>

<li>X Selections, Cut Buffers, and Kill Rings<br />
<a href="http://www.jwz.org/doc/x-cut-and-paste.html">http://www.jwz.org/doc/x-cut-and-paste.html</a>
</li>

<li>Accessing the system clipboard<br />
<a href="http://vim.wikia.com/wiki/Accessing_the_system_clipboard">http://vim.wikia.com/wiki/Accessing_the_system_clipboard</a>
</li>

<li>xcutsel(1) - Linux man page<br />
<a href="http://linux.die.net/man/1/xcutsel">http://linux.die.net/man/1/xcutsel</a>
</li>

<li>snipMate : TextMate-style snippets for Vim<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2540">http://www.vim.org/scripts/script.php?script_id=2540</a>
</li>

<li>msanders / snipmate.vim<br />
<a href="https://github.com/msanders/snipmate.vim">https://github.com/msanders/snipmate.vim</a>
</li>

<li>snipMate.vim Introductory Screencast<br />
<a href="http://vimeo.com/3535418">http://vimeo.com/3535418</a>
</li>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Vim plugins for developers<br />
<a href="http://www.linuxtoday.com/upload/vim-plugins-for-developers-140619094010.html">http://www.linuxtoday.com/upload/vim-plugins-for-developers-140619094010.html</a>
</li>
</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

