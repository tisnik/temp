<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Vimspector: zdařilá integrace debuggerů do Vimu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Vimspector: zdařilá integrace debuggerů do Vimu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dnes se seznámíme s doplňujícím modulem určeným pro textový editor Vim, který se nazývá Vimspector. Tento plugin umožňuje propojení Vimu s různými typy debuggerů (pro Python, C, C++, jazyk Lua atd.) a svým vzhledem se snaží napodobit debuggery známé z různých IDE.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Vimspector: zdařilá integrace debuggerů do Vimu</a></p>
<p><a href="#k02">2. Základní vlastnosti Vimspectoru</a></p>
<p><a href="#k03">3. Kontrola, s&nbsp;jakými přepínači byl přeložen Vim</a></p>
<p><a href="#k04">4. Instalace Vimspectoru</a></p>
<p><a href="#k05">5. 400 megabajtů pro pouhý debugger?</a></p>
<p><a href="#k06">6. Konfigurace projektu, který se má ladit</a></p>
<p><a href="#k07">7. Nastavení breakpointů v&nbsp;laděném skriptu</a></p>
<p><a href="#k08">8. Spuštění a ukončení debuggeru</a></p>
<p><a href="#k09">9. Krokování a zobrazení obsahu proměnných při ladění</a></p>
<p><a href="#k10">10. Zobrazení hodnot zadaných výrazů</a></p>
<p><a href="#k11">11. Zobrazení zásobníkových rámců</a></p>
<p><a href="#k12">12. Konfigurační soubor umožňující ladění dvou aplikací</a></p>
<p><a href="#k13">13. Ladění aplikace s&nbsp;velkou hloubkou rekurze při spuštění</a></p>
<p><a href="#k14">14. Zobrazení obsahu parametru či proměnné přímo v&nbsp;okně editoru se zdrojovým kódem</a></p>
<p><a href="#k15">15. Časté problémy</a></p>
<p><a href="#k16">16. Debugging debuggeru</a></p>
<p><a href="#k17">17. Příloha: základní klávesové zkratky pro ovládání Vimspectoru</a></p>
<p><a href="#k18">18. Závěr</a></p>
<p><a href="#k19">19. Odkazy na relevantní články na Rootu</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Vimspector: zdařilá integrace debuggerů do Vimu</h2>

<p>Textový editor <i>Vim</i> se díky své podpoře skriptování (včetně Pythonu),
podpoře maker, záložek (tabů), oken a bufferů může po instalaci vhodných
pluginů změnit v&nbsp;poměrně robustní a přitom výkonné integrované vývojové
prostředí, které navíc odpovídá Unixové filozofii &ndash; <i>Vim</i> je
v&nbsp;tomto případě komponentou volající další aplikace a nástroje, nikoli
monolitickým programem, který teoreticky umí všechno, ovšem nic pořádně :-)
V&nbsp;mnoha případech musí programátoři použít debugger pro nalezení chyby
v&nbsp;programu a právě v&nbsp;této chvíli stojí před rozhodnutím, zda debugger
spustit v&nbsp;samostatném terminálu nebo zda naopak použít vhodný plugin pro
spuštění a především pro ovládání debuggeru přímo z&nbsp;<i>Vimu</i>. Druhá
možnost je v&nbsp;některých ohledech lepší, protože debugger ovládaný
z&nbsp;příkazové řádky (<i>gdb</i> apod.) sice uživatelům nabízí nepřeberné
množství mnohdy i velmi komplikovaných příkazů, na druhou stranu však nemá
všechny možnosti celoobrazovkového debuggeru, na který jsou dnešní programátoři
zvyklí.</p>

<a href="http://www.root.cz/obrazek/208271/"><img src="http://i.iinfo.cz/images/521/vim-dbg-1-prev.png"  class="image-208271" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 1: Typické &bdquo;sezení&ldquo; programátora využívajícího
debugger gdb. Přeložení programu s&nbsp;vygenerováním ladicích informací
(<strong>-g</strong>) a následné spuštění debuggeru.</i></p>

<p>V&nbsp;současnosti existuje hned několik přídavných modulů určených pro
textový editor Vim, které do tohoto editoru více či někdy spíš méně úspěšně
integrují podporu pro debuggery. Jeden z&nbsp;takových modulů se jmenuje
<i>Vimspector</i>. Předností tohoto modulu je poměrně robustní chování (což
není zcela obvyklé) a taktéž podpora relativně velkého množství debuggerů,
včetně debuggerů dostupných přes protokol <i>DAP</i>. A samozřejmě můžeme najít
i některé nevýhody. První nevýhodou je, že instalace <i>Vimspectoru</i> je
obrovská &ndash; několik se megabajtů(!). Jak ovšem uvidíme dále, je to
zapříčiněno tím, že součástí <i>Vimspectoru</i> jsou i samotné debuggery,
tj.&nbsp;například pro Go debugger <strong>delve</strong>, pro Python debugger
<strong>debugpy</strong> atd. V&nbsp;praxi to znamená, že nepoužívané debuggery
lze snadno smazat. A druhou nevýhodou je nutnost přípravy konfiguračního
souboru, aby Python věděl, jaký debugger a s&nbsp;jakými parametry se má
spustit.</p>

<a href="https://www.root.cz/obrazek/297108/"><img src="https://i.iinfo.cz/images/627/gdb1-3-prev.png" class="image-297108" alt="td1" height="173" width="370"></a>
<p><i>Obrázek 2: V&nbsp;minulosti velmi populární nástroj Turbo Debugger je
vybaven celoobrazovkovým textovým uživatelským rozhraním (TUI) připomínajícím
další produkty vytvořené společností Borland. Rozhraní a možnosti Turbo
Debuggeru je stále možné považovat za etalon toho, jak by mohl vypadat moderní
debugger s&nbsp;TUI či GUI (a popravdě řečeno &ndash; Vimspektor zde ještě
není).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní vlastnosti Vimspectoru</h2>

<p>Jaké vlastnosti vlastně plugin <i>Vimspector</i> programátorům nabízí? Jedná
se o dnes zcela standardní operace, mezi něž patří zejména:</p>

<ul>
<li>Definice breakpointů přímo v&nbsp;okně editovaného souboru</li>
<li>Možnost krokování (v&nbsp;režimu debuggeru)</li>
<li>Krokování se vstupem do volané funkce</li>
<li>Automatické zobrazení lokálních proměnných</li>
<li>Možnost zobrazení (a automatického přepočtu) libovolného výrazu</li>
<li>Zobrazení zásobníkových rámců &ndash; volaných funkcí s&nbsp;jejich parametry</li>
<li>Zobrazení obsahu výrazu, nad nímž se nachází kurzor myši (platí pro GVim a KVim, ne pro konzoli)</li>
<li>Zobrazení výstupní konzole, rozdělení výstupu na standardní výstup a chybový výstup</li>
<li>Zobrazení konzole s&nbsp;informacemi o komunikaci mezi Vimem a debuggerem</li>
</ul>

<p>Jak je z&nbsp;výše uvedeného seznamu zřejmé, skutečně jsou zahrnuty všechny
základní operace, které navíc fungují velmi stabilně (například
v&nbsp;porovnání s&nbsp;integrací debuggerů do textového editoru <i>Helix</i>,
což je prozatím nejvíce bolestivá část tohoto editoru).</p>

<a href="https://www.root.cz/obrazek/331050/"><img src="https://i.iinfo.cz/images/442/pudb-4-prev.png" class="image-331050" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 3: Pohled na textové uživatelské rozhraní debuggeru PuDB
s&nbsp;pěti regiony. Vimspector se tomuto pohledu přibližuje, jak si ostatně
ukážeme na screenshotech přidaných do navazujících kapitol.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Kontrola, s&nbsp;jakými přepínači byl přeložen Vim</h2>

<p>V&nbsp;dalších kapitolách si ukážeme, jakým způsobem se <i>Vimspector</i>
ovládá. Nejdříve je ho však nutné nainstalovat a taktéž se ujistit o tom, že
tento plugin bude plnohodnotně ve Vimu spustitelný a provozovatelný.
<i>Vimspector</i> je totiž částečně naprogramován v&nbsp;Pythonu, což nemusí
být příliš překvapivé, když si uvědomíme, že <i>VimScript</i>, tedy skriptovací
jazyk dostupný přímo ve Vimu, je pro větší přídavné moduly poměrně nešikovný.
Aby byl <i>Vimspector</i> použitelný, musí být textový editor Vim přeložen
s&nbsp;podporou Pythonu resp.&nbsp;Pythonu 3 &ndash; díky tomu je umožněna
tvorba skriptů přímo v&nbsp;tomto populárním programovacím jazyce. O tom, zda
vámi používaný <i>Vim</i> skutečně přeložen s&nbsp;podporou Pythonu, se lze
přesvědčit relativně snadno po zadání příkazu <strong>:ver</strong>. U volby
<strong>python</strong> či <strong>python3/dyn</strong> by se měl objevit znak
+.</p>

<p>Jak to může vypadat v&nbsp;praxi? Níže je vidět výsledek příkazu
<strong>:ver</strong> se zvýrazněnou volbou <strong>+python3/dyn</strong>.
V&nbsp;takto nakonfigurovaném a přeloženém Vimu tedy bude <i>Vimspector</i>
funkční:</p>

<pre>
<strong>:ver</strong>
&nbsp;
VIM - Vi IMproved 9.0 (2022 Jun 28, compiled Oct 05 2023 00:00:00)
Included patches: 1-1984
Modified by &lt;bugzilla@redhat.com&gt;
Compiled by &lt;bugzilla@redhat.com&gt;
Huge version without GUI.  Features included (+) or not (-):
+acl               +file_in_path      +mouse_urxvt       -tag_any_white
+arabic            +find_in_path      +mouse_xterm       -tcl
+autocmd           +float             +multi_byte        +termguicolors
+autochdir         +folding           +multi_lang        +terminal
-autoservername    -footer            -mzscheme          +terminfo
-balloon_eval      +fork()            +netbeans_intg     +termresponse
+balloon_eval_term +gettext           +num64             +textobjects
-browse            -hangul_input      +packages          +textprop
++builtin_terms    +iconv             +path_extra        +timers
+byte_offset       +insert_expand     +perl/dyn          +title
+channel           +ipv6              +persistent_undo   -toolbar
+cindent           +job               +popupwin          +user_commands
-clientserver      +jumplist          +postscript        +vartabs
-clipboard         +keymap            +printer           +vertsplit
+cmdline_compl     +lambda            +profile           +vim9script
+cmdline_hist      +langmap           -python            +viminfo
+cmdline_info      +libcall           <strong>+python3/dyn</strong>       +virtualedit
+comments          +linebreak         +quickfix          +visual
-- More --
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace Vimspectoru</h2>

<p>Instalaci <i>Vimspectoru</i> lze provést různými způsoby, které jsou (i když
pouze velmi stručně) vypsány <a
href="https://github.com/puremourning/vimspector#installation">zde</a>, takže
je zde nebudeme znovu opisovat. Namísto toho se zmiňme o plně ruční
(neautomatické) instalaci, která nás naučí nejvíce o tom, jak Vim dokáže
pracovat s&nbsp;přídavnými moduly. Nejdříve si stáhneme poslední verzi
<i>Vimspectoru</i>, kterou nalezneme na stránce <a
href="https://github.com/puremourning/vimspector/releases/tag/6997902219">https://github.com/puremourning/vimspector/releases/tag/6997902219</a>
(jak je patrné, k&nbsp;dispozici je varianta pro Linux i pro MacOS, čímž jsou
pokryty všechny zajímavé operační systémy :-). Dále stažený tarball rozbalíme
příkazem <strong>tar xvfz tarball</strong>. Rozbalenou strukturu (ovšem bez
adresáře na nejvyšší úrovni) je nyní možné překopírovat do adresáře
<strong>~/.vim</strong>. Jeho struktura může po provedení všech tří operací
vypadat následovně:</p>

<pre>
.
├── autoload
│   └── vimspector
│       └── internal
├── configurations
│   └── linux
│       └── _all
├── doc
├── gadgets
│   └── linux
│       ├── CodeLLDB -&gt; download/CodeLLDB/v1.9.2/root/extension
│       ├── debugpy -&gt; download/debugpy/1.7.0/root/debugpy-1.7.0
│       ├── delve -&gt; download/delve
│       ├── download
│       ├── local-lua-debugger-vscode -&gt; download/local-lua-debugger-vscode
│       ├── netcoredbg -&gt; download/netcoredbg/2.2.3-992/root/netcoredbg
│       ├── tclpro -&gt; download/tclpro
│       ├── vscode-bash-debug -&gt; download/vscode-bash-debug/0.3.9/root/extension
│       ├── vscode-cpptools -&gt; download/vscode-cpptools/1.17.5/root/extension
│       ├── vscode-go -&gt; download/vscode-go/0.30.0/root/extension
│       └── vscode-js-debug -&gt; download/vscode-js-debug/v1.82.0/root
├── plugin
├── python3
│   └── vimspector
│       ├── custom
│       ├── __pycache__
│       └── vendor
├── support
│   ├── bin
│   ├── doc
│   ├── gadget_upgrade
│   ├── test
│   │   ├── bash
│   │   ├── cpp
│   │   ├── csharp
│   │   ├── example
│   │   ├── go
│   │   ├── java
│   │   ├── kotlin
│   │   ├── lua
│   │   ├── multiple_filetypes
│   │   ├── node
│   │   ├── php
│   │   ├── python
│   │   ├── ruby
│   │   ├── rust
│   │   ├── tcl
│   │   └── web
│   └── vimspector_process_list
└── tests
</pre>

<p><div class="rs-tip-major">Poznámka: samozřejmě můžeme využít schopnosti Vimu
pracovat s&nbsp;balíčky a přesunout rozbalenou adresářovou strukturu do
poadresáře <strong>~/.vim/pack</strong>. To je výhodnější ve chvíli, kdy je
nainstalováno větší množství balíčků, které je nutné nějakým způsobem
spravovat.</div></p>

<p><div class="rs-tip-major">Poznámka<sup>2</sup>: taktéž si nemusíte stahovat
poslední oficiální vydání Vimspectoru, ale můžete si do
<strong>~/.vim/pack/plugins/</strong> přímo naklonovat obsah repositáře <a
href="https://github.com/puremourning/vimspector">https://github.com/puremourning/vimspector</a>
(s&nbsp;případným uvedením tagu atd.)</div></p>

<p>Dále je vhodné provést nepatrnou změnu konfiguračního souboru
<strong>.vimrc</strong>. Následující konfigurační řádek (deklarace proměnné)
slouží k&nbsp;nastavení klávesových zkratek, kterými se <i>Vimspector</i>
ovládá:</p>

<pre>
let g:vimspector_enable_mappings = 'HUMAN'
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. 400 megabajtů pro pouhý debugger?</h2>

<p><a href="#k01">V&nbsp;úvodní kapitole</a> jsme se zmínili o tom, že jednou
z&nbsp;nevýhod <i>Vimspectoru</i> je fakt, že se jedná o obrovský balíček. Je
tomu tak z&nbsp;toho důvodu, že tarball obsahuje i samotné debuggery, což jsou
mnohdy velké balíčky (především díky statickému linkování). Můžeme se o tom
ostatně velmi snadno přesvědčit pohledem do podadresáře <strong>...
gadgets/linux</strong>, který debuggery obsahuje:</p>

<pre>
$ <strong>du -sh *</strong>
&nbsp;
197M    CodeLLDB
60M     debugpy
71M     delve
111M    local-lua-debugger-vscode
13M     netcoredbg
30M     tclpro
2.1M    vscode-bash-debug
329M    vscode-cpptools
4.6M    vscode-go
4.3M    vscode-js-debug
</pre>

<p>V&nbsp;praxi to ovšem znamená to, že pokud například budete chtít používat
pouze debugger pro Python, lze smazat všechny ostatní debuggery (samozřejmě
kromě <strong>debugpy</strong>). Dtto pro programovací jazyk Go a debugger
<strong>delve</strong> atd.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Konfigurace projektu, který se má ladit</h2>

<p>Nyní, když již (doufejme) máme přídavný modul <i>Vimspector</i>
nainstalován, si můžeme ukázat základní způsoby jeho používání. To ovšem není
triviální, protože chování <i>Vimspectoru</i> je do značné míry ovlivněno
konfiguračním souborem nazvaným <strong>.vimspector.json</strong>, který je
nutné pro aktuální projekt vytvořit. Samotný konfigurační soubor umožňuje
používat <i>Vimspector</i> velmi flexibilním způsobem (například i pro vzdálené
ladění přes SSH), ovšem nutnost prvotního nastavení projektu je minimálně
nepříjemná.</p>

<p>V&nbsp;dalším textu si ukážeme <i>Vimspector</i> použitý pro ladění
Pythonovských skriptů, takže se podívejme, jak by mohl vypadat ten
nejjednodušeji pojatý konfigurační soubor. Specifikujeme v&nbsp;něm jak
konkrétní debugger (tedy <strong>debugpy</strong> &ndash; je součástí instalace
<i>Vimspectoru</i>), tak i způsob načtení konkrétního zdrojového kódu (nebo
modulu) do debuggeru (konkrétně se do debuggeru načte soubor
<strong>add.py</strong>, který budeme ladit):</p>

<pre>
{
  "$schema": "https://puremourning.github.io/vimspector/schema/vimspector.schema.json",
  "configurations": {
      "main":{
          "adapter": "debugpy",
          "configuration": {
              "name": "run the executable",
              "type": "python",
              "request": "launch",
              "python.pythonPath": "/usr/bin/python3",
              "program": "~/add.py"
          },
          "breakpoints": {
              "exception": {
                  "raised": "N",
                  "caught": "N",
                  "uncaught": "Y",
                  "userUnhandled": "N"
              }
          }
      }
  }
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Nastavení breakpointů v&nbsp;laděném skriptu</h2>

<p>Nyní si již můžeme spustit textový editor Vim a otevřít v&nbsp;něm soubor
nazvaný <strong>add.py</strong>. Tento soubor bude obsahovat testovanou
funkci:</p>

<pre>
def <strong>add</strong>(x, y):
    return x+y
&nbsp;
def <strong>main</strong>():
    x = add(10, 20)
    y = add("foo", "bar")
    z = add([1,2,3], [4,5,6])
&nbsp;
print("add.py script started")
main()
print("add.py script finished")
</pre>

<p>Umístíme textový kurzor kamkoli na řádek s&nbsp;příkazem <strong>x = add(10,
20)</strong>:</p>

<img src="https://i.iinfo.cz/images/411/vimspector-1.webp" class="image-1112409" width="564" height="285" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 4: Soubor se zdrojovým kódem, který budeme ladit, otevřený ve Vimu.</i></p>

<p>Pokud nyní stiskneme klávesu <strong>F9</strong> (a vše je dobře
nakonfigurováno), zobrazí se v&nbsp;levé části okna nový pruh, který je typicky
nazývaný <i>gutter</i>, ve Vimu pak <i>sign(s)</i>. V&nbsp;tomto pruhu se
objeví znak pro <i>breakpoint</i>, který jsme klávesou <strong>F9</strong>
nastavili:</p>

<img src="https://i.iinfo.cz/images/411/vimspector-2.webp" class="image-1112410" width="424" height="288" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 5: Zobrazení informace o nastaveném breakpointu.</i></p>

<p><div class="rs-tip-major">Poznámka: opětovným stiskem klávesy
<strong>F9</strong> se breakpoint vymaže.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Spuštění a ukončení debuggeru</h2>

<p>V&nbsp;případě, kdy již máme nastavený breakpoint, můžeme spustit debugger.
Tato operace se provádí klávesovou zkratkou <strong>F5</strong>, která navíc
způsobí, že se textový editor Vim přepne do nového &bdquo;pohledu&ldquo; (i
když koncept pohledů samotný Vim nepodporuje). Na ploše editoru se zobrazí
několik oken, z&nbsp;nichž každé zobrazuje určité ucelené informace: hodnoty
globálních a lokálních symbolů, výsledek vyhodnocení nějakého výrazu (což může
být jen jméno proměnné), obsah zásobníkových rámců pro všechna vlákna, samotný
zdrojový kód s&nbsp;právě prováděným řádkem a samozřejmě taktéž okno
s&nbsp;výstupem na standardní výstup a chybový výstup. Ve výchozím nastavení
vypadá plocha Vimu při ladění následovně:</p>

<a href="https://www.root.cz/obrazek/1112411/"><img src="https://i.iinfo.cz/images/411/vimspector-3-prev.webp" class="image-1112411" width="370" height="222" data-prev-filename="https://i.iinfo.cz/images/411/vimspector-3-prev.webp" data-prev-width="370" data-prev-height="222" data-large-filename="https://i.iinfo.cz/images/411/vimspector-3-large.webp" data-large-width="720" data-large-height="431" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 6: Plocha Vimu ve chvíli, kdy je aplikace laděna.</i></p>

<p><div class="rs-tip-major">Poznámka: okna debuggeru se chovají jako běžná
okna ve Vimu, takže je lze přesouvat (<strong>Ctrl-w</strong>+další znak),
měnit jejich velikost, pořadí atd.</div></p>

<p>Debugger lze ukončit buď tlačítkem <i>Reset</i> nebo příkazem:</p>

<pre>
:VimspectorReset
</pre>

<p>(nestačí pouze zavřít všechna jeho speciální okna).</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Krokování a zobrazení obsahu proměnných při ladění</h2>

<p>Samotné krokování se provádí klávesami <strong>F10</strong> (volání funkce
je v&nbsp;tomto případě považováno za jeden krok), <strong>F11</strong> (při
volání funkce se krokují i příkazy v&nbsp;této funkci) a <strong>F12</strong>
(přesun na další příkaz v&nbsp;nadřazené funkci). Příkaz, který se má provést
v&nbsp;dalším kroku, je v&nbsp;okně Vimu zvýrazněn. Navíc se při každém kroku
automaticky detekují a zobrazují změny globálních proměnných
popř.&nbsp;proměnných lokálních:</p>

<a href="https://www.root.cz/obrazek/1112412/"><img src="https://i.iinfo.cz/images/411/vimspector-4-prev.webp" class="image-1112412" width="361" height="270" data-prev-filename="https://i.iinfo.cz/images/411/vimspector-4-prev.webp" data-prev-width="361" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/411/vimspector-4-large.webp" data-large-width="701" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 7: V&nbsp;levém horním okně jsou zobrazeny obsahy globálních i
lokálních proměnných. Dalším krokem bude provedení zvýrazněného příkazu, což
mj.&nbsp;znamená, že v&nbsp;tento okamžik jsou známy pouze lokální proměnné
<strong>x</strong> a <strong>y</strong>.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Zobrazení hodnot zadaných výrazů</h2>

<p>Prakticky všechny moderní debuggery dokážou zobrazit i výsledky získané
vyhodnocením nějakého výrazu, samozřejmě s&nbsp;tím, že se tyto výsledky po
provedení kroků mohou aktualizovat. Tento koncept je podporován i Vimspectorem.
Postačuje v&nbsp;okně &bdquo;Watches&ldquo; s&nbsp;využitím tlačítka
<strong>Add</strong> přidat do tohoto okna nový sledovaný výraz. Ten je
následně v&nbsp;tomto okně zobrazován až do chvíle, kdy je vymazán tlačítkem
<strong>Delete</strong>:</p>

<a href="https://www.root.cz/obrazek/1112413/"><img src="https://i.iinfo.cz/images/411/vimspector-5-prev.webp" class="image-1112413" width="370" height="138" data-prev-filename="https://i.iinfo.cz/images/411/vimspector-5-prev.webp" data-prev-width="370" data-prev-height="138" data-large-filename="https://i.iinfo.cz/images/411/vimspector-5.webp" data-large-width="600" data-large-height="224" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 8: Zobrazení obsahu dvou výrazů v&nbsp;okně Watches.</i></p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě, že se vám nechce klikat
na tlačítko <strong>Add</strong> (a kdo by ve Vimu používal myš, že?), lze
namísto toho zavolat příkaz:</div></p>

<pre>
:VimspectorWatch <i>výraz</i>
</pre>

<p>Například:</p>

<pre>
:VimspectorWatch len(y)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Zobrazení zásobníkových rámců</h2>

<p>V&nbsp;levém dolním rohu je implicitně zobrazeno okno, v&nbsp;němž jsou
zobrazeny zásobníkové rámce všech běžících vláken. Zde je možné sledovat
historii volání funkcí atd., podobně jako je tomu ve většině debuggerů:</p>

<a href="https://www.root.cz/obrazek/1112414/"><img src="https://i.iinfo.cz/images/411/vimspector-6-prev.webp" class="image-1112414" width="327" height="270" data-prev-filename="https://i.iinfo.cz/images/411/vimspector-6-prev.webp" data-prev-width="327" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/411/vimspector-6.webp" data-large-width="602" data-large-height="497" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 9: Zobrazení zásobníkových rámců.</i></p>

<p>Pro zajímavost se podívejme, jak vypadá zobrazení zásobníkových rámců
v&nbsp;případě, že ladíme vícevláknovou aplikaci:</p>

<a href="https://www.root.cz/obrazek/1112415/"><img src="https://i.iinfo.cz/images/411/vimspector-7-prev.webp" class="image-1112415" width="370" height="247" data-prev-filename="https://i.iinfo.cz/images/411/vimspector-7-prev.webp" data-prev-width="370" data-prev-height="247" data-large-filename="https://i.iinfo.cz/images/411/vimspector-7.webp" data-large-width="600" data-large-height="400" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 10: Zobrazení zásobníkových rámců u vícevláknové aplikace.</i></p>

<p>Mimochodem, jedná se o ladění tohoto jednoduchého kódu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Multithreading."""</i>
&nbsp;
import threading
import time
&nbsp;
&nbsp;
def <strong>worker</strong>():
    threadName = threading.current_thread().name
    delay = 100
    n = 10
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
<i># vytvoření a spuštění trojice vláken</i>
threading.Thread(target=worker).start()
threading.Thread(target=worker).start()
threading.Thread(target=worker).start()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Konfigurační soubor umožňující ladění dvou aplikací</h2>

<p>Ukažme si, jak lze konfigurační soubor <strong>.vimspector.json</strong>
pravit takovým způsobem, aby umožnil ladění dvou aplikací, přičemž pro
jednoduchost každou aplikaci realizujeme v&nbsp;jediném pythonovském skriptu.
Úprava je snadná, jen nesmíme zapomenout na oddělení jednotlivých konfigurací
čárkou:</p>

<pre>
{
  "$schema": "https://puremourning.github.io/vimspector/schema/vimspector.schema.json",
  "configurations": {
      "add":{
          "adapter": "debugpy",
          "configuration": {
              "name": "run the executable",
              "type": "python",
              "request": "launch",
              "python.pythonPath": "/usr/bin/python3",
              "program": "~/add.py"
          },
          "breakpoints": {
              "exception": {
                  "raised": "N",
                  "caught": "N",
                  "uncaught": "Y",
                  "userUnhandled": "N"
              }
          }
      },
      "ackermann":{
          "adapter": "debugpy",
          "configuration": {
              "name": "run the executable",
              "type": "python",
              "request": "launch",
              "python.pythonPath": "/usr/bin/python3",
              "program": "~/ackermann.py"
          },
          "breakpoints": {
              "exception": {
                  "raised": "N",
                  "caught": "N",
                  "uncaught": "Y",
                  "userUnhandled": "N"
              }
          }
      }
  }
}
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Ladění aplikace s&nbsp;velkou hloubkou rekurze při spuštění</h2>

<p>Zajímavé bude zjistit, jakým způsobem dokáže Vimspector podpořit ladění
aplikace (resp.&nbsp;přesněji řečeno v&nbsp;našem případě pouze jednoduchého
skriptu), v&nbsp;případě, kdy se při výpočtu použije velká hloubka rekurze.
Příkladem takového výpočtu je realizace algoritmu pro vyhodnocení Ackermannovy
funkce pro zadanou dvojici parametrů <strong>m</strong> a <strong>n</strong>.
Zdrojový kód, který budeme ladit, vypadá následovně:</p>

<pre>
<i># Výpočet Ackermannovy funkce, založeno na pattern matchingu</i>
&nbsp;  
def <strong>A</strong>(m, n):
    <i>"""Ackermannova funkce."""</i>
    match (m, n):
        case (0, n):
            return n + 1
        case (m, 0):
            return A(m-1, 1)
        case (m, n):
            return A(m - 1, A(m, n - 1))
&nbsp;
print(A(5, 5))
</pre>

<p><div class="rs-tip-major">Poznámka: schválně jsem použil pattern matching,
aby bylo zřejmé, že ani s&nbsp;takovým kódem nebude mít Vimspector a pythonní
debugger problémy.</div></p>

<p>Ze screenshotů je patrné, že i v&nbsp;případě velké hloubky zanoření je
možné Vimspector použít:</i></p>

<p><i>Obrázek 11: Zobrazení zdrojového kódu, který se bude ladit, v&nbsp;okně
textového editoru Vim.</i></p>

*** image ***
<p><i>Obrázek 12: Přidání breakpointu na zvolený řádek zdrojového kódu
klávesovou zkratkou <strong>F9</strong>.</i></p>

*** image ***
<p><i>Obrázek 13: Před spuštěním debuggeru (klávesová zkratka
<strong>F5</strong>) se Vimspector zeptá, jakou aplikaci budeme ladit. Je tomu
tak z&nbsp;toho důvodu, že jsme do konfiguračního souboru
<strong>.vimspector.json</strong> přidali konfiguraci pro druhou
aplikaci.</i></p>

*** image ***
<p><i>Obrázek 14: Takto probíhá ladění aplikace pro výpočet Ackermannovy
funkce.</i></p>

*** image ***
<p><i>Obrázek 15: Ladění aplikace pro výpočet Ackermannovy funkce &ndash; vyšší
počet zanoření při rekurzivním výpočtu. Vimspector je stále plně
funkční.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zobrazení obsahu parametru či proměnné přímo v&nbsp;okně editoru se zdrojovým kódem</h2>

<p>V&nbsp;případě, že namísto Vimu běžícího v&nbsp;konzoli (terminálu)
použijete GVim či KVim, tedy Vim běžící ve vlastním grafickém okně, je možné
využít další funkci, kterou můžeme znát z&nbsp;integrovaných vývojových
prostředí &ndash; po najetí kurzorem myši na nějakou proměnnou či parametr
funkce se v&nbsp;&bdquo;popup okně&ldquo; zobrazí aktuální obsah této proměnné.
Ostatně je možné si toto chování snadno otestovat:</p>

*** image ***
<p><i>Obrázek 16: Zobrazení obsahu proměnné <strong>m</strong> v&nbsp;popup
okně v&nbsp;průběhu laděni.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Časté problémy</h2>

<p>Po instalaci VimSpectoru a spuštění Vimu se pokuste vyvolat nějaký příkaz
VimSpectoru, například:</p>

<pre>
:VimspectorDebugInfo
</pre>

<p>Tím se ověří minimálně to, že je plugin nalezen a inicializován.</p>

<p>V&nbsp;případě, že není možné nastavit breakpoint (<strong>F9</strong>) nebo
spustit debugger (<strong>F5</strong>), přesvědčte se, že nemáte namapovány
klávesové zkratky <strong>Fx</strong> na jiné operace. To byl můj případ,
protože v&nbsp;konfiguračním souboru <strong>.vimrc</strong> mám pro Python
využity mnohé zkratky, které jsou obsazeny i samotným Vimspectorem:</p>

<pre>
augroup __python__
  au!
  au BufRead,BufNewFile *.py highlight Comment ctermfg=green
  au BufRead,BufNewFile *.py map &lt;F8&gt; :!pep8 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F9&gt; :!/home/ptisnovs/.local/bin/pydocstyle ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F10&gt; :!radon cc -s ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F11&gt; :!radon mi ./%&lt;cr&gt;
  au BufRead,BufNewFile *.py map ,r :!python3 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F5&gt; :!python2 %&lt;cr&gt;
  au BufRead,BufNewFile *.py map &lt;F6&gt; :!python3 %&lt;cr&gt;
  au BufRead,BufNewFile *.py highlight OverLength ctermbg=yellow ctermfg=white guibg=#592929
  au BufRead,BufNewFile *.py match OverLength /\%99v.\+/
augroup END
</pre>

<p>A samozřejmě je vhodné zajistit existenci souboru
<strong>.vimspector.json</strong>.</p>

<p>Většinu ostatních problémů už dokáže VimSpector zobrazit &ndash; chybějící
debugger, zprávu o tom, že se nepodařilo propojení s&nbsp;debuggerem atd.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Debugging debuggeru</h2>

<p>Při řešení komplikovanějších problémů s&nbsp;debuggerem je vhodné na prvním
místě spustit příkaz, který jsme si uvedli v&nbsp;předchozí kapitole:</p>

<pre>
:VimspectorDebugInfo
</pre>

<p>Výstupem je text zobrazený v&nbsp;konzoli Vimspectoru (pravé dolní okno
&ndash; viz příslušné tlačítko), což znamená, že si tento text můžete prohlížet
a taktéž uložit (exportovat) do souboru. V&nbsp;mém konkrétním případě, tedy
při ladění skriptu napsaného v&nbsp;Pythonu, vypadá výstup takto:</p>

<pre>
Vimspector Debug Info
--------------------------------------------------------------------------------
ConnectionType: job
Adapter: 
--------------------------------------------------------------------------------
{
  "command": [
    "/usr/bin/python3",
    "/home/ptisnovs/.vim/gadgets/linux/debugpy/build/lib/debugpy/adapter"
  ],
  "configuration": {
    "python": "/usr/bin/python3"
  },
  "custom_handler": "vimspector.custom.python.Debugpy",
  "name": "debugpy",
  "env": {},
  "cwd": "/home/ptisnovs"
}
--------------------------------------------------------------------------------
Configuration: 
--------------------------------------------------------------------------------
{
  "adapter": "debugpy",
  "configuration": {
    "name": "run the executable",
    "type": "python",
    "request": "launch",
    "python.pythonPath": "/usr/bin/python3",
    "program": "/home/ptisnovs/add.py"
  },
  "breakpoints": {
    "exception": {
      "raised": "N",
      "caught": "N",
      "uncaught": "Y",
      "userUnhandled": "N"
    }
  }
}
--------------------------------------------------------------------------------
API Prefix: 
Launch/Init: True / True
Workspace Root: /home/ptisnovs
Launch Config: 
--------------------------------------------------------------------------------
{
  "python": "/usr/bin/python3",
  "name": "run the executable",
  "type": "python",
  "request": "launch",
  "python.pythonPath": "/usr/bin/python3",
  "program": "/home/ptisnovs/add.py"
}
--------------------------------------------------------------------------------
Server Capabilities: 
--------------------------------------------------------------------------------
{
  "supportsCompletionsRequest": true,
  "supportsConditionalBreakpoints": true,
  "supportsConfigurationDoneRequest": true,
  "supportsDebuggerProperties": true,
  "supportsDelayedStackTraceLoading": true,
  "supportsEvaluateForHovers": true,
  "supportsExceptionInfoRequest": true,
  "supportsExceptionOptions": true,
  "supportsFunctionBreakpoints": true,
  "supportsHitConditionalBreakpoints": true,
  "supportsLogPoints": true,
  "supportsModulesRequest": true,
  "supportsSetExpression": true,
  "supportsSetVariable": true,
  "supportsValueFormattingOptions": true,
  "supportsTerminateRequest": true,
  "supportsGotoTargetsRequest": true,
  "supportsClipboardContext": true,
  "exceptionBreakpointFilters": [
    {
      "filter": "raised",
      "label": "Raised Exceptions",
      "default": false,
      "description": "Break whenever any exception is raised."
    },
    {
      "filter": "uncaught",
      "label": "Uncaught Exceptions",
      "default": true,
      "description": "Break when the process is exiting due to unhandled exception."
    },
    {
      "filter": "userUnhandled",
      "label": "User Uncaught Exceptions",
      "default": false,
      "description": "Break when exception escapes into library code."
    }
  ],
  "supportsStepInTargetsRequest": true
}
--------------------------------------------------------------------------------
Line Breakpoints: 
--------------------------------------------------------------------------------
{
  "/home/ptisnovs/add.py": [
    {
      "state": "ENABLED",
      "line": 7,
      "options": {},
      "is_instruction_breakpoint": null,
      "sign_id": 2,
      "server_bp": {
        "0": {
          "verified": true,
          "id": 0,
          "source": {
            "name": "add.py",
            "path": "/home/ptisnovs/add.py"
          },
          "line": 7
        }
      }
    }
  ]
}
--------------------------------------------------------------------------------
Func Breakpoints: 
--------------------------------------------------------------------------------
[]
--------------------------------------------------------------------------------
Ex Breakpoints: 
--------------------------------------------------------------------------------
{
  "filters": [
    "uncaught"
  ],
  "exceptionOptions": []
}
--------------------------------------------------------------------------------
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Příloha: základní klávesové zkratky pro ovládání Vimspectoru</h2>

<p>Pro úplnost si uveďme základní klávesové zkratky, kterými se Vimspector
ovládá. K&nbsp;dispozici jsou dvě sady zkratek nastavované globální proměnnou
<strong>vimspector_enable_mappings</strong>:</p>

<pre>
let g:vimspector_enable_mappings = 'VISUAL_STUDIO'
</pre>

<p>nebo:</p>

<pre>
let g:vimspector_enable_mappings = 'HUMAN'
</pre>

<p>Toto nastavení proveďte ve vašem souboru <strong>.vimrc</strong>.</p>

<p>Klávesové zkratky v&nbsp;režimu, který napodobuje Visual Studio:</p>

<table>
<tr><th>Klávesová zkratka</th><th>Stručný popis</th></tr>
<tr><td>F5</td><td>spuštění debuggeru popř.&nbsp;pokračování ladění</td></tr>
<tr><td>Shift + F5</td><td>zastavení debuggeru (nebude funkční ve všech terminálech)</td></tr>
<tr><td>F6</td><td>pozastavení ladění</td></tr>
<tr><td>F8</td><td>skok na další breakpoint, který byl nastaven v&nbsp;laděném souboru</td></tr>
<tr><td>Shift + F8</td><td>skok na předchozí breakpoint, který byl nastaven v&nbsp;laděném souboru</td></tr>
<tr><td>F9</td><td>nastavení breakpointu na aktuálním řádku popř.&nbsp;naopak odstranění breakpointu</td></tr>
<tr><td>Shift + F9</td><td>nastavení breakpointu pro výraz, který se nachází pod kurzorem</td></tr>
<tr><td>F10</td><td>krok při ladění bez vstupu do volané funkce</td></tr>
<tr><td>F11</td><td>krok při ladění se vstupem do volané funkce</td></tr>
<tr><td>Shift + F11</td><td>výskok z&nbsp;laděné funkce</td></tr>
<tr><td>Alt + 8</td><td>zobrazení disassemblovaného kódu (není funkční pro Python)</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: klávesové zkratky Shift + Fn nemusí být
plně funkční ve všech terminálech.</div></p>

<p>Klávesové zkratky v&nbsp;režimu nazvaném &bdquo;HUMAN&ldquo;:</p>

<table>
<tr><th>Klávesová zkratka</th><th>Stručný popis</th></tr>
<tr><td>F5</td><td>spuštění debuggeru popř.&nbsp;pokračování ladění</td></tr>
<tr><td>F3</td><td>zastavení debuggeru</td></tr>
<tr><td>F4</td><td>znovuspuštění debuggeru</td></tr>
<tr><td>F6</td><td>pozastavení ladění</td></tr>
<tr><td>F8</td><td>nastavení breakpointu pro výraz, který se nachází pod kurzorem</td></tr>
<tr><td>F9</td><td>nastavení breakpointu na aktuálním řádku popř.&nbsp;naopak odstranění breakpointu</td></tr>
<tr><td>klávesa <i>leader</i> F8</td><td>doskok na místo, na kterém se nachází kurzor</td></tr>
<tr><td>F10</td><td>krok při ladění bez vstupu do volané funkce</td></tr>
<tr><td>F11</td><td>krok při ladění se vstupem do volané funkce</td></tr>
<tr><td>F12</td><td>výskok z&nbsp;laděné funkce</td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Závěr</h2>

<p>Z&nbsp;Vimspectoru mám popravdě řečeno poněkud rozporuplné pocity. Na jednu
stranu je patrné, jak se jeho autoři snaží o dosažení stejné funkcionality,
kterou v&nbsp;současnosti od moderních debuggerů (nebo od uživatelských
rozhraní k&nbsp;nim) očekáváme. Současně je možné Vimspector skutečně
v&nbsp;praxi používat. A velkou výhodou může být, že jsou stále
k&nbsp;dispozici vimovské klávesové zkratky, a to i v&nbsp;konzolích (takže
budou fungovat regulární výrazy atd.). A navíc má uživatel možnost si plně
přenastavit klávesové zkratky.</p>

<p>Ovšem na stranu druhou je patrné, že autoři již narazili na meze možností
Vimu. Stále se totiž jedná v&nbsp;první řadě o textový editor a nikoli o
platformu určenou pro tvorbu přídavných modulů s&nbsp;plnohodnotným textovým či
grafickým uživatelským rozhraním. I z&nbsp;tohoto důvodu spíše v&nbsp;praxi
používám kombinaci Vimu pro tvorbu programového kódu a samostatně běžící
debugger PuDB, s&nbsp;nímž jsme se již na Rootu seznámili.</p>

<a href="https://www.root.cz/obrazek/331054/"><img src="https://i.iinfo.cz/images/442/pudb-8-prev.png" class="image-331054" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 17: Krokování aplikace v&nbsp;debuggeru PuDB. V&nbsp;tomto
barevném schématu je aktuální řádek zobrazen inverzně bíle. Navíc je zapnuto
zobrazení čísel řádků, takže vidíme, že se nacházíme ve zdrojovém kódu na řádku
číslo 47.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na relevantní články na Rootu</h2>

<ol>

<li>Užitečné skripty a pluginy pro textový editor Vim<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (2.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-2-cast/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-2-cast/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (3.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-3-cast/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-3-cast/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (4.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-4-cast/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-4-cast/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (5.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-5-cast/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-5-cast/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (6.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-6-cast-cestovani-v-case/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-6-cast-cestovani-v-case/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim (7.část)<br />
<a href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-7-cast/">http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-7-cast/</a>
</li>

<li>Tvorba vlastního pluginu pro textový editor Vim<br />
<a href="http://www.root.cz/clanky/tvorba-vlastniho-pluginu-pro-textovy-editor-vim/">http://www.root.cz/clanky/tvorba-vlastniho-pluginu-pro-textovy-editor-vim/</a>
</li>

<li>Vim ve funkci textového editoru pro tvůrčí psaní<br />
<a href="https://www.root.cz/clanky/vim-ve-funkci-textoveho-editoru-pro-tvurci-psani/">https://www.root.cz/clanky/vim-ve-funkci-textoveho-editoru-pro-tvurci-psani/</a>
</li>

<li>Asynchronní skripty: další přiblížení Vimu k možnostem IDE<br />
<a href="https://www.root.cz/clanky/asynchronni-skripty-dalsi-priblizeni-vimu-k-moznostem-ide/">https://www.root.cz/clanky/asynchronni-skripty-dalsi-priblizeni-vimu-k-moznostem-ide/</a>
</li>

<li>Evil: kombinace editačních příkazů Vimu a síly Emacsu<br />
<a href="https://www.root.cz/clanky/evil-kombinace-editacnich-prikazu-vimu-a-sily-emacsu/">https://www.root.cz/clanky/evil-kombinace-editacnich-prikazu-vimu-a-sily-emacsu/</a>
</li>

<li>Spacemacs: to nejlepší z&nbsp;editorů Emacs a Vim<br />
<a href="https://www.root.cz/clanky/spacemacs-to-nejlepsi-z-editoru-emacs-a-vim/">https://www.root.cz/clanky/spacemacs-to-nejlepsi-z-editoru-emacs-a-vim/</a>
</li>

<li>Spacemacs: práce s&nbsp;projekty psanými v&nbsp;Pythonu a režim Org<br />
<a href="https://www.root.cz/clanky/spacemacs-prace-s-projekty-psanymi-v-pythonu-a-rezim-org/">https://www.root.cz/clanky/spacemacs-prace-s-projekty-psanymi-v-pythonu-a-rezim-org/</a>
</li>

<li>Projekt SpaceVim - moderní distribuce Vimu inspirovaná Spacemacsem<br />
<a href="https://www.root.cz/clanky/projekt-spacevim-moderni-distribuce-vimu-inspirovana-spacemacsem/">https://www.root.cz/clanky/projekt-spacevim-moderni-distribuce-vimu-inspirovana-spacemacsem/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>vimspectorpy - python default configurations for vimspector<br />
<a href="https://github.com/sagi-z/vimspectorpy">https://github.com/sagi-z/vimspectorpy</a>
</li>

<li>Setting up Vimspector<br />
<a href="https://puremourning.github.io/vimspector-web/demo-setup.html#starting-debugging">https://puremourning.github.io/vimspector-web/demo-setup.html#starting-debugging</a>
</li>

<li>Vimspector na GitHubu<br />
<a href="https://github.com/puremourning/vimspector">https://github.com/puremourning/vimspector</a>
</li>

<li>Vimspector releases<br />
<a href="https://github.com/puremourning/vimspector/releases">https://github.com/puremourning/vimspector/releases</a>
</li>

<li>Poslední dostupný build Vimspectoru<br />
<a href="https://github.com/puremourning/vimspector/releases/tag/6997902219">https://github.com/puremourning/vimspector/releases/tag/6997902219</a>
</li>

<li>Vimspector configuration<br />
<a href="https://puremourning.github.io/vimspector/configuration.html#python-debugpy-example">https://puremourning.github.io/vimspector/configuration.html#python-debugpy-example</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim: propojení Vimu s&nbsp;debuggery<br />
<a href="https://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-propojeni-vimu-s-debuggery/">https://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-propojeni-vimu-s-debuggery/</a>
</li>

<li>Introduction to the PuDB Python Debugging Tool<br />
<a href="http://heather.cs.ucdavis.edu/~matloff/pudb.html">http://heather.cs.ucdavis.edu/~matloff/pudb.html</a>
</li>

<li>pudb’s documentation<br />
<a href="https://documen.tician.de/pudb/">https://documen.tician.de/pudb/</a>
</li>

<li>pudb 2018.1 na PyPi<br />
<a href="https://pypi.org/project/pudb/">https://pypi.org/project/pudb/</a>
</li>

<li>PuDB, the IDE debugger without an IDE!<br />
<a href="https://www.youtube.com/watch?v=IEXx-AQLOBk">https://www.youtube.com/watch?v=IEXx-AQLOBk</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Pyclewn installation notes<br />
<a href="http://pyclewn.sourceforge.net/install.html">http://pyclewn.sourceforge.net/install.html</a>
</li>

<li>Clewn<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>Clewn installation<br />
<a href="http://clewn.sourceforge.net/install.html">http://clewn.sourceforge.net/install.html</a>
</li>

<li>Clewn - soubory<br />
<a href="http://sourceforge.net/projects/clewn/files/OldFiles/">http://sourceforge.net/projects/clewn/files/OldFiles/</a>
</li>

<li>Writing Vim Plugins<br />
<a href="http://stevelosh.com/blog/2011/09/writing-vim-plugins/">http://stevelosh.com/blog/2011/09/writing-vim-plugins/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

