<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Užitečné skripty a pluginy pro textový editor Vim (2.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Užitečné skripty a pluginy pro textový editor Vim (2.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o užitečných skriptech a pluginech určených pro textový editor Vim si popíšeme zejména rozšiřující modul Fugitive, který je použitelný zejména pro uživatele pracující s Gitem. Dále si popíšeme podobně zaměřený plugin nazvaný Vcscommand umožňující práci i s dalšími systémy pro správu verzí. Ovšem nezapomeneme ani na oblíbený NERD Tree.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Užitečné skripty a pluginy pro textový editor Vim (2.část)</a></p>
<p><a href="#k02">2. Plugin <strong>fugitive</strong></a></p>
<p><a href="#k03">3. Použití pluginu <strong>fugitive</strong></a></p>
<p><a href="#k04">4. Další příkazy nabízené pluginem <strong>fugitive</strong></a></p>
<p><a href="#k05">5. Plugin <strong>Vcscommand</strong></a></p>
<p><a href="#k06">6. Použití pluginu <strong>Vcscommand</strong></a></p>
<p><a href="#k07">7. Plugin <strong>NERD Tree</strong></a></p>
<p><a href="#k08">8. Klávesové zkratky pluginu <strong>NERD Tree</strong></a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Užitečné skripty a pluginy pro textový editor Vim (2.část)</h2>

<p>V&nbsp;první části článku o užitečných skriptech a rozšiřujících modulech
určených pro textový editor <i>Vim</i> jsme si popsali především skript nazvaný
<i>Vim Pathogen</i>, který je možné použít pro jednoduchou správu všech dalších
rozšiřujících modulů (pluginů). Víme již, že díky použití <i>Pathogenu</i> lze
každý plugin pouze jednoduše zkopírovat do zvláštního podadresáře umístěného
v&nbsp;adresáři <strong>~/.vim/bundle/</strong> &ndash; o korektní inicializaci
pluginů se již <i>Pathogen</i> postará automaticky. Automatizace pluginů může
ve skutečnosti jít ještě o krok dále, protože jednotlivé pluginy není nutné
ručně stahovat a posléze kopírovat do adresáře <strong>~/.vim/bundle/</strong>.
Naprostá většina pluginů je totiž přístupná z&nbsp;Git repositáře, takže ve
skutečnosti postačuje si takový plugin jednou naklonovat a posléze jednou za
čas v&nbsp;adresáři s&nbsp;pluginem (například
<strong>~/.vim/bundle/vim-airline</strong>) spustit příkaz <strong>git
pull</strong>, který daný plugin jednoduše zaktualizuje, se zachováním
případných uživatelových změn provedených ve skriptu.</p>

<p>V&nbsp;dalších kapitolách budeme předpokládat, že skript <i>Vim Pathogen</i>
byl nainstalován podle instrukcí uvedených <a
href="http://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim/">v&nbsp;první
části tohoto článku</a>. Adresářová struktura v&nbsp;uživatelově domovském
adresáři používaná <i>Vimem</i> by měla vypadat následovně:</p>

<pre>
.vim
├── autoload
│   └── pathogen.vim
└── spell
    ├── cs.iso-8859-2.spl
    └── cs.utf-8.spl
</pre>

<p>Aby se skript <i>Vim Pathogen</i> korektně aktivoval po každém spuštění
<i>Vimu</i>, je nutné provést ještě malou úpravu konfiguračního souboru
<strong>.vimrc</strong> umístěného v&nbsp;domácím adresáři. Do tohoto souboru
se musí dopsat volání funkce:</p>

<pre>
execute pathogen#infect()
</pre>

<a href="http://www.root.cz/obrazek/201483/"><img src="http://i.iinfo.cz/images/410/vim20-1-prev.png" class="image-201483" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 1: Jednou z&nbsp;možností zjištění, zda je skript Vim Pathogen
skutečně načten, je použití příkazu <strong>:echo g:loaded_pathogen</strong>,
který musí vypsat obsah globální proměnné nazvané
<strong>loaded_pathogen</strong>. Pokud tato proměnná neexistuje, nebyl Vim
Pathogen korektně inicializován.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Plugin <strong>fugitive</strong></h2>

<p>Prvním dnes popisovaným rozšiřujícím modulem určeným pro textový editor
<i>Vim</i> je plugin nazvaný <i>Fugitive</i>. Tento rozšiřující modul slouží
pro usnadnění práce s&nbsp;Gitem, resp.&nbsp;přesněji řečeno k&nbsp;práci se
soubory uloženými v&nbsp;naklonovaných Git repositářích. Plugin <i>Fugitive</i>
je dostupný na adrese <a
href="http://www.vim.org/scripts/script.php?script_id=2975">http://www.vim.org/scripts/script.php?script_id=2975</a>,
jeho vlastní Git repositář pak naleznete na adrese <a
href="https://github.com/tpope/vim-fugitive">https://github.com/tpope/vim-fugitive</a>.</p>

<a href="http://www.root.cz/obrazek/201484/"><img src="http://i.iinfo.cz/images/410/vim20-2-prev.png" class="image-201484" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 2: Součástí pluginu Fugitive je samozřejmě i nápověda, postačuje
zadat příkaz <strong>:help fugitive</strong>.</i></p>

<p>Po instalaci tohoto pluginu by měla struktura adresáře
<strong>~/.vim</strong> vypadat přibližně následovně (samozřejmě je možné, že
již budete mít nainstalovány nějaké další pluginy, například ty popsané
v&nbsp;první části tohoto článku):</p>

<pre>
.
├── autoload
├── bundle
│   └── vim-fugitive
│       ├── doc
│       └── plugin
└── spell
</pre>

<p>Po instalaci pluginu <i>Fugitive</i> a po spuštění nové instance <i>Vimu</i>
je pro každý buffer, který je součástí naklonovaného Git repositáře,
k&nbsp;dispozici několik nových příkazů popsaných v&nbsp;navazujících dvou
kapitolách. Důležité přitom je, že tyto příkazy jsou skutečně aktivní pouze pro
buffery odpovídající souborům uloženým v&nbsp;Git repositáři.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Použití pluginu <strong>fugitive</strong></h2>

<p>Otestování funkčnosti rozšiřujícího modulu <i>Fugitive</i> lze provést
jednoduše. Nejprve je nutné přejít do adresáře, v&nbsp;němž se nachází soubory
naklonované z&nbsp;Git repositáře; může se klidně jednat o adresář
s&nbsp;naklonovaným pluginem <i>Fugitive</i>. Následně se spustí Vim či Gvim a
otevře se buffer obsahující nějaký soubor, který je již součástí
repositáře:</p>

<pre>
vim soubor_z_gitu
</pre>

<p>Nyní by uživatel textového editoru Vim měl mít k&nbsp;dispozici velké
množství nových příkazů, které všechny začínají na písmeno <strong>G</strong>
(jedná se skutečně o velké G). Jak je však možné si tyto příkazy vypsat?
Postačuje nepatrně změnit nastavení Vimu následujícím způsobem:</p>

<pre>
set wildmenu
set wildmode=list:longest,full
</pre>

<p>Posléze se všechny příkazy začínající na písmeno <strong>G</strong> zobrazí
takto:</p>

<pre>
:G&lt;Tab&gt;
</pre>

<a href="http://www.root.cz/obrazek/201485/"><img src="http://i.iinfo.cz/images/410/vim20-3-prev.png" class="image-201485" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 3: V&nbsp;závislosti na nastavení Vimu je možné si jednoduše
vypsat všechny příkazy začínající na písmeno G s&nbsp;využitím
<strong>:G[Tab]</strong>.</i></p>

<p>Základní čtyři příkazy poskytované pluginem <i>Fugitive</i> jsou uvedeny
v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Příkaz</th><th>Význam</th></tr>
<tr><td>1</td><td>:Gpull</td><td>zavolá příkaz <strong>git pull</strong></td></tr>
<tr><td>2</td><td>:Gpush</td><td>zavolá příkaz <strong>git push</strong>, případné chyby se vypisují do speciálního okna nazvaného <i>quick window</i> (stejně jako chyby při překladu atd.)</td></tr>
<tr><td>3</td><td>:Gcommit</td><td>zavolá příkaz <strong>git commit</strong> (pokud došlo ke změnám) popř.&nbsp;<strong>git status</strong> (pokud nedošlo k&nbsp;žádným změnám). Při commitu se otevře nové okno pro zadání zprávy.</td></tr>
<tr><td>4</td><td>:Gmerge</td><td>zavolá příkaz <strong>git merge</strong>, chyby se vypisují do speciálního okna nazvaného <i>quick window</i> (stejně jako chyby při překladu atd.)</td></tr>
</table>

<p>Předností využití těchto příkazů oproti jejich ekvivalentům zadávaným
z&nbsp;příkazové řádky je fakt, že se veškeré zprávy budou vypisovat přímo do
bufferů/oken textového editoru <i>Vim</i>, při commitu se navíc zadání zprávy
(<i>commit message</i>) provede v&nbsp;novém okně &ndash; to vše bez nutnosti
opustění prostředí Vimu. Pokud dojde k&nbsp;chybě, což se samozřejmě může stát,
zejména v&nbsp;případě příkazu <strong>:Gmerge</strong>, jsou tyto chyby
zobrazeny v&nbsp;okně <i>quick window</i> a navíc uloženy v&nbsp;paměti Vimu
takovým způsobem, že je lze zpracovat tzv.<i>quickfix</i> příkazy,
například:</p>

<table>
<tr><th></th><th></th></tr>
<tr><td>:cc</td><td>zobrazení chyby</td></tr>
<tr><td>:cn</td><td>zobrazení další chyby</td></tr>
<tr><td>:cp</td><td>zobrazení předchozí chyby</td></tr>
</table>

<a href="http://www.root.cz/obrazek/201486/"><img src="http://i.iinfo.cz/images/410/vim20-4-prev.png" class="image-201486" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 4: Takto vypadá výsledek příkazu <strong>:Glog</strong>.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Další příkazy nabízené pluginem <strong>fugitive</strong></h2>

<p>Přídavný modul <i>Fugitive</i> ve skutečnosti uživatelům nabízí i poměrně
velké množství dalších příkazů, které v&nbsp;menší či větší míře využívají
faktu, že jsou spuštěny přímo v&nbsp;prostředí Vimu a nikoli na příkazové
řádce. Pojďme si některé tyto příkazy alespoň ve stručnosti popsat:</p>

<table>
<tr><th> #</th><th>Příkaz</th><th>Význam</th></tr>
<tr><td>1</td><td>:Glog</td><td>do takzvaného <i>quickfix listu</i> uloží informace o všech revizích aktuálně editovaného souboru. Mezi revizemi se lze přepínat například s&nbsp;využitím příkazů <strong>:cn</strong> a <strong>:cp</strong>, vypsat změny přes <strong>:clist</strong></td></tr>
<tr><td>2</td><td>:Gllog</td><td>podobný příkaz jako <strong>:Glog</strong>, ale používá seznam lokací, zde se používají příkazy <strong>:lprev</strong> a <strong>:lnext</strong> pro procházení revizemi</td></tr>
<tr><td>3</td><td>:Gstatus</td><td>zobrazí aktuální stav Git repositáře, odpovídá <strong>git status</strong></td></tr>
<tr><td>4</td><td>:Gblame</td><td>aktuální okno se vertikálně rozdělí a v&nbsp;levém (novém) okně se pro každý řádek zobrazí autor poslední změny</td></tr>
<tr><td>5</td><td>:Gfetch</td><td>odpovídá příkazu <strong>git fetch</strong>, opět se zapamatováním chybových zpráv</td></tr>
<tr><td>6</td><td>:Gdiff</td><td>aktuální okno se rozdělí a zobrazí se změny v&nbsp;bufferu (používá se přitom režim <i>vimdiff</i>, takže dochází k&nbsp;synchronizaci při skrolování rozděleného okna atd.)</td></tr>
<tr><td>7</td><td>:Gsdiff</td><td>stejné jako předchozí příkaz, ale okno je vždy rozděleno horizontálně</td></tr>
<tr><td>8</td><td>:Gvdiff</td><td>stejné jako předchozí příkaz, ale okno je vždy rozděleno vertikálně (užitečnější, zejména na moderních širokoúhlých monitorech)</td></tr>
<tr><td>9</td><td>:Gread</td><td>umožňuje do aktuálního bufferu načíst libovolnou revizi souboru</td></tr>
</table>

<p><strong>Pozor:</strong> některé výše popsané příkazy nefungují korektně,
pokud máte ve <strong>.vimrc</strong> nastaveno <strong>:set
shellpipe=2&gt;</strong>.</p>

<a href="http://www.root.cz/obrazek/201487/"><img src="http://i.iinfo.cz/images/410/vim20-5-prev.png" class="image-201487" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 5: Pomocí příkazu <strong>:Gcommit</strong> lze provést commit, a
to bez nutnosti opuštění Vimu.</i></p>

<p>Velmi užitečný je v&nbsp;mnoha případech příkaz <strong>:Gread</strong>,
který částečně odpovídá chování externího příkazu <strong>git
checkout</strong>, ovšem provedeného jen pro aktuálně editovaný soubor/buffer
(ve skutečnosti jsou možnosti <strong>:Gread</strong> mnohem větší, více je
uvedeno v&nbsp;nápovědě). Tento příkaz se volá následovně:</p>

<pre>
:Gread revize
</pre>

<p>Po provedení tohoto příkazu se obsah bufferu změní takovým způsobem, že
odpovídá zadané revizi. Revizi lze zadat mnoha způsoby, například:</p>

<table>
<tr><th>Revize</th><th>Význam</th></tr>
<tr><td>^</td><td>předchozí commit</td></tr>
<tr><td>~1</td><td>dtto</td></tr>
<tr><td>~2</td><td>verze před dvěma commity</td></tr>
<tr><td>~3</td><td>verze před třemi commity</td></tr>
</table>

<a href="http://www.root.cz/obrazek/201488/"><img src="http://i.iinfo.cz/images/410/vim20-6-prev.png" class="image-201488" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 6: Užitečný je taktéž příkaz <strong>:Gblame</strong>.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Plugin <strong>Vcscommand</strong></h2>

<p>Přídavný modul <i>Fugitive</i> popsaný v&nbsp;předešlých třech kapitolách je
pro uživatele Gitu velmi užitečný a stává se i poměrně populárním. Ve
skutečnosti se ovšem u některých projektů používají odlišné systémy pro správu
verzí, ať již se jedná o CVS, Subversion či Mercurial (stranou přitom nyní
ponechme důvody, proč tomu tak je :-). Pro uživatele těchto systémů pro správu
verzí (ovšem včetně Gitu) existuje další plugin nazvaný <i>vcscommand</i>.
Přídavný modul <i>vcscommand</i> je umístěn v&nbsp;Git repositáři dostupném na
adrese <a
href="https://github.com/vim-scripts/vcscommand.vim.git">https://github.com/vim-scripts/vcscommand.vim.git</a>.</p>

<a href="http://www.root.cz/obrazek/201489/"><img src="http://i.iinfo.cz/images/410/vim20-7-prev.png" class="image-201489" width="370" height="234" alt="&#160;" /></a>
<p><i>Obrázek 7: Přídavný modul vcscommand je samozřejmě vybaven i nápovědou
dostupnou po zadání příkazu <strong>:help vcscommand</strong>.</i></p>

<p>Nejprve si ukažme, jak lze <i>vcscommand</i> nainstalovat přímo z&nbsp;výše
uvedeného repositáře, a to pomocí pouhých dvou příkazů (které nám navíc zajistí
možnost kdykoli provést aktualizaci tohoto pluginu):</p>

<pre>
<strong>cd ~/.vim/bundle</strong>
<strong>git clone https://github.com/vim-scripts/vcscommand.vim.git</strong>
&nbsp;
Cloning into 'vcscommand.vim'...
remote: Counting objects: 478, done.
remote: Total 478 (delta 0), reused 0 (delta 0), pack-reused 478
Receiving objects: 100% (478/478), 163.80 KiB | 0 bytes/s, done.
Resolving deltas: 100% (216/216), done.
Checking connectivity... done.
</pre>

<p>Výsledná struktura adresáře <strong>~/.vim/</strong> by měla vypadat
následovně:</p>

<pre>
.
├── autoload
├── bundle
│   ├── vcscommand.vim
│   │   ├── doc
│   │   ├── plugin
│   │   └── syntax
│   └── vim-fugitive
│       ├── doc
│       └── plugin
└── spell
</pre>

<a href="http://www.root.cz/obrazek/201490/"><img src="http://i.iinfo.cz/images/410/vim20-8-prev.png" class="image-201490" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 8: Užitečný příkaz <strong>:VCSBlame</strong>.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Použití pluginu <strong>Vcscommand</strong></h2>

<p>V&nbsp;přídavném modulu <i>vcscommand</i> je deklarováno několik nových
příkazů, které je možné použít pro prakticky všechny systémy pro správu verzí
(<i>VCS &ndash; Version Control System</i>). To sice může být poněkud matoucí,
protože různé VCS používají na příkazové řádce odlišné příkazy, na druhou
stranu to však znamená, že při přechodu na jiný typ VCS se uživatelé Vimu a
pluginu <i>vcscommand</i> mohou adaptovat na nový systém poměrně rychle
(minimálně to platí při přechodu mezi CSV a Subversion, popřípadě při přechodu
mezi Mercurialem a GITem).</p>

<a href="http://www.root.cz/obrazek/201491/"><img src="http://i.iinfo.cz/images/410/vim20-9-prev.png" class="image-201491" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 9: Dalším užitečným příkazem je <strong>:VCSLog</strong>.</i></p>

<p>V&nbsp;následující tabulce jsou vypsány základní (společné) nové
příkazy:</p>

<table>
<tr><th>#</th><th>Příkaz</th><th>Význam</th></tr>
<tr><td>1</td><td>:VCSAdd</td><td>přidání aktuálně editovaného souboru do systému pro správu verzí</td></tr>
<tr><td>2</td><td>:VCSCommit</td><td>přidání změn provedených v&nbsp;editovaném souboru do systému pro správu verzí</td></tr>
<tr><td>3</td><td>:VCSDelete</td><td>odstranění souboru ze systému pro správu verzí</td></tr>
<tr><td>4</td><td>:VCSRemove</td><td>(alias) odstranění souboru ze systému pro správu verzí</td></tr>
<tr><td>5</td><td>:VCSDiff</td><td>zobrazení změn provedených v&nbsp;aktuálně editovaném souboru oproti verzi uložené ve VCS</td></tr>
<tr><td>6</td><td>:VCSLog</td><td>zobrazení historie změn do nového bufferu (se zvýrazněním syntaxe atd.)</td></tr>
<tr><td>7</td><td>:VCSReview</td><td>zobrazení specifikované verze souboru</td></tr>
<tr><td>8</td><td>:VCSStatus</td><td>zobrazení stavu aktuálně editovaného souboru</td></tr>
</table>

<a href="http://www.root.cz/obrazek/201492/"><img src="http://i.iinfo.cz/images/410/vim20-10-prev.png" class="image-201492" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 10: Zobrazení změn provedených v&nbsp;souboru pomocí příkazu <strong>:VCSDiff</strong>.</i></p>

<p>Kromě toho je deklarováno ještě několik příkazů specifických pro stařičké
CVS:</p>

<table>
<tr><th>#</th><th>Příkaz</th><th>Význam</th></tr>
<tr><td>1</td><td>:CVSEdit</td><td>odpovídá příkazu <strong>cvs edit</strong> použitého pro aktuálně editovaný soubor</td></tr>
<tr><td>2</td><td>:CVSEditors</td><td>odpovídá příkazu <strong>cvs edit</strong> použitého pro aktuálně editovaný soubor</td></tr>
<tr><td>3</td><td>:CVSUnedit</td><td>odpovídá příkazu <strong>cvs unedit</strong></td></tr>
<tr><td>4</td><td>:CVSWatch</td><td>odpovídá příkazu <strong>cvs watch</strong> s&nbsp;parametrem <strong>on/off/add/remove</strong></td></tr>
<tr><td>5</td><td>:CVSWatchAdd</td><td>odpovídá příkazu <strong>cvs watch add</strong></td></tr>
<tr><td>6</td><td>:CVSWatchOn</td><td>odpovídá příkazu <strong>cvs watch on</strong></td></tr>
<tr><td>7</td><td>:CVSWatchOff</td><td>odpovídá příkazu <strong>cvs watch off</strong></td></tr>
<tr><td>8</td><td>:CVSWatchRemove</td><td>odpovídá příkazu <strong>cvs watch remove</strong></td></tr>
<tr><td>9</td><td>:CVSWatchers</td><td>odpovídá příkazu <strong>cvs watchers</strong> použitého pro aktuálně editovaný soubor</td></tr>
</table>

<a href="http://www.root.cz/obrazek/201493/"><img src="http://i.iinfo.cz/images/410/vim20-11-prev.png" class="image-201493" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 11: Uložení změn příkazem <strong>:VCSCommit</strong>.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Plugin <strong>NERD Tree</strong></h2>

<p>Třetím a současně i posledním dnes popisovaným přídavným modulem textového
editoru <i>Vim</i> je známý a mezi vimisty i velmi populární modul se jménem
<i>NERD Tree</i>. Základní informace o tomto modulu je možné nalézt na adrese <a
href="http://www.vim.org/scripts/scrip­t.php?script_id=1658">http://www.vim.org/scripts/scrip­t.php?script_id=1658</a>.
Instalace může proběhnout následujícím způsobem:</p>

<pre>
cd ~/.vim/bundle
git clone https://github.com/scrooloose/nerdtree.git
</pre>

<p>Výsledná struktura adresáře <strong>~/.vim/</strong> by po instalaci měla
vypadat například následovně (předpokládejme, že jsou nainstalovány všechny tři
dnes popisované přídavné moduly):</p>

<pre>
.
├── autoload
├── bundle
│   ├── nerdtree
│   │   ├── doc
│   │   ├── nerdtree_plugin
│   │   ├── plugin
│   │   └── syntax
│   ├── vcscommand.vim
│   │   ├── doc
│   │   ├── plugin
│   │   └── syntax
│   └── vim-fugitive
│       ├── doc
│       └── plugin
└── spell
</pre>

<a href="http://www.root.cz/obrazek/201494/"><img src="http://i.iinfo.cz/images/410/vim20-12-prev.png" class="image-201494" width="370" height="211" alt="&#160;" /></a>
<p><i>Obrázek 12: Nápověda k&nbsp;pluginu NERD Tree.</i></p>

<p>V&nbsp;modulu <i>NERD Tree</i> je implementován poměrně propracovaný správce
souborů založený na zobrazení stromu obsahujícího adresáře a soubory, podobně
jako je tomu i u většiny integrovaných vývojových prostředí. Strom se přitom
zobrazuje v&nbsp;samostatném podokně a pro jeho vyvolání se používá příkaz
<strong>:NERD Tree</strong>. Samozřejmě je možné si tento příkaz namapovat na
prakticky libovolnou klávesovou kombinaci, například pomocí následujícího
příkazu:</p>

<pre>
:map &lt;F12&gt; :NERDTree&lt;CR&gt;
</pre>

<p><i>NERD Tree</i> dokáže zvýraznit různé typy uzlů &ndash; především rozlišuje
mezi adresáři a běžnými soubory, ovšem zvýraznit dokáže taktéž spustitelné
soubory popř.&nbsp;soubory určené pouze pro čtení.</p>

<a href="http://www.root.cz/obrazek/201495/"><img src="http://i.iinfo.cz/images/410/vim20-13-prev.png" class="image-201495" width="370" height="243" alt="&#160;" /></a>
<p><i>Obrázek 13: Uživatelské prostředí přídavného modulu NERD Tree.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Klávesové zkratky pluginu <strong>NERD Tree</strong></h2>

<p>Po spuštění příkazu <strong>:NERDTree</strong> by mělo dojít
k&nbsp;rozdělení (<i>split</i>) aktuálního okna takovým způsobem, že se
uživatelské rozhraní modulu <i>NERD Tree</i> objeví v&nbsp;levé části. Jakmile
je kurzor do tohoto okna (bufferu) umístěn, lze používat následující základní
jednoklávesové příkazy:</p>

<table>
<tr><th>Klávesa</th><th>Význam</th></tr>
<tr><td>j,k</td><td>přesun kurzoru na další či předchozí soubor/adresář</td></tr>
<tr><td>o</td><td>otevření či skrytí obsahu adresáře, na němž se nachází kurzor</td></tr>
<tr><td>t</td><td>otevření vybraného souboru v&nbsp;novém tabu</td></tr>
<tr><td>i</td><td>horizontální rozdělení okna a otevření vybraného souboru v&nbsp;novém bufferu</td></tr>
<tr><td>s</td><td>vertikální rozdělení okna a otevření vybraného souboru v&nbsp;novém bufferu (<strong>s</strong> jako <strong>s</strong>plit)</td></tr>
</table>

<a href="http://www.root.cz/obrazek/201496/"><img src="http://i.iinfo.cz/images/410/vim20-14-prev.png" class="image-201496" width="370" height="267" alt="&#160;" /></a>
<p><i>Obrázek 14: V&nbsp;levé části jsou zobrazeny klávesové zkratky používané
přídavným modulem NERD Tree.</i></p>

<p>Ve skutečnosti je však deklarováno i mnoho dalších klávesových zkratek,
například zkratky ovlivňující způsob zobrazení okna <i>NERD Tree</i>:</p>

<table>
<tr><th>Klávesa</th><th>Význam</th></tr>
<tr><td>?</td><td>zapnutí či vypnutí nápovědy zobrazené přímo v&nbsp;okně NERD Tree</td></tr>
<tr><td>m</td><td>zobrazení menu NERD Tree (viz další text)</td></tr>
<tr><td>R</td><td>znovunačtení stromu, překreslení okna NERD Tree (lze využít ve chvíli, kdy je nějaký soubor změněn mimo Vim)</td></tr>
<tr><td>I</td><td>zobrazení či vypnutí zobrazení skrytých souborů</td></tr>
</table>

<p>Zajímavá je klávesová zkratka <strong>m</strong> vyvolávající jednoduché
kontextové menu platné pro právě vybraný soubor či adresář, přesněji řečeno pro
soubor či adresář, na němž se nachází kurzor:</p>

<table>
<tr><th>Klávesa</th><th>Význam</th></tr>
<tr><td>a</td><td>vytvoření nového souboru či adresáře</td></tr>
<tr><td>m</td><td>přesun souboru či adresáře</td></tr>
<tr><td>d</td><td>vymazání souboru či adresáře</td></tr>
<tr><td>k</td><td>kopie souboru či adresáře</td></tr>
</table>

<p>Po výběru některého příkazu z&nbsp;kontextového menu je nutné zadat buď
název nového souboru popř.&nbsp;adresáře nebo cestu, kam se mají data přesunout
či zkopírovat.</p>

<a href="http://www.root.cz/obrazek/201497/"><img src="http://i.iinfo.cz/images/410/vim20-15-prev.png" class="image-201497" width="370" height="226" alt="&#160;" /></a>
<p><i>Obrázek 15: NERD Tree použitý jako jednoduchý správce projektů.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Odkazy na Internetu</h2>

<ol>

<li>Vim Essential Plugin: NERD Tree<br />
<a href="http://code.tutsplus.com/tutorials/vim-essential-plugin-nerdtree--net-19692">http://code.tutsplus.com/tutorials/vim-essential-plugin-nerdtree--net-19692</a>
</li>

<li>The NERD tree : A tree explorer plugin for navigating the filesystem <br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=1658">http://vim.sourceforge.net/scripts/script.php?script_id=1658</a>
</li>

<li>NERD Tree Guide<br />
<a href="http://usevim.com/2012/07/18/nerdtree/">http://usevim.com/2012/07/18/nerdtree/</a>
</li>

<li>vcscommand.vim : CVS/SVN/SVK/git/hg/bzr integration plugin<br />
<a href="http://www.vim.org/scripts/script.php?script_id=90">http://www.vim.org/scripts/script.php?script_id=90</a>
</li>

<li>vcscommand na GitHubu<br />
<a href="https://github.com/vim-scripts/vcscommand.vim">https://github.com/vim-scripts/vcscommand.vim</a>
</li>

<li>Popis skriptu Vim Pathogen<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2332">http://www.vim.org/scripts/script.php?script_id=2332</a>
</li>

<li>Poslední verze skriptu Vim Pathogen<br />
<a href="https://tpo.pe/pathogen.vim">https://tpo.pe/pathogen.vim</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://vimawesome.com/">http://vimawesome.com/</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://www.vim.org/scripts/script_search_results.php?order_by=rating">http://www.vim.org/scripts/script_search_results.php?order_by=rating</a>
</li>

<li>Vim-airline na GitHubu<br />
<a href="https://github.com/bling/vim-airline">https://github.com/bling/vim-airline</a>
</li>

<li>Vim-airline na www.vim.org<br />
<a href="http://www.vim.org/scripts/download_script.php?src_id=22726">http://www.vim.org/scripts/download_script.php?src_id=22726</a>
</li>

<li>Vim-fugitive na GitHubu<br />
<a href="https://github.com/tpope/vim-fugitive">https://github.com/tpope/vim-fugitive</a>
</li>

<li>Vim-fugitive na www.vim.org<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2975">http://www.vim.org/scripts/script.php?script_id=2975</a>
</li>

<li>Textový editor Vim jako IDE (seriál)<br />
<a href="http://www.root.cz/clanky/textovy-editor-vim-jako-ide/">http://www.root.cz/clanky/textovy-editor-vim-jako-ide/</a>
</li>

<li>Building Vim<br />
<a href="http://vim.wikia.com/wiki/Building_Vim">http://vim.wikia.com/wiki/Building_Vim</a>
</li>

<li>Getting the Vim source with Mercurial<br />
<a href="http://vim.wikia.com/wiki/Getting_the_Vim_source_with_Mercurial">http://vim.wikia.com/wiki/Getting_the_Vim_source_with_Mercurial</a>
</li>

<li>Vim Perl Interface<br />
<a href="http://vim.dindinx.net/vim7/html/if_perl.txt.php">http://vim.dindinx.net/vim7/html/if_perl.txt.php</a>
</li>

<li>Vim Perl Support<br />
<a href="http://www.softpanorama.org/Editors/Vimorama/vim_perl_support.shtml">http://www.softpanorama.org/Editors/Vimorama/vim_perl_support.shtml</a>
</li>

<li>VIM as Python IDE<br />
<a href="http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/">http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/</a>
</li>

<li>Stack Overflow: VIM: Perl interface: passing a variable to Perl and reading a vim variable from Perl<br />
<a href="http://stackoverflow.com/questions/4999902/vim-perl-interface-passing-a-variable-to-perl-and-reading-a-vim-variable-from">http://stackoverflow.com/questions/4999902/vim-perl-interface-passing-a-variable-to-perl-and-reading-a-vim-variable-from</a>
</li>

<li>Stack Overflow: Getting started with vim scripting with Perl<br />
<a href="http://stackoverflow.com/questions/2208618/getting-started-with-vim-scripting-with-perl">http://stackoverflow.com/questions/2208618/getting-started-with-vim-scripting-with-perl</a>
</li>

<li>Python with a modular IDE (Vim)<br />
<a href="http://www.sontek.net/python-with-a-modular-ide-vim">http://www.sontek.net/python-with-a-modular-ide-vim</a>
</li>

<li>Getting to VIM's Python interface<br />
<a href="http://zerokspot.com/weblog/2009/02/21/getting-to-know-vims-python-interface/">http://zerokspot.com/weblog/2009/02/21/getting-to-know-vims-python-interface/</a>
</li>

<li>Pretty-formatting XML<br />
<a href="http://vim.wikia.com/wiki/Pretty-formatting_XML">http://vim.wikia.com/wiki/Pretty-formatting_XML</a>
</li>

<li>Delete a pair of XML/HTML tags<br />
<a href="http://vim.wikia.com/wiki/Delete_a_pair_of_XML/HTML_tags">http://vim.wikia.com/wiki/Delete_a_pair_of_XML/HTML_tags</a>
</li>

<li>Vim as XML Editor<br />
<a href="http://www.pinkjuice.com/howto/vimxml/">http://www.pinkjuice.com/howto/vimxml/</a>
</li>

<li>xmledit: A filetype plugin to help edit XML, HTML, and SGML documents<br />
<a href="http://www.vim.org/scripts/script.php?script_id=301">http://www.vim.org/scripts/script.php?script_id=301</a>
</li>

<li>Poslední vývojová verze makra xmledit<br />
<a href="http://github.com/sukima/xmledit/">http://github.com/sukima/xmledit/</a>
</li>

<li>vim.wikia: Display date-and-time on status line<br />
<a href="http://vim.wikia.com/wiki/Display_date-and-time_on_status_line">http://vim.wikia.com/wiki/Display_date-and-time_on_status_line</a>
</li>

<li>vim.wikia: Writing a valid statusline<br />
<a href="http://vim.wikia.com/wiki/Writing_a_valid_statusline">http://vim.wikia.com/wiki/Writing_a_valid_statusline</a>
</li>

<li>vim.wikia: Statusline tab level ruler<br />
<a href="http://vim.wikia.com/wiki/Statusline_tab_level_ruler">http://vim.wikia.com/wiki/Statusline_tab_level_ruler</a>
</li>

<li>vim.wikia: Switching between different statuslines<br />
<a href="http://vim.wikia.com/wiki/Switching_between_different_statuslines">http://vim.wikia.com/wiki/Switching_between_different_statuslines</a>
</li>

<li>X Selections, Cut Buffers, and Kill Rings<br />
<a href="http://www.jwz.org/doc/x-cut-and-paste.html">http://www.jwz.org/doc/x-cut-and-paste.html</a>
</li>

<li>Accessing the system clipboard<br />
<a href="http://vim.wikia.com/wiki/Accessing_the_system_clipboard">http://vim.wikia.com/wiki/Accessing_the_system_clipboard</a>
</li>

<li>xcutsel(1) - Linux man page<br />
<a href="http://linux.die.net/man/1/xcutsel">http://linux.die.net/man/1/xcutsel</a>
</li>

<li>snipMate : TextMate-style snippets for Vim<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2540">http://www.vim.org/scripts/script.php?script_id=2540</a>
</li>

<li>msanders / snipmate.vim<br />
<a href="https://github.com/msanders/snipmate.vim">https://github.com/msanders/snipmate.vim</a>
</li>

<li>snipMate.vim Introductory Screencast<br />
<a href="http://vimeo.com/3535418">http://vimeo.com/3535418</a>
</li>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2015</small></p>
</body>
</html>

