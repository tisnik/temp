<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textový editor Vim 8 - změny ve skriptovacím engine Vimu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textový editor Vim 8 - změny ve skriptovacím engine Vimu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o novinkách, které můžeme nalézt v&nbsp;osmé verzi populárního textového editoru Vim, se seznámíme s&nbsp;některými změnami provedenými ve skriptovacím engine Vimu. S&nbsp;těmito změnami a vylepšeními se přímo setkají většinou pouze vývojáři pluginů, ovšem těžit z&nbsp;nich (alespoň nepřímo) mohou i všichni ostatní uživatelé Vimu, protože implementované změny a rozšíření (anonymní funkce, časovače, unikátní čísla oken atd.) umožňují tvorbu složitějších pluginů pracujících asynchronně s&nbsp;operacemi prováděnými uživatelem.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Textový editor Vim 8 - změny ve skriptovacím engine Vimu</a></p>
<p><a href="#k02">2. Unikátní čísla oken</a></p>
<p><a href="#k03">3. Příklad číslo 1: přečtení pořadí okna (kód kompatibilní s&nbsp;Vimem 7)</a></p>
<p><a href="#k04">4. Příklad číslo 2: přečtení ID oken (kód pro Vim 8)</a></p>
<p><a href="#k05">5. Anonymní funkce</a></p>
<p><a href="#k06">6. Reference na funkce</a></p>
<p><a href="#k07">7. Příklad číslo 3: použití reference na funkci společně s&nbsp;funkcí vyššího řádu <strong>map</strong></a></p>
<p><a href="#k08">8. Příklad číslo 4: použití anonymních funkcí s&nbsp;funkcí vyššího řádu <strong>map</strong></a></p>
<p><a href="#k09">9. Příklad číslo 5: funkce <strong>map</strong> neměnící vstupní sekvenci</a></p>
<p><a href="#k10">10. Příklad číslo 6: použití anonymních funkcí s&nbsp;funkcí vyššího řádu <strong>filter</strong></a></p>
<p><a href="#k11">11. Časovače</a></p>
<p><a href="#k12">12. Příklad číslo 7: vytvoření a použití několika časovačů</a></p>
<p><a href="#k13">13. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k14">14. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Textový editor Vim 8 - změny ve skriptovacím engine Vimu</h2>

<p><a href="https://mojefedora.cz/textovy-editor-vim-8-nejenom-ve-fedore/">V&nbsp;úvodním článku</a> o osmé verzi populárního textového editoru Vim jsme si nejprve stručně popsali historii tohoto programu a následně jsme se seznámili s&nbsp;některými novinkami, s&nbsp;nimiž se setkají prakticky všichni uživatelé Vimu, nezávisle na tom, zda se jedná o uživatele tohoto textového editoru nebo o vývojáře rozšiřujících modulů (pluginů). Dnes si popíšeme některé změny, které byly implementovány ve skriptovacím engine Vimu; tyto změny jsou tedy použitelné ve VimScriptu. Tyto změny sice mohou na první pohled vypadat nenápadně, ve skutečnosti však poměrně významným způsobem rozšiřují možnosti pluginů. Dá se to přirovnat k&nbsp;situaci webových aplikací před a po implementaci objektu <i>XMLHttpRequest</i> do JavaScriptových enginů v&nbsp;browserech, protože i skriptovací engine Vimu nyní umožňuje tvorbu asynchronního kódu, registraci funkcí zavolaných až po určitém časovém intervalu s&nbsp;využitím časovačů (<i>timers</i>) apod. Všechny popisované novinky budou ukázány na jednoduchých skriptech.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/01_.png"><img class="alignnone size-thumbnail wp-image-8120" src="https://mojefedora.cz/wp-content/uploads/2017/01/01_-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 1: Všechny změny a vylepšení Vimu 8 jsou samozřejmě popsány v&nbsp;interním systému nápovědy (helpu).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Unikátní čísla oken</h2>

<p>Nejprve si krátce zopakujme terminologii používanou ve Vimu. V&nbsp;tomto textovém editoru se pracuje s&nbsp;takzvanými <i>buffery</i> (což je typicky obsah textového souboru načtený do paměti), <i>okny</i> (ta představují &bdquo;pohledy&ldquo; do bufferu, přičemž těchto &bdquo;pohledů&ldquo; může existovat libovolně mnoho) a <i>záložkami/taby</i>, na nichž jsou okna zobrazena. V&nbsp;předchozích verzích Vimu bylo každé okno na záložce reprezentované svým indexem, přičemž index 1 byl přiřazen oknu umístěnému do levého horního rohu a indexy se zvyšovaly směrem doprava a potom dolů. Pokud byla například plocha editoru rozdělena na čtyři stejně velká čtvercová okna, byly jim jejich indexy přiřazeny následovně:</p>

<pre>
+-----+-----+
|  1  |  2  |
+-----+-----+
|  3  |  4  |
+-----+-----+
</pre>

<p>Problém nastane v&nbsp;případě, kdy nějaký plugin potřebuje pracovat s&nbsp;určitým oknem. Představme se například klasický plugin <strong>NETRW</strong>, který musí obsluhovat své vlastní okno se seznamem souborů a adresářů. Pokud uživatel nějaké okno zavře či ho pouze přesune, dojde ke změně indexů oken, takže plugin ztratí vazbu na okno, se kterým potřebuje pracovat:</p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/02_.png"><img class="alignnone size-thumbnail wp-image-8121" src="https://mojefedora.cz/wp-content/uploads/2017/01/02_-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 2: Speciální okno používané pluginem <strong>NETRW</strong>, které se otevře příkazem <strong>:Explore</strong> či <strong>:Vexplore</strong>.</i></p>

<p>Aby bylo možné každé okno jednoznačně identifikovat po celou dobu jeho existence, byl do Vimu 8 přidán koncept takzvaných unikátních identifikátorů oken. Každému oknu jsou tedy přiřazena dvě celá čísla &ndash; index (ten se může měnit, přičemž vždy existují okna s&nbsp;indexy 1..počet_oken) a identifikátor okna (ten se nikdy nemění a není ani použit znovu, tj.&nbsp;pokud se okno zavře a vytvoří se nové, získá odlišné ID). Současně byly do Vimu přidány další funkce pro práci s&nbsp;identifikátory oken, zejména pak funkce <strong>win_getid()</strong> (převod indexu okna na jeho ID), <strong>win_gotoid()</strong> (přechod na okno se zadaným identifikátorem), <strong>win_id2win</strong> (převod ID okna na jeho index) a <strong>win_id2tabwin()</strong> (dtto, ale vrátí se i identifikátor záložky). Ve chvíli, kdy plugin otevře nové okno, může si zapamatovat jeho ID a potom kdykoli použít funkci <strong>win_gotoid()</strong> pro přechod do tohoto okna.</p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/03_.png"><img class="alignnone size-thumbnail wp-image-8122" src="https://mojefedora.cz/wp-content/uploads/2017/01/03_-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 3: Popis funkce <strong>win_getid()</strong>, která byla přidána do Vimu 8.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Příklad číslo 1: přečtení pořadí okna (kód kompatibilní s&nbsp;Vimem 7)</h2>

<p>Nejprve si ukážeme, jak se s&nbsp;okny pracovalo v&nbsp;předchozích verzích Vimu. V&nbsp;následujícím skriptu jsou definovány dvě funkce nazvané <strong>SplitCurrentWindow</strong> a <strong>PrintWindowNumbers</strong> (názvy funkcí ve VimScriptu začínají velkým písmenem). Ve funkci pojmenované <strong>SplitCurrentWindow</strong> dojde k&nbsp;několikerému horizontálnímu a vertikálnímu rozdělení okna editoru. Povšimněte si, že v&nbsp;programové smyčce rozdělíme jedno okno desetkrát, ovšem ihned po rozdělení nově vzniklé okno zase zavřeme. Pokud je tato funkce spuštěna ve chvíli, kdy editor obsahuje jen jediné okno, bude výsledek vypadat následovně:</p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/04_.png"><img class="alignnone size-thumbnail wp-image-8123" src="https://mojefedora.cz/wp-content/uploads/2017/01/04_-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 4: Takto vypadá plocha editoru po dokončení prvního demonstračního skriptu.</i></p>

<p>Ve druhé funkci pojmenované <strong>PrintWindowNumbers</strong> se naplňuje seznam <strong>windowNumbers</strong> indexy existujících oken. Využíváme zde funkci <strong>windo</strong>, která postupně spustí specifikovaný kód pro všechna existující okna. Povšimněte si, jak je možné seznam naplnit &ndash; používá se zde funkce <strong>winnr()</strong> vracející index aktuálního okna:</p>

<pre>
windo call add(windowNumbers, winnr()) 
</pre>

<p>Úplný programový kód tohoto příkladu vypadá následovně:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #1 - this script creates
" multiple windows and then prints its numbers
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

function! SplitCurrentWindow()
    split

    " create and close ten windows
    for i in range(10)
        split  " split new window
        close  " and close it immediatelly
    endfor

    vsplit
    split
    vsplit
endfunction

function! PrintWindowNumbers()
    let windowNumbers = []
    windo call add(windowNumbers, winnr()) 
    for windowNumber in windowNumbers
        echo windowNumber
    endfor
endfunction

call SplitCurrentWindow()
call PrintWindowNumbers()
</pre>

<p>Po spuštění by se měly vypsat indexy oken od 1 do 5 (nezávisle na tom, že vlastně mezitím vzniklo deset dalších oken):</p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/05_.png"><img class="alignnone size-thumbnail wp-image-8124" src="https://mojefedora.cz/wp-content/uploads/2017/01/05_-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 5: Indexy oken vypsané po spuštění prvního demonstračního skriptu.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Příklad číslo 2: přečtení ID oken (kód pro Vim 8)</h2>

<p>Druhý demonstrační skript již využívá možností Vimu 8 a nebude ho tedy možné spustit v&nbsp;předchozích verzích tohoto editoru. Do skriptu byla přidána funkce <strong>PrintWindowIDs</strong>, v&nbsp;níž se voláním <strong>win_getid(index_okna)</strong> zjišťuje unikátní identifikátor každého nalezeného okna:</p>

<pre>
function! PrintWindowIDs()
    let windowIDs = []
    windo call add(windowIDs, win_getid(winnr())) 
    for windowID in windowIDs
        echo windowID
    endfor
endfunction
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/06_.png"><img class="alignnone size-thumbnail wp-image-8125" src="https://mojefedora.cz/wp-content/uploads/2017/01/06_-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 6: Takto vypadá plocha editoru po dokončení druhého demonstračního skriptu.</i></p>

<p>Zatímco indexy oken zůstávají stejné (1..5), budou se jejich identifikátory lišit, což je patrné ze screenshotu zobrazeného na sedmém obrázku. Povšimněte si, že ID obsahují skok z&nbsp;hodnoty 1001 až na hodnotu 1012, což je ale pochopitelné, protože mezitím vzniklo a ihned poté zaniklo deset dalších oken:</p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/07_.png"><img class="alignnone size-thumbnail wp-image-8126" src="https://mojefedora.cz/wp-content/uploads/2017/01/07_-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 7: Indexy a identifikátory oken vypsané po spuštění druhého demonstračního skriptu.</i></p>

<p>Úplný programový kód druhého příkladu (skriptu) vypadá následovně:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #2 - this script creates
" multiple windows and then prints its numbers
" and unique IDs
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

function! SplitCurrentWindow()
    split

    " create and close ten windows
    for i in range(10)
        split  " split new window
        close  " and close it immediatelly
    endfor

    vsplit
    split
    vsplit
endfunction

function! PrintWindowNumbers()
    let windowNumbers = []
    windo call add(windowNumbers, winnr()) 
    for windowNumber in windowNumbers
        echo windowNumber
    endfor
endfunction

function! PrintWindowIDs()
    let windowIDs = []
    windo call add(windowIDs, win_getid(winnr())) 
    for windowID in windowIDs
        echo windowID
    endfor
endfunction

call SplitCurrentWindow()
call PrintWindowNumbers()
call PrintWindowIDs()
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Anonymní funkce</h2>

<p>Další novinkou, kterou nalezneme ve skriptovacím jazyku VimScript, jsou anonymní funkce (někdy se setkáme s&nbsp;možná přiléhavějším názvem <i>lambdy</i>, což je název vycházející z&nbsp;lambda kalkulu). Anonymní funkce je možné použít ve všech místech programového kódu, kde jsou očekávány takzvané reference na funkce (<i>funcrefs</i>). Zápis anonymní funkce se v&nbsp;několika ohledech odlišuje od zápisu běžné funkce. Parametry i samotné tělo funkce jsou totiž umístěny do složených závorek {} a mezi parametry a tělem funkce se zapisuje dvojice znaků -&gt; (u parametrů se nemusí používat prefix a:). Anonymní funkci, která po svém zavolání vrátí součet svých dvou parametrů, lze zapsat takto:</p>

<pre>
{x,y -&gt; x + y}
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/08_.png"><img class="alignnone size-thumbnail wp-image-8127" src="https://mojefedora.cz/wp-content/uploads/2017/01/08_-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 8: Nápověda k&nbsp;nové vlastnosti VimScriptu &ndash; podpora anonymních funkcí.</i></p>

<p>Volání takové funkce může vypadat například takto:</p>

<pre>
:echo {x,y -&gt; x + y}(1,2)
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/09_.png"><img class="alignnone size-thumbnail wp-image-8128" src="https://mojefedora.cz/wp-content/uploads/2017/01/09_-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 9: Volání anonymní funkce s&nbsp;předáním parametrů.</i></p>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/10_.png"><img class="alignnone size-thumbnail wp-image-8129" src="https://mojefedora.cz/wp-content/uploads/2017/01/10_-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 10: Výsledek funkce je vypsán v&nbsp;levém dolním rohu.</i></p>

<p>Alternativně lze anonymní funkci přiřadit do proměnné (a tak ji vlastně pojmenovat):</p>

<pre>
:let Fce={x,y -&gt; x + y}
:echo Fce(1,2)
3
</pre>

<p>Poznámka: z&nbsp;anonymních funkcí lze vytvořit i uzávěr (<i>closure</i>). Příklad si ukážeme příště.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Reference na funkce</h2>

<p><a href="#k05">V&nbsp;předchozí kapitole</a> jsme se setkali s&nbsp;termínem &bdquo;reference na funkci&ldquo; či zkráceně &bdquo;funcref&ldquo;. Nejedná se sice o nový koncept zavedený až ve Vimu 8, ale vzhledem k&nbsp;tomu, že se s&nbsp;referencemi na funkce setkáme i v&nbsp;několika dalších demonstračních příkladech, si stručně vysvětlíme, o co se vlastně jedná. Reference na funkci obsahuje odkaz na existující funkci (přičemž nás nezajímá, jak konkrétně je tento odkaz reprezentován) a lze ji považovat za plnohodnotný datový typ skriptovacího jazyka VimScript, což znamená, že reference na funkce lze ukládat do proměnných (globálních i lokálních) či je předávat do jiných funkcí (takzvaných funkcí vyššího řádu). Reference na existující funkci se získá zavoláním <strong>function(jméno_funkce)</strong>, tedy například následujícím způsobem:</p>

<pre>
function! DoubleValue(index, value)
    return a:value * 2
endfunction
&nbsp;
let Funcref = function("DoubleValue")
</pre>

<p>Poznámka: povšimněte si, že se reference na funkci odlišuje od jména funkce, zatímco v&nbsp;jiných programovacích jazycích se jedná o totožný objekt.</p>

<p>Ukázku použití reference na funkci si ukážeme ihned <a href="#k07">v&nbsp;následující kapitole</a>.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Příklad číslo 3: použití reference na funkci společně s&nbsp;funkcí vyššího řádu <strong>map</strong></h2>

<p>Ještě před ukázkou použití anonymních funkcí (lambd) se seznámíme se dvěma užitečnými funkcemi, které je možné ve VimScriptu použít. Jedná se o funkce nazvané <strong>map</strong> a <strong>filter</strong>. Tyto funkce jsou nazývány funkcemi vyššího řádu, a to z&nbsp;toho důvodu, že jako svůj parametr akceptují jiné funkce, přesněji řečeno buď anonymní funkci či funcref. Funkce vyššího řádu <strong>map</strong> dokáže aplikovat zvolenou anonymní funkci či funcref na seznam (<i>list</i>) či na slovník (<i>dictionary</i>). Podívejme se, jak použití <strong>map</strong> vypadá v&nbsp;praxi. Nejdříve vytvoříme seznam obsahující sekvenci celých čísel od 0 do 9 a následně na prvky této sekvence postupně aplikujeme uživatelskou funkci <strong>DoubleValue</strong> vracející dvojnásobnou hodnotu svého parametru. Ve skutečnosti jsou do funkce <strong>DoubleValue</strong> předány dva parametry &ndash; index prvku a jeho hodnota:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #3 - usage of map()
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

function! DoubleValue(index, value)
    return a:value * 2
endfunction

let  sequence = range(10)
echo sequence

let  Funcref = function("DoubleValue")

call map(sequence, Funcref)
echo sequence

call map(sequence, Funcref)
echo sequence
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/11_.png"><img class="alignnone size-thumbnail wp-image-8130" src="https://mojefedora.cz/wp-content/uploads/2017/01/11_-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 11: Výsledek předchozího příkladu.</i></p>

<p>Poznámka: povšimněte si, že funkce <strong>map</strong> ve VimScriptu modifikuje původní seznam, čímž se odlišuje od podobně koncipovaných funkcí známých z&nbsp;jiných programovacích jazyků:</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Příklad číslo 4: použití anonymních funkcí s&nbsp;funkcí vyššího řádu <strong>map</strong></h2>

<p>Předchozí příklad lze snadno přepsat tak, aby se v&nbsp;něm namísto uživatelské funkce <strong>DoubleValue</strong> použila anonymní funkce, která vrátí dvojnásobnou hodnotu svého druhého parametru (první parametr je ignorován). Tuto funkci můžeme zapsat následujícím způsobem:</p>

<pre>
{index, value -&gt; value * 2}
</pre>

<p>Podívejme se nyní, jak se zápis celého příkladu zkrátí díky tomu, že můžeme anonymní funkci vložit přímo do volání funkce vyššího řádu <strong>map</strong>:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #4 - lambda expressions
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

let  sequence = range(10)
echo sequence

call map(sequence, {index, value -&gt; value * 2})
echo sequence

call map(sequence, {index, value -&gt; value * 2})
echo sequence
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/12_.png"><img class="alignnone size-thumbnail wp-image-8131" src="https://mojefedora.cz/wp-content/uploads/2017/01/12_-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 12: Výsledek spuštění předchozího příkladu.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Příklad číslo 5: funkce <strong>map</strong> neměnící vstupní sekvenci</h2>

<p>Chování funkce vyššího řádu <strong>map</strong> ve VimScriptu může vývojáře zaskočit kvůli již zmíněnému faktu, že tato funkce přímo mění obsah seznamu či slovníku, který je jí předán. Náprava je ve skutečnosti poměrně jednoduchá, protože postačuje, aby se seznam/slovník před předáním do této funkce naklonoval pomocí další užitečné funkce nazvané příhodně <strong>copy</strong>. Předchozí skript tedy můžeme upravit do &bdquo;funkcionální podoby&ldquo; takto:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #5 - lambda expressions
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

let  sequence = range(10)
echo "sequence1=" sequence
echo "\n"

let  sequence2 = map(copy(sequence), {index, value -&gt; value * 2})
echo "sequence1=" sequence
echo "sequence2=" sequence2
echo "\n"

let  sequence3 = map(copy(sequence2), {index, value -&gt; value * 2})
echo "sequence1=" sequence
echo "sequence2=" sequence2
echo "sequence3=" sequence3
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/13_.png"><img class="alignnone size-thumbnail wp-image-8132" src="https://mojefedora.cz/wp-content/uploads/2017/01/13_-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 13: Původní seznamy nazvané <strong>sequence</strong> a <strong>sequence2</strong> jsou nyní nezměněny.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Příklad číslo 6: použití anonymních funkcí s&nbsp;funkcí vyššího řádu <strong>filter</strong></h2>

<p>Druhá velmi užitečná funkce vyššího řádu, kterou lze použít společně s&nbsp;anonymními funkcemi, se jmenuje <strong>filter</strong> a slouží pro výběr těch prvků ze seznamu či ze slovníku, které odpovídají nějaké uživatelsky definované podmínce. Tato podmínka má tvar takzvaného <i>predikátu</i>, což je funkce vracející pravdivostní hodnotu true či false na základě hodnoty předaného prvku. V&nbsp;dalším demonstračním skriptu je nejprve opět vytvořen seznam s&nbsp;prvky 0 až 9 a následně jsou z&nbsp;tohoto seznamu vybrány prvky dělitelné dvěma a posléze dělitelné třemi. Pro zápis predikátu opět využijeme novou vlastnost Vimu 8 &ndash; anonymní funkce. Aby se původní seznam nezměnil, je opět nutné vytvořit jeho klon s&nbsp;využitím funkce <strong>copy</strong>:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #6 - lambda expressions
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

let  sequence = range(10)
echo "sequence1=" sequence
echo "\n"

let  sequence2 = filter(copy(sequence), {index, value -&gt; value % 2 == 0})
let  sequence3 = filter(copy(sequence), {index, value -&gt; value % 3 == 0})
echo "sequence1=" sequence
echo "sequence2=" sequence2
echo "sequence3=" sequence3
</pre>

<a href="https://mojefedora.cz/wp-content/uploads/2017/01/14_.png"><img class="alignnone size-thumbnail wp-image-8133" src="https://mojefedora.cz/wp-content/uploads/2017/01/14_-405x254.png" alt="" width="405" height="254" /></a>
<p><i>Obrázek 14: Použití funkce vyššího řádu <strong>filter</strong> pro výběr prvků ze seznamu.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Časovače</h2>

<p>S&nbsp;anonymními funkcemi a funcrefy souvisí i další nová vlastnost Vimu 8. Jedná se o takzvané časovače (<i>timers</i>), které umožňují specifikovat, v&nbsp;jakém okamžiku se zavolá nějaká běžná či anonymní funkce. Tyto funkce jsou spouštěny asynchronně, tj.&nbsp;nezávisle na dalším běhu skriptu. Navíc je možné jednoduše specifikovat, kolikrát se má daná funkce zavolat, popř.&nbsp;je možné zajistit, aby se funkce volala periodicky až do ukončení běhu Vimu (to může být velmi užitečné, například u složitějších pluginů). Nový časovač se vytvoří zavoláním funkce nazvané příhodně <strong>timer_start</strong>. Této funkci je nutné předat minimálně dva parametry: časový interval specifikovaný v&nbsp;milisekundách a anonymní funkci či funcref, která se má po uplynutí daného intervalu zavolat:</p>

<pre>
timer_start(interval, funcref či anonymní funkce)
</pre>

<p>Taktéž je možné do <strong>timer_start</strong> předat třetí nepovinný parametr, kterým je slovník obsahující další upřesnění funkce časovače. V&nbsp;současnosti je podporována jen jediná vlastnost &ndash; počet opakování (<strong>repeat</strong>) popř.&nbsp;specifikace periodického opakování volání funkce:</p>

<pre>
timer_start(interval, funcref či anonymní funkce, {'repeat':počet_opakování})
</pre>

<p>Periodické opakování používá magickou konstantu -1:</p>

<pre>
timer_start(interval, funcref či anonymní funkce, {'repeat':-1})
</pre>

<p>Funkce <strong>timer_start</strong> vrátí jednoznačný identifikátor právě vytvořeného časovače.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Příklad číslo 7: vytvoření a použití několika časovačů</h2>

<p>O tom, že je základní použití časovačů vlastně velmi jednoduché, se lze snadno přesvědčit prozkoumáním následujícího příkladu, v&nbsp;němž jsou vytvořeny čtyři časovače volající uživatelskou funkci nazvanou <strong>PrintMessage</strong>. První časovač zavolá tuto funkci celkem šestkrát s&nbsp;periodou jedné sekundy, druhý časovač jedenkrát po 3,3 sekundách atd. Po spuštění tohoto skriptu sledujte zprávy vypisované do levého spodního rohu editoru:</p>

<pre>
" ---------------------------------------------
" Vim8 example script #7 - timers
"
" How to use it:
" 1) start new Vim session
" 2) open this script in it
" 3) call :source %
" ---------------------------------------------

function! PrintMessage(message)
    echo a:message
endfunction

call PrintMessage("normal call")

let timer1 = timer_start(1000, 'PrintMessage', {'repeat':6})
echo "timer" timer1 "created"

let timer2 = timer_start(3300, 'PrintMessage')
echo "timer" timer2 "created"

let timer3 = timer_start(4400, 'PrintMessage')
echo "timer" timer3 "created"

let timer4 = timer_start(5500, 'PrintMessage')
echo "timer" timer4 "created"
</pre>

<p>Vylepšenou ukázku použití časovačů si popíšeme příště.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny v&nbsp;předchozích kapitolách popsané demonstrační skripty určené pro textový editor Vim verze 8 byly uloženy do Git repositáře dostupného na adrese <a href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>. V&nbsp;následující tabulce naleznete na jednotlivé skripty přímé odkazy:</p>

<table>
<tr><th>Příklad</th><th>Adresa</th></tr>
<tr><td>windows1.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/windows1.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/windows1.vim</a></td></tr>
<tr><td>windows2.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/windows2.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/windows2.vim</a></td></tr>
<tr><td>map.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/map.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/map.vim</a></td></tr>
<tr><td>lambda1.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/lambda1.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/lambda1.vim</a></td></tr>
<tr><td>lambda2.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/lambda2.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/lambda2.vim</a></td></tr>
<tr><td>lambda3.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/lambda3.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/lambda3.vim</a></td></tr>
<tr><td>timers.vim</td><td><a href="https://github.com/tisnik/presentations/blob/master/vim/vim8/timers.vim">https://github.com/tisnik/presentations/blob/master/vim/vim8/timers.vim</a></td></tr>
</table>



<p><a name="k14"></a></p>
<h2 id="k14">14. Odkazy na Internetu</h2>

<ol>

<li>how to get list of open windows<br />
<a href="http://vim.1045645.n5.nabble.com/how-to-get-list-of-open-windows-td1164662.html">http://vim.1045645.n5.nabble.com/how-to-get-list-of-open-windows-td1164662.html</a>
</li>

<li>Vim &ndash; the editor<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Vim 8.0 is released<br />
<a href="https://laravel-news.com/2016/09/vim-8-0-is-released/">https://laravel-news.com/2016/09/vim-8-0-is-released/</a>
</li>

<li>Vim: So long Pathogen, hello native package loading<br />
<a href="https://shapeshed.com/vim-packages/">https://shapeshed.com/vim-packages/</a>
</li>

<li>:smile command was not backported! #5116<br />
<a href="https://github.com/neovim/neovim/issues/5116">https://github.com/neovim/neovim/issues/5116</a>
</li>

<li>Makejob<br />
<a href="http://www.vim.org/scripts/script.php?script_id=5479">http://www.vim.org/scripts/script.php?script_id=5479</a>
</li>

<li>Články o Vimu na Root.cz:<br />
<a href="http://www.root.cz/n/vim/clanky/">http://www.root.cz/n/vim/clanky/</a>
</li>

<li>Vim sedm - první část<br />
<a href="http://www.root.cz/clanky/vim-sedm-prvni-cast/">http://www.root.cz/clanky/vim-sedm-prvni-cast/</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>History of the Text Editor<br />
<a href="http://vanstee.me/history-of-the-text-editor.html">http://vanstee.me/history-of-the-text-editor.html</a>
</li>

<li>Interview with Bill Joy<br />
<a href="http://web.cecs.pdx.edu/~kirkenda/joy84.html">http://web.cecs.pdx.edu/~kirkenda/joy84.html</a>
</li>

<li>vi Editor Commands<br />
<a href="http://www.cs.rit.edu/~cslab/vi.html#A1.4">http://www.cs.rit.edu/~cslab/vi.html#A1.4</a>
</li>

<li>vi Manual<br />
<a href="http://www.cs.fsu.edu/general/vimanual.html">http://www.cs.fsu.edu/general/vimanual.html</a>
</li>

<li>Mastering the Vi Editor<br />
<a href="http://www.susnet.uk/mastering-the-vi-editor">http://www.susnet.uk/mastering-the-vi-editor</a>
</li>

<li>Vim as a Python IDE, or Python IDE as Vim<br />
<a href="http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/">http://blog.jetbrains.com/pycharm/2013/06/vim-as-a-python-ide-or-python-ide-as-vim/</a>
</li>

<li>Vi Improved<br />
<a href="https://wiki.python.org/moin/Vim">https://wiki.python.org/moin/Vim</a>
</li>

<li>Popis skriptu Vim Pathogen<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2332">http://www.vim.org/scripts/script.php?script_id=2332</a>
</li>

<li>Poslední­verze skriptu Vim Pathogen<br />
<a href="https://tpo.pe/pathogen.vim">https://tpo.pe/pathogen.vim</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://vimawesome.com/">http://vimawesome.com/</a>
</li>

<li>Nejlepší pluginy pro Vim<br />
<a href="http://www.vim.org/scripts/script_search_results.php?order_by=rating">http://www.vim.org/scripts/script_search_results.php?order_by=rating</a>
</li>

<li>Building Vim<br />
<a href="http://vim.wikia.com/wiki/Building_Vim">http://vim.wikia.com/wiki/Building_Vim</a>
</li>

<li>Vim plugins for developers<br />
<a href="http://www.linuxtoday.com/upload/vim-plugins-for-developers-140619094010.html">http://www.linuxtoday.com/upload/vim-plugins-for-developers-140619094010.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

