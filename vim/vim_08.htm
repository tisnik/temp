<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textový editor Vim jako IDE (8.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textový editor Vim jako IDE (8.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;dnešní části seriálu o použití textového editoru Vim (nejenom) ve funkci vývojového prostředí dokončíme popis interního skriptovacího jazyka tohoto editoru a ukážeme si i několik více či méně užitečných příkladů jeho použití v&nbsp;praxi. Bude se například jednat o funkci, která do zdrojového kódu umožní vložit tělo počítané programové smyčky, popř.&nbsp;ze jména atributu vytvořit jeho getter a setter.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Předávání parametrů funkcím</a></p>
<p><a href="#k02">2. Parametry se při volání funkcí předávají hodnotou</a></p>
<p><a href="#k03">3. Nepřímý přístup k&nbsp;proměnným přes jejich název reprezentovaný řetězcem</a></p>
<p><a href="#k04">4. Využití uživatelských funkcí v&nbsp;praxi &ndash; vkládání připravených kusů programového kódu (code snippets) do editovaného textu</a></p>
<p><a href="#k05">5. Použití funkce CreateForLoop()</a></p>
<p><a href="#k06">6. Využití uživatelských funkcí v&nbsp;praxi &ndash; properties v&nbsp;C#</a></p>
<p><a href="#k07">7. Přepis funkce CreateProperty() pro programovací jazyk Java</a></p>
<p><a href="#k08">8. Vylepšení funkce pro automatické vytváření getterů a setterů</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Předávání parametrů funkcím</h2>

<p>V&nbsp;předchozích dvou částech seriálu o textovém editoru <i>Vim</i> jsme
si popsali většinu důležitých vlastností interního skriptovacího jazyka
nazvaného Vim Script. Zbývá nám ještě popsat, jakým způsobem se předávají
parametry do volaných funkcí a jak lze zařídit předávání parametrů odkazem (i
když v&nbsp;tomto případě se jedná spíše o určité zneužití vlastností Vim
Scriptu :-). Začněme jednoduchým příkladem &ndash; funkcí, která očekává dva
parametry, kterými by měla být dvě čísla (nebo řetězce převeditelné na čísla).
Funkce obě čísla sečte a na pozici kurzoru v&nbsp;aktivním bufferu vloží
výsledek tohoto součtu. Název funkce by měl začínat velkým písmenem,
tj.&nbsp;například <strong>Add</strong> a nikoli <strong>add</strong>. Dále si
povšimněte, že k&nbsp;parametrům funkce se přistupuje s&nbsp;využitím prefixu
<strong>a:</strong> a že je možné vkládat nový obsah i do speciálního
pracovního registru <strong>"</strong>, jehož název musí začínat prefixem
<strong>@</strong> &ndash; viz též předminulá část tohoto seriálu.</p>

<p>Posledním novým příkazem je <strong>execute</strong> s&nbsp;parametrem
začínajícím na &bdquo;normal&ldquo;. Tento příkaz zajistí, že se další sekvence
znaků provede v&nbsp;normálním režimu. Ona sekvence znaků se v&nbsp;našem
případě rovná pouze jedinému znaku <strong>p</strong>, což v&nbsp;normálním
režimu odpovídá editačnímu příkazu <i>put</i>. Pokud není explicitně
specifikován žádný pracovní registr, umístí tento příkaz za pozici kurzoru
obsah speciálního pracovního registru <strong>"</strong>, který jsme však
naplnili součtem parametrů funkce. Podívejme se na zdrojový kód:</p>

<pre>
function! Add(parametr1, parametr2)
    " nejprve se provede soucet obou parametru
    let soucet = a:parametr1 + a:parametr2

    " soucet se ulozi do specialniho pracovniho
    " registru "
    let @" = soucet

    " nasledne se pomoci prikazu execute
    " vykona editacni prikaz 'p' = put
    execute "normal p"
endfunction
</pre>

<a href="http://i.iinfo.cz/images/29/vim0801.png"><img src="http://i.iinfo.cz/images/29/vim0801-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 1: Obarvený zdrojový kód prvního demonstračního příkladu
s&nbsp;funkcí Add().</i></p>

<p>Funkci lze otestovat následovně &ndash; samotná funkce se uloží do souboru
pojmenovaného <strong>test_add.vim</strong>. Posléze se spustí <i>Vim</i> a
zadá se příkaz:</p>

<pre>
:source test_add.vim
</pre>

<p>popř. pouze:</p>

<pre>
:so test_add.vim
</pre>

<p>který zajistí načtení funkce. Následně je možné v&nbsp;normálním režimu
funkci zavolat příkazem:</p>

<pre>
:call Add(1,2)
</pre>

<p>Popř.&nbsp;lze použít i poněkud složitější test využívající znalostí, které
jsme si ozřejmili v&nbsp;předchozí části tohoto seriálu:</p>

<pre>
for i in range(1,10)
    call Add(i,i)
    execute "normal o\&lt;Esc&gt;
endfor
</pre>

<p>V&nbsp;předchozím testu je příkaz <strong>execute</strong> použit pouze pro
odřádkování, aby se jednotlivá čísla nezapisovala přímo za sebou.</p>

<a href="http://i.iinfo.cz/images/386/vim0802.png"><img src="http://i.iinfo.cz/images/386/vim0802-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 2: Spuštění demonstrační funkce Add() ve smyčce.</i></p>



<p><a name="k02"></a></p>
<h2>2. Parametry se při volání funkcí předávají hodnotou</h2>

<p>Ve Vim Scriptu se všechny parametry předávají hodnotou, což znamená, že se
před zavoláním nějaké funkce všechny její parametry nejprve vyhodnotí (může se
jednat o výrazy obsahující i volání jiných funkcí) a teprve poté je funkce
zavolána a jsou jí předány hodnoty vypočtených parametrů. V&nbsp;praxi to
znamená to, že není možné, aby funkce měnila hodnoty proměnných, které jsou jí
(alespoň zdánlivě) předány jako parametry; Vim Script jde dokonce ještě dále a
neumožňuje vůbec měnit hodnoty proměnných začínajících prefixem
<strong>a:</strong>, což je poměrně velký rozdíl oproti mnoha dalším
programovacím jazykům. Tuto vlastnost Vim Scriptu si můžeme poměrně jednoduše
vyzkoušet na následujícím demonstračním příkladu, který po svém spuštění pomocí
příkazu:</p>

<pre>
:source TestVar.vim
</pre>

<p>Vypíše chybové hlášení při pokusu o změnu proměnné
<strong>a:variable</strong> ve funkci <strong>ChangeValue</strong>. Následuje
výpis zdrojového kódu tohoto příkladu. Povšimněte si, že se jedná o
&bdquo;samospouštěcí&ldquo; příklad, protože na svém konci obsahuje volání
<strong>call TestVar()</strong>:</p>

<pre>
function! PrintValue(variable)
    echo "variable=" . a:variable
endfunction

function! ChangeValue(variable)
    let a:variable = 6502
endfunction

function! TestVar()
    let g:x = 42
    call PrintValue(g:x)
    call ChangeValue(g:x)
    call PrintValue(g:x)
endfunction

call TestVar()
</pre>

<a href="http://i.iinfo.cz/images/172/vim0803.png"><img src="http://i.iinfo.cz/images/172/vim0803-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 3: Zdrojový kód demonstrační funkce Add() a počítané programové
smyčky, z&nbsp;níž se tato funkce volá.</i></p>



<p><a name="k03"></a></p>
<h2>3. Nepřímý přístup k&nbsp;proměnným přes jejich název reprezentovaný řetězcem</h2>

<p>V&nbsp;některých případech by však bylo vhodné a užitečné umět změnit
hodnotu proměnné ve funkci a přitom nepoužívat přímý přístup ke globálním
proměnným. Vim Script sice tuto možnost přímo neobsahuje, ale je možné použít
malý trik &ndash; pokud se ve zdrojovém kódu vyskytuje zápis:</p>

<pre>
{"jméno_proměnné"}
</pre>

<p>popř.</p>

<pre>
{proměnná_obsahující_jméno_proměnné_jako řetězec}
</pre>

<p>nebo taktéž:</p>

<pre>
{výraz,_který_se_vyhodnotí_na_řetězec_obsahující_jméno_proměnné}
</pre>

<p>... je na místo tohoto zápisu přímo dosazena proměnná daného jména. To
znamená, že výše uvedený demonstrační program je možné upravit tak, aby se
funkci <strong>ChangeValue</strong> předávalo jméno proměnné a nikoli její
hodnota, tj.&nbsp;namísto <strong>g:x</strong> se použije zápis
<strong>"g:x"</strong>:</p>

<pre>
function! PrintValue(variable)
    echo "variable=" . a:variable
endfunction

function! ChangeValue(variableName)
    let {a:variableName} = 6502
endfunction

function! TestVar()
    let g:x = 42
    call PrintValue(g:x)
    call ChangeValue("g:x")
    call PrintValue(g:x)
endfunction

call TestVar()
</pre>



<p><a name="k04"></a></p>
<h2>4. Využití uživatelských funkcí v&nbsp;praxi &ndash; vkládání připravených kusů programového kódu (code snippets) do editovaného textu</h2>

<p>Interní skriptovací jazyk Vim Script je možné využít mnoha různými způsoby,
jak pro psaní jednoduchých pomocných funkcí umisťovaných většinou do
konfiguračního souboru <strong>.vimrc</strong> (což ovšem není nic jiného, než
plnohodnotný skript a nikoli pouze jednoduchý soubor s&nbsp;konfigurací), tak i
pro programování rozsáhlých přídavných modulů, mezi něž patří například i
v&nbsp;příští části tohoto seriálu popsaný modul <strong>Netrw</strong>.
V&nbsp;této kapitole si ukážeme, jak lze napsat poměrně jednoduchou funkci
určenou pro vložení připraveného bloku programového kódu (<i>code snippet</i>)
do editovaného souboru. Tato funkce bude sice velmi jednoduchá, ale jedná se o
prazáklad složitějších a pro práci velmi užitečných plnohodnotných přídavných
modulů, mezi něž patří především modul <strong>snipMate</strong>, jehož popisem
se budeme zabývat v&nbsp;následující části tohoto seriálu. Naše ukázková funkce
bude sloužit pro vložení zdrojového kódu představujícího počítanou programovou
smyčku typu <strong>for</strong> zapsanou podle syntaktických pravidel céčka
nebo Javy. Před vyvoláním této funkce musí být na aktivním řádku zapsána
počáteční a koncová hodnota smyčky, tj.&nbsp;například dvě číslice, názvy
konstant atd.&nbsp;oddělené od mezerou</p>

<a href="http://i.iinfo.cz/images/526/vim0804.png"><img src="http://i.iinfo.cz/images/526/vim0804-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 4: Obarvený zdrojový kód funkce CreateForLoop().</i></p>

<p>Tělo funkce nazvané <strong>CreateForLoop</strong> vypadá následovně:</p>

<pre>
" velmi jednoduchy snippet - smycka for
function! CreateForLoop()
    " presunout kurzor na zacatek pocatecni hodnoty pocitadla
    execute "normal bb"
    " prvni radek pocitane smycky for
    execute "normal ifor (int i = \&lt;Esc&gt;ea; i &lt;\&lt;Esc&gt;ea; i++) {"
    " prazdne telo smycky
    execute "normal o\&lt;Esc&gt;"
    " konec tela a presunuti kurzoru do prikazoveho bloku
    execute "normal o}\&lt;CR&gt;\&lt;CR&gt;\&lt;Esc&gt;kkka    "
endfunction
</pre>

<a href="http://i.iinfo.cz/images/168/vim0805.png"><img src="http://i.iinfo.cz/images/168/vim0805-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 5: Obsah textového souboru <strong>před</strong> zavoláním funkce
CreateForLoop().</i></p>

<p>Povšimněte si především způsobu použití příkazu <strong>execute</strong>
(zkracovaného taktéž na <strong>exe</strong>), který v&nbsp;podstatě simuluje
příkazy zapisované přímo z&nbsp;klávesnice uživatelem. Za příkazem
<strong>execute</strong> následuje řetězec, v&nbsp;němž je napsáno, ve kterém
režimu (normální, vkládací...) má příkaz pracovat a poté již následuje text,
který odpovídá sekvenci znaků zapisovaných na klávesnici. Jak je ze zápisu
funkce patrné, je nutné některé znaky se speciálním významem uvozovat pomocí
zpětného lomítka. Jedná se především o znak &lt;, ale též o znak uvozovek (ten
však není v&nbsp;příkladu použit).</p>

<a href="http://i.iinfo.cz/images/169/vim0806.png"><img src="http://i.iinfo.cz/images/169/vim0806-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 6: Obsah textového souboru <strong>po</strong> zavolání funkce
CreateForLoop().</i></p>



<p><a name="k05"></a></p>
<h2>5. Použití funkce CreateForLoop()</h2>

<p>Výše uvedenou funkci <strong>CreateForLoop()</strong> je sice možné kdykoli
zavolat pomocí následujícího příkazu zadávaného v&nbsp;příkazovém režimu,
tj.&nbsp;s&nbsp;dvojtečkou na začátku:</p>

<pre>
:call CreateForLoop()&lt;CR&gt;a
</pre>

<p>ale to je samozřejmě příliš komplikované, a to i při použití tabulátoru pro
doplnění celého jména funkce (dokonce bych řekl, že je to komplikovanější, než
samotný přímý zápis počítané smyčky :-).</p>

<a href="http://i.iinfo.cz/images/247/vim0807.png"><img src="http://i.iinfo.cz/images/247/vim0807-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 7: Funkci CreateForLoop() lze použít i v&nbsp;případě, že jsou
meze smyčky zadány pomocí jmen proměnných nebo konstant.</i></p>

<p>Z&nbsp;tohoto důvodu je většinou vhodnější využít mapování, například na
kombinaci znaků <strong>,f</strong> zapsaných ve vkládacím režimu. Zde se
využívá především toho faktu, že za čárkou buď následuje ve zdrojových kódech
číslice nebo mezera, nikoli písmeno (přesněji řečeno písmeno se může po čárce
vyskytovat, programátoři však za tímto znakem většinou zapisují mezeru, neboť
se tím zvyšuje čitelnost):</p>

<pre>
:imap ,f &lt;Esc&gt;:call CreateForLoop()&lt;CR&gt;a
</pre>

<a href="http://i.iinfo.cz/images/458/vim0808.png"><img src="http://i.iinfo.cz/images/458/vim0808-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 8: Výsledek zavolání funkce CreateForLoop() pro dvojici
konstant.</i></p>

<p>Mnoho uživatelů preferuje doplňování kódu klávesou <strong>Tab</strong>
přímo ve vkládacím režimu, což je taktéž relativně snadné zařídit. Následující
mapování zaručí, že po zápisu znaku <strong>f</strong> ihned za koncovou
hodnotou smyčky a po stlačení klávesy <strong>Tab</strong> dojde
k&nbsp;automatickému vložení snippetu:</p>

<pre>
:imap f&lt;Tab&gt; &lt;Esc&gt;:call CreateForLoop()&lt;CR&gt;a
</pre>

<a href="http://i.iinfo.cz/images/172/vim0809.png"><img src="http://i.iinfo.cz/images/172/vim0809-prev.png" width="370" height="263" alt=" " /></a>
<p><i>Obrázek 9: Zobrazení menu s&nbsp;možností zavolání funkce
CreateForLoop().</i></p>

<p>Pokud namísto vytváření nových mapování (které je nutné si zapamatovat nebo
někam zapsat) preferujete volání funkcí z&nbsp;menu, je řešení poměrně
snadné:</p>

<pre>
amenu 300.110 &amp;Insert.&amp;For\ loop&lt;TAB&gt;,f :call CreateForLoop()<cr>
</pre>

<p>S&nbsp;přesným významem předchozího příkazu se seznámíme příště.</p>

<a href="http://i.iinfo.cz/images/182/vim0810.png"><img src="http://i.iinfo.cz/images/182/vim0810-prev.png" width="370" height="263" alt=" " /></a>
<p><i>Obrázek 10: Výsledek zavolání funkce.</i></p>



<p><a name="k06"></a></p>
<h2>6. Využití uživatelských funkcí v&nbsp;praxi &ndash; properties v&nbsp;C#</h2>

<p>Funkce <strong>CreateForLoop</strong> uvedená v&nbsp;předchozích kapitolách
byla poměrně jednoduchá. Zkusme si tedy vytvořit funkci nepatrně složitější a
možná taktéž užitečnější. Programátoři vyvíjející aplikace
v&nbsp;programovacích jazycích C#, C++ či Java velmi často přidávají do svých
tříd atributy, k&nbsp;nimž vytváří takzvané settery a gettery, tj.&nbsp;metody
určené pro nastavování resp.&nbsp;čtení hodnoty těchto atributů. Na <a
href="http://vim.wikia.com/wiki/Vim_as_a_refactoring_tool_and_some_examples_in_C_sharp">této
stránce</a> je kromě dalších zajímavých informací uvedena i funkce, která
umožňuje vytvoření setterů a getterů v&nbsp;programovacím jazyce C#,
v&nbsp;němž je možné použít zkrácenou syntaxi zápisu. Originální &ndash;
poněkud nečitelný &ndash; tvar funkce <strong>CreateProperty</strong> i
s&nbsp;příslušným mapováním na klávesové zkratky (navržené autorem této funkce)
je následující:</p>

<pre>
function! CreateProperty(type)
  execute "normal bim_\&lt;Esc&gt;b\"yywiprivate ".a:type." \&lt;Esc&gt;A;\&lt;CR&gt;public ".a:type.
        \ " \&lt;Esc&gt;\"ypb2xea\&lt;CR&gt;{\&lt;Esc&gt;oget\&lt;CR&gt;{\&lt;CR&gt;return " .
        \ "\&lt;Esc&gt;\"ypa;\&lt;CR&gt;}\&lt;CR&gt;set\&lt;CR&gt;{\&lt;CR&gt;\&lt;Tab&gt;\&lt;Esc&gt;\"yPa = value;\&lt;CR&gt;}\&lt;CR&gt;}\&lt;CR&gt;\&lt;Esc&gt;"
  normal! 12k2wi
endfunction
</pre>

<a href="http://i.iinfo.cz/images/300/vim0811.png"><img src="http://i.iinfo.cz/images/300/vim0811-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 11: Zdrojový kód původní varianty funkce CreateProperty() určené
pro programovací jazyk C#.</i></p>

<pre>
imap &lt;C-c&gt;&lt;C-p&gt;&lt;C-s&gt; &lt;Esc&gt;:call CreateProperty("string")&lt;CR&gt;a
imap &lt;C-c&gt;&lt;C-p&gt;&lt;C-i&gt; &lt;Esc&gt;:call CreateProperty("int")&lt;CR&gt;a
</pre>

<a href="http://i.iinfo.cz/images/483/vim0812.png"><img src="http://i.iinfo.cz/images/483/vim0812-prev.png" width="370" height="252" alt=" " /></a>
<p><i>Obrázek 12: Ukázka kódu vytvořeného původní variantou funkce
CreateProperty().</i></p>



<p><a name="k07"></a></p>
<h2>7. Přepis funkce CreateProperty() pro programovací jazyk Java</h2>

<p>Zkusme si nyní funkci <strong>CreateProperty()</strong> z&nbsp;předchozí
kapitoly v&nbsp;rámci procvičování Vim Scriptu upravit takovým způsobem, aby
byla vhodná pro použití v&nbsp;programovacím jazyce Java, v&nbsp;němž se
(alespoň prozatím!) žádná zkrácená syntaxe pro zápis setterů a getterů
nepoužívá. Funkce při svém zavolání očekává, že jí bude předán textový parametr
s&nbsp;názvem datového typu vytvářeného atributu (<strong>int</strong>,
<strong>String</strong>, <strong>Color</strong>, <strong>Customer</strong>,
<strong>FooBarClass</strong> atd.) a navíc se před kurzorem bude nacházet název
atributu, ideálně začínající malým písmenem (to není nutnou podmínkou, jen to
odpovídá štábní kultuře dodržované programátory v&nbsp;Javě). Funkce pracuje
takovým způsobem, že nejprve jméno atributu uloží do pracovního registru
<strong>x</strong> pomocí operátoru <strong>yw</strong> (<i>yank word</i>).
Posléze změní první znak atributu na velké písmeno operátorem
<strong>gU</strong> a atribut vymaže (!) do pracovního registru
<strong>y</strong>. Zbylý kód již pouze správně vypíše typ atributu, jeho název
i settery a gettery.</p>

<a href="http://i.iinfo.cz/images/477/vim0813.png"><img src="http://i.iinfo.cz/images/477/vim0813-prev.png" width="369" height="270" alt=" " /></a>
<p><i>Obrázek 13: Funkce CreateProperty() upravená tak, aby byla použitelná
v&nbsp;programovacím jazyku Java.</i></p>

<p>Následuje zdrojový kód &bdquo;javovské&ldquo; varianty funkce
<strong>CreateProperty()</strong>, která již obsahuje mnoho vysvětlujících
komentářů:</p>

<pre>
" funkce, ktera pro slovo, na nemz se nachazi kurzor
" vytvori property daneho typu
function! CreateProperty(type)
    " ulozit slovo nachazejici se pod kurzorem
    " do registru 'x'
    execute "normal b\"xyw"

    " zmena prvniho znaku slova na velke pismeno
    " a ulozeni zmeneneho nazvu do registru 'y'
    " (slovo - nazev atributu - je vymazano!)
    execute "normal gUl\"ydw"

    " prvni radek - typ a jmeno property jako
    " privatniho atributu objektu
    execute "normal iprivate " . a:type . " \&lt;Esc&gt;\"xpa;\&lt;CR&gt;\&lt;CR&gt;"

    " vytvoreni getteru
    execute "normal ipublic " . a:type . " get\&lt;Esc&gt;\"ypa() {\&lt;CR&gt;"
    execute "normal i    return this.\&lt;Esc&gt;\"xpa;\&lt;CR&gt;"
    execute "normal i}\&lt;CR&gt;\&lt;CR&gt;"

    " vytvoreni setteru
    execute "normal ipublic void set\&lt;Esc&gt;\"ypa(" . a:type . " value) {\&lt;CR&gt;"
    execute "normal i    this.\&lt;Esc&gt;\"xpa=value;\&lt;CR&gt;"
    execute "normal i}\&lt;CR&gt;"
endfunction
</pre>

<a href="http://i.iinfo.cz/images/231/vim0814.png"><img src="http://i.iinfo.cz/images/231/vim0814-prev.png" width="369" height="270" alt=" " /></a>
<p><i>Obrázek 14: Ukázka programového kódu vytvořeného upravenou variantou
funkce CreateProperty()</i></p>



<p><a name="k08"></a></p>
<h2>8. Vylepšení funkce pro automatické vytváření getterů a setterů</h2>

<p>Funkci <strong>CreateProperty</strong> je opět možné volat přímo
z&nbsp;příkazového režimu:</p>

<pre>
:call CreateProperty("String")
</pre>

<p>Ovšem mnohem lepší je použít vhodná mapování, například:</p>

<pre>
" cps = create property string
map ,cps :call CreateProperty("String")&lt;CR&gt;
</pre>

<pre>
" cpi = create property integer
map ,cpi :call CreateProperty("int")&lt;CR&gt;
</pre>

<pre>
" cpf = create property float
map ,cpf :call CreateProperty("float")&lt;CR&gt;
</pre>

<pre>
" cpd = create property double
map ,cpd :call CreateProperty("double")&lt;CR&gt;
</pre>

<p>Rychlejší však bude vytvoření pomocné funkce, která při svém zavolání
(většinou opět s&nbsp;využitím mapování) očekává na editovaném řádku
<strong>dvojici</strong> slov. Prvním slovem bude typ atributu, druhým slovem
jeho název. Nově vytvořená funkce se bude jmenovat
<strong>CreatePropertyWithType</strong> a bude se volat například přes
následující mapování:</p>

<pre>
imap ,cp &lt;Esc&gt;:call CreatePropertyWithType()&lt;CR&gt;a
</pre>

<a href="http://i.iinfo.cz/images/225/vim0815.png"><img src="http://i.iinfo.cz/images/225/vim0815-prev.png" width="241" height="270" alt=" " /></a>
<p><i>Obrázek 15: Funkce CreateProperty() upravená tak, aby byla použitelná
v&nbsp;programovacím jazyku Java. Tato funkce může být volaná z&nbsp;další
funkce CreatePropertyWithType(), která na editovaném programovém řádku očekává
jak typ atributu, tak i jeho název.</i></p>

<p>Možná bude zajímavé se podívat na způsob, jakým je vyřešena
&bdquo;přeměna&ldquo; prvního zapsaného slova na parametr funkce
<strong>CreateProperty</strong>. Ve skutečnosti to jde docela jednoduše,
protože se toto slovo smaže pomocí příkazu <strong>bde</strong> (<i>go to Begin
of word, Delete to End</i>), což mj.&nbsp;znamená, že se toto slovo uloží do
pracovního registru <strong>"</strong>. Hodnota tohoto registru je přístupná
přes pseudoproměnnou <strong>@"</strong>, jejíž hodnota je uložena (jen pro
přehlednost) do proměnné <strong>propertyType</strong> a následně je tato
proměnná předána jako parametr funkci <strong>CreateProperty</strong>:</p>

<pre>
function! CreatePropertyWithType()
    " prechod kurzoru na zacatek prvniho slova
    " a smazani celeho slova s ulozenim do registru "
    execute "normal bbde"

    " ziskani hodnoty registru " a nasledne ulozeni
    " do promenne propertyType
    let propertyType=@"

    " smazani mezery a presun na konec druheho slova
    execute "normal xe"

    " zavolani puvodni funkce CreateProperty
    call CreateProperty(propertyType)
endfunction

" funkce, ktera pro slovo, na nemz se nachazi kurzor
" vytvori property daneho typu
function! CreateProperty(type)
    " ulozit slovo nachazejici se pod kurzorem
    " do registru 'x'
    execute "normal b\"xyw"

    " zmena prvniho znaku slova na velke pismeno
    " a ulozeni zmeneneho nazvu do registru 'y'
    execute "normal gUl\"ydw"

    " prvni radek - typ a jmeno property jako
    " privatniho atributu objektu
    execute "normal iprivate " . a:type . " \&lt;Esc&gt;\"xpa;\&lt;CR&gt;\&lt;CR&gt;"

    " vytvoreni getteru
    execute "normal ipublic " . a:type . " get\&lt;Esc&gt;\"ypa() {\&lt;CR&gt;"
    execute "normal i    return this.\&lt;Esc&gt;\"xpa;\&lt;CR&gt;"
    execute "normal i}\&lt;CR&gt;\&lt;CR&gt;"

    " vytvoreni setteru
    execute "normal ipublic void set\&lt;Esc&gt;\"ypa(" . a:type . " value) {\&lt;CR&gt;"
    execute "normal i    this.\&lt;Esc&gt;\"xpa=value;\&lt;CR&gt;"
    execute "normal i}\&lt;CR&gt;"
endfunction
</pre>

<a href="http://i.iinfo.cz/images/432/vim0816.png"><img src="http://i.iinfo.cz/images/432/vim0816-prev.png" width="287" height="270" alt=" " /></a>
<p><i>Obrázek 16: Ukázka programového kódu vytvořeného upravenou variantou
funkce CreateProperty() volané z&nbsp;funkce CreatePropertyWithType(). Nejprve
byla ručně zapsána kostra třídy, posléze poloautomaticky vytvořeny atributy i
s&nbsp;příslušnými settery a gettery a na závěr byl zdrojový kód zformátován
pomocí příkazu =% (kurzor se musel nacházet na jedné ze složených závorek
omezující třídu Customer). <strong>Čas vytvoření tohoto souboru: 15
sekund</strong>.</i></p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>snipMate : TextMate-style snippets for Vim <br />
<a href="http://www.vim.org/scripts/script.php?script_id=2540">http://www.vim.org/scripts/script.php?script_id=2540</a>
</li>

<li>msanders / snipmate.vim<br />
<a href="https://github.com/msanders/snipmate.vim">https://github.com/msanders/snipmate.vim</a>
</li>

<li>snipMate.vim Introductory Screencast<br />
<a href="http://vimeo.com/3535418">http://vimeo.com/3535418</a>
</li>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Exuberant ctags<br />
<a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a>
</li>

<li>xxd (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>ctags (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags</a>
</li>

<li>cscope (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Novinky ve VIM 7: Úvodní část - speller<br />
<a href="http://www.root.cz/vim-sedm-prvni-cast/">http://www.root.cz/vim-sedm-prvni-cast/</a>
</li>

<li>Novinky ve VIM 7: Skriptovací jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>vim2elvis: Přednosti a nedostaky Elvise v porovnání s Vimem<br />
<a href="http://www.root.cz/clanky/vim2elvis-1/">http://www.root.cz/clanky/vim2elvis-1/</a>
</li>

<li>vim2elvis: Shodné znaky mezi Elvisem a Vimem, nastavení­editoru<br />
<a href="http://www.root.cz/clanky/vim2elvis-2/">http://www.root.cz/clanky/vim2elvis-2/</a>
</li>

<li>Nej... VIM pluginy (1)<br />
<a href="http://www.root.cz/clanky/nej-vim-pluginy/">http://www.root.cz/clanky/nej-vim-pluginy/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Scroll Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Scroll_lock">http://necyklopedie.wikia.com/wiki/Scroll_lock</a>
</li>

<li>Caps Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Caps_Lock">http://necyklopedie.wikia.com/wiki/Caps_Lock</a>
</li>

<li>Avoid the escape key<br />
<a href="http://vim.wikia.com/wiki/Avoid_the_escape_key">http://vim.wikia.com/wiki/Avoid_the_escape_key</a>
</li>

<li>Map caps lock to escape in XWindows<br />
<a href="http://vim.wikia.com/wiki/VimTip166">http://vim.wikia.com/wiki/VimTip166</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2011</small></p>
</body>
</html>

