<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textový editor Vim jako IDE (3.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textový editor Vim jako IDE (3.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části seriálu o použití textového editoru Vim (nejenom) ve funkci vývojového prostředí si připomeneme, které příkazy lze využít při editaci zdrojových kódů, jak lze odsazovat bloky zdrojového kódu a posléze si popíšeme relativně novou funkci Vimu &ndash; technologii &bdquo;omni completion&ldquo;. Na závěr si řekneme, jak lze přímo ve Vimu vytvořit ze zdrojových kódů HTML stránku obsahující program se zvýrazněním syntaxe.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Příkazy určené pro editaci zdrojových kódů</a></p>
<p><a href="#k02">2. Využití příkazu %</a></p>
<p><a href="#k03">3. Odsazení bloků ve zdrojovém kódu</a></p>
<p><a href="#k04">4. Nastavení parametrů shiftwidth a cinoptions</a></p>
<p><a href="#k05">5. Omni completion &ndash; nová vlastnost Vimu 7</a></p>
<p><a href="#k06">6. Využití omni completion při vývoji v&nbsp;jazyku C</a></p>
<p><a href="#k07">7. Využití omni completion při editaci HTML, XHTML a XML</a></p>
<p><a href="#k08">8. Vytvoření HTML stránky s&nbsp;obarveným zdrojovým kódem</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Příkazy určené pro editaci zdrojových kódů</h2>

<p><i>"vi is small, fast, and easy to use. Emacs is huge, slow and easy to use :)"</i></p>

<p>V&nbsp;předchozí části seriálu o textovém editoru <i>Vim</i> jsme si kromě
dalších informací stručně popsali některé přídavné moduly určené pro
zjednodušení a současně i urychlení vývoje v&nbsp;různých programovacích
jazycích (ostatně síla <i>Vimu</i> se ukáže právě ve chvíli, kdy se tento
textový editor použije pro vývoj projektu, v&nbsp;němž se pracuje s&nbsp;větším
množstvím programovacích jazyků a konfiguračních či datových souborů). Ovšem i
bez využití přídavných modulů (pluginů) obsahuje samotný <i>Vim</i> poměrně
velké množství příkazů využitelných při editaci zdrojových kódů. Některé
z&nbsp;těchto příkazů existovaly již v&nbsp;původním editoru <a
href="http://ex-vi.sourceforge.net/">vi</a> (dnes je na Linuxu dostupná jeho
volná verze nazvaná <i>nvi</i>, která se snaží do co největší míry napodobit
původní editor <i>vi</i>, včetně několika chyb :-), což ovšem jen vypovídá <a
href="http://halffull.org/images/viman.jpg">o síle</a> tohoto editoru), ovšem
většinu dále popsaných příkazů najdeme až v&nbsp;novějších verzích
<i>Vimu</i>.</p>

<a href="http://i.iinfo.cz/images/257/vim03-1.png"><img src="http://i.iinfo.cz/images/257/vim03-1-prev.png" width="370" height="211" alt=" " /></a>
<p><i>Obrázek 1: Zdrojový text otevřený v&nbsp;textovém editoru nvi, který se
snaží svým chováním do co největší míry napodobit původní textový editor
vi.</i></p>

<p>V&nbsp;následující tabulce jsou vypsány některé příkazy dostupné
v&nbsp;normálním režimu, které lze využít při práci se zdrojovými kódy většiny
programovacích jazyků:</p>

<table>
<tr><th>Příkaz</th><th>Mnemotechnická pomůcka</th><th>Význam</th></tr>
<tr><td>dab</td><td>delete a block</td><td>vymazání textu mezi kulatými závorkami včetně závorek</td></tr>
<tr><td>dib</td><td>delete inner block</td><td>vymazání textu mezi kulatými závorkami bez závorek (ty zůstanou v&nbsp;textu zachovány)</td></tr>
<tr><td>daB</td><td>delete a Block</td><td>vymazání textu mezi složenými závorkami včetně závorek</td></tr>
<tr><td>diB</td><td>delete inner Block</td><td>vymazání textu mezi složenými závorkami bez závorek</td></tr>
<tr><td>dat</td><td>delete a tag</td><td>vymazání textu umístěného v&nbsp;párové značce, včetně otvírací i zavírací značky (platí zejména pro soubory HTML, XHTML a XML)</td></tr>
<tr><td>dit</td><td>delete inner tag</td><td>vymazání textu umístěného v&nbsp;párové značce, například v&nbsp;odstavci (platí zejména pro soubory HTML, XHTML a XML)</td></tr>
<tr><td>cab</td><td>change a block</td><td>změna textu mezi kulatými závorkami včetně závorek</td></tr>
<tr><td>cib</td><td>change inner block</td><td>změna textu mezi kulatými závorkami</td></tr>
<tr><td>caB</td><td>change a Block</td><td>změna textu mezi složenými závorkami včetně závorek</td></tr>
<tr><td>ciB</td><td>change inner Block</td><td>změna textu mezi složenými závorkami</td></tr>
<tr><td>%</td><td>&times;</td><td>přeskok mezi znaky definovanými volbou <strong>matchpairs</strong></td></tr>
<tr><td>=</td><td>&times;</td><td>zarovnání textu vybraného libovolnou výběrovou operací</td></tr>
<tr><td>=aB</td><td>indent a Block</td><td>kombinace operátoru = a výběru bloku mezi {}</td></tr>
<tr><td>&gt;</td><td>&rarr;</td><td>posun textu vybraného libovolnou výběrovou operací doprava o <strong>shiftwidth</strong></td></tr>
<tr><td>&lt;</td><td>&larr;</td><td>posun textu vybraného libovolnou výběrovou operací doleva o <strong>shiftwidth</strong></td></tr>
<tr><td>&gt;&gt;</td><td>&rarr;</td><td>posun jediného řádku doprava o hodnotu nastavenou pomocí volby <strong>set shiftwidth</strong></td></tr>
<tr><td>&lt;&lt;</td><td>&larr;</td><td>posun jediného řádku doleva o hodnotu nastavenou pomocí volby <strong>set shiftwidth</strong></td></tr>
</table>

<a href="http://i.iinfo.cz/images/257/vim03-2.png"><img src="http://i.iinfo.cz/images/257/vim03-2-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 2: Odsazení části zdrojového textu doprava pomocí příkazu &gt;
v&nbsp;případě, že je volba <strong>shiftwidth</strong> nastavena na hodnotu
4.</i></p>



<p><a name="k02"></a></p>
<h2>2. Využití příkazu %</h2>

<p>V&nbsp;tabulce vypsané v&nbsp;předchozí kapitole byl uveden i zdánlivě
primitivní příkaz <strong>%</strong>, který je však ve skutečnosti velmi
užitečný. Tento příkaz je součástí původního textového editoru <i>vi</i>, ovšem
pro potřeby <i>Vimu</i> byl v&nbsp;několika ohledech vylepšen. V&nbsp;čem však
vlastně spočívá užitečnost tohoto příkazu při editaci zdrojových kódů? Tento
příkaz dokáže najít na aktuálně editovaném řádku takzvaný <i>párový znak</i>
umístěný na místě kurzoru či napravo od kurzoru a posléze skočí na opačný
párový znak. Tento druhý párový znak se může nacházet jak napravo, tak i nalevo
od kurzoru, popř.&nbsp;na zcela jiném řádku v&nbsp;editovaném souboru. Chování
příkazu <strong>%</strong> je ukázáno na screenshotu 3 až 5. Vzhledem
k&nbsp;tomu, že se jedná o příkaz přesunu kurzoru, lze ho kombinovat
s&nbsp;příkazy <strong>d</strong>, <strong>c</strong>, <strong>&gt;</strong>
atd.</p>

<a href="http://i.iinfo.cz/images/257/vim03-3.png"><img src="http://i.iinfo.cz/images/257/vim03-3-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 3: Pozice textového kurzoru před zavoláním příkazu %.</i></p>

<p>Jako <i>párové znaky</i> jsou většinou nastaveny tři druhy závorek &ndash;
kulaté závorky (), hranaté závorky [] a složené závorky {}. Ovšem pomocí volby
<strong>matchpairs</strong> lze nastavit i další párové znaky, například ostré
závorky &lt;&gt; (v&nbsp;současnosti jsou párové znaky omezeny skutečně na
dvojici jednotlivých znaků, v&nbsp;případě potřeby však lze použít velmi
užitečný plugin nazvaný <strong>matchit</strong>, který je součástí distribuce
<i>Vimu</i>):</p>

<pre>
:set matchpairs=(:),[:],{:},&lt;:&gt;
</pre>

<a href="http://i.iinfo.cz/images/257/vim03-4.png"><img src="http://i.iinfo.cz/images/257/vim03-4-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 4: Po zadání příkazu % je napravo od kurzoru nalezen první párový
znak, kterým je v&nbsp;tomto případě levá složená závorka {. Posléze editor
nalezne druhý párový znak (je na řádku 19) a přesune se na něj.</i></p>

<p>Z&nbsp;předchozího příkladu je patrné, jak se párové znaky zapisují &ndash;
jsou od sebe odděleny dvojtečkou, přičemž jednotlivé dvojice jsou od sebe
odděleny čárkou. Volba <strong>matchpairs</strong> má ještě jeden význam, a to
v&nbsp;souvislosti s&nbsp;volbou <strong>showmatch</strong>. V&nbsp;případě, že
je tato volba zapnuta příkazem:</p>

<pre>
:set showmatch
</pre>

<p>tak se při zápisu uzavíracího párového znaku textový kurzor na okamžik
(stanovený pomocí <strong>matchtime</strong>) přemístí na otevírací párový
znak, což například zjednodušuje zápis složitějších matematických výrazů,
protože <i>Vim</i> se samozřejmě snaží o správné spojení párových znaků i
v&nbsp;případě, že je jich ve výrazu zapsáno větší množství, a to
v&nbsp;libovolné kombinaci, což je naznačeno níže (zpárované znaky jsou
vizuálně spojeny):</p>

<pre>
#define MAX(a,b) ( (a)&gt;(b) ? (a) : (b) )
           |   | | | |    | |   | |   | | |
           `---' | `-'    `-'   `-'   `-' |
                 `------------------------'
</pre>

<a href="http://i.iinfo.cz/images/257/vim03-5.png"><img src="http://i.iinfo.cz/images/257/vim03-5-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 5: Opětovné zadání příkazu % způsobí návrat na otevírací složenou
závorku {.</i></p>



<p><a name="k03"></a></p>
<h2>3. Odsazení bloků ve zdrojovém kódu</h2>

<p>Dalším příkazem, který je určený především pro editaci zdrojových kódů, je
příkaz <strong>=</strong>, jenž slouží pro zarovnání kódu podle nastavených
pravidel. Tento příkaz musí být doplněný některým příkazem pro posun textového
kurzoru, popř.&nbsp;příkazem, kterým se specifikuje rozsah platnosti. Například
se může jednat o příkazy <strong>ab</strong> (<i>a block</i>),
<strong>ib</strong> (<i>inner block</i>), <strong>aB</strong> či
<strong>iB</strong> zmíněné v&nbsp;první kapitole tohoto článku, poměrně často
se však taktéž může hodit výběr textu ve výběrovém režimu (příkazy
<strong>v</strong>, <strong>V</strong> a <strong>Ctrl+V</strong>) následovaný
zadáním příkazu <strong>=</strong>. Chování příkazu <strong>=</strong> je
ovlivněno především volbou <strong>equalprg</strong>. Pokud tato volba
neobsahuje žádnou hodnotu, tj.&nbsp;po zavolání příkazu:</p>

<pre>
:set equalprg=
</pre>

<p>je použit interní algoritmus pro zarovnání či odsazení textu, v&nbsp;opačném
případě se zadaná hodnota považuje za jméno externího příkazu, který je zavolán
a vybraný text je tomuto příkazu předán přes standardní vstup.</p>

<a href="http://i.iinfo.cz/images/257/vim03-6.png"><img src="http://i.iinfo.cz/images/257/vim03-6-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 6: Nezformátovaný céčkový zdrojový text.</i></p>

<p>Pro formátování běžného textu (pokud se tedy nespokojíme s&nbsp;možnostmi
formátování s&nbsp;využitím příkazu <strong>gq</strong>, které jsou poměrně
velké) lze použít například externí nástroj (filtr) nazvaný
<strong>fmt</strong>:</p>

<pre>
:set equalprg=fmt
</pre>

<p>popř.&nbsp;stejný filtr, ale s&nbsp;předáním konfiguračních parametrů na
příkazové řádce:</p>

<pre>
:set equalprg=fmt\ -t\ -w60
</pre>

<p>V&nbsp;případě, že konfigurační parametr <strong>equalprg</strong>
neobsahuje žádnou hodnotu, je vybraná část textu formátována interním
algoritmem. Těchto algoritmů existuje několik, přičemž výběr jednoho
z&nbsp;nich se provádí pomocí voleb <strong>smartindent</strong>,
popř.&nbsp;<strong>cindent</strong> a taktéž (i když dnes již méně často, než
v&nbsp;minulosti) <strong>lisp</strong>. Pro formátování/odsazování céčkovských
zdrojových kódů se většinou používá volba <strong>cindent</strong>,
popř.&nbsp;se volá externí filtr <strong>indent</strong>.</p>

<a href="http://i.iinfo.cz/images/257/vim03-7.png"><img src="http://i.iinfo.cz/images/257/vim03-7-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 7: Výsledek příkazu <strong>=aB</strong> v&nbsp;případě, že je
nastavena volba <strong>cindent</strong>.</i></p>



<p><a name="k04"></a></p>
<h2>4. Nastavení parametrů shiftwidth a cinoptions</h2>

<p>Konfigurace interního algoritmu odsazování vybraného s&nbsp;využitím volby
<strong>cindent</strong> jsou určeny pomocí hodnoty konfiguračního parametru
<strong>cinoptions</strong>, navíc se ještě odsazování řídí parametry
<strong>shiftwidth</strong> a <strong>tabstop</strong>. Řídicí znaky
ovlivňující formátování, které lze do konfiguračního parametru
<strong>cinoptions</strong> dosadit, lze zobrazit přímo ve <i>Vimu</i> pomocí
příkazu:</p>

<pre>
:help cinoptions-values
</pre>

<p>Některé často používané řídicí znaky jsou vypsány v&nbsp;následující tabulce
(za <strong>N</strong> se dosazuje v&nbsp;některých případech celé číslo,
v&nbsp;některých případech i číslo desetinné, v&nbsp;obou případech se jedná o
relativní hodnotu vůči <strong>shiftwidth</strong>):</p>

<table>
<tr><th>Řídicí znak</th><th>Význam</th></tr>
<tr><td>fN</td><td>úroveň posunutí otevírací levé závorky { pod jménem funkce</td></tr>
<tr><td>:N</td><td>úroveň odsazení větví case/default v&nbsp;konstrukci switch-case (někdo preferuje, aby se příkazy case umisťovaly přímo pod switch, někdo tyto příkazy raději odsazuje)</td></tr>
<tr><td>=N</td><td>odsazení příkazu/příkazů za klíčovým slovem case/default</td></tr>
<tr><td>bN</td><td>odsazení příkazu break v&nbsp;konstrukci switch-case</td></tr>
<tr><td>hN</td><td>podobné volbě =N, ale platné pro klíčová slova public atd. (C++)</td></tr>
</table>

<a href="http://i.iinfo.cz/images/257/vim03-8.png"><img src="http://i.iinfo.cz/images/257/vim03-8-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 8: Zdrojový kód zformátovaný pomocí příkazu <strong>g=G</strong>
při nastavení konfiguračního parametru <strong>shiftwidth</strong> na hodnotu
2.</i></p>

<p>Počet mezer, o něž se interní programové bloky odsadí od levého okraje, se
specifikuje konfiguračním parametrem <strong>shiftwidth</strong>. Rozdíl mezi
nastavením:</p>

<pre>
:set shiftwidth=2
</pre>

<p>a nastavením:</p>

<pre>
:set shiftwidth=4
</pre>

<p>je patrný ze screenshotů číslo 8 a 9.</p>

<a href="http://i.iinfo.cz/images/257/vim03-9.png"><img src="http://i.iinfo.cz/images/257/vim03-9-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 9: Zdrojový kód zformátovaný pomocí příkazu <strong>g=G</strong>
při nastavení konfiguračního parametru <strong>shiftwidth</strong> na hodnotu
4.</i></p>

<p>Poznámka: pokud preferujete automatické přeformátování celého programového
bloku ihned po zápisu uzavírací složené závorky }, je možné předefinovat funkci
znaku &bdquo;}&ldquo; v&nbsp;režimu vkládání následujícím příkazem:</p>

<pre>
:imap } }&lt;Esc&gt;=%``a
</pre>

<p>Tento příkaz zajistí, že se po zápisu znaku &bdquo;}&ldquo; tento znak
skutečně vloží do zdrojového kódu, nicméně ihned poté je zavolán příkaz
<strong>=</strong> současně s&nbsp;pohybem kurzoru na začátek bloku
(<strong>%</strong>) a posléze je pomocí příkazu <strong>``</strong> (zpětné
apostrofy, ne apostrofy přímé) obnovena pozice textového kurzoru
v&nbsp;souboru.</p>



<p><a name="k05"></a></p>
<h2>5. Omni completion &ndash; nová vlastnost Vimu 7</h2>

<p>Další vlastností textového editoru <i>Vim</i>, kterou se dnes budeme
zabývat, je technologie nazvaná &bdquo;omni completion&ldquo;. Tato
technologie, která se ve <i>Vimu</i> objevila až v&nbsp;jeho sedmé verzi,
rozšiřuje možnosti automatického doplňování kódu o externí nástroje. Připomeňme
si, že <i>Vim</i> nabízí ve vkládacím a přepisovacím režimu klávesovou zkratku
<strong>Ctrl+P</strong> (<i>previous</i>) pro nalezení a doplnění slova
nacházejícího se před kurzorem a taktéž zkratku <strong>Ctrl+N</strong>
(<i>next</i>), která slouží ke stejnému účelu, ovšem hledá slovo pro doplnění
v&nbsp;textu za kurzorem (pokud je k&nbsp;dispozici více možností, zobrazí se
v&nbsp;kontextovém menu).</p>

<a href="http://i.iinfo.cz/images/257/vim03-10.png"><img src="http://i.iinfo.cz/images/257/vim03-10-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 10: Doplňování kódu pomocí příkazů CTRL+P a CTRL+N.</i></p>

<p>Ovšem možnosti automatického doplňování kódu jsou daleko větší, textový
editor <i>Vim</i> pro ně dokonce nabízí samostatný režim vyvolávaný
z&nbsp;vkládacího či přepisovacího režimu klávesovou zkratkou
<strong>Ctrl+X</strong>. Po stlačení této klávesové zkratky se v&nbsp;příkazové
řádce objeví řádkové menu s&nbsp;příkazy platnými pro režim doplňování. Všechny
dostupné příkazy jsou vypsány v&nbsp;tabulce níže:</p>

<table>
<tr><th> #</th><th>Příkaz</th><th>Význam</th></tr>
<tr><td> 1</td><td>Ctrl+X Ctrl+L</td><td>nalezení a doplnění celého (shodného) řádku, užitečné především v&nbsp;případě editace některých typů konfiguračních souborů</td></tr>
<tr><td> 2</td><td>Ctrl+X Ctrl+N</td><td>doplnění slova, které se nalézá v&nbsp;aktuálně editovaném souboru</td></tr>
<tr><td> 3</td><td>Ctrl+X Ctrl+K</td><td>podobné Ctrl+N, ovšem slova se hledají v&nbsp;souborech specifikovaných pomocí konfiguračního parametru <strong>dictionary</strong> (jedná se o běžný textový soubor se seznamem slov)</td></tr>
<tr><td> 4</td><td>Ctrl+X Ctrl+T</td><td>podobné Ctrl+T, ovšem slova se hledají v&nbsp;souborech specifikovaných pomocí konfiguračního parametru <strong>thesaurus</strong></td></tr>
<tr><td> 5</td><td>Ctrl+X Ctrl+I</td><td>podobné Ctrl+N, ovšem prohledávají se i všechny vkládané (included) soubory</td></tr>
<tr><td> 6</td><td>Ctrl+X Ctrl+]</td><td>vyhledávání v&nbsp;seznamu značek</td></tr>
<tr><td> 7</td><td>Ctrl+X Ctrl+F</td><td>doplnění názvu souboru a/nebo cesty, postačuje například zadat text ~/ za nímž následuje klávesová zkratka Ctrl+X Ctrl+F a zobrazí se výpis souborů v&nbsp;domácím adresáři</td></tr>
<tr><td> 8</td><td>Ctrl+X Ctrl+D</td><td>vyhledání definice makra a doplnění jména tohoto makra</td></tr>
<tr><td> 9</td><td>Ctrl+X Ctrl+U</td><td>zavolání funkce zadané v&nbsp;konfiguračním parametru <strong>completefunc</strong>, které se předá právě editovaný text</td></tr>
<tr><td>10</td><td>Ctrl+X Ctrl+O</td><td>vyvolání omni completion popsané v&nbsp;následující kapitole (dostupné od Vimu 7)</td></tr>
</table>

<a href="http://i.iinfo.cz/images/257/vim03-11.png"><img src="http://i.iinfo.cz/images/257/vim03-11-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 11: Doplnění názvu souboru v&nbsp;pracovním adresáři pomocí
příkazu CTRL+X CTRL+F.</i></p>



<p><a name="k06"></a></p>
<h2>6. Využití omni completion při vývoji v&nbsp;jazyku C</h2>

<p>V&nbsp;předchozí kapitole jsme si řekli, že pomocí klávesové zkratky
<strong>Ctrl+X Ctrl+O</strong> lze ve vkládacím a přepisovacím režimu zavolat
technologii &bdquo;omni completion&ldquo;. Tuto technologii lze využít pro
(pseudo)inteligentní doplňování textů založeném na analýze zdrojových kódů.
Podobnou funkci můžeme najít v&nbsp;nejrůznějších integrovaných vývojových
prostředích (Eclipse, Netbeans, Visual Studio), v&nbsp;nichž lze doplňovat
například jména prvků ve strukturách či uniích, atributů objektů, metod objektů
či tříd, jmen balíčků atd. Textový editor <i>Vim</i> při doplňování používá
kombinaci externích nástrojů (například <i>ctags</i> v&nbsp;případě céčkových
programů) a skriptů. Ukažme si nejdříve, jak lze omni completion využít u
aplikací vyvíjených v&nbsp;programovacím jazyku C. Vzhledem k&nbsp;tomu, že
samotný <i>Vim</i> nemá prakticky žádné kontextové informace o editovaných
céčkovských zdrojových kódech, využívá k&nbsp;jejich získání výstup
z&nbsp;externího nástroje <i>ctags</i>.</p>

<a href="http://i.iinfo.cz/images/257/vim03-12.png"><img src="http://i.iinfo.cz/images/257/vim03-12-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 12: Využití technologie omni completion při práci
s&nbsp;céčkovským zdrojovým kódem.</i></p>

<p>V&nbsp;případě, že je pro daný projekt vygenerován soubor se značkami pomocí
nástroje <i>ctags</i>, je možné pomocí omni completion doplňovat názvy funkcí,
maker, ale dokonce i jména prvků ve strukturách a uniích. Tato jména jsou
doplňována po zapsání znaku tečky popř.&nbsp;šipky (-&gt;), samozřejmě
v&nbsp;závislosti na tom, zda se jedná přímo o jméno struktury, nebo o jméno
ukazatele na strukturu.</p>

<a href="http://i.iinfo.cz/images/257/vim03-13.png"><img src="http://i.iinfo.cz/images/257/vim03-13-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 13: Využití technologie omni completion při editaci HTML
stránky.</i></p>



<p><a name="k07"></a></p>
<h2>7. Využití omni completion při editaci HTML, XHTML a XML</h2>

<p>Zajímavá je taktéž podpora technologie &bdquo;omni completion&ldquo; pro
soubory typu HTML, XHTML či XML. V&nbsp;tomto případě je (samozřejmě) možné
doplňovat jména jednotlivých uzlů, ale i názvy elementů či atributů, a to
včetně jejich hodnot. Textový editor <i>Vim</i> zjistí, které
uzly/atributy/hodnoty lze v&nbsp;daném kontextu použít, což například znamená,
že se v&nbsp;případě editace HTML stránky uvnitř značek &lt;p&gt; po zadání
prefixu &lt;st nenabídne možnost vložení uzlu &lt;style&gt;, zatímco při
použití stejného prefixu v&nbsp;kořenovém uzlu ano.</p>

<a href="http://i.iinfo.cz/images/257/vim03-14.png"><img src="http://i.iinfo.cz/images/257/vim03-14-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 14: Využití technologie omni completion při editaci HTML
stránky.</i></p>

<p>Pokud se vám zdá použití klávesové zkratky <strong>CTRL+X CTRL+O</strong>
poněkud krkolomné, není nic jednoduššího, než si tuto zkratku přemapovat pro
vkládací a přepisovací režim příkazem <strong>imap</strong>. V&nbsp;případě, že
<i>Vim</i> (či spíše <i>Gvim</i>) správně rozpozná klávesovou zkratku
<strong>CTRL+mezera</strong>, lze využít následující mapování:</p>

<pre>
:imap &lt;C-Space&gt; &lt;C-X&gt;&lt;C-O&gt;
</pre>

<p>Pokud se navíc ve zdrojových textech nikde nepoužívá tabulátor (záleží na
zvolené štábní kultuře), může pomoci toto mapování:</p>

<pre>
:imap &lt;Tab&gt; &lt;C-X&gt;&lt;C-O&gt;
</pre>

<a href="http://i.iinfo.cz/images/257/vim03-15.png"><img src="http://i.iinfo.cz/images/257/vim03-15-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 15: Zavolání skriptu 2html.vim (viz následující
kapitolu).</i></p>



<p><a name="k08"></a></p>
<h2>8. Vytvoření HTML stránky s&nbsp;obarveným zdrojovým kódem</h2>

<p>Textový editor <i>Vim</i> obsahuje ve své standardní instalaci taktéž
v&nbsp;mnoha případech užitečný skript nazvaný příznačně <i>2html.vim</i>.
Tento skript slouží pro vytvoření HTML stránky obsahující právě editovaný
zdrojový kód se zvýrazněním syntaxe. Skript pro zvýraznění syntaxe přitom
využívá stejné barvy, jaké jsou nastaveny v&nbsp;textovém editoru, takže odpadá
nutnost mnohdy komplikovaných konfigurací externích &bdquo;obarvovačů
kódu&ldquo; (jediný problém může způsobit špatně nastavená hodnota
konfiguračního parametru <strong>background</strong>, který lze nastavit na
<strong>dark</strong> nebo <strong>light</strong>). Existence skriptu
<i>2html.vim</i> taktéž zaručuje, že jakýkoli typ textového souboru, u nějž se
ve <i>Vimu</i> zvýrazňuje syntaxe, bude možné vyexportovat do formátu HTML.
V&nbsp;současnosti obsahuje <i>Vim</i> v&nbsp;konfiguračních souborech
syntaktická (či přesněji řečeno lexikální) pravidla pro více než 500 různých
typů souborů, o čemž se ostatně můžete sami přesvědčit zadáním následujícího
příkazu:</p>

<pre>
:!ls -1 $VIMRUNTIME/syntax | wc -l

521 (nebo podobné číslo)
</pre>

<a href="http://i.iinfo.cz/images/257/vim03-16.png"><img src="http://i.iinfo.cz/images/257/vim03-16-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 16: HTML stránka vygenerovaná skriptem 2html.vim (nahoře) a
původní textový soubor (dole).</i></p>

<p>Použití skriptu <i>2html.vim</i> je velmi jednoduché. Nejprve se přímo ve
<i>Vimu</i> otevře textový soubor (například zdrojový kód), který se má
vyexportovat do HTML. Posléze se může načíst či upravit barevné schéma, což je
mimochodem téma, kterému se budeme věnovat v&nbsp;následující části tohoto
seriálu. Posléze již stačí skript spustit pomocí příkazu:</p>

<pre>
:source $VIMRUNTIME/syntax/2html.vim
</pre>

<p>popř.&nbsp;pouze:</p>

<pre>
:so $VIMRUNTIME/syntax/2html.vim
</pre>

<p>Tento příkaz lze samozřejmě namapovat na libovolnou klávesovou zkratku a při
zápisu cesty ke skriptu je možné využít automatické doplňování cesty pomocí
klávesy <strong>Tab</strong>. Po spuštění skriptu <i>2html.vim</i> se
v&nbsp;novém okně otevře nový buffer obsahující zdrojový kód HTML stránky,
který lze samozřejmě libovolným způsobem upravovat, typicky změnit titulek,
změnit název souboru, přidat cestu ke style sheetu atd. Export do HTML je
proveden pro aktuálně editovaný buffer, tj.&nbsp;pro buffer, v&nbsp;němž se
nachází textový kurzor.</p>

<a href="http://i.iinfo.cz/images/257/vim03-17.png"><img src="http://i.iinfo.cz/images/257/vim03-17-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 17: Vygenerovaná HTML stránka zobrazená ve WWW
prohlížeči.</i></p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Exuberant ctags<br />
<a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a>
</li>

<li>xxd (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>ctags (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags</a>
</li>

<li>cscope (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Novinky ve VIM 7: Úvodní část - speller<br />
<a href="http://www.root.cz/vim-sedm-prvni-cast/">http://www.root.cz/vim-sedm-prvni-cast/</a>
</li>

<li>Novinky ve VIM 7: Skriptovací jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>vim2elvis: Přednosti a nedostaky Elvise v porovnání s Vimem<br />
<a href="http://www.root.cz/clanky/vim2elvis-1/">http://www.root.cz/clanky/vim2elvis-1/</a>
</li>

<li>vim2elvis: Shodné znaky mezi Elvisem a Vimem, nastavení­editoru<br />
<a href="http://www.root.cz/clanky/vim2elvis-2/">http://www.root.cz/clanky/vim2elvis-2/</a>
</li>

<li>Nej... VIM pluginy (1)<br />
<a href="http://www.root.cz/clanky/nej-vim-pluginy/">http://www.root.cz/clanky/nej-vim-pluginy/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Scroll Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Scroll_lock">http://necyklopedie.wikia.com/wiki/Scroll_lock</a>
</li>

<li>Caps Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Caps_Lock">http://necyklopedie.wikia.com/wiki/Caps_Lock</a>
</li>

<li>Avoid the escape key<br />
<a href="http://vim.wikia.com/wiki/Avoid_the_escape_key">http://vim.wikia.com/wiki/Avoid_the_escape_key</a>
</li>

<li>Map caps lock to escape in XWindows<br />
<a href="http://vim.wikia.com/wiki/VimTip166">http://vim.wikia.com/wiki/VimTip166</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2011</small></p>
</body>
</html>

