<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Použití textového editoru Vim ve funkci IDE</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Použití textového editoru Vim ve funkci IDE</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V tomto článku se po delší době opět na chvíli vrátíme k textovému editoru Vim. Řekneme si, jaké nástroje může tento textový editor nabídnout vývojářům při jejich každodenní činnosti, tj. pro přípravu zdrojových kódů, navigaci v projektu, porovnávání dvou verzí souborů či při překladu a následné opravě chyb. Nezapomeneme ani na použití Vimu jako hexa editoru při modifikaci binárních souborů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Použití textového editoru Vim ve funkci IDE</a></p>
<p><a href="#k02">2. Změna fontu a řádkování při použití Vimu s&nbsp;GUI</a></p>
<p><a href="#k03">3. Zobrazení čísel řádků, zvýraznění řídicích znaků, zalamování řádků</a></p>
<p><a href="#k04">4. Zvýraznění tabulátorů, záměna tabulátorů za mezery a naopak</a></p>
<p><a href="#k05">5. Navigace ve zdrojovém kódu</a></p>
<p><a href="#k06">6. Práce s&nbsp;manuálovými stránkami</a></p>
<p><a href="#k07">7. Porovnání zdrojových kódů, synchronizace mezi dvěma soubory</a></p>
<p><a href="#k08">8. Vim pracující jako hexa editor?</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Použití textového editoru Vim ve funkci IDE</h2>

<p>Dnešním článkem o textovém editoru <i>Vim</i> volně navážeme na několik
seriálů a článků, které již na <a href="http://www.root.cz">Rootu</a> o tomto
poměrně neobvykle ovladatelném, ale o to výkonnějším textovém editoru vyšly
(viz odkazy uvedené v&nbsp;deváté kapitole). Zaměříme se především na ty funkce
<i>Vimu</i>, které mohou dobře posloužit vývojářům a navíc si ještě popíšeme
některé externí nástroje, které lze současně v&nbsp;<i>Vimem</i> použít. Popis
jednotlivých funkcí bude poměrně stručný, protože další informace lze najít
přímo v&nbsp;nápovědě <i>Vimu</i> či v&nbsp;manuálových stránkách
k&nbsp;externím nástrojům (cílem článku je především upozornit na to, že
<i>Vim</i> dané funkce skutečně obsahuje).</p>

<a href="http://i.iinfo.cz/images/308/vim1-1.png"><img src="http://i.iinfo.cz/images/308/vim1-1-prev.png" width="370" height="233" alt=" " /></a>
<p><i>Obrázek 1: Úvodní obrazovka textového editoru Vim (přesněji řečeno verze
Vimu přeloženého s&nbsp;podporou GTK2 a spuštěného s&nbsp;volbou vim
-g).</i></p>

<p>Dále popsané nástroje využijí především vývojáři vytvářející aplikace
v&nbsp;programovacích jazycích C a C++, i když většina dále popsaných funkcí
není omezena pouze na tyto programovací jazyky. Práce vývojáře samozřejmě
nespočívá pouze v&nbsp;psaní nového zdrojového kódu (ta většinou zabere pouze
zlomek času programátora), ale především v&nbsp;úpravách stávajícího kódu,
orientaci v&nbsp;obvykle rozsáhlejším projektu s&nbsp;mnoha zdrojovými kódy,
porovnávání různých verzí zdrojových textů, překladu programů, opravy chyb při
překladu a v&nbsp;neposlední řadě i v&nbsp;ladění aplikace v&nbsp;případě, že
se překlad konečně podařil :-) V&nbsp;některých případech taktéž musí vývojáři
pracovat s&nbsp;binárními soubory, i když dnes se již nejedná o tak častou
činnost, jako tomu bylo v&nbsp;minulosti. Prakticky všechny výše popsané
operace lze provádět přímo ve <i>Vimu</i>, přičemž některé z&nbsp;těchto
operací &ndash; především se jedná o navigaci v&nbsp;projektu, editaci
binárních souborů a taktéž o ladění programů &ndash; vyžadují spolupráci
s&nbsp;externími nástroji, s&nbsp;nimiž <i>Vim</i> dokáže efektivně
komunikovat.</p>

<a href="http://i.iinfo.cz/images/308/vim1-15.png"><img src="http://i.iinfo.cz/images/308/vim1-15-prev.png" width="370" height="251" alt=" " /></a>
<p><i>Obrázek 2: Zobrazení seznamu všech chyb generovaných při překladu
projektu pomocí nakonfigurovaného překladače (například gcc) či pomocného
nástroje pro překlad (make). Povšimněte si, že si Vim pamatuje nejenom číslo
řádku, na kterém překladač nahlásil chybu, ale i jméno příslušného zdrojového
souboru. Způsob použití tohoto nástroje si popíšeme příště.</i></p>

<p>Poznámka: s&nbsp;ovladatelností a naučitelností <i>Vimu</i> to ve
skutečnosti <a
href="http://urban.homelinux.org/wp-content/vim_learning.jpg">není tak
špatné</a> :-)</p>



<p><a name="k02"></a></p>
<h2>2. Změna fontu a řádkování při použití Vimu s&nbsp;GUI</h2>

<p>Před popisem vlastních &bdquo;programátorských&ldquo; nástrojů si řekneme,
jakým způsobem je možné nastavit font vhodný pro editaci zdrojových kódů. Pokud
je <i>Vim</i> spouštěn z&nbsp;terminálu bez použití volby <strong>-g</strong>,
spustí se přímo v&nbsp;okně terminálu, tj.&nbsp;je použit font zvolený pro daný
terminál. Ovšem pokud je <i>Vim</i> spuštěn příkazem <strong>gvim</strong>,
popř.&nbsp;<strong>vim -g</strong>, otevře se editační plocha
v&nbsp;samostatném okně, což s&nbsp;sebou přináší i další výhody (například
konfigurovatelnou myš, možnost mapování kláves, které by v&nbsp;terminálu
nebylo možné použít atd.). Pro <strong>gvim</strong> lze font nastavit přímo
v&nbsp;konfiguračním souboru <strong>.vimrc</strong> nebo
<strong>.gvimrc</strong> následujícím způsobem:</p>

<pre>
:set guifont=DejaVu\ Sans\ Mono\ 12
</pre>

<p>Povšimněte si způsobu zápisu mezer. <strong>gvim</strong> taktéž umožňuje
zvolit si font i jeho velikost pomocí interaktivního dialogu; postačuje
v&nbsp;příkazovém režimu napsat následující příkaz:</p>

<pre>
:set guifont=*
</pre>

<p>Poznámka: pokud vyžadujete menší nebo naopak větší mezeru mezi jednotlivými
řádky, lze použít volbu:</p>

<pre>
:set linespace=počet_pixelů
</pre>

<p>Implicitní hodnota je nula, nastavit lze jak kladné číslo (zvětšení mezery),
tak i číslo záporné (zmenšení mezery, pozor na slití řádků dohromady!).</p>

<a href="http://i.iinfo.cz/images/308/vim1-2.png"><img src="http://i.iinfo.cz/images/308/vim1-2-prev.png" width="370" height="251" alt=" " /></a>
<p><i>Obrázek 3: Nastavení fontu v&nbsp;případě, že je textový editor Vim
přeložen s&nbsp;podporou grafického uživatelského rozhraní (editor tedy neběží
v&nbsp;terminálu, ale v&nbsp;samostatném okně, které může v&nbsp;případě
potřeby obsahovat i menu, záložky a posuvné lišty &ndash; scrollbary).</i></p>



<p><a name="k03"></a></p>
<h2>3. Zobrazení čísel řádků, zvýraznění řídicích znaků, zalamování řádků</h2>

<p>Při editaci různých zdrojových textů nebo konfiguračních souborů se
vyskytnou situace, v&nbsp;nichž je nutné zjistit resp.&nbsp;zobrazit čísla
programových řádků. V&nbsp;některých případech může dostačovat zobrazení čísla
řádku, na kterém se v&nbsp;daném okamžiku nachází textový kurzor. Číslo řádku a
současně i číslo sloupce, na němž je umístěn kurzor, se většinou zobrazuje na
takzvaném pravítku (<i>ruler</i>) v&nbsp;pravé dolní části okna dokumentu.
Nejdříve je zobrazeno číslo textového řádku, po něm číslo sloupce následované
relativní pozicí v&nbsp;souboru zadané v&nbsp;procentech (popř.&nbsp;se namísto
procent zobrazují zprávy <strong>Top</strong>, <strong>Bot</strong> či
<strong>All</strong>). Pokud pravítko není zobrazeno, může to znamenat, že se
editor nachází v&nbsp;takzvaném <i>režimu kompatibility</i> s&nbsp;původním
starodávným editorem <i>vi</i>. Režim kompatibility lze snadno vypnout, ať již
přímo v&nbsp;příkazovém režimu, tak i v&nbsp;konfiguračních souborech
<strong>.vimrc/.gvimrc</strong>, které <i>Vim</i> standardně hledá
v&nbsp;domácím adresáři (na Windows se jedná o soubory <strong>_vimrc</strong>
a <strong>_gvimrc</strong>):</p>

<pre>
:set nocompatible
</pre>

<p>V&nbsp;případě, že ani po zadání tohoto příkazu není pravítko zobrazeno a
příkaz <strong>:set compatible?</strong> vrací text
<strong>nocompatible</strong>, můžete využít příkazy:</p>

<pre>
:set ruler
:set statusline=
</pre>

<p>První příkaz zapne použití pravítka, druhý příkaz (pro jistotu) nastaví
implicitní tvar informací zobrazených na pravítku (viz též <strong>:help
statusline</strong>). Občas nastanou situace, kdy by bylo vhodné si zobrazit
čísla všech řádků (jedná se o čísla fyzických řádků, ne zalomených
obrazovkových řádků). I v&nbsp;tomto případě nabízí <i>Vim</i> snadné
řešení:</p>

<pre>
:set number
</pre>

<p>popř.&nbsp;pro ty línější z&nbsp;nás:</p>

<pre>
:se nu
</pre>

<a href="http://i.iinfo.cz/images/308/vim1-3.png"><img src="http://i.iinfo.cz/images/308/vim1-3-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 4: Zobrazení čísel řádků ve zdrojovém souboru pomocí volby
<strong>:set number</strong></i></p>

<p>V&nbsp;závislosti na typu editovaného souboru je možné přepínat mezi různými
režimy zalamování řádků:</p>

<pre>
:set wrap        " pouze vizuální zalamování (do souborů se nevkládá CR)
:set nowrap      " vypnutí vizuálního zalamování
:set linebreak   " vizuální zalamování na hranicích slov (vhodné pro texty, méně pro zdrojové kódy)
:set nolinebreak " vypnutí vizuálního zalamování na hranicích slov
:set tw=xxx      " automatické zalamování na xxx sloupci (vkládá se CR)
</pre>

<p>Další v&nbsp;některých případech užitečnou volbou je zobrazení běžně
neviditelných řídicích znaků, především znaku pro konec řádku a znaku
tabulátoru. Pro zobrazení těchto znaků lze využít následující příkaz:</p>

<pre>
:set list
</pre>

<p>který znaky tabulátoru zobrazí jako <strong>^I</strong> a konec řádku jako
<strong>$</strong>. Tento režim zobrazení se někdy využívá při editaci souborů
<i>Makefile</i>, v&nbsp;nichž je z&nbsp;historických důvodů rozlišován
tabulátor od mezer. Režim lze taktéž využít při hledání přebytečných mezer na
konci řádků, které vznikají například při kopii textu mezi terminálem či
webovou stránkou a textovým editorem. Malá nápověda &ndash; přebytečné mezery
na koncích řádků je možné odstranit například touto substitucí (zadávanou opět
v&nbsp;příkazovém režimu):</p>

<pre>
%s/ \+$//g
</pre>

<p>Volba <strong>:set list</strong> sice koliduje s&nbsp;volbou <strong>:set
linebreak</strong>, ovšem v&nbsp;naprosté většině případů se tato druhá volba
při editaci zdrojových kódů stejně nepoužívá.</p>

<a href="http://i.iinfo.cz/images/308/vim1-4.png"><img src="http://i.iinfo.cz/images/308/vim1-4-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 5: Zobrazení řídicích znaků ve zdrojovém souboru pomocí volby
<strong>:set list</strong>.</i></p>



<p><a name="k04"></a></p>
<h2>4. Zvýraznění tabulátorů, záměna tabulátorů za mezery a naopak</h2>

<p>O základním způsobu zvýraznění znaku tabulátoru jsme se již stručně zmínili
v&nbsp;předchozí kapitole, ovšem řešení nabízené volbou <strong>:set
list</strong> nemusí vždy vyhovovat v&nbsp;každé situaci, především z&nbsp;toho
důvodu, že se celý text na obrazovce po zadání této volby vizuálně přeformátuje
(zvláště nepříjemné je to v&nbsp;situaci, kdy uživatelé kombinují odsazení
pomocí mezer s&nbsp;odsazením s&nbsp;využitím tabulátorů). Ovšem i v&nbsp;tomto
případě <i>Vim</i> nabízí alternativní řešení, které spočívá ve využití
interního engine používaného při obarvovaní textu na základě syntaktické (spíše
však pouze jednodušší lexikální) analýzy textů. V&nbsp;konfiguračním souboru
<strong>.(g)vimrc</strong> nebo v&nbsp;příkazovém režimu postačuje vytvořit
nová pojmenovaná pravidla a posléze těmto pravidlům přiřadit libovolnou barvu
pozadí (barvu popředí netřeba nastavovat, protože tabulátor se zobrazuje jako
několik mezer).</p>

<a href="http://i.iinfo.cz/images/308/vim1-5.png"><img src="http://i.iinfo.cz/images/308/vim1-5-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 6: Tabulátory se v&nbsp;tomto zdrojovém souboru zobrazují jako
mezery, volba <strong>tabstop</strong> má hodnotu 4.</i></p>

<p>Následující čtveřice příkazů zkopírovaná z&nbsp;mého konfiguračního souboru
<strong>.vimrc</strong> nastaví světlezelenou barvu pozadí pro jeden znak
tabulátoru a světle červenou barvu pozadí pro dva za sebou zapsané tabulátory.
Barva pozadí je nastavena jak pro běžný terminál, tak i pro případ, že je
textový editor <i>Vim</i> spuštěn pomocí příkazů <strong>gvim</strong> nebo
<strong>vim -g</strong>, tedy tak, aby využíval vlastní okno s&nbsp;GUI:</p>

<pre>
syn match Tab "\t"
syn match Tab2 "\t\t"
hi def Tab  ctermbg=lightgreen guibg=#e0ffe0
hi def Tab2 ctermbg=lightred guibg=#ffe0e0
</pre>

<p>Samozřejmě je možné si zvýraznit pouze libovolně dlouhou sekvenci tabulátorů
jednou barvou, tj.&nbsp;odstranit pravidlo <i>Tab2</i>, popř.&nbsp;si stejným
způsobem vytvořit pravidla pro delší sekvence &ndash; vše záleží na požadavcích
programátora.</p>

<a href="http://i.iinfo.cz/images/308/vim1-6.png"><img src="http://i.iinfo.cz/images/308/vim1-6-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 7: Tabulátory se v&nbsp;tomto zdrojovém souboru zobrazují jako
mezery, volba <strong>tabstop</strong> má hodnotu 8.</i></p>

<p>S&nbsp;tabulačními zarážkami vkládanými do zdrojových textů mohou nastat
různé problémy, především na projektech, v&nbsp;nichž jsou textové soubory
sdíleny mezi více vývojáři používajícími různé textové editory a IDE (přesněji
řečeno různá nastavení těchto nástrojů). Pokud se pracuje se zdrojovým textem
vytvořeným v&nbsp;editoru s&nbsp;nastavenou jinou &bdquo;délkou&ldquo;
tabulační zarážky, je možné <i>Vim</i> jednoduše překonfigurovat následující
volbou, v&nbsp;níž se za <strong>xxx</strong> doplní příslušný sloupec, na němž
má být tabulační zarážka umístěna (většinou se používá hodnota 4 nebo 8):</p>

<pre>
:set tabstop=xxx
</pre>

<p>Mnozí vývojáři by se nejraději všech znaků tabulátoru ve zdrojových textech
zbavili nadobro (viz též nekonečné flamewar na toto téma vycházející
pravděpodobně z&nbsp;<a
href="http://www.haskell.org/haskellwiki/Wadler's_Law">Wadlerova zákona</a>),
což lze ve <i>Vimu</i> snadno provést. Nejprve je vhodné nastavit vhodnou
hodnotu <strong>tabstop</strong> (viz odstavec výše) a poté provést sekvenci
příkazů:</p>

<pre>
:set expandtab
:retab
</pre>

<p>Poznámka: tyto příkazy nepoužívejte na soubory Makefile, neb lučebník by se
mohl dožít nemilého překvapení.</p>

<p>Poznámka 2: zpětný převod mezer na tabulátory lze taktéž provést, ovšem u
příkazu <strong>retab</strong> se musí na jeho konec zapsat vykřičník:</p>

<pre>
:set tabstop=4
:set noexpandtab
:retab!
</pre>

<a href="http://i.iinfo.cz/images/308/vim1-7.png"><img src="http://i.iinfo.cz/images/308/vim1-7-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 8: Zvýraznění tabulátorů pomocí změny barvy pozadí.</i></p>



<p><a name="k05"></a></p>
<h2>5. Navigace ve zdrojovém kódu</h2>

<p>Konečně se dostáváme k&nbsp;zajímavějším technikám, které textový editor
<i>Vim</i> vývojářům nabízí. Pro lepší orientaci v&nbsp;rozsáhlejším projektu
lze využít takzvané <i>soubory značek</i> (<i>tags</i>), které jsou generované
externím nástrojem <strong>ctags</strong> (<a
href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a>), jenž
dokáže rozpoznat celou řadu programovacích jazyků, samozřejmě včetně klasického
céčka a C++. Pokud se tento nástroj spustí v&nbsp;adresáři se zdrojovými kódy
příkazem:</p>

<pre>
ctags
</pre>

<p>popř.&nbsp;pro projekt obsahující zdrojové soubory umístěné
v&nbsp;podadresářích příkazem:</p>

<pre> 
ctags -R
</pre>

<p>vygeneruje se v&nbsp;aktuálním adresáři (což by měl být hlavní adresář se
zdrojovými kódy) textový soubor nazvaný <strong>tags</strong> se speciálním
formátem, který obsahuje jména identifikátorů ve zdrojovém programu a výraz,
jenž lze použít pro nalezení deklarace tohoto identifikátoru (konkrétní podoba
tohoto souboru nás většinou nemusí zajímat, protože se jedná o soubor
automaticky zpracovávaný <i>Vimem</i>, popř.&nbsp;i dalšími nástroji).
Identifikátorem jsou zde myšleny například jména funkcí, jména struktur či
datových typů, makra atd. Pokud vývojář ve zdrojovém textu uvidí například
volání neznámé funkce, může použít jeden z&nbsp;následujících příkazů pro
přeskok na deklaraci této funkce:</p>

<table>
<tr><th>#</th><th>Příkaz</th><th>Poznámka</th></tr>
<tr><td>1</td><td>:tag jméno funkce</td><td>lze zadat i regulárním výrazem</td></tr>
<tr><td>2</td><td>g+Levé tlačítko myši</td><td>nefunkční v&nbsp;terminálu</td></tr>
<tr><td>3</td><td>Ctrl+Levé tlačítko myši</td><td>nefunkční v&nbsp;terminálu</td></tr>
<tr><td>4</td><td>Ctrl+]</td><td>ve vizuálním režimu podobné :tag</td></tr>
</table>

<a href="http://i.iinfo.cz/images/308/vim1-8.png"><img src="http://i.iinfo.cz/images/308/vim1-8-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 9: Nastavení kurzoru nad název funkce.</i></p>

<p>Na první pohled by se mohlo zdát, že po použití jednoho z&nbsp;výše
uvedených příkazů se programátor nenávratně ztratí v&nbsp;haldě zdrojových kódů
a už nenajde cestu zpět. Ve skutečnosti se však při skoku na deklaraci uloží
původní pozice kurzoru do interního zásobníku, takže je návrat velmi snadný
&ndash; poslouží klávesová zkratka <strong>CTRL+T</strong>. Pro výpis celého
zásobníku se používá příkaz:</p>

<pre>
:tags
</pre>

<p>Aktuální položka v&nbsp;tomto zásobníku je označena znakem &gt;</p>

<a href="http://i.iinfo.cz/images/308/vim1-9.png"><img src="http://i.iinfo.cz/images/308/vim1-9-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 10: Po stisku klávesové zkratky <strong>Ctrl+[</strong> se přejde
na definici funkce.</i></p>

<p>Poznámka: zcela stejný způsob navigace mezi množstvím strukturovaných
textových souborů používá i vestavěný systém nápovědy ve <i>Vimu</i> spuštěný
příkazem <strong>:help</strong>, popř.&nbsp;<strong>:help
jméno_příkazu</strong>. Důvod je jednoduchý &ndash; v&nbsp;adresáři
s&nbsp;nápovědou (například se může jednat o adresář
<i>/usr/share/vim/vim72/doc</i>) je mj.&nbsp;uložen i soubor
<strong>tags</strong>, který spolu s&nbsp;vlastním formátem souborů
s&nbsp;nápovědou zaručuje skoky na její jednotlivá témata.</p>



<p><a name="k06"></a></p>
<h2>6. Práce s&nbsp;manuálovými stránkami</h2>

<p>Při programování v&nbsp;céčku či C++ se samozřejmě často volají i funkce ze
standardních knihoven, popř.&nbsp;z&nbsp;dalších knihoven nainstalovaných
v&nbsp;systému. Čistě teoreticky je možné vytvořit si soubor
<strong>tags</strong> i pro tyto knihovny nebo pro jejich hlavičkové soubory
pomocí volby:</p>

<pre>
ctags -R /usr/lib/include
</pre>

<p>což však přináší poměrně velké problémy, protože vygenerovaný soubor
<strong>tags</strong> je obrovský (jeho velikost hravě překračuje jeden
gigabajt) a práce s&nbsp;ním je pomalá a mnohdy zcela nemožná. Ve skutečnosti
však většinou není nutné, aby programátor viděl přímo <i>implementace</i>
(těla) všech funkcí ze standardních knihoven, proto je možné využít jiný
nástroj <i>Vimu</i> &ndash; jedná se o možnost zobrazení manuálové stránky pro
identifikátor, který se nachází pod textovým kurzorem &ndash; kurzor postačuje
přemístit na identifikátor a v&nbsp;normálním režimu stlačit klávesovou
kombinaci <strong>Shift+K</strong> (tj.&nbsp;velké písmeno <strong>K</strong>).
K&nbsp;funkcím ze standardní knihovny jsou manuálové stránky dostupné,
postačuje je pouze nainstalovat z&nbsp;balíčku pojmenovaného
<strong>man-pages</strong>, <strong>man-pages-dev</strong>,
<strong>manpages-dev</strong> apod. Ve Fedoře nebo RHELu je možné tento balíček
nainstalovat následujícím příkazem:</p>

<pre>
sudo yum install man-pages
</pre>

<p>Na Ubuntu by měl pracovat tento příkaz:</p>

<pre>
sudo apt-get install manpages-dev
</pre>

<a href="http://i.iinfo.cz/images/308/vim1-10.png"><img src="http://i.iinfo.cz/images/308/vim1-10-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 11: Výpis tagů (značek) uložených na zásobníku.</i></p>

<p>Pokud je textový editor <i>Vim</i> spuštěn v&nbsp;terminálu, je při
zobrazení manuálové stránky zavolán příkaz <i>man</i>, takže se při prohlížení
mohou použít všechny klávesové zkratky této aplikace; ovšem v&nbsp;<i>gvimu
(vim -g)</i> se při zobrazení manuálové stránky pouze volají externí filtry,
které stránku naformátují a v&nbsp;okně editoru se zobrazí standardní výstup
těchto filtrů. Z&nbsp;tohoto důvodu je dostupných pouze několik klávesových
zkratek použitelných při prohlížení dokumentace.</p>

<p>Funkci příkazu <strong>Shift+K</strong> lze snadno upravit nastavením
parametru <strong>keywordprg</strong>, například následujícím způsobem:</p>

<pre>
:set keywordprg=info
</pre>

<a href="http://i.iinfo.cz/images/308/vim1-11.png"><img src="http://i.iinfo.cz/images/308/vim1-11-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 12: Vyvolání manuálové stránky přímo z&nbsp;Vimu pomocí klávesy
K.</i></p>



<p><a name="k07"></a></p>
<h2>7. Porovnání zdrojových kódů, synchronizace mezi dvěma soubory</h2>

<p>V&nbsp;poměrně velkém množství případů se programátoři dostanou do situace,
kdy potřebují porovnat a popřípadě i synchronizovat dvě různé verze téhož
souboru. Může se například jednat o zdrojový kód, konfigurační soubory, SQL
skripty, soubory s&nbsp;dokumentací atd. Pro tyto účely lze použít externí
utilitu <strong>diff</strong> a pracovat s&nbsp;daty vygenerovanými touto
aplikací, ovšem pro synchronizaci dvou souborů (řízenou vývojářem) je mnohdy
výhodnější použít přímo interní nástroj zabudovaný do <i>Vimu</i>. Pokud se
tento textový editor spustí s&nbsp;parametrem <strong>-d</strong>, očekávají se
za tímto parametrem jména dvou souborů pro porovnání, popř.&nbsp;jméno souboru
a jméno adresáře, v&nbsp;němž se nachází soubor stejného jména:</p>

<pre>
vim -d test_old.c test_new.c
vim -d test.c ../test-sources/
</pre>

<p>V&nbsp;obou případech textový editor <i>Vim</i> oba soubory skutečně načte
do dvojice bufferů, ovšem režim zobrazení se změní takovým způsobem, že se
pomocí různých barev zvýrazní ty části souborů, které jsou odlišné. Navíc je
možné delší části, jež jsou v&nbsp;obou souborech stejné, &bdquo;zabalit&ldquo;
(klávesová zkratka <strong>zc</strong>).</p>

<a href="http://i.iinfo.cz/images/308/vim1-12.png"><img src="http://i.iinfo.cz/images/308/vim1-12-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 13: Porovnávání dvou souborů při vertikálním rozdělení oken. Toto
rozdělení je vhodné použít v&nbsp;případě, že se jedná o zdrojové soubory
s&nbsp;krátkými řádky, popř.&nbsp;pokud máte širokoúhlý monitor.</i></p>

<p>Barevné zvýraznění změn je sice pěkná a užitečná vlastnost, ovšem to není
zdaleka vše, co <i>Vim</i> v&nbsp;&bdquo;režimu diff&ldquo; programátorům
nabízí. V&nbsp;tomto režimu jsou totiž k&nbsp;dispozici některé nové příkazy
určené pro řízenou synchronizaci mezi soubory. Mezi tyto příkazy patří
především:</p>

<table>
<tr><th>Příkaz</th><th>Význam</th></tr>
<tr><td>[c</td><td>skok na začátek předchozího bloku se změnami</td></tr>
<tr><td>]c</td><td>skok na začátek následujícího bloku se změnami</td></tr>
<tr><td>dp</td><td>pokud se kurzor nachází na řádcích, které se v&nbsp;obou souborech odlišují, je změna z&nbsp;aktuálního souboru přenesena do souboru druhého</td></tr>
<tr><td>do</td><td>opak předchozího příkazu &ndash; získání změny z&nbsp;druhého souboru a přenesení této změny do souboru aktuálního (tj.&nbsp;do souboru, v&nbsp;němž se nachází textový kurzor)</td></tr>
<tr><td>:diffupdate</td><td>tento příkaz provede nové vyhodnocení rozdílů mezi oběma soubory, vhodné v&nbsp;případech, kdy se oba buffery rozsynchronizují</td></tr>
</table>

<p>Příkazy <strong>dp</strong> a <strong>do</strong> lze použít i ve chvíli,
kdy je vybraný blok textu. V&nbsp;tomto případě se změna aplikuje pouze na
vybrané řádky, nikoli na celý blok změn.</p>

<a href="http://i.iinfo.cz/images/308/vim1-13.png"><img src="http://i.iinfo.cz/images/308/vim1-13-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 14: Porovnávání dvou souborů při horizontálním rozdělení oken,
které je vhodné využít v&nbsp;případě, že porovnávané zdrojové kódy (nebo jiné
texty) obsahují dlouhé řádky.</i></p>



<p><a name="k08"></a></p>
<h2>8. Vim pracující jako hexa editor?</h2>

<p>Poslední pomůckou, kterou si dnes ukážeme, je způsob editace binárních
souborů. Textový editor <i>Vim</i> sice není přímo určen pro editaci binárních
dat, ovšem v&nbsp;kombinaci s&nbsp;externím nástrojem <strong>xxd</strong> ho
lze využít jako hexa editor, protože <strong>xxd</strong> pracuje jako filtr
převádějící binární data na jejich hexadecimální, osmičkovou či binární podobu
a dokáže provést i zpětný převod. Pokud se při zavolání <strong>xxd</strong>
použije volba <strong>-g 1</strong>, bude na standardní výstup vytištěn
transformovaný obsah souboru rozdělený na jednotlivé bajty. Každý vytištěný
řádek je rozdělený na tři části: adresu prvního bajtu na řádku, šestnácti
hexadecimálních čísel reprezentujících jednotlivé bajty a sadu šestnácti znaků
z&nbsp;původního souboru (počet bajtů/znaků lze měnit, šestnáct je však
historicky nejpoužívanější hodnota); viz též následující výpis
&bdquo;hexa&ldquo; podoby bajtkódu jednoduché testovací Javovské třídy:</p>

<pre>
0000000: ca fe ba be 00 00 00 32 00 0f 0a 00 03 00 0c 07  .......2........
0000010: 00 0d 07 00 0e 01 00 06 3c 69 6e 69 74 3e 01 00  ........&lt;init&gt;..
0000020: 03 28 29 56 01 00 04 43 6f 64 65 01 00 0f 4c 69  .()V...Code...Li
0000030: 6e 65 4e 75 6d 62 65 72 54 61 62 6c 65 01 00 04  neNumberTable...
0000040: 6d 61 69 6e 01 00 16 28 5b 4c 6a 61 76 61 2f 6c  main...([Ljava/l
0000050: 61 6e 67 2f 53 74 72 69 6e 67 3b 29 56 01 00 0a  ang/String;)V...
0000060: 53 6f 75 72 63 65 46 69 6c 65 01 00 09 54 65 73  SourceFile...Tes
0000070: 74 2e 6a 61 76 61 0c 00 04 00 05 01 00 04 54 65  t.java........Te
0000080: 73 74 01 00 10 6a 61 76 61 2f 6c 61 6e 67 2f 4f  st...java/lang/O
0000090: 62 6a 65 63 74 00 21 00 02 00 03 00 00 00 00 00  bject.!.........
00000a0: 02 00 01 00 04 00 05 00 01 00 06 00 00 00 1d 00  ................
00000b0: 01 00 01 00 00 00 05 2a b7 00 01 b1 00 00 00 01  .......*........
00000c0: 00 07 00 00 00 06 00 01 00 00 00 01 00 09 00 08  ................
00000d0: 00 09 00 01 00 06 00 00 00 19 00 00 00 01 00 00  ................
00000e0: 00 01 b1 00 00 00 01 00 07 00 00 00 06 00 01 00  ................
00000f0: 00 00 03 00 01 00 0a 00 00 00 02 00 0b           .............
</pre>

<a href="http://i.iinfo.cz/images/308/vim1-16.png"><img src="http://i.iinfo.cz/images/308/vim1-16-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 15: Textový editor Vim při zobrazení binárního souboru po jeho
filtraci přes externí nástroj xxd. Pokud je Vim správně nakonfigurován, dokáže
při ukládání souboru provést automatickou zpětnou filtraci z&nbsp;hexa formátu
do binárního tvaru. Mimochodem &ndash; dokáže někdo uhodnout, jaký binární
soubor je editovaný?</i></p>

<p>Ruční použití filtru <strong>xxd</strong> s&nbsp;přesměrováním standardního
výstupu je však zbytečně složité a vzhledem k&nbsp;tomu, že si my uživatelé
<i>Vimu</i> rádi věci ulehčíme (jinak by stačil <a
href="http://notepad.org/">Notepad</a> :-), je možné využít automatické příkazy
volané při načítání, popř.&nbsp;při ukládání souborů. Následující sekvence
příkazů zapsaná do konfiguračního souboru <strong>.vimrc</strong> zajistí, že
se při načítání souborů *.class tyto soubory automaticky převedou do hexa
podoby a při ukládání se opět transformují do původní podoby binární:</p>

<pre>
" vim -b : edit binary using xxd-format!
augroup Binary_Java_Class
    au!
    au BufReadPre   *.class let &amp;bin=1
    au BufReadPost  *.class if &amp;bin | %!xxd -g1
    au BufReadPost  *.class set ft=xxd | endif
    au BufWritePre  *.class if &amp;bin | %!xxd -g1 -r
    au BufWritePre  *.class endif
    au BufWritePost *.class if &amp;bin | %!xxd -g1
    au BufWritePost *.class set nomod | endif
augroup END
</pre>

<p>Pro dnešek je to vše, příště si ukážeme, jak lze využít nástroj
<strong>cscope</strong>, provádět překlad projektů a jak využít vyspělou sadu
maker <strong>c.vim</strong>.</p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Exuberant ctags<br />
<a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a>
</li>

<li>xxd (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>ctags (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags</a>
</li>

<li>cscope (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Novinky ve VIM 7: Úvodní část - speller<br />
<a href="http://www.root.cz/vim-sedm-prvni-cast/">http://www.root.cz/vim-sedm-prvni-cast/</a>
</li>

<li>Novinky ve VIM 7: Skriptovací­ jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>vim2elvis: Přednosti a nedostaky Elvise v porovnání s Vimem<br />
<a href="http://www.root.cz/clanky/vim2elvis-1/">http://www.root.cz/clanky/vim2elvis-1/</a>
</li>

<li>vim2elvis: Shodné znaky mezi Elvisem a Vimem, nastavení­editoru<br />
<a href="http://www.root.cz/clanky/vim2elvis-2/">http://www.root.cz/clanky/vim2elvis-2/</a>
</li>

<li>Nej... VIM pluginy (1)<br />
<a href="http://www.root.cz/clanky/nej-vim-pluginy/">http://www.root.cz/clanky/nej-vim-pluginy/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2011</small></p>
</body>
</html>

