<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textový editor Vim jako IDE (5.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textový editor Vim jako IDE (5.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;páté části seriálu o využití textového editoru Vim (nejenom) ve funkci vývojového prostředí se zaměříme na možná poněkud okrajovou, ale přesto užitečnou vlastnost. Jedná se o možnost definice vlastních syntaktických pravidel používaných pro zvýraznění syntaxe zdrojových kódů, popř.&nbsp;jakéhokoli jiného strukturovaného textu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Atributy používané u příkazu :highlight</a></p>
<p><a href="#k02">2. Změna způsobu obarvení zdrojových kódů a test možností použitého terminálu</a></p>
<p><a href="#k03">3. Tvorba vlastních syntaktických kategorií</a></p>
<p><a href="#k04">4. Syntaktická kategorie zadaná výčtem klíčových slov</a></p>
<p><a href="#k05">5. Syntaktická kategorie zadaná regulárním výrazem</a></p>
<p><a href="#k06">6. Malý trénink: regulární výrazy pro rozpoznání IP adresy</a></p>
<p><a href="#k07">7. Použití regulárních výrazů pro zvýraznění syntaktických kategorií v&nbsp;praxi</a></p>
<p><a href="#k08">8. Syntaktická kategorie zadaná ve formě oblasti (regionu)</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Atributy používané u příkazu :highlight</h2>

<p>Na konci čtvrté části seriálu o textovém editoru <i>Vim</i> jsme si ukázali,
jakým způsobem je možné nastavit barvu pozadí a popředí editovaných textů,
popř.&nbsp;i styl písma pro jednotlivé syntaktické kategorie (komentář,
konstanta, výraz, jméno funkce, ...) definované v&nbsp;externích souborech
dodávaných přímo s&nbsp;<i>Vimem</i>. Ovšem možnosti jednotlivých typů
terminálů (přesněji řečeno jejich emulátorů) se od sebe v&nbsp;mnoha ohledech
odlišují. Některé emulátory terminálů, popř.&nbsp;pouze nesprávně nastavené
emulátory (což je častější případ) například nedokážou změnit barvu textu nebo
barvu pozadí, jiné terminály jsou omezeny na 8 nebo 16 základních barev a
naproti tomu <i>Vim</i> přeložený s&nbsp;podporou GUI a spuštěný příkazem
<strong>gvim</strong> nebo <strong>vim -g</strong> dokáže většinou rozlišit až
16 milionů barev a současně i měnit styl písma (kurzíva, tučné písmo, podtržené
písmo, podtržení vlnovkami, což je mimochodem relativní novinka atd.).
Připomeňme si, že pro nastavení zvýraznění určité syntaktické kategorie se
používá příkaz <strong>:highlight</strong>, nebo taktéž jeho zkrácená verze
<strong>:hi</strong>:</p>

<pre>
:highlight syntaktická_kategorie atributy
</pre>

<p>popř:</p>

<pre>
:hi syntaktická_kategorie atributy
</pre>

<a href="http://i.iinfo.cz/images/264/vim05-1.png"><img src="http://i.iinfo.cz/images/264/vim05-1-prev.png" width="370" height="243" alt=" " /></a>
<p><i>Obrázek 1: Textový editor Vim nepodporující práci s&nbsp;GUI, který je
spuštěný v&nbsp;emulátoru terminálu (urxvt). Informaci, zda daná varianta Vimu
práci s&nbsp;GUI podporuje, lze získat pomocí příkazu <strong>:ver</strong>
nebo <strong>:version</strong>.</i></p>

<p>V&nbsp;případě syntaktické kategorie se může jednat například o obecná jména
používaná u mnoha typů programovacích jazyků, například
<strong>Normal</strong>, <strong>Comment</strong>, <strong>Constant</strong>,
popř.&nbsp;o jména používaná pouze pro jeden konkrétní jazyk/typ souboru
(<strong>cOctalZero</strong>, <strong>cPreCondit</strong>) atd. &ndash; viz též
další kapitoly s&nbsp;podrobnějším popisem vytváření nových syntaktických
kategorií. Atributem je v&nbsp;případě příkazu <strong>:highlight</strong>
myšlena dvojice sestavená z&nbsp;názvu atributu a jeho hodnoty (mezi názvem
atributu a hodnotou je znak rovnítka). Názvem atributu může být:</p>

<table>
<tr><th>Název atributu</th><th>Význam</th></tr>
<tr><td>term</td><td>nastavení zvýraznění oblasti textu pro běžné terminály (ovšem zdaleka neplatí, že všechny možnosti musí daný terminál umět zobrazit, týká se to například tučného písma či podtržení, které je většinou nahrazeno pouze změnou intenzity textu)</td></tr>
<tr><td>cterm</td><td>nastavení pro terminály podporující práci s&nbsp;barvou (<i>color-xterm</i>, <i>rxvt/urxvt</i>, <i>gnome-terminal</i> a mnoho dalších), jinak stejné parametry jako pro <strong>term</strong></td></tr>
<tr><td>ctermbg</td><td>barva pozadí textu pro terminály podporující práci s&nbsp;barvou</td></tr>
<tr><td>ctermfg</td><td>barva popředí textu pro terminály podporující práci s&nbsp;barvou</td></tr>
<tr><td>gui</td><td>použitelné, pokud je <i>Vim</i> zkompilován s&nbsp;podporou GUI, hodnoty stejné, jako u atributů <strong>term</strong> a <strong>cterm</strong></td></tr>
<tr><td>guibg</td><td>barva pozadí textu pro <i>Vim</i> zkompilovaný s&nbsp;podporou GUI</td></tr>
<tr><td>guifg</td><td>barva popředí textu pro <i>Vim</i> zkompilovaný s&nbsp;podporou GUI</td></tr>
<tr><td>guisp</td><td>barva podtržení textů pro <i>Vim</i> zkompilovaný s&nbsp;podporou GUI</td></tr>
</table>

<a href="http://i.iinfo.cz/images/264/vim05-2.png"><img src="http://i.iinfo.cz/images/264/vim05-2-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 2: Textový editor Vim, který byl přeložen s&nbsp;podporou běhu
v&nbsp;GUI.</i></p>



<p><a name="k02"></a></p>
<h2>2. Změna způsobu obarvení zdrojových kódů a test možností použitého terminálu</h2>

<p>Atribut <strong>term</strong> by měl, alespoň v&nbsp;minimální míře,
pracovat s&nbsp;jakýmkoli typem terminálu. Hodnota tohoto atributu může
být:</p>

<table>
<tr><th>term=</th><th>Význam</th></tr>
<tr><td>NONE</td><td>používáno pro nastavení původního významu (reset předchozího nastavení)</td></tr>
<tr><td>standout</td><td>normální font i zvýraznění</td></tr>
<tr><td>bold</td><td>tučné písmo (popř.&nbsp;změna intenzity či barvy)</td></tr>
<tr><td>italic</td><td>kurzíva (popř.&nbsp;změna intenzity či barvy)</td></tr>
<tr><td>underline</td><td>podtržené písmo</td></tr>
<tr><td>undercurl</td><td>podtržení textu vlnovkami</td></tr>
<tr><td>reverse</td><td>inverzní zobrazení textu</td></tr>
<tr><td>inverse</td><td>inverzní zobrazení textu</td></tr>
</table>

<a href="http://i.iinfo.cz/images/264/vim05-3.png"><img src="http://i.iinfo.cz/images/264/vim05-3-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 3: Skript <strong>colortest.vim</strong> spuštěný ve Vimu, jenž
byl přeložen s&nbsp;podporou běhu v&nbsp;GUI.</i></p>

<p>Shodné hodnoty je možné zadávat i u atributů <strong>cterm</strong>
(terminály s&nbsp;podporou barev) a <strong>gui</strong> (<i>Vim</i> přeložený
s&nbsp;podporou GUI). Důvod, proč existují pro nastavení té samé vlastnosti tři
různé atributy je jednoduchý &ndash; v&nbsp;mnoha případech potřebujeme, aby se
nějaká syntaktická kategorie zobrazovala na různém typu terminálu různým
způsobem, například aby se slovo s&nbsp;překlepem v&nbsp;GUI zobrazilo
s&nbsp;červeným podtržením, zatímco v&nbsp;terminálu odlišnou barvou písma. U
atributů <strong>ctermfg</strong> (barva popředí) a <strong>ctermbg</strong>
(barva pozadí) lze jako jejich hodnotu zadat buď číslo barvy v&nbsp;rozmezí 0
až 15, popř.&nbsp;jméno barvy. Ve skutečnosti se však například u mnoha
emulátorů terminálů pracujících v&nbsp;systému <i>X</i> provádí ještě jedno
mapování mezi číslem/názvem barvy a skutečnou barvou, ovšem tuto skutečnost již
<i>Vim</i> nemůže nijak ovlivnit (což je ostatně správné, protože uživatelé
nemusí chtít zobrazit určité nečitelné barvové kombinace).</p>

<a href="http://i.iinfo.cz/images/264/vim05-4.png"><img src="http://i.iinfo.cz/images/264/vim05-4-prev.png" width="370" height="243" alt=" " /></a>
<p><i>Obrázek 4: Skript <strong>colortest.vim</strong> spuštěný ve Vimu, jenž
nebyl přeložen s&nbsp;podporou běhu v&nbsp;GUI (Vim je spuštěn v&nbsp;emulátoru
terminálu urxvt).</i></p>

<p>Toto mapování se nastavuje buď v&nbsp;souboru <strong>.Xdefaults</strong>
(platí kromě <i>xtermu</i> například i pro <i>(u)rxvt</i>), nebo lze aktuálně
používané mapování změnit v&nbsp;konfiguračním dialogu, což je případ
<i>gnome-terminalu</i> a dalších těžkotonážních :-) terminálových emulátorů.
Dobrou zprávou je, že možnosti terminálu lze poměrně jednoduše otestovat, a to
přímo z&nbsp;textového editoru <i>Vim</i>. Součástí instalace tohoto textového
editoru je totiž i soubor <strong>colortest.vim</strong>, který je možné pro
tyto účely využít. Jedná se o skript napsaný v&nbsp;interním skriptovacím
jazyce <i>Vimu</i>, jehož popisem se budeme zabývat v&nbsp;závěru tohoto
článku. Vzhledem k&nbsp;tomu, že se jedná o skript, spouští se obsah tohoto
souboru příkazem <strong>:source</strong>, popř.&nbsp;jeho zkrácenou verzí
<strong>:so</strong> následujícím způsobem:</p>

<pre>
:source $VIMRUNTIME/syntax/colortest.vim
</pre>

<p>nebo pouze:</p>

<pre>
:so $VIMRUNTIME/syntax/colortest.vim
</pre>

<p>Poznámka: <strong>$VIMRUNTIME</strong> je proměnná prostředí, která je
většinou nastavovaná přímo <i>Vimem</i> při svém spouštění. Pokud napíšete
pouze:</p>

<pre>
:so $VIMRUNTIME/&lt;Tab&gt;
</pre>

<p>tak se tato proměnná nahradí svou hodnotou, tj.&nbsp;cestou k&nbsp;runtime
souborům.</p>

<a href="http://i.iinfo.cz/images/264/vim05-5.png"><img src="http://i.iinfo.cz/images/264/vim05-5-prev.png" width="370" height="263" alt=" " /></a>
<p><i>Obrázek 5: Skript <strong>colortest.vim</strong> spuštěný ve Vimu, jenž
nebyl přeložen s&nbsp;podporou běhu v&nbsp;GUI (Vim je spuštěn ve známém
emulátoru terminálu gnome-terminal).</i></p>



<p><a name="k03"></a></p>
<h2>3. Tvorba vlastních syntaktických kategorií</h2>

<p>Společně s&nbsp;textovým editorem <i>Vim</i> je dodáváno několik stovek
(více než 500) konfiguračních souborů obsahujících syntaktická pravidla pro
různé programovací jazyky, značkovací jazyky (HTML, XML, TeX) i některé typy
konfiguračních souborů. I přes velké úsilí, které mnoho programátorů do tvorby
konfiguračních souborů se syntaktickými pravidly vkládá, se však může stát, že
je nutné vytvořit nová pravidla a/nebo zcela nový konfigurační soubor. I když
se zpočátku možná může zdát, že je tvorba nových pravidel složitá, je možné pro
mnoho typů strukturovaných souborů ve skutečnosti vytvořit pravidla poměrně
jednoduchým způsobem. Začněme od těch nejjednodušších příkladů. Veškeré
vytváření, nastavení či mazání syntaktických pravidel se provádí pomocí příkazu
<strong>:syntax</strong>, jenž se obvykle zkracuje na <strong>:syn</strong>
nebo méně často na <strong>:sy</strong>. Pokud je tento příkaz pouze spuštěn
bez dalších parametrů, vypíše právě aktivní syntaktická pravidla, která se
samozřejmě liší podle toho, jaký soubor je právě editován.</p>

<a href="http://i.iinfo.cz/images/264/vim05-6.png"><img src="http://i.iinfo.cz/images/264/vim05-6-prev.png" width="349" height="270" alt=" " /></a>
<p><i>Obrázek 6: Změna původně světle zelené barvy na barvu fialovou
v&nbsp;konfiguračním dialogu emulátoru terminálu gnome-terminal.</i></p>

<p>Za příkazem <strong>:syntax</strong> lze uvést poměrně velké množství
dalších modifikátorů a atributů, nás však budou v&nbsp;tomto článku zajímat
pouze čtyři modifikátory, které jsou vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příkaz</th><th>Význam</th></tr>
<tr><td>:syntax clear</td><td>vymazání všech syntaktických kategorií</td></tr>
<tr><td>:syntax clear kategorie</td><td>vymazání jedné syntaktické kategorie (užitečné především při postupném ladění různých možností)</td></tr>
<tr><td>:syntax keyword kategorie ...</td><td>vytvoření nové syntaktické kategorie obsahující klíčová slova</td></tr>
<tr><td>:syntax match kategorie ...</td><td>vytvoření nové syntaktické kategorie zadané regulárním výrazem</td></tr>
<tr><td>:syntax region kategorie ...</td><td>vytvoření nové syntaktické kategorie zadané regulárním výrazem označujícím začátek kategorie a druhým výrazem označujícím její konec</td></tr>
</table>

<p>V&nbsp;následujících kapitolách si podrobněji popíšeme možnosti definice
nových klíčových slov, specifikace syntaktické kategorie pomocí regulárního
výrazu i specifikace oblasti (regionu) pomocí dvojice regulárních výrazů.</p>

<a href="http://i.iinfo.cz/images/264/vim05-7.png"><img src="http://i.iinfo.cz/images/264/vim05-7-prev.png" width="370" height="263" alt=" " /></a>
<p><i>Obrázek 7: Po změně konfigurace gnome-terminalu (viz předchozí snímek) se
barva ve Vimu skutečně změní, i když si Vim (či libovolný jiný terminálový
program) stále myslí, že zobrazuje zelenou barvu.</i></p>



<p><a name="k04"></a></p>
<h2>4. Syntaktická kategorie zadaná výčtem klíčových slov</h2>

<p>Nejsnazší je vytvoření nové syntaktické kategorie definované výčtem
klíčových slov. Pro vytvoření této kategorie se používá následující formát
příkazu <strong>:syntax</strong>:</p>

<pre>
:syntax keyword kategorie slovo slovo slovo...
</pre>

<p>Podívejme se na příklad z&nbsp;praxe. Jedná se o část obsahu konfiguračního
souboru určeného pro &bdquo;obarvení&ldquo; zdrojových kódů napsaných
v&nbsp;Javě (aby k&nbsp;obarvení skutečně došlo, je samozřejmě nutné
k&nbsp;dané syntaktické kategorii, například ke kategorii nazvané
<strong>javaConditional</strong>, nadefinovat pomocí příkazu
<strong>:highlight</strong> barvu textu či barvu pozadí):</p>

<pre>
:syntax keyword javaConditional  if else switch
:syntax keyword javaRepeat       while for do
:syntax keyword javaBoolean      true false
:syntax keyword javaConstant     null
:syntax keyword javaTypedef      this super
:syntax keyword javaOperator     new instanceof
:syntax keyword javaType         boolean char byte short int long float double
:syntax keyword javaType         void
:syntax keyword javaStatement    return
:syntax keyword javaStorageClass static synchronized transient volatile final strictfp serializable
:syntax keyword javaExceptions   throw try catch finally
:syntax keyword javaAssert       assert
:syntax keyword javaMethodDecl   synchronized throws
:syntax keyword javaClassDecl    extends implements interface
:syntax keyword javaClassDecl    enum
:syntax keyword javaBranch       break continue nextgroup=javaUserLabelRef skipwhite
:syntax keyword javaScopeDecl    public protected private abstract
</pre>

<a href="http://i.iinfo.cz/images/264/vim05-8.png"><img src="http://i.iinfo.cz/images/264/vim05-8-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 8: Ukázka konfiguračního souboru obsahujícího některá klíčová
slova používaná v&nbsp;programovacím jazyku Java.</i></p>

<p>Naproti tomu, že pro prakticky jakýkoli v&nbsp;současnosti používaný
programovací jazyk je již k&nbsp;němu příslušný soubor s&nbsp;definicí syntaxe
vytvořen a odladěn, mohou se jednoduché definice syntaktických kategorií
založené pouze na klíčových slovech uplatnit i u zdánlivě nestrukturovaných
typů souborů. Osobně si například zapisuji různé poznámky do souboru
s&nbsp;koncovkou <strong>.cal</strong>. Jedná se o běžný textový soubor,
v&nbsp;němž se však po čase začala ukazovat jistá struktura se slovy, která by
se vyplatilo mít zvýrazněná. Řešením byly následující řádky zapsané do
konfiguračního souboru <strong>.vimrc</strong>, který se načítá při každém
spuštění <i>Vimu</i>. Tyto řádky zajistí, že se příkazy <strong>syntax</strong>
spustí vždy, když se začne editovat soubor s&nbsp;koncovkou
<strong>.cal</strong> (ve skutečnosti by bylo možné tyto definice uložit do
samostatných souborů, ovšem mít veškerou osobní konfiguraci v&nbsp;jediném
souboru <strong>.vimrc</strong> se ukázalo být při přechodech mezi různými
počítači jako nejvíce vyhovující řešení):</p>

<pre>
highlight Days ctermfg=cyan  guifg=#aaffff
highlight Todo ctermfg=red   guifg=#ffaaaa
highlight Ok   ctermfg=green guifg=#aaffaa

augroup __calendar__
au!
au BufRead,BufNewFile *.cal syntax keyword Days Mon Tue Wed Thu Fri Sat Sun
au BufRead,BufNewFile *.cal syntax keyword Todo TODO
au BufRead,BufNewFile *.cal syntax keyword OK OK
augroup END
</pre>

<p>Příkazy <strong>augroup __calendar__</strong> a <strong>augroup END</strong>
tvoří blok obsahující další automatické příkazy. Pomocí <strong>au!</strong>
jsou staré automatické příkazy smazány. Díky této struktuře je zaručeno
korektní chování i v&nbsp;případě, že je soubor <strong>.vimrc</strong> spuštěn
vícekrát (protože tento soubor není ve skutečnosti nic jiného, než skript
vytvořený v&nbsp;interním skriptovacím jazyce <i>Vimu</i>).</p>

<a href="http://i.iinfo.cz/images/264/vim05-9.png"><img src="http://i.iinfo.cz/images/264/vim05-9-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 9: Ukázka konfiguračního souboru obsahujícího některá klíčová
slova používaná v&nbsp;PL/SQL.</i></p>



<p><a name="k05"></a></p>
<h2>5. Syntaktická kategorie zadaná regulárním výrazem</h2>

<p>U velkého množství strukturovaných souborů si s&nbsp;pouhým přiřazením barev
jednotlivým klíčovým slovům nevystačíme. V&nbsp;tomto případě přichází na řadu
další možnost definice syntaktických kategorií &ndash; použití regulárních
výrazů s&nbsp;využitím příkazu <strong>:syntax match</strong>. Již
v&nbsp;úvodních částech tohoto seriálu jsme si bez dalšího podrobnějšího
vysvětlení ukázali, jakým způsobem je možné ve zdrojových textech zvýraznit
znaky tabulátoru, popř.&nbsp;barevně odlišit větší množství znaků tabulátoru
napsaných ihned za sebou (v&nbsp;případech, kdy použití příkazu <strong>:set
list</strong> pro zvýraznění řídicích znaků není vhodné či čitelné). Jedno
z&nbsp;možných řešení tohoto problému vypadalo následovně:</p>

<pre>
:highlight Tab1 ctermbg=lightgreen guibg=#e0ffe0
:highlight Tab2 ctermbg=lightred   guibg=#ffe0e0
:highlight Tab3 ctermbg=lightblue  guibg=#e0e0ff
:highlight Tab4 ctermbg=lightcyan  guibg=#ffffe0
:syntax match Tab1 "\t"
:syntax match Tab2 "\t\t"
:syntax match Tab3 "\t\t\t"
:syntax match Tab4 "\t\t\t\t"
</pre>

<a href="http://i.iinfo.cz/images/308/vim1-7.png"><img src="http://i.iinfo.cz/images/308/vim1-7-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 10: Zvýraznění tabulátorů pomocí změny barvy pozadí.</i></p>

<p>Význam prvních čtyř příkazů je zřejmý &ndash; nastavuje se barva pozadí
textu pro čtyři nové syntaktické kategorie nazvané <strong>Tab1</strong>,
<strong>Tab2</strong>, <strong>Tab3</strong> a <strong>Tab4</strong>. Následuje
čtveřice příkazů začínajících na <strong>:syntax match</strong>, kde jsou
jednotlivé syntaktické kategorie definovány pomocí jednoduchých regulárních
výrazů. Povšimněte si, že celý regulární výraz je umístěn mezi dvojici stejných
znaků. Většinou se používají lomítka, ale lze použít i jiné znaky, například
uvozovky apod. <i>Vim</i> se následně snaží v&nbsp;textu jednotlivé výrazy
rozpoznat a následně přiřadit textům, které výrazu odpovídají, příslušné
barevné zvýraznění. Jak je u regulárních výrazů zvykem, hledá se vždy nejdelší
možný výskyt (regulární výraz je &bdquo;žravý&ldquo;).</p>



<p><a name="k06"></a></p>
<h2>6. Malý trénink: regulární výrazy pro rozpoznání IP adresy</h2>

<p>Následuje ukázka poněkud složitějšího regulárního výrazu sloužícího pro
barevné odlišení IPv4 adres. Přesněji řečeno se jedná o značně zjednodušenou
verzi regulárního výrazu, který rozpoznává a následně obarví jakoukoli čtveřici
čísel oddělených tečkou, tedy například i řetězec "0.9999999.256.256:</p>

<pre>
:highlight def IP_Address ctermfg=darkred
:syntax clear IP_Address
:syntax match IP_Address /[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+/
</pre>

<p>Příkazem <strong>:syntax clear</strong> se pro jistotu vymaže předchozí
definice syntaktické kategorie, protože v&nbsp;opačném případě by se nová
definice pouze přidala k&nbsp;definici starší (to nemusí být vždy na škodu,
ovšem v&nbsp;našem případě se tohoto chování <i>Vimu</i> raději zbavíme).
Vzhledem k&nbsp;tomu, že předchozí regulární výraz rozpoznal jakoukoli čtveřici
kladných čísel, můžeme se pokusit o jeho vylepšení a zpřesnění. Následující
verze obsahuje test pouze na čísla mající trojici číslic. Pro tento účel
lze využít omezení na minimální a maximální počet znaků. Tato omezení se
zapisují ve složených závorkách, které je nutné uvodit zpětným lomítkem,
podobně jako tečku:</p>

<pre>
:highlight def IP_Address ctermfg=darkred
:syntax clear IP_Address
:syntax match IP_Address /[0-9]\{1,3}\.[0-9]\{1,3}\.[0-9]\{1,3}\.[0-9]\{1,3}/
</pre>

<p>Regulární výraz rozpoznávající skutečně jen čtveřice čísel v&nbsp;rozsahu
0..255 (a nikoli v&nbsp;rozsahu 0..999) je ještě poněkud delší a &ndash; jak
bývá zvykem &ndash; i méně čitelný:</p>

<pre>
:highlight def IP_Address ctermbg=yellow ctermfg=black guibg=yellow guifg=black
:syn clear IP_Address
:syn match IP_Address /\(25[0-5]\|2[0-4][0-9]\|[01]\?[0-9][0-9]\?\)\.\(25[0-5]\|2[0-4][0-9]\|[01]\?[0-9][0-9]\?\)\.\(25[0-5]\|2[0-4][0-9]\|[01]\?[0-9][0-9]\?\)\.\(25[0-5]\|2[0-4][0-9]\|[01]\?[0-9][0-9]\?\)/
</pre>

<a href="http://i.iinfo.cz/images/264/vim05-10.png"><img src="http://i.iinfo.cz/images/264/vim05-10-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 11: Soubor obsahující syntaktické pravidlo pro IP adresu a
testovací soubor obarvený pomocí tohoto pravidla.</i></p>

<p>Jako už nikoli triviální úkol si můžete sami vyzkoušet, jak by vypadal
regulární výraz rozpoznávající korektně všechny možné formy IPv6 adres (přiznám
se, že jsem neměl trpělivost vytvořit skutečně funkční řešení se všemi možnými
zápisy).</p>



<p><a name="k07"></a></p>
<h2>7. Použití regulárních výrazů pro zvýraznění syntaktických kategorií v&nbsp;praxi</h2>

<p>V&nbsp;regulárních výrazech je možné pomocí znaků <strong>^</strong> a
<strong>$</strong> označit i začátek a konec textu na jednom textovém řádku,
takže například zvýraznění správného odsazení o 4 znaky v&nbsp;souborech XML či
XSL lze docílit pomocí následujících příkazů vložených do konfiguračního
souboru <strong>.vimrc</strong> (pod pojmem &bdquo;správné odsazení&ldquo; je
zde myšleno odsazení definované nějakou štábní kulturou, protože jinak je
odsazení v&nbsp;XML soubor spíše záležitostí čitelnosti pro lidské
čtenáře):</p>

<pre>
    au BufRead,BufNewFile *.xml,*.xsl set expandtab tabstop=4 encoding=utf-8
    au BufRead,BufNewFile *.xml,*.xsl syntax match Indent1 "^    "
    au BufRead,BufNewFile *.xml,*.xsl syntax match Indent2 "^        "
    au BufRead,BufNewFile *.xml,*.xsl syntax match Indent3 "^            "
    au BufRead,BufNewFile *.xml,*.xsl syntax match Indent4 "^                "
    au BufRead,BufNewFile *.xml,*.xsl syntax match Indent5 "^                    "
    au BufRead,BufNewFile *.xml,*.xsl syntax match Indent6 "^                        "
    au BufRead,BufNewFile *.xml,*.xsl syntax match Indent7 "^                            "
    au BufRead,BufNewFile *.xml,*.xsl highlight Indent1 ctermbg=lightgreen  guibg=#f0fff0
    au BufRead,BufNewFile *.xml,*.xsl highlight Indent2 ctermbg=lightred    guibg=#fff0f0
    au BufRead,BufNewFile *.xml,*.xsl highlight Indent3 ctermbg=lightblue   guibg=#f4f4ff
    au BufRead,BufNewFile *.xml,*.xsl highlight Indent4 ctermbg=lightcyan   guibg=#ffffe8
    au BufRead,BufNewFile *.xml,*.xsl highlight Indent5 ctermbg=lightyellow guibg=#f0ffff
    au BufRead,BufNewFile *.xml,*.xsl highlight Indent6 ctermbg=lightcyan   guibg=#ffe8ff
    au BufRead,BufNewFile *.xml,*.xsl highlight Indent7 ctermbg=lightred    guibg=#f0fff0
</pre>

<a href="http://i.iinfo.cz/images/264/vim05-11.png"><img src="http://i.iinfo.cz/images/264/vim05-11-prev.png" width="370" height="253" alt=" " /></a>
<p><i>Obrázek 12: Zvýraznění odsazení v&nbsp;souborech typu XML.</i></p>

<p>Jako další příklad si uveďme způsob zvýraznění číselných hodnot o různých
základech na základě podobných pravidel, která platí pro většinu programovacích
jazyků založených na céčku (C, C++, Java, JavaScript):</p>

<pre>
:highlight NumericConstantOctal   ctermfg=red    guifg=red
:highlight NumericConstantBinary  ctermfg=green  guifg=green
:highlight NumericConstantHex     ctermfg=blue   guifg=blue
:highlight NumericConstantDecimal ctermfg=cyan   guifg=cyan
:highlight NumericConstantFloat   ctermfg=yellow guifg=yellow

:syntax match NumericConstantOctal   "0[0-7_]*\&gt;"
:syntax match NumericConstantBinary  "0[bB][01_]*\&gt;"
:syntax match NumericConstantHex     "0[xX][0-9a-fA-F_]*\&gt;"
:syntax match NumericConstantDecimal "[1-9_][0-9_]*\&gt;"
:syntax match NumericConstantFloat   "[0-9_]*\.[0-9_]*\([eE][+-]\=[0-9_]*\)\=\&gt;"
</pre>

<p>Znak &gt; na konci regulárních výrazů znamená ukončení slova. Jedná se
vlastně o atom, podobně jako je tomu u dalších znaků se speciálním významem,
například již zmíněných <strong>^</strong> nebo <strong>$</strong>. Otestování
těchto příkladů je jednoduché. Postačuje zkopírovat výše uvedenou sekvenci
příkazů a uložit ji do nového souboru, například po názvem
<strong>numeric_test.vim</strong> (přípona zaručí, že <i>Vim</i> správně
zvýrazní příkazy i jejich parametry). Posléze je možné otevřít soubor
obsahující čísla o různém základu a zadat příkaz:</p>

<pre>
:source numeric_test.vim
</pre>

<p>nebo pouze:</p>

<pre>
:so numeric_test.vim
</pre>

<a href="http://i.iinfo.cz/images/264/vim05-12.png"><img src="http://i.iinfo.cz/images/264/vim05-12-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 13: Soubor obsahující syntaktická pravidla pro různé typy čísel a
testovací soubor obarvený pomocí těchto pravidel.</i></p>



<p><a name="k08"></a></p>
<h2>8. Syntaktická kategorie zadaná ve formě oblasti (regionu)</h2>

<p>Ovšem ani definice syntaktické kategorie s&nbsp;využitím regulárního výrazu
nemusí ve všech případech dostačovat. Jedná se například o případy, kdy se ve
zdrojovém kódu vyskytují nějaké vnořené bloky. Nemusí se přitom jednat jen o
příkazové bloky, ale o jakékoli bloky s&nbsp;jasně určeným začátkem a koncem,
v&nbsp;nichž se vyskytuje další text, který je vhodné mnohdy taktéž zvýraznit.
Začněme opět jednoduchým příkladem &ndash; zvýrazněním komentářů, které mohou
být zapisovány ve stylu <i>C99</i>, tj.&nbsp;může se jednat jak o jednořádkové
komentáře začínající dvojicí lomítek, tak i o víceřádkové komentáře začínající
znaky /* a končící znaky */. Jednodušší je definice syntaktické kategorie pro
jednořádkové komentáře, protože zde si vystačíme s&nbsp;regulárním výrazem,
který zachytí jakýkoli text od dvojitého lomítka až do konce řádku:</p>

<pre>
:syntax match oneLineComment "//.*"
</pre>

<a href="http://i.iinfo.cz/images/264/vim05-13.png"><img src="http://i.iinfo.cz/images/264/vim05-13-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 14: Definice třech syntaktických kategorií &ndash; čísel,
komentářů a příkazového bloku, ovšem uvnitř bloku se nerozpoznávají ani čísla
ani komentáře (horní buffer).</i></p>

<p>U víceřádkového komentáře je situace složitější, ovšem v&nbsp;tomto případě
je možné použít třetí typ definice syntaktické kategorie &ndash; určení
takzvaného regionu. Pomocí dvou regulárních výrazů se určí začátek regionu i
jeho konec, přičemž <i>Vim</i> dokáže správně začátky a konce regionů
&bdquo;spárovat&ldquo; (pokud toto chování z&nbsp;nějakého důvodu nevyhovuje,
lze použít modifikátor <strong>keepend</strong>):</p>

<pre>
:syntax region multiLineComment start="/\*" end="\*/"
</pre>

<p>Zpětná lomítka jsou u obou regulárních výrazů atributů
<strong>start</strong> a <strong>end</strong> použita z&nbsp;toho důvodu, aby
se zrušil speciální význam hvězdičky.</p>

<a href="http://i.iinfo.cz/images/264/vim05-14.png"><img src="http://i.iinfo.cz/images/264/vim05-14-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 15: Modifikace syntaktické kategorie bloku tak, aby se uvnitř
jeho těla rozpoznávaly komentáře.</i></p>

<p>Podobně by bylo možné definovat i příkazový blok, který taktéž vychází ze
syntaxe programovacího jazyka C:</p>

<pre>
:syntax region commandBlock start="{" end="}"
</pre>

<p>Ve skutečnosti však je však situace s&nbsp;bloky trošku složitější, protože
většinou potřebujeme uvnitř bloků zvýraznit i další syntaktické kategorie.
Podívejme se na následující příklad:</p>

<pre>
:hi CodeBlock guifg=cyan
:hi Numbers   guifg=yellow
:hi Comment   guifg=gray

:syn clear  CodeBlock
:syn clear  Numbers
:syn clear  Comment

:syn region CodeBlock start="{" end="}"
:syn match  Numbers /[0-9]\+/
:syn match  Comment "//.*"
</pre>

<p>Při spuštění tohoto skriptu sice dojde ke zvýraznění čísel i komentářů,
ovšem pouze mimo blok umístěný mezi složenými závorkami. Aby došlo
k&nbsp;rozeznávání čísel a komentářů i uvnitř bloků, je nutné použít
modifikátor <strong>contained</strong> obsahující buď hodnotu
<strong>ALL</strong> (blok může obsahovat všechny další syntaktické kategorie),
nebo pouze seznam kategorií, které se uvnitř bloku mohou vyskytovat:</p>

<pre>
:hi CodeBlock guifg=cyan
:hi Numbers   guifg=yellow
:hi Comment   guifg=gray

:syn clear  CodeBlock
:syn clear  Numbers
:syn clear  Comment

:syn region CodeBlock start="{" end="}" contains=Numbers,Comment
:syn match  Numbers /[0-9]\+/
:syn match  Comment "//.*"
</pre>

<a href="http://i.iinfo.cz/images/264/vim05-15.png"><img src="http://i.iinfo.cz/images/264/vim05-15-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 16: Blok může obsahovat jak komentáře, tak i čísla.</i></p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Exuberant ctags<br />
<a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a>
</li>

<li>xxd (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>ctags (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags</a>
</li>

<li>cscope (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Novinky ve VIM 7: Úvodní část - speller<br />
<a href="http://www.root.cz/vim-sedm-prvni-cast/">http://www.root.cz/vim-sedm-prvni-cast/</a>
</li>

<li>Novinky ve VIM 7: Skriptovací jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>vim2elvis: Přednosti a nedostaky Elvise v porovnání s Vimem<br />
<a href="http://www.root.cz/clanky/vim2elvis-1/">http://www.root.cz/clanky/vim2elvis-1/</a>
</li>

<li>vim2elvis: Shodné znaky mezi Elvisem a Vimem, nastavení­editoru<br />
<a href="http://www.root.cz/clanky/vim2elvis-2/">http://www.root.cz/clanky/vim2elvis-2/</a>
</li>

<li>Nej... VIM pluginy (1)<br />
<a href="http://www.root.cz/clanky/nej-vim-pluginy/">http://www.root.cz/clanky/nej-vim-pluginy/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Scroll Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Scroll_lock">http://necyklopedie.wikia.com/wiki/Scroll_lock</a>
</li>

<li>Caps Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Caps_Lock">http://necyklopedie.wikia.com/wiki/Caps_Lock</a>
</li>

<li>Avoid the escape key<br />
<a href="http://vim.wikia.com/wiki/Avoid_the_escape_key">http://vim.wikia.com/wiki/Avoid_the_escape_key</a>
</li>

<li>Map caps lock to escape in XWindows<br />
<a href="http://vim.wikia.com/wiki/VimTip166">http://vim.wikia.com/wiki/VimTip166</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2011</small></p>
</body>
</html>

