<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textový editor Vim jako IDE (11.část: přenos textů mezi Vimem a dalšími aplikacemi)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textový editor Vim jako IDE (11.část: přenos textů mezi Vimem a dalšími aplikacemi)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;dnešní části seriálu o využití textového editoru Vim (nejenom) ve funkci vývojového prostředí si řekneme, jakými způsoby je možné přenášet texty mezi Vimem a dalšími aplikacemi. Zatímco v&nbsp;operačním systému Windows je pro tento účel využívána systémová schránka, v&nbsp;poněkud flexibilnějším X Window Systemu je k&nbsp;dispozici větší množství mechanismů a Vim je všechny podporuje.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Přenos textů mezi Vimem a dalšími aplikacemi</a></p>
<p><a href="#k02">2. Výběry versus cut-buffery</a></p>
<p><a href="#k03">3. Přenos textů přes výběr PRIMARY (primární výběr)</a></p>
<p><a href="#k04">4. Přenos textů přes výběr CLIPBOARD (schránka)</a></p>
<p><a href="#k05">5. Přenos textů přes cut-buffer</a></p>
<p><a href="#k06">6. Automagické použití primárního výběru (PRIMARY) ve vizuálním režimu, triky pro práci s&nbsp;registry + a *</a></p>
<p><a href="#k07">7. Nastavení registru &bdquo;*&ldquo; nebo &bdquo;+&ldquo; jako implicitního registru pro editační operace</a></p>
<p><a href="#k08">8. Konfigurace chování klávesnice a myši pro snadný přenos textů</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Přenos textů mezi Vimem a dalšími aplikacemi</h2>

<p>V&nbsp;dnešní části seriálu o textovém editoru <i>Vim</i> si řekneme
podrobnější informace o tom, jakým způsobem je možné přenášet části textu mezi
<i>Vimem</i> a dalšími aplikacemi, především při spuštění tohoto textového
editoru v&nbsp;X Window Systemu příkazem <strong>gvim</strong> nebo <strong>vim
-g</strong>. V&nbsp;grafickém uživatelském rozhraní operačního systému
Microsoft Windows se totiž aplikace při přenosu textů (či dalších dat) chovají
poněkud odlišně, protože ve většině případů komunikují přes systémovou schránku
(<i>clipboard</i>), zatímco X Window System je v&nbsp;tomto ohledu poněkud
flexibilnější a zpočátku také možná i matoucí :-). Již ve čtvrté části tohoto
seriálu jsme si popsali takzvané <i>registry</i>, do nichž je možné ukládat
bloky textu, popř.&nbsp;příkazy spouštěné jako makra. Tyto příkazy jsou
samozřejmě taktéž reprezentovány textovými bloky, o čemž se můžete snadno
přesvědčit po záznamu makra pomocí příkazu <strong>qx</strong>, kde
<strong>x</strong> je jméno registru. Význam těch nejdůležitějších a nejčastěji
využívaných registrů je vypsán v&nbsp;následující tabulce:</p>

<table>
<tr><th>Registr</th><th>Význam</th></tr>
<tr><td>a-z</td><td>registry, které je možné přímo měnit uživatelem</td></tr>
<tr><td>0-9</td><td>registry naplňované automaticky příkazy <strong>d</strong> a <strong>y</strong></td></tr>
<tr><td>%</td><td>registr obsahující jméno právě editovaného souboru</td></tr>
<tr><td>:</td><td>registr obsahující poslední příkaz, vhodné při vyvolání tohoto příkazu jako makra</td></tr>
<tr><td>=</td><td>pseudoregistr používaný pro výpočet matematických a &bdquo;řetězcových&ldquo; výrazů</td></tr>
<tr><td>/</td><td>registr obsahující posledně vyhledávaný řetězec (resp.&nbsp;text odpovídající regulárnímu výrazu)</td></tr>
<tr><td>"</td><td>implicitní registr pro operace <strong>c</strong>, <strong>d</strong>, <strong>s</strong> nebo <strong>y</strong></td></tr>
<tr><td>-</td><td>implicitní registr pro operace, které mění menší část textu, než je jeden textový řádek</td></tr>
<tr><td>.</td><td>registr obsahující poslední text zapsaný ve vkládacím režimu</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>~</td><td>registr obsahující text, který byl do Vimu přenesen pomocí technologie drag and drop</td></tr>
<tr><td>*</td><td>registr reflektující obsah výběru nazvaného <strong>PRIMARY</strong> (viz další text)</td></tr>
<tr><td>+</td><td>registr reflektující obsah výběru nazvaného <strong>CLIPBOARD</strong> (viz další text)</td></tr>
</table>



<p><a name="k02"></a></p>
<h2>2. Výběry versus cut-buffery</h2>

<p>Poslední dvojice registrů vypsaná v&nbsp;tabulce zobrazené v&nbsp;předchozí
kapitole má speciální význam, protože slouží mj.&nbsp;i k&nbsp;přenosu textů
z&nbsp;jiných aplikací do <i>Vimu</i> a samozřejmě i opačným směrem. Tyto
registry mají název &bdquo;*&ldquo; (hvězdička) a &bdquo;+&ldquo; (plus).
Z&nbsp;jakého důvodu jsou však použity dva registry, když by teoreticky měl
dostačovat registr jediný? V&nbsp;X Window Systemu jsou totiž pro přenos textů,
popř.&nbsp;i dalších dat, používány hned tři konceptuálně zcela odlišné metody.
První metoda spočívá v&nbsp;přenosu textů s&nbsp;využitím pojmenovaných
<i>výběrů</i> (<i>selection</i>) [<a
href="http://en.wikipedia.org/wiki/X_Window_selection">1</a>] [<a
href="http://wwwcgi.rdg.ac.uk:8081/cgi-bin/cgiwrap/wsi14/poplog/pop11/ref/XSelections">2</a>].
Druhá metoda využívá přenosu textů přes takzvané <i>cut-buffery</i> [<a
href="http://en.wikipedia.org/wiki/Cut_buffer#Cut_buffers">3</a>] [<a
href="http://wwwcgi.rdg.ac.uk:8081/cgi-bin/cgiwrap/wsi14/poplog/pop11/ref/XBuffers">4</a>]
a metoda třetí využívá technologii drag and drop.</p>

<a href="http://i.iinfo.cz/images/83/vim11-1.png"><img src="http://i.iinfo.cz/images/83/vim11-1-prev.png" width="370" height="239" alt="&#160;" /></a>
<p><i>Obrázek 1: Výběr textu v&nbsp;externí aplikaci, konkrétně
v&nbsp;Geditu.</i></p>

<p>Na moderních systémech s&nbsp;grafickým uživatelským rozhraním je převážně
používaný přenos textů přes <i>výběry</i>, ovšem textový editor <i>Vim</i>
dokáže za určitých okolností pracovat i s&nbsp;<i>cut-buffery</i> (důvod si
řekneme v&nbsp;následujícím textu). V&nbsp;X Window Systemu si může každá
aplikace vytvořit libovolný počet výběrů (<i>selection</i>), z&nbsp;nichž každý
je pojmenován, tj.&nbsp;je jednoznačně identifikován řetězcem (jedná se o
vlastnost/property přiřazenou k&nbsp;oknu). Většina aplikací pracuje, podobně
jako <i>Vim</i>, s&nbsp;dvojicí výběrů nazvaných <strong>PRIMARY</strong> a
<strong>CLIPBOARD</strong>. V&nbsp;případě <i>cut-bufferů</i>, což jsou
vlastnosti vytvořené v&nbsp;kořenovém okně, se většinou používají jména
<strong>CUT_BUFFER0</strong> až <strong>CUT_BUFFER7</strong>, přičemž
<i>Vim</i> pracuje pouze s&nbsp;<strong>CUT_BUFFER0</strong> (ostatně i mnohé
další aplikace se spokojí s&nbsp;jediným cut bufferem, i když jich je možné
využívat větší množství). Zatímco s&nbsp;využitím výběrů je možné obecně
přenášet různé typy dat (texty, rastrové obrázky, vektorové obrázky atd.), u
cut-bufferů je přenos omezen pouze na texty, což souvisí s&nbsp;tím, že
aplikace do cut bufferu zapíše data a posléze se již o obsah bufferu nestará
(může být dokonce ukončena).</p>

<a href="http://i.iinfo.cz/images/83/vim11-2.png"><img src="http://i.iinfo.cz/images/83/vim11-2-prev.png" width="370" height="252" alt="&#160;" /></a>
<p><i>Obrázek 2: Ihned po výběru textu v&nbsp;Geditu je naplněn registr
*.</i></p>



<p><a name="k03"></a></p>
<h2>3. Přenos textů přes výběr PRIMARY (primární výběr)</h2>

<p>Jak jsme si již řekli v&nbsp;předchozích kapitolách, umožňuje textový editor
<i>Vim</i> práci jak s&nbsp;výběry, tak i s&nbsp;nultým cut-bufferem. Základem
pro přenos textů je většinou výběr nazvaný <strong>PRIMARY</strong>, jenž je ve
<i>Vimu</i> dostupný přes registr &bdquo;*&ldquo; (hvězdička). Do tohoto výběru
je při práci ve většině GUI aplikací zkopírován jakýkoli text vybraný pomocí
klávesnice či myši, aniž by bylo nutné explicitně použít nějakou klávesovou
zkratku či příkaz <i>Cut/Copy</i> z&nbsp;hlavního nebo kontextového menu. Obsah
výběru <strong>PRIMARY</strong> může být vložen do textových políček libovolné
aplikace pomocí prostředního tlačítka myši. Většinou se jedná o nejrychlejší
způsob přenosu textu mezi různými aplikacemi, který má ovšem i některé
nežádoucí vlastnosti o nichž je dobré vědět. První (diskutabilní) nevýhodou je
to, že se výběr <strong>PRIMARY</strong> přepíše při každém dalším výběru
textu. Někdy se jedná o operaci provedenou omylem (přemístění kurzoru
s&nbsp;delším podržením tlačítka myši), ovšem v&nbsp;mnoha typech dialogů je
automaticky vybrán nějaký text, který výběr <strong>PRIMARY</strong> přepisuje
&ndash; viz též následující screenshot.</p>

<a href="http://i.iinfo.cz/images/83/vim11-3.png"><img src="http://i.iinfo.cz/images/83/vim11-3-prev.png" width="370" height="110" alt="&#160;" /></a>
<p><i>Obrázek 3: Ukázka situace, kdy je primární výběr automaticky přepsán při
zobrazení dialogu s&nbsp;předvyplněným textem.</i></p>

<p>Druhou nevýhodou, která může v&nbsp;některých případech nemile překvapit, je
fakt, že primární výběr (zde je myšlen datový blok &bdquo;selection&ldquo;)
náleží aplikaci, v&nbsp;níž byl text vybrán, což znamená, že při kopiích textu
(prostřední tlačítko myši) musí aplikace, do níž se má text vložit, aktivně
komunikovat s&nbsp;aplikací vlastnící výběr <strong>PRIMARY</strong>. To ovšem
v&nbsp;důsledku znamená, že výběr <strong>PRIMARY</strong> je nenávratně
ztracen v&nbsp;případě, že je aplikace, z&nbsp;níž se text kopíruje (=vlastník
primárního výběru), ukončena! Toto chování si můžete jednoduše vyzkoušet:</p>

<ol>
<li>Otevřete libovolnou GUI aplikaci pracující s&nbsp;textem, například Gedit</li>
<li>Napište text a poté ho vyberte myší</li>
<li>Otevřete textový editor Vim příkazem gvim</li>
<li>Příkazem <strong>:echo @*</strong> zkontrolujte, že je vybraný text z&nbsp;Vimu dostupný</li>
<li>Uzavřete Gedit (nyní tiše dojde ke ztrátě primárního výběru)</li>
<li>Příkaz <strong>:echo @*</strong> bude nyní vypisovat obsah schránky, nikoli primárního výběru</li>
</ol>



<p><a name="k04"></a></p>
<h2>4. Přenos textů přes výběr CLIPBOARD (schránka)</h2>

<p>Textový editor <i>Vim</i> může kromě primárního výběru
<strong>PRIMARY</strong> využívat i výběr nazvaný <strong>CLIPBOARD</strong>,
který se v&nbsp;aplikacích určených pro X Window System používá pro
implementaci schránky, což je zajisté patrné již z&nbsp;názvu tohoto výběru.
Opět se jedná o výběr vlastněný aplikací, kde byla schránka naplněna, většinou
přes kontextové či hlavní menu (jedná se o klasické příkazy
<strong>Cut</strong> a <strong>Copy</strong>), popř.&nbsp;o příkazy spuštěné
s&nbsp;využitím klávesových zkratek <strong>Ctrl+X</strong>,
<strong>Ctrl+C</strong>, <strong>Ctrl+Insert</strong> a
<strong>Shift+Delete</strong>. Vzhledem k&nbsp;tomu, že se při přenosu dat musí
aktivně komunikovat s&nbsp;aplikací, v&nbsp;níž byla schránka naplněna, opět to
znamená, že tuto aplikaci není vhodné zavírat před tím, než se text či další
data skutečně přes schránku přenesou (zde je chování odlišné od
&bdquo;skutečné&ldquo;, na aplikacích nezávislé schránce). Výběr
<strong>CLIPBOARD</strong> odpovídá ve <i>Vimu</i> registru &bdquo;+&ldquo;,
což znamená, že je například možné měnit obsah schránky uvnitř maker nebo
skriptů:</p>

<p>Vymazání řádku s&nbsp;jeho vložením do schránky:</p>

<pre>
"+dd
</pre>

<p>Programová změna obsahu schránky:</p>

<pre>
:let @+="odpoved je " . 2*3*7
</pre>

<p>Pokud se registr + použije pro přenos textů mezi několika běžícími
instancemi <i>Vimu</i>, bude společně s&nbsp;textem korektně přenesena i
informace o tom, jakým způsobem byt text vybrán, tj.&nbsp;zda byl proveden
normální výběr, výběr celých řádků nebo sloupcový výběr. To je důležité
především při použití sloupcového výběru, například při kopiích dat mezi
tabulkami apod. Můžeme si vyzkoušet jednoduchý příklad:</p>

<p>Začátek sloupcového výběru:</p>

<pre>
Ctrl+V
"+y
</pre>

<p>V další instanci Vimu:</p>

<pre>
"+p
</pre>

<p>nebo:</p>

<pre>
"+P
</pre>

<p>Další aplikace (kromě instancí Vimu) informaci o režimu výběru textu
nevyužívají. Některé další možnosti, které nám textový editor <i>Vim</i> nabízí
pro práci se schránkou (a.k.a. registrem &bdquo;+&ldquo;) si ukážeme
v&nbsp;šesté a sedmé kapitole.</p>



<p><a name="k05"></a></p>
<h2>5. Přenos textů přes cut-buffer</h2>

<p>Jak jsme si již řekli v&nbsp;úvodních odstavcích, dokáže <i>Vim</i> pracovat
nejenom s&nbsp;výběry <strong>CLIPBOARD</strong> a <strong>PRIMARY</strong>,
ale i s&nbsp;cut-bufferem. Vzhledem k&nbsp;tomu, že se obsah výběrů ztratí při
ukončení aplikace, která tyto výběry vlastní, jsou cut-buffery ve <i>Vimu</i>
použity jako určitá poslední záchrana. V&nbsp;praxi to znamená to, že přímo ve
<i>Vimu</i> je při jeho ukončení uložen obsah schránky (pokud ji ovšem
<i>Vim</i> vlastní) do prvního cut-bufferu (prvním cut-bufferem je zde myšlen
buffer s&nbsp;indexem 0, tj.&nbsp;vlastnost kořenového okna pojmenovaná
<strong>CUT_BUFFER0</strong>). V&nbsp;případě, že <i>Vim</i> obsah schránky
nevlastní, je do prvního cut-bufferu uložen obsah primárního výběru. Díky
tomuto chování se <i>Vim</i> snaží na poslední chvíli zachránit text, který by
jinak mohl být nenávratně ztracen (podobně defenzivně se ostatně tento textový
editor chová ke svému swapovacímu souboru, který je z&nbsp;mnoha hledisek
mnohem výhodnější, než pouhé záložní kopie).</p>

<p>První cut-buffer se taktéž využije v&nbsp;případě, že <i>Vim</i> buď
nedokáže získat obsah primárního výběru ani schránky, popř.&nbsp;získá pouze
prázdný obsah. V&nbsp;těchto případech <i>Vim</i> tiše předpokládá, že
aplikace, která výběry vlastnila, byla ukončena, takže se alespoň pokusí získat
data z&nbsp;cut-bufferu. Jelikož se některé aplikace při svém ukončení chovají
stejně jako <i>Vim</i>, je určitá šance na to, že cut-buffer bude požadovaný
text skutečně obsahovat.</p>

<p><ins>Poznámka: pro kopie textů mezi primárním výběrem a prvním cut-bufferem
je možné použít nástroj nazvaný <strong>xcutsel</strong>, který bývá součástí
instalace X Window Systemu. Viz též <a
href="http://linux.die.net/man/1/xcutsel">xcutsel(1) - Linux man
page</a>.</ins></p>



<p><a name="k06"></a></p>
<h2>6. Automagické použití primárního výběru (PRIMARY) ve vizuálním režimu, triky pro práci s&nbsp;registry + a *</h2>

<p>Již v&nbsp;úvodních částech tohoto seriálu jsme si řekli, že při provádění
běžných editačních operací typu <strong>d</strong> (<i>delete</i>),
<strong>y</strong> (<i>yank</i>), <strong>c</strong> (<i>change</i>) či
<strong>p</strong> (<i>put</i>) se implicitně využívá registr pojmenovaný "
(uvozovky). V&nbsp;případě, že je nutné přenášet text mezi <i>Vimem</i> a
nějakou další aplikací, je tedy nutné explicitně specifikovat registr *
(primární výběr) nebo + (schránku), což je ukázáno na následujících
příkladech.</p>

<p>Vymazání celého řádku a jeho vložení do primárního výběru (selection):</p>

<pre>
"*dd
</pre>

<p>Vložení obsahu, schránky naplněné třeba i nějakou externí aplikací, do textu
za pozici textového kurzoru:</p>

<pre>
"+p
</pre>

<p>Zkopírování celého odstavce (operátor ap=a paragraph) do primárního
výběru:</p>

<pre>
"*yap
</pre>

<p>Většina ostatních desktopových aplikací však pracuje s&nbsp;primárním
výběrem a/nebo schránkou přímo, tj.&nbsp;nevyužívá své speciální (privátní)
registry. Při rozsáhlých možnostech konfigurace textového editoru <i>Vim</i>
však pravděpodobně nikoho nepřekvapí, že je možné chování tohoto editoru změnit
tak, aby se začal podobat ostatním aplikacím, tj.&nbsp;aby v&nbsp;případě, že
uživatel sám explicitně nezadá jiný registr, byl použit buď primární výběr
a/nebo schránka. Prvním přiblížením k&nbsp;tomuto stavu je hodnota
<strong>a</strong> přidaná do konfiguračního parametru
<strong>guioptions</strong>:</p>

<pre>
:set guioptions+=a
</pre>

<p>V&nbsp;případě, že je tato volba použita, bude text vybraný ve vizuálním
režimu, tj.&nbsp;pomocí příkazů <strong>v</strong>, <strong>V</strong> a
<strong>Ctrl+V</strong> automaticky zkopírován do systémového primárního
výběru, tj.&nbsp;bude ho možné ihned vložit do další aplikace, většinou pomocí
prostředního tlačítka myši. Současně začne korektně pracovat i výběr pomocí
myši se stlačeným levým tlačítkem, tj.&nbsp;i v&nbsp;tomto případě bude
<i>Vim</i> automaticky vkládat vybraný text do systémového primárního
výběru.</p>

<p>Alternativně je možné namísto hodnoty <strong>a</strong> použít hodnotu
<strong>A</strong>:</p>

<pre>
:set guioptions-=a
:set guioptions+=A
</pre>

<p>V&nbsp;tomto případě se bude do primárního výběru automaticky kopírovat
pouze text vybraný pomocí myši se stlačeným levým tlačítkem, nikoli však text
označený ve vizuálním režimu (<strong>v, V, Ctrl+V</strong>).</p>

<a href="http://i.iinfo.cz/images/83/vim11-4.png"><img src="http://i.iinfo.cz/images/83/vim11-4-prev.png" width="370" height="252" alt="&#160;" /></a>
<p><i>Obrázek 4: Výpis obsahu primárního výběru pomocí klávesové zkratky
Ctrl+F11.</i></p>

<p>Vzhledem k&nbsp;tomu, že v&nbsp;některých případech nemusí být zcela jasné,
zda se přenášený text nachází v&nbsp;primárním výběru nebo ve schránce, může
být výhodné si obsah obou registrů spojených s&nbsp;těmito výběry nějakým
způsobem vypsat. Jednu z&nbsp;možností samozřejmě představuje příkaz
<strong>:reg</strong>, ale je možné taktéž vytvořit nové klávesové zkratky pro
výpis obsahu jednoho z&nbsp;těchto registrů spolu s&nbsp;informací o tom, jak
se daný výběr jmenuje (PRIMARY/CLIPBOARD):</p>

<pre>
" nove klavesove zkratky Ctrl+F11 a Ctrl+F12
map &lt;C-F11&gt; :echo "*** PRIMARY *** " . @*&lt;cr&gt;
map &lt;C-F12&gt; :echo "*** CLIPBOARD *** " . @+&lt;cr&gt;
</pre>

<p>Osobně považuji tyto klávesové zkratky za mnohem užitečnější, než různé
externí aplikace pro zobrazení obsahu schránky.</p>

<a href="http://i.iinfo.cz/images/83/vim11-5.png"><img src="http://i.iinfo.cz/images/83/vim11-5-prev.png" width="370" height="252" alt="&#160;" /></a>
<p><i>Obrázek 5: Výpis obsahu schránky pomocí klávesové zkratky
Ctrl+F12.</i></p>



<p><a name="k07"></a></p>
<h2>7. Nastavení registru &bdquo;*&ldquo; nebo &bdquo;+&ldquo; jako implicitního registru pro editační operace</h2>

<p>Kromě volby <strong>:set guioptions=a</strong> je možné textový editor
<i>Vim</i> nakonfigurovat takovým způsobem, aby se registr * (primární výběr)
používal jako implicitní registr pro všechny běžné editační operace typu
<strong>d</strong> (<i>delete</i>), <strong>y</strong> (<i>yank</i>),
<strong>c</strong> (<i>change</i>) či <strong>p</strong> (<i>put</i>). Tohoto
chování lze docílit velmi jednoduše &ndash; postačuje použít následující
příkaz:</p>

<pre>
:set clipboard=unnamed
</pre>

<p>Toto nastavení má přibližně podobný význam, jako by byla použita sekvence
mapování původních editačních příkazů na editační příkazy, před nimiž je
uvedeno jméno registru (*), které se má použít:</p>

<pre>
:noremap d "*d
:noremap dd "*dd
:noremap D "*d$
:noremap y "*y
:noremap y "*y
:noremap Y "*Y
:noremap yy "*yy
atd.
</pre>

<p>Zajímavé je, že nastavení <strong>clipboard=unnamed</strong> bude pracovat i
ve <i>Vimu</i> spuštěném v&nbsp;terminálu, ovšem pouze za předpokladu, že byl
<i>Vim</i> přeložen s&nbsp;volbami <strong>+clipboard</strong> a
<strong>+xterm_clipboard</strong>. Možnosti <i>Vimu</i> nastavené v&nbsp;době
překladu lze získat pomocí příkazu:</p>

<pre>
:version
</pre>

<a href="http://i.iinfo.cz/images/83/vim11-6.png"><img src="http://i.iinfo.cz/images/83/vim11-6-prev.png" width="370" height="254" alt="&#160;" /></a>
<p><i>Obrázek 6: Textový editor Vim verze 7.2 ještě nepodporuje volbu :set
clipboard=unnamedplus.</i></p>

<p>V&nbsp;novějších verzích textového editoru <i>Vim</i>, konkrétně od verze
vim-7.3.74, je navíc možné pomocí volby:</p>

<pre>
:set clipboard=unnamedplus
</pre>

<p>nastavit registr &bdquo;+&ldquo; (tj.&nbsp;schránku) jako implicitní registr
pro provádění veškerých editačních operací. Pokud vám toto chování vyhovuje,
ale nemáte nainstalovánu dostatečně aktuální verzi <i>Vimu</i>, je možné se
uchýlit k&nbsp;triku s&nbsp;mapováním uvedeném výše, tentokrát samozřejmě
s&nbsp;využitím registru &bdquo;+&ldquo;:</p>

<pre>
:noremap d "+d
:noremap dd "+dd
:noremap D "+d$
:noremap y "+y
:noremap y "+y
:noremap Y "+Y
:noremap yy "+yy
atd.
</pre>

<a href="http://i.iinfo.cz/images/83/vim11-7.png"><img src="http://i.iinfo.cz/images/83/vim11-7-prev.png" width="370" height="254" alt="&#160;" /></a>
<p><i>Obrázek 7: Při pokusu o nastavení volby :set clipboard=unnamedplus ve
Vimu verze 7.2 se vypíše chybové hlášení.</i></p>



<p><a name="k08"></a></p>
<h2>8. Konfigurace chování klávesnice a myši pro snadný přenos textů</h2>

<p>Mnoho uživatelů při práci s&nbsp;textovým editorem očekává, že se při posunu
v&nbsp;textu pomocí kurzorových kláves společně se stlačeným modifikátorem
<strong>Shift</strong> začne vybírat blok. Ve <i>Vimu</i>, který má implicitně
na klávesové zkratky <strong>Shift+kurzorové šipky</strong> namapován
horizontální posun kurzoru po slovech a vertikální posun po stránkách, je možné
alternativní chování povolit pomocí příkazu:</p>

<pre>
:set keymodel=startsel,stopsel
</pre>

<p>Tímto způsobem však není možné zvolit výběr celých řádků, popřípadě výběr
sloupcových bloků.</p>

<p>Mezi další vlastnost textového editoru <i>Vim</i>, kterou je možné ovlivnit,
patří chování pravého tlačítka myši. To může sloužit buď k&nbsp;zobrazení
kontextového menu, nebo ho lze použít pro rozšíření výběru od původní pozice
textového kurzoru k&nbsp;místu, kde se nachází kurzor myši v&nbsp;době stlačení
pravého tlačítka. Toto chování se nastavuje konfiguračním parametrem
<strong>mousemodel</strong>:</p>

<pre>
" povolení zobrazení kontextového menu
:set mousemodel=popup
</pre>

<pre>
" rozšíření výběru po stlačení pravého tlačítka myši
:set mousemodel=extend
</pre>

<a href="http://i.iinfo.cz/images/83/vim11-8.png"><img src="http://i.iinfo.cz/images/83/vim11-8-prev.png" width="370" height="236" alt="&#160;" /></a>
<p><i>Obrázek 8: Textový editor Vim verze 7.3 již volbu :set
clipboard=unnamedplus podporuje.</i></p>

<p>Namísto předchozích dvou konfiguračních parametrů <strong>keymodel</strong>
a <strong>mousemodel</strong> je možné využít i &bdquo;globální přepínač&ldquo;
reprezentovaný příkazem (nikoli konfiguračním parametrem!)
<strong>behave</strong>. Parametrem tohoto příkazu je buď
<strong>xterm</strong> nebo <strong>mswin</strong>:</p>

<pre>
:behave xterm
:behave mswin
</pre>

<p>Tento &bdquo;globální přepínač&ldquo; ve skutečnosti ovlivňuje čtyři
konfigurační parametry vypsané v&nbsp;tabulce níže:</p>

<table>
<tr><th>Parametr</th><th>:behave mswin</th><th>:behave xterm</th></tr>
<tr><th>selectmode</th><th>mouse,key       </th><th>""</th></tr>
<tr><td>mousemodel</td><td>popup           </td><td>extend</td></tr>
<tr><td>keymodel  </td><td>startsel,stopsel</td><td>""</td></tr>
<tr><td>selection </td><td>exclusive       </td><td>inclusive</td></tr>
</table>

<p>Konfiguračním parametrem <strong>selectmode</strong> se určuje, ve kterých
případech se použije režim výběru (<i>selection</i>) a ve kterých vizuální
režim (<i>visual</i>).</p>

<a href="http://i.iinfo.cz/images/83/vim11-9.png"><img src="http://i.iinfo.cz/images/83/vim11-9-prev.png" width="370" height="237" alt="&#160;" /></a>
<p><i>Obrázek 9: Bezproblémové nastavení volby :set clipboard=unnamedplus ve
Vimu 7.3.</i></p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>X Selections, Cut Buffers, and Kill Rings<br />
<a href="http://www.jwz.org/doc/x-cut-and-paste.html">http://www.jwz.org/doc/x-cut-and-paste.html</a>
</li>

<li>Accessing the system clipboard<br />
<a href="http://vim.wikia.com/wiki/Accessing_the_system_clipboard">http://vim.wikia.com/wiki/Accessing_the_system_clipboard</a>
</li>

<li>
xcutsel(1) - Linux man page<br />
<a href="http://linux.die.net/man/1/xcutsel">http://linux.die.net/man/1/xcutsel</a>
</li>

<li>snipMate : TextMate-style snippets for Vim<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2540">http://www.vim.org/scripts/script.php?script_id=2540</a>
</li>

<li>msanders / snipmate.vim<br />
<a href="https://github.com/msanders/snipmate.vim">https://github.com/msanders/snipmate.vim</a>
</li>

<li>snipMate.vim Introductory Screencast<br />
<a href="http://vimeo.com/3535418">http://vimeo.com/3535418</a>
</li>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Exuberant ctags<br />
<a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a>
</li>

<li>xxd (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>ctags (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags</a>
</li>

<li>cscope (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Novinky ve VIM 7: Úvodní část - speller<br />
<a href="http://www.root.cz/vim-sedm-prvni-cast/">http://www.root.cz/vim-sedm-prvni-cast/</a>
</li>

<li>Novinky ve VIM 7: Skriptovací jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>vim2elvis: Přednosti a nedostaky Elvise v porovnání s Vimem<br />
<a href="http://www.root.cz/clanky/vim2elvis-1/">http://www.root.cz/clanky/vim2elvis-1/</a>
</li>

<li>vim2elvis: Shodné znaky mezi Elvisem a Vimem, nastavení­editoru<br />
<a href="http://www.root.cz/clanky/vim2elvis-2/">http://www.root.cz/clanky/vim2elvis-2/</a>
</li>

<li>Nej... VIM pluginy (1)<br />
<a href="http://www.root.cz/clanky/nej-vim-pluginy/">http://www.root.cz/clanky/nej-vim-pluginy/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Scroll Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Scroll_lock">http://necyklopedie.wikia.com/wiki/Scroll_lock</a>
</li>

<li>Caps Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Caps_Lock">http://necyklopedie.wikia.com/wiki/Caps_Lock</a>
</li>

<li>Avoid the escape key<br />
<a href="http://vim.wikia.com/wiki/Avoid_the_escape_key">http://vim.wikia.com/wiki/Avoid_the_escape_key</a>
</li>

<li>Map caps lock to escape in XWindows<br />
<a href="http://vim.wikia.com/wiki/VimTip166">http://vim.wikia.com/wiki/VimTip166</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2011</small></p>
</body>
</html>

