<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textový editor Vim jako IDE (2.část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textový editor Vim jako IDE (2.část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části seriálu o použití textového editoru Vim (nejenom) ve funkci vývojového prostředí si nejprve řekneme, jak lze v tomto textovém editoru lépe využít klávesu Caps Lock a posléze se seznámíme s propojením Vimu s překladači a externím nástrojem cstags. Ve druhé polovině článku si popíšeme čtveřici přídavných modulů (pluginů) využitelných jak vývojáři pracujícími v céčku a C++, tak i v Javě.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Použití textového editoru Vim ve funkci IDE</a></p>
<p><a href="#k02">2. Jak lze ve Vimu lépe využít klávesu Caps Lock?</a></p>
<p><a href="#k03">3. Překlad programů a procházení chybovými hlášeními překladače</a></p>
<p><a href="#k04">4. Využití externího nástroje cscope</a></p>
<p><a href="#k05">5. Přídavný modul &bdquo;NERD Tree&ldquo;</a></p>
<p><a href="#k06">6. Přídavný modul &bdquo;Taglist&ldquo;</a></p>
<p><a href="#k07">7. Přídavný modul &bdquo;c.vim&ldquo;</a></p>
<p><a href="#k08">8. Přídavný modul &bdquo;JavaBrowser&ldquo;</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Použití textového editoru Vim ve funkci IDE</h2>

<p>Ve druhé části seriálu o různých způsobech využití textového editoru
<i>Vim</i> se zaměříme na způsob překladu programů s&nbsp;následným procházením
seznamem chyb vygenerovaných překladačem a/nebo programem pro řízení překladu
(<i>make, ant</i>). Dále si ukážeme způsob využití velmi užitečného externího
nástroje <strong>cscope</strong> i některých přídavných modulů (pluginů), jež
mohou práci programátorů zpříjemnit a současně i urychlit. Jedná se o modul
<i>NERD Tree</i> (operace se soubory a adresáři, vhodné zejména při práci na
větším projektu s&nbsp;množstvím různých souborů), dále o modul <i>Taglist</i>
(vylepšená práce se značkami), modul <i>c.vim</i> (spousta užitečných maker pro
céčkaře a programátory v&nbsp;C++) a konečně o přídavný modul
<i>JavaBrowser</i> (nástroj vhodný naopak pro Javisty). Tyto moduly jsou psány
v&nbsp;interním skriptovacím jazyce textového editoru <i>Vim</i>, který se
postupně vyvíjel od jazyka umožňujícího prostý zápis sekvence příkazů až po
jeho dnešní podobu, kdy se jedná o prakticky plnohodnotný programovací jazyk
&bdquo;Algolské&ldquo; větve, tj.&nbsp;o jazyk s&nbsp;proměnnými, funkcemi,
podmínkami i programovými smyčkami.</p>

<a href="http://i.iinfo.cz/images/354/vim02-1.png"><img src="http://i.iinfo.cz/images/354/vim02-1-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 1: Textový editor Vim se spuštěným přídavným modulem NERD Tree
popsaným v&nbsp;páté kapitole.</i></p>

<p>Jako malou rozcvičku si nejprve ukážeme, jak je možné zapisovat některé
ASCII znaky využívané v&nbsp;různých programovacích jazycích na klávesnici
s&nbsp;českým rozložením kláves, aniž by se bylo nutné přepínat na anglické
rozložení, popř.&nbsp;aniž by bylo nutné používat přepínač
<strong>AltGr</strong>. Jak sami uvidíte, není toto řešení vhodné pro zápis
celých programů (tam se již skutečně vyplatí přepnutí na anglické rozložení
kláves), ovšem například při psaní dokumentace, v&nbsp;níž se občas vyskytuje
nějaký &bdquo;exotičtější&ldquo; ASCII znak se může hodit (příkladem může být
například dokument psaný v&nbsp;<i>TeXu</i> či <i>LaTeXu</i> s&nbsp;vloženými
příkazy pro sazbu matematických vzorců a tabulek). Řešení spočívá
v&nbsp;několika vimovských příkazech, které mapují dvojici znaků s&nbsp;akcenty
na ASCII znak, který se na stejné klávese nachází v&nbsp;případě anglického
rozložení klávesnice. Vzhledem k&nbsp;tomu, že se v&nbsp;některých českých
slovech používá dvojice &bdquo;šš&ldquo;, je pro alternativní funkci nutné
tento znak napsat třikrát za sebou, což je však stále ještě rychlejší, než
přepnutí rozložení klávesnice nebo použití <strong>AltGr</strong>:</p>

<pre>
noremap ěě @
noremap ššš #
noremap čč $
noremap řř %
noremap žž ^
noremap ýý &amp;
noremap áá *
noremap íí (
noremap éé )
noremap úú {
noremap ůů ;
inoremap ěě @
inoremap ššš #
inoremap čč $
inoremap řř %
inoremap žž ^
inoremap ýý &amp;
inoremap áá *
inoremap íí (
inoremap éé )
inoremap úú {
inoremap ůů ;
inoremap §§ '
</pre>

<a href="http://i.iinfo.cz/images/354/vim02-2.png"><img src="http://i.iinfo.cz/images/354/vim02-2-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 2: Využití malého a užitečného triku &ndash; editace souboru
obsahujícího nové klávesové zkratky (mapování) s&nbsp;následným použitím
příkazu <strong>:so %</strong> nebo <strong>:source %</strong>, který načte a
spustí obsah aktuálního souboru. Znak procenta totiž vždy obsahuje jméno
aktuálně editovaného souboru, čehož lze využít i v&nbsp;dalších funkcích; jen
pro příklad <strong>:map &lt;F9;&gt; :!gcc -c %&lt;cr&gt;</strong></i></p>

<p>Poznámka: osobně používám v&nbsp;normálním režimu mapování dvojice znaků
&bdquo;ůů&ldquo; na znak dvojtečky a nikoli středníku, protože dvojtečkou se
&ndash; jak jistě všichni uživatelé tohoto textového editoru vědí &ndash;
provádí přepnutí z&nbsp;normálního režimu do režimu příkazového.</p>



<p><a name="k02"></a></p>
<h2>2. Jak lze ve Vimu lépe využít klávesu Caps Lock?</h2>

<p>Funkce, která bude vysvětlena v&nbsp;této kapitole se sice týká přímo
operačního systému (či přesněji řečeno jeho uživatelského rozhraní), ovšem do
jisté míry souvisí s&nbsp;<i>Vimem</i>, protože dokáže přemapovat funkci
klávesy <strong>Esc</strong>, aniž by bylo nutné si kupovat specializovanou <a
href="http://en.wikipedia.org/wiki/Happy_Hacking_Keyboard">hackerskou
klávesnici</a>, která tuto klávesu fyzicky umisťuje blíže k&nbsp;základnímu
postavení prstů při psaní. Některým uživatelům nevyhovuje, že se
v&nbsp;textovém editoru <i>Vim</i> pro přepínání z&nbsp;vkládacího režimu
(<i>insert mode</i>) nebo přepisovacího režimu (<i>overwrite mode</i>) do
režimu normálního používá klávesa <strong>Esc</strong>, která je umístěna ve
velké vzdálenosti od základní polohy prstů při psaní. Kód klávesy
<strong>Esc</strong> lze sice nahradit klávesovou kombinací
<strong>Ctrl+[</strong>, ovšem to je kvůli neergonomickému umístění klávesy
<strong>Control (Ctrl)</strong> na standardních klávesnicích PC/AT mnohdy ještě
horší řešení (klávesnice používané u jiných typů počítačů mají či měly klávesu
<strong>Esc</strong> umístěnou nalevo od klávesy <strong>A</strong>).</p>

<a href="http://i.iinfo.cz/images/354/vim02-3.png"><img src="http://i.iinfo.cz/images/354/vim02-3-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 3: Zobrazení všech aktuálně nastavených mapování pomocí prostého
příkazu <strong>:map</strong> zapsaného bez dalších parametrů.</i></p>

<p>Klávesu <strong>Esc</strong> je samozřejmě možné namapovat na libovolnou
kombinaci kláves, ale nabízí se lepší řešení &ndash; použití v&nbsp;podstatě <a
href="http://necyklopedie.wikia.com/wiki/Caps_Lock#Vyu.C5.BEit.C3.AD">nevyužívané</a>
klávesy/přepínače <strong>Caps Lock</strong>, kterou mnozí uživatelé považují
za zcela zbytečnou, podobně jako <a
href="http://necyklopedie.wikia.com/wiki/Scroll_lock">Scroll Lock</a> :-)
Jediná potíž je v&nbsp;tom, že kód této klávesy je zachycován systémem, takže
není možné použít příkaz <strong>map</strong> ve <i>Vimu</i>. Nejjednodušší
řešení tohoto problému &ndash; alespoň pro uživatele používajícího X Window
&ndash; spočívá ve spuštění příkazu:</p>

<pre>
xmodmap -e 'clear Lock' -e 'keycode 0x42 = Escape'
</pre>

<a href="http://i.iinfo.cz/images/354/vim02-4.png"><img src="http://i.iinfo.cz/images/354/vim02-4-prev.png" width="253" height="270" alt=" " /></a>
<p><i>Obrázek 4: Funkci klávesy Caps Lock je možné v&nbsp;prostředí Gnome
změnit v&nbsp;dialogovém okně konfiguračního programu
<strong>gnome-keyboard-properties</strong> pod volbou Layout options.</i></p>

<p>Tento příkaz je možné spustit přímo z&nbsp;inicializačního skriptu pro X
nebo okenního manažeru (já jsem si ho například umístil do
<strong>~/fluxbox/startup</strong>). Další způsoby přemapování klávesy
<strong>Esc</strong> na klávesu <strong>Caps Lock</strong>, které jsou vhodné
pro Linuxovou konzoli, popř.&nbsp;pro MS Windows, lze najít na stránce <a
href="http://vim.wikia.com/wiki/VimTip166">http://vim.wikia.com/wiki/VimTip166</a>.
Pokud vyžadujete, aby se klávesa <strong>Esc</strong> a/nebo <strong>Caps
Lock</strong> chovala jako přepínač mezi vkládacím režimem a režimem normálním,
je řešení velmi jednoduché &ndash; použije se příkaz pro mapování:</p>

<pre>
:map &lt;Esc&gt; i
</pre>

<p>Poznámka (varování): na duplicitní funkci klávesy <strong>Caps Lock</strong>
si lze kupodivu zvyknout velmi rychle, horší je to však při přechodu na
počítač, který toto mapování nemá nastavené :-)</p>

<a href="http://i.iinfo.cz/images/354/vim02-5.png"><img src="http://i.iinfo.cz/images/354/vim02-5-prev.png" width="349" height="270" alt=" " /></a>
<p><i>Obrázek 5: Volba pro přepnutí klávesy Caps Lock na funkci klávesy Esc je
v&nbsp;tomto dialogu zobrazena na spodním řádku výběru.</i></p>



<p><a name="k03"></a></p>
<h2>3. Překlad programů a procházení chybovými hlášeními překladače</h2>

<p>Textový editor <i>Vim</i> obsahuje již od svých prvních verzí podporu pro
volání externích překladačů s&nbsp;následnou analýzou chybových hlášení, které
tyto překladače vypisují na standardní či chybový výstup. <i>Vim</i> tato
hlášení analyzuje a následně si do své interní struktury uloží (zjednodušeně
řečeno) seznam trojic: jméno souboru s&nbsp;chybou, číslo řádku s&nbsp;chybou a
chybové hlášení. Uživatel-programátor může po spuštění překladu následně použít
několik příkazů umožňujících přeskakovat kurzorem na jednotlivé řádky
s&nbsp;chybou se současným zobrazeních chybové zprávy. Mezi tyto příkazy patří
zejména:</p>

<table>
<tr><th>Příkaz</th><th>Význam</th></tr>
<tr><td>:make</td><td>spuštění překladu</td></tr>
<tr><td>:clist</td><td>výpis všech chybových hlášení</td></tr>
<tr><td>:cfirst</td><td>přechod na první chybu</td></tr>
<tr><td>:clast</td><td>přechod na poslední chybu</td></tr>
<tr><td>:cp</td><td>přechod na předchozí chybu</td></tr>
<tr><td>:cn</td><td>přechod na následující chybu</td></tr>
</table>

<a href="http://i.iinfo.cz/images/354/vim02-6.png"><img src="http://i.iinfo.cz/images/354/vim02-6-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 6: Příklad použití příkazu <strong>:clist</strong> pro výpis
všech chybových hlášení překladače.</i></p>

<p>Pro příkaz <strong>:make</strong> je důležité nastavení parametru
<strong>makeprg</strong>. Ten může obsahovat jak samotný název překladače či
utility použité pro překlad (make, ant), tak i například již zmíněný znak %
znamenající název aktuálně editovaného souboru (pozor na uvozování mezer či
znaku roury!):</p>

<pre>
:set makeprg=javac\ %
</pre>

<p>Analýza chybových hlášení je prováděna na základě hodnoty konfiguračního
parametru <strong>errorformat</strong>, který dokáže zpracovat (parsovat) jak
běžná čísla řádků a sloupců s&nbsp;chybou, tak i například formát používaný
překladačem <strong>javac</strong>, který <i>pod</i> znak s&nbsp;chybou umístí
znak ^ (šipka nahoru).</p>

<a href="http://i.iinfo.cz/images/354/vim02-7.png"><img src="http://i.iinfo.cz/images/354/vim02-7-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 7: Použití příkazu <strong>:cn</strong> pro skok na řádek
s&nbsp;následující chybou a současně pro výpis chybového hlášení.</i></p>

<p>Volání překladače a procházení chybovými hlášeními generovanými překladačem
je velmi častá činnost. Z&nbsp;tohoto důvodu je vhodné, aby všechny potřebné
příkazy byly namapovány například na funkční klávesy, které <i>Vim</i>
standardně nevyužívá. Pokud si následující sekvenci příkazů vložíte do svého
konfiguračního souboru <strong>.vimrc</strong>, bude volání překladače i další
činnosti prakticky stejně jednoduché, jako je tomu u většiny integrovaných
vývojových prostředí. Další funkční klávesy, především ty z&nbsp;prostředního
funkčního bloku <strong>F5, F6, F7, F8</strong>, si necháme volné například pro
urychlení ladění programů. Na sekvenci příkazů zobrazených pod tímto odstavcem
si povšimněte, že při stlačení klávesy <strong>F9</strong> dojde nejprve
k&nbsp;uložení právě editovaného souboru a posléze k&nbsp;překladu projektu
&ndash; většinou je totiž překlad bez uložení obsahu editovaného souboru
spouštěn spíše omylem (na což dokáže většina integrovaných vývojových prostředí
upozornit):</p>

<pre>
" uložení aktuálně editovaného souboru
map &lt;F2&gt; :w&lt;cr&gt;

" skok na předchozí chybové hlášení
map &lt;F3&gt; :cp&lt;cr&gt;

" skok na následující chybové hlášení
map &lt;F4&gt; :cn&lt;cr&gt;

" uložení aktuálně editovaného souboru a spuštění překladu
map &lt;F9&gt; :w&lt;cr&gt;:make&lt;cr&gt;

" výpis všech chybových hlášení překladače
map &lt;F10&gt; :cl&lt;cr&gt;&lt;cr&gt;
</pre>

<a href="http://i.iinfo.cz/images/354/vim02-8.png"><img src="http://i.iinfo.cz/images/354/vim02-8-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 8: Nastavení externího příkazu zavolaného po zápisu
<strong>:make</strong>.</i></p>



<p><a name="k04"></a></p>
<h2>4. Využití externího nástroje cscope</h2>

<p>V&nbsp;první části tohoto seriálu jsme se zmínili i o způsobu použití
takzvaných seznamů značek (<i>tags</i>) při orientaci v&nbsp;souborech,
z&nbsp;nichž se skládá projekt. Ovšem i přes svoje nesporné kladné stránky jsou
seznamy značek poměrně jednoúčelovou záležitostí, protože vlastně obsahují
pouze místa výskytu různých identifikátorů v&nbsp;projektu bez dalších
informací (zda se například jedná o funkci, kdy je tato funkce volaná atd.).
Vzhledem k&nbsp;tomu, že orientace ve větších projektech je pro programátora
poměrně důležitá, vznikla v&nbsp;minulosti pro programovací jazyk C velmi
užitečná utilita nazvaná <strong>cscope</strong>. Jedná se o utilitu, která po
svém zavolání vytvoří soubor s&nbsp;databází obsahující poměrně podrobné
informace o celém projektu a následně uživateli nabídne různé možnosti
vyhledávání různých identifikátorů v&nbsp;projektu. Ovšem celoobrazovkové
rozhraní programu <strong>cscope</strong> není příliš vhodné pro kooperaci
s&nbsp;Vimem, proto Vim využívá jeho řádkové rozhraní, které si
v&nbsp;následujícím textu stručně popíšeme.</p>

<a href="http://i.iinfo.cz/images/354/vim02-9.png"><img src="http://i.iinfo.cz/images/354/vim02-9-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 9: Nastavení parseru pro chybové hlášení většinou není nutné
ručně provádět, protože Vim již ve své instalaci množství těchto nastavení
obsahuje (popř.&nbsp;se jimi lze inspirovat).</i></p>

<p>Nejprve je zapotřebí v&nbsp;adresáři s&nbsp;projektem poprvé spustit utilitu
<strong>cscope</strong>, která si vytvoří svou databázi, podobně jako minule
popsaná utilita <strong>ctags</strong>. Vše lze samozřejmě provést přímo
z&nbsp;Vimu:</p>

<pre>
:! cscope -Rbq
</pre>

<p>Následně je nutné svázat databázi vygenerovanou programem
<strong>cscope</strong> s&nbsp;Vimem (ve skutečnosti se na pozadí spustí nová
instance této utility, s&nbsp;níž Vim komunikuje):</p>

<pre>
:cscope add cscope.out
</pre>

<p>popř.&nbsp;též zkráceně:</p>

<pre>
:cs add cscope.out
</pre>

<a href="http://i.iinfo.cz/images/354/vim02-10.png"><img src="http://i.iinfo.cz/images/354/vim02-10-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 10: Napojení Vimu na databázi vytvořenou utilitou cscope.</i></p>

<p>Pokud se předchozí příkaz provedl bez chyby, lze již přímo
z&nbsp;<i>Vimu</i> použít například následující příkazy:</p>

<pre>
" výpis propojení mezi Vimem a utilitou cscope
:cs show

" nalezení souboru specifikovaného ve třetím parametru
:cs f f stdio.h

" nalezení textu uvnitř řetězců (nikde jinde)
:cs f t xyzzy

" nalezení definice funkce test (skok na začátek definice)
:cs f g test

" zjištění, které funkce se volají z funkce main
:cs f d main

" zjištění, odkud se volá funkce fclose
:cs f c fclose
</pre>

<p>Důležité je, že výsledek dotazu se chová jako nový seznam značek (tagů),
takže s&nbsp;tímto seznamem lze provádět operace popsané minule.</p>

<a href="http://i.iinfo.cz/images/354/vim02-11.png"><img src="http://i.iinfo.cz/images/354/vim02-11-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 11: Nalezení všech funkcí, které se volají z&nbsp;funkce
png_write().</i></p>



<p><a name="k05"></a></p>
<h2>5. Přídavný modul &bdquo;NERD Tree&ldquo;</h2>

<p>Ve druhé části článku si popíšeme některé zajímavé rozšiřující moduly
(<i>pluginy</i> psané ve většině případů přímo ve Vimscriptu), které je možné
do textového editoru <i>Vim</i> velmi jednoduše doinstalovat &ndash; tato
instalace se v&nbsp;naprosté většině případů provádí prostým rozbalením archivu
s&nbsp;pluginem do adresáře <strong>/usr/share/vim/vimcurrent</strong>,
popř.&nbsp;do adresáře <strong>/usr/local/share/vim</strong>. Instalaci lze
provést i přímo v&nbsp;domácím adresáři uživatele, takový rozšiřující modul
však samozřejmě nebude přístupný ostatním uživatelům počítače (adresáře, kde se
hledají skripty lze vypsat příkazem <strong>:set runtimepath?</strong>). Dále uvedený
popis všech rozšiřujících modulů bude poměrně stručný, protože nejdůležitější
je (alespoň podle skromného názoru autora) především povědomí o tom, že
rozšiřující modul s&nbsp;těmito vlastnostmi skutečně existuje a na které
stránce je možné najít archiv s&nbsp;jeho instalací a samozřejmě taktéž
dokumentací.</p>

<a href="http://i.iinfo.cz/images/354/vim02-12.png"><img src="http://i.iinfo.cz/images/354/vim02-12-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 12: Nalezení všech míst v&nbsp;programu, kde je volána funkce
fclose().</i></p>

<p>První dnes zmíněný přídavný modul se jmenuje <i>NERD Tree</i> a informaci o
něm lze nalézt na adrese <a
href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>.
V&nbsp;tomto modulu je implementován poměrně propracovaný správce souborů
založený na zobrazení stromu obsahujícího adresáře a soubory, podobně jako je
tomu i u většiny integrovaných vývojových prostředí. Strom se zobrazuje
v&nbsp;samostatném podokně a pro jeho vyvolání se používá příkaz
<strong>:NERDTree</strong>. Samozřejmě je možné si tento příkaz namapovat na
prakticky libovolnou klávesovou kombinaci, například pomocí následujícího
příkazu:</p> 

<pre>
:map &lt;F12&gt; :NERDTree&lt;CR&gt;
</pre>

<p>Další funkce nabízené tímto modulem lze zobrazit po stlačení klávesy
&bdquo;?&ldquo;. Za povšimnutí stojí zejména příkaz &bdquo;go&ldquo; sloužící
pro prohlížení souborů bez toho, aby kurzor přeskočil do nově vytvořeného
bufferu.</p>

<a href="http://i.iinfo.cz/images/354/vim02-13.png"><img src="http://i.iinfo.cz/images/354/vim02-13-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 13: Textový editor Vim společně s&nbsp;přídavným modulem NERD
Tree.</i></p>

<p>Poznámka: podobnou funkci nabízí i modul <strong>netrw</strong>, který je
přímo součástí distribuce textového editoru <i>Vim</i>. Vstupním modem do
tohoto modulu je funkce <strong>:Explore</strong> (někdy též
<strong>:HExplore</strong> lišící se způsobem zobrazení podokna: vertikální či
horizontální dělení). Tuto funkci si lze samozřejmě v&nbsp;případě potřeby
taktéž namapovat na klávesovou zkratku:</p>

<pre>
:map &lt;F11&gt; :Explore&lt;CR&gt;
</pre>



<p><a name="k06"></a></p>
<h2>6. Přídavný modul &bdquo;Taglist&ldquo;</h2>

<p>Druhým přídavným modulem, se kterým se dnes seznámíme, je modul nazvaný
<i>Taglist</i>, jenž je dostupný na adrese <a
href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>.
Jedná se o poměrně známý a často používaný modul, který zpřehledňuje práci se
seznamem značek (tagů), což mj.&nbsp;znamená, že spolupracuje s&nbsp;externím
nástrojem <strong>ctags</strong>, o němž jsme se již zmínili v&nbsp;předchozí
části tohoto seriálu. Práce s&nbsp;tímto modulem je ve skutečnosti velmi
jednoduchá &ndash; po otevření zdrojového souboru stačí v&nbsp;příkazovém
režimu napsat příkaz:</p>

<pre>
:Tlist
</pre>

<p>po jehož spuštění se otevře nové okno obsahující v&nbsp;případě céčkového
zdrojového kódu seznam maker, proměnných a funkcí, v&nbsp;případě Javovského
zdrojového kódu seznam tříd, atributů a metod atd. Tyto seznamy jsou samozřejmě
aktivní, tj.&nbsp;je možné rychle přejít na definice všech prvků programu, což
je většinou přehlednější, než používání klasických seznamů značek. Tento
přídavný modul je samozřejmě možné kombinovat s&nbsp;dalšími přídavnými moduly
a vytvořit si tak prostředí co nejvhodnější pro vývoj.</p>

<a href="http://i.iinfo.cz/images/354/vim02-14.png"><img src="http://i.iinfo.cz/images/354/vim02-14-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 14: Zobrazení stromu s&nbsp;makry, proměnnými a funkcemi.</i></p>

<p>Druhým důležitým příkazem modulu <i>Taglist</i> je příkaz
<strong>TlistAddFiles</strong>, který se používá v&nbsp;těch případech, kdy se
má seznam značek vygenerovat a následně i zobrazit pro více souborů. Pro
projekty obsahující zdrojové soubory pouze v&nbsp;jednom adresáři je situace
velmi jednoduchá, protože lze použít například tuto sekvenci příkazů:</p>

<pre>
:TlistAddFiles *.c
:Tlist
</pre>

<p>V&nbsp;případě, že jsou zdrojové soubory umístěny ve složitější adresářové
struktuře, přichází na řadu jiný příkaz:</p>

<pre>
:TlistAddFilesRecursive .
:Tlist
</pre>

<a href="http://i.iinfo.cz/images/354/vim02-15.png"><img src="http://i.iinfo.cz/images/354/vim02-15-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 15: Zobrazení nápovědy k&nbsp;přídavnému modulu Taglist.</i></p>



<p><a name="k07"></a></p>
<h2>7. Přídavný modul &bdquo;c.vim&ldquo;</h2>

<p>Třetím přídavným modulem, o němž se dnes zmíníme, je modul nazvaný
<strong>c.vim</strong>, nebo též <strong>C/C++-IDE</strong>, který lze nalézt
na adrese <a
href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>.
Jedná se o poměrně rozsáhlý modul naprogramovaný <i>Fritzem Menherem</i>, který
obsahuje mnoho funkcí sloužících pro urychlení práce programátorů píšících
aplikace v&nbsp;programovacích jazycích C a C++. Mezi implementované funkce
patří například vkládání různých typů komentářů z&nbsp;připravených šablon,
vkládání koster strukturovaných příkazů (podmínek i programových smyček) či
často používaných idiomů, práce s&nbsp;dnes velmi populárními snippety
(vytváření a vkládání snippetů do programového kódu), podpora pro přímý překlad
programu a jeho následného spuštění atd.</p>

<a href="http://i.iinfo.cz/images/354/vim02-16.png"><img src="http://i.iinfo.cz/images/354/vim02-16-prev.png" width="370" height="242" alt=" " /></a>
<p><i>Obrázek 16: Do hlavního menu Vimu se po instalaci modulu c.vim přidal
další list. Zde je zobrazeno podmenu s&nbsp;možností definice a vkládání
snippetů.</i></p>

<p>Vzhledem k&nbsp;velkému množství funkcí nabízených tímto modulem se při jeho
načítání vytváří i samostatné menu obsahující jak všechny příkazy, tak i
k&nbsp;nim příslušné klávesové zkratky. Tyto zkratky začínají implicitně znakem
zpětného lomítka, ovšem to lze změnit příkazem:</p>

<pre>
:let maplocalleader=znak
</pre>

<p>Pokud není menu při startu editoru v&nbsp;grafickém režimu (příkazy
<strong>gvim</strong> či <strong>vim -g</strong>) zobrazeno, lze použít
následující příkaz:</p>

<pre>
:set guioption+=m
</pre>

<a href="http://i.iinfo.cz/images/354/vim02-17.png"><img src="http://i.iinfo.cz/images/354/vim02-17-prev.png" width="370" height="242" alt=" " /></a>
<p><i>Obrázek 17: Podmenu pro spuštění přeložené aplikace, zavolání linkeru a
další podobné činnosti.</i></p>

<p>Všechny dostupné funkce i jejich klávesové zkratky jsou dostupné na adrese
<a
href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>.
Stejný soubor je ostatně součástí instalace tohoto přídavného modulu.</p>

<p>Po načtení přídavného modulu <i>c.vim</i> je možné si jeho funkci jednoduše
vyzkoušet. Postačuje zadat příkaz:</p>

<pre>
\i0
</pre>

<p>Textový editor <i>Vim</i> se následně zeptá na název proměnné a na případné
(nepovinné) další parametry počítané programové smyčky <strong>for</strong>.
Pokud například jako odpověď na dotaz zadáme:</p>

<pre>
xx 10 20 2
</pre>

<p>Vygeneruje se správně zarovnaný zdrojový kód:</p>

<pre>
for ( xx = 10; xx &lt; 20; xx += 2 ) {
}
</pre>

<p>Ovšem při zadání pouhého názvu proměnné:</p>

<pre>
yy
</pre>

<p>Dostane vygenerovaná smyčka tvar:</p>

<pre>
for ( yy = 0; yy &lt; n; yy += 1 ) {
}
</pre>



<p><a name="k08"></a></p>
<h2>8. Přídavný modul &bdquo;JavaBrowser&ldquo;</h2>

<p>Zatímco modul popsaný v&nbsp;předchozí kapitole slouží především pro
urychlení práce vývojářů tvořících aplikace v&nbsp;programovacích jazycích C či
C++, je zde popisovaný modul nazvaný příhodně <i>JavaBrowser</i> určen &ndash;
což není těžké uhodnout &ndash; pro programátory pracující zejména
s&nbsp;Javou. Tento modul, který lze získat na adrese <a
href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>,
slouží pro zobrazení stromu obsahujícího třídy a jejich metody i atributy,
samozřejmě s&nbsp;rozlišením přístupových práv k&nbsp;metodám i atributům
(taktéž se rozlišuje, zda se jedná o statickou metodu=funkci či atribut). Nad
tímto stromem je možné provádět podobné operace, jaké jsou dostupné i
v&nbsp;běžných integrovaných vývojových prostředích, viz též následující
tabulku:</p>

<table>
<tr><th>Příkaz</th><th>Operace</th></tr>
<tr><td>Enter</td><td>přeskok kurzoru na definici metody/atributu</td></tr>
<tr><td>o</td><td>dtto, ale otevře se nové okno</td></tr>
<tr><td>+</td><td>rozbalení podstromu</td></tr>
<tr><td>-</td><td>zabalení podstromu</td></tr>
<tr><td>*</td><td>rozbalení celého stromu</td></tr>
<tr><td>x</td><td>skrytí či zobrazení okna se zdrojovým kódem</td></tr>
</table>

<a href="http://i.iinfo.cz/images/354/vim02-18.png"><img src="http://i.iinfo.cz/images/354/vim02-18-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 18: Projekt v&nbsp;Javě otevřený ve Vimu se zobrazeným přídavným
modulem JavaBrowser.</i></p>

<p>Funkci pro zobrazení okna se stromem si je možné namapovat na libovolnou
klávesovou zkratku, například následující sekvencí příkazů zapsanou do
konfiguračního souboru <strong>.vimrc</strong>:</p>

<pre>
augroup __java__
au!
au BufRead,BufNewFile *.java noremap &lt;F10&gt; :JavaBrowser&lt;CR&gt;
augroup END
</pre>

<p>Přídavné moduly je (většinou) možné vzájemně kombinovat, což například
znamená, že lze mít v&nbsp;jednom okamžiku zobrazený modul <i>NERD Tree</i>
společně s&nbsp;<i>JavaBrowserem</i> &ndash; záleží jen na preferencích
uživatele a velikosti jeho monitoru :-)</p>

<a href="http://i.iinfo.cz/images/354/vim02-19.png"><img src="http://i.iinfo.cz/images/354/vim02-19-prev.png" width="370" height="232" alt=" " /></a>
<p><i>Obrázek 19: Možnosti nastavení barevného schématu JavaBrowseru (o
metodách zvýraznění syntaxe si řekneme podrobnější informace v&nbsp;některém
z&nbsp;dalších pokračování tohoto seriálu).</i></p>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Exuberant ctags<br />
<a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a>
</li>

<li>xxd (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>ctags (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags</a>
</li>

<li>cscope (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Novinky ve VIM 7: Úvodní část - speller<br />
<a href="http://www.root.cz/vim-sedm-prvni-cast/">http://www.root.cz/vim-sedm-prvni-cast/</a>
</li>

<li>Novinky ve VIM 7: Skriptovací jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>vim2elvis: Přednosti a nedostaky Elvise v porovnání s Vimem<br />
<a href="http://www.root.cz/clanky/vim2elvis-1/">http://www.root.cz/clanky/vim2elvis-1/</a>
</li>

<li>vim2elvis: Shodné znaky mezi Elvisem a Vimem, nastavení­editoru<br />
<a href="http://www.root.cz/clanky/vim2elvis-2/">http://www.root.cz/clanky/vim2elvis-2/</a>
</li>

<li>Nej... VIM pluginy (1)<br />
<a href="http://www.root.cz/clanky/nej-vim-pluginy/">http://www.root.cz/clanky/nej-vim-pluginy/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Scroll Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Scroll_lock">http://necyklopedie.wikia.com/wiki/Scroll_lock</a>
</li>

<li>Caps Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Caps_Lock">http://necyklopedie.wikia.com/wiki/Caps_Lock</a>
</li>

<li>Avoid the escape key<br />
<a href="http://vim.wikia.com/wiki/Avoid_the_escape_key">http://vim.wikia.com/wiki/Avoid_the_escape_key</a>
</li>

<li>Map caps lock to escape in XWindows<br />
<a href="http://vim.wikia.com/wiki/VimTip166">http://vim.wikia.com/wiki/VimTip166</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2011</small></p>
</body>
</html>

