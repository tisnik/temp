<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Textový editor Vim jako IDE (17. část - kooperace mezi Vimem a jazykem Perl)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Textový editor Vim jako IDE (17. část - kooperace mezi Vimem a jazykem Perl)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;sedmnácté části seriálu o různých způsobech využití textového editoru Vim dokončíme téma, jímž jsme se začali zabývat již minule - jedná se o kooperaci mezi Vimem a různými skriptovacími jazyky. Minule jsme si popsali rozhraní mezi Vimem a Pythonem, dnes se zaměříme na rozhraní pro programovací jazyk Perl.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Rozhraní mezi textovým editorem Vim a skriptovacími jazyky</a></p>
<p><a href="#k02">2. Kontrola existence rozhraní pro skriptovací jazyky</a></p>
<p><a href="#k03">3. Rozhraní pro podporu psaní skriptů v&nbsp;Perlu</a></p>
<p><a href="#k04">4. Operace prováděné nad vybranými textovými řádky &ndash; příkaz <strong>:perldo</strong></a></p>
<p><a href="#k05">5. Změna obsahu bufferu pomocí příkazu <strong>:perldo</strong> a speciální proměnné <strong>$_</strong></a></p>
<p><a href="#k06">6. Funkce nabízené rozhraním mezi Vimem a Perlem</a></p>
<p><a href="#k07">7. Manipulace s&nbsp;okny a buffery</a></p>
<p><a href="#k08">8. Demonstrační příklady</a></p>
<p><a href="#k09">9. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2>1. Rozhraní mezi textovým editorem Vim a skriptovacími jazyky</h2>

<p>V&nbsp;předchozí části seriálu o různých způsobech využití textového editoru
<i>Vim</i> jsme si řekli základní informace o tom, jakým způsobem může tento
editor komunikovat se skripty napsanými v&nbsp;<a
href="http://www.python.org/">Pythonu</a>. Díky existenci programového rozhraní
mezi <i>Vimem</i> a <i>Pythonem</i> je umožněno, aby měli pythoní skripty
přístup ke všem oknům a bufferům <i>Vimu</i>, mohou měnit pozici kurzoru, mazat
či přidávat nové textové řádky do editovaných bufferů atd. Jedná se o velmi
výkonný mechanismus, který je v&nbsp;mnoha ohledech mocnější, než pouhé
spouštění pythoních skriptů zpracovávajících standardní vstup na standardní
výstup, což je mimochodem technika, kterou podporoval, i když v&nbsp;poněkud
omezené míře, už původní editor <i>vi</i>. Ovšem <i>Vim</i> není omezen pouze
na komunikaci s&nbsp;interpretem programovacího jazyka <i>Python</i>, ale může
být použit společně s&nbsp;několika dalšími skriptovacími jazyky. Jedná se o <a
href="http://www.perl.org/">Perl</a>, <a
href="http://www.ruby-lang.org/en/">Ruby</a>, <a
href="http://www.dmoz.org/Computers/Programming/Languages/Tcl-Tk/">TCL</a> a <a
href="ftp://ftp.cs.utexas.edu/pub/garbage/cs345/schintro-v14/schintro_toc.html">Scheme</a>
(<a href="http://racket-lang.org/">Racket</a>). V&nbsp;následujícím textu se
s&nbsp;rozhraními určenými pro tyto jazyky seznámíme podrobněji.</p>

<p>Připomeňme si, že pro zajištění úspěšné kooperace mezi <i>Vimem</i> a
vybraným skriptovacím jazykem musí být textový editor <i>Vim</i> přeložen a
slinkován takovým způsobem, aby se v&nbsp;jeho binárním (spustitelném) souboru
nacházelo i programové rozhraní pro tento jazyk (taktéž samozřejmě musí být
dostupný i příslušný interpret či překladač vybraného jazyka). Na mnoha
distribucích Linuxu se však stává, že i zdánlivě &bdquo;plnokrevný&ldquo;
binární <i>Vim</i> nainstalovaný například z&nbsp;balíčku nazvaného
<strong>vim-enhanced</strong>, neobsahuje rozhraní pro všechny zmiňované
skriptovací jazyky: většinou se setkáte pouze s&nbsp;podporou <i>Pythonu</i> a
<i>Perlu</i> (což může někomu připadat jako nemístná diskriminace :-). Pokud
dané rozhraní není v&nbsp;binárním balíčku dostupné a jiný balíček pro vaši
distribuci neexistuje, nezbude nic jiného, než si <i>Vim</i> přeložit, což
ovšem většinou stejně není na škodu, protože se již při překladu mohou
odstranit některé (pro mnohé uživatele zbytečné) vlastnosti, například podpora
pro asijské jazyky, psaní zprava doleva, podpora pro kódování <i>EBCDIC</i>
atd. To je však téma, kterým se budeme zabývat někdy příště.</p>



<p><a name="k02"></a></p>
<h2>2. Kontrola existence rozhraní pro skriptovací jazyky</h2>

<p>Před spuštěním demonstračních příkladů uvedených v&nbsp;následujících
kapitolách se prosím přesvědčte, zda rozhraní pro daný skriptovací jazyk
skutečně existuje, například pomocí příkazu <strong>:ver</strong> (podtržení
jednotlivých konfiguračních voleb bylo do výpisu samozřejmě doplněno):</p>

<p><i>Vim</i> ve Fedoře 10 (jde o starý systém uvedený pouze pro ilustraci
obsahu binárních balíčků <i>Vimu</i>):</p>

<pre>
:ver                                                
VIM - Vi IMproved 7.2 (2008 Aug 9, compiled Mar 27 2009 08:42:32)
Included patches: 1-148
Modified by &lt;bugzilla@redhat.com&gt;
Compiled by &lt;bugzilla@redhat.com&gt;
Huge version without GUI.  Features included (+) or not (-):
+arabic +autocmd -balloon_eval -browse ++builtin_terms +byte_offset +cindent
-clientserver -clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments
+cryptv +cscope +cursorshape +dialog_con +diff +digraphs -dnd -ebcdic
+emacs_tags +eval +ex_extra +extra_search +farsi +file_in_path +find_in_path
+float +folding -footer +fork() +gettext -hangul_input +iconv +insert_expand
+jumplist +keymap +langmap +libcall +linebreak +lispindent +listcmds +localmap
+menu +mksession +modify_fname +mouse -mouseshape +mouse_dec +mouse_gpm
-mouse_jsbterm +mouse_netterm -mouse_sysmouse +mouse_xterm +multi_byte
+multi_lang -mzscheme -netbeans_intg -osfiletype +path_extra +perl +postscript
            ^^^^^^^^^                                        ^^^^^
+printer +profile +python +quickfix +reltime +rightleft -ruby +scrollbind
                  ^^^^^^^                               ^^^^^
+signs +smartindent -sniff +statusline -sun_workshop +syntax +tag_binary
+tag_old_static -tag_any_white -tcl +terminfo +termresponse +textobjects +title
                               ^^^^
 -toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo
+vreplace +wildignore +wildmenu +windows +writebackup -X11 -xfontset -xim -xsmp
 -xterm_clipboard -xterm_save
   system vimrc file: "/etc/vimrc"
     user vimrc file: "$HOME/.vimrc"
      user exrc file: "$HOME/.exrc"
  fall-back for $VIM: "/usr/share/vim"
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -g -pipe -Wall -Wp,-D_FO
RTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m32 -ma
rch=i386 -mtune=generic -fasynchronous-unwind-tables -D_GNU_SOURCE -D_FILE_OFFSE
T_BITS=64 -D_FORTIFY_SOURCE=2 -D_FORTIFY_SOURCE=1    -D_REENTRANT -D_GNU_SOURCE
-DDEBUGGING  -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -I/
usr/include/gdbm  -I/usr/lib/perl5/5.10.0/i386-linux-thread-multi/CORE  -I/usr/i
nclude/python2.5 -pthread
Linking: gcc   -Wl,-E -Wl,-rpath,/usr/lib/perl5/5.10.0/i386-linux-thread-multi/C
ORE   -L/usr/local/lib -o vim       -lselinux  -lncurses -lacl -lgpm   -Wl,-E -W
l,-rpath,/usr/lib/perl5/5.10.0/i386-linux-thread-multi/CORE  -L/usr/local/lib  -
L/usr/lib/perl5/5.10.0/i386-linux-thread-multi/CORE -lperl -lresolv -lutil -lc -
L/usr/lib/python2.5/config -lpython2.5 -lutil -lm -Xlinker -export-dynamic
</pre>

<p><i>Vim</i> v&nbsp;Ubuntu 10.04 (povšimněte si rozdílu u podpory
skriptovacích jazyků <i>Ruby</i> a <i>Tcl</i>):</p>

<pre>
:ver               
VIM - Vi IMproved 7.2 (2008 Aug 9, compiled Apr 16 2010 12:36:35)
Použité záplaty: 1-330
přeložil  buildd@
maximální verzewith GTK2 GUI. Vlastnosti zahrnuté (+) a nezahrnuté (-):
+arabic +autocmd +balloon_eval +browse ++builtin_terms +byte_offset +cindent
+clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments
+cryptv +cscope +cursorshape +dialog_con_gui +diff +digraphs +dnd -ebcdic
+emacs_tags +eval +ex_extra +extra_search +farsi +file_in_path +find_in_path
+float +folding -footer +fork() +gettext -hangul_input +iconv +insert_expand
+jumplist +keymap +langmap +libcall +linebreak +lispindent +listcmds +localmap
+menu +mksession +modify_fname +mouse +mouseshape +mouse_dec +mouse_gpm
-mouse_jsbterm +mouse_netterm -mouse_sysmouse +mouse_xterm +multi_byte
+multi_lang -mzscheme +netbeans_intg -osfiletype +path_extra +perl +postscript
            ^^^^^^^^^                                        ^^^^^
+printer +profile +python +quickfix +reltime +rightleft +ruby +scrollbind
                  ^^^^^^^                               ^^^^^
+signs +smartindent -sniff +startuptime +statusline -sun_workshop +syntax
+tag_binary +tag_old_static -tag_any_white +tcl +terminfo +termresponse
                                           ^^^^
+textobjects +title +toolbar +user_commands +vertsplit +virtualedit +visual
+visualextra +viminfo +vreplace +wildignore +wildmenu +windows +writebackup
+X11 -xfontset +xim +xsmp_interact +xterm_clipboard -xterm_save
   systémový vimrc soubor: "$VIM/vimrc"
     uživatelský vimrc soubor: "$HOME/.vimrc"
      uživatelský exrc soubor: "$HOME/.exrc"
  systémový gvimrc soubor: "$VIM/gvimrc"
    uživatelský gvimrc soubor: "$HOME/.gvimrc"
    systémový soubor s menu: "$VIMRUNTIME/menu.vim"
  implicitní hodnota $VIM:"/usr/share/vim"
Překlad: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -D_REENTRANT -pthrea
d -I/usr/include/gtk-2.0 -I/usr/lib/gtk-2.0/include -I/usr/include/atk-1.0 -I/us
r/include/cairo -I/usr/include/pango-1.0 -I/usr/include/gio-unix-2.0/ -I/usr/inc
lude/pixman-1 -I/usr/include/freetype2 -I/usr/include/directfb -I/usr/include/li
bpng12 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include     -Wall -g -O2    -
D_REENTRANT -D_GNU_SOURCE -DDEBIAN  -fstack-protector -I/usr/local/include -D_LA
RGEFILE_SOURCE -D_FILE_OFFSET_BITS=64  -I/usr/lib/perl/5.10/CORE  -I/usr/include
/python2.6 -pthread -I/usr/include/tcl8.4  -D_REENTRANT=1  -D_THREAD_SAFE=1  -D_
LARGEFILE64_SOURCE=1  -I/usr/lib/ruby/1.8/i486-linux
Linkuji: gcc   -L. -Wl,-Bsymbolic-functions -rdynamic -Wl,-export-dynamic  -Wl,-
E  -Wl,--as-needed -o vim   -pthread -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lpan
goft2-1.0 -lgdk_pixbuf-2.0 -lpangocairo-1.0 -lcairo -lgio-2.0 -lpango-1.0 -lfree
type -lfontconfig -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lrt -lglib-2.0   -l
Xt -lncurses -lselinux  -lacl -lgpm -Wl,-E  -fstack-protector -L/usr/local/lib
-L/usr/lib/perl/5.10/CORE -lperl -L/usr/lib/python2.6/config -lpython2.6 -lutil
-Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions -L/usr/lib -ltcl8.4 -l
ieee -lruby1.8 -lrt -lm
</pre>



<p><a name="k03"></a></p>
<h2>3. Rozhraní pro podporu psaní skriptů v&nbsp;Perlu</h2>

<p>Nejprve se budeme zabývat popisem programového rozhraní používaného při
kooperaci mezi textovým editorem <i>Vim</i> a interpretrem známého
skriptovacího programovacího jazyka <i>Perl</i>. Toto rozhraní je sice na první
(zběžný) pohled shodné s&nbsp;rozhraním <i>Pythonu</i>, ve skutečnosti však
můžeme najít i dosti podstatné odlišnosti, které jsou způsobené jak rozdílnou
syntaxí a sémantikou obou skriptovacích jazyků, tak i rozdílnými názvy objektů
reprezentujících interní datové struktury <i>Vimu</i> (obě rozhraní byla
evidentně vyvíjena nezávisle na sobě). Zopakujme si nejdříve, že programový
test na to, zda je vůbec možné nějaký skript v&nbsp;<i>Perlu</i> spustit,
vypadá následovně:</p>

<pre>
:if has("Perl")
:    echo "Spouštím skript v Perlu..."
:    ....
:    ....
:    ....
:else
:    echo "Chyba, podpora pro Perl není implementována"
:endif
</pre>

<p>Pokud je podpora pro <i>Perl</i> součástí textového editoru <i>Vim</i>, lze
použít pro spuštění perlovského skriptu příkaz <strong>:perl</strong>
zkracovaný též na <strong>:pe</strong>:</p>

<pre>
:perl VIM::Msg(6*7);
42
</pre>

<pre>
:pe VIM::Msg(6*7);
42
</pre>

<p><ins>Poznámka: při práci s&nbsp;perlovskými skripty spouštěnými přes
rozhraní přímo z&nbsp;<i>Vimu</i> odpovídá volání <strong>VIM::Msg()</strong>
v&nbsp;<i>Perlu</i> volání <strong>print()</strong> v&nbsp;<i>Pythonu</i>. Jde
o jeden z&nbsp;rozdílů mezi oběma programovými rozhraními, na které je nutné
si dát pozor, protože v&nbsp;případě <i>Perlu</i> nebude příkaz:</ins></p>

<pre>
:perl print(6*7);
</pre>

<p><ins>fungovat korektně, na rozdíl od použití stejného příkazu
v&nbsp;klasickém skriptu spouštěném přímo z&nbsp;interpretru pracujícího
v&nbsp;příkazové řádce.</ins></p>

<p>Mnohem častěji se však při práci s&nbsp;perlovými skripty používá upravená
varianta příkazu <strong>:perl</strong></strong> se specifikací ukončujícího
vzoru, která se podobá <i>here dokumentům</i>:</p>

<pre>
:perl &lt;&lt; vzor
příkaz
příkaz
vzor
</pre>

<p>Uveďme si jednoduchý příklad:</p>

<pre>
:perl &lt;&lt; EOF
for ($i = 0; $i &lt; 10; $i++) {
    VIM::Msg($i);
}
EOF
</pre>

<p>V&nbsp;případě, že ukončující vzor (viz výše použitý
<strong>EOF</strong></strong>) není uveden, předpokládá se, že je roven tečce,
která musí být na konci skriptu uvedena na samostatném řádku (podobně jako při
používání programu <strong>mail</strong>):</p>

<pre>
:perl &lt;&lt;
for ($i = 0; $i &lt; 10; $i++) {
    VIM::Msg($i);
}
.
</pre>

<p>Můžeme si vyzkoušet i složitější výpočet:</p>

<pre>
:perl &lt;lt;
sub factorial {
    my $result = 1;
    $result *= $_ for 1..shift;
    $result
}

VIM::Msg(factorial(42));
.
</pre>

<p><ins>Poznámka: zkuste si předchozí příklad (celý!) uložit do souboru
<strong>test.vim</strong> a následně použít příkaz:</ins></p>

<pre>
:source test.vim
</pre>



<p><a name="k04"></a></p>
<h2>4. Operace prováděné nad vybranými textovými řádky &ndash; příkaz <strong>:perldo</strong></h2>

<p>V&nbsp;případě rozhraní pro programovací jazyk <i>Perl</i> sice není
k&nbsp;dispozici příkaz pro spuštění skriptu uloženého v&nbsp;samostatném
souboru (což je možné relativně snadno obejít prostředky samotného
<i>Perlu</i>), ovšem uživatelé mají k&nbsp;dispozici mnohem zajímavější příkaz,
který se jmenuje <strong>:perldo</strong> a lze ho zkrátit na
<strong>:perld</strong>:</p>

<pre>
:perldo příkaz_v_Perlu
</pre>

<p>Před tímto příkazem může být uveden rozsah řádků, podobně jako u běžných
vimovských příkazů typu <strong>:w</strong> apod. V&nbsp;případě, že rozsah
není uveden, uvažuje se, že je vybrán celý buffer, tj.&nbsp;implicitně se
použije rozsah <strong>%</strong> nebo <strong>1,$</strong>. Za
<strong>:perldo</strong> se uvádí libovolný perlovský příkaz, který je
automaticky a postupně (iterativně) spuštěn pro všechny řádky v&nbsp;aktivním
bufferu. Jinými slovy to znamená, že pokud není explicitně uveden rozsah
platnosti, je perlovský příkaz v&nbsp;implicitní programové smyčce aplikován na
každý textový řádek, jenž se nachází v&nbsp;aktivním bufferu, počínaje prvním
řádkem. Obsah tohoto řádku je vždy umístěn do proměnné <strong>$_</strong>,
kterou je možné v&nbsp;perlovském příkazu číst (jak jistě víte, může být tato
speciální proměnná použita v&nbsp;některých příkazech implicitně, bez jejího
zápisu do programu). Ukažme si pro začátek něco jednoduchého &ndash; výpis
všech řádků obsažených v&nbsp;aktivním bufferu (středník za příkazem není
povinný):</p>

<pre>
:perldo VIM::Msg($_)
</pre>

<p>Poněkud praktičtější demonstrační příklad postupně vypíše délky všech
textových řádků, které se nachází v&nbsp;aktivním bufferu:</p>

<pre>
:perldo VIM::Msg(length $_)
</pre>



<p><a name="k05"></a></p>
<h2>5. Změna obsahu bufferu pomocí příkazu <strong>:perldo</strong> a speciální proměnné <strong>$_</strong></h2>

<p>Důležitější a mnohem užitečnější však je, že obsah proměnné
<strong>$_</strong> je možné i měnit, což znamená, že perlovský příkaz může
modifikovat aktivní buffer. Opět si tuto funkcionalitu ukažme na velmi
jednoduchých příkladech.</p>

<p>Změna všech písmen v&nbsp;bufferu na verzálky:</p>

<pre>
:perldo $_=uc $_
</pre>

<p>Výše uvedený příklad lze ovšem zkrátit, protože pro <strong>uc</strong> je
možné použít implicitní proměnnou:</p>

<pre>
:perldo $_=uc
</pre>

<p>Převod všech písmen na mínusky:</p>

<pre>
:perldo $_=lc $_
</pre>

<p>Převod na verzálky pro prvních deset řádků:</p>

<pre>
:1,10perldo $_=uc $_
</pre>

<p>Otočení textu od řádku 10 až do konce souboru:</p>

<pre>
:10,$perldo $_=reverse $_
</pre>

<p>Zašifrování obsahu bufferu pomocí známé šifry <a
href="http://cs.wikipedia.org/wiki/ROT13">ROT13</a> (druhé spuštění tohoto
příkazu provede zpětné rozšifrování):</p>

<pre>
:perldo $_=~tr/A-Za-z/N-ZA-Mn-za-m/
</pre>

<p><ins>Poznámka: i když je možné pomocí <strong>:perldo</strong> měnit obsah
všech řádků v&nbsp;aktivním bufferu, nelze s&nbsp;jeho využitím textové řádky
do bufferu přidávat ani je mazat. Pro takovou činnost je nutné použít techniky
popsané v&nbsp;dalším textu.</ins>P</p>



<p><a name="k06"></a></p>
<h2>6. Funkce nabízené rozhraním mezi Vimem a Perlem</h2>

<p>Jak jsme si již řekli v&nbsp;závěru předchozí kapitoly, je i přes značnou
jednoduchost použití příkazu <strong>:perldo</strong> nemožné s&nbsp;jeho
využitím měnit počet řádků v&nbsp;aktivním bufferu, tj.&nbsp;řádky nelze mazat,
přidávat ani měnit jejich pořadí. Nicméně rozhraní mezi <i>Vimem</i> a
<i>Perlem</i> nabízí programátorům přes modul <strong>VIM</strong> několik
funkcí, pomocí nichž je možné obsah bufferů modifikovat přímo,
popř.&nbsp;provádět i další zajímavé operace, například pohybovat textovým
kurzorem, spouštět z&nbsp;Perlu libovolný příkaz Vimu atd. V&nbsp;následující
tabulce jsou tyto funkce vypsány spolu s&nbsp;informací o návratové hodnotě.
Jak je v&nbsp;Perlu zvykem, mohou být výsledky některých funkcí zpracovány
v&nbsp;kontextu polí nebo ve skalárním kontextu (pak se vrací velikost pole,
v&nbsp;našem případě počet otevřených bufferů nebo počet otevřených oken):</p>

<table>
<tr><th>#</th><th>Funkce          </th><th>Návratová hodnota</th><th>Význam</th></tr>
<tr><td>1</td><td>VIM::Msg()      </td><td>&times;</td><td>tuto funkci již známe; slouží k&nbsp;výpisu řetězce na obrazovku Vimu</td></tr>
<tr><td>2</td><td>VIM::Buffers()  </td><td>pole/skalár</td><td>vrací seznam otevřených bufferů nebo počet těchto bufferů</td></tr>
<tr><td>3</td><td>VIM::Windows()  </td><td>pole/skalár</td><td>vrací seznam otevřených oken nebo počet těchto oken</td></tr>
<tr><td>4</td><td>VIM::DoCommand()</td><td>různé</td><td>může spustit libovolný příkaz Vimu, jakoby byl napsán v&nbsp;příkazovém režimu (pozor - nikoli v&nbsp;normálním režimu!)</td></tr>
<tr><td>5</td><td>VIM::Eval()     </td><td>dvojice kód:hodnota</td><td>vyhodnotí výraz Vimu a vrátí dvojici obsahující příznak úspěšnosti (1) a výsledek výrazu</td></tr>
<tr><td>6</td><td>VIM::SetOption()</td><td>&times;</td><td>umožňuje nastavit konfigurační parametr Vimu</td></tr>
</table>



<p><a name="k07"></a></p>
<h2>7. Manipulace s&nbsp;okny a buffery</h2>

<p>Seznam všech otevřených oken je možné v&nbsp;<i>Perlu</i> získat pomocí
funkce <strong>VIM::Windows()</strong>. Poměrně často se však můžeme setkat
s&nbsp;požadavkem na práci pouze s&nbsp;aktivním oknem. V&nbsp;tomto případě je
lepší využít proměnnou <strong>$curwin</strong>, která je automaticky
inicializována před spuštěním perlovského skriptu. Nezávisle na tom, jakým
způsobem je hodnota představující okno získána, lze použít následující
metody:</p>

<table>
<tr><th>#</th><th>Funkce/proměnná</th><th>Význam</th></tr>
<tr><td>1</td><td>Window-&gt;SetHeigt(height)</td><td>změna výšky okna uváděná ve znacích</td></tr>
<tr><td>2</td><td>Window-&gt;Cursor()</td><td>vrací pozici textového kurzoru v&nbsp;okně (jako dvojici)</td></tr>
<tr><td>3</td><td>Window-&gt;Cursor(row, col)</td><td>nastavení pozice textového kurzoru v&nbsp;okně</td></tr>
<tr><td>4</td><td>Window-&gt;Buffer()</td><td>vrací objekt představující buffer editovaný v&nbsp;okně</td></tr>
</table>

<p>Při psaní skriptů, které mají mít nějaké praktické uplatnění, se velmi často
manipuluje s&nbsp;bufferem či buffery, typicky s&nbsp;aktivním bufferem. Objekt
představující aktivní buffer lze získat buď poněkud krkolomnou cestou:</p>

<pre>
$curwin-&gt;Buffer()
</pre>

<p>nebo mnohem snadněji s&nbsp;využitím proměnné <strong>$curbuf</strong>,
jejíž hodnota je nastavována při inicializaci skriptu, podobně jako je tomu u
výše zmíněné proměnné <strong>$curwin</strong>. V&nbsp;následující tabulce jsou
vypsány všechny metody použitelné při práci s&nbsp;buffery:</p>

<table>
<tr><th>#</th><th>Funkce/proměnná</th><th>Význam</th></tr>
<tr><td>1</td><td>Buffer-&gt;Name()</td><td>jméno editovaného souboru</td></tr>
<tr><td>2</td><td>Buffer-&gt;Number()</td><td>číslo bufferu</td></tr>
<tr><td>3</td><td>Buffer-&gt;Count()</td><td>celkový počet textových řádků v&nbsp;bufferu</td></tr>
<tr><td>4</td><td>Buffer-&gt;Get(lnum)</td><td>vrací jednu textovou řádku jako řetězec (čísluje se od jedničky!)</td></tr>
<tr><td>5</td><td>Buffer-&gt;Get(lnum1, lnum2,...)</td><td>lze specifikovat i více řádků, které se mají přečíst</td></tr>
<tr><td>6</td><td>Buffer-&gt;Delete(lnum)</td><td>smazání řádku (čísluje se od jedničky!)</td></tr>
<tr><td>7</td><td>Buffer-&gt;Delete(od, do)</td><td>smazání sekvence řádků</td></tr>
<tr><td>8</td><td>Buffer-&gt;Append(lnum, line)</td><td>za specifikovaný řádek se přidá nový text</td></tr>
<tr><td>9</td><td>Buffer-&gt;Set(lnum, line)</td><td>změna textu na řádku</td></tr>
</table>



<p><a name="k08"></a></p>
<h2>8. Demonstrační příklady</h2>

<p>Na závěr si uvedeme několik skriptů, které ukazují, jak lze využít kooperaci
mezi <i>Vimem</i> a <i>Perlem</i>.</p>

<p>Vypsání počtu otevřených bufferů:</p>

<pre>
:perl VIM::Msg(VIM::Buffers)
</pre>

<p>Vypsání počtu otevřených oken:</p>

<pre>
:perl VIM::Msg(VIM::Windows)
</pre>

<p>Nastavení konfiguračního parametru <strong>expandtab</strong>:</p>

<pre>
:perl VIM::SetOption("expandtab")
</pre>

<p>Nastavení konfiguračního parametru <strong>textwidth</strong> na nulovou
hodnotu:</p>

<pre>
:perl VIM::SetOption("textwidth=0")
</pre>

<p>Uložení souboru, zde se ve skutečnosti zavolá příkaz
<strong>:w</strong>:</p>

<pre>
:perl VIM::DoCommand("w")
</pre>

<p>Smazání řádku, ve skutečnosti se vykoná příkaz <strong>dd</strong>:</p>

<pre>
:perl VIM::DoCommand("normal dd")
</pre>

<p>Nastavení kurzoru na pozici [1,1]:</p>

<pre>
:perl $curwin-&gt;Cursor(1,1)
</pre>

<p>Výpis jména editovaného souboru (krkolomná cesta):</p>

<pre>
:perl VIM::Msg($curwin-&gt;Buffer()-&gt;Name())
</pre>

<p>Výpis jména editovaného souboru (kratší cesta):</p>

<pre>
:perl VIM::Msg($curbuf-&gt;Name())
</pre>

<p>Přidání nového řádku na začátek souboru:</p>

<pre>
:perl VIM::Msg($curwin-&gt;Buffer()-&gt;Append(0,"hello"))
</pre>

<p>Výpis prvního řádku:</p>

<pre>
:perl VIM::Msg($curwin-&gt;Buffer()-&gt;Get(1))
</pre>

<p>Na začátek každého řádku se přidá dvojice číslic: číslo řádku a počet znaků na řádku:</p>

<pre>
:perl &lt;&lt;
$lines=$curwin-&gt;Buffer()-&gt;Count;
for ($i=0; $i&lt;$lines; $i++) {
    $line=$curwin-&gt;Buffer()-&gt;Get($i);
    $length=length $line;
    $curwin-&gt;Buffer-&gt;Set($i, $i . " : " . $length . " : " . $line);
}
.
</pre>



<p><a name="k09"></a></p>
<h2>9. Odkazy na Internetu</h2>

<ol>

<li>Vim Perl Interface<br />
<a href="http://vim.dindinx.net/vim7/html/if_perl.txt.php">http://vim.dindinx.net/vim7/html/if_perl.txt.php</a>
</li>

<li>Vim Perl Support<br />
<a href="http://www.softpanorama.org/Editors/Vimorama/vim_perl_support.shtml">http://www.softpanorama.org/Editors/Vimorama/vim_perl_support.shtml</a>
</li>

<li>VIM as Python IDE<br />
<a href="http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/">http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/</a>
</li>

<li>Stack Overflow: VIM: Perl interfaceStack Overflow:ssing a variable to Perl and reading a vim variable from Perl<br />
<a href="http://stackoverflow.com/questions/4999902/vim-perl-interface-passing-a-variable-to-perl-and-reading-a-vim-variable-from">http://stackoverflow.com/questions/4999902/vim-perl-interface-passing-a-variable-to-perl-and-reading-a-vim-variable-from</a>
</li>

<li>Stack Overflow: Getting started with vim scripting with Perl<br />
<a href="http://stackoverflow.com/questions/2208618/getting-started-with-vim-scripting-with-perl">http://stackoverflow.com/questions/2208618/getting-started-with-vim-scripting-with-perl</a>
</li>

<li>Perl: home page<br />
<a href="http://www.perl.org/">http://www.perl.org/</a>
</li>

<li>Python: home page<br />
<a href="http://www.python.org/">http://www.python.org/</a>
</li>

<li>Ruby: home page<br />
<a href="http://www.ruby-lang.org/en/">http://www.ruby-lang.org/en/</a>
</li>

<li>Tcl/Tk<br />
<a href="http://www.dmoz.org/Computers/Programming/Languages/Tcl-Tk/">http://www.dmoz.org/Computers/Programming/Languages/Tcl-Tk/</a>
</li>

<li>Python with a modular IDE (Vim)<br />
<a href="http://www.sontek.net/python-with-a-modular-ide-vim">http://www.sontek.net/python-with-a-modular-ide-vim</a>
</li>

<li>PEP 8 &ndash; Style Guide for Python Code<br />
<a href="http://www.python.org/dev/peps/pep-0008/">http://www.python.org/dev/peps/pep-0008/</a>
</li>

<li>pydoc.vim: Python documentation view- and search-tool (uses pydoc)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=910">http://www.vim.org/scripts/script.php?script_id=910</a>
</li>

<li>Getting to VIM's Python interface<br />
<a href="http://zerokspot.com/weblog/2009/02/21/getting-to-know-vims-python-interface/">http://zerokspot.com/weblog/2009/02/21/getting-to-know-vims-python-interface/</a>
</li>

<li>Pretty-formatting XML<br />
<a href="http://vim.wikia.com/wiki/Pretty-formatting_XML">http://vim.wikia.com/wiki/Pretty-formatting_XML</a>
</li>

<li>Delete a pair of XML/HTML tags<br />
<a href="http://vim.wikia.com/wiki/Delete_a_pair_of_XML/HTML_tags">http://vim.wikia.com/wiki/Delete_a_pair_of_XML/HTML_tags</a>
</li>

<li>Vim as XML Editor<br />
<a href="http://www.pinkjuice.com/howto/vimxml/">http://www.pinkjuice.com/howto/vimxml/</a>
</li>

<li>xmledit: A filetype plugin to help edit XML, HTML, and SGML documents<br />
<a href="http://www.vim.org/scripts/script.php?script_id=301">http://www.vim.org/scripts/script.php?script_id=301</a>
</li>

<li>Poslední vývojová verze makra xmledit<br />
<a href="http://github.com/sukima/xmledit/">http://github.com/sukima/xmledit/</a>
</li>

<li>vim.wikia: Display date-and-time on status line<br />
<a href="http://vim.wikia.com/wiki/Display_date-and-time_on_status_line">http://vim.wikia.com/wiki/Display_date-and-time_on_status_line</a>
</li>

<li>vim.wikia: Writing a valid statusline<br />
<a href="http://vim.wikia.com/wiki/Writing_a_valid_statusline">http://vim.wikia.com/wiki/Writing_a_valid_statusline</a>
</li>

<li>vim.wikia: Statusline tab level ruler<br />
<a href="http://vim.wikia.com/wiki/Statusline_tab_level_ruler">http://vim.wikia.com/wiki/Statusline_tab_level_ruler</a>
</li>

<li>vim.wikia: Switching between different statuslines<br />
<a href="http://vim.wikia.com/wiki/Switching_between_different_statuslines">http://vim.wikia.com/wiki/Switching_between_different_statuslines</a>
</li>

<li>X Selections, Cut Buffers, and Kill Rings<br />
<a href="http://www.jwz.org/doc/x-cut-and-paste.html">http://www.jwz.org/doc/x-cut-and-paste.html</a>
</li>

<li>Accessing the system clipboard<br />
<a href="http://vim.wikia.com/wiki/Accessing_the_system_clipboard">http://vim.wikia.com/wiki/Accessing_the_system_clipboard</a>
</li>

<li>xcutsel(1) - Linux man page<br />
<a href="http://linux.die.net/man/1/xcutsel">http://linux.die.net/man/1/xcutsel</a>
</li>

<li>snipMate : TextMate-style snippets for Vim<br />
<a href="http://www.vim.org/scripts/script.php?script_id=2540">http://www.vim.org/scripts/script.php?script_id=2540</a>
</li>

<li>msanders / snipmate.vim<br />
<a href="https://github.com/msanders/snipmate.vim">https://github.com/msanders/snipmate.vim</a>
</li>

<li>snipMate.vim Introductory Screencast<br />
<a href="http://vimeo.com/3535418">http://vimeo.com/3535418</a>
</li>

<li>Clewn home page<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>How to connect vim with gdb - using clewn<br />
<a href="http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn">http://chunhao.net/blog/how-to-connect-vim-with-gdb-using-clewn</a>
</li>

<li>yavdb : Yet Another (Generic) Vim Debugger Integration<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1954">http://www.vim.org/scripts/script.php?script_id=1954</a>
</li>

<li>Vim home page<br />
<a href="http://www.vim.org/">http://www.vim.org/</a>
</li>

<li>Exuberant ctags<br />
<a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a>
</li>

<li>xxd (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=xxd</a>
</li>

<li>vim (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=vim</a>
</li>

<li>ctags (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=ctags</a>
</li>

<li>cscope (man page)<br />
<a href="http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope">http://www.linux-tutorial.info/modules.php?name=ManPage&sec=1&manpage=cscope</a>
</li>

<li>Tutorial: Make Vim as Your C/C++ IDE Using c.vim Plugin<br />
<a href="http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/">http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/</a>
</li>

<li>c.vim : C/C++ IDE<br />
<a href="http://vim.sourceforge.net/scripts/script.php?script_id=213">http://vim.sourceforge.net/scripts/script.php?script_id=213</a>
</li>

<li>c.vim : C/C++ IDE key mappings<br />
<a href="http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf">http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf</a>
</li>

<li>Základní základy editoru Vim<br />
<a href="http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/">http://www.root.cz/clanky/zakladni-zaklady-editoru-vim/</a>
</li>

<li>Jak si přizpůsobit Vim<br />
<a href="http://www.root.cz/serialy/jak-si-prizpusobit-vim/">http://www.root.cz/serialy/jak-si-prizpusobit-vim/</a>
</li>

<li>Novinky ve VIM 7: Úvodní část - speller<br />
<a href="http://www.root.cz/vim-sedm-prvni-cast/">http://www.root.cz/vim-sedm-prvni-cast/</a>
</li>

<li>Novinky ve VIM 7: Skriptovací jazyk<br />
<a href="http://www.root.cz/vim-sedm-druha-cast/">http://www.root.cz/vim-sedm-druha-cast/</a>
</li>

<li>vim2elvis: Přednosti a nedostaky Elvise v porovnání s Vimem<br />
<a href="http://www.root.cz/clanky/vim2elvis-1/">http://www.root.cz/clanky/vim2elvis-1/</a>
</li>

<li>vim2elvis: Shodné znaky mezi Elvisem a Vimem, nastavení­editoru<br />
<a href="http://www.root.cz/clanky/vim2elvis-2/">http://www.root.cz/clanky/vim2elvis-2/</a>
</li>

<li>Nej... VIM pluginy (1)<br />
<a href="http://www.root.cz/clanky/nej-vim-pluginy/">http://www.root.cz/clanky/nej-vim-pluginy/</a>
</li>

<li>Taglist (plugin)<br />
<a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a>
</li>

<li>The NERD tree: A tree explorer plugin for navigating the filesystem<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1658">http://www.vim.org/scripts/script.php?script_id=1658</a>
</li>

<li>JavaBrowser : Shows java file class, package in a tree as in IDEs. Java source browser.<br />
<a href="http://www.vim.org/scripts/script.php?script_id=588">http://www.vim.org/scripts/script.php?script_id=588</a>
</li>

<li>snippetsEmu : An attempt to emulate TextMate's snippet expansion<br />
<a href="http://www.vim.org/scripts/script.php?script_id=1318">http://www.vim.org/scripts/script.php?script_id=1318</a>
</li>

<li>Scroll Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Scroll_lock">http://necyklopedie.wikia.com/wiki/Scroll_lock</a>
</li>

<li>Caps Lock (Necyklopedie)<br />
<a href="http://necyklopedie.wikia.com/wiki/Caps_Lock">http://necyklopedie.wikia.com/wiki/Caps_Lock</a>
</li>

<li>Avoid the escape key<br />
<a href="http://vim.wikia.com/wiki/Avoid_the_escape_key">http://vim.wikia.com/wiki/Avoid_the_escape_key</a>
</li>

<li>Map caps lock to escape in XWindows<br />
<a href="http://vim.wikia.com/wiki/VimTip166">http://vim.wikia.com/wiki/VimTip166</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2011</small></p>
</body>
</html>

