<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Jazyk QML (Qt Modeling Language) a PySide 2</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Jazyk QML (Qt Modeling Language) a PySide 2</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešní části seriálu o tvorbě aplikací s grafickým uživatelským rozhraním v Pythonu s využitím frameworku PySide si ukážeme další možnosti jazyka QML. Oproti předchozí části se však zaměříme na PySide2, Qt 5 a tím pádem i na novější verzi QML.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Jazyk QML (Qt Modeling Language) a PySide 2</a></p>
<p><a href="#k02">*** 2. Porovnání rozdílů mezi PySide a PySide2 při práci s&nbsp;QML</a></p>
<p><a href="#k03">*** 3. Vizuální porovnání rozdílů mezi skripty psanými v&nbsp;Pythonu</a></p>
<p><a href="#k04">*** 4. Přechod od QtQuick 1.0 ke QtQuick 2.0</a></p>
<p><a href="#k05">*** 5. Vizuální porovnání rozdílů mezi oběma QML soubory</a></p>
<p><a href="#k06">*** 6. Univerzální modul určený pro načtení a zobrazení QML aplikace</a></p>
<p><a href="#k07">*** 7. Příklad použití modulu popsaného v&nbsp;předchozí kapitole</a></p>
<p><a href="#k08">*** 8. Kotevní přímky a jejich vliv na umístění a rozměry prvků</a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Jazyk QML (Qt Modeling Language) a PySide 2</h2>

<p><a
href="https://www.root.cz/clanky/jazyk-qml-qt-modeling-language-a-pyside/">V&nbsp;předchozím
článku</a> jsme se seznámili se základními vlastnostmi jazyka QML, nad nímž je
postavena technologie <a href="http://wiki.qt.io/Qt_Quick_Tutorial">Qt
Quick</a>. Ovšem prozatím jsme se zabývali pouze tou variantou QML, který je
součástí Qt Quick 1.0, tj.&nbsp;starší verze použité v&nbsp;Qt 4.8.7. To je
sice stále používaná verze Qt, ovšem oficiálně již není více než dva roky
podporovaná, takže je poněkud problematické nad ní stavět novější aplikace.
Novější QtQuick 2.x již vyžaduje Qt 5 (a to konkrétně verze <a
href="http://wiki.qt.io/Qt_5.9_Release">5.9</a>, <a
href="http://wiki.qt.io/Qt_5.10_Release">5.10</a> či <a
href="http://wiki.qt.io/Qt_5.11_Release">5.11</a>) a tím pádem i PySide 2. Mezi
oběma variantami existuje několik rozdílů a z&nbsp;tohoto důvodu si dnes
ukážeme několik příkladů postavených nad PySide 2 a Qt Quick 2.0.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Porovnání rozdílů mezi PySide a PySide2 při práci s&nbsp;QML</h2>

<p>Nejprve se podívejme, jaké základní rozdíly nalezneme mezi PySide a PySide2
u kódu (skriptu), který vlastně provádí jen jedinou činnost &ndash; vytvoření
hlavního okna aplikace, načtení QML a následného vykreslení grafického
uživatelského rozhraní do tohoto okna na základě obsahu QML. V&nbsp;PySide 1
celý kód vypadal následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide import QtCore
from PySide import QtGui
&nbsp;
<i># modul pro práci s QML</i>
from PySide import QtDeclarative
&nbsp;
QML_FILE = "173_load_qml_9.qml"
&nbsp;
&nbsp;
<i># nový widget bude odvozen od QDeclarativeView</i>
class <strong>MainWindow</strong>(QtDeclarative.QDeclarativeView):
&nbsp;
    def <strong>__init__</strong>(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.setWindowTitle("QML Example")
        <i># načtení souboru QML</i>
        self.setSource(QtCore.QUrl.fromLocalFile(QML_FILE))
        <i># necháme QML změnit velikost okna</i>
        self.setResizeMode(QtDeclarative.QDeclarativeView.SizeRootObjectToView)
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření Qt aplikace</i>
    app = QtGui.QApplication(sys.argv)
&nbsp;
    <i># vytvoření hlavního okna</i>
    window = MainWindow()
&nbsp;
    <i># zobrazení hlavního okna</i>
    window.show()
&nbsp;
    <i># spuštění aplikace</i>
    sys.exit(app.exec_())
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

<p>Vidíme, že třída hlavního okna je odvozena od
<strong>QtDeclarative.QDeclarativeView</strong>. V&nbsp;případě PySide2 je
ovšem situace odlišná, neboť hlavní okno se v&nbsp;tomto případě odvozí od
třídy <strong>QtQuick.QQuickView</strong>. Také se bude odlišovat způsob
nastavení titulku hlavního okna, neboť se namísto metody
<strong>setWindowTitle()</strong> použije <strong>setTitle()</strong> (odlišné
jsou i další metody, s&nbsp;nimi se však prozatím nesetkáme):</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide2 import QtCore
from PySide2 import QtGui
&nbsp;
<i># modul pro práci s QML</i>
from PySide2 import QtQuick
&nbsp;
QML_FILE = "01.qml"
&nbsp;
&nbsp;
<i># nový widget bude odvozen od QDeclarativeView</i>
class <strong>MainWindow</strong>(QtQuick.QQuickView):
&nbsp;
    def <strong>__init__</strong>(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.setTitle("QML Example @ PySide2")
        <i># načtení souboru QML</i>
        self.setSource(QtCore.QUrl.fromLocalFile(QML_FILE))
        <i># necháme QML změnit velikost okna</i>
        self.setResizeMode(QtQuick.QQuickView.SizeRootObjectToView)
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření Qt aplikace</i>
    app = QtGui.QGuiApplication(sys.argv)
&nbsp;
    <i># vytvoření hlavního okna</i>
    window = MainWindow()
&nbsp;
    <i># zobrazení hlavního okna</i>
    window.show()
&nbsp;
    <i># spuštění aplikace</i>
    sys.exit(app.exec_())
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vizuální porovnání rozdílů mezi skripty psanými v&nbsp;Pythonu</h2>

<p>Pro lepší přehled rozdílů mezi PySide 1 a PySide 2 je na screenshotu
zobrazeném pod tímto odstavcem ukázáno, jak se oba skripty uvedené <a
href="#k03">v&nbsp;předchozí kapitole</a> odlišují. I přes snahu o to, aby si
oba zdrojové kódy byly co nejpodobnější, vidíme, že se odlišují použité třídy a
tím pádem i jejich metody, které jsou volány:</p>

*** image ***
<p><i>Obrázek 1: Vizuální porovnání rozdílu mezi skriptem napsaným pro PySide 1
a skriptem pro PySide 2.</i></p>

<p>Následují odkazy na dokumentaci k&nbsp;jednotlivým třídám, které se
v&nbsp;PySide 1 a PySide 2 odlišují:</p>

<table>
<tr><th>Třída/metoda</th><th>PySide 1</th><th>PySide 2</th></tr>
<tr><td>hlavní aplikace</td><td><a href="https://pyside.github.io/docs/pyside/PySide/QtGui/QApplication.html">QtGui.QApplication</a></td><td><a href="https://doc-snapshots.qt.io/qtforpython/PySide2/QtGui/QGuiApplication.html">QtGui.QGuiApplication</a></td></tr>
<tr><td>předek okna</td><td><a href="https://pyside.github.io/docs/pyside/PySide/QtDeclarative/QDeclarativeView.html">QtDeclarative.QDeclarativeView</a></td><td><a href="https://doc-snapshots.qt.io/qtforpython/PySide2/QtQuick/QQuickView.html">QtQuick.QQuickView</a></td></tr>
<tr><td>titulek okna</td><td>setWindowTitle</td><td>setTitle</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: odlišnost mezi oběma verze PySide je
způsobena tím, že se vlastně jedná o relativně tenké rozhraní mezi
programovacím jazykem Python a nativní knihovnou Qt. Rozdíly jsou tedy
způsobeny (nekompatibilními) změnami provedenými v&nbsp;samotném Qt, které se
PySide nesnaží nijak maskovat.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Přechod od QtQuick 1.0 ke QtQuick 2.0</h2>

<p>O změnách, které musely být provedeny ve skriptech naprogramovaných
v&nbsp;Pythonu, jsme se již zmínili, takže si nyní ukažme, jaké změny je nutné
udělat v&nbsp;samotných QML souborech s&nbsp;popisem grafického uživatelského
rozhraní. Prozatím zůstaneme u velmi jednoduchého (až primitivního) příkladu,
v&nbsp;němž jsou na plochu okna umístěny tři různobarevné čtverce, u kterých je
pro větší efekt nastavena průhlednost a jeden čtverec je otočen:</p>

*** image ***
<p><i>Obrázek 2: Okno s&nbsp;jednoduchým GUI.</i></p>

<p>První varianta je určena pro QtQuick 1.0 a tudíž pro PySide 1:</p>

<pre>
import QtQuick 1.0
&nbsp;
<strong>Rectangle</strong> {
    id: main
    width: 320
    height: 240
    color: "lightgray"
&nbsp;
    <strong>Rectangle</strong> {
        id: r1
        width: 160
        height: 160
        color: "red"
        opacity: 0.5
        rotation: 45
        anchors.left: parent.left
        anchors.bottom: parent.bottom
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r2
        width: 160
        height: 160
        color: "yellow"
        opacity: 0.5
        z: 1
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: parent.top
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r3
        width: 160
        height: 160
        color: "blue"
        opacity: 0.5
        rotation: 45
        anchors.right: parent.right
        anchors.bottom: parent.bottom
    }
}
</pre>

<p>Druhá varianta je určena pro QtQuick 2.0 a tudíž pro PySide 2:</p>

<pre>
import QtQuick 2.0
&nbsp;
<strong>Rectangle</strong> {
    id: main
    width: 320
    height: 240
    color: "lightgray"
&nbsp;
    <strong>Rectangle</strong> {
        id: r1
        width: 160
        height: 160
        color: "red"
        opacity: 0.5
        rotation: 45
        anchors.left: parent.left
        anchors.bottom: parent.bottom
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r2
        width: 160
        height: 160
        color: "yellow"
        opacity: 0.5
        z: 1
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: parent.top
    }
&nbsp;
    <strong>Rectangle</strong> {
        id: r3
        width: 160
        height: 160
        color: "blue"
        opacity: 0.5
        rotation: 45
        anchors.right: parent.right
        anchors.bottom: parent.bottom
    }
}
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vizuální porovnání rozdílů mezi oběma QML soubory</h2>

<p>Zatímco mezi skripty napsanými pro knihovnu PySide 1 a PySide 2 bylo <a
href="#k03">relativně velké množství rozdílů</a> (nebyla dodržena zpětná
kompatibilita), je tomu u QML souborů jinak, alespoň v&nbsp;našem jednoduchém
příkladu grafického uživatelského rozhraní s&nbsp;trojicí čtverců. Ostatně se
můžeme podívat na následující screenshot zobrazující všechny rozdíly. Ty
nastaly na jediném řádku, ovšem je zapotřebí poznamenat, že se skutečně jedná o
primitivní příklad a v&nbsp;praxi (reálná GUI) tomu bude jinak:</p>

*** image ***
<p><i>Obrázek 3: Vizuální porovnání rozdílu mezi QML napsaným pro QtQuick 1.0 a
QML pro QtQuick 2.0.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Univerzální modul určený pro načtení a zobrazení QML aplikace</h2>

<pre>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i># univerzální prohlížeč QML souborů</i>
&nbsp;
import sys
&nbsp;
<i># import "jádra" frameworku Qt i modulu pro GUI</i>
from PySide2 import QtCore
from PySide2 import QtGui
&nbsp;
<i># modul pro práci s QML</i>
from PySide2 import QtQuick
&nbsp;
&nbsp;
<i># nový widget bude odvozen od QDeclarativeView</i>
class MainWindow(QtQuick.QQuickView):
&nbsp;
    def __init__(self, qml_file, parent=None):
        super(MainWindow, self).__init__(parent)
        <i># nastavení titulku hlavního okna aplikace</i>
        self.setTitle("QML Example @ PySide2: " + qml_file)
        <i># načtení souboru QML</i>
        self.setSource(QtCore.QUrl.fromLocalFile(qml_file))
        <i># necháme QML změnit velikost okna</i>
        self.setResizeMode(QtQuick.QQuickView.SizeRootObjectToView)
&nbsp;
&nbsp;
def main(qml_file):
    <i># vytvoření Qt aplikace</i>
    app = QtGui.QGuiApplication(sys.argv)
&nbsp;
    <i># vytvoření hlavního okna</i>
    window = MainWindow(qml_file)
&nbsp;
    <i># zobrazení hlavního okna na desktopu</i>
    window.show()
&nbsp;
    <i># spuštění aplikace</i>
    sys.exit(app.exec_())
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Příklad použití modulu popsaného v&nbsp;předchozí kapitole</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from QmlViewer import *
&nbsp;
QML_FILE = "01.qml"
&nbsp;
if __name__ == '__main__':
    main(QML_FILE)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Kotevní přímky a jejich vliv na umístění a rozměry prvků</h2>

<pre>
import QtQuick 2.0
&nbsp;
Rectangle {
    id: main
    width: 320
    height: 240
    color: "lightgray"
&nbsp;
    Rectangle {
        id: r1
        width: 64
        color: "red"
        opacity: 0.5
        anchors.left: parent.left
        anchors.top: parent.top
        anchors.bottom: parent.bottom
    }
&nbsp;
    Rectangle {
        id: r2
        width: 160
        height: 160
        color: "yellow"
        opacity: 0.5
        z: 1
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.verticalCenter: parent.verticalCenter
    }
&nbsp;
    Rectangle {
        id: r3
        width: 64
        height: 160
        color: "blue"
        opacity: 0.5
        anchors.right: parent.right
        anchors.top: parent.top
        anchors.bottom: parent.bottom
    }
}
</pre>

<p></p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from QmlViewer import *
&nbsp;
QML_FILE = "02.qml"
&nbsp;
if __name__ == '__main__':
    main(QML_FILE)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů byly, podobně
jako tomu bylo i v&nbsp;předchozích článcích, uloženy do Git repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Pokud nechcete klonovat celý repositář, můžete namísto toho použít odkazy na
jednotlivé příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Adresa</th></tr>
<tr><td>1</td><td>01_load_qml.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/01_load_qml.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/01_load_qml.py</a></td></tr>
<tr><td>2</td><td>QmlViewer.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/QmlViewer.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/QmlViewer.py</a></td></tr>
<tr><td>3</td><td>02_use_qml_viewer.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/02_use_qml_viewer.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/02_use_qml_viewer.py</a></td></tr>
<tr><td>4</td><td>03_springy_widgets.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/03_springy_widgets.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/03_springy_widgets.py</a></td></tr>
</table>

<p>Následuje tabulka s&nbsp;odkazy na soubory QML s&nbsp;popisem grafického
uživatelského rozhraní, které taktéž budete potřebovat:</p>

<table>
<tr><th>#</th><th>QML soubor</th><th>Adresa</th></tr>
<tr><td>1</td><td>01.qml</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/01.qml">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/01.qml</a></td></tr>
<tr><td>2</td><td>02.qml</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/02.qml">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/02.qml</a></td></tr>
<tr><td>3</td><td>03.qml</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/03.qml">https://github.com/tisnik/presentations/blob/master/Python_GUI/PySide2/03.qml</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>QML Tutorial<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/qmltutorial/index.html">https://pyside.github.io/docs/pyside/tutorials/qmltutorial/index.html</a>
</li>

<li>QML Advanced Tutorial<br />
<a href="https://pyside.github.io/docs/pyside/tutorials/qmladvancedtutorial/index.html">https://pyside.github.io/docs/pyside/tutorials/qmladvancedtutorial/index.html</a>
</li>

<li>User interface markup language<br />
<a href="https://en.wikipedia.org/wiki/User_interface_markup_language">https://en.wikipedia.org/wiki/User_interface_markup_language</a>
</li>

<li>UsiXML<br />
<a href="https://en.wikipedia.org/wiki/UsiXML">https://en.wikipedia.org/wiki/UsiXML</a>
</li>

<li>Anchor-based Layout in QML<br />
<a href="https://het.as.utexas.edu/HET/Software/html/qml-anchor-layout.html#anchor-layout">https://het.as.utexas.edu/HET/Software/html/qml-anchor-layout.html#anchor-layout</a>
</li>

<li>PySide.QtDeclarative<br />
<a href="https://pyside.github.io/docs/pyside/PySide/QtDeclarative/index.html">https://pyside.github.io/docs/pyside/PySide/QtDeclarative/index.html</a>
</li>

<li>PySide and Qt Quick/QML Playground<br />
<a href="https://wiki.qt.io/PySide-and-QML-Playground">https://wiki.qt.io/PySide-and-QML-Playground</a>
</li>

<li>Hand Coded GUI Versus Qt Designer GUI<br />
<a href="https://stackoverflow.com/questions/387092/hand-coded-gui-versus-qt-designer-gui">https://stackoverflow.com/questions/387092/hand-coded-gui-versus-qt-designer-gui</a>
</li>

<li>Qt Creator Manual<br />
<a href="http://doc.qt.io/qtcreator/">http://doc.qt.io/qtcreator/</a>
</li>

<li>Qt Designer Manual<br />
<a href="http://doc.qt.io/qt-5/qtdesigner-manual.html">http://doc.qt.io/qt-5/qtdesigner-manual.html</a>
</li>

<li>Qt Creator (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Qt_Creator">https://en.wikipedia.org/wiki/Qt_Creator</a>
</li>

<li>PySide 1.2.1 documentation<br />
<a href="https://pyside.github.io/docs/pyside/index.html">https://pyside.github.io/docs/pyside/index.html</a>
</li>

<li>PySide na PyPi<br />
<a href="https://pypi.org/project/PySide/">https://pypi.org/project/PySide/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

