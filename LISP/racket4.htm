<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Základní knihovny pro 2D grafiku v jazyku Racket</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Základní knihovny pro 2D grafiku v jazyku Racket</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;dnešním článku o programovacím jazyku Racket si ukážeme vybrané balíčky sloužící pro práci s grafikou. Popis začneme u balíčku určeného pro vykreslování 2D grafiky, ovšem nezapomeneme ani na (kdysi velmi populární) balíček s&nbsp;želví grafikou.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Základní knihovny pro 2D grafiku v&nbsp;jazyku Racket</a></p>
<p><a href="#k02">2. Bitmapy, grafické kontexty a vykreslení (rasterizace) úseček</a></p>
<p><a href="#k03">3. Nastavení vizuálních vlastností vykreslovaných objektů</a></p>
<p><a href="#k04">4. Vykreslení vyplněných 2D objektů</a></p>
<p><a href="#k05">5. Nastavení antialiasingu při vykreslování</a></p>
<p><a href="#k06">6. Styl vykreslovaných úseček, oblouků, křivek a cest</a></p>
<p><a href="#k07">7. Změna tvaru stopy na konci úseček</a></p>
<p><a href="#k08">8. Styl výplně uzavřených objektů</a></p>
<p><a href="#k09">9. Gradientní barvové přechody</a></p>
<p><a href="#k10">10. Cesty</a></p>
<p><a href="#k11">11. Vykreslení loga programovacího jazyka Racket</a></p>
<p><a href="#k12">12. Spline křivka</a></p>
<p><a href="#k13">13. Nastavení alfa kanálu (průhlednosti)</a></p>
<p><a href="#k14">14. Vykreslení textu</a></p>
<p><a href="#k15">15. Želví grafika</a></p>
<p><a href="#k16">16. Použití funkce <strong>repeat</strong> pro vykreslení složitějších obrazců</a></p>
<p><a href="#k17">17. Další možnosti želví grafiky</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Literatura</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Základní knihovny pro 2D grafiku v&nbsp;jazyku Racket</h2>

<p>Na rozdíl od předchozích tří článků [<a
href="https://www.root.cz/clanky/racket-programovaci-jazyk-a-soucasne-i-platforma-pro-vyvoj-novych-jazyku/">1</a>]
[<a
href="https://www.root.cz/clanky/makra-v-racketu-i-v-dalsich-lispovskych-jazycich/">2</a>]
[<a href="https://www.root.cz/clanky/zakladni-knihovna-jazyka-racket/">3</a>],
v&nbsp;nichž jsme se věnovali základním konceptům, na nichž je postaven
programovací jazyk <i>Racket</i>, se dnes začneme věnovat praktičtějším
příkladům, které se mj.&nbsp;používají i ve výuce (i když je nutné na tomto
místě poznamenat, že se Racket do výuky nerozšířil do takové míry, jak jeho
tvůrci doufali). Mezi nejvíce názorné metody výuky programování stále patří
použití jednoduché 2D grafiky a pro tento účel v&nbsp;Racketu nalezneme hned
několik knihoven, zejména pak knihovnu <i>Racket Drawing Toolkit</i>
představovanou balíčkem <strong>racket/draw</strong>.</p>

<p>V&nbsp;první části dnešního článku se budeme zabývat výše zmíněným balíčkem
<strong>racket/draw</strong>, v&nbsp;níž nalezneme většinu standardních funkcí
pro vykreslování 2D grafiky. V&nbsp;části druhé si pak ve stručnosti popíšeme
knihovnu <strong>graphics/turtles</strong>, v&nbsp;níž je implementována
takzvaná <i>želví grafika</i> neboli <i>turtle graphics</i>.</p>

<p>Balíček <strong>racket/draw</strong> je určen pro vykreslování 2D grafiky
tvořené jak základními geometrickými tvary (úsečka, oblouk, elipsa), tak i
textem a popř.&nbsp;i cestami (<i>paths</i>). Většina konceptů, na nichž je
tato knihovna postavena, bude mnoha čtenářům připadat známá. Není to samozřejmě
náhodou, protože se tvůrci inspirovali <i>PostScriptem</i> [<a
href="https://www.root.cz/clanky/graficky-metaformat-postscript/">4</a>],
z&nbsp;něhož je nepřímo odvozen i jazyk <i>SVG</i> [<a
href="https://www.root.cz/clanky/vektorovy-graficky-format-svg/">5</a>]. To
mj.&nbsp;znamená, že se setkáme s&nbsp;takovými termíny, jako je pero
(<i>pen</i>), štětec (<i>brush</i>), cesta (<i>path</i>) atd. Vzhledem
k&nbsp;tomu, že jsou tyto pojmy vysvětleny v&nbsp;odkazovaných článcích, budeme
se dnes soustředit především na způsob jejich použití v&nbsp;programovacím
jazyku Racket.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Bitmapy, grafické kontexty a vykreslení (rasterizace) úseček</h2>

<p>Knihovna <strong></strong> používá koncepty objektově orientovaného
programování, s&nbsp;nimiž jsme se v&nbsp;jazyku Racket prozatím nesetkali,
ovšem dnes nám bude stačit pouze vědět, jakým způsobem se vytvoří (zkonstruuje)
objekt a jak se tomuto objektu pošle zpráva resp.&nbsp;(pokud preferujete
terminologii C++ či Javy), jak se zavolá metoda objektu. Nový objekt se
zkonstruuje pomocí formy <strong>new</strong>, které se předá výraz typu
<i>třída</i> a případné parametry konstruktoru:</p>

<pre>
(new bitmap-dc% [bitmap target])
</pre>

<p><div class="rs-tip-major">Poznámka: většinou jména tříd končí znakem
procenta, všechny třídy jsou pak odvozeny od supertřídy
<strong>object%</strong>.</div></p>

<p>Jakmile je objekt zkonstruován, je možné mu poslat zprávou pomocí metody
<strong>send</strong> popř.&nbsp;nějaké další varianty této formy (variant
existuje několik, velmi užitečná je forma <strong>send*</strong>, která objektu
postupně pošle více zpráv):</p>

<pre>
(<strong>send</strong> objekt metoda argumenty metody)
&nbsp;
(<strong>send*</strong> objekt zpráva1 zpráva2 zpráva3 ...)
</pre>

<p>Znalost těchto dvou forem nám bude pro účely dnešního článku plně
dostačovat.</p>

<p>Nyní si ukažme ten nejjednodušší demonstrační příklad, na němž budou
vysvětleny dva základní koncepty knihovny <strong>racket/draw</strong>:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
(send dc draw-line 0 0 255 255)
(send dc draw-line 0 255 255 0)
&nbsp;
(send target save-file "01.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-1.png" class="image-380066" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 1: Výsledek běhu dnešního prvního demonstračního
příkladu.</i></p>

<p>V&nbsp;tomto příkladu se postupně vykonají následující operace:</p>

<ol>

<li>Vytvoří se bitmapa (rastrový obrázek), do kterého se bude provádět
vykreslování. Povšimněte si, že u bitmapy musíme specifikovat její horizontální
i vertikální rozlišení a popř.&nbsp;i další parametry (například to, zda se má
používat alfa kanál atd.).</li>

<li>Vytvoří a inicializuje se takzvaný grafický kontext držící stav
vykreslovacího enginu (šířku a barvu pera atd.). U samotných vykreslovacích
operací se pouze specifikuje, jaký tvar se má vykreslit a jaký je jeho
geometrický tvar (souřadnice). Barva vykreslení či výplně je součástí
grafického kontextu.</li>

<li>Následně přes grafický kontext vykreslíme základní geometrický tvar &ndash;
úsečku. Souřadnice koncových bodů úsečky jsou specifikovány v&nbsp;souřadném
systému bitmapy, v&nbsp;našem případě v&nbsp;souřadném systému, v&nbsp;němž má
x-ová i y-ová osa limity 0 až 255 (ve skutečnosti to není zcela pravda, protože
je možné provádět lineární transformace souřadnic, ty však prozatím nemáme
nastavené).</li>

<li>Nakonec je bitmapa uložena do rastrového souboru ve formátu PNG, ovšem
v&nbsp;případě potřeby je možné zvolit i další formáty, pochopitelně včetně
JPEGu.</li>

</ol>

<p>Ve druhém příkladu navíc bitmapu nejprve &bdquo;smažeme&ldquo; nakreslením
bílého obdélníku (viz zvýrazněná část skriptu):</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
<strong>(send dc draw-rectangle 0 0 256 256)</strong>
&nbsp;
(send dc draw-line 0 0 255 255)
(send dc draw-line 0 255 255 0)
&nbsp;
(send target save-file "02.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-2.png" class="image-380067" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 2: Výsledek běhu příkladu druhého.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Nastavení vizuálních vlastností vykreslovaných objektů</h2>

<p>Podobně, jako je tomu například ve vektorovém formátu <a
href="https://www.root.cz/clanky/vektorovy-graficky-format-svg/">SVG</a>, <a
href="https://www.root.cz/clanky/graficky-metaformat-postscript/">PostScriptu</a>
či v&nbsp;knihovně <a
href="https://www.root.cz/clanky/pouziti-knihoven-openvg-a-egl-nejenom-na-raspberry-pi/">OpenVG</a>,
se i při použití knihovny <strong>racket/draw</strong> setkáme se třemi
důležitými pojmy:</p>

<ol>

<li>Pero (<i>pen</i>) je nástroj použitý při vykreslování obrysu tvarů a
samozřejmě i všech liniových tvarů (úsečky, oblouky, ...).</li>

<li>Štětec (<i>brush</i>) je nástroj použitý pro vyplnění uzavřených tvarů
(obdélník, polygon, elipsa, cesta).</li>

<li>Cesta (<i>path</i>) se používá k&nbsp;popisu složitějších tvarů složených
z&nbsp;úseček a oblouků. Nad cestami je definováno větší množství operací,
například test, zda bod leží uvnitř objektu popsaného cestou atd.</li>

</ol>

<p><div class="rs-tip-major">Poznámka: styly vykreslování se nastavují pro
všechny běžné geometrické tvary stejnými metodami. Výjimkou jsou texty (font)
s&nbsp;vlastním nastavením nezávislým na ostatních grafických
entitách.</div></p>

<p>Barva obrysů lze nastavit takto:</p>

<pre>
<strong>(send dc set-pen "red" 3 'solid)</strong>
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vykreslení vyplněných 2D objektů</h2>

<p>Některé objekty jsou &bdquo;otevřené&ldquo; (úsečka, oblouk, spline křivka),
další &bdquo;uzavřené&ldquo; (obdélník, elipsa). U uzavřených objektů je možné
zvolit, jakým způsobem se vyplní jejich vnitřek. V&nbsp;nejjednodušším případě
se vyplnění provede konstantní barvou, což si ukážeme v&nbsp;dalším příkladu.
Barva výplně je součástí stavu takzvaného &bdquo;štětce&ldquo; (<i>brush</i>) a
nastavuje se metodou <strong>set-brush</strong>:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
<strong>(send dc set-brush "white" 'solid)</strong>
&nbsp;
<strong>(send dc set-pen "white" 1 'transparent)</strong>
(send dc draw-rectangle 0 0 256 256)
&nbsp;
<strong>(send dc set-pen "red" 3 'solid)</strong>
(send dc draw-line 0 0 255 255)
(send dc draw-line 0 255 255 0)
&nbsp;
(send target save-file "03.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-3.png" class="image-380068" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 3: Třetí demonstrační příklad s&nbsp;vykresleným obdélníkem a
dvojicí úseček.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Nastavení antialiasingu při vykreslování</h2>

<p>Nejrychlejším algoritmem pro vykreslování úseček do bitmapy je slavný
Bresenhamův algoritmus. Ovšem klasická podoba tohoto algoritmu má jednu
podstatnou nevýhodu, která je navíc ještě zviditelněna kvalitními monitory
s&nbsp;pevným rastrem &ndash; stopa úsečky tvoří typické &bdquo;schody&ldquo;,
takže se výsledek někdy označuje &bdquo;jagged lines&ldquo;. Existují ovšem i
vykreslovací algoritmy, které dokážou úsečky a další tvary vykreslit
s&nbsp;využitím antialiasingu. I tyto algoritmy jsou v&nbsp;knihovně
<strong>racket/draw</strong> podporovány a to dokonce ve dvou variantách. První
varianta počítá s&nbsp;tím že koncové body úseček a dalších tvarů leží ve
středech pixelů, druhá varianta naopak počítá s&nbsp;tím, že koncové body leží
na hranicích mezi pixely. Rozdíly mezi všemi třemi vykreslovacími algoritmy
jsou ukázány na trojici demonstračních příkladů.</p>

<p>Vykreslení úseček klasickým Bresenhamovým algoritmem se
&bdquo;schody&ldquo;:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
(send dc set-brush "white" 'solid)
&nbsp;
(send dc set-pen "white" 1 'transparent)
(send dc draw-rectangle 0 0 256 256)
&nbsp;
(send dc set-pen "black" 1 'solid)
&nbsp;
(for ([i (in-range 0 256 10)])
     (send dc draw-line 255 0 i i)
     (send dc draw-line 0 i i 255))
&nbsp;
(send target save-file "04.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-4.png" class="image-380069" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 4: Vykreslení úseček klasickým Bresenhamovým algoritmem se
&bdquo;schody&ldquo;.</i></p>

<p>První algoritmus využívající antialiasing. Zpráva/metoda, která tento
algoritmus zapíná, je zvýrazněna tučným písmem:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
(send dc set-brush "white" 'solid)
&nbsp;
(send dc set-pen "white" 1 'transparent)
(send dc draw-rectangle 0 0 256 256)
&nbsp;
(send dc set-pen "black" 1 'solid)
<strong>(send dc set-smoothing 'smoothed)</strong>
&nbsp;
(for ([i (in-range 0 256 10)])
     (send dc draw-line 255 0 i i)
     (send dc draw-line 0 i i 255))
&nbsp;
(send target save-file "05.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-5.png" class="image-380070" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 5: První algoritmus pro antialiasing.</i></p>

<p>Druhý algoritmus využívající antialiasing. Zpráva/metoda, která tento
algoritmus zapíná, je opět zvýrazněna:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
(send dc set-brush "white" 'solid)
&nbsp;
(send dc set-pen "white" 1 'transparent)
(send dc draw-rectangle 0 0 256 256)
&nbsp;
(send dc set-pen "black" 1 'solid)
<strong>(send dc set-smoothing 'aligned)</strong>
&nbsp;
(for ([i (in-range 0 256 10)])
     (send dc draw-line 255 0 i i)
     (send dc draw-line 0 i i 255))
&nbsp;
(send target save-file "06.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-6.png" class="image-380071" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 6: Druhý algoritmus pro antialiasing.</i></p>

<p>Rozdíl mezi oběma algoritmy používajícími antialiasing je ještě více
viditelný v&nbsp;případě, že budeme vykreslovat vodorovné či naopak svislé
úsečky. Ukažme si rozdíl na příkladu s&nbsp;vodorovnými úsečkami.</p>

<p>První algoritmus využívající antialiasing. Zpráva/metoda, která tento
algoritmus zapíná, je zvýrazněna tučným písmem:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
(send dc set-brush "white" 'solid)
&nbsp;
(send dc set-pen "white" 1 'transparent)
(send dc draw-rectangle 0 0 256 256)
&nbsp;
(send dc set-pen "black" 1 'solid)
(send dc set-smoothing 'smoothed)
&nbsp;
(for ([i (in-range 0 256 10)])
     (send dc draw-line 0 i 255 i))
&nbsp;
(send target save-file "07.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-7.png" class="image-380072" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 7: První algoritmus využívající antialiasing pro vykreslení
vodorovných úseček.</i></p>

<p>Druhý algoritmus využívající antialiasing. Zpráva/metoda, která tento
algoritmus zapíná, je opět zvýrazněna:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
(send dc set-brush "white" 'solid)
&nbsp;
(send dc set-pen "white" 1 'transparent)
(send dc draw-rectangle 0 0 256 256)
&nbsp;
(send dc set-pen "black" 1 'solid)
<strong>(send dc set-smoothing 'aligned)</strong>
&nbsp;
(for ([i (in-range 0 256 10)])
     (send dc draw-line 0 i 255 i))
&nbsp;
(send target save-file "08.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-8.png" class="image-380073" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 8: Druhý algoritmus využívající antialiasing pro vykreslení
vodorovných úseček.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Styl vykreslovaných úseček, oblouků, křivek a cest</h2>

<p>Při kresbě liniových obrazců nebo okrajů plošných obrazců je možné zvolit
vzorek (styl) úseček &ndash; plná (výchozí nastavení), čárkovaná, čerchovaná,
střídavá apod. Tento styl se nastavuje posledním parametrem metody
<strong>set-pen</strong> a jednotlivé možnosti jsou ukázány v&nbsp;dalším
demonstračním příkladu (pro větší kvalitu výsledku je povolen
antialiasing):</p>

<img src="https://i.iinfo.cz/images/678/racket-graphics-9.png" class="image-380073" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 9: Několik úseček s&nbsp;různým stylem vykreslování.</i></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se vzorek zvětšuje
společně s&nbsp;nastavenou šířkou vykreslované úsečky (což v&nbsp;jiných
knihovnách podobného zaměření obecně neplatí).</div></p>

<p>Úplný zdrojový kód tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
(send dc set-brush "white" 'solid)
&nbsp;
(send dc set-pen "white" 1 'transparent)
(send dc draw-rectangle 0 0 256 256)
&nbsp;
(send dc set-smoothing 'aligned)
&nbsp;
<strong>(send dc set-pen "black" 1 'solid)</strong>
(send dc draw-line 0 10 255 10)
&nbsp;
<strong>(send dc set-pen "black" 1 'dot)</strong>
(send dc draw-line 0 20 255 20)
&nbsp;
<strong>(send dc set-pen "black" 1 'long-dash)</strong>
(send dc draw-line 0 30 255 30)
&nbsp;
<strong>(send dc set-pen "black" 1 'short-dash)</strong>
(send dc draw-line 0 40 255 40)
&nbsp;
<strong>(send dc set-pen "black" 1 'dot-dash)</strong>
(send dc draw-line 0 50 255 50)
&nbsp;
<strong>(send dc set-pen "gray" 5 'solid)</strong>
(send dc draw-line 0 80 255 80)
&nbsp;
<strong>(send dc set-pen "gray" 5 'dot)</strong>
(send dc draw-line 0 90 255 90)
&nbsp;
<strong>(send dc set-pen "gray" 5 'long-dash)</strong>
(send dc draw-line 0 100 255 100)
&nbsp;
<strong>(send dc set-pen "gray" 5 'short-dash)</strong>
(send dc draw-line 0 110 255 110)
&nbsp;
<strong>(send dc set-pen "gray" 5 'dot-dash)</strong>
(send dc draw-line 0 120 255 120)
&nbsp;
<strong>(send dc set-pen "darkgreen" 15 'solid)</strong>
(send dc draw-line 0 150 255 150)
&nbsp;
<strong>(send dc set-pen "darkgreen" 15 'dot)</strong>
(send dc draw-line 0 170 255 170)
&nbsp;
<strong>(send dc set-pen "darkgreen" 15 'long-dash)</strong>
(send dc draw-line 0 190 255 190)
&nbsp;
<strong>(send dc set-pen "darkgreen" 15 'short-dash)</strong>
(send dc draw-line 0 210 255 210)
&nbsp;
<strong>(send dc set-pen "darkgreen" 15 'dot-dash)</strong>
(send dc draw-line 0 230 255 230)
&nbsp;
&nbsp;
(send target save-file "09.png" 'png)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Změna tvaru stopy na konci úseček</h2>

<p>Konce (zejména) širokých úseček či oblouků mohou být zaobleny,
popř.&nbsp;mohou končit přímo na zadaném koncovém bodě (vrcholu) nebo může
křivka přesahovat koncový bod tak, aby vzdálenost koncového bodu (vrchol) od
vykresleného konce křivky odpovídala polovině jejího průměru. Toto chování
vykreslovacího algoritmu nelze nastavit přímo metodou <strong>set-pen</strong>,
ale musíme použít tento postup:</p>

<pre>
(send dc set-pen (send the-pen-list find-or-create-pen "black" 1 'solid 'butt))
</pre>

<p>Alternativně můžeme použít metodu <strong>set-cap</strong>.</p>

<p>Důležitý je poslední parametr metody <strong>find-or-create-pen</strong>,
který může nabývat hodnot:</p>

<ol>
<li>'round (zakulacený konec křivky)</li>
<li>'projecting (kolmé ukončení křivky, křivka je prodloužena přes koncový bod)</li>
<li>'butt (kolmé ukončení křivky, křivka končí přímo v&nbsp;koncovém bodě)</li>
</ol>

<p>Podívejme se nyní na úpravu předchozího příkladu tak, aby se změnil způsob
vykreslení konců úseček:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
(send dc set-brush "white" 'solid)
&nbsp;
(send dc set-pen "white" 1 'transparent)
(send dc draw-rectangle 0 0 256 256)
&nbsp;
(send dc set-smoothing 'aligned)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "black" 1 'solid 'butt))
(send dc draw-line 0 10 255 10)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "black" 1 'dot 'butt))
(send dc draw-line 0 20 255 20)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "black" 1 'long-dash 'butt))
(send dc draw-line 0 30 255 30)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "black" 1 'short-dash 'butt))
(send dc draw-line 0 40 255 40)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "black" 1 'dot-dash 'butt))
(send dc draw-line 0 50 255 50)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "gray" 5 'solid 'butt))
(send dc draw-line 0 80 255 80)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "gray" 5 'dot 'butt))
(send dc draw-line 0 90 255 90)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "gray" 5 'long-dash 'butt))
(send dc draw-line 0 100 255 100)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "gray" 5 'short-dash 'butt))
(send dc draw-line 0 110 255 110)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "gray" 5 'dot-dash 'butt))
(send dc draw-line 0 120 255 120)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "darkgreen" 15 'solid 'butt))
(send dc draw-line 0 150 255 150)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "darkgreen" 15 'dot 'butt))
(send dc draw-line 0 170 255 170)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "darkgreen" 15 'long-dash 'butt))
(send dc draw-line 0 190 255 190)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "darkgreen" 15 'short-dash 'butt))
(send dc draw-line 0 210 255 210)
&nbsp;
(send dc set-pen (send the-pen-list find-or-create-pen "darkgreen" 15 'dot-dash 'butt))
(send dc draw-line 0 230 255 230)
&nbsp;
&nbsp;
(send target save-file "10.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-10.png" class="image-380075" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 10: Změněné konce úseček.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Styl výplně uzavřených objektů</h2>

<p>Uzavřené dvourozměrné entity, mezi něž náleží především obdélníky a elipsy
(speciálně pak kružnice) mohou být vyplněny, což jsme si již ostatně ukázali ve
druhém demonstračním příkladu. Tradičně se může jednat o výplň konstantní
barvou, výplň vzorkem (<i>hatch</i>), bitmapou nebo gradientním barvovým
přechodem. Nejdříve si ukážeme vyplnění obdélníků vzorkem. V&nbsp;knihovně
<strong>racket/draw</strong> je předpřipraveno několik vzorků, které jsou
všechny použity v&nbsp;dalším demonstračním příkladu. Jejich názvy jsou ve
zdrojovém kódu tohoto příkladu zvýrazněny tučným písmem:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
(send dc set-brush "white" <strong>'solid</strong>)
(send dc set-pen "white" 1 'transparent)
(send dc draw-rectangle 0 0 256 256)
&nbsp;
(send dc set-brush "black" <strong>'transparent</strong>)
(send dc draw-rectangle 10 10 50 50)
&nbsp;
(send dc set-brush "black" <strong>'solid</strong>)
(send dc draw-rectangle 105 10 50 50)
&nbsp;
(send dc set-brush "black" <strong>'hilite</strong>)
(send dc draw-rectangle 200 10 50 50)
&nbsp;
&nbsp;
(send dc set-brush "black" <strong>'horizontal-hatch</strong>)
(send dc draw-rectangle 10 105 50 50)
&nbsp;
(send dc set-brush "black" <strong>'vertical-hatch</strong>)
(send dc draw-rectangle 105 105 50 50)
&nbsp;
(send dc set-brush "black" <strong>'cross-hatch</strong>)
(send dc draw-rectangle 200 105 50 50)
&nbsp;
&nbsp;
(send dc set-brush "black" <strong>'bdiagonal-hatch</strong>)
(send dc draw-rectangle 10 200 50 50)
&nbsp;
(send dc set-brush "black" <strong>'fdiagonal-hatch</strong>)
(send dc draw-rectangle 105 200 50 50)
&nbsp;
(send dc set-brush "black" <strong>'crossdiag-hatch</strong>)
(send dc draw-rectangle 200 200 50 50)
&nbsp;
&nbsp;
(send target save-file "11.png" 'png)
</pre>

<p>Výsledek vypadá následovně:</p>

<img src="https://i.iinfo.cz/images/678/racket-graphics-11.png" class="image-380076" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 11: Devět čtverců, každý vykreslený s&nbsp;jiným stylem výplně.
První čtverec je vykreslen s&nbsp;transparentní výplní a není viditelný,
protože i jeho okraj je transparentní.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Gradientní barvové přechody</h2>

<p>Další demonstrační příklad je poněkud složitější, protože je v&nbsp;něm
deklarován a následně použit gradientní barvový přechod, který posloužil jako
výplň uzavřeného 2D obrazce, zde konkrétně obdélníku. Povšimněte si, jakým
způsobem je gradientní přechod deklarován &ndash; zvolí se dva body
v&nbsp;ploše a nakonec barvy ležící na spojnici mezi těmito dvěma body. Barev
lze zadat libovolné množství, jen je zapotřebí udržovat seznam setříděný podle
parametru <i>t</i> rostoucího od 0 do 1:</p>

<pre>
(new linear-gradient%
     [x0 0]
     [y0 100]
     [x1 100]
     [y1 0]
     [stops
      (list (list 0   (make-object color% 255 0 0))
            (list 0.5 (make-object color% 0 255 0))
            (list 1   (make-object color% 0 0 255)))])]))
</pre>

<p>Jeho následné nastavení a použití je zcela jednoduché:</p>

<pre>
(define rectangle-brush
  (new brush% [gradient ...]))
&nbsp;
(send dc set-brush rectangle-brush)
</pre>

<p>S&nbsp;výsledkem:</p>

<img src="https://i.iinfo.cz/images/678/racket-graphics-12.png" class="image-380077" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 12: Obdélník vyplněný s&nbsp;využití barvového gradientního
přechodu.</i></p>

<p>Následuje výpis úplného zdrojového kódu tohoto demonstračního příkladu:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
(send dc set-brush "white" 'solid)
(send dc set-pen "white" 1 'transparent)
(send dc draw-rectangle 0 0 256 256)
&nbsp;
(define rectangle-brush
  (new brush%
       [gradient
        (new linear-gradient%
             [x0 0]
             [y0 100]
             [x1 100]
             [y1 0]
             [stops
              (list (list 0   (make-object color% 255 0 0))
                    (list 0.5 (make-object color% 0 255 0))
                    (list 1   (make-object color% 0 0 255)))])]))
&nbsp;
(send dc set-brush rectangle-brush)
(send dc draw-rectangle 0 0 255 255)
&nbsp;
(send target save-file "12.png" 'png)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Cesty</h2>

<p>Dalším důležitým konceptem, s&nbsp;nímž se setkáme jak v&nbsp;knihovně
<strong></strong>, tak i ve výše zmíněném <i>PostScriptu</i> či <i>SVG</i>,
jsou takzvané cesty. Jedná se o geometrické tvary vytvořené z&nbsp;úseček,
oblouků a křivek. Cesty mohou být uzavřené (potom je lze vyplnit) či otevřené.
Samotná cesta je realizována objektem typu <strong>dc-path%</strong>:</p>

<pre>
(new dc-path%)
</pre>

<p>Tomuto objektu se potom posílají zprávy pro přidání nového úsečkového
segmentu (<strong>line-to)</strong>, křivkového segmentu
(<strong>curve-to</strong>) či o posunu aktivního bodu na zadané souřadnice
(<strong>move-to</strong>):</p>

<pre>
(let ([p (new dc-path%)])
    (send p move-to 153 44)
    (send p line-to 161.5 60)
    (send p curve-to 202.5 49 230 42 245 61)
    ...
    ...
    ...
</pre>

<p>Podívejme se nyní na příklad, který po svém spuštění vykreslí část loga
programovacího jazyka Racket:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
(send dc set-brush "white" 'solid)
(send dc set-pen "white" 1 'transparent)
(send dc draw-rectangle 0 0 256 256)
&nbsp;
(define left-lambda-path
  (let ([p (new dc-path%)])
    (send p move-to 153 44)
    (send p line-to 161.5 60)
    (send p curve-to 202.5 49 230 42 245 61)
    (send p curve-to 280.06 105.41 287.5 141 296.5 186)
    (send p curve-to 301.12 209.08 299.11 223.38 293.96 244)
    (send p curve-to 281.34 294.54 259.18 331.61 233.5 375)
    (send p curve-to 198.21 434.63 164.68 505.6 125.5 564)
    (send p line-to 135 572)
    p))
&nbsp;
(send dc translate 5 5)
(send dc scale 0.4 0.4)
&nbsp;
(send dc set-smoothing 'smoothed)
(send dc set-pen "black" 1 'solid)
(send dc draw-path left-lambda-path)
&nbsp;
(send target save-file "13.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-13.png" class="image-380078" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 13: Cesta vykreslená předchozím demonstračním příkladem.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vykreslení loga programovacího jazyka Racket</h2>

<p>Následující demonstrační příklad byl převzat přímo <a
href="https://docs.racket-lang.org/draw/overview.html?q=path#%28tech._path%29">z&nbsp;dokumentace
programovacího jazyka Racket</a>, ovšem byl pro účely dnešního článku
zjednodušen. Tento příklad slouží pro vykreslení několika cest, po jejichž
vyplnění vznikne logo tohoto programovacího jazyka:</p>

<img src="https://i.iinfo.cz/images/678/racket-graphics-14.png" class="image-380079" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 14: Logo programovacího jazyka Racket vykresleného dále vypsaným
příkladem.</i></p>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
(send dc set-brush "white" 'solid)
(send dc set-pen "white" 1 'transparent)
(send dc draw-rectangle 0 0 256 256)
&nbsp;
(define left-lambda-path
  (let ([p (new dc-path%)])
    (send p move-to 153 44)
    (send p line-to 161.5 60)
    (send p curve-to 202.5 49 230 42 245 61)
    (send p curve-to 280.06 105.41 287.5 141 296.5 186)
    (send p curve-to 301.12 209.08 299.11 223.38 293.96 244)
    (send p curve-to 281.34 294.54 259.18 331.61 233.5 375)
    (send p curve-to 198.21 434.63 164.68 505.6 125.5 564)
    (send p line-to 135 572)
    p))
&nbsp;
(define left-logo-path
  (let ([p (new dc-path%)])
    (send p append left-lambda-path)
    (send p arc 0 0 630 630 (* 47/72 2 3.14) (* 121/360 2 3.14) #f)
    p))
&nbsp;
(define bottom-lambda-path
  (let ([p (new dc-path%)])
    (send p move-to 135 572)
    (send p line-to 188.5 564)
    (send p curve-to 208.5 517 230.91 465.21 251 420)
    (send p curve-to 267 384 278.5 348 296.5 312)
    (send p curve-to 301.01 302.98 318 258 329 274)
    (send p curve-to 338.89 288.39 351 314 358 332)
    (send p curve-to 377.28 381.58 395.57 429.61 414 477)
    (send p curve-to 428 513 436.5 540 449.5 573)
    (send p line-to 465 580)
    (send p line-to 529 545)
    p))
&nbsp;
(define bottom-logo-path
  (let ([p (new dc-path%)])
    (send p append bottom-lambda-path)
    (send p arc 0 0 630 630 (* 157/180 2 3.14) (* 47/72 2 3.14) #f)
    p))
&nbsp;
(define right-lambda-path
  (let ([p (new dc-path%)])
    (send p move-to 153 44)
    (send p curve-to 192.21 30.69 233.21 14.23 275 20)
    (send p curve-to 328.6 27.4 350.23 103.08 364 151)
    (send p curve-to 378.75 202.32 400.5 244 418 294)
    (send p curve-to 446.56 375.6 494.5 456 530.5 537)
    (send p line-to 529 545)
    p))
&nbsp;
(define right-logo-path
  (let ([p (new dc-path%)])
    (send p append right-lambda-path)
    (send p arc 0 0 630 630 (* 157/180 2 3.14) (* 121/360 2 3.14) #t)
    p))
&nbsp;
(define lambda-path
  (let ([p (new dc-path%)])
    (send p append left-lambda-path)
    (send p append bottom-lambda-path)
    (let ([t (new dc-path%)])
      (send t append right-lambda-path)
      (send t reverse)
      (send p append t))
    (send p close)
    p))
&nbsp;
(send dc translate 5 5)
(send dc scale 0.39 0.39)
&nbsp;
(send dc set-smoothing 'smoothed)
&nbsp;
(send dc set-pen "black" 0 'solid)
(send dc set-brush "white" 'solid)
(send dc draw-path lambda-path)
&nbsp;
(send dc set-pen "black" 4 'solid)
&nbsp;
(send dc set-brush "red" 'solid)
(send dc draw-path left-logo-path)
(send dc draw-path bottom-logo-path)
&nbsp;
(send dc set-brush "blue" 'solid)
(send dc draw-path right-logo-path)
&nbsp;
(send target save-file "14.png" 'png)
</pre>

<p>Připomeňme si, že do objektu lze poslat jednu zprávu pomocí formy
<strong>send</strong>, ovšem taktéž můžeme poslat více zpráv metodou
pojmenovanou <strong>send*</strong>. A právě tuto druhou metodu použijeme
proto, aby se zdrojový kód příkladu zkrátil a taktéž do jisté míry
zjednodušil:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
(send dc set-brush "white" 'solid)
(send dc set-pen "white" 1 'transparent)
(send dc draw-rectangle 0 0 256 256)
&nbsp;
(define left-lambda-path
  (let ([p (new dc-path%)])
    (send* p (move-to 153 44)
             (line-to 161.5 60)
             (curve-to 202.5 49 230 42 245 61)
             (curve-to 280.06 105.41 287.5 141 296.5 186)
             (curve-to 301.12 209.08 299.11 223.38 293.96 244)
             (curve-to 281.34 294.54 259.18 331.61 233.5 375)
             (curve-to 198.21 434.63 164.68 505.6 125.5 564)
             (line-to 135 572))
    p))
&nbsp;
(define left-logo-path
  (let ([p (new dc-path%)])
    (send* p (append left-lambda-path)
             (arc 0 0 630 630 (* 47/72 2 3.14) (* 121/360 2 3.14) #f))
    p))
&nbsp;
(define bottom-lambda-path
  (let ([p (new dc-path%)])
    (send* p (move-to 135 572)
             (line-to 188.5 564)
             (curve-to 208.5 517 230.91 465.21 251 420)
             (curve-to 267 384 278.5 348 296.5 312)
             (curve-to 301.01 302.98 318 258 329 274)
             (curve-to 338.89 288.39 351 314 358 332)
             (curve-to 377.28 381.58 395.57 429.61 414 477)
             (curve-to 428 513 436.5 540 449.5 573)
             (line-to 465 580)
             (line-to 529 545))
    p))
&nbsp; 
(define bottom-logo-path
  (let ([p (new dc-path%)])
    (send* p (append bottom-lambda-path)
             (arc 0 0 630 630 (* 157/180 2 3.14) (* 47/72 2 3.14) #f))
    p))
&nbsp;
(define right-lambda-path
  (let ([p (new dc-path%)])
    (send* p (move-to 153 44)
             (curve-to 192.21 30.69 233.21 14.23 275 20)
             (curve-to 328.6 27.4 350.23 103.08 364 151)
             (curve-to 378.75 202.32 400.5 244 418 294)
             (curve-to 446.56 375.6 494.5 456 530.5 537)
             (line-to 529 545))
    p))
&nbsp;
(define right-logo-path
  (let ([p (new dc-path%)])
    (send* p (append right-lambda-path)
             (arc 0 0 630 630 (* 157/180 2 3.14) (* 121/360 2 3.14) #t))
    p))
&nbsp;
(define lambda-path
  (let ([p (new dc-path%)])
    (send* p (append left-lambda-path)
             (append bottom-lambda-path))
    (let ([t (new dc-path%)])
      (send t append right-lambda-path)
      (send t reverse)
      (send p append t))
    (send p close)
    p))
&nbsp;
(send dc translate 5 5)
(send dc scale 0.39 0.39)
&nbsp;
(send dc set-smoothing 'smoothed)
&nbsp;
(send dc set-pen "black" 0 'solid)
(send dc set-brush "white" 'solid)
(send dc draw-path lambda-path)
&nbsp;
(send dc set-pen "black" 4 'solid)
&nbsp;
(send dc set-brush "red" 'solid)
(send dc draw-path left-logo-path)
(send dc draw-path bottom-logo-path)
&nbsp;
(send dc set-brush "blue" 'solid)
(send dc draw-path right-logo-path)
&nbsp;
(send target save-file "15.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-15.png" class="image-380080" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 15: Logo programovacího jazyka Racket vykresleného výše vypsaným
příkladem.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Spline křivka</h2>

<p>V&nbsp;knihovně <strong></strong> je podporována i práce se spline křivkami
a taktéž s&nbsp;Bézierovými křivkami. Nejdříve se podívejme na způsob použití
spline křivky určené třemi body &ndash; dvěma body koncovými a bodem řídicím.
Tato křivka se vykreslí metodou <strong>draw-spline</strong>:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define target (make-bitmap 256 256))
(define dc (new bitmap-dc% [bitmap target]))
&nbsp;
(send dc set-brush "white" 'solid)
&nbsp;
(send dc set-pen "white" 1 'transparent)
(send dc draw-rectangle 0 0 256 256)
&nbsp;
(send dc set-smoothing 'aligned)
&nbsp;
(send dc set-pen "red" 1 'long-dash)
(send dc draw-line 10 128 128 10)
(send dc draw-line 128 10 246 128)
&nbsp;
(send dc set-pen "blue" 1 'solid)
<strong>(send dc draw-spline 10 130 128 12 246 130)</strong>
&nbsp;
(send target save-file "16.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-16.png" class="image-380081" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 16: Spline křivka a její řídicí body (spojené úsečkami). Pro
větší přehlednost je spline křivka posunuta o dva pixely níže, aby neležela
přesně na svých řídicích úsečkách.</i></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že křivka prochází oběma
koncovými body a bod řídicí určuje její tvar a zakřivení.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Nastavení alfa kanálu (průhlednosti)</h2>

<p>Knihovna <strong>racket/draw</strong> plně podporuje alfa kanál, který lze
využít jak při kreslení otevřených křivek, tak i (a to zejména) křivek
uzavřených. V&nbsp;dalším příkladu je ukázáno, jakým způsobem se nastavuje alfa
složka (tedy míra průhlednosti resp.&nbsp;přesněji řečeno neprůhlednosti) při
vykreslování čtverců umístěných nad již nakreslený obrazec:</p>

<pre>
(define alpha 0.0)
&nbsp;
(for ([y (in-range 0 4)])
     (for ([x (in-range 0 4)])
          (send dc set-alpha alpha)
          (set! alpha (+ 0.06 alpha))
          (send dc draw-rectangle (+ 10 (* x 60))
                                  (+ 10 (* y 60))
                                  50 50)))
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-17.png" class="image-380082" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 17: Čtverce vykreslené červenou barvou s&nbsp;různou mírou
průhlednosti.</i></p>

<img src="https://i.iinfo.cz/images/678/racket-graphics-18.png" class="image-380083" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 18: Čtverce vykreslené zelenou barvou s&nbsp;různou mírou
průhlednosti.</i></p>

<img src="https://i.iinfo.cz/images/678/racket-graphics-19.png" class="image-380084" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 19: Čtverce vykreslené modrou barvou s&nbsp;různou mírou
průhlednosti.</i></p>

<img src="https://i.iinfo.cz/images/678/racket-graphics-20.png" class="image-380085" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 20: Čtverce vykreslené černou barvou s&nbsp;různou mírou
průhlednosti.</i></p>

<p>Úplný zdrojový kód tohoto příkladu vypadá následovně:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define (draw-example color filename)
    (define target (make-bitmap 256 256))
    (define dc (new bitmap-dc% [bitmap target]))
&nbsp;
    (send dc set-brush "white" 'solid)
    (send dc set-pen "white" 1 'transparent)
    (send dc draw-rectangle 0 0 256 256)
&nbsp;
&nbsp;
    (send dc set-pen "black" 1 'solid)
    (send dc set-smoothing 'aligned)
&nbsp;
    (for ([i (in-range 0 256 10)])
         (send dc draw-line 255 0 i i)
         (send dc draw-line 0 i i 255))
&nbsp;
&nbsp;
    (send dc set-brush color 'solid)
&nbsp;
    (define alpha 0.0)
&nbsp;
    (for ([y (in-range 0 4)])
         (for ([x (in-range 0 4)])
              (send dc set-alpha alpha)
              (set! alpha (+ 0.06 alpha))
              (send dc draw-rectangle (+ 10 (* x 60))
                                      (+ 10 (* y 60))
                                      50 50)))
&nbsp;
    (send target save-file filename 'png))
&nbsp;
(draw-example "red"   "17A.png")
(draw-example "green" "17B.png")
(draw-example "blue"  "17C.png")
(draw-example "black" "17D.png")
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Vykreslení textu</h2>

<p>Do rastrových obrázků lze pochopitelně vykreslovat i text. Nejprve je však
vhodné nastavit font (řez písma), jeho velikost, váhu atd.:</p>

<pre>
(send dc set-font (make-font #:size 60 #:family 'swiss #:weight 'bold))
</pre>

<p>Následně se text vykreslí stejným způsobem, jako ostatní entity:</p>

<pre>
(send dc set-text-foreground "red")
(send dc draw-text "Hello" 16 20)
&nbsp;
(send dc set-text-foreground "blue")
(send dc draw-text "Hello" 16 140)
</pre>

<p>Výsledek:</p>

<img src="https://i.iinfo.cz/images/678/racket-graphics-21.png" class="image-380086" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 21: Text vykreslený do bitmapového obrázku.</i></p>

<p>Opět pochopitelně následuje výpis zdrojového kódu demonstračního
příkladu:</p>

<pre>
#lang racket/base
&nbsp;
(require racket/class)
(require racket/draw)
&nbsp;
(define (draw-example filename)
    (define target (make-bitmap 256 256))
    (define dc (new bitmap-dc% [bitmap target]))
&nbsp;
    (send dc set-brush "white" 'solid)
    (send dc set-pen "white" 1 'transparent)
    (send dc draw-rectangle 0 0 256 256)
&nbsp;
&nbsp;
    (send dc set-pen "black" 1 'solid)
    (send dc set-smoothing 'aligned)
&nbsp;
    (for ([i (in-range 0 256 10)])
         (send dc draw-line 255 0 i i)
         (send dc draw-line 0 i i 255))
&nbsp;
    (send dc set-alpha 0.6)
    (send dc set-font (make-font #:size 60 #:family 'swiss #:weight 'bold))
&nbsp;
    (send dc set-text-foreground "red")
    (send dc draw-text "Hello" 16 20)
&nbsp;
    (send dc set-text-foreground "blue")
    (send dc draw-text "Hello" 16 140)
&nbsp;
    (send target save-file filename 'png))
&nbsp;
(draw-example "18.png")
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Želví grafika</h2>

<p>V&nbsp;jazyku Racket existuje i několik knihoven určených pro kreslení
s&nbsp;využitím želví grafiky, které jsme se věnovali <a
href="https://www.root.cz/clanky/zaklady-zelvi-grafiky/">v&nbsp;samostatném
článku</a>. Základní knihovna určená pro tuto oblast se jmenuje
<strong>graphics/turtles</strong>. Podívejme se nyní jen na několik základních
příkladů.</p>

<p>Vykreslení čtverce:</p>

<pre>
#lang racket/base
&nbsp;
(require graphics/turtles)
&nbsp;
(turtles)
&nbsp;
(draw 100)
(turn 90)
&nbsp;
(draw 100)
(turn 90)
&nbsp;
(draw 100)
(turn 90)
&nbsp;
(draw 100)
(turn 90)
&nbsp;
(turtles #f)
(save-turtle-bitmap "19.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-22.png" class="image-380087" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 22: Čtverec vykreslený pomocí želví grafiky.</i></p>

<p><div class="rs-tip-major">Poznámka: ve chvíli zavolání funkce
<strong>turtles</strong> se zobrazí grafické okno s&nbsp;GUI a kreslicí
plochou.</div></p>

<p>Vykreslení mnohoúhelníku se 72 hranami (takže se podobá kružnici):</p>

<pre>
#lang racket/base
&nbsp;
(require graphics/turtles)
&nbsp;
(turtles)
&nbsp;
(define (repeat count function)
  (for ((i (in-range count)))
       (function)))
&nbsp;
(repeat 72
        (lambda ()
          (turn 5)
          (draw 15)))
&nbsp;
(turtles #f)
(save-turtle-bitmap "20.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-23.png" class="image-380088" alt="&#160;" width="395" height="391" />
<p><i>Obrázek 23: Mnohoúhelník se 72 hranami.</i></p>

<p>Stejný příklad, ovšem želva byla posunuta o 100 pixelů ve vertikálním směru
(na obrázku to není patrné, ale při zobrazení GUI se celý mnohoúhelník/kružnice
posune do středu okna:</p>

<pre>
#lang racket/base
&nbsp;
(require graphics/turtles)
&nbsp;
(turtles)
&nbsp;
(move-offset 0 100)
&nbsp;
(define (repeat count function)
  (for ((i (in-range count)))
       (function)))
&nbsp;
(repeat 72
        (lambda ()
          (turn 5)
          (draw 15)))
&nbsp;
(turtles #f)
(save-turtle-bitmap "21.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-23.png" class="image-380088" alt="&#160;" width="395" height="391" />
<p><i>Obrázek 24: Mnohoúhelník se 72 hranami.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Použití funkce <strong>repeat</strong> pro vykreslení složitějších obrazců</h2>

<p>V&nbsp;programovacím jazyku Logo se velmi často používá příkaz
<strong>repeat</strong> pro opakované volání stejného kódu, v&nbsp;němž se
ovšem mění stav samotné želvy (viz například <a
href="https://www.root.cz/clanky/zelvi-grafika-dokonceni/#k01">příklad uvedený
zde</a> nebo <a
href="https://www.root.cz/clanky/logo-a-matematika/#k07">zde</a>,
popř.&nbsp;popis uvedený <a
href="https://www.root.cz/clanky/tvorba-procedur-prikaz-repeat-a-zelvi-grafika/#k04">v&nbsp;tomto
článku</a>). Tento příkaz můžeme odsimulovat i v&nbsp;jazyku Racket:</p>

<pre>
(define (<strong>repeat</strong> count function)
  (for ((i (in-range count))) (function)))
</pre>

<p>Příklad použití, v&nbsp;němž je <strong>repeat</strong> třikrát zanořen:</p>

<pre>
#lang racket/base
&nbsp;
(require graphics/turtles)
&nbsp;
(turtles)
&nbsp;
(define (repeat count function)
  (for ((i (in-range count))) (function)))
&nbsp;
(<strong>repeat</strong> 36
        (lambda ()
          (turn 10)
          (<strong>repeat</strong> 10
                  (lambda ()
                    (turn 36)
                    (draw 80)
                    (<strong>repeat</strong> 3
                            (lambda ()
                              (draw 30)
                              (turn 120)))))))
&nbsp;
(turtles #f)
(save-turtle-bitmap "22.png" 'png)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si nutnosti použití anonymní
funkce &ndash; lambdy.</div></p>

<img src="https://i.iinfo.cz/images/678/racket-graphics-24.png" class="image-380089" alt="&#160;" width="568" height="565" />
<p><i>Obrázek 25: Obrazec vytvořený pomocí opakování příkazů s&nbsp;využitím
<strong>repeat</strong>.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Další možnosti želví grafiky</h2>

<p>S&nbsp;využitím funkce <strong>repeat</strong> můžeme začít vytvářet i
složitější obrazce:</p>

<pre>
#lang racket/base
&nbsp;
(require graphics/turtles)
&nbsp;
(turtles)
&nbsp;
(define (repeat count function)
  (for ((i (in-range count))) (function)))
&nbsp;
(repeat 36
        (lambda ()
          (turn 10)
          (repeat 36
                  (lambda ()
                    (turn 10)
                    (draw 20)))))
&nbsp;
(turtles #f)
(save-turtle-bitmap "23.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-25.png" class="image-380090" alt="&#160;" width="481" height="492" />
<p><i>Obrázek 26: Obrazec vytvořený pomocí opakování příkazů s&nbsp;využitím
<strong>repeat</strong>.</i></p>

<p>Některé knihovny a systémy pro práci s&nbsp;želví grafikou umožňují použít
větší množství želv (tento koncept se objevil například i ve stařičkém Atari
Logu pro osmibitové mikropočítače Atari, kde pro tento účel sloužila funkce
<strong>TELL</strong>). Jakmile je vytvořena další želva (či želvy) budou
všechny želvy reagovat na další příkazy pro posun, kreslení, otočení atd.
Vytvoření želvy se provádí funkcí:</p>

<pre>
(split ...)
</pre>

<p>Důležité je, že se této funkci může přidat příkaz pro posun či pro otočení
želvy. Nová želva tedy nebude zcela totožná s&nbsp;původní želvou nebo želvami.
Ukažme si nyní použití několika želv, které budou postupně vytvářeny a budou
postupně kreslit části výsledného obrazce:</p>

<pre>
#lang racket/base
&nbsp;
(require graphics/turtles)
&nbsp;
(turtles)
&nbsp;
(define (repeat count function)
  (for ((i (in-range count))) (function)))
&nbsp;
(repeat 6
        (lambda ()
          (turn 60)
          (split (move 10))
          (repeat 36
                  (lambda ()
                    (turn 10)
                    (draw 20)))))
&nbsp;
(turtles #f)
(save-turtle-bitmap "24.png" 'png)
</pre>

<img src="https://i.iinfo.cz/images/678/racket-graphics-26.png" class="image-380091" alt="&#160;" width="462" height="496" />
<p><i>Obrázek 27: Obrazec vykreslený několika želvami.</i></p>

<p><div class="rs-tip-major">Poznámka: souběžná práce s&nbsp;více želvami má
jeden velmi nepříjemný důsledek &ndash; celé vykreslování se velmi podstatným
způsobem zpomalí. Již při použití desíti želv je zpomalení citelné.
Z&nbsp;tohoto důvodu je vhodné udržovat počet želv na relativně malých
hodnotách.</div></p>

<p>V&nbsp;dnešním posledním demonstračním příkladu použijeme pomocnou funkci
nazvanou <strong>radial-turtles</strong>, kterou nalezneme v&nbsp;knihovně
<strong>graphics/turtle-examples</strong>. Tato funkce slouží pro vytvoření
stanoveného počtu želv, které jsou rozmístěny po kružnici. Poté, co všem těmto
želvám zadáme vykreslení hvězdy, vznikne následující obrazec:</p>

<img src="https://i.iinfo.cz/images/678/racket-graphics-27.png" class="image-380092" alt="&#160;" width="312" height="319" /></p>
<p><i>Obrázek 28: Obrazec vykreslený několika želvami.</i></p>

<p>Zdrojový kód příkladu, v&nbsp;němž je použita výše zmíněná funkce
<strong></strong>, vypadá následovně:</p>

<pre>
#lang racket/base
&nbsp;
(require graphics/turtles)
(require graphics/turtle-examples)
&nbsp;
(turtles)
&nbsp;
(define (repeat count function)
  (for ((i (in-range count))) (function)))
&nbsp;
(radial-turtles 5)
&nbsp;
(move 120)
&nbsp;
(repeat 6
        (lambda ()
            (draw 30)
            (turn 144)))
&nbsp;
(turtles #f)
(save-turtle-bitmap "25.png" 'png)
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/lisp-families.git">https://github.com/tisnik/lisp-families.git</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, můžete
namísto toho použít odkazy na jednotlivé příklady, které naleznete
v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01-line.rkt</td><td>vykreslení úseček do bitmapy</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/01-line.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/01-line.rkt</a></td></tr>
<tr><td> 2</td><td>02-rectangle.rkt</td><td>vykreslení vyplněného obdélníku</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/02-rectangle.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/02-rectangle.rkt</a></td></tr>
<tr><td> 3</td><td>03-basic-styles.rkt</td><td>základní styly použité při vykreslování</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/03-basic-styles.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/03-basic-styles.rkt</a></td></tr>
<tr><td> 4</td><td>04-no-smoothing.rkt</td><td>úsečky vykreslené bez použití antialiasingu</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/04-no-smoothing.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/04-no-smoothing.rkt</a></td></tr>
<tr><td> 5</td><td>05-smoothed.rkt</td><td>úsečky vykreslené s&nbsp;použitím antialiasingu (první metoda)</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/05-smoothed.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/05-smoothed.rkt</a></td></tr>
<tr><td> 6</td><td>06-aligned.rkt</td><td>úsečky vykreslené s&nbsp;použitím antialiasingu (druhá metoda)</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/06-aligned.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/06-aligned.rkt</a></td></tr>
<tr><td> 7</td><td>07-smoothed-horlines.rkt</td><td>porovnání dvou podporovaných metod antialiasingu</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/07-smoothed-horlines.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/07-smoothed-horlines.rkt/</a></td></tr>
<tr><td> 8</td><td>08-aligned-horlines.rkt</td><td>porovnání dvou podporovaných metod antialiasingu</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/08-aligned-horlines.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/08-aligned-horlines.rkt</a></td></tr>
<tr><td> 9</td><td>09-pen-styles.rkt</td><td>styly kreslení perem</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/09-pen-styles.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/09-pen-styles.rkt</a></td></tr>
<tr><td>10</td><td>10-pen-cap.rkt</td><td>ukončení úseček a dalších typů segmentů</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/10-pen-cap.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/10-pen-cap.rkt</a></td></tr>
<tr><td>11</td><td>11-brushes.rkt</td><td>styly vyplňování štětcem</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/11-brushes.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/11-brushes.rkt</a></td></tr>
<tr><td>12</td><td>12-gradient.rkt</td><td>gradientní barvové přechody</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/12-gradient.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/12-gradient.rkt</a></td></tr>
<tr><td>13</td><td>13-paths.rkt</td><td>základ práce s&nbsp;cestami</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/13-paths.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/13-paths.rkt</a></td></tr>
<tr><td>14</td><td>14-racket-logo.rkt</td><td>vykreslení loga Racketu, první verze</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/14-racket-logo.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/14-racket-logo.rkt</a></td></tr>
<tr><td>15</td><td>15-racket-logo.rkt</td><td>vykreslení loga Racketu, druhá verze</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/15-racket-logo.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/15-racket-logo.rkt</a></td></tr>
<tr><td>16</td><td>16-spline.rkt</td><td>spline křivky</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/16-spline.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/16-spline.rkt</a></td></tr>
<tr><td>17</td><td>17-alpha.rkt</td><td>využití alfa kanálu při kreslení poloprůhledných objektů</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/17-alpha.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/17-alpha.rkt</a></td></tr>
<tr><td>18</td><td>18-text.rkt</td><td>vykreslení textu do bitmapy</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/18-text.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/18-text.rkt</a></td></tr>
<tr><td>19</td><td>19-turtles.rkt</td><td>želví grafika, posun želvy a otočení želvy</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/19-turtles.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/19-turtles.rkt</a></td></tr>
<tr><td>20</td><td>20-turtles-repeat.rkt</td><td>želví grafika a opakování příkazů funkcí <strong>repeat</strong></td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/20-turtles-repeat.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/20-turtles-repeat.rkt</a></td></tr>
<tr><td>21</td><td>21-turtles-move-offset.rkt</td><td>použití funkce <strong>move-offset</strong> pro relativní posun želvy</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/21-turtles-move-offset.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/21-turtles-move-offset.rkt</a></td></tr>
<tr><td>22</td><td>22-turtles-nested-repeats.rkt</td><td>vnořené &bdquo;smyčky&ldquo; typu <strong>repeat</strong></td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/22-turtles-nested-repeats.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/22-turtles-nested-repeats.rkt</a></td></tr>
<tr><td>23</td><td>23-turtles-no-split.rkt</td><td>vykreslení obrazce jednou želvou</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/23-turtles-no-split.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/23-turtles-no-split.rkt</a></td></tr>
<tr><td>24</td><td>24-turtles-split.rkt</td><td>vykreslení obrazce více želvami</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/24-turtles-split.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/24-turtles-split.rkt</a></td></tr>
<tr><td>25</td><td>25-radial-turtles.rkt</td><td>vykreslení obrazce více želvami, každá je natočena jiným směrem</td><td><a href="https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/25-radial-turtles.rkt">https://github.com/tisnik/lisp-families/blob/master/racket/graphics-libraries/25-radial-turtles.rkt</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Literatura</h2>

<ol>

<li>Peter Seibel<br />
<i>&bdquo;Practical Common Lisp&ldquo;</i><br />
2009
</li>

<li>Paul Graham<br />
<i>&bdquo;ANSI Common Lisp&ldquo;</i><br />
1995
</li>

<li>Gerald Gazdar<br />
<i>&bdquo;Natural Language Processing in Lisp: An Introduction to Computational Linguistics&ldquo;</i><br />
1989
</li>

<li>Peter Norvig<br />
<i>&bdquo;Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp&ldquo;</i><br />
1991
</li>

<li>Alex Mileler et.al.<br />
<i>&bdquo;Clojure Applied: From Practice to Practitioner&ldquo;</i><br />
2015
</li>

<li>
<i>&bdquo;Living Clojure: An Introduction and Training Plan for Developers&ldquo;</i><br />
2015
</li>

<li>Dmitri Sotnikov<br />
<i>&bdquo;Web Development with Clojure: Build Bulletproof Web Apps with Less Code&ldquo;</i><br />
2016
</li>

<li>McCarthy<br />
<i>&bdquo;Recursive functions of symbolic expressions and their computation by machine, part I&ldquo;</i><br />
1960
</li>

<li>R. Kent Dybvig<br />
<i>&bdquo;The Scheme Programming Language&ldquo;</i><br />
2009
</li>

<li>Max Hailperin<br />
<i>&bdquo;Concrete Abstractions&ldquo;</i><br />
1998
</li>

<li>Guy L. Steele<br />
<i>&bdquo;History of Scheme&ldquo;</i><br />
2006, Sun Microsystems Laboratories
</li>

<li>Kolář J., Muller K.:<br />
<i>&bdquo;Speciální programovací jazyky&ldquo;</i><br />
Praha 1981
</li>

<li>
<i>&bdquo;AutoLISP Release 9, Programmer's reference&ldquo;</i><br />
Autodesk Ltd., October 1987
</li>

<li>
<i>&bdquo;AutoLISP Release 10, Programmer's reference&ldquo;</i><br />
Autodesk Ltd., September 1988
</li>

<li>McCarthy, John; Abrahams, Paul W.; Edwards, Daniel J.; Hart, Timothy P.; Levin, Michael I.<br />
<i>&bdquo;LISP 1.5 Programmer's Manual&ldquo;</i><br />
MIT Press. ISBN 0 262 130 1 1 4
</li>

<li>Carl Hewitt; Peter Bishop and Richard Steiger<br />
<i>&bdquo;A Universal Modular Actor Formalism for Artificial Intelligence&ldquo;</i><br />
1973
</li>

<li>Feiman, J.<br />
<i>&bdquo;The Gartner Programming Language Survey (October 2001)&ldquo;</i><br />
Gartner Advisory
</li>

<li>Harold Abelson, Gerald Jay Sussman, Julie Sussman:<br />
<i>Structure and Interpretation of Computer Programs</i><br />
MIT Press. 1985, 1996 (a možná vyšel i další přetisk)
</li>

<li>Paul Graham<br />
<i>On Lisp</i><br />
Prentice Hall, 1993<br />
Dostupné online na stránce <a href="http://www.paulgraham.com/onlisptext.html">http://www.paulgraham.com/onlisptext.html</a>
</li>

<li>David S. Touretzky<br />
<i>Common LISP: A Gentle Introduction to Symbolic Computation (Dover Books on Engineering)</i><br />
</li>

<li>Peter Norvig<br />
<i>Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp</i>
</li>

<li>Patrick Winston, Berthold Horn<br />
<i>Lisp (3rd Edition)</i><br />
ISBN-13: 978-0201083194, ISBN-10: 0201083191
</li>

<li>Matthias Felleisen, David Van Horn, Dr. Conrad Barski<br>
<i>Realm of Racket: Learn to Program, One Game at a Time!</i><br />
ISBN-13: 978-1593274917, ISBN-10: 1593274912 
</li>

<li>Graham Hutton<br />
<i>A tutorial on the universality andexpressiveness of fold</i><br />
http://www.cs.nott.ac.uk/~pszgmh/fold.pdf
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Racket: programovací jazyk a současně i platforma pro vývoj nových jazyků<br />
<a href="https://www.root.cz/clanky/racket-programovaci-jazyk-a-soucasne-i-platforma-pro-vyvoj-novych-jazyku/">https://www.root.cz/clanky/racket-programovaci-jazyk-a-soucasne-i-platforma-pro-vyvoj-novych-jazyku/</a>
</li>

<li>Makra v Racketu i v dalších lispovských jazycích<br />
<a href="https://www.root.cz/clanky/makra-v-racketu-i-v-dalsich-lispovskych-jazycich/">https://www.root.cz/clanky/makra-v-racketu-i-v-dalsich-lispovskych-jazycich/</a>
</li>

<li>Základní knihovna jazyka Racket<br />
<a href="https://www.root.cz/clanky/zakladni-knihovna-jazyka-racket/">https://www.root.cz/clanky/zakladni-knihovna-jazyka-racket/</a>
</li>

<li>Grafický metaformát PostScript<br />
<a href="https://www.root.cz/clanky/graficky-metaformat-postscript/">https://www.root.cz/clanky/graficky-metaformat-postscript/</a>
</li>

<li>Vektorový grafický formát SVG<br />
<a href="https://www.root.cz/clanky/vektorovy-graficky-format-svg/">https://www.root.cz/clanky/vektorovy-graficky-format-svg/</a>
</li>

<li>The Racket Drawing Toolkit<br />
<a href="https://docs.racket-lang.org/draw/index.html">https://docs.racket-lang.org/draw/index.html</a>
</li>

<li>Traditional Turtles<br />
<a href="https://docs.racket-lang.org/turtles/Traditional_Turtles.html">https://docs.racket-lang.org/turtles/Traditional_Turtles.html</a>
</li>

<li>[racket] How best to repeat a function call n times?<br />
<a href="https://lists.racket-lang.org/users/archive/2014-September/064203.html">https://lists.racket-lang.org/users/archive/2014-September/064203.html</a>
</li>

<li>Racket: Macros<br />
<a href="https://www.it.uu.se/edu/course/homepage/avfunpro/ht13/lectures/Racket-3-Macros.pdf">https://www.it.uu.se/edu/course/homepage/avfunpro/ht13/lectures/Racket-3-Macros.pdf</a>
</li>

<li>Beautiful Racket / explainers: Macros<br />
<a href="https://beautifulracket.com/explainer/macros.html">https://beautifulracket.com/explainer/macros.html</a>
</li>

<li>Macros (dokumentace k Racketu)<br />
<a href="https://docs.racket-lang.org/guide/macros.html">https://docs.racket-lang.org/guide/macros.html</a>
</li>

<li>Model syntaxe jazyka Racket<br />
<a href="https://docs.racket-lang.org/reference/syntax-model.html">https://docs.racket-lang.org/reference/syntax-model.html</a>
</li>

<li>Syntax Objects<br />
<a href="https://docs.racket-lang.org/guide/stx-obj.html">https://docs.racket-lang.org/guide/stx-obj.html</a>
</li>

<li>Tech behind Tech: Clojure Macros Simplified<br />
<a href="http://techbehindtech.com/2010/09/28/clojure-macros-simplified/">http://techbehindtech.com/2010/09/28/clojure-macros-simplified/</a>
</li>

<li>Fatvat - Exploring functional programming: Clojure Macros<br />
<a href="http://www.fatvat.co.uk/2009/02/clojure-macros.html">http://www.fatvat.co.uk/2009/02/clojure-macros.html</a>
</li>

<li>Beautiful Racket: an intro­duction to language-oriented programming using Racket<br />
<a href="https://beautifulracket.com/">https://beautifulracket.com/</a>
</li>

<li>Stránky projektu Racket<br />
<a href="https://racket-lang.org/">https://racket-lang.org/</a>
</li>

<li>Dokumentace k&nbsp;projektu Racket<br />
<a href="https://docs.racket-lang.org/index.html">https://docs.racket-lang.org/index.html</a>
</li>

<li>Seznam dostupných balíčků pro Racket<br />
<a href="https://pkgs.racket-lang.org/">https://pkgs.racket-lang.org/</a>
</li>

<li>Racket na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/Racket_(programming_language)">https://en.wikipedia.org/wiki/Racket_(programming_language)</a>
</li>

<li>Blogy o Racketu a navazujících technologiích<br />
<a href="https://blog.racket-lang.org/">https://blog.racket-lang.org/</a>
</li>

<li>Prográmky psané v&nbsp;Racketu na RosettaCode<br />
<a href="http://rosettacode.org/wiki/Category:Racket">http://rosettacode.org/wiki/Category:Racket</a>
</li>

<li>Fear of Macros<br />
<a href="https://www.greghendershott.com/fear-of-macros/">https://www.greghendershott.com/fear-of-macros/</a>
</li>

<li>Rackjure<br />
<a href="https://github.com/greghendershott/rackjure">https://github.com/greghendershott/rackjure</a>
</li>

<li>Matthew Flatt’s proposal to change Racket’s s-expressions based syntax to infix representation creates a stir in the community<br />
<a href="https://hub.packtpub.com/matthew-flatts-proposal-to-change-rackets-s-expressions-based-syntax-to-infix-representation-creates-a-stir-in-the-community/">https://hub.packtpub.com/matthew-flatts-proposal-to-change-rackets-s-expressions-based-syntax-to-infix-representation-creates-a-stir-in-the-community/</a>
</li>

<li>Racket News<br />
<a href="https://racket-news.com/">https://racket-news.com/</a>
</li>

<li>Racket: Lisp for learning<br />
<a href="https://lwn.net/Articles/795385/">https://lwn.net/Articles/795385/</a>
</li>

<li>Future of Racket<br />
<a href="https://www.greghendershott.com/2019/07/future-of-racket.html">https://www.greghendershott.com/2019/07/future-of-racket.html</a>
</li>

<li>Kawa: Compiling Scheme to Java<br />
<a href="https://www.mit.edu/afs.new/sipb/project/kawa/doc/kawa-tour.html">https://www.mit.edu/afs.new/sipb/project/kawa/doc/kawa-tour.html</a>
</li>

<li>Kawa in Languages shootout<br />
<a href="http://per.bothner.com/blog/2010/Kawa-in-shootout/">http://per.bothner.com/blog/2010/Kawa-in-shootout/</a>
</li>

<li>Kawa 2.0 Supports Scheme R7RS<br />
<a href="https://developers.slashdot.org/story/14/12/13/2259225/kawa-20-supports-scheme-r7rs/">https://developers.slashdot.org/story/14/12/13/2259225/kawa-20-supports-scheme-r7rs/</a>
</li>

<li>Kawa — fast scripting on the Java platform<br />
<a href="https://lwn.net/Articles/623349/">https://lwn.net/Articles/623349/</a>
</li>

<li>Tail call (a její optimalizace)<br />
<a href="https://en.wikipedia.org/wiki/Tail_call">https://en.wikipedia.org/wiki/Tail_call</a>
</li>

<li>SLIME (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/SLIME">http://en.wikipedia.org/wiki/SLIME</a>
</li>

<li>slime.vim<br />
<a href="http://s3.amazonaws.com/mps/slime.vim">http://s3.amazonaws.com/mps/slime.vim</a>
</li>

<li>What are the best scheme implementations?<br />
<a href="https://www.slant.co/topics/5282/~scheme-implementations">https://www.slant.co/topics/5282/~scheme-implementations</a>
</li>

<li>Bigloo homepage<br />
<a href="http://www-sop.inria.fr/mimosa/fp/Bigloo/">http://www-sop.inria.fr/mimosa/fp/Bigloo/</a>
</li>

<li>FTP s tarbally Bigloo<br />
<a href="ftp://ftp-sop.inria.fr/indes/fp/Bigloo">ftp://ftp-sop.inria.fr/indes/fp/Bigloo</a>
</li>

<li>GOTO 2018 • Functional Programming in 40 Minutes • Russ Olsen<br />
<a href="https://www.youtube.com/watch?v=0if71HOyVjY">https://www.youtube.com/watch?v=0if71HOyVjY</a>
</li>

<li>TinyScheme (stránka na Sourceforge)<br />
<a href="http://tinyscheme.sourceforge.net/home.html">http://tinyscheme.sourceforge.net/home.html</a>
</li>

<li>Embedding Tiny Scheme in a Game<br />
<a href="http://www.silicondelight.com/embedding-tiny-scheme-in-a-game/">http://www.silicondelight.com/embedding-tiny-scheme-in-a-game/</a>
</li>

<li>Embedding Scheme for a game mission scripting DSL<br />
<a href="http://carloscarrasco.com/embedding-scheme-for-a-game-mission-scripting-dsl.html">http://carloscarrasco.com/embedding-scheme-for-a-game-mission-scripting-dsl.html</a>
</li>

<li>Všechny verze TinyScheme na SourceForge<br />
<a href="https://sourceforge.net/projects/tinyscheme/files/tinyscheme/">https://sourceforge.net/projects/tinyscheme/files/tinyscheme/</a>
</li>

<li>Fork TinyScheme na GitHubu<br />
<a href="https://github.com/yawnt/tinyscheme">https://github.com/yawnt/tinyscheme</a>
</li>

<li>Ackermannova funkce<br />
<a href="https://cs.wikipedia.org/wiki/Ackermannova_funkce">https://cs.wikipedia.org/wiki/Ackermannova_funkce</a>
</li>

<li>Ackermann function na Rosetta Code<br />
<a href="https://rosettacode.org/wiki/Ackermann_function#Scheme">https://rosettacode.org/wiki/Ackermann_function#Scheme</a>
</li>

<li>Success Stories (lisp.org)<br />
<a href="https://lisp-lang.org/success/">https://lisp-lang.org/success/</a>
</li>

<li>Allegro Common Lisp Success Stories<br />
<a href="https://franz.com/success/">https://franz.com/success/</a>
</li>

<li>Clojure Success Stories<br />
<a href="https://clojure.org/community/success_stories">https://clojure.org/community/success_stories</a>
</li>

<li>Scheme Quick Reference<br />
<a href="https://www.st.cs.uni-saarland.de/edu/config-ss04/scheme-quickref.pdf">https://www.st.cs.uni-saarland.de/edu/config-ss04/scheme-quickref.pdf</a>
</li>

<li>Slajdy o Scheme (od slajdu číslo 15)<br />
<a href="https://docs.google.com/presentation/d/1abmDnKjrq1tcjGvvRNAKhOiSTSE2lyagtcEPal07Gbo/edit">https://docs.google.com/presentation/d/1abmDnKjrq1tcjGvvRNAKhOiSTSE2lyagtcEPal07Gbo/edit</a>
</li>

<li>Scheme Cheat Sheet<br />
<a href="https://github.com/smythp/scheme-cheat-sheet">https://github.com/smythp/scheme-cheat-sheet</a>
</li>

<li>Embedding Lua, embedding Guile <br />
<a href="http://puntoblogspot.blogspot.com/2013/04/embedding-lua-embedding-guile.html">http://puntoblogspot.blogspot.com/2013/04/embedding-lua-embedding-guile.html</a>
</li>

<li>Lambda Papers<br />
<a href="https://en.wikisource.org/wiki/Lambda_Papers">https://en.wikisource.org/wiki/Lambda_Papers</a>
</li>

<li>Revised<sup>7</sup>Report on the Algorithmic Language Scheme<br />
<a href="https://small.r7rs.org/attachment/r7rs.pdf">https://small.r7rs.org/attachment/r7rs.pdf</a>
</li>

<li>Video Lectures (MIT, SICP 2005)<br />
<a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/">https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/</a>
</li>

<li>Why is Scheme my first language in university?<br />
<a href="https://softwareengineering.stackexchange.com/questions/115252/why-is-scheme-my-first-language-in-university">https://softwareengineering.stackexchange.com/questions/115252/why-is-scheme-my-first-language-in-university</a>
</li>

<li>The Perils of JavaSchools<br />
<a href="https://www.joelonsoftware.com/2005/12/29/the-perils-of-javaschools-2/">https://www.joelonsoftware.com/2005/12/29/the-perils-of-javaschools-2/</a>
</li>

<li>How to Design Programs, Second Edition<br />
<a href="https://htdp.org/2019-02-24/index.html">https://htdp.org/2019-02-24/index.html</a>
</li>

<li>LilyPond<br />
<a href="http://lilypond.org/">http://lilypond.org/</a>
</li>

<li>LilyPond — Extending (přes Scheme)<br />
<a href="http://lilypond.org/doc/v2.18/Documentation/extending/scheme-tutorial">http://lilypond.org/doc/v2.18/Documentation/extending/scheme-tutorial</a>
</li>

<li>Scheme in LilyPond<br />
<a href="http://lilypond.org/doc/v2.18/Documentation/extending/scheme-in-lilypond">http://lilypond.org/doc/v2.18/Documentation/extending/scheme-in-lilypond</a>
</li>

<li>GnuCash<br />
<a href="http://www.gnucash.org/">http://www.gnucash.org/</a>
</li>

<li>Custom Reports (in GNU Cash)<br />
<a href="https://wiki.gnucash.org/wiki/Custom_Reports">https://wiki.gnucash.org/wiki/Custom_Reports</a>
</li>

<li>Program by Design<br />
<a href="https://programbydesign.org/">https://programbydesign.org/</a>
</li>

<li>SchemePy<br />
<a href="https://pypi.org/project/SchemePy/">https://pypi.org/project/SchemePy/</a>
</li>

<li>LISP FQA: Section - [1-5] What is the "minimal" set of primitives needed for a Lisp interpreter?<br />
<a href="http://www.faqs.org/faqs/lisp-faq/part1/section-6.html">http://www.faqs.org/faqs/lisp-faq/part1/section-6.html</a>
</li>

<li>femtolisp<br />
<a href="https://github.com/JeffBezanson/femtolisp">https://github.com/JeffBezanson/femtolisp</a>
</li>

<li>(How to Write a (Lisp) Interpreter (in Python))<br />
<a href="http://norvig.com/lispy.html">http://norvig.com/lispy.html</a>
</li>

<li>Repositář s&nbsp;Guile Emacsem<br />
<a href="http://git.hcoop.net/?p=bpt/guile.git">http://git.hcoop.net/?p=bpt/guile.git</a>
</li>

<li>Interacting with Guile Compound Data Types in C<br />
<a href="http://www.lonelycactus.com/guilebook/x1555.html">http://www.lonelycactus.com/guilebook/x1555.html</a>
</li>

<li>Calling Guile functions from C<br />
<a href="http://www.lonelycactus.com/guilebook/c1204.html#SECCALLGUILEFUNC">http://www.lonelycactus.com/guilebook/c1204.html#SECCALLGUILEFUNC</a>
</li>

<li>Arrays, and other compound data types<br />
<a href="http://www.lonelycactus.com/guilebook/charrays.html">http://www.lonelycactus.com/guilebook/charrays.html</a>
</li>

<li>Interacting with Guile Compound Data Types in C<br />
<a href="http://www.lonelycactus.com/guilebook/x1555.html">http://www.lonelycactus.com/guilebook/x1555.html</a>
</li>

<li>Guile Reference Manual<br />
<a href="https://www.gnu.org/software/guile/manual/html_node/index.html">https://www.gnu.org/software/guile/manual/html_node/index.html</a>
</li>

<li>Scheme: Summary of Common Syntax<br />
<a href="https://www.gnu.org/software/guile/manual/html_node/Syntax-Summary.html#Syntax-Summary">https://www.gnu.org/software/guile/manual/html_node/Syntax-Summary.html#Syntax-Summary</a>
</li>

<li>Scripting with Guile: Extension language enhances C and Scheme<br />
<a href="https://www.ibm.com/developerworks/library/l-guile/index.html">https://www.ibm.com/developerworks/library/l-guile/index.html</a>
</li>

<li>Having fun with Guile: a tutorial<br />
<a href="http://dustycloud.org/misc/guile-tutorial.html">http://dustycloud.org/misc/guile-tutorial.html</a>
</li>

<li>Guile: Loading Readline Support<br />
<a href="https://www.gnu.org/software/guile/manual/html_node/Loading-Readline-Support.html#Loading-Readline-Support">https://www.gnu.org/software/guile/manual/html_node/Loading-Readline-Support.html#Loading-Readline-Support</a>
</li>

<li>lispy<br />
<a href="https://pypi.org/project/lispy/">https://pypi.org/project/lispy/</a>
</li>

<li>Lython<br />
<a href="https://pypi.org/project/Lython/">https://pypi.org/project/Lython/</a>
</li>

<li>Lizpop<br />
<a href="https://pypi.org/project/lizpop/">https://pypi.org/project/lizpop/</a>
</li>

<li>Budoucnost programovacích jazyků<br />
<a href="http://www.knesl.com/budoucnost-programovacich-jazyku">http://www.knesl.com/budoucnost-programovacich-jazyku</a>
</li>

<li>LISP Prolog and Evolution<br />
<a href="http://blog.samibadawi.com/2013/05/lisp-prolog-and-evolution.html">http://blog.samibadawi.com/2013/05/lisp-prolog-and-evolution.html</a>
</li>

<li>List of Lisp-family programming languages<br />
<a href="https://en.wikipedia.org/wiki/List_of_Lisp-family_programming_languages">https://en.wikipedia.org/wiki/List_of_Lisp-family_programming_languages</a>
</li>

<li>clojure_py na indexu PyPi<br />
<a href="https://pypi.python.org/pypi/clojure_py">https://pypi.python.org/pypi/clojure_py</a>
</li>

<li>PyClojure<br />
<a href="https://github.com/eigenhombre/PyClojure">https://github.com/eigenhombre/PyClojure</a>
</li>

<li>Hy na GitHubu<br />
<a href="https://github.com/hylang/hy">https://github.com/hylang/hy</a>
</li>

<li>Hy: The survival guide<br />
<a href="https://notes.pault.ag/hy-survival-guide/">https://notes.pault.ag/hy-survival-guide/</a>
</li>

<li>Hy běžící na monitoru terminálu společnosti Symbolics<br />
<a href="http://try-hy.appspot.com/">http://try-hy.appspot.com/</a>
</li>

<li>Welcome to Hy’s documentation!<br />
<a href="http://docs.hylang.org/en/stable/">http://docs.hylang.org/en/stable/</a>
</li>

<li>Hy na PyPi<br />
<a href="https://pypi.org/project/hy/#description">https://pypi.org/project/hy/#description</a>
</li>

<li>Getting Hy on Python<br />
<a href="https://lwn.net/Articles/596626/">https://lwn.net/Articles/596626/</a>
</li>

<li>Programming Can Be Fun with Hy<br />
<a href="https://opensourceforu.com/2014/02/programming-can-fun-hy/">https://opensourceforu.com/2014/02/programming-can-fun-hy/</a>
</li>

<li>Přednáška o projektu Hy (pětiminutový lighttalk)<br />
<a href="http://blog.pault.ag/day/2013/04/02">http://blog.pault.ag/day/2013/04/02</a>
</li>

<li>Hy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Hy">https://en.wikipedia.org/wiki/Hy</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Point<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Point.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Point.html</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Narrowing<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Narrowing.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Narrowing.html</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Functions that Create Markers<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Markers.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Markers.html</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Motion<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion.html#Motion">https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion.html#Motion</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Basic Char Syntax<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Char-Syntax.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Char-Syntax.html</a>
</li>

<li>Elisp: Sequence: List, Array<br />
<a href="http://ergoemacs.org/emacs/elisp_list_vs_vector.html">http://ergoemacs.org/emacs/elisp_list_vs_vector.html</a>
</li>

<li>Elisp: Property List<br />
<a href="http://ergoemacs.org/emacs/elisp_property_list.html">http://ergoemacs.org/emacs/elisp_property_list.html</a>
</li>

<li>Elisp: Hash Table<br />
<a href="http://ergoemacs.org/emacs/elisp_hash_table.html">http://ergoemacs.org/emacs/elisp_hash_table.html</a>
</li>

<li>Elisp: Association List<br />
<a href="http://ergoemacs.org/emacs/elisp_association_list.html">http://ergoemacs.org/emacs/elisp_association_list.html</a>
</li>

<li>The mapcar Function (An Introduction to Programming in Emacs Lisp)<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/mapcar.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/mapcar.html</a>
</li>

<li>Anaphoric macro<br />
<a href="https://en.wikipedia.org/wiki/Anaphoric_macro">https://en.wikipedia.org/wiki/Anaphoric_macro</a>
</li>

<li>Some Common Lisp Loop Macro Examples<br />
<a href="https://www.youtube.com/watch?v=3yl8o6r_omw">https://www.youtube.com/watch?v=3yl8o6r_omw</a>
</li>

<li>A Guided Tour of Emacs<br />
<a href="https://www.gnu.org/software/emacs/tour/">https://www.gnu.org/software/emacs/tour/</a>
</li>

<li>The Roots of Lisp<br />
<a href="http://www.paulgraham.com/rootsoflisp.html">http://www.paulgraham.com/rootsoflisp.html</a>
</li>

<li>Evil (Emacs Wiki)<br />
<a href="https://www.emacswiki.org/emacs/Evil">https://www.emacswiki.org/emacs/Evil</a>
</li>

<li>Evil (na GitHubu)<br />
<a href="https://github.com/emacs-evil/evil">https://github.com/emacs-evil/evil</a>
</li>

<li>Evil (na stránkách repositáře MELPA)<br />
<a href="https://melpa.org/#/evil">https://melpa.org/#/evil</a>
</li>

<li>Evil Mode: How I Switched From VIM to Emacs<br />
<a href="https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html">https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html</a>
</li>

<li>GNU Emacs (home page)<br />
<a href="https://www.gnu.org/software/emacs/">https://www.gnu.org/software/emacs/</a>
</li>

<li>GNU Emacs (texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?GnuEmacs">http://texteditors.org/cgi-bin/wiki.pl?GnuEmacs</a>
</li>

<li>An Introduction To Using GDB Under Emacs<br />
<a href="http://tedlab.mit.edu/~dr/gdbintro.html">http://tedlab.mit.edu/~dr/gdbintro.html</a>
</li>

<li>An Introduction to Programming in Emacs Lisp<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html</a>
</li>

<li>27.6 Running Debuggers Under Emacs<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html</a>
</li>

<li>GdbMode<br />
<a href="http://www.emacswiki.org/emacs/GdbMode">http://www.emacswiki.org/emacs/GdbMode</a>
</li>

<li>Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Emacs">https://en.wikipedia.org/wiki/Emacs</a>
</li>

<li>Emacs timeline<br />
<a href="http://www.jwz.org/doc/emacs-timeline.html">http://www.jwz.org/doc/emacs-timeline.html</a>
</li>

<li>Emacs Text Editors Family<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?EmacsFamily">http://texteditors.org/cgi-bin/wiki.pl?EmacsFamily</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse (část 2: vyhledávání a nahrazování textu)<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/</a>
</li>

<li>Emacs/Evil-mode - A basic reference to using evil mode in Emacs<br />
<a href="http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet">http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet</a>
</li>

<li>From Vim to Emacs+Evil chaotic migration guide<br />
<a href="https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/">https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/</a>
</li>

<li>Introduction to evil-mode {video)<br />
<a href="https://www.youtube.com/watch?v=PeVQwYUxYEg">https://www.youtube.com/watch?v=PeVQwYUxYEg</a>
</li>

<li>EINE (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/EINE">http://www.emacswiki.org/emacs/EINE</a>
</li>

<li>EINE (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?EINE">http://texteditors.org/cgi-bin/wiki.pl?EINE</a>
</li>

<li>ZWEI (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/ZWEI">http://www.emacswiki.org/emacs/ZWEI</a>
</li>

<li>ZWEI (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?ZWEI">http://texteditors.org/cgi-bin/wiki.pl?ZWEI</a>
</li>

<li>Zmacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Zmacs">https://en.wikipedia.org/wiki/Zmacs</a>
</li>

<li>Zmacs (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?Zmacs">http://texteditors.org/cgi-bin/wiki.pl?Zmacs</a>
</li>

<li>TecoEmacs (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/TecoEmacs">http://www.emacswiki.org/emacs/TecoEmacs</a>
</li>

<li>Micro Emacs<br />
<a href="http://www.emacswiki.org/emacs/MicroEmacs">http://www.emacswiki.org/emacs/MicroEmacs</a>
</li>

<li>Micro Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MicroEMACS">https://en.wikipedia.org/wiki/MicroEMACS</a>
</li>

<li>EmacsHistory<br />
<a href="http://www.emacswiki.org/emacs/EmacsHistory">http://www.emacswiki.org/emacs/EmacsHistory</a>
</li>

<li>Seznam editorů s ovládáním podobným Emacsu či kompatibilních s příkazy Emacsu<br />
<a href="http://www.finseth.com/emacs.html">http://www.finseth.com/emacs.html</a>
</li>

<li>evil-numbers<br />
<a href="https://github.com/cofi/evil-numbers">https://github.com/cofi/evil-numbers</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (1.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (2.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v editorech Emacs a Vim<br />
<a href="https://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">https://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Org mode<br />
<a href="https://orgmode.org/">https://orgmode.org/</a>
</li>

<li>The Org Manual<br />
<a href="https://orgmode.org/manual/index.html">https://orgmode.org/manual/index.html</a>
</li>

<li>Kakoune (modální textový editor)<br />
<a href="http://kakoune.org/">http://kakoune.org/</a>
</li>

<li>Vim-style keybinding in Emacs/Evil-mode<br />
<a href="https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8">https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8</a>
</li>

<li>Emacs - jak začít<br />
<a href="http://www.abclinuxu.cz/clanky/navody/emacs-jak-zacit">http://www.abclinuxu.cz/clanky/navody/emacs-jak-zacit</a>
</li>

<li>Programovací jazyk LISP a LISP machines<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/">https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/</a>
</li>

<li>Evil-surround<br />
<a href="https://github.com/emacs-evil/evil-surround">https://github.com/emacs-evil/evil-surround</a>
</li>

<li>Spacemacs<br />
<a href="http://spacemacs.org/">http://spacemacs.org/</a>
</li>

<li>Lisp: Common Lisp, Racket, Clojure, Emacs Lisp<br />
<a href="http://hyperpolyglot.org/lisp">http://hyperpolyglot.org/lisp</a>
</li>

<li>Common Lisp, Scheme, Clojure, And Elisp Compared<br />
<a href="http://irreal.org/blog/?p=725">http://irreal.org/blog/?p=725</a>
</li>

<li>Does Elisp Suck?<br />
<a href="http://irreal.org/blog/?p=675">http://irreal.org/blog/?p=675</a>
</li>

<li>Emacs pro mírně pokročilé (9): Elisp<br />
<a href="https://www.root.cz/clanky/emacs-elisp/">https://www.root.cz/clanky/emacs-elisp/</a>
</li>

<li>If I want to learn lisp, are emacs and elisp a good choice?<br />
<a href="https://www.reddit.com/r/emacs/comments/2m141y/if_i_want_to_learn_lisp_are_emacs_and_elisp_a/">https://www.reddit.com/r/emacs/comments/2m141y/if_i_want_to_learn_lisp_are_emacs_and_elisp_a/</a>
</li>

<li>Clojure(Script) Interactive Development Environment that Rocks!<br />
<a href="https://github.com/clojure-emacs/cider">https://github.com/clojure-emacs/cider</a>
</li>

<li>An Introduction to Emacs Lisp<br />
<a href="https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html">https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html</a>
</li>

<li>Emergency Elisp<br />
<a href="http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html">http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html</a>
</li>

<li>Lambda calculus<br />
<a href="https://en.wikipedia.org/wiki/Lambda_calculus">https://en.wikipedia.org/wiki/Lambda_calculus</a>
</li>

<li>John McCarthy's original LISP paper from 1959<br />
<a href="https://www.reddit.com/r/programming/comments/17lpz4/john_mccarthys_original_lisp_paper_from_1959/">https://www.reddit.com/r/programming/comments/17lpz4/john_mccarthys_original_lisp_paper_from_1959/</a>
</li>

<li>Micro Manual LISP<br />
<a href="https://www.scribd.com/document/54050141/Micro-Manual-LISP">https://www.scribd.com/document/54050141/Micro-Manual-LISP</a>
</li>

<li>How Lisp Became God's Own Programming Language<br />
<a href="https://twobithistory.org/2018/10/14/lisp.html">https://twobithistory.org/2018/10/14/lisp.html</a>
</li>

<li>History of Lisp<br />
<a href="http://jmc.stanford.edu/articles/lisp/lisp.pdf">http://jmc.stanford.edu/articles/lisp/lisp.pdf</a>
</li>

<li>The Roots of Lisp<br />
<a href="http://languagelog.ldc.upenn.edu/myl/llog/jmc.pdf">http://languagelog.ldc.upenn.edu/myl/llog/jmc.pdf</a>
</li>

<li>Racket<br />
<a href="https://racket-lang.org/">https://racket-lang.org/</a>
</li>

<li>The Racket Manifesto<br />
<a href="http://felleisen.org/matthias/manifesto/">http://felleisen.org/matthias/manifesto/</a>
</li>

<li>MIT replaces Scheme with Python<br />
<a href="https://www.johndcook.com/blog/2009/03/26/mit-replaces-scheme-with-python/">https://www.johndcook.com/blog/2009/03/26/mit-replaces-scheme-with-python/</a>
</li>

<li>Adventures in Advanced Symbolic Programming<br />
<a href="http://groups.csail.mit.edu/mac/users/gjs/6.945/">http://groups.csail.mit.edu/mac/users/gjs/6.945/</a>
</li>

<li>Why MIT Switched from Scheme to Python (2009)<br />
<a href="https://news.ycombinator.com/item?id=14167453">https://news.ycombinator.com/item?id=14167453</a>
</li>

<li>Starodávná stránka XLispu<br />
<a href="http://www.xlisp.org/">http://www.xlisp.org/</a>
</li>

<li>AutoLISP<br />
<a href="https://en.wikipedia.org/wiki/AutoLISP">https://en.wikipedia.org/wiki/AutoLISP</a>
</li>

<li>Seriál PicoLisp: minimalistický a výkonný interpret Lispu<br />
<a href="https://www.root.cz/serialy/picolisp-minimalisticky-a-vykonny-interpret-lispu/">https://www.root.cz/serialy/picolisp-minimalisticky-a-vykonny-interpret-lispu/</a>
</li>

<li>Common Lisp<br />
<a href="https://common-lisp.net/">https://common-lisp.net/</a>
</li>

<li>Getting Going with Common Lisp<br />
<a href="https://cliki.net/Getting%20Started">https://cliki.net/Getting%20Started</a>
</li>

<li>Online Tutorial (Common Lisp)<br />
<a href="https://cliki.net/online%20tutorial">https://cliki.net/online%20tutorial</a>
</li>

<li>Guile Emacs<br />
<a href="https://www.emacswiki.org/emacs/GuileEmacs">https://www.emacswiki.org/emacs/GuileEmacs</a>
</li>

<li>Guile Emacs History<br />
<a href="https://www.emacswiki.org/emacs/GuileEmacsHistory">https://www.emacswiki.org/emacs/GuileEmacsHistory</a>
</li>

<li>Guile is a programming language<br />
<a href="https://www.gnu.org/software/guile/">https://www.gnu.org/software/guile/</a>
</li>

<li>MIT Scheme<br />
<a href="http://groups.csail.mit.edu/mac/projects/scheme/">http://groups.csail.mit.edu/mac/projects/scheme/</a>
</li>

<li>SIOD: Scheme in One Defun<br />
<a href="http://people.delphiforums.com/gjc//siod.html">http://people.delphiforums.com/gjc//siod.html</a>
</li>

<li>CommonLispForEmacs<br />
<a href="https://www.emacswiki.org/emacs/CommonLispForEmacs">https://www.emacswiki.org/emacs/CommonLispForEmacs</a>
</li>

<li>Elisp: print, princ, prin1, format, message<br />
<a href="http://ergoemacs.org/emacs/elisp_printing.html">http://ergoemacs.org/emacs/elisp_printing.html</a>
</li>

<li>Special Forms in Lisp<br />
<a href="http://www.nhplace.com/kent/Papers/Special-Forms.html">http://www.nhplace.com/kent/Papers/Special-Forms.html</a>
</li>

<li>Basic Building Blocks in LISP<br />
<a href="https://www.tutorialspoint.com/lisp/lisp_basic_syntax.htm">https://www.tutorialspoint.com/lisp/lisp_basic_syntax.htm</a>
</li>

<li>Introduction to LISP - University of Pittsburgh<br />
<a href="https://people.cs.pitt.edu/~milos/courses/cs2740/Lectures/LispTutorial.pdf">https://people.cs.pitt.edu/~milos/courses/cs2740/Lectures/LispTutorial.pdf</a>
</li>

<li>Why don't people use LISP<br />
<a href="https://forums.freebsd.org/threads/why-dont-people-use-lisp.24572/">https://forums.freebsd.org/threads/why-dont-people-use-lisp.24572/</a>
</li>

<li>Structured program theorem<br />
<a href="https://en.wikipedia.org/wiki/Structured_program_theorem">https://en.wikipedia.org/wiki/Structured_program_theorem</a>
</li>

<li>Clojure: API Documentation<br />
<a href="https://clojure.org/api/api">https://clojure.org/api/api</a>
</li>

<li>Tutorial for the Common Lisp Loop Macro<br />
<a href="http://www.ai.sri.com/pkarp/loop.html">http://www.ai.sri.com/pkarp/loop.html</a>
</li>

<li>Common Lisp's Loop Macro Examples for Beginners<br />
<a href="http://www.unixuser.org/~euske/doc/cl/loop.html">http://www.unixuser.org/~euske/doc/cl/loop.html</a>
</li>

<li>A modern list api for Emacs. No 'cl required.<br />
<a href="https://github.com/magnars/dash.el">https://github.com/magnars/dash.el</a>
</li>

<li>The LOOP Facility<br />
<a href="http://www.lispworks.com/documentation/HyperSpec/Body/06_a.htm">http://www.lispworks.com/documentation/HyperSpec/Body/06_a.htm</a>
</li>

<li>Clojure.org: Vars and the Global Environment<br />
<a href="http://clojure.org/Vars">http://clojure.org/Vars</a>
</li>

<li>Clojure.org: Refs and Transactions<br />
<a href="http://clojure.org/Refs">http://clojure.org/Refs</a>
</li>

<li>Clojure.org: Atoms<br />
<a href="http://clojure.org/Atoms">http://clojure.org/Atoms</a>
</li>

<li>Clojure.org: Agents as Asynchronous Actions<br />
<a href="http://clojure.org/agents">http://clojure.org/agents</a>
</li>

<li>Transient Data Structures
<a href="http://clojure.org/transients">http://clojure.org/transients</a>
</li>

<li>Dynamic Languages Strike Back<br />
<a href="http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html">http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html</a>
</li>

<li>Scripting: Higher Level Programming for the 21st Century<br />
<a href="http://www.tcl.tk/doc/scripting.html">http://www.tcl.tk/doc/scripting.html</a>
</li>

<li>Clojure (na Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Clojure">http://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Clojure (na Wikipedia CS)<br />
<a href="http://cs.wikipedia.org/wiki/Clojure">http://cs.wikipedia.org/wiki/Clojure</a>
</li>

<li>SICP (The Structure and Interpretation of Computer Programs)<br />
<a href="http://mitpress.mit.edu/sicp/">http://mitpress.mit.edu/sicp/</a>
</li>

<li>Pure function<br />
<a href="http://en.wikipedia.org/wiki/Pure_function">http://en.wikipedia.org/wiki/Pure_function</a>
</li>

<li>Funkcionální programování<br />
<a href="http://cs.wikipedia.org/wiki/Funkcionální_programování">http://cs.wikipedia.org/wiki/Funkcionální_programování</a>
</li>

<li>Jazyky Hy a Clojure-py: moderní dialekty LISPu určené pro Python VM<br />
<a href="https://www.root.cz/clanky/jazyky-hy-a-clojure-py-moderni-dialekty-lispu-urcene-pro-python-vm/">https://www.root.cz/clanky/jazyky-hy-a-clojure-py-moderni-dialekty-lispu-urcene-pro-python-vm/</a>
</li>

<li>Pixie: lehký skriptovací jazyk s „kouzelnými“ schopnostmi<br />
<a href="https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/">https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/</a>
</li>

<li>Programovací jazyk Pixie: funkce ze základní knihovny a použití FFI<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/">https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/</a>
</li>

<li>Stránka projektu Jython<br />
<a href="http://www.jython.org/">http://www.jython.org/</a>
</li>

<li>Jython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Jython">https://en.wikipedia.org/wiki/Jython</a>
</li>

<li>Scripting for the Java Platform (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Scripting_for_the_Java_Platform">https://en.wikipedia.org/wiki/Scripting_for_the_Java_Platform</a>
</li>

<li>JSR 223: Scripting for the Java<sup>TM</sup> Platform<br />
<a href="https://jcp.org/en/jsr/detail?id=223">https://jcp.org/en/jsr/detail?id=223</a>
</li>

<li>List of JVM languages<br />
<a href="https://en.wikipedia.org/wiki/List_of_JVM_languages">https://en.wikipedia.org/wiki/List_of_JVM_languages</a>
</li>

<li>The Java<sup>TM</sup> Virtual Machine Specification, Second Edition<br />
<a href="http://java.sun.com/docs/books/jvms/second_edition/html/VMSpecTOC.doc.html">http://java.sun.com/docs/books/jvms/second_edition/html/VMSpecTOC.doc.html</a>
</li>

<li>The class File Format<br />
<a href="http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html">http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html</a>
</li>

<li>javap - The Java Class File Disassembler<br />
<a href="http://docs.oracle.com/javase/1.4.2/docs/tooldocs/windows/javap.html">http://docs.oracle.com/javase/1.4.2/docs/tooldocs/windows/javap.html</a>
</li>

<li>javap-java-1.6.0-openjdk(1) - Linux man page<br />
<a href="http://linux.die.net/man/1/javap-java-1.6.0-openjdk">http://linux.die.net/man/1/javap-java-1.6.0-openjdk</a>
</li>

<li>Using javap<br />
<a href="http://www.idevelopment.info/data/Programming/java/miscellaneous_java/Using_javap.html">http://www.idevelopment.info/data/Programming/java/miscellaneous_java/Using_javap.html</a>
</li>

<li>Examine class files with the javap command<br />
<a href="http://www.techrepublic.com/article/examine-class-files-with-the-javap-command/5815354">http://www.techrepublic.com/article/examine-class-files-with-the-javap-command/5815354</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

