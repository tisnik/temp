<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Jemný úvod do rozsáhlého světa jazyků LISP a Scheme</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Jemný úvod do rozsáhlého světa jazyků LISP a Scheme</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Jemný úvod do rozsáhlého světa jazyků LISP a Scheme</a></p>
<p><a href="#k02">*** 2. Stručná historie vzniku programovacího jazyka LISP</a></p>
<p><a href="#k03">*** 3. LISP a umělá inteligence</a></p>
<p><a href="#k04">*** 4. Vznik interaktivní smyčky REPL</a></p>
<p><a href="#k05">*** 5. M-výrazy a S-výrazy</a></p>
<p><a href="#k06">*** 6. Rozsáhlý a chaotický svět dialektů programovacího jazyka LISP</a></p>
<p><a href="#k07">*** 7. LISP jako koncept, nikoli konkrétní dialekt</a></p>
<p><a href="#k08">*** 8. Již popsané dialekty LISPu a Scheme</a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. Další programovací jazyky inspirované LISPem</a></p>
<p><a href="#k17">*** 17. Jazyk Logo</a></p>
<p><a href="#k18">*** 18. Jazyk TCL</a></p>
<p><a href="#k19">*** 19. Literatura</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Jemný úvod do rozsáhlého světa jazyků LISP a Scheme</h2>

<p><i>&bdquo;A computer without COBOL and FORTRAN is like a piece of chocolate cake without ketchup or mustard.&ldquo;</i></p>

<p>V&nbsp;tomto prázdninovém miniseriálu se seznámíme s&nbsp;významnými implementacemi programovacího jazyka LISP, Scheme a i některých odvozených jazyků, mezi něž patří zejména jazyk Clojure a jeho deriváty. Svět LISPovských jazyků je dnes velmi rozsáhlý a poměrně nepřehledný, ovšem není se čemu divit, protože první koncept LISPu vznikl již před neuvěřitelnými 61 lety, konkrétně v&nbsp;roce 1958. Jedná se tedy o jeden z&nbsp;prvních vyšších programovacích jazyků vyvinutých pro potřeby mainframů, které jsou (s&nbsp;modifikacemi a vylepšeními) používány dodnes, a to nikoli pouze z&nbsp;důvodu konzervativnosti programátorů či nutnosti údržby starého programového kódu stále používaného v&nbsp;produkčním prostředí. V&nbsp;LISPu se totiž objevilo několik zajímavých konceptů, které samy o sobě dokázaly udržet tento programovací jazyk v&nbsp;hledáčku programátorů. A nejenom to &ndash; mnoho myšlenek z&nbsp;LISPu se postupně uplatňuje i v&nbsp;dalších programovacích jazycích, i když je nutné říci, že některé koncepty (homoikonicita a s&nbsp;ní související makra a metaprogramování) jsou do mnoha dalších jazyků přenositelná jen s&nbsp;obtížemi (poměrně úspěšné jsou v&nbsp;tomto ohledu jazyky <a href="">Rust</a> a <a href="">Julia</a>).</p>

<p><div class="rs-tip-major">Poznámka: dalším vyšším jazykem vyvinutým již v&nbsp;padesátých letech minulého století, který ve vylepšené podobě &bdquo;přežil&ldquo; až do současnosti, je programovací jazyk <i>FORTRAN</i> neboli plným názvem <i>The IBM Mathematical <strong>For</strong>mula <strong>Tran</strong>slating System</i>. Ten byl vytvořen ve firmě IBM dokonce již v&nbsp;roce 1954 týmem vedeným Johnem W. Backusem (jehož příjmení se mj.&nbsp;objevuje i ve zkratkách BNF a EBNF). Jak již plný název <i>FORTRANu</i> napovídá, jedná se o programovací jazyk určený především pro tvorbu aplikací zaměřených na numerické výpočty, podobně jako tomu bylo u vůbec prvního překladače &ndash; <i>A-0</i> vytvořeného již v&nbsp;roce 1952 Grace Hopperovou pro sálový počítač <i>UNIVAC I</i>. Z&nbsp;důvodu zaměření na matematické výpočty byl <i>FORTRAN</i> již od svých prvních verzí (určených původně pouze pro mainframe <i>IBM 704</i>) vybaven všemi základními aritmetickými i relačními operátory, možností práce s&nbsp;komplexními čísly, takzvaným <i>aritmetickým IF</i> (variantou podmíněného příkazu <strong>IF</strong>, v&nbsp;němž je podmínka vyjádřena aritmetickým výrazem, nikoli výrazem pravdivostním), programovou smyčkou typu <strong>DO</strong>, možností formátování numerických hodnot při jejich tisku atd. S&nbsp;nadsázkou by se dalo říci, že se jednalo o pravý opak LISPu.</div></p>

<a href="http://i.iinfo.cz/images/38/ibm-5-3.jpg"><img src="http://i.iinfo.cz/images/38/ibm-5-3-prev.jpg" alt="ibm-5" height="270" width="211" /></a>
<p><i>Obrázek x: Manuál k&nbsp;první verzi FORTRANu určeného pro mainframy IBM 704.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Stručná historie vzniku programovacího jazyka LISP</h2>

<p><a href="http://imgs.xkcd.com/comics/lisp_cycles.png">Syntaxe jazyka LISP je již po šedesát let zdrojem inspirace pro autory vtipů</a></p>

<p>Historie programovacího jazyka <i>LISP</i> je velmi dlouhá, neboť se jedná o jeden z&nbsp;nejstarších vyšších programovacích jazyků vůbec. Autorem teoretického návrhu tohoto jazyka je <i>John McCarthy</i>, který se již v&nbsp;roce 1956 připojil k&nbsp;týmu, jehož úkolem bylo navrhnout algebraický programovací jazyk umožňující mj.&nbsp;zpracování seznamů, jenž by byl vhodný pro vývoj systémů umělé inteligence &ndash; <i>AI</i> (zatímco dnes jsou &bdquo;v kurzu&ldquo; enterprise systémy popř.&nbsp;WEB 2.0, v&nbsp;padesátých a šedesátých letech minulého století se jednalo o umělou inteligenci a expertní systémy). McCarthy navrhl, aby se fakta o okolním světě (která může AI při své činnosti použít) lze reprezentovat formou vět ve vhodně strukturovaném formálním jazyce. Posléze se ukázalo, že je výhodné reprezentovat jednotlivé věty formou seznamů.  McCarthy myšlenku jazyka vhodného pro AI rozpracoval dále &ndash; odklonil se například od infixové notace zápisu algebraických výrazů, protože naprogramování některých manipulací s&nbsp;těmito výrazy (derivace, integrace, zjednodušení výrazů, logická dedukce) bylo zbytečně složité.</p>

<a href="http://i.iinfo.cz/images/455/lisp01.png"><img src="http://i.iinfo.cz/images/455/lisp01-prev.png" alt="lisp01" height="270" width="257" /></a>
<p><i>Obrázek X: Na tomto grafu evoluce programovacích jazyků můžeme vidět některé historicky významné programovací jazyky, s&nbsp;nimiž jsme se setkali v&nbsp;seriálu o historii počítačů. Jedná se zejména o Fortran, Cobol, SNOBOL, Algol, APL, BASIC (resp.&nbsp;přesněji řečeno celá rodina jazyků nesoucích toho jméno) a samozřejmě taktéž o LISP a jeho varianty.</i></p>

<p>Následně McCarthy ve svých teoretických pracích (vznikajících v&nbsp;průběhu let 1957 a 1958) ukázal, že je možné pomocí několika poměrně jednoduchých operací (a notací pro zápis funkcí) vytvořit programovací jazyk, který je Turingovsky kompletní (tj.&nbsp;jeho výpočetní mocnost je ekvivalentní <i>Turingovu stroji</i>), ale zápis algoritmů v&nbsp;tomto jazyce je mnohem jednodušší než zápis pravidel pro Turingův stroj. Tento jazyk, jenž byl z&nbsp;velké části založen na <i>Lambda kalkulu</i>, obsahoval možnost vytváření rekurzivních funkcí (což byl významný rozdíl například oproti tehdejší verzi <i>FORTRANU</i>), funkce jako argumenty jiných funkcí, podmíněné výrazy (jedna z&nbsp;variant speciální formy), funkce pro manipulaci se seznamy a v&nbsp;neposlední řadě také funkci <i>eval</i>, o níž se zmíníme v&nbsp;navazující kapitole.</p>

<p>V&nbsp;pracích McCathyho se objevily i některé (v&nbsp;té době nové) jazykové konstrukce, které dnes nalezneme v&nbsp;prakticky všech vyšších programovacích jazycích. Zejména se to týká konstrukce <strong>IF</strong> reprezentované v&nbsp;LISPu speciální formou stejného jména (typicky se dnes ovšem zapisuje malými písmeny, tedy <strong>if</strong>), popř.&nbsp;rozšířenou variantou <strong>cond</strong>.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. LISP a umělá inteligence</h2>

<p>V&nbsp;předchozí kapitole bylo mj.&nbsp;uvedeno i často opakované tvrzení, že LISP byl programovací jazyk vytvořený převážně pro potřeby studia a implementace umělé inteligence (<i>AI</i> &ndash; <i>Artifical Intelligence</i>). Toto tvrzení má sice reálný základ, ale není zcela pravdivé. Reálný základ spočívá v&nbsp;tom, že McCarthy je jak ideovým tvůrcem LISPu, tak i člověkem, který termín &bdquo;umělá inteligence&ldquo; vytvořil a použil pro pojmenování několikatýdenní konference (spíše workshopu) nazvané <i></i>. A právě na této konferenci si McCarthy začal zahrávat s&nbsp;myšlenkou na nový programovací jazyk, který byl inspirován jazykem <i></i> (<i></i>) a jeho schopnostmi práce se seznamy. Později se LISP skutečně pro výzkum AI používal, ale nikoli proto, že by byl primárně určen pro umělou inteligenci, ale protože jak vývoj LISPu, tak i primární výzkum AI probíhal na stejné universitě, konkrétně na slavném MITu. Spojení LISPu s&nbsp;AI ovšem bylo samotnému programovacímu jazyku spíše na škodu, protože si ho každý spojoval se &bdquo;slonovinovou věží&ldquo; univerzitního prostředí a navíc &ndash; velká očekávání, která již na konci padesátých let mnozí do AI vkládali, se nesplnila, což jak samotnému oboru, tak i LISPu uškodilo.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vznik interaktivní smyčky REPL</h2>

<p>Na McCarthovu teoretickou práci navázal <i>S. R. Russell</i>, který si uvědomil, že samotná funkce <i>eval</i>, pokud by byla skutečně implementována na nějakém počítači, může sloužit jako základ plnohodnotného interpretru jazyka <i>LISP</i> (interpret LISPu se někdy též označuje zkratkou <i>REPL: Read-Eval-Print-Loop</i>, tj.&nbsp;interpretr ve smyčce načítá jednotlivé výrazy, vyhodnocuje je a následně tiskne jejich výslednou hodnotu). Russell skutečně celou smyčku <i>REPL</i> implementoval &ndash; tímto způsobem se zrodila první skutečně použitelná verze <i>LISPu</i>.</p>

<a href="http://i.iinfo.cz/images/38/ibm-5-2.jpg"><img src="http://i.iinfo.cz/images/38/ibm-5-2-prev.jpg" alt="ibm-5" height="270" width="215" /></a>
<p><i>Obrázek x: Ovládací panel mainframu IBM System/360 Model 65. Tento snímek zde uvádím především z&nbsp;toho důvodu, aby bylo zřejmé, že pod pojmem &bdquo;interaktivita&ldquo; se v&nbsp;oblasti IT může skrývat mnoho pojmů. Dnes si interaktivní smyčku můžeme představit snadno &ndash; jedná se o terminál či o notebook (IPython), který ihned reaguje na příkazy zapisované uživateli. Ovšem v&nbsp;dobách prvních dvou generací mainframů byly vstupně-výstupní prostředky mnohem více omezené, takže výstup byl provádět na tiskárnu a vstupem býval dálnopis nebo jeho specializovaná obdoba. A pro administrátory taktéž zde zobrazený ovládací panel.</i></p>

<img src="https://i.iinfo.cz/images/143/python-interpreters-1-6.png" class="image-359593" alt="&#160;" width="660" height="411" />
<p><i>Obrázek x: Koncept diáře (notebooku) je použit například v&nbsp;nástroji Gorilla REPL, který mohou využít programátoři pracující s&nbsp;jazykem Clojure. Na diář se můžeme dívat jako na vylepšenou variantu interaktivní smyčky REPL, která je &bdquo;dvourozměrná&ldquo; (diář zobrazuje historii, umožňuje se v&nbsp;ní vracet zpět, provádět změny apod.).</i></p>

<p><div class="rs-tip-major">Poznámka: REPL si sice většinou spojujeme s&nbsp;interpretovanými programovacími jazyky, ovšem ve skutečnosti je možné smyčku REPL do určité míry používat i u jazyků kompilovaných či překládaných do bajtkódu (příkladem je programovací jazyk <i>Clojure</i>). Je tomu tak i v&nbsp;případě jazyka Go, který je kompilovaný a REPL pro něj skutečně vznikl. U jazyka Go je to umožněno zejména díky tomu, že překladač Go je velmi rychlý, takže se v&nbsp;REPL může relativně bez problémů používat překlad každé definice či příkazu, a to i na pomalejších počítačích. Se smyčkou REPL určenou pro jazyk Go jsme se seznámili v&nbsp;článku <a href=""></a>.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. M-výrazy a S-výrazy</h2>

<p>McCarthy a jeho kolektiv se při vývoji LISPu inspirovali kromě jiného i programovacím jazykem FORTRAN, což je možná poněkud překvapivé, ovšem musíme si uvědomit, že FORTRAN byl v&nbsp;té době jedním z&nbsp;mála vyšších programovacích jazyků (mezi další patří například <i>FLOW-MATIC</i> firmy Sperry-Rand, <i>Commercial Translator</i> firmy IBM a <i>AIMACO (Air Material Command)</i>, což jsou ideoví předchůdci COBOLu). Mezi přednosti FORTRANu patřil i jednoduchý zápis aritmetických výrazů, což je ostatně i základ významu zkratky FORTRAN (<i>FORMula TRANslator</i>). Původně měl LISP umožňovat běžný <i>infixový</i> zápis aritmetických výrazů, ovšem v&nbsp;první verzi se tato možnost neobjevila a ani nikdy později se nestala součástí mainstreamových LISPů. Navíc byl zápis LISPovských programů v&nbsp;původním návrhu jazyka odlišný od formy, kterou známe dnes. Používaly se totiž takzvané M-výrazy (<i>M-expressions</i>), v&nbsp;nichž se namísto kulatých závorek zapisovaných okolo všech forem (funkcí, speciálních forem, maker) používaly závorky hranaté, ovšem použité pouze u parametrů. Zápis byl tedy bližší spíše dnešním programovacím jazykům.</p>

<a href="http://i.iinfo.cz/images/455/lisp01.png"><img src="http://i.iinfo.cz/images/455/lisp01-prev.png" alt="lisp01" height="270" width="257" /></a>
<p><i>Obrázek x: Na tomto grafu evoluce programovacích jazyků můžeme vidět
některé programovací jazyky, které jsme si již popsali v&nbsp;seriálu o vývoji
počítačů a mikropočítačů.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Rozsáhlý a chaotický svět dialektů programovacího jazyka LISP</h2>

<p>V&nbsp;průběhu dalších více než pěti desetiletí dosti překotného rozvoje výpočetní techniky i programovacích jazyků vzniklo velmi mnoho dialektů tohoto programovacího jazyka, například <i>MacLISP</i>, <i>InterLISP</i>, <i>ZetaLISP</i>, <i>XLisp</i>, <i>AutoLISP</i> (původně odvozený z&nbsp;<i>XLispu</i>), samozřejmě <i>Emacs LISP</i> nebo slavný <i>Common LISP</i> (více viz odkazy na konci článku). Kromě těchto implementací jazyka LISP, které se od sebe v&nbsp;několika ohledech odlišují (například existencí či neexistencí maker či objektového systému), vznikl v&nbsp;minulosti i nový dialekt tohoto jazyka nazvaný <i>Scheme</i> (původně <i>Schemer</i>), jehož autory jsou Guy L. Steele a Gerald Jay Sussman (Steele později pracoval na specifikaci Javy i programovacího jazyka Fortress). Tento dialekt je implementačně jednodušší a také se ho lze naučit rychleji, než mnohé další varianty jazyka LISP.</p>

<a href="https://www.root.cz/obrazek/337666/"><img src="https://i.iinfo.cz/images/196/emacs2-1-prev.png" class="image-337666" alt="&#160;" width="370" height="196" /></a>
<p><i>Obrázek 2: Vývoj některých dialektů Lispu.<br />
Zdroj: <a href="https://en.wikipedia.org/wiki/Lisp_%28programming_language%29">Wikipedia</a>.</i></p>

<p>Právě z&nbsp;těchto důvodů se <i>Scheme</i> využívá či využívalo jak při výuce programování, tak i v&nbsp;mnoha open-source projektech, například v&nbsp;dnes popisovaném textovém editoru <i>Emacs</i> či v&nbsp;grafickém editoru <i>GIMP</i> jako jeden z&nbsp;podporovaných skriptovacích jazyků.  Richard Stallman si dokonce přál, aby se <i>Scheme</i> stalo standardním skriptovacím jazykem většiny GNU aplikací, což je idea, která se &ndash; především po vzniku dalších vysokoúrovňových programovacích jazyků (<i>Perl</i>, <i>Python</i>, <i>TCL</i>) &ndash; nakonec neuskutečnila (i když vedla k&nbsp;tzv.&nbsp;<a href="https://vanderburg.org/old_pages/Tcl/war/">Tcl war</a>).</p

<p><div class="rs-tip-major">Poznámka: Jazyk Scheme byl používán na MIT v&nbsp;úvodních kurzech programování. V&nbsp;roce 2009 byl nahrazen Pythonem, ovšem Scheme se dále používá, například v&nbsp;kurzu <a href="http://groups.csail.mit.edu/mac/users/gjs/6.945/">Adventures in Advanced Symbolic Programming</a> (podle některých studentů zdaleka nejzábavnější kurz, kterým prošli).</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. LISP jako koncept, nikoli konkrétní dialekt</h2>

<p>Musíme si však uvědomit, že samotný LISP je nutné chápat jako spíše koncept, než konkrétní programovací jazyk. Proto můžeme pod pojmem LISP (psáno též Lisp) najít poměrně velké množství programovacích jazyků, které sice mají podobný základ, ovšem konkrétní implementace jsou značně rozdílné. Do rodiny LISPovských jazyků tak dnes patří i dosti odlišné <a href="https://www.root.cz/clanky/novinky-v-clojure-verze-1-9-0/#k19">Clojure</a> a výše zmíněné implementace jazyka Scheme. Dnes patří mezi nejpopulárnější implementace LISPovského jazyka především Common Lisp, dále pochopitelně Emacs Lisp, ovšem nesmíme zapomenout na již zmíněné Clojure a taktéž <a href="https://racket-lang.org/">Racket</a> neboli původním názvem PLT Scheme popř.&nbsp;na GNU Guile (implementace Scheme, která měla být původně určena jako základní rozšiřující jazyk v&nbsp;GNU projektu, viz zmínka o RMS).</p>

<p><div class="rs-tip-major">Poznámka: uvádí se (ovšem bez hlubších měření), že Emacs Lisp je dnes ve světě open source pravděpodobně nejrozšířenější dialog Lispu s&nbsp;největší základnou programů a modulů.</div></p>

<p>Velmi pěkně jsou základní společné vlastnosti a rozdíly mezi těmito jazyky shrnuty na stránce <a href="http://hyperpolyglot.org/lisp">Common Lisp, Racket, Clojure, Emacs Lisp</a>.</p>

<img src="https://i.iinfo.cz/images/196/emacs2-2.jpg" class="image-337667" alt="&#160;" width="400" height="579" />
<p><i>Obrázek x: SICP &ndash; jedna z&nbsp;nejznámějších knížek (nejenom) o LISPovských jazycích.</i></p>




<p><a name="k08"></a></p>
<h2 id="k08">8. Již popsané dialekty LISPu a Scheme</h2>

<p>Na stránkách <a href="https://www.root.cz">Rootu</a> i serveru <a href="">Mojefedora.cz</a> jsme se již setkali s&nbsp;relativně velkým množstvím dialektů jazyka LISP či Scheme. Tyto dialekty budou (samozřejmě jen ve stručnosti) představeny v&nbsp;navazujících kapitolách.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p>Články s&nbsp;podrobnějšími informacemi:</p>

<ol>
<li><a href=""></a></li>
</ol>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p>Články s&nbsp;podrobnějšími informacemi:</p>

<ol>
<li><a href=""></a></li>
</ol>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p>Články s&nbsp;podrobnějšími informacemi:</p>

<ol>
<li><a href=""></a></li>
</ol>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p>Články s&nbsp;podrobnějšími informacemi:</p>

<ol>
<li><a href=""></a></li>
</ol>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Další programovací jazyky inspirované LISPem</h2>

<p>Již <a href="#k01">v&nbsp;úvodní kapitole</a> jsme si řekli, že jazykem LISP byly do větší či menší míry inspirovány i mnohé další programovací jazyky. Připomeňme si především dva z&nbsp;těchto jazyků, u nichž sice nemusí být inspirace zřejmá na první pohled (zápis programů je mnohdy výrazně odlišný &ndash; tj.&nbsp;liší se syntaxe), ovšem sémantika operací jasně ukazuje na to, že tyto jazyky jsou LISPem ovlivněny do velké míry. Jedná se o jazyky Logo a TCL.</p>

<p><div class="rs-tip-major">Poznámka:</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Jazyk Logo</h2>

<p>Články s&nbsp;podrobnějšími informacemi o programovacím jazyku Logo:</p>

<p></p>

<p>Podobně, jako je tomu v&nbsp;mnohých dialektech LISPU, se i v&nbsp;Logu setkáme s&nbsp;možností zápisu programových smyček, což znamená, že není vyžadováno, aby se za všech okolností používala rekurze.</p>

<pre>
</pre>

<ol>
<li><a href=""></a></li>
</ol>



<p><a name="k18"></a></p>
<h2 id="k18">18. Jazyk TCL</h2>

<pre>
(setq hello "Hello world")
</pre>

<p>v Tcl:</p>

<pre>
set hello "Hello world"
</pre>

<p>Vyhodnocování příkazů v&nbsp;jazyce TCL (mimochodem: už samotný pojem <i>vyhodnocování</i> se vztahuje k&nbsp;LISPu) ukazuje, v&nbsp;jaké oblasti TCL získal inspiraci. Substituce se v&nbsp;Tcl používají například k&nbsp;nahrazení jména proměnné její hodnotou &ndash; zde se používá znak dolaru. V&nbsp;některých případech by se nám hodilo substituci zakázat. To je samozřejmě možné a děje se tak použitím složených závorek &ndash; <strong>{</strong> a <strong>}</strong>. Rozdíl mezi použitím složených závorek zakazujících substituci a uvozovek umožňujících zápis řetězce s&nbsp;mezerami ukazuje následující příklad. V&nbsp;něm je nejdříve inicializována proměnná <strong>answer</strong> a tato proměnná je použita při tisku dvou řetězců. V&nbsp;prvním případě se provede substituce jména proměnné na její hodnotu, ve druhém případě se řetězec vytiskne beze změny tak, jak byl zadán:</p>

<pre>
set answer 42
puts "Odpověď je $answer"
puts {Odpověď je $answer}
</pre>

<p>Jak si ukážeme v dalších odstavcích, jsou složené závorky často použity například při zápisu těla smyček. Je to logické, protože tělo smyčky se nesmí provést již při jejím vytváření, ale až po jejím spuštění. Z&nbsp;tohoto důvodu je nutné prvotní provedení smyčky (která v&nbsp;tomto případě znamená zavolání prvního příkazu v&nbsp;těle smyčky) zakázat:</p>

<pre>
</pre>

<p>Nyní si shrňme všechny prováděné substituce (a jejich opaky) do jedné tabulky:</p>

<table>
<tr><th>Použité znaky</th><th>Význam znaků</th></tr>
<tr><td>$</td><td>substituce proměnných - náhrada jména proměnné její hodnotou</td></tr>
<tr><td>[]</td><td>vyhodnocení příkazu - příkaz v&nbsp;závorkách se vyhodnotí nejdříve</td></tr>
<tr><td>""</td><td>potlačuje zpracování mezer jako oddělovačů příkazů či jejich argumentů</td></tr>
<tr><td>{}</td><td>stejné jako uvozovky s&nbsp;tím rozdílem, že se všechny substituce uvnitř závorek zakazují</td></tr>
<tr><td>\</td><td>ruší zvláštní význam následujícího znaku</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: na tomto místě je vhodné upozornit na to, že LISP automaticky vyhodnocuje všechny výrazy (tj.&nbsp;provádí substituci výrazu za jeho výsledek), pokud ovšem nejsou uzavřeny ve speciální formě <strong>quote</strong>, kterou lze většinou zapsat i zkráceně pomocí apostrofu. Žádné další podmínky pro substituci/nesubstituci není nutné specifikovat. V&nbsp;jazyku TCL se jeho autor rozhodl pro opačný přístup: ve výchozím stavu se substituce neprovádí, což možná může znít logicky, ovšem jak je vidět z&nbsp;předchozí tabulky, bylo ve skutečnosti nutné do jazyka přidat další podmínky kdy a za jakých okolností se substituce může provést. Z&nbsp;tohoto pohledu je návrh LISPu mnohem čistší (není se ostatně čemu divit, protože vychází z&nbsp;minimalistického <i>lambda kalkulu</i>).</div></p>

<p>Články s&nbsp;podrobnějšími informacemi o programovacím jazyku TCL:</p>

<ol>
<li><a href=""></a></li>
</ol>



<p><a name="k19"></a></p>
<h2 id="k19">19. Literatura</h2>

<ol>

<li>Peter Seibel<br />
<i>&bdquo;Practical Common Lisp&ldquo;</i><br />
2009
</li>

<li>Paul Graham<br />
<i>&bdquo;ANSI Common Lisp&ldquo;</i><br />
1995
</li>

<li>Gerald Gazdar<br />
<i>&bdquo;Natural Language Processing in Lisp: An Introduction to Computational Linguistics&ldquo;</i><br />
1989
</li>

<li>Peter Norvig<br />
<i>&bdquo;Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp&ldquo;</i><br />
1991
</li>

<li>Alex Mileler et.al.<br />
<i>&bdquo;Clojure Applied: From Practice to Practitioner&ldquo;</i><br />
2015
</li>

<li>
<i>&bdquo;Living Clojure: An Introduction and Training Plan for Developers&ldquo;</i><br />
2015
</li>

<li>Dmitri Sotnikov<br />
<i>&bdquo;Web Development with Clojure: Build Bulletproof Web Apps with Less Code&ldquo;</i><br />
2016
</li>

<li>McCarthy<br />
<i>&bdquo;Recursive functions of symbolic expressions and their computation by machine, part I&ldquo;</i><br />
1960
</li>

<li>R. Kent Dybvig<br />
<i>&bdquo;The Scheme Programming Language&ldquo;</i><br />
2009
</li>

<li>Max Hailperin<br />
<i>&bdquo;Concrete Abstractions&ldquo;</i><br />
1998
</li>

<li>Guy L. Steele<br />
<i>&bdquo;History of Scheme&ldquo;</i><br />
2006, Sun Microsystems Laboratories
</li>

<li>Kolář J., Muller K.:<br />
<i>&bdquo;Speciální programovací jazyky&ldquo;</i><br />
Praha 1981
</li>

<li>
<i>&bdquo;AutoLISP Release 9, Programmer's reference&ldquo;</i><br />
Autodesk Ltd., October 1987
</li>

<li>
<i>&bdquo;AutoLISP Release 10, Programmer's reference&ldquo;</i><br />
Autodesk Ltd., September 1988
</li>

<li>McCarthy, John; Abrahams, Paul W.; Edwards, Daniel J.; Hart, Timothy P.; Levin, Michael I.<br />
<i>&bdquo;LISP 1.5 Programmer's Manual&ldquo;</i><br />
MIT Press. ISBN 0 262 130 1 1 4
</li>

<li>Carl Hewitt; Peter Bishop and Richard Steiger<br />
<i>&bdquo;A Universal Modular Actor Formalism for Artificial Intelligence&ldquo;</i><br />
1973
</li>

<li>Feiman, J.<br />
<i>&bdquo;The Gartner Programming Language Survey (October 2001)&ldquo;</i><br />
Gartner Advisory
</li>

<li>Harold Abelson, Gerald Jay Sussman, Julie Sussman:<br />
<i>Structure and Interpretation of Computer Programs</i><br />
MIT Press. 1985, 1996 (a možná vyšel i další přetisk)
</li>

<li>Paul Graham<br />
<i>On Lisp</i><br />
Prentice Hall, 1993<br />
Dostupné online na stránce <a href="http://www.paulgraham.com/onlisptext.html">http://www.paulgraham.com/onlisptext.html</a>
</li>

<li>David S. Touretzky<br />
<i>Common LISP: A Gentle Introduction to Symbolic Computation (Dover Books on Engineering)</i><br />
</li>

<li>Peter Norvig<br />
<i>Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp</i>
</li>

<li>Patrick Winston, Berthold Horn<br />
<i>Lisp (3rd Edition)</i><br />
ISBN-13: 978-0201083194, ISBN-10: 0201083191
</li>

<li>Matthias Felleisen, David Van Horn, Dr. Conrad Barski<br>
<i>Realm of Racket: Learn to Program, One Game at a Time!</i><br />
ISBN-13: 978-1593274917, ISBN-10: 1593274912 
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>SchemePy<br />
<a href="https://pypi.org/project/SchemePy/">https://pypi.org/project/SchemePy/</a>
</li>

<li>lispy<br />
<a href="https://pypi.org/project/lispy/">https://pypi.org/project/lispy/</a>
</li>

<li>Lython<br />
<a href="https://pypi.org/project/Lython/">https://pypi.org/project/Lython/</a>
</li>

<li>Lizpop<br />
<a href="https://pypi.org/project/lizpop/">https://pypi.org/project/lizpop/</a>
</li>

<li>Budoucnost programovacích jazyků<br />
<a href="http://www.knesl.com/budoucnost-programovacich-jazyku">http://www.knesl.com/budoucnost-programovacich-jazyku</a>
</li>

<li>LISP Prolog and Evolution<br />
<a href="http://blog.samibadawi.com/2013/05/lisp-prolog-and-evolution.html">http://blog.samibadawi.com/2013/05/lisp-prolog-and-evolution.html</a>
</li>

<li>List of Lisp-family programming languages<br />
<a href="https://en.wikipedia.org/wiki/List_of_Lisp-family_programming_languages">https://en.wikipedia.org/wiki/List_of_Lisp-family_programming_languages</a>
</li>

<li>clojure_py na indexu PyPi<br />
<a href="https://pypi.python.org/pypi/clojure_py">https://pypi.python.org/pypi/clojure_py</a>
</li>

<li>PyClojure<br />
<a href="https://github.com/eigenhombre/PyClojure">https://github.com/eigenhombre/PyClojure</a>
</li>

<li>Hy na GitHubu<br />
<a href="https://github.com/hylang/hy">https://github.com/hylang/hy</a>
</li>

<li>Hy: The survival guide<br />
<a href="https://notes.pault.ag/hy-survival-guide/">https://notes.pault.ag/hy-survival-guide/</a>
</li>

<li>Hy běžící na monitoru terminálu společnosti Symbolics<br />
<a href="http://try-hy.appspot.com/">http://try-hy.appspot.com/</a>
</li>

<li>Welcome to Hy’s documentation!<br />
<a href="http://docs.hylang.org/en/stable/">http://docs.hylang.org/en/stable/</a>
</li>

<li>Hy na PyPi<br />
<a href="https://pypi.org/project/hy/#description">https://pypi.org/project/hy/#description</a>
</li>

<li>Getting Hy on Python<br />
<a href="https://lwn.net/Articles/596626/">https://lwn.net/Articles/596626/</a>
</li>

<li>Programming Can Be Fun with Hy<br />
<a href="https://opensourceforu.com/2014/02/programming-can-fun-hy/">https://opensourceforu.com/2014/02/programming-can-fun-hy/</a>
</li>

<li>Přednáška o projektu Hy (pětiminutový lighttalk)<br />
<a href="http://blog.pault.ag/day/2013/04/02">http://blog.pault.ag/day/2013/04/02</a>
</li>

<li>Hy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Hy">https://en.wikipedia.org/wiki/Hy</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Point<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Point.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Point.html</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Narrowing<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Narrowing.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Narrowing.html</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Functions that Create Markers<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Markers.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Markers.html</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Motion<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion.html#Motion">https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion.html#Motion</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Basic Char Syntax<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Char-Syntax.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Char-Syntax.html</a>
</li>

<li>Elisp: Sequence: List, Array<br />
<a href="http://ergoemacs.org/emacs/elisp_list_vs_vector.html">http://ergoemacs.org/emacs/elisp_list_vs_vector.html</a>
</li>

<li>Elisp: Property List<br />
<a href="http://ergoemacs.org/emacs/elisp_property_list.html">http://ergoemacs.org/emacs/elisp_property_list.html</a>
</li>

<li>Elisp: Hash Table<br />
<a href="http://ergoemacs.org/emacs/elisp_hash_table.html">http://ergoemacs.org/emacs/elisp_hash_table.html</a>
</li>

<li>Elisp: Association List<br />
<a href="http://ergoemacs.org/emacs/elisp_association_list.html">http://ergoemacs.org/emacs/elisp_association_list.html</a>
</li>

<li>The mapcar Function (An Introduction to Programming in Emacs Lisp)<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/mapcar.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/mapcar.html</a>
</li>

<li>Anaphoric macro<br />
<a href="https://en.wikipedia.org/wiki/Anaphoric_macro">https://en.wikipedia.org/wiki/Anaphoric_macro</a>
</li>

<li>Some Common Lisp Loop Macro Examples<br />
<a href="https://www.youtube.com/watch?v=3yl8o6r_omw">https://www.youtube.com/watch?v=3yl8o6r_omw</a>
</li>

<li>A Guided Tour of Emacs<br />
<a href="https://www.gnu.org/software/emacs/tour/">https://www.gnu.org/software/emacs/tour/</a>
</li>

<li>The Roots of Lisp<br />
<a href="http://www.paulgraham.com/rootsoflisp.html">http://www.paulgraham.com/rootsoflisp.html</a>
</li>

<li>Evil (Emacs Wiki)<br />
<a href="https://www.emacswiki.org/emacs/Evil">https://www.emacswiki.org/emacs/Evil</a>
</li>

<li>Evil (na GitHubu)<br />
<a href="https://github.com/emacs-evil/evil">https://github.com/emacs-evil/evil</a>
</li>

<li>Evil (na stránkách repositáře MELPA)<br />
<a href="https://melpa.org/#/evil">https://melpa.org/#/evil</a>
</li>

<li>Evil Mode: How I Switched From VIM to Emacs<br />
<a href="https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html">https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html</a>
</li>

<li>GNU Emacs (home page)<br />
<a href="https://www.gnu.org/software/emacs/">https://www.gnu.org/software/emacs/</a>
</li>

<li>GNU Emacs (texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?GnuEmacs">http://texteditors.org/cgi-bin/wiki.pl?GnuEmacs</a>
</li>

<li>An Introduction To Using GDB Under Emacs<br />
<a href="http://tedlab.mit.edu/~dr/gdbintro.html">http://tedlab.mit.edu/~dr/gdbintro.html</a>
</li>

<li>An Introduction to Programming in Emacs Lisp<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html</a>
</li>

<li>27.6 Running Debuggers Under Emacs<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html</a>
</li>

<li>GdbMode<br />
<a href="http://www.emacswiki.org/emacs/GdbMode">http://www.emacswiki.org/emacs/GdbMode</a>
</li>

<li>Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Emacs">https://en.wikipedia.org/wiki/Emacs</a>
</li>

<li>Emacs timeline<br />
<a href="http://www.jwz.org/doc/emacs-timeline.html">http://www.jwz.org/doc/emacs-timeline.html</a>
</li>

<li>Emacs Text Editors Family<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?EmacsFamily">http://texteditors.org/cgi-bin/wiki.pl?EmacsFamily</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse (část 2: vyhledávání a nahrazování textu)<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/</a>
</li>

<li>Emacs/Evil-mode - A basic reference to using evil mode in Emacs<br />
<a href="http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet">http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet</a>
</li>

<li>From Vim to Emacs+Evil chaotic migration guide<br />
<a href="https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/">https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/</a>
</li>

<li>Introduction to evil-mode {video)<br />
<a href="https://www.youtube.com/watch?v=PeVQwYUxYEg">https://www.youtube.com/watch?v=PeVQwYUxYEg</a>
</li>

<li>EINE (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/EINE">http://www.emacswiki.org/emacs/EINE</a>
</li>

<li>EINE (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?EINE">http://texteditors.org/cgi-bin/wiki.pl?EINE</a>
</li>

<li>ZWEI (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/ZWEI">http://www.emacswiki.org/emacs/ZWEI</a>
</li>

<li>ZWEI (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?ZWEI">http://texteditors.org/cgi-bin/wiki.pl?ZWEI</a>
</li>

<li>Zmacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Zmacs">https://en.wikipedia.org/wiki/Zmacs</a>
</li>

<li>Zmacs (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?Zmacs">http://texteditors.org/cgi-bin/wiki.pl?Zmacs</a>
</li>

<li>TecoEmacs (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/TecoEmacs">http://www.emacswiki.org/emacs/TecoEmacs</a>
</li>

<li>Micro Emacs<br />
<a href="http://www.emacswiki.org/emacs/MicroEmacs">http://www.emacswiki.org/emacs/MicroEmacs</a>
</li>

<li>Micro Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MicroEMACS">https://en.wikipedia.org/wiki/MicroEMACS</a>
</li>

<li>EmacsHistory<br />
<a href="http://www.emacswiki.org/emacs/EmacsHistory">http://www.emacswiki.org/emacs/EmacsHistory</a>
</li>

<li>Seznam editorů s ovládáním podobným Emacsu či kompatibilních s příkazy Emacsu<br />
<a href="http://www.finseth.com/emacs.html">http://www.finseth.com/emacs.html</a>
</li>

<li>evil-numbers<br />
<a href="https://github.com/cofi/evil-numbers">https://github.com/cofi/evil-numbers</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (1.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (2.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v editorech Emacs a Vim<br />
<a href="https://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">https://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Org mode<br />
<a href="https://orgmode.org/">https://orgmode.org/</a>
</li>

<li>The Org Manual<br />
<a href="https://orgmode.org/manual/index.html">https://orgmode.org/manual/index.html</a>
</li>

<li>Kakoune (modální textový editor)<br />
<a href="http://kakoune.org/">http://kakoune.org/</a>
</li>

<li>Vim-style keybinding in Emacs/Evil-mode<br />
<a href="https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8">https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8</a>
</li>

<li>Emacs - jak začít<br />
<a href="http://www.abclinuxu.cz/clanky/navody/emacs-jak-zacit">http://www.abclinuxu.cz/clanky/navody/emacs-jak-zacit</a>
</li>

<li>Programovací jazyk LISP a LISP machines<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/">https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/</a>
</li>

<li>Evil-surround<br />
<a href="https://github.com/emacs-evil/evil-surround">https://github.com/emacs-evil/evil-surround</a>
</li>

<li>Spacemacs<br />
<a href="http://spacemacs.org/">http://spacemacs.org/</a>
</li>

<li>Lisp: Common Lisp, Racket, Clojure, Emacs Lisp<br />
<a href="http://hyperpolyglot.org/lisp">http://hyperpolyglot.org/lisp</a>
</li>

<li>Common Lisp, Scheme, Clojure, And Elisp Compared<br />
<a href="http://irreal.org/blog/?p=725">http://irreal.org/blog/?p=725</a>
</li>

<li>Does Elisp Suck?<br />
<a href="http://irreal.org/blog/?p=675">http://irreal.org/blog/?p=675</a>
</li>

<li>Emacs pro mírně pokročilé (9): Elisp<br />
<a href="https://www.root.cz/clanky/emacs-elisp/">https://www.root.cz/clanky/emacs-elisp/</a>
</li>

<li>If I want to learn lisp, are emacs and elisp a good choice?<br />
<a href="https://www.reddit.com/r/emacs/comments/2m141y/if_i_want_to_learn_lisp_are_emacs_and_elisp_a/">https://www.reddit.com/r/emacs/comments/2m141y/if_i_want_to_learn_lisp_are_emacs_and_elisp_a/</a>
</li>

<li>Clojure(Script) Interactive Development Environment that Rocks!<br />
<a href="https://github.com/clojure-emacs/cider">https://github.com/clojure-emacs/cider</a>
</li>

<li>An Introduction to Emacs Lisp<br />
<a href="https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html">https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html</a>
</li>

<li>Emergency Elisp<br />
<a href="http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html">http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html</a>
</li>

<li>Lambda calculus<br />
<a href="https://en.wikipedia.org/wiki/Lambda_calculus">https://en.wikipedia.org/wiki/Lambda_calculus</a>
</li>

<li>John McCarthy's original LISP paper from 1959<br />
<a href="https://www.reddit.com/r/programming/comments/17lpz4/john_mccarthys_original_lisp_paper_from_1959/">https://www.reddit.com/r/programming/comments/17lpz4/john_mccarthys_original_lisp_paper_from_1959/</a>
</li>

<li>Micro Manual LISP<br />
<a href="https://www.scribd.com/document/54050141/Micro-Manual-LISP">https://www.scribd.com/document/54050141/Micro-Manual-LISP</a>
</li>

<li>How Lisp Became God's Own Programming Language<br />
<a href="https://twobithistory.org/2018/10/14/lisp.html">https://twobithistory.org/2018/10/14/lisp.html</a>
</li>

<li>History of Lisp<br />
<a href="http://jmc.stanford.edu/articles/lisp/lisp.pdf">http://jmc.stanford.edu/articles/lisp/lisp.pdf</a>
</li>

<li>The Roots of Lisp<br />
<a href="http://languagelog.ldc.upenn.edu/myl/llog/jmc.pdf">http://languagelog.ldc.upenn.edu/myl/llog/jmc.pdf</a>
</li>

<li>Racket<br />
<a href="https://racket-lang.org/">https://racket-lang.org/</a>
</li>

<li>The Racket Manifesto<br />
<a href="http://felleisen.org/matthias/manifesto/">http://felleisen.org/matthias/manifesto/</a>
</li>

<li>MIT replaces Scheme with Python<br />
<a href="https://www.johndcook.com/blog/2009/03/26/mit-replaces-scheme-with-python/">https://www.johndcook.com/blog/2009/03/26/mit-replaces-scheme-with-python/</a>
</li>

<li>Adventures in Advanced Symbolic Programming<br />
<a href="http://groups.csail.mit.edu/mac/users/gjs/6.945/">http://groups.csail.mit.edu/mac/users/gjs/6.945/</a>
</li>

<li>Why MIT Switched from Scheme to Python (2009)<br />
<a href="https://news.ycombinator.com/item?id=14167453">https://news.ycombinator.com/item?id=14167453</a>
</li>

<li>Starodávná stránka XLispu<br />
<a href="http://www.xlisp.org/">http://www.xlisp.org/</a>
</li>

<li>AutoLISP<br />
<a href="https://en.wikipedia.org/wiki/AutoLISP">https://en.wikipedia.org/wiki/AutoLISP</a>
</li>

<li>Seriál PicoLisp: minimalistický a výkonný interpret Lispu<br />
<a href="https://www.root.cz/serialy/picolisp-minimalisticky-a-vykonny-interpret-lispu/">https://www.root.cz/serialy/picolisp-minimalisticky-a-vykonny-interpret-lispu/</a>
</li>

<li>Common Lisp<br />
<a href="https://common-lisp.net/">https://common-lisp.net/</a>
</li>

<li>Getting Going with Common Lisp<br />
<a href="https://cliki.net/Getting%20Started">https://cliki.net/Getting%20Started</a>
</li>

<li>Online Tutorial (Common Lisp)<br />
<a href="https://cliki.net/online%20tutorial">https://cliki.net/online%20tutorial</a>
</li>

<li>Guile Emacs<br />
<a href="https://www.emacswiki.org/emacs/GuileEmacs">https://www.emacswiki.org/emacs/GuileEmacs</a>
</li>

<li>Guile Emacs History<br />
<a href="https://www.emacswiki.org/emacs/GuileEmacsHistory">https://www.emacswiki.org/emacs/GuileEmacsHistory</a>
</li>

<li>Guile is a programming language<br />
<a href="https://www.gnu.org/software/guile/">https://www.gnu.org/software/guile/</a>
</li>

<li>MIT Scheme<br />
<a href="http://groups.csail.mit.edu/mac/projects/scheme/">http://groups.csail.mit.edu/mac/projects/scheme/</a>
</li>

<li>SIOD: Scheme in One Defun<br />
<a href="http://people.delphiforums.com/gjc//siod.html">http://people.delphiforums.com/gjc//siod.html</a>
</li>

<li>CommonLispForEmacs<br />
<a href="https://www.emacswiki.org/emacs/CommonLispForEmacs">https://www.emacswiki.org/emacs/CommonLispForEmacs</a>
</li>

<li>Elisp: print, princ, prin1, format, message<br />
<a href="http://ergoemacs.org/emacs/elisp_printing.html">http://ergoemacs.org/emacs/elisp_printing.html</a>
</li>

<li>Special Forms in Lisp<br />
<a href="http://www.nhplace.com/kent/Papers/Special-Forms.html">http://www.nhplace.com/kent/Papers/Special-Forms.html</a>
</li>

<li>Basic Building Blocks in LISP<br />
<a href="https://www.tutorialspoint.com/lisp/lisp_basic_syntax.htm">https://www.tutorialspoint.com/lisp/lisp_basic_syntax.htm</a>
</li>

<li>Introduction to LISP - University of Pittsburgh<br />
<a href="https://people.cs.pitt.edu/~milos/courses/cs2740/Lectures/LispTutorial.pdf">https://people.cs.pitt.edu/~milos/courses/cs2740/Lectures/LispTutorial.pdf</a>
</li>

<li>Why don't people use LISP<br />
<a href="https://forums.freebsd.org/threads/why-dont-people-use-lisp.24572/">https://forums.freebsd.org/threads/why-dont-people-use-lisp.24572/</a>
</li>

<li>Structured program theorem<br />
<a href="https://en.wikipedia.org/wiki/Structured_program_theorem">https://en.wikipedia.org/wiki/Structured_program_theorem</a>
</li>

<li>Clojure: API Documentation<br />
<a href="https://clojure.org/api/api">https://clojure.org/api/api</a>
</li>

<li>Tutorial for the Common Lisp Loop Macro<br />
<a href="http://www.ai.sri.com/pkarp/loop.html">http://www.ai.sri.com/pkarp/loop.html</a>
</li>

<li>Common Lisp's Loop Macro Examples for Beginners<br />
<a href="http://www.unixuser.org/~euske/doc/cl/loop.html">http://www.unixuser.org/~euske/doc/cl/loop.html</a>
</li>

<li>A modern list api for Emacs. No 'cl required.<br />
<a href="https://github.com/magnars/dash.el">https://github.com/magnars/dash.el</a>
</li>

<li>The LOOP Facility<br />
<a href="http://www.lispworks.com/documentation/HyperSpec/Body/06_a.htm">http://www.lispworks.com/documentation/HyperSpec/Body/06_a.htm</a>
</li>

<li>Clojure.org: Vars and the Global Environment<br />
<a href="http://clojure.org/Vars">http://clojure.org/Vars</a>
</li>

<li>Clojure.org: Refs and Transactions<br />
<a href="http://clojure.org/Refs">http://clojure.org/Refs</a>
</li>

<li>Clojure.org: Atoms<br />
<a href="http://clojure.org/Atoms">http://clojure.org/Atoms</a>
</li>

<li>Clojure.org: Agents as Asynchronous Actions<br />
<a href="http://clojure.org/agents">http://clojure.org/agents</a>
</li>

<li>Transient Data Structures
<a href="http://clojure.org/transients">http://clojure.org/transients</a>
</li>

<li>Dynamic Languages Strike Back<br />
<a href="http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html">http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html</a>
</li>

<li>Scripting: Higher Level Programming for the 21st Century<br />
<a href="http://www.tcl.tk/doc/scripting.html">http://www.tcl.tk/doc/scripting.html</a>
</li>

<li>Clojure (na Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Clojure">http://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Clojure (na Wikipedia CS)<br />
<a href="http://cs.wikipedia.org/wiki/Clojure">http://cs.wikipedia.org/wiki/Clojure</a>
</li>

<li>SICP (The Structure and Interpretation of Computer Programs)<br />
<a href="http://mitpress.mit.edu/sicp/">http://mitpress.mit.edu/sicp/</a>
</li>

<li>Pure function<br />
<a href="http://en.wikipedia.org/wiki/Pure_function">http://en.wikipedia.org/wiki/Pure_function</a>
</li>

<li>Funkcionální programování<br />
<a href="http://cs.wikipedia.org/wiki/Funkcionální_programování">http://cs.wikipedia.org/wiki/Funkcionální_programování</a>
</li>

<li>Jazyky Hy a Clojure-py: moderní dialekty LISPu určené pro Python VM<br />
<a href="https://www.root.cz/clanky/jazyky-hy-a-clojure-py-moderni-dialekty-lispu-urcene-pro-python-vm/">https://www.root.cz/clanky/jazyky-hy-a-clojure-py-moderni-dialekty-lispu-urcene-pro-python-vm/</a>
</li>

<li>Pixie: lehký skriptovací jazyk s „kouzelnými“ schopnostmi<br />
<a href="https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/">https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/</a>
</li>

<li>Programovací jazyk Pixie: funkce ze základní knihovny a použití FFI<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/">https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

