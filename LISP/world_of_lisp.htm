<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Jemný úvod do rozsáhlého světa jazyků LISP a Scheme</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Jemný úvod do rozsáhlého světa jazyků LISP a Scheme</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Jemný úvod do rozsáhlého světa jazyků LISP a Scheme</a></p>
<p><a href="#k02">*** 2. Stručná historie vzniku programovacího jazyka LISP</a></p>
<p><a href="#k03">*** 3. Vznik interaktivní smyčky REPL</a></p>
<p><a href="#k04">*** 4. M-výrazy a S-výrazy</a></p>
<p><a href="#k05">*** 5. Rozsáhlý a chaotický svět dialektů programovacího jazyka LISP</a></p>
<p><a href="#k06">*** 6. LISP jako koncept, nikoli konkrétní dialekt</a></p>
<p><a href="#k07">*** 7. Již popsané dialekty LISPu a Scheme</a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Literatura</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Jemný úvod do rozsáhlého světa jazyků LISP a Scheme</h2>

<p>V&nbsp;tomto prázdninovém miniseriálu</p>


<p><a name="k02"></a></p>
<h2 id="k02">2. Stručná historie vzniku programovacího jazyka LISP</h2>

<p><a href="http://imgs.xkcd.com/comics/lisp_cycles.png">Syntaxe jazyka LISP je již po 50 let zdrojem inspirace pro autory vtipů</a></p>

<p>Historie programovacího jazyka <i>LISP</i> je velmi dlouhá, neboť se jedná o jeden z&nbsp;nejstarších vyšších programovacích jazyků vůbec. Autorem teoretického návrhu tohoto jazyka je <i>John McCarthy</i>, který se již v&nbsp;roce 1956 připojil k&nbsp;týmu, jehož úkolem bylo navrhnout algebraický programovací jazyk umožňující mj.&nbsp;zpracování seznamů, jenž by byl vhodný pro vývoj systémů umělé inteligence &ndash; <i>AI</i> (zatímco dnes jsou &bdquo;v kurzu&ldquo; enterprise systémy popř.&nbsp;WEB 2.0, v&nbsp;padesátých a šedesátých letech minulého století se jednalo o umělou inteligenci a expertní systémy). McCarthy navrhl, aby se fakta o okolním světě (která může AI při své činnosti použít) lze reprezentovat formou vět ve vhodně strukturovaném formálním jazyce. Posléze se ukázalo, že je výhodné reprezentovat jednotlivé věty formou seznamů.  McCarthy myšlenku jazyka vhodného pro AI rozpracoval dále &ndash; odklonil se například od infixové notace zápisu algebraických výrazů, protože naprogramování některých manipulací s&nbsp;těmito výrazy (derivace, integrace, zjednodušení výrazů, logická dedukce) bylo zbytečně složité.</p>

<a href="http://i.iinfo.cz/images/455/lisp01.png"><img src="http://i.iinfo.cz/images/455/lisp01-prev.png" alt="lisp01" height="270" width="257" /></a>
<p><i>Obrázek 1: Na tomto grafu evoluce programovacích jazyků můžeme vidět některé jazyky, které jsme si již v&nbsp;tomto seriálu popsali (Fortran, Cobol, SNOBOL, Algol, APL) nebo popíšeme (LISP, Basic).</i></p>

<p>Následně McCarthy ve svých teoretických pracích (vznikajících v&nbsp;průběhu let 1957 a 1958) ukázal, že je možné pomocí několika poměrně jednoduchých operací (a notací pro zápis funkcí) vytvořit programovací jazyk, který je Turingovsky kompletní (tj.&nbsp;jeho výpočetní mocnost je ekvivalentní <i>Turingovu stroji</i>), ale zápis algoritmů v&nbsp;tomto jazyce je mnohem jednodušší než zápis pravidel pro Turingův stroj. Tento jazyk, jenž byl z&nbsp;velké části založen na <i>Lambda kalkulu</i>, obsahoval možnost vytváření rekurzivních funkcí (což byl významný rozdíl například oproti tehdejší verzi <i>FORTRANU</i>), funkce jako argumenty jiných funkcí, podmíněné výrazy (jedna z&nbsp;variant speciální formy), funkce pro manipulaci se seznamy a v&nbsp;neposlední řadě také funkci <i>eval</i>, o níž se zmíníme v&nbsp;navazující kapitole.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vznik interaktivní smyčky REPL</h2>

<p>Na McCarthovu teoretickou práci navázal <i>S. R. Russell</i>, který si uvědomil, že samotná funkce <i>eval</i>, pokud by byla implementována na nějakém počítači, může sloužit jako základ plnohodnotného interpretru jazyka <i>LISP</i> (interpretr LISPu se někdy též označuje zkratkou <i>REPL: Read-Eval-Print-Loop</i>, tj.&nbsp;interpretr ve smyčce načítá jednotlivé výrazy, vyhodnocuje je a následně tiskne jejich výslednou hodnotu). Russell skutečně celou smyčku <i>REPL</i> implementoval &ndash; tímto způsobem se zrodila první skutečně použitelná verze <i>LISPu</i>.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. M-výrazy a S-výrazy</h2>

<p><div class="rs-tip-major">Poznámka: McCarthy ve skutečnosti navrhl a popsal dva navzájem odlišné způsoby zápisu programů v&nbsp;LISPu. Jednalo se o takzvané <i>s-výrazy</i>, které používáme dodnes a potom o dnes již zapomenuté <i>m-výrazy</i>, v&nbsp;nichž se například používal &bdquo;lidštější&ldquo; zápis volání funkce (ovšem s&nbsp;využitím hranatých závorek) atd. Do dnešní doby ovšem přežily pouze s-výrazy, které dokážou velmi elegantním způsobem reprezentovat binární strom (jehož koncovými prvky jsou atomy) a navíc je u nich možné použít zjednodušený zápis seznamů.</div></p>

<a href="http://i.iinfo.cz/images/455/lisp01.png"><img src="http://i.iinfo.cz/images/455/lisp01-prev.png" alt="lisp01" height="270" width="257" /></a>
<p><i>Obrázek 1: Na tomto grafu evoluce programovacích jazyků můžeme vidět
některé programovací jazyky, které jsme si již popsali v&nbsp;seriálu o vývoji
počítačů a mikropočítačů.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Rozsáhlý a chaotický svět dialektů programovacího jazyka LISP</h2>

<p>V&nbsp;průběhu dalších více než pěti desetiletí dosti překotného rozvoje výpočetní techniky i programovacích jazyků vzniklo velmi mnoho dialektů tohoto programovacího jazyka, například <i>MacLISP</i>, <i>InterLISP</i>, <i>ZetaLISP</i>, <i>XLisp</i>, <i>AutoLISP</i> (původně odvozený z&nbsp;<i>XLispu</i>), samozřejmě <i>Emacs LISP</i> nebo slavný <i>Common LISP</i> (více viz odkazy na konci článku). Kromě těchto implementací jazyka LISP, které se od sebe v&nbsp;několika ohledech odlišují (například existencí či neexistencí maker či objektového systému), vznikl v&nbsp;minulosti i nový dialekt tohoto jazyka nazvaný <i>Scheme</i> (původně <i>Schemer</i>), jehož autory jsou Guy L. Steele a Gerald Jay Sussman (Steele později pracoval na specifikaci Javy i programovacího jazyka Fortress). Tento dialekt je implementačně jednodušší a také se ho lze naučit rychleji, než mnohé další varianty jazyka LISP.</p>

<a href="https://www.root.cz/obrazek/337666/"><img src="https://i.iinfo.cz/images/196/emacs2-1-prev.png" class="image-337666" alt="&#160;" width="370" height="196" /></a>
<p><i>Obrázek 2: Vývoj některých dialektů Lispu.<br />
Zdroj: <a href="https://en.wikipedia.org/wiki/Lisp_%28programming_language%29">Wikipedia</a>.</i></p>

<p>Právě z&nbsp;těchto důvodů se <i>Scheme</i> využívá či využívalo jak při výuce programování, tak i v&nbsp;mnoha open-source projektech, například v&nbsp;dnes popisovaném textovém editoru <i>Emacs</i> či v&nbsp;grafickém editoru <i>GIMP</i> jako jeden z&nbsp;podporovaných skriptovacích jazyků.  Richard Stallman si dokonce přál, aby se <i>Scheme</i> stalo standardním skriptovacím jazykem většiny GNU aplikací, což je idea, která se &ndash; především po vzniku dalších vysokoúrovňových programovacích jazyků (<i>Perl</i>, <i>Python</i>, <i>TCL</i>) &ndash; nakonec neuskutečnila (i když vedla k&nbsp;tzv.&nbsp;<a href="https://vanderburg.org/old_pages/Tcl/war/">Tcl war</a>).</p

<p><div class="rs-tip-major">Poznámka: Jazyk Scheme byl používán na MIT v&nbsp;úvodních kurzech programování. V&nbsp;roce 2009 byl nahrazen Pythonem, ovšem Scheme se dále používá, například v&nbsp;kurzu <a href="http://groups.csail.mit.edu/mac/users/gjs/6.945/">Adventures in Advanced Symbolic Programming</a> (podle některých studentů zdaleka nejzábavnější kurz, kterým prošli).</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. LISP jako koncept, nikoli konkrétní dialekt</h2>

<p>Musíme si však uvědomit, že samotný LISP je nutné chápat jako spíše koncept, než konkrétní programovací jazyk. Proto můžeme pod pojmem LISP (psáno též Lisp) najít poměrně velké množství programovacích jazyků, které sice mají podobný základ, ovšem konkrétní implementace jsou značně rozdílné. Do rodiny LISPovských jazyků tak dnes patří i dosti odlišné <a href="https://www.root.cz/clanky/novinky-v-clojure-verze-1-9-0/#k19">Clojure</a> a výše zmíněné implementace jazyka Scheme. Dnes patří mezi nejpopulárnější implementace LISPovského jazyka především Common Lisp, dále pochopitelně Emacs Lisp, ovšem nesmíme zapomenout na již zmíněné Clojure a taktéž <a href="https://racket-lang.org/">Racket</a> neboli původním názvem PLT Scheme popř.&nbsp;na GNU Guile (implementace Scheme, která měla být původně určena jako základní rozšiřující jazyk v&nbsp;GNU projektu, viz zmínka o RMS).</p>

<p><div class="rs-tip-major">Poznámka: uvádí se (ovšem bez hlubších měření), že Emacs Lisp je dnes ve světě open source pravděpodobně nejrozšířenější dialog Lispu s&nbsp;největší základnou programů a modulů.</div></p>

<p>Velmi pěkně jsou základní společné vlastnosti a rozdíly mezi těmito jazyky shrnuty na stránce <a href="http://hyperpolyglot.org/lisp">Common Lisp, Racket, Clojure, Emacs Lisp</a>.</p>

<img src="https://i.iinfo.cz/images/196/emacs2-2.jpg" class="image-337667" alt="&#160;" width="400" height="579" />
<p><i>Obrázek 3: SICP &ndash; jedna z&nbsp;nejznámějších knížek (nejenom) o LISPovských jazycích.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Již popsané dialekty LISPu a Scheme</h2>

<p>Na stránkách <a href="">Rootu</a> i serveru <a href="">Mojefedora.cz</a> jsme se již setkali s&nbsp;relativně velkým množstvím dialektů jazyka LISP či Scheme. Tyto dialekty budou (samozřejmě jen ve stručnosti) představeny v&nbsp;navazujících kapitolách.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p>Články s&nbsp;podrobnějšími informacemi:</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p>Články s&nbsp;podrobnějšími informacemi:</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p>Články s&nbsp;podrobnějšími informacemi:</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Literatura</h2>

<ol>

<li>Peter Seibel<br />
<i>&bdquo;Practical Common Lisp&ldquo;</i><br />
2009
</li>

<li>Paul Graham<br />
<i>&bdquo;ANSI Common Lisp&ldquo;</i><br />
1995
</li>

<li>Gerald Gazdar<br />
<i>&bdquo;Natural Language Processing in Lisp: An Introduction to Computational Linguistics&ldquo;</i><br />
1989
</li>

<li>Peter Norvig<br />
<i>&bdquo;Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp&ldquo;</i><br />
1991
</li>

<li>Alex Mileler et.al.<br />
<i>&bdquo;Clojure Applied: From Practice to Practitioner&ldquo;</i><br />
2015
</li>

<li>
<i>&bdquo;Living Clojure: An Introduction and Training Plan for Developers&ldquo;</i><br />
2015
</li>

<li>Dmitri Sotnikov<br />
<i>&bdquo;Web Development with Clojure: Build Bulletproof Web Apps with Less Code&ldquo;</i><br />
2016
</li>

<li>McCarthy<br />
<i>&bdquo;Recursive functions of symbolic expressions and their computation by machine, part I&ldquo;</i><br />
1960
</li>

<li>R. Kent Dybvig<br />
<i>&bdquo;The Scheme Programming Language&ldquo;</i><br />
2009
</li>

<li>Max Hailperin<br />
<i>&bdquo;Concrete Abstractions&ldquo;</i><br />
1998
</li>

<li>Guy L. Steele<br />
<i>&bdquo;History of Scheme&ldquo;</i><br />
2006, Sun Microsystems Laboratories
</li>

<li>Kolář J., Muller K.:<br />
<i>&bdquo;Speciální programovací jazyky&ldquo;</i><br />
Praha 1981
</li>

<li>
<i>&bdquo;AutoLISP Release 9, Programmer's reference&ldquo;</i><br />
Autodesk Ltd., October 1987
</li>

<li>
<i>&bdquo;AutoLISP Release 10, Programmer's reference&ldquo;</i><br />
Autodesk Ltd., September 1988
</li>

<li>McCarthy, John; Abrahams, Paul W.; Edwards, Daniel J.; Hart, Timothy P.; Levin, Michael I.<br />
<i>&bdquo;LISP 1.5 Programmer's Manual&ldquo;</i><br />
MIT Press. ISBN 0 262 130 1 1 4
</li>

<li>Carl Hewitt; Peter Bishop and Richard Steiger<br />
<i>&bdquo;A Universal Modular Actor Formalism for Artificial Intelligence&ldquo;</i><br />
1973
</li>

<li>Feiman, J.<br />
<i>&bdquo;The Gartner Programming Language Survey (October 2001)&ldquo;</i><br />
Gartner Advisory
</li>

<li>Harold Abelson, Gerald Jay Sussman, Julie Sussman:<br />
<i>Structure and Interpretation of Computer Programs</i><br />
MIT Press. 1985, 1996 (a možná vyšel i další přetisk)
</li>

<li>Paul Graham<br />
<i>On Lisp</i><br />
Prentice Hall, 1993<br />
Dostupné online na stránce <a href="http://www.paulgraham.com/onlisptext.html">http://www.paulgraham.com/onlisptext.html</a>
</li>

<li>David S. Touretzky<br />
<i>Common LISP: A Gentle Introduction to Symbolic Computation (Dover Books on Engineering)</i><br />
</li>

<li>Peter Norvig<br />
<i>Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp</i>
</li>

<li>Patrick Winston, Berthold Horn<br />
<i>Lisp (3rd Edition)</i><br />
ISBN-13: 978-0201083194, ISBN-10: 0201083191
</li>

<li>Matthias Felleisen, David Van Horn, Dr. Conrad Barski<br>
<i>Realm of Racket: Learn to Program, One Game at a Time!</i><br />
ISBN-13: 978-1593274917, ISBN-10: 1593274912 
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>SchemePy<br />
<a href="https://pypi.org/project/SchemePy/">https://pypi.org/project/SchemePy/</a>
</li>

<li>lispy<br />
<a href="https://pypi.org/project/lispy/">https://pypi.org/project/lispy/</a>
</li>

<li>Lython<br />
<a href="https://pypi.org/project/Lython/">https://pypi.org/project/Lython/</a>
</li>

<li>Lizpop<br />
<a href="https://pypi.org/project/lizpop/">https://pypi.org/project/lizpop/</a>
</li>

<li>Budoucnost programovacích jazyků<br />
<a href="http://www.knesl.com/budoucnost-programovacich-jazyku">http://www.knesl.com/budoucnost-programovacich-jazyku</a>
</li>

<li>LISP Prolog and Evolution<br />
<a href="http://blog.samibadawi.com/2013/05/lisp-prolog-and-evolution.html">http://blog.samibadawi.com/2013/05/lisp-prolog-and-evolution.html</a>
</li>

<li>List of Lisp-family programming languages<br />
<a href="https://en.wikipedia.org/wiki/List_of_Lisp-family_programming_languages">https://en.wikipedia.org/wiki/List_of_Lisp-family_programming_languages</a>
</li>

<li>clojure_py na indexu PyPi<br />
<a href="https://pypi.python.org/pypi/clojure_py">https://pypi.python.org/pypi/clojure_py</a>
</li>

<li>PyClojure<br />
<a href="https://github.com/eigenhombre/PyClojure">https://github.com/eigenhombre/PyClojure</a>
</li>

<li>Hy na GitHubu<br />
<a href="https://github.com/hylang/hy">https://github.com/hylang/hy</a>
</li>

<li>Hy: The survival guide<br />
<a href="https://notes.pault.ag/hy-survival-guide/">https://notes.pault.ag/hy-survival-guide/</a>
</li>

<li>Hy běžící na monitoru terminálu společnosti Symbolics<br />
<a href="http://try-hy.appspot.com/">http://try-hy.appspot.com/</a>
</li>

<li>Welcome to Hy’s documentation!<br />
<a href="http://docs.hylang.org/en/stable/">http://docs.hylang.org/en/stable/</a>
</li>

<li>Hy na PyPi<br />
<a href="https://pypi.org/project/hy/#description">https://pypi.org/project/hy/#description</a>
</li>

<li>Getting Hy on Python<br />
<a href="https://lwn.net/Articles/596626/">https://lwn.net/Articles/596626/</a>
</li>

<li>Programming Can Be Fun with Hy<br />
<a href="https://opensourceforu.com/2014/02/programming-can-fun-hy/">https://opensourceforu.com/2014/02/programming-can-fun-hy/</a>
</li>

<li>Přednáška o projektu Hy (pětiminutový lighttalk)<br />
<a href="http://blog.pault.ag/day/2013/04/02">http://blog.pault.ag/day/2013/04/02</a>
</li>

<li>Hy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Hy">https://en.wikipedia.org/wiki/Hy</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Point<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Point.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Point.html</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Narrowing<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Narrowing.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Narrowing.html</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Functions that Create Markers<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Markers.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Markers.html</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Motion<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion.html#Motion">https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion.html#Motion</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Basic Char Syntax<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Char-Syntax.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Char-Syntax.html</a>
</li>

<li>Elisp: Sequence: List, Array<br />
<a href="http://ergoemacs.org/emacs/elisp_list_vs_vector.html">http://ergoemacs.org/emacs/elisp_list_vs_vector.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

