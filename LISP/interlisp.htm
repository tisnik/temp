<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Interlisp aneb oživujeme dinosaura</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Interlisp aneb oživujeme dinosaura</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Interlisp aneb oživujeme dinosaura</a></p>
<p><a href="#k02">2. Cesta k&nbsp;Interlispu</a></p>
<p><a href="#k03">3. Interlisp neboli &bdquo;interactive Lisp&ldquo;</a></p>
<p><a href="#k04">4. Radikální odklon od předchozích implementací Lispu</a></p>
<p><a href="#k05">5. Ve &bdquo;stupidních závorkách&ldquo; se již neztratíme</a></p>
<p><a href="#k06">6. p-code ve skutečnosti nevznikl pro Pascal</a></p>
<p><a href="#k07">*** 7. Důležitá postava v&nbsp;historii IT: Warren Teitelman</a></p>
<p><a href="#k08">8. Interlisp dostupný pro starší počítačové platformy</a></p>
<p><a href="#k09">9. Pojďme tedy oživit dinosaura</a></p>
<p><a href="#k10">10. Stažení a překlad Interlispu</a></p>
<p><a href="#k11">*** 11. První seznámení s&nbsp;Interlispem</a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k18">18. Literatura</a></p>
<p><a href="#k19">19. Předchozí části seriálu</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Interlisp aneb oživujeme dinosaura</h2>

<p>V&nbsp;poněkud nepravidelně vycházejícím seriálu o rozsáhlém světě
Lispovských programovacích jazyků (mezi něž je zařazeno i Scheme a Clojure, i
když mezi různými dialekty Lispu existuje mnoho rozdílů <a
href="https://hyperpolyglot.org/lisp">shrnutých například zde pro dnes
nejpopulárnější varianty</a>) jsme se již seznámili s&nbsp;celou řadou
implementací Lispu i Scheme. Kromě <a
href="https://www.root.cz/clanky/jemny-uvod-do-rozsahleho-sveta-jazyku-lisp-a-scheme/">úvodního
článku</a> se stručnou historií Lispu jsme se zabývali především relativně
moderními implementacemi tohoto programovacího jazyka, tj.&nbsp;implementacemi,
jejichž interpretry, překladače a popř.&nbsp;v&nbsp;některých implementacích i
just-in-time překladače je možné používat i v&nbsp;moderních operačních
systémech. Zabývali jsme se i jazyky, které jsou součástí některých používaných
a populárních aplikací (typickým příkladem je pochopitelně <a
href="https://www.root.cz/n/emacs/">textový editor Emacs</a> se svým <a
href="https://www.root.cz/clanky/upravy-emacsu-s-emacs-lisp-zakladni-konstrukce-jazyka/">Emacs
Lispem</a> neboli Elispem).</p>

*** image ***
<p><i>Obrázek 1: O dnes popisovaném Interlispu v&nbsp;minulosti vyšlo několik
knih. Po MacLispu se totiž jednalo o další široce akceptovaný de facto
standard, který byl nahrazen až Common Lispem o desetiletí později.</i></p>

<p>Jen pro připomenutí si uveďme, s&nbsp;jakými variantami programovacího
jazyka Lisp nebo Scheme jsme se již setkali: především se jednalo o projekt
nazvaný <a
href="https://www.root.cz/clanky/gnu-guile-interpret-scheme-vestavitelny-do-nativnich-aplikaci/">GNU
Guile</a> a taktéž o nástroj <a
href="https://www.root.cz/clanky/tinyscheme-aneb-dalsi-interpret-jazyka-scheme-vestavitelny-do-dalsich-aplikaci/">TinyScheme</a>.
Oba zmíněné projekty nabízí programátorům jak klasickou interaktivní smyčku
REPL, tak i možnost vložit (<i>embed</i>) interpret či překladač programovacího
jazyka Scheme do dalších nativních aplikací a tím do značné míry rozšířit
jejich možnosti (skriptovatelné aplikace, aplikace s&nbsp;podporou pluginů
získaných od třetích stran atd.). Zatímco projekt GNU Guile obsahuje jak
interpret, tak i překladač (a to relativně dobrý), je TinyScheme v&nbsp;tomto
ohledu mnohem jednodušší, protože se jedná o &bdquo;pouhý&ldquo; interpret,
ovšem pochopitelně doplněný o automatickou správu paměti a další pro Scheme
naprosto nezbytné vlastnosti (podpora uzávěrů, optimalizace tail rekurze
atd.).</p>

<img src="https://i.iinfo.cz/images/695/chicken-scheme-1.png" class="image-399601" alt="&#160;" width="220" height="118" />
<p><i>Obrázek 2: Logo projektu GNU Guile, který se po letech stagnace opět
začíná rozvíjet.</i></p>

<p>Z&nbsp;rozsáhlejších projektů jsme se zmínili o programovacím jazyku
nazvaném <i>Kawa</i>, který je zajímavý a potenciálně užitečný hned
z&nbsp;několika důvodů. Jedná se totiž o implementaci jazyka Scheme
naprogramovanou v&nbsp;Javě a tedy běžící nad virtuálním strojem Javy (JVM).
Ovšem současně se v&nbsp;žádném případě nejedná o pouhý primitivní interpret,
ale o plnohodnotný překladač jazyka Scheme do bajtkódu JVM. <a
href="http://per.bothner.com/blog/2010/Kawa-in-shootout/">Z&nbsp;benchmarků</a>
je patrné, že výsledný kód vůbec není pomalý ale naopak dokáže více než zdárně
konkurovat dalším programovacím jazykům, které v&nbsp;současnosti nad JVM
existují.</p>

<img src="https://i.iinfo.cz/images/695/chicken-scheme-2.png" class="image-399602" alt="&#160;" width="256" height="256" />
<p><i>Obrázek 3: Logo projektu Kawa. Kawa je jednou z&nbsp;nejlepších variant
lispovského/schemovského jazyka určeného pro běh nad JVM. Pokud z&nbsp;nějakého
důvodu vyžadujete rychlejší start aplikací oproti Clojure, může se jednat o
velmi užitečný projekt.</i></p>

<p>A konečně jsme se ve třech článcích zabývali projektem nazvaným
<i>Racket</i>, jehož původní jméno bylo <i>PLT Scheme</i>. Samotný programovací
jazyk Racketu sice vychází z&nbsp;klasického Scheme, ale je poměrně snadno
rozšiřitelný a modifikovatelný, takže vzniklo hned několik jeho variant. Kromě
klasického dynamicky typovaného jazyka Scheme je tak možné použít jazyk
s&nbsp;možností přesné deklarace datových typů, jazyk s&nbsp;infixovu notací
zápisu aritmetických výrazů, dokonce i implementaci Algolu 60 atd. Mezi další
zdařilé implementace Scheme patří i <a
href="https://www.root.cz/clanky/projekt-gambit-dalsi-kvalitni-interpret-i-prekladac-programovaciho-jazyka-scheme/">Gambit</a>
a <a
href="https://www.root.cz/clanky/chicken-scheme-dalsi-interpret-a-predevsim-prekladac-programovaciho-jazyka-scheme/">Chicken
Scheme</a>.</p>

<a href="https://www.root.cz/obrazek/399603/"><img src="https://i.iinfo.cz/images/695/chicken-scheme-3-prev.png" class="image-399603" alt="&#160;" width="267" height="270" /></a>
<p><i>Obrázek 4: Logo projektu Racket.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Cesta k&nbsp;Interlispu</h2>

<p>Vývoj Interlispu začal již v&nbsp;roce 1966, ovšem zdaleka se nejednalo o
první široce používanou implementaci Lispu. První práce na programovacím
jazyku, který byl později pojmenován Lisp, totiž začaly už v&nbsp;roce 1956,
tedy v&nbsp;době, v&nbsp;níž se <i>John McCarthy</i> účastnil dnes již
legendárního projektu (a částečně i konference) s&nbsp;předlouhým jménem
<i>Dartmouth Summer Research Project on Articial Intelligence</i>. První
skutečně použitelná implementace Lispu byla dokončena v&nbsp;roce 1958, což je
rok, který je dnes oficiálně považován za rok vzniku Lispu (nebo v&nbsp;té době
spíše LISPu; až později se totiž začalo jméno tohoto jazyka psát minuskami). Po
roce 1958 začalo období expanze &ndash; Lisp se v&nbsp;různých variantách
rozšířil na mnoho různých v&nbsp;té době existujících či vznikajících
platforem. Buď se využíval takzvaný <a
href="https://www.root.cz/clanky/muzeme-verit-prekladacum-projekty-resici-schema-duverive-duvery/">bootstraping</a>,
tedy postupný převod plnohodnotného Lispu v&nbsp;menších krocích
(v&nbsp;jednodušších jazycích a nástrojích), nebo alternativně vznikaly zcela
nové implementace, což bylo zrovna v&nbsp;případě Lispu relativně jednoduché a
přímočaré řešení. Tyto varianty byly zpočátku do značné míry kompatibilní
s&nbsp;Lispem 1.5.</p>

*** image ***
<p><i>Obrázek 5: Postupný vývoj LISPovských jazyků.<br />
Zdroj: Wikipedia</i></p>

<p>Velmi dobrými příklady implementací Lispu 1.5 je Lisp pro mainframe IBM
7090, Lisp pro Univac M 460 resp.&nbsp;pro Univac 490 (460 byla armádní verze
Univacu 490) atd.. Zajímavá cesta vedla z&nbsp;IBM 7090 na slavné PDP-1. Zde se
použil již zmíněný <i>bootstraping</i>, kdy se začalo velmi jednoduchým
zaváděcím programem (měl několik stovek slov) a přes stále složitější a zejména
mocnější jazyky se dospělo do stadia, kdy již bylo možné přenést samotný Lisp
1.5. Mimochodem &ndash; oficiálními autory Lispu pro PDP-1 není nikdo jiný než
John McCarthy a Steve Russell, kteří stáli za původní ideou a implementací
Lispu. Další varianta Lispu pro PDP-1 byla vytvořena ve firmě <i>BBN</i> (Bolt
Beranek and Newman). Tato varianta byla nazvána <i>Basic PDP-1 Lisp</i> (ovšem
s&nbsp;programovacím jazykem BASIC neměla prakticky vůbec nic společného).
Z&nbsp;těchto variant Lispu postupně vznikla varianta určená pro PDP-6 (DEC) a
právě z&nbsp;této varianty vznikl rozšířený <i>MacLisp</i> (opět: ten ovšem
nemá nic společného s&nbsp;Macintoshem, &bdquo;mac&ldquo; zde znamená
&bdquo;macro&ldquo;).</p>

<p><div class="rs-tip-major">Poznámka: odklonem od klasického Lispu 1.5 a jeho
variant byl projekt nazvaný LISP 2, jehož vývoj byl financován ARPou. Cílem byl
vznik nového jazyka, jehož některé vlastnosti měly být podobné vlastnostem
ALGOLu 60. Ovšem i když byl LISP 2 skutečně implementován, nikdy se nedočkal
většího rozšíření:</div></p>

<p><i>... in contrast to most languages, in which the language is first
designed and then implemented ... it was facetiously said of LISP 2 that is was
an implementation in search of a language...</i></p>

<p>Vraťme se však k&nbsp;již výše zmíněnému <i>MacLispu</i>, který se taktéž
zapisoval jako <i>Maclisp</i>, <i>MACLISP</i> nebo dokonce <i>MacLISP</i>.
Tento dialekt programovacího jazyka Lisp, který byl používán ve slavných AI Lab
na MITu od konce šedesátých let minulého století až do začátku osmdesátých let,
byl po dlouhou dobu považován za neoficiální standard Lispu, tedy za jakousi
&bdquo;referenční implementaci&ldquo; (což je dnes zcela běžné &ndash; ostatně
mnoho moderních programovacích jazyků staví právě na referenční implementaci a
nikoli na rigidní specifikaci). MacLisp byl rozšířen na poměrně mnoho
platforem, například na PDP-6 a PDP-10, Honeywell 6180, běžel na Multicsu (ten
ukázal slepou uličku, kterou se NEvydal pozdější UNIX) atd. Samotný MacLisp se
pochopitelně postupně vyvíjel a zajímavé je, že byl použit pro vývoj a
implementaci dalších variant programovacích jazyků, mezi jinými i jazyka
Scheme. Dále není bez zajímavosti, že první varianta Emacsu založená na Lispu,
používala právě MacLisp pro systém Multics (v&nbsp;IT je prostě vše
propojeno).</p>

<p><div class="rs-tip-major">Poznámka: mezi zajímavé projekty, které vznikly
v&nbsp;MacLispu, patří především <a
href="https://en.wikipedia.org/wiki/SHRDLU">SHRDLU</a>, jenž umožňoval přímý
dialog uživatele a počítače, relativně pokročilou manipulaci s&nbsp;předměty
modelovaného světa atd. Tento systém byl považován za důležitý milník
v&nbsp;oboru umělé inteligence, ovšem ovlivnil i pokročilé parsery používané
v&nbsp;textovkách. Bližší informace je možné najít na stránkách tohoto projektu
dostupných na adrese <a
href="http://hci.stanford.edu/winograd/shrdlu/">http://hci.stanford.edu/winograd/shrdlu/</a>.</div></p>

*** image ***
<p><i>Obrázek 6: Část zdrojového kódu systému SHRDLU tak, jak ji tvůrci tohoto
systému nikdy neviděli &ndash; se zvýrazněnou syntaxí.</i></p>

<p>Slavný příklad dialogu s&nbsp;SHRDLU:</p>

<pre>
Person: Pick up a big red block.
Computer: OK.
Person: Grasp the pyramid.
Computer: I DON'T UNDERSTAND WHICH PYRAMID YOU MEAN.
Person (changing their mind): Find a block which is taller than the one you are holding and put it into the box.
Computer: BY "IT", I ASSUME YOU MEAN THE BLOCK WHICH IS TALLER THAN THE ONE I AM HOLDING.
Computer: OK.
Person: What does the box contain?
Computer: THE BLUE PYRAMID AND THE BLUE BLOCK.
Person: What is the pyramid supported by?
Computer: THE BOX.
Person: How many blocks are not in the box?
Computer: FOUR OF THEM.
Person: Is at least one of them narrower than the one which i told you to pick up?
Computer: YES, THE RED CUBE.
Person: Is it supported?
Computer: YES, BY THE TABLE.
...
...
...
Person: Does the shortest thing the tallest pyramid's support supports support anything green?
Computer: YES, THE GREEN PYRAMID.
Person: What color is it?
Computer: BY "IT", I ASSUME YOU MEAN THE SHORTEST THING THE TALLEST PYRAMID'S SUPPORT SUPPORTS.
Computer: RED
Person: How many things are on top of green cubes?
Computer: I'M NOT SURE WHAT YOU MEAN BY "ON TOP OF "IN THE PHRASE "ON TOP OF GREEN CUBES " .
DO YOU MEAN:
1 - DIRECTLY ON THE SURFACE
2 - ANWHERE ON TOP OF ?
Person: 2
Computer: THREE OF THEM.
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Interlisp neboli &bdquo;interactive Lisp&ldquo;</h2>

<p>Interlisp, jakožto ideový pokračovatel MacLispu, znamenal v&nbsp;době svého
vzniku poměrně zásadní změnu v&nbsp;tom, jak byl jazyk a celé jeho interaktivní
prostředí navržen. Původní Lispy totiž do značné míry vypadaly tak, jako
například dnešní GNU Guile &ndash; všechny formy musely být zapsány jako
s-výrazy, přičemž se netolerovaly žádné chyby, závorky musely být balancovány
atd. Interlisp byl dosti odlišný. Zejména byly rozšířeny možnosti nástrojů
dodávaných společně s&nbsp;tímto jazykem &ndash; přidán byl například v&nbsp;té
době přelomový korektor překlepů, přidány byly balíčky pro práci se soubory,
balíček CLISP umožňující zápis algebraických výrazů, programátorský editor pro
strukturovaný kód atd. Za většinou nových myšlenek implementovaných
v&nbsp;Interlispu stál <i>Warren Teitelman</i>, který napsal svoji disertaci na
téma symbiózy mezi člověkem a počítačem. A povšimněte si, že všechny novinky
implementované v&nbsp;Interlispu a zmíněné výše se soustředí právě na rozhraní
mezi počítačem a uživatelem (resp.&nbsp;programátorem) a nikoli například na
nové jazykové konstrukce.</p>

<p>Příkladem může být korektor překlepů realizovaný balíčkem pojmenovaným
<strong>DWIM</strong> neboli &bdquo;Do What I Mean&ldquo;. Pokud se ve formě
zapsané uživatelem nacházel neznámý symbol, mohl být balíček DWIM automaticky
vyvolán, aby našel správný symbol ze seznamu již definovaných symbolů a nabídl
uživateli opravu, korigoval chybu automaticky nebo vypsal chybové hlášení, jak
je to dodnes běžné.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Radikální odklon od předchozích implementací Lispu</h2>

<p>Možná ještě důležitější změnou či novinkou zavedenou v&nbsp;Interlispu je
programátorský editor. Ten totiž operoval nikoli nad běžným plain textem (jak
je tomu většinou dodnes), ale přímo nad lispovskými datovými strukturami,
protože díky homoikonicitě je každý lispovský program reprezentován stromovou
strukturou (tedy zjednodušeně řečeno seznamem seznamů). Jakákoli změna
provedená v&nbsp;programovém kódu se ihned projevila v&nbsp;modifikaci této
datové struktury, která mohla být kdykoli uložena do souboru. Tento soubor byl
tedy použit jako perzistentní úložiště celého programu a současně i jeho
prostředí. To šlo kdykoli později vyvolat.</p>

<p><div class="rs-tip-major">Poznámka: podobný koncept <i>obrazů</i> programu
nalezneme i ve Smalltalku.</div></p>

<p>Interlisp vznikl později než výše zmíněný MacLisp a hned několik vlastností
Interlispu bylo odvozeno od zkušeností programátorů s&nbsp;MacLispem. Příkladem
může být volitelné použití formy nazvané <strong>EVALQUOTE</strong> namísto
standardní a &bdquo;čisté&ldquo; formy <strong>EVAL</strong> využívané
MacLispem a později například i jazykem Scheme při zpracování jednotlivých
forem zapisovaných uživatelem nebo ve skriptech. Podívejme se na jednoduchý
příklad, jímž může být výraz pro spojení dvou seznamů. V&nbsp;MacLispu, Scheme
atd. by se zapsal následujícím způsobem:</p>

<pre>
(APPEND (QUOTE (FIRST SECOND THIRD)) (QUOTE (CAR CDR)))
</pre>

<p>popř.&nbsp;s&nbsp;využitím zkrácení <strong>QUOTE</strong> za ':</p>

<pre>
(APPEND '(FIRST SECOND THIRD) '(CAR CDR))
</pre>

<p>Naproti tomu Intelisp volitelně umožňuje použít <strong>EVALQUOTE</strong>
zajišťující implicitní uvození parametrů:</p>

<pre>
APPEND((FIRST SECOND THIRD) (CAR CDR))
</pre>

<p><div class="rs-tip-major">Poznámka: pro programátora tato změna znamená
poměrně zásadní přiblížení se běžným algebraickým jazykům, i když ve
skutečnosti počet závorek neklesá.</div></p>

<p>Zajímavou novinkou byl taktéž balíček nazvaný <strong>CLISP</strong>, který
dovoloval zápis funkcí ve formě, v&nbsp;níž se používala jak Lispovská, tak i
Algolská či Fortranovská notace:</p>

<pre>
DEFINEQ((FACTORIAL
  (LAMBDA (N) (IF N=0 THEN 1 ELSE N*(FACTORIAL N-1)))))
</pre>

<p>Díky kombinaci možností balíčků <strong>DWIM</strong> a
<strong>CLISP</strong> byla dokonce vyhodnotitelná i následující forma
s&nbsp;mnoha překlepy:</p>

<pre>
DEFINEQ((FACTORIAL
  (LAMBDA (N) (IFFN=0 THENN 1 ESLE N*9FACTORIALNN-1)))))
</pre>

<p><div class="rs-tip-major">Poznámka: předchozí příklad jsem nepatrně upravit
z&nbsp;původní podoby prezentované Warrenen Teitelmanem, a to z&nbsp;toho
důvodu, že na moderních klávesnicích se levá kulatá závorka zapisuje pomocí
Shift+9 a nikoli Shift+8. Původní ukázka totiž vypadala nepatrně odlišně,
protože terminál používaný Warrenem měl levou závorku nad číslem 8 (což nám
prozrazuje, jaké triky byly v&nbsp;DWIM použity):</div></p>

<pre>
DEFINEQ((FACTORIAL
  (LAMBDA (N) (IFFN=0 THENN 1 ESLE N*8FACTORIALNN-1)))))
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Ve &bdquo;stupidních závorkách&ldquo; se již neztratíme</h2>

<p>A konečně poslední zásadní změna zavedená v&nbsp;Intelispu souvisí
s&nbsp;uzavíráním forem. V&nbsp;Lispu se totiž většinou na konci formy
&bdquo;nahromadí&ldquo; mnoho pravých závorek, které uzavírají jednotlivé
subformy. Ovšem Intelisp umožňuje tyto závorky nahradit jedinou pravou hranatou
závorkou. Ostatně podívejme se na praktický příklad, který lze spustit
v&nbsp;dále popsaném interpretru. Jedná se o definici dvou funkcí, přičemž
první definice je psána ve standardním Lispu a druhá využívá automatické
uzavření všech závorek ve formě:</p>

<pre>
<strong>(DEFINEQ (ADD (LAMBDA (X Y) (+ X Y))))</strong>
NIL
&nbsp;
<strong>(ADD 1 2)</strong>
3
&nbsp;
<strong>(DEFINEQ (SUB (LAMBDA (X Y) (- X Y]</strong>
NIL
&nbsp;
<strong>(SUB 1 2)</strong>
-1
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. p-code ve skutečnosti nevznikl pro Pascal</h2>

<p>Již několikrát jsme se na stránkách Roota setkali s&nbsp;programovacím
jazykem Pascal. Za velmi důležitou implementaci Pascalu je (pochopitelně kromě
Turbo Pascalu) považován i <i>UCSD Pascal</i> vyvinutý v&nbsp;roce 1977 a
portovaný na mnoho existujících platforem, včetně domácích mikropočítačů (Apple
II), TI 99/4A, počítačů s&nbsp;čipy Z80, MOS 6502, Motorola 68000 i Intel
8086). Velká portabilita UCSD Pascalu byla zajištěna díky tomu, že se překlad
prováděl do takzvaného <i>p-code</i>, což není nic jiného, než obdoba moderních
bajtkódů (například bajtkód JVM atd.). Ostatně právě <a
href="https://www.root.cz/clanky/pohled-pod-kapotu-jvm-porovnani-bajtkodu-virtualniho-stroje-javy-s-lua-a-pythonem/">bajtkód
JVM</a> má s&nbsp;p-code mnoho společného: oba jsou založeny na zásobníku
operandů. p-code byl sice používán právě UCSD Pascalem, ovšem jeho zcela první
varianta vznikla právě pro potřeby Interlispu &ndash; uvádí se, že p-code pro
Interlisp byl vytvořen přibližně dva roky před p-code pro UCSD Pascal (existuje
totiž několik verzí p-code.).</p>

<p><div class="rs-tip-major">Poznámka: aby nedošlo k&nbsp;mýlce &ndash;
<i>p-code</i> neznamená <i>Pascal code</i>, ale <i>portable code</i>.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Důležitá postava v&nbsp;historii IT: Warren Teitelman</h2>

<p></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Interlisp dostupný pro starší počítačové platformy</h2>

<p>Většinu původních platforem, na nichž byl Interlisp provozován, dnes
nalezneme pouze v&nbsp;muzeích, i když se někdy jedná o funkční počítače.
Interlisp však byl později portován i na některé domácí osmibitové
mikropočítače, což by nemělo být příliš překvapivé, protože jejich možnosti
dosahovaly možností prvních minipočítačů. Příkladem až překvapivě dobré portace
je <i>Interlisp/65</i> určený pro osmibitové domácí mikropočítače Atari.
Zajímavé je, že distribuci (ne ovšem samotnou portaci) zajišťovala společnost
<i>Datasoft</i>, s&nbsp;níž jsme se seznámili ve zcela jiném kontextu &ndash;
tato firma totiž vytvářela i počítačové hry; viz například <a
href="https://www.root.cz/clanky/hry-vytvorene-firmou-datasoft-pro-osmibitove-domaci-mikropocitace/">Hry
vytvořené firmou Datasoft pro osmibitové domácí mikropočítače</a> (už jsem
psal, že v&nbsp;IT vše souvisí se vším, že?).</p>

<p>Ve zkratce se podívejme na to, jak <a
href="http://www.atarimania.com/utility-atari-400-800-xl-xe-inter-lisp_29354.html">tato
stále dostupná varianta Interlispu</a> vypadá:</p>

*** image ***
<p><i>Obrázek 7: Úvodní obrazovka Interlispu/65.</i></p>

*** image ***
<p><i>Obrázek 8: Volání existující funkce *, definice nové funkce a její
zavolání.</i></p>

*** image ***
<p><i>Obrázek 9: Specifikem Interlispu/65 je existence funkcí
<strong>POKE</strong>, <strong>PEEK</strong>, <strong>STICK</strong> atd., tedy
funkcí známých z&nbsp;Atari BASICu a důležitých pro vývoj reálných aplikací.
Zde se s&nbsp;využitím funkce <strong>POKE</strong> změnil obsah barvového
registru s&nbsp;barvou pozadí obrazovky v&nbsp;textovém režimu.</i></p>

<p><div class="rs-tip-major">Poznámka: všechny standardní funkce, makra a
speciální formy dostupné pro Intelisp/65 lze najít na adrese <a
href="https://atariage.com/forums/applications/core/interface/file/attachment.php?id=88382">https://atariage.com/forums/applications/core/interface/file/attachment.php?id=88382</a>.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Pojďme tedy oživit dinosaura</h2>

<p>Z&nbsp;předchozího textu je pravděpodobně zřejmé, že Interlisp byl jazyk
(resp.&nbsp;přesněji řečeno jedna z&nbsp;implementací Lispu), jenž má velký
historický význam, který v&nbsp;některých ohledech přesahuje význam MacLispu a
možná i pozdějšího Common Lispu. Tohoto faktu jsou si vědomi i autoři projektu
nazvaného <a href="https://interlisp.org/">Medley Interlisp Project</a>,
v&nbsp;jehož rámci je udržován projekt Medley. Nás však bude dnes zajímat jiný
projekt nazvaný přímočaře <i>LISPF4 - InterLisp Interpreter</i>, který je možné
nalézt na GitHubu, konkrétně na adrese <a
href="https://github.com/blakemcbride/LISPF4">https://github.com/blakemcbride/LISPF4</a>.
V&nbsp;rámci tohoto projektu došlo k&nbsp;přepsání těch částí Interlispu, které
byly původně vytvořeny v&nbsp;assembleru (a to v&nbsp;assembleru pro dobové
mainframy a minipočítače). Přepisem těchto obecně velmi těžko přenositelných
částí do programovacího jazyka C se zajistila mnohem snadnější přenositelnost,
takže dnes pro překlad stačí Linux se základními nástroji GNU toolchainu
(překladač jazyka C, linker). Podrobnosti si popíšeme níže.</p>

<p><div class="rs-tip-major">Poznámka: zde se tedy potvrzuje rčení, že C je
přenositelným assemblerem.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Stažení a překlad Interlispu</h2>

<p>V&nbsp;této kapitole si ukážeme, jak lze stáhnout, přeložit a spustit
interpret Interlispu. Budeme přitom potřebovat pouze základní GNU Toolchain (ve
skutečnosti lze však překlad provést i s&nbsp;LLVM toolchainem).</p>

<p>Nejprve provedeme naklonování repositáře s&nbsp;upravenými zdrojovými kódy
Interlispu:</p>

<pre>
$ <strong>git clone https://github.com/blakemcbride/LISPF4.git</strong>
&nbsp;
Cloning into 'LISPF4'...
remote: Enumerating objects: 47, done.
remote: Counting objects: 100% (47/47), done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 293 (delta 15), reused 34 (delta 10), pack-reused 246
Receiving objects: 100% (293/293), 75.29 MiB | 2.30 MiB/s, done.
Resolving deltas: 100% (154/154), done.
</pre>

<p>Přejdeme do adresáře s&nbsp;naklonovaným projektem:</p>

<pre>
$ <strong>cd LISPF4/</strong>
</pre>

<p>Překlad provedeme s&nbsp;využitím souboru Makefile určeného pro Unixy. Jméno
Makefile souboru je nestandardní, takže je ho nutné specifikovat
explicitně:</p>

<pre>
$ <strong>make -f Makefile.unx</strong>
</pre>

<p>Samotný překlad je prakticky okamžitý, protože je nutné přeložit a slinkovat
pouhé tři soubory:</p>

<pre>
cc -Dstricmp=strcasecmp -O3  -DCELLS=100000 -DATOMS=3000 -DSTACK=1500 -DARRAY=5000 -DYEAR=2021 -DMONTH=1 -DDAY=1   -c -o lispf41.o lispf41.c
cc -Dstricmp=strcasecmp -O3  -DCELLS=100000 -DATOMS=3000 -DSTACK=1500 -DARRAY=5000 -DYEAR=2021 -DMONTH=1 -DDAY=1   -c -o lispf42.o lispf42.c
cc -Dstricmp=strcasecmp -O3  -DCELLS=100000 -DATOMS=3000 -DSTACK=1500 -DARRAY=5000 -DYEAR=2021 -DMONTH=1 -DDAY=1   -c -o auxillary.o auxillary.c
gcc -o lispf4  -O lispf41.o lispf42.o auxillary.o -lm
</pre>

<p>Dále se automaticky spustí testy a kód pro vytvoření základního obrazu
systému:</p>

<pre>
./lispf4 -x &lt;script.1
Lisp F4 , latest update =   
           (2021 1 1)
Space (cells smallnum bignums atoms) =  
           (96865 1073690323 2999 2853)
--- Reset   
_10
&nbsp;
_10
&nbsp;
_10
&nbsp;
_ 
Exit from Lisp F4   
GBC:s (cell compacting num num/atom) =  
           (0 1 0 0)
Bye 
./lispf4 bare.img &lt;script.2
Lisp F4 , latest update =   
           (2021 1 1)
Space (cells smallnum bignums atoms) =  
           (96993 1073690323 2999 2850)
--- Reset   
_10
&nbsp;
_5
&nbsp;
BASIC1-PACKAGE
&nbsp;
NIL
&nbsp;
80
&nbsp;
80
&nbsp;
(LAMBDA (FN DEF)
        (PUTPROP FN 'FNCELL DEF))
&nbsp;
[NLAMBDA L
         (MAPC L
               '(LAMBDA (X)
                        (PUTD (CAR X)
                              (CADR X]
&nbsp;
(NLAMBDA (A)
         (PRINT (LIST 'FILEHEADER A)))
&nbsp;
(LAMBDA (FILE)
        (PROG (&amp;&amp;X LFN TEMP)
              (OR (SETQ LFN
                        (XCALL 1
                               (LIST 15 FILE 'OLD 'FORMATTED)))
                  (RETURN))
              (SETQ TEMP
                    (IOTAB 1 LFN))
         LOOP (SELECTQ
                (SETQ &amp;&amp;X
                      (READ))
                (STOP (XCALL 2 LFN)
                      (RETURN
                        (IOTAB 1 TEMP)))
                (EVAL &amp;&amp;X))
              (GO LOOP)))
&nbsp;
(LAMBDA (A)
        (PRIN0 A T)
        (TERPRI)
        A)
&nbsp;
_10
&nbsp;
__(FILEHEADER BASIC2)
BASIC2-PACKAGE
(VERSION 11)
BASIC2FNS
15
&nbsp;
_(FILEHEADER IO1)
IO1-PACKAGE
(VERSION 2)
IO1FNS
15
&nbsp;
_(FILEHEADER FUNC1)
FUNC1-PACKAGE
(VERSION 4)
FUNC1FNS
FUNC1VARS
15
&nbsp;
_(FILEHEADER DEBUG1)
DEBUG1-PACKAGE
(VERSION 6)
SYSERROR REDEFINED 
DEBUG1FNS
DEBUG1VARS
15
&nbsp;
_(FILEHEADER DEBUG2)
(DEBUG PACKAGE 2)
(VERSION 0)
PUTD REDEFINED 
DEBUG2FNS
DEBUG2VARS
15
&nbsp;
_(FILEHEADER EDIT)
EDIT-PACKAGE
(VERSION 4)
EDITFNS
15
&nbsp;
_(FILEHEADER MAKEF)
(MAKE FILE PACKAGE MODIFIED BY BLAKE MCBRIDE)
(VERSION 8)
FILEHEADER REDEFINED 
MAKEFFNS
MAKEFVARS
15
&nbsp;
_(FILEHEADER HISTORY)
(HISTORY FUNCTIONS)
(VERSION 2)
LISPX REDEFINED 
READ REDEFINED 
HISTORYFNS
HISTORYVARS
history.lisp - LOADED 
"history.lisp"
&nbsp;
_CUR
&nbsp;
_ 
--- Compacting GBC. Free cells =
           87119
basic.img SAVED 
"basic.img"
&nbsp;
_ 
Exit from Lisp F4   
GBC:s (cell compacting num num/atom) =  
           (0 1 0 0)
Bye 
</pre>

<p>Nyní by měl být Interlisp připraven k&nbsp;použití. Můžeme se pokusit
spustit jeho přeloženou verzi uloženou v&nbsp;podadresáři
<strong>Linux</strong>:</p>

<pre>
$ <strong>./lispf4 -h</strong>
&nbsp;
Usage:
        ./lispf4  [-h]  [-ZN]...  [-x]  [FILE.IMG]
&nbsp;
        Where Z is one of:
&nbsp;
        c = car/cdr cells (default 100000)
        a = atoms (default 3000)
        s = stack space (default 1500)
        p = print names / strings / reals / arrays (default 5000)
&nbsp;
        N = a number (no space between the option and N)
&nbsp;
        -x = do not load an image, however, require SYSATOMS file
        -h = display this help message
        FILE.IMG = an image file name
&nbsp;
You'll typically want to start the system with at least the BASIC.IMG image.
Without that, the system is quite bare.
</pre>

<p>Při spuštění se specifikuje jméno souboru se základním obrazem systému
(funkce standardní knihovny atd.):</p>

<pre>
$ <strong>./lispf4 basic.img</strong>
Lisp F4 , latest update =
           (2021 1 1)
Space (cells smallnum bignums atoms) =
           (87115 1073690323 2998 2221)
--- Reset
</pre>

<p>Interpret ukončíme funkcí <strong>exit</strong>:</p>

<pre>
_<strong>(exit)</strong>
&nbsp;
Exit from Lisp F4
GBC:s (cell compacting num num/atom) =
           (0 0 0 0)
Bye
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. První seznámení s&nbsp;Interlispem</h2>

<p>Interpret Interlipsu budeme spouštět následujícím způsobem, který nám
zajistí načtení základních funkcí, speciálních forem a maker uložených
v&nbsp;souboru <strong>basic.img</strong>:</p>

<pre>
$ <strong>./lispf4 basic.img</strong>
</pre>

<pre>
<strong>(print "Empty list")</strong>
<strong>(print '())</strong>
"Empty list"
:NIL

<strong>(print "A list")</strong>
<strong>(print '(1 2 3 4))</strong>
"A list"
(1 2 3 4)

<strong>(print "Another list")</strong>
<strong>(print (list 1 2 3 4))</strong>
"Another list"
(1 2 3 4)

<strong>(setq a '(1 2 3 4))</strong>
(1 2 3 4)

<strong>(print "car")</strong>
<strong>(print (car a))</strong>
"car"
1

<strong>(print "cdr")</strong>
<strong>(print (cdr a))</strong>
"cdr"
(2 3 4)

<strong>(print "cadr")</strong>
<strong>(print (cadr a))</strong>
"cadr"
2

<strong>(print "cddr")</strong>
<strong>(print (cddr a))</strong>
"cddr"
(3 4)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Tečka-dvojice a seznamy</h2>

<pre>
<strong>(print '(1 . ((2 . 3) . 4)))</strong>
(1 (2 . 3) . 4)

<strong>(print '((1 . 2) . (3 . 4)))</strong>
((1 . 2) 3 . 4)

<strong>(print '(1 . (2 . (3 . nil))))</strong>
(1 2 3)

<strong>(print '(1 . (2 . (3 . ()))))</strong>
(1 2 3)

<strong>(print '(1 . (2 . (3 . (4 ())))))</strong>
(1 2 3 4 NIL)

<strong>(print '(1 . (2 . (3 . (4 . ())))))</strong>
(1 2 3 4)
</pre>

<pre>
<strong>(print (cons 1 2))</strong>
(1 . 2)
</pre>

<pre>
<strong>(print (cons 1 (cons 2 3)))</strong>
(1 2 . 3)
</pre>

<pre>
<strong>(print '((1 . 2) . (3 . 4)))</strong>
((1 . 2) 3 . 4)
</pre>

<pre>
<strong>(print (cons 1 (cons 2 (cons 3 '()))))</strong>
(1 2 3)
</pre>

<pre>
<strong>(print (cons 1 (cons 2 (cons 3 nil))))</strong>
(1 2 3)
</pre>

<pre>
<strong>(print (cons 1 '(2 3 4)))</strong>
(1 2 3 4)
</pre>

<pre>
<strong>(print (cons 1 (cons 2 (cons 3 (cons 4 nil)))))</strong>
(1 2 3 4)
</pre>

<pre>
<strong>(print (cons 1 (cons 2 (cons 3 4))))</strong>
(1 2 3 . 4)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
<strong>(print (atom nil))</strong>
T

<strong>(print (atom T))</strong>
T

<strong>(print (atom 42))</strong>
T

<strong>(print (atom "string"))</strong>
NIL

<strong>(print (atom '(1 2 3)))</strong>
NIL

<strong>(print (listp nil))</strong>
NIL

<strong>(print (listp T))</strong>
NIL

<strong>(print (listp 42))</strong>
NIL

<strong>(print (listp "string"))</strong>
NIL

<strong>(print (listp '(1 2 3)))</strong>
(1 2 3)

<strong>(print (zerop 0))</strong>
T

<strong>(print (zerop 42))</strong>
NIL

<strong>(print (zerop nil))</strong>
NIL

<strong>(print (zerop T))</strong>
NIL
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
<strong>(print (and T T))</strong>
T

<strong>(print (and T nil))</strong>
NIL

<strong>(print (or T T))</strong>
T

<strong>(print (or T nil))</strong>
T

<strong>(print (or nil nil T nil))</strong>
T

<strong>(print (or nil nil nil nil))</strong>
NIL
</pre>

<pre>
(setq n 10)
10
 
(cond
      ((&lt; n 0)      'negative)
      ((&gt; n 0)      'positive)
      ((zerop n)    'zero))
___POSITIVE

(setq n -10)
-10
 
(cond
      ((&lt; n 0)      'negative)
      ((&gt; n 0)      'positive)
      ((zerop n)    'zero))
___NEGATIVE

(setq n 0)
0
 
(cond
      ((&lt; n 0)      'negative)
      ((&gt; n 0)      'positive)
      ((zerop n)    'zero))
___ZERO
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
<strong>((lambda (x y) (+ x y)) 1 2)</strong>
3
</pre>

<pre>
<strong>(print ((lambda (x y) (+ x y)) 1 2))</strong>
3
</pre>

<pre>
<strong>(defineq (add (lambda (x y ) (+ x y))))</strong>
NIL
&nbsp;
<strong>(add 10 20)</strong>
30
</pre>

<pre>
<strong>(add 1 2 3)</strong>
3
</pre>

<pre>
<strong>(add 1)</strong>
--- Illegal argument (subrn)
PLUS - (1 NIL) 
(PLUS BROKEN)
</pre>

<pre>
(defineq (mul (lambda (x y)
  (* x y))))

(mul 6 7)
42
</pre>


<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
(defineq (factorial (lambda (n)
    (cond ((zerop n) 1)
          (T (* n (factorial (- n 1))))))))

(print (factorial 10))
3628800
</pre>

<pre>
(defineq (factorial2 (lambda (n)
    (cond ((zerop n) 1)
          (T (* n (factorial2 (- n 1]

(print (factorial2 20))
7.5485486E17
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/lisp-families.git">https://github.com/tisnik/lisp-families.git</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, můžete
namísto toho použít odkazy na jednotlivé příklady, které naleznete
v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/lisp-families/blob/master/interlisp/">https://github.com/tisnik/lisp-families/blob/master/interlisp/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/lisp-families/blob/master/interlisp/">https://github.com/tisnik/lisp-families/blob/master/interlisp/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/lisp-families/blob/master/interlisp/">https://github.com/tisnik/lisp-families/blob/master/interlisp/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/lisp-families/blob/master/interlisp/">https://github.com/tisnik/lisp-families/blob/master/interlisp/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/lisp-families/blob/master/interlisp/">https://github.com/tisnik/lisp-families/blob/master/interlisp/</a></td></tr>
</table>



<p><a name="k18"></a></p>
<h2 id="k18">18. Literatura</h2>

<ol>

<li>Alan Bundy, Lincoln Wallen<br />
<i>&bdquo;Catalogue of Artificial Intelligence Tools&ldquo;</i><br />
Department of Artificial Intelligence, Edinburgh University, Scotland
</li>

<li>Brian Harvey<br />
<i>&bdquo;Simply Scheme: Introducing Computer Science&ldquo;</i><br />
1999 MIT<br />
Dostupné online na adrese <a href="https://people.eecs.berkeley.edu/~bh/ss-toc2.html">https://people.eecs.berkeley.edu/~bh/ss-toc2.html</a>
</li>

<li>Paul R. Wilson<br />
<i>&bdquo;An Introduction to Scheme and its Implementation&ldquo;</i><br />
1997<br />
Dostupné online na adrese <a href="https://www.cs.utexas.edu/ftp/garbage/cs345/schintro-v14/schintro_toc.html">https://www.cs.utexas.edu/ftp/garbage/cs345/schintro-v14/schintro_toc.html</a>
</li>

<li>Steele, Gabriel<br />
<i>&bdquo;The Evolution of Lisp&ldquo;</i><br />
Association for Computing Machinery, 1993
</li>

<li>Daniel G. Bobrow a Daniel L. Murphy<br />
<i>&bdquo;Structure of a LISP system using two-level storage&ldquo;</i><br />
Scientific Report No. 6, Bolt Beranek and Newman Inc., 4 November 1966
</li>

<li>Daniel G. Bobrow a Daniel L. Murphy<br />
<i>&bdquo;A note on the efficiency of a LISP computation in a paged machine&ldquo;</i><br />
Communications of the ACM, Volume 11, Issue 8, August 1968
</li>

<li>L. Peter Deutsch<br />
<i>&bdquo;An Interactive Program Verifier&ldquo;</i><br />
Xerox Palo Alto Research Center CSL-73-1, May 1973
</li>

<li>J. Strother Moore II<br />
<i>&bdquo;The INTERLISP Virtual Machine Specification&ldquo;</i><br />
Technical Report CSL 76-5, Xerox Palo Alto Research Center.
</li>

<li>Robert F. Sproull<br />
<i>&bdquo;InterLisp Display Primitives&ldquo;</i><br />
Palo Alto Research Center, Xerox Corporation, July 1977
</li>

<li>Dorai Sitaram<br />
<i>&bdquo;Teach Yourself Scheme in Fixnum Days&ldquo;</i><br />
1998–2015<br />
Dostupné online na adrese <a href="https://ds26gte.github.io/tyscheme/">https://ds26gte.github.io/tyscheme/</a>
</li>

<li>Warren Teitelman<br />
<i>&bdquo;Interlisp Reference Manual&ldquo;</i><br />
Xerox Palo Alto Research Center, 1974
</li>

<li>Venue (firma)<br />
<i>&bdquo;An Introduction to Medley&ldquo;</i><br />
Venue, 1982
</li>

<li>Warren Teitelman<br />
<i>&bdquo;History of Interlisp&ldquo;</i><br />
Association for Computing Machinery, 2008
</li>

<li>Warren Teitelman<br />
<i>&bdquo;PILOT: A Step Toward Man-Computer Symbiosis&ldquo;</i><br />
1966
</li>

<li>Peter Seibel<br />
<i>&bdquo;Practical Common Lisp&ldquo;</i><br />
2009
</li>

<li>Paul Graham<br />
<i>&bdquo;ANSI Common Lisp&ldquo;</i><br />
1995
</li>

<li>Gerald Gazdar<br />
<i>&bdquo;Natural Language Processing in Lisp: An Introduction to Computational Linguistics&ldquo;</i><br />
1989
</li>

<li>Peter Norvig<br />
<i>&bdquo;Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp&ldquo;</i><br />
1991
</li>

<li>Alex Mileler et.al.<br />
<i>&bdquo;Clojure Applied: From Practice to Practitioner&ldquo;</i><br />
2015
</li>

<li>
<i>&bdquo;Living Clojure: An Introduction and Training Plan for Developers&ldquo;</i><br />
2015
</li>

<li>Dmitri Sotnikov<br />
<i>&bdquo;Web Development with Clojure: Build Bulletproof Web Apps with Less Code&ldquo;</i><br />
2016
</li>

<li>McCarthy<br />
<i>&bdquo;Recursive functions of symbolic expressions and their computation by machine, part I&ldquo;</i><br />
1960
</li>

<li>R. Kent Dybvig<br />
<i>&bdquo;The Scheme Programming Language&ldquo;</i><br />
2009
</li>

<li>Max Hailperin, Barbara Kaiser, Karl Knight<br />
<i>&bdquo;Concrete Abstractions&ldquo;</i><br />
1998
</li>

<li>Guy L. Steele<br />
<i>&bdquo;History of Scheme&ldquo;</i><br />
2006, Sun Microsystems Laboratories
</li>

<li>Kolář J., Muller K.:<br />
<i>&bdquo;Speciální programovací jazyky&ldquo;</i><br />
Praha 1981
</li>

<li>
<i>&bdquo;AutoLISP Release 9, Programmer's reference&ldquo;</i><br />
Autodesk Ltd., October 1987
</li>

<li>
<i>&bdquo;AutoLISP Release 10, Programmer's reference&ldquo;</i><br />
Autodesk Ltd., September 1988
</li>

<li>McCarthy, John; Abrahams, Paul W.; Edwards, Daniel J.; Hart, Timothy P.; Levin, Michael I.<br />
<i>&bdquo;LISP 1.5 Programmer's Manual&ldquo;</i><br />
MIT Press. ISBN 0 262 130 1 1 4
</li>

<li>Carl Hewitt; Peter Bishop and Richard Steiger<br />
<i>&bdquo;A Universal Modular Actor Formalism for Artificial Intelligence&ldquo;</i><br />
1973
</li>

<li>Feiman, J.<br />
<i>&bdquo;The Gartner Programming Language Survey (October 2001)&ldquo;</i><br />
Gartner Advisory
</li>

<li>Harold Abelson, Gerald Jay Sussman, Julie Sussman:<br />
<i>Structure and Interpretation of Computer Programs</i><br />
MIT Press. 1985, 1996 (a možná vyšel i další přetisk)
</li>

<li>Paul Graham<br />
<i>On Lisp</i><br />
Prentice Hall, 1993<br />
Dostupné online na adrese <a href="http://www.paulgraham.com/onlisptext.html">http://www.paulgraham.com/onlisptext.html</a>
</li>

<li>David S. Touretzky<br />
<i>Common LISP: A Gentle Introduction to Symbolic Computation (Dover Books on Engineering)</i><br />
</li>

<li>Peter Norvig<br />
<i>Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp</i>
</li>

<li>Patrick Winston, Berthold Horn<br />
<i>Lisp (3rd Edition)</i><br />
ISBN-13: 978-0201083194, ISBN-10: 0201083191
</li>

<li>Matthias Felleisen, David Van Horn, Dr. Conrad Barski<br>
<i>Realm of Racket: Learn to Program, One Game at a Time!</i><br />
ISBN-13: 978-1593274917, ISBN-10: 1593274912 
</li>

</ol>



<p><a name="k19"></a></p>
<h2 id="k19">19. Předchozí části seriálu</h2>

<p>V&nbsp;této kapitole jsou uvedeny odkazy na všechny předchozí části seriálu
o světě programovacích jazyků LISP a Scheme (kromě samostatného seriálu, který
se věnoval programovacímu jazyku Clojure):</p>

<ol>

<li>Jemný úvod do rozsáhlého světa jazyků LISP a Scheme<br />
<a href="https://www.root.cz/clanky/jemny-uvod-do-rozsahleho-sveta-jazyku-lisp-a-scheme/">https://www.root.cz/clanky/jemny-uvod-do-rozsahleho-sveta-jazyku-lisp-a-scheme/</a>
</li>

<li>PicoLisp: minimalistický a přitom překvapivě výkonný interpret Lispu<br />
<a href="https://www.root.cz/clanky/picolisp-minimalisticky-a-pritom-prekvapive-vykonny-interpret-lispu/">https://www.root.cz/clanky/picolisp-minimalisticky-a-pritom-prekvapive-vykonny-interpret-lispu/</a>
</li>

<li>PicoLisp: užitečné funkce a speciální formy používané při tvorbě aplikací<br />
<a href="https://www.root.cz/clanky/picolisp-uzitecne-funkce-a-specialni-formy-pouzivane-pri-tvorbe-aplikaci/">https://www.root.cz/clanky/picolisp-uzitecne-funkce-a-specialni-formy-pouzivane-pri-tvorbe-aplikaci/</a>
</li>

<li>PicoLisp: dokončení popisu a několik praktických rad na závěr<br />
<a href="https://www.root.cz/clanky/picolisp-dokonceni-popisu-a-nekolik-praktickych-rad-na-zaver/">https://www.root.cz/clanky/picolisp-dokonceni-popisu-a-nekolik-praktickych-rad-na-zaver/</a>
</li>

<li>GNU Guile – interpret Scheme vestavitelný do nativních aplikací<br />
<a href="https://www.root.cz/clanky/gnu-guile-interpret-scheme-vestavitelny-do-nativnich-aplikaci/">https://www.root.cz/clanky/gnu-guile-interpret-scheme-vestavitelny-do-nativnich-aplikaci/</a>
</li>

<li>TinyScheme aneb další interpret jazyka Scheme vestavitelný do dalších aplikací<br />
<a href="https://www.root.cz/clanky/tinyscheme-aneb-dalsi-interpret-jazyka-scheme-vestavitelny-do-dalsich-aplikaci/">https://www.root.cz/clanky/tinyscheme-aneb-dalsi-interpret-jazyka-scheme-vestavitelny-do-dalsich-aplikaci/</a>
</li>

<li>Kawa: překvapivě silný a výkonný dialekt Scheme pro JVM<br />
<a href="https://www.root.cz/clanky/kawa-prekvapive-silny-a-vykonny-dialekt-scheme-pro-jvm/">https://www.root.cz/clanky/kawa-prekvapive-silny-a-vykonny-dialekt-scheme-pro-jvm/</a>
</li>

<li>Jazyk Kawa v&nbsp;ekosystému virtuálního stroje Javy<br />
<a href="https://www.root.cz/clanky/jazyk-kawa-v-ekosystemu-virtualniho-stroje-javy/">https://www.root.cz/clanky/jazyk-kawa-v-ekosystemu-virtualniho-stroje-javy/</a>
</li>

<li>Zpracování vektorů, matic a N-rozměrných polí v&nbsp;programovacím jazyku Kawa<br />
<a href="https://www.root.cz/clanky/zpracovani-vektoru-matic-a-n-rozmernych-poli-v-programovacim-jazyku-kawa/">https://www.root.cz/clanky/zpracovani-vektoru-matic-a-n-rozmernych-poli-v-programovacim-jazyku-kawa/</a>
</li>

<li>Racket: programovací jazyk a současně i platforma pro vývoj nových jazyků<br />
<a href="https://www.root.cz/clanky/racket-programovaci-jazyk-a-soucasne-i-platforma-pro-vyvoj-novych-jazyku/">https://www.root.cz/clanky/racket-programovaci-jazyk-a-soucasne-i-platforma-pro-vyvoj-novych-jazyku/</a>
</li>

<li>Makra v&nbsp;Racketu i v&nbsp;dalších lispovských jazycích<br />
<a href="https://www.root.cz/clanky/makra-v-racketu-i-v-dalsich-lispovskych-jazycich/">https://www.root.cz/clanky/makra-v-racketu-i-v-dalsich-lispovskych-jazycich/</a>
</li>

<li>Základní knihovna jazyka Racket<br />
<a href="https://www.root.cz/clanky/zakladni-knihovna-jazyka-racket/">https://www.root.cz/clanky/zakladni-knihovna-jazyka-racket/</a>
</li>

<li>Jazyk Joker: dialekt Clojure naprogramovaný v&nbsp;Go<br />
<a href="https://www.root.cz/clanky/jazyk-joker-dialekt-clojure-naprogramovany-v-go/">https://www.root.cz/clanky/jazyk-joker-dialekt-clojure-naprogramovany-v-go/</a>
</li>

<li>Chicken Scheme – další interpret a především překladač programovacího jazyka Scheme<br />
<a href="https://www.root.cz/clanky/chicken-scheme-dalsi-interpret-a-predevsim-prekladac-programovaciho-jazyka-scheme/">https://www.root.cz/clanky/chicken-scheme-dalsi-interpret-a-predevsim-prekladac-programovaciho-jazyka-scheme/</a>
</li>

<li>Projekt Gambit – další kvalitní interpret i překladač programovacího jazyka Scheme<br />
<a href="https://www.root.cz/clanky/projekt-gambit-dalsi-kvalitni-interpret-i-prekladac-programovaciho-jazyka-scheme/">https://www.root.cz/clanky/projekt-gambit-dalsi-kvalitni-interpret-i-prekladac-programovaciho-jazyka-scheme/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The Evolution of Lisp<br />
<a href="https://www.csee.umbc.edu/courses/331/resources/papers/Evolution-of-Lisp.pdf">https://www.csee.umbc.edu/courses/331/resources/papers/Evolution-of-Lisp.pdf</a>
</li>

<li>Interlisp.org: Dedicated to Restoring and Preserving the Interlisp experience<br />
<a href="https://github.com/Interlisp">https://github.com/Interlisp</a>
</li>

<li>Warren Teitelman<br />
<a href="https://en.wikipedia.org/wiki/Warren_Teitelman">https://en.wikipedia.org/wiki/Warren_Teitelman</a>
</li>

<li>InterLISP/65<br />
<a href="http://www.atarimania.com/utility-atari-400-800-xl-xe-interlisp-65_12477.html">http://www.atarimania.com/utility-atari-400-800-xl-xe-interlisp-65_12477.html</a>
</li>

<li>Lisp Editing in the 80s - Interlisp SEdit (Video)<br />
<a href="https://www.youtube.com/watch?v=2qsmF8HHskg">https://www.youtube.com/watch?v=2qsmF8HHskg</a>
</li>

<li>Inter-LISP<br />
<a href="http://www.atarimania.com/utility-atari-400-800-xl-xe-inter-lisp_29354.html">http://www.atarimania.com/utility-atari-400-800-xl-xe-inter-lisp_29354.html</a>
</li>

<li>InterLISP 65 Editing (video)<br />
<a href="https://www.youtube.com/watch?v=nY_hcazo86A">https://www.youtube.com/watch?v=nY_hcazo86A</a>
</li>

<li>Datasoft INTER-LISP/65 (Atari Age, chat)<br />
<a href="https://atariage.com/forums/topic/116093-datasoft-inter-lisp65/">https://atariage.com/forums/topic/116093-datasoft-inter-lisp65/</a>
</li>

<li>Marvin Minsky - The beauty of the Lisp language (44/151)<br />
<a href="https://www.youtube.com/watch?v=YaWVHyIBVeI">https://www.youtube.com/watch?v=YaWVHyIBVeI</a>
</li>

<li>History of LISP (Interlisp)<br />
<a href="http://www.softwarepreservation.org/projects/LISP/index.html#INTERLISP_">http://www.softwarepreservation.org/projects/LISP/index.html#INTERLISP_</a>
</li>

<li>Computer-Assisted Instruction (Bits and Bytes, Episode 7)<br />
<a href="https://www.youtube.com/watch?v=eURtTV_qKw8">https://www.youtube.com/watch?v=eURtTV_qKw8</a>
</li>

<li>Můžeme věřit překladačům? Projekty řešící schéma „důvěřivé důvěry“<br />
<a href="https://www.root.cz/clanky/muzeme-verit-prekladacum-projekty-resici-schema-duverive-duvery/">https://www.root.cz/clanky/muzeme-verit-prekladacum-projekty-resici-schema-duverive-duvery/</a>
</li>

<li>Gambit in the browser<br />
<a href="https://feeley.github.io/gambit-in-the-browser/">https://feeley.github.io/gambit-in-the-browser/</a>
</li>

<li>A Tour of Scheme in Gambit<br />
<a href="http://dynamo.iro.umontreal.ca/wiki/images/a/a7/A_Tour_of_Scheme_in_Gambit.pdf">http://dynamo.iro.umontreal.ca/wiki/images/a/a7/A_Tour_of_Scheme_in_Gambit.pdf</a>
</li>

<li>Gambit Scheme: Inside Out<br />
<a href="http://www.iro.umontreal.ca/~gambit/Gambit-inside-out.pdf">http://www.iro.umontreal.ca/~gambit/Gambit-inside-out.pdf</a>
</li>

<li>Gambit Internal Documentation<br />
<a href="http://dynamo.iro.umontreal.ca/wiki/index.php/Internal_Documentation">http://dynamo.iro.umontreal.ca/wiki/index.php/Internal_Documentation</a>
</li>

<li>clojure-scheme: Compiling to Native Code via Scheme <br />
<a href="http://www.iro.umontreal.ca/~gambit/Sorenson-Clojure-to-Native-via-Scheme.pdf">http://www.iro.umontreal.ca/~gambit/Sorenson-Clojure-to-Native-via-Scheme.pdf</a>
</li>

<li>Gauche &ndash; a Scheme implementation<br />
<a href="http://practical-scheme.net/gauche/">http://practical-scheme.net/gauche/</a>
</li>

<li>Scheme48<br />
<a href="https://s48.org/">https://s48.org/</a>
</li>

<li>SISC (Second Interpreter of Scheme)<br />
<a href="http://sisc-scheme.org/">http://sisc-scheme.org/</a>
</li>

<li>The SCM Implementation of Scheme<br />
<a href="https://people.csail.mit.edu/jaffer/SCM.html">https://people.csail.mit.edu/jaffer/SCM.html</a>
</li>

<li>Ypsilon - The ultimate script language system for the video pinball fourth generation<br />
<a href="http://www.littlewingpinball.com/doc/en/ypsilon/index.html">http://www.littlewingpinball.com/doc/en/ypsilon/index.html</a>
</li>

<li>Chicken Scheme<br />
<a href="https://call-cc.org/">https://call-cc.org/</a>
</li>

<li>Eggs Unlimited<br />
<a href="http://wiki.call-cc.org/chicken-projects/egg-index-5.html">http://wiki.call-cc.org/chicken-projects/egg-index-5.html</a>
</li>

<li>Chicken Scheme Wiki<br />
<a href="https://wiki.call-cc.org/">https://wiki.call-cc.org/</a>
</li>

<li>CHICKEN for Python programmers<br />
<a href="https://wiki.call-cc.org/chicken-for-python-programmers">https://wiki.call-cc.org/chicken-for-python-programmers</a>
</li>

<li>Programming for Performance<br />
<a href="http://wiki.call-cc.org/programming-for-performance">http://wiki.call-cc.org/programming-for-performance</a>
</li>

<li>Using the compiler<br />
<a href="https://wiki.call-cc.org/man/4/Using%20the%20compiler">https://wiki.call-cc.org/man/4/Using%20the%20compiler</a>
</li>

<li>CHICKEN Scheme tutorials<br />
<a href="https://wiki.call-cc.org/tutorials">https://wiki.call-cc.org/tutorials</a>
</li>

<li>Racket: programovací jazyk a současně i platforma pro vývoj nových jazyků<br />
<a href="https://www.root.cz/clanky/racket-programovaci-jazyk-a-soucasne-i-platforma-pro-vyvoj-novych-jazyku/">https://www.root.cz/clanky/racket-programovaci-jazyk-a-soucasne-i-platforma-pro-vyvoj-novych-jazyku/</a>
</li>

<li>Makra v Racketu i v dalších lispovských jazycích<br />
<a href="https://www.root.cz/clanky/makra-v-racketu-i-v-dalsich-lispovskych-jazycich/">https://www.root.cz/clanky/makra-v-racketu-i-v-dalsich-lispovskych-jazycich/</a>
</li>

<li>Základní knihovna jazyka Racket<br />
<a href="https://www.root.cz/clanky/zakladni-knihovna-jazyka-racket/">https://www.root.cz/clanky/zakladni-knihovna-jazyka-racket/</a>
</li>

<li>Grafický metaformát PostScript<br />
<a href="https://www.root.cz/clanky/graficky-metaformat-postscript/">https://www.root.cz/clanky/graficky-metaformat-postscript/</a>
</li>

<li>Vektorový grafický formát SVG<br />
<a href="https://www.root.cz/clanky/vektorovy-graficky-format-svg/">https://www.root.cz/clanky/vektorovy-graficky-format-svg/</a>
</li>

<li>The Racket Drawing Toolkit<br />
<a href="https://docs.racket-lang.org/draw/index.html">https://docs.racket-lang.org/draw/index.html</a>
</li>

<li>Traditional Turtles<br />
<a href="https://docs.racket-lang.org/turtles/Traditional_Turtles.html">https://docs.racket-lang.org/turtles/Traditional_Turtles.html</a>
</li>

<li>[racket] How best to repeat a function call n times?<br />
<a href="https://lists.racket-lang.org/users/archive/2014-September/064203.html">https://lists.racket-lang.org/users/archive/2014-September/064203.html</a>
</li>

<li>Racket: Macros<br />
<a href="https://www.it.uu.se/edu/course/homepage/avfunpro/ht13/lectures/Racket-3-Macros.pdf">https://www.it.uu.se/edu/course/homepage/avfunpro/ht13/lectures/Racket-3-Macros.pdf</a>
</li>

<li>Beautiful Racket / explainers: Macros<br />
<a href="https://beautifulracket.com/explainer/macros.html">https://beautifulracket.com/explainer/macros.html</a>
</li>

<li>Macros (dokumentace k Racketu)<br />
<a href="https://docs.racket-lang.org/guide/macros.html">https://docs.racket-lang.org/guide/macros.html</a>
</li>

<li>Model syntaxe jazyka Racket<br />
<a href="https://docs.racket-lang.org/reference/syntax-model.html">https://docs.racket-lang.org/reference/syntax-model.html</a>
</li>

<li>Syntax Objects<br />
<a href="https://docs.racket-lang.org/guide/stx-obj.html">https://docs.racket-lang.org/guide/stx-obj.html</a>
</li>

<li>Tech behind Tech: Clojure Macros Simplified<br />
<a href="http://techbehindtech.com/2010/09/28/clojure-macros-simplified/">http://techbehindtech.com/2010/09/28/clojure-macros-simplified/</a>
</li>

<li>Fatvat - Exploring functional programming: Clojure Macros<br />
<a href="http://www.fatvat.co.uk/2009/02/clojure-macros.html">http://www.fatvat.co.uk/2009/02/clojure-macros.html</a>
</li>

<li>Beautiful Racket: an intro­duction to language-oriented programming using Racket<br />
<a href="https://beautifulracket.com/">https://beautifulracket.com/</a>
</li>

<li>Stránky projektu Racket<br />
<a href="https://racket-lang.org/">https://racket-lang.org/</a>
</li>

<li>Dokumentace k&nbsp;projektu Racket<br />
<a href="https://docs.racket-lang.org/index.html">https://docs.racket-lang.org/index.html</a>
</li>

<li>Seznam dostupných balíčků pro Racket<br />
<a href="https://pkgs.racket-lang.org/">https://pkgs.racket-lang.org/</a>
</li>

<li>Racket na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/Racket_(programming_language)">https://en.wikipedia.org/wiki/Racket_(programming_language)</a>
</li>

<li>Vector Library (R7RS-compatible)<br />
<a href="https://srfi.schemers.org/srfi-133/srfi-133.html">https://srfi.schemers.org/srfi-133/srfi-133.html</a>
</li>

<li>Blogy o Racketu a navazujících technologiích<br />
<a href="https://blog.racket-lang.org/">https://blog.racket-lang.org/</a>
</li>

<li>Prográmky psané v&nbsp;Racketu na RosettaCode<br />
<a href="http://rosettacode.org/wiki/Category:Racket">http://rosettacode.org/wiki/Category:Racket</a>
</li>

<li>Fear of Macros<br />
<a href="https://www.greghendershott.com/fear-of-macros/">https://www.greghendershott.com/fear-of-macros/</a>
</li>

<li>Rackjure<br />
<a href="https://github.com/greghendershott/rackjure">https://github.com/greghendershott/rackjure</a>
</li>

<li>Matthew Flatt’s proposal to change Racket’s s-expressions based syntax to infix representation creates a stir in the community<br />
<a href="https://hub.packtpub.com/matthew-flatts-proposal-to-change-rackets-s-expressions-based-syntax-to-infix-representation-creates-a-stir-in-the-community/">https://hub.packtpub.com/matthew-flatts-proposal-to-change-rackets-s-expressions-based-syntax-to-infix-representation-creates-a-stir-in-the-community/</a>
</li>

<li>Racket News<br />
<a href="https://racket-news.com/">https://racket-news.com/</a>
</li>

<li>Racket: Lisp for learning<br />
<a href="https://lwn.net/Articles/795385/">https://lwn.net/Articles/795385/</a>
</li>

<li>Future of Racket<br />
<a href="https://www.greghendershott.com/2019/07/future-of-racket.html">https://www.greghendershott.com/2019/07/future-of-racket.html</a>
</li>

<li>Vectors (pro Gauche)<br />
<a href="https://practical-scheme.net/gauche/man/gauche-refe/Vectors.html">https://practical-scheme.net/gauche/man/gauche-refe/Vectors.html</a>
</li>

<li>Kawa: Compiling Scheme to Java<br />
<a href="https://www.mit.edu/afs.new/sipb/project/kawa/doc/kawa-tour.html">https://www.mit.edu/afs.new/sipb/project/kawa/doc/kawa-tour.html</a>
</li>

<li>Kawa in Languages shootout<br />
<a href="http://per.bothner.com/blog/2010/Kawa-in-shootout/">http://per.bothner.com/blog/2010/Kawa-in-shootout/</a>
</li>

<li>Kawa 2.0 Supports Scheme R7RS<br />
<a href="https://developers.slashdot.org/story/14/12/13/2259225/kawa-20-supports-scheme-r7rs/">https://developers.slashdot.org/story/14/12/13/2259225/kawa-20-supports-scheme-r7rs/</a>
</li>

<li>Kawa — fast scripting on the Java platform<br />
<a href="https://lwn.net/Articles/623349/">https://lwn.net/Articles/623349/</a>
</li>

<li>Tail call (a její optimalizace)<br />
<a href="https://en.wikipedia.org/wiki/Tail_call">https://en.wikipedia.org/wiki/Tail_call</a>
</li>

<li>SLIME (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/SLIME">http://en.wikipedia.org/wiki/SLIME</a>
</li>

<li>slime.vim<br />
<a href="http://s3.amazonaws.com/mps/slime.vim">http://s3.amazonaws.com/mps/slime.vim</a>
</li>

<li>What are the best scheme implementations?<br />
<a href="https://www.slant.co/topics/5282/~scheme-implementations">https://www.slant.co/topics/5282/~scheme-implementations</a>
</li>

<li>Bigloo homepage<br />
<a href="http://www-sop.inria.fr/mimosa/fp/Bigloo/">http://www-sop.inria.fr/mimosa/fp/Bigloo/</a>
</li>

<li>FTP s tarbally Bigloo<br />
<a href="ftp://ftp-sop.inria.fr/indes/fp/Bigloo">ftp://ftp-sop.inria.fr/indes/fp/Bigloo</a>
</li>

<li>GOTO 2018 • Functional Programming in 40 Minutes • Russ Olsen<br />
<a href="https://www.youtube.com/watch?v=0if71HOyVjY">https://www.youtube.com/watch?v=0if71HOyVjY</a>
</li>

<li>TinyScheme (stránka na Sourceforge)<br />
<a href="http://tinyscheme.sourceforge.net/home.html">http://tinyscheme.sourceforge.net/home.html</a>
</li>

<li>Embedding Tiny Scheme in a Game<br />
<a href="http://www.silicondelight.com/embedding-tiny-scheme-in-a-game/">http://www.silicondelight.com/embedding-tiny-scheme-in-a-game/</a>
</li>

<li>Embedding Scheme for a game mission scripting DSL<br />
<a href="http://carloscarrasco.com/embedding-scheme-for-a-game-mission-scripting-dsl.html">http://carloscarrasco.com/embedding-scheme-for-a-game-mission-scripting-dsl.html</a>
</li>

<li>Všechny verze TinyScheme na SourceForge<br />
<a href="https://sourceforge.net/projects/tinyscheme/files/tinyscheme/">https://sourceforge.net/projects/tinyscheme/files/tinyscheme/</a>
</li>

<li>Fork TinyScheme na GitHubu<br />
<a href="https://github.com/yawnt/tinyscheme">https://github.com/yawnt/tinyscheme</a>
</li>

<li>Ackermannova funkce<br />
<a href="https://cs.wikipedia.org/wiki/Ackermannova_funkce">https://cs.wikipedia.org/wiki/Ackermannova_funkce</a>
</li>

<li>Ackermann function na Rosetta Code<br />
<a href="https://rosettacode.org/wiki/Ackermann_function#Scheme">https://rosettacode.org/wiki/Ackermann_function#Scheme</a>
</li>

<li>Success Stories (lisp.org)<br />
<a href="https://lisp-lang.org/success/">https://lisp-lang.org/success/</a>
</li>

<li>Allegro Common Lisp Success Stories<br />
<a href="https://franz.com/success/">https://franz.com/success/</a>
</li>

<li>Clojure Success Stories<br />
<a href="https://clojure.org/community/success_stories">https://clojure.org/community/success_stories</a>
</li>

<li>Scheme Quick Reference<br />
<a href="https://www.st.cs.uni-saarland.de/edu/config-ss04/scheme-quickref.pdf">https://www.st.cs.uni-saarland.de/edu/config-ss04/scheme-quickref.pdf</a>
</li>

<li>Slajdy o Scheme (od slajdu číslo 15)<br />
<a href="https://docs.google.com/presentation/d/1abmDnKjrq1tcjGvvRNAKhOiSTSE2lyagtcEPal07Gbo/edit">https://docs.google.com/presentation/d/1abmDnKjrq1tcjGvvRNAKhOiSTSE2lyagtcEPal07Gbo/edit</a>
</li>

<li>Scheme Cheat Sheet<br />
<a href="https://github.com/smythp/scheme-cheat-sheet">https://github.com/smythp/scheme-cheat-sheet</a>
</li>

<li>Embedding Lua, embedding Guile <br />
<a href="http://puntoblogspot.blogspot.com/2013/04/embedding-lua-embedding-guile.html">http://puntoblogspot.blogspot.com/2013/04/embedding-lua-embedding-guile.html</a>
</li>

<li>Lambda Papers<br />
<a href="https://en.wikisource.org/wiki/Lambda_Papers">https://en.wikisource.org/wiki/Lambda_Papers</a>
</li>

<li>Revised<sup>7</sup>Report on the Algorithmic Language Scheme<br />
<a href="https://small.r7rs.org/attachment/r7rs.pdf">https://small.r7rs.org/attachment/r7rs.pdf</a>
</li>

<li>Video Lectures (MIT, SICP 2005)<br />
<a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/">https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/</a>
</li>

<li>Why is Scheme my first language in university?<br />
<a href="https://softwareengineering.stackexchange.com/questions/115252/why-is-scheme-my-first-language-in-university">https://softwareengineering.stackexchange.com/questions/115252/why-is-scheme-my-first-language-in-university</a>
</li>

<li>The Perils of JavaSchools<br />
<a href="https://www.joelonsoftware.com/2005/12/29/the-perils-of-javaschools-2/">https://www.joelonsoftware.com/2005/12/29/the-perils-of-javaschools-2/</a>
</li>

<li>How to Design Programs, Second Edition<br />
<a href="https://htdp.org/2019-02-24/index.html">https://htdp.org/2019-02-24/index.html</a>
</li>

<li>LilyPond<br />
<a href="http://lilypond.org/">http://lilypond.org/</a>
</li>

<li>LilyPond — Extending (přes Scheme)<br />
<a href="http://lilypond.org/doc/v2.18/Documentation/extending/scheme-tutorial">http://lilypond.org/doc/v2.18/Documentation/extending/scheme-tutorial</a>
</li>

<li>Scheme in LilyPond<br />
<a href="http://lilypond.org/doc/v2.18/Documentation/extending/scheme-in-lilypond">http://lilypond.org/doc/v2.18/Documentation/extending/scheme-in-lilypond</a>
</li>

<li>GnuCash<br />
<a href="http://www.gnucash.org/">http://www.gnucash.org/</a>
</li>

<li>Custom Reports (in GNU Cash)<br />
<a href="https://wiki.gnucash.org/wiki/Custom_Reports">https://wiki.gnucash.org/wiki/Custom_Reports</a>
</li>

<li>Program by Design<br />
<a href="https://programbydesign.org/">https://programbydesign.org/</a>
</li>

<li>SchemePy<br />
<a href="https://pypi.org/project/SchemePy/">https://pypi.org/project/SchemePy/</a>
</li>

<li>LISP FQA: Section - [1-5] What is the "minimal" set of primitives needed for a Lisp interpreter?<br />
<a href="http://www.faqs.org/faqs/lisp-faq/part1/section-6.html">http://www.faqs.org/faqs/lisp-faq/part1/section-6.html</a>
</li>

<li>femtolisp<br />
<a href="https://github.com/JeffBezanson/femtolisp">https://github.com/JeffBezanson/femtolisp</a>
</li>

<li>(How to Write a (Lisp) Interpreter (in Python))<br />
<a href="http://norvig.com/lispy.html">http://norvig.com/lispy.html</a>
</li>

<li>Repositář s&nbsp;Guile Emacsem<br />
<a href="http://git.hcoop.net/?p=bpt/guile.git">http://git.hcoop.net/?p=bpt/guile.git</a>
</li>

<li>Interacting with Guile Compound Data Types in C<br />
<a href="http://www.lonelycactus.com/guilebook/x1555.html">http://www.lonelycactus.com/guilebook/x1555.html</a>
</li>

<li>Calling Guile functions from C<br />
<a href="http://www.lonelycactus.com/guilebook/c1204.html#SECCALLGUILEFUNC">http://www.lonelycactus.com/guilebook/c1204.html#SECCALLGUILEFUNC</a>
</li>

<li>Arrays, and other compound data types<br />
<a href="http://www.lonelycactus.com/guilebook/charrays.html">http://www.lonelycactus.com/guilebook/charrays.html</a>
</li>

<li>Interacting with Guile Compound Data Types in C<br />
<a href="http://www.lonelycactus.com/guilebook/x1555.html">http://www.lonelycactus.com/guilebook/x1555.html</a>
</li>

<li>Guile Reference Manual<br />
<a href="https://www.gnu.org/software/guile/manual/html_node/index.html">https://www.gnu.org/software/guile/manual/html_node/index.html</a>
</li>

<li>Scheme: Summary of Common Syntax<br />
<a href="https://www.gnu.org/software/guile/manual/html_node/Syntax-Summary.html#Syntax-Summary">https://www.gnu.org/software/guile/manual/html_node/Syntax-Summary.html#Syntax-Summary</a>
</li>

<li>Scripting with Guile: Extension language enhances C and Scheme<br />
<a href="https://www.ibm.com/developerworks/library/l-guile/index.html">https://www.ibm.com/developerworks/library/l-guile/index.html</a>
</li>

<li>Having fun with Guile: a tutorial<br />
<a href="http://dustycloud.org/misc/guile-tutorial.html">http://dustycloud.org/misc/guile-tutorial.html</a>
</li>

<li>Guile: Loading Readline Support<br />
<a href="https://www.gnu.org/software/guile/manual/html_node/Loading-Readline-Support.html#Loading-Readline-Support">https://www.gnu.org/software/guile/manual/html_node/Loading-Readline-Support.html#Loading-Readline-Support</a>
</li>

<li>lispy<br />
<a href="https://pypi.org/project/lispy/">https://pypi.org/project/lispy/</a>
</li>

<li>Lython<br />
<a href="https://pypi.org/project/Lython/">https://pypi.org/project/Lython/</a>
</li>

<li>Lizpop<br />
<a href="https://pypi.org/project/lizpop/">https://pypi.org/project/lizpop/</a>
</li>

<li>Budoucnost programovacích jazyků<br />
<a href="http://www.knesl.com/budoucnost-programovacich-jazyku">http://www.knesl.com/budoucnost-programovacich-jazyku</a>
</li>

<li>LISP Prolog and Evolution<br />
<a href="http://blog.samibadawi.com/2013/05/lisp-prolog-and-evolution.html">http://blog.samibadawi.com/2013/05/lisp-prolog-and-evolution.html</a>
</li>

<li>List of Lisp-family programming languages<br />
<a href="https://en.wikipedia.org/wiki/List_of_Lisp-family_programming_languages">https://en.wikipedia.org/wiki/List_of_Lisp-family_programming_languages</a>
</li>

<li>clojure_py na indexu PyPi<br />
<a href="https://pypi.python.org/pypi/clojure_py">https://pypi.python.org/pypi/clojure_py</a>
</li>

<li>PyClojure<br />
<a href="https://github.com/eigenhombre/PyClojure">https://github.com/eigenhombre/PyClojure</a>
</li>

<li>Hy na GitHubu<br />
<a href="https://github.com/hylang/hy">https://github.com/hylang/hy</a>
</li>

<li>Hy: The survival guide<br />
<a href="https://notes.pault.ag/hy-survival-guide/">https://notes.pault.ag/hy-survival-guide/</a>
</li>

<li>Hy běžící na monitoru terminálu společnosti Symbolics<br />
<a href="http://try-hy.appspot.com/">http://try-hy.appspot.com/</a>
</li>

<li>Welcome to Hy’s documentation!<br />
<a href="http://docs.hylang.org/en/stable/">http://docs.hylang.org/en/stable/</a>
</li>

<li>Hy na PyPi<br />
<a href="https://pypi.org/project/hy/#description">https://pypi.org/project/hy/#description</a>
</li>

<li>Getting Hy on Python<br />
<a href="https://lwn.net/Articles/596626/">https://lwn.net/Articles/596626/</a>
</li>

<li>Programming Can Be Fun with Hy<br />
<a href="https://opensourceforu.com/2014/02/programming-can-fun-hy/">https://opensourceforu.com/2014/02/programming-can-fun-hy/</a>
</li>

<li>Přednáška o projektu Hy (pětiminutový lighttalk)<br />
<a href="http://blog.pault.ag/day/2013/04/02">http://blog.pault.ag/day/2013/04/02</a>
</li>

<li>Hy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Hy">https://en.wikipedia.org/wiki/Hy</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Point<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Point.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Point.html</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Narrowing<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Narrowing.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Narrowing.html</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Functions that Create Markers<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Markers.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Markers.html</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Motion<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion.html#Motion">https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion.html#Motion</a>
</li>

<li>GNU Emacs Lisp Reference Manual: Basic Char Syntax<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Char-Syntax.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Char-Syntax.html</a>
</li>

<li>Elisp: Sequence: List, Array<br />
<a href="http://ergoemacs.org/emacs/elisp_list_vs_vector.html">http://ergoemacs.org/emacs/elisp_list_vs_vector.html</a>
</li>

<li>Elisp: Property List<br />
<a href="http://ergoemacs.org/emacs/elisp_property_list.html">http://ergoemacs.org/emacs/elisp_property_list.html</a>
</li>

<li>Elisp: Hash Table<br />
<a href="http://ergoemacs.org/emacs/elisp_hash_table.html">http://ergoemacs.org/emacs/elisp_hash_table.html</a>
</li>

<li>Elisp: Association List<br />
<a href="http://ergoemacs.org/emacs/elisp_association_list.html">http://ergoemacs.org/emacs/elisp_association_list.html</a>
</li>

<li>The mapcar Function (An Introduction to Programming in Emacs Lisp)<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/mapcar.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/mapcar.html</a>
</li>

<li>Anaphoric macro<br />
<a href="https://en.wikipedia.org/wiki/Anaphoric_macro">https://en.wikipedia.org/wiki/Anaphoric_macro</a>
</li>

<li>Some Common Lisp Loop Macro Examples<br />
<a href="https://www.youtube.com/watch?v=3yl8o6r_omw">https://www.youtube.com/watch?v=3yl8o6r_omw</a>
</li>

<li>A Guided Tour of Emacs<br />
<a href="https://www.gnu.org/software/emacs/tour/">https://www.gnu.org/software/emacs/tour/</a>
</li>

<li>The Roots of Lisp<br />
<a href="http://www.paulgraham.com/rootsoflisp.html">http://www.paulgraham.com/rootsoflisp.html</a>
</li>

<li>Evil (Emacs Wiki)<br />
<a href="https://www.emacswiki.org/emacs/Evil">https://www.emacswiki.org/emacs/Evil</a>
</li>

<li>Evil (na GitHubu)<br />
<a href="https://github.com/emacs-evil/evil">https://github.com/emacs-evil/evil</a>
</li>

<li>Evil (na stránkách repositáře MELPA)<br />
<a href="https://melpa.org/#/evil">https://melpa.org/#/evil</a>
</li>

<li>Evil Mode: How I Switched From VIM to Emacs<br />
<a href="https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html">https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html</a>
</li>

<li>GNU Emacs (home page)<br />
<a href="https://www.gnu.org/software/emacs/">https://www.gnu.org/software/emacs/</a>
</li>

<li>GNU Emacs (texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?GnuEmacs">http://texteditors.org/cgi-bin/wiki.pl?GnuEmacs</a>
</li>

<li>An Introduction To Using GDB Under Emacs<br />
<a href="http://tedlab.mit.edu/~dr/gdbintro.html">http://tedlab.mit.edu/~dr/gdbintro.html</a>
</li>

<li>An Introduction to Programming in Emacs Lisp<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html</a>
</li>

<li>27.6 Running Debuggers Under Emacs<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html</a>
</li>

<li>GdbMode<br />
<a href="http://www.emacswiki.org/emacs/GdbMode">http://www.emacswiki.org/emacs/GdbMode</a>
</li>

<li>Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Emacs">https://en.wikipedia.org/wiki/Emacs</a>
</li>

<li>Emacs timeline<br />
<a href="http://www.jwz.org/doc/emacs-timeline.html">http://www.jwz.org/doc/emacs-timeline.html</a>
</li>

<li>Emacs Text Editors Family<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?EmacsFamily">http://texteditors.org/cgi-bin/wiki.pl?EmacsFamily</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse (část 2: vyhledávání a nahrazování textu)<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/</a>
</li>

<li>Emacs/Evil-mode - A basic reference to using evil mode in Emacs<br />
<a href="http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet">http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet</a>
</li>

<li>From Vim to Emacs+Evil chaotic migration guide<br />
<a href="https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/">https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/</a>
</li>

<li>Introduction to evil-mode {video)<br />
<a href="https://www.youtube.com/watch?v=PeVQwYUxYEg">https://www.youtube.com/watch?v=PeVQwYUxYEg</a>
</li>

<li>EINE (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/EINE">http://www.emacswiki.org/emacs/EINE</a>
</li>

<li>EINE (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?EINE">http://texteditors.org/cgi-bin/wiki.pl?EINE</a>
</li>

<li>ZWEI (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/ZWEI">http://www.emacswiki.org/emacs/ZWEI</a>
</li>

<li>ZWEI (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?ZWEI">http://texteditors.org/cgi-bin/wiki.pl?ZWEI</a>
</li>

<li>Zmacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Zmacs">https://en.wikipedia.org/wiki/Zmacs</a>
</li>

<li>Zmacs (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?Zmacs">http://texteditors.org/cgi-bin/wiki.pl?Zmacs</a>
</li>

<li>TecoEmacs (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/TecoEmacs">http://www.emacswiki.org/emacs/TecoEmacs</a>
</li>

<li>Micro Emacs<br />
<a href="http://www.emacswiki.org/emacs/MicroEmacs">http://www.emacswiki.org/emacs/MicroEmacs</a>
</li>

<li>Micro Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MicroEMACS">https://en.wikipedia.org/wiki/MicroEMACS</a>
</li>

<li>EmacsHistory<br />
<a href="http://www.emacswiki.org/emacs/EmacsHistory">http://www.emacswiki.org/emacs/EmacsHistory</a>
</li>

<li>Seznam editorů s ovládáním podobným Emacsu či kompatibilních s příkazy Emacsu<br />
<a href="http://www.finseth.com/emacs.html">http://www.finseth.com/emacs.html</a>
</li>

<li>evil-numbers<br />
<a href="https://github.com/cofi/evil-numbers">https://github.com/cofi/evil-numbers</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (1.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (2.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v editorech Emacs a Vim<br />
<a href="https://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">https://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Org mode<br />
<a href="https://orgmode.org/">https://orgmode.org/</a>
</li>

<li>The Org Manual<br />
<a href="https://orgmode.org/manual/index.html">https://orgmode.org/manual/index.html</a>
</li>

<li>Kakoune (modální textový editor)<br />
<a href="http://kakoune.org/">http://kakoune.org/</a>
</li>

<li>Vim-style keybinding in Emacs/Evil-mode<br />
<a href="https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8">https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8</a>
</li>

<li>Emacs - jak začít<br />
<a href="http://www.abclinuxu.cz/clanky/navody/emacs-jak-zacit">http://www.abclinuxu.cz/clanky/navody/emacs-jak-zacit</a>
</li>

<li>Programovací jazyk LISP a LISP machines<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/">https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/</a>
</li>

<li>Evil-surround<br />
<a href="https://github.com/emacs-evil/evil-surround">https://github.com/emacs-evil/evil-surround</a>
</li>

<li>Spacemacs<br />
<a href="http://spacemacs.org/">http://spacemacs.org/</a>
</li>

<li>Lisp: Common Lisp, Racket, Clojure, Emacs Lisp<br />
<a href="http://hyperpolyglot.org/lisp">http://hyperpolyglot.org/lisp</a>
</li>

<li>Common Lisp, Scheme, Clojure, And Elisp Compared<br />
<a href="http://irreal.org/blog/?p=725">http://irreal.org/blog/?p=725</a>
</li>

<li>Does Elisp Suck?<br />
<a href="http://irreal.org/blog/?p=675">http://irreal.org/blog/?p=675</a>
</li>

<li>Emacs pro mírně pokročilé (9): Elisp<br />
<a href="https://www.root.cz/clanky/emacs-elisp/">https://www.root.cz/clanky/emacs-elisp/</a>
</li>

<li>If I want to learn lisp, are emacs and elisp a good choice?<br />
<a href="https://www.reddit.com/r/emacs/comments/2m141y/if_i_want_to_learn_lisp_are_emacs_and_elisp_a/">https://www.reddit.com/r/emacs/comments/2m141y/if_i_want_to_learn_lisp_are_emacs_and_elisp_a/</a>
</li>

<li>Clojure(Script) Interactive Development Environment that Rocks!<br />
<a href="https://github.com/clojure-emacs/cider">https://github.com/clojure-emacs/cider</a>
</li>

<li>An Introduction to Emacs Lisp<br />
<a href="https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html">https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html</a>
</li>

<li>Emergency Elisp<br />
<a href="http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html">http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html</a>
</li>

<li>Lambda calculus<br />
<a href="https://en.wikipedia.org/wiki/Lambda_calculus">https://en.wikipedia.org/wiki/Lambda_calculus</a>
</li>

<li>John McCarthy's original LISP paper from 1959<br />
<a href="https://www.reddit.com/r/programming/comments/17lpz4/john_mccarthys_original_lisp_paper_from_1959/">https://www.reddit.com/r/programming/comments/17lpz4/john_mccarthys_original_lisp_paper_from_1959/</a>
</li>

<li>Micro Manual LISP<br />
<a href="https://www.scribd.com/document/54050141/Micro-Manual-LISP">https://www.scribd.com/document/54050141/Micro-Manual-LISP</a>
</li>

<li>How Lisp Became God's Own Programming Language<br />
<a href="https://twobithistory.org/2018/10/14/lisp.html">https://twobithistory.org/2018/10/14/lisp.html</a>
</li>

<li>History of Lisp<br />
<a href="http://jmc.stanford.edu/articles/lisp/lisp.pdf">http://jmc.stanford.edu/articles/lisp/lisp.pdf</a>
</li>

<li>The Roots of Lisp<br />
<a href="http://languagelog.ldc.upenn.edu/myl/llog/jmc.pdf">http://languagelog.ldc.upenn.edu/myl/llog/jmc.pdf</a>
</li>

<li>Racket<br />
<a href="https://racket-lang.org/">https://racket-lang.org/</a>
</li>

<li>The Racket Manifesto<br />
<a href="http://felleisen.org/matthias/manifesto/">http://felleisen.org/matthias/manifesto/</a>
</li>

<li>MIT replaces Scheme with Python<br />
<a href="https://www.johndcook.com/blog/2009/03/26/mit-replaces-scheme-with-python/">https://www.johndcook.com/blog/2009/03/26/mit-replaces-scheme-with-python/</a>
</li>

<li>Adventures in Advanced Symbolic Programming<br />
<a href="http://groups.csail.mit.edu/mac/users/gjs/6.945/">http://groups.csail.mit.edu/mac/users/gjs/6.945/</a>
</li>

<li>Why MIT Switched from Scheme to Python (2009)<br />
<a href="https://news.ycombinator.com/item?id=14167453">https://news.ycombinator.com/item?id=14167453</a>
</li>

<li>Starodávná stránka XLispu<br />
<a href="http://www.xlisp.org/">http://www.xlisp.org/</a>
</li>

<li>AutoLISP<br />
<a href="https://en.wikipedia.org/wiki/AutoLISP">https://en.wikipedia.org/wiki/AutoLISP</a>
</li>

<li>Seriál PicoLisp: minimalistický a výkonný interpret Lispu<br />
<a href="https://www.root.cz/serialy/picolisp-minimalisticky-a-vykonny-interpret-lispu/">https://www.root.cz/serialy/picolisp-minimalisticky-a-vykonny-interpret-lispu/</a>
</li>

<li>Common Lisp<br />
<a href="https://common-lisp.net/">https://common-lisp.net/</a>
</li>

<li>Getting Going with Common Lisp<br />
<a href="https://cliki.net/Getting%20Started">https://cliki.net/Getting%20Started</a>
</li>

<li>Online Tutorial (Common Lisp)<br />
<a href="https://cliki.net/online%20tutorial">https://cliki.net/online%20tutorial</a>
</li>

<li>Guile Emacs<br />
<a href="https://www.emacswiki.org/emacs/GuileEmacs">https://www.emacswiki.org/emacs/GuileEmacs</a>
</li>

<li>Guile Emacs History<br />
<a href="https://www.emacswiki.org/emacs/GuileEmacsHistory">https://www.emacswiki.org/emacs/GuileEmacsHistory</a>
</li>

<li>Guile is a programming language<br />
<a href="https://www.gnu.org/software/guile/">https://www.gnu.org/software/guile/</a>
</li>

<li>MIT Scheme<br />
<a href="http://groups.csail.mit.edu/mac/projects/scheme/">http://groups.csail.mit.edu/mac/projects/scheme/</a>
</li>

<li>SIOD: Scheme in One Defun<br />
<a href="http://people.delphiforums.com/gjc//siod.html">http://people.delphiforums.com/gjc//siod.html</a>
</li>

<li>CommonLispForEmacs<br />
<a href="https://www.emacswiki.org/emacs/CommonLispForEmacs">https://www.emacswiki.org/emacs/CommonLispForEmacs</a>
</li>

<li>Elisp: print, princ, prin1, format, message<br />
<a href="http://ergoemacs.org/emacs/elisp_printing.html">http://ergoemacs.org/emacs/elisp_printing.html</a>
</li>

<li>Special Forms in Lisp<br />
<a href="http://www.nhplace.com/kent/Papers/Special-Forms.html">http://www.nhplace.com/kent/Papers/Special-Forms.html</a>
</li>

<li>Basic Building Blocks in LISP<br />
<a href="https://www.tutorialspoint.com/lisp/lisp_basic_syntax.htm">https://www.tutorialspoint.com/lisp/lisp_basic_syntax.htm</a>
</li>

<li>Introduction to LISP - University of Pittsburgh<br />
<a href="https://people.cs.pitt.edu/~milos/courses/cs2740/Lectures/LispTutorial.pdf">https://people.cs.pitt.edu/~milos/courses/cs2740/Lectures/LispTutorial.pdf</a>
</li>

<li>Why don't people use LISP<br />
<a href="https://forums.freebsd.org/threads/why-dont-people-use-lisp.24572/">https://forums.freebsd.org/threads/why-dont-people-use-lisp.24572/</a>
</li>

<li>Structured program theorem<br />
<a href="https://en.wikipedia.org/wiki/Structured_program_theorem">https://en.wikipedia.org/wiki/Structured_program_theorem</a>
</li>

<li>Clojure: API Documentation<br />
<a href="https://clojure.org/api/api">https://clojure.org/api/api</a>
</li>

<li>Tutorial for the Common Lisp Loop Macro<br />
<a href="http://www.ai.sri.com/pkarp/loop.html">http://www.ai.sri.com/pkarp/loop.html</a>
</li>

<li>Common Lisp's Loop Macro Examples for Beginners<br />
<a href="http://www.unixuser.org/~euske/doc/cl/loop.html">http://www.unixuser.org/~euske/doc/cl/loop.html</a>
</li>

<li>A modern list api for Emacs. No 'cl required.<br />
<a href="https://github.com/magnars/dash.el">https://github.com/magnars/dash.el</a>
</li>

<li>The LOOP Facility<br />
<a href="http://www.lispworks.com/documentation/HyperSpec/Body/06_a.htm">http://www.lispworks.com/documentation/HyperSpec/Body/06_a.htm</a>
</li>

<li>Clojure.org: Vars and the Global Environment<br />
<a href="http://clojure.org/Vars">http://clojure.org/Vars</a>
</li>

<li>Clojure.org: Refs and Transactions<br />
<a href="http://clojure.org/Refs">http://clojure.org/Refs</a>
</li>

<li>Clojure.org: Atoms<br />
<a href="http://clojure.org/Atoms">http://clojure.org/Atoms</a>
</li>

<li>Clojure.org: Agents as Asynchronous Actions<br />
<a href="http://clojure.org/agents">http://clojure.org/agents</a>
</li>

<li>Transient Data Structures
<a href="http://clojure.org/transients">http://clojure.org/transients</a>
</li>

<li>Dynamic Languages Strike Back<br />
<a href="http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html">http://steve-yegge.blogspot.cz/2008/05/dynamic-languages-strike-back.html</a>
</li>

<li>Scripting: Higher Level Programming for the 21st Century<br />
<a href="http://www.tcl.tk/doc/scripting.html">http://www.tcl.tk/doc/scripting.html</a>
</li>

<li>Clojure (na Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Clojure">http://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Clojure (na Wikipedia CS)<br />
<a href="http://cs.wikipedia.org/wiki/Clojure">http://cs.wikipedia.org/wiki/Clojure</a>
</li>

<li>SICP (The Structure and Interpretation of Computer Programs)<br />
<a href="http://mitpress.mit.edu/sicp/">http://mitpress.mit.edu/sicp/</a>
</li>

<li>Pure function<br />
<a href="http://en.wikipedia.org/wiki/Pure_function">http://en.wikipedia.org/wiki/Pure_function</a>
</li>

<li>Funkcionální programování<br />
<a href="http://cs.wikipedia.org/wiki/Funkcionální_programování">http://cs.wikipedia.org/wiki/Funkcionální_programování</a>
</li>

<li>Jazyky Hy a Clojure-py: moderní dialekty LISPu určené pro Python VM<br />
<a href="https://www.root.cz/clanky/jazyky-hy-a-clojure-py-moderni-dialekty-lispu-urcene-pro-python-vm/">https://www.root.cz/clanky/jazyky-hy-a-clojure-py-moderni-dialekty-lispu-urcene-pro-python-vm/</a>
</li>

<li>Pixie: lehký skriptovací jazyk s „kouzelnými“ schopnostmi<br />
<a href="https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/">https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/</a>
</li>

<li>Programovací jazyk Pixie: funkce ze základní knihovny a použití FFI<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/">https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/</a>
</li>

<li>Stránka projektu Jython<br />
<a href="http://www.jython.org/">http://www.jython.org/</a>
</li>

<li>Jython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Jython">https://en.wikipedia.org/wiki/Jython</a>
</li>

<li>Scripting for the Java Platform (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Scripting_for_the_Java_Platform">https://en.wikipedia.org/wiki/Scripting_for_the_Java_Platform</a>
</li>

<li>JSR 223: Scripting for the Java<sup>TM</sup> Platform<br />
<a href="https://jcp.org/en/jsr/detail?id=223">https://jcp.org/en/jsr/detail?id=223</a>
</li>

<li>List of JVM languages<br />
<a href="https://en.wikipedia.org/wiki/List_of_JVM_languages">https://en.wikipedia.org/wiki/List_of_JVM_languages</a>
</li>

<li>The Java<sup>TM</sup> Virtual Machine Specification, Second Edition<br />
<a href="http://java.sun.com/docs/books/jvms/second_edition/html/VMSpecTOC.doc.html">http://java.sun.com/docs/books/jvms/second_edition/html/VMSpecTOC.doc.html</a>
</li>

<li>The class File Format<br />
<a href="http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html">http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html</a>
</li>

<li>javap - The Java Class File Disassembler<br />
<a href="http://docs.oracle.com/javase/1.4.2/docs/tooldocs/windows/javap.html">http://docs.oracle.com/javase/1.4.2/docs/tooldocs/windows/javap.html</a>
</li>

<li>javap-java-1.6.0-openjdk(1) - Linux man page<br />
<a href="http://linux.die.net/man/1/javap-java-1.6.0-openjdk">http://linux.die.net/man/1/javap-java-1.6.0-openjdk</a>
</li>

<li>Using javap<br />
<a href="http://www.idevelopment.info/data/Programming/java/miscellaneous_java/Using_javap.html">http://www.idevelopment.info/data/Programming/java/miscellaneous_java/Using_javap.html</a>
</li>

<li>Examine class files with the javap command<br />
<a href="http://www.techrepublic.com/article/examine-class-files-with-the-javap-command/5815354">http://www.techrepublic.com/article/examine-class-files-with-the-javap-command/5815354</a>
</li>

<li>Economy Size Geek - Interview with Rich Hickey, Creator of Clojure<br />
<a href="https://www.linuxjournal.com/article/10708">https://www.linuxjournal.com/article/10708</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

