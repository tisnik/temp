<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Grafické uživatelské rozhraní v Pythonu: kouzla s kreslicí plochou (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Grafické uživatelské rozhraní v Pythonu: kouzla s kreslicí plochou (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Popis kreslicí plochy (canvasu) dostupné v knihovně Tkinter dnes dokončíme. Popíšeme si práci s rastrovými obrázky i s jednořádkovými a víceřádkovými řetězci. Ve druhé části článku se budeme zabývat nejsložitějším widgetem knihovny Tkinter, který se jmenuje Text.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Rastrové obrázky typu <strong>BitmapImage</strong></a></p>
<p><a href="#k02">2. Rastrové obrázky typu <strong>PhotoImage</strong></a></p>
<p><a href="#k03">3. Bitmapy (<strong>BitmapImage</strong>) &ndash; dvoubarevné obrázky</a></p>
<p><a href="#k04">4. Změna barvy popředí a pozadí u bitmap</a></p>
<p><a href="#k05">5. Pixmapy (<strong>PhotoImage</strong>) &ndash; vícebarevné obrázky</a></p>
<p><a href="#k06">6. Text na canvasu</a></p>
<p><a href="#k07">7. Vertikální výpis textu na canvas</a></p>
<p><a href="#k08">8. Rotace textu</a></p>
<p><a href="#k09">9. Maximální šířka textu</a></p>
<p><a href="#k10">10. Widget <strong>Text</strong></a></p>
<p><a href="#k11">11. Příklad použití widgetu <strong>Text</strong></a></p>
<p><a href="#k12">12. Nastavení stylů widgetu <strong>Text</strong></a></p>
<p><a href="#k13">13. Použití tagů ve widgetu <strong>Text</strong> pro selektivní nastavení stylu vybraného textu</a></p>
<p><a href="#k14">14. Složitější příklady se styly textu</a></p>
<p><a href="#k15">15. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k16">16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Rastrové obrázky typu <strong>BitmapImage</strong></h2>

<p>Objekty typu <strong>image</strong> slouží k&nbsp;vytváření a manipulaci
s&nbsp;rastrovými obrázky a to jak bitmapami (v&nbsp;kontextu knihovny Tkinter
jednobarevnými či dvoubarevnými obrázky), tak i takzvanými pixmapami (obecně
vícebarevnými obrázky, ať již s&nbsp;barvovou paletou či bez palety).</p>

<p>Poznámka: rozlišení mezi bitmapami a obrázky s&nbsp;větším množstvím barev
do určité míry souvisí s&nbsp;historickým vývojem programovacího jazyka TCL a
knihovny Tk. Dnes je již použití klasických bitmap do značné míry omezeno na
specifikaci výběrových masek či pro specifický pixel art [<a
href="http://pixeljoint.com/files/icons/full/2_colour_wave.gif">1</a>] [<a
href="http://pixeljoint.com/files/icons/full/new_contest_entry.png">2</a>] [<a
href="http://pixeljoint.com/files/icons/full/galaxyparrot.gif">3</a>].</a>

<p>Objekt typu <strong>BitmapImage</strong> slouží k&nbsp;manipulaci
s&nbsp;dvoubarevnými rastrovými obrázky, u kterých je každý pixel reprezentován
pouze jedním bitem &ndash; může tedy reprezentovat výběr ze dvou hodnot.
Výhodou bitmap je jejich takřka absolutní přenositelnost mezi různými
platformami s&nbsp;grafickým uživatelským rozhraním, protože alespoň dvě barvy
dokáže zobrazit každé grafické zařízení (dívat se na jednobarevnou plochu je
trošku nudné :-). V&nbsp;pojetí knihovny Tkinter však mohou být bitmapy
komplikovanější, protože je podporována i transparentnost. Ta je řešena pomocí
<strong>dvojice</strong> bitmap, přičemž první bitmapa obsahuje vlastní obrázek
a druhá bitmapa bitovou masku, kterou se specifikuje, které pixely mají být
vykresleny a u kterých se má ponechat původní hodnota.</p>

<img src="https://i.iinfo.cz/images/33/tkinter7-1.png" class="image-302228" alt="&#160;" width="256" height="192" />
<p><i>Obrázek 1: <strong>BitmapImage</strong>, tj.&nbsp;dvoubarevný rastrový obrázek.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Rastrové obrázky typu <strong>PhotoImage</strong></h2>

<p>Objekt typu <strong>PhotoImage</strong> slouží k&nbsp;manipulaci
s&nbsp;vícebarevnými obrázky. Způsob zobrazení těchto objektů se může na
různých systémech lišit, zejména je nutné brát do úvahy barevnou hloubku
zobrazení (tj.&nbsp;počet bitů na jeden pixel); dnes již však prakticky každé
moderní zařízení podporuje zobrazení plnobarevných obrázků. Implicitně se
objekt typu <strong>PhotoImage</strong> vytváří při běhu aplikace tak, aby co
nejvíce odpovídal nastavení konkrétního systému, toto chování je však možné
změnit a například vždy pracovat s&nbsp;osmibitovou barevnou hloubkou (vhodné
pro obrázky s&nbsp;paletou). Mimo nastavování a čtení barev jednotlivých pixelů
je umožněno, aby se obrázek načetl či uložil do externího souboru.</p>

<img src="https://i.iinfo.cz/images/33/tkinter7-2.png" class="image-302229" alt="&#160;" width="96" height="96" />
<p><i>Obrázek 2: <strong>PhotoImage</strong>, tj.&nbsp;rastrový obrázek
s&nbsp;barvovou paletou nebo plnobarevný obrázek.</i></p>

<p>Spolu s&nbsp;knihovnou <i>Tkinter</i> jsou dodávány filtry pro práci
s&nbsp;formáty <strong>PPM</strong> (<i>Portable PixelMap</i>),
<strong>PGM</strong> (<i>Portable GrayMap</i>) a <strong>GIF</strong>
(<i>Graphics Interchange Format</i>). Pokud budete vyžadovat použití jiného
formátu (což asi budete, minimálně PNG a JPEG), lze pro načtení použít knihovnu
PIL neboli <a href="https://pypi.python.org/pypi/PIL">Python Imaging
Library</a> nebo ještě lépe <a
href="https://pypi.python.org/pypi/Pillow/4.2.1">Pillow</a>, což je fork dnes
již pravděpodobně nevyvíjeného PILu.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Bitmapy (<strong>BitmapImage</strong>) &ndash; dvoubarevné obrázky</h2>

<p>Bitmapu, tedy dvoubarevný obrázek, je možné vytvořit dvěma způsoby. Buď máme
přímo v&nbsp;programu data bitmapy:</p>

<pre>
bitmap = tkinter.BitmapImage(data=data_bitmapy)
</pre>

<p>Nebo máme k&nbsp;dispozici externí soubor s&nbsp;bitmapou:</p>

<pre>
bitmap = tkinter.BitmapImage(file="soubor_s_bitmapou.xbm")
</pre>

<p>Knihovna <i>Tkinter</i> akceptuje formát XBM neboli X-Window Bitmap
popř.&nbsp;pouze <a href="https://en.wikipedia.org/wiki/X_BitMap">X BitMap</a>.
Tento formát je vlastně tvořen formalizovaně zapsaným fragmentem céčkovského
kódu, který může být uložen v&nbsp;externím obrázku nebo přímo v&nbsp;řetězci
v&nbsp;programu:</p>

<pre>
#define test_width 336
#define test_height 240
static unsigned char test_bits[] = {
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
...
...
...
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
</pre>

<p>Bitmapa se vytvoří voláním:</p>

<p>V&nbsp;dalším demonstračním příkladu je načten a následně zobrazen externí
dvoubarevný obrázek uložený ve formátu XBM:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
bitmap_image = tkinter.BitmapImage(file="test.xbm")
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_image((200, 200), image=bitmap_image)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/557/tkinter6-12.png" class="image-301715" alt="&#160;" width="404" height="429" />
<p><i>Obrázek 3: Zobrazení bitmapy na canvasu.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Změna barvy popředí a pozadí u bitmap</h2>

<p>Bitmapy nejsou striktně černobílé, protože je u nich možné nastavit barvu
popředí a pozadí, jak je to patrné z&nbsp;následujícího úryvku kódu:</p>

<pre>
bitmap_image = tkinter.BitmapImage(file="test.xbm",
                                   background="black",
                                   foreground="yellow")
</pre>

<p>Opět se podívejme na zdrojový kód demonstračního příkladu, kde je tato
možnost použita:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
bitmap_image = tkinter.BitmapImage(file="test.xbm",
                                   background="black",
                                   foreground="yellow")
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_image((200, 200), image=bitmap_image)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/557/tkinter6-13.png" class="image-301716" alt="&#160;" width="404" height="429" />
<p><i>Obrázek 4: Bitmapa na canvasu se specifikovanou barvou popředí a
pozadí.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Pixmapy (<strong>PhotoImage</strong>) &ndash; vícebarevné obrázky</h2>

<p>Vytvoření objektu typu <strong>PhotoImage</strong>, tj.&nbsp;rastrového
obrázku s&nbsp;barvovou paletou popř.&nbsp;plnobarevného obrázku, je
snadné:</p>

<pre>
photo_image = tkinter.PhotoImage(file="demo.gif")
</pre>

<p>Podívejme se nyní na zdrojový kód příkladu, v&nbsp;němž se načte a zobrazí
několik ikon (uložených do souborů typu GIF), které jsme již využili minule při
tvorbě menu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
image_names = [
    "document-open",
    "document-save",
    "application-exit",
    "edit-undo",
    "edit-cut",
    "edit-copy",
    "edit-paste",
    "edit-delete",
    "edit-select-all"]
&nbsp;
root = tkinter.Tk()
&nbsp;
images = {}
for image_name in image_names:
    images[image_name] = tkinter.PhotoImage(file="icons/%s.gif" % image_name)
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_image((50, 50), image=images['document-open'])
canvas.create_image((150, 50), image=images['document-save'])
canvas.create_image((250, 50), image=images['application-exit'])
canvas.create_image((50, 150), image=images['edit-undo'])
canvas.create_image((150, 150), image=images['edit-cut'])
canvas.create_image((250, 150), image=images['edit-copy'])
canvas.create_image((50, 250), image=images['edit-paste'])
canvas.create_image((150, 250), image=images['edit-delete'])
canvas.create_image((250, 250), image=images['edit-select-all'])
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/557/tkinter6-14.png" class="image-301717" alt="&#160;" width="404" height="429" />
<p><i>Obrázek 5: Pixmapy (plnobarevné obrázky).</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Text na canvasu</h2>

<p>Na plátno lze samozřejmě vkládat i text. Pro tento účel se používá objekt
nazvaný, jak jinak než <strong>text</strong>. Způsob vytvoření tohoto objektu
je velmi jednoduchý:</p>

<pre>
canvas.create_text(x, y, další volby)
</pre>

<p>kde se pomocí hodnot <strong>[x, y]</strong> zadává souřadnice počátku textu
(resp.&nbsp;přesněji řečeno referenční bod). Mezi nejpoužívanější volby patří
<strong>text</strong> (vlastní řetězec, který má být zobrazen),
<strong>fill</strong> (barva textu), <strong>font</strong> (specifikace fontu)
a <strong>anchor</strong> (způsob umístění textu vůči vkládacímu bodu). Řetězec
i další parametry textu lze samozřejmě při běhu aplikace měnit, ale pro
uživatelem prováděnou editaci je mnohem výhodnější používat widget
<strong>text</strong>. Ukažme si tedy poněkud složitější příklad:</p>

<pre>
canvas.create_text(x, y,
                   text="Test",
                   fill="gray",
                   anchor="ne",
                   font="Helvetica 16")
</pre>

<p>Hodnotu <strong>anchor</strong> je možné zadat řetězcem nebo předdefinovanou
konstantou:</p>

<table>
<tr><th>Řetězec</th><th>Konstanta</th><th>Význam</th></tr>
<tr><td>"center"</td><td>tkinter.CENTER</td><td>uprostřed textu (horizontálně i vertikálně)</td></tr>
<tr><td>"n"</td><td>tkinter.N</td><td>horní okraj, horizontálně vycentrováno</td></tr>
<tr><td>"s"</td><td>tkinter.S</td><td>spodní okraj, horizontálně vycentrováno</td></tr>
<tr><td>"w""</td><td>tkinter.W</td><td>vertikálně vycentrováno, horizontálně na levém konci textu</td></tr>
<tr><td>"e"</td><td>tkinter.E</td><td>vertikálně vycentrováno, horizontálně na pravém konci textu</td></tr>
<tr><td>"nw"</td><td>tkinter.NW</td><td>horní okraj, horizontálně na levém konci textu</td></tr>
<tr><td>"sw"</td><td>tkinter.SW</td><td>spodní okraj, horizontálně na levém konci textu</td></tr>
<tr><td>"ne"</td><td>tkinter.NE</td><td>horní okraj, horizontálně na pravém konci textu</td></tr>
<tr><td>"se"</td><td>tkinter.SE</td><td>spodní okraj, horizontálně na pravém konci textu</td></tr>
</table>

<p>V&nbsp;dalším demonstračním příkladu je ukázáno, jakým způsobem se používá
volba <strong>anchor</strong> pro specifikaci referenčního bodu textu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
def draw_text(canvas, x, y, anchor):
    canvas.create_text(x, y, text="Test", fill="gray", anchor=anchor,
                       font="Helvetica 16")
    canvas.create_line(x-5, y, x+5, y, fill="red")
    canvas.create_line(x, y-5, x, y+5, fill="red")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
draw_text(canvas, 50, 50, "ne")
draw_text(canvas, 150, 50, "n")
draw_text(canvas, 250, 50, "nw")
&nbsp;
draw_text(canvas, 50, 150, "e")
draw_text(canvas, 150, 150, "center")
draw_text(canvas, 250, 150, "w")
&nbsp;
draw_text(canvas, 50, 250, "se")
draw_text(canvas, 150, 250, "s")
draw_text(canvas, 250, 250, "sw")
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/557/tkinter6-15.png" class="image-301718" alt="&#160;" width="404" height="429" />
<p><i>Obrázek 6: Texty s&nbsp;různě nastavenými kotvicími body.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vertikální výpis textu na canvas</h2>

<p>V&nbsp;dalším demonstračním příkladu je ukázán trik pro tvorbu vertikálního
textu (což je něco jiného než pouhá rotace, která je ovšem taktéž podporována).
Text totiž může obsahovat konce řádků, které jsou správně interpretovány. Pokud
tedy vložíme znak pro konec řádku za každé písmeno, získáme vertikální
text:</p>

<pre>
canvas.create_text(x, y,
                   <strong>text="\n".join("Test")</strong>,
                   fill="gray",
                   anchor=anchor,
                   font="Helvetica 12")
</pre>

<p>Úplný zdrojový kód takto upraveného demonstračního příkladu vypadá
následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
def draw_text(canvas, x, y, anchor):
    canvas.create_text(x, y, text="\n".join("Test"),
                       fill="gray", anchor=anchor, font="Helvetica 12")
    canvas.create_line(x-5, y, x+5, y, fill="red")
    canvas.create_line(x, y-5, x, y+5, fill="red")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
draw_text(canvas, 50, 50, "ne")
draw_text(canvas, 150, 50, "n")
draw_text(canvas, 250, 50, "nw")
&nbsp;
draw_text(canvas, 50, 200, "e")
draw_text(canvas, 150, 200, "center")
draw_text(canvas, 250, 200, "w")
&nbsp;
draw_text(canvas, 50, 350, "se")
draw_text(canvas, 150, 350, "s")
draw_text(canvas, 250, 350, "sw")
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/633/tkinter6b-1.png" class="image-301719" alt="&#160;" width="404" height="429" />
<p><i>Obrázek 7: Vertikální texty s&nbsp;různě nastavenými kotvicími body.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Rotace textu</h2>

<p>Text může být na kreslicí plochu vložen pod různým úhlem, přičemž rotace se
specifikuje nepovinným (pojmenovaným) parametrem <strong>angle</strong>. Rotace
textu je zadána ve stupních, nikoli tedy v&nbsp;radiánech, jak je tomu
v&nbsp;jiných knihovnách (například i standardní funkce <a
href="https://www.tutorialspoint.com/python/number_sin.htm">sin</a> akceptuje
úhel zadaný v&nbsp;radiánech):</p>

<pre>
canvas.create_text(x, y,
                   text="Test test test",
                   fill="gray",
                   anchor=anchor,
                   font="Helvetica 12",
                   <strong>angle=30</strong>)
</pre>

<p>Podívejme se nyní na příklad, v&nbsp;němž je text vykreslen pod úhly, které
jsou celočíselnými násobky 30&deg;:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
def draw_text(canvas, x, y, angle):
    canvas.create_text(x, y, text="Test", fill="gray", anchor="center",
                       font="Helvetica 16", angle=angle)
    canvas.create_line(x-5, y, x+5, y, fill="red")
    canvas.create_line(x, y-5, x, y+5, fill="red")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
draw_text(canvas, 50, 50, 0)
draw_text(canvas, 150, 50, 30)
draw_text(canvas, 250, 50, 60)
draw_text(canvas, 350, 50, 90)
&nbsp;
draw_text(canvas, 50, 150, 120)
draw_text(canvas, 150, 150, 150)
draw_text(canvas, 250, 150, 180)
draw_text(canvas, 350, 150, 210)
&nbsp;
draw_text(canvas, 50, 250, 240)
draw_text(canvas, 150, 250, 270)
draw_text(canvas, 250, 250, 300)
draw_text(canvas, 350, 250, 330)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/33/tkinter7-3.png" class="image-302230" alt="&#160;" width="404" height="429" />
<p><i>Obrázek 8: Text, který je otočen o 0&deg;, 30&deg;, 60&deg; atd.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Maximální šířka textu</h2>

<p>V&nbsp;některých případech může být nutné omezit maximální šířku textu. To
zajistí nepovinný parametr <strong>width</strong>. V&nbsp;případě, že je text
širší než uvedená hodnota, bude zalomen, a to samozřejmě v&nbsp;místě mezi
jednotlivými znaky (nikoli v&nbsp;půlce písmen atd.):</p>

<pre>
canvas.create_text(x, y,
                   text="Příliš dlouhý text",
                   fill="gray",
                   anchor="center",
                   font="Helvetica 16",
                   <strong>width=50</strong>)
</pre>

<p>Poznámka: v&nbsp;případě, že preferujete zalomení na koncích slov (což je
většinou logický požadavek), může být výhodnější použít widget
<strong>Text</strong>, který je popsán ve druhé části dnešního článku.</p>

<p>Podívejme se nyní na příklad, v&nbsp;němž je šířka textu omezena, a to i ve
chvíli, kdy je text vykreslen pod jiným úhlem:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
def draw_text(canvas, x, y, angle):
    canvas.create_text(x, y, text="*Python*", fill="gray", anchor="center",
                       font="Helvetica 16", angle=angle, width=50)
    canvas.create_line(x-5, y, x+5, y, fill="red")
    canvas.create_line(x, y-5, x, y+5, fill="red")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
draw_text(canvas, 50, 50, 0)
draw_text(canvas, 150, 50, 30)
draw_text(canvas, 250, 50, 60)
draw_text(canvas, 350, 50, 90)
&nbsp;
draw_text(canvas, 50, 150, 120)
draw_text(canvas, 150, 150, 150)
draw_text(canvas, 250, 150, 180)
draw_text(canvas, 350, 150, 210)
&nbsp;
draw_text(canvas, 50, 250, 240)
draw_text(canvas, 150, 250, 270)
draw_text(canvas, 250, 250, 300)
draw_text(canvas, 350, 250, 330)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/33/tkinter7-4.png" class="image-302231" alt="&#160;" width="404" height="429" />
<p><i>Obrázek 9: Text, který je otočen o 0&deg;, 30&deg;, 60&deg; atd. a
současně je omezena jeho šířka na 50 pixelů. Povšimněte si, že šířka je vždy
chápána ve směru rotace textu a nikoli ve směru horizontální osy.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Widget <strong>Text</strong></h2>

<p>Widget nazvaný <strong>Text</strong> patří vedle již výše popsaného widgetu
<strong>canvas</strong> k&nbsp;prakticky nejsložitějším objektům, se kterými je
možné v&nbsp;knihovně <i>Tkinter</i> pracovat. Ve své nejjednodušší podobě
slouží tento widget k&nbsp;zobrazení víceřádkového textu. To však není zdaleka
vše. Text je totiž možné sdružovat do bloků a každému bloku nastavit nějaké
atributy, typicky font, velikost textu, barvu textu, styl znaků (tučně,
kurzíva, podtrženě atd.). Kromě toho se každý blok může chovat jako
hypertextový odkaz.</p>

<p>V&nbsp;tomto ohledu se tedy widget <strong>text</strong> chová podobně jako
například komponenta <strong>Rich Edit Control</strong> z&nbsp;Windows API,
resp.&nbsp;z&nbsp;rozšiřující knihovny RICHED32.DLL (textový editor
<strong>WordPad</strong> není nic jiného, než zabalení této komponenty do GUI).
Widget <strong>Text</strong> však při správné konfiguraci dokáže i další věci
&ndash; do oblasti s&nbsp;textem je možné vkládat další widgety, zejména
tlačítka a obrázky (bitmapy i pixmapy), používat hypertextové odkazy apod.
Podobný widget byl součástí prohlížeče/editoru <a
href="https://www.w3.org/Amaya/">Amaya</a>. Na druhou stranu například
komponenta <a href="http://www.scintilla.org/">Scintilla</a> sice má některé
podobné vlastnosti jako widget <strong>Text</strong>, ale není zde podporována
změna stylů ani použití obrázků.</p>

<p>Není divu, že na bázi <strong>Tcl/Tk</strong> (Tkinter volá funkce Tk)
vznikl webový prohlížeč, prohlížeč manuálových stránek a další někdy více a
někdy méně užitečné aplikace. Velkou část funkcionality přitom zajistil právě
widget <strong>Text</strong>, na který byly navěšeny procedury zpracovávající
jednotlivé události, například kliknutí na některý obrázek atd.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Příklad použití widgetu <strong>Text</strong></h2>

<p>V&nbsp;dalším demonstračním příkladu se widget Text (pojmenovaný pro
jednoduchost <strong>text</strong>) nachází jako jedna ze dvou komponent
v&nbsp;okně aplikace (druhou komponentou je tlačítko pro zavření aplikace). Do
widgetu Text je s&nbsp;využitím metody <strong>insert</strong> vložen řetězec.
Povšimněte si, že v&nbsp;řetězci je možné používat řídicí znak &bdquo;\n&ldquo;
pro ukončení řádku. Zdrojový kód prvního demonstračního příkladu vypadá
následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
text = tkinter.Text(root)
&nbsp;
text.insert(tkinter.END, "Test widgetu\n'text'")
&nbsp;
button = tkinter.Button(root, text="Close window", command=exit)
&nbsp;
text.pack()
button.pack()
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/33/tkinter7-5.png" class="image-302232" alt="&#160;" width="568" height="423" />
<p><i>Obrázek 10: Widget <strong>Text</strong>, do kterého byl nakopírován
jeden odstavec z&nbsp;dnešního článku.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Nastavení stylů widgetu <strong>Text</strong></h2>

<p>U widgetu <strong>Text</strong> je možné nastavit prakticky všechny základní
vlastnosti (snad kromě specifikace horizontálního prokládání), zejména pak:</p>

<table>
<tr><th>Vlastnost</th><th>Význam</th></tr>
<tr><td>width</td><td>šířka widgetu zadaná v&nbsp;počtu znaků (což není u proporcionálního fontu přesné)</td></tr>
<tr><td>height</td><td>výška widgetu zadaná v&nbsp;počtu řádků (záleží tedy na velikosti fontu)</td></tr>
<tr><td>font</td><td>použitý font specifikovaný většinou jménem a velikostí (v&nbsp;bodech)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>foreground</td><td>barva vlastního textu</td></tr>
<tr><td>background</td><td>barva pozadí widgetu</td></tr>
<tr><td>selectforeground</td><td>barva pozadí výběru (bloku)</td></tr>
<tr><td>selectbackground</td><td>barva pozadí výběru (bloku)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>insertwidth</td><td>šířka kurzoru (caretu)</td></tr>
<tr><td>insertbackground</td><td>barva kurzoru</td></tr>
<tr><td>insertborderwidth</td><td>šířka okraje kurzoru (nefunguje dobře ve chvíli, kdy systém emuluje kurzor s&nbsp;reliéfem)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>wrap</td><td>povolení (<strong>True</strong>) či zákaz (<strong>False</strong>) zalamování delších textových řádků</td></tr>
</table>

<p>Podívejme se nyní na příklad, v&nbsp;němž jsou výše popsané vlastnosti
použity pro vytvoření primitivního textového editoru:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
text = tkinter.Text(root,
                    font="Helvetica 20",
                    foreground="#0000c0",
                    background="#c0ffc0",
                    selectforeground="white",
                    selectbackground="red",
                    insertwidth=4,
                    insertbackground="red",
                    insertborderwidth=1,
                    wrap=tkinter.WORD,
                    width=40, height=16)
&nbsp;
text.insert(tkinter.END, "Test widgetu\n'text'")
&nbsp;
button = tkinter.Button(root, text="Close window", command=exit)
&nbsp;
text.pack()
button.pack()
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/33/tkinter7-6.png" class="image-302233" alt="&#160;" width="608" height="606" />
<p><i>Obrázek 11: Widget <strong>Text</strong> s&nbsp;upraveným stylem, do
kterého byl nakopírován jeden odstavec z&nbsp;dnešního článku.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Použití tagů ve widgetu <strong>Text</strong> pro selektivní nastavení stylu vybraného textu</h2>

<p>Pokud potřebujeme u textových řetězců vkládaných do widgetu
<strong>Text</strong> měnit jejich vlastnosti, například barvu či typ a
velikost písma, můžeme použít <i>tagy</i>, s&nbsp;nimiž jsme se již setkali u
canvasu. Pomocí tagů se, zjednodušeně řečeno, pojmenuje určitá vlastnost nebo
skupina vlastností a při vkládání řetězců do widgetu <strong>Text</strong>
pomocí metody <strong>insert</strong> se tyto vlastnosti řetězcům přiřadí.
Velká výhoda tagů spočívá v&nbsp;tom, že jim přidružené vlastnosti je možné za
běhu aplikace měnit, přičemž se změny ihned projeví na vizuálním vzhledu textu.
Ukažme si další příklad, v&nbsp;němž se pomocí tagů vypíše několik řádků textu,
každý řádek je přitom vykreslen jinou barvou (při vytváření tagů se do metody
<strong>tag_configure</strong> vkládá název tagu, nenechte se tedy zmást
zdánlivě dvojím zápisem barvy):</p>

<pre>
text.tag_configure("red", foreground="red")
&nbsp;
text.insert(tkinter.END, "Red\n", "red")
</pre>

<p>V&nbsp;příkladu si také všimněte, že se celému widgetu text pomocí parametru
<strong>background</strong> přiřadila černá barva pozadí, aby bylo barevné
písmo na obrazovce lépe čitelné:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
text = tkinter.Text(root,
                    font="Helvetica 20",
                    wrap=tkinter.WORD,
                    background="#202020",
                    width=40, height=16)
&nbsp;
text.tag_configure("red", foreground="red")
text.tag_configure("green", foreground="green")
text.tag_configure("blue", foreground="blue")
text.tag_configure("magenta", foreground="magenta")
text.tag_configure("cyan", foreground="cyan")
text.tag_configure("yellow", foreground="yellow")
text.tag_configure("brown", foreground="brown")
text.tag_configure("pink", foreground="pink")
text.tag_configure("white", foreground="white")
&nbsp;
# práce s widgetem
text.insert(tkinter.END, "Red\n", "red")
text.insert(tkinter.END, "Magenta\n", "magenta")
text.insert(tkinter.END, "Blue\n", "blue")
text.insert(tkinter.END, "Cyan\n", "cyan")
text.insert(tkinter.END, "Green\n", "green")
text.insert(tkinter.END, "Yellow\n", "yellow")
text.insert(tkinter.END, "Brown\n", "brown")
text.insert(tkinter.END, "Pink\n", "pink")
text.insert(tkinter.END, "White\n", "white")
&nbsp;
button = tkinter.Button(root, text="Close window", command=exit)
&nbsp;
text.pack()
button.pack()
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/33/tkinter7-7.png" class="image-302234" alt="&#160;" width="608" height="606" />
<p><i>Obrázek 12: Použití tagů pro změnu barvy vybrané části textu.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Složitější příklady se styly textu</h2>

<p>Widget <strong>Text</strong> umožňuje provádění i mnohých dalších zajímavých
a užitečných operací, například:</p>

<ol>
<li>Vkládání obrázků typu <strong>BitmapImage</strong> a <strong>PhotoImage</strong></li>
<li>Specifikace zarovnání textu, selektivně pro vybrané řádky</li>
<li>Specifikace tabelačních zarážek</li>
<li>Zvýraznění okraje okolo textu s&nbsp;výběrem stylu okraje</li>
<li>Tvorbu horních a dolních indexů pomocí vlastnosti <strong>offset</strong></li>
<li>Vkládání hyperlinků</li>
<li>Vložení libovolného dalšího widgetu, například tlačítka</li>
</ol>

<p>Tyto vlastnosti si podrobněji popíšeme příště.</p>

<img src="https://i.iinfo.cz/images/33/tkinter7-8.png" class="image-302235" alt="&#160;" width="608" height="606" />
<p><i>Obrázek 13: Text s&nbsp;různými styly i s&nbsp;vloženou bitmapou.</i></p>

<img src="https://i.iinfo.cz/images/33/tkinter7-9.png" class="image-302236" alt="&#160;" width="608" height="606" />
<p><i>Obrázek 14: Text s&nbsp;různými styly i s&nbsp;vloženou bitmapou i
barevným obrázkem. Povšimněte si, že obrázek může být umístěn na stejném řádku
s&nbsp;textem.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů naleznete pod
následujícími odkazy:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>78_bitmap_image</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/78_bitmap_image">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/78_bitmap_image</a></td></tr>
<tr><td>79_bitmap_image_setcolor.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/79_bitmap_image_setcolor.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/79_bitmap_image_setcolor.py</a></td></tr>
<tr><td>80_photo_image.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/80_photo_image.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/80_photo_image.py</a></td></tr>
<tr><td>81_text.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/81_text.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/81_text.py</a></td></tr>
<tr><td>82_vertical_text.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/82_vertical_text.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/82_vertical_text.py</a></td></tr>
<tr><td>83_rotated_text.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/83_rotated_text.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/83_rotated_text.py</a></td></tr>
<tr><td>84_rotated_text_with_width.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/84_rotated_text_with_width.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/84_rotated_text_with_width.py</a></td></tr>
<tr><td>85_text_widget.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/85_text_widget.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/85_text_widget.py</a></td></tr>
<tr><td>86_text_widget_styles.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/86_text_widget_styles.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/86_text_widget_styles.py</a></td></tr>
<tr><td>87_text_tags.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/87_text_tags.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/87_text_tags.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>test.xbm</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/test.xbm">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/test.xbm</a></td></tr>
</table>

<p>Poznámka: poslední soubor <strong>test.xbm</strong> je bitmapou použitou
v&nbsp;některých demonstračních příkladech. Tato bitmapa musí být umístěna ve
stejném adresáři, jako všechny příklady.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

