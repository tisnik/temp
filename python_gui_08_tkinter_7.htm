<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Grafické uživatelské rozhraní v Pythonu: kouzla s kreslicí plochou (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Grafické uživatelské rozhraní v Pythonu: kouzla s kreslicí plochou (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Grafické uživatelské rozhraní v&nbsp;Pythonu: kouzla s&nbsp;kreslicí plochou (dokončení)</a></p>
<p><a href="#k02">*** 2. Práce s&nbsp;rastrovými obrázky na canvasu</a></p>
<p><a href="#k03">*** 3. Bitmapy (<strong>BitmapImage</strong>) &ndash; dvoubarevné obrázky</a></p>
<p><a href="#k04">*** 4. Změna barvy popředí a pozadí u bitmap</a></p>
<p><a href="#k05">*** 5. Pixmapy (<strong>PhotoImage</strong>) &ndash; vícebarevné obrázky</a></p>
<p><a href="#k06">*** 6. Text na canvasu</a></p>
<p><a href="#k07">*** 7. Vertikální výpis textu na canvas</a></p>
<p><a href="#k08">*** 8. Rotace textu a další vlastnosti, které je možné u textů na canvasu použít</a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k16">*** 16. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Grafické uživatelské rozhraní v&nbsp;Pythonu: kouzla s&nbsp;kreslicí plochou (dokončení)</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Práce s&nbsp;rastrovými obrázky na canvasu</h2>

<p>Objekty typu <strong>image</strong> slouží k&nbsp;vytváření a manipulaci
s&nbsp;rastrovými obrázky a to jak bitmapami (v&nbsp;kontextu knihovny Tkinter
jednobarevnými obrázky), tak i takzvanými pixmapami (obecně vícebarevnými
obrázky, ať již s barvovou paletou či bez palety).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Bitmapy (<strong>BitmapImage</strong>) &ndash; dvoubarevné obrázky</h2>

<p>Objekt typu <strong>BitmapImage</strong> slouží k&nbsp;manipulaci
s&nbsp;dvoubarevnými rastrovými obrázky, u kterých je každý pixel reprezentován
pouze jedním bitem &ndash; může tedy reprezentovat výběr ze dvou hodnot.
Výhodou bitmap je jejich takřka absolutní přenositelnost mezi různými
platformami s&nbsp;grafickým uživatelským rozhraním, protože alespoň dvě barvy
dokáže zobrazit každé grafické zařízení (dívat se na jednobarevnou plochu je
trošku nudné :-). V&nbsp;pojetí knihovny Tkinter však mohou být bitmapy
komplikovanější, protože je podporována i transparentnost. Ta je řešena pomocí
<strong>dvojice</strong> bitmap, přičemž první bitmapa obsahuje vlastní obrázek
a druhá bitmapa bitovou masku, kterou se specifikuje, které pixely mají být
vykresleny a u kterých se má ponechat původní hodnota.</p>

<pre>
bitmap = tkinter.BitmapImage(data=data_bitmapy)
</pre>

<p>nebo voláním:</p>

<pre>
bitmap = tkinter.BitmapImage(file="soubor_s_bitmapou.xbm")
</pre>

<p>Knihovna <i>Tkinter</i> akceptuje formát XBM neboli X-Window Bitmap
popř.&nbsp;pouze <a href="https://en.wikipedia.org/wiki/X_BitMap">X BitMap</a>.
Tento formát je vlastně tvořen formalizovaně zapsaným fragmentem céčkovského
kódu, který může být uložen v&nbsp;externím obrázku nebo přímo v&nbsp;řetězci
v&nbsp;programu:</p>

<pre>
#define test_width 336
#define test_height 240
static unsigned char test_bits[] = {
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
...
...
...
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
</pre>

<p>Bitmapa se vytvoří voláním:</p>

<p>V&nbsp;dalším demonstračním příkladu je načten a následně zobrazen externí
dvoubarevný obrázek uložený ve formátu XBM:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
bitmap_image = tkinter.BitmapImage(file="test.xbm")
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_image((200, 200), image=bitmap_image)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/557/tkinter6-12.png" class="image-301715" alt="&#160;" width="404" height="429" />
<p><i>Obrázek 1: Zobrazení bitmapy na canvasu.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Změna barvy popředí a pozadí u bitmap</h2>

<p>Bitmapy nejsou striktně černobílé, protože je u nich možné nastavit barvu
popředí a pozadí, jak je to patrné z&nbsp;následujícího úryvku kódu:</p>

<pre>
bitmap_image = tkinter.BitmapImage(file="test.xbm",
                                   background="black",
                                   foreground="yellow")
</pre>

<p>Opět se podívejme na zdrojový kód demonstračního příkladu, kde je tato
možnost použita:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
bitmap_image = tkinter.BitmapImage(file="test.xbm",
                                   background="black",
                                   foreground="yellow")
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_image((200, 200), image=bitmap_image)
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/557/tkinter6-13.png" class="image-301716" alt="&#160;" width="404" height="429" />
<p><i>Obrázek 2: Bitmapa se specifikovanou barvou popředí a pozadí.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Pixmapy (<strong>PhotoImage</strong>) &ndash; vícebarevné obrázky</h2>

<p>Objekt typu <strong>PhotoImage</strong> slouží k&nbsp;manipulaci
s&nbsp;vícebarevnými obrázky. Způsob zobrazení těchto objektů se může na
různých systémech lišit, zejména je nutné brát do úvahy barevnou hloubku
zobrazení (tj.&nbsp;počet bitů na jeden pixel); dnes již však prakticky každé
moderní zařízení podporuje zobrazení plnobarevných obrázků. Implicitně se
objekt typu <strong>PhotoImage</strong> vytváří při běhu aplikace tak, aby co
nejvíce odpovídal nastavení konkrétního systému, toto chování je však možné
změnit a například vždy pracovat s&nbsp;osmibitovou barevnou hloubkou (vhodné
pro obrázky s&nbsp;paletou). Mimo nastavování a čtení barev jednotlivých pixelů
je umožněno, aby se obrázek načetl či uložil do externího souboru.</p>

<p>Spolu s&nbsp;knihovnou <i>Tkinter</i> jsou dodávány filtry pro práci
s&nbsp;formáty <strong>PPM</strong> (<i>Portable PixelMap</i>),
<strong>PGM</strong> (<i>Portable GrayMap</i>) a <strong>GIF</strong>
(<i>Graphics Interchange Format</i>). Pokud budete vyžadovat použití jiného
formátu (což asi budete, minimálně PNG a JPEG), lze pro načtení použít knihovnu
PIL neboli <a href="https://pypi.python.org/pypi/PIL">Python Imaging
Library</a> nebo ještě lépe <a
href="https://pypi.python.org/pypi/Pillow/4.2.1">Pillow</a>, což je fork dnes
již pravděpodobně nevyvíjeného PILu.</p>

<p>Vytvoření objektu typu <strong>PhotoImage</strong> je snadné:</p>

<pre>
photo_image = tkinter.PhotoImage(file="demo.gif")
</pre>

<p>Podívejme se nyní na zdrojový kód příkladu, v&nbsp;němž se načte a zobrazí
několik ikon (uložených do souborů typu GIF), které jsme již využili minule při
tvorbě menu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
image_names = [
    "document-open",
    "document-save",
    "application-exit",
    "edit-undo",
    "edit-cut",
    "edit-copy",
    "edit-paste",
    "edit-delete",
    "edit-select-all"]
&nbsp;
root = tkinter.Tk()
&nbsp;
images = {}
for image_name in image_names:
    images[image_name] = tkinter.PhotoImage(file="icons/%s.gif" % image_name)
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
canvas.create_image((50, 50), image=images['document-open'])
canvas.create_image((150, 50), image=images['document-save'])
canvas.create_image((250, 50), image=images['application-exit'])
canvas.create_image((50, 150), image=images['edit-undo'])
canvas.create_image((150, 150), image=images['edit-cut'])
canvas.create_image((250, 150), image=images['edit-copy'])
canvas.create_image((50, 250), image=images['edit-paste'])
canvas.create_image((150, 250), image=images['edit-delete'])
canvas.create_image((250, 250), image=images['edit-select-all'])
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/557/tkinter6-14.png" class="image-301717" alt="&#160;" width="404" height="429" />
<p><i>Obrázek 4: Pixmapy (plnobarevné obrázky).</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Text na canvasu</h2>

<p>Na plátno lze samozřejmě vkládat i text. Pro tento účel se používá objekt
nazvaný, jak jinak než <strong>text</strong>. Způsob vytvoření tohoto objektu
je velmi jednoduchý:</p>

<pre>
canvas.create_text(x, y, další volby)
</pre>

<p>kde se pomocí hodnot <strong>[x, y]</strong> zadává souřadnice počátku textu
(resp.&nbsp;přesněji řečeno referenční bod). Mezi nejpoužívanější volby patří
<strong>text</strong> (vlastní řetězec, který má být zobrazen),
<strong>fill</strong> (barva textu), <strong>font</strong> (specifikace fontu)
a <strong>anchor</strong> (způsob umístění textu vůči vkládacímu bodu). Řetězec
i další parametry textu lze samozřejmě při běhu aplikace měnit, ale pro
uživatelem prováděnou editaci je mnohem výhodnější používat widget
<strong>text</strong>. Ukažme si tedy poněkud složitější příklad:</p>

<pre>
canvas.create_text(x, y,
                   text="Test",
                   fill="gray",
                   anchor="ne",
                   font="Helvetica 16")
</pre>

<p>Hodnotu <strong>anchor</strong> je možné zadat řetězcem nebo předdefinovanou
konstantou:</p>

<table>
<tr><th>Řetězec</th><th>Konstanta</th><th>Význam</th></tr>
<tr><td>"center"</td><td>tkinter.CENTER</td><td>uprostřed textu (horizontálně i vertikálně)</td></tr>
<tr><td>"n"</td><td>tkinter.N</td><td>horní okraj, horizontálně vycentrováno</td></tr>
<tr><td>"s"</td><td>tkinter.S</td><td>spodní okraj, horizontálně vycentrováno</td></tr>
<tr><td>"w""</td><td>tkinter.W</td><td>vertikálně vycentrováno, horizontálně na levém konci textu</td></tr>
<tr><td>"e"</td><td>tkinter.E</td><td>vertikálně vycentrováno, horizontálně na pravém konci textu</td></tr>
<tr><td>"nw"</td><td>tkinter.NW</td><td>horní okraj, horizontálně na levém konci textu</td></tr>
<tr><td>"sw"</td><td>tkinter.SW</td><td>spodní okraj, horizontálně na levém konci textu</td></tr>
<tr><td>"ne"</td><td>tkinter.NE</td><td>horní okraj, horizontálně na pravém konci textu</td></tr>
<tr><td>"se"</td><td>tkinter.SE</td><td>spodní okraj, horizontálně na pravém konci textu</td></tr>
</table>

<p>V&nbsp;dalším demonstračním příkladu je ukázáno, jakým způsobem se používá
volba <strong>anchor</strong> pro specifikaci referenčního bodu textu:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
def draw_text(canvas, x, y, anchor):
    canvas.create_text(x, y, text="Test", fill="gray", anchor=anchor,
                       font="Helvetica 16")
    canvas.create_line(x-5, y, x+5, y, fill="red")
    canvas.create_line(x, y-5, x, y+5, fill="red")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
draw_text(canvas, 50, 50, "ne")
draw_text(canvas, 150, 50, "n")
draw_text(canvas, 250, 50, "nw")
&nbsp;
draw_text(canvas, 50, 150, "e")
draw_text(canvas, 150, 150, "center")
draw_text(canvas, 250, 150, "w")
&nbsp;
draw_text(canvas, 50, 250, "se")
draw_text(canvas, 150, 250, "s")
draw_text(canvas, 250, 250, "sw")
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/557/tkinter6-15.png" class="image-301718" alt="&#160;" width="404" height="429" />
<p><i>Obrázek 5: Texty s&nbsp;různě nastavenými kotvicími body.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Vertikální výpis textu na canvas</h2>

<p>V&nbsp;dalším demonstračním příkladu je ukázán trik pro tvorbu vertikálního
textu (což je něco jiného než pouhá rotace, která je ovšem taktéž podporována).
Text totiž může obsahovat konce řádků, které jsou správně interpretovány. Pokud
tedy vložíme znak pro konec řádku za každé písmeno, získáme vertikální
text::</p>

<pre>
canvas.create_text(x, y,
                   <strong>text="\n".join("Test")</strong>,
                   fill="gray",
                   anchor=anchor,
                   font="Helvetica 12")
</pre>

<p>Úplný zdrojový kód takto upraveného demonstračního příkladu vypadá
následovně:</p>

<pre>
#!/usr/bin/env python
&nbsp;
import tkinter
from tkinter import ttk
import sys
&nbsp;
&nbsp;
WIDTH = 400
HEIGHT = 400
GRID_SIZE = 100
&nbsp;
&nbsp;
def exit():
    sys.exit(0)
&nbsp;
&nbsp;
def basic_canvas(root, width, height, grid_size):
    canvas = tkinter.Canvas(root, width=width, height=height,
                            background='#ccffcc')
    canvas.pack()
&nbsp;
    draw_grid(canvas, width, height, grid_size)
    return canvas
&nbsp;
&nbsp;
def draw_grid(canvas, width, height, grid_size):
    for x in range(0, width, grid_size):
        canvas.create_line(x, 0, x, height, dash=7, fill="gray")
    for y in range(0, height, grid_size):
        canvas.create_line(0, y, width, y, dash=7, fill="gray")
&nbsp;
&nbsp;
def draw_text(canvas, x, y, anchor):
    canvas.create_text(x, y, text="\n".join("Test"),
                       fill="gray", anchor=anchor, font="Helvetica 12")
    canvas.create_line(x-5, y, x+5, y, fill="red")
    canvas.create_line(x, y-5, x, y+5, fill="red")
&nbsp;
&nbsp;
root = tkinter.Tk()
&nbsp;
canvas = basic_canvas(root, WIDTH, HEIGHT, GRID_SIZE)
&nbsp;
draw_text(canvas, 50, 50, "ne")
draw_text(canvas, 150, 50, "n")
draw_text(canvas, 250, 50, "nw")
&nbsp;
draw_text(canvas, 50, 200, "e")
draw_text(canvas, 150, 200, "center")
draw_text(canvas, 250, 200, "w")
&nbsp;
draw_text(canvas, 50, 350, "se")
draw_text(canvas, 150, 350, "s")
draw_text(canvas, 250, 350, "sw")
&nbsp;
root.mainloop()
</pre>

<img src="https://i.iinfo.cz/images/633/tkinter6b-1.png" class="image-301719" alt="&#160;" width="404" height="429" />
<p><i>Obrázek 6: Vertikální texty s&nbsp;různě nastavenými kotvicími body.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Rotace textu a další vlastnosti, které je možné u textů na canvasu použít</h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů naleznete pod
následujícími odkazy:</p>

<table>
<tr><th>Příklad</th><th>Odkaz</th></tr>
<tr><td>78_bitmap_image</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/78_bitmap_image">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/78_bitmap_image</a></td></tr>
<tr><td>79_bitmap_image_setcolor.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/79_bitmap_image_setcolor.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/79_bitmap_image_setcolor.py</a></td></tr>
<tr><td>80_photo_image.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/80_photo_image.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/80_photo_image.py</a></td></tr>
<tr><td>81_text.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/81_text.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/81_text.py</a></td></tr>
<tr><td>82_vertical_text.py</td><td><a href="https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/82_vertical_text.py">https://github.com/tisnik/presentations/blob/master/Python_GUI/Tkinter/82_vertical_text.py</a></td></tr>
</table>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na Internetu</h2>

<ol>

<li>Hra Breakout napísaná v Tkinteri<br />
<a href="https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/">https://www.root.cz/clanky/hra-breakout-napisana-v-tkinteri/</a>
</li>

<li>Hra Snake naprogramovaná v Pythone s pomocou Tkinter<br />
<a href="https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/">https://www.root.cz/clanky/hra-snake-naprogramovana-v-pythone-s-pomocou-tkinter/</a>
</li>

<li>The Tkinter Canvas Widget<br />
<a href="http://effbot.org/tkinterbook/canvas.htm">http://effbot.org/tkinterbook/canvas.htm</a>
</li>

<li>Ovládací prvek (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29">https://cs.wikipedia.org/wiki/Ovl%C3%A1dac%C3%AD_prvek_%28po%C4%8D%C3%ADta%C4%8D%29</a>
</li>

<li>Rezervovaná klíčová slova v&nbsp;Pythonu<br />
<a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>
</li>

<li>TkDocs: Styles and Themes<br />
<a href="http://www.tkdocs.com/tutorial/styles.html">http://www.tkdocs.com/tutorial/styles.html</a>
</li>

<li>Drawing in Tkinter<br />
<a href="http://zetcode.com/gui/tkinter/drawing/">http://zetcode.com/gui/tkinter/drawing/</a>
</li>

<li>Changing ttk widget text color (StackOverflow)<br />
<a href="https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color">https://stackoverflow.com/questions/16240477/changing-ttk-widget-text-color</a>
</li>

<li>The Hitchhiker's Guide to Pyhton: GUI Applications<br />
<a href="http://docs.python-guide.org/en/latest/scenarios/gui/">http://docs.python-guide.org/en/latest/scenarios/gui/</a>
</li>

<li>7 Top Python GUI Frameworks for 2017<br />
<a href="http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/">http://insights.dice.com/2014/11/26/5-top-python-guis-for-2015/</a>
</li>

<li>GUI Programming in Python<br />
<a href="https://wiki.python.org/moin/GuiProgramming">https://wiki.python.org/moin/GuiProgramming</a>
</li>

<li>Cameron Laird's personal notes on Python GUIs<br />
<a href="http://phaseit.net/claird/comp.lang.python/python_GUI.html">http://phaseit.net/claird/comp.lang.python/python_GUI.html</a>
</li>

<li>Python GUI development<br />
<a href="http://pythoncentral.io/introduction-python-gui-development/">http://pythoncentral.io/introduction-python-gui-development/</a>
</li>

<li>Graphic User Interface FAQ<br />
<a href="https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq">https://docs.python.org/2/faq/gui.html#graphic-user-interface-faq</a>
</li>

<li>TkInter<br />
<a href="https://wiki.python.org/moin/TkInter">https://wiki.python.org/moin/TkInter</a>
</li>

<li>Tkinter 8.5 reference: a GUI for Python<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html</a>
</li>

<li>TkInter (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Tkinter">https://en.wikipedia.org/wiki/Tkinter</a>
</li>

<li>appJar<br />
<a href="http://appjar.info/">http://appjar.info/</a>
</li>

<li>appJar (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/AppJar">https://en.wikipedia.org/wiki/AppJar</a>
</li>

<li>appJar na Pythonhosted<br />
<a href="http://pythonhosted.org/appJar/">http://pythonhosted.org/appJar/</a>
</li>

<li>Stránky projektu PyGTK<br />
<a href="http://www.pygtk.org/">http://www.pygtk.org/</a>
</li>

<li>PyGTK (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PyGObject<br />
<a href="https://wiki.gnome.org/Projects/PyGObject">https://wiki.gnome.org/Projects/PyGObject</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>
</li>

<li>Stránky projektu PyQt<br />
<a href="https://riverbankcomputing.com/software/pyqt/intro">https://riverbankcomputing.com/software/pyqt/intro</a>
</li>

<li>PyQt (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/PyGTK">https://cs.wikipedia.org/wiki/PyGTK</a>
</li>

<li>Stránky projektu PySide<br />
<a href="https://wiki.qt.io/PySide">https://wiki.qt.io/PySide</a>
</li>

<li>PySide (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PySide">https://en.wikipedia.org/wiki/PySide</a>
</li>

<li>Stránky projektu Kivy<br />
<a href="https://kivy.org/#home">https://kivy.org/#home</a>

<li>Kivy (framework, Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Kivy_(framework)">https://en.wikipedia.org/wiki/Kivy_(framework)</a>

<li>QML Applications<br />
<a href="http://doc.qt.io/qt-5/qmlapplications.html">http://doc.qt.io/qt-5/qmlapplications.html</a>
</li>

<li>KDE<br />
<a href="https://www.kde.org/">https://www.kde.org/</a>
</li>

<li>Qt<br />
<a href="https://www.qt.io/">https://www.qt.io/</a>
</li>

<li>GNOME<br />
<a href="https://en.wikipedia.org/wiki/GNOME">https://en.wikipedia.org/wiki/GNOME</a>
</li>

<li>Category:Software that uses PyGTK<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGTK</a>
</li>

<li>Category:Software that uses PyGObject<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject">https://en.wikipedia.org/wiki/Category:Software_that_uses_PyGObject</a>
</li>

<li>Category:Software that uses wxWidgets<br />
<a href="https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets">https://en.wikipedia.org/wiki/Category:Software_that_uses_wxWidgets</a>
</li>

<li>GIO<br />
<a href="https://developer.gnome.org/gio/stable/">https://developer.gnome.org/gio/stable/</a>
</li>

<li>GStreamer<br />
<a href="https://gstreamer.freedesktop.org/">https://gstreamer.freedesktop.org/</a>
</li>

<li>GStreamer (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GStreamer">https://en.wikipedia.org/wiki/GStreamer</a>
</li>

<li>Wax Gui Toolkit<br />
<a href="https://wiki.python.org/moin/Wax">https://wiki.python.org/moin/Wax</a>
</li>

<li>Python Imaging Library (PIL)<br />
<a href="http://infohost.nmt.edu/tcc/help/pubs/pil/">http://infohost.nmt.edu/tcc/help/pubs/pil/</a>
</li>

<li>Why Pyjamas Isn’t a Good Framework for Web Apps (blogpost z&nbsp;roku 2012)<br />
<a href="http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/">http://blog.pyjeon.com/2012/07/29/why-pyjamas-isnt-a-good-framework-for-web-apps/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2017</small></p>
</body>
</html>

