<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Vyhodnocování seznamů</a></p>
<p><a href="#k02">*** 2. Speciální formy</a></p>
<p><a href="#k03">*** 3. Práce s&nbsp;globálními proměnnými a konstantami</a></p>
<p><a href="#k04">*** 4. Dokumentační řetězce u proměnných a konstant</a></p>
<p><a href="#k05">*** 5. Koncept lokálních proměnných</a></p>
<p><a href="#k06">*** 6. Pravdivostní hodnoty a základní booleovské operace</a></p>
<p><a href="#k07">*** 7. Další booleovské operace a predikáty</a></p>
<p><a href="#k08">*** 8. Řízení běhu programu &ndash; rozvětvení</a></p>
<p><a href="#k09">*** 9. Použití forem <strong>when</strong> a <strong>unless</strong></a></p>
<p><a href="#k10">*** 10. Vícenásobné rozvětvení &ndash; forma <strong>cond</strong></a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Vyhodnocování seznamů</h2>

<p><i>&bdquo;Learning Lisp is like climbing a hill in which the first part is
the steepest.&ldquo;</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Speciální formy</h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Práce s&nbsp;globálními proměnnými a konstantami</h2>

<p>Prozatím jsme se v&nbsp;demonstračních příkladech povětšinou zabývali pouze
funkcemi, které nějakým způsobem zpracovávaly své parametry a
popř.&nbsp;vracely nějaký vypočtený výsledek. Ovšem <i>Emacs Lisp</i> (na
rozdíl od některých jiných dialektů LISPu) není pouze akademický jazyk, takže
umožňuje i práci s&nbsp;proměnnými, samozřejmě včetně proměnných globálních
(jejichž výskyt by se sice měl v&nbsp;programech co nejvíce omezit, ovšem
v&nbsp;Emacsu jsou i některé interní struktury editoru reprezentovány
globálními proměnnými). Globální i lokální proměnné jsou měnitelné, protože
<i>Emacs Lisp</i> není, ostatně stejně jako většina ostatních LISPových
dialektů, čistě funkcionální. Pro základní práci s&nbsp;proměnnými je určeno
těchto několik funkcí a speciálních forem:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Význam</th></tr>
<tr><td>1</td><td>set</td><td>nastavení proměnné na určitou hodnotu, proměnná musí být quotována</td></tr>
<tr><td>2</td><td>setq</td><td>nastavení proměnné na určitou hodnotu, proměnná je quotována automaticky</td></tr>
<tr><td>3</td><td>defconst</td><td>definice konstanty popř.&nbsp;i jejího dokumentačního řetězce</td></tr>
<tr><td>4</td><td>defvar</td><td>definice proměnné popř.&nbsp;i jejího dokumentačního řetězce</td></tr>
</table>

<p>Podívejme se nyní na způsob použití těchto funkcí a speciálních forem. Pro nastavení hodnoty
proměnné či proměnných se používá forma <strong>set</strong>. Jména proměnných
musí být v&nbsp;tomto případě quotována (apostrof před jménem):</p>

<pre>
(set 'zero 0)
(print zero)
0
</pre>

<p>Mnohem praktičtější je namísto funkce <strong>set</strong> použít formu
<strong>setq</strong>, která quotování nepotřebuje. Proto se s&nbsp;touto
formou setkáme v&nbsp;programech mnohem častěji:</p>

<pre>
(setq answer 42)
(print answer)
42
</pre>

<p>Proměnnou definovanou přes <strong>set</strong> nebo <strong>setq</strong>
lze změnit (je mutable):</p>

<pre>
(setq answer 43)
(print answer)
43
</pre>

<p>Pomocí <strong>setq</strong> je možné vytvořit více proměnných jediným příkazem:</p>

<pre>
(setq x 10
      y 20)
(print x)
10
(print y)
20
</pre>

<p>Alternativně je možné proměnné definovat s&nbsp;využitím <strong>defvar</strong>. Na rozdíl od <strong>setq</strong> je možné pomocí <strong>defvar</strong> definovat jen jednu proměnnou. Pokud již proměnná existuje, nebude přepsána!</p>

<pre>
(defvar e 2.7172)
(print e)
2.7172

(defvar e 5.55)
(print e)
2.7172
</pre>

<p>Konstanty se definují pomocí <strong>defconst</strong>:</p>

<pre>
(defconst pi 3.141592653589793)
(print pi)
3.141592653589793
</pre>

<p>A lze je později změnit:</p>

<pre>
(defconst pi 3)
(print pi)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Dokumentační řetězce u proměnných a konstant</h2>

<pre>
(defconst pi-float 3.141592653589793 "Ratio of a circle's circumference to its diameter")

(print pi-float)
(print (describe-variable 'pi-float))
</pre>

<pre>
3.141592653589793

Type C-x 1 to delete the help window, C-M-v to scroll help.

"pi-float’s value is 3.141592653589793

  This variable may be risky if used as a file-local variable.

Documentation:
Ratio of a circle’s circumference to its diameter"
</pre>

<pre>
(print (describe-variable 'float-pi))
</pre>

<pre>
#("float-pi is a variable defined in ‘float-sup.el’.
Its value is 3.141592653589793

  This variable may be risky if used as a file-local variable.

Documentation:
The value of Pi (3.1415926...)."
</pre>

<pre>
(defvar delta 4.669201609102990671853203821 "Feigenbaum constant")

(print delta)
(print (describe-variable 'delta))
</pre>

<pre>
4.66920160910299



"delta’s value is 4.66920160910299

Documentation:
Feigenbaum constant"
</pre>

<pre>
(defvar unknown nil)
(print unknown)
(print (describe-variable 'unknown))
</pre>

<pre>
nil



"unknown’s value is nil

Documentation:
Not documented as a variable."
</pre>


<p><a name="k05"></a></p>
<h2 id="k05">5. Koncept lokálních proměnných</h2>

<p>V&nbsp;mnoha funkcích se používají lokální proměnné. Ty se ovšem (na rozdíl
od proměnných globálních) nedefinují pomocí <strong>set</strong> ani
<strong>setq</strong>, ale speciální formou <strong>let</strong>, která
současně omezuje platnost takto vytvořených proměnných. Do formy
<strong>let</strong> se zapisuje jak deklarace a inicializace proměnné, tak i
vlastní tělo, tj.&nbsp;seznam výrazů. Návratovou hodnotou celého bloku je
hodnota vrácená posledním výrazem. Nejjednodušší příklad s&nbsp;deklarací
jediné lokální proměnné může vypadat následovně:</p>

<pre>
<strong>(let ((x 10)) (* x 2))</strong>
20
</pre>

<p>Při deklaraci dvou proměnných (či ještě většího počtu proměnných) se
používají závorky:</p>

<pre>
<strong>(let ((x 6) (y 7)) (* x y))</strong>
42
</pre>

<p>Následuje příklad použití speciální formy <strong>let</strong> uvnitř
funkce. Zde je návratová hodnota <strong>let</strong> současně i návratovou
hodnotou celé funkce:</p>

<pre>
(defun prumer
  (seznam)
  (let ((soucet (apply '+ seznam))
        (pocet  (length seznam)))
        (/ soucet pocet)))
</pre>

<p>Můžeme snadno provést otestování nové funkce:</p>

<pre>
(print (prumer '(1 2 3 4 5 6 7 8 9)))
5
</pre>

<p>Formy <strong>let</strong> je možné v&nbsp;případě potřeby libovolným
způsobem rekurzivně zanořovat. Oblast viditelnosti proměnných je stále určena
blokem <strong>let</strong>, ve kterém je proměnná deklarována. Zde má tedy
proměnná nazvaná <strong>vysledek</strong> jen omezenou platnost
viditelnosti:</p>

<pre>
(defun prumer
  (seznam)
  (let ((soucet (apply '+ seznam)))
     (let ((pocet (length seznam)))
        (/ soucet pocet))))
</pre>

<p>Pozor ovšem na to, že proměnné, které jsou deklarovány a inicializovány
dříve, <strong>není</strong> možné použít i ve výrazech sloužících pro
inicializaci později deklarovaných proměnných. Jinými slovy &ndash; přiřazení
v&nbsp;<strong>let</strong> se jakoby provádí paralelně. Co to znamená
v&nbsp;praxi?</p>

<pre>
(defun incorrect-hypot
  (x y)
  (let ((x2 (* x x))
        (y2 (* y y))
        (s  (+ x2 y2)))
    (sqrt s)))
</pre>

<pre>
(print (incorrect-hypot 3 4))
&nbsp;
Symbol’s value as variable is void: x2
</pre>

<pre>
(defun correct-hypot
  (x y)
  (let* ((x2 (* x x))
         (y2 (* y y))
         (s  (+ x2 y2)))
    (sqrt s)))
</pre>

<pre>
(print (correct-hypot 3 4))
5
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Pravdivostní hodnoty a základní booleovské operace</h2>

<p>V&nbsp;dialektu <i>Emacs Lisp</i> se pro reprezentaci pravdivostních hodnot
<i>true</i> a <i>false</i> používají globální a neměnitelné symboly nazvané
<strong>t</strong> a <strong>nil</strong> (oba symboly jsou psány malými
písmeny!). Jedna z&nbsp;těchto konstant je vždy výsledkem všech booleovských
operací, ovšem jejich vstupní parametry mohou být libovolné (čísla, symboly
atd.), s&nbsp;tím, že jakákoli hodnota rozdílná od <strong>nil</strong> je
považována za logickou pravdu. Při tvorbě programů jsou k&nbsp;dispozici
všechny tři základní booleovské operace vypsané v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Význam</th></tr>
<tr><td>1</td><td>and</td><td>logický součin</td></tr>
<tr><td>2</td><td>or</td><td>logický součet</td></tr>
<tr><td>3</td><td>not</td><td>logická negace</td></tr>
</table>

<p>První dvě výše vypsané funkce jsou variadické, tj.&nbsp;lze jim předat
libovolné množství parametrů. V&nbsp;případě funkce <strong>not</strong> má
smysl použít jen jediný parametr:</p>

<pre>
(and t t)
t

(and t nil)
nil

(or t t)
t

(or t nil)
t

(or nil nil nil nil)
nil

(not nil)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Další booleovské operace a predikáty</h2>

<p>K&nbsp;dialektům programovacího jazyka LISP samozřejmě patří i množina <a
href="https://www.tutorialspoint.com/lisp/lisp_predicates.htm">predikátů</a>,
tj.&nbsp;funkcí, které na základě nějaké vyhodnocené podmínky vrací
pravdivostní hodnotu. Většina predikátů končí znakem <strong>p</strong>, ale
nalezneme zde i několik výjimek (není však samozřejmě nijak problematické si
dodefinovat i ostatní predikáty končící otazníkem nebo znakem
<strong>p</strong>):</p>

<table>
<tr><th></th></tr>
<tr><td>atom</td></tr>
<tr><td>arrayp</td></tr>
<tr><td>bool-vector-p</td></tr>
<tr><td>bufferp</td></tr>
<tr><td>byte-code-function-p</td></tr>
<tr><td>case-table-p</td></tr>
<tr><td>char-or-string-p</td></tr>
<tr><td>char-table-p</td></tr>
<tr><td>commandp</td></tr>
<tr><td>consp</td></tr>
<tr><td>display-table-p</td></tr>
<tr><td>floatp</td></tr>
<tr><td>frame-configuration-p</td></tr>
<tr><td>frame-live-p</td></tr>
<tr><td>framep</td></tr>
<tr><td>functionp</td></tr>
<tr><td>integer-or-marker-p</td></tr>
<tr><td>integerp</td></tr>
<tr><td>keymapp</td></tr>
<tr><td>listp</td></tr>
<tr><td>markerp</td></tr>
<tr><td>wholenump</td></tr>
<tr><td>nlistp</td></tr>
<tr><td>numberp</td></tr>
<tr><td>number-or-marker-p</td></tr>
<tr><td>overlayp</td></tr>
<tr><td>processp</td></tr>
<tr><td>sequencep</td></tr>
<tr><td>stringp</td></tr>
<tr><td>subrp</td></tr>
<tr><td>symbolp</td></tr>
<tr><td>syntax-table-p</td></tr>
<tr><td>user-variable-p</td></tr>
<tr><td>vectorp</td></tr>
<tr><td>window-configuration-p</td></tr>
<tr><td>window-live-p</td></tr>
<tr><td>windowp</td></tr>
</table>

<p>Podívejme se na několik jednoduchých příkladů.</p>

<pre>
(atom nil)
t

(atom t)
t

(atom 42)
t

(atom "string")
t

(atom '(1 2 3))
nil
</pre>

<pre>
(listp nil)
t

(listp t)
nil

(listp 42)
nil

(listp "string")
nil

(listp '(1 2 3))
t
</pre>

<p><div class="rs-tip-major">Poznámka: zvláštnost symbolu <strong>nil</strong>
podtrhuje i to, že se současně jedná o <i>atom</i> i o <i>seznam</i>. Je tomu
díky &bdquo;dualitě&ldquo; tohoto symbolu, který odpovídá prázdnému seznamu.
Totéž tím pádem platí i pro prázdný seznam!</div></p>

<pre>
(null nil)
t

(null t)
nil

(null 42)
nil

(null "string")
nil

(null '(1 2 3))
nil
</pre>

<pre>
(consp '(1.2))
t

(consp '( 1 2 3))
t

(consp '())
nil

(consp 42)
nil
</pre>

<pre>
(zerop 0)
t

(zerop 42)
nil
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Řízení běhu programu &ndash; rozvětvení</h2>

<p>Pro řízení běhu programu, tj.&nbsp;pro rozvětvení, nabízí <i>Emacs Lisp</i>
poměrně velké množství různých speciálních forem. Základem je samozřejmě forma
<strong>if</strong> s&nbsp;klasickým rozvětvením, ovšem skalní LISPaři
v&nbsp;<i>Emacs Lispu</i> naleznou například i oblíbené <strong>cond</strong>
či formy <strong>when</strong> a <strong>unless</strong>, jejichž použití může
zpřehlednit zdrojový kód:</p>

<table>
<tr><th>#</th><th></th><th></th></tr>
<tr><td>1</td><td>if</td><td>rozdělení výpočtu do dvou větví na základě podmínky</td></tr>
<tr><td>2</td><td>ifn</td><td>znamená if-not, tj.&nbsp;varianta if s&nbsp;negovanou podmínkou</td></tr>
<tr><td>3</td><td>when</td><td>varianta if pro větší množství příkazů ve větvi &bdquo;then&ldquo;, viz též <a href="#k09">kapitolu 9</a></td></tr>
<tr><td>4</td><td>unless</td><td>varianta if pro větší množství příkazů ve větvi &bdquo;else&ldquo;, viz též <a href="#k09">kapitolu 9</a></td></tr>
<tr><td>5</td><td>cond</td><td>vícenásobné rozvětvení, LISPovská klasická a univerzální konstrukce, viz též <a href="#k10">desátou kapitolu</a></a></td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Použití forem <strong>when</strong> a <strong>unless</strong></h2>

<p>V&nbsp;některé části aplikace většinou potřebujeme na základě nějaké
podmínky vykonat sekvenci příkazů. I v&nbsp;tomto případě je samozřejmě možné
použít <strong>if</strong>, ovšem celá sekvence příkazů musí být vytvořena
v&nbsp;jiné funkci či &bdquo;uzavřena&ldquo; do programového bloku tvořeného
formou <strong>prog</strong>. Pokud například potřebujeme na základě
vyhodnocené podmínky vypsat na standardní výstup zprávu a současně vrátit
nějakou hodnotu, mohl by celý zápis vypadat například takto:</p>

<pre>
(setq a 20)
(setq b 20)
(if (zerop (- a b))
    (progn
         (print "zero result")
         (do-something)
         (do-something-else)))

(setq a 20)
(setq b 20)
(when (zerop (- a b))
      (print "zero result")
      (do-something)
      (do-something-else))

(unless (zerop (- 2 1))
      (print "nonzero result")
      (do-something)
      (do-something-else))
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Vícenásobné rozvětvení &ndash; forma <strong>cond</strong></h2>

<pre>
(defun sgn
  (n)
  (cond
        ((&lt; n 0)      'negative)
        ((&gt; n 0)      'positive)
        ((zerop n)    'zero)))
</pre>

<pre>
(print (sgn -10))
(print (sgn 0))
(print (sgn 10))
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy většiny dnes popsaných demonstračních příkladů byly uloženy do
Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/elisp-examples">https://github.com/tisnik/elisp-examples</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem stále velmi malý, dnes má doslova několik kilobajtů),
můžete namísto toho použít odkazy na jednotlivé příklady, které naleznete
v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-2/">https://github.com/tisnik/elisp-examples/blob/master/elisp-2/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-2/">https://github.com/tisnik/elisp-examples/blob/master/elisp-2/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-2/">https://github.com/tisnik/elisp-examples/blob/master/elisp-2/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-2/">https://github.com/tisnik/elisp-examples/blob/master/elisp-2/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-2/">https://github.com/tisnik/elisp-examples/blob/master/elisp-2/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-2/">https://github.com/tisnik/elisp-examples/blob/master/elisp-2/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-2/">https://github.com/tisnik/elisp-examples/blob/master/elisp-2/</a></td></tr>
</table>

01_varibles.el
02_variable_docstrings.el
03_let.el
04_parallel_let.el
05_sequential_let.el
06_boolean_ops.el
07_predicates.el
08_control_structures.el



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Evil (Emacs Wiki)<br />
<a href="https://www.emacswiki.org/emacs/Evil">https://www.emacswiki.org/emacs/Evil</a>
</li>

<li>Evil (na GitHubu)<br />
<a href="https://github.com/emacs-evil/evil">https://github.com/emacs-evil/evil</a>
</li>

<li>Evil (na stránkách repositáře MELPA)<br />
<a href="https://melpa.org/#/evil">https://melpa.org/#/evil</a>
</li>

<li>Evil Mode: How I Switched From VIM to Emacs<br />
<a href="https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html">https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html</a>
</li>

<li>GNU Emacs (home page)<br />
<a href="https://www.gnu.org/software/emacs/">https://www.gnu.org/software/emacs/</a>
</li>

<li>GNU Emacs (texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?GnuEmacs">http://texteditors.org/cgi-bin/wiki.pl?GnuEmacs</a>
</li>

<li>An Introduction To Using GDB Under Emacs<br />
<a href="http://tedlab.mit.edu/~dr/gdbintro.html">http://tedlab.mit.edu/~dr/gdbintro.html</a>
</li>

<li>An Introduction to Programming in Emacs Lisp<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html</a>
</li>

<li>27.6 Running Debuggers Under Emacs<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html</a>
</li>

<li>GdbMode<br />
<a href="http://www.emacswiki.org/emacs/GdbMode">http://www.emacswiki.org/emacs/GdbMode</a>
</li>

<li>Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Emacs">https://en.wikipedia.org/wiki/Emacs</a>
</li>

<li>Emacs timeline<br />
<a href="http://www.jwz.org/doc/emacs-timeline.html">http://www.jwz.org/doc/emacs-timeline.html</a>
</li>

<li>Emacs Text Editors Family<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?EmacsFamily">http://texteditors.org/cgi-bin/wiki.pl?EmacsFamily</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse (část 2: vyhledávání a nahrazování textu)<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/</a>
</li>

<li>Emacs/Evil-mode - A basic reference to using evil mode in Emacs<br />
<a href="http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet">http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet</a>
</li>

<li>From Vim to Emacs+Evil chaotic migration guide<br />
<a href="https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/">https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/</a>
</li>

<li>Introduction to evil-mode {video)<br />
<a href="https://www.youtube.com/watch?v=PeVQwYUxYEg">https://www.youtube.com/watch?v=PeVQwYUxYEg</a>
</li>

<li>EINE (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/EINE">http://www.emacswiki.org/emacs/EINE</a>
</li>

<li>EINE (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?EINE">http://texteditors.org/cgi-bin/wiki.pl?EINE</a>
</li>

<li>ZWEI (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/ZWEI">http://www.emacswiki.org/emacs/ZWEI</a>
</li>

<li>ZWEI (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?ZWEI">http://texteditors.org/cgi-bin/wiki.pl?ZWEI</a>
</li>

<li>Zmacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Zmacs">https://en.wikipedia.org/wiki/Zmacs</a>
</li>

<li>Zmacs (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?Zmacs">http://texteditors.org/cgi-bin/wiki.pl?Zmacs</a>
</li>

<li>TecoEmacs (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/TecoEmacs">http://www.emacswiki.org/emacs/TecoEmacs</a>
</li>

<li>Micro Emacs<br />
<a href="http://www.emacswiki.org/emacs/MicroEmacs">http://www.emacswiki.org/emacs/MicroEmacs</a>
</li>

<li>Micro Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MicroEMACS">https://en.wikipedia.org/wiki/MicroEMACS</a>
</li>

<li>EmacsHistory<br />
<a href="http://www.emacswiki.org/emacs/EmacsHistory">http://www.emacswiki.org/emacs/EmacsHistory</a>
</li>

<li>Seznam editorů s ovládáním podobným Emacsu či kompatibilních s příkazy Emacsu<br />
<a href="http://www.finseth.com/emacs.html">http://www.finseth.com/emacs.html</a>
</li>

<li>evil-numbers<br />
<a href="https://github.com/cofi/evil-numbers">https://github.com/cofi/evil-numbers</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (1.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (2.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v editorech Emacs a Vim<br />
<a href="https://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">https://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Org mode<br />
<a href="https://orgmode.org/">https://orgmode.org/</a>
</li>

<li>The Org Manual<br />
<a href="https://orgmode.org/manual/index.html">https://orgmode.org/manual/index.html</a>
</li>

<li>Kakoune (modální textový editor)<br />
<a href="http://kakoune.org/">http://kakoune.org/</a>
</li>

<li>Vim-style keybinding in Emacs/Evil-mode<br />
<a href="https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8">https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8</a>
</li>

<li>Emacs - jak začít<br />
<a href="http://www.abclinuxu.cz/clanky/navody/emacs-jak-zacit">http://www.abclinuxu.cz/clanky/navody/emacs-jak-zacit</a>
</li>

<li>Programovací jazyk LISP a LISP machines<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/">https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/</a>
</li>

<li>Evil-surround<br />
<a href="https://github.com/emacs-evil/evil-surround">https://github.com/emacs-evil/evil-surround</a>
</li>

<li>Spacemacs<br />
<a href="http://spacemacs.org/">http://spacemacs.org/</a>
</li>

<li>Lisp: Common Lisp, Racket, Clojure, Emacs Lisp<br />
<a href="http://hyperpolyglot.org/lisp">http://hyperpolyglot.org/lisp</a>
</li>

<li>Common Lisp, Scheme, Clojure, And Elisp Compared<br />
<a href="http://irreal.org/blog/?p=725">http://irreal.org/blog/?p=725</a>
</li>

<li>Does Elisp Suck?<br />
<a href="http://irreal.org/blog/?p=675">http://irreal.org/blog/?p=675</a>
</li>

<li>Emacs pro mírně pokročilé (9): Elisp<br />
<a href="https://www.root.cz/clanky/emacs-elisp/">https://www.root.cz/clanky/emacs-elisp/</a>
</li>

<li>If I want to learn lisp, are emacs and elisp a good choice?<br />
<a href="https://www.reddit.com/r/emacs/comments/2m141y/if_i_want_to_learn_lisp_are_emacs_and_elisp_a/">https://www.reddit.com/r/emacs/comments/2m141y/if_i_want_to_learn_lisp_are_emacs_and_elisp_a/</a>
</li>

<li>Clojure(Script) Interactive Development Environment that Rocks!<br />
<a href="https://github.com/clojure-emacs/cider">https://github.com/clojure-emacs/cider</a>
</li>

<li>An Introduction to Emacs Lisp<br />
<a href="https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html">https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html</a>
</li>

<li>Emergency Elisp<br />
<a href="http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html">http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html</a>
</li>

<li>Racket<br />
<a href="https://racket-lang.org/">https://racket-lang.org/</a>
</li>

<li>The Racket Manifesto<br />
<a href="http://felleisen.org/matthias/manifesto/">http://felleisen.org/matthias/manifesto/</a>
</li>

<li>MIT replaces Scheme with Python<br />
<a href="https://www.johndcook.com/blog/2009/03/26/mit-replaces-scheme-with-python/">https://www.johndcook.com/blog/2009/03/26/mit-replaces-scheme-with-python/</a>
</li>

<li>Adventures in Advanced Symbolic Programming<br />
<a href="http://groups.csail.mit.edu/mac/users/gjs/6.945/">http://groups.csail.mit.edu/mac/users/gjs/6.945/</a>
</li>

<li>Why MIT Switched from Scheme to Python (2009)<br />
<a href="https://news.ycombinator.com/item?id=14167453">https://news.ycombinator.com/item?id=14167453</a>
</li>

<li>Starodávná stránka XLispu<br />
<a href="http://www.xlisp.org/">http://www.xlisp.org/</a>
</li>

<li>AutoLISP<br />
<a href="https://en.wikipedia.org/wiki/AutoLISP">https://en.wikipedia.org/wiki/AutoLISP</a>
</li>

<li>Seriál PicoLisp: minimalistický a výkonný interpret Lispu<br />
<a href="https://www.root.cz/serialy/picolisp-minimalisticky-a-vykonny-interpret-lispu/">https://www.root.cz/serialy/picolisp-minimalisticky-a-vykonny-interpret-lispu/</a>
</li>

<li>Common Lisp<br />
<a href="https://common-lisp.net/">https://common-lisp.net/</a>
</li>

<li>Getting Going with Common Lisp<br />
<a href="https://cliki.net/Getting%20Started">https://cliki.net/Getting%20Started</a>
</li>

<li>Online Tutorial (Common Lisp)<br />
<a href="https://cliki.net/online%20tutorial">https://cliki.net/online%20tutorial</a>
</li>

<li>Guile Emacs<br />
<a href="https://www.emacswiki.org/emacs/GuileEmacs">https://www.emacswiki.org/emacs/GuileEmacs</a>
</li>

<li>Guile Emacs History<br />
<a href="https://www.emacswiki.org/emacs/GuileEmacsHistory">https://www.emacswiki.org/emacs/GuileEmacsHistory</a>
</li>

<li>Guile is a programming language<br />
<a href="https://www.gnu.org/software/guile/">https://www.gnu.org/software/guile/</a>
</li>

<li>MIT Scheme<br />
<a href="http://groups.csail.mit.edu/mac/projects/scheme/">http://groups.csail.mit.edu/mac/projects/scheme/</a>
</li>

<li>SIOD: Scheme in One Defun<br />
<a href="http://people.delphiforums.com/gjc//siod.html">http://people.delphiforums.com/gjc//siod.html</a>
</li>

<li>CommonLispForEmacs<br />
<a href="https://www.emacswiki.org/emacs/CommonLispForEmacs">https://www.emacswiki.org/emacs/CommonLispForEmacs</a>
</li>

<li>Elisp: print, princ, prin1, format, message<br />
<a href="http://ergoemacs.org/emacs/elisp_printing.html">http://ergoemacs.org/emacs/elisp_printing.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

