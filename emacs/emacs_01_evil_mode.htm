<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Evil: kombinace editačních příkazů Vimu a síly Emacsu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V článku se seznámíme s přídavným modulem Evil určeným pro slavný textový editor Emacs. Díky tomuto modulu je možné v Emacsu používat editační příkazy a režimy (stavy) neméně slavného editoru Vim, takže uživatelé mohou synergicky využít výhody obou těchto zdánlivě nepřátelských světů.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Evil: kombinace editačních příkazů Vimu a síly Emacsu</a></p>
<p><a href="#k02">2. Proč by měl být Emacs zajímavý i pro Vimaře?</a></p>
<p><a href="#k03">3. Emacs není jediný editor s&nbsp;emulací Vimu</a></p>
<p><a href="#k04">4. Instalace balíčku Evil do Emacsu</a></p>
<p><a href="#k05">5. Povolení režimu Evil, přepínání režimů Emacs/Vim</a></p>
<p><a href="#k06">6. Základní editační příkazy</a></p>
<p><a href="#k07">7. Práce s&nbsp;registry (<i>registers</i>)</a></p>
<p><a href="#k08">8. Použití značek (<i>marks</i>)</a></p>
<p><a href="#k09">9. Uživatelská makra</a></p>
<p><a href="#k10">10. Další přizpůsobení Emacsu pro skalní Vimaře</a></p>
<p><a href="#k11">11. Modifikace funkce klávesy <strong>Y</strong></a></p>
<p><a href="#k12">12. Balíček <strong>evil-numbers</strong></a></p>
<p><a href="#k13">13. Instalace a konfigurace balíčku <strong>evil-numbers</strong></a></p>
<p><a href="#k14">14. Ostatní užitečná nastavení</a></p>
<p><a href="#k15">15. Mapování kláves ve Vimu</a></p>
<p><a href="#k16">16. Mapování kláves v&nbsp;Emacsu</a></p>
<p><a href="#k17">17. Evil a Elisp</a></p>
<p><a href="#k18">18. Využití funkcí <strong>evil-*</strong></a></p>
<p><a href="#k19">19. Obsah navazujícího článku &ndash; projekt <strong>Spacemacs</strong></i></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Evil: kombinace editačních příkazů Vimu a síly Emacsu</h2>

<p>V&nbsp;dnešním článku se seznámíme s&nbsp;pluginem určeným pro slavný
textový editor Emacs. Tento plugin se jmenuje <i>Evil</i> a umožňuje ovládat
Emacs pomocí klávesových zkratek emulujících (a to velmi důkladně) další slavný
textový editor Vim. Díky tomuto pluginu je tak umožněna synergie schopností
Vimu s&nbsp;univerzálností Emacsu. Se samotným Emacsem jsme se na Rootu již
setkali, a to dokonce několikrát. Především vyšly dva seriály [<a
href="https://www.root.cz/serialy/emacs-viac-nez-len-editor/">1</a>] [<a
href="https://www.root.cz/serialy/emacs-pro-mirne-pokrocile/">2</a>] věnované
použití Emacsu, poměrně podrobně jsme si popsali i <a
href="https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-eine-zwei-emacs/">historii
vzniku tohoto textového editoru</a> a taktéž jsme si ukázali schopnosti Emacsu
při <a
href="https://www.root.cz/clanky/graficka-nadstavba-nad-gnu-debuggerem-gdbgui-a-jeji-alternativy/#k07">ladění
nativních aplikací</a> (samotné ladění je prováděno GNU Debuggerem, Emacs zde
slouží především jako inteligentní front end). Prozatím <a
href="https://www.root.cz/clanky/pouziti-emacsu-pro-porovnavani-a-slucovani-souboru/">poslední
článek</a> se věnoval režimu interaktivního porovnávání souborů.</p>

<img src="https://i.iinfo.cz/images/325/evil1-1.png" class="image-337456" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 1: Spuštění textového editoru Emacs se zobrazením hypertextového
souboru s&nbsp;nápovědou.</i></p>

<p>I přesto, že v&nbsp;současnosti existuje poměrně velké množství
programátorských textových editorů postavených na moderních technologiích
(jmenujme například <a
href="https://www.root.cz/clanky/atom-moderni-textovy-editor/">Atom</a>, <a
href="https://www.root.cz/clanky/sublime-text-2-pokrocily-editor-vychazejici-z-vimu/">Sublime
Text 2</a>, <a
href="https://www.root.cz/clanky/light-table-interaktivni-vyvojove-prostredi/">Light
Table</a> či projekt Kakoune), stále mnoho uživatelů &ndash; ať již se jedná o
programátory, administrátory, testery atd. &ndash; používá dnes již klasické
editory <a href="https://www.root.cz/n/vim/">Vim</a> a <a
href="https://www.root.cz/n/emacs/">Emacs</a>. Ostatně není se čemu divit,
protože jak ve Vimu, tak i v&nbsp;Emacsu lze s&nbsp;texty pracovat velmi
efektivně a navíc je možné si mnohé úlohy plně zautomatizovat, například
prostým opakováním příkazu, použitím uživatelských maker, mapování kláves či
dokonce vytvořením složitějších skriptu/pluginu.</p>

<img src="https://i.iinfo.cz/images/325/evil1-2.png" class="image-337457" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 2: GNU Emacs přepnutý do takzvaného ediff režimu.</i></p>

<p><div class="rs-tip-major">Důležité upozornění: v&nbsp;současnosti se používá
několik typů textových editorů, v&nbsp;jejichž názvu objevíme slovo Emacs.
Jedná se například o <a
href="https://en.wikipedia.org/wiki/MicroEMACS">MicroEMACS</a> a jeho varianty,
z&nbsp;nichž jedna je používána a <a
href="https://git.kernel.org/pub/scm/editors/uemacs/uemacs.git">udržována</a>
Linusem Torvaldsem. Dnes se ovšem zaměříme na popis možností GNU Emacsu, i když
popisovaný režim by měl být funkční i v&nbsp;XEmacsu (pokud ho ještě někdo
používá namísto GNU Emacsu). Všechny popisované funkce je samozřejmě možné
použít jak tehdy, když je GNU Emacs spuštěn s&nbsp;plnohodnotným grafickým
uživatelským rozhraním, tak i v&nbsp;případě, že používáte GNU Emacs spuštěný
v&nbsp;terminálu, například s&nbsp;využitím balíčku <strong>emacs-nox</strong>
(nox = no X).</div></p>

<a href="https://www.root.cz/obrazek/337458/"><img src="https://i.iinfo.cz/images/325/evil1-3-prev.png" class="image-337458" alt="&#160;" width="370" height="232" /></a>
<p><i>Obrázek 3: Pokud vám grafické uživatelské rozhraní u textových editorů
z&nbsp;nějakého důvodu nevyhovuje a dáváte přednost použití terminálu, je možné
Emacs startovat s&nbsp;volbou <strong>-nw</strong> nebo
<strong>--no-window-system</strong>. Pokud se Emacs spouští z&nbsp;textové
konzole, samozřejmě se přepne do čistě textového rozhraní.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Proč by měl být Emacs zajímavý i pro Vimaře?</h2>

<p>Pokud tento článek čte dlouholetý příznivce Vimu, asi si klade otázku, zda
mu použití Emacsu skutečně může přinést nějaké výhody a jestli má smysl si
Emacs + Evil vyzkoušet. Samozřejmě jsou požadavky uživatelů různé, ale
vyzkoušení Evilu může být přínosné, zejména ve chvíli, kdy se použije ještě
nějaký další plugin měnící Emacs v&nbsp;integrované vývojové prostředí (navíc
je vždy vhodné znát možnosti &bdquo;nepřítele&ldquo; :-). Vim je samozřejmě
taktéž rozšiřitelný díky existenci <i>Vim Scriptu</i>, ovšem například
integrace dynamicky typovaných jazyků je v&nbsp;Emacsu (podle mých zkušeností)
lepší. Díky tomu, že je tento programátorský editor relativně snadno
rozšiřitelný s&nbsp;využitím skriptů a modulů naprogramovaných <a
href="https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/">v&nbsp;jazyce
Lisp</a>, přesněji řečeno v&nbsp;jeho dialektu nazvaném <a
href="https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html">Emacs
Lisp</a> (též <i>Elisp</i>), existuje v&nbsp;současnosti poměrně velké množství
propracovaných modulů, které z&nbsp;<i>Emacsu</i> vytváří sofistikované
integrované vývojové prostředí (IDE), jež se navíc v&nbsp;případě potřeby
dokáže přizpůsobit mnoha programovacím jazykům (překladačům ale i
interpretrům).</p>

<p><div class="rs-tip-major">Jen pro upřesnění: všech cca 1400 článků, které
jsem pro Root napsal, bylo vytvořeno ve Vimu. První články ještě ve starodávném
Vimu 5, poměrně dlouho jsem používal Vim 6 a dnes používám Vim 7 (starší
notebook) a samozřejmě Vim 8.</div></p>

<img src="https://i.iinfo.cz/images/325/evil1-4.png" class="image-337459" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 4: Porovnání tří variant zdrojového kódu v&nbsp;ediff
režimu.</i></p>

<p>Textový editor <i>Emacs</i> je možné v&nbsp;závislosti na tom, jaký typ
souboru je právě otevřený, přepínat mezi různými režimy, přičemž v&nbsp;každém
režimu mohou být použity jiné klávesové zkratky, zobrazena odlišná okna
(nejenom klasická okna s&nbsp;editovaným textem) apod. Příkladem může být režim
ladění programů s&nbsp;využitím GNU Debuggeru. O propojení debuggeru
s&nbsp;Emacsem se stará knihovna <i>GUD</i> neboli <i>Grand Unified
Debugger</i>, s&nbsp;níž se můžete seznámit v&nbsp;článku <a
href="https://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">Debuggery
a jejich nadstavby v Linuxu (5): ladění aplikací v editorech Emacs a Vim</a>.
Zapomenout nesmíme ani na slavný <i>Org-mode</i> nabízející možnosti plánovače
úloh, tvorbu strukturovaných dokumentů, přípravu programů schůzek, práci
s&nbsp;tabulkami (v&nbsp;čistě textových dokumentech). Ostatně znám několik
lidí (neprogramátorů), kteří přešli na Emacs právě kvůli existenci
<i>Org-mode</i>.</p>

<img src="https://i.iinfo.cz/images/325/evil1-5.png" class="image-337460" alt="&#160;" width="767" height="572" />
<p><i>Obrázek 5: Podpora ladění přímo z&nbsp;prostředí Emacsu &ndash;
inicializace knihovny GUD a připojení Emacsu ke GNU Debuggeru.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Emacs není jediný editor s&nbsp;emulací Vimu</h2>

<p>Ve skutečnosti není textový editor Emacs jedinou aplikací, pro kterou byl
vytvořen plugin emulující možnosti Vimu. Například pro textový editor Atom
existuje zásuvný modul pojmenovaný <a
href="https://github.com/t9md/atom-vim-mode-plus">atom-vim-mode-plus</a>. Na
stránkách serveru <a href="https://mojefedora.cz">mojefedora.cz</a> [<a
href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/">1</a>]
[<a
href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/">2</a>]
jste se mohli se seznámit s&nbsp;projektem <i>Vrapper</i> přidávajícím
klávesové zkratky Vimu do integrovaného vývojového prostředí Eclipse a emulace
Vimu je dokonce dostupná o pro Libre Office díky pluginu <a
href="https://github.com/seanyeh/vibreoffice">vibreoffice</a> (ten ovšem
podporuje jen ty nejzákladnější příkazy, ze všech zmíněných pluginů je
v&nbsp;nejhorším stavu).</p>

<a href="https://www.root.cz/obrazek/337461/"><img src="https://i.iinfo.cz/images/325/evil1-6-prev.png" class="image-337461" alt="&#160;" width="370" height="238" /></a>
<p><i>Obrázek 6: Integrované vývojové prostředí Eclipse s&nbsp;nainstalovaným
pluginem Vrapper.</i></p>

<p><div class="rs-tip-major">Poznámka: mimochodem, <a href="#k01">výše
zmíněný</a> editor Kakoune je modální, takže Vi a jeho deriváty (především tedy
Vim) nejsou jedinými v&nbsp;současnosti používanými modálními
editory.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace balíčku Evil do Emacsu</h2>

<p>Existuje několik způsobů instalace pluginu <i>Evil</i> (příslušný balíček se
jmenuje jednouše <strong>evil</strong>). Nejjednodušší je instalace ve chvíli,
kdy máte v&nbsp;Emacsu povolen repositář balíčků <a
href="https://melpa.org/">MELPA</a> (ten obsahuje přibližně 3900 balíčků!). Po
zadání příkazu:</p>

<pre>
M-x list-packages
</pre>

<p>je možné zjistit, jestli je MELPA povolena a zda je tedy balíček
<strong>evil</strong> přímo k&nbsp;dispozici:</p>

<p><div class="rs-tip-major">Poznámka: uživatelé Emacsu používají označení M-x
pro klávesovou zkratku Alt+X, my dnes tento způsob zápisu taktéž budeme
dodržovat.</div></p>

<img src="https://i.iinfo.cz/images/325/evil1-7.png" class="image-337462" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 7: V&nbsp;případě, že repositář MELPA není povolen, budou
dostupné pouze balíčky z&nbsp;výchozího repositáře ELPA (Emacs Lisp Package
Archive).</i></p>

<p>Pokud balíček <strong>evil</strong> nebyl nalezen, je nutné MELPu povolit,
například těmito řádky přidanými do souboru <strong>.emacs</strong> umístěného
v&nbsp;domovském adresáři:</p>

<pre>
<strong>(require 'package)</strong>
<strong>(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)</strong>
</pre>

<p>Po opětovném načtení editoru zkuste znovu zadat příkaz:</p>

<pre>
M-x list-packages
</pre>

<p>Tentokrát by se měl objevit mj.&nbsp;i balíček nazvaný <strong>evil</strong>
(pozor na to, že prvotní načtení všech 3900 balíčků může chvíli trvat):</p>

<img src="https://i.iinfo.cz/images/325/evil1-8.png" class="image-337463" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 8: V&nbsp;případě, že je repositář MELPA povolen, měl by se
v&nbsp;seznamu balíčků objevit i plugin <strong>evil</strong>.</i></p>

<p>Plugin <strong>evil</strong> nainstalujeme běžným způsobem:</p>

<img src="https://i.iinfo.cz/images/325/evil1-9.png" class="image-337464" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 9: Výběr pluginu <strong>evil</strong> pro instalaci.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Povolení režimu Evil, přepínání režimů Emacs/Vim</h2>

<p>V&nbsp;případě, že budete chtít, aby Emacs implicitně pracovat v&nbsp;režimu
emulace editoru Vim, přidejte si do souboru <strong>.emacs</strong> umístěného
v&nbsp;domovském adresáři následující dvojici řádků:</p>

<pre>
(require 'evil)
(evil-mode 1)
</pre>

<p>Přepínání mezi originálním ovládáním Emacsu a emulací Vimu se dá provést i
dalšími způsoby. Například je možné použít klávesovou zkratku
<strong>C-z</strong> (neboli Ctrl+Z), což ovšem nemusí fungovat v&nbsp;textové
konzoli. Taktéž je možné zavolat příkaz <strong>evil-mode</strong>, a to
následujícím způsobem:</p>

<pre>
M-x evil-mode
</pre>

<p>Tento příkaz přepíná mezi původním režimem Emacsu a Vimem popř.&nbsp;i
opačným směrem. Ovšem pokud se editor nachází v&nbsp;režimu emulace Vimu,
můžeme namísto hledání Alt+X použít i &bdquo;vimovský způsob&ldquo;:</p>

<pre>
:evil-mode
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti se totiž po zadání
dvojtečky může zadat libovolný příkaz Emacsu, což sice koliduje
s&nbsp;Vimovskými příkazy (například neexistuje <strong>:map</strong>), ovšem
na druhou stranu stále máme přístup ke všem možnostem, které nám tento nejenom
textový editor nabízí.</div></p>

<img src="https://i.iinfo.cz/images/325/evil1-10.png" class="image-337465" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 10: Přepnutí do režimu Evil zadáním příkazu M-x
evil-mode.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Základní editační příkazy</h2>

<p><div class="rs-tip-major">Poznámka: v&nbsp;této kapitole i v&nbsp;dalších
kapitolách se setkáme s&nbsp;jedním problémem &ndash; různou terminologií
používanou ve Vimu a v&nbsp;Emacsu. Týká se to převážně termínů <i>režim
(mode)</i> a <i>stav (status)</i>. Ve Vimu se totiž používá termín režim
(<i>mode</i>) pro rozlišení mezi zadáváním základních editačních příkazů
(<i>normal mode)</i>, vkládáním příkazů na příkazovou řádku (<i>command
mode</i>), vkládáním nového textu (<i>insert mode</i>) atd. &ndash; viz
následující obrázek. V&nbsp;Emacsu je však slovo režim/mode použito pro jiné
účely (například samotný plugin Evil přináší nový <i>evil-mode</i>, blíže viz
například <a
href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Major-Modes.html">Major-Modes</a>),
takže se namísto toho pro označení režimu Vi/Vimu používá slovo stav/state
(<i>normal state</i>, <i>insert state</i>, ...).</div></p>

<img src="https://i.iinfo.cz/images/325/evil1-11.png" class="image-337466" alt="&#160;" width="541" height="371" />
<p><i>Obrázek 11: Režimy Vimu a způsob přechodu mezi nimi.</i></p>

<p>Ihned po povolení <strong>režimu</strong> evil (<i>evil mode</i>) se textový
editor Emacs přepne do normálního stavu (<i>normal state</i>), tj.&nbsp;je
možné zadávat prakticky všechny editační příkazy, které znáte z&nbsp;Vimu
(emulace je skutečně na velmi dobré úrovni). Podporovány jsou samozřejmě i
všechny operátory Vimu, dokonce včetně ROT13:</p>

<table>
<tr><th>Operátor</th><th>Význam</th><th>Stručný popis</th></tr>
<tr><td>c</td><td>change</td><td>změna textu (delete a následný přechod do vkládacího režimu)</td></tr>
<tr><td>d</td><td>delete</td><td>vymazání textu</td></tr>
<tr><td>y</td><td>yank</td><td>kopie textu do registru</td></tr>
<tr><td>!</td><td>filter</td><td>filtrace přes externí příkaz</td></tr>
<tr><td>&gt;</td><td>shift right</td><td>posun textu doprava o shiftwidth</td></tr>
<tr><td>&lt;</td><td>shift left</td><td>posun textu doleva o shiftwidth</td></tr>
<tr><td>g~</td><td>swap case</td><td>změna malých písmen na velké a naopak</td></tr>
<tr><td>gu</td><td>lowercase</td><td>změna na malá písmena (mínusky)</td></tr>
<tr><td>gU</td><td>Uppercase</td><td>změna na velká písmena (verzálky)</td></tr>
<tr><td>gq</td><td>format</td><td>zformátování textu</td></tr>
<tr><td>g?</td><td>ROT13</td><td>rotace ASCII znaků o 13 pozic dopředu (režim modulo)</td></tr>
<tr><td>=</td><td>indent</td><td>změna zarovnání textu</td></tr>
</table>

<p>Pro přepnutí do stavu vkládání se používají běžné příkazy
<strong>a</strong>, <strong>A</strong>, <strong>i</strong>, <strong>I</strong>,
<strong>o</strong>, <strong>O</strong>, <strong>c</strong>, <strong>R</strong>
(stav přepisu) atd. Aktuálně nastavený stav je zobrazen na stavovém řádku
každého bufferu. Jedná se o zápis [N], [V], [I], [R] atd. Při zapnutí stavu
psaní nového textu se navíc objeví zpráva &bdquo;-- INSERT --&ldquo;, podobně
jako v&nbsp;samotném Vimu.</p>

<p>Klávesová zkratka <strong>C-SPC</strong> (neboli
<strong>Ctrl+Space</strong>), která v&nbsp;Emacsu slouží pro nastavení značky,
dostala poněkud odlišný význam &ndash; zapíná režim vizuálního výběru bloku. Je
to vlastně logické, protože typické editační operace v&nbsp;Emacsu probíhají
mezi pozicí kurzoru a nastavenou značkou (tzv. <i>region</i>) a ve Vimu pro
vizuálně vybraný blok (tj.&nbsp;mezi začátkem bloku a pozicí kurzoru).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Práce s&nbsp;registry (<i>registers</i>)</h2>

<p>Užitečným a často používaným nástrojem nabízeným textovým editorem Vim i
režimem Evil jsou takzvané <i>registry</i>. Jedná se o proměnné pojmenované
jedním znakem, které v&nbsp;první řadě slouží pro kopii či přenos editovaných
textů pomocí příkazů <strong>c</strong> (<i>change</i>), <strong>s</strong>
(<i>substitute</i>), <strong>d</strong> (<i>delete</i>), <strong>y</strong>
(<i>yank</i>) a <strong>p</strong> (<i>paste</i>), což vlastně znamená, že
registry lze využít ve funkci pojmenovaných schránek (clipboard). Podobně jako
v&nbsp;případě dále zmíněných značek, existují registry naplňované uživatelem a
registry, jejichž obsah je měněn textovým editorem automaticky při provádění
různých operací. Jména a význam některých důležitých registrů můžete najít
v&nbsp;následující tabulce:</p>

<table>
<tr><th>Registr</th><th>Význam</th></tr>
<tr><td>a-z</td><td>registry, které je možné přímo měnit uživatelem</td></tr>
<tr><td>0</td><td>použitý při příkazu <i>yank</i> (kopie textu)</td></tr>
<tr><td>1–9</td><td>registry naplňované automaticky příkazy <strong>d</strong> a <strong>c</strong> (<i>delete</i>, <i>change</i>)</td></tr>
<tr><td>%</td><td>není ve výchozím nastavení přímo použit</td></tr>
<tr><td>:</td><td>registr obsahující poslední příkaz, vhodné při vyvolání tohoto příkazu jako makra</td></tr>
<tr><td>=</td><td>není ve výchozím nastavení přímo použit</td></tr>
<tr><td>/</td><td>registr obsahující posledně vyhledávaný řetězec (resp.&nbsp;text odpovídající regulárnímu výrazu)</td></tr>
<tr><td>"</td><td>implicitní registr pro operace <strong>c</strong>, <strong>d</strong>, <strong>s</strong> nebo <strong>y</strong></td></tr>
<tr><td>–</td><td>implicitní registr pro operace, které mění menší část textu, než je jeden textový řádek</td></tr>
</table>

<img src="https://i.iinfo.cz/images/325/evil1-12.png" class="image-337467" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 12: Zobrazení registrů (registers, resp.&nbsp;přesněji řečeno
evil-registers).</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Použití značek (<i>marks</i>)</h2>

<p>Další užitečnou věcí, kterou ve Vimu a samozřejmě i v&nbsp;Evilu najdeme,
jsou takzvané značky (<i>marks</i>). Nejedná se však o značky vytvářené
externími nástroji a ukládané většinou do souboru pojmenovaného tags, ale o
interní seznam pozic kurzoru (jakési &bdquo;špendlíky&ldquo; zapíchnuté do
důležitých míst) v&nbsp;souboru, na které se lze během editace vrátit, nebo na
něž se lze odkazovat. Podobnou funkcionalitu nabízí i mnohé další
programátorské textové editory, ovšem u nich se většinou jedná o maximálně
deset značek, zatímco ve Vimu může být značek mnohem více, protože každé značce
je přiřazeno jednopísmenné označení.</p>

<img src="https://i.iinfo.cz/images/325/evil1-13.png" class="image-337468" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 13: Zobrazení značek (marks, resp.&nbsp;přesněji řečeno
evil-marks).</i></p>

<p>V&nbsp;rámci jednoho souboru lze lokálně používat značky pojmenované malými
písmeny <strong>a</strong> až <strong>z</strong>, zatímco značky pojmenované
velkými písmeny <strong>A</strong> až <strong>Z</strong> si
&bdquo;pamatují&ldquo; i jméno souboru, v&nbsp;němž jsou definovány, tudíž se
jedná o značky globální. Speciální význam mají značky se jmény 0 až 9
(naplňované většinou při ukončování Vimu) a taktéž v některých případech velmi
užitečná značka <strong>"</strong>. Významy některých jmen značek (ve
skutečnosti jich je ještě mnohem více) jsou vypsány v&nbsp;následující
tabulce:</p>

<table>
<tr><th>Jméno značky</th><th>Definice značky</th><th>Význam</th></tr>
<tr><td>a-z</td><td>manuálně</td><td>značky lokální v&nbsp;rámci souboru</td></tr>
<tr><td>A-Z</td><td>manuálně</td><td>značky globální, ke značce je připojeno i jméno souboru</td></tr>
<tr><td>"</td><td>automaticky</td><td>pozice kurzoru při zavření bloku</td></tr>
<tr><td>^</td><td>automaticky</td><td>pozice kurzoru, na níž se kurzor naposledy nacházel ve vkládacím režimu</td></tr>
</table>

<p>Práce se značkami je v&nbsp;mnoha ohledech velmi jednoduchá, ostatně všechny
důležité příkazy najdete v&nbsp;následující tabulce:</p>

<table>
<tr><th>Příkaz</th><th>Význam</th></tr>
<tr><td>:marks</td><td>výpis všech právě aktivních značek</td></tr>
<tr><td>:marks značka</td><td>výpis vybrané značky</td></tr>
<tr><td>ma – mz</td><td>definice lokální značky a-z</td></tr>
<tr><td>mA – mZ</td><td>definice globální značky A-Z</td></tr>
<tr><td>'a – 'z</td><td>skok na řádek, kde je značka definovaná (jedná se o příkaz pohybu kurzoru!)</td></tr>
<tr><td>'A – 'Z</td><td>skok na soubor a řádek, kde je značka definovaná</td></tr>
<tr><td>`a – `z</td><td>skok na přesné místo, kde je značka definovaná (jedná se o příkaz pohybu kurzoru!)</td></tr>
<tr><td>'A – 'Z</td><td>skok na přesné místo (řádek i sloupec), kde je značka definovaná</td></tr>
</table>                                 



<p><a name="k09"></a></p>
<h2 id="k09">9. Uživatelská makra</h2>

<p>Ve Vimu je možné definovat uživatelská makra, jejichž definice se uloží do
zvoleného pracovního registru (definice makra obsahuje sekvenci stisknutých
kláves, takže zde s&nbsp;výhodou využijeme především operátory zkombinované
s&nbsp;příkazy pro pohyb v&nbsp;textu). Pro záznam makra se používá klávesová
zkratka <strong>q[registr]</strong>, například <strong>qa</strong>. Vim
v&nbsp;tomto případě na stavový řádek vypíše slovo <strong>recording</strong>.
V&nbsp;Emacsu je tomu nepatrně jinak, protože se namísto toho napíše
zpráva:</p>

<pre>
Defining kbd macro...
</pre>

<p>Ukončení záznamu makra je provedeno pouze klávesou <strong>q</strong>. Ve
Vimu se po zadání tohoto příkazu makro uloží do pracovního registru a slovo
<strong>recording</strong> ze stavového řádku zmizí. Emacs (samozřejmě přepnutý
do režimu evil) pracuje podobně, pouze navíc na stavový řádek vypíše
zprávu:</p>

<pre>
Keyboard macro defined
</pre>

<p>Uživatelská makra lze přeložit do maker běžných v&nbsp;Emacsu. Postup je
následující:</p>

<p>Makro vytvoříme běžným způsobem, tj.&nbsp;například <strong>qagU3wq</strong>
pro převod tří slov na velká písmena.  Následně zadáme příkaz:</p>

<pre>
:name-last-kbd-macro
</pre>

<p>a doplníme vhodné jméno makra, například &bdquo;upcase3words&ldquo;.</p>

<p>V&nbsp;posledním kroku si můžeme makro vypsat popř.&nbsp;vložit do souborů
<strong>init.el</strong> či <strong>.emacs</strong>:</p>

<pre>
:insert-kbd-macro
</pre>

<p>Měl by se vypsat tento text:</p>

<pre>
(fset 'upcase3words
   "gU3w")
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Další přizpůsobení Emacsu pro skalní Vimaře</h2>

<p>Výchozí konfigurace používaná balíčkem Evil samozřejmě nemusí vyhovovat všem
uživatelům. V&nbsp;navazujících kapitolách se zmíním o některých nastaveních,
která osobně považuji za užitečná, i když se chování Evil-u bude odlišovat od
standardního chování Vimu (přesněji řečeno od chování Vimu s&nbsp;nastavením
<strong>nocompatible</strong>, tj.&nbsp;Vimu ve chvíli, kdy se nesnaží být
zpětně kompatibilní s&nbsp;textovým editorem Vi). Podobná nastavení mám ovšem
provedena i v&nbsp;klasickém Vimu, takže se oba textové editory budou
z&nbsp;tohoto pohledu chovat velmi podobným způsobem.</p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Modifikace funkce klávesy <strong>Y</strong></h2>

<p>První nastavení se týká příkazu <strong>Y</strong>. Standardní chování
tohoto příkazu totiž znamená: vlož celý řádek (popř.&nbsp;větší množství řádků
při zadání čísla) do nějakého registru (při nezadání registru se použije
registr pojmenovaný "). To ovšem logicky koliduje s&nbsp;dalšími operátory,
zejména Change a Delete. Tyto operátory totiž existují v&nbsp;kombinacích
umožňujících jejich aplikaci buď na celý řádek (více řádků) nebo od pozice
kurzoru do konce řádku:</p>

<table>
<tr><th>Operace</th><th>Operátor</th><th>Celý řádek</th><th>Do konce řádku</th></tr>
<tr><td>Změna  </td><td>c</td><td>cc</td><td>C</td></tr>
<tr><td>Smazání</td><td>d</td><td>dd</td><td>D</td></tr>
<tr><td>Kopie  </td><td>y</td><td>yy/Y</td><td>&nbsp;</td></tr>
</table>

<p>Logičtější by bylo následující chování:</p>

<table>
<tr><th>Operace</th><th>Operátor</th><th>Celý řádek</th><th>Do konce řádku</th></tr>
<tr><td>Změna  </td><td>c</td><td>cc</td><td>C</td></tr>
<tr><td>Smazání</td><td>d</td><td>dd</td><td>D</td></tr>
<tr><td>Kopie  </td><td>y</td><td>yy</td><td>Y</td></tr>
</table>

<p>Ve skutečnosti lze takového chování dosáhnout snadno, a to následujícím příkazem, který si můžeme přidat do souboru <strong>.emacs</strong>:</p>

<pre>
(setq evil-want-Y-yank-to-eol t)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Balíček <strong>evil-numbers</strong></h2>

<p>Jednou z&nbsp;užitečných vlastností textového editoru Vim je možnost
používat (v&nbsp;normálním režimu) klávesové zkratky <strong>Ctrl+A</strong> a
<strong>Ctrl+X</strong> pro zvýšení popř.&nbsp;pro snížení číselné hodnoty,
která je zapsána na pozici kurzoru nebo kdekoli ZA pozicí kurzoru. Chování
těchto klávesových zkratek je intuitivní a může se hodit například při tvorbě
různých tabulek, seznamů apod.:</p>

<ul>

<li>Po stisku <strong>Ctrl+A</strong> nebo <strong>Ctrl+X</strong> Vim zjistí,
kde se (napravo od kurzoru) nachází číselná hodnota.</li>

<li>Následně se detekuje typ hodnoty (decimální číslo bez prefixu,
hexadecimální číslo s&nbsp;prefixem 0x, osmičková hodnota s&nbsp;prefixem
0).</li>

<li>Tato hodnota se zvýší nebo sníží o jedničku. Popř.&nbsp;pokud je před
klávesovou zkratkou <strong>Ctrl+A</strong> nebo <strong>Ctrl+X</strong> použit
počet opakování, bude se přičítat nebo odečítat uživatelem zadaná hodnota větší
než 1.</li>

</ul>

<p><div class="rs-tip-major">Poznámka: někdy tyto zkratky používám pro pouhý
doskok na nejbližší číselnou hodnotu: <strong>Ctrl+A, Ctrl+X</strong> (i když
je příkaz typu <strong>f0</strong> alespoň na US/GB klávesnici
rychlejší).</div></p>

<p>Toto chování je samozřejmě možné doprogramovat i do Emacsu; popř.&nbsp;je
možné použít vhodný balíček, který toto naprogramování již obsahuje. Tento
balíček skutečně existuje a jmenuje se <strong>evil-numbers</strong>.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Instalace a konfigurace balíčku <strong>evil-numbers</strong></h2>

<p>Balíček <strong>evil-numbers</strong> se instaluje zcela totožným způsobem,
jako jakýkoli jiný balíček:</p>

<img src="https://i.iinfo.cz/images/325/evil1-14.png" class="image-337469" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 14: Správce balíčků MELPA již máme povolen, takže po zadání
příkazu <strong>M-x list-packages</strong> uvidíme i balíček
<strong>evil-numbers</strong>.</i></p>

<p>Po instalaci balíčku <strong>evil-numbers</strong> se zdánlivě nic
nezměnilo, protože je nutné provést alespoň minimální konfiguraci. Ta spočívá
v&nbsp;načtení balíčku, ideálně při startu Emacsu a dále v&nbsp;namapování
funkcí <strong>evil-numbers/inc-at-pt</strong> a
<strong>evil-numbers/dec-at-pt</strong> na vhodné klávesové zkratky. V&nbsp;mém
případě je provedeno nastavení odpovídající Vimu, tj.&nbsp;namapování kláves
Ctrl+A a Ctrl+X v&nbsp;normálním režimu na obě zmíněné funkce:</p>

<pre>
(define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
(define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
</pre>

<img src="https://i.iinfo.cz/images/325/evil1-15.png" class="image-337470" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 15: Nastavení si můžete jednoduše vyzkoušet ve scratch bufferu
(viz klávesové zkratky, které naleznete v&nbsp;menu Lisp-Interaction).</i></p>

<p>Samozřejmě je možné klávesové zkratky uchovat i pro další spuštění Emacsu,
například následujícími příkazy vloženými do souboru
<strong>.emacs</strong>:</p>

<pre>
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
&nbsp;
(package-initialize)
&nbsp;
(require 'evil)
(require 'evil-numbers)
&nbsp;
(evil-mode 1)
(define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
(define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Ostatní užitečná nastavení</h2>

<p>Mezi další užitečná nastavení, která je možné provést typicky při startu a
inicializaci Emacsu, patří:</p>

<pre>
(setq evil-move-beyond-eol t)
</pre>

<p>Při tomto nastavení je možné v&nbsp;normálním stavu přesunout textový kurzor
ZA poslední znak na řádku. To může být užitečné například pro ty uživatele,
kterým vadí odlišné chování některých příkazů nebo maker na konci řádku (navíc
se jedná o chování odpovídající klasickému Emacsu). Výchozího chování
odpovídajícího Vimu dosáhnete příkazem:</p>

<pre>
(setq evil-move-beyond-eol nil)
</pre>

<p>Nastavení:</p>

<pre>
(setq evil-backspace-join-lines t)
</pre>

<p>umožňuje, aby například klávesová zkratka <strong>C-w (Ctrl+W)</strong> ve
stavu zápisu textu dokázala mazat slova i na předchozích řádcích. Toto chování
(které vlastně vůbec nesouvisí s&nbsp;klávesou Backspace) vypnete opačným
nastavením:</p>

<pre>
(setq evil-backspace-join-lines nil)
</pre>

<p>Další nastavení se týká příkazů <strong>f</strong> a <strong>t</strong>
sloužících pro vyhledávání znaku a skok na tento znak. Je možné přepínat mezi
vyhledáváním na jediném řádku, což odpovídá Vimu:</p>

<pre>
(setq evil-cross-line nil)
</pre>

<p>A vyhledáváním kdekoli (to ovšem může mít vliv na některá makra):</p>

<pre>
(setq evil-cross-line t)
</pre>

<p>Konečně poslední užitečná konfigurační volba:</p>

<pre>
(setq evil-symbol-word-search t)
(setq evil-symbol-word-search nil)
</pre>

<p>se používá pro přepínání mezi režimem vyhledávání slov nebo celých
identifikátorů pomocí příkazů <strong>*</strong> a <strong>#</strong>, což má
vliv především ve chvíli, kdy se pracuje se zdrojovými kódy. Podívejme se, jaký
vliv má tato volba na vyhledávání:</p>

<img src="https://i.iinfo.cz/images/325/evil1-16.png" class="image-337471" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 16: Za identifikátor je nyní považován text s&nbsp;pomlčkami
popř.&nbsp;dalšími speciálními znaky.</i></p>

<img src="https://i.iinfo.cz/images/325/evil1-17.png" class="image-337472" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 17: Za identifikátor je nyní považováno jen jedno slovo.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Mapování kláves ve Vimu</h2>

<p>Jeden z&nbsp;poměrně velkých rozdílů mezi klasickým <i>Vimem</i> a kombinací <i>Emacs+Evil</i> spočívá v&nbsp;odlišném přístupu k&nbsp;mapování kláves. Připomeňme si, že ve Vimu je možné použít například následující příkazy, které do tohoto editoru přidají další klávesové zkratky:</p>

<pre>
&lt;i&gt;" uložení souboru při stisku klávesy F2&lt;/i&gt;
&lt;i&gt;" (ukončující entita &lt;cr&gt; zajišťuje automatické spuštění&lt;/i&gt;
&lt;i&gt;" příkazu bez nutnosti stlačovat Enter)&lt;/i&gt;
:map &lt;F2&gt; :w&lt;cr&gt;
&nbsp;
<i>" zavolání externího příkazu make při stisku klávesy F9</i>
:map &lt;F9&gt; :!make&lt;cr&gt;
&nbsp;
<i>" kompilace právě editovaného souboru při stisku klávesy F7</i>
:map &lt;F7&gt; :!gcc -c %&lt;cr&gt;
&nbsp;
<i>" posun jednoho řádku doleva či doprava pomocí</i>
<i>" klávesových zkratek Tab a Shift+Tab</i>
:map &lt;Tab&gt; &gt;&gt;
:map &lt;S-Tab&gt; &lt;&lt;
</pre>

<p><div class="rs-tip-major">Poznámka: sice je to dosti neobvyklé, ale znak "
se ve Vim Scriptu používá pro zápis komentáře.</div></p>

<p>Kromě vytváření nových příkazů je možné měnit i příkazy již existující.
Například lze zjednodušit posun kurzoru nahoru a dolů v&nbsp;dlouhém textovém
řádku (rozděleném na obrazovce na více řádků volbou <strong>:set wrap</strong>)
pomocí těchto mapování:</p>

<pre>
:map k gk
:map j gj
</pre>

<p>Předchozí mapování klávesových zkratek pracovalo v&nbsp;normálním režimu
(resp.&nbsp;stavu v&nbsp;Emacsu), ovšem v&nbsp;případě potřeby je možné
přiřazovat význam klávesám v&nbsp;režimu vkládacím příkazem
<strong>:imap</strong>:</p>

<pre>
<i>" pohyb kurzoru ve vkládacím režimu</i>
<i>" na začátek a konec řádku</i>
:imap &lt;C-A&gt;      &lt;C-O&gt;g0
:imap &lt;C-E&gt;      &lt;C-O&gt;g$
&nbsp;
<i>" nové příkazy určené pro</i>
<i>" mazání znaků ve vkládacím režimu</i>
:imap &lt;C-Y&gt;      &lt;C-O&gt;dd
:imap &lt;C-Q&gt;      &lt;C-O&gt;D
:imap &lt;C-T&gt;      &lt;C-O&gt;dw
:imap &lt;C-G&gt;      &lt;Del&gt;
</pre>

<p>Podobným příkazem <strong>:vmap</strong> je možné vytvářet nové klávesové
zkratky pro vizuální režim, tj.&nbsp;pro režim, v&nbsp;němž se vybírá textová
oblast:</p>

<pre>
<i>" posun vybraných řádků doleva či doprava pomocí</i>
<i>" klávesových zkratek Tab a Shift+Tab</i>
<i>" s obnovením výběru (výběr se tedy nezruší!)</i>
:vmap &lt;Tab&gt; &gt;gv
:vmap &lt;S-Tab&gt; &lt;gv
</pre>

<p><div class="rs-tip-major">Povšimněte si, že se v&nbsp;předchozích příkladech
používá klávesová zkratka <strong>Ctrl+O</strong> zajišťující přepnutí
z&nbsp;režimu vkládacího či přepisovacího do režimu normálního, ovšem pouze pro
provedení jednoho příkazu.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Mapování kláves v&nbsp;Emacsu</h2>

<p>V&nbsp;Emacsu se namísto různých variant příkazu <strong>:map</strong>
používá LISpovská funkce nazvaná <strong>define-key</strong>. Nápovědu
k&nbsp;této funkci získáme snadno:</p>

<pre>
C-h f define-key
</pre>

<pre>
define-key is a built-in function in ‘C source code’.
&nbsp;
(define-key KEYMAP KEY DEF)
&nbsp;
In KEYMAP, define key sequence KEY as DEF.
KEYMAP is a keymap.
&nbsp;
KEY is a string or a vector of symbols and characters, representing a
sequence of keystrokes and events.  Non-ASCII characters with codes
above 127 (such as ISO Latin-1) can be represented by vectors.
Two types of vector have special meanings:
 [remap COMMAND] remaps any key binding for COMMAND.
 [t] creates a default definition, which applies to any event with no
    other definition in KEYMAP.
</pre>

<p>Důležitý je hned první parametr <strong>MAP</strong>, který (velmi
zjednodušeně řečeno) určuje tabulku s&nbsp;převody
klávesa:akce-provedená-editorem. Ve chvíli, kdy je aktivní režim Evil, se
používají tyto tabulky:</p>

<table>
<tr><th>Tabulka/mapa</th><th>Význam</th></tr>
<tr><td>evil-normal-state-map</td><td>klávesy funkční v&nbsp;normálním stavu (výchozí stav Vimu i Evilu)</td></tr>
<tr><td>evil-window-map</td><td>klávesy funkční po stisku C-w</td></tr>
<tr><td>evil-motion-state-map</td><td>všechny posuny kurzoru, včetně počitadla posunů (3w apod.)</td></tr>
<tr><td>evil-outer-text-objects-map</td><td>výběr textového objektu (slovo, věta, odstavec, blok)</td></tr>
<tr><td>evil-visual-state-map</td><td>stav vizuálního výběru bloku</td></tr>
<tr><td>evil-operator-state-map</td><td>stav, ve kterém již byla vybrána operace (c, d, y) a čeká se na zápis operátoru</td></tr>
<tr><td>evil-insert-state-map</td><td>stav zápisu textu (ve Vimu klasický insert mode)</td></tr>
<tr><td>evil-replace-state-ma</td><td>stav přepisu textu (ve Vimu klasický replace mode)</td></tr>
</table>

<p>Podívejme se nyní na jednoduchý příklad. Budeme chtít, aby se po stisku
velkého Z prohodily dva sousední znaky v&nbsp;textu (na levém znaku je kurzor).
Ve Vimu to je snadné:</p>

<pre>
:map Z xp
</pre>

<p>V&nbsp;Emacsu můžeme pro zhruba stejnou operaci zavolat funkci
<strong>transpose-chars</strong>, takže mapování vytvoříme takto:</p>

<pre>
(define-key evil-normal-state-map "Z" 'transpose-chars)
</pre>

<p>Oba dva příkazy (Vimovský i Evilovský) budou funkční v&nbsp;normálním
stavu.</p>

<img src="https://i.iinfo.cz/images/325/evil1-18.png" class="image-337473" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 18: Namapování funkce <strong>transpose-chars</strong> na klávesu
<strong>Z</strong>.</i></p>

<p>V&nbsp;některých situacích se však může hodit použít i &bdquo;vimovský
přístup&ldquo;, v&nbsp;němž je nějaká klávesa (například ono velké Z) mapována
na sekvenci znaků zapisovaných na klávesnici (v&nbsp;našem případě xp).
V&nbsp;Emacsu samozřejmě prakticky nic není nemožné :-), takže je v&nbsp;tomto
případě možné použít zápis:</p>

<pre>
(define-key evil-normal-state-map "Z" (kbd "xp"))
</pre>

<img src="https://i.iinfo.cz/images/325/evil1-19.png" class="image-337474" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 19: Namapování sekvence znaků &bdquo;xp&ldquo; na klávesu
<strong>Y</strong>.</i></p>

<p>Používáme zde funkci <strong>kbd</strong>:</p>

<pre>
kbd is a compiled Lisp function in ‘subr.el’.
&nbsp;
(kbd KEYS)
&nbsp;
Convert KEYS to the internal Emacs key representation.
KEYS should be a string in the format returned by commands such
as ‘C-h k’ (‘describe-key’).
This is the same format used for saving keyboard macros (see
‘edmacro-mode’).
</pre>

<p><div class="rs-tip-major">Poznámka: podobné příkazy si můžete snadno naživo
otestovat v&nbsp;bufferu *scratch*, v&nbsp;němž po zápisu celého příkazu
použijte klávesovou zkratku C-M-x neboli Ctrl+Alt+X. Příkaz, zde konkrétně
zavolání funkce <strong>define-key</strong>, se vykoná a na stavový řádek se
vypíše návratová hodnota (ta nás ovšem nemusí příliš zajímat). Ihned poté by
měla být nová klávesová zkratka aktivní.</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Evil a Elisp</h2>

<p><a href="#k16">V&nbsp;předchozí kapitole</a> jsme se již nepatrně dotkli
jedné z&nbsp;nejdůležitějších technologií Emacsu. Jedná se o dialekt
programovacího jazyka LISP, který je skutečně s&nbsp;Emacsem takřka
neoddělitelně spojen, a to mj. i proto, že dnes pravděpodobně nejrozšířenější
varianta Emacsu &ndash; GNU Emacs &ndash; je z&nbsp;velké části naprogramována
v&nbsp;Emacs LISPu (Elispu). Volba LISPu vlastně není ani příliš překvapivá,
protože se jednalo o programovací jazyk, který byl v&nbsp;polovině sedmdesátých
let minulého století v&nbsp;AI Labu (kde první varianty Emacsu &ndash; což byla
původně makra nad editorem TECO &ndash; vznikaly) poměrně intenzivně používán;
později se dokonce někteří lidé z&nbsp;AI Labu podíleli i na konstrukci
počítačů s&nbsp;LISPem. Jednalo se o takzvané <i>Lisp Machines</i> vyráběné
například společností Symbolics, LMI Lambda či Xerox.</p>

<a href="https://www.root.cz/obrazek/220373/"><img src="http://i.iinfo.cz/images/627/editory5-2-prev.png" class="image-220373" alt="ZMACS" height="270" width="294"></a>
<p><i>Obrázek 20: ZMACS je pokračovatelem editoru ZWEI naprogramovaného v LISPu
(autor screenshotu: Phil.grenet).</i></p>

<p>Dnes se ještě (alespoň prozatím) nebudeme zabývat konkrétními možnostmi
nabízenými Emacs LISPem, ovšem ukážeme si některé základní funkce, způsob
vytváření uživatelských funkcí, jejich spouštění atd. Prakticky všechny operace
budou prováděny v&nbsp;bufferu *scratch*, který má tři pro nás užitečné
vlastnosti:</p>

<ol>

<li>Je automaticky otevřen po spuštění Emacsu (pokud si neprovedete úpravu
konfigurace).</li>

<li>Dovoluje zapisované funkce přímo spouštět (opět lze přenastavit, ale
spouštění/vyhodnocování LISPovských funkcí je výchozí chování, protože buffer
používá režim <strong>lisp-interaction-mode</strong>).</li>

<li>Navíc pokud něco pokazíme, tak se obsah tohoto bufferu při ukončení Emacsu
ztratí, takže Emacs gentlemansky přejde všechny možné chyby.</li>

</ol>

<img src="https://i.iinfo.cz/images/325/evil1-20.png" class="image-337475" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 21: Čtení na dlouhé zimní večery aneb dokumentace k&nbsp;Emacs
LISPu.</i></p>

<p><a href="#k11">V&nbsp;jedenácté kapitole</a> jsme si řekli, jakým způsobem
je možné modifikovat funkci klávesy <strong>Y</strong>. Tato kapitola byla
poměrně podrobná, což není náhoda, protože se nyní pokusíme funkci klávesy
<strong>Y</strong> sami doprogramovat. Nebude se v&nbsp;žádném případě jednat o
zcela korektní chování, ovšem seznámíme se s&nbsp;koncepcí značek
(<i>mark</i>), kill-ringu, pojmu aktivního bodu (<i>point</i>) a taktéž
s&nbsp;vlastním zápisem funkcí v&nbsp;Emacs LISPu.</p>

<p>Nejprve si vyzkoušejme jednodušší příklad &ndash; vytvoření příkazu pro
smazání textu do konce řádku, což je typicky provedeno klávesovou zkratkou
<strong>D</strong>. Očekávané chování klávesy <strong>D</strong> by mělo být
&bdquo;smaž text od pozice kurzoru do konce řádku a vlož tento text do
registru&ldquo;. Podobná funkce již v&nbsp;Emacsu ve skutečnosti existuje a
jmenuje se <strong>kill-line</strong> (nenechte se zmást jejím jménem, skutečně
maže text od pozice kurzoru); standardně je namapována na klávesovou zkratku
<strong>C-k</strong>. Můžeme tedy klávese <strong>D</strong> tuto funkci
přiřadit, a to následujícím způsobem:</p>

<pre>
(define-key evil-normal-state-map "D" 'kill-line)
</pre>

<p>Ovšem můžeme si zvolit i složitější způsob. Smazání textu do konce řádku
(s&nbsp;uložením textu do kill ringu) lze v&nbsp;Emacsu provést i takto:</p>

<pre>
C-SPC C-e C-w
</pre>

<p>Což znamená postupné provedení těchto operací:</p>

<ol>
<li>Vložení značky (<i>mark</i>) na pozici kurzoru.</li>
<li>Skok kurzorem na konec řádku.</li>
<li>Smazání textu mezi značkou a kurzorem s&nbsp;jeho vložením do kill ringu.</li>
</ol>

<p>Všechny tři výše zmíněné kroky jsou implementovány v&nbsp;odpovídajících
(interaktivních) funkcích nazvaných <strong>set-mark-command</strong>,
<strong>move-end-of-line</strong> a <strong>kill-region</strong>, takže je
možné vytvořit funkci navázanou na klávesovou zkratku, v&nbsp;níž se postupně
všechny tři uvedené funkce budou volat.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Využití funkcí <strong>evil-*</strong></h2>

<p>Ve skutečnosti však bude chování odlišné od klávesové zkratky
<strong>D</strong>, a to z&nbsp;toho důvodu, že v&nbsp;režimu Evil se smazaný
text ukládá do bufferů. Podobně tomu bude v&nbsp;případě pokusu o definici
funkce namapované na klávesu <strong>Y</strong>. Můžeme zde ovšem využít ještě
jednu možnost &ndash; zavolat funkce naprogramované v&nbsp;Emacs LISPu, které
pro nás připravili tvůrci modulu Evil. Konkrétně se bude jednat o funkci
<strong>evil-yank</strong>:</p>

<img src="https://i.iinfo.cz/images/325/evil1-21.png" class="image-337476" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 22: Nápověda k&nbsp;funkci <strong>evil-yank</strong>.</i></p>

<p>Z&nbsp;nápovědy je možné vyčíst, že tato funkce vyžaduje minimálně dva
parametry udávající začátek a konec textu, který se má uložit do registru.
Začátek textu je jednoduchý &ndash; zavoláme funkci <strong>point</strong>
vracející aktuální souřadnice kurzoru:</p>

<img src="https://i.iinfo.cz/images/325/evil1-22.png" class="image-337477" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 23: Nápověda k&nbsp;funkci <strong>point</strong> vracející
aktuální souřadnice kurzoru.</i></p>

<p>Konec oblasti ukládané do registru leží na konci řádku, takže (po delším
hledání) můžeme zjistit, že lze použít funkci nazvanou
<strong>line-end-position</strong>, která se v&nbsp;nejjednodušším případě volá
bez parametrů:</p>

<img src="https://i.iinfo.cz/images/325/evil1-23.png" class="image-337478" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 24: Nápověda k&nbsp;funkci <strong>line-end-position</strong>
vracející souřadnici na konci textového řádku.</i></p>

<p>Celý příkaz namapovaný na klávesu <strong>Y</strong> bude vypadat
následovně:</p>

<img src="https://i.iinfo.cz/images/325/evil1-24.png" class="image-337479" alt="&#160;" width="754" height="741" />
<p><i>Obrázek 25: Výsledný tvar příkazu namapovaného na klávesu
<strong>Y</strong>.</i></p>

<p>Proč musí tato funkce/příkaz vypadat tak, jak je zapsána (včetně
<strong>interactive</strong>) si řekneme příště.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Obsah navazujícího článku &ndash; projekt <strong>Spacemacs</strong></h2>

<p>V&nbsp;dalším článku na podobné téma si nejdříve popíšeme další moduly
používané společně s&nbsp;modulem <strong>evil</strong>. Jedná se například o
pluginy umožňující komentování označeného bloku kódu, plugin nahrazující <a
href="https://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-5-cast/#k03">Vimovský
modul Surround</a> atd. Ve druhé části dalšího článku si představíme projekt <a
href="http://spacemacs.org/">Spacemacs</a>, který je z&nbsp;velké části
naprogramovaný právě v&nbsp;Emacs Lispu a ukazuje možnosti tohoto jazyka a
samozřejmě i &bdquo;enginu&ldquo;, nad kterým je tento jazyk postaven.</p>

<img src="https://i.iinfo.cz/images/325/evil1-25.png" class="image-337480" alt="&#160;" width="400" height="400" />
<p><i>Obrázek 26: Logo projektu Spacemacs.</i></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Evil (Emacs Wiki)<br />
<a href="https://www.emacswiki.org/emacs/Evil">https://www.emacswiki.org/emacs/Evil</a>
</li>

<li>Evil (na GitHubu)<br />
<a href="https://github.com/emacs-evil/evil">https://github.com/emacs-evil/evil</a>
</li>

<li>Evil (na stránkách repositáře MELPA)<br />
<a href="https://melpa.org/#/evil">https://melpa.org/#/evil</a>
</li>

<li>Evil Mode: How I Switched From VIM to Emacs<br />
<a href="https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html">https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html</a>
</li>

<li>GNU Emacs (home page)<br />
<a href="https://www.gnu.org/software/emacs/">https://www.gnu.org/software/emacs/</a>
</li>

<li>GNU Emacs (texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?GnuEmacs">http://texteditors.org/cgi-bin/wiki.pl?GnuEmacs</a>
</li>

<li>An Introduction To Using GDB Under Emacs<br />
<a href="http://tedlab.mit.edu/~dr/gdbintro.html">http://tedlab.mit.edu/~dr/gdbintro.html</a>
</li>

<li>An Introduction to Programming in Emacs Lisp<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html</a>
</li>

<li>27.6 Running Debuggers Under Emacs<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html</a>
</li>

<li>GdbMode<br />
<a href="http://www.emacswiki.org/emacs/GdbMode">http://www.emacswiki.org/emacs/GdbMode</a>
</li>

<li>Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Emacs">https://en.wikipedia.org/wiki/Emacs</a>
</li>

<li>Emacs timeline<br />
<a href="http://www.jwz.org/doc/emacs-timeline.html">http://www.jwz.org/doc/emacs-timeline.html</a>
</li>

<li>Emacs Text Editors Family<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?EmacsFamily">http://texteditors.org/cgi-bin/wiki.pl?EmacsFamily</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse (část 2: vyhledávání a nahrazování textu)<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/</a>
</li>

<li>Emacs/Evil-mode - A basic reference to using evil mode in Emacs<br />
<a href="http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet">http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet</a>
</li>

<li>From Vim to Emacs+Evil chaotic migration guide<br />
<a href="https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/">https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/</a>
</li>

<li>Introduction to evil-mode {video)<br />
<a href="https://www.youtube.com/watch?v=PeVQwYUxYEg">https://www.youtube.com/watch?v=PeVQwYUxYEg</a>
</li>

<li>EINE (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/EINE">http://www.emacswiki.org/emacs/EINE</a>
</li>

<li>EINE (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?EINE">http://texteditors.org/cgi-bin/wiki.pl?EINE</a>
</li>

<li>ZWEI (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/ZWEI">http://www.emacswiki.org/emacs/ZWEI</a>
</li>

<li>ZWEI (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?ZWEI">http://texteditors.org/cgi-bin/wiki.pl?ZWEI</a>
</li>

<li>Zmacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Zmacs">https://en.wikipedia.org/wiki/Zmacs</a>
</li>

<li>Zmacs (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?Zmacs">http://texteditors.org/cgi-bin/wiki.pl?Zmacs</a>
</li>

<li>TecoEmacs (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/TecoEmacs">http://www.emacswiki.org/emacs/TecoEmacs</a>
</li>

<li>Micro Emacs<br />
<a href="http://www.emacswiki.org/emacs/MicroEmacs">http://www.emacswiki.org/emacs/MicroEmacs</a>
</li>

<li>Micro Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MicroEMACS">https://en.wikipedia.org/wiki/MicroEMACS</a>
</li>

<li>EmacsHistory<br />
<a href="http://www.emacswiki.org/emacs/EmacsHistory">http://www.emacswiki.org/emacs/EmacsHistory</a>
</li>

<li>Seznam editorů s ovládáním podobným Emacsu či kompatibilních s příkazy Emacsu<br />
<a href="http://www.finseth.com/emacs.html">http://www.finseth.com/emacs.html</a>
</li>

<li>evil-numbers<br />
<a href="https://github.com/cofi/evil-numbers">https://github.com/cofi/evil-numbers</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (1.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (2.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v editorech Emacs a Vim<br />
<a href="https://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">https://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Org mode<br />
<a href="https://orgmode.org/">https://orgmode.org/</a>
</li>

<li>The Org Manual<br />
<a href="https://orgmode.org/manual/index.html">https://orgmode.org/manual/index.html</a>
</li>

<li>Kakoune (modální textový editor)<br />
<a href="http://kakoune.org/">http://kakoune.org/</a>
</li>

<li>Vim-style keybinding in Emacs/Evil-mode<br />
<a href="https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8">https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8</a>
</li>

<li>Emacs - jak začít<br />
<a href="http://www.abclinuxu.cz/clanky/navody/emacs-jak-zacit">http://www.abclinuxu.cz/clanky/navody/emacs-jak-zacit</a>
</li>

<li>Programovací jazyk LISP a LISP machines<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/">https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/</a>
</li>

<li>Evil-surround<br />
<a href="https://github.com/emacs-evil/evil-surround">https://github.com/emacs-evil/evil-surround</a>
</li>

<li>Spacemacs<br />
<a href="http://spacemacs.org/">http://spacemacs.org/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

