<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Funkce <strong>-filter</strong></a></p>
<p><a href="#k03">*** 3. Makro <strong>-remove</strong></a></p>
<p><a href="#k04">*** 4. Odstranění konkrétních prvků pomocí <strong>-remove-item</strong></a></p>
<p><a href="#k05">*** 5. Odstranění prvních či posledních <i>n</i> prvků ze seznamu</a></p>
<p><a href="#k06">*** 6. Získání podseznamu: <strong>take</strong>, <strong>take-last</strong>, <strong>drop</strong>, <strong>drop-last</strong></a></p>
<p><a href="#k07">*** 7. Získání sekvence prvků ze seznamu na základě podmínky: <strong>take-while</strong> a <strong>drop-while</strong></a></p>
<p><a href="#k08">*** 8. Funkce <strong>-concat</strong> a <strong>-flatten</strong></a></p>
<p><a href="#k09">*** 9. Funkce <strong>-flatten-n</strong></a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Literatura</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Funkce <strong>-filter</strong></h2>

<pre>
<strong>(package-initialize)</strong>
<strong>(require 'dash)</strong>
<strong>(require 'cl-lib)</strong>
&nbsp;
<strong>(setq numbers (number-sequence -10 10))</strong>
&nbsp;
<strong>(print numbers)</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (-filter 'cl-evenp numbers))</strong>
&nbsp;
(-10 -8 -6 -4 -2 0 2 4 6 8 10)
</pre>

<pre>
<strong>(print (-filter 'cl-oddp numbers))</strong>
&nbsp;
(-9 -7 -5 -3 -1 1 3 5 7 9)
</pre>

<pre>
<strong>(print (-filter (lambda (n) (zerop (% n 3))) numbers))</strong>
&nbsp;
(-9 -6 -3 0 3 6 9)
</pre>

<pre>
<strong>(print (--filter (zerop (% it 3)) numbers))</strong>
&nbsp;
(-9 -6 -3 0 3 6 9)
</pre>

<pre>
<strong>(defun positive?</strong>
  <strong>(n)</strong>
  <strong>(&gt; n 0))</strong>
&nbsp;
<strong>(print (-filter 'positive? numbers))</strong>
&nbsp;
(1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (-filter (lambda (n) (and (cl-oddp n) (positive? n))) numbers))</strong>
&nbsp;
(1 3 5 7 9)
</pre>

<pre>
<strong>(print (-filter (lambda (n) (or (cl-oddp n) (positive? n))) numbers))</strong>
&nbsp;
(-9 -7 -5 -3 -1 1 2 3 4 5 6 7 8 9 10)
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Makro <strong>-remove</strong></h2>

<pre>
<strong>(package-initialize)</strong>
<strong>(require 'dash)</strong>
<strong>(require 'cl-lib)</strong>
&nbsp;
<strong>(setq numbers (number-sequence -10 10))</strong>
&nbsp;
<strong>(print numbers)</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (-remove 'cl-evenp numbers))</strong>
&nbsp;
(-9 -7 -5 -3 -1 1 3 5 7 9)
</pre>

<pre>
<strong>(print (-remove 'cl-oddp numbers))</strong>
&nbsp;
(-10 -8 -6 -4 -2 0 2 4 6 8 10)
</pre>

<pre>
<strong>(print (-remove (lambda (n) (zerop (% n 3))) numbers))</strong>
&nbsp;
(-10 -8 -7 -5 -4 -2 -1 1 2 4 5 7 8 10)
</pre>

<pre>
<strong>(print (--remove (zerop (% it 3)) numbers))</strong>
&nbsp;
(-10 -8 -7 -5 -4 -2 -1 1 2 4 5 7 8 10)
</pre>

<pre>
<strong>(defun positive?</strong>
  <strong>(n)</strong>
  <strong>(&gt; n 0))</strong>
&nbsp;
<strong>(print (-remove 'positive? numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0)
</pre>

<pre>
<strong>(print (-remove (lambda (n) (and (cl-oddp n) (positive? n))) numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 2 4 6 8 10)
</pre>

<pre>
<strong>(print (-remove (lambda (n) (or (cl-oddp n) (positive? n))) numbers))</strong>
&nbsp;
(-10 -8 -6 -4 -2 0)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Odstranění konkrétních prvků pomocí <strong>-remove-item</strong></h2>

<pre>
<strong>(package-initialize)</strong>
<strong>(require 'dash)</strong>
<strong>(require 'cl-lib)</strong>
&nbsp;
<strong>(setq numbers (number-sequence -10 10))</strong>
&nbsp;
<strong>(print numbers)</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (-remove-item 0 numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (-remove-item 42 numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(setq numbers '(0 0 0 1 1 1 2 2 2))</strong>
<strong>(print numbers)</strong>
&nbsp;
(0 0 0 1 1 1 2 2 2)
</pre>

<pre>
<strong>(print (-remove-item 0 numbers))</strong>
&nbsp;
(1 1 1 2 2 2)
</pre>

<pre>
<strong>(print (-remove-item 1 numbers))</strong>
&nbsp;
(0 0 0 2 2 2)
</pre>

<pre>
<strong>(print (-remove-item 2 numbers))</strong>
&nbsp;
(0 0 0 1 1 1)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Odstranění prvních či posledních <i>n</i> prvků ze seznamu</h2>

(package-initialize)
(require 'dash)
(require 'cl-lib)

(setq numbers (number-sequence -10 10))

<pre>
<strong>(print numbers)</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (-remove-first 'cl-evenp numbers))</strong>
&nbsp;
(-9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (-remove-first 'cl-oddp numbers))</strong>
&nbsp;
(-10 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (-remove-first (lambda (n) (zerop (% n 3))) numbers))</strong>
&nbsp;
(-10 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (--remove-first (zerop (% it 3)) numbers))</strong>
&nbsp;
(-10 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (--remove-first (&gt; 0 it) numbers))</strong>
&nbsp;
(-9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (--remove-first (&lt; 0 it) numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 2 3 4 5 6 7 8 9 10)
</pre>


(package-initialize)
(require 'dash)
(require 'cl-lib)

(setq numbers (number-sequence -10 10))

<pre>
<strong>(print numbers)</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (-remove-last 'cl-evenp numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9)
</pre>

<pre>
<strong>(print (-remove-last 'cl-oddp numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 10)
</pre>

<pre>
<strong>(print (-remove-last (lambda (n) (zerop (% n 3))) numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 10)
</pre>

<pre>
<strong>(print (--remove-last (zerop (% it 3)) numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 10)
</pre>

<pre>
<strong>(print (--remove-last (&gt; 0 it) numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (--remove-last (&lt; 0 it) numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Získání podseznamu: <strong>take</strong>, <strong>take-last</strong>, <strong>drop</strong>, <strong>drop-last</strong></h2>

<pre>
(package-initialize)
(require 'dash)
(require 'cl-lib)
&nbsp;
(setq numbers (number-sequence 0 20))
</pre>

<pre>
<strong>(print numbers)</strong>
&nbsp;
(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
</pre>

<pre>
<strong>(print (-take 5 numbers))</strong>
&nbsp;
(0 1 2 3 4)
</pre>

<pre>
<strong>(print (-take 100 numbers))</strong>
&nbsp;
(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
</pre>

<pre>
<strong>(print (-take-last 5 numbers))</strong>
&nbsp;
(16 17 18 19 20)
</pre>

<pre>
<strong>(print (-take-last 100 numbers))</strong>
&nbsp;
(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
</pre>

(setq numbers (number-sequence 0 20))

<pre>
<strong>(print numbers)</strong>
&nbsp;
(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
</pre>

<pre>
<strong>(print (-drop 5 numbers))</strong>
&nbsp;
(5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
</pre>

<pre>
<strong>(print (-drop 100 numbers))</strong>
&nbsp;
nil
</pre>

<pre>
<strong>(print (-drop-last 5 numbers))</strong>
&nbsp;
(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
</pre>

<pre>
<strong>(print (-drop-last 100 numbers))</strong>
&nbsp;
nil
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Získání sekvence prvků ze seznamu na základě podmínky: <strong>take-while</strong> a <strong>drop-while</strong></h2>

<pre>
<strong>(setq numbers (number-sequence -10 10))</strong>
&nbsp;
<strong>(print numbers)</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (-take-while (lambda (n) (&lt; n 0)) numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1)
</pre>

<pre>
<strong>(print (--take-while (&lt; it 0) numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1)
</pre>

<pre>
<strong>(print (--take-while (&gt; it 0) numbers))</strong>
&nbsp;
nil
</pre>

<pre>
<strong>(print (--take-while t numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>



(setq numbers (number-sequence -10 10))

<pre>
<strong>(print numbers)</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (-drop-while (lambda (n) (&lt; n 0)) numbers))</strong>
&nbsp;
(0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (--drop-while (&lt; it 0) numbers))</strong>
&nbsp;
(0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (--drop-while (&gt; it 0) numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>

<pre>
<strong>(print (--drop-while t numbers))</strong>
&nbsp;
nil
</pre>

<pre>
<strong>(print (--drop-while nil numbers))</strong>
&nbsp;
(-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Funkce <strong>-concat</strong> a <strong>-flatten</strong></h2>

<pre>
(setq l1 '(1 2 3))
(setq l2 '(3 4 5))
(setq l3 '(7 8 9))
</pre>

<pre>
<strong>(print (-concat l1 l2 l3))</strong>
&nbsp;
(1 2 3 3 4 5 7 8 9)
</pre>

<pre>
(setq l1 '(1 (2 3)))
(setq l2 '((3 4) 5))
(setq l3 '(7 (8) 9))
</pre>

<pre>
<strong>(print (-concat l1 l2 l3))</strong>
&nbsp;
(1 (2 3) (3 4) 5 7 (8) 9)
</pre>


<pre>
<strong>(print (-flatten '(1 2 3 4 5)))</strong>
&nbsp;
(1 2 3 4 5)
</pre>

<pre>
<strong>(print (-flatten '(1 (2 3) (4 5))))</strong>
&nbsp;
(1 2 3 4 5)
</pre>

<pre>
<strong>(print (-flatten '(1 (2 (3 (4 (5)))))))</strong>
&nbsp;
(1 2 3 4 5)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Funkce <strong>-flatten-n</strong></h2>

(dotimes (n 3)
  (print (-flatten-n n '(1 2 3 4 5))))

(1 2 3 4 5)
(1 2 3 4 5)
(1 2 3 4 5)


(dotimes (n 3)
  (print (-flatten-n n '(1 (2 3) (4 5)))))

(1 (2 3) (4 5))
(1 2 3 4 5)
(1 2 3 4 5)

(dotimes (n 7)
  (print (-flatten-n n '(1 (2 (3 (4 (5))))))))

(1 (2 (3 (4 (5)))))
(1 2 (3 (4 (5))))
(1 2 3 (4 (5)))
(1 2 3 4 (5))
(1 2 3 4 5)
(1 2 3 4 5)
(1 2 3 4 5)



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy většiny dnes popsaných demonstračních příkladů byly uloženy do
Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/elisp-examples">https://github.com/tisnik/elisp-examples</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem stále velmi malý, dnes má doslova několik kilobajtů),
můžete namísto toho použít odkazy na jednotlivé příklady, které naleznete
v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-4/">https://github.com/tisnik/elisp-examples/blob/master/elisp-4/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-4/">https://github.com/tisnik/elisp-examples/blob/master/elisp-4/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-4/">https://github.com/tisnik/elisp-examples/blob/master/elisp-4/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-4/">https://github.com/tisnik/elisp-examples/blob/master/elisp-4/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-4/">https://github.com/tisnik/elisp-examples/blob/master/elisp-4/</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Literatura</h2>

<ol>

<li>Tutorial for the Common Lisp Loop Macro<br />
<a href="http://www.ai.sri.com/pkarp/loop.html">http://www.ai.sri.com/pkarp/loop.html</a>
</li>

<li>Common Lisp's Loop Macro Examples for Beginners<br />
<a href="http://www.unixuser.org/~euske/doc/cl/loop.html">http://www.unixuser.org/~euske/doc/cl/loop.html</a>
</li>

<li>A modern list api for Emacs. No 'cl required.<br />
<a href="https://github.com/magnars/dash.el">https://github.com/magnars/dash.el</a>
</li>

<li>The LOOP Facility<br />
<a href="http://www.lispworks.com/documentation/HyperSpec/Body/06_a.htm">http://www.lispworks.com/documentation/HyperSpec/Body/06_a.htm</a>
</li>

<li>McCarthy<br />
<i>&bdquo;Recursive functions of symbolic expressions and their computation by machine, part I&ldquo;</i><br />
1960
</li>

<li>Guy L. Steele<br />
<i>&bdquo;History of Scheme&ldquo;</i><br />
2006, Sun Microsystems Laboratories
</li>

<li>
Kolář J., Muller K.:<br />
<i>&bdquo;Speciální programovací jazyky&ldquo;</i><br />
Praha 1981
</li>

<li>
<i>&bdquo;AutoLISP Release 9, Programmer's reference&ldquo;</i><br />
Autodesk Ltd., October 1987
</li>

<li>
<i>&bdquo;AutoLISP Release 10, Programmer's reference&ldquo;</i><br />
Autodesk Ltd., September 1988
</li>

<li>McCarthy, John; Abrahams, Paul W.; Edwards, Daniel J.; Hart, Timothy P.; Levin, Michael I.<br />
<i>&bdquo;LISP 1.5 Programmer's Manual&ldquo;</i><br />
MIT Press. ISBN 0 262 130 1 1 4
</li>

<li>Carl Hewitt; Peter Bishop and Richard Steiger<br />
<i>&bdquo;A Universal Modular Actor Formalism for Artificial Intelligence&ldquo;</i><br />
1973
</li>

<li>Feiman, J.<br />
<i>&bdquo;The Gartner Programming Language Survey (October 2001)&ldquo;</i><br />
Gartner Advisory
</li>

<li>Harold Abelson, Gerald Jay Sussman, Julie Sussman:<br />
<i>Structure and Interpretation of Computer Programs</i><br />
MIT Press. 1985, 1996 (a možná vyšel i další přetisk)
</li>

<li>Paul Graham:<br />
<i>On Lisp</i><br />
Prentice Hall, 1993<br />
Dostupné online na stránce <a href="http://www.paulgraham.com/onlisptext.html">http://www.paulgraham.com/onlisptext.html</a>
</li>

<li>David S. Touretzky<br />
<i>Common LISP: A Gentle Introduction to Symbolic Computation (Dover Books on Engineering)</i><br />
</li>

<li>Peter Norvig<br />
<i>Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp</i>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>The mapcar Function (An Introduction to Programming in Emacs Lisp)<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/mapcar.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/mapcar.html</a>
</li>

<li>Adventures in Advanced Symbolic Programming<br />
<a href="http://groups.csail.mit.edu/mac/users/gjs/6.945/">http://groups.csail.mit.edu/mac/users/gjs/6.945/</a>
</li>

<li>Why MIT Switched from Scheme to Python (2009)<br />
<a href="https://news.ycombinator.com/item?id=14167453">https://news.ycombinator.com/item?id=14167453</a>
</li>

<li>Starodávná stránka XLispu<br />
<a href="http://www.xlisp.org/">http://www.xlisp.org/</a>
</li>

<li>AutoLISP<br />
<a href="https://en.wikipedia.org/wiki/AutoLISP">https://en.wikipedia.org/wiki/AutoLISP</a>
</li>

<li>Seriál PicoLisp: minimalistický a výkonný interpret Lispu<br />
<a href="https://www.root.cz/serialy/picolisp-minimalisticky-a-vykonny-interpret-lispu/">https://www.root.cz/serialy/picolisp-minimalisticky-a-vykonny-interpret-lispu/</a>
</li>

<li>Common Lisp<br />
<a href="https://common-lisp.net/">https://common-lisp.net/</a>
</li>

<li>Getting Going with Common Lisp<br />
<a href="https://cliki.net/Getting%20Started">https://cliki.net/Getting%20Started</a>
</li>

<li>Online Tutorial (Common Lisp)<br />
<a href="https://cliki.net/online%20tutorial">https://cliki.net/online%20tutorial</a>
</li>

<li>Guile Emacs<br />
<a href="https://www.emacswiki.org/emacs/GuileEmacs">https://www.emacswiki.org/emacs/GuileEmacs</a>
</li>

<li>Guile Emacs History<br />
<a href="https://www.emacswiki.org/emacs/GuileEmacsHistory">https://www.emacswiki.org/emacs/GuileEmacsHistory</a>
</li>

<li>Guile is a programming language<br />
<a href="https://www.gnu.org/software/guile/">https://www.gnu.org/software/guile/</a>
</li>

<li>MIT Scheme<br />
<a href="http://groups.csail.mit.edu/mac/projects/scheme/">http://groups.csail.mit.edu/mac/projects/scheme/</a>
</li>

<li>SIOD: Scheme in One Defun<br />
<a href="http://people.delphiforums.com/gjc//siod.html">http://people.delphiforums.com/gjc//siod.html</a>
</li>

<li>CommonLispForEmacs<br />
<a href="https://www.emacswiki.org/emacs/CommonLispForEmacs">https://www.emacswiki.org/emacs/CommonLispForEmacs</a>
</li>

<li>Elisp: print, princ, prin1, format, message<br />
<a href="http://ergoemacs.org/emacs/elisp_printing.html">http://ergoemacs.org/emacs/elisp_printing.html</a>
</li>

<li>Special Forms in Lisp<br />
<a href="http://www.nhplace.com/kent/Papers/Special-Forms.html">http://www.nhplace.com/kent/Papers/Special-Forms.html</a>
</li>

<li>Basic Building Blocks in LISP<br />
<a href="https://www.tutorialspoint.com/lisp/lisp_basic_syntax.htm">https://www.tutorialspoint.com/lisp/lisp_basic_syntax.htm</a>
</li>

<li>Introduction to LISP - University of Pittsburgh<br />
<a href="https://people.cs.pitt.edu/~milos/courses/cs2740/Lectures/LispTutorial.pdf">https://people.cs.pitt.edu/~milos/courses/cs2740/Lectures/LispTutorial.pdf</a>
</li>

<li>Why don't people use LISP<br />
<a href="https://forums.freebsd.org/threads/why-dont-people-use-lisp.24572/">https://forums.freebsd.org/threads/why-dont-people-use-lisp.24572/</a>
</li>

<li>Structured program theorem<br />
<a href="https://en.wikipedia.org/wiki/Structured_program_theorem">https://en.wikipedia.org/wiki/Structured_program_theorem</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

