<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Úpravy Emacsu s Emacs Lisp: všemocné makro cl-loop a knihovna dash</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Úpravy Emacsu s Emacs Lisp: všemocné makro cl-loop a knihovna dash</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Úpravy Emacsu s Emacs Lisp: všemocné makro <strong>cl-loop</strong> a knihovna dash</a></p>
<p><a href="#k02">*** 2. Různé varianty funkce <strong>print</strong></a></p>
<p><a href="#k03">*** 3. Malé zopakování z&nbsp;minula &ndash; smyčka implementovaná pomocí speciální formy <strong>while</strong></a></p>
<p><a href="#k04">*** 4. Využití makra <strong>cl-loop</strong> pro konstrukci různých forem programových smyček</a></p>
<p><a href="#k05">*** 5. Použití klauzulí <strong>while</strong> a <strong>until</strong></a></p>
<p><a href="#k06">*** 6. Počítané smyčky typu <strong>for</strong></a></p>
<p><a href="#k07">*** 7. Specifikace počáteční hodnoty a kroku, s&nbsp;nímž se mění hodnota počitadla smyčky</a></p>
<p><a href="#k08">*** 8. Snižování hodnoty počitadla smyčky</a></p>
<p><a href="#k09">*** 9. Procházení prvky seznamu aneb smyčka typu <strong>for-each</strong></a></p>
<p><a href="#k10">*** 10. Rozdíl mezi formami <strong>for i in</strong> a <strong>for i on</strong></a></p>
<p><a href="#k11">*** 11. Přímá změna hodnoty prvků seznamu, přes nějž se iteruje</a></p>
<p><a href="#k12">*** 12. Klauzule <strong>append</strong></a></p>
<p><a href="#k13">*** 13. Klauzule pro automatický výpočet sumy, nalezení maximálního a minimálního prvku atd.</a></p>
<p><a href="#k14">*** 14. Smyčka vracející programátorem specifikované (naakumulované) hodnoty</a></p>
<p><a href="#k15">*** 15. Lokální proměnné použité uvnitř těla smyčky</a></p>
<p><a href="#k16">*** 16. Alternativní funkcionální přístup při zpracování sekvencí &ndash; použití knihovny <strong>dash</strong></a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Literatura</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Úpravy Emacsu s Emacs Lisp: všemocné makro <strong>cl-loop</strong> a knihovna dash</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Různé varianty funkce <strong>print</strong></h2>

<p></p>

<table>
<tr><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>print</td><td></td></tr>
<tr><td>prin1</td><td></td></tr>
<tr><td>princ</td><td></td></tr>
<tr><td>terpri</td><td></td></tr>
</table>

<p></p>

<pre>
(print 42)
(print "Hello")
(print :world)
(print '(1 2 3))
&nbsp;
(print "-----------------------------------------")
&nbsp;
(prin1 42)
(terpri)
(prin1 "Hello")
(terpri)
(prin1 :world)
(terpri)
(prin1 '(1 2 3))
(terpri)
&nbsp;
(print "-----------------------------------------")
&nbsp;
(princ 42)
(terpri)
(princ "Hello")
(terpri)
(princ :world)
(terpri)
(princ '(1 2 3))
(terpri)
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Malé zopakování z&nbsp;minula &ndash; smyčka implementovaná pomocí speciální formy <strong>while</strong></h2>

<p><a href="http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/while">Clojure</a></p>

<pre>
(setq i 10)
&nbsp;
(<strong>while</strong> (&gt; i 0)
  (princ (format "i = %d\n" i))
  (setq i (- i 1)))
</pre>

<pre>
</pre>

<pre>
(setq i 0)
&nbsp;
(<strong>while</strong> (&lt; i 10)
  (princ (format "i = %d\n" i))
  (setq i (1+ i)))
</pre>

<pre>
</pre>

<p>Speciální forma <strong>while</strong> na první pohled vypadá jednoduše použitelná. Současně se (z&nbsp;pohledu teorie) vlastně jedná o jediný typ programové smyčky, kterou je zapotřebí implementovat, protože všechny ostatní typy smyček je možné z&nbsp;<strong>while</strong> odvodit (viz též <a href="https://en.wikipedia.org/wiki/Structured_program_theorem">Structured program theorem</a>). Ovšem z&nbsp;hlediska praktického použití je patrné, že se <strong>while</strong> používá poměrně složitě, protože je ji většinou zapotřebí doplnit o další pomocné konstrukce; v&nbsp;našem případě o počitadlo smyčky. Z&nbsp;tohoto důvodu byly do různých dialektů LISPu postupně přidávány i další typy smyček, přičemž nejvíce univerzální je smyčka <strong>loop</strong> realizovaná v&nbsp;Common Lispu. A právě možnostmi nabízenými touto smyčkou se budeme zabývat v&nbsp;navazujících kapitolách.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Využití makra <strong>cl-loop</strong> pro konstrukci různých forem programových smyček</h2>

<p><div class="rs-tip-major">Poznámka: v&nbsp;Common Lispu se skutečně setkáme s&nbsp;makrem pojmenovaným <strong>loop</strong>. V&nbsp;Emacs Lispu je situace nepatrně odlišná, protože se toto makro importuje z&nbsp;knihovny nazvané <strong>cl-lib</strong>, kde prefix &bdquo;cl&ldquo; samozřejmě znamená &bdquo;Common Lisp&ldquo;. Mj.&nbsp;i z&nbsp;tohoto důvodu se v&nbsp;Emacs Lispu toto makro jmenuje &bdquo;cl-loop&ldquo;:</div></p>

<pre>
(require 'cl-lib)
</pre>

<p>Smyčka <strong>loop</strong> ve formě, v&nbsp;jaké je vytvořena v&nbsp;Common Lispu, programátorům nabízí svůj vlastní doménově specifický jazyk (DSL). Z&nbsp;dalších demonstračních příkladů bude patrné, že tento jazyk používá styl zápisu, který je kombinací klasických strukturovaných jazyků (Algol, Pascal, C) a možností LISPu. Je tomu tak z&nbsp;toho důvodu, aby bylo přímo ze zápisu smyčky, typicky již po přečtení prvního řádku, patrné, jak bude smyčka prováděna. K&nbsp;tomuto účelu se uvnitř smyčky <strong>loop</strong> používají symboly <strong>for</strong>, <strong>repeat</strong>, <strong>in</strong>, <strong>finally</strong> atd., které mají svůj speciální význam, ale pouze uvnitř samotné formy <strong>loop</strong>.</p>

<p>Podívejme se nyní na pravděpodobně nejjednodušší prakticky použitelný příklad využívající smyčku <strong>cl-loop</strong>, v&nbsp;níž bude použita dvojice symbolů se speciálním významem, o nichž jsme se zmínili v&nbsp;předchozím odstavci. Konkrétně budeme implementovat smyčku, jejíž tělo se bude n-krát opakovat. K&nbsp;zápisu této varianty smyčky nám pomohou dva symboly <strong>repeat</strong> a <strong>do</strong>. Povšimněte si, že zápis smyčky vypadá prakticky stejně, jako by tomu bylo v&nbsp;některém z&nbsp;klasických strukturovaných jazyků (samozřejmě pokud si odmyslíme kulaté závorky, do kterých toto makro vkládáme):</p>

<pre>
(<strong>cl-loop</strong> <strong>repeat</strong> počet-opakování <strong>do</strong> ...)
</pre>

<p>Podívejme se na praktický příklad:</p>
<pre>
(require 'cl-lib)
&nbsp;
(<strong>cl-loop</strong> <strong>repeat</strong> 10 <strong>do</strong>
         (princ "Hello world!\n"))
</pre>

<p>Makro <strong>cl-loop</strong> zavolané tímto způsobem nevrací žádnou hodnotu, takže se předpokládá, že smyčka vykoná svoji činnost jen díky tomu, že některá funkce volaná při každé iteraci bude mít vedlejší efekt, například že vypíše zprávu na obrazovku atd., což je ostatně přesně náš případ. Po spuštění výše popsané smyčky se na výstupu zobrazí deset totožných zpráv:</p>

<pre>
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že při použití <strong>loop-repeat-do</strong> vlastně nemáme k&nbsp;dispozici počitadlo smyčky. V&nbsp;případě, že je nutné počitadlo využít, je výhodnější použít další varianty smyčky, například <strong>loop-for</strong>, které budou popsány <a href="#k06">v&nbsp;šesté</a>, <a href="k07">sedmé</a> a <a href="#k08">osmé kapitole</a>.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití klauzulí <strong>while</strong> a <strong>until</strong></h2>

<pre>
(<strong>cl-loop</strong> while podmínka do ...)
</pre>

<pre>
(<strong>cl-loop</strong> until podmínka do ...)
</pre>

<pre>
(require 'cl-lib)
&nbsp;
(setq i 10)
&nbsp;
(<strong>cl-loop</strong> while (&gt; i 0) do
         (princ (format "i = %d\n" i))
         (setq i (- i 1)))
&nbsp;
(<strong>cl-loop</strong> until (&lt; i 10) do
         (princ (format "i = %d\n" i))
         (setq i (+ i 1)))
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Počítané smyčky typu <strong>for</strong></h2>

<pre>
(require 'cl-lib)

<pre>
(<strong>cl-loop</strong> <strong>for</strong> i to 10 do
         (princ (format "i = %d\n" i)))
</pre>


<pre>
(<strong>cl-loop</strong> <strong>for</strong> i upto 10 do
         (princ (format "i = %d\n" i)))
</pre>


<pre>
(<strong>cl-loop</strong> <strong>for</strong> i below 10 do
         (princ (format "i = %d\n" i)))
</pre>


<pre>
(<strong>cl-loop</strong> <strong>for</strong> i below 10 when (cl-evenp i) do
         (princ (format "i = %d\n" i)))
</pre>


<pre>
(<strong>cl-loop</strong> <strong>for</strong> i below 10 when (cl-oddp i) do
         (princ (format "i = %d\n" i)))
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Specifikace počáteční hodnoty a kroku, s&nbsp;nímž se mění hodnota počitadla smyčky</h2>

<pre>
(require 'cl-lib)

(<strong>cl-loop</strong> <strong>for</strong> i from 1 to 10 do
         (princ (format "i = %d\n" i)))
</pre>

<pre>
(<strong>cl-loop</strong> <strong>for</strong> i from 1 upto 10 do
         (princ (format "i = %d\n" i)))
</pre>

<pre>
(<strong>cl-loop</strong> <strong>for</strong> i upfrom 1 upto 10 do
         (princ (format "i = %d\n" i)))
</pre>

<pre>
(<strong>cl-loop</strong> <strong>for</strong> i from 1 below 10 do
         (princ (format "i = %d\n" i)))
</pre>

<pre>
(<strong>cl-loop</strong> <strong>for</strong> i from 1 to 10 when (cl-evenp i) do
         (princ (format "i = %d\n" i)))
</pre>

<pre>
(<strong>cl-loop</strong> <strong>for</strong> i from 1 upto 10 when (cl-evenp i) do
         (princ (format "i = %d\n" i)))
</pre>

<pre>
(<strong>cl-loop</strong> <strong>for</strong> i upfrom 1 upto 10 when (cl-evenp i) do
         (princ (format "i = %d\n" i)))
</pre>

<pre>
(<strong>cl-loop</strong> <strong>for</strong> i from 1 below 10 when (cl-evenp i) do
         (princ (format "i = %d\n" i)))

</pre>

<pre>
(require 'cl-lib)

(<strong>cl-loop</strong> <strong>for</strong> i from 0 to 30 by 3 do
         (princ (format "i = %d\n" i)))

(princ "---------------------------\n")

(<strong>cl-loop</strong> <strong>for</strong> i from 0 upto 30 by 3 do
         (princ (format "i = %d\n" i)))

(princ "---------------------------\n")

(<strong>cl-loop</strong> <strong>for</strong> i upfrom 0 upto 30 by 3 do
         (princ (format "i = %d\n" i)))

(princ "---------------------------\n")

(<strong>cl-loop</strong> <strong>for</strong> i upfrom 0 below 30 by 3 do
         (princ (format "i = %d\n" i)))

(princ "===========================\n")

(<strong>cl-loop</strong> <strong>for</strong> i from 0 to 30 by 3 when (cl-evenp i) do
         (princ (format "i = %d\n" i)))

(princ "---------------------------\n")

(<strong>cl-loop</strong> <strong>for</strong> i from 0 upto 30 by 3 when (cl-evenp i) do
         (princ (format "i = %d\n" i)))

(princ "---------------------------\n")

(<strong>cl-loop</strong> <strong>for</strong> i upfrom 0 upto 30 by 3 when (cl-evenp i) do
         (princ (format "i = %d\n" i)))

(princ "---------------------------\n")

(<strong>cl-loop</strong> <strong>for</strong> i upfrom 0 below 30 by 3 when (cl-evenp i) do
         (princ (format "i = %d\n" i)))

</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Snižování hodnoty počitadla smyčky</h2>

<pre>
(require 'cl-lib)

(<strong>cl-loop</strong> <strong>for</strong> i from 10 downto 1 do
         (princ (format "i = %d\n" i)))

(princ "---------------------------\n")

(<strong>cl-loop</strong> <strong>for</strong> i from 10 above 1 do
         (princ (format "i = %d\n" i)))

(princ "---------------------------\n")

(<strong>cl-loop</strong> <strong>for</strong> i upfrom 10 above 1 do
         (princ (format "i = %d\n" i)))

(princ "---------------------------\n")

(<strong>cl-loop</strong> <strong>for</strong> i upfrom 10 above 1 by 2 do
         (princ (format "i = %d\n" i)))

(princ "===========================\n")

(<strong>cl-loop</strong> <strong>for</strong> i from 10 downto 1 when (cl-evenp i) do
         (princ (format "i = %d\n" i)))

(princ "---------------------------\n")

(<strong>cl-loop</strong> <strong>for</strong> i from 10 above 1 when (cl-evenp i) do
         (princ (format "i = %d\n" i)))

(princ "---------------------------\n")

(<strong>cl-loop</strong> <strong>for</strong> i upfrom 10 above 1 when (cl-evenp i) do
         (princ (format "i = %d\n" i)))

(princ "---------------------------\n")

(<strong>cl-loop</strong> <strong>for</strong> i upfrom 10 above 1 by 2 when (cl-evenp i) do
         (princ (format "i = %d\n" i)))

(princ "---------------------------\n")

(<strong>cl-loop</strong> <strong>for</strong> i upfrom 10 above 1 by 2 when (cl-oddp i) do
         (princ (format "i = %d\n" i)))

(princ "---------------------------\n")
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Procházení prvky seznamu aneb smyčka typu <strong>for-each</strong></h2>

<pre>
(<strong>cl-loop</strong> <strong>for</strong> prvek <strong>in</strong> seznam
  ...
  ...
  ...
  tělo smyčky
  ...
  ...
  ...)
</pre>

<p></p>

<pre>
(<strong>cl-loop</strong> <strong>for</strong> prvek <strong>in</strong> seznam
    collect prvek)
</pre>

<pre>
(require 'cl-lib)

(setq lst (number-sequence 0 10))

(print
    (<strong>cl-loop</strong> <strong>for</strong> i <strong>in</strong> lst
             collect i))

(print
    (<strong>cl-loop</strong> <strong>for</strong> i <strong>in</strong> lst
             collect (* i i)))


(defun factorial (n)
  (setq accumulator 1)
  (dolist (value (number-sequence 1 n))
    (setq accumulator (* accumulator value)))
  accumulator)

(print
    (<strong>cl-loop</strong> <strong>for</strong> i <strong>in</strong> lst
             collect (factorial i)))
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Rozdíl mezi formami <strong>for i in</strong> a <strong>for i on</strong></h2>

<pre>
(require 'cl-lib)

(setq lst (number-sequence 0 10))

(setq result
    (<strong>cl-loop</strong> <strong>for</strong> i on lst
             collect i))

(dolist (item result)
  (print item))
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Přímá změna hodnoty prvků seznamu, přes nějž se iteruje</h2>

<p>Nyní se dostáváme do oblasti, v&nbsp;níž se vlastnosti makra <strong>cl-loop</strong> již prakticky ztotožnily s&nbsp;možnostmi nefunkcionálních jazyků, se všemi výhodami a nevýhodami, které tento přístup přináší. V&nbsp;některých situacích je totiž vhodné, aby programová smyčka přímo měnila hodnoty seznamu (nebo pole), jehož prvky se ve smyčce prochází. I to je možné, a to díky následující konstrukci:</p>

<pre>
(<strong>cl-loop</strong> <strong>for</strong> prvek <strong>in-ref</strong> seznam <strong>do</strong>
  ...
  ...
  ...
  tělo smyčky
  ...
  ...
  ...)
</pre>

<p>Povšimněte si rozdílu oproti předchozím smyčkám &ndash; namísto symbolu <strong>in</strong> je použit symbol <strong>in-ref</strong>. Díky použití tohoto symbolu se v&nbsp;každé iteraci získá reference na prvek procházeného seznamu, nikoli hodnota. Této vlastnosti můžeme využít například pro zvýšení hodnoty prvku v&nbsp;seznamu o jedničku pomocí <strong>cl-incf</strong>:</p>

<pre>
(<strong>cl-loop</strong> <strong>for</strong> i <strong>in-ref</strong> lst <strong>do</strong>
         (<strong>cl-incf</strong> i)))
</pre>

<p>Po zavolání této smyčky bude původní seznam <strong>lst</strong> obsahovat nové hodnoty (o jedničku zvýšené). Podívejme se nyní na demonstrační příklad, v&nbsp;němž bude použit právě tento typ smyčky, to hned dvakrát. V&nbsp;první smyčce zvýšíme hodnotu prvků původního seznamu o jedničku, ve smyčce druhé pak prvky vynulujeme:</p>

<pre>
(require 'cl-lib)
&nbsp;
(setq lst (number-sequence 0 10))
&nbsp;
(print lst)
&nbsp;
(print
    (<strong>cl-loop</strong> <strong>for</strong> i in-ref lst do
             (cl-incf i)))
&nbsp;
(print lst)
&nbsp;
(<strong>cl-loop</strong> <strong>for</strong> i in-ref lst do
         (setf i 0))
&nbsp;
(print lst)
</pre>

<p>Po spuštění se na výstupu objeví následující řádky:</p>

<pre>
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Klauzule <strong>append</strong></h2>

<pre>
(require 'cl-lib)

(setq lst (number-sequence 0 10))

(setq result
    (<strong>cl-loop</strong> <strong>for</strong> i <strong>in</strong> lst
             collect i))

(dolist (item result)
  (print item))

(print "-------------------------------------")

(setq letters '((alfa beta) () (gama delta) (omega) ()))

(setq result
  (<strong>cl-loop</strong> <strong>for</strong> i <strong>in</strong> letters
           append i))

(dolist (item result)
  (print item))
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Klauzule pro automatický výpočet sumy, nalezení maximálního a minimálního prvku atd.</h2>

<pre>
(require 'cl-lib)

(setq lst (number-sequence 0 10))

(setq result
    (<strong>cl-loop</strong> <strong>for</strong> i <strong>in</strong> lst
             sum i))

(princ (format "Result: %d" result))

(princ "\n----------------------------\n")

(setq result
    (<strong>cl-loop</strong> <strong>for</strong> i <strong>in</strong> lst
             sum i into total
             finally return total))

(princ (format "Result: %d" result))
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Smyčka vracející programátorem specifikované (naakumulované) hodnoty</h2>

<pre>
(require 'cl-lib)
&nbsp;
(setq lst (number-sequence 0 10))
&nbsp;
(setq result
    (<strong>cl-loop</strong> <strong>for</strong> i <strong>in</strong> lst
             count i into counter
             sum i into total
             maximize i into max-value
             minimize i into min-value
             finally return (list min-value max-value total counter)))
&nbsp;
(princ (format "Min value %d\n" (nth 0 result)))
(princ (format "Max value %d\n" (nth 1 result)))
(princ (format "Sum value %d\n" (nth 2 result)))
(princ (format "Values %d\n" (nth 3 result)))
</pre>

<pre>
(require 'cl-lib)
&nbsp;
(setq rnd (<strong>cl-loop</strong> repeat 1000
                   collect (random 10000)))
&nbsp;
&nbsp;
(setq result
    (<strong>cl-loop</strong> <strong>for</strong> x <strong>in</strong> rnd
             count x into counter
             sum x into total
             maximize x into max-value
             minimize x into min-value
             finally return (list min-value max-value total (/ total counter) counter)))
&nbsp;
&nbsp;
(princ (format "Min value %d\n" (nth 0 result)))
(princ (format "Max value %d\n" (nth 1 result)))
(princ (format "Sum value %d\n" (nth 2 result)))
(princ (format "Avg value %d\n" (nth 3 result)))
(princ (format "Values %d\n" (nth 4 result)))
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Lokální proměnné použité uvnitř těla smyčky</h2>

<pre>
(require 'cl-lib)
&nbsp;
(defun find-sqrt
  (value)
  (<strong>cl-loop</strong> <strong>for</strong> x from 1 to 200
           <strong>for</strong> square = (* x x)
           until (&gt;= square value)
           finally return x))
&nbsp;
(princ (format "Sqrt of %d = %d\n" 1764 (find-sqrt 1764)))
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Alternativní funkcionální přístup při zpracování sekvencí &ndash; použití knihovny <strong>dash</strong></h2>

*** image ***
<p><i>Obrázek 1: </i></p>

*** image ***
<p><i>Obrázek 2: </i></p>

*** image ***
<p><i>Obrázek 3: </i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy většiny dnes popsaných demonstračních příkladů byly uloženy do
Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/elisp-examples">https://github.com/tisnik/elisp-examples</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem stále velmi malý, dnes má doslova několik kilobajtů),
můžete namísto toho použít odkazy na jednotlivé příklady, které naleznete
v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
<tr><td>17</td><td></td><td></td><td><a href="https://github.com/tisnik/elisp-examples/blob/master/elisp-3/">https://github.com/tisnik/elisp-examples/blob/master/elisp-3/</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Literatura</h2>

<ol>

<li>Tutorial for the Common Lisp Loop Macro<br />
<a href="http://www.ai.sri.com/pkarp/loop.html">http://www.ai.sri.com/pkarp/loop.html</a>
</li>

<li>Common Lisp's Loop Macro Examples for Beginners<br />
<a href="http://www.unixuser.org/~euske/doc/cl/loop.html">http://www.unixuser.org/~euske/doc/cl/loop.html</a>
</li>

<li>A modern list api for Emacs. No 'cl required.<br />
<a href="https://github.com/magnars/dash.el">https://github.com/magnars/dash.el</a>
</li>

<li>The LOOP Facility<br />
<a href="http://www.lispworks.com/documentation/HyperSpec/Body/06_a.htm">http://www.lispworks.com/documentation/HyperSpec/Body/06_a.htm</a>
</li>

<li>McCarthy<br />
<i>&bdquo;Recursive functions of symbolic expressions and their computation by machine, part I&ldquo;</i><br />
1960
</li>

<li>Guy L. Steele<br />
<i>&bdquo;History of Scheme&ldquo;</i><br />
2006, Sun Microsystems Laboratories
</li>

<li>
Kolář J., Muller K.:<br />
<i>&bdquo;Speciální programovací jazyky&ldquo;</i><br />
Praha 1981
</li>

<li>
<i>&bdquo;AutoLISP Release 9, Programmer's reference&ldquo;</i><br />
Autodesk Ltd., October 1987
</li>

<li>
<i>&bdquo;AutoLISP Release 10, Programmer's reference&ldquo;</i><br />
Autodesk Ltd., September 1988
</li>

<li>McCarthy, John; Abrahams, Paul W.; Edwards, Daniel J.; Hart, Timothy P.; Levin, Michael I.<br />
<i>&bdquo;LISP 1.5 Programmer's Manual&ldquo;</i><br />
MIT Press. ISBN 0 262 130 1 1 4
</li>

<li>Carl Hewitt; Peter Bishop and Richard Steiger<br />
<i>&bdquo;A Universal Modular Actor Formalism for Artificial Intelligence&ldquo;</i><br />
1973
</li>

<li>Feiman, J.<br />
<i>&bdquo;The Gartner Programming Language Survey (October 2001)&ldquo;</i><br />
Gartner Advisory
</li>

<li>Harold Abelson, Gerald Jay Sussman, Julie Sussman:<br />
<i>Structure and Interpretation of Computer Programs</i><br />
MIT Press. 1985, 1996 (a možná vyšel i další přetisk)
</li>

<li>Paul Graham:<br />
<i>On Lisp</i><br />
Prentice Hall, 1993<br />
Dostupné online na stránce <a href="http://www.paulgraham.com/onlisptext.html">http://www.paulgraham.com/onlisptext.html</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Some Common Lisp Loop Macro Examples<br />
<a href="https://www.youtube.com/watch?v=3yl8o6r_omw">https://www.youtube.com/watch?v=3yl8o6r_omw</a>
</li>

<li>A Guided Tour of Emacs<br />
<a href="https://www.gnu.org/software/emacs/tour/">https://www.gnu.org/software/emacs/tour/</a>
</li>

<li>The Roots of Lisp<br />
<a href="http://www.paulgraham.com/rootsoflisp.html">http://www.paulgraham.com/rootsoflisp.html</a>
</li>

<li>Evil (Emacs Wiki)<br />
<a href="https://www.emacswiki.org/emacs/Evil">https://www.emacswiki.org/emacs/Evil</a>
</li>

<li>Evil (na GitHubu)<br />
<a href="https://github.com/emacs-evil/evil">https://github.com/emacs-evil/evil</a>
</li>

<li>Evil (na stránkách repositáře MELPA)<br />
<a href="https://melpa.org/#/evil">https://melpa.org/#/evil</a>
</li>

<li>Evil Mode: How I Switched From VIM to Emacs<br />
<a href="https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html">https://blog.jakuba.net/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html</a>
</li>

<li>GNU Emacs (home page)<br />
<a href="https://www.gnu.org/software/emacs/">https://www.gnu.org/software/emacs/</a>
</li>

<li>GNU Emacs (texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?GnuEmacs">http://texteditors.org/cgi-bin/wiki.pl?GnuEmacs</a>
</li>

<li>An Introduction To Using GDB Under Emacs<br />
<a href="http://tedlab.mit.edu/~dr/gdbintro.html">http://tedlab.mit.edu/~dr/gdbintro.html</a>
</li>

<li>An Introduction to Programming in Emacs Lisp<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html</a>
</li>

<li>27.6 Running Debuggers Under Emacs<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html</a>
</li>

<li>GdbMode<br />
<a href="http://www.emacswiki.org/emacs/GdbMode">http://www.emacswiki.org/emacs/GdbMode</a>
</li>

<li>Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Emacs">https://en.wikipedia.org/wiki/Emacs</a>
</li>

<li>Emacs timeline<br />
<a href="http://www.jwz.org/doc/emacs-timeline.html">http://www.jwz.org/doc/emacs-timeline.html</a>
</li>

<li>Emacs Text Editors Family<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?EmacsFamily">http://texteditors.org/cgi-bin/wiki.pl?EmacsFamily</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse/</a>
</li>

<li>Vrapper aneb spojení možností Vimu a Eclipse (část 2: vyhledávání a nahrazování textu)<br />
<a href="https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/">https://mojefedora.cz/vrapper-aneb-spojeni-moznosti-vimu-a-eclipse-cast-2-vyhledavani-a-nahrazovani-textu/</a>
</li>

<li>Emacs/Evil-mode - A basic reference to using evil mode in Emacs<br />
<a href="http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet">http://www.aakarshnair.com/posts/emacs-evil-mode-cheatsheet</a>
</li>

<li>From Vim to Emacs+Evil chaotic migration guide<br />
<a href="https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/">https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/</a>
</li>

<li>Introduction to evil-mode {video)<br />
<a href="https://www.youtube.com/watch?v=PeVQwYUxYEg">https://www.youtube.com/watch?v=PeVQwYUxYEg</a>
</li>

<li>EINE (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/EINE">http://www.emacswiki.org/emacs/EINE</a>
</li>

<li>EINE (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?EINE">http://texteditors.org/cgi-bin/wiki.pl?EINE</a>
</li>

<li>ZWEI (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/ZWEI">http://www.emacswiki.org/emacs/ZWEI</a>
</li>

<li>ZWEI (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?ZWEI">http://texteditors.org/cgi-bin/wiki.pl?ZWEI</a>
</li>

<li>Zmacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Zmacs">https://en.wikipedia.org/wiki/Zmacs</a>
</li>

<li>Zmacs (Texteditors.org)<br />
<a href="http://texteditors.org/cgi-bin/wiki.pl?Zmacs">http://texteditors.org/cgi-bin/wiki.pl?Zmacs</a>
</li>

<li>TecoEmacs (Emacs Wiki)<br />
<a href="http://www.emacswiki.org/emacs/TecoEmacs">http://www.emacswiki.org/emacs/TecoEmacs</a>
</li>

<li>Micro Emacs<br />
<a href="http://www.emacswiki.org/emacs/MicroEmacs">http://www.emacswiki.org/emacs/MicroEmacs</a>
</li>

<li>Micro Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MicroEMACS">https://en.wikipedia.org/wiki/MicroEMACS</a>
</li>

<li>EmacsHistory<br />
<a href="http://www.emacswiki.org/emacs/EmacsHistory">http://www.emacswiki.org/emacs/EmacsHistory</a>
</li>

<li>Seznam editorů s ovládáním podobným Emacsu či kompatibilních s příkazy Emacsu<br />
<a href="http://www.finseth.com/emacs.html">http://www.finseth.com/emacs.html</a>
</li>

<li>evil-numbers<br />
<a href="https://github.com/cofi/evil-numbers">https://github.com/cofi/evil-numbers</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (1.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v&nbsp;Linuxu (2.část)<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://fedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v editorech Emacs a Vim<br />
<a href="https://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">https://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>Org mode<br />
<a href="https://orgmode.org/">https://orgmode.org/</a>
</li>

<li>The Org Manual<br />
<a href="https://orgmode.org/manual/index.html">https://orgmode.org/manual/index.html</a>
</li>

<li>Kakoune (modální textový editor)<br />
<a href="http://kakoune.org/">http://kakoune.org/</a>
</li>

<li>Vim-style keybinding in Emacs/Evil-mode<br />
<a href="https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8">https://gist.github.com/troyp/6b4c9e1c8670200c04c16036805773d8</a>
</li>

<li>Emacs - jak začít<br />
<a href="http://www.abclinuxu.cz/clanky/navody/emacs-jak-zacit">http://www.abclinuxu.cz/clanky/navody/emacs-jak-zacit</a>
</li>

<li>Programovací jazyk LISP a LISP machines<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/">https://www.root.cz/clanky/programovaci-jazyk-lisp-a-lisp-machines/</a>
</li>

<li>Evil-surround<br />
<a href="https://github.com/emacs-evil/evil-surround">https://github.com/emacs-evil/evil-surround</a>
</li>

<li>Spacemacs<br />
<a href="http://spacemacs.org/">http://spacemacs.org/</a>
</li>

<li>Lisp: Common Lisp, Racket, Clojure, Emacs Lisp<br />
<a href="http://hyperpolyglot.org/lisp">http://hyperpolyglot.org/lisp</a>
</li>

<li>Common Lisp, Scheme, Clojure, And Elisp Compared<br />
<a href="http://irreal.org/blog/?p=725">http://irreal.org/blog/?p=725</a>
</li>

<li>Does Elisp Suck?<br />
<a href="http://irreal.org/blog/?p=675">http://irreal.org/blog/?p=675</a>
</li>

<li>Emacs pro mírně pokročilé (9): Elisp<br />
<a href="https://www.root.cz/clanky/emacs-elisp/">https://www.root.cz/clanky/emacs-elisp/</a>
</li>

<li>If I want to learn lisp, are emacs and elisp a good choice?<br />
<a href="https://www.reddit.com/r/emacs/comments/2m141y/if_i_want_to_learn_lisp_are_emacs_and_elisp_a/">https://www.reddit.com/r/emacs/comments/2m141y/if_i_want_to_learn_lisp_are_emacs_and_elisp_a/</a>
</li>

<li>Clojure(Script) Interactive Development Environment that Rocks!<br />
<a href="https://github.com/clojure-emacs/cider">https://github.com/clojure-emacs/cider</a>
</li>

<li>An Introduction to Emacs Lisp<br />
<a href="https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html">https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html</a>
</li>

<li>Emergency Elisp<br />
<a href="http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html">http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html</a>
</li>

<li>Racket<br />
<a href="https://racket-lang.org/">https://racket-lang.org/</a>
</li>

<li>The Racket Manifesto<br />
<a href="http://felleisen.org/matthias/manifesto/">http://felleisen.org/matthias/manifesto/</a>
</li>

<li>MIT replaces Scheme with Python<br />
<a href="https://www.johndcook.com/blog/2009/03/26/mit-replaces-scheme-with-python/">https://www.johndcook.com/blog/2009/03/26/mit-replaces-scheme-with-python/</a>
</li>

<li>Adventures in Advanced Symbolic Programming<br />
<a href="http://groups.csail.mit.edu/mac/users/gjs/6.945/">http://groups.csail.mit.edu/mac/users/gjs/6.945/</a>
</li>

<li>Why MIT Switched from Scheme to Python (2009)<br />
<a href="https://news.ycombinator.com/item?id=14167453">https://news.ycombinator.com/item?id=14167453</a>
</li>

<li>Starodávná stránka XLispu<br />
<a href="http://www.xlisp.org/">http://www.xlisp.org/</a>
</li>

<li>AutoLISP<br />
<a href="https://en.wikipedia.org/wiki/AutoLISP">https://en.wikipedia.org/wiki/AutoLISP</a>
</li>

<li>Seriál PicoLisp: minimalistický a výkonný interpret Lispu<br />
<a href="https://www.root.cz/serialy/picolisp-minimalisticky-a-vykonny-interpret-lispu/">https://www.root.cz/serialy/picolisp-minimalisticky-a-vykonny-interpret-lispu/</a>
</li>

<li>Common Lisp<br />
<a href="https://common-lisp.net/">https://common-lisp.net/</a>
</li>

<li>Getting Going with Common Lisp<br />
<a href="https://cliki.net/Getting%20Started">https://cliki.net/Getting%20Started</a>
</li>

<li>Online Tutorial (Common Lisp)<br />
<a href="https://cliki.net/online%20tutorial">https://cliki.net/online%20tutorial</a>
</li>

<li>Guile Emacs<br />
<a href="https://www.emacswiki.org/emacs/GuileEmacs">https://www.emacswiki.org/emacs/GuileEmacs</a>
</li>

<li>Guile Emacs History<br />
<a href="https://www.emacswiki.org/emacs/GuileEmacsHistory">https://www.emacswiki.org/emacs/GuileEmacsHistory</a>
</li>

<li>Guile is a programming language<br />
<a href="https://www.gnu.org/software/guile/">https://www.gnu.org/software/guile/</a>
</li>

<li>MIT Scheme<br />
<a href="http://groups.csail.mit.edu/mac/projects/scheme/">http://groups.csail.mit.edu/mac/projects/scheme/</a>
</li>

<li>SIOD: Scheme in One Defun<br />
<a href="http://people.delphiforums.com/gjc//siod.html">http://people.delphiforums.com/gjc//siod.html</a>
</li>

<li>CommonLispForEmacs<br />
<a href="https://www.emacswiki.org/emacs/CommonLispForEmacs">https://www.emacswiki.org/emacs/CommonLispForEmacs</a>
</li>

<li>Elisp: print, princ, prin1, format, message<br />
<a href="http://ergoemacs.org/emacs/elisp_printing.html">http://ergoemacs.org/emacs/elisp_printing.html</a>
</li>

<li>Special Forms in Lisp<br />
<a href="http://www.nhplace.com/kent/Papers/Special-Forms.html">http://www.nhplace.com/kent/Papers/Special-Forms.html</a>
</li>

<li>Basic Building Blocks in LISP<br />
<a href="https://www.tutorialspoint.com/lisp/lisp_basic_syntax.htm">https://www.tutorialspoint.com/lisp/lisp_basic_syntax.htm</a>
</li>

<li>Introduction to LISP - University of Pittsburgh<br />
<a href="https://people.cs.pitt.edu/~milos/courses/cs2740/Lectures/LispTutorial.pdf">https://people.cs.pitt.edu/~milos/courses/cs2740/Lectures/LispTutorial.pdf</a>
</li>

<li>Why don't people use LISP<br />
<a href="https://forums.freebsd.org/threads/why-dont-people-use-lisp.24572/">https://forums.freebsd.org/threads/why-dont-people-use-lisp.24572/</a>
</li>

<li>Structured program theorem<br />
<a href="https://en.wikipedia.org/wiki/Structured_program_theorem">https://en.wikipedia.org/wiki/Structured_program_theorem</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

