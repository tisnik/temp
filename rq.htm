<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Instalace knihovny RQ a všech přidružených utilit</a></p>
<p><a href="#k03">*** 3. Přečtení informací o stavu front</a></p>
<p><a href="#k04">*** 4. Implementace workera, který úkoly zpracuje</a></p>
<p><a href="#k05">*** 5. Jednoduchý skript pro naplánování úkolů</a></p>
<p><a href="#k06">*** 6. Propojení a spuštění celého systému</a></p>
<p><a href="#k07">*** 7. Spuštění a využití dvou workerů</a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. Čtení výsledků jednotlivých úkolů zpracovaných workery</a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. Způsob uložení úkolů v&nbsp;Redisu</a></p>
<p><a href="#k14">*** 14. Využití burst režimu workerů</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace knihovny Rq a všech přidružených utilit</h2>

<p>Knihovnu <i>RQ</i> si před jejím otestováním samozřejmě nejdříve musíme
nainstalovat, a to klasicky s&nbsp;využitím nástroje <strong>pip3</strong>
(nebo <strong>pip</strong>), protože tato knihovna je <a
href="https://pypi.org/project/rq/">samozřejmě registrována</a> i na <a
href="https://pypi.python.org/pypi">PyPI (Python Package Index)</a>. Pro
jednoduchost provedeme instalaci jen pro právě aktivního uživatele:</p>

<pre>
$ <strong>pip3 install --user rq</strong>
Collecting rq
  Downloading https://files.pythonhosted.org/packages/1d/3f/e05539962949aecd83496736f73abd36bd811884a20f68f691b59805125e/rq-0.12.0-py2.py3-none-any.whl (54kB)
    100% |████████████████████████████████████████████████████████████████████████████████████████████████| 61kB 856kB/s 
Requirement already satisfied: click&gt;=5.0 in ./.local/lib/python3.6/site-packages (from rq)
Requirement already satisfied: redis&gt;=2.7.0 in ./.local/lib/python3.6/site-packages (from rq)
Installing collected packages: rq
Successfully installed rq-0.12.0
You are using pip version 9.0.1, however version 18.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
</pre>

<p>Po instalaci by měl být na cestě (PATH) dostupný i nástroj nazvaný jednoduše
<strong>rq</strong>. I tuto skutečnosti si samozřejmě můžeme otestovat:</p>

<pre>
$ <strong>whereis -b rq</strong>
&nbsp;
rq: /home/tester/.local/bin/rq
</pre>

<p>V&nbsp;případě, že <strong>rq</strong> nebyl nalezen, vypište si pro jistotu obsah proměnné prostředí <strong>PATH</strong> a ujistěte se, že obsahuje mj.&nbsp;i adresář <strong>~/.local/bin/</strong>. Přidání tohoto adresáře je snadné, například můžeme použít <strong>.bashrc</strong>:</p>

<pre>
export PATH=$PATH:<strong>~/.local/bin/</strong>
</pre>

<p>Pokud byl zmíněný příkaz <strong>rq</strong> nalezen, můžeme ho pro otestování spustit a zjistit, zda vypisuje svoji nápovědu:</p>

<pre>
Usage: rq [OPTIONS] COMMAND [ARGS]...
&nbsp;
  RQ command line tool.
&nbsp;
Options:
  --version  Show the version and exit.
  --help     Show this message and exit.
&nbsp;
Commands:
  empty    Empty given queues.
  info     RQ command-line monitor.
  requeue  Requeue failed jobs.
  resume   Resumes processing of queues, that where...
  suspend  Suspends all workers, to resume run `rq...
  worker   Starts an RQ worker.
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Přečtení informací o stavu front</h2>

<p>První pomůckou, kterou nám nástroj RQ poskytuje, jsou informace o stavu všech front. Tato informace se získá příkazem <strong>rq info</strong>. RQ se v&nbsp;tomto případě pokusí připojit k&nbsp;běžícímu Redisu a získat z&nbsp;databáze potřebné základní informace o všech frontách. V&nbsp;našem případě nám server Redisu prozatím neběží, takže by se mělo vypsat následující chybové hlášení:</p>

<pre>
$ <strong>rq info</strong>
&nbsp;
Error 111 connecting to localhost:6379. Connection refused.
</pre>

<p>Spuštění samotného serveru Redisu je, jak jsme si již řekli
v&nbsp;předchozích dvou článcích, velmi snadné, takže si jen ve stručnosti
připomeňme, že budeme používat <a
href="https://github.com/tisnik/presentations/blob/master/redis/redis.conf">konfigurační
soubor</a> uložený do adresáře <strong>~/redis</strong>. A přímo z&nbsp;tohoto
adresáře Redis spustíme:</p>

<pre>
$ <strong>cd ~/redis</strong>
$ <strong>redis-server redis.conf</strong>
</pre>

<p><div class="rs-tip-major">Pro jistotu se budu opakovat: skutečně prosím
použijte zmíněný konfigurační soubor nebo nějakou jeho obdobu. Budete tak mít
jistotu, že server Redisu bude naslouchat pouze na lokálním rozhraní 127.0.0.1
a nebude tak omylem &bdquo;otevřený&ldquo; do celého Internetu.</p></div></p>

<p>Ve chvíli, kdy již server Redisu běží, by měl příkaz <strong>rq info</strong> vypsat informace o všech frontách. Prozatím jsme ještě vlastně vůbec nespustili ani jednoho workera ani jsme nevytvořili jediný úkol. Příkaz by tedy měl vypsat tuto informaci: nejsou používány žádné fronty, nebyly do nich tudíž ani uloženy žádné úkoly a nepracují žádní workeři:</p>

<pre>
$ <strong>rq info</strong>
&nbsp;
0 queues, 0 jobs total
&nbsp;
0 workers, 0 queues
&nbsp;
Updated: 2018-11-26 18:14:33.032764
</pre>

<p>Pokud se skutečně vypsaly výše uvedené informace, měl by být jak Redis, tak i nástroj RQ dobře nakonfigurován a můžeme se začít připravovat na vytvoření prvního skutečně fungujícího příkladu.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Implementace workera, který úkoly zpracuje</h2>

<p>Celé nastavení Redisu a nástroje RQ provádíme především z&nbsp;toho důvodu, aby bylo možné rozdělovat nějakou práci (například zpracování transakce apod.) mezi větší množství takzvaných <i>workerů</i> (dalším důvodem je vzájemné oddělení jednotlivých modulů celého systému, což například zlepšuje testovatelnost a umožňuje snadnější výměnu jednotlivých částí). Zcela nejjednodušším workerem je z&nbsp;pohledu nástroje RQ jediná funkce naprogramovaná v&nbsp;Pythonu, která po svém (nepřímém) zavolání vykoná nějakou předem naprogramovanou činnost. Této funkci se typicky předávají nějaké parametry, funkce může mít (a velmi často i mívá) vedlejší efekty a dokonce může vracet zpět nějaký výsledek, který může být na určitou dobu uložen do Redisu a posléze je ho možné vyzvednout a dále zpracovat. Ovšem většinou se spoléháme spíše na vedlejší efekt workeru, kterým může být například uložení hodnot do databáze, poslání e-mailu, naplánování nového úkolu (!) apod.</p>

<p>Podívejme se nyní, jak může vypadat implementace velmi jednoduchého workeru. Ten po svém zavolání pouze vypíše informaci na standardní výstup, počká několik sekund (tedy simuluje práci :-), vypíše druhou zprávu o dokončení své důležité práce a následně je ukončen:</p>

<pre>
</pre>

<p><a href="">Zdrojový kód s&nbsp;workerem</a> může být uložen kdekoli, ovšem musíme mít na paměti, že tento zdrojový kód musí být dostupný (viditelný) z&nbsp;nástroje RQ. V&nbsp;praxi to může znamenat jednoduše to, že příkaz <strong>rq worker</strong> budeme muset startovat ze stejného adresáře, v&nbsp;němž se nachází implementace workera (nepatrně složitější bude situace ve chvíli, kdy je worker implementován jako celá knihovna nebo modul).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Jednoduchý skript pro naplánování úkolů</h2>

<p><a href="">Druhý skript</a> slouží pro vytváření nových úkolů a pro jejich poslání do fronty, odkud si úkol později převezme nějaký worker. Nejdříve se zajistí připojení do Redisu a získání objektu představujícího frontu (zde se konkrétně bude jednat o výchozí frontu nazvanou jednoduše &bdquo;default&ldquo;). Následně se do této fronty vloží nový úkol, který bude proveden workerem, jenž implementuje funkci &bdquo;do_work&ldquo;:</p>

<pre>
</pre>

<p>V&nbsp;praxi se samozřejmě může naplánovat větší množství úkolů, což je odsimulováno <a href="">dalším skriptem</a>, který do fronty postupně vloží zadání deseti úkolů:</p>

<pre>
</pre>

<p><div class="rs-tip-major">Poznámka: samotný worker prozatím neběží, což ale nevadí, protože úkoly se mohou pouze uložit do fronty a čekat tam až na ten okamžik, kdy je vhodný worker spuštěn. Právě zde se ukazuje výhoda použití Redisu, protože některé jiné systémy pro práci s&nbsp;frontami mají informace uloženy pouze v&nbsp;operační paměti a jsou tak více závislé na stabilitě celého systému i na vnějších faktorech.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Propojení a spuštění celého systému</h2>

<p>Nyní tedy máme připraveny čtyři části celého systému:</p>

<ol>
<li>Databázi Redis, již běžící jako server.</li>
<li>Systém RQ, prozatím neběžící.</li>
<li>Skript implementující workera.</li>
<li>Skript, který workerům nepřímo zadává úkoly.</li>
</ol>

<p>Nejprve spustíme skript, který workerům přidá úkoly, které budou uloženy do fronty &bdquo;Default&ldquo;. Po dokončení skriptu znovu spustíme <strong>rq info</strong> a získáme aktuální stav front. Výstup by měl vypadat následovně:</p>

<pre>
$ <strong>rq info</strong>
&nbsp;
default      |██████████████████████████████ 10
1 queues, 10 jobs total
&nbsp;
localhost.28046 busy: default
0 workers, 1 queues
&nbsp;
Updated: 2018-11-23 18:06:24.461996
</pre>

<p>Může ovšem taktéž nastat situace, kdy nastane na straně workera chyba. V&nbsp;tomto případě se úkol uloží do fronty nazvané &bdquo;failed&ldquo; a situace bude nepatrně odlišná od situace předchozí:</p>

<pre>
$ <strong>rq info</strong>
&nbsp;
default      |██████████████████████████████ 10
failed       |██████ 2
2 queues, 12 jobs total
&nbsp;
localhost.28046 busy: default
1 workers, 2 queues
&nbsp;
Updated: 2018-11-23 18:06:24.461996
</pre>

<p>Nyní již máme úkoly připraveny ve frontě, takže můžeme spustit workera (prozatím jediného) a to příkazem:</p>

<pre>
$ <strong>rq worker</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: musíte být přitom přepnuti do adresáře se zdrojovým kódem workera.</div></p>

<p>Jakmile je worker připojen, měl by začít z&nbsp;fronty odebírat jednotlivé úkoly a postupně je zpracovávat:</p>


<p>Pokud v&nbsp;průběhu zpracovávání úkolů pustíme na dalším terminálu příkaz <strong>rq info</strong>, mělo by být patrné, že worker pracuje a postupně vybírá prvky z&nbsp;fronty &bdquo;default&ldquo;:</p>

<pre>
$ <strong>rq info</strong>
&nbsp;
default      |██████ 3
1 queues, 3 jobs total
&nbsp;
localhost.28046 busy: default
1 workers, 1 queues
&nbsp;
Updated: 2018-11-23 18:06:42.148104
</pre>

<p>Popř.&nbsp;pokud je již vytvořena fronta &bdquo;failed&ldquo;, zůstane její obsah nezměněn:</p>

<pre>
$ <strong>rq info</strong>
&nbsp;
default      |███ 1
failed       |██████ 2
2 queues, 3 jobs total
&nbsp;
localhost.28046 busy: default
1 workers, 2 queues
&nbsp;
Updated: 2018-11-23 18:06:42.148104
</pre>

<pre>
$ <strong>rq info</strong>
&nbsp;
default      | 0
1 queues, 0 jobs total
&nbsp;
localhost.28046 idle: default
1 workers, 1 queues
&nbsp;
Updated: 2018-11-23 18:06:50.867752
</pre>

<pre>
$ <strong>rq info</strong>
&nbsp;
failed       |██████ 2
default      | 0
2 queues, 2 jobs total
&nbsp;
localhost.28046 idle: default
1 workers, 2 queues
&nbsp;
Updated: 2018-11-23 18:06:50.867752
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Spuštění a využití dvou workerů</h2>

$ <strong>rqinfo</strong>
&nbsp;
default      |█ 1
failed       |██ 2
2 queues, 3 jobs total
&nbsp;
localhost.29010 busy: default
localhost.28864 busy: default
2 workers, 2 queues
&nbsp;
Updated: 2018-11-23 15:08:13.012523



$ <strong>rqinfo</strong>
&nbsp;
default      | 0
failed       |██ 2
2 queues, 2 jobs total
&nbsp;
localhost.28864 idle: default
localhost.29010 idle: default
2 workers, 2 queues
&nbsp;
Updated: 2018-11-23 15:08:39.268931



<p><a name="k08"></a></p>
<h2 id="k08">8. Předání parametrů workerům</h2>

<pre>
11:58:29 default: Job OK (1e26c193-e17e-4a7d-8dbe-75646af3cee3)
11:58:29 Result is kept for 500 seconds
11:58:31 default: worker.do_work(0) (5f937d3a-2b52-47a0-b0fd-cb00ed1adbc7)
Working, received parameter 0
Done
11:58:33 default: Job OK (5f937d3a-2b52-47a0-b0fd-cb00ed1adbc7)
11:58:33 Result is kept for 500 seconds
11:58:33 default: worker.do_work(1) (8c9b59a9-6a75-47fb-92c8-5ddab6f84668)
Working, received parameter 1
Done
11:58:35 default: Job OK (8c9b59a9-6a75-47fb-92c8-5ddab6f84668)
11:58:35 Result is kept for 500 seconds
11:58:35 default: worker.do_work(2) (deae6704-0b5d-4835-a2fd-edfa807d40f3)
Working, received parameter 2
Done
11:58:37 default: Job OK (deae6704-0b5d-4835-a2fd-edfa807d40f3)
11:58:37 Result is kept for 500 seconds
11:58:37 default: worker.do_work(3) (e1104446-a1b8-4f18-8dbb-5ed0052aa492)
Working, received parameter 3
Done
11:58:39 default: Job OK (e1104446-a1b8-4f18-8dbb-5ed0052aa492)
11:58:39 Result is kept for 500 seconds
11:58:39 default: worker.do_work(4) (8d4329c2-b74e-4ac3-a8e5-10956bb65ce6)
Working, received parameter 4
Done
11:58:41 default: Job OK (8d4329c2-b74e-4ac3-a8e5-10956bb65ce6)
11:58:41 Result is kept for 500 seconds
11:58:41 default: worker.do_work(5) (6edbd9cd-39b9-46e5-a2da-720cabbbf84b)
Working, received parameter 5
Done
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. Použití většího množství pojmenovaných front</h2>

<pre>
$ <strong>rq info</strong>
&nbsp;
failed       |██ 2
default      | 0
2 queues, 2 jobs total
&nbsp;
localhost.4312 idle: default
1 workers, 2 queues
&nbsp;
Updated: 2018-11-26 13:21:08.333807
</pre>

<pre>
$ <strong>rq info</strong>
&nbsp;
low          |███████████ 11
failed       |██ 2
default      | 0
high         |███████████ 11
4 queues, 24 jobs total
&nbsp;
localhost.4312 idle: default
1 workers, 4 queues
&nbsp;
Updated: 2018-11-26 13:22:06.236766
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Čtení výsledků jednotlivých úkolů zpracovaných workery</h2>

<p></p>

<pre>
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
Zzz
Reading job results
&lt;Job 31caa957-b8a2-401d-a3fd-2c0c7167c53c: worker.do_work(0)&gt;
&lt;Job 25ae9c85-532d-4b3c-ba8b-1195b20d3603: worker.do_work(0)&gt;
1.0
&lt;Job 30f8572e-297e-499a-91c7-ff0097c82071: worker.do_work(1)&gt;
&lt;Job d0547019-f429-40d9-8ef4-b7efcae31833: worker.do_work(1)&gt;
0.5
&lt;Job 09f7b366-feaa-4a2f-8686-665f23236848: worker.do_work(2)&gt;
&lt;Job 597cd7ec-25eb-4569-af94-8ee3777369c2: worker.do_work(2)&gt;
0.3333333333333333
&lt;Job e733712b-483c-4161-8b3a-2bcc3d1891cc: worker.do_work(3)&gt;
&lt;Job 23c50496-049b-4b24-a26f-5889af66e97e: worker.do_work(3)&gt;
&lt;Job fb1dfce7-8c19-4d1f-a8ec-59b01576cd6b: worker.do_work(4)&gt;
&lt;Job 70f62ea9-e9c8-40b5-a8d4-cd4742fee063: worker.do_work(4)&gt;
&lt;Job f4b022d1-e5ea-4001-b1c3-de0338c669d6: worker.do_work(5)&gt;
&lt;Job 345b2470-92a1-4169-af2e-3b8b283aba56: worker.do_work(5)&gt;
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Způsob uložení úkolů v&nbsp;Redisu</h2>

jeden záznam

<pre>
*2
$6
SELECT
$1
0
*1
$5
MULTI
*3
$4
SADD
$9
rq:queues
$16
rq:queue:default
*4
$4
HSET
$43
rq:job:bab0621c-582b-4002-88b8-49a349337ac1
$6
status
$6
queued
*16
$5
HMSET
$43
rq:job:bab0621c-582b-4002-88b8-49a349337ac1
$10
created_at
$27
2018-11-26T14:16:16.750534Z
$4
data
$37
binární data
$6
origin
$7
default
$11
description
$16
worker.do_work()
$11
enqueued_at
$27
2018-11-26T14:16:16.750596Z
$7
timeout
$3
180
$6
status
$6
queued
*3
$5
RPUSH
$16
rq:queue:default
$36
bab0621c-582b-4002-88b8-49a349337ac1
*1
$4
EXEC
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Využití burst režimu workerů</h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů naprogramovaných
v&nbsp;Pythonu byly uloženy do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/message-queues-examples">https://github.com/tisnik/message-queues-examples</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
doslova několik kilobajtů), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td>1</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/">https://github.com/tisnik/message-queues-examples/blob/master/</a></td></tr>
<tr><td>2</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/">https://github.com/tisnik/message-queues-examples/blob/master/</a></td></tr>
<tr><td>3</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/">https://github.com/tisnik/message-queues-examples/blob/master/</a></td></tr>
<tr><td>4</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/">https://github.com/tisnik/message-queues-examples/blob/master/</a></td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: demonstrační příklady byly odladěny pro Rq verze 0.12 a pro Python 3.6.3. Měly by však být funkční i pro všechny ostatní verze Pythonu podporované knihovnou Rg, tj.&nbsp;i Pythonem 2.7 a vyšším.</div></p>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Redis Queue (RQ)<br />
<a href="https://www.fullstackpython.com/redis-queue-rq.html">https://www.fullstackpython.com/redis-queue-rq.html</a>
</li>

<li>Full Stack Python: web development<br />
<a href="https://www.fullstackpython.com/web-development.html">https://www.fullstackpython.com/web-development.html</a>
</li>

<li>Introducing RQ<br />
<a href="https://nvie.com/posts/introducing-rq/">https://nvie.com/posts/introducing-rq/</a>
</li>

<li>Asynchronous Tasks with Flask and Redis Queue<br />
<a href="https://testdriven.io/asynchronous-tasks-with-flask-and-redis-queue">https://testdriven.io/asynchronous-tasks-with-flask-and-redis-queue</a>
</li>

<li>rq-dashboard<br />
<a href="https://github.com/eoranged/rq-dashboard">https://github.com/eoranged/rq-dashboard</a>
</li>

<li>Stránky projektu Redis<br />
<a href="https://redis.io/">https://redis.io/</a>
</li>

<li>Introduction to Redis<br />
<a href="https://redis.io/topics/introduction">https://redis.io/topics/introduction</a>
</li>

<li>Try Redis<br />
<a href="http://try.redis.io/">http://try.redis.io/</a>
</li>

<li>Redis tutorial, April 2010 (starší, ale pěkně udělaný)<br />
<a href="https://static.simonwillison.net/static/2010/redis-tutorial/">https://static.simonwillison.net/static/2010/redis-tutorial/</a>
</li>

<li>Python Redis<br />
<a href="https://redislabs.com/lp/python-redis/">https://redislabs.com/lp/python-redis/</a>
</li>

<li>Redis: key-value databáze v paměti i na disku<br />
<a href="https://www.zdrojak.cz/clanky/redis-key-value-databaze-v-pameti-i-na-disku/">https://www.zdrojak.cz/clanky/redis-key-value-databaze-v-pameti-i-na-disku/</a>
</li>

<li>Praktický úvod do Redis (1): vaše distribuovaná NoSQL cache<br />
<a href="http://www.cloudsvet.cz/?p=253">http://www.cloudsvet.cz/?p=253</a>
</li>

<li>Praktický úvod do Redis (2): transakce<br />
<a href="http://www.cloudsvet.cz/?p=256">http://www.cloudsvet.cz/?p=256</a>
</li>

<li>Praktický úvod do Redis (3): cluster<br />
<a href="http://www.cloudsvet.cz/?p=258">http://www.cloudsvet.cz/?p=258</a>
</li>

<li>Connection pool<br />
<a href="https://en.wikipedia.org/wiki/Connection_pool">https://en.wikipedia.org/wiki/Connection_pool</a>
</li>

<li>Instant Redis Sentinel Setup<br />
<a href="https://github.com/ServiceStack/redis-config">https://github.com/ServiceStack/redis-config</a>
</li>

<li>How to install REDIS in LInux<br />
<a href="https://linuxtechlab.com/how-install-redis-server-linux/">https://linuxtechlab.com/how-install-redis-server-linux/</a>
</li>

<li>Redis RDB Dump File Format<br />
<a href="https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format">https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format</a>
</li>

<li>Lempel–Ziv–Welch<br />
<a href="https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch">https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch</a>
</li>

<li>Redis Persistence<br />
<a href="https://redis.io/topics/persistence">https://redis.io/topics/persistence</a>
</li>

<li>Redis persistence demystified<br />
<a href="http://oldblog.antirez.com/post/redis-persistence-demystified.html">http://oldblog.antirez.com/post/redis-persistence-demystified.html</a>
</li>

<li>Redis reliable queues with Lua scripting<br />
<a href="http://oldblog.antirez.com/post/250">http://oldblog.antirez.com/post/250</a>
</li>

<li>Ost (knihovna)<br />
<a href="https://github.com/soveran/ost">https://github.com/soveran/ost</a>
</li>

<li>NoSQL<br />
<a href="https://en.wikipedia.org/wiki/NoSQL">https://en.wikipedia.org/wiki/NoSQL</a>
</li>

<li>Shard (database architecture)<br />
<a href="https://en.wikipedia.org/wiki/Shard_%28database_architecture%29">https://en.wikipedia.org/wiki/Shard_%28database_architecture%29</a>
</li>

<li>What is sharding and why is it important?<br />
<a href="https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important">https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important</a>
</li>

<li>What Is Sharding?<br />
<a href="https://btcmanager.com/what-sharding/">https://btcmanager.com/what-sharding/</a>
</li>

<li>Redis clients<br />
<a href="https://redis.io/clients">https://redis.io/clients</a>
</li>

<li>Category:Lua-scriptable software<br />
<a href="https://en.wikipedia.org/wiki/Category:Lua-scriptable_software">https://en.wikipedia.org/wiki/Category:Lua-scriptable_software</a>
</li>

<li>Seriál Programovací jazyk Lua<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-lua/">https://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Redis memory usage<br />
<a href="http://nosql.mypopescu.com/post/1010844204/redis-memory-usage">http://nosql.mypopescu.com/post/1010844204/redis-memory-usage</a>
</li>

<li>Ukázka konfigurace Redisu pro lokální testování<br />
<a href="https://github.com/tisnik/presentations/blob/master/redis/redis.conf">https://github.com/tisnik/presentations/blob/master/redis/redis.conf</a>
</li>

<li>Resque<br />
<a href="https://github.com/resque/resque">https://github.com/resque/resque</a>
</li>

<li>Nested transaction<br />
<a href="https://en.wikipedia.org/wiki/Nested_transaction">https://en.wikipedia.org/wiki/Nested_transaction</a>
</li>

<li>Publish–subscribe pattern<br />
<a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern</a>
</li>

<li>Messaging pattern<br />
<a href="https://en.wikipedia.org/wiki/Messaging_pattern">https://en.wikipedia.org/wiki/Messaging_pattern</a>
</li>

<li>Using pipelining to speedup Redis queries<br />
<a href="https://redis.io/topics/pipelining">https://redis.io/topics/pipelining</a>
</li>

<li>Pub/Sub<br />
<a href="https://redis.io/topics/pubsub">https://redis.io/topics/pubsub</a>
</li>

<li>ZeroMQ distributed messaging<br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>ZeroMQ: Modern &amp; Fast Networking Stack<br />
<a href="https://www.igvita.com/2010/09/03/zeromq-modern-fast-networking-stack/">https://www.igvita.com/2010/09/03/zeromq-modern-fast-networking-stack/</a>
</li>

<li>Publish/Subscribe paradigm: Why must message classes not know about their subscribers?<br />
<a href="https://stackoverflow.com/questions/2908872/publish-subscribe-paradigm-why-must-message-classes-not-know-about-their-subscr">https://stackoverflow.com/questions/2908872/publish-subscribe-paradigm-why-must-message-classes-not-know-about-their-subscr</a>
</li>

<li>Python &amp; Redis PUB/SUB<br />
<a href="https://medium.com/@johngrant/python-redis-pub-sub-6e26b483b3f7">https://medium.com/@johngrant/python-redis-pub-sub-6e26b483b3f7</a>
</li>

<li>Message broker<br />
<a href="https://en.wikipedia.org/wiki/Message_broker">https://en.wikipedia.org/wiki/Message_broker</a>
</li>

<li>RESP Arrays<br />
<a href="https://redis.io/topics/protocol#array-reply">https://redis.io/topics/protocol#array-reply</a>
</li>

<li>Redis Protocol specification<br />
<a href="https://redis.io/topics/protocol">https://redis.io/topics/protocol</a>
</li>

<li>Redis Pub/Sub: Intro Guide<br />
<a href="https://www.redisgreen.net/blog/pubsub-intro/">https://www.redisgreen.net/blog/pubsub-intro/</a>
</li>

<li>Redis Pub/Sub: Howto Guide<br />
<a href="https://www.redisgreen.net/blog/pubsub-howto/">https://www.redisgreen.net/blog/pubsub-howto/</a>
</li>

<li>Comparing Publish-Subscribe Messaging and Message Queuing<br />
<a href="https://dzone.com/articles/comparing-publish-subscribe-messaging-and-message">https://dzone.com/articles/comparing-publish-subscribe-messaging-and-message</a>
</li>

<li>Apache Kafka<br />
<a href="https://kafka.apache.org/">https://kafka.apache.org/</a>
</li>

<li>Iron<br />
<a href="http://www.iron.io/mq">http://www.iron.io/mq</a>
</li>

<li>kue (založeno na Redisu, určeno pro node.js)<br />
<a href="https://github.com/Automattic/kue">https://github.com/Automattic/kue</a>
</li>

<li>Cloud Pub/Sub<br />
<a href="https://cloud.google.com/pubsub/">https://cloud.google.com/pubsub/</a>
</li>

<li>Introduction to Redis Streams<br />
<a href="https://redis.io/topics/streams-intro">https://redis.io/topics/streams-intro</a>
</li>

<li>glob (programming)<br />
<a href="https://en.wikipedia.org/wiki/Glob_(programming)">https://en.wikipedia.org/wiki/Glob_(programming)</a>
</li>

<li>Why and how Pricing Assistant migrated from Celery to RQ - Paris.py<br />
<a href="https://www.slideshare.net/sylvinus/why-and-how-pricing-assistant-migrated-from-celery-to-rq-parispy-2">https://www.slideshare.net/sylvinus/why-and-how-pricing-assistant-migrated-from-celery-to-rq-parispy-2</a>
</li>

<li>Enqueueing internals<br />
<a href="http://python-rq.org/contrib/">http://python-rq.org/contrib/</a>
</li>

<li>queue — A synchronized queue class<br />
<a href="https://docs.python.org/3/library/queue.html">https://docs.python.org/3/library/queue.html</a>
</li>

<li>Queues<br />
<a href="http://queues.io/">http://queues.io/</a>
</li>

<li>Windows Subsystem for Linux Documentation<br />
<a href="https://docs.microsoft.com/en-us/windows/wsl/about">https://docs.microsoft.com/en-us/windows/wsl/about</a>
</li>

<li>RestMQ<br />
<a href="http://restmq.com/">http://restmq.com/</a>
</li>

<li>ActiveMQ<br />
<a href="http://activemq.apache.org/">http://activemq.apache.org/</a>
</li>

<li>Amazon MQ<br />
<a href="https://aws.amazon.com/amazon-mq/">https://aws.amazon.com/amazon-mq/</a>
</li>

<li>Amazon Simple Queue Service<br />
<a href="https://aws.amazon.com/sqs/">https://aws.amazon.com/sqs/</a>
</li>

<li>Celery: Distributed Task Queue<br />
<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a>
</li>

<li>Disque, an in-memory, distributed job queue<br />
<a href="https://github.com/antirez/disque">https://github.com/antirez/disque</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

