<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Funkce vyššího řádu určené pro zpracování sekvencí v knihovně funcy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Funkce vyššího řádu určené pro zpracování sekvencí v knihovně funcy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Knihovna funcy, s níž jsme se začali seznamovat minule, nabízí programátorům i možnost zpracování sekvencí, ať již sekvencí konečných či nekonečných. Dnes se seznámíme s nejužitečnějšími funkcemi určenými pro zpracování sekvencí, příště si ukážeme tvorbu a zpracování nekonečných sekvencí.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Funkce vyššího řádu určené pro zpracování sekvencí v&nbsp;knihovně <i>funcy</i></a></p>
<p><a href="#k02">2. Sekvence a lazy sekvence v&nbsp;programovacích jazycích</a></p>
<p><a href="#k03">3. Funkce vyššího řádu <strong>filter</strong> z&nbsp;knihovny <i>funcy</i></a></p>
<p><a href="#k04">4. Funkce vyššího řádu <strong>lfilter</strong></a></p>
<p><a href="#k05">5. Předání lambda výrazu do funkcí vyššího řádu <strong>filter</strong> a <strong>lfilter</strong></a></p>
<p><a href="#k06">6. Rozšířená &bdquo;sémantika funkcí&ldquo; v&nbsp;knihovně <i>funcy</i></a></p>
<p><a href="#k07">7. Regulární výraz ve funkci predikátu</a></p>
<p><a href="#k08">8. Množina ve funkci predikátu</a></p>
<p><a href="#k09">9. Funkce vyššího řádu <strong>remove</strong> a <strong>lremove</strong></a></p>
<p><a href="#k10">10. Funkce vyššího řádu <strong>map</strong> v&nbsp;knihovně <i>funcy</i></a></p>
<p><a href="#k11">11. Funkce vyššího řádu <strong>lmap</strong></a></p>
<p><a href="#k12">12. Použití regulárního výrazu namísto transformační funkce v&nbsp;<strong>lmap</strong></a></p>
<p><a href="#k13">13. Získání unikátních prvků ze vstupní sekvence funkcí <strong>distinct</strong></a></p>
<p><a href="#k14">14. Filtrace prvků sekvence funkcí <strong>takewhile</strong></a></p>
<p><a href="#k15">15. Filtrace prvků sekvence funkcí <strong>dropwhile</strong></a></p>
<p><a href="#k16">16. Rozdělení sekvence na prvky odpovídající predikátu a na prvky, které predikátu neodpovídají</a></p>
<p><a href="#k17">17. Kombinace funkcí vyššího řádu <strong>takewhile</strong> a <strong>dropwhile</strong></a></p>
<p><a href="#k18">18. Rozdělení prvků sekvence do většího množství sekvencí pomocí <strong>partition_by</strong></a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Funkce vyššího řádu určené pro zpracování sekvencí v&nbsp;knihovně <i>funcy</i></h2>

<p>V&nbsp;seriálu o programovacím jazyce Clojure, který na Rootu vyšel, jsme se
již mnohokrát setkali s&nbsp;pojmem <i>sekvence</i>, popř.&nbsp;<i>nekonečné
sekvence</i> nebo dokonce <i>lazy (líné) sekvence</i>. Připomeňme si, že se
jedná o datovou abstrakci, která je sice velmi jednoduchá, ale o to užitečnější
v&nbsp;praxi &ndash; ostatně velká část standardní knihovny Clojure je na
sekvencích založena. Pro ty programátory, kteří programovací jazyk Clojure
znají a současně používají i Python, je určena minimalisticky pojatá knihovna
nazvaná <a href="https://github.com/bfontaine/clj">clj</a>. V&nbsp;této
knihovně nalezneme implementaci všech základních funkcí, které jsou
v&nbsp;Clojure určeny pro práci se sekvencemi. Tyto funkce je možné použít i
pro klasické seznamy a iterátory, jak ostatně uvidíme v&nbsp;dalším textu (i
když v&nbsp;poněkud jiném kontextu).</p>

<p>Dnes se ovšem zaměříme nikoli na výše zmíněnou knihovnu
<strong>clj</strong>, ale na knihovnu, které jsme se začali <a
href="https://www.root.cz/clanky/kdyz-moznosti-functools-nedostacuji-dalsi-knihovny-pro-funkcionalni-programovani-v-pythonu/">věnovat
minule</a> &ndash; jedná se o knihovnu s&nbsp;příhodným názvem
<strong>funcy</strong>. I tato knihovna programátorům poskytuje funkce pro
práci se sekvencemi, přičemž názvy příslušných operací jsou mnohdy totožné
s&nbsp;Clojure či s&nbsp;výše zmíněnou knihovnou <i>clj</i>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Sekvence a lazy sekvence v&nbsp;programovacích jazycích</h2>

<p>Naprostý základ pro práci se sekvencemi tvoří trojice funkcí nazvaných
<strong>first</strong>, <strong>rest</strong> a <strong>rest</strong>. Funkce
<strong>first</strong> vrací první prvek v&nbsp;sekvenci, popř.&nbsp;speciální
hodnotu <strong>None</strong> v&nbsp;případě, že je sekvence prázdná (pro tyto
funkce je typické, že nevyhazují výjimky). Funkce <strong>rest</strong> vrací
zbylé prvky v&nbsp;sekvenci. Běžných sekvencí, například seznamů, mohou být
tyto funkce implementovány přímočaře, ovšem v&nbsp;případě <i>lazy sekvencí</i>
se prvky vrácené pomocí funkce <strong>first</strong> vyhodnocují až za běhu,
například pomocí nějaké generátorové funkce. Tímto způsobem je možné pracovat i
s&nbsp;nekonečnými sekvencemi, u nichž už z&nbsp;principu nelze dopředu znát
celkový počet prvků atd.</p>

<p>Další poskytované funkce nad touto abstrakcí staví další vrstvu abstrakce,
která umožňuje pracovat se sekvencemi voláním několika funkcí vyššího řádu,
navíc bez nutnosti psát explicitně programové smyčky (ty se ostatně píšou
resp.&nbsp;spouští špatně pro nekonečné sekvence). Mezi funkce z&nbsp;další
vrstvy abstrakce patří zejména:</p>

<table>
<tr><th>Operace</th><th>Funkce</th></tr>
<tr><td>výběr prvků na základě kritéria</td><td>filter, lfilter, remove, lremove</td></tr>
<tr><td>nová sekvence získaná aplikací nějaké funkce na všechny prvky původní sekvence</td><td>map, lmap</td></tr>
<tr><td>výběr unikátních prvků ze sekvence</td><td>distinct</td></tr>
<tr><td>filtrace s&nbsp;vyhledáním prvního &bdquo;důležitého&ldquo; prvku (zarážky)</td><td>takewhile</td></tr>
<tr><td>filtrace až do prvního &bdquo;důležitého&ldquo; prvku</td><td>takewhile</td></tr>
<tr><td>rozdělení prvků do několika sekvencí</td><td>split, split_by, partition_by</td></tr>
</table>

<p>Všechny tyto funkce si dnes popíšeme.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Funkce vyššího řádu <strong>filter</strong> z&nbsp;knihovny <i>funcy</i></h2>

<p>S&nbsp;funkcí vyššího řádu <strong>filter</strong> jsme se již v&nbsp;tomto
miniseriálu setkali, mj.&nbsp;i proto, že se jedná o funkci, která je součástí
standardní knihovny programovacího jazyka Python (a dokonce ji nalezneme i ve
výchozím jmenném prostoru, takže ji ani nemusíme importovat). Připomeňme si, že
tato funkce vybere (vyfiltruje) prvky z&nbsp;nějaké sekvence na základě
vyhodnocení takzvaného <i>predikátu</i>, což je funkce, která pro každý prvek
vrací pravdivostní hodnotu (resp.&nbsp;v&nbsp;Pythonu libovolnou hodnotu, která
je ovšem chápána v&nbsp;pravdivostním kontextu).</p>

<p>Podívejme se na jednoduchý příklad, který již známe:</p>

<pre>
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
filtered = <strong>filter(lambda word: len(word) &gt; 4, words)</strong>
print(filtered)
print(list(filtered))
&nbsp;
print()
&nbsp;
filtered = <strong>filter(lambda word: len(word) &lt;= 4, words)</strong>
print(filtered)
print(list(filtered))
</pre>

<p>Výsledky budou vypadat následovně:</p>

<pre>
&lt;filter object at 0x7f40b0bb2040&gt;
['Lorem', 'ipsum', 'dolor', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'eiusmod', 'tempor', 'incididunt', 'labore', 'dolore', 'magna', 'aliqua']
&nbsp;
&lt;filter object at 0x7f40b0b85c70&gt;
['sit', 'sed', 'do', 'ut', 'et']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_1.py</a>.</div></p>

<p>I v&nbsp;knihovně <i>funcy</i> nalezneme funkci nazvanou
<strong>filter</strong>. Tato funkce je <i>zdánlivě</i> totožná se standardní
funkcí <strong>filter</strong>, ovšem v&nbsp;dalších kapitolách uvidíme, že
jsou její schopnosti ve skutečnosti mnohem větší. Ale pro standardní predikáty
i pro stejný vstup získáme naprosto totožné výsledky:</p>

<pre>
from funcy import filter
&nbsp;
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
filtered = <strong>filter(lambda word: len(word) &gt; 4, words)</strong>
print(filtered)
print(list(filtered))
&nbsp;
print()
&nbsp;
filtered = <strong>filter(lambda word: len(word) &lt;= 4, words)</strong>
print(filtered)
print(list(filtered))
</pre>

<p>Výsledky budou vypadat naprosto stejně, jako v&nbsp;prvním příkladu:</p>

<pre>
&lt;filter object at 0x7f02645f5040&gt;
['Lorem', 'ipsum', 'dolor', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'eiusmod', 'tempor', 'incididunt', 'labore', 'dolore', 'magna', 'aliqua']
&nbsp;
&lt;filter object at 0x7f02645c8c10&gt;
['sit', 'sed', 'do', 'ut', 'et']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_2.py</a>.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Funkce vyššího řádu <strong>lfilter</strong></h2>

<p>Kromě známé funkce <strong>filter</strong> nalezneme v&nbsp;knihovně
<i>funcy</i> i funkci nazvanou podobně, ovšem s&nbsp;prefixem &bdquo;l&ldquo;.
Plné jméno této funkce tedy zní <strong>lfilter</strong> a onen prefix
&bdquo;l&ldquo; znamená, že výsledkem činnosti této funkce není generátor, ale
plnohodnotný seznam (<i>list</i>). Ostatní vlastnosti ovšem zůstanou zachovány,
o čemž se můžeme velmi snadno přesvědčit spuštěním následujícího skriptu:</p>

<pre>
from funcy import lfilter
&nbsp;
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
filtered = <strong>lfilter(lambda word: len(word) &gt; 4, words)</strong>
print(filtered)
print(list(filtered))
&nbsp;
print()
&nbsp;
filtered = <strong>lfilter(lambda word: len(word) &lt;= 4, words)</strong>
print(filtered)
print(list(filtered))
</pre>

<p>Výsledkem by měl být po obou voláních seznam, takže další převod na seznam
standardní funkcí <strong>list</strong> je již v&nbsp;tomto případě
zbytečný:</p>

<pre>
['Lorem', 'ipsum', 'dolor', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'eiusmod', 'tempor', 'incididunt', 'labore', 'dolore', 'magna', 'aliqua']
['Lorem', 'ipsum', 'dolor', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'eiusmod', 'tempor', 'incididunt', 'labore', 'dolore', 'magna', 'aliqua']
&nbsp;
['sit', 'sed', 'do', 'ut', 'et']
['sit', 'sed', 'do', 'ut', 'et']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_3.py</a>.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Předání lambda výrazu do funkcí vyššího řádu <strong>filter</strong> a <strong>lfilter</strong></h2>

<p>Asi nebude velkým překvapením, že jak do funkce <strong>filter</strong>, tak
i do funkce <strong>lfilter</strong> lze předat libovolný lambda výraz, jehož
výsledek je použit pro určení, zda se má právě testovaný prvek předat do
výsledné sekvence (či seznamu). Jen pro naprostou úplnost:</p>

<pre>
from funcy import filter, lfilter
&nbsp;
data = range(0, 11)
&nbsp;
print("filter")
&nbsp;
filtered = <strong>filter(lambda value : value %2 == 1, data)</strong>
print(list(filtered))
&nbsp;
filtered = <strong>filter(lambda value : value %2 == 0, data)</strong>
print(list(filtered))
&nbsp;
print()
print("lfilter")
&nbsp;
filtered = <strong>lfilter(lambda value : value %2 == 1, data)</strong>
print(filtered)
&nbsp;
filtered = <strong>lfilter(lambda value : value %2 == 0, data)</strong>
print(filtered)
</pre>

<p>Výsledky by měly vypadat následovně:</p>

<pre>
filter
[1, 3, 5, 7, 9]
[0, 2, 4, 6, 8, 10]
&nbsp;
lfilter
[1, 3, 5, 7, 9]
[0, 2, 4, 6, 8, 10]
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_4.py</a>.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Rozšířená &bdquo;sémantika funkcí&ldquo; v&nbsp;knihovně <i>funcy</i></h2>

<p>Vážený čtenář se pravděpodobně po přečtení <a href="#k05">předchozí
kapitoly</a> ptá, proč je vůbec zdůrazněno, že funkce <strong>filter</strong> a
<strong>lfilter</strong> akceptují lambda výraz (či běžnou funkci). To je přece
naprosto logické a očekávatelné. Ovšem v&nbsp;knihovně <i>funcy</i> je
&bdquo;sémantika funkcí&ldquo; u predikátů rozšířena, což znamená, že namísto
běžné funkce můžeme do <strong>filter</strong> či <strong>lfilter</strong>
předat i jinou hodnotu ve funkci predikátu. Jak bude tato hodnota využita je
naznačeno v&nbsp;tabulce:</p>

<table>
<tr><th>Typ hodnoty</th><th>Způsob využití jako predikátu</th></tr>
<tr><td>funkce</td><td>klasický predikát volaný s&nbsp;hodnotou aktuálně zpracovávaného prvku</td></tr>
<tr><td>lambda výraz</td><td>klasický predikát volaný s&nbsp;hodnotou aktuálně zpracovávaného prvku</td></tr>
<tr><td>řetězec</td><td>testování prvku s&nbsp;využitím <strong>re_tester</strong> (tedy řetězec je chápán jako regulární výraz)</td></tr>
<tr><td>množina</td><td>test, zda je zpracovávaný prvek prvkem této množiny</td></tr>
<tr><td>celé číslo</td><td>volá se <strong>itemgetter(f)</strong></td></tr>
</table>



<p><a name="k07"></a></p>
<h2 id="k07">7. Regulární výraz ve funkci predikátu</h2>

<p>Podívejme se nyní, jak snadné je zadat regulární výraz ve funkci predikátu.
Může se dokonce jednat o běžný řetězec, který je vyhledáván ve vstupních
prvcích a pokud je nalezen, je prvek vložen do výsledné sekvence a/nebo seznamu
(v&nbsp;závislosti na tom, zda se použije <strong>filter</strong> nebo
<strong>lfilter</strong>). V&nbsp;posledním případě vyhledáváme ta slova, která
končí na &bdquo;or&ldquo;, ostatní případy vyhledávají sekvenci znaků kdekoli
ve slově:</p>

<pre>
from funcy import lfilter
&nbsp;
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
filtered = <strong>lfilter("et", words)</strong>
print(filtered)
&nbsp;
filtered = <strong>lfilter("a", words)</strong>
print(filtered)
&nbsp;
filtered = <strong>lfilter("o", words)</strong>
print(filtered)
&nbsp;
filtered = <strong>lfilter("or$", words)</strong>
print(filtered)
</pre>

<p>Výsledky získané po spuštění tohoto demonstračního příkladu:</p>

<pre>
['amet,', 'consectetur', 'et']
['amet,', 'adipiscing', 'labore', 'magna', 'aliqua']
['Lorem', 'dolor', 'consectetur', 'do', 'eiusmod', 'tempor', 'labore', 'dolore']
['dolor', 'tempor']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_5.py</a>.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Množina ve funkci predikátu</h2>

<p>Víme již, že jako predikát lze zadat i množinu. Každý prvek, který je
v&nbsp;této množině nalezen, se stane součástí výsledné sekvence (nebo
seznamu), takže vlastní způsob použití je triviální:</p>

<pre>
from funcy import lfilter
&nbsp;
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
filtered = <strong>lfilter({"sit"}, words)</strong>
print(filtered)
&nbsp;
filtered = <strong>lfilter({"sit", "sed", "do"}, words)</strong>
print(filtered)
&nbsp;
filtered = <strong>lfilter({"foo", "sed", "bar"}, words)</strong>
print(filtered)
</pre>

<p>Výsledky dokazují, jak vše pracuje:</p>

<pre>
['sit']
['sit', 'sed', 'do']
['sed']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_6.py</a>.</div></p>

<p>Množina je sice použita jako predikát, ovšem ve výsledné sekvenci/seznamu se
samozřejmě prvky mohou opakovat (nejedná se o množinu). Zkusme si to na
sekvenci slov, kde se jednotlivá slova 3&times; opakují:</p>

<pre>
from funcy import lfilter
&nbsp;
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
message *= 3
&nbsp;
print(message)
&nbsp;
words = message.split()
&nbsp;
filtered = <strong>lfilter({"sit"}, words)</strong>
print(filtered)
&nbsp;
filtered = <strong>lfilter({"sit", "sed", "do"}, words)</strong>
print(filtered)
&nbsp;
filtered = <strong>lfilter({"foo", "sed", "bar"}, words)</strong>
print(filtered)
</pre>

<p>Výsledné zprávy ukazují, že ve vytvořených seznamech se prvky skutečně mohou
opakovat:</p>

<pre>
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
incididunt ut labore et dolore magna aliquaLorem ipsum dolor sit amet,
consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et
dolore magna aliquaLorem ipsum dolor sit amet, consectetur adipiscing elit, sed
do eiusmod tempor incididunt ut labore et dolore magna aliqua
['sit', 'sit', 'sit']
['sit', 'sed', 'do', 'sit', 'sed', 'do', 'sit', 'sed', 'do']
['sed', 'sed', 'sed']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_7.py</a>.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Funkce vyššího řádu <strong>remove</strong> a <strong>lremove</strong></h2>

<p>Funkce <strong>filter</strong> a <strong>lfilter</strong> se používají pro
vytvoření nové sekvence (nebo seznamu), která bude obsahovat jen ty prvky ze
sekvence původní, které odpovídají nějakému predikátu (predikát je obecně
funkce vracející pro svůj jediný vstup pravdivostní hodnotu). Funkce
<strong>remove</strong> a <strong>lremove</strong> pracují přesně naopak,
tj.&nbsp;odstraňují ze sekvence/seznamu ty prvky, které odpovídají
predikátu.</p>

<p><div class="rs-tip-major">Poznámka: jedná se tedy o obdobu
<strong>filter/lfilter</strong>, ovšem význam predikátu je znegován.</div></p>

<p>Otestování funkce <strong>remove</strong> bude snadné. Nejprve si vyzkoušíme
odstranění příliš krátkých či naopak příliš dlouhých slov:</p>

<pre>
from funcy import remove
&nbsp;
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
removed = <strong>remove(lambda word: len(word) &gt; 4, words)</strong>
print(removed)
print(list(removed))
&nbsp;
print()
&nbsp;
removed = <strong>remove(lambda word: len(word) &lt;= 4, words)</strong>
print(removed)
print(list(removed))
</pre>

<p>S&nbsp;tímto výsledkem:</p>

<pre>
&lt;itertools.filterfalse object at 0x7f0d7b3b9040&gt;
['sit', 'sed', 'do', 'ut', 'et']
&nbsp;
&lt;itertools.filterfalse object at 0x7f0d7b38cbe0&gt;
['Lorem', 'ipsum', 'dolor', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'eiusmod', 'tempor', 'incididunt', 'labore', 'dolore', 'magna', 'aliqua']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_1.py</a>.</div></p>

<p>Namísto funkce <strong>remove</strong> můžeme použít i funkci
<strong>lremove</strong> s&nbsp;odlišným typem výsledků:</p>

<pre>
from funcy import lremove
&nbsp;
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
removed = <strong>lremove(lambda word: len(word) &gt; 4, words)</strong>
print(removed)
print(list(removed))
&nbsp;
print()
&nbsp;
removed = <strong>lremove(lambda word: len(word) &lt;= 4, words)</strong>
print(removed)
print(list(removed))
</pre>

<p>Výsledky:</p>

<pre>
['sit', 'sed', 'do', 'ut', 'et']
['sit', 'sed', 'do', 'ut', 'et']
&nbsp;
['Lorem', 'ipsum', 'dolor', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'eiusmod', 'tempor', 'incididunt', 'labore', 'dolore', 'magna', 'aliqua']
['Lorem', 'ipsum', 'dolor', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'eiusmod', 'tempor', 'incididunt', 'labore', 'dolore', 'magna', 'aliqua']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_2.py</a>.</div></p>

<p>Použití <strong>lremove</strong> společně s&nbsp;regulárními výrazy namísto
predikátů:</p>

<pre>
from funcy import lremove
&nbsp;
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
removed = <strong>lremove("et", words)</strong>
print(removed)
&nbsp;
removed = <strong>lremove("a", words)</strong>
print(removed)
&nbsp;
removed = <strong>lremove("o", words)</strong>
print(removed)
</pre>

<p>Výsledky:</p>

<pre>
['Lorem', 'ipsum', 'dolor', 'sit', 'adipiscing', 'elit,', 'sed', 'do', 'eiusmod', 'tempor', 'incididunt', 'ut', 'labore', 'dolore', 'magna', 'aliqua']
['Lorem', 'ipsum', 'dolor', 'sit', 'consectetur', 'elit,', 'sed', 'do', 'eiusmod', 'tempor', 'incididunt', 'ut', 'et', 'dolore']
['ipsum', 'sit', 'amet,', 'adipiscing', 'elit,', 'sed', 'incididunt', 'ut', 'et', 'magna', 'aliqua']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_3.py</a>.</div></p>

<p>A konečně použití <strong>lremove</strong> společně s&nbsp;množinami namísto
predikátu:</p>

<pre>
from funcy import lremove
&nbsp;
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
removed = <strong>lremove({"sit"}, words)</strong>
print(removed)
&nbsp;
removed = <strong>lremove({"sit", "sed", "do", "amet"}, words)</strong>
print(removed)
&nbsp;
removed = <strong>lremove({"foo", "sed", "bar"}, words)</strong>
print(removed)
</pre>

<p>Výsledky nyní budou vypadat následovně:</p>

<pre>
['Lorem', 'ipsum', 'dolor', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'sed', 'do', 'eiusmod', 'tempor', 'incididunt', 'ut', 'labore', 'et', 'dolore', 'magna', 'aliqua']
['Lorem', 'ipsum', 'dolor', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'eiusmod', 'tempor', 'incididunt', 'ut', 'labore', 'et', 'dolore', 'magna', 'aliqua']
['Lorem', 'ipsum', 'dolor', 'sit', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'do', 'eiusmod', 'tempor', 'incididunt', 'ut', 'labore', 'et', 'dolore', 'magna', 'aliqua']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_4.py</a>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Funkce vyššího řádu <strong>map</strong> v&nbsp;knihovně <i>funcy</i></h2>

<p>V&nbsp;knihovně <i>funcy</i> nalezneme i klasickou funkci vyššího řádu
nazvanou <strong>map</strong>. Připomeňme si, že základní variantu této funkce
již velmi dobře známe, protože je součástí standardního jmenného prostoru
Pythonu. Jen pro zopakování si ukažme, jak tato funkce dokáže na jednotlivé
prvky vstupní sekvence aplikovat nějakou uživatelem zadanou funkci, například
funkci <strong>len</strong>:</p>

<pre>
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
lengths = <strong>map(len, words)</strong>
&nbsp;
print(lengths)
print(list(lengths))
</pre>

<p>Výsledkem bude speciální objekt, který lze ovšem v&nbsp;případě potřeby
převést na seznam:</p>

<pre>
&lt;map object at 0x7f2cf895d040&gt;
[5, 5, 5, 3, 5, 11, 10, 5, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6]
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_1.py</a>.</div></p>

<p>Funkce <strong>map</strong> z&nbsp;knihovny <i>funcy</i> se bude pro stejné
vstupy chovat naprosto totožným způsobem:</p>

<pre>
from funcy import map
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
lengths = <strong>map(len, words)</strong>
&nbsp;
print(lengths)
print(list(lengths))
</pre>

<p>Výsledky:</p>

<pre>
&lt;map object at 0x7f2500a2f040&gt;
[5, 5, 5, 3, 5, 11, 10, 5, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6]
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_2.py</a>.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Funkce vyššího řádu <strong>lmap</strong></h2>

<p>Podobně jako existuje funkce <strong>filter</strong> ve dvou variantách
nazvaných <strong>filter</strong> a <strong>lfilter</strong>, je tomu podobně i
u funkce <strong>map</strong>, ke které existuje alternativa nazvaná
<strong>lmap</strong> vracející přímo seznam a nikoli speciální objekt
&bdquo;map&ldquo;. Tuto funkci si opět můžeme velmi snadno otestovat:</p>

<pre>
from funcy import lmap
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
lengths = <strong>lmap(len, words)</strong>
&nbsp;
print(lengths)
print(list(lengths))
</pre>

<p>Výsledkem volání <strong>lmap</strong> je seznam, takže se po spuštění
tohoto skriptu vypíšou dva totožné řádky:</p>

<pre>
[5, 5, 5, 3, 5, 11, 10, 5, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6]
[5, 5, 5, 3, 5, 11, 10, 5, 3, 2, 7, 6, 10, 2, 6, 2, 6, 5, 6]
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_3.py</a>.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Použití regulárního výrazu namísto transformační funkce v&nbsp;<strong>lmap</strong></h2>

<p>I u funkcí <strong>map</strong> a <strong>lmap</strong> lze namísto klasické
transformační funkce použít regulární výraz. Interně se potom bude volat
standardní funkce <strong>re_find</strong>, která vrátí nalezený řetězec,
resp.&nbsp;přesněji řečeno řetězec odpovídající regulárnímu výrazu.</p>

<p>Nejprve si vše otestujme na regulárním výrazu, který pouze obsahuje nějakou
sekvenci znaků a nikoli znaky se speciálním významem (hvězdičky, tečky,
otazníky, závorky všeho druhu atd.):</p>

<pre>
from funcy import lmap
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
found = <strong>lmap("olo", words)</strong>
&nbsp;
print(found)
</pre>

<p>Výsledkem bude následující seznam (v&nbsp;případě <strong>map</strong> pak
sekvence), obsahující prakticky samé hodnoty <strong>None</strong> pro slova,
která neobsahují sekvenci znaků &bdquo;olo&ldquo; a hodnoty &bdquo;olo&ldquo;
pro původní slova &bdquo;dolor&ldquo; a &bdquo;dolore&ldquo;:</p>

<pre>
[None, None, 'olo', None, None, None, None, None, None, None, None, None, None, None, None, None, 'olo', None, None]
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_4.py</a>.</div></p>

<p>Zajímavější situace nastane, pokud bude regulární výraz obsahovat žolíkové
znaky atd.:</p>

<pre>
from funcy import lmap
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
found = <strong>lmap(".*olo.*", words)</strong>
&nbsp;
print(found)
</pre>

<p>Nyní bude možné všechna slova obsahující sekvenci znaků &bdquo;olo&ldquo;
ponechat na výstupu, zbylá slova se nahradí za <strong>None</strong>:</p>

<pre>
[None, None, 'dolor', None, None, None, None, None, None, None, None, None, None, None, None, None, 'dolore', None, None]
</pre>

<p>Regulární výrazy ve funkcích <strong>map/lmap</strong> tedy mají poněkud
méně způsobů použití, než ve funkcích
<strong>filter/lfilter/remove/lremove</strong>.</p>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_5.py</a>.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Získání unikátních prvků ze vstupní sekvence funkcí <strong>distinct</strong></h2>

<p>Další užitečnou dvojicí funkcí pro práci se sekvencemi, kterou nalezneme
v&nbsp;knihovně <i>funcy</i>, jsou funkce určené pro získání všech unikátních
prvků ze vstupní sekvence &ndash; tj.&nbsp;výsledkem bude nová sekvence nebo
seznam, v&nbsp;němž nebudou duplikátní prvky. Tato dvojice funkcí se jmenuje
<strong>distinct</strong> a <strong>ldistinct</strong> (tj.&nbsp;jedná se o
jméno, které nalezneme i v&nbsp;mnoha funkcionálních programovacích
jazycích).</p>

<p>Podívejme se nejdříve na funkci <strong>distinct</strong> aplikovanou na
sekvenci slov, přičemž se všechna slova v&nbsp;této sekvenci opakují nejméně
třikrát:</p>

<pre>
from funcy import distinct
&nbsp;
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
message *= 3
&nbsp;
print(message)
&nbsp;
words = message.split()
&nbsp;
distilled = <strong>distinct(words)</strong>
print(distilled)
print(list(distilled))
</pre>

<p>Tento skript nejprve vypíše upravený vstup (původní zpráva je ještě dvakrát
zduplikována) a dále výsledek získaný funkcí <strong>distinct</strong>:</p>

<pre>
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliquaLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliquaLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua
&lt;generator object distinct at 0x7f76aa513510&gt;
['Lorem', 'ipsum', 'dolor', 'sit', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'sed', 'do', 'eiusmod', 'tempor', 'incididunt', 'ut', 'labore', 'et', 'dolore', 'magna', 'aliquaLorem', 'aliqua']
</pre>

<p>Povšimněte si, že ve výsledné sekvenci se skutečně žádné slovo neopakuje
&ndash; všechny prvky jsou unikátní.</p>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/distinct_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/distinct_1.py</a>.</div></p>

<p>Funkce <strong>ldistinct</strong> se od výše popsané funkce
<strong>distinct</strong> odlišuje jen tím, že &ndash; jak jste správně uhodli
&ndash; nevrací sekvenci, ale seznam s&nbsp;unikátními prvky:</p>

<pre>
from funcy import ldistinct
&nbsp;
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
message *= 3
&nbsp;
print(message)
&nbsp;
words = message.split()
&nbsp;
distilled = <strong>ldistinct(words)</strong>
print(distilled)
print(list(distilled))
</pre>

<p>Výsledky vypsané tímto skriptem ukazují, že se skutečně vrátil přímo seznam
(dvě poslední zprávy jsou totožné):</p>

<pre>
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliquaLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliquaLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua
['Lorem', 'ipsum', 'dolor', 'sit', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'sed', 'do', 'eiusmod', 'tempor', 'incididunt', 'ut', 'labore', 'et', 'dolore', 'magna', 'aliquaLorem', 'aliqua']
['Lorem', 'ipsum', 'dolor', 'sit', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'sed', 'do', 'eiusmod', 'tempor', 'incididunt', 'ut', 'labore', 'et', 'dolore', 'magna', 'aliquaLorem', 'aliqua']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/distinct_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/distinct_2.py</a>.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Filtrace prvků sekvence funkcí <strong>takewhile</strong></h2>

<p>Ze sekvencí (a to i ze sekvencí nekonečných) je možné získat začátek či
naopak zbytek sekvence s&nbsp;využitím funkcí nazvaných
<strong>takewhile</strong> a <strong>dropwhile</strong>. Těmto funkcím je
zapotřebí v&nbsp;prvním parametru předat takzvaný <i>predikát</i> určující, zda
prvek splňuje nějakou podmínku (ovšem pozor &ndash; chování je odlišné od již
dříve popsané funkce <strong>filter</strong> či <strong>remove</strong>).
V&nbsp;případě prvního parametru předávaného do <strong>takewhile</strong> a
<strong>dropwhile</strong> se jedná o běžnou funkci popř.&nbsp;o funkci
anonymní, která by měla akceptovat jeden parametr (hodnotu prvku ze sekvence) a
vracet by měla pravdivostní hodnotu <strong>True</strong> či
<strong>False</strong> popř.&nbsp;<strong>None</strong> atd., který má
v&nbsp;kontextu pravdivostních hodnot stejný význam jako
<strong>False</strong>.</p>

<p>Podívejme se, jak lze získat ty prvky ze začátku sekvence, které jsou menší
než 10 (výsledkem může být i prázdná sekvence):</p>

<pre>
from funcy import takewhile
&nbsp;
values = range(1000)
&nbsp;
selected = <strong>takewhile(lambda x:x &lt; 10, values)</strong>
&nbsp;
print(selected)
print(list(selected))
</pre>

<p>Výsledek:</p>

<pre>
&lt;itertools.takewhile object at 0x7f4593b7bd80&gt;
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/take_while_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/take_while_1.py</a>.</div></p>

<p>Ve druhém demonstračním příkladu začneme procházet sekvencí slov s&nbsp;tím,
že se zastavíme na prvním slovu, které nebude delší než dva znaky:</p>

<pre>
from funcy import takewhile
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
filtered = <strong>takewhile(lambda x:len(x) &gt; 2, words)</strong>
&nbsp;
print(filtered)
print(list(filtered))
</pre>

<p>Výsledek:</p>

<pre>
&lt;itertools.takewhile object at 0x7f4250789dc0&gt;
['Lorem', 'ipsum', 'dolor', 'sit', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'sed']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/take_while_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/take_while_2.py</a>.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Filtrace prvků sekvence funkcí <strong>dropwhile</strong></h2>

<p>Vyzkoušejme si nyní funkci vyššího řádu <strong>dropwhile</strong>.
Přeskočíme všechny prvky na začátku sekvence, které jsou ostře menší než 990.
Vrátí se zbytek sekvence, v&nbsp;tomto konkrétním případě hodnoty od 990 do 999
(včetně):</p>

<pre>
from funcy import dropwhile
&nbsp;
values = range(1000)
&nbsp;
selected = <strong>dropwhile(lambda x:x &lt; 990, values)</strong>
&nbsp;
print(selected)
print(list(selected))
</pre>

<p>Výsledek:</p>

<pre>
&lt;itertools.dropwhile object at 0x7f9a46e10e00&gt;
[990, 991, 992, 993, 994, 995, 996, 997, 998, 999]
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/drop_while_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/drop_while_1.py</a>.</div></p>

<p>V&nbsp;dalším skriptu se přeskočí všechna slova na začátku sekvence, která
jsou delší než dva znaky. Jakmile se nalezne kratší slovo, vrátí se celý zbytek
sekvence:</p>

<pre>
from funcy import dropwhile
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
filtered = <strong>dropwhile(lambda x:len(x) &gt; 2, words)</strong>
&nbsp;
print(filtered)
print(list(filtered))
</pre>

<p>Výsledek:</p>

<pre>
&lt;itertools.dropwhile object at 0x7f6604fbad00&gt;
['do', 'eiusmod', 'tempor', 'incididunt', 'ut', 'labore', 'et', 'dolore', 'magna', 'aliqua']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/drop_while_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/drop_while_2.py</a>.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Rozdělení sekvence na prvky odpovídající predikátu a na prvky, které predikátu neodpovídají</h2>

<p>Potenciálně velmi užitečná je funkce nazvaná <strong>split</strong>. Jedná
se o kombinaci funkcí <strong>filter</strong> a <strong>remove</strong> &ndash;
<strong>split</strong> vrátí dvě hodnoty, přičemž první hodnotou bude sekvence
s&nbsp;prvky odpovídajícími predikátu a ve druhé hodnotě budou všechny prvky,
které predikátu neodpovídají:</p>

<pre>
from funcy import split
&nbsp;
values = range(50)
&nbsp;
selected, unselected = <strong>split(lambda x:x &lt; 25, values)</strong>
&nbsp;
print(list(selected))
print(list(unselected))
</pre>

<p>Pokud tento skript spustíme, vrátí se dvě sekvence s&nbsp;tímto obsahem:</p>

<pre>
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
[25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_1.py</a>.</div></p>

<p>Existuje samozřejmě i alternativní funkce nazvaná <strong>lsplit</strong>,
která vrací dvojici seznamů:</p>

<pre>
from funcy import lsplit
&nbsp;
values = range(50)
&nbsp;
selected, unselected = <strong>lsplit(lambda x:x &lt; 25, values)</strong>
&nbsp;
print(selected)
print(unselected)
</pre>

<p>Výsledek získaný po spuštění tohoto skriptu bude stejný, jako
v&nbsp;předchozím případě, ovšem chybí zde konstruktor seznamu
<strong>list</strong>:</p>

<pre>
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
[25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_2.py</a>.</div></p>

<p>Podobně si můžeme nechat rozdělit sekvenci slov na dlouhá a krátká
slova:</p>

<pre>
from funcy import split
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
selected, unselected = <strong>split(lambda x:len(x) &gt; 5, words)</strong>
&nbsp;
print(list(selected))
print(list(unselected))
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
['consectetur', 'adipiscing', 'eiusmod', 'tempor', 'incididunt', 'labore', 'dolore', 'aliqua']
['Lorem', 'ipsum', 'dolor', 'sit', 'amet,', 'elit,', 'sed', 'do', 'ut', 'et', 'magna']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_3.py</a>.</div></p>

<p>A pro úplnost alternativní řešení založené na funkci vyššího řádu
<strong>lsplit</strong>:</p>

<pre>
from funcy import lsplit
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
selected, unselected = <strong>lsplit(lambda x:len(x) &gt; 5, words)</strong>
&nbsp;
print(selected)
print(unselected)
</pre>

<p>Výsledná dvojice seznamů:</p>

<pre>
['consectetur', 'adipiscing', 'eiusmod', 'tempor', 'incididunt', 'labore', 'dolore', 'aliqua']
['Lorem', 'ipsum', 'dolor', 'sit', 'amet,', 'elit,', 'sed', 'do', 'ut', 'et', 'magna']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_4.py</a>.</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Kombinace funkcí vyššího řádu <strong>takewhile</strong> a <strong>dropwhile</strong></h2>

<p><a href="#k16">V&nbsp;předchozí kapitole</a> jsme si ukázali, jak snadno se
s&nbsp;využitím funkce <strong>split</strong> daly zkombinovat algoritmy
realizované ve funkcích <strong>filter</strong> a <strong>remove</strong>.
Knihovna <i>funcy</i> jde ovšem ještě dále a nabízí uživatelům možnost
kombinace funkcí <strong>takewhile</strong> a <strong>dropwhile</strong>, které
vlastně mají taktéž &bdquo;komplementární&ldquo; význam. Ona kombinace je
realizována ve funkci nazvané <strong>split_by</strong>, které se předává
predikát a vstupní sekvence. Funkce <strong>split_by</strong> vrátí dvojici
sekvencí, přičemž v&nbsp;první výstupní sekvenci budou uloženy prvky získané ze
začátku vstupní sekvence, které odpovídají predikátu, a ve druhé výstupní
sekvenci zbytek vstupní sekvence (tj.&nbsp;od toho prvku, který jako první
<strong>ne</strong>odpovídá predikátu).</p>

<p>Podívejme se, jak to bude vypadat pro vstupní sekvenci s&nbsp;hodnotami 0 až
99 a predikát &bdquo;x &lt; 10&ldquo;:</p>

<pre>
from funcy import split_by
&nbsp;
values = range(100)
&nbsp;
selected, rest = <strong>split_by(lambda x:x &lt; 10, values)</strong>
&nbsp;
print(list(selected))
print(list(rest))
</pre>

<p>Výsledkem budou dvě sekvence; rozdělení začalo (podle očekávání) na prvku
s&nbsp;hodnotou 10, který již predikátu neodpovídá:</p>

<pre>
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_by_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_by_1.py</a>.</div></p>

<p>Podobným způsobem můžeme zpracovat sekvenci slov takovým způsobem, že
nalezneme první slovo, které je kratší než dva znaky. Prvky před tímto slovem
budou vráceny v&nbsp;první výstupní sekvenci, zbylé prvky pak v&nbsp;sekvenci
druhé:</p>

<pre>
from funcy import split_by
&nbsp;
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
words = message.split()
&nbsp;
filtered, rest = <strong>split_by(lambda x:len(x) &gt; 2, words)</strong>
&nbsp;
print(list(filtered))
print(list(rest))
</pre>

<p>Příslušné výstupní sekvence budou vypadat takto:</p>

<pre>
['Lorem', 'ipsum', 'dolor', 'sit', 'amet,', 'consectetur', 'adipiscing', 'elit,', 'sed']
['do', 'eiusmod', 'tempor', 'incididunt', 'ut', 'labore', 'et', 'dolore', 'magna', 'aliqua']
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_by_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_by_2.py</a>.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Rozdělení prvků sekvence do většího množství sekvencí pomocí <strong>partition_by</strong></h2>

<p>Poslední funkcí, s&nbsp;níž se v&nbsp;dnešním článku seznámíme, je funkce
nazvaná <strong>partition_by</strong>. Tato funkce rozdělí vstupní sekvenci do
(obecně libovolného) množství výstupních sekvencí na základě výsledku získaného
výpočtem realizovaným v&nbsp;předané funkci. Pokud tato funkce vrací stejný
výsledek (libovolného typu či hodnoty), budou prvky ukládány do stejné výstupní
sekvence. Jakmile se výsledek této funkce změní, je vytvořena nová výstupní
sekvence a prvky začnou být ukládány do ní.</p>

<p><div class="rs-tip-major">Poznámka: pozor je zapotřebí si dát na to, že
nedojde k&nbsp;seskupení těch prvků, pro něž předaná funkce vrací stejné
hodnoty! Například takto není možné rozdělit slova podle jejich délky &ndash;
museli bychom slova nejdříve seřadit podle délky a teprve poté zavolat
<strong>partition_by</strong>.</div></p>

<p>Podívejme se nyní na jednoduchý příklad použití této funkce pro rozdělení
sekvence celočíselných hodnot 0 až 19 do skupin po pěti prvcích. Povšimněte si,
že počítanou hodnotou je x//5, tedy celočíselný podíl hodnoty prvku pěti, což u
monotonně rostoucí sekvence bude plně funkční:</p>

<pre>
from funcy import partition_by
&nbsp;
values = range(20)
&nbsp;
sequences = <strong>partition_by(lambda x : x // 5, values)</strong>
&nbsp;
for sequence in sequences:
    print(list(sequence))
</pre>

<p>Výsledkem bude čtveřice sekvencí resp.&nbsp;přesněji řečeno sekvence se
čtyřmi prvky typu sekvence:</p>

<pre>
[0, 1, 2, 3, 4]
[5, 6, 7, 8, 9]
[10, 11, 12, 13, 14]
[15, 16, 17, 18, 19]
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/partition_by.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/partition_by.py</a>.</div></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si prozatím v&nbsp;tomto seriálu
ukázali, naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je nutné mít
nainstalovánu některou z&nbsp;podporovaných verzí Pythonu 3, a pro dnešní
příklady i výše zmíněnou knihovnu <strong>funcy</strong>):</p>

<table>
<tr><th>  #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>  1</td><td>binary_operator.py</td><td>ukázka funkce vyššího řádu, která jako parametr akceptuje jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator.py</a></td></tr>
<tr><td>  2</td><td>get_operator_1.py</td><td>ukázka funkce vyššího řádu, která vrací jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_1.py</a></td></tr>
<tr><td>  3</td><td>get_operator_2.py</td><td>ukázka funkce vyššího řádu, která vrací jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_2.py</a></td></tr>
<tr><td>  4</td><td>standard_operators.py</td><td>použití standardních operátorů přepsaných do formy funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/standard_operators.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/standard_operators.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>  5</td><td>binary_operator_types.py</td><td>varianta příkladu <strong>binary_operator.py</strong> s&nbsp;plnými typovými deklaracemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator_types.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator_types.py</a></td></tr>
<tr><td>  6</td><td>get_operator_types.py</td><td>varianta příkladu <strong>get_operator_2.py</strong> s&nbsp;plnými typovými deklaracemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_types.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_types.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>  7</td><td>map_1.py</td><td>příklad použití funkce <strong>map</strong>: výpočet délky všech slov v&nbsp;textu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_1.py</a></td></tr>
<tr><td>  8</td><td>map_2.py</td><td>příklad použití funkce <strong>map</strong>: výpočet absolutní hodnoty všech členů posloupnosti</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_2.py</a></td></tr>
<tr><td>  9</td><td>map_3.py</td><td>příklad použití funkce <strong>map</strong>: aplikace vlastní pojmenované funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_3.py</a></td></tr>
<tr><td> 10</td><td>map_4.py</td><td>příklad použití funkce <strong>map</strong>: aplikace vlastního lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 11</td><td>map_list_comprehension_1.py</td><td>přepis skriptu <strong>map_1.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_1.py</a></td></tr>
<tr><td> 12</td><td>map_list_comprehension_2.py</td><td>přepis skriptu <strong>map_2.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_2.py</a></td></tr>
<tr><td> 13</td><td>map_list_comprehension_3.py</td><td>přepis skriptu <strong>map_3.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_3.py</a></td></tr>
<tr><td> 14</td><td>map_list_comprehension_4.py</td><td>přepis skriptu <strong>map_4.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 15</td><td>filter_1.py</td><td>filtrace dat na základě délky řetězce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_1.py</a></td></tr>
<tr><td> 16</td><td>filter_2.py</td><td>filtrace numerických dat podle toho, zda se jedná o sudá či lichá čísla</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_2.py</a></td></tr>
<tr><td> 17</td><td>filter_3.py</td><td>přepis předchozího příkladu s&nbsp;využitím lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 18</td><td>filter_list_comprehension_1.py</td><td>přepis skriptu <strong>filter_list_comprehension_1.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_1.py</a></td></tr>
<tr><td> 19</td><td>filter_list_comprehension_2.py</td><td>přepis skriptu <strong>filter_list_comprehension_2.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_2.py</a></td></tr>
<tr><td> 20</td><td>filter_list_comprehension_3.py</td><td>přepis skriptu <strong>filter_list_comprehension_3.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 21</td><td>reduce_1.py</td><td>výpočet faktoriálu s&nbsp;využitím funkce vyššího řádu <strong>reduce</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_1.py</a></td></tr>
<tr><td> 22</td><td>reduce_2.py</td><td>přepis předchozího příkladu s&nbsp;využitím lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_2.py</a></td></tr>
<tr><td> 23</td><td>reduce_3.py</td><td>tisk tabulky faktoriálů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_3.py</a></td></tr>
<tr><td> 24</td><td>reduce_4.py</td><td>přepis předchozího příkladu s&nbsp;využitím lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_4.py</a></td></tr>
<tr><td> 25</td><td>reduce_5.py</td><td>přepis předchozího příkladu s&nbsp;využitím generátorové notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 26</td><td>return_function.py</td><td>funkce jako návratová hodnota jiné funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/return_function.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/return_function.py</a></td></tr>
<tr><td> 27</td><td>closure_adder1.py</td><td>příklad použití uzávěru &ndash; konstrukce funkce typu <i>adder</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/closure_adder1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/closure_adder1.py</a></td></tr>
<tr><td> 28</td><td>counter_closure_1.py</td><td>nekorektní implementace čítače s&nbsp;využitím uzávěrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_1.py</a></td></tr>
<tr><td> 29</td><td>counter_closure_2.py</td><td>přístup k&nbsp;nelokálnímu symbolu (Python 2.x i Python 3.x)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_2.py</a></td></tr>
<tr><td> 30</td><td>counter_closure_3.py</td><td>přístup k&nbsp;nelokálnímu symbolu (pouze Python 3.x)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 31</td><td>access_nonlocal_symbol.py</td><td>přístup k&nbsp;nelokálnímu symbolu v&nbsp;uzávěru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/access_nonlocal_symbol.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/access_nonlocal_symbol.py</a></td></tr>
<tr><td> 32</td><td>functions_and_closures.py</td><td>funkce a uzávěry (umělý příklad)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/functions_and_closures.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/functions_and_closures.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 33</td><td>partial_1.py</td><td>funkce <strong>doubler</strong> odvozená (redukcí) z&nbsp;univerzálnější funkce <strong>mul</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_1.py</a></td></tr>
<tr><td> 34</td><td>partial_2.py</td><td>transformace funkce se třemi parametry s&nbsp;využitím <strong>partial</strong> (nekorektní řešení)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_2.py</a></td></tr>
<tr><td> 35</td><td>partial_3.py</td><td>transformace funkce se třemi parametry s&nbsp;využitím <strong>partial</strong> (korektní řešení)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_3.py</a></td></tr>
<tr><td> 36</td><td>partial_4.py</td><td>transformace funkce s&nbsp;dosazením většího množství parametrů s&nbsp;využitím <strong>partial</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_4.py</a></td></tr>
<tr><td> 37</td><td>partial_5.py</td><td>několikanásobná transformace původní funkce na několik nových funkcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_5.py</a></td></tr>
<tr><td> 38</td><td>partial_6.py</td><td>postupná transformace již ztransformovaných funkcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_6.py</a></td></tr>
<tr><td> 39</td><td>partial_7.py</td><td>typ originální funkce i funkcí získaných s&nbsp;využitím transformace pomocí <strong>partial</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_7.py</a></td></tr>
<tr><td> 40</td><td>partial_8.py</td><td>jméno funkce, poziční argumenty funkce a pojmenované argumenty funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_8.py</a></td></tr>
<tr><td> 41</td><td>partial_9.py</td><td>transformace <strong>reduce</strong> a pojmenované argumenty původní funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_9.py</a></td></tr>
<tr><td> 42</td><td>partial_A.py</td><td>získání informací o redukované funkci s&nbsp;pojmenovanými argumenty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_A.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 43</td><td>partial_method_1.py</td><td>třída s&nbsp;metodou s&nbsp;parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_1.py</a></td></tr>
<tr><td> 44</td><td>partial_method_2.py</td><td>třída s&nbsp;metodou s&nbsp;parametry &ndash; vliv volání setteru na stav objektu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_2.py</a></td></tr>
<tr><td> 45</td><td>partial_method_3.py</td><td>metody <strong>enable</strong> a <strong>disable</strong> vzniklé transformací <strong>set_enabled</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_3.py</a></td></tr>
<tr><td> 46</td><td>partial_method_4.py</td><td>další příklad použití funkce <strong>partialmethod</strong> &ndash; doplnění většího množství parametrů při transformaci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 47</td><td>lru_cache_1.py</td><td>klasický výpočet Fibonacciho posloupnosti rekurzivní funkcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_1.py</a></td></tr>
<tr><td> 48</td><td>lru_cache_2.py</td><td>LRU cache pro výsledky Fibonacciho posloupnosti pro nejčastěji použité vstupy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_2.py</a></td></tr>
<tr><td> 49</td><td>lru_cache_3.py</td><td>přečtení informací o využití LRU cache</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_3.py</a></td></tr>
<tr><td> 50</td><td>lru_cache_4.py</td><td>programové vymazání LRU cache</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 51</td><td>cached_property_1.py</td><td>použití standardního dekorátoru <strong>@property</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_1.py</a></td></tr>
<tr><td> 52</td><td>cached_property_2.py</td><td>použití dekorátoru <strong>@cached_property</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_2.py</a></td></tr>
<tr><td> 53</td><td>cached_property_3.py</td><td>úprava předchozího příkladu tak, aby se využila LRU cache</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 54</td><td>total_ordering.py</td><td>příklad implementace relačních operátorů založených na dekorátoru <strong>@total_ordering</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/total_ordering.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/total_ordering.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 55</td><td>decorators_2.py</td><td>příklad použití jednoho dekorátoru aplikovaného na funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_2.py</a></td></tr>
<tr><td> 56</td><td>decorators_3.py</td><td>příklad použití dvou dekorátorů aplikovaných na funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_3.py</a></td></tr>
<tr><td> 57</td><td>measure_time.py</td><td>praktické použití dekorátoru &ndash; měření doby trvání funkce označené dekorátorem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/measure_time.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/measure_time.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 58</td><td>decorators_4.py</td><td>atributy transformované funkce vytvořené s&nbsp;využitím dekorátoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_4.py</a></td></tr>
<tr><td> 59</td><td>decorators_5.py</td><td>využití dekorátoru <strong>@wraps</strong> pro automatickou úpravu atributů &bdquo;obalované&ldquo; funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_5.py</a></td></tr>
<tr><td> 60</td><td>decorators_6.py</td><td>dekorátor <strong>@wraps</strong> a několikanásobná aplikace dekorátorů na &bdquo;obalovanou&ldquo; funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 61</td><td>decorators_1.py</td><td>zkrácená deklarace dekorátoru s&nbsp;využitím dekorátoru <strong>@decorator</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_1.py</a></td></tr>
<tr><td> 62</td><td>decorators_2.py</td><td>několikanásobná aplikace dekorátorů, dekorátor je vytvořen přes <strong>@decorator</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_2.py</a></td></tr>
<tr><td> 63</td><td>measure_time.py</td><td>měření doby trvání funkce označené dekorátorem, dekorátor je vytvořen přes <strong>@decorator</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/measure_time.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/measure_time.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 64</td><td>curry1.py</td><td>curryfikace funkce se dvěma parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry1.py</a></td></tr>
<tr><td> 65</td><td>curry2.py</td><td>curryfikace funkce se třemi parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry2.py</a></td></tr>
<tr><td> 66</td><td>rcurry1.py</td><td>curryfikace funkce <strong>div</strong> funkcí <strong>curry</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry1.py</a></td></tr>
<tr><td> 67</td><td>rcurry2.py</td><td>curryfikace funkce <strong>div</strong> funkcí <strong>rcurry</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry2.py</a></td></tr>
<tr><td> 68</td><td>rcurry3.py</td><td>curryfikace funkce <strong>n_pow</strong> funkcí <strong>rcurry</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 69</td><td>autocurry.py</td><td>curryfikace funkce <strong>n_pow</strong> funkcí <strong>autocurry</strong> (s&nbsp;odlišným výsledkem)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/autocurry.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/autocurry.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 70</td><td>compose1.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>compose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose1.py</a></td></tr>
<tr><td> 71</td><td>compose2.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>compose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose2.py</a></td></tr>
<tr><td> 72</td><td>compose3.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>compose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose3.py</a></td></tr>
<tr><td> 73</td><td>rcompose1.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>rcompose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose1.py</a></td></tr>
<tr><td> 74</td><td>rcompose2.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>rcompose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose2.py</a></td></tr>
<tr><td> 75</td><td>rcompose3.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>rcompose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 76</td><td>filter_1.py</td><td>použití standardní funkce <strong>filter</strong> (opakování)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_1.py</a></td></tr>
<tr><td> 77</td><td>filter_2.py</td><td>použití funkce <strong>filter</strong> z&nbsp;knihovny <i>funcy</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_2.py</a></td></tr>
<tr><td> 78</td><td>filter_3.py</td><td>funkce vyššího řádu <strong>lfilter</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_3.py</a></td></tr>
<tr><td> 79</td><td>filter_4.py</td><td>předání lambda výrazu do funkcí vyššího řádu <strong>filter</strong> a <strong>lfilter</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_4.py</a></td></tr>
<tr><td> 80</td><td>filter_5.py</td><td>regulární výraz ve funkci predikátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_5.py</a></td></tr>
<tr><td> 81</td><td>filter_6.py</td><td>množina ve funkci predikátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_6.py</a></td></tr>
<tr><td> 82</td><td>filter_7.py</td><td>množina ve funkci predikátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_7.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 83</td><td>remove_1.py</td><td>použití funkce vyššího řádu <strong>remove</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_1.py</a></td></tr>
<tr><td> 84</td><td>remove_2.py</td><td>použití funkce vyššího řádu <strong>lremove</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_2.py</a></td></tr>
<tr><td> 85</td><td>remove_3.py</td><td>kombinace regulárního výrazu a funkce vyššího řádku <strong>lremove</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_3.py</a></td></tr>
<tr><td> 86</td><td>remove_4.py</td><td>kombinace množin a funkce vyššího řádku <strong>lremove</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 87</td><td>map_1.py</td><td>použití standardní funkce <strong>map</strong> (opakování)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_1.py</a></td></tr>
<tr><td> 88</td><td>map_2.py</td><td>použití funkce <strong>map</strong> z&nbsp;knihovny <i>funcy</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_2.py</a></td></tr>
<tr><td> 89</td><td>map_3.py</td><td>funkce vyššího řádu <strong>lmap</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_3.py</a></td></tr>
<tr><td> 90</td><td>map_4.py</td><td>použití regulárního výrazu namísto transformační funkce v&nbsp;<strong>lmap</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_4.py</a></td></tr>
<tr><td> 91</td><td>map_5.py</td><td>použití regulárního výrazu namísto transformační funkce v&nbsp;<strong>lmap</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 92</td><td>distinct_1.py</td><td>získání unikátních prvků ze vstupní sekvence funkcí <strong>distinct</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/distinct_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/distinct_1.py</a></td></tr>
<tr><td> 93</td><td>distinct_2.py</td><td>získání unikátních prvků ze vstupní sekvence funkcí <strong>distinct</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/distinct_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/distinct_2.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 94</td><td>take_while_1.py</td><td>filtrace prvků sekvence funkcí <strong>takewhile</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/take_while_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/take_while_1.py</a></td></tr>
<tr><td> 95</td><td>take_while_2.py</td><td>filtrace prvků sekvence funkcí <strong>takewhile</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/take_while_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/take_while_2.py</a></td></tr>
<tr><td> 96</td><td>drop_while_1.py</td><td>filtrace prvků sekvence funkcí <strong>dropwhile</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/drop_while_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/drop_while_1.py</a></td></tr>
<tr><td> 97</td><td>drop_while_2.py</td><td>filtrace prvků sekvence funkcí <strong>dropwhile</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/drop_while_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/drop_while_2.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 98</td><td>split_1.py</td><td>rozdělení sekvence na prvky odpovídající predikátu a na prvky, které predikátu neodpovídají</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_1.py</a></td></tr>
<tr><td> 99</td><td>split_2.py</td><td>rozdělení sekvence na prvky odpovídající predikátu a na prvky, které predikátu neodpovídají</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_2.py</a></td></tr>
<tr><td>100</td><td>split_3.py</td><td>rozdělení sekvence na prvky odpovídající predikátu a na prvky, které predikátu neodpovídají</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_3.py</a></td></tr>
<tr><td>101</td><td>split_4.py</td><td>rozdělení sekvence na prvky odpovídající predikátu a na prvky, které predikátu neodpovídají</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>102</td><td>split_by_1.py</td><td>kombinace funkcí vyššího řádu <strong>takewhile</strong> a <strong>dropwhile</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_by_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_by_1.py</a></td></tr>
<tr><td>103</td><td>split_by_2.py</td><td>kombinace funkcí vyššího řádu <strong>takewhile</strong> a <strong>dropwhile</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_by_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_by_2.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>104</td><td>partition_by.py</td><td>rozdělení sekvence na větší množství sekvencí funkcí <strong>partition_by</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/partition_by.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/partition_by.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>functools — Higher-order functions and operations on callable objects<br />
<a href="https://docs.python.org/3/library/functools.html">https://docs.python.org/3/library/functools.html</a>
</li>

<li>Functional Programming HOWTO<br />
<a href="https://docs.python.org/3/howto/functional.html">https://docs.python.org/3/howto/functional.html</a>
</li>

<li>Functional Programming in Python: When and How to Use It<br />
<a href="https://realpython.com/python-functional-programming/">https://realpython.com/python-functional-programming/</a>
</li>

<li>Functional Programming With Python<br />
<a href="https://realpython.com/learning-paths/functional-programming/">https://realpython.com/learning-paths/functional-programming/</a>
</li>

<li>Awesome Functional Python<br />
<a href="https://github.com/sfermigier/awesome-functional-python">https://github.com/sfermigier/awesome-functional-python</a>
</li>

<li>Currying<br />
<a href="https://en.wikipedia.org/wiki/Currying">https://en.wikipedia.org/wiki/Currying</a>
</li>

<li>Currying in Python &ndash; A Beginner’s Introduction<br />
<a href="https://www.askpython.com/python/examples/currying-in-python">https://www.askpython.com/python/examples/currying-in-python</a>
</li>

<li>Fundamental Concepts in Programming Languages<br />
<a href="https://en.wikipedia.org/wiki/Fundamental_Concepts_in_Programming_Languages">https://en.wikipedia.org/wiki/Fundamental_Concepts_in_Programming_Languages</a>
</li>

<li>When should I use function currying?<br />
<a href="https://stackoverflow.com/questions/24881604/when-should-i-use-function-currying">https://stackoverflow.com/questions/24881604/when-should-i-use-function-currying</a>
</li>

<li>Toolz<br />
<a href="https://github.com/pytoolz/toolz/tree/master">https://github.com/pytoolz/toolz/tree/master</a>
</li>

<li>Coconut: funkcionální jazyk s pattern matchingem kompatibilní s&nbsp;Pythonem<br />
<a href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/</a>
</li>

<li>A HITCHHIKER'S GUIDE TO functools<br />
<a href="https://ep2021.europython.eu/media/conference/slides/a-hitchhikers-guide-to-functools.pdf">https://ep2021.europython.eu/media/conference/slides/a-hitchhikers-guide-to-functools.pdf</a>
</li>

<li>Coconut aneb funkcionální nadstavba nad Pythonem (2.část)<br />
<a href="https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/">https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/</a>
</li>

<li>Knihovny pro zpracování posloupností (sekvencí) v&nbsp;Pythonu<br />
<a href="https://www.root.cz/clanky/knihovny-pro-zpracovani-posloupnosti-sekvenci-v-pythonu/">https://www.root.cz/clanky/knihovny-pro-zpracovani-posloupnosti-sekvenci-v-pythonu/</a>
</li>

<li>clj - repositář s knihovnou<br />
<a href="https://github.com/bfontaine/clj">https://github.com/bfontaine/clj</a>
</li>

<li>clj 0.1.0 &ndash; stránka na PyPi<br />
<a href="https://pypi.python.org/pypi/clj/0.1.0">https://pypi.python.org/pypi/clj/0.1.0</a>
</li>

<li>Clojure aneb jazyk umožňující tvorbu bezpečných vícevláknových aplikací pro JVM (4.část - kolekce, sekvence a lazy sekvence) <br />
<a href="https://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">https://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure a bezpečné aplikace pro JVM: sekvence, lazy sekvence a paralelní programy <br />
<a href="https://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">https://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Coconut: Simple, elegant, Pythonic functional programming<br />
<a href="http://coconut-lang.org/">http://coconut-lang.org/</a>
</li>

<li>coconut (Python package index)<br />
<a href="https://pypi.python.org/pypi/coconut/">https://pypi.python.org/pypi/coconut/</a>
</li>

<li>Coconut Tutorial<br />
<a href="http://coconut.readthedocs.io/en/master/HELP.html">http://coconut.readthedocs.io/en/master/HELP.html</a>
</li>

<li>Coconut FAQ<br />
<a href="http://coconut.readthedocs.io/en/master/FAQ.html">http://coconut.readthedocs.io/en/master/FAQ.html</a>
</li>

<li>Coconut Documentation<br />
<a href="http://coconut.readthedocs.io/en/master/DOCS.html">http://coconut.readthedocs.io/en/master/DOCS.html</a>
</li>

<li>Coconut na Redditu<br />
<a href="https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/">https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/</a>
</li>

<li>Repositář na GitHubu<br />
<a href="https://github.com/evhub/coconut">https://github.com/evhub/coconut</a>
</li>

<li>Object-Oriented Programming — The Trillion Dollar Disaster<br />
<a href="https://betterprogramming.pub/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7">https://betterprogramming.pub/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7</a>
</li>

<li>Goodbye, Object Oriented Programming<br />
<a href="https://cscalfani.medium.com/goodbye-object-oriented-programming-a59cda4c0e53">https://cscalfani.medium.com/goodbye-object-oriented-programming-a59cda4c0e53</a>
</li>

<li>So You Want to be a Functional Programmer (Part 1)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536</a>
</li>

<li>So You Want to be a Functional Programmer (Part 2)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a</a>
</li>

<li>So You Want to be a Functional Programmer (Part 3)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7</a>
</li>

<li>So You Want to be a Functional Programmer (Part 4)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49</a>
</li>

<li>So You Want to be a Functional Programmer (Part 5)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a</a>
</li>

<li>So You Want to be a Functional Programmer (Part 6)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-6-db502830403">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-6-db502830403</a>
</li>

<li>Why Programmers Need Limits<br />
<a href="https://cscalfani.medium.com/why-programmers-need-limits-3d96e1a0a6db">https://cscalfani.medium.com/why-programmers-need-limits-3d96e1a0a6db</a>
</li>

<li>Infographic showing code complexity vs developer experience<br />
<a href="https://twitter.com/rossipedia/status/1580639227313676288">https://twitter.com/rossipedia/status/1580639227313676288</a>
</li>

<li>Python's reduce(): From Functional to Pythonic Style<br />
<a href="https://realpython.com/python-reduce-function/">https://realpython.com/python-reduce-function/</a>
</li>

<li>What is the problem with reduce()?<br />
<a href="https://stackoverflow.com/questions/181543/what-is-the-problem-with-reduce">https://stackoverflow.com/questions/181543/what-is-the-problem-with-reduce</a>
</li>

<li>The fate of reduce() in Python 3000<br />
<a href="https://www.artima.com/weblogs/viewpost.jsp?thread=98196">https://www.artima.com/weblogs/viewpost.jsp?thread=98196</a>
</li>

<li>Reading 16: Map, Filter, Reduce<br />
<a href="http://web.mit.edu/6.031/www/sp22/classes/16-map-filter-reduce/">http://web.mit.edu/6.031/www/sp22/classes/16-map-filter-reduce/</a>
</li>

<li>Currying<br />
<a href="https://sw-samuraj.cz/2011/02/currying/">https://sw-samuraj.cz/2011/02/currying/</a>
</li>

<li>Používání funkcí v&nbsp;F#<br />
<a href="https://docs.microsoft.com/cs-cz/dotnet/fsharp/tutorials/using-functions">https://docs.microsoft.com/cs-cz/dotnet/fsharp/tutorials/using-functions</a>
</li>

<li>Funkce vyššího řádu<br />
<a href="http://naucte-se.haskell.cz/funkce-vyssiho-radu">http://naucte-se.haskell.cz/funkce-vyssiho-radu</a>
</li>

<li>Currying (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Currying">https://en.wikipedia.org/wiki/Currying</a>
</li>

<li>Currying (Haskell wiki)<br />
<a href="https://wiki.haskell.org/Currying">https://wiki.haskell.org/Currying</a>
</li>

<li>Haskell Curry<br />
<a href="https://en.wikipedia.org/wiki/Haskell_Curry">https://en.wikipedia.org/wiki/Haskell_Curry</a>
</li>

<li>Moses Schönfinkel<br />
<a href="https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel">https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel</a>
</li>

<li>ML &ndash; funkcionální jazyk s revolučním typovým systémem<br />
<a href="https://www.root.cz/clanky/ml-funkcionalni-jazyk-s-revolucnim-typovym-systemem/">https://www.root.cz/clanky/ml-funkcionalni-jazyk-s-revolucnim-typovym-systemem/</a>
</li>

<li>Funkce a typový systém programovacího jazyka ML<br />
<a href="https://www.root.cz/clanky/funkce-a-typovy-system-programovaciho-jazyka-ml/">https://www.root.cz/clanky/funkce-a-typovy-system-programovaciho-jazyka-ml/</a>
</li>

<li>Curryfikace (currying), výjimky a vlastní operátory v jazyku ML<br />
<a href="https://www.root.cz/clanky/curryfikace-currying-vyjimky-a-vlastni-operatory-v-jazyku-ml/">https://www.root.cz/clanky/curryfikace-currying-vyjimky-a-vlastni-operatory-v-jazyku-ml/</a>
</li>

<li>Primer on Python Decorators<br />
<a href="https://realpython.com/primer-on-python-decorators/">https://realpython.com/primer-on-python-decorators/</a>
</li>

<li>Python Decorators<br />
<a href="https://www.programiz.com/python-programming/decorator">https://www.programiz.com/python-programming/decorator</a>
</li>

<li>PythonDecorators (Python Wiki)<br />
<a href="https://wiki.python.org/moin/PythonDecorators">https://wiki.python.org/moin/PythonDecorators</a>
</li>

<li>Funcy na GitHubu<br />
<a href="https://github.com/suor/funcy/">https://github.com/suor/funcy/</a>
</li>

<li>Welcome to funcy documentation!<br />
<a href="https://funcy.readthedocs.io/en/stable/">https://funcy.readthedocs.io/en/stable/</a>
</li>

<li>Funcy cheatsheet<br />
<a href="https://funcy.readthedocs.io/en/stable/cheatsheet.html">https://funcy.readthedocs.io/en/stable/cheatsheet.html</a>
</li>

<li>PyToolz API Documentation<br />
<a href="https://toolz.readthedocs.io/en/latest/index.html">https://toolz.readthedocs.io/en/latest/index.html</a>
</li>

<li>Toolz (PyToolz) na GitHubu<br />
<a href="https://github.com/pytoolz/toolz">https://github.com/pytoolz/toolz</a>
</li>

<li>Fn.py: enjoy FP in Python<br />
<a href="https://github.com/kachayev/fn.py">https://github.com/kachayev/fn.py</a>
</li>

<li>Funcy na PyPi<br />
<a href="https://pypi.org/project/funcy/">https://pypi.org/project/funcy/</a>
</li>

<li>Underscore aneb další knihovna pro funkcionální programování v&nbsp;JavaScriptu<br />
<a href="https://www.root.cz/clanky/underscore-aneb-dalsi-knihovna-pro-funkcionalni-programovani-v-javascriptu/">https://www.root.cz/clanky/underscore-aneb-dalsi-knihovna-pro-funkcionalni-programovani-v-javascriptu/</a>
</li>

<li>Funkce vyššího řádu v&nbsp;knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Awesome functional Python<br />
<a href="https://github.com/sfermigier/awesome-functional-python">https://github.com/sfermigier/awesome-functional-python</a>
</li>

<li>lispy<br />
<a href="https://pypi.org/project/lispy/">https://pypi.org/project/lispy/</a>
</li>

<li>clojure_py na indexu PyPi<br />
<a href="https://pypi.python.org/pypi/clojure_py">https://pypi.python.org/pypi/clojure_py</a>
</li>

<li>PyClojure<br />
<a href="https://github.com/eigenhombre/PyClojure">https://github.com/eigenhombre/PyClojure</a>
</li>

<li>Hy na GitHubu<br />
<a href="https://github.com/hylang/hy">https://github.com/hylang/hy</a>
</li>

<li>Hy: The survival guide<br />
<a href="https://notes.pault.ag/hy-survival-guide/">https://notes.pault.ag/hy-survival-guide/</a>
</li>

<li>Hy běžící na monitoru terminálu společnosti Symbolics<br />
<a href="http://try-hy.appspot.com/">http://try-hy.appspot.com/</a>
</li>

<li>Welcome to Hy’s documentation!<br />
<a href="http://docs.hylang.org/en/stable/">http://docs.hylang.org/en/stable/</a>
</li>

<li>Hy na PyPi<br />
<a href="https://pypi.org/project/hy/#description">https://pypi.org/project/hy/#description</a>
</li>

<li>Getting Hy on Python<br />
<a href="https://lwn.net/Articles/596626/">https://lwn.net/Articles/596626/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

