<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>


<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
<i>"""Multithreading."""</i>
&nbsp;
import threading
import time
&nbsp;
&nbsp;
def <strong>worker</strong>():
    threadName = threading.current_thread().name
    delay = 1
    n = 10
    for counter in range(1, n+1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
<i># vytvoření a spuštění trojice vláken</i>
threading.Thread(target=worker).start()
threading.Thread(target=worker).start()
threading.Thread(target=worker).start()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
<i>"""Multithreading."""</i>
&nbsp;
import threading
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    for counter in range(1, n+1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
<i># vytvoření a spuštění trojice vláken</i>
threading.Thread(target=worker, args=("Thread-1", 0.5, 10)).start()
threading.Thread(target=worker, args=("Thread-2", 1.0, 10)).start()
threading.Thread(target=worker, args=("Thread-3", 1.5, 10)).start()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p></p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
<i>"""Multithreading."""</i>
&nbsp;
import threading
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    for counter in range(1, n+1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
<i># vytvoření trojice vláken</i>
t1 = threading.Thread(target=worker, args=("Thread-1", 0.5, 10))
t2 = threading.Thread(target=worker, args=("Thread-2", 1.0, 10))
t3 = threading.Thread(target=worker, args=("Thread-3", 1.5, 10))
&nbsp;
<i># spuštění všech vláken</i>
t1.start()
t2.start()
t3.start()
&nbsp;
<i># čekání na dokončení všech vláken</i>
t1.join()
t2.join()
t3.join()
&nbsp;
print("Done!")
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p></p>

<pre>
import threading
import time
&nbsp;
&nbsp;
def <strong>worker</strong>():
    threadName = threading.current_thread().name
    delay = 1
    n = 10
    for counter in range(1, n+1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
<i># vytvoření a spuštění trojice vláken v režimu daemon</i>
threading.Thread(target=worker, daemon=True).start()
threading.Thread(target=worker, daemon=True).start()
threading.Thread(target=worker, daemon=True).start()
&nbsp;
<i># na dokončení vláken se nečeká!</i>
</pre>

<p></p>

<pre>
import threading
import time
&nbsp;
&nbsp;
def <strong>worker</strong>():
    threadName = threading.current_thread().name
    delay = 1
    n = 10
    for counter in range(1, n+1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
<i># vytvoření a spuštění trojice vláken v režimu daemon</i>
t1 = threading.Thread(target=worker, daemon=True)
t2 = threading.Thread(target=worker, daemon=True)
t3 = threading.Thread(target=worker, daemon=True)
&nbsp;
t1.start()
t2.start()
t3.start()
&nbsp;
t1.join()
t2.join()
t3.join()
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>

<pre>
import threading
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    for counter in range(1, n+1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
<i># vytvoření trojice vláken</i>
t1 = threading.Thread(target=worker, args=("Thread-1", 0.5, 10))
t2 = threading.Thread(target=worker, args=("Thread-2", 1.0, 10))
t3 = threading.Thread(target=worker, args=("Thread-3", 1.5, 10))
&nbsp;
<i># spuštění všech vláken</i>
t1.start()
t2.start()
t3.start()
&nbsp;
<i># čekání na dokončení všech vláken</i>
t3.join(timeout=5)
&nbsp;
if t3.is_alive():
    print("wait timeout")
else:
    print("t3 has finished")
&nbsp;
t2.join()
print("t2 has finished")
&nbsp;
t1.join()
print("t1 has finished")
&nbsp;
&nbsp;
print("Done!")
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>

<pre>
import time
import threading
import queue
&nbsp;
&nbsp;
<i># vytvoření fronty</i>
q = queue.Queue()
&nbsp;
&nbsp;
<i># simulace konzumenta</i>
def <strong>consumer</strong>():
    while True:
        job = q.get()
        print(f'Starting consuming {job}')
        time.sleep(0.4)
        print(f'Consumed {job}')
        q.task_done()
&nbsp;
&nbsp;
<i># spuštění konzumenta</i>
threading.Thread(target=consumer, daemon=True, name="první").start()
&nbsp;
<i># vytvoření úloh v producentovi</i>
for job in range(10):
    print(f'Producing {job}')
    q.put(job)
&nbsp;
<i># čekání na zpracování všech zpráv ve frontě</i>
q.join()
print('Done')
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>

<pre>
import time
import threading
import queue
&nbsp;
&nbsp;
<i># vytvoření fronty</i>
q = queue.Queue()
&nbsp;
&nbsp;
<i># simulace konzumenta</i>
def <strong>consumer</strong>():
    name = threading.current_thread().name
    while True:
        job = q.get()
        print(f'{name} thread: Starting consuming {job}')
        time.sleep(0.4)
        print(f'{name} thread: Consumed {job}')
        q.task_done()
&nbsp;
&nbsp;
<i># spuštění konzumentů</i>
threading.Thread(target=consumer, daemon=True, name="1st").start()
threading.Thread(target=consumer, daemon=True, name="2nd").start()
threading.Thread(target=consumer, daemon=True, name="3rd").start()
&nbsp;
<i># vytvoření úloh v producentovi</i>
for job in range(10):
    print(f'Producing {job}')
    q.put(job)
&nbsp;
<i># čekání na zpracování všech zpráv ve frontě</i>
q.join()
print('Done')
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>

<pre>
import time
import threading
import queue
&nbsp;
&nbsp;
<i># vytvoření fronty</i>
q = queue.Queue()
&nbsp;
&nbsp;
<i># simulace producenta</i>
def <strong>producer</strong>():
    name = threading.current_thread().name
    for job in range(10):
        print(f'{name} thread: Starting producing {job}')
        q.put(job)
        time.sleep(0.3)
        print(f'{name} thread: Produced {job}')
&nbsp;
&nbsp;
<i># simulace konzumenta</i>
def <strong>consumer</strong>():
    name = threading.current_thread().name
    while True:
        job = q.get()
        print(f'{name} thread: Starting consuming {job}')
        time.sleep(0.4)
        print(f'{name} thread: Consumed {job}')
        q.task_done()
&nbsp;
&nbsp;
<i># spuštění konzumentů</i>
threading.Thread(target=consumer, daemon=True, name="1st").start()
threading.Thread(target=consumer, daemon=True, name="2nd").start()
threading.Thread(target=consumer, daemon=True, name="3rd").start()
&nbsp;
<i># spuštění producentů</i>
threading.Thread(target=producer, daemon=True, name="1st").start()
threading.Thread(target=producer, daemon=True, name="2nd").start()
threading.Thread(target=producer, daemon=True, name="3rd").start()
threading.Thread(target=producer, daemon=True, name="3rd").start()
&nbsp;
<i># čekání na zpracování všech zpráv ve frontě</i>
q.join()
print('Done')
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>

<pre>
import time
import threading
import queue
&nbsp;
&nbsp;
<i># vytvoření fronty</i>
q = queue.Queue()
&nbsp;
&nbsp;
<i># simulace producenta</i>
def <strong>producer</strong>():
    name = threading.current_thread().name
    for job in range(1000):
        print(f'{name} thread: Starting producing {job}')
        q.put(job)
        time.sleep(0.3)
        print(f'{name} thread: Produced {job}')
&nbsp;
&nbsp;
<i># simulace konzumenta</i>
def <strong>consumer</strong>():
    name = threading.current_thread().name
    while True:
        job = q.get()
        print(f'{name} thread: Starting consuming {job}')
        time.sleep(0.4)
        print(f'{name} thread: Consumed {job}')
        q.task_done()
&nbsp;
&nbsp;
<i># spuštění konzumentů</i>
threading.Thread(target=consumer, daemon=True, name="1st").start()
threading.Thread(target=consumer, daemon=True, name="2nd").start()
threading.Thread(target=consumer, daemon=True, name="3rd").start()
&nbsp;
<i># spuštění producentů</i>
threading.Thread(target=producer, daemon=True, name="1st").start()
threading.Thread(target=producer, daemon=True, name="2nd").start()
threading.Thread(target=producer, daemon=True, name="3rd").start()
threading.Thread(target=producer, daemon=True, name="3rd").start()
&nbsp;
<i># čekání na zpracování všech zpráv ve frontě</i>
q.join()
print('Done')
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>

<pre>
from multiprocessing import Process
&nbsp;
&nbsp;
def <strong>worker</strong>(name):
    print("hello", name)
&nbsp;
&nbsp;
def <strong>main</strong>():
    p = Process(target=worker, args=("foo",))
    p.start()
    p.join()
&nbsp;
&nbsp;
if __name__ == '__main__':
    print("Running main")
    main()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>

<pre>
from multiprocessing import Process
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(name):
    print("hello", name)
    time.sleep(5)
    print("done", name)
&nbsp;
&nbsp;
def <strong>main</strong>():
    ps = []
&nbsp;
    for name in ("foo", "bar", "baz", "other"):
        p = Process(target=worker, args=(name,))
        p.start()
        ps.append(p)
&nbsp;
    for p in ps:
        p.join()
&nbsp;
&nbsp;
if __name__ == '__main__':
    print("Running main")
    main()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
from multiprocessing import Process
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(name):
    print("hello", name)
    time.sleep(5)
    print("done", name)
&nbsp;
&nbsp;
def <strong>main</strong>():
    ps = [Process(target=worker, args=(name,)) for name in ("foo", "bar", "baz", "other")]
&nbsp;
    for p in ps:
        p.start()
&nbsp;
    for p in ps:
        p.join()
&nbsp;
&nbsp;
if __name__ == '__main__':
    print("Running main")
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>

<pre>
from multiprocessing import Process, Queue
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(name, q):
    while True:
        cmd = q.get()
        print(name, cmd)
        if cmd == "quit":
            print("Quitting")
            return
        time.sleep(1)
&nbsp;
&nbsp;
def <strong>main</strong>():
    q = Queue()
&nbsp;
    ps = [Process(target=worker, args=(name, q)) for name in ("foo", "bar", "baz")]
&nbsp;
    for p in ps:
        p.start()
&nbsp;
    for i in range(10):
        q.put("command {}".format(i))
&nbsp;
    for i in range(3):
        q.put("quit")
&nbsp;
    for p in ps:
        p.join()
&nbsp;
&nbsp;
if __name__ == '__main__':
    print("Running main")
    main()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>

<pre>
from multiprocessing import Process, Pipe
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(name, conn):
    while True:
        cmd = conn.recv()
        print("{} received {}".format(name, cmd))
        if cmd == "quit":
            return
        else:
            conn.send("{} accepted {}".format(name, cmd))
        time.sleep(1)
&nbsp;
&nbsp;
def <strong>main</strong>():
    parent_conn, child_conn = Pipe()
&nbsp;
    p = Process(target=worker, args=("Worker", child_conn))
    p.start()
&nbsp;
    for i in range(10):
        parent_conn.send("command {}".format(i))
        print(parent_conn.recv())
&nbsp;
    parent_conn.send("quit")
&nbsp;
    p.join()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 byly uloženy do Git repositáře dostupného na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Dokumentace Pythonu: balíček queue<br />
<a href="https://docs.python.org/3/library/queue.html">https://docs.python.org/3/library/queue.html</a>
</li>

<li>Dokumentace Pythonu: balíček threading<br />
<a href="https://docs.python.org/3/library/threading.html?">https://docs.python.org/3/library/threading.html?</a>
</li>

<li>Dokumentace Pythonu: balíček multiprocessing<br />
<a href="https://docs.python.org/3/library/multiprocessing.html">https://docs.python.org/3/library/multiprocessing.html</a>
</li>

<li>Dokumentace Pythonu: balíček asyncio<br />
<a href="https://docs.python.org/3/library/asyncio.html">https://docs.python.org/3/library/asyncio.html</a>
</li>

<li>Synchronization Primitives<br />
<a href="https://docs.python.org/3/library/asyncio-sync.html">https://docs.python.org/3/library/asyncio-sync.html</a>
</li>

<li>Coroutines<br />
<a href="https://docs.python.org/3/library/asyncio-task.html">https://docs.python.org/3/library/asyncio-task.html</a>
</li>

<li>Queues<br />
<a href="https://docs.python.org/3/library/asyncio-queue.html">https://docs.python.org/3/library/asyncio-queue.html</a>
</li>

<li>python-csp<br />
<a href="https://python-csp.readthedocs.io/en/latest/">https://python-csp.readthedocs.io/en/latest/</a>
</li>

<li>TrellisSTM<br />
<a href="http://peak.telecommunity.com/DevCenter/TrellisSTM">http://peak.telecommunity.com/DevCenter/TrellisSTM</a>
</li>

<li>Python Multithreading and Multiprocessing Tutorial<br />
<a href="https://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python">https://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

