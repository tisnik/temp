<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Balíček <strong>threading</strong> &ndash; vytvoření a spuštění několika vláken</a></p>
<p><a href="#k03">*** 3. Předání parametrů funkcím spouštěným v&nbsp;nových vláknech</a></p>
<p><a href="#k04">*** 4. Explicitní čekání na dokončení běhu vláken</a></p>
<p><a href="#k05">*** 5. Vlákna s&nbsp;příznakem &bdquo;daemon&ldquo;</a></p>
<p><a href="#k06">*** 6. Čekaní na dokončení vlákna po zvolený časový interval, test, zda vlákno stále běží</a></p>
<p><a href="#k07">*** 7. Komunikace mezi vlákny</a></p>
<p><a href="#k08">*** 8. Standardní synchronizované datové struktury z&nbsp;balíčku <strong>queue</strong></a></p>
<p><a href="#k09">*** 9. Fronta ve funkci synchronizačního mechanismu</a></p>
<p><a href="#k10">*** 10. Klasický vzor producent&ndash;konzument</a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. Jazyk Python a multiprocessing</a></p>
<p><a href="#k13">*** 13. Spuštění nového procesu</a></p>
<p><a href="#k14">*** 14. Spuštění většího množství procesů, čekání na dokončení těchto procesů</a></p>
<p><a href="#k15">*** 15. Zjednodušení předchozího demonstračního příkladu</a></p>
<p><a href="#k16">*** 16. Komunikace mezi procesy přes <strong>multiprocessing.Queue</strong></a></p>
<p><a href="#k17">*** 17. Komunikace mezi procesy přes obousměrnou rouru (<strong>multiprocessing.Pipe</strong>)</a></p>
<p><a href="#k18">*** 18. Spouštění a řízení paralelně běžících úloh &ndash; concurrent.futures</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>

<p>Na tomto místě je vhodné upozornit na fakt, že v&nbsp;Pythonu sice můžeme používat všechny dále popisované balíčky, ovšem skutečný paralelní (a nezávislý) běh několika vláken je ve standardním CPythonu do značné míry omezen kvůli existenci techniky zvané <i>GIL</i> neboli <i>Global Interpreter Lock</i> (viz též <a href="https://wiki.python.org/moin/GlobalInterpreterLock">příslušnou stránku</a>). Existuje poměrně velké množství návrhů na odstranění GILu, ovšem prozatím je tato technika v&nbsp;CPythonu použita. Naproti tomu <a href="https://ironpython.net/">IronPython</a> a <a href="https://www.jython.org/">Jython</a> tuto techniku nepoužívají; na druhou stranu je však například vývoj Jythonu prakticky pozastaven (viz též poznámku pod odstavcem). V&nbsp;případě klasického CPythonu je tedy nutné chápat především modul <strong>threading</strong>, o němž se zmíníme v&nbsp;dalším textu, jako řešení algoritmů, které mají běžet souběžně, nikoli nutně paralelně (paralelně poběží většinou vstupně-výstupní operace, resp.&nbsp;v&nbsp;tuto chvíli dojde k&nbsp;přepnutí vláken). Skutečně paralelní běh lze pochopitelně dosáhnout využitím většího množství procesů popř.&nbsp;některých technik uvedených v&nbsp;navazujícím článku.</p>

<p><div class="rs-tip-major">Poznámka: na druhou stranu je nutné poznamenat, že v&nbsp;době, kdy Jython vznikl (pod jménem JPython již v&nbsp;roce 1999, pod novým jménem Jython pak byl vydán před více než před dvaceti lety, konkrétně v&nbsp;roce 2001), se kromě samotné Javy jednalo o nejpropracovanější programovací jazyk určený pro běh na JVM. I z&nbsp;toho důvodu byl relativně často využíván pro skriptování v&nbsp;různých enterprise systémech, například i ve WebSphere, Oracle WebLogicu atd. O to problematičtější se zdá být praktické zastavení vývoje Jythonu (protože další ne-Javovské jazyky postavené nad JVM jsou mnohdy dosti úspěšné).</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Balíček <strong>threading</strong> &ndash; vytvoření a spuštění několika vláken</h2>

<p>V&nbsp;první části dnešního článku si ukážeme základní techniky podporované standardním balíčkem <strong>threading</strong>. Dokumentaci k&nbsp;tomuto balíčku lze najít na stránce <a href="https://docs.python.org/3/library/threading.html">https://docs.python.org/3/library/threading.html</a>, kde jsou vypsány i některé postupy, které dnes nebudou popsány. Jedná se především o použití různých synchronizačních mechanismů a taktéž systémů událostí (jedno vlákno vytvoří událost, na kterou další vlákno čeká atd.). Tyto již nepatrně komplikovanější postupy budou popsány příště.</p>

<p>Podívejme se na velmi jednoduchý program, v&nbsp;němž je spuštěno větší množství vláken. Nejprve vytvoříme zcela běžnou funkci, která v&nbsp;programové smyčce desetkrát vypíše jméno vlákna, ve kterém je funkce spuštěna, aktuální hodnotu počitadla smyčky a taktéž čas, kdy k&nbsp;výpisu došlo. Mezi jednotlivými iteracemi smyčky je přibližně jednosekundová prodleva, kterou simulujeme reálnou práci (například nějaký výpočet, komunikaci s&nbsp;databází atd.):</p>

<pre>
def <strong>worker</strong>():
    threadName = threading.current_thread().name
    delay = 1
    n = 10
    for counter in range(1, n+1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
</pre>

<p><div class="rs-tip-major">Poznámka: jméno vlákna je buď explicitně zadáno programátorem (což uvidíme dále), nebo je vygenerováno automaticky, a to i pro vlákno, ve kterém běží hlavní část skriptu. O tom se ostatně můžeme velmi snadno přesvědčit:</div></p>

<pre>
&gt;&gt;&gt; import threading
&gt;&gt;&gt; print(threading.current_thread().name)
&nbsp;
MainThread
</pre>

<p>Právě definovanou funkci <strong>worker</strong> ovšem nebudeme spouštět přímo. Nejprve vytvoříme nové vlákno, specifikujeme, že se v&nbsp;rámci tohoto vlákna má vykonat právě funkce worker a teprve poté vlákno spustíme. Tuto operaci zopakujeme několikrát, takže se spustí několik vláken provádějících podobnou činnost (lišit se bude pouze jméno vlákna vypisované funkcí <strong>worker</strong>):</p>

<pre>
threading.Thread(target=worker).start()
threading.Thread(target=worker).start()
threading.Thread(target=worker).start()
</pre>

<p>Po provedení těchto tří příkazů se kromě hlavního vlákna spustí ještě další tři vlákna, která budou prováděna <i>souběžně</i> (ovšem nikoli zcela paralelně kvůli existenci GILu). Hlavní vlákno bude čekat na dokončení ostatních tří vláken, protože tato vlákna nemají nastaven atribut <i>daemon</i>. Více informací o rozlišení vláken se dozvíme v&nbsp;navazujícím textu:</p>

<pre>
Thread-1: 1/10 - Sat Feb 19 09:14:51 2022
Thread-3: 1/10 - Sat Feb 19 09:14:51 2022
Thread-2: 1/10 - Sat Feb 19 09:14:51 2022
Thread-1: 2/10 - Sat Feb 19 09:14:52 2022
Thread-2: 2/10 - Sat Feb 19 09:14:52 2022
Thread-3: 2/10 - Sat Feb 19 09:14:52 2022
Thread-1: 3/10 - Sat Feb 19 09:14:53 2022
Thread-3: 3/10 - Sat Feb 19 09:14:53 2022
Thread-2: 3/10 - Sat Feb 19 09:14:53 2022
Thread-1: 4/10 - Sat Feb 19 09:14:54 2022
Thread-2: 4/10 - Sat Feb 19 09:14:54 2022
Thread-3: 4/10 - Sat Feb 19 09:14:54 2022
Thread-1: 5/10 - Sat Feb 19 09:14:55 2022
Thread-2: 5/10 - Sat Feb 19 09:14:55 2022
Thread-3: 5/10 - Sat Feb 19 09:14:55 2022
Thread-1: 6/10 - Sat Feb 19 09:14:56 2022
Thread-2: 6/10 - Sat Feb 19 09:14:56 2022
Thread-3: 6/10 - Sat Feb 19 09:14:56 2022
Thread-1: 7/10 - Sat Feb 19 09:14:57 2022
Thread-2: 7/10 - Sat Feb 19 09:14:57 2022
Thread-3: 7/10 - Sat Feb 19 09:14:57 2022
Thread-1: 8/10 - Sat Feb 19 09:14:58 2022
Thread-2: 8/10 - Sat Feb 19 09:14:58 2022
Thread-3: 8/10 - Sat Feb 19 09:14:58 2022
Thread-2: 9/10 - Sat Feb 19 09:14:59 2022
Thread-1: 9/10 - Sat Feb 19 09:14:59 2022
Thread-3: 9/10 - Sat Feb 19 09:14:59 2022
Thread-1: 10/10 - Sat Feb 19 09:15:00 2022
Thread-2: 10/10 - Sat Feb 19 09:15:00 2022
Thread-3: 10/10 - Sat Feb 19 09:15:00 2022
</pre>

<p><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading1.py">Úplný zdrojový kód</a> tohoto demonstračního příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
<i>"""Multithreading."""</i>
&nbsp;
import threading
import time
&nbsp;
&nbsp;
def <strong>worker</strong>():
    threadName = threading.current_thread().name
    delay = 1
    n = 10
    for counter in range(1, n+1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
<i># vytvoření a spuštění trojice vláken</i>
threading.Thread(target=worker).start()
threading.Thread(target=worker).start()
threading.Thread(target=worker).start()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Předání parametrů funkcím spouštěným v&nbsp;nových vláknech</h2>

<p>Mnohdy je nutné funkci, která má být zavolána v&nbsp;nově spuštěném vláknu, předat nějaké parametry. To nelze provést přímo (funkci totiž nevolá programátor, ale modul <strong>threading</strong>), nicméně parametry do volané funkce je možné specifikovat. Funkci nejprve upravíme takovým způsobem, aby akceptovala parametry &ndash; jméno vlákna, čas prodlevy a počet opakování smyčky:</p>

<pre>
def <strong>worker</strong>(threadName, delay, n):
    for counter in range(1, n+1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
</pre>

<pre>
threading.Thread(target=worker, args=("Thread-1", 0.5, 10)).start()
threading.Thread(target=worker, args=("Thread-2", 1.0, 10)).start()
threading.Thread(target=worker, args=("Thread-3", 1.5, 10)).start()
</pre>

<pre>
Thread-1: 1/10 - Sat Feb 19 09:21:14 2022
Thread-2: 1/10 - Sat Feb 19 09:21:14 2022
Thread-1: 2/10 - Sat Feb 19 09:21:14 2022
Thread-1: 3/10 - Sat Feb 19 09:21:15 2022
Thread-3: 1/10 - Sat Feb 19 09:21:15 2022
Thread-2: 2/10 - Sat Feb 19 09:21:15 2022
Thread-1: 4/10 - Sat Feb 19 09:21:15 2022
Thread-1: 5/10 - Sat Feb 19 09:21:16 2022
Thread-3: 2/10 - Sat Feb 19 09:21:16 2022
Thread-2: 3/10 - Sat Feb 19 09:21:16 2022
Thread-1: 6/10 - Sat Feb 19 09:21:16 2022
Thread-1: 7/10 - Sat Feb 19 09:21:17 2022
Thread-2: 4/10 - Sat Feb 19 09:21:17 2022
Thread-1: 8/10 - Sat Feb 19 09:21:17 2022
Thread-3: 3/10 - Sat Feb 19 09:21:18 2022
Thread-1: 9/10 - Sat Feb 19 09:21:18 2022
<strong>Thread-1: 10/10 - Sat Feb 19 09:21:18 2022</strong>
Thread-2: 5/10 - Sat Feb 19 09:21:18 2022
Thread-3: 4/10 - Sat Feb 19 09:21:19 2022
Thread-2: 6/10 - Sat Feb 19 09:21:19 2022
Thread-2: 7/10 - Sat Feb 19 09:21:20 2022
Thread-3: 5/10 - Sat Feb 19 09:21:21 2022
Thread-2: 8/10 - Sat Feb 19 09:21:21 2022
Thread-3: 6/10 - Sat Feb 19 09:21:22 2022
Thread-2: 9/10 - Sat Feb 19 09:21:22 2022
<strong>Thread-2: 10/10 - Sat Feb 19 09:21:23 2022</strong>
Thread-3: 7/10 - Sat Feb 19 09:21:24 2022
Thread-3: 8/10 - Sat Feb 19 09:21:25 2022
Thread-3: 9/10 - Sat Feb 19 09:21:27 2022
<strong>Thread-3: 10/10 - Sat Feb 19 09:21:28 2022</strong>
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
<i>"""Multithreading."""</i>
&nbsp;
import threading
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    for counter in range(1, n+1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
<i># vytvoření a spuštění trojice vláken</i>
threading.Thread(target=worker, args=("Thread-1", 0.5, 10)).start()
threading.Thread(target=worker, args=("Thread-2", 1.0, 10)).start()
threading.Thread(target=worker, args=("Thread-3", 1.5, 10)).start()
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Explicitní čekání na dokončení běhu vláken</h2>

<p></p>

<pre>
Thread-1: 1/10 - Sat Feb 19 09:55:59 2022
Thread-2: 1/10 - Sat Feb 19 09:55:59 2022
Thread-1: 2/10 - Sat Feb 19 09:55:59 2022
Thread-3: 1/10 - Sat Feb 19 09:56:00 2022
Thread-1: 3/10 - Sat Feb 19 09:56:00 2022
Thread-1: 4/10 - Sat Feb 19 09:56:00 2022
Thread-2: 2/10 - Sat Feb 19 09:56:00 2022
Thread-1: 5/10 - Sat Feb 19 09:56:01 2022
Thread-3: 2/10 - Sat Feb 19 09:56:01 2022
Thread-2: 3/10 - Sat Feb 19 09:56:01 2022
Thread-1: 6/10 - Sat Feb 19 09:56:01 2022
Thread-1: 7/10 - Sat Feb 19 09:56:02 2022
Thread-2: 4/10 - Sat Feb 19 09:56:02 2022
Thread-1: 8/10 - Sat Feb 19 09:56:02 2022
Thread-3: 3/10 - Sat Feb 19 09:56:03 2022
Thread-1: 9/10 - Sat Feb 19 09:56:03 2022
Thread-2: 5/10 - Sat Feb 19 09:56:03 2022
Thread-1: 10/10 - Sat Feb 19 09:56:03 2022
Thread-3: 4/10 - Sat Feb 19 09:56:04 2022
Thread-2: 6/10 - Sat Feb 19 09:56:04 2022
Thread-2: 7/10 - Sat Feb 19 09:56:05 2022
Thread-3: 5/10 - Sat Feb 19 09:56:06 2022
Thread-2: 8/10 - Sat Feb 19 09:56:06 2022
Thread-3: 6/10 - Sat Feb 19 09:56:07 2022
Thread-2: 9/10 - Sat Feb 19 09:56:07 2022
Thread-2: 10/10 - Sat Feb 19 09:56:08 2022
Thread-3: 7/10 - Sat Feb 19 09:56:09 2022
Thread-3: 8/10 - Sat Feb 19 09:56:10 2022
Thread-3: 9/10 - Sat Feb 19 09:56:12 2022
Thread-3: 10/10 - Sat Feb 19 09:56:13 2022
Done!
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
<i>"""Multithreading."""</i>
&nbsp;
import threading
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    for counter in range(1, n+1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
<i># vytvoření trojice vláken</i>
t1 = threading.Thread(target=worker, args=("Thread-1", 0.5, 10))
t2 = threading.Thread(target=worker, args=("Thread-2", 1.0, 10))
t3 = threading.Thread(target=worker, args=("Thread-3", 1.5, 10))
&nbsp;
<i># spuštění všech vláken</i>
t1.start()
t2.start()
t3.start()
&nbsp;
<i># čekání na dokončení všech vláken</i>
t1.join()
t2.join()
t3.join()
&nbsp;
print("Done!")
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vlákna s&nbsp;příznakem &bdquo;daemon&ldquo;</h2>

<p></p>

<pre>
import threading
import time
&nbsp;
&nbsp;
def <strong>worker</strong>():
    threadName = threading.current_thread().name
    delay = 1
    n = 10
    for counter in range(1, n+1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
<i># vytvoření a spuštění trojice vláken v režimu daemon</i>
threading.Thread(target=worker, daemon=True).start()
threading.Thread(target=worker, daemon=True).start()
threading.Thread(target=worker, daemon=True).start()
&nbsp;
<i># na dokončení vláken se nečeká!</i>
</pre>

<p></p>

<pre>
import threading
import time
&nbsp;
&nbsp;
def <strong>worker</strong>():
    threadName = threading.current_thread().name
    delay = 1
    n = 10
    for counter in range(1, n+1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
<i># vytvoření a spuštění trojice vláken v režimu daemon</i>
t1 = threading.Thread(target=worker, daemon=True)
t2 = threading.Thread(target=worker, daemon=True)
t3 = threading.Thread(target=worker, daemon=True)
&nbsp;
t1.start()
t2.start()
t3.start()
&nbsp;
t1.join()
t2.join()
t3.join()
</pre>

<pre>
Thread-1: 1/10 - Sat Feb 19 09:58:02 2022
Thread-2: 1/10 - Sat Feb 19 09:58:02 2022
Thread-3: 1/10 - Sat Feb 19 09:58:02 2022
Thread-2: 2/10 - Sat Feb 19 09:58:03 2022
Thread-1: 2/10 - Sat Feb 19 09:58:03 2022
Thread-3: 2/10 - Sat Feb 19 09:58:03 2022
Thread-3: 3/10 - Sat Feb 19 09:58:04 2022
Thread-1: 3/10 - Sat Feb 19 09:58:04 2022
Thread-2: 3/10 - Sat Feb 19 09:58:04 2022
Thread-3: 4/10 - Sat Feb 19 09:58:05 2022
Thread-1: 4/10 - Sat Feb 19 09:58:05 2022
Thread-2: 4/10 - Sat Feb 19 09:58:05 2022
Thread-3: 5/10 - Sat Feb 19 09:58:06 2022
Thread-1: 5/10 - Sat Feb 19 09:58:06 2022
Thread-2: 5/10 - Sat Feb 19 09:58:06 2022
Thread-3: 6/10 - Sat Feb 19 09:58:07 2022
Thread-1: 6/10 - Sat Feb 19 09:58:07 2022
Thread-2: 6/10 - Sat Feb 19 09:58:07 2022
Thread-2: 7/10 - Sat Feb 19 09:58:08 2022
Thread-1: 7/10 - Sat Feb 19 09:58:08 2022
Thread-3: 7/10 - Sat Feb 19 09:58:08 2022
Thread-3: 8/10 - Sat Feb 19 09:58:09 2022
Thread-2: 8/10 - Sat Feb 19 09:58:09 2022
Thread-1: 8/10 - Sat Feb 19 09:58:09 2022
Thread-3: 9/10 - Sat Feb 19 09:58:10 2022
Thread-1: 9/10 - Sat Feb 19 09:58:10 2022
Thread-2: 9/10 - Sat Feb 19 09:58:10 2022
Thread-1: 10/10 - Sat Feb 19 09:58:11 2022
Thread-3: 10/10 - Sat Feb 19 09:58:11 2022
Thread-2: 10/10 - Sat Feb 19 09:58:11 2022
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Čekaní na dokončení vlákna po zvolený časový interval, test, zda vlákno stále běží</h2>

<p></p>

<pre>
import threading
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    for counter in range(1, n+1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
<i># vytvoření trojice vláken</i>
t1 = threading.Thread(target=worker, args=("Thread-1", 0.5, 10))
t2 = threading.Thread(target=worker, args=("Thread-2", 1.0, 10))
t3 = threading.Thread(target=worker, args=("Thread-3", 1.5, 10))
&nbsp;
<i># spuštění všech vláken</i>
t1.start()
t2.start()
t3.start()
&nbsp;
<i># čekání na dokončení všech vláken</i>
t3.join(timeout=5)
&nbsp;
if t3.is_alive():
    print("wait timeout")
else:
    print("t3 has finished")
&nbsp;
t2.join()
print("t2 has finished")
&nbsp;
t1.join()
print("t1 has finished")
&nbsp;
&nbsp;
print("Done!")
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Komunikace mezi vlákny</h2>

<p></p>

<pre>
</pre>

<p></p>

<pre>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Standardní synchronizované datové struktury z&nbsp;balíčku <strong>queue</strong></h2>

<p></p>

<pre>
import time
import threading
import queue
&nbsp;
&nbsp;
<i># vytvoření fronty</i>
q = queue.Queue()
&nbsp;
&nbsp;
<i># simulace konzumenta</i>
def <strong>consumer</strong>():
    while True:
        job = q.get()
        print(f'Starting consuming {job}')
        time.sleep(0.4)
        print(f'Consumed {job}')
        q.task_done()
&nbsp;
&nbsp;
<i># spuštění konzumenta</i>
threading.Thread(target=consumer, daemon=True, name="první").start()
&nbsp;
<i># vytvoření úloh v producentovi</i>
for job in range(10):
    print(f'Producing {job}')
    q.put(job)
&nbsp;
<i># čekání na zpracování všech zpráv ve frontě</i>
q.join()
print('Done')
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Fronta ve funkci synchronizačního mechanismu</h2>

<p></p>

<pre>
import time
import threading
import queue
&nbsp;
&nbsp;
<i># vytvoření fronty</i>
q = queue.Queue()
&nbsp;
&nbsp;
<i># simulace konzumenta</i>
def <strong>consumer</strong>():
    name = threading.current_thread().name
    while True:
        job = q.get()
        print(f'{name} thread: Starting consuming {job}')
        time.sleep(0.4)
        print(f'{name} thread: Consumed {job}')
        q.task_done()
&nbsp;
&nbsp;
<i># spuštění konzumentů</i>
threading.Thread(target=consumer, daemon=True, name="1st").start()
threading.Thread(target=consumer, daemon=True, name="2nd").start()
threading.Thread(target=consumer, daemon=True, name="3rd").start()
&nbsp;
<i># vytvoření úloh v producentovi</i>
for job in range(10):
    print(f'Producing {job}')
    q.put(job)
&nbsp;
<i># čekání na zpracování všech zpráv ve frontě</i>
q.join()
print('Done')
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Klasický vzor producent&ndash;konzument</h2>

<p></p>

<pre>
import time
import threading
import queue
&nbsp;
&nbsp;
<i># vytvoření fronty</i>
q = queue.Queue()
&nbsp;
&nbsp;
<i># simulace producenta</i>
def <strong>producer</strong>():
    name = threading.current_thread().name
    for job in range(10):
        print(f'{name} thread: Starting producing {job}')
        q.put(job)
        time.sleep(0.3)
        print(f'{name} thread: Produced {job}')
&nbsp;
&nbsp;
<i># simulace konzumenta</i>
def <strong>consumer</strong>():
    name = threading.current_thread().name
    while True:
        job = q.get()
        print(f'{name} thread: Starting consuming {job}')
        time.sleep(0.4)
        print(f'{name} thread: Consumed {job}')
        q.task_done()
&nbsp;
&nbsp;
<i># spuštění konzumentů</i>
threading.Thread(target=consumer, daemon=True, name="1st").start()
threading.Thread(target=consumer, daemon=True, name="2nd").start()
threading.Thread(target=consumer, daemon=True, name="3rd").start()
&nbsp;
<i># spuštění producentů</i>
threading.Thread(target=producer, daemon=True, name="1st").start()
threading.Thread(target=producer, daemon=True, name="2nd").start()
threading.Thread(target=producer, daemon=True, name="3rd").start()
threading.Thread(target=producer, daemon=True, name="3rd").start()
&nbsp;
<i># čekání na zpracování všech zpráv ve frontě</i>
q.join()
print('Done')
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>

<pre>
import time
import threading
import queue
&nbsp;
&nbsp;
<i># vytvoření fronty</i>
q = queue.Queue()
&nbsp;
&nbsp;
<i># simulace producenta</i>
def <strong>producer</strong>():
    name = threading.current_thread().name
    for job in range(1000):
        print(f'{name} thread: Starting producing {job}')
        q.put(job)
        time.sleep(0.3)
        print(f'{name} thread: Produced {job}')
&nbsp;
&nbsp;
<i># simulace konzumenta</i>
def <strong>consumer</strong>():
    name = threading.current_thread().name
    while True:
        job = q.get()
        print(f'{name} thread: Starting consuming {job}')
        time.sleep(0.4)
        print(f'{name} thread: Consumed {job}')
        q.task_done()
&nbsp;
&nbsp;
<i># spuštění konzumentů</i>
threading.Thread(target=consumer, daemon=True, name="1st").start()
threading.Thread(target=consumer, daemon=True, name="2nd").start()
threading.Thread(target=consumer, daemon=True, name="3rd").start()
&nbsp;
<i># spuštění producentů</i>
threading.Thread(target=producer, daemon=True, name="1st").start()
threading.Thread(target=producer, daemon=True, name="2nd").start()
threading.Thread(target=producer, daemon=True, name="3rd").start()
threading.Thread(target=producer, daemon=True, name="3rd").start()
&nbsp;
<i># čekání na zpracování všech zpráv ve frontě</i>
q.join()
print('Done')
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Jazyk Python a multiprocessing</h2>

<p>V&nbsp;předchozích kapitolách jsme si popsali základní způsoby rozdělení výpočtů do většího množství vláken s&nbsp;využitím standardního balíčku <strong>threading</strong>. Ovšem existují i další možnosti tvorby aplikací, jejichž části mají běžet buď &bdquo;pouze&ldquo; souběžně nebo které využijí plnou paralelnost. Vzhledem k&nbsp;existenci GILu ve standardním CPythonu je problematické zajistit paralelní běh v&nbsp;rámci jednoho procesu (tedy vlastně jednoho virtuálního stroje Pythonu), proto je dalším logickým krokem rozdělení (<i>fork</i>) tohoto procesu na větší množství plnohodnotných systémových procesů. Ty budou moci běžet nezávisle na sobě a navíc toto řešení programátora donutí k&nbsp;tomu, aby explicitně zajistil korektní komunikaci mezi těmito procesy &ndash; zde již nemůže dojít k&nbsp;chybám typu &bdquo;přístup do objektu vlastněného jiným vláknem&ldquo; atd. Toto řešení přináší i některé nevýhody &ndash; větší systémové nároky, pomalejší spouštění procesů (v&nbsp;porovnání se spouštěním vláken) a v&nbsp;některých případech delší doba přepínání mezi procesy (ovšem to se podle mého názoru u interpretovaného Pythonu ztratí) a někdy by se skutečně hodilo mít snadný přístup ke sdíleným objektům.</p>

<p>V&nbsp;případě, že se rozhodnete vyzkoušet spouštění jednotlivých částí algoritmu v&nbsp;samostatných procesech, můžete využít další standardní modul, který se jmenuje příznačně <strong>multiprocessing</strong>. Tento modul vývojáře do značné míry odstiňuje od nízkoúrovňových operací, tedy od samotného rozvětvení procesu (<i>fork</i>), spuštění nového interpretru a specifikace, jaký kód má tento interpret použít. Z&nbsp;pohledu vývojáře je totiž použití modulu <strong>multiprocessing</strong> velmi přímočaré &ndash; pouze se zvolí, jaká funkce se má zavolat v&nbsp;novém procesu a jaké mají být této funkci předány argumenty. Navíc modul <strong>multiprocessing</strong> programátorům nabízí mechanismy umožňující komunikaci mezi procesy. Zejména se jedná o frontu (<i>queue</i>) (ovšem jinou frontu, než jsme doposud používali, i když její API je v&nbsp;některých ohledech prakticky totožné) a taktéž o oboustrannou rouru (<i>pipe</i>).</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Spuštění nového procesu</h2>

<p>Podívejme se nyní na velmi jednoduchý příklad, na němž jsou ukázány základní mechanismy modulu <strong>multiprocessing</strong>. Ve skriptu je definována funkce, která se má spustit v&nbsp;samostatném procesu:</p>

<pre>
def <strong>worker</strong>(name):
    print("hello", name)
</pre>

<p>Nový proces se spustí následovně:</p>

<pre>
p = Process(target=worker, args=("foo",))
p.start()
</pre>

<p>Implementovat je možné i čekání na dokončení tohoto procesu:</p>

<pre>
p.join()
</pre>

<p></p>

<pre>
from multiprocessing import Process
&nbsp;
&nbsp;
def <strong>worker</strong>(name):
    print("hello", name)
&nbsp;
&nbsp;
def <strong>main</strong>():
    p = Process(target=worker, args=("foo",))
    p.start()
    p.join()
&nbsp;
&nbsp;
if __name__ == '__main__':
    print("Running main")
    main()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Spuštění většího množství procesů, čekání na dokončení těchto procesů</h2>

<p></p>

<pre>
from multiprocessing import Process
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(name):
    print("hello", name)
    time.sleep(5)
    print("done", name)
&nbsp;
&nbsp;
def <strong>main</strong>():
    ps = []
&nbsp;
    for name in ("foo", "bar", "baz", "other"):
        p = Process(target=worker, args=(name,))
        p.start()
        ps.append(p)
&nbsp;
    for p in ps:
        p.join()
&nbsp;
&nbsp;
if __name__ == '__main__':
    print("Running main")
    main()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Zjednodušení předchozího demonstračního příkladu</h2>

<p></p>

<pre>
from multiprocessing import Process
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(name):
    print("hello", name)
    time.sleep(5)
    print("done", name)
&nbsp;
&nbsp;
def <strong>main</strong>():
    ps = [Process(target=worker, args=(name,)) for name in ("foo", "bar", "baz", "other")]
&nbsp;
    for p in ps:
        p.start()
&nbsp;
    for p in ps:
        p.join()
&nbsp;
&nbsp;
if __name__ == '__main__':
    print("Running main")
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Komunikace mezi procesy přes <strong>multiprocessing.Queue</strong></h2>

<p></p>

<pre>
from multiprocessing import Process, Queue
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(name, q):
    while True:
        cmd = q.get()
        print(name, cmd)
        if cmd == "quit":
            print("Quitting")
            return
        time.sleep(1)
&nbsp;
&nbsp;
def <strong>main</strong>():
    q = Queue()
&nbsp;
    ps = [Process(target=worker, args=(name, q)) for name in ("foo", "bar", "baz")]
&nbsp;
    for p in ps:
        p.start()
&nbsp;
    for i in range(10):
        q.put("command {}".format(i))
&nbsp;
    for i in range(3):
        q.put("quit")
&nbsp;
    for p in ps:
        p.join()
&nbsp;
&nbsp;
if __name__ == '__main__':
    print("Running main")
    main()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Komunikace mezi procesy přes obousměrnou rouru (<strong>multiprocessing.Pipe</strong>)</h2>

<p></p>

<pre>
from multiprocessing import Process, Pipe
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(name, conn):
    while True:
        cmd = conn.recv()
        print("{} received {}".format(name, cmd))
        if cmd == "quit":
            return
        else:
            conn.send("{} accepted {}".format(name, cmd))
        time.sleep(1)
&nbsp;
&nbsp;
def <strong>main</strong>():
    parent_conn, child_conn = Pipe()
&nbsp;
    p = Process(target=worker, args=("Worker", child_conn))
    p.start()
&nbsp;
    for i in range(10):
        parent_conn.send("command {}".format(i))
        print(parent_conn.recv())
&nbsp;
    parent_conn.send("quit")
&nbsp;
    p.join()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Spouštění a řízení paralelně běžících úloh &ndash; concurrent.futures</h2>

<p></p>

<pre>
from concurrent.futures.thread import ThreadPoolExecutor
import time


def <strong>worker</strong>(threadName, delay, n):
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))


with ThreadPoolExecutor(max_workers=3) as executor:
    executor.submit(worker, "Thread-1", 0.5, 10)
    executor.submit(worker, "Thread-2", 1.0, 10)
    executor.submit(worker, "Thread-3", 1.5, 10)


print("Done!")
</pre>

<pre>
from concurrent.futures.thread import ThreadPoolExecutor
import time


def worker(threadName, delay, n):
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
    print("{}: DONE!".format(threadName))


workers = 10

with ThreadPoolExecutor(max_workers=3) as executor:
    for w in range(workers):
        executor.submit(worker, "Thread-{}".format(w + 1), 0.5 + w / 10.0, 10)


print("Done!")
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 byly uloženy do Git repositáře dostupného na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>multithreading1.py</td><td>spuštění tří vláken vykonávajících déletrvající činnost</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading1.py</a></td></tr>
<tr><td> 2</td><td>multithreading2.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading2.py</a></td></tr>
<tr><td> 3</td><td>multithreading3.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading3.py</a></td></tr>
<tr><td> 4</td><td>multithreading_join_deamon.py      </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_join_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_join_deamon.py</a></td></tr>
<tr><td> 5</td><td>multithreading_no_join_deamon.py   </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_deamon.py</a></td></tr>
<tr><td> 6</td><td>multithreading_no_join_no_deamon.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_no_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_no_deamon.py</a></td></tr>
<tr><td> 7</td><td>multithreading_timeout.py          </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_timeout.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_timeout.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 8</td><td>multiprocessing1.py</td><td>zavolání funkce spuštěné v&nbsp;rámci dalšího procesu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing1.py</a></td></tr>
<tr><td> 9</td><td>multiprocessing2.py                </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing2.py</a></td></tr>
<tr><td>10</td><td>multiprocessing3.py                </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing3.py</a></td></tr>
<tr><td>11</td><td>multiprocessing4.py                </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing4.py</a></td></tr>
<tr><td>12</td><td>multiprocessing5.py                </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing5.py</a></td></tr>
<tr><td>13</td><td>multiprocessing6.py                </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing6.py</a></td></tr>
<tr><td>14</td><td>multiprocessing7.py                </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing7.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>priority_queue_example.py          </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/priority_queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/priority_queue_example.py</a></td></tr>
<tr><td>16</td><td>queue_example.py                   </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queue_example.py</a></td></tr>
<tr><td>17</td><td>queues1.py                         </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues1.py</a></td></tr>
<tr><td>18</td><td>queues2.py                         </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues2.py</a></td></tr>
<tr><td>19</td><td>queues3.py                         </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues3.py</a></td></tr>
<tr><td>20</td><td>queues4.py                         </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues4.py</a></td></tr>
<tr><td>21</td><td>simple_queue_example.py            </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/simple_queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/simple_queue_example.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Dokumentace Pythonu: balíček queue<br />
<a href="https://docs.python.org/3/library/queue.html">https://docs.python.org/3/library/queue.html</a>
</li>

<li>Dokumentace Pythonu: balíček threading<br />
<a href="https://docs.python.org/3/library/threading.html?">https://docs.python.org/3/library/threading.html?</a>
</li>

<li>Dokumentace Pythonu: balíček multiprocessing<br />
<a href="https://docs.python.org/3/library/multiprocessing.html">https://docs.python.org/3/library/multiprocessing.html</a>
</li>

<li>Dokumentace Pythonu: balíček asyncio<br />
<a href="https://docs.python.org/3/library/asyncio.html">https://docs.python.org/3/library/asyncio.html</a>
</li>

<li>Synchronization Primitives<br />
<a href="https://docs.python.org/3/library/asyncio-sync.html">https://docs.python.org/3/library/asyncio-sync.html</a>
</li>

<li>Coroutines<br />
<a href="https://docs.python.org/3/library/asyncio-task.html">https://docs.python.org/3/library/asyncio-task.html</a>
</li>

<li>Queues<br />
<a href="https://docs.python.org/3/library/asyncio-queue.html">https://docs.python.org/3/library/asyncio-queue.html</a>
</li>

<li>python-csp<br />
<a href="https://python-csp.readthedocs.io/en/latest/">https://python-csp.readthedocs.io/en/latest/</a>
</li>

<li>TrellisSTM<br />
<a href="http://peak.telecommunity.com/DevCenter/TrellisSTM">http://peak.telecommunity.com/DevCenter/TrellisSTM</a>
</li>

<li>Python Multithreading and Multiprocessing Tutorial<br />
<a href="https://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python">https://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

