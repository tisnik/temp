<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

schema, query, resolver, mutations

server/books
server/books/{id}
server/authors
server/authors/{id}

prvni vraci napriklad nazev + rok vydani a ID autora
druhy vraci jmeno, prijmeni, a seznam ID knih

book + author: dva cally
author + vsechny booky: vice callu

zbytecna data
ale ne ta dulezita data

Query {
    book(id: 42) {
        title,
        year
    }
}

{
    book(id: 42) {
        title,
        author {
            name,
            surname
        }
    }
}

{
    book(id: 42) {
        title,
        year,
        author {
            name,
            surname,
            books {
                title
            }
        }
    }
}

{
    author(id: 100) {
        name
        surname
    }
}

{
    author(id: 100) {
        name
        surname
        books {
            title
            year
        }
    }
}

{
    author(id: 100) {
        name
        surname
        books {
            title
            year
            similar {
                title
            }
        }
    }
}

<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace balíčku <strong>strawberry-graphql</strong></h2>

<pre>
$ <strong>pip install --user 'strawberry-graphql[debug-server]'</strong>
</pre>

<pre>
Collecting strawberry-graphql[debug-server]
  Downloading strawberry_graphql-0.258.0-py3-none-any.whl.metadata (7.5 kB)
Collecting graphql-core&lt;3.4.0,&gt;=3.2.0 (from strawberry-graphql[debug-server])
  Downloading graphql_core-3.2.5-py3-none-any.whl.metadata (10 kB)
Collecting libcst&gt;=0.4.7 (from strawberry-graphql[debug-server])
  Downloading libcst-1.6.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (17 kB)
Requirement already satisfied: pygments&lt;3.0,&gt;=2.3 in /home/ptisnovs/.local/lib/python3.12/site-packages (from strawberry-graphql[debug-server]) (2.18.0)
Requirement already satisfied: python-dateutil&lt;3.0.0,&gt;=2.7.0 in /usr/lib/python3.12/site-packages (from strawberry-graphql[debug-server]) (2.8.2)
Collecting python-multipart&gt;=0.0.7 (from strawberry-graphql[debug-server])
  Downloading python_multipart-0.0.20-py3-none-any.whl.metadata (1.8 kB)
Requirement already satisfied: rich&gt;=12.0.0 in /home/ptisnovs/.local/lib/python3.12/site-packages (from strawberry-graphql[debug-server]) (13.9.4)
Collecting starlette&gt;=0.18.0 (from strawberry-graphql[debug-server])
  Downloading starlette-0.45.2-py3-none-any.whl.metadata (6.3 kB)
Collecting typer&gt;=0.7.0 (from strawberry-graphql[debug-server])
  Downloading typer-0.15.1-py3-none-any.whl.metadata (15 kB)
Requirement already satisfied: typing-extensions&gt;=4.5.0 in /usr/lib/python3.12/site-packages (from strawberry-graphql[debug-server]) (4.12.2)
Collecting uvicorn&gt;=0.11.6 (from strawberry-graphql[debug-server])
Requirement already satisfied: pyyaml&gt;=5.2 in /usr/lib64/python3.12/site-packages (from libcst&gt;=0.4.7-&gt;strawberry-graphql[debug-server]) (6.0.1)
Requirement already satisfied: six&gt;=1.5 in /usr/lib/python3.12/site-packages (from python-dateutil&lt;3.0.0,&gt;=2.7.0-&gt;strawberry-graphql[debug-server]) (1.16.0)
Requirement already satisfied: markdown-it-py&gt;=2.2.0 in /home/ptisnovs/.local/lib/python3.12/site-packages (from rich&gt;=12.0.0-&gt;strawberry-graphql[debug-server]) (3.0.0)
Requirement already satisfied: anyio&lt;5,&gt;=3.6.2 in /home/ptisnovs/.local/lib/python3.12/site-packages (from starlette&gt;=0.18.0-&gt;strawberry-graphql[debug-server]) (4.6.2.post1)
Requirement already satisfied: click&gt;=8.0.0 in /usr/lib/python3.12/site-packages (from typer&gt;=0.7.0-&gt;strawberry-graphql[debug-server]) (8.1.7)
Requirement already satisfied: shellingham&gt;=1.3.0 in /home/ptisnovs/.local/lib/python3.12/site-packages (from typer&gt;=0.7.0-&gt;strawberry-graphql[debug-server]) (1.5.4)
Requirement already satisfied: h11&gt;=0.8 in /home/ptisnovs/.local/lib/python3.12/site-packages (from uvicorn&gt;=0.11.6-&gt;strawberry-graphql[debug-server]) (0.14.0)
Requirement already satisfied: idna&gt;=2.8 in /usr/lib/python3.12/site-packages (from anyio&lt;5,&gt;=3.6.2-&gt;starlette&gt;=0.18.0-&gt;strawberry-graphql[debug-server]) (3.7)
Requirement already satisfied: sniffio&gt;=1.1 in /home/ptisnovs/.local/lib/python3.12/site-packages (from anyio&lt;5,&gt;=3.6.2-&gt;starlette&gt;=0.18.0-&gt;strawberry-graphql[debug-server]) (1.3.1)
Requirement already satisfied: mdurl~=0.1 in /home/ptisnovs/.local/lib/python3.12/site-packages (from markdown-it-py&gt;=2.2.0-&gt;rich&gt;=12.0.0-&gt;strawberry-graphql[debug-server]) (0.1.2)
Downloading graphql_core-3.2.5-py3-none-any.whl (203 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 203.2/203.2 kB 2.3 MB/s eta 0:00:00
Downloading libcst-1.6.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.3 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2.3/2.3 MB 6.7 MB/s eta 0:00:00
Downloading python_multipart-0.0.20-py3-none-any.whl (24 kB)
Downloading starlette-0.45.2-py3-none-any.whl (71 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 71.5/71.5 kB 2.1 MB/s eta 0:00:00
Downloading typer-0.15.1-py3-none-any.whl (44 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 44.9/44.9 kB 2.3 MB/s eta 0:00:00
Downloading uvicorn-0.34.0-py3-none-any.whl (62 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 62.3/62.3 kB 3.4 MB/s eta 0:00:00
Downloading strawberry_graphql-0.258.0-py3-none-any.whl (297 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 297.2/297.2 kB 5.5 MB/s eta 0:00:00
Installing collected packages: uvicorn, python-multipart, libcst, graphql-core, strawberry-graphql, starlette, typer
Successfully installed graphql-core-3.2.5 libcst-1.6.0 python-multipart-0.0.20 starlette-0.45.2 strawberry-graphql-0.258.0 typer-0.15.1 uvicorn-0.34.0
</pre>

<pre>
$ <strong>strawberry </strong>
</pre>

                                                                                                                                        
<pre>
 Usage: strawberry [OPTIONS] COMMAND [ARGS]...                                                                                          
&nbsp;
╭─ Options ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ --install-completion          Install completion for the current shell.                                                              │
│ --show-completion             Show completion for the current shell, to copy it or customize the installation.                       │
│ --help                        Show this message and exit.                                                                            │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
╭─ Commands ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ codegen          Generate code from a query                                                                                          │
│ export-schema    Exports the schema                                                                                                  │
│ schema-codegen   Generate code from a query                                                                                          │
│ server           Starts debug server                                                                                                 │
│ upgrade          Upgrades a Strawberry project to the latest version                                                                 │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
import strawberry
&nbsp;
&nbsp;
def <strong>get_books</strong>():
    return [
        Book(
            title="Dune",
            author="Frank Herbert",
        ),
        Book(
            title="Dune Messiah",
            author="Frank Herbert",
        ),
        Book(
            title="Mythago Wood",
            author="Robert Holdstock",
        ),
        Book(
            title="Merlin's Wood",
            author="Robert Holdstock",
        ),
        Book(
            title="Lavondyss",
            author="Robert Holdstock",
        ),
    ]
&nbsp;
&nbsp;
@strawberry.type
class <strong>Book</strong>:
    title: str
    author: str
&nbsp;
&nbsp;
@strawberry.type
class <strong>Query</strong>:
    books: list[Book] = strawberry.field(resolver=get_books)
&nbsp;
&nbsp;
schema = strawberry.Schema(query=Query)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
$ <strong>strawberry export-schema schema</strong>
</pre>

<pre>
type Book {
  title: String!
  author: String!
}
&nbsp;
type Query {
  books: [Book!]!
}
</pre>

<pre>
query {
  books {
    title,
    author,
  }
}
</pre>

<pre>
{
  "data": {
    "books": [
      {
        "title": "Dune",
        "author": "Frank Herbert"
      },
      {
        "title": "Dune Messiah",
        "author": "Frank Herbert"
      },
      {
        "title": "Mythago Wood",
        "author": "Robert Holdstock"
      },
      {
        "title": "Merlin's Wood",
        "author": "Robert Holdstock"
      },
      {
        "title": "Lavondyss",
        "author": "Robert Holdstock"
      }
    ]
  }
}
</pre>

<pre>
query {
  books {
    title,
  }
}
</pre>

<pre>
{
  "data": {
    "books": [
      {
        "title": "Dune"
      },
      {
        "title": "Dune Messiah"
      },
      {
        "title": "Mythago Wood"
      },
      {
        "title": "Merlin's Wood"
      },
      {
        "title": "Lavondyss"
      }
    ]
  }
}
</pre>

<pre>
query {
  books {
    author,
  }
}
</pre>

<pre>
{
  "data": {
    "books": [
      {
        "author": "Frank Herbert"
      },
      {
        "author": "Frank Herbert"
      },
      {
        "author": "Robert Holdstock"
      },
      {
        "author": "Robert Holdstock"
      },
      {
        "author": "Robert Holdstock"
      }
    ]
  }
}
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
import strawberry


def get_books_for_author(author: str):
    books = [
        Book(
            title="Dune",
            author="Frank Herbert",
        ),
        Book(
            title="Dune Messiah",
            author="Frank Herbert",
        ),
        Book(
            title="Mythago Wood",
            author="Robert Holdstock",
        ),
        Book(
            title="Merlin's Wood",
            author="Robert Holdstock",
        ),
        Book(
            title="Lavondyss",
            author="Robert Holdstock",
        ),
    ]
    return [book for book in books if book.author == author]


@strawberry.type
class Book:
    title: str
    author: str


@strawberry.type
class Query:
    books: list[Book] = strawberry.field(resolver=get_books_for_author)


schema = strawberry.Schema(query=Query)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
$ strawberry export-schema schema
</pre>

<pre>
type Book {
  title: String!
  author: String!
}

type Query {
  books(author: String!): [Book!]!
}
</pre>

<pre>
query {
  books {
    title,
    author,
  }
}
</pre>

<pre>
{
  "data": null,
  "errors": [
    {
      "message": "Field 'books' argument 'author' of type 'String!' is required, but it was not provided.",
      "locations": [
        {
          "line": 2,
          "column": 3
        }
      ]
    }
  ]
}
</pre>

<pre>
query {
  books(author: "Frank Herbert") {
    title,
    author,
  }
}
</pre>

<pre>
{
  "data": {
    "books": [
      {
        "title": "Dune",
        "author": "Frank Herbert"
      },
      {
        "title": "Dune Messiah",
        "author": "Frank Herbert"
      }
    ]
  }
}
</pre>

<pre>
query {
  books(author: "Robert Holdstock") {
    title,
    author,
  }
}
</pre>

<pre>
{
  "data": {
    "books": [
      {
        "title": "Mythago Wood",
        "author": "Robert Holdstock"
      },
      {
        "title": "Merlin's Wood",
        "author": "Robert Holdstock"
      },
      {
        "title": "Lavondyss",
        "author": "Robert Holdstock"
      }
    ]
  }
}
</pre>

<pre>
query {
  books(author: "Jára Cimrman") {
    title,
    author,
  }
</pre>

<pre>
{
  "data": {
    "books": []
  }
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
import strawberry


def get_books_for_author(author: str | None = None):
    books = [
        Book(
            title="Dune",
            author="Frank Herbert",
        ),
        Book(
            title="Dune Messiah",
            author="Frank Herbert",
        ),
        Book(
            title="Mythago Wood",
            author="Robert Holdstock",
        ),
        Book(
            title="Merlin's Wood",
            author="Robert Holdstock",
        ),
        Book(
            title="Lavondyss",
            author="Robert Holdstock",
        ),
    ]
    if author is None:
        return books
    return [book for book in books if book.author == author]


@strawberry.type
class Book:
    title: str
    author: str


@strawberry.type
class Query:
    books: list[Book] = strawberry.field(resolver=get_books_for_author)


schema = strawberry.Schema(query=Query)
</pre>

<pre>
from typing import Optional
import strawberry


def get_books_for_author(author: Optional[str] = None):
    books = [
        Book(
            title="Dune",
            author="Frank Herbert",
        ),
        Book(
            title="Dune Messiah",
            author="Frank Herbert",
        ),
        Book(
            title="Mythago Wood",
            author="Robert Holdstock",
        ),
        Book(
            title="Merlin's Wood",
            author="Robert Holdstock",
        ),
        Book(
            title="Lavondyss",
            author="Robert Holdstock",
        ),
    ]
    if author is None:
        return books
    return [book for book in books if book.author == author]


@strawberry.type
class Book:
    title: str
    author: str


@strawberry.type
class Query:
    books: list[Book] = strawberry.field(resolver=get_books_for_author)


schema = strawberry.Schema(query=Query)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
type Book {
  title: String!
  author: String!
}

type Query {
  books(author: String = null): [Book!]!
}
</pre>

<pre>
query {
  books(author: "Frank Herbert") {
    title,
    author,
  }
}
</pre>

<pre>
{
  "data": {
    "books": [
      {
        "title": "Dune",
        "author": "Frank Herbert"
      },
      {
        "title": "Dune Messiah",
        "author": "Frank Herbert"
      }
    ]
  }
}
</pre>

<pre>
query {
  books {
    title,
    author,
  }
}
</pre>

<pre>
{
  "data": {
    "books": [
      {
        "title": "Dune",
        "author": "Frank Herbert"
      },
      {
        "title": "Dune Messiah",
        "author": "Frank Herbert"
      },
      {
        "title": "Mythago Wood",
        "author": "Robert Holdstock"
      },
      {
        "title": "Merlin's Wood",
        "author": "Robert Holdstock"
      },
      {
        "title": "Lavondyss",
        "author": "Robert Holdstock"
      }
    ]
  }
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
import typing
from typing import Optional
import strawberry


database = (
    ("Dune", "Frank Herbert"),
    ("Dune Messiah", "Frank Herbert"),
    ("Mythago Wood", "Robert Holdstock"),
    ("Merlin's Wood", "Robert Holdstock"),
    ("Lavondyss", "Robert Holdstock"),
)


def get_author_for_book(root: "Book") -> "Author":
    for record in database:
        if record[0] == root.title:
            return Author(name=record[1])
    return None


@strawberry.type
class Book:
    title: str
    author: "Author" = strawberry.field(resolver=get_author_for_book)


def get_books_for_author(root: "Author") -> list[Book]:
    if root is None:
        return [Book(title=record[0]) for record in database]
    return [Book(title=record[0]) for record in database if record[1] == root.name]


@strawberry.type
class Author:
    name: str
    books: list[Book] = strawberry.field(resolver=get_books_for_author)


@strawberry.type
class Query:
    books: list[Book] = strawberry.field(resolver=get_books_for_author)


schema = strawberry.Schema(query=Query)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
import typing
from typing import Optional
import strawberry


database = (
    ("Dune", "Frank Herbert"),
    ("Dune Messiah", "Frank Herbert"),
    ("Mythago Wood", "Robert Holdstock"),
    ("Merlin's Wood", "Robert Holdstock"),
    ("Lavondyss", "Robert Holdstock"),
)


def get_author_for_book(root: "Book") -> "Author":
    for record in database:
        if record[0] == root.title:
            return Author(name=record[1])
    return None


@strawberry.type
class Book:
    title: str
    author: "Author" = strawberry.field(resolver=get_author_for_book)


def get_books_for_author_with_name(author_name: str | None = None) -> list[Book]:
    if author_name is None:
        return [Book(title=record[0]) for record in database]
    return [Book(title=record[0]) for record in database if record[1] == author_name]


def get_books_for_author(root: "Author") -> list[Book]:
    return get_books_for_author_with_name(None if root is None else root.name)


@strawberry.type
class Author:
    name: str
    books: list[Book] = strawberry.field(resolver=get_books_for_author)


@strawberry.type
class Query:
    books: list[Book] = strawberry.field(resolver=get_books_for_author_with_name)


schema = strawberry.Schema(query=Query)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
import typing
from typing import Optional
import strawberry


database = (
    ("Dune", "Frank Herbert"),
    ("Dune Messiah", "Frank Herbert"),
    ("Mythago Wood", "Robert Holdstock"),
    ("Merlin's Wood", "Robert Holdstock"),
    ("Lavondyss", "Robert Holdstock"),
)


def get_author_for_book(root: "Book") -> "Author":
    for record in database:
        if record[0] == root.title:
            return Author(name=record[1])
    return None


@strawberry.type
class Book:
    title: str
    author: "Author" = strawberry.field(resolver=get_author_for_book)


def get_books_for_author_with_name(author_name: str | None = None) -> list[Book]:
    if author_name is None:
        return [Book(title=record[0]) for record in database]
    return [Book(title=record[0]) for record in database if record[1] == author_name]


def get_books_for_author(root: "Author") -> list[Book]:
    return get_books_for_author_with_name(None if root is None else root.name)


@strawberry.type
class Author:
    name: str
    books: list[Book] = strawberry.field(resolver=get_books_for_author)


def get_authors(root) -> list[Author]:
    return [Author(name=record[1]) for record in database]


@strawberry.type
class Query:
    authors: list[Author] = strawberry.field(resolver=get_authors)
    books: list[Book] = strawberry.field(resolver=get_books_for_author_with_name)


schema = strawberry.Schema(query=Query)
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
import random
from datetime import datetime
import strawberry
import uuid


@strawberry.type
class Alert:
    name: str
    namespace: str
    severity: str


@strawberry.type
class OperatorCondition:
    name: str
    condition: str
    reason: str


@strawberry.type
class UpgradeRisksPredictors:
    alerts: list[Alert] | None
    operator_conditions: list[OperatorCondition] | None


@strawberry.type
class UpgradePrediction:
    recommended: bool
    last_checked_at: str
    prediction_status: str
    cluster_id: str
    upgrade_risks_predictors: list[UpgradeRisksPredictors]


def generate_alerts():
    names = ["CriticalAlert", "SecurityAlert", "InfoAlert"]
    namespaces = ["openshift-kube-apiserver"]
    severities = ["info", "warning", "error", "critical"]
    alerts = []
    for i in range(random.randrange(1, 5)):
        alert = Alert(
            name=random.choice(names),
            namespace=random.choice(namespaces),
            severity=random.choice(severities),
        )
        alerts.append(alert)
    return alerts


def generate_operator_conditions():
    conds = []
    names = ["authentication", "security", "networking", "performance"]
    conditions = ["Degraded", "Untrusted", "Security check"]
    for i in range(random.randrange(1, 5)):
        cond = OperatorCondition(
            name=random.choice(names),
            condition=random.choice(conditions),
            reason="AsExpected",
        )
        conds.append(cond)
    return conds


def retrieve_predictions() -> list[UpgradeRisksPredictors]:
    predictions = []
    for i in range(random.randrange(1, 5)):
        prediction = UpgradeRisksPredictors(
            alerts=generate_alerts(), operator_conditions=generate_operator_conditions()
        )
        predictions.append(prediction)
    return predictions


def upgrade_prediction() -> UpgradePrediction:
    recommended = random.choice([True, False])
    upgrade_risks_predictors = []
    if not recommended:
        upgrade_risks_predictors = retrieve_predictions()

    return UpgradePrediction(
        cluster_id=uuid.uuid4(),
        recommended=recommended,
        last_checked_at=datetime.now(),
        upgrade_risks_predictors=upgrade_risks_predictors,
        prediction_status="ok",
    )


@strawberry.type
class Query:
    upgrade_prediction: UpgradePrediction = strawberry.field(
        resolver=upgrade_prediction
    )


schema = strawberry.Schema(query=Query)
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

query status {
  upgradePrediction {
    recommended,
  }
}

query recommendation {
  upgradePrediction {
    clusterId
    predictionStatus
    recommended
    lastCheckedAt
    upgradeRisksPredictors {
      alerts {
        name
        namespace
        severity
      }
      operatorConditions {
        name
        condition
        reason
      }
    }
  }
}



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady popsané v&nbsp;tomto článku naleznete i
v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td>1</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/GraphQL/strawberry-books-1/schema.py">https://github.com/tisnik/most-popular-python-libs/blob/master/GraphQL/strawberry-books-1/schema.py</a></td></tr>
<tr><td>2</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/GraphQL/strawberry-books-2/schema.py">https://github.com/tisnik/most-popular-python-libs/blob/master/GraphQL/strawberry-books-2/schema.py</a></td></tr>
<tr><td>3</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/GraphQL/strawberry-books-3/schema.py">https://github.com/tisnik/most-popular-python-libs/blob/master/GraphQL/strawberry-books-3/schema.py</a></td></tr>
<tr><td>4</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/GraphQL/strawberry-books-4/schema.py">https://github.com/tisnik/most-popular-python-libs/blob/master/GraphQL/strawberry-books-4/schema.py</a></td></tr>
<tr><td>5</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/GraphQL/strawberry-books-5/schema.py">https://github.com/tisnik/most-popular-python-libs/blob/master/GraphQL/strawberry-books-5/schema.py</a></td></tr>
<tr><td>6</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/GraphQL/strawberry-books-6/schema.py">https://github.com/tisnik/most-popular-python-libs/blob/master/GraphQL/strawberry-books-6/schema.py</a></td></tr>
<tr><td>7</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/GraphQL/strawberry-books-6/schema.py">https://github.com/tisnik/most-popular-python-libs/blob/master/GraphQL/strawberry-books-6/schema.py</a></td></tr>
</table>

strawberry-books-1
strawberry-books-2
strawberry-books-3
strawberry-books-4
strawberry-books-5
strawberry-books-6
strawberry-books-7
strawberry-insights



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Graphene-Python<br />
<a href="https://graphene-python.org/">https://graphene-python.org/</a>
</li>

<li>Strawberry<br />
<a href="https://strawberry.rocks/">https://strawberry.rocks/</a>
</li>

<li>GraphQL with Python: Tutorial with server and API examples<br />
<a href="https://hasura.io/learn/graphql/backend-stack/languages/python/">https://hasura.io/learn/graphql/backend-stack/languages/python/</a>
</li>

<li>GraphQL (Wikipedia CZ)<br />
<a href="https://cs.wikipedia.org/wiki/GraphQL">https://cs.wikipedia.org/wiki/GraphQL</a>
</li>

<li>Using GraphQL with Python - A Complete Guide<br />
<a href="https://www.apollographql.com/blog/complete-api-guide/">https://www.apollographql.com/blog/complete-api-guide/</a>
</li>

<li>Query codegen<br />
<a href="https://strawberry.rocks/docs/codegen/query-codegen">https://strawberry.rocks/docs/codegen/query-codegen</a>
</li>

<li>Strawberry GraphQL na GitHubu<br />
<a href="https://github.com/strawberry-graphql/strawberry">https://github.com/strawberry-graphql/strawberry</a>
</li>

<li>GraphQL Tutorial #1 - Introduction to GraphQL<br />
<a href="https://www.youtube.com/watch?v=Y0lDGjwRYKw">https://www.youtube.com/watch?v=Y0lDGjwRYKw</a>
</li>

<li>GraphQL Tutorial #2 - A Birdseye View of GraphQL<br />
<a href="https://www.youtube.com/watch?v=bUD6ERbcXrQ">https://www.youtube.com/watch?v=bUD6ERbcXrQ</a>
</li>

<li>GraphQL Tutorial #3 - Project (stack) Overview<br />
<a href="https://www.youtube.com/watch?v=g3IBx2RFl38">https://www.youtube.com/watch?v=g3IBx2RFl38</a>
</li>

<li>GraphQL Crash Course #1 - What is GraphQL?<br />
<a href="https://www.youtube.com/watch?v=xMCnDesBggM">https://www.youtube.com/watch?v=xMCnDesBggM</a>
</li>

<li>GraphQL Crash Course #2 - Query Basics<br />
<a href="https://www.youtube.com/watch?v=39CPVkZE4nM">https://www.youtube.com/watch?v=39CPVkZE4nM</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

