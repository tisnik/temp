<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Rozpoznávání obrázků knihovnou Scikit-learn: první kroky</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Rozpoznávání obrázků knihovnou Scikit-learn: první kroky</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Rozpoznávání obrázků knihovnou Scikit-learn: první kroky</a></p>
<p><a href="#k02">2. Řešený problém: rozpoznání ručně nakreslených číslic</a></p>
<p><a href="#k03">3. Instalace všech potřebných balíčků</a></p>
<p><a href="#k04">4. Kooperace mezi knihovnami Matplotlib a NumPy: vizualizace obsahu 2D matice</a></p>
<p><a href="#k05">5. Datová množina obsahující naskenované ručně napsané číslice</a></p>
<p><a href="#k06">*** 6. Další atributy datové množiny, které použijeme při trénování</a></p>
<p><a href="#k07">*** 7. Přečtení a následné vykreslení jednotlivých ručně nakreslených číslic</a></p>
<p><a href="#k08">8. Odstranění umělé aplikované barvové palety (obrázky ve stupních šedi)</a></p>
<p><a href="#k09">9. Vykreslení ručně nakreslených číslic ve formě obrázků ve stupních šedi</a></p>
<p><a href="#k10">*** 10. Rozdělení plochy grafu do oblastí; vykreslení více obrázků do jediného grafu</a></p>
<p><a href="#k11">*** 11. Obrázky s&nbsp;jejich ohodnocením</a></p>
<p><a href="#k12">*** 12. Příprava dat pro trénink</a></p>
<p><a href="#k13">*** 13. Klasifikace obrázků</a></p>
<p><a href="#k14">*** 14. Výpočet přesnosti modelu</a></p>
<p><a href="#k15">*** 15. Vykreslení obrázků společně s&nbsp;jejich klasifikací</a></p>
<p><a href="#k16">*** 16. Změna poměru rozdělení dat na tréninkovou a testovací množinu</a></p>
<p><a href="#k17">*** 17. Další kroky a vylepšení</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Seriály a články s&nbsp;relevantní tématikou vydané na Rootu</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Rozpoznávání obrázků knihovnou Scikit-learn: první kroky</h2>

<p>Na stránkách Roota jsme se již v&nbsp;minulosti zabývali problematikou
rozpoznávání rastrových obrazů. Pro tento účel jsme použili knihovnu nazvanou
<a href="http://torch.ch/">Torch</a> (viz též <a
href="https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/">příslušný
seriál</a>), s&nbsp;jejímž využitím jsme realizovali rozpoznávání obrázků
pomocí ručně vytvořených neuronových sítí (včetně konvolučních sítí). Ovšem
vývoj v&nbsp;této oblasti informatiky je velmi rychlý a dnes se v&nbsp;praxi
setkáme spíše s&nbsp;knihovnami určenými pro použití společně
s&nbsp;programovacím jazykem Python.</p>

<p><div class="rs-tip-major">Poznámka: tento trend byl ovšem viditelný už
v&nbsp;době, kdy jsme si psali o knihovně Torch &ndash; ta byla následována
knihovnou PyTorch a vznikaly i další nástroje (TensorFlow, Keras
atd.).</div></p>

*** image ***
<p><i>Obrázek 1: Logo projektu NumPy.</i></p>

<p>I z&nbsp;tohoto důvodu se dnes zaměříme na odlišné nástroje, konkrétně na
Scikit-learn, jenž je navržen tak, aby velmi dobře kooperoval s&nbsp;knihovnami
NumPy, Pandas (pravděpodobně i Polars), Xarray a Matplotlib. O těchto
technologiích jsme si na stránkách Roota již psali (kromě samotného
Scikit-learn), takže bude zajímavé zjistit, jak lze tyto nástroje a knihovny
použít společně.</p>

*** image ***
<p><i>Obrázek 2: Logo projektu Pandas.</i></p>

<p>Ve stručnosti: Pandas či Polars (popř.&nbsp;Xarray) použijeme pro načítání
vstupních dat a jejich prvotní filtraci, transformaci popř.&nbsp;normalizaci.
Matplotlib bude použit pro vizualizaci jak vstupních dat, tak i výsledků
modelů. Knihovna Scikit-learn nabízí prakticky veškerou funkcionalitu při
tvorbě modelů (ovšem například i clustering) a NumPy se používá interně,
protože prakticky všechna data jsou uložena ve formě n-dimenzionálních
polí.</p>

*** image ***
<p><i>Obrázek 3: Logo projektu Matplotlib.</i></p>

*** image ***
<p><i>Obrázek 4: Logo projektu Scikit-learn.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Řešený problém: rozpoznání ručně nakreslených číslic</h2>

<p>V&nbsp;dnešním článku si &ndash; prozatím ovšem ve stručnosti &ndash;
ukážeme jeden ze způsobů realizace rozpoznávání ručně nakreslených číslic. Naše
řešení by mělo pro vstupní obrázek (z&nbsp;testovací množiny) k&nbsp;tomuto
obrázku přiřadit číslici 0 až 9, která byla na obrázku rozpoznána (a pro
jednoduchost budeme zjišťovat přesnost tohoto přiřazení). Tyto číslice byly
získány a digitalizovány v&nbsp;rámci projektu MNIST (<i>Modified National
Institute of Standards and Technology database</i>). Tato databáze, která
obsahuje 60000 trénovacích obrázků a 10000 testovacích obrázků, se používá pro
testování různých algoritmů pro rozpoznání obrazů, což jsou dnes většinou
algoritmy postavené na strojovém učení (<i>ML &ndash; Machine Learning</i>).
Některé obrázky z&nbsp;této databáze jsou přímo součástí knihovny Scikit-learn,
což náš problém zjednoduší &ndash; po instalaci všech knihoven již nebude nutné
stahovat trénovací a testovací data (ovšem pochopitelně i tento problém je
v&nbsp;praxi nutné řešit a proto se k&nbsp;tomu problému vrátíme).</p>

*** image ***
<p><i>Obrázek 5: Ručně nakreslené číslice, které byly po naskenování uloženy do
databáze MNIST. Jen na okraj &ndash; povšimněte si, jaký tvar mají číslice 1 a
7. Jedná se o styl používaný ve &bdquo;státech&ldquo;, kde mohou být lidé
zmateni, pokud číslici 1 zapíšete i s&nbsp;horní úhlopříčkou (což se mi stalo
&ndash; a zrovna u čísla účtu :-). Poučením je, že trénovací množinu je nutné
vybírat pečlivě a s&nbsp;ohledem na kontext použití.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace všech potřebných balíčků</h2>

<p>Nejdříve si nainstalujeme všechny potřebné balíčky a samozřejmě i jejich
tranzitivní závislosti. Použijeme přitom nástroj PDM, který byl na Rootu <a
href="https://www.root.cz/clanky/pdm-moderni-spravce-balicku-a-virtualnich-prostredi-pythonu/">již
popsán</a>. Ukažme si pro úplnost, jak by mohl vypadat výsledný projekt.</p>

<p>Nejprve si necháme vytvořit kostru nového projektu, a to konkrétně
příkazem:</p>

<pre>
$ <strong>pdm init</strong>
</pre>

<p>Poctivě odpovíme na položené otázky (většinou jen potvrzením klávesou
Enter):</p>

<pre>
Creating a pyproject.toml for PDM...
Please enter the Python interpreter to use
0. /usr/bin/python (3.11)
1. /usr/bin/python3.11 (3.11)
2. /usr/bin/python3 (3.11)
Please select (0): <strong>0</strong>
Would you like to create a virtualenv with /usr/bin/python? [y/n] (y): <strong>Enter</strong>
Virtualenv is created successfully at /home/ptisnovs/test1/.venv
Is the project a library that is installable?
If yes, we will need to ask a few more questions to include the project name and
build backend [y/n] (n): <strong>Enter</strong>
License(SPDX name) (MIT): <strong>Enter</strong> 
Author name ():  <strong>Enter</strong>
Author email ():  <strong>Enter</strong>
Python requires('*' to allow any) (&gt;=3.11): <strong>Enter</strong> 
Project is initialized successfully
</pre>

<p>Do projektu přidáme všechny potřebné závislosti příkazem <strong>pdm add
balíček</strong>. Jedná se o <strong>numpy</strong>,
<strong>matplotlib</strong>, <strong>sklearn</strong> a
<strong>scikit-learn</strong>. Ovšem vývoj můžeme chtít provádět v&nbsp;Jupyter
Notebooku, takže si nainstalujeme i balíček <strong>notebook</strong>. Výsledný
projektový soubor <strong>pyproject.toml</strong> by měl vypadat zhruba
následovně (konkrétní verze knihoven však mohou být o desetinky či setinky
vyšší):</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "", email = ""},
]
dependencies = [
    "notebook&gt;=7.0.6",
    "numpy&gt;=1.25.2",
    "matplotlib&gt;=3.8.1",
    "sklearn&gt;=0.0.post11",
    "scikit-learn&gt;=1.3.2",
]
requires-python = "&gt;=3.11"
readme = "README.md"
license = {text = "MIT"}
</pre>

<p>V&nbsp;praxi se (později) setkáme i s&nbsp;dalšími knihovnami, které je
nutné mít nainstalovány. Jde o pomocný nástroj <strong>nbmerge</strong>
(spojování <i>notebooků</i>) a taktéž o knihovny <strong>xarray</strong>,
<strong>plotnine</strong> a <strong>seaborn</strong>. A takto může vypadat
projektový soubor popisující všechny přímé závislosti:</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "", email = ""},
]
dependencies = [
    "notebook&gt;=7.0.6",
    "nbmerge&gt;=0.0.4",
    "numpy&gt;=1.25.2",
    "matplotlib&gt;=3.8.1",
    "xarray&gt;=2023.10.1",
    "scipy&gt;=1.9.3",
    "plotnine&gt;=0.12.4",
    "seaborn&gt;=0.13.0",
    "sklearn&gt;=0.0.post11",
    "scikit-learn&gt;=1.3.2",
]
requires-python = "&gt;=3.11"
readme = "README.md"
license = {text = "MIT"}
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Kooperace mezi knihovnami Matplotlib a NumPy: vizualizace obsahu 2D matice</h2>

<p>Začněme jednoduchou a možná i triviální ukázkou kooperace mezi knihovnami
Matplotlib a NumPy. Konkrétně si ukážeme vizualizaci obsahu dvourozměrné matice
(NumPy podporuje obecná n-rozměrná pole a matice jsou tedy pouze podtypem).
Vytvoříme si matici o rozměrech 10&times;10 prvků a naplníme ji náhodnými
hodnotami. Výsledek si necháme zobrazit na grafu a tento graf taktéž uložíme do
souboru (formát PNG):</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># budeme provádět vykreslování de facto standardní knihovnou Matplotlib</i>
import matplotlib.pyplot as plt
&nbsp;
import numpy as np
&nbsp;
<i># vytvoření matice, kterou budeme vizualizovat</i>
array = np.random.rand(10, 10)
&nbsp;
<i># vykreslení</i>
plt.matshow(array)
&nbsp;
<i># uložení vizualizované matice</i>
plt.savefig("random.png")
&nbsp;
<i># vizualizace na obrazovku</i>
plt.show()
&nbsp;
<i># finito</i>
</pre>

<p>Výsledek bude vypadat následovně:</p>

*** image ***
<p><i>Obrázek 6: Vizualizace pole s&nbsp;náhodným obsahem.</i></p>

<p>Povšimněte si, že se při vizualizaci použily nepravé barvy. Těch se později
zbavíme, protože nás budou spíše mást.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Datová množina obsahující naskenované ručně napsané číslice</h2>

<p>Víme již, že trénovací i testovací množina s&nbsp;ručně nakreslenými obrázky
je součástí balíčku Scikit-learn. Přečíst ji můžeme funkcí
<strong>load_digits</strong> z&nbsp;podbalíčku
<strong>sklearn.datasets</strong>. Výsledkem je datová struktura
s&nbsp;metadaty, vektory s&nbsp;obrázkem (viz další text) i maticemi
představujícími obrázky. V&nbsp;dalším skriptu si ukážeme, jak lze některá
vrácená metadata a data zpracovat:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># import funkce, která vrátí obrázky pro práci</i>
from sklearn.datasets import load_digits
&nbsp;
<i># načtení obrázků, s nimiž budeme dále pracovat</i>
digits_data = load_digits()
&nbsp;
<i># zjištění základních informací o obrázcích</i>
print("Description:", digits_data.DESCR)
&nbsp;
print("Data:", digits_data.data.shape)
print("Obrázky:", digits_data.images.shape)
&nbsp;
<i># výpis informací o obrázcích</i>
for i in range(0, 10):
    print(f"Image #{i}:")
    print("Data:\n", digits_data.data[i])
    print("Image:\n", digits_data.images[i])
    print("Target:\n", digits_data.target[i])
    print()
&nbsp;
<i># finito</i>
</pre>

<p>Nejprve si necháme zobrazit popis dat a metadat &ndash; atribut
<strong>DESCR</strong>:</p>

<pre>
Description: .. _digits_dataset:
&nbsp;
Optical recognition of handwritten digits dataset
--------------------------------------------------
&nbsp;
**Data Set Characteristics:**
&nbsp;
    :Number of Instances: 1797
    :Number of Attributes: 64
    :Attribute Information: 8x8 image of integer pixels in the range 0..16.
    :Missing Attribute Values: None
    :Creator: E. Alpaydin (alpaydin '@' boun.edu.tr)
    :Date: July; 1998
&nbsp;
This is a copy of the test set of the UCI ML hand-written digits datasets
https://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits
&nbsp;
The data set contains images of hand-written digits: 10 classes where
each class refers to a digit.
&nbsp;
Preprocessing programs made available by NIST were used to extract
normalized bitmaps of handwritten digits from a preprinted form. From a
total of 43 people, 30 contributed to the training set and different 13
to the test set. 32x32 bitmaps are divided into nonoverlapping blocks of
4x4 and the number of on pixels are counted in each block. This generates
an input matrix of 8x8 where each element is an integer in the range
0..16. This reduces dimensionality and gives invariance to small
distortions.
&nbsp;
For info on NIST preprocessing routines, see M. D. Garris, J. L. Blue, G.
T. Candela, D. L. Dimmick, J. Geist, P. J. Grother, S. A. Janet, and C.
L. Wilson, NIST Form-Based Handprint Recognition System, NISTIR 5469,
1994.
&nbsp;
|details-start|
**References**
|details-split|
&nbsp;
- C. Kaynak (1995) Methods of Combining Multiple Classifiers and Their
  Applications to Handwritten Digit Recognition, MSc Thesis, Institute of
  Graduate Studies in Science and Engineering, Bogazici University.
- E. Alpaydin, C. Kaynak (1998) Cascading Classifiers, Kybernetika.
- Ken Tang and Ponnuthurai N. Suganthan and Xi Yao and A. Kai Qin.
  Linear dimensionalityreduction using relevance weighted LDA. School of
  Electrical and Electronic Engineering Nanyang Technological University.
  2005.
- Claudio Gentile. A New Approximate Maximal Margin Classification
  Algorithm. NIPS. 2000.
&nbsp;
|details-end|
</pre>

<p>Dále jsou zobrazeny rozměry (resp.&nbsp;<i>tvar</i>) n-rozměrných polí
uložených v&nbsp;atributech <strong>data</strong> a
<strong>images</strong>:</p>

<pre>
Data: (1797, 64)
Obrázky: (1797, 8, 8)
</pre>

<p>Vidíme, že se vlastně (jedna z&nbsp;možných interpretací) jedná o 1797
64prvkových vektorů resp.&nbsp;o 1797 dvourozměrných matic 8&times;8 prvků.</p>

<p>Dále si necháme zobrazit prvních 10 vektorů i prvních 10 dvourozměrných
matic:</p>

<pre>
Image #0:
Data:
 [ 0.  0.  5. 13.  9.  1.  0.  0.  0.  0. 13. 15. 10. 15.  5.  0.  0.  3.
 15.  2.  0. 11.  8.  0.  0.  4. 12.  0.  0.  8.  8.  0.  0.  5.  8.  0.
  0.  9.  8.  0.  0.  4. 11.  0.  1. 12.  7.  0.  0.  2. 14.  5. 10. 12.
  0.  0.  0.  0.  6. 13. 10.  0.  0.  0.]
Image:
 [[ 0.  0.  5. 13.  9.  1.  0.  0.]
 [ 0.  0. 13. 15. 10. 15.  5.  0.]
 [ 0.  3. 15.  2.  0. 11.  8.  0.]
 [ 0.  4. 12.  0.  0.  8.  8.  0.]
 [ 0.  5.  8.  0.  0.  9.  8.  0.]
 [ 0.  4. 11.  0.  1. 12.  7.  0.]
 [ 0.  2. 14.  5. 10. 12.  0.  0.]
 [ 0.  0.  6. 13. 10.  0.  0.  0.]]
Target:
 0
&nbsp;
Image #1:
Data:
 [ 0.  0.  0. 12. 13.  5.  0.  0.  0.  0.  0. 11. 16.  9.  0.  0.  0.  0.
  3. 15. 16.  6.  0.  0.  0.  7. 15. 16. 16.  2.  0.  0.  0.  0.  1. 16.
 16.  3.  0.  0.  0.  0.  1. 16. 16.  6.  0.  0.  0.  0.  1. 16. 16.  6.
  0.  0.  0.  0.  0. 11. 16. 10.  0.  0.]
Image:
 [[ 0.  0.  0. 12. 13.  5.  0.  0.]
 [ 0.  0.  0. 11. 16.  9.  0.  0.]
 [ 0.  0.  3. 15. 16.  6.  0.  0.]
 [ 0.  7. 15. 16. 16.  2.  0.  0.]
 [ 0.  0.  1. 16. 16.  3.  0.  0.]
 [ 0.  0.  1. 16. 16.  6.  0.  0.]
 [ 0.  0.  1. 16. 16.  6.  0.  0.]
 [ 0.  0.  0. 11. 16. 10.  0.  0.]]
Target:
 1
&nbsp;
Image #2:
Data:
 [ 0.  0.  0.  4. 15. 12.  0.  0.  0.  0.  3. 16. 15. 14.  0.  0.  0.  0.
  8. 13.  8. 16.  0.  0.  0.  0.  1.  6. 15. 11.  0.  0.  0.  1.  8. 13.
 15.  1.  0.  0.  0.  9. 16. 16.  5.  0.  0.  0.  0.  3. 13. 16. 16. 11.
  5.  0.  0.  0.  0.  3. 11. 16.  9.  0.]
Image:
 [[ 0.  0.  0.  4. 15. 12.  0.  0.]
 [ 0.  0.  3. 16. 15. 14.  0.  0.]
 [ 0.  0.  8. 13.  8. 16.  0.  0.]
 [ 0.  0.  1.  6. 15. 11.  0.  0.]
 [ 0.  1.  8. 13. 15.  1.  0.  0.]
 [ 0.  9. 16. 16.  5.  0.  0.  0.]
 [ 0.  3. 13. 16. 16. 11.  5.  0.]
 [ 0.  0.  0.  3. 11. 16.  9.  0.]]
Target:
 2
&nbsp;
Image #3:
Data:
 [ 0.  0.  7. 15. 13.  1.  0.  0.  0.  8. 13.  6. 15.  4.  0.  0.  0.  2.
  1. 13. 13.  0.  0.  0.  0.  0.  2. 15. 11.  1.  0.  0.  0.  0.  0.  1.
 12. 12.  1.  0.  0.  0.  0.  0.  1. 10.  8.  0.  0.  0.  8.  4.  5. 14.
  9.  0.  0.  0.  7. 13. 13.  9.  0.  0.]
Image:
 [[ 0.  0.  7. 15. 13.  1.  0.  0.]
 [ 0.  8. 13.  6. 15.  4.  0.  0.]
 [ 0.  2.  1. 13. 13.  0.  0.  0.]
 [ 0.  0.  2. 15. 11.  1.  0.  0.]
 [ 0.  0.  0.  1. 12. 12.  1.  0.]
 [ 0.  0.  0.  0.  1. 10.  8.  0.]
 [ 0.  0.  8.  4.  5. 14.  9.  0.]
 [ 0.  0.  7. 13. 13.  9.  0.  0.]]
Target:
 3
&nbsp;
Image #4:
Data:
 [ 0.  0.  0.  1. 11.  0.  0.  0.  0.  0.  0.  7.  8.  0.  0.  0.  0.  0.
  1. 13.  6.  2.  2.  0.  0.  0.  7. 15.  0.  9.  8.  0.  0.  5. 16. 10.
  0. 16.  6.  0.  0.  4. 15. 16. 13. 16.  1.  0.  0.  0.  0.  3. 15. 10.
  0.  0.  0.  0.  0.  2. 16.  4.  0.  0.]
Image:
 [[ 0.  0.  0.  1. 11.  0.  0.  0.]
 [ 0.  0.  0.  7.  8.  0.  0.  0.]
 [ 0.  0.  1. 13.  6.  2.  2.  0.]
 [ 0.  0.  7. 15.  0.  9.  8.  0.]
 [ 0.  5. 16. 10.  0. 16.  6.  0.]
 [ 0.  4. 15. 16. 13. 16.  1.  0.]
 [ 0.  0.  0.  3. 15. 10.  0.  0.]
 [ 0.  0.  0.  2. 16.  4.  0.  0.]]
Target:
 4
&nbsp;
Image #5:
Data:
 [ 0.  0. 12. 10.  0.  0.  0.  0.  0.  0. 14. 16. 16. 14.  0.  0.  0.  0.
 13. 16. 15. 10.  1.  0.  0.  0. 11. 16. 16.  7.  0.  0.  0.  0.  0.  4.
  7. 16.  7.  0.  0.  0.  0.  0.  4. 16.  9.  0.  0.  0.  5.  4. 12. 16.
  4.  0.  0.  0.  9. 16. 16. 10.  0.  0.]
Image:
 [[ 0.  0. 12. 10.  0.  0.  0.  0.]
 [ 0.  0. 14. 16. 16. 14.  0.  0.]
 [ 0.  0. 13. 16. 15. 10.  1.  0.]
 [ 0.  0. 11. 16. 16.  7.  0.  0.]
 [ 0.  0.  0.  4.  7. 16.  7.  0.]
 [ 0.  0.  0.  0.  4. 16.  9.  0.]
 [ 0.  0.  5.  4. 12. 16.  4.  0.]
 [ 0.  0.  9. 16. 16. 10.  0.  0.]]
Target:
 5
&nbsp;
Image #6:
Data:
 [ 0.  0.  0. 12. 13.  0.  0.  0.  0.  0.  5. 16.  8.  0.  0.  0.  0.  0.
 13. 16.  3.  0.  0.  0.  0.  0. 14. 13.  0.  0.  0.  0.  0.  0. 15. 12.
  7.  2.  0.  0.  0.  0. 13. 16. 13. 16.  3.  0.  0.  0.  7. 16. 11. 15.
  8.  0.  0.  0.  1.  9. 15. 11.  3.  0.]
Image:
 [[ 0.  0.  0. 12. 13.  0.  0.  0.]
 [ 0.  0.  5. 16.  8.  0.  0.  0.]
 [ 0.  0. 13. 16.  3.  0.  0.  0.]
 [ 0.  0. 14. 13.  0.  0.  0.  0.]
 [ 0.  0. 15. 12.  7.  2.  0.  0.]
 [ 0.  0. 13. 16. 13. 16.  3.  0.]
 [ 0.  0.  7. 16. 11. 15.  8.  0.]
 [ 0.  0.  1.  9. 15. 11.  3.  0.]]
Target:
 6
&nbsp;
Image #7:
Data:
 [ 0.  0.  7.  8. 13. 16. 15.  1.  0.  0.  7.  7.  4. 11. 12.  0.  0.  0.
  0.  0.  8. 13.  1.  0.  0.  4.  8.  8. 15. 15.  6.  0.  0.  2. 11. 15.
 15.  4.  0.  0.  0.  0.  0. 16.  5.  0.  0.  0.  0.  0.  9. 15.  1.  0.
  0.  0.  0.  0. 13.  5.  0.  0.  0.  0.]
Image:
 [[ 0.  0.  7.  8. 13. 16. 15.  1.]
 [ 0.  0.  7.  7.  4. 11. 12.  0.]
 [ 0.  0.  0.  0.  8. 13.  1.  0.]
 [ 0.  4.  8.  8. 15. 15.  6.  0.]
 [ 0.  2. 11. 15. 15.  4.  0.  0.]
 [ 0.  0.  0. 16.  5.  0.  0.  0.]
 [ 0.  0.  9. 15.  1.  0.  0.  0.]
 [ 0.  0. 13.  5.  0.  0.  0.  0.]]
Target:
 7
&nbsp;
Image #8:
Data:
 [ 0.  0.  9. 14.  8.  1.  0.  0.  0.  0. 12. 14. 14. 12.  0.  0.  0.  0.
  9. 10.  0. 15.  4.  0.  0.  0.  3. 16. 12. 14.  2.  0.  0.  0.  4. 16.
 16.  2.  0.  0.  0.  3. 16.  8. 10. 13.  2.  0.  0.  1. 15.  1.  3. 16.
  8.  0.  0.  0. 11. 16. 15. 11.  1.  0.]
Image:
 [[ 0.  0.  9. 14.  8.  1.  0.  0.]
 [ 0.  0. 12. 14. 14. 12.  0.  0.]
 [ 0.  0.  9. 10.  0. 15.  4.  0.]
 [ 0.  0.  3. 16. 12. 14.  2.  0.]
 [ 0.  0.  4. 16. 16.  2.  0.  0.]
 [ 0.  3. 16.  8. 10. 13.  2.  0.]
 [ 0.  1. 15.  1.  3. 16.  8.  0.]
 [ 0.  0. 11. 16. 15. 11.  1.  0.]]
Target:
 8
&nbsp;
Image #9:
Data:
 [ 0.  0. 11. 12.  0.  0.  0.  0.  0.  2. 16. 16. 16. 13.  0.  0.  0.  3.
 16. 12. 10. 14.  0.  0.  0.  1. 16.  1. 12. 15.  0.  0.  0.  0. 13. 16.
  9. 15.  2.  0.  0.  0.  0.  3.  0.  9. 11.  0.  0.  0.  0.  0.  9. 15.
  4.  0.  0.  0.  9. 12. 13.  3.  0.  0.]
Image:
 [[ 0.  0. 11. 12.  0.  0.  0.  0.]
 [ 0.  2. 16. 16. 16. 13.  0.  0.]
 [ 0.  3. 16. 12. 10. 14.  0.  0.]
 [ 0.  1. 16.  1. 12. 15.  0.  0.]
 [ 0.  0. 13. 16.  9. 15.  2.  0.]
 [ 0.  0.  0.  3.  0.  9. 11.  0.]
 [ 0.  0.  0.  0.  9. 15.  4.  0.]
 [ 0.  0.  9. 12. 13.  3.  0.  0.]]
Target:
 9
</pre>

<p><div class="rs-tip-major">Poznámka: zajisté jste si povšimli, že prvky
vektorů i matic jsou shodné. Není to náhoda, protože k&nbsp;datům můžeme
přistupovat jako k&nbsp;rastrovým obrázkům o rozměrech 8&times;8 pixelů (vhodné
pro vizualizaci) nebo &nbsp;64prvkovým vektorům (<i>někdy</i> vhodné pro
strojové učení a tvorbu modelu).</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Další atributy datové množiny, které použijeme při trénování</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># import funkce, která vrátí obrázky pro práci</i>
from sklearn.datasets import load_digits
&nbsp;
<i># načtení obrázků, s nimiž budeme dále pracovat</i>
digits_data = load_digits()
&nbsp;
<i># zjištění základních informací o obrázcích</i>
print("Description:", digits_data.DESCR)
&nbsp;
print("Data:", digits_data.data.shape)
print("Obrázky:", digits_data.images.shape)
&nbsp;
print("Feature names")
for feature_name in digits_data.feature_names:
    print(feature_name)
&nbsp;
print()
&nbsp;
print("Target names")
for target_name in digits_data.target_names:
    print(target_name)
&nbsp;
<i># finito</i>
</pre>

<p>Nejprve se opět vypíšou informace o dvou n-rozměrných polích
s&nbsp;trénovacími a testovacími daty:</p>

<pre>
Data: (1797, 64)
Obrázky: (1797, 8, 8)
</pre>

<p></p>

<pre>
Feature names
pixel_0_0
pixel_0_1
pixel_0_2
pixel_0_3
pixel_0_4
pixel_0_5
pixel_0_6
pixel_0_7
pixel_1_0
pixel_1_1
pixel_1_2
pixel_1_3
pixel_1_4
pixel_1_5
pixel_1_6
pixel_1_7
pixel_2_0
pixel_2_1
pixel_2_2
pixel_2_3
pixel_2_4
pixel_2_5
pixel_2_6
pixel_2_7
pixel_3_0
pixel_3_1
pixel_3_2
pixel_3_3
pixel_3_4
pixel_3_5
pixel_3_6
pixel_3_7
pixel_4_0
pixel_4_1
pixel_4_2
pixel_4_3
pixel_4_4
pixel_4_5
pixel_4_6
pixel_4_7
pixel_5_0
pixel_5_1
pixel_5_2
pixel_5_3
pixel_5_4
pixel_5_5
pixel_5_6
pixel_5_7
pixel_6_0
pixel_6_1
pixel_6_2
pixel_6_3
pixel_6_4
pixel_6_5
pixel_6_6
pixel_6_7
pixel_7_0
pixel_7_1
pixel_7_2
pixel_7_3
pixel_7_4
pixel_7_5
pixel_7_6
pixel_7_7
</pre>

<p></p>

<pre>
Target names
0
1
2
3
4
5
6
7
8
9
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Přečtení a následné vykreslení jednotlivých ručně nakreslených číslic</h2>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># budeme provádět vykreslování de facto standardní knihovnou Matplotlib</i>
import matplotlib.pyplot as plt
&nbsp;
<i># import funkce, která vrátí obrázky pro práci</i>
from sklearn.datasets import load_digits
&nbsp;
<i># načtení obrázků, s nimiž budeme dále pracovat</i>
digits_data = load_digits()
&nbsp;
<i># zjištění základních informací o obrázcích</i>
print(digits_data.data.shape)
&nbsp;
<i># vykreslení a uložení prvních deseti obrázků</i>
for i in range(0, 10):
    plt.matshow(digits_data.images[i])
    plt.savefig(f"Image #{i}.png")
    plt.show()
&nbsp;
<i># finito</i>
</pre>

*** image ***
<p><i>Obrázek 7: Vizualizace pole s&nbsp;číslicí 0.</i></p>

*** image ***
<p><i>Obrázek 8: Vizualizace pole s&nbsp;číslicí 1.</i></p>

*** image ***
<p><i>Obrázek 9: Vizualizace pole s&nbsp;číslicí 2.</i></p>

*** image ***
<p><i>Obrázek 10: Vizualizace pole s&nbsp;číslicí 3.</i></p>

*** image ***
<p><i>Obrázek 11: Vizualizace pole s&nbsp;číslicí 4.</i></p>

*** image ***
<p><i>Obrázek 12: Vizualizace pole s&nbsp;číslicí 5.</i></p>

*** image ***
<p><i>Obrázek 13: Vizualizace pole s&nbsp;číslicí 6.</i></p>

*** image ***
<p><i>Obrázek 14: Vizualizace pole s&nbsp;číslicí 7.</i></p>

*** image ***
<p><i>Obrázek 15: Vizualizace pole s&nbsp;číslicí 8.</i></p>

*** image ***
<p><i>Obrázek 16: Vizualizace pole s&nbsp;číslicí 9.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Odstranění umělé aplikované barvové palety (obrázky ve stupních šedi)</h2>

<p>Vraťme se nyní na okamžik k&nbsp;příkladu uvedeném <a href="#k04">ve čtvrté
kapitole</a>. Tam jsme si ukázali zobrazení obsahu matice ve formě grafu, ovšem
knihovna Matplotlib v&nbsp;takovém případě použila nepravé barvy. Ty jsou někdy
vhodné, ovšem zrovna v&nbsp;případě naskenovaných obrázků spíše matoucí.
Z&nbsp;tohoto důvodu si ukažme, jak lze graf vykreslit ve stupních šedi. Jedno
z&nbsp;možných řešení vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># budeme provádět vykreslování de facto standardní knihovnou Matplotlib</i>
import matplotlib.pyplot as plt
&nbsp;
import numpy as np
&nbsp;
<i># vytvoření matice, kterou budeme vizualizovat</i>
array = np.random.rand(10, 10)
&nbsp;
<i># vykreslení</i>
plt.matshow(array)
&nbsp;
<i># použití stupňů šedi</i>
<strong>plt.gray()</strong>
&nbsp;
<i># uložení vizualizované matice</i>
plt.savefig("random_grayscale.png")
&nbsp;
<i># vizualizace na obrazovku</i>
plt.show()
&nbsp;
<i># finito</i>
</pre>

<p>Výsledek bude po této malé úpravě vypadat následovně:</p>

*** image ***
<p><i>Obrázek 17: Vizualizace pole s&nbsp;náhodným obsahem při použití stupňů
šedi.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vykreslení ručně nakreslených číslic ve formě obrázků ve stupních šedi</h2>

<p>Stejný princip, tj.&nbsp;zavolání <strong>plt.gray()</strong> samozřejmě
můžeme využít i pro vykreslení číslic vzniklých naskenováním. Skript pro jejich
načtení a vykreslení tedy nepatrně upravíme:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># budeme provádět vykreslování de facto standardní knihovnou Matplotlib</i>
import matplotlib.pyplot as plt
&nbsp;
<i># import funkce, která vrátí obrázky pro práci</i>
from sklearn.datasets import load_digits
&nbsp;
<i># načtení obrázků, s nimiž budeme dále pracovat</i>
digits_data = load_digits()
&nbsp;
<i># zjištění základních informací o obrázcích</i>
print(digits_data.data.shape)
&nbsp;
<i># vykreslení a uložení prvních deseti obrázků</i>
for i in range(0, 10):
    plt.matshow(digits_data.images[i])
    <i># převod na stupně šedi</i>
    <strong>plt.gray()</strong>
&nbsp;
    plt.savefig(f"Grayscale image #{i}.png")
&nbsp;
    <i># vykreslení na obrazovku</i>
    plt.show()
&nbsp;
<i># finito</i>
</pre>

<p>A takto vypadají výsledky:</p>

*** image ***
<p><i>Obrázek 18: Vizualizace pole s&nbsp;číslicí 0 ve stupních šedi.</i></p>

*** image ***
<p><i>Obrázek 19: Vizualizace pole s&nbsp;číslicí 1 ve stupních šedi.</i></p>

*** image ***
<p><i>Obrázek 20: Vizualizace pole s&nbsp;číslicí 2 ve stupních šedi.</i></p>

*** image ***
<p><i>Obrázek 21: Vizualizace pole s&nbsp;číslicí 3 ve stupních šedi.</i></p>

*** image ***
<p><i>Obrázek 22: Vizualizace pole s&nbsp;číslicí 4 ve stupních šedi.</i></p>

*** image ***
<p><i>Obrázek 23: Vizualizace pole s&nbsp;číslicí 5 ve stupních šedi.</i></p>

*** image ***
<p><i>Obrázek 24: Vizualizace pole s&nbsp;číslicí 6 ve stupních šedi.</i></p>

*** image ***
<p><i>Obrázek 25: Vizualizace pole s&nbsp;číslicí 7 ve stupních šedi.</i></p>

*** image ***
<p><i>Obrázek 26: Vizualizace pole s&nbsp;číslicí 8 ve stupních šedi.</i></p>

*** image ***
<p><i>Obrázek 27: Vizualizace pole s&nbsp;číslicí 9 ve stupních šedi.</i></p>

<p>Pokud preferujete, aby se použilo inverzní zobrazení (tedy bílý papír a
černé číslice), lze odstranit volání <strong>plt.gray()</strong> a namísto toho
číslice vykreslit s&nbsp;explicitní specifikací barvové palety (gray_r = stupně
šedi, ovšem obrácené, &bdquo;reversed&ldquo;):</p>

<pre>
    plt.matshow(digits_data.images[i], cmap=plt.cm.gray_r)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Rozdělení plochy grafu do oblastí; vykreslení více obrázků do jediného grafu</h2>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># budeme provádět vykreslování de facto standardní knihovnou Matplotlib</i>
import matplotlib.pyplot as plt
&nbsp;
<i># import funkce, která vrátí obrázky pro práci</i>
from sklearn.datasets import load_digits
&nbsp;
<i># načtení obrázků, s nimiž budeme dále pracovat</i>
digits_data = load_digits()
&nbsp;
<i># vytvoření seznamu, které použijeme</i>
images = list(zip(digits_data.target, digits_data.images))
&nbsp;
<i># vykreslení tréninkových číslic</i>
for i, (label, image) in enumerate(images[:15]):
    plt.subplot(3, 5, i+1)
    plt.imshow(image, cmap=plt.cm.gray_r) #, interpolation='nearest')
    plt.title(f"číslice {label}")
&nbsp;
<i># uložení a vykreslení výsledku</i>
plt.savefig("training_set.png")
plt.show()
&nbsp;
<i># finito</i>
</pre>

*** image ***
<p><i>Obrázek 28: Prvních patnáct číslic, které použijeme pro trénink
modelu.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Obrázky s&nbsp;jejich ohodnocením</h2>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># import funkce, která vrátí obrázky pro práci</i>
from sklearn.datasets import load_digits
&nbsp;
<i># načtení obrázků, s nimiž budeme dále pracovat</i>
digits_data = load_digits()
&nbsp;
<i># vytvoření seznamu, které použijeme</i>
images = list(zip(digits_data.target, digits_data.images))
&nbsp;
<i># nebudeme vypisovat tisíce údajů - postačí prvních dvacet</i>
shortened = images[:20]
&nbsp;
<i># výpis dat použitých pro tvorbu modelu</i>
for i, (label, image) in enumerate(shortened):
    print(f"i={i}  label={label}\n", image, "\n")
&nbsp;
<i># finito</i>
</pre>

<pre>
i=0  label=0
 [[ 0.  0.  5. 13.  9.  1.  0.  0.]
 [ 0.  0. 13. 15. 10. 15.  5.  0.]
 [ 0.  3. 15.  2.  0. 11.  8.  0.]
 [ 0.  4. 12.  0.  0.  8.  8.  0.]
 [ 0.  5.  8.  0.  0.  9.  8.  0.]
 [ 0.  4. 11.  0.  1. 12.  7.  0.]
 [ 0.  2. 14.  5. 10. 12.  0.  0.]
 [ 0.  0.  6. 13. 10.  0.  0.  0.]] 

i=1  label=1
 [[ 0.  0.  0. 12. 13.  5.  0.  0.]
 [ 0.  0.  0. 11. 16.  9.  0.  0.]
 [ 0.  0.  3. 15. 16.  6.  0.  0.]
 [ 0.  7. 15. 16. 16.  2.  0.  0.]
 [ 0.  0.  1. 16. 16.  3.  0.  0.]
 [ 0.  0.  1. 16. 16.  6.  0.  0.]
 [ 0.  0.  1. 16. 16.  6.  0.  0.]
 [ 0.  0.  0. 11. 16. 10.  0.  0.]] 

i=2  label=2
 [[ 0.  0.  0.  4. 15. 12.  0.  0.]
 [ 0.  0.  3. 16. 15. 14.  0.  0.]
 [ 0.  0.  8. 13.  8. 16.  0.  0.]
 [ 0.  0.  1.  6. 15. 11.  0.  0.]
 [ 0.  1.  8. 13. 15.  1.  0.  0.]
 [ 0.  9. 16. 16.  5.  0.  0.  0.]
 [ 0.  3. 13. 16. 16. 11.  5.  0.]
 [ 0.  0.  0.  3. 11. 16.  9.  0.]] 

i=3  label=3
 [[ 0.  0.  7. 15. 13.  1.  0.  0.]
 [ 0.  8. 13.  6. 15.  4.  0.  0.]
 [ 0.  2.  1. 13. 13.  0.  0.  0.]
 [ 0.  0.  2. 15. 11.  1.  0.  0.]
 [ 0.  0.  0.  1. 12. 12.  1.  0.]
 [ 0.  0.  0.  0.  1. 10.  8.  0.]
 [ 0.  0.  8.  4.  5. 14.  9.  0.]
 [ 0.  0.  7. 13. 13.  9.  0.  0.]] 

i=4  label=4
 [[ 0.  0.  0.  1. 11.  0.  0.  0.]
 [ 0.  0.  0.  7.  8.  0.  0.  0.]
 [ 0.  0.  1. 13.  6.  2.  2.  0.]
 [ 0.  0.  7. 15.  0.  9.  8.  0.]
 [ 0.  5. 16. 10.  0. 16.  6.  0.]
 [ 0.  4. 15. 16. 13. 16.  1.  0.]
 [ 0.  0.  0.  3. 15. 10.  0.  0.]
 [ 0.  0.  0.  2. 16.  4.  0.  0.]] 

i=5  label=5
 [[ 0.  0. 12. 10.  0.  0.  0.  0.]
 [ 0.  0. 14. 16. 16. 14.  0.  0.]
 [ 0.  0. 13. 16. 15. 10.  1.  0.]
 [ 0.  0. 11. 16. 16.  7.  0.  0.]
 [ 0.  0.  0.  4.  7. 16.  7.  0.]
 [ 0.  0.  0.  0.  4. 16.  9.  0.]
 [ 0.  0.  5.  4. 12. 16.  4.  0.]
 [ 0.  0.  9. 16. 16. 10.  0.  0.]] 

i=6  label=6
 [[ 0.  0.  0. 12. 13.  0.  0.  0.]
 [ 0.  0.  5. 16.  8.  0.  0.  0.]
 [ 0.  0. 13. 16.  3.  0.  0.  0.]
 [ 0.  0. 14. 13.  0.  0.  0.  0.]
 [ 0.  0. 15. 12.  7.  2.  0.  0.]
 [ 0.  0. 13. 16. 13. 16.  3.  0.]
 [ 0.  0.  7. 16. 11. 15.  8.  0.]
 [ 0.  0.  1.  9. 15. 11.  3.  0.]] 

i=7  label=7
 [[ 0.  0.  7.  8. 13. 16. 15.  1.]
 [ 0.  0.  7.  7.  4. 11. 12.  0.]
 [ 0.  0.  0.  0.  8. 13.  1.  0.]
 [ 0.  4.  8.  8. 15. 15.  6.  0.]
 [ 0.  2. 11. 15. 15.  4.  0.  0.]
 [ 0.  0.  0. 16.  5.  0.  0.  0.]
 [ 0.  0.  9. 15.  1.  0.  0.  0.]
 [ 0.  0. 13.  5.  0.  0.  0.  0.]] 

i=8  label=8
 [[ 0.  0.  9. 14.  8.  1.  0.  0.]
 [ 0.  0. 12. 14. 14. 12.  0.  0.]
 [ 0.  0.  9. 10.  0. 15.  4.  0.]
 [ 0.  0.  3. 16. 12. 14.  2.  0.]
 [ 0.  0.  4. 16. 16.  2.  0.  0.]
 [ 0.  3. 16.  8. 10. 13.  2.  0.]
 [ 0.  1. 15.  1.  3. 16.  8.  0.]
 [ 0.  0. 11. 16. 15. 11.  1.  0.]] 

i=9  label=9
 [[ 0.  0. 11. 12.  0.  0.  0.  0.]
 [ 0.  2. 16. 16. 16. 13.  0.  0.]
 [ 0.  3. 16. 12. 10. 14.  0.  0.]
 [ 0.  1. 16.  1. 12. 15.  0.  0.]
 [ 0.  0. 13. 16.  9. 15.  2.  0.]
 [ 0.  0.  0.  3.  0.  9. 11.  0.]
 [ 0.  0.  0.  0.  9. 15.  4.  0.]
 [ 0.  0.  9. 12. 13.  3.  0.  0.]] 

i=10  label=0
 [[ 0.  0.  1.  9. 15. 11.  0.  0.]
 [ 0.  0. 11. 16.  8. 14.  6.  0.]
 [ 0.  2. 16. 10.  0.  9.  9.  0.]
 [ 0.  1. 16.  4.  0.  8.  8.  0.]
 [ 0.  4. 16.  4.  0.  8.  8.  0.]
 [ 0.  1. 16.  5.  1. 11.  3.  0.]
 [ 0.  0. 12. 12. 10. 10.  0.  0.]
 [ 0.  0.  1. 10. 13.  3.  0.  0.]] 

i=11  label=1
 [[ 0.  0.  0.  0. 14. 13.  1.  0.]
 [ 0.  0.  0.  5. 16. 16.  2.  0.]
 [ 0.  0.  0. 14. 16. 12.  0.  0.]
 [ 0.  1. 10. 16. 16. 12.  0.  0.]
 [ 0.  3. 12. 14. 16.  9.  0.  0.]
 [ 0.  0.  0.  5. 16. 15.  0.  0.]
 [ 0.  0.  0.  4. 16. 14.  0.  0.]
 [ 0.  0.  0.  1. 13. 16.  1.  0.]] 

i=12  label=2
 [[ 0.  0.  5. 12.  1.  0.  0.  0.]
 [ 0.  0. 15. 14.  7.  0.  0.  0.]
 [ 0.  0. 13.  1. 12.  0.  0.  0.]
 [ 0.  2. 10.  0. 14.  0.  0.  0.]
 [ 0.  0.  2.  0. 16.  1.  0.  0.]
 [ 0.  0.  0.  6. 15.  0.  0.  0.]
 [ 0.  0.  9. 16. 15.  9.  8.  2.]
 [ 0.  0.  3. 11.  8. 13. 12.  4.]] 

i=13  label=3
 [[ 0.  2.  9. 15. 14.  9.  3.  0.]
 [ 0.  4. 13.  8.  9. 16.  8.  0.]
 [ 0.  0.  0.  6. 14. 15.  3.  0.]
 [ 0.  0.  0. 11. 14.  2.  0.  0.]
 [ 0.  0.  0.  2. 15. 11.  0.  0.]
 [ 0.  0.  0.  0.  2. 15.  4.  0.]
 [ 0.  1.  5.  6. 13. 16.  6.  0.]
 [ 0.  2. 12. 12. 13. 11.  0.  0.]] 

i=14  label=4
 [[ 0.  0.  0.  8. 15.  1.  0.  0.]
 [ 0.  0.  1. 14. 13.  1.  1.  0.]
 [ 0.  0. 10. 15.  3. 15. 11.  0.]
 [ 0.  7. 16.  7.  1. 16.  8.  0.]
 [ 0.  9. 16. 13. 14. 16.  5.  0.]
 [ 0.  1. 10. 15. 16. 14.  0.  0.]
 [ 0.  0.  0.  1. 16. 10.  0.  0.]
 [ 0.  0.  0. 10. 15.  4.  0.  0.]] 

i=15  label=5
 [[ 0.  5. 12. 13. 16. 16.  2.  0.]
 [ 0. 11. 16. 15.  8.  4.  0.  0.]
 [ 0.  8. 14. 11.  1.  0.  0.  0.]
 [ 0.  8. 16. 16. 14.  0.  0.  0.]
 [ 0.  1.  6.  6. 16.  0.  0.  0.]
 [ 0.  0.  0.  5. 16.  3.  0.  0.]
 [ 0.  1.  5. 15. 13.  0.  0.  0.]
 [ 0.  4. 15. 16.  2.  0.  0.  0.]] 

i=16  label=6
 [[ 0.  0.  0.  8. 15.  1.  0.  0.]
 [ 0.  0.  0. 12. 14.  0.  0.  0.]
 [ 0.  0.  3. 16.  7.  0.  0.  0.]
 [ 0.  0.  6. 16.  2.  0.  0.  0.]
 [ 0.  0.  7. 16. 16. 13.  5.  0.]
 [ 0.  0. 15. 16.  9.  9. 14.  0.]
 [ 0.  0.  3. 14.  9.  2. 16.  2.]
 [ 0.  0.  0.  7. 15. 16. 11.  0.]] 

i=17  label=7
 [[ 0.  0.  1.  8. 15. 10.  0.  0.]
 [ 0.  3. 13. 15. 14. 14.  0.  0.]
 [ 0.  5. 10.  0. 10. 12.  0.  0.]
 [ 0.  0.  3.  5. 15. 10.  2.  0.]
 [ 0.  0. 16. 16. 16. 16. 12.  0.]
 [ 0.  1.  8. 12. 14.  8.  3.  0.]
 [ 0.  0.  0. 10. 13.  0.  0.  0.]
 [ 0.  0.  0. 11.  9.  0.  0.  0.]] 

i=18  label=8
 [[ 0.  0. 10.  7. 13.  9.  0.  0.]
 [ 0.  0.  9. 10. 12. 15.  2.  0.]
 [ 0.  0.  4. 11. 10. 11.  0.  0.]
 [ 0.  0.  1. 16. 10.  1.  0.  0.]
 [ 0.  0. 12. 13.  4.  0.  0.  0.]
 [ 0.  0. 12.  1. 12.  0.  0.  0.]
 [ 0.  1. 10.  2. 14.  0.  0.  0.]
 [ 0.  0. 11. 14.  5.  0.  0.  0.]] 

i=19  label=9
 [[ 0.  0.  6. 14.  4.  0.  0.  0.]
 [ 0.  0. 11. 16. 10.  0.  0.  0.]
 [ 0.  0.  8. 14. 16.  2.  0.  0.]
 [ 0.  0.  1. 12. 12. 11.  0.  0.]
 [ 0.  0.  0.  0.  0. 11.  3.  0.]
 [ 0.  0.  0.  0.  0.  5. 11.  0.]
 [ 0.  0.  1.  4.  4.  7. 16.  2.]
 [ 0.  0.  7. 16. 16. 13. 11.  1.]] 
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Příprava dat pro trénink</h2>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># budeme provádět vykreslování de facto standardní knihovnou Matplotlib</i>
&nbsp;
<i># import funkce, která vrátí obrázky pro práci</i>
from sklearn.datasets import load_digits
&nbsp;
<i># načtení obrázků, s nimiž budeme dále pracovat</i>
digits_data = load_digits()
&nbsp;
<i># celkový počet vzorků</i>
samples = len(digits_data.images)
print("Vzorků celkem:", samples)
&nbsp;
<i># počet vzorků pro trénink</i>
for_training = samples // 2
print("Vzorků pro trénink:", for_training)
&nbsp;
<i># obrázky (ve formě vektoru) a jejich označení</i>
training_images = digits_data.data[:for_training]
training_labels = digits_data.target[:for_training]
&nbsp;
<i># finito</i>
</pre>

<p></p>

<pre>
Vzorků celkem: 1797
Vzorků pro trénink: 898
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Klasifikace obrázků</h2>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># import funkce, která vrátí obrázky pro práci</i>
from sklearn.datasets import load_digits
&nbsp;
<i># načtení obrázků, s nimiž budeme dále pracovat</i>
digits_data = load_digits()
&nbsp;
<i># celkový počet vzorků</i>
samples = len(digits_data.images)
print("Vzorků celkem:", samples)
&nbsp;
<i># vytvoření seznamu, které použijeme</i>
images = list(zip(digits_data.target, digits_data.images))
&nbsp;
<i># počet vzorků pro trénink</i>
for_training = samples // 2
print("Vzorků pro trénink:", for_training)
&nbsp;
<i># obrázky (ve formě vektoru) a jejich označení</i>
training_images = digits_data.data[:for_training]
training_labels = digits_data.target[:for_training]
&nbsp;
<i># provést klasifikaci</i>
from sklearn import svm
classify = svm.SVC(gamma=0.001)
classify.fit(training_images, training_labels)
&nbsp;
<i># očekávané výsledky vs. výsledky modelu</i>
expexted_labels = digits_data.target[for_training:]
predicted_labels = classify.predict(digits_data.data[for_training:])
&nbsp;
<i># jak je náš model úspěšný?</i>
total = 0
same = 0
&nbsp;
for (expected, predicted) in zip(expexted_labels, predicted_labels):
    print(expected, predicted)
&nbsp;
<i># finito</i>
</pre>

<pre>
8 8
...
...
...
8 8
9 9
8 8
1 1
...
...
...
5 9
...
...
...
5 6
2 2
8 8
2 3
...
...
...
7 7
8 8
4 4
9 9
0 0
8 8
9 9
8 8
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Výpočet přesnosti modelu</h2>

<p></p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># import funkce, která vrátí obrázky pro práci</i>
from sklearn.datasets import load_digits
&nbsp;
<i># načtení obrázků, s nimiž budeme dále pracovat</i>
digits_data = load_digits()
&nbsp;
<i># celkový počet vzorků</i>
samples = len(digits_data.images)
print("Vzorků celkem:", samples)
&nbsp;
<i># vytvoření seznamu, které použijeme</i>
images = list(zip(digits_data.target, digits_data.images))
&nbsp;
<i># počet vzorků pro trénink</i>
for_training = samples // 2
print("Vzorků pro trénink:", for_training)
&nbsp;
<i># obrázky (ve formě vektoru) a jejich označení</i>
training_images = digits_data.data[:for_training]
training_labels = digits_data.target[:for_training]
&nbsp;
<i># provést klasifikaci</i>
from sklearn import svm
classify = svm.SVC(gamma=0.001)
classify.fit(training_images, training_labels)
&nbsp;
<i># očekávané výsledky vs. výsledky modelu</i>
expexted_labels = digits_data.target[for_training:]
predicted_labels = classify.predict(digits_data.data[for_training:])
&nbsp;
<i># jak je náš model úspěšný?</i>
total = 0
same = 0
&nbsp;
for (expected, predicted) in zip(expexted_labels, predicted_labels):
    print(expected, predicted)
    if expected==predicted:
        same+=1
    total+=1
&nbsp;
print("Total:", total)
print("Same:", same)
print("Precision:", 100.0*same/total)
&nbsp;
<i># finito</i>
</pre>

<p></p>

<pre>
Total: 899
Same: 871
Precision: 96.88542825361513
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Vykreslení obrázků společně s&nbsp;jejich klasifikací</h2>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
<i># vykreslování budeme provádět s využitím knihovny Matplotlib</i>
import matplotlib.pyplot as plt
&nbsp;
<i># import funkce, která vrátí obrázky pro práci</i>
from sklearn.datasets import load_digits
&nbsp;
<i># načtení obrázků, s nimiž budeme dále pracovat</i>
digits_data = load_digits()
&nbsp;
<i># celkový počet vzorků</i>
samples = len(digits_data.images)
print("Vzorků celkem:", samples)
&nbsp;
<i># vytvoření seznamu, které použijeme </i>
images = list(zip(digits_data.target, digits_data.images))
&nbsp;
<i># počet vzorků pro trénink</i>
for_training = samples // 2
print("Vzorků pro trénink:", for_training)
&nbsp;
<i># obrázky (ve formě vektoru) a jejich označení</i>
training_images = digits_data.data[:for_training]
training_labels = digits_data.target[:for_training]
&nbsp;
<i># provést klasifikaci</i>
from sklearn import svm
classify = svm.SVC(gamma=0.001)
classify.fit(training_images, training_labels)
&nbsp;
<i># očekávané výsledky vs. výsledky modelu</i>
expexted_labels = digits_data.target[for_training:]
predicted_labels = classify.predict(digits_data.data[for_training:])
&nbsp;
<i># získat predikce modelu</i>
predictions = list(zip(predicted_labels, digits_data.images[for_training:]))
&nbsp;
&nbsp;
def show_predictions(predictions, from_index, filename):
    <i># zobrazit patnáct výsledků</i>
    for i, (predicted_digit, image) in enumerate(predictions[from_index:from_index+15]):
        plt.subplot(3,5, i+1)
        plt.axis('off')
        <i># zobrazení obrázku</i>
        plt.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')
        <i># a přidání predikce - o jakou číslici se jedná</i>
        plt.title("Predict: %i" % predicted_digit)
&nbsp;
    <i># nakonec vše uložíme a zobrazíme</i>
    plt.savefig(filename)
    plt.show()
&nbsp;
&nbsp;
show_predictions(predictions, 0, "predictions_1.png")
show_predictions(predictions, 15, "predictions_2.png")
&nbsp;
<i># finito</i>
</pre>

*** image ***
<p><i>Obrázek 29: Prvních patnáct výsledků.</i></p>

*** image ***
<p><i>Obrázek 30: Dalších patnáct výsledků.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Změna poměru rozdělení dat na tréninkovou a testovací množinu</h2>

<p></p>

<pre>
def <strong>train_and_predict</strong>(training_set_size):
    <i># počet vzorků pro trénink</i>
    for_training = training_set_size
&nbsp;
    <i># obrázky (ve formě vektoru) a jejich označení</i>
    training_images = digits_data.data[:for_training]
    training_labels = digits_data.target[:for_training]
&nbsp;
    <i># provést klasifikaci</i>
    from sklearn import svm
    classify = svm.SVC(gamma=0.001)
    classify.fit(training_images, training_labels)
&nbsp;
    <i># očekávané výsledky vs. výsledky modelu</i>
    expexted_labels = digits_data.target[for_training:]
    predicted_labels = classify.predict(digits_data.data[for_training:])
&nbsp;
    <i># jak je náš model úspěšný?</i>
    total = 0
    same = 0
&nbsp;
    for (expected, predicted) in zip(expexted_labels, predicted_labels):
        if expected==predicted:
            same+=1
        total+=1
&nbsp;
    return 100.0*same/total
&nbsp;
training_sizes = np.linspace(10, samples-100, 15, dtype=int)
vectorised = np.vectorize(train_and_predict)
precisions = vectorised(training_sizes)
plt.plot(training_sizes, precisions)
plt.savefig("precisions.png")
</pre>

<p></p>

<pre>
Vzorků celkem: 1797
&nbsp;
Pro trénink    Odhadů    Korektních    Přesnost
     10         1787        1065        59.6%
    130         1667        1340        80.4%
    251         1546        1264        81.8%
    371         1426        1287        90.3%
    492         1305        1239        94.9%
    612         1185        1135        95.8%
    733         1064        1021        96.0%
    853          944         912        96.6%
    974          823         799        97.1%
   1094          703         678        96.4%
   1215          582         566        97.3%
   1335          462         447        96.8%
   1456          341         327        95.9%
   1576          221         208        94.1%
   1697          100          98        98.0%
</pre>

<p></p>

*** image ***
<p><i>Obrázek 31: </i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Další kroky a vylepšení</h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny skripty s&nbsp;postupnými kroky vedoucími k&nbsp;rozpoznání obrazů,
které byly uvedeny v&nbsp;předchozích kapitolách, lze nalézt v&nbsp;repositáři
<a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady a taktéž na notebook s&nbsp;celým
postupem (včetně poznámek, co každý příkaz znamená):</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>01_show_matrix.py</td><td>kooperace mezi knihovnami Matplotlib a NumPy: vizualizace obsahu 2D matice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/01_show_matrix.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/01_show_matrix.py</a></td></tr>
<tr><td> 2</td><td>02_get_digits.py</td><td>datová množina obsahující naskenované ručně napsané číslice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/02_get_digits.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/02_get_digits.py</a></td></tr>
<tr><td> 3</td><td>03_get_features.py</td><td>další atributy datové množiny, které použijeme při trénování</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/03_get_features.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/03_get_features.py</a></td></tr>
<tr><td> 4</td><td>04_get_images.py</td><td>přečtení a následné vykreslení jednotlivých ručně nakreslených číslic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/04_get_images.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/04_get_images.py</a></td></tr>
<tr><td> 5</td><td>05_show_grayscale_matrix.py</td><td>odstranění umělé aplikované barvové palety (obrázky ve stupních šedi)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/05_show_grayscale_matrix.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/05_show_grayscale_matrix.py</a></td></tr>
<tr><td> 6</td><td>06_grayscale_images.py</td><td>vykreslení ručně nakreslených číslic ve formě obrázků ve stupních šedi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/06_grayscale_images.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/06_grayscale_images.py</a></td></tr>
<tr><td> 7</td><td>07_multiplot.py</td><td>rozdělení plochy grafu do oblastí; vykreslení více obrázků do jediného grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/07_multiplot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/07_multiplot.py</a></td></tr>
<tr><td> 8</td><td>08_model_preperation_1.py</td><td>obrázky s&nbsp;jejich ohodnocením</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/08_model_preperation_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/08_model_preperation_1.py</a></td></tr>
<tr><td> 9</td><td>09_training_set.py</td><td>příprava dat pro trénink</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/09_training_set.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/09_training_set.py</a></td></tr>
<tr><td>10</td><td>10_classification.py</td><td>klasifikace obrázků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/10_classification.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/10_classification.py</a></td></tr>
<tr><td>11</td><td>11_results.py</td><td>vykreslení obrázků společně s&nbsp;jejich klasifikací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/11_results.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/11_results.py</a></td></tr>
<tr><td>12</td><td>12_change_training_set.py</td><td>změna poměru rozdělení dat na tréninkovou a testovací množinu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/12_change_training_set.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/12_change_training_set.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>pyproject.toml</td><td>projektový soubor (pro PDM) se všemi závislostmi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pyproject.toml">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pyproject.toml</a></td></tr>
<tr><td>14</td><td>pdm.lock</td><td>lock soubor s&nbsp;konkrétními verzemi všech přímých i tranzitivních závislostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pdm.lock">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pdm.lock</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>Rozpoznání_obrazu_scikit-learn.ipynb</td><td>Jupyter notebook s&nbsp;celým postupem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/Rozpoznání_obrazu_scikit-learn.ipynb">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/Rozpoznání_obrazu_scikit-learn.ipynb</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Seriály a články s&nbsp;relevantní tématikou vydané na Rootu</h2>

<ol>

<li>Seriál Knihovna Pandas<br />
<a href="https://www.root.cz/serialy/knihovna-pandas/">https://www.root.cz/serialy/knihovna-pandas/</a>
</li>

<li>Seriál Torch: framework pro strojové učení<br />
<a href="https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/">https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/</a>
</li>

<li>JupyterLite: nová alternativní architektura Jupyter Notebooku<br />
<a href="https://www.root.cz/clanky/jupyterlite-nova-alternativni-architektura-jupyter-notebooku/">https://www.root.cz/clanky/jupyterlite-nova-alternativni-architektura-jupyter-notebooku/</a>
</li>

<li>Jupyter Notebook &ndash; operace s&nbsp;rastrovými obrázky a UML diagramy, literate programming<br />
<a href="https://www.root.cz/clanky/jupyter-notebook-operace-s-rastrovymi-obrazky-a-uml-diagramy-literate-programming/">https://www.root.cz/clanky/jupyter-notebook-operace-s-rastrovymi-obrazky-a-uml-diagramy-literate-programming/</a>
</li>

<li>Jupyter Notebook &ndash; nástroj pro programátory, výzkumníky i lektory<br />
<a href="https://www.root.cz/clanky/jupyter-notebook-nastroj-pro-programatory-vyzkumniky-i-lektory/">https://www.root.cz/clanky/jupyter-notebook-nastroj-pro-programatory-vyzkumniky-i-lektory/</a>
</li>

<li>Tvorba grafů v Jupyter Notebooku s&nbsp;využitím knihovny Matplotlib (dokončení)<br />
<a href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib-dokonceni/">https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib-dokonceni/</a>
</li>

<li>Knihovna ipycanvas aneb kreslicí plátno pro Jupyter Notebook<br />
<a href="https://www.root.cz/clanky/knihovna-ipycanvas-aneb-kreslici-platno-pro-jupyter-notebook/">https://www.root.cz/clanky/knihovna-ipycanvas-aneb-kreslici-platno-pro-jupyter-notebook/</a>
</li>

<li>Knihovna ipycanvas aneb kreslicí plátno pro Jupyter Notebook (2. část)<br />
<a href="https://www.root.cz/clanky/knihovna-ipycanvas-aneb-kreslici-platno-pro-jupyter-notebook-2-cast/">https://www.root.cz/clanky/knihovna-ipycanvas-aneb-kreslici-platno-pro-jupyter-notebook-2-cast/</a>
</li>

<li>Interaktivní ovládací prvky v&nbsp;Jupyter Notebooku<br />
<a href="https://www.root.cz/clanky/interaktivni-ovladaci-prvky-v-jupyter-notebooku/">https://www.root.cz/clanky/interaktivni-ovladaci-prvky-v-jupyter-notebooku/</a>
</li>

<li>Xarray: sémantické rozšíření n-rozměrných polí z knihovny NumPy<br />
<a href="https://www.root.cz/clanky/xarray-semanticke-rozsireni-n-rozmernych-poli-z-knihovny-numpy/">https://www.root.cz/clanky/xarray-semanticke-rozsireni-n-rozmernych-poli-z-knihovny-numpy/</a>
</li>

<li>Xarray: sémantické rozšíření n-rozměrných polí z knihovny NumPy (dokončení)<br />
<a href="https://www.root.cz/clanky/xarray-semanticke-rozsireni-n-rozmernych-poli-z-knihovny-numpy-dokonceni/">https://www.root.cz/clanky/xarray-semanticke-rozsireni-n-rozmernych-poli-z-knihovny-numpy-dokonceni/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>scikit-learn: Machine Learning in Python<br />
<a href="https://scikit-learn.org/stable/index.html">https://scikit-learn.org/stable/index.html</a>
</li>

<li>Sklearn-pandas<br />
<a href="https://github.com/scikit-learn-contrib/sklearn-pandas">https://github.com/scikit-learn-contrib/sklearn-pandas</a>
</li>

<li>sklearn-xarray<br />
<a href="https://github.com/phausamann/sklearn-xarray/">https://github.com/phausamann/sklearn-xarray/</a>
</li>

<li>Neuraxle Pipelines<br />
<a href="https://github.com/Neuraxio/Neuraxle">https://github.com/Neuraxio/Neuraxle</a>
</li>

<li>scikit-learn: Getting Started<br />
<a href="https://scikit-learn.org/stable/getting_started.html">https://scikit-learn.org/stable/getting_started.html</a>
</li>

<li>Use Deep Learning to Detect Programming Languages<br />
<a href="http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/">http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/</a>
</li>

<li>Natural-language processing<br />
<a href="https://en.wikipedia.org/wiki/Natural-language_processing">https://en.wikipedia.org/wiki/Natural-language_processing</a>
</li>

<li>THE MNIST DATABASE of handwritten digits<br />
<a href="http://yann.lecun.com/exdb/mnist/">http://yann.lecun.com/exdb/mnist/</a>
</li>

<li>MNIST database (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MNIST_database">https://en.wikipedia.org/wiki/MNIST_database</a>
</li>

<li>MNIST For ML Beginners<br />
<a href="https://www.tensorflow.org/get_started/mnist/beginners">https://www.tensorflow.org/get_started/mnist/beginners</a>
</li>

<li>Stránka projektu Torch<br />
<a href="http://torch.ch/">http://torch.ch/</a>
</li>

<li>Torch: Serialization<br />
<a href="https://github.com/torch/torch7/blob/master/doc/serialization.md">https://github.com/torch/torch7/blob/master/doc/serialization.md</a>
</li>

<li>Torch: modul image<br />
<a href="https://github.com/torch/image/blob/master/README.md">https://github.com/torch/image/blob/master/README.md</a>
</li>

<li>Data pro neuronové sítě<br />
<a href="http://archive.ics.uci.edu/ml/index.php">http://archive.ics.uci.edu/ml/index.php</a>
</li>

<li>Torch na GitHubu (několik repositářů)<br />
<a href="https://github.com/torch">https://github.com/torch</a>
</li>

<li>Torch (machine learning), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Torch_%28machine_learning%29">https://en.wikipedia.org/wiki/Torch_%28machine_learning%29</a>
</li>

<li>Torch Package Reference Manual<br />
<a href="https://github.com/torch/torch7/blob/master/README.md">https://github.com/torch/torch7/blob/master/README.md</a>
</li>

<li>Torch Cheatsheet<br />
<a href="https://github.com/torch/torch7/wiki/Cheatsheet">https://github.com/torch/torch7/wiki/Cheatsheet</a>
</li>

<li>Neural network containres (Torch)<br />
<a href="https://github.com/torch/nn/blob/master/doc/containers.md">https://github.com/torch/nn/blob/master/doc/containers.md</a>
</li>

<li>Simple layers<br />
<a href="https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear">https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear</a>
</li>

<li>Transfer Function Layers<br />
<a href="https://github.com/torch/nn/blob/master/doc/transfer.md#nn.transfer.dok">https://github.com/torch/nn/blob/master/doc/transfer.md#nn.transfer.dok</a>
</li>

<li>Feedforward neural network<br />
<a href="https://en.wikipedia.org/wiki/Feedforward_neural_network">https://en.wikipedia.org/wiki/Feedforward_neural_network</a>
</li>

<li>Biologické algoritmy (4) - Neuronové sítě<br />
<a href="https://www.root.cz/clanky/biologicke-algoritmy-4-neuronove-site/">https://www.root.cz/clanky/biologicke-algoritmy-4-neuronove-site/</a>
</li>

<li>Biologické algoritmy (5) - Neuronové sítě<br />
<a href="https://www.root.cz/clanky/biologicke-algoritmy-5-neuronove-site/">https://www.root.cz/clanky/biologicke-algoritmy-5-neuronove-site/</a>
</li>

<li>Umělá neuronová síť (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Um%C4%9Bl%C3%A1_neuronov%C3%A1_s%C3%AD%C5%A5">https://cs.wikipedia.org/wiki/Um%C4%9Bl%C3%A1_neuronov%C3%A1_s%C3%AD%C5%A5</a>
</li>

<li>PyTorch<br />
<a href="http://pytorch.org/">http://pytorch.org/</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>Matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Galerie grafů vytvořených v&nbsp;Matplotlibu<br />
<a href="https://matplotlib.org/3.2.1/gallery/">https://matplotlib.org/3.2.1/gallery/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

