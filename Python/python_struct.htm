<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Manipulace s binárními datovými strukturami v Pythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Manipulace s binárními datovými strukturami v Pythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Manipulace s&nbsp;binárními datovými strukturami v&nbsp;Pythonu</a></p>
<p><a href="#k02">2. Základní datové typy programovacího jazyka Python</a></p>
<p><a href="#k03">3. Datový typ <strong>bytes</strong>: neměnitelné sekvence bajtů</a></p>
<p><a href="#k04">4. Literál typu <strong>bytes</strong></a></p>
<p><a href="#k05">5. Reprezentace sekvence bajtů řetězcem s&nbsp;hexadecimálními hodnotami</a></p>
<p><a href="#k06">6. Převod řetězce s&nbsp;hexadecimálními ciframi na hodnotu typu <strong>bytes</strong></a></p>
<p><a href="#k07">7. Převod řetězce na sekvenci bajtů se specifikací kódování</a></p>
<p><a href="#k08">8. Datový typ <strong>bytearray</strong>: měnitelné sekvence bajtů</a></p>
<p><a href="#k09">9. Převody mezi typem <strong>bytearray</strong> a řetězcem s&nbsp;hexadecimálními hodnotami</a></p>
<p><a href="#k10">10. Převod řetězce na pole bajtů se specifikací kódování</a></p>
<p><a href="#k11">*** 11. Datový typ <strong>str</strong></a></p>
<p><a href="#k12">*** 12. Práce s&nbsp;datovými strukturami uloženými v&nbsp;binárním formátu</a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Manipulace s&nbsp;binárními datovými strukturami v&nbsp;Pythonu</h2>

<p>Ve vývojářské praxi se poměrně často (i když se to nemusí zdát, tak
prakticky každý den) setkáme s&nbsp;nutností zpracování dat uložených
v&nbsp;binární podobě, tj.&nbsp;například v&nbsp;binárních souborech atd.
Programovací jazyk Python nám v&nbsp;této oblasti nabízí tři úrovně
abstrakce.</p>

<p>Na nejvyšší úrovni této abstrakce existují knihovny pro zpracování binárních
souborů se známým formátem. Pravděpodobně nejpoužívanější jsou knihovny pro
načítání a ukládání rastrových obrázků (<i>Pillow</i> resp.&nbsp;<i>PIL</i>).
Ale podobné knihovny jsou k&nbsp;dispozici i pro další binární formáty.</p>

<p>Na nejnižší úrovni abstrakce můžeme pracovat s&nbsp;jednotlivými bajty.
K&nbsp;tomuto účelu slouží základní datové typy <strong>bytes</strong> a
<strong>bytearray</strong>, s&nbsp;nimiž se dnes seznámíme.</p>

<p>A na prostřední úrovni abstrakce &ndash; která je z&nbsp;programátorského
pohledu možná nejzajímavější &ndash; můžeme pracovat s&nbsp;datovými
strukturami uloženými v&nbsp;binárním formátu s&nbsp;využitím standardní
knihovny <strong>struct</strong>. I s&nbsp;možnostmi této knihovny se dnes
seznámíme.</p>

<p><div class="rs-tip-major">Poznámka: na tomto místě je vhodné upozornit na
to, že všechny dále zmíněné datové typy, balíčky a postupy jsou platné pro
Python 3.x, nikoli nutně pro Python 2.x. Při přechodu mezi Pythonem 2.x a 3.x
totiž došlo k&nbsp;mnoha změnám, které se týkají (nejenom) této
oblasti.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní datové typy programovacího jazyka Python</h2>

<p>Nejprve se v&nbsp;dnešním článku musíme alespoň ve stručnosti zmínit o
základních datových typech programovacího jazyka Python. Jedná se o typy, které
jsou automaticky přiřazeny hodnotám a které dokáže interpret Pythonu správně
rozeznat na základě zapsané hodnoty (někdy se setkáme i s&nbsp;pojmem
<i>literál</i>, což ovšem nemusí být někdy zcela přesné) nebo které jsou
získány jako návratová hodnota nějakého <i>konstruktoru</i> popř.&nbsp;nějaké
konverzní funkce:</p>

<table>
<tr><th>Typ      </th><th>Stručný popis typu</th>
<tr><td>bool     </td><td>pravdivostní typ se dvěma povolenými hodnotami True a False (interně se ovšem jedná o hodnoty 1 a 0)</td></tr>
<tr><td>int      </td><td>celočíselné hodnoty s&nbsp;neomezeným rozsahem</td></tr>
<tr><td>float    </td><td>hodnoty s&nbsp;plovoucí řádovou čárkou (interně se jedná o typ double podle IEEE 754)</td></tr>
<tr><td>complex  </td><td>komplexní čísla (což je dvojice hodnot s&nbsp;plovoucí řádovou čárkou, každá hodnota je typu double)</td></tr>
<tr><td>list     </td><td>seznamy</td></tr>
<tr><td>tuple    </td><td>n-tice</td></tr>
<tr><td>range    </td><td>objekt typu range</td></tr>
<tr><td>str      </td><td>řetězce (v&nbsp;Pythonu 3 se přitom vždy jedná o Unicode řetězce)</td></tr>
<tr><td>bytes    </td><td>neměnitelná (<i>immutable</i>) sekvence bajtů</td></tr>
<tr><td>bytearray</td><td>měnitelná (<i>mutable</i>) sekvence bajtů</td></tr>
<tr><td>set      </td><td>měnitelné (<i>mutable</i>) množiny</td></tr>
<tr><td>frozenset</td><td>neměnitelné (<i>immutable</i>) množiny</td></tr>
<tr><td>NoneType </td><td>typ s&nbsp;jedinou hodnotou None</td></tr>
</table>

<p>V&nbsp;dalším textu nás budou zajímat vztahy (a taktéž rozdíly) mezi
datovými typy nazvanými <strong>str</strong>, <strong>bytes</strong> a
<strong>bytearray</strong>, protože by se mohlo na první pohled zdát, že se
jedná o zaměnitelné typy (resp.&nbsp;přesněji řečeno jejich hodnoty). Ve
skutečnosti tomu tak ovšem v&nbsp;praxi v&nbsp;žádném případě není.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Datový typ <strong>bytes</strong>: neměnitelné sekvence bajtů</h2>

<p>Začneme tím nejjednodušším datovým typem určeným pro ukládání libovolných
binárních hodnot (navíc o libovolné délce). Tento datový typ, který se jmenuje
<strong>bytes</strong>, je součástí balíčku <i>builtins</i>, jenž není nutné
explicitně importovat:</p>

<pre>
Help on class bytes in module builtins:
&nbsp;
class bytes(object)
 |  bytes(iterable_of_ints) -&gt; bytes
 |  bytes(string, encoding[, errors]) -&gt; bytes
 |  bytes(bytes_or_buffer) -&gt; immutable copy of bytes_or_buffer
 |  bytes(int) -&gt; bytes object of size given by the parameter initialized with null bytes
 |  bytes() -&gt; empty bytes object
 |
 |  Construct an immutable array of bytes from:
 |    - an iterable yielding integers in range(256)
 |    - a text string encoded using the specified encoding
 |    - any object implementing the buffer API.
 |    - an integer
 |
 |  Methods defined here:
 |
 |  __add__(self, value, /)
 |      Return self+value.
 |
 |  __buffer__(self, flags, /)
 |      Return a buffer object that exposes the underlying memory of the object.
</pre>

<p>Hodnoty datového typu <strong>bytes</strong> můžeme chápat jako sekvenci
bajtů libovolné hodnoty, přičemž důležité je, že tato sekvence je neměnitelná
(<i>immutable</i>). To znamená, že nelze měnit hodnoty bajtů, ale taktéž nejde
do sekvence přidat další bajty. Tento datový typ se používá velmi často, i když
mnohdy &bdquo;skrytě&ldquo; (hodnota typu <strong>bytes</strong> bývá získána
konverzí například řetězce atd., což si ostatně ještě ukážeme). Najdeme ho u
vstupně-výstupních operací atd.  Je tedy vhodné znát, jakým způsobem se
s&nbsp;tímto datovým typem v&nbsp;Pythonu pracuje.</p>

<p>Hodnotu typu <strong>bytes</strong> lze získat několika způsoby, přičemž
základní způsob využívá konstruktor, který je taktéž nazvaný
<strong>bytes</strong>. Tento konstruktor se používá následujícím způsobem:</p>

<pre>
x = <strong>bytes(10)</strong>
print(type(x))
print(x)
&nbsp;
print()
&nbsp;
y = <strong>bytes((1, 2, 3, 254, 255))</strong>
print(type(y))
print(y)
&nbsp;
print()
&nbsp;
z = <strong>bytes()</strong>
print(type(z))
print(z)
</pre>

<p>Výsledky:</p>

<pre>
&lt;class 'bytes'&gt;
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
&nbsp;
&lt;class 'bytes'&gt;
b'\x01\x02\x03\xfe\xff'
&nbsp;
&lt;class 'bytes'&gt;
b''
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že můžeme mít i prázdnou
sekvenci bajtů. Tu získáme zavoláním konstruktoru <strong>bytes</strong> bez
parametrů.</div></p>

<p>O tom, že hodnoty typu <strong>bytes</strong> jsou skutečně neměnitelné, se
lze velmi snadno přesvědčit, například pokusem o modifikaci jednoho bajtu ze
sekvence:</p>

<pre>
x = <strong>bytes(10)</strong>
print(type(x))
print(x)
&nbsp;
<strong>x[0] = 42</strong>
print(x)
</pre>

<p>Vyhozená výjimka má v&nbsp;tomto případě poněkud matoucí typ
<strong>TypeError</strong>:</p>

<pre>
Traceback (most recent call last):
  File "/home/ptisnovs/src/most-popular-python-libs/binary_structs/bytes_are_immutable.py", line 5, in &lt;module&gt;
    x[0] = 42
    ~^^^
TypeError: 'bytes' object does not support item assignment
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Literál typu <strong>bytes</strong></h2>

<p>Poměrně často se ve zdrojových kódech setkáme i se zápisem literálu
popisujícího hodnotu typu <strong>bytes</strong>. Jedná se o (pseudo)řetězec
s&nbsp;prefixem <strong>b</strong>. Tento (pseudo)řetězec přitom může obsahovat
pouze ASCII znaky (což je v&nbsp;runtime kontrolováno):</p>

<pre>
<i># prefix b s uvozovkami</i>
x = <strong>bytes(b"foo")</strong>
print(type(x))
print(x)
&nbsp;
print()
&nbsp;
<i># prefix b s apostrofy</i>
y = <strong>bytes(b'Write "Hello world"')</strong>
print(type(y))
print(y)
&nbsp;
print()
&nbsp;
<i># uvozovky nebo apostrofy lze "ztrojit" a poté využít " i ' uvnitř literálu</i>
z = <strong>bytes(b"""We can use 'a' and "b" there""")</strong>
print(type(z))
print(z)
</pre>

<p>Výsledky:</p>

<pre>
&lt;class 'bytes'&gt;
b'foo'
&nbsp;
&lt;class 'bytes'&gt;
b'Write "Hello world"'
&nbsp;
&lt;class 'bytes'&gt;
b'We can use \'a\' and "b" there'
</pre>

<p><div class="rs-tip-major">Poznámka: sekvence ASCII znaků se tedy zobrazuje
&bdquo;lidským&ldquo; (čitelným) způsobem.</div></p>

<p>V&nbsp;případě, že v&nbsp;literálu hodnoty typu <strong>bytes</strong>
použijeme znak mimo základní sadu ASCII, vyhodí se výjimka. To si pochopitelně
opět velmi snadno ověříme:</p>

<pre>
x = <strong>bytes(b"ěščřžýáíé")</strong>
print(type(x))
print(x)
</pre>

<p>Vyhozená výjimka by měla být typu <strong>SyntaxError</strong>:</p>

<pre>
  File "/home/ptisnovs/src/most-popular-python-libs/binary_structs/bytes_literal_no_ascii.py", line 1
    x = bytes(b"ěščřžýáíé")
              ^^^^^^^^^^^^
SyntaxError: bytes can only contain ASCII literal characters
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Reprezentace sekvence bajtů řetězcem s&nbsp;hexadecimálními hodnotami</h2>

<p>Hodnoty bajtů, které leží mimo rozsah znakové sady ASCII, se na terminálu
nebo ve zdrojovém kódu zobrazují poměrně nešikovně (a ještě hůř se zapisují) a
proto se velmi často setkáme s&nbsp;tím, že se každý bajt zapíše formou dvojice
hexadecimálních cifer. Programovací jazyk Python nám přitom umožňuje provést
převod &bdquo;řetězec s&nbsp;hexadecimálními ciframi&ldquo; &rarr;
&bdquo;hodnota typu <strong>bytes</strong>&ldquo;, tak opačný převod
&bdquo;hodnota typu <strong>bytes</strong>&ldquo; &rarr; &bdquo;řetězec
s&nbsp;hexadecimálními ciframi&ldquo;.</p>

<p>Nejprve se podívejme na způsob převodu hodnoty typu <strong>bytes</strong>
na řetězec obsahující hexadecimálně zapsané hodnoty. Tato operace se provádí
metodou <strong>hex</strong>, které lze předat oddělovač jednotlivých bajtů a
taktéž dalším parametrem určit, kolik bajtů má být sdruženo do jedné
skupiny:</p>

<pre>
x = bytes(b"The quick brown fox jumps over the lazy dog")
print(<strong>x.hex()</strong>)
print(<strong>x.hex(" ")</strong>)
print(<strong>x.hex(" ", 2)</strong>)
print(<strong>x.hex(" ", 4)</strong>)
</pre>

<p>Ze zobrazených výsledků je patrné, jaký je význam obou nepovinných
parametrů:</p>

<pre>
54686520717569636b2062726f776e20666f78206a756d7073206f76657220746865206c617a7920646f67
54 68 65 20 71 75 69 63 6b 20 62 72 6f 77 6e 20 66 6f 78 20 6a 75 6d 70 73 20 6f 76 65 72 20 74 68 65 20 6c 61 7a 79 20 64 6f 67
54 6865 2071 7569 636b 2062 726f 776e 2066 6f78 206a 756d 7073 206f 7665 7220 7468 6520 6c61 7a79 2064 6f67
546865 20717569 636b2062 726f776e 20666f78 206a756d 7073206f 76657220 74686520 6c617a79 20646f67
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Převod řetězce s&nbsp;hexadecimálními ciframi na hodnotu typu <strong>bytes</strong></h2>

<p>Opačný převod, tedy konkrétně převod z&nbsp;řetězce s&nbsp;hexadecimálními
hodnotami na hodnotu typu <strong>bytes</strong> zajišťuje metoda nazvaná
<strong>fromhex</strong>. V&nbsp;dalším ukázkovém příkladu jsou uvedeny
korektní zápisy:</p>

<pre>
x = <strong>bytes.fromhex("")</strong>
print(type(x))
print(x)
&nbsp;
print()
&nbsp;
y = <strong>bytes.fromhex("00 0f 1f ff")</strong>
print(type(y))
print(y)
&nbsp;
print()
&nbsp;
z = <strong>bytes.fromhex("000f1fff")</strong>
print(type(z))
print(z)
</pre>

<p>Výsledky:</p>

<pre>
&lt;class 'bytes'&gt;
b''
&nbsp;
&lt;class 'bytes'&gt;
b'\x00\x0f\x1f\xff'
&nbsp;
&lt;class 'bytes'&gt;
b'\x00\x0f\x1f\xff'
</pre>

<p>Python však hlídá, aby v&nbsp;každé skupině (pokud je použit oddělovač) byly
zapsány vždy celé bajty. Nelze tedy zapsat například &bdquo;0 &ldquo; a
očekávat, že si Python doplní druhou nulu:</p>

<pre>
x = <strong>bytes.fromhex("0 0f 1f ff")</strong>
print(type(x))
print(x)
</pre>

<p>V&nbsp;tomto případě je vyhozena výjimka:</p>

<pre>
Traceback (most recent call last):
  File "/home/ptisnovs/src/most-popular-python-libs/binary_structs/bytes_fromhex_err.py", line 1, in &lt;module&gt;
    x = bytes.fromhex("0 0f 1f ff")
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
ValueError: non-hexadecimal number found in fromhex() arg at position 1
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Převod řetězce na sekvenci bajtů se specifikací kódování</h2>

<p>Poslední operací s&nbsp;hodnotami typu <strong>bytes</strong>, kterou si
prozatím ukážeme, je převod řetězce na sekvenci bajtů s&nbsp;tím, že je možné
si zvolit výsledné kódování. Python, resp.&nbsp;přesněji řečeno Python 3.x,
totiž zcela rozlišuje mezi řetězci (interně se ukládají v&nbsp;Unicode) a
sekvencemi bajtů, které mohou být použity pro fyzické uložení řetězců do
souborů atd.. Podívejme se na jednoduchý příklad s&nbsp;několika kódováními, a
to včetně kódování šestnáctibitových (resp.&nbsp;takových, kde je znak uložen
ve dvou či ve čtyřech bajtech). Postfixy "le" a "be" značí &bdquo;little
endian&ldquo; a &bdquo;big endian&ldquo;:</p>

<pre>
s = "The quick brown fox jumps over the lazy dog"
&nbsp;
x = <strong>bytes(s, "ascii")</strong>
print(type(x))
print(x)
print()
&nbsp;
y = <strong>bytes(s, "utf-8")</strong>
print(type(y))
print(y)
print()
&nbsp;
z = <strong>bytes(s, "utf-16-le")</strong>
print(type(z))
print(z)
print()
&nbsp;
w = <strong>bytes(s, "utf-16-be")</strong>
print(type(w))
print(w)
print()
&nbsp;
<i># UTF-8, ovšem s&nbsp;BOM (používá Notepad a další divné aplikace)</i>
q = <strong>bytes(s, "utf-8-sig")</strong>
print(type(q))
print(q)
print()
</pre>

<p>A takto vypadají výsledné sekvence bajtů:</p>

<pre>
&lt;class 'bytes'&gt;
b'The quick brown fox jumps over the lazy dog'
&nbsp;
&lt;class 'bytes'&gt;
b'The quick brown fox jumps over the lazy dog'
&nbsp;
&lt;class 'bytes'&gt;
b'T\x00h\x00e\x00 \x00q\x00u\x00i\x00c\x00k\x00 \x00b\x00r\x00o\x00w\x00n\x00 \x00f\x00o\x00x\x00 \x00j\x00u\x00m\x00p\x00s\x00 \x00o\x00v\x00e\x00r\x00 \x00t\x00h\x00e\x00 \x00l\x00a\x00z\x00y\x00 \x00d\x00o\x00g\x00'
&nbsp;
&lt;class 'bytes'&gt;
b'\x00T\x00h\x00e\x00 \x00q\x00u\x00i\x00c\x00k\x00 \x00b\x00r\x00o\x00w\x00n\x00 \x00f\x00o\x00x\x00 \x00j\x00u\x00m\x00p\x00s\x00 \x00o\x00v\x00e\x00r\x00 \x00t\x00h\x00e\x00 \x00l\x00a\x00z\x00y\x00 \x00d\x00o\x00g'
&nbsp;
&lt;class 'bytes'&gt;
b'\xef\xbb\xbfThe quick brown fox jumps over the lazy dog'
</pre>

<p>Podobného výsledku ovšem můžeme dosáhnout i jinak, konkrétně použitím metody
<strong>string.encode</strong>, a to opět se specifikací výsledného
kódování:</p>

<pre>
s = "The quick brown fox jumps over the lazy dog"
&nbsp;
x = <strong>s.encode("ascii")</strong>
print(type(x))
print(x)
print()
&nbsp;
y = <strong>s.encode("utf-8")</strong>
print(type(y))
print(y)
print()
&nbsp;
z = <strong>s.encode("utf-16-le")</strong>
print(type(z))
print(z)
print()
&nbsp;
w = <strong>s.encode("utf-16-be")</strong>
print(type(w))
print(w)
print()
&nbsp;
<i># UTF-8, ovšem s&nbsp;BOM (používá Notepad a další divné aplikace)</i>
q = <strong>s.encode("utf-8-sig")</strong>
print(type(q))
print(q)
print()
</pre>

<p>Výsledky:</p>

<pre>
&lt;class 'bytes'&gt;
b'The quick brown fox jumps over the lazy dog'
&nbsp;
&lt;class 'bytes'&gt;
b'The quick brown fox jumps over the lazy dog'
&nbsp;
&lt;class 'bytes'&gt;
b'T\x00h\x00e\x00 \x00q\x00u\x00i\x00c\x00k\x00 \x00b\x00r\x00o\x00w\x00n\x00 \x00f\x00o\x00x\x00 \x00j\x00u\x00m\x00p\x00s\x00 \x00o\x00v\x00e\x00r\x00 \x00t\x00h\x00e\x00 \x00l\x00a\x00z\x00y\x00 \x00d\x00o\x00g\x00'
&nbsp;
&lt;class 'bytes'&gt;
b'\x00T\x00h\x00e\x00 \x00q\x00u\x00i\x00c\x00k\x00 \x00b\x00r\x00o\x00w\x00n\x00 \x00f\x00o\x00x\x00 \x00j\x00u\x00m\x00p\x00s\x00 \x00o\x00v\x00e\x00r\x00 \x00t\x00h\x00e\x00 \x00l\x00a\x00z\x00y\x00 \x00d\x00o\x00g'
&nbsp;
&lt;class 'bytes'&gt;
b'\xef\xbb\xbfThe quick brown fox jumps over the lazy dog'
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Datový typ <strong>bytearray</strong>: měnitelné sekvence bajtů</h2>

<p>Ve druhé části článku se budeme zabývat standardním datovým typem nazvaným
<strong>bytearray</strong>:</p>

<pre>
Help on class bytearray in module builtins:
&nbsp;
class bytearray(object)
 |  bytearray(iterable_of_ints) -&gt; bytearray
 |  bytearray(string, encoding[, errors]) -&gt; bytearray
 |  bytearray(bytes_or_buffer) -&gt; mutable copy of bytes_or_buffer
 |  bytearray(int) -&gt; bytes array of size given by the parameter initialized with null bytes
 |  bytearray() -&gt; empty bytes array
 |
 |  Construct a mutable bytearray object from:
 |    - an iterable yielding integers in range(256)
 |    - a text string encoded using the specified encoding
 |    - a bytes or a buffer object
 |    - any object implementing the buffer API.
 |    - an integer
 |
 |  Methods defined here:
...
...
...
</pre>

<p>Konstruktor <strong>bytearray</strong> se používá stejně, jako
v&nbsp;případě datového typu <strong>bytes</strong>:</p>

<pre>
x = <strong>bytearray(10)</strong>
print(type(x))
print(x)
&nbsp;
print()
&nbsp;
y = <strong>bytearray((1, 2, 3, 254, 255))</strong>
print(type(y))
print(y)
&nbsp;
print()
&nbsp;
z = <strong>bytearray()</strong>
print(type(z))
print(z)
</pre>

<p>Výsledek bude vypadat takto:</p>

<pre>
&lt;class 'bytearray'&gt;
bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
&nbsp;
&lt;class 'bytearray'&gt;
bytearray(b'\x01\x02\x03\xfe\xff')
&nbsp;
&lt;class 'bytearray'&gt;
bytearray(b'')
</pre>

<p>Hodnoty <strong>bytearray</strong> jsou ovšem měnitelné (<i>mutable</i>):</p>

<pre>
x = <strong>bytearray(10)</strong>
print(type(x))
print(x)
&nbsp;
<strong>x[5] = 42</strong>
print(x)
&nbsp;
<strong>x[3] = 0xff</strong>
print(x)
</pre>

<p>Ze zobrazených výsledků je patrné, že došlo k&nbsp;modifikaci hodnot bajtů,
a to bez vyhození výjimky:</p>

<pre>
&lt;class 'bytearray'&gt;
bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
bytearray(b'\x00\x00\x00\x00\x00*\x00\x00\x00\x00')
bytearray(b'\x00\x00\x00\xff\x00*\x00\x00\x00\x00')
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Převody mezi typem <strong>bytearray</strong> a řetězcem s&nbsp;hexadecimálními hodnotami</h2>

<p>Podívejme se nyní na způsob převodu mezi hodnotou typu
<strong>bytearray</strong> a řetězcem, který bude reprezentovat všechny bajty
z&nbsp;tohoto pole s&nbsp;využitím hexadecimálních hodnot (každý bajt odpovídá
dvěma znakům ve výsledném řetězci). Dále můžeme specifikovat mezery mezi
skupinami hexadecimálních cifer a taktéž to, kolik bajtů má být uloženo
(v&nbsp;hexadecimální podobě) v&nbsp;jedné skupině. Nejedná se tudíž o nic
nového, protože tento postup již dobře známe z&nbsp;popisu typu
<strong>bytes</strong>. V&nbsp;obou případech postačí zavolat stejně
pojmenovanou metodu <strong>hex</strong>:</p>

<pre>
x = bytearray(b"The quick brown fox jumps over the lazy dog")
print(<strong>x.hex()</strong>)
print(<strong>x.hex(" ")</strong>)
print(<strong>x.hex(" ", 2)</strong>)
print(<strong>x.hex(" ", 4)</strong>)
</pre>

<p>A takto budou vypadat výsledky získané tímto příkladem:</p>

<pre>
54686520717569636b2062726f776e20666f78206a756d7073206f76657220746865206c617a7920646f67
54 68 65 20 71 75 69 63 6b 20 62 72 6f 77 6e 20 66 6f 78 20 6a 75 6d 70 73 20 6f 76 65 72 20 74 68 65 20 6c 61 7a 79 20 64 6f 67
54 6865 2071 7569 636b 2062 726f 776e 2066 6f78 206a 756d 7073 206f 7665 7220 7468 6520 6c61 7a79 2064 6f67
546865 20717569 636b2062 726f776e 20666f78 206a756d 7073206f 76657220 74686520 6c617a79 20646f67
</pre>

<p>Poznámka: typy <strong>bytes</strong> a <strong>bytearray</strong> se tedy
v&nbsp;tomto ohledu neliší.</p>

<p>Prakticky totožným způsobem je realizován i opačný převod, což si lze opět
velmi snadno ověřit:</p>

<pre>
x = <strong>bytearray.fromhex("")</strong>
print(type(x))
print(x)
&nbsp;
print()
&nbsp;
y = <strong>bytearray.fromhex("00 0f 1f ff")</strong>
print(type(y))
print(y)
&nbsp;
print()
&nbsp;
z = <strong>bytearray.fromhex("000f1fff")</strong>
print(type(z))
print(z)
</pre>

<pre>
&lt;class 'bytearray'&gt;
bytearray(b'')
&nbsp;
&lt;class 'bytearray'&gt;
bytearray(b'\x00\x0f\x1f\xff')
&nbsp;
&lt;class 'bytearray'&gt;
bytearray(b'\x00\x0f\x1f\xff')
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Převod řetězce na pole bajtů se specifikací kódování</h2>

<p>Jen pro úplnost si ukažme, že modifikovatelná pole bajtů je možné získat i
z&nbsp;řetězců, konkrétně zakódováním Unicode řetězců do pole bajtů na základě
zvoleného způsobu zakódování znaků. Stejný příklad, jaký jsme si ukázali
v&nbsp;souvislosti s&nbsp;typem <strong>bytes</strong> lze přepsat i pro
<strong>bytearray</strong>:</p>

<pre>
s = "The quick brown fox jumps over the lazy dog"
&nbsp;
x = <strong>bytearray(s, "ascii")</strong>
print(type(x))
print(x)
print()
&nbsp;
y = <strong>bytearray(s, "utf-8")</strong>
print(type(y))
print(y)
print()
&nbsp;
z = <strong>bytearray(s, "utf-16-le")</strong>
print(type(z))
print(z)
print()
&nbsp;
w = <strong>bytearray(s, "utf-16-be")</strong>
print(type(w))
print(w)
print()
&nbsp;
<i># UTF-8 s BOM, pouziva ho napriklad Notepad a dalsi divne aplikace</i>
q = <strong>bytearray(s, "utf-8-sig")</strong>
print(type(q))
print(q)
print()
</pre>

<p>Výsledky:</p>

<pre>
&lt;class 'bytearray'&gt;
bytearray(b'The quick brown fox jumps over the lazy dog')
&nbsp;
&lt;class 'bytearray'&gt;
bytearray(b'The quick brown fox jumps over the lazy dog')
&nbsp;
&lt;class 'bytearray'&gt;
bytearray(b'T\x00h\x00e\x00 \x00q\x00u\x00i\x00c\x00k\x00 \x00b\x00r\x00o\x00w\x00n\x00 \x00f\x00o\x00x\x00 \x00j\x00u\x00m\x00p\x00s\x00 \x00o\x00v\x00e\x00r\x00 \x00t\x00h\x00e\x00 \x00l\x00a\x00z\x00y\x00 \x00d\x00o\x00g\x00')
&nbsp;
&lt;class 'bytearray'&gt;
bytearray(b'\x00T\x00h\x00e\x00 \x00q\x00u\x00i\x00c\x00k\x00 \x00b\x00r\x00o\x00w\x00n\x00 \x00f\x00o\x00x\x00 \x00j\x00u\x00m\x00p\x00s\x00 \x00o\x00v\x00e\x00r\x00 \x00t\x00h\x00e\x00 \x00l\x00a\x00z\x00y\x00 \x00d\x00o\x00g')
&nbsp;
&lt;class 'bytearray'&gt;
bytearray(b'\xef\xbb\xbfThe quick brown fox jumps over the lazy dog')
</pre>

<p>Zajímavější je situace u řetězců obsahujících znaky mimo standardní ASCII.
V&nbsp;tomto případě pochopitelně není možné provést zakódování do ASCII, takže
příslušnou část zdrojového kódu zakomentuji:</p>

<pre>
s = "ěščřžýáíéů"
&nbsp;
<i># nelze převést na čisté ASCII</i>
<i># x = bytearray(s, "ascii")</i>
<i># print(type(x))</i>
<i># print(x)</i>
<i># print()</i>
&nbsp;
y = <strong>bytearray(s, "utf-8")</strong>
print(type(y))
print(y)
print()
&nbsp;
z = <strong>bytearray(s, "utf-16-le")</strong>
print(type(z))
print(z)
print()
&nbsp;
w = <strong>bytearray(s, "utf-16-be")</strong>
print(type(w))
print(w)
print()
&nbsp;
<i># UTF-8 s BOM, pouziva ho napriklad Notepad a dalsi divne aplikace</i>
q = <strong>bytearray(s, "utf-8-sig")</strong>
print(type(q))
print(q)
print()
</pre>

<p>Na této ukázce si povšimněte, jak se původní řetězec s&nbsp;pouhými deseti
znaky &bdquo;natáhl&ldquo; do mnohem delšího pole bajtů:</p>

<pre>
&lt;class 'bytearray'&gt;
bytearray(b'\xc4\x9b\xc5\xa1\xc4\x8d\xc5\x99\xc5\xbe\xc3\xbd\xc3\xa1\xc3\xad\xc3\xa9\xc5\xaf')
&nbsp;
&lt;class 'bytearray'&gt;
bytearray(b'\x1b\x01a\x01\r\x01Y\x01~\x01\xfd\x00\xe1\x00\xed\x00\xe9\x00o\x01')
&nbsp;
&lt;class 'bytearray'&gt;
bytearray(b'\x01\x1b\x01a\x01\r\x01Y\x01~\x00\xfd\x00\xe1\x00\xed\x00\xe9\x01o')
&nbsp;
&lt;class 'bytearray'&gt;
bytearray(b'\xef\xbb\xbf\xc4\x9b\xc5\xa1\xc4\x8d\xc5\x99\xc5\xbe\xc3\xbd\xc3\xa1\xc3\xad\xc3\xa9\xc5\xaf')
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Datový typ <strong>str</strong></h2>

<p>V&nbsp;souvislosti s&nbsp;binárními daty je vhodné se zmínit i o řetězcích, a to ze dvou důvodů. Prvním důvodem je fakt, že v&nbsp;některých programovacích jazycích se (stále) předpokládá, že jednotlivé znaky a bajty jsou stejný či podobně se chovající datový typ. A za druhé v&nbsp;Pythonu 2.x se skutečně s&nbsp;řetězci a znaky v&nbsp;nich uloženými do jisté míry pracovalo jako s&nbsp;neměnitelnou sekvencí bajtů. V&nbsp;Pythonu 3.x je to ovšem jinak a řetězce jsou od sekvencí bajtů či od polí bajtů sémanticky odděleny. S&nbsp;tím souvisí i nutnost explicitního převodu mezi těmito datovými typy. Jeden z&nbsp;příkladů jsme ostatně již mohli vidět.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Práce s&nbsp;datovými strukturami uloženými v&nbsp;binárním formátu</h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Knihovna <strong>struct</strong></h2>

<pre>
Help on module struct:
&nbsp;
NAME
    struct
&nbsp;
MODULE REFERENCE
    https://docs.python.org/3.12/library/struct.html
&nbsp;
    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.
&nbsp;
DESCRIPTION
    Functions to convert between Python values and C structs.
    Python bytes objects are used to hold the data representing the C struct
    and also as format strings (explained below) to describe the layout of data
    in the C struct.
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady využívající knihovnu PyTorch lze nalézt
v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>bytes_type.py</td><td>konstrukce hodnoty typu <strong>bytes</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_type.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_type.py</a></td></tr>
<tr><td> 2</td><td>bytes_literal.py</td><td>literál popisující hodnotu typu <strong>bytes</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_literal.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_literal.py</a></td></tr>
<tr><td> 3</td><td>bytes_literal_no_ascii.py</td><td>literál s&nbsp;neplatnými znaky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_literal_no_ascii.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_literal_no_ascii.py</a></td></tr>
<tr><td> 4</td><td>bytes_hex.py</td><td>převod hodnoty typu <strong>bytes</strong> na řetězec s&nbsp;hexadecimálními hodnotami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_hex.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_hex.py</a></td></tr>
<tr><td> 5</td><td>bytes_fromhex.py</td><td>převod řetězce s&nbsp;hexadecimálními hodnotami na sekvenci bajtů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_fromhex.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_fromhex.py</a></td></tr>
<tr><td> 6</td><td>bytes_fromhex_err.py</td><td>převod řetězce s&nbsp;nezarovnanými hexadecimálními hodnotami na sekvenci bajtů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_fromhex_err.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_fromhex_err.py</a></td></tr>
<tr><td> 7</td><td>bytes_are_immutable.py</td><td>test, zda jsou hodnoty typu <strong>bytes</strong> skutečně neměnitelné</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_are_immutable.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_are_immutable.py</a></td></tr>
<tr><td> 8</td><td>bytes_encode.py</td><td>převod řetězce do zadaného kódování</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_encode.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_encode.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>bytearray_type.py</td><td>konstrukce hodnoty typu <strong>bytearray</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytearray_type.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytearray_type.py</a></td></tr>
<tr><td>10</td><td>bytearray_is_mutable.py</td><td>test, zda jsou hodnoty typu <strong>bytearray</strong> měnitelné</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytearray_is_mutable.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytearray_is_mutable.py</a></td></tr>
<tr><td>11</td><td>bytearray_hex.py</td><td>převod hodnoty typu <strong>bytearray</strong> na řetězec s&nbsp;hexadecimálními hodnotami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytearray_hex.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytearray_hex.py</a></td></tr>
<tr><td>12</td><td>bytearray_fromhex.py</td><td>převod řetězce s&nbsp;hexadecimálními hodnotami na měnitelné pole bajtů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytearray_fromhex.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytearray_fromhex.py</a></td></tr>
<tr><td>13</td><td>bytearray_encode.py</td><td>převod řetězce do zadaného kódování</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytearray_encode.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytearray_encode.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>14</td><td>string_to_bytes.py</td><td>převod řetězce na sekvenci bajtů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/string_to_bytes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/string_to_bytes.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Python standard types: bytes<br />
<a href="https://docs.python.org/3.8/library/stdtypes.html#bytes">https://docs.python.org/3.8/library/stdtypes.html#bytes</a>
</li>

<li>Python standard types: bytearray<br />
<a href="https://docs.python.org/3.8/library/stdtypes.html#bytearray-objects">https://docs.python.org/3.8/library/stdtypes.html#bytearray-objects</a>
</li>

<li>Bytes and Bytearray Operations<br />
<a href="https://docs.python.org/3.8/library/stdtypes.html#bytes-methods">https://docs.python.org/3.8/library/stdtypes.html#bytes-methods</a>
</li>

<li>Standard encodings<br />
<a href="https://docs.python.org/3.8/library/codecs.html#standard-encodings">https://docs.python.org/3.8/library/codecs.html#standard-encodings</a>
</li>

<li>class memoryview<br />
<a href="https://docs.python.org/3.8/library/stdtypes.html#memoryview">https://docs.python.org/3.8/library/stdtypes.html#memoryview</a>
</li>

<li>struct &ndash; Interpret bytes as packed binary data<br />
<a href="https://docs.python.org/3/library/struct.html">https://docs.python.org/3/library/struct.html</a>
</li>

<li>C-like structures in Python<br />
<a href="https://stackoverflow.com/questions/35988/c-like-structures-in-python">https://stackoverflow.com/questions/35988/c-like-structures-in-python</a>
</li>

<li>python3: bytes vs bytearray, and converting to and from strings<br />
<a href="https://stackoverflow.com/questions/62903377/python3-bytes-vs-bytearray-and-converting-to-and-from-strings">https://stackoverflow.com/questions/62903377/python3-bytes-vs-bytearray-and-converting-to-and-from-strings</a>
</li>

<li>Základní informace o MessagePacku<br />
<a href="https://msgpack.org/">https://msgpack.org/</a>
</li>

<li>Balíček msgpack na PyPi<br />
<a href="https://pypi.org/project/msgpack/">https://pypi.org/project/msgpack/</a>
</li>

<li>MessagePack na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/MessagePack">https://en.wikipedia.org/wiki/MessagePack</a>
</li>

<li>Comparison of data-serialization formats (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats">https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats</a>
</li>

<li>Repositáře msgpacku<br />
<a href="https://github.com/msgpack">https://github.com/msgpack</a>
</li>

<li>Specifikace ukládání různých typů dat<br />
<a href="https://github.com/msgpack/msgpack/blob/master/spec.md">https://github.com/msgpack/msgpack/blob/master/spec.md</a>
</li>

<li>Podpora MessagePacku v&nbsp;různých programovacích jazycích<br />
<a href="https://msgpack.org/#languages">https://msgpack.org/#languages</a>
</li>

<li>Základní implementace formátu msgpack pro programovací jazyk Go<br />
<a href="https://github.com/msgpack/msgpack-go">https://github.com/msgpack/msgpack-go</a>
</li>

<li>go-codec<br />
<a href="https://github.com/ugorji/go">https://github.com/ugorji/go</a>
</li>

<li>Gobs of data (odlišný serializační formát)<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<li>Formát BSON (odlišný serializační formát)<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

<li>Problematika nulových hodnot v Go, aneb proč nil != nil<br />
<a href="https://www.root.cz/clanky/problematika-nulovych-hodnot-v-go-aneb-proc-nil-nil/">https://www.root.cz/clanky/problematika-nulovych-hodnot-v-go-aneb-proc-nil-nil/</a>
</li>

<li>IEEE-754 Floating Point Converter<br />
<a href="https://www.h-schmidt.net/FloatConverter/IEEE754.html">https://www.h-schmidt.net/FloatConverter/IEEE754.html</a>
</li>

<li>Base Convert: IEEE 754 Floating Point<br />
<a href="https://baseconvert.com/ieee-754-floating-point">https://baseconvert.com/ieee-754-floating-point</a>
</li>

<li>Brain Floating Point &ndash; nový formát uložení čísel pro strojové učení a chytrá čidla<br />
<a href="https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/">https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Protocol Buffers<br />
<a href="https://protobuf.dev/">https://protobuf.dev/</a>
</li>

<li>Protocol Buffers<br />
<a href="https://en.wikipedia.org/wiki/Protocol_Buffers">https://en.wikipedia.org/wiki/Protocol_Buffers</a>
</li>

<li>What is the difference between Serialization and Marshaling?<br />
<a href="https://stackoverflow.com/questions/770474/what-is-the-difference-between-serialization-and-marshaling">https://stackoverflow.com/questions/770474/what-is-the-difference-between-serialization-and-marshaling</a>
</li>

<li>Comparison of data-serialization formats<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats">https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

