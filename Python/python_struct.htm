<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Manipulace s binárními datovými strukturami v Pythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Manipulace s binárními datovými strukturami v Pythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Manipulace s&nbsp;binárními datovými strukturami v&nbsp;Pythonu</a></p>
<p><a href="#k02">2. Základní datové typy programovacího jazyka Python</a></p>
<p><a href="#k03">3. Datový typ <strong>bytes</strong>: neměnitelné sekvence bajtů</a></p>
<p><a href="#k04">4. Literál typu <strong>bytes</strong></a></p>
<p><a href="#k05">*** 5. Reprezentace sekvence bajtů řetězcem s&nbsp;hexadecimálními hodnotami</a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Manipulace s&nbsp;binárními datovými strukturami v&nbsp;Pythonu</h2>

<p><div class="rs-tip-major">Poznámka: na tomto místě je vhodné upozornit na to, že všechny dále zmíněné datové typy, balíčky a postupy jsou platné pro Python 3.x, nikoli nutně pro Python 2.x.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní datové typy programovacího jazyka Python</h2>

<p>Nejprve se v&nbsp;dnešním článku musíme alespoň ve stručnosti zmínit o
základních datových typech programovacího jazyka Python. Jedná se o typy, které
jsou automaticky přiřazeny hodnotám a které dokáže interpret Pythonu správně
rozeznat na základě zapsané hodnoty (někdy se setkáme i s&nbsp;pojmem
<i>literál</i>) nebo které jsou získány jako návratová hodnota nějakého
<i>konstruktoru</i> popř.&nbsp;nějaké konverzní funkce:</p>

<table>
<tr><th>Typ      </th><th>Stručný popis typu</th>
<tr><td>bool     </td><td>pravdivostní typ se dvěma povolenými hodnotami True a False (interně se ovšem jedná o hodnoty 1 a 0)</td></tr>
<tr><td>int      </td><td>celočíselné hodnoty s&nbsp;neomezeným rozsahem</td></tr>
<tr><td>float    </td><td>hodnoty s&nbsp;plovoucí řádovou čárkou (interně se jedná o typ double podle IEEE 754)</td></tr>
<tr><td>complex  </td><td>komplexní čísla (což je dvojice hodnot s&nbsp;plovoucí řádovou čárkou, každá hodnota je typu double)</td></tr>
<tr><td>list     </td><td>seznamy</td></tr>
<tr><td>tuple    </td><td>n-tice</td></tr>
<tr><td>range    </td><td>objekt typu range</td></tr>
<tr><td>str      </td><td>řetězce (v&nbsp;Pythonu 3 se přitom vždy jedná o Unicode řetězce)</td></tr>
<tr><td>bytes    </td><td>neměnitelná (<i>immutable</i>) sekvence bajtů</td></tr>
<tr><td>bytearray</td><td>měnitelná (<i>mutable</i>) sekvence bajtů</td></tr>
<tr><td>set      </td><td>měnitelné (<i>mutable</i>) množiny</td></tr>
<tr><td>frozenset</td><td>neměnitelné (<i>immutable</i>) množiny</td></tr>
<tr><td>NoneType </td><td>typ s&nbsp;jedinou hodnotou None</td></tr>
</table>

<p>V&nbsp;dalším textu nás budou zajímat vztahy (a taktéž rozdíly) mezi
datovými typy <strong>str</strong>, <strong>bytes</strong> a
<strong>bytearray</strong>, protože by se mohlo na první pohled zdát, že se
jedná o zaměnitelné typy (resp.&nbsp;přesněji řečeno jejich hodnoty). Ve
skutečnosti tomu tak ovšem v&nbsp;praxi není.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Datový typ <strong>bytes</strong>: neměnitelné sekvence bajtů</h2>

<p>Začneme tím nejjednodušším datovým typem určeným pro ukládání libovolných
binárních hodnot. Tímto typem je <strong>bytes</strong>. Jedná se o sekvenci
bajtů libovolné hodnoty, přičemž důležité je, že tato sekvence je neměnitelná
(<i>immutable</i>). To znamená, že nelze měnit hodnoty bajtů, ale taktéž nejde
do sekvence přidat další bajty. Tento datový typ se používá velmi často, i když
mnohdy &bdquo;skrytě&ldquo; (hodnota typu <strong>bytes</strong> bývá získána
konverzí například řetězce atd.). Najdeme ho u vstupně-výstupních operací atd.
Je tedy vhodné znát, jakým způsobem se s&nbsp;tímto datovým typem
v&nbsp;Pythonu pracuje.</p>

<p>Hodnotu typu <strong>bytes</strong> lze získat několika způsoby, přičemž
základní způsob využívá konstruktor, který je taktéž nazvaný
<strong>bytes</strong>. Tento konstruktor se používá následujícím způsobem:</p>

<pre>
x = bytes(10)
print(type(x))
print(x)
&nbsp;
print()
&nbsp;
y = bytes((1, 2, 3, 254, 255))
print(type(y))
print(y)
&nbsp;
print()
&nbsp;
z = bytes()
print(type(z))
print(z)
</pre>

<p>Výsledky:</p>

<pre>
<class 'bytes'>
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
&nbsp;
<class 'bytes'>
b'\x01\x02\x03\xfe\xff'
&nbsp;
<class 'bytes'>
b''
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že můžeme mít i prázdnou
sekvenci bajtů.</div></p>

<p>O tom, že hodnoty typu <strong>bytes</strong> jsou neměnitelné, se lze velmi
snadno přesvědčit pokusem o modifikaci jednoho bajtu:</p>

<pre>
x = bytes(10)
print(type(x))
print(x)
&nbsp;
x[0] = 42
print(x)
</pre>

<p>Vyhozená výjimka má v&nbsp;tomto případě poněkud matoucí typ
<strong>TypeError</strong>:</p>

<pre>
Traceback (most recent call last):
  File "/home/ptisnovs/src/most-popular-python-libs/binary_structs/bytes_are_immutable.py", line 5, in &lt;module&gt;
    x[0] = 42
    ~^^^
TypeError: 'bytes' object does not support item assignment
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Literál typu <strong>bytes</strong></h2>

<p>Setkáme se i se zápisem literálu popisujícího hodnotu typu
<strong>bytes</strong>. Jedná se o (pseudo)řetězec s&nbsp;prefixem
<strong>b</strong>. Tento (pseudo)řetězec může obsahovat pouze ASCII znaky:</p>

<pre>
x = bytes(b"foo")
print(type(x))
print(x)
&nbsp;
print()
&nbsp;
y = bytes(b'Write "Hello world"')
print(type(y))
print(y)
&nbsp;
print()
&nbsp;
z = bytes(b"""We can use 'a' and "b" there""")
print(type(z))
print(z)
</pre>

<p>Výsledky:</p>

<pre>
<class 'bytes'>
b'foo'
&nbsp;
<class 'bytes'>
b'Write "Hello world"'
&nbsp;
<class 'bytes'>
b'We can use \'a\' and "b" there'
</pre>

<p><div class="rs-tip-major">Poznámka: sekvence ASCII znaků se tedy zobrazuje
&bdquo;lidským&ldquo; (čitelným) způsobem.</div></p>

<p>V&nbsp;případě, že v&nbsp;literálu použijeme znak mimo základní ASCII,
vyhodí se výjimka. To si pochopitelně opět ověříme:</p>

<pre>
x = bytes(b"ěščřžýáíé")
print(type(x))
print(x)
</pre>

<p>Výjimka:</p>

<pre>
  File "/home/ptisnovs/src/most-popular-python-libs/binary_structs/bytes_literal_no_ascii.py", line 1
    x = bytes(b"ěščřžýáíé")
              ^^^^^^^^^^^^
SyntaxError: bytes can only contain ASCII literal characters
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Reprezentace sekvence bajtů řetězcem s&nbsp;hexadecimálními hodnotami</h2>

<pre>
x = bytes(b"The quick brown fox jumps over the lazy dog")
print(x.hex())
print(x.hex(" "))
print(x.hex(" ", 2))
print(x.hex(" ", 4))
</pre>

<pre>
54686520717569636b2062726f776e20666f78206a756d7073206f76657220746865206c617a7920646f67
54 68 65 20 71 75 69 63 6b 20 62 72 6f 77 6e 20 66 6f 78 20 6a 75 6d 70 73 20 6f 76 65 72 20 74 68 65 20 6c 61 7a 79 20 64 6f 67
54 6865 2071 7569 636b 2062 726f 776e 2066 6f78 206a 756d 7073 206f 7665 7220 7468 6520 6c61 7a79 2064 6f67
546865 20717569 636b2062 726f776e 20666f78 206a756d 7073206f 76657220 74686520 6c617a79 20646f67
</pre>

<pre>
x = bytes.fromhex("")
print(type(x))
print(x)

print()

y = bytes.fromhex("00 0f 1f ff")
print(type(y))
print(y)

print()

z = bytes.fromhex("000f1fff")
print(type(z))
print(z)
</pre>

<pre>
<class 'bytes'>
b''

<class 'bytes'>
b'\x00\x0f\x1f\xff'

<class 'bytes'>
b'\x00\x0f\x1f\xff'
</pre>

<pre>
x = bytes.fromhex("0 0f 1f ff")
print(type(x))
print(x)
</pre>

<pre>
Traceback (most recent call last):
  File "/home/ptisnovs/src/most-popular-python-libs/binary_structs/bytes_fromhex_err.py", line 1, in <module>
    x = bytes.fromhex("0 0f 1f ff")
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
ValueError: non-hexadecimal number found in fromhex() arg at position 1
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady využívající knihovnu PyTorch lze nalézt
v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>bytes_type.py</td><td>konstrukce hodnoty typu <strong>bytes</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_type.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_type.py</a></td></tr>
<tr><td> 2</td><td>bytes_literal.py</td><td>literál popisující hodnotu typu <strong>bytes</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_literal.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_literal.py</a></td></tr>
<tr><td> 3</td><td>bytes_literal_no_ascii.py</td><td>literál s&nbsp;neplatnými znaky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_literal_no_ascii.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_literal_no_ascii.py</a></td></tr>
<tr><td> 4</td><td>bytes_hex.py</td><td>převod hodnoty typu <strong>bytes</strong> na řetězec s&nbsp;hexadecimálními hodnotami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_hex.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_hex.py</a></td></tr>
<tr><td> 5</td><td>bytes_fromhex.py</td><td>převod řetězce s&nbsp;hexadecimálními hodnotami na sekvenci bajtů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_fromhex.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_fromhex.py</a></td></tr>
<tr><td> 6</td><td>bytes_fromhex_err.py</td><td>převod řetězce s&nbsp;nezarovnanými hexadecimálními hodnotami na sekvenci bajtů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_fromhex_err.py">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/bytes_fromhex_err.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/">https://github.com/tisnik/most-popular-python-libs/blob/master/binary_structs/</a></td></tr>
</table>

bytearray_fromhex.py
bytearray_hex.py
bytearray_is_mutable.py
bytearray_type.py
bytes_are_immutable.py
string_to_bytes.py



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Python standard types: bytes<br />
<a href="https://docs.python.org/3.8/library/stdtypes.html#bytes">https://docs.python.org/3.8/library/stdtypes.html#bytes</a>
</li>

<li>Python standard types: bytearray<br />
<a href="https://docs.python.org/3.8/library/stdtypes.html#bytearray-objects">https://docs.python.org/3.8/library/stdtypes.html#bytearray-objects</a>
</li>

<li>Bytes and Bytearray Operations<br />
<a href="https://docs.python.org/3.8/library/stdtypes.html#bytes-methods">https://docs.python.org/3.8/library/stdtypes.html#bytes-methods</a>
</li>

<li>Standard encodings<br />
<a href="https://docs.python.org/3.8/library/codecs.html#standard-encodings">https://docs.python.org/3.8/library/codecs.html#standard-encodings</a>
</li>

<li>class memoryview<br />
<a href="https://docs.python.org/3.8/library/stdtypes.html#memoryview">https://docs.python.org/3.8/library/stdtypes.html#memoryview</a>
</li>

<li>struct &ndash; Interpret bytes as packed binary data<br />
<a href="https://docs.python.org/3/library/struct.html">https://docs.python.org/3/library/struct.html</a>
</li>

<li>C-like structures in Python<br />
<a href="https://stackoverflow.com/questions/35988/c-like-structures-in-python">https://stackoverflow.com/questions/35988/c-like-structures-in-python</a>
</li>

<li>python3: bytes vs bytearray, and converting to and from strings<br />
<a href="https://stackoverflow.com/questions/62903377/python3-bytes-vs-bytearray-and-converting-to-and-from-strings">https://stackoverflow.com/questions/62903377/python3-bytes-vs-bytearray-and-converting-to-and-from-strings</a>
</li>

<li>Základní informace o MessagePacku<br />
<a href="https://msgpack.org/">https://msgpack.org/</a>
</li>

<li>Balíček msgpack na PyPi<br />
<a href="https://pypi.org/project/msgpack/">https://pypi.org/project/msgpack/</a>
</li>

<li>MessagePack na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/MessagePack">https://en.wikipedia.org/wiki/MessagePack</a>
</li>

<li>Comparison of data-serialization formats (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats">https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats</a>
</li>

<li>Repositáře msgpacku<br />
<a href="https://github.com/msgpack">https://github.com/msgpack</a>
</li>

<li>Specifikace ukládání různých typů dat<br />
<a href="https://github.com/msgpack/msgpack/blob/master/spec.md">https://github.com/msgpack/msgpack/blob/master/spec.md</a>
</li>

<li>Podpora MessagePacku v&nbsp;různých programovacích jazycích<br />
<a href="https://msgpack.org/#languages">https://msgpack.org/#languages</a>
</li>

<li>Základní implementace formátu msgpack pro programovací jazyk Go<br />
<a href="https://github.com/msgpack/msgpack-go">https://github.com/msgpack/msgpack-go</a>
</li>

<li>go-codec<br />
<a href="https://github.com/ugorji/go">https://github.com/ugorji/go</a>
</li>

<li>Gobs of data (odlišný serializační formát)<br />
<a href="https://blog.golang.org/gobs-of-data">https://blog.golang.org/gobs-of-data</a>
</li>

<li>Formát BSON (odlišný serializační formát)<br />
<a href="http://bsonspec.org/">http://bsonspec.org/</a>
</li>

<li>Problematika nulových hodnot v Go, aneb proč nil != nil<br />
<a href="https://www.root.cz/clanky/problematika-nulovych-hodnot-v-go-aneb-proc-nil-nil/">https://www.root.cz/clanky/problematika-nulovych-hodnot-v-go-aneb-proc-nil-nil/</a>
</li>

<li>IEEE-754 Floating Point Converter<br />
<a href="https://www.h-schmidt.net/FloatConverter/IEEE754.html">https://www.h-schmidt.net/FloatConverter/IEEE754.html</a>
</li>

<li>Base Convert: IEEE 754 Floating Point<br />
<a href="https://baseconvert.com/ieee-754-floating-point">https://baseconvert.com/ieee-754-floating-point</a>
</li>

<li>Brain Floating Point &ndash; nový formát uložení čísel pro strojové učení a chytrá čidla<br />
<a href="https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/">https://www.root.cz/clanky/brain-floating-point-ndash-novy-format-ulozeni-cisel-pro-strojove-uceni-a-chytra-cidla/</a>
</li>

<li>Marshalling (computer science)<br />
<a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
</li>

<li>Protocol Buffers<br />
<a href="https://protobuf.dev/">https://protobuf.dev/</a>
</li>

<li>Protocol Buffers<br />
<a href="https://en.wikipedia.org/wiki/Protocol_Buffers">https://en.wikipedia.org/wiki/Protocol_Buffers</a>
</li>

<li>What is the difference between Serialization and Marshaling?<br />
<a href="https://stackoverflow.com/questions/770474/what-is-the-difference-between-serialization-and-marshaling">https://stackoverflow.com/questions/770474/what-is-the-difference-between-serialization-and-marshaling</a>
</li>

<li>Comparison of data-serialization formats<br />
<a href="https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats">https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

