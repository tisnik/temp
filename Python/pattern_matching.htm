<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p>Programovací jazyk Rust sice nepodporuje céčkovskou rozhodovací konstrukci typu <strong>switch-case</strong> (kterou převzala a jen mírně rozšířila Java atd.), což však ve skutečnosti není žádná škoda, protože namísto toho nabízí mnohem robustnější konstrukci <strong>match</strong>, kterou lze taktéž použít pro volbu některé větve kódu, jenž se má provést. Nejprve se bez dlouhých popisů podívejme na způsob zápisu této konstrukce v&nbsp;její nejjednodušší podobě, tedy při klasickém rozvětvení:</p>

<pre>
fn main() {
    let x:i32 = 1;
&nbsp;
    match x {
        0 =&gt; println!("zero"),
        1 =&gt; println!("one"),
        2 =&gt; println!("two"),
        3 =&gt; println!("three"),
        _ =&gt; println!("something else"),
    }
}
</pre>

<p>Vidíme, že v&nbsp;konstrukci <strong>match</strong> je několik větví, přičemž každá větev začíná porovnávanou hodnotou a výraz či příkaz je uveden za šipkou tvořenou znaky =&gt;. Poslední řádek obsahuje symbol _, který vlastně nahrazuje větev <strong>default</strong>. Ve skutečnosti je však sémantika tohoto symbolu poněkud odlišná, protože před šipkou =&gt; je uveden takzvaný vzorek (<i>pattern</i>) a nikoli pouhopouhá konstanta.</p>

<p>Ve skutečnosti překladač kontroluje, zda je _ použit, protože je vyžadováno, aby větve v&nbsp;konstrukci <strong>match</strong> pokryly všechny možné hodnoty testovaného výrazu (mám pocit, že současný překladač obsahuje chybu, protože pouze vyžaduje použití _ vždy, i když to s&nbsp;ohledem na předchozí větve není nutné). Zkusme přeložit následující příklad:</p>

<pre>
fn main() {
    let x:i32 = 1;

    match x {
        0 =&gt; println!("zero"),
        1 =&gt; println!("one"),
        2 =&gt; println!("two"),
        3 =&gt; println!("three"),
    }
}
</pre>

<p>Podle očekávání skončí pokus o překlad tohoto zdrojového kódu s&nbsp;chybou:</p>

<pre>
   Compiling playground v0.0.1 (/playground)
error[E0004]: non-exhaustive patterns: `i32::MIN..=-1_i32` and `4_i32..=i32::MAX` not covered
 --> src/main.rs:4:11
  |
4 |     match x {
  |           ^ patterns `i32::MIN..=-1_i32` and `4_i32..=i32::MAX` not covered
  |
  = note: the matched value is of type `i32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms
  |
8 ~         3 => println!("three")
9 ~         i32::MIN..=-1_i32 | 4_i32..=i32::MAX => todo!(),
  |

For more information about this error, try `rustc --explain E0004`.
error: could not compile `playground` due to previous error
</pre>

<p>Podobně jako tomu bylo o konstrukce <strong>if-else</strong> či u programového bloku <strong>{}</strong>, je i konstrukce <strong>match</strong> považována za <i>výraz</i>, nikoli za <i>příkaz</i>. To znamená, že <strong>match</strong> je možné použít v&nbsp;nějakém výpočtu, uvnitř jiného výrazu atd. V&nbsp;dalším příkladu je deklarována funkce nazvaná <strong>classify</strong>, které se předá celočíselná hodnota a funkce vrátí konstantní řetězec, který tuto hodnotu popisuje (podezřelému zápisu &amp;'static str prosím prozatím věřte, popíšeme si ho později, protože řetězce jsou poměrně komplikované téma). Tato funkce obsahuje ve svém bloku jediný výraz a tím je <strong>match</strong> (proto ostatně za složenou závorkou není středník):</p>

<pre>
fn classify(x:i32) -&gt; &amp;'static str {
    match x {
        0 =&gt; "zero",
        1 =&gt; "one",
        2 =&gt; "two",
        3 =&gt; "three",
        _ =&gt; "something else",
    }
}
&nbsp;
fn main() {
    for x in 0..10 {
        println!("{}:{}", x, classify(x))
    }
}
</pre>

<p>Po překladu a spuštění dostaneme na standardním výstupu tyto zprávy:</p>

<pre>
0:zero
1:one
2:two
3:three
4:something else
5:something else
6:something else
7:something else
8:something else
9:something else
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
sudo dnf install wget yum-utils make gcc openssl-devel bzip2-devel libffi-devel zlib-devel
</pre>

<pre>
wget https://www.python.org/ftp/python/3.10.2/Python-3.10.2.tgz 
</pre>
<pre>
tar xzf Python-3.10.2.tgz 
</pre>

<pre>
cd Python-3.10.2 
sudo ./configure --with-system-ffi --with-computed-gotos --enable-loadable-sqlite-extensions
</pre>

<pre>
sudo make -j ${nproc}
sudo make altinstall
</pre>

<pre>
$ python3.10
&nbsp;
Python 3.10.2 (main, May 20 2022, 04:51:23) [GCC 11.3.1 20220421 (Red Hat 11.3.1-2)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Python 3.10.0<br />
<a href="https://www.python.org/downloads/release/python-3100/">https://www.python.org/downloads/release/python-3100/</a>
</li>

<li>PEP 634 – Structural Pattern Matching: Specification<br />
<a href="https://peps.python.org/pep-0634/">https://peps.python.org/pep-0634/</a>
</li>

<li>PEP 635 – Structural Pattern Matching: Motivation and Rationale<br />
<a href="https://peps.python.org/pep-0635/">https://peps.python.org/pep-0635/</a>
</li>

<li>PEP 636 – Structural Pattern Matching: Tutorial<br />
<a href="https://peps.python.org/pep-0636/">https://peps.python.org/pep-0636/</a>
</li>

<li>PEP 622 – Structural Pattern Matching<br />
<a href="https://peps.python.org/pep-0622/">https://peps.python.org/pep-0622/</a>
</li>

<li>Python 3.10 se strukturálním pattern matchingem<br />
<a href="https://www.root.cz/zpravicky/python-3-10-se-strukturalnim-pattern-matchingem/">https://www.root.cz/zpravicky/python-3-10-se-strukturalnim-pattern-matchingem/</a>
</li>

<li>Coconut: funkcionální jazyk s pattern matchingem kompatibilní s Pythonem<br />
<a href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/</a>
</li>

<li>How to Install Python 3.10 on CentOS/RHEL 8 & Fedora 35/34<br />
<a href="https://tecadmin.net/how-to-install-python-3-10-on-centos-rhel-8-fedora/">https://tecadmin.net/how-to-install-python-3-10-on-centos-rhel-8-fedora/</a>
</li>

<li>Pattern matching functions in Clojure?<br />
<a href="https://stackoverflow.com/questions/8596980/pattern-matching-functions-in-clojure">https://stackoverflow.com/questions/8596980/pattern-matching-functions-in-clojure</a>
</li>

<li>Clojure core.match<br />
<a href="https://github.com/clojure/core.match">https://github.com/clojure/core.match</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

