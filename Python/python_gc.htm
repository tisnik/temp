<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Sledování správy paměti v Pythonu s využitím nástroje objgraph</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Sledování správy paměti v Pythonu s využitím nástroje objgraph</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Sledování správy paměti v&nbsp;Pythonu s&nbsp;využitím nástroje objgraph</a></p>
<p><a href="#k02">*** 2. Proměnné v&nbsp;Pythonu: jména versus hodnoty</a></p>
<p><a href="#k03">*** 3. Reference na hodnoty</a></p>
<p><a href="#k04">*** 4. Ukázka zjištění referencí na hodnoty</a></p>
<p><a href="#k05">*** 5. Automatická správa paměti v&nbsp;Pythonu</a></p>
<p><a href="#k06">*** 6. Správa paměti založená na počítání referencí</a></p>
<p><a href="#k07">*** 7. Sledovací algoritmus a rozdělení hodnot do generací</a></p>
<p><a href="#k08">*** 8. Cache pro často používané hodnoty</a></p>
<p><a href="#k09">*** 9. &bdquo;Interning&ldquo; řetězců</a></p>
<p><a href="#k10">*** 10. Prealokace paměti pro prvky seznamů a slovníků</a></p>
<p><a href="#k11">*** 11. Uvolňování paměti při mazání prvků</a></p>
<p><a href="#k12">*** 12. Nástroje objgraph</a></p>
<p><a href="#k13">*** 13. Instalace nástroje objgraph</a></p>
<p><a href="#k14">*** 14. Zobrazení grafu referencí</a></p>
<p><a href="#k15">*** 15. Cykly v&nbsp;grafu</a></p>
<p><a href="#k16">*** 16. Grafy se zpětným zjištěním referencí</a></p>
<p><a href="#k17">*** 17. Zjištění počtu objektů v&nbsp;paměti (podle typu)</a></p>
<p><a href="#k18">*** 18. Sledování nově vytvořených hodnot (podle typu)</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Sledování správy paměti v&nbsp;Pythonu s&nbsp;využitím nástroje objgraph</h2>

pozn cpython

proměnné a hodnoty v C a podobně koncipovaných jazycích
int x = 42;
hodnota proměnné je uložena v paměti na místě vybraném překladačem a známém již v době překladu. překladač tedy ví, jak k hodnotě přistupovat
(registry, zásobník atd.)
čtení a zápis proměnné - bez dalších "skrytých" operací
typ - opět známý překladači

v Pythonu je tomu ovšem jinak, protože se zde používá koncept
jméno-reference-objekt. Jméno reprezentuje skutečně jméno
nějakého objektu uloženého v paměti.
Reference představuje jméno nebo kontejner odkazující na jiný objekt.
A konečně objekt. Jde o datovou strukturu uloženou v operační paměti (konkrétně na haldě), která kromě své hodnoty a typu obsahuje i počet referencí, které na něj odkazují. Toto je velký a navíc i koncepční
rozdíl oproti jazykům typu C, které do paměti ukládají pouze hodnotu.
Typ není zapotřebí (zná ho překladač z kódu) a počet referencí není
nutný protože C nemá automatickou správu paměti.

Příklad:
x = 6502
y = x

x ->
y -> 

type: integer
refcount: 2
value: 6502

Jména vs hodnoty
jména nemají přiřazený typ
hodnoty nemají rozsah platnosti (scope)
lokální proměnná = jméno je navázáno na rozsah fukce nebo metody, nelze
ho přímo použít jinde
ovšem to neplatí pro hodnotu



bash-4.4$ python3
Python 3.6.6 (default, Jul 19 2018, 16:29:00) 
[GCC 7.3.1 20180303 (Red Hat 7.3.1-5)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys
>>> x = 6502
>>> sys.getrefcount(x)
2
>>> y = x
>>> sys.getrefcount(x)
3
>>> z = y
>>> sys.getrefcount(x)
4
>>> z = 0
>>> sys.getrefcount(x)
3
>>> del y
>>> sys.getrefcount(x)
2

>>> y = x
>>> id(x)
139646852357712
>>> id(y)
139646852357712
>>> x is y
True
>>> sys.getsizeof(x)
28

>>> x=6502
>>> y=6502
>>> x is y
False
>>> sys.getrefcount(x)
2
>>> sys.getrefcount(y)
2

Cache s často používanými objekty

>>> x=1
>>> y=1
>>> x is y
True
>>> sys.getrefcount(x)
898
>>> sys.getrefcount(y)
898

interning strings
vlastne tabulka s retezci, minimalne vsechny retezce primo zapsne v kodu
attribut trid i objketu


list preallocation
append bez realloc  - nekdy
shrink az u <1/2 alokovaneho prsotoru

memory_profiler

dvě skupiny objektů v pythonu
- jednoduché objekty, čísla, řetězce atd.
- kontejnery, tedy seznamy, slovníky a třídy (i ty definované uživatelem)

del nemaže objekt. pouze sníží počet referencí o jedničku a odstraní jméno, které na objekt odkazuje

tatkéž při opuštění funkce, ve které objekt vznikl (a nevrátili jsme jeho referenci například pomocí return).

co pro globální objekty - jejich refcount nikdy neklesne na nulu pokud se explicitně nevymažou. Proto není vhodné na globální úrovni používat velké objekty (což platí i pro třídy).

Python Names and Values
https://nedbatchelder.com/text/names1.html

finalizery!!!
weak_ref

id

kontejnery v linked listu
cycle detektor je pusteny jednou za cas

v Pythonu se používají dva typy GC
reference counting
tracing

refcounting
jednoduchy
okamzite uvolneni pameti

- nutno uchovavat dalsi atribut
- kazde prirazeni modifikuje minimalne jeden refcount
- neni thread safe
- nelze detekovat cyklické reference

tracing = generational
tri generace



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
$ <strong>pip install objgraph</strong>
&nbsp;
Collecting objgraph
  Downloading https://files.pythonhosted.org/packages/a9/79/9f47706447b9ba0003c0680da4fed1d502adf410e1d953b4d1a5d3486640/objgraph-3.5.0-py2.py3-none-any.whl
Collecting graphviz
  Downloading https://files.pythonhosted.org/packages/64/72/f4f4205db2a58e7a49e8190c0b49e9669d7ecadf6385b5bcdcf910354a6d/graphviz-0.15-py2.py3-none-any.whl
Installing collected packages: graphviz, objgraph
Successfully installed graphviz-0.15 objgraph-3.5.0
</pre>

<pre>
$ <strong>python3</strong>
&nbsp;
Python 3.8.6 (default, Sep 25 2020, 00:00:00) 
[GCC 10.2.1 20200723 (Red Hat 10.2.1-1)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import objgraph
&gt;&gt;&gt; help(objgraph)
</pre>

<pre>
Help on module objgraph:
&nbsp;
NAME
    objgraph - Tools for drawing Python object reference graphs with graphviz.
&nbsp;
DESCRIPTION
    You can find documentation online at https://mg.pov.lt/objgraph/
&nbsp;
    Copyright (c) 2008-2017 Marius Gedminas &lt;marius@pov.lt&gt; and contributors
&nbsp;
    Released under the MIT licence.
&nbsp;
FUNCTIONS
    at(addr)
        Return an object at a given memory address.
&nbsp;  
        The reverse of id(obj):
&nbsp;
            &gt;&gt;&gt; at(id(obj)) is obj
            True
&nbsp;
        Note that this function does not work on objects that are not tracked by
        the GC (e.g. ints or strings).
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>


<pre>
Help on function <strong>show_backrefs</strong> in module objgraph:

show_backrefs(objs, max_depth=3, extra_ignore=(), filter=None, too_many=10, highlight=None, filename=None, extra_info=None, refcounts=False, shortnames=True, output=None, extra_node_attrs=None)
    Generate an object reference graph ending at ``objs``.
    
    The graph will show you what objects refer to ``objs``, directly and
    indirectly.
    
    ``objs`` can be a single object, or it can be a list of objects.  If
    unsure, wrap the single object in a new list.
    
    ``filename`` if specified, can be the name of a .dot or a image
    file, whose extension indicates the desired output format; note
    that output to a specific format is entirely handled by GraphViz:
    if the desired format is not supported, you just get the .dot
    file.  If ``filename`` and ``output`` are not specified, ``show_backrefs``
    will try to display the graph inline (if you're using IPython), otherwise
    it'll try to produce a .dot file and spawn a viewer (xdot).  If xdot is
    not available, ``show_backrefs`` will convert the .dot file to a
    .png and print its name.
    
    ``output`` if specified, the GraphViz output will be written to this
</pre>

<pre>
Help on function <strong>show_growth</strong> in module objgraph:
&nbsp;
show_growth(limit=10, peak_stats=None, shortnames=True, file=None, filter=None)
    Show the increase in peak object counts since last call.
    
    if ``peak_stats`` is None, peak object counts will recorded in
    func `growth`, and your can record the counts by yourself with set
    ``peak_stats`` to a dictionary.
    
    The caveats documented in :func:`growth` apply.
    
    Example:
    
        &gt;&gt;&gt; show_growth()
        wrapper_descriptor       970       +14
        tuple                  12282       +10
        dict                    1922        +7
        ...
    
    .. versionadded:: 1.5
    
    .. versionchanged:: 1.8
       New parameter: ``shortnames``.
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. Prealokace paměti pro prvky seznamů a slovníků</h2>

<pre>
import sys
&nbsp;
l = []
&nbsp;
for i in range(31):
    print(len(l), sys.getsizeof(l))
    l.append(i)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Uvolňování paměti při mazání prvků</h2>

<pre>
import sys
&nbsp;
l = []
&nbsp;
for i in range(31):
    l.append(i)
&nbsp;
for i in range(31):
    print(len(l), sys.getsizeof(l))
    del l[-1]
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zobrazení grafu referencí</h2>

<pre>
Help on function <strong>show_refs</strong> in module objgraph:
&nbsp;
show_refs(objs, max_depth=3, extra_ignore=(), filter=None, too_many=10, highlight=None, filename=None, extra_info=None, refcounts=False, shortnames=True, output=None, extra_node_attrs=None)
    Generate an object reference graph starting at ``objs``.
&nbsp;
    The graph will show you what objects are reachable from ``objs``, directly
    and indirectly.
&nbsp;
    ``objs`` can be a single object, or it can be a list of objects.  If
    unsure, wrap the single object in a new list.
&nbsp;
    ``filename`` if specified, can be the name of a .dot or a image
    file, whose extension indicates the desired output format; note
    that output to a specific format is entirely handled by GraphViz:
    if the desired format is not supported, you just get the .dot
    file.  If ``filename`` and ``output`` is not specified, ``show_refs`` will
    try to display the graph inline (if you're using IPython), otherwise it'll
    try to produce a .dot file and spawn a viewer (xdot).  If xdot is
    not available, ``show_refs`` will convert the .dot file to a
    .png and print its name.
&nbsp;
    ``output`` if specified, the GraphViz output will be written to this
</pre>

<pre>
<i>"""Grafické zobrazení referencí."""</i>
&nbsp;
import objgraph
&nbsp;
x = "Foo"
y = x
z = y
&nbsp;
<i># zobrazení referencí vedoucích až na řetězec "Foo"</i>
objgraph.show_refs(z, filename='objgraph1.png')
</pre>

<pre>
<i>"""Grafické zobrazení referencí."""</i>
&nbsp;
import objgraph
&nbsp;
x = "Foo"
y = [x, "bar"]
&nbsp;
<i># zobrazení referencí ze seznamu y</i>
objgraph.show_refs(y, filename='objgraph2.png')
</pre>

<pre>
<i>"""Grafické zobrazení referencí."""</i>
&nbsp;
import objgraph
&nbsp;
x = "Foo"
y = [x, "bar"]
&nbsp;
<i># zobrazení referencí na dva řetězce uložené v seznamu</i>
objgraph.show_refs([y], filename='objgraph3.png')
</pre>

<pre>
<i>"""Grafické zobrazení referencí."""</i>
&nbsp;
import objgraph
&nbsp;
x = "Foo"
y = [x, "bar", [x], (x, x), {"x":x}]
&nbsp;
<i># reference u složitějších datových struktur</i>
objgraph.show_refs([x, y], filename='objgraph4.png')
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Cykly v&nbsp;grafu</h2>

<pre>
<i>"""Grafické zobrazení referencí."""</i>
&nbsp;
import objgraph
&nbsp;
x = {}
y = {}
&nbsp;
<i># prázdné slovníky</i>
objgraph.show_refs([x, y], filename='objgraph5A.png')
&nbsp;
x["1"] = y
&nbsp;
<i># jedna reference</i>
objgraph.show_refs([x, y], filename='objgraph5B.png')
&nbsp;
y["2"] = x
&nbsp;
<i># cyklická reference</i>
objgraph.show_refs([x, y], filename='objgraph5C.png')
&nbsp;
x["a"] = 10
x["b"] = True
x["c"] = False
x["d"] = None
&nbsp;
y["a"] = False
y["b"] = True
y["c"] = False
y["d"] = None
&nbsp;
<i># přidání dalších referencí</i>
objgraph.show_refs([x, y], filename='objgraph5D.png')
</pre>

<pre>
<i>"""Grafické zobrazení referencí."""</i>
&nbsp;
import objgraph
&nbsp;
x = {}
y = {}
z = {}
&nbsp;
<i># cyklické reference N:N</i>
x["->x"] = x
x["->y"] = y
x["->z"] = z
&nbsp;
y["->x"] = x
y["->y"] = y
y["->z"] = z
&nbsp;
z["->x"] = x
z["->y"] = y
z["->z"] = z
&nbsp;
<i># graf s cyklickými referencemi</i>
objgraph.show_refs([x, y, z], filename='objgraph6.png')
</pre>

<pre>
<i>"""Grafické zobrazení referencí."""</i>
&nbsp;
import objgraph
&nbsp;
class A():
    def __init__(self, other):
        self.other = other
&nbsp;
<i># tři objekty, které na sebe navzájem ukazují</i>
x = A(None)
y = A(x)
z = A(y)
x.other=z
&nbsp;
<i># cyklické reference mezi objekty</i>
objgraph.show_refs([x, y, z], filename='objgraph7.png')
</pre>

<pre>
<i>"""Grafické zobrazení referencí."""</i>
&nbsp;
import objgraph
&nbsp;
a = {}
b = {}
c = {}
d = {}
e = {}
f = {}
&nbsp;
a["next"] = b
b["next"] = c
c["next"] = d
d["next"] = e
e["next"] = f
f["next"] = a
&nbsp;
<i># cyklické reference mezi objekty</i>
objgraph.show_refs([a, b, c, d, e, f], filename='objgraph8.png')
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. Zjištění počtu objektů v&nbsp;paměti (podle typu)</h2>

<p></p>

<pre>
<i>"""Zjištění počtu objektů v paměti."""</i>

import objgraph
import queue

x = {}
y = {}

objgraph.show_growth()
print()

x["1"] = y

objgraph.show_growth()
print()

y["2"] = x

objgraph.show_growth()
print()

x = Exception()
y = queue.Queue()
z = queue.LifoQueue()

objgraph.show_growth()
print()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Sledování nově vytvořených hodnot (podle typu)</h2>

<p></p>

<pre>
<i>"""Zjištění konstrukce objektů v paměti."""</i>

import objgraph

x = {}
y = {}

objgraph.get_new_ids()
print()

x["1"] = y

objgraph.get_new_ids()
print()

y["2"] = x

objgraph.get_new_ids()
print()
</pre>

<pre>
</pre>

<p></p>

<pre>
<i>"""Zjištění konstrukce objektů v paměti."""</i>

import objgraph
import queue

objgraph.get_new_ids()


def foo():
    x = Exception()
    y = queue.Queue()
    z = queue.LifoQueue()
    objgraph.get_new_ids()


foo()
objgraph.get_new_ids()
</pre>

<pre>
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
Python 3 a nejnovější stabilní verzi knihovny <i>Objgraph</i> byly uloženy do
Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>gc01.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc01.py</a></td></tr>
<tr><td> 2</td><td>gc02.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc02.py</a></td></tr>
<tr><td> 3</td><td>gc03.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc03.py</a></td></tr>
<tr><td> 4</td><td>gc04.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc04.py</a></td></tr>
<tr><td> 5</td><td>gc05.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc05.py</a></td></tr>
<tr><td> 6</td><td>gc06.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc06.py</a></td></tr>
<tr><td> 7</td><td>gc07.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc07.py</a></td></tr>
<tr><td> 8</td><td>gc08.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc08.py</a></td></tr>
<tr><td> 9</td><td>gc09.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc09.py</a></td></tr>
<tr><td>10</td><td>gc10.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc10.py</a></td></tr>
<tr><td>11</td><td>gc11.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc11.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc11.py</a></td></tr>
<tr><td>12</td><td>gc12.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc12.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc12.py</a></td></tr>
<tr><td>13</td><td>gc13.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc13.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc13.py</a></td></tr>
<tr><td>14</td><td>gc14.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc14.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc14.py</a></td></tr>
<tr><td>15</td><td>gc15_references.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc15_references.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/gc15_references.py</a></td></tr>
<tr><td>16</td><td>get_new_ids1.py</td><td>sledování nově vytvořených hodnot (podle typu), základní použití</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/get_new_ids1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/get_new_ids1.py</a></td></tr>
<tr><td>17</td><td>get_new_ids2.py</td><td>sledování nově vytvořených hodnot (podle typu), příklad s&nbsp;instancemi tříd</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/get_new_ids2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/get_new_ids2.py</a></td></tr>
<tr><td>18</td><td>show_growth.py</td><td>zjištění počtu objektů v&nbsp;paměti (podle typu), příklad s&nbsp;instancemi tříd</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/show_growth.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/show_growth.py</a></td></tr>
<tr><td>19</td><td>objgraph1.py</td><td>grafické zobrazení referencí, </td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph1.py</a></td></tr>
<tr><td>20</td><td>objgraph2.py</td><td>grafické zobrazení referencí, </td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph2.py</a></td></tr>
<tr><td>21</td><td>objgraph3.py</td><td>grafické zobrazení referencí, </td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph3.py</a></td></tr>
<tr><td>22</td><td>objgraph4.py</td><td>grafické zobrazení referencí, </td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph4.py</a></td></tr>
<tr><td>23</td><td>objgraph5.py</td><td>grafické zobrazení referencí, </td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph5.py</a></td></tr>
<tr><td>24</td><td>objgraph6.py</td><td>grafické zobrazení referencí, </td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph6.py</a></td></tr>
<tr><td>25</td><td>objgraph7.py</td><td>grafické zobrazení referencí, </td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph7.py</a></td></tr>
<tr><td>26</td><td>objgraph8.py</td><td>grafické zobrazení referencí, </td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph8.py</a></td></tr>
<tr><td>27</td><td>objgraph9.py</td><td>grafické zobrazení referencí, </td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph9.py</a></td></tr>
<tr><td>28</td><td>objgraph1_backrefs.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph1_backrefs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph1_backrefs.py</a></td></tr>
<tr><td>29</td><td>objgraph2_backrefs.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph2_backrefs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph2_backrefs.py</a></td></tr>
<tr><td>30</td><td>objgraph3_backrefs.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph3_backrefs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph3_backrefs.py</a></td></tr>
<tr><td>31</td><td>objgraph4_backrefs.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph4_backrefs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph4_backrefs.py</a></td></tr>
<tr><td>32</td><td>objgraph5_backrefs.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph5_backrefs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph5_backrefs.py</a></td></tr>
<tr><td>33</td><td>objgraph6_backrefs.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph6_backrefs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph6_backrefs.py</a></td></tr>
<tr><td>34</td><td>objgraph7_backrefs.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph7_backrefs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph7_backrefs.py</a></td></tr>
<tr><td>35</td><td>objgraph8_backrefs.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph8_backrefs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph8_backrefs.py</a></td></tr>
<tr><td>36</td><td>objgraph9_backrefs.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph9_backrefs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/objgraph9_backrefs.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>37</td><td>lsize1.py</td><td>změna alokované paměti pro seznam při postupném přidávání prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/lsize1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/lsize1.py</a></td></tr>
<tr><td>38</td><td>lsize2.py</td><td>změna alokované paměti pro seznam při postupném odstraňování prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/lsize2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/gc_objgraph/lsize2.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>objgraph 3.5.0 na PyPi<br />
<a href="https://pypi.org/project/objgraph/">https://pypi.org/project/objgraph/</a>
</li>

<li>Python Garbage Collection: What It Is and How It Works<br />
<a href="https://stackify.com/python-garbage-collection/">https://stackify.com/python-garbage-collection/</a>
</li>

<li>The Garbage Collector<br />
<a href="https://pythoninternal.wordpress.com/2014/08/04/the-garbage-collector/">https://pythoninternal.wordpress.com/2014/08/04/the-garbage-collector/</a>
</li>

<li>Nástroje pro tvorbu grafů a diagramů z příkazové řádky<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-grafu-a-diagramu-z-prikazove-radky/">https://www.root.cz/clanky/nastroje-pro-tvorbu-grafu-a-diagramu-z-prikazove-radky/</a>
</li>

<li>Graphviz - Graph Visualization Software<br />
<a href="https://www.graphviz.org/">https://www.graphviz.org/</a>
</li>

<li>Manuálová stránka nástroje Graphviz<br />
<a href="https://www.root.cz/man/7/graphviz/">https://www.root.cz/man/7/graphviz/</a>
</li>

<li>Manuálová stránka nástroje dot<br />
<a href="https://www.root.cz/man/1/dot/">https://www.root.cz/man/1/dot/</a>
</li>

<li>Graphviz na Wikipedii<br />
<a href="https://en.wikipedia.org/wiki/Graphviz">https://en.wikipedia.org/wiki/Graphviz</a>
</li>

<li>Reference counting<br />
<a href="https://en.wikipedia.org/wiki/Reference_counting">https://en.wikipedia.org/wiki/Reference_counting</a>
</li>

<li>Tracing garbage collection<br />
<a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection">https://en.wikipedia.org/wiki/Tracing_garbage_collection</a>
</li>

<li>Generational GC (ephemeral GC)<br />
<a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection#Generational_GC_(ephemeral_GC)">https://en.wikipedia.org/wiki/Tracing_garbage_collection#Generational_GC_(ephemeral_GC)</a>
</li>

<li>Graphviz pro Python<br />
<a href="https://graphviz.readthedocs.io/en/stable/examples.html">https://graphviz.readthedocs.io/en/stable/examples.html</a>
</li>

<li>Memory Management in Python<br />
<a href="https://www.slideshare.net/VijayKumarBagavathSi/memory-management-in-python">https://www.slideshare.net/VijayKumarBagavathSi/memory-management-in-python</a>
</li>

<li>Memory Management In Python The Basics<br />
<a href="https://www.slideshare.net/nnja/memory-management-in-python-the-basics">https://www.slideshare.net/nnja/memory-management-in-python-the-basics</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>
