<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Volání subrutin naprogramovaných v assembleru z jazyka Python</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Volání subrutin naprogramovaných v assembleru z jazyka Python</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na stránkách Roota jsme se již několikrát setkali s propojením Pythonu s nativními knihovnami naprogramovanými (například) v jazyku C. Dnes si ukážeme jeden z alternativních způsobů, kterým lze z Pythonu volat podprogramy (subrutiny, funkce) naprogramované v assembleru.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Volání nativního kódu z&nbsp;jazyka Python</a></p>
<p><a href="#k02">2. Nejsme omezeni pouze na jazyk C</a></p>
<p><a href="#k03">3. Volání subrutin naprogramovaných v&nbsp;assembleru z&nbsp;Pythonu</a></p>
<p><a href="#k04">4. Vlastní implementace dynamicky načítaných subrutin naprogramovaných v&nbsp;assembleru</a></p>
<p><a href="#k05">5. Subrutina vracející celé číslo</a></p>
<p><a href="#k06">6. Překlad subrutiny Netwide Assemblerem</a></p>
<p><a href="#k07">7. První varianta: přímý zápis strojového kódu do vyhrazené paměťové oblasti</a></p>
<p><a href="#k08">8. Nastavení korektních příznaků paměťové oblasti</a></p>
<p><a href="#k09">9. Načtení strojového kódu z&nbsp;binárního souboru</a></p>
<p><a href="#k10">10. Subrutina akceptující jeden celočíselný parametr</a></p>
<p><a href="#k11">11. Volání subrutiny s&nbsp;předáním parametru</a></p>
<p><a href="#k12">12. Rozdíly mezi datovými typy Pythonu a assembleru</a></p>
<p><a href="#k13">13. Podpora 64bitových celočíselných hodnot</a></p>
<p><a href="#k14">14. Subrutina akceptující dva celočíselné parametry</a></p>
<p><a href="#k15">15. Volání subrutiny s&nbsp;předáním parametrů</a></p>
<p><a href="#k16">16. Způsob předání většího množství parametrů: ABI</a></p>
<p><a href="#k17">17. Trik na závěr: strojový kód zkombinovaný se skriptem v&nbsp;Pythonu v&nbsp;jediném souboru</a></p>
<p><a href="#k18">18. Realizace konverze kontrolního výpisu do strojového kódu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Volání nativního kódu z&nbsp;jazyka Python</h2>

<p>Na stránkách Roota, konkrétně v&nbsp;článcích [<a
href=https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-cffi/"">1</a>]
[<a
href="https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-cffi-2/">2</a>]
a [<a
href="https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-cffi-3/">3</a>],
jsme se již poměrně podrobně zabývali problematikou propojení vysokoúrovňového
programovacího jazyka <a href="https://www.root.cz/n/python/">Python</a>
s&nbsp;nativními knihovnami naprogramovanými například v&nbsp;jazyku C (ovšem
může se jednat i o <a
href="https://www.root.cz/clanky/programovaci-jazyk-rust-rozhrani-mezi-rustem-a-pythonem/">Rust</a>,
C++ a pokud si dáme pozor, tak i o jazyk <a
href="https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes/">Go</a>).</p>

<p>Poměrně jednoduchá je situace, kdy se z&nbsp;Pythonu pouze volají nativní
funkce, kterým se předávají již naalokované objekty (například řetězce). Pro
tento účel jsme v&nbsp;uvedených článcích využili především knihovnu
<i>cffi</i> (viz též <a
href="https://cffi.readthedocs.io/en/latest/overview.html">Overview</a>).
Taktéž jsme si ovšem v&nbsp;článku <a
href="https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-ctypes/">Propojení
Pythonu s nativními knihovnami s využitím balíčku ctypes</a> popsali a ukázali
i základy &bdquo;konkurenční&ldquo; knihovny <i>ctypes</i>.</p>

<p>Základní postup přitom zůstává stále stejný. Zdrojový kód napsaný
v&nbsp;nějakém překládaném (kompilovaném) jazyku C (C++, Rustu, Go, ...) je
nejprve přeložen do nativní dynamické knihovny, tedy konkrétně do souboru
s&nbsp;koncovkou &bdquo;.so&ldquo; na Linuxu a &bdquo;.dll&ldquo;
v&nbsp;systému Microsoft Windows. Aplikace psaná v&nbsp;Pythonu tuto dynamickou
knihovnu načte a přes balíček <i>cffi</i> nebo <i>ctypes</i> umožní volání
funkcí naprogramovaných v&nbsp;C/C++ atd. Zpočátku se může zdát, že se jedná o
bezproblémové řešení, ovšem v&nbsp;praxi musíme vyřešit především dva problémy:
vlastnictví předávaných hodnot (tedy která strana alokuje paměť a která ji může
dealokovat &ndash; navíc chceme zamezit dvojí dealokaci) a taktéž korektní
předání hodnot různých typů. První problém musí vyřešit programátor, ovšem
druhý problém může &ndash; i když pouze částečně &ndash; řešit i balíček
realizující volání nativních funkcí z&nbsp;Pythonu. A právě zde nalezneme
největší rozdíly mezi <i>ctypes</i>, <i>cffi</i> i dalšími balíčky určenými pro
stejný účel. V&nbsp;tomto ohledu jsou možnosti <i>ctypes</i> dosti omezené,
ovšem jedná se o standardní balíček, který navíc může pro některé účely plně
vyhovovat.</p>

<p><div class="rs-tip-major">Poznámka: nejvíce bezbolestné propojení zajistíme
tak, že se o alokace a (automatické) dealokace paměti bude starat interpret
Pythonu. Pokud bude jak pythonní kód, tak i kód psaný v&nbsp;jazyce C, alokovat
paměť svými prostředky bude výsledek poměrně špatně odladitelný (na druhou
stranu například knihovna Numpy ukazuje, že i tento problém lze uspokojivě
vyřešit; zde se však pracuje jen s&nbsp;minimem &bdquo;sdílených&ldquo;
struktur).</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Nejsme omezeni pouze na jazyk C</h2>

<p>Názvy <i>ctypes</i> a vlastně i <i>cffi</i> evokují programovací jazyk C.
Ovšem jak již bylo napsáno výše, je možné nativní část vytvořit (naprogramovat)
i v&nbsp;jiných jazycích; pouze se v&nbsp;takovém případě dříve či později
můžeme setkat s&nbsp;obtížemi, které v&nbsp;jazyku C nenastávají (práce
s&nbsp;objekty, správce paměti v&nbsp;nativní knihovně atd.). Propojení
programovacího jazyka Python s&nbsp;jazykem C (popř.&nbsp;s&nbsp;Rustem nebo
jazykem Zig) přináší zajímavé možnosti. V&nbsp;první řadě to umožňuje relativně
snadné volání funkcí ze systémových knihoven, ale i dalších funkcí dostupných
formou dynamicky sdílených knihoven. Díky tomu lze spojit snadnost tvorby
aplikací v&nbsp;Pythonu (vysokoúrovňový jazyk s&nbsp;relativně velkou mírou
abstrakce) s&nbsp;optimalizovaným nativním kódem. Dobrým příkladem takového
propojení je již výše zmíněný projekt <i>Numpy</i>, v&nbsp;němž se výpočetně
náročné části realizují nativními funkcemi. A příkladem propojení Pythonu
s&nbsp;Rustem může být projekt <i>Polars</i>, se kterým jsme se na stránkách
Roota taktéž již setkali v&nbsp;článcích <a
href="https://www.root.cz/clanky/knihovna-polars-vykonnejsi-alternativa-ke-knihovne-pandas/">Knihovna
Polars: výkonnější alternativa ke knihovně Pandas</a> a <a
href="https://www.root.cz/clanky/knihovna-polars-vykonnejsi-alternativa-ke-knihovne-pandas-datove-ramce/">Knihovna
Polars: výkonnější alternativa ke knihovně Pandas (datové rámce).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Volání subrutin naprogramovaných v&nbsp;assembleru z&nbsp;Pythonu</h2>

<p>Prozatím jsme se zmiňovali o volání funkcí naprogramovaných ve vyšších
programovacích jazycích, ovšem ve skutečnosti je pochopitelně možné přímo
z&nbsp;Pythonu volat i podprogramy (subrutiny), které jsou naprogramovány
v&nbsp;assembleru. V&nbsp;tomto případě je dokonce možné využít několik
postupů. Pravděpodobně se nejčastěji setkáme s&nbsp;překladem subrutin do
souborů s&nbsp;takzvanými <i>objekty</i> (což ovšem nijak nesouvisí
s&nbsp;objektově orientovaným programováním). Tyto soubory mají koncovku
<strong>.o</strong> popř.&nbsp;se můžeme setkat i s&nbsp;koncovkou
<strong>.obj</strong>. Následně se linkerem sestaví dynamická knihovna
s&nbsp;těmito objekty; přičemž koncovka souborů s&nbsp;dynamickými knihovnami
je na unixových systémech <strong>.so</strong> a na Windows pak
<strong>.dll</strong>. Na straně Pythonu se takové knihovny načtou již výše
zmíněnými knihovnami <i>cffi</i> nebo <i>ctypes</i>, což nám ve výsledku umožní
volat assemblerovské subrutiny.</p>

<p><div class="rs-tip-major">Poznámka: sice se snažím používat termín
<i>subrutina</i> (tedy podprogram), ale pro jednoduchost můžeme subrutiny
považovat za běžné funkce. Rozdíly bývají spíše sémantické.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vlastní implementace dynamicky načítaných subrutin naprogramovaných v&nbsp;assembleru</h2>

<p><a href="#k03">Výše zmíněný postup</a> je sice zcela standardní a korektní,
ovšem v&nbsp;případě, že je zapotřebí volat jen několik subrutin (zjištění
CPUID či realizace vybraných SIMD intrinsic atd.), je možné postupovat i
odlišným způsobem a implementovat si tak vlastní dynamicky načítané subrutiny
ve strojovém kódu. Předností tohoto alternativního postupu je mj.&nbsp;i to, že
se naučíme používat některé nízkoúrovňovější operace přímo v&nbsp;jazyce
Python, což jsou znalosti, které se mohou hodit i v&nbsp;jiných případech.</p>

<p>Postup je následující:</p>

<ol>
<li>Alokace paměťového bufferu pomocí <i>mmap</i>. Na rozdíl od běžných paměťových bufferů je zde možné nastavit příznak <strong>PROT_EXEC</strong>, takže strojový kód uložený do bufferu bude spustitelný</li>
<li>Naplnění bufferu strojovým kódem získaným překladem původního kódu assemblerem</li>
<li>Deklarace &bdquo;hlavičky&ldquo; nativní funkce (subrutiny) přes knihovnu <strong>ctypes</strong>. Zde se určí počet a typ parametrů funkce i typ návratové hodnoty (včetně <strong>void</strong>).</li>
<li>Získání adresy funkce/subrutiny, tj.&nbsp;vlastně adresy paměťového bufferu (subrutina je uložena na jeho začátku)</li>
<li>Získání reference na funkci tak, aby mohla být volána z&nbsp;Pythonu</li>
<li>...nyní je možné naši subrutinu volat naprosto stejným způsobem, jako jinou Pythonovskou funkci...</li>
<li>Uvolnění ukazatele na funkci &ndash; nelze se spolehnout na automatickou správu paměti!</li>
</ol>

<p>Implementací předchozích kroků se tedy naučíme některé vlastnosti balíčků
<strong>mmap</strong> a <strong>ctypes</strong>.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Subrutina vracející celé číslo</h2>

<p>Praktickou část dnešního článku začneme triviální subrutinou. Tato subrutina
nezpracovává žádné parametry a vrací konstantní hodnotu 42. Přitom záleží jen
na nás, zda tuto hodnotu budeme interpretovat jako osmibitové, šestnáctibitové
či 32bitové číslo. ABI Linuxu pro platformu x86-64 předepisuje, že návratová
hodnota subrutiny je uložena buď v&nbsp;registru <strong>RAX</strong> nebo ve
dvojici registrů <strong>RDX:RAX</strong>. My si prozatím vystačíme
s&nbsp;32bitovou dolní polovinou registru <strong>RAX</strong>, která se
v&nbsp;assembleru jmenuje <strong>EAX</strong>.</p>

<p>V&nbsp;syntaxi NASMu bude zdrojový kód se subrutinou vypadat takto:</p>

<pre>
[bits 64]
&nbsp;
        mov eax, 42
        ret
</pre>

<p><div class="rs-tip-major">Poznámka: nemusíme ani použít návěští ani
definovat speciální symboly. A dokonce ani není nutné určit, do které sekce
(segmentu) se má překládaný kód ukládat.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Překlad subrutiny Netwide Assemblerem</h2>

<p>Překlad <a href="#k05">výše uvedeného kódu</a> provedeme příkazem:</p>

<pre>
nasm -f bin -o 42.bin -l 42.lst 42.asm
</pre>

<p>Výsledkem překladu bude v&nbsp;první řadě binární soubor pojmenovaný
<strong>42.bin</strong>, jehož délka musí být přesně šest bajtů a který
obsahuje pouze instrukce přeložené do strojového kódu &ndash; žádná další
metadata. A soubor se jménem <strong>42.lst</strong> obsahuje výpis
(<i>listing</i>) provedený assemblerem, z&nbsp;něhož si můžeme ověřit způsob
překladu:</p>

<pre>
     1                                  [bits 64]
     2                                  
     3 00000000 B82A000000                      mov eax, 42
     4 00000005 C3                              ret
</pre>

<p>První sloupec ve výpisu obsahuje číslo řádku (to ovšem nemusí nutně
odpovídat zdrojovému kódu, pokud se expandují makra), druhý sloupec obsahuje
adresu resp.&nbsp;offset a třetí sloupec pak hodnoty bajtů, do kterých je
instrukce zakódována (tedy vlastní strojový kód).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. První varianta: přímý zápis strojového kódu do vyhrazené paměťové oblasti</h2>

<p>Nyní známe přesnou sekvenci šesti bajtů se strojovým kódem dvojice
instrukcí, které je nutné zavolat. Tuto sekvenci bajtů lze přímo zapsat do
paměťového bufferu:</p>

<pre>
with mmap.mmap(-1, mmap.PAGESIZE) as buffer:
    <i># zapis strojoveho kodu do bufferu</i>
    buffer.write(
        b'\xB8\x2A\x00\x00\x00'
        b'\xC3'
    )
</pre>

<p>Dále budeme postupovat tak, jak bylo naznačeno <a href="#k04">ve čtvrté
kapitole</a>:</p>

<ol>
<li>Deklarace typů parametrů a typu návratové hodnoty nativní funkce</li>
<li>Získání adresy se strojovým kódem (oněch šesti bajtů)</li>
<li>Převod na referenci na běžnou Pythonovskou funkci (z&nbsp;pohledu programátora i interpretru)</li>
<li>Zavolání této funkce a výpis návratové hodnoty</li>
</ol>

<p>Celý skript bude vypadat takto:</p>

<pre>
import ctypes
import mmap
&nbsp;
<i># konstrukce bufferu</i>
with mmap.mmap(-1, mmap.PAGESIZE) as buffer:
    <i># zapis strojoveho kodu do bufferu</i>
    buffer.write(
        b'\xB8\x2A\x00\x00\x00'
        b'\xC3'
    )
&nbsp;
    <i># deklarace typu nativni funkce</i>
    function_type = ctypes.CFUNCTYPE(ctypes.c_int)
&nbsp;
    <i># ziskani adresy strojoveho kodu</i>
    function_pointer = ctypes.c_void_p.from_buffer(buffer)
&nbsp;
    <i># reference na volatelnou funkci</i>
    function_42 = function_type(ctypes.addressof(function_pointer))
&nbsp;
    <i># zavolani funkce a vypis vysledku</i>
    result = function_42()
    print(result)
&nbsp;
    <i># pred uzavrenim bufferu je nutne odstranit ukazatele</i>
    del function_pointer
</pre>

<p>Ovšem v&nbsp;případě, že se pokusíte o spuštění tohoto demonstračního
příkladu, dojde k&nbsp;pádu procesu a popř.&nbsp;(v&nbsp;závislosti na
nastavení operačního systému) k&nbsp;segfaultu:</p>

<pre>
Segmentation fault (core dumped)
</pre>

<p>Jak tento problém opravit si řekneme v&nbsp;navazující kapitole.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Nastavení korektních příznaků paměťové oblasti</h2>

<p>Aby bylo možné naši subrutinu, tj.&nbsp;sekvenci instrukcí ve strojovém
kódu, skutečně uložit do bufferu a následně spustit, musíme korektně nastavit
příznakové bity paměťové oblasti, které určují, jaké operace s&nbsp;ní lze
provádět. V&nbsp;našem konkrétním případě potřebujeme podporu pro zápis a
spuštění, což jsou příznaky <strong>mmap.PROT_WRITE</strong> a
<strong>mmap.PROT_EXEC</strong>. Povšimněte si, že není vyžadována podpora pro
operaci čtení &ndash; a skutečně, ve skriptu není žádná část kódu, která by
strojový kód četla, protože se přímo spouští:</p>

<pre>
with mmap.mmap(-1, mmap.PAGESIZE, prot=mmap.PROT_WRITE | mmap.PROT_EXEC) as buffer:
    ...
    ...
    ...
</pre>

<p>Celý skript bude vypadat následovně:</p>

<pre>
import ctypes
import mmap
&nbsp;
<i># konstrukce bufferu</i>
with mmap.mmap(-1, mmap.PAGESIZE, prot=mmap.PROT_WRITE | mmap.PROT_EXEC) as buffer:
    <i># zapis strojoveho kodu do bufferu</i>
    buffer.write(
        b'\xB8\x2A\x00\x00\x00'
        b'\xC3'
    )
&nbsp;
    <i># deklarace typu nativni funkce</i>
    function_type = ctypes.CFUNCTYPE(ctypes.c_int)
&nbsp;
    <i># ziskani adresy strojoveho kodu</i>
    function_pointer = ctypes.c_void_p.from_buffer(buffer)
&nbsp;
    <i># reference na volatelnou funkci</i>
    function_42 = function_type(ctypes.addressof(function_pointer))
&nbsp;
    <i># zavolani funkce a vypis vysledku</i>
    result = function_42()
    print(result)
&nbsp;
    <i># pred uzavrenim bufferu je nutne odstranit ukazatele</i>
    del function_pointer
</pre>

<p>Můžeme si ho spustit:</p>

<pre>
42
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Načtení strojového kódu z&nbsp;binárního souboru</h2>

<p>Vzhledem k&nbsp;tomu, že jsme v&nbsp;rámci <a href="#k06">šesté kapitoly</a>
provedli překlad subrutiny do binárního souboru, který obsahuje pouze strojový
kód instrukcí a žádná další metadata, nic nám nebrání v&nbsp;tom obsah tohoto
souboru načíst a přímo zapsat do paměťového bufferu:</p>

<pre>
with mmap.mmap(-1, mmap.PAGESIZE, prot=mmap.PROT_WRITE | mmap.PROT_EXEC) as buffer:
    with open("42.bin", "rb") as fin:
        buffer.write(fin.read())
    ...
    ...
    ...
</pre>

<p><div class="rs-tip-major">Poznámka: dokonce je možné soubor přímo
<i>zrcadlit</i> do paměti pomocí <strong>mmap</strong>, ovšem u takto krátkých
souborů to není nutné.</div></p>

<p>Následně je již možné s&nbsp;bufferem pracovat tak, jak jsme si ukázali
v&nbsp;předchozích kapitolách, tj.&nbsp;získat ukazatel na funkci/subrutinu,
převést ji na Pythonovskou funkci a tu následně zavolat:</p>

<pre>
import ctypes
import mmap
&nbsp;
<i># konstrukce bufferu</i>
with mmap.mmap(-1, mmap.PAGESIZE, prot=mmap.PROT_WRITE | mmap.PROT_EXEC) as buffer:
    with open("42.bin", "rb") as fin:
        buffer.write(fin.read())
&nbsp;
    <i># deklarace typu nativni funkce</i>
    function_type = ctypes.CFUNCTYPE(ctypes.c_int)
&nbsp;
    <i># ziskani adresy strojoveho kodu</i>
    function_pointer = ctypes.c_void_p.from_buffer(buffer)
&nbsp;
    <i># reference na volatelnou funkci</i>
    function_42 = function_type(ctypes.addressof(function_pointer))
&nbsp;
    <i># zavolani funkce a vypis vysledku</i>
    result = function_42()
    print(result)
&nbsp;
    <i># pred uzavrenim bufferu je nutne odstranit ukazatele</i>
    del function_pointer
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Subrutina akceptující jeden celočíselný parametr</h2>

<p>Předchozí subrutina naprogramovaná v&nbsp;assembleru pouze vracela
celočíselnou konstantu. Reálné subrutiny ovšem většinou akceptují i nějaké
parametry. Pokud se jedná o celočíselné parametry a je jich maximálně šest,
jsou v&nbsp;případě Linuxu a platformy x86-64 takové parametry předávány
v&nbsp;registrech (viz též <a href="#k16">šestnáctou kapitolu</a>). Prozatím
ovšem potřebujeme vědět pouze to, že první parametr je předaný v&nbsp;registru
<strong>RDI</strong> a pokud se jedná o parametr 32bitový, pak &nbsp;registru
<strong>EDI</strong>. Snadno tedy vytvoříme subrutinu, která vynásobí předaný
parametr dvěma a vrátí výsledek. Násobení dvěma lze provést pouhým součtem a
výsledek se s&nbsp;tomto případě vrátí v&nbsp;registru <strong>EAX</strong>,
podobně jako u první subrutiny:</p>

<pre>
[bits 64]
&nbsp;
        mov eax, edi
        add eax, eax
        ret
</pre>

<p>Výsledkem překladu assemblerem bude v&nbsp;tomto případě binární soubor o
délce pouhých pěti bajtů. O tom se můžeme přesvědčit i z&nbsp;kontrolního
výpisu (<i>listingu</i>) vytvořeného assemblerem:</p>

<pre>
     1                                  [bits 64]
     2                                  
     3 00000000 89F8                            mov eax, edi
     4 00000002 01C0                            add eax, eax
     5 00000004 C3                              ret
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Volání subrutiny s&nbsp;předáním parametru</h2>

<p>Nyní musíme ve skriptu, který <a href="#k10">výše zmíněnou</a> subrutinu
bude volat, provést dvojici změn. V&nbsp;první řadě se změní deklarace typu
parametrů a návratové hodnoty nativní funkce. Musíme totiž specifikovat nejenom
typ návratové hodnoty, ale i typ (a počet) jejích parametrů. Rozdíl je
podtržen:</p>

<pre>
<i># deklarace typu nativni funkce</i>
function_type = ctypes.CFUNCTYPE(ctypes.c_int, <u>ctypes.c_int</u>)
</pre>

<p>Nyní tedy bude typ funkce znít: funkce s&nbsp;parametrem typu <i>int</i>
vracející taktéž hodnotu typu <i>int</i>.</p>

<p>A samozřejmě tento parametr musíme předat při volání funkce:</p>

<pre>
<i># zavolani funkce a vypis vysledku</i>
result = double(<u>10</u>)
print(result)
</pre>

<p>Upravený skript bude vypadat následovně:</p>

<pre>
import ctypes
import mmap
&nbsp;
<i># konstrukce bufferu</i>
with mmap.mmap(-1, mmap.PAGESIZE, prot=mmap.PROT_WRITE | mmap.PROT_EXEC) as buffer:
    with open("double.bin", "rb") as fin:
        buffer.write(fin.read())
&nbsp;
    <i># deklarace typu nativni funkce</i>
    function_type = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int)
&nbsp;
    <i># ziskani adresy strojoveho kodu</i>
    function_pointer = ctypes.c_void_p.from_buffer(buffer)
&nbsp;
    <i># reference na volatelnou funkci</i>
    double = function_type(ctypes.addressof(function_pointer))
&nbsp;
    <i># zavolani funkce a vypis vysledku</i>
    result = double(10)
    print(result)
&nbsp;
    <i># pred uzavrenim bufferu je nutne odstranit ukazatele</i>
    del function_pointer
</pre>

<p>Výsledek:</p>

<pre>
20
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Rozdíly mezi datovými typy Pythonu a assembleru</h2>

<p>V&nbsp;jazyce Python jsou celočíselné hodnoty představovány typem
<strong>int</strong>, který se však zcela odlišuje od céčkovského (nebo
assemblerovského) typu se stejným jménem. Zatímco v&nbsp;jazyku C je bitová
šířka typu <strong>int</strong> pro danou platformu/překladač konstantní
(například 32 bitů), v&nbsp;Pythonu je rozsah hodnot a tím pádem i bitová šířka
omezen jen velikostí paměti, i když se stále hlásí &bdquo;tato hodnota je typu
<strong>int</strong>&ldquo;:</p>

<pre>
&gt;&gt;&gt; x=42
&gt;&gt;&gt; type(x)
&lt;class 'int'&gt;
&nbsp;
&gt;&gt;&gt; x=42**42
&gt;&gt;&gt; x
&gt;&gt;&gt; type(x)
&lt;class 'int'&gt;
</pre>

<p>V&nbsp;praxi z&nbsp;tohoto důvodu dochází k&nbsp;přetečením hodnot parametrů
a/nebo výsledků funkce:</p>

<pre>
<i># zavolani funkce a vypis vysledku</i>
result = double(10000000000)
print(result)
</pre>

<p>I když bychom možná očekávali výpis hodnoty 20000000000, vypíše se ve
skutečnosti:</p>

<pre>
-1474836480
</pre>

<p>Je tomu tak z&nbsp;toho důvodu, že je naše subrutina omezena na 32bitový
vstup a 32bitový výstup.</p>

<p>Pro úplnost si uveďme, jak vypadá takto upravený skript:</p>

<pre>
import ctypes
import mmap
&nbsp;
<i># konstrukce bufferu</i>
with mmap.mmap(-1, mmap.PAGESIZE, prot=mmap.PROT_WRITE | mmap.PROT_EXEC) as buffer:
    with open("double.bin", "rb") as fin:
        buffer.write(fin.read())
&nbsp;
    <i># deklarace typu nativni funkce</i>
    function_type = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int)
&nbsp;
    <i># ziskani adresy strojoveho kodu</i>
    function_pointer = ctypes.c_void_p.from_buffer(buffer)
&nbsp;
    <i># reference na volatelnou funkci</i>
    double = function_type(ctypes.addressof(function_pointer))
&nbsp;
    <i># zavolani funkce a vypis vysledku</i>
    result = double(10000000000)
    print(result)
&nbsp;
    <i># pred uzavrenim bufferu je nutne odstranit ukazatele</i>
    del function_pointer
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Podpora 64bitových celočíselných hodnot</h2>

<p>Nic nám však nebrání v&nbsp;tom, abychom problém celočíselných hodnot
&bdquo;posunuli&ldquo; až k&nbsp;hodnotám přesahujícím hranici 2<sup>63</sup>
nebo 2<sup>64</sup>. Postačuje nám naši subrutinu upravit takovým způsobem, že
bude akceptovat 64bitovou hodnotu předanou v&nbsp;registru <strong>RDI</strong>
a vracet taktéž 64bitovou hodnotu v&nbsp;registru <strong>RAX</strong>:</p>

<pre>
[bits 64]
&nbsp;
        mov rax, rdi
        add rax, rax
        ret
</pre>

<p>Výsledek překladu si ověříme z&nbsp;kontrolního výpisu (listingu):</p>

<pre>
     1                                  [bits 64]
     2                                  
     3 00000000 4889F8                          mov rax, rdi
     4 00000003 4801C0                          add rax, rax
     5 00000006 C3                              ret
</pre>

<p><div class="rs-tip-major">Poznámka: první bajt s&nbsp;hodnotou 0x48 je
takzvaný <i>REX prefix</i>. Ten vždy začíná nibblem s&nbsp;hodnotou 4, za
kterým následuje nibble se specifikací, zda se vyžadují 64bitové operandy pro
čtení, zápis atd. U instrukcí s&nbsp;32bitovými registry tento prefix není
nutný a proto ho assembler negeneroval.</div></p>

<p>Musíme taktéž změnit typ návratové hodnoty funkce i typ jejího
parametru:</p>

<pre>
<i># deklarace typu nativni funkce</i>
function_type = ctypes.CFUNCTYPE(<u>ctypes.c_long</u>, <u>ctypes.c_long</u>)
</pre>

<p>Celý skript se změní jen nepatrně:</p>

<pre>
import ctypes
import mmap
&nbsp;
<i># konstrukce bufferu</i>
with mmap.mmap(-1, mmap.PAGESIZE, prot=mmap.PROT_WRITE | mmap.PROT_EXEC) as buffer:
    with open("double64.bin", "rb") as fin:
        buffer.write(fin.read())
&nbsp;
    <i># deklarace typu nativni funkce</i>
    function_type = ctypes.CFUNCTYPE(ctypes.c_long, ctypes.c_long)
&nbsp;
    <i># ziskani adresy strojoveho kodu</i>
    function_pointer = ctypes.c_void_p.from_buffer(buffer)
&nbsp;
    <i># reference na volatelnou funkci</i>
    double = function_type(ctypes.addressof(function_pointer))
&nbsp;
    <i># zavolani funkce a vypis vysledku</i>
    result = double(10000000000)
    print(result)
&nbsp;
    <i># pred uzavrenim bufferu je nutne odstranit ukazatele</i>
    del function_pointer
</pre>

<p>Výsledek výpočtu ovšem nyní bude korektní (pokud pochopitelně nepřekročíme
64bitový rozsah):</p>

<pre>
20000000000
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Subrutina akceptující dva celočíselné parametry</h2>

<p>Nyní si vyzkoušejme naprogramovat subrutinu zapsanou v&nbsp;assembleru,
která provede součet svých dvou celočíselných 32bitových parametrů. ABI Linuxu
na platformě x86-64 předepisuje, že první parametr je předáván v&nbsp;registru
<strong>RDI</strong> (což už známe) a druhý parametr v&nbsp;registru
<strong>RSI</strong>. Pro 32bitové hodnoty si ovšem vystačíme se spodními
polovinami těchto registrů, tj.&nbsp;s&nbsp;registry pojmenovanými
<strong>EDI</strong> a <strong>ESI</strong>. Výsledná hodnota se vrací
v&nbsp;registru <strong>RAX</strong> (resp.&nbsp;<strong>EAX</strong>), takže
realizace takové subrutiny v&nbsp;assembleru je triviální a opět se vůbec
nemusíme zabývat zásobníkovými rámci atd.:</p>

<pre>
[bits 64]
&nbsp;
        mov eax, edi
        add eax, esi
        ret
</pre>

<p>Překlad provedeme příkazem:</p>

<pre>
nasm -f bin -o add.bin -l add.lst add.asm
</pre>

<p>Výsledkem překladu by měl být soubor <strong>add.bin</strong> o délce pěti
bajtů a taktéž výpis (<i>listing</i>) s&nbsp;tímto obsahem:</p>

<pre>
     1                                  [bits 64]
     2                                  
     3 00000000 89F8                            mov eax, edi
     4 00000002 01F0                            add eax, esi
     5 00000004 C3                              ret
</pre>

<p><div class="rs-tip-major">Poznámka: nyní opět strojový kód nemusí obsahovat
<i>REX prefix</i>.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Volání subrutiny s&nbsp;předáním parametrů</h2>

<p>Skript, který bude volat subrutinu akceptující dva parametry, nepatrně
upravíme. Musíme specifikovat, že subrutina akceptuje dva parametry typu
<strong>int</strong> &ndash; viz podtržená část:</p>

<pre>
<i># deklarace typu nativni funkce</i>
function_type = ctypes.CFUNCTYPE(ctypes.c_int, <u>ctypes.c_int</u>, <u>ctypes.c_int</u>)
</pre>

<p>Dále již běžným způsobem získáme Pythonovskou referenci na funkci a při
jejím volání nesmíme zapomenou na předání obou parametrů:</p>

<pre>
<i># reference na volatelnou funkci</i>
add = function_type(ctypes.addressof(function_pointer))
&nbsp;
<i># zavolani funkce a vypis vysledku</i>
result = add(1, 2)
print(result)
</pre>

<p>Celý skript nyní bude vypadat takto:</p>

<pre>
import ctypes
import mmap
&nbsp;
<i># konstrukce bufferu</i>
with mmap.mmap(-1, mmap.PAGESIZE, prot=mmap.PROT_WRITE | mmap.PROT_EXEC) as buffer:
    with open("add.bin", "rb") as fin:
        buffer.write(fin.read())
&nbsp;
    <i># deklarace typu nativni funkce</i>
    function_type = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_int)
&nbsp;
    <i># ziskani adresy strojoveho kodu</i>
    function_pointer = ctypes.c_void_p.from_buffer(buffer)
&nbsp;
    <i># reference na volatelnou funkci</i>
    add = function_type(ctypes.addressof(function_pointer))
&nbsp;
    <i># zavolani funkce a vypis vysledku</i>
    result = add(1, 2)
    print(result)
&nbsp;
    <i># pred uzavrenim bufferu je nutne odstranit ukazatele</i>
    del function_pointer
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Způsob předání většího množství parametrů: ABI</h2>

<p>Prozatím jsme používali subrutiny, které neakceptovaly žádný parametr,
popř.&nbsp;akceptovaly jeden či dva celočíselné parametry (nebo ukazatele).
Tyto parametry se na platformě x86-64 předávají v&nbsp;pracovních registrech.
To platí pro subrutiny, u nichž počet parametrů nepřesahuje hodnotu 6. Pokud je
nutné předat větší množství parametrů, musí se tyto parametry předat přes
zásobník. Společné vlastnosti a rozdíly architektur i386 (System V call) a
x86-64 (System V x86-64) jsou shrnuty v&nbsp;následující tabulce:</p>

<table>
<tr><th>&nbsp;</th><th>System V i386</th><th>System V x86_64</th></tr>
<tr><td>Návratová hodnota</td><td>EAX, EDX+EAX</td><td>RAX, RDX+RAX</td></tr>
<tr><td>Parametry 1-6</td><td>ne</td><td>RDI, RSI, RDX, RCX, R8, R9</td></tr>
<tr><td>Další parametry</td><td>zásobník (zprava doleva)</td><td>zásobník (zprava doleva)</td></tr>
<tr><td>Zarovnání zásobníku</td><td>&times; (bývá 4 bajty)</td><td>16 bajtů</td></tr>
<tr><td>Registry, jejichž hodnoty se mění</td><td>EAX, ECX, EDX</td><td>RAX, RDI, RSI, RDX, RCX, R8, R9, R10, R11</td></tr>
<tr><td>Registry, které mají zachovánu hodnotu</td><td>EBX, ESI, EDI, EBP, ESP</td><td>RBX, RSP, RBP, R12, R13, R14, R15</td></tr>
</table>

<p>To znamená, že v&nbsp;systému s&nbsp;architekturou x86_64 lze předat až šest
64bitových parametrů přes pracovní registry. Subrutina musí na konci obnovit
sedm pracovních registrů (prakticky ovšem v&nbsp;mnoha případech jen registr
<strong>RBX</strong>), zatímco dalších devět pracovních registrů může libovolně
použít pro své účely. Ovšem na druhou stranu si musí volající kód sám zajistit
například úschovu registru <strong>RAX</strong> před zavoláním subrutiny a jeho
obnovu po návratu &ndash; za předpokladu, že hodnotu tohoto registru bude nutné
použít.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Trik na závěr: strojový kód zkombinovaný se skriptem v&nbsp;Pythonu v&nbsp;jediném souboru</h2>

<p>Na závěr si ukážeme malý trik, který umožní načítat kódy subrutiny přeložené
assemblerem a popř.&nbsp;i umožní mít kód v&nbsp;assembleru zapsaný ve stejném
souboru, jako pythonní skript (i když se to hodí pro subrutiny, které se příliš
často nemění). V&nbsp;tomto případě nevyužijeme binární soubor produkovaný
assemblerem, ale kontrolní výpis (<i>listing</i>). Ten je dobře strukturovaný a
v&nbsp;případě Netwide Assembleru vypadá následovně:</p>

<pre>
     1                                  [bits 64]
     2                                  
     3 00000000 89F8                            mov eax, edi
     4 00000002 01F0                            add eax, esi
     5 00000004 C3                              ret
</pre>

<p>Tento soubor můžeme načíst (v&nbsp;textovém režimu) nebo ho přímo uložit do
řetězce:</p>

<pre>
asm_src = """
     1                                  [bits 64]
     2                                  
     3 00000000 89F8                            mov eax, edi
     4 00000002 01F0                            add eax, esi
     5 00000004 C3                              ret
"""
</pre>

<p>Díky jednoduché struktuře (nepoužíváme makra ani vkládané soubory) lze
parsing strojového kódu, tj.&nbsp;získání hodnot ze třetího sloupce, realizovat
na několika zdrojových řádcích:</p>

<pre>
<i># pole, ve kterém bude uložen strojový kód</i>
machine_code = bytearray()
&nbsp;
<i># zpracování po řádcích</i>
for line in asm_src.split("\n"):
    <i># část obsahující hexa kódy instrukcí</i>
    instruction_bytes = line[16:32]
    <i># převod hexa číslic na binární hodnoty</i>
    instruction_code = bytearray.fromhex(instruction_bytes)
    <i># připojení do bytového pole</i>
    machine_code.extend(instruction_code)
</pre>

<p>Konstrukce a naplnění bufferu je taktéž snadné:</p>

<pre>
<i># konstrukce bufferu</i>
with mmap.mmap(-1, mmap.PAGESIZE, prot=mmap.PROT_WRITE | mmap.PROT_EXEC) as buffer:
    <i># zapis strojoveho kodu do bufferu</i>
    buffer.write(machine_code)
    ...
    ...
    ...
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Realizace konverze kontrolního výpisu do strojového kódu</h2>

<p>Na závěr si ukažme, jak bude vypadat celý skript, v&nbsp;němž je uložen jak
strojový kód (ovšem stále v&nbsp;čitelné podobě společně s&nbsp;assemblerem),
tak i kód v&nbsp;Pythonu:</p>

<pre>
import ctypes
import mmap
&nbsp;
asm_src = """
     1                                  [bits 64]
     2                                  
     3 00000000 89F8                            mov eax, edi
     4 00000002 01F0                            add eax, esi
     5 00000004 C3                              ret
"""
&nbsp;
machine_code = bytearray()
for line in asm_src.split("\n"):
    instruction_bytes = line[16:32]
    instruction_code = bytearray.fromhex(instruction_bytes)
    machine_code.extend(instruction_code)
&nbsp;
&nbsp;
print(machine_code)
&nbsp;
<i># konstrukce bufferu</i>
with mmap.mmap(-1, mmap.PAGESIZE, prot=mmap.PROT_WRITE | mmap.PROT_EXEC) as buffer:
    <i># zapis strojoveho kodu do bufferu</i>
    buffer.write(machine_code)
&nbsp;
    <i># deklarace typu nativni funkce</i>
    function_type = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_int)
&nbsp;
    <i># ziskani adresy strojoveho kodu</i>
    function_pointer = ctypes.c_void_p.from_buffer(buffer)
&nbsp;
    <i># reference na volatelnou funkci</i>
    add = function_type(ctypes.addressof(function_pointer))
&nbsp;
    <i># zavolani funkce a vypis vysledku</i>
    result = add(123, 456)
    print(result)
&nbsp;
    <i># pred uzavrenim bufferu je nutne odstranit ukazatele</i>
    del function_pointer
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady popsané v&nbsp;předchozích kapitolách lze
nalézt v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>42.asm</td><td>subrutina bez parametrů vracející konstantu naprogramovaná v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.asm</a></td></tr>
<tr><td> 2</td><td>42.bin</td><td>instrukce subrutiny přeložené do strojového kódu bez dalších metainformací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.bin">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.bin</a></td></tr>
<tr><td> 3</td><td>42.lst</td><td>kontrolní výpis (<i>listing</i>) vytvořený assemblerem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.lst">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/42.lst</a></td></tr>
<tr><td> 4</td><td>asm1.py</td><td>spuštění strojového kódu z&nbsp;paměťového bufferu (nekorektní verze)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm1.py</a></td></tr>
<tr><td> 5</td><td>asm2.py</td><td>spuštění strojového kódu z&nbsp;paměťového bufferu (korektní verze)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm2.py</a></td></tr>
<tr><td> 6</td><td>asm3.py</td><td>spuštění strojového kódu načteného z&nbsp;(binárního) souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>double.asm</td><td>subrutina s&nbsp;jedním parametrem vracející 32bitovou hodnotu naprogramovaná v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.asm</a></td></tr>
<tr><td> 8</td><td>double.bin</td><td>instrukce subrutiny přeložené do strojového kódu bez dalších metainformací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.bin">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.bin</a></td></tr>
<tr><td> 9</td><td>double.lst</td><td>kontrolní výpis (<i>listing</i>) vytvořený assemblerem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.lst">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double.lst</a></td></tr>
<tr><td>10</td><td>asm4.py</td><td>spuštění strojového kódu s&nbsp;předáním parametru, varianta bez přetečení 32bitové hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm4.py</a></td></tr>
<tr><td>11</td><td>asm5.py</td><td>spuštění strojového kódu s&nbsp;předáním parametru, varianta s&nbsp;přetečením 32bitové hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>double64.asm</td><td>subrutina s&nbsp;jedním parametrem vracející 64bitovou hodnotu naprogramovaná v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.asm</a></td></tr>
<tr><td>13</td><td>double64.bin</td><td>instrukce subrutiny přeložené do strojového kódu bez dalších metainformací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.bin">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.bin</a></td></tr>
<tr><td>14</td><td>double64.lst</td><td>kontrolní výpis (<i>listing</i>) vytvořený assemblerem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.lst">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/double64.lst</a></td></tr>
<tr><td>15</td><td>asm6.py</td><td>spuštění strojového kódu s&nbsp;předáním parametru bez přetečení 64bitové hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>add.asm</td><td>subrutina se dvěma parametry vracející jejich součet naprogramovaná v&nbsp;assembleru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.asm">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.asm</a></td></tr>
<tr><td>17</td><td>add.bin</td><td>instrukce subrutiny přeložené do strojového kódu bez dalších metainformací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.bin">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.bin</a></td></tr>
<tr><td>18</td><td>add.lst</td><td>kontrolní výpis (<i>listing</i>) vytvořený assemblerem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.lst">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/add.lst</a></td></tr>
<tr><td>19</td><td>asm7.py</td><td>spuštění strojového kódu s&nbsp;předáním obou parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm7.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td>asm8.py</td><td>načtení strojového kódu přímo z&nbsp;kontrolního výpisu (listingu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/asm8.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>ctypes &ndash; A foreign function library for Python<br />
<a href="https://docs.python.org/3/library/ctypes.html">https://docs.python.org/3/library/ctypes.html</a>
</li>

<li>CFFI documentation<br />
<a href="https://cffi.readthedocs.io/en/latest/">https://cffi.readthedocs.io/en/latest/</a>
</li>

<li>cffi 1.15.1 na PyPi<br />
<a href="https://pypi.org/project/cffi/">https://pypi.org/project/cffi/</a>
</li>

<li>Python Bindings: Calling C or C++ From Python<br />
<a href="https://realpython.com/python-bindings-overview/">https://realpython.com/python-bindings-overview/</a>
</li>

<li>Interfacing with C/C++ Libraries<br />
<a href="https://docs.python-guide.org/scenarios/clibs/">https://docs.python-guide.org/scenarios/clibs/</a>
</li>

<li>Cython, pybind11, cffi – which tool should you choose?<br />
<a href="http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html">http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html</a>
</li>

<li>Python FFI with ctypes and cffi<br />
<a href="https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi">https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi</a>
</li>

<li>Using standard library headers with CFFI<br />
<a href="https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi">https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi</a>
</li>

<li>C Arrays<br />
<a href="https://www.programiz.com/c-programming/c-arrays">https://www.programiz.com/c-programming/c-arrays</a>
</li>

<li>C Arrays<br />
<a href="https://www.w3schools.com/c/c_arrays.php">https://www.w3schools.com/c/c_arrays.php</a>
</li>

<li>Array of Structures in C<br />
<a href="https://overiq.com/c-programming-101/array-of-structures-in-c/#google_vignette">https://overiq.com/c-programming-101/array-of-structures-in-c/#google_vignette</a>
</li>

<li>Keystone Engine na GitHubu<br />
<a href="https://github.com/keystone-engine/keystone">https://github.com/keystone-engine/keystone</a>
</li>

<li>Keystone: The Ultimate Assembler<br />
<a href="https://www.keystone-engine.org/">https://www.keystone-engine.org/</a>
</li>

<li>The Ultimate Disassembler<br />
<a href="http://www.capstone-engine.org/">http://www.capstone-engine.org/</a>
</li>

<li>Tutorial for Keystone<br />
<a href="https://www.keystone-engine.org/docs/tutorial.html">https://www.keystone-engine.org/docs/tutorial.html</a>
</li>

<li>Rozhraní pro Capstone na PyPi<br />
<a href="https://pypi.org/project/capstone/">https://pypi.org/project/capstone/</a>
</li>

<li>Rozhraní pro Keystone na PyPi<br />
<a href="https://pypi.org/project/keystone-engine/">https://pypi.org/project/keystone-engine/</a>
</li>

<li>KEYSTONE: Next Generation Assembler Framework<br />
<a href="https://www.keystone-engine.org/docs/BHUSA2016-keystone.pdf">https://www.keystone-engine.org/docs/BHUSA2016-keystone.pdf</a>
</li>

<li>AT&amp;T Syntax versus Intel Syntax<br />
<a href="http://web.mit.edu/rhel-doc/3/rhel-as-en-3/i386-syntax.html">http://web.mit.edu/rhel-doc/3/rhel-as-en-3/i386-syntax.html</a>
</li>

<li>AT&amp;T assembly syntax and IA-32 instructions<br />
<a href="https://gist.github.com/mishurov/6bcf04df329973c15044">https://gist.github.com/mishurov/6bcf04df329973c15044</a>
</li>

<li>ARM GCC Inline Assembler Cookbook<br />
<a href="http://www.ethernut.de/en/documents/arm-inline-asm.html">http://www.ethernut.de/en/documents/arm-inline-asm.html</a>
</li>

<li>Extended Asm - Assembler Instructions with C Expression Operands<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html">https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html</a>
</li>

<li>ARM inline asm secrets<br />
<a href="http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/">http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/</a>
</li>

<li>How to Use Inline Assembly Language in C Code<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C">https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C</a>
</li>

<li>GCC-Inline-Assembly-HOWTO<br />
<a href="http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html">http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html</a>
</li>

<li>A Brief Tutorial on GCC inline asm (x86 biased)<br />
<a href="http://www.osdever.net/tutorials/view/a-brief-tutorial-on-gcc-inline-asm">http://www.osdever.net/tutorials/view/a-brief-tutorial-on-gcc-inline-asm</a>
</li>

<li>GCC Inline ASM<br />
<a href="http://locklessinc.com/articles/gcc_asm/">http://locklessinc.com/articles/gcc_asm/</a>
</li>

<li>GNU Assembler Examples<br />
<a href="http://cs.lmu.edu/~ray/notes/gasexamples/">http://cs.lmu.edu/~ray/notes/gasexamples/</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>The GNU Assembler Tutorial<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html">http://tigcc.ticalc.org/doc/gnuasm.html</a>
</li>

<li>The GNU Assembler - macros<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html#SEC109">http://tigcc.ticalc.org/doc/gnuasm.html#SEC109</a>
</li>

<li>ARM subroutines &amp; program stack<br />
<a href="http://www.toves.org/books/armsub/">http://www.toves.org/books/armsub/</a>
</li>

<li>Generating Mixed Source and Assembly List using GCC<br />
<a href="http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/">http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/</a>
</li>

<li>Calling subroutines<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v&nbsp;assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Assembler pod Linuxem<br />
<a href="http://phoenix.inf.upol.cz/linux/prog/asm.html">http://phoenix.inf.upol.cz/linux/prog/asm.html</a>
</li>

<li>Online x86 / x64 Assembler and Disassembler<br />
<a href="https://defuse.ca/online-x86-assembler.htm#disassembly">https://defuse.ca/online-x86-assembler.htm#disassembly</a>
</li>

<li>Executing assembly code in memory using python modules ctypes and mmap<br />
<a href="https://stackoverflow.com/questions/58851655/executing-assembly-code-in-memory-using-python-modules-ctypes-and-mmap">https://stackoverflow.com/questions/58851655/executing-assembly-code-in-memory-using-python-modules-ctypes-and-mmap</a>
</li>

<li>mmap - Memory-mapped file support<br />
<a href="https://docs.python.org/3/library/mmap.html">https://docs.python.org/3/library/mmap.html</a>
</li>

<li>ctypes - A foreign function library for Python<br />
<a href="https://docs.python.org/3/library/ctypes.html#module-ctypes">https://docs.python.org/3/library/ctypes.html#module-ctypes</a>
</li>

<li>Calling Conventions<br />
<a href="https://wiki.osdev.org/Calling_Conventions">https://wiki.osdev.org/Calling_Conventions</a>
</li>

<li>Linux x64 Calling Convention: Stack Frame<br />
<a href="https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/linux-x64-calling-convention-stack-frame">https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/linux-x64-calling-convention-stack-frame</a>
</li>

<li>Netwide assembler<br />
<a href="https://www.nasm.us/">https://www.nasm.us/</a>
</li>

<li>The Netwide Assembler: NASM: output formats<br />
<a href="https://ece-research.unm.edu/jimp/310/nasm/nasmdoc6.html">https://ece-research.unm.edu/jimp/310/nasm/nasmdoc6.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

