<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na stránkách Roota jsme se již několikrát setkali s propojením Pythonu s nativními knihovnami naprogramovanými (například) v C.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p>Na stránkách Roota, konkrétně v&nbsp;článcích [<a
href=https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-cffi/"">1</a>]
[<a
href="https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-cffi-2/">2</a>]
a [<a
href="https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-cffi-3/">3</a>],
jsme se již zabývali problematikou propojení vysokoúrovňového programovacího
jazyka <a href="https://www.root.cz/n/python/">Python</a> s&nbsp;nativními
knihovnami naprogramovanými například v&nbsp;jazyku C (ovšem může se jednat i o
<a
href="https://www.root.cz/clanky/programovaci-jazyk-rust-rozhrani-mezi-rustem-a-pythonem/">Rust</a>,
C++ a pokud si dáme pozor, tak i <a
href="https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes/">Go</a>).
Poměrně jednoduchá je situace, kdy se pouze z&nbsp;Pythonu volají nativní
funkce, kterým se předávají již naalokované objekty. Pro tento účel jsme
v&nbsp;předchozích článcích využili především knihovnu <i>cffi</i> (viz též <a
href="https://cffi.readthedocs.io/en/latest/overview.html">Overview</a>). Dnes
si naproti tomu ukážeme použití standardního balíčku <i>ctypes</i> (viz též <a
href="https://docs.python.org/3/library/ctypes.html">dokumentaci</a>).</p>

<p>Základní postup přitom zůstává stále stejný. Zdrojový kód napsaný
v&nbsp;jazyku C (C++, Rustu, Go, ...) je nejprve přeložen do nativní dynamické
knihovny, tedy konkrétně do souboru s&nbsp;koncovkou &bdquo;.so&ldquo; na
Linuxu a &bdquo;.dll&ldquo; v&nbsp;systému Microsoft Windows. Aplikace psaná
v&nbsp;Pythonu tuto dynamickou knihovnu načte a přes balíček <i>ctypes</i>
umožní volání funkcí naprogramovaných v&nbsp;C/C++ atd. Zpočátku se může zdát,
že se jedná o bezproblémové řešení, ovšem v&nbsp;praxi musíme vyřešit především
dva problémy: vlastnictví předávaných hodnot (tedy která strana alokuje paměť a
která ji může dealokovat) a taktéž korektní předání hodnot různých typů. První
problém musí vyřešit programátor, ovšem druhý problém může &ndash; i když pouze
částečně &ndash; řešit i balíček realizující volání nativních funkcí
z&nbsp;Pythonu. A právě zde nalezneme největší rozdíly mezi <i>ctypes</i>,
<i>cffi</i> i dalšími balíčky určenými pro stejný účel. V&nbsp;tomto ohledu
jsou možnosti <i>ctypes</i> dosti omezené, ovšem jedná se o standardní balíček,
který navíc může pro některé účely plně vyhovovat.</p>

<p><div class="rs-tip-major">Poznámka: název <i>ctypes</i> a vlastně i
<i>cffi</i> evokuje jazyk C. Ovšem jak již bylo napsáno výše, lze nativní část
vytvořit i v&nbsp;jiných jazycích; pouze se v&nbsp;takovém případě dříve či
později setkáme s&nbsp;obtížemi, které v&nbsp;C nenastávají (práce
s&nbsp;objekty, správce paměti v&nbsp;nativní knihovně atd.).</div></p>
<p>Propojení programovacího jazyka Python s&nbsp;jazykem C (popř.&nbsp;s&nbsp;Rustem nebo jazykem Zig) přináší zajímavé možnosti.  V&nbsp;první řadě to umožňuje relativně snadné volání funkcí ze systémových knihoven, ale i dalších funkcí dostupných formou dynamicky sdílených knihoven.  Díky tomu lze spojit snadnost tvorby aplikací v&nbsp;Pythonu (vysokoúrovňový jazyk s&nbsp;relativně velkou mírou abstrakce) s&nbsp;optimalizovaným nativním kódem. Dobrým příkladem takového propojení je projekt <i>Numpy</i>, v&nbsp;němž se výpočetně náročné části realizují nativními funkcemi. A příkladem propojení Pythonu s&nbsp;Rustem může být projekt <i>Polars</i>, se kterým jsme se na stránkách Roota taktéž již setkali v&nbsp;článcích <a href="https://www.root.cz/clanky/knihovna-polars-vykonnejsi-alternativa-ke-knihovne-pandas/">Knihovna Polars: výkonnější alternativa ke knihovně Pandas</a> a <a href="https://www.root.cz/clanky/knihovna-polars-vykonnejsi-alternativa-ke-knihovne-pandas-datove-ramce/">Knihovna Polars: výkonnější alternativa ke knihovně Pandas (datové rámce)</a>.</p>

<p><div class="rs-tip-major">Poznámka: nejvíce bezbolestné propojení zajistíme
tak, že se o alokace a (automatické) dealokace paměti bude starat interpret
Pythonu. Pokud bude jak pythonní kód, tak i kód psaný v&nbsp;jazyce C, alokovat
paměť svými prostředky bude výsledek poměrně špatně odladitelný.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<table>
<tr><th> #<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td> 4</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td> 5</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td> 6</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td> 7</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td> 8</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td> 9</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/">https://github.com/tisnik/most-popular-python-libs/blob/master/assembly/</a></td></tr>
</table>

42.asm
42.bin
42.lst
add.asm
add.bin
add.lst
asm1.py
asm2.py
asm3.py
asm4.py
asm5.py
asm6.py
asm7.py
double.asm
double.bin
double.lst


<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>ctypes &ndash; A foreign function library for Python<br />
<a href="https://docs.python.org/3/library/ctypes.html">https://docs.python.org/3/library/ctypes.html</a>
</li>

<li>CFFI documentation<br />
<a href="https://cffi.readthedocs.io/en/latest/">https://cffi.readthedocs.io/en/latest/</a>
</li>

<li>cffi 1.15.1 na PyPi<br />
<a href="https://pypi.org/project/cffi/">https://pypi.org/project/cffi/</a>
</li>

<li>Python Bindings: Calling C or C++ From Python<br />
<a href="https://realpython.com/python-bindings-overview/">https://realpython.com/python-bindings-overview/</a>
</li>

<li>Interfacing with C/C++ Libraries<br />
<a href="https://docs.python-guide.org/scenarios/clibs/">https://docs.python-guide.org/scenarios/clibs/</a>
</li>

<li>Cython, pybind11, cffi – which tool should you choose?<br />
<a href="http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html">http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html</a>
</li>

<li>Python FFI with ctypes and cffi<br />
<a href="https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi">https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi</a>
</li>

<li>Using standard library headers with CFFI<br />
<a href="https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi">https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi</a>
</li>

<li>C Arrays<br />
<a href="https://www.programiz.com/c-programming/c-arrays">https://www.programiz.com/c-programming/c-arrays</a>
</li>

<li>C Arrays<br />
<a href="https://www.w3schools.com/c/c_arrays.php">https://www.w3schools.com/c/c_arrays.php</a>
</li>

<li>Array of Structures in C<br />
<a href="https://overiq.com/c-programming-101/array-of-structures-in-c/#google_vignette">https://overiq.com/c-programming-101/array-of-structures-in-c/#google_vignette</a>
</li>

<li>Keystone Engine na GitHubu<br />
<a href="https://github.com/keystone-engine/keystone">https://github.com/keystone-engine/keystone</a>
</li>

<li>Keystone: The Ultimate Assembler<br />
<a href="https://www.keystone-engine.org/">https://www.keystone-engine.org/</a>
</li>

<li>The Ultimate Disassembler<br />
<a href="http://www.capstone-engine.org/">http://www.capstone-engine.org/</a>
</li>

<li>Tutorial for Keystone<br />
<a href="https://www.keystone-engine.org/docs/tutorial.html">https://www.keystone-engine.org/docs/tutorial.html</a>
</li>

<li>Rozhraní pro Capstone na PyPi<br />
<a href="https://pypi.org/project/capstone/">https://pypi.org/project/capstone/</a>
</li>

<li>Rozhraní pro Keystone na PyPi<br />
<a href="https://pypi.org/project/keystone-engine/">https://pypi.org/project/keystone-engine/</a>
</li>

<li>KEYSTONE: Next Generation Assembler Framework<br />
<a href="https://www.keystone-engine.org/docs/BHUSA2016-keystone.pdf">https://www.keystone-engine.org/docs/BHUSA2016-keystone.pdf</a>
</li>

<li>AT&amp;T Syntax versus Intel Syntax<br />
<a href="http://web.mit.edu/rhel-doc/3/rhel-as-en-3/i386-syntax.html">http://web.mit.edu/rhel-doc/3/rhel-as-en-3/i386-syntax.html</a>
</li>

<li>AT&amp;T assembly syntax and IA-32 instructions<br />
<a href="https://gist.github.com/mishurov/6bcf04df329973c15044">https://gist.github.com/mishurov/6bcf04df329973c15044</a>
</li>

<li>ARM GCC Inline Assembler Cookbook<br />
<a href="http://www.ethernut.de/en/documents/arm-inline-asm.html">http://www.ethernut.de/en/documents/arm-inline-asm.html</a>
</li>

<li>Extended Asm - Assembler Instructions with C Expression Operands<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html">https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html</a>
</li>

<li>ARM inline asm secrets<br />
<a href="http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/">http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/</a>
</li>

<li>How to Use Inline Assembly Language in C Code<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C">https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C</a>
</li>

<li>GCC-Inline-Assembly-HOWTO<br />
<a href="http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html">http://ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html</a>
</li>

<li>A Brief Tutorial on GCC inline asm (x86 biased)<br />
<a href="http://www.osdever.net/tutorials/view/a-brief-tutorial-on-gcc-inline-asm">http://www.osdever.net/tutorials/view/a-brief-tutorial-on-gcc-inline-asm</a>
</li>

<li>GCC Inline ASM<br />
<a href="http://locklessinc.com/articles/gcc_asm/">http://locklessinc.com/articles/gcc_asm/</a>
</li>

<li>GNU Assembler Examples<br />
<a href="http://cs.lmu.edu/~ray/notes/gasexamples/">http://cs.lmu.edu/~ray/notes/gasexamples/</a>
</li>

<li>X86 Assembly/Arithmetic<br />
<a href="https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic">https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic</a>
</li>

<li>Art of Assembly - Arithmetic Instructions<br />
<a href="http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html">http://oopweb.com/Assembly/Documents/ArtOfAssembly/Volume/Chapter_6/CH06-2.html</a>
</li>

<li>The GNU Assembler Tutorial<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html">http://tigcc.ticalc.org/doc/gnuasm.html</a>
</li>

<li>The GNU Assembler - macros<br />
<a href="http://tigcc.ticalc.org/doc/gnuasm.html#SEC109">http://tigcc.ticalc.org/doc/gnuasm.html#SEC109</a>
</li>

<li>ARM subroutines &amp; program stack<br />
<a href="http://www.toves.org/books/armsub/">http://www.toves.org/books/armsub/</a>
</li>

<li>Generating Mixed Source and Assembly List using GCC<br />
<a href="http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/">http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/</a>
</li>

<li>Calling subroutines<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.kui0100a/armasm_cihcfigg.htm</a>
</li>

<li>Linux assemblers: A comparison of GAS and NASM<br />
<a href="http://www.ibm.com/developerworks/library/l-gas-nasm/index.html">http://www.ibm.com/developerworks/library/l-gas-nasm/index.html</a>
</li>

<li>Programovani v&nbsp;assembleru na OS Linux<br />
<a href="http://www.cs.vsb.cz/grygarek/asm/asmlinux.html">http://www.cs.vsb.cz/grygarek/asm/asmlinux.html</a>
</li>

<li>Is it worthwhile to learn x86 assembly language today?<br />
<a href="https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1">https://www.quora.com/Is-it-worthwhile-to-learn-x86-assembly-language-today?share=1</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Assembler pod Linuxem<br />
<a href="http://phoenix.inf.upol.cz/linux/prog/asm.html">http://phoenix.inf.upol.cz/linux/prog/asm.html</a>
</li>

<li>Online x86 / x64 Assembler and Disassembler<br />
<a href="https://defuse.ca/online-x86-assembler.htm#disassembly">https://defuse.ca/online-x86-assembler.htm#disassembly</a>
</li>

<li>Executing assembly code in memory using python modules ctypes and mmap<br />
<a href="https://stackoverflow.com/questions/58851655/executing-assembly-code-in-memory-using-python-modules-ctypes-and-mmap">https://stackoverflow.com/questions/58851655/executing-assembly-code-in-memory-using-python-modules-ctypes-and-mmap</a>
</li>

<li>mmap - Memory-mapped file support<br />
<a href="https://docs.python.org/3/library/mmap.html">https://docs.python.org/3/library/mmap.html</a>
</li>

<li>ctypes - A foreign function library for Python<br />
<a href="https://docs.python.org/3/library/ctypes.html#module-ctypes">https://docs.python.org/3/library/ctypes.html#module-ctypes</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

