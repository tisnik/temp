<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Malé ohlédnutí za historií Pythonu: Python 0.9.1 na moderním hardware</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Malé ohlédnutí za historií Pythonu: Python 0.9.1 na moderním hardware</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Malé ohlédnutí za historií Pythonu: Python 0.9.1 na moderním hardware</a></p>
<p><a href="#k02">*** 2. Předchůdce Pythonu &ndash; neúspěšný jazyk ABC</a></p>
<p><a href="#k03">*** 3. Od programovacího jazyka ABC k&nbsp;Pythonu</a></p>
<p><a href="#k04">*** 4. Odsazování v&nbsp;ABC a Pythonu</a></p>
<p><a href="#k05">*** 5. Příprava na překlad Pythonu 0.9.1</a></p>
<p><a href="#k06">*** 6. Úprava souboru <strong>Makefile</strong></a></p>
<p><a href="#k07">*** 7. Překlad interpretru Pythonu 0.9.1</a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Malé ohlédnutí za historií Pythonu: Python 0.9.1 na moderním hardware</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Předchůdce Pythonu &ndash; neúspěšný jazyk ABC</h2>

<p><i>&bdquo;I remembered all my experience and some of my frustration with
ABC. I decided to try to design a simple scripting language that possessed some
of ABC's better properties, but without its problems. So I started typing. I
created a simple virtual machine, a simple parser, and a simple runtime. I made
my own version of the various ABC parts that I liked. I created a basic syntax,
used indentation for statement grouping instead of curly braces or begin-end
blocks, and developed a small number of powerful data types: a hash table (or
dictionary, as we call it), a list, strings, and numbers.&ldquo;</i></p>

<p>Pro většinu čtenářů asi nebude příliš velkým překvapením konstatování, že autorem programovacího jazyka Python je <a href="https://gvanrossum.github.io/">Guido van Rossum</a>. Před popisem vývoje samotného Pythonu se však musíme nejprve zmínit o <a href="https://homepages.cwi.nl/~steven/abc/">programovacím jazyce ABC</a>, jehož vývoj začal již v&nbsp;polovině osmdesátých let minulého století v&nbsp;CWI. Pravě na vývoji tohoto jazyka pracoval mj.&nbsp;i Guido; tehdy na juniorské pozici a ve vývojovém týmu společně s&nbsp;Lambertem Meertensem, Leo Geurtsem a Stevenem Pembertonem. Cílem tohoto týmu bylo vytvořit programovací jazyk dobře použitelný i lidmi, kteří sice nejsou profesionálními programátory, ale aplikace potřebují vytvářet a nějakým způsobem udržovat (jednou z&nbsp;cílových skupin byli pochopitelně vědci).</p>

<p>Jen pro připomenutí dobových reálií &ndash; v&nbsp;polovině osmdesátých let minulého století došlo k&nbsp;obrovskému rozvoji v&nbsp;oblasti osmibitových domácích mikropočítačů i šestnáctibitových osobních mikropočítačů. A především domácím mikropočítačům kraloval jiný programovací jazyk určený pro širokou veřejnost a nikoli pro profesionály &ndash; <a href="https://www.root.cz/clanky/programovaci-jazyk-basic-na-osmibitovych-mikropocitacich/">BASIC</a>.  Jenže na rozdíl od (většinou) nestrukturovaného BASICu, který navíc nabízel jen základní datové typy (čísla, řetězce, jednorozměrná pole, matice) byl programovací jazyk ABC navržen odlišným, dnes bychom řekli, že mnohem modernějším způsobem (zdá se, že Meertens dokonce BASIC přímo nesnášel, jeho motto bylo &bdquo;Stamp out Basic!&ldquo;). Ostatně podívejme se na jednoduchý příklad programu, který získá všechna slova ze vstupního dokumentu. Můžeme zde vidět velkou podobnost s&nbsp;pozdějším Pythonem &ndash; odsazování je součástí syntaxe, používání dvojteček, programová smyčka typu for-each, použití operátoru not.in atd:</p>

<pre>
HOW TO RETURN words document:
   PUT {} IN collection
   FOR line IN document:
      FOR word IN split line:
         IF word not.in collection:
            INSERT word IN collection
   RETURN collection
</pre>

<p><div class="rs-tip-major">Poznámka: <strong>HOW TO RETURN</strong> definuje novou funkci, tj.&nbsp;jedná se o obdobu dnešního <strong>def</strong>.  Referenční příručka celého jazyka ABC je dostupná na stránce <a href="https://homepages.cwi.nl/~steven/abc/qr.html">https://homepages.cwi.nl/~steven/abc/qr.html</a>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Od programovacího jazyka ABC k&nbsp;Pythonu</h2>

<p>Ovšem ukázalo se, že svět IT nebyl na tento programovací jazyk připraven (někdo by řekl, že se jednalo o špatné načasování vstupu na trh). Na mikropočítačích s&nbsp;relativně malými systémovými zdroji nebylo možné potenciálu ABC využít (navíc mu konkuroval BASIC, o kterém vycházely desítky, možná i stovky knížek a který byl díky uložení v&nbsp;ROM logicky prvním jazykem většiny začátečníků) a na druhé straně výkonnostního spektra, tedy na počítačích s&nbsp;UNIXem, se již používaly odlišné skriptovací jazyky, například Tcl (1988) a Perl (1987); na strojích IBM se naproti tomu používal <a href="https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-xedit-a-programovaci-jazyk-rexx/#k06">jazyk Rexx</a> (1979), ze kterého se na Amize vyvinul <a href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-51-cast-dalsi-vyvojove-nastroje-dostupne-pro-mikropocitace-amiga/#k04">jazyk ARexx</a>. Nicméně i přes relativní neúspěch jazyka ABC nebyly základní myšlenky ztraceny, protože je později Guido van Rossum použil právě při implementaci první verze Pythonu, který z&nbsp;jazyka ABC v&nbsp;mnoha ohledech vycházel.</p>

<p>Prvotní verze Pythonu (před oficiální verzí 1.0) jsou vypsány v&nbsp;následující tabulce:</p>

<table>
<tr><th>Verze</th><th>Datum vydání</th></tr>
<tr><td>0.9.0</td><td>20. února 1991</td></tr>
<tr><td>0.9.1</td><td>konec února 1991</td></tr>
<tr><td>0.9.2</td><td>podzim 1991</td></tr>
<tr><td>0.9.4</td><td>24. prosince 1991</td></tr>
<tr><td>0.9.5</td><td>2. ledna 1992</td></tr>
<tr><td>0.9.6</td><td>6. dubna 1992</td></tr>
<tr><td>0.9.8</td><td>9. ledna 1993</td></tr>
<tr><td>0.9.9</td><td>29. července 1993</td></tr>
</table>



<p><a name="k04"></a></p>
<h2 id="k04">4. Odsazování v&nbsp;ABC a Pythonu</h2>

<p>Zkušenější programátoři, kteří se seznamují s&nbsp;programovacím jazykem Python, bývají překvapeni tím, že součástí syntaxe tohoto jazyka je i odsazení; navíc se na začátku bloků používá dvojtečka (naopak začátečníci, kteří jiný jazyk neznají, tento fakt většinou zcela přirozeně přijmou). Kde se vlastně tento neobvyklý zápis programů objevil? Ještě před samotným jazykem ABC bylo vytvořeno několik jeho předchůdců označovaných písmenem B a číslovkou (B0, B1, ...). A již v&nbsp;B0 se objevilo <i>povinné</i> odsazování, které zde mělo význam sdružení operací do bloků. Ovšem samotné bloky tehdy byly uvozeny klíčovými slovy <strong>BEGIN</strong> a <strong>END</strong>. Plánovalo se, že díky použití klíčových slov bude odsazování prováděno automaticky ve specializovaném programátorském textovém editoru.</p>

<p><div class="rs-tip-major">Poznámka: tato klíčová slova známe i z&nbsp;Pascalu nebo programovacího jazyka Lua. Ovšem v&nbsp;těchto jazycích není odsazování striktně vyžadováno, na rozdíl od jazyka B.</div></p>

<a href="https://www.root.cz/obrazek/368436/"><img src="https://i.iinfo.cz/images/238/tp03-6-prev.png" class="image-368436" alt="&#160;" width="370" height="219" /></a>
<p><i>Obrázek 2: Nepovinné, ovšem pochopitelně doporučené odsazování
v&nbsp;Pascalu, resp.&nbsp;zde konkrétně v&nbsp;Turbo Pascalu.</i></p>

<p>Ovšem poté si tvůrci jazyka B0 uvědomili, že vyžadovat odsazení a současně navíc i použití klíčových slov <strong>BEGIN</strong> a <strong>END</strong> je vlastně nadbytečné a proto v&nbsp;jazyce B1 (tedy ve druhé generaci jazyka B) již chybělo klíčové slovo <strong>BEGIN</strong>. Namísto <strong>END</strong> se používalo spojení <strong>END IF</strong>, <strong>END FOR</strong> atd. (to tedy znamená, že podmínky a smyčky automaticky vytvářely bloky, což je podle mého názoru dobrý způsob strukturování programů). A nakonec se v&nbsp;jazyce B2 programátoři &bdquo;museli&ldquo; zcela obejít bez zápisu začátků a konců bloků pomocí klíčových slov &ndash; vše bylo vyřešeno pouhým odsazením.</p>

<p><div class="rs-tip-major">Poznámka: odsazení pro specifikaci bloků se používalo i v&nbsp;jiných jazycích (Miranda atd.), ovšem jazyk B byl pravděpodobně prvním jazykem, kde k&nbsp;této implementaci došlo.</div></p>

<p>Dalším typickým prvkem jazyka B (a posléze ABC a Pythonu) je dvojtečka před začátkem bloku. Myšlenka použít dvojtečku vznikla v&nbsp;roce 1978, kdy Robert Dewar, Peter King, Jack Schwartz a náš starý známý Lambert Meertens navrhovali syntaxi jazyka B a porovnávali různě zápisy bubble sortu. Nakonec zavolali manželku Roberta Dewara a zeptali se jí, zda se jí navržená varianta líbí. Ta odpověděla, že má pocit, že se zápis &bdquo;FOR i ...&ldquo; vztahuje pouze k&nbsp;jednomu řádku a nikoli k&nbsp;celému bloku pod tímto řádkem. A právě na základě tohoto alfa testingu návrhu jazyka bylo rozhodnuto před začátkem bloku používat dvojtečku, což Pythonu vydrželo až do dneška.</p>

<p><div class="rs-tip-major">Poznámka: to vlastně znamená, že dvojtečka před začátkem bloku (namísto závorek či klíčových slov) není v&nbsp;žádném případě novým a neobvyklým vynálezem; je s&nbsp;námi v&nbsp;IT již 42 let.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Příprava na překlad Pythonu 0.9.1</h2>

<p></p>

<pre>
$ <strong>wget https://www.python.org/ftp/python/src/Python-0.9.1.tar.gz</strong>

Saving 'Python-0.9.1.tar.gz'
HTTP response 200  [https://www.python.org/ftp/python/src/Python-0.9.1.tar.gz]
Python-0.9.1.tar.gz  100% [=====================================================================================>]  378.07K    --.-KB/s
                          [Files: 1  Bytes: 378.07K [665.62KB/s] Redirects: 0  Todo: 0  Errors: 0                ]
</pre>

<pre>
$ tar xvfz Python-0.9.1.tar.gz 
&nbsp;
python-0.9.1/
python-0.9.1/demo/
python-0.9.1/demo/README
python-0.9.1/demo/scripts/
python-0.9.1/demo/scripts/findlinksto.py
python-0.9.1/demo/scripts/mkreal.py
...
...
...
python-0.9.1/src/To.do
python-0.9.1/src/token.h
python-0.9.1/src/tokenizer.c
python-0.9.1/src/tokenizer.h
python-0.9.1/src/traceback.c
python-0.9.1/src/traceback.h
python-0.9.1/src/tupleobject.c
python-0.9.1/src/tupleobject.h
python-0.9.1/src/typeobject.c
python-0.9.1/src/xxobject.c
</pre>

<pre>
$ cd python-0.9.1
</pre>




<p><a name="k06"></a></p>
<h2 id="k06">6. Úprava souboru <strong>Makefile</strong></h2>

<pre>
CFLAGS=-Wno-implicit-function-declaration -Wno-incompatible-pointer-types -Wno-implicit-int
</pre>

<pre>
python:                libpython.a $(OBJECTS) $(LIBDEPS) Makefile
        $(CC) $(CFLAGS) $(OBJECTS) $(LIBS) -o python
</pre>

<pre>
--- Makefile    2009-03-27 01:23:41.000000000 +0100
+++ /tmp/ramdisk/python-0.9.1-/src/Makefile     2025-10-18 17:33:35.054267113 +0200
@@ -56,6 +56,8 @@
 #RANLIB =      true    # For System V
 RANLIB =       ranlib  # For BSD
&nbsp; 
+CFLAGS=-Wno-implicit-function-declaration -Wno-incompatible-pointer-types -Wno-implicit-int
+
 # If your system doesn't have symbolic links, uncomment the following
 # line.
&nbsp;
@@ -380,8 +382,7 @@
 # ============
&nbsp;
 python:                libpython.a $(OBJECTS) $(LIBDEPS) Makefile
-       $(CC) $(CFLAGS) $(OBJECTS) $(LIBS) -o @python
-       mv @python python
+       $(CC) $(CFLAGS) $(OBJECTS) $(LIBS) -o python
&nbsp; 
 libpython.a:   $(LIBOBJECTS)
        -rm -f @lib
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Překlad interpretru Pythonu 0.9.1</h2>

<pre>
$ <strong>make</strong>
</pre>

<pre>
cc -Wno-implicit-function-declaration -Wno-incompatible-pointer-types -Wno-implicit-int   -c -o acceler.o acceler.c
In file included from pgenheaders.h:48,
                 from acceler.c:36:
malloc.h:59:13: warning: conflicting types for built-in function ‘malloc’; expected ‘void *(long unsigned int)’ [-Wbuiltin-declaration-mismatch]
   59 | extern ANY *malloc PROTO((unsigned int));
      |             ^~~~~~
malloc.h:1:1: note: ‘malloc’ is declared in header ‘&lt;stdlib.h&gt;’
  +++ |+#include &lt;stdlib.h&gt;
    1 | /***********************************************************
malloc.h:60:13: warning: conflicting types for built-in function ‘calloc’; expected ‘void *(long unsigned int,  long unsigned int)’ [-Wbuiltin-declaration-mismatch]
...
...
...
pythonmain.c: In function ‘fatal’:
pythonmain.c:349:8: warning: incompatible implicit declaration of built-in function ‘abort’ [-Wbuiltin-declaration-mismatch]
  349 |        abort();
      |        ^~~~~
pythonmain.c:349:8: note: include ‘&lt;stdlib.h&gt;’ or provide a declaration of ‘abort’
pythonmain.c: In function ‘goaway’:
pythonmain.c:385:8: warning: incompatible implicit declaration of built-in function ‘exit’ [-Wbuiltin-declaration-mismatch]
  385 |        exit(sts);
      |        ^~~~
pythonmain.c:385:8: note: include ‘&lt;stdlib.h&gt;’ or provide a declaration of ‘exit’
cc -c -Wno-implicit-function-declaration -Wno-incompatible-pointer-types -Wno-implicit-int      '-DPYTHONPATH=".:/usr/local/lib/python:/ufs/guido/lib/python:../lib"'  config.c
cc -Wno-implicit-function-declaration -Wno-incompatible-pointer-types -Wno-implicit-int pythonmain.o config.o libpython.a      -lm -o python
</pre>


<p><a name="k08"></a></p>
<h2 id="k08">8. Interpret Pythonu menší než 200kB?</h2>

<pre>
-rwxr-xr-x. 1 ptisnovs ptisnovs 185504 Oct 21 18:15 python
</pre>

<pre>
$ ./python --help
python: can't open file '--help'

$ ./python 
&gt;&gt;&gt; 1+2
3
&gt;&gt;&gt; 
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

static object *
int_mul(v, w)
       intobject *v;
       register object *w;
{
       register long a, b;
       double x;
       if (!is_intobject(w)) {
               err_badarg();
               return NULL;
       }
       a = v->ob_ival;
       b = ((intobject *)w) -> ob_ival;
       x = (double)a * (double)b;
       if (x > 0x7fffffff || x < (double) (long) 0x80000000)
               return err_ovf();
       return newintobject(a * b);
}


<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Python history: from None to AI<br />
<a href="https://python3.info/about/history.html">https://python3.info/about/history.html</a>
</li>

<li>The History of the Python Language: A Journey Through Time<br />
<a href="https://coderivers.org/blog/history-of-python-language/">https://coderivers.org/blog/history-of-python-language/</a>
</li>

<li>Python - History and Versions<br />
<a href="https://www.tutorialspoint.com/python/python_history.htm">https://www.tutorialspoint.com/python/python_history.htm</a>
</li>

<li>The Evolution of Python: A Detailed History and Major Achievements<br />
<a href="https://www.backendmesh.com/the-evolution-of-python/">https://www.backendmesh.com/the-evolution-of-python/</a>
</li>

<li>History of Python<br />
<a href="https://en.wikipedia.org/wiki/History_of_Python">https://en.wikipedia.org/wiki/History_of_Python</a>
</li>

<li>History of Python<br />
<a href="https://www.geeksforgeeks.org/python/history-of-python/">https://www.geeksforgeeks.org/python/history-of-python/</a>
</li>

<li>Old Python releases<br />
<a href="https://www.python.org/download/releases/">https://www.python.org/download/releases/</a>
</li>

<li>Interactive: The Top Programming Languages 2016 (starší data, pěkný způsob filtrace atd.)<br />
<a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2016">https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2016</a>
</li>

<li>Generational list of programming languages<br />
<a href="https://en.wikipedia.org/wiki/Generational_list_of_programming_languages">https://en.wikipedia.org/wiki/Generational_list_of_programming_languages</a>
</li>

<li>Most Popular Programming Languages on Stack Overflow Bar Chart Race<br />
<a href="https://www.youtube.com/watch?v=cKzP61Gjf00">https://www.youtube.com/watch?v=cKzP61Gjf00</a>
</li>

<li>Další kulaté výročí v IT: dvacet let existence Pythonu 2<br />
<a href="https://www.root.cz/clanky/dalsi-kulate-vyroci-v-it-dvacet-let-existence-pythonu-2/">https://www.root.cz/clanky/dalsi-kulate-vyroci-v-it-dvacet-let-existence-pythonu-2/</a>
</li>

<li>Zdrojové kódy starých verzí Pythonu<br />
<a href="https://legacy.python.org/download/releases/src/">https://legacy.python.org/download/releases/src/</a>
</li>

<li>Python 1.5.2<br />
<a href="https://www.python.org/download/releases/1.5/">https://www.python.org/download/releases/1.5/</a>
</li>

<li>Python 1.6.1<br />
<a href="https://www.python.org/download/releases/1.6.1/">https://www.python.org/download/releases/1.6.1/</a>
</li>

<li>Python 3.14.0<br />
<a href="https://test.python.org/downloads/release/python-3140/">https://test.python.org/downloads/release/python-3140/</a>
</li>

<li>What’s new in Python 3.14 (official)<br />
<a href="https://docs.python.org/3/whatsnew/3.14.html">https://docs.python.org/3/whatsnew/3.14.html</a>
</li>

<li>What’s New In Python 3.13 (official)<br />
<a href="https://docs.python.org/3/whatsnew/3.13.html">https://docs.python.org/3/whatsnew/3.13.html</a>
</li>

<li>What’s New In Python 3.12 (official)<br />
<a href="https://docs.python.org/3/whatsnew/3.12.html">https://docs.python.org/3/whatsnew/3.12.html</a>
</li>

<li>What’s New In Python 3.11 (official)<br />
<a href="https://docs.python.org/3/whatsnew/3.11.html">https://docs.python.org/3/whatsnew/3.11.html</a>
</li>

<li>What’s New In Python 3.12<br />
<a href="https://dev.to/mahiuddindev/python-312-4n43">https://dev.to/mahiuddindev/python-312-4n43</a></li>

<li>Python: The Documentary | An origin story<br />
<a href="https://www.youtube.com/watch?v=GfH4QL4VqJ0">https://www.youtube.com/watch?v=GfH4QL4VqJ0</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

