<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>PDM: moderní správce balíčků a virtuálních prostředí Pythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>PDM: moderní správce balíčků a virtuálních prostředí Pythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dnes se seznámíme se správcem balíčků a virtuálních prostředí Pythonu, jenž se jmenuje PDM. Zajímavé je, že PDM umožňuje jak práci s virtuálním prostředím, tak i s lokální instalací balíčků dle PEP-582. Navíc PDM pracuje s projektovými soubory pyproject.toml definovanými v PEP-621.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. PDM: moderní správce balíčků a virtuálních prostředí Pythonu</a></p>
<p><a href="#k02">2. Instalace nástroje PDM</a></p>
<p><a href="#k03">3. První spuštění nástroje PDM</a></p>
<p><a href="#k04">4. Vytvoření kostry projektu bez dalších závislostí</a></p>
<p><a href="#k05">5. Struktura nově vytvořeného projektu, soubor <strong>pyproject.toml</strong></a></p>
<p><a href="#k06">6. Přidání dalšího balíčku do projektu, zobrazení grafu závislostí</a></p>
<p><a href="#k07">7. Soubor <strong>pdm.lock</strong></a></p>
<p><a href="#k08">8. Malá odbočka: vliv zvolené minimální verze Pythonu</a></p>
<p><a href="#k09">9. Projekt s&nbsp;více závislostmi</a></p>
<p><a href="#k10">10. Nová podoba souboru <strong>pdm.lock</strong></a></p>
<p><a href="#k11">11. Explicitní specifikace verze balíčku</a></p>
<p><a href="#k12">12. Strategie výběru verzí balíčku</a></p>
<p><a href="#k13">13. Instalace balíčků používaných při vývoji, testování a ladění</a></p>
<p><a href="#k14">14. Správa virtuálních prostředí z&nbsp;PDM</a></p>
<p><a href="#k15">15. Využití adresářové struktury dle PEP-582 namísto virtuálního prostředí</a></p>
<p><a href="#k16">16. Nová instalace všech balíčků (PEP-582)</a></p>
<p><a href="#k17">17. Specifikace nových příkazů spouštěných přes <strong>pdm run</strong></a></p>
<p><a href="#k18">18. Spouštění jednotkových testů přes <strong>pdm run</strong></a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. PDM: moderní správce balíčků a virtuálních prostředí Pythonu</h2>

<p>V&nbsp;současnosti pro ekosystém Pythonu existuje a je používáno hned
několik správců balíčků a virtuálních prostředí. Pravděpodobně nejznámější je
projekt <a href="https://pipenv.pypa.io/en/latest/index.html">Pipenv</a>, který
kombinuje možnosti <i>pip</i> a <i>venv</i>. Ovšem existují i další nástroje,
například <a href="https://python-poetry.org/">Poetry</a> (ten používá
<strong>pyproject.toml</strong>, ovšem není zcela kompatibilní s&nbsp;<a
href="https://peps.python.org/pep-0621/">PEP-621</a>) nebo <a
href="https://hatch.pypa.io/latest/">Hatch</a> (ten už je s&nbsp;PEP-621
kompatibilní). Dnes se ovšem seznámíme s&nbsp;jiným správcem, který se jmenuje
<i>PDM</i>. Zajímavé je, že <i>PDM</i> umožňuje jak práci s&nbsp;virtuálním
prostředím, tak i s&nbsp;lokální instalací balíčku podle <a
href="https://peps.python.org/pep-0582/">PEP-582</a> (což je dnes oficiálně
&bdquo;zavržená&ldquo;, ovšem stále užitečná vlastnost). Repositář projektu
<i>PDM</i> naleznete na adrese <a
href="https://github.com/pdm-project/pdm">https://github.com/pdm-project/pdm</a>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace nástroje PDM</h2>

<p>Existuje hned několik variant instalace nástroje <i>PDM</i>. Jedna
z&nbsp;nabízených možností spočívá ve stažení instalačního skriptu
(naprogramovaného v&nbsp;Pythonu) z&nbsp;webové stránky projektu <i>PDM</i> a
v&nbsp;jeho následném spuštění. Tuto operaci lze provést jediným příkazem:</p>

<pre>
$ <strong>curl -sSL https://pdm.fming.dev/install-pdm.py | python3 -</strong>
</pre>

<p>Lepší je však si nejprve ověřit kontrolní součet stahovaného instalačního
skriptu. Postup je snadný a nalezneme ho na stránkách samotného projektu
PDM:</p>

<pre>
$ <strong>curl -sSLO https://pdm.fming.dev/install-pdm.py</strong>
$ <strong>curl -sSL https://pdm.fming.dev/install-pdm.py.sha256 | shasum -a 256 -c -</strong>
$ <strong>python3 install-pdm.py [options]</strong>
</pre>

<p>Jelikož je balíček <i>PDM</i> dostupný i na <a
href="https://pypi.org/project/pdm/">PyPi</a>, je jeho instalace možná i přes
nástroj <strong>pip</strong> resp.&nbsp;<strong>pip3</strong>. Podívejme se,
jak může tato forma instalace vypadat v&nbsp;praxi. Instalaci můžeme provést
buď pro celý systém (PDM bude dostupný pro všechny uživatele) nebo pouze pro
aktuálně přihlášeného uživatele:</p>

<pre>
$ <strong>pip3 install --user pdm</strong>
</pre>

<p>Jak je z&nbsp;následujícího výpisu prováděných operací patrné, závisí
<i>PDM</i> na poměrně velkém množství dalších balíčků. Ovšem celková velikost
nainstalovaných souborů nepřesáhne několik megabajtů:</p>

<pre>
Collecting pdm
  Downloading pdm-2.9.3-py3-none-any.whl (238 kB)
     |████████████████████████████████| 238 kB 2.1 MB/s 
Collecting resolvelib&gt;=1.0.1
  Downloading resolvelib-1.0.1-py2.py3-none-any.whl (17 kB)
Collecting pyproject-hooks
  Downloading pyproject_hooks-1.0.0-py3-none-any.whl (9.3 kB)
Collecting unearth&gt;=0.10.0
  Downloading unearth-0.11.1-py3-none-any.whl (41 kB)
     |████████████████████████████████| 41 kB 585 kB/s 
Collecting importlib-metadata&gt;=3.6; python_version &lt; "3.10"
  Downloading importlib_metadata-6.8.0-py3-none-any.whl (22 kB)
Collecting findpython&lt;1.0.0a0,&gt;=0.4.0
  Downloading findpython-0.4.0-py3-none-any.whl (20 kB)
Collecting rich&gt;=12.3.0
  Downloading rich-13.6.0-py3-none-any.whl (239 kB)
     |████████████████████████████████| 239 kB 11.2 MB/s 
Collecting requests-toolbelt
  Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)
     |████████████████████████████████| 54 kB 1.5 MB/s 
Collecting cachecontrol[filecache]&gt;=0.13.0
  Downloading cachecontrol-0.13.1-py3-none-any.whl (22 kB)
Collecting installer&lt;0.8,&gt;=0.7
  Downloading installer-0.7.0-py3-none-any.whl (453 kB)
     |████████████████████████████████| 453 kB 2.4 MB/s 
Collecting python-dotenv&gt;=0.15
  Downloading python_dotenv-1.0.0-py3-none-any.whl (19 kB)
Requirement already satisfied: blinker in /usr/lib/python3/dist-packages (from pdm) (1.4)
Requirement already satisfied: importlib-resources&gt;=5; python_version &lt; "3.9" in ./.local/lib/python3.8/site-packages (from pdm) (6.1.0)
Requirement already satisfied: tomli&gt;=1.1.0; python_version &lt; "3.11" in ./.local/lib/python3.8/site-packages (from pdm) (2.0.1)
Requirement already satisfied: certifi in /usr/lib/python3/dist-packages (from pdm) (2019.11.28)
Collecting shellingham&gt;=1.3.2
  Downloading shellingham-1.5.3-py2.py3-none-any.whl (9.7 kB)
Collecting tomlkit&lt;1,&gt;=0.11.1
  Downloading tomlkit-0.12.1-py3-none-any.whl (37 kB)
Collecting platformdirs
  Downloading platformdirs-3.11.0-py3-none-any.whl (17 kB)
Collecting virtualenv&gt;=20
  Downloading virtualenv-20.24.5-py3-none-any.whl (3.7 MB)
     |████████████████████████████████| 3.7 MB 6.6 MB/s 
Collecting packaging!=22.0,&gt;=20.9
  Downloading packaging-23.2-py3-none-any.whl (53 kB)
     |████████████████████████████████| 53 kB 1.9 MB/s 
Collecting requests&gt;=2.25
  Downloading requests-2.31.0-py3-none-any.whl (62 kB)
     |████████████████████████████████| 62 kB 1.2 MB/s 
Requirement already satisfied: zipp&gt;=0.5 in ./.local/lib/python3.8/site-packages (from importlib-metadata&gt;=3.6; python_version &lt; "3.10"-&gt;pdm) (3.17.0)
Collecting markdown-it-py&gt;=2.2.0
  Downloading markdown_it_py-3.0.0-py3-none-any.whl (87 kB)
     |████████████████████████████████| 87 kB 2.6 MB/s 
Requirement already satisfied: typing-extensions&lt;5.0,&gt;=4.0.0; python_version &lt; "3.9" in ./.local/lib/python3.8/site-packages (from rich&gt;=12.3.0-&gt;pdm) (4.7.1)
Collecting pygments&lt;3.0.0,&gt;=2.13.0
  Downloading Pygments-2.16.1-py3-none-any.whl (1.2 MB)
     |████████████████████████████████| 1.2 MB 8.9 MB/s 
Collecting msgpack&gt;=0.5.2
  Downloading msgpack-1.0.7-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (534 kB)
     |████████████████████████████████| 534 kB 6.7 MB/s 
Collecting filelock&gt;=3.8.0; extra == "filecache"
  Downloading filelock-3.12.4-py3-none-any.whl (11 kB)
Collecting distlib&lt;1,&gt;=0.3.7
  Downloading distlib-0.3.7-py2.py3-none-any.whl (468 kB)
     |████████████████████████████████| 468 kB 5.7 MB/s 
Requirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /usr/lib/python3/dist-packages (from requests&gt;=2.25-&gt;unearth&gt;=0.10.0-&gt;pdm) (1.25.8)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/lib/python3/dist-packages (from requests&gt;=2.25-&gt;unearth&gt;=0.10.0-&gt;pdm) (2.8)
Collecting charset-normalizer&lt;4,&gt;=2
  Downloading charset_normalizer-3.3.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (137 kB)
     |████████████████████████████████| 137 kB 14.2 MB/s 
Collecting mdurl~=0.1
  Downloading mdurl-0.1.2-py3-none-any.whl (10.0 kB)
Installing collected packages: resolvelib, pyproject-hooks, packaging, charset-normalizer, requests, unearth, importlib-metadata, findpython, mdurl, markdown-it-py, pygments, rich, requests-toolbelt, msgpack, filelock, cachecontrol, installer, python-dotenv, shellingham, tomlkit, platformdirs, distlib, virtualenv, pdm
Successfully installed cachecontrol-0.13.1 charset-normalizer-3.3.0 distlib-0.3.7 filelock-3.12.4 findpython-0.4.0 importlib-metadata-6.8.0 installer-0.7.0 markdown-it-py-3.0.0 mdurl-0.1.2 msgpack-1.0.7 packaging-23.2 pdm-2.9.3 platformdirs-3.11.0 pygments-2.16.1 pyproject-hooks-1.0.0 python-dotenv-1.0.0 requests-2.31.0 requests-toolbelt-1.0.0 resolvelib-1.0.1 rich-13.6.0 shellingham-1.5.3 tomlkit-0.12.1 unearth-0.11.1 virtualenv-20.24.5
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. První spuštění nástroje PDM</h2>

<p>Po doufejme že úspěšné instalaci by mělo být možné spustit příkaz
<strong>pdm</strong>. Nejnovější a v&nbsp;době vydání článku aktuální verze PDM
je 2.9.3, což si můžeme velmi snadno ověřit (ostatně tato verze se vypisovala
již při instalaci balíčků provedené v&nbsp;rámci předchozí kapitoly):</p>

<pre>
$ <strong>pdm --version</strong>
&nbsp;
PDM, version 2.9.3
&nbsp;
Usage: pdm [-h] [-V] [-c CONFIG] [-v] [-I] [--pep582 [SHELL]] ...
&nbsp;
    ____  ____  __  ___
   / __ \/ __ \/  |/  /
  / /_/ / / / / /|_/ /
 / ____/ /_/ / /  / /
/_/   /_____/_/  /_/
&nbsp;
Options:
  -h, --help            Show this help message and exit.
  -V, --version         Show the version and exit
  -c CONFIG, --config CONFIG
                        Specify another config file path [env var:
                        PDM_CONFIG_FILE]
  -v, --verbose         Use `-v` for detailed output and `-vv` for more
                        detailed
  -I, --ignore-python   Ignore the Python path saved in .pdm-python. [env var:
                        PDM_IGNORE_SAVED_PYTHON]
  --pep582 [SHELL]      Print the command line to be eval'd by the shell
&nbsp;
Commands:
  add                   Add package(s) to pyproject.toml and install them
  build                 Build artifacts for distribution
  cache                 Control the caches of PDM
  completion            Generate completion scripts for the given shell
  config                Display the current configuration
  export                Export the locked packages set to other formats
  fix                   Fix the project problems according to the latest
                        version of PDM
  import                Import project metadata from other formats
  info                  Show the project information
  init                  Initialize a pyproject.toml for PDM
  install               Install dependencies from lock file
  list                  List packages installed in the current working set
  lock                  Resolve and lock dependencies
  publish               Build and publish the project to PyPI
  remove                Remove packages from pyproject.toml
  run                   Run commands or scripts with local packages loaded
  search                Search for PyPI packages
  self (plugin)         Manage the PDM program itself (previously known as
                        plugin)
  show                  Show the package information
  sync                  Synchronize the current working set with lock file
  update                Update package(s) in pyproject.toml
  use                   Use the given python version or path as base
                        interpreter
  venv                  Virtualenv management
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vytvoření kostry projektu bez dalších závislostí</h2>

<p>Podívejme se nyní, jakým způsobem můžeme s&nbsp;využitím nástroje PDM
vytvořit kostru jednoduchého Pythonovského projektu. První projekt nebude mít
žádné závislosti, ovšem jeho ostatní nastavení a metadata budou odpovídat
skutečnému projektu.</p>

<p>Kostru projektu lze vytvořit interaktivně, tj.&nbsp;odpovědmi na několik
otázek, které PDM položí. Pro tento účel v&nbsp;novém (prázdném) adresáři
zavoláme následující příkaz:</p>

<pre>
$ <strong>pdm init</strong>
</pre>

<p>Nástroj PDM se v&nbsp;prvním kroku pokusí nalézt všechny nainstalované verze
Pythonu a následně se zeptá, na které verzi bude projekt postaven
(resp.&nbsp;na které bude závislý). Na mém nově nainstalovaném systému je
nalezen pouze Python 3.11 (jediná verze), kterou ovšem PDM kvůli použití
symlinků nabídne jako tři nezávislé verze:</p>

<pre>
Creating a pyproject.toml for PDM...
Please enter the Python interpreter to use
0. /usr/bin/python (3.11)
1. /usr/bin/python3.11 (3.11)
2. /usr/bin/python3 (3.11)
Please select (0): <strong>2</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: skutečně se jedná o jedinou instalaci
Pythonu, o čemž se ostatně můžeme snadno přesvědčit pohledem na všechny tři
soubory zmíněné v&nbsp;prvním dotazu (jedná se o dvojici symlinků na stejný
skript):</div></p>

<pre>
<strong>$ ls -l /usr/bin/python*</strong>
&nbsp;
lrwxrwxrwx. 1 root root     9 Aug 28 02:00 /usr/bin/python -&gt; ./python3
lrwxrwxrwx. 1 root root    10 Aug 28 02:00 /usr/bin/python3 -&gt; python3.11
-rwxr-xr-x. 1 root root 16040 Aug 28 02:00 /usr/bin/python3.11
</pre>

<p>Mimochodem: na systému s&nbsp;Pythonem 2.x i Pythonem 3.x může výběr vypadat
například následovně:</p>

<pre>
0. /usr/bin/python (3.8)
1. /usr/bin/python3.8 (3.8)
2. /usr/bin/python2.7 (2.7)
</pre>

<p>Dále se PDM zeptá, zda se má vytvořit virtuální prostředí Pythonu
(<i>virtualenv</i>). Prozatím odpovíme, že ano, ovšem později se vrátíme
k&nbsp;alternativě:</p>

<pre>
Would you like to create a virtualenv with /usr/bin/python3? [y/n] (y): <strong>y</strong>
Virtualenv is created successfully at /home/ptisnovs/project1/.venv
</pre>

<p>Další otázka se týká struktury projektového souboru. Odpovíme, že se
prozatím nebude jednat o (instalovatelnou) knihovnu:</p>

<pre>
Is the project a library that is installable?
If yes, we will need to ask a few more questions to include the project name and
build backend [y/n] (n): <strong>n</strong>
</pre>

<p>Následují otázky týkající se licence a autora aplikace či knihovny:</p>

<pre>
License(SPDX name) (MIT): <strong>MIT</strong>
Author name (): <strong>Pavel</strong>
Author email (): <strong>pavel@nowhere.com</strong>
</pre>

<p>A konečně musíme odpovědět na otázku, jaká minimální verze Pythonu bude
vyžadována. Poté již bude vytvořena kostra projektu:</p>

<pre>
Python requires('*' to allow any) (&gt;=3.11): &gt;=<strong>3.7</strong>
Project is initialized successfully
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě, že používáte nástroj
<strong>pyenv</strong> pro správu verzí Pythonu, budou i tyto verze nástrojem
<i>PDM</i> detekovány a můžete si z&nbsp;nich vybrat konkrétní požadovanou
verzi.</div></p>

*** image ***
<p><i>Obrázek 1: Vytvoření kostry projektu.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Struktura nově vytvořeného projektu, soubor <strong>pyproject.toml</strong></h2>

<p>Adresář s&nbsp;kostrou projektu, který byl vytvořen po upřesňujících
dotazech, o nichž jsme se zmínili <a href="#k04">ve čtvrté kapitole</a>, by měl
vypadat následovně:</p>

<pre>
.
├── __pycache__
├── pyproject.toml
├── README.md
├── src
│   └── example_package
│       ├── __init__.py
│       └── __pycache__
└── tests
    ├── __init__.py
    └── __pycache__
&nbsp;
7 directories, 4 files
</pre>

<p>Projekt obsahuje především soubor <strong>pyproject.toml</strong>,
v&nbsp;němž jsou zapsána metadata o projektu, která odpovídají specifikaci <a
href="https://peps.python.org/pep-0621/">PEP 621 &ndash; Storing project
metadata in pyproject.toml</a>. Pokud jste na otázky ve čtvrté kapitole
odpovídali stejně jako autor článku, měl by projektový soubor mít následující
obsah:</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "Pavel", email = "pavel@nowhere.com"},
]
dependencies = []
requires-python = "&gt;=3.7"
readme = "README.md"
license = {text = "MIT"}
</pre>

<p><div class="rs-tip-major">Poznámka: formát <i>TOML</i> (neboli <i>Tom's
Obvious, Minimal Language</i>) sice zdánlivě (alespoň na první pohled) vychází
ze souborů typu INI, ovšem ve skutečnosti se jedná o odlišný, v&nbsp;mnoha
ohledech vylepšený a především promyšlený formát, v&nbsp;němž byly odstraněny
prakticky všechny nevýhody INI a přitom byla zachována čitelnost a snadnost
úprav. I proto se za posledních několik let stal velmi populární. Ve formátu
TOML jsou kromě řetězců, celých čísel a seznamů podporovány i další datové typy
&ndash; pravdivostní typ, čísla s&nbsp;plovoucí řádovou čárkou a zejména pak,
což je v&nbsp;praxi velmi užitečné, typ &bdquo;datum+čas&ldquo; neboli časové
razítko.</div></p>

<p>Dále v&nbsp;projektu najdeme obligátní soubor <strong>.gitignore</strong> a
taktéž soubor <strong>.pdm-python</strong> s&nbsp;odkazem na interpret Pythonu,
který se bude používat:</p>

<pre>
/home/ptisnovs/pdb/project1/.venv/bin/python
</pre>

<p><div class="rs-tip-major">Poznámka: tento soubor obsahuje cestu platnou
pouze na konkrétním počítači a pro konkrétního uživatele, a tudíž by neměl být
součástí repositáře (tedy neměl by se ukládat do Gitu atd.). I proto je ostatně
soubor <strong>.pdm-python</strong> zmíněn v&nbsp;souboru
<strong>.gitignore</strong>.</div></p>

<p>Další informace o vytvořeném projektu lze získat tímto příkazem:</p>

<pre>
$ <strong>pdm info</strong>
</pre>

<p>Výsledek by mohl vypadat následovně (cesty se pochopitelně budou lišit):</p>

<pre>
PDM version:
  2.9.3
Python Interpreter:
  /home/ptisnovs/project1/.venv/bin/python (3.11)
Project Root:
  /home/ptisnovs/project1
Local Packages:
</pre>

<p><div class="rs-tip-major">Poznámka: právě popsaný projekt naleznete
v&nbsp;GitHub repositáři na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project1/">https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project1/</a>.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Přidání dalšího balíčku do projektu, zobrazení grafu závislostí</h2>

<p>Nyní se pokusme do projektu přidat nějakou závislost, tj.&nbsp;knihovnu,
kterou budeme v&nbsp;projektu používat. Tato operace je snadná, protože nám
postačuje použít příkaz <strong>pdm add</strong>, kterému předáme název
knihovny a popř.&nbsp;i požadovanou verzi. Pokud verzi neuvedeme, bude použita
poslední dostupná validní verze (ovšem viz další text &ndash; ještě je totiž
možné specifikovat takzvanou strategii):</p>

<pre>
$ <strong>pdm add sympy</strong>
</pre>

<pre>
Adding packages to default dependencies: sympy
🔒 Lock successful
Changes are written to pyproject.toml.
All packages are synced to date, nothing to do.
&nbsp;
🎉 All complete!
</pre>

<p>Po provedení této operace se podívejme do projektového souboru
<strong>pyproject.toml</strong>. Objevila se v&nbsp;něm nová sekce nazvaná
příznačně <strong>dependencies</strong>:</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "Pavel", email = "pavel@nowhere.com"},
]
dependencies = [
    "sympy&gt;=1.10.1",
]
requires-python = "&gt;=3.7"
readme = "README.md"
license = {text = "MIT"}
</pre>

<p>Seznam závislostí ovšem můžeme získat i z&nbsp;příkazového řádku bez
nutnosti znát strukturu projektového souboru:</p>

<pre>
$ <strong>pdm list</strong>
</pre>

<p>Výsledek bude obsahovat i tranzitivní závislost &ndash; knihovnu
<strong>mpmath</strong>, kterou <strong>sympy</strong> pro svoji činnost
vyžaduje:</p>

<pre>
╭────────┬─────────┬──────────╮
│ name   │ version │ location │
├────────┼─────────┼──────────┤
│ mpmath │ 1.3.0   │          │
│ sympy  │ 1.10.1  │          │
╰────────┴─────────┴──────────╯
</pre>

<p>Přímé i tranzitivní závislosti si můžeme nechat zobrazit i formou stromové
struktury, což je ukázáno na dalším příkladu:</p>

<pre>
$ <strong>pdm list --graph</strong>
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
sympy 1.10.1 [ required: &gt;=1.10.1 ]
└── mpmath 1.3.0 [ required: &gt;=0.19 ]
</pre>

<p><div class="rs-tip-major">Poznámka: právě popsaný projekt naleznete
v&nbsp;GitHub repositáři na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project2/">https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project2/</a>.</div></p>

*** image ***
<p><i>Obrázek 2: Výsledek příkazu <strong>pdm list</strong> na terminálu, který
dokáže zobrazovat obarvený text.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Soubor <strong>pdm.lock</strong></h2>

<p>V&nbsp;průběhu přidání (či aktualizace nebo odebrání) nějakého balíčku, na
kterém projekt závisí, se vytvoří i soubor pojmenovaný
<strong>pdm.lock</strong>. V&nbsp;tomto souboru jsou uloženy přesné informace o
konkrétních verzích přímých i tranzitivních závislostí, včetně otisků souborů
s&nbsp;archivy těchto balíčků. Jedná se o velmi důležité informace, které mohou
pomoci k&nbsp;tomu, aby se na jiném počítači (třeba na stage či produkčním
serveru) nainstalovaly ty samé balíčky, jako na počítači vývojáře a/nebo
testera. A v&nbsp;neposlední řadě to vede k&nbsp;větší bezpečnosti při
sestavování projektů (omezí se útoky typu <i>typosquatting</i> atd.).</p>

<p>Zajímavé bude zjistit, jak tento soubor vypadá:</p>

<pre>
# This file is @generated by PDM.
# It is not intended for manual editing.
&nbsp;
[metadata]
groups = ["default"]
cross_platform = true
static_urls = false
lock_version = "4.3"
content_hash = "sha256:c19bb0a4a0a179b5e92d875ea3704d5564d319483f9497918302f97aa96a7d83"
&nbsp;
[[package]]
name = "mpmath"
version = "1.3.0"
summary = "Python library for arbitrary-precision floating-point arithmetic"
files = [
    {file = "mpmath-1.3.0-py3-none-any.whl", hash = "sha256:a0b2b9fe80bbcd81a6647ff13108738cfb482d481d826cc0e02f5b35e5c88d2c"},
    {file = "mpmath-1.3.0.tar.gz", hash = "sha256:7a28eb2a9774d00c7bc92411c19a89209d5da7c4c9a9e227be8330a23a25b91f"},
]
&nbsp;
[[package]]
name = "sympy"
version = "1.10.1"
requires_python = "&gt;=3.7"
summary = "Computer algebra system (CAS) in Python"
dependencies = [
    "mpmath&gt;=0.19",
]
files = [
    {file = "sympy-1.10.1-py3-none-any.whl", hash = "sha256:df75d738930f6fe9ebe7034e59d56698f29e85f443f743e51e47df0caccc2130"},
    {file = "sympy-1.10.1.tar.gz", hash = "sha256:5939eeffdf9e152172601463626c022a2c27e75cf6278de8d401d50c9d58787b"},
]
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Malá odbočka: vliv zvolené minimální verze Pythonu</h2>

<p>Připomeňme si, že seznam přímých i tranzitivních závislostí vypadá u našeho
projektu následovně:</p>

<pre>
╭────────┬─────────┬──────────╮
│ name   │ version │ location │
├────────┼─────────┼──────────┤
│ mpmath │ 1.3.0   │          │
│ sympy  │ 1.10.1  │          │
╰────────┴─────────┴──────────╯
</pre>

<p>To je zajímavé, protože při pohledu na vydání knihovny <i>sympy</i> (viz <a
href="https://github.com/sympy/sympy/releases">https://github.com/sympy/sympy/releases</a>)
snadno zjistíme, že poslední stabilní verze je 1.12 a nikoli 1.10.1. Pokusme se
tedy o explicitní instalaci novější verze:</p>

<pre>
$ <strong>pdm add sympy==1.12</strong>
</pre>

<p>V&nbsp;tomto případě se instalace (resp.&nbsp;ugrade) nepodaří, protože
novější verze knihovny Sympy vyžadují i novější verzi samotného Pythonu:</p>

<pre>
Adding packages to default dependencies: sympy==1.12
🔒 Lock failed
Unable to find a resolution because the following dependencies don't work on all Python versions in the range of the project's `requires-python`: &gt;=3.7.
  python&gt;=3.8 (from &lt;Candidate sympy@1.12 from https://pypi.org/simple/sympy/&gt;)
A possible solution is to change the value of `requires-python` in pyproject.toml to &gt;=3.8.
See /tmp/pdm-lock-ssanlsgo.log for detailed debug log.
</pre>

<p>To znamená, že i když používáme Python 3.11, projekt je stále nastaven tak,
že minimální kompatibilní verze Pythonu je 3.7:</p>

<pre>
requires-python = "&gt;=3.7"
</pre>

<p>Změna souboru <strong>pyproject</strong> je snadná &ndash; postačuje totiž
výše uvedený řádek změnit na:</p>

<pre>
requires-python = "&gt;=3.8"
</pre>

<p>Nyní již můžeme spustit příkaz pro instalaci konkrétní verze knihovny
<strong>sympy</strong>:</p>

<pre>
$ <strong>pdm add sympy==1.12</strong>
</pre>

<p>Ve skutečnosti u nového projektu můžeme použít i:</p>

<pre>
$ <strong>pdm add sympy</strong>
</pre>

<p>Instalace by měla proběhnout bez problémů, a to s&nbsp;verzí Sympy 1.12:</p>

<pre>
Adding packages to default dependencies: sympy
🔒 Lock successful
Changes are written to pyproject.toml.
Synchronizing working set with resolved packages: 2 to add, 0 to update, 0 to 
remove
&nbsp;
  ✔ Install mpmath 1.3.0 successful
  ✔ Install sympy 1.12 successful
&nbsp;
🎉 All complete!
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Projekt s&nbsp;více závislostmi</h2>

<p>Samozřejmě nám nic nebrání v&nbsp;tom, abychom si do projektu přidali další
balíček, na kterém bude projekt záviset. Zvolit můžeme například známý balíček
<strong>requests</strong>. Při jeho instalaci prozatím nebudeme specifikovat
verzi:</p>

<pre>
$ <strong>pdm add requests</strong>
</pre>

<p>Průběh konfigurace projektu s&nbsp;přidáním nového balíčku:</p>

<pre>
Adding packages to default dependencies: requests
🔒 Lock successful
Changes are written to pyproject.toml.
Synchronizing working set with resolved packages: 5 to add, 0 to update, 0 to
remove
&nbsp;
  ✔ Install idna 3.4 successful
  ✔ Install requests 2.31.0 successful
  ✔ Install certifi 2023.7.22 successful
  ✔ Install urllib3 2.0.6 successful
  ✔ Install charset-normalizer 3.3.0 successful
&nbsp;
🎉 All complete!
</pre>

<p>V&nbsp;projektovém souboru <strong>pyproject.toml</strong> se objeví pouze
dvě přímé závislosti (podle očekávání):</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "Pavel", email = "pavel@nowhere.com"},
]
dependencies = [
    "sympy&gt;=1.10.1",
    "requests&gt;=2.31.0",
]
requires-python = "&gt;=3.7"
readme = "README.md"
license = {text = "MIT"}
</pre>

<p>Ve skutečnosti však naroste počet tranzitivních závislostí, což si opět
můžeme ověřit jejich výpisem ve formě tabulky nebo zobrazením stromové
struktury:</p>

<pre>
$ <strong>pdm list</strong>
&nbsp;
╭────────────────────┬───────────┬──────────╮
│ name               │ version   │ location │
├────────────────────┼───────────┼──────────┤
│ charset-normalizer │ 3.3.0     │          │
│ mpmath             │ 1.3.0     │          │
│ sympy              │ 1.10.1    │          │
│ idna               │ 3.4       │          │
│ requests           │ 2.31.0    │          │
│ certifi            │ 2023.7.22 │          │
│ urllib3            │ 2.0.6     │          │
╰────────────────────┴───────────┴──────────╯
</pre>

<p>Zobrazení přímých i tranzitivních závislostí formou stromové struktury:</p>

<pre>
$ <strong>pdm list --graph</strong>
&nbsp;
requests 2.31.0 [ required: &gt;=2.31.0 ]
├── certifi 2023.7.22 [ required: &gt;=2017.4.17 ]
├── charset-normalizer 3.3.0 [ required: &lt;4,&gt;=2 ]
├── idna 3.4 [ required: &lt;4,&gt;=2.5 ]
└── urllib3 2.0.6 [ required: &lt;3,&gt;=1.21.1 ]
sympy 1.10.1 [ required: &gt;=1.10.1 ]
└── mpmath 1.3.0 [ required: &gt;=0.19 ]
</pre>

<p><div class="rs-tip-major">Poznámka: právě popsaný projekt naleznete
v&nbsp;GitHub repositáři na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project3/">https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project3/</a>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Nová podoba souboru <strong>pdm.lock</strong></h2>

<p>Soubor <strong>pdm.lock</strong> se po přidání nového balíčku kvůli
tranzitivním závislostem zvětšil až na 17kB. Z&nbsp;tohoto důvodu si uvedeme
pouze jeho začátek a konec (s&nbsp;několika balíčky). Struktura souboru však
zůstává stále stejná:</p>

<pre>
[metadata]
groups = ["default"]
cross_platform = true
static_urls = false
lock_version = "4.3"
content_hash = "sha256:286f1c206e4a496e9dc40642617bcc789fa52bcac8f2dc52b9090d276c4162e4"
&nbsp;
[[package]]
name = "certifi"
version = "2023.7.22"
requires_python = "&gt;=3.6"
summary = "Python package for providing Mozilla's CA Bundle."
files = [
    {file = "certifi-2023.7.22-py3-none-any.whl", hash = "sha256:92d6037539857d8206b8f6ae472e8b77db8058fec5937a1ef3f54304089edbb9"},
    {file = "certifi-2023.7.22.tar.gz", hash = "sha256:539cc1d13202e33ca466e88b2807e29f4c13049d6d87031a3c110744495cb082"},
]
&nbsp;
[[package]]
name = "charset-normalizer"
version = "3.3.0"
requires_python = "&gt;=3.7.0"
summary = "The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet."
files = [
    {file = "charset-normalizer-3.3.0.tar.gz", hash = "sha256:63563193aec44bce707e0c5ca64ff69fa72ed7cf34ce6e11d5127555756fd2f6"},
    {file = "charset_normalizer-3.3.0-cp310-cp310-macosx_10_9_universal2.whl", hash = "sha256:effe5406c9bd748a871dbcaf3ac69167c38d72db8c9baf3ff954c344f31c4cbe"},
    {file = "charset_normalizer-3.3.0-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:4162918ef3098851fcd8a628bf9b6a98d10c380725df9e04caf5ca6dd48c847a"},
    ...
    ...
    ...
[[package]]
name = "urllib3"
version = "2.0.6"
requires_python = "&gt;=3.7"
summary = "HTTP library with thread-safe connection pooling, file post, and more."
files = [
    {file = "urllib3-2.0.6-py3-none-any.whl", hash = "sha256:7a7c7003b000adf9e7ca2a377c9688bbc54ed41b985789ed576570342a375cd2"},
    {file = "urllib3-2.0.6.tar.gz", hash = "sha256:b19e1a85d206b56d7df1d5e683df4a7725252a964e3993648dd0fb5a1c157564"},
]
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Explicitní specifikace verze balíčku</h2>

<p>Při přidávání balíčku do projektu můžeme explicitně specifikovat požadovanou
verzi tohoto balíčku. Formát zápisu verze je v&nbsp;ekosystému Pythonu již
standardizován &ndash; konkrétní verze se zapisuje za znaky rovnosti:</p>

<pre>
$ <strong>pdm add requests==2.0.0</strong>
</pre>

<p><div class="rs-tip-major">POZOR: jedná se pouze o příklad, který
v&nbsp;praxi raději nepoužívejte. Ve skutečnosti má balíček
<strong>requests</strong> ve verzi 2.0.0 minimálně tři známé bezpečnostní
chyby.</div></p>

<p>Projektový soubor <strong>pyproject.toml</strong> bude nyní vypadat
následovně:</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "Pavel", email = "pavel@nowhere.com"},
]
dependencies = [
    "sympy&gt;=1.10.1",
    "requests==2.0.0",
]
requires-python = "&gt;=3.7"
readme = "README.md"
license = {text = "MIT"}
</pre>

<p>Vzhledem k&nbsp;tomu, že <strong>requests</strong> nemá žádné tranzitivní
závislosti (na rozdíl od novějších verzí tohoto balíčku), bude soubor
<strong>pdm.lock</strong> stále velmi jednoduchý:</p>

<pre>
# This file is @generated by PDM.
# It is not intended for manual editing.
&nbsp;
[metadata]
groups = ["default"]
cross_platform = true
static_urls = false
lock_version = "4.3"
content_hash = "sha256:b5aed5d117e640360335e67f9b9a815150e717d992ecfdf1663587226da6b6b7"
&nbsp;
[[package]]
name = "mpmath"
version = "1.3.0"
summary = "Python library for arbitrary-precision floating-point arithmetic"
files = [
    {file = "mpmath-1.3.0-py3-none-any.whl", hash = "sha256:a0b2b9fe80bbcd81a6647ff13108738cfb482d481d826cc0e02f5b35e5c88d2c"},
    {file = "mpmath-1.3.0.tar.gz", hash = "sha256:7a28eb2a9774d00c7bc92411c19a89209d5da7c4c9a9e227be8330a23a25b91f"},
]
&nbsp;
[[package]]
name = "requests"
version = "2.0.0"
summary = "Python HTTP for Humans."
files = [
    {file = "requests-2.0.0-py2.py3-none-any.whl", hash = "sha256:2ef65639cb9600443f85451df487818c31f993ab288f313d29cc9db4f3cbe6ed"},
    {file = "requests-2.0.0.tar.gz", hash = "sha256:78536038f54cff6ade3be6863403146665b5a3923dd61108c98d8b64141f9d70"},
]
&nbsp;
[[package]]
name = "sympy"
version = "1.10.1"
requires_python = "&gt;=3.7"
summary = "Computer algebra system (CAS) in Python"
dependencies = [
    "mpmath&gt;=0.19",
]
files = [
    {file = "sympy-1.10.1-py3-none-any.whl", hash = "sha256:df75d738930f6fe9ebe7034e59d56698f29e85f443f743e51e47df0caccc2130"},
    {file = "sympy-1.10.1.tar.gz", hash = "sha256:5939eeffdf9e152172601463626c022a2c27e75cf6278de8d401d50c9d58787b"},
]
</pre>

<p><div class="rs-tip-major">Poznámka: právě popsaný projekt naleznete
v&nbsp;GitHub repositáři na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project4/">https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project4/</a>.</div></p>

<p>Požadovanou verzi balíčku lze ovšem specifikovat i dalšími způsoby:</p>

<pre>
minimální: &gt;2.21.0
kompatibilní: &gt;2.21.0,&lt;3.0.0
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Strategie výběru verzí balíčku</h2>

<p>Výběr verze balíčku, který se do projektu přidává, závisí na zvolené
strategii. Ta se specifikuje následujícími čtyřmi volbami (přepínači):</p>

<pre>
--save-minimum
--save-compatible
--save-exact
--save-wildcard
</pre>

<p>Strategie &bdquo;minimum&ldquo; ve k&nbsp;tomu, že se do projektového
souboru uloží informace o tom, že bude vyžadována konkrétní stabilní verze či
verze vyšší:</p>

<pre>
$ <strong>pdm add --save-minimum requests</strong>
</pre>

<p>Výsledek vypadá následovně:</p>

<pre>
dependencies = [
    "requests&gt;=2.31.0",
]
</pre>

<p>Strategie &bdquo;compatible&ldquo; umožňuje specifikovat konkrétní verzi
popř.&nbsp;verze s&nbsp;ní kompatibilní:</p>

<pre>
$ <strong>pdm add --save-compatible requests</strong>
</pre>

<p>Výsledek:</p>

<pre>
dependencies = [
    "requests~=2.31",
]

</pre>

<p>Nejjednodušší je strategie &bdquo;exact&ldquo;, která v&nbsp;důsledku vede
k&nbsp;tomu, že bude specifikována jediná konkrétní verze balíčku:</p>

<pre>
$ <strong>pdm add --save-exact requests</strong>
</pre>

<p>Výsledek:</p>

<pre>
dependencies = [
    "requests==2.31.0",
]
</pre>

<p>A konečně v&nbsp;poslední variantě &bdquo;wildcard&ldquo; nemusí být ve
výsledku verze balíčku vůbec uvedená:</p>

<pre>
$ <strong>pdm add --save-wildcard requests</strong>
</pre>

<p>Výsledek:</p>

<pre>
dependencies = [
    "requests",
]
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Instalace balíčků používaných při vývoji, testování a ladění</h2>

<p>Mnoho balíčků, s&nbsp;nimiž se v&nbsp;projektu nějakým způsobem pracuje, je
ve skutečnosti použito &bdquo;pouze&ldquo; při vývoji, testování a ladění
aplikace. Takové balíčky tedy není nutné (a ani to není vhodné) instalovat při
nasazování aplikace na stage či produkční prostředí. Na druhou stranu by však
projekt měl obsahovat informace o těchto balíčcích. V&nbsp;případě, že se
používá nástroj <i>PDM</i>, je možné &bdquo;vývojářské&ldquo; balíčky
nainstalovat s&nbsp;použitím přepínače <strong>-d</strong>, kterým se tyto
balíčky odliší od produkčních balíčků nutných pro běh aplikace.</p>

<p>Poměrně dobrým příkladem může být balíček <strong>pytest</strong> využívaný
pro spouštění a analýzu jednotkových testů. Takový balíček nainstalujeme
následujícím způsobem:</p>

<pre>
$ <strong>pdm add -d pytest</strong>
</pre>

<p>Výsledkem bude, že se v&nbsp;projektovém souboru
<strong>pyproject.toml</strong> objeví nová sekce nazvaná
<strong>tool.pdm.dev-dependencies</strong> (viz zvýrazněnou část):</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "Pavel Tisnovsky", email = "tisnik@nowhere.com"},
]
dependencies = [
    "sympy&gt;=1.12",
]
requires-python = "&gt;=3.11"
readme = "README.md"
license = {text = "MIT"}
&nbsp;
<strong>[tool.pdm.dev-dependencies]</strong>
<strong>dev = [</strong>
    <strong>"pytest&gt;=7.4.2",</strong>
<strong>]</strong>
</pre>

<p>Naproti tomu soubor <strong>pdm.lock</strong> informaci o tomto balíčku
obsahovat nebude:</p>

<pre>
<i># This file is @generated by PDM.</i>
<i># It is not intended for manual editing.</i>
&nbsp;
[metadata]
groups = ["default"]
cross_platform = true
static_urls = false
lock_version = "4.3"
content_hash = "sha256:5cd901a11186547468a967f40df61dd8cb8cf0b5bb3499bbf66125887548c0f7"
&nbsp;
[[package]]
name = "mpmath"
version = "1.3.0"
summary = "Python library for arbitrary-precision floating-point arithmetic"
files = [
    {file = "mpmath-1.3.0-py3-none-any.whl", hash = "sha256:a0b2b9fe80bbcd81a6647ff13108738cfb482d481d826cc0e02f5b35e5c88d2c"},
    {file = "mpmath-1.3.0.tar.gz", hash = "sha256:7a28eb2a9774d00c7bc92411c19a89209d5da7c4c9a9e227be8330a23a25b91f"},
]
&nbsp;
[[package]]
name = "sympy"
version = "1.12"
requires_python = "&gt;=3.8"
summary = "Computer algebra system (CAS) in Python"
dependencies = [
    "mpmath&gt;=0.19",
]
files = [
    {file = "sympy-1.12-py3-none-any.whl", hash = "sha256:c3588cd4295d0c0f603d0f2ae780587e64e2efeedb3521e46b9bb1d08d184fa5"},
    {file = "sympy-1.12.tar.gz", hash = "sha256:ebf595c8dac3e0fdc4152c51878b498396ec7f30e7a914d6071e674d49420fb8"},
]
</pre>

<p><div class="rs-tip-major">Poznámka: právě popsaný projekt naleznete
v&nbsp;GitHub repositáři na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project8/">https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project8/</a>.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Správa virtuálních prostředí z&nbsp;PDM</h2>

<p>Ještě jednou se vraťme k&nbsp;příkazu pro zobrazení informací o projektu,
zejména o jeho prostředí. Jedná se o příkaz:</p>

<pre>
$ <strong>pdm info</strong>
</pre>

<p>Výsledek by mohl vypadat následovně (cesty se pochopitelně budou lišit):</p>

<pre>
PDM version:
  2.9.3
Python Interpreter:
  <strong>/home/ptisnovs/project1/.venv/bin/python (3.11)</strong>
Project Root:
  /home/ptisnovs/project1
Local Packages:
</pre>

<p>V&nbsp;tuto chvíli je pro nás důležitý řádek s&nbsp;cestou
k&nbsp;interpretru Pythonu. Ten nám totiž mj.&nbsp;říká, že při spouštění
projektu (nebo jeho částí, popř.&nbsp;testů atd.) bude využito virtuální
prostředí Pythonu. To je v&nbsp;našem případě umístěno v&nbsp;podadresáři
<strong>.vent</strong>. PDM nám umožňuje nechat si vypsat virtuální prostředí,
která jsou v&nbsp;daný okamžik dostupná, a to konkrétně příkazem:</p>

<pre>
$ <strong>pdm venv list</strong>
Virtualenvs created with this project:
&nbsp;
*  in-project: /home/ptisnovs/x/project1/.venv
</pre>

<p>Virtuální prostředí je do stromové struktury s&nbsp;projektem zakomponováno
následovně:</p>

<pre>
├── __pycache__
├── src
│   └── example_package
│       └── __pycache__
├── tests
│   └── __pycache__
└── <strong>.venv</strong>
    ├── bin
    ├── lib
    │   └── python3.11
    │       └── site-packages
    │           ├── mpmath
    │           ├── mpmath-1.3.0.dist-info
    │           ├── __pycache__
    │           ├── sympy
    │           └── sympy-1.10.1.dist-info
    ├── lib64
    │   └── python3.11
    │       └── site-packages
    └── share
        └── man
            └── man1
</pre>

<p>Možné je nechat si vytvořit i další virtuální prostředí. Pokud však již
adresář <strong>.venv</strong> existuje, bude další virtuální prostředí
vytvořeno v&nbsp;adresáři specifikovaném konfigurační volbou
<strong>venv.location</strong> (tu jsme neměnili). Jméno nově vytvořeného
podadresáře s&nbsp;virtuálním prostředím přitom bude mít tento formát:
<strong>jméno_projektu-hash-verze_pythonu</strong>. Ostatně můžeme se pokusit o
vytvoření ještě jednoho virtuálního prostředí pro náš projekt a pro zvolenou
verzi Pythonu:</p>

<pre>
$ <strong>pdm venv create --name testing 3.11</strong>
&nbsp;
Virtualenv /home/ptisnovs/.local/share/pdm/venvs/project1-MLVA-_ZK-testing is 
created successfully
</pre>

<p>Struktura tohoto nového virtuální prostředí bude shodná se strukturou
&bdquo;lokálního&ldquo; virtuálního prostředí:</p>

<pre>
/home/ptisnovs/.local/share/pdm/venvs
└── project1-MLVA-_ZK-testing
    ├── bin
    ├── lib
    │   └── python3.11
    │       └── site-packages
    └── lib64
        └── python3.11
            └── site-packages
</pre>

<p>Virtuální prostředí je možné i smazat:</p>

<pre>
$ <strong>pdm venv remove in-project</strong>
&nbsp;
Virtualenvs created with this project:
Will remove: /home/ptisnovs/x/project1/.venv, continue? [y/n] (y): y
Removed successfully!
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Využití adresářové struktury dle PEP-582 namísto virtuálního prostředí</h2>

<p>Správce <i>PDM</i> umožňuje namísto virtuálního prostředí (tedy vlastně
typicky podadresáře <strong>.venv</strong>) pracovat s&nbsp;adresářovou
strukturou definovanou v&nbsp;PEP-582. Toto PEP sice bylo oficiálně zamítnuto,
což ale neznamená, že jím definovanou adresářovou strukturu nelze použít
(ostatně PDM byl vytvořen právě proto, aby existovala implementace
PEP-582).</p>

<p>Při vytváření nového projektu postačuje na otázku:</p>

<pre>
Would you like to create a virtualenv with /usr/bin/python? [y/n] (y): n
</pre>

<p>odpovědět záporně:</p>

<pre>
You are using the PEP 582 mode, no virtualenv is created.
For more info, please visit https://peps.python.org/pep-0582/
</pre>

<p><div class="rs-tip-major">Poznámka: výsledkem bude prakticky stejný projekt,
jako v&nbsp;předchozích případech, ovšem obsah souboru
<strong>.pdm-python</strong> bude odlišný.</div></p>

<p>Následně do projektu přidáme nějakou závislost:</p>

<pre>
$ <strong>pdm add sympy</strong>
&nbsp;
Adding packages to default dependencies: sympy
🔒 Lock successful
Changes are written to pyproject.toml.
Synchronizing working set with resolved packages: 2 to add, 0 to update, 0 to 
remove
&nbsp;
  ✔ Install mpmath 1.3.0 successful
  ✔ Install sympy 1.12 successful
&nbsp;
🎉 All complete!
</pre>

<p>Výsledkem by měla být následující adresářová struktura, v&nbsp;níž se
namísto <strong>.venv</strong> objevuje podadresář
<strong>__pypackages__</strong>:</p>

<pre>
.
├── __pycache__
├── <strong>__pypackages__</strong>
│   └── 3.11
│       ├── bin
│       ├── include
│       ├── lib
│       │   ├── mpmath
│       │   ├── mpmath-1.3.0.dist-info
│       │   ├── sympy
│       │   └── sympy-1.12.dist-info
│       └── share
│           └── man
├── src
│   └── example_package
│       └── __pycache__
└── tests
    └── __pycache__
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Nová instalace všech balíčků (PEP-582)</h2>

<p>V&nbsp;případě potřeby, například pokud dojde k&nbsp;problémům s&nbsp;updaty
balíčků (což se nastává příliš často) je možné jednoduše celý adresář
<strong>__pypackages__</strong> smazat:</p>

<pre>
$ <strong>rm -rf __pypackages__</strong>
</pre>

<p>Struktura projektu se nám zjednoduší na:</p>

<pre>
.
├── __pycache__
├── src
│   └── example_package
│       └── __pycache__
└── tests
    └── __pycache__
</pre>

<p>Nová instalace všech balíčků v&nbsp;požadovaných verzích se provede
příkazem:</p>

<pre>
$ <strong>pdm install -v</strong>
&nbsp;
STATUS: Resolving packages from lockfile...
STATUS: Fetching hashes for resolved packages...
Synchronizing working set with resolved packages: 2 to add, 0 to update, 0 to remove
&nbsp;
unearth.preparer: Using cached &lt;Link https://files.pythonhosted.org/packages/43/e3/7d92a15f894aa0c9c4b49b8ee9ac9850d6e63b03c9c32c0367a13ae62209/mpmath-1.3.0-py3-none-any.whl (from https://pypi.org/simple/mpmath/)&gt;
unearth.preparer: Using cached &lt;Link https://files.pythonhosted.org/packages/d2/05/e6600db80270777c4a64238a98d442f0fd07cc8915be2a1c16da7f2b9e74/sympy-1.12-py3-none-any.whl (from https://pypi.org/simple/sympy/)&gt;
  ✔ Install mpmath 1.3.0 successful
  ✔ Install sympy 1.12 successful
</pre>

<p>Což povede k&nbsp;obnovení původní struktury projektu:</p>

<pre>
.
├── __pycache__
├── __pypackages__
│   └── 3.11
│       ├── bin
│       ├── include
│       ├── lib
│       │   ├── mpmath
│       │   ├── mpmath-1.3.0.dist-info
│       │   ├── sympy
│       │   └── sympy-1.12.dist-info
│       └── share
│           └── man
├── src
│   └── example_package
│       └── __pycache__
└── tests
    └── __pycache__
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Specifikace nových příkazů spouštěných přes <strong>pdm run</strong></h2>

<p>Do projektového souboru <strong>pyproject.toml</strong> můžeme přidat i
specifikaci nových (prakticky libovolných) příkazů, které se spouští přes
<strong>pdm run</strong>. Příkladem může být příkaz <strong>start</strong> pro
spuštění aplikace (samozřejmě s&nbsp;nastaveným prostředím atd.):</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "Pavel", email = "pavel@nowhere.com"},
]
dependencies = []
requires-python = "&gt;=3.7"
readme = "README.md"
license = {text = "MIT"}
&nbsp;
<strong>[tool.pdm.scripts]</strong>
<strong>start = "src/example_package/main.py"</strong>
</pre>

<p>Nový příkaz <strong>start</strong> nyní můžeme zavolat takto:</p>

<pre>
$ <strong>pdm run start</strong>
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Spouštění jednotkových testů přes <strong>pdm run</strong></h2>

<p>Do projektového souboru <strong>pyproject.toml</strong> samozřejmě můžeme
přidat i další vlastní příkazy, například příkaz <strong>test</strong> určený
pro spuštění jednotkových testů. Úprava bude triviální:</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "Pavel", email = "pavel@nowhere.com"},
]
<strong>[tool.pdm.dev-dependencies]</strong>
<strong>dev = [</strong>
    <strong>"pytest&gt;=7.4.2",</strong>
<strong>]</strong>
requires-python = "&gt;=3.7"
readme = "README.md"
license = {text = "MIT"}
&nbsp;
<strong>[tool.pdm.scripts]</strong>
start = "src/example_package/main.py"
<strong>test = "pytest"</strong>
</pre>

<p>A takto bude vypadat spuštění testů:</p>

<pre>
============================= test session starts ==============================
platform linux -- Python 3.11.5, pytest-7.4.2, pluggy-1.2.0
rootdir: /home/ptisnovs/x/project7
collected 0 items                                                              
&nbsp;
============================ no tests ran in 0.00s =============================
</pre>

<p><div class="rs-tip-major">Poznámka: žádné testy sice nemáme v&nbsp;projektu
definovány, ovšem už jen fakt, že se <strong>pytest</strong> spustil na
počítači, na němž není tento nástroj nainstalován (existuje jen ve virtuálním
prostředí projektu) ukazuje, že vše funguje.</div></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské projekty, které jsme si vytvořili, naleznete na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je nutné mít
nainstalovánu některou z&nbsp;podporovaných verzí Pythonu 3 a pochopitelně
taktéž PDM:</p>

<table>
<tr><th>#</th><th>Projekt</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>1</td><td>project1/</td><td>nově vytvořený projekt bez závislostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project1/">https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project1/</a></td></tr>
<tr><td>2</td><td>project2/</td><td>projekt s&nbsp;jednou explicitně zapsanou závislostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project2/">https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project2/</a></td></tr>
<tr><td>3</td><td>project3/</td><td>projekt s&nbsp;dvojicí explicitně zapsaných závislostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project3/">https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project3/</a></td></tr>
<tr><td>4</td><td>project4/</td><td>projekt se závislostí na knihovně <strong>requests</strong> ve verzi 2.0.0</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project4/">https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project4/</a></td></tr>
<tr><td>5</td><td>project5/</td><td>projekt se závislostí na knihovně <strong>requests</strong> v&nbsp;nejnovější dostupné verzi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project5/">https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project5/</a></td></tr>
<tr><td>6</td><td>project6/</td><td>kostra Pythonovské knihovny (balíčku)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project6/">https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project6/</a></td></tr>
<tr><td>7</td><td>project7/</td><td>specifikace příkazu spuštěného po zadání <strong>pdm start</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project7/">https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project7/</a></td></tr>
<tr><td>8</td><td>project8/</td><td>projekt se závislostmi pro vývojáře (nikoli pro výslednou aplikaci či knihovnu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project8/">https://github.com/tisnik/most-popular-python-libs/blob/master/pdm/project8/</a></td></tr>
<table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránka projektu PDM<br />
<a href="https://pdm.fming.dev/latest/">https://pdm.fming.dev/latest/</a>
</li>

<li>PDF na GitHubu<br />
<a href="https://github.com/pdm-project/pdm">https://github.com/pdm-project/pdm</a>
</li>

<li>PEP 582 &ndash; Python local packages directory<br />
<a href="https://peps.python.org/pep-0582/">https://peps.python.org/pep-0582/</a>
</li>

<li>PDM na PyPi<br />
<a href="https://pypi.org/project/pdm/">https://pypi.org/project/pdm/</a>
</li>

<li>Which Python package manager should you use?<br />
<a href="https://towardsdatascience.com/which-python-package-manager-should-you-use-d0fd0789a250">https://towardsdatascience.com/which-python-package-manager-should-you-use-d0fd0789a250</a>
</li>

<li>How to Use PDM to Manage Python Dependencies without a Virtual Environment<br />
<a href="https://www.youtube.com/watch?v=qOIWNSTYfcc">https://www.youtube.com/watch?v=qOIWNSTYfcc</a>
</li>

<li>What are the best Python package managers?<br />
<a href="https://www.slant.co/topics/2666/~best-python-package-managers">https://www.slant.co/topics/2666/~best-python-package-managers</a>
</li>

<li>PEP 621 &ndash; Storing project metadata in pyproject.toml<br />
<a href="https://peps.python.org/pep-0621/">https://peps.python.org/pep-0621/</a>
</li>

<li>Pick a Python Lockfile and Improve Security<br />
<a href="https://blog.phylum.io/pick-a-python-lockfile-and-improve-security/">https://blog.phylum.io/pick-a-python-lockfile-and-improve-security/</a>
</li>

<li>PyPA specifications<br />
<a href="https://packaging.python.org/en/latest/specifications/">https://packaging.python.org/en/latest/specifications/</a>
</li>

<li>Creation of virtual environments<br />
<a href="https://docs.python.org/3/library/venv.html">https://docs.python.org/3/library/venv.html</a>
</a>

<li>How to Use virtualenv in Python<br />
<a href="https://learnpython.com/blog/how-to-use-virtualenv-python/">https://learnpython.com/blog/how-to-use-virtualenv-python/</a>
</a>

<li>Python Virtual Environments: A Primer<br />
<a href="https://realpython.com/python-virtual-environments-a-primer/">https://realpython.com/python-virtual-environments-a-primer/</a>
</a>

<li>virtualenv Cheatsheet<br />
<a href="https://aaronlelevier.github.io/virtualenv-cheatsheet/">https://aaronlelevier.github.io/virtualenv-cheatsheet/</a>
</a>

<li>Installing Python Modules<br />
<a href="https://docs.python.org/3/installing/index.html">https://docs.python.org/3/installing/index.html</a>
</a>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

