<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Knihovna Pandas: zobrazení datových rámců, vykreslení grafů a validace dat</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Knihovna Pandas: zobrazení datových rámců, vykreslení grafů a validace dat</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém článku o knihovně <i>Pandas</i> se budeme zabývat třemi tématy: zobrazením obsahu i struktury datových rámců, vykreslováním grafů na základě dat získaných z rámců a taktéž validací údajů uložených v datových rámcích.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Knihovna Pandas: zobrazení datových rámců, vykreslení grafů a validace dat</a></p>
<p><a href="#k02">2. Nové datové typy podporované knihovnou Pandas</a></p>
<p><a href="#k03">3. Zobrazení obsahu datového rámce</a></p>
<p><a href="#k04">4. Zobrazení podrobnějších informací o datovém rámci</a></p>
<p><a href="#k05">5. Základní statistické informace o datech uložených v&nbsp;rámci</a></p>
<p><a href="#k06">6. Jazyk Python a knihovna Matplotlib</a></p>
<p><a href="#k07">7. Zobrazení jednoduchého grafu</a></p>
<p><a href="#k08">8. Kooperace mezi Pandas a Matplotlibem</a></p>
<p><a href="#k09">9. Přímé vykreslení grafu bez použití knihovny Matplotlib</a></p>
<p><a href="#k10">10. Přidání klouzavého průměru do grafu</a></p>
<p><a href="#k11">11. Vylepšený výpočet klouzavého průměru</a></p>
<p><a href="#k12">12. Od liniových grafů ke grafům sloupcovým</a></p>
<p><a href="#k13">13. Výběr části datového rámce při vykreslování grafu</a></p>
<p><a href="#k14">14. Zobecnění předchozího příkladu &ndash; zpracování numerických dat ve všech sloupcích</a></p>
<p><a href="#k15">15. Validace dat v&nbsp;Pythonu</a></p>
<p><a href="#k16">*** 16. Validace s&nbsp;využitím knihovny Voluptuous</a></p>
<p><a href="#k17">*** 17. Validace s&nbsp;využitím knihovny Opulent Pandas</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady a datovými soubory</a></p>
<p><a href="#k19">19. Články s&nbsp;informacemi o různých způsobech validace datových struktur</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Knihovna Pandas: zobrazení datových rámců, vykreslení grafů a validace dat</h2>

<p>Ve druhém článku o knihovně <i>Pandas</i> se budeme zabývat třemi tématy.
Nejprve si ukážeme způsob zobrazení datových rámců, a to jak jejich obsahu, tak
i struktury, velikosti, základních statistických informací atd. Dále si
popíšeme, jak lze zobrazit jednoduché grafy (prozatím grafy liniové a taktéž
grafy sloupcové) s&nbsp;využitím možností nabízených jak knihovnou
<i>Pandas</i>, tak i knihovnou <i>Matplotlib</i>. A konečně v&nbsp;závěrečné
části článku si ukážeme některé možnosti validace dat uložených v&nbsp;datových
rámcích.</p>

<p>Připomeňme si, že knihovna <i>Pandas</i> nabízí uživatelům-programátorům
tuto funkcionalitu:</p>

<ol>
<li>Načtení dat z&nbsp;různých datových zdrojů do datových rámců (CSV, TSV, databáze, tabulkové procesory, ...).</li>
<li>Programová konstrukce datových rámců.</li>
<li>Prohlížení obsahu datových rámců.</li>
<li>Iterace nad daty, řazení a další podobné operace (bude ukázáno příště).</li>
<li>Spojování, seskupování a změna tvaru dat (taktéž bude ukázáno příště).</li>
<li>Práce s&nbsp;takzvanými sériemi (většinou získanými z&nbsp;datových rámců).</li>
<li>Vykreslování grafů z&nbsp;údajů získaných z&nbsp;datových rámců (základy si ukážeme dnes).</li>
</ol>



<p><a name="k02"></a></p>
<h2 id="k02">2. Nové datové typy podporované knihovnou Pandas</h2>

<p>Společně s&nbsp;knihovnou Pandas je dodávána i deklarace nových datových
typů, které jsou vypsány v&nbsp;tabulce pod tímto odstavcem. Důležité jsou
především první dva typy, tedy <strong>Series</strong> odvozený od
jednodimenzionálního pole knihovny <i>Numpy</i> a <strong>DataFrame</strong>
popsaný v&nbsp;předchozím článku. Nesmíme ovšem zapomenout ani na datové typy
určené pro reprezentaci časových údajů popř.&nbsp;o rozšíření typů
z&nbsp;knihovny <i>Numpy</i> o možnost reprezentace neexistující hodnoty: NULL
resp.&nbsp;N/A:</p>

<table>
<tr><th> #</th><th>Datový typ</th><th>Stručný popis</th></tr>
<tr><td> 1</td><td>Series</td><td>odvozeno od 1D pole knihovny Numpy, rozšířeno o popis os</td></tr>
<tr><td> 2</td><td>DataFrame</td><td>reprezentace dat uložených do tabulky s&nbsp;popisem os (sloupců, řádků)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>DatetimeTZDtype</td><td>datum s&nbsp;přidanou informací o časové zóně</td></tr>
<tr><td> 4</td><td>PeriodDtype</td><td>reprezentace časové periody (offsetu)</td></tr>
<tr><td> 5</td><td>IntervalDtype</td><td>reprezentace numerického intervalu (odvozeno od dalších typů, například <i>int64</i> atd.)</td></tr>
<tr><td> 6</td><td>Int8Dtype</td><td>typ <strong>int8</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td> 7</td><td>Int16Dtype</td><td>typ <strong>int16</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td> 8</td><td>Int32Dtype</td><td>typ <strong>int32</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td> 9</td><td>Int64Dtype</td><td>typ <strong>int64</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td>10</td><td>UInt8Dtype</td><td>typ <strong>uint8</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td>11</td><td>UInt16Dtype</td><td>typ <strong>uint16</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td>12</td><td>UInt32Dtype</td><td>typ <strong>uint32</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td>13</td><td>UInt64Dtype</td><td>typ <strong>uint64</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td>14</td><td>CategoricalDtype</td><td>kategorie (odvozeno od jazyka R, bude popsáno příště)</td></tr>
<tr><td>15</td><td>SparseDtype</td><td>použito pro ukládání řídkých polí (bude popsáno příště)</td></tr>
<tr><td>16</td><td>StringDtype</td><td>rozšíření řetězců; prozatím ve fázi experimentálního rozšíření</td></tr>
<tr><td>17</td><td>BooleanDtype</td><td>rozšíření pravdivostního typu; prozatím ve fázi experimentálního rozšíření</td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zobrazení obsahu datového rámce</h2>

<p>V&nbsp;praktické části dnešního článku si nejdříve ukážeme způsob získání a
popř.&nbsp;i výpisu základních informací o datových rámcích. Samotné zobrazení
obsahu datového rámce je triviální &ndash; postačuje referenci na datový rámec
předat funkci <strong>print</strong>, která automaticky obsah datového rámce
převede na řetězec, který následně vypíše:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading data file with custom format. separator + skip rows specification."""</i>
&nbsp;
import pandas
&nbsp;
df = pandas.read_csv("denni_kurz.txt", sep="|", skiprows=1)
&nbsp;
df["kurz"] = pandas.to_numeric(df["kurz"].str.replace(',','.'), errors='coerce')
&nbsp;
print(df)
</pre>

<p>Výsledek:</p>

<pre>
                  země        měna  množství  kód    kurz
0            Austrálie       dolar         1  AUD  16.231
1             Brazílie        real         1  BRL   4.160
2            Bulharsko         lev         1  BGN  13.467
3                 Čína  žen-min-pi         1  CNY   3.381
4               Dánsko      koruna         1  DKK   3.536
5                  EMU        euro         1  EUR  26.340
6             Filipíny        peso       100  PHP  46.038
7             Hongkong       dolar         1  HKD   2.864
8           Chorvatsko        kuna         1  HRK   3.481
9                Indie       rupie       100  INR  29.950
10           Indonesie       rupie      1000  IDR   1.567
11              Island      koruna       100  ISK  16.330
12              Izrael  nový šekel         1  ILS   6.649
13            Japonsko         jen       100  JPY  21.383
14        Jižní Afrika        rand         1  ZAR   1.445
15              Kanada       dolar         1  CAD  17.011
16  Korejská republika         won       100  KRW   1.990
17            Maďarsko      forint       100  HUF   7.328
18            Malajsie     ringgit         1  MYR   5.425
19              Mexiko        peso         1  MXN   1.104
20                 MMF         ZPČ         1  XDR  31.598
21              Norsko      koruna         1  NOK   2.471
22         Nový Zéland       dolar         1  NZD  15.416
23              Polsko       zlotý         1  PLN   5.900
24            Rumunsko         leu         1  RON   5.405
25               Rusko        rubl       100  RUB  29.180
26            Singapur       dolar         1  SGD  16.530
27             Švédsko      koruna         1  SEK   2.577
28           Švýcarsko       frank         1  CHF  24.363
29             Thajsko        baht       100  THB  73.313
30             Turecko        lira         1  TRY   2.911
31                 USA       dolar         1  USD  22.201
32      Velká Británie       libra         1  GBP  29.464
</pre>

<p>Zobrazit lze i část datového rámce. Prvních <i>n</i> řádků (ve výchozím
nastavení pět řádků) se vypíše metodou <strong>head</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading data file with custom format. separator + skip rows specification."""</i>
&nbsp;
import pandas
&nbsp;
df = pandas.read_csv("denni_kurz.txt", sep="|", skiprows=1)
&nbsp;
df["kurz"] = pandas.to_numeric(df["kurz"].str.replace(',','.'), errors='coerce')
&nbsp;
print(df.head())
</pre>

<p>Výsledek:</p>

<pre>
        země        měna  množství  kód    kurz
0  Austrálie       dolar         1  AUD  16.231
1   Brazílie        real         1  BRL   4.160
2  Bulharsko         lev         1  BGN  13.467
3       Čína  žen-min-pi         1  CNY   3.381
4     Dánsko      koruna         1  DKK   3.536
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zobrazení podrobnějších informací o datovém rámci</h2>

<p>O datových rámcích je možné získat i další informace. Důležitá je mnohdy
informace o typech sloupců, což je problematika, které jsme se již částečně
dotkli minule:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading data file with custom format. separator + skip rows specification."""</i>
&nbsp;
import pandas
&nbsp;
df = pandas.read_csv("denni_kurz.txt", sep="|", skiprows=1)
&nbsp;
df["kurz"] = pandas.to_numeric(df["kurz"].str.replace(',','.'), errors='coerce')
&nbsp;
print(df.dtypes)
</pre>

<p>Výsledek ukazuje, jakého datového typu jsou položky v&nbsp;jednotlivých
sloupcích:</p>

<pre>
země         object
měna         object
množství      int64
kód          object
kurz        float64
dtype: object
</pre>

<p>V&nbsp;dalším textu využijeme uspořádaný seznam jmen všech sloupců:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading data file with custom format. separator + skip rows specification."""</i>
&nbsp;
import pandas
&nbsp;
df = pandas.read_csv("denni_kurz.txt", sep="|", skiprows=1)
&nbsp;
df["kurz"] = pandas.to_numeric(df["kurz"].str.replace(',','.'), errors='coerce')
&nbsp;
print(df.columns)
</pre>

<p>Výsledek, se kterým je možné nakládat jako s&nbsp;běžnou sekvencí:</p>

<pre>
Index(['země', 'měna', 'množství', 'kód', 'kurz'], dtype='object')
</pre>

<p>Podrobnější informace o datovém rámci, obsazení paměti atd. zajistí funkce
<strong>info</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading data file with custom format. separator + skip rows specification."""</i>
&nbsp;
import pandas
&nbsp;
df = pandas.read_csv("denni_kurz.txt", sep="|", skiprows=1)
&nbsp;
df["kurz"] = pandas.to_numeric(df["kurz"].str.replace(',','.'), errors='coerce')
&nbsp;
print(df.info())
</pre>

<p>Výsledek:</p>

<pre>
&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 33 entries, 0 to 32
Data columns (total 5 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   země      33 non-null     object 
 1   měna      33 non-null     object 
 2   množství  33 non-null     int64  
 3   kód       33 non-null     object 
 4   kurz      33 non-null     float64
dtypes: float64(1), int64(1), object(3)
memory usage: 1.4+ KB
</pre>

<p>U této funkce (<strong>info</strong>) lze řídit podrobnost informací
parametrem <strong>verbose</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading data file with custom format. separator + skip rows specification."""</i>
&nbsp;
import pandas
&nbsp;
df = pandas.read_csv("denni_kurz.txt", sep="|", skiprows=1)
&nbsp;
df["kurz"] = pandas.to_numeric(df["kurz"].str.replace(',','.'), errors='coerce')
&nbsp;
print(df.info(verbose=False))
</pre>

<p>Výsledek je nyní méně podrobný:</p>

<pre>
&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 33 entries, 0 to 32
Columns: 5 entries, země to kurz
dtypes: float64(1), int64(1), object(3)
memory usage: 1.4+ KB
None
</pre>

<p>Další informace se týkají os (<i>axes</i>), tedy osy vertikální i
horizontální (v&nbsp;rámci tabulky), dále počtu dimenzí (prakticky vždy dvě),
tvaru (počet řádků&times;počet sloupců) a velikosti (výsledek počet
řádků&times;počet sloupců):</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading data file with custom format. separator + skip rows specification."""</i>
&nbsp;
import pandas
&nbsp;
df = pandas.read_csv("denni_kurz.txt", sep="|", skiprows=1)
&nbsp;
df["kurz"] = pandas.to_numeric(df["kurz"].str.replace(',','.'), errors='coerce')
&nbsp;
print("Axes: ", df.axes)
print("Ndim: ", df.ndim)
print("Size: ", df.size)
print("Shape: ", df.shape)
</pre>

<p>Výsledek:</p>

<pre>
Axes:  [RangeIndex(start=0, stop=33, step=1), Index(['země', 'měna', 'množství', 'kód', 'kurz'], dtype='object')]
Ndim:  2
Size:  165
Shape:  (33, 5)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Základní statistické informace o datech uložených v&nbsp;rámci</h2>

<p>Metodou <strong>describe</strong> lze získat základní (a mnohdy velmi
užitečné) statistické informace o záznamech uložených v&nbsp;datovém rámci.
Podívejme se nyní na způsob použití této metody:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading data file with custom format. separator + skip rows specification."""</i>
&nbsp;
import pandas
&nbsp;
df = pandas.read_csv("denni_kurz.txt", sep="|", skiprows=1)
&nbsp;
df["kurz"] = pandas.to_numeric(df["kurz"].str.replace(',','.'), errors='coerce')
&nbsp;
print(df.describe())
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
          množství       kurz
count    33.000000  33.000000
mean     55.272727  14.879061
std     174.929141  15.649135
min       1.000000   1.104000
25%       1.000000   3.381000
50%       1.000000   7.328000
75%     100.000000  22.201000
max    1000.000000  73.313000
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že návratový typ je opět
datovým rámcem, o čemž se můžeme velmi snadno přesvědčit:</div></p>

<pre>
import pandas
&nbsp;
df = pandas.read_csv("denni_kurz.txt", sep="|", skiprows=1)
&nbsp;
df["kurz"] = pandas.to_numeric(df["kurz"].str.replace(',','.'), errors='coerce')
&nbsp;
print(df.describe().info())
</pre>

<p>Tentokrát získáme tento výstup:</p>

<pre>
&lt;class 'pandas.core.frame.DataFrame'&gt;
Index: 8 entries, count to max
Data columns (total 2 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   množství  8 non-null      float64
 1   kurz      8 non-null      float64
dtypes: float64(2)
memory usage: 192.0+ bytes
None
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Jazyk Python a knihovna Matplotlib</h2>

<p>S&nbsp;knihovnou <i>Matplotlib</i> jsme se již na tomto serveru několikrát
setkali (viz též odkazy na další informační zdroje uvedené na konci článku),
takže již víme, že <i>Matplotlib</i> je knihovna určená pro programovací jazyk
Python, která slouží k&nbsp;tvorbě a částečně i k&nbsp;interaktivním úpravám
různých typů grafů, například klasických grafů funkcí jedné proměnné, ovšem i
mnoha grafů více či méně složitějších (grafy více funkcí, trojrozměrné grafy,
polární grafy, zobrazení kontur atd.). Možnosti knihovny Matplotlib jsou
skutečně značně široké a přitom je její použití poměrně jednoduché a snadno
pochopitelné, pokud samozřejmě vynecháme některé pokročilejší operace. Jednou
ze zajímavých možností představuje použití této knihovny v&nbsp;interaktivním
prostředí IPython popř.&nbsp;IPython Notebook, zejména v&nbsp;kombinaci
s&nbsp;další populární Pythonovskou knihovnou Numpy. A v&nbsp;kontextu tohoto
článku je ještě důležitější to, že Matplotlib dokáže velmi dobře kooperovat i
s&nbsp;knihovnou Pandas.</p>

<img src="https://i.iinfo.cz/images/318/jupyter2-graphs-1.png" class="image-408046" alt="&#160;" width="812" height="612" />
<p><i>Obrázek 1: Jeden typ grafu podporovaný knihovnou Matplotlib &ndash;
Funkce typu z=f(x,y) zobrazená formou vrstevnic.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zobrazení jednoduchého grafu</h2>

<p>V&nbsp;dalším demonstračním příkladu si ukážeme, jakým způsobem je možné
vykreslit jednoduchý liniový graf, a to zcela bez použití knihovny
<i>Pandas</i>. Použijeme pouze základní knihovnu <i>csv</i>, dále knihovnu
<i>Numpy</i> pro výpočet regresní přímky a konečně knihovnu <i>Matplotlib</i>
pro vykreslení grafu z&nbsp;dat načtených ze souboru typu CSV:</p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
import sys
import csv
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># Check if command line argument is specified (it is mandatory).</i>
if len(sys.argv) &lt; 2:
    print("Usage:")
    print("  kafka_lags.py input_file.csv")
    print("Example:")
    print("  kafka_lags.py overall.csv")
    sys.exit(1)
&nbsp;
<i># First command line argument should contain name of input CSV.</i>
input_csv = sys.argv[1]
&nbsp;
<i># Try to open the CSV file specified.</i>
with open(input_csv) as csv_input:
    <i># And open this file as CSV</i>
    csv_reader = csv.reader(csv_input)
&nbsp;
    <i># Skip header</i>
    next(csv_reader, None)
    rows = 0
&nbsp;
    <i># Read all rows from the provided CSV file</i>
    data = [(row[0], int(row[1])) for row in csv_reader]
    print(data)
&nbsp;
<i># Linear regression</i>
time = [item[0] for item in data]
messages = [item[1] for item in data]
&nbsp;
<i># Linear regression</i>
x = np.arange(0, len(messages))
coef = np.polyfit(x, messages, 1)
poly1d_fn = np.poly1d(coef)
&nbsp;
<i># Create new histogram graph</i>
plt.plot(messages, "b", poly1d_fn(np.arange(0, len(messages))), 'y--')
&nbsp;
<i># Title of a graph</i>
plt.title("Messages in Kafka")
&nbsp;
<i># Add a label to x-axis</i>
plt.xlabel("Time")
&nbsp;
<i># Add a label to y-axis</i>
plt.ylabel("Messages")
&nbsp;
plt.legend(loc="upper right")
&nbsp;
<i># Set the plot layout</i>
plt.tight_layout()
&nbsp;
<i># And save the plot into raster format and vector format as well</i>
plt.savefig("kafka_lags.png")
plt.savefig("kafka_lags.svg")
&nbsp;
<i># Try to show the plot on screen</i>
plt.show()
</pre>

<p>Po spuštění tohoto příkladu by se měl vykreslit tento graf:</p>

*** image ***
<p><i>Obrázek 2: Graf zobrazený předchozím demonstračním příkladem.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Kooperace mezi Pandas a Matplotlibem</h2>

<p>Předchozí příklad byl ve skutečnosti zbytečně složitý a současně ne vždy
plně funkční. Data jsme totiž načítali s&nbsp;využitím standardní knihovny
<strong>csv</strong> bez jejich kontroly. A v&nbsp;tomto konkrétním případě
byla vstupní data získána exportem <a
href="https://grafana.com/">z&nbsp;Grafany</a>, která (z&nbsp;nějakého důvodu)
přidává na konec souboru prázdný řádek, který není zpracován korektně. Příklad
tedy změníme, a to tak, že CSV načteme přímo do datového rámce, což je
bezpečnější a současně i z&nbsp;pohledu programátora kratší řešení:</p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># Check if command line argument is specified (it is mandatory).</i>
if len(sys.argv) &lt; 2:
    print("Usage:")
    print("  plot_kafka_lags_pandas.py input_file.csv")
    print("Example:")
    print("  plot_kafka_lags_pandas.py overall.csv")
    sys.exit(1)
&nbsp;
<i># First command line argument should contain name of input CSV.</i>
input_csv = sys.argv[1]
&nbsp;
df = pd.read_csv(input_csv)
&nbsp;
print(df.info())
print(df.describe())
&nbsp;
<i># Linear regression</i>
time = df["Time"]
messages = df["topic : uploads"]
&nbsp;
<i># Linear regression</i>
x = np.arange(0, len(messages))
coef = np.polyfit(x, messages, 1)
poly1d_fn = np.poly1d(coef)
&nbsp;
<i># Create new histogram graph</i>
plt.plot(messages, "b", poly1d_fn(np.arange(0, len(messages))), 'y--')
&nbsp;
<i># Title of a graph</i>
plt.title("Messages in Kafka")
&nbsp;
<i># Add a label to x-axis</i>
plt.xlabel("Time")
&nbsp;
<i># Add a label to y-axis</i>
plt.ylabel("Messages")
&nbsp;
plt.legend(loc="upper right")
&nbsp;
<i># Set the plot layout</i>
plt.tight_layout()
&nbsp;
<i># And save the plot into raster format and vector format as well</i>
plt.savefig("kafka_lags_pandas.png")
plt.savefig("kafka_lags_pandas.svg")
&nbsp;
<i># Try to show the plot on screen</i>
plt.show()
</pre>

<p>Výsledek by v&nbsp;tomto případě měl vypadat takto:</p>

*** image ***
<p><i>Obrázek 3: Graf zobrazený předchozím demonstračním příkladem.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přímé vykreslení grafu bez použití knihovny Matplotlib</h2>

<p>Ve skutečnosti je možné jít ve zjednodušování a zkracování programového kódu
ještě dále, protože se o vytvoření grafu může postarat přímo knihovna Pandas.
Objekt představující datový rámec podporuje i metodu <strong>plot</strong> pro
přímé vykreslení grafu:</p>

<pre>
df = pd.read_csv(input_csv)
&nbsp;
<i># Create new histogram graph</i>
df.plot(x="Time", y="topic : uploads")
</pre>

<p>Samotné vykreslení grafu (či jeho tisk) je provedeno přes Matplotlib:</p>

<pre>
plt.show()
</pre>

<p>Úplný zdrojový kód takto upraveného příkladu vypadá následovně (můžeme
vidět, že vykreslení je skutečně otázka několika programových řádků):</p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
import sys
import pandas as pd
import matplotlib.pyplot as plt
&nbsp;
<i># Check if command line argument is specified (it is mandatory).</i>
if len(sys.argv) &lt; 2:
    print("Usage:")
    print("  plot_kafka_lags_pandas_2.py input_file.csv")
    print("Example:")
    print("  plot_kafka_lags_pandas_2.py overall.csv")
    sys.exit(1)
&nbsp;
<i># First command line argument should contain name of input CSV.</i>
input_csv = sys.argv[1]
&nbsp;
df = pd.read_csv(input_csv)
&nbsp;
print(df.info())
print(df.describe())
&nbsp;
<i># Create new histogram graph</i>
df.plot(x="Time", y="topic : uploads")
&nbsp;
<i># Try to show the plot on screen</i>
plt.show()
</pre>

<p>Výsledek prozatím vypadá jednodušeji, což je ovšem cena za to, že má celý
skript délku jen několika řádků:</p>

*** image ***
<p><i>Obrázek 4: Graf zobrazený předchozím demonstračním příkladem.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Přidání klouzavého průměru do grafu</h2>

<p>Zkusme nyní do grafu přidat i druhý průběh s&nbsp;klouzavým průměrem (tedy
s&bdquo;vyhlazenou&ldquo; křivkou). Výpočet klouzavého průměru je relativně
přímočarý, pouze musíme zajistit, že se do datového rámce přidá další sloupec
s&nbsp;výsledky. Povšimněte si, jak se využívají nám již známé metody
<strong>df.shape</strong> popř.&nbsp;<strong>df.iloc</strong>:</p>

<pre>
for i in range(0, df.shape[0]-2):
    df.loc[df.index[i+2], 'SMA_3'] = np.round(((df.iloc[i, 1]+ df.iloc[i+1, 1] +df.iloc[i+2, 1])/3),1)
</pre>

<p>Nevýhodou tohoto přístupu je fakt, že pokud bude nutné změnit
&bdquo;okno&ldquo; pro výpočet klouzavého průměru, bude se muset změnit i
samotný zdrojový kód. Lepší řešení si ukážeme <a href="#k11">v&nbsp;navazující
kapitole</a>.</p>

<p>Úplný zdrojový kód takto upraveného demonstračního příkladu vypadá
následovně:</p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># Check if command line argument is specified (it is mandatory).</i>
if len(sys.argv) &lt; 2:
    print("Usage:")
    print("  plot_kafka_lags_pandas_sma_3.py input_file.csv")
    print("Example:")
    print("  plot_kafka_lags_pandas_sma_3.py overall.csv")
    sys.exit(1)
&nbsp;
<i># First command line argument should contain name of input CSV.</i>
input_csv = sys.argv[1]
&nbsp;
df = pd.read_csv(input_csv)
&nbsp;
for i in range(0, df.shape[0]-2):
    df.loc[df.index[i+2], 'SMA_3'] = np.round(((df.iloc[i,1]+ df.iloc[i+1,1] +df.iloc[i+2,1])/3),1)
&nbsp;
print(df)
print(df.info())
print(df.describe())
&nbsp;
<i># Create new histogram graph</i>
df.plot(x="Time", y=["topic : uploads", "SMA_3"])
&nbsp;
<i># Try to show the plot on screen</i>
plt.show()
</pre>

<p>S&nbsp;výsledkem:</p>

*** image ***
<p><i>Obrázek 5: Graf zobrazený předchozím demonstračním příkladem.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vylepšený výpočet klouzavého průměru</h2>

<p>V&nbsp;předchozí kapitole ukázaný výpočet klouzavého průměru byl sice
funkční, ovšem nepříliš přehledný. Existuje však i možnost použít při výpočtu
přímo možností nabízených samotnou knihovnou Pandas, konkrétně metody
<strong>rolling</strong> a <strong>mean</strong>. Takto jednoduše lze do
datového rámce přidat další sloupec, který bude obsahovat klouzavý průměr
hodnot ze sloupce druhého (druhý sloupec má index=1):</p>

<pre>
df['SMA_3'] = df.iloc[:,1].rolling(window=3).mean()
</pre>

<p>Výsledný datový rámec bude vypadat následovně:</p>

<pre>
                     Time  topic : uploads      SMA_3
0     2020-12-01 06:14:00               13        NaN
1     2020-12-01 06:14:20               13        NaN
2     2020-12-01 06:14:40                9  11.666667
3     2020-12-01 06:15:00               18  13.333333
4     2020-12-01 06:15:20               18  15.000000
...                   ...              ...        ...
1076  2020-12-01 12:12:40               33  29.666667
1077  2020-12-01 12:13:00               31  30.666667
1078  2020-12-01 12:13:20               31  31.666667
1079  2020-12-01 12:13:40               17  26.333333
1080  2020-12-01 12:14:00                6  18.000000
</pre>

<p><div class="rs-tip-major">Poznámka: první dvě chybějící hodnoty ve sloupci
&bdquo;SMA_3&ldquo; při vykreslování grafu nevadí.</div></p>

<p>Úplný zdrojový kód tohoto příkladu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># Check if command line argument is specified (it is mandatory).</i>
if len(sys.argv) &lt; 2:
    print("Usage:")
    print("  plot_kafka_lags_pandas_sma_3.py input_file.csv")
    print("Example:")
    print("  plot_kafka_lags_pandas_sma_3.py overall.csv")
    sys.exit(1)
&nbsp;
<i># First command line argument should contain name of input CSV.</i>
input_csv = sys.argv[1]
&nbsp;
df = pd.read_csv(input_csv)
&nbsp;
df['SMA_3'] = df.iloc[:,1].rolling(window=3).mean()
&nbsp;
print(df)
print(df.info())
print(df.describe())
&nbsp;
<i># Create new histogram graph</i>
df.plot(x="Time", y=["topic : uploads", "SMA_3"])
&nbsp;
<i># Try to show the plot on screen</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 6: Graf zobrazený předchozím demonstračním příkladem.</i></p>

<p>Změna příkladu tak, aby se počítal klouzavý průměr z&nbsp;dvaceti hodnot, je
otázkou jediné úpravy (zvýrazněné tučně):</p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
&nbsp;
<i># Check if command line argument is specified (it is mandatory).</i>
if len(sys.argv) &lt; 2:
    print("Usage:")
    print("  plot_kafka_lags_pandas_sma_20.py input_file.csv")
    print("Example:")
    print("  plot_kafka_lags_pandas_sma_20.py overall.csv")
    sys.exit(1)
&nbsp;
<i># First command line argument should contain name of input CSV.</i>
input_csv = sys.argv[1]
&nbsp;
df = pd.read_csv(input_csv)
&nbsp;
df['SMA_20'] = df.iloc[:,1].rolling(<strong>window=20</strong>).mean()
&nbsp;
print(df)
print(df.info())
print(df.describe())
&nbsp;
<i># Create new histogram graph</i>
df.plot(x="Time", y=["topic : uploads", "SMA_20"])
&nbsp;
<i># Try to show the plot on screen</i>
plt.show()
&nbsp;
<i># Create new histogram graph</i>
df.plot(x="Time", y="SMA_20")
&nbsp;
<i># Try to show the plot on screen</i>
plt.show()
</pre>

*** image ***
<p><i>Obrázek 7: Graf zobrazený předchozím demonstračním příkladem.</i></p>

*** image ***
<p><i>Obrázek 8: Křivka zobrazující pouze průběh klouzavého průměru.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Od liniových grafů ke grafům sloupcovým</h2>

<p>Vykreslit je možné i sloupcové grafy. V&nbsp;následujícím demonstračním
příkladu budou zpracovávána tato data (výsledky benchmarků):</p>

<pre>
Width       Height      ANSI C      Cython #1   Cython #2   Cython #3   Numba #1/interpret  Numba #2    Numba #3    Numba #4
2048        0           0,00        0,03        0,02        0,03        0,03                0,76        5,92        5,89
2048        100         0,06        1,03        0,22        0,08        1,84                2,18        6,22        6,20
2048        200         0,11        2,10        0,42        0,14        3,59                3,56        6,60        6,58
2048        300         0,17        3,17        0,61        0,21        5,56                4,92        6,94        6,93
2048        400         0,23        4,04        0,81        0,26        7,16                6,38        7,30        7,33
2048        500         0,29        5,05        0,99        0,31        9,63                7,90        7,64        7,67
2048        600         0,34        6,16        1,19        0,37        11,62               9,27        8,01        8,04
2048        700         0,40        7,04        1,38        0,43        12,56               10,52       8,38        8,37
2048        800         0,46        8,17        1,56        0,48        14,20               11,99       8,70        8,83
2048        900         0,52        9,51        1,81        0,56        16,23               13,58       9,09        9,19
2048        1000        0,58        10,63       2,18        0,60        17,91               14,89       9,41        9,41
2048        1100        0,64        11,11       2,24        0,66        19,58               16,68       9,90        9,77
2048        1200        0,70        12,48       2,36        0,72        23,49               18,01       10,19       10,15
2048        1300        0,75        13,09       2,67        0,78        23,08               19,33       10,47       10,57
2048        1400        0,81        14,26       2,75        0,83        25,22               20,30       11,11       10,91
2048        1500        0,87        16,19       3,01        0,89        26,88               22,10       11,24       11,47
2048        1600        0,92        16,83       3,13        0,96        28,87               23,56       11,64       11,55
2048        1700        0,98        17,41       3,33        1,01        30,80               24,73       11,98       11,92
2048        1800        1,04        18,25       3,52        1,07        33,12               26,90       12,51       12,71
2048        1900        1,10        20,10       3,71        1,13        33,82               28,46       12,67       12,84
2048        2000        1,16        20,80       3,97        1,18        37,45               29,40       13,44       13,01
2048        2100        1,21        22,08       4,13        1,24        37,80               30,15       13,52       13,39
2048        2200        1,27        23,65       4,49        1,30        39,46               32,09       13,75       13,81
2048        2300        1,33        23,51       4,48        1,36        42,15               33,15       14,07       14,21
2048        2400        1,39        25,66       4,70        1,42        44,28               35,19       14,31       14,38
2048        2500        1,45        25,77       5,07        1,50        46,78               36,94       14,85       14,84
2048        2600        1,51        26,98       5,28        1,53        46,53               38,30       15,12       15,39
2048        2700        1,58        27,82       5,52        1,60        48,47               40,44       15,56       15,40
2048        2800        1,63        28,56       5,48        1,66        50,65               40,87       15,70       15,96
2048        2900        1,68        29,92       5,74        1,73        54,63               44,21       16,49       16,23
2048        3000        1,85        30,59       6,04        1,77        53,87               42,86       16,78       16,46
2048        3100        1,80        31,48       6,11        1,87        55,37               45,98       16,88       17,18
2048        3200        1,85        33,32       6,37        1,89        58,27               45,04       17,12       17,49
2048        3300        1,92        37,60       6,55        1,94        59,18               49,68       17,68       17,79
2048        3400        1,97        36,76       6,72        2,35        61,80               53,67       17,99       17,84
2048        3500        2,03        35,78       6,89        2,06        66,23               52,20       18,99       18,69
</pre>

<p>Povšimněte si, jaký znak je použit pro reprezentaci plovoucí desetinné
čárky/tečky. Data je nutné načíst a posléze zkonvertovat hodnoty
v&nbsp;příslušných sloupcích, například takto:</p>

<pre>
data_columns = ["ANSI C", "Cython #1", "Cython #2", "Cython #3", "Numba #1/interpret", "Numba #2", "Numba #3", "Numba #4"]
&nbsp;
for data_column in data_columns:
    df[data_column] = pd.to_numeric(df[data_column].str.replace(',', '.'), errors='coerce')
</pre>

<p>Vykreslení běžného liniového grafu:</p>

<pre>
<strong>df.plot</strong>(x="Height", y=data_columns)
</pre>

*** image ***
<p><i>Obrázek 9: Liniový graf.</i></p>

<p>Vykreslení sloupcového grafu je mírně odlišné a vypadá takto:</p>

<pre>
<strong>df.plot.bar</strong>(x="Height", y=data_columns)
</pre>

*** image ***
<p><i>Obrázek 10: Sloupcový graf.</i></p>

<p>Opět si pro úplnost ukažme celý zdrojový kód skriptu, který zajistí
vykreslení grafů:</p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
import sys
import pandas as pd
import matplotlib.pyplot as plt
&nbsp;
<i># Check if command line argument is specified (it is mandatory).</i>
if len(sys.argv) &lt; 2:
    print("Usage:")
    print("  plot_benchmark_results_line_chart.py ")
    print("Example:")
    print("  plot_benchmark_results_line_chart.py data.tsv")
    sys.exit(1)
&nbsp;
<i># First command line argument should contain name of input CSV.</i>
input_file = sys.argv[1]
&nbsp;
df = pd.read_csv(input_file, sep="\t")
&nbsp;
data_columns = ["ANSI C", "Cython #1", "Cython #2", "Cython #3", "Numba #1/interpret", "Numba #2", "Numba #3", "Numba #4"]
&nbsp;
for data_column in data_columns:
    df[data_column] = pd.to_numeric(df[data_column].str.replace(',', '.'), errors='coerce')
&nbsp;
print(df)
print()
&nbsp;
print(df.info())
print()
&nbsp;
print(df.describe())
print()
&nbsp;
&nbsp;
<i># Create new histogram graph</i>
df.plot(x="Height", y=data_columns)
&nbsp;
<i># Try to show the plot on screen</i>
plt.show()
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
import sys
import pandas as pd
import matplotlib.pyplot as plt
&nbsp;
<i># Check if command line argument is specified (it is mandatory).</i>
if len(sys.argv) &lt; 2:
    print("Usage:")
    print("  plot_benchmark_results_bar_chart.py ")
    print("Example:")
    print("  plot_benchmark_results_bar_chart.py data.tsv")
    sys.exit(1)
&nbsp;
<i># First command line argument should contain name of input CSV.</i>
input_file = sys.argv[1]
&nbsp;
df = pd.read_csv(input_file, sep="\t")
&nbsp;
data_columns = ["ANSI C", "Cython #1", "Cython #2", "Cython #3", "Numba #1/interpret", "Numba #2", "Numba #3", "Numba #4"]
&nbsp;
for data_column in data_columns:
    df[data_column] = pd.to_numeric(df[data_column].str.replace(',', '.'), errors='coerce')
&nbsp;
print(df)
print()
&nbsp;
print(df.info())
print()
&nbsp;
print(df.describe())
print()
&nbsp;
&nbsp;
<i># Create new histogram graph</i>
df.plot.bar(x="Height", y=data_columns)
&nbsp;
<i># Try to show the plot on screen</i>
plt.show()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Výběr části datového rámce při vykreslování grafu</h2>

<p>Předchozí sloupcový graf nebyl příliš přehledný, protože obsahoval mnoho
údajů s&nbsp;rozdílným měřítkem. Samozřejmě nám nic nebrání v&nbsp;tom, abychom
z&nbsp;datového rámce vybrali pouze určité řádky. Třída, jejímiž jsou datové
rámce instancemi, přetěžuje operátor pro indexaci, takže je možné například
napsat:</p>

<pre>
df = df[5:10]
</pre>

<p>Tímto přiřazením dojde ke zúžení datového rámce na pět řádků a tudíž i
k&nbsp;vykreslení odlišného grafu:</p>

*** image ***
<p><i>Obrázek 11: Zmenšení datového rámce na pět řádků.</i></p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
import sys
import pandas as pd
import matplotlib.pyplot as plt
&nbsp;
<i># Check if command line argument is specified (it is mandatory).</i>
if len(sys.argv) &lt; 2:
    print("Usage:")
    print("  plot_benchmark_results_bar_chart_2.py ")
    print("Example:")
    print("  plot_benchmark_results_bar_chart_2.py data.tsv")
    sys.exit(1)
&nbsp;
<i># First command line argument should contain name of input CSV.</i>
input_file = sys.argv[1]
&nbsp;
df = pd.read_csv(input_file, sep="\t")
&nbsp;
df = df[5:10]
data_columns = ["ANSI C", "Cython #1", "Cython #2", "Cython #3", "Numba #1/interpret", "Numba #2", "Numba #3", "Numba #4"]
&nbsp;
for data_column in data_columns:
    df[data_column] = pd.to_numeric(df[data_column].str.replace(',', '.'), errors='coerce')
&nbsp;
print(df)
print()
&nbsp;
print(df.info())
print()
&nbsp;
print(df.describe())
print()
&nbsp;
&nbsp;
<i># Create new histogram graph</i>
df.plot.bar(x="Height", y=data_columns)
&nbsp;
<i># Try to show the plot on screen</i>
plt.show()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zobecnění předchozího příkladu &ndash; zpracování numerických dat ve všech sloupcích</h2>

<p>Seznam sloupců:</p>

<pre>
data_columns = ["ANSI C", "Cython #1", "Cython #2", "Cython #3", "Numba #1/interpret", "Numba #2", "Numba #3", "Numba #4"]
</pre>

<p>lze nahradit za:</p>

<pre>
data_columns = df.columns[1:]
</pre>

<p>což vede k&nbsp;obecnějšímu příkladu, v&nbsp;němž se jména sloupců
v&nbsp;explicitně zapsané podobě nevyskytují:</p>

<pre>
<i>#!/usr/bin/env python3</i>
&nbsp;
import sys
import pandas as pd
import matplotlib.pyplot as plt
&nbsp;
<i># Check if command line argument is specified (it is mandatory).</i>
if len(sys.argv) &lt; 2:
    print("Usage:")
    print("  plot_benchmark_results.py ")
    print("Example:")
    print("  plot_benchmark_results.py data.tsv")
    sys.exit(1)
&nbsp;
<i># First command line argument should contain name of input CSV.</i>
input_file = sys.argv[1]
&nbsp;
df = pd.read_csv(input_file, sep="\t")
&nbsp;
df = df[10:]
<strong>data_columns = df.columns[1:]</strong>
&nbsp;
for data_column in data_columns:
    df[data_column] = pd.to_numeric(df[data_column].str.replace(',', '.'), errors='coerce')
&nbsp;
print(df)
print()
&nbsp;
print(df.info())
print()
&nbsp;
print(df.describe())
print()
&nbsp;
&nbsp;
<i># Create new histogram graph</i>
df.plot.bar(x=df.columns[0], y=data_columns)
&nbsp;
<i># Try to show the plot on screen</i>
plt.show()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Validace dat v&nbsp;Pythonu</h2>

<p>V&nbsp;závěrečné části článku se ve stručnosti budeme zabývat problematikou
validace dat v&nbsp;datových rámcích. Validaci dat je možné využít v&nbsp;mnoha
oblastech. Představme si například dokumentovou databázi, složitý konfigurační
soubor nebo asi nejlépe klasickou webovou službu, která přijme data ve formátu
JSON, převede je knihovní funkcí do nativní datové struktury (typicky do
slovníku seznamů či hierarchicky uspořádaných slovníků) a následně provede
validaci této struktury, ovšem nikoli programově (testováním jednotlivých
atributů), ale na základě deklarativního popisu této struktury. Například
můžeme specifikovat, že v&nbsp;atributu nazvaném &bdquo;price&ldquo; by mělo
být uloženo nezáporné číslo menší než 100000, v&nbsp;atributu pojmenovaném
&bdquo;valid_from&ldquo; musí být uložen řetězec odpovídající skutečnému datu
(to už nelze otestovat primitivním regulárním výrazem, ale složitějším
predikátem) a v&nbsp;atributu &bdquo;login&ldquo; bude buď nick uživatele nebo
bude tento atribut obsahovat <strong>null/None</strong>
(popř.&nbsp;alternativně nebude existovat vůbec).</p>

<p>V&nbsp;případě formátu JSON je samozřejmě možné validaci provádět už nad
vstupními daty přes <a href="http://json-schema.org/">JSON Schema</a>, dtto při
použití jazyka XML pomocí <a
href="https://en.wikipedia.org/wiki/XML_Schema_(W3C)">XML Schema</a> (a dalších
podobných nástrojů), ovšem možnosti těchto nástrojů jsou omezené &ndash; stále
se totiž jedná &bdquo;pouze&ldquo; o DSL, v&nbsp;nichž se složitější kritéria
zapisují velmi složitě a většinou i nečitelně.</p>

<p>Nás dnes ovšem bude zajímat především validace tabulkových dat
reprezentovaných v&nbsp;knihovně Pandas datovými rámci.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Validace s&nbsp;využitím knihovny Voluptuous</h2>

<p>Ukažme si nejprve validaci dat s&nbsp;využitím obecné validační knihovny
Voluptuous. V&nbsp;příkladu je použito velmi jednoduché schéma předepisující
typy dat ve sloupcích:</p>

<pre>
schema = Schema((int, int, float))
</pre>

<p>Datovým rámcem můžeme procházet s&nbsp;využitím iterátoru a postupně
validovat jeho řádky převedené na n-tice (což není nejrychlejší řešení &ndash;
výhodnější je procházení daty po sloupcích a nikoli po řádcích):</p>

<pre>
for record in df.itertuples():
    validate_item(schema, record)
</pre>

<p>Celý příklad:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading CSV file that contains column with integer values (some are missing)."""</i>
&nbsp;
import pandas
from voluptuous import Schema
from voluptuous import Invalid
&nbsp;
&nbsp;
def <strong>print_data_frame</strong>(df):
    print("Data frame")
    print("---------------------------")
    print(df)
    print()
&nbsp;
    print("Column types")
    print("---------------------------")
    print(df.dtypes)
&nbsp;
&nbsp;
def <strong>validate_item</strong>(schema, data):
    try:
        print("\n\n")
        print(schema)
        print(data)
        schema(data)
        print("pass")
    except Exception as e:
        print(e)
&nbsp;
&nbsp;
def <strong>validate_data_frame</strong>(data_frame):
    print()
&nbsp;
    print("Validation")
    print("---------------------------")
&nbsp;
    schema = Schema((int, int, float))
&nbsp;
    for record in df.itertuples():
        validate_item(schema, record)
&nbsp;
&nbsp;
df = pandas.read_csv("missing_integer_values.csv")
print_data_frame(df)
validate_data_frame(df)
</pre>

<p>Ve druhém příkladu je ukázán vlastní validátor představovaný funkcí, která
pro nevalidní data vyhodí výjimku:</p>

<pre>
def <strong>pos</strong>(value):
    if type(value) is not int or value &lt;= 0:
        raise Invalid("positive integer value expected, but got {v} instead".format(v=value))
</pre>

<p>Příklad použití ve schématu:</p>

<pre>
schema = Schema(<strong>(pos, pos, float)</strong>)
</pre>

<p>Celý příklad:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading CSV file that contains column with integer values (some are missing)."""</i>
&nbsp;
import pandas
from voluptuous import Schema
from voluptuous import Invalid
&nbsp;
&nbsp;
def <strong>print_data_frame</strong>(df):
    print("Data frame")
    print("---------------------------")
    print(df)
    print()
&nbsp;
    print("Column types")
    print("---------------------------")
    print(df.dtypes)
&nbsp;
&nbsp;
def <strong>validate_item</strong>(schema, data):
    try:
        print("\n\n")
        print(schema)
        print(data)
        schema(data)
        print("pass")
    except Exception as e:
        print(e)
&nbsp;
&nbsp;
def <strong>pos</strong>(value):
    if type(value) is not int or value &lt;= 0:
        raise Invalid("positive integer value expected, but got {v} instead".format(v=value))
&nbsp;
&nbsp;
def <strong>validate_data_frame</strong>(data_frame):
    print()
&nbsp;
    print("Validation")
    print("---------------------------")
&nbsp;
    schema = Schema(<strong>(pos, pos, float)</strong>)
&nbsp;
    for record in df.itertuples():
        validate_item(schema, record)
&nbsp;
&nbsp;
df = pandas.read_csv("missing_integer_values.csv")
print_data_frame(df)
validate_data_frame(df)
</pre>

<p>Test, zda třetí sloupec neobsahuje hodnoty NaN:</p>

<pre>
def <strong>pos</strong>(value):
    if type(value) is not int or value &lt;= 0:
        raise Invalid("positive integer value expected, but got {v} instead".format(v=value))
&nbsp;
&nbsp;
def <strong>nnat</strong>(value):
    if type(value) is not float or math.isnan(value):
        raise Invalid("non-NaN value expected, but got {v} instead".format(v=value))
&nbsp;
&nbsp;
schema = Schema(<strong>(pos, pos, nnat)</strong>)
</pre>

<p>Celý příklad:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading CSV file that contains column with integer values (some are missing)."""</i>
&nbsp;
&nbsp;
import pandas
import math
from voluptuous import Schema
from voluptuous import Invalid
&nbsp;
&nbsp;
def <strong>print_data_frame</strong>(df):
    print("Data frame")
    print("---------------------------")
    print(df)
    print()
&nbsp;
    print("Column types")
    print("---------------------------")
    print(df.dtypes)
&nbsp;
&nbsp;
def <strong>validate_item</strong>(schema, data):
    try:
        print("\n\n")
        print(schema)
        print(data)
        schema(data)
        print("pass")
    except Exception as e:
        print(e)
&nbsp;
&nbsp;
def <strong>pos</strong>(value):
    if type(value) is not int or value &lt;= 0:
        raise Invalid("positive integer value expected, but got {v} instead".format(v=value))
&nbsp;
&nbsp;
def <strong>nnat</strong>(value):
    if type(value) is not float or math.isnan(value):
        raise Invalid("non-NaN value expected, but got {v} instead".format(v=value))
&nbsp;
&nbsp;
def <strong>validate_data_frame</strong>(data_frame):
    print()
&nbsp;
    print("Validation")
    print("---------------------------")
&nbsp;
    schema = Schema((pos, pos, nnat))
&nbsp;
    for record in df.itertuples():
        validate_item(schema, record)
&nbsp;
&nbsp;
df = pandas.read_csv("missing_integer_values.csv")
print_data_frame(df)
validate_data_frame(df)
</pre>

<p>Schéma popisující záznam v&nbsp;datovém rámci ve formě mapy_</p>

<pre>
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading CSV file that contains column with integer values (some are missing)."""</i>
&nbsp;
&nbsp;
import pandas
import math
from voluptuous import Schema
from voluptuous import Invalid
from voluptuous import Any
&nbsp;
&nbsp;
def <strong>print_data_frame</strong>(df):
    print("Data frame")
    print("---------------------------")
    print(df)
    print()
&nbsp;
    print("Column types")
    print("---------------------------")
    print(df.dtypes)
&nbsp;
&nbsp;
def <strong>validate_item</strong>(schema, data):
    try:
        print("\n")
        # print(schema)
        print(data)
        schema(data._asdict())
        print("pass")
    except Exception as e:
        print(e)
&nbsp;
&nbsp;
def <strong>posint</strong>(value):
    if type(value) is not int or value &lt;= 0:
        raise Invalid("positive integer value expected, but got {v} instead".format(v=value))
&nbsp;
&nbsp;
def <strong>posfloat</strong>(value):
    if type(value) is not float or value &lt;= 0:
        raise Invalid("positive float value expected, but got {v} instead".format(v=value))
&nbsp;
&nbsp;
def <strong>validate_data_frame</strong>(data_frame):
    print()
&nbsp;
    print("Validation")
    print("---------------------------")
&nbsp;
    schema = Schema({
        "Index": int,
        "_1": posint,
        "_2": posint,
        "Change": Any(str, float),
        "Language": str,
        "Ratings": posfloat,
        "Changep": float,
        })
&nbsp;
    for record in df.itertuples():
        validate_item(schema, record)
&nbsp;
&nbsp;
df = pandas.read_csv("tiobe.tsv", sep="\t")
print_data_frame(df)
validate_data_frame(df)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading CSV file that contains column with integer values (some are missing)."""</i>
&nbsp;
&nbsp;
import pandas
import math
from voluptuous import Schema
from voluptuous import Invalid
from voluptuous import Any
&nbsp;
&nbsp;
def <strong>print_data_frame</strong>(df):
    print("Data frame")
    print("---------------------------")
    print(df)
    print()
&nbsp;
    print("Column types")
    print("---------------------------")
    print(df.dtypes)
&nbsp;
&nbsp;
def <strong>validate_item</strong>(schema, data):
    try:
        print("\n")
        # print(schema)
        print(data)
        schema(data._asdict())
        print("pass")
    except Exception as e:
        print(e)
&nbsp;
&nbsp;
def <strong>posint</strong>(value):
    if type(value) is not int or value &lt;= 0:
        raise Invalid("positive integer value expected, but got {v} instead".format(v=value))
&nbsp;
&nbsp;
def <strong>posfloat</strong>(value):
    if type(value) is not float or value &lt;= 0:
        raise Invalid("positive float value expected, but got {v} instead".format(v=value))
&nbsp;
&nbsp;
def <strong>validate_data_frame</strong>(data_frame):
    print()
&nbsp;
    print("Validation")
    print("---------------------------")
&nbsp;
    schema = Schema({
        "Index": int,
        "Year2020": posint,
        "Year2019": posint,
        "Change": Any(str, float),
        "Language": str,
        "Ratings": posfloat,
        "Changep": float,
        })
&nbsp;
    for record in df.itertuples():
        validate_item(schema, record)
&nbsp;
&nbsp;
colnames = ("Year2020", "Year2019", "Change", "Language", "Ratings", "Changep")
df = pandas.read_csv("tiobe.tsv", sep="\t", names=colnames, header=1)
print_data_frame(df)
validate_data_frame(df)
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Validace s&nbsp;využitím knihovny Opulent Pandas</h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading CSV file that contains column with integer values (some are missing)."""</i>
&nbsp;
&nbsp;
import pandas
import math
from opulent_pandas import Schema, TypeValidator, Required
&nbsp;
&nbsp;
def <strong>print_data_frame</strong>(df):
    print("Data frame")
    print("---------------------------")
    print(df)
    print()
&nbsp;
    print("Column types")
    print("---------------------------")
    print(df.dtypes)
&nbsp;
&nbsp;
def <strong>validate_data_frame</strong>(data_frame):
    schema = Schema({
        Required('Block size'): [TypeValidator(int)],
        Required('Time to read'): [TypeValidator(int)],
        })
&nbsp;
    schema.validate(data_frame)
&nbsp;
&nbsp;
df = pandas.read_csv("integer_values.csv")
print_data_frame(df)
validate_data_frame(df)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading CSV file that contains column with integer values (some are missing)."""</i>
&nbsp;
&nbsp;
import pandas
import math
from opulent_pandas import Schema, Required, BaseValidator, Error
&nbsp;
&nbsp;
def <strong>print_data_frame</strong>(df):
    print("Data frame")
    print("---------------------------")
    print(df)
    print()
&nbsp;
    print("Column types")
    print("---------------------------")
    print(df.dtypes)
&nbsp;
&nbsp;
class <strong>PosintValidator</strong>(BaseValidator):
    def <strong>validate</strong>(self, values):
        if not (values &gt; 0).all():
            raise Error("positive integer value expected")
&nbsp;
&nbsp;
def <strong>validate_data_frame</strong>(data_frame):
&nbsp;
    schema = Schema({
        Required('Block size'): [PosintValidator()],
        Required('Time to read'): [PosintValidator()],
        })

    schema.validate(data_frame)
&nbsp;
&nbsp;
df = pandas.read_csv("integer_values.csv")
print_data_frame(df)
validate_data_frame(df)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading CSV file that contains column with integer values (some are missing)."""</i>
&nbsp;
&nbsp;
import pandas
import math
from opulent_pandas import Schema, Required, BaseValidator, Error
&nbsp;
&nbsp;
def <strong>print_data_frame</strong>(df):
    print("Data frame")
    print("---------------------------")
    print(df)
    print()
&nbsp;
    print("Column types")
    print("---------------------------")
    print(df.dtypes)
&nbsp;
&nbsp;
class <strong>PosintValidator</strong>(BaseValidator):
    def <strong>validate</strong>(self, values):
        if not (values &gt; 0).all():
            raise Error("positive integer value expected")
&nbsp;
&nbsp;
class <strong>NotNaNValidator</strong>(BaseValidator):
    def <strong>validate</strong>(self, values):
        for value in values:
            if math.isnan(value):
                raise Error("regular float value expected, but got: {}".format(value))
&nbsp;
&nbsp;
def <strong>validate_data_frame</strong>(data_frame):
&nbsp;
    schema = Schema({
        Required('Block size'): [PosintValidator()],
        Required('Time to read'): [NotNaNValidator()],
        })
&nbsp;
    schema.validate(data_frame)
&nbsp;
&nbsp;
df = pandas.read_csv("missing_integer_values.csv")
print_data_frame(df)
validate_data_frame(df)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>"""Reading CSV file that contains column with integer values (some are missing)."""</i>
&nbsp;
&nbsp;
import pandas
import numpy as np
import math
from opulent_pandas import Schema, Required, BaseValidator, TypeValidator, Error, Any
&nbsp;
&nbsp;
def <strong>print_data_frame</strong>(df):
    print("Data frame")
    print("---------------------------")
    print(df)
    print()
&nbsp;
    print("Column types")
    print("---------------------------")
    print(df.dtypes)
&nbsp;
&nbsp;
class <strong>PosintValidator</strong>(BaseValidator):
    def <strong>validate</strong>(self, values):
        if not (values &gt; 0).all():
            raise Error("positive integer value expected")
&nbsp;
&nbsp;
class <strong>IntOrNAValidator</strong>(BaseValidator):
    def <strong>validate</strong>(self, values):
        for value in values:
            if (type(value) == np.int64):
                return
            if not (pandas.isna(value)):
                raise Error("Int value or NA expected")
&nbsp;
&nbsp;
def <strong>validate_data_frame</strong>(data_frame):
&nbsp;
    schema = Schema({
        Required('Block size'): [PosintValidator()],
        Required('Time to read'): [IntOrNAValidator()],
        })
&nbsp;
    schema.validate(data_frame)
&nbsp;
&nbsp;
df = pandas.read_csv("missing_integer_values.csv", dtype={"Time to read": "Int64"})
print_data_frame(df)
validate_data_frame(df)
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady a datovými soubory</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
Python 3 a nejnovější stabilní verzi knihovny Pandas byly uloženy do Git
repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>data_frame_info_1.py</td><td>výpis obsahu datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_1.py</a></td></tr>
<tr><td> 2</td><td>data_frame_info_2.py</td><td>výpis prvních pěti řádků z&nbsp;datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_2.py</a></td></tr>
<tr><td> 3</td><td>data_frame_info_3.py</td><td>výpis informace o typech sloupců v&nbsp;datovém rámci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_3.py</a></td></tr>
<tr><td> 4</td><td>data_frame_info_4.py</td><td>výpis uspořádaného seznamu jmen všech sloupců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_4.py</a></td></tr>
<tr><td> 5</td><td>data_frame_info_5.py</td><td>podrobnější informace o datovém rámci, obsazení paměti atd.</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_5.py</a></td></tr>
<tr><td> 6</td><td>data_frame_info_6.py</td><td>podrobnější informace o datovém rámci, obsazení paměti atd.</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_6.py</a></td></tr>
<tr><td> 7</td><td>data_frame_info_7.py</td><td>popis os, počtu dimenzí, tvaru a velikosti datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_7.py</a></td></tr>
<tr><td> 8</td><td>data_frame_info_8.py</td><td>základní statistické informace o datech uložených v&nbsp;rámci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_8.py</a></td></tr>
<tr><td> 9</td><td>data_frame_info_9.py</td><td>výsledkem metody <strong>info</strong> je nový datový rámec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_9.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>plot_kafka_lags.py</td><td>zobrazení jednoduchého grafu bez použití knihovny Pandas</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags.py</a></td></tr>
<tr><td>11</td><td>plot_kafka_lags_pandas.py</td><td>zobrazení jednoduchého grafu s&nbsp;použitím knihovny Pandas</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas.py</a></td></tr>
<tr><td>12</td><td>plot_kafka_lags_pandas_2.py</td><td>snazší způsob vykreslení grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_2.py</a></td></tr>
<tr><td>13</td><td>plot_kafka_lags_pandas_sma_3.py</td><td>přidání klouzavého průměru do grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_sma_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_sma_3.py</a></td></tr>
<tr><td>14</td><td>plot_kafka_lags_pandas_sma_3_.py</td><td>vylepšení předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_sma_3_.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_sma_3_.py</a></td></tr>
<tr><td>15</td><td>plot_kafka_lags_pandas_sma_10.py</td><td>klouzavý průměr přes deset hodnot</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_sma_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_sma_10.py</a></td></tr>
<tr><td>16</td><td>plot_benchmark_results_line_chart.py</td><td>liniový graf</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_line_chart.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_line_chart.py</a></td></tr>
<tr><td>17</td><td>plot_benchmark_results_bar_chart_1.py</td><td>sloupcový graf</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_bar_chart_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_bar_chart_1.py</a></td></tr>
<tr><td>18</td><td>plot_benchmark_results_bar_chart_2.py</td><td>výběr části datového rámce při vykreslování grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_bar_chart_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_bar_chart_2.py</a></td></tr>
<tr><td>19</td><td>plot_benchmark_results_bar_chart_3.py</td><td>zobecnění předchozího příkladu &ndash; zpracování numerických dat ve všech sloupcích</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_bar_chart_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_bar_chart_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td>check_types_1.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_1.py</a></td></tr>
<tr><td>21</td><td>check_types_2.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_2.py</a></td></tr>
<tr><td>22</td><td>check_types_3.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_3.py</a></td></tr>
<tr><td>23</td><td>check_types_4.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_4.py</a></td></tr>
<tr><td>24</td><td>check_types_5.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_5.py</a></td></tr>
<tr><td>25</td><td>opulent_pandas_1.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>opulent-pandas</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_1.py</a></td></tr>
<tr><td>26</td><td>opulent_pandas_2.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>opulent-pandas</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_2.py</a></td></tr>
<tr><td>27</td><td>opulent_pandas_3.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>opulent-pandas</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_3.py</a></td></tr>
<tr><td>28</td><td>opulent_pandas_4.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>opulent-pandas</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_4.py</a></td></tr>
</table>

<p>Demonstrační příklady načítají následující soubory s&nbsp;daty:</p>

<table>
<tr><th>#</th><th>Datový soubor</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td>1</td><td>integer_values.csv</td><td>dvousloupcová tabulka s&nbsp;celými čísly</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/integer_values.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/integer_values.csv</a></td></tr>
<tr><td>2</td><td>missing_integer_values.csv</td><td>dvousloupcová tabulka s&nbsp;celými čísly, z&nbsp;nichž některé chybí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/missing_integer_values.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/missing_integer_values.csv</a></td></tr>
<tr><td>3</td><td>timestamps.csv</td><td>tabulka s&nbsp;časovými údaji</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/timestamps.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/timestamps.csv</a></td></tr>
<tr><td>4</td><td>custom_timestamps.csv</td><td>tabulka s&nbsp;časovými údaji používajícími nestandardní formát</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/custom_timestamps.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/custom_timestamps.csv</a></td></tr>
<tr><td>5</td><td>denni_kurz.txt</td><td>semistrukturovaný soubor s&nbsp;nestandardními oddělovači</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/denni_kurz.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/denni_kurz.txt</a></td></tr>
<tr><td>6</td><td>tiobe.tsv</td><td>data získaná ze stránek Tiobe indexu ve formátu TSV</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/tiobe.tsv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/tiobe.tsv</a></td></tr>
<tr><td>7</td><td>tiobe.txt</td><td>data získaná ze stránek Tiobe indexu v&nbsp;textovém formátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/tiobe.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/tiobe.txt</a></td></tr>
<tr><td>8</td>benchmarks1.tsv<td></td><td>výsledky benchmarků několika implementací Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/benchmarks1.tsv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/benchmarks1.tsv</a></td></tr>
<tr><td>9</td>benchmarks2.tsv<td></td><td>výsledky benchmarků několika implementací Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/benchmarks2.tsv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/benchmarks2.tsv</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Články s&nbsp;informacemi o různých způsobech validace datových struktur</h2>

<p>V&nbsp;této kapitole jsou uvedeny odkazy na články, v&nbsp;nichž jsme se
zabývali různými způsoby validace datových struktur. Pravděpodobně nejlepší
přístup nalezneme v&nbsp;knihovně <strong>clojure.spec</strong> určené pro
jazyk Clojure, ovšem i pro Python existuje několik velmi užitečných knihoven,
například již výše zmíněná a použitá knihovna <i>Voluptuous</i>:</p>

<ol>

<li>Validace dat s&nbsp;využitím knihovny spec v&nbsp; Clojure 1.9.0<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/</a>
</li>

<li>Validace dat s&nbsp;využitím knihovny spec v&nbsp; Clojure 1.9.0 (dokončení)<br />
<a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0-dokonceni/">https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0-dokonceni/</a>
</li>

<li>Validace datových struktur v&nbsp;Pythonu pomocí knihoven Schemagic a Schema<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-pomoci-knihoven-schemagic-a-schema/</a>
</li>

<li>Validace datových struktur v&nbsp; Pythonu (2. část)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-2-cast/</a>
</li>

<li>Validace datových struktur v&nbsp; Pythonu (dokončení)<br />
<a href="https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/">https://www.root.cz/clanky/validace-datovych-struktur-v-pythonu-dokonceni/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Plotting with matplotlib<br />
<a href="https://pandas.pydata.org/pandas-docs/version/0.13/visualization.html">https://pandas.pydata.org/pandas-docs/version/0.13/visualization.html</a>
</li>

<li>Plot With Pandas: Python Data Visualization for Beginners<br />
<a href="https://realpython.com/pandas-plot-python/">https://realpython.com/pandas-plot-python/</a>
</li>

<li>Pandas Dataframe: Plot Examples with Matplotlib and Pyplot<br />
<a href="https://queirozf.com/entries/pandas-dataframe-plot-examples-with-matplotlib-pyplot">https://queirozf.com/entries/pandas-dataframe-plot-examples-with-matplotlib-pyplot</a>
</li>

<li>Opulent-Pandas na PyPi<br />
<a href="https://pypi.org/project/opulent-pandas/">https://pypi.org/project/opulent-pandas/</a>
</li>

<li>pandas_validator na PyPi<br />
<a href="https://pypi.org/project/pandas_validator/">https://pypi.org/project/pandas_validator/</a>
</li>

<li>pandas-validator (dokumentace)<br />
<a href="https://pandas-validator.readthedocs.io/en/latest/">https://pandas-validator.readthedocs.io/en/latest/</a>
</li>

<li>7 Best Python Libraries for Validating Data<br />
<a href="https://www.yeahhub.com/7-best-python-libraries-validating-data/">https://www.yeahhub.com/7-best-python-libraries-validating-data/</a>
</li>

<li>Universally unique identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">https://en.wikipedia.org/wiki/Universally_unique_identifier</a>
</li>

<li>Nullable integer data type<br />
<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/integer_na.html">https://pandas.pydata.org/pandas-docs/stable/user_guide/integer_na.html</a>
</li>

<li>pandas.read_csv<br />
<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html</a>
</li>

<li>How to define format when using pandas to_datetime?<br />
<a href="https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime">https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime</a>
</li>

<li>Pandas : skip rows while reading csv file to a Dataframe using read_csv() in Python<br />
<a href="https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/">https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/</a>
</li>

<li>Skip rows during csv import pandas<br />
<a href="https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas">https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas</a>
</li>

<li>Denni kurz<br />
<a href="https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt">https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt</a>
</li>

<li>UUID objects according to RFC 4122 (knihovna pro Python)<br />
<a href="https://docs.python.org/3.5/library/uuid.html#uuid.uuid4">https://docs.python.org/3.5/library/uuid.html#uuid.uuid4</a>
</li>

<li>Object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Object_identifier">https://en.wikipedia.org/wiki/Object_identifier</a>
</li>

<li>Digital object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Digital_object_identifier">https://en.wikipedia.org/wiki/Digital_object_identifier</a>
</li>

<li>voluptuous na (na PyPi)<br />
<a href="https://pypi.python.org/pypi/voluptuous">https://pypi.python.org/pypi/voluptuous</a>
</li>

<li>Repositář knihovny voluptuous na GitHubu<br />
<a href="https://github.com/alecthomas/voluptuous">https://github.com/alecthomas/voluptuous</a>
</li>

<li>pytest-voluptuous 1.0.2 (na PyPi)<br />
<a href="https://pypi.org/project/pytest-voluptuous/">https://pypi.org/project/pytest-voluptuous/</a>
</li>

<li>pytest-voluptuous (na GitHubu)<br />
<a href="https://github.com/F-Secure/pytest-voluptuous">https://github.com/F-Secure/pytest-voluptuous</a>
</li>

<li>schemagic 0.9.1 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schemagic/0.9.1">https://pypi.python.org/pypi/schemagic/0.9.1</a>
</li>

<li>Schemagic / Schemagic.web (na GitHubu)<br />
<a href="https://github.com/Mechrophile/schemagic">https://github.com/Mechrophile/schemagic</a>
</li>

<li>schema 0.6.7 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schema">https://pypi.python.org/pypi/schema</a>
</li>

<li>schema (na GitHubu)<br />
<a href="https://github.com/keleshev/schema">https://github.com/keleshev/schema</a>
</li>

<li>XML Schema validator and data conversion library for Python<br />
<a href="https://github.com/brunato/xmlschema">https://github.com/brunato/xmlschema</a>
</li>

<li>xmlschema 0.9.7<br />
<a href="https://pypi.python.org/pypi/xmlschema/0.9.7">https://pypi.python.org/pypi/xmlschema/0.9.7</a>
</li>

<li>jsonschema 2.6.0<br />
<a href="https://pypi.python.org/pypi/jsonschema">https://pypi.python.org/pypi/jsonschema</a>
</li>

<li>warlock 1.3.0<br />
<a href="https://pypi.python.org/pypi/warlock">https://pypi.python.org/pypi/warlock</a>
</li>

<li>Python Virtual Environments – A Primer<br />
<a href="https://realpython.com/python-virtual-environments-a-primer/">https://realpython.com/python-virtual-environments-a-primer/</a>
</li>

<li>pip 1.1 documentation: Requirements files<br />
<a href="https://pip.readthedocs.io/en/1.1/requirements.html">https://pip.readthedocs.io/en/1.1/requirements.html</a>
</li>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>mock 2.0.0<br />
<a href="https://pypi.python.org/pypi/mock">https://pypi.python.org/pypi/mock</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Unit testing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit testing<br />
<a href="https://cs.wikipedia.org/wiki/Unit_testing">https://cs.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>5 Differences between clojure.spec and Schema<br />
<a href="https://lispcast.com/clojure.spec-vs-schema/">https://lispcast.com/clojure.spec-vs-schema/</a>
</li>

<li>Schema: Clojure(Script) library for declarative data description and validation<br />
<a href="https://github.com/plumatic/schema">https://github.com/plumatic/schema</a>
</li>

<li>clojure.spec - Rationale and Overview<br />
<a href="https://clojure.org/about/spec">https://clojure.org/about/spec</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>
