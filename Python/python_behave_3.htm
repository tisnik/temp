<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Behavior-driven development v Pythonu s využitím knihovny Behave (závěrečná část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Behavior-driven development v Pythonu s využitím knihovny Behave (závěrečná část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Behavior-driven development v&nbsp;Pythonu s&nbsp;využitím knihovny Behave (závěrečná část)</a></p>
<p><a href="#k02">*** 2. Zopakování příkladu, popsaného v&nbsp;závěru předchozího článku</a></p>
<p><a href="#k03">3. Výsledek běhu příkladu při použití existující URL i adresy neexistující</a></p>
<p><a href="#k04">*** 4. Druhý demonstrační příklad &ndash; vyhledání uživatelů na GitHubu podle jejich uživatelského jména</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">6. Výsledek spuštění druhého demonstračního příkladu</a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. Úprava příkladu pro uživatele GitHubu, u nichž není vyplněna společnost</a></p>
<p><a href="#k10">10. Výsledky běhu čtvrtého demonstračního příkladu</a></p>
<p><a href="#k11">*** 11. Další vlastnosti nabízené knihovnou Behave a jazykem Gherkin</a></p>
<p><a href="#k12">12. Použití víceřádkového textu v&nbsp;testovacím scénáři</a></p>
<p><a href="#k13">13. Demonstrační příklad &ndash; použití víceřádkového textu v&nbsp;sekci <strong>Given</strong></a></p>
<p><a href="#k14">14. Výsledek běhu demonstračního příkladu</a></p>
<p><a href="#k15">15. Demonstrační příklad &ndash; použití víceřádkového textu v&nbsp;sekci <strong>Then</strong></a></p>
<p><a href="#k16">16. Výsledek běhu demonstračního příkladu</a></p>
<p><a href="#k17">*** 17. Použití přípravných kroků (<strong>Background</strong>)</a></p>
<p><a href="#k18">*** 18. Specifikace datového typu proměnných použitých v&nbsp;popisu kroků testů</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Behavior-driven development v&nbsp;Pythonu s&nbsp;využitím knihovny Behave (závěrečná část)</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Zopakování příkladu, popsaného v&nbsp;závěru předchozího článku</h2>

<pre>
<strong>Feature</strong>: Smoke test
&nbsp;
  <strong>Scenario</strong>: Check the GitHub API entry point
    <strong>Given</strong> GitHub is accessible
    <strong>When</strong> I access the API endpoint /
    <strong>Then</strong> I should receive 200 status code
</pre>

<pre>
.
├── feature_list.txt
├── features
│   ├── environment.py
│   ├── smoketest.feature
│   └── steps
│       └── common.py
├── requirements.in
├── requirements.txt
└── run_tests.sh
&nbsp;
2 directories, 7 files
</pre>

<pre>
import json
import os.path
&nbsp;
from behave.log_capture import capture
import requests
&nbsp;
&nbsp;
def _is_accessible(context, accepted_codes=None):
    accepted_codes = accepted_codes or {200, 401}
    url = context.api_url
    try:
        res = requests.get(url)
        return res.status_code in accepted_codes
    except requests.exceptions.ConnectionError as e:
        print("Connection error: {e}".format(e=e))
    return False
&nbsp;
&nbsp;
def before_all(context):
    <i>"""Perform setup before the first event."""</i>
    context.is_accessible = _is_accessible
    context.api_url = "https://api.github.com"
</pre>

<pre>
import json
&nbsp;
from behave import given, then, when
from urllib.parse import urljoin
import requests
&nbsp;
&nbsp;
@<strong>given</strong>('GitHub is accessible')
def initial_state(context):
    assert context.is_accessible(context)
&nbsp;
&nbsp;
@<strong>when</strong>('I access the API endpoint {url}')
def access_endpoint(context, url):
    context.response = requests.get(context.api_url + url)
&nbsp;
&nbsp;
@<strong>then</strong>('I should receive {status:d} status code')
def check_status_code(context, status):
    <i>"""Check the HTTP status code returned by the REST API."""</i>
    assert context.response.status_code == status
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Výsledek běhu příkladu při použití existující URL i adresy neexistující</h2>

<p>V&nbsp;případě, že je URL pro REST API GitHubu zapsáno korektně, měl by test
po svém spuštění vypsat tyto řádky oznamující, že se (jediný) testovací scénář
se třemi kroky provedl bez chyby:</p>

<pre>
Feature: Smoke test # features/smoketest.feature:1
&nbsp;
  Scenario: Check the GitHub API entry point  # features/smoketest.feature:4
    Given GitHub is accessible                # features/steps/common.py:8 0.647s
    When I access the API endpoint /          # features/steps/common.py:13 0.634s
    Then I should receive 200 status code     # features/steps/common.py:18 0.000s
&nbsp;
1 feature passed, 0 failed, 0 skipped
1 scenario passed, 0 failed, 0 skipped
3 steps passed, 0 failed, 0 skipped, 0 undefined
Took 0m1.281s
</pre>

<p>Pokud naopak URL schválně zapíšeme špatně, dojde k&nbsp;chybě, a to už
v&nbsp;kroku <strong>Given</strong>, tj.&nbsp;vlastně při přípravě testu.
Povšimněte si, že se kromě vlastní chyby vypíšou i informace o adrese, na
kterou jsme se snažili připojit:</p>

<pre>
Feature: Smoke test # features/smoketest.feature:1
&nbsp;
  Scenario: Check the GitHub API entry point  # features/smoketest.feature:4
    Given GitHub is accessible                # features/steps/common.py:8 0.415s
      Traceback (most recent call last):
        File "/usr/local/lib/python3.4/dist-packages/behave/model.py", line 1456, in run
          match.run(runner.context)
        File "/usr/local/lib/python3.4/dist-packages/behave/model.py", line 1903, in run
          self.func(context, *args, **kwargs)
        File "features/steps/common.py", line 10, in initial_state
          assert context.is_accessible(context)
      <strong>AssertionError</strong>
&nbsp;
      Captured logging:
      INFO:urllib3.connectionpool:Starting new HTTPS connection (1): <strong>xyzzy.github.com</strong>
&nbsp;
    When I access the API endpoint /          # None
    Then I should receive 200 status code     # None
&nbsp;
&nbsp;
Failing scenarios:
  features/smoketest.feature:4  Check the GitHub API entry point
&nbsp;
0 features passed, 1 failed, 0 skipped
0 scenarios passed, 1 failed, 0 skipped
0 steps passed, 1 failed, 2 skipped, 0 undefined
Took 0m0.415s
</pre>

<p><div class="rs-tip-major">Poznámka: chybná implementace testované funkce je
součástí upraveného demonstračního příkladu, jehož zdrojové kódy naleznete <a
href="https://github.com/tisnik/python-behave-demos/tree/master/github_test_version1_wrong_url">na
této adrese</a>.</div></p>

<p>Pokud naopak URL ponecháme a změníme očekávaný návratový kód, dostaneme tyto
zprávy (test spadne až v&nbsp;sekci <strong>Then</strong>):</p>

<pre>
Feature: Smoke test # features/smoketest.feature:1
&nbsp;
  @smoketest
  Scenario: Check the GitHub API entry point  # features/smoketest.feature:4
    Given GitHub is accessible                # features/steps/common.py:8 0.635s
    When I access the API endpoint /          # features/steps/common.py:13 0.616s
    Then I should receive 404 status code     # features/steps/common.py:18 0.000s
      Traceback (most recent call last):
        File "/usr/local/lib/python3.4/dist-packages/behave/model.py", line 1456, in run
          match.run(runner.context)
        File "/usr/local/lib/python3.4/dist-packages/behave/model.py", line 1903, in run
          self.func(context, *args, **kwargs)
        File "features/steps/common.py", line 21, in check_status_code
          assert context.response.status_code == status
      <strong>AssertionError</strong>
      &nbsp;
      Captured logging:
      INFO:urllib3.connectionpool:Starting new HTTPS connection (1): api.github.com
      INFO:urllib3.connectionpool:Starting new HTTPS connection (1): api.github.com
&nbsp;
&nbsp;
&nbsp;
Failing scenarios:
  features/smoketest.feature:4  Check the GitHub API entry point
&nbsp;
&nbsp;
0 features passed, 1 failed, 0 skipped
0 scenarios passed, 1 failed, 0 skipped
2 steps passed, 1 failed, 0 skipped, 0 undefined
Took 0m1.252s
</pre>

<p><div class="rs-tip-major">Poznámka: chybný test návratového kódu je součástí
upraveného demonstračního příkladu, jehož zdrojové kódy naleznete <a
href="https://github.com/tisnik/python-behave-demos/tree/master/github_test_version1_wrong_code">na
této adrese</a>.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Druhý demonstrační příklad &ndash; vyhledání uživatelů na GitHubu podle jejich uživatelského jména</h2>

<pre>
<strong>Feature</strong>: Smoke test
&nbsp;
  <strong>Scenario</strong>: Check the GitHub API entry point
    <strong>Given</strong> GitHub is accessible
    <strong>When</strong> I access the API endpoint /
    <strong>Then</strong> I should receive 200 status code
&nbsp;
  <strong>Scenario</strong>: Check the user search feature
    <strong>Given</strong> GitHub is accessible
    <strong>When</strong> I search for user with nick torvalds
    <strong>Then</strong> I should receive 200 status code
     <strong>And</strong> I should receive proper JSON response
     <strong>And</strong> I should find the user with full name Linus Torvalds
     <strong>And</strong> I should find that the user works for company Linux Foundation
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Implementace jednotlivých kroků testu</h2>

<pre>
import json
&nbsp;
from behave import given, then, when
from urllib.parse import urljoin
import requests
&nbsp;
&nbsp;
@<strong>given</strong>('GitHub is accessible')
def initial_state(context):
    assert context.is_accessible(context)
&nbsp;
&nbsp;
@<strong>given</strong>('System is running')
def running_system(context):
    """Ensure that the system is accessible."""
    assert is_accessible(context)
&nbsp;
&nbsp;
@<strong>when</strong>('I access the API endpoint {url}')
def access_endpoint(context, url):
    context.response = requests.get(context.api_url + url)
&nbsp;
&nbsp;
@<strong>when</strong>('I search for user with nick {nick}')
def search_for_user(context, nick):
    url = urljoin(urljoin(context.api_url, "users/"), nick)
    context.response = requests.get(url)
&nbsp;
&nbsp;
@<strong>then</strong>('I should receive {status:d} status code')
def check_status_code(context, status):
    """Check the HTTP status code returned by the REST API."""
    assert context.response.status_code == status
&nbsp;
&nbsp;
@<strong>then</strong>('I should receive proper JSON response')
def check_json_response(context):
    content_type = context.response.headers.get('content-type')
    assert content_type.startswith('application/json')
    context.data = context.response.json()
&nbsp;
&nbsp;
@<strong>then</strong>('I should find the user with full name {fullname}')
def check_user_full_name(context, fullname):
    assert context.data is not None
    assert 'name' in context.data
    value = context.data.get('name')
    assert value == fullname, "{e} != {v}".format(e=fullname, v=value)
&nbsp;
&nbsp;
@<strong>then</strong>('I should find that the user works for company {company}')
def check_company(context, company):
    assert context.data is not None
    assert 'company' in context.data
    value = context.data.get('company')
    assert value == company, "{e} != {v}".format(e=company, v=value)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Výsledek spuštění druhého demonstračního příkladu</h2>

<p>Po spuštění druhého příkladu by se měly zobrazit tyto zprávy znamenající, že
oba dva testovací scénáře dopadly podle očekávání správně:</p>

<pre>
Feature: Smoke test # features/smoketest.feature:1
&nbsp;
  @smoketest
  Scenario: Check the GitHub API entry point  # features/smoketest.feature:4
    Given GitHub is accessible                # features/steps/common.py:8 0.626s
    When I access the API endpoint /          # features/steps/common.py:19 0.638s
    Then I should receive 200 status code     # features/steps/common.py:30 0.000s
&nbsp;
  Scenario: Check the user search feature                              # features/smoketest.feature:9
    Given GitHub is accessible                                         # features/steps/common.py:8 0.627s
    When I search for user with nick torvalds                          # features/steps/common.py:24 0.660s
    Then I should receive 200 status code                              # features/steps/common.py:30 0.000s
    And I should receive proper JSON response                          # features/steps/common.py:36 0.000s
    And I should find the user with full name Linus Torvalds           # features/steps/common.py:43 0.000s
    And I should find that the user works for company Linux Foundation # features/steps/common.py:51 0.000s
&nbsp;
1 feature passed, 0 failed, 0 skipped
2 scenarios passed, 0 failed, 0 skipped
9 steps passed, 0 failed, 0 skipped, 0 undefined
Took 0m2.552s
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Třetí demonstrační příklad &ndash; použití tabulek se seznamem jmen uživatelů o očekávaných výsledků</h2>

<pre>
<strong>Feature</strong>: Smoke test
&nbsp;
  <strong>Scenario</strong>: Check the GitHub API entry point
    <strong>Given</strong> GitHub is accessible
    <strong>When</strong> I access the API endpoint /
    <strong>Then</strong> I should receive 200 status code
&nbsp; 
  <strong>Scenario</strong>: Check the user search feature
    <strong>Given</strong> GitHub is accessible
    <strong>When</strong> I search for user with nick torvalds
    <strong>Then</strong> I should receive 200 status code
     <strong>And</strong> I should receive proper JSON response
     <strong>And</strong> I should find the user with full name Linus Torvalds
     <strong>And</strong> I should find that the user works for company Linux Foundation
&nbsp;
  <strong>Scenario Outline</strong>: Check the user search feature, perform the search for more users
    <strong>Given</strong> GitHub is accessible
    <strong>When</strong> I search for user with nick <nick>
    <strong>Then</strong> I should receive 200 status code
     <strong>And</strong> I should receive proper JSON response
     <strong>And</strong> I should find the user with full name <fullname>
     <strong>And</strong> I should find that the user works for company <company>
&nbsp;
     <strong>Examples</strong>: users
     |nick|fullname|company|
     |torvalds|Linus Torvalds|Linux Foundation|
     |brammool|Bram Moolenaar|Zimbu Labs|
     |tisnik|Pavel Tišnovský|Red Hat, Inc.|
</pre>

<pre>
import json
&nbsp;
from behave import given, then, when
from urllib.parse import urljoin
import requests
&nbsp;
&nbsp;
@given('GitHub is accessible')
def initial_state(context):
    assert context.is_accessible(context)
&nbsp;
&nbsp;
@given('System is running')
def running_system(context):
    """Ensure that the system is accessible."""
    assert is_accessible(context)
&nbsp;
&nbsp;
@when('I access the API endpoint {url}')
def access_endpoint(context, url):
    context.response = requests.get(context.api_url + url)
&nbsp;
&nbsp;
@when('I search for user with nick {nick}')
def search_for_user(context, nick):
    url = urljoin(urljoin(context.api_url, "users/"), nick)
    context.response = requests.get(url)
&nbsp;
&nbsp;
@then('I should receive {status:d} status code')
def check_status_code(context, status):
    """Check the HTTP status code returned by the REST API."""
    assert context.response.status_code == status
&nbsp;
&nbsp;
@then('I should receive proper JSON response')
def check_json_response(context):
    content_type = context.response.headers.get('content-type')
    assert content_type.startswith('application/json')
    context.data = context.response.json()
&nbsp;
&nbsp;
@then('I should find the user with full name {fullname}')
def check_user_full_name(context, fullname):
    assert context.data is not None
    assert 'name' in context.data
    value = context.data.get('name')
    assert value == fullname, "{e} != {v}".format(e=fullname, v=value)
&nbsp;
&nbsp;
@then('I should find that the user works for company {company}')
def check_company(context, company):
    assert context.data is not None
    assert 'company' in context.data
    value = context.data.get('company')
    assert value == company, "{e} != {v}".format(e=company, v=value)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Výsledek spuštění třetího demonstračního příkladu</h2>

<pre>
Feature: Smoke test # features/smoketest.feature:1
&nbsp;
  @smoketest
  Scenario: Check the GitHub API entry point  # features/smoketest.feature:4
    Given GitHub is accessible                # features/steps/common.py:8 0.637s
    When I access the API endpoint /          # features/steps/common.py:19 0.637s
    Then I should receive 200 status code     # features/steps/common.py:30 0.000s
&nbsp;
  Scenario: Check the user search feature                              # features/smoketest.feature:9
    Given GitHub is accessible                                         # features/steps/common.py:8 2.065s
    When I search for user with nick torvalds                          # features/steps/common.py:24 0.658s
    Then I should receive 200 status code                              # features/steps/common.py:30 0.000s
    And I should receive proper JSON response                          # features/steps/common.py:36 0.000s
    And I should find the user with full name Linus Torvalds           # features/steps/common.py:43 0.000s
    And I should find that the user works for company Linux Foundation # features/steps/common.py:51 0.000s
&nbsp;
  Scenario Outline: Check the user search feature, perform the search for more users -- @1.1 users  # features/smoketest.feature:27
    Given GitHub is accessible                                                                      # features/steps/common.py:8 0.636s
    When I search for user with nick torvalds                                                       # features/steps/common.py:24 0.657s
    Then I should receive 200 status code                                                           # features/steps/common.py:30 0.000s
    And I should receive proper JSON response                                                       # features/steps/common.py:36 0.000s
    And I should find the user with full name Linus Torvalds                                        # features/steps/common.py:43 0.000s
    And I should find that the user works for company Linux Foundation                              # features/steps/common.py:51 0.000s
&nbsp;
  Scenario Outline: Check the user search feature, perform the search for more users -- @1.2 users  # features/smoketest.feature:28
    Given GitHub is accessible                                                                      # features/steps/common.py:8 0.657s
    When I search for user with nick brammool                                                       # features/steps/common.py:24 0.641s
    Then I should receive 200 status code                                                           # features/steps/common.py:30 0.000s
    And I should receive proper JSON response                                                       # features/steps/common.py:36 0.000s
    And I should find the user with full name Bram Moolenaar                                        # features/steps/common.py:43 0.000s
    And I should find that the user works for company Zimbu Labs                                    # features/steps/common.py:51 0.000s
&nbsp;
  Scenario Outline: Check the user search feature, perform the search for more users -- @1.3 users  # features/smoketest.feature:29
    Given GitHub is accessible                                                                      # features/steps/common.py:8 0.635s
    When I search for user with nick tisnik                                                         # features/steps/common.py:24 0.645s
    Then I should receive 200 status code                                                           # features/steps/common.py:30 0.000s
    And I should receive proper JSON response                                                       # features/steps/common.py:36 0.000s
    And I should find the user with full name Pavel Tišnovský                                       # features/steps/common.py:43 0.000s
    And I should find that the user works for company Red Hat, Inc.                                 # features/steps/common.py:51 0.000s
&nbsp;
1 feature passed, 0 failed, 0 skipped
5 scenarios passed, 0 failed, 0 skipped
27 steps passed, 0 failed, 0 skipped, 0 undefined
Took 0m7.873s
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Úprava příkladu pro uživatele GitHubu, u nichž není vyplněna společnost</h2>

<pre>
Feature: Smoke test
 
  Scenario Outline: Check the user search feature, perform the search for more users
    Given GitHub is accessible
    When I search for user with nick <nick>
    Then I should receive 200 status code
     And I should receive proper JSON response
     And I should find the user with full name <fullname>
     And I should find that the user works for company <company>

     Examples: users
     |nick|fullname|company|
     |torvalds|Linus Torvalds|Linux Foundation|
     |brammool|Bram Moolenaar|Zimbu Labs|
     |richhickey|Rich Hickey||
     |tisnik|Pavel Tišnovský|Red Hat, Inc.|
</pre>

<pre>
import json

from behave import given, then, when
from urllib.parse import urljoin
import requests


@given('GitHub is accessible')
def initial_state(context):
    assert context.is_accessible(context)


@given('System is running')
def running_system(context):
    """Ensure that the system is accessible."""
    assert is_accessible(context)


@when('I access the API endpoint {url}')
def access_endpoint(context, url):
    context.response = requests.get(context.api_url + url)


@when('I search for user with nick {nick}')
def search_for_user(context, nick):
    url = urljoin(urljoin(context.api_url, "users/"), nick)
    context.response = requests.get(url)


@then('I should receive {status:d} status code')
def check_status_code(context, status):
    """Check the HTTP status code returned by the REST API."""
    assert context.response.status_code == status


@then('I should receive proper JSON response')
def check_json_response(context):
    content_type = context.response.headers.get('content-type')
    assert content_type.startswith('application/json')
    context.data = context.response.json()


@then('I should find the user with full name {fullname}')
def check_user_full_name(context, fullname):
    assert context.data is not None
    assert 'name' in context.data
    value = context.data.get('name')
    assert value == fullname, "{e} != {v}".format(e=fullname, v=value)


@then('I should find that the user works for company {company}')
def check_company(context, company):
    assert context.data is not None
    assert 'company' in context.data
    value = context.data.get('company', '')
    assert value == company, "{e} != {v}".format(e=company, v=value)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Výsledky běhu čtvrtého demonstračního příkladu</h2>

<p>Po spuštění čtvrtého demonstračního příkladu se na standardním výstupu
zobrazí následující řádky. Povšimněte si toho, že je správně nalezen i Rich
Hickey, který ve svém profilu žádnou společnost neuvedl:</p>

<pre>
Feature: Smoke test # features/smoketest.feature:1
&nbsp;
  @smoketest
  Scenario: Check the GitHub API entry point  # features/smoketest.feature:4
    Given GitHub is accessible                # features/steps/common.py:8 0.647s
    When I access the API endpoint /          # features/steps/common.py:19 0.587s
    Then I should receive 200 status code     # features/steps/common.py:30 0.000s
&nbsp;
  Scenario: Check the user search feature                              # features/smoketest.feature:9
    Given GitHub is accessible                                         # features/steps/common.py:8 0.615s
    When I search for user with nick torvalds                          # features/steps/common.py:24 0.633s
    Then I should receive 200 status code                              # features/steps/common.py:30 0.000s
    And I should receive proper JSON response                          # features/steps/common.py:36 0.000s
    And I should find the user with full name Linus Torvalds           # features/steps/common.py:43 0.000s
    And I should find that the user works for company Linux Foundation # features/steps/common.py:51 0.000s
&nbsp;
  Scenario Outline: Check the user search feature, perform the search for more users -- @1.1 users  # features/smoketest.feature:27
    Given GitHub is accessible                                                                      # features/steps/common.py:8 0.575s
    When I search for user with nick torvalds                                                       # features/steps/common.py:24 0.639s
    Then I should receive 200 status code                                                           # features/steps/common.py:30 0.000s
    And I should receive proper JSON response                                                       # features/steps/common.py:36 0.000s
    And I should find the user with full name Linus Torvalds                                        # features/steps/common.py:43 0.000s
    And I should find that the user works for company Linux Foundation                              # features/steps/common.py:51 0.000s
&nbsp;
  Scenario Outline: Check the user search feature, perform the search for more users -- @1.2 users  # features/smoketest.feature:28
    Given GitHub is accessible                                                                      # features/steps/common.py:8 0.648s
    When I search for user with nick brammool                                                       # features/steps/common.py:24 0.628s
    Then I should receive 200 status code                                                           # features/steps/common.py:30 0.000s
    And I should receive proper JSON response                                                       # features/steps/common.py:36 0.000s
    And I should find the user with full name Bram Moolenaar                                        # features/steps/common.py:43 0.000s
    And I should find that the user works for company Zimbu Labs                                    # features/steps/common.py:51 0.000s
&nbsp;
  Scenario Outline: Check the user search feature, perform the search for more users -- @1.3 users  # features/smoketest.feature:29
    Given GitHub is accessible                                                                      # features/steps/common.py:8 0.611s
    When I search for user with nick richhickey                                                     # features/steps/common.py:24 0.611s
    Then I should receive 200 status code                                                           # features/steps/common.py:30 0.000s
    And I should receive proper JSON response                                                       # features/steps/common.py:36 0.000s
    And I should find the user with full name Rich Hickey                                           # features/steps/common.py:43 0.000s
    And I should find that the user works for company                                               # features/steps/common.py:59 0.000s
&nbsp;
  Scenario Outline: Check the user search feature, perform the search for more users -- @1.4 users  # features/smoketest.feature:30
    Given GitHub is accessible                                                                      # features/steps/common.py:8 0.580s
    When I search for user with nick tisnik                                                         # features/steps/common.py:24 0.610s
    Then I should receive 200 status code                                                           # features/steps/common.py:30 0.000s
    And I should receive proper JSON response                                                       # features/steps/common.py:36 0.000s
    And I should find the user with full name Pavel Tišnovský                                       # features/steps/common.py:43 0.000s
    And I should find that the user works for company Red Hat, Inc.                                 # features/steps/common.py:51 0.000s
&nbsp;
1 feature passed, 0 failed, 0 skipped
6 scenarios passed, 0 failed, 0 skipped
33 steps passed, 0 failed, 0 skipped, 0 undefined
Took 0m7.369s
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Další vlastnosti nabízené knihovnou Behave a jazykem Gherkin</h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Použití víceřádkového textu v&nbsp;testovacím scénáři</h2>

<p>Mnohdy se setkáme se situací, v&nbsp;níž je zapotřebí otestovat chování
funkcí, do nichž je možné předávat relativně dlouhé texty, někdy i texty
víceřádkové. Může se jednat například o funkci nazvanou
<strong>count_words</strong>, která má vrátit počet slov nalezených
v&nbsp;textu. Jedna z&nbsp;implementací může vypadat takto (ve skutečnosti lze
funkci zkrátit, nicméne si vyzkoušejme explicitní určený znaku, kde dojke
k&nbsp;rozdělení řetězce):</p>

<pre>
def count_words(text):
    line = text.replace('\n', ' ')
    words = line.split(' ')
    return len(words)
</pre>

<p>V&nbsp;navazující kapitole si ukážeme, jak je možné tuto situaci velmi
elegantně vyřešit.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Demonstrační příklad &ndash; použití víceřádkového textu v&nbsp;sekci <strong>Given</strong></h2>

<p>V&nbsp;následujícím demonstračním příkladu, jehož úplnou podobu naleznete na
adrese <a
href="https://github.com/tisnik/python-behave-demos/tree/master/multiline_text1">https://github.com/tisnik/python-behave-demos/tree/master/multiline_text1</a>
je ukázáno, jakým způsobem je možné přidat jednořádkový i víceřádkový text do
sekce <strong>Given</strong>. Nejprve se podívejme na celý testovací scénář,
v&nbsp;němž jsou skutečně použity texty zapsané <i>pod</i> řádkem
s&nbsp;<strong>Given</strong>. Povšimněte si použití ztrojených uvozovek,
podobně jako je tomu v&nbsp;Pythonu:</p>

<pre>
<strong>Feature</strong>: Count words function test
&nbsp;
  <strong>Scenario</strong>: Check the function count_words()
    <strong>Given</strong> a sample text
       """
       Velmi kratka veta.
       """
    <strong>When</strong> I count all words in text
    <strong>Then</strong> I should get 3 as a result
&nbsp;
&nbsp;
  <strong>Scenario</strong>: Check the function count_words()
    <strong>Given</strong> a sample text
       """
       Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
       eiusmod tempor incididunt ut labore et dolore magna aliqua.
       """
    <strong>When</strong> I count all words in text
    <strong>Then</strong> I should get 19 as a result
</pre>

<p>Implementace testovacích kroků je poměrně přímočará, až na následující
&bdquo;trik&ldquo;, který nám zajistí, že se (víceřádkový) text zapsaný
v&nbsp;sekci <strong>Given</strong> neztratí (atribut
<strong>context.text</strong> je totiž v&nbsp;každém kroku přepsán, takže si
obsah textu musíme uložit do jiného atributu):</p>

<pre>
@<strong>given</strong>(u'a sample text')
def a_sample_text(context):
    assert context.text
    context.input = context.text
</pre>

<p>Úplný zdrojový kód souboru <strong>features/steps/common.py</strong> vypadá
následovně:</p>

<pre>
from behave import given, then, when
&nbsp;
<i># import testovane funkce</i>
from src.count_words import count_words
&nbsp;
&nbsp;
@<strong>given</strong>(u'a sample text')
def a_sample_text(context):
    assert context.text
    context.input = context.text
&nbsp;
&nbsp;
@<strong>when</strong>(u'I count all words in text')
def step_impl(context):
    <i>"""Zavolani testovane funkce."""</i>
    context.result = count_words(context.input)
&nbsp;
&nbsp;
@<strong>then</strong>('I should get {expected:d} as a result')
def check_result(context, expected):
    <i>"""Porovnani vypocteneho vysledku s vysledkem ocekavanym."""</i>
    assert context.result == expected, \
        "Wrong result: {r} != {e}".format(r=context.result, e=expected)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Výsledek běhu demonstračního příkladu</h2>

<p>Podívejme se nyní na výsledek spuštění tohoto demonstračního příkladu.
Vzhledem k&nbsp;tomu, že je testovaná funkce implementovaná korektně, dostaneme
následující výsledky:</p>

<pre>
Feature: Count words function test # features/count_words.feature:1
&nbsp;
  Scenario: Check the function count_words()  # features/count_words.feature:3
    Given a sample text                       # features/steps/common.py:7 0.000s
      """
      Velmi kratka veta.
      """
    When I count all words in text            # features/steps/common.py:13 0.000s
    Then I should get 3 as a result           # features/steps/common.py:19 0.000s
&nbsp;
  Scenario: Check the function count_words()  # features/count_words.feature:11
    Given a sample text                       # features/steps/common.py:7 0.000s
      """
      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
      eiusmod tempor incididunt ut labore et dolore magna aliqua.
      """
    When I count all words in text            # features/steps/common.py:13 0.000s
    Then I should get 19 as a result          # features/steps/common.py:19 0.000s
&nbsp;
1 feature passed, 0 failed, 0 skipped
2 scenarios passed, 0 failed, 0 skipped
6 steps passed, 0 failed, 0 skipped, 0 undefined
Took 0m0.001s
</pre>

<p>Ovšem v&nbsp;případě, že testovanou funkci změníme, například
následovně:</p>

<pre>
def count_words(text):
    words = <strong>text.split(' ')</strong>
    return len(words)
</pre>

<p>skončí druhý testovací scénář s&nbsp;víceřádkovým textem s&nbsp;chybou:</p>

<pre>
Feature: Count words function test # features/count_words.feature:1
&nbsp;
  Scenario: Check the function count_words()  # features/count_words.feature:3
    Given a sample text                       # features/steps/common.py:7 0.000s
      """
      Velmi kratka veta.
      """
    When I count all words in text            # features/steps/common.py:13 0.000s
    Then I should get 3 as a result           # features/steps/common.py:19 0.000s
&nbsp;
  Scenario: Check the function count_words()  # features/count_words.feature:11
    Given a sample text                       # features/steps/common.py:7 0.000s
      """
      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
      eiusmod tempor incididunt ut labore et dolore magna aliqua.
      """
    When I count all words in text            # features/steps/common.py:13 0.000s
    Then I should get 19 as a result          # features/steps/common.py:19 0.000s
      Assertion Failed: Wrong result: 18 != 19
&nbsp;
&nbsp;
&nbsp;
Failing scenarios:
  features/count_words.feature:11  Check the function count_words()
&nbsp;
0 features passed, 1 failed, 0 skipped
1 scenario passed, 1 failed, 0 skipped
5 steps passed, 1 failed, 0 skipped, 0 undefined
Took 0m0.001s
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Demonstrační příklad &ndash; použití víceřádkového textu v&nbsp;sekci <strong>Then</strong></h2>

<p>Předpokládejme nyní, že budeme chtít testovat uživatelem definovanou funkci
pojmenovanou <strong>to_uppercase</strong>, jejíž tělo je velmi jednoduché:</p>

<pre>
def to_uppercase(text):
    return text.upper()
</pre>

<p>Nyní budeme potřebovat, aby se víceřádkový text použil nejenom v&nbsp;sekci
<strong>Given</strong>, ale i v&nbsp;sekci <strong>Then</strong>. Testovací
scénáře se změní následovně:</p>

<pre>
<strong>Feature</strong>: Count words function test
&nbsp;
  <strong>Scenario</strong>: Check the function count_words()
    <strong>Given</strong> a sample text
       """
       Velmi kratka veta.
       """
    <strong>When</strong> I translate the text to upper case
    <strong>Then</strong> I should get the following text as a result
       """
       VELMI KRATKA VETA.
       """
&nbsp;
  <strong>Scenario</strong>: Check the function count_words()
    <strong>Given</strong> a sample text
       """
       Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
       eiusmod tempor incididunt ut labore et dolore magna aliqua.
       """
    <strong>When</strong> I translate the text to upper case
    <strong>Then</strong> I should get the following text as a result
       """
       LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISICING ELIT, SED DO
       EIUSMOD TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA ALIQUA.
       """
</pre>

<p>Ve skutečnosti bude příprava testovacích kroků jednoduchá, protoře atribut
<strong>context.text</strong> bude korektně připraven u všech kroků testu, tedy
jak ve funkci anotované <strong>@given</strong>, tak i ve funkci s&nbsp;anotací
<strong>@then</strong>:</p>

<pre>
from behave import given, then, when
&nbsp;
<i># import testovane funkce</i>
from src.to_uppercase import to_uppercase
&nbsp;
&nbsp;
@<strong>given</strong>(u'a sample text')
def a_sample_text(context):
    assert context.text
    context.input = context.text
&nbsp;
&nbsp;
@<strong>when</strong>(u'I translate the text to upper case')
def step_impl(context):
    <i>"""Zavolani testovane funkce."""</i>
    context.result = to_uppercase(context.input)
&nbsp;
&nbsp;
@<strong>then</strong>('I should get the following text as a result')
def check_result(context):
    <i>"""Porovnani vypocteneho vysledku s vysledkem ocekavanym."""</i>
    assert context.result == context.text, \
        "Wrong result: {r} != {e}".format(r=context.result, e=context.text)
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Výsledek běhu demonstračního příkladu</h2>

<p>Opět se podívejme na výsledek běhu tohoto demonstračního příkladu. Všechny
testy by měly skončit v&nbsp;pořádku:</p>

<pre>
Feature: Count words function test # features/to_upper.feature:1
&nbsp;
  Scenario: Check the function count_words()         # features/to_upper.feature:3
    Given a sample text                              # features/steps/common.py:7 0.000s
      """
      Velmi kratka veta.
      """
    When I translate the text to upper case          # features/steps/common.py:13 0.000s
    Then I should get the following text as a result # features/steps/common.py:19 0.000s
      """
      VELMI KRATKA VETA.
      """
&nbsp;
  Scenario: Check the function count_words()         # features/to_upper.feature:14
    Given a sample text                              # features/steps/common.py:7 0.000s
      """
      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
      eiusmod tempor incididunt ut labore et dolore magna aliqua.
      """
    When I translate the text to upper case          # features/steps/common.py:13 0.000s
    Then I should get the following text as a result # features/steps/common.py:19 0.000s
      """
      LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISICING ELIT, SED DO
      EIUSMOD TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA ALIQUA.
      """
&nbsp;
1 feature passed, 0 failed, 0 skipped
2 scenarios passed, 0 failed, 0 skipped
6 steps passed, 0 failed, 0 skipped, 0 undefined
Took 0m0.001s
</pre>

<p>Pokud testovanou funkci omylem změníme na:</p>

<pre>
def to_uppercase(text):
    return text.title()
</pre>

<p>Dojde samozřejmě k&nbsp;detekci této chyby v&nbsp;obou scénářích (povšimněte
si okomentování chyby):</p>

<pre>
Feature: Count words function test # features/to_upper.feature:1
&nbsp;
  Scenario: Check the function count_words()         # features/to_upper.feature:3
    Given a sample text                              # features/steps/common.py:7 0.000s
      """
      Velmi kratka veta.
      """
    When I translate the text to upper case          # features/steps/common.py:13 0.000s
    Then I should get the following text as a result # features/steps/common.py:19 0.000s
      """
      VELMI KRATKA VETA.
      """
      <strong>Assertion Failed: Wrong result: Velmi Kratka Veta. != VELMI KRATKA VETA.</strong>
&nbsp;
&nbsp;
  Scenario: Check the function count_words()         # features/to_upper.feature:14
    Given a sample text                              # features/steps/common.py:7 0.000s
      """
      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
      eiusmod tempor incididunt ut labore et dolore magna aliqua.
      """
    When I translate the text to upper case          # features/steps/common.py:13 0.000s
    Then I should get the following text as a result # features/steps/common.py:19 0.000s
      """
      LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISICING ELIT, SED DO
      EIUSMOD TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA ALIQUA.
      """
      <strong>Assertion Failed: Wrong result: Lorem Ipsum Dolor Sit Amet, Consectetur Adipisicing Elit, Sed Do</strong>
      <strong>Eiusmod Tempor Incididunt Ut Labore Et Dolore Magna Aliqua. != LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISICING ELIT, SED DO</strong>
      <strong>EIUSMOD TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA ALIQUA.</strong>
&nbsp;
&nbsp;
&nbsp;
Failing scenarios:
  features/to_upper.feature:3  Check the function count_words()
  features/to_upper.feature:14  Check the function count_words()
&nbsp;
0 features passed, 1 failed, 0 skipped
0 scenarios passed, 2 failed, 0 skipped
4 steps passed, 2 failed, 0 skipped, 0 undefined
Took 0m0.001s
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Použití přípravných kroků (<strong>Background</strong>)</h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Specifikace datového typu proměnných použitých v&nbsp;popisu kroků testů</h2>

<table>
<tr><th></th><th></th></tr>
<tr><td></td><td></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všech osm demonstračních projektů, které jsme si dnes popsali, bylo uloženo
do repositáře, který naleznete na adrese <a
href="https://github.com/tisnik/python-behave-demos">https://github.com/tisnik/python-behave-demos</a>.
V&nbsp;tabulce jsou zobrazeny odkazy na tyto projekty:</p>

<table>
<tr><th>Projekt</th><th>Popis</th><th>Cesta</th></tr>
<tr><td>github_test_version1</td><td>test dostupnosti REST API</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/github_test_version1">https://github.com/tisnik/python-behave-demos/tree/github_test_version1</a></td></tr>
<tr><td>github_test_version1_wrong_url</td><td>test NEdostupnosti REST API</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/github_test_version1_wrong_url">https://github.com/tisnik/python-behave-demos/tree/github_test_version1_wrong_url</a></td></tr>
<tr><td>github_test_version1_wrong_code</td><td>test špatného HTTP kódu</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/github_test_version1_wrong_code">https://github.com/tisnik/python-behave-demos/tree/github_test_version1_wrong_code</a></td></tr>
<tr><td>github_test_version2</td><td>test dostupnosti REST API</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/github_test_version2">https://github.com/tisnik/python-behave-demos/tree/github_test_version2</a></td></tr>
<tr><td>github_test_version3</td><td>test dostupnosti REST API</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/github_test_version3">https://github.com/tisnik/python-behave-demos/tree/github_test_version3</a></td></tr>
<tr><td>github_test_version4</td><td>test dostupnosti REST API</td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/github_test_version4">https://github.com/tisnik/python-behave-demos/tree/github_test_version4</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>multiline_text1</td><td>víceřádkový text v&nbsp;sekci <strong>Given</strong></td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/multiline_text1">https://github.com/tisnik/python-behave-demos/tree/multiline_text1</a></td></tr>
<tr><td>multiline_text2</td><td>víceřádkový text v&nbsp;sekci <strong>Then</strong></td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/multiline_text2">https://github.com/tisnik/python-behave-demos/tree/multiline_text2</a></td></tr>
<tr><td>multiline_text3</td><td>použití <strong>string.title</strong> namísto <strong>string.upper</strong></td><td><a href="https://github.com/tisnik/python-behave-demos/tree/master/multiline_text3">https://github.com/tisnik/python-behave-demos/tree/multiline_text3</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Behave na GitHubu<br />
<a href="https://github.com/behave/behave">https://github.com/behave/behave</a>
</li>

<li>behave 1.2.6 (PyPi)<br />
<a href="https://pypi.python.org/pypi/behave">https://pypi.python.org/pypi/behave</a>
</li>

<li>Dokumentace k Behave<br />
<a href="http://behave.readthedocs.io/en/latest/">http://behave.readthedocs.io/en/latest/</a>
</li>

<li>Příklady použití Behave<br />
<a href="https://github.com/behave/behave.example">https://github.com/behave/behave.example</a>
</li>

<li>Příklady použití Behave použité v&nbsp;dnešním článku<br />
<a href="https://github.com/tisnik/python-behave-demos">https://github.com/tisnik/python-behave-demos</a>
</li>

<li>Cucumber data tables<br />
<a href="http://www.thinkcode.se/blog/2014/06/30/cucumber-data-tables">http://www.thinkcode.se/blog/2014/06/30/cucumber-data-tables</a>
</li>

<li>Tables (Gherkin)<br />
<a href="http://docs.behat.org/en/v2.5/guides/1.gherkin.html#tables">http://docs.behat.org/en/v2.5/guides/1.gherkin.html#tables</a>
</li>

<li>Predefined Data Types in parse<br />
<a href="https://jenisys.github.io/behave.example/datatype/builtin_types.html">https://jenisys.github.io/behave.example/datatype/builtin_types.html</a>
</li>

<li>Test Fixture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test_fixture">https://en.wikipedia.org/wiki/Test_fixture</a>
</li>

<li>Behavior-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Behavior-driven_development">https://en.wikipedia.org/wiki/Behavior-driven_development</a>
</li>

<li>Cucumber<br />
<a href="https://cucumber.io/">https://cucumber.io/</a>
</li>

<li>Jasmine<br />
<a href="https://jasmine.github.io/">https://jasmine.github.io/</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>Tox<br />
<a href="https://tox.readthedocs.io/en/latest/">https://tox.readthedocs.io/en/latest/</a>
</li>

<li>Extrémní programování<br />
<a href="https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD">https://cs.wikipedia.org/wiki/Extr%C3%A9mn%C3%AD_programov%C3%A1n%C3%AD</a>
</li>

<li>Programování řízené testy<br />
<a href="https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy">https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD_%C5%99%C3%ADzen%C3%A9_testy</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Python namespaces<br />
<a href="https://bytebaker.com/2008/07/30/python-namespaces/">https://bytebaker.com/2008/07/30/python-namespaces/</a>
</li>

<li>Namespaces and Scopes<br />
<a href="https://www.python-course.eu/namespaces.php">https://www.python-course.eu/namespaces.php</a>
</li>

<li>pdb — The Python Debugger<br />
<a href="https://docs.python.org/3.6/library/pdb.html">https://docs.python.org/3.6/library/pdb.html</a>
</li>

<li>pdb – Interactive Debugger<br />
<a href="https://pymotw.com/2/pdb/">https://pymotw.com/2/pdb/</a>
</li>

<li>functools.reduce<br />
<a href="https://docs.python.org/3.6/library/functools.html#functools.reduce">https://docs.python.org/3.6/library/functools.html#functools.reduce</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

