<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyky a knihovny určené pro výuku základů počítačové grafiky a interaktivních her</a></p>
<p><a href="#k02">2. Systém Scratch</a></p>
<p><a href="#k03">*** 3. Skládání složitějších programů s&nbsp;využitím jednotlivých bloků</a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyky a knihovny určené pro výuku základů počítačové grafiky a interaktivních her</h2>

<p><i>It's a bit like learning natural languages: the earlier the better.<br />
Michael Kölling</i></p>

<p>V&nbsp;současnosti existuje a navíc je i aktivně používáno několik desítek
různých programovacích jazyků, ať již jazyků interpretovaných či překládaných
do nativního (strojového) kódu nebo bajtkódu. Až na několik výjimek se však
jedná o takové jazyky, které nejsou příliš vhodné pro první seznámení dětí
s&nbsp;návrhem algoritmů a jednoduchých aplikací. Z&nbsp;tohoto důvodu vzniklo
a stále ještě vzniká poměrně velké množství projektů, jejichž cílem je seznámit
děti předškolního věku či děti na prvním stupni ZŠ se základem algoritmizace a
mnohdy i s&nbsp;tvorbou počítačové grafiky (protože grafický výstup či dokonce
animace nebo interaktivní hry jsou nepochybně atraktivní, zejména
v&nbsp;porovnání s&nbsp;&bdquo;fádním&ldquo; textovým výstupem). Jmenujme
například projekty Logo, Scratch, BYOB, Snap!, Alice, Android App Inventor,
Starlogo, Etoys, DesignBlocks, Pocket Code, Hopscotch, Blockly, Greenfoot,
Processing, GameMaker nebo poněkud kontroverzní Microsoft Small Basic.</p>

*** image ***
<p><i>Obrázek 1: Moderní integrovaná vývojová prostředí (v&nbsp;případě, že
Eclipse stále řadíme mezi moderní IDE :-) jsou sice pro amatérské i
profesionální programátory velmi užitečná, ovšem při výuce může jejich velká
variabilita být v&nbsp;některých ohledech spíše kontraproduktivní a bylo by
výhodnější používat prostředí s&nbsp;menším množstvím voleb.</i></p>

<p>Oblíbeným jazykem v&nbsp;této oblasti bývalo <i>Logo</i> (a mnohé jeho
dialekty), které jsem dříve <a
href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">taktéž
prosazoval</a>. Ovšem ukazuje se, že i na prvním stupni základní školy je dosti
složité vysvětlit pojem úhlu, který je v&nbsp;Logu celkem zásadní
(v&nbsp;programech se totiž ovládá želvička pohybující se po ploše obrazovky).
Naproti tomu nemají děti prakticky žádný problém s&nbsp;pochopením principu
bitmapové grafiky a pixelů; možná se ani není čemu divit, neboť tato generace
již vyrůstá na Minecraftu :-). I z&nbsp;tohoto důvodu budou v&nbsp;dnešním
článku zmíněny dva dosti odlišné projekty: <i>Scratch</i> se zaměřením na
vizuální tvorbu programů, který používá želví grafiku známou z&nbsp;Loga a
projekt nazvaný <i>Basic-256</i>, v&nbsp;němž lze několika málo příkazy
vykreslit i poměrně složité rastrové obrázky. Kromě <i>Scratche</i> se zmíníme
i o příbuzném projektu <i>Snap!</i>.</p>

*** image ***
<p><i>Obrázek 2: Comenius Logo, které se používalo i v&nbsp;našem
školství.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Systém Scratch</h2>

<p><i>Scratch uses hands-on, active learning; it is visually appealing; it
allows users to express their own creativity and to build on their own
experiences; it gives immediate, understandable feedback; and it allows users
to avoid syntax errors without focusing on minutiae, freeing them to focus on
processes and concepts.<br />
NCWIT study</i></p>

<p>Některé v&nbsp;praxi používané programovací jazyky (například <i>Python</i>
či spíše <i>Lua</i> &ndash; více viz druhá část článku) je sice možné použít
pro výuku programování, ovšem pro děti předškolního věku nebo pro děti na
prvním stupni základních škol se podle mého názoru příliš nehodí, a to hned
z&nbsp;několika důvodů. Jedním z&nbsp;těchto důvodů je nutnost zápisu algoritmů
pomocí více či méně strukturovaného textu, jehož syntaxe je hlídána buď
interpretrem či překladačem. Jedná se o nejdéle používaný způsob programování,
jehož počátky můžeme hledat v&nbsp;hluboké počítačové minulosti, protože první
překladač pracující se strojovým textem byl vytvořen již v&nbsp;rozmezí let
1951 až 1952 <i>Grace Hopperovou</i> v&nbsp;rámci projektu <i>A-0 (Arithmetic
Language version 0)</i>, který byl později následován známým <i>FORTRANem</i>
navrženým <i>Johnem W. Backusem</i> a jeho vývojovým týmem. Ovšem
v&nbsp;průběhu oněch cca šedesáti let se znovu a znovu objevovaly více či méně
úspěšné pokusy o vizuální návrh algoritmů, tj.&nbsp;o tvorbu programů nikoli
zápisem strukturovaného zdrojového textu, ale návrhem algoritmů pomocí diagramů
vytvářených například s&nbsp;využitím myši, gesty či v&nbsp;minulosti pomocí
světelného pera.</p>

*** image ***
<p><i>Obrázek 3: Bloky, z&nbsp;nichž se programy tvořené ve Scratchi skládají,
jsou na základě své funkce rozděleny do několika kategorií. Povšimněte si, že
prostředí Scratche bylo téměř kompletně počeštěno; jedna z&nbsp;mála částí
ponechaná v&nbsp;angličtině je nápověda k&nbsp;jednotlivým příkazům (i když i
tato část se pravděpodobně brzy přeloží).</i></p>

<p>Poměrně dobře známé jsou například pokusy o přímý &bdquo;překlad&ldquo;
klasických vývojových diagramů, využití takzvaných kopenogramů atd.
V&nbsp;současnosti někteří analytici a vývojáři využívají vizuální/grafický
jazyk <i>UML</i> (což je ovšem jen pomůcka) či <i>BPM</i> (návrh business
procesů, ovšem s&nbsp;vhodně zvolenými bloky se vlastně jedná o plnohodnotný
jazyk). V&nbsp;oblasti software určeného pro výuku programování se využívá
podobný princip, jako v&nbsp;případě vývojových diagramů &ndash; možnost zápisu
(či možná lépe řečeno deklarace) algoritmů s&nbsp;využitím bloků
představujících jednotlivé příkazy či volané funkce, které jsou doplněny o
základní strukturované příkazy určené pro tvorbu rozhodovacích podmínek a
programových smyček. Na tomto principu, tj.&nbsp;na vylepšených a vizuálně
přitažlivějších vývojových diagramech, je postaven i projekt <i>Scratch</i>,
v&nbsp;němž jsou uživatelům nabídnuty základní stavební <i>bloky</i>,
z&nbsp;nichž se program skládá, přičemž je ponecháno pouze na uživateli, jakým
způsobem tyto bloky využije ve svých programech.</p>

*** image ***
<p><i>Obrázek 4: Programy se ve Scratchi tvoří přetahováním příkazových bloků
z&nbsp;oblasti umístěné v&nbsp;levé části okna do střední oblasti, zde
nadepsané &bdquo;Skripty&ldquo; (nová verze Scratche používá nepatrně odlišný
design grafického uživatelského rozhraní).</i></p>

<p>Díky způsobu implementace skládání bloků pod sebe, popř.&nbsp;do sebe
(s&nbsp;využitím &bdquo;zámků&ldquo;, podobně jako u puzzle) je zajištěno, že
program bude po syntaktické stránce vždy v&nbsp;pořádku, což je důležité,
protože odpadá pro děti nudná oprava překlepů, hledání chybějících středníků,
hlídání párovosti závorek i další činnosti spojené s&nbsp;prací s&nbsp;běžnými
programovacími jazyky. Uživatel se tedy musí starat o to podstatné &ndash; o
sémantiku navrhované aplikace.</p>

*** image ***
<p><i>Obrázek 5: Editor bitmapových spritů zabudovaný přímo ve Scratchi.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Skládání složitějších programů s&nbsp;využitím jednotlivých bloků</h2>

<p>Tvorba programů ve <i>Scratchi</i> je jednoduchá a po krátkém zaučení i
intuitivní &ndash; v&nbsp;levé části okna (Scratch verze 1) se postupně
vybírají příkazové bloky, které se přetahují do prostřední části okna, kde se
z&nbsp;těchto bloků může skládáním tvořit program či programy. Běžný příkazový
blok je vizuálně představován obdélníkem s&nbsp;několika výčnělky
připomínajícími puzzle. Programové smyčky a podmínky jsou vyobrazeny jako
složitější tvary umožňující vkládání dalších bloků <i>dovnitř</i> svého těla.
S&nbsp;využitím těchto výčnělků se bloky spojují dohromady tak, aby tvořily
sekvenci či dokonce strukturovaný program. V&nbsp;případě, že je zapotřebí
sekvenci příkazů změnit, je možné bloky od sebe rozdělit, popř.&nbsp;vybraný
blok smazat (přes menu zobrazené po stisku pravého tlačítka myši), zkopírovat
(opět přes pravé tlačítko myši) či přesunout. Společně spojené bloky tvoří
program, který je možné spustit doubleclickem. Na ploše <i>Skripty</i> je možné
vytvořit i více programů, každý je tvořený množinou spojených bloků. Činnost
každého bloku lze nezávisle na vlastním programu taktéž jednoduše ověřit
&ndash; opět doubleclickem.</p>

*** image ***
<p><i>Obrázek 6: Velmi jednoduchá simulace Brownova pohybu naprogramovaná ve Scratchi.</i></p>

<p>Vizuální tvorba programů s&nbsp;využitím skládání příkazových bloků tvoří
pouze jednu část snadnosti použití <i>Scratche</i> při výuce programování.
Druhou částí je takzvaná pracovní (kreslicí) plocha s&nbsp;volitelným pozadím,
po níž se mohou v&nbsp;závislosti na volaných příkazech pohybovat takzvané
<i>sprity</i>, které navíc mohou při svém pohybu za sebou kreslit křivku
(tj.&nbsp;stopu pohybu). Pod pojmem <i>sprite</i> je ve <i>Scratchi</i> myšlen
rastrový obrázek, který může představovat například postavu či jiný pohyblivý
nebo i statický předmět ve hře, zatímco pozadí umístěné na pracovní plochu
(taktéž se jedná o rastrový obrázek) je většinou neměnné a může představovat
pozadí hry, místnost, ve které se odehrává nějaký dialog atd. <i>Scratch</i>
díky možnosti prakticky neomezeného pohybu <i>spritů</i> po pracovní ploše
s&nbsp;volitelným kreslením cesty (stopy pohybu), kterou <i>sprity</i>
vykonaly, umně integruje jak možnosti programovacích jazyků typu <i>Karel</i>
či <i>Baltazar</i> (<i>sprity</i> umístěné a pohybující se po pomyslné
šachovnici) a taktéž výše zmíněného programovacího jazyka <i>Logo</i>
s&nbsp;neodmyslitelnou želvou, která se může pohybovat libovolným směrem po
ploše.</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Welcome to Pygame Zero<br />
<a href="https://pygame-zero.readthedocs.io/en/stable/index.html">https://pygame-zero.readthedocs.io/en/stable/index.html</a>
</li>

<li>Other libraries like Pygame Zero<br />
<a href="https://pygame-zero.readthedocs.io/en/stable/other-libs.html">https://pygame-zero.readthedocs.io/en/stable/other-libs.html</a>
</li>

<li>Principles of Pygame Zero<br />
<a href="https://pygame-zero.readthedocs.io/en/stable/principles.html">https://pygame-zero.readthedocs.io/en/stable/principles.html</a>
</li>

<li>Pygame<br />
<a href="https://www.pygame.org/news">https://www.pygame.org/news</a>
</li>

<li>Kniha: Coding Games With Pygame Zero &amp; Python: Student workbook<br />
<a href="https://bookerystore.com/downloads/coding-games-with-pygame-zero-python-student-workbook/">https://bookerystore.com/downloads/coding-games-with-pygame-zero-python-student-workbook/</a>
</li>

<li>Projekty založené na Pygame<br />
<a href="https://www.pygame.org/tags/all">https://www.pygame.org/tags/all</a>
</li>

<li>Domovská stránka projektu LÖVE<br />
<a href="https://love2d.org/">https://love2d.org/</a>
</li>

<li>PyWeek, a bi-annual game jam to write games in Python<br />
<a href="https://pyweek.org/">https://pyweek.org/</a>
</li>

<li>Teaching a kid to code with Pygame Zero<br />
<a href="https://www.mattlayman.com/blog/2019/teach-kid-code-pygame-zero/">https://www.mattlayman.com/blog/2019/teach-kid-code-pygame-zero/</a>
</li>

<li>Games with PyGame Zero<br />
<a href="https://codewith.mu/en/tutorials/1.0/pgzero">https://codewith.mu/en/tutorials/1.0/pgzero</a>
</li>

<li>Coding Games With Pygame Zero &amp; Python: Student workbook (2nd edition)<br />
<a href="https://electronstudio.github.io/pygame-zero-book/">https://electronstudio.github.io/pygame-zero-book/</a>
</li>

<li>Historie vývoje počítačových her (116. část – vývoj her v současnosti: od assembleru k PyGame)<br />
<a href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-116-cast-vyvoj-her-v-soucasnosti-od-assembleru-k-pygame/">https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-116-cast-vyvoj-her-v-soucasnosti-od-assembleru-k-pygame/</a>
</li>

<li>Lua + LÖVE: vytvořte si vlastní hru<br />
<a href="https://www.root.cz/clanky/lua-love-vytvorte-si-vlastni-hru/">https://www.root.cz/clanky/lua-love-vytvorte-si-vlastni-hru/</a>
</li>

<li>Hrátky se systémem LÖVE<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love/">https://www.root.cz/clanky/hratky-se-systemem-love/</a>
</li>

<li>Vytváříme hru v systému LÖVE<br />
<a href="https://www.root.cz/clanky/vytvarime-hru-v-systemu-love/">https://www.root.cz/clanky/vytvarime-hru-v-systemu-love/</a>
</li>

<li>Hrátky se systémem LÖVE - částicové systémy<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-casticove-systemy/">https://www.root.cz/clanky/hratky-se-systemem-love-casticove-systemy/</a>
</li>

<li>Hrátky se systémem LÖVE – kolize a odrazy těles<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-ndash-kolize-a-odrazy-teles/">https://www.root.cz/clanky/hratky-se-systemem-love-ndash-kolize-a-odrazy-teles/</a>
</li>

<li>Hrátky se systémem LÖVE - kolize a odrazy těles II<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-kolize-a-odrazy-teles-ii/">https://www.root.cz/clanky/hratky-se-systemem-love-kolize-a-odrazy-teles-ii/</a>
</li>

<li>Hrátky se systémem LÖVE - pružné vazby mezi tělesy<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-pruzne-vazby-mezi-telesy/">https://www.root.cz/clanky/hratky-se-systemem-love-pruzne-vazby-mezi-telesy/</a>
</li>

<li>Hrátky se systémem LÖVE - dokončení<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-dokonceni/">https://www.root.cz/clanky/hratky-se-systemem-love-dokonceni/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Scratch: oficiální stránka projektu<br />
<a href="http://scratch.mit.edu/">http://scratch.mit.edu/</a>
</li>

<li>Scratch: galerie projektů vytvořených ve Scratchi<br />
<a href="http://scratch.mit.edu/galleries/browse/newest">http://scratch.mit.edu/galleries/browse/newest</a>
</li>

<li>Scratch: nápověda<br />
<a href="file:///usr/share/scratch/Help/en/index.html">file:///usr/share/scratch/Help/en/index.html</a>
</li>

<li>Scratch: obrazovky nápovědy<br />
<a href="file:///usr/share/scratch/Help/en/allscreens.html">file:///usr/share/scratch/Help/en/allscreens.html</a>
</li>

<li>Scratch (Wikipedie CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Scratch">http://cs.wikipedia.org/wiki/Scratch</a>
</li>

<li>Scratch (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Scratch_(programming_language)">http://en.wikipedia.org/wiki/Scratch_(programming_language)</a>
</li>

<li>Scratch Modification<br />
<a href="http://wiki.scratch.mit.edu/wiki/Scratch_Modification">http://wiki.scratch.mit.edu/wiki/Scratch_Modification</a>
</li>

<li>Scratch Lowers Resistance to Programming<br />
<a href="http://www.wired.com/gadgetlab/2009/03/scratch-lowers/">http://www.wired.com/gadgetlab/2009/03/scratch-lowers/</a>
</li>

<li>Snap!<br />
<a href="http://snap.berkeley.edu/">http://snap.berkeley.edu/</a>
</li>

<li>Prostředí Snap!<br />
<a href="http://snap.berkeley.edu/snapsource/snap.html">http://snap.berkeley.edu/snapsource/snap.html</a>
</li>

<li>Alternatives to Scratch<br />
<a href="http://wiki.scratch.mit.edu/wiki/Alternatives_to_Scratch">http://wiki.scratch.mit.edu/wiki/Alternatives_to_Scratch</a>
</li>

<li>Basic-256 home page<br />
<a href="http://www.basic256.org/index_en">http://www.basic256.org/index_en</a>
</li>

<li>Basic-256 Language Documentation<br />
<a href="http://doc.basic256.org/doku.php">http://doc.basic256.org/doku.php</a>
</li>

<li>Basic-256 Art Gallery<br />
<a href="http://www.basic256.org/artgallery">http://www.basic256.org/artgallery</a>
</li>

<li>Basic-256 Tutorial<br />
<a href="http://www.basic256.org/tutorials">http://www.basic256.org/tutorials</a>
</li>

<li>Why BASIC?<br />
<a href="http://www.basic256.org/whybasic">http://www.basic256.org/whybasic</a>
</li>

<li>A book to teach ANYBODY how to program a computer (using BASIC)<br />
<a href="http://www.basicbook.org/">http://www.basicbook.org/</a>
</li>

<li>Sprite ve Scratchi<br />
<a href="https://en.scratch-wiki.info/wiki/Sprite">https://en.scratch-wiki.info/wiki/Sprite</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

