<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba textového uživatelského rozhraní s knihovnou prompt_toolkit: aplikace s celoobrazovkovým rozhraním</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba textového uživatelského rozhraní s knihovnou prompt_toolkit: aplikace s celoobrazovkovým rozhraním</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Čtvrtý článek o knihovně prompt_toolkit je věnován popisu způsobu deklarace textového uživatelského rozhraní (TUI) se základními ovládacími prvky rozmístěnými na ploše terminálu s využitím takzvaných správců rozložení.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba textového uživatelského rozhraní s knihovnou prompt_toolkit: aplikace s celoobrazovkovým rozhraním</a></p>
<p><a href="#k02">2. Vytvoření kostry aplikace s&nbsp;TUI postavené nad knihovnou <strong>prompt_toolkit</strong></a></p>
<p><a href="#k03">3. Přepnutí do režimu zobrazení využívajícího celou plochu terminálu</a></p>
<p><a href="#k04">4. Základní prvky TUI: kontejnery a prvky pro vstup/výstup textových údajů</a></p>
<p><a href="#k05">5. Naprogramované reakce na klávesové zkratky</a></p>
<p><a href="#k06">6. Vertikální rozmístění prvků TUI v&nbsp;ploše terminálu</a></p>
<p><a href="#k07">7. Použití prvku typu <strong>Window</strong> ve funkci oddělovače</a></p>
<p><a href="#k08">8. Horizontální rozmístění prvků TUI v&nbsp;ploše terminálu</a></p>
<p><a href="#k09">9. Současné použití správců rozložení s&nbsp;vertikálním i horizontálním rozmístěním prvků TUI</a></p>
<p><a href="#k10">10. Další ovládací prvky, z&nbsp;nichž se skládají aplikace s&nbsp;textovým uživatelským rozhraním</a></p>
<p><a href="#k11">11. Prvky <strong>Frame</strong> a <strong>Box</strong></a></p>
<p><a href="#k12">12. Nastavení stylu zobrazení prvku typu <strong>Frame</strong> a <strong>Box</strong></a></p>
<p><a href="#k13">13. Použití prvku typu <strong>Label</strong></a></p>
<p><a href="#k14">*** 14. Prvek typu <strong>TextArea</strong> aneb textový editor snadno a rychle</a></p>
<p><a href="#k15">*** 15. Ovládací prvek typu <strong>Button</strong></a></p>
<p><a href="#k16">*** 16. Přepínání fokusu (zaměření, výběru) mezi jednotlivými tlačítky</a></p>
<p><a href="#k17">*** 17. Zákaz přenosu fokusu na zvolený ovládací prvek; přepínání pomocí kláves Tab a Shift+Tab</a></p>
<p><a href="#k18">*** 18. Nastavení stylu zobrazení ovládacích prvků TUI</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba textového uživatelského rozhraní s knihovnou prompt_toolkit: aplikace s celoobrazovkovým rozhraním</h2>

<p>Na předchozí trojici článků [<a
href="https://www.root.cz/clanky/tvorba-aplikaci-s-prikazovym-radkem-v-pythonu-s-vyuzitim-knihoven-gnu-readline-a-prompt-toolkit/">1</a>]
[<a href="https://www.root.cz/clanky/tvorba-aplikaci-s-textovym-uzivatelskym-rozhranim-zalozenym-na-knihovne-prompt-toolkit/">2</a>]
[<a href="https://www.root.cz/clanky/tvorba-textoveho-rozhrani-s-knihovnou-prompt-toolkit-zakladni-prvky-tui/">3</a>]
dnes navážeme, protože si řekneme, jaké základní ovládací prvky (widgety) je
možné využít při tvorbě textového uživatelského rozhraní založeného na knihovně
<strong>prompt_toolkit</strong>. Taktéž se seznámíme s&nbsp;takzvanými správci
rozvržení (<i>layout managers</i>), které ovládací prvky vhodným způsobem
uspořádají na plochu terminálu.</p>

*** image ***
<img src="https://i.iinfo.cz/images/325/prompt-toolkit-3-15.png" class="image-334654" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 1: Dialog pro výběr odpovědi typu Ano/Ne, který je představován
funkcí <strong>yes_no_dialog</strong>, tentokrát plně počeštěný díky podpoře
Unicode.</i></p>

<p><div class="rs-tip-major">Poznámka: podobně, jako tomu bylo ve všech třech
předchozích článcích, budou i dnes všechny screenshoty pořízeny na terminálu
XTerm s&nbsp;nastavenými 25 textovými řádky a 80 znaky na řádek. Sami si však
můžete vyzkoušet, že aplikace budou automaticky reagovat na změnu velikosti
terminálu (samozřejmě v&nbsp;rozumných mezích, problém nastane při zmenšení
terminálu pod přibližně 30&times;10 znaků, kdy se vypíše chybové hlášení
&bdquo;Window too small&ldquo;). Velikost terminálu lze změnit i v&nbsp;během
činnosti aplikací.</div></p>

<img src="https://i.iinfo.cz/images/325/prompt-toolkit-3-17.png" class="image-334656" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 2: Dialog typu <strong>button_dialog</strong> se třemi
specifikovanými tlačítky.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vytvoření kostry aplikace s&nbsp;TUI postavené nad knihovnou <strong>prompt_toolkit</strong></h2>

<p>Aplikace s&nbsp;plnohodnotným TUI jsou při použití knihovny
<strong>prompt_toolkit</strong> představovány instancí třídy <a
href="https://python-prompt-toolkit.readthedocs.io/en/master/pages/reference.html#prompt_toolkit.application.Application">prompt_toolkit.application.Application</a>.
Typicky se konstruktoru této třídy předává takzvaný <i>layout</i> s&nbsp;prvky
TUI, nastavené klávesové zkratky atd. Po zavolání metody <strong>run()</strong>
se spustí smyčka událostí (<i>event loop</i>), která se bude mj.&nbsp;starat o
reakce ovládacích prvků na akce prováděné uživatelem. <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui01_basic_app.py">V&nbsp;prvním
demonstračním příkladu</a>, který si dnes ukážeme, se pouze vytvoří objekt typu
<strong>Application</strong> představující ústřední část aplikace
s&nbsp;textovým uživatelským rozhraním. Následně je zavolána metoda
<strong>run()</strong>, která aplikaci spustí. Ovšem vzhledem k&nbsp;tomu, že
v&nbsp;aplikaci nejsou definovány žádné prvky textového uživatelského rozhraní,
pouze se vypíše zpráva &bdquo;No layout specified. Press ENTER to quit.&ldquo;
a aplikace bude čekat na své ukončení stiskem klávesy Enter:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application
&nbsp;
&nbsp;
<i># vytvoření aplikace s textovým uživatelským rozhraním</i>
application = Application()
&nbsp;
<i># spuštění aplikace</i>
application.run()
</pre>

*** image ***
<p><i>Obrázek 3: Vzhledem k&nbsp;tomu, že v&nbsp;aplikaci nejsou specifikovány
žádné prvky textového uživatelského rozhraní, vypíše se po jejím spuštění pouze
tato zpráva a aplikace bude po stisku klávesy Enter ukončena.</i></p>

<p>Ve skutečnosti budou všechny následující demonstrační příklady postaveny na
poněkud odlišném skriptu, který se od prvního demonstračního příkladu odlišuje
pouze tím, že se v&nbsp;něm explicitně používá funkce <strong>main</strong>. <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui02_basic_app_with_main.py">Úplný
zdrojový kód</a> tohoto příkladu vypadá následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&#k03nbsp;
from prompt_toolkit import Application
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application()
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

*** image ***
<p><i>Obrázek 4: I po spuštění tohoto skriptu se vypíše stejná zpráva, jako ve
skriptu prvním.</i></p>

<p>Jen pro zajímavost si připomeňme, jak vypadá kostra aplikace při použití <a
href="https://www.root.cz/clanky/tvorba-grafickeho-uzivatelskeho-rozhrani-v-pythonu-s-vyuzitim-knihovny-appjar">knihovny
appJar</a>, s&nbsp;níž jsme se již na stránkách Roota seznámili:</p>

<pre>
<i>#!/usr/bin/env python</i>
&nbsp;
from appJar import gui
&nbsp;
app = gui()
&nbsp;
app.go()
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Přepnutí do režimu zobrazení využívajícího celou plochu terminálu</h2>

<p>Konstruktoru třídy <strong>Application</strong> je možné předat několik
nepovinných (pojmenovaných) parametrů, především pak:</p>

<table>
<tr><th>Parametr</th><th>Význam</th></tr>
<tr><td>layout</td><td>objekt nesoucí informace o všech ovládacích prvcích</td></tr>
<tr><td>key_bindings</td><td>nastavené klávesové zkratky</td></tr>
<tr><td>clipboard</td><td>objekt představující textovou schránku</td></tr>
<tr><td>full_screen</td><td>režim vyplnění celé plochy terminálu</td></tr>
<tr><td>erase_when_done</td><td>povolení vymazání obrazovky před ukončením aplikace</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: v&nbsp;dokumentaci jsou sice zmíněny
parametry <strong>on_abort</strong> a <strong>on_exit</strong>, ovšem ty nejsou
podporovány (je zapotřebí opravit dokumentační řetězec konstruktoru).</div></p>

<p>Mnoho aplikací s&nbsp;textovým uživatelským rozhraním (například <i>Midnight
Commander</i> a všechny textové editory) používají pro své zobrazení celou
dostupnou plochu terminálu. Toto chování se povolí použitím pojmenovaného
parametru <strong>full_screen</strong>:</p>

<pre>
application = Application(<strong>full_screen=True</strong>)
</pre>

<p>Opět se podívejme na <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui03_full_screen.py">demonstrační
příklad</a> (režim plné obrazovky bude použit i ve všech dalších
příkladech):</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(<strong>full_screen=True</strong>)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

*** image ***
<p><i>Obrázek 5: Výsledek spuštění předchozího skriptu.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Základní prvky TUI: kontejnery a prvky pro vstup/výstup textových údajů</h2>

<p>Mezi základní třídy, z&nbsp;nichž se v&nbsp;knihovně
<strong>prompt_toolkit</strong> skládá textové uživatelské rozhraní, patří
především třída nazvaná <strong>UIControl</strong> a taktéž třída
<strong>Container</strong>. Jedná se o bázové třídy reprezentující libovolný
prvek TUI resp.&nbsp;zajišťující zabalení a umístění tohoto prvku na ploše
terminálu. Od třídy <strong>Container</strong> jsou odvozeny další třídy,
především pak následující čtveřice:</p>

<table>
<tr><th>Třída</th><th>Stručný popis</th></tr>
<tr><td><a href="#k08">HSplit</a></td><td>zajišťuje horizontální rozložení prvků na ploše</td></tr>
<tr><td><a href="#k06">VSplit</a></td><td>zajišťuje vertikální rozložení prvků na ploše</td></tr>
<tr><td>FloatContainer</td><td>používá se například pro menu a další &bdquo;plovoucí&ldquo; prvky</td></tr>
<tr><td><a href="#k10">Window</a></td><td>kontejner, který obaluje jeden konkrétní ovládací prvek</td></tr>
</table>

<p>Od třídy <strong>UIControl</strong> jsou odvozeny především třídy:</p>

<table>
<tr><th>Třída</th><th>Stručný popis</th></tr>
<tr><td>FormattedTextControl</td><td>zajišťuje vykreslení naformátovaného textu</td></tr>
<tr><td>BufferControl</td><td>zobrazí vstupní buffer</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: instanci <strong>BufferControl</strong>
využívá i metoda <strong>prompt()</strong>, s&nbsp;níž jsme se seznámili <a
href="https://www.root.cz/clanky/tvorba-aplikaci-s-prikazovym-radkem-v-pythonu-s-vyuzitim-knihoven-gnu-readline-a-prompt-toolkit/">v&nbsp;úvodní
části</a> tohoto miniseriálu.</div></p>

<p>Prozatím si v&nbsp;demonstračních příkladech vystačíme s&nbsp;prvkem
<strong>FormattedTextControl</strong>. Postup při jeho zobrazení na ploše
terminálu je následující:</p>

<p>Nejprve vytvoříme naformátovanou zprávu (viz <a
href="https://www.root.cz/clanky/tvorba-textoveho-rozhrani-s-knihovnou-prompt-toolkit-zakladni-prvky-tui/#k02">předchozí
článek</a>) a následně tuto zprávu předáme konstruktoru třídy
<strong>FormattedTextControl</strong>:</p>

<pre>
<i># naformátovaná zpráva</i>
message = HTML("&lt;ansired&gt;Hello&lt;/ansired&gt; &lt;ansiblue&gt;world!&lt;/ansiblue&gt;")
&nbsp;
<i># ovládací prvek s naformátovaným textem</i>
text = FormattedTextControl(text=message)
</pre>

<p>Dále je nutné vytvořený ovládací prvek vložit do vhodného kontejneru.
Nejjednodušší bude, alespoň prozatím, použití kontejneru
<strong>Window</strong>:</p>

<pre>
<i># okno obsahující jediný ovládací prvek</i>
window = Window(content=text)
</pre>

<p>Následně vytvoříme správce rozvržení a (opět v&nbsp;konstruktoru)
specifikujeme, který kontejner se má zobrazit:</p>

<pre>
<i># správce rozvržení</i>
layout = Layout(window)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Naprogramované reakce na klávesové zkratky</h2>

<p>Předchozí řádky vlastně popisovaly pouze vzhled aplikace; zbývá doplnit
informace o jejím chování. Prozatím se spokojíme s&nbsp;tím, že aplikaci bude
možné ukončit klávesou <strong>Escape</strong>. Vzhledem k&nbsp;tomu, že smyčka
událostí je řízena přímo instancí třídy <strong>Application</strong>, musíme
tomuto objektu nějakým způsobem předat informaci o tom, jak má na klávesu
<strong>Escape</strong> reagovat. To zajišťuje další část kódu, v&nbsp;níž
vytvoříme instanci třídy <strong>KeyBindings</strong>, pomocnou callback funkci
<strong>on_escape_press</strong>, která aplikaci ukončí a s&nbsp;využitím
anotace navážeme tuto callback funkci právě na stisk klávesy
<strong>Escape</strong>:</p>

<pre>
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
&nbsp;
&nbsp;
<i>@key_bindings.add('escape')</i>
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
</pre>

<p>Instanci třídy <strong>KeyBindings</strong> pak předáme konstruktoru
<strong>Application</strong>:</p>

<pre>
<i># vytvoření aplikace s textovým uživatelským rozhraním</i>
application = Application(layout=layout,
                          <strong>key_bindings=key_bindings</strong>,
                          full_screen=True)
</pre>

<p>Úplný <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui04_simple_app.py">zdrojový
kód tohoto příkladu</a> je již poměrně komplikovaný, ovšem vytvořili jsme
v&nbsp;něm užitečný základ TUI (což bude patrné z&nbsp;příkladů dalších):</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application, HTML
from prompt_toolkit.layout.containers import Window
from prompt_toolkit.layout.controls import FormattedTextControl
from prompt_toolkit.layout.layout import Layout
from prompt_toolkit.key_binding import KeyBindings
&nbsp;
&nbsp;
<i># naformátovaná zpráva</i>
message = HTML("&lt;ansired&gt;Hello&lt;/ansired&gt; &lt;ansiblue&gt;world!&lt;/ansiblue&gt;")
&nbsp;
<i># ovládací prvek s naformátovaným textem</i>
text = FormattedTextControl(text=message)
&nbsp;
<i># okno obsahující jediný ovládací prvek</i>
window = Window(content=text)
&nbsp;
<i># správce rozvržení</i>
layout = Layout(window)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
&nbsp;
&nbsp;
<i>@key_bindings.add('escape')</i>
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

*** image ***
<p><i>Obrázek 6: Takto vypadá první aplikace se skutečným textovým uživatelským
rozhraním po svém spuštění.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vertikální rozmístění prvků TUI v&nbsp;ploše terminálu</h2>

<p>Jednotlivé prvky textového uživatelského rozhraní je možné na ploše
terminálu rozmístit různými způsoby s&nbsp;využitím takzvaných správců
rozvržení (<i>layout managers</i>), které se ovšem v&nbsp;knihovně
<strong>prompt_toolkit</strong> nazývají <i>kontejnery</i>. Mezi kontejnery
patří především tyto tři třídy:</p>

<ol>
<li><strong>HSplit</strong></li>
<li><strong>VSplit</strong></li>
<li><strong>FlowContainer</strong></li>
<li><strong>Window</strong></li>
<li><strong>ConditionalContainer</strong></li>
</ol>

<p>Nejprve si ukažme příklad použití kontejneru <strong>VSplit</strong>. Ten
slouží pro rozmístění prvků vertikálně &ndash; všechny prvky, které do tohoto
kontejneru vložíme, budou umístěny vedle sebe v&nbsp;pořadí zleva doprava:</p>

<pre>
+-----------+------------+------------+------------+
|           |            |            |            |
|  prvek #1 |  prvek #2  |  prvek #3  |  prvek #4  |
|           |            |            |            |
+-----------+------------+------------+------------+
</pre>

<p>Prvky se do kontejneru předávají již při jeho konstrukci, a to konkrétně
v&nbsp;seznamu (povšimněte si hranatých závorek). Počet takto vložených prvků
TUI není teoreticky nijak omezen; prakticky jsme samozřejmě omezeni šířkou
terminálu, tj.&nbsp;počtem znaků na řádku. Pokud se prvky na šířku terminálu
nevejdou, vypíše se zpráva &bdquo;Window too small&ldquo;:</p>

<pre>
<i># správce rozvržení</i>
vsplit = <strong>VSplit([</strong>
    <strong>window1,</strong>
    <strong>window2,</strong>
    <strong>window3])</strong>
</pre>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application, HTML
from prompt_toolkit.layout.containers import Window
from prompt_toolkit.layout.controls import FormattedTextControl
from prompt_toolkit.layout import Layout, VSplit
from prompt_toolkit.key_binding import KeyBindings
&nbsp;
&nbsp;
<i># naformátované zprávy</i>
message1 = HTML("&lt;ansired&gt;Hello&lt;/ansired&gt;")
message2 = HTML("&lt;ansiblue&gt;world!&lt;/ansiblue&gt;")
message3 = HTML("&lt;ansiyellow&gt;(Esc to quit)&lt;/ansiyellow&gt;")
&nbsp;
<i># ovládací prvky s naformátovaným textem</i>
text1 = FormattedTextControl(text=message1)
text2 = FormattedTextControl(text=message2)
text3 = FormattedTextControl(text=message3)
&nbsp;
<i># okna obsahující jediný ovládací prvek</i>
window1 = Window(content=text1)
window2 = Window(content=text2)
window3 = Window(content=text3)
&nbsp;
<i># správce rozvržení</i>
vsplit = VSplit([
    window1,
    window2,
    window3])
&nbsp;
layout = Layout(vsplit)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Použití prvku typu <strong>Window</strong> ve funkci oddělovače</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application, HTML
from prompt_toolkit.layout.containers import Window
from prompt_toolkit.layout.controls import FormattedTextControl
from prompt_toolkit.layout import Layout, VSplit
from prompt_toolkit.key_binding import KeyBindings
&nbsp;
&nbsp;
<i># naformátované zprávy</i>
message1 = HTML("&lt;ansired&gt;Hello&lt;/ansired&gt;")
message2 = HTML("&lt;ansiblue&gt;world!&lt;/ansiblue&gt;")
message3 = HTML("&lt;ansiyellow&gt;(Esc to quit)&lt;/ansiyellow&gt;")
&nbsp;
<i># ovládací prvky s naformátovaným textem</i>
text1 = FormattedTextControl(text=message1)
text2 = FormattedTextControl(text=message2)
text3 = FormattedTextControl(text=message3)
&nbsp;
<i># okna obsahující jediný ovládací prvek</i>
window1 = Window(content=text1)
window2 = Window(content=text2)
window3 = Window(content=text3)
&nbsp;
<i># správce rozvržení</i>
vsplit = VSplit([
    window1,
    Window(width=1, char='|'),
    window2,
    Window(width=1, char='|'),
    window3])
layout = Layout(vsplit)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Horizontální rozmístění prvků TUI v&nbsp;ploše terminálu</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application, HTML
from prompt_toolkit.layout.containers import Window
from prompt_toolkit.layout.controls import FormattedTextControl
from prompt_toolkit.layout import Layout, HSplit
from prompt_toolkit.key_binding import KeyBindings
&nbsp;
&nbsp;
<i># naformátované zprávy</i>
message1 = HTML("&lt;ansired&gt;Hello&lt;/ansired&gt;")
message2 = HTML("&lt;ansiblue&gt;world!&lt;/ansiblue&gt;")
message3 = HTML("&lt;ansiyellow&gt;(Esc to quit)&lt;/ansiyellow&gt;")
&nbsp;
<i># ovládací prvky s naformátovaným textem</i>
text1 = FormattedTextControl(text=message1)
text2 = FormattedTextControl(text=message2)
text3 = FormattedTextControl(text=message3)
&nbsp;
<i># okna obsahující jediný ovládací prvek</i>
window1 = Window(content=text1)
window2 = Window(content=text2)
window3 = Window(content=text3)
&nbsp;
<i># správce rozvržení</i>
hsplit = HSplit([
    window1,
    window2,
    window3])
&nbsp;
layout = Layout(hsplit)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>

*** image ***
<p><i>Obrázek 10: Aplikace, v&nbsp;níž jsou tři prvky TUI rozmístěny
horizontálně a navíc jsou mezi tyto prvky vložena okna o výšce jeden znak,
které plní funkci oddělovače.</i></p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application, HTML
from prompt_toolkit.layout.containers import Window
from prompt_toolkit.layout.controls import FormattedTextControl
from prompt_toolkit.layout import Layout, HSplit
from prompt_toolkit.key_binding import KeyBindings
&nbsp;
&nbsp;
<i># naformátované zprávy</i>
message1 = HTML("&lt;ansired&gt;Hello&lt;/ansired&gt;")
message2 = HTML("&lt;ansiblue&gt;world!&lt;/ansiblue&gt;")
message3 = HTML("&lt;ansiyellow&gt;(Esc to quit)&lt;/ansiyellow&gt;")
&nbsp;
<i># ovládací prvky s naformátovaným textem</i>
text1 = FormattedTextControl(text=message1)
text2 = FormattedTextControl(text=message2)
text3 = FormattedTextControl(text=message3)
&nbsp;
<i># okna obsahující jediný ovládací prvek</i>
window1 = Window(content=text1)
window2 = Window(content=text2)
window3 = Window(content=text3)
&nbsp;
<i># správce rozvržení</i>
hsplit = HSplit([
    window1,
    Window(height=1, char='-'),
    window2,
    Window(height=1, char='-'),
    window3])
&nbsp;
layout = Layout(hsplit)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Současné použití správců rozložení s&nbsp;vertikálním i horizontálním rozmístěním prvků TUI</h2>

<pre>
<i># správce rozvržení</i>
vsplit = HSplit([
    VSplit([
        window1,
        Window(width=1, char='|'),
        window2]),
    Window(height=1, char='-'),
    window3])
&nbsp;
layout = Layout(vsplit)
</pre>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application, HTML
from prompt_toolkit.layout.containers import Window
from prompt_toolkit.layout.controls import FormattedTextControl
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
&nbsp;
&nbsp;
<i># naformátované zprávy</i>
message1 = HTML("&lt;ansired&gt;Hello&lt;/ansired&gt;")
message2 = HTML("&lt;ansiblue&gt;world!&lt;/ansiblue&gt;")
message3 = HTML("&lt;ansiyellow&gt;(Esc to quit)&lt;/ansiyellow&gt;")
&nbsp;
<i># ovládací prvky s naformátovaným textem</i>
text1 = FormattedTextControl(text=message1)
text2 = FormattedTextControl(text=message2)
text3 = FormattedTextControl(text=message3)
&nbsp;
<i># okna obsahující jediný ovládací prvek</i>
window1 = Window(content=text1)
window2 = Window(content=text2)
window3 = Window(content=text3)
&nbsp;
<i># správce rozvržení</i>
vsplit = HSplit([
    VSplit([
        window1,
        Window(width=1, char='|'),
        window2]),
    Window(height=1, char='-'),
    window3])
&nbsp;
layout = Layout(vsplit)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Další ovládací prvky, z&nbsp;nichž se skládají aplikace s&nbsp;textovým uživatelským rozhraním</h2>

<p>Kromě základních ovládacích prvků <strong>FormattedTextControl</strong> a
<strong>BufferControl</strong>, které jsou odvozeny přímo od bázové třídy
<strong>UIControl</strong>, je možné použít i plnohodnotné widgety: tlačítka,
textová návěští, menu atd. Tyto widgety většinou interně používají kombinaci
tříd <strong>Window</strong> a <strong>FormattedTextControl</strong>
popř.&nbsp;<strong>Window</strong> a <strong>BufferControl</strong>, což
vlastně jen dokazuje, že tvorba TUI je v&nbsp;mnoha ohledech jednodušší, než
tomu je u plnohodnotného GUI:</p>

<table>
<tr><th>Ovládací prvek</th><th>Stručný popis</th></tr>
<tr><td>Label</td><td>textové návěští</td></tr>
<tr><td>Button</td><td>tlačítko (může získat fokus a reagovat na stlačení)</td></tr>
<tr><td>Checkbox</td><td>zaškrtávací tlačítko</td></tr>
<tr><td>RadioList</td><td>skupina přepínacích tlačítek</td></tr>
<tr><td>TextArea</td><td>vstupní textové pole (textový editor)</td></tr>
<tr><td>Frame</td><td>rámeček okolo libovolného prvku nebo skupiny prvků</td></tr>
<tr><td>Shadow</td><td>stín pod libovolným prvkem nebo skupinou prvků</td></tr>
<tr><td>Box</td><td>okraj okolo libovolného prvku nebo skupiny prvků</td></tr>
<tr><td>HorizontalLine</td><td>oddělovací čára</td></tr>
<tr><td>VerticalLine</td><td>oddělovací čára</td></tr>
<tr><td>ProgressBar</td><td>zobrazení probíhající činnosti</td></tr>
</table>



<p><a name="k11"></a></p>
<h2 id="k11">11. Prvky <strong>Frame</strong> a <strong>Box</strong></h2>

<p>První prvky z&nbsp;předchozího seznamu, s&nbsp;nimiž se seznámíme, jsou
pasivní, tj.&nbsp;nereagují na žádné akce prováděné uživatelem a slouží pouze
pro lepší pozicování prvků aktivních. Jedná se o prvky <strong>Frame</strong> a
<strong>Box</strong>. Jedním z&nbsp;důvodů, proč si tyto prvky popisujeme ve
stejné kapitole je fakt, že se skutečně používají společně, protože
<strong>Frame</strong> slouží k&nbsp;vytvoření viditelného rámečku okolo jiného
prvku/kontejneru, zatímco <strong>Box</strong> k&nbsp;vytvoření neviditelného
okraje. Základní použití je následující:</p>

<pre>
<i># struktura obrazovky</i>
root = Box(Frame(widget))
</pre>

*** image ***
<p><i>Obrázek 12: Použití prvků Box a Frame okolo zprávy zobrazené prvkem Label
(návěští).</i></p>

<p>Podívejme se na způsob vložení návěští do prvků Frame a Box. Jak je patrné,
mohou oba tyto prvky sloužit jako kontejnery:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application, HTML
from prompt_toolkit.layout.containers import Window
from prompt_toolkit.layout.controls import FormattedTextControl
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.widgets import *
&nbsp;
&nbsp;
<i># naformátovaná zpráva</i>
message = HTML("&lt;ansired&gt;Hello&lt;/ansired&gt; &lt;ansiblue&gt;world!&lt;/ansiblue&gt;")
&nbsp;
<i># widget</i>
widget = Label(message)
&nbsp;
<i># struktura obrazovky</i>
root = Box(Frame(widget))
&nbsp;
<i># správce rozvržení</i>
layout = Layout(container=root)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Nastavení stylu zobrazení prvku typu <strong>Frame</strong> a <strong>Box</strong></h2>

<p>U prvků typu <strong>Box</strong> a <strong>Frame</strong> je možné měnit
styl zobrazení. Okraj lze nastavit na libovolnou hodnotu počítanou ve znacích
popř.&nbsp;textových řádcích, styl rámečku je ovlivněn parametrem
<strong>style</strong>, což je ostatně stejné i pro všechny další prvky
TUI:</p>

<pre>
<i># struktura obrazovky</i>
root = Box(Frame(widget, title="About:", style="bg:<i>#ansiblue #ansiwhite"),</i>
           padding=2)
</pre>

<p>Výsledek můžeme vidět na dalším screenshotu:</p>

*** image ***
<p><i>Obrázek 13: Nastavení stylu zobrazení prvků typu <strong>Frame</strong> a
<strong>Box</strong>.</i></p>

<p>Opět si ukažme příklad, v&nbsp;němž se styl rámečku nastavuje:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application, HTML
from prompt_toolkit.layout.containers import Window
from prompt_toolkit.layout.controls import FormattedTextControl
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.widgets import *
&nbsp;
&nbsp;
<i># naformátovaná zpráva</i>
message = HTML("&lt;ansibrightred&gt;Hello&lt;/ansibrightred&gt; " +
               "&lt;ansibrightyellow&gt;world!&lt;/ansibrightyellow&gt;")
&nbsp;
<i># widget</i>
widget = Label(message)
&nbsp;
<i># struktura obrazovky</i>
root = Box(Frame(widget, title="About:", style="bg:<i>#ansiblue #ansiwhite"),</i>
           padding=2)
&nbsp;
<i># správce rozvržení</i>
layout = Layout(container=root)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Použití prvku typu <strong>Label</strong></h2>

<p>Textové návěští, jehož obsah se samozřejmě dá programově modifikovat, je
reprezentováno třídou <strong>Label</strong>. Podobně jako v&nbsp;prakticky
všech dalších widgetech je možné i zde při specifikaci zobrazené zprávy použít
formátování s&nbsp;využitím minule popsaných tříd <strong>ANSI</strong> či
<strong>HTML</strong>:</p>

<pre>
message1 = HTML("&lt;ansibrightred&gt;Hello&lt;/ansibrightred&gt;")
widget1 = Label(message1)
...
...
...
</pre>

*** image ***
<p><i>Obrázek 14: Tři prvky typu Label na ploše aplikace.</i></p>

<p>Celý zdrojový kód příkladu, v&nbsp;němž jsou použita tři návěští, vypadá
následovně:</p>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application, HTML
from prompt_toolkit.layout.containers import Window
from prompt_toolkit.layout.controls import FormattedTextControl
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.widgets import *
&nbsp;
&nbsp;
<i># naformátované zprávy</i>
message1 = HTML("&lt;ansibrightred&gt;Hello&lt;/ansibrightred&gt;")
message2 = HTML("&lt;ansibrightyellow&gt;world!&lt;/ansibrightyellow&gt;")
message3 = HTML("&lt;ansibrightyellow&gt;(Esc to quit)&lt;/ansibrightyellow&gt;")
&nbsp;
<i># widgety</i>
widget1 = Label(message1)
widget2 = Label(message2)
widget3 = Label(message3)
&nbsp;
<i># styl rámce</i>
style = "bg:<i>#ansiblue #ansiwhite"</i>
&nbsp;
<i># správce rozvržení</i>
vsplit = HSplit([
    VSplit([
        Frame(widget1, style=style),
        Frame(widget2, style=style)]),
    Frame(widget3, style=style)])
layout = Layout(vsplit)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on_escape_press</strong>(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Prvek typu <strong>TextArea</strong> aneb textový editor snadno a rychle</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application, HTML
from prompt_toolkit.layout.containers import Window
from prompt_toolkit.layout.controls import FormattedTextControl
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.widgets import *
&nbsp;
&nbsp;
<i># naformátované zprávy</i>
message1 = HTML("<ansibrightred>Hello</ansibrightred>")
message2 = HTML("<ansibrightyellow>world!</ansibrightyellow>")
message3 = HTML("<ansibrightyellow>(Esc to quit)</ansibrightyellow>")
&nbsp;
<i># widgety</i>
widget1 = Label(message1)
widget2 = Label(message2)
widget3 = Label(message3)
&nbsp;
<i># styl rámce</i>
style = "bg:<i>#ansiblue #ansiwhite"</i>
&nbsp;
<i># správce rozvržení</i>
vsplit = HSplit([
    VSplit([
        Frame(widget1, style=style),
        Frame(widget2, style=style)]),
    Frame(TextArea(), title="Editor"),
    Frame(widget3, style=style)])
&nbsp;
layout = Layout(vsplit)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on</strong>_escape_press(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Ovládací prvek typu <strong>Button</strong></h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.application.current import get_app
from prompt_toolkit.widgets import *
&nbsp;
&nbsp;
def <strong>button</strong>1_clicked():
    text_area.text += 'Button 1 clicked\n'
&nbsp;
&nbsp;
def <strong>button</strong>2_clicked():
    text_area.text += 'Button 2 clicked\n'
&nbsp;
&nbsp;
def <strong>button</strong>3_clicked():
    text_area.text += 'Button 3 clicked\n'
&nbsp;
&nbsp;
def <strong>exit</strong>_clicked():
    get_app().exit()
&nbsp;
&nbsp;
button1 = Button('Button 1', handler=button1_clicked)
button2 = Button('Button 2', handler=button2_clicked)
button3 = Button('Button 3', handler=button3_clicked)
button4 = Button('Exit', handler=exit_clicked)
&nbsp;
buttons = HSplit([button1,
                  button2,
                  button3,
                  button4])
&nbsp;
text_area = TextArea()
&nbsp;
<i># správce rozvržení</i>
root = VSplit([Box(Frame(buttons, style="bg:<i>#ansiblue #ansiwhite"), padding=2),</i>
               Box(Frame(text_area, title="Events"), padding=2)])
&nbsp;
layout = Layout(root)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on</strong>_escape_press(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Přepínání fokusu (zaměření, výběru) mezi jednotlivými tlačítky</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.key_binding.bindings.focus import focus_next, focus_previous
from prompt_toolkit.application.current import get_app
from prompt_toolkit.widgets import *
&nbsp;
&nbsp;
def <strong>button</strong>1_clicked():
    text_area.text += 'Button 1 clicked\n'
&nbsp;
&nbsp;
def <strong>button</strong>2_clicked():
    text_area.text += 'Button 2 clicked\n'
&nbsp;
&nbsp;
def <strong>button</strong>3_clicked():
    text_area.text += 'Button 3 clicked\n'
&nbsp;
&nbsp;
def <strong>exit</strong>_clicked():
    get_app().exit()
&nbsp;
&nbsp;
button1 = Button('Button 1', handler=button1_clicked)
button2 = Button('Button 2', handler=button2_clicked)
button3 = Button('Button 3', handler=button3_clicked)
button4 = Button('Exit', handler=exit_clicked)
&nbsp;
buttons = HSplit([button1,
                  button2,
                  button3,
                  button4])
&nbsp;
text_area = TextArea()
&nbsp;
<i># správce rozvržení</i>
root = VSplit([Box(Frame(buttons, style="bg:<i>#ansiblue #ansiwhite"), padding=2),</i>
               Box(Frame(text_area, title="Events"), padding=2)])
&nbsp;
layout = Layout(root)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
key_bindings.add('up')(focus_previous)
key_bindings.add('down')(focus_next)
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on</strong>_escape_press(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Zákaz přenosu fokusu na zvolený ovládací prvek; přepínání pomocí kláves Tab a Shift+Tab</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.key_binding.bindings.focus import focus_next, focus_previous
from prompt_toolkit.application.current import get_app
from prompt_toolkit.widgets import *
&nbsp;
&nbsp;
def <strong>button</strong>1_clicked():
    text_area.text += 'Button 1 clicked\n'
&nbsp;
&nbsp;
def <strong>button</strong>2_clicked():
    text_area.text += 'Button 2 clicked\n'
&nbsp;
&nbsp;
def <strong>button</strong>3_clicked():
    text_area.text += 'Button 3 clicked\n'
&nbsp;
&nbsp;
def <strong>exit</strong>_clicked():
    get_app().exit()
&nbsp;
&nbsp;
button1 = Button('Button 1', handler=button1_clicked)
button2 = Button('Button 2', handler=button2_clicked)
button3 = Button('Button 3', handler=button3_clicked)
button4 = Button('Exit', handler=exit_clicked)
&nbsp;
buttons = HSplit([button1,
                  button2,
                  button3,
                  button4])
&nbsp;
text_area = TextArea(focusable=False)
&nbsp;
<i># správce rozvržení</i>
root = VSplit([Box(Frame(buttons, style="bg:#ansiblue #ansiwhite"), padding=2),
               Box(Frame(text_area, title="Events"), padding=2)])
&nbsp;
layout = Layout(root)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
key_bindings.add('s-tab')(focus_previous)
key_bindings.add('tab')(focus_next)
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on</strong>_escape_press(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Nastavení stylu zobrazení ovládacích prvků TUI</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from prompt_toolkit import Application
from prompt_toolkit.layout import Layout, HSplit, VSplit
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.key_binding.bindings.focus import focus_next, focus_previous
from prompt_toolkit.application.current import get_app
from prompt_toolkit.widgets import *
from prompt_toolkit.styles import Style
&nbsp;
&nbsp;
def <strong>button</strong>1_clicked():
    text_area.text += 'Button 1 clicked\n'
&nbsp;
&nbsp;
def <strong>button</strong>2_clicked():
    text_area.text += 'Button 2 clicked\n'
&nbsp;
&nbsp;
def <strong>button</strong>3_clicked():
    text_area.text += 'Button 3 clicked\n'
&nbsp;
&nbsp;
def <strong>exit</strong>_clicked():
    get_app().exit()
&nbsp;
&nbsp;
button1 = Button('Button 1', handler=button1_clicked)
button2 = Button('Button 2', handler=button2_clicked)
button3 = Button('Button 3', handler=button3_clicked)
button4 = Button('Exit', handler=exit_clicked)
&nbsp;
buttons = HSplit([button1,
                  button2,
                  button3,
                  button4])
&nbsp;
text_area = TextArea(focusable=False)
&nbsp;
<i># správce rozvržení</i>
root = VSplit([Box(Frame(buttons, style="class:button_panel"),
                   padding=2),
               Box(Frame(text_area, title="Events", style="class:edit_panel"),
                   padding=2)])
&nbsp;
layout = Layout(root)
&nbsp;
<i># napojení na klávesové zkratky</i>
key_bindings = KeyBindings()
key_bindings.add('up')(focus_previous)
key_bindings.add('down')(focus_next)
&nbsp;
style = Style([
    ('button_panel', 'bg:<i>#ansiblue #ansiwhite'),</i>
    ('edit_panel',   'bg:<i>#ansigreen #000000'),</i>
    ('button',       '<i>#ansibrightyellow'),</i>
    ('button focused', 'bg:<i>#ff0000'),</i>
    ('text-area focused', 'bg:<i>#ff0000'),</i>
])
&nbsp;
&nbsp;
@key_bindings.add('escape')
def <strong>on</strong>_escape_press(event):
    <i>"""Callback funkce volaná při stisku klávesy Esc."""</i>
    print("\n\n[escape]\n\n")
    event.app.exit()
&nbsp;
&nbsp;
def <strong>main</strong>():
    <i># vytvoření aplikace s textovým uživatelským rozhraním</i>
    application = Application(layout=layout,
                              key_bindings=key_bindings,
                              full_screen=True,
                              style=style)
&nbsp;
    <i># spuštění aplikace</i>
    application.run()
&nbsp;
&nbsp;
if __name__ == '__main__':
    main()
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Popis</th><th>Odkaz</th></tr>
<tr><td> 1</td><td>tui01_basic_app.py</td><td>kostra aplikace s&nbsp;TUI</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui01_basic_app.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui01_basic_app.py</a></td></tr>
<tr><td> 2</td><td>tui02_basic_app_with_main.py</td><td>vylepšená kostra aplikace s&nbsp;TUI</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui02_basic_app_with_main.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui02_basic_app_with_main.py</a></td></tr>
<tr><td> 3</td><td>tui03_full_screen.py</td><td>přepnutí do režimu celé obrazovky</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui03_full_screen.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui03_full_screen.py</a></td></tr>
<tr><td> 4</td><td>tui04_simple_app.py</td><td>použití základních prvků TUI</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui04_simple_app.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui04_simple_app.py</a></td></tr>
<tr><td> 5</td><td>tui05_vsplit.py</td><td>vertikální rozmístění prvků na obrazovce</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui05_vsplit.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui05_vsplit.py</a></td></tr>
<tr><td> 6</td><td>tui06_window_as_separator.py</td><td>použití prvku Window ve funkci oddělovače</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui06_window_as_separator.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui06_window_as_separator.py</a></td></tr>
<tr><td> 7</td><td>tui07_hsplit.py</td><td>horizontální rozmístění prvků na obrazovce</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui07_hsplit.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui07_hsplit.py</a></td></tr>
<tr><td> 8</td><td>tui08_window_as_separator.py</td><td>použití prvku Window ve funkci oddělovače</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui08_window_as_separator.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui08_window_as_separator.py</a></td></tr>
<tr><td> 9</td><td>tui09_hsplit_vsplit.py</td><td>kombinace horizontálního a vertikálního rozdělení</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui09_hsplit_vsplit.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui09_hsplit_vsplit.py</a></td></tr>
<tr><td>10</td><td>tui10_frame_box.py</td><td>použití prvků Box a Frame</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui10_frame_box.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui10_frame_box.py</a></td></tr>
<tr><td>11</td><td>tui11_frame_box_styles.py</td><td>nastavení stylů prvků Box a Frame</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui11_frame_box_styles.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui11_frame_box_styles.py</a></td></tr>
<tr><td>12</td><td>tui12_frame_box_and_layout.py</td><td>vylepšený layout aplikace</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui12_frame_box_and_layout.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui12_frame_box_and_layout.py</a></td></tr>
<tr><td>13</td><td>tui13_text_area.py</td><td>textové pole</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui13_text_area.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui13_text_area.py</a></td></tr>
<tr><td>14</td><td>tui14_buttons.py</td><td>použití prvků Button</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui14_buttons.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui14_buttons.py</a></td></tr>
<tr><td>15</td><td>tui15_buttons_focus.py</td><td>přepínaní mezi tlačítky</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui15_buttons_focus.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui15_buttons_focus.py</a></td></tr>
<tr><td>16</td><td>tui16_buttons_switch_by_tab.py</td><td>přepínaní mezi tlačítky</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui16_buttons_switch_by_tab.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui16_buttons_switch_by_tab.py</a></td></tr>
<tr><td>17</td><td>tui17_buttons_styles.py</td><td>nastavení stylu tlačítek</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui17_buttons_styles.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/tui/tui17_buttons_styles.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>UTF-8 encoded sample plain-text file<br />
<a href="http://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-demo.txt">http://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-demo.txt</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>vi(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/vi">https://linux.die.net/man/1/vi</a>
</li>

<li>emacs(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/emacs">https://linux.die.net/man/1/emacs</a>
</li>

<li>Pygments - Python syntax highlighter<br />
<a href="http://pygments.org/">http://pygments.org/</a>
</li>

<li>Write your own lexer<br />
<a href="http://pygments.org/docs/lexerdevelopment/">http://pygments.org/docs/lexerdevelopment/</a>
</li>

<li>Jazyky podporované knihovnou Pygments<br />
<a href="http://pygments.org/languages/">http://pygments.org/languages/</a>
</li>

<li>Pygments FAQ<br />
<a href="http://pygments.org/faq/">http://pygments.org/faq/</a>
</li>

<li>TUI &ndash; Text User Interface<br />
<a href="https://en.wikipedia.org/wiki/Text-based_user_interface">https://en.wikipedia.org/wiki/Text-based_user_interface</a>
</li>

<li>PuDB: výkonný debugger pro Python s retro uživatelským rozhraním (nástroj s&nbsp;plnohodnotným TUI)<br />
<a href="https://www.root.cz/clanky/pudb-vykonny-debugger-pro-python-s-retro-uzivatelskym-rozhranim/">https://www.root.cz/clanky/pudb-vykonny-debugger-pro-python-s-retro-uzivatelskym-rozhranim/</a>
</li>

<li>Historie vývoje textových editorů: krkolomná cesta k moderním textovým procesorům<br />
<a href="https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-krkolomna-cesta-k-modernim-textovym-procesorum/">https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-krkolomna-cesta-k-modernim-textovym-procesorum/</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Rosetta_Code">http://rosettacode.org/wiki/Rosetta_Code</a>
</li>

<li>Mandelbrot set: Sinclair ZX81 BASIC<br />
<a href="http://rosettacode.org/wiki/Mandelbrot_set#Sinclair_ZX81_BASIC">http://rosettacode.org/wiki/Mandelbrot_set#Sinclair_ZX81_BASIC</a>
</li>

<li>Nástroj Dialog<br />
<a href="http://invisible-island.net/dialog/">http://invisible-island.net/dialog/</a>
</li>

<li>Projekt Zenity<br />
<a href="https://wiki.gnome.org/Projects/Zenity">https://wiki.gnome.org/Projects/Zenity</a>
</li>

<li>Xterm256 color names for console Vim<br />
<a href="http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim">http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

