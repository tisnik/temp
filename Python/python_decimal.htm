<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Datový typ Decimal v programovacím jazyku Python</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Datový typ Decimal v programovacím jazyku Python</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Datový typ Decimal v&nbsp;programovacím jazyku Python</a></p>
<p><a href="#k02">2. Základní numerické datové typy programovacího jazyka Python</a></p>
<p><a href="#k03">3. Další numerické datové typy dostupné v&nbsp;knihovnách</a></p>
<p><a href="#k04">4. Od typu <i>float</i> k&nbsp;typu <i>Decimal</i></a></p>
<p><a href="#k05">5. Konstruktory typu <i>Decimal</i></a></p>
<p><a href="#k06">6. Přepis počítané programové smyčky</a></p>
<p><a href="#k07">7. Výpočet hodnoty &pi;</a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">18. Příloha: &bdquo;numerická věž&ldquo; v&nbsp;programovacích jazycích</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Datový typ Decimal v&nbsp;programovacím jazyku Python</h2>

<p>Na <a
href="https://www.root.cz/clanky/kouzlo-datovych-typu-decimal32-decimal64-a-decimal128/">úterní
článek</a> o numerických datových typech <i>Decimal32</i>, <i>Decimal64</i> a
<i>Decimal128</i> dnes alespoň částečně navážeme. Budeme se totiž zabývat tím,
jakým způsobem je dekadický formát s&nbsp;plovoucí řádovou čárkou realizován <a
href="https://www.root.cz/n/python/">v&nbsp;programovacím jazyku Python</a>.
Již v&nbsp;základní knihovně Pythonu totiž nalezneme standardní modul nazvaný
příznačně <a href="https://docs.python.org/3/library/decimal.html">Decimal</a>,
který obsahuje implementaci dekadického formátu s&nbsp;plovoucí řádovou čárkou.
Ovšem již na úvod je nutné poznamenat, že se v&nbsp;tomto případě nejedná o
formáty <i>Decimal32/64/128</i> tak, jak jsou popsány v&nbsp;normě IEEE
754-2008, protože interní struktura hodnot typu <strong>Decimal</strong> je
odlišná. Ovšem základní myšlenka zůstává zachována &ndash; je použit formát
s&nbsp;plovoucí řádovou čárkou (tečkou) a exponentem s&nbsp;desítkovou bází,
který navíc dokáže pracovat s&nbsp;nekonečny atd.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní numerické datové typy programovacího jazyka Python</h2>

<p>Připomeňme si, že v&nbsp;programovacím jazyku Python existují tři základní
numerické datové typy, které jsou &bdquo;vhodně&ldquo; pojmenovány takovým
způsobem, že mohou mnohé programátory poměrně úspěšně zmást. Jedná se o datové
typy <strong>int</strong>, <strong>float</strong> a <strong>complex</strong>.
Numerický datový typ <strong>int</strong> umožňuje práci s&nbsp;celočíselnými
typy s&nbsp;prakticky neomezeným rozsahem, na rozdíl od podobně pojmenovaného
typu v&nbsp;jiných jazycích (C, C++, Java, Go, ...), kde se jedná o celočíselný
typ s&nbsp;předem specifikovaným omezeným rozsahem (například 32bitů či
64bitů). Druhý standardní numerický datový typ se v&nbsp;Pythonu jmenuje
<strong>float</strong>, což může být opět matoucí, protože interně se jedná o
céčkovský typ <strong>double</strong>. A konečně numerický typ
<strong>complex</strong> sestává z&nbsp;dvojice hodnot typu
<strong>float</strong>, které reprezentují reálnou a imaginární složku
komplexního čísla. Komplexní jednotka se v&nbsp;Pythonu zapisuje znakem
<strong>j</strong> a nikoli <strong>i</strong>:</p>

<pre>
&gt;&gt;&gt; <strong>type(10)</strong>
&lt;class 'int'&gt;
&nbsp;
&gt;&gt;&gt; <strong>type(10**10000000)</strong>
&lt;class 'int'&gt;
&gt;&gt;&gt; <strong>type(3.14)</strong>
&lt;class 'float'&gt;
&nbsp;
&gt;&gt;&gt; <strong>type(1+2j)</strong>
&lt;class 'complex'&gt;
&nbsp;
&gt;&gt;&gt; <strong>type(1+2i)</strong>
  File "&lt;stdin&gt;", line 1
    type(1+2i)
SyntaxError: invalid decimal literal
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Další numerické datové typy dostupné v&nbsp;knihovnách</h2>

<p>Kromě základní trojice typů popsaných <a href="#k02">v&nbsp;předchozí
kapitole</a> je však možné ve standardní knihovně Pythonu nalézt realizaci dvou
dalších numerických datových typů. Jedná se o typ nazvaný <i>Decimal</i> a o
typ <i>Fraction</i> (pozor, je umístěný v&nbsp;modulu <i>fractions</i>, tedy
s&nbsp;&bdquo;s&ldquo; na konci). V&nbsp;dnešním článku nás bude primárně
zajímat především typ <i>Decimal</i>, i když si ukážeme, že typ <i>Fraction</i>
je s&nbsp;<i>Decimal</i> v&nbsp;některých ohledech poměrně úzce propojen.</p>

<p>V&nbsp;některých oblastech IT je ovšem nutné pracovat i s&nbsp;dalšími
numerickými datovými typy. V&nbsp;takovém případě může být vhodné využít
například možnosti nabízené knihovnou <a href="https://numpy.org/">NumPy</a>,
v&nbsp;níž nalezneme podporu pro tyto datové typy, a to včetně typu <i>half
(precision)</i>, se kterým se začínám setkávat poměrně často (popř.&nbsp;i
s&nbsp;typem <i>bfloat16</i>):</p>

<pre>
╔════════════╤═══════════════════════════╤═══════════════════════════════╗
║ Formát     │ Popis                     │ Rozsah                        ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ bool       │ uloženo po bajtech        │  True/False                   ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ int8       │ celočíselný se znaménkem  │ -128..127                     ║
║ int16      │ celočíselný se znaménkem  │ -32768..32767                 ║
║ int32      │ celočíselný se znaménkem  │ -2147483648..2147483647       ║
║ int64      │ celočíselný se znaménkem  │ -9223372036854775808..        ║
║            │                           │  9223372036854775807          ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ uint8      │ celočíselný bez znaménka  │  0..255                       ║
║ uint16     │ celočíselný bez znaménka  │  0..65535                     ║
║ uint32     │ celočíselný bez znaménka  │  0..4294967295                ║
║ uint64     │ celočíselný bez znaménka  │  0..18446744073709551615      ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ float16    │ plovoucí řádová čárka     │  poloviční přesnost (half)    ║
║ float32    │ plovoucí řádová čárka     │  jednoduchá přesnost (single) ║
║ float64    │ plovoucí řádová čárka     │  dvojitá přesnost (double)    ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ complex64  │ komplexní číslo (dvojice) │  2×float32                    ║
║ complex128 │ komplexní číslo (dvojice) │  2×float64                    ║
╚════════════╧═══════════════════════════╧═══════════════════════════════╝
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Od typu <i>float</i> k&nbsp;typu <i>Decimal</i></h2>

<p>Datový typ <i>Decimal</i>, kterému se budeme dnes věnovat, je postaven na
podobném principu, jako v&nbsp;úterním článku popsané typy <i>Decimal32</i>,
<i>Decimal64</i> či <i>Decimal128</i>. Jedná se tedy o vhodným způsobem uložené
hodnoty s&nbsp;plovoucí řádovou čárkou, přičemž základem exponentu je hodnota
10 a nikoli dnes obvyklejší hodnota 2. Navíc není typ <i>Decimal</i> omezen
pouze na podporu HW (tedy na FPU jednotku), takže umožňuje specifikovat jak
způsoby zaokrouhlení, tak i přesnost (počet cifer), chování při dělení nulou
atd. To jsou v&nbsp;praxi poměrně užitečné vlastnosti a ještě se k&nbsp;nim
vrátíme v&nbsp;dalším textu.</p>

<p>Připomeňme si nejdříve, s&nbsp;jakými problémy se setkáme při použití
datového typu (formátu) <i>float</i>, což je interně ve skutečnosti typ
<i>double</i>:</p>

<pre>
x = 0.1
y = 0.1
z = 0.1
&nbsp;
print(x+y+z-0.3)
</pre>

<p>V&nbsp;ideálním světě by měl tento skript vypsat nulu, ovšem ve skutečnosti
dostaneme:</p>

<pre>
5.551115123125783e-17
</pre>

<p>To je sice hodnota, která je z&nbsp;určitého pohledu blízká nule, ale o nulu
se nejedná.</p>

<p>Stejně tak i v&nbsp;Pythonu narazíme na problém při implementaci počítané
programové smyčky s&nbsp;testem na koncovou hodnotu realizovaným porovnáním
dvou hodnot typu <i>float</i> (ve skutečnosti se s&nbsp;takto zapsaným kódem
často nesetkáme, což je ostatně jen dobře):</p>

<pre>
x = 0
&nbsp;
while x != 1.0:
    x += 0.1
    print(x)
</pre>

<p>Tento skript neskončí po deseti iteracích, ale bude pokračovat dále:</p>

<pre>
.1
0.2
0.30000000000000004
0.4
0.5
0.6
0.7
0.7999999999999999
0.8999999999999999
0.9999999999999999
1.0999999999999999
1.2
1.3
1.4000000000000001
1.5000000000000002
1.6000000000000003
1.7000000000000004
1.8000000000000005
1.9000000000000006
2.0000000000000004
...
...
...
</pre>

<p>Chyba se navíc bude akumulovat:</p>

<pre>
...
...
...
113638.50000212675
113638.60000212675
113638.70000212676
113638.80000212677
...
...
...
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Konstruktory typu <i>Decimal</i></h2>

<p>Datový typ <i>Decimal</i> umožňuje přesnou reprezentaci
&bdquo;problematických&ldquo; hodnot 0,1, 0,2 atd. Pokusme se tedy první
příklad (tedy ve skutečnosti výpočet výrazu 0,1+0,1+0,1-0,3) přepsat tak, aby
se použily hodnoty typu <i>Decimal</i> a nikoli <i>float</i>. Hodnoty typu
<i>Decimal</i> se vytváří konstruktorem nazvaným taktéž
<strong>Decimal</strong>:</p>

<pre>
from decimal import Decimal
&nbsp;
x = Decimal(0.1)
y = Decimal(0.1)
z = Decimal(0.1)
&nbsp;
print(x+y+z-Decimal(0.3))
</pre>

<p>Pokud ovšem očekáváme, že se vypíše nula, budeme překvapeni:</p>

<pre>
2.775557561565156540423631668E-17
</pre>

<p>Proč tomu tak je? Hodnoty 0,1 atd. samozřejmě <i>lze</i> typem
<i>Decimal</i> reprezentovat zcela přesně, ovšem je nutné je nějakým způsobem
získat v&nbsp;přesné podobě. A zápis <strong>Decimal(0.1)</strong> znamená
&bdquo;zkonstruuj hodnotu <i>Decimal</i> z&nbsp;float hodnoty 0,1&ldquo;. Jenže
již víme, že typ <i>float</i> nedokáže 0,1 reprezentovat přesně, takže sice
provedeme přesné uložení i přesný výpočet, ovšem s&nbsp;nepřesnými vstupními
daty (což je ovšem obvyklé i v&nbsp;jiných oblastech, než jenom v&nbsp;IT).
Příklad si tedy upravme do takové podoby, že zkonstruujeme dekadický formát
s&nbsp;plovoucí řádovou čárkou ze zápisu numerické hodnoty reprezentované
řetězcem (i to je totiž možné a někdy se tomuto postupu nevyhneme):</p>

<pre>
from decimal import Decimal
&nbsp;
x = Decimal("0.1")
y = Decimal("0.1")
z = Decimal("0.1")
&nbsp;
print(x+y+z-Decimal("0.3"))
</pre>

<p>Nyní se po spuštění vypíše &bdquo;přesná nula&ldquo;, tedy skript se chová
podle očekávání:</p>

<pre>
0.0
</pre>

<p><div class="rs-tip-major">Poznámka: zde jsme si mj.&nbsp;ukázali i přetížení
základních aritmetických operátorů pro datový typ <i>Decimal</i>, což je
pochopitelně velmi užitečné a oprostí nás to od nutnosti psát výrazy pomocí
metod.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Přepis počítané programové smyčky</h2>

<p>Podobným způsobem můžeme postupovat i při realizaci počítané programové
smyčky. První (nekorektní) varianta bude vypadat následovně:</p>

<pre>
from decimal import Decimal
&nbsp;
x = Decimal(0)
step = Decimal(0.1)
&nbsp;
while x != Decimal("1.0"):
    x += step
    print(x)
</pre>

<p>Jedná se o (prakticky) nekonečnou smyčku, která zcela jistě u hodnoty 1.0
neskončí:</p>

<pre>
...
...
...
52110.30000000000289270478638
52110.40000000000289271033750
52110.50000000000289271588862
52110.60000000000289272143974
52110.70000000000289272699086
52110.80000000000289273254198
52110.90000000000289273809310
...
...
...
</pre>

<p>Korektní zápis, v&nbsp;němž se vyhneme hodnotám typu <i>float</i>, by měl
vypadat takto:</p>

<pre>
from decimal import Decimal
&nbsp;
x = Decimal(0)
step = Decimal("0.1")
&nbsp;
while x != Decimal("1.0"):
    x += step
    print(x)
</pre>

<p>Nyní bude vše funkční přesně podle předpokladů:</p>

<pre>
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Výpočet hodnoty &pi;</h2>

<p>Zkusme si nyní provést nějaký výpočet, v&nbsp;němž by se do jisté míry
využila konfigurovatelná přesnost hodnot uložených v&nbsp;typu <i>Decimal</i>.
Pro jednoduchost jsem vybral jeden z&nbsp;dnes již nepoužívaných výpočtů
hodnoty &pi; z&nbsp;nekonečné řady (nepoužívaný proto, že konverguje velmi
pomalu, což ovšem pro nás bude výhoda). Jedná se o takzvaný <i>Wallis
product</i>, což je forma řady, která vypadá následovně:</p>

<p><img src="https://i.iinfo.cz/images/52/wallis-product-2.png" class="image-1088080" alt="&#160;" title="Autor: NA, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="577" height="99" /></p>

<p>První realizace tohoto výpočtu bude založena na standardním numerickém
datovém typu <i>float</i>, tedy na hodnotách s&nbsp;plovoucí čárkou a
exponentem, jehož báze je rovna 2:</p>

<pre>
from math import pi
&nbsp;
result = 2
&nbsp;
for n in range(1, 1000):
    m = 4 * n * n
    u = m / (m-1)
    result *= u
&nbsp;
    abs_error = pi - result
    rel_error = 100.0 * abs_error / pi
    print(result, "\t", abs_error, "\t", rel_error)
</pre>

<p>Po spuštění tohoto skriptu se bude vypisovat jak postupně se zpřesňující
výsledek počítané nekonečně řady, tak i absolutní a relativní chyba vypočtená
vůči konstantě <strong>&pi;</strong> (ovšem typu <i>float</i>). Prvních 100
výsledků vypadá takto:</p>

<pre>
2.6666666666666665       0.4749259869231266      15.11736368432249
2.844444444444444        0.297148209145349       9.458521263277328
2.9257142857142853       0.21587836787550785     6.87162187079954
2.972154195011337        0.16943845857845607     5.393393646526529
3.0021759545569062       0.1394166990328869      4.437771360127803
3.0231701920013605       0.11842246158843261     3.769504026981831
3.038673628883419        0.10291902470637426     3.276014304043273
3.0505899960555105       0.0910026575342826      2.896704556215998
3.06003454712689         0.08155810646290318     2.5960751585572193
3.0677038066434985       0.0738888469462946      2.3519550461726566
3.074055160280442        0.06753749330935133     2.1497851808438146
3.0794013431678864       0.06219131042190673     1.9796108942017927
3.083963419231839        0.057629234357954306    1.8343955029339434
3.087902069831113        0.05369058375868008     1.7090243605366735
3.09133688859622         0.050255764993573315    1.5996906835183655
3.0943587232869296       0.04723393030286349     1.503502697871758
3.09703782174865         0.04455483184114328     1.4182243452292251
3.0994293567461395       0.04216329684365361     1.3420994219436762
3.101577263438271        0.04001539015152211     1.2737294284730982
3.103516961539233        0.03807569205056005     1.2119869202982834
3.105277322833356        0.036315330756437       1.1559528799808176
3.1068821173154406       0.0347105362743525      1.1048706850867482
3.108351092311807        0.033241561277986165    1.058111758696728
3.1097007888347385       0.031891864755054566    1.0151495840370264
3.110945166901499        0.0306474866882942      0.9755397999570167
3.1120960900117107       0.02949656357808239     0.9389047795352351
3.1131637044508227       0.028428949138970427    0.9049215564750451
3.1141567391252885       0.027435914464504663    0.8733122810544696
3.115082744697434        0.026509908892359046    0.8438366082269468
3.1159482858879586       0.025644367701834536    0.8162855764426229
3.1167590973076535       0.02483355628213957     0.7904766473706606
3.1175202106403295       0.024072442949463646    0.7662496575409568
3.1182360591387543       0.02335659445103877     0.7434634921351108
3.1189105640185164       0.02268208957127671     0.7219933349843635
3.119547206305518        0.022045447284275266    0.7017283815928417
3.12014908691642         0.021443566673373216    0.6825699267175955
3.120718977160606        0.02087367642918725     0.6644297568411868
3.1212593613990753       0.020333292190717778    0.6472287922969135
3.121772473245434        0.019820180344359173    0.6308959349555173
3.1222603264214372       0.019332327168355867    0.6153670860627161
3.1227247411658103       0.01886791242398278     0.6005843056203689
3.1231673669264293       0.01842528666336385     0.5864950900719064
3.1235897019320986       0.0180029516576945      0.5730517493133022
3.123993110133304        0.017599543456489286    0.5602108674521783
3.1243788359155156       0.017213817674277543    0.5479328344687809
3.124748016919405        0.01684463667038827     0.5361814381358597
3.125101695246164        0.016490958343629014    0.5249235073422185
3.125440827280374        0.016151826309418915    0.5141285994211491
3.1257662923253897       0.0158263612644034      0.50376872527758
3.126078900215411        0.015513753374382322    0.49381810708830354
3.1263793980429813       0.015213255546811855    0.4842529641590604
3.1266684761195456       0.014924177470247546    0.47505132319411897
3.126946773269178        0.014645880320615312    0.466192849791648
3.127214881540915        0.014377772048878246    0.4576586984454921
3.1274733504128496       0.014119303176943543    0.4494313787247333
3.1277226905508084       0.01386996303898469     0.44149463563126
3.1279633771757065       0.013629276414086622    0.43383334241353355
3.1281958530863103       0.013396800503482797    0.4264334043490559
3.1284205313778486       0.013172122211944526    0.4192816722083043
3.1286377978915914       0.012954855698201762    0.4123658642822035
3.1288480134259524       0.012744640163840693    0.40567449600054983
3.129051515735769        0.012541137854024331    0.3991968162929714
3.1292486213430593       0.01234403224673386     0.3929227499506897
3.129439627179679        0.012153026410114176    0.38684284533920454
3.1296248120798023       0.011967841509990862    0.3809482268910837
3.129804438138006        0.01178821545178721     0.37523055187683896
3.129978751946869        0.011613901642923974    0.36968197101088696
3.130147985726374        0.011444667863419244    0.36429509250162667
3.130312358355987        0.011280295233806026    0.35906294919923526
3.1304720763190645       0.011120577270728571    0.3539789685343661
3.13062733456815         0.010965319021642994    0.34903694497481363
3.1307783173187924       0.010814336271000702    0.34423101475754725
3.1309251987786713       0.010667454811121857    0.33955563267989286
3.131068143818108        0.010524509771685064    0.33500555075652655
3.131207308587378        0.010385345002414947    0.3305757985698101
3.1313428410856936       0.01024981250409951     0.32626166515851096
3.1314748816862035       0.010117771903589645    0.3220586823065175
3.131603563620935        0.009989089968858167    0.31796260910668883
3.131729013429196        0.009863640160597154    0.31396941768775466
3.131851351372609        0.009741302217184167    0.31007528000337997
3.1319706918196375       0.009621961770155618    0.306276555592302
3.1320871436021926       0.009505509987600469    0.3025697802271991
3.1322008103466525       0.009391843243140574    0.298951655378008
3.132311790781417        0.009280862808376256    0.2954190384221622
3.1324201790229056       0.009172474566887523    0.2919689335409682
3.132526064841755        0.009066588748038118    0.2885984832463251
3.132629533910784        0.00896311967900898     0.28530496048770426
3.132730668036172        0.008861985553620944    0.28208576129354795
3.1328295453731676       0.008763108216625515    0.27893839790503083
3.132926240627508        0.008666412962285097    0.27586049236466975
3.133020825243655        0.008571828346138233    0.27284977052462517
3.133113367580835        0.008479286008958198    0.26990405644312926
3.133203933077802        0.008388720511991021    0.2670212671399492
3.1332925844071484       0.008300069182644698    0.26419940768452227
3.133379381619936        0.008213271969857328    0.2614365665921804
3.133464382281348        0.008128271308445179    0.25873091150621563
3.1335476415980024       0.008045011991790751    0.25608068514541454
3.1336292125375205       0.007963441052272646    0.25348420149802325
3.1337091459408963       0.007883507648896781    0.25093984224493776
</pre>

<p>Přepis do podoby využívající typ <i>Decimal</i> může vypadat následovně
(nejedná se o nejideálnější způsob, protože neustále vytváříme nové
objekty):</p>

<pre>
from decimal import Decimal
from math import pi
&nbsp;
result = Decimal(2)
&nbsp;
for n in range(1, 1000):
    m = Decimal(4 * n * n)
    u = m / (m-1)
    result *= u
&nbsp;
    abs_error = Decimal(pi) - result
    rel_error = Decimal(100.0) * abs_error / Decimal(pi)
    print(result, "\t", abs_error, "\t", rel_error)
</pre>

<p>Opět si vypišme prvních 100 výsledků:</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
from math import pi
&nbsp;
result = 2
&nbsp;
n = 1
while True:
    m = 4 * n * n
    u = m / (m-1)
    result *= u
&nbsp;
    abs_error = pi - result
&nbsp;
    n += 1
&nbsp;
    if abs(abs_error) &lt; 0.00000001:
        rel_error = 100.0 * abs_error / pi
        print(result, "\t", abs_error, "\t", rel_error)
        break
</pre>

<pre>
from decimal import Decimal
from math import pi
&nbsp;
result = Decimal(2)
&nbsp;
n = Decimal(1)
&nbsp;
while True:
    m = Decimal(4 * n * n)
    u = m / (m-1)
    result *= u
&nbsp;
    abs_error = Decimal(pi) - result
    n += 1
&nbsp;
    if abs(abs_error) &lt; 0.00000001:
        rel_error = Decimal(100.0) * abs_error / Decimal(pi)
        print(result, "\t", abs_error, "\t", rel_error)
        break
</pre>


<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: &bdquo;numerická věž&ldquo; v&nbsp;programovacích jazycích</h2>

<p>S&nbsp;takzvanou &bdquo;numerickou věží&ldquo; jsme se již na tomto serveru
setkali, a to například při popisu možností mnoha existujících dialektů
programovacího jazyka Scheme. Připomeňme si ve stručnosti, že se jedná o
hierarchii datových typů reprezentujících různé typy (resp.&nbsp;přesněji
řečeno množiny) čísel. Na vrcholu této hierarchie typicky stojí obecný typ
<strong>number</strong>, pod ním leží komplexní čísla, dále čísla reálná, čísla
racionální (zlomky) a nakonec čísla celá (nebo jen celá kladná či čísla
přirozená):</p>

<table>
<tr><th>#</th><th>Typ</th><th>Význam</th></tr>
<tr><td>1</td><td>number</td><td>libovolná obecná čísla</td></tr>
<tr><td>2</td><td>complex</td><td>komplexní čísla</td></tr>
<tr><td>3</td><td>real</td><td>reálná čísla</td></tr>
<tr><td>4</td><td>rational</td><td>zlomky (racionální čísla)</td></tr>
<tr><td>5</td><td>integer</td><td>celá čísla</td></tr>
</table>

<p>Výše uvedená numerická věž může být rozšířena o další typy, což je případ
programovacího jazyka <i>Kawa</i>, jenž tento koncept rozšiřuje o numerický typ
<i>kvaternion</i> a taktéž (což je asi nejzajímavější a poměrně unikátní) o typ
<i>quantity</i>, tedy o dvojice hodnota+jednotka (to je koncept, který možná
čeká na své &bdquo;znovuobjevení&ldquo;):</p>

<table>
<tr><th>Typ</th><th>Význam</th></tr>
<tr><td>number</td><td>libovolná obecná čísla</td></tr>
<tr><td>quantity</td><td>numerická hodnota i s&nbsp;uvedenou jednotkou (viz další text)</td></tr>
<tr><td>quaternion</td><td>kvaterniony</td></tr>
<tr><td>complex</td><td>komplexní čísla</td></tr>
<tr><td>real</td><td>reálná čísla</td></tr>
<tr><td>rational</td><td>zlomky (racionální čísla)</td></tr>
<tr><td>integer</td><td>celá čísla</td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů
určených pro programovací jazyk Python 3 a knihovnu <i>libcst</i> byly
uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>float_0_1.py</td><td>nepřesné uložení hodnoty 0,1 v&nbsp;typu <i>float</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/float_0_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/float_0_1.py</a></td></tr>
<tr><td> 2</td><td>float_loop.py</td><td>nekonečná počítaná programová smyčka s&nbsp;krokem přibližně 0,1</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/float_loop.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/float_loop.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>decimal_0_1_A.py</td><td>zdánlivě přesné uložení hodnoty 0,1, konstruktor používající <i>float</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_0_1_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_0_1_A.py</a></td></tr>
<tr><td> 4</td><td>decimal_0_1_B.py</td><td>zdánlivě přesné uložení hodnoty 0,1, konstruktor používající řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_0_1_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_0_1_B.py</a></td></tr>
<tr><td> 5</td><td>decimal_loop_A.py</td><td>nekonečná počítaná programová smyčka s&nbsp;krokem přibližně 0,1</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_loop_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_loop_A.py</a></td></tr>
<tr><td> 6</td><td>decimal_loop_B.py</td><td>konečná počítaná programová smyčka s&nbsp;krokem přesně 0,1</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_loop_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_loop_B.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>pi_wallis_float.py</td><td>výpočet konstanty &pi; z&nbsp;Wallisovy řady, realizace s&nbsp;typem <i>float</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_float.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_float.py</a></td></tr>
<tr><td> 8</td><td>pi_wallis_decimal.py</td><td>výpočet konstanty &pi; z&nbsp;Wallisovy řady, realizace s&nbsp;typem <i>Decimal</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_decimal.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_decimal.py</a></td></tr>
<tr><td> 9</td><td>pi_wallis_float_threshold.py</td><td>výpočet konstanty &pi; s&nbsp;nastavenou přesností, nekonečný výpočet</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_float_threshold.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_float_threshold.py</a></td></tr>
<tr><td>10</td><td>pi_wallis_decimal_threshold.py</td><td>výpočet konstanty &pi; s&nbsp;nastavenou přesností, konečný výpočet</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_decimal_threshold.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_decimal_threshold.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>17</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>18</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>19</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>decimal — Decimal fixed point and floating point arithmetic<br />
<a href="https://docs.python.org/3/library/decimal.html">https://docs.python.org/3/library/decimal.html</a>
</li>

<li>An Essential Guide to Python Decimal By Examples<br />
<a href="https://www.pythontutorial.net/advanced-python/python-decimal/">https://www.pythontutorial.net/advanced-python/python-decimal/</a>
</li>

<li>GCC: 6.14 Decimal Floating Types<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Decimal-Float.html">https://gcc.gnu.org/onlinedocs/gcc/Decimal-Float.html</a>
</li>

<li>Routines for decimal floating point emulation<br />
<a href="https://gcc.gnu.org/onlinedocs/gccint/Decimal-float-library-routines.html">https://gcc.gnu.org/onlinedocs/gccint/Decimal-float-library-routines.html</a>
</li>

<li>Representation of hexadecimal floating point<br />
<a href="https://www.ibm.com/docs/en/hla-and-tf/1.6?topic=lq-representation-hexadecimal-floating-point">https://www.ibm.com/docs/en/hla-and-tf/1.6?topic=lq-representation-hexadecimal-floating-point</a>
</li>

<li>Decimal floating point<br />
<a href="https://en.wikipedia.org/wiki/Decimal_floating_point">https://en.wikipedia.org/wiki/Decimal_floating_point</a>
</li>

<li>Hexadecimal Floating-Point Constants<br />
<a href="https://www.exploringbinary.com/hexadecimal-floating-point-constants/">https://www.exploringbinary.com/hexadecimal-floating-point-constants/</a>
</li>

<li>Norma IEEE 754 a příbuzní: formáty plovoucí řádové tečky<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/</a>
</li>

<li>decimal32 floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Decimal32_floating-point_format">https://en.wikipedia.org/wiki/Decimal32_floating-point_format</a>
</li>

<li>decimal64 floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Decimal64_floating-point_format">https://en.wikipedia.org/wiki/Decimal64_floating-point_format</a>
</li>

<li>decimal128 floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Decimal128_floating-point_format">https://en.wikipedia.org/wiki/Decimal128_floating-point_format</a>
</li>

<li>IEEE-754 Floating-Point Conversion<br />
<a href="http://babbage.cs.qc.cuny.edu/IEEE-754.old/32bit.html">http://babbage.cs.qc.cuny.edu/IEEE-754.old/32bit.html</a>
</li>

<li>Small Float Formats<br />
<a href="https://www.khronos.org/opengl/wiki/Small_Float_Formats">https://www.khronos.org/opengl/wiki/Small_Float_Formats</a>
</li>

<li>Binary-coded decimal<br />
<a href="https://en.wikipedia.org/wiki/Binary-coded_decimal">https://en.wikipedia.org/wiki/Binary-coded_decimal</a>
</li>

<li>Chen–Ho encoding<br />
<a href="https://en.wikipedia.org/wiki/Chen%E2%80%93Ho_encoding">https://en.wikipedia.org/wiki/Chen%E2%80%93Ho_encoding</a>
</li>

<li>Densely packed decimal<br />
<a href="https://en.wikipedia.org/wiki/Densely_packed_decimal">https://en.wikipedia.org/wiki/Densely_packed_decimal</a>
</li>

<li>A Summary of Chen-Ho Decimal Data encoding<br />
<a href="http://speleotrove.com/decimal/chen-ho.html">http://speleotrove.com/decimal/chen-ho.html</a>
</li>

<li>Art of Assembly language programming: The 80x87 Floating Point Coprocessors<br />
<a href="https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-3.html">https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-3.html</a>
</li>

<li>Art of Assembly language programming: The FPU Instruction Set<br />
<a href="https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-4.html">https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-4.html</a>
</li>

<li>INTEL 80387 PROGRAMMER'S REFERENCE MANUAL<br />
<a href="http://www.ragestorm.net/downloads/387intel.txt">http://www.ragestorm.net/downloads/387intel.txt</a>
</li>

<li>Floating-Point Formats<br />
<a href="http://www.quadibloc.com/comp/cp0201.htm">http://www.quadibloc.com/comp/cp0201.htm</a>
</li>

<li>IBM Floating Point Architecture<br />
<a href="http://en.wikipedia.org/wiki/IBM_Floating_Point_Architecture">http://en.wikipedia.org/wiki/IBM_Floating_Point_Architecture</a>
</li>

<li>Extended Binary Coded Decimal Interchange Code<br />
<a href="http://en.wikipedia.org/wiki/EBCDIC">http://en.wikipedia.org/wiki/EBCDIC</a>
</li>

<li>ASCII/EBCDIC Conversion Table<br />
<a href="http://docs.hp.com/en/32212-90008/apcs01.html">http://docs.hp.com/en/32212-90008/apcs01.html</a>
</li>

<li>EBCDIC<br />
<a href="http://www.hansenb.pdx.edu/DMKB/dict/tutorials/ebcdic.php">http://www.hansenb.pdx.edu/DMKB/dict/tutorials/ebcdic.php</a>
</li>

<li>EBCDIC tables<br />
<a href="http://home.mnet-online.de/wzwz.de/temp/ebcdic/cc_en.htm">http://home.mnet-online.de/wzwz.de/temp/ebcdic/cc_en.htm</a>
</li>

<li>36-bit<br />
<a href="http://en.wikipedia.org/wiki/36-bit_word_length">http://en.wikipedia.org/wiki/36-bit_word_length</a>
</li>

<li>36bit.org<br />
<a href="http://www.36bit.org/">http://www.36bit.org/</a>
</li>

<li>How did the Apple II do floating point?<br />
<a href="https://groups.google.com/forum/#!topic/comp.emulators.apple2/qSBiG2TAlRg">https://groups.google.com/forum/#!topic/comp.emulators.apple2/qSBiG2TAlRg</a>
</li>

<li>IBM Floating Point Architecture<br />
<a href="https://en.wikipedia.org/wiki/IBM_Floating_Point_Architecture">https://en.wikipedia.org/wiki/IBM_Floating_Point_Architecture</a>
</li>

<li>The Arithmetic Subroutines<br />
<a href="http://www.users.waitrose.com/~thunor/mmcoyzx81/chapter17.html">http://www.users.waitrose.com/~thunor/mmcoyzx81/chapter17.html</a>
</li>

<li>ZX Floating point to Decimal code in BASIC<br />
<a href="http://www.sinclairzxworld.com/viewtopic.php?t=1422">http://www.sinclairzxworld.com/viewtopic.php?t=1422</a>
</li>

<li>Floating Point Arithmetic Package<br />
<a href="http://www.retrocomputing.net/parts/atari/800/docs/atari_os/atari_os_user_manual_08.htm">http://www.retrocomputing.net/parts/atari/800/docs/atari_os/atari_os_user_manual_08.htm</a>
</li>

<li>Turbo Pascal Real<br />
<a href="http://www.shikadi.net/moddingwiki/Turbo_Pascal_Real">http://www.shikadi.net/moddingwiki/Turbo_Pascal_Real</a>
</li>

<li>THE FLOATING POINT ARITHMETIC PACKAGE<br />
<a href="http://www.atarimax.com/freenet/freenet_material/5.8-BitComputersSupportArea/7.TechnicalResourceCenter/showarticle.php?14">http://www.atarimax.com/freenet/freenet_material/5.8-BitComputersSupportArea/7.TechnicalResourceCenter/showarticle.php?14</a>
</li>

<li>The Most Expensive One-byte Mistake: Did Ken, Dennis, and Brian choose wrong with NUL-terminated text strings?<br />
<a href="http://queue.acm.org/detail.cfm?id=2010365">http://queue.acm.org/detail.cfm?id=2010365</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

