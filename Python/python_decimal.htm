<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Datový typ Decimal v programovacím jazyku Python</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Datový typ Decimal v programovacím jazyku Python</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Datový typ Decimal v&nbsp;programovacím jazyku Python</a></p>
<p><a href="#k02">2. Základní numerické datové typy programovacího jazyka Python</a></p>
<p><a href="#k03">3. Další numerické datové typy dostupné v&nbsp;knihovnách</a></p>
<p><a href="#k04">4. Od typu <i>float</i> k&nbsp;typu <i>Decimal</i></a></p>
<p><a href="#k05">5. Konstruktory typu <i>Decimal</i></a></p>
<p><a href="#k06">6. Přepis počítané programové smyčky</a></p>
<p><a href="#k07">7. Výpočet hodnoty &pi;</a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">18. Příloha: &bdquo;numerická věž&ldquo; v&nbsp;programovacích jazycích</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Datový typ Decimal v&nbsp;programovacím jazyku Python</h2>

<p>Na <a
href="https://www.root.cz/clanky/kouzlo-datovych-typu-decimal32-decimal64-a-decimal128/">úterní
článek</a> o numerických datových typech <i>Decimal32</i>, <i>Decimal64</i> a
<i>Decimal128</i> dnes alespoň částečně navážeme. Budeme se totiž zabývat tím,
jakým způsobem je dekadický formát s&nbsp;plovoucí řádovou čárkou realizován <a
href="https://www.root.cz/n/python/">v&nbsp;programovacím jazyku Python</a>.
Již v&nbsp;základní knihovně Pythonu totiž nalezneme standardní modul nazvaný
příznačně <a href="https://docs.python.org/3/library/decimal.html">Decimal</a>,
který obsahuje implementaci dekadického formátu s&nbsp;plovoucí řádovou čárkou.
Ovšem již na úvod je nutné poznamenat, že se v&nbsp;tomto případě nejedná o
formáty <i>Decimal32/64/128</i> tak, jak jsou popsány v&nbsp;normě IEEE
754-2008, protože interní struktura hodnot typu <strong>Decimal</strong> je
odlišná. Ovšem základní myšlenka zůstává zachována &ndash; je použit formát
s&nbsp;plovoucí řádovou čárkou (tečkou) a exponentem s&nbsp;desítkovou bází,
který navíc dokáže pracovat s&nbsp;nekonečny atd.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní numerické datové typy programovacího jazyka Python</h2>

<p>Připomeňme si, že v&nbsp;programovacím jazyku Python existují tři základní
numerické datové typy, které jsou &bdquo;vhodně&ldquo; pojmenovány takovým
způsobem, že mohou mnohé programátory poměrně úspěšně zmást. Jedná se o datové
typy <strong>int</strong>, <strong>float</strong> a <strong>complex</strong>.
Numerický datový typ <strong>int</strong> umožňuje práci s&nbsp;celočíselnými
typy s&nbsp;prakticky neomezeným rozsahem, na rozdíl od podobně pojmenovaného
typu v&nbsp;jiných jazycích (C, C++, Java, Go, ...), kde se jedná o celočíselný
typ s&nbsp;předem specifikovaným omezeným rozsahem (například 32bitů či
64bitů). Druhý standardní numerický datový typ se v&nbsp;Pythonu jmenuje
<strong>float</strong>, což může být opět matoucí, protože interně se jedná o
céčkovský typ <strong>double</strong>. A konečně numerický typ
<strong>complex</strong> sestává z&nbsp;dvojice hodnot typu
<strong>float</strong>, které reprezentují reálnou a imaginární složku
komplexního čísla. Komplexní jednotka se v&nbsp;Pythonu zapisuje znakem
<strong>j</strong> a nikoli <strong>i</strong>:</p>

<pre>
&gt;&gt;&gt; <strong>type(10)</strong>
&lt;class 'int'&gt;
&nbsp;
&gt;&gt;&gt; <strong>type(10**10000000)</strong>
&lt;class 'int'&gt;
&gt;&gt;&gt; <strong>type(3.14)</strong>
&lt;class 'float'&gt;
&nbsp;
&gt;&gt;&gt; <strong>type(1+2j)</strong>
&lt;class 'complex'&gt;
&nbsp;
&gt;&gt;&gt; <strong>type(1+2i)</strong>
  File "&lt;stdin&gt;", line 1
    type(1+2i)
SyntaxError: invalid decimal literal
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Další numerické datové typy dostupné v&nbsp;knihovnách</h2>

<p>Kromě základní trojice typů popsaných <a href="#k02">v&nbsp;předchozí
kapitole</a> je však možné ve standardní knihovně Pythonu nalézt realizaci dvou
dalších numerických datových typů. Jedná se o typ nazvaný <i>Decimal</i> a o
typ <i>Fraction</i> (pozor, je umístěný v&nbsp;modulu <i>fractions</i>, tedy
s&nbsp;&bdquo;s&ldquo; na konci). V&nbsp;dnešním článku nás bude primárně
zajímat především typ <i>Decimal</i>, i když si ukážeme, že typ <i>Fraction</i>
je s&nbsp;<i>Decimal</i> v&nbsp;některých ohledech poměrně úzce propojen.</p>

<p>V&nbsp;některých oblastech IT je ovšem nutné pracovat i s&nbsp;dalšími
numerickými datovými typy. V&nbsp;takovém případě může být vhodné využít
například možnosti nabízené knihovnou <a href="https://numpy.org/">NumPy</a>,
v&nbsp;níž nalezneme podporu pro tyto datové typy, a to včetně typu <i>half
(precision)</i>, se kterým se začínám setkávat poměrně často (popř.&nbsp;i
s&nbsp;typem <i>bfloat16</i>):</p>

<pre>
╔════════════╤═══════════════════════════╤═══════════════════════════════╗
║ Formát     │ Popis                     │ Rozsah                        ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ bool       │ uloženo po bajtech        │  True/False                   ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ int8       │ celočíselný se znaménkem  │ -128..127                     ║
║ int16      │ celočíselný se znaménkem  │ -32768..32767                 ║
║ int32      │ celočíselný se znaménkem  │ -2147483648..2147483647       ║
║ int64      │ celočíselný se znaménkem  │ -9223372036854775808..        ║
║            │                           │  9223372036854775807          ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ uint8      │ celočíselný bez znaménka  │  0..255                       ║
║ uint16     │ celočíselný bez znaménka  │  0..65535                     ║
║ uint32     │ celočíselný bez znaménka  │  0..4294967295                ║
║ uint64     │ celočíselný bez znaménka  │  0..18446744073709551615      ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ float16    │ plovoucí řádová čárka     │  poloviční přesnost (half)    ║
║ float32    │ plovoucí řádová čárka     │  jednoduchá přesnost (single) ║
║ float64    │ plovoucí řádová čárka     │  dvojitá přesnost (double)    ║
╟────────────┼───────────────────────────┼───────────────────────────────╢
║ complex64  │ komplexní číslo (dvojice) │  2×float32                    ║
║ complex128 │ komplexní číslo (dvojice) │  2×float64                    ║
╚════════════╧═══════════════════════════╧═══════════════════════════════╝
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Od typu <i>float</i> k&nbsp;typu <i>Decimal</i></h2>

<p>Datový typ <i>Decimal</i>, kterému se budeme dnes věnovat, je postaven na
podobném principu, jako v&nbsp;úterním článku popsané typy <i>Decimal32</i>,
<i>Decimal64</i> či <i>Decimal128</i>. Jedná se tedy o vhodným způsobem uložené
hodnoty s&nbsp;plovoucí řádovou čárkou, přičemž základem exponentu je hodnota
10 a nikoli dnes obvyklejší hodnota 2. Navíc není typ <i>Decimal</i> omezen
pouze na podporu HW (tedy na FPU jednotku), takže umožňuje specifikovat jak
způsoby zaokrouhlení, tak i přesnost (počet cifer), chování při dělení nulou
atd. To jsou v&nbsp;praxi poměrně užitečné vlastnosti a ještě se k&nbsp;nim
vrátíme v&nbsp;dalším textu.</p>

<p>Připomeňme si nejdříve, s&nbsp;jakými problémy se setkáme při použití
datového typu (formátu) <i>float</i>, což je interně ve skutečnosti typ
<i>double</i>:</p>

<pre>
x = 0.1
y = 0.1
z = 0.1
&nbsp;
print(x+y+z-0.3)
</pre>

<p>V&nbsp;ideálním světě by měl tento skript vypsat nulu, ovšem ve skutečnosti
dostaneme:</p>

<pre>
5.551115123125783e-17
</pre>

<p>To je sice hodnota, která je z&nbsp;určitého pohledu blízká nule, ale o nulu
se nejedná.</p>

<p>Stejně tak i v&nbsp;Pythonu narazíme na problém při implementaci počítané
programové smyčky s&nbsp;testem na koncovou hodnotu realizovaným porovnáním
dvou hodnot typu <i>float</i> (ve skutečnosti se s&nbsp;takto zapsaným kódem
často nesetkáme, což je ostatně jen dobře):</p>

<pre>
x = 0
&nbsp;
while x != 1.0:
    x += 0.1
    print(x)
</pre>

<p>Tento skript neskončí po deseti iteracích, ale bude pokračovat dále:</p>

<pre>
.1
0.2
0.30000000000000004
0.4
0.5
0.6
0.7
0.7999999999999999
0.8999999999999999
0.9999999999999999
1.0999999999999999
1.2
1.3
1.4000000000000001
1.5000000000000002
1.6000000000000003
1.7000000000000004
1.8000000000000005
1.9000000000000006
2.0000000000000004
...
...
...
</pre>

<p>Chyba se navíc bude akumulovat:</p>

<pre>
...
...
...
113638.50000212675
113638.60000212675
113638.70000212676
113638.80000212677
...
...
...
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Konstruktory typu <i>Decimal</i></h2>

<p>Datový typ <i>Decimal</i> umožňuje přesnou reprezentaci
&bdquo;problematických&ldquo; hodnot 0,1, 0,2 atd. Pokusme se tedy první
příklad (tedy ve skutečnosti výpočet výrazu 0,1+0,1+0,1-0,3) přepsat tak, aby
se použily hodnoty typu <i>Decimal</i> a nikoli <i>float</i>. Hodnoty typu
<i>Decimal</i> se vytváří konstruktorem nazvaným taktéž
<strong>Decimal</strong>:</p>

<pre>
from decimal import Decimal
&nbsp;
x = Decimal(0.1)
y = Decimal(0.1)
z = Decimal(0.1)
&nbsp;
print(x+y+z-Decimal(0.3))
</pre>

<p>Pokud ovšem očekáváme, že se vypíše nula, budeme překvapeni:</p>

<pre>
2.775557561565156540423631668E-17
</pre>

<p>Proč tomu tak je? Hodnoty 0,1 atd. samozřejmě <i>lze</i> typem
<i>Decimal</i> reprezentovat zcela přesně, ovšem je nutné je nějakým způsobem
získat v&nbsp;přesné podobě. A zápis <strong>Decimal(0.1)</strong> znamená
&bdquo;zkonstruuj hodnotu <i>Decimal</i> z&nbsp;float hodnoty 0,1&ldquo;. Jenže
již víme, že typ <i>float</i> nedokáže 0,1 reprezentovat přesně, takže sice
provedeme přesné uložení i přesný výpočet, ovšem s&nbsp;nepřesnými vstupními
daty (což je ovšem obvyklé i v&nbsp;jiných oblastech, než jenom v&nbsp;IT).
Příklad si tedy upravme do takové podoby, že zkonstruujeme dekadický formát
s&nbsp;plovoucí řádovou čárkou ze zápisu numerické hodnoty reprezentované
řetězcem (i to je totiž možné a někdy se tomuto postupu nevyhneme):</p>

<pre>
from decimal import Decimal
&nbsp;
x = Decimal("0.1")
y = Decimal("0.1")
z = Decimal("0.1")
&nbsp;
print(x+y+z-Decimal("0.3"))
</pre>

<p>Nyní se po spuštění vypíše &bdquo;přesná nula&ldquo;, tedy skript se chová
podle očekávání:</p>

<pre>
0.0
</pre>

<p><div class="rs-tip-major">Poznámka: zde jsme si mj.&nbsp;ukázali i přetížení
základních aritmetických operátorů pro datový typ <i>Decimal</i>, což je
pochopitelně velmi užitečné a oprostí nás to od nutnosti psát výrazy pomocí
metod.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Přepis počítané programové smyčky</h2>

<p>Podobným způsobem můžeme postupovat i při realizaci počítané programové
smyčky. První (nekorektní) varianta bude vypadat následovně:</p>

<pre>
from decimal import Decimal
&nbsp;
x = Decimal(0)
step = Decimal(0.1)
&nbsp;
while x != Decimal("1.0"):
    x += step
    print(x)
</pre>

<p>Jedná se o (prakticky) nekonečnou smyčku, která zcela jistě u hodnoty 1.0
neskončí:</p>

<pre>
...
...
...
52110.30000000000289270478638
52110.40000000000289271033750
52110.50000000000289271588862
52110.60000000000289272143974
52110.70000000000289272699086
52110.80000000000289273254198
52110.90000000000289273809310
...
...
...
</pre>

<p>Korektní zápis, v&nbsp;němž se vyhneme hodnotám typu <i>float</i>, by měl
vypadat takto:</p>

<pre>
from decimal import Decimal
&nbsp;
x = Decimal(0)
step = Decimal("0.1")
&nbsp;
while x != Decimal("1.0"):
    x += step
    print(x)
</pre>

<p>Nyní bude vše funkční přesně podle předpokladů:</p>

<pre>
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Výpočet hodnoty &pi;</h2>

<p>Zkusme si nyní provést nějaký výpočet, v&nbsp;němž by se do jisté míry
využila konfigurovatelná přesnost hodnot uložených v&nbsp;typu <i>Decimal</i>.
Pro jednoduchost jsem vybral jeden z&nbsp;dnes již nepoužívaných výpočtů
hodnoty &pi; z&nbsp;nekonečné řady (nepoužívaný proto, že konverguje velmi
pomalu, což ovšem pro nás bude výhoda). Jedná se o takzvaný <i>Wallis
product</i>, což je forma řady, která vypadá následovně:</p>

<p><img src="https://i.iinfo.cz/images/52/wallis-product-2.png" class="image-1088080" alt="&#160;" title="Autor: NA, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="577" height="99" /></p>

<p>První realizace tohoto výpočtu bude založena na standardním numerickém
datovém typu <i>float</i>, tedy na hodnotách s&nbsp;plovoucí čárkou a
exponentem, jehož báze je rovna 2:</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
from math import pi
&nbsp;
result = 2
&nbsp;
n = 1
while True:
    m = 4 * n * n
    u = m / (m-1)
    result *= u
&nbsp;
    abs_error = pi - result
&nbsp;
    n += 1
&nbsp;
    if abs(abs_error) &lt; 0.00000001:
        rel_error = 100.0 * abs_error / pi
        print(result, "\t", abs_error, "\t", rel_error)
        break
</pre>

<pre>
from decimal import Decimal
from math import pi
&nbsp;
result = Decimal(2)
&nbsp;
n = Decimal(1)
&nbsp;
while True:
    m = Decimal(4 * n * n)
    u = m / (m-1)
    result *= u
&nbsp;
    abs_error = Decimal(pi) - result
    n += 1
&nbsp;
    if abs(abs_error) &lt; 0.00000001:
        rel_error = Decimal(100.0) * abs_error / Decimal(pi)
        print(result, "\t", abs_error, "\t", rel_error)
        break
</pre>


<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů
určených pro programovací jazyk Python 3 a knihovnu <i>libcst</i> byly
uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>float_0_1.py</td><td>nepřesné uložení hodnoty 0,1 v&nbsp;typu <i>float</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/float_0_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/float_0_1.py</a></td></tr>
<tr><td> 2</td><td>float_loop.py</td><td>nekonečná počítaná programová smyčka s&nbsp;krokem přibližně 0,1</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/float_loop.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/float_loop.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>decimal_0_1_A.py</td><td>zdánlivě přesné uložení hodnoty 0,1, konstruktor používající <i>float</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_0_1_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_0_1_A.py</a></td></tr>
<tr><td> 4</td><td>decimal_0_1_B.py</td><td>zdánlivě přesné uložení hodnoty 0,1, konstruktor používající řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_0_1_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_0_1_B.py</a></td></tr>
<tr><td> 5</td><td>decimal_loop_A.py</td><td>nekonečná počítaná programová smyčka s&nbsp;krokem přibližně 0,1</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_loop_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_loop_A.py</a></td></tr>
<tr><td> 6</td><td>decimal_loop_B.py</td><td>konečná počítaná programová smyčka s&nbsp;krokem přesně 0,1</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_loop_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/decimal_loop_B.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 7</td><td>pi_wallis_float.py</td><td>výpočet konstanty &pi; z&nbsp;Wallisovy řady, realizace s&nbsp;typem <i>float</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_float.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_float.py</a></td></tr>
<tr><td> 8</td><td>pi_wallis_decimal.py</td><td>výpočet konstanty &pi; z&nbsp;Wallisovy řady, realizace s&nbsp;typem <i>Decimal</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_decimal.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_decimal.py</a></td></tr>
<tr><td> 9</td><td>pi_wallis_float_threshold.py</td><td>výpočet konstanty &pi; s&nbsp;nastavenou přesností, nekonečný výpočet</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_float_threshold.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_float_threshold.py</a></td></tr>
<tr><td>10</td><td>pi_wallis_decimal_threshold.py</td><td>výpočet konstanty &pi; s&nbsp;nastavenou přesností, konečný výpočet</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_decimal_threshold.py">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/pi_wallis_decimal_threshold.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>17</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>18</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
<tr><td>19</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/">https://github.com/tisnik/most-popular-python-libs/blob/master/decimal/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>decimal — Decimal fixed point and floating point arithmetic<br />
<a href="https://docs.python.org/3/library/decimal.html">https://docs.python.org/3/library/decimal.html</a>
</li>

<li>An Essential Guide to Python Decimal By Examples<br />
<a href="https://www.pythontutorial.net/advanced-python/python-decimal/">https://www.pythontutorial.net/advanced-python/python-decimal/</a>
</li>

<li>GCC: 6.14 Decimal Floating Types<br />
<a href="https://gcc.gnu.org/onlinedocs/gcc/Decimal-Float.html">https://gcc.gnu.org/onlinedocs/gcc/Decimal-Float.html</a>
</li>

<li>Routines for decimal floating point emulation<br />
<a href="https://gcc.gnu.org/onlinedocs/gccint/Decimal-float-library-routines.html">https://gcc.gnu.org/onlinedocs/gccint/Decimal-float-library-routines.html</a>
</li>

<li>Representation of hexadecimal floating point<br />
<a href="https://www.ibm.com/docs/en/hla-and-tf/1.6?topic=lq-representation-hexadecimal-floating-point">https://www.ibm.com/docs/en/hla-and-tf/1.6?topic=lq-representation-hexadecimal-floating-point</a>
</li>

<li>Decimal floating point<br />
<a href="https://en.wikipedia.org/wiki/Decimal_floating_point">https://en.wikipedia.org/wiki/Decimal_floating_point</a>
</li>

<li>Hexadecimal Floating-Point Constants<br />
<a href="https://www.exploringbinary.com/hexadecimal-floating-point-constants/">https://www.exploringbinary.com/hexadecimal-floating-point-constants/</a>
</li>

<li>Norma IEEE 754 a příbuzní: formáty plovoucí řádové tečky<br />
<a href="https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/">https://www.root.cz/clanky/norma-ieee-754-a-pribuzni-formaty-plovouci-radove-tecky/</a>
</li>

<li>decimal32 floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Decimal32_floating-point_format">https://en.wikipedia.org/wiki/Decimal32_floating-point_format</a>
</li>

<li>decimal64 floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Decimal64_floating-point_format">https://en.wikipedia.org/wiki/Decimal64_floating-point_format</a>
</li>

<li>decimal128 floating-point format<br />
<a href="https://en.wikipedia.org/wiki/Decimal128_floating-point_format">https://en.wikipedia.org/wiki/Decimal128_floating-point_format</a>
</li>

<li>IEEE-754 Floating-Point Conversion<br />
<a href="http://babbage.cs.qc.cuny.edu/IEEE-754.old/32bit.html">http://babbage.cs.qc.cuny.edu/IEEE-754.old/32bit.html</a>
</li>

<li>Small Float Formats<br />
<a href="https://www.khronos.org/opengl/wiki/Small_Float_Formats">https://www.khronos.org/opengl/wiki/Small_Float_Formats</a>
</li>

<li>Binary-coded decimal<br />
<a href="https://en.wikipedia.org/wiki/Binary-coded_decimal">https://en.wikipedia.org/wiki/Binary-coded_decimal</a>
</li>

<li>Chen–Ho encoding<br />
<a href="https://en.wikipedia.org/wiki/Chen%E2%80%93Ho_encoding">https://en.wikipedia.org/wiki/Chen%E2%80%93Ho_encoding</a>
</li>

<li>Densely packed decimal<br />
<a href="https://en.wikipedia.org/wiki/Densely_packed_decimal">https://en.wikipedia.org/wiki/Densely_packed_decimal</a>
</li>

<li>A Summary of Chen-Ho Decimal Data encoding<br />
<a href="http://speleotrove.com/decimal/chen-ho.html">http://speleotrove.com/decimal/chen-ho.html</a>
</li>

<li>Art of Assembly language programming: The 80x87 Floating Point Coprocessors<br />
<a href="https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-3.html">https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-3.html</a>
</li>

<li>Art of Assembly language programming: The FPU Instruction Set<br />
<a href="https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-4.html">https://courses.engr.illinois.edu/ece390/books/artofasm/CH14/CH14-4.html</a>
</li>

<li>INTEL 80387 PROGRAMMER'S REFERENCE MANUAL<br />
<a href="http://www.ragestorm.net/downloads/387intel.txt">http://www.ragestorm.net/downloads/387intel.txt</a>
</li>

<li>Floating-Point Formats<br />
<a href="http://www.quadibloc.com/comp/cp0201.htm">http://www.quadibloc.com/comp/cp0201.htm</a>
</li>

<li>IBM Floating Point Architecture<br />
<a href="http://en.wikipedia.org/wiki/IBM_Floating_Point_Architecture">http://en.wikipedia.org/wiki/IBM_Floating_Point_Architecture</a>
</li>

<li>Extended Binary Coded Decimal Interchange Code<br />
<a href="http://en.wikipedia.org/wiki/EBCDIC">http://en.wikipedia.org/wiki/EBCDIC</a>
</li>

<li>ASCII/EBCDIC Conversion Table<br />
<a href="http://docs.hp.com/en/32212-90008/apcs01.html">http://docs.hp.com/en/32212-90008/apcs01.html</a>
</li>

<li>EBCDIC<br />
<a href="http://www.hansenb.pdx.edu/DMKB/dict/tutorials/ebcdic.php">http://www.hansenb.pdx.edu/DMKB/dict/tutorials/ebcdic.php</a>
</li>

<li>EBCDIC tables<br />
<a href="http://home.mnet-online.de/wzwz.de/temp/ebcdic/cc_en.htm">http://home.mnet-online.de/wzwz.de/temp/ebcdic/cc_en.htm</a>
</li>

<li>36-bit<br />
<a href="http://en.wikipedia.org/wiki/36-bit_word_length">http://en.wikipedia.org/wiki/36-bit_word_length</a>
</li>

<li>36bit.org<br />
<a href="http://www.36bit.org/">http://www.36bit.org/</a>
</li>

<li>How did the Apple II do floating point?<br />
<a href="https://groups.google.com/forum/#!topic/comp.emulators.apple2/qSBiG2TAlRg">https://groups.google.com/forum/#!topic/comp.emulators.apple2/qSBiG2TAlRg</a>
</li>

<li>IBM Floating Point Architecture<br />
<a href="https://en.wikipedia.org/wiki/IBM_Floating_Point_Architecture">https://en.wikipedia.org/wiki/IBM_Floating_Point_Architecture</a>
</li>

<li>The Arithmetic Subroutines<br />
<a href="http://www.users.waitrose.com/~thunor/mmcoyzx81/chapter17.html">http://www.users.waitrose.com/~thunor/mmcoyzx81/chapter17.html</a>
</li>

<li>ZX Floating point to Decimal code in BASIC<br />
<a href="http://www.sinclairzxworld.com/viewtopic.php?t=1422">http://www.sinclairzxworld.com/viewtopic.php?t=1422</a>
</li>

<li>Floating Point Arithmetic Package<br />
<a href="http://www.retrocomputing.net/parts/atari/800/docs/atari_os/atari_os_user_manual_08.htm">http://www.retrocomputing.net/parts/atari/800/docs/atari_os/atari_os_user_manual_08.htm</a>
</li>

<li>Turbo Pascal Real<br />
<a href="http://www.shikadi.net/moddingwiki/Turbo_Pascal_Real">http://www.shikadi.net/moddingwiki/Turbo_Pascal_Real</a>
</li>

<li>THE FLOATING POINT ARITHMETIC PACKAGE<br />
<a href="http://www.atarimax.com/freenet/freenet_material/5.8-BitComputersSupportArea/7.TechnicalResourceCenter/showarticle.php?14">http://www.atarimax.com/freenet/freenet_material/5.8-BitComputersSupportArea/7.TechnicalResourceCenter/showarticle.php?14</a>
</li>

<li>The Most Expensive One-byte Mistake: Did Ken, Dennis, and Brian choose wrong with NUL-terminated text strings?<br />
<a href="http://queue.acm.org/detail.cfm?id=2010365">http://queue.acm.org/detail.cfm?id=2010365</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

