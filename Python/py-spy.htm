<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Py-spy: profiler pro aplikace naprogramované v Pythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Py-spy: profiler pro aplikace naprogramované v Pythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Py-spy: profiler pro aplikace naprogramované v&nbsp;Pythonu</a></p>
<p><a href="#k02">2. Instalace nástroje py-spy</a></p>
<p><a href="#k03">*** 3. Základní způsob použití nástroje py-spy</a></p>
<p><a href="#k04">*** 4. Příklad, v&nbsp;němž budeme sledovat běh nástrojem typu <strong>top</strong></a></p>
<p><a href="#k05">*** 5. Sledování procesu v&nbsp;reálném čase</a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Py-spy: profiler pro aplikace naprogramované v&nbsp;Pythonu</h2>

<p>V&nbsp;dnešním článku si ukážeme, jakým způsobem je možné využít nástroj
nazvaný <i>Py-spy</i>, jenž je určený pro profilování aplikací, které jsou
naprogramovány <a href="https://www.root.cz/n/python/">v&nbsp;jazyku
Python</a>. Navážeme tak na předchozí články, především na článek nazvaný <a
href="https://www.root.cz/clanky/detekce-velikosti-hodnot-ulozenych-v-operacni-pameti-a-spravovanych-interpretrem-pythonu/">Detekce
velikosti hodnot uložených v&nbsp;operační paměti a spravovaných interpretrem
Pythonu</a>, který byl zaměřen na nástroje (resp.&nbsp;přesněji řečeno balíčky)
<i>Pympler</i> a <i>Guppy</i> a taktéž na článek o <a
href="https://www.root.cz/clanky/sledovani-vyuziti-pameti-pythonovskych-aplikaci-nastrojem-memory-profiler/">Memory
profileru1</a>.</p>

<p>Nástroj <i>Py-spy</i> slouží ke zjištění, ve které části resp.&nbsp;ve
kterých částech programového kódu tráví program vytvořený v&nbsp;Pythonu
nejvíce času. Může se jednat o ty části kódu, které je vhodné optimalizovat
(pokud je to možné), v&nbsp;kritických případech pak například naprogramovat
v&nbsp;jiném jazyku (C přes CFFI atd.). Jedná se tak o vhodné doplnění
k&nbsp;výše zmíněnému nástroji <i>Memory profiler</i>, který je zaměřen na
zjišťování těch částí kódu, v&nbsp;nichž je alokován největší objem paměti.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace nástroje py-spy</h2>

<p>Instalace nástroje Py-spy je triviální, postačuje totiž použít
<strong>pip</strong>. Provedeme instalaci pro aktuálně přihlášeného
uživatele:</p>

<pre>
$ <strong>pip3 install --user py-spy</strong>
&nbsp;
Collecting py-spy
  Downloading py_spy-0.3.14-py2.py3-none-manylinux_2_5_x86_64.manylinux1_x86_64.whl (3.0 MB)
     |████████████████████████████████| 3.0 MB 2.0 MB/s 
Installing collected packages: py-spy
Successfully installed py-spy-0.3.14
</pre>

<p>Po instalaci tímto způsobem by se měl v&nbsp;adresáři
<strong>~/.local/bin</strong> objevit nový spustitelný soubor nazvaný
<strong>py-spy</strong>:</p>

<pre>
ptisnovs@ptisnovs:~/.local/bin$ <strong>ls -l</strong>
&nbsp;
total 24204
-rwxrwxr-x 1 ptisnovs ptisnovs      214 Aug 11 09:07 behave
-rwxrwxr-x 1 ptisnovs ptisnovs      215 Aug 10 09:02 coverage
-rwxrwxr-x 1 ptisnovs ptisnovs      215 Aug 10 09:02 coverage3
-rwxrwxr-x 1 ptisnovs ptisnovs      215 Aug 10 09:02 coverage-3.8
-rwxrwxr-x 1 ptisnovs ptisnovs      234 Jun  8 13:15 dmypy
-rwxrwxr-x 1 ptisnovs ptisnovs      213 Oct  6 09:10 jsonschema
-rwxrw-r-- 1 ptisnovs ptisnovs    13958 Sep  5 09:43 lein
-rwxrwxr-x 1 ptisnovs ptisnovs      230 Jun  8 13:15 mypy
-rwxrwxr-x 1 ptisnovs ptisnovs      213 Jun  8 13:15 mypyc
-rwxrwxr-x 1 ptisnovs ptisnovs      209 Sep 19 12:29 pysemver
<strong>-rwxrwxr-x 1 ptisnovs ptisnovs  9827928 Oct 22 10:55 py-spy</strong>
-rwxrwxr-x 1 ptisnovs ptisnovs      221 Aug 10 09:02 py.test
-rwxrwxr-x 1 ptisnovs ptisnovs      221 Aug 10 09:02 pytest
-rwxrwxr-x 1 ptisnovs ptisnovs 14751168 Aug  9 09:13 ruff
-rwxrwxr-x 1 ptisnovs ptisnovs      211 Jun  8 13:15 stubgen
-rwxrwxr-x 1 ptisnovs ptisnovs      212 Jun  8 13:15 stubtest
</pre>

<p><div class="rs-tip-major">Poznámka: samotný Py-spy je naprogramován
v&nbsp;Rustu, čemuž taktéž odpovídá velikost binárního souboru i fakt, že tento
soubor již ke své činnosti nepotřebuje žádné další soubory ani skripty. Ostatně
je zvláštní, kolik nových nástrojů pro Python je naprogramováno právě
v&nbsp;Rustu; jedná se o zajímavý trend.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Základní způsob použití nástroje py-spy</h2>

<p></p>

<pre>
$ <strong>py-spy</strong>
&nbsp;
py-spy 0.3.14
Sampling profiler for Python programs
&nbsp;
USAGE:
    py-spy &lt;SUBCOMMAND&gt;
&nbsp;
OPTIONS:
    -h, --help       Print help information
    -V, --version    Print version information
&nbsp;
SUBCOMMANDS:
    record    Records stack trace information to a flamegraph, speedscope or raw file
    top       Displays a top like view of functions consuming CPU
    dump      Dumps stack traces for a target program to stdout
    help      Print this message or the help of the given subcommand(s)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Příklad, v&nbsp;němž budeme sledovat běh nástrojem typu <strong>top</strong></h2>




<p><a name="k05"></a></p>
<h2 id="k05">5. Sledování procesu v&nbsp;reálném čase</h2>

<pre>
$ <strong>py-spy top -- python3 sprites.py</strong>
</pre>

<pre>
Collecting samples from 'python3 sprites.py' (python v3.8.10)
Total Samples 2046
GIL: 0.00%, Active: 0.00%, Threads: 1
&nbsp;
  %Own   %Total  OwnTime  TotalTime  Function (filename)                                                                                                       
  0.00%   0.00%   0.390s    0.420s   draw_scene (sprites.py)
  0.00%   0.00%   0.220s    0.830s   mainLoop (sprites.py)
  0.00%   0.00%   0.160s     1.03s   &lt;module&gt; (sprites.py)
  0.00%   0.00%   0.100s    0.160s   check_collisions (sprites.py)
  0.00%   0.00%   0.030s    0.030s   draw (pygame/sprite.py)
  0.00%   0.00%   0.030s    0.030s   move_sprites (sprites.py)
  0.00%   0.00%   0.020s    0.020s   grayColor (sprites.py)
  0.00%   0.00%   0.010s    0.010s   __next (sre_parse.py)
  0.00%   0.00%   0.010s    0.010s   distributions_from_metadata (pkg_resources/__init__.py)
  0.00%   0.00%   0.010s    0.040s   change_colors (sprites.py)
  0.00%   0.00%   0.010s    0.010s   yellowColor (sprites.py)
  0.00%   0.00%   0.010s    0.020s   spritecollide (pygame/sprite.py)
  0.00%   0.00%   0.010s    0.010s   sprites (pygame/sprite.py)
  0.00%   0.00%   0.010s    0.010s   copy (pkg_resources/_vendor/pyparsing.py)
  0.00%   0.00%   0.010s    0.010s   __init__ (sre_parse.py)
  0.00%   0.00%   0.000s    0.010s   leaveWhitespace (pkg_resources/_vendor/pyparsing.py)
  0.00%   0.00%   0.000s    0.010s   _load_backward_compatible (&lt;frozen importlib._bootstrap&gt;)
  0.00%   0.00%   0.000s    0.020s   _compile (re.py)
  0.00%   0.00%   0.000s    0.010s   Specifier (pkg_resources/_vendor/packaging/specifiers.py)
  0.00%   0.00%   0.000s    0.020s   compile (sre_compile.py)
  0.00%   0.00%   0.000s    0.010s   load_module (pkg_resources/extern/__init__.py)
  0.00%   0.00%   0.000s    0.010s   &lt;module&gt; (platform.py)
  0.00%   0.00%   0.000s    0.010s   get (sre_parse.py)
  0.00%   0.00%   0.000s    0.040s   _load_unlocked (&lt;frozen importlib._bootstrap&gt;)
  0.00%   0.00%   0.000s    0.040s   &lt;module&gt; (pygame/pkgdata.py)
  0.00%   0.00%   0.000s    0.010s   __init__ (pkg_resources/__init__.py)
  0.00%   0.00%   0.000s    0.020s   _parse_sub (sre_parse.py)
  0.00%   0.00%   0.000s    0.010s   _call_aside (pkg_resources/__init__.py)
  0.00%   0.00%   0.000s    0.010s   find_on_path (pkg_resources/__init__.py)
  0.00%   0.00%   0.000s    0.040s   &lt;module&gt; (pkg_resources/__init__.py)
  0.00%   0.00%   0.000s    0.040s   _find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;)
  0.00%   0.00%   0.000s    0.010s   &lt;module&gt; (pkg_resources/_vendor/packaging/specifiers.py)
  0.00%   0.00%   0.000s    0.010s   __init__ (pkg_resources/_vendor/pyparsing.py)
  0.00%   0.00%   0.000s    0.010s   add_entry (pkg_resources/__init__.py)
&nbsp;
Press Control-C to quit, or ? for help.
</pre>

<pre>
 Keyboard Shortcuts                                                                                                                                          &nbsp;  
&nbsp;  
    key     action
     1      Sort by %Own (% of time currently spent in the function)
     2      Sort by %Total (% of time currently in the function and its children)
     3      Sort by OwnTime (Overall time spent in the function)
     4      Sort by TotalTime (Overall time spent in the function and its children)
    L,l     Toggle between aggregating by line number or by function
    R,r     Reset statistics
    X,x     Exit this help screen
</pre>

<pre>
</pre>



