<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Celery: systém implementující asynchronní fronty úloh pro Python (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Celery: systém implementující asynchronní fronty úloh pro Python (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém a současně i závěrečném článku o projektu Celery si nejprve ukážeme dva nástroje určené pro sledování stavu workerů a úloh. Dále si popíšeme způsob tvorby periodických úloh, použití plánovače a na závěr se též zmíníme o konceptu signálů.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Celery: systém implementující asynchronní fronty úloh pro Python (dokončení)</a></p>
<p><a href="#k02">*** 2. Příprava pro otestování možností systému Celery</a></p>
<p><a href="#k03">*** 3. Nástroj <strong>celery events</strong> pro zobrazení stavu workerů a úloh</a></p>
<p><a href="#k04">*** 4. Zobrazení podrobnějších informací o vybrané úloze</a></p>
<p><a href="#k05">*** 5. Webový nástroj <strong>Flower</strong> pro monitoring i řízení naplánovaných úloh</a></p>
<p><a href="#k06">*** 6. Instalace a spuštění nástroje <strong>Flower</strong></a></p>
<p><a href="#k07">*** 7. Pokročilejší operace poskytované nástrojem <strong>Flower</strong></a></p>
<p><a href="#k08">*** 8. HTTP API nabízené nástrojem <strong>Flower</strong></a></p>
<p><a href="#k09">*** 9. Použití plánovače <strong>celery beat</strong></a></p>
<p><a href="#k10">*** 10. Periodické spouštění úlohy</a></p>
<p><a href="#k11">*** 11. Naplánování spouštění úloh podobné nástroji cron</a></p>
<p><a href="#k12">*** 12. Další možnosti specifikace času při plánování úloh</a></p>
<p><a href="#k13">*** 13. Současné spuštění workerů i plánovače</a></p>
<p><a href="#k14">*** 14. Využití většího množství front</a></p>
<p><a href="#k15">*** 15. Worker přiřazený jediné frontě</a></p>
<p><a href="#k16">*** 16. Signály a způsoby jejich využití</a></p>
<p><a href="#k17">*** 17. Příklady použití signálů</a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Celery: systém implementující asynchronní fronty úloh pro Python (dokončení)</h2>

<p>Na <a href="https://www.root.cz/clanky/celery-system-implementujici-asynchronni-fronty-uloh-pro-python/">úvodní článek o systému Celery</a> dnes navážeme, protože se budeme zabývat složitějšími příklady použití. V&nbsp;první části budou popsány dva nástroje, které jsou určeny pro sledování stavu front popř.&nbsp;úloh a workerů. Jedná se o standardní nástroj <strong>celery events</strong> s&nbsp;textovým uživatelským rozhraním a dále nástroj <i>Flower</i>, který obsahuje jak webové rozhraní, tak i jednoduše použitelné REST API.</p>

<p>Druhá část článku bude věnována poměrně často vyžadované funkcionalitě &ndash; jedná se o možnost spouštění vybraných úloh v&nbsp;určený časový okamžik nebo dokonce periodicky. Závěrečná část bude věnována popisu použití takzvaných signálů a využití většího množství front.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Příprava pro otestování možností systému Celery</h2>

<p>Podobně, jako tomu bylo v&nbsp;úvodním článku o Celery i v&nbsp;článcích o konkurenčním projektu <i>Redis Queue (RQ)</i>, použijeme společně s&nbsp;Celery i systém Redis, a to jak pro realizaci takzvaného <i>brokera</i> (tj.&nbsp;vlastní fronty resp.&nbsp;front, do nichž se ukládají naplánované úlohy), tak i pro implementaci <i>backendu</i> (ten slouží k&nbsp;uložení výsledků úloh). Budeme přitom předpokládat, že je Redis <a href="https://raw.githubusercontent.com/tisnik/presentations/master/redis/redis.conf">nakonfigurovaný takovým způsobem</a>, aby byl dostupný pro lokální uživatele, což v&nbsp;praxi znamená, že bude naslouchat pouze na síťovém zařízení <strong>localhost</strong>:</p>

<pre>
$ <strong>redis-server redis.conf</strong>
</pre>

<p>V&nbsp;navazujících kapitolách si ukážeme použití dvou nástrojů určených pro monitoring front a workerů. Z&nbsp;tohoto důvodu použijeme <a href="https://github.com/tisnik/message-queues-examples/blob/master/celery/example06/tasks.py">tuto implementaci jednoduchého workera</a>, v&nbsp;němž jsou předepsány dvě úlohy:</p>

<pre>
from time import sleep
from celery import Celery
&nbsp;
app = Celery('tasks')
&nbsp;
app.config_from_object('celeryconfig')
&nbsp;
&nbsp;
@app.task
def add(x, y):
    print("Working, received parameters {} and {} to add".format(x, y))
    sleep(2)
    result = x + y
    print("Done with result {}".format(result))
    return result
&nbsp;
&nbsp;
@app.task
def multiply(x, y):
    print("Working, received parameters {} and {} to multiply".format(x, y))
    sleep(2)
    result = x * y
    print("Done with result {}".format(result))
    return result
</pre>

<p>Celery s&nbsp;tímto workerem spustíme jednoduše:</p>

<pre>
$ <strong>cd message-queues-examples/celery/example06/</strong>
&nbsp;
$ <strong>celery -A tasks worker --loglevel=info</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že jednotlivé úlohy budou i v&nbsp;nejrychlejším možném případě dokončeny až po dvou sekundách. Workeři jsou tímto způsobem zpomaleni schválně, aby bylo možné monitorovat stav úloh i stav front s&nbsp;využitím dále popsaných nástrojů.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Nástroj <strong>celery events</strong> pro zobrazení stavu workerů a úloh</h2>

<p>Pro sledování stavu úloh a workerů slouží nástroj vybavený jednoduchým textovým uživatelským rozhraním (TUI), který je součástí základní instalace Celery. Tento nástroj se spustí příkazem <strong>celery events</strong>, protože skutečně zachycuje a zobrazuje události, ke kterým v&nbsp;průběhu činnosti Celery dochází (naplánování úlohy, její vykonání apod.).</p>

<p>Tento nástroj můžeme samozřejmě spustit i ve chvíli, kdy nejsou žádné úlohy ani naplánovány ani vykonávány:</p>

<pre>
$ <strong>cd message-queues-examples/celery/example06/</strong>
&nbsp;
$ <strong>celery events</strong>
</pre>

<p>V&nbsp;tomto případě by se měla zobrazit celoobrazovkové (či spíše celoterminálové) textové uživatelské rozhraní, které bude vypadat takto:</p>

*** image ***
<p><i>Obrázek 1: Spuštění nástroje <strong>celery events</strong> ve chvíli,
kdy nejsou dokončeny žádné úlohy.</i></p>

<p>Nyní nám pouze zbývá spustit několik úloh, které by bylo workerem provedeny. Pro naplánování úloh s&nbsp;jejich vložením do fronty je použit <a href="https://github.com/tisnik/message-queues-examples/blob/master/celery/example06/enqueue_more_work.py">tento skript</a>, v&nbsp;němž se spustí úloha počítající součet, na kterou je navázána úloha počítající součin:</p>

<pre>
from tasks import add, multiply
&nbsp;
for i in range(10):
    add.apply_async((i, i + 1), link=multiply.s(i))
</pre>

<p>Následně všech deset úloh naplánujeme:</p>

<pre>
$ <strong>cd message-queues-examples/celery/example06/</strong>
&nbsp;
$ <strong>python3 enqueue_more_work.py</strong>
</pre>

<p>V&nbsp;terminálu, v&nbsp;němž jsme spustili příkaz <strong>celery events</strong>, by se nyní měly jednotlivé úlohy vypsat, takže by obsah obrazovky mohl vypadat například takto:</p>

*** image ***
<p><i>Obrázek 2: Seznam naplánovaných úloh. Všechny úlohy, které jsou zobrazeny, čekají ve frontě na nějakého workera, který je bude ochoten zpracovat.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zobrazení podrobnějších informací o vybrané úloze</h2>

<p>V&nbsp;případě, že se výsledek úlohy uložil do nakonfigurovaného <i>backendu</i> (například opět do Redisu), můžeme si tento výsledek snadno zobrazit. Taktéž si můžeme zobrazit podrobnější informace o úloze, která prozatím nebyla žádným workerem zpracována, tj.&nbsp;takové úlohy, která je uložena v&nbsp;některé frontě (připomeňme si, že výchozí fronta se jmenuje <i>celery</i>). Způsob, jakým jsou tyto informace prezentovány uživateli, je vidět na třetím screenshotu:</p>

*** image ***
<p><i>Obrázek 3: Zobrazení podrobnějších informací o vybrané úloze.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Webový nástroj <strong>Flower</strong> pro monitoring i řízení naplánovaných úloh</h2>

<p>Výše popsaný nástroj pro zobrazení stavu workerů a úloh sice může být užitečný, ovšem při administraci Celery nenabízí všechny potřebné operace a ani například neumožňuje dlouhodobější sledování využití front, workerů a počítačů zapojených do nakonfigurovaného clusteru. Tyto operace, které jsou ve skutečnosti využívány jak vývojáři, tak i (a to možná častěji) administrátory, nabízí jiný nástroj, který se jmenuje <i>Flower</i>. Jméno tohoto nástroje není odvozeno od květiny, ale od slova <i>flow</i>, což naznačuje i některé funkce, které <i>Flower</i> uživatelům nabízí (liší se i výslovnost, která je taktéž odvozena od &bdquo;flow&ldquo;).</p>

<p>Mezi základní operace nástroje <i>Flower</i> patří pochopitelně zobrazení úloh ve frontách a taktéž zobrazení případných výsledků úloh (pokud je ovšem nakonfigurován <i>backend</i> pro uložení výsledků).</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Instalace a spuštění nástroje <strong>Flower</strong></h2>

<p>Nástroj <i>Flower</i> se instaluje, podobně jako další aplikace, nástroje a knihovny naprogramované v&nbsp;Pythonu, s&nbsp;využitím <strong>pip</strong> popř.&nbsp;<strong>pip3</strong>. Pro účely otestování si <i>Flower</i> nainstalujeme lokálně, tj.&nbsp;nástroj bude dostupný pouze pro aktuálně přihlášeného uživatele, protože se instalace provede do adresáře <strong>~/.local</strong>:</p>

<pre>
$ <strong>pip3 install --user flower</strong>
</pre>

<p>Samotný průběh instalace není ničím výjimečný:</p>

<pre>
Collecting flower
  Downloading https://files.pythonhosted.org/packages/48/7f/344a8f93cbd6669b4fd03c04d8f9a06e9023da7b61145dea5836433bbbe5/flower-0.9.2.tar.gz (1.3MB)
    100% |████████████████████████████████| 1.3MB 853kB/s 
Requirement already satisfied: celery&gt;=3.1.0 in /home/tester/.local/lib/python3.6/site-packages (from flower)
Collecting tornado&gt;=4.2.0 (from flower)
  Downloading https://files.pythonhosted.org/packages/e6/78/6e7b5af12c12bdf38ca9bfe863fcaf53dc10430a312d0324e76c1e5ca426/tornado-5.1.1.tar.gz (516kB)
    100% |████████████████████████████████| 522kB 1.6MB/s 
Collecting babel&gt;=1.0 (from flower)
  Downloading https://files.pythonhosted.org/packages/b8/ad/c6f60602d3ee3d92fbed87675b6fb6a6f9a38c223343ababdb44ba201f10/Babel-2.6.0-py2.py3-none-any.whl (8.1MB)
    100% |████████████████████████████████| 8.1MB 198kB/s 
Requirement already satisfied: pytz in /usr/lib/python3.6/site-packages (from flower)
Requirement already satisfied: kombu&lt;5.0,&gt;=4.2.0 in /home/tester/.local/lib/python3.6/site-packages (from celery&gt;=3.1.0-&gt;flower)
Requirement already satisfied: billiard&lt;3.6.0,&gt;=3.5.0.2 in /home/tester/.local/lib/python3.6/site-packages (from celery&gt;=3.1.0-&gt;flower)
Requirement already satisfied: amqp&lt;3.0,&gt;=2.1.4 in /home/tester/.local/lib/python3.6/site-packages (from kombu&lt;5.0,&gt;=4.2.0-&gt;celery&gt;=3.1.0-&gt;flower)
Requirement already satisfied: vine&gt;=1.1.3 in /home/tester/.local/lib/python3.6/site-packages (from amqp&lt;3.0,&gt;=2.1.4-&gt;kombu&lt;5.0,&gt;=4.2.0-&gt;celery&gt;=3.1.0-&gt;flower)
Installing collected packages: tornado, babel, flower
  Running setup.py install for tornado ... done
  Running setup.py install for flower ... done
Successfully installed babel-2.6.0 flower-0.9.2 tornado-5.1.1
</pre>

<p>Vzhledem k&nbsp;tomu, že instalace byla označena za úspěšnou (viz poslední řádek z&nbsp;předchozího výpisu), měl by být na <strong>$PATH</strong> dostupný i příkaz <strong>flower</strong></p>

<pre>
$ <strong>whereis flower</strong>
flower: /home/tester/.local/bin/flower
</pre>

<p>Zkusme si tento příkaz spustit, a to jednoduše bez parametrů. Spuštění by ideálně mělo být provedeno z&nbsp;adresáře, v&nbsp;němž jsou nakonfigurování workeři:</p>

<pre>
$ <strong>flower </strong>
[I 181210 22:59:05 command:139] Visit me at http://localhost:5555
[I 181210 22:59:06 command:144] Broker: redis://localhost:6379/0
[I 181210 22:59:06 command:147] Registered tasks: 
    ['celery.accumulate',
     'celery.backend_cleanup',
     'celery.chain',
     'celery.chord',
     'celery.chord_unlock',
     'celery.chunks',
     'celery.group',
     'celery.map',
     'celery.starmap']
[I 181210 22:59:06 mixins:224] Connected to redis://localhost:6379/0
</pre>

<p>Jak je z&nbsp;vypsaných zpráv patrné, že webové uživatelské rozhraní dostupné na adrese localhost:5555. Ve skutečnosti ovšem ve výchozím nastavení není přístup omezen ani z&nbsp;okolních počítačů (!), což je sice užitečné, ovšem potenciálně nebezpečné.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Pokročilejší operace poskytované nástrojem <strong>Flower</strong></h2>

<p></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. HTTP API nabízené nástrojem <strong>Flower</strong></h3>

<p>V&nbsp;některých případech je užitečné využít HTTP API nabízené nástrojem <strong>Flower</strong></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Použití plánovače <strong>celery beat</strong></h2>

<p>Ve všech příkladech, které jsme si prozatím ukázali, se úlohy vkládaly do fronty s&nbsp;tím, že budou vykonány v&nbsp;nejbližším možném čase. Takové úlohy jsou workery přečteny, zpracovány a jejich výsledky popř.&nbsp;uloženy do zvoleného datového úložiště (<i>backendu</i>). V&nbsp;některých aplikacích se ovšem můžeme setkat i s&nbsp;jiným typem úloh. Jedná se o takové úlohy, které mají být spouštěny buď periodicky popř.&nbsp;se mají spustit jednou, ovšem až v&nbsp;definovaný okamžik. I takové úlohy je možné v&nbsp;Celery vytvářet &ndash; ostatně právě z&nbsp;tohoto důvodu se nejedná o čistou a přímočarou implementaci <i>task queue</i>, ale o komplikovanější systém.</p>

<p>Nejprve se podívejme, jakým způsobem je možné zajistit, aby se vytvořila úloha, která se bude periodicky opakovat.</p>

<pre>
from time import sleep
from datetime import datetime
from celery import Celery
from celery.schedules import crontab
&nbsp;
app = Celery('tasks')
&nbsp;
app.config_from_object('celeryconfig')
&nbsp;
&nbsp;
app.conf.beat_schedule = {
    'run-every-two-seconds': {
        'task': 'tasks.periodic_task',
        'schedule': 2,
        'args': (),
    },
}
&nbsp;
&nbsp;
@app.task
def periodic_task():
    print("Working, called @ {now}".format(now=datetime.now()))
    sleep(2)
    print("Done")
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Periodické spouštění úlohy</h2>

<p></p>

<pre>
$ <strong>celery -A tasks beat --loglevel=info</strong>
&nbsp;
celery beat v4.2.1 (windowlicker) is starting.
__    -    ... __   -        _
LocalTime -&gt; 2018-12-11 12:35:34
Configuration -&gt;
    . broker -&gt; redis://localhost:6379/0
    . loader -&gt; celery.loaders.app.AppLoader
    . scheduler -&gt; celery.beat.PersistentScheduler
    . db -&gt; celerybeat-schedule
    . logfile -&gt; [stderr]@%INFO
    . maxinterval -&gt; 5.00 minutes (300s)
[2018-12-11 12:35:34,595: INFO/MainProcess] beat: Starting...
[2018-12-11 12:35:34,607: INFO/MainProcess] Scheduler: Sending due task run-every-two-seconds (tasks.periodic_task)
[2018-12-11 12:35:36,601: INFO/MainProcess] Scheduler: Sending due task run-every-two-seconds (tasks.periodic_task)
[2018-12-11 12:35:38,601: INFO/MainProcess] Scheduler: Sending due task run-every-two-seconds (tasks.periodic_task)
</pre>

<p></p>

<pre>
$ <strong>celery -A tasks worker</strong>
&nbsp; 
 -------------- celery@localhost.localdomain v4.2.1 (windowlicker)
---- **** ----- 
--- * ***  * -- Linux-4.14.11-200.fc26.x86_64-x86_64-with-fedora-26-Twenty_Six 2018-12-11 12:37:44
-- * - **** --- 
- ** ---------- [config]
- ** ---------- .&gt; app:         tasks:0x7f1e571bc2e8
- ** ---------- .&gt; transport:   redis://localhost:6379/0
- ** ---------- .&gt; results:     redis://localhost:6379/0
- *** --- * --- .&gt; concurrency: 8 (prefork)
-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks in this worker)
--- ***** ----- 
 -------------- [queues]
                .&gt; celery           exchange=celery(direct) key=celery
&nbsp;
&nbsp;
[2018-12-11 12:37:46,263: WARNING/ForkPoolWorker-8] Working, called @ 2018-12-11 12:37:46.263094
[2018-12-11 12:37:46,263: WARNING/ForkPoolWorker-1] Working, called @ 2018-12-11 12:37:46.263146
[2018-12-11 12:37:46,269: WARNING/ForkPoolWorker-3] Working, called @ 2018-12-11 12:37:46.268838
[2018-12-11 12:37:46,274: WARNING/ForkPoolWorker-5] Working, called @ 2018-12-11 12:37:46.274475
[2018-12-11 12:37:46,274: WARNING/ForkPoolWorker-6] Working, called @ 2018-12-11 12:37:46.274637
[2018-12-11 12:37:46,281: WARNING/ForkPoolWorker-2] Working, called @ 2018-12-11 12:37:46.281300
[2018-12-11 12:37:46,281: WARNING/ForkPoolWorker-4] Working, called @ 2018-12-11 12:37:46.281385
[2018-12-11 12:37:46,288: WARNING/ForkPoolWorker-7] Working, called @ 2018-12-11 12:37:46.288331
[2018-12-11 12:37:48,266: WARNING/ForkPoolWorker-8] Done
[2018-12-11 12:37:48,266: WARNING/ForkPoolWorker-1] Done
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Naplánování spouštění úloh podobné nástroji cron</h2>

<p></p>


<pre>
minute='1/2,5-10,20,30-45,50-59/2'
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Další možnosti specifikace času při plánování úloh</h2>

<p></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Současné spuštění workerů i plánovače</h2>

<pre>
$ <strong>celery -A tasks beat --loglevel=info</strong>
</pre>

<p></p>

<pre>
$ <strong>celery -A tasks worker -B</strong>
</pre>

<pre>
$ <strong>celery -A tasks worker -B --loglevel=info</strong>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Signály a způsoby jejich využití</h2>

<p></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Příklady použití signálů</h2>

<p></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
$ <strong>celery -A tasks worker -l info -Q red_queue -n red</strong>
 
 -------------- celery@red v4.2.1 (windowlicker)
---- **** ----- 
--- * ***  * -- Linux-4.14.11-200.fc26.x86_64-x86_64-with-fedora-26-Twenty_Six 2018-12-11 20:38:26
-- * - **** --- 
- ** ---------- [config]
- ** ---------- .> app:         tasks:0x7f8652653c88
- ** ---------- .> transport:   redis://localhost:6379/0
- ** ---------- .> results:     redis://localhost:6379/0
- *** --- * --- .> concurrency: 8 (prefork)
-- ******* ---- .> task events: OFF (enable -E to monitor tasks in this worker)
--- ***** ----- 
 -------------- [queues]
                .> red_queue        exchange=red_queue(direct) key=red_queue
                

[tasks]
  . tasks.blue_task
  . tasks.green_task
  . tasks.red_task

[2018-12-11 20:38:26,626: INFO/MainProcess] Connected to redis://localhost:6379/0
[2018-12-11 20:38:26,634: INFO/MainProcess] mingle: searching for neighbors
[2018-12-11 20:38:27,651: INFO/MainProcess] mingle: sync with 1 nodes
[2018-12-11 20:38:27,653: INFO/MainProcess] mingle: sync complete
[2018-12-11 20:38:27,663: INFO/MainProcess] celery@red ready.
[2018-12-11 20:38:37,644: INFO/MainProcess] Events of group {task} enabled by remote.
[2018-12-11 20:39:22,831: INFO/MainProcess] sync with celery@green
[2018-12-11 20:40:31,801: INFO/MainProcess] Received task: tasks.red_task[c73537d5-9aed-4e2f-94ac-8513d9cac65c]  
[2018-12-11 20:40:31,803: WARNING/ForkPoolWorker-8] Red task called @ 2018-12-11 20:40:31.802849
[2018-12-11 20:40:33,805: WARNING/ForkPoolWorker-8] Red task done
[2018-12-11 20:40:33,811: INFO/ForkPoolWorker-8] Task tasks.red_task[c73537d5-9aed-4e2f-94ac-8513d9cac65c] succeeded in 2.0087841898202896s: None
</pre>

<pre>

</pre>


<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů naprogramovaných
v&nbsp;Pythonu byly uloženy do Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/message-queues-examples">https://github.com/tisnik/message-queues-examples</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem &ndash; alespoň prozatím &ndash; velmi malý, dnes má
doslova několik kilobajtů), můžete namísto toho použít odkazy na jednotlivé
příklady, které naleznete v&nbsp;následující tabulce. Každý příklad se skládá
minimálně ze dvou skriptů &ndash; implementace workera a skriptu pro uložení
nové úlohy do fronty:</p>

<table>
<tr><th>Příklad</th><th>Skript</th><th>Popis</th><th>Cesta</th></tr>
<tr><td>6</td><td>tasks.py</td><td>implementace workera</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/celery/example06/tasks.py">https://github.com/tisnik/message-queues-examples/blob/master/celery/example06/tasks.py</a></td></tr>
<tr><td>6</td><td>enqueue_work.py</td><td>naplánování úlohy</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/celery/example06/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/celery/example06/enqueue_work.py</a></td></tr>
<tr><td>6</td><td>enqueue_more_work.py</td><td>naplánování více úloh</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/celery/example06/enqueue_more_work.py">https://github.com/tisnik/message-queues-examples/blob/master/celery/example06/enqueue_more_work.py</a></td></tr>
<tr><td>6</td><td>celeryconfig.py</td><td>konfigurace workera</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/celery/example06/celeryconfig.py">https://github.com/tisnik/message-queues-examples/blob/master/celery/example06/celeryconfig.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>7</td><td>tasks.py</td><td>implementace periodické úlohy</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/celery/example07/tasks.py">https://github.com/tisnik/message-queues-examples/blob/master/celery/example07/tasks.py</a></td></tr>
<tr><td>7</td><td>enqueue_work.py</td><td>naplánování úlohy</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/celery/example07/enqueue_work.py">https://github.com/tisnik/message-queues-examples/blob/master/celery/example07/enqueue_work.py</a></td></tr>
<tr><td>7</td><td>enqueue_more_work.py</td><td>naplánování více úloh</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/celery/example07/enqueue_more_work.py">https://github.com/tisnik/message-queues-examples/blob/master/celery/example07/enqueue_more_work.py</a></td></tr>
<tr><td>7</td><td>celeryconfig.py</td><td>konfigurace workera</td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/celery/example07/celeryconfig.py">https://github.com/tisnik/message-queues-examples/blob/master/celery/example07/celeryconfig.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>8</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/celery/example00/">https://github.com/tisnik/message-queues-examples/blob/master/celery/example00/</a></td></tr>
<tr><td>8</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/celery/example00/">https://github.com/tisnik/message-queues-examples/blob/master/celery/example00/</a></td></tr>
<tr><td>9</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/celery/example00/">https://github.com/tisnik/message-queues-examples/blob/master/celery/example00/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/message-queues-examples/blob/master/celery/example00/">https://github.com/tisnik/message-queues-examples/blob/master/celery/example00/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>celery na PyPi<br />
<a href="https://pypi.org/project/celery/">https://pypi.org/project/celery/</a>
</li>

<li>Databáze Redis (nejenom) pro vývojáře používající Python <br />
<a href="https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python/">https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python/</a>
</li>

<li>Databáze Redis (nejenom) pro vývojáře používající Python (dokončení)<br />
<a href="https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python-dokonceni/">https://www.root.cz/clanky/databaze-redis-nejenom-pro-vyvojare-pouzivajici-python-dokonceni/</a>
</li>

<li>Použití nástroje RQ (Redis Queue) pro správu úloh zpracovávaných na pozadí<br />
<a href="https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/">https://www.root.cz/clanky/pouziti-nastroje-rq-redis-queue-pro-spravu-uloh-zpracovavanych-na-pozadi/</a>
</li>

<li>Redis Queue (RQ)<br />
<a href="https://www.fullstackpython.com/redis-queue-rq.html">https://www.fullstackpython.com/redis-queue-rq.html</a>
</li>

<li>Python Celery &amp; RabbitMQ Tutorial<br />
<a href="https://tests4geeks.com/python-celery-rabbitmq-tutorial/">https://tests4geeks.com/python-celery-rabbitmq-tutorial/</a>
</li>

<li>Flower: Real-time Celery web-monitor<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/monitoring.html#flower-real-time-celery-web-monitor">http://docs.celeryproject.org/en/latest/userguide/monitoring.html#flower-real-time-celery-web-monitor</a>
</li>

<li>Asynchronous Tasks With Django and Celery<br />
<a href="https://realpython.com/asynchronous-tasks-with-django-and-celery/">https://realpython.com/asynchronous-tasks-with-django-and-celery/</a>
</li>

<li>First Steps with Celery<br />
<a href="http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html">http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html</a>
</li>

<li>node-celery<br />
<a href="https://github.com/mher/node-celery">https://github.com/mher/node-celery</a>
</li>

<li>Full Stack Python: web development<br />
<a href="https://www.fullstackpython.com/web-development.html">https://www.fullstackpython.com/web-development.html</a>
</li>

<li>Introducing RQ<br />
<a href="https://nvie.com/posts/introducing-rq/">https://nvie.com/posts/introducing-rq/</a>
</li>

<li>Asynchronous Tasks with Flask and Redis Queue<br />
<a href="https://testdriven.io/asynchronous-tasks-with-flask-and-redis-queue">https://testdriven.io/asynchronous-tasks-with-flask-and-redis-queue</a>
</li>

<li>rq-dashboard<br />
<a href="https://github.com/eoranged/rq-dashboard">https://github.com/eoranged/rq-dashboard</a>
</li>

<li>Stránky projektu Redis<br />
<a href="https://redis.io/">https://redis.io/</a>
</li>

<li>Introduction to Redis<br />
<a href="https://redis.io/topics/introduction">https://redis.io/topics/introduction</a>
</li>

<li>Try Redis<br />
<a href="http://try.redis.io/">http://try.redis.io/</a>
</li>

<li>Redis tutorial, April 2010 (starší, ale pěkně udělaný)<br />
<a href="https://static.simonwillison.net/static/2010/redis-tutorial/">https://static.simonwillison.net/static/2010/redis-tutorial/</a>
</li>

<li>Python Redis<br />
<a href="https://redislabs.com/lp/python-redis/">https://redislabs.com/lp/python-redis/</a>
</li>

<li>Redis: key-value databáze v paměti i na disku<br />
<a href="https://www.zdrojak.cz/clanky/redis-key-value-databaze-v-pameti-i-na-disku/">https://www.zdrojak.cz/clanky/redis-key-value-databaze-v-pameti-i-na-disku/</a>
</li>

<li>Praktický úvod do Redis (1): vaše distribuovaná NoSQL cache<br />
<a href="http://www.cloudsvet.cz/?p=253">http://www.cloudsvet.cz/?p=253</a>
</li>

<li>Praktický úvod do Redis (2): transakce<br />
<a href="http://www.cloudsvet.cz/?p=256">http://www.cloudsvet.cz/?p=256</a>
</li>

<li>Praktický úvod do Redis (3): cluster<br />
<a href="http://www.cloudsvet.cz/?p=258">http://www.cloudsvet.cz/?p=258</a>
</li>

<li>Connection pool<br />
<a href="https://en.wikipedia.org/wiki/Connection_pool">https://en.wikipedia.org/wiki/Connection_pool</a>
</li>

<li>Instant Redis Sentinel Setup<br />
<a href="https://github.com/ServiceStack/redis-config">https://github.com/ServiceStack/redis-config</a>
</li>

<li>How to install REDIS in LInux<br />
<a href="https://linuxtechlab.com/how-install-redis-server-linux/">https://linuxtechlab.com/how-install-redis-server-linux/</a>
</li>

<li>Redis RDB Dump File Format<br />
<a href="https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format">https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-RDB-Dump-File-Format</a>
</li>

<li>Lempel–Ziv–Welch<br />
<a href="https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch">https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch</a>
</li>

<li>Redis Persistence<br />
<a href="https://redis.io/topics/persistence">https://redis.io/topics/persistence</a>
</li>

<li>Redis persistence demystified<br />
<a href="http://oldblog.antirez.com/post/redis-persistence-demystified.html">http://oldblog.antirez.com/post/redis-persistence-demystified.html</a>
</li>

<li>Redis reliable queues with Lua scripting<br />
<a href="http://oldblog.antirez.com/post/250">http://oldblog.antirez.com/post/250</a>
</li>

<li>Ost (knihovna)<br />
<a href="https://github.com/soveran/ost">https://github.com/soveran/ost</a>
</li>

<li>NoSQL<br />
<a href="https://en.wikipedia.org/wiki/NoSQL">https://en.wikipedia.org/wiki/NoSQL</a>
</li>

<li>Shard (database architecture)<br />
<a href="https://en.wikipedia.org/wiki/Shard_%28database_architecture%29">https://en.wikipedia.org/wiki/Shard_%28database_architecture%29</a>
</li>

<li>What is sharding and why is it important?<br />
<a href="https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important">https://stackoverflow.com/questions/992988/what-is-sharding-and-why-is-it-important</a>
</li>

<li>What Is Sharding?<br />
<a href="https://btcmanager.com/what-sharding/">https://btcmanager.com/what-sharding/</a>
</li>

<li>Redis clients<br />
<a href="https://redis.io/clients">https://redis.io/clients</a>
</li>

<li>Category:Lua-scriptable software<br />
<a href="https://en.wikipedia.org/wiki/Category:Lua-scriptable_software">https://en.wikipedia.org/wiki/Category:Lua-scriptable_software</a>
</li>

<li>Seriál Programovací jazyk Lua<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-lua/">https://www.root.cz/serialy/programovaci-jazyk-lua/</a>
</li>

<li>Redis memory usage<br />
<a href="http://nosql.mypopescu.com/post/1010844204/redis-memory-usage">http://nosql.mypopescu.com/post/1010844204/redis-memory-usage</a>
</li>

<li>Ukázka konfigurace Redisu pro lokální testování<br />
<a href="https://github.com/tisnik/presentations/blob/master/redis/redis.conf">https://github.com/tisnik/presentations/blob/master/redis/redis.conf</a>
</li>

<li>Resque<br />
<a href="https://github.com/resque/resque">https://github.com/resque/resque</a>
</li>

<li>Nested transaction<br />
<a href="https://en.wikipedia.org/wiki/Nested_transaction">https://en.wikipedia.org/wiki/Nested_transaction</a>
</li>

<li>Publish–subscribe pattern<br />
<a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern</a>
</li>

<li>Messaging pattern<br />
<a href="https://en.wikipedia.org/wiki/Messaging_pattern">https://en.wikipedia.org/wiki/Messaging_pattern</a>
</li>

<li>Using pipelining to speedup Redis queries<br />
<a href="https://redis.io/topics/pipelining">https://redis.io/topics/pipelining</a>
</li>

<li>Pub/Sub<br />
<a href="https://redis.io/topics/pubsub">https://redis.io/topics/pubsub</a>
</li>

<li>ZeroMQ distributed messaging<br />
<a href="http://zeromq.org/">http://zeromq.org/</a>
</li>

<li>ZeroMQ: Modern &amp; Fast Networking Stack<br />
<a href="https://www.igvita.com/2010/09/03/zeromq-modern-fast-networking-stack/">https://www.igvita.com/2010/09/03/zeromq-modern-fast-networking-stack/</a>
</li>

<li>Publish/Subscribe paradigm: Why must message classes not know about their subscribers?<br />
<a href="https://stackoverflow.com/questions/2908872/publish-subscribe-paradigm-why-must-message-classes-not-know-about-their-subscr">https://stackoverflow.com/questions/2908872/publish-subscribe-paradigm-why-must-message-classes-not-know-about-their-subscr</a>
</li>

<li>Python &amp; Redis PUB/SUB<br />
<a href="https://medium.com/@johngrant/python-redis-pub-sub-6e26b483b3f7">https://medium.com/@johngrant/python-redis-pub-sub-6e26b483b3f7</a>
</li>

<li>Message broker<br />
<a href="https://en.wikipedia.org/wiki/Message_broker">https://en.wikipedia.org/wiki/Message_broker</a>
</li>

<li>RESP Arrays<br />
<a href="https://redis.io/topics/protocol#array-reply">https://redis.io/topics/protocol#array-reply</a>
</li>

<li>Redis Protocol specification<br />
<a href="https://redis.io/topics/protocol">https://redis.io/topics/protocol</a>
</li>

<li>Redis Pub/Sub: Intro Guide<br />
<a href="https://www.redisgreen.net/blog/pubsub-intro/">https://www.redisgreen.net/blog/pubsub-intro/</a>
</li>

<li>Redis Pub/Sub: Howto Guide<br />
<a href="https://www.redisgreen.net/blog/pubsub-howto/">https://www.redisgreen.net/blog/pubsub-howto/</a>
</li>

<li>Comparing Publish-Subscribe Messaging and Message Queuing<br />
<a href="https://dzone.com/articles/comparing-publish-subscribe-messaging-and-message">https://dzone.com/articles/comparing-publish-subscribe-messaging-and-message</a>
</li>

<li>Apache Kafka<br />
<a href="https://kafka.apache.org/">https://kafka.apache.org/</a>
</li>

<li>Iron<br />
<a href="http://www.iron.io/mq">http://www.iron.io/mq</a>
</li>

<li>kue (založeno na Redisu, určeno pro node.js)<br />
<a href="https://github.com/Automattic/kue">https://github.com/Automattic/kue</a>
</li>

<li>Cloud Pub/Sub<br />
<a href="https://cloud.google.com/pubsub/">https://cloud.google.com/pubsub/</a>
</li>

<li>Introduction to Redis Streams<br />
<a href="https://redis.io/topics/streams-intro">https://redis.io/topics/streams-intro</a>
</li>

<li>glob (programming)<br />
<a href="https://en.wikipedia.org/wiki/Glob_(programming)">https://en.wikipedia.org/wiki/Glob_(programming)</a>
</li>

<li>Why and how Pricing Assistant migrated from Celery to RQ - Paris.py<br />
<a href="https://www.slideshare.net/sylvinus/why-and-how-pricing-assistant-migrated-from-celery-to-rq-parispy-2">https://www.slideshare.net/sylvinus/why-and-how-pricing-assistant-migrated-from-celery-to-rq-parispy-2</a>
</li>

<li>Enqueueing internals<br />
<a href="http://python-rq.org/contrib/">http://python-rq.org/contrib/</a>
</li>

<li>queue — A synchronized queue class<br />
<a href="https://docs.python.org/3/library/queue.html">https://docs.python.org/3/library/queue.html</a>
</li>

<li>Queues<br />
<a href="http://queues.io/">http://queues.io/</a>
</li>

<li>Windows Subsystem for Linux Documentation<br />
<a href="https://docs.microsoft.com/en-us/windows/wsl/about">https://docs.microsoft.com/en-us/windows/wsl/about</a>
</li>

<li>RestMQ<br />
<a href="http://restmq.com/">http://restmq.com/</a>
</li>

<li>ActiveMQ<br />
<a href="http://activemq.apache.org/">http://activemq.apache.org/</a>
</li>

<li>Amazon MQ<br />
<a href="https://aws.amazon.com/amazon-mq/">https://aws.amazon.com/amazon-mq/</a>
</li>

<li>Amazon Simple Queue Service<br />
<a href="https://aws.amazon.com/sqs/">https://aws.amazon.com/sqs/</a>
</li>

<li>Celery: Distributed Task Queue<br />
<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a>
</li>

<li>Disque, an in-memory, distributed job queue<br />
<a href="https://github.com/antirez/disque">https://github.com/antirez/disque</a>
</li>

<li>rq-dashboard<br />
<a href="https://github.com/eoranged/rq-dashboard">https://github.com/eoranged/rq-dashboard</a>
</li>

<li>Projekt RQ na PyPi<br />
<a href="https://pypi.org/project/rq/">https://pypi.org/project/rq/</a>
</li>

<li>rq-dashboard 0.3.12<br />
<a href="https://pypi.org/project/rq-dashboard/">https://pypi.org/project/rq-dashboard/</a>
</li>

<li>Job queue<br />
<a href="https://en.wikipedia.org/wiki/Job_queue">https://en.wikipedia.org/wiki/Job_queue</a>
</li>

<li>Why we moved from Celery to RQ<br />
<a href="https://frappe.io/blog/technology/why-we-moved-from-celery-to-rq">https://frappe.io/blog/technology/why-we-moved-from-celery-to-rq</a>
</li>

<li>Running multiple workers using Celery<br />
<a href="https://serverfault.com/questions/655387/running-multiple-workers-using-celery">https://serverfault.com/questions/655387/running-multiple-workers-using-celery</a>
</li>

<li>celery — Distributed processing<br />
<a href="http://docs.celeryproject.org/en/latest/reference/celery.html">http://docs.celeryproject.org/en/latest/reference/celery.html</a>
</li>

<li>Chains<br />
<a href="https://celery.readthedocs.io/en/latest/userguide/canvas.html#chains">https://celery.readthedocs.io/en/latest/userguide/canvas.html#chains</a>
</li>

<li>Routing<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/routing.html#automatic-routing">http://docs.celeryproject.org/en/latest/userguide/routing.html#automatic-routing</a>
</li>

<li>Celery Distributed Task Queue in Go<br />
<a href="https://github.com/gocelery/gocelery/">https://github.com/gocelery/gocelery/</a>
</li>

<li>Python Decorators<br />
<a href="https://wiki.python.org/moin/PythonDecorators">https://wiki.python.org/moin/PythonDecorators</a>
</li>

<li>Periodic Tasks<br />
<a href="http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html">http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html</a>
</li>

<li>celery.schedules<br />
<a href="http://docs.celeryproject.org/en/latest/reference/celery.schedules.html#celery.schedules.crontab">http://docs.celeryproject.org/en/latest/reference/celery.schedules.html#celery.schedules.crontab</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

