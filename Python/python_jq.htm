<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Rozhraní mezi nástrojem <strong>jq</strong> a programovacím jazykem Python</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Rozhraní mezi nástrojem <strong>jq</strong> a programovacím jazykem Python</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Minulý týden jsme se na stránkách Roota seznámili s nástrojem jq, který slouží pro zpracování dat uložených ve formátu JSON z příkazové řádky. Tento nástroj, resp. jeho DSL lze ovšem použít i ve skriptech psaných v Pythonu, a to díky balíčkům jq.py a pyjq, kterými se budeme zabývat dnes.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Rozhraní mezi nástrojem <strong>jq</strong> a programovacím jazykem Python</a></p>
<p><a href="#k02">2. Balíček <strong>jq.py</strong> s&nbsp;implementací rozhraní mezi Pythonem a nástrojem <strong>jq</strong></a></p>
<p><a href="#k03">3. Rozhraní mezi Pythonem a nástrojem <strong>jq</strong> z&nbsp;pohledu programátora</a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Rozhraní mezi nástrojem <strong>jq</strong> a programovacím jazykem Python</h2>

<p><a
href="https://www.root.cz/clanky/zpracovani-dat-reprezentovanych-ve-formatu-json-nastrojem-jq/">V&nbsp;článku
o užitečném nástroji <strong>jq</strong></a> jsme si řekli, že nástroj
<strong>jq</strong>, který je používám pro zpracování dat uložených ve formátu
JSON, je určen primárně pro spouštění z&nbsp;příkazové řádky popř.&nbsp;ze
shell skriptů. Ovšem kvůli velké popularitě tohoto nástroje (ostatně viz <a
href="https://github.com/stedolan/jq">počet hvězdiček</a> přidělených jeho
repositáři) vzniklo i rozhraní mezi <strong>jq</strong> a <a
href="https://www.root.cz/n/python/">programovacím jazykem Python</a>. Ve
skutečnosti vznikla dokonce dvě rozhraní reprezentovaná různě pojmenovanými
balíčky. První balíček se jmenuje <strong>jq</strong>, ovšem kvůli rozlišení
oproti původnímu nástroji <strong>jq</strong> se většinou používá jméno
<strong>jq.py</strong>. A druhý podobně koncipovaný balíček, ovšem
s&nbsp;odlišným API, se pro změnu jmenuje <strong>pyjq</strong>.</p>

<p>Před použitím <strong>jq.py</strong> nebo <strong>pyjq</strong> je vhodné si
nainstalovat binární balíček <strong>jq</strong> se stejně pojmenovaným
nástrojem <strong>jq</strong> spustitelným z&nbsp;příkazové řádky. Podrobnostem
jsme se věnovali <a
href="https://www.root.cz/clanky/zpracovani-dat-reprezentovanych-ve-formatu-json-nastrojem-jq/#k02">minule</a>,
takže jen krátce &ndash; nejrychlejší bývá použití správce balíčků vaší
distribuce Linuxu. V&nbsp;případě dnes již dosti muzeální Fedory 27 proběhne
instalace následovně:</p>

<pre>
$ <strong>sudo dnf install jq</strong>
&nbsp;
Last metadata expiration check: 1:36:21 ago on Tue 04 Aug 2020 05:00:30 PM CEST.
Dependencies resolved.
================================================================================
 Package            Arch            Version               Repository       Size
================================================================================
Installing:
 jq                 x86_64          1.5-8.fc27            fedora          158 k
Installing dependencies:
 oniguruma          x86_64          6.6.1-1.fc27          fedora          178 k
&nbsp;
Transaction Summary
================================================================================
Install  2 Packages
&nbsp;
Total download size: 337 k
Installed size: 1.1 M
Is this ok [y/N]: y
</pre>

<p><div class="rs-tip-major">Poznámka: podobně snadno instalace proběhne i na
distribucích založených na <strong>APT</strong> apod.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Balíček <strong>jq.py</strong> s&nbsp;implementací rozhraní mezi Pythonem a nástrojem <strong>jq</strong></h2>

<p>Nejdříve se budeme věnovat balíčku pojmenovaném <strong>jq.py</strong>, jenž
zpřístupňuje nástroj <strong>jq</strong> přímo programátorům používajícím
Python. Tento balíček lze nainstalovat snadno, typicky nástrojem
<strong>pip</strong> nebo <strong>pip3</strong>, popř.&nbsp;lze pochopitelně
využít virtuální prostředí Pythonu:</p>

<pre>
$ <strong>pip3 install --user jq</strong>
&nbsp;
Collecting jq
  Downloading https://files.pythonhosted.org/packages/37/83/e1f7162986c228cc33768b9c53c1167cafe222f8d81f1325a27cfff42f47/jq-1.0.2-cp36-cp36m-manylinux1_x86_64.whl (502kB)
    100% |████████████████████████████████| 512kB 1.5MB/s 
Installing collected packages: jq
Successfully installed jq-1.0.2
</pre>

<p><div class="rs-tip-major">Poznámka: instalace proběhne takto rychle pouze
v&nbsp;tom případě, že již máte nainstalován i binární balíček
<strong>jq</strong>. Pokud tomu tak není, pokusí se <strong>pip</strong> nebo
<strong>pip3</strong> nejdříve získat zdrojové kódy <strong>jq</strong> a
přeložit je. K&nbsp;tomu bude potřebovat základní sadu vývojářských nástrojů
gcc, zejména překladač céčka, linker a nástroj <strong>make</strong>.
V&nbsp;případě, že je binární verze <strong>jq</strong> na systému již
nainstalována (<a href="#k01">viz úvodní kapitolu</a>), jsou tyto kroky
přeskočeny.</div></p>

<p>Následně se můžeme přesvědčit, že je balíček <strong>jq.py</strong> skutečně
dostupný pro vývojáře používající programovací jazyk Python. Následující skript
by měl být spustitelný a měl by zobrazit nápovědu k&nbsp;balíčku
<strong>jq.py</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>
&nbsp;
<strong>import</strong> jq
&nbsp;
help(jq)
</pre>

<p>S&nbsp;přibližným výstupem:</p>

<pre>
Help on module jq:
&nbsp;
NAME
    jq
&nbsp;
FUNCTIONS
    all(...)
&nbsp;
    compile(...)
&nbsp;
    first(...)
&nbsp;
    iter(...)
&nbsp;
    jq(...)
&nbsp;
    text(...)
&nbsp;
DATA
    __test__ = {}
&nbsp;
FILE
</pre>

<p>Pokud dojde k&nbsp;chybě při importu, zkontrolujte si, zda je
<strong>jq.py</strong> nainstalován v&nbsp;adresáři, který je součástí seznamu
cest, na kterých interpret Pythonu hledá balíčky:</p>

<pre>
<strong>import</strong> sys
print(sys.path)
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti jsme prozatím otestovali
pouze to, že lze naimportovat Pythonovský balíček <strong>jq.py</strong>,
nikoli samotné rozhraní k&nbsp;binárnímu nástroji
<strong>jq</strong>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Rozhraní mezi Pythonem a nástrojem <strong>jq</strong> z&nbsp;pohledu programátora</h2>

<p>V&nbsp;balíčku <strong>jq.py</strong> je k&nbsp;dispozici pouze několik
funkcí a metod, které zprostředkovávají rozhraní mezi nástrojem
<strong>jq</strong> a skriptem psaným v&nbsp;Pythonu. Jedná se o následující
funkce a metody:</p>

<table>
<tr><th>#</th><th>Funkce</th><th>Stručný popis</th></tr>
<tr><td>1</td><td>compile()</td><td>(funkce) program psaný v&nbsp;DSL nástroje <strong>jq</strong> je přeložen a vrácen ve formě objektu</td></tr>
<tr><td>2</td><td>input()</td><td>metoda, které se předají vstupní data buď ve formě textu nebo JSON objektu</td></tr>
<tr><td>3</td><td>first()</td><td>získání prvního výsledku aplikace dotazu na JSON data</td></tr>
<tr><td>4</td><td>all()</td><td>získání všech výsledků aplikace dotazu na JSON data</td></tr>
<tr><td>5</td><td>text()</td><td>získání výsledků ve formě textu (a nikoli slovníku nebo seznamu)</td></tr>
<tr><td>6</td><td>iter()</td><td>(funkce) získání iterátoru pro procházení jednotlivými prvky výsledku</td></tr>
</table>

<p>Podívejme se nyní na několik základních příkladů použití balíčku
<strong>jq.py</strong>.</p>

<p>Přečtení vstupního souboru do řetězce (tedy do čistého textu), aplikace
dotazu na text a získání výsledku ve formě seznamu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>
&nbsp;
<strong>import</strong> jq
&nbsp;
<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = fin.read()
    print(jq.compile(".openapi").input(text=content).all())
</pre>

<p>Výsledek:</p>

<pre>
['3.0.0']
</pre>

<p>Přečtení vstupního souboru do objektu JSON, aplikace dotazu na JSON a
získání výsledku ve formě seznamu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>
&nbsp;
<strong>import</strong> jq
<strong>import</strong> json
&nbsp;
<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    print(jq.compile(".openapi").input(content).all())
</pre>

<p>Výsledek:</p>

<pre>
['3.0.0']
</pre>

<p>Dtto, ale tentokrát získáme výsledek ve formě čistého textu a nikoli
seznamu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>
&nbsp;
<strong>import</strong> jq
&nbsp;
<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = fin.read()
    print(jq.compile(".openapi").input(text=content).text())
</pre>

<p>Výsledek:</p>

<pre>
"3.0.0"
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>
&nbsp;
<strong>import</strong> jq
<strong>import</strong> json
&nbsp;
<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    print(jq.compile(".openapi").input(content).text())
</pre>

<p>Výsledek:</p>

<pre>
"3.0.0"
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>
&nbsp;
<strong>import</strong> jq
&nbsp;
<strong>with</strong> open("broken.json") <strong>as</strong> fin:
    content = fin.read()
    print(jq.compile(".openapi").input(text=content).all())
</pre>

<pre>
$ <strong>./04_no_error_handling.py</strong>
&nbsp;
Traceback (most recent call last):
  File "./04_no_error_handling.py", line 11, in <module>
    print(jq.compile(".openapi").input(text=content).all())
  File "jq.pyx", line 211, in jq._Program<strong>with</strong>Input.all
  File "jq.pyx", line 242, in jq._ResultIterator.__next__
  File "jq.pyx", line 248, in jq._ResultIterator._next_string
  File "jq.pyx", line 275, in jq._ResultIterator._ready_next_input
ValueError: parse error: Expected separator between values at line 11, column 15
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>
&nbsp;
<strong>import</strong> jq
&nbsp;
<strong>with</strong> open("broken.json") <strong>as</strong> fin:
    content = fin.read()
    try:
        print(jq.compile(".openapi").input(text=content).all())
    except Exception <strong>as</strong> e:
        print(e)
</pre>

<pre>
$ <strong>./05_error_handling.py</strong>
&nbsp;
parse error: Expected separator between values at line 11, column 15
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>
&nbsp;
<strong>import</strong> jq
<strong>import</strong> json
&nbsp;
<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    print(jq.compile(".openapi").input(content).first())
    print(jq.compile(".info.description").input(content).first())
    print(jq.compile(".tags").input(content).first())
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>
&nbsp;
<strong>import</strong> jq
<strong>import</strong> json
&nbsp;
<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    print(jq.compile(".non_existing_key").input(content).first())
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>
&nbsp;
<strong>import</strong> jq
<strong>import</strong> json
&nbsp;
<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    print("-----------------------------")
    print(jq.compile('.paths."/"').input(content).first())
    print("-----------------------------")
    print(jq.compile('".paths./"').input(content).first())
    print("-----------------------------")
    print(jq.compile('.paths./').input(content).first())
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>

<strong>import</strong> jq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    print(jq.compile(".info.license.name").input(content).first())
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>

<strong>import</strong> jq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    summaries = jq.compile(".paths[] | .get.summary").input(content).all()
    for summary in summaries:
        print(summary)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>

<strong>import</strong> jq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    summaries = jq.compile(".paths[] | .delete.summary").input(content).all()
    for summary in summaries:
        print(summary)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>

<strong>import</strong> jq
<strong>import</strong> json
from pprint <strong>import</strong> pprint

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    search = jq.compile(".paths.\"/client/cluster/search\"").input(content).first()
    pprint(search)

    print("----------------------------------------------------------------------------")

    search = jq.compile('.paths."/client/cluster/search"').input(content).first()
    pprint(search)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>

<strong>import</strong> jq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)

    for endpoint in jq.compile('.paths[]').input(content).all():
        print(",".join(endpoint.keys()))

    print("-------------------------")

    for has_get in jq.compile('.paths[] | has("get")').input(content).all():
        print(has_get)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>

<strong>import</strong> jq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)

    for endpoint in jq.compile('.paths[]').input(content).all():
        print(",".join(endpoint.keys()))

    print("-------------------------")

    for has_delete in jq.compile('.paths[] | has("delete")').input(content).all():
        print(has_delete)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou jq.py</i>

<strong>import</strong> jq
<strong>import</strong> json
from pprint <strong>import</strong> pprint

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)

    for parameters in jq.compile('.paths."/client/cluster/search".get.parameters').input(content).all():
        pprint(parameters)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
$ <strong>pip3 install --user pyjq</strong>
&nbsp;
Collecting pyjq
  Downloading https://files.pythonhosted.org/packages/a5/7c/b7fdc7b9653d5f05552cb08b6e9883db13db21ca0c8b0cd100e5a5ed3a35/pyjq-2.4.0.tar.gz (2.0MB)
    100% |████████████████████████████████| 2.0MB 723kB/s 
Installing collected packages: pyjq
  Running setup.py install for pyjq ... done
Successfully installed pyjq-2.4.0
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou pyjq</i>

<strong>import</strong> pyjq

help(pyjq)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou pyjq</i>

<strong>import</strong> pyjq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    print(pyjq.compile(".openapi").all(content))
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou pyjq</i>

<strong>import</strong> pyjq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    print(pyjq.compile(".openapi").first(content))
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou pyjq</i>

<strong>import</strong> pyjq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    print(pyjq.compile(".foobar").first(content))
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou pyjq</i>

<strong>import</strong> pyjq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    print(pyjq.compile(".foobar").all(content))
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou pyjq</i>

<strong>import</strong> pyjq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    print("-----------------------------")
    print(pyjq.compile('.paths."/"').first(content))
    print("-----------------------------")
    print(pyjq.compile('".paths./"').first(content))
    print("-----------------------------")
    print(pyjq.compile('.paths./').first(content))
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou pyjq</i>

<strong>import</strong> pyjq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    print(pyjq.compile(".info.license.name").first(content))
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou pyjq</i>

<strong>import</strong> pyjq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    summaries = pyjq.compile(".paths[] | .get.summary").all(content)
    for summary in summaries:
        print(summary)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou pyjq</i>

<strong>import</strong> pyjq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    summaries = pyjq.compile(".paths[] | .delete.summary").all(content)
    for summary in summaries:
        print(summary)
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou pyjq</i>

<strong>import</strong> pyjq
<strong>import</strong> json
from pprint <strong>import</strong> pprint

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)
    search = pyjq.compile(".paths.\"/client/cluster/search\"").first(content)
    pprint(search)

    print("----------------------------------------------------------------------------")

    search = pyjq.compile('.paths."/client/cluster/search"').first(content)
    pprint(search)
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou pyjq</i>

<strong>import</strong> pyjq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)

    for endpoint in pyjq.compile('.paths[]').all(content):
        print(",".join(endpoint.keys()))

    print("-------------------------")

    for has_get in pyjq.compile('.paths[] | has("get")').all(content):
        print(has_get)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou pyjq</i>

<strong>import</strong> pyjq
<strong>import</strong> json

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)

    for endpoint in pyjq.compile('.paths[]').all(content):
        print(",".join(endpoint.keys()))

    print("-------------------------")

    for has_delete in pyjq.compile('.paths[] | has("delete")').all(content):
        print(has_delete)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou pyjq</i>

<strong>import</strong> pyjq
<strong>import</strong> json
from pprint <strong>import</strong> pprint

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = json.load(fin)

    for parameters in pyjq.compile('.paths."/client/cluster/search".get.parameters').all(content):
        pprint(parameters)
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

<i>#  Demonstrační příklad k článku:</i>
<i>#      Zpracování dat uložených ve formátu JSON knihovnou pyjq</i>

<strong>import</strong> pyjq

<strong>with</strong> open("openapi.json") <strong>as</strong> fin:
    content = fin.read()
    print(pyjq.compile(".openapi").all(content))
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes použitých demonstračních příkladů byly uloženy do
nového Git repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem &ndash;
alespoň prozatím &ndash; velmi malý, dnes má přibližně několik jednotek
kilobajtů), můžete namísto toho použít odkazy na jednotlivé demonstrační
příklady a jejich části, které naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_basic_installation_check.py</td><td>základní test, zda byl balíček <strong>jq.py</strong> nainstalován</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/01_basic_installation_check.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/01_basic_installation_check.py</a></td></tr>
<tr><td> 2</td><td>02_process_as_text.py</td><td>zpracování vstupních dat reprezentovaných řetězcem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/02_process_as_text.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/02_process_as_text.py</a></td></tr>
<tr><td> 3</td><td>02_process_as_text_to_text.py</td><td>zpracování vstupních dat reprezentovaných řetězcem, výsledkem je text</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/02_process_as_text_to_text.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/02_process_as_text_to_text.py</a></td></tr>
<tr><td> 4</td><td>03_process_as_json.py</td><td>zpracování již deserializovaných vstupních dat</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/03_process_as_json.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/03_process_as_json.py</a></td></tr>
<tr><td> 5</td><td>03_process_as_json_to_text.py</td><td>zpracování již deserializovaných vstupních dat</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/03_process_as_json_to_text.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/03_process_as_json_to_text.py</a></td></tr>
<tr><td> 6</td><td>04_no_error_handling.py</td><td>chování při výskytu chyby ve vstupních datech</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/04_no_error_handling.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/04_no_error_handling.py</a></td></tr>
<tr><td> 7</td><td>05_error_handling.py</td><td>reakce na chyby</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/05_error_handling.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/05_error_handling.py</a></td></tr>
<tr><td> 8</td><td>06_first_value.py</td><td>získání pouze prvního výsledku dotazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/06_first_value.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/06_first_value.py</a></td></tr>
<tr><td> 9</td><td>07_non_existing_key.py</td><td>chování v&nbsp;případě, že dotaz nenalezl žádnou hodnotu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/07_non_existing_key.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/07_non_existing_key.py</a></td></tr>
<tr><td>10</td><td>08_escape_characters.py</td><td>problematika speciálních znaků v&nbsp;DSL nástroje <strong>jq</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/08_escape_characters.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/08_escape_characters.py</a></td></tr>
<tr><td>11</td><td>09_get_license.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/09_get_license.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/09_get_license.py</a></td></tr>
<tr><td>12</td><td>10_summary_for_all_endpoints_get.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/10_summary_for_all_endpoints_get.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/10_summary_for_all_endpoints_get.py</a></td></tr>
<tr><td>13</td><td>11_summary_for_all_endpoints_delete.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/11_summary_for_all_endpoints_delete.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/11_summary_for_all_endpoints_delete.py</a></td></tr>
<tr><td>14</td><td>12_search_endpoint.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/12_search_endpoint.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/12_search_endpoint.py</a></td></tr>
<tr><td>15</td><td>13_has_get_method.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/13_has_get_method.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/13_has_get_method.py</a></td></tr>
<tr><td>16</td><td>14_has_delete_method.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/14_has_delete_method.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/14_has_delete_method.py</a></td></tr>
<tr><td>17</td><td>15_get_parameters.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/15_get_parameters.py">https://github.com/tisnik/most-popular-python-libs/blob/master/jq.py/15_get_parameters.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>01_basic_installation_check.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/01_basic_installation_check.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/01_basic_installation_check.py</a></td></tr>
<tr><td>19</td><td>02_process_as_json.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/02_process_as_json.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/02_process_as_json.py</a></td></tr>
<tr><td>20</td><td>03_first_value.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/03_first_value.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/03_first_value.py</a></td></tr>
<tr><td>21</td><td>04_non_existing_key.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/04_non_existing_key.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/04_non_existing_key.py</a></td></tr>
<tr><td>22</td><td>05_non_existing_key.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/05_non_existing_key.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/05_non_existing_key.py</a></td></tr>
<tr><td>23</td><td>06_escape_characters.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/06_escape_characters.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/06_escape_characters.py</a></td></tr>
<tr><td>24</td><td>07_get_license.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/07_get_license.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/07_get_license.py</a></td></tr>
<tr><td>25</td><td>08_summary_for_all_endpoints_get.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/08_summary_for_all_endpoints_get.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/08_summary_for_all_endpoints_get.py</a></td></tr>
<tr><td>26</td><td>09_summary_for_all_endpoints_delete.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/09_summary_for_all_endpoints_delete.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/09_summary_for_all_endpoints_delete.py</a></td></tr>
<tr><td>27</td><td>10_search_endpoint.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/10_search_endpoint.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/10_search_endpoint.py</a></td></tr>
<tr><td>28</td><td>11_has_get_method.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/11_has_get_method.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/11_has_get_method.py</a></td></tr>
<tr><td>29</td><td>12_has_delete_method.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/12_has_delete_method.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/12_has_delete_method.py</a></td></tr>
<tr><td>30</td><td>13_get_parameters.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/13_get_parameters.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/13_get_parameters.py</a></td></tr>
<tr><td>31</td><td>14_no_text_processing.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/14_no_text_processing.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyjq/14_no_text_processing.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Zpracování dat reprezentovaných ve formátu JSON nástrojem jq<br />
<a href="https://www.root.cz/clanky/zpracovani-dat-reprezentovanych-ve-formatu-json-nastrojem-jq/">https://www.root.cz/clanky/zpracovani-dat-reprezentovanych-ve-formatu-json-nastrojem-jq/</a>
</li>

<li>Balíček jq.py na PyPi<br />
<a href="https://pypi.org/project/jq/">https://pypi.org/project/jq/</a>
</li>

<li>Balíček pyjq na PyPi<br />
<a href="https://pypi.org/project/pyjq/">https://pypi.org/project/pyjq/</a>
</li>

<li>Repositář projektu jq (GitHub)<br />
<a href="https://github.com/stedolan/jq">https://github.com/stedolan/jq</a>
</li>

<li>GitHub stránky projektu jq<br />
<a href="https://stedolan.github.io/jq/">https://stedolan.github.io/jq/</a>
</li>

<li>5 modern alternatives to essential Linux command-line tools<br />
<a href="https://opensource.com/article/20/6/modern-linux-command-line-tools">https://opensource.com/article/20/6/modern-linux-command-line-tools</a>
</li>

<li>Návod k&nbsp;nástroji jq<br />
<a href="https://stedolan.github.io/jq/tutorial/">https://stedolan.github.io/jq/tutorial/</a>
</li>

<li>jq Manual (development version)<br />
<a href="https://stedolan.github.io/jq/manual/">https://stedolan.github.io/jq/manual/</a>
</li>

<li>Introducing JSON<br />
<a href="https://www.json.org/json-en.html">https://www.json.org/json-en.html</a>
</li>

<li>jq.py: a lightweight and flexible JSON processor<br />
<a href="https://github.com/mwilliamson/jq.py">https://github.com/mwilliamson/jq.py</a>
</li>

<li>Discover how to use jq, a JSON manipulation command line, with GeoJSON<br />
<a href="https://webgeodatavore.com/jq-json-manipulation-command-line-with-geojson.html">https://webgeodatavore.com/jq-json-manipulation-command-line-with-geojson.html</a>
</li>

<li>Reshaping JSON with jq<br />
<a href="https://programminghistorian.org/en/lessons/json-and-jq">https://programminghistorian.org/en/lessons/json-and-jq</a>
</li>

<li>Python bindings for jq<br />
<a href="https://pypi.org/project/jq/">https://pypi.org/project/jq/</a>
</li>

<li>edn<br />
<a href="https://github.com/edn-format/edn">https://github.com/edn-format/edn</a>
</li>

<li>Why use JSON over XML?<br />
<a href="https://www.sitepoint.com/json-vs-xml/">https://www.sitepoint.com/json-vs-xml/</a>
</li>

<li>XML and XPath<br />
<a href="https://www.w3schools.com/XML/xml_xpath.asp">https://www.w3schools.com/XML/xml_xpath.asp</a>
</li>

<li>XPath (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/XPath">https://en.wikipedia.org/wiki/XPath</a>
</li>

<li>RFC7159<br />
<a href="https://www.ietf.org/rfc/rfc7159.txt">https://www.ietf.org/rfc/rfc7159.txt</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

