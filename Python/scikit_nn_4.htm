<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Volba aktivačních funkcí a algoritmů pro trénink neuronových sítí v knihovně scikit-learning</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Volba aktivačních funkcí a algoritmů pro trénink neuronových sítí v knihovně scikit-learning</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V předposledním článku o knihovně scikit-learn si popíšeme aktivační funkce, které lze vybrat při konstrukci neuronových sítí. Taktéž se zmíníme o možnosti výběru algoritmů použitých při tréningu neuronových sítí a jejich vlivu na kvalitu výsledků.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Role aktivačních funkcí v&nbsp;neuronových sítích</a></p>
<p><a href="#k02">2. Aktivační funkce používané v&nbsp;oblasti strojového učení</a></p>
<p><a href="#k03">3. Aktivační funkce, které nejsou diferencovatelné</a></p>
<p><a href="#k04">4. Diferencovatelné aktivační funkce</a></p>
<p><a href="#k05">5. Rozdíly mezi funkcemi Tanh, Sigmoid a SoftSign</a></p>
<p><a href="#k06">6. Aktivační funkce v&nbsp;knihovně <i>scikit-learn</i></a></p>
<p><a href="#k07">7. Skript pro zobrazení průběhů aktivačních funkcí</a></p>
<p><a href="#k08">8. Specifikace typu aktivační funkce při konstrukci neuronové sítě</a></p>
<p><a href="#k09">9. Matice záměn a přesnosti modelů založených na neuronové síti s&nbsp;různými aktivačními funkcemi</a></p>
<p><a href="#k10">10. Jaké číslice <i>ne</i>byly rozpoznány jednotlivými neuronovými sítěmi?</a></p>
<p><a href="#k11">11. Porovnání přesností všech čtyř neuronových sítí</a></p>
<p><a href="#k12">12. Specifikace algoritmu pro trénink neuronové sítě</a></p>
<p><a href="#k13">13. Skript, který použije různé algoritmy pro trénink neuronové sítě</a></p>
<p><a href="#k14">14. Matice záměn a přesnosti modelů pro různé trénovací algoritmy</a></p>
<p><a href="#k15">15. Jaké číslice <i>ne</i>byly rozpoznány jednotlivými neuronovými sítěmi?</a></p>
<p><a href="#k16">16. Kombinace nejlepší aktivační funkce a nejlepšího algoritmu = nejlepší výsledky?</a></p>
<p><a href="#k17">17. Dosažené výsledky</a></p>
<p><a href="#k18">18. Obsah navazujícího článku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Role aktivačních funkcí v&nbsp;neuronových sítích</h2>

<p>Připomeňme si nejprve, jak vlastně vypadá idealizovaný model neuronu, který
je většinou v&nbsp;umělých neuronových sítích používán. Tento model si můžeme
vizualizovat následovně:</p>

<img src="https://i.iinfo.cz/images/329/torch-nn1-1.png" class="image-312261" alt="&#160;" width="459" height="140" />
<p><i>Obrázek 1: Idealizovaný model neuronu.</i></p>

<p>Neuron tedy provádí tento výpočet:</p>

<p>
y = f(w<sub>1</sub>x<sub>1</sub> + w<sub>2</sub>x<sub>2</sub> + ... + w<sub>n</sub>x<sub>n</sub>)
</p>

<p>Ve skutečnosti není stav neuronu pro <i>n</i> vstupů
<strong>x<sub>1</sub></strong> až <strong>x<sub>n</sub></strong> určen pouze
<i>n</i> vahami <strong>w<sub>1</sub></strong> až
<strong>w<sub>n</sub></strong>. Musíme přidat ještě váhu
<strong>w<sub>0</sub></strong>, na kterou je připojena konstanta 1 (někdy se
proto můžeme setkat s&nbsp;nákresem neuronové sítě, v&nbsp;níž se nachází
speciální neurony bez vstupů a s&nbsp;jedničkou na výstupu). Model neuronu se
přidáním nového vstupu nepatrně zkomplikuje:</p>

<img src="https://i.iinfo.cz/images/329/torch-nn1-2.png" class="image-312262" alt="&#160;" width="465" height="145" />
<p><i>Obrázek 2: Idealizovaný model neuronu s&nbsp;biasem.</i></p>

<p>Důležitá je však aktivační funkce, která zajistí, že výstup neuronu nebude
pouhým součtem váhovaných vstupů, ale do celého výpočtu se navíc přidá vhodně
zvolená nelinearita. Nejjednodušší aktivační funkce může pro vstupní hodnoty
&lt;0 vracet -1 a pro hodnoty &ge;0 vracet 1, což vlastně říká, že je nutné
dosáhnout určité hraniční hodnoty váženého součtu vstupů, aby byl neuron
aktivován (tj.&nbsp;na výstup vyslal jedničku a nikoli -1). Ostatně právě zde
znovu vidíme význam biasu, který onu hraniční hodnotu posunuje. Ovšem
v&nbsp;praxi se setkáme i s&nbsp;dalšími typy aktivačních funkcí.</p>

<p><div class="rs-tip-major">Poznámka: neuronová síť se &bdquo;učí&ldquo;
takovým způsobem, že si postupně mění váhy na vstupu neuronů. To jsou jediné
informace určující stavový prostor neuronové sítě. Naproti tomu aktivační
funkce je zvolena globálně pro celou síť nebo (méně často) pro jednotlivé
vrstvy sítě.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Aktivační funkce používané v&nbsp;oblasti strojového učení</h2>

<p>Prozatím jsme v&nbsp;našich testovacích neuronových sítích používali pouze
jeden výchozí typ <i>aktivační funkce</i>. Jednalo se konkrétně o funkci
nazývanou <i>ReLU</i> neboli celým jménem <i>REctified Linear Unit</i>, která
se v&nbsp;této oblasti používá již velmi dlouho. Mezi velké výhody této funkce
patří velmi rychlý výpočet, což se pozitivně projeví v&nbsp;rozsáhlých
neuronových sítích (rozpoznávání obrazu atd.), mezi určité nevýhody pak to, že
není v&nbsp;celém svém oboru diferencovatelná. Ovšem k&nbsp;dispozici máme i
mnoho dalších aktivačních funkcí, z&nbsp;nichž některé (konkrétně ty
podporované knihovnou <i>scikit-learn</i>) budou popsány v&nbsp;navazujícím
textu.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Aktivační funkce, které nejsou diferencovatelné</h2>

<p>Nejprve si ve stručnosti popíšeme ty aktivační funkce, které nejsou
diferencovatelné v&nbsp;celém svém rozsahu platnosti. Tyto funkce většinou
obsahují buď jedno &bdquo;koleno&ldquo; nebo dokonce jeden či dva skoky, což
v&nbsp;praxi znamená, že se výstupní hodnota z&nbsp;neuronu může prudce změnit,
a to i pro malé rozdíly na vstupu. V&nbsp;některých případech může být tato
vlastnost neuronů užitečná, ovšem o to víc je chování sítě závislé na jejím
správném natrénování. Mezi tyto funkce patří především:</p>

<table>
<tr><th>Jméno funkce</th><th>Hodnoty</th><th>Základní vlastnosti</th></tr>
<tr><td>ReLU</td><td>f(x)=0 pro x&le;0, f(x)=x pro x&gt;0</td><td>má jedno koleno při vstupu 0, velmi často používaná v&nbsp;praxi</td></tr>
<tr><td>ReLU6</td><td>f(x)=0 pro x&le;0, f(x)=x pro 0&lt;x&lt;6, f(x)=6 pro x&ge;6</td><td>má dvě kolena při vstupech 0 a 6, opět velmi často používaná v&nbsp;praxi</td></tr>
<tr><td>HardTanh</td><td>f(x)=-1 pro x&lt; -1, f(x)=1 pro x&gt;1, jinak f(x)=x</td><td>funkce s&nbsp;lineárním průběhem pro -1&le;x&le;1, má dvě kolena</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>ELU</td><td>f(x) = max(0, x) + min(0, &alpha; * (e<sup>x</sup> - 1))</td><td>pro některé hodnoty <i>&alpha;</i> je diferencovatelná</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>SoftShrink</td><td>f(x)=x-&lambda; pro x&gt;&lambda;, f(x)=x+&lambda; pro x&lt; -&lambda;, jinak f(x)=0</td><td>funkce s&nbsp;lineárním průběhem pro x&gt;&lambda; a x&lt; -&lambda;, dvě kolena na hodnotách -&lambda; a &lambda;</td></tr>
<tr><td>HardShrink</td><td>f(x)=x pro x&lt; -&lambda; a x&gt;&lambda;, jinak f(x)=0</td><td>funkce s&nbsp;lineárním průběhem a dvěma skoky na hodnotách -&lambda; a &lambda;</td></tr>
<tr><td>PReLU</td><td colspan="2">podobné funkci ReLU, ale má volitelný sklon pro záporné hodnoty x</td></tr>
<tr><td>RReLU</td><td colspan="2">podobné předchozí funkce, ale pro záporné hodnoty x je vstup náhodně posunut (jen v&nbsp;režimu tréninku)</td></tr>
<tr><td>AddConstant</td><td>f(x)=x+k</td><td>používá se například při ladění, k je skalární a neměnná hodnota</td></tr>
<tr><td>MulConstant</td><td>f(x)=x*k</td><td>používá se například při ladění, k je skalární a neměnná hodnota</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: diferencovatelnost je poměrně důležitá
vlastnost, která se mj.&nbsp;projeví i při tréninku umělé neuronové
sítě.</div></p>

<a href="https://www.root.cz/obrazek/312834/"><img src="https://i.iinfo.cz/images/209/torch-nn2-a-1-prev.png" class="image-312834" alt="&#160;" height="270" width="360" /></a>
<p><i>Obrázek 3: Průběh funkcí ReLU, ReLU6, HardTanh, SoftShrink i
HardShrink.</i></p>

<a href="https://www.root.cz/obrazek/312835/"><img src="https://i.iinfo.cz/images/209/torch-nn2-a-2-prev.png" class="image-312835" alt="&#160;" height="270" width="360" /></a>
<p><i>Obrázek 4: Průběh funkcí ReLU, ReLU6, HardTanh, SoftShrink i HardShrink,
zvětšení na okolí počátku souřadného systému.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Diferencovatelné aktivační funkce</h2>

<p>Další funkce, které jsou v&nbsp;oblasti strojového učení často používány,
jsou již diferencovatelné. Nejčastěji se v&nbsp;praxi setkáme s&nbsp;prvními
dvěma funkcemi, tedy konkrétně s&nbsp;funkcí <i>Sigmoid</i> a <i>Tanh</i>:</p>

<table>
<tr><th>Jméno funkce</th><th>Způsob výpočtu</th></tr>
<tr><td>Sigmoid</td><td>f(x) = 1 / (1 + e<sup>-x</sup>) = e<sup>x</sup> / (e<sup>x</sup>+1)</td></tr>
<tr><td>Tanh</td><td>f(x) = (e<sup>x</sup> - e<sup>-x</sup>) / (e<sup>x</sup> + e<sup>-x</sup>)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>SoftMax</td><td>provede normalizaci vstupního tenzoru, provede výpočet f<sub>i</sub>(x) = e<sup>x<sub>i</sub> - max<sub>i</sub>(x<sub>i</sub>)</sup> / sum<sub>j</sub> exp<sup>x<sub>j</sub> - max_i(x<sub>i</sub>)</sup></td></tr>
<tr><td>SoftMin</td><td>dtto, ale vypočte f<sub>i</sub>(x) = e<sup>-x<sub>i</sub> - max<sub>i</sub>(-x<sub>i</sub>)</sup> / sum<sub>j</sub> e<sup>-x<sub>j</sub> - max<sub>i</sub>(-x<sub>i</sub>)</sup></td></tr>
<tr><td>SoftPlus</td><td>f<sub>i</sub>(x) = 1/beta * log(1 + e<sup>beta * x<sub>i</sub></sup>)</td></tr>
<tr><td>SoftSign</td><td>f<sub>i</sub>(x) = x<sub>i</sub> / (1+|x<sub>i</sub>|)</td></tr>
</table>

<a href="https://www.root.cz/obrazek/312836/"><img src="https://i.iinfo.cz/images/209/torch-nn2-a-3-prev.png" class="image-312836" alt="&#160;" height="270" width="360" /></a>
<p><i>Obrázek 5: Průběh funkce SoftPlus.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Rozdíly mezi funkcemi Tanh, Sigmoid a SoftSign</h2>

<p>Funkce <i>Tanh</i>, <i>Sigmoid</i> a <i>SoftSign</i> sice mají podobný tvar
křivky, ovšem jejich skutečný průběh je ve skutečnosti odlišný. O tom se můžeme
velmi snadno přesvědčit, když si všechny funkce necháme vykreslit do jednoho
grafu a budeme měnit rozsah hodnot na x-ové ose:</p>

<a href="https://www.root.cz/obrazek/312744/"><img src="https://i.iinfo.cz/images/425/torch-nn2-27-prev.png" class="image-312744" alt="&#160;" height="270" width="360" /></a>
<p><i>Obrázek 6: Průběh funkcí Tanh, Sigmoid a SoftSign pro rozsah vstupních
hodnot &lt; -5, 5&gt;.</i></p>

<p>Vidíme, že se kromě tvaru průběhů funkce liší i obor hodnot.</p>

<a href="https://www.root.cz/obrazek/312745/"><img src="https://i.iinfo.cz/images/425/torch-nn2-28-prev.png" class="image-312745" alt="&#160;" height="270" width="360" /></a>
<p><i>Obrázek 7: Průběh funkcí Tanh, Sigmoid a SoftSign pro rozsah vstupních
hodnot &lt; -10, 10&gt;.</i></p>

<a href="https://www.root.cz/obrazek/312746/"><img src="https://i.iinfo.cz/images/425/torch-nn2-29-prev.png" class="image-312746" alt="&#160;" height="270" width="360" /></a>
<p><i>Obrázek 8: Průběh funkcí Tanh, Sigmoid a SoftSign pro rozsah vstupních
hodnot &lt; -20, 20&gt;.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Aktivační funkce v&nbsp;knihovně <i>scikit-learn</i></h2>

<p>Připomeňme si, že v&nbsp;knihovně <i>scikit-learn</i> se s&nbsp;neuronovými
sítěmi pracuje stejně jako s&nbsp;ostatními modely; pouze se liší atributy
těchto modelů, jejich hyperparametry a tím pádem i jejich konstruktory.
K&nbsp;dispozici máme dva typy modelů/neuronových sítí, které jsou realizovány
třídami nazvanými <strong>MLPClassifier</strong> (model pro klasifikaci) a
<strong>MLPRegressor</strong> (model pro regresi). Při konstrukci instance
těchto tříd, tj.&nbsp;při inicializaci modelů, můžeme oběma konstruktorům
předat i nepovinný parametr <strong>activation</strong>, který může nabývat
hodnot "identity", "logistic", "tanh" nebo "relu". První hodnota (jde o
řetězec!) představuje lineární funkci y=x, hodnota "logistic" odpovídá
<i>sigmoidu</i> (viz předchozí text) a další dvě možné hodnoty již zajisté
rozpoznáte sami.</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Skript pro zobrazení průběhů aktivačních funkcí</h2>

<p>Pro zobrazení průběhu aktivačních funkcí poněkud předběhneme obsah tohoto
seriálu, protože využijeme framework <i>Torch</i>, který umožňuje výpočet
hodnot těchto funkcí. Výsledek si pak můžeme nechat zobrazit pomocí
Matplotlibu, což již dobře známe:</p>

<pre>
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
&nbsp;
<i># hodnoty na x-ové ose</i>
x = torch.linspace(-4, 4, 200)
&nbsp;
<i># výpočet hodnot aktivačních funkcí</i>
relu = nn.ReLU()(x)
tanh = nn.Tanh()(x)
sigmoid = nn.Sigmoid()(x)
&nbsp;
<i># nový graf s průběhem tří aktivačních funkcí</i>
plt.plot(x, sigmoid, label="sigmoid")
plt.plot(x, tanh, label="tanh")
plt.plot(x, relu, label="ReLU")
plt.ylim(-1.5, 2)
&nbsp;
<i># zobrazení legendy</i>
plt.legend()
&nbsp;
<i># uložení do souboru</i>
plt.savefig("activation_functions.png")
&nbsp;
<i># zobrazení v novém okně</i>
plt.show()
</pre>

<img src="https://i.iinfo.cz/images/496/scikit-learn-6-1-1.webp" class="image-1144231" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 9: Průběh aktivačních funkcí, které využijeme v&nbsp;dalších demonstračních příkladech.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Specifikace typu aktivační funkce při konstrukci neuronové sítě</h2>

<p>Jak jsme si již řekli v&nbsp;předchozím textu, knihovna <i>scikit-learn</i>
nám umožňuje specifikovat čtyři typy aktivačních funkcí při konstrukci modelů
<strong>MLPRegressor</strong> i <strong>MLPClassifier</strong>. Pokusme se nyní
zjistit, jak (a zda vůbec) má volba aktivační funkce vliv na kvalitu předpovědí
modelu natrénovaného pro rozpoznání číslic. Připravíme si tedy n-tici
s&nbsp;názvy všech použitelných aktivačních funkcí:</p>

<pre>
activation_functions = ("identity", "logistic", "tanh", "relu")
</pre>

<p>Následně si pro každou s&nbsp;funkcí necháme vytvořit novou neuronovou síť,
tu natrénujeme, zvalidujeme a necháme si odvodit matici záměn, přesnost modelu
atd. Stále budeme používat stejná data, konkrétně datovou sadu s&nbsp;ručně
nakreslenými číslicemi:</p>

<pre>
for activation_function in activation_functions:
    score = train_and_test_model(activation_function)
    scores.append(score)
</pre>

<p>Celý skript, který tuto operaci provede, bude vypadat následovně:</p>

<pre>
<i># Rozpoznání obrazu s využitím knihovny scikit-learn</i>
&nbsp;
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.metrics import ConfusionMatrixDisplay
&nbsp;
<i># Databáze ručně zapsaných číslic</i>
from sklearn.datasets import load_digits
&nbsp;
<i># načtení obrázků, s nimiž budeme dále pracovat</i>
digits = load_digits()
&nbsp;
<i># zjištění základních informací o obrázcích</i>
print("Description:", digits.DESCR)
&nbsp;
print("Data:", digits.data.shape)
print("Obrázky:", digits.images.shape)
&nbsp;
<i># X je matice (feature matrix)</i>
X = digits.data
&nbsp;
<i># y je vektor (response vector)</i>
y = digits.target
&nbsp;
for_training = len(y) * 8 // 10
print("Vzorků pro trénink:", for_training)
print("\n\n")
&nbsp;
<i># rozdělení dat</i>
trainX = X[:for_training]
testX = X[for_training:]
trainY = y[:for_training]
testY = y[for_training:]
&nbsp;
&nbsp;
def <strong>train_and_test_model</strong>(activation_function: str, show_results: bool = False):
    print(f"Neural network with activation function '{activation_function}'")
&nbsp;
    <i># provést klasifikaci</i>
    <i># konstrukce klasifikatoru</i>
    <i># (s hyperparametrem)</i>
    classifier = MLPClassifier(max_iter=5000, activation=activation_function)
&nbsp;
    <i># vypocet skore</i>
    scores = cross_val_score(classifier, X, y, cv=10, scoring="accuracy")
&nbsp;
    avg_score = scores.mean()
&nbsp;
    <i># vypsani prumerneho skore</i>
    print("Accuracy:", avg_score)
    print()
&nbsp;
    <i># trening modelu</i>
    classifier.fit(trainX, trainY)
&nbsp;
    class_names = digits.target_names
&nbsp;
    <i># absolutni hodnoty</i>
    disp = ConfusionMatrixDisplay.from_estimator(
        classifier,
        testX,
        testY,
        display_labels=class_names,
        cmap=plt.cm.Blues,
        normalize=None,
    )
&nbsp;
    <i># zobrazeni matice</i>
    print(disp.confusion_matrix)
    print()
&nbsp;
    <i># ulozeni vysledku</i>
    plt.savefig(f"{activation_function}_confusion_matrix_abs.png")
&nbsp;
    <i># vizualizace matice</i>
    if show_results:
        plt.show()
&nbsp;
    <i># relativni hodnoty</i>
    disp = ConfusionMatrixDisplay.from_estimator(
        classifier,
        testX,
        testY,
        display_labels=class_names,
        cmap=plt.cm.Blues,
        normalize="true",
    )
&nbsp;
    <i># zobrazeni matice</i>
    print(disp.confusion_matrix)
&nbsp;
    <i># ulozeni vysledku</i>
    plt.savefig(f"{activation_function}_confusion_matrix_rel.png")
&nbsp;
    <i># vizualizace matice</i>
    if show_results:
        plt.show()
&nbsp;
    predicted_labels = classifier.predict(testX)
    images = digits.images[for_training:]
&nbsp;
    fig = plt.figure(figsize=(6.4, 10.0))
&nbsp;
    <i># zobrazit patnáct výsledků</i>
    wrong = 0
    i = 0
    while wrong &lt; 30:
        predicted_digit = classifier.predict([testX[i]])[0]
        correct_digit = testY[i]
        if predicted_digit != correct_digit:
            image = images[i]
            wrong += 1
            plt.subplot(6, 5, wrong)
            plt.axis("off")
            # zobrazení obrázku
            plt.imshow(image, cmap=plt.cm.gray_r, interpolation="nearest")
            # a přidání predikce - o jakou číslici se jedná
            plt.title(f"{predicted_digit} &lt;&gt; {correct_digit}")
        i += 1
        <i># nenasli jsme vice cislic</i>
        if i &gt;= len(testX):
            break
&nbsp;
    <i># nakonec vše uložíme a zobrazíme</i>
    plt.savefig(f"{activation_function}_wrong_digits.png")
    if show_results:
        plt.show()
    print()
    print("-" * 70)
    return avg_score
&nbsp;
&nbsp;
activation_functions = ("identity", "logistic", "tanh", "relu")
&nbsp;
scores = []
&nbsp;
for activation_function in activation_functions:
    score = train_and_test_model(activation_function)
    scores.append(score)
&nbsp;
fig, ax = plt.subplots()
&nbsp;
ax.bar(activation_functions, scores)
&nbsp;
ax.set_ylabel("Model accuracy")
ax.set_title("Activation function")
&nbsp;
plt.savefig("accuracy.png")
plt.show()
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Matice záměn modelů založených na neuronové síti s&nbsp;různými aktivačními funkcemi</h2>

<p>Podívejme se nyní na vypočtené matice záměn pro modely založené na
neuronových sítích, u nichž byly použity odlišné aktivační funkce:</p>

<img src="https://i.iinfo.cz/images/496/scikit-learn-6-1-2.webp" class="image-1144234" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 10: Použita aktivační funkce &bdquo;identity&ldquo;, matice záměn s&nbsp;absolutními hodnotami.</i></p>

<img src="https://i.iinfo.cz/images/496/scikit-learn-6-1-3.webp" class="image-1144237" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 11: Použita aktivační funkce &bdquo;logistic&ldquo; (sigmoid), matice záměn s&nbsp;absolutními hodnotami.</i></p>

<img src="https://i.iinfo.cz/images/496/scikit-learn-6-1-4.webp" class="image-1144240" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 12: Použita aktivační funkce &bdquo;ReLU&ldquo;, matice záměn s&nbsp;absolutními hodnotami.</i></p>

<img src="https://i.iinfo.cz/images/496/scikit-learn-6-1-5.webp" class="image-1144243" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 13: Použita aktivační funkce &bdquo;TanH&ldquo;, matice záměn s&nbsp;absolutními hodnotami.</i></p>

<p>Stejné matice záměn, ovšem pro hodnoty relativní:</p>

<img src="https://i.iinfo.cz/images/496/scikit-learn-6-1-6.webp" class="image-1144246" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 14: Použita aktivační funkce &bdquo;identity&ldquo;, matice záměn s&nbsp;relativními hodnotami.</i></p>

<img src="https://i.iinfo.cz/images/496/scikit-learn-6-1-7.webp" class="image-1144249" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 15: Použita aktivační funkce &bdquo;logistic&ldquo;, matice záměn s&nbsp;relativními hodnotami.</i></p>

<img src="https://i.iinfo.cz/images/496/scikit-learn-6-1-8.webp" class="image-1144252" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 16: Použita aktivační funkce &bdquo;ReLU&ldquo;, matice záměn s&nbsp;relativními hodnotami.</i></p>

<img src="https://i.iinfo.cz/images/496/scikit-learn-6-1-9.webp" class="image-1144255" width="640" height="480" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 17: Použita aktivační funkce &bdquo;TanH&ldquo;, matice záměn s&nbsp;relativními hodnotami.</i></p>

<p><div class="rs-tip-major">Poznámka: žádné <i>podstatné</i> rozdíly mezi
jednotlivými sítěmi zde nejsou patrné. Síť je natolik velká a relativně dobře
natrénovaná, že vylepšení tímto způsobem nedosáhneme.</div></p>

<p>Výsledky v&nbsp;textové podobě:</p>

<pre>
Data: (1797, 64)
Obrázky: (1797, 8, 8)
Vzorků pro trénink: 1437
&nbsp;
&nbsp;
&nbsp;
Neural network with activation function 'identity'
Accuracy: 0.9276505276225947
&nbsp;
[[33  0  0  0  1  0  1  0  0  0]
 [ 0 30  0  1  0  0  0  0  0  5]
 [ 0  0 35  0  0  0  0  0  0  0]
 [ 0  0  0 26  0  1  0  2  8  0]
 [ 0  0  0  0 34  0  0  0  0  3]
 [ 0  1  0  0  0 36  0  0  0  0]
 [ 0  0  0  0  0  0 37  0  0  0]
 [ 0  1  0  0  1  0  0 32  1  1]
 [ 0  2  0  0  0  0  0  1 30  0]
 [ 0  2  0  0  0  0  0  1  1 33]]
&nbsp;
[[0.94285714 0.         0.         0.         0.02857143 0.
  0.02857143 0.         0.         0.        ]
 [0.         0.83333333 0.         0.02777778 0.         0.
  0.         0.         0.         0.13888889]
 [0.         0.         1.         0.         0.         0.
  0.         0.         0.         0.        ]
 [0.         0.         0.         0.7027027  0.         0.02702703
  0.         0.05405405 0.21621622 0.        ]
 [0.         0.         0.         0.         0.91891892 0.
  0.         0.         0.         0.08108108]
 [0.         0.02702703 0.         0.         0.         0.97297297
  0.         0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  1.         0.         0.         0.        ]
 [0.         0.02777778 0.         0.         0.02777778 0.
  0.         0.88888889 0.02777778 0.02777778]
 [0.         0.06060606 0.         0.         0.         0.
  0.         0.03030303 0.90909091 0.        ]
 [0.         0.05405405 0.         0.         0.         0.
  0.         0.02702703 0.02702703 0.89189189]]
&nbsp;
----------------------------------------------------------------------
Neural network with activation function 'logistic'
Accuracy: 0.9587895716945996
&nbsp;
[[33  0  0  0  1  0  1  0  0  0]
 [ 0 31  0  0  0  0  0  0  0  5]
 [ 0  0 35  0  0  0  0  0  0  0]
 [ 0  0  1 28  0  2  0  1  5  0]
 [ 0  0  0  0 34  0  0  0  0  3]
 [ 0  0  0  0  0 37  0  0  0  0]
 [ 0  1  0  0  0  0 36  0  0  0]
 [ 0  0  0  0  0  0  0 35  1  0]
 [ 0  2  0  1  0  0  0  0 30  0]
 [ 0  0  0  0  0  2  0  1  1 33]]
&nbsp;
[[0.94285714 0.         0.         0.         0.02857143 0.
  0.02857143 0.         0.         0.        ]
 [0.         0.86111111 0.         0.         0.         0.
  0.         0.         0.         0.13888889]
 [0.         0.         1.         0.         0.         0.
  0.         0.         0.         0.        ]
 [0.         0.         0.02702703 0.75675676 0.         0.05405405
  0.         0.02702703 0.13513514 0.        ]
 [0.         0.         0.         0.         0.91891892 0.
  0.         0.         0.         0.08108108]
 [0.         0.         0.         0.         0.         1.
  0.         0.         0.         0.        ]
 [0.         0.02702703 0.         0.         0.         0.
  0.97297297 0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.97222222 0.02777778 0.        ]
 [0.         0.06060606 0.         0.03030303 0.         0.
  0.         0.         0.90909091 0.        ]
 [0.         0.         0.         0.         0.         0.05405405
  0.         0.02702703 0.02702703 0.89189189]]
&nbsp;
----------------------------------------------------------------------
Neural network with activation function 'tanh'
Accuracy: 0.9510180012414648
&nbsp;
[[33  0  0  0  1  0  1  0  0  0]
 [ 0 32  0  0  0  0  0  0  0  4]
 [ 0  0 35  0  0  0  0  0  0  0]
 [ 0  0  2 27  0  2  0  2  4  0]
 [ 0  0  0  0 34  0  0  0  1  2]
 [ 0  0  0  0  0 37  0  0  0  0]
 [ 0  1  0  0  0  0 36  0  0  0]
 [ 0  0  0  0  0  0  0 35  1  0]
 [ 1  2  0  1  1  1  0  0 27  0]
 [ 0  0  0  0  0  1  0  2  1 33]]
&nbsp;
[[0.94285714 0.         0.         0.         0.02857143 0.
  0.02857143 0.         0.         0.        ]
 [0.         0.88888889 0.         0.         0.         0.
  0.         0.         0.         0.11111111]
 [0.         0.         1.         0.         0.         0.
  0.         0.         0.         0.        ]
 [0.         0.         0.05405405 0.72972973 0.         0.05405405
  0.         0.05405405 0.10810811 0.        ]
 [0.         0.         0.         0.         0.91891892 0.
  0.         0.         0.02702703 0.05405405]
 [0.         0.         0.         0.         0.         1.
  0.         0.         0.         0.        ]
 [0.         0.02702703 0.         0.         0.         0.
  0.97297297 0.         0.         0.        ]
 [0.         0.         0.         0.         0.         0.
  0.         0.97222222 0.02777778 0.        ]
 [0.03030303 0.06060606 0.         0.03030303 0.03030303 0.03030303
  0.         0.         0.81818182 0.        ]
 [0.         0.         0.         0.         0.         0.02702703
  0.         0.05405405 0.02702703 0.89189189]]
&nbsp;
----------------------------------------------------------------------
Neural network with activation function 'relu'
Accuracy: 0.9465704531346988
&nbsp;
[[33  0  0  0  1  0  1  0  0  0]
 [ 0 35  0  0  0  0  0  0  0  1]
 [ 0  0 34  1  0  0  0  0  0  0]
 [ 0  0  0 26  0  2  0  3  6  0]
 [ 0  0  0  0 34  0  0  0  1  2]
 [ 0  0  0  0  0 37  0  0  0  0]
 [ 0  1  0  0  0  0 36  0  0  0]
 [ 0  0  0  0  2  0  0 31  3  0]
 [ 0  5  0  0  0  0  0  0 28  0]
 [ 0  0  0  0  0  1  0  0  2 34]]
&nbsp;
[[0.94285714 0.         0.         0.         0.02857143 0.
  0.02857143 0.         0.         0.        ]
 [0.         0.97222222 0.         0.         0.         0.
  0.         0.         0.         0.02777778]
 [0.         0.         0.97142857 0.02857143 0.         0.
  0.         0.         0.         0.        ]
 [0.         0.         0.         0.7027027  0.         0.05405405
  0.         0.08108108 0.16216216 0.        ]
 [0.         0.         0.         0.         0.91891892 0.
  0.         0.         0.02702703 0.05405405]
 [0.         0.         0.         0.         0.         1.
  0.         0.         0.         0.        ]
 [0.         0.02702703 0.         0.         0.         0.
  0.97297297 0.         0.         0.        ]
 [0.         0.         0.         0.         0.05555556 0.
  0.         0.86111111 0.08333333 0.        ]
 [0.         0.15151515 0.         0.         0.         0.
  0.         0.         0.84848485 0.        ]
 [0.         0.         0.         0.         0.         0.02702703
  0.         0.         0.05405405 0.91891892]]
&nbsp;
----------------------------------------------------------------------
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Jaké číslice <i>ne</i>byly rozpoznány jednotlivými neuronovými sítěmi?</h2>

<p>I přesto, že matice záměn vypadaly pro neuronové sítě s&nbsp;různými
aktivačními funkcemi podobně, můžeme nalézt rozdíly v&nbsp;tom, které číslice
jednotlivé sítě <i>ne</i>rozeznávají správně. Podívejme se tedy na příklady.
Pro každý typ neuronové sítě (přesněji řečeno sítě používající odlišnou
aktivační funkci) se pokusíme zobrazit 30 špatně rozpoznaných číslic. Je zde
ovšem jedna výjimka &ndash; síť založená na logistické funkci (sigmoidu) je
natolik kvalitní, že <i>ne</i>rozeznala pouze 28 číslic z&nbsp;celkového počtu
360 neznámých obrázků, takže na grafu je zobrazeno jen oněch 28 špatně určených
číslic:</p>

<a href="https://www.root.cz/obrazek/1144258/"><img src="https://i.iinfo.cz/images/654/scikit-learn-6-2-1-prev.webp" class="image-1144258" width="173" height="270" data-prev-filename="https://i.iinfo.cz/images/654/scikit-learn-6-2-1-prev.webp" data-prev-width="173" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/654/scikit-learn-6-2-1-large.webp" data-large-width="336" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 18: Špatně rozeznané číslice pro neuronovou síť používající aktivační funkci &bdquo;identity&ldquo;.</i></p>

*** image ***
<p><i>Obrázek 19: Špatně rozeznané číslice pro neuronovou síť používající aktivační funkci &bdquo;logistic&ldquo; (sigmoid).</i></p>

*** image ***
<p><i>Obrázek 20: Špatně rozeznané číslice pro neuronovou síť používající aktivační funkci &bdquo;ReLU&ldquo;.</i></p>

*** image ***
<p><i>Obrázek 21: Špatně rozeznané číslice pro neuronovou síť používající aktivační funkci &bdquo;TanH&ldquo;.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Porovnání přesností všech čtyř neuronových sítí</h2>

<p>A nakonec si ukážeme graf s&nbsp;porovnáním celkové přesnosti všech čtyř
neuronových sítí. Jedná se o prakticky shodné hodnoty, což ostatně bylo patrné
i při prozkoumání a porovnání matic záměn:</p>

*** image ***
<p><i>Obrázek 22: Graf ukazující přesnosti všech čtyř neuronových sítí.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Specifikace algoritmu pro trénink neuronové sítě</h2>

<p>V&nbsp;knihovně <i>scikit-learn</i> můžeme kromě volby aktivační funkce
specifikovat i algoritmus použitý při tréninku. Ten mj.&nbsp;určuje způsob
aplikace zpětné vazby na základě odpovědi trénované sítě a správné odpovědi.
K&nbsp;dispozici máme tři algoritmy pojmenované &bdquo;adam&ldquo;,
&bdquo;lbfgs&ldquo; a &bdquo;sgd&ldquo;. Algoritmus &bdquo;sgd&ldquo; je
založen na metodě nazvané <i>stochastic gradient descent</i> a
&bdquo;adam&ldquo; je její optimalizovanou verzí. K&nbsp;popisu této metody se
ještě vrátíme v&nbsp;souvislosti s&nbsp;knihovnou <i>PyTorch</i>. A
&bdquo;lbfgs&ldquo; je odvozen z&nbsp;názvu <i>Limited-memory BFGS</i>, kde
<i>BFGS</i> značí <i>Broyden–Fletcher–Goldfarb–Shanno algorithm</i>. I
k&nbsp;popisu této metody se ještě vrátíme, ovšem nyní je pouze nutné vědět, že
si mezi třemi výše uvedenými algoritmy budeme moci vybrat a ovlivnit tak
vlastně kvalitu výsledné neuronové sítě, tj.&nbsp;schopnosti její predikce.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Skript, který použije různé algoritmy pro trénink neuronové sítě</h2>

<p>Výše uvedené trénovací algoritmy si pochopitelně opět můžeme zvolit, a to
předáním pojmenovaného parametru <strong>solver</strong> do konstruktoru
modelu, tedy konkrétně do konstruktorů <strong>MLPClassifier</strong> nebo
<strong>MLPRegressor</strong>. Opět si tedy můžeme vyzkoušet jak (a zda vůbec)
volba algoritmu ovlivní kvalitu natrénování a tím pádem i odhadu neuronové
sítě:</p>

<pre>
solvers = ("lbfgs", "sgd", "adam")
&nbsp;
scores = []
&nbsp;
for solver in solvers:
    score = train_and_test_model(solver)
    scores.append(score)
</pre>

<p>Celý skript, který toto srovnání provádí, vypadá následovně:</p>

<pre>
<i># Rozpoznání obrazu s využitím knihovny scikit-learn</i>
&nbsp;
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.metrics import ConfusionMatrixDisplay
&nbsp;
<i># Databáze ručně zapsaných číslic</i>
from sklearn.datasets import load_digits
&nbsp;
<i># načtení obrázků, s nimiž budeme dále pracovat</i>
digits = load_digits()
&nbsp;
<i># zjištění základních informací o obrázcích</i>
print("Description:", digits.DESCR)
&nbsp;
print("Data:", digits.data.shape)
print("Obrázky:", digits.images.shape)
&nbsp;
<i># X je matice (feature matrix)</i>
X = digits.data
&nbsp;
<i># y je vektor (response vector)</i>
y = digits.target
&nbsp;
for_training = len(y) * 8 // 10
print("Vzorků pro trénink:", for_training)
print("\n\n")
&nbsp;
<i># rozdělení dat</i>
trainX = X[:for_training]
testX = X[for_training:]
trainY = y[:for_training]
testY = y[for_training:]
&nbsp;
&nbsp;
def <strong>train_and_test_model</strong>(solver: str, show_results: bool = False):
    print(f"Neural network with solver '{solver}'")
&nbsp;
    <i># provést klasifikaci</i>
    <i># konstrukce klasifikatoru</i>
    <i># (s hyperparametrem)</i>
    classifier = MLPClassifier(max_iter=5000, solver=solver)
&nbsp;
    <i># vypocet skore</i>
    scores = cross_val_score(classifier, X, y, cv=10, scoring="accuracy")
&nbsp;
    avg_score = scores.mean()
&nbsp;
    <i># vypsani prumerneho skore</i>
    print("Accuracy:", avg_score)
    print()
&nbsp;
    <i># trening modelu</i>
    classifier.fit(trainX, trainY)
&nbsp;
    class_names = digits.target_names
&nbsp;
    <i># absolutni hodnoty</i>
    disp = ConfusionMatrixDisplay.from_estimator(
        classifier,
        testX,
        testY,
        display_labels=class_names,
        cmap=plt.cm.Blues,
        normalize=None,
    )
&nbsp;
    <i># zobrazeni matice</i>
    print(disp.confusion_matrix)
    print()
&nbsp;
    <i># ulozeni vysledku</i>
    plt.savefig(f"{solver}_confusion_matrix_abs.png")
&nbsp;
    <i># vizualizace matice</i>
    if show_results:
        plt.show()
&nbsp;
    <i># relativni hodnoty</i>
    disp = ConfusionMatrixDisplay.from_estimator(
        classifier,
        testX,
        testY,
        display_labels=class_names,
        cmap=plt.cm.Blues,
        normalize="true",
    )
&nbsp;
    <i># zobrazeni matice</i>
    print(disp.confusion_matrix)
&nbsp;
    <i># ulozeni vysledku</i>
    plt.savefig(f"{solver}_confusion_matrix_rel.png")
&nbsp;
    <i># vizualizace matice</i>
    if show_results:
        plt.show()
&nbsp;
    predicted_labels = classifier.predict(testX)
    images = digits.images[for_training:]
&nbsp;
    fig = plt.figure(figsize=(6.4, 10.0))
&nbsp;
    <i># zobrazit patnáct výsledků</i>
    wrong = 0
    i = 0
    while wrong &lt; 30:
        predicted_digit = classifier.predict([testX[i]])[0]
        correct_digit = testY[i]
        if predicted_digit != correct_digit:
            image = images[i]
            wrong += 1
            plt.subplot(6, 5, wrong)
            plt.axis("off")
            # zobrazení obrázku
            plt.imshow(image, cmap=plt.cm.gray_r, interpolation="nearest")
            # a přidání predikce - o jakou číslici se jedná
            plt.title(f"{predicted_digit} &lt;&gt; {correct_digit}")
        i += 1
        <i># nenasli jsme vice cislic</i>
        if i &gt;= len(testX):
            break
&nbsp;
    <i># nakonec vše uložíme a zobrazíme</i>
    plt.savefig(f"{solver}_wrong_digits.png")
    if show_results:
        plt.show()
    print()
    print("-" * 70)
    return avg_score
&nbsp;
&nbsp;
solvers = ("lbfgs", "sgd", "adam")
&nbsp;
scores = []
&nbsp;
for solver in solvers:
    score = train_and_test_model(solver)
    scores.append(score)
&nbsp;
fig, ax = plt.subplots()
&nbsp;
ax.bar(solvers, scores)
&nbsp;
ax.set_ylabel("Model accuracy")
ax.set_title("Solver")
&nbsp;
plt.savefig("accuracy.png")
plt.show()
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Matice záměn a přesnosti modelů pro různé trénovací algoritmy</h2>

<p>Výše uvedený skript zobrazí mj.&nbsp;i matice záměn pro jednotlivé
algoritmy. Nejprve si uvedeme matice záměn s&nbsp;absolutními hodnotami:</p>

*** image ***
<p><i>Obrázek 23: Matice záměn s&nbsp;absolutními hodnotami pro neuronovou síť
natrénovanou algoritmem &bdquo;adam&ldquo;.</i></p>

*** image ***
<p><i>Obrázek 24: Matice záměn s&nbsp;absolutními hodnotami pro neuronovou síť
natrénovanou algoritmem &bdquo;lbfgs&ldquo;.</i></p>

*** image ***
<p><i>Obrázek 25: Matice záměn s&nbsp;absolutními hodnotami pro neuronovou síť
natrénovanou algoritmem &bdquo;sgd&ldquo;.</i></p>

<p>Matice záměn s&nbsp;hodnotami relativními:</p>

*** image ***
<p><i>Obrázek 26: Matice záměn s&nbsp;absolutními hodnotami pro neuronovou síť
natrénovanou algoritmem &bdquo;adam&ldquo;.</i></p>

*** image ***
<p><i>Obrázek 27: Matice záměn s&nbsp;absolutními hodnotami pro neuronovou síť
natrénovanou algoritmem &bdquo;lbfgs&ldquo;.</i></p>

*** image ***
<p><i>Obrázek 28: Matice záměn s&nbsp;absolutními hodnotami pro neuronovou síť
natrénovanou algoritmem &bdquo;sgd&ldquo;.</i></p>

<p>Textová podoba výsledků:</p>

<pre>
Data: (1797, 64)
Obrázky: (1797, 8, 8)
Vzorků pro trénink: 1437
&nbsp;
&nbsp;
&nbsp;
Neural network with solver 'lbfgs'
Accuracy: 0.948786468032278
&nbsp;
[[33  0  0  0  1  0  1  0  0  0]
 [ 0 32  0  1  0  0  0  0  0  3]
 [ 0  0 35  0  0  0  0  0  0  0]
 [ 0  0  0 31  0  2  0  1  3  0]
 [ 0  1  0  0 34  0  0  0  0  2]
 [ 0  0  0  0  0 37  0  0  0  0]
 [ 0  1  0  0  0  0 36  0  0  0]
 [ 0  1  0  0  1  0  0 33  1  0]
 [ 0  2  0  1  1  2  0  0 27  0]
 [ 0  1  0  1  0  1  0  2  0 32]]
&nbsp;
[[0.94285714 0.         0.         0.         0.02857143 0.
  0.02857143 0.         0.         0.        ]
 [0.         0.88888889 0.         0.02777778 0.         0.
  0.         0.         0.         0.08333333]
 [0.         0.         1.         0.         0.         0.
  0.         0.         0.         0.        ]
 [0.         0.         0.         0.83783784 0.         0.05405405
  0.         0.02702703 0.08108108 0.        ]
 [0.         0.02702703 0.         0.         0.91891892 0.
  0.         0.         0.         0.05405405]
 [0.         0.         0.         0.         0.         1.
  0.         0.         0.         0.        ]
 [0.         0.02702703 0.         0.         0.         0.
  0.97297297 0.         0.         0.        ]
 [0.         0.02777778 0.         0.         0.02777778 0.
  0.         0.91666667 0.02777778 0.        ]
 [0.         0.06060606 0.         0.03030303 0.03030303 0.06060606
  0.         0.         0.81818182 0.        ]
 [0.         0.02702703 0.         0.02702703 0.         0.02702703
  0.         0.05405405 0.         0.86486486]]
&nbsp;
----------------------------------------------------------------------
Neural network with solver 'sgd'
Accuracy: 0.9465611421477342
&nbsp;
[[33  0  0  0  1  0  1  0  0  0]
 [ 0 31  0  0  0  0  0  0  0  5]
 [ 0  0 35  0  0  0  0  0  0  0]
 [ 0  0  2 27  0  3  0  1  4  0]
 [ 0  1  0  0 34  0  0  0  0  2]
 [ 0  0  0  0  0 37  0  0  0  0]
 [ 0  1  0  0  0  0 36  0  0  0]
 [ 0  0  0  0  1  0  0 34  1  0]
 [ 0  3  0  1  0  1  0  1 27  0]
 [ 1  0  0  0  0  1  0  0  1 34]]
&nbsp;
[[0.94285714 0.         0.         0.         0.02857143 0.
  0.02857143 0.         0.         0.        ]
 [0.         0.86111111 0.         0.         0.         0.
  0.         0.         0.         0.13888889]
 [0.         0.         1.         0.         0.         0.
  0.         0.         0.         0.        ]
 [0.         0.         0.05405405 0.72972973 0.         0.08108108
  0.         0.02702703 0.10810811 0.        ]
 [0.         0.02702703 0.         0.         0.91891892 0.
  0.         0.         0.         0.05405405]
 [0.         0.         0.         0.         0.         1.
  0.         0.         0.         0.        ]
 [0.         0.02702703 0.         0.         0.         0.
  0.97297297 0.         0.         0.        ]
 [0.         0.         0.         0.         0.02777778 0.
  0.         0.94444444 0.02777778 0.        ]
 [0.         0.09090909 0.         0.03030303 0.         0.03030303
  0.         0.03030303 0.81818182 0.        ]
 [0.02702703 0.         0.         0.         0.         0.02702703
  0.         0.         0.02702703 0.91891892]]
&nbsp;
----------------------------------------------------------------------
Neural network with solver 'adam'
Accuracy: 0.9549130974549968
&nbsp;
[[33  0  0  0  1  0  1  0  0  0]
 [ 0 35  0  0  0  0  0  0  0  1]
 [ 0  0 34  1  0  0  0  0  0  0]
 [ 0  0  0 30  0  3  0  1  3  0]
 [ 0  0  0  0 34  0  0  0  0  3]
 [ 0  1  0  0  0 36  0  0  0  0]
 [ 0  1  0  0  0  0 36  0  0  0]
 [ 0  0  0  0  1  0  0 35  0  0]
 [ 0  2  0  0  1  0  0  0 29  1]
 [ 0  1  0  1  0  0  0  3  1 31]]
&nbsp;
[[0.94285714 0.         0.         0.         0.02857143 0.
  0.02857143 0.         0.         0.        ]
 [0.         0.97222222 0.         0.         0.         0.
  0.         0.         0.         0.02777778]
 [0.         0.         0.97142857 0.02857143 0.         0.
  0.         0.         0.         0.        ]
 [0.         0.         0.         0.81081081 0.         0.08108108
  0.         0.02702703 0.08108108 0.        ]
 [0.         0.         0.         0.         0.91891892 0.
  0.         0.         0.         0.08108108]
 [0.         0.02702703 0.         0.         0.         0.97297297
  0.         0.         0.         0.        ]
 [0.         0.02702703 0.         0.         0.         0.
  0.97297297 0.         0.         0.        ]
 [0.         0.         0.         0.         0.02777778 0.
  0.         0.97222222 0.         0.        ]
 [0.         0.06060606 0.         0.         0.03030303 0.
  0.         0.         0.87878788 0.03030303]
 [0.         0.02702703 0.         0.02702703 0.         0.
  0.         0.08108108 0.02702703 0.83783784]]
&nbsp;
----------------------------------------------------------------------
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Jaké číslice <i>ne</i>byly rozpoznány jednotlivými neuronovými sítěmi?</h2>

<p>Samozřejmě si taktéž ukážeme, jaký vliv měla volba trénovacích algoritmů na
to, které číslice jsou rozeznány či naopak nerozeznány jednotlivými
natrénovanými sítěmi. Opět se pokusíme zobrazit 30 špatných výsledků
z&nbsp;celkem 360 pokusů o rozeznání, které každá síť provedla. Pokud je
některá ze sítí tak dobře natrénovaná, že neměla víc než 30 chybných odhadů,
bude ve výsledku zobrazeno menší množství číslic:</p>

*** image ***
<p><i>Obrázek 29: Číslice, které nebyly rozeznány sítí natrénovanou algoritmem
&bdquo;adam&ldquo;.</i></p>

*** image ***
<p><i>Obrázek 30: Číslice, které nebyly rozeznány sítí natrénovanou algoritmem
&bdquo;lbfgs&ldquo;.</i></p>

*** image ***
<p><i>Obrázek 31: Číslice, které nebyly rozeznány sítí natrénovanou algoritmem
&bdquo;sgd&ldquo;.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Kombinace nejlepší aktivační funkce a nejlepšího algoritmu = nejlepší výsledky?</h2>

<p>Z&nbsp;předchozích výsledků vyplývá, že použitím aktivační funkce jsme
dostali (beze změny trénovacího algoritmu) ty nejlepší výsledky. A naopak,
pokud pouze měníme trénovací algoritmy, dosáhneme nejlepších výsledků při
výběru algoritmu &bdquo;adam&ldquo;:</p>

*** image ***
<p><i>Obrázek 32: Přesnosti odpovědí neuronových sítí natrénovaných různými
algoritmy. Nejlépe dopadlo použití algoritmu &bdquo;adam&ldquo;.</i></p>

<p>Mohlo by se tedy zdát, že pokud zkombinujeme tu nejlepší aktivační funkci
s&nbsp;nejlepším trénovacím algoritmem, dostaneme vždy ty nejlepší výsledky
&ndash; ideálně natrénovanou neuronovou síť. V&nbsp;praxi to tak ovšem není, a
to z&nbsp;mnoha důvodů. Jedním z&nbsp;nich je fakt, že se při tréninku
používají náhodné hodnoty a ani samotná kombinace dvou &bdquo;nejlepších&ldquo;
parametrů obecně nedává nejlepší výsledek. Jedinou spolehlivou metodou je
vyzkoušet všechno možnosti a navíc použít i křížovou validaci &ndash; což je
ovšem v&nbsp;případě neuronových sítí časově velmi složité.</p>

<p>Ostatně si vyzkoušejme kombinaci &bdquo;nejlepších&ldquo; algoritmů v&nbsp;praxi:</p>

<pre>
<i># Rozpoznání obrazu s využitím knihovny scikit-learn</i>
&nbsp;
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.metrics import ConfusionMatrixDisplay
&nbsp;
<i># Databáze ručně zapsaných číslic</i>
from sklearn.datasets import load_digits
&nbsp;
ACTIVATION_FUNCTION="logistic"
SOLVER="adam"
&nbsp;
<i># načtení obrázků, s nimiž budeme dále pracovat</i>
digits = load_digits()
&nbsp;
<i># zjištění základních informací o obrázcích</i>
print("Description:", digits.DESCR)
&nbsp;
print("Data:", digits.data.shape)
print("Obrázky:", digits.images.shape)
&nbsp;
<i># X je matice (feature matrix)</i>
X = digits.data
&nbsp;
<i># y je vektor (response vector)</i>
y = digits.target
&nbsp;
for_training = len(y) * 8 // 10
print("Vzorků pro trénink:", for_training)
print("\n\n")
&nbsp;
<i># rozdělení dat</i>
trainX = X[:for_training]
testX = X[for_training:]
trainY = y[:for_training]
testY = y[for_training:]
&nbsp;
&nbsp;
def <strong>train_and_test_model</strong>(show_results: bool = False):
    <i># provést klasifikaci</i>
    <i># konstrukce klasifikatoru</i>
    <i># (s hyperparametrem)</i>
    classifier = MLPClassifier(max_iter=5000, activation=ACTIVATION_FUNCTION, solver=SOLVER)
&nbsp;
    <i># vypocet skore</i>
    scores = cross_val_score(classifier, X, y, cv=10, scoring="accuracy")
&nbsp;
    avg_score = scores.mean()
&nbsp;
    <i># vypsani prumerneho skore</i>
    print("Accuracy:", avg_score)
    print()
&nbsp;
    <i># trening modelu</i>
    classifier.fit(trainX, trainY)
&nbsp;
    class_names = digits.target_names
&nbsp;
    <i># absolutni hodnoty</i>
    disp = ConfusionMatrixDisplay.from_estimator(
        classifier,
        testX,
        testY,
        display_labels=class_names,
        cmap=plt.cm.Blues,
        normalize=None,
    )
&nbsp;
    <i># zobrazeni matice</i>
    print(disp.confusion_matrix)
    print()
&nbsp;
    <i># ulozeni vysledku</i>
    plt.savefig("confusion_matrix_abs.png")
&nbsp;
    <i># vizualizace matice</i>
    if show_results:
        plt.show()
&nbsp;
    <i># relativni hodnoty</i>
    disp = ConfusionMatrixDisplay.from_estimator(
        classifier,
        testX,
        testY,
        display_labels=class_names,
        cmap=plt.cm.Blues,
        normalize="true",
    )
&nbsp;
    <i># zobrazeni matice</i>
    print(disp.confusion_matrix)
&nbsp;
    <i># ulozeni vysledku</i>
    plt.savefig("confusion_matrix_rel.png")
&nbsp;
    <i># vizualizace matice</i>
    if show_results:
        plt.show()
&nbsp;
    predicted_labels = classifier.predict(testX)
    images = digits.images[for_training:]
&nbsp;
    fig = plt.figure(figsize=(6.4, 10.0))
&nbsp;
    <i># zobrazit patnáct výsledků</i>
    wrong = 0
    i = 0
    while wrong &lt; 30:
        predicted_digit = classifier.predict([testX[i]])[0]
        correct_digit = testY[i]
        if predicted_digit != correct_digit:
            image = images[i]
            wrong += 1
            plt.subplot(6, 5, wrong)
            plt.axis("off")
            # zobrazení obrázku
            plt.imshow(image, cmap=plt.cm.gray_r, interpolation="nearest")
            # a přidání predikce - o jakou číslici se jedná
            plt.title(f"{predicted_digit} &lt;&gt; {correct_digit}")
        i += 1
        <i># nenasli jsme vice cislic</i>
        if i &gt;= len(testX):
            break
&nbsp;
    <i># nakonec vše uložíme a zobrazíme</i>
    plt.savefig("wrong_digits.png")
    if show_results:
        plt.show()
    print()
    print("-" * 70)
    return avg_score
&nbsp;
&nbsp;
train_and_test_model()
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Dosažené výsledky</h2>

<p>Výsledky získané spuštěním předchozího skriptu mohou být následující (ovšem
bez křížové validace nebude skóre vždy stejné):</p>

*** image ***
<p><i>Obrázek 33: Matice záměn s&nbsp;absolutními hodnotami.</i></p>

*** image ***
<p><i>Obrázek 34: Matice záměn s&nbsp;relativními hodnotami.</i></p>

*** image ***
<p><i>Obrázek 35: Špatně rozpoznané číslice z&nbsp;360 vzorků (více jich není).</i></p>

<p><div class="rs-tip-major">Poznámka: můžete se zeptat, jestli má smysl
zkombinovat více neuronových sítí a zvolit si vždy tu odpověď, která je
nejčastější. To obecně nemusí vést k&nbsp;lepším výsledkům, což si ostatně
ukážeme příště.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah navazujícího článku</h2>

<p>V&nbsp;dnešním článku jsme dokončili popis většiny užitečných vlastností
knihovny <i>scikit-learn</i>. Příště se ještě na chvíli zastavíme u sledování
jednotlivých fází učení neuronových sítí. Ovšem knihovna <i>scikit-learn</i> má
i některá omezení, která se týkají právě problematiky neuronových sítí.
Z&nbsp;tohoto důvodu se v&nbsp;navazujících článcích seznámíme
s&nbsp;knihovnou, která je přímo určena pro trénink a aplikaci neuronových
sítí. Tato knihovna se jmenuje <i>PyTorch</i>. Původně tato knihovna částečně
vycházela z&nbsp;knihovny <i>Torch</i>, s&nbsp;níž jsme se již na stránkách
Roota setkali v&nbsp;seriálu <a
href="https://www.root.cz/serialy/torch-framework-pro-strojove-uceni/">Torch:
framework pro strojové učení</a>. Nicméně později PyTorch dospěl do zcela
samostatného projektu, který je navíc v&nbsp;praxi poměrně intenzivně používán,
takže je dobré znát koncepty, na kterých je postaven.</p>

*** image ***
<p><i>Obrázek 36: Logo projektu PyTorch.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady využívající knihovnu Scikit-learn lze nalézt
v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady i na (Jupyter) diáře s&nbsp;postupem
výpočtů a analýz:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td> 1</td><td>01_show_matrix.py</td><td>kooperace mezi knihovnami Matplotlib a NumPy: vizualizace obsahu 2D matice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/01_show_matrix.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/01_show_matrix.py</a></td></tr>
<tr><td> 2</td><td>02_get_digits.py</td><td>datová množina obsahující naskenované ručně napsané číslice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/02_get_digits.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/02_get_digits.py</a></td></tr>
<tr><td> 3</td><td>03_get_features.py</td><td>další atributy datové množiny, které použijeme při trénování</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/03_get_features.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/03_get_features.py</a></td></tr>
<tr><td> 4</td><td>04_get_images.py</td><td>přečtení a následné vykreslení jednotlivých ručně nakreslených číslic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/04_get_images.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/04_get_images.py</a></td></tr>
<tr><td> 5</td><td>05_show_grayscale_matrix.py</td><td>odstranění umělé aplikované barvové palety (obrázky ve stupních šedi)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/05_show_grayscale_matrix.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/05_show_grayscale_matrix.py</a></td></tr>
<tr><td> 6</td><td>06_grayscale_images.py</td><td>vykreslení ručně nakreslených číslic ve formě obrázků ve stupních šedi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/06_grayscale_images.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/06_grayscale_images.py</a></td></tr>
<tr><td> 7</td><td>07_multiplot.py</td><td>rozdělení plochy grafu do oblastí; vykreslení více obrázků do jediného grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/07_multiplot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/07_multiplot.py</a></td></tr>
<tr><td> 8</td><td>08_model_preperation_1.py</td><td>obrázky s&nbsp;jejich ohodnocením</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/08_model_preperation_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/08_model_preperation_1.py</a></td></tr>
<tr><td> 9</td><td>09_training_set.py</td><td>příprava dat pro trénink</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/09_training_set.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/09_training_set.py</a></td></tr>
<tr><td>10</td><td>10_classification.py</td><td>klasifikace obrázků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/10_classification.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/10_classification.py</a></td></tr>
<tr><td>11</td><td>11_results.py</td><td>vykreslení obrázků společně s&nbsp;jejich klasifikací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/11_results.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/11_results.py</a></td></tr>
<tr><td>12</td><td>12_change_training_set.py</td><td>změna poměru rozdělení dat na tréninkovou a testovací množinu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/12_change_training_set.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/12_change_training_set.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>13</td><td>13_blobs.py</td><td>použití funkce <strong>make_blobs</strong> pro vygenerování sady bodů v&nbsp;rovině sdružených do oblastí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/13_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/13_blobs.py</a></td></tr>
<tr><td>14</td><td>14_swap_coords.py</td><td>úprava předchozího příkladu: prohození souřadnic na osách</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/14_swap_coords.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/14_swap_coords.py</a></td></tr>
<tr><td>15</td><td>15_blobs_scatter_plot.py</td><td>základní podoba bodového diagramu (<i>scatter plot</i>)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/15_blobs_scatter_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/15_blobs_scatter_plot.py</a></td></tr>
<tr><td>16</td><td>16_blobs_scatter_plot.py</td><td>úprava bodového diagramu při zobrazení většího množství bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/16_blobs_scatter_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/16_blobs_scatter_plot.py</a></td></tr>
<tr><td>17</td><td>17_colorized_blobs.py</td><td>obarvení bodů podle oblastí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/17_colorized_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/17_colorized_blobs.py</a></td></tr>
<tr><td>18</td><td>18_k-means.py</td><td>základní použití algoritmu K-means pro clustering</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/18_k-means.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/18_k-means.py</a></td></tr>
<tr><td>19</td><td>19_combination.py</td><td>zobrazení centroidů společně s&nbsp;původními body</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/19_combination.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/19_combination.py</a></td></tr>
<tr><td>20</td><td>20_combinations.py</td><td>vizualizace clusteringu původní množiny bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/20_combinations.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/20_combinations.py</a></td></tr>
<tr><td>21</td><td>21_other_settings.py</td><td>vizualizace clusteringu původní množiny bodů pro odlišnou množinu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/21_other_settings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/21_other_settings.py</a></td></tr>
<tr><td>22</td><td>22_random_points.py</td><td>clustering pro náhodná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/22_random_points.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/22_random_points.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>23_circles.py</td><td>pseudonáhodné rozmístění bodů do kružnic, menší náhodnost výsledku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/23_circles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/23_circles.py</a></td></tr>
<tr><td>24</td><td>24_more_noise_circles.py</td><td>pseudonáhodné rozmístění bodů do kružnic, větší náhodnost výsledku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/24_more_noise_circles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/24_more_noise_circles.py</a></td></tr>
<tr><td>25</td><td>25_moons.py</td><td>pseudonáhodné rozmístění bodů do tvaru dvou půlměsíců, menší náhodnost</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/25_moons.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/25_moons.py</a></td></tr>
<tr><td>26</td><td>26_more_noisy_moons.py</td><td>pseudonáhodné rozmístění bodů do tvaru dvou půlměsíců, větší náhodnost</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/26_more_noisy_moons.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/26_more_noisy_moons.py</a></td></tr>
<tr><td>27</td><td>27_circles_kmeans.py</td><td>výsledek clusteringu provedeného algoritmem K-means na &bdquo;kružnice&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/27_circles_kmeans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/27_circles_kmeans.py</a></td></tr>
<tr><td>28</td><td>28_moons_kmeans.py</td><td>výsledek clusteringu provedeného algoritmem K-means na &bdquo;půlměsíce&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/28_moons_kmeans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/28_moons_kmeans.py</a></td></tr>
<tr><td>29</td><td>29_blobs_spectral_clustering.py</td><td>spectral clustering pro body rozmístěné pomocí <strong>make_blobs</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/29_blobs_spectral_clustering.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/29_blobs_spectral_clustering.py</a></td></tr>
<tr><td>30</td><td>30_circles_spectral_clustering.py</td><td>spectral clustering pro body rozmístěné do kružnic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/30_circles_spectral_clustering.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/30_circles_spectral_clustering.py</a></td></tr>
<tr><td>31</td><td>31_moons_spectral_clustering.py</td><td>spectral clustering pro body rozmístěné do půlměsíců </td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/31_moons_spectral_clustering.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/31_moons_spectral_clustering.py</a></td></tr>
<tr><td>32</td><td>32_moons_spectral_clustering_limits.py</td><td>vyhledání limitů algoritmu spectral clustering</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/32_moons_spectral_clustering_limits.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/32_moons_spectral_clustering_limits.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>33_particles_load.py</td><td>načtení souřadnic částic uložených v&nbsp;souboru formátu CSV</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/33_particles_load.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/33_particles_load.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>34</td><td>34_lorenz_attractor.py</td><td>zobrazení Lorenzova atraktoru formou bodů propojených úsečkami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/34_lorenz_attractor.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/34_lorenz_attractor.py</a></td></tr>
<tr><td>35</td><td>35_lorenz_attractor_points.py</td><td>Lorenzův atraktor vykreslený formou jednotlivých bodů s&nbsp;definovaným stylem zobrazení a velikostí stopy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/35_lorenz_attractor_points.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/35_lorenz_attractor_points.py</a></td></tr>
<tr><td>36</td><td>36_blobs_3d.py</td><td>vygenerování a zobrazení sady bodů v&nbsp;3D prostoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/36_blobs_3d.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/36_blobs_3d.py</a></td></tr>
<tr><td>37</td><td>37_spread_blobs_3d.py</td><td>vygenerování a zobrazení sady bodů v&nbsp;3D prostoru, odlišné parametry při generování</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/37_spread_blobs_3d.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/37_spread_blobs_3d.py</a></td></tr>
<tr><td>38</td><td>38_views.py</td><td>různé pohledy na 3D graf</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/38_views.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/38_views.py</a></td></tr>
<tr><td>39</td><td>39_colorized_3d_blobs.py</td><td>obarvení bodů v&nbsp;prostoru na základě vstupních dat</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/39_colorized_3d_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/39_colorized_3d_blobs.py</a></td></tr>
<tr><td>40</td><td>40_kmeans_3d_blobs.py</td><td>shluková analýza v&nbsp;3D prostoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/40_kmeans_3d_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/40_kmeans_3d_blobs.py</a></td></tr>
<tr><td>41</td><td>41_kmeans_spread_3d_blobs.py</td><td>shluková analýza v&nbsp;3D prostoru pro odlišnou množinu bodů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/41_kmeans_spread_3d_blobs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/41_kmeans_spread_3d_blobs.py</a></td></tr>
<tr><td>42</td><td>42_kmeans_random_3d.py</td><td>shluková analýza pro body rozmístěné zcela náhodně v&nbsp;omezeném prostoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/42_kmeans_random_3d.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/42_kmeans_random_3d.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>43_speed_measurements.py</td><td>benchmark pro postupně rostoucí počet bodů tvořících shluky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/43_speed_measurements.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/43_speed_measurements.py</a></td></tr>
<tr><td>44</td><td>44_speed_measurements.py</td><td>benchmark pro postupně rostoucí počet bodů rozmístěných náhodně</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/44_speed_measurements.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/44_speed_measurements.py</a></td></tr>
<tr><td>45</td><td>45_speed_measurements.py</td><td>benchmark pro stále stejný počet bodů, u jejichž rozmístění v&nbsp;prostoru se používá stále větší směrodatná odchylka</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/45_speed_measurements.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/45_speed_measurements.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>46</td><td>46_iris_dataset.py</td><td>načtení datové kolekce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/46_iris_dataset.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/46_iris_dataset.py</a></td></tr>
<tr><td>47</td><td>47_iris_description.py</td><td>metadata o datové kolekci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/47_iris_description.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/47_iris_description.py</a></td></tr>
<tr><td>48</td><td>48_iris_data.py</td><td>tvar dat &ndash; počet záznamů a počet proměnných</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/48_iris_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/48_iris_data.py</a></td></tr>
<tr><td>49</td><td>49_iris_targets.py</td><td>jména atributů, vztah mezi numerickou hodnotou atributu a jeho jménem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/49_iris_targets.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/49_iris_targets.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>50</td><td>50_iris_scatter_plot_1.py</td><td>korelační diagram pro dvojici vybraných proměnných</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/50_iris_scatter_plot_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/50_iris_scatter_plot_1.py</a></td></tr>
<tr><td>51</td><td>51_iris_scatter_plot_2.py</td><td>příprava pro tvorbu složitějších grafů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/51_iris_scatter_plot_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/51_iris_scatter_plot_2.py</a></td></tr>
<tr><td>52</td><td>52_iris_mutliplot.py</td><td>mřížka obsahující více korelačních diagramů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/52_iris_mutliplot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/52_iris_mutliplot.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>53</td><td>53_iris_histograms.py</td><td>zobrazení základního histogramu pro data v&nbsp;sadě Iris</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/53_iris_histograms.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/53_iris_histograms.py</a></td></tr>
<tr><td>54</td><td>54_iris_histograms.py</td><td>úprava histogramu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/54_iris_histograms.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/54_iris_histograms.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>55</td><td>55_pca.py</td><td>analýza hlavních komponent (PCA), výsledek zobrazený v&nbsp;2D grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/55_pca.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/55_pca.py</a></td></tr>
<tr><td>56</td><td>56_pca_3d.py</td><td>analýza hlavních komponent (PCA), výsledek zobrazený v&nbsp;3D grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/56_pca_3d.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/56_pca_3d.py</a></td></tr>
<tr><td>57</td><td>57_kmeans.py</td><td>základní shluková analýza</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/57_kmeans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/57_kmeans.py</a></td></tr>
<tr><td>58</td><td>58_multiple_kmeans.py</td><td>větší množství výsledků shlukové analýzy pro různé atributy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/58_multiple_kmeans.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/58_multiple_kmeans.py</a></td></tr>
<tr><td>59</td><td>59_kmeans_errors.py</td><td>korektní a nekorektní výsledky základní shlukové analýzy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/59_kmeans_errors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/59_kmeans_errors.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>60</td><td>60_basic_classifier.py</td><td>aplikace jednoduchého modelu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/60_basic_classifier.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/60_basic_classifier.py</a></td></tr>
<tr><td>61</td><td>61_changed_model_parameters.py</td><td>změna parametrů modelu pro zjištění druhů rostil</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/61_changed_model_parameters.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/61_changed_model_parameters.py</a></td></tr>
<tr><td>62</td><td>62_different_model.py</td><td>použití odlišného modelu pro zjištění druhů rostlin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/62_different_model.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/62_different_model.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>63</td><td>63_verify_on_whole_data_1.py</td><td>otestování naučeného modelu s&nbsp;využitím tréninkových dat</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/63_verify_on_whole_data_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/63_verify_on_whole_data_1.py</a></td></tr>
<tr><td>64</td><td>64_verify_on_whole_data_2.py</td><td>využití funkce <strong>metrics.accuracy_score</strong> pro zjištění kvality modelu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/64_verify_on_whole_data_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/64_verify_on_whole_data_2.py</a></td></tr>
<tr><td>65</td><td>65_basic_comparison.py</td><td>porovnání vlastností různých modelů (prozatím nekorektní řešení)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/65_basic_comparison.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/65_basic_comparison.py</a></td></tr>
<tr><td>66</td><td>66_training_testing_split_1.py</td><td>rozdělení datové sady na trénovací data a testovací data (základní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/66_training_testing_split_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/66_training_testing_split_1.py</a></td></tr>
<tr><td>67</td><td>67_training_testing_split_2.py</td><td>rozdělení datové sady na trénovací data a testovací data (náhodné rozdělení sady)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/67_training_testing_split_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/67_training_testing_split_2.py</a></td></tr>
<tr><td>68</td><td>68_training_testing_split_3.py</td><td>rozdělení datové sady na trénovací data a testovací data (využití vestavěné funkce)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/68_training_testing_split_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/68_training_testing_split_3.py</a></td></tr>
<tr><td>69</td><td>69_better_comparison.py</td><td>vylepšené porovnání vlastností různých modelů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/69_better_comparison.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/69_better_comparison.py</a></td></tr>
<tr><td>70</td><td>70_multiple_runs.py</td><td>vliv generátoru náhodných čísel na změřené výsledky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/70_multiple_runs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/70_multiple_runs.py</a></td></tr>
<tr><td>71</td><td>71_stable_multiple_runs.py</td><td>generátor náhodných čísel a použití hodnoty <strong>random_state</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/71_stable_multiple_runs.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/71_stable_multiple_runs.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>72</td><td>72_housings_dataset.py</td><td>načtení datové sady <i>California housings</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/72_housings_dataset.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/72_housings_dataset.py</a></td></tr>
<tr><td>73</td><td>73_housings_dataset_description.py</td><td>metainformace o datové sadě <i>California housings</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/73_housings_dataset_description.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/73_housings_dataset_description.py</a></td></tr>
<tr><td>74</td><td>74_housings_data.py</td><td>n-rozměrné pole s&nbsp;atributy jednotlivých domů/bloků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/74_housings_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/74_housings_data.py</a></td></tr>
<tr><td>75</td><td>75_housings_targets.py</td><td>jména atributů, ceny domů atd.</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/75_housings_targets.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/75_housings_targets.py</a></td></tr>
<tr><td>76</td><td>76_housings_scatter_plot.py</td><td>korelační diagram pro dvojici vybraných proměnných</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/76_housings_scatter_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/76_housings_scatter_plot.py</a></td></tr>
<tr><td>77</td><td>77_housings_mutliplot.py</td><td>korelační diagram pro všechny kombinace dvojic proměnných</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/77_housings_mutliplot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/77_housings_mutliplot.py</a></td></tr>
<tr><td>78</td><td>78_scatter.py</td><td>dvourozměrné hodnoty reprezentované jako dvojice atributů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/78_scatter.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/78_scatter.py</a></td></tr>
<tr><td>79</td><td>79_linear_regression_gen_data.py</td><td>model <i>LinearRegression</i> nad uměle vytvořenými daty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/79_linear_regression_gen_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/79_linear_regression_gen_data.py</a></td></tr>
<tr><td>80</td><td>80_linear_regression_predictions.py</td><td>predikce modelu provádějícího lineární regresi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/80_linear_regression_predictions.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/80_linear_regression_predictions.py</a></td></tr>
<tr><td>81</td><td>81_linear_regression_random_data.py</td><td>chování modelu pro zcela náhodná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/81_linear_regression_random_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/81_linear_regression_random_data.py</a></td></tr>
<tr><td>82</td><td>82_linear_regression_housings.py</td><td>model <i>LinearRegression</i> pro datovou sadu <i>California housings</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/82_linear_regression_housings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/82_linear_regression_housings.py</a></td></tr>
<tr><td>83</td><td>83_polynomial_regression_gen_data.py</td><td>polynomiální regrese (základní příklad)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/83_polynomial_regression_gen_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/83_polynomial_regression_gen_data.py</a></td></tr>
<tr><td>84</td><td>84_polynomial_regression_housings.py</td><td>polynomiální regrese a datová sada <i>California housings</i>, první příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/84_polynomial_regression_housings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/84_polynomial_regression_housings.py</a></td></tr>
<tr><td>85</td><td>85_polynomial_regression_housings_2.py</td><td>polynomiální regrese a datová sada <i>California housings</i>, druhý příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/85_polynomial_regression_housings_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/85_polynomial_regression_housings_2.py</a></td></tr>
<tr><td>86</td><td>86_polynomial_regression_housings_3.py</td><td>polynomiální regrese a datová sada <i>California housings</i>, třetí příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/86_polynomial_regression_housings_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/86_polynomial_regression_housings_3.py</a></td></tr>
<tr><td>87</td><td>87_linear_regression_errors.py</td><td>výpočet chyby a skóre modelu lineární regrese</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/87_linear_regression_errors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/87_linear_regression_errors.py</a></td></tr>
<tr><td>88</td><td>88_linear_regression_non_linear_data.py</td><td>lineární regrese nad nelineárními daty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/88_linear_regression_non_linear_data.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/88_linear_regression_non_linear_data.py</a></td></tr>
<tr><td>89</td><td>89_polynomial_regression_error.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/89_polynomial_regression_error.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/89_polynomial_regression_error.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>90</td><td>90_housings_prediction_1.py</td><td>regresní analýza nad daty <i>California housings</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/90_housings_prediction_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/90_housings_prediction_1.py</a></td></tr>
<tr><td>91</td><td>91_housings_prediction_2.py</td><td>korektní natrénování modelu pro regresi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/91_housings_prediction_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/91_housings_prediction_2.py</a></td></tr>
<tr><td>92</td><td>92_housings_prediction_3.py</td><td>omezení množství atributů (proměnných), na kterých je model natrénován</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/92_housings_prediction_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/92_housings_prediction_3.py</a></td></tr>
<tr><td>93</td><td>93_housings_prediction_errors_1.py</td><td>chybně natrénovaný model při náhodné volbě dat</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/93_housings_prediction_errors_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/93_housings_prediction_errors_1.py</a></td></tr>
<tr><td>94</td><td>94_housings_prediction_errors_2.py</td><td>omezení atributů + chybně natrénovaný model</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/94_housings_prediction_errors_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/94_housings_prediction_errors_2.py</a></td></tr>
<tr><td>95</td><td>95_housings_histograms.py</td><td>histogramy pro jednotlivé atributy (proměnné)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/95_housings_histograms.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/95_housings_histograms.py</a></td></tr>
<tr><td>96</td><td>96_housings_statistic.py</td><td>statistické údaje pro jednotlivé atributy (proměnné)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/96_housings_statistic.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/96_housings_statistic.py</a></td></tr>
<tr><td>97</td><td>97_housings_statistic_normalized.py</td><td>statistické údaje získané po normalizaci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/97_housings_statistic_normalized.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/97_housings_statistic_normalized.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 98</td><td>98_k_fold_help.py</td><td>zobrazení nápovědy ke třídě s&nbsp;realizací k-foldingu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/98_k_fold_help.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/98_k_fold_help.py</a></td></tr>
<tr><td> 99</td><td>99_k_fold_old.py</td><td>původní (nepodporovaná) varianta provedení k-foldingu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/99_k_fold_old.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/99_k_fold_old.py</a></td></tr>
<tr><td>100</td><td>100_k_fold_1.py</td><td>interní chování algoritmu k-foldingu (základní parametry)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/100_k_fold_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/100_k_fold_1.py</a></td></tr>
<tr><td>101</td><td>101_k_fold_2.py</td><td>interní chování algoritmu k-foldingu (odlišné parametry)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/101_k_fold_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/101_k_fold_2.py</a></td></tr>
<tr><td>102</td><td>102_k_fold_selection.py</td><td>k-folding a výběr dat pro otestování modelů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/102_k_fold_selection.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/102_k_fold_selection.py</a></td></tr>
<tr><td>103</td><td>103_average_score.py</td><td>realizace výpočtu průměrného skóre pro otestování modelů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/103_average_score.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/103_average_score.py</a></td></tr>
<tr><td>104</td><td>104_hyperparams_score.py</td><td>změna hyperparametrů s&nbsp;výpočtem průměrného skóre (tabulka)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/104_hyperparams_score.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/104_hyperparams_score.py</a></td></tr>
<tr><td>105</td><td>105_hyperparams_score_plot.py</td><td>změna hyperparametrů s&nbsp;výpočtem průměrného skóre (graf)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/105_hyperparams_score_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/105_hyperparams_score_plot.py</a></td></tr>
<tr><td>106</td><td>106_model_selection.py</td><td>výběr nejlepšího modelu s&nbsp;využitím k-foldingu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/106_model_selection.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/106_model_selection.py</a></td></tr>
<tr><td>107</td><td>107_features_selection_basic.py</td><td>výběr atributů (proměnných) pro trénink modelu (základní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/107_features_selection_basic.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/107_features_selection_basic.py</a></td></tr>
<tr><td>108</td><td>108_features_selection_iris.py</td><td>výběr atributů (proměnných) pro trénink modelu (datová sada Iris)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/108_features_selection_iris.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/108_features_selection_iris.py</a></td></tr>
<tr><td>109</td><td>109_features_selection_houses.py</td><td>výběr atributů (proměnných) pro trénink modelu (datová sada California Housings)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/109_features_selection_houses.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/109_features_selection_houses.py</a></td></tr>
<tr><td>110</td><td>110_best_features_selection_houses.py</td><td>získání nejlepší sady atributů (proměnných)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/110_best_features_selection_houses.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/110_best_features_selection_houses.py</a></td></tr>
<tr><td>111</td><td>111_features_selection_graphical.py</td><td>výběr atributů (proměnných) pro trénink modelu (datová sada Iris), grafický výstup</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/111_features_selection_graphical.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/111_features_selection_graphical.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>112</td><td>112_simplest_linear_regression.py</td><td>lineární regrese bodů ležících v&nbsp;rovině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/112_simplest_linear_regression.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/112_simplest_linear_regression.py</a></td></tr>
<tr><td>113</td><td>113_linear_regression_no_intercept.py</td><td>lineární regrese při vynucení <i>w<sub>0</sub>=0</i> pro obecná data</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/113_linear_regression_no_intercept.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/113_linear_regression_no_intercept.py</a></td></tr>
<tr><td>114</td><td>114_linear_regression_from_0_0.py</td><td>lineární regrese při vynucení <i>w<sub>0</sub>=0</i> v&nbsp;případě, že vstupní body obsahují počátek souřadného systému</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/114_linear_regression_from_0_0.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/114_linear_regression_from_0_0.py</a></td></tr>
<tr><td>115</td><td>115_linear_regression_multiple_y.py</td><td>model předpovídající pro každou vstupní hodnotu dvě výstupní hodnoty (odpovědi)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/115_linear_regression_multiple_y.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/115_linear_regression_multiple_y.py</a></td></tr>
<tr><td>116</td><td>116_grid_operations.py</td><td>konstrukce matice obsahující souřadnice bodů v&nbsp;mřížce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/116_grid_operations.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/116_grid_operations.py</a></td></tr>
<tr><td>117</td><td>117_linear_regression_multiple_x.py</td><td>proložení bodů v&nbsp;prostoru rovinou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/117_linear_regression_multiple_x.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/117_linear_regression_multiple_x.py</a></td></tr>
<tr><td>118</td><td>118_linear_regression_multiple_x.py</td><td>proložení bodů s&nbsp;náhodnou výškou rovinou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/118_linear_regression_multiple_x.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/118_linear_regression_multiple_x.py</a></td></tr>
<tr><td>119</td><td>119_linear_regression_multiple_x_and_y.py</td><td>proložení dvou sad bodů dvojicí rovin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/119_linear_regression_multiple_x_and_y.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/119_linear_regression_multiple_x_and_y.py</a></td></tr>
<tr><td>120</td><td>120_linear_regression_multiple_x_and_y.py</td><td>proložení dvou sad bodů dvojicí rovin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/120_linear_regression_multiple_x_and_y.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/120_linear_regression_multiple_x_and_y.py</a></td></tr>
<tr><td>121</td><td>121_linear_regression_poly.py</td><td>základní polynomická regrese</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/121_linear_regression_poly.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/121_linear_regression_poly.py</a></td></tr>
<tr><td>122</td><td>122_linear_regression_poly_multiple_x.py</td><td>polynomická regrese a body v&nbsp;prostoru, první příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/122_linear_regression_poly_multiple_x.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/122_linear_regression_poly_multiple_x.py</a></td></tr>
<tr><td>123</td><td>123_linear_regression_poly_multiple_x.py</td><td>polynomická regrese a body v&nbsp;prostoru, druhý příklad</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/123_linear_regression_poly_multiple_x.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/123_linear_regression_poly_multiple_x.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>124</td><td>124_iris_set_statistic.py</td><td>získání statistických informací o datové sadě <i>Iris</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/124_iris_set_statistic.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/124_iris_set_statistic.py</a></td></tr>
<tr><td>125</td><td>125_california_housings_statistic.py</td><td>získání statistických informací o datové sadě <i>California Housings</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/125_california_housings_statistic.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/125_california_housings_statistic.py</a></td></tr>
<tr><td>126</td><td>126_variance_threshold_1.py</td><td>výběr atributů pro trénink modelu pomocí <strong>VarianceThreshold</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/126_variance_threshold_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/126_variance_threshold_1.py</a></td></tr>
<tr><td>127</td><td>127_variance_threshold_2.py</td><td>výběr atributů pro trénink modelu pomocí <strong>VarianceThreshold</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/127_variance_threshold_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/127_variance_threshold_2.py</a></td></tr>
<tr><td>128</td><td>128_variance_threshold_3.py</td><td>výběr atributů pro trénink modelu pomocí <strong>VarianceThreshold</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/128_variance_threshold_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/128_variance_threshold_3.py</a></td></tr>
<tr><td>129</td><td>129_select_best_iris.py</td><td>výběr nejvhodnějších atributů pro datovou sadu <i>Iris</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/129_select_best_iris.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/129_select_best_iris.py</a></td></tr>
<tr><td>130</td><td>130_select_best_housings.py</td><td>výběr nejvhodnějších atributů pro datovou sadu <i>California Housings</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/130_select_best_housings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/130_select_best_housings.py</a></td></tr>
<tr><td>131</td><td>131_select_k_best_housings.py</td><td>výběr K nejvhodnějších atributů pro datovou sadu <i>California Housings</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/131_select_k_best_housings.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/131_select_k_best_housings.py</a></td></tr>
<tr><td>132</td><td>132_select_from_model.py</td><td>výběr atributů na základě k&nbsp;tomu určeného modelu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/132_select_from_model.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/132_select_from_model.py</a></td></tr>
<tr><td>133</td><td>133_cross_validation_1.py</td><td>křížová validace po výběru (filtraci) modelů (datová sada <i>Iris</i>)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/133_cross_validation_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/133_cross_validation_1.py</a></td></tr>
<tr><td>134</td><td>134_cross_validation_2.py</td><td>křížová validace po výběru (filtraci) modelů (datová sada <i>California Housings</i>)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/134_cross_validation_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/134_cross_validation_2.py</a></td></tr>
<tr><td>135</td><td>135_cross_validation_3.py</td><td>křížová validace po výběru (filtraci) modelů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/135_cross_validation_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/135_cross_validation_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>136</td><td>136_mlp_classifier_01.py</td><td>použití neuronové sítě pro klasifikaci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/136_mlp_classifier_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/136_mlp_classifier_01.py</a></td></tr>
<tr><td>137</td><td>137_mlp_classifier_02.py</td><td>výpočet úspěšnosti modelu založeného na neuronové síti</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/137_mlp_classifier_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/137_mlp_classifier_02.py</a></td></tr>
<tr><td>138</td><td>138_mlp_classifier_03.py</td><td>konfigurace vrstev neuronové sítě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/138_mlp_classifier_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/138_mlp_classifier_03.py</a></td></tr>
<tr><td>139</td><td>139_mlp_classifier_04.py</td><td>proměnný počet neuronů ve vrstvách neuronové sítě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/139_mlp_classifier_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/139_mlp_classifier_04.py</a></td></tr>
<tr><td>140</td><td>140_mlp_classifier_05.py</td><td>proměnný počet neuronů ve více vrstvách neuronové sítě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/140_mlp_classifier_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/140_mlp_classifier_05.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>141</td><td>141_mlp_regression_1.py</td><td>použití neuronové sítě pro regresi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/141_mlp_regression_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/141_mlp_regression_1.py</a></td></tr>
<tr><td>142</td><td>142_mlp_regression_2.py</td><td>modifikace parametrů neuronové sítě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/142_mlp_regression_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/142_mlp_regression_2.py</a></td></tr>
<tr><td>143</td><td>143_mlp_regression_2.py</td><td>další modifikace parametrů neuronové sítě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/143_mlp_regression_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/143_mlp_regression_2.py</a></td></tr>
<tr><td>144</td><td>144_mlp_regression_3.py</td><td>postupná změna počtu neuronů v&nbsp;jedné skryté vrstvě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/144_mlp_regression_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/144_mlp_regression_3.py</a></td></tr>
<tr><td>145</td><td>145_mlp_regression_4.py</td><td>postupná změna počtu neuronů ve třech skrytých vrstvách</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/145_mlp_regression_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/145_mlp_regression_4.py</a></td></tr>
<tr><td>146</td><td>146_mlp_regression_5.py</td><td>postupná změna počtu neuronů v&nbsp;pěti skrytých vrstvách</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/146_mlp_regression_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/146_mlp_regression_5.py</a></td></tr>
<tr><td>147</td><td>147_mlp_regression_6.py</td><td>postupná změna počtu skrytých vrstev při zachování počtu neuronů v&nbsp;každé vrstvě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/147_mlp_regression_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/147_mlp_regression_6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>148</td><td>148_confusion_matrix_1.py</td><td>zjištění kvality modelu s&nbsp;využitím matice záměn (<i>confusion matrix</i>)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/148_confusion_matrix_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/148_confusion_matrix_1.py</a></td></tr>
<tr><td>149</td><td>149_confusion_matrix_2.py</td><td>zjištění kvality modelu hledajícího K nejbližších sousedů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/149_confusion_matrix_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/149_confusion_matrix_2.py</a></td></tr>
<tr><td>150</td><td>150_confusion_matrix_3.py</td><td>zjištění kvality modelu tvořeného neuronovou sítí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/150_confusion_matrix_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/150_confusion_matrix_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>151</td><td>151_multiplication_table.py</td><td>využití neuronové sítě pro odhad výsledků součinu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/151_multiplication_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/151_multiplication_table.py</a></td></tr>
<tr><td>152</td><td>152_multiplication_table.py</td><td>odhad/vygenerování celé matice malé násobilky neuronovou sítí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/152_multiplication_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/152_multiplication_table.py</a></td></tr>
<tr><td>153</td><td>153_multiplication_table.py</td><td>rozšíření výpočtu součinu na rozsah 20&times;20 (při zachování původní sítě)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/153_multiplication_table.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/153_multiplication_table.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>154</td><td>154_images_1.py</td><td>rozpoznání číslic modelem provádějícím logistickou regresi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/154_images_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/154_images_1.py</a></td></tr>
<tr><td>155</td><td>155_images_2.py</td><td>rozpoznání číslic: využití modelu SVM (metoda podpůrných vektorů) pro klasifikaci obrázků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/155_images_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/155_images_2.py</a></td></tr>
<tr><td>156</td><td>156_images_3.py</td><td>rozpoznání číslic: využití modelu pro hledání K nejbližších sousedů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/156_images_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/156_images_3.py</a></td></tr>
<tr><td>157</td><td>157_images_4.py</td><td>rozpoznání rastrových obrázků neuronovou sítí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/157_images_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/157_images_4.py</a></td></tr>
<tr><td>158</td><td>158_all_predictions.py</td><td>zobrazení původních obrázků i predikovaných výsledků ve vizuální podobě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/158_all_predictions.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/158_all_predictions.py</a></td></tr>
<tr><td>159</td><td>159_wrong_predictions.py</td><td>zobrazení 25 nekorektních odhadů modelu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/159_wrong_predictions.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/159_wrong_predictions.py</a></td></tr>
<tr><td>160</td><td>160_nn_wrong_predictions.py</td><td>zobrazení 25 nekorektních odhadů neuronové sítě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/160_nn_wrong_predictions.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/160_nn_wrong_predictions.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>161</td><td>161_activation_function.py</td><td>specifikace aktivační funkce neuronové sítě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/161_activation_function.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/161_activation_function.py</a></td></tr>
<tr><td>162</td><td>162_solver.py</td><td>specifikace trénovacího a učícího algoritmu neuronové sítě</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/162_solver.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/162_solver.py</a></td></tr>
<tr><td>163</td><td>163_best_combination.py</td><td>kombinace nejlepší aktivační funkce a nejlepšího trénovacího algoritmu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/163_best_combination.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/163_best_combination.py</a></td></tr>
</table>

<p>V&nbsp;repositáři nalezneme taktéž projektový soubor a Jupyter Notebook
s&nbsp;vysvětlením, jak lze modely využít pro rozpoznávání obsahu rastrových
obrázků:</p>

<table>
<tr><th>#<th>Příklad</th><th>Stručný popis</th><th>Adresa příkladu</th></tr></i>
<tr><td>1</td><td>pyproject.toml</td><td>projektový soubor (pro PDM) se všemi závislostmi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pyproject.toml">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pyproject.toml</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>2</td><td>pdm.lock</td><td>lock soubor s&nbsp;konkrétními verzemi všech přímých i tranzitivních závislostí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pdm.lock">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/pdm.lock</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>3</td><td>Rozpoznání_obrazu_scikit-learn.ipynb</td><td>Jupyter notebook s&nbsp;celým postupem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/Rozpoznání_obrazu_scikit-learn.ipynb">https://github.com/tisnik/most-popular-python-libs/blob/master/sklearn/Rozpoznání_obrazu_scikit-learn.ipynb</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>4</td><td>particle_life.py</td><td>emergence: příklad vzniku struktury</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/particles/particle_life.py">https://github.com/tisnik/most-popular-python-libs/blob/master/particles/particle_life.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Shluková analýza (clustering) a knihovna Scikit-learn<br />
<a href="https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn/">https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn/</a>
</li>

<li>Shluková analýza (clustering) a knihovna Scikit-learn (2)<br />
<a href="https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-2/">https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-2/</a>
</li>

<li>Shluková analýza (clustering) a knihovna Scikit-learn (z plochy do 3D prostoru)<br />
<a href="https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-z-plochy-do-3d-prostoru/">https://www.root.cz/clanky/shlukova-analyza-clustering-a-knihovna-scikit-learn-z-plochy-do-3d-prostoru/</a>
</li>

<li>Rozpoznávání obrázků knihovnou Scikit-learn: první kroky<br />
<a href="https://www.root.cz/clanky/rozpoznavani-obrazku-knihovnou-scikit-learn-prvni-kroky/">https://www.root.cz/clanky/rozpoznavani-obrazku-knihovnou-scikit-learn-prvni-kroky/</a>
</li>

<li>scikit-learn: Machine Learning in Python<br />
<a href="https://scikit-learn.org/stable/index.html">https://scikit-learn.org/stable/index.html</a>
</li>

<li>Sklearn-pandas<br />
<a href="https://github.com/scikit-learn-contrib/sklearn-pandas">https://github.com/scikit-learn-contrib/sklearn-pandas</a>
</li>

<li>sklearn-xarray<br />
<a href="https://github.com/phausamann/sklearn-xarray/">https://github.com/phausamann/sklearn-xarray/</a>
</li>

<li>Clustering<br />
<a href="https://scikit-learn.org/stable/modules/clustering.html">https://scikit-learn.org/stable/modules/clustering.html</a>
</li>

<li>Cluster analysis (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Cluster_analysis">https://en.wikipedia.org/wiki/Cluster_analysis</a>
</li>

<li>Shluková analýza (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Shlukov%C3%A1_anal%C3%BDza">https://cs.wikipedia.org/wiki/Shlukov%C3%A1_anal%C3%BDza</a>
</li>

<li>K-means<br />
<a href="https://cs.wikipedia.org/wiki/K-means">https://cs.wikipedia.org/wiki/K-means</a>
</li>

<li>k-means clustering<br />
<a href="https://en.wikipedia.org/wiki/K-means_clustering">https://en.wikipedia.org/wiki/K-means_clustering</a>
</li>

<li>Spectral clustering<br />
<a href="https://en.wikipedia.org/wiki/Spectral_clustering">https://en.wikipedia.org/wiki/Spectral_clustering</a>
</li>

<li>Emergence<br />
<a href="https://cs.wikipedia.org/wiki/Emergence">https://cs.wikipedia.org/wiki/Emergence</a>
</li>

<li>Particle Life: Vivid structures from rudimentary rules<br />
<a href="https://particle-life.com/">https://particle-life.com/</a>
</li>

<li>Hertzsprungův–Russellův diagram<br />
<a href="https://cs.wikipedia.org/wiki/Hertzsprung%C5%AFv%E2%80%93Russell%C5%AFv_diagram">https://cs.wikipedia.org/wiki/Hertzsprung%C5%AFv%E2%80%93Russell%C5%AFv_diagram</a>
</li>

<li>Using Machine Learning in an HR Diagram<br />
<a href="https://cocalc.com/share/public_paths/08b6e03583cbdef3cdb9813a54ec68ff773c747f">https://cocalc.com/share/public_paths/08b6e03583cbdef3cdb9813a54ec68ff773c747f</a>
</li>

<li>Gaia H-R diagrams: Querying Gaia data for one million nearby stars<br />
<a href="https://vlas.dev/post/gaia-dr2-hrd/">https://vlas.dev/post/gaia-dr2-hrd/</a>
</li>

<li>The Hertzsprung–Russell diagram<br />
<a href="https://scipython.com/book2/chapter-9-data-analysis-with-pandas/problems/p92/the-hertzsprung-russell-diagram/">https://scipython.com/book2/chapter-9-data-analysis-with-pandas/problems/p92/the-hertzsprung-russell-diagram/</a>
</li>

<li>Animated Hertzsprung-Russell Diagram with 119,614 datapoints<br />
<a href="https://github.com/zonination/h-r-diagram">https://github.com/zonination/h-r-diagram</a>
</li>

<li>Neuraxle Pipelines<br />
<a href="https://github.com/Neuraxio/Neuraxle">https://github.com/Neuraxio/Neuraxle</a>
</li>

<li>scikit-learn: Getting Started<br />
<a href="https://scikit-learn.org/stable/getting_started.html">https://scikit-learn.org/stable/getting_started.html</a>
</li>

<li>Support Vector Machines<br />
<a href="https://scikit-learn.org/stable/modules/svm.html">https://scikit-learn.org/stable/modules/svm.html</a>
</li>

<li>Use Deep Learning to Detect Programming Languages<br />
<a href="http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/">http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/</a>
</li>

<li>Natural-language processing<br />
<a href="https://en.wikipedia.org/wiki/Natural-language_processing">https://en.wikipedia.org/wiki/Natural-language_processing</a>
</li>

<li>THE MNIST DATABASE of handwritten digits<br />
<a href="http://yann.lecun.com/exdb/mnist/">http://yann.lecun.com/exdb/mnist/</a>
</li>

<li>MNIST database (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/MNIST_database">https://en.wikipedia.org/wiki/MNIST_database</a>
</li>

<li>MNIST For ML Beginners<br />
<a href="https://www.tensorflow.org/get_started/mnist/beginners">https://www.tensorflow.org/get_started/mnist/beginners</a>
</li>

<li>Stránka projektu Torch<br />
<a href="http://torch.ch/">http://torch.ch/</a>
</li>

<li>Torch: Serialization<br />
<a href="https://github.com/torch/torch7/blob/master/doc/serialization.md">https://github.com/torch/torch7/blob/master/doc/serialization.md</a>
</li>

<li>Torch: modul image<br />
<a href="https://github.com/torch/image/blob/master/README.md">https://github.com/torch/image/blob/master/README.md</a>
</li>

<li>Data pro neuronové sítě<br />
<a href="http://archive.ics.uci.edu/ml/index.php">http://archive.ics.uci.edu/ml/index.php</a>
</li>

<li>Torch na GitHubu (několik repositářů)<br />
<a href="https://github.com/torch">https://github.com/torch</a>
</li>

<li>Torch (machine learning), Wikipedia<br />
<a href="https://en.wikipedia.org/wiki/Torch_%28machine_learning%29">https://en.wikipedia.org/wiki/Torch_%28machine_learning%29</a>
</li>

<li>Torch Package Reference Manual<br />
<a href="https://github.com/torch/torch7/blob/master/README.md">https://github.com/torch/torch7/blob/master/README.md</a>
</li>

<li>Torch Cheatsheet<br />
<a href="https://github.com/torch/torch7/wiki/Cheatsheet">https://github.com/torch/torch7/wiki/Cheatsheet</a>
</li>

<li>Neural network containres (Torch)<br />
<a href="https://github.com/torch/nn/blob/master/doc/containers.md">https://github.com/torch/nn/blob/master/doc/containers.md</a>
</li>

<li>Simple layers<br />
<a href="https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear">https://github.com/torch/nn/blob/master/doc/simple.md#nn.Linear</a>
</li>

<li>Transfer Function Layers<br />
<a href="https://github.com/torch/nn/blob/master/doc/transfer.md#nn.transfer.dok">https://github.com/torch/nn/blob/master/doc/transfer.md#nn.transfer.dok</a>
</li>

<li>Feedforward neural network<br />
<a href="https://en.wikipedia.org/wiki/Feedforward_neural_network">https://en.wikipedia.org/wiki/Feedforward_neural_network</a>
</li>

<li>Biologické algoritmy (4) - Neuronové sítě<br />
<a href="https://www.root.cz/clanky/biologicke-algoritmy-4-neuronove-site/">https://www.root.cz/clanky/biologicke-algoritmy-4-neuronove-site/</a>
</li>

<li>Biologické algoritmy (5) - Neuronové sítě<br />
<a href="https://www.root.cz/clanky/biologicke-algoritmy-5-neuronove-site/">https://www.root.cz/clanky/biologicke-algoritmy-5-neuronove-site/</a>
</li>

<li>Umělá neuronová síť (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Um%C4%9Bl%C3%A1_neuronov%C3%A1_s%C3%AD%C5%A5">https://cs.wikipedia.org/wiki/Um%C4%9Bl%C3%A1_neuronov%C3%A1_s%C3%AD%C5%A5</a>
</li>

<li>PyTorch<br />
<a href="http://pytorch.org/">http://pytorch.org/</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>Matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Galerie grafů vytvořených v&nbsp;Matplotlibu<br />
<a href="https://matplotlib.org/3.2.1/gallery/">https://matplotlib.org/3.2.1/gallery/</a>
</li>

<li>3D rendering<br />
<a href="https://en.wikipedia.org/wiki/3D_rendering">https://en.wikipedia.org/wiki/3D_rendering</a>
</li>

<li>3D computer graphics<br />
<a href="https://en.wikipedia.org/wiki/3D_computer_graphics">https://en.wikipedia.org/wiki/3D_computer_graphics</a>
</li>

<li>Primary 3D view planes<br />
<a href="https://matplotlib.org/stable/gallery/mplot3d/view_planes_3d.html">https://matplotlib.org/stable/gallery/mplot3d/view_planes_3d.html</a>
</li>

<li>Getting started in scikit-learn with the famous iris dataset<br />
<a href="https://www.youtube.com/watch?v=hd1W4CyPX58">https://www.youtube.com/watch?v=hd1W4CyPX58</a>
</li>

<li>Training a machine learning model with scikit-learn<br />
<a href="https://www.youtube.com/watch?v=RlQuVL6-qe8">https://www.youtube.com/watch?v=RlQuVL6-qe8</a>
</li>

<li>Iris (plant)<br />
<a href="https://en.wikipedia.org/wiki/Iris_(plant)">https://en.wikipedia.org/wiki/Iris_(plant)</a>
</li>

<li>Kosatec<br />
<a href="https://cs.wikipedia.org/wiki/Kosatec">https://cs.wikipedia.org/wiki/Kosatec</a>
</li>

<li>Iris setosa<br />
<a href="https://en.wikipedia.org/wiki/Iris_setosa">https://en.wikipedia.org/wiki/Iris_setosa</a>
</li>

<li>Iris versicolor<br />
<a href="https://en.wikipedia.org/wiki/Iris_versicolor">https://en.wikipedia.org/wiki/Iris_versicolor</a>
</li>

<li>Iris virginica<br />
<a href="https://en.wikipedia.org/wiki/Iris_virginica">https://en.wikipedia.org/wiki/Iris_virginica</a>
</li>

<li>Druh<br />
<a href="https://cs.wikipedia.org/wiki/Druh">https://cs.wikipedia.org/wiki/Druh</a>
</li>

<li>Iris subg. Limniris<br />
<a href="https://en.wikipedia.org/wiki/Iris_subg._Limniris">https://en.wikipedia.org/wiki/Iris_subg._Limniris</a>
</li>

<li>Iris Dataset Classification with Python: A Tutorial<br />
<a href="https://www.pycodemates.com/2022/05/iris-dataset-classification-with-python.html">https://www.pycodemates.com/2022/05/iris-dataset-classification-with-python.html</a>
</li>

<li>Iris flower data set<br />
<a href="https://en.wikipedia.org/wiki/Iris_flower_data_set">https://en.wikipedia.org/wiki/Iris_flower_data_set</a>
</li>

<li>List of datasets for machine-learning research<br />
<a href="https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research">https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research</a>
</li>

<li>Analýza hlavních komponent<br />
<a href="https://cs.wikipedia.org/wiki/Anal%C3%BDza_hlavn%C3%ADch_komponent">https://cs.wikipedia.org/wiki/Anal%C3%BDza_hlavn%C3%ADch_komponent</a>
</li>

<li>Principal component analysis<br />
<a href="https://en.wikipedia.org/wiki/Principal_component_analysis">https://en.wikipedia.org/wiki/Principal_component_analysis</a>
</li>

<li>Scikit-learn Crash Course - Machine Learning Library for Python<br />
<a href="https://www.youtube.com/watch?v=0B5eIE_1vpU">https://www.youtube.com/watch?v=0B5eIE_1vpU</a>
</li>

<li>calm-notebooks<br />
<a href="https://github.com/koaning/calm-notebooks">https://github.com/koaning/calm-notebooks</a>
</li>

<li>Should you teach Python or R for data science?<br />
<a href="https://www.dataschool.io/python-or-r-for-data-science/">https://www.dataschool.io/python-or-r-for-data-science/</a>
</li>

<li>nbviewer: A simple way to share Jupyter Notebooks<br />
<a href="https://nbviewer.org/">https://nbviewer.org/</a>
</li>

<li>AI vs Machine Learning (Youtube)<br />
<a href="https://www.youtube.com/watch?v=4RixMPF4xis">https://www.youtube.com/watch?v=4RixMPF4xis</a>
</li>

<li>Machine Learning | What Is Machine Learning? | Introduction To Machine Learning | 2024 | Simplilearn (Youtube)<br />
<a href="https://www.youtube.com/watch?v=ukzFI9rgwfU">https://www.youtube.com/watch?v=ukzFI9rgwfU</a>
</li>

<li>A Gentle Introduction to Machine Learning (Youtube)<br />
<a href="https://www.youtube.com/watch?v=Gv9_4yMHFhI">https://www.youtube.com/watch?v=Gv9_4yMHFhI</a>
</li>

<li>Machine Learning vs Deep Learning<br />
<a href="https://www.youtube.com/watch?v=q6kJ71tEYqM">https://www.youtube.com/watch?v=q6kJ71tEYqM</a>
</li>

<li>Umělá inteligence (slajdy)<br />
<a href="https://slideplayer.cz/slide/12119218/">https://slideplayer.cz/slide/12119218/</a>
</li>

<li>Úvod do umělé inteligence<br />
<a href="https://slideplayer.cz/slide/2505525/">https://slideplayer.cz/slide/2505525/</a>
</li>

<li>Umělá inteligence I / Artificial Intelligence I<br />
<a href="https://ktiml.mff.cuni.cz/~bartak/ui/">https://ktiml.mff.cuni.cz/~bartak/ui/</a>
</li>

<li>Matplotlib vs. seaborn vs. Plotly vs. MATLAB vs. ggplot2 vs. pandas<br />
<a href="https://ritza.co/articles/matplotlib-vs-seaborn-vs-plotly-vs-MATLAB-vs-ggplot2-vs-pandas/">https://ritza.co/articles/matplotlib-vs-seaborn-vs-plotly-vs-MATLAB-vs-ggplot2-vs-pandas/</a>
</li>

<li>Matplotlib, Seaborn or Plotnine?<br />
<a href="https://www.reddit.com/r/datascience/comments/jvrqxt/matplotlib_seaborn_or_plotnine/">https://www.reddit.com/r/datascience/comments/jvrqxt/matplotlib_seaborn_or_plotnine/</a>
</li>

<li>@Rabeez: Rabeez/plotting_comparison.ipynb<br />
<a href="https://gist.github.com/Rabeez/ffc0b59d4a41e20fa8d944c44a96adbc">https://gist.github.com/Rabeez/ffc0b59d4a41e20fa8d944c44a96adbc</a>
</li>

<li>Matplotlib, Seaborn, Plotly and Plotnine Comparison<br />
<a href="https://python.plainenglish.io/matplotlib-seaborn-plotly-and-plotnine-comparison-baf2db5a9c40">https://python.plainenglish.io/matplotlib-seaborn-plotly-and-plotnine-comparison-baf2db5a9c40</a>
</li>

<li>Data Visualization 101: How to Choose a Python Plotting Library<br />
<a href="https://towardsdatascience.com/data-visualization-101-how-to-choose-a-python-plotting-library-853460a08a8a">https://towardsdatascience.com/data-visualization-101-how-to-choose-a-python-plotting-library-853460a08a8a</a>
</li>

<li>Data science in Python: pandas, seaborn, scikit-learn<br />
<a href="https://www.youtube.com/watch?v=3ZWuPVWq7p4">https://www.youtube.com/watch?v=3ZWuPVWq7p4</a>
</li>

<li>7.2. Real world datasets<br />
<a href="https://scikit-learn.org/stable/datasets/real_world.html#california-housing-dataset">https://scikit-learn.org/stable/datasets/real_world.html#california-housing-dataset</a>
</li>

<li>7.2.7. California Housing dataset<br />
<a href="https://scikit-learn.org/stable/datasets/real_world.html#california-housing-dataset">https://scikit-learn.org/stable/datasets/real_world.html#california-housing-dataset</a>
</li>

<li>Comprehensive Guide to Classification Models in Scikit-Learn<br />
<a href="https://www.geeksforgeeks.org/comprehensive-guide-to-classification-models-in-scikit-learn/">https://www.geeksforgeeks.org/comprehensive-guide-to-classification-models-in-scikit-learn/</a>
</li>

<li>Tidy Data Visualization: ggplot2 vs seaborn<br />
<a href="https://blog.tidy-intelligence.com/posts/ggplot2-vs-seaborn/">https://blog.tidy-intelligence.com/posts/ggplot2-vs-seaborn/</a>
</li>

<li>seaborn: statistical data visualization<br />
<a href="https://seaborn.pydata.org/">https://seaborn.pydata.org/</a>
</li>

<li>Linear regression (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Linear_regression">https://en.wikipedia.org/wiki/Linear_regression</a>
</li>

<li>Lineární regrese (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Line%C3%A1rn%C3%AD_regrese">https://cs.wikipedia.org/wiki/Line%C3%A1rn%C3%AD_regrese</a>
</li>

<li>Iris Flower Classification with MLP Classifier<br />
<a href="https://www.metriccoders.com/post/iris-flower-classification-with-mlp-classifier">https://www.metriccoders.com/post/iris-flower-classification-with-mlp-classifier</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

