<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">2. Neměnnost (immutability) datových struktur</a></p>
<p><a href="#k03">3. Perzistence datových struktur a sdílení struktury (<i>structural sharing</i>)</a></p>
<p><a href="#k04">4. Instalace knihovny <i>pyrsistent</i></a></p>
<p><a href="#k05">*** 5. Od standardních seznamů a n-tic k&nbsp;vektorům</a></p>
<p><a href="#k06">6. Interní implementace vektorů</a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Neměnnost (immutability) datových struktur</h2>

<p>Všech pět typů datových struktur (seznamů, vektorů, množin, map a front) má
několik důležitých společných vlastností. Základní vlastností společnou všem
pěti typům datových struktur je jejich <i>neměnnost (immutability)</i>. To
znamená, že již ve chvíli, kdy je některá datová struktura vytvořena, je po
celou další dobu její existence v&nbsp;běžícím programu určen její obsah,
tj.&nbsp;hodnoty všech prvků struktury &ndash; ovšem termín <i>hodnota</i> je
zde chápán ve smyslu programovacího jazyka Python. Na první pohled to sice
možná může vypadat zvláštně, ale i s&nbsp;takto se chovajícími strukturami je
možné v&nbsp;reálným programech pracovat a to dokonce velmi efektivním způsobem
(navíc se i zjednodušuje testování aplikace). Ostatně i v&nbsp;samotném Pythonu
jsou některé hodnoty a objekty neměnné. Pravděpodobně nejviditelnějším
příkladem jsou řetězce a samozřejmě taktéž všechny hodnoty primitivního
datového typu (číslo, pravdivostní hodnota, None...).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Perzistence datových struktur a sdílení struktury (<i>structural sharing</i>)</h2>

<p>Kromě neměnnosti (<i>immutability</i>) je další společnou vlastností výše
zmíněných datových struktur i podpora pro znovupoužití již jednou alokovaných
bloků paměti při &bdquo;modifikaci&ldquo; těchto struktur. Ve skutečnosti víme,
že datové struktury jsou neměnné, takže do nich například nelze přidávat ani
z&nbsp;nich ubírat prvky. To nám však nezabraňuje vytvořit novou strukturu
s&nbsp;přidaným, vymazaným či změněným prvkem &ndash; a to většinou bez
nutnosti klonování původních dat. Většina standardních operací poskytovaných
knihovnou <i>pyrsistent</i> se totiž snaží o to, aby jednou vytvořené sekvence
(dejme tomu pro jednoduchost seznam) mohly být znovupoužity i v&nbsp;případě,
že je vytvořen nový seznam, který v&nbsp;sobě obsahuje i seznam starší. Ten
stále existuje a mohou na něj existovat reference používané například i
v&nbsp;jiných paralelně běžících workerech či ve vláknech &ndash; což nám nijak
nevadí, protože tato vlákna (či korutiny) nemohou (až na výjimky popsané dále)
obsah struktury modifikovat.</p>

<p>Vzhledem k&nbsp;tomu, že se obsah starého seznamu nemůže změnit (seznam je
neměnitelný), může například nějaká funkce jednoduše k&nbsp;seznamu přidat nový
první prvek (<i>head</i>) s&nbsp;tím, že tento prvek ukazuje na původní seznam
&ndash; jinými slovy není nutné, alespoň v&nbsp;tomto případě, vytvářet kopii
(ať již plytkou či hlubokou) původního seznamu, což přispívá k&nbsp;tomu, že
mnohé operace nad kolekcemi jsou ve skutečnosti velmi rychlé, i když by se
podle jejich popisu mohlo zdát, že jejich implementace vyžaduje provedení
časově složitých operací. Je pouze důležité si zvolit správnou datovou
strukturu, což se v&nbsp;praxi týká rozhodování mezi použitím seznamů, vektorů
či front.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;praxi se většinou setkáme
s&nbsp;mapami a vektory.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace knihovny <i>pyrsistent</i></h2>

<p>Knihovna <i>pyrsistent</i> je nabízena přes <a
href="https://pypi.org/project/pyrsistent">PyPi</a> a navíc nevyžaduje žádné
(tranzitivní) závislosti, takže její instalace by měla být jednoduchá a
přímočará. Knihovnu nainstalujeme pro aktuálně přihlášeného uživatele
následujícím způsobem:</p>

<pre>
$ <strong>pip3 install --user pyrsistent</strong>
&nbsp;
Collecting pyrsistent
  Downloading pyrsistent-0.18.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (119 kB)
     |████████████████████████████████| 119 kB 2.1 MB/s            
Installing collected packages: pyrsistent
Successfully installed pyrsistent-0.18.1
</pre>

<p>V&nbsp;kontextu &bdquo;moderních&ldquo; frameworků se jedná o relativně
malou knihovnu uloženou v&nbsp;několika souborech:</p>

<pre>
$ <strong>ls -l /home/ptisnovs/.local/lib/python3.8/site-packages/pyrsistent</strong>
&nbsp;
total 332
-rw-rw-r-- 1 ptisnovs ptisnovs 18372 Jun 27 15:14 _checked_types.py
-rw-rw-r-- 1 ptisnovs ptisnovs 11963 Jun 27 15:14 _field_common.py
-rw-rw-r-- 1 ptisnovs ptisnovs  3232 Jun 27 15:14 _helpers.py
-rw-rw-r-- 1 ptisnovs ptisnovs  3534 Jun 27 15:14 _immutable.py
-rw-rw-r-- 1 ptisnovs ptisnovs  1479 Jun 27 15:14 __init__.py
-rw-rw-r-- 1 ptisnovs ptisnovs  7188 Jun 27 15:14 __init__.pyi
-rw-rw-r-- 1 ptisnovs ptisnovs  6730 Jun 27 15:14 _pbag.py
-rw-rw-r-- 1 ptisnovs ptisnovs  9702 Jun 27 15:14 _pclass.py
-rw-rw-r-- 1 ptisnovs ptisnovs 12203 Jun 27 15:14 _pdeque.py
-rw-rw-r-- 1 ptisnovs ptisnovs  8293 Jun 27 15:14 _plist.py
-rw-rw-r-- 1 ptisnovs ptisnovs 14702 Jun 27 15:14 _pmap.py
-rw-rw-r-- 1 ptisnovs ptisnovs  7032 Jun 27 15:14 _precord.py
-rw-rw-r-- 1 ptisnovs ptisnovs  5693 Jun 27 15:14 _pset.py
-rw-rw-r-- 1 ptisnovs ptisnovs 22694 Jun 27 15:14 _pvector.py
drwxrwxr-x 2 ptisnovs ptisnovs  4096 Jun 27 15:14 __pycache__
-rw-rw-r-- 1 ptisnovs ptisnovs     0 Jun 27 15:14 py.typed
-rw-rw-r-- 1 ptisnovs ptisnovs  3428 Jun 27 15:14 _toolz.py
-rw-rw-r-- 1 ptisnovs ptisnovs  3800 Jun 27 15:14 _transformations.py
-rw-rw-r-- 1 ptisnovs ptisnovs  1767 Jun 27 15:14 typing.py
-rw-rw-r-- 1 ptisnovs ptisnovs 10409 Jun 27 15:14 typing.pyi
</pre>

<p>Její celková velikost nepřesahuje 1MB:</p>

<pre>
$ <strong>du -h /home/ptisnovs/.local/lib/python3.8/site-packages/pyrsistent</strong>
&nbsp;
296K    /home/ptisnovs/.local/lib/python3.8/site-packages/pyrsistent/__pycache__
628K    /home/ptisnovs/.local/lib/python3.8/site-packages/pyrsistent
</pre>

<p>Kontrola, zda je možné knihovnu <i>pyrsistent</i> naimportovat:</p>

<pre>
$ <strong>python3</strong>
&nbsp;
Python 3.8.10 (default, Mar 15 2022, 12:22:08) 
[GCC 9.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; <strong>import pyrsistent</strong>
&gt;&gt;&gt; <strong>help(pyrsistent)</strong>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. Interní implementace vektorů</h2>

<p>V&nbsp;programovacím jazyku <i>Pythonu</i> je možné na mnoha místech
standardní seznamy nahradit za vektory, protože práce s&nbsp;vektory může být
více efektivní. Vektor můžeme považovat za jednorozměrné pole hodnot
libovolných typů, takže by se mohlo zdát, že složitost přístupu k&nbsp;jeho
prvkům bude konstantní <i>O(N)</i>. Ve skutečnosti jsou však vektory interně
implementovány poněkud složitějším (a velmi zajímavým) způsobem a to především
z&nbsp;toho důvodu, aby bylo snadné k&nbsp;vektorům připojovat další prvky
&ndash; tak vznikne nový vektor, ovšem původní vektor musí samozřejmě zůstat
zachovaný (<i>structural sharing</i>). Z&nbsp;tohoto důvodu se v&nbsp;knihovně
<i>pyrsistent</i> (ale i v&nbsp;Clojure a v&nbsp;některých dalších moderních
programovacích jazycích) používají pro implementaci vektorů takzvané
<i>RRB-Stromy (RRB-Trees, Relaxed Radix Balanced Trees)</i>.
V&nbsp;<i>pyrsistent</i> jsou použity (vyvážené) RRB-stromy, které mají
v&nbsp;každém listu uloženo jednorozměrné pole o délce 32 prvků.
V&nbsp;případě, že se pracuje s&nbsp;kratším vektorem, je pro jeho uložení
použit strom pouze s&nbsp;jedním listem a tudíž je vektor skutečně
reprezentován jednorozměrným polem (ve skutečnosti se vedle vlastního stromu
používá ještě pomocné pole <strong>tail</strong>, pro jednoduchost však jeho
roli v&nbsp;tomto textu poněkud zanedbáme).</p>

<p>U delších vektorů se v&nbsp;32prvkovém poli uloženém v&nbsp;kořenu stromu
<strong>ne</strong>nachází přímo prvky vektoru, ale reference na další listy,
z&nbsp;nichž každý opět obsahuje 32prvkové pole. To znamená, že vektor
s&nbsp;až 1024 prvky může být uložen ve stromu o výšce 1, ve stromu o výšce 2
je celkový (možný) počet prvků vektoru roven 32768 (1024 listů á 32 prvků) atd.
Operace vrácení <i>n</i>-tého prvku má tedy složitost
<i>O(log<sub>32</sub>N)</i>, což sice není konstantní složitost <i>O(1)</i>,
ale pro vektory běžných délek můžeme tuto složitost taktéž považovat za
konstantní. Předností vektorů je tedy rychlejší přístup k&nbsp;jeho prvkům, ale
nesmíme zapomenout ani na paměťové nároky &ndash; vektory interně potřebují
mnohem méně referencí, než je tomu u lineárně vázaných seznamů, tudíž i
paměťové nároky budou nižší, a to zejména na 64bitových systémech.</p>

<p><div class="rs-tip-major">Poznámka: obecně lze říci, že platí, že pro větší
množství prvků začínají být hierarchické datové struktury (tedy typicky různé
stromy) výhodnější, než lineární struktury typu seznam. Ostatně právě proto se
s&nbsp;různými variantami stromů setkáme například v&nbsp;oblasti
databází.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 a knihovnu <i>pyrsistent</i> byly uloženy do Git
repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>list01.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list01.py</a></td></tr>
<tr><td> 2</td><td>list02.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list02.py</a></td></tr>
<tr><td> 3</td><td>list03.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list03.py</a></td></tr>
<tr><td> 4</td><td>list04.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list04.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>tuple01.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/tuple01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/tuple01.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>vectors01.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors01.py</a></td></tr>
<tr><td> 7</td><td>vectors02.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors02.py</a></td></tr>
<tr><td> 8</td><td>vectors03.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors03.py</a></td></tr>
<tr><td> 9</td><td>vectors04.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors04.py</a></td></tr>
<tr><td>10</td><td>vectors05.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors05.py</a></td></tr>
<tr><td>11</td><td>vectors06.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors06.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/</a></td></tr>
<tr><td>15</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Persistent data structure<br />
<a href="https://en.wikipedia.org/wiki/Persistent_data_structure">https://en.wikipedia.org/wiki/Persistent_data_structure</a>
</li>

<li>Collections (Python)<br />
<a href="https://docs.python.org/3/library/collections.abc.html">https://docs.python.org/3/library/collections.abc.html</a>
</li>

<li>Immutable object<br />
<a href="https://en.wikipedia.org/wiki/Immutable_object">https://en.wikipedia.org/wiki/Immutable_object</a>
</li>

<li>pyrsistent na PyPi<br />
<a href="https://pypi.org/project/pyrsistent/">https://pypi.org/project/pyrsistent/</a>
</li>

<li>pyrsistent na GitHubu<br />
<a href="https://github.com/tobgu/pyrsistent">https://github.com/tobgu/pyrsistent</a>
</li>

<li>Dokumentace knihovny pyrsistent<br />
<a href="https://pyrsistent.readthedocs.io/en/latest/index.html">https://pyrsistent.readthedocs.io/en/latest/index.html</a>
</li>

<li>Mori na GitHubu<br />
<a href="https://github.com/swannodette/mori">https://github.com/swannodette/mori</a>
</li>

<li>Mori: popis API (dokumentace)<br />
<a href="http://swannodette.github.io/mori/">http://swannodette.github.io/mori/</a>
</li>

<li>Mori: Benchmarking<br />
<a href="https://github.com/swannodette/mori/wiki/Benchmarking">https://github.com/swannodette/mori/wiki/Benchmarking</a>
</li>

<li>Functional data structures in JavaScript with Mori<br />
<a href="http://sitr.us/2013/11/04/functional-data-structures.html">http://sitr.us/2013/11/04/functional-data-structures.html</a>
</li>

<li>Immutable.js<br />
<a href="https://facebook.github.io/immutable-js/">https://facebook.github.io/immutable-js/</a>
</li>

<li>Understanding Clojure's Persistent Vectors, pt. 1<br />
<a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1">http://hypirion.com/musings/understanding-persistent-vector-pt-1</a>
</li>

<li>Hash array mapped trie (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Hash_array_mapped_trie">https://en.wikipedia.org/wiki/Hash_array_mapped_trie</a>
</li>

<li>Java theory and practice: To mutate or not to mutate?<br />
<a href="http://www.ibm.com/developerworks/java/library/j-jtp02183/index.html">http://www.ibm.com/developerworks/java/library/j-jtp02183/index.html</a>
</li>

<li>Efficient persistent (immutable) data structures<br />
<a href="https://persistent.codeplex.com/">https://persistent.codeplex.com/</a>
</li>

<li>Clojure (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Clojure">http://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Clojure (Wikipedia CS)<br />
<a href="http://cs.wikipedia.org/wiki/Clojure">http://cs.wikipedia.org/wiki/Clojure</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

