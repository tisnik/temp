<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Pyrsistent: persistentní datové struktury v Pythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Pyrsistent: persistentní datové struktury v Pythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Některé vlastnosti programovacího jazyka Clojure inspirovaly i vývojáře používající jiné jazyky. Týká se to zejména jedné velmi důležité oblasti &ndash; persistentních datových struktur. Ty byly několikrát reimplementovány, v jazyce Python například v projektu pyrsistent.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Pyrsistent: persistentní datové struktury v&nbsp;Pythonu</a></p>
<p><a href="#k02">2. Neměnnost (immutability) datových struktur</a></p>
<p><a href="#k03">3. Persistence datových struktur a sdílení struktury (<i>structural sharing</i>)</a></p>
<p><a href="#k04">4. Instalace knihovny <i>pyrsistent</i></a></p>
<p><a href="#k05">5. Od standardních seznamů a n-tic k&nbsp;vektorům</a></p>
<p><a href="#k06">6. Interní implementace vektorů</a></p>
<p><a href="#k07">7. Základní operace s&nbsp;vektory</a></p>
<p><a href="#k08">8. Persistence kontejneru</a></p>
<p><a href="#k09">9. Persistence kontejneru vs.&nbsp;neměnnost hodnot v&nbsp;něm uložených</a></p>
<p><a href="#k10">10. Přístup k&nbsp;prvkům vektorů</a></p>
<p><a href="#k11">11. Slicing</a></p>
<p><a href="#k12">12. Persistentní mapy a množiny</a></p>
<p><a href="#k13">13. Persistentní množiny</a></p>
<p><a href="#k14">14. Konstrukce persistentních množin</a></p>
<p><a href="#k15">15. Operace <strong>add</strong> a <strong>remove</strong></a></p>
<p><a href="#k16">16. Množinové operace</a></p>
<p><a href="#k17">17. Test na existenci prvku v&nbsp;množině</a></p>
<p><a href="#k18">18. Obsah druhé části článku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Pyrsistent: persistentní datové struktury v&nbsp;Pythonu</h2>

<p>V&nbsp;dnešním článku se seznámíme s&nbsp;jednou implementací
<i>persistentních</i> datových struktur určenou pro použití
v&nbsp;programovacím jazyku Python. Tato implementace je nabízena knihovnou
pojmenovanou příznačně <i>pyrsistent</i>. Autoři této knihovny se přitom
inspirovali <a href="https://www.root.cz/vyhledavani/?qs=clojure">programovacím
jazykem Clojure</a>, jenž je do značné míry postaven právě na persistentních
datových strukturách a taktéž na neměnných hodnotách (což ovšem nejsou zcela
totožné pojmy). V&nbsp;knihovně <i>pyrsistent</i> nalezneme zejména tuto pětici
datových struktur neboli kontejnerů:</p>

<ol>
<li>pvector &ndash; persistentní vektor, obdoba Pythonovského seznamu</li>
<li>pset &ndash; persistentní množina</li>
<li>pmap &ndash; persistentní mapa (asociativní pole)</li>
<li>plist &ndash; persistentní seznam (interně dosti odlišný od vektorů)</li>
<li>pdeque &ndash; persistentní obousměrná fronta</li>
</ol>

<p>To však není vše, protože v&nbsp;knihovně <i>pyrsistent</i> nalezneme i
další zajímavosti &ndash; precord, pclass atd., kterým se budeme věnovat
jindy.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Neměnnost (immutability) datových struktur</h2>

<p>Všech pět typů datových struktur (seznamů, vektorů, množin, map a front) má
několik důležitých společných vlastností. Základní vlastností společnou všem
pěti typům datových struktur je jejich <i>neměnnost (immutability)</i>. To
znamená, že již ve chvíli, kdy je některá datová struktura vytvořena, je po
celou další dobu její existence v&nbsp;běžícím programu určen její obsah,
tj.&nbsp;hodnoty všech prvků struktury &ndash; ovšem termín <i>hodnota</i> je
zde chápán ve smyslu programovacího jazyka Python. Na první pohled to sice
možná může vypadat zvláštně, ale i s&nbsp;takto se chovajícími strukturami je
možné v&nbsp;reálným programech pracovat a to dokonce velmi efektivním způsobem
(navíc se i zjednodušuje testování aplikace). Ostatně i v&nbsp;samotném Pythonu
jsou některé hodnoty a objekty neměnné. Pravděpodobně nejviditelnějším
příkladem jsou řetězce a samozřejmě taktéž všechny hodnoty primitivního
datového typu (číslo, pravdivostní hodnota, None...).</p>

<p><div class="rs-tip-major">Poznámka: striktně řečeno nejsou datové struktury
z&nbsp;knihovny <i>pyrsistent</i> zcela neměnitelné, což je mj.&nbsp;dáno i
vlastnostmi samotného Pythonu, jak uvidíme dále.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Persistence datových struktur a sdílení struktury (<i>structural sharing</i>)</h2>

<p>Kromě (ne zcela na 100% dodržené) neměnnosti (<i>immutability</i>) je další
společnou vlastností výše zmíněných datových struktur i podpora pro
znovupoužití již jednou alokovaných bloků paměti při &bdquo;modifikaci&ldquo;
těchto struktur. Ve skutečnosti víme, že datové struktury jsou persistentní,
takže do nich například nelze přidávat ani z&nbsp;nich ubírat prvky. To nám
však nezabraňuje vytvořit novou strukturu s&nbsp;přidaným, vymazaným či
změněným prvkem &ndash; a to většinou bez nutnosti klonování původních dat.
Většina standardních operací poskytovaných knihovnou <i>pyrsistent</i> se totiž
snaží o to, aby jednou vytvořené sekvence (dejme tomu pro jednoduchost seznam)
mohly být znovupoužity i v&nbsp;případě, že je vytvořen nový seznam, který
v&nbsp;sobě obsahuje i seznam starší. Ten stále existuje a mohou na něj
existovat reference používané například i v&nbsp;jiných paralelně běžících
workerech či ve vláknech &ndash; což nám nijak nevadí ani nás to nijak
neomezuje, protože tato vlákna (či korutiny) nemohou (až na výjimky popsané
dále) obsah struktury modifikovat.</p>

<p>Vzhledem k&nbsp;tomu, že se obsah starého seznamu nemůže změnit (seznam je
neměnitelný), může například nějaká funkce jednoduše k&nbsp;seznamu přidat nový
první prvek (<i>head</i>) s&nbsp;tím, že tento prvek ukazuje na původní seznam
&ndash; jinými slovy není nutné, alespoň v&nbsp;tomto případě, vytvářet kopii
(ať již plytkou či hlubokou) původního seznamu, což přispívá k&nbsp;tomu, že
mnohé operace nad persistentními strukturami jsou ve skutečnosti velmi rychlé,
i když by se podle jejich popisu mohlo zdát, že jejich implementace vyžaduje
provedení časově složitých operací. Je pouze důležité si zvolit správnou
datovou strukturu, což se v&nbsp;praxi týká rozhodování mezi použitím seznamů,
vektorů či množin (asi nejvíce přehlížená struktura vůbec).</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;praxi se většinou setkáme
s&nbsp;mapami a vektory.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace knihovny <i>pyrsistent</i></h2>

<p>Knihovna <i>pyrsistent</i> je nabízena přes <a
href="https://pypi.org/project/pyrsistent">PyPi</a> a navíc nevyžaduje žádné
(tranzitivní) závislosti, takže její instalace by měla být jednoduchá a
přímočará. Knihovnu nainstalujeme pro aktuálně přihlášeného uživatele
následujícím způsobem:</p>

<pre>
$ <strong>pip3 install --user pyrsistent</strong>
&nbsp;
Collecting pyrsistent
  Downloading pyrsistent-0.18.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (119 kB)
     |████████████████████████████████| 119 kB 2.1 MB/s            
Installing collected packages: pyrsistent
Successfully installed pyrsistent-0.18.1
</pre>

<p>V&nbsp;kontextu &bdquo;moderních&ldquo; frameworků se jedná o relativně
malou knihovnu uloženou v&nbsp;několika souborech, o čemž se můžeme snadno
přesvědčit:</p>

<pre>
$ <strong>ls -l /home/ptisnovs/.local/lib/python3.8/site-packages/pyrsistent</strong>
&nbsp;
total 332
-rw-rw-r-- 1 ptisnovs ptisnovs 18372 Jun 27 15:14 _checked_types.py
-rw-rw-r-- 1 ptisnovs ptisnovs 11963 Jun 27 15:14 _field_common.py
-rw-rw-r-- 1 ptisnovs ptisnovs  3232 Jun 27 15:14 _helpers.py
-rw-rw-r-- 1 ptisnovs ptisnovs  3534 Jun 27 15:14 _immutable.py
-rw-rw-r-- 1 ptisnovs ptisnovs  1479 Jun 27 15:14 __init__.py
-rw-rw-r-- 1 ptisnovs ptisnovs  7188 Jun 27 15:14 __init__.pyi
-rw-rw-r-- 1 ptisnovs ptisnovs  6730 Jun 27 15:14 _pbag.py
-rw-rw-r-- 1 ptisnovs ptisnovs  9702 Jun 27 15:14 _pclass.py
-rw-rw-r-- 1 ptisnovs ptisnovs 12203 Jun 27 15:14 _pdeque.py
-rw-rw-r-- 1 ptisnovs ptisnovs  8293 Jun 27 15:14 _plist.py
-rw-rw-r-- 1 ptisnovs ptisnovs 14702 Jun 27 15:14 _pmap.py
-rw-rw-r-- 1 ptisnovs ptisnovs  7032 Jun 27 15:14 _precord.py
-rw-rw-r-- 1 ptisnovs ptisnovs  5693 Jun 27 15:14 _pset.py
-rw-rw-r-- 1 ptisnovs ptisnovs 22694 Jun 27 15:14 _pvector.py
drwxrwxr-x 2 ptisnovs ptisnovs  4096 Jun 27 15:14 __pycache__
-rw-rw-r-- 1 ptisnovs ptisnovs     0 Jun 27 15:14 py.typed
-rw-rw-r-- 1 ptisnovs ptisnovs  3428 Jun 27 15:14 _toolz.py
-rw-rw-r-- 1 ptisnovs ptisnovs  3800 Jun 27 15:14 _transformations.py
-rw-rw-r-- 1 ptisnovs ptisnovs  1767 Jun 27 15:14 typing.py
-rw-rw-r-- 1 ptisnovs ptisnovs 10409 Jun 27 15:14 typing.pyi
</pre>

<p>Její celková velikost nepřesahuje 1MB:</p>

<pre>
$ <strong>du -h /home/ptisnovs/.local/lib/python3.8/site-packages/pyrsistent</strong>
&nbsp;
296K    /home/ptisnovs/.local/lib/python3.8/site-packages/pyrsistent/__pycache__
628K    /home/ptisnovs/.local/lib/python3.8/site-packages/pyrsistent
</pre>

<p>Kontrola, zda je možné knihovnu <i>pyrsistent</i> naimportovat:</p>

<pre>
$ <strong>python3</strong>
&nbsp;
Python 3.8.10 (default, Mar 15 2022, 12:22:08) 
[GCC 9.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; <strong>import pyrsistent</strong>
&gt;&gt;&gt; <strong>help(pyrsistent)</strong>
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Od standardních seznamů a n-tic k&nbsp;vektorům</h2>

<p>Nejprve si zopakujme základní informace o standardních datových strukturách
Pythonu &ndash; konkrétně o n-ticích a seznamech. N-tice je vlastně jediným
skutečně persistentním a současně i neměnným kontejnerem, protože po její
konstrukci je již možné n-tice pouze spojovat (bez sdílení struktury)
popř.&nbsp;získávat z&nbsp;n-tice jednotlivé prvky:</p>

<pre>
t1 = (1, 2, 3)
t2 = <strong>t1 + (4, )</strong>
&nbsp;
print(t1)
print(t2)
</pre>

<p>Naproti tomu seznamy persistentní nejsou, protože do nich je možné přidávat
nové prvky popř.&nbsp;prvky mazat (pomocí <strong>del</strong>):</p>

<pre>
list1 = [1, "foo", (1, 2, 3), None]
print(list1)
print(type(list1))
&nbsp;
<strong>list1.append("Five!")</strong>
print(list1)
print(type(list1))
</pre>

<p>Prvky seznamů jsou taktéž obecně měnitelné (zde konkrétně poslední &ndash;
pátý &ndash; prvek seznamu):</p>

<pre>
<strong>l = []</strong>
&nbsp;
list1 = [1, "foo", (1, 2, 3), <strong>l</strong>]
print(list1)
print(type(list1))
&nbsp;
<strong>l.append(1)</strong>
print(list1)
print(type(list1))
&nbsp;
<strong>l.append(2)</strong>
print(list1)
print(type(list1))
&nbsp;
l = []
print(list1)
print(type(list1))
</pre>

<p>A měnitelnost seznamů vede i k&nbsp;takovým &bdquo;paradoxům&ldquo;, že
seznam může obsahovat sám sebe, což musí být interně řešeno specializovaným
kódem:</p>

<pre>
list1 = [1, 2, 3]
print(list1)
print(type(list1))
&nbsp;
<strong>list1.append(list1)</strong>
print(list1)
print(type(list1))
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Interní implementace vektorů</h2>

<p>V&nbsp;programovacím jazyku <i>Python</i> je možné na mnoha místech
standardní seznamy nahradit za vektory, protože práce s&nbsp;vektory může být
více efektivní, například ve vícevláknových programech. Vektor můžeme považovat
za jednorozměrné pole hodnot libovolných typů, takže by se mohlo zdát, že
složitost přístupu k&nbsp;jeho prvkům bude konstantní <i>O(N)</i>. Ve
skutečnosti jsou však vektory interně implementovány poněkud složitějším (a
velmi zajímavým) způsobem a to především z&nbsp;toho důvodu, aby bylo snadné
k&nbsp;vektorům připojovat další prvky &ndash; tak vznikne nový vektor, ovšem
původní vektor musí samozřejmě zůstat zachovaný (<i>structural sharing</i>).
Z&nbsp;tohoto důvodu se v&nbsp;knihovně <i>pyrsistent</i> (ale i v&nbsp;Clojure
a v&nbsp;některých dalších moderních programovacích jazycích) používají pro
implementaci vektorů takzvané <i>RRB-Stromy (RRB-Trees, Relaxed Radix Balanced
Trees)</i>. V&nbsp;<i>pyrsistent</i> jsou použity (vyvážené) RRB-stromy, které
mají v&nbsp;každém listu uloženo jednorozměrné pole o délce 32 prvků.
V&nbsp;případě, že se pracuje s&nbsp;kratším vektorem, je pro jeho uložení
použit strom pouze s&nbsp;jedním listem a tudíž je vektor skutečně
reprezentován jednorozměrným polem (ve skutečnosti se vedle vlastního stromu
používá ještě pomocné pole <strong>tail</strong>, pro jednoduchost však jeho
roli v&nbsp;tomto textu poněkud zanedbáme).</p>

<p>U delších vektorů se v&nbsp;32prvkovém poli uloženém v&nbsp;kořenu stromu
<strong>ne</strong>nachází přímo prvky vektoru, ale reference na další listy,
z&nbsp;nichž každý opět obsahuje 32prvkové pole. To znamená, že vektor
s&nbsp;až 1024 prvky může být uložen ve stromu o výšce 1, ve stromu o výšce 2
je celkový (možný) počet prvků vektoru roven 32768 (1024 listů á 32 prvků) atd.
Operace vrácení <i>n</i>-tého prvku má tedy složitost
<i>O(log<sub>32</sub>N)</i>, což sice není konstantní složitost <i>O(1)</i>,
ale pro vektory běžných délek můžeme tuto složitost taktéž považovat prakticky
za konstantní. Předností vektorů je tedy rychlejší přístup k&nbsp;jeho prvkům,
ale nesmíme zapomenout ani na paměťové nároky &ndash; vektory interně potřebují
mnohem méně referencí, než je tomu u lineárně vázaných seznamů, tudíž i
paměťové nároky budou nižší, a to zejména na 64bitových systémech.</p>

<p><div class="rs-tip-major">Poznámka: obecně lze říci, že platí, že pro větší
množství prvků začínají být hierarchické datové struktury (tedy typicky různé
stromy) výhodnější, než lineární struktury typu seznam. Ostatně právě proto se
s&nbsp;různými variantami stromů setkáme například v&nbsp;oblasti
databází.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Základní operace s&nbsp;vektory</h2>

<p>Vektor se vytváří s&nbsp;využitím konstruktoru nazvaného jednoduše
<strong>v</strong>. V&nbsp;dalším příkladu je vektor vytvořen, následně je
zobrazen jeho obsah a pro jistotu je vypsán i jeho typ:</p>

<pre>
from pyrsistent import v
&nbsp;
vector1 = <strong>v(1, 2, 3)</strong>
print(vector1)
print(type(vector1))
</pre>

<p>Po spuštění tohoto demonstračního příkladu dostaneme na standardním výstupu
dva řádky:</p>

<pre>
pvector([1, 2, 3])
&lt;class 'pvectorc.PVector'&gt;
</pre>

<p>Jak je v&nbsp;Pythonu zvykem, nemusí být všechny prvky vektoru stejného typu
(ovšem na rozdíl od <i>NumPy</i>, kde je naopak typ všech prvků vektoru/matice
stejný). Toto chování je zachováno i u vektorů, což je patrné i
z&nbsp;následujícího demonstračního příkladu:</p>

<pre>
from pyrsistent import v
&nbsp;
vector1 = <strong>v(1, "foo", (1, 2, 3), None)</strong>
print(vector1)
print(type(vector1))
</pre>

<p>Podívejme se nyní na získané výsledky, které skutečně ukazují vektor
s&nbsp;prvky různého typu:</p>

<pre>
pvector([1, 'foo', (1, 2, 3), None])
&lt;class 'pvectorc.PVector'&gt;
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Persistence kontejneru vs.&nbsp;neměnnost hodnot v&nbsp;něm uložených</h2>

<p>Víme již, že samotný vektor (tj.&nbsp;jeden typ kontejneru) je persistentní,
tj.&nbsp;po konstrukci už do něj není možné prvky ani přidávat ani odebírat.
Operace &bdquo;přidání nového prvku&ldquo; sice existuje a je realizována
metodou nazvanou <strong>append</strong>, ovšem výsledkem bude nový vektor,
přičemž vektor původní bude nezměněn. Využívá se zde již výše zmíněné sdílení
struktury (<i>structural sharing</i>), takže se ve skutečnosti nemusí obsah
původního vektoru kopírovat do vektoru nového:</p>

<pre>
from pyrsistent import v
&nbsp;
vector1 = v(1, "foo", (1, 2, 3), None)
print(vector1)
print(type(vector1))
&nbsp;
vector2 = <strong>vector1.append("Five!")</strong>
print(vector1)
print(type(vector1))
&nbsp;
print(vector2)
print(type(vector2))
</pre>

<p>Z&nbsp;výsledků je patrné, že původní vektor <strong>vector1</strong> se
skutečně nezměnil:</p>

<pre>
pvector([1, 'foo', (1, 2, 3), None])
&lt;class 'pvectorc.PVector'&gt;
pvector([1, 'foo', (1, 2, 3), None])
&lt;class 'pvectorc.PVector'&gt;
pvector([1, 'foo', (1, 2, 3), None, 'Five!'])
&lt;class 'pvectorc.PVector'&gt;
</pre>

<p>Nyní se pokusme do vektoru uložit seznam (zpočátku prázdný) a následně
změnit původní proměnnou <strong>l</strong> takovým způsobem, aby obsahovala
(resp.&nbsp;přesněji řečeno ukazovala) na nový seznam:</p>

<pre>
from pyrsistent import v
&nbsp;
l = <strong>[]</strong>
&nbsp;
vector1 = v(1, "foo", (1, 2, 3), <strong>l</strong>)
print(vector1)
print(type(vector1))
&nbsp;
l = <strong>[1, 2, 3]</strong>
print(vector1)
print(type(vector1))
</pre>

<p>V&nbsp;tomto případě zůstane vektor nezměněný, protože do něho není uložena
přímo proměnná <strong>l</strong>, ale reference uložená v&nbsp;této proměnné
(a původní reference se novým přiřazením nezmění):</p>

<pre>
pvector([1, 'foo', (1, 2, 3), []])
&lt;class 'pvectorc.PVector'&gt;
pvector([1, 'foo', (1, 2, 3), []])
&lt;class 'pvectorc.PVector'&gt;
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Persistence kontejneru vs.&nbsp;neměnnost hodnot v&nbsp;něm uložených</h2>

<p>Z&nbsp;předchozí trojice demonstračních příkladů by se mohlo zdát, že
vektory jsou nejenom <i>persistentní</i>, ale i neměnné (<i>immutable</i>)
v&nbsp;původním slova smyslu &ndash; tj.&nbsp;že vektor je chápán jako jediná
v&nbsp;čase neměnná hodnota. To však ve skutečnosti není pravda ve chvíli, kdy
do vektoru uložíme měnitelný prvek. Hodnotu takového vektoru lze změnit
nepřímo, a to právě modifikací tohoto prvku.</p>

<p>Vyzkoušejme si to na seznamu vloženého do vektoru, do něhož posléze přidáme
nové prvky metodou <strong>append</strong> (ta se chová zcela odlišně, než je
tomu u vektorů):</p>

<pre>
from pyrsistent import v
&nbsp;
l = <strong>[]</strong>
&nbsp;
vector1 = v(1, "foo", (1, 2, 3), <strong>l</strong>)
print(vector1)
print(type(vector1))
&nbsp;
<strong>l.append(1)</strong>
print(vector1)
print(type(vector1))
&nbsp;
<strong>l.append(2)</strong>
print(vector1)
print(type(vector1))
&nbsp;
<strong>l = []</strong>
print(vector1)
print(type(vector1))
</pre>

<p>Z&nbsp;výsledků je nyní patrné, že se obsah vektoru skutečně změnil:</p>

<pre>
pvector([1, 'foo', (1, 2, 3), <strong>[]</strong>])
&lt;class 'pvectorc.PVector'&gt;
pvector([1, 'foo', (1, 2, 3), <strong>[1]</strong>])
&lt;class 'pvectorc.PVector'&gt;
pvector([1, 'foo', (1, 2, 3), <strong>[1, 2]</strong>])
&lt;class 'pvectorc.PVector'&gt;
pvector([1, 'foo', (1, 2, 3), <strong>[1, 2]</strong>])
&lt;class 'pvectorc.PVector'&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: poslední přiřazení prázdného seznamu do
proměnné <strong>l</strong> ovšem nemá na obsah vektoru pochopitelně už žádný
vliv.</div></p>

<p>Totéž ovšem platí i pro další typickou měnitelnou datovou strukturu
programovacího jazyka Python &ndash; pro mapy:</p>

<pre>
from pyrsistent import v
&nbsp;
m = <strong>{}</strong>
&nbsp;
vector1 = v(1, "foo", (1, 2, 3), <strong>m</strong>)
print(vector1)
print(type(vector1))
&nbsp;
<strong>m["one"] = 1</strong>
print(vector1)
print(type(vector1))
&nbsp;
<strong>m["two"] = 2</strong>
print(vector1)
print(type(vector1))
&nbsp;
m = {"jedna": 1,
     "dva": 2}
print(vector1)
print(type(vector1))
</pre>

<p>S&nbsp;výsledky ukazujícími, že i mapa je potenciálně problematickým prvkem
vektoru:</p>

<pre>
pvector([1, 'foo', (1, 2, 3), <strong>{}</strong>])
&lt;class 'pvectorc.PVector'&gt;
pvector([1, 'foo', (1, 2, 3), <strong>{'one': 1}</strong>])
&lt;class 'pvectorc.PVector'&gt;
pvector([1, 'foo', (1, 2, 3), <strong>{'one': 1, 'two': 2}</strong>])
&lt;class 'pvectorc.PVector'&gt;
pvector([1, 'foo', (1, 2, 3), <strong>{'one': 1, 'two': 2}</strong>])
&lt;class 'pvectorc.PVector'&gt;
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Přístup k&nbsp;prvkům vektorů</h2>

<p>K&nbsp;prvkům vektorů se přistupuje s&nbsp;využitím přetíženého operátoru
<strong>[]</strong>. Chování je přitom z&nbsp;pohledu uživatele totožné
s&nbsp;chováním běžných seznamů nebo n-tic &ndash; prvky se indexují od nuly,
nezáporné indexy se používají pro přístup k&nbsp;prvkům zleva (od začátku
vektorů), zatímco indexy záporné lze využít pro přístup k&nbsp;prvkům zprava
(tedy od konce vektorů):</p>

<pre>
from pyrsistent import v
&nbsp;
vector1 = v(1, "foo", (1, 2, 3), None)
print(vector1)
print(type(vector1))
&nbsp;
print(0, <strong>vector1[0]</strong>)
print(3, <strong>vector1[3]</strong>)
print(-1, <strong>vector1[-1]</strong>)
print(-2, <strong>vector1[-2]</strong>)
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
pvector([1, 'foo', (1, 2, 3), None])
&lt;class 'pvectorc.PVector'&gt;
0 1
3 None
-1 None
-2 (1, 2, 3)
</pre>

<p><div class="rs-tip-major">Poznámka: při pokusu o přístup
k&nbsp;neexistujícímu prvku se pochopitelně vyhodí výjimka typu
<strong>IndexError</strong> (konzistentnost se samotným Pythonem).</div></p>

<p>Časová složitost přístupu k&nbsp;prvku je &bdquo;téměř konstantní&ldquo;
&ndash; <i>O(log<sub>32</sub>N)</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Slicing</h2>

<p>Podle očekávání je podporován i <i>slicing</i>, tedy získání většího
množství prvků vektoru současně:</p>

<pre>
from pyrsistent import v
&nbsp;
vector1 = v(1, "foo", (1, 2, 3), None)
print(vector1)
print(type(vector1))
&nbsp;
print(<strong>vector1[1:3]</strong>)
print(<strong>vector1[1:]</strong>)
print(<strong>vector1[:3]</strong>)
print(<strong>vector1[:]</strong>)
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
pvector([1, 'foo', (1, 2, 3), None])
&lt;class 'pvectorc.PVector'&gt;
0 1
3 None
-1 None
-2 (1, 2, 3)
</pre>

<p>Použít lze i krok &ndash; rozdíl mezi indexy vybíraných prvků:</p>

<pre>
from pyrsistent import v
&nbsp;
vector1 = v(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(vector1)
print(type(vector1))
&nbsp;
print(<strong>vector1[3:7:2]</strong>)
print(<strong>vector1[3::2]</strong>)
print(<strong>vector1[:7:2]</strong>)
print(<strong>vector1[::2]</strong>)
</pre>

<p>Tentokrát s&nbsp;výsledky:</p>

<pre>
pvector([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
&lt;class 'pvectorc.PVector'&gt;
pvector([4, 6])
pvector([4, 6, 8, 10])
pvector([1, 3, 5, 7])
pvector([1, 3, 5, 7, 9])
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Persistentní mapy a množiny</h2>

<p>Nesmíme však zapomenout ani na zbylé strukturované datové typy &ndash;
kontejnery. Jedná se především o mapy (<i>maps</i>) a množiny (<i>sets</i>).
Především mapy jsou velmi důležité v&nbsp;mnoha aplikacích naprogramovaných
v&nbsp;Pythonu, neboť se s&nbsp;jejich využitím mohou vytvářet
struktury/záznamy (<i>structs/records</i>), hodnotové objekty atd. (primárně se
ovšem pro tyto účely používají třídy, což s&nbsp;sebou přináší další problémy).
Navíc jsou mapy zajímavé i z&nbsp;hlediska jejich implementace.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Persistentní množiny</h2>

<p>Nejprve se budeme zabývat persistentními množinami &ndash;
<strong>PSet</strong>. Interně se jedná o hierarchickou datovou strukturu
používanou ve chvíli, kdy nás zajímají především hodnoty (a někdy jen pouhá
existence) prvků a nikoli jejich vzájemné uspořádání. Prvky tedy nejsou
přístupné přes svůj index, ovšem můžeme zjišťovat, zda prvek s&nbsp;danou
hodnotou v&nbsp;množině existuje či nikoli. Podporovány jsou i základní
množinové operace, přičemž výsledkem bude nová množina (stávající množiny jsou
pochopitelně persistentní).</p>

<p>Mezi podporované operace patří:</p>

<ol>
<li>Přidání prvku do nové množiny, která sdílí strukturu s&nbsp;množinou původní</li>
<li>Odebrání prvku z&nbsp;nové množiny, která sdílí strukturu s&nbsp;množinou původní</li>
<li>Všechny základní množinové operace: sjednocení, průnik, diference, symetrická diference</li>
<li>Test, zda množina obsahuje daný prvek</li>
<li>Test, zda je jedna množina podmnožinou jiné množiny</li>
<li>Získání hodnoty všech prvků uložených v&nbsp;množině</li>
</ol>

<p><div class="rs-tip-major">Poznámka: přístup k&nbsp;prvkům je opět
&bdquo;téměř konstantní&ldquo;, konkrétně s&nbsp;časovou složitostí
<i>O(log<sub>32</sub>N)</i>.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Konstrukce persistentních množin</h2>

<p>Zatímco persistentní vektory se vytváří konstruktorem <strong>v</strong>,
jsou persistentní množiny vytvářeny konstruktorem nazvaným jednoduše
<strong>s</strong>, kterému se předají všechny prvky, které mají být do množiny
vloženy:</p>

<pre>
from pyrsistent import s
&nbsp;
set1 = <strong>s(1,2,3)</strong>
&nbsp;
print(set1)
print(type(set1))
</pre>

<p>Po spuštění tohoto skriptu by se měla zobrazit množina se třemi prvky a
současně i její typ (<strong>persistent._pset.PSet</strong>):</p>

<pre>
pset([1, 2, 3])
&lt;class 'pyrsistent._pset.PSet'&gt;
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Operace <strong>add</strong> a <strong>remove</strong></h2>

<p>Persistentní množiny nabízí dvě metody <strong>add</strong> a
<strong>remove</strong> určené pro &bdquo;přidání&ldquo; a
&bdquo;odebrání&ldquo; prvků z&nbsp;množiny. Ovšem vzhledem k&nbsp;tomu, že
množiny jsou persistentní, není původní množina modifikována. Namísto toho je
vytvořena množina nová s&nbsp;přidaným/ubraným prvkem. Opět se zde do velké
míry využívá sdílení interní struktury:</p>

<pre>
from pyrsistent import s
&nbsp;
set1 = <strong>s(1,2,3)</strong>
set2 = <strong>set1.add(4)</strong>
&nbsp;
print(set1)
print(type(set1))
&nbsp;
print(set2)
print(type(set2))
</pre>

<p>Přidáním prvku není původní množina změněna:</p>

<pre>
pset([1, 2, 3])
&lt;class 'pyrsistent._pset.PSet'&gt;
pset([1, 2, 3, 4])
&lt;class 'pyrsistent._pset.PSet'&gt;
</pre>

<p>a:</p>

<pre>
from pyrsistent import s
&nbsp;
set1 = <strong>s(1,2,3)</strong>
set2 = <strong>set1.remove(1)</strong>
&nbsp;
print(set1)
print(type(set1))
&nbsp;
print(set2)
print(type(set2))
</pre>

<p>Opět platí, že odebráním prvku není původní množina změněna:</p>

<pre>
pset([1, 2, 3])
&lt;class 'pyrsistent._pset.PSet'&gt;
pset([2, 3])
&lt;class 'pyrsistent._pset.PSet'&gt;
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Množinové operace</h2>

<p>Mezi základní množinové operace patří sjednocení (<i>union</i>), průnik
(<i>intersection</i>), rozdíl množin (<i>difference</i>) a symetrická
diference. Pro provedení prvních tří operací slouží přetížené operátory |,
&amp; a -, přičemž jejich výsledkem je vždy nová persistentní množina. U těchto
operací však není zaručeno, že dochází ke sdílení struktury (<i>structural
sharing</i>):</p>

<pre>
from pyrsistent import s
&nbsp;
set1 = s(1,2,3)
set2 = s(2,3,4)
&nbsp;
print(set1)
print(set2)
&nbsp;
print("sjednoceni", <strong>set1 | set2</strong>)
print("prunik", <strong>set1 &amp; set2</strong>)
print("rozdil", <strong>set1 - set2</strong>)
print("rozdil", <strong>set2 - set1</strong>)
</pre>

<p>Povšimněte si, že výsledkem množinových operací nad persistentními množinami
je skutečně vždy nová persistentní množina:</p>

<pre>
pset([1, 2, 3])
pset([2, 3, 4])
sjednoceni pset([1, 2, 3, 4])
prunik pset([2, 3])
rozdil pset([1])
rozdil pset([4])
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Test na existenci prvku v&nbsp;množině</h2>

<p>Poslední množinovou operací, s&nbsp;níž se v&nbsp;dnešním článku setkáme, je
test, zda je určitý prvek (hodnota) prvkem dané množiny či nikoli. Pro tento
účel se používá přetížený operátor <strong>in</strong>, jehož časová složitost
je v&nbsp;případě persistentních množin <i>O(log<sub>32</sub>N)</i>, tedy jak
již víme &bdquo;prakticky konstantní&ldquo;.</p>

<p>V&nbsp;demonstračním příkladu postupně testujeme, jestli množina {1, 2, 3}
obsahuje prvky 0, 1, 2, 3 a 4:</p>

<pre>
from pyrsistent import s
&nbsp;
set1 = s(1,2,3)
&nbsp;
for i in range(0, 5):
    print(i, <strong>i in set1</strong>)
</pre>

<p>Výsledky zobrazené na standardním výstupu:</p>

<pre>
0 False
1 True
2 True
3 True
4 False
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah druhé části článku</h2>

<p>Ve druhé části článku o knihovně <i>pyrsistent</i> se zaměříme na popis
zbývajících persistentních datových struktur, které tato knihovna vývojářům
nabízí. Jednat se bude zejména o persistentní mapy, ale i o persistentní
obousměrné fronty. To však není ani zdaleka vše, protože v&nbsp;knihovně
<i>pyrsistent</i> nalezneme i podporu pro persistentní objekty
popř.&nbsp;pro takzvané záznamy (<i>records</i>).</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 a knihovnu <i>pyrsistent</i> byly uloženy do Git
repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>list01.py</td><td>standardní datový typ seznam</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list01.py</a></td></tr>
<tr><td> 2</td><td>list02.py</td><td>přidání prvků do seznamu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list02.py</a></td></tr>
<tr><td> 3</td><td>list03.py</td><td>měnitelné prvky seznamu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list03.py</a></td></tr>
<tr><td> 4</td><td>list04.py</td><td>rekurzivní seznam</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/list04.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>tuple01.py</td><td>standardní neměnný typ n-tice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/tuple01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/tuple01.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 6</td><td>vectors01.py</td><td>konstrukce vektoru se třemi prvky stejného typu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors01.py</a></td></tr>
<tr><td> 7</td><td>vectors02.py</td><td>konstrukce vektoru se čtyřmi prvky rozdílného typu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors02.py</a></td></tr>
<tr><td> 8</td><td>vectors03.py</td><td>metoda <strong>append</strong> vytvářející nový vektor</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors03.py</a></td></tr>
<tr><td> 9</td><td>vectors04.py</td><td>neměnná hodnota &ndash; reference na seznam</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors04.py</a></td></tr>
<tr><td>10</td><td>vectors05.py</td><td>proměnná hodnota &ndash; vlastní obsah seznamu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors05.py</a></td></tr>
<tr><td>11</td><td>vectors06.py</td><td>proměnná hodnota &ndash; obsah mapy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors06.py</a></td></tr>
<tr><td>12</td><td>vectors07.py</td><td>přístup k&nbsp;prvkům vektoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors07.py</a></td></tr>
<tr><td>13</td><td>vectors08.py</td><td>slicing</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors08.py</a></td></tr>
<tr><td>14</td><td>vectors09.py</td><td>slicing se specifikací kroku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/vectors09.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>sets01.py</td><td>konstrukce persistentní množiny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/sets01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/sets01.py</a></td></tr>
<tr><td>16</td><td>sets02.py</td><td>persistentní množina a operace <strong>add</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/sets02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/sets02.py</a></td></tr>
<tr><td>17</td><td>sets03.py</td><td>persistentní množina a operace <strong>remove</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/sets03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/sets03.py</a></td></tr>
<tr><td>18</td><td>sets04.py</td><td>množinové operace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/sets04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/sets04.py</a></td></tr>
<tr><td>19</td><td>sets05.py</td><td>test na existenci prvku v&nbsp;množině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/sets05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrsistent/sets05.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Persistent data structure<br />
<a href="https://en.wikipedia.org/wiki/Persistent_data_structure">https://en.wikipedia.org/wiki/Persistent_data_structure</a>
</li>

<li>Collections (Python)<br />
<a href="https://docs.python.org/3/library/collections.abc.html">https://docs.python.org/3/library/collections.abc.html</a>
</li>

<li>Immutable object<br />
<a href="https://en.wikipedia.org/wiki/Immutable_object">https://en.wikipedia.org/wiki/Immutable_object</a>
</li>

<li>pyrsistent na PyPi<br />
<a href="https://pypi.org/project/pyrsistent/">https://pypi.org/project/pyrsistent/</a>
</li>

<li>pyrsistent na GitHubu<br />
<a href="https://github.com/tobgu/pyrsistent">https://github.com/tobgu/pyrsistent</a>
</li>

<li>Dokumentace knihovny pyrsistent<br />
<a href="https://pyrsistent.readthedocs.io/en/latest/index.html">https://pyrsistent.readthedocs.io/en/latest/index.html</a>
</li>

<li>pyrthon na GitHubu<br />
<a href="https://github.com/tobgu/pyrthon/">https://github.com/tobgu/pyrthon/</a>
</li>

<li>Mori na GitHubu<br />
<a href="https://github.com/swannodette/mori">https://github.com/swannodette/mori</a>
</li>

<li>Mori: popis API (dokumentace)<br />
<a href="http://swannodette.github.io/mori/">http://swannodette.github.io/mori/</a>
</li>

<li>Mori: Benchmarking<br />
<a href="https://github.com/swannodette/mori/wiki/Benchmarking">https://github.com/swannodette/mori/wiki/Benchmarking</a>
</li>

<li>Functional data structures in JavaScript with Mori<br />
<a href="http://sitr.us/2013/11/04/functional-data-structures.html">http://sitr.us/2013/11/04/functional-data-structures.html</a>
</li>

<li>Immutable.js<br />
<a href="https://facebook.github.io/immutable-js/">https://facebook.github.io/immutable-js/</a>
</li>

<li>Understanding Clojure's Persistent Vectors, pt. 1<br />
<a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1">http://hypirion.com/musings/understanding-persistent-vector-pt-1</a>
</li>

<li>Hash array mapped trie (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Hash_array_mapped_trie">https://en.wikipedia.org/wiki/Hash_array_mapped_trie</a>
</li>

<li>Java theory and practice: To mutate or not to mutate?<br />
<a href="http://www.ibm.com/developerworks/java/library/j-jtp02183/index.html">http://www.ibm.com/developerworks/java/library/j-jtp02183/index.html</a>
</li>

<li>Efficient persistent (immutable) data structures<br />
<a href="https://persistent.codeplex.com/">https://persistent.codeplex.com/</a>
</li>

<li>Clojure (Wikipedia EN)<br />
<a href="http://en.wikipedia.org/wiki/Clojure">http://en.wikipedia.org/wiki/Clojure</a>
</li>

<li>Clojure (Wikipedia CS)<br />
<a href="http://cs.wikipedia.org/wiki/Clojure">http://cs.wikipedia.org/wiki/Clojure</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

