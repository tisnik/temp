<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Projekty vylepšující interaktivní režim Pythonu: bpython, ptpython, DreamPie a IPython</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Projekty vylepšující interaktivní režim Pythonu: bpython, ptpython, DreamPie a IPython</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Projekty vylepšující interaktivní režim Pythonu: bpython, ptpython, DreamPie a IPython</a></p>
<p><a href="#k02">2. První používaný koncept: klasická integrovaná vývojová prostředí</a></p>
<p><a href="#k03">3. Alternativní koncepty: interaktivní smyčka REPL a diář (notebook)</a></p>
<p><a href="#k04">4. Interaktivní smyčka REPL v&nbsp;různých jazycích a nástrojích</a></p>
<p><a href="#k05">5. Projekt <strong>bpython</strong></a></p>
<p><a href="#k06">6. Instalace balíčku <strong>bpython</strong></a></p>
<p><a href="#k07">7. Příklady možností nabízených projektem <strong>bpython</strong></a></p>
<p><a href="#k08">8. Projekt <strong>ptpython</strong></a></p>
<p><a href="#k09">9. Instalace balíčku <strong>ptpython</strong></a></p>
<p><a href="#k10">10. Příklady možností nabízených projektem <strong>ptpython</strong></a></p>
<p><a href="#k11">11. Projekt <strong>DreamPie</strong></a></p>
<p><a href="#k12">*** 12. Instalace balíčku <strong>dreampie</strong></a></p>
<p><a href="#k13">*** 13. Ukázky použití projektu <strong>DreamPie</strong></a></p>
<p><a href="#k14">*** 14. IPython ve funkci alternativního konceptu vývojového prostředí</a></p>
<p><a href="#k15">*** 15. Instalace balíčku <strong>ipython</strong></a></p>
<p><a href="#k16">*** 16. Interaktivní rozhraní IPythonu</a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Projekty vylepšující interaktivní režim Pythonu: bpython, ptpython, DreamPie a IPython</h2>

<p>V&nbsp;dnešním článku se ve stručnosti seznámíme se čtveřicí projektů, které
se snaží &ndash; každý ovšem poněkud jiným způsobem &ndash; vylepšit původní
interpret programovacího jazyka Python, přesněji řečeno interpret, jenž je
nedílnou součástí CPythonu jak verze 2.x, tak i 3.x. Pravděpodobně všichni
vývojáři, kteří jazyk Python používají, se seznámili s&nbsp;interaktivním
režimem Pythonu. Tento režim, který se taktéž někdy nazývá smyčka REPL (což je
zkratka vycházející z&nbsp;plného označení <i>Read-Eval-Print-Loop</i>, které
pochází z&nbsp;období, v&nbsp;němž vznikal programovací jazyk LISP) se použije
ve chvíli, kdy spustíme interpret Pythonu bez specifikace skriptu, který se má
analyzovat a následně spustit (s&nbsp;mezipřekladem do bajtkódu). Samotná
smyčka REPL se může nacházet v&nbsp;několika stavech, které se rozlišují
takzvanou výzvou (<i>prompt</i>). Ve výchozím stavu se očekává specifikace
jednoho příkazu, který se ihned vykoná, ovšem můžeme si taktéž nechat zobrazit
nápovědu, začít deklaraci funkce či třídy atd.</p>

<a href="https://www.root.cz/obrazek/359588/"><img src="https://i.iinfo.cz/images/143/python-interpreters-1-1-prev.png" class="image-359588" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 1: Interaktivní smyčka REPL programovacího jazyka Python verze
2.7.6.</i></p>

<p>Ovšem samotný standardní REPL má některá omezení. Sice umožňuje doplnění
klíčového slova nebo jména funkce/metody klávesou TAB, ovšem již nedokáže
nabídnout seznam metod po zápisu jména objektu. Taktéž se špatně vrací
v&nbsp;historii příkazů ve chvíli, kdy se jedná například o několikařádkovou
deklaraci. A navíc REPL automaticky neprovádí odsazení příkazů uvnitř bloku,
což je pro programovací jazyk, v&nbsp;němž hraje odsazení velkou roli, dosti
nepříjemné:</p>

<pre>
&gt;&gt;&gt; def x():
... pass
  File "&lt;stdin&gt;", line 2
    pass
       ^
IndentationError: expected an indented block
</pre>

<p>Dále popsané projekty tyto problémy řeší a navíc uživatelům nabízí i mnohé
další funkce.</p>

<a href="https://www.root.cz/obrazek/359589/"><img src="https://i.iinfo.cz/images/143/python-interpreters-1-2-prev.png" class="image-359589" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 2: Interaktivní smyčka REPL programovacího jazyka Python verze
3.6.3 (což je již postarší verze).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. První používaný koncept: klasická integrovaná vývojová prostředí</h2>

<p>Klasická integrovaná vývojová prostředí jsou většinou určena pro práci na
rozsáhlejších projektech, které se skládají z&nbsp;mnoha zdrojových souborů a
většinou mají i poměrně košatou hierarchii modulů a tříd (ostatně právě to byl
jeden z&nbsp;hlavních důvodů jejich vzniku &ndash; programátoři se museli začít
orientovat ve stále větších a taktéž komplikovanějších projektech). Po takových
integrovaných vývojových prostředích uživatelé-vývojáři většinou požadují
především co nejsnadnější orientaci ve zpracovávaném projektu, dále funkce pro
automatické doplňování kódu (například názvů metod), přístup ke všem globálním
symbolům (moduly, třídy, globální proměnné, funkce) společně
s&nbsp;interaktivní filtrací seznamu symbolů, podporu pro ladění vznikajících
aplikací (integrovaný debugger či dokonce profiler) a popř.&nbsp;i integraci
s&nbsp;nástroji pro testování a refaktoring zdrojových kódů. V&nbsp;případě
Pythonu se navíc většinou očekává i integrace s&nbsp;interaktivní smyčkou REPL
Pythonu.</p>

<a href="https://www.root.cz/obrazek/359590/"><img src="https://i.iinfo.cz/images/143/python-interpreters-1-3-prev.png" class="image-359590" alt="&#160;" width="370" height="265" /></a>
<p><i>Obrázek 3: Jedna z&nbsp;mnoha možností nabízená integrovaným vývojovým
prostředím PyDev (založeno na Eclipse): spouštění jednotkových testů se
zobrazením výsledků.</i></p>

<p>Mezi takto koncipovaná integrovaná vývojová prostředí patří <a
href="http://mojefedora.cz/eclipse-integrovane-vyvojove-prostredi-pro-javu-i-dalsi-programovaci-jazyky/">Eclipse</a>
(Java Development Toolkit, C/C++ Development Toolkit, <a
href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-pydev/">PyDev</a>,
...), IDEA, Netbeans (opět s&nbsp;podporou pro větší množství jazyků), Visual
Studio či poněkud méně ambiciózní projekty, mezi které patří <a
href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-1-dil/">Anjuta</a>, <a
href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-2-dil/">Geany</a>, <a
href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-2-dil/">Code::Blocks</a>,
Qt Creator, <a
href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">IDLE</a>, <a
href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-4-dil/">Eric</a>, <a
href="http://mojefedora.cz/seznameni-s-python-ide-spyder/">Spyder</a>, <a
href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-3-dil/">Gambas</a>
popř.&nbsp;<a
href="http://mojefedora.cz/vyvojova-prostredi-ve-fedore-3-dil/">Lazarus</a>
(mnohá z&nbsp;těchto prostředí se zaměřují na podporu jen jednoho
programovacího jazyka, další prostředí se snaží být univerzálně použitelná). Do
určité míry je možné integrované vývojové prostředí vytvořit například i
z&nbsp;textových editorů Vim, Emacs a Atom doplněných o potřebné moduly
(pluginy). Z&nbsp;novějších prostředí jmenujme dnes velmi populární <a
href="https://code.visualstudio.com/">Visual Studio Code</a>.</p>

<a href="https://www.root.cz/obrazek/359591/"><img src="https://i.iinfo.cz/images/143/python-interpreters-1-4-prev.png" class="image-359591" alt="&#160;" width="370" height="252" /></a>
<p><i>Obrázek 4: I pokročilý textový editor Atom je možné nakonfigurovat do
podoby (jednoduchého) integrovaného vývojového prostředí.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Alternativní koncepty: interaktivní smyčka REPL a diář (notebook)</h2>

<p>Někteří programátoři, popř.&nbsp;ti uživatelé, kteří programovací jazyk musí
používat pro řešení problémů ve své profesi (ovšem vývoj aplikací naopak není
jejich hlavní pracovní náplní), však mohou preferovat dosti odlišný způsob
práce, který je v&nbsp;mnohem větší míře založen na přímočaré a prakticky
neustálé interakci mezi vývojářem a systémem nebo vznikající (mini)aplikací,
jež je mnohdy vysoce jednoúčelová. V&nbsp;takových případech ustupuje správa
projektů poněkud do pozadí a naopak se začíná využívat dosti odlišný druh
vývojového prostředí založený buď na již v&nbsp;úvodním odstavci zmíněné
interaktivní smyčce REPL (<i>Read-Eval-Print-Loop</i>) nebo na konceptu
takzvaných diářů (<i>notebooks</i>), které jsou už poměrně dlouho velmi
populární především v&nbsp;systémech pro numerickou matematiku, analýzy,
statistické výpočty, symbolickou matematiku (manipulace se symboly a výrazy,
integrace, derivace, zjednodušování výrazů atd.) a dnes taktéž pro machine
learning (ML).</p>

<img src="https://i.iinfo.cz/images/143/python-interpreters-1-5.png" class="image-359592" alt="&#160;" width="336" height="240" />
<p><i>Obrázek 5: Za zjednodušenou formu interaktivní smyčky REPL je možné
považovat i takzvaný přímý mód (direct mode) použitý například v&nbsp;klasickém
BASICu. Na tomto screenshotu je v&nbsp;přímém módu zapsán příkaz
<strong>LIST</strong>.</i></p>

<p>Poměrně velkou předností těchto systémů oproti klasickým integrovaným
vývojovým prostředím je zejména okamžitá zpětná vazba systému na zadávané
definice, deklarace, makra a příkazy. To uživatelům umožňuje se snadněji a
taktéž většinou i mnohem rychleji seznámit jak s&nbsp;vlastním programovacím
jazykem (nalezení chyby na jediném programovém řádku je určitě snazší, než
analýza mnohdy několikastránkového výpisu vytvořeného překladačem), tak i
s&nbsp;použitými knihovnami. To je dnes vlastně ještě důležitější, protože
mnohdy vývoj spočívá v&nbsp;&bdquo;lepení&ldquo; již existujících komponent či
knihoven (se všemi z&nbsp;toho plynoucími důsledky). Aplikace vytvářené
v&nbsp;takto koncipovaných prostředích většinou vznikají systémem zdola-nahoru
(to se někdy označuje termínem <i>bottom-up programming</i>), tj.&nbsp;postupně
se skládají z&nbsp;funkcí a tříd, které mohou být ihned po své deklaraci
interaktivně otestovány.</p>

<img src="https://i.iinfo.cz/images/143/python-interpreters-1-6.png" class="image-359593" alt="&#160;" width="660" height="411" />
<p><i>Obrázek 6: Koncept diáře je použit například v&nbsp;nástroji Gorilla
REPL, který mohou využít programátoři pracující s&nbsp;jazykem Clojure.</i></p>

<p><div class="rs-tip-major">Poznámka: s&nbsp;konceptem &bdquo;notebooku&ldquo;
jsme se již na stránkách Rootu několikrát setkali, například při popisu
projektu <a
href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/#k01">Gorilla
určeného pro jazyk Clojure</a> zmíněného na předchozím screenshotu. Ovšem
mnohem známějším projektem je dále zmíněný IPython popř.&nbsp;jeho ideový
následovník projekt <a href="https://jupyter.org/">Jupyter notebook</a>
(původně se jmenoval IPython Notebook, ovšem později došlo k&nbsp;rozšíření o
další vlastnosti, které nejsou specifické pouze pro Python).</div></p>

<a href="https://www.root.cz/obrazek/359594/"><img src="https://i.iinfo.cz/images/143/python-interpreters-1-7-prev.png" class="image-359594" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 7: Textové rozhraní IPythonu, který je zde založen na starším
interpretru Pythonu 2.7.x. V&nbsp;dalším textu se pochopitelně budeme zabývat
především novější verzí 3.x.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Interaktivní smyčka REPL v&nbsp;různých jazycích a nástrojích</h2>

<p>S&nbsp;principem a použitím interaktivní smyčky REPL jsme se již na
stránkách Rootu setkali, a to dokonce mnohokrát. Kromě článků, které se
věnovaly klasickým Unixovým shellům typu <a
href="https://www.root.cz/clanky/programovani-v-bash-shellu/">BASH</a>, <a
href="https://www.root.cz/clanky/prikazovy-radek-pritel-nejvernejsi-2/">tcsh</a>
či <a href="https://www.root.cz/clanky/zuzo-shell/">zsh</a> (a rozhraní shellů
není nic jiného, než interaktivní REPL), jsme smyčku REPL použili například při
popisu <a
href="https://www.root.cz/serialy/programovaci-jazyk-julia/">programovacího
jazyka Julia</a> či <a
href="https://www.root.cz/vyhledavani/?qs=clojure">jazyka Clojure</a>. Historií
vzniku REPL jsme se zabývali i <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-nejen-v-nbsp-sssr-cast-3-ndash-lisp#k02">zde</a>.</p>

<p>Některé smyčky REPL jsou pojaty přísně minimalisticky, což je případ dnes
již spíše minimálně používaného <a
href="https://www.root.cz/serialy/programovaci-jazyk-tcl/">jazyka TCL</a>. Tato
interaktivní REPL dokonce ani neobsahuje historii příkazů či podporu pro pohyb
kurzoru na příkazovém řádku:</p>

<pre>
% 
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se liší i znak výzvy
(<i>prompt</i>), protože se namísto obvyklého &gt; používá znak procenta; to je
ovšem pouze marginální změna.</div></p>

<p>Další interaktivní REPL alespoň uživatele informují, v&nbsp;jakém prostředí
se nachází. To je případ REPL (opět velmi jednoduše pojaté) programovacího
jazyka Lua:</p>

<pre>
Lua 5.2.3  Copyright (C) 1994-2013 Lua.org, PUC-Rio
&gt;
</pre>

<p>REPL projektu <a
href="https://www.root.cz/clanky/luajit-just-in-time-prekladac-pro-programovaci-jazyk-lua/">LuaJIT</a>
vypadá nepatrně odlišně:</p>

<pre>
LuaJIT 2.1.0-beta3 -- Copyright (C) 2005-2017 Mike Pall. http://luajit.org/
JIT: ON SSE2 SSE3 SSE4.1 BMI2 fold cse dce fwd dse narrow loop abc sink fuse
&gt;
</pre>

<p>Nově se plnohodnotný REPL objevil i v&nbsp;jazyku Clojure;
v&nbsp;předchozích verzích se používal dále zmíněný alternativní nREPL:</p>

<pre>
Clojure 1.9.0
user=&gt;
</pre>

<p>Podobně vypadá REPL <a
href="https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/">programovacího
jazyka Pixie</a> (to vlastně není nijak překvapivé, protože se opět jedná o
jednu z&nbsp;v:</p>

<pre>
user =&gt;
</pre>

<p>Interaktivní rozhraní projektu GNU Guile, což je jedna z&nbsp;variant
programovacího jazyka Scheme:</p>

<pre>
GNU Guile 2.0.14
Copyright (C) 1995-2016 Free Software Foundation, Inc.
&nbsp;
Guile comes with ABSOLUTELY NO WARRANTY; for details type `,show w'.
This program is free software, and you are welcome to redistribute it
under certain conditions; type `,show c' for details.
&nbsp;
Enter `,help' for help.
scheme@(guile-user)&gt; 
</pre>

<p>Plnohodnotnou smyčku REPL se všemi vymoženostmi nabízí zejména <a
href="https://www.root.cz/serialy/programovaci-jazyk-julia/">programovací jazyk
Julia</a>, což ostatně není překvapivé, protože se tento jazyk používá právě
pro postupnou inkrementální tvorbu aplikací v&nbsp;interaktivním prostředí:</p>

<pre>
               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.0.0 (2018-08-08)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |
&nbsp; 
julia&gt;
</pre>

<p>Podobně je tomu v&nbsp;případě programovacího jazyka Clojure doplněného o
<i>nREPL</i> (ten lze spustit například příkazem <strong>lein
repl</strong>):</p>

<pre>
nREPL server started on port 42733 on host 127.0.0.1 - nrepl://127.0.0.1:42733
REPL-y 0.3.7, nREPL 0.2.12
Clojure 1.8.0
OpenJDK 64-Bit Server VM 1.8.0_171-b10
    Docs: (doc function-name-here)
          (find-doc "part-of-name-here")
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e
&nbsp;
user=&gt; 
</pre>

<p>Samozřejmě nesmíme zapomenout ani na REPL doménově specifického jazyka
R:</p>

<pre>
R version 3.5.3 (2019-03-11) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)
&nbsp;
R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.
&nbsp;
  Natural language support but running in an English locale
&nbsp;
R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.
&nbsp;
Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.
&nbsp;
During startup - Warning messages:
1: Setting LC_TIME failed, using "C" 
2: Setting LC_MONETARY failed, using "C" 
3: Setting LC_PAPER failed, using "C" 
4: Setting LC_MEASUREMENT failed, using "C" 
gt;
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Projekt <strong>bpython</strong></h2>

<p>Po delším úvodu se konečně dostáváme k&nbsp;těm projektům, které se snaží
původní interaktivní režim programovacího jazyka Python nějakým způsobem
vylepšit. První z&nbsp;těchto projektů se jmenuje <strong>bpython</strong> a
nabízí uživatelům mj.&nbsp;i tyto možnosti, které v&nbsp;původním interpretru
nenajdeme. Mezi tyto možnosti patří zejména:</p>

<ol>

<li>Zvýraznění syntaxe přímo při zápisu jednotlivých řádků, které se mají
interaktivně spustit. Pro tento účel se používá knihovna Pygments.</li>

<li>Plná podpora pro editaci prováděnou v&nbsp;rámci příkazového řádku založená
na běžných a často používaných zkratkách převzatých z&nbsp;Emacsu.</li>

<li>Automatické odsazení řádků, které se nachází uvnitř smyček, podmínek,
deklarací funkcí, deklarací tříd atd.</li>

<li>Možnost zápisu příkazů a deklarací v&nbsp;textovém editoru.</li>

<li>Zobrazení seznamu klíčových slov a funkcí začínajících již zapsaným
prefixem (v&nbsp;tomto případě bez nutnosti použití klávesové zkratky).</li>

<li>Automatické doplnění klíčového slova či funkce s&nbsp;využitím klávesy
<strong>Tab</strong> ze zobrazené nabídky.</li>

<li>Zobrazení nápovědy s&nbsp;parametry volané funkce nebo metody ihned po
zápisu otevírací závorky.</li>

<li>Samozřejmě je podporován i Python 3.x (což už by dnes měl být
standard).</li>

<li>Dále tento projekt nabízí možnost získat historii zapsaných příkazů a znovu
je zavolat popř.&nbsp;je nějakým způsobem modifikovat.</li>

<li>Užitečná je i další vlastnost &ndash; automatické poslání části zapsaného
kódu do služby typu &bdquo;pastebin&ldquo;, takže lze velmi snadno kód nasdílet
s&nbsp;kolegy (což samozřejmě nijak nenahrazuje plnohodnotný systém pro správu
verzí :-).</li>

<li>A samozřejmě je možné zapsaný a otestovaný kód uložit do souboru pro jeho
další znovupoužití.</li>
</ol>

<p>Příklad použití jednotlivých operací bude popsán v&nbsp;navazujících
kapitolách.</p>

<a href="https://www.root.cz/obrazek/359595/"><img src="https://i.iinfo.cz/images/143/python-interpreters-1-8-prev.png" class="image-359595" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 8: Takto vypadá základní uživatelské rozhraní projektu
<strong>bpython</strong>.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Instalace balíčku <strong>bpython</strong></h2>

<p>Balíček <strong>bpython</strong>, který <a
href="https://pypi.org/project/bpython/">nalezneme na seznamu balíčků PyPi</a>,
je možné velmi snadno nainstalovat s&nbsp;využitím nástroje
<strong>pip</strong> popř.&nbsp;<strong>pip3</strong>. Zde konkrétně jsem
použil nástroj <strong>pip3</strong> s&nbsp;přepínačem <strong>--user</strong>
zajišťující instalaci pouze pro aktivně přihlášeného uživatele (kterým je
&bdquo;tester&ldquo;). Instalace se provede do adresáře ~/.local:</p>

<pre>
$ <strong>pip3 install --user bpython</strong>
&nbsp;
Collecting bpython
  Using cached https://files.pythonhosted.org/packages/c7/0c/22459d1c7f45faada154b9bb4e04c0000b9cc691cd232b7915667f0a4574/bpython-0.18-py2.py3-none-any.whl
Requirement already satisfied: curtsies&gt;=0.1.18 in /home/tester/.local/lib/python3.6/site-packages (from bpython)
Requirement already satisfied: six&gt;=1.5 in /home/tester/.local/lib/python3.6/site-packages (from bpython)
Requirement already satisfied: pygments in /home/tester/.local/lib/python3.6/site-packages (from bpython)
Requirement already satisfied: requests in /usr/lib/python3.6/site-packages (from bpython)
Requirement already satisfied: greenlet in /home/tester/.local/lib/python3.6/site-packages (from bpython)
Requirement already satisfied: blessings&gt;=1.5 in /home/tester/.local/lib/python3.6/site-packages (from curtsies&gt;=0.1.18-&gt;bpython)
Requirement already satisfied: wcwidth&gt;=0.1.4 in /home/tester/.local/lib/python3.6/site-packages (from curtsies&gt;=0.1.18-&gt;bpython)
Requirement already satisfied: typing in /home/tester/.local/lib/python3.6/site-packages (from curtsies&gt;=0.1.18-&gt;bpython)
Requirement already satisfied: urllib3==1.20 in /usr/lib/python3.6/site-packages (from requests-&gt;bpython)
Installing collected packages: bpython
Successfully installed bpython-0.18
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že tento nástroj interně
používá knihovnu <strong>Pygments</strong>, s&nbsp;níž jsme se již na stránkách
Rootu setkali v&nbsp;článcích <a
href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">Využití
knihovny Pygments (nejenom) pro obarvení zdrojových kódů</a> a <a
href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">Využití
knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a
lexery </a>.</div></p>

<p>Po instalaci si samozřejmě můžeme zkontrolovat, zda je nástroj
<strong>bpython</strong> spustitelný:</p>

<pre>
$ <strong>whereis bpython</strong>
&nbsp;
bpython: /home/tester/.local/bin/bpython
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě, že
<strong>whereis</strong> nástroj <strong>bpython</strong> nenalezne,
zkontrolujte, zda je cesta <strong>.local</strong> součástí obsahu proměnné
prostředí <strong>PATH</strong>. Nastavení lze provést například
v&nbsp;konfiguračním souboru <strong>~/.bash_profile</strong>, a to přidáním
následujícího řádku:</div></p>

<pre>
PATH=$PATH:$HOME/.local/bin:$HOME/bin
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Příklady možností nabízených projektem <strong>bpython</strong></h2>

<p>V&nbsp;této kapitole si na několika screenshotech ukážeme některé možnosti,
které nám projekt <strong>bpython</strong> nabízí a které většinou ve
standardním interpretru Pythonu nenalezneme:</p>

<a href="https://www.root.cz/obrazek/359743/"><img src="https://i.iinfo.cz/images/553/bpython-1-prev.png" class="image-359743" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 9: Takto vypadá uživatelské rozhraní ihned po spuštění upraveného
interpretru.</i></p>

<a href="https://www.root.cz/obrazek/359744/"><img src="https://i.iinfo.cz/images/553/bpython-2-prev.png" class="image-359744" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 10: Velmi užitečná vlastnost &ndash; po stisku klávesy
<strong>F7</strong> se spustí vybraný textový editor, do něhož je možné zapsat
libovolnou deklaraci či příkaz(y), které se po ukončení editoru automaticky
provedou.</i></p>

<a href="https://www.root.cz/obrazek/359745/"><img src="https://i.iinfo.cz/images/553/bpython-3-prev.png" class="image-359745" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 11: Návrat z&nbsp;textového editoru zpět do prostředí REPLu.
Vytvořený text se automaticky vložil do interpretru.</i></p>

<a href="https://www.root.cz/obrazek/359746/"><img src="https://i.iinfo.cz/images/553/bpython-4-prev.png" class="image-359746" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 12: Potvrzení příkazu a zobrazení jeho výsledku (pokud je
pochopitelně viditelný).</i></p>

<a href="https://www.root.cz/obrazek/359747/"><img src="https://i.iinfo.cz/images/553/bpython-5-prev.png" class="image-359747" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 13: Po zápisu prvního znaku či několika znaků klíčového slova či
názvu funkce se automaticky nabídnou všechny možnosti začínající zapsaným
prefixem.</i></p>

<a href="https://www.root.cz/obrazek/359748/"><img src="https://i.iinfo.cz/images/553/bpython-6-prev.png" class="image-359748" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 14: Zobrazení seznamu parametrů funkce a taktéž dokumentace
k&nbsp;volané funkci (provádí se automaticky bez nutnosti stisku jakékoli
klávesové zkratky).</i></p>

<a href="https://www.root.cz/obrazek/359749/"><img src="https://i.iinfo.cz/images/553/bpython-7-prev.png" class="image-359749" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 15: Klávesovou zkratkou <strong>F8</strong> je možné buffer
přenést do vybrané služby typu &bdquo;pastebin&ldquo;. REPL současně zobrazí
adresu, na které se zkopírovaný text nachází.</i></p>

<img src="https://i.iinfo.cz/images/553/bpython-8.png" class="image-359750" alt="&#160;" width="644" height="598" />
<p><i>Obrázek 16: Takto vypadá zkopírovaný buffer, který mohou vidět kolegové
(ovšem i kolemjdoucí).</i></p>

<a href="https://www.root.cz/obrazek/359751/"><img src="https://i.iinfo.cz/images/553/bpython-9-prev.png" class="image-359751" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 17: Další příklad zobrazení nápovědy k&nbsp;funkci a jejím
parametrům.</i></p>

<a href="https://www.root.cz/obrazek/359752/"><img src="https://i.iinfo.cz/images/553/bpython-10-prev.png" class="image-359752" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 18: Dokumentační řetězec se pochopitelně zobrazí i pro
uživatelsky definovanou funkci.</i></p>

<p><div class="rs-tip-major">Poznámka: některé možnosti nelze zobrazit na
statickém screenshotu. Jedná se především o plnohodnotnou editaci v&nbsp;rámci
příkazového řádku.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Projekt <strong>ptpython</strong></h2>

<p>Druhý projekt, s&nbsp;nímž se v&nbsp;dnešním článku ve stručnosti seznámíme,
se jmenuje <strong>ptpython</strong>. Kromě toho, že jméno projektu začíná
iniciálami autora článku :-) se jedná o zajímavé a užitečné rozšíření možností
původního interpretru Pythonu o tyto vlastnosti:</p>

<ol>

<li>Ve spodní části terminálu je zobrazena stavová řádka, která kontextově mění
svůj obsah.</li>

<li>Podporováno je zvýrazňování syntaxe zapisovaných příkazů a deklarací. I
v&nbsp;tomto případě se pro tyto účely využívá knihovna Pygments.</li>

<li>Dále tento projekt používá knihovnu Jedi, která (mimo jiné) umožňuje
zobrazení kontextových menu s&nbsp;nabídkou metod pro zapsané jméno
objektu.</li>

<li>Stejná knihovna (Jedi) je použita pro doplnění klíčových slov, jmen funkcí,
názvů metod apod.</li>

<li>Ve výchozím nastavení je umožněna plnohodnotná editace příkazového řádku
s&nbsp;využitím klávesových zkratek odvozených od textového editoru Emacs (a
používaných v&nbsp;mnoha dalších shellech, například v&nbsp;BASHi, pokud ho
nepřepneme do jiného režimu).</li>

<li>V&nbsp;Emacs režimu se na stavové řádce zobrazují některé dostupné příkazy
(například při stisku <strong>Ctrl+Space</strong> pro práci
s&nbsp;výběrem).</li>

<li>Klávesovou zkratkou <strong>F4</strong> se můžeme prakticky kdykoli
přepnout do režimu emulujícího chování modálních editorů Vi a Vim. Podporovány
jsou prakticky všechny základní editační příkazy.</li>

<li>Podporován je i záznam maker s&nbsp;jejich pozdějším přehráváním.
V&nbsp;režimu Vi/Vim se záznam spustí zkratkou <strong>q_písmeno_</strong>,
přehrání makra pak zkratkou <strong>@_písmeno</strong>.</li>

<li>Existuje i speciální režim pro vkládání textu přes schránku a podpora pro
práci s&nbsp;myší (ovšem podle toho, zda terminál práci s&nbsp;myší
umožňuje).</li>

<li>Stiskem klávesy <strong>F2</strong> se zobrazí přehledný konfigurační
dialog.</li>

<li>Při vyhledávání v&nbsp;historii příkazů přes <strong>Ctrl+R</strong> se
zobrazí všechny nalezené shody.</li>

<li>Barvová schémata jsou konfigurovatelná.</li>

</ol>



<p><a name="k09"></a></p>
<h2 id="k09">9. Instalace balíčku <strong>ptpython</strong></h2>

<p>I projekt <strong>ptpython</strong> nalezneme, podobně jako výše zmíněný
projekt <strong>bpython</strong>, přímo na stránkách <a
href="https://pypi.org/project/ptpython/">PyPi</a>, takže instalace bude stejně
snadná, jako v&nbsp;případě <strong>bpythonu</strong>. Opět instalaci provedeme
pouze pro přihlášeného uživatele, takže ani nebudeme potřebovat práva
roota:</p>

<pre>
$ <strong>pip3 install --user ptpython</strong>
&nbsp;
Collecting ptpython
  Downloading https://files.pythonhosted.org/packages/01/16/5260314dbc2a03792e277e67578fee099ae1770db58d4f7fdda03225aef9/ptpython-2.0.4-py3-none-any.whl (47kB)
    100% |████████████████████████████████| 51kB 796kB/s 
Requirement already satisfied: pygments in /home/tester/.local/lib/python3.6/site-packages (from ptpython)
Requirement already satisfied: prompt-toolkit&lt;2.1.0,&gt;=2.0.6 in /home/tester/.local/lib/python3.6/site-packages (from ptpython)
Requirement already satisfied: jedi&gt;=0.9.0 in /home/tester/.local/lib/python3.6/site-packages (from ptpython)
Requirement already satisfied: docopt in /usr/lib/python3.6/site-packages (from ptpython)
Requirement already satisfied: wcwidth in /home/tester/.local/lib/python3.6/site-packages (from prompt-toolkit&lt;2.1.0,&gt;=2.0.6-&gt;ptpython)
Requirement already satisfied: six&gt;=1.9.0 in /home/tester/.local/lib/python3.6/site-packages (from prompt-toolkit&lt;2.1.0,&gt;=2.0.6-&gt;ptpython)
Requirement already satisfied: parso&gt;=0.3.0 in /home/tester/.local/lib/python3.6/site-packages (from jedi&gt;=0.9.0-&gt;ptpython)
Installing collected packages: ptpython
Successfully installed ptpython-2.0.4
</pre>

<p><div class="rs-tip-major">Poznámka: zde si povšimněte, že tento projekt
používá knihovnu <strong>Jedi</strong>, která pro nás opět není žádná novinka,
neboť ji známe z&nbsp;dvojice článků <a
href="https://www.root.cz/clanky/knihovna-jedi-doplnovani-kodu-a-staticka-analyza-kodu-v-pythonu/">Knihovna
Jedi: doplňování kódu a statická analýza kódu v Pythonu</a> a <a
href="https://www.root.cz/clanky/knihovna-jedi-doplnovani-kodu-a-staticka-analyza-kodu-v-pythonu-dokonceni/">Knihovna
Jedi: doplňování kódu a statická analýza kódu v Pythonu
(dokončení)</a>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Příklady možností nabízených projektem <strong>ptpython</strong></h2>

<p>Opět si ukažme některé možnosti, které projekt <strong>ptpython</strong>
programátorům a vlastně i všem uživatelům Pythonu nabízí.</p>

<a href="https://www.root.cz/obrazek/359753/"><img src="https://i.iinfo.cz/images/480/ptpython-1-prev.png" class="image-359753" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 19: Prostředí projektu ihned po spuštění. Povšimněte si stavového
řádku, na němž se mj.&nbsp;zobrazuje i zvolený režim, v&nbsp;tomto případě
režim EMACSu.</i></p>

<a href="https://www.root.cz/obrazek/359754/"><img src="https://i.iinfo.cz/images/480/ptpython-2-prev.png" class="image-359754" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 20: Klávesovou zkratkou <strong>F4</strong> se můžeme přepnout do
režimu emulujícího chování editoru Vi/Vim. Z&nbsp;vkládacího režimu se klávesou
<strong>Esc</strong> přepneme do režimu normálního se všemi základními
editačními příkazy i příkazy pro pohyb kurzoru. Klávesou <strong>v</strong> se
otevře vybraný externí editor, do něhož bude možné zapsat složitější
deklarace.</i></p>

<a href="https://www.root.cz/obrazek/359755/"><img src="https://i.iinfo.cz/images/480/ptpython-3-prev.png" class="image-359755" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 21: Po stisku klávesy <strong>F2</strong> se zobrazí menu/dialog
pro nastavení všech vlastností projektu <strong>ptpython</strong>. Pohyb a
změna hodnot se provádí kurzorovými klávesami, potvrzení pak klávesou
<strong>Enter</strong>.</i></p>

<a href="https://www.root.cz/obrazek/359756/"><img src="https://i.iinfo.cz/images/480/ptpython-4-prev.png" class="image-359756" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 22: Nabídka klíčových slov a příkazů začínajících na zapsaný
prefix.</i></p>

<a href="https://www.root.cz/obrazek/359757/"><img src="https://i.iinfo.cz/images/480/ptpython-5-prev.png" class="image-359757" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 23: Výběr klíčového slova nebo příkazu z&nbsp;nabídky.</i></p>

<a href="https://www.root.cz/obrazek/359758/"><img src="https://i.iinfo.cz/images/480/ptpython-6-prev.png" class="image-359758" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 24: V&nbsp;některých případech narazíme na omezení kontextové
nabídky.</i></p>

<a href="https://www.root.cz/obrazek/359759/"><img src="https://i.iinfo.cz/images/480/ptpython-7-prev.png" class="image-359759" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 25: Spuštění příkazu se zobrazením jeho výsledku.</i></p>

<a href="https://www.root.cz/obrazek/359760/"><img src="https://i.iinfo.cz/images/480/ptpython-8-prev.png" class="image-359760" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 26: Další velmi užitečná vlastnost &ndash; výběr příkazů ze
zapamatované historie s&nbsp;přesným určením, které části budeme chtít
použít.</i></p>

<a href="https://www.root.cz/obrazek/359761/"><img src="https://i.iinfo.cz/images/480/ptpython-9-prev.png" class="image-359761" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 27: Návrat z&nbsp;dialogu s&nbsp;historií příkazů.</i></p>

<a href="https://www.root.cz/obrazek/359762/"><img src="https://i.iinfo.cz/images/480/ptpython-10-prev.png" class="image-359762" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 28: Kontrola základních syntaktických chyb přímo v&nbsp;prostředí
interpretru.</i></p>

<a href="https://www.root.cz/obrazek/359764/"><img src="https://i.iinfo.cz/images/480/ptpython-12-prev.png" class="image-359764" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 29: Kontextová nabídka všech metod platných pro řetězec.</i></p>

<a href="https://www.root.cz/obrazek/359763/"><img src="https://i.iinfo.cz/images/480/ptpython-11-prev.png" class="image-359763" alt="&#160;" width="370" height="242" /></a>
<p><i>Obrázek 30: A obligátní otázka na závěr celé seance po stisku klávesy
<strong>Ctrl+D</strong>.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Projekt <strong>DreamPie</strong></h2>

<p>Třetí potenciálně zajímavý projekt se jmenuje <strong>DreamPie</strong>.
Tento projekt se od výše popsaných projektů <strong>bpython</strong> a
<strong>ptpython</strong> odlišuje především tím, že používá vlastní
implementaci terminálu a podporuje některé prvky využívající grafické
uživatelské rozhraní. Toto řešení pochopitelně má svoje výhody, ale i nevýhody.
Mezi nevýhody patří větší závislost na systémových knihovnách (GTK, GObject),
mezi výhody pak například možnost dobré spolupráce s&nbsp;Matplotlibem a
dalšími podobně koncipovanými knihovnami. Dalším potenciálním problémem je
fakt, že je <strong>DreamPie</strong> naprogramovaný v&nbsp;Pythonu 2, takže
budete potřebovat i tento interpret a jeho knihovny (to může být do budoucna
problematické).</p>

<p>Samotné uživatelské prostředí projektu <strong>DreamPie</strong> používá
okno terminálu, které je rozděleno na dvě části. V&nbsp;horní části se nachází
historie zapsaných a spuštěných příkazů, v&nbsp;části dolní pak vstupní oblast,
do které uživatel může zapisovat nové příkazy a provádět další operace. Zapsané
příkazy je možné označit a později uložit do souboru pro další použití.
Zajímavá a užitečná je i možnost složení (<i>fold</i>) deklarace funkcí, metod
či celých tříd, což vede k&nbsp;úspoře plochy obrazovky (samotné složení je
možné provést ručně nebo automaticky).</p>

<p>Podobně jako u projektu <strong>ptpython</strong> je i zde podporováno
automatické doplňování kódu, automatické doplňování jmen souborů, automatické
dopsání párových závorek, uvozovek atd. Dokonce je možné namísto zápisu:</p>

<pre>
len("xyzzy")
</pre>

<p>zapsat pouze:</p>

<pre>
len xyzzy
</pre>

<p>a nechat interaktivní prostředí, aby automaticky doplnilo jak závorky, tak i
uvozovky.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Instalace balíčku <strong>dreampie</strong></h2>

<p>Instalace tohoto balíčku může být problematická. V&nbsp;první řadě není dobré použít verzi pro Python 3, protože s&nbsp;velkou pravděpodobností nebude funkční. Jednodušší je nainstalovat verzi pro Python 2, která ovšem umožňuje interně použít libovolný interpret (CPython 2, CPython 3, Jython, ...)</p>

<pre>
$ <strong>pip install --user dreampie</strong>
&nbsp;
Collecting dreampie
  Downloading https://files.pythonhosted.org/packages/1a/e1/aabfb33dd1d204c37f6858ccd7ba0de6f8ddfb02ca6d660fd8a12c6677ea/dreampie-1.2.1.tar.gz (168kB)
    100% |████████████████████████████████| 174kB 1.2MB/s 
Installing collected packages: dreampie
  Running setup.py install for dreampie ... done
Successfully installed dreampie-1.2.1
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Ukázky použití projektu <strong>DreamPie</strong></h2>

<img src="https://i.iinfo.cz/images/54/dreampie-1.png" class="image-359765" alt="&#160;" width="490" height="467" />
<p><i>Obrázek 31: Projekt DreamPie dokáže používat svá vlastní GUI okna, což je
současně výhoda, ale i nevýhoda tohoto projektu.</i></p>

<a href="https://www.root.cz/obrazek/359766/"><img src="https://i.iinfo.cz/images/54/dreampie-2-prev.png" class="image-359766" alt="&#160;" width="370" height="268" /></a>
<p><i>Obrázek 32: </i></p>

<a href="https://www.root.cz/obrazek/359767/"><img src="https://i.iinfo.cz/images/54/dreampie-3-prev.png" class="image-359767" alt="&#160;" width="370" height="268" /></a>
<p><i>Obrázek 33: </i></p>

<a href="https://www.root.cz/obrazek/359768/"><img src="https://i.iinfo.cz/images/54/dreampie-4-prev.png" class="image-359768" alt="&#160;" width="370" height="268" /></a>
<p><i>Obrázek 34: </i></p>

<a href="https://www.root.cz/obrazek/359769/"><img src="https://i.iinfo.cz/images/54/dreampie-5-prev.png" class="image-359769" alt="&#160;" width="370" height="268" /></a>
<p><i>Obrázek 35: </i></p>

<a href="https://www.root.cz/obrazek/359770/"><img src="https://i.iinfo.cz/images/54/dreampie-6-prev.png" class="image-359770" alt="&#160;" width="370" height="268" /></a>
<p><i>Obrázek 36: </i></p>

<a href="https://www.root.cz/obrazek/359771/"><img src="https://i.iinfo.cz/images/54/dreampie-7-prev.png" class="image-359771" alt="&#160;" width="370" height="268" /></a>
<p><i>Obrázek 37: </i></p>

<a href="https://www.root.cz/obrazek/359772/"><img src="https://i.iinfo.cz/images/54/dreampie-8-prev.png" class="image-359772" alt="&#160;" width="370" height="268" /></a>
<p><i>Obrázek 38: </i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. IPython ve funkci alternativního konceptu vývojového prostředí</h2>

<p>V&nbsp;závěrečné části dnešního článku se zaměříme na nástroj nazvaný <i>IPython</i>, který zpřístupňuje možnosti interaktivní komunikace s&nbsp;interpretrem těm vývojářům i dalším uživatelům, kteří používají dnes velmi populární programovací jazyk Python (i když je pravda, že struktura IPythonu ve skutečnosti dovoluje použití dalších programovacích jazyků). Architektura nástroje IPython je navržena takovým způsobem, že je do značné míry modulární, což mj.&nbsp;znamená, že uživatelé mohou s&nbsp;IPythonem komunikovat hned několika možnými způsoby. My se v&nbsp;tomto článku zaměříme zejména na použití interaktivního shellu (což je vlastně v&nbsp;mnoha ohledech vylepšená varianta smyčky REPL) a taktéž na IPython Notebook, což je naopak implementace konceptu diáře (notebooku). Další množnosti komunikace s&nbsp;IPythonem spočívají v&nbsp;použití 0MQ (Zero MQ), což je zjednodušeně řečeno řešení postavené na bázi socketů (viz též <a href="https://www.root.cz/clanky/0mq-knihovna-pro-asynchronni-predavani-zprav/">článek</a> o této knihovně).</p>

<p>Možnosti IPythonu jsou však ve skutečnosti mnohem větší, než &bdquo;pouhé&ldquo; vylepšené rozhraní mezi uživatelem a interpretrem. Architektura IPythonu například umožňuje, aby se komplikované výpočty neprováděly přímo na tom počítači, kde je spuštěn interaktivní shell (klient), ale aby se pouze předaly dalším strojům tvořícím výpočetní farmu. Díky tomu &ndash; a taktéž díky propojení IPythonu s&nbsp;knihovnami <i>NumPy</i> a <i>SciPy</i> i s&nbsp;nástrojem <i>matplotlib</i> &ndash; se IPython používá i v&nbsp;těch oblastech, kde se provádí mnoho složitých a/nebo časově náročných výpočtů, což může znít poněkud paradoxně, když si uvědomíme, že samotný Python je v&nbsp;těchto ohledech dosti pomalý jazyk (ve skutečnosti <i>NumPy</i> předává výpočty nativnímu kódu psanému v&nbsp;C popř.&nbsp;ve Fortranu).</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Instalace balíčku <strong>ipython</strong></h2>

<pre>
$ <strong>pip3 install --user ipython</strong>
&nbsp;
Collecting ipython
  Downloading https://files.pythonhosted.org/packages/46/b5/ca080401b8dbde51a0f4377b4e22ce02b266340a1cda389b6dea702d06d1/ipython-7.4.0-py3-none-any.whl (769kB)
    100% |████████████████████████████████| 778kB 1.1MB/s 
Requirement already satisfied: jedi&gt;=0.10 in /home/tester/.local/lib/python3.6/site-packages (from ipython)
Requirement already satisfied: pygments in /home/tester/.local/lib/python3.6/site-packages (from ipython)
Requirement already satisfied: pickleshare in /home/tester/.local/lib/python3.6/site-packages (from ipython)
Requirement already satisfied: traitlets&gt;=4.2 in /home/tester/.local/lib/python3.6/site-packages (from ipython)
Requirement already satisfied: prompt-toolkit&lt;2.1.0,&gt;=2.0.0 in /home/tester/.local/lib/python3.6/site-packages (from ipython)
Requirement already satisfied: setuptools&gt;=18.5 in /usr/lib/python3.6/site-packages (from ipython)
Requirement already satisfied: pexpect; sys_platform != "win32" in /home/tester/.local/lib/python3.6/site-packages (from ipython)
Requirement already satisfied: backcall in /home/tester/.local/lib/python3.6/site-packages (from ipython)
Requirement already satisfied: decorator in /usr/lib/python3.6/site-packages (from ipython)
Requirement already satisfied: parso&gt;=0.3.0 in /home/tester/.local/lib/python3.6/site-packages (from jedi&gt;=0.10-&gt;ipython)
Requirement already satisfied: six in /home/tester/.local/lib/python3.6/site-packages (from traitlets&gt;=4.2-&gt;ipython)
Requirement already satisfied: ipython-genutils in /home/tester/.local/lib/python3.6/site-packages (from traitlets&gt;=4.2-&gt;ipython)
Requirement already satisfied: wcwidth in /home/tester/.local/lib/python3.6/site-packages (from prompt-toolkit&lt;2.1.0,&gt;=2.0.0-&gt;ipython)
Requirement already satisfied: ptyprocess&gt;=0.5 in /home/tester/.local/lib/python3.6/site-packages (from pexpect; sys_platform != "win32"-&gt;ipython)
Installing collected packages: ipython
Successfully installed ipython-7.4.0
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Interaktivní rozhraní IPythonu</h2>

<p>Základním modulem určeným pro komunikaci uživatele či programátora s&nbsp;jádrem IPythonu je interaktivní shell. Ten se spouští příkazem <strong>ipython</strong> popř.&nbsp;<strong>ipython3</strong>, samozřejmě v&nbsp;závislosti na tom, zda vyžadujete práci s&nbsp;interpretrem jazyka Python 2.x či naopak jeho novější varianty Python 3.x (navíc se jedná i o odlišné balíčky, takže je sice možné mít nainstalován jak Python 2.x i Python 3.x, ovšem IPython je nutné taktéž nainstalovat ze dvou oddělených balíčků):

<p>Interaktivní shell IPythonu se sice na první pohled může podobat klasickému interaktivnímu rozhraní interpretru Pythonu, ve skutečnosti jsou však možnosti IPythonu mnohem větší. Podívejme se na první podstatný rozdíl, který má dopad zejména na praktické použití IPythonu. Pokud v&nbsp;interpretru Pythonu potřebujeme například napsat programovou smyčku, je nutné provést ruční odsazení těla smyčky, jinak dojde k&nbsp;chybě. Namísto toho v&nbsp;IPythonu se odsazení provede automaticky, protože konec vnořeného bloku se oznamuje prázdným řádkem. To je pro interaktivní použití mnohem přirozenější chování:</p>

<p>Mezi další přednosti interaktivního shellu IPythonu patří automatické doplňování kódu klávesou <strong>Tab</strong>, plnohodnotná historie zadaných příkazů (podobně jako v&nbsp;BASHi, tedy například s&nbsp;velmi užitečnou klávesovou zkratkou <strong>Ctrl+R</strong> určenou pro hledání v&nbsp;historii) a taktéž speciální pseudopříkazy (nazývané &bdquo;magické&ldquo;). Pokud například potřebujete zjistit podrobnější informace o nějakém identifikátoru (jménu funkce, metody, třídy či proměnné), stačí za název vložit znak otazníku:</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. IPython Qt Console aneb vylepšený pseudoterminál</h2>

<p>Někteří uživatelé systému IPython preferují namísto klasického terminálu (resp.&nbsp;přesněji řečeno emulátoru terminálu), v&nbsp;němž běží IPython, použití nástroje nazvaného <i>IPython Qt Console</i>. Jak název tohoto nástroje naznačuje, jedná se o obdobu terminálu či konzole, ovšem s&nbsp;několika vylepšeními. Mezi první vylepšení patří především existence &bdquo;bublinové nápovědy&ldquo;, která se zobrazí například ve chvíli, kdy se mají zadávat parametry funkce či metody. Mezi další vylepšení patří podpora pro vkládání grafů, obrázků a dalších mediálních dat přímo do plochy Qt Console, čímž se možnosti tohoto nástroje přibližují dále popsanému IPython Notebooku (toto téma si osvětlíme v&nbsp;navazující kapitole). Poznámka na okraj: i když Qt Console používá knihovnu Qt, lze ji bez problémů použít i v&nbsp;Gnome Shellu či v&nbsp;jakémkoli jiném prostředí včetně XFCE či Fluxboxu.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>What is REPL?<br />
<a href="https://pythonprogramminglanguage.com/repl/">https://pythonprogramminglanguage.com/repl/</a>
</li>

<li>What is a REPL?<br />
<a href="https://codewith.mu/en/tutorials/1.0/repl">https://codewith.mu/en/tutorials/1.0/repl</a>
</li>

<li>Programming at the REPL: Introduction<br />
<a href="https://clojure.org/guides/repl/introduction">https://clojure.org/guides/repl/introduction</a>
</li>

<li>What is REPL? (Quora)<br />
<a href="https://www.quora.com/What-is-REPL">https://www.quora.com/What-is-REPL</a>
</li>

<li>Gorilla REPL: interaktivní prostředí pro programovací jazyk Clojure<br />
<a href="https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/">https://www.root.cz/clanky/gorilla-repl-interaktivni-prostredi-pro-programovaci-jazyk-clojure/</a>
</li>

<li>Read-eval-print loop (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop</a>
</li>

<li>Domovská stránka programovacího jazyka Python<br />
<a href="https://www.python.org/">https://www.python.org/</a>
</li>

<li>Domovská stránka projektu bpython<br />
<a href="https://bpython-interpreter.org/">https://bpython-interpreter.org/</a>
</li>

<li>Projekt bpython na PyPi<br />
<a href="https://pypi.org/project/bpython/">https://pypi.org/project/bpython/</a>
</li>

<li>Git repositář projektu bpython<br />
<a href="https://github.com/bpython/bpython">https://github.com/bpython/bpython</a>
</li>

<li>Projekt ptpython na PyPi<br />
<a href="https://pypi.org/project/ptpython/">https://pypi.org/project/ptpython/</a>
</li>

<li>Git repositář projektu ptpython<br />
<a href="https://github.com/prompt-toolkit/ptpython">https://github.com/prompt-toolkit/ptpython</a>
</li>

<li>Domovská stránka projektu DreamPie<br />
<a href="http://www.dreampie.org/">http://www.dreampie.org/</a>
</li>

<li>Projekt DreamPie na PyPi<br />
<a href="https://pypi.org/project/dreampie/">https://pypi.org/project/dreampie/</a>
</li>

<li>Git repositář projektu DreamPie<br />
<a href="https://github.com/noamraph/dreampie">https://github.com/noamraph/dreampie</a>
</li>

<li>Domovská stránka projektu IPython<br />
<a href="https://ipython.org/">https://ipython.org/</a>
</li>

<li>IPython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/IPython">https://en.wikipedia.org/wiki/IPython</a>
</li>

<li>Projekt IPython na PyPi<br />
<a href="https://pypi.org/project/ipython/">https://pypi.org/project/ipython/</a>
</li>

<li>Dokumentace k IPythonu<br />
<a href="http://ipython.org/documentation.html#">http://ipython.org/documentation.html#</a>
</li>

<li>IPython Tutorial<br />
<a href="http://ipython.readthedocs.org/en/stable/interactive/tutorial.html">http://ipython.readthedocs.org/en/stable/interactive/tutorial.html</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: IPython a IPython Notebook<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-ipython-a-ipython-notebook/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy (2.část)<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s využitím knihoven Numpy a matplotlib<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-vykreslovani-grafu-s-vyuzitim-knihoven-numpy-a-matplotlib/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-vykreslovani-grafu-s-vyuzitim-knihoven-numpy-a-matplotlib/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: vykreslování grafů s využitím knihoven Numpy a matplotlib (2.část)<br />
<a href="http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-vykreslovani-grafu-s-vyuzitim-knihoven-numpy-a-matplotlib-2-cast/">http://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-vykreslovani-grafu-s-vyuzitim-knihoven-numpy-a-matplotlib-2-cast/</a>
</li>

<li>Is IPython Notebook ever used as an IDE, or merely for presentations?<br />
<a href="https://www.reddit.com/r/IPython/comments/1uk7hp/is_ipython_notebook_ever_used_as_an_ide_or_merely/">https://www.reddit.com/r/IPython/comments/1uk7hp/is_ipython_notebook_ever_used_as_an_ide_or_merely/</a>
</li>

<li>The IDE as a Bad Programming Language Enabler <br />
<a href="https://dzone.com/articles/ide-bad-programming-language">https://dzone.com/articles/ide-bad-programming-language</a>
</li>

<li>Enhanced Interactive Python with IPython<br />
<a href="http://www.onlamp.com/pub/a/python/2005/01/27/ipython.html">http://www.onlamp.com/pub/a/python/2005/01/27/ipython.html</a>
</li>

<li>Příkazový řádek – přítel nejvěrnější<br />
<a href="https://www.root.cz/clanky/prikazovy-radek-pritel-nejvernejsi/">https://www.root.cz/clanky/prikazovy-radek-pritel-nejvernejsi/</a>
</li>

<li>Příkazový řádek - přítel nejvěrnější (2)<br />
<a href="https://www.root.cz/clanky/prikazovy-radek-pritel-nejvernejsi-2/">https://www.root.cz/clanky/prikazovy-radek-pritel-nejvernejsi-2/</a>
</li>

<li>Picking a Python Interpreter (3 vs 2)<br />
<a href="https://docs.python-guide.org/starting/which-python/">https://docs.python-guide.org/starting/which-python/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů: vlastní filtry a lexery<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu-vlastni-filtry-a-lexery/</a>
</li>

<li>Knihovna Jedi: doplňování kódu a statická analýza kódu v Pythonu<br />
<a href="https://www.root.cz/clanky/knihovna-jedi-doplnovani-kodu-a-staticka-analyza-kodu-v-pythonu/">https://www.root.cz/clanky/knihovna-jedi-doplnovani-kodu-a-staticka-analyza-kodu-v-pythonu/</a>
</li>

<li>Knihovna Jedi: doplňování kódu a statická analýza kódu v Pythonu (dokončení)<br />
<a href="https://www.root.cz/clanky/knihovna-jedi-doplnovani-kodu-a-staticka-analyza-kodu-v-pythonu-dokonceni/">https://www.root.cz/clanky/knihovna-jedi-doplnovani-kodu-a-staticka-analyza-kodu-v-pythonu-dokonceni/</a>
</li>

<li>Pygments – Python syntax highlighter<br />
<a href="http://pygments.org/">http://pygments.org/</a>
</li>

<li>Pygments (dokumentace)<br />
<a href="http://pygments.org/docs/">http://pygments.org/docs/</a>
</li>

<li>Write your own lexer<br />
<a href="http://pygments.org/docs/le­xerdevelopment/">http://pygments.org/docs/le­xerdevelopment/</a>
</li>

<li>Jazyky podporované knihovnou Pygments<br />
<a href="http://pygments.org/languages/">http://pygments.org/languages/</a>
</li>

<li>Pygments FAQ<br />
<a href="http://pygments.org/faq/">http://pygments.org/faq/</a>
</li>

<li>Pygments 2.2.0 (na PyPi)<br />
<a href="https://pypi.org/project/Pygments/">https://pypi.org/project/Pygments/</a>
</li>

<li>Syntax highlighting<br />
<a href="https://en.wikipedia.org/wi­ki/Syntax_highlighting">https://en.wikipedia.org/wi­ki/Syntax_highlighting</a>
</li>

<li>Jedi – an awesome autocompletion/static analysis library for Python<br />
<a href="https://jedi.readthedocs.i­o/en/latest/index.html">https://jedi.readthedocs.i­o/en/latest/index.html</a>
</li>

<li>Jedi API Overview<br />
<a href="https://jedi.readthedocs.i­o/en/latest/docs/api.html">https://jedi.readthedocs.i­o/en/latest/docs/api.html</a>
</li>

<li>jedi-vim<br />
<a href="https://github.com/davidhalter/jedi-vim">https://github.com/davidhalter/jedi-vim</a>
</li>

<li>Tvorba textového rozhraní s knihovnou prompt_toolkit: základní prvky TUI<br />
<a href="https://www.root.cz/clanky/tvorba-textoveho-rozhrani-s-knihovnou-prompt-toolkit-zakladni-prvky-tui/">https://www.root.cz/clanky/tvorba-textoveho-rozhrani-s-knihovnou-prompt-toolkit-zakladni-prvky-tui/</a>
</li>

<li>Tvorba TUI s knihovnou prompt_toolkit: aplikace s celoobrazovkovým rozhraním<br />
<a href="https://www.root.cz/clanky/tvorba-tui-s-knihovnou-prompt-toolkit-aplikace-s-celoobrazovkovym-rozhranim/">https://www.root.cz/clanky/tvorba-tui-s-knihovnou-prompt-toolkit-aplikace-s-celoobrazovkovym-rozhranim/</a>
</li>

<li>Tvorba textového uživatelského rozhraní s knihovnou prompt_toolkit: ovládací prvky (widgety)<br />
<a href="https://www.root.cz/clanky/tvorba-textoveho-uzivatelskeho-rozhrani-s-knihovnou-prompt-toolkit-ovladaci-prvky-widgety/">https://www.root.cz/clanky/tvorba-textoveho-uzivatelskeho-rozhrani-s-knihovnou-prompt-toolkit-ovladaci-prvky-widgety/</a>
</li>

<li>ØMQ: knihovna pro asynchronní předávání zpráv<br />
<a href="https://www.root.cz/clanky/0mq-knihovna-pro-asynchronni-predavani-zprav/">https://www.root.cz/clanky/0mq-knihovna-pro-asynchronni-predavani-zprav/</a>
</li>

<li>Další možnosti poskytované knihovnou ØMQ<br />
<a href="https://www.root.cz/clanky/dalsi-moznosti-poskytovane-knihovnou-mq/">https://www.root.cz/clanky/dalsi-moznosti-poskytovane-knihovnou-mq/</a>
</li>

<li>What is the difference between Jupyter and IPython Notebook?<br />
<a href="https://www.quora.com/What-is-the-difference-between-Jupyter-and-IPython-Notebook">https://www.quora.com/What-is-the-difference-between-Jupyter-and-IPython-Notebook</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

