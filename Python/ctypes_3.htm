<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Propojení Pythonu s nativními knihovnami s využitím balíčku ctypes: zarovnání ve strukturách, bitová pole</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Propojení Pythonu s nativními knihovnami s využitím balíčku ctypes: zarovnání ve strukturách, bitová pole</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Dnes se budeme zabývat trojicí částečně souvisejících problémů: způsobem předávání struktur, které obsahují jako své prvky ukazatele, předáváním bitových polí a taktéž problematikou zarovnání prvků ve strukturách.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Propojení Pythonu s&nbsp;nativními knihovnami s&nbsp;využitím balíčku <i>ctypes</i>: zarovnání ve strukturách, bitová pole</a></p>
<p><a href="#k02">*** 2. Krátké zopakování: nativní (céčková) knihovna pro výpočet a vykreslení fraktálů</a></p>
<p><a href="#k03">*** 3. Interaktivní části aplikace naprogramovaná v&nbsp;Pythonu</a></p>
<p><a href="#k04">4. Céčkovská struktura obsahující ukazatel</a></p>
<p><a href="#k05">5. Céčkovské funkce akceptující strukturu obsahující ukazatel</a></p>
<p><a href="#k06">*** 6. Volání upravených nativních funkcí z&nbsp;Pythonu s&nbsp;předáním struktury s&nbsp;ukazateli</a></p>
<p><a href="#k07">7. Úplný zdrojový kód Pythonní části demonstračního příkladu</a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Propojení Pythonu s&nbsp;nativními knihovnami s&nbsp;využitím balíčku <i>ctypes</i>: zarovnání ve strukturách, bitová pole</h2>

<p><a
href="https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-ctypes-struktury-a-ukazatele/">V&nbsp;předchozím
článku o volání nativních funkcí z&nbsp;Pythonu přes knihovnu <i>ctypes</i></a>
jsme se zabývali způsobem předávání struktur (<strong>struct</strong>) a
ukazatelů (<i>pointer</i>) z&nbsp;jazyka Python do céčka (včetně kombinace obou
způsobů, tj.&nbsp;předání ukazatele na strukturu). Dnes na toto téma navážeme.
Zabývat se budeme trojicí problémů: předáváním struktur, které obsahují jako
své prvky ukazatele, předáváním bitových polí a taktéž problematikou zarovnání
prvků ve strukturách. Se všemi těmito problémy se pochopitelně velmi často
můžeme setkat v&nbsp;praxi.</p>

<p><div class="rs-tip-major">Poznámka: ukazatele jsou v&nbsp;C používány i při
práci s&nbsp;řetězci, takže se s&nbsp;jejich zpracováním skutečně setkáme
doslova v&nbsp;každém céčkovském programu.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
typedef struct {
    unsigned int width;
    unsigned int height;
} image_size_t;
&nbsp;
typedef struct {
    unsigned int maxiter;
    double cx;
    double cy;
} rendering_params_t;
</pre>

<pre>
#include "renderer.h"

void putpixel(unsigned char **pixel, const unsigned char *palette,
              int color_index) {
    int color_offset = color_index * 3;
    unsigned char *pal = (unsigned char *)(palette + color_offset);

    *(*pixel)++ = *pal++;
    *(*pixel)++ = *pal++;
    *(*pixel)++ = *pal;
    (*pixel)++;
}

void render_mandelbrot(image_size_t *image_size,
                       const unsigned char *palette, unsigned char *pixels,
                       rendering_params_t *rendering_params) {
    int x, y;
    double cx, cy;
    double xmin = -2.0, ymin = -1.5, xmax = 1.0, ymax = 1.5;
    unsigned char *p = pixels;

    cy = ymin;
    for (y = 0; y &lt; image_size-&gt;height; y++) {
        cx = xmin;
        for (x = 0; x &lt; image_size-&gt;width; x++) {
            double zx = 0.0;
            double zy = 0.0;
            unsigned int i = 0;
            while (i &lt; rendering_params-&gt;maxiter) {
                double zx2 = zx * zx;
                double zy2 = zy * zy;
                if (zx2 + zy2 &gt; 4.0) {
                    break;
                }
                zy = 2.0 * zx * zy + cy;
                zx = zx2 - zy2 + cx;
                i++;
            }
            putpixel(&p, palette, i);
            cx += (xmax - xmin) / image_size-&gt;width;
        }
        cy += (ymax - ymin) / image_size-&gt;height;
    }
}

void render_julia(image_size_t *image_size,
                  const unsigned char *palette, unsigned char *pixels,
                  rendering_params_t *rendering_params) {
    int x, y;
    double zx0, zy0;
    double xmin = -1.5, ymin = -1.5, xmax = 1.5, ymax = 1.5;
    unsigned char *p = pixels;

    zy0 = ymin;
    for (y = 0; y &lt; image_size-&gt;height; y++) {
        zx0 = xmin;
        for (x = 0; x &lt; image_size-&gt;width; x++) {
            double zx = zx0;
            double zy = zy0;
            unsigned int i = 0;
            while (i &lt; rendering_params-&gt;maxiter) {
                double zx2 = zx * zx;
                double zy2 = zy * zy;
                if (zx2 + zy2 &gt; 4.0) {
                    break;
                }
                zy = 2.0 * zx * zy + rendering_params-&gt;cy;
                zx = zx2 - zy2 + rendering_params-&gt;cx;
                i++;
            }
            putpixel(&p, palette, i);
            zx0 += (xmax - xmin) / image_size-&gt;width;
        }
        zy0 += (ymax - ymin) / image_size-&gt;height;
    }
}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
import sys
from ctypes import (
    CDLL,
    c_double,
    c_int,
    c_uint,
    create_string_buffer,
    Structure,
    pointer,
)

from palette_mandmap import palette

import pygame
import pygame.locals

TITLE = "Renderer"
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 300
IMAGE_WIDTH = 256
IMAGE_HEIGHT = 256

MAXITER = 150


def initialize_ui(title, width, height):
    """Initialize Pygame display, drawing surface, and clocks."""
    # set window title
    pygame.display.set_caption(title)

    # initialize window
    display = pygame.display.set_mode([width, height])
    display.fill((0, 0, 0))

    clock = pygame.time.Clock()

    return display, clock


def palette_to_buffer(p):
    s = create_string_buffer(len(p) * 3)
    i = 0
    for color in p:
        s[i] = color[0]
        s[i + 1] = color[1]
        s[i + 2] = color[2]
        i += 3
    return s


def event_loop(display, image1, image2, clock):
    while True:
        for event in pygame.event.get():
            if event.type == pygame.locals.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.locals.KEYDOWN:
                if event.key == pygame.locals.K_ESCAPE:
                    pygame.quit()
                    sys.exit()

        # all events has been processed - update scene and redraw the screen
        display.blit(image1, (30, 20))
        display.blit(image2, (60 + image1.get_width(), 20))

        # and update the whole display
        pygame.display.update()
        clock.tick(25)


def image_from_buffer(buffer, width, height, fmt):
    return pygame.image.frombytes(bytes(buffer), (width, height), fmt)


class ImageSize(Structure):
    _fields_ = [("width", c_uint), ("height", c_uint)]


class RenderingParams(Structure):
    _fields_ = [("maxiter", c_uint), ("cx", c_double), ("cy", c_double)]


def main():
    image_size = ImageSize(IMAGE_WIDTH, IMAGE_HEIGHT)

    cx = -0.171119200000000013445
    cy = 0.657309400000000000000
    rendering_params = RenderingParams(MAXITER, cx, cy)

    pal = palette_to_buffer(palette)

    display, clock = initialize_ui(TITLE, SCREEN_WIDTH, SCREEN_HEIGHT)

    # try to load dynamically linked library
    renderer = CDLL("./renderer.so")

    # create buffer for raster image
    buffer = create_string_buffer(4 * IMAGE_WIDTH * IMAGE_HEIGHT)

    # render Mandelbrot set into buffer
    renderer.render_mandelbrot(
        pointer(image_size), pal, buffer, pointer(rendering_params)
    )
    image1 = image_from_buffer(buffer, IMAGE_WIDTH, IMAGE_HEIGHT, "RGBX")

    # render Julia set into buffer
    renderer.render_julia(pointer(image_size), pal, buffer, pointer(rendering_params))
    image2 = image_from_buffer(buffer, IMAGE_WIDTH, IMAGE_HEIGHT, "RGBX")

    event_loop(display, image1, image2, clock)


if __name__ == "__main__":
    main()


# finito
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Céčkovská struktura obsahující ukazatel</h2>

<p>V&nbsp;předchozím demonstračním příkladu se do céčkových funkcí ve
skutečnosti samostatně předávaly dvě informace související s&nbsp;obrázkem
&ndash; struktura s&nbsp;jeho rozměry a v&nbsp;dalším samostatném parametru
ukazatel na buffer s&nbsp;pixely:</p>

<pre>
void <strong>render_mandelbrot</strong>(<u>image_size_t *image_size</u>,
                       const unsigned char *palette, <u>unsigned char *pixels</u>,
                       rendering_params_t *rendering_params) {
</pre>

<p>Možná by mohlo být výhodnější tyto informace spojit do jediné struktury,
která by mohla vypadat následovně:</p>

<pre>
typedef struct {
    unsigned int width;
    unsigned int height;
    unsigned char *pixels;
} <strong>image_t</strong>;
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se změnil i název
struktury, protože už se nejedná jen o informace o obrázku, ale o celý
samostatný rastrový obrázek.</div></p>

<p>Druhá datová struktura, kterou používáme a která obsahuje informace o
fraktálu, zůstane stále stejná:</p>

<pre>
typedef struct {
    unsigned int maxiter;
    double cx;
    double cy;
} <strong>rendering_params_t</strong>;
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Céčkovské funkce akceptující strukturu obsahující ukazatel</h2>

<p>Ve druhém kroku upravíme hlavičky obou céčkovských funkcí, do kterých se
bude předávat struktura (resp.&nbsp;přesněji řečeno ukazatel na strukturu) se
všemi informacemi o rastrovém obrázku, tj.&nbsp;s&nbsp;jeho rozměry i
ukazatelem na buffer &nbsp;hodnotami pixelů:</p>

<pre>
void <strong>render_mandelbrot</strong>(<u>image_t *image</u>,
                       const unsigned char *palette,
                       rendering_params_t *rendering_params) {
}
&nbsp;
&nbsp;
&nbsp;
void <strong>render_julia</strong>(<u>image_t *image</u>,
                  const unsigned char *palette,
                  rendering_params_t *rendering_params) {
</pre>

<p>V&nbsp;tělech těchto funkcí dojde k&nbsp;nepatrným změnám, konkrétně při
získání rozměrů obrázku a ukazatele na hodnoty (barvy) pixelů:</p>

<pre>
...
...
...
    unsigned char *p = <u>image-&gt;pixels</u>;
...
...
...
    cy = ymin;
    for (y = 0; y &lt; <u>image-&gt;height</u>; y++) {
        cx = xmin;
        for (x = 0; x &lt; <u>image-&gt;width</u>; x++) {
</pre>

<p>Úplný zdrojový kód céčkovské části aplikace bude po všech provedených
úpravách vypadat následovně:</p>

<pre>
#include "renderer.h"
&nbsp;
void <strong>putpixel</strong>(unsigned char **pixel, const unsigned char *palette,
              int color_index) {
    int color_offset = color_index * 3;
    unsigned char *pal = (unsigned char *)(palette + color_offset);
&nbsp;
    *(*pixel)++ = *pal++;
    *(*pixel)++ = *pal++;
    *(*pixel)++ = *pal;
    (*pixel)++;
}
&nbsp;
void <strong>render_mandelbrot</strong>(image_t *image,
                       const unsigned char *palette,
                       rendering_params_t *rendering_params) {
    int x, y;
    double cx, cy;
    double xmin = -2.0, ymin = -1.5, xmax = 1.0, ymax = 1.5;
    unsigned char *p = image-&gt;pixels;
&nbsp;
    cy = ymin;
    for (y = 0; y &lt; image-&gt;height; y++) {
        cx = xmin;
        for (x = 0; x &lt; image-&gt;width; x++) {
            double zx = 0.0;
            double zy = 0.0;
            unsigned int i = 0;
            while (i &lt; rendering_params-&gt;maxiter) {
                double zx2 = zx * zx;
                double zy2 = zy * zy;
                if (zx2 + zy2 &gt; 4.0) {
                    break;
                }
                zy = 2.0 * zx * zy + cy;
                zx = zx2 - zy2 + cx;
                i++;
            }
            putpixel(&amp;p, palette, i);
            cx += (xmax - xmin) / image-&gt;width;
        }
        cy += (ymax - ymin) / image-&gt;height;
    }
}
&nbsp;
void <strong>render_julia</strong>(image_t *image,
                  const unsigned char *palette,
                  rendering_params_t *rendering_params) {
    int x, y;
    double zx0, zy0;
    double xmin = -1.5, ymin = -1.5, xmax = 1.5, ymax = 1.5;
    unsigned char *p = image-&gt;pixels;
&nbsp;
    zy0 = ymin;
    for (y = 0; y &lt; image-&gt;height; y++) {
        zx0 = xmin;
        for (x = 0; x &lt; image-&gt;width; x++) {
            double zx = zx0;
            double zy = zy0;
            unsigned int i = 0;
            while (i &lt; rendering_params-&gt;maxiter) {
                double zx2 = zx * zx;
                double zy2 = zy * zy;
                if (zx2 + zy2 &gt; 4.0) {
                    break;
                }
                zy = 2.0 * zx * zy + rendering_params-&gt;cy;
                zx = zx2 - zy2 + rendering_params-&gt;cx;
                i++;
            }
            putpixel(&amp;p, palette, i);
            zx0 += (xmax - xmin) / image-&gt;width;
        }
        zy0 += (ymax - ymin) / image-&gt;height;
    }
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Volání upravených nativních funkcí z&nbsp;Pythonu s&nbsp;předáním struktury s&nbsp;ukazateli</h2>

<p></p>

<pre>
class <strong>Image</strong>(Structure):
    _fields_ = [("width", c_uint), ("height", c_uint), ("pixels", c_char_p)]
</pre>

<p></p>

<pre>
<i># try to load dynamically linked library</i>
renderer = CDLL("./renderer.so")
</pre>

<p></p>

<pre>
<i># create buffer for raster image</i>
buffer = create_string_buffer(4 * IMAGE_WIDTH * IMAGE_HEIGHT)
</pre>

<p></p>

<pre>
c_image_1 = Image(IMAGE_WIDTH, IMAGE_HEIGHT, buffer)
&nbsp;
<i># render Mandelbrot set into buffer</i>
renderer.render_mandelbrot(
    pointer(c_image_1), pal, pointer(rendering_params)
)
</pre>

<p></p>

<pre>
c_image_2 = Image(IMAGE_WIDTH, IMAGE_HEIGHT, buffer)
&nbsp;
<i># render Julia set into buffer</i>
renderer.render_julia(pointer(c_image_2), pal, pointer(rendering_params))
image2 = image_from_buffer(buffer, IMAGE_WIDTH, IMAGE_HEIGHT, "RGBX")
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Úplný zdrojový kód Pythonní části demonstračního příkladu</h2>

<p>Pro úplnost i uveďme úplný zdrojový kód tohoto demonstračního příkladu,
resp.&nbsp;přesněji řečeno jeho Pythonní části:</p>

<pre>
import sys
from ctypes import (
    CDLL,
    c_double,
    c_int,
    c_uint,
    c_char_p,
    create_string_buffer,
    Structure,
    pointer,
)
&nbsp;
from palette_mandmap import palette
&nbsp;
import pygame
import pygame.locals
&nbsp;
TITLE = "Renderer"
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 300
IMAGE_WIDTH = 256
IMAGE_HEIGHT = 256
&nbsp;
MAXITER = 150
&nbsp;
&nbsp;
def <strong>initialize_ui</strong>(title, width, height):
    <i>"""Initialize Pygame display, drawing surface, and clocks."""</i>
    <i># set window title</i>
    pygame.display.set_caption(title)
&nbsp;
    <i># initialize window</i>
    display = pygame.display.set_mode([width, height])
    display.fill((0, 0, 0))
&nbsp;
    clock = pygame.time.Clock()
&nbsp;
    return display, clock
&nbsp;
&nbsp;
def <strong>palette_to_buffer</strong>(p):
    s = create_string_buffer(len(p) * 3)
    i = 0
    for color in p:
        s[i] = color[0]
        s[i + 1] = color[1]
        s[i + 2] = color[2]
        i += 3
    return s
&nbsp;
&nbsp;
def <strong>event_loop</strong>(display, image1, image2, clock):
    while True:
        for event in pygame.event.get():
            if event.type == pygame.locals.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.locals.KEYDOWN:
                if event.key == pygame.locals.K_ESCAPE:
                    pygame.quit()
                    sys.exit()
&nbsp;
        <i># all events has been processed - update scene and redraw the screen</i>
        display.blit(image1, (30, 20))
        display.blit(image2, (60 + image1.get_width(), 20))
&nbsp;
        <i># and update the whole display</i>
        pygame.display.update()
        clock.tick(25)
&nbsp;
&nbsp;
def <strong>image_from_buffer</strong>(buffer, width, height, fmt):
    return pygame.image.frombytes(bytes(buffer), (width, height), fmt)
&nbsp;
&nbsp;
class <strong>Image</strong>(Structure):
    _fields_ = [("width", c_uint), ("height", c_uint), ("pixels", c_char_p)]
&nbsp;
&nbsp;
class <strong>RenderingParams</strong>(Structure):
    _fields_ = [("maxiter", c_uint), ("cx", c_double), ("cy", c_double)]
&nbsp;
&nbsp;
def <strong>main</strong>():
    cx = -0.171119200000000013445
    cy = 0.657309400000000000000
    rendering_params = RenderingParams(MAXITER, cx, cy)
&nbsp;
    pal = palette_to_buffer(palette)
&nbsp;
    display, clock = initialize_ui(TITLE, SCREEN_WIDTH, SCREEN_HEIGHT)
&nbsp;
    <i># try to load dynamically linked library</i>
    renderer = CDLL("./renderer.so")
&nbsp;
    <i># create buffer for raster image</i>
    buffer = create_string_buffer(4 * IMAGE_WIDTH * IMAGE_HEIGHT)
&nbsp;
    c_image_1 = Image(IMAGE_WIDTH, IMAGE_HEIGHT, buffer)
&nbsp;
    <i># render Mandelbrot set into buffer</i>
    renderer.render_mandelbrot(
        pointer(c_image_1), pal, pointer(rendering_params)
    )
    image1 = image_from_buffer(buffer, IMAGE_WIDTH, IMAGE_HEIGHT, "RGBX")
&nbsp;
    c_image_2 = Image(IMAGE_WIDTH, IMAGE_HEIGHT, buffer)
&nbsp;
    <i># render Julia set into buffer</i>
    renderer.render_julia(pointer(c_image_2), pal, pointer(rendering_params))
    image2 = image_from_buffer(buffer, IMAGE_WIDTH, IMAGE_HEIGHT, "RGBX")
&nbsp;
    event_loop(display, image1, image2, clock)
&nbsp;
&nbsp;
if __name__ == "__main__":
    main()
&nbsp;
&nbsp;
<i># finito</i>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
typedef struct {
    unsigned int width;
    unsigned int height;
    unsigned char *pixels;
} image_t;

typedef struct {
    unsigned int maxiter;
    double cx;
    double cy;
} rendering_params_t;
</pre>

<pre>
#include "renderer.h"

void putpixel(unsigned char **pixel, const unsigned char *palette,
              int color_index) {
    int color_offset = color_index * 3;
    unsigned char *pal = (unsigned char *)(palette + color_offset);

    *(*pixel)++ = *pal++;
    *(*pixel)++ = *pal++;
    *(*pixel)++ = *pal;
    (*pixel)++;
}

void render_mandelbrot(image_t *image,
                       const unsigned char *palette,
                       rendering_params_t *rendering_params) {
    int x, y;
    double cx, cy;
    double xmin = -2.0, ymin = -1.5, xmax = 1.0, ymax = 1.5;
    unsigned char *p = image-&gt;pixels;

    cy = ymin;
    for (y = 0; y &lt; image-&gt;height; y++) {
        cx = xmin;
        for (x = 0; x &lt; image-&gt;width; x++) {
            double zx = 0.0;
            double zy = 0.0;
            unsigned int i = 0;
            while (i &lt; rendering_params-&gt;maxiter) {
                double zx2 = zx * zx;
                double zy2 = zy * zy;
                if (zx2 + zy2 &gt; 4.0) {
                    break;
                }
                zy = 2.0 * zx * zy + cy;
                zx = zx2 - zy2 + cx;
                i++;
            }
            putpixel(&p, palette, i);
            cx += (xmax - xmin) / image-&gt;width;
        }
        cy += (ymax - ymin) / image-&gt;height;
    }
}

void render_julia(image_t *image,
                  const unsigned char *palette,
                  rendering_params_t *rendering_params) {
    int x, y;
    double zx0, zy0;
    double xmin = -1.5, ymin = -1.5, xmax = 1.5, ymax = 1.5;
    unsigned char *p = image-&gt;pixels;

    zy0 = ymin;
    for (y = 0; y &lt; image-&gt;height; y++) {
        zx0 = xmin;
        for (x = 0; x &lt; image-&gt;width; x++) {
            double zx = zx0;
            double zy = zy0;
            unsigned int i = 0;
            while (i &lt; rendering_params-&gt;maxiter) {
                double zx2 = zx * zx;
                double zy2 = zy * zy;
                if (zx2 + zy2 &gt; 4.0) {
                    break;
                }
                zy = 2.0 * zx * zy + rendering_params-&gt;cy;
                zx = zx2 - zy2 + rendering_params-&gt;cx;
                i++;
            }
            putpixel(&p, palette, i);
            zx0 += (xmax - xmin) / image-&gt;width;
        }
        zy0 += (ymax - ymin) / image-&gt;height;
    }
}
</pre>

<pre>
import sys
from ctypes import (
    CDLL,
    c_double,
    c_int,
    c_uint,
    c_char,
    create_string_buffer,
    Structure,
    pointer,
    POINTER,
)

from palette_mandmap import palette

import pygame
import pygame.locals

TITLE = "Renderer"
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 300
IMAGE_WIDTH = 256
IMAGE_HEIGHT = 256

MAXITER = 150


def initialize_ui(title, width, height):
    """Initialize Pygame display, drawing surface, and clocks."""
    # set window title
    pygame.display.set_caption(title)

    # initialize window
    display = pygame.display.set_mode([width, height])
    display.fill((0, 0, 0))

    clock = pygame.time.Clock()

    return display, clock


def palette_to_buffer(p):
    s = create_string_buffer(len(p) * 3)
    i = 0
    for color in p:
        s[i] = color[0]
        s[i + 1] = color[1]
        s[i + 2] = color[2]
        i += 3
    return s


def event_loop(display, image1, image2, clock):
    while True:
        for event in pygame.event.get():
            if event.type == pygame.locals.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.locals.KEYDOWN:
                if event.key == pygame.locals.K_ESCAPE:
                    pygame.quit()
                    sys.exit()

        # all events has been processed - update scene and redraw the screen
        display.blit(image1, (30, 20))
        display.blit(image2, (60 + image1.get_width(), 20))

        # and update the whole display
        pygame.display.update()
        clock.tick(25)


def image_from_buffer(buffer, width, height, fmt):
    return pygame.image.frombytes(bytes(buffer), (width, height), fmt)


class Image(Structure):
    _fields_ = [("width", c_uint), ("height", c_uint), ("pixels", POINTER(c_char))]


class RenderingParams(Structure):
    _fields_ = [("maxiter", c_uint), ("cx", c_double), ("cy", c_double)]


def main():
    cx = -0.171119200000000013445
    cy = 0.657309400000000000000
    rendering_params = RenderingParams(MAXITER, cx, cy)

    pal = palette_to_buffer(palette)

    display, clock = initialize_ui(TITLE, SCREEN_WIDTH, SCREEN_HEIGHT)

    # try to load dynamically linked library
    renderer = CDLL("./renderer.so")

    # create buffer for raster image
    buffer = create_string_buffer(4 * IMAGE_WIDTH * IMAGE_HEIGHT)

    c_image_1 = Image(IMAGE_WIDTH, IMAGE_HEIGHT, buffer)

    # render Mandelbrot set into buffer
    renderer.render_mandelbrot(
        pointer(c_image_1), pal, pointer(rendering_params)
    )
    image1 = image_from_buffer(buffer, IMAGE_WIDTH, IMAGE_HEIGHT, "RGBX")

    c_image_2 = Image(IMAGE_WIDTH, IMAGE_HEIGHT, buffer)

    # render Julia set into buffer
    renderer.render_julia(pointer(c_image_2), pal, pointer(rendering_params))
    image2 = image_from_buffer(buffer, IMAGE_WIDTH, IMAGE_HEIGHT, "RGBX")

    event_loop(display, image1, image2, clock)


if __name__ == "__main__":
    main()


# finito
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
#include <stdio.h>

typedef struct {
    unsigned int a;
    unsigned int b;
    unsigned int c;
} my_struct;

void test_pass_by_value(my_struct s) {
    printf("a=%u\nb=%u\nc=%u\n", s.a, s.b, s.c);
}

void test_pass_by_reference(my_struct *s) {
    printf("a=%u\nb=%u\nc=%u\n", s-&gt;a, s-&gt;b, s-&gt;c);
}
</pre>

<pre>
import sys
from ctypes import (
    CDLL,
    c_int,
    c_uint,
    Structure,
    pointer,
    POINTER,
)


class MyStruct(Structure):
    _fields_ = [
        ("a", c_uint),
        ("b", c_uint),
        ("c", c_uint),
    ]


def main():
    # try to load dynamically linked library
    bitfield = CDLL("./bitfield.so")

    my_struct = MyStruct(1, 2, 3)

    # pass my value
    print("Pass struct by value:")
    bitfield.test_pass_by_value(my_struct)

    print()

    # pass my reference
    print("Pass struct by reference:")
    bitfield.test_pass_by_reference(pointer(my_struct))


if __name__ == "__main__":
    main()


# finito
</pre>

<pre>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
#include <stdio.h>

typedef struct {
    unsigned int a:5;
    unsigned int b:6;
    unsigned int c:7;
} my_struct;

void test_pass_by_value(my_struct s) {
    printf("a=%u\nb=%u\nc=%u\n", s.a, s.b, s.c);
}

void test_pass_by_reference(my_struct *s) {
    printf("a=%u\nb=%u\nc=%u\n", s-&gt;a, s-&gt;b, s-&gt;c);
}
</pre>

<pre>
import sys
from ctypes import (
    CDLL,
    c_int,
    c_uint,
    Structure,
    pointer,
    POINTER,
)


class MyStruct(Structure):
    _fields_ = [
        ("a", c_uint),
        ("b", c_uint),
        ("c", c_uint),
    ]


def main():
    # try to load dynamically linked library
    bitfield = CDLL("./bitfield.so")

    my_struct = MyStruct(1, 2, 3)

    # pass my value
    print("Pass struct by value:")
    bitfield.test_pass_by_value(my_struct)

    print()

    # pass my reference
    print("Pass struct by reference:")
    bitfield.test_pass_by_reference(pointer(my_struct))


if __name__ == "__main__":
    main()


# finito
</pre>

<pre>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
#include <stdio.h>

typedef struct {
    unsigned int a:5;
    unsigned int b:6;
    unsigned int c:7;
} my_struct;

void test_pass_by_value(my_struct s) {
    printf("a=%u\nb=%u\nc=%u\n", s.a, s.b, s.c);
}

void test_pass_by_reference(my_struct *s) {
    printf("a=%u\nb=%u\nc=%u\n", s-&gt;a, s-&gt;b, s-&gt;c);
}
</pre>

<pre>
import sys
from ctypes import (
    CDLL,
    c_int,
    c_uint,
    Structure,
    pointer,
    POINTER,
)


class MyStruct(Structure):
    _fields_ = [
        ("a", c_uint, 5),
        ("b", c_uint, 6),
        ("c", c_uint, 7),
    ]


def main():
    # try to load dynamically linked library
    bitfield = CDLL("./bitfield.so")

    my_struct = MyStruct(1, 2, 3)

    # pass my value
    print("Pass struct by value:")
    bitfield.test_pass_by_value(my_struct)

    print()

    # pass my reference
    print("Pass struct by reference:")
    bitfield.test_pass_by_reference(pointer(my_struct))


if __name__ == "__main__":
    main()


# finito
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>V&nbsp;předminulém, minulém i dnešním článku popsané demonstrační příklady
naleznete na GitHubu:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>&nbsp;</td><th>1</th><th>Vyplnění rastrových obrázků vzorkem přímo z&nbsp;Pythonu</th><th>&nbsp;</th></tr>
<tr><td> 1</td><td>show.py</td><td>Vyplnění rastrových obrázků vzorkem přímo z&nbsp;Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><th>2</th><th>Zavolání nativní funkce pro vyplnění obrázku vzorkem</th><th>&nbsp;</th></tr>
<tr><td> 1</td><td>Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example1/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example1/Makefile</a></td></tr>
<tr><td> 2</td><td>renderer.c</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example1/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example1/renderer.c</a></td></tr>
<tr><td> 3</td><td>show.py</td><td>zobrazení dvojice testovacích obrázků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example1/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example1/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><th>3</th><th>Vyplnění rastrového obrázku s&nbsp;využitím barvové palety</th><th>&nbsp;</th></tr>
<tr><td> 5</td><td>Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example2/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example2/Makefile</a></td></tr>
<tr><td> 5</td><td>palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example2/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example2/palette_mandmap.py</a></td></tr>
<tr><td> 6</td><td>renderer.c</td><td>vyplnění rastrového obrázku s&nbsp;využitím barvové palety</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example2/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example2/renderer.c</a></td></tr>
<tr><td> 7</td><td>show.py</td><td>zobrazení testovacího obrázku s&nbsp;paletou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example2/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example2/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><th>4</th><th>Výpočet Mandelbrotovy a Juliovy množiny implementovaný v&nbsp;jazyku C</th><th>&nbsp;</th></tr>
<tr><td> 8</td><td>Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example3/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example3/Makefile</a></td></tr>
<tr><td> 9</td><td>palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example3/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example3/palette_mandmap.py</a></td></tr>
<tr><td>10</td><td>renderer.c</td><td>výpočet Mandelbrotovy a Juliovy množiny implementovaný v&nbsp;C</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example3/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example3/renderer.c</a></td></tr>
<tr><td>11</td><td>show.py</td><td>realizace výpočtu a zobrazení Mandelbrotovy a Juliovy množiny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example3/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example3/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><th>5</th><th>Interaktivní změna tvaru Juliovy množiny</th><th>&nbsp;</th></tr>
<tr><td>12</td><td>Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example4/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example4/Makefile</a></td></tr>
<tr><td>13</td><td>palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example4/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example4/palette_mandmap.py</a></td></tr>
<tr><td>14</td><td>renderer.c</td><td>výpočet Mandelbrotovy a Juliovy množiny implementovaný v&nbsp;C</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example4/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example4/renderer.c</a></td></tr>
<tr><td>15</td><td>show.py</td><td>interaktivní změna hodnoty C při výpočtu Juliovy množiny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example4/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example4/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><th>6</th><th>Využití jednoho (sdíleného) bufferu pro oba obrázky</th><th>&nbsp;</th></tr>
<tr><td>16</td><td>Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example5/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example5/Makefile</a></td></tr>
<tr><td>17</td><td>palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example5/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example5/palette_mandmap.py</a></td></tr>
<tr><td>18</td><td>renderer.c</td><td>výpočet Mandelbrotovy a Juliovy množiny implementovaný v&nbsp;C</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example5/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example5/renderer.c</a></td></tr>
<tr><td>19</td><td>show.py</td><td>využití jednoho (sdíleného) bufferu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example5/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example5/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><th>7</th><th>Využití dvojice bufferů, jeden buffer pro každý obrázek</th><th>&nbsp;</th></tr>
<tr><td>20</td><td>Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example6/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example6/Makefile</a></td></tr>
<tr><td>21</td><td>palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example6/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example6/palette_mandmap.py</a></td></tr>
<tr><td>22</td><td>renderer.c</td><td>výpočet Mandelbrotovy a Juliovy množiny implementovaný v&nbsp;C</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example6/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example6/renderer.c</a></td></tr>
<tr><td>23</td><td>show.py</td><td>využití dvojice rozličných bufferů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example6/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example6/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>&nbsp;</td><th>8</th><th>Přístup k&nbsp;pixelům obrázku po 32bitových slovech</th><th>&nbsp;</th></tr>
<tr><td>24</td><td>Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example7/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example7/Makefile</a></td></tr>
<tr><td>25</td><td>palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example7/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example7/palette_mandmap.py</a></td></tr>
<tr><td>26</td><td>renderer.c</td><td>výpočet Mandelbrotovy a Juliovy množiny implementovaný v&nbsp;C</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example7/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example7/renderer.c</a></td></tr>
<tr><td>27</td><td>show.py</td><td>využití dvojice rozličných bufferů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example7/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example7/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>28</td><td>example8/Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example8/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example8/Makefile</a></td></tr>
<tr><td>29</td><td>example8/palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example8/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example8/palette_mandmap.py</a></td></tr>
<tr><td>30</td><td>example8/renderer.c</td><td>výpočet Mandelbrotovy a Juliovy množiny implementovaný v&nbsp;C</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example8/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example8/renderer.c</a></td></tr>
<tr><td>31</td><td>example8/show.py</td><td>volání funkcí <strong>render_mandelbrot</strong> a <strong>render_julia</strong> s&nbsp;předáním všech potřebných parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example8/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example8/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>28</td><td>example9/Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example9/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example9/Makefile</a></td></tr>
<tr><td>29</td><td>example9/palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example9/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example9/palette_mandmap.py</a></td></tr>
<tr><td>30</td><td>example9/renderer.c</td><td>úprava předchozího příkladu: předání maximálního počtu iterací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example9/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example9/renderer.c</a></td></tr>
<tr><td>31</td><td>example9/show.py</td><td>volání funkcí <strong>render_mandelbrot</strong> a <strong>render_julia</strong> s&nbsp;předáním všech potřebných parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example9/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/example9/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>28</td><td>exampleA/Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleA/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleA/Makefile</a></td></tr>
<tr><td>29</td><td>exampleA/palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleA/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleA/palette_mandmap.py</a></td></tr>
<tr><td>30</td><td>exampleA/renderer.c</td><td>úprava předchozího příkladu: předání velikosti obrázku formou struktury</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleA/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleA/renderer.c</a></td></tr>
<tr><td>31</td><td>exampleA/show.py</td><td>volání funkcí <strong>render_mandelbrot</strong> a <strong>render_julia</strong> s&nbsp;předáním všech potřebných parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleA/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleA/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>28</td><td>exampleB/Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleB/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleB/Makefile</a></td></tr>
<tr><td>29</td><td>exampleB/palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleB/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleB/palette_mandmap.py</a></td></tr>
<tr><td>30</td><td>exampleB/renderer.c</td><td>úprava předchozího příkladu: předání velikosti obrázku formou ukazatele na strukturu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleB/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleB/renderer.c</a></td></tr>
<tr><td>31</td><td>exampleB/show.py</td><td>volání funkcí <strong>render_mandelbrot</strong> a <strong>render_julia</strong> s&nbsp;předáním všech potřebných parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleB/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleB/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>28</td><td>exampleC/Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleC/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleC/Makefile</a></td></tr>
<tr><td>29</td><td>exampleC/palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleC/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleC/palette_mandmap.py</a></td></tr>
<tr><td>30</td><td>exampleC/renderer.c</td><td>úprava předchozího příkladu: předání parametrů pro výpočet formou ukazatele na strukturu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleC/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleC/renderer.c</a></td></tr>
<tr><td>31</td><td>exampleC/show.py</td><td>volání funkcí <strong>render_mandelbrot</strong> a <strong>render_julia</strong> s&nbsp;předáním všech potřebných parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleC/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleC/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>32</td><td>exampleD/Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleD/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleD/Makefile</a></td></tr>
<tr><td>33</td><td>exampleD/palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleD/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleD/palette_mandmap.py</a></td></tr>
<tr><td>34</td><td>exampleD/renderer.c</td><td>pokus o uvolnění paměti s&nbsp;předanými strukturami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleD/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleD/renderer.c</a></td></tr>
<tr><td>35</td><td>exampleD/show.py</td><td>volání funkcí <strong>render_mandelbrot</strong> a <strong>render_julia</strong> s&nbsp;předáním všech potřebných parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleD/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleD/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>36</td><td>exampleE/Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleE/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleE/Makefile</a></td></tr>
<tr><td>37</td><td>exampleE/palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleE/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleE/palette_mandmap.py</a></td></tr>
<tr><td>38</td><td>exampleE/renderer.c</td><td>pokus o uvolnění paměti s&nbsp;předanou bitmapou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleE/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleE/renderer.c</a></td></tr>
<tr><td>39</td><td>exampleE/show.py</td><td>volání funkcí <strong>render_mandelbrot</strong> a <strong>render_julia</strong> s&nbsp;předáním všech potřebných parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleE/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleE/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>40</td><td>exampleF/Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleF/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleF/Makefile</a></td></tr>
<tr><td>41</td><td>exampleF/palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleF/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleF/palette_mandmap.py</a></td></tr>
<tr><td>42</td><td>exampleF/renderer.c</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleF/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleF/renderer.c</a></td></tr>
<tr><td>43</td><td>exampleF/renderer.h</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleF/renderer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleF/renderer.h</a></td></tr>
<tr><td>44</td><td>exampleF/show.py</td><td>volání funkcí <strong>render_mandelbrot</strong> a <strong>render_julia</strong> s&nbsp;předáním všech potřebných parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleF/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleF/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>45</td><td>exampleG/Makefile</td><td>Makefile pro překlad kódu <strong>renderer.c</strong> do dynamicky sdílené knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleG/Makefile">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleG/Makefile</a></td></tr>
<tr><td>46</td><td>exampleG/palette_mandmap.py</td><td>definice barvové palety s&nbsp;256 barvami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleG/palette_mandmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleG/palette_mandmap.py</a></td></tr>
<tr><td>47</td><td>exampleG/renderer.c</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleG/renderer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleG/renderer.c</a></td></tr>
<tr><td>48</td><td>exampleG/renderer.h</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleG/renderer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleG/renderer.h</a></td></tr>
<tr><td>49</td><td>exampleG/show.py</td><td>volání funkcí <strong>render_mandelbrot</strong> a <strong>render_julia</strong> s&nbsp;předáním všech potřebných parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleG/show.py">https://github.com/tisnik/most-popular-python-libs/blob/master/ctypes/exampleG/show.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</table>


Makefile
palette_mandmap.py
renderer.c
renderer.h
show.py

Makefile
palette_mandmap.py
renderer.c
renderer.h
show.py

bitfield1:
bitfield.c
Makefile
test.py

bitfield2:
bitfield.c
Makefile
test.py

bitfield3:
bitfield.c
Makefile
test.py

<p>Navíc si pro úplnost uveďme demonstrační příklady použité v&nbsp;článcích o
knihovně <i>cffi</i>. I v&nbsp;těchto článcích jsme se totiž o <i>ctypes</i>
zmiňovali:</p>

<table>
<tr><th>  #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>  1</td><td>adder/adder.c</td><td>funkce psaná v&nbsp;C, která sečte své dva celočíselné parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/adder.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/adder.c</a></td></tr>
<tr><td>  2</td><td>adder/call_via_cffi1.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;korektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi1.py</a></td></tr>
<tr><td>  3</td><td>adder/call_via_cffi2.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi2.py</a></td></tr>
<tr><td>  4</td><td>adder/call_via_cffi3.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi3.py</a></td></tr>
<tr><td>  5</td><td>adder/call_via_cffi.sh</td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi.sh</a></td></tr>
<tr><td>  6</td><td>adder/call_via_ctypes1.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;korektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes1.py</a></td></tr>
<tr><td>  7</td><td>adder/call_via_ctypes2.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes2.py</a></td></tr>
<tr><td>  8</td><td>adder/call_via_ctypes3.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes3.py</a></td></tr>
<tr><td>  9</td><td>adder/call_via_ctypes.sh </td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes.sh</a></td></tr>
<tr><td> 10</td><td>adder/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/make_library.sh</a></td></tr>
<tr><td> 11</td><td>adder/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 12</td><td>greeter/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/greeter.c</a></td></tr>
<tr><td> 13</td><td>greeter/call_via_cffi1.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;nekorektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi1.py</a></td></tr>
<tr><td> 14</td><td>greeter/call_via_cffi2.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi2.py</a></td></tr>
<tr><td> 15</td><td>greeter/call_via_cffi3.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi3.py</a></td></tr>
<tr><td> 16</td><td>greeter/call_via_cffi.sh</td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi.sh</a></td></tr>
<tr><td> 17</td><td>greeter/call_via_ctypes1.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;nekorektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes1.py</a></td></tr>
<tr><td> 18</td><td>greeter/call_via_ctypes2.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes2.py</a></td></tr>
<tr><td> 19</td><td>greeter/call_via_ctypes3.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes3.py</a></td></tr>
<tr><td> 20</td><td>greeter/call_via_ctypes.sh</td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes.sh</a></td></tr>
<tr><td> 21</td><td>greeter/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/make_library.sh</a></td></tr>
<tr><td> 22</td><td>greeter/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 23</td><td>swapper/swapper.c</td><td>céčkovská funkce prohazující obsah svých dvou parametrů předávaných referencí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/swapper.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/swapper.c</a></td></tr>
<tr><td> 24</td><td>swapper/call_via_cffi1.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python (korektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi1.py</a></td></tr>
<tr><td> 25</td><td>swapper/call_via_cffi2.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python (nekorektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi2.py</a></td></tr>
<tr><td> 26</td><td>swapper/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi.sh</a></td></tr>
<tr><td> 27</td><td>swapper/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/make_library.sh</a></td></tr>
<tr><td> 28</td><td>swapper/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 29</td><td>filler/filler.c</td><td>céčkovská funkce pro vyplnění části pole zadanou hodnotou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/filler.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/filler.c</a></td></tr>
<tr><td> 30</td><td>filler/call_via_cffi.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.py</a></td></tr>
<tr><td> 31</td><td>filler/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.sh</a></td></tr>
<tr><td> 32</td><td>filler/make_library.sh </td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/make_library.sh</a></td></tr>
<tr><td> 32</td><td>filler/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 33</td><td>greeter_h/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.c</a></td></tr>
<tr><td> 34</td><td>greeter_h/greeter.h</td><td>prototyp (předběžná deklarace) funkce <i>greeter</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.h</a></td></tr>
<tr><td> 35</td><td>greeter_h/call_via_cffi4.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi4.py</a></td></tr>
<tr><td> 36</td><td>greeter_h/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi.sh</a></td></tr>
<tr><td> 37</td><td>greeter_h/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/make_library.sh</a></td></tr>
<tr><td> 38</td><td>greeter_h/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 39</td><td>greeter_h_2/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/greeter.c</a></td></tr>
<tr><td> 40</td><td>greeter_h_2/greeter.h</td><td>prototyp (předběžná deklarace) funkce <i>greeter</i> obalená v&nbsp;testu na existenci symbolu/makra</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/greeter.h</a></td></tr>
<tr><td> 41</td><td>greeter_h_2/call_via_cffi5.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/call_via_cffi5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/call_via_cffi5.py</a></td></tr>
<tr><td> 42</td><td>greeter_h_2/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/call_via_cffi.sh</a></td></tr>
<tr><td> 43</td><td>greeter_h_2/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/make_library.sh</a></td></tr>
<tr><td> 44</td><td>greeter_h_2/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 45</td><td>greeter_h_3/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/greeter.c</a></td></tr>
<tr><td> 46</td><td>greeter_h_3/greeter.h</td><td>test na existenci symbolu/makra, pokud makro neexistuje, provede se vložení dalšího souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/greeter.h</a></td></tr>
<tr><td> 47</td><td>greeter_h_3/_greeter.h</td><td>prototyp (předběžná deklarace) funkce <i>greeter</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/_greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/_greeter.h</a></td></tr>
<tr><td> 48</td><td>greeter_h_3/call_via_cffi5.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/call_via_cffi5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/call_via_cffi5.py</a></td></tr>
<tr><td> 49</td><td>greeter_h_3/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/call_via_cffi.sh</a></td></tr>
<tr><td> 50</td><td>greeter_h_3/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/make_library.sh</a></td></tr>
<tr><td> 51</td><td>greeter_h_3/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 52</td><td>greeter_build/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/greeter.c</a></td></tr>
<tr><td> 53</td><td>greeter_build/greeter.h</td><td>prototyp (předběžná deklarace) funkce <i>greeter</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/greeter.h</a></td></tr>
<tr><td> 54</td><td>greeter_build/call_via_cffi7.py</td><td>skript pro překlad céčkovské funkce, vytvoření dynamicky linkované knihovny a zavolání funkce z&nbsp;této knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/call_via_cffi7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/call_via_cffi7.py</a></td></tr>
<tr><td> 55</td><td>greeter_build/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 56</td><td>vector_printer/vector_printer.c</td><td>funkce psaná v&nbsp;C, která akceptuje jako svůj parametr strukturu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/vector_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/vector_printer.c</a></td></tr>
<tr><td> 57</td><td>vector_printer/vector_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_vector</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/vector_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/vector_printer.h</a></td></tr>
<tr><td> 58</td><td>vector_printer/call_via_cffi.sh</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/call_via_cffi.sh</a></td></tr>
<tr><td> 59</td><td>vector_printer/call_via_cffi.py</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/call_via_cffi.py</a></td></tr>
<tr><td> 60</td><td>vector_printer/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/make_library.sh</a></td></tr>
<tr><td> 61</td><td>vector_printer/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 62</td><td>vector_printer_2/vector_printer.c</td><td>funkce psaná v&nbsp;C, která akceptuje jako svůj parametr ukazatel na strukturu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/vector_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/vector_printer.c</a></td></tr>
<tr><td> 63</td><td>vector_printer_2/vector_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_vector</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/vector_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/vector_printer.h</a></td></tr>
<tr><td> 64</td><td>vector_printer_2/call_via_cffi.sh</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/call_via_cffi.sh</a></td></tr>
<tr><td> 65</td><td>vector_printer_2/call_via_cffi.py</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/call_via_cffi.py</a></td></tr>
<tr><td> 66</td><td>vector_printer_2/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/make_library.sh</a></td></tr>
<tr><td> 67</td><td>vector_printer_2/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 68</td><td>array_printer_1/array_printer.c</td><td>funkce naprogramovaná v&nbsp;C, která akceptuje pole s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/array_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/array_printer.c</a></td></tr>
<tr><td> 69</td><td>array_printer_1/array_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_array</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/array_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/array_printer.h</a></td></tr>
<tr><td> 70</td><td>array_printer_1/call_via_cffi.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/call_via_cffi.sh</a></td></tr>
<tr><td> 71</td><td>array_printer_1/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/call_via_cffi.py</a></td></tr>
<tr><td> 72</td><td>array_printer_1/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/make_library.sh</a></td></tr>
<tr><td> 73</td><td>array_printer_1/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_1/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 74</td><td>array_printer_2/array_printer.c</td><td>funkce naprogramovaná v&nbsp;C, která akceptuje pole s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/array_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/array_printer.c</a></td></tr>
<tr><td> 75</td><td>array_printer_2/array_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_array</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/array_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/array_printer.h</a></td></tr>
<tr><td> 76</td><td>array_printer_2/call_via_cffi.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/call_via_cffi.sh</a></td></tr>
<tr><td> 77</td><td>array_printer_2/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/call_via_cffi.py</a></td></tr>
<tr><td> 78</td><td>array_printer_2/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/make_library.sh</a></td></tr>
<tr><td> 79</td><td>array_printer_2/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_2/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 80</td><td>array_printer_3/array_printer.c</td><td>funkce naprogramovaná v&nbsp;C, která akceptuje pole s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/array_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/array_printer.c</a></td></tr>
<tr><td> 81</td><td>array_printer_3/array_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_array</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/array_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/array_printer.h</a></td></tr>
<tr><td> 82</td><td>array_printer_3/call_via_cffi.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/call_via_cffi.sh</a></td></tr>
<tr><td> 83</td><td>array_printer_3/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/call_via_cffi.py</a></td></tr>
<tr><td> 84</td><td>array_printer_3/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/make_library.sh</a></td></tr>
<tr><td> 85</td><td>array_printer_3/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_3/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 86</td><td>array_printer_4/array_printer.c</td><td>funkce naprogramovaná v&nbsp;C, která akceptuje pole s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/array_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/array_printer.c</a></td></tr>
<tr><td> 87</td><td>array_printer_4/array_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_array</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/array_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/array_printer.h</a></td></tr>
<tr><td> 88</td><td>array_printer_4/call_via_cffi.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/call_via_cffi.sh</a></td></tr>
<tr><td> 89</td><td>array_printer_4/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/call_via_cffi.py</a></td></tr>
<tr><td> 90</td><td>array_printer_4/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/make_library.sh</a></td></tr>
<tr><td> 91</td><td>array_printer_4/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_4/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 92</td><td>array_printer_5/array_printer.c</td><td>funkce naprogramovaná v&nbsp;C, která akceptuje pole s&nbsp;prvky typu <strong>vector_t</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/array_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/array_printer.c</a></td></tr>
<tr><td> 93</td><td>array_printer_5/array_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_array</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/array_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/array_printer.h</a></td></tr>
<tr><td> 94</td><td>array_printer_5/call_via_cffi.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/call_via_cffi.sh</a></td></tr>
<tr><td> 95</td><td>array_printer_5/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/call_via_cffi.py</a></td></tr>
<tr><td> 96</td><td>array_printer_5/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/make_library.sh</a></td></tr>
<tr><td> 97</td><td>array_printer_5/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_5/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 92</td><td>array_printer_6/array_printer.c</td><td>funkce naprogramovaná v&nbsp;C, která akceptuje dvourozměrné pole s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/array_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/array_printer.c</a></td></tr>
<tr><td> 93</td><td>array_printer_6/array_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_array</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/array_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/array_printer.h</a></td></tr>
<tr><td> 94</td><td>array_printer_6/call_via_cffi.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/call_via_cffi.sh</a></td></tr>
<tr><td> 95</td><td>array_printer_6/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/call_via_cffi.py</a></td></tr>
<tr><td> 96</td><td>array_printer_6/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/make_library.sh</a></td></tr>
<tr><td> 97</td><td>array_printer_6/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_6/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 98</td><td>array_printer_7/array_printer.c</td><td>funkce naprogramovaná v&nbsp;C, která akceptuje dvourozměrné pole s&nbsp;prvky typu <strong>float</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/array_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/array_printer.c</a></td></tr>
<tr><td> 99</td><td>array_printer_7/array_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_array</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/array_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/array_printer.h</a></td></tr>
<tr><td>100</td><td>array_printer_7/call_via_cffi.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/call_via_cffi.sh</a></td></tr>
<tr><td>101</td><td>array_printer_7/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/call_via_cffi.py</a></td></tr>
<tr><td>102</td><td>array_printer_7/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/make_library.sh</a></td></tr>
<tr><td>103</td><td>array_printer_7/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/array_printer_7/clean.sh</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>ctypes &ndash; A foreign function library for Python<br />
<a href="https://docs.python.org/3/library/ctypes.html">https://docs.python.org/3/library/ctypes.html</a>
</li>

<li>Pygame: display<br />
<a href="https://www.pygame.org/docs/ref/display.html">https://www.pygame.org/docs/ref/display.html</a>
</li>

<li>Pygame: event<br />
<a href="https://www.pygame.org/docs/ref/event.html">https://www.pygame.org/docs/ref/event.html</a>
</li>

<li>Pygame: image<br />
<a href="https://www.pygame.org/docs/ref/image.html">https://www.pygame.org/docs/ref/image.html</a>
</li>

<li>Pygame: clock<br />
<a href="https://www.pygame.org/docs/ref/time.html#pygame.time.Clock">https://www.pygame.org/docs/ref/time.html#pygame.time.Clock</a>
</li>

<li>Fraktály v&nbsp;počítačové grafice XII<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xii/">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xii/</a>
</li>

<li>Fraktály v&nbsp;počítačové grafice XIII<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xiii/">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xiii/</a>
</li>

<li>Fraktály v&nbsp;počítačové grafice XIV<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xiv/">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-xiv/</a>
</li>

<li>CFFI documentation<br />
<a href="https://cffi.readthedocs.io/en/latest/">https://cffi.readthedocs.io/en/latest/</a>
</li>

<li>cffi 1.15.1 na PyPi<br />
<a href="https://pypi.org/project/cffi/">https://pypi.org/project/cffi/</a>
</li>

<li>Python Bindings: Calling C or C++ From Python<br />
<a href="https://realpython.com/python-bindings-overview/">https://realpython.com/python-bindings-overview/</a>
</li>

<li>Interfacing with C/C++ Libraries<br />
<a href="https://docs.python-guide.org/scenarios/clibs/">https://docs.python-guide.org/scenarios/clibs/</a>
</li>

<li>Cython, pybind11, cffi – which tool should you choose?<br />
<a href="http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html">http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html</a>
</li>

<li>Python FFI with ctypes and cffi<br />
<a href="https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi">https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi</a>
</li>

<li>Propojení Go s&nbsp;Pythonem s&nbsp;využitím cgo a ctypes<br />
<a href="https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes/">https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes/</a>
</li>

<li>Propojení Go s&nbsp;Pythonem s&nbsp;využitím cgo a ctypes (2. část)<br />
<a href="https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes-2-cast/">https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes-2-cast/</a>
</li>

<li>Programovací jazyk Rust: použití FFI pro volání funkcí z&nbsp;nativních knihoven<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven/</a>
</li>

<li>Programovací jazyk Rust: použití FFI při předávání struktur<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pri-predavani-struktur/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pri-predavani-struktur/</a>
</li>

<li>Programovací jazyk Rust: použití FFI pro volání funkcí z&nbsp;nativních knihoven (2. část)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven-2-cast/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven-2-cast/</a>
</li>

<li>Dynamic-link library<br />
<a href="https://en.wikipedia.org/wiki/Dynamic-link_library">https://en.wikipedia.org/wiki/Dynamic-link_library</a>
</li>

<li>Úvod do jazyka C: Deklarace funkcí<br />
<a href="https://www.fi.muni.cz/usr/jkucera/pb071/sl5.htm">https://www.fi.muni.cz/usr/jkucera/pb071/sl5.htm</a>
</li>

<li>Using standard library headers with CFFI<br />
<a href="https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi">https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi</a>
</li>

<li>Preparing and Distributing modules<br />
<a href="https://cffi.readthedocs.io/en/latest/cdef.html">https://cffi.readthedocs.io/en/latest/cdef.html</a>
</li>

<li>C Arrays<br />
<a href="https://www.programiz.com/c-programming/c-arrays">https://www.programiz.com/c-programming/c-arrays</a>
</li>

<li>C Arrays<br />
<a href="https://www.w3schools.com/c/c_arrays.php">https://www.w3schools.com/c/c_arrays.php</a>
</li>

<li>Array of Structures in C<br />
<a href="https://overiq.com/c-programming-101/array-of-structures-in-c/#google_vignette">https://overiq.com/c-programming-101/array-of-structures-in-c/#google_vignette</a>
</li>

<li>C Structures (structs)<br />
<a href="https://www.w3schools.com/c/c_structs.php">https://www.w3schools.com/c/c_structs.php</a>
</li>

<li>C Structs and pointers<br />
<a href="https://www.programiz.com/c-programming/c-structures-pointers">https://www.programiz.com/c-programming/c-structures-pointers</a>
</li>

<li>Bit Fields in C<br />
<a href="https://www.geeksforgeeks.org/c/bit-fields-c/">https://www.geeksforgeeks.org/c/bit-fields-c/</a>
</li>

<li>C Alignment Cheatsheet<br />
<a href="https://github.com/Q1CHENL/c-alignment-cheatsheet">https://github.com/Q1CHENL/c-alignment-cheatsheet</a>
</li>

<li>GNU C Language Manual<br />
<a href="https://www.gnu.org/software/c-intro-and-ref/manual/html_node/index.html">https://www.gnu.org/software/c-intro-and-ref/manual/html_node/index.html</a>
</li>

<li>C Intro: 15 Structures<br />
<a href="https://www.gnu.org/software/c-intro-and-ref/manual/html_node/Structures.html">https://www.gnu.org/software/c-intro-and-ref/manual/html_node/Structures.html</a>
</li>

<li>C Intro: 15.7 Bit Fields<br />
<a href="https://www.gnu.org/software/c-intro-and-ref/manual/html_node/Bit-Fields.html">https://www.gnu.org/software/c-intro-and-ref/manual/html_node/Bit-Fields.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

