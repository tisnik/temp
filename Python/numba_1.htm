<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Projekt Numba aneb další přístup k překladu Pythonu do nativního kódu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Projekt Numba aneb další přístup k překladu Pythonu do nativního kódu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Po představení projektů RPython a Cython se zaměříme na další nástroj určený pro překlad zdrojových kódů z Pythonu do nativního kódu (či dokonce pro GPU). Tento nástroj se jmenuje Numba a mezi jeho přednosti patří velmi snadné použití.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Projekt Numba aneb další přístup k překladu Pythonu do nativního kódu</a></p>
<p><a href="#k02">2. Princip činnosti Numba při překladu</a></p>
<p><a href="#k03">3. Instalace nástroje Numba</a></p>
<p><a href="#k04">4. Kontrola korektní instalace</a></p>
<p><a href="#k05">*** 5. Označení funkcí, které se mají překládat JITem</a></p>
<p><a href="#k06">*** 6. Testovací benchmark (dnes již naposledy)</a></p>
<p><a href="#k07">*** 7. Výsledky benchmarku při lineárním zvyšování složitosti výpočtu</a></p>
<p><a href="#k08">*** 8. Přidání anotace <strong>@jit</strong></a></p>
<p><a href="#k09">*** 9. Použití zjednodušené varianty funkce <strong>print</strong></a></p>
<p><a href="#k10">*** 10. Vynucení úplného překladu anotací <strong></strong></a></p>
<p><a href="#k11">*** 11. Porovnání výsledků benchmarků (pouze Numba)</a></p>
<p><a href="#k12">*** 12. Porovnání s&nbsp;benchmarkem naprogramovaným v&nbsp;optimalizovaném Cythonu a ANSI C</a></p>
<p><a href="#k13">*** 13. Explicitně zapsané informace o typech</a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Projekt Numba aneb další přístup k&nbsp;překladu Pythonu do nativního kódu</h2>

<p>V&nbsp;předchozích třech článcích [<a
href="https://www.root.cz/clanky/rpython-prekvapive-vykonny-dialekt-pythonu-na-nemz-je-zalozen-pypy/">1</a>],
[<a
href="https://www.root.cz/clanky/rpython-vs-cython-aneb-dvoji-pristup-k-prekladu-pythonu-do-nativniho-kodu/">2</a>],
[<a
href="https://www.root.cz/clanky/prakticke-pouziti-nastroje-cython-pri-prekladu-pythonu-do-nativniho-kodu-1/">3</a>]
jsme se ve stručnosti seznámili s&nbsp;projekty nazvanými <i>RPython</i> a
<i>Cython</i>. Oba projekty mají podobné cíle &ndash; dokážou ze zdrojového
kódu, který je buď podmnožinou (<i>RPython</i>) nebo naopak nadmnožinou
(<i>Cython</i>) programovacího jazyka Python vygenerovat nativní kód, který ve
většině případů běží rychleji, než je tomu při použití klasického interpretu
Pythonu, ať již se jedná o CPython (asi nejčastěji používaný), Jython nebo
v&nbsp;menší míře o Iron Python. RPython je součástí projektu PyPy a jeho
použití je do větší míry orientováno na autory interpretrů a překladačů, než na
běžné vývojáře (na což jsou programátoři několikrát upozorněni
v&nbsp;dokumentaci).</p>

<p>Liší se však způsob vlastní implementace překladu do nativního kódu. Projekt
<i>RPython</i> je založený na analýze AST (<i>Abstract Syntax Tree</i>)
vytvořeného z&nbsp;bajtkódu samotným interpretrem. Z&nbsp;AST se odvozuje <a
href="https://en.wikipedia.org/wiki/Control_flow_graph">CFG</a> a proto RPython
navíc vyžaduje použití podmnožiny Pythonu. Je tomu tak z&nbsp;toho důvodu, aby
RPython dokázal správně odvodit datové typy proměnných a argumentů
funkcí/metod, a to již v&nbsp;čase překladu, tj.&nbsp;<i>compile time</i>.
<i>Cython</i> naproti tomu pracuje poněkud odlišně &ndash; transformuje
zdrojový kód z&nbsp;Pythonu do programovacího jazyka C a používá přitom
informace o typech dodaných přímo vývojářem do zdrojového kódu. V&nbsp;místech,
kde není typ zřejmý, se používá univerzální typ <strong>PyObject *</strong>,
podobně jako v&nbsp;klasickém interpretru. Záleží tedy jen na vývojáři, kterou
část kódu bude chtít optimalizovat a které tedy bude věnovat větší péči (při
deklaraci typů).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Princip činnosti Numba při překladu</h2>

<p>Princip činnosti nástroje Numba se v&nbsp;několika ohledech odlišuje od
RPythonu i od Cythonu. Numba totiž umožňuje překlad kódu za běhu aplikace,
tj.&nbsp;v&nbsp;<i>runtime</i>. Jedná se tedy o JIT neboli o
<i>just-in-time</i> překladač, který má tu výhodu, že dokáže odvodit datové
typy proměnných a argumentů funkcí na základě skutečného chování aplikace. To
samozřejmě neznamená, že by JIT již při prvním volání funkce přesně věděl, jak
má funkci přeložit. Ve skutečnosti se dozví pouze informace o jediné konkrétní
větvi, kterou může přeložit. V&nbsp;případě, že bude ta samá funkce později
volána s&nbsp;odlišnými typy parametrů, popř.&nbsp;se její chování změní jiným
způsobem, provede se just-in-time překlad znovu, takže zde zaplatíme za vyšší
výpočetní výkon poněkud většími paměťovými nároky a pomalejším během prvních
volání funkce.</p>

<p>Z&nbsp;pohledu běžného vývojáře je největší předností tohoto způsobu
překladu fakt, že není zapotřebí samotný zdrojový kód měnit (až na uvedení
anotace před funkci). Nepříjemný je přesun času překladu do runtime, což sice
nevadí u aplikací, které běží delší dobu, ovšem u jednorázových skriptů může
být použití JITu spíše kontraproduktivní. To ostatně uvidíme i na demonstračním
příkladu.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Instalace nástroje Numba</h2>

<p>Existuje více možnosti, jak projekt Numba nainstalovat. Pravděpodobně
nejjednodušší je použití Python installeru a instalace pro lokálního
(přihlášeného) uživatele:</p>

<pre>
$ <strong>pip3 install --user numba</strong>
Collecting numba
  Downloading https://files.pythonhosted.org/packages/1e/74/bcf00816aa212e1439709f88b4e62519b60c89e18eb9f9f67e7d02ab4461/numba-0.38.1-cp36-cp36m-manylinux1_x86_64.whl (1.9MB)
    100% |████████████████████████████████| 1.9MB 700kB/s 
Collecting llvmlite&gt;=0.23.0dev0 (from numba)
  Downloading https://files.pythonhosted.org/packages/21/c7/eb581bbbdf731f24a72eba505cf42668231c595ba61997a6fa186b7f0413/llvmlite-0.23.2-cp36-cp36m-manylinux1_x86_64.whl (15.8MB)
    100% |████████████████████████████████| 15.8MB 103kB/s 
Requirement already satisfied: numpy in ./.local/lib/python3.6/site-packages (from numba)
Installing collected packages: llvmlite, numba
Successfully installed llvmlite-0.23.2 numba-0.38.1
</pre>

<p>Kromě toho je možné použít <a
href="https://www.anaconda.com/what-is-anaconda/">platformu Anaconda</a>,
samozřejmě za předpokladu, že ji již máte nainstalovanou:</p>

<pre>
$ <strong>conda install numba</strong>
</pre>

<p>popř.&nbsp;pro přechod na vyšší verzi:</p>

<pre>
$ <strong>conda update numba</strong>
</pre>

<p>Další varianta spočívá v&nbsp;překladu projektu ze zdrojových kódů.
V&nbsp;tomto případě potřebujete mít nainstalován jak <i>LLVM</i> tak i
<i>llvmlite</i>, což je knihovna zajišťující rozhraní mezi LLVM a Pythonem:</p>

<pre>
$ <strong>git clone https://github.com/numba/llvmlite</strong>
$ <strong>cd llvmlite</strong>
$ <strong>python setup.py install</strong>
</pre>

<p>Po tomto přípravném kroku již následuje naklonování repositáře s&nbsp;Numbou
a její překlad s&nbsp;instalací:</p>

<pre>
$ <strong>git clone https://github.com/numba/numba.git</strong>
$ <strong>cd numba</strong>
$ <strong>pip install -r requirements.txt</strong>
$ <strong>python setup.py build_ext --inplace</strong>
$ <strong>python setup.py install</strong>
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Kontrola korektní instalace</h2>

<p>Dalším krokem je zjištění, zda se Numba nainstalovala korektně. Prvním
pokusem bude pokus o spuštění příkazu <strong>numba</strong>, tj.&nbsp;test,
jestli tento příkaz leží na <strong>PATH</strong>:</p>

<pre>
$ <strong>numba --help</strong>
&nbsp;
usage: numba [-h] [--annotate] [--dump-llvm] [--dump-optimized]
             [--dump-assembly] [--dump-cfg] [--dump-ast]
             [--annotate-html ANNOTATE_HTML] [-s]
             [filename]
&nbsp;
positional arguments:
  filename              Python source filename
&nbsp;
optional arguments:
  -h, --help            show this help message and exit
  --annotate            Annotate source
  --dump-llvm           Print generated llvm assembly
  --dump-optimized      Dump the optimized llvm assembly
  --dump-assembly       Dump the LLVM generated assembly
  --dump-cfg            [Deprecated] Dump the control flow graph
  --dump-ast            [Deprecated] Dump the AST
  --annotate-html ANNOTATE_HTML
                        Output source annotation as html
  -s, --sysinfo         Output system information for bug reporting
</pre>

<p>Pokud se tento příkaz nepodaří spustit, většinou to znamená, že do
<strong>PATH</strong> není zahrnuta cesta <strong>~/.local/bin</strong>, což
lze snadno napravit.</p>

<p>Další krok spočívá v&nbsp;pokusu o spuštění dalšího nástroje, který se
jmenuje <strong>pycc</strong> (varování &bdquo;DEPRECADED&ldquo; si nyní
nemusíme všímat :-):</p>

<pre>
$ <strong>pycc --help</strong>
usage: pycc [-h] [-o OUTPUT] [-c | --llvm] [--header] [--python] [-d]
            inputs [inputs ...]
&nbsp;
DEPRECATED - Compile Python modules to a single shared library
&nbsp;
positional arguments:
  inputs       Input file(s)
&nbsp;
optional arguments:
  -h, --help   show this help message and exit
  -o OUTPUT    Output file (default is name of first input -- with new ending)
  -c           Create object file from each input instead of shared-library
  --llvm       Emit llvm instead of native code
  --header     Emit C header file with function signatures
  --python     Emit additionally generated Python wrapper and extension module
               code in output
  -d, --debug  Print extra debug information
</pre>

<p>Třetí krok bude nejdůležitější, protože zjistíme, jestli je vůbec možné do
běžící smyčky REPL naimportovat modul <strong>numba</strong>:</p>

<pre>
$ <strong>python3</strong>
&nbsp;
Python 3.6.3 (default, Oct  9 2017, 12:11:29) 
[GCC 7.2.1 20170915 (Red Hat 7.2.1-2)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&nbsp;
&gt;&gt;&gt; <strong>import numba</strong>
&nbsp;
&gt;&gt;&gt; <strong>numba.sys.version</strong>
'3.6.3 (default, Oct  9 2017, 12:11:29) \n[GCC 7.2.1 20170915 (Red Hat 7.2.1-2)]'
</pre>

<p>V&nbsp;případě, že se instalace z&nbsp;nějakého důvodu nepovedla, získáme
běžné chybové hlášení o neexistujícím modulu:</p>

<pre>
&gt;&gt;&gt; <strong>import numba</strong>
&nbsp;
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named numba
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Označení funkcí, které se mají překládat JITem</h2>

<p></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Testovací benchmark (dnes již naposledy)</h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. Výsledky benchmarku při lineárním zvyšování složitosti výpočtu</h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. Přidání anotace <strong>@jit</strong></h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. Použití zjednodušené varianty funkce <strong>print</strong></h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. Porovnání výsledků benchmarků (pouze Numba)</h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. Porovnání s&nbsp;benchmarkem naprogramovaným v&nbsp;optimalizovaném Cythonu a ANSI C</h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Explicitně zapsané informace o typech</h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny skripty, které jsme si v&nbsp;dnešním článku ukázali, naleznete na
adrese <a
href="https://github.com/tisnik/rpython-examples">https://github.com/tisnik/numba-examples</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je nutné mít
nainstalovánu knihovnu a jeho závislosti &ndash; viz <a href="#k03">třetí
kapitolu</a>):</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Adresa</th></tr>
<tr><td>1</td><td></td><td><a href=""></a></td></tr>
<tr><td>2</td><td></td><td><a href=""></a></td></tr>
<tr><td>3</td><td></td><td><a href=""></a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Numba<br />
<a href="http://numba.pydata.org/">http://numba.pydata.org/</a>
</li>

<li>numba 0.38.1<br />
<a href="https://pypi.org/project/numba/">https://pypi.org/project/numba/</a>
</li>

<li>Numba documentation<br />
<a href="http://numba.pydata.org/numba-doc/latest/index.html">http://numba.pydata.org/numba-doc/latest/index.html</a>
</li>

<li>Numba na GitHubu<br />
<a href="https://github.com/numba/numba">https://github.com/numba/numba</a>
</li>

<li>Cython (home page)<br />
<a href="http://cython.org/">http://cython.org/</a>
</li>

<li>Cython (wiki)<br />
<a href="https://github.com/cython/cython/wiki">https://github.com/cython/cython/wiki</a>
</li>

<li>Cython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Cython">https://en.wikipedia.org/wiki/Cython</a>
</li>

<li>Cython (GitHub)<br />
<a href="https://github.com/cython/cython">https://github.com/cython/cython</a>
</li>

<li>Python Implementations: Compilers<br />
<a href="https://wiki.python.org/moin/PythonImplementations#Compilers">https://wiki.python.org/moin/PythonImplementations#Compilers</a>
</li>

<li>EmbeddingCython<br />
<a href="https://github.com/cython/cython/wiki/EmbeddingCython">https://github.com/cython/cython/wiki/EmbeddingCython</a>
</li>

<li>The Basics of Cython<br />
<a href="http://docs.cython.org/en/latest/src/tutorial/cython_tutorial.html">http://docs.cython.org/en/latest/src/tutorial/cython_tutorial.html</a>
</li>

<li>Overcoming Python's GIL with Cython<br />
<a href="https://lbolla.info/python-threads-cython-gil">https://lbolla.info/python-threads-cython-gil</a>
</li>

<li>GlobalInterpreterLock<br />
<a href="https://wiki.python.org/moin/GlobalInterpreterLock">https://wiki.python.org/moin/GlobalInterpreterLock</a>
</li>

<li>The Magic of RPython<br />
<a href="https://refi64.com/posts/the-magic-of-rpython.html">https://refi64.com/posts/the-magic-of-rpython.html</a>
</li>

<li>RPython: Frequently Asked Questions<br />
<a href="http://rpython.readthedocs.io/en/latest/faq.html">http://rpython.readthedocs.io/en/latest/faq.html</a>
</li>

<li>RPython’s documentation<br />
<a href="http://rpython.readthedocs.io/en/latest/index.html">http://rpython.readthedocs.io/en/latest/index.html</a>
</li>

<li>RPython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PyPy#RPython">https://en.wikipedia.org/wiki/PyPy#RPython</a>
</li>

<li>Getting Started with RPython<br />
<a href="http://rpython.readthedocs.io/en/latest/getting-started.html">http://rpython.readthedocs.io/en/latest/getting-started.html</a>
</li>

<li>PyPy (home page)<br />
<a href="https://pypy.org/">https://pypy.org/</a>
</li>

<li>PyPy (dokumentace)<br />
<a href="http://doc.pypy.org/en/latest/">http://doc.pypy.org/en/latest/</a>
</li>

<li>Localized Type Inference of Atomic Types in Python (2005)<br />
<a href="http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.90.3231">http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.90.3231</a>
</li>

<li>Tutorial: Writing an Interpreter with PyPy, Part 1<br />
<a href="https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html">https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html</a>
</li>

<li>List of numerical analysis software<br />
<a href="https://en.wikipedia.org/wiki/List_of_numerical_analysis_software">https://en.wikipedia.org/wiki/List_of_numerical_analysis_software</a>
</li>

<li>Pixie: lehký skriptovací jazyk s „kouzelnými“ schopnostmi<br />
<a href="https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/">https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/</a>
</li>

<li>Programovací jazyk Pixie: funkce ze základní knihovny a použití FFI<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/">https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/</a>
</li>

<li>The future can be written in RPython now (článek z&nbsp;roku 2010)<br />
<a href="http://blog.christianperone.com/2010/05/the-future-can-be-written-in-rpython-now/">http://blog.christianperone.com/2010/05/the-future-can-be-written-in-rpython-now/</a>
</li>

<li>PyPy is the Future of Python (článek z&nbsp;roku 2010)<br />
<a href="https://alexgaynor.net/2010/may/15/pypy-future-python/">https://alexgaynor.net/2010/may/15/pypy-future-python/</a>
</li>

<li>Portal:Python programming<br />
<a href="https://en.wikipedia.org/wiki/Portal:Python_programming">https://en.wikipedia.org/wiki/Portal:Python_programming</a>
</li>

<li>RPython Frontend and C Wrapper Generator<br />
<a href="http://www.codeforge.com/article/383293">http://www.codeforge.com/article/383293</a>
</li>

<li>PyPy’s Approach to Virtual Machine Construction<br />
<a href="https://bitbucket.org/pypy/extradoc/raw/tip/talk/dls2006/pypy-vm-construction.pdf">https://bitbucket.org/pypy/extradoc/raw/tip/talk/dls2006/pypy-vm-construction.pdf</a>
</li>

<li>Tutorial: Writing an Interpreter with PyPy, Part 1<br />
<a href="https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html">https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html</a>
</li>

<li>A simple interpreter from scratch in Python (part 1)<br />
<a href="http://www.jayconrod.com/posts/37/a-simple-interpreter-from-scratch-in-python-part-1">http://www.jayconrod.com/posts/37/a-simple-interpreter-from-scratch-in-python-part-1</a>
</li>

<li>Brainfuck Interpreter in Python<br />
<a href="https://helloacm.com/brainfuck-interpreter-in-python/">https://helloacm.com/brainfuck-interpreter-in-python/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

