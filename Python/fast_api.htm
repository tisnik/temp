<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Rychlá tvorba webových služeb s využitím frameworků FastAPI a SQLAlchemy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Rychlá tvorba webových služeb s využitím frameworků FastAPI a SQLAlchemy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku si ve stručnosti představíme několik balíčků a technologií, které umožňují snadnou a taktéž rychlou tvorbu webových služeb založených na REST API a vybrané (prakticky libovolné) relační databázi s využitím programovacího jazyka Python.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Rychlá tvorba webových služeb s&nbsp;využitím frameworků FastAPI a SQLAlchemy</a></p>
<p><a href="#k02">2. Příprava projektu s&nbsp;implementací jednoduché webové služby</a></p>
<p><a href="#k03">3. Přidání balíčků s&nbsp;frameworkem FastAPI a Uvicorn</a></p>
<p><a href="#k04">4. Příkaz pro spuštění HTTP serveru s&nbsp;webovou aplikací</a></p>
<p><a href="#k05">5. Realizace koncového bodu / ve vznikajícím REST API webové služby</a></p>
<p><a href="#k06">6. Spuštění webového serveru, poslání požadavku a zobrazení odpovědi</a></p>
<p><a href="#k07">7. Automaticky generované stránky s&nbsp;popisem REST API, zobrazení popisu ve formátu JSON</a></p>
<p><a href="#k08">8. REST API endpointy pro další CRUD operace</a></p>
<p><a href="#k09">9. Webová služba se čtveřicí REST API endpointů</a></p>
<p><a href="#k10">10. Realizace jednoduché databáze se záznamy uloženými v&nbsp;operační paměti</a></p>
<p><a href="#k11">11. Výsledná podoba webové služby s&nbsp;jednoduchou databází realizovanou v&nbsp;paměti</a></p>
<p><a href="#k12">12. Korektní reakce webové služby na chyby &ndash; výjimky typu <strong>HTTPException</strong></a></p>
<p><a href="#k13">13. Příprava pro připojení webové služby k&nbsp;reálné databázi</a></p>
<p><a href="#k14">14. Konfigurace databáze</a></p>
<p><a href="#k15">15. Připojení k&nbsp;databázi z&nbsp;Pythonu</a></p>
<p><a href="#k16">16. Deklarace modelu pro ORM</a></p>
<p><a href="#k17">17. Realizace jednotlivých CRUD operací</a></p>
<p><a href="#k18">18. Výsledná podoba webové služby</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Rychlá tvorba webových služeb s&nbsp;využitím frameworků FastAPI a SQLAlchemy</h2>

<p>V&nbsp;dnešním článku si ve stručnosti představíme několik balíčků a
technologií, které umožňují snadnou a většinou taktéž i velmi rychlou tvorbu
webových služeb založených na REST API a taktéž na vybrané (prakticky
libovolné) relační databázi. Pro tvorbu těchto služeb použijeme <a
href="https://www.root.cz/n/python/">programovací jazyk Python</a>. Konkrétně
se zaměříme na praktickou ukázku využití frameworku nazvaného <a
href="https://fastapi.tiangolo.com/">FastAPI</a> (podpora pro webové služby
s&nbsp;automatickou tvorbou dokumentace k&nbsp;REST API) zkombinovaného
s&nbsp;nástrojem <a href="https://www.sqlalchemy.org/">SQLAlchemy</a> (rozhraní
k&nbsp;databázové vrstvě). Ovšem interně se budou používat i některé další
balíčky určené pro ekosystém programovacího jazyka Python, konkrétně balíček
pojmenovaný <a href="https://www.uvicorn.org/">Uvicorn</a> a taktéž balíčky <a
href="https://docs.pydantic.dev/latest/">Pydantic</a> a <a
href="https://github.com/OAI/OpenAPI-Specification">Starlette</a>.</p>

<p>V&nbsp;navazujících kapitolách si ukážeme postupnou tvorbu jednoduché webové
služby, která přes čtyři REST API endpointy nabídne uživatelům této služby
čtveřici operací <i>CRUD</i> neboli <i>Create</i>, <i>Read</i>, <i>Update</i> a
<i>Delete</i>. Tyto operace budou probíhat nad záznamy uloženými v&nbsp;relační
databázi. Konkrétně využijeme databázi <a
href="https://www.postgresql.org/">PostgreSQL</a>, ale relativně snadno bude
možné výsledný projekt upravit takovým způsobem, aby se namísto této databáze
použila odlišná relační databáze (od SQLite přes MySQL/MariaDB až po
&bdquo;velké&ldquo; databáze typu Oracle). REST API endpointy nabízené námi
vytvořenou službou budou popsány s&nbsp;využitím známé specifikace <a
href="https://github.com/OAI/OpenAPI-Specification">OpenAPI</a> (výsledky jsou
dostupné přes <a href="https://swagger.io/">Swagger</a> a taktéž přes <a
href="https://github.com/Redocly/redoc">Redoc</a>), přičemž tato online
dokumentace je vygenerována automaticky.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Příprava projektu s&nbsp;implementací jednoduché webové služby</h2>

<p>V&nbsp;prvním kroku si vytvoříme kostru projektu, který postupně upravíme do
formy skutečné webové služby. Pro správu projektů využijeme nástroj <i>PDM</i>,
který byl popsán v&nbsp;článku <a
href="https://www.root.cz/clanky/pdm-moderni-spravce-balicku-a-virtualnich-prostredi-pythonu/">PDM:
moderní správce balíčků a virtuálních prostředí Pythonu</a> (ovšem stejně dobře
můžete použít i klasický <strong>pip</strong> zkombinovaný
s&nbsp;<strong>venv</strong> nebo <strong>virtualenv</strong>). Kostra nového
projektu se vytvoří příkazem:</p>

<pre>
$ <strong>pdm init</strong>
</pre>

<p>Po zadání tohoto příkazu se systém PDM zeptá na několik otázek. Odpovědi
jsou zvýrazněny tučným písmem:</p>

<pre>
Creating a pyproject.toml for PDM...
Please enter the Python interpreter to use
0. /usr/bin/python (3.11)
1. /usr/bin/python3.11 (3.11)
2. /usr/bin/python3 (3.11)
Please select (0): <strong>0</strong>
Would you like to create a virtualenv with /usr/bin/python? [y/n] (y): <strong>y</strong>
Virtualenv is created successfully at /home/ptisnovs/test2/.venv
Is the project a library that is installable?
If yes, we will need to ask a few more questions to include the project name and build backend [y/n] (n): <strong>n</strong>
License(SPDX name) (MIT): 
Author name (): <strong>Pavel Tisnovsky</strong>
Author email (): <strong>tisnik@nowhere.us</strong>
Python requires('*' to allow any) (&gt;=3.11): <strong>&gt;=3.8</strong>
Project is initialized successfully
</pre>

<p>Výsledkem by měla být tato kostra projektu:</p>

<pre>
.
├── pyproject.toml
├── README.md
├── src
│   └── example_package
│       └── __init__.py
└── tests
    └── __init__.py
</pre>

<p>Projektový soubor <strong>pyproject.toml</strong> bude mít následující
obsah:</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "", email = ""},
]
requires-python = "&gt;=3.8"
readme = "README.md"
license = {text = "MIT"}
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Přidání balíčků s&nbsp;frameworkem FastAPI a Uvicorn</h2>

<p>Ve druhém kroku do postupně vznikajícího projektu přidáme balíček nazvaný
<strong>fastapi</strong> společně s&nbsp;balíčkem <strong>uvicorn</strong>. Pro
tento účel se použije následující příkaz:</p>

<pre>
$ <strong>pdm add fastapi uvicorn</strong>
</pre>

<p>Alternativně lze použít dvojici samostatných příkazů, pokud preferujete
instalovat balíčky postupně:</p>

<pre>
$ <strong>pdm add uvicorn</strong>
$ <strong>pdm add fastapi</strong>
</pre>

<p>Projektový soubor po provedení těchto kroků doznal změny &ndash; viz
zvýrazněnou část kódu:</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "", email = ""},
]
<strong>dependencies = [</strong>
    <strong>"fastapi&gt;=0.104.0",</strong>
    <strong>"uvicorn&gt;=0.23.2",</strong>
<strong>]</strong>
requires-python = "&gt;=3.8"
readme = "README.md"
license = {text = "MIT"}
</pre>

<p><div class="rs-tip-major">Poznámka: taktéž vznikl <i>lock file</i>
obsahující konkrétní verze nainstalovaných balíčků společně s&nbsp;jejich
otisky (<i>hash</i>).</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Příkaz pro spuštění HTTP serveru s&nbsp;webovou aplikací</h2>

<p>Ve třetím kroku do projektového souboru <strong>pyproject.toml</strong>
přidáme uživatelský příkaz nazvaný <strong>start</strong>, kterým budeme
spouštět HTTP server s&nbsp;webovou službou. Nebude tedy nutné neustále
opakovat dlouhý a poměrně těžko zapamatovatelný příkaz; namísto toho bude
stačit na příkazové řádce zapsat &bdquo;pdm start&ldquo;:</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "", email = ""},
]
dependencies = [
    "fastapi&gt;=0.104.0",
    "uvicorn&gt;=0.23.2",
]
requires-python = "&gt;=3.11"
readme = "README.md"
license = {text = "MIT"}
&nbsp;
<strong>[tool.pdm.scripts]</strong>
<strong>start = "uvicorn --app-dir src/example_package main:app --reload"</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: příkaz <strong>start</strong> očekává
určitou strukturu projektu, především fakt, že aplikace nazvaná
&bdquo;app&ldquo; bude definována v&nbsp;souboru
&bdquo;src/example_package/main.py&ldquo; &ndash; viz též navazující
kapitolu.</div></p>

<p><div class="rs-tip-major">Poznámka: celý projekt naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app1">https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app1</a>.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Realizace koncového bodu / ve vznikajícím REST API webové služby</h2>

<p>Nyní nadešel čas pro důležitý krok. Musíme totiž vytvořit funkci zavolanou
pro obsluhu události, která vznikne ve chvíli, kdy na webovou službu přijde
požadavek na koncový bod <i>endpoint</i> /, tedy například požadavek směrovaný
na URL <strong>http://127.0.0.1:8000/</strong> (pro lokálně běžící HTTP
server). Do souboru &bdquo;src/example_package/main.py&ldquo; (jméno je nutné
dodržet) zapíšeme programový kód, v&nbsp;němž se inicializuje webová služba
nazvaná <strong>app</strong> a poté se registruje <i>handler</i> pro koncový
bod / volaný s&nbsp;HTTP metodou GET (což mj.&nbsp;znamená snadné otestování
v&nbsp;prohlížeči). Handler odpoví tak, že pošle klientovi JSON s&nbsp;jediným
atributem a hodnotou:</p>

<pre>
from fastapi import FastAPI
&nbsp;
app = FastAPI()
&nbsp;
@app.get("/")
def <strong>origin</strong>():
    return {"message": "My first FastAPI app"}
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;dalším textu si ukážeme, jak lze
specifikovat handlery pro endpointy s&nbsp;odlišnými HTTP metodami a jak se
specifikují parametry posílané v&nbsp;požadavku.</div></p>

<p><div class="rs-tip-major">Poznámka: celý projekt naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app2">https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app2</a>.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Spuštění webového serveru, poslání požadavku a zobrazení odpovědi</h2>

<p>HTTP server s&nbsp;webovou službou spustíme příkazem <strong>pdm
start</strong>:</p>

<pre>
$ <strong>pdm start</strong>
</pre>

<p>Na terminál by se nyní měly vypsat informace o adrese a portu, na kterém
HTTP server běží:</p>

<pre>
INFO:     Will watch for changes in these directories: ['/home/ptisnovs/x/app2']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [11351] using StatReload
INFO:     Started server process [11353]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
</pre>

<p>Takto vypadá odpověď na HTTP požadavek poslaný webovým prohlížečem:</p>

<img src="https://i.iinfo.cz/images/243/fastapi-1.webp" class="image-1108856" width="397" height="118" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 1: Odpověď na HTTP požadavek poslaný webovým prohlížečem.</i></p>

<p>Pochopitelně můžeme s&nbsp;webovou službou komunikovat i přes
<strong>curl</strong> či podobné nástroje (požadavek je uvozen znakem &lt;,
hlavička odpovědi znakem &gt;):</p>

<pre>
$ <strong>curl -v localhost:8000</strong>
&nbsp;
*   Trying 127.0.0.1:8000...
* Connected to localhost (127.0.0.1) port 8000 (#0)
&gt; GET / HTTP/1.1
&gt; Host: localhost:8000
&gt; User-Agent: curl/8.0.1
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; date: Tue, 07 Nov 2023 08:43:30 GMT
&lt; server: uvicorn
&lt; content-length: 34
&lt; content-type: application/json
&lt; 
* Connection #0 to host localhost left intact
&nbsp;
<strong>{"message":"My first FastAPI app"}</strong>
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Automaticky generované stránky s&nbsp;popisem REST API, zobrazení popisu ve formátu JSON</h2>

<p>Po spuštění webového serveru nebude ve skutečnosti dostupný pouze koncový
bod /, ale i další adresy se speciálním významem. Jedná se zejména o adresu
<strong>localhost:8000/doc</strong>, na níž je umístěna stránka
s&nbsp;interaktivním formulářem, který umožňuje si všechny koncové body REST
API otestovat. Pokud znáte Swagger, nebude pro vás obsah této stránky
překvapující:</p>

<a href="https://www.root.cz/obrazek/1108857/"><img src="https://i.iinfo.cz/images/243/fastapi-2-prev.webp" class="image-1108857" width="370" height="200" data-prev-filename="https://i.iinfo.cz/images/243/fastapi-2-prev.webp" data-prev-width="370" data-prev-height="200" data-large-filename="https://i.iinfo.cz/images/243/fastapi-2-large.webp" data-large-width="720" data-large-height="390" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 2: Interaktivní formulář, který umožňuje si otestovat všechny
koncové body REST API.</i></p>

<a href="https://www.root.cz/obrazek/1108858/"><img src="https://i.iinfo.cz/images/243/fastapi-3-prev.webp" class="image-1108858" width="370" height="210" data-prev-filename="https://i.iinfo.cz/images/243/fastapi-3-prev.webp" data-prev-width="370" data-prev-height="210" data-large-filename="https://i.iinfo.cz/images/243/fastapi-3-large.webp" data-large-width="720" data-large-height="409" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 3: Otestování koncového bodu / na interaktivním formuláři.</i></p>

<p>Na adrese <strong>localhost:8080/redoc</strong> nalezneme podobný formulář,
pouze s&nbsp;odlišným designem a nepatrně odlišným chováním:</p>

<a href="https://www.root.cz/obrazek/1108859/"><img src="https://i.iinfo.cz/images/243/fastapi-4-prev.webp" class="image-1108859" width="370" height="130" data-prev-filename="https://i.iinfo.cz/images/243/fastapi-4-prev.webp" data-prev-width="370" data-prev-height="130" data-large-filename="https://i.iinfo.cz/images/243/fastapi-4-large.webp" data-large-width="720" data-large-height="253" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 4: Alternativní interaktivní formulář, který umožňuje si
otestovat všechny koncové body realizované ve webové službě.</i></p>

<a href="https://www.root.cz/obrazek/1108860/"><img src="https://i.iinfo.cz/images/243/fastapi-5-prev.webp" class="image-1108860" width="370" height="189" data-prev-filename="https://i.iinfo.cz/images/243/fastapi-5-prev.webp" data-prev-width="370" data-prev-height="189" data-large-filename="https://i.iinfo.cz/images/243/fastapi-5-large.webp" data-large-width="720" data-large-height="367" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 5: Otestování koncového bodu / na (alternativním) interaktivním formuláři.</i></p>

<p>A kromě toho si můžeme zobrazit popis REST API realizovaný podle standardu
OpenAPI. Po naformátování vypadá popis REST API s&nbsp;jediným koncovým bodem
následovně:</p>

<pre>
{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Origin",
        "operationId": "origin__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  }
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. REST API endpointy pro další CRUD operace</h2>

<p>V&nbsp;dalším kroku do naší postupně vznikající webové služby přidáme další
REST API endpointy pro zbývající tři CRUD operace. Připomeňme si, že CRUD je
zkratka znamenající CREATE, READ, UPDATE a DELETE. Naše koncové body by měly
být navrženy následovně:</p>

<table>
<tr><th>Operace</th><th>Endpoint</th><th>HTTP metoda</th><th>Stručný popis</th></tr>
<tr><td>CREATE</td><td>/create</td><td>POST</td><td>vytvoří nový záznam, parametrem bude text, který se v&nbsp;záznamu uloží</td></tr>
<tr><td>READ</td><td>/</td><td>GET</td><td>vrátí všechny záznamy</td></tr>
<tr><td>UPDATE</td><td>/update/{id}</td><td>PUT</td><td>změní text záznamu identifikovaný jeho ID</td></tr>
<tr><td>DELETE</td><td>/delete/{id}</td><td>DELETE</td><td>vymaže záznam identifikovaný jeho ID</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: sémantické rozdíly mezi metodami HTTP
POST a HTTP PUT jsou shrnuty například na <a
href="https://restfulapi.net/rest-put-vs-post/">této stránce</a>.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Webová služba se čtveřicí REST API endpointů</h2>

<p>Druhá verze naší webové služby bude obsahovat definice handlerů pro všechny
čtyři REST API endpointy. Povšimněte si, jak se s&nbsp;využitím dekorátorů
specifikují jak HTTP metody, tak i adresy endpointů. Parametry posílané
v&nbsp;požadavku (resp.&nbsp;očekávané v&nbsp;požadavku) jsou odvozeny od názvů
a typů parametrů jednotlivých handlerů. To vlastně znamená, že žádné další
informace nemusíme frameworku FastAPI předávat &ndash; vše je specifikováno na
úrovni zdrojového kódu Pythonu s&nbsp;využitím typových informací (<i>type
hints</i>):</p>

<pre>
from fastapi import FastAPI
&nbsp;
app = FastAPI()
&nbsp;
@app.post("/create")
async def <strong>create_operation</strong>(text: str):
    return {"created": text}
&nbsp;
@app.get("/")
async def <strong>read_operation</strong>():
    return {"list": None}
&nbsp;
@app.put("/update/{id}")
async def <strong>update_operation</strong>(id: int, text: str = ""):
    pass
&nbsp;
@app.delete("/delete/{id}")
async def <strong>delete_operation</strong>(id: int):
    return {"deleted": id}
</pre>

<p><div class="rs-tip-major">Poznámka: celý projekt naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app3">https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app3</a>.</div></p>

<p>Po spuštění této varianty webové služby si můžeme nechat zobrazit
interaktivní formulář s&nbsp;popisem všech endpointů REST API:</p>

<a href="https://www.root.cz/obrazek/1108861/"><img src="https://i.iinfo.cz/images/243/fastapi-6-prev.webp" class="image-1108861" width="370" height="170" data-prev-filename="https://i.iinfo.cz/images/243/fastapi-6-prev.webp" data-prev-width="370" data-prev-height="170" data-large-filename="https://i.iinfo.cz/images/243/fastapi-6-large.webp" data-large-width="720" data-large-height="330" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 6: Nově definované endpointy jsou automaticky zobrazeny na tomto
formuláři, kde si je lze otestovat.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Realizace jednoduché databáze se záznamy uloženými v&nbsp;operační paměti</h2>

<p>Ve finální verzi naší webové aplikace použijeme reálnou databázi, ovšem
prozatím si vystačíme s&nbsp;velmi jednoduchou databází uloženou pouze
v&nbsp;operační paměti. Tato databáze bude realizována instancí třídy,
v&nbsp;níž je jako atribut uložen slovník se záznamy a taktéž atribut
obsahující ID naposledy uloženého záznamu (budeme tak simulovat tabulku
s&nbsp;dvojicí sloupců s&nbsp;ID a textem, přičemž ID se při zápisu dalšího
záznamu zvyšuje). Samozřejmě se nejedná ani o nejlepší ani o nejvýkonnější
řešení, ale pro ilustraci realizovaných operací může být zpočátku
dostačující:</p>

<pre>
class <strong>Storage</strong>():
    def <strong>__init__</strong>(self):
        self._items = {}
        self._id = 0
&nbsp;
    def <strong>create</strong>(self, text):
        self._id += 1
        self._items[self._id] = text
        return self._id
&nbsp;
    def <strong>read</strong>(self):
        return self._items
&nbsp;
    def <strong>update</strong>(self, id, text):
        self._items[id] = text
&nbsp;
    def <strong>delete</strong>(self, id):
        del self._items[id]
</pre>

<p><div class="rs-tip-major">Poznámka: handlery jednotlivých koncových bodů
jsou realizovány asynchronními funkcemi. Myslíte si, že výše realizovaná
databáze je z&nbsp;tohoto pohledu navržena bezpečným způsobem?</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výsledná podoba webové služby s&nbsp;jednoduchou databází realizovanou v&nbsp;paměti</h2>

<p>Nyní již můžeme upravit handlery pro jednotlivé koncové body tak, že se do
<a href="#k10">výše popsané databáze</a> budou ukládat nové záznamy, bude se
číst seznam záznamů, záznamy bude možné upravit a taktéž je mazat &ndash; budu
tedy realizovány všechny čtyři CRUD operace. Pokud nebudeme chtít provádět
další kontroly (například na existenci záznamu), může naše webová služba
vypadat takto:</p>

<pre>
from fastapi import FastAPI
&nbsp;
storage = Storage()
&nbsp;
app = FastAPI()
&nbsp;
@app.post("/create")
async def <strong>create_operation</strong>(text: str):
    id = storage.create(text)
    return {"created": id}
&nbsp;
@app.get("/")
async def <strong>read_operation</strong>():
    return {"list": storage.read()}
&nbsp;
@app.put("/update/{id}")
async def <strong>update_operation</strong>(id: int, text: str = ""):
    storage.update(id, text)
    return {"updated": id, "new text": text}
&nbsp;
@app.delete("/delete/{id}")
async def <strong>delete_operation</strong>(id: int):
    storage.delete(id)
    return {"deleted": id}
</pre>

<p><div class="rs-tip-major">Poznámka: celý projekt naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app4">https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app4</a>.</div></p>

<a href="https://www.root.cz/obrazek/1108862/"><img src="https://i.iinfo.cz/images/243/fastapi-7-prev.webp" class="image-1108862" width="370" height="146" data-prev-filename="https://i.iinfo.cz/images/243/fastapi-7-prev.webp" data-prev-width="370" data-prev-height="146" data-large-filename="https://i.iinfo.cz/images/243/fastapi-7-large.webp" data-large-width="720" data-large-height="284" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 7: Endpointy nyní již pracují podle očekávání.</i></p>

<p>Pro zajímavost se podívejme, jak vypadá automaticky vygenerovaný popis
celého REST API:</p>

<pre>
{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/create": {
      "post": {
        "summary": "Create Operation",
        "operationId": "create_operation_create_post",
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Text"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Read Operation",
        "operationId": "read_operation__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/update/{id}": {
      "put": {
        "summary": "Update Operation",
        "operationId": "update_operation_update__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Text"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/delete/{id}": {
      "delete": {
        "summary": "Delete Operation",
        "operationId": "delete_operation_delete__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Korektní reakce webové služby na chyby &ndash; výjimky typu <strong>HTTPException</strong></h2>

<p>Operace UPDATE a DELETE očekávají, že se jim předá ID upravovaného nebo
mazaného prvku. Co se však stane resp.&nbsp;má stát v&nbsp;případě, že prvek
s&nbsp;tímto ID neexistuje? Webová služba by měla reagovat tak, že vrátí
odpověď s&nbsp;vhodným stavovým kódem protokolu HTTP doplněným o informaci,
k&nbsp;jaké chybě došlo. Reakce na neexistující prvek by mohla vést
k&nbsp;odpovědi se stavovým kódem 404 Not Found (po 200 OK asi nejznámější
stavový kód). V&nbsp;případě frameworku FastAPI nám postačuje z&nbsp;handleru
vyhodit výjimku typu <strong>HTTPException</strong>, při jejíž konstrukci se
specifikuje jak stavový kód, tak i chybové hlášení.</p>

<p>Naši webovou službu nepatrně upravíme následujícím způsobem:</p>

<pre>
from fastapi import FastAPI
from fastapi import HTTPException
&nbsp;
class <strong>Storage</strong>():
    def <strong>__init__</strong>(self):
        self._items = {}
        self._id = 0
&nbsp;
    def <strong>create</strong>(self, text):
        self._id += 1
        self._items[self._id] = text
        return self._id
&nbsp;
    def <strong>read</strong>(self):
        return self._items
&nbsp;
    def <strong>update</strong>(self, id, text):
        # test???
        self._items[id] = text
&nbsp;
    def <strong>delete</strong>(self, id):
        del self._items[id]
&nbsp;
&nbsp;
storage = Storage()
&nbsp;
app = FastAPI()
&nbsp;
@app.post("/create")
async def <strong>create_operation</strong>(text: str):
    id = storage.create(text)
    return {"created": id}
&nbsp;
@app.get("/")
async def <strong>read_operation</strong>():
    return {"list": storage.read()}
&nbsp;
@app.put("/update/{id}")
async def <strong>update_operation</strong>(id: int, text: str = ""):
    try:
        storage.update(id, text)
        return {"updated": id, "new text": text}
    except:
        raise HTTPException(status_code=404, detail="Item not found")
&nbsp;
@app.delete("/delete/{id}")
async def <strong>delete_operation</strong>(id: int):
    try:
        storage.delete(id)
        return {"deleted": id}
    except:
        raise HTTPException(status_code=404, detail="Item not found")
</pre>

<p><div class="rs-tip-major">Poznámka: celý projekt naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app5">https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app5</a>.</div></p>

<p>Výsledek si pochopitelně opět můžeme velmi snadno otestovat:</p>

<a href="https://www.root.cz/obrazek/1108863/"><img src="https://i.iinfo.cz/images/243/fastapi-8-prev.webp" class="image-1108863" width="370" height="233" data-prev-filename="https://i.iinfo.cz/images/243/fastapi-8-prev.webp" data-prev-width="370" data-prev-height="233" data-large-filename="https://i.iinfo.cz/images/243/fastapi-8-large.webp" data-large-width="720" data-large-height="454" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 8: Nyní mohou různé požadavky vracet stavové kódy protokolu HTTP
s&nbsp;podrobnějšími informacemi o chybě.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Příprava pro připojení webové služby k&nbsp;reálné databázi</h2>

<p>Finální verze naší webové služby bude využívat reálnou databázi, konkrétně
PostgreSQL. Pro manipulaci se záznamy uloženými v&nbsp;databázi použijeme <a
href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping">objektově
relační mapování (ORM)</a>, konkrétně projekt <i>SQLAlchemy</i>. Do našeho
projektu tedy bude nutné přidat závislost právě na SQLAlchemy. Ovšem kromě toho
musíme nainstalovat i balíček s&nbsp;rozhraním k&nbsp;databázi (někdy se
označuje slovem ovladač, <i>driver</i>). Tento balíček se jmenuje
<strong>psycopg2-binary</strong>. Oba zmíněné balíčky nainstalujeme
následujícím způsobem:</p>

<pre>
$ <strong>pdm add sqlalchemy</strong>
$ <strong>pdm add psycopg2-binary</strong>
</pre>

<p>Projektový soubor <strong>pyproject.toml</strong> by měl vypadat zhruba
následovně (verze některých balíčků se ovšem mohou o setiny lišit):</p>

<pre>
[project]
name = ""
version = ""
description = ""
authors = [
    {name = "", email = ""},
]
dependencies = [
    "fastapi&gt;=0.104.0",
    "uvicorn&gt;=0.23.2",
    "sqlalchemy&gt;=2.0.22",
    "psycopg2-binary&gt;=2.9.9",
]
requires-python = "&gt;=3.11"
readme = "README.md"
license = {text = "MIT"}
&nbsp;
[tool.pdm.scripts]
start = "uvicorn --app-dir src/example_package main:app --reload"
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Konfigurace databáze</h2>

<p>Nastává potenciálně nejsložitější krok &ndash; instalace, konfigurace a
zprovoznění databáze PostgreSQL. Samotná instalace databáze je jednoduchá,
protože PostgreSQL je dostupná jako standardní balíček v&nbsp;prakticky každé
distribuci Linuxu. Například u distribucí založených na Debianu se instalace
provede následovně:</p>

<pre>
$ <strong>sudo apt install postgresql postgresql-contrib</strong>
</pre>

<p>Poté musíme zajistit, aby byla databáze spuštěna:</p>

<pre>
$ <strong>sudo systemctl start postgresql.service</strong>
</pre>

<p>nebo alternativně:</p>

<pre>
$ <strong>sudo service postgresql start</strong>
</pre>

<p>To ovšem není vše, protože musíme v&nbsp;Postgresu vytvořit nového uživatele
(říkejme mu <i>tester</i>), nastavit mu heslo a nakonec vytvořit databázi, ke
které bude mít veškerá potřebná práva. Přihlásíme se do konzole jako systémový
uživatel <strong>postgres</strong> (ten byl vytvořen při instalaci
Postgresu):</p>

<pre>
$ <strong>sudo -i -u postgres</strong>
</pre>

<p>Vytvoříme nového uživatele a specifikujeme jeho heslo:</p>

<pre>
postgres=# <strong>CREATE USER tester WITH PASSWORD '123qwe';</strong>
CREATE ROLE
</pre>

<p>Dále vytvoříme databázi a zajistíme, aby k&nbsp;ní měl právě vytvořený
uživatel práva:</p>

<pre>
postgres=# <strong>CREATE DATABASE test1 OWNER tester;</strong>
CREATE DATABASE
&nbsp;
postgres=# <strong>GRANT ALL PRIVILEGES ON DATABASE test1 TO tester;</strong>
GRANT
</pre>

<p>Nyní by mělo být možné se přihlásit jako uživatel <strong>tester</strong> do
Postgresu přes její standardní konzoli:</p>

<pre>
$ <strong>psql -U tester</strong>
</pre>

<p>Pokud se hlásí problémy při přihlašování, je vhodné se ujistit, jak jsou
nakonfigurovány parametry pro připojení k&nbsp;databázi. Viz například článek
na adrese <a
href="https://tecadmin.net/postgresql-allow-remote-connections/">https://tecadmin.net/postgresql-allow-remote-connections/</a>
(zejména jeho druhá kapitola).</p>

<p>V&nbsp;konzoli Postgresu si necháme zobrazit informaci o dostupných databázích:</p>

<pre>
tester=&gt; <strong>\l</strong>
&nbsp;                                                 List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    | ICU Locale | Locale Provider |   Access privileges   
-----------+----------+----------+-------------+-------------+------------+-----------------+-----------------------
 postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |            | libc            |
 template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |            | libc            | =c/postgres          +
           |          |          |             |             |            |                 | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |            | libc            | =c/postgres          +
           |          |          |             |             |            |                 | postgres=CTc/postgres
 test1     | tester   | UTF8     | en_US.UTF-8 | en_US.UTF-8 |            | libc            | =Tc/tester           +
           |          |          |             |             |            |                 | tester=CTc/tester
(4 rows)
</pre>

<p>Databáze <strong>test1</strong> by měla být prozatím prázdná:</p>

<pre>
tester=&gt; <strong>\c test1</strong>
You are now connected to database "test1" as user "tester".
&nbsp;
tester=&gt; <strong>\dt+</strong>
Did not find any relations.
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Připojení k&nbsp;databázi z&nbsp;Pythonu</h2>

<p>V&nbsp;případě, že databáze běží, je dostupná (pro připojení se k&nbsp;ní) a
existuje v&nbsp;ní uživatel <strong>tester</strong> se zadaným heslem, je
realizace připojení k&nbsp;takové databázi relativně triviální. V&nbsp;případě,
že nebudeme načítat parametry připojení z&nbsp;proměnných prostředí
(k&nbsp;čemuž dříve či později pravděpodobně dojdete), zajistí připojení funkce
<strong>connect_to_db</strong>, která vrací dvojici objektů (instance DB enginu
a objekt s&nbsp;informacemi o realizovaném sezení). Pochopitelně může nastat
mnoho situací, kdy připojení není možné navázat, uživatel nemá právo
k&nbsp;připojení k&nbsp;databázi, jeho heslo je neplatné, databáze
<strong>test1</strong> neexistuje atd. V&nbsp;takovém případě tato funkce
vyhodí výjimku v&nbsp;době inicializace webové služby:</p>

<pre>
from sqlalchemy import create_engine
from sqlalchemy.engine import URL
from sqlalchemy.orm import sessionmaker
&nbsp;
&nbsp;
def <strong>connect_to_db</strong>():
    url = URL.create(
        drivername="postgresql",
        username="tester",
        password="123qwe",
        host="localhost",
        database="test1",
        port=5432
    )
    print("url", url)
&nbsp;
    engine = create_engine(url)
    print("engine", engine)
&nbsp;
    Session = sessionmaker(bind=engine)
    session = Session()
    print("session", session)
&nbsp;
    return engine, session
&nbsp;
&nbsp;
engine, session = connect_to_db()
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Deklarace modelu pro ORM</h2>

<p>Jak jsme si již řekli v&nbsp;předchozích kapitolách, budeme pro práci se
záznamy uloženými do databáze používat objektově-relační mapování neboli ORM.
Pro programovací jazyk Python existuje několik balíčků s&nbsp;implementací ORM;
my dnes použijeme <i>SQLAlchemy</i>, což je (pravděpodobně) nejznámější balíček
z&nbsp;této kategorie.</p>

<p>Záznamy, které budou zapisovány do databáze či naopak čteny z&nbsp;databáze,
jsou popsány takzvaným <i>modelem</i>. Jedná se vlastně o spojení objektového
modelu (třídy) s&nbsp;metadaty, které určují, jak se budou instance této třídy
ukládat do databáze. Vzhledem k&nbsp;tomu, že nebudeme používat žádné
složitější databázové schéma (mapování 1:N, M:N atd.), může být model mnohdy i
poměrně triviální.</p>

<p>V&nbsp;naší konkrétní webové službě budeme pracovat se záznamy, které
obsahují dvojici atributů nazvaných <strong>id</strong> a
<strong>text</strong>. Záznamy budou ukládány do tabulky nazvané
<strong>records</strong>, která bude obsahovat dva sloupce pojmenované
<strong>id</strong> a <strong>text</strong>, přičemž <strong>id</strong> je
automaticky generovaným primárním klíčem. Typ hodnot i další metadata sloupců
jsou popsány instancí třídy <strong>Column</strong>. Celý model a vlastně i ORM
mapování je tak popsáno na několika řádcích Pythonovského kódu:</p>

<pre>
Base = declarative_base()
&nbsp;
&nbsp;
class <strong>Record</strong>(Base):
    __tablename__ = "records"
&nbsp;
    id = Column(Integer, primary_key=True)
    text = Column(String)
&nbsp;
&nbsp;
<i># inicializace</i>
Base.metadata.create_all(engine)
</pre>

<p>Poslední řádek zajistí vytvoření tabulky <strong>records</strong>
v&nbsp;případě, že tato tabulka ještě neexistuje.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;praxi bude situace většinou
složitější, protože bude nutné zajistit vazby 1:N či dokonce M:N. Ovšem
v&nbsp;našem případě se takovými &bdquo;podružnostmi&ldquo; nemusíme zabývat
(snad někdy příště).</div></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Realizace jednotlivých CRUD operací</h2>

<p>Podívejme se nyní na jeden možný způsob realizace handlerů pro jednotlivé
CRUD operace. Nejjednodušší je v&nbsp;tomto případě operace CREATE, která bude
interně provedena SQL příkazem INSERT. Vytvoříme novou instanci třídy
<strong>Record</strong> a metodou <strong>Session.add</strong> ji zapíšeme do
databáze. Tím se automaticky upraví i atribut <strong>id</strong>, který
vrátíme klientovi:</p>

<pre>
record = Record(text=text)
session.add(record)
session.commit()
return {"created": record.id}
</pre>

<p>Operace READ je realizována SQL příkazem <strong>SELECT * from
records</strong>. V&nbsp;Pythonu ji zapíšeme takto (samozřejmě v&nbsp;případě
zápisu podmínky <strong>WHERE</strong>, operace řazení, operace seskupení atd.
bude situace nepatrně složitější):</p>

<pre>
record_query = session.query(Record)
records = record_query.all()
</pre>

<p>Operace UPDATE a DELETE jsou realizovány SQL příkazy se stejným jménem. Zde
se vyžaduje specifikace konkrétního záznamu, který se má upravit či smazat.
Záznamy budeme vybírat přes jejich ID, takže interně se do SQL příkazů
<strong>UPDATE</strong> a <strong>DELETE</strong> vloží příslušná klauzule
<strong>WHERE</strong>:</p>

<pre>
<i># UPDATE</i>
record_query = session.query(Record).filter(Record.id==id)
record = record_query.first()
record.text = text
session.add(record)
session.commit()
&nbsp;
<i># DELETE</i>
record = session.query(Record).filter(Record.id==id).first()
session.delete(record)
session.commit()
</pre>

<p>Konkrétně budou handlery všech čtyř CRUD operací vypadat následovně:</p>

<pre>
app = FastAPI()
&nbsp;
&nbsp;
@app.post("/create")
async def <strong>create_operation</strong>(text: str):
    record = Record(text=text)
    session.add(record)
    session.commit()
    return {"created": record.id}
&nbsp;
@app.get("/")
async def <strong>read_operation</strong>():
    record_query = session.query(Record)
    return {"list": record_query.all()}
&nbsp;
@app.put("/update/{id}")
async def <strong>update_operation</strong>(id: int, text: str = ""):
    record_query = session.query(Record).filter(Record.id==id)
    record = record_query.first()
    record.text = text
    session.add(record)
    session.commit()
&nbsp;
@app.delete("/delete/{id}")
async def <strong>delete_operation</strong>(id: int):
    record = session.query(Record).filter(Record.id==id).first()
    session.delete(record)
    session.commit()
    return {"todo deleted": record.id}
</pre>

<p>Při prvním spuštění takto upravené webové služby se tabulka
<strong>records</strong> vytvoří, což si můžeme snadno ověřit v&nbsp;konzoli
<strong>psql</strong>:</p>

<pre>
tester=&gt; <strong>\l</strong>
&nbsp;
                                                 List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    | ICU Locale | Locale Provider |   Access privileges   
-----------+----------+----------+-------------+-------------+------------+-----------------+-----------------------
 postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |            | libc            |
 template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |            | libc            | =c/postgres          +
           |          |          |             |             |            |                 | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |            | libc            | =c/postgres          +
           |          |          |             |             |            |                 | postgres=CTc/postgres
 test1     | tester   | UTF8     | en_US.UTF-8 | en_US.UTF-8 |            | libc            | =Tc/tester           +
           |          |          |             |             |            |                 | tester=CTc/tester
(4 rows)
&nbsp;
&nbsp;
tester=&gt; <strong>\c test1</strong>
You are now connected to database "test1" as user "tester".
&nbsp;
test1=&gt; \dt+
                                   List of relations
 Schema |  Name   | Type  | Owner  | Persistence | Access method | Size  | Description
--------+---------+-------+--------+-------------+---------------+-------+-------------
 public | records | table | tester | permanent   | heap          | 16 kB |
(1 row)
&nbsp;
&nbsp;
test1=&gt; <strong>select * from records;</strong>
&nbsp;
 id |     text
----+--------------
  1 | prvni zaznam
  2 | dalsi zaznam
(2 rows)
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Výsledná podoba webové služby</h2>

<p>Všechny části zdrojových kódů popsaných v&nbsp;předchozích třech kapitolách
lze nyní spojit a vytvořit tak výslednou podobu webové služby. Její zdrojový
kód bude vypadat následovně:</p>

<pre>
from fastapi import FastAPI
from fastapi import HTTPException
&nbsp;
from sqlalchemy import create_engine
from sqlalchemy.engine import URL
from sqlalchemy.orm import sessionmaker
&nbsp;
&nbsp;
def <strong>connect_to_db</strong>():
    url = URL.create(
        drivername="postgresql",
        username="tester",
        password="123qwe",
        host="localhost",
        database="test1",
        port=5432
    )
    print("url", url)
&nbsp;
    engine = create_engine(url)
    print("engine", engine)
&nbsp;
    Session = sessionmaker(bind=engine)
    session = Session()
    print("session", session)
&nbsp;
    return engine, session
&nbsp;
&nbsp;
engine, session = connect_to_db()
&nbsp;
&nbsp;
from sqlalchemy import Column, Integer, String, Boolean
from sqlalchemy.orm import declarative_base
&nbsp;
Base = declarative_base()
&nbsp;
&nbsp;
class <strong>Record</strong>(Base):
    __tablename__ = "records"
&nbsp;
    id = Column(Integer, primary_key=True)
    text = Column(String)
&nbsp;
&nbsp;
# inicializace
Base.metadata.create_all(engine)
&nbsp;
app = FastAPI()
&nbsp;
&nbsp;
@app.post("/create")
async def <strong>create_operation</strong>(text: str):
    record = Record(text=text)
    session.add(record)
    session.commit()
    return {"created": record.id}
&nbsp;
@app.get("/")
async def <strong>read_operation</strong>():
    record_query = session.query(Record)
    return {"list": record_query.all()}
&nbsp;
@app.put("/update/{id}")
async def <strong>update_operation</strong>(id: int, text: str = ""):
    record_query = session.query(Record).filter(Record.id==id)
    record = record_query.first()
    record.text = text
    session.add(record)
    session.commit()
&nbsp;
@app.delete("/delete/{id}")
async def <strong>delete_operation</strong>(id: int):
    record = session.query(Record).filter(Record.id==id).first()
    session.delete(record)
    session.commit()
    return {"todo deleted": record.id}
</pre>

<p><div class="rs-tip-major">Poznámka: celý projekt naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app6">https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app6</a>.</div></p>

<p>Pro rozsáhlejší webové služby může být výhodnější zdrojový kód vhodným
způsobem rozdělit, například tak, aby to odpovídalo nějakému vzoru (MVC atd.).
Ovšem pro službu se čtyřmi triviálními CRUD operacemi to (podle mého skromného
názoru) ani není nutné.</p>

<p>Webovou službu si pochopitelně můžeme otestovat &ndash; přes endpoint
<strong>/create</strong> do databáze zapíšeme záznamy, které potom přečteme
přes endpoint <strong>/</strong> popř.&nbsp;upravíme nebo vymažeme přes
endpointy <strong>/update</strong> a <strong>/delete</strong>:</p>

<a href="https://www.root.cz/obrazek/1108864/"><img src="https://i.iinfo.cz/images/243/fastapi-9-prev.webp" class="image-1108864" width="370" height="212" data-prev-filename="https://i.iinfo.cz/images/243/fastapi-9-prev.webp" data-prev-width="370" data-prev-height="212" data-large-filename="https://i.iinfo.cz/images/243/fastapi-9-large.webp" data-large-width="720" data-large-height="413" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 9: Nyní by všechny čtyři endpointy měly být funkční.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všech šest projektů webových služeb, které jsme si ukázali v&nbsp;dnešním
článku, naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je pochopitelně
nutné mít nainstalovánu knihovnu <i>FastAPI</i> a její závislosti):</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Adresa</th></tr>
<tr><td>1</td><td>app1</td><td>kostra projektu, na kterém se bude stavět webová služba</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app1">https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app1</a></td></tr>
<tr><td>2</td><td>app2</td><td>webová služba s&nbsp;jediným REST API endpointem /</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app2">https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app2</a></td></tr>
<tr><td>3</td><td>app3</td><td>webová služba se čtveřicí REST API endpointů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app3">https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app3</a></td></tr>
<tr><td>4</td><td>app4</td><td>implementace jednoduché in-memory databáze</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app4">https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app4</a></td></tr>
<tr><td>5</td><td>app5</td><td>využití výjimek typu <strong>HTTPException</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app5">https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app5</a></td></tr>
<tr><td>6</td><td>app6</td><td>realizace CRUD operací pro PostgreSQL</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app6">https://github.com/tisnik/most-popular-python-libs/blob/master/fastapi/app6</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>FastAPI<br />
<a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a>
</a>

<li>Pydantic<br />
<a href="https://docs.pydantic.dev/latest/">https://docs.pydantic.dev/latest/</a>
</a>

<li>What does async actually do in FastAPI?<br />
<a href="https://stackoverflow.com/questions/75463993/what-does-async-actually-do-in-fastapi">https://stackoverflow.com/questions/75463993/what-does-async-actually-do-in-fastapi</a>
</a>

<li>FastAPI runs api-calls in serial instead of parallel fashion<br />
<a href="https://stackoverflow.com/questions/71516140/fastapi-runs-api-calls-in-serial-instead-of-parallel-fashion">https://stackoverflow.com/questions/71516140/fastapi-runs-api-calls-in-serial-instead-of-parallel-fashion</a>
</a>

<li>SQLAlchemy<br />
<a href="https://www.sqlalchemy.org/">https://www.sqlalchemy.org/</a>
</a>

<li>PostgreSQL<br />
<a href="https://www.postgresql.org/">https://www.postgresql.org/</a>
</a>

<li>OpenAPI Specification<br />
<a href="https://github.com/OAI/OpenAPI-Specification">https://github.com/OAI/OpenAPI-Specification</a>
</a>

<li>Swagger<br />
<a href="https://swagger.io/">https://swagger.io/</a>
</a>

<li>Redoc<br />
<a href="https://github.com/Redocly/redoc">https://github.com/Redocly/redoc</a>
</a>

<li>PDM: moderní správce balíčků a virtuálních prostředí Pythonu<br />
<a href="https://www.root.cz/clanky/pdm-moderni-spravce-balicku-a-virtualnich-prostredi-pythonu/">https://www.root.cz/clanky/pdm-moderni-spravce-balicku-a-virtualnich-prostredi-pythonu/</a>
</li>

<li>Stránka projektu PDM<br />
<a href="https://pdm.fming.dev/latest/">https://pdm.fming.dev/latest/</a>
</li>

<li>PDM na GitHubu<br />
<a href="https://github.com/pdm-project/pdm">https://github.com/pdm-project/pdm</a>
</li>

<li>PEP 582 &ndash; Python local packages directory<br />
<a href="https://peps.python.org/pep-0582/">https://peps.python.org/pep-0582/</a>
</li>

<li>PDM na PyPi<br />
<a href="https://pypi.org/project/pdm/">https://pypi.org/project/pdm/</a>
</li>

<li>Which Python package manager should you use?<br />
<a href="https://towardsdatascience.com/which-python-package-manager-should-you-use-d0fd0789a250">https://towardsdatascience.com/which-python-package-manager-should-you-use-d0fd0789a250</a>
</li>

<li>How to Use PDM to Manage Python Dependencies without a Virtual Environment<br />
<a href="https://www.youtube.com/watch?v=qOIWNSTYfcc">https://www.youtube.com/watch?v=qOIWNSTYfcc</a>
</li>

<li>What are the best Python package managers?<br />
<a href="https://www.slant.co/topics/2666/~best-python-package-managers">https://www.slant.co/topics/2666/~best-python-package-managers</a>
</li>

<li>HTTP PUT vs. POST<br />
<a href="https://restfulapi.net/rest-put-vs-post/">https://restfulapi.net/rest-put-vs-post/</a>
</a>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

