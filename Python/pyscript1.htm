<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>PyScript: další technologie umožňující využití Pythonu ve webovém browseru</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>PyScript: další technologie umožňující využití Pythonu ve webovém browseru</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V dnešním článku se seznámíme s projektem nazvaným PyScript. Jak již název tohoto projektu může napovědět, jedná se o nástroj umožňující běh skriptů napsaných v Pythonu přímo na HTML stránce. Namísto transpřekladu do JavaScriptu se používá klasický CPython přeložený do WebAssembly.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. PyScript: další technologie umožňující využití Pythonu ve webovém browseru</a></p>
<p><a href="#k02">2. Programovací jazyk Python a front end webových aplikací</a></p>
<p><a href="#k03">3. Python ve funkci programovacího jazyka pro front end</a></p>
<p><a href="#k04">4. Projekt Pyodide</a></p>
<p><a href="#k05">5. PyScript se představuje</a></p>
<p><a href="#k06">6. Zobrazení textu &bdquo;Hello, World!&ldquo; vypsaného Pythonem na webové stránce</a></p>
<p><a href="#k07">7. Uložení skriptu do externího souboru, problematika načtení z&nbsp;lokálního souborového systému</a></p>
<p><a href="#k08">8. Využití vlastního HTTP serveru pro vývoj a ladění</a></p>
<p><a href="#k09">9. Programová smyčka zapsaná do webové stránky, &bdquo;chytré&ldquo; řešení problematiky odsazení</a></p>
<p><a href="#k10">10. Smyčka v&nbsp;externím modulu</a></p>
<p><a href="#k11">11. Výpis informací funkcí <strong>print</strong></a></p>
<p><a href="#k12">12. Zápis výsledků do vybraného elementu HTML stránky</a></p>
<p><a href="#k13">13. Podpora knihovny NumPy v&nbsp;projektu PyScript</a></p>
<p><a href="#k14">14. Maticový součin realizovaný v&nbsp;knihovně NumPy</a></p>
<p><a href="#k15">15. Zobrazení matice v&nbsp;čitelné podobě</a></p>
<p><a href="#k16">16. Zápis matic do většího množství HTML elementů</a></p>
<p><a href="#k17">17. Zobrazení grafů vykreslených knihovnou Matplotlib přímo do plochy webové stránky</a></p>
<p><a href="#k18">18. Modifikace DOMu stránky z&nbsp;PyScriptu, reakce na události</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. PyScript: další technologie umožňující využití Pythonu ve webovém browseru</h2>

<p>Na stránkách <a href="https://www.root.cz/">Roota</a> a v&nbsp;minulosti
taktéž na serveru <a href="https://mojefedora.cz/">Moje Fedora</a> jsme se již
několikrát setkali s&nbsp;různými mainstreamovými ale i alternativními
implementacemi programovacího jazyka <a
href="https://www.root.cz/n/python/">Python</a>. Připomeňme si, že kromě
klasického <i>CPythonu</i> (ať již dnes již zastaralé verze <a
href="https://pythonclock.org/">2</a> nebo verze 3.x) se používá či používal
například projekt nazvaný Jython [<a
href="https://mojefedora.cz/jython-aneb-ponekud-opomijeny-programovaci-jazyk-pro-virtualni-stroj-javy/">1</a>]
[<a
href="https://mojefedora.cz/pouziti-standardni-knihovny-javy-v-jythonu/">2</a>],
což je (dnes již bohužel poněkud zastaralá) implementace Pythonu určená pro běh
ve virtuálním stroji Javy, popř.&nbsp;<a
href="https://ironpython.net/">IronPython</a> určený pro prostředí .NET. Dále
jsme se zmínili o <a
href="https://www.root.cz/zpravicky/rustpython-je-implementace-jazyka-python-3-napsana-pomoci-rust/">RustPythonu</a>,
neboli implementaci Pythonu vytvořené (jak název správně napovídá) <a
href="https://www.root.cz/serialy/programovaci-jazyk-rust/">v&nbsp;programovacím
jazyce Rust</a>. Podobným způsobem je implementován i interpret Pythonu
v&nbsp;jazyce Go v&nbsp;projektu <a
href="https://github.com/go-python/gpython">gpython</a>.</p>

<img src="https://i.iinfo.cz/images/575/brython-1.png" class="image-394884" alt="&#160;" width="399" height="257" />
<p><i>Obrázek 1: Logo programovacího jazyka Jython &ndash; dnes již poněkud
zastaralé varianty Pythonu pro běh nad virtuálním strojem Javy.</i></p>

<p>Věnovali jsme se i poměrně neznámému jazyku <a
href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">Coconut</a>.
Jedná se o funkcionální programovací jazyk s&nbsp;<i>pattern matchingem</i>,
který je navržen takovým způsobem, aby byl kompatibilní s&nbsp;Pythonem,
tj.&nbsp;aby skripty vyvinuté v&nbsp;Pythonu byly v&nbsp;Coconutu spustitelné
(zpětně ovšem nikoli, protože syntaxe a sémantika Coconutu byla v&nbsp;mnoha
ohledech rozšířena). Přesnější informace o tom, se kterými verzemi Pythonu je
Coconut kompatibilní, naleznete na adrese <a
href="http://coconut.readthedocs.io/en/master/DOCS.html#compatible-python-versions">http://coconut.readthedocs.io/en/master/DOCS.html#compatible-python-versions</a>.
Zapomenout nesmíme ani na <a href="http://www.mypy-lang.org/">MyPy</a>, což je
projekt, kterému bude věnován samostatný článek.</p>

<p>Zatímco výše zmíněné nástroje <i>Jython</i> i <i>RustPython</i> jsou
skutečnými alternativními implementacemi interpretru Pythonu navazujícími na
referenční CPython (interpret Pythonu naprogramovaný v&nbsp;céčku), existují i
další implementace, které se zaměřují například na překlad programů vyvinutých
v&nbsp;Pythonu do strojového kódu, a to jak před spuštěním aplikace (<i>AOT
&ndash; Ahead Of Time compilation</i>) nebo během její činnosti (<i>JIT &ndash;
Just In Time compilation</i>). Mezi tyto nástroje patří především <a
href="http://pypy.org/">PyPy</a> (používaný v&nbsp;mnoha projektech) a dále <a
href="https://cython.org/">Cython</a> (pozor &ndash; ne CPython), <a
href="https://rpython.readthedocs.io/en/latest/rpython.html">RPython</a> a <a
href="http://numba.pydata.org/">Numba</a>, které k&nbsp;problematice překladu
skriptů vytvořených v&nbsp;Pythonu přistupují různými (zcela odlišnými
cestami). RPython používá AOT a striktně omezuje některé vlastnosti jazyka
zatímco Numba a PyPy používá JIT a nabízí programátorům prakticky stejné
možnosti, jako klasický CPython.</p>

<img src="https://i.iinfo.cz/images/575/brython-2.png" class="image-394885" alt="&#160;" width="500" height="230" />
<p><i>Obrázek 2: Logo projektu Cython.</i></p>

<img src="https://i.iinfo.cz/images/575/brython-3.png" class="image-394886" alt="&#160;" width="318" height="110" />
<p><i>Obrázek 3: Logo projektu PyPy.</i></p>

<p>S&nbsp;bližšími informacemi o Cythonu, RPythonu i nástroji Numba jsme se
seznámili v&nbsp;následujících článcích:</p>

<ol>

<li>RPython: překvapivě výkonný dialekt Pythonu, na němž je založen PyPy<br />
<a href="https://www.root.cz/clanky/rpython-prekvapive-vykonny-dialekt-pythonu-na-nemz-je-zalozen-pypy/">https://www.root.cz/clanky/rpython-prekvapive-vykonny-dialekt-pythonu-na-nemz-je-zalozen-pypy/</a>
</li>

<li>RPython vs Cython aneb dvojí přístup k překladu Pythonu do nativního kódu<br />
<a href="https://www.root.cz/clanky/rpython-vs-cython-aneb-dvoji-pristup-k-prekladu-pythonu-do-nativniho-kodu/">https://www.root.cz/clanky/rpython-vs-cython-aneb-dvoji-pristup-k-prekladu-pythonu-do-nativniho-kodu/</a>
</li>

<li>Praktické použití nástroje Cython při překladu Pythonu do nativního kódu<br />
<a href="https://www.root.cz/clanky/prakticke-pouziti-nastroje-cython-pri-prekladu-pythonu-do-nativniho-kodu-1/">https://www.root.cz/clanky/prakticke-pouziti-nastroje-cython-pri-prekladu-pythonu-do-nativniho-kodu-1/</a>
</li>

<li>Projekt Numba aneb další přístup k překladu Pythonu do nativního kódu<br />
<a href="https://www.root.cz/clanky/projekt-numba-aneb-dalsi-pristup-k-prekladu-pythonu-do-nativniho-kodu/">https://www.root.cz/clanky/projekt-numba-aneb-dalsi-pristup-k-prekladu-pythonu-do-nativniho-kodu/</a>
</li>

</ol>

<a href="https://www.root.cz/obrazek/332506/"><img src="https://i.iinfo.cz/images/529/rpython-cpython-3-prev.png" class="image-332506" alt="&#160;" width="363" height="270" /></a>
<p><i>Obrázek 4: Porovnání doby výpočtu Mandelbrotovy množiny RPythonem,
Cythonem (bez i s&nbsp;type hinty) a variantou naprogramovanou přímo
v&nbsp;ANSI C. Z&nbsp;tohoto grafu je dobře patrné, jak důležité je pro Cython
mít k&nbsp;dispozici o typech proměnných, parametrů a návratových kódů funkcí
(jinými slovy &ndash; provedené optimalizace v&nbsp;tomto případě nezískáme
zadarmo; ostatně v&nbsp;IT nic nedostaneme zadarmo).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Programovací jazyk Python a front end webových aplikací</h2>

<p>Programovací jazyk Python se v&nbsp;současnosti používá v&nbsp;mnoha
aplikačních oblastech &ndash; od jednoduchých skriptů umožňujících a
zjednodušujících administraci systému přes složitější utility, desktopové
aplikace (PyQt, PySide, wxPython, Tkinter, PyGObject či Wax) a webové služby až
po zpracování dat, strojové učení (<i>ML &ndash; machine learning</i>) a umělou
inteligenci (<i>AI &ndash; artificial intelligence</i>). Dnes nás ovšem bude
zajímat především použití Pythonu při tvorbě webových služeb a webových
aplikací. V&nbsp;této oblasti se Python používá především na <i>back endu</i>,
tj.&nbsp;pro tu část webové služby/aplikace, která je provozována na serveru a
nějakým způsobem komunikuje s&nbsp;ostatními komponentami vytvářeného systému:
<i>front endem</i> (typicky webový prohlížeč s&nbsp;interpretrem JavaScriptu),
databází a dalšími (mikro)službami, například s&nbsp;využitím message brokerů,
systémů pro monitoring a správu událostí atd. Tato oblast samozřejmě není
pokryta pouze Pythonem, ale najdeme zde i další programovací jazyky a
technologie, zejména Javu (a celý její middleware), JavaScript či TypeScript
(node.js) a dnes taktéž <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">programovací jazyk
Go</a> (i když není problém využít například i Rust či další jazyky).</p>

<p>Zatímco pozice Pythonu v&nbsp;oblasti back endu je poměrně zřejmá, je
situace na front endu (tedy v&nbsp;současnosti na straně webového prohlížeče)
mnohem složitější. Důvod je jednoduchý &ndash; v&nbsp;této oblasti
z&nbsp;historických důvodů kraluje JavaScript, přičemž veškeré snahy a náhradu
tohoto jazyka byly prozatím neúspěšné (pokusů bylo hned několik, připomeňme
například browsery s&nbsp;<a
href="https://www.root.cz/serialy/programovaci-jazyk-tcl/">TCL</a>, <a
href="https://en.wikipedia.org/wiki/VBScript">VBScript</a> či projekt <a
href="https://dart.dev/">Dart</a>). Ovšem stále se můžeme setkat se snahami
JavaScript nepoužívat přímo, popř.&nbsp;ho obejít jinými nástroji. Příkladem
mohou být technologie umožňující tvorbu webových aplikací podobným způsobem,
jakoby se jednalo o aplikace desktopové. Příkladem tohoto přístupu mohou být
projekty <a href="https://wiki.python.org/moin/Pyjamas">Pyjamas</a> (pro
Python), <a href="http://www.gwtproject.org/">Google Web Toolkit (GWT)</a>, <a
href="https://cordova.apache.org/">Apache Cordova</a> atd. (což jsou
v&nbsp;současnosti většinou již nepodporované projekty).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Python ve funkci programovacího jazyka pro front end</h2>

<p>Je tedy vůbec možné a praktické použít Python přímo na webovém front endu a
pokud to je možné, jakou za to zaplatíme cenu? Ve skutečnosti existuje hned
několik projektů, které se více či méně úspěšným způsobem snaží o to, aby byl
Python na front endu skutečně použitelný, a to i pro reálně provozované
aplikace. Mezi tyto projekty patří například:</p>

<ol>

<li><i>Brython</i>, což je transpřekladač z&nbsp;Pythonu do JavaScriptu,
přičemž samotný překlad (resp.&nbsp;přesněji řečeno transpřeklad) probíhá na
pozadí, což znamená, že přímo v&nbsp;kódu webové stránky je umístěn (či
načítán) kód v&nbsp;Pythonu. Podobné řešení jsme již viděli, například u
projektu <a href="https://github.com/Gozala/wisp">Wisp</a> (jazyk podobný
Clojure) či <a href="https://github.com/mherkender/lua.js">lua.js</a>
(transpřeklad z&nbsp;jazyka Lua). Výhodou Brythonu je, že se jakékoli úpravy
ihned projeví v&nbsp;aplikaci po znovunačtení stránky (F5), nevýhodou celková
pomalost inicializace webové aplikace.</li>

<li><i>Transcrypt</i> je taktéž transpřekladačem Pythonu (konkrétně Pythonu 3)
do JavaScriptu. Samotný transpřeklad je napsaný velmi dobře &ndash; zhruba
platí, že velikost vygenerovaného kódu v&nbsp;JavaScriptu odpovídá velikosti
původního kódu napsaného v&nbsp;Pythonu (případné zvětšení je o jednotky
procent). Musíme však počítat s&nbsp;tím, že je nutné načíst i jádro
Transcriptu, jehož velikost je přibližně 20 kB (tedy čím větší je kód samotné
aplikace, tím (poměrově) menší budou režijní náklady. Zajímavá a užitečná je i
podpora <i>type hintů</i> (informací o datovém typu parametrů, proměnných
atd.)</li>

<li>Podobným způsobem pracuje i projekt nazvaný <i>pyjaco</i>, který naleznete
na adrese <a
href="https://github.com/chrivers/pyjaco">https://github.com/chrivers/pyjaco</a>.</li>

<li><i>Skulpt</i> je naproti tomu v&nbsp;mnoha ohledech podobný projektu
<i>Brython</i>, protože taktéž umožňuje provádět transpřeklad na pozadí
(programátor tedy pracuje pouze se zdrojovým kódem vytvořeným
v&nbsp;Pythonu).</li>

<li>Velmi zajímavým nástrojem, který názorně ukazuje, jak vlastně transpřeklad
funguje (a že jeho výsledek může být čitelný), je nástroj s&nbsp;poněkud
zvláštním jménem <i>fiddlesalad</i>, který naleznete na adrese <a
href="http://fiddlesalad.com/python/">http://fiddlesalad.com/python/</a>. Tento
nástroj umožňuje zápis zdrojového kódu v&nbsp;Pythonu, který je ihned (již
v&nbsp;době zápisu) transpřekládán do JavaScriptu a současně i spouštěn.</li>

</ol>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že všechny projekty
zmíněné v&nbsp;předchozím textu jsou ve skutečnosti <i>transpřekladači</i>
neboli <i>transpilery</i>. Jedná se o technologii zajišťující, aby se i ve
webovém prohlížeči mohlo (nepřímo) pracovat s&nbsp;dalšími programovacími
jazyky, nejenom se všudypřítomným a nativně podporovaným JavaScriptem. Další
variantou je interpretace s&nbsp;využitím interpretru psaného
v&nbsp;JavaScriptu popř.&nbsp;použití WebAssembly (viz též navazující
kapitoly).</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Projekt Pyodide</h2>

<p>Nástroj <i>PyScript</i>, kterým se budeme podrobněji zabývat
v&nbsp;navazujících kapitolách, ovšem není založen na transpřekladači. Je
primárně postaven na projektu nazvaném <a
href="https://github.com/pyodide/pyodide">Pyodide</a>. Jedná se v&nbsp;prvé
řadě o upravený překlad celého standardního Pythonu (konkrétně Pythonu,
resp.&nbsp;přesněji řečeno CPythonu 3.9), ovšem nikoli do nativního kódu
spustitelného přímo z&nbsp;příkazové řádky, ale do bajtkódu <i>WebAssembly</i>.
To mj.&nbsp;znamená, že interpret Pythonu, resp.&nbsp;přesněji řečeno programů
napsaných pro Python, lze spustit přímo z&nbsp;webového prohlížeče, a to
dokonce bez nutnosti mít Python lokálně nainstalovaný &ndash; musíme mít pouze
k&nbsp;dispozici vhodný webový server (pro jednoduché projekty dokonce ani to
ne &ndash; stačí lokálně uložené soubory), stránky na <a
href="https://pages.github.com/">github.io</a> atd.</p>

<p>Kromě toho je součástí projektu <i>Pyodide</i> i poměrně velké množství
důležitých balíčků používaných ve vědeckotechnických výpočtech, pro zpracování
numerických dat, ve statistických výpočtech, v&nbsp;oblasti strojového učení
atd. Primárně se jedná o balíčky <i>NumPy</i>, <i>Pandas</i>,
<i>Matplotlib</i>, <i>SciPy</i> a taktéž <i>scikit-learn</i>. S&nbsp;mnohými
z&nbsp;nich jsme se ostatně na stránkách Roota již setkali a NumPy a Matplotlib
dnes dokonce použijeme v&nbsp;některých demonstračních příkladech. Seznam všech
balíčků použitých v&nbsp;aktuální verzi <i>Pyodide</i> nalezneme na adrese <a
href="https://github.com/pyodide/pyodide/tree/main/packages">https://github.com/pyodide/pyodide/tree/main/packages</a>:</p>

<table>
<tr><td>CLAPACK</td><td>Jinja2</td><td>MarkupSafe</td><td>Pygments</td></tr>
<tr><td>asciitree</td><td>astropy</td><td>atomicwrites</td><td>attrs</td></tr>
<tr><td>autograd</td><td>beautifulsoup4</td><td>biopython</td><td>bleach</td></tr>
<tr><td>bokeh</td><td>cloudpickle</td><td>cssselect</td><td>cycler</td></tr>
<tr><td>cytoolz</td><td>decorator</td><td>distlib</td><td>docutils</td></tr>
<tr><td>freesasa</td><td>future</td><td>glpk</td><td>html5lib</td></tr>
<tr><td>imageio</td><td>jedi</td><td>joblib</td><td>kiwisolver</td></tr>
<tr><td>libiconv</td><td>libxml</td><td>libxslt</td><td>libyaml</td></tr>
<tr><td>lxml</td><td>matplotlib</td><td>micropip</td><td>mne</td></tr>
<tr><td>more-itertools</td><td>mpmath</td><td>msgpack</td><td>networkx</td></tr>
<tr><td>nlopt</td><td>nltk</td><td>nose</td><td>numcodecs</td></tr>
<tr><td>numpy</td><td>optlang</td><td>packaging</td><td>pandas</td></tr>
<tr><td>parso</td><td>patsy</td><td>pillow</td><td>pluggy</td></tr>
<tr><td>py</td><td>pyodide-interrupts</td><td>pyparsing</td><td>pyrtl</td></tr>
<tr><td>pytest</td><td>python-dateutil</td><td>python-sat</td><td>pytz</td></tr>
<tr><td>pywavelets</td><td>pyyaml</td><td>regex</td><td>retrying</td></tr>
<tr><td>scikit-image</td><td>scikit-learn</td><td>scipy</td><td>setuptools</td></tr>
<tr><td>six</td><td>soupsieve</td><td>statsmodels</td><td>swiglpk</td></tr>
<tr><td>sympy</td><td>toolz</td><td>traits</td><td>typing-extensions</td></tr>
<tr><td>uncertainties</td><td>webencodings</td><td>xlrd</td><td>yt</td></tr>
<tr><td>zarr</td><td>zlib</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</table>



<p><a name="k05"></a></p>
<h2 id="k05">5. PyScript se představuje</h2>

<p>Projekt <i>PyScript</i> je založen, jak jsme se již ostatně dozvěděli <a
href="#k04">v&nbsp;předchozí kapitole</a>, na projektu <i>Pyodide</i>, což
znamená, že ústředním prvkem celého projektu je klasický <a
href="https://en.wikipedia.org/wiki/CPython">CPython</a> (tedy referenční
implementace Pythonu) přeložený do bajtkódu WebAssembly a tedy spustitelný na
HTML stránkách. Navíc ovšem <i>PyScript</i> přidává i podporu pro nové HTML
značky, zejména <strong>&lt;py-script&gt;</strong> a
<strong>&lt;py-env&gt;</strong>, jenž umožňují snadný zápis skriptu a navíc i
specifikaci cest, modulů a knihoven, které budou na stránce použity. Autoři
<i>PyScriptu</i> navíc museli zajistit &bdquo;chytrou&ldquo; práci
s&nbsp;odsazeným kódem, což při kombinaci HTML (kde se na bílé znaky prakticky
nehledí) a Pythonu (kde mají bílé znaky syntaktický význam) není úplně
triviální. V&nbsp;navazujících kapitolách si na několika demonstračních
příkladech ukážeme, jakým způsobem je možné PyScript použít na HTML
stránkách</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zobrazení textu &bdquo;Hello, World!&ldquo; vypsaného Pythonem na webové stránce</h2>

<p>Podívejme se nyní na způsoby využití projektu PyScript. Samozřejmě začneme
klasickým příkladem <a
href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program">&bdquo;Hello,
World!&ldquo;</a> &ndash; necháme si tedy vypsat zprávu &bdquo;Hello,
World!&ldquo; na plochu HTML stránky Pythonem. Základem je párová značka
<strong>&lt;py-script&gt;</strong>, do níž se zapíše volání funkce
<strong>print</strong> Pythonu. Povšimněte si, že volání funkce může být
odsazeno, i když to ve standardním interpretru možné není:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        <strong>&lt;py-script&gt;</strong>
            <strong>print('Hello, World!')</strong>
        <strong>&lt;/py-script&gt;</strong>
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Tuto stránku nyní můžeme otevřít přímo ve webovém prohlížeči:</p>

*** image ***
<p><i>Obrázek 5: Inicializace stránky resp.&nbsp;skriptu na ní, trvá poměrně
dlouho &ndash; někdy až několik sekund. Ovšem poté jsou již data uložena
v&nbsp;cache, takže další spuštění již není tak pomalé.</i></p>

*** image ***
<p><i>Obrázek 6: Skript napsaný v&nbsp;Pythonu se skutečně spustil.</i></p>

*** image ***
<p><i>Obrázek 7: Mezitím se ovšem přeneslo zhruba 15MB dat! (v&nbsp;mém případě
jsou uložena do cache, ovšem stejně je musí prohlížeč načíst).</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Uložení skriptu do externího souboru, problematika načtení z&nbsp;lokálního souborového systému</h2>

<p>Kombinace HTML a Pythonu v&nbsp;jediném dokumentu není příliš čitelná ani
praktická, už jen z&nbsp;toho důvodu, že programátorské editory mohou mít
problémy s&nbsp;rozeznáním a zvýrazněním syntaxe. Pokusme se tedy vlastní kód
skriptu uložit do souboru <strong>hello.py</strong>, jehož obsah je vlastně
triviální:</p>

<pre>
print('Hello, World!')
</pre>

<p>HTML stránku upravíme takovým způsobem, že do značky
<strong>&lt;py-script&gt;</strong> pouze vložíme atribut <strong>src</strong>
s&nbsp;uvedením jména souboru:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        <strong>&lt;py-script src="hello.py"&gt;</strong>
        <strong>&lt;/py-script&gt;</strong>
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Což lze zkrátit spojením počáteční a koncové značky na:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        <strong>&lt;py-script src="hello.py" /&gt;</strong>
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Při pokusu o načtení takto upravené stránky však dostaneme jen chybové
hlášení:</p>

*** image ***
<p><i>Obrázek 8: Chybové hlášení na webové stránce po jejím přímém otevření
v&nbsp;prohlížeči.</i></p>

<p>Jedno z&nbsp;možných řešení tohoto problému si ukážeme v&nbsp;navazující
kapitole.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Využití vlastního HTTP serveru pro vývoj a ladění</h2>

<p>Proč se stránka s&nbsp;externím skriptem nenačetla bez chyby? Ve skutečnosti
se načte pouze daná stránka a pomocné skripty naprogramované
v&nbsp;JavaScriptu, ale nikoli již Pythonovský skript:</p>

*** image ***
<p><i>Obrázek 9: Příčina chyby.</i></p>

<p>Důvody pro toto chování jsou vysvětleny na stránce <a
href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/Errors/CORSRequestNotHttp">https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/Errors/CORSRequestNotHttp</a>.</p>

<p>Samozřejmě je možné změnit konfiguraci webového prohlížeče (buď při jeho
spuštění nebo natrvalo). Alternativně lze spustit jednoduchý webový server
v&nbsp;adresáři s&nbsp;naší &bdquo;webovou aplikací&ldquo;, což již webový
prohlížeč uspokojí:</p>

<pre>
$ <strong>python3 -m http.server 9000</strong>
&nbsp;
Serving HTTP on 0.0.0.0 port 9000 (http://0.0.0.0:9000/) ...
</pre>

<p>Dále otevřít stránku na adrese <strong>localhost:9000</strong>:</p>

*** image ***
<p><i>Obrázek 10: Soubory nabízené právě spuštěným webovým serverem.</i></p>

<p>A vybrat soubor <strong>hello2.html</strong>:</p>

<pre>
127.0.0.1 - - [18/Sep/2022 09:02:50] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [18/Sep/2022 09:02:59] "GET /hello2.html HTTP/1.1" 200 -
127.0.0.1 - - [18/Sep/2022 09:03:01] "GET /hello.py HTTP/1.1" 200 -
127.0.0.1 - - [18/Sep/2022 09:03:05] "GET /hello2.html HTTP/1.1" 304 -
</pre>

<p>S&nbsp;tímto výsledkem:</p>

*** image ***
<p><i>Obrázek 11: Nyní se již webová aplikace bez problémů spustí.</i></p>

<p>Jako poslední se skutečně načte náš skript <strong>hello.py</strong>:</p>

*** image ***
<p><i>Obrázek 12: Všechny načítané soubory.</i></p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;této chvíli si můžeme stáhnout <a
href="https://github.com/pyscript/pyscript/archive/refs/heads/main.zip">ZIP
archiv s&nbsp;celým PyScriptem</a>, rozbalit ho, změnit cesty na HTML stránce a
vše spouštět lokálně.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Programová smyčka zapsaná do webové stránky, &bdquo;chytré&ldquo; řešení problematiky odsazení</h2>

<p>Zkusme nyní do HTML stránky vložit programovou smyčku zapsanou
v&nbsp;Pythonu:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        <strong>&lt;py-script&gt;</strong>
            <strong>for i in range(1,11):</strong>
                <strong>print(i)</strong>
        <strong>&lt;/py-script&gt;</strong>
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Tato aplikace se v&nbsp;prohlížeči spustí bez problémů:</p>

*** image ***
<p><i>Obrázek 13: Jednoduchá webová aplikace s&nbsp;programovou smyčkou.</i></p>

<p>To je zajímavé, protože stejně odsazený kód není možné v&nbsp;běžném Pythonu
spustit, protože programový blok na nejvyšší úrovni nesmí být odsazen:</p>

<pre>
$ <strong>python3</strong>
&nbsp;
Python 3.8.10 (default, Jun 22 2022, 20:18:18) 
[GCC 9.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;             <strong>for i in range(1,11):</strong>
  File "&lt;stdin&gt;", line 1
    for i in range(1,11):
    ^
IndentationError: unexpected indent
&gt;&gt;&gt;                 <strong>print(i)</strong>
  File "&lt;stdin&gt;", line 1
    print(i)
    ^
IndentationError: unexpected indent
&gt;&gt;&gt; 
</pre>

<p><div class="rs-tip-major">Poznámka: můžeme zde vidět, že se PyScript snaží
programový kód zpracovávat inteligentně.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Smyčka v&nbsp;externím modulu</h2>

<p>Samozřejmě nám nic nebrání v&nbsp;tom, aby se vlastní programový kód oddělil
od HTML stránky do samostatného souboru:</p>

<pre>
def run():
    for i in range(1,11):
        print(i)
&nbsp;
run()
</pre>

<p>Samotný kód s&nbsp;HTML stránkou se tedy zjednoduší do této podoby:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        <strong>&lt;py-script src="loop.py"&gt;</strong>
        <strong>&lt;/py-script&gt;</strong>
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Popř.&nbsp;do této podoby:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        <strong>&lt;py-script src="loop.py" /&gt;</strong>
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;tomto případě opět musíme
aplikaci spustit přes webový server.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výpis informací funkcí <strong>print</strong></h2>

<p>Pokusme se nyní do HTML stránky vložit poněkud složitější kód. Konkrétně se
bude jednat o výpočet prvočísel ze zadaného rozsahu (zde konkrétně
v&nbsp;rozsahu od 2 do 100). Výsledek opět vypíšeme standardní Pythonovskou
funkcí <strong>print</strong> na plochu webové stránky:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;py-script&gt;
            <i># original code</i>
            <i># http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Using_array_lookup</i>
            def primes2(limit):
                is_prime = [False] * 2 + [True] * (limit - 1)
                for n in range(int(limit ** 0.5 + 1.5)):  # stop at ``sqrt(limit)``
                    if is_prime[n]:
                        for i in range(n * n, limit + 1, n):
                            is_prime[i] = False
                return [i for i, prime in enumerate(is_prime) if prime]
&nbsp;
&nbsp;
            print(primes2(100))
        &lt;/py-script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Výpočet sice dopadl korektně, ovšem způsob zobrazení výsledků asi není
příliš pěkný, o čemž se můžeme snadno přesvědčit:</p>

*** image ***
<p><i>Obrázek 14: Výsledek výpočtů provedených předchozím příkladem.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Zápis výsledků do vybraného elementu HTML stránky</h2>

<p>Výsledek činnosti nějakého výpočtu provedeného v&nbsp;Pythonu můžeme
v&nbsp;PyScriptu uložit do libovolné HTML značky, což je operace, která je
původně implementována funkcí <strong>pyscript.write</strong>, které se předá
jméno elementu a vlastní výsledek (což musí být řetězec). Na další HTML stránce
máme vytvořen odstavec s&nbsp;identifikátorem <strong>result</strong>, do
kterého všechna vypočtená prvočísla zapíšeme:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        <strong>&lt;div id="result" style="font-size:150%;color:#800000"&gt;</strong>
        &lt;/div&gt;
&nbsp;
        &lt;py-script&gt;
            # original code
            # http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Using_array_lookup
            def primes2(limit):
                is_prime = [False] * 2 + [True] * (limit - 1)
                for n in range(int(limit ** 0.5 + 1.5)):  # stop at ``sqrt(limit)``
                    if is_prime[n]:
                        for i in range(n * n, limit + 1, n):
                            is_prime[i] = False
                return [i for i, prime in enumerate(is_prime) if prime]
&nbsp;
&nbsp;
            primes = primes2(100)
            asStrings = map(str, primes)
            <strong>pyscript.write('result', ", ".join(asStrings))</strong>
        &lt;/py-script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>S&nbsp;tímto výsledkem:</p>

*** image ***
<p><i>Obrázek 15: Vypočtená prvočísla zapsaná do elementu <strong>result</strong>.</i></p>

<p>V&nbsp;nové verzi PyScriptu by se však měla pro stejnou operaci používat
metoda <strong>write</strong> pro objekt získaný konstruktorem
<strong>Element</strong>. Nyní se tedy preferuje tento styl zápisu:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="result" style="font-size:150%;color:#800000"&gt;
        &lt;/div&gt;
&nbsp;
        &lt;py-script&gt;
            # original code
            # http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Using_array_lookup
            def primes2(limit):
                is_prime = [False] * 2 + [True] * (limit - 1)
                for n in range(int(limit ** 0.5 + 1.5)):  # stop at ``sqrt(limit)``
                    if is_prime[n]:
                        for i in range(n * n, limit + 1, n):
                            is_prime[i] = False
                return [i for i, prime in enumerate(is_prime) if prime]
&nbsp;
&nbsp;
            primes = primes2(100)
            asStrings = map(str, primes)
            <strong>Element('result').write(", ".join(asStrings))</strong>
        &lt;/py-script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>A samozřejmě je možné samotný výpočet:</p>

<pre>
# original code
# http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Using_array_lookup
def primes2(limit):
    is_prime = [False] * 2 + [True] * (limit - 1)
    for n in range(int(limit ** 0.5 + 1.5)):  # stop at ``sqrt(limit)``
        if is_prime[n]:
            for i in range(n * n, limit + 1, n):
                is_prime[i] = False
    return [i for i, prime in enumerate(is_prime) if prime]
</pre>

<p>...zcela oddělit od HTML stránky. Nyní ovšem namísto atributu
<strong>src</strong> budeme specifikovat cestu ke skriptu ve značce
<strong>py-env</strong>, a to takto:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
<strong>&lt;py-env&gt;</strong>
        <strong>- paths:</strong>
          <strong>- ./primes.py</strong>
<strong>&lt;/py-env&gt;</strong>
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="result" style="font-size:150%;color:#800000"&gt;&lt;/div&gt;
&nbsp;
        &lt;py-script&gt;
            <strong>from primes import *</strong>
&nbsp;
            primes = primes2(100)
            asStrings = map(str, primes)
            Element('result').write(", ".join(asStrings))
        &lt;/py-script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si nutnost použít příkaz
<strong>import</strong>.</div></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Podpora knihovny NumPy v&nbsp;projektu PyScript</h2>

<p>V&nbsp;PyScriptu je možné využívat poměrně velké množství populárních
Pythonovských knihoven, mezi jinými i knihovnu <i>NumPy</i>. A to ve
skutečnosti není tak triviální podpora, jak by se mohlo na první pohled zdát,
protože knihovna NumPy kromě kódu v&nbsp;Pythonu obsahuje i množství nativního
kódu, který je nutné přeložit do bajtkódu WebAssembly. Pokud budeme chtít na
webové stránce provést nějaký výpočet založený na NumPy, je nejdříve (ideálně
v&nbsp;hlavičce) nutné uvést následující deklaraci, která zajistí načtení všech
potřebných souborů:</p>

<pre>
&lt;py-env&gt;
    - numpy
&lt;/py-env&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: do této značky se zapisuje konfigurace
ve formátu YAML, takže si zejména ve složitějších případech musíme dát pozor na
správné odsazení jednotlivých řádků.</div></p>

<p>Pro zajímavost se podívejme, jaké soubory se v&nbsp;tomto případě musí do
prostředí webového prohlížeče načíst:</p>

*** image ***
<p><i>Obrázek 17: Mezi dalšími soubory se načetla i knihovna NumPy přeložená do
WebAssembly.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Maticový součin realizovaný v&nbsp;knihovně NumPy</h2>

<p>Vyzkoušejme si nyní použití knihovny NumPy v&nbsp;praxi. V&nbsp;prvním
příkladu je realizován maticový součin, přičemž se zobrazí matice
v&nbsp;takovém formátu, jak je implicitně převedena na řetězec metodou
<strong>__str__</strong>.</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
&lt;py-env&gt;
    - numpy
&lt;/py-env&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="result" style="font-size:150%;color:#800000"&gt;&lt;/div&gt;
&nbsp;
        &lt;py-script&gt;
            import numpy as np
&nbsp;
            p = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
            q = [[3, 2, 1], [6, 5, 4], [3, 2, 1]]
&nbsp;
            result = np.dot(p, q)
&nbsp;
            Element('result').write(result)
        &lt;/py-script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

*** image ***
<p><i>Obrázek 18: Výpočet maticového součinu.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Zobrazení matice v&nbsp;čitelné podobě</h2>

<p>Matice, kterou jsme si ukázali na osmnáctém obrázku, není příliš čitelná (a
to se jedná o pole s&nbsp;pouhými dvěma dimenzemi). Pro čitelnější výstup lze
použít například funkci <a
href="https://numpy.org/doc/stable/reference/generated/numpy.array_str.html">numpy.array_str</a>
nabízenou přímo knihovnou NumPy. Tato funkce převede matici do podoby řetězce,
jenž můžeme předat metodě <strong>write</strong>:</p>

<pre>
Element('result').write(<strong>np.array_str(result)</strong>)
</pre>

<p>V&nbsp;takovém případě je ale nutné zajistit, že daný HTML element dokáže
správně interpretovat konce řádků. To platí pro element (značku)
<strong>pre</strong>, takže ji použijeme (s&nbsp;korektním ID):</p>

<pre>
&lt;pre id="result" style="font-size:150%;color:#800000"&gt;&lt;/pre&gt;
</pre>

<p>Výsledek:</p>

*** image ***
<p><i>Obrázek 19: Zobrazení obsahu matice (2D pole) v&nbsp;lidsky čitelné podobě.</i></p>

<p>Celý zdrojový kód takto upraveného příkladu vypadá následovně:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
&lt;py-env&gt;
    - numpy
&lt;/py-env&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;pre id="result" style="font-size:150%;color:#800000"&gt;&lt;/pre&gt;
&nbsp;
        &lt;py-script&gt;
            import numpy as np
&nbsp;
            p = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
            q = [[3, 2, 1], [6, 5, 4], [3, 2, 1]]
&nbsp;
            result = np.dot(p, q)
&nbsp;
            <strong>Element('result').write(np.array_str(result))</strong>
        &lt;/py-script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Zápis matic do většího množství HTML elementů</h2>

<p>Samozřejmě můžeme na plochu HTML stránky zobrazit větší počet výsledků
například obě matice, které se násobí, a pod nimi i výslednou matici. Nejdříve
si připravíme příslušné HTML značky (viz jejich ID):</p>

<pre>
&lt;h1&gt;p&lt;/h1&gt;
&lt;pre id="p" style="color:#000080"&gt;&lt;/pre&gt;
&nbsp;
&lt;h1&gt;q&lt;/h1&gt;
&lt;pre id="q" style="color:#000080"&gt;&lt;/pre&gt;
&nbsp;
&lt;h1&gt;result&lt;/h1&gt;
&lt;pre id="result" style="color:#800000"&gt;&lt;/pre&gt;
</pre>

<p>Zápis výsledků do všech tří značek (elementů) je v&nbsp;tomto případě
triviální:</p>

<pre>
Element('p').write(np.array_str(np.array(p)))
Element('q').write(np.array_str(np.array(q)))
Element('result').write(np.array_str(result))
</pre>

<p>S&nbsp;tímto výsledkem:</p>

*** image ***
<p><i>Obrázek 20: Obě matice, které se násobí a současně i výsledek maticového
součinu.</i></p>

<p>Celý zdrojový kód takto upraveného demonstračního příkladu vypadá
následovně:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
&lt;py-env&gt;
    - numpy
&lt;/py-env&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;p&lt;/h1&gt;
        &lt;pre id="p" style="color:#000080"&gt;&lt;/pre&gt;
&nbsp;
        &lt;h1&gt;q&lt;/h1&gt;
        &lt;pre id="q" style="color:#000080"&gt;&lt;/pre&gt;
&nbsp;
        &lt;h1&gt;result&lt;/h1&gt;
        &lt;pre id="result" style="color:#800000"&gt;&lt;/pre&gt;
&nbsp;
        &lt;py-script&gt;
            import numpy as np
&nbsp;
            p = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
            q = [[3, 2, 1], [6, 5, 4], [3, 2, 1]]
&nbsp;
            result = np.dot(p, q)
&nbsp;
            Element('p').write(np.array_str(np.array(p)))
            Element('q').write(np.array_str(np.array(q)))
            Element('result').write(np.array_str(result))
        &lt;/py-script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Zobrazení grafů vykreslených knihovnou Matplotlib přímo do plochy webové stránky</h2>

<p>Kromě knihovny NumPy je možné v&nbsp;PyScriptu využívat i mnohé další
knihovny. Jedná se zejména o známou knihovnu <i>Matplotlib</i>, o níž jsme se
zmínili například v&nbsp;článku <a
href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/">Tvorba
grafů v&nbsp;Jupyter Notebooku s využitím knihovny Matplotlib</a>. Aby bylo
možné tuto knihovnou skutečně použít, je nutné do značky
<strong>py-env</strong> přidat zvýrazněný řádek:</p>

<pre>
&lt;py-env&gt;
    - numpy
    <strong>- matplotlib</strong>
&lt;/py-env&gt;
</pre>

<p>Zajímavé je, že graf se nemusí vykreslit metodou <strong>plt.show()</strong>
(ta v&nbsp;tomto kontextu ani nefunguje). Ovšem postačuje, aby výsledkem
skriptu zapsaného do značky <strong>py-script</strong> byl graf Matplotlibu
&ndash; a ten je posléze automaticky vykreslen. Povšimněte si, že ve značce
<strong>py-script</strong> je skutečně posledním výrazem pouze
<strong>plt</strong>, což je objekt reprezentující graf, který chceme
vykreslit:</p>

<pre>
&lt;py-script&gt;
    import numpy as np
    import matplotlib.pyplot as plt
&nbsp;
    x = np.linspace(0, 2 * np.pi, 100)
&nbsp;
    y = np.sin(x)
&nbsp;
    plt.plot(x, y)
&nbsp;
    plt.xlabel("x")
    plt.ylabel("sin(x)")
&nbsp;
    plt
&lt;/py-script&gt;
</pre>

*** image ***
<p><i>Obrázek 21: Graf vykreslený přímo do plochy HTML stránky.</i></p>

<p><div class="rs-tip-major">Poznámka: někdy je situace poněkud složitější, což
si ukážeme příště.</div></p>

<p>Celý zdrojový kód popsaného demonstračního příkladu vypadá následovně:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
&lt;py-env&gt;
    - numpy
    - matplotlib
&lt;/py-env&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;py-script&gt;
            import numpy as np
            import matplotlib.pyplot as plt
&nbsp;
            x = np.linspace(0, 2 * np.pi, 100)
&nbsp;
            y = np.sin(x)
&nbsp;
            plt.plot(x, y)
&nbsp;
            plt.xlabel("x")
            plt.ylabel("sin(x)")
&nbsp;
            plt
        &lt;/py-script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Modifikace DOMu stránky z&nbsp;PyScriptu, reakce na události</h2>

<p>Prakticky všechny demonstrační příklady, které jsme si v&nbsp;dnešním článku
až doposud ukázali, komunikovaly s&nbsp;HTML stránkou (tedy s&nbsp;jejím DOMem
&ndash; objektovým modelem dokumentu) pouze nepřímo. Dokážeme zapsat výsledek
nějakého výpočtu do zvoleného prvku (HTML značky) a zobrazit graf vykreslený
Matplotlibem. Poněkud více interaktivity nabízí značka
<strong>&lt;py-repl&gt;</strong>, jejíž chování je však již dopředu
naprogramováno a nelze ho příliš modifikovat (alespoň ne v&nbsp;současných
verzích PyScriptu). V&nbsp;reálných front endových aplikacích je však
v&nbsp;naprosté většině případů nutné s&nbsp;DOMem stránky interagovat velmi
často, popř.&nbsp;musí skript reagovat na události, které vznikají při běhu
aplikace na webové stránce (kliknutí myší atd.). Jedná se o zajímavou
problematiku, které se budeme podrobněji věnovat v&nbsp;navazující části tohoto
článku.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
spuštění ve webovém prohlížeči s&nbsp;využitím nástroje PyScript byly uloženy
do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>hello1.html</td><td>program &bdquo;Hello, World&ldquo; vytvořený pro PyScript</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello1.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello1.html</a></td></tr>
<tr><td> 2</td><td>hello2.html</td><td>spuštění externího skriptu načteného přes <strong>src</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello2.html</a></td></tr>
<tr><td> 3</td><td>hello3.html</td><td>kratší zápis značky <strong>py-script</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello3.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello3.html</a></td></tr>
<tr><td> 4</td><td>hello.py</td><td>skript načtený předchozími dvěma příklady</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>loop1.html</td><td>smyčka v&nbsp;Pythonu zapsaná přímo do HTML stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop1.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop1.html</a></td></tr>
<tr><td> 6</td><td>loop2.html</td><td>spuštění externího skriptu načteného přes <strong>src</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop2.html</a></td></tr>
<tr><td> 7</td><td>loop3.html</td><td>kratší zápis značky <strong>py-script</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop3.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop3.html</a></td></tr>
<tr><td> 8</td><td>loop.py</td><td>skript načtený předchozími dvěma příklady</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>primes1.html</td><td>výpočet řady prvočísel s&nbsp;jejich zobrazením</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes1.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes1.html</a></td></tr>
<tr><td>10</td><td>primes2.html</td><td>výpočet řady prvočísel, zápis výsledku do vybraného elementu HTML stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes2.html</a></td></tr>
<tr><td>11</td><td>primes3.html</td><td>výpočet řady prvočísel, vylepšený zápis výsledku do vybraného elementu HTML stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes3.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes3.html</a></td></tr>
<tr><td>12</td><td>primes4.html</td><td>specifikace cesty k&nbsp;lokálnímu modulu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes4.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes4.html</a></td></tr>
<tr><td>13</td><td>primes.py</td><td>skript načtený předchozím příkladem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>14</td><td>numpy1.html</td><td>využití knihovny NumPy, zobrazení maticového součinu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/numpy1.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/numpy1.html</a></td></tr>
<tr><td>15</td><td>numpy2.html</td><td>využití knihovny NumPy, pretty printing matice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/numpy2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/numpy2.html</a></td></tr>
<tr><td>16</td><td>numpy3.html</td><td>využití knihovny NumPy, zobrazení většího množství matic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/numpy3.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/numpy3.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>matplotlib1.html</td><td>liniový graf vykreslený knihovnou Matplotlib</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/matplotlib1.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/matplotlib1.html</a></td></tr>
<tr><td>18</td><td>matplotlib2.html</td><td>konturový graf vykreslený knihovnou Matplotlib</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/matplotlib2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/matplotlib2.html</a></td></tr>
<tr><td>19</td><td>matplotlib3.html</td><td>trojrozměrný graf vykreslený knihovnou Matplotlib</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/matplotlib3.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/matplotlib3.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td>repl1.html</td><td>zobrazení REPLu na webové stránce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl1.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl1.html</a></td></tr>
<tr><td>21</td><td>repl2.html</td><td>zobrazení REPLu na webové stránce, předvyplnění zdrojového kódu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl2.html</a></td></tr>
<tr><td>22</td><td>repl3.html</td><td>zobrazení REPLu na webové stránce, využití kombinace NumPy + Matplotlib</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl3.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl3.html</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>PyScript<br />
<a href="https://pyscript.net/">https://pyscript.net/</a>
</li>

<li>PyScript na GitHubu<br />
<a href="https://github.com/pyscript/pyscript">https://github.com/pyscript/pyscript</a>
</li>

<li>Getting started with PyScript<br />
<a href="https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md">https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md</a>
</li>

<li>PyScript examples<br />
<a href="https://github.com/pyscript/pyscript/tree/main/examples">https://github.com/pyscript/pyscript/tree/main/examples</a>
</li>

<li>What is PyScript<br />
<a href="https://docs.pyscript.net/latest/concepts/what-is-pyscript.html">https://docs.pyscript.net/latest/concepts/what-is-pyscript.html</a>
</li>

<li>Pyodide<br />
<a href="https://pyodide.org/en/stable/">https://pyodide.org/en/stable/</a>
</li>

<li>Compiling to WebAssembly: It’s Happening!<br />
<a href="https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/">https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/</a>
</li>

<li>WebAssembly<br />
<a href="https://webassembly.org/">https://webassembly.org/</a>
</li>

<li>Blogy o WASM a Emscripten<br />
<a href="https://www.jamesfmackenzie.com/sitemap/#emscripten">https://www.jamesfmackenzie.com/sitemap/#emscripten</a>
</li>

<li>wat2wasm demo<br />
<a href="https://webassembly.github.io/wabt/demo/wat2wasm/">https://webassembly.github.io/wabt/demo/wat2wasm/</a>
</li>

<li>WABT: The WebAssembly Binary Toolkit<br />
<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>
</li>

<li>Programming using Web Assembly<br />
<a href="https://medium.com/@alexc73/programming-using-web-assembly-c4c73a4e09a9">https://medium.com/@alexc73/programming-using-web-assembly-c4c73a4e09a9</a>
</li>

<li>Experiments with image manipulation in WASM using Go<br />
<a href="https://agniva.me/wasm/2018/06/18/shimmer-wasm.html">https://agniva.me/wasm/2018/06/18/shimmer-wasm.html</a>
</li>

<li>Fable<br />
<a href="https://fable.io/">https://fable.io/</a>
</li>

<li>Využití WebAssembly z&nbsp;programovacího jazyka Go<br />
<a href="https://www.root.cz/clanky/vyuziti-webassembly-z-programovaciho-jazyka-go/">https://www.root.cz/clanky/vyuziti-webassembly-z-programovaciho-jazyka-go/</a>
</li>

<li>WebAssembly prošlo standardizací ve W3C, byla vydána verze 1.0<br />
<a href="https://www.root.cz/zpravicky/webassembly-proslo-standardizaci-ve-w3c-byla-vydana-verze-1-0/">https://www.root.cz/zpravicky/webassembly-proslo-standardizaci-ve-w3c-byla-vydana-verze-1-0/</a>
</li>

<li>WebAssembly na Wiki Golangu<br />
<a href="https://github.com/golang/go/wiki/WebAssembly">https://github.com/golang/go/wiki/WebAssembly</a>
</li>

<li>The future of WebAssembly – A look at upcoming features and proposals<br />
<a href="https://blog.scottlogic.com/2018/07/20/wasm-future.html">https://blog.scottlogic.com/2018/07/20/wasm-future.html</a>
</li>

<li>Writing WebAssembly By Hand<br />
<a href="https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html">https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html</a>
</li>

<li>WebAssembly Specification<br />
<a href="https://webassembly.github.io/spec/core/index.html">https://webassembly.github.io/spec/core/index.html</a>
</li>

<li>Index of Instructions<br />
<a href="https://webassembly.github.io/spec/core/appendix/in­dex-instructions.html">https://webassembly.github.io/spec/core/appendix/in­dex-instructions.html</a>
</li>

<li>The WebAssembly Binary Toolkit<br />
<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>
</li>

<li>Will WebAssembly replace JavaScript? Or Will WASM Make JavaScript More Valuable in Future?<br />
<a href="https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e">https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e</a>
</li>

<li>Roadmap (pro WebAssemly)<br />
<a href="https://webassembly.org/roadmap/">https://webassembly.org/roadmap/</a>
</li>

<li>S-expression<br />
<a href="https://en.wikipedia.org/wiki/S-expression">https://en.wikipedia.org/wiki/S-expression</a>
</li>

<li>Understanding WebAssembly text format<br />
<a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Under­standing_the_text_format">https://developer.mozilla.org/en-US/docs/WebAssembly/Under­standing_the_text_format</a>
</li>

<li>Learning Golang through WebAssembly – Part 1, Introduction and setup<br />
<a href="https://www.aaron-powell.com/posts/2019–02–04-golang-wasm-1-introduction/">https://www.aaron-powell.com/posts/2019–02–04-golang-wasm-1-introduction/</a>
</li>

<li>Learning Golang through WebAssembly – Part 2, Writing your first piece of Go<br />
<a href="https://www.aaron-powell.com/posts/2019–02–05-golang-wasm-2-writing-go/">https://www.aaron-powell.com/posts/2019–02–05-golang-wasm-2-writing-go/</a>
</li>

<li>Learning Golang through WebAssembly – Part 3, Interacting with JavaScript from Go<br />
<a href="https://www.aaron-powell.com/posts/2019–02–06-golang-wasm-3-interacting-with-js-from-go/">https://www.aaron-powell.com/posts/2019–02–06-golang-wasm-3-interacting-with-js-from-go/</a>
</li>

<li>Golang webassembly (wasm) testing with examples<br />
<a href="https://jelinden.fi/blog/golang-webassembly-wasm-testing-with-examples/qB7Tb2KmR">https://jelinden.fi/blog/golang-webassembly-wasm-testing-with-examples/qB7Tb2KmR</a>
</li>

<li>Use Cases (of WebAssembly)<br />
<a href="https://webassembly.org/docs/use-cases/">https://webassembly.org/docs/use-cases/</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

<li>How Brython works<br />
<a href="https://github.com/brython-dev/brython/wiki/How%20Brython%20works">https://github.com/brython-dev/brython/wiki/How%20Brython%20works</a>
</li>

<li>Brython &ndash; A Python 3 implementation for client-side web programming<br />
<a href="http://www.brython.info/">http://www.brython.info/</a>
</li>

<li>Brython videos and talks<br />
<a href="https://github.com/brython-dev/brython/wiki/Brython-videos-and-talks">https://github.com/brython-dev/brython/wiki/Brython-videos-and-talks</a>
</li>

<li>What is Brython?<br />
<a href="https://medium.com/frontendweb/what-is-brython-6edb424b07f6">https://medium.com/frontendweb/what-is-brython-6edb424b07f6</a>
</li>

<li>Python in browser (tabulka s&nbsp;porovnáními)<br />
<a href="http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html">http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html</a>
</li>

<li>JavaScript is Assembly Language for the Web: Sematic Markup is Dead! Clean vs. Machine-coded HTML<br />
<a href="http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx">http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx</a>
</li>

<li>pyscript VS brython<br />
<a href="https://www.libhunt.com/compare-pyscript-vs-brython">https://www.libhunt.com/compare-pyscript-vs-brython</a>
</li>

<li>PyScript - Run Python in the Browser! THE END of JavaScript???<br />
<a href="https://www.youtube.com/watch?v=du8vQC44PC4">https://www.youtube.com/watch?v=du8vQC44PC4</a>
</li>

<li>PyScript is Python in Your Browser<br />
<a href="https://www.youtube.com/watch?v=MJvCeKwr4z4">https://www.youtube.com/watch?v=MJvCeKwr4z4</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>Matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Galerie grafů vytvořených v&nbsp;Matplotlibu<br />
<a href="https://matplotlib.org/3.2.1/gallery/">https://matplotlib.org/3.2.1/gallery/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

