<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>MicroPython ve webovém prohlížeči: lehkotonážní varianta k PyScriptu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>MicroPython ve webovém prohlížeči: lehkotonážní varianta k PyScriptu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Projekt MicroPython máme většinou spojený s představou jednodušší varianty jazyka Python určené pro běh na různých mikrořadičích s omezeným výpočetním výkonem i malou kapacitou RAM. Ovšem ze stejných důvodů může být MicroPython použit ve webovém prohlížeči namísto JavaScriptu.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. MicroPython ve webovém prohlížeči: lehkotonážní varianta k&nbsp;PyScriptu</a></p>
<p><a href="#k02">*** 2. Python jako multioborový jazyk</a></p>
<p><a href="#k03">*** 3. Rekapitulace: Python ve funkci programovacího jazyka pro front end</a></p>
<p><a href="#k04">*** 4. Projekty PyScript a Pyodide</a></p>
<p><a href="#k05">*** 5. Problém projektu PyScript: velikost přenášených dat a pomalejší inicializace</a></p>
<p><a href="#k06">*** 6. Náhrada plnohodnotného CPythonu za MicroPython</a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. MicroPython ve webovém prohlížeči: lehkotonážní varianta k&nbsp;PyScriptu</h2>

<p>Jak již bylo napsáno v&nbsp;perexu dnešního článku máme většinou projekt <a href="https://micropython.org/">MicroPython</a> spojený s&nbsp;představou jednodušší varianty jazyka Python i jednodušší varianty jeho základních knihoven určené pro běh na různých mikrořadičích, které mají většinou velmi omezený výpočetní výkon a především pak relativně malou kapacitu operační paměti. Příkladem mohou být šestnáctibitové mikrořadice PIC (což je pravděpodobně spodní limit, kde je ještě MicroPython provozovatelný) nebo dnes oblíbený čip RP2040 s&nbsp;264 kilobajty RAM (což je z&nbsp;pohledu moderních PC vlastně &bdquo;nic&ldquo;). Ovšem z&nbsp;naprosto stejných důvodů, tj.&nbsp;kvůli své malé velikosti, může být MicroPython použit ve webovém prohlížeči namísto JavaScriptu (pochopitelně po svém překladu do formy umožňující spuštění v&nbsp;rámci webového prohlížeče). Právě spojením MicroPythonu s&nbsp;webovým prohlížečem se budeme zabývat v&nbsp;dnešním článku.</p>

*** image ***
<p><i>Obrázek 1: Logo projektu MicroPython.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Python jako multioborový jazyk</h2>

<p>Programovací jazyk Python se v&nbsp;současnosti používá v&nbsp;mnoha aplikačních oblastech &ndash; od jednoduchých skriptů umožňujících a zjednodušujících administraci systému přes složitější utility, desktopové aplikace (PyQt, PySide, wxPython, Tkinter, PyGObject či Wax) a webové služby až po zpracování dat, strojové učení (<i>ML &ndash; machine learning</i>) a umělou inteligenci (<i>AI &ndash; artificial intelligence</i>).</p>

<p>Dnes nás ovšem (a to nikoli na Rootu poprvé) bude zajímat především použití Pythonu při tvorbě webových služeb a webových aplikací. V&nbsp;této oblasti se Python používá především na <i>back endu</i>, tj.&nbsp;pro tu část webové služby/aplikace, která je provozována na serveru a nějakým způsobem komunikuje s&nbsp;ostatními komponentami vytvářeného systému: <i>front endem</i> (typicky webový prohlížeč s&nbsp;interpretrem JavaScriptu), databází a dalšími (mikro)službami, například s&nbsp;využitím message brokerů, systémů pro monitoring a správu událostí atd. Tato oblast samozřejmě není pokryta pouze Pythonem, ale najdeme zde i další programovací jazyky a technologie, zejména Javu (a celý její middleware), JavaScript či TypeScript (node.js) a dnes taktéž <a href="https://www.root.cz/serialy/programovaci-jazyk-go/">programovací jazyk Go</a> (i když není problém využít například i Rust či další jazyky).</p>

<p>Zatímco pozice Pythonu v&nbsp;oblasti back endu je poměrně zřejmá, je situace na front endu (tedy v&nbsp;současnosti na straně webového prohlížeče) mnohem složitější. Důvod je jednoduchý &ndash; v&nbsp;této oblasti z&nbsp;historických důvodů kraluje JavaScript, přičemž veškeré snahy a náhradu tohoto jazyka byly prozatím neúspěšné (pokusů bylo hned několik, připomeňme například browsery s&nbsp;<a href="https://www.root.cz/serialy/programovaci-jazyk-tcl/">TCL</a>, <a href="https://en.wikipedia.org/wiki/VBScript">VBScript</a> či projekt <a href="https://dart.dev/">Dart</a>). Ovšem stále se můžeme setkat se snahami JavaScript nepoužívat přímo, popř.&nbsp;ho obejít jinými nástroji. Příkladem mohou být technologie umožňující tvorbu webových aplikací podobným způsobem, jakoby se jednalo o aplikace desktopové. Příkladem tohoto přístupu mohou být projekty <a href="https://wiki.python.org/moin/Pyjamas">Pyjamas</a> (pro Python), <a href="http://www.gwtproject.org/">Google Web Toolkit (GWT)</a>, <a href="https://cordova.apache.org/">Apache Cordova</a> atd. (což jsou v&nbsp;současnosti většinou již nepodporované projekty).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Rekapitulace: Python ve funkci programovacího jazyka pro front end</h2>

<p>Je tedy vůbec možné a praktické použít Python přímo na webovém front endu a pokud to je možné, jakou za to zaplatíme cenu? Ve skutečnosti existuje hned několik projektů, které se více či méně úspěšným způsobem snaží o to, aby byl Python na front endu skutečně použitelný, a to i pro reálně provozované aplikace. Mezi tyto projekty patří například:</p>

<ol>

<li><i>Brython</i>, což je transpřekladač z&nbsp;Pythonu do JavaScriptu, přičemž samotný překlad (resp.&nbsp;přesněji řečeno transpřeklad) probíhá na pozadí, což znamená, že přímo v&nbsp;kódu webové stránky je umístěn (či načítán) kód v&nbsp;Pythonu. Podobné řešení jsme již viděli, například u projektu <a href="https://github.com/Gozala/wisp">Wisp</a> (jazyk podobný Clojure) či <a href="https://github.com/mherkender/lua.js">lua.js</a> (transpřeklad z&nbsp;jazyka Lua). Výhodou Brythonu je, že se jakékoli úpravy ihned projeví v&nbsp;aplikaci po znovunačtení stránky (F5), nevýhodou celková pomalost inicializace webové aplikace.</li>

<li><i>Transcrypt</i> je taktéž transpřekladačem Pythonu (konkrétně Pythonu 3) do JavaScriptu. Samotný transpřeklad je napsaný velmi dobře &ndash; zhruba platí, že velikost vygenerovaného kódu v&nbsp;JavaScriptu odpovídá velikosti původního kódu napsaného v&nbsp;Pythonu (případné zvětšení je o jednotky procent). Musíme však počítat s&nbsp;tím, že je nutné načíst i jádro Transcriptu, jehož velikost je přibližně 20 kB (tedy čím větší je kód samotné aplikace, tím (poměrově) menší budou režijní náklady. Zajímavá a užitečná je i podpora <i>type hintů</i> (informací o datovém typu parametrů, proměnných atd.)</li>

<li>Podobným způsobem pracuje i projekt nazvaný <i>pyjaco</i>, který naleznete na adrese <a href="https://github.com/chrivers/pyjaco">https://github.com/chrivers/pyjaco</a>.</li>

<li><i>Skulpt</i> je naproti tomu v&nbsp;mnoha ohledech podobný projektu <i>Brython</i>, protože taktéž umožňuje provádět transpřeklad na pozadí (programátor tedy pracuje pouze se zdrojovým kódem vytvořeným v&nbsp;Pythonu).</li>

<li>Velmi zajímavým nástrojem, který názorně ukazuje, jak vlastně transpřeklad funguje (a že jeho výsledek může být čitelný), je nástroj s&nbsp;poněkud zvláštním jménem <i>fiddlesalad</i>, který naleznete na adrese <a href="http://fiddlesalad.com/python/">http://fiddlesalad.com/python/</a>. Tento nástroj umožňuje zápis zdrojového kódu v&nbsp;Pythonu, který je ihned (již v&nbsp;době zápisu) transpřekládán do JavaScriptu a současně i spouštěn.</li>

</ol>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že všechny projekty zmíněné v&nbsp;předchozím textu jsou ve skutečnosti <i>transpřekladači</i> neboli <i>transpilery</i>. Jedná se o technologii zajišťující, aby se i ve webovém prohlížeči mohlo (nepřímo) pracovat s&nbsp;dalšími programovacími jazyky, nejenom se všudypřítomným a nativně podporovaným JavaScriptem. Další variantou je interpretace s&nbsp;využitím interpretru psaného v&nbsp;JavaScriptu popř.&nbsp;použití WebAssembly (viz též navazující kapitoly).</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Projekty PyScript a Pyodide</h2>

<p>Nástroj <i>PyScript</i> není, na rozdíl od výše zmíněných projektů, založen na transpřekladači. Je primárně postaven na projektu nazvaném <a href="https://github.com/pyodide/pyodide">Pyodide</a>. Jedná se v&nbsp;prvé řadě o upravený překlad celého standardního Pythonu (konkrétně Pythonu, resp.&nbsp;přesněji řečeno CPythonu 3.9), ovšem nikoli do nativního kódu spustitelného přímo z&nbsp;příkazové řádky, ale do bajtkódu <i>WebAssembly</i>.  To mj.&nbsp;znamená, že interpret Pythonu, resp.&nbsp;přesněji řečeno programů napsaných pro Python, lze spustit přímo z&nbsp;webového prohlížeče, a to dokonce bez nutnosti mít Python lokálně nainstalovaný &ndash; musíme mít pouze k&nbsp;dispozici vhodný webový server (pro jednoduché projekty dokonce ani to ne &ndash; stačí lokálně uložené soubory, pokud je ovšem nastaven webový prohlížeč tak, aby dokázal načítat skripty atd.&nbsp;z&nbsp;lokálních souborů), stránky na <a href="https://pages.github.com/">github.io</a> atd.</p>

<p>Kromě toho je součástí projektu <i>Pyodide</i> i poměrně velké množství důležitých balíčků používaných ve vědeckotechnických výpočtech, pro zpracování numerických dat, ve statistických výpočtech, v&nbsp;oblasti strojového učení atd. Primárně se jedná o balíčky <i>NumPy</i>, <i>Pandas</i>, <i>Matplotlib</i>, <i>SciPy</i> a taktéž <i>scikit-learn</i>. S&nbsp;mnohými z&nbsp;nich jsme se ostatně na stránkách Roota již setkali a NumPy a Matplotlib dnes dokonce použijeme v&nbsp;některých demonstračních příkladech. Seznam všech balíčků použitých v&nbsp;aktuální verzi <i>Pyodide</i> nalezneme na adrese <a href="https://github.com/pyodide/pyodide/tree/main/packages">https://github.com/pyodide/pyodide/tree/main/packages</a>.</p>

<p>PyScript, jenž je na Pyodide založen, navíc přidává i podporu pro nové HTML značky, zejména <strong>&lt;py-script&gt;</strong> a <strong>&lt;py-env&gt;</strong>, jenž umožňují snadný zápis skriptu a navíc i specifikaci cest, modulů a knihoven, které budou na stránce použity. Autoři <i>PyScriptu</i> navíc museli zajistit &bdquo;chytrou&ldquo; práci s&nbsp;odsazeným kódem, což při kombinaci HTML (kde se na bílé znaky prakticky nehledí) a Pythonu (kde mají bílé znaky syntaktický význam) není úplně triviální.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Problém projektu PyScript: velikost přenášených dat a pomalejší inicializace</h2>

<p>Podívejme se nyní na klasický příklad typu <a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program">&bdquo;Hello, World!&ldquo;</a> &ndash; necháme si tedy vypsat zprávu &bdquo;Hello, World!&ldquo; na plochu HTML stránky Pythonem. Základem je párová značka <strong>&lt;py-script&gt;</strong>, do níž se zapíše volání funkce <strong>print</strong> Pythonu. Povšimněte si, že volání funkce může být odsazeno, i když to ve standardním interpretru možné není:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        <strong>&lt;py-script&gt;</strong>
            <strong>print('Hello, World!')</strong>
        <strong>&lt;/py-script&gt;</strong>
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Tuto stránku nyní můžeme otevřít přímo ve webovém prohlížeči. Nebude nás zajímat jen funkcionalita, ale i to, kolik dat se ve skutečnosti musí do webového prohlížeče přenést:</p>

<a href="https://www.root.cz/obrazek/662193/"><img src="https://i.iinfo.cz/images/432/pyscript1-1-prev.png" class="image-662193" data-prev-filename="https://i.iinfo.cz/images/432/pyscript1-1-prev.png" data-prev-width="370" data-prev-height="190" data-large-filename="https://i.iinfo.cz/images/432/pyscript1-1-large.png" data-large-width="720" data-large-height="369" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="190" /></a>
<p><i>Obrázek 2: Inicializace stránky resp.&nbsp;skriptu na ní, trvá poměrně dlouho &ndash; někdy až několik sekund. Ovšem poté jsou již data uložena v&nbsp;cache, takže další spuštění již není tak pomalé.</i></p>

<a href="https://www.root.cz/obrazek/662194/"><img src="https://i.iinfo.cz/images/432/pyscript1-2-prev.png" class="image-662194" data-prev-filename="https://i.iinfo.cz/images/432/pyscript1-2-prev.png" data-prev-width="370" data-prev-height="98" data-large-filename="https://i.iinfo.cz/images/432/pyscript1-2-large.png" data-large-width="720" data-large-height="191" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="98" /></a>
<p><i>Obrázek 3: Skript napsaný v&nbsp;Pythonu se skutečně spustil.</i></p>

<p>Nás však bude zajímat, jaké soubory vlastně musela výše uvedená HTML stránka stáhnout do webového prohlížeče, aby bylo vůbec umožněno spuštění onoho jediného řádku <strong>print('Hello, World!')</strong>. Informace o tom, jak velké soubory a jak rychle byly staženy, nám podá samotný webový prohlížeč. V&nbsp;případě Firefoxu jsou tyto informace dostupné ve <i>Web Developer Tools</i> vyvolatelném buď z&nbsp;menu nebo pomocí klávesové zkratky <strong>Ctrl+Shift+I</strong>. Takto vypadají informace o tom, jak velké soubory musely být staženy i pro naši jednoduchou HTML stránku s&nbsp;jediným příkazem zapsaným v&nbsp;Pythonu:</p>

<a href="https://www.root.cz/obrazek/662195/"><img src="https://i.iinfo.cz/images/432/pyscript1-3-prev.png" class="image-662195" data-prev-filename="https://i.iinfo.cz/images/432/pyscript1-3-prev.png" data-prev-width="370" data-prev-height="126" data-large-filename="https://i.iinfo.cz/images/432/pyscript1-3-large.png" data-large-width="720" data-large-height="245" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="126" /></a>
<p><i>Obrázek 4: V&nbsp;rámci inicializace naší webové stránky se skriptem napsaným v&nbsp;Pythonu se přeneslo zhruba 15MB dat! (v&nbsp;mém případě jsou uložena do cache, ovšem stejně je musí prohlížeč načíst).</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Náhrada plnohodnotného CPythonu za MicroPython</h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
spuštění ve webovém prohlížeči s&nbsp;využitím MicroPythonu byly uloženy do Git
repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/">https://github.com/tisnik/most-popular-python-libs/blob/master/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>PyScript<br />
<a href="https://pyscript.net/">https://pyscript.net/</a>
</li>

<li>PyScript na GitHubu<br />
<a href="https://github.com/pyscript/pyscript">https://github.com/pyscript/pyscript</a>
</li>

<li>Getting started with PyScript<br />
<a href="https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md">https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md</a>
</li>

<li>PyScript examples<br />
<a href="https://github.com/pyscript/pyscript/tree/main/examples">https://github.com/pyscript/pyscript/tree/main/examples</a>
</li>

<li>What is PyScript<br />
<a href="https://docs.pyscript.net/latest/concepts/what-is-pyscript.html">https://docs.pyscript.net/latest/concepts/what-is-pyscript.html</a>
</li>

<li>Pyodide<br />
<a href="https://pyodide.org/en/stable/">https://pyodide.org/en/stable/</a>
</li>

<li>PyScript: JavaScript and Python Interoperability<br />
<a href="https://www.jhanley.com/blog/pyscript-javascript-and-python-interoperability/">https://www.jhanley.com/blog/pyscript-javascript-and-python-interoperability/</a>
</li>

<li>Pyscript: JavaScript Event Callbacks<br />
<a href="https://www.jhanley.com/blog/pyscript-javascript-callbacks/">https://www.jhanley.com/blog/pyscript-javascript-callbacks/</a>
</li>

<li>Compiling to WebAssembly: It’s Happening!<br />
<a href="https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/">https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/</a>
</li>

<li>WebAssembly<br />
<a href="https://webassembly.org/">https://webassembly.org/</a>
</li>

<li>Blogy o WASM a Emscripten<br />
<a href="https://www.jamesfmackenzie.com/sitemap/#emscripten">https://www.jamesfmackenzie.com/sitemap/#emscripten</a>
</li>

<li>wat2wasm demo<br />
<a href="https://webassembly.github.io/wabt/demo/wat2wasm/">https://webassembly.github.io/wabt/demo/wat2wasm/</a>
</li>

<li>WABT: The WebAssembly Binary Toolkit<br />
<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>
</li>

<li>Programming using Web Assembly<br />
<a href="https://medium.com/@alexc73/programming-using-web-assembly-c4c73a4e09a9">https://medium.com/@alexc73/programming-using-web-assembly-c4c73a4e09a9</a>
</li>

<li>Experiments with image manipulation in WASM using Go<br />
<a href="https://agniva.me/wasm/2018/06/18/shimmer-wasm.html">https://agniva.me/wasm/2018/06/18/shimmer-wasm.html</a>
</li>

<li>Fable<br />
<a href="https://fable.io/">https://fable.io/</a>
</li>

<li>Využití WebAssembly z&nbsp;programovacího jazyka Go<br />
<a href="https://www.root.cz/clanky/vyuziti-webassembly-z-programovaciho-jazyka-go/">https://www.root.cz/clanky/vyuziti-webassembly-z-programovaciho-jazyka-go/</a>
</li>

<li>WebAssembly prošlo standardizací ve W3C, byla vydána verze 1.0<br />
<a href="https://www.root.cz/zpravicky/webassembly-proslo-standardizaci-ve-w3c-byla-vydana-verze-1-0/">https://www.root.cz/zpravicky/webassembly-proslo-standardizaci-ve-w3c-byla-vydana-verze-1-0/</a>
</li>

<li>WebAssembly na Wiki Golangu<br />
<a href="https://github.com/golang/go/wiki/WebAssembly">https://github.com/golang/go/wiki/WebAssembly</a>
</li>

<li>The future of WebAssembly – A look at upcoming features and proposals<br />
<a href="https://blog.scottlogic.com/2018/07/20/wasm-future.html">https://blog.scottlogic.com/2018/07/20/wasm-future.html</a>
</li>

<li>Writing WebAssembly By Hand<br />
<a href="https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html">https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html</a>
</li>

<li>WebAssembly Specification<br />
<a href="https://webassembly.github.io/spec/core/index.html">https://webassembly.github.io/spec/core/index.html</a>
</li>

<li>Index of Instructions<br />
<a href="https://webassembly.github.io/spec/core/appendix/in­dex-instructions.html">https://webassembly.github.io/spec/core/appendix/in­dex-instructions.html</a>
</li>

<li>The WebAssembly Binary Toolkit<br />
<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>
</li>

<li>Will WebAssembly replace JavaScript? Or Will WASM Make JavaScript More Valuable in Future?<br />
<a href="https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e">https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e</a>
</li>

<li>Roadmap (pro WebAssemly)<br />
<a href="https://webassembly.org/roadmap/">https://webassembly.org/roadmap/</a>
</li>

<li>S-expression<br />
<a href="https://en.wikipedia.org/wiki/S-expression">https://en.wikipedia.org/wiki/S-expression</a>
</li>

<li>Understanding WebAssembly text format<br />
<a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Under­standing_the_text_format">https://developer.mozilla.org/en-US/docs/WebAssembly/Under­standing_the_text_format</a>
</li>

<li>Learning Golang through WebAssembly – Part 1, Introduction and setup<br />
<a href="https://www.aaron-powell.com/posts/2019–02–04-golang-wasm-1-introduction/">https://www.aaron-powell.com/posts/2019–02–04-golang-wasm-1-introduction/</a>
</li>

<li>Learning Golang through WebAssembly – Part 2, Writing your first piece of Go<br />
<a href="https://www.aaron-powell.com/posts/2019–02–05-golang-wasm-2-writing-go/">https://www.aaron-powell.com/posts/2019–02–05-golang-wasm-2-writing-go/</a>
</li>

<li>Learning Golang through WebAssembly – Part 3, Interacting with JavaScript from Go<br />
<a href="https://www.aaron-powell.com/posts/2019–02–06-golang-wasm-3-interacting-with-js-from-go/">https://www.aaron-powell.com/posts/2019–02–06-golang-wasm-3-interacting-with-js-from-go/</a>
</li>

<li>Golang webassembly (wasm) testing with examples<br />
<a href="https://jelinden.fi/blog/golang-webassembly-wasm-testing-with-examples/qB7Tb2KmR">https://jelinden.fi/blog/golang-webassembly-wasm-testing-with-examples/qB7Tb2KmR</a>
</li>

<li>Use Cases (of WebAssembly)<br />
<a href="https://webassembly.org/docs/use-cases/">https://webassembly.org/docs/use-cases/</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

<li>How Brython works<br />
<a href="https://github.com/brython-dev/brython/wiki/How%20Brython%20works">https://github.com/brython-dev/brython/wiki/How%20Brython%20works</a>
</li>

<li>Brython &ndash; A Python 3 implementation for client-side web programming<br />
<a href="http://www.brython.info/">http://www.brython.info/</a>
</li>

<li>Brython videos and talks<br />
<a href="https://github.com/brython-dev/brython/wiki/Brython-videos-and-talks">https://github.com/brython-dev/brython/wiki/Brython-videos-and-talks</a>
</li>

<li>What is Brython?<br />
<a href="https://medium.com/frontendweb/what-is-brython-6edb424b07f6">https://medium.com/frontendweb/what-is-brython-6edb424b07f6</a>
</li>

<li>Python in browser (tabulka s&nbsp;porovnáními)<br />
<a href="http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html">http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html</a>
</li>

<li>JavaScript is Assembly Language for the Web: Sematic Markup is Dead! Clean vs. Machine-coded HTML<br />
<a href="http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx">http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx</a>
</li>

<li>pyscript VS brython<br />
<a href="https://www.libhunt.com/compare-pyscript-vs-brython">https://www.libhunt.com/compare-pyscript-vs-brython</a>
</li>

<li>PyScript - Run Python in the Browser! THE END of JavaScript???<br />
<a href="https://www.youtube.com/watch?v=du8vQC44PC4">https://www.youtube.com/watch?v=du8vQC44PC4</a>
</li>

<li>PyScript is Python in Your Browser<br />
<a href="https://www.youtube.com/watch?v=MJvCeKwr4z4">https://www.youtube.com/watch?v=MJvCeKwr4z4</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Replacing Javascript with Python<br />
<a href="https://stackoverflow.com/questions/69510962/replacing-javascript-with-python">https://stackoverflow.com/questions/69510962/replacing-javascript-with-python</a>
</li>

<li>Can Python Replace Javascript in the Future?<br />
<a href="https://dev.to/katholder/can-python-replace-javascript-in-the-future-4bbn">https://dev.to/katholder/can-python-replace-javascript-in-the-future-4bbn</a>
</li>

<li>asm.js<br />
<a href="http://asmjs.org/">http://asmjs.org/</a>
</li>

<li>asm.js: Working Draft<br />
<a href="http://asmjs.org/spec/latest/">http://asmjs.org/spec/latest/</a>
</li>

<li>Manual asm.js Demonstration<br />
<a href="https://www.youtube.com/watch?v=qkiqMuf5M84">https://www.youtube.com/watch?v=qkiqMuf5M84</a>
</li>

<li>asm.js - frequently asked questions<br />
<a href="http://asmjs.org/faq.html">http://asmjs.org/faq.html</a>
</li>

<li>When asm.js is faster than normal JS code, why should I write new code in JS?<br />
<a href="https://stackoverflow.com/questions/16527195/when-asm-js-is-faster-than-normal-js-code-why-should-i-write-new-code-in-js">https://stackoverflow.com/questions/16527195/when-asm-js-is-faster-than-normal-js-code-why-should-i-write-new-code-in-js</a>
</li>

<li>Faster Canvas Pixel Manipulation with Typed Arrays<br />
<a href="https://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/">https://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

