<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>MicroPython ve webovém prohlížeči: lehkotonážní varianta k Pyodide</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>MicroPython ve webovém prohlížeči: lehkotonážní varianta k Pyodide</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Projekt MicroPython máme většinou spojený s představou jednodušší varianty jazyka Python určené pro běh na různých mikrořadičích s omezeným výpočetním výkonem i malou kapacitou RAM. Ovšem ze stejných důvodů může být MicroPython použit ve webovém prohlížeči namísto JavaScriptu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. MicroPython ve webovém prohlížeči: lehkotonážní varianta k&nbsp;Pyodide</a></p>
<p><a href="#k02">2. Python jako multioborový programovací jazyk</a></p>
<p><a href="#k03">3. Rekapitulace: Python ve funkci programovacího jazyka pro front end</a></p>
<p><a href="#k04">4. Projekty PyScript a Pyodide</a></p>
<p><a href="#k05">5. Problém projektu Pyodide: velikost přenášených dat a pomalejší inicializace</a></p>
<p><a href="#k06">6. Náhrada plnohodnotného CPythonu za MicroPython</a></p>
<p><a href="#k07">7. Webová varianta programu typu &bdquo;Hello, world!&ldquo;</a></p>
<p><a href="#k08">8. Získání všech potřebných souborů</a></p>
<p><a href="#k09">9. Spuštění webového serveru a průběh načtení stránky do webového prohlížeče</a></p>
<p><a href="#k10">10. Co se děje pod kapotou?</a></p>
<p><a href="#k11">11. Sledování inicializace interpretru Pythonu v&nbsp;konzoli</a></p>
<p><a href="#k12">12. Uložení skriptu do externího souboru</a></p>
<p><a href="#k13">13. Oficiální podpora MicroPythonu v&nbsp;projektu PyScript</a></p>
<p><a href="#k14">14. Hello world! ve variantě pro PyScript a Pyodide</a></p>
<p><a href="#k15">15. Soubory, které webová stránka vyžaduje</a></p>
<p><a href="#k16">16. Úprava pro použití MicroPythonu</a></p>
<p><a href="#k17">17. Soubory, které upravená webová stránka vyžaduje</a></p>
<p><a href="#k18">18. Závěrem</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. MicroPython ve webovém prohlížeči: lehkotonážní varianta k&nbsp;Pyodide</h2>

<p>Jak již bylo napsáno v&nbsp;perexu dnešního článku, mají vývojáři projekt <a
href="https://micropython.org/">MicroPython</a> většinou spojený
s&nbsp;představou jednodušší varianty programovacího jazyka Python i jednodušší
varianty jeho základních knihoven určené pro běh na různých mikrořadičích,
které mají většinou velmi omezený výpočetní výkon a především pak relativně
malou kapacitu operační paměti. Příkladem mohou být šestnáctibitové mikrořadice
PIC (což je pravděpodobně spodní limit, kde je ještě MicroPython rozumně
provozovatelný) nebo dnes oblíbený čip <i>RP2040</i> s&nbsp;264 kilobajty RAM
(což je z&nbsp;pohledu moderních PC vlastně &bdquo;úplné nic&ldquo;). Ovšem
z&nbsp;naprosto stejných důvodů, tj.&nbsp;kvůli své malé velikosti, může být
MicroPython použit ve webovém prohlížeči namísto JavaScriptu (pochopitelně po
svém překladu do formy umožňující spuštění v&nbsp;rámci webového prohlížeče
&ndash; zde je IT svět velmi omezený a máme jen velmi málo voleb). Právě
spojením MicroPythonu s&nbsp;webovým prohlížečem se budeme zabývat
v&nbsp;dnešním článku.</p>

<p><img src="https://i.iinfo.cz/images/586/micropython-logo.webp" class="image-1114645" width="400" height="128" alt="&#160;" title="Autor: MicroPython project, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></p>
<p><i>Obrázek 1: Logo projektu MicroPython.</i></p>

<p>Pro zajímavost se podívejme na nároky Pythonu na mikrořadiči RP2040 ihned po
bootu, spuštění interpretru a připojením k&nbsp;interpretru přes emulovanou
sériovou linku:</p>

<pre>
&gt;&gt;&gt; import micropython
&nbsp;
&gt;&gt;&gt; micropython.mem_info()
&nbsp;
stack: 492 out of 7936
GC: total: 233472, used: 4592, free: 228880
 No. of 1-blocks: 55, 2-blocks: 13, max blk sz: 64, max free sz: 14292
&nbsp;
&gt;&gt;&gt; micropython.mem_info(True)
&nbsp;
stack: 500 out of 7936
GC: total: 233472, used: 4784, free: 228688
 No. of 1-blocks: 60, 2-blocks: 15, max blk sz: 64, max free sz: 14282
GC memory layout; from 20007000:
00000000: h=MLhhhBDhhBTTBDhTBDBDBh===BTB=hh====B=BBBBBTB=BTB=BBBTB=TBTB=Bh
00000400: ===DB=h===========h===================BBBh==h=hh========h=======
00000800: ==========h=====================================================
00000c00: ==========h=====================================================
00001000: ==========h=h=hBh=hhhhBh=hhh=hhhB..hh....h==.....h=h==..........
       (223 lines all free)
</pre>



<p><a name="k02"></a></p>
<h2 id="k02">2. Python jako multioborový programovací jazyk</h2>

<p>Programovací jazyk Python se v&nbsp;současnosti používá v&nbsp;mnoha
aplikačních oblastech. Jeho využití začíná od jednoduchých skriptů umožňujících
a zjednodušujících administraci systému přes složitější utility, desktopové
aplikace (zde lze grafické uživatelské rozhraní založit na knihovnách PyQt,
PySide, wxPython, Tkinter, PyGObject, PySimpleGUI či Wax) a webové služby až po
zpracování dat, strojové učení (<i>ML &ndash; machine learning</i>) a umělou
inteligenci (<i>AI &ndash; artificial intelligence</i>).</p>

<p>Dnes nás ovšem (a to nikoli na Rootu poprvé) bude zajímat především použití
Pythonu při tvorbě webových služeb a webových aplikací. V&nbsp;této oblasti se
Python pochopitelně používá především na <i>back endu</i>, tj.&nbsp;pro tu část
webové služby/aplikace, která je provozována na serveru a nějakým způsobem
komunikuje s&nbsp;ostatními komponentami vytvářeného systému: <i>front
endem</i> (typicky webový prohlížeč s&nbsp;interpretrem JavaScriptu), databází
a dalšími (mikro)službami, například s&nbsp;využitím message brokerů, systémů
pro monitoring a správu událostí atd. Tato oblast samozřejmě není pokryta pouze
Pythonem, ale najdeme zde i další programovací jazyky a technologie, zejména
Javu (a celý její middleware), JavaScript či TypeScript (node.js) a dnes taktéž
<a href="https://www.root.cz/serialy/programovaci-jazyk-go/">programovací jazyk
Go</a> (i když není problém využít například i Rust či mnohé další programovací
jazyky).</p>

<p>Zatímco pozice Pythonu v&nbsp;oblasti back endu je poměrně zřejmá a
relativně silná, je situace na front endu (tedy v&nbsp;současnosti na straně
webového prohlížeče) mnohem složitější. Důvod je jednoduchý &ndash; v&nbsp;této
oblasti totiž z&nbsp;historických důvodů kraluje JavaScript, přičemž veškeré
snahy a náhradu tohoto programovacího jazyka byly prozatím neúspěšné (pokusů
bylo hned několik, připomeňme například browsery s&nbsp;<a
href="https://www.root.cz/serialy/programovaci-jazyk-tcl/">TCL</a>, <a
href="https://en.wikipedia.org/wiki/VBScript">VBScript</a> či projekt <a
href="https://dart.dev/">Dart</a>). Ovšem stále se můžeme setkat se snahami
JavaScript nepoužívat přímo, popř.&nbsp;ho obejít jinými nástroji. Příkladem
mohou být technologie umožňující tvorbu webových aplikací podobným způsobem,
jakoby se jednalo o aplikace desktopové. Příkladem tohoto přístupu mohou být
projekty <a href="https://wiki.python.org/moin/Pyjamas">Pyjamas</a> (pro
Python), <a href="http://www.gwtproject.org/">Google Web Toolkit (GWT)</a>, <a
href="https://cordova.apache.org/">Apache Cordova</a> atd. (což jsou
v&nbsp;současnosti většinou již nepodporované projekty).</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Rekapitulace: Python ve funkci programovacího jazyka pro front end</h2>

<p>Je tedy vůbec možné a praktické použít programovací jazyk Python přímo na
webovém front endu? A pokud to je možné, jakou za to zaplatíme cenu? Ve
skutečnosti v&nbsp;současnosti existuje hned několik projektů, které se více či
méně úspěšným způsobem snaží o to, aby byl Python na front endu skutečně
použitelný, a to i pro reálně provozované aplikace. Mezi tyto projekty patří
například:</p>

<ol>

<li><i>Brython</i>, což je transpřekladač (<i>transpiler</i>) z&nbsp;Pythonu do
JavaScriptu, přičemž samotný překlad (resp.&nbsp;přesněji řečeno transpřeklad)
probíhá na pozadí, což znamená, že přímo v&nbsp;kódu webové stránky je umístěn
(či načítán) kód v&nbsp;Pythonu. Podobné řešení jsme již viděli dříve,
například u projektu <a href="https://github.com/Gozala/wisp">Wisp</a> (což je
programovací jazyk podobný Clojure) či <a
href="https://github.com/mherkender/lua.js">lua.js</a> (transpřeklad
z&nbsp;jazyka Lua). Výhodou Brythonu je, že se jakékoli úpravy ihned projeví
v&nbsp;aplikaci po znovunačtení stránky (tedy například po stisku klávesy
<strong>F5</strong>), nevýhodou celková pomalost inicializace webové aplikace.
Tento nástroj jsme si ve stručnosti popsali v&nbsp;článku <a
href="https://www.root.cz/clanky/brython-aneb-pouziti-jazyka-python-ve-skriptech-primo-v-prohlizeci/">Brython
aneb použití jazyka Python ve skriptech přímo v&nbsp;prohlížeči</a>.</li>

<li><i>Transcrypt</i> je taktéž transpřekladačem Pythonu (konkrétně Pythonu 3)
do JavaScriptu. Samotný transpřeklad je napsaný velmi dobře &ndash; zhruba
platí, že velikost vygenerovaného kódu v&nbsp;JavaScriptu odpovídá velikosti
původního kódu napsaného v&nbsp;Pythonu (případné zvětšení je o jednotky
procent). Musíme však počítat s&nbsp;tím, že je nutné načíst i jádro
Transcriptu, jehož velikost je přibližně 20 kB (tedy čím větší je kód samotné
aplikace, tím (poměrově) menší budou režijní náklady. Zajímavá a užitečná je i
podpora <i>type hintů</i> (informací o datovém typu parametrů, proměnných
atd.). I tímto projektem jsme se již na stránkách Roota zabývali, a to
konkrétně v&nbsp;článku <a
href="https://www.root.cz/clanky/transcrypt-technologie-umoznujici-pouziti-pythonu-v-prohlizeci/">Transcrypt:
technologie umožňující použití Pythonu v&nbsp;prohlížeči</a>.</li>

<li>Podobným způsobem pracuje i projekt nazvaný <i>pyjaco</i>, který naleznete
na adrese <a
href="https://github.com/chrivers/pyjaco">https://github.com/chrivers/pyjaco</a>.</li>

<li><i>Skulpt</i> je naproti tomu v&nbsp;mnoha ohledech podobný výše zmíněnému
projektu <i>Brython</i>, protože taktéž umožňuje provádět transpřeklad na
pozadí. To tedy znamená, že programátor pracuje pouze se zdrojovým kódem
vytvořeným v&nbsp;Pythonu a nevidí mezivýsledek &ndash; generovaný a tudíž
většinou i nečitelný JavaScript.</li>

<li>Velmi zajímavým nástrojem, který názorně ukazuje, jak vlastně transpřeklad
funguje (a že jeho výsledek může být poměrně dobře čitelný), je nástroj
s&nbsp;poněkud zvláštním jménem <i>fiddlesalad</i>, který naleznete na adrese
<a href="http://fiddlesalad.com/python/">http://fiddlesalad.com/python/</a>.
Tento nástroj umožňuje zápis zdrojového kódu v&nbsp;Pythonu, který je ihned
(již v&nbsp;době zápisu) transpřekládán do JavaScriptu a současně i
spouštěn.</li>

</ol>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že všechny projekty
zmíněné v&nbsp;předchozím textu jsou ve skutečnosti <i>transpřekladači</i>
neboli <i>transpilery</i> spouštěné buď v&nbsp;čase přípravy projektu
(<i>compile time</i>) nebo přímo v&nbsp;runtime. Jedná se o technologii
zajišťující, aby se i ve webovém prohlížeči mohlo (nepřímo) pracovat
s&nbsp;dalšími programovacími jazyky, nejenom se všudypřítomným a nativně
podporovaným JavaScriptem. Další variantou je přímá interpretace skriptů
psaných v&nbsp;Pythonu s&nbsp;využitím interpretru psaného v&nbsp;JavaScriptu
popř.&nbsp;použití WebAssembly (viz též navazující kapitoly).</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Projekty PyScript a Pyodide</h2>

<p>Nástroj <i>PyScript</i> není, na rozdíl od <a href="#k03">výše zmíněných</a>
projektů, založen na transpřekladači. Je primárně postaven na projektu nazvaném
<a href="https://github.com/pyodide/pyodide">Pyodide</a>. Jedná se v&nbsp;prvé
řadě o upravený překlad celého standardního Pythonu (konkrétně Pythonu,
resp.&nbsp;přesněji řečeno CPythonu 3), ovšem nikoli do nativního kódu
spustitelného přímo z&nbsp;příkazové řádky, ale do bajtkódu <i>WebAssembly</i>
(WASM). To mj.&nbsp;znamená, že interpret Pythonu, resp.&nbsp;přesněji řečeno
programů napsaných pro Python, lze spustit přímo z&nbsp;webového prohlížeče, a
to dokonce bez nutnosti mít Python lokálně nainstalovaný &ndash; musíme mít
pouze k&nbsp;dispozici vhodný webový server (pro jednoduché projekty dokonce
ani to ne &ndash; stačí lokálně uložené soubory, pokud je ovšem nastaven webový
prohlížeč tak, aby dokázal načítat skripty atd.&nbsp;z&nbsp;lokálních souborů),
stránky na <a href="https://pages.github.com/">github.io</a> atd.</p>

<p>Kromě toho je součástí projektu <i>Pyodide</i> i poměrně velké množství
důležitých balíčků používaných například v&nbsp;oblasti vědeckotechnických
výpočtů, pro zpracování numerických dat, ve statistických výpočtech,
v&nbsp;oblasti strojového učení, segmentace, při shlukové analýze atd. Primárně
se jedná o známé balíčky <i>NumPy</i>, <i>Pandas</i>, <i>Matplotlib</i>,
<i>SciPy</i> a taktéž <i>scikit-learn</i>. S&nbsp;mnohými z&nbsp;nich jsme se
ostatně na stránkách Roota již setkali a NumPy a Matplotlib jsme dokonce
použili v&nbsp;některých demonstračních příkladech (běžících &bdquo;na
webu&ldquo;). Seznam všech balíčků použitých v&nbsp;aktuální verzi
<i>Pyodide</i> nalezneme na adrese <a
href="https://github.com/pyodide/pyodide/tree/main/packages">https://github.com/pyodide/pyodide/tree/main/packages</a>.</p>

<p><i>PyScript</i>, jenž je na projektu <i>Pyodide</i> založen, navíc do celého
ekosystému přidává i podporu pro nové HTML značky, zejména
<strong>&lt;py-script&gt;</strong> a <strong>&lt;py-env&gt;</strong>, které
umožňují snadný zápis skriptu a navíc i specifikaci cest, modulů a knihoven,
které budou na stránce použity. Autoři <i>PyScriptu</i> navíc museli zajistit
&bdquo;chytrou&ldquo; práci s&nbsp;odsazeným kódem, což při kombinaci HTML (kde
se na bílé znaky prakticky nehledí) a Pythonu (kde mají bílé znaky syntaktický
význam) není úplně triviální.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Problém projektu Pyodide: velikost přenášených dat a pomalejší inicializace</h2>

<p>Podívejme se nyní na klasický příklad typu <a
href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program">&bdquo;Hello,
World!&ldquo;</a> &ndash;, ovšem upravený do webové podoby. Necháme si
v&nbsp;něm vypsat zprávu &bdquo;Hello, World!&ldquo; na plochu HTML stránky, a
to skriptem napsaným v&nbsp;Pythonu. Základem je v&nbsp;tomto případě párová
značka <strong>&lt;py-script&gt;</strong>, do níž se zapíše volání funkce
<strong>print</strong> Pythonu. Povšimněte si, že volání funkce může být
odsazeno, i když to ve standardním interpretru možné není:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        <strong>&lt;py-script&gt;</strong>
            <strong>print('Hello, World!')</strong>
        <strong>&lt;/py-script&gt;</strong>
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Tuto webovou stránku nyní můžeme otevřít přímo ve webovém prohlížeči. Nebude
nás zajímat jen funkcionalita, ale i to, kolik dat se ve skutečnosti musí do
webového prohlížeče přenést:</p>

<a href="https://www.root.cz/obrazek/662193/"><img src="https://i.iinfo.cz/images/432/pyscript1-1-prev.png" class="image-662193" data-prev-filename="https://i.iinfo.cz/images/432/pyscript1-1-prev.png" data-prev-width="370" data-prev-height="190" data-large-filename="https://i.iinfo.cz/images/432/pyscript1-1-large.png" data-large-width="720" data-large-height="369" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="190" /></a>
<p><i>Obrázek 2: Inicializace stránky resp.&nbsp;skriptu na ní, trvá poměrně
dlouho &ndash; někdy až několik sekund. Ovšem poté jsou již data uložena
v&nbsp;cache, takže další spuštění již není tak pomalé.</i></p>

<a href="https://www.root.cz/obrazek/662194/"><img src="https://i.iinfo.cz/images/432/pyscript1-2-prev.png" class="image-662194" data-prev-filename="https://i.iinfo.cz/images/432/pyscript1-2-prev.png" data-prev-width="370" data-prev-height="98" data-large-filename="https://i.iinfo.cz/images/432/pyscript1-2-large.png" data-large-width="720" data-large-height="191" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="98" /></a>
<p><i>Obrázek 3: Skript napsaný v&nbsp;Pythonu se skutečně spustil.</i></p>

<p>Nás však bude zajímat, jaké soubory vlastně musela výše uvedená HTML stránka
stáhnout do webového prohlížeče, aby bylo vůbec umožněno spuštění onoho
jediného řádku <strong>print('Hello, World!')</strong>. Informace o tom, jak
velké soubory a jak rychle byly staženy, nám podá samotný webový prohlížeč.
V&nbsp;případě Firefoxu jsou tyto informace dostupné ve <i>Web Developer
Tools</i> vyvolatelném buď z&nbsp;menu nebo pomocí klávesové zkratky
<strong>Ctrl+Shift+I</strong>. Takto vypadají informace o tom, jak velké
soubory musely být staženy i pro naši jednoduchou HTML stránku s&nbsp;jediným
příkazem zapsaným v&nbsp;Pythonu:</p>

<a href="https://www.root.cz/obrazek/662195/"><img src="https://i.iinfo.cz/images/432/pyscript1-3-prev.png" class="image-662195" data-prev-filename="https://i.iinfo.cz/images/432/pyscript1-3-prev.png" data-prev-width="370" data-prev-height="126" data-large-filename="https://i.iinfo.cz/images/432/pyscript1-3-large.png" data-large-width="720" data-large-height="245" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="370" height="126" /></a>
<p><i>Obrázek 4: V&nbsp;rámci inicializace naší webové stránky se skriptem
napsaným v&nbsp;Pythonu se přeneslo zhruba 15MB dat! (v&nbsp;mém případě jsou
uložena do cache, ovšem stejně je musí prohlížeč načíst).</i></p>

<p>Výsledný program sice funguje, ale &bdquo;Hello, world!&ldquo; vyžadující
přenesení 15MB je kanónem na vrabce, a to i v&nbsp;současnosti, kdy Internetem
tečkou obrovská videa.</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Náhrada plnohodnotného CPythonu za MicroPython</h2>

<p>Na tomto místě se nabízí zajímavá myšlenka &ndash; co takhle namísto
standardního CPythonu, což je přece jen dnes již dosti
&bdquo;těžkotonážní&ldquo; interpret, použít <i>MicroPython</i>? Tato varianta
Pythonu je totiž, jak již víme, primárně určena pro mikrořadiče s&nbsp;malou
kapacitou jak RAM, tak i Flash (ROM). A navíc i MicroPython lze přeložit do
WebAssembly (WASM). Pokud si tedy necháme přeložit MicroPython do WebAssembly a
vhodným způsobem propojíme výsledek s&nbsp;infrastrukturou postavenou okolo
PyScriptu, měl by být výsledkem interpret Pythonu použitelný ve webovém
prohlížeči, který ovšem bude menší (a bude vyžadovat méně RAM), než CPythonní
varianta (tedy přesněji řečeno celý projekt Pyodide).</p>

<p>Podívejme se, jak o jak velké soubory se nyní bude jednat. Potřebovat budeme
samozřejmě MicroPython přeložený do WebAssembly, dále runtime podporu
představovanou souborem <strong>micropython.js</strong> a konečně upravenou
verzi souboru <strong>pyscript.js</strong>. Celková velikost těchto souborů
dosahuje cca 750 kB, což znamená přibližně kapacitu jedné Amigácké diskety (což
je sice zvláštní jednotka, ale je zvolena z&nbsp;toho důvodu, abychom si
uvědomili, že se skutečně nebavíme o desítkách megabajtů, ale o necelém jednom
megabajtu):</p>

<pre>
$ <strong>ls -sl</strong>
&nbsp;
total 796
188 -rw-rw-r-- 1 ptisnovs ptisnovs 183314 Jan  4 21:11 micropython.js
560 -rw-rw-r-- 1 ptisnovs ptisnovs 563502 Jan  2 18:07 micropython.wasm
 36 -rw-rw-r-- 1 ptisnovs ptisnovs  25184 Jan  4 21:11 pyscript.js
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Webová varianta programu typu &bdquo;Hello, world!&ldquo;</h2>

<p><div class="rs-tip-major">Poznámka: Abychom lépe pochopili, jak se propojuje
MicroPython s&nbsp;PyScriptem, budeme v&nbsp;kapitole 7 až 13 používat
neoficiální &bdquo;ruční&ldquo; postup, v&nbsp;němž vše spustíme pouze lokálně
a nebudeme tak využívat možnosti nabízené posledními variantami PyScriptu. Až
<a href="#k13">v&nbsp;kapitole 13</a> a pochopitelně i v&nbsp;kapitolách
navazujících si řekneme, jak lze celý problém řešit přímo v&nbsp;novém
PyScriptu. Ovšem zaplatíme za to menší transparentností.</div></p>

<p>Ukažme si tedy webovou variantu programu typu &bdquo;Hello, world!&ldquo;,
tentokrát ovšem upravenou do takové podoby, aby se namísto CPythonu používal
MicroPython. Jedná se o webovou stránku, která ovšem obsahuje tři důležité
značky:</p>

<ol>
<li>Značka <strong>&lt;script&gt;</strong> pro načtení upravené verze <strong>pyscript.js</strong></li>
<li>Značka <strong>&lt;py-config&gt;</strong> s&nbsp;případnou konfigurací</li>
<li>Značka <strong>&lt;py-script&gt;</strong> se skriptem zapsaným v&nbsp;Pythonu</li>
</ol>

<p>Celý zdrojový kód této webové stránky může vypadat následovně:</p>

<pre>
&lt;!doctype html&gt;
&lt;html&gt;
&nbsp;
&lt;head&gt;
    &lt;title&gt;MicroPython on web!&lt;/title&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;script src="pyscript.js" type="module"&gt;&lt;/script&gt;
&lt;/head&gt;
&nbsp;
&lt;body&gt;
    &lt;py-config&gt;
    {
        "runtime": "micropython"
    }
    &lt;/py-config&gt;
    &lt;py-script&gt;
import sys
&nbsp;
for i in range(10):
    print("Hello MicroPython")
&nbsp;
print(sys.version)
&nbsp;
&lt;/py-script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Povšimněte si, že načítáme pouze jeden externí skript, a to konkrétně
<strong>pyscript.js</strong>. Tento skript zajistí, jak ostatně uvidíme
později, načtení MicroPythonu (ve formátu WASM) atd. Dále stránka obsahuje
značku <strong>py-config</strong>, ve které můžeme specifikovat různé
konfigurační volby, přičemž formát odpovídá slovníku v&nbsp;JSONu nebo Pythonu.
A konečně je do značky <strong>py-script</strong> umístěn náš skript
naprogramovaný v&nbsp;Pythonu.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Získání všech potřebných souborů</h2>

<p>Výše uvedenou webovou stránku si necháme zobrazit ve webovém prohlížeči,
ovšem navíc budeme potřebovat běžící webový server, PyScript i MicroPython pro
WASM.</p>

<p>Konkrétně to znamená, že před spuštěním webového serveru je nutné nějakým
způsobem získat soubory <strong>pyscript.js</strong>,
<strong>micropython.js</strong> a <strong>micropython.wasm</strong>. První
soubor je součástí repositáře <a
href="https://github.com/pyscript/MicroPyScript">https://github.com/pyscript/MicroPyScript</a>,
další je možné získat po překladu MicroPythonu do WASM (viz závěrečnou
kapitolu). Pokud si však pouze budete chtít rychle vyzkoušet funkcionalitu bez
překladu MicroPythonu (budete k&nbsp;tomu potřebovat <i>emcc</i>), je možné
všechny tři potřebné soubory stáhnout z&nbsp;domény <a
href="https://pyscript.net/">https://pyscript.net/</a>:</p>

<pre>
$ <strong>wget https://pyscript.net/tech-preview/micropython/pyscript.js</strong>
$ <strong>wget https://pyscript.net/tech-preview/micropython/micropython.wasm</strong>
$ <strong>wget https://pyscript.net/tech-preview/micropython/micropython.js</strong>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Spuštění webového serveru a průběh načtení stránky do webového prohlížeče</h2>

<p>Nyní, když již máme k&nbsp;dispozici všechny potřebné soubory i kód naší
stránky (<strong>hello.html</strong>), je možné spustit webový server. Pro
jednoduchost použijeme modul pojmenovaný <strong>http.server</strong>, který je
součástí standardní instalace Pythonu. Nejedná se sice v&nbsp;žádném případě o
server určený do produkčního nasazení, ovšem pro naše lokální testování bude
postačovat:</p>

<pre>
$ <strong>python3 -m http.server</strong>
</pre>

<p>HTTP server by se měl spustit a vypsat, na jakém portu je dostupný:</p>

<pre>
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
</pre>

<p>Nyní si výše uvedenou adresu otevřeme ve webovém prohlížeči:</p>

<img src="https://i.iinfo.cz/images/35/micropython-wasm-1.webp" class="image-1114636" width="547" height="262" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 5: Takto by měla vypadat stránka se seznamem souborů, která je
produkovaná HTTP serverem.</i></p>

<p>Ze zobrazené nabídky vybereme stránku <strong>hello.html</strong>. Poté by
se měla v&nbsp;prohlížeči zobrazit stránka, jejíž obsah je generován naším
skriptem psaným v&nbsp;Pythonu (samozřejmě v&nbsp;runtime, tedy po načtení
stránky):</p>

<img src="https://i.iinfo.cz/images/35/micropython-wasm-2.webp" class="image-1114637" width="613" height="463" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 6: Stránka, jejíž obsah je generován skriptem psaným
v&nbsp;Pythonu.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Co se děje pod kapotou?</h2>

<p>Podívejme se, které operace se vlastně provedly v&nbsp;průběhu zobrazení
naší stránky. Nejprve si prohlížeč od serveru vyžádal stránku
<strong>hello.html</strong>, což je patrné z&nbsp;logu serveru:</p>

<pre>
127.0.0.1 - - [16/Jan/2024 14:18:04] "GET /hello.html HTTP/1.1" 200 -
</pre>

<p>Posléze prohlížeč stránku začal zpracovávat a vyžádal si druhý soubor
uvedený přímo ve zdrojovém kódu stránky:</p>

<pre>
127.0.0.1 - - [16/Jan/2024 14:18:04] "GET /pyscript.js HTTP/1.1" 200 -
</pre>

<p>Tento skript, který byl spuštěn, vedl k&nbsp;tomu, že si prohlížeč vyžádal
další dva soubory:</p>

<pre>
127.0.0.1 - - [16/Jan/2024 14:18:04] "GET /micropython.js HTTP/1.1" 200 -
127.0.0.1 - - [16/Jan/2024 14:18:04] "GET /micropython.wasm HTTP/1.1" 200 -
</pre>

<p>Z&nbsp;pohledu webového serveru je tedy situace jednoduchá. Z&nbsp;pohledu
prohlížeče vypadalo pořadí operací takto:</p>

<a href="https://www.root.cz/obrazek/1114638/"><img src="https://i.iinfo.cz/images/35/micropython-wasm-3-prev.webp" class="image-1114638" width="370" height="54" data-prev-filename="https://i.iinfo.cz/images/35/micropython-wasm-3-prev.webp" data-prev-width="370" data-prev-height="54" data-large-filename="https://i.iinfo.cz/images/35/micropython-wasm-3-large.webp" data-large-width="720" data-large-height="105" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 7: Soubory vyžadované prohlížečem a dodané webovým serverem (při
prvním spuštění ovšem bude cache prázdná, takže dialog bude nepatrně
odlišný).</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Sledování inicializace interpretru Pythonu v&nbsp;konzoli</h2>

<p>Inicializaci interpretru Pythonu resp.&nbsp;přesněji řečeno MicroPythonu lze
sledovat i přímo ve vývojářské konzoli webového prohlížeče. V&nbsp;našem
konkrétním případě by měla konzole končit těmito zprávami:</p>

<img src="https://i.iinfo.cz/images/35/micropython-wasm-4.webp" class="image-1114639" width="464" height="399" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 8: Sledování inicializace interpretru Pythonu ve webové konzoli.</i></p>

<p><div class="rs-tip-major">Poznámka: nenechte se však zmást tím, že konzoli
je možné použít i pro komunikaci s&nbsp;interpretrem. Samozřejmě to možné je
(ostatně na obrázku je vidět vstupní řádek s&nbsp;kurzorem), ale zapisované
příkazy budou zpracovány interpretrem JavaScriptu a nikoli interpretrem Pythonu
(MicroPythonu).</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Uložení skriptu do externího souboru</h2>

<p>Kombinace jazyků HTML a Pythonu v&nbsp;jediném dokumentu není příliš čitelná
ani praktická, už jen z&nbsp;toho důvodu, že programátorské editory mohou mít
problémy s&nbsp;rozeznáním a zvýrazněním syntaxe. Pokusme se tedy vlastní kód
skriptu uložit do souboru <strong>hello.py</strong>, jehož obsah je vlastně
triviální:</p>

<pre>
import sys
&nbsp;
for i in range(10):
    print("Hello MicroPython")
&nbsp;
print(sys.version)
</pre>

<p>HTML stránku upravíme takovým způsobem, že do značky
<strong>&lt;py-script&gt;</strong> pouze vložíme atribut <strong>src</strong>
s&nbsp;uvedením jména souboru:</p>

<pre>
&lt;!doctype html&gt;
&lt;html&gt;
&nbsp;
&lt;head&gt;
    &lt;title&gt;MicroPython on web!&lt;/title&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;script src="pyscript.js" type="module"&gt;&lt;/script&gt;
&lt;/head&gt;
&nbsp;
&lt;body&gt;
    &lt;py-config&gt;
    {
        "runtime": "micropython"
    }
    &lt;/py-config&gt;
    &lt;py-script src="hello.py"&gt;
    &lt;/py-script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Což lze zkrátit, jak je v&nbsp;HTML zvykem, spojením počáteční a koncové
značky na:</p>

<pre>
&lt;!doctype html&gt;
&lt;html&gt;
&nbsp;
&lt;head&gt;
    &lt;title&gt;MicroPython on web!&lt;/title&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;script src="pyscript.js" type="module"&gt;&lt;/script&gt;
&lt;/head&gt;
&nbsp;
&lt;body&gt;
    &lt;py-config&gt;
    {
        "runtime": "micropython"
    }
    &lt;/py-config&gt;
    &lt;py-script src="hello.py" /&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Výsledná webová stránka bude vypadat stejně, jako tomu bylo v&nbsp;úvodním
příkladu. Odlišovat se však bude chování prohlížeče během inicializace
stránky:</p>

<a href="https://www.root.cz/obrazek/1114640/"><img src="https://i.iinfo.cz/images/35/micropython-wasm-5-prev.webp" class="image-1114640" width="370" height="74" data-prev-filename="https://i.iinfo.cz/images/35/micropython-wasm-5-prev.webp" data-prev-width="370" data-prev-height="74" data-large-filename="https://i.iinfo.cz/images/35/micropython-wasm-5-large.webp" data-large-width="720" data-large-height="143" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 9: Nyní se při inicializaci stránky načítá i soubor
<strong>hello.py</strong>.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Oficiální podpora MicroPythonu v&nbsp;projektu PyScript</h2>

<p>V&nbsp;současnosti je již možné využít MicroPython i oficiálně
v&nbsp;projektu PyScript. Máme tedy na výběr mezi klasickou
&bdquo;těžkotonážní&ldquo; variantou CPythonu přeloženou do WebAssembly
v&nbsp;rámci projektu Pyodide a mezi MicroPythonem. Jak uvidíme dále, je výběr
konkrétní varianty Pythonu triviální, neboť se bude lišit pouze typ načítaného
skriptu &ndash; buď se bude jednat o typ &bdquo;py&ldquo; nebo
&bdquo;mpy&ldquo;.</p>

<p>Dále uvedená dvojice demonstračních příkladů bude stále zobrazovat zprávy
generované Pythonem přímo na ploše webové stránky. Budeme ovšem muset provést
nepatrnou úpravu, neboť technologické demo MicroPythonu ve WebAssembly použité
v&nbsp;předchozích kapitolách umožňovalo tisk informací na stránku pomocí
standardní funkce <strong>print</strong>, kdežto v&nbsp;PyScriptu se preferuje
volání <strong>document.write</strong>. Navíc se musí explicitně používat
značka <strong>&lt;br&gt;</strong> pro odřádkování. To jsou však jen minimální
změny.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Hello world! ve variantě pro PyScript a Pyodide</h2>

<p>Připravme si tedy projekt (resp.&nbsp;spíše &bdquo;projekt&ldquo;), který na
ploše HTML stránky zobrazí několik zpráv a nakonec i verzi použitého
interpretru Pythonu. PyScript nově vyžaduje, aby projekt obsahovat i
konfigurační soubor ve formátu JSON nebo TOML s&nbsp;projektovými informacemi.
V&nbsp;tom nejjednodušším případě může být tento soubor prakticky prázdný
(pojmenujeme ho <strong>pyscript.json</strong>, zvolili jsme tedy formát
JSON):</p>

<pre>
{
    "packages": []
}
</pre>

<p>Druhým souborem v&nbsp;projektu bude vlastní HTML stránka. Povšimněte si, že
v&nbsp;ní načítáme samotný PyScript (nyní již nikoli z&nbsp;lokálního souboru)
a taktéž je zde uvedeno jméno Pythonovského skriptu <strong>hello.py</strong> a
výše uvedeného konfiguračního souboru <strong>pyscript.json</strong>. Tyto dva
soubory jsou zapsány ve značce <strong>&lt;script&gt;</strong> s&nbsp;typem
&bdquo;py&ldquo; (to bude důležité, jak ostatně uvidíme dále):</p>

<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
      &lt;meta charset="utf-8" /&gt;
      &lt;meta name="viewport" content="width=device-width,initial-scale=1" /&gt;
      &lt;title&gt;Hello again&lt;/title&gt;
      &lt;link rel="stylesheet" href="https://pyscript.net/releases/2024.1.1/core.css"&gt;
      &lt;script type="module" src="https://pyscript.net/releases/2024.1.1/core.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
      &lt;script type="py" src="./hello2.py" config="./pyscript.json"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Třetím a posledním souborem v&nbsp;projektu je skript zapsaný
v&nbsp;Pythonu, jenž je uložen do souboru pojmenovaného
<strong>hello2.py</strong>. Povšimněte si, že zprávy tiskneme přes
<strong>document.write</strong> a explicitně odřádkováváme pomocí značky
<strong>&lt;br&gt;</strong>:</p>

<pre>
import sys
from pyscript import document
&nbsp;
for i in range(10):
    document.write("Hello Python&lt;br&gt;")
&nbsp;
document.write(sys.version)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Soubory, které webová stránka vyžaduje</h2>

<p>Pokud nyní takto upravenou webovou stránku otevřeme v&nbsp;prohlížeči (opět
si pusťte lokální webový server), bude vypadat následovně:</p>

<a href="https://www.root.cz/obrazek/1114641/"><img src="https://i.iinfo.cz/images/35/micropython-wasm-6-prev.webp" class="image-1114641" width="370" height="94" data-prev-filename="https://i.iinfo.cz/images/35/micropython-wasm-6-prev.webp" data-prev-width="370" data-prev-height="94" data-large-filename="https://i.iinfo.cz/images/35/micropython-wasm-6-large.webp" data-large-width="720" data-large-height="183" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 10: Stránka po svém načtení ve webovém prohlížeči a spuštění
Pythonovského skriptu.</i></p>

<p>Povšimněte si, že se nyní na posledním řádku nezobrazuje MicroPython, ale
pouze verze klasického CPythonu přeložená do WebAssembly. Tato stránka navíc
bude načítat poměrně velké množství souborů, z&nbsp;nichž některé jsou
objemné. To uvidíme na vývojářské konzoli:</p>

<a href="https://www.root.cz/obrazek/1114642/"><img src="https://i.iinfo.cz/images/35/micropython-wasm-7-prev.webp" class="image-1114642" width="370" height="163" data-prev-filename="https://i.iinfo.cz/images/35/micropython-wasm-7-prev.webp" data-prev-width="370" data-prev-height="163" data-large-filename="https://i.iinfo.cz/images/35/micropython-wasm-7-large.webp" data-large-width="720" data-large-height="317" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 11: Jen tyto tři načítané soubory mají velikost 19MB, což první
načtení stránky zdrží.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Úprava pro použití MicroPythonu</h2>

<p>Upravme si nyní předchozí verzi stránky tak, aby se namísto CPythonu
používal MicroPython inicializovaný z&nbsp;moderního PyScriptu. Úprava je až
triviálně jednoduchá, protože pozměníme pouze typ skriptu
z&nbsp;&bdquo;py&ldquo; na &bdquo;mpy&ldquo;. To je v&nbsp;takto jednoduchém
příkladu vše:</p>

<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
      &lt;meta charset="utf-8" /&gt;
      &lt;meta name="viewport" content="width=device-width,initial-scale=1" /&gt;
      &lt;title&gt;Hello again&lt;/title&gt;
      &lt;link rel="stylesheet" href="https://pyscript.net/releases/2024.1.1/core.css"&gt;
      &lt;script type="module" src="https://pyscript.net/releases/2024.1.1/core.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
      <strong>&lt;script type="mpy" src="./hello2.py" config="./pyscript.json"&gt;&lt;/script&gt;</strong>
  &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>V&nbsp;případě, že bude konfigurační soubor <strong>pyscripy.json</strong>
či <strong>pyscript.toml</strong> skutečně prakticky prázdný (což v&nbsp;našem
případě skutečně je), můžete ho přidat přímo do kódu webové stránky do značky
<strong>&lt;py-config&lt;</strong>. U větších konfigurací je to však poměrně
nepřehledné řešení:</p>

<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
      &lt;meta charset="utf-8" /&gt;
      &lt;meta name="viewport" content="width=device-width,initial-scale=1" /&gt;
      &lt;title&gt;Hello again&lt;/title&gt;
      &lt;link rel="stylesheet" href="https://pyscript.net/releases/2024.1.1/core.css"&gt;
      &lt;script type="module" src="https://pyscript.net/releases/2024.1.1/core.js"&gt;&lt;/script&gt;
  &lt;py-config&gt;
  {
    "packages": []
  }
  &lt;/py-config&gt;
  &lt;/head&gt;
  &lt;body&gt;
      <strong>&lt;script type="mpy" src="./hello2.py"&gt;&lt;/script&gt;</strong>
  &lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Soubory, které upravená webová stránka vyžaduje</h2>

<p>Opět si takto upravenou stránku necháme zobrazit ve webovém prohlížeči:</p>

<img src="https://i.iinfo.cz/images/35/micropython-wasm-8.webp" class="image-1114643" width="754" height="347" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" />
<p><i>Obrázek 12: Stránka po svém načtení ve webovém prohlížeči a spuštění
Pythonovského skriptu.</i></p>

<p>Nyní se na posledním řádku opět zobrazí náš oblíbený MicroPython :-)</p>

<p>A jaké soubory tato stránka pro svůj běh potřebuje? Tuto informaci opět
zjistíme z&nbsp;vývojářské konzole:</p>

<a href="https://www.root.cz/obrazek/1114644/"><img src="https://i.iinfo.cz/images/35/micropython-wasm-9-prev.webp" class="image-1114644" width="370" height="125" data-prev-filename="https://i.iinfo.cz/images/35/micropython-wasm-9-prev.webp" data-prev-width="370" data-prev-height="125" data-large-filename="https://i.iinfo.cz/images/35/micropython-wasm-9-large.webp" data-large-width="720" data-large-height="243" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 13: Nyní jsou velikosti stahovaných (a cachovaných) souborů
mnohem menší a tím pádem se stránka načte výrazně rychleji.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Závěrem</h2>

<p>Propojení MicroPythonu s&nbsp;projektem PyScript je jistě zajímavé zejména
po technologické stránce, ovšem například pro intranetové aplikace (používá se
vůbec ještě termín intranet?) se může jednat i o prakticky použitelný projekt,
protože nepatrně delší doba inicializace zde není tak kritická, jako například
u veřejně dostupných stránek s&nbsp;prezentacemi firem atd. Navíc se zde
ukazují možnosti technologie WebAssembly, které se prozatím nerozšiřuje tak,
jak bychom možná očekávali. Jednu nevýhodu vidím nikoli v&nbsp;samotném
MicroPythonu či WebAssembly, ale v&nbsp;PyScriptu, který se vyvíjí (na tom není
nic špatného), ale mění se například i konfigurační volby atd. &ndash; a tyto
změny nejsou vždy dokumentovány. Proto v&nbsp;příkladech z&nbsp;posledních
kapitol nenačítáme poslední verzi PyScriptu, ale jeho
&bdquo;přišpendlenou&ldquo; verzi.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
spuštění ve webovém prohlížeči s&nbsp;využitím MicroPythonu byly uloženy do Git
repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>:</p>

<table>
<tr><th>#</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td>1</td><td>hello.html</td><td>stránka s&nbsp;Pythonním skriptem typu &bdquo;Hello, world!&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/hello.html">https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/hello.html</a></td></tr>
<tr><td>2</td><td>hello2.html</td><td>stránka načítající externí skript v&nbsp;Pythonu (otevírací a uzavírací značka)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/hello2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/hello2.html</a></td></tr>
<tr><td>3</td><td>hello3.html</td><td>stránka načítající externí skript v&nbsp;Pythonu (spojení otevírací a uzavírací značky)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/hello3.html">https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/hello3.html</a></td></tr>
<tr><td>4</td><td>hello.py</td><td>skript načítaný v&nbsp;rámci stránky hello2.html nebo hello3.html</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/hello.py">https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/hello.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>5</td><td>pyscript.json</td><td>projektový soubor pro PyScript použitý v&nbsp;další dvojici příkladů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/pyscript.json">https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/pyscript.json</a></td></tr>
<tr><td>6</td><td>hello4.html</td><td>projekt používající Pyodide</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/hello4.html">https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/hello4.html</a></td></tr>
<tr><td>7</td><td>hello5.html</td><td>projekt používající MicroPython</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/hello5.html">https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/hello5.html</a></td></tr>
<tr><td>8</td><td>hello2.py</td><td>úprava skriptu pro oficiální PyScript</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/hello2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/micropython-wasm/hello2.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Stránky projektu MicroPython<br />
<a href="https://micropython.org/">https://micropython.org/</a>
</li>

<li>Port MicroPythonu pro WebAssembly<br />
<a href="https://github.com/micropython/micropython/tree/master/ports/webassembly">https://github.com/micropython/micropython/tree/master/ports/webassembly</a>
</li>

<li>MicroPyScript<br />
<a href="https://github.com/pyscript/MicroPyScript/tree/main">https://github.com/pyscript/MicroPyScript/tree/main</a>
</li>

<li>MicroPython Technical Preview<br />
<a href="https://pyscript.net/tech-preview/micropython/about.html">https://pyscript.net/tech-preview/micropython/about.html</a>
</li>

<li>PyScript<br />
<a href="https://pyscript.net/">https://pyscript.net/</a>
</li>

<li>PyScript na GitHubu<br />
<a href="https://github.com/pyscript/pyscript">https://github.com/pyscript/pyscript</a>
</li>

<li>Getting started with PyScript<br />
<a href="https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md">https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md</a>
</li>

<li>Beginning PyScript<br />
<a href="https://pyscript.github.io/docs/2024.1.1/beginning-pyscript/#pyscriptjson">https://pyscript.github.io/docs/2024.1.1/beginning-pyscript/#pyscriptjson</a>
</li>

<li>PyScript examples<br />
<a href="https://github.com/pyscript/pyscript/tree/main/examples">https://github.com/pyscript/pyscript/tree/main/examples</a>
</li>

<li>What is PyScript<br />
<a href="https://docs.pyscript.net/latest/concepts/what-is-pyscript.html">https://docs.pyscript.net/latest/concepts/what-is-pyscript.html</a>
</li>

<li>Pyodide<br />
<a href="https://pyodide.org/en/stable/">https://pyodide.org/en/stable/</a>
</li>

<li>PyScript: JavaScript and Python Interoperability<br />
<a href="https://www.jhanley.com/blog/pyscript-javascript-and-python-interoperability/">https://www.jhanley.com/blog/pyscript-javascript-and-python-interoperability/</a>
</li>

<li>Pyscript: JavaScript Event Callbacks<br />
<a href="https://www.jhanley.com/blog/pyscript-javascript-callbacks/">https://www.jhanley.com/blog/pyscript-javascript-callbacks/</a>
</li>

<li>Compiling to WebAssembly: It’s Happening!<br />
<a href="https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/">https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/</a>
</li>

<li>WebAssembly<br />
<a href="https://webassembly.org/">https://webassembly.org/</a>
</li>

<li>Blogy o WASM a Emscripten<br />
<a href="https://www.jamesfmackenzie.com/sitemap/#emscripten">https://www.jamesfmackenzie.com/sitemap/#emscripten</a>
</li>

<li>wat2wasm demo<br />
<a href="https://webassembly.github.io/wabt/demo/wat2wasm/">https://webassembly.github.io/wabt/demo/wat2wasm/</a>
</li>

<li>WABT: The WebAssembly Binary Toolkit<br />
<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>
</li>

<li>Programming using Web Assembly<br />
<a href="https://medium.com/@alexc73/programming-using-web-assembly-c4c73a4e09a9">https://medium.com/@alexc73/programming-using-web-assembly-c4c73a4e09a9</a>
</li>

<li>Experiments with image manipulation in WASM using Go<br />
<a href="https://agniva.me/wasm/2018/06/18/shimmer-wasm.html">https://agniva.me/wasm/2018/06/18/shimmer-wasm.html</a>
</li>

<li>Fable<br />
<a href="https://fable.io/">https://fable.io/</a>
</li>

<li>Využití WebAssembly z&nbsp;programovacího jazyka Go<br />
<a href="https://www.root.cz/clanky/vyuziti-webassembly-z-programovaciho-jazyka-go/">https://www.root.cz/clanky/vyuziti-webassembly-z-programovaciho-jazyka-go/</a>
</li>

<li>WebAssembly prošlo standardizací ve W3C, byla vydána verze 1.0<br />
<a href="https://www.root.cz/zpravicky/webassembly-proslo-standardizaci-ve-w3c-byla-vydana-verze-1-0/">https://www.root.cz/zpravicky/webassembly-proslo-standardizaci-ve-w3c-byla-vydana-verze-1-0/</a>
</li>

<li>WebAssembly na Wiki Golangu<br />
<a href="https://github.com/golang/go/wiki/WebAssembly">https://github.com/golang/go/wiki/WebAssembly</a>
</li>

<li>The future of WebAssembly – A look at upcoming features and proposals<br />
<a href="https://blog.scottlogic.com/2018/07/20/wasm-future.html">https://blog.scottlogic.com/2018/07/20/wasm-future.html</a>
</li>

<li>Writing WebAssembly By Hand<br />
<a href="https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html">https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html</a>
</li>

<li>WebAssembly Specification<br />
<a href="https://webassembly.github.io/spec/core/index.html">https://webassembly.github.io/spec/core/index.html</a>
</li>

<li>Index of Instructions<br />
<a href="https://webassembly.github.io/spec/core/appendix/in­dex-instructions.html">https://webassembly.github.io/spec/core/appendix/in­dex-instructions.html</a>
</li>

<li>The WebAssembly Binary Toolkit<br />
<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>
</li>

<li>Will WebAssembly replace JavaScript? Or Will WASM Make JavaScript More Valuable in Future?<br />
<a href="https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e">https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e</a>
</li>

<li>Roadmap (pro WebAssemly)<br />
<a href="https://webassembly.org/roadmap/">https://webassembly.org/roadmap/</a>
</li>

<li>S-expression<br />
<a href="https://en.wikipedia.org/wiki/S-expression">https://en.wikipedia.org/wiki/S-expression</a>
</li>

<li>Understanding WebAssembly text format<br />
<a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Under­standing_the_text_format">https://developer.mozilla.org/en-US/docs/WebAssembly/Under­standing_the_text_format</a>
</li>

<li>Learning Golang through WebAssembly – Part 1, Introduction and setup<br />
<a href="https://www.aaron-powell.com/posts/2019–02–04-golang-wasm-1-introduction/">https://www.aaron-powell.com/posts/2019–02–04-golang-wasm-1-introduction/</a>
</li>

<li>Learning Golang through WebAssembly – Part 2, Writing your first piece of Go<br />
<a href="https://www.aaron-powell.com/posts/2019–02–05-golang-wasm-2-writing-go/">https://www.aaron-powell.com/posts/2019–02–05-golang-wasm-2-writing-go/</a>
</li>

<li>Learning Golang through WebAssembly – Part 3, Interacting with JavaScript from Go<br />
<a href="https://www.aaron-powell.com/posts/2019–02–06-golang-wasm-3-interacting-with-js-from-go/">https://www.aaron-powell.com/posts/2019–02–06-golang-wasm-3-interacting-with-js-from-go/</a>
</li>

<li>Golang webassembly (wasm) testing with examples<br />
<a href="https://jelinden.fi/blog/golang-webassembly-wasm-testing-with-examples/qB7Tb2KmR">https://jelinden.fi/blog/golang-webassembly-wasm-testing-with-examples/qB7Tb2KmR</a>
</li>

<li>Use Cases (of WebAssembly)<br />
<a href="https://webassembly.org/docs/use-cases/">https://webassembly.org/docs/use-cases/</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

<li>How Brython works<br />
<a href="https://github.com/brython-dev/brython/wiki/How%20Brython%20works">https://github.com/brython-dev/brython/wiki/How%20Brython%20works</a>
</li>

<li>Brython &ndash; A Python 3 implementation for client-side web programming<br />
<a href="http://www.brython.info/">http://www.brython.info/</a>
</li>

<li>Brython videos and talks<br />
<a href="https://github.com/brython-dev/brython/wiki/Brython-videos-and-talks">https://github.com/brython-dev/brython/wiki/Brython-videos-and-talks</a>
</li>

<li>What is Brython?<br />
<a href="https://medium.com/frontendweb/what-is-brython-6edb424b07f6">https://medium.com/frontendweb/what-is-brython-6edb424b07f6</a>
</li>

<li>Python in browser (tabulka s&nbsp;porovnáními)<br />
<a href="http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html">http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html</a>
</li>

<li>JavaScript is Assembly Language for the Web: Sematic Markup is Dead! Clean vs. Machine-coded HTML<br />
<a href="http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx">http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx</a>
</li>

<li>pyscript VS brython<br />
<a href="https://www.libhunt.com/compare-pyscript-vs-brython">https://www.libhunt.com/compare-pyscript-vs-brython</a>
</li>

<li>PyScript - Run Python in the Browser! THE END of JavaScript???<br />
<a href="https://www.youtube.com/watch?v=du8vQC44PC4">https://www.youtube.com/watch?v=du8vQC44PC4</a>
</li>

<li>PyScript is Python in Your Browser<br />
<a href="https://www.youtube.com/watch?v=MJvCeKwr4z4">https://www.youtube.com/watch?v=MJvCeKwr4z4</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Replacing Javascript with Python<br />
<a href="https://stackoverflow.com/questions/69510962/replacing-javascript-with-python">https://stackoverflow.com/questions/69510962/replacing-javascript-with-python</a>
</li>

<li>Can Python Replace Javascript in the Future?<br />
<a href="https://dev.to/katholder/can-python-replace-javascript-in-the-future-4bbn">https://dev.to/katholder/can-python-replace-javascript-in-the-future-4bbn</a>
</li>

<li>asm.js<br />
<a href="http://asmjs.org/">http://asmjs.org/</a>
</li>

<li>asm.js: Working Draft<br />
<a href="http://asmjs.org/spec/latest/">http://asmjs.org/spec/latest/</a>
</li>

<li>Manual asm.js Demonstration<br />
<a href="https://www.youtube.com/watch?v=qkiqMuf5M84">https://www.youtube.com/watch?v=qkiqMuf5M84</a>
</li>

<li>asm.js - frequently asked questions<br />
<a href="http://asmjs.org/faq.html">http://asmjs.org/faq.html</a>
</li>

<li>When asm.js is faster than normal JS code, why should I write new code in JS?<br />
<a href="https://stackoverflow.com/questions/16527195/when-asm-js-is-faster-than-normal-js-code-why-should-i-write-new-code-in-js">https://stackoverflow.com/questions/16527195/when-asm-js-is-faster-than-normal-js-code-why-should-i-write-new-code-in-js</a>
</li>

<li>Faster Canvas Pixel Manipulation with Typed Arrays<br />
<a href="https://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/">https://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

