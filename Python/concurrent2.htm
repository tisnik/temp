<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Souběžné a paralelně běžící úlohy naprogramované v Pythonu (2)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Souběžné a paralelně běžící úlohy naprogramované v Pythonu (2)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Souběžné a paralelně běžící úlohy naprogramované v&nbsp;Pythonu (2)</a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">3. Omezení celkového množství vláken dostupného workerům</a></p>
<p><a href="#k04">4. Návratové hodnoty z&nbsp;jednotlivých úloh</a></p>
<p><a href="#k05">*** 5. Získání vypočtených hodnot</a></p>
<p><a href="#k06">*** 6. Od ThreadPoolExecutor k&nbsp;ProcessPoolExecutor</a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. Souběžně běžící úlohy a konstrukce <strong>async</strong> a <strong>await</strong></a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">16. Knihovna <strong>aiohttp</strong> &ndash; asynchronní operace přes protokol HTTP</a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Souběžné a paralelně běžící úlohy naprogramované v&nbsp;Pythonu (2)</h2>

<p></p>

<p><div class="rs-tip-major">Poznámka: na tomto místě je vhodné znovu upozornit
na fakt, že v&nbsp;Pythonu sice můžeme používat všechny dále popisované
balíčky, ovšem skutečný paralelní (a nezávislý) běh několika vláken je ve
standardním CPythonu do značné míry omezen kvůli existenci techniky zvané
<i>GIL</i> neboli <i>Global Interpreter Lock</i> (viz též <a
href="https://wiki.python.org/moin/GlobalInterpreterLock">příslušnou
stránku</a>).</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
from concurrent.futures.thread import ThreadPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
with ThreadPoolExecutor(max_workers=3) as executor:
    executor.submit(worker, "Thread-1", 0.5, 10)
    executor.submit(worker, "Thread-2", 1.0, 10)
    executor.submit(worker, "Thread-3", 1.5, 10)
&nbsp;
&nbsp;
print("Done!")
</pre>

<pre>
$ python3 thread_pool_1.py 
Thread-1: 1/10 - Mon Mar 14 18:14:52 2022
Thread-2: 1/10 - Mon Mar 14 18:14:52 2022
Thread-1: 2/10 - Mon Mar 14 18:14:52 2022
Thread-3: 1/10 - Mon Mar 14 18:14:53 2022
Thread-1: 3/10 - Mon Mar 14 18:14:53 2022
Thread-2: 2/10 - Mon Mar 14 18:14:53 2022
Thread-1: 4/10 - Mon Mar 14 18:14:53 2022
Thread-1: 5/10 - Mon Mar 14 18:14:54 2022
Thread-2: 3/10 - Mon Mar 14 18:14:54 2022
Thread-3: 2/10 - Mon Mar 14 18:14:54 2022
Thread-1: 6/10 - Mon Mar 14 18:14:54 2022
Thread-1: 7/10 - Mon Mar 14 18:14:55 2022
Thread-2: 4/10 - Mon Mar 14 18:14:55 2022
Thread-1: 8/10 - Mon Mar 14 18:14:55 2022
Thread-3: 3/10 - Mon Mar 14 18:14:56 2022
Thread-1: 9/10 - Mon Mar 14 18:14:56 2022
Thread-2: 5/10 - Mon Mar 14 18:14:56 2022
Thread-1: 10/10 - Mon Mar 14 18:14:56 2022
Thread-2: 6/10 - Mon Mar 14 18:14:57 2022
Thread-3: 4/10 - Mon Mar 14 18:14:57 2022
Thread-2: 7/10 - Mon Mar 14 18:14:58 2022
Thread-3: 5/10 - Mon Mar 14 18:14:59 2022
Thread-2: 8/10 - Mon Mar 14 18:14:59 2022
Thread-3: 6/10 - Mon Mar 14 18:15:00 2022
Thread-2: 9/10 - Mon Mar 14 18:15:00 2022
Thread-2: 10/10 - Mon Mar 14 18:15:01 2022
Thread-3: 7/10 - Mon Mar 14 18:15:02 2022
Thread-3: 8/10 - Mon Mar 14 18:15:03 2022
Thread-3: 9/10 - Mon Mar 14 18:15:05 2022
Thread-3: 10/10 - Mon Mar 14 18:15:06 2022
Done!
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Omezení celkového množství vláken dostupného workerům</h2>

<p>Nyní si zkusme předchozí příklad nepatrně upravit, a to takovým způsobem, že
zvětšíme množství dostupných vláken na deset. Taktéž zvýšíme celkové množství
úloh, které se mají souběžně vykonat, a to taktéž na hodnotu deset. Takto
upravený příklad bude vypadat následovně:</p>

<pre>
from concurrent.futures.thread import ThreadPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
    print("{}: DONE!".format(threadName))
&nbsp;
&nbsp;
workers = 10
&nbsp;
with ThreadPoolExecutor(max_workers=workers) as executor:
    for w in range(workers):
        executor.submit(worker, "Thread-{}".format(w + 1), 0.5 + w / 10.0, 10)
&nbsp;
&nbsp;
print("Done!")
</pre>

<p>Po spuštění demonstračního příkladu je patrné, že každému dostupnému vláknu
byla přiřazena přesně jedna úloha a že všechna vlákna byla spuštěna
souběžně:</p>

<pre>
Thread-1: 1/10 - Mon Mar 14 18:16:59 2022
Thread-2: 1/10 - Mon Mar 14 18:16:59 2022
Thread-3: 1/10 - Mon Mar 14 18:16:59 2022
Thread-4: 1/10 - Mon Mar 14 18:16:59 2022
Thread-5: 1/10 - Mon Mar 14 18:16:59 2022
Thread-1: 2/10 - Mon Mar 14 18:16:59 2022
...
...
...
Thread-7: DONE!
Thread-10: 8/10 - Mon Mar 14 18:17:09 2022
Thread-9: 9/10 - Mon Mar 14 18:17:10 2022
Thread-8: 10/10 - Mon Mar 14 18:17:10 2022
Thread-8: DONE!
Thread-10: 9/10 - Mon Mar 14 18:17:11 2022
Thread-9: 10/10 - Mon Mar 14 18:17:11 2022
Thread-9: DONE!
Thread-10: 10/10 - Mon Mar 14 18:17:12 2022
Thread-10: DONE!
Done!
</pre>

<p>Nástrojem <strong>time</strong> lze snadno zjistit, že celý skript byl
dokončen za přibližně 14 sekund:</p>

<pre>
real    0m14,058s
user    0m0,051s
sys     0m0,010s
</pre>

<p>V&nbsp;praxi je ovšem situace, kdy počet dostupných (resp.&nbsp;přesněji
řečeno volných) vláken přesně odpovídá počtu úloh, které se mají zpracovat,
dosti nepravděpodobná. Často se setkáme se situací, kdy je množství vláken
pevně dané a typicky odvozené od počtu jader mikroprocesoru. Pokud bude počet
úloh přesahovat počet vláken, budou některé úlohy (pochopitelně) čekat na
dokončení předchozích úloh, tedy na situaci, kdy se nějaké vlákno uvolní a
vrátí do <i>poolu</i>. Podívejme se tedy nyní na způsob naplánování deseti
úloh, z&nbsp;nichž ovšem souběžně poběží maximálně pouze tři:</p>

<pre>
from concurrent.futures.thread import ThreadPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
    print("{}: DONE!".format(threadName))
&nbsp;
&nbsp;
<u>workers = 10</u>
&nbsp;
with ThreadPoolExecutor(<u>max_workers=3</u>) as executor:
    for w in range(workers):
        executor.submit(worker, "Thread-{}".format(w + 1), 0.5 + w / 10.0, 10)
&nbsp;
&nbsp;
print("Done!")
</pre>

<p>Nyní skutečně souběžně poběží pouze tři úlohy (tedy budou se opakovat řádky
se jmény Thread-1 až Thread-3):</p>

<pre>
Thread-1: 1/10 - Mon Mar 14 18:17:42 2022
Thread-2: 1/10 - Mon Mar 14 18:17:42 2022
Thread-3: 1/10 - Mon Mar 14 18:17:42 2022
Thread-1: 2/10 - Mon Mar 14 18:17:43 2022
Thread-2: 2/10 - Mon Mar 14 18:17:43 2022
Thread-3: 2/10 - Mon Mar 14 18:17:43 2022
...
...
...
Thread-10: 2/10 - Mon Mar 14 18:18:08 2022
Thread-8: 10/10 - Mon Mar 14 18:18:09 2022
Thread-8: DONE!
Thread-9: 8/10 - Mon Mar 14 18:18:09 2022
Thread-10: 3/10 - Mon Mar 14 18:18:10 2022
Thread-9: 9/10 - Mon Mar 14 18:18:10 2022
Thread-10: 4/10 - Mon Mar 14 18:18:11 2022
Thread-9: 10/10 - Mon Mar 14 18:18:12 2022
Thread-9: DONE!
Thread-10: 5/10 - Mon Mar 14 18:18:13 2022
Thread-10: 6/10 - Mon Mar 14 18:18:14 2022
Thread-10: 7/10 - Mon Mar 14 18:18:15 2022
Thread-10: 8/10 - Mon Mar 14 18:18:17 2022
Thread-10: 9/10 - Mon Mar 14 18:18:18 2022
Thread-10: 10/10 - Mon Mar 14 18:18:20 2022
Thread-10: DONE!
Done!
</pre>

<p>A navíc budou (opět podle očekávání) všechny úlohy dokončeny až po delší
době, zde konkrétně namísto 14 sekund až za 38 sekund:</p>

<pre>
real    0m38,084s
user    0m0,041s
sys     0m0,013s
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Návratové hodnoty z&nbsp;jednotlivých úloh</h2>

<p>Úlohy spouštěné ve vláknech získaných z&nbsp;<i>poolu</i> mnohdy musí vracet
výsledky své činnosti (tedy výpočtů atd.). Vzhledem k&nbsp;tomu, že každá úloha
je reprezentována běžnou funkcí, můžeme se samozřejmě pokusit vrátit hodnotu či
hodnoty příkazem <strong>return</strong>. Ovšem funkce představující jednu
úlohu se nevolá přímo (to by pochopitelně neběžela souběžně, ale přímo
v&nbsp;hlavním vláknu). Úlohy voláme, resp.&nbsp;přesněji řečeno plánujeme,
přes <strong>ThreadPoolExecutor.Submit</strong>. Pokusme se tedy zjistit, jakou
hodnotu vlastně tímto způsobem získáme a zda se bude skutečně jednat o
návratovou hodnotu dokončené úlohy:</p>

<pre>
from concurrent.futures.thread import ThreadPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    result = 0
&nbsp;
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
        result += delay
&nbsp;
    print("{}: DONE!".format(threadName))
    <u>return result</u>
&nbsp;
&nbsp;
workers = 10
&nbsp;
with ThreadPoolExecutor(max_workers=3) as executor:
    for w in range(workers):
        <u>result = executor.submit(worker, "Thread-{}".format(w + 1), 0.5 + w / 10.0, 10)</u>
        print(w, result)
&nbsp;
&nbsp;
print("Done!")
</pre>

<p>Pokud tento příklad spustíme, vypíše se (alespoň většinou) nejdříve těchto
deset řádků:</p>

<pre>
0 &lt;Future at 0x7f0e8162bc40 state=running&gt;
1 &lt;Future at 0x7f0e814f6a00 state=running&gt;
2 &lt;Future at 0x7f0e814f6d90 state=running&gt;
3 &lt;Future at 0x7f0e814fe190 state=pending&gt;
4 &lt;Future at 0x7f0e814fe310 state=pending&gt;
5 &lt;Future at 0x7f0e814fe430 state=pending&gt;
6 &lt;Future at 0x7f0e814fe550 state=pending&gt;
7 &lt;Future at 0x7f0e814fe670 state=pending&gt;
8 &lt;Future at 0x7f0e814fe790 state=pending&gt;
9 &lt;Future at 0x7f0e814fe8b0 state=pending&gt;
</pre>

<p>Následuje již běžné spuštění našich deseti úloh:</p>

<pre>
Thread-1: 1/10 - Wed Mar 16 09:12:52 2022
Thread-2: 1/10 - Wed Mar 16 09:12:52 2022
Thread-3: 1/10 - Wed Mar 16 09:12:52 2022
Thread-1: 2/10 - Wed Mar 16 09:12:53 2022
Thread-2: 2/10 - Wed Mar 16 09:12:53 2022
Thread-3: 2/10 - Wed Mar 16 09:12:53 2022
Thread-1: 3/10 - Wed Mar 16 09:12:53 2022
Thread-2: 3/10 - Wed Mar 16 09:12:54 2022
Thread-1: 4/10 - Wed Mar 16 09:12:54 2022
...
...
...
</pre>

<p>Ovšem nás bude v&nbsp;tuto chvíli zajímat prvních deset řádků, které
odpovídají hodnotám vraceným z:</p>

<pre>
<u>result = executor.submit(worker, "Thread-{}".format(w + 1), 0.5 + w / 10.0, 10)</u>
print(w, result)
</pre>

<p>Toto volání tedy nevrátilo přímo výsledek úlohy, což je ovšem očekávatelné
&ndash; na výsledky bychom museli postupně čekat a opět by se nejednalo o
souběžné výpočty. Namísto toho je vrácena hodnota, které se říká <i>future</i>.
Co se však vlastně pod pojmem future skrývá? Kromě názvu jednoho typu
finančního derivátu :-) představuje future(s) výpočet, který běží asynchronně
(tedy většinou souběžně nebo paralelně) k&nbsp;hlavnímu vláknu aplikace.
Uživatel pouze daný výpočet spustí a teprve ve chvíli, kdy potřebuje pracovat
s&nbsp;výsledkem tohoto výpočtu, začne systém řešit, jakým způsobem má
asynchronní výpočet ukončit, tj.&nbsp;jak má provést synchronizaci obou vláken
nebo získání výsledku z&nbsp;nějaké k&nbsp;tomu určené (synchronizované) datové
struktury. V&nbsp;ideálním případě je výpočet již dokončen, takže se přímo
použije zaznamenaný výsledek, v&nbsp;případě opačném se až při čtení výsledku
počká na dokončení výpočtu. V&nbsp;obou případech však operujeme
s&nbsp;výslednou hodnotou nepřímo.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Získání vypočtených hodnot</h2>

<pre>
results = []
</pre>

<pre>
for w in range(workers):
    result = executor.submit(worker, "Thread-{}".format(w + 1), 0.5 + w / 10.0, 10)
    results.append(result)
</pre>

<pre>
for result in results:
    print(result.result())
</pre>

<pre>
from concurrent.futures.thread import ThreadPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    result = 0
&nbsp;
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
        result += delay
&nbsp;
    print("{}: DONE!".format(threadName))
    return result
&nbsp;
&nbsp;
workers = 10
&nbsp;
results = []
&nbsp;
with ThreadPoolExecutor(max_workers=3) as executor:
    for w in range(workers):
        result = executor.submit(worker, "Thread-{}".format(w + 1), 0.5 + w / 10.0, 10)
        results.append(result)
        print(w, result)
&nbsp;
&nbsp;
print("Computing finished")
&nbsp;
for result in results:
    print(result.result())
&nbsp;
print("Done!")
</pre>

<pre>
0 &lt;Future at 0x7f26e648bc40 state=running&gt;
1 &lt;Future at 0x7f26e6357a00 state=running&gt;
2 &lt;Future at 0x7f26e6357d90 state=running&gt;
3 &lt;Future at 0x7f26e635e190 state=pending&gt;
4 &lt;Future at 0x7f26e635e310 state=pending&gt;
5 &lt;Future at 0x7f26e635e430 state=pending&gt;
6 &lt;Future at 0x7f26e635e550 state=pending&gt;
7 &lt;Future at 0x7f26e635e670 state=pending&gt;
8 &lt;Future at 0x7f26e635e790 state=pending&gt;
9 &lt;Future at 0x7f26e635e8b0 state=pending&gt;
</pre>

<pre>
Thread-1: 1/10 - Wed Mar 16 09:13:41 2022
Thread-2: 1/10 - Wed Mar 16 09:13:41 2022
Thread-3: 1/10 - Wed Mar 16 09:13:41 2022
Thread-1: 2/10 - Wed Mar 16 09:13:41 2022
Thread-2: 2/10 - Wed Mar 16 09:13:41 2022
Thread-3: 2/10 - Wed Mar 16 09:13:42 2022
Thread-1: 3/10 - Wed Mar 16 09:13:42 2022
</pre>

<pre>
Thread-9: 10/10 - Wed Mar 16 09:14:10 2022
Thread-9: DONE!
Thread-10: 5/10 - Wed Mar 16 09:14:11 2022
Thread-10: 6/10 - Wed Mar 16 09:14:13 2022
Thread-10: 7/10 - Wed Mar 16 09:14:14 2022
Thread-10: 8/10 - Wed Mar 16 09:14:15 2022
Thread-10: 9/10 - Wed Mar 16 09:14:17 2022
Thread-10: 10/10 - Wed Mar 16 09:14:18 2022
Thread-10: DONE!
Computing finished
</pre>

<pre>
5.0
5.999999999999999
7.000000000000001
7.999999999999999
9.000000000000002
10.0
10.999999999999998
11.999999999999998
13.000000000000002
14.000000000000002
Done!
</pre>

<pre>
from concurrent.futures.thread import ThreadPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    result = 0
&nbsp;
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
        result += delay
&nbsp;
    print("{}: DONE!".format(threadName))
    return result
&nbsp;
&nbsp;
workers = 10
&nbsp;
with ThreadPoolExecutor(max_workers=3) as executor:
    results = [executor.submit(worker, "Thread-{}".format(w + 1), 0.5 + w / 10.0, 10) for w in range(workers)]
&nbsp;
print("Computing finished")
&nbsp;
for result in results:
    print(result.result())

print("Done!")
</pre>

<pre>
Process-1: 1/10 - Wed Mar 16 09:17:49 2022
Process-2: 1/10 - Wed Mar 16 09:17:49 2022
Process-3: 1/10 - Wed Mar 16 09:17:49 2022
Process-4: 1/10 - Wed Mar 16 09:17:49 2022
Process-5: 1/10 - Wed Mar 16 09:17:49 2022
Process-1: 2/10 - Wed Mar 16 09:17:49 2022
</pre>

<pre>
Process-10: DONE!
Computing finished
</pre>

<p></p>

<pre>
5.0
5.999999999999999
7.000000000000001
7.999999999999999
9.000000000000002
10.0
10.999999999999998
11.999999999999998
13.000000000000002
14.000000000000002
Done!
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Od ThreadPoolExecutor k&nbsp;ProcessPoolExecutor</h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
from concurrent.futures import ProcessPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(processName, delay, n):
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(processName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
with ProcessPoolExecutor(max_workers=3) as executor:
    executor.submit(worker, "Process-1", 0.5, 10)
    executor.submit(worker, "Process-2", 1.0, 10)
    executor.submit(worker, "Process-3", 1.5, 10)
&nbsp;
&nbsp;
print("Done!")
</pre>

<pre>
Process-1: 1/10 - Wed Mar 16 09:16:53 2022
Process-2: 1/10 - Wed Mar 16 09:16:53 2022
Process-1: 2/10 - Wed Mar 16 09:16:53 2022
Process-3: 1/10 - Wed Mar 16 09:16:54 2022
Process-1: 3/10 - Wed Mar 16 09:16:54 2022
Process-2: 2/10 - Wed Mar 16 09:16:54 2022
Process-1: 4/10 - Wed Mar 16 09:16:54 2022
Process-1: 5/10 - Wed Mar 16 09:16:55 2022
Process-3: 2/10 - Wed Mar 16 09:16:55 2022
Process-2: 3/10 - Wed Mar 16 09:16:55 2022
...
...
...
</pre>

<pre>
$ <strong>ps ax |grep python</strong>
</pre>

<pre>
    598 ?        Ss     0:00 /usr/bin/python3 /usr/bin/networkd-dispatcher --run-startup-triggers
   1613 ?        S      0:01 /usr/bin/python3 /usr/share/system-config-printer/applet.py
   1653 ?        S      0:00 python3 /usr/lib/blueberry/safechild /usr/sbin/rfkill event
 671007 pts/1    Sl+    0:00 python3 process_pool_1.py
 671008 pts/1    S+     0:00 python3 process_pool_1.py
 671009 pts/1    S+     0:00 python3 process_pool_1.py
 671010 pts/1    S+     0:00 python3 process_pool_1.py
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
from concurrent.futures import ProcessPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(processName, delay, n):
    result = 0
&nbsp;
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(processName, counter, n, time.ctime(time.time())))
        result += delay
&nbsp;
    print("{}: DONE!".format(processName))
    return result
&nbsp;
&nbsp;
workers = 10
&nbsp;
with ProcessPoolExecutor(max_workers=workers) as executor:
    for w in range(workers):
        print(executor.submit(worker, "Process-{}".format(w + 1), 0.5 + w / 10.0, 10))
&nbsp;
print("Computing finished")
&nbsp;
print("Done!")
</pre>

<pre>
&lt;Future at 0x7f875948c340 state=running&gt;
&lt;Future at 0x7f8759493370 state=pending&gt;
&lt;Future at 0x7f8759493820 state=pending&gt;
&lt;Future at 0x7f8759493940 state=pending&gt;
&lt;Future at 0x7f8759493a60 state=pending&gt;
&lt;Future at 0x7f8759493b80 state=pending&gt;
&lt;Future at 0x7f8759493cd0 state=pending&gt;
&lt;Future at 0x7f8759493e80 state=pending&gt;
&lt;Future at 0x7f8759493fa0 state=pending&gt;
&lt;Future at 0x7f8758417100 state=pending&gt;
Process-1: 1/10 - Wed Mar 16 09:17:24 2022
Process-2: 1/10 - Wed Mar 16 09:17:24 2022
Process-3: 1/10 - Wed Mar 16 09:17:24 2022
Process-4: 1/10 - Wed Mar 16 09:17:24 2022
Process-5: 1/10 - Wed Mar 16 09:17:25 2022
Process-1: 2/10 - Wed Mar 16 09:17:25 2022
...
...
...
</pre>

<pre>
from concurrent.futures import ProcessPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(processName, delay, n):
    result = 0
&nbsp;
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(processName, counter, n, time.ctime(time.time())))
        result += delay
&nbsp;
    print("{}: DONE!".format(processName))
    return result
&nbsp;
&nbsp;
workers = 10
&nbsp;
with ProcessPoolExecutor(max_workers=workers) as executor:
    results = [executor.submit(worker, "Process-{}".format(w + 1), 0.5 + w / 10.0, 10) for w in range(workers)]
&nbsp;
print("Computing finished")
&nbsp;
for result in results:
    print(result.result())
&nbsp;
print("Done!")
</pre>

<pre>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Souběžně běžící úlohy a konstrukce <strong>async</strong> a <strong>await</strong></h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
import asyncio
import time
&nbsp;
&nbsp;
<strong>async</strong> def task():
    print("task started")
    <strong>await</strong> asyncio.sleep(5)
    print("task finished")
&nbsp;
&nbsp;
def main():
    task1 = asyncio.create_task(task())
    print("task created")
&nbsp;
    <strong>await</strong> task1
&nbsp;
    print("done")
&nbsp;
&nbsp;
main()
</pre>

<pre>
import asyncio
import time
&nbsp;
&nbsp;
<strong>async</strong> def task():
    print("task started")
    <strong>await</strong> asyncio.sleep(5)
    print("task finished")
&nbsp;
&nbsp;
<strong>async</strong> def main():
    task1 = asyncio.create_task(task())
    print("task created")
&nbsp;
    <strong>await</strong> task1
&nbsp;
    print("done")
&nbsp;
&nbsp;
asyncio.run(main())
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
import asyncio
import time
&nbsp;
&nbsp;
<strong>async</strong> def task(name):
    print(f"{name} task started")
    <strong>await</strong> asyncio.sleep(5)
    print(f"{name} task finished")
&nbsp;
&nbsp;
<strong>async</strong> def main():
    task1 = asyncio.create_task(task("first"))
    print("first task created")
&nbsp;
    task2 = asyncio.create_task(task("second"))
    print("second task created")
&nbsp;
    <strong>await</strong> task1
    <strong>await</strong> task2
&nbsp;
    print("done")
&nbsp;
&nbsp;
asyncio.run(main())
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
import asyncio
import time
&nbsp;
&nbsp;
<strong>async</strong> def task(name):
    print(f"{name} task started")
    await asyncio.sleep(5)
    print(f"{name} task finished")
    return name[::-1]
&nbsp;
&nbsp;
<strong>async</strong> def main():
    task1 = asyncio.create_task(task("first"))
    print("first task created")
&nbsp;
    task2 = asyncio.create_task(task("second"))
    print("second task created")
&nbsp;
    task3 = asyncio.create_task(task("third"))
    print("third task created")
&nbsp;
    print("result of task #1:", <strong>await</strong> task1)
    print("result of task #2:", <strong>await</strong> task2)
    print("result of task #3:", <strong>await</strong> task3)
&nbsp;
    print("done")
&nbsp;
&nbsp;
asyncio.run(main())
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
import asyncio
import time


async def task(name, queue):
    while not queue.empty():
        param = await queue.get()
        print(f"Task named {name} started with parameter {param}")
        await asyncio.sleep(5)
        print(f"{name} task finished")


async def main():
    queue = asyncio.Queue()

    for i in range(20):
        await queue.put(i)

    for n in range(1, 2):
        asyncio.create_task(task(f"{n}", queue))


asyncio.run(main())
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
import asyncio
import time


async def task(name, queue):
    while not queue.empty():
        param = await queue.get()
        print(f"Task named {name} started with parameter {param}")
        await asyncio.sleep(5)
        print(f"{name} task finished")


async def main():
    queue = asyncio.Queue()

    for i in range(20):
        await queue.put(i)

    for n in range(1, 2):
        await asyncio.gather(asyncio.create_task(task(f"{n}", queue)))


asyncio.run(main())
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
import asyncio
import time


async def task(name, queue):
    while not queue.empty():
        param = await queue.get()
        print(f"Task named {name} started with parameter {param}")
        await asyncio.sleep(5)
        print(f"{name} task finished")


async def main():
    queue = asyncio.Queue()

    for i in range(20):
        await queue.put(i)

    await asyncio.gather(
            asyncio.create_task(task(1, queue)),
            asyncio.create_task(task(2, queue)),
            asyncio.create_task(task(3, queue)),
            asyncio.create_task(task(4, queue)))


asyncio.run(main())
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Knihovna <strong>aiohttp</strong> &ndash; asynchronní operace přes protokol HTTP</h2>

<p>V&nbsp;závěrečné části dnešního článku se zmíníme o knihovně
<strong>aiohttp</strong>. Tato knihovna podporuje asynchronní operace (GET, PUT
atd.) prováděné přes protokol HTTP a může tak sloužit jako alternativa ke známé
knihovně <i>Requests</i>. Knihovnu <strong>aiohttp</strong> samozřejmě musíme
před prvním použitím nainstalovat:</p>

<pre>
$ <strong>pip3 install --user aiohttp</strong>
&nbsp;
Collecting aiohttp
  Downloading aiohttp-3.8.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.3 MB)
     |████████████████████████████████| 1.3 MB 834 kB/s            
Collecting frozenlist&gt;=1.1.1
  Downloading frozenlist-1.3.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (158 kB)
     |████████████████████████████████| 158 kB 936 kB/s            
Collecting multidict&lt;7.0,&gt;=4.5
  Downloading multidict-6.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (121 kB)
     |████████████████████████████████| 121 kB 953 kB/s            
Collecting yarl&lt;2.0,&gt;=1.0
  Downloading yarl-1.7.2-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (308 kB)
     |████████████████████████████████| 308 kB 987 kB/s            
Collecting charset-normalizer&lt;3.0,&gt;=2.0
  Downloading charset_normalizer-2.0.12-py3-none-any.whl (39 kB)
Collecting attrs&gt;=17.3.0
  Downloading attrs-21.4.0-py2.py3-none-any.whl (60 kB)
     |████████████████████████████████| 60 kB 817 kB/s            
Collecting aiosignal&gt;=1.1.2
  Downloading aiosignal-1.2.0-py3-none-any.whl (8.2 kB)
Collecting async-timeout&lt;5.0,&gt;=4.0.0a3
  Downloading async_timeout-4.0.2-py3-none-any.whl (5.8 kB)
Requirement already satisfied: idna&gt;=2.0 in /usr/lib/python3/dist-packages (from yarl&lt;2.0,&gt;=1.0-&gt;aiohttp) (2.8)
Installing collected packages: multidict, frozenlist, yarl, charset-normalizer, attrs, async-timeout, aiosignal, aiohttp
Successfully installed aiohttp-3.8.1 aiosignal-1.2.0 async-timeout-4.0.2 attrs-21.4.0 charset-normalizer-2.0.12 frozenlist-1.3.0 multidict-6.0.2 yarl-1.7.2
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
import asyncio
import aiohttp
import time


async def download(name, queue):
    async with aiohttp.ClientSession() as session:
        while not queue.empty():
            url = await queue.get()
            print(f"Task named {name} getting URL: {url}")
            async with session.get(url) as response:
                t = await response.text()
                print(f"Task named {name} downloaded {len(t)} characters")
            print(f"Task named {name} finished")


async def main():
    queue = asyncio.Queue()

    for url in (
        "http://www.root.cz",
        "http://duckduckgo.com",
        "http://seznam.com",
        "https://www.root.cz/programovaci-jazyky/",
        "https://www.root.cz/clanky/soubezne-a-paralelne-bezici-ulohy-naprogramovane-v-pythonu/",
        "https://github.com/"
    ):
        await queue.put(url)

    await asyncio.gather(
            asyncio.create_task(download(1, queue)),
            asyncio.create_task(download(2, queue)))


asyncio.run(main())
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<pre>
import asyncio
import aiohttp
import time


async def download(name, queue):
    async with aiohttp.ClientSession() as session:
        while not queue.empty():
            url = await queue.get()
            t1 = time.time()
            print(f"Task named {name} getting URL: {url}")
            async with session.get(url) as response:
                t = await response.text()
                t2 = time.time()
                print(f"Task named {name} downloaded {len(t)} characters in {t2-t1} seconds")
            print(f"Task named {name} finished")


async def main():
    queue = asyncio.Queue()

    t1 = time.time()

    for url in (
        "http://www.root.cz",
        "http://duckduckgo.com",
        "http://seznam.com",
        "https://www.root.cz/programovaci-jazyky/",
        "https://www.root.cz/clanky/soubezne-a-paralelne-bezici-ulohy-naprogramovane-v-pythonu/",
        "https://www.root.cz/clanky/pywebio-interaktivni-webove-dialogy-a-formulare-v-cistem-pythonu/",
        "https://streamlit.io/",
        "https://pglet.io/",
        "https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/",
        "https://github.com/"
    ):
        await queue.put(url)

    await asyncio.gather(
            asyncio.create_task(download(1, queue)),
            asyncio.create_task(download(2, queue)),
            asyncio.create_task(download(3, queue)))

    t2 = time.time()
    print(f"Total time: {t2-t1} seconds")

asyncio.run(main())
</pre>

<pre>
import asyncio
import aiohttp
import time


async def download(name, queue, results):
    async with aiohttp.ClientSession() as session:
        while not queue.empty():
            url = await queue.get()
            t1 = time.time()
            print(f"Task named {name} getting URL: {url}")
            async with session.get(url) as response:
                t = await response.text()
                t2 = time.time()
                print(f"Task named {name} downloaded {len(t)} characters in {t2-t1} seconds")
                await results.put(t2-t1)
            print(f"Task named {name} finished")


async def main():
    queue = asyncio.Queue()
    results = asyncio.Queue()

    t1 = time.time()

    for url in (
        "http://www.root.cz",
        "http://duckduckgo.com",
        "http://seznam.com",
        "https://www.root.cz/programovaci-jazyky/",
        "https://www.root.cz/clanky/soubezne-a-paralelne-bezici-ulohy-naprogramovane-v-pythonu/",
        "https://www.root.cz/clanky/pywebio-interaktivni-webove-dialogy-a-formulare-v-cistem-pythonu/",
        "https://streamlit.io/",
        "https://pglet.io/",
        "https://www.root.cz/serialy/graficke-uzivatelske-rozhrani-v-pythonu/",
        "https://github.com/"
    ):
        await queue.put(url)

    await asyncio.gather(
            asyncio.create_task(download(1, queue, results)),
            asyncio.create_task(download(2, queue, results)),
            asyncio.create_task(download(3, queue, results)))

    process_time = 0
    while not results.empty():
        process_time += await results.get()

    print(f"Process time: {process_time} seconds")

    t2 = time.time()
    print(f"Total time:   {t2-t1} seconds")

asyncio.run(main())
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech <a
href="https://www.root.cz/clanky/soubezne-a-paralelne-bezici-ulohy-naprogramovane-v-pythonu/">minule</a>
i dnes popsaných demonstračních příkladů určených pro programovací jazyk Python
3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>multithreading1.py</td><td>spuštění tří vláken vykonávajících déletrvající činnost</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading1.py</a></td></tr>
<tr><td> 2</td><td>multithreading2.py</td><td>spuštění tří vláken, předání parametrů volaným funkcím</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading2.py</a></td></tr>
<tr><td> 3</td><td>multithreading3.py</td><td>explicitní čekání na dokončení běhu vláken metodou <strong>join</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading3.py</a></td></tr>
<tr><td> 4</td><td>multithreading4.py</td><td>sdílený objekt</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading4.py</a></td></tr>
<tr><td> 5</td><td>multithreading_join_deamon.py</td><td>čekání na dokončení vláken s&nbsp;příznakem &bdquo;daemon&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_join_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_join_deamon.py</a></td></tr>
<tr><td> 6</td><td>multithreading_no_join_deamon.py</td><td>vlákna s&nbsp;příznakem &bdquo;daemon&ldquo;, na jejichž ukončení se nečeká</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_deamon.py</a></td></tr>
<tr><td> 7</td><td>multithreading_no_join_no_deamon.py</td><td>běžná vlákna bez příznaku &bdquo;daemon&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_no_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_no_deamon.py</a></td></tr>
<tr><td> 8</td><td>multithreading_timeout.py</td><td>specifikace maximální doby čekání na ukončení vlákna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_timeout.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_timeout.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>multiprocessing1.py</td><td>zavolání funkce spuštěné v&nbsp;rámci dalšího procesu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing1.py</a></td></tr>
<tr><td>10</td><td>multiprocessing2.py</td><td>spuštění většího množství procesů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing2.py</a></td></tr>
<tr><td>11</td><td>multiprocessing3.py</td><td>nepatrná úprava předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing3.py</a></td></tr>
<tr><td>12</td><td>multiprocessing4.py</td><td>řízení workerů posílanými příkazy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing4.py</a></td></tr>
<tr><td>13</td><td>multiprocessing5.py</td><td>řízení workerů posílanými příkazy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing5.py</a></td></tr>
<tr><td>14</td><td>multiprocessing6.py</td><td>jeden proces a sdílená globální hodnota</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing6.py</a></td></tr>
<tr><td>15</td><td>multiprocessing7.py</td><td>více procesů, které nesdílí hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing7.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>queue_example.py</td><td>základní vlastnosti sdílené datové struktury <strong>Queue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queue_example.py</a></td></tr>
<tr><td>17</td><td>simple_queue_example.py</td><td>základní vlastnosti sdílené datové struktury <strong>SimpleQueue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/simple_queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/simple_queue_example.py</a></td></tr>
<tr><td>18</td><td>priority_queue_example.py</td><td>základní vlastnosti sdílené datové struktury <strong>PriorityQueue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/priority_queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/priority_queue_example.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>queues1.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: základní forma</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues1.py</a></td></tr>
<tr><td>20</td><td>queues2.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: více konzumentů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues2.py</a></td></tr>
<tr><td>21</td><td>queues3.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: více producentů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues3.py</a></td></tr>
<tr><td>22</td><td>queues4.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: více producentů i konzumentů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>thread_pool_1.py</td><td>spuštění tří úloh ve třech vláknech</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_1.py</a></td></tr>
<tr><td>24</td><td>thread_pool_2.py</td><td>spuštění deseti úloh v&nbsp;deseti vláknech</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_2.py</a></td></tr>
<tr><td>25</td><td>thread_pool_3.py</td><td>omezení počtu vláken na 3 pro celkem deset úloh</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_3.py</a></td></tr>
<tr><td>26</td><td>thread_pool_4.py</td><td>návratová hodnota získaná po spuštění úlohy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_4.py</a></td></tr>
<tr><td>27</td><td>thread_pool_5.py</td><td>získání vypočtených hodnot</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_5.py</a></td></tr>
<tr><td>28</td><td>thread_pool_6.py</td><td>alternativní způsob zápisu předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>29</td><td>process_pool_1.py</td><td>spuštění tří úloh ve vlastních procesech</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_1.py</a></td></tr>
<tr><td>30</td><td>process_pool_2.py</td><td>návratové hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_2.py</a></td></tr>
<tr><td>31</td><td>process_pool_3.py</td><td>čekání na dokončení úloh + získání návratových hodnot</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>32</td><td>async_await_1.py</td><td>základní způsob použití <strong>async</strong> a <strong>await</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_1.py</a></td></tr>
<tr><td>33</td><td>async_await_2.py</td><td>funkce <strong>main</strong> volaná asynchronně</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_2.py</a></td></tr>
<tr><td>34</td><td>async_await_3.py</td><td>dvě asynchronně běžící úlohy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_3.py</a></td></tr>
<tr><td>35</td><td>async_await_4.py</td><td>získání výsledků z&nbsp;asynchronně běžících úloh</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_4.py</a></td></tr>
<tr><td>36</td><td>async_queue_1.py</td><td>fronty pro kooperace mezi korutinami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_1.py</a></td></tr>
<tr><td>37</td><td>async_queue_2.py</td><td>korektní spuštění většího množství korutin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_2.py</a></td></tr>
<tr><td>38</td><td>async_queue_3.py</td><td>využití <strong>asyncio.gather</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_3.py</a></td></tr>
<tr><td>39</td><td>async_aiohttp_1.py</td><td>použití knihovny <strong>aiohttp</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_1.py</a></td></tr>
<tr><td>40</td><td>async_aiohttp_2.py</td><td>záznam časů trvání jednotlivých operací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_2.py</a></td></tr>
<tr><td>41</td><td>async_aiohttp_3.py</td><td>vylepšení předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_3.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Dokumentace Pythonu: balíček queue<br />
<a href="https://docs.python.org/3/library/queue.html">https://docs.python.org/3/library/queue.html</a>
</li>

<li>Dokumentace Pythonu: balíček threading<br />
<a href="https://docs.python.org/3/library/threading.html?">https://docs.python.org/3/library/threading.html?</a>
</li>

<li>Dokumentace Pythonu: balíček multiprocessing<br />
<a href="https://docs.python.org/3/library/multiprocessing.html">https://docs.python.org/3/library/multiprocessing.html</a>
</li>

<li>Dokumentace Pythonu: balíček asyncio<br />
<a href="https://docs.python.org/3/library/asyncio.html">https://docs.python.org/3/library/asyncio.html</a>
</li>

<li>Synchronization Primitives<br />
<a href="https://docs.python.org/3/library/asyncio-sync.html">https://docs.python.org/3/library/asyncio-sync.html</a>
</li>

<li>Coroutines<br />
<a href="https://docs.python.org/3/library/asyncio-task.html">https://docs.python.org/3/library/asyncio-task.html</a>
</li>

<li>Queues<br />
<a href="https://docs.python.org/3/library/asyncio-queue.html">https://docs.python.org/3/library/asyncio-queue.html</a>
</li>

<li>python-csp<br />
<a href="https://python-csp.readthedocs.io/en/latest/">https://python-csp.readthedocs.io/en/latest/</a>
</li>

<li>TrellisSTM<br />
<a href="http://peak.telecommunity.com/DevCenter/TrellisSTM">http://peak.telecommunity.com/DevCenter/TrellisSTM</a>
</li>

<li>Python Multithreading and Multiprocessing Tutorial<br />
<a href="https://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python">https://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python</a>
</li>

<li>ThreadPoolExecutor<br />
<a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor">https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor</a>
</li>

<li>ProcessPoolExecutor<br />
<a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor">https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor</a>
</li>

<li>asyncio — Asynchronous I/O<br />
<a href="https://docs.python.org/3/library/asyncio.html">https://docs.python.org/3/library/asyncio.html</a>
</li>

<li>Threads vs Async: Has Asyncio Solved Concurrency?<br />
<a href="https://www.youtube.com/watch?v=NZq31Sg8R9E">https://www.youtube.com/watch?v=NZq31Sg8R9E</a>
</li>

<li>Python Asynchronous Programming &ndash; AsyncIO &amp; Async/Await<br />
<a href="https://www.youtube.com/watch?v=t5Bo1Je9EmE">https://www.youtube.com/watch?v=t5Bo1Je9EmE</a>
</li>

<li>AsyncIO &amp; Asynchronous Programming in Python<br />
<a href="https://www.youtube.com/watch?v=6RbJYN7SoRs">https://www.youtube.com/watch?v=6RbJYN7SoRs</a>
</li>

<li>Coroutines and Tasks<br />
<a href="https://docs.python.org/3/library/asyncio-task.html">https://docs.python.org/3/library/asyncio-task.html</a>
</li>

<li>Python async/await Tutorial<br />
<a href="https://stackabuse.com/python-async-await-tutorial/">https://stackabuse.com/python-async-await-tutorial/</a>
</li>

<li>Demystifying Python's Async and Await Keywords<br />
<a href="https://www.youtube.com/watch?v=F19R_M4Nay4">https://www.youtube.com/watch?v=F19R_M4Nay4</a>
</li>

<li>Curio<br />
<a href="https://curio.readthedocs.io/en/latest/">https://curio.readthedocs.io/en/latest/</a>
</li>

<li>Trio: a friendly Python library for async concurrency and I/O<br />
<a href="https://trio.readthedocs.io/en/stable/">https://trio.readthedocs.io/en/stable/</a>
</li>

<li>Curio &ndash; A Tutorial Introduction<br />
<a href="https://curio.readthedocs.io/en/latest/tutorial.html">https://curio.readthedocs.io/en/latest/tutorial.html</a>
</li>

<li>unsync<br />
<a href="https://github.com/alex-sherman/unsync">https://github.com/alex-sherman/unsync</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

