<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
from concurrent.futures.thread import ThreadPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
with ThreadPoolExecutor(max_workers=3) as executor:
    executor.submit(worker, "Thread-1", 0.5, 10)
    executor.submit(worker, "Thread-2", 1.0, 10)
    executor.submit(worker, "Thread-3", 1.5, 10)
&nbsp;
&nbsp;
print("Done!")
</pre>

<pre>
$ python3 thread_pool_1.py 
Thread-1: 1/10 - Mon Mar 14 18:14:52 2022
Thread-2: 1/10 - Mon Mar 14 18:14:52 2022
Thread-1: 2/10 - Mon Mar 14 18:14:52 2022
Thread-3: 1/10 - Mon Mar 14 18:14:53 2022
Thread-1: 3/10 - Mon Mar 14 18:14:53 2022
Thread-2: 2/10 - Mon Mar 14 18:14:53 2022
Thread-1: 4/10 - Mon Mar 14 18:14:53 2022
Thread-1: 5/10 - Mon Mar 14 18:14:54 2022
Thread-2: 3/10 - Mon Mar 14 18:14:54 2022
Thread-3: 2/10 - Mon Mar 14 18:14:54 2022
Thread-1: 6/10 - Mon Mar 14 18:14:54 2022
Thread-1: 7/10 - Mon Mar 14 18:14:55 2022
Thread-2: 4/10 - Mon Mar 14 18:14:55 2022
Thread-1: 8/10 - Mon Mar 14 18:14:55 2022
Thread-3: 3/10 - Mon Mar 14 18:14:56 2022
Thread-1: 9/10 - Mon Mar 14 18:14:56 2022
Thread-2: 5/10 - Mon Mar 14 18:14:56 2022
Thread-1: 10/10 - Mon Mar 14 18:14:56 2022
Thread-2: 6/10 - Mon Mar 14 18:14:57 2022
Thread-3: 4/10 - Mon Mar 14 18:14:57 2022
Thread-2: 7/10 - Mon Mar 14 18:14:58 2022
Thread-3: 5/10 - Mon Mar 14 18:14:59 2022
Thread-2: 8/10 - Mon Mar 14 18:14:59 2022
Thread-3: 6/10 - Mon Mar 14 18:15:00 2022
Thread-2: 9/10 - Mon Mar 14 18:15:00 2022
Thread-2: 10/10 - Mon Mar 14 18:15:01 2022
Thread-3: 7/10 - Mon Mar 14 18:15:02 2022
Thread-3: 8/10 - Mon Mar 14 18:15:03 2022
Thread-3: 9/10 - Mon Mar 14 18:15:05 2022
Thread-3: 10/10 - Mon Mar 14 18:15:06 2022
Done!
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
from concurrent.futures.thread import ThreadPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
    print("{}: DONE!".format(threadName))
&nbsp;
&nbsp;
workers = 10
&nbsp;
with ThreadPoolExecutor(max_workers=workers) as executor:
    for w in range(workers):
        executor.submit(worker, "Thread-{}".format(w + 1), 0.5 + w / 10.0, 10)
&nbsp;
&nbsp;
print("Done!")
</pre>

<pre>
Thread-1: 1/10 - Mon Mar 14 18:16:59 2022
Thread-2: 1/10 - Mon Mar 14 18:16:59 2022
Thread-3: 1/10 - Mon Mar 14 18:16:59 2022
Thread-4: 1/10 - Mon Mar 14 18:16:59 2022
Thread-5: 1/10 - Mon Mar 14 18:16:59 2022
Thread-1: 2/10 - Mon Mar 14 18:16:59 2022
...
...
...
Thread-7: 10/10 - Mon Mar 14 18:17:09 2022
Thread-7: DONE!
Thread-10: 8/10 - Mon Mar 14 18:17:09 2022
Thread-9: 9/10 - Mon Mar 14 18:17:10 2022
Thread-8: 10/10 - Mon Mar 14 18:17:10 2022
Thread-8: DONE!
Thread-10: 9/10 - Mon Mar 14 18:17:11 2022
Thread-9: 10/10 - Mon Mar 14 18:17:11 2022
Thread-9: DONE!
Thread-10: 10/10 - Mon Mar 14 18:17:12 2022
Thread-10: DONE!
Done!
</pre>

<pre>
real    0m14,058s
user    0m0,051s
sys     0m0,010s
</pre>

<p>Naplánování deseti úloh, z&nbsp;nichž ovšem souběžně poběží maximálně pouze tři:</p>

<pre>
from concurrent.futures.thread import ThreadPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
    print("{}: DONE!".format(threadName))
&nbsp;
&nbsp;
workers = 10
&nbsp;
with ThreadPoolExecutor(max_workers=3) as executor:
    for w in range(workers):
        executor.submit(worker, "Thread-{}".format(w + 1), 0.5 + w / 10.0, 10)
&nbsp;
&nbsp;
print("Done!")
</pre>

<pre>
Thread-1: 1/10 - Mon Mar 14 18:17:42 2022
Thread-2: 1/10 - Mon Mar 14 18:17:42 2022
Thread-3: 1/10 - Mon Mar 14 18:17:42 2022
Thread-1: 2/10 - Mon Mar 14 18:17:43 2022
Thread-2: 2/10 - Mon Mar 14 18:17:43 2022
Thread-3: 2/10 - Mon Mar 14 18:17:43 2022
...
...
...
Thread-10: 2/10 - Mon Mar 14 18:18:08 2022
Thread-8: 10/10 - Mon Mar 14 18:18:09 2022
Thread-8: DONE!
Thread-9: 8/10 - Mon Mar 14 18:18:09 2022
Thread-10: 3/10 - Mon Mar 14 18:18:10 2022
Thread-9: 9/10 - Mon Mar 14 18:18:10 2022
Thread-10: 4/10 - Mon Mar 14 18:18:11 2022
Thread-9: 10/10 - Mon Mar 14 18:18:12 2022
Thread-9: DONE!
Thread-10: 5/10 - Mon Mar 14 18:18:13 2022
Thread-10: 6/10 - Mon Mar 14 18:18:14 2022
Thread-10: 7/10 - Mon Mar 14 18:18:15 2022
Thread-10: 8/10 - Mon Mar 14 18:18:17 2022
Thread-10: 9/10 - Mon Mar 14 18:18:18 2022
Thread-10: 10/10 - Mon Mar 14 18:18:20 2022
Thread-10: DONE!
Done!
</pre>

<pre>
real    0m38,084s
user    0m0,041s
sys     0m0,013s
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
from concurrent.futures.thread import ThreadPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    result = 0
&nbsp;
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
        result += delay
&nbsp;
    print("{}: DONE!".format(threadName))
    return result
&nbsp;
&nbsp;
workers = 10
&nbsp;
with ThreadPoolExecutor(max_workers=3) as executor:
    for w in range(workers):
        result = executor.submit(worker, "Thread-{}".format(w + 1), 0.5 + w / 10.0, 10)
        print(w, result)
&nbsp;
&nbsp;
print("Done!")
</pre>

<pre>
0 &lt;Future at 0x7f0e8162bc40 state=running&gt;
1 &lt;Future at 0x7f0e814f6a00 state=running&gt;
2 &lt;Future at 0x7f0e814f6d90 state=running&gt;
3 &lt;Future at 0x7f0e814fe190 state=pending&gt;
4 &lt;Future at 0x7f0e814fe310 state=pending&gt;
5 &lt;Future at 0x7f0e814fe430 state=pending&gt;
6 &lt;Future at 0x7f0e814fe550 state=pending&gt;
7 &lt;Future at 0x7f0e814fe670 state=pending&gt;
8 &lt;Future at 0x7f0e814fe790 state=pending&gt;
9 &lt;Future at 0x7f0e814fe8b0 state=pending&gt;
Thread-1: 1/10 - Wed Mar 16 09:12:52 2022
Thread-2: 1/10 - Wed Mar 16 09:12:52 2022
Thread-3: 1/10 - Wed Mar 16 09:12:52 2022
Thread-1: 2/10 - Wed Mar 16 09:12:53 2022
Thread-2: 2/10 - Wed Mar 16 09:12:53 2022
Thread-3: 2/10 - Wed Mar 16 09:12:53 2022
Thread-1: 3/10 - Wed Mar 16 09:12:53 2022
Thread-2: 3/10 - Wed Mar 16 09:12:54 2022
Thread-1: 4/10 - Wed Mar 16 09:12:54 2022
...
...
...
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
results = []
</pre>

<pre>
for w in range(workers):
    result = executor.submit(worker, "Thread-{}".format(w + 1), 0.5 + w / 10.0, 10)
    results.append(result)
</pre>

<pre>
for result in results:
    print(result.result())
</pre>

<pre>
from concurrent.futures.thread import ThreadPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    result = 0
&nbsp;
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
        result += delay
&nbsp;
    print("{}: DONE!".format(threadName))
    return result
&nbsp;
&nbsp;
workers = 10
&nbsp;
results = []
&nbsp;
with ThreadPoolExecutor(max_workers=3) as executor:
    for w in range(workers):
        result = executor.submit(worker, "Thread-{}".format(w + 1), 0.5 + w / 10.0, 10)
        results.append(result)
        print(w, result)
&nbsp;
&nbsp;
print("Computing finished")
&nbsp;
for result in results:
    print(result.result())
&nbsp;
print("Done!")
</pre>

<pre>
0 &lt;Future at 0x7f26e648bc40 state=running&gt;
1 &lt;Future at 0x7f26e6357a00 state=running&gt;
2 &lt;Future at 0x7f26e6357d90 state=running&gt;
3 &lt;Future at 0x7f26e635e190 state=pending&gt;
4 &lt;Future at 0x7f26e635e310 state=pending&gt;
5 &lt;Future at 0x7f26e635e430 state=pending&gt;
6 &lt;Future at 0x7f26e635e550 state=pending&gt;
7 &lt;Future at 0x7f26e635e670 state=pending&gt;
8 &lt;Future at 0x7f26e635e790 state=pending&gt;
9 &lt;Future at 0x7f26e635e8b0 state=pending&gt;
</pre>

<pre>
Thread-1: 1/10 - Wed Mar 16 09:13:41 2022
Thread-2: 1/10 - Wed Mar 16 09:13:41 2022
Thread-3: 1/10 - Wed Mar 16 09:13:41 2022
Thread-1: 2/10 - Wed Mar 16 09:13:41 2022
Thread-2: 2/10 - Wed Mar 16 09:13:41 2022
Thread-3: 2/10 - Wed Mar 16 09:13:42 2022
Thread-1: 3/10 - Wed Mar 16 09:13:42 2022
</pre>

<pre>
Thread-9: 10/10 - Wed Mar 16 09:14:10 2022
Thread-9: DONE!
Thread-10: 5/10 - Wed Mar 16 09:14:11 2022
Thread-10: 6/10 - Wed Mar 16 09:14:13 2022
Thread-10: 7/10 - Wed Mar 16 09:14:14 2022
Thread-10: 8/10 - Wed Mar 16 09:14:15 2022
Thread-10: 9/10 - Wed Mar 16 09:14:17 2022
Thread-10: 10/10 - Wed Mar 16 09:14:18 2022
Thread-10: DONE!
Computing finished
</pre>

<pre>
5.0
5.999999999999999
7.000000000000001
7.999999999999999
9.000000000000002
10.0
10.999999999999998
11.999999999999998
13.000000000000002
14.000000000000002
Done!
</pre>

<pre>
from concurrent.futures.thread import ThreadPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(threadName, delay, n):
    result = 0
&nbsp;
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(threadName, counter, n, time.ctime(time.time())))
        result += delay
&nbsp;
    print("{}: DONE!".format(threadName))
    return result
&nbsp;
&nbsp;
workers = 10
&nbsp;
with ThreadPoolExecutor(max_workers=3) as executor:
    results = [executor.submit(worker, "Thread-{}".format(w + 1), 0.5 + w / 10.0, 10) for w in range(workers)]
&nbsp;
print("Computing finished")
&nbsp;
for result in results:
    print(result.result())

print("Done!")
</pre>

<pre>
Process-1: 1/10 - Wed Mar 16 09:17:49 2022
Process-2: 1/10 - Wed Mar 16 09:17:49 2022
Process-3: 1/10 - Wed Mar 16 09:17:49 2022
Process-4: 1/10 - Wed Mar 16 09:17:49 2022
Process-5: 1/10 - Wed Mar 16 09:17:49 2022
Process-1: 2/10 - Wed Mar 16 09:17:49 2022
</pre>

<pre>
Process-10: DONE!
Computing finished
</pre>

<p></p>

<pre>
5.0
5.999999999999999
7.000000000000001
7.999999999999999
9.000000000000002
10.0
10.999999999999998
11.999999999999998
13.000000000000002
14.000000000000002
Done!
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
from concurrent.futures import ProcessPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(processName, delay, n):
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(processName, counter, n, time.ctime(time.time())))
&nbsp;
&nbsp;
with ProcessPoolExecutor(max_workers=3) as executor:
    executor.submit(worker, "Process-1", 0.5, 10)
    executor.submit(worker, "Process-2", 1.0, 10)
    executor.submit(worker, "Process-3", 1.5, 10)
&nbsp;
&nbsp;
print("Done!")
</pre>

<pre>
Process-1: 1/10 - Wed Mar 16 09:16:53 2022
Process-2: 1/10 - Wed Mar 16 09:16:53 2022
Process-1: 2/10 - Wed Mar 16 09:16:53 2022
Process-3: 1/10 - Wed Mar 16 09:16:54 2022
Process-1: 3/10 - Wed Mar 16 09:16:54 2022
Process-2: 2/10 - Wed Mar 16 09:16:54 2022
Process-1: 4/10 - Wed Mar 16 09:16:54 2022
Process-1: 5/10 - Wed Mar 16 09:16:55 2022
Process-3: 2/10 - Wed Mar 16 09:16:55 2022
Process-2: 3/10 - Wed Mar 16 09:16:55 2022
...
...
...
</pre>

<pre>
$ ps ax |grep python
    598 ?        Ss     0:00 /usr/bin/python3 /usr/bin/networkd-dispatcher --run-startup-triggers
   1613 ?        S      0:01 /usr/bin/python3 /usr/share/system-config-printer/applet.py
   1653 ?        S      0:00 python3 /usr/lib/blueberry/safechild /usr/sbin/rfkill event
 671007 pts/1    Sl+    0:00 python3 process_pool_1.py
 671008 pts/1    S+     0:00 python3 process_pool_1.py
 671009 pts/1    S+     0:00 python3 process_pool_1.py
 671010 pts/1    S+     0:00 python3 process_pool_1.py
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
from concurrent.futures import ProcessPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(processName, delay, n):
    result = 0
&nbsp;
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(processName, counter, n, time.ctime(time.time())))
        result += delay
&nbsp;
    print("{}: DONE!".format(processName))
    return result
&nbsp;
&nbsp;
workers = 10
&nbsp;
with ProcessPoolExecutor(max_workers=workers) as executor:
    for w in range(workers):
        print(executor.submit(worker, "Process-{}".format(w + 1), 0.5 + w / 10.0, 10))
&nbsp;
print("Computing finished")
&nbsp;
print("Done!")
</pre>

<pre>
&lt;Future at 0x7f875948c340 state=running&gt;
&lt;Future at 0x7f8759493370 state=pending&gt;
&lt;Future at 0x7f8759493820 state=pending&gt;
&lt;Future at 0x7f8759493940 state=pending&gt;
&lt;Future at 0x7f8759493a60 state=pending&gt;
&lt;Future at 0x7f8759493b80 state=pending&gt;
&lt;Future at 0x7f8759493cd0 state=pending&gt;
&lt;Future at 0x7f8759493e80 state=pending&gt;
&lt;Future at 0x7f8759493fa0 state=pending&gt;
&lt;Future at 0x7f8758417100 state=pending&gt;
Process-1: 1/10 - Wed Mar 16 09:17:24 2022
Process-2: 1/10 - Wed Mar 16 09:17:24 2022
Process-3: 1/10 - Wed Mar 16 09:17:24 2022
Process-4: 1/10 - Wed Mar 16 09:17:24 2022
Process-5: 1/10 - Wed Mar 16 09:17:25 2022
Process-1: 2/10 - Wed Mar 16 09:17:25 2022
...
...
...
</pre>

<pre>
from concurrent.futures import ProcessPoolExecutor
import time
&nbsp;
&nbsp;
def <strong>worker</strong>(processName, delay, n):
    result = 0
&nbsp;
    for counter in range(1, n + 1):
        time.sleep(delay)
        print("{}: {}/{} - {}".format(processName, counter, n, time.ctime(time.time())))
        result += delay
&nbsp;
    print("{}: DONE!".format(processName))
    return result
&nbsp;
&nbsp;
workers = 10
&nbsp;
with ProcessPoolExecutor(max_workers=workers) as executor:
    results = [executor.submit(worker, "Process-{}".format(w + 1), 0.5 + w / 10.0, 10) for w in range(workers)]
&nbsp;
print("Computing finished")
&nbsp;
for result in results:
    print(result.result())
&nbsp;
print("Done!")
</pre>

<pre>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech <a
href="https://www.root.cz/clanky/soubezne-a-paralelne-bezici-ulohy-naprogramovane-v-pythonu/">minule</a>
i dnes popsaných demonstračních příkladů určených pro programovací jazyk
Python 3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem
stále velmi malý, dnes má velikost zhruba několik desítek kilobajtů),
můžete namísto toho použít odkazy na jednotlivé příklady, které
naleznete v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>multithreading1.py</td><td>spuštění tří vláken vykonávajících déletrvající činnost</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading1.py</a></td></tr>
<tr><td> 2</td><td>multithreading2.py</td><td>spuštění tří vláken, předání parametrů volaným funkcím</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading2.py</a></td></tr>
<tr><td> 3</td><td>multithreading3.py</td><td>explicitní čekání na dokončení běhu vláken metodou <strong>join</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading3.py</a></td></tr>
<tr><td> 4</td><td>multithreading4.py</td><td>sdílený objekt</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading4.py</a></td></tr>
<tr><td> 5</td><td>multithreading_join_deamon.py</td><td>čekání na dokončení vláken s&nbsp;příznakem &bdquo;daemon&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_join_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_join_deamon.py</a></td></tr>
<tr><td> 6</td><td>multithreading_no_join_deamon.py</td><td>vlákna s&nbsp;příznakem &bdquo;daemon&ldquo;, na jejichž ukončení se nečeká</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_deamon.py</a></td></tr>
<tr><td> 7</td><td>multithreading_no_join_no_deamon.py</td><td>běžná vlákna bez příznaku &bdquo;daemon&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_no_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_no_deamon.py</a></td></tr>
<tr><td> 8</td><td>multithreading_timeout.py</td><td>specifikace maximální doby čekání na ukončení vlákna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_timeout.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_timeout.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>multiprocessing1.py</td><td>zavolání funkce spuštěné v&nbsp;rámci dalšího procesu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing1.py</a></td></tr>
<tr><td>10</td><td>multiprocessing2.py</td><td>spuštění většího množství procesů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing2.py</a></td></tr>
<tr><td>11</td><td>multiprocessing3.py</td><td>nepatrná úprava předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing3.py</a></td></tr>
<tr><td>12</td><td>multiprocessing4.py</td><td>řízení workerů posílanými příkazy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing4.py</a></td></tr>
<tr><td>13</td><td>multiprocessing5.py</td><td>řízení workerů posílanými příkazy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing5.py</a></td></tr>
<tr><td>14</td><td>multiprocessing6.py</td><td>jeden proces a sdílená globální hodnota</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing6.py</a></td></tr>
<tr><td>15</td><td>multiprocessing7.py</td><td>více procesů, které nesdílí hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing7.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>queue_example.py</td><td>základní vlastnosti sdílené datové struktury <strong>Queue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queue_example.py</a></td></tr>
<tr><td>17</td><td>simple_queue_example.py</td><td>základní vlastnosti sdílené datové struktury <strong>SimpleQueue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/simple_queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/simple_queue_example.py</a></td></tr>
<tr><td>18</td><td>priority_queue_example.py</td><td>základní vlastnosti sdílené datové struktury <strong>PriorityQueue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/priority_queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/priority_queue_example.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>queues1.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: základní forma</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues1.py</a></td></tr>
<tr><td>20</td><td>queues2.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: více konzumentů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues2.py</a></td></tr>
<tr><td>21</td><td>queues3.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: více producentů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues3.py</a></td></tr>
<tr><td>22</td><td>queues4.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: více producentů i konzumentů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>thread_pool_1.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_1.py</a></td></tr>
<tr><td>24</td><td>thread_pool_2.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_2.py</a></td></tr>
<tr><td>25</td><td>thread_pool_3.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_3.py</a></td></tr>
<tr><td>26</td><td>thread_pool_4.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_4.py</a></td></tr>
<tr><td>27</td><td>thread_pool_5.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_5.py</a></td></tr>
<tr><td>28</td><td>thread_pool_6.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>29</td><td>process_pool_1.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_1.py</a></td></tr>
<tr><td>30</td><td>process_pool_2.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_2.py</a></td></tr>
<tr><td>31</td><td>process_pool_3.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_3.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Dokumentace Pythonu: balíček queue<br />
<a href="https://docs.python.org/3/library/queue.html">https://docs.python.org/3/library/queue.html</a>
</li>

<li>Dokumentace Pythonu: balíček threading<br />
<a href="https://docs.python.org/3/library/threading.html?">https://docs.python.org/3/library/threading.html?</a>
</li>

<li>Dokumentace Pythonu: balíček multiprocessing<br />
<a href="https://docs.python.org/3/library/multiprocessing.html">https://docs.python.org/3/library/multiprocessing.html</a>
</li>

<li>Dokumentace Pythonu: balíček asyncio<br />
<a href="https://docs.python.org/3/library/asyncio.html">https://docs.python.org/3/library/asyncio.html</a>
</li>

<li>Synchronization Primitives<br />
<a href="https://docs.python.org/3/library/asyncio-sync.html">https://docs.python.org/3/library/asyncio-sync.html</a>
</li>

<li>Coroutines<br />
<a href="https://docs.python.org/3/library/asyncio-task.html">https://docs.python.org/3/library/asyncio-task.html</a>
</li>

<li>Queues<br />
<a href="https://docs.python.org/3/library/asyncio-queue.html">https://docs.python.org/3/library/asyncio-queue.html</a>
</li>

<li>python-csp<br />
<a href="https://python-csp.readthedocs.io/en/latest/">https://python-csp.readthedocs.io/en/latest/</a>
</li>

<li>TrellisSTM<br />
<a href="http://peak.telecommunity.com/DevCenter/TrellisSTM">http://peak.telecommunity.com/DevCenter/TrellisSTM</a>
</li>

<li>Python Multithreading and Multiprocessing Tutorial<br />
<a href="https://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python">https://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python</a>
</li>

<li>ThreadPoolExecutor<br />
<a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor">https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor</a>
</li>

<li>ProcessPoolExecutor<br />
<a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor">https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

