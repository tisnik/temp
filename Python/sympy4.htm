<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Práce s vektory, maticemi a n-dimenzionálními poli v knihovně SymPy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Práce s vektory, maticemi a n-dimenzionálními poli v knihovně SymPy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtvrtém článku o knihovně SymPy určené pro provádění symbolických výpočtů v Pythonu se budeme zabývat především zpracováním vektorů matic. Některé operace jsou podobné operacím dostupným v knihovně NumPy, další podobné vlastnosti můžeme najít například v knihovně SciPy (řídké matice).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Práce s&nbsp;vektory, maticemi a n-dimenzionálními poli v&nbsp;knihovně SymPy</a></p>
<p><a href="#k02">2. Co si představit pod termínem &bdquo;pole&ldquo;?</a></p>
<p><a href="#k03">3. Čtyři varianty reprezentace matic v&nbsp;knihovně SymPy</a></p>
<p><a href="#k04">4. Konstrukce neměnného pole &ndash; matice</a></p>
<p><a href="#k05">5. Tisk obsahu matice funkcí <strong>sympy.pprint</strong></a></p>
<p><a href="#k06">6. Konstrukce vektoru a matice s&nbsp;využitím třídy <strong>range</strong></a></p>
<p><a href="#k07">7. Počet dimenzí a tvar n-dimenzionálního pole</a></p>
<p><a href="#k08">8. Změna tvaru n-dimenzionálního pole</a></p>
<p><a href="#k09">9. Řídká pole</a></p>
<p><a href="#k10">10. Nemodifikovatelná vs.&nbsp;modifikovatelná pole</a></p>
<p><a href="#k11">11. Vynásobení matice skalárem a součet matic (přetížené operátory)</a></p>
<p><a href="#k12">12. Transpozice matic</a></p>
<p><a href="#k13">13. Symbolická reprezentace matice</a></p>
<p><a href="#k14">14. Ukázka symbolické reprezentace matice</a></p>
<p><a href="#k15">15. Maticový součin v&nbsp;symbolické podobě</a></p>
<p><a href="#k16">16. Transpozice matic v&nbsp;symbolické podobě</a></p>
<p><a href="#k17">17. Výpočet inverzní matice</a></p>
<p><a href="#k18">18. Výpočet inverze maticového součinu</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Práce s&nbsp;vektory, maticemi a n-dimenzionálními poli v&nbsp;knihovně SymPy</h2>

<p>Ve čtvrtém článku o knihovně SymPy (předchozí části jsou dostupné v&nbsp;[<a
href="https://www.root.cz/clanky/sympy-knihovna-pro-symbolicke-vypocty-zapsane-primo-v-pythonu/">1</a>],
[<a
href="https://www.root.cz/clanky/sympy-knihovna-pro-symbolicke-vypocty-zapsane-primo-v-pythonu-2-cast/">2</a>]
a [<a
href="https://www.root.cz/clanky/analyza-funkci-s-vyuzitim-knihovny-sympy/">3</a>]),
která je primárně určena pro provádění symbolických výpočtů <a
href="https://www.root.cz/n/python/">v&nbsp;Pythonu</a>, se budeme zabývat
především zpracováním vektorů a matic. Některé dále popsané operace jsou
podobné operacím dostupným v&nbsp;knihovně <a
href="https://numpy.org/">NumPy</a>, další podobné vlastnosti můžeme najít
například v&nbsp;knihovně <a href="https://scipy.org/">SciPy</a> (řídké matice
atd.). Ovšem pro <i>SymPy</i> unikátní je podpora pro symbolické výpočty
s&nbsp;maticemi.</p>

<p>Dnes se tedy začneme zabývat jednou poměrně rozsáhlou a současně i poněkud
specifickou oblastí v&nbsp;informatice. Tou je zpracování vektorů, matic a
taktéž vícerozměrných polí &ndash; obecně se v&nbsp;tomto kontextu mluví o
n-rozměrných polích. S&nbsp;těmito velmi užitečnými datovými strukturami se
můžeme setkat v&nbsp;různých (mnohdy zdánlivě i velmi vzdálených) disciplínách,
například ve finančnictví, pojišťovnictví, statistice, zpracování numerických
dat, simulacích, zpracování 1D a 2D signálů atd. Zapomenout ovšem nesmíme ani
na strojové učení (<i>machine learning</i>) a umělou inteligencí (<i>artifical
intelligence</i>), protože například datové struktury určené pro uložení
neuronových sítí (zejména konvolučních sítí) jsou realizovány n-rozměrnými
poli. Současně se jedná i o velmi zajímavou oblast, neboť právě kvůli nutnosti
co nejrychlejší práce s&nbsp;velkými maticemi byly vytvořeny speciální
výpočetní bloky v&nbsp;některých superpočítačích (příkladem mohou být
superpočítače <i>Cray</i>) a došlo tak k&nbsp;důležitému podnětu pro další
rozvoj výpočetní techniky (ten nepřímo vedl k&nbsp;vývoji moderních GPU). A
pokud zůstaneme u 1D a 2D polí &ndash; zde došlo k&nbsp;rozšíření digitálních
signálových procesorů orientovaných a optimalizovaných právě na tuto
oblast.</p>

<p>Operace s&nbsp;poli jsou buď součástí syntaxe a sémantiky programovacích
jazyků nebo jsou realizovány formou knihovny. V&nbsp;ekosystému programovacího
jazyka Python se v&nbsp;první řadě jedná o <a href="https://numpy.org/">již
výše zmíněnou knihovnu NumPy</a>, ovšem operace s&nbsp;vektory a maticemi
(obecně s&nbsp;poli) jsou ve skutečnosti podporovány i v&nbsp;knihovně
<i>SymPy</i>. A právě tímto tématem se budeme zabývat v&nbsp;dnešním
článku.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Co si představit pod termínem &bdquo;pole&ldquo;?</h2>

<p>V&nbsp;programovacích jazycích se termín &bdquo;pole&ldquo;
resp.&nbsp;<i>array</i> používá velmi často, ovšem ani zdaleka ne konzistentně.
V&nbsp;případě, že se v&nbsp;dokumentaci jazyka bez dalších podrobností termín
<i>array</i> použije, je vhodné hledat odpovědi na následující otázky:</p>

<ol>

<li>Kolik dimenzí může pole mít? Typicky 1 a 2, někdy i více.</li>

<li>Začínají indexy prvků od 0, 1 či je první index volitelný?</li>

<li>Jsou podporována obdélníková pole nebo nepravidelná pole?</li>

<li>Jsou jednotlivé osy na sobě nezávislé? (což vylučuje nepravidelná
pole)</li>

<li>Je možné indexy na jednotlivých osách pojmenovat? (a vytvořit tak vlastně
datový rámec)</li>

<li>Jedná se o homogenní nebo o heterogenní datovou strukturu? Homogenní
struktura může uchovávat prvky jediného (typicky předem definovaného) typu
zatímco v&nbsp;heterogenní struktuře mohou být umístěny prvky různých
typů.</li>

<li>Je nějakým způsobem omezen datový typ prvků pole? (například jen na celá
čísla a čísla reálná).</li>

<li>Lze prvky pole měnit (<i>mutable</i>) nebo je pole neměnitelné
(<i>immutable</i>).</li>

<li>Pokud jsou pole heterogenní a měnitelná, může prvek pole obsahovat to samé
pole?</li>

<li>Obsahuje pole přímo hodnoty prvků nebo jen reference na prvky?</li>

<li>Jsou prvky v&nbsp;poli uloženy v&nbsp;operační paměti za sebou nebo se
jedná o strukturu s&nbsp;ukazateli?</li>

<li>Jsou prvky v&nbsp;2D poli uloženy po řádcích nebo po sloupcích? (C versus
Fortran).</li>

<li>Lze měnit tvar (<i>shape</i>) pole?</li>

<li>Podporuje jazyk operace nad celými poli?</li>

<li>Podporuje jazyk takzvaný <i>broadcasting</i> (aplikaci skaláru na všechny
prvky pole atd.)?</li>

<li>Jsou pole plnohodnotným datovým typem nebo speciální strukturou?</li>

<li>Je podporován &bdquo;literál typu pole&ldquo;?</li>

</ol>

<p><div class="rs-tip-major">Poznámka: jak uvidíme dále, má termín
&bdquo;pole&ldquo; resp.&nbsp;&bdquo;array&ldquo; v&nbsp;knihovně <i>SymPy</i>
hned čtyři různé významy a používá se typicky pro reprezentaci matic
s&nbsp;rozdílnými vlastnostmi.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Čtyři varianty reprezentace matic v&nbsp;knihovně SymPy</h2>

<p>V&nbsp;knihovně SymPy je možné hodnoty ukládat do čtyř typů polí, jejichž
názvy i stručný popis jsou uvedeny v&nbsp;následující tabulce:</p>

<table>
<tr><th>Třída</th><th>Stručný popis</th><th>Zdrojový kód</th></tr>
<tr><td>sympy.tensor.array.ImmutableDenseNDimArray</td><td>nemodifikovatelné pole</td><td><a href="https://github.com/sympy/sympy/blob/77f1d79c705da5e9b3dee456a14b1b4e92dd620c/sympy/tensor/array/dense_ndim_array.py#L132-L161 ">link</a></td></tr>
<tr><td>sympy.tensor.array.ImmutableSparseNDimArray</td><td>nemodifikovatelné řídké pole</td><td><a href="https://github.com/sympy/sympy/blob/77f1d79c705da5e9b3dee456a14b1b4e92dd620c/sympy/tensor/array/sparse_ndim_array.py#L104-L135">link</a></td></tr>
<tr><td>sympy.tensor.array.MutableDenseNDimArray</td><td>modifikovatelné pole</td><td><a href="https://github.com/sympy/sympy/blob/77f1d79c705da5e9b3dee456a14b1b4e92dd620c/sympy/tensor/array/dense_ndim_array.py#L163-L209 ">link</a></td></tr>
<tr><td>sympy.tensor.array.MutableSparseNDimArray</td><td>modifikovatelné řídké pole</td><td><a href="https://github.com/sympy/sympy/blob/77f1d79c705da5e9b3dee456a14b1b4e92dd620c/sympy/tensor/array/sparse_ndim_array.py#L138-L196">link</a></td></tr>
</table>

<p>Vidíme tedy, že ony čtyři varianty N-dimenzionálních polí můžeme rozdělit
podle dvou kritérií:</p>

<ol>

<li>Modifikovatelné vs.&nbsp;nemodifikovatelné, tedy podle toho, zda je možné
obsah pole měnit či nikoli (tedy zda lze zapisovat nové hodnoty prvků).</li>

<li>&bdquo;Husté&ldquo; vs.&nbsp;&bdquo;řídké&ldquo; pole, přičemž řídké pole
je uloženo takovým způsobem, aby nebylo nutné explicitně ukládat prvky
s&nbsp;nejčastější hodnotou (typicky se jedná o nulovou hodnotu).</li>

</ol>



<p><a name="k04"></a></p>
<h2 id="k04">4. Konstrukce neměnného pole &ndash; matice</h2>

<p>Pro konstrukci neměnného (<i>immutable</i>) pole, ať již se má jednat o
vektor, matici, či o vícedimenzionální pole, se používá konstruktor nazvaný
jednoduše <strong>Array</strong>. Tomuto konstruktoru postačuje předat seznam,
n-tici či seznam seznamů s&nbsp;prvky vloženými do budoucího pole.</p>

<p>V&nbsp;dnešním prvním demonstračním příkladu vytvoříme dvojrozměrné pole
z&nbsp;prvků předaných v&nbsp;seznamu seznamů:</p>

<pre>
import sympy as sp
&nbsp;
a = <strong>sp.Array</strong>([
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]])
&nbsp;
print(a)
print(type(a))
</pre>

<p>Pole se při použití standardní funkce <strong>print</strong> vypíše tímto
způsobem:</p>

<pre>
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
</pre>

<p>Přičemž jeho typ je následující:</p>

<pre>
&lt;class 'sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray'&gt;
</pre>

<p>Naprosto stejným způsobem lze pole zkonstruovat z&nbsp;prvků předaných
v&nbsp;n-tici (což je neměnitelná obdoba seznamů):</p>

<pre>
import sympy as sp
&nbsp;
a = <strong>sp.Array</strong>((
        (1, 2, 3),
        (4, 5, 6),
        (7, 8, 9)))
&nbsp;
print(a)
print(type(a))
</pre>

<p>Výsledkem bude pole (matice) zcela totožné s&nbsp;polem předchozím:</p>

<pre>
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&lt;class 'sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray'&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se skutečně jedná o
neměnnou (neřídkou) matici &ndash; <i>ImmutableDenseNDimArray</i>.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Tisk obsahu matice funkcí <strong>sympy.pprint</strong></h2>

<p>Tisk matice či dokonce vícerozměrného pole ve tvaru:</p>

<pre>
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
</pre>

<p>je poměrně nečitelný. Ovšem jak již víme z&nbsp;předchozích článků,
podporuje knihovna <i>SymPy</i> i &bdquo;pěkný&ldquo; tisk realizovaný funkcí
<strong>sympy.pprint</strong>. Její chování si můžeme otestovat velmi
snadno:</p>

<pre>
import sympy as sp
&nbsp;
a = sp.Array([
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]])
&nbsp;
<strong>sp.pprint(a)</strong>
</pre>

<p>Po spuštění tohoto skriptu by se na terminál měl vypsat následující
výsledek:</p>

<pre>
⎡1  2  3⎤
⎢       ⎥
⎢4  5  6⎥
⎢       ⎥
⎣7  8  9⎦
</pre>

<p><div class="rs-tip-major">Poznámka: předpokladem pro korektní tisk matice je
to, že terminál podporuje Unicode, což je vlastnost naprosté většiny moderních
emulací terminálu.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Konstrukce vektoru a matice s&nbsp;využitím třídy <strong>range</strong></h2>

<p>Konstruktor <strong>sympy.Array</strong> akceptuje jako svůj první parametr
i instanci standardní třídy <strong>range</strong>. Můžeme tak velmi snadno
zkonstruovat například jednorozměrný vektor, a to konkrétně následující
konstrukcí:</p>

<pre>
import sympy as sp
&nbsp;
a = <strong>sp.Array(range(9))</strong>
&nbsp;
sp.pprint(a)
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
[0  1  2  3  4  5  6  7  8]
</pre>

<p>Pro konstrukci (dvourozměrné) matice je navíc nutné konstruktoru
<strong>Array</strong> předat i <i>tvar</i> (<i>shape</i>) matice; v&nbsp;našem
případě konkrétně půjde o matici se čtyřmi řádky a třemi sloupci. Tvar matice
se předává n-ticí nebo seznamem:</p>

<pre>
import sympy as sp
&nbsp;
a = <strong>sp.Array(range(12), <u>(4,3)</u>)</strong>
&nbsp;
sp.pprint(a)
</pre>

<p>Nyní bude výsledek získaný po spuštění skriptu vypadat takto:</p>

<pre>
⎡0  1   2 ⎤
⎢         ⎥
⎢3  4   5 ⎥
⎢         ⎥
⎢6  7   8 ⎥
⎢         ⎥
⎣9  10  11⎦
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Počet dimenzí a tvar n-dimenzionálního pole</h2>

<p>Počet dimenzí pole je možné zjistit metodou nazvanou <strong>rank</strong>
zatímco takzvaný tvar pole (počet prvků ve směru jednotlivých os) se kupodivu
nezjišťuje metodou, ale je uložen v&nbsp;atributu <strong>shape</strong>.
Nejdříve se podívejme na zjištění těchto dvou velmi důležitých vlastností
n-dimenzionálních polí pro jednodimenzionální vektor:</p>

<pre>
import sympy as sp
&nbsp;
a = sp.Array(range(9))
&nbsp;
sp.pprint(a)
print(<strong>a.rank()</strong>)
print(<strong>a.shape</strong>)
</pre>

<p>Výsledek:</p>

<pre>
[0  1  2  3  4  5  6  7  8]
1
(9,)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že tvar (<i>shape</i>) je
vrácen formou n-tice, přičemž počet prvků této n-tice odpovídá hodnotě
<strong>rank()</strong>.</div></p>

<p>Podobný příklad, ovšem pro dvourozměrnou matici:</p>

<pre>
import sympy as sp
&nbsp;
a = sp.Array(<strong>range(12), (4,3)</strong>)
&nbsp;
sp.pprint(a)
print(<strong>a.rank()</strong>)
print(<strong>a.shape</strong>)
</pre>

<p>S&nbsp;výsledky:</p>

<pre>
⎡0  1   2 ⎤
⎢         ⎥
⎢3  4   5 ⎥
⎢         ⎥
⎢6  7   8 ⎥
⎢         ⎥
⎣9  10  11⎦
&nbsp;
2
(4, 3)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Změna tvaru n-dimenzionálního pole</h2>

<p>Další velmi důležitou operací, s&nbsp;níž se v&nbsp;praxi často setkáme, je
operace nazvaná <strong>reshape()</strong>, která dokáže změnit velikost matice
a vhodným způsobem přeorganizovat prvky v&nbsp;původní matici (operace je
převzata z&nbsp;jazyka APL &ndash; jak jinak). Tato operace je představována
metodou nazvanou <strong>reshape</strong> se předává tvar nového
n-dimenzionálního pole. Původní pole přitom zůstane nezměněno.</p>

<p>V&nbsp;dalším demonstračním příkladu nejdříve vytvoříme jednodimenzionální
vektor se šestnácti prvky a následně z&nbsp;tohoto vektoru vytvoříme
dvoudimenzionální matice i pole se třemi dimenzemi. Povšimněte si, že ve všech
případech je zachován počet prvků vytvořeného n-dimenzionálního pole (16):</p>

<pre>
import sympy as sp
&nbsp;
a1 = sp.Array(range(16))
sp.pprint(a1)
&nbsp;
print()
&nbsp;
a2 = <strong>a1.reshape(2,8)</strong>
sp.pprint(a2)
&nbsp;
print()
&nbsp;
a3 = <strong>a1.reshape(4,4)</strong>
sp.pprint(a3)
&nbsp;
print()
&nbsp;
a4 = <strong>a1.reshape(4,2,2)</strong>
sp.pprint(a4)
&nbsp;
print()
&nbsp;
a5 = <strong>a1.reshape(2,4,2)</strong>
sp.pprint(a5)
&nbsp;
print()
&nbsp;
a6 = <strong>a1.reshape(2,2,4)</strong>
sp.pprint(a6)
&nbsp;
print()
</pre>

<p>Výsledná pole získaná tímto skriptem:</p>

<p>Původní vektor se šestnácti prvky:</p>

<pre>
[0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15]
</pre>

<p>Dvourozměrné matice:</p>

<pre>
⎡0  1  2   3   4   5   6   7 ⎤
⎢                            ⎥
⎣8  9  10  11  12  13  14  15⎦
&nbsp;
⎡0   1   2   3 ⎤
⎢              ⎥
⎢4   5   6   7 ⎥
⎢              ⎥
⎢8   9   10  11⎥
⎢              ⎥
⎣12  13  14  15⎦
</pre>

<p>Trojrozměrná pole:</p>

<pre>
&nbsp;
⎡⎡0  1⎤  ⎡4  5⎤  ⎡8   9 ⎤  ⎡12  13⎤⎤
⎢⎢    ⎥  ⎢    ⎥  ⎢      ⎥  ⎢      ⎥⎥
⎣⎣2  3⎦  ⎣6  7⎦  ⎣10  11⎦  ⎣14  15⎦⎦
&nbsp;
⎡⎡0  1⎤  ⎡8   9 ⎤⎤
⎢⎢    ⎥  ⎢      ⎥⎥
⎢⎢2  3⎥  ⎢10  11⎥⎥
⎢⎢    ⎥  ⎢      ⎥⎥
⎢⎢4  5⎥  ⎢12  13⎥⎥
⎢⎢    ⎥  ⎢      ⎥⎥
⎣⎣6  7⎦  ⎣14  15⎦⎦
&nbsp;
⎡⎡0  1  2  3⎤  ⎡8   9   10  11⎤⎤
⎢⎢          ⎥  ⎢              ⎥⎥
⎣⎣4  5  6  7⎦  ⎣12  13  14  15⎦⎦
</pre>

<p>Vytvořit lze pochopitelně i pole s&nbsp;větším počtem dimenzí:</p>

<pre>
import sympy as sp
&nbsp;
a1 = sp.Array(range(16))
sp.pprint(a1)
print(a1.rank())
print(a1.shape)
&nbsp;
print()
&nbsp;
a2 = <strong>a1.reshape(2,2,2,2)</strong>
sp.pprint(a2)
print(a2.rank())
print(a2.shape)
</pre>

<p>Výsledkem činnosti tohoto skriptu bude pole 2&times;2&times;2&times;2
prvky:</p>

<pre>
[0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15]
&nbsp;
1
(16,)
&nbsp;
&nbsp;
⎡ ⎡0  1⎤    ⎡4  5⎤ ⎤
⎢ ⎢    ⎥    ⎢    ⎥ ⎥
⎢ ⎣2  3⎦    ⎣6  7⎦ ⎥
⎢                  ⎥
⎢⎡8   9 ⎤  ⎡12  13⎤⎥
⎢⎢      ⎥  ⎢      ⎥⎥
⎣⎣10  11⎦  ⎣14  15⎦⎦
&nbsp;
4
(2, 2, 2, 2)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Řídká pole</h2>

<p>V&nbsp;mnoha oblastech se poměrně často setkáme se situací, kdy je nutné
pracovat s&nbsp;obrovskými n-rozměrnými poli (typicky s&nbsp;maticemi), které
ovšem převážně obsahují prvky se shodnou hodnotou. Příkladem mohou být takzvané
<i>matice incidence</i> používané pro reprezentaci grafů. V&nbsp;případě, že má
graf relativně velké množství uzlů, ovšem málo hran, bude matice incidence
obsahovat mnoho nulových prvků. A právě v&nbsp;těchto případech je možné využít
takzvané <i>řídké matice</i> resp.&nbsp;obecně <i>řídká n-rozměrná pole</i>
(<i>sparse array</i>). Podívejme se nyní na rozdílný způsob konstrukce
&bdquo;hustých&ldquo; a &bdquo;řídkých&ldquo; polí. Nejdříve zkonstruujeme
&bdquo;hustou&ldquo; neměnitelnou matici o rozměrech 5&times;5 prvků, která
bude obsahovat dvacet pět nulových prvků:</p>

<pre>
import sympy as sp
&nbsp;
a1 = <u>sp.Array</u>(<strong>[0]*25</strong>)
a2 = <strong>a1.reshape(5,5)</strong>
&nbsp;
print(type(a2))
print()
&nbsp;
sp.pprint(a2)
</pre>

<p>Tento skript nejdříve vypíše typ pole a posléze i jeho obsah:</p>

<pre>
&lt;class 'sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray'&gt;
&nbsp;
⎡0  0  0  0  0⎤
⎢             ⎥
⎢0  0  0  0  0⎥
⎢             ⎥
⎢0  0  0  0  0⎥
⎢             ⎥
⎢0  0  0  0  0⎥
⎢             ⎥
⎣0  0  0  0  0⎦
</pre>

<p>Naproti tomu řídkou matici musíme vytvořit konstruktorem
<strong>ImmutableSparseNDimArray</strong> či
<strong>MutableSparseNDimArray</strong>, a to následujícím způsobem:</p>

<pre>
import sympy as sp
&nbsp;
a1 = <u>sp.ImmutableSparseNDimArray</u>(<strong>[0]*25</strong>)
a2 = <strong>a1.reshape(5,5)</strong>
&nbsp;
print(type(a2))
print()
&nbsp;
sp.pprint(a2)
</pre>

<p>I tento skript nejdříve vypíše typ pole a posléze i jeho obsah:</p>

<pre>
&lt;class 'sympy.tensor.array.sparse_ndim_array.ImmutableSparseNDimArray'&gt;
&nbsp;
⎡0  0  0  0  0⎤
⎢             ⎥
⎢0  0  0  0  0⎥
⎢             ⎥
⎢0  0  0  0  0⎥
⎢             ⎥
⎢0  0  0  0  0⎥
⎢             ⎥
⎣0  0  0  0  0⎦
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Nemodifikovatelná vs.&nbsp;modifikovatelná pole</h2>

<p>N-rozměrné pole vytvořené konstruktory <strong>Array</strong>,
<strong>ImmutableDenseNDimArray</strong> či
<strong>ImmutableSparseNDimArray</strong> je neměnitelné (nemodifikovatelné),
což znamená, že ani není možné měnit hodnotu jeho prvků. Opět si to
pochopitelně můžeme otestovat na jednoduchém příkladu, v&nbsp;němž se pokusíme
změnit hodnotu prostředního prvku v&nbsp;matici (povšimněte si způsobu zápisu
&bdquo;souřadnic&ldquo; tohoto prvku s&nbsp;využitím n-tice):</p>

<pre>
import sympy as sp
&nbsp;
a1 = sp.ImmutableSparseNDimArray([0]*25)
a2 = a1.reshape(5,5)
&nbsp;
print(type(a2))
print()
&nbsp;
sp.pprint(a2)
&nbsp;
<strong>a2[(2,2)] = 42</strong>
&nbsp;
print()
&nbsp;
sp.pprint(a2)
</pre>

<p>Tento příklad nejprve vypíše typ pole:</p>

<pre>
&lt;class 'sympy.tensor.array.sparse_ndim_array.ImmutableSparseNDimArray'&gt;
</pre>

<p>Následně jeho původní obsah:</p>

<pre>
⎡0  0  0  0  0⎤
⎢             ⎥
⎢0  0  0  0  0⎥
⎢             ⎥
⎢0  0  0  0  0⎥
⎢             ⎥
⎢0  0  0  0  0⎥
⎢             ⎥
⎣0  0  0  0  0⎦
</pre>

<p>A po pokusu o modifikaci prvku pole tento skript zhavaruje:</p>

<pre>
Traceback (most recent call last):
  File "/home/user/sympy69.py", line 11, in &lt;module&gt;
    a2[(2,2)] = 42
  File "/home/user/.local/lib/python3.10/site-packages/sympy/tensor/array/sparse_ndim_array.py", line 132, in __setitem__
    raise TypeError("immutable N-dim array")
TypeError: immutable N-dim array
</pre>

<p>Situaci napravíme jednoduše, a to použitím konstruktoru
<strong>MutableDenseNDimArray</strong> nebo
<strong>MutableSparseNDimArray</strong>:</p>

<pre>
import sympy as sp
&nbsp;
a1 = <strong>sp.MutableSparseNDimArray([0]*25)</strong>
a2 = a1.reshape(5,5)
&nbsp;
print(type(a2))
print()
&nbsp;
sp.pprint(a2)
&nbsp;
<strong>a2[(2,2)] = 42</strong>
&nbsp;
print()
&nbsp;
sp.pprint(a2)
</pre>

<p>Chování skriptu &ndash; nejdříve vypíše typ pole:</p>

<pre>
&lt;class 'sympy.tensor.array.sparse_ndim_array.MutableSparseNDimArray'&gt;
</pre>

<p>Dále se zobrazí původní pole před jeho modifikací:</p>

<pre>
⎡0  0  0  0  0⎤
⎢             ⎥
⎢0  0  0  0  0⎥
⎢             ⎥
⎢0  0  0  0  0⎥
⎢             ⎥
⎢0  0  0  0  0⎥
⎢             ⎥
⎣0  0  0  0  0⎦
</pre>

<p>Pole po modifikaci &ndash; povšimněte si prvku uprostřed pole (matice):</p>

<pre>
⎡0  0  0   0  0⎤
⎢              ⎥
⎢0  0  0   0  0⎥
⎢              ⎥
⎢0  0  42  0  0⎥
⎢              ⎥
⎢0  0  0   0  0⎥
⎢              ⎥
⎣0  0  0   0  0⎦
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vynásobení matice skalárem a součet matic (přetížené operátory)</h2>

<p>Knihovna <i>SymPy</i> podporuje provádění základních operací s&nbsp;maticemi
s&nbsp;využitím přetížených (původně většinou aritmetických) operátorů.
V&nbsp;následujícím příkladu je ukázáno, jak lze využít přetížené operátory * a
+ pro vynásobení všech prvků matice skalární hodnotou a následně pro součet
matic (které by měly mít stejný počet dimenzí i shodný tvar):</p>

<pre>
import sympy as sp
&nbsp;
a1 = sp.ImmutableSparseNDimArray(range(12))
a2 = a1.reshape(3,4)
&nbsp;
sp.pprint(a2)
&nbsp;
print()
&nbsp;
<strong>a3 = 2*a2</strong>
sp.pprint(a3)
&nbsp;
print()
&nbsp;
<strong>a4 = a2 + a3</strong>
sp.pprint(a4)
</pre>

<p>Původní matice vypsaná skriptem:</p>

<pre>
⎡0  1  2   3 ⎤
⎢            ⎥
⎢4  5  6   7 ⎥
⎢            ⎥
⎣8  9  10  11⎦
</pre>

<p>Nová matice vytvořená vynásobení všech prvků původní matice skalární
hodnotou:</p>

<pre>
⎡0   2   4   6 ⎤
⎢              ⎥
⎢8   10  12  14⎥
⎢              ⎥
⎣16  18  20  22⎦
</pre>

<p>Další matice, která vznikla součtem obou předchozích matic:</p>

<pre>
⎡0   3   6   9 ⎤
⎢              ⎥
⎢12  15  18  21⎥
⎢              ⎥
⎣24  27  30  33⎦
</pre>

<p><div class="rs-tip-major">Poznámka: předchozí příklad bude funkční se všemi
čtyřmi typy matic (resp.&nbsp;polí).</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Transpozice matic</h2>

<p>Knihovna <i>SymPy</i> podporuje i transpozici matic. Pro tento účel se
používá metoda nazvaná <strong>transpose()</strong>, která vrátí novou matici,
jež je odvozena z&nbsp;matice zdrojové. Opět se pochopitelně podíváme na
příklad:</p>

<pre>
import sympy as sp
&nbsp;
a1 = sp.ImmutableSparseNDimArray(range(12))
a2 = a1.reshape(3,4)
&nbsp;
sp.pprint(a2)
&nbsp;
print()
&nbsp;
a3 = <strong>a2.transpose()</strong>
sp.pprint(a3)
</pre>

<p>Tento skript nejdříve zobrazí původní matici a posléze matici
transponovanou:</p>

<pre>
⎡0  1  2   3 ⎤
⎢            ⎥
⎢4  5  6   7 ⎥
⎢            ⎥
⎣8  9  10  11⎦
&nbsp;
⎡0  4  8 ⎤
⎢        ⎥
⎢1  5  9 ⎥
⎢        ⎥
⎢2  6  10⎥
⎢        ⎥
⎣3  7  11⎦
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Symbolická reprezentace matice</h2>

<p>Jméno knihovny <i>SymPy</i> je odvozeno od slova &bdquo;symbolic&ldquo;, což
znamená, že manipulace s&nbsp;matematickými vztahy (typicky s&nbsp;rovnicemi,
ale například i se zápisem transformací typu derivace a integrace) je prováděn
v&nbsp;symbolické formě, nikoli numericky. To do jisté míry platí i pro matice.
Prozatím jsme s&nbsp;maticemi (a obecně n-dimenzionálními poli) pracovali jako
s&nbsp;kontejnery na numerické hodnoty, s&nbsp;nimiž je možné provádět
numerické operace (maticový součin atd.), ovšem <i>SymPy</i> umožňuje na matice
nahlížet taktéž jako na kontejnery, v&nbsp;nichž má každý prvek určité
symbolické jméno, například A₁₂. Takové matice se konstruují s&nbsp;využitím
konstruktoru <strong>MatrixSymbol</strong>, který použijeme v&nbsp;navazujících
kapitolách. A operace s&nbsp;takovými maticemi jsou opět prováděny na
symbolické úrovni, tj.&nbsp;výsledkem typicky bývají opět
&bdquo;symbolické&ldquo; matice.</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Ukázka symbolické reprezentace matice</h2>

<p>V&nbsp;této kapitole si ukážeme, jak se pracuje se symbolickou reprezentací
matice. Takovou matici je zapotřebí deklarovat, přičemž namísto nám již známého
konstruktoru <strong>Symbols</strong> použijeme konstruktor
<strong>MatrixSymbol</strong>, jemuž se kromě symbolického jména matice
předávají i její rozměry. Matice se třemi řádky a čtyřmi sloupci se zkonstruuje
takto:</p>

<pre>
a = <strong>sp.MatrixSymbol("A", 3, 4)</strong>
</pre>

<p>Taková matice se vypíše v&nbsp;symbolické podobě příkazem:</p>

<pre>
sp.pprint(<strong>sp.Matrix(a)</strong>)
</pre>

<p>Podívejme se na skript, který tyto operace provádí:</p>

<pre>
import sympy as sp
&nbsp;
a = <strong>sp.MatrixSymbol("A", 3, 4)</strong>
print(a)
&nbsp;
print()
&nbsp;
print(<strong>sp.Matrix(a)</strong>)
&nbsp;
print()
&nbsp;
sp.pprint(<strong>sp.Matrix(a)</strong>)
</pre>

<p>Tento skript postupně zobrazí jméno matice (jako symbolu), obsah matice
v&nbsp;&bdquo;řádkové&ldquo; formě a obsah matice v&nbsp;&bdquo;čitelné&ldquo;
formě:</p>

<pre>
A
&nbsp;
Matrix([[A[0, 0], A[0, 1], A[0, 2], A[0, 3]], [A[1, 0], A[1, 1], A[1, 2], A[1, 3]], [A[2, 0], A[2, 1], A[2, 2], A[2, 3]]])
&nbsp;
⎡A₀₀  A₀₁  A₀₂  A₀₃⎤
⎢                  ⎥
⎢A₁₀  A₁₁  A₁₂  A₁₃⎥
⎢                  ⎥
⎣A₂₀  A₂₁  A₂₂  A₂₃⎦
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se při výstupu na
terminál využívá Unicode pro zápis indexů (nejedná se tedy o původní ASCII
číslice).</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Maticový součin v&nbsp;symbolické podobě</h2>

<p>Vyzkoušejme si nyní, jak vlastně bude vypadat maticový součin pro matice
zapsané v&nbsp;symbolické podobě. Výsledkem by přitom opět měla být matice
v&nbsp;symbolické podobě. Nejdříve obě matice vytvoříme:</p>

<pre>
a = sp.MatrixSymbol("A", 3, 4)
b = sp.MatrixSymbol("B", 4, 3)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že matice jsou
&bdquo;kompatibilní&ldquo; z&nbsp;hlediska součinu, protože počet sloupců první
matice odpovídá počtu řádků matice druhé.</div></p>

<p>Nyní vypočteme součin a necháme si zobrazit výslednou matici:</p>

<pre>
c = a*b
sp.pprint(sp.Matrix(c))
</pre>

<p>Úplný skript provádějící tuto operaci vypadá následovně:</p>

<pre>
import sympy as sp
&nbsp;
a = <strong>sp.MatrixSymbol("A", 3, 4)</strong>
b = <strong>sp.MatrixSymbol("B", 4, 3)</strong>
&nbsp;
sp.pprint(sp.Matrix(a))
&nbsp;
print()
&nbsp;
sp.pprint(sp.Matrix(b))
&nbsp;
print()
&nbsp;
<strong>c = a*b</strong>
sp.pprint(<strong>sp.Matrix(c)</strong>)
</pre>

<p>První matice vstupující do součinu:</p>

<pre>
⎡A₀₀  A₀₁  A₀₂  A₀₃⎤
⎢                  ⎥
⎢A₁₀  A₁₁  A₁₂  A₁₃⎥
⎢                  ⎥
⎣A₂₀  A₂₁  A₂₂  A₂₃⎦
</pre>

<p>Druhá matice vstupující do součinu:</p>

<pre>
⎡B₀₀  B₀₁  B₀₂⎤
⎢             ⎥
⎢B₁₀  B₁₁  B₁₂⎥
⎢             ⎥
⎢B₂₀  B₂₁  B₂₂⎥
⎢             ⎥
⎣B₃₀  B₃₁  B₃₂⎦
</pre>

<p>Symbolicky zapsaný výsledek maticového součinu</p>

<pre>
⎡A₀₀⋅B₀₀ + A₀₁⋅B₁₀ + A₀₂⋅B₂₀ + A₀₃⋅B₃₀  A₀₀⋅B₀₁ + A₀₁⋅B₁₁ + A₀₂⋅B₂₁ + A₀₃⋅B₃₁  A₀₀⋅B₀₂ + A₀₁⋅B₁₂ + A₀₂⋅B₂₂ + A₀₃⋅B₃₂⎤
⎢                                                                                                                   ⎥
⎢A₁₀⋅B₀₀ + A₁₁⋅B₁₀ + A₁₂⋅B₂₀ + A₁₃⋅B₃₀  A₁₀⋅B₀₁ + A₁₁⋅B₁₁ + A₁₂⋅B₂₁ + A₁₃⋅B₃₁  A₁₀⋅B₀₂ + A₁₁⋅B₁₂ + A₁₂⋅B₂₂ + A₁₃⋅B₃₂⎥
⎢                                                                                                                   ⎥
⎣A₂₀⋅B₀₀ + A₂₁⋅B₁₀ + A₂₂⋅B₂₀ + A₂₃⋅B₃₀  A₂₀⋅B₀₁ + A₂₁⋅B₁₁ + A₂₂⋅B₂₁ + A₂₃⋅B₃₁  A₂₀⋅B₀₂ + A₂₁⋅B₁₂ + A₂₂⋅B₂₂ + A₂₃⋅B₃₂⎦
</pre>

<p><div class="rs-tip-major">Poznámka: výsledkem je tedy matice 3&times;3
prvky.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Transpozice matic v&nbsp;symbolické podobě</h2>

<p>Pro získání transponované matice v&nbsp;symbolické podobě postačuje (což je
zvláštní) přistoupit k&nbsp;atributu <strong>T</strong>. Je tomu tak
z&nbsp;toho důvodu, že se zápis atributu do určité míry přibližuje zápisu
M<sup>T</sup>, který nelze takto přímo v&nbsp;Pythonu použít:</p>

<pre>
import sympy as sp
&nbsp;
a = sp.MatrixSymbol("A", 3, 4)
&nbsp;
sp.pprint(sp.Matrix(a))
&nbsp;
print()
&nbsp;
sp.pprint(sp.Matrix(<strong>a.T</strong>))
</pre>

<p>Tento skript nejdříve vypíše původní matici a posléze matici
transponovanou:</p>

<pre>
⎡A₀₀  A₀₁  A₀₂  A₀₃⎤
⎢                  ⎥
⎢A₁₀  A₁₁  A₁₂  A₁₃⎥
⎢                  ⎥
⎣A₂₀  A₂₁  A₂₂  A₂₃⎦
&nbsp;
⎡A₀₀  A₁₀  A₂₀⎤
⎢             ⎥
⎢A₀₁  A₁₁  A₂₁⎥
⎢             ⎥
⎢A₀₂  A₁₂  A₂₂⎥
⎢             ⎥
⎣A₀₃  A₁₃  A₂₃⎦
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Výpočet inverzní matice</h2>

<p>Zápisem <strong>matice.I</strong> můžeme získat inverzní matici, a to
samozřejmě opět v&nbsp;symbolické podobě (přístupem k&nbsp;atributu
<strong>I</strong>, což evokuje zápis M<sup>-1</sup>). Podívejme se nyní na
způsob výpočtu inverzní matice k&nbsp;relativně malé matici o rozměrech
2&times;2 prvky:</p>

<pre>
import sympy as sp
&nbsp;
a = sp.MatrixSymbol("A", 2, 2)
&nbsp;
sp.pprint(sp.Matrix(a))
&nbsp;
print()
&nbsp;
sp.pprint(sp.Matrix(<strong>a.I</strong>))
</pre>

<p>Nejprve se vypíše původní matice:</p>

<pre>
⎡A₀₀  A₀₁⎤
⎢        ⎥
⎣A₁₀  A₁₁⎦
</pre>

<p>A následně matice inverzní:</p>

<pre>
⎡       A₁₁               -A₀₁       ⎤
⎢─────────────────  ─────────────────⎥
⎢A₀₀⋅A₁₁ - A₀₁⋅A₁₀  A₀₀⋅A₁₁ - A₀₁⋅A₁₀⎥
⎢                                    ⎥
⎢      -A₁₀                A₀₀       ⎥
⎢─────────────────  ─────────────────⎥
⎣A₀₀⋅A₁₁ - A₀₁⋅A₁₀  A₀₀⋅A₁₁ - A₀₁⋅A₁₀⎦
</pre>

<p>Kontrola výpočtu:</p>

<pre>
import sympy as sp
&nbsp;
a = sp.MatrixSymbol("A", 2, 2)
&nbsp;
i = a.I
&nbsp;
r = a*i
&nbsp;
sp.pprint(sp.Matrix(r))
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
⎡1  0⎤
⎢    ⎥
⎣0  1⎦
</pre>

<p>Což je (podle očekávání) skutečně jednotková matice.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Výpočet inverze maticového součinu</h2>

<p>V&nbsp;dnešním posledním demonstračním příkladu je ukázán výpočet maticového
součinu (ten již ostatně velmi dobře známe), přičemž z&nbsp;výsledku této
operace je vypočtena inverzní matice. Obě vstupní matice, které budeme násobit,
mají pro jednoduchost rozměry 2&times;2 prvky. Pro větší matice totiž trvá
výpočet inverzní matice neúměrně dlouhou dobu:</p>

<pre>
import sympy as sp
&nbsp;
a = sp.MatrixSymbol("A", 2, 2)
b = sp.MatrixSymbol("B", 2, 2)
&nbsp;
c = a*b
&nbsp;
sp.pprint(sp.Matrix(c))
&nbsp;
print()
&nbsp;
sp.pprint(sp.Matrix(<strong>c.I</strong>))
</pre>

<p>Skript po svém spuštění nejdříve vypíše výsledek maticového součinu a
posléze i inverzní matici k&nbsp;tomuto výsledku:</p>

<pre>
⎡A₀₀⋅B₀₀ + A₀₁⋅B₁₀  A₀₀⋅B₀₁ + A₀₁⋅B₁₁⎤
⎢                                    ⎥
⎣A₁₀⋅B₀₀ + A₁₁⋅B₁₀  A₁₀⋅B₀₁ + A₁₁⋅B₁₁⎦
&nbsp;
&nbsp;
&nbsp;
⎡                 A₁₀⋅B₀₁                                   A₁₁⋅B₁₁           
⎢ ─────────────────────────────────────── + ──────────────────────────────────
⎢ (A₀₀⋅A₁₁ - A₀₁⋅A₁₀)⋅(B₀₀⋅B₁₁ - B₀₁⋅B₁₀)   (A₀₀⋅A₁₁ - A₀₁⋅A₁₀)⋅(B₀₀⋅B₁₁ - B₀₁
⎢                                                                             
⎢                  A₁₀⋅B₀₀                                   A₁₁⋅B₁₀          
⎢- ─────────────────────────────────────── - ─────────────────────────────────
⎣  (A₀₀⋅A₁₁ - A₀₁⋅A₁₀)⋅(B₀₀⋅B₁₁ - B₀₁⋅B₁₀)   (A₀₀⋅A₁₁ - A₀₁⋅A₁₀)⋅(B₀₀⋅B₁₁ - B₀
&nbsp;
                          A₀₀⋅B₀₁                                   A₀₁⋅B₁₁   
─────   - ─────────────────────────────────────── - ──────────────────────────
⋅B₁₀)     (A₀₀⋅A₁₁ - A₀₁⋅A₁₀)⋅(B₀₀⋅B₁₁ - B₀₁⋅B₁₀)   (A₀₀⋅A₁₁ - A₀₁⋅A₁₀)⋅(B₀₀⋅B
&nbsp;
                         A₀₀⋅B₀₀                                   A₀₁⋅B₁₀    
──────   ─────────────────────────────────────── + ───────────────────────────
₁⋅B₁₀)   (A₀₀⋅A₁₁ - A₀₁⋅A₁₀)⋅(B₀₀⋅B₁₁ - B₀₁⋅B₁₀)   (A₀₀⋅A₁₁ - A₀₁⋅A₁₀)⋅(B₀₀⋅B₁
&nbsp;
             ⎤
─────────────⎥
₁₁ - B₀₁⋅B₁₀)⎥
             ⎥
             ⎥
──────────── ⎥
₁ - B₀₁⋅B₁₀) ⎦
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že výsledek je tak
rozsáhlý, že musel být rozdělen na tři části.</div></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 byly uloženy do Git repositáře dostupného na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>sympy01.py</td><td>zjednodušování konstantního výrazu s&nbsp;odmocninou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy01.py</a></td></tr>
<tr><td> 2</td><td>sympy02.py</td><td>zjednodušování konstantních výrazů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy02.py</a></td></tr>
<tr><td> 3</td><td>sympy03.py</td><td>čitelný výpis výrazů funkcí <strong>sympy.pprint</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy03.py</a></td></tr>
<tr><td> 4</td><td>sympy04.py</td><td>čitelný výpis výrazů funkcí <strong>sympy.pprint</strong>, složitější výsledky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy04.py</a></td></tr>
<tr><td> 5</td><td>sympy05.py</td><td>deklarace a &bdquo;terminálový&ldquo; výpis jednoduchého výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy05.py</a></td></tr>
<tr><td> 6</td><td>sympy06.py</td><td>deklarace a &bdquo;matematický&ldquo; výpis jednoduchého výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy06.py</a></td></tr>
<tr><td> 7</td><td>sympy07.py</td><td>výraz s&nbsp;větším množstvím proměnných (zlomek)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy07.py</a></td></tr>
<tr><td> 8</td><td>sympy08.py</td><td>výraz s&nbsp;větším množstvím proměnných (zlomek)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy08.py</a></td></tr>
<tr><td> 9</td><td>sympy09.py</td><td>zjednodušení výrazu s&nbsp;jedinou proměnnou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy09.py</a></td></tr>
<tr><td>10</td><td>sympy10.py</td><td>zjednodušení výrazu se třemi proměnnými a se zlomky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy10.py</a></td></tr>
<tr><td>11</td><td>sympy11.py</td><td>pokus o použití nedefinované proměnné</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy11.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy11.py</a></td></tr>
<tr><td>12</td><td>sympy12.py</td><td>výraz x<sup>2</sup>-y<sup>2</sup></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy12.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy12.py</a></td></tr>
<tr><td>13</td><td>sympy13.py</td><td>složitější výraz s&nbsp;několika členy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy13.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy13.py</a></td></tr>
<tr><td>14</td><td>sympy14.py</td><td>faktorizace výrazu x<sup>2</sup>-y<sup>2</sup></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy14.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy14.py</a></td></tr>
<tr><td>15</td><td>sympy15.py</td><td>faktorizace výrazu x<sup>2</sup>-2x + 1</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy15.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy15.py</a></td></tr>
<tr><td>16</td><td>sympy16.py</td><td>expanze výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy16.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy16.py</a></td></tr>
<tr><td>17</td><td>sympy17.py</td><td>expanze (roznásobení závorek) složitějšího výrazu se dvěma proměnnými</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy17.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy17.py</a></td></tr>
<tr><td>18</td><td>sympy18.py</td><td>expanze (roznásobení závorek) složitějšího výrazu se třemi proměnnými</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy18.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy18.py</a></td></tr>
<tr><td>19</td><td>sympy19.py</td><td>řešení kvadratické rovnice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy19.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy19.py</a></td></tr>
<tr><td>20</td><td>sympy20.py</td><td>řešení kvadratické rovnice, odlišná forma výstupu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy20.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy20.py</a></td></tr>
<tr><td>21</td><td>sympy21.py</td><td>řešení kvadratické rovnice se dvěma neznámými</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy21.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy21.py</a></td></tr>
<tr><td>22</td><td>sympy22.py</td><td>výpočet derivace polynomu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy22.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy22.py</a></td></tr>
<tr><td>23</td><td>sympy23.py</td><td>výpočet derivace složitějšího výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy23.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy23.py</a></td></tr>
<tr><td>24</td><td>sympy24.py</td><td>výpočet integrace polynomu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy24.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy24.py</a></td></tr>
<tr><td>25</td><td>sympy25.py</td><td>výpočet integrace složitějšího polynomu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy25.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy25.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>sympy26.py</td><td>symboly vs. proměnné</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy26.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy26.py</a></td></tr>
<tr><td>27</td><td>sympy27.py</td><td>reálné kořeny kvadratické rovnice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy27.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy27.py</a></td></tr>
<tr><td>28</td><td>sympy28.py</td><td>komplexní kořeny kvadratické rovnice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy28.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy28.py</a></td></tr>
<tr><td>29</td><td>sympy29.py</td><td>hledání kořenů kubické rovnice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy29.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy29.py</a></td></tr>
<tr><td>30</td><td>sympy30.py</td><td>kořeny polynomů vyšších stupňů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy30.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy30.py</a></td></tr>
<tr><td>31</td><td>sympy31.py</td><td>průchod nulovými body periodické funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy31.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy31.py</a></td></tr>
<tr><td>32</td><td>sympy32.py</td><td>vyhledání všech možných řešení</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy32.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy32.py</a></td></tr>
<tr><td>33</td><td>sympy33.py</td><td>vyhledání řešení pro funkci <i>sinc</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy33.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy33.py</a></td></tr>
<tr><td>34</td><td>sympy34.py</td><td>řešení nerovnosti</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy34.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy34.py</a></td></tr>
<tr><td>35</td><td>sympy35.py</td><td>složitější nerovnost s&nbsp;goniometrickou funkcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy35.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy35.py</a></td></tr>
<tr><td>36</td><td>sympy36.py</td><td>řešení dvojice nerovnic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy36.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy36.py</a></td></tr>
<tr><td>37</td><td>sympy37.py</td><td>složitější dvojice nerovnic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy37.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy37.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>38</td><td>sympy38.py</td><td>první derivace funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy38.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy38.py</a></td></tr>
<tr><td>39</td><td>sympy39.py</td><td>první derivace odlišné funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy39.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy39.py</a></td></tr>
<tr><td>40</td><td>sympy40.py</td><td>první až čtvrtá derivace funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy40.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy40.py</a></td></tr>
<tr><td>41</td><td>sympy41.py</td><td>první až čtvrtá derivace odlišné funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy41.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy41.py</a></td></tr>
<tr><td>42</td><td>sympy42.py</td><td>první až čtvrtá derivace odlišné funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy42.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy42.py</a></td></tr>
<tr><td>43</td><td>sympy43.py</td><td>první až čtvrtá derivace odlišné funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy43.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy43.py</a></td></tr>
<tr><td>44</td><td>sympy44.py</td><td>výpočet singularit, jichž je konečné množství</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy44.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy44.py</a></td></tr>
<tr><td>45</td><td>sympy45.py</td><td>výpočet singularit, jichž je nekonečné (spočetné) množství</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy45.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy45.py</a></td></tr>
<tr><td>46</td><td>sympy46.py</td><td>výpočet singularit v&nbsp;oboru komplexních čísel</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy46.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy46.py</a></td></tr>
<tr><td>47</td><td>sympy47.py</td><td>výpočet singularit v&nbsp;oboru komplexních čísel</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy47.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy47.py</a></td></tr>
<tr><td>48</td><td>sympy48.py</td><td>výpočet lokálního minima</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy48.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy48.py</a></td></tr>
<tr><td>49</td><td>sympy49.py</td><td>výpočet lokálního maxima</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy49.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy49.py</a></td></tr>
<tr><td>50</td><td>sympy50.py</td><td>test, zda je funkce v&nbsp;zadaném intervalu rostoucí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy50.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy50.py</a></td></tr>
<tr><td>51</td><td>sympy51.py</td><td>test, zda je funkce v&nbsp;zadaném intervalu klesající</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy51.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy51.py</a></td></tr>
<tr><td>52</td><td>sympy52.py</td><td>otevřené intervaly a test na rostoucí funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy52.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy52.py</a></td></tr>
<tr><td>53</td><td>sympy53.py</td><td>výpočet limity (zprava) funkce y=1/x v&nbsp;nule</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy53.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy53.py</a></td></tr>
<tr><td>54</td><td>sympy54.py</td><td>výpočet limity (zleva) funkce y=1/x v&nbsp;nule</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy54.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy54.py</a></td></tr>
<tr><td>55</td><td>sympy55.py</td><td>výpočet limity funkce y=1/x v&nbsp;nekonečnu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy55.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy55.py</a></td></tr>
<tr><td>56</td><td>sympy56.py</td><td>výpočet limity funkce y=1/x v&nbsp;záporném nekonečnu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy56.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy56.py</a></td></tr>
<tr><td>57</td><td>sympy57.py</td><td>výpočet limity funkce y=sin(1/x) v&nbsp;nule</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy57.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy57.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>58</td><td>sympy58.py</td><td>konstrukce neměnného pole (matice) z&nbsp;prvků předaných v&nbsp;seznamu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy58.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy58.py</a></td></tr>
<tr><td>59</td><td>sympy59.py</td><td>konstrukce neměnného pole (matice) z&nbsp;prvků předaných v&nbsp;n-tici</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy59.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy59.py</a></td></tr>
<tr><td>60</td><td>sympy60.py</td><td>tisk matice funkcí <strong>pprint</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy60.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy60.py</a></td></tr>
<tr><td>61</td><td>sympy61.py</td><td>konstrukce jednorozměrného vektoru s&nbsp;využitím generátoru <strong>range</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy61.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy61.py</a></td></tr>
<tr><td>62</td><td>sympy62.py</td><td>konstrukce dvourozměrné matice s&nbsp;využitím generátoru <strong>range</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy62.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy62.py</a></td></tr>
<tr><td>63</td><td>sympy63.py</td><td>tisk řádu a tvaru jednorozměrného vektoru &ndash; <strong>rank</strong> a <strong>shape</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy63.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy63.py</a></td></tr>
<tr><td>64</td><td>sympy64.py</td><td>tisk řádu a tvaru dvourozměrné matice &ndash; <strong>rank</strong> a <strong>shape</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy64.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy64.py</a></td></tr>
<tr><td>65</td><td>sympy65.py</td><td>změna tvaru n-dimenzionálního pole metodou <strong>reshape</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy65.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy65.py</a></td></tr>
<tr><td>66</td><td>sympy66.py</td><td>čtyřrozměrné pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy66.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy66.py</a></td></tr>
<tr><td>67</td><td>sympy67.py</td><td>výchozí typ n-dimenzionálního pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy67.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy67.py</a></td></tr>
<tr><td>68</td><td>sympy68.py</td><td>explicitní stanovení typu n-dimenzionálního pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy68.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy68.py</a></td></tr>
<tr><td>69</td><td>sympy69.py</td><td>pokus o modifikaci neměnného n-dimenzionálního pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy69.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy69.py</a></td></tr>
<tr><td>70</td><td>sympy70.py</td><td>modifikace měnitelného n-dimenzionálního pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy70.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy70.py</a></td></tr>
<tr><td>71</td><td>sympy71.py</td><td>výpočty s&nbsp;celými maticemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy71.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy71.py</a></td></tr>
<tr><td>72</td><td>sympy72.py</td><td>transpozice matice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy72.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy72.py</a></td></tr>
<tr><td>73</td><td>sympy73.py</td><td>transpozice matice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy73.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy73.py</a></td></tr>
<tr><td>74</td><td>sympy74.py</td><td>symbolicky reprezentovaná matice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy74.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy74.py</a></td></tr>
<tr><td>75</td><td>sympy75.py</td><td>symbolický maticový součin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy75.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy75.py</a></td></tr>
<tr><td>76</td><td>sympy76.py</td><td>symbolický výpočet transformované matice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy76.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy76.py</a></td></tr>
<tr><td>77</td><td>sympy77.py</td><td>symbolický výpočet inverzní matice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy77.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy77.py</a></td></tr>
<tr><td>78</td><td>sympy78.py</td><td>symbolický výpočet inverzní matice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy78.py">https://github.com/tisnik/most-popular-python-libs/blob/master/sympy/sympy78.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>SymPy<br />
<a href="https://www.sympy.org/en/index.html">https://www.sympy.org/en/index.html</a>
</li>

<li>SymPy na PyPi<br />
<a href="https://pypi.org/project/sympy/">https://pypi.org/project/sympy/</a>
</li>

<li>mpmath<br />
<a href="https://mpmath.org/">https://mpmath.org/</a>
</li>

<li>mpmath na PyPi<br />
<a href="https://pypi.org/project/mpmath/">https://pypi.org/project/mpmath/</a>
</li>

<li>Symbolic Maths in Python<br />
<a href="https://alexandrugris.github.io/maths/2017/04/30/symbolic-maths-python.html">https://alexandrugris.github.io/maths/2017/04/30/symbolic-maths-python.html</a>
</li>

<li>SymPy shell<br />
<a href="https://live.sympy.org/">https://live.sympy.org/</a>
</li>

<li>Symbolic programming<br />
<a href="https://en.wikipedia.org/wiki/Symbolic_programming">https://en.wikipedia.org/wiki/Symbolic_programming</a>
</li>

<li>Symbolic language (programming)<br />
<a href="https://en.wikipedia.org/wiki/Symbolic_language_(programming)">https://en.wikipedia.org/wiki/Symbolic_language_(programming)</a>
</li>

<li>Computer algebra<br />
<a href="https://en.wikipedia.org/wiki/Computer_algebra">https://en.wikipedia.org/wiki/Computer_algebra</a>
</li>

<li>Common Lisp: A Gentle Introduction to Symbolic Computation<br />
<a href="https://www.cs.cmu.edu/~dst/LispBook/">https://www.cs.cmu.edu/~dst/LispBook/</a>
</li>

<li>List of computer algebra systems<br />
<a href="https://en.wikipedia.org/wiki/List_of_computer_algebra_systems">https://en.wikipedia.org/wiki/List_of_computer_algebra_systems</a>
</li>

<li>Polynom<br />
<a href="https://cs.wikipedia.org/wiki/Polynom">https://cs.wikipedia.org/wiki/Polynom</a>
</li>

<li>What is SimPy? How to run python simulations?<br />
<a href="https://divyas090909.medium.com/what-is-simpy-how-to-run-python-simulations-348736b50615">https://divyas090909.medium.com/what-is-simpy-how-to-run-python-simulations-348736b50615</a>
</li>

<li>SimPy: Simulating Real-World Processes With Python<br />
<a href="https://realpython.com/simpy-simulating-with-python/">https://realpython.com/simpy-simulating-with-python/</a>
</li>

<li>Jazyky umožňující operace s poli aneb rozsáhlý svět „array programmingu“<br />
<a href="https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/">https://www.root.cz/clanky/jazyky-umoznujici-operace-s-poli-aneb-rozsahly-svet-bdquo-array-programmingu-ldquo/</a>
</li>

<li>What is an Array?<br />
<a href="https://vector.org.uk/what-is-an-array/">https://vector.org.uk/what-is-an-array/</a>
</li>

<li>Vector (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/Vector.html">https://mathworld.wolfram.com/Vector.html</a>
</li>

<li>n-Tuple (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/n-Tuple.html">https://mathworld.wolfram.com/n-Tuple.html</a>
</li>

<li>n-Vector (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/n-Vector.html">https://mathworld.wolfram.com/n-Vector.html</a>
</li>

<li>Matrix (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/Matrix.html">https://mathworld.wolfram.com/Matrix.html</a>
</li>

<li>Array (Wolfram MathWorld)<br />
<a href="https://mathworld.wolfram.com/Array.html">https://mathworld.wolfram.com/Array.html</a>
</li>

<li>ND Arrays (Tensors) in different languages<br />
<a href="https://www.youtube.com/watch?v=WbpbEilgQBc">https://www.youtube.com/watch?v=WbpbEilgQBc</a>
</li>

<li>Extending APL to Infinity\<br />
<a href="https://www.jsoftware.com/papers/eem/infinity.htm">https://www.jsoftware.com/papers/eem/infinity.htm</a>
</li>

<li>Sparse matrix<br />
<a href="https://en.wikipedia.org/wiki/Sparse_matrix">https://en.wikipedia.org/wiki/Sparse_matrix</a>
</li>

<li>Matice incidence<br />
<a href="https://cs.wikipedia.org/wiki/Matice_incidence">https://cs.wikipedia.org/wiki/Matice_incidence</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

