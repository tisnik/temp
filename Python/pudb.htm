<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>PuDB: výkonný debugger pro Python s retro uživatelským rozhraním</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>PuDB: výkonný debugger pro Python s retro uživatelským rozhraním</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na stránkách Rootu jsme se již seznámili s několika debuggery určenými mj. i pro ladění aplikací naprogramovaných v Pythonu. Ovšem prozatím jsme se nezmínili o užitečném debuggeru PuDB s rozhraním, které jako by z oka vypadlo slavnému Turbo Debuggeru.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. PuDB: výkonný debugger pro Python s retro uživatelským rozhraním</a></p>
<p><a href="#k02">2. Ideový předchůdce PuDB &ndash; Turbo Debugger pro DOS a Microsoft Windows</a></p>
<p><a href="#k03">3. PuDB vs. debuggery pro nativní aplikace</a></p>
<p><a href="#k04">4. Instalace PuDB</a></p>
<p><a href="#k05">5. První spuštění debuggeru a konfigurační dialog</a></p>
<p><a href="#k06">6. Vestavěná nápověda</a></p>
<p><a href="#k07">7. Regiony, na které je okno debuggeru rozděleno</a></p>
<p><a href="#k08">8. Spouštění a krokování aplikací</a></p>
<p><a href="#k09">9. Použití breakpointů</a></p>
<p><a href="#k10">10. Nastavení vlastností breakpointů</a></p>
<p><a href="#k11">11. Prohlížení obsahu zásobníkových rámců</a></p>
<p><a href="#k12">12. Přeskok mezi zásobníkovými rámci (vyvolání historie)</a></p>
<p><a href="#k13">13. Prohlížení obsahu proměnných</a></p>
<p><a href="#k14">14. Složitější datové struktury</a></p>
<p><a href="#k15">15. Použití vestavěného příkazového řádku při ladění aplikací</a></p>
<p><a href="#k16">16. Post-mortem operace</a></p>
<p><a href="#k17">17. Pády PuDB</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. PuDB: výkonný debugger pro Python s retro uživatelským rozhraním</h2>

<p>V&nbsp;článcích <a
href="https://www.root.cz/clanky/graficka-nadstavba-nad-gnu-debuggerem-gdbgui-a-jeji-alternativy/">Grafická
nadstavba nad GNU Debuggerem gdbgui a její alternativy</a> a <a
href="https://www.root.cz/clanky/trasovani-a-ladeni-nativnich-aplikaci-v-linuxu-pouziti-gdb-a-jeho-nadstaveb/">Trasování
a ladění nativních aplikací v&nbsp;Linuxu: použití GDB a jeho nadstaveb </a>
jsme se seznámili jak s&nbsp;GNU debuggerem (známým i pod zkratkou <i>GDB</i>
nebo <i>gdb</i>), tak i s&nbsp;dalšími debuggery dostupnými v&nbsp;Linuxu.
Kromě toho jsme si ukázali i některé nadstavby vytvořené nad GNU debuggerem.
Dále jsme si v&nbsp;dalším článku, tentokrát s&nbsp;titulkem <a
href="https://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-propojeni-vimu-s-debuggery/">
Užitečné skripty a pluginy pro textový editor Vim: propojení Vimu s
debuggery</a> ukázali, jak je možné nakonfigurovat známý a oblíbený textový
editor <i>Vim</i> takovým způsobem, aby ho bylo možné použít jako frontend
(tedy ve funkci uživatelského rozhraní) pro různé typy debuggerů určených jak
pro ladění aplikací naprogramovaných v&nbsp;céčku popř.&nbsp;C++ či aplikací
vytvořených v&nbsp;Pythonu.</p>

<a href="https://www.root.cz/obrazek/208272/"><img src="http://i.iinfo.cz/images/521/vim-dbg-2-prev.png" class="image-208272" alt="gdb1" height="243" width="370" /></a>
<p><i>Obrázek 1: Typické „sezení“ programátora využívajícího debugger gdb.
Nastavení breakpointu příkazem <strong>b main</strong>, spuštění laděného
programu příkazem <strong>r</strong> a krokování příkazem <strong>n</strong>
(klávesa Enter zopakuje poslední zadaný příkaz, proto je <strong>n</strong>
vlastně v tomto příkladu používán nadbytečně).</i></p>

<p>Pro aplikace naprogramované v&nbsp;Pythonu však existuje ještě jeden
zajímavý a poměrně snadno ovladatelný debugger, který pro komunikaci
s&nbsp;programátory používá plnohodnotné (celoobrazovkové) textové uživatelské
rozhraní (<a href="https://en.wikipedia.org/wiki/Text-based_user_interface">TUI
&ndash; Text-Based User Interface</a>). Tento debugger se jmenuje <i>PuDB</i> a
jeho uživatelské rozhraní je do značné míry inspirováno slavným <i>Turbo
Debuggerem</i>, který si možná někteří čtenáři pamatují ze stařičkého DOSu i
z&nbsp;Microsoft Windows (Turbo Debugger ovšem pochopitelně nebyl určen pro
Python, ale pro aplikace naprogramované v&nbsp;Turbo/Borland Pascalu, Turbo C a
později i Turbo C++). Dnes se seznámíme s&nbsp;možnostmi, které nám
<i>PuDB</i> nabízí a pokusíme se tyto možnosti porovnat s&nbsp;dalšími
debuggery dostupnými pro Python.</p>

<a href="https://www.root.cz/obrazek/208275/"><img src="http://i.iinfo.cz/images/521/vim-dbg-5-prev.png" class="image-208275" alt="gdbtui" height="243" width="370" /></a>
<p><i>Obrázek 2: Aplikace <strong>gdbtui</strong> nabízí
&bdquo;alternativní&ldquo; celoobrazovkové ovládání debuggeru.</i></p>

<p><div class="rs-tip-major">Poznámka: PuDB je projekt odlišný od podobně
znějícího <a href="http://bashdb.sourceforge.net/Pydb/">pydb</a>.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Ideový předchůdce PuDB &ndash; Turbo Debugger pro DOS a Microsoft Windows</h2>

<p>Historie vývoje a používání debuggerů je velmi dlouhá, protože se &ndash;
vedle assemblerů, makroassemblerů a překladačů &ndash; jedná o nejstarší
programátorské nástroje vůbec. Sálové počítače (mainframy) a později i
minipočítače většinou obsahovaly speciální hardwarovou konzoli určenou pro
ladění programů (představme si ovládací panel s&nbsp;tlačítky typu Run, Step
atd.). Debuggery implementované jako běžné programy se pak nejvíce rozšířily na
mikropočítačích. Mezi první debugger v&nbsp;moderním slova smyslu, tedy program
nabízející celoobrazovkové uživatelské rozhraní a možnost interaktivní práce
s&nbsp;ním, patří zejména <i>IBM OLIVER</i> (<i>CICS interactive
test/debug</i>), jehož první verze vyšla již v&nbsp;roce 1972. K&nbsp;rychlému
vývoji debuggerů pak došlo v&nbsp;osmdesátých a devadesátých letech, kdy se
tyto nástroje staly nedílnou součástí integrovaných vývojových prostředí. Právě
toto období nás bude zajímat nejvíc, protože v&nbsp;něm vznikl i Turbo
Debugger.</p>

<a href="https://www.root.cz/obrazek/297108/"><img src="https://i.iinfo.cz/images/627/gdb1-3-prev.png" class="image-297108" alt="td1" height="173" width="370"></a>
<p><i>Obrázek 3: V&nbsp;minulosti velmi populární nástroj Turbo Debugger je
vybaven celoobrazovkovým textovým uživatelským rozhraním (TUI) připomínajícím
další produkty vytvořené společností Borland. Rozhraní a možnosti Turbo
Debuggeru je stále možné považovat za etalon toho, jak by mohl vypadat moderní
debugger s TUI či GUI.</i></p>

<p>V&nbsp;našich zemích byla populární především integrovaná vývojová prostředí
prodávaná společností Borland (Turbo Pascal, Turbo C++, Turbo Pascal, Borland
Pascal, částečně i Turbo Basic atd.), do kterých byl debugger postupně
integrován. Navíc tato společnost vytvořila i již několikrát zmíněný Turbo
Debugger, který měl podobný vzhled i ovládání jako další produkty Borlandu.
První komerčně dostupná verze Turbo Debuggeru začala být nabízena již
v&nbsp;roce 1989, a to buď jako samostatný produkt, nebo ho bylo možné koupit
společně s&nbsp;Turbo Assemblerem (ten byl ovládaný z&nbsp;příkazového řádku) a
později i s&nbsp;Turbo C. Později byly možnosti Turbo Debuggeru rozšířeny, aby
plně podporovaly další produkty firmy Borland, především již zmíněné Turbo C++
a Turbo Pascal i Borland Pascal. S&nbsp;příchodem 16bitových procesorů Intel
286 a později i 32bitových procesorů i386 existoval Turbo Debugger ve třech
variantách: 16bitová varianta pro reálný režim <strong>TD.EXE</strong>,
16bitová varianta pro chráněný režim <strong>TD286.EXE</strong> a konečně
<strong>TD386.EXE</strong>, který mj.&nbsp;podporoval i <a
href="https://en.wikipedia.org/wiki/X86_debug_register">HW breakpointy</a>
podporované tehdy novými procesory i386.</p>

<a href="https://www.root.cz/obrazek/297109/"><img src="https://i.iinfo.cz/images/627/gdb1-4-prev.png" class="image-297109" alt="td2" height="173" width="370"></a>
<p><i>Obrázek 4: Jedno ze speciálních oken Turbo Debuggeru, v&nbsp;němž se
zobrazuje stav mikroprocesoru (obsahy pracovních registrů i příznakových bitů),
obsah vybrané části operační paměti a taktéž zdrojový kód proložený
disassemblovaným strojovým kódem (v&nbsp;této části okna je zvýrazněn právě
prováděný řádek).</i></p>

<p>Při porovnání screenshotů na obrázcích 3 a 4 se screenshoty zobrazenými
v&nbsp;navazujících kapitolách zjistíme, že se dnes popisovaný debugger PuDB
skutečně Turbo Debuggeru podobá, což je ostatně jen dobře, protože TUI
používaná firmou Borland jsou přehledná a snadno ovladatelná.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. PuDB vs. debuggery pro nativní aplikace</h2>

<p>Při dále uvedeném popisu možností debuggeru PuDB a při jeho srovnání
například s&nbsp;GNU Debuggerem atd. by se mohlo zdát, že se vlastně jedná o
poměrně jednoduchý nástroj, který uživatelům nenabízí příliš mnoho funkcí a
technologií. Ve skutečnosti ovšem debugger určený to ladění aplikací ve
vysokoúrovňovém Pythonu nemusí obsahovat tolik funkcí, jako debuggery pro
nativní aplikace &ndash; například je možné zcela vynechat prohlížení obsahu
registrů mikroprocesoru, oblastí operační paměti, disassemblovaného kódu (i
když by bylo pěkné vidět bajtkód nebo dokonce AST) či obsahu řídicích registrů
různých zařízení. Pro běžné ladění si vystačíme s&nbsp;oknem se zobrazeným
zdrojovým kódem, obsahem proměnných, obsahem zásobníkových rámců, seznamem
breakpointů a ideálně taktéž se seznamem běžících nebo pozastavených vláken.
Kromě poslední možnosti jsou všechny ostatní funkce v&nbsp;PuDB dostupné.
Navíc je k&nbsp;dispozici i příkazový řádek, díky němuž lze laděný program
zkoumat i do větších podrobností.</p>

<a href="https://www.root.cz/obrazek/297113/"><img src="https://i.iinfo.cz/images/627/gdb1-8-prev.png" class="image-297113" alt="dbg" height="270" width="320"></a>
<p><i>Obrázek 5: Debuggery pro nativní aplikace musí umět zobrazit obsah
registrů procesoru, vybraného regionu operační paměti popř.&nbsp;i
disassemblovaný strojový kód.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Instalace PuDB</h2>

<p>Instalace debuggeru PuDB je snadná, protože balíček s&nbsp;tímto nástrojem
je <a href="https://pypi.org/project/pudb/">dostupný na PyPi</a>. Pro jeho
instalaci tedy postačuje využít instalátor <strong>pip</strong>
popř.&nbsp;<strong>pip3</strong> a provést buď instalaci pro všechny
uživatele:</p>

<pre>
$ <strong>pip3 install pudb</strong>
</pre>

<p>nebo instalaci pro právě aktivního uživatele:</p>

<pre>
$ <strong>pip3 install --user pudb</strong>
</pre>

<p>Debugger PuDB vyžaduje kupodivu instalaci pouze dvou závislostí, především
knihovny <i>urwid</i> sloužící pro tvorbu aplikací s&nbsp;celoobrazovkovým
textovým uživatelským rozhraním a taktéž knihovny nazvané <i>Pygments</i>,
která je používána pro zobrazování syntaxe zdrojových kódů či konfiguračních
souborů.  Celá instalace by měla proběhnout prakticky okamžitě:</p>

<pre>
Downloading/unpacking pudb
  Downloading pudb-2018.1.tar.gz (56kB): 56kB downloaded
  Running setup.py (path:/tmp/pip_build_tester/pudb/setup.py) egg_info for package pudb
    /usr/lib/python3.4/distutils/dist.py:260: UserWarning: Unknown distribution option: 'test_requires'
      warnings.warn(msg)
&nbsp;
Requirement already satisfied (use --upgrade to upgrade): urwid&gt;=1.1.1 in ./.local/lib/python3.4/site-packages (from pudb)
Requirement already satisfied (use --upgrade to upgrade): pygments&gt;=1.0 in ./.local/lib/python3.4/site-packages (from pudb)
Installing collected packages: pudb
  Running setup.py install for pudb
    /usr/lib/python3.4/distutils/dist.py:260: UserWarning: Unknown distribution option: 'test_requires'
      warnings.warn(msg)
&nbsp;
    Installing pudb3 script to /home/tester/.local/bin
Successfully installed pudb
Cleaning up...
</pre>

<p>V&nbsp;případě lokální instalace bude spustitelný skript
<strong>pudb</strong> nebo <strong>pudb3</strong> dostupný v&nbsp;adresáři:</p>

<pre>
~/.local/bin
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. První spuštění debuggeru a konfigurační dialog</h2>

<p>PuDB při svém spuštění vyžaduje zadání skriptu (modulu), který se má ladit.
To je zajímavé, protože většinu ostatních debuggerů s&nbsp;GUI či TUI je možné
nejprve spustit a teprve poté zadat soubor, s&nbsp;nímž se má pracovat:</p>

<pre>
$ <strong>pudb3</strong>
Usage: pudb3 [options] SCRIPT-TO-RUN [SCRIPT-ARGUMENTS]
&nbsp;
Options:
  -h, --help          show this help message and exit
  -s, --steal-output  
  --pre-run=COMMAND   Run command before each program run
</pre>

<p>Správné spuštění má tedy vypadat následovně:</p>

<pre>
$ <strong>pudb3 jméno_laděného_modulu.py</strong>
</pre>

<a href="https://www.root.cz/obrazek/331047/"><img src="https://i.iinfo.cz/images/442/pudb-1-prev.png" class="image-331047" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 6: Spuštění debuggeru PuDB z&nbsp;příkazové řádky se zadáním
jména laděného modulu.</i></p>

<p><div class="rs-tip-major">Poznámka: debugger by měl korektně pracovat i ve
virtuálním prostředí Pythonu, což si ostatně můžete snadno vyzkoušet ve svých
aplikacích, samozřejmě za předpokladu, že <i>venv</i> nebo <i>virtualenv</i>
používají. Použití je jednoduché &ndash; inicializujte virtuální prostředí
Pythonu přesně tak, jak jste zvyklí a ihned poté (před spuštěním aplikace)
inicializujte <strong>pudb/pudb3</strong>.</div></p>

<p>Po prvním spuštění debuggeru, tj.&nbsp;ve chvíli, kdy ještě neexistuje
soubor <strong>~/.config/pudb/pudb.cfg</strong>, se zobrazí okno se zprávou o
základních možnostech tohoto nástroje, autorech, licenci atd.:</p>

<a href="https://www.root.cz/obrazek/331048/"><img src="https://i.iinfo.cz/images/442/pudb-2-prev.png" class="image-331048" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 7: Zpráva zobrazená při prvním spuštění debuggeru.</i></p>

<p>Ihned poté se zobrazí další dialog, který je již z&nbsp;praktického hlediska
důležitější. Tento dialog totiž obsahuje veškerou konfiguraci PuDB a samozřejmě
se k&nbsp;němu můžete kdykoli vrátit zadáním klávesové zkratky
<strong>Ctrl+P</strong>. Ovlivnit je možné jak vzhled aplikace (barevné schéma,
tak i její chování při zobrazování obsahu proměnných, zásobníkových rámců
apod.):</p>

<a href="https://www.root.cz/obrazek/331049/"><img src="https://i.iinfo.cz/images/442/pudb-3-prev.png" class="image-331049" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 8: Dialog s&nbsp;konfiguračními volbami.</i></p>

<p>Pro opuštění konfiguračního dialogu je nutné stlačit šipku doprava (ne TAB)
a vybrat si mezi uložením konfigurace a uzavřením dialogu. Ihned poté se dialog
zavře a PuDB se nachází v&nbsp;základním ladicím režimu:</p>

<a href="https://www.root.cz/obrazek/331050/"><img src="https://i.iinfo.cz/images/442/pudb-4-prev.png" class="image-331050" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 9: Pohled na textové uživatelské rozhraní debuggeru s&nbsp;pěti
regiony.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Vestavěná nápověda</h2>

<p>Tato kapitola bude velmi stručná. Nápověda se zobrazí klávesovou zkratkou
<strong>F1</strong> nebo <strong>?</strong> a ukončuje se klávesou
<strong>Enter</strong> (nikoli <strong>Esc</strong>). Samotná nápověda je
v&nbsp;současné verzi PuDB poměrně stručná, obsahuje však jak základní
koncepty, tak i všechny důležité klávesové zkratky.</p>

<a href="https://www.root.cz/obrazek/331051/"><img src="https://i.iinfo.cz/images/442/pudb-5-prev.png" class="image-331051" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 10: Dialog s&nbsp;nápovědou k&nbsp;debuggeru PuDB.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Regiony, na které je okno debuggeru rozděleno</h2>

<p>Celoobrazovkové textové uživatelské rozhraní aplikace PuDB je rozděleno do
pěti oblastí (regionů), mezi nimiž se lze snadno přepínat a jejichž velikost je
možné upravovat. Všech pět oblastí je vypsáno v&nbsp;tabulce společně
s&nbsp;klávesovými zkratkami, které slouží pro přechod do vybrané oblasti.
Navíc je do tabulky přidána i informace o výstupní konzoli, která zabírá celou
plochu terminálu a tudíž je nutné se na ní přepnout klávesovou zkratkou:</p>

<table>
<tr><th>Jméno</th><th>Oblast</th><th>Klávesová zkratka</th></tr>
<tr><td>code</td><td>laděný modul se zobrazením breakpointů</td><td>C</td></tr>
<tr><td>variables</td><td>aktuálně viditelné proměnné</td><td>V</td></tr>
<tr><td>stack</td><td>zásobníkové rámce laděné aplikace</td><td>S</td></tr>
<tr><td>breakpoints</td><td>seznam všech uživatelem nastavených breakpointů</td><td>B</td></tr>
<tr><td>internal shell</td><td>interpret Pythonu, v&nbsp;němž lze manipulovat se stavem aplikace</td><td>Ctrl+X</td></tr>
<tr><td>shell</td><td>externí interpret Pythonu, v&nbsp;němž lze manipulovat se stavem aplikace</td><td>!</td></tr>
<tr><td>output screen</td><td>standardní terminálový výstup aplikace</td><td>o</td></tr>
</table>

<p>Ve skutečnosti je přepínání mezi regiony většinou ještě mnohem jednodušší
(s&nbsp;výjimkou interního shellu) &ndash; je totiž možné využít běžné
kurzorové šipky a přepnout se tak z&nbsp;horního levého regionu na regiony
umístěné v&nbsp;pravém sloupci a naopak. I šipky nahoru/dolů slouží pro
přepnutí mezi regiony, protože pokud kurzor dojede na začátek/konec seznamu
(proměnných, zásobníkových rámců, breakpointu), přepne se do dalšího
regionu.</p>

<a href="https://www.root.cz/obrazek/331052/"><img src="https://i.iinfo.cz/images/442/pudb-6-prev.png" class="image-331052" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 11: Rozdělení okna PuDB na pět oblastí.</i></p>

<p><div class="rs-tip-major">Poznámka: prakticky všechny screenshoty, které
v&nbsp;dnešním článku naleznete, byly vytvořeny v&nbsp;terminálu o velikosti
80&times;25 znaků, takže by se mohlo zdát, že některé oblasti (zásobníkové
rámce atd.) jsou relativně malé a nepřehledné. Ovšem samozřejmě není žádný
problém spustit PuDB v&nbsp;terminálu s&nbsp;větším počtem textových řádků
a/nebo znaků na řádek, což je ukázáno na dalším screenshotu.</div></p>

<a href="https://www.root.cz/obrazek/331053/"><img src="https://i.iinfo.cz/images/442/pudb-7-prev.png" class="image-331053" alt="&#160;" width="370" height="226" /></a>
<p><i>Obrázek 12: Spuštění PuDB v&nbsp;terminálu s&nbsp;větším počtem textových
řádků i počtu znaků na řádek. V&nbsp;debuggeru je laděna aplikace pro výpočet
Ackermannovy funkce.</i></p>

<p>Velikost jednotlivých regionů se upravuje klávesovými zkratkami:</p>

<table>
<tr><th>Klávesa</th><th>Význam</th></tr>
<tr><td>+</td><td>horizontální zvětšení o cca 1/15 sloupců</td></tr>
<tr><td>-</td><td>horizontální zmenšení o cca 1/15 sloupců</td></tr>
<tr><td>=</td><td>horizontální zvětšení na maximální povolenou šířku</td></tr>
<tr><td>_</td><td>horizontální zmenšení na minimální povolenou šířku</td></tr>
<tr><td>[</td><td>vertikální zvětšení o jeden řádek</td></tr>
<tr><td>]</td><td>vertikální zmenšení o jeden řádek</td></tr>
</table>



<p><a name="k08"></a></p>
<h2 id="k08">8. Spouštění a krokování aplikací</h2>

<p>Nejdůležitější funkcí debuggeru je samozřejmě spouštění aplikací
s&nbsp;možností jejich pozastavení (na breakpointech) a krokování. K&nbsp;tomu
slouží několik klávesových zkratek, které jsou však platné pouze ve chvíli, kdy
je aktivní levá horní oblast (<i>code area</i>):</p>

<table>
<tr><th>Klávesa</th><th>Význam</th><th>Popis</th></tr>
<tr><td>r</td><td>run</td><td>spuštění aplikace (přechod na vstupní bod skriptu)</td></tr>
<tr><td>q</td><td>quit</td><td>ukončení aplikace a zobrazení dialogu, jaká akce se má provést (restart etc.)</td></tr>
<tr><td>n</td><td>next</td><td>krokování: přechod na další příkaz; volání funkce je chápáno jako jediný krok</td></tr>
<tr><td>s</td><td>step into</td><td>krokování: přechod na další příkaz; při volání funkce se přejde do volané funkce</td></tr>
<tr><td>c</td><td>continue</td><td>konec krokování pokračování běhu aplikace (až do jejího konce nebo do přístupu na breakpoint)</td></tr>
<tr><td>f</td><td>finish</td><td>dokončení funkce, v&nbsp;němž se program nachází (počká se na posledním <strong>return</strong>)</td></tr>
</table>

<a href="https://www.root.cz/obrazek/331054/"><img src="https://i.iinfo.cz/images/442/pudb-8-prev.png" class="image-331054" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 13: Krokování aplikace. V&nbsp;tomto barevném schématu je
aktuální řádek zobrazen inverzně bíle. Navíc je zapnuto zobrazení čísel řádků,
takže vidíme, že se nacházíme ve zdrojovém kódu na řádku číslo 47.</i></p>

<a href="https://www.root.cz/obrazek/331055/"><img src="https://i.iinfo.cz/images/442/pudb-9-prev.png" class="image-331055" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 14: Dialog zobrazený po dokončení běhu aplikace, v&nbsp;němž se
může vývojář rozhodnout, jestli se má program spustit znovu, zahájit
tzv.&nbsp;post mortem zkoumání stavu aplikace či zda se má PuDB
ukončit.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Použití breakpointů</h2>

<p>Jednou z&nbsp;nejdůležitějších vlastností debuggeru je jeho schopnost
nastavovat breakpointy na vybraná místa v&nbsp;laděném programovém kódu, a to
většinou buď na konkrétní programový řádek, nebo v&nbsp;některých případech
dokonce na určitou strojovou instrukci. Tuto druhou možnost sice PuDB nenabízí
(ani pro bajtkód), ale breakpointy v&nbsp;něm je samozřejmě možné používat a to
dokonce velmi snadno. Pro nastavení breakpointu slouží klávesa
<strong>b</strong>, kterou je možné stisknout ve chvíli, kdy se kurzor nachází
v&nbsp;oblasti se zdrojovým kódem (<i>code area</i>).</p>

<a href="https://www.root.cz/obrazek/331056/"><img src="https://i.iinfo.cz/images/442/pudb-10-prev.png" class="image-331056" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 15: Nastavení breakpointu v&nbsp;laděném zdrojovém kódu.</i></p>

<p>Informace o nově vytvořeném breakpointu by se měla ihned objevit
v&nbsp;seznamu breakpointů (pravá dolní oblast) a současně by se měl příslušný
řádek obarvit. V&nbsp;případě výchozího barvového schématu (styl původního
Turbo Debuggeru) je tento řádek zobrazen se žlutým písmem a červeným pozadím.
Po spuštění aplikace klávesou <strong>r</strong> nebo při jejím znovuspuštění
klávesou <strong>c</strong> se běh programu na daném breakpointu zastaví a je
možné začít krokování, prohlížení obsahu proměnných, zásobníkových rámců
apod.</p>

<a href="https://www.root.cz/obrazek/331057/"><img src="https://i.iinfo.cz/images/442/pudb-11-prev.png" class="image-331057" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 16: Zastavení laděné aplikace na breakpointu (změněné barvové
schéma).</i></p>

<p>V&nbsp;oblasti <i>breakpoints</i> se používají tyto klávesové zkratky:</p>

<table>
<tr><th>Klávesa</th><th>Význam</th></tr>
<tr><td>e</td><td>povolení nebo zákaz breakpointu</td></tr>
<tr><td>d</td><td>vymazání breakpointu</td></tr>
<tr><td>Enter</td><td><a href="#k10">nastavení vlastností breakpointu</a></td></tr>
</table>

<a href="https://www.root.cz/obrazek/331058/"><img src="https://i.iinfo.cz/images/442/pudb-12-prev.png" class="image-331058" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 17: Zastavení laděné aplikace na breakpointu (další změněné
barvové schéma).</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Nastavení vlastností breakpointů</h2>

<p>Ve výchozím nastavení se laděná aplikace zastaví při každém přístupu na
breakpoint. Ovšem v&nbsp;některých případech potřebujeme, aby bylo řízení
poněkud sofistikovanější. K&nbsp;tomu slouží konfigurace breakpointů, ke které
se dostaneme takto &ndash; klávesou <strong>B</strong> (velké B, protože malé
slouží k&nbsp;vytvoření breakpointu) se přepneme do oblasti <i>breakpoints</i>
se seznamem všech uživatelem nastavených breakpointů. Dále je již možné snadno
šipkami vybrat určený breakpoint a po stlačení klávesy <strong>Enter</strong>
zobrazit dialog s&nbsp;podrobnější konfigurací. V&nbsp;tomto dialogu je možné
nastavit následující vlastnosti:</p>

<ul>
<li>Podmínka, která musí být splněna, aby se aplikace na breakpointu zastavila.</li>
<li>Počet průchodů breakpointem, které se sice budou počítat, ale aplikace se zastaví až po N průchodech.</li>
<li>Kombinace obou předchozích možností &ndash; použití počitadla až po splnění podmínky.</li>
<li>Breakpoint je možné zakázat či povolit příslušným checkboxem.</li>
</ul>

<a href="https://www.root.cz/obrazek/331059/"><img src="https://i.iinfo.cz/images/442/pudb-13-prev.png" class="image-331059" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 18: Nastavení základních vlastností breakpointu.</i></p>

<p>Informace o nastavených breakpointech zůstane zachována i pro další
spouštění debuggeru. Je totiž automaticky ukládána do souboru
<strong>~/.config/pudb/saved-breakpoints-3.6</strong> (nebo pod podobným
názvem). Obsah tohoto souboru si můžete jednoduše prohlédnout, protože se jedná
o čitelný textový soubor:</p>

<pre>
b /home/tester/python/vapory-examples/scene3.py:33
b /home/tester/python/vapory-examples/scene3.py:65
b /home/tester/python/vapory-examples/scene5.py:139
b /home/tester/python/vapory-examples/scene3.py:21, n == 5
b /home/tester/src/python/python-type-hints/test.py:18
b /home/tester/src/python/python-type-hints/test.py:20
b /home/tester/temp/factorial2_2.py:2, n==5
b /home/tester/temp/python/jython-examples/benchmark1/mandelbrot.py:35
</pre>

<p><div class="rs-tip-major">Poznámka: kupodivu se nezachová informace o tom,
který breakpoint byl povolen a který ne, takže při dalším spuštění budou
povoleny všechny breakpointy.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Prohlížení obsahu zásobníkových rámců</h2>

<p>Další důležitou vlastností naprosté většiny moderních debuggerů je schopnost
prohlížení zásobníkových rámců (<i>stack frames</i>) s&nbsp;tím, že je možné
vrátit běh programu do zvoleného místa v&nbsp;minulosti (což ovšem samozřejmě
neznamená, že se vrátí i celý stav aplikace). V&nbsp;případě, že je aplikace
pozastavena na breakpointu nebo při post-mortem stavu je možné se klávesou
<strong>S</strong> (velké <strong>S</strong>, protože malé <strong>s</strong>
je krokovací operace) přepnout na výpis obsahu všech zásobníkových rámců od
vstupu do aplikace až po místo v&nbsp;právě prováděné funkci.</p>

<a href="https://www.root.cz/obrazek/331060/"><img src="https://i.iinfo.cz/images/442/pudb-14-prev.png" class="image-331060" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 19: Postupné zanořování do funkce pro výpočet faktoriálu (winding
phase).</i></p>

<a href="https://www.root.cz/obrazek/331061/"><img src="https://i.iinfo.cz/images/442/pudb-15-prev.png" class="image-331061" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 20: Procházení zásobníkovými rámci při ladění Ackermannovy
funkce.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Přeskok mezi zásobníkovými rámci (vyvolání historie)</h2>

<p>Mezi jednotlivými zásobníkovými rámci se pohybujeme s&nbsp;využitím
kurzorových šipek a po výběru rámce stačí stisknout klávesu
<strong>Enter</strong>. Program se ihned přepne na daný rámec, což je patrné i
v&nbsp;oblasti se zobrazením zdrojového kódu &ndash; viz též následující
dvojice screenshotů:</p>

<a href="https://www.root.cz/obrazek/331062/"><img src="https://i.iinfo.cz/images/442/pudb-16-prev.png" class="image-331062" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 21: Průchod zásobníkovými rámci jednoduché testované aplikace se
třemi funkcemi, které se navzájem volají.</i></p>

<a href="https://www.root.cz/obrazek/331063/"><img src="https://i.iinfo.cz/images/442/pudb-17-prev.png" class="image-331063" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 22: Průchod zásobníkovými rámci jednoduché testované aplikace se
třemi funkcemi, které se navzájem volají.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Prohlížení obsahu proměnných</h2>

<p>Nejsložitější je oblast nazvaná <i>Variables</i>, která nabízí prohlížení
obsahu vybraných proměnných popř.&nbsp;návratových hodnot prakticky libovolných
výrazů. V&nbsp;této oblasti se automaticky zobrazují hodnoty argumentů funkcí a
před návratem z&nbsp;funkce i vypočtená návratová hodnota, ovšem pomocí klávesy
<strong>n</strong> je možné přidat další proměnnou a/nebo výraz, který sleduje
hodnoty dalších proměnných. V&nbsp;případě, že je proměnná či výraz vybraná,
zobrazí se po stisku klávesy <strong>Enter</strong> dialog, v&nbsp;němž je
možné zvolit, jakým způsobem se obsah proměnné zobrazí. Využívá se zde možností
introspekce Pythonu:</p>

<a href="https://www.root.cz/obrazek/331064/"><img src="https://i.iinfo.cz/images/442/pudb-18-prev.png" class="image-331064" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 23: Nastavení zobrazení vybrané proměnné.</i></p>

<p>V&nbsp;oblasti <i>Variables</i> se používají tyto klávesové zkratky:</p>

<table>
<tr><th>Klávesa</th><th>Význam</th></tr>
<tr><td>n</td><td>přidání nové proměnné nebo výrazu</td></tr>
<tr><td>\</td><td>expanze obsahu proměnné (viz <a href="#k14">další kapitolu</a>)</td></tr>
<tr><td>t</td><td>změna způsobu zobrazení: typ proměnné</td></tr>
<tr><td>r</td><td>změna způsobu zobrazení: výsledek repr()</td></tr>
<tr><td>s</td><td>změna způsobu zobrazení: výsledek str()</td></tr>
<tr><td>c</td><td>změna způsobu zobrazení: podle konfigurace PuDB</td></tr>
<tr><td>h</td><td>vybraná proměnná/výraz bude zvýrazněna, což pomáhá k&nbsp;lepší orientaci</td></tr>
<tr><td>w</td><td>zapne nebo vypne zalamování řádků u proměnných s&nbsp;dlouhým obsahem (seznamy, řetězce)</td></tr>
<tr><td>*</td><td>přepínání způsobu zobrazení obsahu tříd (public, private, all)</td></tr>
<tr><td>m</td><td>zapnutí či vypnutí zobrazení metod u objektů</td></tr>
</table>

<a href="https://www.root.cz/obrazek/331065/"><img src="https://i.iinfo.cz/images/442/pudb-19-prev.png" class="image-331065" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 24: Dialog pro přidání další proměnné či sledovaného výrazu.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Složitější datové struktury</h2>

<p>V&nbsp;případě složitějších datových struktur, například seznamu
seznamů:</p>

<pre>
y = [1,2,3,[4,5,6]]
</pre>
<p></p>

<p>je nutné pro zobrazení vnitřních podstruktur používat klávesovou zkratku
<strong>\</strong>. Ta nefunguje rekurzivně (alespoň ne v&nbsp;současné verzi
PuDB), takže je většinou nutné vybírat i jednotlivé podstruktury a stlačit
<strong>\</strong> několikrát. U výše zmíněného seznamu jen dvakrát:</p>

<pre>
y: list (4) [pub]
| 0: 1
| 1: 2
| 2: 3
| 3: list (3) [pub]
| | 0: 4
| | 1: 5
| | 2: 6
</pre>

<p>Ovšem můžeme mít i složitější strukturu:</p>

<pre>
x = {
    "left": {
        "left": 1,
        "middle": 2,
        "right": 3},
    "middle": {
        "left": 4,
        "middle": 5,
        "right": 6},
    "right": {
        "left": 7,
        "middle": 8,
        "right": 9}}
</pre>


<p>Tu lze zobrazit například následujícím způsobem:</p>

<a href="https://www.root.cz/obrazek/331066/"><img src="https://i.iinfo.cz/images/442/pudb-20-prev.png" class="image-331066" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 25: Zobrazení rekurzivní datové struktury, v&nbsp;tomto případě
slovníku s&nbsp;dalšími slovníky.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Použití vestavěného příkazového řádku při ladění aplikací</h2>

<p>V&nbsp;některých případech může být velmi užitečný vestavěný příkazový
řádek, který programátorům zpřístupňuje vybraný interpret Pythonu. Ve
skutečnosti je celé ladění prováděno v&nbsp;rámci vybraného interpretru, takže
z&nbsp;příkazového řádku má programátor přímý přístup ke všech modulům, třídám,
objektům, funkcím i proměnným, které jsou dostupné nejenom pro čtení, ale i
(pro metody/funkce) pro volání a v&nbsp;případě objektů a proměnných i pro
zápis. Do příkazového řádku je možné se přepnou klávesovou zkratkou
<strong>!</strong> (v&nbsp;případě výchozího nastavení) nebo vždy klávesou
<strong>Ctrl+X</strong>.</p>

<a href="https://www.root.cz/obrazek/331067/"><img src="https://i.iinfo.cz/images/442/pudb-21-prev.png" class="image-331067" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 26: Přístup ke stavu programu i po jeho ukončení (v&nbsp;rámci
post-mortem).</i></p>

<table>
<tr><th>Klávesa</th><th>Význam</th></tr>
<tr><td>Ctrl+P</td><td>hledání v&nbsp;historii již zapsaných příkazů (<i>previous</i>)</td></tr>
<tr><td>Ctrl+N</td><td>hledání v&nbsp;historii již zapsaných příkazů (<i>next</i>)</td></tr>
<tr><td>Tab</td><td>automatické doplňování jmen objektů, metod, funkcí nebo proměnných</td></tr>
</table>

<a href="https://www.root.cz/obrazek/331068/"><img src="https://i.iinfo.cz/images/442/pudb-22-prev.png" class="image-331068" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 27: V&nbsp;rámci příkazového řádku lze provádět i různé
výpočty.</i></p>

<p><div class="rs-tip-major">Poznámka: ve výchozím nastavení je funkce
klávesových zkratek <strong>!</strong> a <strong>Ctrl+X</strong> stejná, ovšem
pokud v&nbsp;konfiguračním dialogu (<strong>Ctrl+P</strong>) zvolíte jiný
interpret, například IPython, bude chování zkratky <strong>!</strong>
odlišné.</div></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Post-mortem operace</h2>

<p>Ve chvíli, kdy je laděná aplikace ukončena, ať již běžným způsobem nebo
pádem, není informace o průběhu jejího běhu a ladění zcela ztracená, protože je
možné provádět takzvané post-mortem zkoumání &bdquo;mrtvolky&ldquo; aplikace.
Co se má s&nbsp;právě ukončenou aplikací provádět se PuDB zeptá
v&nbsp;následujícím dialogu:</p>

<a href="https://www.root.cz/obrazek/331069/"><img src="https://i.iinfo.cz/images/442/pudb-23-prev.png" class="image-331069" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 28: Úspěšné ukončení aplikace.</i></p>

<p>V&nbsp;post-mortem stavu je možné si prohlížet zásobníkové rámce, sledované
proměnné apod. V&nbsp;této části ovšem PuDB obsahuje chybu, takže po ukončení
aplikace je například nemožné nastavovat vlastnosti sledovaných proměnných (což
je logické, protože už nemůže pracovat introspekce, ovšem k&nbsp;pádu debuggeru
by dojít nemělo).</p>

<a href="https://www.root.cz/obrazek/331070/"><img src="https://i.iinfo.cz/images/442/pudb-24-prev.png" class="image-331070" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 29: Post-mortem stav.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Pády PuDB</h2>

<p>PuDB je sice při běžné práci dostatečně stabilní, ovšem přesto může dojít
k&nbsp;situaci, kdy dojde k&nbsp;jeho pádu nebo pouze k&nbsp;nahlášení chyby.
Chyba nastane ve chvíli, kdy se pokusíme načíst zdrojový kód, který neodpovídá
syntaktickým pravidlům Pythonu (typicky se jedná o chybějící čárku, dvojtečku
nebo závorku). K&nbsp;pádu PuDB v&nbsp;mém případě došlo pouze několikrát, a to
při manipulaci se seznamem breakpointů (pokus o vymazání breakpointu, o kterém
si PuDB myslel, že již neexistuje) a proměnných v&nbsp;post-mortem stavu.
V&nbsp;případě, že dojde k&nbsp;pádu, nabídne PuDB možnost ladit sama sebe, což
kupodivu poměrně dobře funguje:</p>

<a href="https://www.root.cz/obrazek/331071/"><img src="https://i.iinfo.cz/images/442/pudb-25-prev.png" class="image-331071" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 30: Při pádu PuDB je možné začít tento debugger ladit.</i></p>

<a href="https://www.root.cz/obrazek/331072/"><img src="https://i.iinfo.cz/images/442/pudb-26-prev.png" class="image-331072" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 31: I přes některé problémy je použití PuDB uživatelsky mnohem
příjemnější, než použití klasického Pdb.</i></p>

<a href="https://www.root.cz/obrazek/331073/"><img src="https://i.iinfo.cz/images/442/pudb-27-prev.png" class="image-331073" alt="&#160;" width="370" height="244" /></a>
<p><i>Obrázek 32: Použití Pdb při ladění funkce pro výpočet faktoriálu.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>Introduction to the PuDB Python Debugging Tool<br />
<a href="http://heather.cs.ucdavis.edu/~matloff/pudb.html">http://heather.cs.ucdavis.edu/~matloff/pudb.html</a>
</li>

<li>pudb’s documentation<br />
<a href="https://documen.tician.de/pudb/">https://documen.tician.de/pudb/</a>
</li>

<li>pudb 2018.1 na PyPi<br />
<a href="https://pypi.org/project/pudb/">https://pypi.org/project/pudb/</a>
</li>

<li>PuDB, the IDE debugger without an IDE!<br />
<a href="https://www.youtube.com/watch?v=IEXx-AQLOBk">https://www.youtube.com/watch?v=IEXx-AQLOBk</a>
</li>

<li>Grafická nadstavba nad GNU Debuggerem gdbgui a její alternativy<br />
<a href="https://www.root.cz/clanky/graficka-nadstavba-nad-gnu-debuggerem-gdbgui-a-jeji-alternativy/">https://www.root.cz/clanky/graficka-nadstavba-nad-gnu-debuggerem-gdbgui-a-jeji-alternativy/</a>
</li>

<li>Užitečné skripty a pluginy pro textový editor Vim: propojení Vimu s debuggery<br />
<a href="https://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-propojeni-vimu-s-debuggery/">https://www.root.cz/clanky/uzitecne-skripty-a-pluginy-pro-textovy-editor-vim-propojeni-vimu-s-debuggery/</a>
</li>

<li>gdbgui 0.7.8.3: browser-based gdb frontend using Flask and JavaScript to visually debug C, C++, Go, or Rust<br />
<a href="https://pypi.python.org/pypi/gdbgui">https://pypi.python.org/pypi/gdbgui</a>
</li>

<li>Repositář projektu gdbgui<br />
<a href="https://github.com/cs01/gdbgui">https://github.com/cs01/gdbgui</a>
</li>

<li>gdbgui - examples<br />
<a href="https://github.com/cs01/gdbgui/tree/master/examples">https://github.com/cs01/gdbgui/tree/master/examples</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (2. část)<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-2-cast/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (3): Nemiver<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-3-nemiver/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (4): KDbg<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-4-kdbg/</a>
</li>

<li>Debuggery a jejich nadstavby v Linuxu (5): ladění aplikací v&nbsp;editorech Emacs a Vim<br />
<a href="http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/">http://mojefedora.cz/debuggery-a-jejich-nadstavby-v-linuxu-5-ladeni-aplikaci-v-editorech-emacs-a-vim/</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>GDB - Supported Languages<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages">http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages</a>
</li>

<li>Borland Turbo Debugger<br />
<a href="https://en.wikipedia.org/wiki/Borland_Turbo_Debugger">https://en.wikipedia.org/wiki/Borland_Turbo_Debugger</a>
</li>

<li>GNU Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Debugger">https://en.wikipedia.org/wiki/GNU_Debugger</a>
</li>

<li>The LLDB Debugger<br />
<a href="http://lldb.llvm.org/">http://lldb.llvm.org/</a>
</li>

<li>Debugger (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Debugger">https://en.wikipedia.org/wiki/Debugger</a>
</li>

<li>13 Linux Debuggers for C++ Reviewed<br />
<a href="http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817">http://www.drdobbs.com/testing/13-linux-debuggers-for-c-reviewed/240156817</a>
</li>

<li>Reverse Engineering Tools in Linux – strings, nm, ltrace, strace, LD_PRELOAD<br />
<a href="http://www.thegeekstuff.com/2012/03/reverse-engineering-tools/">http://www.thegeekstuff.com/2012/03/reverse-engineering-tools/</a>
</li>

<li>An Introduction To Using GDB Under Emacs<br />
<a href="http://tedlab.mit.edu/~dr/gdbintro.html">http://tedlab.mit.edu/~dr/gdbintro.html</a>
</li>

<li>GNU Emacs<br />
<a href="https://www.gnu.org/software/emacs/emacs.html">https://www.gnu.org/software/emacs/emacs.html</a>
</li>

<li>The Emacs Editor<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html</a>
</li>

<li>Emacs Lisp<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html</a>
</li>

<li>An Introduction to Programming in Emacs Lisp<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html</a>
</li>

<li>27.6 Running Debuggers Under Emacs<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html</a>
</li>

<li>GdbMode<br />
<a href="http://www.emacswiki.org/emacs/GdbMode">http://www.emacswiki.org/emacs/GdbMode</a>
</li>

<li>Emacs (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Emacs">https://en.wikipedia.org/wiki/Emacs</a>
</li>

<li>Emacs Lisp (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Emacs_Lisp">https://en.wikipedia.org/wiki/Emacs_Lisp</a>
</li>

<li>Pyclewn installation notes<br />
<a href="http://pyclewn.sourceforge.net/install.html">http://pyclewn.sourceforge.net/install.html</a>
</li>

<li>pip Installation<br />
<a href="https://pip.pypa.io/en/latest/installing.html">https://pip.pypa.io/en/latest/installing.html</a>
</li>

<li>Clewn<br />
<a href="http://clewn.sourceforge.net/">http://clewn.sourceforge.net/</a>
</li>

<li>Clewn installation<br />
<a href="http://clewn.sourceforge.net/install.html">http://clewn.sourceforge.net/install.html</a>
</li>

<li>Clewn - soubory<br />
<a href="http://sourceforge.net/projects/clewn/files/OldFiles/">http://sourceforge.net/projects/clewn/files/OldFiles/</a>
</li>

<li>KDbg: úvodní stránka<br />
<a href="http://www.kdbg.org/">http://www.kdbg.org/</a>
</li>

<li>Nemiver (stránky projektu)<br />
<a href="https://wiki.gnome.org/Apps/Nemiver">https://wiki.gnome.org/Apps/Nemiver</a>
</li>

<li>Basic Assembler Debugging with GDB<br />
<a href="http://dbp-consulting.com/tutorials/debugging/basicAsmDebuggingGDB.html">http://dbp-consulting.com/tutorials/debugging/basicAsmDebuggingGDB.html</a>
</li>

<li>Nemiver FAQ<br />
<a href="https://wiki.gnome.org/Apps/Nemiver/FAQ">https://wiki.gnome.org/Apps/Nemiver/FAQ</a>
</li>

<li>Nemiver (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Nemiver">https://en.wikipedia.org/wiki/Nemiver</a>
</li>

<li>Data Display Debugger<br />
<a href="https://www.gnu.org/software/ddd/">https://www.gnu.org/software/ddd/</a>
</li>

<li>GDB - Dokumentace<br />
<a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">http://sourceware.org/gdb/current/onlinedocs/gdb/</a>
</li>

<li>BASH Debugger<br />
<a href="http://bashdb.sourceforge.net/">http://bashdb.sourceforge.net/</a>
</li>

<li>The Perl Debugger(s)<br />
<a href="http://debugger.perl.org/">http://debugger.perl.org/</a>
</li>

<li>Visual Debugging with DDD<br />
<a href="http://www.drdobbs.com/tools/visual-debugging-with-ddd/184404519">http://www.drdobbs.com/tools/visual-debugging-with-ddd/184404519</a>
</li>

<li>Pydb - Extended Python Debugger<br />
<a href="http://bashdb.sourceforge.net/pydb/">http://bashdb.sourceforge.net/pydb/</a>
</li>

<li>Debugging<br />
<a href="http://janus.uclan.ac.uk/pagray/labs/debug.htm">http://janus.uclan.ac.uk/pagray/labs/debug.htm</a>
</li>

<li>Insight<br />
<a href="http://www.sourceware.org/insight/">http://www.sourceware.org/insight/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

