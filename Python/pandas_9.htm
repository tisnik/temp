<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Operace s daty uloženými v binárních souborech v knihovnách NumPy a Pandas (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Operace s daty uloženými v binárních souborech v knihovnách NumPy a Pandas (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na předchozí článek, v němž jsme si ukázali základy práce s daty uloženými v binárních souborech v knihovnách NumPy a Pandas, dnes navážeme. Jednou z největších předností binárních souborů jsou rychlé přesuny (seek) a namapování obsahu souboru do paměti (mmap).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Operace s&nbsp;daty uloženými v&nbsp;binárních souborech v&nbsp;knihovnách NumPy a Pandas (dokončení)</a></p>
<p><a href="#k02">2. Krátké zopakování z&nbsp;minula &ndash; uložení matice do binárního souboru, opětovné načtení této matice</a></p>
<p><a href="#k03">3. Načtení obsahu matice z&nbsp;binárního souboru se specifikací formátu a offsetu</a></p>
<p><a href="#k04">4. Načtení obsahu matice z&nbsp;binárního souboru se specifikací formátu, offsetu a počtu prvků</a></p>
<p><a href="#k05">5. Uložení obsahu rozsáhlejší matice do standardního binárního souboru</a></p>
<p><a href="#k06">6. Přečtení obsahu matice ze standardního binárního souboru</a></p>
<p><a href="#k07">7. Využití systémového volání <strong>mmap</strong> při práci s&nbsp;rozsáhlejšími maticemi</a></p>
<p><a href="#k08">8. Porovnání operací použitých pro přečtení matice ze standardního binárního souboru</a></p>
<p><a href="#k09">9. Standardní souborový formát pro uložení většího množství matic</a></p>
<p><a href="#k10">10. Uložení většího množství matic do jediného souboru</a></p>
<p><a href="#k11">11. Načtení většího množství matic z&nbsp;jediného souboru</a></p>
<p><a href="#k12">12. Pojmenování matic v&nbsp;souboru NPZ</a></p>
<p><a href="#k13">13. Komprimace obsahu matic v&nbsp;souboru NPZ</a></p>
<p><a href="#k14">14. Porovnání souboru NPZ s&nbsp;komprimovanou a nekomprimovanou maticí</a></p>
<p><a href="#k15">15. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k16">16. Odkazy na předchozí části seriálu o knihovně Pandas</a></p>
<p><a href="#k17">17. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Operace s&nbsp;daty uloženými v&nbsp;binárních souborech v&nbsp;knihovnách NumPy a Pandas (dokončení)</h2>

<p>Na <a
href="https://www.root.cz/clanky/operace-s-daty-ulozenymi-v-binarnich-souborech-v-knihovnach-numpy-a-pandas/">předchozí
článek</a>, ve kterém jsme si ukázali základy práce s&nbsp;daty (vektory,
maticemi, řadami i datovými rámci) uloženými v&nbsp;binárních souborech
v&nbsp;knihovnách <i>NumPy</i> a <i>Pandas</i>, dnes navážeme. Ukážeme si totiž
některé další možnosti, které nám binární soubory (ať již &bdquo;raw&ldquo;,
tedy pouze soubory s&nbsp;čistými daty, nebo standardní soubory NPY) nabízí.
Jednou z&nbsp;největších předností binárních souborů oproti souborům textovým
jsou rychlé přesuny (tedy operace typu <i>seek</i>) a taktéž možnost namapování
obsahu souboru do paměti (<i>mmap</i>). To však není vše, protože si
představíme i formát NPZ, který umožňuje uložit větší množství vektorů a matic
knihovny NumPy, a to dokonce i s&nbsp;volitelnou komprimací (interně se ovšem
nejedná o žádnou raketovou vědu, protože NPZ je vlastně běžný ZIP archiv
obsahující soubory NPY).</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Krátké zopakování z&nbsp;minula &ndash; uložení matice do binárního souboru, opětovné načtení této matice</h2>

<p>V&nbsp;úvodním článku o problematice binárních souborů obsahujících data pro
knihovnu NumPy popř.&nbsp;i datové řady nebo datové rámce pro knihovnu Pandas
jsme si mj.&nbsp;ukázali i metodu nazvanou <strong>tofile</strong> třídy
<strong>ndarray</strong> popř.&nbsp;funkci <strong>Numpy.tofile</strong>.
S&nbsp;využitím těchto dvou volání lze zajistit uložení &bdquo;čistých&ldquo;
dat polí do souboru s&nbsp;možností jejich zpětného načtení. Základem je metoda
<strong>ndarray.tofile</strong>:</p>

<pre>
tofile(...)
    a.tofile(fid, sep="", format="%s")
&nbsp;    
    Write array to a file as text or binary (default).
&nbsp;
    Data is always written in 'C' order, independent of the order of `a`.
    The data produced by this method can be recovered using the function
    fromfile().
</pre>

<p>Tuto metodu použijeme pro uložení obsahu poměrně rozsáhlé matice s&nbsp;pěti
sloupci a 500 řádky, přičemž jednotlivé prvky budou typu &bdquo;i&ldquo; neboli
celé číslo, jehož způsob uložení, rozsah atd. je závislý na použité platformě
(viz též <a href="https://numpy.org/doc/stable/user/basics.types.html">tento
popis</a>):</p>

<pre>
<i>"""Uložení obsahu matice do binárního souboru."""</i>
&nbsp;
import numpy as np
&nbsp;
<i># rozměry matice</i>
rows = 500
columns = 5
&nbsp;
<i># matice obsahující celočíselné hodnoty typu integer</i>
m = np.linspace(1, rows*columns, rows*columns, dtype="i").reshape(rows, columns)
&nbsp;
<i># tisk obsahu zkonstruované matice</i>
print(m)
&nbsp;
<i># uložení matice do souboru v čistém binárním formátu</i>
<strong>m.tofile("matrix3.bin")</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_to_file_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_to_file_3.py</a>.</div></p>

<p>Na platformě x86-64 bude výsledkem soubor o velikosti přesně 10&nbsp;000
bajtů. Proč je tento soubor přesně takto velký zjistíme snadno &ndash; uložilo
se celkem 5&times;500=2500 prvků matice, přičemž každý prvek je uložen ve
čtyřech bajtech. Obsah souboru si můžeme zobrazit s&nbsp;využitím příkazu
<strong>od</strong> (<i>octal dump</i>) zmíněného minule:</p>

<pre>
$ <strong>od -t d4 matrix3.bin</strong>
&nbsp;
0000000           1           2           3           4
0000020           5           6           7           8
0000040           9          10          11          12
0000060          13          14          15          16
0000100          17          18          19          20
0000120          21          22          23          24
0000140          25          26          27          28
0000160          29          30          31          32
0000200          33          34          35          36
0000220          37          38          39          40
0000240          41          42          43          44
0000260          45          46          47          48
0000700         113         114         115         116
0000720         117         118         119         120
0000740         121         122         123         124
0000760         125         126         127         128
0001000         129         130         131         132
0001020         133         134         135         136
0001040         137         138         139         140
0001060         141         142         143         144
0001100         145         146         147         148
0001120         149         150
...
...
...
0023120        2453        2454        2455        2456
0023140        2457        2458        2459        2460
0023160        2461        2462        2463        2464
0023200        2465        2466        2467        2468
0023220        2469        2470        2471        2472
0023240        2473        2474        2475        2476
0023260        2477        2478        2479        2480
0023300        2481        2482        2483        2484
0023320        2485        2486        2487        2488
0023340        2489        2490        2491        2492
0023360        2493        2494        2495        2496
0023400        2497        2498        2499        2500
0023420
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že <strong>od</strong>
dokáže nativně pracovat s&nbsp;celými čísly uloženými ve větším množství
bajtů.</div></p>

<p>Zpětné načtení obsahu matice se skládá ze dvou operací &ndash; načtení dat
ve formě jednorozměrného vektoru (se specifikací formátu prvků) a vytvoření
matice z&nbsp;tohoto vektoru metodou <strong>reshape</strong>. I přes tento
název se interně žádné přesuny prvků neprovádí, takže <strong>reshape</strong>
pracuje velmi efektivně:</p>

<pre>
<i>"""Načtení obsahu matice z binárního souboru se specifikací formátu."""</i>
&nbsp;
import numpy as np
&nbsp;
<i># rozměry výsledné matice</i>
rows = 500
columns = 5
&nbsp;
<i># načtení prvků matice z binárního souboru a konstrukce matice</i>
m = <strong>np.fromfile("matrix3.bin", dtype="i").reshape(rows, columns)</strong>
&nbsp;
<i># výpis obsahu právě zkonstruované matice</i>
print(m)
</pre>

<p>Výsledek po spuštění:</p>

<pre>
[[   1    2    3    4    5]
 [   6    7    8    9   10]
 [  11   12   13   14   15]
 ...
 [2486 2487 2488 2489 2490]
 [2491 2492 2493 2494 2495]
 [2496 2497 2498 2499 2500]]
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_5.py</a>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Načtení obsahu matice z&nbsp;binárního souboru se specifikací formátu a offsetu</h2>

<p>Velmi často se v&nbsp;praxi můžeme setkat s&nbsp;požadavkem na zpracování
dat (typicky rozměrných matic) uložených v&nbsp;binárních souborech o značné
velikosti. V&nbsp;případě, že se má zpracovat pouze podmnožina těchto dat, a
navíc dokážeme získat počáteční index &bdquo;podmatice&ldquo;, lze tuto operaci
provést relativně snadno &ndash; budeme pouze muset specifikovat <i>offset</i>
v&nbsp;rámci binárního souboru. Malý problém spočívá v&nbsp;tom, že offset není
specifikován jako index prvku, ale index prvního bajtu, který se má načíst. Na
základě velikosti matice (počtu sloupců), požadovaném prvním řádku, který se má
načíst a známém typu prvků musíme provést tento výpočet:</p>

<pre>
<i># první řádek matice, který chceme načíst z binárního souboru</i>
first_row = 250
&nbsp;
<i># platformově nezávislé získání počtu bajtů pro každý prvek typu integer</i>
item_size = np.dtype("i").itemsize
&nbsp;
<i># výpočet offsetu při čtení řádků od first_row z binárního souboru</i>
offset = first_row * columns * item_size
</pre>

<p>Offset se zadává formou nepovinného parametru funkce
<strong>numpy.fromfile</strong>:</p>

<pre>
<i># načtení prvků matice z binárního souboru a konstrukce matice</i>
m = np.fromfile("matrix3.bin", dtype="i", <strong>offset=offset</strong>).reshape(rows, columns)
</pre>

<p>Ukažme si celý postup na dalším demonstračním příkladu:</p>

<pre>
<i>"""Načtení obsahu matice z binárního souboru se specifikací formátu a offsetu."""</i>
&nbsp;
import numpy as np
&nbsp;
<i># rozměry výsledné matice</i>
rows = 250
columns = 5
&nbsp;
<i># první řádek matice načtený z binárního souboru</i>
first_row = 250
&nbsp;
<i># platformově nezávislé získání počtu bajtů pro každý prvek typu integer</i>
item_size = np.dtype("i").itemsize
&nbsp;
<i># výpočet offsetu při čtení řádků od first_row z binárního souboru</i>
offset = first_row * columns * item_size
&nbsp;
print("offset=", offset, "bytes")
print()
&nbsp;
<i># načtení prvků matice z binárního souboru a konstrukce matice</i>
m = <strong>np.fromfile("matrix3.bin", dtype="i", offset=offset).reshape(rows, columns)</strong>
&nbsp;
<i># výpis obsahu právě zkonstruované matice</i>
print(m)
</pre>

<p>Výsledek získaný po spuštění tohoto příkladu:</p>

<pre>
offset= 5000 bytes
&nbsp;
[[1251 1252 1253 1254 1255]
 [1256 1257 1258 1259 1260]
 [1261 1262 1263 1264 1265]
 ...
 [2486 2487 2488 2489 2490]
 [2491 2492 2493 2494 2495]
 [2496 2497 2498 2499 2500]]
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_6.py</a>.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Načtení obsahu matice z&nbsp;binárního souboru se specifikací formátu, offsetu a počtu prvků</h2>

<p><a href="#k03">V&nbsp;předchozí kapitole</a> jsme specifikovali, že načítání
prvků má začít od offsetu 5000. Od tohoto offsetu byl načten zbytek souboru,
tedy 10000-5000=5000 bajtů, což odpovídá 1250 prvkům. Pro omezení velikosti
načítaných dat však můžeme určit jak offset, tak i počet prvků, přičemž počet
prvků je specifikován nepovinným parametrem <strong>count</strong>:</p>

<pre>
<i># načtení prvků matice z binárního souboru a konstrukce matice</i>
m = np.fromfile("matrix3.bin", dtype="i", offset=offset, <strong>count=count</strong>).reshape(last_row-first_row, columns)
</pre>

<p>Výpočet počtu prvků lze provést na základě prvního a posledního řádku, který
se má načíst (a pochopitelně i počtu sloupců v&nbsp;matici):</p>

<pre>
<i># první řádek matice načtený z binárního souboru</i>
first_row = 200
&nbsp;
<i># poslední řádek matice načtený z binárního souboru</i>
last_row = 350
&nbsp;
<i># počet sloupců matice</i>
columns = 5
&nbsp;
<i># počet prvků, které se mají načíst</i>
count = (last_row - first_row) * columns
</pre>

<p>Vše si opět ukážeme na jednoduchém demonstračním příkladu:</p>

<pre>
<i>"""Načtení obsahu matice z binárního souboru se specifikací formátu, offsetu a počtu prvků."""</i>
&nbsp;
import numpy as np
&nbsp;
<i># první řádek matice načtený z binárního souboru</i>
first_row = 200
&nbsp;
<i># poslední řádek matice načtený z binárního souboru</i>
last_row = 350
&nbsp;
<i># počet sloupců matice</i>
columns = 5
&nbsp;
<i># platformově nezávislé získání počtu bajtů pro každý prvek typu integer</i>
item_size = np.dtype("i").itemsize
&nbsp;
<i># výpočet offsetu při čtení řádků od first_row z binárního souboru</i>
offset = first_row * columns * item_size
count = (last_row - first_row) * columns
&nbsp;
print("offset=", offset, "bytes")
print("count=", count, "items")
print()
&nbsp;
<i># načtení prvků matice z binárního souboru a konstrukce matice</i>
m = np.fromfile("matrix3.bin", dtype="i", offset=offset, count=count).reshape(last_row-first_row, columns)
&nbsp;
<i># výpis obsahu právě zkonstruované matice</i>
print(m)
</pre>

<p>Výsledkem bude mnohem menší matice:</p>

<pre>
offset= 4000 bytes
count= 750 items
&nbsp;
[[1001 1002 1003 1004 1005]
 [1006 1007 1008 1009 1010]
 [1011 1012 1013 1014 1015]
 [1016 1017 1018 1019 1020]
 [1021 1022 1023 1024 1025]
 [1026 1027 1028 1029 1030]
 [1031 1032 1033 1034 1035]
 [1036 1037 1038 1039 1040]
 [1041 1042 1043 1044 1045]
 [1046 1047 1048 1049 1050]
 [1051 1052 1053 1054 1055]
 ...
 ...
 ...
 [1696 1697 1698 1699 1700]
 [1701 1702 1703 1704 1705]
 [1706 1707 1708 1709 1710]
 [1711 1712 1713 1714 1715]
 [1716 1717 1718 1719 1720]
 [1721 1722 1723 1724 1725]
 [1726 1727 1728 1729 1730]
 [1731 1732 1733 1734 1735]
 [1736 1737 1738 1739 1740]
 [1741 1742 1743 1744 1745]
 [1746 1747 1748 1749 1750]]
</pre>

<p><div class="rs-tip-major">Poznámka: zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_7.py</a>.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Uložení obsahu rozsáhlejší matice do standardního binárního souboru</h2>

<p>Minule jsme se zmínili i o možnosti uložení obsahu vektorů a matic do
standardního binárního souboru. Předchozí pokusy o serializaci dat měly totiž
jednu zásadní nevýhodu &ndash; bude se jednat skutečně pouze o čisté hodnoty
prvků. Žádné další informace se neuloží &ndash; tedy ani typ prvků ani tvar
pole. To není ani zdaleka ideální situace a proto byl vyvinut dnes již
standardní binární formát určený pro ukládání n-rozměrných polí. Tento formát
se nazývá NPY a jeho popis lze nalézt na stránce <a
href="https://numpy.org/devdocs/reference/generated/numpy.lib.format.html">https://numpy.org/devdocs/reference/generated/numpy.lib.format.html</a>.
Jedná se o přímou serializaci pole do souboru (což již velmi dobře známe),
ovšem před vlastní hodnoty prvků je uložena jednoduchá hlavička se všemi
důležitými informacemi &ndash; včetně endianity, kterou jsme prozatím vůbec
neřešili.</p>

<p>Pro uložení se používá funkce <strong>numpy.save</strong>:</p>

<pre>
save(file, arr, allow_pickle=True, fix_imports=True)
    Save an array to a binary file in NumPy ``.npy`` format.
&nbsp;
    Parameters
    ----------
    file : file, str, or pathlib.Path
        File or filename to which the data is saved.  If file is a file-object,
        then the filename is unchanged.  If file is a string or Path, a ``.npy``
        extension will be appended to the filename if it does not already
        have one.
   ...
   ...
   ...
</pre>

<p><div class="rs-tip-major">Poznámka: jedná se skutečně o funkci a nikoli o
metodu pole, což je oproti předchozím příkladům odlišné!</div></p>

<p>Následující skript po svém spuštění uloží rozsáhlou matici s&nbsp;1000 řádky
pěti sloupci do standardního souboru NPY:</p>

<pre>
<i>"""Uložení obsahu matice do standardního binárního souboru."""</i>
&nbsp;
import numpy as np
&nbsp;
<i># rozměry matice</i>
rows = 1000
columns = 5
&nbsp;
<i># matice obsahující celočíselné hodnoty typu integer</i>
m = np.linspace(1, rows*columns, rows*columns, dtype="i").reshape(rows, columns)
&nbsp;
<i># tisk obsahu zkonstruované matice</i>
print(m)
&nbsp;
<i># uložení matice do souboru ve standardním formátu</i>
<strong>np.save("matrix3.npy", m, allow_pickle=False)</strong>
</pre>

<p>Obsah vytvořeného binárního souboru &bdquo;matrix3.npy&ldquo; si opět můžeme
zobrazit nástrojem <strong>od</strong>. Prvních 128 bajtů je určeno pro uložení
hlavičky, která obsahuje i metadata v&nbsp;textové podobě. Ve skutečnosti je
hlavičkou obsazeno jen 74 bajtů, ovšem v&nbsp;případě rozsáhlejších matic
s&nbsp;větším počtem dimenzí je možné, že bude obsazena celá hlavička, protože
se zvětší ta část hlavičky, která obsahuje textovou podobu atributu
<strong>shape</strong>:</p>

<pre>
0000000  1297436307       88400   662372470  1668506980  &gt;.NUMPY..v.{'desc&lt;
0000020   540682098   879311911   656419879  1953656678  &gt;r': '&lt;i4', 'fort&lt;
0000040  1601069426  1701081711   540682098  1936482630  &gt;ran_order': Fals&lt;
0000060   656419941  1885431923   540682085   741356328  &gt;e, 'shape': (30,&lt;
0000100   740898080   539000096   538976288   538976288  &gt; 5), }          &lt;
0000120   538976288   538976288   538976288   538976288  &gt;                &lt;
*
0000160   538976288   538976288   538976288   169877536  &gt;               .&lt;
</pre>

<p>Od offsetu 0200 (dekadicky tedy od offsetu 128) začínají hodnoty
jednotlivých prvků. Každý prvek je uložen ve čtyřech bajtech a vzhledem
k&nbsp;tomu, že soubor vznikl na platformě x86-64, používá se pořadí bajtů
<i>little endian</i>, což znamená, že nejdříve jsou uloženy bajty s&nbsp;nižší
vahou. Nástroj <strong>od</strong> dokáže s&nbsp;tímto formátem nativně
pracovat, takže lze zbytek souboru zobrazit snadno tak, aby byl dobře
čitelný:</p>

<pre>
0000200           1           2           3           4  &gt;................&lt;
0000220           5           6           7           8  &gt;................&lt;
0000240           9          10          11          12  &gt;................&lt;
0000260          13          14          15          16  &gt;................&lt;
0000300          17          18          19          20  &gt;................&lt;
0000320          21          22          23          24  &gt;................&lt;
0000340          25          26          27          28  &gt;................&lt;
0000360          29          30          31          32  &gt;............ ...&lt;
0000400          33          34          35          36  &gt;!..."...#...$...&lt;
0000420          37          38          39          40  &gt;%...&amp;...'...(...&lt;
0000440          41          42          43          44  &gt;)...*...+...,...&lt;
0000460          45          46          47          48  &gt;-......./...0...&lt;
0000500          49          50          51          52  &gt;1...2...3...4...&lt;
0000520          53          54          55          56  &gt;5...6...7...8...&lt;
0000540          57          58          59          60  &gt;9...:...;...&lt;...&lt;
0000560          61          62          63          64  &gt;=...&gt;...?...@...&lt;
0000600          65          66          67          68  &gt;A...B...C...D...&lt;
0000620          69          70          71          72  &gt;E...F...G...H...&lt;
0000640          73          74          75          76  &gt;I...J...K...L...&lt;
0000660          77          78          79          80  &gt;M...N...O...P...&lt;
0000700          81          82          83          84  &gt;Q...R...S...T...&lt;
0000720          85          86          87          88  &gt;U...V...W...X...&lt;
0000740          89          90          91          92  &gt;Y...Z...[...\...&lt;
0000760          93          94          95          96  &gt;]...^..._...`...&lt;
0001000          97          98          99         100  &gt;a...b...c...d...&lt;
0001020         101         102         103         104  &gt;e...f...g...h...&lt;
0001040         105         106         107         108  &gt;i...j...k...l...&lt;
0001060         109         110         111         112  &gt;m...n...o...p...&lt;
0001100         113         114         115         116  &gt;q...r...s...t...&lt;
0001120         117         118         119         120  &gt;u...v...w...x...&lt;
0001140         121         122         123         124  &gt;y...z...{...|...&lt;
0001160         125         126         127         128  &gt;}...~...........&lt;
0001200         129         130         131         132  &gt;................&lt;
0001220         133         134         135         136  &gt;................&lt;
0001240         137         138         139         140  &gt;................&lt;
0001260         141         142         143         144  &gt;................&lt;
0001300         145         146         147         148  &gt;................&lt;
0001320         149         150                          &gt;........&lt;
0001330
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Přečtení obsahu matice ze standardního binárního souboru</h2>

<p>V&nbsp;případě, že budeme chtít načíst obsah celé matice ze standardního
binárního souboru, je situace poměrně jednoduchá, protože pro tento účel můžeme
použít standardní funkci nazvanou <strong>numpy.load</strong>, které předáme
pouze jméno souboru, ve kterém je matice uložena (jedná se tedy o opak funkce
<strong>numpy.save</strong>):</p>

<pre>
load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII')
    Load arrays or pickled objects from ``.npy``, ``.npz`` or pickled files.
&nbsp;
    .. warning:: Loading files that contain object arrays uses the ``pickle``
                 module, which is not secure against erroneous or maliciously
                 constructed data. Consider passing ``allow_pickle=False`` to
                 load data that is known not to contain object arrays for the
                 safer handling of untrusted sources.
&nbsp;
</pre>

<p>V&nbsp;případě, že budeme chtít načíst celou matici (nejenom její část),
předá se funkci <strong>numpy.load</strong> pouze jméno souboru s&nbsp;uloženou
maticí:</p>

<pre>
<i>"""Přečtení obsahu matice ze standardního binárního souboru."""</i>
&nbsp;
import numpy as np
&nbsp;
<i># načtení matice ze standardního binárního souboru</i>
m = <strong>np.load("matrix3.npy")</strong>
&nbsp;
<i># zobrazení obsahu matice</i>
print(m)
print()
&nbsp;
<i># zobrazení dalších informací o matici</i>
print("Dimensions:", m.ndim)
print("Data type:", m.dtype)
print("Item size:", m.itemsize, "bytes")
print("Array size:", m.size, "items")
</pre>

<p>S&nbsp;touto funkcí jsme se seznámili již minule, takže pro nás nebude
příliš překvapující fakt, že počet dimenzí, tvar, datový typ prvků i celková
velikost matice byly plně obnoveny:</p>

<pre>
[[   1    2    3    4    5]
 [   6    7    8    9   10]
 [  11   12   13   14   15]
 ...
 [4986 4987 4988 4989 4990]
 [4991 4992 4993 4994 4995]
 [4996 4997 4998 4999 5000]]
&nbsp;
Dimensions: 2
Data type: int32
Item size: 4 bytes
Array size: 5000 items
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Využití systémového volání <strong>mmap</strong> při práci s&nbsp;rozsáhlejšími maticemi</h2>

<p>Při práci se standardními soubory s&nbsp;maticemi lze namísto dvojice
<strong>open+read</strong> využít i systémové volání <strong>mmap</strong>,
které umožňuje k&nbsp;souboru přistupovat jako k&nbsp;regionu ve virtuální
paměti (ne ovšem nutně v&nbsp;paměti fyzické). Tento režim se povoluje volbou
<strong>mmap_mode</strong>, přičemž pro režim čtení (bez modifikace) je nutné
této nepovinné volbě (parametru) předat řetězec &bdquo;r&ldquo;. Přístup
k&nbsp;souboru pak bude interně proveden zcela odlišným způsobem:</p>

<pre>
<i>"""Přečtení obsahu matice ze standardního binárního souboru."""</i>
&nbsp;
import numpy as np
&nbsp;
<i># použití režimu mmap</i>
m = np.load("matrix3.npy", <strong>mmap_mode="r"</strong>)
&nbsp;
<i># zobrazení dalších informací o matici</i>
print("Dimensions:", m.ndim)
print("Data type:", m.dtype)
print("Item size:", m.itemsize, "bytes")
print("Array size:", m.size, "items")
</pre>

<p>Výsledek:</p>

<pre>
Dimensions: 2
Data type: int32
Item size: 4 bytes
Array size: 5000 items
</pre>

<p>Pokud budeme přistupovat pouze k&nbsp;části matice, měl by se počet I/O
operací snížit:</p>

<pre>
<i>"""Přečtení obsahu matice ze standardního binárního souboru."""</i>
&nbsp;
import numpy as np
&nbsp;
<i># použití režimu mmap</i>
m = np.load("matrix3.npy", <strong>mmap_mode="r"</strong>)
&nbsp;
<i># zobrazení dalších informací o matici</i>
print("Dimensions:", m.ndim)
print("Data type:", m.dtype)
print("Item size:", m.itemsize, "bytes")
print("Array size:", m.size, "items")
&nbsp;
print(m[500:510])
</pre>

<p>S&nbsp;výsledkem:</p>

<pre>
Dimensions: 2
Data type: int32
Item size: 4 bytes
Array size: 5000 items
[[2501 2502 2503 2504 2505]
 [2506 2507 2508 2509 2510]
 [2511 2512 2513 2514 2515]
 [2516 2517 2518 2519 2520]
 [2521 2522 2523 2524 2525]
 [2526 2527 2528 2529 2530]
 [2531 2532 2533 2534 2535]
 [2536 2537 2538 2539 2540]
 [2541 2542 2543 2544 2545]
 [2546 2547 2548 2549 2550]]
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Porovnání operací použitých pro přečtení matice ze standardního binárního souboru</h2>

<p>Podívejme se nyní na to, jak se interně změní systémová volání ve chvíli,
kdy načteme soubor s&nbsp;maticí běžným způsobem v&nbsp;porovnání
s&nbsp;otevřením v&nbsp;režimu <strong>mmap</strong>. Nejdříve spustíme skript,
který matici otevře a přečte funkcí <strong>numpy.load</strong> ve standardním
režimu. Budeme přitom sledovat pouze operace prováděné nad vstupním souborem
s&nbsp;maticí:</p>

<pre>
$ <strong>strace -P matrix3.npy python3 matrix_load_3.py</strong>
&nbsp;
strace: Requested path 'matrix3.npy' resolved into '/home/ptisnovs/src/python/most-popular-python-libs/numpy/matrix3.npy'
openat(AT_FDCWD, "matrix3.npy", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0664, st_size=20128, ...}) = 0
ioctl(3, TCGETS, 0x7ffe69bc6210)        = -1 ENOTTY (Inappropriate ioctl for device)
lseek(3, 0, SEEK_CUR)                   = 0
read(3, "\223NUMPY\1\0v\0{'descr': '&lt;i4', 'fort"..., 4096) = 4096
lseek(3, 0, SEEK_CUR)                   = 4096
fcntl(3, F_DUPFD_CLOEXEC, 0)            = 4
fcntl(4, F_GETFL)                       = 0x8000 (flags O_RDONLY|O_LARGEFILE)
lseek(4, 0, SEEK_CUR)                   = 4096
lseek(3, 0, SEEK_CUR)                   = 4096
fstat(4, {st_mode=S_IFREG|0664, st_size=20128, ...}) = 0
lseek(4, 0, SEEK_SET)                   = 0
<strong>read(4, "\223NUMPY\1\0v\0{'descr': '&lt;i4', 'fort"..., 128) = 128</strong>
lseek(4, 0, SEEK_SET)                   = 0
<strong>read(4, "\223NUMPY\1\0v\0{'descr': '&lt;i4', 'fort"..., 4096) = 4096</strong>
<strong>read(4, "\341\3\0\0\342\3\0\0\343\3\0\0\344\3\0\0\345\3\0\0\346\3\0\0\347\3\0\0\350\3\0\0"..., 12288) = 12288</strong>
<strong>read(4, "\341\17\0\0\342\17\0\0\343\17\0\0\344\17\0\0\345\17\0\0\346\17\0\0\347\17\0\0\350\17\0\0"..., 4096) = 3744</strong>
close(4)                                = 0
lseek(3, 4096, SEEK_SET)                = 4096
lseek(3, 20128, SEEK_SET)               = 20128
close(3)                                = 0
+++ exited with 0 +++
</pre>

<p>Z&nbsp;výsledků je patrné, že se soubor otevře dvakrát, ovšem vlastní čtení
probíhá pouze se druhým otevřeným souborem. Celá matice je načtena sekvencí
systémových volání <strong>read</strong> (první z&nbsp;těchto volání přečte
hlavičku o délce 128 bajtů).</p>

<p>Dále se podíváme na výsledek v&nbsp;případě, že je soubor s&nbsp;maticí
otevřen v&nbsp;režimu <strong>mmap</strong>:</p>

<pre>
$ <strong>strace -P matrix3.npy python3 matrix_load_5.py</strong>
&nbsp;
strace: Requested path 'matrix3.npy' resolved into '/home/ptisnovs/src/python/most-popular-python-libs/numpy/matrix3.npy'
openat(AT_FDCWD, "matrix3.npy", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0664, st_size=20128, ...}) = 0
ioctl(3, TCGETS, 0x7fffd302e2d0)        = -1 ENOTTY (Inappropriate ioctl for device)
lseek(3, 0, SEEK_CUR)                   = 0
read(3, "\223NUMPY\1\0v\0{'descr': '&lt;i4', 'fort"..., 4096) = 4096
lseek(3, 0, SEEK_CUR)                   = 4096
openat(AT_FDCWD, "matrix3.npy", O_RDONLY|O_CLOEXEC) = 4
fstat(4, {st_mode=S_IFREG|0664, st_size=20128, ...}) = 0
ioctl(4, TCGETS, 0x7fffd302dff0)        = -1 ENOTTY (Inappropriate ioctl for device)
lseek(4, 0, SEEK_CUR)                   = 0
<strong>read(4, "\223NUMPY\1\0v\0{'descr': '&lt;i4', 'fort"..., 4096) = 4096</strong>
lseek(4, 0, SEEK_CUR)                   = 4096
close(4)                                = 0
openat(AT_FDCWD, "matrix3.npy", O_RDONLY|O_CLOEXEC) = 4
fstat(4, {st_mode=S_IFREG|0664, st_size=20128, ...}) = 0
ioctl(4, TCGETS, 0x7fffd302dae0)        = -1 ENOTTY (Inappropriate ioctl for device)
lseek(4, 0, SEEK_CUR)                   = 0
lseek(4, 0, SEEK_CUR)                   = 0
lseek(4, 0, SEEK_END)                   = 20128
lseek(4, 0, SEEK_CUR)                   = 20128
fstat(4, {st_mode=S_IFREG|0664, st_size=20128, ...}) = 0
fcntl(4, F_DUPFD_CLOEXEC, 0)            = 5
<strong>mmap(NULL, 20128, PROT_READ, MAP_SHARED, 4, 0) = 0x7f941fa52000</strong>
close(4)                                = 0
close(3)                                = 0
close(5)                                = 0
+++ exited with 0 +++
</pre>

<p>V&nbsp;tomto případě je opět přečtena hlavička, ovšem poté se zavolá
systémové volání <strong>mmap</strong> a další operace typu
<strong>read</strong> zde již nenalezneme.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Standardní souborový formát pro uložení většího množství matic</h2>

<p>Nyní již víme, jak vypadá standardní souborový formát NPY, který je určený
pro uložení obsahu jediné matice, a to včetně všech důležitých metainformací o
této matici (tvar, typ prvků, endianita). Ovšem mnohdy jsme postaveni před úkol
přenášet větší množství matic. To lze pochopitelně zajistit použitím většího
množství souborů NPY, ovšem nemusí se vždy jednat o to nejvýhodnější řešení.
Z&nbsp;tohoto důvodu začal být knihovnou NumPy oficiálně podporován ještě jeden
souborový formát nazvaný NPZ, v&nbsp;němž je možné ukládat větší množství
matic. Interně se jedná o formát založený na klasickém ZIPu, tedy na formátu,
v&nbsp;němž je možné uložit větší množství souborů NPY. V&nbsp;navazujících
kapitolách si ukážeme, jakým způsobem je možné tyto soubory vytvářet a
pochopitelně i to, jak se načítají jednotlivé matice do tohoto souboru
uložené.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Uložení většího množství matic do jediného souboru</h2>

<p>Pro uložení většího množství matic do jediného souboru typu NPZ se používá
funkce pojmenovaná <strong>numpy.savez</strong>:</p>

<pre>
savez(file, *args, **kwds)
    Save several arrays into a single file in uncompressed ``.npz`` format.
&nbsp;
    If arguments are passed in with no keywords, the corresponding variable
    names, in the ``.npz`` file, are 'arr_0', 'arr_1', etc. If keyword
    arguments are given, the corresponding variable names, in the ``.npz``
    file will match the keyword names.
</pre>

<p>Podívejme se nyní na základní způsob použití této funkce při uložení tří
matic do jediného souboru:</p>

<pre>
<i>"""Uložení více matic do standardního binárního souboru."""</i>
&nbsp;
import numpy as np
&nbsp;
<i># rozměry první matice</i>
rows1 = 10
columns1 = 10
&nbsp;
<i># rozměry druhé matice</i>
rows2 = 100
columns2 = 1
&nbsp;
<i># rozměry třetí matice</i>
rows3 = 1
columns3 = 100
&nbsp;
<i># tři matice obsahující celočíselné hodnoty různých typů</i>
m1 = np.linspace(1, rows1*columns1, rows1*columns1, dtype="b").reshape(rows1, columns1)
m2 = np.linspace(1, rows2*columns2, rows2*columns2, dtype="i").reshape(rows2, columns2)
m3 = np.linspace(1, rows3*columns3, rows3*columns3, dtype="f").reshape(rows3, columns3)
&nbsp;
<i># uložení matic do souboru ve standardním formátu</i>
<strong>np.savez("matrix.npz", m1, m2, m3)</strong>
</pre>

<p>Výsledkem je soubor typu NPZ pojmenovaný &bdquo;matrix.npz&ldquo;. Vzhledem
k&nbsp;tomu, že víme, že se jedná o standardní formát ZIP, můžeme si obsah
tohoto souboru vypsat nástrojem <strong>unzip</strong>:</p>

<pre>
$ <strong>unzip -l matrix.npz</strong>
</pre>

<pre>
Archive:  matrix.npz
  Length      Date    Time    Name
---------  ---------- -----   ----
      228  01-01-1980 00:00   arr_0.npy
      528  01-01-1980 00:00   arr_1.npy
      528  01-01-1980 00:00   arr_2.npy
---------                     -------
     1284                     3 files
</pre>

<p><div class="rs-tip-major">Poznámka: časová razítka jsou evidentně nastavena
špatně, což by však nemělo ničemu vadit.</div></p>

<p>Pochopitelně si můžeme tento soubor rozbalit, a to opět standardním
nástrojem <strong>unzip</strong>:</p>

<pre>
$ <strong>unzip matrix.npz</strong>
</pre>

<p>Prozkoumat můžeme například první rozbalený soubor
<strong>arr_0.npy</strong>:</p>

<pre>
$ <strong>od -t d1z arr_0.npy</strong>
</pre>

<p>Prvních 128 bajtů představuje nám již známou hlavičku:</p>

<pre>
0000000 -109   78   85   77   80   89    1    0  118    0  123   39  100  101  115   99  &gt;.NUMPY..v.{'desc&lt;
0000020  114   39   58   32   39  124  105   49   39   44   32   39  102  111  114  116  &gt;r': '|i1', 'fort&lt;
0000040  114   97  110   95  111  114  100  101  114   39   58   32   70   97  108  115  &gt;ran_order': Fals&lt;
0000060  101   44   32   39  115  104   97  112  101   39   58   32   40   49   48   44  &gt;e, 'shape': (10,&lt;
0000100   32   49   48   41   44   32  125   32   32   32   32   32   32   32   32   32  &gt; 10), }         &lt;
0000120   32   32   32   32   32   32   32   32   32   32   32   32   32   32   32   32  &gt;                &lt;
0000160   32   32   32   32   32   32   32   32   32   32   32   32   32   32   32   10  &gt;               .&lt;
</pre>

<p>Za hlavičkou jsou již uloženy hodnoty jednotlivých prvků matice:</p>

<pre>
0000200    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16  &gt;................&lt;
0000220   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32  &gt;............... &lt;
0000240   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48  &gt;!"#$%&amp;'()*+,-./0&lt;
0000260   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64  &gt;123456789:;&lt;=&gt;?@&lt;
0000300   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80  &gt;ABCDEFGHIJKLMNOP&lt;
0000320   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96  &gt;QRSTUVWXYZ[\]^_`&lt;
0000340   97   98   99  100                                                              &gt;abcd&lt;
0000344
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Načtení většího množství matic z&nbsp;jediného souboru</h2>

<p>Matice uložené do souboru typu NPZ je nutné načítat na základě jména souboru
v&nbsp;archivu. Tato jména jsou dostupná přes atribut <strong>files</strong>.
Všechny (tři) matice tedy dokážeme načíst a vypsat jejich obsah následujícím
skriptem:</p>

<pre>
<i>"""Načtení většího množství matic ze standardního binárního souboru."""</i>
&nbsp;
import numpy as np
&nbsp;
<i># načtení souboru s větším množstvím matic</i>
npzfile = <strong>np.load("matrix.npz")</strong>
&nbsp;
<i># tisk názvů souborů</i>
print(npzfile.files)
&nbsp;
<i># přístup k jednotlivým maticím</i>
for f in npzfile.files:
    m = npzfile[f]
    print(m)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Pojmenování matic v&nbsp;souboru NPZ</h2>

<p>Matice a tím pádem i korespondující soubory v&nbsp;archivu je vhodné
pojmenovat. Pro tento účel je podporován tento způsob volání funkce
<strong>numpy.savez</strong> postavený na tzv.&nbsp;keyword argumentech:</p>

<pre>
<strong>np.savez("matrix.npz", first=matice1, second=matice2, third=matice3, ...)</strong>
</pre>

<p>V&nbsp;případě, že tyto názvy, tedy konkrétně &bdquo;first&ldquo;,
&bdquo;second&ldquo; a &bdquo;third&ldquo; použijeme v&nbsp;upraveném skriptu,
vznikne archiv s&nbsp;odlišně pojmenovanými soubory uvnitř:</p>

<pre>
<i>"""Uložení více matic do standardního binárního souboru."""</i>
&nbsp;
import numpy as np
&nbsp;
<i># rozměry první matice</i>
rows1 = 10
columns1 = 10
&nbsp;
<i># rozměry druhé matice</i>
rows2 = 100
columns2 = 1
&nbsp;
<i># rozměry třetí matice</i>
rows3 = 1
columns3 = 100
&nbsp;
<i># tři matice obsahující celočíselné hodnoty různých typů</i>
m1 = np.linspace(1, rows1*columns1, rows1*columns1, dtype="b").reshape(rows1, columns1)
m2 = np.linspace(1, rows2*columns2, rows2*columns2, dtype="i").reshape(rows2, columns2)
m3 = np.linspace(1, rows3*columns3, rows3*columns3, dtype="f").reshape(rows3, columns3)
&nbsp;
<i># uložení matic do souboru ve standardním formátu</i>
<strong>np.savez("matrix.npz", first=m1, second=m2, third=m3)</strong>
</pre>

<p>Pochopitelně si opět můžeme zobrazit obsah vytvořeného archivu:</p>

<pre>
$ <strong>unzip -l matrix.npz </strong>
&nbsp;
Archive:  matrix.npz
  Length      Date    Time    Name
---------  ---------- -----   ----
      228  01-01-1980 00:00   first.npy
      528  01-01-1980 00:00   second.npy
      528  01-01-1980 00:00   third.npy
---------                     -------
     1284                     3 files
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Komprimace obsahu matic v&nbsp;souboru NPZ</h2>

<p>Díky tomu, že standardní ZIP archivy mohou být komprimovány, je možné se
pokusit rozsáhlé matice zkomprimovat. V&nbsp;tomto případě se však namísto nám
již známé funkce <strong>numpy.savez</strong> musí použít funkce pojmenovaná
<strong>numpy.savez_compressed</strong>:</p>

<pre>
savez_compressed(file, *args, **kwds)
    Save several arrays into a single file in compressed ``.npz`` format.
&nbsp;    
    If keyword arguments are given, then filenames are taken from the keywords.
    If arguments are passed in with no keywords, then stored filenames are
    arr_0, arr_1, etc.
    ...
    ...
    ...
</pre>

<p>Parametry i způsob použití této funkce se nijak neliší od
<strong>numpy.savez</strong>, takže si můžeme otestovat způsob jejího použití.
Vytvoříme nejdříve relativně velkou matici 1000&times;1000 prvků typu
&bdquo;celé čtyřbajtové číslo&ldquo;, přičemž všechny prvky budou nulové.
Následně tuto matici uložíme do dvou souborů NZP &ndash; jednou
v&nbsp;nezkomprimované a podruhé ve zkomprimované podobě:</p>

<pre>
<i>"""Uložení více matic do standardního binárního souboru."""</i>
&nbsp;
import numpy as np
&nbsp;
<i># rozměry matice</i>
rows = 1000
columns = 1000
&nbsp;
<i># vytvoření větší matice o zadaném tvaru</i>
m0 = <strong>np.zeros((rows, columns), dtype="i")</strong>
&nbsp;
<i># uložení matice do souboru ve standardním formátu</i>
<strong>np.savez("matrix_uncompressed.npz", m0)</strong>
&nbsp;
<i># uložení matice do souboru ve standardním zkomprimovaném formátu</i>
<strong>np.savez_compressed("matrix_compressed.npz", m0)</strong>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Porovnání souboru NPZ s&nbsp;komprimovanou a nekomprimovanou maticí</h2>

<p>Oba vytvořené soubory sice obsahují stejná data, ovšem jednou
v&nbsp;nezkomprimovaném a podruhé ve zkomprimovaném tvaru, takže se velikosti
obou archivů budou odlišovat:</p>

<pre>
$ <strong>ls -l matrix_*.npz</strong>
&nbsp;
-rw-rw-r--. 1 ptisnovs ptisnovs    4114 Nov  3 17:08 matrix_compressed.npz
-rw-rw-r--. 1 ptisnovs ptisnovs 4000264 Nov  3 17:08 matrix_uncompressed.npz
</pre>

<p><div class="rs-tip-major">Poznámka: velikost je rapidně odlišná, protože
jsme schválně uložili matici se samými nulami, což jsou pochopitelně velmi
snadno zkomprimovatelná data.</div></p>

<p>Přesvědčit se můžeme i o tom, že délka rozbalených souborů by byla naprosto
totožná (první sloupec):</p>

<pre>
$ <strong>unzip -lv matrix_uncompressed.npz</strong>
Archive:  matrix_uncompressed.npz
 Length   Method    Size  Cmpr    Date    Time   CRC-32   Name
--------  ------  ------- ---- ---------- ----- --------  ----
 4000128  Stored  4000128   0% 01-01-1980 00:00 569b177d  arr_0.npy
--------          -------  ---                            -------
 4000128          4000128   0%                            1 file
&nbsp;
$ <strong>unzip -lv matrix_compressed.npz</strong>
Archive:  matrix_compressed.npz
 Length   Method    Size  Cmpr    Date    Time   CRC-32   Name
--------  ------  ------- ---- ---------- ----- --------  ----
 4000128  Defl:N     3978 100% 01-01-1980 00:00 569b177d  arr_0.npy
--------          -------  ---                            -------
 4000128             3978 100%                            1 file
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech <a
href="https://www.root.cz/clanky/operace-s-daty-ulozenymi-v-binarnich-souborech-v-knihovnach-numpy-a-pandas/">minule</a>
i dnes popsaných demonstračních příkladů určených pro programovací jazyk Python
3 a nejnovější stabilní verzi knihoven Numpy a Pandas byly uloženy do Git
repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následujících
tabulkách.</p>

<p>Demonstrační příklady určené pouze pro knihovnu Numpy:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>vector_to_file_1.py</td><td>uložení obsahu vektoru do textového souboru se specifikací oddělovače</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_1.py</a></td></tr>
<tr><td> 2</td><td>vector_to_file_2.py</td><td>uložení obsahu vektoru do textového souboru se specifikací oddělovače a formátu jednotlivých prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_2.py</a></td></tr>
<tr><td> 3</td><td>vector_to_file_3.py</td><td>uložení obsahu vektoru s&nbsp;prvky typu &bdquo;byte&ldquo; do binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_3.py</a></td></tr>
<tr><td> 4</td><td>vector_to_file_4.py</td><td>uložení obsahu vektoru s&nbsp;prvky typu &bdquo;half integer&ldquo; do binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_4.py</a></td></tr>
<tr><td> 5</td><td>vector_to_file_5.py</td><td>uložení obsahu vektoru s&nbsp;prvky typu &bdquo;integer&ldquo; do binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_5.py</a></td></tr>
<tr><td> 6</td><td>vector_to_file_6.py</td><td>uložení obsahu vektoru s&nbsp;prvky typu &bdquo;long integer&ldquo; do binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_6.py</a></td></tr>
<tr><td> 7</td><td>vector_to_file_7.py</td><td>uložení obsahu vektoru s&nbsp;prvky typu &bdquo;single&ldquo; do binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_7.py</a></td></tr>
<tr><td> 8</td><td>vector_to_file_8.py</td><td>uložení obsahu vektoru s&nbsp;prvky typu &bdquo;double&ldquo; do binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_8.py</a></td></tr>
<tr><td> 9</td><td>vector_to_file_9.py</td><td>uložení obsahu vektoru s&nbsp;prvky typu &bdquo;half&ldquo; do binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_to_file_9.py</a></td></tr>
<tr><td>10</td><td>vector_from_file_1.py</td><td>načtení obsahu vektoru z textového souboru se specifikací oddělovače</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_from_file_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_from_file_1.py</a></td></tr>
<tr><td>11</td><td>vector_from_file_2.py</td><td>načtení obsahu vektoru z textového souboru se specifikací oddělovače a s konverzí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_from_file_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_from_file_2.py</a></td></tr>
<tr><td>12</td><td>vector_from_file_3.py</td><td>načtení obsahu vektoru z binárního souboru (nekorektní použití)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_from_file_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_from_file_3.py</a></td></tr>
<tr><td>13</td><td>vector_from_file_4.py</td><td>načtení obsahu vektoru z binárního souboru s konverzí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_from_file_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_from_file_4.py</a></td></tr>
<tr><td>14</td><td>vector_save.py</td><td>uložení obsahu vektoru do standardního binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_save.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_save.py</a></td></tr>
<tr><td>15</td><td>vector_load.py</td><td>načtení obsahu vektoru ze standardního binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_load.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/vector_load.py</a></td></tr>
<tr><td>16</td><td>matrix_save_1.py</td><td>uložení matice s&nbsp;prvky typu &bdquo;byte&ldquo; do standardního binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_save_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_save_1.py</a></td></tr>
<tr><td>17</td><td>matrix_save_2.py</td><td>uložení matice s&nbsp;prvky typu &bdquo;float&ldquo; do standardního binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_save_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_save_2.py</a></td></tr>
<tr><td>18</td><td>matrix_load_1.py</td><td>načtení matice s&nbsp;prvky typu &bdquo;byte&ldquo; ze standardního binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_load_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_load_1.py</a></td></tr>
<tr><td>19</td><td>matrix_load_2.py</td><td>načtení matice s&nbsp;prvky typu &bdquo;float&ldquo; ze standardního binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_load_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_load_2.py</a></td></tr>
<tr><td>20</td><td>matrix_to_file_1.py</td><td>export obsahu matice do textového souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_to_file_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_to_file_1.py</a></td></tr>
<tr><td>21</td><td>matrix_to_file_2.py</td><td>export obsahu matice do binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_to_file_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_to_file_2.py</a></td></tr>
<tr><td>22</td><td>matrix_from_file_1.py</td><td>načtení matice z&nbsp;textového souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_1.py</a></td></tr>
<tr><td>23</td><td>matrix_from_file_2.py</td><td>načtení matice z&nbsp;textového souboru s&nbsp;konverzí na jiný typ</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_2.py</a></td></tr>
<tr><td>24</td><td>matrix_from_file_3.py</td><td>načtení matice z&nbsp;binárního souboru bez specifikace formátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_3.py</a></td></tr>
<tr><td>25</td><td>matrix_from_file_4.py</td><td>načtení matice z&nbsp;binárního souboru se specifikací formátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>matrix_to_file_3.py</td><td>uložení obsahu rozsáhlejší matice do binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_to_file_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_to_file_3.py</a></td></tr>
<tr><td>27</td><td>matrix_from_file_5.py</td><td>načtení obsahu matice z&nbsp;binárního souboru se specifikací formátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_5.py</a></td></tr>
<tr><td>28</td><td>matrix_from_file_6.py</td><td>načtení obsahu matice z&nbsp;binárního souboru se specifikací formátu a offsetu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_6.py</a></td></tr>
<tr><td>29</td><td>matrix_from_file_7.py</td><td>načtení obsahu matice z&nbsp;binárního souboru se specifikací formátu, offsetu a počtu prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_from_file_7.py</a></td></tr>
<tr><td>30</td><td>matrix_save_3.py</td><td>uložení obsahu rozsáhlejší matice do standardního binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_save_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_save_3.py</a></td></tr>
<tr><td>31</td><td>matrix_load_3.py</td><td>přečtení obsahu matice ze standardního binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_load_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_load_3.py</a></td></tr>
<tr><td>32</td><td>matrix_load_4.py</td><td>otevření souboru s&nbsp;maticí a přístup s&nbsp;využitím <strong>mmap</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_load_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_load_4.py</a></td></tr>
<tr><td>33</td><td>matrix_load_5.py</td><td>přečtení části rozsáhlé matice s&nbsp;využitím <strong>mmap</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_load_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_load_5.py</a></td></tr>
<tr><td>34</td><td>matrix_save_multiple.py</td><td>uložení více matic do standardního binárního souboru typu <strong>npz</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_save_multiple.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_save_multiple.py</a></td></tr>
<tr><td>35</td><td>matrix_load_multiple.py</td><td>načtení více matic ze standardního binárního souboru typu <strong>npz</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_load_multiple.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_load_multiple.py</a></td></tr>
<tr><td>36</td><td>matrix_save_multiple_2.py</td><td>uložení více matic do standardního binárního souboru typu <strong>npz</strong> se specifikací názvů matic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_save_multiple_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_save_multiple_2.py</a></td></tr>
<tr><td>37</td><td>matrix_save_multiple_3.py</td><td>uložení více matic do standardního komprimovaného binárního souboru typu <strong>npz</strong> se specifikací názvů matic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_save_multiple_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/numpy/matrix_save_multiple_3.py</a></td></tr>
</table>

<p>Demonstrační příklady určené pro knihovnu Pandas:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>vector_to_file_4.py</td><td>uložení obsahu vektoru s&nbsp;prvky typu &bdquo;half integer&ldquo; do binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/vector_to_file_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/vector_to_file_4.py</a></td></tr>
<tr><td> 2</td><td>matrix_to_file_2.py</td><td>export obsahu matice do binárního souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/matrix_to_file_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/matrix_to_file_2.py</a></td></tr>
<tr><td> 3</td><td>binary_df_1.c</td><td>vygenerování binárního souboru s&nbsp;prvky různých typů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/binary_df_1.c">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/binary_df_1.c</a></td></tr>
<tr><td> 4</td><td>binary_df_2.c</td><td>vygenerování binárního souboru s&nbsp;prvky různých typů, včetně řetězců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/binary_df_2.c">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/binary_df_2.c</a></td></tr>
<tr><td> 5</td><td>serie_from_file.py</td><td>načtení obsahu datové řady z&nbsp;binárního souboru s&nbsp;konverzí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/serie_from_file.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/serie_from_file.py</a></td></tr>
<tr><td> 6</td><td>dataframe_from_file_1.py</td><td>načtení obsahu datového rámce z binárního souboru se specifikací formátu společného pro všechny sloupce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/dataframe_from_file_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/dataframe_from_file_1.py</a></td></tr>
<tr><td> 7</td><td>dataframe_from_file_2.py</td><td>načtení obsahu datového rámce z binárního souboru se specifikací formátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/dataframe_from_file_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/dataframe_from_file_2.py</a></td></tr>
<tr><td> 8</td><td>dataframe_from_file_3.py</td><td>načtení obsahu datového rámce z binárního souboru se specifikací formátu i endianity</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/dataframe_from_file_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/dataframe_from_file_3.py</a></td></tr>
<tr><td> 9</td><td>dataframe_from_file_4.py</td><td>načtení obsahu datového rámce z binárního souboru se specifikací formátu i endianity, bytové pole</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/dataframe_from_file_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/dataframe_from_file_4.py</a></td></tr>
<tr><td>10</td><td>dataframe_from_file_5.py</td><td>načtení obsahu datového rámce z binárního souboru se specifikací formátu i endianity, řetězce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/dataframe_from_file_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/dataframe_from_file_5.py</a></td></tr>
</table>



<p><a name="k16"></a></p>
<h2 id="k16">16. Odkazy na předchozí části seriálu o knihovně Pandas</h2>

<p>Popisem knihovny Pandas (a do jisté míry i Numpy) jsme se již na stránkách
Roota zabývali. Pod tímto odstavcem naleznete odkazy na jednotlivé články,
které již o knihovně Pandas vyšly:</p>

<ol>

<li>Knihovna Pandas: základy práce s datovými rámci<br />
<a href="https://www.root.cz/clanky/knihovna-pandas-zaklady-prace-s-datovymi-ramci/">https://www.root.cz/clanky/knihovna-pandas-zaklady-prace-s-datovymi-ramci/</a>
</li>

<li>Knihovna Pandas: zobrazení obsahu datových rámců, vykreslení grafů a validace dat<br />
<a href="https://www.root.cz/clanky/knihovna-pandas-zobrazeni-obsahu-datovych-ramcu-vykresleni-grafu-a-validace-dat/">https://www.root.cz/clanky/knihovna-pandas-zobrazeni-obsahu-datovych-ramcu-vykresleni-grafu-a-validace-dat/</a>
</li>

<li>Knihovna Pandas: práce s&nbsp;datovými řadami (series)<br />
<a href="https://www.root.cz/clanky/knihovna-pandas-prace-s-datovymi-radami-series/">https://www.root.cz/clanky/knihovna-pandas-prace-s-datovymi-radami-series/</a>
</li>

<li>Knihovna Pandas: pokročilejší práce s&nbsp;datovými řadami (series)<br />
<a href="https://www.root.cz/clanky/knihovna-pandas-pokrocilejsi-prace-s-datovymi-radami-series/">https://www.root.cz/clanky/knihovna-pandas-pokrocilejsi-prace-s-datovymi-radami-series/</a>
</li>

<li>Knihovna Pandas: spojování datových rámců s&nbsp;využitím append, concat, merge a join<br />
<a href="https://www.root.cz/clanky/knihovna-pandas-spojovani-datovych-ramcu-s-vyuzitim-append-concat-merge-a-join/">https://www.root.cz/clanky/knihovna-pandas-spojovani-datovych-ramcu-s-vyuzitim-append-concat-merge-a-join/</a>
</li>

<li>Knihovna Pandas: použití metody groupby, naformátování a export tabulek pro tisk<br />
<a href="https://www.root.cz/clanky/knihovna-pandas-pouziti-metody-groupby-naformatovani-a-export-tabulek-pro-tisk/">https://www.root.cz/clanky/knihovna-pandas-pouziti-metody-groupby-naformatovani-a-export-tabulek-pro-tisk/</a>
</li>

<li>Knihovna Pandas: práce se seskupenými záznamy, vytvoření multiindexů<br />
<a href="https://www.root.cz/clanky/knihovna-pandas-prace-se-seskupenymi-zaznamy-vytvoreni-multiindexu/">https://www.root.cz/clanky/knihovna-pandas-prace-se-seskupenymi-zaznamy-vytvoreni-multiindexu/</a>
</li>

<li>Operace s&nbsp;daty uloženými v&nbsp;binárních souborech v&nbsp;knihovnách NumPy a Pandas<br />
<a href="https://www.root.cz/clanky/operace-s-daty-ulozenymi-v-binarnich-souborech-v-knihovnach-numpy-a-pandas/">https://www.root.cz/clanky/operace-s-daty-ulozenymi-v-binarnich-souborech-v-knihovnach-numpy-a-pandas/</a>
</li>

</ol>



<p><a name="k17"></a></p>
<h2 id="k17">17. Odkazy na Internetu</h2>

<ol>

<li>mmap(2) — Linux manual page<br />
<a href="https://www.man7.org/linux/man-pages/man2/mmap.2.html">https://www.man7.org/linux/man-pages/man2/mmap.2.html</a>
</li>

<li>mmap (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Mmap">https://en.wikipedia.org/wiki/Mmap</a>
</li>

<li>ISO/IEC 21320-1:2015 Information technology — Document Container File — Part 1: Core<br />
<a href="https://www.iso.org/standard/60101.html">https://www.iso.org/standard/60101.html</a>
</li>

<li>ZIP (file format)<br />
<a href="https://en.wikipedia.org/wiki/ZIP_(file_format)">https://en.wikipedia.org/wiki/ZIP_(file_format)</a>
</li>

<li>A Simple File Format for NumPy Arrays<br />
<a href="https://docs.scipy.org/doc/numpy-1.14.2/neps/npy-format.html">https://docs.scipy.org/doc/numpy-1.14.2/neps/npy-format.html</a>
</li>

<li>numpy.lib.format<br />
<a href="https://numpy.org/devdocs/reference/generated/numpy.lib.format.html">https://numpy.org/devdocs/reference/generated/numpy.lib.format.html</a>
</li>

<li>The NumPy array: a structure for efficient numerical computation<br />
<a href="https://arxiv.org/pdf/1102.1523.pdf">https://arxiv.org/pdf/1102.1523.pdf</a>
</li>

<li>numpy.ndarray.tofile<br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile">https://numpy.org/doc/stable/reference/generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile</a>
</li>

<li>numpy.fromfile<br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.fromfile.html">https://numpy.org/doc/stable/reference/generated/numpy.fromfile.html</a>
</li>

<li>How to read part of binary file with numpy?<br />
<a href="https://stackoverflow.com/questions/14245094/how-to-read-part-of-binary-file-with-numpy">https://stackoverflow.com/questions/14245094/how-to-read-part-of-binary-file-with-numpy</a>
</li>

<li>How to read binary files in Python using NumPy?<br />
<a href="https://stackoverflow.com/questions/39762019/how-to-read-binary-files-in-python-using-numpy">https://stackoverflow.com/questions/39762019/how-to-read-binary-files-in-python-using-numpy</a>
</li>

<li>numpy.save<br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.save.html#numpy.save">https://numpy.org/doc/stable/reference/generated/numpy.save.html#numpy.save</a>
</li>

<li>numpy.load<br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.load.html#numpy.load">https://numpy.org/doc/stable/reference/generated/numpy.load.html#numpy.load</a>
</li>

<li>Operace typu <strong>mmap</strong><br />
<a href="https://en.wikipedia.org/wiki/Mmap">https://en.wikipedia.org/wiki/Mmap</a>
</li>

<li>Funkce <strong>fseek</strong><br />
<a href="https://en.cppreference.com/w/c/io/fseek">https://en.cppreference.com/w/c/io/fseek</a>
</li>

<li>Funkce <strong>ftell</strong><br />
<a href="https://en.cppreference.com/w/c/io/ftell">https://en.cppreference.com/w/c/io/ftell</a>
</li>

<li>Loading binary data to NumPy/Pandas<br />
<a href="https://towardsdatascience.com/loading-binary-data-to-numpy-pandas-9caa03eb0672">https://towardsdatascience.com/loading-binary-data-to-numpy-pandas-9caa03eb0672</a>
</li>

<li>Combining Data in Pandas With merge(), .join(), and concat()<br />
<a href="https://realpython.com/pandas-merge-join-and-concat/">https://realpython.com/pandas-merge-join-and-concat/</a>
</li>

<li>Repositář python-tabulate na GitHubu<br />
<a href="https://github.com/astanin/python-tabulate">https://github.com/astanin/python-tabulate</a>
</li>

<li>python-tabulate na PyPi<br />
<a href="https://pypi.org/project/tabulate/">https://pypi.org/project/tabulate/</a>
</li>

<li>Understanding Pandas groupby() function<br />
<a href="https://www.askpython.com/python-modules/pandas/pandas-groupby-function">https://www.askpython.com/python-modules/pandas/pandas-groupby-function</a>
</li>

<li>Python Pandas - GroupBy<br />
<a href="https://www.tutorialspoint.com/python_pandas/python_pandas_groupby.htm">https://www.tutorialspoint.com/python_pandas/python_pandas_groupby.htm</a>
</li>

<li>Pandas GroupBy: Group Data in Python<br />
<a href="https://pythonspot.com/pandas-groupby/">https://pythonspot.com/pandas-groupby/</a>
</li>

<li>JOIN<br />
<a href="https://cs.wikipedia.org/wiki/JOIN">https://cs.wikipedia.org/wiki/JOIN</a>
</li>

<li>Plotting with matplotlib<br />
<a href="https://pandas.pydata.org/pandas-docs/version/0.13/visualization.html">https://pandas.pydata.org/pandas-docs/version/0.13/visualization.html</a>
</li>

<li>Plot With Pandas: Python Data Visualization for Beginners<br />
<a href="https://realpython.com/pandas-plot-python/">https://realpython.com/pandas-plot-python/</a>
</li>

<li>Pandas Dataframe: Plot Examples with Matplotlib and Pyplot<br />
<a href="https://queirozf.com/entries/pandas-dataframe-plot-examples-with-matplotlib-pyplot">https://queirozf.com/entries/pandas-dataframe-plot-examples-with-matplotlib-pyplot</a>
</li>

<li>Opulent-Pandas na PyPi<br />
<a href="https://pypi.org/project/opulent-pandas/">https://pypi.org/project/opulent-pandas/</a>
</li>

<li>pandas_validator na PyPi<br />
<a href="https://pypi.org/project/pandas_validator/">https://pypi.org/project/pandas_validator/</a>
</li>

<li>pandas-validator (dokumentace)<br />
<a href="https://pandas-validator.readthedocs.io/en/latest/">https://pandas-validator.readthedocs.io/en/latest/</a>
</li>

<li>7 Best Python Libraries for Validating Data<br />
<a href="https://www.yeahhub.com/7-best-python-libraries-validating-data/">https://www.yeahhub.com/7-best-python-libraries-validating-data/</a>
</li>

<li>Universally unique identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">https://en.wikipedia.org/wiki/Universally_unique_identifier</a>
</li>

<li>Nullable integer data type<br />
<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/integer_na.html">https://pandas.pydata.org/pandas-docs/stable/user_guide/integer_na.html</a>
</li>

<li>pandas.read_csv<br />
<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html</a>
</li>

<li>How to define format when using pandas to_datetime?<br />
<a href="https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime">https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime</a>
</li>

<li>Pandas : skip rows while reading csv file to a Dataframe using read_csv() in Python<br />
<a href="https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/">https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/</a>
</li>

<li>Skip rows during csv import pandas<br />
<a href="https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas">https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas</a>
</li>

<li>Denni kurz<br />
<a href="https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt">https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt</a>
</li>

<li>UUID objects according to RFC 4122 (knihovna pro Python)<br />
<a href="https://docs.python.org/3.5/library/uuid.html#uuid.uuid4">https://docs.python.org/3.5/library/uuid.html#uuid.uuid4</a>
</li>

<li>Object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Object_identifier">https://en.wikipedia.org/wiki/Object_identifier</a>
</li>

<li>Digital object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Digital_object_identifier">https://en.wikipedia.org/wiki/Digital_object_identifier</a>
</li>

<li>voluptuous na (na PyPi)<br />
<a href="https://pypi.python.org/pypi/voluptuous">https://pypi.python.org/pypi/voluptuous</a>
</li>

<li>Repositář knihovny voluptuous na GitHubu<br />
<a href="https://github.com/alecthomas/voluptuous">https://github.com/alecthomas/voluptuous</a>
</li>

<li>pytest-voluptuous 1.0.2 (na PyPi)<br />
<a href="https://pypi.org/project/pytest-voluptuous/">https://pypi.org/project/pytest-voluptuous/</a>
</li>

<li>pytest-voluptuous (na GitHubu)<br />
<a href="https://github.com/F-Secure/pytest-voluptuous">https://github.com/F-Secure/pytest-voluptuous</a>
</li>

<li>schemagic 0.9.1 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schemagic/0.9.1">https://pypi.python.org/pypi/schemagic/0.9.1</a>
</li>

<li>Schemagic / Schemagic.web (na GitHubu)<br />
<a href="https://github.com/Mechrophile/schemagic">https://github.com/Mechrophile/schemagic</a>
</li>

<li>schema 0.6.7 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schema">https://pypi.python.org/pypi/schema</a>
</li>

<li>schema (na GitHubu)<br />
<a href="https://github.com/keleshev/schema">https://github.com/keleshev/schema</a>
</li>

<li>XML Schema validator and data conversion library for Python<br />
<a href="https://github.com/brunato/xmlschema">https://github.com/brunato/xmlschema</a>
</li>

<li>xmlschema 0.9.7<br />
<a href="https://pypi.python.org/pypi/xmlschema/0.9.7">https://pypi.python.org/pypi/xmlschema/0.9.7</a>
</li>

<li>jsonschema 2.6.0<br />
<a href="https://pypi.python.org/pypi/jsonschema">https://pypi.python.org/pypi/jsonschema</a>
</li>

<li>warlock 1.3.0<br />
<a href="https://pypi.python.org/pypi/warlock">https://pypi.python.org/pypi/warlock</a>
</li>

<li>Python Virtual Environments – A Primer<br />
<a href="https://realpython.com/python-virtual-environments-a-primer/">https://realpython.com/python-virtual-environments-a-primer/</a>
</li>

<li>pip 1.1 documentation: Requirements files<br />
<a href="https://pip.readthedocs.io/en/1.1/requirements.html">https://pip.readthedocs.io/en/1.1/requirements.html</a>
</li>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>mock 2.0.0<br />
<a href="https://pypi.python.org/pypi/mock">https://pypi.python.org/pypi/mock</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Unit testing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit testing<br />
<a href="https://cs.wikipedia.org/wiki/Unit_testing">https://cs.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>5 Differences between clojure.spec and Schema<br />
<a href="https://lispcast.com/clojure.spec-vs-schema/">https://lispcast.com/clojure.spec-vs-schema/</a>
</li>

<li>Schema: Clojure(Script) library for declarative data description and validation<br />
<a href="https://github.com/plumatic/schema">https://github.com/plumatic/schema</a>
</li>

<li>clojure.spec - Rationale and Overview<br />
<a href="https://clojure.org/about/spec">https://clojure.org/about/spec</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

