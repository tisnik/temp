<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Nástroj Cython a typové anotace</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Nástroj Cython a typové anotace</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Nástroj Cython a typové anotace</a></p>
<p><a href="#k02">2. Typové anotace v&nbsp;Pythonu</a></p>
<p><a href="#k03">3. Ukázky zápisu typových anotací</a></p>
<p><a href="#k04">4. Duck typing v&nbsp;Pythonu</a></p>
<p><a href="#k05">5. Překlad funkce s&nbsp;duck typingem do C Cythonem</a></p>
<p><a href="#k06">6. Zajištění syntaxe kompatibilní s&nbsp;Pythonem</a></p>
<p><a href="#k07">7. Přidání informace o typech parametrů funkce pro součet celých čísel</a></p>
<p><a href="#k08">8. Přepis funkce s&nbsp;typy parametrů do podoby kompatibilní s&nbsp;Pythonem</a></p>
<p><a href="#k09">9. Přidání informace o návratovém typu funkce pro součet celých čísel</a></p>
<p><a href="#k10">*** 10. Přepis funkce s&nbsp;plnými typovými informacemi do podoby kompatibilní s&nbsp;Pythonem</a></p>
<p><a href="#k11">*** 11. Zákaz použití GILu v&nbsp;překládané funkci</a></p>
<p><a href="#k12">*** 12. Volání funkcí ze standardní knihovny jazyka C</a></p>
<p><a href="#k13">*** 13. Základní varianta benchmarku naprogramovaná v&nbsp;čistém Pythonu</a></p>
<p><a href="#k14">*** 14. Přepis benchmarku do Cythonu</a></p>
<p><a href="#k15">*** 15. Varianta se syntaxí kompatibilní s&nbsp;Pythonem</a></p>
<p><a href="#k16">*** 16. Pole a předávání ukazatelů</a></p>
<p><a href="#k17">*** 17. Opětovná úprava se syntaxí kompatibilní s&nbsp;Pythonem</a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Nástroj Cython a typové anotace</h2>

<p>V&nbsp;článcích <a
href="https://www.root.cz/clanky/rpython-vs-cython-aneb-dvoji-pristup-k-prekladu-pythonu-do-nativniho-kodu/">RPython
vs Cython aneb dvojí přístup k&nbsp;překladu Pythonu do nativního kódu</a> a <a
href="https://www.root.cz/clanky/prakticke-pouziti-nastroje-cython-pri-prekladu-pythonu-do-nativniho-kodu-1/">Praktické
použití nástroje Cython při překladu Pythonu do nativního kódu</a> jsme se
seznámili se základními vlastnostmi nástroje nazvaného <i>Cython</i> (pozor
&ndash; nikoli <i>C<strong>P</strong>ython</i>, což je označení standardního
interpretru Pythonu naprogramovaného v&nbsp;céčku). <i>Cython</i> patří mezi
takzvané AOT (<i>Ahead Of Time</i>) překladače Pythonu, což v&nbsp;tomto
případě konkrétně znamená, že zdrojové kódy projektu napsaného v&nbsp;Pythonu
jsou transformovány do céčkovského kódu a následně přeloženy standardním
céčkovským překladačem (například GCC apod.) a poté slinkovány do výsledného
spustitelného nativního souboru.</p>

<img src="https://i.iinfo.cz/images/529/rpython-cpython-1.png" class="image-332504" alt="&#160;" width="500" height="230" />
<p><i>Obrázek 1: Logo Cythonu.</i></p>

<p>Na první pohled by se mohlo zdát, že výsledkem budou mnohem rychlejší
aplikace, protože zcela odpadne fáze interpretace. Ve chvíli, kdy Cython nezná
datový typ funkce/proměnné/argumentu, použije <strong>PyObject *</strong>, tedy
ukazatel na datovou strukturu reprezentující v&nbsp;Pythonu libovolnou hodnotu.
V&nbsp;dalším kódu je samozřejmě nutné z&nbsp;tohoto objektu získat skutečnou
hodnotu. I takto vlastně velmi primitivně provedený překlad dokáže programový
kód do určité míry zrychlit, což ostatně uvidíme i ve výsledku benchmarků.
Cython jde ale ještě dále, protože rozšiřuje jazyk Python o další klíčová
slova, především pak o slovo <strong>cdef</strong>. Toto klíčové slovo je možné
použít pro přesnou specifikaci typu proměnné či argumentu, a to způsobem, který
plně vychází z&nbsp;programovacího jazyka C. Tato typová informace samozřejmě
umožňuje provedení dalších optimalizací ve výsledném kódu (opět uvidíme na
výsledcích benchmarku).</p>

*** image ***
<p><i>Obrázek 2: Pro porovnání &ndash; logo standardního Pythonu.</i></p>

<p>Problém spočívá v&nbsp;tom, že původní zápis založený na
<strong>cdef</strong> a &bdquo;céčkovsky&ldquo; zapsaných datových typech je
nekompatibilní se syntaxí standardního Pythonu. Tento problém je ovšem
v&nbsp;současnosti do značné míry vyřešen, protože nyní Cython může používat
<i>typové anotace</i>. Kombinaci těchto dvou technologií je věnován dnešní
článek.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Typové anotace v&nbsp;Pythonu</h2>

<p>Do syntaxe a sémantiky programovacího jazyka Python se postupně přidává a
vylepšuje resp.&nbsp;přesněji řečeno zjednodušuje a zpřesňuje podpora pro
specifikaci takzvaných <i>typových anotací</i> resp.&nbsp;<i>typových
nápověd</i> (<i>type annotations</i>, <i>type hints</i>). V&nbsp;současné
podobě se jedná o nová syntaktická pravidla, která v&nbsp;zápisu zdrojového
kódu umožňují nepovinnou a do značné míry zcela dobrovolnou specifikaci typů
parametrů funkcí a metod, typů návratových hodnot funkcí a metod, typů
globálních i lokálních proměnných, typových parametrů u generických datových
typů atd. Programovací jazyk Python sice umožňuje zápis typových anotací, ale
(alespoň prozatím) neprovádí jejich kontrolu a vlastně je ani nijak nevyužívá
pro běh aplikací. Tuto činnost ponechává na jiných nástrojích, které jsou
typicky založeny na statické typové analýze nebo (jak uvidíme dále) pro podporu
AOT (<i>ahead of time</i>) překladu s&nbsp;optimalizacemi.</p>

<p><div class="rs-tip-major">Poznámka: pochopitelně ovšem stále platí, že
statická typová analýza popř.&nbsp;statická typová kontrola nebude a ani nemůže
být v&nbsp;případě programovacího jazyka Python stoprocentně úspěšná, což je
vlastnost, kterou si ukážeme na několika demonstračních příkladech uvedených
v&nbsp;navazujících kapitolách.</div></p>

<p>Zavedení typových anotací do programovacího jazyka Python bylo, zejména
zpočátku, provázeno určitým odporem částí vývojářů a někdy taktéž obavou o to,
jestli se z&nbsp;původně poměrně jednoduchého a snadno naučitelného Pythonu
nestává zcela odlišný programovací jazyk (z&nbsp;jazyka snadno naučitelného i
lidmi, kteří nejsou profesionálními programátory na komplikovaný jazyk určený
výhradně pro profesionály). Ovšem na tomto místě je nutné zdůraznit, že se
jedná o zcela nepovinnou součást jazyka, která je vlastně do značné míry
samotným Pythonem (přesněji řečeno standardním interpretrem Pythonu neboli
CPythonem) ignorována.</p>

<p>Nástroje typu <i>Mypy</i>, <i>Pyright</i>, <i>Cython</i> či LSP servery,
které typové informace zpracovávají a vyžadují pro svou činnost, pracují zcela
nezávisle na standardním interpretru Pythonu (popř.&nbsp;je možná jejich
integrace do vývojových prostředí). Na druhou stranu, i přes výše uvedené
rozpaky, právě typové anotace a jejich kontrola (a nutno dodat: i zpracování
integrovanými vývojovými prostředími) do značné míry usnadňují vývoj
rozsáhlejších aplikací. Ostatně můžeme zde vidět souvislost s&nbsp;dvojicí
JavaScript:TypeScript. A kvalita optimalizací prováděná nástrojem <i>Cython</i>
do značné míry závisí právě na poskytnutých typových informacích.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Ukázky zápisu typových anotací</h2>

<p>Typovými anotacemi v&nbsp;Pythonu jsme se již zabývali v&nbsp;článcích [<a
href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/">1</a>]
[<a
href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/">2</a>]
[<a
href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/">3</a>].
Proto si dnes pouze bez podrobnějších vysvětlení ukažme, jakým způsobem se
typové informace zapisují. Stejný zápis, i když mnohdy s&nbsp;odlišnými typy,
budeme realizovat i v&nbsp;Cythonu.</p>

<p>Definice funkce pro součet dvou celých čísel (s&nbsp;neomezeným rozsahem).
Specifikovány jsou typy parametrů i typ návratové hodnoty:</p>

<pre>
def <strong>add</strong>(a:int, b:int) -&gt; int:
    return a+b
</pre>

<p>Definice funkce určené pro spojení dvou seznamů, přičemž prvky těchto
seznamů jsou množiny celých čísel. Opět je specifikován jak typ parametrů
funkce tak i typ návratové hodnoty:</p>

<pre>
def <strong>append</strong>(a:list[set[int]], b:list[set[int]]) -&gt; list[set[int]]:
    return a+b
</pre>

<p><div class="rs-tip-major">Poznámka: těla obou předchozích funkcí jsou
totožná, ovšem jejich <i>sémantika</i> je zcela odlišná.</div></p>

<p>Definice proměnné s&nbsp;typem n-tice. Každý prvek n-tice může mít
specifikován vlastní typ (na rozdíl od seznamů):</p>

<pre>
p: tuple[int, float, bool, str] = (2.0, 3.14, 1, "Hello")
</pre>

<p>Definice proměnné typu slovník, se specifikací typu klíče i povolených
hodnot:</p>

<pre>
d:dict[str, Union[int, float, str]] = {}
&nbsp;
d["foo"] = 1
d["bar"] = 3.14
d[10] = 10
d[42] = "answer"
</pre>

<p>V&nbsp;novějších verzích Pythonu lze též psát:</p>

<pre>
d:dict[str, int | float | str] = {}
&nbsp;
d["foo"] = 1
d["bar"] = 3.14
d[10] = 10
d[42] = "answer"
</pre>

<p>Definice generické funkce, u níž je zaručeno, že ve výsledné n-tici bude mít
první prvek typ shodný s&nbsp;prvním parametrem a druhý prvek bude mít typ
shodný s&nbsp;parametrem druhým:</p>

<pre>
def <strong>pair</strong>[T, U](first: T, second: U) -&gt; tuple[T, U]:
    x = (first, second)
    return x
&nbsp;
&nbsp;
print(pair("A", "B"))
</pre>

<p>Poslední příklad ukazuje definici generické třídy, u níž je typově bezpečně
určen typ ukládaných a načítaných prvků:</p>

<pre>
from typing import Generic, TypeVar
&nbsp;
T = TypeVar('T')
&nbsp;
&nbsp;
class <strong>Collection</strong>(Generic[T]):
    def <strong>__init__</strong>(self) -&gt; None:
        self.collection : list[T] = []
&nbsp;
    def <strong>append</strong>(self, item: T) -&gt; None:
        self.collection.append(item)
&nbsp;
    def <strong>get_all</strong>(self) -&gt; list[T]:
        return self.collection
&nbsp;
&nbsp;
c = Collection[int]()
c.append(1)
c.append(2)
print(c.get_all())
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Duck typing v&nbsp;Pythonu</h2>

<p>Jednou z&nbsp;typických a důležitých vlastností Pythonu je <i>duck
typing</i>, který nám umožňuje zapsat například následující funkci:</p>

<pre>
def <strong>add_two_numbers</strong>(x, y):
    return x + y
&nbsp;
&nbsp;
z = add_two_numbers(123, 456)
print(z)
</pre>

<p>Ve skutečnosti tato funkce, i přes své jméno, nesčítá pouze dvě celočíselné
hodnoty, ale jakékoli Pythonovské objekty, pro které je definován operátor +.
To si ostatně můžeme velmi snadno ověřit:</p>

<pre>
def <strong>add_two_numbers</strong>(x, y):
    return x + y
&nbsp;
&nbsp;
class <strong>Foo</strong>:
    def <strong>__init__</strong>(self, value):
        self._value = value
&nbsp;
    def <strong>__add__</strong>(self, other):
        return Foo(self._value + other._value)
&nbsp;
    def <strong>__str__</strong>(self):
        return "*" * self._value
&nbsp;
&nbsp;
def <strong>test_adding</strong>():
    f1 = Foo(1)
    f2 = Foo(2)
&nbsp;
    print(add_two_numbers(123, 456))
    print(add_two_numbers("foo", "bar"))
    print(add_two_numbers([1,2,3], [4,5,6]))
    print(add_two_numbers((1,2,3), (4,5,6)))
    print(add_two_numbers(f1, f2))
&nbsp;
&nbsp;
test_adding()
</pre>

<p>Samotná funkce <strong>add_two_numbers</strong> je v&nbsp;bajtkódu reprezentována čtyřmi instrukcemi (zcela bez informace o typech):</p>

<pre>
  4           0 LOAD_FAST                0 (x)
              2 LOAD_FAST                1 (y)
              4 BINARY_ADD
              6 RETURN_VALUE
</pre>

<p>Tuto funkci lze volat s&nbsp;různými parametry:</p>

<pre>
<i>; *****************************************</i>
<i>; předání dvou celých čísel</i>
<i>; *****************************************</i>
 22          16 LOAD_GLOBAL              1 (add_two_numbers)
             18 LOAD_CONST               3 (123)
             20 LOAD_CONST               4 (456)
             22 CALL_FUNCTION            2
             24 POP_TOP
&nbsp;
&nbsp;
&nbsp;
<i>; *****************************************</i>
<i>; předání dvou řetězců</i>
<i>; *****************************************</i>
 23          26 LOAD_GLOBAL              1 (add_two_numbers)
             28 LOAD_CONST               5 ('foo')
             30 LOAD_CONST               6 ('bar')
             32 CALL_FUNCTION            2
             34 POP_TOP
&nbsp;
&nbsp;
&nbsp;
<i>; *****************************************</i>
<i>; předání dvou seznamů</i>
<i>; *****************************************</i>
 24          36 LOAD_GLOBAL              1 (add_two_numbers)
             38 LOAD_CONST               1 (1)
             40 LOAD_CONST               2 (2)
             42 LOAD_CONST               7 (3)
             44 BUILD_LIST               3
             46 LOAD_CONST               8 (4)
             48 LOAD_CONST               9 (5)
             50 LOAD_CONST              10 (6)
             52 BUILD_LIST               3
             54 CALL_FUNCTION            2
             56 POP_TOP
&nbsp;
&nbsp;
&nbsp;
<i>; *****************************************</i>
<i>; předání dvou n-tic</i>
<i>; *****************************************</i>
 25          58 LOAD_GLOBAL              1 (add_two_numbers)
             60 LOAD_CONST              11 ((1, 2, 3))
             62 LOAD_CONST              12 ((4, 5, 6))
             64 CALL_FUNCTION            2
             66 POP_TOP
&nbsp;
&nbsp;
&nbsp;
<i>; *****************************************</i>
<i>; předání dvou instancí třídy <strong>Foo</strong></i>
<i>; *****************************************</i>
 19           0 LOAD_GLOBAL              0 (Foo)
              2 LOAD_CONST               1 (1)
              4 CALL_FUNCTION            1
              6 STORE_FAST               0 (f1)
&nbsp;
 20           8 LOAD_GLOBAL              0 (Foo)
             10 LOAD_CONST               2 (2)
             12 CALL_FUNCTION            1
             14 STORE_FAST               1 (f2)
&nbsp;
 26          68 LOAD_GLOBAL              1 (add_two_numbers)
             70 LOAD_FAST                0 (f1)
             72 LOAD_FAST                1 (f2)
             74 CALL_FUNCTION            2
             76 POP_TOP
             78 LOAD_CONST               0 (None)
             80 RETURN_VALUE
</pre>

<a href="https://www.root.cz/obrazek/333066/"><img src="https://i.iinfo.cz/images/261/cpython1-1-prev.png" class="image-333066" alt="&#160;" width="370" height="229" /></a>
<p><i>Obrázek 3: Část HTML souboru &bdquo;add_numbers_1.html&ldquo; vytvořeného
Cythonem. Žlutě označené řádky označují ty bloky kódu, o nichž Cython nemá
typové informace a které musel přeložit dosti neefektivním způsobem simulujícím
chování interpretru Pythonu.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Překlad funkce s&nbsp;duck typingem do C Cythonem</h2>

<p>Pokusme se nyní přeložit funkci pro součet dvou hodnot z&nbsp;Cythonu do C a
posléze do nativního kódu. Použijeme původní syntaxi Cythonu
(resp.&nbsp;Pyrexu) a definici funkce, která se má přeložit do nativního kódu,
začneme klíčovým slovem <strong>cdef</strong> a nikoli pouze
<strong>def</strong>:</p>

<pre>
cdef <strong>add_two_numbers</strong>(x, y):
    return x + y
&nbsp;
&nbsp;
z = add_two_numbers(123, 456)
print(z)
</pre>

<p>Tato funkce bude Cythonem přeložena do poměrně komplikované céčkovské
funkce:</p>

<pre>
static PyObject *__pyx_f_13add_numbers_2_add_two_numbers(PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_two_numbers", 1);
&nbsp;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Add(__pyx_v_x, __pyx_v_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;
&nbsp;
  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("add_numbers_2.add_two_numbers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se zde pracuje
s&nbsp;hodnotami typu <strong>PyObject</strong>, které se referencují a
dereferencují. Navíc je vlastní součet realizován nepřímo funkcí
<strong>PyNumber_Add</strong>. Je tomu tak z&nbsp;toho důvodu, aby byl stále
zajištěn duck typing. Výsledek tedy v&nbsp;žádném případě nebude příliš rychlý
ani paměťově efektivní.</div></p>

<a href="https://www.root.cz/obrazek/333067/"><img src="https://i.iinfo.cz/images/261/cpython1-2-prev.png" class="image-333067" alt="&#160;" width="370" height="229" /></a>
<p><i>Obrázek 4: Část HTML souboru &bdquo;add_numbers_2.html&ldquo; vytvořeného
Cythonem. Žlutě označené řádky opět označují ty bloky kódu, o nichž Cython nemá
typové informace a které musel přeložit dosti neefektivním způsobem simulujícím
chování interpretru Pythonu.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zajištění syntaxe kompatibilní s&nbsp;Pythonem</h2>

<p>Předchozí zdrojový kód nebyl kvůli <strong>cdef</strong> kompatibilní
s&nbsp;Pythonem; proto má ostatně příponu &bdquo;.pyx&ldquo; a nikoli pouze
&bdquo;.py&ldquo;. Ovšem novější verze Cythonu již podporují zápis, který je
čistě Pythonovským kódem. Namísto <strong>cdef</strong> se v&nbsp;tomto případě
použije standardní definice funkce s&nbsp;<strong>def</strong>, ovšem funkce je
označena <i>dekorátorem</i> <strong>cfunc</strong>:</p>

<pre>
import cython
&nbsp;
<u>@cython.cfunc</u>
def <strong>add_two_numbers</strong>(x, y):
    return x + y
&nbsp;
&nbsp;
z = add_two_numbers(123, 456)
print(z)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Přidání informace o typech parametrů funkce pro součet celých čísel</h2>

<p>První důležitou úpravou a vlastně i optimalizací, kterou můžeme provést, je
přidání informace o typech parametrů funkce. Zápis je v&nbsp;tomto případě
naprosto stejný, jako v&nbsp;klasickém céčku, tj.&nbsp;používá se pořadí
<strong>datový_typ jméno_parametru</strong>. V&nbsp;našem případě budeme
vyžadovat, aby parametry byly typu celé číslo, tj.&nbsp;v&nbsp;céčku se jedná o
základní typ pojmenovaný <strong>int</strong>. Změněná funkce bude vypadat
následovně:</p>

<pre>
cdef <strong>add_two_numbers</strong>(int x, int y):
    return x + y
&nbsp;
&nbsp;
z = add_two_numbers(123, 456)
print(z)
</pre>

<p>Překlad neboli transpilace do céčka dopadne následovně:</p>

<pre>
static PyObject *__pyx_f_13add_numbers_3_add_two_numbers(int __pyx_v_x, int __pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_two_numbers", 1);
&nbsp;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_x + __pyx_v_y)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;
&nbsp;
  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("add_numbers_3.add_two_numbers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
</pre>

<p>Zvýrazněme si rozdíly mezi způsobem překladu původní funkce bez typových
informací a funkce s&nbsp;informacemi o typech parametrů. Rozdíl spočívá
v&nbsp;jediném řádku (a pochopitelně v&nbsp;odlišné hlavičce funkce &ndash;
akceptuje odlišné typy parametrů):</p>

<pre>
  __pyx_t_1 = PyNumber_Add(__pyx_v_x, __pyx_v_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
&nbsp;
  __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_x + __pyx_v_y)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
</pre>

<p>Ve druhém případě se tedy sice provádí běžný součet nativním operátorem + (a
tedy strojovou instrukcí <strong>add</strong>), ovšem výsledek se transformuje
zpět na hodnotu typu <strong>PyObject *</strong>, tedy na obecnou hodnotu
Pythonu podléhající duck typingu.</p>

<a href="https://www.root.cz/obrazek/333068/"><img src="https://i.iinfo.cz/images/261/cpython1-3-prev.png" class="image-333068" alt="&#160;" width="370" height="225" /></a>
<p><i>Obrázek 5: Část HTML souboru &bdquo;add_numbers_3.html&ldquo; vytvořeného
Cythonem.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Přepis funkce s&nbsp;typy parametrů do podoby kompatibilní s&nbsp;Pythonem</h2>

<p>Opět se podívejme na to, jakým způsobem je možné funkci <a
href="#k07">z&nbsp;předchozí kapitoly</a> upravit do takové podoby, aby byla
její syntaxe kompatibilní s&nbsp;Pythonem. Opět tedy využijeme dekorátor
<strong>@cfunc</strong> a navíc uvedeme typové informace o parametrech funkce.
Tentokrát je ovšem zapíšeme nikoli &bdquo;céčkovským&ldquo; stylem, ale tak,
aby se jednalo o standardní type hinty. Povšimněte si, že nepoužíváme typ
<strong>int</strong> (ten má totiž v&nbsp;Pythonu odlišný význam &ndash;
celočíselná hodnota bez omezení rozsahu), ale typy importované přímo
z&nbsp;Cythonu a plně odpovídající céčkovským protějškům:</p>

<pre>
import cython
&nbsp;
@cython.cfunc
def add_two_numbers(x: cython.int, y: cython.int):
    return x + y
&nbsp;
&nbsp;
z = add_two_numbers(123, 456)
print(z)
</pre>

<p><div class="rs-tip-major">Poznámka: tato funkce bude přeložena do totožného
céčkovského kódu, jako funkce z&nbsp;předchozí kapitoly.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Přidání informace o návratovém typu funkce pro součet celých čísel</h2>

<p>Další úprava naší funkce se již přímo nabízí &ndash; musíme totiž navíc
specifikovat i typ návratové hodnoty. Pokud totiž tento typ není zadán,
považuje Cython za nutné vracet <strong>PyObject *</strong>, aby byly výsledky
kompatibilní s&nbsp;běžnými pythonovskými funkcemi a metodami. Specifikace
návratové hodnoty se opět provádí stejným způsobem, jako v&nbsp;programovacím
jazyku C, tj.&nbsp;zápisem příslušného typu <i>před</i> jméno funkce:</p>

<pre>
cdef int <strong>add_two_numbers</strong>(int x, int y):
    return x + y
&nbsp;
&nbsp;
z = add_two_numbers(123, 456)
print(z)
</pre>

<p>Z&nbsp;podoby výsledné céčkovské funkce je patrné, že jsme se přiblížili
deklaraci, kterou by mohl zapsat programátor v&nbsp;céčku, přičemž přebytečné
závorky, nadbytečný příkaz <strong>goto</strong> atd. odstraní každý moderní
céčkovský překladač:</p>

<pre>
static int __pyx_f_13add_numbers_4_add_two_numbers(int __pyx_v_x, int __pyx_v_y) {
  int __pyx_r;
&nbsp;
  __pyx_r = (__pyx_v_x + __pyx_v_y);
  goto __pyx_L0;
&nbsp;
  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Přepis funkce s&nbsp;plnými typovými informacemi do podoby kompatibilní s&nbsp;Pythonem</h2>

<pre>
import cython
&nbsp;
@cython.cfunc
def add_two_numbers(x: cython.int, y: cython.int) -&gt; cython.int:
    return x + y
&nbsp;
&nbsp;
z = add_two_numbers(123, 456)
print(z)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Zákaz použití GILu v&nbsp;překládané funkci</h2>

<pre>
cdef int add_two_numbers(int x, int y) nogil:
    return x + y


z = add_two_numbers(123, 456)
print(z)
</pre>

<pre>
import cython

@cython.cfunc
@cython.nogil
def add_two_numbers(x: cython.int, y: cython.int) -> cython.int:
    return x + y


z = add_two_numbers(123, 456)
print(z)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Volání funkcí ze standardní knihovny jazyka C</h2>

<pre>
from libc.stdio cimport printf


cdef int add_two_numbers(int x, int y) nogil:
    printf("%i\n", x)
    return x + y


z = add_two_numbers(123, 456)
print(z)
</pre>

<pre>
import cython
from cython.cimports.libc.stdio import printf

@cython.cfunc
@cython.nogil
def add_two_numbers(x: cython.int, y: cython.int) -> cython.int:
    printf("%d\n", x)
    return x + y


z = add_two_numbers(123, 456)
print(z)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Základní varianta benchmarku naprogramovaná v&nbsp;čistém Pythonu</h2>

<p>Nyní již máme k&nbsp;dispozici všechny potřebné informace nutné pro úpravu
našeho často opakovaného benchmarku pro výpočet Mandelbrotovy množiny. Naším
cílem bude dosažení rychlosti srovnatelné s&nbsp;variantou naprogramovanou
v&nbsp;čistém ANSI C.  Jen pro připomenutí &ndash; předchozí varianta,
s&nbsp;níž jsme <a
href="https://www.root.cz/clanky/rpython-vs-cython-aneb-dvoji-pristup-k-prekladu-pythonu-do-nativniho-kodu/">končili
minulý článek</a>, vypadala následovně. Nejedná se o špatné řešení, ovšem již
nyní je nutné říct, že ho můžeme vylepšit a cca dvojnásobně urychlit:</p>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
# taken from Fractint
palette = (
        (255, 255, 255), (224, 224, 224), (216, 216, 216), (208, 208, 208),
        (200, 200, 200), (192, 192, 192), (184, 184, 184), (176, 176, 176),
        ...
        ...
        ...
        (240, 240, 140), (244, 244, 152), (244, 244, 168), (244, 244, 180),
        (244, 244, 196), (248, 248, 208), (248, 248, 224), (248, 248, 236),
        (252, 252, 252), (248, 248, 248), (240, 240, 240), (232, 232, 232))
&nbsp;
from sys import argv
&nbsp;
&nbsp;
def <strong>calc_mandelbrot</strong>(width, height, maxiter, palette):
    print("P3")
    print("{w} {h}".format(w=width, h=height))
    print("255")
&nbsp;
    cy = -1.5
    for y in range(0, height):
        cx = -2.0
        for x in range(0, width):
            zx = 0.0
            zy = 0.0
            i = 0
            while i &lt; maxiter:
                zx2 = zx * zx
                zy2 = zy * zy
                if zx2 + zy2 &gt; 4.0:
                    break
                zy = 2.0 * zx * zy + cy
                zx = zx2 - zy2 + cx
                i += 1

            r = palette[i][0]
            g = palette[i][1]
            b = palette[i][2]
            print("{r} {g} {b}".format(r=r, g=g, b=b))
            cx += 3.0/width
        cy += 3.0/height
&nbsp;
&nbsp;
if __name__ == "__main__":
    if len(argv) &lt; 4:
        width = 512
        height = 512
        maxiter = 255
    else:
        width = int(argv[1])
        height = int(argv[2])
        maxiter = int(argv[3])
    calc_mandelbrot(width, height, maxiter, palette)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Přepis benchmarku do Cythonu</h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
from sys import argv
&nbsp;
# taken from Fractint
palette = (
        (255, 255, 255), (224, 224, 224), (216, 216, 216), (208, 208, 208),
        (200, 200, 200), (192, 192, 192), (184, 184, 184), (176, 176, 176),
        ...
        ...
        ...
        (240, 240, 140), (244, 244, 152), (244, 244, 168), (244, 244, 180),
        (244, 244, 196), (248, 248, 208), (248, 248, 224), (248, 248, 236),
        (252, 252, 252), (248, 248, 248), (240, 240, 240), (232, 232, 232))
&nbsp;
cdef calc_mandelbrot(int width, int height, int maxiter, palette):
    cdef double zx
    cdef double zy
    cdef double zx2
    cdef double zy2
    cdef double cx
    cdef double cy
    cdef int r
    cdef int g
    cdef int b
    cdef int i
&nbsp;
    print("P3")
    print("{w} {h}".format(w=width, h=height))
    print("255")
&nbsp;
    cy = -1.5
    for y in range(0, height):
        cx = -2.0
        for x in range(0, width):
            zx = 0.0
            zy = 0.0
            i = 0
            while i &lt; maxiter:
                zx2 = zx * zx
                zy2 = zy * zy
                if zx2 + zy2 &gt; 4.0:
                    break
                zy = 2.0 * zx * zy + cy
                zx = zx2 - zy2 + cx
                i += 1

            r = palette[i][0]
            g = palette[i][1]
            b = palette[i][2]
            print("{r} {g} {b}".format(r=r, g=g, b=b))
            cx += 3.0/width
        cy += 3.0/height
&nbsp;
&nbsp;
if __name__ == "__main__":
    if len(argv) &lt; 4:
        width = 512
        height = 512
        maxiter = 255
    else:
        width = int(argv[1])
        height = int(argv[2])
        maxiter = int(argv[3])
    calc_mandelbrot(width, height, maxiter, palette)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Varianta se syntaxí kompatibilní s&nbsp;Pythonem</h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
from sys import argv
import cython
&nbsp;
# taken from Fractint
palette = (
        (255, 255, 255), (224, 224, 224), (216, 216, 216), (208, 208, 208),
        (200, 200, 200), (192, 192, 192), (184, 184, 184), (176, 176, 176),
        ...
        ...
        ...
        (244, 244, 196), (248, 248, 208), (248, 248, 224), (248, 248, 236),
        (252, 252, 252), (248, 248, 248), (240, 240, 240), (232, 232, 232))
&nbsp;
@cython.cfunc
def calc_mandelbrot(width: cython.int, height: cython.int, maxiter: cython.int, palette):
    zx: cython.double
    zy: cython.double
    zx2: cython.double
    zy2: cython.double
    cx: cython.double
    cy: cython.double
    r: cython.int
    g: cython.int
    b: cython.int
    i: cython.int
&nbsp;
    print("P3")
    print("{w} {h}".format(w=width, h=height))
    print("255")
&nbsp;
    cy = -1.5
    for y in range(0, height):
        cx = -2.0
        for x in range(0, width):
            zx = 0.0
            zy = 0.0
            i = 0
            while i &lt; maxiter:
                zx2 = zx * zx
                zy2 = zy * zy
                if zx2 + zy2 &gt; 4.0:
                    break
                zy = 2.0 * zx * zy + cy
                zx = zx2 - zy2 + cx
                i += 1
&nbsp;
            r = palette[i][0]
            g = palette[i][1]
            b = palette[i][2]
            print("{r} {g} {b}".format(r=r, g=g, b=b))
            cx += 3.0/width
        cy += 3.0/height
&nbsp;
&nbsp;
if __name__ == "__main__":
    if len(argv) &lt; 4:
        width = 512
        height = 512
        maxiter = 255
    else:
        width = int(argv[1])
        height = int(argv[2])
        maxiter = int(argv[3])
    calc_mandelbrot(width, height, maxiter, palette)
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Pole a předávání ukazatelů</h2>

<pre>
</pre>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
from sys import argv, exit
import cython
from cpython cimport array
from libc.stdio cimport printf
&nbsp;
# taken from Fractint
palette = [
        [255, 255, 255], [224, 224, 224], [216, 216, 216], [208, 208, 208],
        [200, 200, 200], [192, 192, 192], [184, 184, 184], [176, 176, 176],
        ...
        ...
        ...
        [244, 244, 196], [248, 248, 208], [248, 248, 224], [248, 248, 236],
        [252, 252, 252], [248, 248, 248], [240, 240, 240], [232, 232, 232]]
&nbsp;
@cython.cdivision(True)
cdef void calc_mandelbrot(int width, int height, int maxiter, unsigned char *palette) nogil:
    cdef double zx
    cdef double zy
    cdef double zx2
    cdef double zy2
    cdef double cx
    cdef double cy
    cdef unsigned char r
    cdef unsigned char g
    cdef unsigned char b
    cdef int i
    cdef int index
&nbsp;
    printf("P3\n%d %d\n255\n", width, height)
    cy = -1.5
&nbsp;
    for y in range(0, height):
        cx = -2.0
        for x in range(0, width):
            zx = 0.0
            zy = 0.0
            i = 0
            while i &lt; maxiter:
                zx2 = zx * zx
                zy2 = zy * zy
                if zx2 + zy2 &gt; 4.0:
                    break
                zy = 2.0 * zx * zy + cy
                zx = zx2 - zy2 + cx
                i += 1
&nbsp;
            index = i * 3
            r = palette[index]
            g = palette[index+1]
            b = palette[index+2]
            printf("%d %d %d\n", r, g, b)
            cx += 3.0/width
        cy += 3.0/height
&nbsp;
&nbsp;
cdef array.array apalette = array.array('B')
&nbsp;
if __name__ == "__main__":
    if len(argv) &lt; 4:
        width = 512
        height = 512
        maxiter = 255
    else:
        width = int(argv[1])
        height = int(argv[2])
        maxiter = int(argv[3])
&nbsp;
    for color in palette:
        for component in color:
            apalette.append(component)
&nbsp;
    calc_mandelbrot(width, height, maxiter, apalette.data.as_uchars)
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Opětovná úprava se syntaxí kompatibilní s&nbsp;Pythonem</h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
from sys import argv
import cython
from cython.cimports.cpython import array
import array
from cython.cimports.libc.stdio import printf
&nbsp;
# taken from Fractint
palette = [
        [255, 255, 255], [224, 224, 224], [216, 216, 216], [208, 208, 208],
        [200, 200, 200], [192, 192, 192], [184, 184, 184], [176, 176, 176],
        ...
        ...
        ...
        [244, 244, 196], [248, 248, 208], [248, 248, 224], [248, 248, 236],
        [252, 252, 252], [248, 248, 248], [240, 240, 240], [232, 232, 232]]
&nbsp;
&nbsp;
@cython.cdivision(True)
@cython.nogil
@cython.cfunc
def calc_mandelbrot(width: cython.int, height: cython.int, maxiter: cython.int, palette: cython.p_uchar) -&gt; cython.int:
    zx: cython.double
    zy: cython.double
    zx2: cython.double
    zy2: cython.double
    cx: cython.double
    cy: cython.double
    r: cython.uchar
    g: cython.uchar
    b: cython.uchar
    i: cython.int
    index: cython.int
&nbsp;
    printf("P3\n%d %d\n255\n", width, height)
&nbsp;
    cy = -1.5
    for y in range(0, height):
        cx = -2.0
        for x in range(0, width):
            zx = 0.0
            zy = 0.0
            i = 0
            while i &lt; maxiter:
                zx2 = zx * zx
                zy2 = zy * zy
                if zx2 + zy2 &gt; 4.0:
                    break
                zy = 2.0 * zx * zy + cy
                zx = zx2 - zy2 + cx
                i += 1
&nbsp;
            index = i * 3
            r = palette[index]
            g = palette[index+1]
            b = palette[index+2]
            printf("%d %d %d\n", r, g, b)
            cx += 3.0/width
        cy += 3.0/height
&nbsp;
&nbsp;
apalette = cython.declare(array.array, array.array('B', []))
&nbsp;
if __name__ == "__main__":
    if len(argv) &lt; 4:
        width = 512
        height = 512
        maxiter = 255
    else:
        width = int(argv[1])
        height = int(argv[2])
        maxiter = int(argv[3])
&nbsp;
    for color in palette:
        for component in color:
            apalette.append(component)
&nbsp;
    calc_mandelbrot(width, height, maxiter, apalette.data.as_uchars)
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady (resp.&nbsp;jednoduché benchmarky) ukazující
vlastnosti Cythonu naleznete v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>add_numbers/add_numbers_1.py</td><td>běžná funkce v&nbsp;Pythonu podporující duck typing</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_1.py  ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_1.py</a></td></tr>
<tr><td> 2</td><td>add_numbers/add_numbers_2.pyx</td><td>funkce určená pro překlad do céčka, původní syntaxe Cythonu/Pyrexu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_2.pyx ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_2.pyx</a></td></tr>
<tr><td> 3</td><td>add_numbers/add_numbers_2.py</td><td>funkce určená pro překlad do céčka, syntaxe kompatibilní s&nbsp;Pythonem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_2.py  ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_2.py</a></td></tr>
<tr><td> 4</td><td>add_numbers/add_numbers_3.pyx</td><td>přidání informace o typech parametrů funkce pro součet celých čísel, původní syntaxe Cythonu/Pyrexu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_3.pyx">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_3.pyx</a></td></tr>
<tr><td> 5</td><td>add_numbers/add_numbers_3.py</td><td>přidání informace o typech parametrů funkce pro součet celých čísel, syntaxe kompatibilní s&nbsp;Pythonem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_3.py</a></td></tr>
<tr><td> 6</td><td>add_numbers/add_numbers_4.pyx</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_4.pyx">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_4.pyx</a></td></tr>
<tr><td> 7</td><td>add_numbers/add_numbers_4.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_4.py</a></td></tr>
<tr><td> 8</td><td>add_numbers/add_numbers_5.pyx</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_5.pyx">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_5.pyx</a></td></tr>
<tr><td> 9</td><td>add_numbers/add_numbers_5.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_5.py</a></td></tr>
<tr><td>10</td><td>add_numbers/add_numbers_6.pyx</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_6.pyx">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_6.pyx</a></td></tr>
<tr><td>11</td><td>add_numbers/add_numbers_6.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_6.py</a></td></tr>
<tr><td>12</td><td>add_numbers/add_numbers_7.pyx</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_7.pyx">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_7.pyx</a></td></tr>
<tr><td>13</td><td>add_numbers/add_numbers_7.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_7.py</a></td></tr>
<tr><td>14</td><td>add_numbers/add_numbers_dis.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_dis.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_dis.py</a></td></tr>
<tr><td>&nbsp;</td><td></td><td></td><td></td></tr>
<tr><td>15</td><td>mandelbrot/v1_python</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v1_python">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v1_python</a></td></tr>
<tr><td>16</td><td>mandelbrot/v2_cython</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v2_cython">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v2_cython</a></td></tr>
<tr><td>17</td><td>mandelbrot/v2_python</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v2_python">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v2_python</a></td></tr>
<tr><td>18</td><td>mandelbrot/v3_cython</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v3_cython">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v3_cython</a></td></tr>
<tr><td>19</td><td>mandelbrot/v3-python</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v3-python">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v3-python</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Cython (home page)<br />
<a href="http://cython.org/">http://cython.org/</a>
</li>

<li>Cython (wiki)<br />
<a href="https://github.com/cython/cython/wiki">https://github.com/cython/cython/wiki</a>
</li>

<li>Cython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Cython">https://en.wikipedia.org/wiki/Cython</a>
</li>

<li>Cython (GitHub)<br />
<a href="https://github.com/cython/cython">https://github.com/cython/cython</a>
</li>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/</a>
</li>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy (2.část)<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/</a>
</li>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy (3)<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/</a>
</li>

<li>Praktické použití nástroje Cython při překladu Pythonu do nativního kódu<br />
<a href="https://www.root.cz/clanky/prakticke-pouziti-nastroje-cython-pri-prekladu-pythonu-do-nativniho-kodu-1/">https://www.root.cz/clanky/prakticke-pouziti-nastroje-cython-pri-prekladu-pythonu-do-nativniho-kodu-1/</a>
</li>

<li>RPython vs Cython aneb dvojí přístup k překladu Pythonu do nativního kódu<br />
<a href="https://www.root.cz/clanky/rpython-vs-cython-aneb-dvoji-pristup-k-prekladu-pythonu-do-nativniho-kodu/">https://www.root.cz/clanky/rpython-vs-cython-aneb-dvoji-pristup-k-prekladu-pythonu-do-nativniho-kodu/</a>
</li>

<li>Python Implementations: Compilers<br />
<a href="https://wiki.python.org/moin/PythonImplementations#Compilers">https://wiki.python.org/moin/PythonImplementations#Compilers</a>
</li>

<li>EmbeddingCython<br />
<a href="https://github.com/cython/cython/wiki/EmbeddingCython">https://github.com/cython/cython/wiki/EmbeddingCython</a>
</li>

<li>The Basics of Cython<br />
<a href="http://docs.cython.org/en/latest/src/tutorial/cython_tutorial.html">http://docs.cython.org/en/latest/src/tutorial/cython_tutorial.html</a>
</li>

<li>Overcoming Python's GIL with Cython<br />
<a href="https://lbolla.info/python-threads-cython-gil">https://lbolla.info/python-threads-cython-gil</a>
</li>

<li>GlobalInterpreterLock<br />
<a href="https://wiki.python.org/moin/GlobalInterpreterLock">https://wiki.python.org/moin/GlobalInterpreterLock</a>
</li>

<li>The Magic of RPython<br />
<a href="https://refi64.com/posts/the-magic-of-rpython.html">https://refi64.com/posts/the-magic-of-rpython.html</a>
</li>

<li>RPython: Frequently Asked Questions<br />
<a href="http://rpython.readthedocs.io/en/latest/faq.html">http://rpython.readthedocs.io/en/latest/faq.html</a>
</li>

<li>RPython’s documentation<br />
<a href="http://rpython.readthedocs.io/en/latest/index.html">http://rpython.readthedocs.io/en/latest/index.html</a>
</li>

<li>RPython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PyPy#RPython">https://en.wikipedia.org/wiki/PyPy#RPython</a>
</li>

<li>Getting Started with RPython<br />
<a href="http://rpython.readthedocs.io/en/latest/getting-started.html">http://rpython.readthedocs.io/en/latest/getting-started.html</a>
</li>

<li>Duck typing<br />
<a href="https://en.wikipedia.org/wiki/Duck_typing">https://en.wikipedia.org/wiki/Duck_typing</a>
</li>

<li>PyPy (home page)<br />
<a href="https://pypy.org/">https://pypy.org/</a>
</li>

<li>PyPy (dokumentace)<br />
<a href="http://doc.pypy.org/en/latest/">http://doc.pypy.org/en/latest/</a>
</li>

<li>Localized Type Inference of Atomic Types in Python (2005)<br />
<a href="http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.90.3231">http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.90.3231</a>
</li>

<li>Numba<br />
<a href="http://numba.pydata.org/">http://numba.pydata.org/</a>
</li>

<li>Tutorial: Writing an Interpreter with PyPy, Part 1<br />
<a href="https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html">https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html</a>
</li>

<li>List of numerical analysis software<br />
<a href="https://en.wikipedia.org/wiki/List_of_numerical_analysis_software">https://en.wikipedia.org/wiki/List_of_numerical_analysis_software</a>
</li>

<li>Pixie: lehký skriptovací jazyk s „kouzelnými“ schopnostmi<br />
<a href="https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/">https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/</a>
</li>

<li>Programovací jazyk Pixie: funkce ze základní knihovny a použití FFI<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/">https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/</a>
</li>

<li>The future can be written in RPython now (článek z&nbsp;roku 2010)<br />
<a href="http://blog.christianperone.com/2010/05/the-future-can-be-written-in-rpython-now/">http://blog.christianperone.com/2010/05/the-future-can-be-written-in-rpython-now/</a>
</li>

<li>PyPy is the Future of Python (článek z&nbsp;roku 2010)<br />
<a href="https://alexgaynor.net/2010/may/15/pypy-future-python/">https://alexgaynor.net/2010/may/15/pypy-future-python/</a>
</li>

<li>Portal:Python programming<br />
<a href="https://en.wikipedia.org/wiki/Portal:Python_programming">https://en.wikipedia.org/wiki/Portal:Python_programming</a>
</li>

<li>RPython Frontend and C Wrapper Generator<br />
<a href="http://www.codeforge.com/article/383293">http://www.codeforge.com/article/383293</a>
</li>

<li>PyPy’s Approach to Virtual Machine Construction<br />
<a href="https://bitbucket.org/pypy/extradoc/raw/tip/talk/dls2006/pypy-vm-construction.pdf">https://bitbucket.org/pypy/extradoc/raw/tip/talk/dls2006/pypy-vm-construction.pdf</a>
</li>

<li>Tutorial: Writing an Interpreter with PyPy, Part 1<br />
<a href="https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html">https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html</a>
</li>

<li>A simple interpreter from scratch in Python (part 1)<br />
<a href="http://www.jayconrod.com/posts/37/a-simple-interpreter-from-scratch-in-python-part-1">http://www.jayconrod.com/posts/37/a-simple-interpreter-from-scratch-in-python-part-1</a>
</li>

<li>Brainfuck Interpreter in Python<br />
<a href="https://helloacm.com/brainfuck-interpreter-in-python/">https://helloacm.com/brainfuck-interpreter-in-python/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

