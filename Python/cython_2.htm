<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Typové anotace v&nbsp;Pythonu</a></p>
<p><a href="#k03">*** 3. Ukázky zápisu typových anotací</a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Typové anotace v&nbsp;Pythonu</h2>

<p>Do syntaxe a sémantiky programovacího jazyka Python se postupně přidává a
vylepšuje resp.&nbsp;přesněji řečeno zjednodušuje a zpřesňuje podpora pro
specifikaci takzvaných <i>typových anotací</i> resp.&nbsp;<i>typových
nápověd</i> (<i>type annotations</i>, <i>type hints</i>). V&nbsp;současné
podobě se jedná o nová syntaktická pravidla, která v&nbsp;zápisu zdrojového
kódu umožňují nepovinnou a do značné míry zcela dobrovolnou specifikaci typů
parametrů funkcí a metod, typů návratových hodnot funkcí a metod, typů
globálních i lokálních proměnných, typových parametrů u generických datových
typů atd. Programovací jazyk Python sice umožňuje zápis typových anotací, ale
(alespoň prozatím) neprovádí jejich kontrolu a vlastně je ani nijak nevyužívá
pro běh aplikací. Tuto činnost ponechává na jiných nástrojích, které jsou
typicky založeny na statické typové analýze nebo (jak uvidíme dále) pro podporu
AOT (<i>ahead of time</i>) překladu s&nbsp;optimalizacemi.</p>

<p><div class="rs-tip-major">Poznámka: pochopitelně ovšem stále platí, že
statická typová analýza popř.&nbsp;statická typová kontrola nebude a ani nemůže
být v&nbsp;případě programovacího jazyka Python stoprocentně úspěšná, což je
vlastnost, kterou si ukážeme na několika demonstračních příkladech uvedených
v&nbsp;navazujících kapitolách.</div></p>

<p>Zavedení typových anotací do programovacího jazyka Python bylo, zejména
zpočátku, provázeno určitým odporem částí vývojářů a někdy taktéž obavou o to,
jestli se z&nbsp;původně poměrně jednoduchého a snadno naučitelného Pythonu
nestává zcela odlišný programovací jazyk (z&nbsp;jazyka snadno naučitelného i
lidmi, kteří nejsou profesionálními programátory na komplikovaný jazyk určený
výhradně pro profesionály). Ovšem na tomto místě je nutné zdůraznit, že se
jedná o zcela nepovinnou součást jazyka, která je vlastně do značné míry
samotným Pythonem (přesněji řečeno standardním interpretrem Pythonu neboli
CPythonem) ignorována.</p>

<p>Nástroje typu <i>Mypy</i>, <i>Pyright</i>, <i>Cython</i> či LSP servery,
které typové informace zpracovávají a vyžadují pro svou činnost, pracují zcela
nezávisle na standardním interpretru Pythonu (popř.&nbsp;je možná jejich
integrace do vývojových prostředí). Na druhou stranu, i přes výše uvedené
rozpaky, právě typové anotace a jejich kontrola (a nutno dodat: i zpracování
integrovanými vývojovými prostředími) do značné míry usnadňují vývoj
rozsáhlejších aplikací. Ostatně můžeme zde vidět souvislost s&nbsp;dvojicí
JavaScript:TypeScript. A kvalita optimalizací prováděná nástrojem <i>Cython</i>
do značné míry závisí právě na poskytnutých typových informacích.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Ukázky zápisu typových anotací</h2>

<p>Typovými anotacemi v&nbsp;Pythonu jsme se již zabývali v&nbsp;článcích [<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/">1</a>] [<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/">2</a>] [<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/">3</a>].</p>
<pre>
def add(a:int, b:int) -&gt; int:
    return a+b
</pre>

def append(a:list[set[int]], b:list[set[int]]) -&gt; list[set[int]]:
    return a+b


from typing import Tuple

p: Tuple[int, float, bool, str] = (2.0, 3.14, 1, "Hello")
d:Dict[str, Union[int, float, str]] = {}

d["foo"] = 1
d["bar"] = 3.14
d[10] = 10
d[42] = "answer"

def pair[T, U](first: T, second: U) -&gt; Tuple[T, U]:
    x = (first, second)
    return x


print(pair("A", "B"))
from typing import Generic, TypeVar

T = TypeVar('T')


class Collection(Generic[T]):
    def __init__(self) -&gt; None:
        self.collection : list[T] = []

    def append(self, item: T) -&gt; None:
        self.collection.append(item)

    def get_all(self) -&gt; list[T]:
        return self.collection


c = Collection[int]()
c.append(1)
c.append(2)
print(c.get_all())



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
def add_two_numbers(x, y):
    return x + y


z = add_two_numbers(123, 456)
print(z)
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
cdef add_two_numbers(x, y):
    return x + y
&nbsp;
&nbsp;
z = add_two_numbers(123, 456)
print(z)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
import cython
&nbsp;
@cython.cfunc
def add_two_numbers(x, y):
    return x + y
&nbsp;
&nbsp;
z = add_two_numbers(123, 456)
print(z)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
cdef add_two_numbers(int x, int y):
    return x + y
&nbsp;
&nbsp;
z = add_two_numbers(123, 456)
print(z)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
import cython
&nbsp;
@cython.cfunc
def add_two_numbers(x: cython.int, y: cython.int):
    return x + y
&nbsp;
&nbsp;
z = add_two_numbers(123, 456)
print(z)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
cdef int add_two_numbers(int x, int y):
    return x + y
&nbsp;
&nbsp;
z = add_two_numbers(123, 456)
print(z)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
import cython
&nbsp;
@cython.cfunc
def add_two_numbers(x: cython.int, y: cython.int) -&gt; cython.int:
    return x + y
&nbsp;
&nbsp;
z = add_two_numbers(123, 456)
print(z)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
# taken from Fractint
palette = (
        (255, 255, 255), (224, 224, 224), (216, 216, 216), (208, 208, 208),
        (200, 200, 200), (192, 192, 192), (184, 184, 184), (176, 176, 176),
        ...
        ...
        ...
        (240, 240, 140), (244, 244, 152), (244, 244, 168), (244, 244, 180),
        (244, 244, 196), (248, 248, 208), (248, 248, 224), (248, 248, 236),
        (252, 252, 252), (248, 248, 248), (240, 240, 240), (232, 232, 232))
&nbsp;
from sys import argv
&nbsp;
&nbsp;
def calc_mandelbrot(width, height, maxiter, palette):
    print("P3")
    print("{w} {h}".format(w=width, h=height))
    print("255")
&nbsp;
    cy = -1.5
    for y in range(0, height):
        cx = -2.0
        for x in range(0, width):
            zx = 0.0
            zy = 0.0
            i = 0
            while i &lt; maxiter:
                zx2 = zx * zx
                zy2 = zy * zy
                if zx2 + zy2 &gt; 4.0:
                    break
                zy = 2.0 * zx * zy + cy
                zx = zx2 - zy2 + cx
                i += 1

            r = palette[i][0]
            g = palette[i][1]
            b = palette[i][2]
            print("{r} {g} {b}".format(r=r, g=g, b=b))
            cx += 3.0/width
        cy += 3.0/height
&nbsp;
&nbsp;
if __name__ == "__main__":
    if len(argv) &lt; 4:
        width = 512
        height = 512
        maxiter = 255
    else:
        width = int(argv[1])
        height = int(argv[2])
        maxiter = int(argv[3])
    calc_mandelbrot(width, height, maxiter, palette)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
from sys import argv
&nbsp;
# taken from Fractint
palette = (
        (255, 255, 255), (224, 224, 224), (216, 216, 216), (208, 208, 208),
        (200, 200, 200), (192, 192, 192), (184, 184, 184), (176, 176, 176),
        ...
        ...
        ...
        (240, 240, 140), (244, 244, 152), (244, 244, 168), (244, 244, 180),
        (244, 244, 196), (248, 248, 208), (248, 248, 224), (248, 248, 236),
        (252, 252, 252), (248, 248, 248), (240, 240, 240), (232, 232, 232))
&nbsp;
cdef calc_mandelbrot(int width, int height, int maxiter, palette):
    cdef double zx
    cdef double zy
    cdef double zx2
    cdef double zy2
    cdef double cx
    cdef double cy
    cdef int r
    cdef int g
    cdef int b
    cdef int i
&nbsp;
    print("P3")
    print("{w} {h}".format(w=width, h=height))
    print("255")
&nbsp;
    cy = -1.5
    for y in range(0, height):
        cx = -2.0
        for x in range(0, width):
            zx = 0.0
            zy = 0.0
            i = 0
            while i &lt; maxiter:
                zx2 = zx * zx
                zy2 = zy * zy
                if zx2 + zy2 &gt; 4.0:
                    break
                zy = 2.0 * zx * zy + cy
                zx = zx2 - zy2 + cx
                i += 1

            r = palette[i][0]
            g = palette[i][1]
            b = palette[i][2]
            print("{r} {g} {b}".format(r=r, g=g, b=b))
            cx += 3.0/width
        cy += 3.0/height
&nbsp;
&nbsp;
if __name__ == "__main__":
    if len(argv) &lt; 4:
        width = 512
        height = 512
        maxiter = 255
    else:
        width = int(argv[1])
        height = int(argv[2])
        maxiter = int(argv[3])
    calc_mandelbrot(width, height, maxiter, palette)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
from sys import argv
import cython
&nbsp;
# taken from Fractint
palette = (
        (255, 255, 255), (224, 224, 224), (216, 216, 216), (208, 208, 208),
        (200, 200, 200), (192, 192, 192), (184, 184, 184), (176, 176, 176),
        ...
        ...
        ...
        (244, 244, 196), (248, 248, 208), (248, 248, 224), (248, 248, 236),
        (252, 252, 252), (248, 248, 248), (240, 240, 240), (232, 232, 232))
&nbsp;
@cython.cfunc
def calc_mandelbrot(width: cython.int, height: cython.int, maxiter: cython.int, palette):
    zx: cython.double
    zy: cython.double
    zx2: cython.double
    zy2: cython.double
    cx: cython.double
    cy: cython.double
    r: cython.int
    g: cython.int
    b: cython.int
    i: cython.int
&nbsp;
    print("P3")
    print("{w} {h}".format(w=width, h=height))
    print("255")
&nbsp;
    cy = -1.5
    for y in range(0, height):
        cx = -2.0
        for x in range(0, width):
            zx = 0.0
            zy = 0.0
            i = 0
            while i &lt; maxiter:
                zx2 = zx * zx
                zy2 = zy * zy
                if zx2 + zy2 &gt; 4.0:
                    break
                zy = 2.0 * zx * zy + cy
                zx = zx2 - zy2 + cx
                i += 1
&nbsp;
            r = palette[i][0]
            g = palette[i][1]
            b = palette[i][2]
            print("{r} {g} {b}".format(r=r, g=g, b=b))
            cx += 3.0/width
        cy += 3.0/height
&nbsp;
&nbsp;
if __name__ == "__main__":
    if len(argv) &lt; 4:
        width = 512
        height = 512
        maxiter = 255
    else:
        width = int(argv[1])
        height = int(argv[2])
        maxiter = int(argv[3])
    calc_mandelbrot(width, height, maxiter, palette)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>

</pre>


<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
from sys import argv, exit
import cython
from cpython cimport array
from libc.stdio cimport printf
&nbsp;
# taken from Fractint
palette = [
        [255, 255, 255], [224, 224, 224], [216, 216, 216], [208, 208, 208],
        [200, 200, 200], [192, 192, 192], [184, 184, 184], [176, 176, 176],
        ...
        ...
        ...
        [244, 244, 196], [248, 248, 208], [248, 248, 224], [248, 248, 236],
        [252, 252, 252], [248, 248, 248], [240, 240, 240], [232, 232, 232]]
&nbsp;
@cython.cdivision(True)
cdef void calc_mandelbrot(int width, int height, int maxiter, unsigned char *palette) nogil:
    cdef double zx
    cdef double zy
    cdef double zx2
    cdef double zy2
    cdef double cx
    cdef double cy
    cdef unsigned char r
    cdef unsigned char g
    cdef unsigned char b
    cdef int i
    cdef int index
&nbsp;
    printf("P3\n%d %d\n255\n", width, height)
    cy = -1.5
&nbsp;
    for y in range(0, height):
        cx = -2.0
        for x in range(0, width):
            zx = 0.0
            zy = 0.0
            i = 0
            while i &lt; maxiter:
                zx2 = zx * zx
                zy2 = zy * zy
                if zx2 + zy2 &gt; 4.0:
                    break
                zy = 2.0 * zx * zy + cy
                zx = zx2 - zy2 + cx
                i += 1
&nbsp;
            index = i * 3
            r = palette[index]
            g = palette[index+1]
            b = palette[index+2]
            printf("%d %d %d\n", r, g, b)
            cx += 3.0/width
        cy += 3.0/height
&nbsp;
&nbsp;
cdef array.array apalette = array.array('B')
&nbsp;
if __name__ == "__main__":
    if len(argv) &lt; 4:
        width = 512
        height = 512
        maxiter = 255
    else:
        width = int(argv[1])
        height = int(argv[2])
        maxiter = int(argv[3])
&nbsp;
    for color in palette:
        for component in color:
            apalette.append(component)
&nbsp;
    calc_mandelbrot(width, height, maxiter, apalette.data.as_uchars)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<pre>
#!/usr/bin/env python
# vim: set fileencoding=utf-8
&nbsp;
from sys import argv
import cython
from cython.cimports.cpython import array
import array
from cython.cimports.libc.stdio import printf
&nbsp;
# taken from Fractint
palette = [
        [255, 255, 255], [224, 224, 224], [216, 216, 216], [208, 208, 208],
        [200, 200, 200], [192, 192, 192], [184, 184, 184], [176, 176, 176],
        ...
        ...
        ...
        [244, 244, 196], [248, 248, 208], [248, 248, 224], [248, 248, 236],
        [252, 252, 252], [248, 248, 248], [240, 240, 240], [232, 232, 232]]
&nbsp;
&nbsp;
@cython.cdivision(True)
@cython.nogil
@cython.cfunc
def calc_mandelbrot(width: cython.int, height: cython.int, maxiter: cython.int, palette: cython.p_uchar) -&gt; cython.int:
    zx: cython.double
    zy: cython.double
    zx2: cython.double
    zy2: cython.double
    cx: cython.double
    cy: cython.double
    r: cython.uchar
    g: cython.uchar
    b: cython.uchar
    i: cython.int
    index: cython.int
&nbsp;
    printf("P3\n%d %d\n255\n", width, height)
&nbsp;
    cy = -1.5
    for y in range(0, height):
        cx = -2.0
        for x in range(0, width):
            zx = 0.0
            zy = 0.0
            i = 0
            while i &lt; maxiter:
                zx2 = zx * zx
                zy2 = zy * zy
                if zx2 + zy2 &gt; 4.0:
                    break
                zy = 2.0 * zx * zy + cy
                zx = zx2 - zy2 + cx
                i += 1
&nbsp;
            index = i * 3
            r = palette[index]
            g = palette[index+1]
            b = palette[index+2]
            printf("%d %d %d\n", r, g, b)
            cx += 3.0/width
        cy += 3.0/height
&nbsp;
&nbsp;
apalette = cython.declare(array.array, array.array('B', []))
&nbsp;
if __name__ == "__main__":
    if len(argv) &lt; 4:
        width = 512
        height = 512
        maxiter = 255
    else:
        width = int(argv[1])
        height = int(argv[2])
        maxiter = int(argv[3])
&nbsp;
    for color in palette:
        for component in color:
            apalette.append(component)
&nbsp;
    calc_mandelbrot(width, height, maxiter, apalette.data.as_uchars)
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační příklady (resp.&nbsp;jednoduché benchmarky) ukazující
vlastnosti Cythonu naleznete v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>add_numbers/add_numbers_1.py </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_1.py  ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_1.py</a></td></tr>
<tr><td> 2</td><td>add_numbers/add_numbers_2.pyx</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_2.pyx ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_2.pyx</a></td></tr>
<tr><td> 3</td><td>add_numbers/add_numbers_2.py </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_2.py  ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_2.py</a></td></tr>
<tr><td> 4</td><td>add_numbers/add_numbers_3.pyx</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_3.pyx ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_3.pyx</a></td></tr>
<tr><td> 5</td><td>add_numbers/add_numbers_3.py </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_3.py  ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_3.py</a></td></tr>
<tr><td> 6</td><td>add_numbers/add_numbers_4.pyx</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_4.pyx ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_4.pyx</a></td></tr>
<tr><td> 7</td><td>add_numbers/add_numbers_4.py </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_4.py  ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_4.py</a></td></tr>
<tr><td> 8</td><td>add_numbers/add_numbers_5.pyx</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_5.pyx ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_5.pyx</a></td></tr>
<tr><td> 9</td><td>add_numbers/add_numbers_5.py </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_5.py  ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_5.py</a></td></tr>
<tr><td>10</td><td>add_numbers/add_numbers_6.pyx</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_6.pyx ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_6.pyx</a></td></tr>
<tr><td>11</td><td>add_numbers/add_numbers_6.py </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_6.py  ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_6.py</a></td></tr>
<tr><td>12</td><td>add_numbers/add_numbers_7.pyx</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_7.pyx ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_7.pyx</a></td></tr>
<tr><td>13</td><td>add_numbers/add_numbers_7.py </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_7.py  ">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_7.py</a></td></tr>
<tr><td>14</td><td>add_numbers/add_numbers_dis.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_dis.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/add_numbers/add_numbers_dis.py</a></td></tr>
<tr><td>&nbsp;</td><td></td><td></td><td></td></tr>
<tr><td>15</td><td>mandelbrot/v1_python</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v1_python">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v1_python</a></td></tr>
<tr><td>16</td><td>mandelbrot/v2_cython</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v2_cython">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v2_cython</a></td></tr>
<tr><td>17</td><td>mandelbrot/v2_python</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v2_python">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v2_python</a></td></tr>
<tr><td>18</td><td>mandelbrot/v3_cython</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v3_cython">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v3_cython</a></td></tr>
<tr><td>19</td><td>mandelbrot/v3-python</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v3-python">https://github.com/tisnik/most-popular-python-libs/blob/master/cython/mandelbrot/v3-python</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Cython (home page)<br />
<a href="http://cython.org/">http://cython.org/</a>
</li>

<li>Cython (wiki)<br />
<a href="https://github.com/cython/cython/wiki">https://github.com/cython/cython/wiki</a>
</li>

<li>Cython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Cython">https://en.wikipedia.org/wiki/Cython</a>
</li>

<li>Cython (GitHub)<br />
<a href="https://github.com/cython/cython">https://github.com/cython/cython</a>
</li>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/</a>
</li>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy (2.část)<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/</a>
</li>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy (3)<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/</a>
</li>

<li>Python Implementations: Compilers<br />
<a href="https://wiki.python.org/moin/PythonImplementations#Compilers">https://wiki.python.org/moin/PythonImplementations#Compilers</a>
</li>

<li>EmbeddingCython<br />
<a href="https://github.com/cython/cython/wiki/EmbeddingCython">https://github.com/cython/cython/wiki/EmbeddingCython</a>
</li>

<li>The Basics of Cython<br />
<a href="http://docs.cython.org/en/latest/src/tutorial/cython_tutorial.html">http://docs.cython.org/en/latest/src/tutorial/cython_tutorial.html</a>
</li>

<li>Overcoming Python's GIL with Cython<br />
<a href="https://lbolla.info/python-threads-cython-gil">https://lbolla.info/python-threads-cython-gil</a>
</li>

<li>GlobalInterpreterLock<br />
<a href="https://wiki.python.org/moin/GlobalInterpreterLock">https://wiki.python.org/moin/GlobalInterpreterLock</a>
</li>

<li>The Magic of RPython<br />
<a href="https://refi64.com/posts/the-magic-of-rpython.html">https://refi64.com/posts/the-magic-of-rpython.html</a>
</li>

<li>RPython: Frequently Asked Questions<br />
<a href="http://rpython.readthedocs.io/en/latest/faq.html">http://rpython.readthedocs.io/en/latest/faq.html</a>
</li>

<li>RPython’s documentation<br />
<a href="http://rpython.readthedocs.io/en/latest/index.html">http://rpython.readthedocs.io/en/latest/index.html</a>
</li>

<li>RPython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/PyPy#RPython">https://en.wikipedia.org/wiki/PyPy#RPython</a>
</li>

<li>Getting Started with RPython<br />
<a href="http://rpython.readthedocs.io/en/latest/getting-started.html">http://rpython.readthedocs.io/en/latest/getting-started.html</a>
</li>

<li>PyPy (home page)<br />
<a href="https://pypy.org/">https://pypy.org/</a>
</li>

<li>PyPy (dokumentace)<br />
<a href="http://doc.pypy.org/en/latest/">http://doc.pypy.org/en/latest/</a>
</li>

<li>Localized Type Inference of Atomic Types in Python (2005)<br />
<a href="http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.90.3231">http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.90.3231</a>
</li>

<li>Numba<br />
<a href="http://numba.pydata.org/">http://numba.pydata.org/</a>
</li>

<li>Tutorial: Writing an Interpreter with PyPy, Part 1<br />
<a href="https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html">https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html</a>
</li>

<li>List of numerical analysis software<br />
<a href="https://en.wikipedia.org/wiki/List_of_numerical_analysis_software">https://en.wikipedia.org/wiki/List_of_numerical_analysis_software</a>
</li>

<li>Pixie: lehký skriptovací jazyk s „kouzelnými“ schopnostmi<br />
<a href="https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/">https://www.root.cz/clanky/pixie-lehky-skriptovaci-jazyk-s-kouzelnymi-schopnostmi/</a>
</li>

<li>Programovací jazyk Pixie: funkce ze základní knihovny a použití FFI<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/">https://www.root.cz/clanky/programovaci-jazyk-pixie-funkce-ze-zakladni-knihovny-a-pouziti-ffi/</a>
</li>

<li>The future can be written in RPython now (článek z&nbsp;roku 2010)<br />
<a href="http://blog.christianperone.com/2010/05/the-future-can-be-written-in-rpython-now/">http://blog.christianperone.com/2010/05/the-future-can-be-written-in-rpython-now/</a>
</li>

<li>PyPy is the Future of Python (článek z&nbsp;roku 2010)<br />
<a href="https://alexgaynor.net/2010/may/15/pypy-future-python/">https://alexgaynor.net/2010/may/15/pypy-future-python/</a>
</li>

<li>Portal:Python programming<br />
<a href="https://en.wikipedia.org/wiki/Portal:Python_programming">https://en.wikipedia.org/wiki/Portal:Python_programming</a>
</li>

<li>RPython Frontend and C Wrapper Generator<br />
<a href="http://www.codeforge.com/article/383293">http://www.codeforge.com/article/383293</a>
</li>

<li>PyPy’s Approach to Virtual Machine Construction<br />
<a href="https://bitbucket.org/pypy/extradoc/raw/tip/talk/dls2006/pypy-vm-construction.pdf">https://bitbucket.org/pypy/extradoc/raw/tip/talk/dls2006/pypy-vm-construction.pdf</a>
</li>

<li>Tutorial: Writing an Interpreter with PyPy, Part 1<br />
<a href="https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html">https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html</a>
</li>

<li>A simple interpreter from scratch in Python (part 1)<br />
<a href="http://www.jayconrod.com/posts/37/a-simple-interpreter-from-scratch-in-python-part-1">http://www.jayconrod.com/posts/37/a-simple-interpreter-from-scratch-in-python-part-1</a>
</li>

<li>Brainfuck Interpreter in Python<br />
<a href="https://helloacm.com/brainfuck-interpreter-in-python/">https://helloacm.com/brainfuck-interpreter-in-python/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

