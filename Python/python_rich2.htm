<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tisk naformátovaného a obarveného strukturovaného textu na terminál s využitím knihovny Rich (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tisk naformátovaného a obarveného strukturovaného textu na terminál s využitím knihovny Rich (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhém a současně i posledním článku o knihovně Rich si popíšeme způsob zobrazení stromových struktur, jak se zobrazují tabulky s formátovaným textem, zobrazení dat umístěných do sloupců a v neposlední řadě si ukážeme například postupné zobrazení dokončené činnosti (progress bar).</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Zobrazení stromové struktury na ploše terminálu</a></p>
<p><a href="#k02">2. Přidání uzlů do stromu metodou <strong>add</strong>, zobrazení celého stromu na terminálu</a></p>
<p><a href="#k03">3. Přidání uzlů s&nbsp;poduzly do stromu</a></p>
<p><a href="#k04">4. Specifikace barev textů v&nbsp;uzlech stromu</a></p>
<p><a href="#k05">5. Volba, zda má být podstrom rozbalen či nikoli</a></p>
<p><a href="#k06">6. Praktická ukázka použití stromu: zobrazení obsahu adresáře</a></p>
<p><a href="#k07">7. Zobrazení průběhu výpočtu: progress bar</a></p>
<p><a href="#k08">8. Progress bar vytvořený pro sekvenci</a></p>
<p><a href="#k09">9. Výpočet prvočísel s&nbsp;vizualizací průběhu výpočtu</a></p>
<p><a href="#k10">*** 10. Využití instance třídy <strong>Progress</strong> ve funkci context manageru</a></p>
<p><a href="#k11">11. Panely a sloupce</a></p>
<p><a href="#k12">12. Změna stylu (barvy) textu umístěných do jednotlivých panelů, víceřádkový text</a></p>
<p><a href="#k13">13. Automatické rozmístění patnácti panelů v&nbsp;rámci plochy terminálu</a></p>
<p><a href="#k14">14. Zobrazení jednoduché tabulky</a></p>
<p><a href="#k15">15. Formát textu v&nbsp;buňkách tabulky</a></p>
<p><a href="#k16">16. Použití značky <strong>[bold]</strong> a <strong>[/bold]</strong> v&nbsp;buňkách tabulky</a></p>
<p><a href="#k17">17. Zarovnání textu</a></p>
<p><a href="#k18">18. Příloha: jména podporovaných barev</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Zobrazení stromové struktury na ploše terminálu</h2>

<p>V&nbsp;úvodní části dnešního článku o knihovně <i>Rich</i> se seznámíme se
zobrazením stromové struktury na ploše terminálu. Jedná se o poměrně často
využívanou operaci, protože například systém souborů tvoří stromovou strukturu;
ovšem může se jednat například i o vizualizaci struktury nějaké organizace, o
strukturované poznámky, vizualizaci rozhodovacího stromu atd. atd. Pro
zobrazení stromové struktury se používá třída nazvaná <strong>tree</strong>,
kterou nalezneme v&nbsp;modulu <strong>rich.tree</strong>:</p>

<pre>
Help on class Tree in module rich.tree:
&nbsp;
class Tree(rich.jupyter.JupyterMixin)
 |  Tree(label: Union[rich.console.ConsoleRenderable, rich.console.RichCast, str], *, style: Union[str, ForwardRef('Style')] = 'tree', guide_style: Union[str, ForwardRef('Style')] = 'tree.line', expanded: bool = True, highlight: bool = False, hide_root: bool = False) -> None
 |  
 |  A renderable for a tree structure.
 |  
 |  Args:
 |      label (RenderableType): The renderable or str for the tree label.
 |      style (StyleType, optional): Style of this tree. Defaults to "tree".
 |      guide_style (StyleType, optional): Style of the guide lines. Defaults to "tree.line".
 |      expanded (bool, optional): Also display children. Defaults to True.
 |      highlight (bool, optional): Highlight renderable (if str). Defaults to False.
 |  
 |  Method resolution order:
 |      Tree
 |      rich.jupyter.JupyterMixin
 |      builtins.object
</pre>

<p>Samozřejmě můžeme pro zobrazení informací o třídě <strong>Tree</strong>
využít i metodu <strong>inspect</strong>, kterou jsme si popsali <a
href="https://www.root.cz/clanky/tisk-naformatovaneho-a-obarveneho-textu-na-terminal-s-knihovnou-rich/">minule</a>:</p>

<pre>
from rich import inspect
from rich.tree import Tree
&nbsp;
<strong>inspect(Tree, methods=True)</strong>
</pre>

<p>Výsledek zobrazený na textovém terminálu může vypadat následovně:</p>

*** image ***
<p><i>Obrázek 1: Základní informace o třídě <strong>Tree</strong> zobrazené
funkcí <strong>inspect</strong>.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Přidání uzlů do stromu metodou <strong>add</strong>, zobrazení celého stromu na terminálu</h2>

<p>Po konstrukci instance třídy <strong>Tree</strong> můžeme do takto
vytvořeného uzlu přidávat uzly (a popř.&nbsp;celé podstromy) metodou
<strong>add</strong>. V&nbsp;tom nejjednodušším případě postačuje této metodě
předat pouze text, kterým je uzel stromu popsán. Pro ilustraci se pokusme o
vytvoření stromu s&nbsp;pěti uzly (na stejné úrovni). Samotný kořen stromu je
taktéž popsán textem. Strom lze vykreslit upravenou funkcí
<strong>print</strong>:</p>

<pre>
from rich.tree import Tree
from rich import print
&nbsp;
&nbsp;
tree = <strong>Tree("Barvové modely")</strong>
tree.add("RGB")
tree.add("CMYK")
tree.add("YUV")
tree.add("HSL")
tree.add("HSV")
&nbsp;
<strong>print(tree)</strong>
</pre>

<p>Výsledek bude vypadat takto:</p>

*** image ***
<p><i>Obrázek 2: Jednoúrovňový strom s&nbsp;kořenem a pěti uzly.</i></p>

<p>Zobrazme si navíc informace o samotné instanci třídy <strong>Tree</strong>.
K&nbsp;tomuto účelu opět použijeme funkci <strong>inspect</strong>, kterou již
dobře známe:</p>

<pre>
from rich import inspect
from rich.tree import Tree
&nbsp;
tree = <strong>Tree("Barvové modely")</strong>
tree.add("RGB")
tree.add("CMYK")
tree.add("YUV")
tree.add("HSL")
tree.add("HSV")
&nbsp;
<strong>inspect(tree, methods=True)</strong>
</pre>

<p>S&nbsp;výsledkem:</p>

*** image ***
<p><i>Obrázek 3: Informace o instanci třídy <strong>Tree</strong> zobrazené
funkcí <strong>inspect</strong>.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Přidání uzlů s&nbsp;poduzly do stromu</h2>

<p>Uzel, který je vložený do stromu (tedy do instance třídy
<strong>Tree</strong>) metodou <strong>add</strong>, je opět instancí třídy
<strong>Tree</strong>. O tom se přesvědčíme triviálním způsobem:</p>

<pre>
from rich import inspect
from rich.tree import Tree
&nbsp;
tree = Tree("Strom")
<strong>node = tree.add("Uzel")</strong>
&nbsp;
<strong>inspect(node)</strong>
</pre>

<p>S&nbsp;tímto výsledkem:</p>

*** image ***
<p><i>Obrázek 4: Informace o uzlu zobrazené funkcí
<strong>inspect</strong>.</i></p>

<p>To tedy znamená, že můžeme vytvořit strom, jehož uzly budou obsahovat další
poduzly. V&nbsp;případě jediného poduzlu lze použít tento trik:</p>

<pre>
from rich.tree import Tree
from rich import print
&nbsp;
&nbsp;
tree = <strong>Tree("Barvové modely")</strong>
tree.add("RGB").add("Red Green Blue")
tree.add("CMYK").add("Cyan Magenta Yellow blacK")
tree.add("YUV").add("Luminance Chrominance")
tree.add("HSL").add("Hue Saturation Lightness")
tree.add("HSV").add("Hue Saturation Value")
&nbsp;
<strong>print(tree)</strong>
</pre>

<p>Výsledný strom bude vypadat takto:</p>

*** image ***
<p><i>Obrázek 5: Strom s&nbsp;pěti uzly, z&nbsp;nichž každý obsahuje jediný
poduzel.</i></p>

<p>V&nbsp;případě, že má nějaký uzel stromu obsahovat větší množství poduzlů,
vypomůžeme si použitím proměnných, z&nbsp;nichž každá bude obsahovat daný
podstrom:</p>

<pre>
from rich.tree import Tree
from rich import print
&nbsp;
&nbsp;
tree = <strong>Tree("Barvové modely")</strong>
rgb = tree.add("RGB")
cmyk = tree.add("CMYK")
yuv = tree.add("YUV")
hsl = tree.add("HSL")
hsv = tree.add("HSV")
&nbsp;
rgb.add("Red")
rgb.add("Green")
rgb.add("Blue")
&nbsp;
cmyk.add("Cyan")
cmyk.add("Magenta")
cmyk.add("Yellow")
cmyk.add("blacK")
&nbsp;
hsl.add("Hue")
hsl.add("Saturation")
hsl.add("Lightness")
&nbsp;
hsv.add("Hue")
hsv.add("Saturation")
hsv.add("Value")
&nbsp;
<strong>print(tree)</strong>
</pre>

<p>Opět se podívejme na výsledek:</p>

*** image ***
<p><i>Obrázek 6: Strom s&nbsp;pěti uzly, které mohou obsahovat další
poduzly.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Specifikace barev textů v&nbsp;uzlech stromu</h2>

<p>Struktura resp.&nbsp;struktury zobrazené ve stromu nebyly zvoleny náhodně,
neboť některé uzly obsahují jména barev. Uzly stromu totiž skutečně můžeme
obarvit, a to takovým způsobem, že jméno barvy zapíšeme do hranatých závorek.
Ostatně vše bude patrné z&nbsp;následujícího příkladu:</p>

<pre>
from rich.tree import Tree
from rich import print
&nbsp;
&nbsp;
tree = <strong>Tree("Barvové modely")</strong>
rgb = tree.add("RGB")
cmyk = tree.add("CMYK")
yuv = tree.add("YUV")
hsl = tree.add("HSL")
hsv = tree.add("HSV")
&nbsp;
rgb.add("<strong>[red]</strong>Red")
rgb.add("<strong>[green]</strong>Green")
rgb.add("<strong>[blue]</strong>Blue")
&nbsp;
cmyk.add("<strong>[cyan]</strong>Cyan")
cmyk.add("<strong>[magenta]</strong>Magenta")
cmyk.add("<strong>[yellow]</strong>Yellow")
cmyk.add("<strong>[black]</strong>blacK")
&nbsp;
hsl.add("Hue")
hsl.add("Saturation")
hsl.add("Lightness")
&nbsp;
hsv.add("Hue")
hsv.add("Saturation")
hsv.add("Value")
&nbsp;
<strong>print(tree)</strong>
</pre>

<p>Podívejme se na výsledek (včetně poněkud nešťastně zvolené černé barvy):</p>

*** image ***
<p><i>Obrázek 7: Strom s&nbsp;pěti uzly, které mohou obsahovat další
poduzly. Některé poduzly jsou obarveny.</i></p>

<p>Obarveny však nejsou celé uzly, pouze text za jménem barvy. O tom se opět
můžeme velmi snadno přesvědčit:</p>

<pre>
from rich.tree import Tree
from rich import print
&nbsp;
&nbsp;
<strong>tree = Tree("Barvové modely")</strong>
rgb = tree.add("RGB")
cmyk = tree.add("CMYK")
yuv = tree.add("YUV")
hsl = tree.add("HSL")
hsv = tree.add("HSV")
&nbsp;
rgb.add("barva <strong>[red]</strong>Red")
rgb.add("barva <strong>[green]</strong>Green")
rgb.add("barva <strong>[blue]</strong>Blue")
&nbsp;
cmyk.add("barva <strong>[cyan]</strong>Cyan")
cmyk.add("barva <strong>[magenta]</strong>Magenta")
cmyk.add("barva <strong>[yellow]</strong>Yellow")
cmyk.add("barva <strong>[black]</strong>blacK")
&nbsp;
hsl.add("Hue")
hsl.add("Saturation")
hsl.add("Lightness")
&nbsp;
hsv.add("Hue")
hsv.add("Saturation")
hsv.add("Value")
&nbsp;
<strong>print(tree)</strong>
</pre>

<p>Na terminál se v&nbsp;tomto případě vykreslí tento strom:</p>

*** image ***
<p><i>Obrázek 8: Strom s&nbsp;pěti uzly, které mohou obsahovat další
poduzly. Některé poduzly jsou částečně obarveny.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Volba, zda má být podstrom rozbalen či nikoli</h2>

<p>Nepovinným parametrem <strong>expanded</strong> nastaveným na pravdivostní
hodnotu <strong>True</strong> či <strong>False</strong> je možné určit, jestli
se má zvolený (právě vytvářený) podstrom daného uzlu zobrazit v&nbsp;rozbalené
podobně či nikoli.  V&nbsp;dalším demonstračním příkladu je tato volba použita
u podstromu <strong>CMYK</strong>:</p>

<pre>
from rich.tree import Tree
from rich import print
&nbsp;
&nbsp;
tree = Tree("Barvové modely")
rgb = tree.add("RGB")
cmyk = <strong>tree.add("CMYK", expanded=False)</strong>
yuv = tree.add("YUV")
hsl = tree.add("HSL")
hsv = tree.add("HSV")
&nbsp;
rgb.add("barva [red]Red")
rgb.add("barva [green]Green")
rgb.add("barva [blue]Blue")
&nbsp;
cmyk.add("barva [cyan]Cyan")
cmyk.add("barva [magenta]Magenta")
cmyk.add("barva [yellow]Yellow")
cmyk.add("barva [black]blacK")
&nbsp;
hsl.add("Hue")
hsl.add("Saturation")
hsl.add("Lightness")
&nbsp;
hsv.add("Hue")
hsv.add("Saturation")
hsv.add("Value")
&nbsp;
print(tree)
</pre>

<p>S&nbsp;výsledkem:</p>

*** image ***
<p><i>Obrázek 9: Uzel <strong>CMYK</strong> sice obsahuje poduzly, ty však
nejsou zobrazeny (podstrom je zabalený).</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Praktická ukázka použití stromu: zobrazení obsahu adresáře</h2>

<p>Na adrese <a
href="https://github.com/Textualize/rich/blob/master/examples/tree.py">https://github.com/Textualize/rich/blob/master/examples/tree.py</a>
naleznete skript, který po svém spuštění vytiskne strom s&nbsp;vizualizací
obsahu zvoleného adresáře. Povšimněte si, že se zobrazují (přes Unicode) i
ikony u známých typů souborů:</p>

<pre>
"""
Demonstrates how to display a tree of files / directories with the Tree renderable.
"""
&nbsp;
import os
import pathlib
import sys
&nbsp;
from rich import print
from rich.filesize import decimal
from rich.markup import escape
from rich.text import Text
from rich.tree import Tree
&nbsp;
&nbsp;
def walk_directory(directory: pathlib.Path, tree: Tree) -&gt; None:
    <i>"""Recursively build a Tree with directory contents."""</i>
    <i># Sort dirs first then by filename</i>
    paths = sorted(
        pathlib.Path(directory).iterdir(),
        key=lambda path: (path.is_file(), path.name.lower()),
    )
    for path in paths:
        <i># Remove hidden files</i>
        if path.name.startswith("."):
            continue
        if path.is_dir():
            style = "dim" if path.name.startswith("__") else ""
            branch = tree.add(
                f"[bold magenta]:open_file_folder: [link file://{path}]{escape(path.name)}",
                style=style,
                guide_style=style,
            )
            walk_directory(path, branch)
        else:
            text_filename = Text(path.name, "green")
            text_filename.highlight_regex(r"\..*$", "bold red")
            text_filename.stylize(f"link file://{path}")
            file_size = path.stat().st_size
            text_filename.append(f" ({decimal(file_size)})", "blue")
            icon = "🐍 " if path.suffix == ".py" else "📄 "
            tree.add(Text(icon) + text_filename)


try:
    directory = os.path.abspath(sys.argv[1])
except IndexError:
    print("[b]Usage:[/] python tree.py &lt;DIRECTORY&gt;")
else:
    tree = Tree(
        f":open_file_folder: [link file://{directory}]{directory}",
        guide_style="bold bright_blue",
    )
    walk_directory(pathlib.Path(directory), tree)
    print(tree)
</pre>

<p>Podívejme se nyní na ukázky výstupu:</p>

*** image ***
<p><i>Obrázek 10: Zobrazení obsahu adresáře (výřez výstupu).</i></p>

*** image ***
<p><i>Obrázek 11: Zobrazení obsahu adresáře (výřez výstupu).</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zobrazení průběhu výpočtu: progress bar</h2>

<p>V&nbsp;případě, že se provádí nějaký zdlouhavý výpočet nebo zpracování dat a
současně je alespoň zhruba známý počet kroků nutných k&nbsp;dokončení této
činnosti, můžeme uživatele o průběhu výpočtu informovat s&nbsp;využitím
klasického &bdquo;teploměru&ldquo; (<i>progress bar</i>). Jedná se o objekt,
který se vytváří (a současně i zobrazí) funkcí <strong>track</strong>:</p>

<pre>
Help on function track in module rich.progress:
&nbsp;
track(sequence: Union[Sequence[~ProgressType], Iterable[~ProgressType]], description: str = 'Working...', total: Union[float, NoneType] = None, auto_refresh: bool = True, console: Union[rich.console.Console, NoneType] = None, transient: bool = False, get_time: Union[Callable[[], float], NoneType] = None, refresh_per_second: float = 10, style: Union[str, ForwardRef('Style')] = 'bar.back', complete_style: Union[str, ForwardRef('Style')] = 'bar.complete', finished_style: Union[str, ForwardRef('Style')] = 'bar.finished', pulse_style: Union[str, ForwardRef('Style')] = 'bar.pulse', update_period: float = 0.1, disable: bool = False, show_speed: bool = True) -&gt; Iterable[~ProgressType]
    Track progress by iterating over a sequence.
&nbsp;    
    Args:
        sequence (Iterable[ProgressType]): A sequence (must support "len") you wish to iterate over.
        description (str, optional): Description of task show next to progress bar. Defaults to "Working".
        total: (float, optional): Total number of steps. Default is len(sequence).
        auto_refresh (bool, optional): Automatic refresh, disable to force a refresh after each iteration. Default is True.
        transient: (bool, optional): Clear the progress on exit. Defaults to False.
        console (Console, optional): Console to write to. Default creates internal Console instance.
        refresh_per_second (float): Number of times per second to refresh the progress information. Defaults to 10.
        style (StyleType, optional): Style for the bar background. Defaults to "bar.back".
        complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".
        finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".
        pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".
        update_period (float, optional): Minimum time (in seconds) between calls to update(). Defaults to 0.1.
        disable (bool, optional): Disable display of progress.
        show_speed (bool, optional): Show speed if total isn't known. Defaults to True.
    Returns:
        Iterable[ProgressType]: An iterable of the values in the sequence.
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Progress bar vytvořený pro sekvenci</h2>

<p>Důležitý je především parametr <strong>sequence</strong>, kterým může být
libovolná sekvence (například vytvořená pomocí <strong>range</strong>), přes
níž se iteruje a z&nbsp;níž lze odvodit, jak dlouho bude výpočet prováděn.
Ostatně si to ukažme na demonstračním příkladu získaném z&nbsp;originální
dokumentace, který ukazuje, jak lze iterovat přes hodnoty 0 až 100 (vždy se
zpožděním 0.02 sekundy) </p>

<pre>
from rich.progress import track
from time import sleep
&nbsp;
&nbsp;
def process_data():
    sleep(0.02)
&nbsp;
&nbsp;
for _ in track(range(100), description='[green]Processing data'):
    process_data()
</pre>

<p>Podívejme se na výsledky, konkrétně na terminál na začátku výpočtu a na
konci výpočtu:</p>

*** image ***
<p><i>Obrázek 12: Zobrazení průběhu výpočtu: začátek výpočtu.</i></p>

*** image ***
<p><i>Obrázek 13: Zobrazení průběhu výpočtu: dokončení výpočtu.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Výpočet prvočísel s&nbsp;vizualizací průběhu výpočtu</h2>

<p>Podívejme se nyní na poněkud praktičtější příklad. Bude se jednat o
relativně pomalý algoritmus určený pro výpočet prvočísel. Vzhledem k&nbsp;tomu,
že výpočet může být pro větší limit pomalý, budeme na terminál zobrazovat i
průběh výpočtu s&nbsp;využitím progress baru. Jediná změna, kterou bylo nutné
realizovat, je ve zdrojovém kódu zvýrazněna:</p>

<pre>
from rich.progress import track
&nbsp;
<i># originální kód lze nalézt na adrese:</i>
<i># http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Using_array_lookup</i>
def primes2(limit):
    <i>"""Výpočet seznamu prvočísel až do zadaného limitu."""</i>
    is_prime = [False] * 2 + [True] * (limit - 1)
    for n in <strong>track(</strong>range(int(limit ** 0.5 + 1.5))<strong>)</strong>:
        if is_prime[n]:
            for i in range(n * n, limit + 1, n):
                is_prime[i] = False
    return [i for i, prime in enumerate(is_prime) if prime]
&nbsp;
&nbsp;
print(primes2(100))
</pre>

*** image ***
<p><i>Obrázek 14: Výpočet prvočísel s&nbsp;postupnou změnou progress baru.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Využití instance třídy <strong>Progress</strong> ve funkci context manageru</h2>

<p>Třída <strong>Progress</strong>, resp.&nbsp;přesněji řečeno instance této třídy, lze využít i ve funkci context manageru, tedy </p>

<pre>
from rich.progress import Progress
import time
&nbsp;
with Progress() as progress_bars:
&nbsp;
    task1 = progress_bars.add_task("[blue]Task #1...", total=100)
    task2 = progress_bars.add_task("[yellow]Task #2...", total=100)
&nbsp;
    while not progress_bars.finished:
        progress_bars.update(task1, advance=0.3)
        progress_bars.update(task2, advance=0.2)
        time.sleep(0.01)
</pre>

*** image ***
<p><i>Obrázek 15: </i></p>

<p>Podívat se můžeme i na zpomalený &bdquo;progress&ldquo; u většího množství
úloh, zde konkrétně u čtveřice úloh:</p>

<pre>
from rich.progress import Progress
import time
&nbsp;
with Progress() as progress_bars:
&nbsp;
    task1 = progress_bars.add_task("[blue]Task #1...", total=100)
    task2 = progress_bars.add_task("[yellow]Task #2...", total=100)
    task3 = progress_bars.add_task("[red]Task #3...", total=100)
    task4 = progress_bars.add_task("[green]Task #4...", total=100)
&nbsp;
    while not progress_bars.finished:
        progress_bars.update(task1, advance=0.3)
        progress_bars.update(task2, advance=0.2)
        progress_bars.update(task3, advance=0.1)
        progress_bars.update(task4, advance=0.05)
        time.sleep(0.01)
</pre>

*** image ***
<p><i>Obrázek 16: </i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Panely a sloupce</h2>

<p>Poměrně často se setkáme s&nbsp;nutností zobrazit větší množství různých
&bdquo;kartiček&ldquo; (resp.&nbsp;panelů) na ploše terminálu, přičemž ovšem
není dopředu zřejmé, jak široké tyto kartičky budou a především není jasné, jak
široká je vlastně plocha terminálu (zde pochopitelně měřená ve znacích a nikoli
v&nbsp;pixelech). Na druhou stranu ovšem nechceme, aby byly kartičky/panely na
ploše terminálu rozmístěny zcela náhodně; ideální by bylo rozmístění do
dynamicky vytvořených sloupců, přičemž dopředu neznáme počet sloupců ani jejich
šířku. A přesně k&nbsp;tomuto účelu slouží v&nbsp;knihovně Rich třídy
<strong>Panel</strong> a <strong>Columns</strong>, přičemž panely mohou
obsahovat textové objekty a jsou umístěny do sloupců (nicméně sloupce se spíše
podobají konceptu <i>gridu</i> a nikoli tabulkám, protože jejich počet se
dynamicky mění). Podívejme se na jednoduchý demonstrační příklad se třemi
panely:</p>

<pre>
from rich.console import Console
from rich.columns import Columns
from rich.panel import Panel
&nbsp;
&nbsp;
console = Console()
&nbsp;
panel1 = <strong>Panel("První")</strong>
panel2 = <strong>Panel("Druhý")</strong>
panel3 = <strong>Panel("Třetí")</strong>
&nbsp;
columns = <strong>Columns([panel1, panel2, panel3])</strong>
console.print(columns)
</pre>

<p>Zajímavé bude otestovat si chování tohoto skriptu při změně šířky terminálu:</p>

*** image ***
<p><i>Obrázek 17: Zobrazení tří panelů na dostatečně širokém terminálu.</i></p>

*** image ***
<p><i>Obrázek 18: Zobrazení tří panelů na úzkém terminálu.</i></p>

*** image ***
<p><i>Obrázek 19: Zobrazení tří panelů na ještě užším terminálu.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Změna stylu (barvy) textu umístěných do jednotlivých panelů, víceřádkový text</h2>

<p>Do panelů, které jsou rozmisťovány do automaticky vypočtených sloupců, lze
umístit víceřádkový text &ndash; postačuje použít řídicí znak
<strong>\n</strong>. Navíc je možné, aby byl tento text obarvený, přičemž barva
(části) textu se zapisuje značkou <strong>[barva]</strong>, což je styl, který
jsme mohli vidět již při práci se stromy v&nbsp;úvodních kapitolách.  Podívejme
se tedy na způsob zápisu několika panelů s&nbsp;popisky barvových modelů (opět
se tedy vracíme k&nbsp;již výše zmíněným demonstračním příkladům):</p>

<pre>
from rich.console import Console
from rich.columns import Columns
from rich.panel import Panel
&nbsp;
&nbsp;
console = Console()
&nbsp;
panel1 = Panel("RGB\n\n[red]Red\n[green]Green\n[blue]Blue")
panel2 = Panel("CMYK\n\n[cyan]Cyan\n[magenta]Magenta\n[yellow]Yellow\n[black]blacK")
panel3 = Panel("YUV")
panel4 = Panel("HSL\n\nHue\nSaturation\nLightness")
panel5 = Panel("HSV\n\nHua\nSaturation\nValue")
&nbsp;
columns = Columns([panel1, panel2, panel3, panel4, panel5])
console.print(columns)
</pre>

<p>Nyní by měl výsledek (pochopitelně na dostatečně širokém terminálu) vypadat
následovně:</p>

*** image ***
<p><i>Obrázek 20: Víceřádkový a obarvený text umístěný do jednotlivých panelů,
které jsou rozmístěny do dynamicky spočtených sloupců.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Automatické rozmístění patnácti panelů v&nbsp;rámci plochy terminálu</h2>

<p>Nepatrnou úpravou příkladu <a href="#k12">z&nbsp;předchozí kapitoly</a>,
konkrétně přidáním operace pro opakování seznamu (viz zvýrazněnou část), si
můžeme otestovat, jak vlastně bude vypadat plocha terminálu po zobrazení
patnácti panelů a nikoli pouze tří panelů:</p>

<pre>
from rich.console import Console
from rich.columns import Columns
from rich.panel import Panel
&nbsp;
&nbsp;
console = Console()
&nbsp;
panel1 = Panel("RGB\n\n[red]Red\n[green]Green\n[blue]Blue")
panel2 = Panel("CMYK\n\n[cyan]Cyan\n[magenta]Magenta\n[yellow]Yellow\n[black]blacK")
panel3 = Panel("YUV")
panel4 = Panel("HSL\n\nHue\nSaturation\nLightness")
panel5 = Panel("HSV\n\nHua\nSaturation\nValue")
&nbsp;
columns = Columns([panel1, panel2, panel3, panel4, panel5]<strong>*5</strong>)
console.print(columns)
</pre>

<p>Opět se podívejme na výsledky získané po spuštění tohoto demonstračního
příkladu na dvou terminálech s&nbsp;rozdílnou velikostí plochy:</p>

*** image ***
<p><i>Obrázek 21: Zobrazení patnácti panelů na širokém terminálu.</i></p>

*** image ***
<p><i>Obrázek 22: Zobrazení patnácti panelů na užším terminálu.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zobrazení jednoduché tabulky</h2>

<p>Poslední užitečnou vlastností knihovny Rich, kterou si dnes alespoň ve
stručnosti popíšeme, je podpora pro zobrazení tabulek. Samotná tabulka je
reprezentována objektem typu <strong>Table</strong> (což asi není příliš
překvapivé). Pro tabulku lze deklarovat titulky a popř.&nbsp;i styly sloupců, a
to metodou <strong>Table.add_column</strong>. Dále lze do tabulky přidávat
jednotlivé řádky metodou <strong>Table.add_row</strong>. Podívejme se nyní na
velmi jednoduchý příklad s&nbsp;tabulkou, která bude mít dva sloupce a čtyři
řádky:</p>

<pre>
from rich.console import Console
from rich.table import Table
&nbsp;
table = <strong>Table(title="Barvové modely")</strong>
&nbsp;
table.add_column("Zkratka")
table.add_column("Význam")
&nbsp;
table.add_row("RGB", "Red Green Blue")
table.add_row("CMYK", "Cyan Magenta Yellow blacK")
table.add_row("HSL", "Hue Saturation Lightness")
table.add_row("HSV", "Hue Saturation Value")
&nbsp;
console = Console()
console.print(table)
</pre>

<p>Výsledkem činnosti tohoto skriptu bude následující tabulka:</p>

*** image ***
<p><i>Obrázek 23: Zobrazení jednoduché tabulky se dvěma sloupci a čtyřmi
řádky.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Formát textu v&nbsp;buňkách tabulky</h2>

<p>Text, který je zapsán do buněk tabulky, je pochopitelně možné různým
způsobem formátovat. Opět se podívejme na způsob použití značek pro specifikaci
barev textu. Povšimněte si, že každá další zapsaná značka ruší (podle
očekávání) význam značky předchozí (není tedy striktně nutné značky
uzavírat):</p>

<pre>
from rich.console import Console
from rich.table import Table
&nbsp;
table = Table(title="Barvové modely")
&nbsp;
table.add_column("Zkratka")
table.add_column("Význam")
table.add_column("Komponenty")
&nbsp;
table.add_row("RGB", "Red Green Blue", "[red]Red [green]Green [blue]Blue")
table.add_row("CMYK", "Cyan Magenta Yellow blacK", "[cyan]Cyan [magenta]Magenta [yellow]Yellow [black]blacK")
table.add_row("HSL", "Hue Saturation Lightness", "")
table.add_row("HSV", "Hue Saturation Value", "")
&nbsp;
console = Console()
console.print(table)
</pre>

<p>Podívejme se na výsledek:</p>

*** image ***
<p><i>Obrázek 24: Zobrazení jednoduché tabulky se třemi sloupci a čtyřmi řádky,
přičemž část textu jsou zobrazeny barevně.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Použití značky <strong>[bold]</strong> a <strong>[/bold]</strong> v&nbsp;buňkách tabulky</h2>

<p>Demonstrační příklad <a href="#k15">z&nbsp;předchozí kapitoly</a> lze
vylepšit takovým způsobem, že se zvýrazní ta písmena, ze kterých se skládá
zkratka barvového modelu. Pro tento účel použijeme značku
<strong>[bold]</strong> a vzhledem k&nbsp;tomu, že budeme chtít zvýraznit vždy
jen jediný znak, budeme muset použít i uzavírací značku
<strong>[/bold]</strong>, tedy použije se prakticky totožný zápis, jaký je
známý z&nbsp;HTML (až na odlišné znaky pro zápis samotných značek):</p>

<pre>
from rich.console import Console
from rich.table import Table
&nbsp;
table = Table(title="Barvové modely")
&nbsp;
table.add_column("Zkratka")
table.add_column("Význam")
table.add_column("Komponenty")
&nbsp;
table.add_row("RGB", "[bold]R[/bold]ed [bold]G[/bold]reen [bold]B[/bold]lue", "[red]Red [green]Green [blue]Blue")
table.add_row("CMYK", "[bold]C[/bold]yan [bold]M[/bold]agenta [bold]Y[/bold]ellow blac[bold]K[/bold]", "[cyan]Cyan [magenta]Magenta [yellow]Yellow [black]blacK")
table.add_row("HSL", "[bold]H[/bold]ue [bold]S[/bold]aturation [bold]L[/bold]ightness", "")
table.add_row("HSV", "[bold]H[/bold]ue [bold]S[/bold]aturation [bold]V[/bold]alue", "")
&nbsp;
console = Console()
console.print(table)
</pre>

<p>Výsledek:</p>

*** image ***
<p><i>Obrázek 25: Zobrazení jednoduché tabulky se třemi sloupci a čtyřmi řádky,
přičemž část textu jsou zobrazeny barevně. Tučně jsou navíc zvýrazněny ty
znaky, z&nbsp;nichž se skládá zkratka názvu barvového modelu.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Zarovnání textu</h2>

<p>V&nbsp;dnešním posledním demonstračním příkladu je ukázán způsob zobrazení
dlouhého odstavce, jehož text se nevejde na jediný řádek. Takový odstavec může
být zarovnán doleva, doprava, na střed (vycentrován) nebo zarovnán na oba
okraje:</p>

<pre>
from rich.console import Console, Text
&nbsp;
paragraph = Text(
    """\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"""
)
&nbsp;
console = Console()
&nbsp;
console.rule("justify='left'")
console.print(paragraph, style="red")
console.print()
&nbsp;
console.rule("justify='center'")
console.print(paragraph, style="green", justify="center")
console.print()
&nbsp;
console.rule("justify='right'")
console.print(paragraph, style="blue", justify="right")
console.print()
&nbsp;
console.rule("justify='full'")
console.print(paragraph, style="magenta", justify="full")
console.print()
</pre>

<p>S&nbsp;tímto výsledkem:</p>

*** image ***
<p><i>Obrázek 26: Odstavec, který je postupně zarovnán doleva, na střed,
doprava a nakonec na oba okraje.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: jména podporovaných barev</h2>

<p>V&nbsp;této příloze jsou vypsána jména všech barev, která je možné použít
v&nbsp;hranatých závorkách pro ovlivnění barvy textu v&nbsp;terminálu
(například uzlu stromu atd.):</p>

<pre>
black
red
green
yellow
blue
magenta
cyan
white
bright_black
bright_red
bright_green
bright_yellow
bright_blue
bright_magenta
bright_cyan
bright_white
grey0
gray0
navy_blue
dark_blue
blue3
blue1
dark_green
deep_sky_blue4
dodger_blue3
dodger_blue2
green4
spring_green4
turquoise4
deep_sky_blue3
dodger_blue1
green3
spring_green3
dark_cyan
light_sea_green
deep_sky_blue2
deep_sky_blue1
spring_green2
cyan3
dark_turquoise
turquoise2
green1
spring_green1
medium_spring_green
cyan2
cyan1
dark_red
deep_pink4
purple4
purple3
blue_violet
orange4
grey37
gray37
medium_purple4
slate_blue3
royal_blue1
chartreuse4
dark_sea_green4
pale_turquoise4
steel_blue
steel_blue3
cornflower_blue
chartreuse3
cadet_blue
sky_blue3
steel_blue1
pale_green3
sea_green3
aquamarine3
medium_turquoise
chartreuse2
sea_green2
sea_green1
aquamarine1
dark_slate_gray2
dark_magenta
dark_violet
purple
light_pink4
plum4
medium_purple3
slate_blue1
yellow4
wheat4
grey53
gray53
light_slate_grey
light_slate_gray
medium_purple
light_slate_blue
dark_olive_green3
dark_sea_green
light_sky_blue3
sky_blue2
dark_sea_green3
dark_slate_gray3
sky_blue1
chartreuse1
light_green
pale_green1
dark_slate_gray1
red3
medium_violet_red
magenta3
dark_orange3
indian_red
hot_pink3
medium_orchid3
medium_orchid
medium_purple2
dark_goldenrod
light_salmon3
rosy_brown
grey63
gray63
medium_purple1
gold3
dark_khaki
navajo_white3
grey69
gray69
light_steel_blue3
light_steel_blue
yellow3
dark_sea_green2
light_cyan3
light_sky_blue1
green_yellow
dark_olive_green2
dark_sea_green1
pale_turquoise1
deep_pink3
magenta2
hot_pink2
orchid
medium_orchid1
orange3
light_pink3
pink3
plum3
violet
light_goldenrod3
tan
misty_rose3
thistle3
plum2
khaki3
light_goldenrod2
light_yellow3
grey84
gray84
light_steel_blue1
yellow2
dark_olive_green1
honeydew2
light_cyan1
red1
deep_pink2
deep_pink1
magenta1
orange_red1
indian_red1
hot_pink
dark_orange
salmon1
light_coral
pale_violet_red1
orchid2
orchid1
orange1
sandy_brown
light_salmon1
light_pink1
pink1
plum1
gold1
navajo_white1
misty_rose1
thistle1
yellow1
light_goldenrod1
khaki1
wheat1
cornsilk1
grey100
gray100
grey3
gray3
grey7
gray7
grey11
gray11
grey15
gray15
grey19
gray19
grey23
gray23
grey27
gray27
grey30
gray30
grey35
gray35
grey39
gray39
grey42
gray42
grey46
gray46
grey50
gray50
grey54
gray54
grey58
gray58
grey62
gray62
grey66
gray66
grey70
gray70
grey74
gray74
grey78
gray78
grey82
gray82
grey85
gray85
grey89
gray89
grey93
gray93
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech <a
href="https://www.root.cz/clanky/tisk-naformatovaneho-a-obarveneho-textu-na-terminal-s-knihovnou-rich/">minule</a>
i dnes popsaných demonstračních příkladů určených pro Python 3 byly uloženy do
Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Jméno souboru</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td> 1</td><td>standard_print.py</td><td>chování standardní funkce <strong>print</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/standard_print.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/standard_print.py</a></td></tr>
<tr><td> 2</td><td>rich_print_1.py</td><td>první způsob importu a volání vylepšené varianty funkce <strong>print</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/rich_print_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/rich_print_1.py</a></td></tr>
<tr><td> 3</td><td>rich_print_2.py</td><td>druhý způsob importu a volání vylepšené varianty funkce <strong>print</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/rich_print_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/rich_print_2.py</a></td></tr>
<tr><td> 4</td><td>rich_print_3.py</td><td>třetí způsob importu a volání vylepšené varianty funkce <strong>print</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/rich_print_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/rich_print_3.py</a></td></tr>
<tr><td> 5</td><td>console_log1.py</td><td>zobrazení zvolené hodnoty na konzoli</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_log1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_log1.py</a></td></tr>
<tr><td> 6</td><td>console_log2.py</td><td>zobrazení zvolené hodnoty i lokálních proměnných na konzoli</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_log2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_log2.py</a></td></tr>
<tr><td> 7</td><td>console_log3.py</td><td>způsob práce s&nbsp;časovým razítkem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_log3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_log3.py</a></td></tr>
<tr><td> 8</td><td>console_json1.py</td><td>tisk hodnot na konzoli ve formátu JSON</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_json1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_json1.py</a></td></tr>
<tr><td> 9</td><td>console_json2.py</td><td>tisk všech lokálních proměnných na konzoli ve formátu JSON</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_json2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/console_json2.py</a></td></tr>
<tr><td>10</td><td>inspect1.py</td><td>funkce <strong>inspect</strong> a třída <strong>list</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect1.py</a></td></tr>
<tr><td>11</td><td>inspect2.py</td><td>funkce <strong>inspect</strong>; tisk všech viditelných metod třídy/objektu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect2.py</a></td></tr>
<tr><td>12</td><td>inspect3.py</td><td>funkce <strong>inspect</strong>; tisk všech metod i atributů třídy/objektu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect3.py</a></td></tr>
<tr><td>13</td><td>inspect4.py</td><td>funkce <strong>inspect</strong>; tisk instance třídy <strong>Queue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect4.py</a></td></tr>
<tr><td>14</td><td>inspect5.py</td><td>funkce <strong>inspect</strong>; tisk všech metod instance třídy <strong>Queue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect5.py</a></td></tr>
<tr><td>15</td><td>inspect6.py</td><td>funkce <strong>inspect</strong>; tisk všech privátních metod instance třídy <strong>Queue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect6.py</a></td></tr>
<tr><td>16</td><td>inspect7.py</td><td>funkce <strong>inspect</strong>; tisk všech atributů i metod instance třídy <strong>Queue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect7.py</a></td></tr>
<tr><td>17</td><td>queue_print.py</td><td>tisk informací o frontě standardní funkcí <strong>print</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/queue_print.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/queue_print.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>18</td><td>inspect_tree1.py</td><td>veřejné atributy a metody třídy <strong>Tree</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect_tree1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect_tree1.py</a></td></tr>
<tr><td>19</td><td>inspect_tree2.py</td><td>veřejné atributy a metody instance třídy <strong>Tree</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect_tree2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect_tree2.py</a></td></tr>
<tr><td>20</td><td>inspect_tree3.py</td><td>uzel stromu je opět instancí třídy <strong>Tree</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect_tree3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/inspect_tree3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>tree1.py</td><td>konstrukce a zobrazení stromové struktury</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/tree1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/tree1.py</a></td></tr>
<tr><td>22</td><td>tree2.py</td><td>strom, jehož uzly obsahují poduzly</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/tree2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/tree2.py</a></td></tr>
<tr><td>23</td><td>tree3.py</td><td>rozvětvený strom</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/tree3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/tree3.py</a></td></tr>
<tr><td>24</td><td>tree4.py</td><td>nastavení barev jednotlivých uzlů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/tree4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/tree4.py</a></td></tr>
<tr><td>25</td><td>tree5.py</td><td>nastavení barev jednotlivých uzlů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/tree5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/tree5.py</a></td></tr>
<tr><td>26</td><td>tree6.py</td><td>nastavení vlastností jednotlivých uzlů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/tree6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/tree6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>27</td><td>progress_bar1.py</td><td>progress bar (zobrazení průběhu výpočtu)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/progress_bar1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/progress_bar1.py</a></td></tr>
<tr><td>28</td><td>progress_bar2.py</td><td>progress bar (zobrazení průběhu výpočtu prvočísel)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/progress_bar2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/progress_bar2.py</a></td></tr>
<tr><td>29</td><td>progress_bar3.py</td><td>několik progress barů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/progress_bar3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/progress_bar3.py</a></td></tr>
<tr><td>30</td><td>progress_bar4.py</td><td>několik progress barů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/progress_bar4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/progress_bar4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>31</td><td>columns_panels_1.py</td><td>pět panelů umístěných do sloupců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/columns_panels_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/columns_panels_1.py</a></td></tr>
<tr><td>32</td><td>columns_panels_2.py</td><td>několik panelů s&nbsp;naformátovaným textem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/columns_panels_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/columns_panels_2.py</a></td></tr>
<tr><td>33</td><td>columns_panels_3.py</td><td>větší množství panelů umístěných do sloupců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/columns_panels_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/columns_panels_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>34</td><td>table1.py</td><td>jednoduchá tabulka se dvěma sloupci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/table1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/table1.py</a></td></tr>
<tr><td>35</td><td>table2.py</td><td>tabulka se třemi sloupci, text se specifikací barvy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/table2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/table2.py</a></td></tr>
<tr><td>36</td><td>table3.py</td><td>použití značky [bold] v&nbsp;buňkách tabulky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/table3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/table3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>37</td><td>text_justify.py</td><td>zarovnání textu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/rich/text_justify.py">https://github.com/tisnik/most-popular-python-libs/blob/master/rich/text_justify.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Repositář s&nbsp;knihovnou Rich<br />
<a href="https://github.com/Textualize/rich">https://github.com/Textualize/rich</a>
</li>

<li>Knihovna Rich na PyPi<br />
<a href="https://pypi.org/project/rich/">https://pypi.org/project/rich/</a>
</li>

<li>How to Use the Rich Library with Python<br />
<a href="https://www.freecodecamp.org/news/use-the-rich-library-in-python/">https://www.freecodecamp.org/news/use-the-rich-library-in-python/</a>
</li>

<li>Introduction (Rich, Readthedocs)<br />
<a href="https://rich.readthedocs.io/en/stable/introduction.html">https://rich.readthedocs.io/en/stable/introduction.html</a>
</li>

<li>Awesome Python<br />
<a href="https://awesome-python.com/">https://awesome-python.com/</a>
</li>

<li>Python Awesome<br />
<a href="https://pythonawesome.com/about/">https://pythonawesome.com/about/</a>
</li>

<li>Python Rich Library<br />
<a href="https://vegibit.com/python-rich-library/">https://vegibit.com/python-rich-library/</a>
</li>

<li>Python’s rich library &ndash; a tutorial<br />
<a href="https://softbranchdevelopers.com/pythons-rich-library-a-tutorial/">https://softbranchdevelopers.com/pythons-rich-library-a-tutorial/</a>
</li>

<li>blessed na PyPi<br />
<a href="https://pypi.org/project/blessed/">https://pypi.org/project/blessed/</a>
</li>

<li>blessed na GitHubu<br />
<a href="https://github.com/jquast/blessed">https://github.com/jquast/blessed</a>
</li>

<li>Blessed documentation!<br />
<a href="https://blessed.readthedocs.io/en/latest/">https://blessed.readthedocs.io/en/latest/</a>
</li>

<li>termbox-go na GitHubu<br />
<a href="https://github.com/nsf/termbox-go">https://github.com/nsf/termbox-go</a>
</li>

<li>termui na GitHubu<br />
<a href="https://github.com/gizak/termui">https://github.com/gizak/termui</a>
</li>

<li>blessed na GitHubu<br />
<a href="https://github.com/chjj/blessed">https://github.com/chjj/blessed</a>
</li>

<li>blessed-contrib na GitHubu<br />
<a href="https://github.com/yaronn/blessed-contrib">https://github.com/yaronn/blessed-contrib</a>
</li>

<li>tui-rs na GitHubu<br />
<a href="https://github.com/fdehau/tui-rs">https://github.com/fdehau/tui-rs</a>
</li>

<li>Tree structure<br />
<a href="https://en.wikipedia.org/wiki/Tree_structure">https://en.wikipedia.org/wiki/Tree_structure</a>
</li>

<li>Directory structure<br />
<a href="https://en.wikipedia.org/wiki/Directory_structure">https://en.wikipedia.org/wiki/Directory_structure</a>
</li>

<li>Decision tree<br />
<a href="https://en.wikipedia.org/wiki/Decision_tree">https://en.wikipedia.org/wiki/Decision_tree</a>
</li>

<li>Lightweight markup language<br />
<a href="https://en.wikipedia.org/wiki/Lightweight_markup_language">https://en.wikipedia.org/wiki/Lightweight_markup_language</a>
</li>

<li>Text box<br />
<a href="https://en.wikipedia.org/wiki/Text_box">https://en.wikipedia.org/wiki/Text_box</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>
