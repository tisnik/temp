<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Použití knihovny MoviePy při úpravách videa a při tvorbě animovaných vizualizací</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Použití knihovny MoviePy při úpravách videa a při tvorbě animovaných vizualizací</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve čtvrtém článku o knihovně MoviePy si ukážeme, jakými způsoby je možné s&nbsp;využitím této knihovny programově upravovat videa, a to včetně aplikace filtrů nebo přímé modifikace pixelů. Ve druhé části článku se budeme zabývat tvorbou animovaných vizualizací.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Použití knihovny MoviePy při úpravách videa a při tvorbě animovaných vizualizací</a></p>
<p><a href="#k02">2. Princip činnosti MoviePy při zpracování existujícího videa</a></p>
<p><a href="#k03">3. Načtení videa a jeho následné uložení do odlišného formátu</a></p>
<p><a href="#k04">4. Specifikace bitové rychlosti výsledného videa</a></p>
<p><a href="#k05">5. Změna rychlosti vytvářeného videa</a></p>
<p><a href="#k06">6. Střih videa (výběr snímků na časové ose)</a></p>
<p><a href="#k07">7. Filtry aplikované na jednotlivé snímky</a></p>
<p><a href="#k08">8. Změna rozlišení výsledného videa</a></p>
<p><a href="#k09">*** 9. Modifikace kontrastu</a></p>
<p><a href="#k10">10. Nastavení okrajů okolo videa</a></p>
<p><a href="#k11">*** 11. Aplikace masky na všechny snímky videa</a></p>
<p><a href="#k12">*** 12. Jednoduchý filtr pro inverzi všech snímků</a></p>
<p><a href="#k13">*** 13. Rozmazání videa v&nbsp;čase (motion blur)</a></p>
<p><a href="#k14">*** 14. Rozmazání s&nbsp;využitím vzdálenějších snímků</a></p>
<p><a href="#k15">*** 15. Uložení videa s&nbsp;menším počtem snímků a nižším rozlišením do animovaného GIFu</a></p>
<p><a href="#k16">*** 16. Kompozice typu &bdquo;obraz v&nbsp;obraze&ldquo;</a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositáře s&nbsp;demonstračními příklady a vygenerovanými videi</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Použití knihovny MoviePy při úpravách videa a při tvorbě animovaných vizualizací</h2>

<p>Na předchozí tři části [<a
href="https://www.root.cz/clanky/programova-tvorba-a-nelinearni-editace-videa-s-vyuzitim-knihovny-moviepy/">1</a>]
[<a
href="https://www.root.cz/clanky/pouziti-moviepy-spolecne-s-matplotlibem-pro-tvorbu-animovanych-grafu/">2</a>]
[<a
href="https://www.root.cz/clanky/pouziti-moviepy-spolecne-matplotlibem-pro-tvorbu-animovanych-grafu-dokonceni/">3</a>]
krátkého seriálu o užitečné knihovně <i>MoviePy</i> dnes navážeme. Řekneme si
totiž, jakými různými způsoby je možné upravovat již existující videa.
S&nbsp;videi lze provádět různé &bdquo;lineární&ldquo; editační operace,
například převody do odlišného formátu (s&nbsp;použitím jiného kodeku),
modifikaci bitové rychlosti, změnu rozměrů snímků (tím pádem i rozlišení
výsledného videa), aplikaci různých filtrů na snímky, aplikaci mezisnímkových
filtrů (<i>motion blur</i>), použití masky apod. Kromě toho jsou však
podporovány i různé operace nelineární, zejména pak kombinace několika videí
(spojení, proložení snímků, obraz v&nbsp;obrazu) apod.</p>

<p>Ve druhé části dnešního článku si ukážeme, jakým způsobem je možné
v&nbsp;případě potřeby vytvořit video obsahující jednoduchou animovanou
vizualizaci. Pro jednoduchost se bude jednat o mapu, na které jsou
v&nbsp;grafické podobě zvýrazněny naměřené veličiny (v&nbsp;našem konkrétním
případě se bude jednat o naměřenou a interpolovanou půdní vlhkost, která je
dnes poměrně ostře sledována). V&nbsp;tomto případě se tedy knihovna
<i>MoviePy</i> použije až v&nbsp;závěrečné fázi celého zpracování dat &ndash;
od jejich měření, přes interpretaci (vizualizace na mapě) až po výslednou
animaci, která zvýrazní změnu v&nbsp;čase. Ovšem díky tomu, že jsou jednotlivé
snímky, ze kterých se výsledné video složí, tvořeny poli (přesněji řečeno
datovými strukturami typu <strong>ndarray</strong>), lze i v&nbsp;závěrečné
fázi do map různým způsobem zasahovat a provádět v&nbsp;nich různé více či méně
zásadní modifikace.</p>

<p>Pro testy filtrace videa bude použita následující volně dostupné
odpočítávání získané ze starého filmu:</p>

<a href="https://tisnik.github.io/moviepy-videos/videoprocessing_input_video.html">https://tisnik.github.io/moviepy-videos/videoprocessing_input_video.html</a>



<p><a name="k02"></a></p>
<h2 id="k02">2. Princip činnosti MoviePy při zpracování existujícího videa</h2>

<p>Nejprve se budeme věnovat lineární a nelineární editaci existujícího videa,
tj.&nbsp;souborů obsahujících video zakódované nějakým podporovaným
<i>kodekem</i> uloženým do zvoleného <i>kontejneru</i> (příkladem bude
kombinace Ogg/Theora). Knihovna MoviePy v&nbsp;tomto případě pracuje přibližně
následujícím způsobem:</p>

<ol>

<li>Vstupní soubor je postupně zpracováván známým externím nástrojem
pojmenovaným <strong>ffmpeg</strong>. Výstupem je postupně vytvářená sekvence
jednotlivých snímků popř.&nbsp;i audiostopy (ovšem dnes se budeme zabývat pouze
zpracováním jednotlivých snímků, i když vstupní video obsahuje i zvukovou
stopu).</li>

<li>Jednotlivé snímky jsou v&nbsp;operační paměti počítače reprezentovány
datovou strukturou typu <strong>ndarray</strong> <a
href="https://www.root.cz/clanky/programova-tvorba-a-nelinearni-editace-videa-s-vyuzitim-knihovny-moviepy/#k07">z&nbsp;knihovny
Numpy</a>. Díky tomu je možné se snímky pracovat na nejnižší úrovni modifikací
jednotlivých pixelů.</li>

<li>Na snímky nebo na jejich sekvenci lze v&nbsp;případě potřeby aplikovat
různé filtry, které si popíšeme v&nbsp;dalších kapitolách.</li>

<li>Snímky se na výstupu opět spojují do sekvence, ze které se zvoleným kodekem
generuje výsledný soubor s&nbsp;videem. Pro tuto činnost se opět volá externí
nástroj <strong>ffmpeg</strong>.</li>

</ol>

<p>Ve skutečnosti však může být situace nepatrně složitější, protože současně
je možné zpracovávat větší množství videí na vstupu &ndash; tato videa lze
kombinovat, spojovat, vytvořit snímky ve snímku atd. I s&nbsp;touto zajímavou a
užitečnou problematikou se setkáme v&nbsp;navazujících kapitolách.</p>

<p>Příkladem může být použití třídy <strong>CompositeVideoClips</strong>
zajišťující kompozici více vstupních videí:</p>

<ol>

<li>Vstupní soubory jsou postupně zpracovávány externím nástrojem
<strong>ffmpeg</strong>, podobně jako v&nbsp;případě, kdy je vstupem jediné
video. Výstupem je tolik sekvencí jednotlivých snímků, kolik souborů se
zpracovává.</li>

<li>Na snímky nebo na jejich sekvenci lze aplikovat různé filtry, z&nbsp;nichž
některé si popíšeme v&nbsp;dalších kapitolách.</li>

<li>Snímky z&nbsp;jednotlivých sekvencí jsou zkombinovány dohromady. Při této
činnosti se typicky používají různé masky (bitové mapy popř.&nbsp;pole
s&nbsp;hodnotami od 0.0 do 1.0). Výsledkem kombinace je jediná sekvence
výsledných snímků.</li>

<li>Snímky se na výstupu opět spojují do sekvence, ze které se zvoleným kodekem
generuje výsledný soubor s&nbsp;videem. Pro tuto činnost se opět volá externí
nástroj <strong>ffmpeg</strong> (tento krok se nijak neliší od zpracování
jediného videa).</li>

</ol>



<p><a name="k03"></a></p>
<h2 id="k03">3. Načtení videa a jeho následné uložení do odlišného formátu</h2>

<p>První příklad, který si v&nbsp;dnešním článku ukážeme, bude velmi
jednoduchý. Popíšeme si v&nbsp;něm základní použití třídy
<strong>VideoFileClip</strong>, která reprezentuje video načítané
z&nbsp;externího souboru a dekódované do operační paměti paměti ve formě
jednotlivých snímků. V&nbsp;konstruktoru této třídy je nutné specifikovat jméno
souboru s&nbsp;videem a popř.&nbsp;i další nepovinné parametry, zejména
pak:</p>

<table>
<tr><th>Parametr</th><th>Význam</th></tr>
<tr><td>has_mask</td><td>určuje, zda se video načte i s&nbsp;maskou (většinou ovšem není maska specifikována, typicky se jedná o specilitu MoviePy)</td></tr>
<tr><td>audio</td><td>povolení či zákaz importu zvukových stop (samozřejmě pokud existují)</td></tr>
<tr><td>resize_algorithm</td><td>specifikace algoritmu použitého při převzorkování snímků (volba mezi větší kvalitou nebo rychlostí převodu a výslednou velikostí videa)</td></tr>
<tr><td>fps_source</td><td>volba, která metadata obsahují informaci o počtu snímků za sekundu</td></tr>
</table>

<p>Třída <strong>VideoFileClip</strong> obsahuje mj.&nbsp;i metodu pojmenovanou
<strong>write_videofile()</strong>, která slouží pro export videa do zvoleného
souboru s&nbsp;využitím kodeku a kontejneru, který je buď přesně specifikovaný,
nebo si ho knihovna sama dokáže odvodit z&nbsp;koncovky. V&nbsp;našem případě
bude postačovat odvození z&nbsp;koncovky, protože &bdquo;.ogg&ldquo; je
jednoznačně mapováno na kontejner/kodek <a
href="https://en.wikipedia.org/wiki/Theora">Ogg/Theora</a>. <a
href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/01_convert_mp4_to_ogv.py">Příklad</a>
tedy provede dvě činnosti &ndash; načte video ve formátu MPEG-4 a uloží ho do
formátu Ogg/Theora (samozřejmě je nutné uvažovat nad ztrátou kvality, která
dekódovací-kódovací proces provází!):</p>

<pre>
from moviepy.editor import VideoFileClip
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False)
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
clip.write_videofile('01_output_normal.ogv')
</pre>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti je možné stejné
funkcionality dosáhnout i přímým zavoláním nástroje <strong>ffmpeg</strong>,
který je interně knihovnou MoviePy používán.</div></p>

<p>Výsledné video vytvořené tímto příkladem naleznete na adrese:</p>

<a href="https://tisnik.github.io/moviepy-videos/videoprocessing_01_convert_mp4_to_ogv.html">https://tisnik.github.io/moviepy-videos/videoprocessing_01_convert_mp4_to_ogv.html</a>



<p><a name="k04"></a></p>
<h2 id="k04">4. Specifikace bitové rychlosti výsledného videa</h2>

<p>Při exportu videa do nového souboru se zvoleným kontejnerem a kodekem je
možné specifikovat i mezní bitovou rychlost (<i>bitrate</i>), která samozřejmě
ovlivňuje jak kvalitu výsledného videa, tak i jeho celkovou velikost a
požadavky na rychlost síťového připojení v&nbsp;případě, že video bude umístěno
například na Youtube. Čím nižší bude specifikovaná hodnota <i>bitrate</i>, tím
horší bude kvalita výsledného videa a naopak (i když vztah bitová
rychlost:kvalita není lineární). Podívejme se na příklad, v&nbsp;němž zvýšíme
bitovou rychlost na cca 700000 bitů za sekundu (<i>bps</i>), což je více, než
implicitní hodnota (proto bylo předchozí video tak nekvalitní):</p>

<pre>
from moviepy.editor import VideoFileClip
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False)
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
clip.write_videofile('02_output_better_bitrate.ogv', bitrate='700000')
</pre>

<p>Poznámka: kvalita výsledného videa je samozřejmě omezena kvalitou videa
vstupního, neboli jak říkají (nejenom) lidé z&nbsp;IT: &bdquo;garbage in,
garbage out&ldquo;.</p>

<p>Výsledné video vytvořené tímto příkladem naleznete na adrese:</p>

<a href="https://tisnik.github.io/moviepy-videos/videoprocessing_02_convert_change_bitrate.html">https://tisnik.github.io/moviepy-videos/videoprocessing_02_convert_change_bitrate.html</a>



<p><a name="k05"></a></p>
<h2 id="k05">5. Změna rychlosti vytvářeného videa</h2>

<p>V&nbsp;některých případech je nutné video zpomalit nebo naopak zrychlit. Zde
se již dostáváme k&nbsp;jednomu z&nbsp;filtrů, které jsou v&nbsp;knihovně
MoviePy uživatelům-programátorům nabízeny. Tento filtr se jmenuje
<strong>speedx</strong> a lze ho volat jako metodu objektu třídy
<strong>VideoFileClip</strong>, které se předá reálné číslo představující
zrychlení (pokud &gt; 1) nebo naopak zpomalení (v&nbsp;případě, že &lt; 1).
Výsledkem tohoto filtru bude nové video (obecně třída
<strong>VideoClip</strong>), se kterým je možné provádět naprosto stejné
operace, jako s&nbsp;jakýmkoli jiným videem.</p>

<pre>
from moviepy.editor import VideoFileClip
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False)
&nbsp;
<i># novy objekt reprezentujici zrychleny video klip</i>
faster_clip = clip.speedx(1.5)
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
faster_clip.write_videofile('03_output_faster_clip.ogv', bitrate='700000')
</pre>

<p>Výsledné video vytvořené tímto příkladem naleznete na adrese:</p>

<a href="https://tisnik.github.io/moviepy-videos/videoprocessing_03_convert_speedup.html">https://tisnik.github.io/moviepy-videos/videoprocessing_03_convert_speedup.html</a>



<p><a name="k06"></a></p>
<h2 id="k06">6. Střih videa (výběr snímků na časové ose)</h2>

<p>Poměrně často se setkáme s&nbsp;požadavkem, aby výsledné video obsahovalo
pouze některé sekvence z&nbsp;videa původního (například se odstraňují titulky
atd.). I tento požadavek samozřejmě knihovna MoviePy dokáže splnit, a to
konkrétně díky existenci filtru nazvaného <strong>subclip</strong>, kterému se
předá čas prvního a posledního snímku z&nbsp;požadované sekvence. Výsledkem
této operace je nové video, takže je snadné si postupně vytvořit libovolné
množství takových sekvencí a ty posléze spojit do výsledného videa
(popř.&nbsp;mezi ně vložit další efekty nebo jiná videa). Opět se podívejme na
úplný kód tohoto jednoduchého příkladu:</p>

<pre>
from moviepy.editor import VideoFileClip
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False)
&nbsp;
<i># novy objekt reprezentujici video klip od 5 do 10 sekundy</i>
sub_clip = clip.subclip(5.0, 10.0)
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
sub_clip.write_videofile('04_output_subclip.ogv', bitrate='700000')
</pre>

<p>Výsledné video vytvořené tímto příkladem naleznete na adrese:</p>

<a href="https://tisnik.github.io/moviepy-videos/videoprocessing_04_use_subclip.html">https://tisnik.github.io/moviepy-videos/videoprocessing_04_use_subclip.html</a>



<p><a name="k07"></a></p>
<h2 id="k07">7. Filtry aplikované na jednotlivé snímky</h2>

<p>V&nbsp;následujících pěti kapitolách si ukážeme příklady použití některých
filtrů, které jsou postupně aplikovány na jednotlivé snímky. Do této skupiny
patří především klasické filtry určené pro úpravu rastrových obrazů, změnu
velikosti (zmenšení, zvětšení) snímků, aplikaci masky, přidání okrajů ke
snímkům (což může být poměrně užitečné, jak uvidíme dále), otočení snímků apod.
Speciálním případem je pak filtr typu <i>motion blur</i>, který dokáže
vypočítat průměr z&nbsp;několika snímků zdrojového videa. Tento filtr použijeme
k&nbsp;vytvoření dvou efektů popsaných v&nbsp;kapitole <a href="#k13">13</a> a
<a href="#k14">14</a>.</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Změna rozlišení výsledného videa</h2>

<p>Dalším filtrem, který se ovšem bude volat poněkud odlišným způsobem, je
filtr určený pro změnu rozlišení jednotlivých snímků a tím pádem i pro změnu
rozlišení celého videa. Příslušný filtr se jmenuje <strong>resize</strong> a
předává se mu relativní změna velikosti (1.5 odpovídá 150%, 0.25 pak 1/4).
Tento filtr se volá přes univerzální metodu <strong>VideoClip.fx()</strong>,
které se předá jak funkce realizující filtr, tak i její parametry. Výsledkem je
opět nový video klip, podobně jako ve všech předchozích případech.</p>

<p>Zvětšení videa na 150%:</p>

<pre>
from moviepy.editor import VideoFileClip
from moviepy.video.fx.all import *
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False)
&nbsp;
<i># novy klip predstavujici video zvetsene na 150% puvodni velikosti</i>
resized_clip = clip.fx(resize, 1.50)
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
resized_clip.write_videofile('05_output_larger.ogv', bitrate='700000')
</pre>

<p>Výsledné video vytvořené tímto příkladem naleznete na adrese:</p>

<a href="https://tisnik.github.io/moviepy-videos/videoprocessing_05_resize_to_larger.html">https://tisnik.github.io/moviepy-videos/videoprocessing_05_resize_to_larger.html</a>

<p>Zmenšení videa na pouhou jednu čtvrtinu původní velikosti:</p>

<pre>
from moviepy.editor import VideoFileClip
from moviepy.video.fx.all import *
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False)
&nbsp;
<i># novy klip predstavujici video zmensene na 1/4 puvodni velikosti</i>
resized_clip = clip.fx(resize, 0.25)
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
resized_clip.write_videofile('06_output_smaller.ogv', bitrate='700000')
</pre>

<p>Výsledné video vytvořené tímto příkladem naleznete na adrese:</p>

<a href="https://tisnik.github.io/moviepy-videos/videoprocessing_06_resize_to_smaller.html">https://tisnik.github.io/moviepy-videos/videoprocessing_06_resize_to_smaller.html</a>



<p><a name="k09"></a></p>
<h2 id="k09">9. Modifikace kontrastu</h2>

<pre>
from moviepy.editor import VideoFileClip
from moviepy.video.fx.all import *
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False)
&nbsp;
<i># velmi primitivni "kolorizace"</i>
recolored_clip = clip.fx(colorx, 2.50)
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
recolored_clip.write_videofile('06_output_recolored.ogv', bitrate='700000')
</pre>

<p>Výsledné video vytvořené tímto příkladem naleznete na adrese:</p>

<a href="https://tisnik.github.io/moviepy-videos/videoprocessing_07_colorize.html">https://tisnik.github.io/moviepy-videos/videoprocessing_07_colorize.html</a>



<p><a name="k10"></a></p>
<h2 id="k10">10. Nastavení okrajů okolo videa</h2>

<p>Poměrně užitečným filtrem, který má všestranné využití, je filtr určený pro
vytvoření okraje okolo jednotlivých snímků. Tento filtr se jmenuje
<strong>margin</strong> a předává se mu požadovaná šířka okraje zadaná
v&nbsp;pixelech. Výsledkem aplikace filtru je opět nové video, takže lze zápis
provést na jediném řádku; ihned za volání konstruktoru
<strong>VideoFileClip</strong> (původní video ovšem již nebudeme mít
k&nbsp;dispozici):</p>

<pre>
from moviepy.editor import VideoFileClip
from moviepy.video.fx.all import *
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False).margin(20)
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
clip.write_videofile('08_output_with_margin.ogv', bitrate='700000')
</pre>

<p>Výsledné video vytvořené tímto příkladem naleznete na adrese:</p>

<a href="https://tisnik.github.io/moviepy-videos/videoprocessing_08_margin.html">https://tisnik.github.io/moviepy-videos/videoprocessing_08_margin.html</a>



<p><a name="k11"></a></p>
<h2 id="k11">11. Aplikace masky na všechny snímky videa</h2>

<pre>
from moviepy.editor import ImageClip, VideoFileClip, CompositeVideoClip
from moviepy.video.fx.all import *
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False)
&nbsp;
<i># nacteni masky</i>
mask = ImageClip('mask.png', ismask=True)
&nbsp;
<i># aplikace masky</i>
final = CompositeVideoClip([clip.set_mask(mask)])
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
final.write_videofile('09_output_masked.ogv', bitrate='600000')
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Jednoduchý filtr pro inverzi všech snímků</h2>

<pre>
from moviepy.editor import ImageClip, VideoFileClip, CompositeVideoClip
from moviepy.video.fx.all import *
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False)
&nbsp;
<i># inverzni video</i>
inversed_clip = clip.fx(invert_colors)
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
inversed_clip.write_videofile('10_inverse_video.ogv', bitrate='600000')
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Rozmazání videa v&nbsp;čase (motion blur)</h2>

<pre>
from moviepy.editor import ImageClip, VideoFileClip, CompositeVideoClip
from moviepy.video.fx.all import *
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False)
&nbsp;
<i># aplikace rozmazani pohybem</i>
blurred_clip = clip.fx(supersample, 0.25, 10)
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
blurred_clip.write_videofile('11_motion_blur.ogv', bitrate='600000')
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Rozmazání s&nbsp;využitím vzdálenějších snímků</h2>

<pre>
from moviepy.editor import ImageClip, VideoFileClip, CompositeVideoClip
from moviepy.video.fx.all import *
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False)
&nbsp;
<i># aplikace rozmazani pohybem</i>
blurred_clip = clip.fx(supersample, 1, 5)
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
blurred_clip.write_videofile('12_motion_blur.ogv', bitrate='600000')
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Uložení videa s&nbsp;menším počtem snímků a nižším rozlišením do animovaného GIFu</h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Kompozice typu &bdquo;obraz v&nbsp;obraze&ldquo;</h2>

<pre>
from moviepy.editor import ImageClip, VideoFileClip, CompositeVideoClip
from moviepy.editor import clips_array
from moviepy.video.fx.all import *
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False)
&nbsp;
<i># vytvoření pole 2&times;2 s&nbsp;video klipy</i>
final_clip = clips_array([[clip, clip],
                          [clip, clip]])
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
final_clip.write_videofile('13_clip_array.ogv', bitrate='600000')
</pre>

<pre>
from moviepy.editor import ImageClip, VideoFileClip, CompositeVideoClip
from moviepy.editor import clips_array
from moviepy.video.fx.all import *
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False)
&nbsp;
<i># načtení masky</i>
mask = ImageClip('mask.png', ismask=True)
&nbsp;
<i># aplikace masky</i>
clip2 = CompositeVideoClip([clip.set_mask(mask)])
&nbsp;
<i># aplikace rozmazání pohybem</i>
clip3 = clip.fx(supersample, 0.25, 10)
&nbsp;
<i># aplikace rozmazání pohybem</i>
clip4 = clip.fx(supersample, 1, 5)
&nbsp;
<i># vytvoření pole 2&times;2 s&nbsp;video klipy</i>
final_clip = clips_array([[clip, clip2],
                          [clip3, clip4]])
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
final_clip.write_videofile('14_clip_array.ogv', bitrate='800000')
</pre>

<pre>
from moviepy.editor import ImageClip, VideoFileClip, CompositeVideoClip
from moviepy.editor import clips_array
from moviepy.video.fx.all import *
&nbsp;
<i># načtení video klipu uloženého v kontejneru MPEG-4</i>
clip = VideoFileClip('input_video.mp4', audio=False).margin(10)
&nbsp;
<i># načtení masky</i>
mask = ImageClip('mask.png', ismask=True)
&nbsp;
<i># aplikace masky</i>
clip2 = CompositeVideoClip([clip.set_mask(mask)])
&nbsp;
<i># aplikace rozmazání pohybem</i>
clip3 = clip.fx(supersample, 0.25, 10)
&nbsp;
<i># aplikace rozmazání pohybem</i>
clip4 = clip.fx(supersample, 1, 5)
&nbsp;
<i># vytvoření pole 2&times;2 s&nbsp;video klipy</i>
final_clip = clips_array([[clip, clip2],
                          [clip3, clip4]])
&nbsp;
<i># uložení video klipu do jiného souboru ve formátu Ogg/Theora</i>
final_clip.write_videofile('15_clip_array_with_margin.ogv', bitrate='800000')
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositáře s&nbsp;demonstračními příklady a vygenerovanými videi</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
Python 3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/moviepy-examples">https://github.com/tisnik/moviepy-examples</a>
(stále na GitHubu :-). V&nbsp;případě, že nebudete chtít klonovat celý
repositář (ten je ovšem stále velmi malý, stále doslova několik kilobajtů),
můžete namísto toho použít odkazy na jednotlivé příklady, které naleznete
v&nbsp;následující tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Popis</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_convert_mp4_to_ogv.py</td><td>konverze mezi MPEG-4 a Ogg/Theora</td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/01_convert_mp4_to_ogv.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/01_convert_mp4_to_ogv.py</a></td></tr>
<tr><td> 2</td><td>02_convert_change_bitrate.py</td><td>konverze se změnou bitové rychlosti</td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/02_convert_change_bitrate.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/02_convert_change_bitrate.py</a></td></tr>
<tr><td> 3</td><td>03_convert_speedup.py</td><td>změna rychlosti přehrávání videa</td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/03_convert_speedup.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/03_convert_speedup.py</a></td></tr>
<tr><td> 4</td><td>04_use_subclip.py</td><td>klasický střih videa</td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/04_use_subclip.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/04_use_subclip.py</a></td></tr>
<tr><td> 5</td><td>05_resize_to_larger.py</td><td>změna velikosti snímků (zde jejich zvětšení)</td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/05_resize_to_larger.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/05_resize_to_larger.py</a></td></tr>
<tr><td> 6</td><td>06_resize_to_smaller.py</td><td>změna velikosti snímků (zde jejich zmenšení)</td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/06_resize_to_smaller.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/06_resize_to_smaller.py</a></td></tr>
<tr><td> 7</td><td>07_colorize.py</td><td>pokus o jednoduchou &bdquo;kolorizaci&ldquo; videa</td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/07_colorize.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/07_colorize.py</a></td></tr>
<tr><td> 8</td><td>08_margin.py</td><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/08_margin.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/08_margin.py</a></td></tr>
<tr><td> 9</td><td>09_masking.py</td><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/09_masking.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/09_masking.py</a></td></tr>
<tr><td>10</td><td>10_inverse_video.py</td><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/10_inverse_video.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/10_inverse_video.py</a></td></tr>
<tr><td>11</td><td>11_motion_blur.py</td><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/11_motion_blur.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/11_motion_blur.py</a></td></tr>
<tr><td>12</td><td>12_motion_blur_B.py</td><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/12_motion_blur_B.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/12_motion_blur_B.py</a></td></tr>
<tr><td>13</td><td>13_clip_array.py</td><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/13_clip_array.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/13_clip_array.py</a></td></tr>
<tr><td>14</td><td>14_clip_array_various_clips.py</td><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/14_clip_array_various_clips.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/14_clip_array_various_clips.py</a></td></tr>
<tr><td>15</td><td>15_clip_array_various_clips_with_margin.py</td><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/15_clip_array_various_clips_with_margin.py">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/15_clip_array_various_clips_with_margin.py</a></td></tr>
<tr><td>16</td><td></td><td></td><td><a href="https://github.com/tisnik/moviepy-examples/blob/master/video_processing/">https://github.com/tisnik/moviepy-examples/blob/master/video_processing/</a></td></tr>
</table>

<p>Druhý repositář obsahuje všechna videa uložená do formátu Ogg/Vorbis, která
byla vygenerována demonstračními příklady. Odkazy na jednotlivá videa jsou
uvedeny v&nbsp;následující tabulce:</p>

<table>
<tr><th>#</th><th>Video</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td><a href="https://tisnik.github.io/moviepy-videos/videoprocessing_01_convert_mp4_to_ogv.html">https://tisnik.github.io/moviepy-videos/videoprocessing_01_convert_mp4_to_ogv.html</a></td></tr>
<tr><td> 2</td><td></td><td><a href="https://tisnik.github.io/moviepy-videos/videoprocessing_02_convert_change_bitrate.html">https://tisnik.github.io/moviepy-videos/videoprocessing_02_convert_change_bitrate.html</a></td></tr>
<tr><td> 3</td><td></td><td><a href="https://tisnik.github.io/moviepy-videos/videoprocessing_03_convert_speedup.html">https://tisnik.github.io/moviepy-videos/videoprocessing_03_convert_speedup.html</a></td></tr>
<tr><td> 4</td><td></td><td><a href="https://tisnik.github.io/moviepy-videos/videoprocessing_04_use_subclip.html">https://tisnik.github.io/moviepy-videos/videoprocessing_04_use_subclip.html</a></td></tr>
<tr><td> 5</td><td></td><td><a href="https://tisnik.github.io/moviepy-videos/videoprocessing_05_resize_to_larger.html">https://tisnik.github.io/moviepy-videos/videoprocessing_05_resize_to_larger.html</a></td></tr>
<tr><td> 6</td><td></td><td><a href="https://tisnik.github.io/moviepy-videos/videoprocessing_06_resize_to_smaller.html">https://tisnik.github.io/moviepy-videos/videoprocessing_06_resize_to_smaller.html</a></td></tr>
<tr><td> 7</td><td></td><td><a href="https://tisnik.github.io/moviepy-videos/videoprocessing_07_colorize.html">https://tisnik.github.io/moviepy-videos/videoprocessing_07_colorize.html</a></td></tr>
<tr><td> 8</td><td></td><td><a href="https://tisnik.github.io/moviepy-videos/videoprocessing_08_margin.html">https://tisnik.github.io/moviepy-videos/videoprocessing_08_margin.html</a></td></tr>
<tr><td> 9</td><td></td><td><a href="https://tisnik.github.io/moviepy-videos/videoprocessing_09_masking.html">https://tisnik.github.io/moviepy-videos/videoprocessing_09_masking.html</a></td></tr>
<tr><td>10</td><td></td><td><a href="https://tisnik.github.io/moviepy-videos/videoprocessing_10_inverse_video.html">https://tisnik.github.io/moviepy-videos/videoprocessing_10_inverse_video.html</a></td></tr>
<tr><td>11</td><td></td><td><a href="https://tisnik.github.io/moviepy-videos/videoprocessing_11_motion_blur.html">https://tisnik.github.io/moviepy-videos/videoprocessing_11_motion_blur.html</a></td></tr>
<tr><td>12</td><td></td><td><a href="https://tisnik.github.io/moviepy-videos/videoprocessing_12_motion_blur_B.html">https://tisnik.github.io/moviepy-videos/videoprocessing_12_motion_blur_B.html</a></td></tr>
<tr><td>13</td><td></td><td><a href="https://tisnik.github.io/moviepy-videos/">https://tisnik.github.io/moviepy-videos/</a></td></tr>
<tr><td>14</td><td></td><td><a href="https://tisnik.github.io/moviepy-videos/">https://tisnik.github.io/moviepy-videos/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>MoviePy 0.2.3.3 na PyPi<br />
<a href="https://pypi.org/project/moviepy/">https://pypi.org/project/moviepy/</a>
</li>

<li>MoviePy na GitHubu<br />
<a href="https://github.com/Zulko/moviepy">https://github.com/Zulko/moviepy</a>
</li>

<li>MoviePy - dokumentace<br />
<a href="http://zulko.github.io/moviepy/">http://zulko.github.io/moviepy/</a>
</li>

<li>MoviePy - galerie<br />
<a href="http://zulko.github.io/moviepy/gallery.html">http://zulko.github.io/moviepy/gallery.html</a>
</li>

<li>Data Animations With Python and MoviePy<br />
<a href="https://zulko.github.io/blog/2014/11/29/data-animations-with-python-and-moviepy/">https://zulko.github.io/blog/2014/11/29/data-animations-with-python-and-moviepy/</a>
</li>

<li>Porovnání formátů Ogg Theora a H.264<br />
<a href="https://www.root.cz/zpravicky/porovnani-formatu-ogg-theora-a-h-264/">https://www.root.cz/zpravicky/porovnani-formatu-ogg-theora-a-h-264/</a>
</li>

<li>Případ GIF<br />
<a href="https://www.root.cz/clanky/pripad-gif/">https://www.root.cz/clanky/pripad-gif/</a>
</li>

<li>Pravda a mýty o GIFu<br />
<a href="https://www.root.cz/clanky/pravda-a-myty-o-gifu/">https://www.root.cz/clanky/pravda-a-myty-o-gifu/</a>
</li>

<li>Anatomie grafického formátu GIF<br />
<a href="https://www.root.cz/clanky/anatomie-grafickeho-formatu-gif/">https://www.root.cz/clanky/anatomie-grafickeho-formatu-gif/</a>
</li>

<li>GIF: animace a konkurence<br />
<a href="https://www.root.cz/clanky/gif-animace-a-konkurence/">https://www.root.cz/clanky/gif-animace-a-konkurence/</a>
</li>

<li>Two python modules : MoviePy and images2gif – part 001<br />
<a href="http://free-tutorials.org/two-python-modules-moviepy-and-images2gif-part-001/">http://free-tutorials.org/two-python-modules-moviepy-and-images2gif-part-001/</a>
</li>

<li>images2gif<br />
<a href="https://pypi.org/project/images2gif/">https://pypi.org/project/images2gif/</a>
</li>

<li>Making GIFs from video files with Python<br />
<a href="https://www.devbattles.com/en/sand/post-345-Making+GIFs+From+Video+Files+With+Python">https://www.devbattles.com/en/sand/post-345-Making+GIFs+From+Video+Files+With+Python</a>
</li>

<li>GIF89a specification<br />
<a href="https://www.w3.org/Graphics/GIF/spec-gif89a.txt">https://www.w3.org/Graphics/GIF/spec-gif89a.txt</a>
</li>

<li>MPEG-4 Part 14<br />
<a href="https://en.wikipedia.org/wiki/MPEG-4_Part_14">https://en.wikipedia.org/wiki/MPEG-4_Part_14</a>
</li>

<li>Theora video compression<br />
<a href="https://www.theora.org/">https://www.theora.org/</a>
</li>

<li>Theora<br />
<a href="https://en.wikipedia.org/wiki/Theora">https://en.wikipedia.org/wiki/Theora</a>
</li>

<li>NumPy<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>numpy 1.14.2 (on PyPi)<br />
<a href="https://pypi.org/project/numpy/">https://pypi.org/project/numpy/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy/</a>
</li>

<li>Integrovaná vývojová prostředí ve Fedoře: praktické použití IPython Notebooku a knihovny Numpy (2.část)<br />
<a href="https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/">https://mojefedora.cz/integrovana-vyvojova-prostredi-ve-fedore-prakticke-pouziti-ipython-notebooku-a-knihovny-numpy-2-cast/</a>
</li>

<li>Non-linear editing system<br />
<a href="https://en.wikipedia.org/wiki/Non-linear_editing_system">https://en.wikipedia.org/wiki/Non-linear_editing_system</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Customising contour plots in matplotlib<br />
<a href="https://philbull.wordpress.com/2012/12/27/customising-contour-plots-in-matplotlib/">https://philbull.wordpress.com/2012/12/27/customising-contour-plots-in-matplotlib/</a>
</li>

<li>NumPy Home Page<br />
<a href="http://www.numpy.org/">http://www.numpy.org/</a>
</li>

<li>NumPy v1.10 Manual<br />
<a href="http://docs.scipy.org/doc/numpy/index.html">http://docs.scipy.org/doc/numpy/index.html</a>
</li>

<li>NumPy (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/NumPy">https://en.wikipedia.org/wiki/NumPy</a>
</li>

<li>Monitoring sucha<br />
<a href="http://portal.chmi.cz/aktualni-situace/sucho">http://portal.chmi.cz/aktualni-situace/sucho</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

