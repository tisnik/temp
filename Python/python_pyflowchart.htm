<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba vývojových diagramů přímo ze zdrojových kódů Pythonu</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba vývojových diagramů přímo ze zdrojových kódů Pythonu</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve třetí části miniseriálu o knihovnách určených pro tvorbu různých typů grafů a diagramů si představíme knihovnu nazvanou pyflowchart. Už název této knihovny poměrně dobře popisuje její funkci &ndash; jedná se totiž o nástroj pro tvorbu vývojových diagramů přímo ze zdrojových kódů Pythonu.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Tvorba vývojových diagramů přímo ze zdrojových kódů Pythonu</a></p>
<p><a href="#k02">*** 2. Vývojové diagramy &ndash; flowcharts</a></p>
<p><a href="#k03">*** 3. Vznik a další rozvoj vývojových diagramů</a></p>
<p><a href="#k04">*** 4. Vývojové diagramy v&nbsp;současnosti</a></p>
<p><a href="#k05">*** 5. Interaktivní a programová tvorba vývojových diagramů</a></p>
<p><a href="#k06">*** 6. Nástroj <i>pyflowchart</i></a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. Alternativy k&nbsp;vývojovým diagramům</a></p>
<p><a href="#k15">*** 15. Kopenogramy</a></p>
<p><a href="#k16">*** 16. DRAGON-charts</a></p>
<p><a href="#k17">*** 17. &bdquo;Puzzle&ldquo; používané v&nbsp;projektu Scratch a podobných nástrojích</a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Odkazy na články s&nbsp;tématem programové tvorby grafů a diagramů</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba vývojových diagramů přímo ze zdrojových kódů Pythonu</h2>

<p><a
href="https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/">V&nbsp;předminulé
části</a> miniseriálu o knihovnách určených pro tvorbu grafů a diagramů jsme se
seznámili s&nbsp;knihovnou nazvanou <i>Rhizome</i>. Připomeňme si, že tato
knihovna je primárně určena pro použití v&nbsp;programovacím jazyku <a
href="https://www.root.cz/n/clojure/">Clojure</a> a umožňuje vytvářet
orientované i neorientované grafy, a to přímo na základě jejich deklarace
formou <i>mapy</i> (asociativního pole), tedy s&nbsp;využitím základní datové
struktury jazyka Clojure. Interně je tato knihovna postavena na nástroji
<i>Graphviz</i>, který zajišťuje samotné vykreslení grafu (a to konkrétně
s&nbsp;využitím utility nazvané <strong>dot</strong>). Jedná se tedy o jeden
z&nbsp;příkladů grafů resp.&nbsp;diagramů, pro jejichž definici je použit
obecný (v&nbsp;tomto kontextu možná lépe řečeno univerzální) programovací jazyk
a nikoli doménově specifický jazyk (DSL), a to se všemi přednostmi a zápory,
které toto řešení přináší.</p>

<p><a
href="https://www.root.cz/clanky/tvorba-sekvencnich-diagramu-v-pythonu-s-vyuzitim-knihovny-napkin/">Minule</a>
byl naproti tomu popsán nástroj pojmenovaný <i>Napkin</i>. Ten byl určen pro
tvorbu a vykreslení takzvaných <i>sekvenčních diagramů</i>, což je jeden
z&nbsp;typů diagramů definovaných v&nbsp;rámci jazyka UML (<i>Unified Modeling
Language</i>). Tento nástroj je určen pro použití v&nbsp;jazyku Python a pro
vykreslení diagramů používá známou a poměrně často využívanou utilitu
<i>PlantUML</i>, která může být volána buď lokálně (pokud je nainstalována),
nebo lze využít API veřejného serveru, na je němž <i>PlantUML</i> nabízen
formou služby. Opět platí &ndash; namísto doménově specifického jazyka jsou
v&nbsp;tomto případě sekvenční diagramy definovány přímo v&nbsp;Pythonu
s&nbsp;využitím některých vlastností tohoto jazyka. Zejména se jedná o použití
dekorátorů a taktéž o blokové kontexty představované programovým blokem
<strong>with</strong>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Vývojové diagramy &ndash; flowcharts</h2>

<p>V&nbsp;dnešním článku se zaměříme na další typ diagramů; konkrétně se jedná
o <i>vývojové diagramy</i> neboli <i>flowcharts</i>. Tento typ diagramů, který
je všeobecně známý a poměrně snadno pochopitelný i nevývojáři, se používá pro
popis toku (<i>flow</i>) operací ve znázorněném algoritmu. Algoritmus je
rozdělen na jednotlivé kroky popř.&nbsp;operace, přičemž se na základě typu
operace používá odlišný tvar uzlu, který tuto operaci ve vývojovém diagramu
reprezentuje. Některé aplikace určené pro tvorbu vývojových diagramů navíc
dokážou typ operace rozlišit i barvou pozadí uzlu, což dále přispívá
k&nbsp;přehlednosti reprezentace. Uzly jsou propojeny šipkami, které naznačují
tok (<i>flow</i>) programu (jedná se tedy o formu orientovaného grafu).
V&nbsp;případě, že se šipky kříží, nepoužívá se (alespoň většinou) žádný
specifický tvar, který křížení naznačuje (některé aplikace ovšem v&nbsp;tomto
případě nakreslí &bdquo;mostky&ldquo; tak, jak je tomu zvykem v&nbsp;UML).</p>

<p><div class="rs-tip-major">Poznámka: to, jaké operace jsou ve vývojovém
diagramu popsány, záleží na konkrétním použití. Na jedné straně může být
operace velmi nízkoúrovňová (&bdquo;přičti k&nbsp;proměnné <strong>i</strong>
jedničku&ldquo;), ovšem taktéž se může jednat o interně složitou operaci
(&bdquo;vyskladni zboží&ldquo;). Lze se setkat, i když to není příliš časté, i
s&nbsp;hierarchickými vývojovými diagramy, kdy jsou jednotlivé podprogramy (pro
ty existuje speciální typ uzlu) rozepsány do větších podrobností v&nbsp;dalším
(pod)diagramu.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vznik a další rozvoj vývojových diagramů</h2>

<p>Vývojové diagramy byly velmi populární především v&nbsp;minulosti, konkrétně
v&nbsp;padesátých letech minulého století, kdy se programy vytvářely buď
v&nbsp;takzvaném <i>autokódu</i> nebo <a
href="https://www.root.cz/clanky/sedmdesatiny-assembleru-lidsky-citelny-strojovy-kod/">v&nbsp;assembleru</a>.
Tyto vývojářské prostředky jsou sice vhodné pro zápis implementací algoritmů,
ovšem nikoli už pro jejich návrh popř.&nbsp;pro prezentaci. A právě
z&nbsp;tohoto důvodu se algoritmy na začátku vývoje nejdříve popsaly vývojovým
diagramem a teprve poté byly skutečně implementovány. Přitom popis složitých
programů mohl zabrat několik desítek a mnohdy i stovek stran s&nbsp;vývojovými
diagramy (resp.&nbsp;jejich částmi propojenými s&nbsp;využitím spojovacích
&bdquo;koleček&ldquo;). Takto použité vývojové diagramy byly mnohdy
strukturovány hierarchicky &ndash; nejdříve byla aplikace popsána na nejvyšším
stupni abstrakce a poté byly rozpracovány jednotlivé části aplikace popsané
formou procedur (resp.&nbsp;přesněji řečeno podprogramů) &ndash; to ostatně
dobře korespondovalo i se způsobem implementace v&nbsp;konkrétním programovacím
jazyce (snad s&nbsp;výjimkou jednoduchých BASICů nepodporujících
procedury).</p>

<p><div class="rs-tip-major">Poznámka: vývojové diagramy se používaly i
později, sloužily například i při výuce algoritmizace, a to předtím, než byly
vyvinuty resp.&nbsp;v&nbsp;našem prostředí než začaly být dostupné
vysokoúrovňové programovací jazyky. Nicméně stále se jednalo popis algoritmu
v&nbsp;naprosté většině případů zcela oddělený od jeho implementace,
tj.&nbsp;mezi vývojovým diagramem a (ekvivalentním) zdrojovým kódem nebyly
vytvořeny automatické vazby zajištěné například nějakým překladačem či
transformátorem kódu.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Vývojové diagramy v&nbsp;současnosti</h2>

<p>Ve skutečnosti se s&nbsp;vývojovými diagramy se setkáme i
v&nbsp;současnosti, kdy se mohou používat pro popis chování složitějších
aplikací, popř.&nbsp;naopak dobře izolovaných algoritmů (&bdquo;školním&ldquo;
příkladem jsou vývojové diagramy popisující algoritmy pro vyhledávání prvků
v&nbsp;poli popř.&nbsp;pro seřazení prvků v&nbsp;poli). Takto pojaté vývojové
diagramy už nemusí sloužit (a mnohdy ani neslouží) jako &bdquo;předpis&ldquo;,
kterého se musí programátoři držet při přepisu algoritmu do konkrétního
programovacího jazyka (což bylo používáno v&nbsp;padesátých a šedesátých letech
minulého století; v&nbsp;ČSSR i později). Spíše se tyto vývojové diagramy
používají pro lepší pochopení algoritmu, který je abstrahován od skutečné
implementace (a ta je mnohdy &bdquo;zaneřáděna&ldquo; nízkoúrovňovými operacemi
&ndash; zpracováním výjimek, typovými deklaracemi, deklaracemi proměnných,
nízkoúrovňovými programovými smyčkami atd. &ndash; jen malé množství jazyků
dokáže dobře oddělit různé úrovně abstrakce).</p>

<p><div class="rs-tip-major">Poznámka: zajímavé je, že se vývojové diagramy
nestaly součástí <a href="https://www.uml.org/">standardu UML</a>. I v&nbsp;UML
sice nalezneme podobně koncipované diagramy, například <i>diagram aktivit</i> a
<i>stavový diagram</i> popř.&nbsp;<i>diagram interakcí</i>,ovšem ty nejsou
plnohodnotnou náhradou vývojových diagramů. Podobně v&nbsp;UML nenajdeme
plnohodnotnou náhradu za DFD apod.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Interaktivní a programová tvorba vývojových diagramů</h2>

<p>Vývojové diagramy lze vytvářet v&nbsp;různých grafických editorech, a to jak
editorech realizovaných formou desktopové aplikace (<a
href="http://flowgorithm.org/">Flowgorithm</a>), tak i v&nbsp;editorech, které
jsou dostupné formou webové aplikace (<a
href="https://online.visual-paradigm.com/diagrams/solutions/free-flowchart-maker-online/">Flowchart
Maker</a>, <a href="https://app.diagrams.net/">https://app.diagrams.net/</a>
atd.). Existují i specifikace doménově specifických jazyků, které jsou určeny
pro popis vývojových diagramů v&nbsp;textové podobě. Nicméně existuje ještě
jeden elegantní způsob výroby vývojového diagramu. Ten je založen &ndash; což
může zpočátku vypadat poněkud paradoxně &ndash; na zápisu algoritmu
v&nbsp;Pythonu, z&nbsp;něhož se posléze diagram vygeneruje. Musíme si ovšem
uvědomit, že Python je skutečně vysokoúrovňovým jazykem, který je pro popis
algoritmů na libovolné (zvolené) úrovni abstrakce takřka ideální &ndash; až na
absenci některých programových konstrukcí popsatelných vývojovým diagramem
(zejména chybí programová smyčka typu <strong>repeat-until</strong>, tedy
smyčka s&nbsp;testem prováděným za koncem těla smyčky).</p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Nástroj <i>pyflowchart</i></h2>

<p>Nástroj <i>pyflowchart</i>, jímž se budeme zabývat v&nbsp;navazujících
kapitolách, dokáže vytvořit vývojové diagramy ze zdrojových kódů Pythonu.
Instalace tohoto nástroje je, podobně jako v&nbsp;případě minule popsaného
<i>Napkinu</i>, snadná a přímočará:</p>

<pre>
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Alternativy k&nbsp;vývojovým diagramům</h2>

<p>Na závěr dnešního článku je vhodné se zmínit i o některých alternativách
k&nbsp;vývojovým diagramům. Jak jsme si již řekli v&nbsp;úvodních kapitolách,
slouží vývojové diagramy k&nbsp;popisu algoritmů či jejich částí a
s&nbsp;využitím nástroje <i>pyflowchart</i> je zajištěna jednosměrná vazba
Python &rarr; vývojový diagram. Ovšem ve skutečnosti se nejedná o plnohodnotnou
oboustrannou vazbu, kdy by se například změna ve vývojovém diagramu automaticky
promítla v&nbsp;Pythonovském kódu (ovšem i takové nástroje existují &ndash;
například <a href="http://flowgorithm.org/">Flowgorithm</a>). Navíc je kreslení
a zejména případná editace vývojového diagramu relativně složitá a vyžaduje
velké množství času.</p>

<p>A konečně &ndash; vývojové diagramy jsou dosti náročné na zabranou plochu
papíru či obrazovky, a to kvůli tomu, že jednotlivé bloky je nutné mnohdy
poměrně složitě spojovat (mezi jednotlivými šipkami je vhodné ponechat
relativně velké mezery, jinak nebude diagram přehledný) a do jisté míry i kvůli
tomu, že podmínky (a kvůli nim se mnohdy vývojové diagramy používají primárně)
jsou reprezentovány kosočtverci, které zabírají velkou plochu, ale současně
nenabízí dostatek místa pro zápis podmínky.</p>

<p>Existují ovšem i další způsoby grafického vyjádření nějakého algoritmu.
Některé z&nbsp;alternativ jsou spíše staršího data, jiné jsou naopak poměrně
moderní a jsou navrženy takovým způsobem, aby byla zajištěna interakce
uživatele se vznikajícím algoritmem.</p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Kopenogramy</h2>

<p>Alespoň ve stručnosti se musíme zmínit o takzvaných <i>kopenogramech</i>.
Jedná se o alternativu ke klasickým vývojovým diagramům; zajímavé přitom je, že
první verze kopenogramů vznikla v&nbsp;Československu a jejími autory jsou Jiří
Kofránek, Rudolf Pecinovský a Petr Novák. Ostatně ze jmen autorů je odvozen i
název kopenogram: <i>KOfránek PEcinovský NOvák grams</i> (dnes se ovšem tento
název vysvětluje jako zkratka z&nbsp;&bdquo;Keep Our Program in Embedded Noted
Oblongs for Graphical Representation of Algorithmic Modules&ldquo;).
Kopenogramy existovaly v&nbsp;několika variantách; pravděpodobně poslední
(nejbarevnější) varianta je popsána v&nbsp;článku <a
href="https://kopenogram.org/Assets/Kopenograms_Graphical_Language_for_Structured_Algorithms.pdf">Kopenograms
– Graphical Language for Structured Algorithms</a>. Od vývojových diagramů se
kopenogramy odlišují v&nbsp;mnoha ohledech, především rozdílnou reprezentací
podmínek a smyček.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. DRAGON-charts</h2>

<p>Další rozšíření vývojových diagramů bylo použito ve velmi zajímavém projektu &ndash; při programování sovětského raketoplánu <i>Buran</i>.</p>



<p><a name="k17"></a></p>
<h2 id="k17">17. &bdquo;Puzzle&ldquo; používané v&nbsp;projektu Scratch a podobných nástrojích</h2>

<p>Běžný příkazový blok je vizuálně představován obdélníkem s několika výčnělky připomínajícími puzzle. Programové smyčky a podmínky jsou vyobrazeny jako složitější tvary umožňující vkládání dalších bloků dovnitř svého těla. Pomocí těchto výčnělků se bloky spojují dohromady tak, aby tvořily sekvenci či dokonce strukturovaný program. V případě, že je zapotřebí sekvenci příkazů změnit, je možné bloky od sebe rozdělit, popř.&nbsp;vybraný blok smazat (přes menu zobrazené po stisku pravého tlačítka myši), zkopírovat (opět přes pravé tlačítko myši) či přesunout.</p>

<img src="https://i.iinfo.cz/images/694/lang09-3.png" alt="scratch" />
<p><i>Obrázek XXX: Ukázka využití nekonečné programové smyčky použité při popisu chování spritu, který se má po každém nárazu na stěnu nakreslenou červenou barvou otočit zpět směrem ke středu „ohrady“.</i></p>

<img src="https://i.iinfo.cz/images/694/lang09-4.png" alt="scratch2" />
<p><i>Obrázek XXX: Ukázka použití počítané programové smyčky ve Scratchi.</i></p>

<ol>

<li>Scratch: plnohodnotný programovací jazyk nebo jen dětské puzzle?<br />
<a href="https://www.root.cz/clanky/scratch-plnohodnotny-programovaci-jazyk-nebo-jen-detske-puzzle/">https://www.root.cz/clanky/scratch-plnohodnotny-programovaci-jazyk-nebo-jen-detske-puzzle/</a>
</li>

<li>Scratch: plnohodnotný programovací jazyk nebo jen dětské puzzle? (2. část)<br />
<a href="https://www.root.cz/clanky/scratch-plnohodnotny-programovaci-jazyk-nebo-jen-detske-puzzle-2-cast/">https://www.root.cz/clanky/scratch-plnohodnotny-programovaci-jazyk-nebo-jen-detske-puzzle-2-cast/</a>
</li>

<li>Scratch - plnohodnotný programovací jazyk nebo jen dětské puzzle? (3. část: Scratch a BYOB)<br />
<a href="https://www.root.cz/clanky/scratch-plnohodnotny-programovaci-jazyk-nebo-jen-detske-puzzle-3-cast-scratch-a-byob/">https://www.root.cz/clanky/scratch-plnohodnotny-programovaci-jazyk-nebo-jen-detske-puzzle-3-cast-scratch-a-byob/</a>
</li>

<li>Scratch - plnohodnotný programovací jazyk nebo jen dětské puzzle? (4. část: pokročilá práce s BYOB)<br />
<a href="https://www.root.cz/clanky/scratch-plnohodnotny-programovaci-jazyk-nebo-jen-detske-puzzle-4-cast-pokrocila-prace-s-byob/">https://www.root.cz/clanky/scratch-plnohodnotny-programovaci-jazyk-nebo-jen-detske-puzzle-4-cast-pokrocila-prace-s-byob/</a>
</li>

<li>Scratch - plnohodnotný programovací jazyk nebo jen dětské puzzle? (5. část: projekt Panther)<br />
<a href="https://www.root.cz/clanky/scratch-plnohodnotny-programovaci-jazyk-nebo-jen-detske-puzzle-5-cast-projekt-panther/">https://www.root.cz/clanky/scratch-plnohodnotny-programovaci-jazyk-nebo-jen-detske-puzzle-5-cast-projekt-panther/</a>
</li>

<li>Snap! – důstojný nástupce programovacího jazyka Scratch<br />
<a href="https://www.root.cz/clanky/snap-dustojny-nastupce-programovaciho-jazyka-scratch/">https://www.root.cz/clanky/snap-dustojny-nastupce-programovaciho-jazyka-scratch/</a>
</li>

</ol>

<img src="https://i.iinfo.cz/images/694/lang09-10.png" alt="scratch3" />
<p><i>Obrázek XXX: Použití programové smyčky typu <strong>repeat-until</strong> pro počítání od nuly do devíti.</i></p>

<img src="https://i.iinfo.cz/images/694/lang09-14.png" alt="scratch4" />
<p><i>Obrázek XXX: Příklad použití příkazového bloku <strong>if-then-else</strong>.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
Python 3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyflowchart/">https://github.com/tisnik/most-popular-python-libs/blob/master/pyflowchart/</a></td></tr>
<tr><td> 2</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyflowchart/">https://github.com/tisnik/most-popular-python-libs/blob/master/pyflowchart/</a></td></tr>
<tr><td> 3</td><td></td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyflowchart/">https://github.com/tisnik/most-popular-python-libs/blob/master/pyflowchart/</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na články s&nbsp;tématem programové tvorby grafů a diagramů</h2>

<p>V&nbsp;této kapitole jsou uvedeny odkazy na předchozí články, v&nbsp;nichž
jsme se zabývali tvorbou různých typů grafů a diagramů &ndash; a to
v&nbsp;naprosté většině případů s&nbsp;využitím nějakého doménově specifického
jazyka neboli DSL (<i>Domain Specific Language</i>) popř.&nbsp;nějakého
univerzálního programovacího jazyka:</p>

<ol>

<li>Nástroje pro tvorbu UML diagramů<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/</a>
</li>

<li>Nástroje pro tvorbu UML diagramů z&nbsp;příkazové řádky<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky/</a>
</li>

<li>Nástroje pro tvorbu UML diagramů z&nbsp;příkazové řádky (II)<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky-ii/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky-ii/</a>
</li>

<li>Nástroje pro tvorbu grafů a diagramů z&nbsp;příkazové řádky<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-grafu-a-diagramu-z-prikazove-radky/">https://www.root.cz/clanky/nastroje-pro-tvorbu-grafu-a-diagramu-z-prikazove-radky/</a>
</li>

<li>Sledování správy paměti v&nbsp;Pythonu s&nbsp;využitím nástroje objgraph<br />
<a href="https://www.root.cz/clanky/sledovani-spravy-pameti-v-pythonu-s-vyuzitim-nastroje-objgraph/">https://www.root.cz/clanky/sledovani-spravy-pameti-v-pythonu-s-vyuzitim-nastroje-objgraph/</a>
</li>

<li>Programová tvorba diagramů v&nbsp;jazyku Clojure s&nbsp;využitím knihovny Rhizome<br />
<a href="https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/">https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/</a>
</li>

<li>Tvorba sekvenčních diagramů v&nbsp;Pythonu s&nbsp;využitím knihovny Napkin<br />
<a href="https://www.root.cz/clanky/tvorba-sekvencnich-diagramu-v-pythonu-s-vyuzitim-knihovny-napkin/">https://www.root.cz/clanky/tvorba-sekvencnich-diagramu-v-pythonu-s-vyuzitim-knihovny-napkin/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Flowchart (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Flowchart">https://en.wikipedia.org/wiki/Flowchart</a>
</li>

<li>DRAKON<br />
<a href="https://en.wikipedia.org/wiki/DRAKON">https://en.wikipedia.org/wiki/DRAKON</a>
</li>

<li>Modeling language<br />
<a href="https://en.wikipedia.org/wiki/Modeling_language">https://en.wikipedia.org/wiki/Modeling_language</a>
</li>

<li>Napkin na GitHubu<br />
<a href="https://github.com/pinetr2e/napkin">https://github.com/pinetr2e/napkin</a>
</li>

<li>Napkin 0.6.8 na PyPi<br />
<a href="https://pypi.org/project/napkin/">https://pypi.org/project/napkin/</a>
</li>

<li>PlantUML (home page)<br />
<a href="http://plantuml.sourceforge.net/">http://plantuml.sourceforge.net/</a>
</li>

<li>PlantUML (download page)<br />
<a href="http://sourceforge.net/projects/plantuml/files/plantuml.jar/download">http://sourceforge.net/projects/plantuml/files/plantuml.jar/download</a>
</li>

<li>PlantUML (Language Reference Guide)<br />
<a href="http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf">http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf</a>
</li>

<li>Rhizome<br />
<a href="https://github.com/ztellman/rhizome">https://github.com/ztellman/rhizome</a>
</li>

<li>Swagger to UML<br />
<a href="https://github.com/nlohmann/swagger_to_uml">https://github.com/nlohmann/swagger_to_uml</a>
</li>

<li>pydiagrams<br />
<a href="https://github.com/billingtonm/pydiagrams">https://github.com/billingtonm/pydiagrams</a>
</li>

<li>graphviz(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/graphviz">https://linux.die.net/man/3/graphviz</a>
</li>

<li>dot(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/dot">https://linux.die.net/man/1/dot</a>
</li>

<li>neato(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/neato">https://linux.die.net/man/1/neato</a>
</li>

<li>twopi(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/twopi">https://linux.die.net/man/1/twopi</a>
</li>

<li>circo(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/circo">https://linux.die.net/man/1/circo</a>
</li>

<li>fdp(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/fdp">https://linux.die.net/man/1/fdp</a>
</li>

<li>sfdp(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/sfdp">https://linux.die.net/man/1/sfdp</a>
</li>

<li>Plain-text diagrams take shape in Asciidoctor!<br />
<a href="http://asciidoctor.org/new­s/2014/02/18/plain-text-diagrams-in-asciidoctor/">http://asciidoctor.org/new­s/2014/02/18/plain-text-diagrams-in-asciidoctor/</a>
</li>

<li>Graphviz – Graph Visualization Software<br />
<a href="http://www.graphviz.org/">http://www.graphviz.org/</a>
</li>

<li>graphviz (Manual Page)<br />
<a href="http://www.root.cz/man/7/graphviz/">http://www.root.cz/man/7/graphviz/</a>
</li>

<li>dot (Manual page)<br />
<a href="http://www.root.cz/man/1/dot/">http://www.root.cz/man/1/dot/</a>
</li>

<li>dot (Manual v&nbsp;PDF)<br />
<a href="https://graphviz.org/pdf/dot.1.pdf">https://graphviz.org/pdf/dot.1.pdf</a>
</li>

<li>Ditaa home page<br />
<a href="http://ditaa.sourceforge.net/">http://ditaa.sourceforge.net/</a>
</li>

<li>Ditaa introduction<br />
<a href="http://ditaa.sourceforge.net/#intro">http://ditaa.sourceforge.net/#intro</a>
</li>

<li>Ditaa usage<br />
<a href="http://ditaa.sourceforge.net/#usage">http://ditaa.sourceforge.net/#usage</a>
</li>

<li>Node, Edge and Graph Attributes<br />
<a href="http://www.graphviz.org/doc/in­fo/attrs.html">http://www.graphviz.org/doc/in­fo/attrs.html</a>
</li>

<li>Graphviz (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Graphviz">http://en.wikipedia.org/wiki/Graphviz</a>
</li>

<li>Unified Modeling Language<br />
<a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language">https://en.wikipedia.org/wiki/Unified_Modeling_Language</a>
</li>

<li>UML basics: The sequence diagram<br />
<a href="http://www.ibm.com/developerworks/rational/library/3101.html">http://www.ibm.com/developerworks/rational/library/3101.html</a>
</li>

<li>UML 2 State Machine Diagrams: An Agile Introduction<br />
<a href="http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm">http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm</a>
</li>

<li>Sequence diagram (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Sequence_diagram">https://en.wikipedia.org/wiki/Sequence_diagram</a>
</li>

<li>UML 2 Sequence Diagrams: An Agile Introduction<br />
<a href="http://www.agilemodeling.com/artifacts/sequenceDiagram.htm">http://www.agilemodeling.com/artifacts/sequenceDiagram.htm</a>
</li>

<li>A Quick Introduction to UML Sequence Diagrams<br />
<a href="http://www.tracemodeler.com/articles/a_quick_introduction_to_uml_sequence_diagrams/">http://www.tracemodeler.com/articles/a_quick_introduction_to_uml_sequence_diagrams/</a>
</li>

<li>UML Sequence Diagrams<br />
<a href="https://www.uml-diagrams.org/sequence-diagrams.html">https://www.uml-diagrams.org/sequence-diagrams.html</a>
</li>

<li>Web Sequence Diagrams<br />
<a href="https://www.websequencediagrams.com/">https://www.websequencediagrams.com/</a>
</li>

<li>Drawing sequence diagrams “napkin style”<br />
<a href="https://modeling-languages.com/drawing-sequence-diagrams-napkin-style/">https://modeling-languages.com/drawing-sequence-diagrams-napkin-style/</a>
</li>

<li>Curated list of UML tools – 2020 edition<br />
<a href="https://modeling-languages.com/uml-tools/#textual">https://modeling-languages.com/uml-tools/#textual</a>
</li>

<li>Flowchart diagrams vs. UML activity diagrams<br />
<a href="https://stackoverflow.com/questions/7081215/flowchart-diagrams-vs-uml-activity-diagrams">https://stackoverflow.com/questions/7081215/flowchart-diagrams-vs-uml-activity-diagrams</a>
</li>

<li>Kopenograms – Graphical Language for Structured Algorithms<br />
<a href="https://kopenogram.org/Assets/Kopenograms_Graphical_Language_for_Structured_Algorithms.pdf">https://kopenogram.org/Assets/Kopenograms_Graphical_Language_for_Structured_Algorithms.pdf</a>
</li>

<li>Kopenograms and Their Implementation in BlueJ<br />
<a href="https://link.springer.com/chapter/10.1007%2F978-3-319-46535-7_8">https://link.springer.com/chapter/10.1007%2F978-3-319-46535-7_8</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

