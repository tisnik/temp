<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

A lexeme: sequence of characters in the source program that matches the pattern for a token and is identified by the lexical analyzer as an instance of that token

A lexical token/token: string with an assigned and thus identified meaning. It is pair consisting of a token name and an optional token value. The token name is a category of lexical unit.



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
from pygments.lexers import PythonLexer
&nbsp;
from prompt_toolkit.styles import Style
from prompt_toolkit.lexers import PygmentsLexer
from prompt_toolkit import PromptSession
&nbsp;
&nbsp;
def <strong>show_help</strong>():
    print("""Help
--------
quit - quit this application
exit - exit from this application
eval - evaluate
""")
&nbsp;
&nbsp;
new_tui_style = Style.from_dict({
    'rprompt': 'bg:#ff0066 #ffffff',
    'bottom-toolbar': 'bg:#ffffff #333333 reverse',
    'prompt': 'bg:#ansiyellow #000000',
    })
&nbsp;
&nbsp;
s = PromptSession()
&nbsp;
while True:
    try:
        cmd = s.prompt("Command: ",
                       validate_while_typing=True,
                       enable_open_in_editor=True,
                       bottom_toolbar="Available commands: quit, exit, help, eval",
                       rprompt="Don't panic!",
                       style=new_tui_style,
                       lexer=PygmentsLexer(PythonLexer))
        if cmd in {"q", "quit", "Quit", "exit", "Exit"}:
            break
        elif cmd in {"help", "Help", "?"}:
            show_help()
        elif cmd == "eval":
            print("42")
    except KeyboardInterrupt:
        continue
    except EOFError:
        break
</pre>

<p>V&nbsp;dalším příkladu je použita syntaxe odpovídající programovacímu jazyku Clojure:</p>

<pre>
cmd = s.prompt("Command: ",
               <strong>lexer=PygmentsLexer(ClojureLexer)</strong>)
</pre>

<img src="https://i.iinfo.cz/images/183/prompt-toolkit-2-19.png" class="image-334209" alt="&#160;" width="806" height="531" />
<p><i>Obrázek X: Zvýraznění syntaxe jazyka Clojure.</i></p>

<pre>
from pygments.lexers.jvm import ClojureLexer
&nbsp;
from prompt_toolkit.styles import Style
from prompt_toolkit.lexers import PygmentsLexer
from prompt_toolkit import PromptSession
&nbsp;
&nbsp;
def <strong>show_help</strong>():
    print("""Help
--------
quit - quit this application
exit - exit from this application
eval - evaluate
""")
&nbsp;
&nbsp;
new_tui_style = Style.from_dict({
    'rprompt': 'bg:#ff0066 #ffffff',
    'bottom-toolbar': 'bg:#ffffff #333333 reverse',
    'prompt': 'bg:#ansiyellow #000000',
    })
&nbsp;
&nbsp;
s = PromptSession()
&nbsp;
while True:
    try:
        cmd = s.prompt("Command: ",
                       validate_while_typing=True,
                       enable_open_in_editor=True,
                       bottom_toolbar="Available commands: quit, exit, help, eval",
                       rprompt="Don't panic!",
                       style=new_tui_style,
                       lexer=PygmentsLexer(ClojureLexer))
        if cmd in {"q", "quit", "Quit", "exit", "Exit"}:
            break
        elif cmd in {"help", "Help", "?"}:
            show_help()
        elif cmd == "eval":
            print("42")
    except KeyboardInterrupt:
        continue
    except EOFError:
        break
</pre>




<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<pre>
from pygments import lex
from pygments.token import Token
from pygments.lexers import PythonLexer
&nbsp;
from prompt_toolkit.formatted_text import PygmentsTokens
from prompt_toolkit import print_formatted_text
&nbsp;
code = """
for i in range(1, 10):
    print(i)
    if i &gt; 5:
        break
    do_something(i)
"""
&nbsp;
tokens = list(lex(code, lexer=PythonLexer()))
print_formatted_text(PygmentsTokens(tokens))
</pre>

<img src="https://i.iinfo.cz/images/325/prompt-toolkit-3-9.png" class="image-334648" alt="&#160;" width="806" height="531" />
<p><i>Obrázek X: Obarvení textu na základě lexeru vytvořeného pro programovací
jazyk Python.</i></p>

<pre>
from pygments import lex
from pygments.token import Token
from pygments.lexers.basic import CbmBasicV2Lexer
&nbsp;
from prompt_toolkit.formatted_text import PygmentsTokens
from prompt_toolkit import print_formatted_text
&nbsp;
code = """
10 FOR I=0 TO 63
20 FOR J=43 TO 0 STEP -1
30 LET CX=(I-52)/31
40 LET CY=(J-22)/31
50 LET ZX=0
60 LET ZY=0
70 LET ITER=0
80 LET ZX2=ZX*ZX
85 LET ZY2=ZY*ZY
90 LET ZY=2*ZX*ZY+CY
100 LET ZX=ZX2-ZY2+CX
110 LET ITER=ITER+1
120 IF ZX2+ZY2&lt;=4 AND ITER&lt;200 THEN GOTO 80
130 IF ITER=200 THEN PLOT I, J
140 NEXT J
150 NEXT I
"""
&nbsp;
tokens = list(lex(code, lexer=CbmBasicV2Lexer()))
print_formatted_text(PygmentsTokens(tokens))
</pre>

<img src="https://i.iinfo.cz/images/325/prompt-toolkit-3-10.png" class="image-334649" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 11: Obarvení textu na základě lexeru vytvořeného pro programovací
jazyk BASIC (zde konkrétně Commodore BASIC).</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">18. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Pygments - Python syntax highlighter<br />
<a href="http://pygments.org/">http://pygments.org/</a>
</li>

<li>Write your own lexer<br />
<a href="http://pygments.org/docs/lexerdevelopment/">http://pygments.org/docs/lexerdevelopment/</a>
</li>

<li>Jazyky podporované knihovnou Pygments<br />
<a href="http://pygments.org/languages/">http://pygments.org/languages/</a>
</li>

<li>Pygments FAQ<br />
<a href="http://pygments.org/faq/">http://pygments.org/faq/</a>
</li>

<li>Pygments 2.2.0 (na PyPi)<br />
<a href="https://pypi.org/project/Pygments/">https://pypi.org/project/Pygments/</a>
</li>

<li>Syntax highlighting<br />
<a href="https://en.wikipedia.org/wiki/Syntax_highlighting">https://en.wikipedia.org/wiki/Syntax_highlighting</a>
</li>

<li>Lexical analysis<br />
<a href="https://en.wikipedia.org/wiki/Lexical_analysis">https://en.wikipedia.org/wiki/Lexical_analysis</a>
</li>

<li>Lexical grammar<br />
<a href="https://en.wikipedia.org/wiki/Lexical_grammar">https://en.wikipedia.org/wiki/Lexical_grammar</a>
</li>

<li>Compiler Construction/Lexical analysis<br />
<a href="https://en.wikibooks.org/wiki/Compiler_Construction/Lexical_analysis">https://en.wikibooks.org/wiki/Compiler_Construction/Lexical_analysis</a>
</li>

<li>Compiler Design - Lexical Analysis<br />
<a href="https://www.tutorialspoint.com/compiler_design/compiler_design_lexical_analysis.htm">https://www.tutorialspoint.com/compiler_design/compiler_design_lexical_analysis.htm</a>
</li>

<li>Lexical Analysis - An Intro<br />
<a href="https://www.scribd.com/document/383765692/Lexical-Analysis">https://www.scribd.com/document/383765692/Lexical-Analysis</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Rosetta_Code">http://rosettacode.org/wiki/Rosetta_Code</a>
</li>

<li>Mandelbrot set: Sinclair ZX81 BASIC<br />
<a href="http://rosettacode.org/wiki/Mandelbrot_set#Sinclair_ZX81_BASIC">http://rosettacode.org/wiki/Mandelbrot_set#Sinclair_ZX81_BASIC</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

