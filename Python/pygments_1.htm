<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů</a></p>
<p><a href="#k02">2. Princip činnosti knihovny Pygments</a></p>
<p><a href="#k03">3. Lexémy a tokeny (tokenizace)</a></p>
<p><a href="#k04">4. Příklad tokenizace jednoduchého kódu napsaného v&nbsp;Pythonu</a></p>
<p><a href="#k05">5. Základní příklad použití: převod zdrojového textu do HTML</a></p>
<p><a href="#k06">6. Převod zdrojového textu do HTML a LaTeXu s&nbsp;volitelnou tvorbou uceleného dokumentu</a></p>
<p><a href="#k07">7. Výstup na terminál (16 barev, 256 barev, true color)</a></p>
<p><a href="#k08">8. Export obarveného kódu do grafických formátů: rastrové obrázky a vektorové kresby</a></p>
<p><a href="#k09">*** 9. Výpis jednotlivých lexikálních tokenů analyzovaného zdrojového kódu</a></p>

<p><a href="#k08">*** 8. Praktické použití: obarvení zdrojových kódů na terminálu, výstup do SVG atd.</a></p>
<p><a href="#k09">*** 9. Specifikace vlastního stylu (barev) při obarvování zdrojových kódů</a></p>
<p><a href="#k10">*** 10. Nastavení filtru pro zpracování výstupu z&nbsp;lexeru</a></p>
<p><a href="#k11">*** 11. Dostupné standardní filtry</a></p>
<p><a href="#k12">*** 12. Obarvení vybraných slov</a></p>
<p><a href="#k13">*** 13. Obarvení tagů v&nbsp;komentářích</a></p>
<p><a href="#k14">*** 14. Zvýraznění bílých znaků</a></p>
<p><a href="#k15">*** 15. Vytvoření vlastního lexeru</a></p>
<p><a href="#k16">*** 16. Jednoduchý lexer založený na rozpoznávání klíčových slov a regulárních výrazů</a></p>
<p><a href="#k17">*** 17. Obarvení syntaxe na příkazovém řádku: kombinace knihoven Pygments a promtp_toolkit</a></p>
<p><a href="#k18">*** 18. Obarvení syntaxe na terminálu v&nbsp;knihovně prompt_toolkit</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Princip činnosti knihovny Pygments</h2>

<p>Při zpracování a obarvování zdrojových kódů používá knihovna Pygments
několik typů tříd, jejichž instance postupně provádí jednotlivé dílčí kroky.
Díky rozdělení celého zpracování do několika konfigurovatelných kroků je
zajištěna velká flexibilita knihovny a možnost jejího snadného rozšiřování o
další podporované jazyky, výstupní formáty, speciální filtry atd. Celý průběh
zpracování vypadá následovně:</p>

<ol>

<li>Na začátku zpracování se nachází takzvaný <i>lexer</i>, který postupně
načítá jednotlivé znaky ze vstupního řetězce (resp.&nbsp;souboru) a vytváří
z&nbsp;nich lexikální <i>tokeny</i>. Pro každý podporovaný jazyk se používá
jiný lexer a samozřejmě je možné v&nbsp;případě potřeby si napsat lexer
vlastní.</li>

<li>Výstup z&nbsp;lexeru může procházet libovolným počtem <i>filtrů</i>
sloužících pro odstranění nebo (častěji) modifikaci jednotlivých tokenů; ať již
jejich typů či přímo textu, který tvoří hodnotu tokenu. Díky existenci filtrů
je například možné nechat si zvýraznit vybrané bílé znaky, slova se speciálním
významem v&nbsp;komentářích (TODO:, FIX:) apod.</li>

<li>Za filtry se nachází <i>formátovač (formatter)</i>, který postupně načítá
jednotlivé tokeny a převádí je do výstupního formátu. K&nbsp;dispozici je
několik formátovačů zajišťujících například tisk na terminál, výstup do HTML,
LaTeXu, RTF, SVG apod. S&nbsp;některými formátovači se seznámíme a opět platí
&ndash; v&nbsp;případě potřeby je možné si naprogramovat formátovač
vlastní.</li>

</ol>

<p><div class="rs-tip-major">Poznámka: díky tomu, že se prakticky veškeré
zpracování zdrojových textů odehrává na úrovni tokenů, není nutné, aby byl celý
zpracovávaný zdrojový kód (nebo jeho tokenizovaná podoba) uložen
v&nbsp;operační paměti. Je tedy možné zpracovávat i velmi rozsáhlé dokumenty, a
to bez větších nároků na operační paměť.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Lexémy a tokeny (tokenizace)</h2>

<p>První část zpracování zdrojových textů je nejzajímavější a implementačně i
nejsložitější. <i>Lexer</i> totiž musí v&nbsp;sekvenci znaků tvořících zdrojový
text najít takzvané <i>lexémy</i>, tj.&nbsp;skupiny (sousedních) znaků
odpovídajících nějakému vzorku (použít lze gramatiku, regulární výraz či ad-hoc
testy). Z&nbsp;lexémů se posléze tvoří již zmíněné lexikální <i>tokeny</i>, což
je &ndash; poněkud zjednodušeně řečeno &ndash; dvojice obsahující typ tokenu
(někdy se namísto &bdquo;typ&ldquo; používá označení &bdquo;jméno&ldquo;) a
řetězec ze vstupního zdrojového souboru. Převodu zdrojového textu na sekvenci
tokenů se někdy říká <i>tokenizace</i>. Účelem tokenizace může být:</p>

<ul>

<li>Transformace zdrojového textu do podoby, která může být dále zpracovávána
dalším modulem překladače (syntaktická analýza). V&nbsp;takovém případě se však
některé tokeny mohou zahazovat; příkladem mohou být komentáře, tokeny
představující bílé znaky apod. Spojením lexeru a modulu pro syntaktickou
analýzu vznikne <i>parser</i> (jeho typickým výsledkem je AST).</li>

<li>Transformace zdrojového kódu pro účely zvýraznění syntaxe v&nbsp;editorech
či prohlížečích. V&nbsp;tomto případě se žádné tokeny nezahazují, což je případ
knihovny Pygments.</li>

</ul>



<p><a name="k04"></a></p>
<h2 id="k04">4. Příklad tokenizace jednoduchého kódu napsaného v&nbsp;Pythonu</h2>

<p>Podívejme se nyní na příklad tokenizace velmi jednoduchého a krátkého kódu,
který je naprogramován v&nbsp;Pythonu:</p>

<pre>
for i in range(1, 11):
    print("Hello world!")
</pre>

<p>Výsledkem tokenizace je následující sekvence tokenů, tj.&nbsp;dvojic
typ+hodnota (řetězec):</p>

<table>
<tr><th>Typ tokenu</th><th>Řetězec</th></tr>
<tr><td>Token.Keyword</td><td>'for'</td></tr>
<tr><td>Token.Text</td><td>' '</td></tr>
<tr><td>Token.Name</td><td>'i'</td></tr>
<tr><td>Token.Text</td><td>' '</td></tr>
<tr><td>Token.Operator.Word</td><td>'in'</td></tr>
<tr><td>Token.Text</td><td>' '</td></tr>
<tr><td>Token.Name.Builtin</td><td>'range'</td></tr>
<tr><td>Token.Punctuation</td><td>'('</td></tr>
<tr><td>Token.Literal.Number.Integer</td><td>'1'</td></tr>
<tr><td>Token.Punctuation</td><td>','</td></tr>
<tr><td>Token.Text</td><td>' '</td></tr>
<tr><td>Token.Literal.Number.Integer</td><td>'11'</td></tr>
<tr><td>Token.Punctuation</td><td>')'</td></tr>
<tr><td>Token.Punctuation</td><td>':'</td></tr>
<tr><td>Token.Text</td><td>'\n'</td></tr>
<tr><td>Token.Text</td><td>'    '</td></tr>
<tr><td>Token.Keyword</td><td>'print'</td></tr>
<tr><td>Token.Punctuation</td><td>'('</td></tr>
<tr><td>Token.Literal.String.Double</td><td>'"'</td></tr>
<tr><td>Token.Literal.String.Double</td><td>'Hello world!'</td></tr>
<tr><td>Token.Literal.String.Double</td><td>'"'</td></tr>
<tr><td>Token.Punctuation</td><td>')'</td></tr>
<tr><td>Token.Text</td><td>'\n'</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: lexer se v&nbsp;žádném případě nesnaží o
nalezení syntaktických (a už vůbec ne sémantických) chyb v&nbsp;programu! Pouze
se snaží rozeznat známé vzorky. To například znamená, že tokenizace proběhne i
pro tento zdrojový kód, který je sémanticky naprosto chybný:</div></p>

<pre>
range(1, "FDA") for while with i
except for for i else
    print("Hello world!")
</pre>

<p>Výsledek tokenizace:</p>

<table>
<tr><th>Typ tokenu</th><th>Řetězec</th></tr>
<tr><td>Token.Name.Builtin</td><td>'range'</td></tr>
<tr><td>Token.Punctuation</td><td>'('</td></tr>
<tr><td>Token.Literal.Number.Integer</td><td>'1'</td></tr>
<tr><td>Token.Punctuation</td><td>','</td></tr>
<tr><td>Token.Text</td><td>' '</td></tr>
<tr><td>Token.Literal.String.Double</td><td>'"'</td></tr>
<tr><td>Token.Literal.String.Double</td><td>'FDA'</td></tr>
<tr><td>Token.Literal.String.Double</td><td>'"'</td></tr>
<tr><td>Token.Punctuation</td><td>')'</td></tr>
<tr><td>Token.Text</td><td>' '</td></tr>
<tr><td>Token.Keyword</td><td>'for'</td></tr>
<tr><td>Token.Text</td><td>' '</td></tr>
<tr><td>Token.Keyword</td><td>'while'</td></tr>
<tr><td>Token.Text</td><td>' '</td></tr>
<tr><td>Token.Keyword</td><td>'with'</td></tr>
<tr><td>Token.Text</td><td>' '</td></tr>
<tr><td>Token.Name</td><td>'i'</td></tr>
<tr><td>Token.Text</td><td>'\n'</td></tr>
<tr><td>Token.Keyword</td><td>'except'</td></tr>
<tr><td>Token.Text</td><td>' '</td></tr>
<tr><td>Token.Keyword</td><td>'for'</td></tr>
<tr><td>Token.Text</td><td>' '</td></tr>
<tr><td>Token.Keyword</td><td>'for'</td></tr>
<tr><td>Token.Text</td><td>' '</td></tr>
<tr><td>Token.Name</td><td>'i'</td></tr>
<tr><td>Token.Text</td><td>' '</td></tr>
<tr><td>Token.Keyword</td><td>'else'</td></tr>
<tr><td>Token.Text</td><td>'\n'</td></tr>
<tr><td>Token.Text</td><td>'    '</td></tr>
<tr><td>Token.Keyword</td><td>'print'</td></tr>
<tr><td>Token.Punctuation</td><td>'('</td></tr>
<tr><td>Token.Literal.String.Double</td><td>'"'</td></tr>
<tr><td>Token.Literal.String.Double</td><td>'Hello world!'</td></tr>
<tr><td>Token.Literal.String.Double</td><td>'"'</td></tr>
<tr><td>Token.Punctuation</td><td>')'</td></tr>
<tr><td>Token.Text</td><td>'\n'</td></tr>
</table>



<p><a name="k05"></a></p>
<h2 id="k05">5. Základní příklad použití: převod zdrojového textu do HTML a LaTeXu s&nbsp;obarvením syntaxe</h2>

<p>Konkrétním způsobem implementace vlastního lexeru, filtrů a formátovačů se
budeme zabývat v&nbsp;dalším textu, ovšem na začátek si ukažme základní příklad
použití knihovny Pygments. První příklad slouží k&nbsp;převodu zdrojového kódu
z&nbsp;Pythonu do HTML, samozřejmě s&nbsp;obarvením syntaxe. Převáděný zdrojový
kód jsme si již ukazovali výše:</p>

<pre>
for i in range(1, 11):
    print("Hello world!")
</pre>

<p>Při převodu je nutné použít dvě třídy &ndash; lexer pro Python (třída
<strong>PythonLexer</strong>) a formátovač pro HTML výstup (knihovna
<strong>HtmlFormatter</strong>). Prozatím nepoužijeme žádné filtry, takže
převod bude triviální a provedeme ho funkcí <strong>highlight</strong>, které
se předá zdrojový kód, použitý lexer a použitý formátovač:</p>

<pre>
from pygments import <strong>highlight</strong>
from pygments.lexers import <strong>PythonLexer</strong>
from pygments.formatters import <strong>HtmlFormatter</strong>
&nbsp;
code = """
for i in range(1, 11):
    print("Hello world!")
"""
&nbsp;
print(<strong>highlight(code, PythonLexer(), HtmlFormatter())</strong>)
</pre>

<p>Výsledkem bude fragment HTML stránky:</p>

*** image ***
<p><i>Obrázek 1: Výsledný fragment HTML stránky vytvořený předchozím
příkladem.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Převod zdrojového textu do HTML a LaTeXu s&nbsp;volitelnou tvorbou uceleného dokumentu</h2>

<p>Získat je možné i úplnou HTML stránku, tj.&nbsp;ucelený dokument
s&nbsp;hlavičkou, patičkou atd. K&nbsp;tomuto účelu se používá volitelný
parametr <strong>full</strong> nastavený na hodnotu <strong>True</strong> a
předaný formátovači:</p>

<pre>
from pygments import <strong>highlight</strong>
from pygments.lexers import <strong>PythonLexer</strong>
from pygments.formatters import <strong>HtmlFormatter</strong>
&nbsp;
code = """
for i in range(1, 11):
    print("Hello world!")
"""
&nbsp;
print(<strong>highlight(code, PythonLexer(), HtmlFormatter(full=True))</strong>)
</pre>

*** image ***
<p><i>Obrázek 2: Úplná podoba vytvořené HTML stránky zobrazené
v&nbsp;prohlížeči.</i></p>

<p>Podobným způsobem můžeme převést zdrojový kód do LaTeXu, a to implicitně ve
zkrácené podobě (bez nových příkazů a maker) určené pro vložení do většího
dokumentu:</p>

<pre>
from pygments import <strong>highlight</strong>
from pygments.lexers import <strong>PythonLexer</strong>
from pygments.formatters import <strong>LatexFormatter</strong>
&nbsp;
code = """
for i in range(1, 11):
    print("Hello world!")
"""
&nbsp;
print(<strong>highlight(code, PythonLexer(), LatexFormatter())</strong>)
</pre>

*** image ***
<p><i>Obrázek 3: Výsledek konverze zdrojového kódu do LaTeXu.</i></p>

<p>Alternativně můžeme vytvořit i samostatný (standalone) dokument, který by
měl být bez dalších změn zpracovatelný LaTeXem popř.&nbsp;samozřejmě i
pdfLaTeXem:</p>

<pre>
from pygments import <strong>highlight</strong>
from pygments.lexers import <strong>PythonLexer</strong>
from pygments.formatters import <strong>LatexFormatter</strong>
&nbsp;
code = """
for i in range(1, 11):
    print("Hello world!")
"""
&nbsp;
print(<strong>highlight(code, PythonLexer(), LatexFormatter(full=True))</strong>)
</pre>

*** image ***
<p><i>Obrázek 4: Výsledek konverze zdrojového kódu do plnohodnotného dokumentu
zpracovatelného LaTeXem (zde je konkrétně ukázána hlavička s&nbsp;několika
TeXovskými makry).</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Výstup na terminál (16 barev, 256 barev, true color)</h2>

<p>Užitečný může být i přímý výstup obarveného zdrojového kódu na
terminál/konzoli. V&nbsp;tomto případě příslušný formátovač vygeneruje escape
sekvence (řídicí znaky), které instruují terminál, jakým způsobem má změnit
styl písma. Na začátku každého řádku je obarvení obnoveno, což je důležité ve
chvíli, kdy je zapotřebí výstup rozdělit na jednotlivé stránky. V&nbsp;současné
verzi knihovny Pygments existují tři formátovače určené pro vytváření escape
sekvencí pro terminál:</p>

<table>
<tr><th>Formátovač</th><th>Význam</th></tr>
<tr><td>TerminalFormatter</td><td>určený pro výstup na běžné emulátory s&nbsp;16 barvami</td></tr>
<tr><td>Terminal256Formatter</td><td>určené pro terminály umožňující zobrazení 256 barev (Xterm apod.)</td></tr>
<tr><td>TerminalTrueColorFormatter</td><td>určené pro terminály umožňující výběr z&nbsp;16 milionů barev (true color)</td></tr>
</table>

<p>U formátovače <strong>TerminalFormatter</strong> lze volit barvu pozadí
(světlá/tmavá) a popř.&nbsp;i zapnout číslování řádků. Obě možnosti jsou
ukázány v&nbsp;dalším demonstračním příkladu:</p>

<pre>
from pygments import <strong>highlight</strong>
from pygments.lexers import <strong>PythonLexer</strong>
from pygments.formatters import <strong>TerminalFormatter</strong>
&nbsp;
code = """
for i in range(1, 11):
    print("Hello world!")
"""
&nbsp;
print(<strong>highlight(code, PythonLexer(), TerminalFormatter())</strong>)
&nbsp;
print("-----------------------")
&nbsp;
print(<strong>highlight(code, PythonLexer(), TerminalFormatter(linenos=True))</strong>)
&nbsp;
print("-----------------------")
&nbsp;
print(<strong>highlight(code, PythonLexer(), TerminalFormatter(bg="light"))</strong>)
&nbsp;
print("-----------------------")
&nbsp;
print(<strong>highlight(code, PythonLexer(), TerminalFormatter(bg="dark"))</strong>)
</pre>

*** image ***
<p><i>Obrázek 5: Výsledek obarvení zdrojového kódu na terminálu s&nbsp;16
barvami. Barva pozadí je nastavena na černou.</i></p>

<p>Další příklad ukazuje použití terminálu, který rozpoznává 256 barev:</p>

<pre>
from pygments import <strong>highlight</strong>
from pygments.lexers import <strong>PythonLexer</strong>
from pygments.formatters import <strong>Terminal256Formatter</strong>
&nbsp;
code = """
for i in range(1, 11):
    print("Hello world!")
"""
&nbsp;
print(<strong>highlight(code, PythonLexer(), Terminal256Formatter())</strong>)
</pre>

*** image ***
<p><i>Obrázek 6: Výsledek obarvení zdrojového kódu na terminálu
rozpoznávajícího minimálně 256 barev. Barva pozadí je opět nastavena na
černou.</i></p>

<p>Třetí příklad je podobný příkladu předchozímu, ovšem předpokládá terminál
s&nbsp;pravými barvami:</p>

<pre>
from pygments import <strong>highlight</strong>
from pygments.lexers import <strong>PythonLexer</strong>
from pygments.formatters import <strong>TerminalTrueColorFormatter</strong>
&nbsp;
code = """
for i in range(1, 11):
    print("Hello world!")
"""
&nbsp;
print(<strong>highlight(code, PythonLexer(), TerminalTrueColorFormatter())</strong>)
</pre>

*** image ***
<p><i>Obrázek 7: Výsledek obarvení zdrojového kódu na terminálu pracujícího
s&nbsp;pravými barvami (true color).</i></p>

<p><div class="rs-tip-major">Poznámka: pro otestování schopností vašeho
terminálu můžete použít skript <a
href="https://gist.github.com/hSATAC/1095100">https://gist.github.com/hSATAC/1095100</a>,
který by u terminálu podporujícího 256 barev měl zobrazit tento
vzorek:</div></p>

*** image ***
<p><i>Obrázek 8: Test, zda terminál podporuje 256 barev.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Export obarveného kódu do grafických formátů: rastrové obrázky a vektorové kresby</h2>

<p>V&nbsp;knihovně Pygments nalezneme i formátovače, jejichž výstupem jsou
rastrové obrázky popř.&nbsp;vektorové kresby. Jedná se o následující
formátovače:</p>

<table>
<tr><th>Formátovač</th><th>Význam</th></tr>
<tr><td>ImageFormatter</td><td>výstup do zvoleného rastrového formátu (ve výchozím nastavení PNG)</td></tr>
<tr><td>JpgImageFormatter</td><td>výstup do rastrového formátu JPEG</td></tr>
<tr><td>BmpImageFormatter</td><td>výstup do rastrového formátu BMP</td></tr>
<tr><td>GifImageFormatter</td><td>výstup do rastrového formátu GIF</td></tr>
<tr><td>SvgFormatter</td><td>výstup do vektorového formátu SVG</td></tr>
</table>

<p>Ukažme si výstup do SVG s&nbsp;využitím formátovače nazvaného příznačně
<strong>SvgFormatter</strong>:</p>

<pre>
from pygments import <strong>highlight</strong>
from pygments.lexers import <strong>PythonLexer</strong>
from pygments.formatters import <strong>SvgFormatter</strong>
&nbsp;
code = """
for i in range(1, 11):
    print("Hello world!")
"""
&nbsp;
print(<strong>highlight(code, PythonLexer(), SvgFormatter())</strong>)
</pre>

<p>Výsledný SVG soubor: <a
href="https://github.com/tisnik/presentations/blob/master/pygments/1.svg">1.svg</a>.</p>

<p>Většinou je nutné přidat do vektorového výkresu světlé pozadí, což je ukázáno na ručně upraveném souboru <a
href="https://github.com/tisnik/presentations/blob/master/pygments/2.svg">2.svg</a>.</p>

*** image ***
<p><i>Obrázek 9: Zobrazení SVG v&nbsp;prohlížečce vektorových výkresů.</i></p>

*** image ***
<p><i>Obrázek 10: Díky lineárním transformacím je možné text rotovat beze
ztráty kvality.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Výpis jednotlivých lexikálních tokenů analyzovaného zdrojového kódu</h2>

<pre>
from pygments import <strong>highlight</strong>
from pygments.lexers import <strong>PythonLexer</strong>
from pygments.formatters import <strong>RawTokenFormatter</strong>
&nbsp;
code = """
for i in range(1, 11):
    print("Hello world!")
"""
&nbsp;
tokens = <strong>highlight(code, PythonLexer(), RawTokenFormatter()</strong>)
&nbsp;
tokens = tokens.decode()
&nbsp;
for token in tokens.split("\n"):
    foobar = token.split("\t")
    if len(foobar) == 2:
        print("{token:30}    {value}".format(token=foobar[0], value=foobar[1]))
</pre>

<pre>
Token.Keyword                     'for'
Token.Text                        ' '
Token.Name                        'i'
Token.Text                        ' '
Token.Operator.Word               'in'
Token.Text                        ' '
Token.Name.Builtin                'range'
Token.Punctuation                 '('
Token.Literal.Number.Integer      '1'
Token.Punctuation                 ','
Token.Text                        ' '
Token.Literal.Number.Integer      '11'
Token.Punctuation                 ')'
Token.Punctuation                 ':'
Token.Text                        '\n'
Token.Text                        '    '
Token.Keyword                     'print'
Token.Punctuation                 '('
Token.Literal.String.Double       '"'
Token.Literal.String.Double       'Hello world!'
Token.Literal.String.Double       '"'
Token.Punctuation                 ')'
Token.Text                        '\n'
</pre>

<pre>
from pygments import <strong>highlight</strong>
from pygments.lexers import <strong>PythonLexer</strong>
from pygments.formatters import <strong>RawTokenFormatter</strong>
&nbsp;
code = """
range(1, "FDA") for while with i
except for for i else
    print("Hello world!")
"""
&nbsp;
tokens = <strong>highlight(code, PythonLexer(), RawTokenFormatter()</strong>)
&nbsp;
tokens = tokens.decode()
&nbsp;
for token in tokens.split("\n"):
    foobar = token.split("\t")
    if len(foobar) == 2:
        print("{token:30}    {value}".format(token=foobar[0], value=foobar[1]))
</pre>

<pre>
Token.Name.Builtin                'range'
Token.Punctuation                 '('
Token.Literal.Number.Integer      '1'
Token.Punctuation                 ','
Token.Text                        ' '
Token.Literal.String.Double       '"'
Token.Literal.String.Double       'FDA'
Token.Literal.String.Double       '"'
Token.Punctuation                 ')'
Token.Text                        ' '
Token.Keyword                     'for'
Token.Text                        ' '
Token.Keyword                     'while'
Token.Text                        ' '
Token.Keyword                     'with'
Token.Text                        ' '
Token.Name                        'i'
Token.Text                        '\n'
Token.Keyword                     'except'
Token.Text                        ' '
Token.Keyword                     'for'
Token.Text                        ' '
Token.Keyword                     'for'
Token.Text                        ' '
Token.Name                        'i'
Token.Text                        ' '
Token.Keyword                     'else'
Token.Text                        '\n'
Token.Text                        '    '
Token.Keyword                     'print'
Token.Punctuation                 '('
Token.Literal.String.Double       '"'
Token.Literal.String.Double       'Hello world!'
Token.Literal.String.Double       '"'
Token.Punctuation                 ')'
Token.Text                        '\n'
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Praktické použití: obarvení zdrojových kódů na terminálu, výstup do SVG atd.</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from sys import argv, exit
&nbsp;
from pygments import <strong>highlight</strong>
from pygments.lexers import <strong>PythonLexer</strong>
from pygments.formatters import <strong>TerminalFormatter</strong>
&nbsp;
if len(argv) &lt;= 1:
    print("Usage: pygments11_highlight_source.py FILENAME")
    exit(1)

with open(argv[1], 'r') as fin:
    code = fin.read()
    print(<strong>highlight(code, PythonLexer(), TerminalFormatter())</strong>)
</pre>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from sys import argv, exit
&nbsp;
from pygments import <strong>highlight</strong>
from pygments.lexers import <strong>PythonLexer</strong>
from pygments.formatters import <strong>SvgFormatter</strong>
&nbsp;
if len(argv) &lt;= 1:
    print("Usage: pygments12_source2svg.py FILENAME &gt; DRAWING.svg")
    exit(1)
&nbsp;
with open(argv[1], 'r') as fin:
    code = fin.read()
    print(<strong>highlight(code, PythonLexer(), SvgFormatter())</strong>)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Specifikace vlastního stylu (barev) při obarvování zdrojových kódů</h2>

<pre>
from pygments import <strong>highlight</strong>
from pygments.lexers import <strong>PythonLexer</strong>
from pygments.formatters import <strong>Terminal256Formatter</strong>
from pygments.style import Style
from pygments.token import Keyword, Name, Comment, String, Error, \
     Number, Operator, Generic
&nbsp;
code = """
for i in range(1, 11):
    print("Hello world!")
"""
&nbsp;
print(<strong>highlight(code, PythonLexer(), Terminal256Formatter())</strong>)
&nbsp;
print("-----------------------")
&nbsp;
&nbsp;
class NewStyle(Style):
    default_style = ""
    styles = {
        Comment:                'italic #888',
        Keyword:                'underline #f00',
        Name.Builtin:           'bold #ff0',
        String:                 '#0f0 bg:#232'
    }
&nbsp;
&nbsp;
print(<strong>highlight(code, PythonLexer(), Terminal256Formatter(style=NewStyle))</strong>)
</pre>

<pre>
from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import Terminal256Formatter
from pygments.style import Style
from pygments.token import Keyword, Name, Comment, String, Error, \
     Number, Operator, Generic

code = """
for i in range(1, 11):
    print("Hello world!")
"""

print(highlight(code, PythonLexer(), Terminal256Formatter()))

print("-----------------------")


class NewStyle(Style):
    default_style = ""
    styles = {
        Comment:                'italic #ansidarkgray',
        Keyword:                'underline #ansired',
        Name.Builtin:           'bold #ansiyellow',
        String:                 '#ansilightgray'
    }


print(highlight(code, PythonLexer(), Terminal256Formatter(style=NewStyle)))
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Nastavení filtru pro zpracování výstupu z&nbsp;lexeru</h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. Dostupné standardní filtry</h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. Obarvení vybraných slov</h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Obarvení tagů v&nbsp;komentářích</h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Zvýraznění bílých znaků</h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. Vytvoření vlastního lexeru</h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. Jednoduchý lexer založený na rozpoznávání klíčových slov a regulárních výrazů</h2>

<pre>
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Obarvení syntaxe na příkazovém řádku: kombinace knihoven Pygments a promtp_toolkit</h2>

<pre>
from pygments.lexers import PythonLexer
&nbsp;
from prompt_toolkit.styles import Style
from prompt_toolkit.lexers import PygmentsLexer
from prompt_toolkit import PromptSession
&nbsp;
&nbsp;
def <strong>show_help</strong>():
    print("""Help
--------
quit - quit this application
exit - exit from this application
eval - evaluate
""")
&nbsp;
&nbsp;
new_tui_style = Style.from_dict({
    'rprompt': 'bg:#ff0066 #ffffff',
    'bottom-toolbar': 'bg:#ffffff #333333 reverse',
    'prompt': 'bg:#ansiyellow #000000',
    })
&nbsp;
&nbsp;
s = PromptSession()
&nbsp;
while True:
    try:
        cmd = s.prompt("Command: ",
                       validate_while_typing=True,
                       enable_open_in_editor=True,
                       bottom_toolbar="Available commands: quit, exit, help, eval",
                       rprompt="Don't panic!",
                       style=new_tui_style,
                       lexer=PygmentsLexer(PythonLexer))
        if cmd in {"q", "quit", "Quit", "exit", "Exit"}:
            break
        elif cmd in {"help", "Help", "?"}:
            show_help()
        elif cmd == "eval":
            print("42")
    except KeyboardInterrupt:
        continue
    except EOFError:
        break
</pre>

<p>V&nbsp;dalším příkladu je použita syntaxe odpovídající programovacímu jazyku Clojure:</p>

<pre>
cmd = s.prompt("Command: ",
               <strong>lexer=PygmentsLexer(ClojureLexer)</strong>)
</pre>

<img src="https://i.iinfo.cz/images/183/prompt-toolkit-2-19.png" class="image-334209" alt="&#160;" width="806" height="531" />
<p><i>Obrázek X: Zvýraznění syntaxe jazyka Clojure.</i></p>

<pre>
from pygments.lexers.jvm import ClojureLexer
&nbsp;
from prompt_toolkit.styles import Style
from prompt_toolkit.lexers import PygmentsLexer
from prompt_toolkit import PromptSession
&nbsp;
&nbsp;
def <strong>show_help</strong>():
    print("""Help
--------
quit - quit this application
exit - exit from this application
eval - evaluate
""")
&nbsp;
&nbsp;
new_tui_style = Style.from_dict({
    'rprompt': 'bg:#ff0066 #ffffff',
    'bottom-toolbar': 'bg:#ffffff #333333 reverse',
    'prompt': 'bg:#ansiyellow #000000',
    })
&nbsp;
&nbsp;
s = PromptSession()
&nbsp;
while True:
    try:
        cmd = s.prompt("Command: ",
                       validate_while_typing=True,
                       enable_open_in_editor=True,
                       bottom_toolbar="Available commands: quit, exit, help, eval",
                       rprompt="Don't panic!",
                       style=new_tui_style,
                       lexer=PygmentsLexer(ClojureLexer))
        if cmd in {"q", "quit", "Quit", "exit", "Exit"}:
            break
        elif cmd in {"help", "Help", "?"}:
            show_help()
        elif cmd == "eval":
            print("42")
    except KeyboardInterrupt:
        continue
    except EOFError:
        break
</pre>




<p><a name="k18"></a></p>
<h2 id="k18">18. Obarvení syntaxe na terminálu v&nbsp;knihovně prompt_toolkit</h2>

<pre>
from pygments import lex
from pygments.token import Token
from pygments.lexers import PythonLexer
&nbsp;
from prompt_toolkit.formatted_text import PygmentsTokens
from prompt_toolkit import print_formatted_text
&nbsp;
code = """
for i in range(1, 10):
    print(i)
    if i &gt; 5:
        break
    do_something(i)
"""
&nbsp;
tokens = list(lex(code, lexer=PythonLexer()))
print_formatted_text(PygmentsTokens(tokens))
</pre>

<img src="https://i.iinfo.cz/images/325/prompt-toolkit-3-9.png" class="image-334648" alt="&#160;" width="806" height="531" />
<p><i>Obrázek X: Obarvení textu na základě lexeru vytvořeného pro programovací
jazyk Python.</i></p>

<pre>
from pygments import lex
from pygments.token import Token
from pygments.lexers.basic import CbmBasicV2Lexer
&nbsp;
from prompt_toolkit.formatted_text import PygmentsTokens
from prompt_toolkit import print_formatted_text
&nbsp;
code = """
10 FOR I=0 TO 63
20 FOR J=43 TO 0 STEP -1
30 LET CX=(I-52)/31
40 LET CY=(J-22)/31
50 LET ZX=0
60 LET ZY=0
70 LET ITER=0
80 LET ZX2=ZX*ZX
85 LET ZY2=ZY*ZY
90 LET ZY=2*ZX*ZY+CY
100 LET ZX=ZX2-ZY2+CX
110 LET ITER=ITER+1
120 IF ZX2+ZY2&lt;=4 AND ITER&lt;200 THEN GOTO 80
130 IF ITER=200 THEN PLOT I, J
140 NEXT J
150 NEXT I
"""
&nbsp;
tokens = list(lex(code, lexer=CbmBasicV2Lexer()))
print_formatted_text(PygmentsTokens(tokens))
</pre>

<img src="https://i.iinfo.cz/images/325/prompt-toolkit-3-10.png" class="image-334649" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 11: Obarvení textu na základě lexeru vytvořeného pro programovací
jazyk BASIC (zde konkrétně Commodore BASIC).</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Popis</th><th>Odkaz</th></tr>
<tr><td>1</td><td>pygments01_basic_usage_html_output.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/pygments01_basic_usage_html_output.py">https://github.com/tisnik/presentations/blob/master/pygments/pygments01_basic_usage_html_output.py</a></td></tr>
<tr><td>2</td><td>pygments02_basic_usage_full_html_output.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/pygments02_basic_usage_full_html_output.py">https://github.com/tisnik/presentations/blob/master/pygments/pygments02_basic_usage_full_html_output.py</a></td></tr>
<tr><td>3</td><td>pygments03_basic_usage_full_latex_output.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/pygments03_basic_usage_full_latex_output.py">https://github.com/tisnik/presentations/blob/master/pygments/pygments03_basic_usage_full_latex_output.py</a></td></tr>
<tr><td>4</td><td>pygments04_basic_usage_latex_output.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/pygments04_basic_usage_latex_output.py">https://github.com/tisnik/presentations/blob/master/pygments/pygments04_basic_usage_latex_output.py</a></td></tr>
<tr><td>5</td><td>pygments05_terminal_formatter.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/pygments05_terminal_formatter.py">https://github.com/tisnik/presentations/blob/master/pygments/pygments05_terminal_formatter.py</a></td></tr>
<tr><td>6</td><td>pygments06_terminal256_formatter.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/pygments06_terminal256_formatter.py">https://github.com/tisnik/presentations/blob/master/pygments/pygments06_terminal256_formatter.py</a></td></tr>
<tr><td>7</td><td>pygments07_terminal_true_color_formatter.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/pygments07_terminal_true_color_formatter.py">https://github.com/tisnik/presentations/blob/master/pygments/pygments07_terminal_true_color_formatter.py</a></td></tr>
<tr><td>8</td><td>pygments08_svg_formatter.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/pygments08_svg_formatter.py">https://github.com/tisnik/presentations/blob/master/pygments/pygments08_svg_formatter.py</a></td></tr>
<tr><td>9</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments</a></td></tr>
<tr><td>11</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments</a></td></tr>
<tr><td>12</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments</a></td></tr>
<tr><td>13</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments</a></td></tr>
<tr><td>14</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/pygments/">https://github.com/tisnik/presentations/blob/master/pygments</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Pygments - Python syntax highlighter<br />
<a href="http://pygments.org/">http://pygments.org/</a>
</li>

<li>Pygments (dokumentace)<br />
<a href="http://pygments.org/docs/">http://pygments.org/docs/</a>
</li>

<li>Write your own lexer<br />
<a href="http://pygments.org/docs/lexerdevelopment/">http://pygments.org/docs/lexerdevelopment/</a>
</li>

<li>Jazyky podporované knihovnou Pygments<br />
<a href="http://pygments.org/languages/">http://pygments.org/languages/</a>
</li>

<li>Pygments FAQ<br />
<a href="http://pygments.org/faq/">http://pygments.org/faq/</a>
</li>

<li>Pygments 2.2.0 (na PyPi)<br />
<a href="https://pypi.org/project/Pygments/">https://pypi.org/project/Pygments/</a>
</li>

<li>Syntax highlighting<br />
<a href="https://en.wikipedia.org/wiki/Syntax_highlighting">https://en.wikipedia.org/wiki/Syntax_highlighting</a>
</li>

<li>Lexical analysis<br />
<a href="https://en.wikipedia.org/wiki/Lexical_analysis">https://en.wikipedia.org/wiki/Lexical_analysis</a>
</li>

<li>Lexical grammar<br />
<a href="https://en.wikipedia.org/wiki/Lexical_grammar">https://en.wikipedia.org/wiki/Lexical_grammar</a>
</li>

<li>Compiler Construction/Lexical analysis<br />
<a href="https://en.wikibooks.org/wiki/Compiler_Construction/Lexical_analysis">https://en.wikibooks.org/wiki/Compiler_Construction/Lexical_analysis</a>
</li>

<li>Compiler Design - Lexical Analysis<br />
<a href="https://www.tutorialspoint.com/compiler_design/compiler_design_lexical_analysis.htm">https://www.tutorialspoint.com/compiler_design/compiler_design_lexical_analysis.htm</a>
</li>

<li>Lexical Analysis - An Intro<br />
<a href="https://www.scribd.com/document/383765692/Lexical-Analysis">https://www.scribd.com/document/383765692/Lexical-Analysis</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Rosetta_Code">http://rosettacode.org/wiki/Rosetta_Code</a>
</li>

<li>Mandelbrot set: Sinclair ZX81 BASIC<br />
<a href="http://rosettacode.org/wiki/Mandelbrot_set#Sinclair_ZX81_BASIC">http://rosettacode.org/wiki/Mandelbrot_set#Sinclair_ZX81_BASIC</a>
</li>

<li>Lexikální analýza (Wikipedia)<br />
<a href="https://cs.wikipedia.org/wiki/Lexik%C3%A1ln%C3%AD_anal%C3%BDza">https://cs.wikipedia.org/wiki/Lexik%C3%A1ln%C3%AD_anal%C3%BDza</a>
</li>

<li>Quex, a lexical analyzer generator<br />
<a href="http://quex.sourceforge.net/">http://quex.sourceforge.net/</a>
</li>

<li>ATARI BASIC &ndash; tokenizace<br />
<a href="https://www.atariarchives.org/dere/chapt10.php">https://www.atariarchives.org/dere/chapt10.php</a>
</li>

<li>BASIC token<br />
<a href="https://www.c64-wiki.com/wiki/BASIC_token">https://www.c64-wiki.com/wiki/BASIC_token</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

