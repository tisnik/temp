<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Knihovna Bokeh: zobrazení většího množství grafů, interaktivní prvky na stránce s grafy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Knihovna Bokeh: zobrazení většího množství grafů, interaktivní prvky na stránce s grafy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Jedním z rozdílů mezi knihovnou Matplotlib a Bokeh je fakt, že Bokeh umožňuje na plochu stránky se zobrazeným grafem vložit i interaktivní ovládací prvky. Uživatel tak může měnit styl zobrazení grafu, povolovat a zakazovat zobrazení určitých dat atd.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Knihovna Bokeh: zobrazení většího množství grafů, interaktivní prvky na stránce s&nbsp;grafy</a></p>
<p><a href="#k02">*** 2. Glyfy (tvary) použité pro vykreslení bodů v&nbsp;grafu</a></p>
<p><a href="#k03">3. Vykreslení průběhu parametrické funkce pomocí metody <strong>scatter</strong></a></p>
<p><a href="#k04">4. Lorenzův atraktor</a></p>
<p><a href="#k05">5. Vykreslení Lorenzova atraktoru v&nbsp;2D grafu</a></p>
<p><a href="#k06">6. Zobrazení dvou grafů na jediné stránce</a></p>
<p><a href="#k07">7. Zobrazení tří grafů umístěných do mřížky</a></p>
<p><a href="#k08">8. Explicitní specifikace velikosti grafů umístěných do mřížky</a></p>
<p><a href="#k09">9. Specifikace průhlednosti vykreslovaných &bdquo;stop&ldquo;</a></p>
<p><a href="#k10">10. Změna barvy jednotlivých bodů (stop) v&nbsp;grafu</a></p>
<p><a href="#k11">11. Funkce s&nbsp;průběhem vykresleným skutečnými body</a></p>
<p><a href="#k12">*** 12. Vykreslení heatmapy</a></p>
<p><a href="#k13">13. Interaktivní ovládací prvky na stránce s&nbsp;grafem</a></p>
<p><a href="#k14">14. Příklad jednoduchého interaktivního prvku &ndash; tlačítka</a></p>
<p><a href="#k15">*** 15. Modifikace grafu s&nbsp;využitím ovládacích prvků</a></p>
<p><a href="#k16">*** 16. Přidání ovládacího prvku pro výběr barvy</a></p>
<p><a href="#k17">17. Přidání ovládacího prvku pro výběr velikosti vykreslovaných &bdquo;stop&ldquo;</a></p>
<p><a href="#k18">18. Přidání ovládacího prvku pro výběr průhlednosti vykreslovaných &bdquo;stop&ldquo;</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Knihovna Bokeh: zobrazení většího množství grafů, interaktivní prvky na stránce s&nbsp;grafy</h2>

<p></p>


<p><a name="k02"></a></p>
<h2 id="k02">2. Glyfy (tvary) použité pro vykreslení bodů v&nbsp;grafu</h2>

<p>Zdrojový kód dnešního prvního demonstračního příkladu je dostupný na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/19_styles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/19_styles.py</a>:</p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.plotting`</i>
&nbsp;
from bokeh.plotting import figure, show
&nbsp;
<i># taktéž budeme potřebovat některé funkce z knihovny `numpy`</i>
import numpy as np
&nbsp;
values = 50
&nbsp;
<i># hodnoty na x-ové ose</i>
x = np.linspace(0, 100, values)
&nbsp;
<i># hodnoty na y-ové ose</i>
y1 = np.full(values, 10)
y2 = np.full(values, 9)
y3 = np.full(values, 8)
y4 = np.full(values, 7)
y5 = np.full(values, 6)
y6 = np.full(values, 5)
y7 = np.full(values, 4)
y8 = np.full(values, 3)
y9 = np.full(values, 2)
y10 = np.full(values, 1)
&nbsp;
<i># plocha pro graf</i>
p = figure(title="Styly vykreslení", x_axis_label="x", y_axis_label="y")
&nbsp;
<i># vykreslení průběhů</i>
p.square_dot(x, y1, legend_label="square_dot", line_width=1, color="#f00000")
p.circle(x, y2, legend_label="circle", line_width=1, color="#f00020")
p.asterisk(x, y3, legend_label="asterisk", line_width=1, color="#e00040")
p.circle_cross(x, y4, legend_label="circle_cross", line_width=1, color="#c00060")
p.circle_dot(x, y5, legend_label="circle_dot", line_width=1, color="#a00080")
p.cross(x, y6, legend_label="cross", line_width=1, color="#8000a0")
p.dot(x, y7, legend_label="dot", line_width=1, color="#6000c0")
p.plus(x, y8, legend_label="plus", line_width=1, color="#4000e0")
p.dash(x, y9, legend_label="dash", line_width=1, color="#2000f0")
p.line(x, y10, legend_label="line", line_width=1, color="#0000f0")
&nbsp;
<i># vykreslení grafu do plochy webové stránky</i>
show(p)
</pre>

*** image ***
<p><i>Obrázek 1: </i></p>

<p>Zdrojový kód dnešního druhého demonstračního příkladu je dostupný na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/20_styles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/20_styles.py</a>:</p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.plotting`</i>
&nbsp;
from bokeh.plotting import figure, show
&nbsp;
<i># taktéž budeme potřebovat některé funkce z knihovny `numpy`</i>
import numpy as np
&nbsp;
values = 50
&nbsp;
<i># hodnoty na x-ové ose</i>
x = np.linspace(0, 100, values)
&nbsp;
<i># hodnoty na y-ové ose</i>
y1 = np.full(values, 10)
y2 = np.full(values, 9)
y3 = np.full(values, 8)
y4 = np.full(values, 7)
y5 = np.full(values, 6)
y6 = np.full(values, 5)
y7 = np.full(values, 4)
y8 = np.full(values, 3)
y9 = np.full(values, 2)
y10 = np.full(values, 1)
&nbsp;
<i># plocha pro graf</i>
p = figure(title="Styly vykreslení", x_axis_label="x", y_axis_label="y")
&nbsp;
<i># vykreslení průběhů</i>
p.square_dot(x, y1, legend_label="square_dot", line_width=3, color="#f00000")
p.circle(x, y2, legend_label="circle", line_width=3, color="#f00020")
p.asterisk(x, y3, legend_label="asterisk", line_width=3, color="#e00040")
p.circle_cross(x, y4, legend_label="circle_cross", line_width=3, color="#c00060")
p.circle_dot(x, y5, legend_label="circle_dot", line_width=3, color="#a00080")
p.cross(x, y6, legend_label="cross", line_width=3, color="#8000a0")
p.dot(x, y7, legend_label="dot", line_width=3, color="#6000c0")
p.plus(x, y8, legend_label="plus", line_width=3, color="#4000e0")
p.dash(x, y9, legend_label="dash", line_width=3, color="#2000f0")
p.line(x, y10, legend_label="line", line_width=3, color="#0000f0")
&nbsp;
<i># vykreslení grafu do plochy webové stránky</i>
show(p)
</pre>

*** image ***
<p><i>Obrázek 2: </i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Vykreslení průběhu parametrické funkce pomocí metody <strong>scatter</strong></h2>

<p>Připomeňme si nyní, jakým způsobem jsme vykreslili nějakou parametrickou
křivku, například spirálu. Pro vykreslení jsme prozatím použili metodu
<strong>line</strong>, která jednotlivé body propojila úsečkami:</p>

<pre>
...
...
...
<i># plocha pro graf</i>
p = figure(title="Spiral", x_axis_label='x', y_axis_label='y')
&nbsp;
<i># vykreslení průběhu</i>
p.line(y1, y2, line_width=2, color="blue")
</pre>

<p>V&nbsp;případě, že je bodů velké množství, je výhodnější použít metodu
<strong>scatter</strong>, která namísto úseček vykreslí nepropojené
&bdquo;stopy&ldquo;. Volání této metody je podobné volání metody
<strong>line</strong>, ovšem musíme si dát pozor na to, že se změnila jména
některých pojmenovaných parametrů:</p>

<pre>
<i># vykreslení průběhu</i>
<strong>p.scatter(x, y, size=5, color="blue")</strong>
</pre>

<p>Výsledek může vypadat následovně:</p>

*** image ***
<p><i>Obrázek 3: Graf parametrické funkce vykreslený metodou <strong>scatter</strong>.</i></p>

<p>Zdrojový kód tohoto demonstračního příkladu je dostupný na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/21_scatter.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/21_scatter.py</a></p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.plotting`</i>
&nbsp;
from bokeh.plotting import figure, show
&nbsp;
<i># taktéž budeme potřebovat některé funkce z knihovny `numpy`</i>
import numpy as np
&nbsp;
<i># vykreslení průběhu funkce sin</i>
&nbsp;
<i># počet bodů na spirále</i>
points = 150
&nbsp;
<i># úhel v polárním grafu</i>
theta = np.linspace(0.01, 8 * np.pi, points)
&nbsp;
<i># koeficient spirály</i>
k = 0.15
&nbsp;
<i># funkce: vzdálenost od středu</i>
radius = np.exp(k * theta)
&nbsp;
x = radius * np.sin(theta)
&nbsp;
y = radius * np.cos(theta)
&nbsp;
<i># plocha pro graf</i>
p = figure(title="Spiral", x_axis_label="x", y_axis_label="y")
&nbsp;
<i># vykreslení průběhu</i>
<strong>p.scatter(x, y, size=5, color="blue")</strong>
&nbsp;
<i># vykreslení grafu do plochy webové stránky</i>
show(p)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Lorenzův atraktor</h2>

<p>Poměrně vděčným příkladem funkce, kterou lze zobrazit rozličným způsobem
(trojice grafů, graf v&nbsp;3D prostoru atd.) je dynamický systém
s&nbsp;takzvaným <i>podivným atraktorem</i>, který je nazvaný <i>Lorenzův
atraktor</i> podle svého objevitele. Tento systém sestávající ze tří
dynamických rovnic použil Edward Lorenz v&nbsp;roce 1963 při simulaci vývoje
počasí (resp.&nbsp;ve velmi zjednodušeném modelu počasí). Na tomto systému byla
také numericky a analyticky ověřena velká citlivost na počáteční podmínky
(někdy také nazývaná &bdquo;motýlí efekt&ldquo;). Pro upřesnění je však nutné
říci, že při simulaci na počítači vlastně získáme atraktor, jenž je periodický.
Je to z&nbsp;toho důvodu, že pro zobrazení číselných hodnot je použito
konečného počtu bitů, z&nbsp;toho nutně vyplývá, že se po určitém počtu kroků
(který je však obrovský, takže tento jev mnohdy nezaregistrujeme) začne dráha
Lorenzova atraktoru překrývat. V&nbsp;matematicky přesném modelu však tato
situace nenastane, každá smyčka funkce bude mít unikátní tvar a dráhy se
nebudou překrývat, pouze protínat.</p>

<p>Diferenciální rovnice Lorenzova atraktoru mají po převodu na diferenční tvar
následující formát:</p>

<pre>
dx/dt = &sigma; (y-x)
dy/dt = x(&rho; - z) - y
dz/dt = xy - &Beta;z
</pre>

<p>Takže pro iterativní (samozřejmě že nepřesný) výpočet můžeme pracovat
s&nbsp;následujícími vztahy, které pro dostatečně malé <i>dt</i> vedou
k&nbsp;výpočtu bodů tvořících Lorenzův atraktor:</p>

<pre>
x<sub>n+1</sub>=x<sub>n</sub>+(&sigma; (y-x)) dt
y<sub>n+1</sub>=y<sub>n</sub>+(x(&rho; - z) - y) dt
z<sub>n+1</sub>=z<sub>n</sub>+(xy - &Beta;z) dt
</pre>

<p>Podívejme se nyní na způsob implementace této funkce v&nbsp;Pythonu, což je
snadné:</p>

<pre>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s*(y - x)
    y_dot = r*x - y - x*z
    z_dot = x*y - b*z
    return x_dot, y_dot, z_dot
</pre>

<p>A výpočtu sekvence bodů ležících na atraktoru (resp.&nbsp;tvořících
atraktor):</p>

<pre>
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0., 1., 1.05)
&nbsp;
<i># vlastní výpočet atraktoru (resp. bodů na něm ležících)</i>
for i in range(n-1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i+1] = x[i] + x_dot * dt
    y[i+1] = y[i] + y_dot * dt
    z[i+1] = z[i] + z_dot * dt
</pre>

<p>Vlastní zobrazení pak může probíhat mnoha způsoby, z&nbsp;nichž některé si
ukážeme dále.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Vykreslení Lorenzova atraktoru v&nbsp;2D grafu</h2>

<p>Nyní se podívejme na způsob zobrazení Lorenzova atraktoru v&nbsp;jednoduchém
2D grafu. To vlastně znamená, že původní trojrozměrný dynamický systém
zjednodušíme (ovšem nutno podotknout, že jen pro potřeby zobrazení, nikoli při
výpočtu) na 2D systém. Existuje mnoho způsobů zobrazení Lorenzova atraktoru. My
prozatím použijeme ten nejvíce přímočarý způsob &ndash; jednotlivé vypočtené
body budou skutečně zobrazeny formou bodů. Využijeme tedy tento kód:</p>

<pre>
<i># plocha pro graf</i>
p = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="y")
&nbsp;
<i># vykreslení průběhu</i>
<strong>p.scatter(x, y, size=1, color="blue")</strong>
</pre>

<p>kde <strong>x</strong> a <strong>y</strong> jsou vektory hodnot vypočtené
tak, jak jsme si to vysvětlili <a href="#k04">v&nbsp;předchozí
kapitole</a>.</p>

*** image ***
<p><i>Obrázek 4: Lorenzův atraktor zobrazený na ploše webové stránky.</i></p>

<p>Zdrojový kód tohoto demonstračního příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/22_lorenz_attractor.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/22_lorenz_attractor.py</a>:</p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.plotting`</i>
&nbsp;
from bokeh.plotting import figure, show
&nbsp;
<i># taktéž budeme potřebovat některé funkce z knihovny `numpy`</i>
import numpy as np
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s * (y - x)
    y_dot = r * x - y - x * z
    z_dot = x * y - b * z
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 10000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0.0, 1.0, 1.05)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># plocha pro graf</i>
p = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="y")
&nbsp;
<i># vykreslení průběhu</i>
p.scatter(x, y, size=1, color="blue")
&nbsp;
<i># vykreslení grafu do plochy webové stránky</i>
show(p)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zobrazení dvou grafů na jediné stránce</h2>

<p>V&nbsp;případě Lorenzova atraktoru, což je trojrozměrný objekt, je vhodné
použít buď 3D graf (to však prozatím neumíme), nebo zobrazit atraktor
z&nbsp;více pohledů, například z&nbsp;půdorysu, nárysu a bokorysu.
V&nbsp;takovém případě je nutné zobrazit na ploše stránky větší počet grafů.
Nejjednodušší je umístění grafů pod sebe (více řádků, jediný sloupec) nebo
vedle sebe (více sloupců, jediný řádek). Podívejme se nyní na způsob zobrazení
dvou grafů vedle sebe. Nejprve jsou vytvořeny oba grafy:</p>

<pre>
<i># plocha pro první graf</i>
p1 = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="y")
&nbsp;
<i># vykreslení průběhu</i>
p1.scatter(x, y, size=1, color="blue")
&nbsp;
<i># plocha pro druhý graf</i>
p2 = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="z")
&nbsp;
<i># vykreslení průběhu</i>
p2.scatter(x, z, size=1, color="blue")
</pre>

<p>A následně jsou oba grafy zobrazeny:</p>

<pre>
<i># vykreslení grafu do plochy webové stránky</i>
<strong>show(row(p1, p2))</strong>
</pre>

<p>S&nbsp;tímto výsledkem:</p>

*** image ***
<p><i>Obrázek 5: Dva grafy zobrazené na jedné stránce.</i></p>

<p>Zdrojový kód tohoto demonstračního příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/23_row_plots.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/23_row_plots.py</a>:</p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.plotting`</i>
&nbsp;
from bokeh.plotting import figure, show, row
&nbsp;
<i># taktéž budeme potřebovat některé funkce z knihovny `numpy`</i>
import numpy as np
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s * (y - x)
    y_dot = r * x - y - x * z
    z_dot = x * y - b * z
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 10000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0.0, 1.0, 1.05)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># plocha pro první graf</i>
p1 = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="y")
&nbsp;
<i># vykreslení průběhu</i>
p1.scatter(x, y, size=1, color="blue")
&nbsp;
<i># plocha pro druhý graf</i>
p2 = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="z")
&nbsp;
<i># vykreslení průběhu</i>
p2.scatter(x, z, size=1, color="blue")
&nbsp;
<i># vykreslení grafu do plochy webové stránky</i>
<strong>show(row(p1, p2))</strong>
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Zobrazení tří grafů umístěných do mřížky</h2>

<p>Ve skutečnosti můžeme grafy zobrazit i do mřížky, čímž se do určité míry
přibližujeme například k&nbsp;možnostem balíčku <i>Lattice</i> pro programovací
jazyk R (viz též článek <a
href="https://www.root.cz/clanky/zaklady-tvorby-grafu-v-programovacim-jazyku-r-typy-grafu-v-knihovne-lattice/#k01">Základy
tvorby grafů v&nbsp;programovacím jazyku R: knihovna lattice</a>). Podívejme se
nyní na způsob vykreslení tří pohledů na Lorenzův atraktor. Nejdříve opět
vytvoříme trojici grafů:</p>

<pre>
<i># plocha pro první graf</i>
p1 = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="y")
&nbsp;
<i># vykreslení průběhu</i>
p1.scatter(x, y, size=1, color="blue")
&nbsp;
<i># plocha pro druhý graf</i>
p2 = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="z")
&nbsp;
<i># vykreslení průběhu</i>
p2.scatter(x, z, size=1, color="darkred")
&nbsp;
<i># plocha pro třetí graf</i>
p3 = figure(title="Lorenz attractor", x_axis_label="y", y_axis_label="z")
&nbsp;
<i># vykreslení průběhu</i>
p3.scatter(y, z, size=1, color="darkgreen")
</pre>

<p>A následně s&nbsp;využitím správce rozvržení <strong>grid</strong> tyto tři
grafy umístíme na plochu stránky:</p>

<pre>
<i># vykreslení grafu do plochy webové stránky</i>
<strong>show(grid([[p2, p3], p1]))</strong>
</pre>

<p>S&nbsp;následujícím výsledkem:</p>

*** image ***
<p><i>Obrázek 6: Trojice grafů zobrazená na ploše stránky.</i></p>

<p><div class="rs-tip-major">Poznámka: pochopitelně je možné správci rozvržení
<strong>grid</strong> předat větší počet sloupců a/nebo řádků.</div></p>

<p>Zdrojový kód tohoto demonstračního příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/24_grid_plots.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/24_grid_plots.py</a>:</p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.plotting`</i>
&nbsp;
from bokeh.plotting import figure, show
from bokeh.layouts import grid
&nbsp;
<i># taktéž budeme potřebovat některé funkce z knihovny `numpy`</i>
import numpy as np
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s * (y - x)
    y_dot = r * x - y - x * z
    z_dot = x * y - b * z
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 10000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0.0, 1.0, 1.05)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># plocha pro první graf</i>
p1 = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="y")
&nbsp;
<i># vykreslení průběhu</i>
p1.scatter(x, y, size=1, color="blue")
&nbsp;
<i># plocha pro druhý graf</i>
p2 = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="z")
&nbsp;
<i># vykreslení průběhu</i>
p2.scatter(x, z, size=1, color="darkred")
&nbsp;
<i># plocha pro třetí graf</i>
p3 = figure(title="Lorenz attractor", x_axis_label="y", y_axis_label="z")
&nbsp;
<i># vykreslení průběhu</i>
p3.scatter(y, z, size=1, color="darkgreen")
&nbsp;
<i># vykreslení grafu do plochy webové stránky</i>
<strong>show(grid([[p2, p3], p1]))</strong>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Explicitní specifikace velikosti grafů umístěných do mřížky</h2>

<p>Mnohdy je nutné upravit velikost grafů umístěných do mřížky &ndash;
v&nbsp;naprosté většině případů budeme chtít grafy zmenšit. To se provede velmi
snadno &ndash; specifikací šířky a výšky jednotlivých grafů tak, jak je to
patrné z&nbsp;následujícího kódu:</p>

<pre>
<i># plocha pro první graf</i>
p1 = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="y", <strong>width=300</strong>, <strong>height=300</strong>)
&nbsp;
<i># plocha pro druhý graf</i>
p2 = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="z", <strong>width=300</strong>, <strong>height=300</strong>)
&nbsp;
<i># plocha pro třetí graf</i>
p3 = figure(title="Lorenz attractor", x_axis_label="y", y_axis_label="z", <strong>width=300</strong>, <strong>height=300</strong>)
</pre>

<p>Výsledkem by měla být stránka, v&nbsp;níž jsou jednotlivé grafy vykresleny o
velikosti přibližně 300&times;300 pixelů:</p>

*** image ***
<p><i>Obrázek 7: Trojice grafů, z&nbsp;nichž každý má velikost přibližně
300&times;300 pixelů.</i></p>

<p>Zdrojový kód tohoto demonstračního příkladu je dostupný na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/25_grid_plot_sizes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/25_grid_plot_sizes.py</a></p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.plotting`</i>
&nbsp;
from bokeh.plotting import figure, show
from bokeh.layouts import grid
&nbsp;
<i># taktéž budeme potřebovat některé funkce z knihovny `numpy`</i>
import numpy as np
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s * (y - x)
    y_dot = r * x - y - x * z
    z_dot = x * y - b * z
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 10000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0.0, 1.0, 1.05)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># plocha pro první graf</i>
p1 = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="y", <strong>width=300</strong>, <strong>height=300</strong>)
&nbsp;
<i># vykreslení průběhu</i>
p1.scatter(x, y, size=0.5, color="blue")
&nbsp;
<i># plocha pro druhý graf</i>
p2 = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="z", <strong>width=300</strong>, <strong>height=300</strong>)
&nbsp;
<i># vykreslení průběhu</i>
p2.scatter(x, z, size=0.5, color="darkred")
&nbsp;
<i># plocha pro třetí graf</i>
p3 = figure(title="Lorenz attractor", x_axis_label="y", y_axis_label="z", <strong>width=300</strong>, <strong>height=300</strong>)
&nbsp;
<i># vykreslení průběhu</i>
p3.scatter(y, z, size=0.5, color="darkgreen")
&nbsp;
<i># vykreslení grafu do plochy webové stránky</i>
show(grid([[p2, p3], p1]))
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Specifikace průhlednosti vykreslovaných &bdquo;stop&ldquo;</h2>

<p>Zejména v&nbsp;případě vykreslování parametrických funkcí s&nbsp;využitím
metody <strong>splatter</strong> může být počet vykreslovaných bodů velmi velký
a můžeme chtít zvýraznit míru &bdquo;nahuštění&ldquo; těchto bodů. Pro tyto
účely nám může pomoci změnit průhlednost vykreslování jednotlivých bodů
(připomeňme si, že se vlastně nejedná o body, ale mnohdy o větší glyfy &ndash;
tvary). Průhlednost se specifikuje nepovinnými parametry <strong>alpha</strong>
a <strong>line_alpha</strong> tak, jak je to ukázáno na následujícím úryvku
kódu. Typicky bývá průhlednost nastavena v&nbsp;rozsahu od 0 do 1:</p>

<pre>
<i># vykreslení prvního průběhu</i>
p1.scatter(x, y, size=0.5, color="blue", <strong>alpha=0.4</strong>)
&nbsp;
<i># vykreslení druhého průběhu</i>
p2.scatter(x, z, size=0.5, color="darkred", <strong>alpha=0.4</strong>)
&nbsp;
<i># vykreslení třetího průběhu</i>
p3.scatter(y, z, size=0.5, color="darkgreen", <strong>alpha=0.4</strong>)
</pre>

<p>Po této úpravě by měly výsledné grafy zobrazené na webové stránce vypadat
následovně:</p>

*** image ***
<p><i>Obrázek 8: Průhlednost vykreslovaných &bdquo;stop&ldquo; je nastavena na
40%.</i></p>

<p>Zdrojový kód tohoto demonstračního příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/26_alpha.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/26_alpha.py</a>:</p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.plotting`</i>
&nbsp;
from bokeh.plotting import figure, show
from bokeh.layouts import grid
&nbsp;
<i># taktéž budeme potřebovat některé funkce z knihovny `numpy`</i>
import numpy as np
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s * (y - x)
    y_dot = r * x - y - x * z
    z_dot = x * y - b * z
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 10000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0.0, 1.0, 1.05)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># plocha pro první graf</i>
p1 = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="y", width=300, height=300)
&nbsp;
<i># vykreslení průběhu</i>
p1.scatter(x, y, size=0.5, color="blue", <strong>alpha=0.4</strong>)
&nbsp;
<i># plocha pro druhý graf</i>
p2 = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="z", width=300, height=300)
&nbsp;
<i># vykreslení průběhu</i>
p2.scatter(x, z, size=0.5, color="darkred", <strong>alpha=0.4</strong>)
&nbsp;
<i># plocha pro třetí graf</i>
p3 = figure(title="Lorenz attractor", x_axis_label="y", y_axis_label="z", width=300, height=300)
&nbsp;
<i># vykreslení průběhu</i>
p3.scatter(y, z, size=0.5, color="darkgreen", <strong>alpha=0.4</strong>)
&nbsp;
<i># vykreslení grafu do plochy webové stránky</i>
show(grid([[p2, p3], p1]))
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Změna barvy jednotlivých bodů (stop) v&nbsp;grafu</h2>

<p>Nyní se podívejme na řešení dalšího zajímavého problému a tím je obarvení
každého bodu v&nbsp;grafu odlišnou barvou. Jedná se o poměrně často používanou
techniku v&nbsp;případě, že je průběh zobrazované funkce (nebo naměřených
hodnot) velmi složitý, s&nbsp;překrývajícími se větvemi atd. V&nbsp;knihovně
Bokeh máme pro řešení tohoto problému možnost vytvořit vektor barev, přičemž
počet prvků tohoto vektoru ideálně odpovídá počtu zobrazených bodů. Každý prvek
&bdquo;vektoru barev&ldquo; obsahuje jméno barvy popř.&nbsp;trojici nebo
šestici hexadecimálních cifer s&nbsp;RGB kódem barvy.</p>

<p>Můžeme se například pokusit o vytvoření gradientního přechodu mezi červenou
a modrou barvou. Algoritmus je založen na vytvoření sekvence hodnot od 0 do 255
a následně o vygenerování RGB kódů barev na základě těchto hodnot:</p>

<pre>
<i># gradient od 0 do 255</i>
l = np.linspace(0, 255, num=n)
&nbsp;
<i># barvová paleta</i>
colors = ["#%02x%02x%02x" % (255-int(value), 0, int(value)) for value in l]
</pre>

<p>Tento vektor se předá metodě <strong>scatter</strong> v&nbsp;nepovinném
parametru <strong>color</strong>:</p>

<pre>
<i># vykreslení průběhu</i>
p.scatter(x, y, size=1, <strong>color=colors</strong>)
</pre>

<p>Výsledek může vypadat takto:</p>

*** image ***
<p><i>Obrázek 9: Modifikace barvy jednotlivých bodů v&nbsp;grafu.</i></p>

<p>Zdrojový kód tohoto demonstračního příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/27_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/27_colors.py</a>:</p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.plotting`</i>
&nbsp;
from bokeh.plotting import figure, show
&nbsp;
<i># taktéž budeme potřebovat některé funkce z knihovny `numpy`</i>
import numpy as np
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s * (y - x)
    y_dot = r * x - y - x * z
    z_dot = x * y - b * z
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 10000
&nbsp;
<i># gradient od 0 do 255</i>
l = np.linspace(0, 255, num=n)
&nbsp;
<i># barvová paleta</i>
colors = ["#%02x%02x%02x" % (255-int(value), 0, int(value)) for value in l]
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0.0, 1.0, 1.05)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># plocha pro graf</i>
p = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="y")
&nbsp;
<i># vykreslení průběhu</i>
p.scatter(x, y, size=1, <strong>color=colors</strong>)
&nbsp;
<i># vykreslení grafu do plochy webové stránky</i>
show(p)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Funkce s&nbsp;průběhem vykresleným skutečnými body</h2>

<p>Pokud se budeme snažit vykreslit &bdquo;přesnější&ldquo; průběh Lorenzova
atraktoru, může být jedním možným řešením razantní zvýšení počtu zobrazených
bodů. Můžeme tedy změnit tuto hodnotu:</p>

<pre>
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 10000
</pre>

<p>na mnohem vyšší hodnotu:</p>

<pre>
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 100000
</pre>

<p>Problém ovšem spočívá v&nbsp;tom, že vykreslení tolika bodů pomocí metody
<strong>scatter</strong> může být dosti pomalé:</p>

<pre>
<i># vykreslení průběhu</i>
<strong>p.scatter</strong>(x, y, size=1, color=colors)
</pre>

<p>Urychlení dosáhneme tak, že namísto metody <strong>scatter</strong> zavoláme
metodu <strong>dot</strong>, jejíž vykreslovací algoritmus je rychlejší:</p>

<pre>
<i># vykreslení průběhu</i>
<strong>p.dot</strong>(x, y, line_color=colors, line_alpha=0.2)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si malé změny &ndash; namísto
pojmenovaného parametru <strong>color</strong> se zde používá parametr se
jménem <strong>line_color</strong> a stejně tak namísto <strong>alpha</strong>
použijeme <strong>line_alpha</strong>.</div></p>

<p>Výsledek by mohl vypadat následovně:</p>

*** image ***
<p><i>Obrázek 10: Graf vykreslený metodou <strong>dot</strong> namísto
<strong>scatter</strong>.</i></p>

<p>Zdrojový kód takto upraveného demonstračního příkladu je dostupný na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/28_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/28_colors.py</a>:</p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.plotting`</i>
&nbsp;
from bokeh.plotting import figure, show
&nbsp;
<i># taktéž budeme potřebovat některé funkce z knihovny `numpy`</i>
import numpy as np
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s * (y - x)
    y_dot = r * x - y - x * z
    z_dot = x * y - b * z
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 100000
&nbsp;
<i># gradient od 0 do 255</i>
l = np.linspace(0, 255, num=n)
&nbsp;
<i># barvová paleta</i>
colors = ["#%02x%02x%02x" % (255-int(value), 0, int(value)) for value in l]
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0.0, 1.0, 1.05)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># plocha pro graf</i>
p = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="y")
&nbsp;
<i># vykreslení průběhu</i>
p.dot(x, y, line_color=colors, line_alpha=0.2)
&nbsp;
<i># vykreslení grafu do plochy webové stránky</i>
show(p)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Vykreslení heatmapy</h2>

<p>V&nbsp;případě, že je nutné nějakým způsobem zobrazit funkci typu
<strong>z=f(x,y)</strong>, je nutné použít buď nějakou formu 3D grafu nebo
takzvanou teplotní mapu (<i>heat map, heatmap</i>). I ta je v&nbsp;knihovně
Bokeh podporována, o čemž se můžeme snadno přesvědčit. Nejprve vytvoříme seznam
barev, které budou zobrazeny v&nbsp;teplotní mapě o rozměrech 3&times;3
prvky:</p>

<pre>
<i># barvy jednotlivých čtverečků</i>
colors = [
    "#0B486B", "#79BD9A", "#CFF09E",
    "#79BD9A", "#0B486B", "#79BD9A",
    "#CFF09E", "#79BD9A", "#0B486B"
]
</pre>

<p></p>

<pre>
factors = ["a", "b", "c"]
x = ["a"]*3 + ["b"]*3 + ["c"]*3
y = factors*3
</pre>

*** image ***
<p><i>Obrázek 11: </i></p>

<p>Zdrojový kód tohoto demonstračního příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/29_heatmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/29_heatmap.py</a>:</p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.plotting`</i>
&nbsp;
from bokeh.plotting import figure, show
&nbsp;
factors = ["a", "b", "c"]
x = ["a"]*3 + ["b"]*3 + ["c"]*3
y = factors*3
&nbsp;
print(factors)
print(x)
print(y)
&nbsp;
<i># barvy jednotlivých čtverečků</i>
colors = [
    "#0B486B", "#79BD9A", "#CFF09E",
    "#79BD9A", "#0B486B", "#79BD9A",
    "#CFF09E", "#79BD9A", "#0B486B"
]
&nbsp;
<i># plocha pro graf</i>
p = figure(title="Categorical Heatmap", tools="hover",
        toolbar_location=None, x_range=factors, y_range=factors)
&nbsp;
<i># vykreslení heatmapy</i>
p.rect(x, y, color=colors, width=1, height=1)
&nbsp;
<i># vykreslení grafu do plochy webové stránky</i>
show(p)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Interaktivní ovládací prvky na stránce s&nbsp;grafem</h2>

<p>Knihovna <i>Bokeh</i> se sice může podobat již několikrát zmíněné knihovně
<i>Matplotlib</i>, ovšem ve skutečnosti můžeme mezi oběma knihovnami nalézt
velké množství rozdílů. Jedním z&nbsp;nich je fakt, že <i>Bokeh</i> umožňuje
přidat na plochu webové stránky s&nbsp;grafem i interaktivní ovládací prvky. A
navíc je možné tyto prvky svázat s&nbsp;některými vlastnostmi grafu, takže je
například snadné přidat ovládací prvek určený pro výběr barvy z&nbsp;barvové
palety, přičemž uživatelem zvolená barva bude přímo použita v&nbsp;grafu. Nebo
můžeme na stránku přidat posuvník (<i>slider</i>) a svázat jeho hodnotu
(například) s&nbsp;tloušťkou vykreslovaných čar, průhledností atd. Propojení
mezi ovládacími prvky a jednotlivými atributy grafu je přitom provedeno bez
nutnosti explicitního zápisu programového kódu, který toto propojení provede
&ndash; a vzhledem k&nbsp;tomu, že se jedná o webovou stránku, by musel být
tento kód zapsán v&nbsp;JavaScriptu (kterému jsme se doposud vyhýbali).</p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Příklad jednoduchého interaktivního prvku &ndash; tlačítka</h2>

<p>Podívejme se nyní na základní způsob práce s&nbsp;interaktivními ovládacími
prvky, které je možné vložit na plochu webové stránky. Vložíme na stránku
tlačítko neboli ovládací prvek typu <i>button</i>:</p>

<pre>
<i># vytvoření ovládacího prvku</i>
button = <strong>Button(label="Foo", button_type="success")</strong>
</pre>

<p>Následně je možné propojit událost &bdquo;stisk tlačítka&ldquo;
s&nbsp;nějakou akcí. V&nbsp;knihovně Bokeh se takové propojení zapíše
následujícím způsobem:</p>

<pre>
<i># specifikace handleru</i>
<strong>button.js_on_click(CustomJS(code="console.log('button: click!', this.toString())"))</strong>
</pre>

<p>Tento příkaz způsobí, že se po stisku tlačítka přidá do logu webového
prohlížeče (další) zpráva o stisku tlačítka.</p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;dalších příkladech se již bez
tohoto kroku zcela obejdeme. Resp.&nbsp;vůbec nebudeme potřebovat explicitně
pracovat s&nbsp;JavaScriptem.</div></p>

<p>V&nbsp;posledním kroku se tlačítko zobrazí:</p>

<pre>
<i># zobrazení ovládacího prvku</i>
show(button)
</pre>

*** image ***
<p><i>Obrázek 12: Webová stránka s&nbsp;tlačítkem vytvořená knihovnou
Bokeh.</i></p>

<p>Zdrojový kód tohoto demonstračního příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/30_button.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/30_button.py</a>:</p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.io`</i>
from bokeh.io import show
&nbsp;
<i># naimportujeme vybrané funkce z knihovny `bokeh.models`</i>
from bokeh.models import Button, CustomJS
&nbsp;
<i># vytvoření ovládacího prvku</i>
button = <strong>Button(label="Foo", button_type="success")</strong>
&nbsp;
<i># specifikace handleru</i>
<strong>button.js_on_click(CustomJS(code="console.log('button: click!', this.toString())"))</strong>
&nbsp;
<i># zobrazení ovládacího prvku</i>
show(button)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Modifikace grafu s&nbsp;využitím ovládacích prvků</h2>

<p></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Přidání ovládacího prvku pro výběr barvy</h2>

<p></p>

<pre>
<i># výběr barvy</i>
picker = ColorPicker(title="Color")
picker.js_link("color", scatter.glyph, "line_color")
</pre>

<p></p>

<pre>
<i># vykreslení grafu do plochy webové stránky</i>
show(column(p, <strong>picker</strong>))
</pre>

<p>Webová stránka vykreslená a zobrazená knihovnou Bokeh by měla vypadat
takto:</p>

*** image ***
<p><i>Obrázek 13: Interaktivní ovládací prvek určený pro výběr vykreslovaných
bodů (resp.&nbsp;stop) v&nbsp;grafu.</i></p>

<p>Zdrojový kód tohoto demonstračního příkladu je dostupný na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/31_select_color.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/31_select_color.py</a>:</p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.plotting` i dalších knihoven</i>
from bokeh.plotting import figure, show
from bokeh.layouts import column
from bokeh.models import ColorPicker
&nbsp;
&nbsp;
<i># taktéž budeme potřebovat některé funkce z knihovny `numpy`</i>
import numpy as np
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s * (y - x)
    y_dot = r * x - y - x * z
    z_dot = x * y - b * z
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 10000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0.0, 1.0, 1.05)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># plocha pro graf</i>
p = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="z", width=500, height=500)
&nbsp;
<i># vykreslení průběhu</i>
scatter = p.scatter(x, z, size=1, color="blue")
&nbsp;
<i># výběr barvy</i>
<strong>picker = ColorPicker(title="Color")</strong>
<strong>picker.js_link("color", scatter.glyph, "line_color")</strong>
&nbsp;
<i># vykreslení grafu do plochy webové stránky</i>
show(column(p, <strong>picker</strong>))
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Přidání ovládacího prvku pro výběr velikosti vykreslovaných &bdquo;stop&ldquo;</h2>

<p>V&nbsp;grafu, v&nbsp;němž je průběh funkce vykreslen metodou
<strong>splatter</strong>, lze s&nbsp;využitím vhodných ovládacích prvků
modifikovat i velikost vykreslovaných &bdquo;stop&ldquo;. Pro tento účel
použijeme posuvník neboli <i>slider</i>, jehož hodnotu (interaktivně vybranou
uživatelem změnou pozice posuvníku) navážeme na vlastnost <strong>size</strong>
objektu <strong>scatter.glyph</strong>. Programový kód se tedy rozšíří o
následující trojici řádků:</p>

<pre>
<i># posuvník</i>
slider = Slider(start=0, end=10, value=1, step=.1, title="Splatter size")
slider.js_link("value", scatter.glyph, "size")
</pre>

<p>Slider je navíc nutné přidat na plochu webové stránky:</p>

<pre>
<i># vykreslení grafu do plochy webové stránky</i>
show(column(p, picker, <strong>slider</strong>))
</pre>

<p>Výsledek:</p>

*** image ***
<p><i>Obrázek 14: Další interaktivní ovládací prvek přidaný na stránku
s&nbsp;grafem.</i></p>

<p>Zdrojový kód dnešního předposledního demonstračního příkladu je dostupný na
adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/32_select_color_size.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/32_select_color_size.py</a>:</p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.plotting` i dalších knihoven</i>
from bokeh.plotting import figure, show
from bokeh.layouts import column
from bokeh.models import ColorPicker, Slider
&nbsp;
&nbsp;
<i># taktéž budeme potřebovat některé funkce z knihovny `numpy`</i>
import numpy as np
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s * (y - x)
    y_dot = r * x - y - x * z
    z_dot = x * y - b * z
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 10000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0.0, 1.0, 1.05)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># plocha pro graf</i>
p = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="z", width=500, height=500)
&nbsp;
<i># vykreslení průběhu</i>
scatter = p.scatter(x, z, size=1, color="blue")
&nbsp;
<i># výběr barvy</i>
picker = ColorPicker(title="Color")
picker.js_link("color", scatter.glyph, "line_color")
&nbsp;
<i># posuvník</i>
<strong>slider = Slider(start=0, end=10, value=1, step=.1, title="Splatter size")</strong>
<strong>slider.js_link("value", scatter.glyph, "size")</strong>
&nbsp;
<i># vykreslení grafu do plochy webové stránky</i>
show(column(p, picker, <strong>slider</strong>))
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Přidání ovládacího prvku pro výběr průhlednosti vykreslovaných &bdquo;stop&ldquo;</h2>

<p>V&nbsp;dnešním posledním demonstračním příkladu přidáme na plochu stránky
ovládací prvek určený pro změnu průhlednosti vykreslovaných &bdquo;stop&ldquo;.
Nejprve nepatrně pozměníme parametry předané do metody
<strong>scatter</strong>. Budeme explicitně specifikovat průhlednost vykreslení
&bdquo;stop&ldquo; nastavenou na 50%:</p>

<pre>
<i># vykreslení průběhu</i>
scatter = p.scatter(x, z, size=1, color="blue", <strong>alpha=0.5</strong>)
</pre>

<p>Následně vytvoříme posuvník s&nbsp;výchozí hodnotou nastavenou právě na 0,5
(tedy na oněch 50%) a s&nbsp;povoleným rozsahem hodnot od 0 do 1 (tedy od 0% do
100%). Hodnota zvolená na posuvníku je následně propojena s&nbsp;atributem
<strong>line_alpha</strong> grafu <strong>scatter</strong>. Deklarace posuvníku
i propojení s&nbsp;grafem vypadá následovně:</p>

<pre>
<i># posuvník pro změnu průblednosti</i>
slider_alpha = Slider(start=0, end=1, value=0.5, step=.01, title="Alpha")
slider_alpha.js_link("value", scatter.glyph, "line_alpha")
</pre>

<p>A konečně jak graf, tak i všechny (nyní již tři) ovládací prvky přidáme na
plochu webové stránky:</p>

<pre>
<i># vykreslení grafu do plochy webové stránky</i>
<strong>show(column(p, picker, slider_alpha, slider_size))</strong>
</pre>

<p>S&nbsp;tímto výsledkem:</p>

*** image ***
<p><i>Obrázek 15: Graf s&nbsp;trojicí ovládacích prvků vložených na plochu
webové stránky.</i></p>

<p>Zdrojový kód dnešního posledního demonstračního příkladu je dostupný na
adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/33_select_color_size_alpha.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/33_select_color_size_alpha.py</a>.
Vypadá následovně:</p>

<pre>
<i># naimportujeme vybrané funkce z knihovny `bokeh.plotting` i dalších knihoven</i>
from bokeh.plotting import figure, show
from bokeh.layouts import column
from bokeh.models import ColorPicker, Slider
&nbsp;
&nbsp;
<i># taktéž budeme potřebovat některé funkce z knihovny `numpy`</i>
import numpy as np
&nbsp;
&nbsp;
<i># funkce pro výpočet dalšího bodu Lorenzova atraktoru</i>
def <strong>lorenz</strong>(x, y, z, s=10, r=28, b=2.667):
    x_dot = s * (y - x)
    y_dot = r * x - y - x * z
    z_dot = x * y - b * z
    return x_dot, y_dot, z_dot
&nbsp;
&nbsp;
<i># krok (změna času)</i>
dt = 0.01
&nbsp;
<i># celkový počet vypočtených bodů na Lorenzově atraktoru</i>
n = 10000
&nbsp;
<i># prozatím prázdné pole připravené pro výpočet</i>
x = np.zeros((n,))
y = np.zeros((n,))
z = np.zeros((n,))
&nbsp;
<i># počáteční hodnoty</i>
x[0], y[0], z[0] = (0.0, 1.0, 1.05)
&nbsp;
<i># vlastní výpočet atraktoru</i>
for i in range(n - 1):
    x_dot, y_dot, z_dot = lorenz(x[i], y[i], z[i])
    x[i + 1] = x[i] + x_dot * dt
    y[i + 1] = y[i] + y_dot * dt
    z[i + 1] = z[i] + z_dot * dt
&nbsp;
<i># plocha pro graf</i>
p = figure(title="Lorenz attractor", x_axis_label="x", y_axis_label="z", width=500, height=500)
&nbsp;
<i># vykreslení průběhu</i>
scatter = p.scatter(x, z, size=1, color="blue", alpha=0.5)
&nbsp;
<i># výběr barvy</i>
picker = ColorPicker(title="Color")
picker.js_link("color", scatter.glyph, "line_color")
&nbsp;
<i># posuvník pro změnu průblednosti</i>
slider_alpha = Slider(start=0, end=1, value=0.5, step=.01, title="Alpha")
slider_alpha.js_link("value", scatter.glyph, "line_alpha")
&nbsp;
<i># posuvník pro změnu velikosti</i>
slider_size = Slider(start=0, end=10, value=1, step=.1, title="Splatter size")
slider_size.js_link("value", scatter.glyph, "size")
&nbsp;
<i># vykreslení grafu do plochy webové stránky</i>
<strong>show(column(p, picker, slider_alpha, slider_size))</strong>
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 byly uloženy do Git repositáře dostupného na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_linear_plot.py</td><td>nejjednodušší typ grafu poskytovaný knihovnou Bokeh</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/01_linear_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/01_linear_plot.py</a></td></tr>
<tr><td> 2</td><td>02_linear_plot.py</td><td>zobrazení titulku a legendy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/02_linear_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/02_linear_plot.py</a></td></tr>
<tr><td> 3</td><td>03_sinus_plot.py</td><td>kooperace s&nbsp;knihovnou NumPy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/03_sinus_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/03_sinus_plot.py</a></td></tr>
<tr><td> 4</td><td>04_sin_cos_plot.py</td><td>vykreslení průběhu dvou funkcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/04_sin_cos_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/04_sin_cos_plot.py</a></td></tr>
<tr><td> 5</td><td>05_sin_cos_plot.py</td><td>alternativní způsob specifikace barev</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/05_sin_cos_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/05_sin_cos_plot.py</a></td></tr>
<tr><td> 6</td><td>06_sin_cos_circles.py</td><td>alternativní značky pro vykreslení grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/06_sin_cos_circles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/06_sin_cos_circles.py</a></td></tr>
<tr><td> 7</td><td>07_bars.py</td><td>jednoduchý sloupcový graf</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/07_bars.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/07_bars.py</a></td></tr>
<tr><td> 8</td><td>08_bars.py</td><td>korektní způsob předávání hodnot pro sloupcový graf</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/08_bars.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/08_bars.py</a></td></tr>
<tr><td> 9</td><td>09_bars.py</td><td>šířka jednotlivých sloupců ve sloupcovém grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/09_bars.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/09_bars.py</a></td></tr>
<tr><td>10</td><td>10_sin_cos_bars.py</td><td>sloupcový graf se specifikací začátků a konce sloupců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/10_sin_cos_bars.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/10_sin_cos_bars.py</a></td></tr>
<tr><td>11</td><td>11_sin_cos_circle.py</td><td>vykreslení kružnice (parametrická křivka)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/11_sin_cos_circle.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/11_sin_cos_circle.py</a></td></tr>
<tr><td>12</td><td>12_spiral.py</td><td>vykreslení logaritmické spirály (parametrická křivka)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/12_spiral.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/12_spiral.py</a></td></tr>
<tr><td>13</td><td>13_output_png.py</td><td>export grafu do formátu PNG</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/13_output_png.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/13_output_png.py</a></td></tr>
<tr><td>14</td><td>14_legend_styling.py</td><td>nastavení stylu zobrazení legendy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/14_legend_styling.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/14_legend_styling.py</a></td></tr>
<tr><td>15</td><td>15_figure_size.py</td><td>specifikace velikosti grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/15_figure_size.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/15_figure_size.py</a></td></tr>
<tr><td>16</td><td>16_axis_limits.py</td><td>nastavení limitu na souřadných osách</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/16_axis_limits.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/16_axis_limits.py</a></td></tr>
<tr><td>17</td><td>17_linear_scale.py</td><td>měřítka na osách</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/17_linear_scale.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/17_linear_scale.py</a></td></tr>
<tr><td>18</td><td>18_log_scale.py</td><td>logaritmické měřítko na y-ové ose</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/18_log_scale.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/18_log_scale.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>19_styles.py</td><td>styly vykreslování grafů &ndash; glyfy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/19_styles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/19_styles.py</a></td></tr>
<tr><td>20</td><td>20_styles.py</td><td>styly vykreslování grafů &ndash; glyfy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/20_styles.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/20_styles.py</a></td></tr>
<tr><td>21</td><td>21_scatter.py</td><td>graf typu x-y</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/21_scatter.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/21_scatter.py</a></td></tr>
<tr><td>22</td><td>22_lorenz_attractor.py</td><td>vykreslení Lorenzova atraktoru v&nbsp;2D grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/22_lorenz_attractor.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/22_lorenz_attractor.py</a></td></tr>
<tr><td>23</td><td>23_row_plots.py</td><td>uspořádání několika grafů na webové stránce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/23_row_plots.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/23_row_plots.py</a></td></tr>
<tr><td>24</td><td>24_grid_plots.py</td><td>uspořádání několika grafů na webové stránce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/24_grid_plots.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/24_grid_plots.py</a></td></tr>
<tr><td>25</td><td>25_grid_plot_sizes.py</td><td>změna velikosti zobrazených grafů na webové stránce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/25_grid_plot_sizes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/25_grid_plot_sizes.py</a></td></tr>
<tr><td>26</td><td>26_alpha.py</td><td>změna průhlednosti vykreslovaných glyfů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/26_alpha.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/26_alpha.py</a></td></tr>
<tr><td>27</td><td>27_colors.py</td><td>modifikace barvy vykreslovaných glyfů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/27_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/27_colors.py</a></td></tr>
<tr><td>28</td><td>28_colors.py</td><td>modifikace barvy vykreslovaných glyfů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/28_colors.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/28_colors.py</a></td></tr>
<tr><td>29</td><td>29_heatmap.py</td><td>heatmapa</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/29_heatmap.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/29_heatmap.py</a></td></tr>
<tr><td>30</td><td>30_button.py</td><td>tlačítko jako jeden z&nbsp;interaktivních prvků</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/30_button.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/30_button.py</a></td></tr>
<tr><td>31</td><td>31_select_color.py</td><td>interaktivní výběr barvy z&nbsp;barvové palety</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/31_select_color.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/31_select_color.py</a></td></tr>
<tr><td>32</td><td>32_select_color_size.py</td><td>interaktivní výběr barvy a změna velikosti glyfů (stop)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/32_select_color_size.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/32_select_color_size.py</a></td></tr>
<tr><td>33</td><td>33_select_color_size_alpha.py</td><td>interaktivní výběr barvy a změna velikosti glyfů (stop) i průhlednosti</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/33_select_color_size_alpha.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/33_select_color_size_alpha.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>34</td><td>matplotlib_plot.py</td><td>ukázka použití &bdquo;konkurenčního&ldquo; projektu Matplotlib</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/matplotlib_plot.py">https://github.com/tisnik/most-popular-python-libs/blob/master/bokeh/matplotlib_plot.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>bokeh na GitHubu<br />
<a href="https://github.com/bokeh/bokeh">https://github.com/bokeh/bokeh</a>
</li>

<li>First steps 1: Creating a line chart<br />
<a href="https://docs.bokeh.org/en/latest/docs/first_steps/first_steps_1.html">https://docs.bokeh.org/en/latest/docs/first_steps/first_steps_1.html</a>
</li>

<li>Python Bokeh tutorial – Interactive Data Visualization with Bokeh<br />
<a href="https://www.geeksforgeeks.org/python-bokeh-tutorial-interactive-data-visualization-with-bokeh/">https://www.geeksforgeeks.org/python-bokeh-tutorial-interactive-data-visualization-with-bokeh/</a>
</li>

<li>The R Project for Statistical Computing<br />
<a href="https://www.r-project.org/">https://www.r-project.org/</a>
</li>

<li>An Introduction to R<br />
<a href="https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf">https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf</a>
</li>

<li>R (programming language)<br />
<a href="https://en.wikipedia.org/wiki/R_(programming_language)">https://en.wikipedia.org/wiki/R_(programming_language)</a>
</li>

<li>Graphics, ggplot2<br />
<a href="http://r4stats.com/examples/graphics-ggplot2/">http://r4stats.com/examples/graphics-ggplot2/</a>
</li>

<li>Seriál Programovací jazyk Julia<br />
<a href="https://www.root.cz/serialy/programovaci-jazyk-julia/">https://www.root.cz/serialy/programovaci-jazyk-julia/</a>
</li>

<li>Plotly<br />
<a href="https://plotly.com/">https://plotly.com/</a>
</li>

<li>pyecharts<br />
<a href="https://github.com/pyecharts/pyecharts/blob/master/README.en.md">https://github.com/pyecharts/pyecharts/blob/master/README.en.md</a>
</li>

<li>Tvorba grafů v&nbsp;Jupyter Notebooku s&nbsp;využitím knihovny Matplotlib<br />
<a href="https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/">https://www.root.cz/clanky/tvorba-grafu-v-jupyter-notebooku-s-vyuzitim-knihovny-matplotlib/</a>
</li>

<li>Lorenzův atraktor<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-vi/#k02">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-vi/#k02</a>
</li>

<li>Lorenzův atraktor<br />
<a href="https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03">https://www.root.cz/clanky/fraktaly-v-pocitacove-grafice-iii/#k03</a>
</li>

<li>Lorenz system<br />
<a href="https://en.wikipedia.org/wiki/Lorenz_system">https://en.wikipedia.org/wiki/Lorenz_system</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

