<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Validace datových struktur v Pythonu pomocí knihoven Schemagic a Schema</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Validace datových struktur v Pythonu pomocí knihoven Schemagic a Schema</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Při vývoji aplikací se mnohdy dostaneme do situace, kdy je nutné validovat datové struktury získavané například ze služeb dostupných přes REST API, z dokumentových databází apod. V Pythonu lze pro validaci těchto mnohdy velmi složitých struktur použít knihovny Schemagic a Schema.</p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Validace datových struktur v&nbsp;Pythonu pomocí knihoven Schemagic a Schema</a></p>
<p><a href="#k02">*** 2. Základní informace o knihovně Schemagic</a></p>
<p><a href="#k03">*** 3. Vytvoření projektu využívajícího knihovnu Schemagic</a></p>
<p><a href="#k04">*** 4. Popis jednotlivých řádků testu</a></p>
<p><a href="#k05">*** 5. Výsledky validace provedené první verzí testů</a></p>
<p><a href="#k06">*** 6. Automatické konverze prováděné v&nbsp;průběhu validace</a></p>
<p><a href="#k07">*** 7. Vytvoření vlastních validačních funkcí</a></p>
<p><a href="#k08">*** 8. Výsledky třetí verze testů</a></p>
<p><a href="#k09">*** 9. Vylepšení validačních funkcí</a></p>
<p><a href="#k10">*** 10. Výsledky čtvrté verze testů</a></p>
<p><a href="#k11">*** 11. Validace map (slovníků)</a></p>
<p><a href="#k12">*** 12. Výsledky páté verze testů</a></p>
<p><a href="#k13">*** 13. Přesnější validace map &ndash; kontrola, zda hodnoty odpovídají zadaným kritériím</a></p>
<p><a href="#k14">*** 14. Základní informace o knihovně Schema</a></p>
<p><a href="#k15">*** 15. Instalace knihovny Schema</a></p>
<p><a href="#k16">*** 16. Jednoduchý příklad použití knihovny Schema pro validaci datových struktur</a></p>
<p><a href="#k17">*** 17. Validace obsahu slovníků</a></p>
<p><a href="#k18">*** 18. Validace klíčů nejenom podle jména</a></p>
<p><a href="#k19">*** 19. Druhý příklad a jeho výsledek</a></p>
<p><a href="#k20">*** 20. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k21">*** 21. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Validace datových struktur v&nbsp;Pythonu pomocí knihoven Schemagic a Schema</h2>

<p></p>

<p>Validaci dat je možné použít v&nbsp;mnoha oblastech. Představme si například dokumentovou databázi, složitý konfigurační soubor nebo asi nejlépe klasickou webovou službu, která přijme data ve formátu JSON, převede je knihovní funkcí do nativní datové struktury (typicky do slovníku seznamů či hierarchicky uspořádaných slovníků) a následně provede validaci této struktury, ovšem nikoli programově (testováním jednotlivých atributů), ale na základě deklarativního popisu této struktury. Například můžeme specifikovat, že v&nbsp;atributu nazvaném &bdquo;price&ldquo; by mělo být uloženo nezáporné číslo menší než 100000, v&nbsp;atributu pojmenovaném &bdquo;valid_from&ldquo; musí být uložen řetězec odpovídající skutečnému datu (to už nelze otestovat primitivním regulárním výrazem, ale složitějším predikátem) a v&nbsp;atributu &bdquo;login&ldquo; bude buď nick uživatele nebo bude tento atribut obsahovat <strong>null/None</strong> (popř.&nbsp;alternativně nebude existovat vůbec).</p>

<p>V&nbsp;případě formátu JSON je samozřejmě možné validaci provádět už nad vstupními daty přes <a href="http://json-schema.org/">JSON Schema</a>, dtto při použití XML pomocí <a href="https://en.wikipedia.org/wiki/XML_Schema_(W3C)">XML Schema</a>, ovšem možnosti těchto nástrojů jsou omezené &ndash; stále se totiž jedná &bdquo;pouze&ldquo; o DSL, v&nbsp;nichž se složitější kritéria zapisují velmi složitě a nečitelně.</p>

<p>Poznámka: způsobem validací datových struktur jsme se již na stránkách Rootu zabývali, a to konkrétně ve dvojici článků <a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0/">Validace dat s využitím knihovny spec v Clojure 1.9.0 </a> a <a href="https://www.root.cz/clanky/validace-dat-s-vyuzitim-knihovny-spec-v-clojure-1-9-0-dokonceni/">Validace dat s využitím knihovny spec v Clojure 1.9.0 (dokončení)</a>. Tyto články byly zaměřeny na popis knihovny <strong>spec</strong> určené pro programovací jazyk Clojure. Dnes se zaměříme výhradně na knihovny použitelné <a href="https://www.root.cz/n/python/">v&nbsp;programovacím jazyku Python</a>.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Základní informace o knihovně Schema</h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Instalace knihovny Schema</h2>

<pre>
$ <strong>pip3 install --user schema</strong>
&nbsp;
Downloading/unpacking schema
  Downloading schema-0.6.7-py2.py3-none-any.whl
Installing collected packages: schema
Successfully installed schema
Cleaning up...
</pre>

<pre>
$ <strong>pip3 show schema</strong>
&nbsp;
---
Name: schema
Version: 0.6.7
Location: /home/tester/.local/lib/python3.4/site-packages
Requires: 
</pre>

<p></p>

<pre>
$ <strong>python3</strong>
&nbsp;
Python 3.4.3 (default, Nov 28 2017, 16:41:13) 
[GCC 4.8.4] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from schema import Schema
&nbsp;
&gt;&gt;&gt; Schema(int).validate(42)
42
&nbsp;
&gt;&gt;&gt; Schema([int]).validate([42, 1, 2])
[42, 1, 2]
&nbsp;
&gt;&gt;&gt; Schema((int, )).validate((42, 1, 2))
(42, 1, 2)
&nbsp;
&gt;&gt;&gt; Schema((int, float, str)).validate((3, "1", 3.14))
(3, '1', 3.14)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Jednoduchý příklad použití knihovny Schema pro validaci datových struktur</h2>

<pre>
from schema import Schema, SchemaError
&nbsp;
&nbsp;
def validate(schema, data):
    try:
        print("\n\n")
        print(schema)
        print(data)
        schema.validate(data)
        print("pass")
    except SchemaError as e:
        print(e)
&nbsp;
&nbsp;
integer_list = Schema([int])
float_list = Schema([float])
string_list = Schema([str])
&nbsp;
validate(integer_list, [1, 2, 3])
validate(integer_list, [1.1, 2.2, 3.3])
validate(integer_list, ["1", "2", "3"])
&nbsp;
validate(float_list, [1, 2, 3])
validate(float_list, [1.1, 2.2, 3.3])
validate(float_list, ["1", "2", "3"])
&nbsp;
validate(string_list, [1, 2, 3])
validate(string_list, [1.1, 2.2, 3.3])
validate(string_list, ["1", "2", "3"])
</pre>

<pre>
Schema([&lt;class 'int'&gt;])
[1, 2, 3]
pass
&nbsp;
&nbsp;
&nbsp;
Schema([&lt;class 'int'&gt;])
[1.1, 2.2, 3.3]
Or(&lt;class 'int'&gt;) did not validate 1.1
1.1 should be instance of 'int'
&nbsp;
&nbsp;
&nbsp;
Schema([&lt;class 'int'&gt;])
['1', '2', '3']
Or(&lt;class 'int'&gt;) did not validate '1'
'1' should be instance of 'int'
&nbsp;
&nbsp;
&nbsp;
Schema([&lt;class 'float'&gt;])
[1, 2, 3]
Or(&lt;class 'float'&gt;) did not validate 1
1 should be instance of 'float'
&nbsp;
&nbsp;
&nbsp;
Schema([&lt;class 'float'&gt;])
[1.1, 2.2, 3.3]
pass
&nbsp;
&nbsp;
&nbsp;
Schema([&lt;class 'float'&gt;])
['1', '2', '3']
Or(&lt;class 'float'&gt;) did not validate '1'
'1' should be instance of 'float'
&nbsp;
&nbsp;
&nbsp;
Schema([&lt;class 'str'&gt;])
[1, 2, 3]
Or(&lt;class 'str'&gt;) did not validate 1
1 should be instance of 'str'
&nbsp;
&nbsp;
&nbsp;
Schema([&lt;class 'str'&gt;])
[1.1, 2.2, 3.3]
Or(&lt;class 'str'&gt;) did not validate 1.1
1.1 should be instance of 'str'
&nbsp;
&nbsp;
&nbsp;
Schema([&lt;class 'str'&gt;])
['1', '2', '3']
pass
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Validace obsahu slovníků</h2>

<p></p>

<pre>
$ <strong>python3</strong>
&nbsp;
&gt;&gt;&gt; from schema import Schema
&gt;&gt;&gt; s1 = Schema({"name": str, "surname": str})
&gt;&gt;&gt; s1.validate({"name": "Eda", "surname": "Wasserfall"})
{'name': 'Eda', 'surname': 'Wasserfall'}
&gt;&gt;&gt; s1.validate({"name": "Eda", "surname": ""})
{'name': 'Eda', 'surname': ''}
&gt;&gt;&gt; s1.validate({"name": "Eda"})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/tester/.local/lib/python3.4/site-packages/schema.py", line 290, in validate
    SchemaMissingKeyError('Missing keys: ' + s_missing_keys, e)
schema.SchemaMissingKeyError: Missing keys: 'surname'
</pre>

<p></p>

<pre>
&gt;&gt;&gt; from schema import And
&gt;&gt;&gt; s2 = Schema({"name": And(str, len), "surname": And(str, len)})
&gt;&gt;&gt; s2.validate({"name": "Eda", "surname": ""})
Traceback (most recent call last):
  File "/home/tester/.local/lib/python3.4/site-packages/schema.py", line 316, in validate
    return s.validate(data)
  File "/home/tester/.local/lib/python3.4/site-packages/schema.py", line 96, in validate
    data = s.validate(data)
  File "/home/tester/.local/lib/python3.4/site-packages/schema.py", line 334, in validate
    raise SchemaError('%s(%r) should evaluate to True' % (f, data), e)
schema.SchemaError: len('') should evaluate to True
&nbsp;
During handling of the above exception, another exception occurred:
&nbsp;
Traceback (most recent call last):
  File "/home/tester/.local/lib/python3.4/site-packages/schema.py", line 276, in validate
    ignore_extra_keys=i).validate(value)
  File "/home/tester/.local/lib/python3.4/site-packages/schema.py", line 318, in validate
    raise SchemaError([None] + x.autos, [e] + x.errors)
schema.SchemaError: len('') should evaluate to True
&nbsp;
During handling of the above exception, another exception occurred:
&nbsp;
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/tester/.local/lib/python3.4/site-packages/schema.py", line 279, in validate
    raise SchemaError([k] + x.autos, [e] + x.errors)
schema.SchemaError: Key 'surname' error:
len('') should evaluate to True
&gt;&gt;&gt; s2.validate({"name": "Eda", "surname": "Wasserfall"})
{'name': 'Eda', 'surname': 'Wasserfall'}
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Validace klíčů nejenom podle jména</h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Druhý příklad a jeho výsledek</h2>

<pre>
from schema import Schema, SchemaError
&nbsp;
&nbsp;
def validate(schema, data):
    try:
        print("\n\n")
        print(schema)
        print(data)
        schema.validate(data)
        print("pass")
    except SchemaError as e:
        print(e)
&nbsp;
&nbsp;
def pos(value):
    return type(value) is int and value &gt; 0
&nbsp;
&nbsp;
number_list = Schema([int, float, complex])
&nbsp;
validate(number_list, [1, 2, 3])
validate(number_list, [1.1, 2.2, 3.3])
validate(number_list, [1+2j, 3+4j, 5j])
validate(number_list, ["1", "2", "3"])
&nbsp;
binary_numbers = Schema([0, 1])
validate(binary_numbers, [0, 0, 0])
validate(binary_numbers, [1, 1, 0])
validate(binary_numbers, [1, 2, 3])
&nbsp;
validate(Schema(pos), 42)
validate(Schema(pos), 0)
validate(Schema(pos), -1)
validate(Schema(pos), 1.5)
&nbsp;
validate(Schema(lambda value: value &lt; 0), 42)
validate(Schema(lambda value: value &lt; 0), 0)
validate(Schema(lambda value: value &lt; 0), -1)
&nbsp;
user = Schema({"name": str,
               "surname": str,
               "id": pos})
&nbsp;
validate(user, {"name": "Eda",
                "surname": "Wasserfall",
                "id": 1})
&nbsp;
validate(user, {"name": "Eda",
                "id": 1})
&nbsp;
validate(user, {"name": "Eda",
                "surname": "Wasserfall",
                "id": 0})
</pre>

<pre>
Schema([&lt;class 'int'&gt;, &lt;class 'float'&gt;, &lt;class 'complex'&gt;])
[1, 2, 3]
pass
&nbsp;
&nbsp;
&nbsp;
Schema([&lt;class 'int'&gt;, &lt;class 'float'&gt;, &lt;class 'complex'&gt;])
[1.1, 2.2, 3.3]
pass
&nbsp;
&nbsp;
&nbsp;
Schema([&lt;class 'int'&gt;, &lt;class 'float'&gt;, &lt;class 'complex'&gt;])
[(1+2j), (3+4j), 5j]
pass
&nbsp;
&nbsp;
&nbsp;
Schema([&lt;class 'int'&gt;, &lt;class 'float'&gt;, &lt;class 'complex'&gt;])
['1', '2', '3']
Or(&lt;class 'int'&gt;, &lt;class 'float'&gt;, &lt;class 'complex'&gt;) did not validate '1'
'1' should be instance of 'complex'
&nbsp;
&nbsp;
&nbsp;
Schema([0, 1])
[0, 0, 0]
pass
&nbsp;
&nbsp;
&nbsp;
Schema([0, 1])
[1, 1, 0]
pass
&nbsp;
&nbsp;
&nbsp;
Schema([0, 1])
[1, 2, 3]
Or(0, 1) did not validate 2
1 does not match 2
&nbsp;
&nbsp;
&nbsp;
Schema(&lt;function pos at 0x7f45c4172bf8&gt;)
42
pass
&nbsp;
&nbsp;
&nbsp;
Schema(&lt;function pos at 0x7f45c4172bf8&gt;)
0
pos(0) should evaluate to True
&nbsp;
&nbsp;
&nbsp;
Schema(&lt;function pos at 0x7f45c4172bf8&gt;)
-1
pos(-1) should evaluate to True
&nbsp;
&nbsp;
&nbsp;
Schema(&lt;function pos at 0x7f45c4172bf8&gt;)
1.5
pos(1.5) should evaluate to True
&nbsp;
&nbsp;
&nbsp;
Schema(&lt;function &lt;lambda&gt; at 0x7f45c40ff730&gt;)
42
&lt;lambda&gt;(42) should evaluate to True
&nbsp;
&nbsp;
&nbsp;
Schema(&lt;function &lt;lambda&gt; at 0x7f45c40ff730&gt;)
0
&lt;lambda&gt;(0) should evaluate to True
&nbsp;
&nbsp;
&nbsp;
Schema(&lt;function &lt;lambda&gt; at 0x7f45c40ff730&gt;)
-1
pass
&nbsp;
&nbsp;
&nbsp;
Schema({'surname': &lt;class 'str'&gt;, 'id': &lt;function pos at 0x7f45c4172bf8&gt;, 'name': &lt;class 'str'&gt;})
{'surname': 'Wasserfall', 'id': 1, 'name': 'Eda'}
pass
&nbsp;
&nbsp;
&nbsp;
Schema({'surname': &lt;class 'str'&gt;, 'id': &lt;function pos at 0x7f45c4172bf8&gt;, 'name': &lt;class 'str'&gt;})
{'id': 1, 'name': 'Eda'}
Missing keys: 'surname'
&nbsp;
&nbsp;
&nbsp;
Schema({'surname': &lt;class 'str'&gt;, 'id': &lt;function pos at 0x7f45c4172bf8&gt;, 'name': &lt;class 'str'&gt;})
{'surname': 'Wasserfall', 'id': 0, 'name': 'Eda'}
Key 'id' error:
pos(0) should evaluate to True
</pre>



<p><a name="k20"></a></p>
<h2 id="k20">20. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační projekty, které jsme si v&nbsp;dnešním článku popsali,
byly uloženy do repositáře, který naleznete na adrese <a
href="https://github.com/tisnik/python-schema-checks">https://github.com/tisnik/python-schema-checks</a>.
V&nbsp;tabulce pod tímto odstavcem jsou vypsány odkazy na tyto projekty:</p>

<table>
<tr><th>Projekt</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td>schemagic-demo-1</td><td></td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-1">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-1</a></td></tr>
<tr><td>schemagic-demo-2</td><td></td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-2">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-2</a></td></tr>
<tr><td>schemagic-demo-3</td><td></td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-3">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-3</a></td></tr>
<tr><td>schemagic-demo-4</td><td></td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-4">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-4</a></td></tr>
<tr><td>schemagic-demo-5</td><td></td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-5">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-5</a></td></tr>
<tr><td>schemagic-demo-6</td><td></td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-6">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-6</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>schema-demo-1</td><td></td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-1">https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-1</a></td></tr>
<tr><td>schema-demo-2</td><td></td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-2">https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-2</a></td></tr>
</table>



<p><a name="k21"></a></p>
<h2 id="k21">21. Odkazy na Internetu</h2>

<ol>

<li>schemagic 0.9.1 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schemagic/0.9.1">https://pypi.python.org/pypi/schemagic/0.9.1</a>
</li>

<li>Schemagic / Schemagic.web (na GitHubu)<br />
<a href="https://github.com/Mechrophile/schemagic">https://github.com/Mechrophile/schemagic</a>
</li>

<li>schema 0.6.7 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schema">https://pypi.python.org/pypi/schema</a>
</li>

<li>schema (na GitHubu)<br />
<a href="https://github.com/keleshev/schema">https://github.com/keleshev/schema</a>
</li>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>mock 2.0.0<br />
<a href="https://pypi.python.org/pypi/mock">https://pypi.python.org/pypi/mock</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Unit testing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit testing<br />
<a href="https://cs.wikipedia.org/wiki/Unit_testing">https://cs.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>5 Differences between clojure.spec and Schema<br />
<a href="https://lispcast.com/clojure.spec-vs-schema/">https://lispcast.com/clojure.spec-vs-schema/</a>
</li>

<li>Schema: Clojure(Script) library for declarative data description and validation<br />
<a href="https://github.com/plumatic/schema">https://github.com/plumatic/schema</a>
</li>

<li>clojure.spec - Rationale and Overview<br />
<a href="https://clojure.org/about/spec">https://clojure.org/about/spec</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

