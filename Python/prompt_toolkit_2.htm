<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba aplikací s textovým uživatelským rozhraním založeným na knihovně prompt_toolkit</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba aplikací s textovým uživatelským rozhraním založeným na knihovně prompt_toolkit</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Tvorba aplikací s&nbsp;textovým uživatelským rozhraním založeným na knihovně prompt_toolkit</a></p>
<p><a href="#k02">*** 2. Základní funkcionalita pro interaktivní aplikace &ndash; vstupní (textový) řádek</a></p>
<p><a href="#k03">*** 3. Podpora pro zápis víceřádkového textu</a></p>
<p><a href="#k04">*** 4. Zpracování stisku Ctrl+C a Ctrl+D</a></p>
<p><a href="#k05">*** 5. Validace textu zapisovaného uživatelem po stisku klávesy Enter</a></p>
<p><a href="#k06">*** 6. Validace již v&nbsp;průběhu zadávání vstupních údajů</a></p>
<p><a href="#k07">*** 7. Povolení použití externího textového editoru po použití zkratky Ctrl+X Ctrl+E nebo v</a></p>
<p><a href="#k08">*** 8. Spodní nástrojový pruh a zpráva zapsaná na pravém okraji výzvy</a></p>
<p><a href="#k09">*** 9. Callback funkce volané během editace</a></p>
<p><a href="#k10">*** 10. Přístup k&nbsp;editovanému textu (objekty Buffer a Document)</a></p>
<p><a href="#k11">*** 11. Demonstrační příklad: spodní nástrojový pruh a zpráva na pravém okraji výzvy reagující na uživatelský vstup</a></p>
<p><a href="#k12">*** 12. Změna stylu zobrazení všech relevantních prvků TUI</a></p>
<p><a href="#k13">*** 13. Zvýraznění syntaxe textu zapisovaného uživatelem na vstup</a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba aplikací s&nbsp;textovým uživatelským rozhraním založeným na knihovně prompt_toolkit</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Základní funkcionalita pro interaktivní aplikace &ndash; vstupní (textový) řádek</h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Podpora pro zápis víceřádkového textu</h2>

<pre>
from prompt_toolkit import PromptSession


def show_help():
    print("""Help
--------
quit - quit this application
exit - exit from this application
eval - evaluate
""")


s = PromptSession()

while True:
    cmd = s.prompt("Command: ", multiline=True)
    print("Entered text: {}".format(cmd))
    if cmd in {"q", "quit", "Quit", "exit", "Exit"}:
        break
    elif cmd in {"help", "Help", "?"}:
        show_help()
    elif cmd == "eval":
        print("42")
</pre>


<p><a name="k04"></a></p>
<h2 id="k04">4. Zpracování stisku Ctrl+C a Ctrl+D</h2>

Ctrl+D

<pre>
Traceback (most recent call last):
  File "prompt10_multiline_edit.py", line 16, in <module>
    cmd = s.prompt("Command: ", multiline=True)
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/shortcuts/prompt.py", line 722, in prompt
    return run_sync()
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/shortcuts/prompt.py", line 706, in run_sync
    return self.app.run(inputhook=self.inputhook)
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/application/application.py", line 682, in run
    return run()
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/application/application.py", line 656, in run
    return f.result()
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/eventloop/future.py", line 149, in result
    raise self._exception
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/eventloop/coroutine.py", line 90, in step_next
    new_f = coroutine.throw(exc)
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/application/application.py", line 635, in _run_async2
    result = yield f
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/eventloop/coroutine.py", line 92, in step_next
    new_f = coroutine.send(f.result())
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/application/application.py", line 596, in _run_async
    result = yield From(f)
EOFError
</pre>

Ctrl+C

<pre>
Traceback (most recent call last):
  File "prompt10_multiline_edit.py", line 16, in <module>
    cmd = s.prompt("Command: ", multiline=True)
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/shortcuts/prompt.py", line 722, in prompt
    return run_sync()
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/shortcuts/prompt.py", line 706, in run_sync
    return self.app.run(inputhook=self.inputhook)
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/application/application.py", line 682, in run
    return run()
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/application/application.py", line 656, in run
    return f.result()
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/eventloop/future.py", line 149, in result
    raise self._exception
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/eventloop/coroutine.py", line 90, in step_next
    new_f = coroutine.throw(exc)
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/application/application.py", line 635, in _run_async2
    result = yield f
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/eventloop/coroutine.py", line 92, in step_next
    new_f = coroutine.send(f.result())
  File "/home/tester/.local/lib/python3.4/site-packages/prompt_toolkit/application/application.py", line 596, in _run_async
    result = yield From(f)
KeyboardInterrupt
</pre>

<pre>
from prompt_toolkit import PromptSession


def show_help():
    print("""Help
--------
quit - quit this application
exit - exit from this application
eval - evaluate
""")


s = PromptSession()

while True:
    try:
        cmd = s.prompt("Command: ")
        if cmd in {"q", "quit", "Quit", "exit", "Exit"}:
            break
        elif cmd in {"help", "Help", "?"}:
            show_help()
        elif cmd == "eval":
            print("42")
    except KeyboardInterrupt:
        continue
    except EOFError:
        break
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Validace textu zapisovaného uživatelem po stisku klávesy Enter</h2>

<pre>
from prompt_toolkit.validation import Validator, ValidationError
from prompt_toolkit import PromptSession


def show_help():
    print("""Help
--------
quit - quit this application
exit - exit from this application
eval - evaluate
""")


class CommandValidator(Validator):

    def validate(self, document):
        user_input = document.text

        if user_input and not user_input.isalpha():
            index = 0

            for index, char in enumerate(user_input):
                if not char.isalpha():
                    break

            msg = "Wrong character '{c}' on index {i}".format(c=char, i=index)
            raise ValidationError(message=msg, cursor_position=index)


s = PromptSession()

while True:
    try:
        cmd = s.prompt("Command: ", validator=CommandValidator(), validate_while_typing=False)
        if cmd in {"q", "quit", "Quit", "exit", "Exit"}:
            break
        elif cmd in {"help", "Help", "?"}:
            show_help()
        elif cmd == "eval":
            print("42")
    except KeyboardInterrupt:
        continue
    except EOFError:
        break
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Validace již v&nbsp;průběhu zadávání vstupních údajů</h2>

<pre>
from prompt_toolkit.validation import Validator, ValidationError
from prompt_toolkit import PromptSession


def show_help():
    print("""Help
--------
quit - quit this application
exit - exit from this application
eval - evaluate
""")


class CommandValidator(Validator):

    def validate(self, document):
        user_input = document.text

        if user_input and not user_input.isalpha():
            index = 0

            for index, char in enumerate(user_input):
                if not char.isalpha():
                    break

            msg = "Wrong character '{c}' on index {i}".format(c=char, i=index)
            raise ValidationError(message=msg, cursor_position=index)


s = PromptSession()

while True:
    try:
        cmd = s.prompt("Command: ", validator=CommandValidator(), validate_while_typing=True)
        if cmd in {"q", "quit", "Quit", "exit", "Exit"}:
            break
        elif cmd in {"help", "Help", "?"}:
            show_help()
        elif cmd == "eval":
            print("42")
    except KeyboardInterrupt:
        continue
    except EOFError:
        break
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Povolení použití externího textového editoru po použití zkratky Ctrl+X Ctrl+E nebo v</h2>

<pre>
from prompt_toolkit.validation import Validator, ValidationError
from prompt_toolkit import PromptSession


def show_help():
    print("""Help
--------
quit - quit this application
exit - exit from this application
eval - evaluate
""")


class CommandValidator(Validator):

    def validate(self, document):
        user_input = document.text

        if user_input and not user_input.isalpha():
            index = 0

            for index, char in enumerate(user_input):
                if not char.isalpha():
                    break

            msg = "Wrong character '{c}' on index {i}".format(c=char, i=index)
            raise ValidationError(message=msg, cursor_position=index)


s = PromptSession()

while True:
    try:
        cmd = s.prompt("Command: ", validator=CommandValidator(),
                       validate_while_typing=True,
                       enable_open_in_editor=True)
        if cmd in {"q", "quit", "Quit", "exit", "Exit"}:
            break
        elif cmd in {"help", "Help", "?"}:
            show_help()
        elif cmd == "eval":
            print("42")
    except KeyboardInterrupt:
        continue
    except EOFError:
        break
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Spodní nástrojový pruh a zpráva zapsaná na pravém okraji výzvy</h2>

<pre>
from prompt_toolkit.validation import Validator, ValidationError
from prompt_toolkit import PromptSession


def show_help():
    print("""Help
--------
quit - quit this application
exit - exit from this application
eval - evaluate
""")


class CommandValidator(Validator):

    def validate(self, document):
        user_input = document.text

        if user_input and not user_input.isalpha():
            index = 0

            for index, char in enumerate(user_input):
                if not char.isalpha():
                    break

            msg = "Wrong character '{c}' on index {i}".format(c=char, i=index)
            raise ValidationError(message=msg, cursor_position=index)


s = PromptSession()

while True:
    try:
        cmd = s.prompt("Command: ", validator=CommandValidator(),
                       validate_while_typing=True,
                       enable_open_in_editor=True,
                       bottom_toolbar="Available commands: quit, exit, help, eval",
                       rprompt="Don't panic!")
        if cmd in {"q", "quit", "Quit", "exit", "Exit"}:
            break
        elif cmd in {"help", "Help", "?"}:
            show_help()
        elif cmd == "eval":
            print("42")
    except KeyboardInterrupt:
        continue
    except EOFError:
        break
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Callback funkce volané během editace</h2>

<pre>
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Přístup k&nbsp;editovanému textu (objekty Buffer a Document)</h2>

<pre>
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Demonstrační příklad: spodní nástrojový pruh a zpráva na pravém okraji výzvy reagující na uživatelský vstup</h2>

<pre>
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Změna stylu zobrazení všech relevantních prvků TUI</h2>

<pre>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Zvýraznění syntaxe textu zapisovaného uživatelem na vstup</h2>

<pre>
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady byly uloženy do Git repositáře
dostupného na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<table>
<tr><th>#</th><th>Příklad</th><th>Popis</th><th>Odkaz</th></tr>
<tr><td>1</td><td>prompt10_multiline_edit.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/prompt10_multiline_edit.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/prompt10_multiline_edit.py</a></td></tr>
<tr><td>2</td><td>prompt11_ctrl_c_ctrl_d.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/prompt11_ctrl_c_ctrl_d.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/prompt11_ctrl_c_ctrl_d.py</a></td></tr>
<tr><td>3</td><td>prompt12_validator_on_enter.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/prompt12_validator_on_enter.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/prompt12_validator_on_enter.py</a></td></tr>
<tr><td>4</td><td>prompt13_validator_while_typing.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/prompt13_validator_while_typing.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/prompt13_validator_while_typing.py</a></td></tr>
<tr><td>5</td><td>prompt14_external_editor.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/prompt14_external_editor.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/prompt14_external_editor.py</a></td></tr>
<tr><td>6</td><td>prompt15_bottom_toolbar.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/prompt15_bottom_toolbar.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/prompt15_bottom_toolbar.py</a></td></tr>
<tr><td>7</td><td>prompt16_callback_functions.py</td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/prompt16_callback_functions.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/prompt16_callback_functions.py</a></td></tr>
<tr><td>8</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/</a></td></tr>
<tr><td>9</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/</a></td></tr>
<tr><td>10</td><td></td><td></td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>vi(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/vi">https://linux.die.net/man/1/vi</a>
</li>

<li>emacs(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/emacs">https://linux.die.net/man/1/emacs</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

