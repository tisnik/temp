<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovací jazyky a knihovny určené pro výuku základů počítačové grafiky a interaktivních her</a></p>
<p><a href="#k02">2. Systém Scratch</a></p>
<p><a href="#k03">3. Skládání složitějších programů s&nbsp;využitím jednotlivých bloků</a></p>
<p><a href="#k04">4. Přednosti, zápory a omezení Scratche</a></p>
<p><a href="#k05">5. Projekt Snap!</a></p>
<p><a href="#k06">6. Basic-256</a></p>
<p><a href="#k07">7. Základní strukturované příkazy z&nbsp;Basicu-256</a></p>
<p><a href="#k08">8. Grafický výstup v&nbsp;Basicu-256</a></p>
<p><a href="#k09">9. Frameworky a knihovny navržené pro snadnou a rychlou tvorbu 2D her</a></p>
<p><a href="#k10">10. LÖVE</a></p>
<p><a href="#k11">*** 11. Pygame</a></p>
<p><a href="#k12">*** 12. Pyglet</a></p>
<p><a href="#k13">*** 13. Pygame Zero</a></p>
<p><a href="#k14">*** 14. Instalace Pygame Zero</a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovací jazyky a knihovny určené pro výuku základů počítačové grafiky a interaktivních her</h2>

<p><i>It's a bit like learning natural languages: the earlier the better.<br />
Michael Kölling</i></p>

<p>V&nbsp;současnosti existuje a navíc je i aktivně používáno několik desítek
různých programovacích jazyků, ať již jazyků interpretovaných či překládaných
do nativního (strojového) kódu nebo bajtkódu. Až na několik výjimek se však
jedná o takové jazyky, které nejsou příliš vhodné pro první seznámení dětí
s&nbsp;návrhem algoritmů a jednoduchých aplikací. Z&nbsp;tohoto důvodu vzniklo
a stále ještě vzniká poměrně velké množství projektů, jejichž cílem je seznámit
děti předškolního věku či děti na prvním stupni ZŠ se základem algoritmizace a
mnohdy i s&nbsp;tvorbou počítačové grafiky (protože grafický výstup či dokonce
animace nebo interaktivní hry jsou nepochybně atraktivní, zejména
v&nbsp;porovnání s&nbsp;&bdquo;fádním&ldquo; textovým výstupem). Jmenujme
například projekty Logo, Scratch, BYOB, Snap!, Alice, Android App Inventor,
Starlogo, Etoys, DesignBlocks, Pocket Code, Hopscotch, Blockly, Greenfoot,
Processing, GameMaker nebo poněkud kontroverzní Microsoft Small Basic.</p>

*** image ***
<p><i>Obrázek 1: Moderní integrovaná vývojová prostředí (v&nbsp;případě, že
Eclipse stále řadíme mezi moderní IDE :-) jsou sice pro amatérské i
profesionální programátory velmi užitečná, ovšem při výuce může jejich velká
variabilita být v&nbsp;některých ohledech spíše kontraproduktivní a bylo by
výhodnější používat prostředí s&nbsp;menším množstvím voleb.</i></p>

<p>Oblíbeným jazykem v&nbsp;této oblasti bývalo <i>Logo</i> (a mnohé jeho
dialekty), které jsem dříve <a
href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">taktéž
prosazoval</a>. Ovšem ukazuje se, že i na prvním stupni základní školy je dosti
složité vysvětlit pojem úhlu, který je v&nbsp;Logu celkem zásadní
(v&nbsp;programech se totiž ovládá želvička pohybující se po ploše obrazovky).
Naproti tomu nemají děti prakticky žádný problém s&nbsp;pochopením principu
bitmapové grafiky a pixelů; možná se ani není čemu divit, neboť tato generace
již vyrůstá na Minecraftu :-). I z&nbsp;tohoto důvodu budou v&nbsp;dnešním
článku zmíněny dva dosti odlišné projekty: <i>Scratch</i> se zaměřením na
vizuální tvorbu programů, který používá želví grafiku známou z&nbsp;Loga a
projekt nazvaný <i>Basic-256</i>, v&nbsp;němž lze několika málo příkazy
vykreslit i poměrně složité rastrové obrázky. Kromě <i>Scratche</i> se zmíníme
i o příbuzném projektu <i>Snap!</i>.</p>

*** image ***
<p><i>Obrázek 2: Comenius Logo, které se používalo i v&nbsp;našem
školství.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Systém Scratch</h2>

<p><i>Scratch uses hands-on, active learning; it is visually appealing; it
allows users to express their own creativity and to build on their own
experiences; it gives immediate, understandable feedback; and it allows users
to avoid syntax errors without focusing on minutiae, freeing them to focus on
processes and concepts.<br />
NCWIT study</i></p>

<p>Některé v&nbsp;praxi používané programovací jazyky (například <i>Python</i>
či spíše <i>Lua</i> &ndash; více viz druhá část článku) je sice možné použít
pro výuku programování, ovšem pro děti předškolního věku nebo pro děti na
prvním stupni základních škol se podle mého názoru příliš nehodí, a to hned
z&nbsp;několika důvodů. Jedním z&nbsp;těchto důvodů je nutnost zápisu algoritmů
pomocí více či méně strukturovaného textu, jehož syntaxe je hlídána buď
interpretrem či překladačem. Jedná se o nejdéle používaný způsob programování,
jehož počátky můžeme hledat v&nbsp;hluboké počítačové minulosti, protože první
překladač pracující se strojovým textem byl vytvořen již v&nbsp;rozmezí let
1951 až 1952 <i>Grace Hopperovou</i> v&nbsp;rámci projektu <i>A-0 (Arithmetic
Language version 0)</i>, který byl později následován známým <i>FORTRANem</i>
navrženým <i>Johnem W. Backusem</i> a jeho vývojovým týmem. Ovšem
v&nbsp;průběhu oněch cca šedesáti let se znovu a znovu objevovaly více či méně
úspěšné pokusy o vizuální návrh algoritmů, tj.&nbsp;o tvorbu programů nikoli
zápisem strukturovaného zdrojového textu, ale návrhem algoritmů pomocí diagramů
vytvářených například s&nbsp;využitím myši, gesty či v&nbsp;minulosti pomocí
světelného pera.</p>

*** image ***
<p><i>Obrázek 3: Bloky, z&nbsp;nichž se programy tvořené ve Scratchi skládají,
jsou na základě své funkce rozděleny do několika kategorií. Povšimněte si, že
prostředí Scratche bylo téměř kompletně počeštěno; jedna z&nbsp;mála částí
ponechaná v&nbsp;angličtině je nápověda k&nbsp;jednotlivým příkazům (i když i
tato část se pravděpodobně brzy přeloží).</i></p>

<p>Poměrně dobře známé jsou například pokusy o přímý &bdquo;překlad&ldquo;
klasických vývojových diagramů, využití takzvaných kopenogramů atd.
V&nbsp;současnosti někteří analytici a vývojáři využívají vizuální/grafický
jazyk <i>UML</i> (což je ovšem jen pomůcka) či <i>BPM</i> (návrh business
procesů, ovšem s&nbsp;vhodně zvolenými bloky se vlastně jedná o plnohodnotný
jazyk). V&nbsp;oblasti software určeného pro výuku programování se využívá
podobný princip, jako v&nbsp;případě vývojových diagramů &ndash; možnost zápisu
(či možná lépe řečeno deklarace) algoritmů s&nbsp;využitím bloků
představujících jednotlivé příkazy či volané funkce, které jsou doplněny o
základní strukturované příkazy určené pro tvorbu rozhodovacích podmínek a
programových smyček. Na tomto principu, tj.&nbsp;na vylepšených a vizuálně
přitažlivějších vývojových diagramech, je postaven i projekt <i>Scratch</i>,
v&nbsp;němž jsou uživatelům nabídnuty základní stavební <i>bloky</i>,
z&nbsp;nichž se program skládá, přičemž je ponecháno pouze na uživateli, jakým
způsobem tyto bloky využije ve svých programech.</p>

*** image ***
<p><i>Obrázek 4: Programy se ve Scratchi tvoří přetahováním příkazových bloků
z&nbsp;oblasti umístěné v&nbsp;levé části okna do střední oblasti, zde
nadepsané &bdquo;Skripty&ldquo; (nová verze Scratche používá nepatrně odlišný
design grafického uživatelského rozhraní). Tento screenshot byl získán
z&nbsp;&bdquo;klasického&ldquo; desktopového prostředí Scratche. Dnes je již
k&nbsp;dispozici i webová verze dostupná na <a
href="https://scratch.mit.edu/projects/editor/">https://scratch.mit.edu/projects/editor/</a>,
která nevyžaduje žádnou instalaci.</i></p>

<p>Díky způsobu implementace skládání bloků pod sebe, popř.&nbsp;do sebe
(s&nbsp;využitím &bdquo;zámků&ldquo;, podobně jako u puzzle) je zajištěno, že
program bude po syntaktické stránce vždy v&nbsp;pořádku, což je důležité,
protože odpadá pro děti nudná oprava překlepů, hledání chybějících středníků,
hlídání párovosti závorek i další činnosti spojené s&nbsp;prací s&nbsp;běžnými
programovacími jazyky. Uživatel se tedy musí starat o to podstatné &ndash; o
sémantiku navrhované aplikace.</p>

*** image ***
<p><i>Obrázek 5: Editor bitmapových spritů zabudovaný přímo ve
Scratchi.</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Skládání složitějších programů s&nbsp;využitím jednotlivých bloků</h2>

<p>Tvorba programů ve <i>Scratchi</i> je jednoduchá a po krátkém zaučení i
intuitivní &ndash; v&nbsp;levé části okna (Scratch verze 1) se postupně
vybírají příkazové bloky, které se přetahují do prostřední části okna, kde se
z&nbsp;těchto bloků může skládáním tvořit program či programy. Běžný příkazový
blok je vizuálně představován obdélníkem s&nbsp;několika výčnělky
připomínajícími puzzle. Programové smyčky a podmínky jsou vyobrazeny jako
složitější tvary umožňující vkládání dalších bloků <i>dovnitř</i> svého těla.
S&nbsp;využitím těchto výčnělků se bloky spojují dohromady tak, aby tvořily
sekvenci či dokonce strukturovaný program. V&nbsp;případě, že je zapotřebí
sekvenci příkazů změnit, je možné bloky od sebe rozdělit, popř.&nbsp;vybraný
blok smazat (přes menu zobrazené po stisku pravého tlačítka myši), zkopírovat
(opět přes pravé tlačítko myši) či přesunout. Společně spojené bloky tvoří
program, který je možné spustit doubleclickem. Na ploše <i>Skripty</i> je možné
vytvořit i více programů, každý je tvořený množinou spojených bloků. Činnost
každého bloku lze nezávisle na vlastním programu taktéž jednoduše ověřit
&ndash; opět doubleclickem.</p>

*** image ***
<p><i>Obrázek 6: Velmi jednoduchá simulace Brownova pohybu naprogramovaná ve
Scratchi.</i></p>

<p>Vizuální tvorba programů s&nbsp;využitím skládání příkazových bloků tvoří
pouze jednu část snadnosti použití <i>Scratche</i> při výuce programování.
Druhou částí je takzvaná pracovní (kreslicí) plocha s&nbsp;volitelným pozadím,
po níž se mohou v&nbsp;závislosti na volaných příkazech pohybovat takzvané
<i>sprity</i>, které navíc mohou při svém pohybu za sebou kreslit křivku
(tj.&nbsp;stopu pohybu). Pod pojmem <i>sprite</i> je ve <i>Scratchi</i> myšlen
rastrový obrázek, který může představovat například postavu či jiný pohyblivý
nebo i statický předmět ve hře, zatímco pozadí umístěné na pracovní plochu
(taktéž se jedná o rastrový obrázek) je většinou neměnné a může představovat
pozadí hry, místnost, ve které se odehrává nějaký dialog atd. <i>Scratch</i>
díky možnosti prakticky neomezeného pohybu <i>spritů</i> po pracovní ploše
s&nbsp;volitelným kreslením cesty (stopy pohybu), kterou <i>sprity</i>
vykonaly, umně integruje jak možnosti programovacích jazyků typu <i>Karel</i>
či <i>Baltazar</i> (<i>sprity</i> umístěné a pohybující se po pomyslné
šachovnici) a taktéž výše zmíněného programovacího jazyka <i>Logo</i>
s&nbsp;neodmyslitelnou želvou, která se může pohybovat libovolným směrem po
ploše.</p>

*** image ***
<p><i>Obrázek 7: Program pro vykreslení spirály, v&nbsp;němž se používá
proměnná i programová smyčka.</i></p>

*** image ***
<p><i>Obrázek 8: Spirála vykreslená předchozím programem (s&nbsp;použitím
jiného spritu, než obligátní želvičky).</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Přednosti, zápory a omezení Scratche</h2>

<p>Projekt <i>Scratch</i> se po relativně krátké době po svém představení
veřejnosti stal velmi populární a to nejenom mezi učiteli základních škol
(v&nbsp;USA a dalších zemích), ale i na středních školách a na školách vysokých
(především na fakultách netechnického zaměření, to je ovšem již téma
přesahující zaměření tohoto článku). Důvodů, které vedly k&nbsp;této popularitě
bylo a je několik, největším však zůstává možnost vytvoření i poměrně složitého
programu bez toho, aby byl uživatel nucen zdlouhavě studovat syntaxi a
sémantiku jazyka, učit se ovládat vývojové prostředí nebo prostředí interpretru
a navíc ještě reagovat na různá mnohdy kryptická chybová hlášení (ze syntaxe
většiny běžných programovacích jazyků vyplývá, že například chybějící uzavírací
závorka nebo klíčové slovo ukončující nějaký blok, vede ke vzniku chybového
hlášení na jiném místě v&nbsp;programu, než kde se skutečně chyba nachází, což
může být zejména pro začátečníky velmi frustrující).</p>

*** image ***
<p><i>Obrázek 9: Program sloužící pro vykreslení květu složeného z&nbsp;kružnic.</i></p>

<p>Další předností <i>Scratche</i> je jeho orientace na tvorbu multimediálních
programů a taktéž možnost snadno prezentovat výsledný projekt na internetu, což
děti může motivovat k&nbsp;tvorbě i poměrně komplikovaných aplikací
(v&nbsp;minulosti byla tato možnost vykoupena nutností používat Flash, což
mohlo v&nbsp;některých případech sdílení projektů komplikovat, nicméně
v&nbsp;současnosti je již dokončen převod Scratche do plnohodnotného webového
prostředí). Nesmíme zapomenout ani na to, že další přednosti <i>Scratche</i> by
se mohly objevit při jeho použití v&nbsp;učebnách vybavených interaktivními
tabulemi &ndash; jedná se vlastně o ideální aplikaci, která by mohla možnosti
těchto tabulí plně využít.</p>

*** image ***
<p><i>Obrázek 10: Výsledek běhu programu z&nbsp;obrázku číslo 6.</i></p>

<p>Musíme se však zmínit i o některých problémech, kterými projekt
<i>Scratch</i> trpí. Mnohé problémy či možná lépe řečeno omezení částečně
vyplývají z&nbsp;toho, že jeho tvůrci nechtěli zbytečně komplikovat uživatelské
rozhraní <i>Scratche</i> ani počet dostupných funkcí. Z&nbsp;těchto snah o
minimalismus vyplývá mj.&nbsp;i například neexistence funkcí umožňujících práci
se soubory, funkcí pro komunikaci přes počítačovou síť atd. Tento nedostatek je
možné řešit nainstalováním různých modifikací (modů) <i>Scratche</i>, které
však <a href="http://wiki.scratch.mit.edu/wiki/Scratch_Modification">nejsou
oficiálně podporovány</a>. Ovšem mnohem závažnější je nemožnost tvorby
vlastních stavebních bloků, které by nahrazovaly podprogramy/procedury/funkce.
Právě z&nbsp;tohoto důvodu vzniklo několik rozšíření <i>Scratche</i>, především
projekt <i>BYOB &ndash; Build Your Own Block</i>, který byl nahrazen novějším
projektem nazvaným <i>Snap!</i> (<a
href="http://snap.berkeley.edu/">http://snap.berkeley.edu/</a>).</p>

*** image ***
<p><i>Obrázek 11: Výsledek běhu programu, v&nbsp;němž jsou použity proměnné a
řídicí bloky.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Projekt Snap!</h2>

<p>Jak již bylo naznačeno <a href="#k04">v&nbsp;předchozí kapitole</a>, je
<i>Snap!</i> dalším nástrojem, který je možné v&nbsp;případě potřeby využít pro
výuku základních konceptů používaných při programování. Zjednodušeně řečeno je
možné říci, že <i>Snap!</i> je obdobou <i>Stratche</i> a projektu <i>BYOB
(Build Your Own Block)</i> přeneseného do prostředí Webu
(HTML5+CSS+JavaScript), čímž odpadá nutnost instalace celého relativně velkého
běhového prostředí původního <i>Scratche</i> a navíc se díky tomu, že
<i>Snap!</i> běží přímo ve webovém prohlížeči, může tento projekt používat na
širokém spektru různých zařízení, včetně tabletů a smartphonů (zde bude
limitujícím faktorem velikost displeje). Navíc díky této vlastnosti projektu
<i>Snap!</i> odpadají problémy s&nbsp;jeho nasazením do výuky (administrátoři
se nemusí starat o instalaci ani o udržování projektu &ndash; což ostatně platí
i pro Scratch 3.0). Prakticky všechny důležité vlastnosti <i>Scratche</i>
zůstaly zachovány a navíc mají uživatelé možnost tvorby vlastních bloků a tím
pádem i jednoduchého rozšiřování možností programovacího &bdquo;jazyka&ldquo;
(viz též screenshot číslo 14).</p>

*** image ***
<p><i>Obrázek 12: Prostředí programu Snap!</i></p>

<p><div class="rs-tip-major">Poznámka: Snap! si můžeme otestovat na stránce <a
href="https://snap.berkeley.edu/snap/snap.html">https://snap.berkeley.edu/snap/snap.html</a>.</div></p>

*** image ***
<p><i>Obrázek 13: Editor spritů (stále se jedná o webovou aplikaci).</i></p>

*** image ***
<p><i>Obrázek 14: Vytvoření nového bloku uživatelem.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Basic-256</h2>

<p>Dostáváme se k&nbsp;poněkud kontroverznímu tématu &ndash; k&nbsp;použití
programovacího jazyka BASIC pro výuku programování resp.&nbsp;pro tvorbu
jednoduché počítačové grafiky. Pod pojmem &bdquo;BASIC&ldquo; se může skrývat
široké množství programovacích jazyků, které mnohdy nemají s&nbsp;původním
prakticky nestrukturovaným BASICem známým z&nbsp;dob osmibitových mikropočítačů
prakticky nic společného. Mnohdy právě naopak: některé moderní jazyky,
v&nbsp;jejichž názvu se vyskytuje slovo &bdquo;BASIC&ldquo; jsou plně
strukturované, některé podporují objektově orientované programování (založené
buď na třídách či na posílání zpráv objektům), mnohé BASICy nabízí uživatelům i
pokročilé datové typy, jako jsou asociativní pole atd. A právě takovým poměrně
moderním dialektem BASICu je <i>Basic-256</i> zmíněný v&nbsp;tomto článku.
Důvod, proč je zde tato aplikace zmíněna je jednoduchý &ndash;
v&nbsp;<i>Basic-256</i> se velmi snadno pracuje s&nbsp;grafikou, což je
samozřejmě pro potřeby výuky ideální (je například velmi snadné vytvořit si
programovou pomůcku pro výuku matematiky či geometrie).</p>

*** image ***
<p><i>Obrázek 15: Informace o projektu Basic-256.</i></p>

<p>Jak již bylo napsáno v&nbsp;předchozím odstavci, <i>Basic-256</i> se od
klasické školy <i>BASICu</i> v&nbsp;mnoha ohledech odklání, což je ostatně jen
dobře. Jedná se o interpret doplněný o jednoduché vývojové prostředí
s&nbsp;grafickým uživatelským rozhraním, který byl navržen s&nbsp;ohledem na
to, aby se tento dialekt mohl použít při výuce programování, především na
středních školách (podle mého názoru se však hodí spíše na základní školy).
Tomu odpovídá jak jednoduchost a přehlednost vlastního vývojového prostředí,
tak i sémantika jazyka, která samozřejmě podporuje strukturované programování.
Na Internetu je dostupná cca 300stránková učebnice programování, v&nbsp;níž
jsou použity příklady naprogramované právě v&nbsp;<i>Basicu-256</i>. Nejedná se
však v&nbsp;žádném případě o učebnici, která by pouze popisovala syntaxi tohoto
jazyka, právě naopak &ndash; ukázána je například práce se základními datovými
strukturami (seznamy, zásobníkem, frontou) spolu s&nbsp;vysvětlením, jak jsou
tyto datové struktury a operace nad nimi interně implementovány. Kromě toho lze
v&nbsp;této učebnici najít i mnohé základní algoritmy, například řazení prvků
v&nbsp;posloupnosti.</p>

*** image ***
<p><i>Obrázek 16: Uživatelské rozhraní je velmi jednoduše ovladatelné.</i></p>

*** image ***
<p><i>Obrázek 17: Do bitmapy je možné vykreslit mřížku, což je velmi užitečné,
neboť se tak zvýrazní souřadnicový systém.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Základní strukturované příkazy z&nbsp;Basicu-256</h2>

<p>V&nbsp;<i>Basicu-256</i> jsou k&nbsp;dispozici prakticky všechny základní
příkazy určené pro tvorbu strukturovaných programů složených z&nbsp;funkcí,
subrutin (podprogramů), programových smyček a rozvětvení. Nalezneme zde i
typicky BASICovou smyčku typu <strong>For-Next</strong>, která je podle mého
názoru čitelnější, než podobně koncipovaná smyčka používaná v&nbsp;jazycích C,
C++, Java či JavaScript. Podívejme se jen ve stručnosti na základní
příklady:</p>

<pre>
i = 1
while i&lt;1000
   print i
   i=i*2
end while
&nbsp;
1
2
4
8
16
32
64
128
256
512
</pre>

<pre>
for i=10 to 0 step -2
   print i
next i
&nbsp;
10
8
6
4
2
0
</pre>

<pre>
x=10
do
   print x
   x=x/2
until x&lt;0.1
&nbsp;
10
5
2.5
1.25
0.625
0.3125
0.15625
</pre>

<pre>
for i=0 to 20
   print i;
   if i % 2 =0 then
      print " sude"
   else
      print " liche"
   endif
next i
&nbsp;
Zaciname
0 sude
1 liche
2 sude
3 liche
4 sude
5 liche
6 sude
7 liche
8 sude
9 liche
10 sude
11 liche
12 sude
13 liche
14 sude
15 liche
16 sude
17 liche
18 sude
19 liche
20 sude
</pre>

*** image ***
<p><i>Obrázek 18: Práce s&nbsp;rastrovou grafikou je v&nbsp;Basicu-256 skutečně snadná.</i></p>

<p>Kromě strukturovaných řídicích konstrukcí lze v&nbsp;<i>Basicu-256</i> používat i (nechvalně) známé absolutní skoky, tj.&nbsp;příkazy typu <strong>GOTO</strong> a <strong>GOSUB</strong>), ovšem čísla řádků jsou nahrazena mnohem čitelnějšími textovými návěštími (label). Čísla řádků jsou považována za speciální typ návěští a jejich použití je doporučováno pouze při převodu starších programů do <i>Basicu-256</i>.</p>

<pre>
x: print "Old school style"
   goto x
&nbsp;
Old school style
Old school style
Old school style
...
...
...
</pre>

*** image ***
<p><i>Obrázek 19: Zobrazení průběhu funkce.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Grafický výstup v&nbsp;Basicu-256</h2>

<p>Vývojové prostředí <i>Basicu-256</i> obsahuje kromě velmi jednoduchého
textového editoru i možnost zobrazení okna s&nbsp;hodnotami proměnných a taktéž
grafickou oblast, do níž je možné provádět vykreslování. Ostatně právě možnost
práce s&nbsp;grafikou, i když jsou k&nbsp;dispozici pouze základní vykreslovací
příkazy, je pro jazyk určený pro výuku programování nedocenitelná. Zajímavé je,
že grafickou plochu je možné zvětšit a dokonce lze vykreslit i mřížku a
zvýraznit tak obrázek složený z&nbsp;(větších) pixelů. Taktéž je podporována
práce se sprity, což relativně snadným a pochopitelným způsobem studentům
přibližuje techniku používanou v&nbsp;2D hrách. Ostatně podívejme se na trojici
demonstračních příkladů, v&nbsp;nichž jsou použity základní grafické příkazy
pro vymazání obrazovky, vykreslení bodu a taktéž pro vykreslení úsečky:</p>

*** image ***
<p><i>Obrázek 20: Lissajousovy obrazce.</i></p>

*** image ***
<p><i>Obrázek 21: Pokud je vykreslování pomalé, je možné zakázat automatické obnovování bitmapy po každém příkazu; o obnovení se postará explicitně zavolaný příkaz <strong>refresh</strong>.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Frameworky a knihovny navržené pro snadnou a rychlou tvorbu 2D her</h2>

<p>Zdá se, že takřka ideálním tématem projektů, které je možné řešit již na
druhém stupni ZŠ, jsou různé typy počítačových her. Ostatně stačí se jen
podívat na projekty, které děti vytváří pro Micecraft a je zřejmé, že pro
skutečně zajímavý projekt se minimálně část žáků nadchne. Pro tvorbu koncepčně
většinou jednodušších 2D her lze použít různé typy skriptovacích
vysokoúrovňových jazyků, které se začaly prosazovat již v&nbsp;dobách
osmibitových mikropočítačů a své větší využití pak skriptovací jazyky nalezly
na mnohem výkonnějších osobních počítačích. Kromě samotného jazyka je však
nutné používat i nějakou vhodnou knihovnu pro práci s&nbsp;grafikou, zvukem a
obsluhu vstupních zařízení (myš, klávesnice). V&nbsp;některých případech se
jedná o jedinou knihovnu, která nabývá komplexnější podoby &ndash; frameworku.
Pro potřeby výuky je důležité, aby byl takový framework postaven na snadno
pochopitelných konceptech, které si lze snadno osvojit a vytvořit si tak
mentální model celého frameworku. První dva dnes popisované frameworky &ndash;
<i>LÖVE</i> a <i>Pygame</i> tento požadavek do jisté míry splňují; nejvíc se
však &bdquo;ideálu&ldquo; pravděpodobně přibližuje právě nástroj <i>Pygame
Zero</i>.</p>

*** image ***
<p><i>Obrázek 22: Hra Gusanos, která využívá programovací jazyk Lua.</i></p>

<p>Před volbou frameworku použitého při výuce je nutné si zvolit vhodný
(v&nbsp;tomto případě zcela jistě vysokoúrovňový) programovací jazyk. Určitý
přelom (pravděpodobně není možné to nazvat přímo revolucí) v&nbsp;použití
skriptovacích jazyků pro tvorbu her a jiných grafických aplikací nastal
v&nbsp;roce 1993, kdy byla vydána první verze programovacího jazyka <i>Lua</i>.
Tento programovací jazyk byl již od svých prvních verzí určen pro snadné
vkládání (embedding) do jiných aplikací, mj.&nbsp;i her. A právě v&nbsp;oblasti
počítačových her se <i>Lua</i> využívala a stále využívá velmi často, což ovšem
není překvapivé, protože existuje relativně jednoduchá vazba mezi Luou a
céčkem, samotný jazyk je vysokoúrovňový (dovolím si tvrdit, že skoro dosahuje
kvalit Pythonu :-) a přitom pro spouštění skriptů je zapotřebí jen
minimalisticky pojatý virtuální stroj. Tento jazyk byl použit v&nbsp;komerčních
hrách, například v&nbsp;titulech <i>Baldur's Gate</i>, <i>Grim Fandango</i>,
adventure hra <i>Escape from Monkey Island</i> či herní série
<i>Blitzkrieg</i>, ovšem Lua se často objevuje i v&nbsp;nekomerčních titulech
(příkladem open source hry využívající možností skriptovacích jazyků je klon
<i>Liera</i>, který nese název <i>Gusanos</i>).</p>

*** image ***
<p><i>Obrázek 23: Další snímek ze hry Gusanos, která využívá programovací jazyk
Lua.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. LÖVE</h2>

<p>Systém <i>LÖVE</i>, jehož starší (dopředně nekompatibilní!) varianta byla
popsána v&nbsp;rámci <a
href="http://www.root.cz/serialy/programovaci-jazyk-lua/">seriálu o
programovacím jazyku Lua</a>, je určen pro jednoduchou a především rychlou
tvorbu her s&nbsp;2D grafikou, hudbou a zvuky, které jsou naskriptované ve <a
href="#k02">výše zmíněném</a> programovacím jazyku <i>Lua</i>, popř.&nbsp;se
v&nbsp;nich využívá pomocných funkcí naprogramovaných v&nbsp;céčku či C++ (je
však možné provést vazbu i na další programovací jazyky). Velkou předností
systému <i>LÖVE</i> je jeho snadná použitelnost, spočívající zejména
v&nbsp;přehledném aplikačním programovém rozhraní (API) jednotlivých knihoven
přítomných v&nbsp;tomto systému i jednoduché a snadno použitelné syntaxi jazyka
<i>Lua</i> a jeho dynamickém typovém systému. Poněkud problematická je zpětná
nekompatibilita se staršími verzemi <i>LÖVE</i>, což může vadit zejména
studentům hledajícím inspiraci na Internetu (některé příklady totiž zkrátka
nebudou funkční).</p>

*** image ***
<p><i>Obrázek 24: Framework LÖVE ve chvíli, kdy není načtena žádná hra (tento
animovaný obrázek se mění v&nbsp;různých verzích knihovny LÖVE).</i></p>

<p>Samotný systém <i>LÖVE</i> interně využívá (tj.&nbsp;volá funkce) několika
céčkových a C++ knihoven, především pak knihovny <i>boost</i> (obecné algoritmy
pro aplikace vytvářené v&nbsp;C++), <i>SDL</i> (nastavení grafických režimů,
přepnutí do režimu celé obrazovky, čtení stavu klávesnice, myši a joysticku),
<i>SDL_mixer</i> (podpora hudby a zvuků), <i>OpenGL</i> (2D grafika, double
buffering), <i>DevIL</i> (práce s&nbsp;rastrovými obrázky) a <i>FreeType 2</i>
(vykreslování písma), avšak vývojář, který pomocí <i>LÖVE</i> vytváří hry či
jiné interaktivní aplikace s&nbsp;2D grafikou, hudbou a zvuky, je od těchto
knihoven zcela odstíněn aplikačním programovým rozhraním systému <i>LÖVE</i> a
přijde tak do styku pouze se skripty napsanými v&nbsp;programovacím jazyku Lua.
To je pro zamýšlené účely ideální stav, který však může přinášet problémy u
rozsáhlejších her či dalších typů aplikací.</p>

*** image ***
<p><i>Obrázek 25: Ukázka blendingu v&nbsp;systému LÖVE.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. Instalace Pygame Zero</h2>

pip3 install --user pgzero

Collecting pgzero
  Downloading https://files.pythonhosted.org/packages/48/e5/e5f14292373cb5fc7539aa01307b184c1e3c954d68945d8c44778669dd82/pgzero-1.2-py3-none-any.whl (69kB)
    100% |████████████████████████████████| 71kB 447kB/s 
Collecting pygame<2.0,>=1.9.2 (from pgzero)
  Downloading https://files.pythonhosted.org/packages/8e/24/ede6428359f913ed9cd1643dd5533aefeb5a2699cc95bea089de50ead586/pygame-1.9.6-cp36-cp36m-manylinux1_x86_64.whl (11.4MB)
    100% |████████████████████████████████| 11.4MB 105kB/s 
Requirement already satisfied: numpy in ./.local/lib/python3.6/site-packages (from pgzero)
Installing collected packages: pygame, pgzero

Collecting pgzero
  Using cached https://files.pythonhosted.org/packages/48/e5/e5f14292373cb5fc7539aa01307b184c1e3c954d68945d8c44778669dd82/pgzero-1.2-py3-none-any.whl
Requirement already satisfied: numpy in ./.local/lib/python3.6/site-packages (from pgzero)
Collecting pygame<2.0,>=1.9.2 (from pgzero)
  Using cached https://files.pythonhosted.org/packages/8e/24/ede6428359f913ed9cd1643dd5533aefeb5a2699cc95bea089de50ead586/pygame-1.9.6-cp36-cp36m-manylinux1_x86_64.whl
Installing collected packages: pygame, pgzero
Successfully installed pgzero-1.2 pygame-1.9.6

$ which pgzrun
/home/ptisnovs/.local/bin/pgzrun

$ pgzrun --help
pygame 1.9.6
Hello from the pygame community. https://www.pygame.org/contribute.html
Usage: pgzrun [options]

Options:
  -h, --help  show this help message and exit


$ touch intro.py
$ pgzrun intro.py 
pygame 1.9.6
Hello from the pygame community. https://www.pygame.org/contribute.html


<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Welcome to Pygame Zero<br />
<a href="https://pygame-zero.readthedocs.io/en/stable/index.html">https://pygame-zero.readthedocs.io/en/stable/index.html</a>
</li>

<li>Other libraries like Pygame Zero<br />
<a href="https://pygame-zero.readthedocs.io/en/stable/other-libs.html">https://pygame-zero.readthedocs.io/en/stable/other-libs.html</a>
</li>

<li>Principles of Pygame Zero<br />
<a href="https://pygame-zero.readthedocs.io/en/stable/principles.html">https://pygame-zero.readthedocs.io/en/stable/principles.html</a>
</li>

<li>Pygame<br />
<a href="https://www.pygame.org/news">https://www.pygame.org/news</a>
</li>

<li>Kniha: Coding Games With Pygame Zero &amp; Python: Student workbook<br />
<a href="https://bookerystore.com/downloads/coding-games-with-pygame-zero-python-student-workbook/">https://bookerystore.com/downloads/coding-games-with-pygame-zero-python-student-workbook/</a>
</li>

<li>Projekty založené na Pygame<br />
<a href="https://www.pygame.org/tags/all">https://www.pygame.org/tags/all</a>
</li>

<li>Domovská stránka projektu LÖVE<br />
<a href="https://love2d.org/">https://love2d.org/</a>
</li>

<li>PyWeek, a bi-annual game jam to write games in Python<br />
<a href="https://pyweek.org/">https://pyweek.org/</a>
</li>

<li>Teaching a kid to code with Pygame Zero<br />
<a href="https://www.mattlayman.com/blog/2019/teach-kid-code-pygame-zero/">https://www.mattlayman.com/blog/2019/teach-kid-code-pygame-zero/</a>
</li>

<li>Games with PyGame Zero<br />
<a href="https://codewith.mu/en/tutorials/1.0/pgzero">https://codewith.mu/en/tutorials/1.0/pgzero</a>
</li>

<li>Coding Games With Pygame Zero &amp; Python: Student workbook (2nd edition)<br />
<a href="https://electronstudio.github.io/pygame-zero-book/">https://electronstudio.github.io/pygame-zero-book/</a>
</li>

<li>Historie vývoje počítačových her (116. část – vývoj her v současnosti: od assembleru k PyGame)<br />
<a href="https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-116-cast-vyvoj-her-v-soucasnosti-od-assembleru-k-pygame/">https://www.root.cz/clanky/historie-vyvoje-pocitacovych-her-116-cast-vyvoj-her-v-soucasnosti-od-assembleru-k-pygame/</a>
</li>

<li>Lua + LÖVE: vytvořte si vlastní hru<br />
<a href="https://www.root.cz/clanky/lua-love-vytvorte-si-vlastni-hru/">https://www.root.cz/clanky/lua-love-vytvorte-si-vlastni-hru/</a>
</li>

<li>Hrátky se systémem LÖVE<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love/">https://www.root.cz/clanky/hratky-se-systemem-love/</a>
</li>

<li>Vytváříme hru v systému LÖVE<br />
<a href="https://www.root.cz/clanky/vytvarime-hru-v-systemu-love/">https://www.root.cz/clanky/vytvarime-hru-v-systemu-love/</a>
</li>

<li>Hrátky se systémem LÖVE - částicové systémy<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-casticove-systemy/">https://www.root.cz/clanky/hratky-se-systemem-love-casticove-systemy/</a>
</li>

<li>Hrátky se systémem LÖVE – kolize a odrazy těles<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-ndash-kolize-a-odrazy-teles/">https://www.root.cz/clanky/hratky-se-systemem-love-ndash-kolize-a-odrazy-teles/</a>
</li>

<li>Hrátky se systémem LÖVE - kolize a odrazy těles II<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-kolize-a-odrazy-teles-ii/">https://www.root.cz/clanky/hratky-se-systemem-love-kolize-a-odrazy-teles-ii/</a>
</li>

<li>Hrátky se systémem LÖVE - pružné vazby mezi tělesy<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-pruzne-vazby-mezi-telesy/">https://www.root.cz/clanky/hratky-se-systemem-love-pruzne-vazby-mezi-telesy/</a>
</li>

<li>Hrátky se systémem LÖVE - dokončení<br />
<a href="https://www.root.cz/clanky/hratky-se-systemem-love-dokonceni/">https://www.root.cz/clanky/hratky-se-systemem-love-dokonceni/</a>
</li>

<li>Seriál Letní škola programovacího jazyka Logo<br />
<a href="http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/">http://www.root.cz/serialy/letni-skola-programovaciho-jazyka-logo/</a>
</li>

<li>Scratch: oficiální stránka projektu<br />
<a href="http://scratch.mit.edu/">http://scratch.mit.edu/</a>
</li>

<li>Scratch: galerie projektů vytvořených ve Scratchi<br />
<a href="http://scratch.mit.edu/galleries/browse/newest">http://scratch.mit.edu/galleries/browse/newest</a>
</li>

<li>Scratch: nápověda<br />
<a href="file:///usr/share/scratch/Help/en/index.html">file:///usr/share/scratch/Help/en/index.html</a>
</li>

<li>Scratch: obrazovky nápovědy<br />
<a href="file:///usr/share/scratch/Help/en/allscreens.html">file:///usr/share/scratch/Help/en/allscreens.html</a>
</li>

<li>Scratch (Wikipedie CZ)<br />
<a href="http://cs.wikipedia.org/wiki/Scratch">http://cs.wikipedia.org/wiki/Scratch</a>
</li>

<li>Scratch (programming language)<br />
<a href="http://en.wikipedia.org/wiki/Scratch_(programming_language)">http://en.wikipedia.org/wiki/Scratch_(programming_language)</a>
</li>

<li>Scratch Modification<br />
<a href="http://wiki.scratch.mit.edu/wiki/Scratch_Modification">http://wiki.scratch.mit.edu/wiki/Scratch_Modification</a>
</li>

<li>Scratch Lowers Resistance to Programming<br />
<a href="http://www.wired.com/gadgetlab/2009/03/scratch-lowers/">http://www.wired.com/gadgetlab/2009/03/scratch-lowers/</a>
</li>

<li>Snap!<br />
<a href="http://snap.berkeley.edu/">http://snap.berkeley.edu/</a>
</li>

<li>Prostředí Snap!<br />
<a href="http://snap.berkeley.edu/snapsource/snap.html">http://snap.berkeley.edu/snapsource/snap.html</a>
</li>

<li>Alternatives to Scratch<br />
<a href="http://wiki.scratch.mit.edu/wiki/Alternatives_to_Scratch">http://wiki.scratch.mit.edu/wiki/Alternatives_to_Scratch</a>
</li>

<li>Snap! (programming language)<br />
<a href="https://en.wikipedia.org/wiki/Snap!_(programming_language)">https://en.wikipedia.org/wiki/Snap!_(programming_language)</a>
</li>

<li>Kniha o Basicu-256<br />
<a href="http://www.basicbook.org/files/syw2l2p_b256.pdf/">http://www.basicbook.org/files/syw2l2p_b256.pdf/</a>
</li>

<li>Basic-256 home page<br />
<a href="http://www.basic256.org/index_en">http://www.basic256.org/index_en</a>
</li>

<li>Basic-256 Language Documentation<br />
<a href="http://doc.basic256.org/doku.php">http://doc.basic256.org/doku.php</a>
</li>

<li>Basic-256 Art Gallery<br />
<a href="http://www.basic256.org/artgallery">http://www.basic256.org/artgallery</a>
</li>

<li>Basic-256 Tutorial<br />
<a href="http://www.basic256.org/tutorials">http://www.basic256.org/tutorials</a>
</li>

<li>Why BASIC?<br />
<a href="http://www.basic256.org/whybasic">http://www.basic256.org/whybasic</a>
</li>

<li>A book to teach ANYBODY how to program a computer (using BASIC)<br />
<a href="http://www.basicbook.org/">http://www.basicbook.org/</a>
</li>

<li>Sprite ve Scratchi<br />
<a href="https://en.scratch-wiki.info/wiki/Sprite">https://en.scratch-wiki.info/wiki/Sprite</a>
</li>

<li>Scratch Modification<br />
<a href="https://en.scratch-wiki.info/wiki/Scratch_Modification">https://en.scratch-wiki.info/wiki/Scratch_Modification</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

