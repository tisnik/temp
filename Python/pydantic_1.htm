<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
[project]
name = "pydantic-demo"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = "&gt;=3.12"
dependencies = []
</pre>

<pre>
$ <strong>uv add pydantic</strong>
</pre>

<pre>
Using CPython 3.12.10 interpreter at: /usr/bin/python3.12
Creating virtual environment at: .venv
Resolved 6 packages in 199ms
Installed 5 packages in 38ms
 + annotated-types==0.7.0
 + pydantic==2.11.7
 + pydantic-core==2.33.2
 + typing-extensions==4.14.1
 + typing-inspection==0.4.1
</pre>

<pre>
[project]
name = "pydantic-demo"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = "&gt;=3.12"
dependencies = [
    "pydantic&gt;=2.11.7",
]
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
Help on package pydantic:

NAME
    pydantic

PACKAGE CONTENTS
    _internal (package)
    _migration
    alias_generators
    aliases
    annotated_handlers
    class_validators
    color
    config
    dataclasses
    datetime_parse
    decorator
    deprecated (package)
    env_settings
    error_wrappers
    errors
    experimental (package)
    fields
    functional_serializers
</pre>

<pre>
Help on class BaseModel in module pydantic.main:

class BaseModel(builtins.object)
 |  BaseModel(**data: 'Any') -&gt; 'None'
 |
 |  Usage docs: https://docs.pydantic.dev/2.10/concepts/models/
 |
 |  A base class for creating Pydantic models.
 |
 |  Attributes:
 |      __class_vars__: The names of the class variables defined on the model.
 |      __private_attributes__: Metadata about the private attributes of the model.
 |      __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.
 |
 |      __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
 |      __pydantic_core_schema__: The core schema of the model.
 |      __pydantic_custom_init__: Whether the model has a custom `__init__` function.
 |      __pydantic_decorators__: Metadata containing the decorators defined on the model.
 |          This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
 |      __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
 |          __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
 |      __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
 |      __pydantic_post_init__: The name of the post-init method for the model, if defined.
 |      __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
 |      __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
 |      __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.
 |
 |      __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
 |      __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.
 |
 |      __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
 |          is set to `'allow'`.
 |      __pydantic_fields_set__: The names of fields explicitly set during instantiation.
 |      __pydantic_private__: Values of private attributes set on the model instance.
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p></p>

<pre>
from pydantic import BaseModel


class User(BaseModel):
    name: str
    surname: str
    age: int
    registered: bool


user1 = User()
print(user1)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>

<pre>
from pydantic import BaseModel


class User(BaseModel):
    name: str
    surname: str
    age: int
    registered: bool


user1 = User(name="John", surname="Doe", age=42, registered=False)
print(user1)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>

<pre>
from pydantic import BaseModel


class User(BaseModel):
    name: str
    surname: str
    age: int
    registered: bool


user1 = User(name="John", surname="Doe", age="unknown", registered="yes")
print(user1)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>

<pre>
from pydantic import BaseModel


class User(BaseModel):
    name: str
    surname: str
    age: int
    registered: bool


user1 = User(name="John", surname="Doe", age=None, registered=None)
print(user1)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>

<pre>
from pydantic import BaseModel


class User(BaseModel):
    name: str
    surname: str
    age: int | None
    registered: bool = False


user1 = User(name="John", surname="Doe", age=None)
print(user1)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>

<pre>
from pydantic import BaseModel, PositiveInt


class User(BaseModel):
    name: str
    surname: str
    age: PositiveInt | None
    registered: bool = False


user1 = User(name="John", surname="Doe", age=-1)
print(user1)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>

<pre>
from pydantic import BaseModel, PositiveInt, field_validator


class User(BaseModel):
    name: str
    surname: str
    age: PositiveInt | None
    registered: bool = False

    @field_validator("age")
    def check_age(cls, value):
        if value &lt; 18:
            raise ValueError("You are too young to register")
        return value


user1 = User(name="John", surname="Doe", age=17)
print(user1)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>

<pre>
from pydantic import BaseModel, Field, PositiveInt, field_validator


class User(BaseModel):
    name: str = Field(..., max_length=10)
    surname: str = Field(..., max_length=10)
    age: PositiveInt | None
    registered: bool = False

    @field_validator("age")
    def check_age(cls, value):
        if value &lt; 18:
            raise ValueError("You are too young to register")
        return value


user1 = User(name="Nabuchodonozor", surname="II", age=18)
print(user1)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>

<pre>
from pydantic import BaseModel, Field, PositiveInt, field_validator


class User(BaseModel):
    name: str = Field(..., max_length=10)
    surname: str = Field(..., max_length=10)
    age: PositiveInt | None
    registered: bool = False

    @field_validator("age")
    def check_age(cls, value):
        if value &lt; 18:
            raise ValueError("You are too young to register")
        return value


data = """
    {"name": "John",
     "surname": "Doe",
     "age": 18
    }
"""

user1 = User.model_validate_json(data)
print(user1)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>

<pre>
from pydantic import BaseModel, Field, PositiveInt, field_validator


class User(BaseModel):
    name: str = Field(..., max_length=10)
    surname: str = Field(..., max_length=10)
    age: PositiveInt | None
    registered: bool = False

    @field_validator("age")
    def check_age(cls, value):
        if value &lt; 18:
            raise ValueError("You are too young to register")
        return value


user1 = User(name="John", surname="Doe", age=18)

as_json = user1.model_dump_json()
print(as_json)

print()

as_json = user1.model_dump_json(indent=4)
print(as_json)
</pre>

<pre>
{"name":"John","surname":"Doe","age":18,"registered":false}

{
    "name": "John",
    "surname": "Doe",
    "age": 18,
    "registered": false
}
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
from pydantic import BaseModel, Field, PositiveInt, field_validator


class Address(BaseModel):
    street: str
    house_number: PositiveInt | str
    city: str


class User(BaseModel):
    name: str = Field(..., max_length=10)
    surname: str = Field(..., max_length=10)
    age: PositiveInt | None
    registered: bool = False

    @field_validator("age")
    def check_age(cls, value):
        if value &lt; 18:
            raise ValueError("You are too young to register")
        return value


class Character(BaseModel):
    role: str
    user: User
    address: Address


character = Character(
    role="Detective",
    user=User(name="Sherlock", surname="Holmes", age=42),
    address=Address(street="Baker", house_number="221B", city="London"),
)

as_json = character.model_dump_json(indent=4)
print(as_json)
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>

<pre>
from pydantic import BaseModel, Field, PositiveInt, field_validator


class Address(BaseModel):
    street: str
    house_number: PositiveInt | str
    city: str


class User(BaseModel):
    name: str = Field(..., max_length=10)
    surname: str = Field(..., max_length=10)
    age: PositiveInt | None
    registered: bool = False

    @field_validator("age")
    def check_age(cls, value):
        if value < 18:
            raise ValueError("You are too young to register")
        return value


class Character(BaseModel):
    role: str
    user: User
    address: Address


character = Character(
    role="Detective",
    user=User(name="Sherlock", surname="Holmes", age=42)
)

as_json = character.model_dump_json(indent=4)
print(as_json)
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>

<pre>
from pydantic import BaseModel, Field, PositiveInt, field_validator


class Address(BaseModel):
    street: str
    house_number: PositiveInt | str
    city: str


class User(BaseModel):
    name: str = Field(..., max_length=10)
    surname: str = Field(..., max_length=10)
    age: PositiveInt | None
    registered: bool = False

    @field_validator("age")
    def check_age(cls, value):
        if value < 18:
            raise ValueError("You are too young to register")
        return value


class Character(BaseModel):
    role: str
    user: User
    address: Address | None


character = Character(
    role="Detective",
    user=User(name="Sherlock", surname="Holmes", age=42),
    address=None
)

as_json = character.model_dump_json(indent=4)
print(as_json)
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<pre>
from pydantic import BaseModel, Field, PositiveInt, field_validator


class Address(BaseModel):
    street: str
    house_number: PositiveInt | str
    city: str


class User(BaseModel):
    name: str = Field(..., max_length=10)
    surname: str = Field(..., max_length=10)
    age: PositiveInt | None
    registered: bool = False

    @field_validator("age")
    def check_age(cls, value):
        if value < 18:
            raise ValueError("You are too young to register")
        return value


class Character(BaseModel):
    role: str
    user: User
    address: Address | None = None


character = Character(
    role="Detective",
    user=User(name="Sherlock", surname="Holmes", age=42)
)

as_json = character.model_dump_json(indent=4)
print(as_json)
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady vytvořené v&nbsp;Pythonu a popsané v&nbsp;dnešním
článku najdete v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs/">https://github.com/tisnik/most-popular-python-libs/</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>user_01.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_01.py</a></td></tr>
<tr><td> 2</td><td>user_02.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_02.py</a></td></tr>
<tr><td> 3</td><td>user_03.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_03.py</a></td></tr>
<tr><td> 4</td><td>user_04.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_04.py</a></td></tr>
<tr><td> 5</td><td>user_05.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_05.py</a></td></tr>
<tr><td> 6</td><td>user_06.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_06.py</a></td></tr>
<tr><td> 7</td><td>user_07.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_07.py</a></td></tr>
<tr><td> 8</td><td>user_08.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_08.py</a></td></tr>
<tr><td> 9</td><td>user_09.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_09.py</a></td></tr>
<tr><td>10</td><td>user_10.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_10.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>xx</td><td>pyproject.toml</td><td>soubor s&nbsp;definicí projektu i s&nbsp;jeho závislostmi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/pyproject.toml">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/pyproject.toml</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Pydantic: domácí stránka<br />
<a href="https://docs.pydantic.dev/latest/">https://docs.pydantic.dev/latest/</a>
</li>

<li>Pydantic na GitHubu<br />
<a href="https://github.com/pydantic/pydantic">https://github.com/pydantic/pydantic</a>
</li>

<li>Pydantic na PyPi<br />
<a href="https://pypi.org/project/pydantic/">https://pypi.org/project/pydantic/</a>
</li>

<li>Introduction to Python Pydantic Library<br />
<a href="https://www.geeksforgeeks.org/python/introduction-to-python-pydantic-library/">https://www.geeksforgeeks.org/python/introduction-to-python-pydantic-library/</a>
</li>

<li>An introduction to Pydantic (with basic example)<br />
<a href="https://www.slingacademy.com/article/an-introduction-to-pydantic-with-basic-example/">https://www.slingacademy.com/article/an-introduction-to-pydantic-with-basic-example/</a>
</li>

<li>Pydantic: Simplifying Data Validation in Python<br />
<a href="https://realpython.com/python-pydantic/">https://realpython.com/python-pydantic/</a>
</li>

<li>Pydantic: A Guide With Practical Examples<br />
<a href="https://www.datacamp.com/tutorial/pydantic">https://www.datacamp.com/tutorial/pydantic</a>
</li>

<li>Pydantic validators<br />
<a href="https://docs.pydantic.dev/latest/concepts/validators/">https://docs.pydantic.dev/latest/concepts/validators/</a>
</li>

<li>Mastering Pydantic - A Guide for Python Developers<br />
<a href="https://dev.to/devasservice/mastering-pydantic-a-guide-for-python-developers-3kan">https://dev.to/devasservice/mastering-pydantic-a-guide-for-python-developers-3kan</a>
</li>

<li>7 Best Python Libraries for Validating Data<br />
<a href="https://www.yeahhub.com/7-best-python-libraries-validating-data/">https://www.yeahhub.com/7-best-python-libraries-validating-data/</a>
</li>

<li>Universally unique identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">https://en.wikipedia.org/wiki/Universally_unique_identifier</a>
</li>

<li>UUID objects according to RFC 4122 (knihovna pro Python)<br />
<a href="https://docs.python.org/3.5/library/uuid.html#uuid.uuid4">https://docs.python.org/3.5/library/uuid.html#uuid.uuid4</a>
</li>

<li>Object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Object_identifier">https://en.wikipedia.org/wiki/Object_identifier</a>
</li>

<li>Digital object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Digital_object_identifier">https://en.wikipedia.org/wiki/Digital_object_identifier</a>
</li>

<li>voluptuous na (na PyPi)<br />
<a href="https://pypi.python.org/pypi/voluptuous">https://pypi.python.org/pypi/voluptuous</a>
</li>

<li>voluptuous (na GitHubu)<br />
<a href="https://github.com/alecthomas/voluptuous">https://github.com/alecthomas/voluptuous</a>
</li>

<li>pytest-voluptuous 1.0.2 (na PyPi)<br />
<a href="https://pypi.org/project/pytest-voluptuous/">https://pypi.org/project/pytest-voluptuous/</a>
</li>

<li>pytest-voluptuous (na GitHubu)<br />
<a href="https://github.com/F-Secure/pytest-voluptuous">https://github.com/F-Secure/pytest-voluptuous</a>
</li>

<li>schemagic 0.9.1 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schemagic/0.9.1">https://pypi.python.org/pypi/schemagic/0.9.1</a>
</li>

<li>Schemagic / Schemagic.web (na GitHubu)<br />
<a href="https://github.com/Mechrophile/schemagic">https://github.com/Mechrophile/schemagic</a>
</li>

<li>schema 0.6.7 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schema">https://pypi.python.org/pypi/schema</a>
</li>

<li>schema (na GitHubu)<br />
<a href="https://github.com/keleshev/schema">https://github.com/keleshev/schema</a>
</li>

<li>XML Schema validator and data conversion library for Python<br />
<a href="https://github.com/brunato/xmlschema">https://github.com/brunato/xmlschema</a>
</li>

<li>xmlschema 0.9.7<br />
<a href="https://pypi.python.org/pypi/xmlschema/0.9.7">https://pypi.python.org/pypi/xmlschema/0.9.7</a>
</li>

<li>jsonschema 2.6.0<br />
<a href="https://pypi.python.org/pypi/jsonschema">https://pypi.python.org/pypi/jsonschema</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

