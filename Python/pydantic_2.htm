<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Validace dat v Pythonu s využitím knihovny Pydantic (2. část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Validace dat v Pythonu s využitím knihovny Pydantic (2. část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Validace dat v&nbsp;Pythonu s&nbsp;využitím knihovny Pydantic (2. část)</a></p>
<p><a href="#k02">*** 2. Načtení konfigurace z&nbsp;konfiguračního souboru s&nbsp;konstrukcí modelu</a></p>
<p><a href="#k03">3. Přidání nové závislosti do projektového souboru <strong>pyproject.toml</strong></a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Validace dat v&nbsp;Pythonu s&nbsp;využitím knihovny Pydantic (2. část)</h2>

<p>Na <a
href="https://www.root.cz/clanky/validace-dat-v-pythonu-s-vyuzitim-knihovny-pydantic/">úvodní
článek</a> o knihovně <i>Pydantic</i> dnes navážeme. Zatímco minule jsme si
ukazovali především pouze relativně jednoduché (a také do jisté míry umělé)
demonstrační příklady, dnes se zaměříme více prakticky. Řekneme si totiž, jakým
způsobem je možné realizovat načtení konfigurace z&nbsp;konfiguračních souborů
(v&nbsp;dnes populárním formátu <a href="https://yaml.org/">YAML</a>)
s&nbsp;plnou validací načítaných dat (což je velmi důležité), možností doplnění
hodnot z&nbsp;proměnných prostředí (<i>environment variables</i>) nebo ze
zadaných souborů do načítané konfigurace atd. Všechny popisované vlastnosti
knihovny <i>Pydantic</i> budou vyzkoušeny na konfiguračním souboru, jehož
základní struktura do značné míry odpovídá konfiguraci reálného projektu; model
však byl pro účely tohoto článku do značné míry zjednodušen.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Načtení konfigurace z&nbsp;konfiguračního souboru s&nbsp;konstrukcí modelu</h2>

<p></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Přidání nové závislosti do projektového souboru <strong>pyproject.toml</strong></h2>

<p>Podobně, jako tomu bylo v&nbsp;úvodním článku, budeme i dnes zkoumat všechny
popisované vlastnosti knihovny Pydantic na krátkých demonstračních příkladech.
Vzhledem k&nbsp;tomu, že budeme načítat obsah souborů ve formátu YAML, budeme
muset do projektového souboru přidat další závislost, a to konkrétně balíček
<strong>pyaml</strong>.</p>

<p>Původně vypadal projektový soubor <strong>pyproject.toml</strong>
následovně:</p>

<pre>
[project]
name = "pydantic-demo"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = "&gt;=3.12"
dependencies = [
    "pydantic&gt;=2.11.7",
]
</pre>

<p>Příkazem <strong>uv add pyaml</strong> nebo <strong>pdm add pyaml</strong>
do něj přidáme další závislost:</p>

<pre>
$ <strong>uv add pyaml</strong>
&nbsp;
⠙ pydantic-demo==0.1.0                                                                                                                  
Resolved 8 packages in 130ms
░░░░░░░░░░░░░░░░░░░░ [0/2] Installing wheels...                                                                                         warning: Failed to hardlink files; falling back to full copy. This may lead to degraded performance.
         If the cache and target directories are on different filesystems, hardlinking may not be supported.
         If this is intentional, set `export UV_LINK_MODE=copy` or use `--link-mode=copy` to suppress this warning.
Installed 2 packages in 14ms
 + pyaml==25.7.0
 + pyyaml==6.0.2
</pre>

<p>Nyní by měl mít projektový soubor tento obsah:</p>

<pre>
[project]
name = "pydantic-demo"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = "&gt;=3.12"
dependencies = [
    "pyaml&gt;=25.7.0",
    "pydantic&gt;=2.11.7",
]
</pre>

<p><div class="rs-tip-major">Poznámka: současně se změní i obsah
<strong>uv.lock</strong> nebo <strong>pdm.lock</strong>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
<i>"""Global configuration."""</i>
&nbsp;
import yaml
&nbsp;
from pydantic import (
    BaseModel,
)
&nbsp;
&nbsp;
class <strong>Configuration</strong>(BaseModel):
    <i>"""Global configuration."""</i>
&nbsp;
    name: str
&nbsp;
&nbsp;
def <strong>load_configuration</strong>(filename: str) -&gt; Configuration:
    <i>"""Load configuration from YAML file."""</i>
    with open(filename, encoding="utf-8") as fin:
        config_dict = yaml.safe_load(fin)
        return Configuration(**config_dict)
&nbsp;
&nbsp;
configuration = load_configuration("config_01.yaml")
print(configuration)
</pre>

<pre>
name: Service configuration #1
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
<i>"""Global configuration."""</i>
&nbsp;
import yaml
&nbsp;
from pydantic import (
    BaseModel,
)
&nbsp;
&nbsp;
class <strong>Configuration</strong>(BaseModel):
    <i>"""Global configuration."""</i>
&nbsp;
    name: str
&nbsp;
    def <strong>dump</strong>(self, filename: str = "configuration.json") -&gt; None:
        <i>"""Dump actual configuration into JSON file."""</i>
        with open(filename, "w", encoding="utf-8") as fout:
            fout.write(self.model_dump_json(indent=4))
&nbsp;
&nbsp;
def <strong>load_configuration</strong>(filename: str) -&gt; Configuration:
    <i>"""Load configuration from YAML file."""</i>
    with open(filename, encoding="utf-8") as fin:
        config_dict = yaml.safe_load(fin)
        return Configuration(**config_dict)
&nbsp;
&nbsp;
configuration = load_configuration("config_02.yaml")
&nbsp;
configuration.dump("config_02.json")
</pre>

<pre>
name: Service configuration #1
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
<i>"""Global configuration."""</i>
&nbsp;
import yaml
&nbsp;
from pydantic import (
    BaseModel,
)
&nbsp;
&nbsp;
class <strong>Configuration</strong>(BaseModel):
    <i>"""Global configuration."""</i>
&nbsp;
    name: str
&nbsp;
    def <strong>dump</strong>(self, filename: str = "configuration.json") -&gt; None:
        <i>"""Dump actual configuration into JSON file."""</i>
        with open(filename, "w", encoding="utf-8") as fout:
            fout.write(self.model_dump_json(indent=4))
&nbsp;
&nbsp;
def <strong>load_configuration</strong>(filename: str) -&gt; Configuration:
    <i>"""Load configuration from YAML file."""</i>
    with open(filename, encoding="utf-8") as fin:
        config_dict = yaml.safe_load(fin)
        return Configuration(**config_dict)
&nbsp;
&nbsp;
configuration = load_configuration("config_03.yaml")
&nbsp;
configuration.dump("config_03.json")
</pre>

<pre>
name: Service configuration #1
foo: 1
bar: "*"
baz: true
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
<i>"""Global configuration."""</i>
&nbsp;
&nbsp;
import yaml
&nbsp;
from pydantic import (
    BaseModel,
    ConfigDict,
)
&nbsp;
&nbsp;
class <strong>ConfigurationBase</strong>(BaseModel):
    <i>"""Base class <strong>for</strong> all configuration models that rejects unknown fields."""</i>
&nbsp;
    model_config = ConfigDict(extra="forbid")
&nbsp;
&nbsp;
class <strong>Configuration</strong>(ConfigurationBase):
    <i>"""Global configuration."""</i>
&nbsp;
    name: str
&nbsp;
    def <strong>dump</strong>(self, filename: str = "configuration.json") -&gt; None:
        <i>"""Dump actual configuration into JSON file."""</i>
        with open(filename, "w", encoding="utf-8") as fout:
            fout.write(self.model_dump_json(indent=4))
&nbsp;
&nbsp;
def <strong>load_configuration</strong>(filename: str) -&gt; Configuration:
    <i>"""Load configuration from YAML file."""</i>
    with open(filename, encoding="utf-8") as fin:
        config_dict = yaml.safe_load(fin)
        return Configuration(**config_dict)
&nbsp;
&nbsp;
configuration = load_configuration("config_04.yaml")
&nbsp;
configuration.dump("config_04.json")
</pre>

<pre>

foo: 1
bar: "*"
baz: true
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
<i>"""Global configuration."""</i>
&nbsp;
import yaml
&nbsp;
from typing_extensions import Self
&nbsp;
from pydantic import (
    BaseModel,
    ConfigDict,
    PositiveInt,
    model_validator,
)
&nbsp;
&nbsp;
class <strong>ConfigurationBase</strong>(BaseModel):
    <i>"""Base class <strong>for</strong> all configuration models that rejects unknown fields."""</i>
&nbsp;
    model_config = ConfigDict(extra="forbid")
&nbsp;
&nbsp;
class <strong>ServiceConfiguration</strong>(ConfigurationBase):
    <i>"""Service configuration."""</i>
&nbsp;
    host: str = "localhost"
    port: PositiveInt = 8080
    auth_enabled: bool = False
    workers: PositiveInt = 1
&nbsp;
    <u>@model_validator(mode="after")</u>
    def <strong>check_service_configuration</strong>(self) -&gt; Self:
        <i>"""Check service configuration."""</i>
        if self.port &gt; 65535:
            raise ValueError("Port value should be less than 65536")
        return self
&nbsp;
&nbsp;
class <strong>Configuration</strong>(ConfigurationBase):
    <i>"""Global configuration."""</i>
&nbsp;
    name: str
    service: ServiceConfiguration
&nbsp;
    def <strong>dump</strong>(self, filename: str = "configuration.json") -&gt; None:
        <i>"""Dump actual configuration into JSON file."""</i>
        with open(filename, "w", encoding="utf-8") as fout:
            fout.write(self.model_dump_json(indent=4))
&nbsp;
&nbsp;
def <strong>load_configuration</strong>(filename: str) -&gt; Configuration:
    <i>"""Load configuration from YAML file."""</i>
    with open(filename, encoding="utf-8") as fin:
        config_dict = yaml.safe_load(fin)
        return Configuration(**config_dict)
&nbsp;
&nbsp;
configuration = load_configuration("config_05.yaml")
&nbsp;
configuration.dump("config_05.json")
</pre>

<pre>
name: Service configuration #1
service:
  host: 127.0.0.1
  port: 8080
  auth_enabled: false
  workers: 5
</pre>

<pre>
{
    "name": "Service configuration",
    "service": {
        "host": "127.0.0.1",
        "port": 8080,
        "auth_enabled": false,
        "workers": 5
    }
}
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
<i>"""Global configuration."""</i>
&nbsp;
import yaml
&nbsp;
from typing_extensions import Self, Optional
&nbsp;
from pydantic import (
    BaseModel,
    ConfigDict,
    PositiveInt,
    model_validator,
    FilePath,
)
&nbsp;
&nbsp;
# PostgreSQL connection constants
# See: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-SSLMODE
POSTGRES_DEFAULT_SSL_MODE = "prefer"
# See: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-GSSENCMODE
POSTGRES_DEFAULT_GSS_ENCMODE = "prefer"
&nbsp;
&nbsp;
class <strong>ConfigurationBase</strong>(BaseModel):
    <i>"""Base class <strong>for</strong> all configuration models that rejects unknown fields."""</i>
&nbsp;
    model_config = ConfigDict(extra="forbid")
&nbsp;
&nbsp;
class <strong>DatabaseConfiguration</strong>(ConfigurationBase):
    <i>"""Database configuration."""</i>
&nbsp;
    host: str = "localhost"
    port: PositiveInt = 5432
    db: str
    user: str
    password: str
    ssl_mode: str = POSTGRES_DEFAULT_SSL_MODE
    gss_encmode: str = POSTGRES_DEFAULT_GSS_ENCMODE
    ca_cert_path: Optional[FilePath] = None
&nbsp;
    <u>@model_validator(mode="after")</u>
    def <strong>check_postgres_configuration</strong>(self) -&gt; Self:
        <i>"""Check PostgreSQL configuration."""</i>
        if self.port &gt; 65535:
            raise ValueError("Port value should be less than 65536")
        return self
&nbsp;
&nbsp;
class <strong>ServiceConfiguration</strong>(ConfigurationBase):
    <i>"""Service configuration."""</i>
&nbsp;
    host: str = "localhost"
    port: PositiveInt = 8080
    auth_enabled: bool = False
    workers: PositiveInt = 1
    database: DatabaseConfiguration
&nbsp;
    <u>@model_validator(mode="after")</u>
    def <strong>check_service_configuration</strong>(self) -&gt; Self:
        <i>"""Check service configuration."""</i>
        if self.port &gt; 65535:
            raise ValueError("Port value should be less than 65536")
        return self
&nbsp;
&nbsp;
class <strong>Configuration</strong>(ConfigurationBase):
    <i>"""Global configuration."""</i>
&nbsp;
    name: str
    service: ServiceConfiguration
&nbsp;
    def <strong>dump</strong>(self, filename: str = "configuration.json") -&gt; None:
        <i>"""Dump actual configuration into JSON file."""</i>
        with open(filename, "w", encoding="utf-8") as fout:
            fout.write(self.model_dump_json(indent=4))
&nbsp;
&nbsp;
def <strong>load_configuration</strong>(filename: str) -&gt; Configuration:
    <i>"""Load configuration from YAML file."""</i>
    with open(filename, encoding="utf-8") as fin:
        config_dict = yaml.safe_load(fin)
        return Configuration(**config_dict)
&nbsp;
&nbsp;
configuration = load_configuration("config_06.yaml")
&nbsp;
configuration.dump("config_06.json")
</pre>

<pre>
name: Service configuration #1
service:
  host: 127.0.0.1
  port: 8080
  auth_enabled: false
  workers: 5
  database:
    host: db1.pg.com
    db: test
    user: test
    password: 123qwe
</pre>

<pre>
{
    "name": "Service configuration",
    "service": {
        "host": "127.0.0.1",
        "port": 8080,
        "auth_enabled": false,
        "workers": 5,
        "database": {
            "host": "db1.pg.com",
            "port": 5432,
            "db": "test",
            "user": "test",
            "password": "123qwe",
            "ssl_mode": "prefer",
            "gss_encmode": "prefer",
            "ca_cert_path": null
        }
    }
}
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
$ uv add pyaml-env
Resolved 9 packages in 413ms
Prepared 1 package in 94ms
Installed 1 package in 4ms
 + pyaml-env==1.2.2
</pre>

<pre>
[project]
name = "pydantic-demo"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "pyaml>=25.7.0",
    "pyaml-env>=1.2.2",
    "pydantic>=2.11.7",
]
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
<i>"""Global configuration."""</i>
&nbsp;
from pyaml_env import parse_config
&nbsp;
from typing_extensions import Self, Optional
&nbsp;
from pydantic import (
    BaseModel,
    ConfigDict,
    PositiveInt,
    model_validator,
    FilePath,
)
&nbsp;
&nbsp;
# PostgreSQL connection constants
# See: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-SSLMODE
POSTGRES_DEFAULT_SSL_MODE = "prefer"
# See: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-GSSENCMODE
POSTGRES_DEFAULT_GSS_ENCMODE = "prefer"
&nbsp;
&nbsp;
class <strong>ConfigurationBase</strong>(BaseModel):
    <i>"""Base class <strong>for</strong> all configuration models that rejects unknown fields."""</i>
&nbsp;
    model_config = ConfigDict(extra="forbid")
&nbsp;
&nbsp;
class <strong>DatabaseConfiguration</strong>(ConfigurationBase):
    <i>"""Database configuration."""</i>
&nbsp;
    host: str = "localhost"
    port: PositiveInt = 5432
    db: str
    user: str
    password: str
    ssl_mode: str = POSTGRES_DEFAULT_SSL_MODE
    gss_encmode: str = POSTGRES_DEFAULT_GSS_ENCMODE
    ca_cert_path: Optional[FilePath] = None
&nbsp;
    <u>@model_validator(mode="after")</u>
    def <strong>check_postgres_configuration</strong>(self) -&gt; Self:
        <i>"""Check PostgreSQL configuration."""</i>
        if self.port &gt; 65535:
            raise ValueError("Port value should be less than 65536")
        return self
&nbsp;
&nbsp;
class <strong>ServiceConfiguration</strong>(ConfigurationBase):
    <i>"""Service configuration."""</i>
&nbsp;
    host: str = "localhost"
    port: PositiveInt = 8080
    auth_enabled: bool = False
    workers: PositiveInt = 1
    database: DatabaseConfiguration
&nbsp;
    <u>@model_validator(mode="after")</u>
    def <strong>check_service_configuration</strong>(self) -&gt; Self:
        <i>"""Check service configuration."""</i>
        if self.port &gt; 65535:
            raise ValueError("Port value should be less than 65536")
        return self
&nbsp;
&nbsp;
class <strong>Configuration</strong>(ConfigurationBase):
    <i>"""Global configuration."""</i>
&nbsp;
    name: str
    service: ServiceConfiguration
&nbsp;
    def <strong>dump</strong>(self, filename: str = "configuration.json") -&gt; None:
        <i>"""Dump actual configuration into JSON file."""</i>
        with open(filename, "w", encoding="utf-8") as fout:
            fout.write(self.model_dump_json(indent=4))
&nbsp;
&nbsp;
def <strong>load_configuration</strong>(filename: str) -&gt; Configuration:
    <i>"""Load configuration from YAML file."""</i>
    config_dict = parse_config(filename)
    return Configuration(**config_dict)
&nbsp;
&nbsp;
configuration = load_configuration("config_07.yaml")
&nbsp;
configuration.dump("config_07.json")
</pre>

<pre>
name: Service configuration #1
service:
  host: 127.0.0.1
  port: 8080
  auth_enabled: false
  workers: 5
  database:
    host: db1.pg.com
    db: test
    user: !ENV ${DB_USER}
    password: !ENV ${DB_PASSWORD}
</pre>

<pre>
{
    "name": "Service configuration",
    "service": {
        "host": "127.0.0.1",
        "port": 8080,
        "auth_enabled": false,
        "workers": 5,
        "database": {
            "host": "db1.pg.com",
            "port": 5432,
            "db": "test",
            "user": "tester",
            "password": "top",
            "ssl_mode": "prefer",
            "gss_encmode": "prefer",
            "ca_cert_path": null
        }
    }
}
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
name: Service configuration #1
service:
  host: 127.0.0.1
  port: 8080
  auth_enabled: false
  workers: 5
  database:
    host: db1.pg.com
    db: test
    user: !ENV ${DB_USER}
    password_file: password.txt
</pre>

<pre>
<i>"""Global configuration."""</i>
&nbsp;
import os
&nbsp;
from pyaml_env import parse_config
&nbsp;
from typing_extensions import Self, Optional
&nbsp;
from pydantic import (
    BaseModel,
    ConfigDict,
    PositiveInt,
    model_validator,
    FilePath,
)
&nbsp;
&nbsp;
# PostgreSQL connection constants
# See: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-SSLMODE
POSTGRES_DEFAULT_SSL_MODE = "prefer"
# See: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-GSSENCMODE
POSTGRES_DEFAULT_GSS_ENCMODE = "prefer"
&nbsp;
&nbsp;
class <strong>InvalidConfigurationError</strong>(Exception):
    <i>"""Lightspeed configuration is invalid."""</i>
&nbsp;
&nbsp;
def <strong>get_attribute_from_file</strong>(file_path: FilePath) -&gt; Optional[str]:
    <i>"""Retrieve value of an attribute from a file."""</i>
    with open(file_path, encoding="utf-8") as f:
        return f.read().rstrip()
&nbsp;
&nbsp;
def <strong>file_check</strong>(file_path: FilePath) -&gt; None:
    <i>"""Check that path is a readable regular file."""</i>
    if not os.path.isfile(file_path):
        raise InvalidConfigurationError(f"{desc} '{path}' is not a file")
    if not os.access(file_path, os.R_OK):
        raise InvalidConfigurationError(f"{desc} '{path}' is not readable")
&nbsp;
&nbsp;
class <strong>ConfigurationBase</strong>(BaseModel):
    <i>"""Base class <strong>for</strong> all configuration models that rejects unknown fields."""</i>
&nbsp;
    model_config = ConfigDict(extra="forbid")
&nbsp;
&nbsp;
class <strong>DatabaseConfiguration</strong>(ConfigurationBase):
    <i>"""Database configuration."""</i>
&nbsp;
    host: str = "localhost"
    port: PositiveInt = 5432
    db: str
    user: str
    password: str = None
    password_file: FilePath
    ssl_mode: str = POSTGRES_DEFAULT_SSL_MODE
    gss_encmode: str = POSTGRES_DEFAULT_GSS_ENCMODE
    ca_cert_path: Optional[FilePath] = None
&nbsp;
    <u>@model_validator(mode="after")</u>
    def <strong>check_postgres_configuration</strong>(self) -&gt; Self:
        <i>"""Check PostgreSQL configuration."""</i>
        if self.port &gt; 65535:
            raise ValueError("Port value should be less than 65536")
        file_check(self.password_file)
        self.password = get_attribute_from_file(self.password_file)
        return self
&nbsp;
&nbsp;
class <strong>ServiceConfiguration</strong>(ConfigurationBase):
    <i>"""Service configuration."""</i>
&nbsp;
    host: str = "localhost"
    port: PositiveInt = 8080
    auth_enabled: bool = False
    workers: PositiveInt = 1
    database: DatabaseConfiguration
&nbsp;
    <u>@model_validator(mode="after")</u>
    def <strong>check_service_configuration</strong>(self) -&gt; Self:
        <i>"""Check service configuration."""</i>
        if self.port &gt; 65535:
            raise ValueError("Port value should be less than 65536")
        return self
&nbsp;
&nbsp;
class <strong>Configuration</strong>(ConfigurationBase):
    <i>"""Global configuration."""</i>
&nbsp;
    name: str
    service: ServiceConfiguration
&nbsp;
    def <strong>dump</strong>(self, filename: str = "configuration.json") -&gt; None:
        <i>"""Dump actual configuration into JSON file."""</i>
        with open(filename, "w", encoding="utf-8") as fout:
            fout.write(self.model_dump_json(indent=4))
&nbsp;
&nbsp;
def <strong>load_configuration</strong>(filename: str) -&gt; Configuration:
    <i>"""Load configuration from YAML file."""</i>
    config_dict = parse_config(filename)
    return Configuration(**config_dict)
&nbsp;
&nbsp;
configuration = load_configuration("config_08.yaml")
&nbsp;
configuration.dump("config_08.json")
</pre>

<pre>
{
    "name": "Service configuration",
    "service": {
        "host": "127.0.0.1",
        "port": 8080,
        "auth_enabled": false,
        "workers": 5,
        "database": {
            "host": "db1.pg.com",
            "port": 5432,
            "db": "test",
            "user": "N/A",
            "password": "123qwe",
            "password_file": "password.txt",
            "ssl_mode": "prefer",
            "gss_encmode": "prefer",
            "ca_cert_path": null
        }
    }
}
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
name: Service configuration #1
service:
  host: 127.0.0.1
  port: 8080
  auth_enabled: false
  workers: 5
  database:
    host: db1.pg.com
    db: test
    user: !ENV ${DB_USER}
    password_file: password.txt
    ssl_mode: verify-ca
    gss_encmode: disable
</pre>

<pre>
name: Service configuration #1
service:
  host: 127.0.0.1
  port: 8080
  auth_enabled: false
  workers: 5
  database:
    host: db1.pg.com
    db: test
    user: !ENV ${DB_USER}
    password_file: password.txt
    ssl_mode: false
    gss_encmode: yes
</pre>

<pre>
<i>"""Global configuration."""</i>

import os

from pyaml_env import parse_config

from typing_extensions import Self, Optional, Literal

from pydantic import (
    BaseModel,
    ConfigDict,
    PositiveInt,
    model_validator,
    FilePath,
)


# PostgreSQL connection constants
# See: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-SSLMODE
POSTGRES_DEFAULT_SSL_MODE = "prefer"
# See: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-GSSENCMODE
POSTGRES_DEFAULT_GSS_ENCMODE = "prefer"


class InvalidConfigurationError(Exception):
    """Lightspeed configuration is invalid."""


def get_attribute_from_file(file_path: FilePath) -> Optional[str]:
    """Retrieve value of an attribute from a file."""
    with open(file_path, encoding="utf-8") as f:
        return f.read().rstrip()


def file_check(file_path: FilePath) -> None:
    """Check that path is a readable regular file."""
    if not os.path.isfile(file_path):
        raise InvalidConfigurationError(f"{desc} '{path}' is not a file")
    if not os.access(file_path, os.R_OK):
        raise InvalidConfigurationError(f"{desc} '{path}' is not readable")


class ConfigurationBase(BaseModel):
    """Base class for all configuration models that rejects unknown fields."""

    model_config = ConfigDict(extra="forbid")


class DatabaseConfiguration(ConfigurationBase):
    """Database configuration."""

    host: str = "localhost"
    port: PositiveInt = 5432
    db: str
    user: str
    password: str = None
    password_file: FilePath
    ssl_mode: Literal[
        "disable", "allow", "prefer", "require", "verify-ca", "verify-full"
    ] = POSTGRES_DEFAULT_SSL_MODE
    gss_encmode: Literal["disable", "prefer", "require"] = POSTGRES_DEFAULT_GSS_ENCMODE
    ca_cert_path: Optional[FilePath] = None

    @model_validator(mode="after")
    def check_postgres_configuration(self) -> Self:
        """Check PostgreSQL configuration."""
        if self.port > 65535:
            raise ValueError("Port value should be less than 65536")
        file_check(self.password_file)
        self.password = get_attribute_from_file(self.password_file)
        return self


class ServiceConfiguration(ConfigurationBase):
    """Service configuration."""

    host: str = "localhost"
    port: PositiveInt = 8080
    auth_enabled: bool = False
    workers: PositiveInt = 1
    database: DatabaseConfiguration

    @model_validator(mode="after")
    def check_service_configuration(self) -> Self:
        """Check service configuration."""
        if self.port > 65535:
            raise ValueError("Port value should be less than 65536")
        return self


class Configuration(ConfigurationBase):
    """Global configuration."""

    name: str
    service: ServiceConfiguration

    def dump(self, filename: str = "configuration.json") -> None:
        """Dump actual configuration into JSON file."""
        with open(filename, "w", encoding="utf-8") as fout:
            fout.write(self.model_dump_json(indent=4))


def load_configuration(filename: str) -> Configuration:
    """Load configuration from YAML file."""
    config_dict = parse_config(filename)
    return Configuration(**config_dict)


configuration = load_configuration("config_09.yaml")

configuration.dump("config_09.json")

configuration = load_configuration("config_09_wrong.yaml")
</pre>

<pre>
{
    "name": "Service configuration",
    "service": {
        "host": "127.0.0.1",
        "port": 8080,
        "auth_enabled": false,
        "workers": 5,
        "database": {
            "host": "db1.pg.com",
            "port": 5432,
            "db": "test",
            "user": "tester",
            "password": "123qwe",
            "password_file": "password.txt",
            "ssl_mode": "verify-ca",
            "gss_encmode": "disable",
            "ca_cert_path": null
        }
    }
}
</pre>

<pre>
Traceback (most recent call last):
  File "/tmp/ramdisk/pydantic/pydantic-demo/config_09.py", line 113, in <module>
    configuration = load_configuration("config_09_wrong.yaml")
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/tmp/ramdisk/pydantic/pydantic-demo/config_09.py", line 106, in load_configuration
    return Configuration(**config_dict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/tmp/ramdisk/pydantic/pydantic-demo/.venv/lib64/python3.12/site-packages/pydantic/main.py", line 253, in __init__
    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
pydantic_core._pydantic_core.ValidationError: 2 validation errors for Configuration
service.database.ssl_mode
  Input should be 'disable', 'allow', 'prefer', 'require', 'verify-ca' or 'verify-full' [type=literal_error, input_value=False, input_type=bool]
    For further information visit https://errors.pydantic.dev/2.11/v/literal_error
service.database.gss_encmode
  Input should be 'disable', 'prefer' or 'require' [type=literal_error, input_value=True, input_type=bool]
    For further information visit https://errors.pydantic.dev/2.11/v/literal_error
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Demonstrační příklady vytvořené v&nbsp;Pythonu a popsané v&nbsp;minulém i v&nbsp;dnešním
článku najdete v&nbsp;repositáři <a
href="https://github.com/tisnik/most-popular-python-libs/">https://github.com/tisnik/most-popular-python-libs/</a>.
Následují odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>user_01.py</td><td>definice vlastního jednoduchého modelu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_01.py</a></td></tr>
<tr><td> 2</td><td>user_02.py</td><td>inicializace objektu s&nbsp;explicitním nastavením všech jeho atributů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_02.py</a></td></tr>
<tr><td> 3</td><td>user_03.py</td><td>typová kontrola atributů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_03.py</a></td></tr>
<tr><td> 4</td><td>user_04.py</td><td>pokus o nastavení některých atributů na hodnotu <strong>None</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_04.py</a></td></tr>
<tr><td> 5</td><td>user_05.py</td><td>atributy s&nbsp;typem umožňující i reprezentaci neexistující hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_05.py</a></td></tr>
<tr><td> 6</td><td>user_06.py</td><td>ukázka použití specializovaného typu poskytovaného knihovnou <i>Pydantic</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_06.py</a></td></tr>
<tr><td> 7</td><td>user_07.py</td><td>explicitní kontrola zadané hodnoty atributu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_07.py</a></td></tr>
<tr><td> 8</td><td>user_08.py</td><td>omezení délky řetězců zapisovaných do atributů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_08.py</a></td></tr>
<tr><td> 9</td><td>user_09.py</td><td>přečtení celé datové struktury z&nbsp;JSONu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_09.py</a></td></tr>
<tr><td>10</td><td>user_10.py</td><td>zápis modelu do formátu JSON</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/user_10.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>11</td><td>character_1.py</td><td>komplikovanější datová struktura obsahující další struktury</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/character_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/character_1.py</a></td></tr>
<tr><td>12</td><td>character_2.py</td><td>kontrola všech povinných atributů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/character_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/character_2.py</a></td></tr>
<tr><td>13</td><td>character_3.py</td><td>výchozí hodnota strukturovaných atributů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/character_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/character_3.py</a></td></tr>
<tr><td>14</td><td>character_4.py</td><td>nepovinné strukturované atributy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/character_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/character_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>config_01.py</td><td>model představující konfiguraci aplikace: pouze její jméno</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_01.py</a></td></tr>
<tr><td>16</td><td>config_01.yaml</td><td>vstupní konfigurační soubor ve formátu YAML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_01.yaml">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_01.yaml</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>config_02.py</td><td>přidaná metoda pro uložení konfigurace do formátu JSON</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_02.py</a></td></tr>
<tr><td>18</td><td>config_02.yaml</td><td>vstupní konfigurační soubor ve formátu YAML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_02.yaml">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_02.yaml</a></td></tr>
<tr><td>19</td><td>config_02.json</td><td>vygenerovaný konfigurační soubor ve formátu JSON</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_02.json">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_02.json</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td>config_03.py</td><td>načtení konfiguračního souboru s&nbsp;položkami, které nebudou načteny ani zpracovány</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_03.py</a></td></tr>
<tr><td>21</td><td>config_03.yaml</td><td>konfigurační soubor obsahující volby, které nebudou načteny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_03.yaml">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_03.yaml</a></td></tr>
<tr><td>22</td><td>config_03.json</td><td>vygenerovaný konfigurační soubor ve formátu JSON</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_03.json">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_03.json</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>config_04.py</td><td>úprava modelu takovým způsobem, že nepovolí načtení nepodporovaných položek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_04.py</a></td></tr>
<tr><td>24</td><td>config_04.yaml</td><td>konfigurační soubor obsahující volby, které nebudou načteny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_04.yaml">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_04.yaml</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>25</td><td>config_05.py</td><td>konfigurace obsahující další model: konfiguraci služby</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_05.py</a></td></tr>
<tr><td>26</td><td>config_05.yaml</td><td>konfigurační soubor ve formátu YAML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_05.yaml">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_05.yaml</a></td></tr>
<tr><td>27</td><td>config_05.json</td><td>vygenerovaný konfigurační soubor ve formátu JSON</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_05.json">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_05.json</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>27</td><td>config_06.py</td><td>konfigurace obsahující ještě jeden model: konfiguraci databáze</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_06.py</a></td></tr>
<tr><td>28</td><td>config_06.yaml</td><td>konfigurační soubor ve formátu YAML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_06.yaml">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_06.yaml</a></td></tr>
<tr><td>29</td><td>config_06.json</td><td>vygenerovaný konfigurační soubor ve formátu JSON</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_06.json">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_06.json</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>30</td><td>config_07.py</td><td>nová vlastnost: vyplnění hodnot z&nbsp;proměnných prostředí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_07.py</a></td></tr>
<tr><td>31</td><td>config_07.yaml</td><td>konfigurační soubor ve formátu YAML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_07.yaml">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_07.yaml</a></td></tr>
<tr><td>32</td><td>config_07.json</td><td>vygenerovaný konfigurační soubor ve formátu JSON</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_07.json">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_07.json</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>config_08.py</td><td>nová vlastnost: načtení hesla ze souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_08.py</a></td></tr>
<tr><td>34</td><td>config_08.yaml</td><td>konfigurační soubor ve formátu YAML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_08.yaml">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_08.yaml</a></td></tr>
<tr><td>35</td><td>config_08.json</td><td>vygenerovaný konfigurační soubor ve formátu JSON</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_08.json">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_08.json</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>36</td><td>config_09.py</td><td>nová vlastnost: test, zda je řetězcová hodnota korektní</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_09.py</a></td></tr>
<tr><td>37</td><td>config_09.yaml</td><td>konfigurační soubor ve formátu YAML</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_09.yaml">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_09.yaml</a></td></tr>
<tr><td>38</td><td>config_09.json</td><td>vygenerovaný konfigurační soubor ve formátu JSON</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_09.json">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_09.json</a></td></tr>
<tr><td>39</td><td>config_09_wrong.yaml</td><td>konfigurační soubor ve formátu YAML s&nbsp;nekorektním obsahem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_09_wrong.yaml">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/config_09_wrong.yaml</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>40</td><td>pyproject.toml</td><td>soubor s&nbsp;definicí projektu i s&nbsp;jeho závislostmi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/pyproject.toml">https://github.com/tisnik/most-popular-python-libs/blob/master/pydantic/pyproject.toml</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Pydantic: domácí stránka<br />
<a href="https://docs.pydantic.dev/latest/">https://docs.pydantic.dev/latest/</a>
</li>

<li>Pydantic na GitHubu<br />
<a href="https://github.com/pydantic/pydantic">https://github.com/pydantic/pydantic</a>
</li>

<li>Pydantic na PyPi<br />
<a href="https://pypi.org/project/pydantic/">https://pypi.org/project/pydantic/</a>
</li>

<li>Introduction to Python Pydantic Library<br />
<a href="https://www.geeksforgeeks.org/python/introduction-to-python-pydantic-library/">https://www.geeksforgeeks.org/python/introduction-to-python-pydantic-library/</a>
</li>

<li>An introduction to Pydantic (with basic example)<br />
<a href="https://www.slingacademy.com/article/an-introduction-to-pydantic-with-basic-example/">https://www.slingacademy.com/article/an-introduction-to-pydantic-with-basic-example/</a>
</li>

<li>Pydantic: Simplifying Data Validation in Python<br />
<a href="https://realpython.com/python-pydantic/">https://realpython.com/python-pydantic/</a>
</li>

<li>Pydantic: A Guide With Practical Examples<br />
<a href="https://www.datacamp.com/tutorial/pydantic">https://www.datacamp.com/tutorial/pydantic</a>
</li>

<li>Pydantic validators<br />
<a href="https://docs.pydantic.dev/latest/concepts/validators/">https://docs.pydantic.dev/latest/concepts/validators/</a>
</li>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy/</a>
</li>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy (2.část)<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-2-cast/</a>
</li>

<li>Statické typové kontroly zdrojových kódů Pythonu prováděné nástrojem Mypy (3)<br />
<a href="https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/">https://www.root.cz/clanky/staticke-typove-kontroly-zdrojovych-kodu-pythonu-provadene-nastrojem-mypy-3/</a>
</li>

<li>Novinky v&nbsp;typovém systému přidané do Pythonu 3.12<br />
<a href="https://www.root.cz/clanky/novinky-v-typovem-systemu-pridane-do-pythonu-3-12/">https://www.root.cz/clanky/novinky-v-typovem-systemu-pridane-do-pythonu-3-12/</a>
</li>

<li>Mastering Pydantic - A Guide for Python Developers<br />
<a href="https://dev.to/devasservice/mastering-pydantic-a-guide-for-python-developers-3kan">https://dev.to/devasservice/mastering-pydantic-a-guide-for-python-developers-3kan</a>
</li>

<li>7 Best Python Libraries for Validating Data<br />
<a href="https://www.yeahhub.com/7-best-python-libraries-validating-data/">https://www.yeahhub.com/7-best-python-libraries-validating-data/</a>
</li>

<li>Universally unique identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">https://en.wikipedia.org/wiki/Universally_unique_identifier</a>
</li>

<li>UUID objects according to RFC 4122 (knihovna pro Python)<br />
<a href="https://docs.python.org/3.5/library/uuid.html#uuid.uuid4">https://docs.python.org/3.5/library/uuid.html#uuid.uuid4</a>
</li>

<li>Object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Object_identifier">https://en.wikipedia.org/wiki/Object_identifier</a>
</li>

<li>Digital object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Digital_object_identifier">https://en.wikipedia.org/wiki/Digital_object_identifier</a>
</li>

<li>voluptuous na (na PyPi)<br />
<a href="https://pypi.python.org/pypi/voluptuous">https://pypi.python.org/pypi/voluptuous</a>
</li>

<li>voluptuous (na GitHubu)<br />
<a href="https://github.com/alecthomas/voluptuous">https://github.com/alecthomas/voluptuous</a>
</li>

<li>pytest-voluptuous 1.0.2 (na PyPi)<br />
<a href="https://pypi.org/project/pytest-voluptuous/">https://pypi.org/project/pytest-voluptuous/</a>
</li>

<li>pytest-voluptuous (na GitHubu)<br />
<a href="https://github.com/F-Secure/pytest-voluptuous">https://github.com/F-Secure/pytest-voluptuous</a>
</li>

<li>schemagic 0.9.1 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schemagic/0.9.1">https://pypi.python.org/pypi/schemagic/0.9.1</a>
</li>

<li>Schemagic / Schemagic.web (na GitHubu)<br />
<a href="https://github.com/Mechrophile/schemagic">https://github.com/Mechrophile/schemagic</a>
</li>

<li>schema 0.6.7 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schema">https://pypi.python.org/pypi/schema</a>
</li>

<li>schema (na GitHubu)<br />
<a href="https://github.com/keleshev/schema">https://github.com/keleshev/schema</a>
</li>

<li>XML Schema validator and data conversion library for Python<br />
<a href="https://github.com/brunato/xmlschema">https://github.com/brunato/xmlschema</a>
</li>

<li>xmlschema 0.9.7<br />
<a href="https://pypi.python.org/pypi/xmlschema/0.9.7">https://pypi.python.org/pypi/xmlschema/0.9.7</a>
</li>

<li>jsonschema 2.6.0<br />
<a href="https://pypi.python.org/pypi/jsonschema">https://pypi.python.org/pypi/jsonschema</a>
</li>

<li>Tired of Pydantic? Try These 5 Game-Changing Python Libraries<br />
<a href="https://developer-service.blog/tired-of-pydantic-try-these-5-game-changing-python-libraries/">https://developer-service.blog/tired-of-pydantic-try-these-5-game-changing-python-libraries/</a>
</li>

<li>PostgreSQL: 32.1. Database Connection Control Functions<br />
<a href="https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-GSSENCMODE">https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-GSSENCMODE</a>
</li>

<li>Python type hints: Literals<br />
<a href="https://typing.python.org/en/latest/spec/literal.html">https://typing.python.org/en/latest/spec/literal.html</a>
</li>

<li>YAML<br />
<a href="https://yaml.org/">https://yaml.org/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2025</small></p>
</body>
</html>

