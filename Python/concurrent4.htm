<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Souběžné a paralelně běžící úlohy naprogramované v Pythonu - knihovna Trio</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Souběžné a paralelně běžící úlohy naprogramované v Pythonu - knihovna Trio</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Souběžné a paralelně běžící úlohy naprogramované v&nbsp;Pythonu &ndash; knihovna Trio</a></p>
<p><a href="#k02">2. Spuštění korutiny v&nbsp;knihovnách Curio a Trio</a></p>
<p><a href="#k03">3. Předání parametrů synchronně či asynchronně volané korutině</a></p>
<p><a href="#k04">4. Chování programu při spuštění několika korutin funkcí <strong>trio.run</strong></a></p>
<p><a href="#k05">5. Asynchronní spuštění korutin v&nbsp;knihovně <strong>curio</strong></a></p>
<p><a href="#k06">*** 6. &bdquo;Struktorvané programování souběžných úloh&ldquo;</a></p>
<p><a href="#k07">*** 7. Spuštění korutin s&nbsp;čekáním na jejich dokončení v&nbsp;bloku <strong>async with</strong></a></p>
<p><a href="#k08">*** 8. Postupné spouštění korutin ve více blocích <strong>async with</strong></a></p>
<p><a href="#k09">9. Výjimky vznikající v&nbsp;korutinách</a></p>
<p><a href="#k10">10. Zachycení výjimek vyhazovaných z&nbsp;korutin</a></p>
<p><a href="#k11">11. Vznik výjimek souběžně v&nbsp;několika korutinách</a></p>
<p><a href="#k12">12. Je počet korutin (souběžných úloh) prakticky omezen?</a></p>
<p><a href="#k13">13. Paměťové nároky programu s&nbsp;10000 korutinami</a></p>
<p><a href="#k14">14. Spuštění 10000 souběžných úloh se sledováním vytížení CPU</a></p>
<p><a href="#k15">15. Komunikace mezi souběžnými úlohami s&nbsp;využitím kanálů</a></p>
<p><a href="#k16">16. Základní vlastnosti kanálů nabízených knihovnou Trio</a></p>
<p><a href="#k17">17. Ukázka klasické úlohy typu producent-konzument</a></p>
<p><a href="#k18">18. Obsah druhé části článku</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Souběžné a paralelně běžící úlohy naprogramované v&nbsp;Pythonu &ndash; knihovna Trio</h2>

If a function like this wants to call a function like this is it gonna happen?

sync sync ✓

sync async NOPE

async sync ✓

async async ✓

trio.run -> [async function] -> ... -> [async function] -> trio.whatever



<p><a name="k02"></a></p>
<h2 id="k02">2. Spuštění korutiny v&nbsp;knihovnách Curio a Trio</h2>

<p><a
href="https://www.root.cz/clanky/soubezne-a-paralelne-bezici-ulohy-naprogramovane-v-pythonu-curio-a-trio/">V&nbsp;předchozím
článku</a> jsme si ukázali způsob spuštění korutiny z&nbsp;hlavní funkce
(<strong>main</strong>). Korutina je reprezentována funkcí s&nbsp;deklarací
<strong>async</strong> a nelze ji tedy spustit přímo. Proto je nutné
(v&nbsp;případě použití knihovny <i>Curio</i> popsané minule) použít funkci
nazvanou <strong>run</strong>. Povšimněte si, že prvním (a jediným povinným)
parametrem této funkce je korutina, která se má spustit. To mj.&nbsp;znamená,
že se můžeme obejít bez explicitního vytvoření úlohy a jejího následného
volání:</p>

<pre>
import curio
&nbsp;
&nbsp;
<u>async def</u> task():
    print("task started")
    <u>await</u> curio.sleep(5)
    print("task finished")
&nbsp;
&nbsp;
def main():
    print("main started")
    curio.run(task)
    print("done")
&nbsp;
&nbsp;
main()
</pre>

<p>Prakticky stejným způsobem bude problematika spuštění korutiny realizována
v&nbsp;knihovně <i>Trio</i>. Oba příklady jsou prakticky totožné, liší se pouze
odlišným importem a jiným jménem balíčku s&nbsp;volanou funkcí
<strong>run</strong>:</p>

<pre>
import <strong>trio</strong>
&nbsp;
&nbsp;
<u>async def</u> task():
    print("task started")
    <u>await</u> trio.sleep(5)
    print("task finished")
&nbsp;
&nbsp;
def main():
    print("main started")
    trio.run(task)
    print("done")
&nbsp;
&nbsp;
main()
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_01.py</a>.</div></p>

<p>Povšimněte si však situace, kdy v&nbsp;korutině <strong>task</strong>
zavoláme korutinu <strong>trio.sleep</strong> přímo, tedy bez použití klíčového
slova <strong>await</strong>. To je obecně nekorektní řešení:</p>

<pre>
import <strong>trio</strong>
&nbsp;
&nbsp;
<u>async def</u> task():
    print("task started")
    trio.sleep(5)
    print("task finished")
&nbsp;
&nbsp;
def main():
    print("main started")
    trio.run(task)
    print("done")
&nbsp;
&nbsp;
main()
</pre>

<p>Na tento problém nás knihovna <i>Trio</i> upozorní varováním (a toto
varování je vhodné ihned opravit):</p>

<pre>
main started
task started
trio_01_error.py:6: RuntimeWarning: coroutine 'sleep' was never awaited
  trio.sleep(5)
RuntimeWarning: Enable tracemalloc to get the object allocation traceback
task finished
done
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_01_error.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_01_error.py</a>.</div></p>




<p><a name="k03"></a></p>
<h2 id="k03">3. Předání parametrů synchronně či asynchronně volané korutině</h2>

<p>Korutinám je v&nbsp;naprosté většině případů nutné předávat nějaké
parametry. V&nbsp;případě, že je použita knihovna <strong>trio</strong>, jsou
parametry korutině předány přímo v&nbsp;rámci funkce <strong>trio.run</strong>.
Povšimněte si podstatného rozdílu &ndash; nevoláme zde přímo korutinu
<strong>task</strong> (ve skutečnosti ani v&nbsp;případě
<strong>asyncio</strong> nedochází k&nbsp;jejímu přímému volání), ale reference
na (synchronně či asynchronně) volanou korutinu se společně s&nbsp;jejími
parametry předává funkci <strong>run</strong>:</p>

<pre>
import <strong>trio</strong>
&nbsp;
&nbsp;
<u>async def</u> task(n, s):
    print("task started")
&nbsp;
    for i in range(n):
        print(f"{i+1}/{n}")
        <u>await</u> trio.sleep(s)
&nbsp;
    print("task finished")
&nbsp;
&nbsp;
def main():
    print("main started")
    trio.run(task, 10, 1)
    print("done")
&nbsp;
&nbsp;
main()
</pre>

<p>Po spuštění tohoto příkladu uvidíme, že se díky <strong>await</strong> vždy
čeká na dokončení předchozí korutiny:</p>

<pre>
main started
task started
1/10
2/10
3/10
4/10
5/10
6/10
7/10
8/10
9/10
10/10
task finished
done
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Chování programu při spuštění několika korutin funkcí <strong>trio.run</strong></h2>

<p>Zkusme si nyní spustit následující skript, v&nbsp;němž jsou vytvořeny a
spuštěny celkem tři korutiny. Varianta určená pro knihovnu
<strong>curie</strong> vypadá takto (viz též předchozí článek):</p>

<pre>
import curio
&nbsp;
&nbsp;
<u>async def</u> task(name, n, s):
    print(f"{name} task started")
&nbsp;
    for i in range(n):
        print(f"{name} {i+1}/{n}")
        <u>await</u> curio.sleep(s)
&nbsp;
    print(f"{name} task finished")
&nbsp;
&nbsp;
def main():
    print("main started")
    curio.run(task, "1st", 10, 1)
    curio.run(task, "2nd", 10, 1)
    curio.run(task, "3rd", 10, 1)
    print("done")
&nbsp;
&nbsp;
main()
</pre>

<p>Prakticky stejným způsobem lze realizovat tentýž skript, nyní ovšem
s&nbsp;využitím knihovny <strong>Trio</strong>:</p>

<pre>
import <strong>trio</strong>
&nbsp;
&nbsp;
<u>async def</u> task(name, n, s):
    print(f"{name} task started")
&nbsp;
    for i in range(n):
        print(f"{name} {i+1}/{n}")
        <u>await</u> trio.sleep(s)
&nbsp;
    print(f"{name} task finished")
&nbsp;
&nbsp;
def main():
    print("main started")
    trio.run(task, "1st", 10, 1)
    trio.run(task, "2nd", 10, 1)
    trio.run(task, "3rd", 10, 1)
    print("done")
&nbsp;
&nbsp;
main()
</pre>

<p>Po spuštění tohoto skriptu získáme následující výstup, který jasně ukazuje,
že i přes volání <strong>await trio.sleep</strong> v&nbsp;korutině nedojde
k&nbsp;přepnutí na další korutinu &ndash; další korutina totiž ještě ani nebyla
vytvořena. To vlastně znamená, že <strong>trio.run</strong> zajišťuje
synchronní volání korutiny (protože se skutečně jedná o korutinu získanou
transformací funkce s&nbsp;využitím konstrukce <strong>async</strong>):</p>

<pre>

main started
1st task started
1st 1/10
1st 2/10
1st 3/10
1st 4/10
1st 5/10
1st 6/10
1st 7/10
1st 8/10
1st 9/10
1st 10/10
1st task finished
2nd task started
...
...
...
3rd task started
3rd 1/10
3rd 2/10
3rd 3/10
3rd 4/10
3rd 5/10
3rd 6/10
3rd 7/10
3rd 8/10
3rd 9/10
3rd 10/10
3rd task finished
done
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Asynchronní spuštění korutin v&nbsp;knihovně <strong>curio</strong></h2>

<p>Pro skutečné asynchronní spouštění korutin se v&nbsp;knihovně
<strong>curio</strong> používá funkce <strong>spawn</strong>. Knihovna
<strong>trio</strong> sice programátorům nabízí jiné (lepší) řešení, ovšem pro
porovnání si nejdříve ukažme, jak lze spustit tři korutiny s&nbsp;využitím
možností nabízených knihovnou <strong>curio</strong>:</p>

<pre>
import curio
&nbsp;
&nbsp;
<u>async</u> def <strong>task</strong>(name, n, s):
    print(f"{name} task started")
&nbsp;
    for i in range(n):
        print(f"{name} {i+1}/{n}")
        <u>await</u> curio.sleep(s)
&nbsp;
    print(f"{name} task finished")
&nbsp;
&nbsp;
<u>async</u> def <strong>main</strong>():
    print("main started")
&nbsp;
    task1 = <u>await</u> curio.spawn(task, "1st", 10, 1)
    task2 = <u>await</u> curio.spawn(task, "2nd", 10, 1)
    task3 = <u>await</u> curio.spawn(task, "3rd", 10, 1)
&nbsp;
    <u>await</u> task1.join()
    <u>await</u> task2.join()
    <u>await</u> task3.join()
&nbsp;
    print("done")
&nbsp;
&nbsp;
curio.run(main())
</pre>

<p><div class="rs-tip-major">Poznámka: můžeme zde vidět kombinaci <strong>await
curio.spawn</strong> a <strong>await task.join()</strong>.</div></p>

<p>Nyní dojde ke skutečnému souběžnému běhu korutin, mezi nimiž se přepíná
během &bdquo;spánku&ldquo; vyvolanému zavoláním
<strong>curio.sleep</strong>:</p>

<pre>
main started
1st task started
1st 1/10
2nd task started
2nd 1/10
3rd task started
3rd 1/10
1st 2/10
2nd 2/10
3rd 2/10
1st 3/10
2nd 3/10
3rd 3/10
1st 4/10
2nd 4/10
3rd 4/10
1st 5/10
2nd 5/10
3rd 5/10
1st 6/10
2nd 6/10
3rd 6/10
1st 7/10
2nd 7/10
3rd 7/10
1st 8/10
2nd 8/10
3rd 8/10
1st 9/10
2nd 9/10
3rd 9/10
1st 10/10
2nd 10/10
3rd 10/10
1st task finished
2nd task finished
3rd task finished
done
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. &bdquo;Struktorvané programování souběžných úloh&ldquo;</h2>

<p></p>

Jedním z těchto idiomů je používání správců kontextu a bloků with pro ty prostředky, které se mají automaticky uzavírat po odchodu z bloku with (a to jakýmkoli způsobem, včetně výskoku z funkce atd.):

with open('hello.txt', 'w') as fout:
    fout.write('Hi there!')

V praxi to znamená, že jak nějaká třída implementuje obě metody __enter__ a __exit__ nezbytné pro to, aby se jednalo o korektně naprogramované správce kontextu (context manager). Je tedy možné zapsat například tento kód:

<pre>
class Context():
    def __init__(self):
        print("Context: init")

    def __enter__(self):
        print("Context: enter")
        return "foo"

    def __exit__(self, type, value, traceback):
        print("Context: exit", type, value, traceback)


print("Before with block")

with Context() as c:
    print("Inside with block")
    print(c)

print("After with block")
</pre>

<pre>
Before with block
Context: init
Context: enter
Inside with block
foo
Context: exit None None None
After with block
</pre>

<pre>
import <strong>trio</strong>


class AsyncContext():
    def __init__(self):
        print("Context: init")

    def __aenter__(self):
        print("Context: aenter")
        return trio.sleep(2)

    def __aexit__(self, type, value, traceback):
        print("Context: aexit", type, value, traceback)
        return self

    def __await__(self):
        print("Context: await")
        return None


<u>async def</u> main():
    print("Before with block")

    <u>async with</u> AsyncContext() as c:
        print("Inside with block")
        print(c)

    print("After with block")


trio.run(main)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Spuštění korutin s&nbsp;čekáním na jejich dokončení v&nbsp;bloku <strong>async with</strong></h2>

<pre>
import <strong>trio</strong>


<u>async def</u> task(name, n, s):
    print(f"{name} task started")

    for i in range(n):
        print(f"{name} {i+1}/{n}")
        <u>await</u> trio.sleep(s)

    print(f"{name} task finished")


<u>async def</u> main():
    print("main started")
    <u>async with</u> trio.open_nursery() as nursery:
        nursery.start_soon(task, "1st", 10, 1)
        nursery.start_soon(task, "2nd", 10, 1)
        nursery.start_soon(task, "3rd", 10, 1)
    print("done")


trio.run(main)
</pre>

<p></p>

<pre>
import <strong>trio</strong>


<u>async def</u> task(name, n, s):
    print(f"{name} task started")

    for i in range(n):
        print(f"{name} {i+1}/{n}")
        <u>await</u> trio.sleep(s)

    print(f"{name} task finished")


<u>async def</u> main():
    print("main started")
    <u>async with</u> trio.open_nursery() as nursery:
        print(nursery.start_soon(task, "1st", 10, 1))
        print(nursery.start_soon(task, "2nd", 10, 1))
        print(nursery.start_soon(task, "3rd", 10, 1))
    print("done")


trio.run(main)
</pre>

<pre>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Postupné spouštění korutin ve více blocích <strong>async with</strong></h2>

<pre>
import <strong>trio</strong>


<u>async def</u> task(name, n, s):
    print(f"{name} task started")

    for i in range(n):
        print(f"{name} {i+1}/{n}")
        <u>await</u> trio.sleep(s)

    print(f"{name} task finished")


<u>async def</u> main():
    print("main started")

    <u>async with</u> trio.open_nursery() as nursery:
        nursery.start_soon(task, "1st", 10, 1)

    <u>async with</u> trio.open_nursery() as nursery:
        nursery.start_soon(task, "2nd", 10, 1)

    <u>async with</u> trio.open_nursery() as nursery:
        nursery.start_soon(task, "3rd", 10, 1)

    print("done")


trio.run(main)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Výjimky vznikající v&nbsp;korutinách</h2>

<p>V&nbsp;korutině, ostatně stejně jako v&nbsp;jakékoli jiné části kódu, může
vzniknout výjimka. Ta může být zachycena kódem, který korutinu vytvořil, a to
na přesně známém místě &ndash; díky existenci bloku <strong>async
with</strong>.  Podívejme se na velmi jednoduchou korutinu, která před svým
ukončením vyvolá výjimku:</p>

<pre>
import <strong>trio</strong>
&nbsp;
&nbsp;
<u>async def</u> task(name, n, s):
    print(f"{name} task started")
&nbsp;
    for i in range(n):
        print(f"{name} {i+1}/{n}")
        <u>await</u> trio.sleep(s)
&nbsp;
    raise Exception(name)
    print(f"{name} task finished")
&nbsp;
&nbsp;
<u>async def</u> main():
    print("main started")
    <u>async with</u> trio.open_nursery() as nursery:
        nursery.start_soon(task, "1st", 10, 0.3)
        nursery.start_soon(task, "2nd", 10, 0.3)
        nursery.start_soon(task, "3rd", 10, 0.3)
    print("done")
&nbsp;
&nbsp;
trio.run(main)
</pre>

<p>Tato výjimka není nikde zachycena a proto &bdquo;probublá&ldquo; až do kódu,
který náš program spustil:</p>

<pre>
main started
1st task started
1st 1/10
2nd task started
2nd 1/10
3rd task started
3rd 1/10
1st 2/10
2nd 2/10
3rd 2/10
3rd 3/10
2nd 3/10
1st 3/10
3rd 4/10
2nd 4/10
1st 4/10
3rd 5/10
2nd 5/10
1st 5/10
3rd 6/10
2nd 6/10
1st 6/10
1st 7/10
2nd 7/10
3rd 7/10
1st 8/10
2nd 8/10
3rd 8/10
1st 9/10
2nd 9/10
3rd 9/10
1st 10/10
2nd 10/10
3rd 10/10
Traceback (most recent call last):
  File "trio_07.py", line 24, in &lt;Module&gt;
    trio.run(main)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/trio/_core/_run.py", line 1946, in run
    raise runner.main_task_outcome.error
  File "trio_07.py", line 20, in main
    nursery.start_soon(task, "3rd", 10, 0.3)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/trio/_core/_run.py", line 813, in __aexit__
    raise combined_error_from_nursery
  File "trio_07.py", line 11, in task
    raise Exception(name)
Exception: 3rd
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že z&nbsp;výjimky,
resp.&nbsp;přesněji řečeno z&nbsp;výpisu obsahu zásobníkových rámců, je zcela
zřejmé, na kterém místě výjimka vznikla a taktéž to, že
&bdquo;probublala&ldquo; (korektně) přes funkci
<strong>main</strong>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Zachycení výjimek vyhazovaných z&nbsp;korutin</h2>

<p>Výjimku vyhozenou z&nbsp;korutiny lze zachytit v&nbsp;programovém kódu,
který korutinu vytvořil a spustil (tedy buď přímo uvnitř nebo vně bloku
<strong>async with</strong>). Tento koncept je ukázán na následujícím
příkladu:</p>

<pre>
import <strong>trio</strong>
&nbsp;
&nbsp;
<u>async def</u> task(name, n, s):
    print(f"{name} task started")
&nbsp;
    for i in range(n):
        print(f"{name} {i+1}/{n}")
        <u>await</u> trio.sleep(s)
&nbsp;
    raise Exception(name)
    print(f"{name} task finished")
&nbsp;
&nbsp;
<u>async def</u> main():
    print("main started")
    try:
        <u>async with</u> trio.open_nursery() as nursery:
            nursery.start_soon(task, "1st", 10, 0.3)
            nursery.start_soon(task, "2nd", 10, 0.3)
            nursery.start_soon(task, "3rd", 10, 0.3)
    except Exception as e:
        print("Caught", e)
    print("done")
&nbsp;
&nbsp;
trio.run(main)
</pre>

<p>Zde výjimka vede k&nbsp;ukončení bloku <strong>async with</strong> a tím
pádem i k&nbsp;ukončení korutin:</p>

<pre>
main started
3rd task started
3rd 1/10
2nd task started
2nd 1/10
1st task started
1st 1/10
1st 2/10
2nd 2/10
3rd 2/10
3rd 3/10
2nd 3/10
1st 3/10
1st 4/10
2nd 4/10
3rd 4/10
1st 5/10
2nd 5/10
3rd 5/10
3rd 6/10
2nd 6/10
1st 6/10
3rd 7/10
2nd 7/10
1st 7/10
1st 8/10
2nd 8/10
3rd 8/10
1st 9/10
2nd 9/10
3rd 9/10
3rd 10/10
2nd 10/10
1st 10/10
Caught 3rd
done
</pre>

<p>Ještě lépe bude chování patrné v&nbsp;situaci, kdy jedna z&nbsp;korutin
skončí (s&nbsp;výjimkou) dříve, než korutiny další:</p>

<pre>
import <strong>trio</strong>
&nbsp;
&nbsp;
<u>async def</u> task(name, n, s):
    print(f"{name} task started")
&nbsp;
    for i in range(n):
        print(f"{name} {i+1}/{n}")
        <u>await</u> trio.sleep(s)
&nbsp;
    raise Exception(name)
    print(f"{name} task finished")
&nbsp;
&nbsp;
<u>async def</u> main():
    print("main started")
    try:
        <u>async with</u> trio.open_nursery() as nursery:
            nursery.start_soon(task, "1st", 10, 1.0)
            nursery.start_soon(task, "2nd", 10, 1.0)
            nursery.start_soon(task, "3rd", 10, 0.1)
    except Exception as e:
        print("Caught", e)
    print("done")
&nbsp;
&nbsp;
trio.run(main)
</pre>

<p>Z&nbsp;výpisu je patrné, že výjimka způsobí ukončení dalších korutin:</p>

<pre>
main started
3rd task started
3rd 1/10
2nd task started
2nd 1/10
1st task started
1st 1/10
3rd 2/10
3rd 3/10
3rd 4/10
3rd 5/10
3rd 6/10
3rd 7/10
3rd 8/10
3rd 9/10
3rd 10/10
2nd 2/10
1st 2/10
Caught 3rd
done
</pre>

<p><div class="rs-tip-major">Poznámka: příště si ukážeme, jakým způsobem je
možné toto chování změnit, protože ne vždy musí být vyhovující.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vznik výjimek souběžně v&nbsp;několika korutinách</h2>

<p>V&nbsp;praxi může nastat situace, kdy vznikne několik výjimek
v&nbsp;souběžně běžících korutinách. Jak je však možné na tyto výjimky
reagovat, když celý koncept výjimek počítá se vznikem jediné výjimky? Knihovna
<i>Trio</i> poskytuje velmi elegantní řešení. Podívejme se nejprve na příklad
v&nbsp;němž vzniknou tři výjimky, každá jiného typu:</p>

<pre>
import <strong>trio</strong>
&nbsp;
&nbsp;
<u>async def</u> task1():
    dct = {}
    return dct["foo"]
&nbsp;
&nbsp;
<u>async def</u> task2():
    l = []
    return l[10]
&nbsp;
&nbsp;
<u>async def</u> task3():
    x = 0
    return 1/x
&nbsp;
&nbsp;
<u>async def</u> main():
    print("main started")
    <u>async with</u> trio.open_nursery() as nursery:
        nursery.start_soon(task1)
        nursery.start_soon(task2)
        nursery.start_soon(task3)
    print("done")
&nbsp;
&nbsp;
trio.run(main)
</pre>

<p>Vidíme, že každá korutina skutečně vyhodí výjimku, pokaždé jiného typu. Po
spuštění příkladu by tedy mělo být možné nějakým způsobem všechny tyto výjimky
zpracovat:</p>

<pre>
main started
Traceback (most recent call last):
  File "trio_10.py", line 28, in <module>
    trio.run(main)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/trio/_core/_run.py", line 1946, in run
    raise runner.main_task_outcome.error
  File "trio_10.py", line 24, in main
    nursery.start_soon(task3)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/trio/_core/_run.py", line 813, in __aexit__
    raise combined_error_from_nursery
trio.MultiError: ZeroDivisionError('division by zero'), IndexError('list index out of range'), KeyError('foo')
&nbsp;
Details of embedded exception 1:
&nbsp;
  Traceback (most recent call last):
    File "trio_10.py", line 16, in task3
      return 1/x
  ZeroDivisionError: division by zero
&nbsp;
Details of embedded exception 2:
&nbsp;
  Traceback (most recent call last):
    File "trio_10.py", line 11, in task2
      return l[10]
  IndexError: list index out of range
&nbsp;
Details of embedded exception 3:
&nbsp;
  Traceback (most recent call last):
    File "trio_10.py", line 6, in task1
      return dct["foo"]
  KeyError: 'foo'
</pre>

<p>Vidíme, že byla vyhozena jediná výjimka typu <strong>MultiError</strong>,
která však obsahuje přesné informace o všech výjimkách, které v&nbsp;korutinách
skutečně vznikly.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Je počet korutin (souběžných úloh) prakticky omezen?</h2>

<p>Počet současně spuštěných procesů bývá omezen praktickými možnostmi
plánovače operačního systému. V&nbsp;podstatě totéž je možné říci o vláknech,
jejichž využití je zejména v&nbsp;Pythonu navíc omezeno i existencí GILu. Jak
je však tomu v&nbsp;případě souběžných úloh neboli korutin? Ty jsou &ndash; co
se týče paralelního běhu &ndash; taktéž omezeny GILem, zajímavé ovšem bude
taktéž ověřit, jaké jsou paměťové nároky korutin popř.&nbsp;do jaké míry
existují omezení v&nbsp;oblasti jejich plánování.</p>

<p>V&nbsp;následujícím příkladu je spuštěno 100 korutin, které poběží souběžně
po dobu 100 sekund (což je dostatečný čas na provedení měření):</p>

<pre>
import <strong>trio</strong>
&nbsp;
&nbsp;
<u>async def</u> task(name, n, s):
    print(f"{name} task started")
&nbsp;
    for i in range(n):
        print(f"{name} {i+1}/{n}")
        <u>await</u> trio.sleep(s)
&nbsp;
    print(f"{name} task finished")
&nbsp;
&nbsp;
<u>async def</u> main():
    print("main started")
    <u>async with</u> trio.open_nursery() as nursery:
        for i in range(100):
            nursery.start_soon(task, f"Task {i}", 1, 100)
    print("done")
&nbsp;
&nbsp;
trio.run(main)
</pre>

<p>Po spuštění tohoto programu zjistíme číslo odpovídajícího procesu:</p>

<pre>
$ <strong>ps ax |grep python</strong>
&nbsp;
    614 ?        Ss     0:00 /usr/bin/python3 /usr/bin/networkd-dispatcher --run-startup-triggers
   4410 ?        S      0:59 /usr/bin/python3 /usr/share/system-config-printer/applet.py
   4428 ?        S      0:00 python3 /usr/lib/blueberry/safechild /usr/sbin/rfkill event
3049128 pts/2    Ss+    0:00 <u>python3 trio_11.py</u>
3049130 pts/3    S+     0:00 grep --color=auto python
</pre>

<p>A následně si necháme vypsat jeho paměťové nároky:</p>

<pre>
$ <strong>pmap 3049128</strong>
&nbsp;
3049128:   python3 trio_11.py
00007f74803bc000      4K rw---   [ anon ]
00007ffec21cb000    132K rw---   [ stack ]
00007ffec21f4000     12K r----   [ anon ]
00007ffec21f7000      4K r-x--   [ anon ]
ffffffffff600000      4K --x--   [ anon ]
 total            31772K
</pre>

<p>V&nbsp;rámci další kapitoly pak počet procesů zvýšíme na 10000, což už je
číslo, které je v&nbsp;případě použití procesů či vláken velmi
problematické.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Paměťové nároky programu s&nbsp;10000 korutinami</h2>

<p>Podívejme se nyní na paměťové nároky programu, který namísto pouhých sto
korutin vytvoří 10000 korutin, jenž budou opravdu v&nbsp;daný okamžik existovat
&bdquo;souběžně&ldquo;. Každá korutina totiž bude volat korutinu
<strong>trio.sleep</strong>, přičemž čas čekání bude nastaven na 10000 sekund,
což je dostatečně dlouhá doba na prozkoumání paměťových nároků takového
programu:</p>

<pre>
import <strong>trio</strong>
&nbsp;
&nbsp;
<u>async def</u> task(name, n, s):
    print(f"{name} task started")
&nbsp;
    for i in range(n):
        print(f"{name} {i+1}/{n}")
        <u>await</u> trio.sleep(s)
&nbsp;
    print(f"{name} task finished")
&nbsp;
&nbsp;
<u>async def</u> main():
    print("main started")
    <u>async with</u> trio.open_nursery() as nursery:
        for i in range(10000):
            nursery.start_soon(task, f"Task {i}", 1, 10000)
    print("done")
&nbsp;
&nbsp;
trio.run(main)
</pre>

<p>Po spuštění tohoto programu nejdříve zjistíme odpovídající číslo procesu
(PID):</p>

<pre>
$ <strong>ps ax |grep python</strong>
    614 ?        Ss     0:00 /usr/bin/python3 /usr/bin/networkd-dispatcher --run-startup-triggers
   4410 ?        S      0:59 /usr/bin/python3 /usr/share/system-config-printer/applet.py
   4428 ?        S      0:00 python3 /usr/lib/blueberry/safechild /usr/sbin/rfkill event
3049130 pts/2    Ss+    0:00 <u>python3 trio_11.py</u>
3049132 pts/3    S+     0:00 grep --color=auto python
</pre>

<p>A následně si necháme vypsat paměťové nároky tohoto procesu:</p>

<pre>
$ pmap <strong>3049130</strong>
3049128:   python3 trio_11.py
&nbsp;
00007fa95aed5000     28K r--s- gconv-modules.cache
00007fa95aedc000      4K r---- ld-2.31.so
00007fa95aedd000    140K r-x-- ld-2.31.so
00007fa95af00000     32K r---- ld-2.31.so
00007fa95af09000      4K r---- ld-2.31.so
00007fa95af0a000      4K rw--- ld-2.31.so
00007fa95af0b000      4K rw---   [ anon ]
00007fff488fe000    132K rw---   [ stack ]
00007fff489f8000     12K r----   [ anon ]
00007fff489fb000      4K r-x--   [ anon ]
ffffffffff600000      4K --x--   [ anon ]
 total            87168K
</pre>

<p>Z&nbsp;výpisu je patrné, že proces s&nbsp;10000 korutinami v&nbsp;paměti
zabírá přibližně 87MB, což zhruba odpovídá devíti kilobajtům na korutinu (což
je zcela nepřesný výpočet, protože obsazená paměť sice poroste lineárně, ovšem
nebude začínat v&nbsp;nule).</p>

<p><div class="rs-tip-major">Poznámka: tento demonstrační příklad je dostupný
na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_12.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_12.py</a>.</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Spuštění 10000 souběžných úloh se sledováním vytížení CPU</h2>

<p>V&nbsp;následujícím demonstračním příkladu spustíme 10000 souběžných úloh,
ovšem tak, že doba trvání operace <strong>trio.sleep()</strong> bude snížena na
minimum &ndash; jedinou sekundu. Budeme přitom zkoumat vytížení CPU:</p>

<pre>
import <strong>trio</strong>
&nbsp;
&nbsp;
<u>async def</u> task(name, n, s):
    print(f"{name} task started")
&nbsp;
    for i in range(n):
        print(f"{name} {i+1}/{n}")
        <u>await</u> trio.sleep(s)
&nbsp;
    print(f"{name} task finished")
&nbsp;
&nbsp;
<u>async def</u> main():
    print("main started")
    <u>async with</u> trio.open_nursery() as nursery:
        for i in range(10000):
            nursery.start_soon(task, f"Task {i}", 10, 1)
    print("done")
&nbsp;
&nbsp;
trio.run(main)
</pre>

<p>Takto spuštěný proces bude (obecně) v&nbsp;daný okamžik běžet na jediném
jádru, které bude vytíženo téměř na sto procent, což je ostatně patrné i při
pohledu na následující screenshot získaný nástrojem <strong>top</strong>:</p>

*** image ***
<p><i>Obrázek 1: Vytížení CPU na systému s&nbsp;osmi procesorovými
jádry.</i></p>

<p><div class="rs-tip-major">Poznámka: tento demonstrační příklad je dostupný
na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_13.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_13.py</a>.</div></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Komunikace mezi souběžnými úlohami s&nbsp;využitím kanálů</h2>

<p>Knihovny či v&nbsp;některých případech dokonce i nové jazykové konstrukce
umožňující používání kanálů (či front) pro asynchronní komunikaci mezi různými
částmi vyvíjených aplikací, se v&nbsp;posledních několika letech těší poměrně
velké popularitě. Ta je způsobena především dvěma faktory. První důvod spočívá
ve snaze o zjednodušení návrhu (či porozumění) vyvíjené aplikace, zejména ve
chvíli, kdy se v&nbsp;rámci jednoho programu předávají data
(resp.&nbsp;objekty) mezi částmi, jejichž funkce může být dobře izolována od
částí ostatních.</p>

<p>Druhý důvod je poněkud prozaičtější &ndash; v&nbsp;některých situacích je
nutné dosáhnout zvýšení efektivity celé aplikace (například zvýšit počet
odpovědí, které může server vygenerovat za určitou časovou jednotku) a přitom
není možné či vhodné využívat řešení založené na použití většího množství
vláken spravovaných přímo operačním systémem. Naprosto typickým příkladem jsou
virtuální stroje JavaScriptu, které povětšinou umožňují běh aplikace
v&nbsp;jediném vláknu (což je ovšem s&nbsp;ohledem na &bdquo;kvalitu&ldquo;
některých programových kódů spíše výhodou...).</p>

<p>Některé programovací jazyky, zejména pak <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">v&nbsp;tomto
paralelně běžícím seriálu</a> popisovaný jazyk <i>Go</i>, obsahují prostředky
sloužící pro zajištění asynchronní komunikace přímo v&nbsp;syntaxi (a
samozřejmě též v&nbsp;sémantice) jazyka. Konkrétně v&nbsp;případě jazyka
<i>Go</i> se jedná o takzvané <i>gorutiny</i>, které jsou doplněny o
specializované operace sloužící pro zápis či čtení dat z&nbsp;kanálů
(<i>channels</i>). Tyto specializované operace jsou v&nbsp;jazyce Go
představovány operátorem <strong>&lt;-</strong> (ten má dva významy
v&nbsp;závislosti na tom, zda je před operátorem uveden identifikátor
představující kanál či nikoli).</p>

<p>Knihovna Trio je založena na <i>korutinách</i>, které sice běží souběžně,
ale nikoli nutně paralelně. Nicméně i mezi korutinami je mnohdy nutné předávat
data. I zde se pro tento účel používají kanály neboli <i>channels</i>. Ty se na
jedné straně podobají frontám (<i>queue</i>), na straně druhé však mají poněkud
odlišnou sémantiku s&nbsp;pevným rozdělením na část určenou pro posílání data a
na část určenou pro čtení dat.</p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Základní vlastnosti kanálů nabízených knihovnou Trio</h2>

<p>Kanálem je v&nbsp;knihovně <i>Trio</i> myšlena interní datová struktura
sloužící pro zápis dat jednou úlohou (či větším množstvím úloh) a čtením dat
další úlohou (nebo úlohami). Z&nbsp;pohledu programátora je kanál reprezentován
dvojicí objektů, přičemž jeden z&nbsp;těchto objektů slouží pro zápis dat a
druhý pro jejich čtení. To je největší rozdíl oproti klasickým frontám, kde
jeden objekt (opět z&nbsp;pohledu programátora) nabízí obě operace &ndash;
zápis i čtení dat. Kanál má specifikovanou <i>kapacitu</i>, tedy počet zpráv,
které v&nbsp;něm mohou být uloženy, možné je vytvořit i kanál s&nbsp;nulovou
kapacitou, což znamená, že každý zápis dat je blokující a musí být následován
jejich čtením (z&nbsp;druhé strany kanálu). Kanál je možné uzavřít metodou
<strong>aclose</strong>, ovšem toto uzavření je provedeno automaticky
v&nbsp;případě, že je kanál vytvořen v&nbsp;bloku <strong>async with</strong>.
Následuje typický příklad konstrukce kanálu se získáním dvojice objektů &ndash;
jeden je určený pro zápis dat, druhý pro čtení dat. Kapacita je nulová:</p>

<pre>
<u>async with</u> trio.open_nursery() as nursery:
    send_channel, receive_channel = trio.open_memory_channel(0)
</pre>

<p>Konstrukce kanálu s&nbsp;omezenou kapacitou interního bufferu:</p>

<pre>
<u>async with</u> trio.open_nursery() as nursery:
    send_channel, receive_channel = trio.open_memory_channel(100)
</pre>

<p>Konstrukce kanálu s&nbsp;neomezenou kapacitou interního bufferu:</p>

<pre>
<u>async with</u> trio.open_nursery() as nursery:
    send_channel, receive_channel = trio.open_memory_channel(math.inf)
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Ukázka klasické úlohy typu producent-konzument</h2>

<p>Klasickou úlohu typu producent-konzument s&nbsp;jediným producentem a
jediným konzumentem je možné v&nbsp;knihovně Trio zapsat zcela idiomatickým
způsobem. Producent použije &bdquo;vysílací&ldquo; část kanálu a producent část
&bdquo;přijímací&ldquo;. Jak producent, tak i konzument jsou vytvořeny společně
s&nbsp;kanálem v&nbsp;bloku <strong>async with</strong>, čímž je zajištěno
automatické uzavření všech prostředků. Tento demonstrační příklad lze později
rozšířit, například tak, aby se použil kanál s&nbsp;kapacitou, větší množství
producentů a/nebo větší množství konzumentů:</p>

<pre>
import <strong>trio</strong>
&nbsp;
&nbsp;
<u>async def</u> <strong>producer</strong>(send_channel):
    for i in range(1, 10):
        message = f"message {i}"
        print(f"Producer: {message}")
        <u>await</u> send_channel.send(message)
&nbsp;
&nbsp;
<u>async def</u> <strong>consumer</strong>(receive_channel):
    async for value in receive_channel:
        print(f"Consumer: received{value!r}")
        <u>await</u> trio.sleep(1)
&nbsp;
&nbsp;
<u>async def</u> <strong>main</strong>():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(0)
        nursery.start_soon(producer, send_channel)
        nursery.start_soon(consumer, receive_channel)
&nbsp;
&nbsp;
trio.run(main)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_14.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_14.py</a>.</div></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Obsah druhé části článku</h2>

<p>Knihovna <i>Trio</i> nabízí programátorům i některé další užitečné techniky.
Jedná se například o možnost předčasného ukončení souběžně běžících úloh,
specifikace maximálního času pro provedení úlohy (<i>timeout</i>), vytvoření
souběžných úloh z&nbsp;jiných souběžných úloh a v&nbsp;neposlední řadě o
podporu monitoringu celé aplikace. S&nbsp;těmito technikami se podrobněji
seznámíme v&nbsp;samostatném článku.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 byly uloženy do Git repositáře dostupného na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>multithreading1.py</td><td>spuštění tří vláken vykonávajících déletrvající činnost</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading1.py</a></td></tr>
<tr><td> 2</td><td>multithreading2.py</td><td>spuštění tří vláken, předání parametrů volaným funkcím</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading2.py</a></td></tr>
<tr><td> 3</td><td>multithreading3.py</td><td>explicitní čekání na dokončení běhu vláken metodou <strong>join</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading3.py</a></td></tr>
<tr><td> 4</td><td>multithreading4.py</td><td>sdílený objekt</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading4.py</a></td></tr>
<tr><td> 5</td><td>multithreading_join_deamon.py</td><td>čekání na dokončení vláken s&nbsp;příznakem &bdquo;daemon&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_join_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_join_deamon.py</a></td></tr>
<tr><td> 6</td><td>multithreading_no_join_deamon.py</td><td>vlákna s&nbsp;příznakem &bdquo;daemon&ldquo;, na jejichž ukončení se nečeká</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_deamon.py</a></td></tr>
<tr><td> 7</td><td>multithreading_no_join_no_deamon.py</td><td>běžná vlákna bez příznaku &bdquo;daemon&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_no_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_no_deamon.py</a></td></tr>
<tr><td> 8</td><td>multithreading_timeout.py</td><td>specifikace maximální doby čekání na ukončení vlákna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_timeout.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_timeout.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>multiprocessing1.py</td><td>zavolání funkce spuštěné v&nbsp;rámci dalšího procesu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing1.py</a></td></tr>
<tr><td>10</td><td>multiprocessing2.py</td><td>spuštění většího množství procesů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing2.py</a></td></tr>
<tr><td>11</td><td>multiprocessing3.py</td><td>nepatrná úprava předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing3.py</a></td></tr>
<tr><td>12</td><td>multiprocessing4.py</td><td>řízení workerů posílanými příkazy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing4.py</a></td></tr>
<tr><td>13</td><td>multiprocessing5.py</td><td>řízení workerů posílanými příkazy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing5.py</a></td></tr>
<tr><td>14</td><td>multiprocessing6.py</td><td>jeden proces a sdílená globální hodnota</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing6.py</a></td></tr>
<tr><td>15</td><td>multiprocessing7.py</td><td>více procesů, které nesdílí hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing7.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>queue_example.py</td><td>základní vlastnosti sdílené datové struktury <strong>Queue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queue_example.py</a></td></tr>
<tr><td>17</td><td>simple_queue_example.py</td><td>základní vlastnosti sdílené datové struktury <strong>SimpleQueue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/simple_queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/simple_queue_example.py</a></td></tr>
<tr><td>18</td><td>priority_queue_example.py</td><td>základní vlastnosti sdílené datové struktury <strong>PriorityQueue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/priority_queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/priority_queue_example.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>queues1.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: základní forma</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues1.py</a></td></tr>
<tr><td>20</td><td>queues2.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: více konzumentů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues2.py</a></td></tr>
<tr><td>21</td><td>queues3.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: více producentů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues3.py</a></td></tr>
<tr><td>22</td><td>queues4.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: více producentů i konzumentů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>thread_pool_1.py</td><td>spuštění tří úloh ve třech vláknech</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_1.py</a></td></tr>
<tr><td>24</td><td>thread_pool_2.py</td><td>spuštění deseti úloh v&nbsp;deseti vláknech</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_2.py</a></td></tr>
<tr><td>25</td><td>thread_pool_3.py</td><td>omezení počtu vláken na 3 pro celkem deset úloh</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_3.py</a></td></tr>
<tr><td>26</td><td>thread_pool_4.py</td><td>návratová hodnota získaná po spuštění úlohy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_4.py</a></td></tr>
<tr><td>27</td><td>thread_pool_5.py</td><td>získání vypočtených hodnot</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_5.py</a></td></tr>
<tr><td>28</td><td>thread_pool_6.py</td><td>alternativní způsob zápisu předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>29</td><td>process_pool_1.py</td><td>spuštění tří úloh ve vlastních procesech</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_1.py</a></td></tr>
<tr><td>30</td><td>process_pool_2.py</td><td>návratové hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_2.py</a></td></tr>
<tr><td>31</td><td>process_pool_3.py</td><td>čekání na dokončení úloh + získání návratových hodnot</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>32</td><td>async_await_1.py</td><td>základní způsob použití <strong>async</strong> a <strong>await</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_1.py</a></td></tr>
<tr><td>33</td><td>async_await_2.py</td><td>funkce <strong>main</strong> volaná asynchronně</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_2.py</a></td></tr>
<tr><td>34</td><td>async_await_3.py</td><td>dvě asynchronně běžící úlohy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_3.py</a></td></tr>
<tr><td>35</td><td>async_await_4.py</td><td>získání výsledků z&nbsp;asynchronně běžících úloh</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_4.py</a></td></tr>
<tr><td>36</td><td>async_queue_1.py</td><td>fronty pro kooperace mezi korutinami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_1.py</a></td></tr>
<tr><td>37</td><td>async_queue_2.py</td><td>korektní spuštění většího množství korutin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_2.py</a></td></tr>
<tr><td>38</td><td>async_queue_3.py</td><td>využití <strong>asyncio.gather</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_3.py</a></td></tr>
<tr><td>39</td><td>async_aiohttp_1.py</td><td>použití knihovny <strong>aiohttp</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_1.py</a></td></tr>
<tr><td>40</td><td>async_aiohttp_2.py</td><td>záznam časů trvání jednotlivých operací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_2.py</a></td></tr>
<tr><td>41</td><td>async_aiohttp_3.py</td><td>vylepšení předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_3.py</a></td></tr>
<tr><td>42</td><td>async_aiohttp_4.py</td><td>využití deseti korutin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>curio_01.py</td><td>základní konstrukce nabízené knihovnou <strong>curio</strong> (<strong>curio.run</strong>)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_01.py</a></td></tr>
<tr><td>44</td><td>curio_02.py</td><td>předání parametrů asynchronně volané korutině při volání <strong>curio.run</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_02.py</a></td></tr>
<tr><td>45</td><td>curio_03.py</td><td>chování programu při spuštění několika korutin funkcí <strong>curio.run</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_03.py</a></td></tr>
<tr><td>46</td><td>curio_04.py</td><td>asynchronní spuštění korutin pomocí <strong>curio.spawn</strong> (nekorektní příklad)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_04.py</a></td></tr>
<tr><td>47</td><td>curio_05.py</td><td>asynchronní spuštění korutin pomocí <strong>curio.spawn</strong> (korektní příklad)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_05.py</a></td></tr>
<tr><td>48</td><td>curio_06.py</td><td>čekání na dokončení korutin s&nbsp;využitím metody <strong>task.join</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_06.py</a></td></tr>
<tr><td>49</td><td>curio_07.py</td><td>spuštění monitoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_07.py</a></td></tr>
<tr><td>50</td><td>curio_08.py</td><td>využití fronty pro předávání parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_08.py</a></td></tr>
<tr><td>51</td><td>curio_09.py</td><td>datová struktura <strong>curio.UniversalQueue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_09.py</a></td></tr>
<tr><td>52</td><td>curio_10.py</td><td>klasický program typu producent-konzument</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_10.py</a></td></tr>
<tr><td>53</td><td>curio_11.py</td><td>výsledky vrácené korutinami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_11.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_11.py</a></td></tr>
<tr><td>54</td><td>curio_12.py</td><td>výsledky vrácené dlouho běžícími korutinami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_12.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_12.py</a></td></tr>
<tr><td>55</td><td>curio_13.py</td><td>čekání na výsledky po stanovený mezní časový interval</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_13.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_13.py</a></td></tr>
<tr><td>56</td><td>curio_14.py</td><td>reakce na vypršení mezního časového intervalu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_14.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_14.py</a></td></tr>
<tr><td>57</td><td>curio_15.py</td><td>výjimka vzniklá v&nbsp;korutině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_15.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_14.py</a></td></tr>
<tr><td>58</td><td>curio_16.py</td><td>reakce na výjimku vyhozenou v&nbsp;korutině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_16.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_16.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>59</td><td>with_block.py</td><td>blok <strong>with</strong> a <i>context manager</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/with_block.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/with_block.py</a></td></tr>
<tr><td>60</td><td>async_with_block.py</td><td>blok <strong>async with</strong> a asynchronní <i>context manager</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_with_block.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_with_block.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>trio_01.py</td><td>spuštění korutiny knihovnou <strong>Trio</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_01.py</a></td></tr>
<tr><td>62</td><td>trio_01_error.py</td><td>chybné vynechání slova <strong>awai</strong> při volání jiné korutiny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_01_error.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_01_error.py</a></td></tr>
<tr><td>63</td><td>trio_02.py</td><td>déletrvající souběžně běžící úloha</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_02.py</a></td></tr>
<tr><td>64</td><td>trio_03.py</td><td>tři souběžně běžící úlohy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_03.py</a></td></tr>
<tr><td>65</td><td>trio_04.py</td><td>základní způsob použití objektu <strong>nursery</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_04.py</a></td></tr>
<tr><td>66</td><td>trio_05.py</td><td>hodnota získaná po spuštění korutiny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_05.py</a></td></tr>
<tr><td>67</td><td>trio_06.py</td><td>trojice postupně spuštěných korutin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_06.py</a></td></tr>
<tr><td>68</td><td>trio_07.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_07.py</a></td></tr>
<tr><td>69</td><td>trio_08.py</td><td>vyhození výjimky v&nbsp;korutině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_08.py</a></td></tr>
<tr><td>70</td><td>trio_09.py</td><td>pokus o zachycení výjimky v&nbsp;korutině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_09.py</a></td></tr>
<tr><td>71</td><td>trio_10.py</td><td>vznik výjimek v&nbsp;několika korutinách</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_10.py</a></td></tr>
<tr><td>72</td><td>trio_11.py</td><td>paměťové nároky programu se 100 korutinami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_11.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_11.py</a></td></tr>
<tr><td>73</td><td>trio_12.py</td><td>paměťové nároky programu s&nbsp;10000 korutinami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_12.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_12.py</a></td></tr>
<tr><td>74</td><td>trio_13.py</td><td>spuštění 10000 souběžných úloh</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_13.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_13.py</a></td></tr>
<tr><td>75</td><td>trio_14.py</td><td>ukázka klasické úlohy typu producent-konzument</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_14.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_14.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Dokumentace Pythonu: balíček queue<br />
<a href="https://docs.python.org/3/library/queue.html">https://docs.python.org/3/library/queue.html</a>
</li>

<li>Dokumentace Pythonu: balíček threading<br />
<a href="https://docs.python.org/3/library/threading.html?">https://docs.python.org/3/library/threading.html?</a>
</li>

<li>Dokumentace Pythonu: balíček multiprocessing<br />
<a href="https://docs.python.org/3/library/multiprocessing.html">https://docs.python.org/3/library/multiprocessing.html</a>
</li>

<li>Dokumentace Pythonu: balíček asyncio<br />
<a href="https://docs.python.org/3/library/asyncio.html">https://docs.python.org/3/library/asyncio.html</a>
</li>

<li>Synchronization Primitives<br />
<a href="https://docs.python.org/3/library/asyncio-sync.html">https://docs.python.org/3/library/asyncio-sync.html</a>
</li>

<li>Coroutines<br />
<a href="https://docs.python.org/3/library/asyncio-task.html">https://docs.python.org/3/library/asyncio-task.html</a>
</li>

<li>Queues<br />
<a href="https://docs.python.org/3/library/asyncio-queue.html">https://docs.python.org/3/library/asyncio-queue.html</a>
</li>

<li>python-csp<br />
<a href="https://python-csp.readthedocs.io/en/latest/">https://python-csp.readthedocs.io/en/latest/</a>
</li>

<li>TrellisSTM<br />
<a href="http://peak.telecommunity.com/DevCenter/TrellisSTM">http://peak.telecommunity.com/DevCenter/TrellisSTM</a>
</li>

<li>Python Multithreading and Multiprocessing Tutorial<br />
<a href="https://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python">https://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python</a>
</li>

<li>ThreadPoolExecutor<br />
<a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor">https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor</a>
</li>

<li>ProcessPoolExecutor<br />
<a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor">https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor</a>
</li>

<li>asyncio — Asynchronous I/O<br />
<a href="https://docs.python.org/3/library/asyncio.html">https://docs.python.org/3/library/asyncio.html</a>
</li>

<li>Threads vs Async: Has Asyncio Solved Concurrency?<br />
<a href="https://www.youtube.com/watch?v=NZq31Sg8R9E">https://www.youtube.com/watch?v=NZq31Sg8R9E</a>
</li>

<li>Python Asynchronous Programming &ndash; AsyncIO &amp; Async/Await<br />
<a href="https://www.youtube.com/watch?v=t5Bo1Je9EmE">https://www.youtube.com/watch?v=t5Bo1Je9EmE</a>
</li>

<li>AsyncIO &amp; Asynchronous Programming in Python<br />
<a href="https://www.youtube.com/watch?v=6RbJYN7SoRs">https://www.youtube.com/watch?v=6RbJYN7SoRs</a>
</li>

<li>Coroutines and Tasks<br />
<a href="https://docs.python.org/3/library/asyncio-task.html">https://docs.python.org/3/library/asyncio-task.html</a>
</li>

<li>Python async/await Tutorial<br />
<a href="https://stackabuse.com/python-async-await-tutorial/">https://stackabuse.com/python-async-await-tutorial/</a>
</li>

<li>Demystifying Python's Async and Await Keywords<br />
<a href="https://www.youtube.com/watch?v=F19R_M4Nay4">https://www.youtube.com/watch?v=F19R_M4Nay4</a>
</li>

<li>Curio<br />
<a href="https://curio.readthedocs.io/en/latest/">https://curio.readthedocs.io/en/latest/</a>
</li>

<li>Trio: a friendly Python library for async concurrency and I/O<br />
<a href="https://trio.readthedocs.io/en/stable/">https://trio.readthedocs.io/en/stable/</a>
</li>

<li>Curio &ndash; A Tutorial Introduction<br />
<a href="https://curio.readthedocs.io/en/latest/tutorial.html">https://curio.readthedocs.io/en/latest/tutorial.html</a>
</li>

<li>unsync<br />
<a href="https://github.com/alex-sherman/unsync">https://github.com/alex-sherman/unsync</a>
</li>

<li>David Beazley - Die Threads<br />
<a href="https://www.youtube.com/watch?v=xOyJiN3yGfU">https://www.youtube.com/watch?v=xOyJiN3yGfU</a>
</li>

<li>Miguel Grinberg Asynchronous Python for the Complete Beginner PyCon 2017<br />
<a href="https://www.youtube.com/watch?v=iG6fr81xHKA">https://www.youtube.com/watch?v=iG6fr81xHKA</a>
</li>

<li>Build Your Own Async<br />
<a href="https://www.youtube.com/watch?v=Y4Gt3Xjd7G8">https://www.youtube.com/watch?v=Y4Gt3Xjd7G8</a>
</li>

<li>The Other Async (Threads + Async = ❤️)<br />
<a href="https://www.youtube.com/watch?v=x1ndXuw7S0s">https://www.youtube.com/watch?v=x1ndXuw7S0s</a>
</li>

<li>Fear and Awaiting in Async: A Savage Journey to the Heart of the Coroutine Dream<br />
<a href="https://www.youtube.com/watch?v=E-1Y4kSsAFc">https://www.youtube.com/watch?v=E-1Y4kSsAFc</a>
</li>

<li>Keynote David Beazley - Topics of Interest (Python Asyncio)<br />
<a href="https://www.youtube.com/watch?v=ZzfHjytDceU">https://www.youtube.com/watch?v=ZzfHjytDceU</a>
</li>

<li>David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015<br />
<a href="https://www.youtube.com/watch?v=MCs5OvhV9S4">https://www.youtube.com/watch?v=MCs5OvhV9S4</a>
</li>

<li>Python Async basics video (100 million HTTP requests)<br />
<a href="https://www.youtube.com/watch?v=Mj-Pyg4gsPs">https://www.youtube.com/watch?v=Mj-Pyg4gsPs</a>
</li>

<li>Nathaniel J. Smith - Trio: Async concurrency for mere mortals &ndash; PyCon 2018<br />
<a href="https://www.youtube.com/watch?v=oLkfnc_UMcE">https://www.youtube.com/watch?v=oLkfnc_UMcE</a>
</li>

<li>Timeouts and cancellation for humans<br />
<a href="https://vorpus.org/blog/timeouts-and-cancellation-for-humans/">https://vorpus.org/blog/timeouts-and-cancellation-for-humans/</a>
</li>

<li>What is the core difference between asyncio and trio?<br />
<a href="https://stackoverflow.com/questions/49482969/what-is-the-core-difference-between-asyncio-and-trio">https://stackoverflow.com/questions/49482969/what-is-the-core-difference-between-asyncio-and-trio</a>
</li>

<li>Some thoughts on asynchronous API design in a post-async/await world<br />
<a href="https://vorpus.org/blog/some-thoughts-on-asynchronous-api-design-in-a-post-asyncawait-world/#the-curious-effectiveness-of-curio">https://vorpus.org/blog/some-thoughts-on-asynchronous-api-design-in-a-post-asyncawait-world/#the-curious-effectiveness-of-curio</a>
</li>

<li>Companion post for my PyCon 2018 talk on async concurrency using Trio<br />
<a href="https://vorpus.org/blog/companion-post-for-my-pycon-2018-talk-on-async-concurrency-using-trio/">https://vorpus.org/blog/companion-post-for-my-pycon-2018-talk-on-async-concurrency-using-trio/</a>
</li>

<li>Control-C handling in Python and Trio<br />
<a href="https://vorpus.org/blog/control-c-handling-in-python-and-trio/">https://vorpus.org/blog/control-c-handling-in-python-and-trio/</a>
</li>

<li>Context Managers and Python's with Statement<br />
<a href="https://realpython.com/python-with-statement/">https://realpython.com/python-with-statement/</a>
</li>

<li>Notes on structured concurrency, or: Go statement considered harmful<br />
<a href="https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/">https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/</a>
</li>

<li>Structured concurrency explained - Part 1: Introduction<br />
<a href="https://www.thedevtavern.com/blog/posts/structured-concurrency-explained/">https://www.thedevtavern.com/blog/posts/structured-concurrency-explained/</a>
</li>

<li>Structured concurrency<br />
<a href="https://en.wikipedia.org/wiki/Structured_concurrency">https://en.wikipedia.org/wiki/Structured_concurrency</a>
</li>

<li>Structured Concurrency<br />
<a href="https://250bpm.com/blog:71/">https://250bpm.com/blog:71/</a>
</li>

<li>Python and Trio, where producers are consumers, how to exit gracefully when the job is done?<br />
<a href="https://stackoverflow.com/questions/65304775/python-and-trio-where-producers-are-consumers-how-to-exit-gracefully-when-the">https://stackoverflow.com/questions/65304775/python-and-trio-where-producers-are-consumers-how-to-exit-gracefully-when-the</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

