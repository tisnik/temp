<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Jython aneb poněkud opomíjený programovací jazyk pro virtuální stroj Javy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Jython aneb poněkud opomíjený programovací jazyk pro virtuální stroj Javy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Jython aneb poněkud opomíjený programovací jazyk pro virtuální stroj Javy</a></p>
<p><a href="#k02">*** 2. Programovací jazyky pro JVM aneb nejde jen o Javu</a></p>
<p><a href="#k03">*** 3. Scala</a></p>
<p><a href="#k04">*** 4. Clojure</a></p>
<p><a href="#k05">*** 5. Groovy</a></p>
<p><a href="#k06">*** 6. JRuby, Jython, Rhino a Nashhorn</a></p>
<p><a href="#k07">*** 7. Kotlin</a></p>
<p><a href="#k08">*** 8. Další programovací jazyky portované na JVM</a></p>
<p><a href="#k09">*** 9. Instalace Jythonu a první spuštění interpretru</a></p>
<p><a href="#k10">*** 10. Interní nápověda</a></p>
<p><a href="#k11">*** 11. Základní moduly dodávané společně s&nbsp;Jythonem</a></p>
<p><a href="#k12">*** 12. Interoperabilita mezi Pythonem a Javou</a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">*** 20. </a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Jython aneb poněkud opomíjený programovací jazyk pro virtuální stroj Javy</h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. Programovací jazyky pro JVM aneb nejde jen o Javu</h2>

<p>Virtuální stroj Javy (JVM) ani jeho instrukční soubor vlastně nikde striktně nepředpokládají, že JVM bude spouštět pouze bajtkód získaný překladem javovských programů. Ve specifikaci JVM je dokonce na několika místech explicitně zmíněn předpoklad, že nad virtuálním strojem Javy budou provozovány i další programovací jazyky umožňující přímý či nepřímý překlad do bajtkódu. Kromě toho je samozřejmě možné přímo v&nbsp;Javě vytvořit interpret prakticky libovolného (interpretovaného) programovacího jazyka, takže vlastně nebude velkým překvapením, když zjistíme, že dnes těchto &bdquo;JVM jazyků&ldquo; již existuje relativně mnoho. V&nbsp;následující tabulce jsou vypsány ty nejznámější a pravděpodobně nejpoužívanější jazyky, a to pro úplnost včetně samotné Javy:</p>

<table>
<tr><th>Jazyk pro JVM</th><th>Stručný popis</th><th>Odkaz</th></tr>
<tr><td>Java   </td><td>primární jazyk pro JVM, bajtkód odpovídá právě Javě</td><td><a href=""></a></td></tr>
<tr><td>Clojure</td><td>moderní dialekt programovacího jazyka Lisp</td><td><a href=""></a></td></tr>
<tr><td>Groovy </td><td></td><td><a href=""></a></td></tr>
<tr><td>Rhino  </td><td>jedna z&nbsp;implementací JavaScriptu</td><td><a href=""></a></td></tr>
<tr><td>Nashorn</td><td>alternativní implementace JavaScriptu</td><td><a href=""></a></td></tr>
<tr><td>JRuby  </td><td>portace jazyka Ruby na JVM</td><td><a href=""></a></td></tr>
<tr><td>Jython </td><td>portace jazyka Python na JVM</td><td><a href=""></a></td></tr>
<tr><td>Kotlin </td><td></td><td><a href=""></a></td></tr>
<tr><td>Scala  </td><td></td><td><a href=""></a></td></tr>
</table>



<p><a name="k03"></a></p>
<h2 id="k03">3. Scala</h2>

<p>Pravděpodobně nejznámějším příkladem programovacího jazyka provozovaného nad JVM je <i>Scala</i>, která nabízí prakticky bezproblémovou spolupráci mezi částmi kódu psanými ve Scale a zbytkem aplikace psaným v&nbsp;Javě (popř.&nbsp;jsou některé projekty psané pouze ve Scale, ovšem provozovány jsou například na ryze javovských serverech &ndash; Tomcat, Jetty atd.). Díky tomu, že zdrojové kódy psané ve Scale jsou přímo překládány do bajtkódu, získali tvůrci tohoto programovacího jazyka prakticky zadarmo veškeré vymoženosti, které virtuální stroj Javy (či přesněji řečeno celé JRE) poskytuje &ndash; od poměrně pečlivé kontroly bajtkódu při jeho načítání do virtuálního stroje přes použití správců paměti a JIT překladačů (<i>Just in Time Compiler</i>) až po možnost využití rozsáhlých standardních knihoven J2SE a samozřejmě taktéž mnoha dalších knihoven a frameworků, které jsou pro JVM dostupné. Ovšem Scala samozřejmě není jediným programovacím jazykem, který díky překladu do bajtkódu umožňuje využít prakticky veškerého potenciálu JVM/JRE.</p>

*** image ***
<p><i>Obrázek 1: Logo programovacího jazyka Scala.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Clojure</h2>

<p>Z&nbsp;dalších překladačů programovacích jazyků, které pro virtuální stroj Javy vznikly, je podle mého názoru nejzajímavějším jazykem a současně i jazykem s&nbsp;velkým potenciálem pro budoucnost programovací jazyk s&nbsp;názvem <i>Clojure</i>, jehož autorem a dodnes nejaktivnějším vývojářem je Rich Hickey. Samotný název tohoto jazyka vznikl vložením písmene &bdquo;j&ldquo; (<i>Java/JVM</i>) do slova <i>closure</i> (toto slovo se používá ve smyslu &bdquo;lexikální uzávěr&ldquo; &ndash; důležitá abstrakce používaná nejenom ve funkcionálních programovacích jazycích). Velká část předností a pro mnohé vývojáře taktéž záporů programovacího jazyka Clojure vychází z&nbsp;toho, že se jedná o programovací jazyk, jehož syntaxe a sémantika do značné míry vychází z&nbsp;LISPu a Scheme, tedy jazyků známých především tím, že se v&nbsp;programech v&nbsp;nich psaných používá nadměrné množství kulatých závorek. Podrobnější informace o Clojure byly uvedeny v&nbsp;samostatném seriálu, který již vyšel na serveru <a href="http://www.root.cz">www.root.cz</a>.</p>

*** image ***
<p><i>Obrázek 2: Logo programovacího jazyka Clojure.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Groovy</h2>

*** image ***
<p><i>Obrázek 3: Logo programovacího jazyka Groovy.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. JRuby, Jython, Rhino a Nashhorn</h2>

<p></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Kotlin</h2>

<p></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Další programovací jazyky portované na JVM</h2>

<p>Na virtuální stroj Javy bylo portováno i mnoho dalších programovacích jazyků, ať již se jednalo o překladače či o interpretry. V&nbsp;následující tabulce jsou některé z&nbsp;těchto jazyků vypsány. V&nbsp;prvním sloupci je zobrazen název původního jazyka popř.&nbsp;rodiny jazyků, ve sloupci druhém pak jméno jeho konkrétní implementace pro JVM. Povšimněte si, že některé jazyky byly portovány několikrát (to se ostatně týkalo již JavaScriptu zmíněného <a href="#k03">v&nbsp;předchozí kapitole</a>):</p>

<table>
<tr><th>Jazyk</th><th>Implementace pro JVM</th></tr>
<tr><td>Ada</td><td>JGNAT</td></tr>
<tr><td>Arden Syntax</td><td>Arden2ByteCode</td></tr>
<tr><td>COBOL</td><td>Micro Focus Visual COBOL</td></tr>
<tr><td>ColdFusion Markup Language (CFML)</td><td>Adobe ColdFusion</td></tr>
<tr><td>ColdFusion Markup Language (CFML)</td><td>Railo</td></tr>
<tr><td>ColdFusion Markup Language (CFML)</td><td>Lucee</td></tr>
<tr><td>ColdFusion Markup Language (CFML)</td><td>Open BlueDragon</td></tr>
<tr><td>Common Lisp</td><td>Armed Bear Common Lisp</td></tr>
<tr><td>Cypher</td><td>Neo4j</td></tr>
<tr><td>Mercury</td><td>Mercury (Java grade)</td></tr>
<tr><td>Pascal</td><td>MIDletPascal</td></tr>
<tr><td>Pascal</td><td>Oxygene</td></tr>
<tr><td>Perl 6</td><td>Rakudo Perl 6</td></tr>
<tr><td>PHP</td><td>Quercus</td></tr>
<tr><td>Prolog</td><td>JIProlog</td></tr>
<tr><td>Prolog</td><td>TuProlog</td></tr>
<tr><td>R</td><td>Renjin</td></tr>
<tr><td>Rexx</td><td>NetRexx</td></tr>
<tr><td>Ruby</td><td>JRuby</td></tr>
<tr><td>Ruby</td><td>Mirah</td></tr>
<tr><td>Scheme</td><td>Bigloo</td></tr>
<tr><td>Scheme</td><td>Kawa</td></tr>
<tr><td>Scheme</td><td>SISC</td></tr>
<tr><td>Scheme</td><td>JScheme</td></tr>
<tr><td>Tcl</td><td>Jacl</td></tr>
<tr><td>Visual Basic</td><td>Jabaco</td></tr>
</table>



<p><a name="k09"></a></p>
<h2 id="k09">9. Instalace Jythonu a první spuštění interpretru</h2>

<p></p>

<pre>
$ <strong>java -jar jython-standalone-2.7.0.jar</strong>
</pre>

<p>Po několika sekundách by se měly vypsat dva řádky s&nbsp;informacemi o verzi interpretru Jythonu a o použitém virtuálním stroji Javy. Na třetím řádku se vypíše nápověda k&nbsp;některým příkazů a na řádku následujícím pak výzva (<i>prompt</i>) interpretru:</p>

<pre>
Jython 2.7.0 (default:9987c746f838, Apr 29 2015, 02:25:11) 
[OpenJDK 64-Bit Server VM (Oracle Corporation)] on java1.7.0_79
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</pre>

<p>Povšimněte si, že způsob výpisu je prakticky shodný s&nbsp;nativním CPythonem, který po spuštění taktéž vypíše tři informační řádky následované výzvou:</p>

<pre>
Python 3.4.3 (default, Nov 28 2017, 16:41:13) 
[GCC 4.8.4] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</pre>

<p>Vraťme se však ke spuštěnému interpretru Jythonu. Ten se chová prakticky stejně jako klasický interpret Pythonu (CPythonu), a to včetně historie příkazového řádku, základních klávesových zkratek atd. Zkusme si například přímo v&nbsp;interpretru napsat jednoduchou programovou smyčku a otestovat tak, jak se bude měnit výzva (<i>prompt</i>) ve chvíli, kdy se změní kontext (další řádky nejsou přímo interpretovány, ale čeká se na ukončení bloku či bloků prázdným řádkem):</p>

<pre>
&gt;&gt;&gt; for i in range(10):
...     print i
... 
0
1
2
3
4
5
6
7
8
9
&gt;&gt;&gt;
</pre>

<p>Podobným způsobem se kontext přepíná i ve chvíli, kdy deklarujeme funkci (popř.&nbsp;třídu):</p>

<pre>
&gt;&gt;&gt; def max(x, y):
...     if x &gt; 0:
...         return x
...     else:
...         return y
... 
&gt;&gt;&gt; max(1,20)
1
</pre>

<p>Interpret Jythonu můžeme (na Linuxu) kdykoli opustit stiskem klávesové zkratky <strong>Ctrl+D</strong>.</p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Interní nápověda</h2>

<p></p>

<pre>
&gt;&gt;&gt; help()
</pre>

<p></p>

<pre>
Welcome to Python 2.7!  This is the online help utility.

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at http://docs.python.org/2.7/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, or topics, type "modules",
"keywords", or "topics".  Each module also comes with a one-line summary
of what it does; to list the modules whose summaries contain a given word
such as "spam", type "modules spam".
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Základní moduly dodávané společně s&nbsp;Jythonem</h2>

<pre>
BaseHTTPServer      cmath           javapath    sched
CGIHTTPServer       cmd             javashell   select
ConfigParser        code            jffi        sets
Cookie              codecs          json        sgmllib
DocXMLRPCServer     codeop          jythonlib   sha
HTMLParser          collections     keyword     shelve
MimeWriter          colorsys        linecache   shlex
Queue               command         locale      shutil
SimpleHTTPServer    commands        logging     signal
SimpleXMLRPCServer  compileall      macpath     site
SocketServer        compiler        macurl2path smtpd
StringIO            contextlib      mailbox     smtplib
UserDict            cookielib       mailcap     sndhdr
UserList            copy            markupbase  socket
UserString          copy_reg        marshal     sre
_LWPCookieJar       crypt           math        sre_compile
_MozillaCookieJar   csv             md5         sre_constants
__builtin__         ctypes          mhlib       sre_parse
__future__          datetime        mime        ssl
_abcoll             dbexts          mimetools   stat
_ast                decimal         mimetypes   string
_bytecodetools      difflib         mimify      struct
_codecs             dircache        modjy       subprocess
_collections        dis             multifile   symbol
_csv                distutils       mutex       synchronize
_fsum               doctest         netrc       sys
_functools          dom             new         sysconfig
_google_ipaddr_r234 dumbdbm         nntplib     tabnanny
_hashlib            dummy_thread    ntpath      tarfile
_imp                dummy_threading nturl2path  telnetlib
_io                 email           numbers     tempfile
_json               encodings       opcode      test
_jyio               ensurepip       operator    tests
_jythonlib          errno           optparse    textwrap
_marshal            etree           os          this
_py_compile         exceptions      parsers     thread
_pyio               filecmp         pawt        threading
_random             fileinput       pdb         time
_rawffi             fnmatch         pickle      timeit
_socket             formatter       pickletools token
_sre                fpformat        pipes       tokenize
_sslcerts           fractions       pkgutil     trace
_strptime           ftplib          platform    traceback
_systemrestart      functools       plistlib    tty
_threading          future_builtins popen2      types
_threading_local    gc              poplib      ucnhash
_weakref            genericpath     posix       unicodedata
_weakrefset         getopt          posixfile   unittest
abc                 getpass         posixpath   urllib
aifc                gettext         pprint      urllib2
anydbm              glob            profile     urlparse
argparse            grp             pstats      user
array               gzip            pty         uu
ast                 hashlib         pwd         uuid
asynchat            heapq           py_compile  warnings
asyncore            hmac            pycimport   weakref
atexit              htmlentitydefs  pyclbr      webbrowser
base64              htmllib         pydoc       whichdb
bdb                 httplib         pyexpat     wsgiref
binascii            ihooks          quopri      xdrlib
binhex              imaplib         random      xml
bisect              imghdr          re          xmllib
bz2                 imp             readline    xmlrpclib
cPickle             importlib       repr        zipfile
cStringIO           inspect         rfc822      zipimport
calendar            io              rlcompleter zlib
cgi                 isql            robotparser
cgitb               itertools       runpy
chunk               jarray          sax
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Interoperabilita mezi Pythonem a Javou</h2>

<pre>
&gt;&gt;&gt; import java.util.Date
&gt;&gt;&gt; d = java.util.Date()
&gt;&gt;&gt; d
Sat Mar 31 18:24:14 CEST 2018
</pre>

<pre>
&gt;&gt;&gt; from java.util import Date
&gt;&gt;&gt; d = Date()
&gt;&gt;&gt; d
Sat Mar 31 18:24:56 CEST 2018
</pre>

<pre>
&gt;&gt;&gt; d.time
1522514182141L

&gt;&gt;&gt; d.getYear()
118
</pre>


<pre>
>>> from java.lang import String
>>> s = String("42")

>>> type(s)
<type 'java.lang.String'>
>>> s.toUpperCase()
u'42'
>>> type(s.toUpperCase())
<type 'unicode'>
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
&gt;&gt;&gt; import java.math.BigInteger
TypeError: java.math.BigInteger(): 1st arg can't be coerced to String, byte[]
&gt;&gt;&gt; b = java.math.BigInteger("2")

&gt;&gt;&gt; type(b)
<type 'java.math.BigInteger'>
&gt;&gt;&gt; type(b.pow(10000))
<type 'long'>
&gt;&gt;&gt; type(b.multiply(b2))
<type 'long'>
</pre>

<pre>
&gt;&gt;&gt; b.
b.ONE               b.TEN               b.ZERO              b.__class__(             b.__copy__(
b.__deepcopy__(     b.__delattr__(      b.__doc__           b.__ensure_finalizer__(  b.__eq__(
b.__format__(       b.__ge__(           b.__getattribute__( b.__gt__(                b.__hash__(
b.__init__(         b.__le__(           b.__lt__(           b.__ne__(                b.__new__(
b.__reduce__(       b.__reduce_ex__(    b.__repr__(         b.__setattr__(           b.__str__(
b.__subclasshook__( b.__unicode__(      b.abs(              b.add(                   b.and(
b.andNot(           b.bitCount(         b.bitLength(        b.byteValue(             b.class(
b.clearBit(         b.compareTo(        b.divide(           b.divideAndRemainder(    b.doubleValue(
b.equals(           b.flipBit(          b.floatValue(       b.gcd(                   b.getClass(
b.getLowestSetBit(  b.hashCode(         b.intValue(         b.isProbablePrime(       b.longValue(
b.lowestSetBit      b.max(              b.min(              b.mod(                   b.modInverse(
b.modPow(           b.multiply(         b.negate(           b.nextProbablePrime(     b.not(
b.notify(           b.notifyAll(        b.or(               b.pow(                   b.probablePrime(
b.remainder(        b.setBit(           b.shiftLeft(        b.shiftRight(            b.shortValue(
b.signum(           b.subtract(         b.testBit(          b.toByteArray(           b.toString(
b.valueOf(          b.wait(             b.xor(
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. </h2>

<ol>

<li>Stránka projektu Jython<br />
<a href="http://www.jython.org/">http://www.jython.org/</a>
</li>

<li>Jython (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Jython">https://en.wikipedia.org/wiki/Jython</a>
</li>

<li>Scripting for the Java Platform (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Scripting_for_the_Java_Platform">https://en.wikipedia.org/wiki/Scripting_for_the_Java_Platform</a>
</li>

<li>JSR 223: Scripting for the Java<sup>TM</sup> Platform<br />
<a href="https://jcp.org/en/jsr/detail?id=223">https://jcp.org/en/jsr/detail?id=223</a>
</li>

<li>List of JVM languages<br />
<a href="https://en.wikipedia.org/wiki/List_of_JVM_languages">https://en.wikipedia.org/wiki/List_of_JVM_languages</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

