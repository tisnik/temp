
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Programovatelné IO na mikrořadičích RP2040 - komunikace s PIO a ovládání PIO</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Programovatelné IO na mikrořadičích RP2040 - komunikace s PIO a ovládání PIO</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Programovatelné IO na mikrořadičích RP2040 &ndash; komunikace s&nbsp;PIO a ovládání PIO</a></p>
<p><a href="#k02">2. Krátké zopakování z&nbsp;minula: ovládání LED připojené na GPIO přes PIO</a></p>
<p><a href="#k03">3. Využití druhého registru <strong>Y</strong> pro řízení střídy</a></p>
<p><a href="#k04">4. Demonstrační příklad: využití registru <strong>Y</strong> pro řízení střídy při blikání LED</a></p>
<p><a href="#k05">5. Explicitní zápis nekonečné programové smyčky s&nbsp;řízením GPIO</a></p>
<p><a href="#k06">6. Demonstrační příklad: explicitní zápis nekonečné programové smyčky</a></p>
<p><a href="#k07">7. Využití direktiv <strong>wrap</strong> a <strong>wrap_target</strong></a></p>
<p><a href="#k08">8. Demonstrační příklad: direktivy <strong>wrap</strong> a <strong>wrap_target</strong> namísto explicitně zapsané smyčky</a></p>
<p><a href="#k09">9. Nastavení střídy z&nbsp;hlavního programu přes FIFO</a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">18. Příloha: varianty všech dnešních příkladů pro LED připojenou na GPIO 25</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Programovatelné IO na mikrořadičích RP2040 &ndash; komunikace s&nbsp;PIO a ovládání PIO</h2>

<p>V&nbsp;úvodních dvou článcích o programovatelném IO (PIO) implementovaném na
mikrořadičích RP2040 [<a
href="https://www.root.cz/clanky/programovatelne-io-na-mikroradicich-rp2040-v-raspberry-pi-pico/">1</a>]
a [<a
href="https://www.root.cz/clanky/programovatelne-io-na-mikroradicich-rp2040-prakticke-pouziti/">2</a>]
jsme si popsali jak celou architekturu PIO, tak i způsob přímého ovládání
vstupně-výstupních pinů (GPIO) s&nbsp;využitím programů, které mohou být
vykonávány jednotlivými stavovými stroji, které PIO tvoří. V&nbsp;těchto
programech jsme využili některé instrukce z&nbsp;instrukčního souboru PIO.
Konkrétně se jednalo o instrukce <strong>SET</strong> (nastavení pinů či
nastavení vybraného interního registru) a <strong>JMP</strong> (nepodmíněné i
podmíněné skoky). Známe i pseudoinstrukci <strong>NOP</strong> a navíc i způsob
definice počtu cyklů, které mají být vykonány před dokončením instrukce. Naše
PIO programy prozatím pracovaly velmi jednoduše: stavový stroj neustále
opakoval tu samou sekvenci instrukcí s&nbsp;předem nastavenou frekvencí.</p>

<p>Ovšem v&nbsp;praxi je nutné s&nbsp;PIO nějakým způsobem komunikovat a
ovládat ho z&nbsp;hlavního programu, který běží přímo na procesorových jádrech
čipu RP2040 (ARM nebo RISC-V). Například budeme potřebovat realizovat
softwarovou verzi sběrnice I<sup>2</sup>C, asynchronní sériový port UART nebo
pulsně-šířkovou modulaci (PWM). V&nbsp;takových případech je nutné do PIO
(resp.&nbsp;přesněji řečeno do jednotlivých stavových strojů) předávat data
posílaná na sběrnici/port, číst přijatá data nebo měnit bitový vzorek
v&nbsp;případě PWM. Teoreticky již víme, jak PIO ovládat &ndash; využít lze
FIFO (fronty) a k&nbsp;nim připojené posuvné registry ISR (<i>input shift
register</i>) a OSR (<i>output shift register</i>). Existuje však ještě jeden
způsob ovládání &ndash; &bdquo;vnucení&ldquo; nové instrukce stavovému stroji.
V&nbsp;dnešním článku si ukážeme použití FIFO a registrů ISR a OSR. Může se
zdát, že se jedná o složitou technologii, jak však uvidíme v&nbsp;praxi, je
využití FIFO poměrně elegantní a jednoduché.</p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Krátké zopakování z&nbsp;minula: ovládání LED připojené na GPIO přes PIO</h2>

<p>V&nbsp;této kapitole si připomeneme, jakým způsobem jsme vlastně přes PIO
(resp.&nbsp;přes stavový stroj) ovládali LED připojenou na zvolený port.
Realizovali jsme blikání této LED. Ve skutečnosti je to poměrně snadné &ndash;
nastavíme příslušný GPIO na jedničku a po uplynutí předem známého počtu cyklů
tento GPIO vynulujeme. Opět počkáme nějaký počet cyklů a můžeme celý program
zopakovat. Nejjednodušší způsob (i když zdaleka nikoli nejelegantnější) je
založen na instrukcích <strong>SET</strong> a na pseudoinstrukci
<strong>NOP</strong> (což je vhodně zakódované &bdquo;čekání&ldquo;):</p>

<pre>
import rp2
from machine import Pin
&nbsp;
&nbsp;
<u>@rp2.asm_pio(set_init=rp2.PIO.OUT_LOW)</u>
def <strong>blink_10hz</strong>():
    set(pins, 1) [19]
    nop()        [19]
    nop()        [19]
    nop()        [19]
    nop()        [19]
    set(pins, 0) [19]
    nop()        [19]
    nop()        [19]
    nop()        [19]
    nop()        [19]
&nbsp;
&nbsp;
sm = rp2.StateMachine(0, blink_1hz, freq=2000, set_base=Pin(8))
sm.active(1)
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;hranatých závorkách jsou zapsány
přidané čekací cykly. To znamená, že každá instrukce trvá dvacet cyklů a jedno
opakování programu tedy bude trvat 200 cyklů. Frekvence blikání bude rovna
2000/200=10Hz.</div></p>

<p>Sofistikovanější řešení spočívá ve využití programové smyčky realizované
instrukcí <strong>JMP</strong>. Tato instrukce totiž (kromě dalších variant)
dokáže snížit hodnotu interního registru <strong>X</strong> o jedničku a
provést skok v&nbsp;případě, že se ještě nedosáhlo nuly. V&nbsp;programu je
realizována dvojice smyček, které obsahují pouze &bdquo;zpožděnou&ldquo;
operaci <strong>NOP</strong></p>

<pre>
import rp2
from machine import Pin
&nbsp;
&nbsp;
<u>@rp2.asm_pio(set_init=rp2.PIO.OUT_LOW)</u>
def <strong>blink_1hz</strong>():
    set(pins, 1)
    set(x, 31)                  [6]
    label("delay_high")
    nop()                       [29]
    jmp(x_dec, "delay_high")
    set(pins, 0)
    set(x, 31)                  [6]
    label("delay_low")
    nop()                       [29]
    jmp(x_dec, "delay_low")
&nbsp;
&nbsp;
sm = rp2.StateMachine(0, blink_1hz, freq=2000, set_base=Pin(8))
sm.active(1)
</pre>

<p>V&nbsp;tomto případě může být mnohem čitelnější si uvést program tak, jak by
se napsal přímo v&nbsp;assembleru a nikoli nepřímo v&nbsp;MicroPythonu:</p>

<pre>
             set pins, 1
             set X, 31 [6]
<strong>delay_high</strong>:  nop       [29]
             jmp X--, delay_high
             set pins, 0
             set X 31 [6]
<strong>delay_low</strong>:   nop      [29]
             jmp X--, delay_low
</pre>

<p>Resp.&nbsp;pro úplnost musíme dodat i direktivy <strong>.wrap</strong> a
<strong>.wrap_target</strong>, které nám umožní realizovat nekonečnu smyčku
(MicroPython tyto direktivy vkládá automaticky):</p>

<pre>
<strong>.wrap_target</strong>
             set pins, 1
             set X, 31 [6]
<strong>delay_high</strong>:  nop       [29]
             jmp X--, delay_high
             set pins, 0
             set X 31 [6]
<strong>delay_low</strong>:   nop      [29]
             jmp X--, delay_low
<strong>.wrap</strong>
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Využití druhého registru <strong>Y</strong> pro řízení střídy</h2>

<p>Výše uvedená dvojice programů sice skutečně dokázala blikat LED
s&nbsp;využitím PIO, ovšem použité řešení je založeno na konstantách, které
jsou do zdrojového kódu &bdquo;zadrátovány&ldquo;. To například znamená, že
není možné (jednoduše) měnit střídu, tedy poměr časů, v&nbsp;nichž je LED
rozsvícena či naopak zhasnuta. Jedno z&nbsp;možných řešení spočívá
v&nbsp;náhradě dvou zpožďovacích smyček za smyčku jedinou. Uvnitř této smyčky
budeme kontrolovat hodnotu počitadla (tedy registru <strong>X</strong>) a pokud
překročí nastavenou mez, provede se zhasnutí LED. A změnou této meze, která
bude uložena ve druhém pomocném registru <strong>Y</strong>, bude možné
ovlivňovat střídu v&nbsp;poměrech od 0:32 až po 32:32:</p>

<pre>
<strong>.wrap_target</strong>
             set X, 31         <i># počitadlo smyčky</i>
             set Y, 16         <i># hraniční hodnota pro přepnutí pinu s připojenou LED</i>
             set pins, 1       <i># nastavit pin (rozsvítit LED)</i>
<strong>blink_loop</strong>:  jmp X!=Y, skip    <i># když X!=Y přeskočit další instrukci</i>
             set pins, 0       <i># vynulovat pin (zhasnout LED)</i>
<strong>skip</strong>:        nop    [29]       <i># zpožďovací mechanismus</i>
             jmp X--, blink_loop
<strong>.wrap</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, jak relativně
sofistikované algoritmy můžeme tvořit pouze s&nbsp;využitím instrukcí
<strong>SET</strong> a zejména pak instrukce <strong>JMP</strong>.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Demonstrační příklad: využití registru <strong>Y</strong> pro řízení střídy při blikání LED</h2>

<p>Program pro PIO (stavový stroj), který jsme viděli <a
href="#k03">v&nbsp;předchozí kapitole</a>, je možné snadno přepsat o
MicroPythonu, i když je nutné poznamenat, že výsledný kód již není tak čitelný,
jako originál (a to zejména kvůli nutnosti definovat návěští formou volání
funkce):</p>

<pre>
import rp2
from machine import Pin
&nbsp;
&nbsp;
<u>@rp2.asm_pio(set_init=rp2.PIO.OUT_LOW)</u>
def <strong>blink1</strong>():
    set(x, 31)                 <i># počitadlo smyčky</i>
    set(y, 16)                 <i># hraniční hodnota pro přepnutí pinu</i>
    set(pins, 1)               <i># nastavit pin</i>
    label("blink_loop")
    jmp(x_not_y, "skip")       <i># když x!=y přeskočit další instrukci</i>
    set(pins, 0)               <i># vynulovat pin</i>
    label("skip")
    nop() [29]                 <i># zpožďovací mechanismus</i>
    jmp(x_dec, "blink_loop")   <i># a opakujeme x-krát</i>
&nbsp;
&nbsp;
sm = rp2.StateMachine(0, blink1, freq=2000, set_base=Pin(8))
sm.active(1)                   <i># spustit stavový stroj</i>
</pre>

<p>Tento program do RPi Pico můžeme přenést přes Minicom, s&nbsp;využitím IDE
Thonny atd. Následuje ukázka jeho přenosu a spuštění přes Minicom:</p>

*** image ***
<p><i>Obrázek 1: Přenos a spuštění programu, který bliká s&nbsp;LED, přes
nástroj Minicom.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Explicitní zápis nekonečné programové smyčky s&nbsp;řízením GPIO</h2>

<p>Prozatím jsme celý program pro PIO měli strukturovaný takovým způsobem, že
se díky použití direktiv <strong>.wrap</strong> a <strong>.wrap_target</strong>
celá série instrukcí neustále opakovala. Ovšem ve chvíli, kdy budeme potřebovat
měnit střídu resp.&nbsp;přesněji řečeno ji konfigurovat z&nbsp;hlavního
programu, je situace nepatrně složitější. Budeme totiž chtít, aby se instrukce
<strong>set Y, střída</strong> neopakovala, ale zavolal se jen jednou. Tato
instrukce tedy musí být uvedena mimo opakující se smyčku. Jedno z&nbsp;možných
řešení spočívá v&nbsp;tom, že direktivy <strong>.wrap</strong> a
<strong>.wrap_target</strong> vůbec nepoužijeme a namísto nich realizujeme
vlastní nekonečnou programovou smyčku s&nbsp;využitím instrukce
<strong>JMP</strong> bez podmínky. Celý program pro PIO se tak stane nepatrně
složitějším, ale stále se jedná o poměrně dobře čitelný a pochopitelný kód:</p>

<pre>
             set Y, 16         <i># hraniční hodnota pro přepnutí pinu s připojenou LED</i>
<strong>endless_loop</strong>:                  <i># začátek nekonečné smyčky</i>
             set X, 31         <i># počitadlo smyčky</i>
             set pins, 1       <i># nastavit pin (rozsvítit LED)</i>
<strong>blink_loop</strong>:  jmp X!=Y, skip    <i># když X!=Y přeskočit další instrukci</i>
             set pins, 0       <i># vynulovat pin (zhasnout LED)</i>
<strong>skip</strong>:        nop    [29]       <i># zpožďovací mechanismus</i>
             jmp X--, blink_loop
             jmp endless_loop  <i># opakovat vnější nekonečnou smyčku</i>
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Demonstrační příklad: explicitní zápis nekonečné programové smyčky</h2>

<p>Opět si můžeme program napsaný přímo v&nbsp;assembleru PIO transformovat do
MicroPythonu. Prozatím budeme registr <strong>Y</strong> nastavovat funkcí
<strong>set(y, 16)</strong>, která se přeloží na instrukci <strong>SET Y,
16</strong>, ovšem později provedeme takové úpravy, které zajistí nastavení
registru <strong>Y</strong> přes FIFO a registr OSR (<i>Output Shift
Register</i>):</p>

<pre>
import rp2
from machine import Pin
&nbsp;
&nbsp;
<i>@rp2.asm_pio(set_init=rp2.PIO.OUT_LOW)</i>
def <strong>blink2</strong>():
    set(y, 16)                 <i># hraniční hodnota pro přepnutí pinu</i>
    label("endless_loop")      <i># cíl skoku</i>
    set(x, 31)                 <i># počitadlo smyčky</i>
    set(pins, 1)               <i># nastavit pin</i>
    label("blink_loop")
    jmp(x_not_y, "skip")       <i># když x!=y přeskočit další instrukci</i>
    set(pins, 0)               <i># vynulovat pin</i>
    label("skip")
    nop() [29]                 <i># zpožďovací mechanismus</i>
    jmp(x_dec, "blink_loop")   <i># a opakujeme x-krát</i>
    jmp("endless_loop")
&nbsp;
&nbsp;
sm = rp2.StateMachine(0, blink2, freq=2000, set_base=Pin(8))
sm.active(1)                   <i># spustit stavový stroj</i>
</pre>

<p><div class="rs-tip-major">Poznámka: interně se sice stále budou do kódu
vkládat direktivy <strong>.wrap</strong> a <strong>.wrap_target</strong>, ovšem
vzhledem k&nbsp;tomu, že máme explicitně zapsánu nekonečnou smyčku, se tyto
direktivy vlastně nikdy nepoužijí.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Využití direktiv <strong>wrap</strong> a <strong>wrap_target</strong></h2>

<p>Ve skutečnosti je ve světě RP2040 idiomatičtější namísto explicitně zapsané
programové smyčky realizované nepodmíněným skokem <strong>JMP</strong> stále
používat direktivy <strong>.wrap</strong> a <strong>.wrap_target</strong>,
ovšem s&nbsp;tím, že <strong>.wrap_target</strong> nebude umístěna na začátku
programu, ale na to místo, od něhož se má celá sekvence instrukcí PIO znovu
opakovat. Jedná se tak vlastně o poněkud odlišně deklarovanou nekonečnou
programovou smyčku (lišit se bude i její časování, ale jen nepatrně, což nám
prozatím nebude vadit). Nová struktura programu pro PIO tedy může vypadat
následovně:</p>

<pre>
             set Y, 16         <i># hraniční hodnota pro přepnutí pinu s připojenou LED</i>
<strong>.wrap_target</strong>
             set X, 31         <i># počitadlo smyčky</i>
             set pins, 1       <i># nastavit pin (rozsvítit LED)</i>
<strong>blink_loop</strong>:  jmp X!=Y, skip    <i># když X!=Y přeskočit další instrukci</i>
             set pins, 0       <i># vynulovat pin (zhasnout LED)</i>
<strong>skip</strong>:        nop    [29]       <i># zpožďovací mechanismus</i>
             jmp X--, blink_loop
<strong>.wrap</strong>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Demonstrační příklad: direktivy <strong>wrap</strong> a <strong>wrap_target</strong> namísto explicitně zapsané smyčky</h2>

<p>Víme již, že MicroPython automaticky vkládá direktivu
<strong>.wrap_target</strong> na začátek celého PIO programu a naopak direktivu
<strong>.wrap</strong> na jeho konec. Toto chování je většinou žádoucí, ovšem
v&nbsp;případě potřeby můžeme direktivy specifikovat ručně, a to přesně na těch
místech v&nbsp;programu, do nichž mají být umístěny. Pro tyto účely se
používají funkce <strong>wrap_target()</strong> a <strong>wrap()</strong>
zapisované do Pythonovské funkce s&nbsp;dekorátorem
<strong>rp2.asm_pio</strong>:</p>

<pre>
import rp2
from machine import Pin
&nbsp;
&nbsp;
<u>@rp2.asm_pio(set_init=rp2.PIO.OUT_LOW)</u>
def <strong>blink3</strong>():
    set(y, 16)                 <i># hraniční hodnota pro přepnutí pinu</i>
    wrap_target()              <i># cíl skoku</i>
    set(x, 31)                 <i># počitadlo smyčky</i>
    set(pins, 1)               <i># nastavit pin</i>
    label("blink_loop")
    jmp(x_not_y, "skip")       <i># když x!=y přeskočit další instrukci</i>
    set(pins, 0)               <i># vynulovat pin</i>
    label("skip")
    nop() [29]                 <i># zpožďovací mechanismus</i>
    jmp(x_dec, "blink_loop")   <i># a opakujeme x-krát</i>
    wrap()
&nbsp;
&nbsp;
sm = rp2.StateMachine(0, blink3, freq=2000, set_base=Pin(8))
sm.active(1)                   <i># spustit stavový stroj</i>
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Nastavení střídy z&nbsp;hlavního programu přes FIFO</h2>

<p>Nyní se konečně dostáváme k&nbsp;ústřednímu tématu dnešního článku &ndash;
jakým způsobem je možné změnit konfiguraci (resp.&nbsp;přesněji řečeno změnit
chování) PIO programu, a to před jeho spuštěním nebo i při jeho běhu. Jedná se
o velmi často řešenou problematiku, protože vlastně jakýkoli netriviální PIO
program buď vyžaduje nějaká data pro zpracování (viz již zmíněnou
I<sup>2</sup>C sběrnici nebo UART) nebo naopak nějaká data produkuje (sběrnice
či port v&nbsp;režimu čtení). Pro tyto účely se používají FIFO,
tj.&nbsp;jednosměrné nebo obousměrné fronty, které propojují jednotlivé stavové
stroje s&nbsp;vlastním mikrořadičem. Připomeňme si, jak vlastně vypadá způsob
propojení PIO s&nbsp;mikrořadičem:</p>

<a href="https://www.root.cz/obrazek/1170117/"><img src="https://i.iinfo.cz/images/353/rpi-pi-zero-pio-1-prev.webp" class="image-1170117" width="313" height="270" data-prev-filename="https://i.iinfo.cz/images/353/rpi-pi-zero-pio-1-prev.webp" data-prev-width="313" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/353/rpi-pi-zero-pio-1-large.webp" data-large-width="609" data-large-height="525" alt="&#160;" title="Autor: RP 2040&#160;Datasheet authors, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 2: Jeden z&nbsp;bloků PIO (druhý má totožnou architekturu)<br />
Zdroj: datasheet k&nbsp;čipu RP2040, dostupné na <a href="https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf">https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf</a>.</i></p>

<p>Jedna z&nbsp;FIFO je připojena k&nbsp;posuvnému registru OSR (<i>Output
Shift Register</i>) a druhá fronta k&nbsp;posuvnému registru ISR (<i>Input
Shift Register</i>). Fronty i posuvné registry jsou pojmenovány tak, jak jsou
používány z&nbsp;pohledu mikrořadiče, tj.&nbsp;data jsou posílána
z&nbsp;mikrořadiče do TX FIFO (<i>TX=transfer</i>) a ukládána do OSR
(výstupního posuvného registru). A naopak mikrořadič čte data z&nbsp;RX FIFO
(<i>RX=receive</i>), do které se data nasouvají přes ISR (vstupní posuvný
registr). To nám bude při programování PIO působit &bdquo;logické
kolize&ldquo;, protože vstupní data budeme číst z&nbsp;OSR a naopak výstupní
data posílat do registru ISR:</p>

<a href="https://www.root.cz/obrazek/1170120/"><img src="https://i.iinfo.cz/images/353/rpi-pi-zero-pio-2-prev.webp" class="image-1170120" width="370" height="90" data-prev-filename="https://i.iinfo.cz/images/353/rpi-pi-zero-pio-2-prev.webp" data-prev-width="370" data-prev-height="90" data-large-filename="https://i.iinfo.cz/images/353/rpi-pi-zero-pio-2.webp" data-large-width="624" data-large-height="151" alt="&#160;" title="Autor: RP 2040&#160;Datasheet authors, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 3: Výstupní FIFO a registr <strong>OSR</strong><br />
Zdroj: datasheet k&nbsp;čipu RP2040, dostupné na <a href="https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf">https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf</a>.</i></p>

<a href="https://www.root.cz/obrazek/1170123/"><img src="https://i.iinfo.cz/images/353/rpi-pi-zero-pio-3-prev.webp" class="image-1170123" width="370" height="58" data-prev-filename="https://i.iinfo.cz/images/353/rpi-pi-zero-pio-3-prev.webp" data-prev-width="370" data-prev-height="58" data-large-filename="https://i.iinfo.cz/images/353/rpi-pi-zero-pio-3-large.webp" data-large-width="720" data-large-height="113" alt="&#160;" title="Autor: RP 2040&#160;Datasheet authors, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" /></a>
<p><i>Obrázek 4: Vstupní FIFO a registr <strong>ISR</strong><br />
Zdroj: datasheet k&nbsp;čipu RP2040, dostupné na <a href="https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf">https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf</a>.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
import rp2
from machine import Pin


@rp2.asm_pio(set_init=rp2.PIO.OUT_LOW)
def blink4():
    pull(block)                <i># přečtení hodnoty z FIFO s čekáním, uložení do OSR</i>
    mov(y, osr)                <i># přesun hodnoty z OSR do registru Y</i>
    wrap_target()              <i># cíl skoku</i>
    set(x, 31)                 <i># počitadlo smyčky</i>
    set(pins, 1)               <i># nastavit pin</i>
    label("blink_loop")
    jmp(x_not_y, "skip")       <i># když x!=y přeskočit další instrukci</i>
    set(pins, 0)               <i># vynulovat pin</i>
    label("skip")
    nop() [29]                 <i># zpožďovací mechanismus</i>
    jmp(x_dec, "blink_loop")   <i># a opakujeme X-krát</i>
    wrap()


sm = rp2.StateMachine(0, blink4, freq=2000, set_base=Pin(8))
sm.active(1)                   <i># spustit stavový stroj</i>
sm.put(10)                     <i># prahová hodnota, která se pošle do FIFO</i>
</pre>



<pre>
import rp2
from machine import Pin


@rp2.asm_pio(set_init=rp2.PIO.OUT_LOW)
def blink5():
    pull(block)                <i># přečtení hodnoty z FIFO s čekáním, uložení do OSR</i>
    mov(x, osr)                <i># přesun hodnoty z OSR do registru X</i>
    wrap_target()              <i># cíl skoku</i>
    set(y, 31)                 <i># počitadlo smyčky</i>
    set(pins, 1)               <i># nastavit pin</i>
    label("blink_loop")
    jmp(x_not_y, "skip")       <i># když X!=Y přeskočit další instrukci</i>
    set(pins, 0)               <i># vynulovat pin</i>
    label("skip")
    nop() [29]                 <i># zpožďovací mechanismus</i>
    jmp(y_dec, "blink_loop")   <i># a opakujeme Y-krát</i>
    wrap()


sm = rp2.StateMachine(0, blink5, freq=2000, set_base=Pin(8))
sm.active(1)                   <i># spustit stavový stroj</i>
sm.put(10)                     <i># prahová hodnota, která se pošle do FIFO</i>
</pre>


<pre>
import rp2
from machine import Pin


@rp2.asm_pio(set_init=rp2.PIO.OUT_LOW)
def blink6():
    pull(block)                <i># přečtení hodnoty z FIFO s čekáním, uložení do OSR</i>
    mov(x, osr)                <i># přesun hodnoty z OSR do registru X</i>
    wrap_target()              <i># cíl skoku</i>
    pull(noblock)              <i># zkusíme přečíst novou poslanou hodnotu, ale nečekáme na ni</i>
                               <i># pokud hodnota nebyla poslána, doplní se hodnota registru X</i>
    mov(x, osr)                <i>#  přesun hodnoty z OSR do registru X</i>
    set(y, 31)                 <i># počitadlo smyčky</i>
    set(pins, 1)               <i># nastavit pin</i>
    label("blink_loop")
    jmp(x_not_y, "skip")       <i># když X!=Y přeskočit další instrukci</i>
    set(pins, 0)               <i># vynulovat pin</i>
    label("skip")
    nop() [29]                 <i># zpožďovací mechanismus</i>
    jmp(y_dec, "blink_loop")   <i># a opakujeme Y-krát</i>
    wrap()


sm = rp2.StateMachine(0, blink6, freq=2000, set_base=Pin(8))
sm.active(1)                   <i># spustit stavový stroj</i>
sm.put(10)                     <i># prahová hodnota, která se pošle do FIFO</i>
</pre>


<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. Příloha: varianty všech dnešních příkladů pro LED připojenou na GPIO 25</h2>

<p>Všechny demonstrační příklady popsané v&nbsp;předchozích kapitolách byly
navrženy takovým způsobem, aby ovládaly LED připojenou na vstupně-výstupní pin
číslo 8 (což není standardní způsob připojení). V&nbsp;této příloze jsou
uvedeny všechny příklady v&nbsp;nepatrně odlišné konfiguraci, v&nbsp;níž je LED
připojena ke GPIO číslo 25, což je standardní pin používaný v&nbsp;RPi Pico bez
Wifi modulu:</p>

<pre>
import rp2
from machine import Pin
&nbsp;
&nbsp;
<u>@rp2.asm_pio(set_init=rp2.PIO.OUT_LOW)</u>
def <strong>blink1</strong>():
    set(x, 31)                 <i># počitadlo smyčky</i>
    set(y, 16)                 <i># hraniční hodnota pro přepnutí pinu</i>
    set(pins, 1)               <i># nastavit pin</i>
    label("blink_loop")
    jmp(x_not_y, "skip")       <i># když x!=y přeskočit další instrukci</i>
    set(pins, 0)               <i># vynulovat pin</i>
    label("skip")
    nop() [29]                 <i># zpožďovací mechanismus</i>
    jmp(x_dec, "blink_loop")   <i># a opakujeme x-krát</i>
&nbsp;
&nbsp;
sm = rp2.StateMachine(0, blink1, freq=2000, set_base=Pin(25))
sm.active(1)                   <i># spustit stavový stroj</i>
</pre>

<pre>
import rp2
from machine import Pin
&nbsp;
&nbsp;
<u>@rp2.asm_pio(set_init=rp2.PIO.OUT_LOW)</u>
def <strong>blink2</strong>():
    set(y, 16)                 <i># hraniční hodnota pro přepnutí pinu</i>
    label("endless_loop")      <i># cíl skoku</i>
    set(x, 31)                 <i># počitadlo smyčky</i>
    set(pins, 1)               <i># nastavit pin</i>
    label("blink_loop")
    jmp(x_not_y, "skip")       <i># když x!=y přeskočit další instrukci</i>
    set(pins, 0)               <i># vynulovat pin</i>
    label("skip")
    nop() [29]                 <i># zpožďovací mechanismus</i>
    jmp(x_dec, "blink_loop")   <i># a opakujeme x-krát</i>
    jmp("endless_loop")
&nbsp;
&nbsp;
sm = rp2.StateMachine(0, blink2, freq=2000, set_base=Pin(25))
sm.active(1)                   <i># spustit stavový stroj</i>
</pre>

<pre>
import rp2
from machine import Pin
&nbsp;
&nbsp;
<u>@rp2.asm_pio(set_init=rp2.PIO.OUT_LOW)</u>
def <strong>blink3</strong>():
    set(y, 16)                 <i># hraniční hodnota pro přepnutí pinu</i>
    wrap_target()              <i># cíl skoku</i>
    set(x, 31)                 <i># počitadlo smyčky</i>
    set(pins, 1)               <i># nastavit pin</i>
    label("blink_loop")
    jmp(x_not_y, "skip")       <i># když x!=y přeskočit další instrukci</i>
    set(pins, 0)               <i># vynulovat pin</i>
    label("skip")
    nop() [29]                 <i># zpožďovací mechanismus</i>
    jmp(x_dec, "blink_loop")   <i># a opakujeme x-krát</i>
    wrap()
&nbsp;
&nbsp;
sm = rp2.StateMachine(0, blink3, freq=2000, set_base=Pin(25))
sm.active(1)                   <i># spustit stavový stroj</i>
</pre>

<pre>
import rp2
from machine import Pin
&nbsp;
&nbsp;
<u>@rp2.asm_pio(set_init=rp2.PIO.OUT_LOW)</u>
def <strong>blink4</strong>():
    pull(block)                <i># přečtení hodnoty z FIFO s čekáním, uložení do OSR</i>
    mov(y, osr)                <i># přesun hodnoty z OSR do registru Y</i>
    wrap_target()              <i># cíl skoku</i>
    set(x, 31)                 <i># počitadlo smyčky</i>
    set(pins, 1)               <i># nastavit pin</i>
    label("blink_loop")
    jmp(x_not_y, "skip")       <i># když x!=y přeskočit další instrukci</i>
    set(pins, 0)               <i># vynulovat pin</i>
    label("skip")
    nop() [29]                 <i># zpožďovací mechanismus</i>
    jmp(x_dec, "blink_loop")   <i># a opakujeme X-krát</i>
    wrap()
&nbsp;
&nbsp;
sm = rp2.StateMachine(0, blink4, freq=2000, set_base=Pin(25))
sm.active(1)                   <i># spustit stavový stroj</i>
sm.put(10)                     <i># prahová hodnota, která se pošle do FIFO</i>
</pre>

<pre>
import rp2
from machine import Pin
&nbsp;
&nbsp;
<u>@rp2.asm_pio(set_init=rp2.PIO.OUT_LOW)</u>
def <strong>blink5</strong>():
    pull(block)                <i># přečtení hodnoty z FIFO s čekáním, uložení do OSR</i>
    mov(x, osr)                <i># přesun hodnoty z OSR do registru X</i>
    wrap_target()              <i># cíl skoku</i>
    set(y, 31)                 <i># počitadlo smyčky</i>
    set(pins, 1)               <i># nastavit pin</i>
    label("blink_loop")
    jmp(x_not_y, "skip")       <i># když X!=Y přeskočit další instrukci</i>
    set(pins, 0)               <i># vynulovat pin</i>
    label("skip")
    nop() [29]                 <i># zpožďovací mechanismus</i>
    jmp(y_dec, "blink_loop")   <i># a opakujeme Y-krát</i>
    wrap()
&nbsp;
&nbsp;
sm = rp2.StateMachine(0, blink5, freq=2000, set_base=Pin(25))
sm.active(1)                   <i># spustit stavový stroj</i>
sm.put(10)                     <i># prahová hodnota, která se pošle do FIFO</i>
</pre>

<pre>
import rp2
from machine import Pin
&nbsp;
&nbsp;
<u>@rp2.asm_pio(set_init=rp2.PIO.OUT_LOW)</u>
def <strong>blink6</strong>():
    pull(block)                <i># přečtení hodnoty z FIFO s čekáním, uložení do OSR</i>
    mov(x, osr)                <i># přesun hodnoty z OSR do registru X</i>
    wrap_target()              <i># cíl skoku</i>
    pull(noblock)              <i># zkusíme přečíst novou poslanou hodnotu, ale nečekáme na ni</i>
                               <i># pokud hodnota nebyla poslána, doplní se hodnota registru X</i>
    mov(x, osr)                <i>#  přesun hodnoty z OSR do registru X</i>
    set(y, 31)                 <i># počitadlo smyčky</i>
    set(pins, 1)               <i># nastavit pin</i>
    label("blink_loop")
    jmp(x_not_y, "skip")       <i># když X!=Y přeskočit další instrukci</i>
    set(pins, 0)               <i># vynulovat pin</i>
    label("skip")
    nop() [29]                 <i># zpožďovací mechanismus</i>
    jmp(y_dec, "blink_loop")   <i># a opakujeme Y-krát</i>
    wrap()
&nbsp;
&nbsp;
sm = rp2.StateMachine(0, blink6, freq=2000, set_base=Pin(25))
sm.active(1)                   <i># spustit stavový stroj</i>
sm.put(10)                     <i># prahová hodnota, která se pošle do FIFO</i>
</pre>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
MicroPython běžící na čipech RP2040 s&nbsp;architekturou Cortex-M0 byly uloženy
do repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;tabulce zobrazené níže jsou odkazy na jednotlivé příklady:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>display_version.py</td><td>tisk verze MicroPythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/display_version.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/display_version.py</a></td></tr>
<tr><td> 2</td><td>display_frequency.py </td><td>zjištění hodinové frekvence MCU</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/display_frequency.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/display_frequency.py</a></td></tr>
<tr><td> 3</td><td>display_mem_info_1.py</td><td>zobrazení základních informací o paměti MicroPythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/display_mem_info_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/display_mem_info_1.py</a></td></tr>
<tr><td> 4</td><td>display_mem_info_2.py</td><td>zobrazení podrobnějších informací o paměti MicroPythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/display_mem_info_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/display_mem_info_2.py</a></td></tr>
<tr><td> 5</td><td>display_pins.py</td><td>zobrazení konfigurace GPIO pinů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/display_pins.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/display_pins.py</a></td></tr>
<tr><td> 6</td><td>blink_gpio_25.py</td><td>blikání LED na GPIO #25 bez použití PIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/blink_gpio_25.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/blink_gpio_25.py</a></td></tr>
<tr><td> 7</td><td>blink_gpio_8.py</td><td>blikání LED na GPIO #8 bez použití PIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/blink_gpio_8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/blink_gpio_8.py</a></td></tr>
<tr><td> 8</td><td>pio_blink_pin_25.py</td><td>blikání LED na GPIO #25 s&nbsp;použitím PIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_25.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_25.py</a></td></tr>
<tr><td> 9</td><td>pio_blink_pin_8.py</td><td>blikání LED na GPIO #8 s&nbsp;použitím PIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_8.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>pio_blink_pin_8_loop_1.py</td><td>blikání LED na GPIO #8, registr Y je použit pro specifikaci střídy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_8_loop_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_8_loop_1.py</a></td></tr>
<tr><td>11</td><td>pio_blink_pin_8_loop_2.py</td><td>blikání LED na GPIO #8, explicitní zápis nekonečné programové smyčky s&nbsp;řízením GPIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_8_loop_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_8_loop_2.py</a></td></tr>
<tr><td>12</td><td>pio_blink_pin_8_loop_3.py</td><td>blikání LED na GPIO #8, použití direktiv <strong>.wrap</strong> a <strong>.wrap_target</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_8_loop_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_8_loop_3.py</a></td></tr>
<tr><td>13</td><td>pio_blink_pin_8_control_1.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_8_control_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_8_control_1.py</a></td></tr>
<tr><td>14</td><td>pio_blink_pin_8_control_2.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_8_control_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_8_control_2.py</a></td></tr>
<tr><td>15</td><td>pio_blink_pin_8_control_3.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_8_control_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_8_control_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>pio_blink_pin_25_loop_1.py</td><td>blikání LED na GPIO #25, registr Y je použit pro specifikaci střídy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_25_loop_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_25_loop_1.py</a></td></tr>
<tr><td>17</td><td>pio_blink_pin_25_loop_2.py</td><td>blikání LED na GPIO #25, explicitní zápis nekonečné programové smyčky s&nbsp;řízením GPIO</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_25_loop_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_25_loop_2.py</a></td></tr>
<tr><td>18</td><td>pio_blink_pin_25_loop_3.py</td><td>blikání LED na GPIO #25, použití direktiv <strong>.wrap</strong> a <strong>.wrap_target</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_25_loop_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_25_loop_3.py</a></td></tr>
<tr><td>19</td><td>pio_blink_pin_25_control_1.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_25_control_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_25_control_1.py</a></td></tr>
<tr><td>20</td><td>pio_blink_pin_25_control_2.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_25_control_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_25_control_2.py</a></td></tr>
<tr><td>21</td><td>pio_blink_pin_25_control_3.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_25_control_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pio/pio_blink_pin_25_control_3.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Zápis funkcí obsahujících instrukce Thumb a Thumb-2 v MicroPythonu<br />
<a href="https://www.root.cz/clanky/zapis-funkci-obsahujicich-instrukce-thumb-a-thumb-2-v-micropythonu/">https://www.root.cz/clanky/zapis-funkci-obsahujicich-instrukce-thumb-a-thumb-2-v-micropythonu/</a>
</li>

<li>Zápis funkcí obsahujících instrukce Thumb a Thumb-2 v MicroPythonu (2)<br />
<a href="https://www.root.cz/clanky/zapis-funkci-obsahujicich-instrukce-thumb-a-thumb-2-v-micropythonu-2/">https://www.root.cz/clanky/zapis-funkci-obsahujicich-instrukce-thumb-a-thumb-2-v-micropythonu-2/</a>
</li>

<li>Zápis funkcí obsahujících instrukce Thumb a Thumb-2 v MicroPythonu (dokončení)<br />
<a href="https://www.root.cz/clanky/zapis-funkci-obsahujicich-instrukce-thumb-a-thumb-2-v-micropythonu-dokonceni/">https://www.root.cz/clanky/zapis-funkci-obsahujicich-instrukce-thumb-a-thumb-2-v-micropythonu-dokonceni/</a>
</li>

<li>Překlad funkcí přímo do nativního kódu MicroPythonem<br />
<a href="https://www.root.cz/clanky/preklad-funkci-primo-do-nativniho-kodu-micropythonem/">https://www.root.cz/clanky/preklad-funkci-primo-do-nativniho-kodu-micropythonem/</a>
</li>

<li>MicroPython ve webovém prohlížeči: lehkotonážní varianta k Pyodide<br />
<a href="https://www.root.cz/clanky/micropython-ve-webovem-prohlizeci-lehkotonazni-varianta-k-pyodide/">https://www.root.cz/clanky/micropython-ve-webovem-prohlizeci-lehkotonazni-varianta-k-pyodide/</a>
</li>

<li>Programmable IO<br />
<a href="https://docs.micropython.org/en/latest/rp2/tutorial/pio.html">https://docs.micropython.org/en/latest/rp2/tutorial/pio.html</a>
</li>

<li>Introduction to the PIO (Programmable Input Output) of the RP2040<br />
<a href="https://tutoduino.fr/en/pio-rp2040-en/">https://tutoduino.fr/en/pio-rp2040-en/</a>
</li>

<li>MicroPython examples: PIO<br />
<a href="https://github.com/raspberrypi/pico-micropython-examples/tree/master/pio">https://github.com/raspberrypi/pico-micropython-examples/tree/master/pio</a>
</li>

<li>PIO: Wikipedia CZ (pozor: jedná se o něco jiného!)<br />
<a href="https://cs.wikipedia.org/wiki/PIO">https://cs.wikipedia.org/wiki/PIO</a>
</li>

<li>RP2040 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/RP2040">https://en.wikipedia.org/wiki/RP2040</a>
</li>

<li>Maximising MicroPython speed<br />
<a href="https://docs.micropython.org/en/latest/reference/speed_python.html">https://docs.micropython.org/en/latest/reference/speed_python.html</a>
</li>

<li>Online ARM converter<br />
<a href="https://armconverter.com/?disasm">https://armconverter.com/?disasm</a>
</li>

<li>The 3 different code emitters<br />
<a href="https://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers/posts/664832">https://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers/posts/664832</a>
</li>

<li>The 3 different code emitters, part 2<br />
<a href="https://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers/posts/665145">https://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers/posts/665145</a>
</li>

<li>Fast Filters for the Pyboard<br />
<a href="https://github.com/peterhinch/micropython-filters">https://github.com/peterhinch/micropython-filters</a>
</li>

<li>How to load 32 bit constant from assembler with @micropython.asm_thumb<br />
<a href="https://forum.micropython.org/viewtopic.php?f=21&t=12931&sid=25de8871fa9cfcf8cafb6318f9d8ba3a">https://forum.micropython.org/viewtopic.php?f=21&t=12931&sid=25de8871fa9cfcf8cafb6318f9d8ba3a</a>
</li>

<li>Pi pico, micropython.asm_thumb: ADR Rd, &lt;label&gt; and LDR Rd, &lt;label&gt; not implemented?<br />
<a href="https://github.com/orgs/micropython/discussions/12257">https://github.com/orgs/micropython/discussions/12257</a>
</li>

<li>MicroPython documentation<br />
<a href="https://docs.micropython.org/en/latest/index.html">https://docs.micropython.org/en/latest/index.html</a>
</li>

<li>Inline assembler for Thumb2 architectures<br />
<a href="https://docs.micropython.org/en/latest/reference/asm_thumb2_index.html">https://docs.micropython.org/en/latest/reference/asm_thumb2_index.html</a>
</li>

<li>Inline assembler in MicroPython<br />
<a href="https://docs.micropython.org/en/latest/pyboard/tutorial/assembler.html#pyboard-tutorial-assembler">https://docs.micropython.org/en/latest/pyboard/tutorial/assembler.html#pyboard-tutorial-assembler</a>
</li>

<li>MCU market turns to 32-bits and ARM<br />
<a href="http://www.eetimes.com/document.asp?doc_id=1280803">http://www.eetimes.com/document.asp?doc_id=1280803</a>
</li>

<li>Cortex-M0 Processor (ARM Holdings)<br />
<a href="http://www.arm.com/products/processors/cortex-m/cortex-m0.php">http://www.arm.com/products/processors/cortex-m/cortex-m0.php</a>
</li>

<li>Cortex-M0+ Processor (ARM Holdings)<br />
<a href="http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php">http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php</a>
</li>

<li>ARM Processors in a Mixed Signal World<br />
<a href="http://www.eeweb.com/blog/arm/arm-processors-in-a-mixed-signal-world">http://www.eeweb.com/blog/arm/arm-processors-in-a-mixed-signal-world</a>
</li>

<li>RISCové mikroprocesory s&nbsp;komprimovanými instrukčními sadami<br />
<a href="https://www.root.cz/clanky/riscove-mikroprocesory-s-komprimovanymi-instrukcnimi-sadami/">https://www.root.cz/clanky/riscove-mikroprocesory-s-komprimovanymi-instrukcnimi-sadami/</a>
</li>

<li>RISCové mikroprocesory s&nbsp;komprimovanými instrukčními sadami (2)<br />
<a href="https://www.root.cz/clanky/riscove-mikroprocesory-s-komprimovanymi-instrukcnimi-sadami-2/">https://www.root.cz/clanky/riscove-mikroprocesory-s-komprimovanymi-instrukcnimi-sadami-2/</a>
</li>

<li>ARM Architecture (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_architecture">https://en.wikipedia.org/wiki/ARM_architecture</a>
</li>

<li>Cortex-M0 (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_Cortex-M0">https://en.wikipedia.org/wiki/ARM_Cortex-M0</a>
</li>

<li>Cortex-M0+ (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M0.2B">https://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M0.2B</a>
</li>

<li>Improving ARM Code Density and Performance<br />
<a href="New Thumb Extensions to the ARM Architecture Richard Phelan">New Thumb Extensions to the ARM Architecture Richard Phelan</a>
</li>

<li>The ARM Processor Architecture<br />
<a href="http://www.arm.com/products/processors/technologies/instruction-set-architectures.php">http://www.arm.com/products/processors/technologies/instruction-set-architectures.php</a>
</li>

<li>Thumb-2 instruction set<br />
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0344c/Beiiegaf.html">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0344c/Beiiegaf.html</a>
</li>

<li>Introduction to ARM thumb<br />
<a href="http://www.eetimes.com/discussion/other/4024632/Introduction-to-ARM-thumb">http://www.eetimes.com/discussion/other/4024632/Introduction-to-ARM-thumb</a>
</li>

<li>ARM, Thumb, and ThumbEE instruction sets<br />
<a href="http://www.keil.com/support/man/docs/armasm/armasm_CEGBEIJB.htm">http://www.keil.com/support/man/docs/armasm/armasm_CEGBEIJB.htm</a>
</li>

<li>An Introduction to ARM Assembly Language<br />
<a href="http://dev.emcelettronica.com/introduction-to-arm-assembly-language">http://dev.emcelettronica.com/introduction-to-arm-assembly-language</a>
</li>

<li>Processors - ARM<br />
<a href="http://www.arm.com/products/processors/index.php">http://www.arm.com/products/processors/index.php</a>
</li>

<li>The ARM Instruction Set<br />
<a href="http://simplemachines.it/doc/arm_inst.pdf">http://simplemachines.it/doc/arm_inst.pdf</a>
</li>

<li>The Thumb instruction set<br />
<a href="http://apt.cs.manchester.ac.uk/ftp/pub/apt/peve/PEVE05/Slides/05_Thumb.pdf">http://apt.cs.manchester.ac.uk/ftp/pub/apt/peve/PEVE05/Slides/05_Thumb.pdf</a>
</li>

<li>Why Learn Assembly Language?<br />
<a href="http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language">http://www.codeproject.com/Articles/89460/Why-Learn-Assembly-Language</a>
</li>

<li>Is Assembly still relevant?<br />
<a href="http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant">http://programmers.stackexchange.com/questions/95836/is-assembly-still-relevant</a>
</li>

<li>Why Learning Assembly Language Is Still a Good Idea<br />
<a href="http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html">http://www.onlamp.com/pub/a/onlamp/2004/05/06/writegreatcode.html</a>
</li>

<li>Assembly language today<br />
<a href="http://beust.com/weblog/2004/06/23/assembly-language-today/">http://beust.com/weblog/2004/06/23/assembly-language-today/</a>
</li>

<li>Assembler: Význam assembleru dnes<br />
<a href="http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz">http://www.builder.cz/rubriky/assembler/vyznam-assembleru-dnes-155960cz</a>
</li>

<li>Assembler pod Linuxem<br />
<a href="http://phoenix.inf.upol.cz/linux/prog/asm.html">http://phoenix.inf.upol.cz/linux/prog/asm.html</a>
</li>

<li>AT&amp;T Syntax versus Intel Syntax<br />
<a href="https://www.sourceware.org/binutils/docs-2.12/as.info/i386-Syntax.html">https://www.sourceware.org/binutils/docs-2.12/as.info/i386-Syntax.html</a>
</li>

<li>Linux Assembly website<br />
<a href="http://asm.sourceforge.net/">http://asm.sourceforge.net/</a>
</li>

<li>Raspberry Pi Pico Variants &ndash; A Detailed Comparison<br />
<a href="https://circuitdigest.com/article/raspberry-pi-pico-variants-comparison">https://circuitdigest.com/article/raspberry-pi-pico-variants-comparison</a>
</li>

<li>Raspberry Pi Pico 2 vs Original Pico: What’s New?<br />
<a href="https://www.digikey.cz/en/maker/blogs/2024/raspberry-pi-pico-2-vs-original-pico-whats-new">https://www.digikey.cz/en/maker/blogs/2024/raspberry-pi-pico-2-vs-original-pico-whats-new</a>
</li>

<li>pio-uart<br />
<a href="https://github.com/Sympatron/pio-uart">https://github.com/Sympatron/pio-uart</a>
</li>

<li>Datasheet čipu RP2040<br />
<a href="https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf">https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="https://github.com/tisnik/">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>

