<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Validace datových struktur v Pythonu (2. část)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Validace datových struktur v Pythonu (2. část)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Dokončení popisu možností nabízených knihovnou <i>Schema</i></a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. Zdrojový kód třetího demonstračního příkladu</a></p>
<p><a href="#k04">*** 4. Výsledky běhu třetího demonstračního příkladu</a></p>
<p><a href="#k05">*** 5. Použití klauzulí <strong>And</strong> a <strong>Or</strong></a></p>
<p><a href="#k06">*** 6. Zdrojový kód čtvrtého demonstračního příkladu</a></p>
<p><a href="#k07">*** 7. Výsledky běhu čtvrtého demonstračního příkladu</a></p>
<p><a href="#k08">*** 8. Použití klauzule <strong>Optional</strong></a></p>
<p><a href="#k09">*** 9. Použití regulárních výrazů pro kontrolu dat ve slovnících</a></p>
<p><a href="#k10">*** 10. Zdrojový kód pátého demonstračního příkladu</a></p>
<p><a href="#k11">*** 11. Výsledky běhu pátého demonstračního příkladu</a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. Zdrojový kód šestého demonstračního příkladu</a></p>
<p><a href="#k16">*** 16. Výsledky běhu šestého demonstračního příkladu</a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Dokončení popisu možností nabízených knihovnou <i>Schema</i></h2>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zdrojový kód třetího demonstračního příkladu</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from sys import argv
from schema import Schema, SchemaError
&nbsp;
&nbsp;
def validate(schema, data, verbose_mode=False):
    try:
        print("\n\n")
        if verbose_mode:
            print(schema)
        print(data)
        schema.validate(data)
        print("pass")
    except SchemaError as e:
        print(e)
&nbsp;
&nbsp;
def positive_integer(value):
    return type(value) is int and value &gt; 0
&nbsp;
&nbsp;
def salary(value):
    return type(value) is float and value &gt; 10000.0 and value &lt; 99999.9
&nbsp;
&nbsp;
employee = Schema({"name": str,
                   "surname": str,
                   "id": positive_integer,
                   "salary": salary,
                   "position": str})
&nbsp;
&nbsp;
verbose_mode = "-v" in argv
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 15000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 15000,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": -15000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 1000000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 15000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "id": 1,
                    "salary": 100000000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 45000.0,
                    "position": ""},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 45000.0,
                    "position": "tovarnik"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "",
                    "surname": "",
                    "id": 1,
                    "salary": 25000.0,
                    "position": ""},
                    verbose_mode)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Výsledky běhu třetího demonstračního příkladu</h2>


<pre>
{'salary': 15000.0, 'position': 'QA', 'name': 'Eda', 'id': 1, 'surname': 'Wasserfall'}
pass



{'salary': 15000, 'position': 'QA', 'name': 'Eda', 'id': 1, 'surname': 'Wasserfall'}
Key 'salary' error:
salary(15000) should evaluate to True



{'salary': -15000.0, 'position': 'QA', 'name': 'Eda', 'id': 1, 'surname': 'Wasserfall'}
Key 'salary' error:
salary(-15000.0) should evaluate to True



{'salary': 1000000.0, 'position': 'QA', 'name': 'Eda', 'id': 1, 'surname': 'Wasserfall'}
Key 'salary' error:
salary(1000000.0) should evaluate to True



{'salary': 15000.0, 'position': 'QA', 'name': 'Eda', 'id': 1, 'surname': 'Wasserfall'}
pass



{'salary': 100000000.0, 'position': 'QA', 'name': 'Eda', 'id': 1}
Key 'salary' error:
salary(100000000.0) should evaluate to True



{'salary': 45000.0, 'position': '', 'name': 'Eda', 'id': 1, 'surname': 'Wasserfall'}
pass



{'salary': 45000.0, 'position': 'tovarnik', 'name': 'Eda', 'id': 1, 'surname': 'Wasserfall'}
pass



{'salary': 25000.0, 'position': '', 'name': '', 'id': 1, 'surname': ''}
pass
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Použití klauzulí <strong>And</strong> a <strong>Or</strong></h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zdrojový kód čtvrtého demonstračního příkladu</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
from sys import argv
from schema import Schema, SchemaError, And, Or
&nbsp;
&nbsp;
def validate(schema, data, verbose_mode=False):
    try:
        print("\n\n")
        if verbose_mode:
            print(schema)
        print(data)
        schema.validate(data)
        print("pass")
    except SchemaError as e:
        print(e)
&nbsp;
&nbsp;
def positive_integer(value):
    return type(value) is int and value &gt; 0
&nbsp;
&nbsp;
def positive_float(value):
    return type(value) is float and value &gt; 0
&nbsp;
&nbsp;
POSITIONS = ["QA", "DevOps", "Admin", "Docs", "HR"]
&nbsp;
employee = Schema({"name": And(str, len),
                   "surname": And(str, len),
                   "id": positive_integer,
                   "salary": Or(positive_integer, positive_float, lambda x: x &gt; 10000.0 and x &lt; 99999.0),
                   "position": And(str, lambda s: s in POSITIONS)})
&nbsp;
verbose_mode = "-v" in argv
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 15000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 15000,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": -15000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 1000000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 15000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "id": 1,
                    "salary": 100000000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 45000.0,
                    "position": ""},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 45000.0,
                    "position": "tovarnik"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "",
                    "surname": "",
                    "id": 1,
                    "salary": 25000.0,
                    "position": ""},
                    verbose_mode)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Výsledky běhu čtvrtého demonstračního příkladu</h2>

<pre>
{'position': 'QA', 'id': 1, 'salary': 15000.0, 'name': 'Eda', 'surname': 'Wasserfall'}
pass



{'position': 'QA', 'id': 1, 'salary': 15000, 'name': 'Eda', 'surname': 'Wasserfall'}
pass



{'position': 'QA', 'id': 1, 'salary': -15000.0, 'name': 'Eda', 'surname': 'Wasserfall'}
Key 'salary' error:
Or(<function positive_integer at 0x7fa41594fbf8>, <function positive_float at 0x7fa4158df730>, <function <lambda> at 0x7fa4158df7b8>) did not validate -15000.0
<lambda>(-15000.0) should evaluate to True



{'position': 'QA', 'id': 1, 'salary': 1000000.0, 'name': 'Eda', 'surname': 'Wasserfall'}
pass



{'position': 'QA', 'id': 1, 'salary': 15000.0, 'name': 'Eda', 'surname': 'Wasserfall'}
pass



{'id': 1, 'salary': 100000000.0, 'name': 'Eda', 'position': 'QA'}
Missing keys: 'surname'



{'position': '', 'id': 1, 'salary': 45000.0, 'name': 'Eda', 'surname': 'Wasserfall'}
Key 'position' error:
<lambda>('') should evaluate to True



{'position': 'tovarnik', 'id': 1, 'salary': 45000.0, 'name': 'Eda', 'surname': 'Wasserfall'}
Key 'position' error:
<lambda>('tovarnik') should evaluate to True



{'position': '', 'id': 1, 'salary': 25000.0, 'name': '', 'surname': ''}
Key 'position' error:
<lambda>('') should evaluate to True
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Použití klauzule <strong>Optional</strong></h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. Použití regulárních výrazů pro kontrolu dat ve slovnících</h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. Zdrojový kód pátého demonstračního příkladu</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import re
from sys import argv
from schema import Schema, SchemaError, And, Or, Optional
&nbsp;
&nbsp;
def validate(schema, data, verbose_mode=False):
    try:
        print("\n\n")
        if verbose_mode:
            print(schema)
        print(data)
        schema.validate(data)
        print("pass")
    except SchemaError as e:
        print(e)
&nbsp;
&nbsp;
def positive_integer(value):
    return type(value) is int and value > 0
&nbsp;
&nbsp;
def positive_float(value):
    return type(value) is float and value > 0
&nbsp;
&nbsp;
def name_str(value):
    return re.fullmatch("[A-Z][a-z]+", value)
&nbsp;
&nbsp;
POSITIONS = ["QA", "DevOps", "Admin", "Docs", "HR"]
&nbsp;
employee = Schema({"name": And(str, len, name_str),
                   "surname": And(str, len, name_str),
                   "id": positive_integer,
                   Optional("salary"): And(Or(positive_integer, positive_float), lambda x: x > 10000.0 and x < 99999.0),
                   Optional("position"): And(str, lambda s: s in POSITIONS)})
&nbsp;
verbose_mode = "-v" in argv
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 15000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 15000,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": -15000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 1000000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 15000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "id": 1,
                    "salary": 100000000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 45000.0,
                    "position": ""},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 45000.0,
                    "position": "tovarnik"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 25000.0,},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "position": "DevOps"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 45000.0,
                    "position": "HR"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "wasserfall",
                    "id": 1,
                    "salary": 45000.0,
                    "position": "HR"},
                    verbose_mode)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Výsledky běhu pátého demonstračního příkladu</h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. Třída pro kontrolu platu a zadané pracovní pozice</h2>

<pre>
class Salary:
    def validate(self, value):
        if not is_integer(value) and not is_float(value):
            raise SchemaError("Salary has unexpected type {t}".format(t=type(value)))
        elif value &lt;= 10000:
            raise SchemaError("Salary {s} is too low".format(s=value))
        elif value &gt;= 99999.9:
            raise SchemaError("Salary {s} is too high".format(s=value))
</pre>

<pre>
class Position:
    POSITIONS = ["QA", "DevOps", "Admin", "Docs", "HR"]
&nbsp;
    def validate(self, value):
        if value not in Position.POSITIONS:
            raise SchemaError("Unknown position '{p}'".format(p=value))
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Třída pro kontrolu unikátnosti zapsaného ID</h2>

<pre>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Zdrojový kód šestého demonstračního příkladu</h2>

<pre>
<i>#!/usr/bin/env python</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import re
from sys import argv
from schema import Schema, SchemaError, And, Or, Optional, Regex
&nbsp;
&nbsp;
def validate(schema, data, verbose_mode=False):
    try:
        print("\n\n")
        if verbose_mode:
            print(schema)
        print(data)
        schema.validate(data)
        print("pass")
    except SchemaError as e:
        print(e)
&nbsp;
&nbsp;
def is_integer(value):
    return type(value) is int
&nbsp;
&nbsp;
def is_float(value):
    return type(value) is float
&nbsp;
&nbsp;
class Salary:
    def validate(self, value):
        if not is_integer(value) and not is_float(value):
            raise SchemaError("Salary has unexpected type {t}".format(t=type(value)))
        elif value &lt;= 10000:
            raise SchemaError("Salary {s} is too low".format(s=value))
        elif value &gt;= 99999.9:
            raise SchemaError("Salary {s} is too high".format(s=value))
&nbsp;
&nbsp;
class Position:
    POSITIONS = ["QA", "DevOps", "Admin", "Docs", "HR"]
&nbsp;
    def validate(self, value):
        if value not in Position.POSITIONS:
            raise SchemaError("Unknown position '{p}'".format(p=value))
&nbsp;
&nbsp;
class UniqueId:
&nbsp;
    def __init__(self):
        self._ids = set()
&nbsp;
    def validate(self, value):
        if value in self._ids:
            raise SchemaError("ID {id} is not unique".format(id=value))
        self._ids.add(value)
&nbsp;
&nbsp;
employee = Schema({"name": And(str, len, Regex("[A-Z][a-z]+")),
                   "surname": And(str, len, Regex("[A-Z][a-z]+")),
                   "id": UniqueId(),
                   Optional("salary"): Salary(),
                   Optional("position"): And(str, Position())})
&nbsp;
verbose_mode = "-v" in argv
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 1,
                    "salary": 15000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 2,
                    "salary": 15000,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 3,
                    "salary": -15000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 4,
                    "salary": 1000000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 5,
                    "salary": 15000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "id": 6,
                    "salary": 100000000.0,
                    "position": "QA"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 7,
                    "salary": 45000.0,
                    "position": ""},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 8,
                    "salary": 45000.0,
                    "position": "tovarnik"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 9,
                    "salary": 25000.0},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 10,
                    "position": "DevOps"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Wasserfall",
                    "id": 11},
                    verbose_mode)
&nbsp;
validate(employee, {"id": 12},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "eda",
                    "surname": "Wasserfall",
                    "id": 13,
                    "salary": 45000.0,
                    "position": "HR"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "wasserfall",
                    "id": 14,
                    "salary": 45000.0,
                    "position": "HR"},
                    verbose_mode)
&nbsp;
validate(employee, {"name": "Eda",
                    "surname": "Unique",
                    "id": 1,
                    "salary": 45000.0,
                    "position": "HR"},
                    verbose_mode)
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny demonstrační projekty, které jsme si v&nbsp;dnešním článku popsali,
byly uloženo do repositáře, který naleznete na adrese <a
href="https://github.com/tisnik/python-schema-checks">https://github.com/tisnik/python-schema-checks</a>.
V&nbsp;tabulce pod tímto odstavcem jsou vypsány odkazy na všechny projekty
rozdělené podle použité knihovny. Z&nbsp;tohoto důvodu zde naleznete i projekty
zmíněné minule.</p>

<h3>Schemagic</h3>

<table>
<tr><th>Projekt</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td>schemagic-demo-1</td><td>základní vlastnosti knihovny Schemagic</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-1">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-1</a></td></tr>
<tr><td>schemagic-demo-2</td><td>konverze prováděné při validaci</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-2">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-2</a></td></tr>
<tr><td>schemagic-demo-3</td><td>vlastní validační funkce</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-3">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-3</a></td></tr>
<tr><td>schemagic-demo-4</td><td>vylepšení předchozího příkladu</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-4">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-4</a></td></tr>
<tr><td>schemagic-demo-5</td><td>validace slovníků</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-5">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-5</a></td></tr>
<tr><td>schemagic-demo-6</td><td>validace slovníků podruhé</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-6">https://github.com/tisnik/python-schema-checks/tree/master/schemagic-demo-6</a></td></tr>
</table>

<h3>Schema</h3>

<table>
<tr><th>Projekt</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td>schema-demo-1</td><td>základní vlastnosti knihovny Scheme</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-1">https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-1</a></td></tr>
<tr><td>schema-demo-2</td><td>validace slovníků a dalších typů</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-2">https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-2</a></td></tr>
<tr><td>schema-demo-3</td><td>validace slovníků a dalších typů</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-3">https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-3</a></td></tr>
<tr><td>schema-demo-4</td><td>validace slovníků a dalších typů</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-4">https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-4</a></td></tr>
<tr><td>schema-demo-5</td><td>validace slovníků a dalších typů</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-5">https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-5</a></td></tr>
<tr><td>schema-demo-6</td><td>validace slovníků a dalších typů</td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-6">https://github.com/tisnik/python-schema-checks/tree/master/schema-demo-6</a></td></tr>
</table>

<h3>voluptuous</h3>

<table>
<tr><th>Projekt</th><th>Stručný popis</th><th>Cesta</th></tr>
<tr><td></td><td></td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/">https://github.com/tisnik/python-schema-checks/tree/master/</a></td></tr>
<tr><td></td><td></td><td><a href="https://github.com/tisnik/python-schema-checks/tree/master/">https://github.com/tisnik/python-schema-checks/tree/master/</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>7 Best Python Libraries for Validating Data<br />
<a href="https://www.yeahhub.com/7-best-python-libraries-validating-data/">https://www.yeahhub.com/7-best-python-libraries-validating-data/</a>
</li>

<li>voluptuous na (na PyPi)<br />
<a href="https://pypi.python.org/pypi/voluptuous">https://pypi.python.org/pypi/voluptuous</a>
</li>

<li>voluptuous (na GitHubu)<br />
<a href="https://github.com/alecthomas/voluptuous">https://github.com/alecthomas/voluptuous</a>
</li>

<li>schemagic 0.9.1 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schemagic/0.9.1">https://pypi.python.org/pypi/schemagic/0.9.1</a>
</li>

<li>Schemagic / Schemagic.web (na GitHubu)<br />
<a href="https://github.com/Mechrophile/schemagic">https://github.com/Mechrophile/schemagic</a>
</li>

<li>schema 0.6.7 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schema">https://pypi.python.org/pypi/schema</a>
</li>

<li>schema (na GitHubu)<br />
<a href="https://github.com/keleshev/schema">https://github.com/keleshev/schema</a>
</li>

<li>XML Schema validator and data conversion library for Python<br />
<a href="https://github.com/brunato/xmlschema">https://github.com/brunato/xmlschema</a>
</li>

<li>xmlschema 0.9.7<br />
<a href="https://pypi.python.org/pypi/xmlschema/0.9.7">https://pypi.python.org/pypi/xmlschema/0.9.7</a>
</li>

<li>jsonschema 2.6.0<br />
<a href="https://pypi.python.org/pypi/jsonschema">https://pypi.python.org/pypi/jsonschema</a>
</li>

<li>warlock 1.3.0<br />
<a href="https://pypi.python.org/pypi/warlock">https://pypi.python.org/pypi/warlock</a>
</li>

<li>Python Virtual Environments – A Primer<br />
<a href="https://realpython.com/python-virtual-environments-a-primer/">https://realpython.com/python-virtual-environments-a-primer/</a>
</li>

<li>pip 1.1 documentation: Requirements files<br />
<a href="https://pip.readthedocs.io/en/1.1/requirements.html">https://pip.readthedocs.io/en/1.1/requirements.html</a>
</li>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>mock 2.0.0<br />
<a href="https://pypi.python.org/pypi/mock">https://pypi.python.org/pypi/mock</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Unit testing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit testing<br />
<a href="https://cs.wikipedia.org/wiki/Unit_testing">https://cs.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>5 Differences between clojure.spec and Schema<br />
<a href="https://lispcast.com/clojure.spec-vs-schema/">https://lispcast.com/clojure.spec-vs-schema/</a>
</li>

<li>Schema: Clojure(Script) library for declarative data description and validation<br />
<a href="https://github.com/plumatic/schema">https://github.com/plumatic/schema</a>
</li>

<li>clojure.spec - Rationale and Overview<br />
<a href="https://clojure.org/about/spec">https://clojure.org/about/spec</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

