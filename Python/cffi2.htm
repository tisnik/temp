<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Propojení Pythonu s nativními knihovnami s využitím balíčku cffi (2)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Propojení Pythonu s nativními knihovnami s využitím balíčku cffi (2)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Ve druhé části článku o propojení Pythonu s nativními knihovnami s využitím balíčku cffi si ukážeme některé další možnosti použití cffi. Ukážeme si zpracování hlavičkových souborů, automatický překlad kódů z jazyka C do dynamicky linkované knihovny a taktéž způsob předávání struktur či ukazatelů na struktury do funkcí psaných v C.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Propojení Pythonu s&nbsp;nativními knihovnami s&nbsp;využitím balíčku cffi (2)</a></p>
<p><a href="#k02">2. Funkce naprogramovaná v&nbsp;céčku, jejíž prototyp je uložen v&nbsp;hlavičkovém souboru</a></p>
<p><a href="#k03">3. Využití hlavičkového souboru v&nbsp;Pythonních skriptech</a></p>
<p><a href="#k04">4. Zpracování skutečného hlavičkového souboru s&nbsp;příkazy preprocesoru</a></p>
<p><a href="#k05">5. Jedno z&nbsp;možných řešení tohoto problému</a></p>
<p><a href="#k06">6. Překlad nativní knihovny a spuštění upraveného skriptu</a></p>
<p><a href="#k07">7. Automatický překlad céčkovských kódů do dynamicky linkované knihovny</a></p>
<p><a href="#k08">8. Skript v&nbsp;Pythonu, který provede překlad céčkovského kódu do nativní knihovny i se zavoláním tohoto kódu</a></p>
<p><a href="#k09">9. Průběh překladu a výsledek činnosti skriptu</a></p>
<p><a href="#k10">10. Soubory, které vznikly při běhu skriptu</a></p>
<p><a href="#k11">11. Předávání parametrů dalších typů do nativních funkcí</a></p>
<p><a href="#k12">12. Funkce psaná v&nbsp;C, která akceptuje parametr typu struktura (<strong>struct</strong>)</a></p>
<p><a href="#k13">13. Předání struktury (<strong>struct</strong>) do nativní funkce</a></p>
<p><a href="#k14">14. Výsledný skript psaný v&nbsp;Pythonu, který do céčkové funkce předá strukturu</a></p>
<p><a href="#k15">15. Funkce psaná v&nbsp;C, která akceptuje parametr typu ukazatel na strukturu</a></p>
<p><a href="#k16">16. Výsledný skript psaný v&nbsp;Pythonu, který do céčkové funkce předá ukazatel na strukturu</a></p>
<p><a href="#k17">17. Obsah navazujícího článku</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Propojení Pythonu s&nbsp;nativními knihovnami s&nbsp;využitím balíčku cffi (2)</h2>

<p>Na <a
href="https://www.root.cz/clanky/propojeni-pythonu-s-nativnimi-knihovnami-s-vyuzitim-balicku-cffi/">úvodní
článek</a> o propojení skriptů či celých aplikací naprogramovaných <a
href="https://www.root.cz/n/python/">v&nbsp;Pythonu</a> s&nbsp;nativními
knihovnami (typicky naprogramovanými v&nbsp;jazyku C) s&nbsp;využitím balíčku
<i>cffi</i> dnes navážeme. Nejprve se zmíníme o některých (a nutno říci, že
mnohdy významných) omezeních knihovny <i>cffi</i> při zpracovávání hlavičkových
souborů. Posléze si ukážeme, jakým způsobem je možné realizovat automatický
překlad céčkovských zdrojových kódů přímo ze skriptu vytvořeného v&nbsp;Pythonu
(na tuto část navážeme příště). A nakonec si řekneme a pochopitelně též ukážeme
na demonstračních příkladech, jakými způsoby lze volat funkce psané v&nbsp;C,
které jako své parametry vyžadují struktury (<strong>struct</strong>)
popř.&nbsp;ukazatele na struktury. S&nbsp;těmito požadavky se totiž velmi často
setkáme v&nbsp;praxi.</p>

<a href="https://www.root.cz/obrazek/1092946/"><img src="https://i.iinfo.cz/images/85/c-prev.png" class="image-1092946" data-prev-filename="https://i.iinfo.cz/images/85/c-prev.png" data-prev-width="192" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/85/c-large.png" data-large-width="374" data-large-height="525" alt="&#160;" title="Autor: Prentice Hall, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="192" height="270" /></a>
<p><i>Obrázek 1: Programovací jazyk C je prozatím ve své nice prakticky
nenahraditelný.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Funkce naprogramovaná v&nbsp;céčku, jejíž prototyp je uložen v&nbsp;hlavičkovém souboru</h2>

<p>Velmi často se setkáme se situací, v&nbsp;níž jsou céčkovské funkce
deklarovány v&nbsp;běžném zdrojovém souboru s&nbsp;koncovkou .c (jedná se o
takzvanou <i>definiční deklaraci</i>), ovšem prototypy exportovaných funkcí
jsou navíc uloženy v&nbsp;hlavičkovém souboru (jedná se o <i>předběžnou
deklaraci</i>). S&nbsp;takovým hlavičkovým souborem dokáže knihovna <i>cffi</i>
do určité míry pracovat a ušetřit tak programátorům práci.</p>

<p>Ukažme si to na jednoduchém příkladu. Hlavička (neboli přesněji řečeno
předběžná deklarace) funkce <strong>greet</strong> je uložena
v&nbsp;hlavičkovém souboru nazvaném &bdquo;greet.h&ldquo;, který pro
jednoduchost obsahuje pouze tuto hlavičku a nikoli další deklarace či příkazy
preprocesoru:</p>

<pre>
void <strong>greet</strong>(char *x);
</pre>

<p>Naproti tomu samotná definice funkce (přesněji řečeno definiční deklarace)
je uložena v&nbsp;souboru &bdquo;greet.h&ldquo;, jehož obsah je
následující:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
#include "greeter.h"
&nbsp;
extern void <strong>greet</strong>(char *x) {
    printf("Hello %s!\n", x);
}
</pre>

<p>Samotnou dynamickou knihovnu budeme překládat stále stejným způsobem:</p>

<pre>
$ <strong>gcc -Wall -ansi -c -fPIC greeter.c -o greeter.o</strong>
&nbsp;  
$ <strong>gcc -shared -Wl,-soname,libgreeter.so -o libgreeter.so greeter.o</strong>
</pre>

<p>Výsledkem bude soubor s&nbsp;názvem &bdquo;libgreeter.so&ldquo;:</p>

<pre>
$ <strong>file libgreeter.so</strong>
&nbsp;
libgreeter.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=d6391750471a7443add6191a9836449a67f6283b, not stripped
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Využití hlavičkového souboru v&nbsp;Pythonních skriptech</h2>

<p>Hlavičkový soubor &bdquo;greeter.h&ldquo;, který byl ukázán <a
href="#k02">v&nbsp;předchozí kapitole</a>, je možné využít přímo
v&nbsp;Pythonním skriptu, protože ho knihovna <i>cffi</i> za určitých okolností
(viz dále) dokáže zpracovat a tudíž nebude po autorovi skriptu vyžadovat
předběžné deklarace použitých funkcí. Pro načtení souboru
&bdquo;greeter.h&ldquo; použijeme funkci <strong>cffi.cdef</strong>:</p>

<pre>
ffi.cdef(load_header("greeter.h"))
</pre>

<p>A takto konkrétně vypadá zařazení volání této funkce do Pythonovského
skriptu, který načte dynamickou knihovnu a zavolá nativní funkci z&nbsp;této
knihovny:</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)
&nbsp;
&nbsp;
ffi.cdef(load_header("greeter.h"))
greeter = load_library("libgreeter.so")
greeter.greet("world".encode("utf-8"))
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zpracování skutečného hlavičkového souboru s&nbsp;příkazy preprocesoru</h2>

<p>Skutečné hlavičkové soubory ovšem neobsahují pouze předběžné deklarace
funkcí, ale mnohdy i různé příkazy preprocesoru, například příkazy, které
zamezují dvojímu zpracování skutečných definic (například datových typů). Velmi
často se setkáme s&nbsp;následující strukturou hlavičkových souborů,
v&nbsp;nichž je makro použito právě pro zamezení dvojího zpracování obsahu
souboru_:</p>

<pre>
#ifndef _GREET_H_
#define _GREET_H_
&nbsp;
void <strong>greet</strong>(char *x);
&nbsp;
#endif
</pre>

<p>Současná verze knihovny <i>cffi</i> ovšem (možná kupodivu) takto
strukturované hlavičkové soubory nedokáže zpracovat:</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)
&nbsp;
&nbsp;
ffi.cdef(load_header("greeter.h"))
greeter = load_library("libgreeter.so")
greeter.greet("world".encode("utf-8"))
</pre>

<p>Po spuštění tohoto skriptu dojde k&nbsp;běhové chybě:</p>

<pre>
Traceback (most recent call last):
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/cffi/cparser.py", line 336, in _parse
    ast = _get_parser().parse(fullcsource)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pycparser/c_parser.py", line 147, in parse
    return self.cparser.parse(
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pycparser/ply/yacc.py", line 331, in parse
    return self.parseopt_notrack(input, lexer, debug, tracking, tokenfunc)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pycparser/ply/yacc.py", line 1118, in parseopt_notrack
    p.callable(pslice)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pycparser/c_parser.py", line 571, in p_pp_directive
    self._parse_error('Directives not supported yet',
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/pycparser/plyparser.py", line 67, in _parse_error
    raise ParseError("%s: %s" % (coord, msg))
pycparser.plyparser.ParseError: &lt;cdef source string&gt;:1:1: Directives not supported yet
&nbsp;
During handling of the above exception, another exception occurred:
&nbsp;
Traceback (most recent call last):
  File "call_via_cffi4.py", line 19, in <module>
    ffi.cdef(load_header("greeter.h"))
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/cffi/api.py", line 112, in cdef
    self._cdef(csource, override=override, packed=packed, pack=pack)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/cffi/api.py", line 126, in _cdef
    self._parser.parse(csource, override=override, **options)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/cffi/cparser.py", line 389, in parse
    self._internal_parse(csource)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/cffi/cparser.py", line 394, in _internal_parse
    ast, macros, csource = self._parse(csource)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/cffi/cparser.py", line 338, in _parse
    self.convert_pycparser_error(e, csource)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/cffi/cparser.py", line 367, in convert_pycparser_error
    raise CDefError(msg)
cffi.CDefError: cannot parse "#ifndef _GREET_H_"
&lt;cdef source string&gt;:1:1: Directives not supported yet
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Jedno z&nbsp;možných řešení tohoto problému</h2>

<p><a href="#k04">Výše zmíněný problém</a>, který je způsoben nedostatky
v&nbsp;knihovně <strong>cparser</strong>, je ve skutečnosti řešitelný pouze
částečně. Jedno z&nbsp;možných řešení spočívá v&nbsp;tom, že rozdělíme
hlavičkový soubor na dvě části &ndash; na část určenou pro preprocesor a
překladač céčka a na část určenou pro <i>cffi</i>.</p>

<p>Část určená pro preprocesor a překladač céčka může vypadat následovně:</p>

<pre>
#ifndef _GREET_H_
#define _GREET_H_
&nbsp;
#include "_greeter.h"
&nbsp;
#endif
</pre>

<p>Stále zde tedy zajišťujeme, aby se každý symbol definoval pouze jedenkrát.
Ovšem samotná hlavička (prototyp) funkce překládané do dynamicky linkované
knihovny je uložena ve druhém souboru <strong>_greeter.h</strong>:</p>

<pre>
void greet(char *x);
</pre>

<p>Samotný céčkovský kód se přitom nemusí nijak měnit:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
#include "greeter.h"
&nbsp;
extern void <strong>greet</strong>(char *x) {
    printf("Hello %s!\n", x);
}
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. Překlad nativní knihovny a spuštění upraveného skriptu</h2>

<p>Nyní by mělo být stále možné přeložit naši funkci <strong>greeter</strong>
do nativní knihovny, protože z&nbsp;pohledu překladače jazyka C vlastně
k&nbsp;žádné velké změně nedošlo:</p>

<pre>
$ <strong>gcc -Wall -ansi -c -fPIC greeter.c -o greeter.o</strong>
&nbsp;
$ <strong>gcc -shared -Wl,-soname,libgreeter.so -o libgreeter.so greeter.o</strong>
</pre>

<p>Modifikovat je ovšem nutné skript v&nbsp;Pythonu, a to tak, aby zpracoval
prototyp funkce ze souboru &bdquo;_greeter.h&ldquo; a nikoli ze souboru
&bdquo;greeter.h&ldquo; (viz podtrženou část kódu):</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)
&nbsp;
&nbsp;
<u>ffi.cdef(load_header("_greeter.h"))</u>
greeter = load_library("libgreeter.so")
greeter.greet("world".encode("utf-8"))
</pre>

<p>Výsledek:</p>

<pre>
<strong>export LD_LIBRARY_PATH=.</strong>
<strong>python3 call_via_cffi6.py</strong>
&nbsp;
Hello world!
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Automatický překlad céčkovských kódů do dynamicky linkované knihovny</h2>

<p>Knihovna <i>cffi</i> vývojářům nabízí ještě jeden potenciálně užitečný režim
činnosti. Namísto načtení již dříve vytvořené dynamicky linkované knihovny je
totiž možné zajistit, že se překlad této knihovny provede přímo v&nbsp;rámci
skriptu napsaného v&nbsp;Pythonu. Co k&nbsp;této operaci potřebujeme?
Samozřejmě je nutné mít k&nbsp;dispozici céčkovský zdrojový kód
s&nbsp;funkcemi, které budeme chtít volat z&nbsp;Pythonu. To je v&nbsp;našem
případě soubor &bdquo;greeter.c&ldquo; s&nbsp;tímto obsahem:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
extern void <strong>greet</strong>(char *x) {
    printf("Hello %s!\n", x);
}
</pre>

<p>Dále je vhodné (ale nikoli striktně nutné), aby existoval hlavičkový soubor
s&nbsp;prototypem výše uvedené funkce, a to opět ve zjednodušené podobě:</p>

<pre>
void greet(char *x);
</pre>

<p>V&nbsp;Pythonu se překlad této céčkovské části do nativní knihovny provede
následovně:</p>

<pre>
ffi.set_source(
    "_greeter",
    '#include "greeter.h"',
    sources=["greeter.c"],
)
&nbsp;
ffi.compile(verbose=True)
</pre>

<p>kde první parametr funkce <strong>ffi.set_source</strong> určuje jak jméno
vygenerovaného céčkovského souboru (viz další kapitoly), tak i začátek jména
souboru s&nbsp;dynamicky linkovanou knihovnou.</p>

<p><div class="rs-tip-major">Poznámka: jak uvidíme příště, je tento režim
v&nbsp;mnoha ohledech výhodný, protože nás dokáže odstínit od klasického ABI.
To je však skutečně téma na samostatný článek.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Skript v&nbsp;Pythonu, který provede překlad céčkovského kódu do nativní knihovny i se zavoláním tohoto kódu</h2>

<p>Celý skript, který provede překlad céčkovského kódu do nativní knihovny i se
zavoláním tohoto kódu, bude vypadat následovně. Povšimněte si třetího příkazu
<strong>import</strong> na konci skriptu:</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)
&nbsp;
&nbsp;
ffi.cdef(load_header("greeter.h"))
&nbsp;
ffi.set_source(
    "_greeter",
    '#include "greeter.h"',
    sources=["greeter.c"],
)
&nbsp;
ffi.compile(verbose=True)
&nbsp;
from _greeter import ffi, lib
lib.greet("world".encode("utf-8"))
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Průběh překladu a výsledek činnosti skriptu</h2>

<p>Předchozí skript se pokouší provádět čtyři kroky:</p>

<ol>
<li>Transpřeklad céčkovské funkce s&nbsp;vytvořením pomocného céčkovského souboru</li>
<li>Překlad všech těchto zdrojových kódů do dynamicky linkované knihovny</li>
<li>Načtení a inicializace této knihovny ze skriptu psaného v&nbsp;Pythonu</li>
<li>Zavolání nativní funkce z&nbsp;právě načtené knihovny</li>
</ol>

<p>Průběh činnosti můžeme sledovat na terminálu:</p>

<pre>
$ <strong>python3 call_via_cffi7.py</strong>
</pre>

<p>Průběh kroků 1, 2 a 4 se zobrazí na ploše terminálu:</p>

<pre>
generating ./_greeter.c
the current directory is '/home/ptisnovs/src/most-popular-python-libs/cffi/greeter_build'
running build_ext
building '_greeter' extension
x86_64-linux-gnu-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.8 -c _greeter.c -o ./_greeter.o
x86_64-linux-gnu-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.8 -c greeter.c -o ./greeter.o
x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fwrapv -O2 -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 ./_greeter.o ./greeter.o -o ./_greeter.cpython-38-x86_64-linux-gnu.so
Hello world!
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že v&nbsp;tomto případě
není nutné nastavovat <strong>LD_LIBRARY_PATH</strong> atd.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Soubory, které vznikly při běhu skriptu</h2>

<p>Po dokončení činnosti skriptu uvedeného <a href="#k08">v&nbsp;osmé
kapitole</a> se podívejme na obsah adresáře, z&nbsp;něhož byl skript spuštěn.
Kromě původních souborů by se zde měly nacházet i čtyři nové soubory, které
jsou ve výpisu podtrženy:</p>

<pre>
$ <strong>ls -l</strong>
&nbsp;
total 180
-rw-rw-r-- 1 ptisnovs ptisnovs   504 May 25 18:44 call_via_cffi7.py
-rwxrw-r-- 1 ptisnovs ptisnovs    19 May 25 18:44 clean.sh
-rw-rw-r-- 1 ptisnovs ptisnovs 23334 May 31 07:57 <u>_greeter.c</u>
-rw-rw-r-- 1 ptisnovs ptisnovs    81 May 25 17:55 greeter.c
-rwxrwxr-x 1 ptisnovs ptisnovs 35088 May 31 07:57 <u>_greeter.cpython-38-x86_64-linux-gnu.so</u>
-rw-rw-r-- 1 ptisnovs ptisnovs    21 May 25 18:32 greeter.h
-rw-rw-r-- 1 ptisnovs ptisnovs 32544 May 31 07:57 <u>_greeter.o</u>
-rw-rw-r-- 1 ptisnovs ptisnovs  7024 May 31 07:57 <u>greeter.o</u>
</pre>

<p>Soubor &bdquo;greeter.o&ldquo; obsahuje přeloženou formu naší funkce
<strong>greet</strong>:</p>

<pre>
$ <strong>nm greeter.o </strong>
&nbsp;
                 U _GLOBAL_OFFSET_TABLE_
0000000000000000 T <u>greet</u>
0000000000000000 r .LC0
                 U __printf_chk
</pre>

<p>Soubor &bdquo;_greeter.c&ldquo; vznikl transpřekladem a obsahuje mnoho
pomocných funkcí použitelných z&nbsp;Pythonu. Mj.&nbsp;zde nalezneme i definici
symbolu odkazujícího (nepřímo) na naši funkci:</p>

<pre>
static const struct _cffi_global_s _cffi_globals[] = {
  { "greet", (void *)_cffi_f_greet, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 0), (void *)_cffi_d_greet },
};
</pre>

<p>Překladem souboru &bdquo;_greeter.c&ldquo; do objektového kódu vznikne
soubor &bdquo;_greeter.o&ldquo;, jenž obsahuje větší množství symbolů:</p>

<pre>
$ <strong>nm _greeter.o </strong>
&nbsp;
0000000000000000 t _cffi_d_greet
0000000000000000 b _cffi_exports
0000000000000010 t _cffi_f_greet
0000000000000060 d _cffi_globals
0000000000000000 d _cffi_type_context
0000000000000000 d _cffi_types
                 U _GLOBAL_OFFSET_TABLE_
                 U greet
0000000000000000 r .LC0
0000000000000009 r .LC1
0000000000000017 r .LC2
0000000000000000 r .LC3
                 U memset
                 U _Py_Dealloc
                 U PyEval_RestoreThread
                 U PyEval_SaveThread
                 U PyImport_ImportModule
00000000000001c0 T PyInit__greeter
                 U PyLong_FromVoidPtr
                 U _Py_NoneStruct
                 U PyObject_CallMethod
                 U PyObject_Free
                 U PyObject_Malloc
                 U __stack_chk_fail
</pre>

<p>A konečně výsledkem činnosti první části skriptu je kýžená dynamicky
linkovaná knihovna &bdquo;_greeter.cpython-38-x86_64-linux-gnu.so&ldquo;:</p>

<pre>
$ <strong>nm _greeter.cpython-38-x86_64-linux-gnu.so</strong>
&nbsp;
0000000000001260 t _cffi_d_greet
0000000000004100 b _cffi_exports
0000000000001270 t _cffi_f_greet
0000000000003de0 d _cffi_globals
0000000000003d80 d _cffi_type_context
00000000000040a0 d _cffi_types
00000000000040e0 b completed.8061
                 w __cxa_finalize@@GLIBC_2.2.5
00000000000011a0 t deregister_tm_clones
0000000000001210 t __do_global_dtors_aux
0000000000003d78 d __do_global_dtors_aux_fini_array_entry
0000000000004080 d __dso_handle
0000000000003e00 d _DYNAMIC
000000000000152c t _fini
0000000000001250 t frame_dummy
0000000000003d70 d __frame_dummy_init_array_entry
000000000000218c r __FRAME_END__
0000000000004000 d _GLOBAL_OFFSET_TABLE_
                 w __gmon_start__
000000000000204c r __GNU_EH_FRAME_HDR
<u>0000000000001510 T greet</u>
0000000000001000 t _init
                 w _ITM_deregisterTMCloneTable
                 w _ITM_registerTMCloneTable
                 U memset@@GLIBC_2.2.5
                 U __printf_chk@@GLIBC_2.3.4
                 U _Py_Dealloc
                 U PyEval_RestoreThread
                 U PyEval_SaveThread
                 U PyImport_ImportModule
0000000000001420 T PyInit__greeter
                 U PyLong_FromVoidPtr
                 U _Py_NoneStruct
                 U PyObject_CallMethod
                 U PyObject_Free
                 U PyObject_Malloc
00000000000011d0 t register_tm_clones
                 U __stack_chk_fail@@GLIBC_2.4
00000000000040c8 d __TMC_END__
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Předávání parametrů dalších typů do nativních funkcí</h2>

<p>Všechny ukázané příklady komunikace mezi programem psaným v&nbsp;Pythonu a
céčkovým kódem byly poměrně bezproblémové, a to z&nbsp;toho prostého důvodu, že
jsme prozatím používali takové datové typy, které jsou do značné míry
kompatibilní mezi Pythonem a C &ndash; tedy celočíselné hodnoty
popř.&nbsp;ukazatele na pole bajtů. Ovšem praxe je zcela odlišná, protože se
setkáme s&nbsp;céčkovskými funkcemi akceptujícími například struktury,
ukazatele na struktury, pole, ukazatele na funkce atd. atd. A i s&nbsp;takovými
hodnotami je nutné umět nějakým způsobem pracovat. V&nbsp;dalším textu se
zaměříme na předávání struktur (<strong>struct</strong>) a taktéž ukazatelů na
struktury. Příště se navíc zaměříme na složitější případy, z&nbsp;nichž některé
jsou převzaty z&nbsp;praxe.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Funkce psaná v&nbsp;C, která akceptuje parametr typu struktura (<strong>struct</strong>)</h2>

<p>Vyzkoušejme si nyní poměrně typický případ. Mějme datový typ struktura
(<strong>struct</strong>), který například reprezentuje vektor v&nbsp;3D
prostoru. Jedná se tedy o strukturu obsahující tři prvky typu
<strong>double</strong>:</p>

<pre>
typedef struct {
    double x;
    double y;
    double z;
} <strong>vector_t</strong>;
</pre>

<p>Dále definujme funkci <strong>print_vector</strong>, která bude tisknout
hodnoty prvků vektoru. Přitom struktura s&nbsp;vektorem je do této funkce
předána <i>hodnotou</i> a nikoli <i>odkazem</i>:</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
#include "vector_printer.h"
&nbsp;
extern void <strong>print_vector</strong>(vector_t v)
{
    printf("Vector (%.1f  %.1f  %.1f)\n", v.x, v.y, v.z);
}
</pre>

<p>V&nbsp;dalším textu si ukážeme, jak lze tuto strukturu vytvořit
v&nbsp;<i>cffi</i> a jak se předává do céčkovské funkce.</p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Předání struktury (<strong>struct</strong>) do nativní funkce</h2>

<p>Nyní nastává poněkud komplikovaná situace, protože ještě před zavoláním
céčkovské funkce musíme na straně Pythonu vytvořit céčkovskou strukturu
resp.&nbsp;obdobu této struktury. V&nbsp;případě použití <i>cffi</i> se tato
operace provádí nepřímo, protože zkonstruujeme objekt, který je ukazatelem na
strukturu a nikoli přímo strukturou samotnou. Tato operace se provádí
konstruktorem <strong>ffi.new</strong>, kterému se v&nbsp;řetězci předá datový
typ výsledku. Musí se přitom vždy jednat buď o ukazatel nebo o pole:</p>

<pre>
vector = ffi.new("vector_t *")
</pre>

<p>nebo:</p>

<pre>
vector = ffi.new("vector_t *", <i>výchozí hodnoty prvků struktury</i>)
</pre>

<p><div class="rs-tip-major">Poznámka: datový typ se kontroluje v&nbsp;době
běhu Pythonovského skriptu. Knihovna <i>cffi</i> pochopitelně musí mít
k&nbsp;dispozici definici typu <strong>vector_t</strong> (ta se načte
z&nbsp;hlavičkového souboru).</div></p>

<p>Nyní můžeme prvky vektoru naplnit přímo v&nbsp;Pythonu velmi idiomatickým
způsobem (na pozadí se ovšem provádí složitější operace):</p>

<pre>
vector.x = 1
vector.y = 2
vector.z = 3
</pre>

<p>Poněkud nepohodlné je volání céčkovské funkce, protože té nechceme předat
ukazatel na strukturu, ale přímo danou strukturu jako hodnotu. Musíme zde
použít dosti ošklivý trik, který vypadá takto:</p>

<pre>
vprinter.print_vector(vector[0])
</pre>

<p><div class="rs-tip-major">Poznámka: pochopitelně &ndash; a vyzkoušejte si to
&ndash; je k&nbsp;dispozici jen první prvek &bdquo;pole&ldquo;. Pokus o použití
indexů s&nbsp;odlišnou hodnotou povede k&nbsp;vyhození běhové
výjimky:</div></p>

<pre>
Traceback (most recent call last):
  File "call_via_cffi.py", line 26, in <module>
    vprinter.print_vector(vector[1])
IndexError: cdata 'vector_t *' can only be indexed by 0
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Výsledný skript psaný v&nbsp;Pythonu, který do céčkové funkce předá strukturu</h2>

<p>Podívejme se nyní na úplný kód skriptu, který dokáže zavolat céčkovskou
funkci akceptující strukturu a předat jí korektní data. To, že jsou předaná
data skutečně korektní, se dozvíme z&nbsp;vypsaného výsledku:</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)
&nbsp;
&nbsp;
ffi.cdef(load_header("vector_printer.h"))
&nbsp;
vector = ffi.new("vector_t *")
vector.x = 1
vector.y = 2
vector.z = 3
&nbsp;
vprinter = load_library("libvprinter.so")
vprinter.print_vector(vector[0])
</pre>

<p>Skript spustíme nám již známým způsobem:</p>

<pre>
$ <strong>export LD_LIBRARY_PATH=.</strong>
$ <strong>python3 call_via_cffi.py</strong>
</pre>

<p>Výsledek vypsaný na terminál by měl vypadat následovně:</p>

<pre>
Vector (1.0  2.0  3.0)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Funkce psaná v&nbsp;C, která akceptuje parametr typu ukazatel na strukturu</h2>

<p>Nyní se podívejme na další demonstrační příklad, s&nbsp;jehož obdobou se
velmi často můžeme setkat v&nbsp;praxi. Opět budeme pracovat s&nbsp;datovou
strukturou obsahující tři souřadnice vektoru:</p>

<pre>
typedef struct {
    double x;
    double y;
    double z;
} <strong>vector_t</strong>;
</pre>

<p>Nyní se ovšem do céčkovské funkce nebude struktura předávat <i>hodnotou</i>,
ale <i>odkazem</i> (neboli se předá ukazatel na strukturu). Pochopitelně se
změní typ parametru volané funkce, ale navíc se při přístupu k&nbsp;prvkům
struktury předané odkazem může použít operátor -&gt; (namísto poměrně
nepřehledné kombinace operátorů * a .):</p>

<pre>
#include &lt;stdio.h&gt;
&nbsp;
#include "vector_printer.h"
&nbsp;
extern void <strong>print_vector</strong>(vector_t *v)
{
    printf("Vector (%.1f  %.1f  %.1f)\n", v-&gt;x, v-&gt;y, v-&gt;z);
}
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Výsledný skript psaný v&nbsp;Pythonu, který do céčkové funkce předá ukazatel na strukturu</h2>

<p>Na straně Pythonu budeme postupovat prakticky stejným způsobem, jako
v&nbsp;případě předchozího demonstračního příkladu. Necháme si zkonstruovat
objekt, který reprezentuje Pythonovskou obdobu ukazatele na strukturu a
naplníme prvky této struktury:</p>

<pre>
vector = ffi.new("vector_t *")
vector.x = 1
vector.y = 2
vector.z = 3
</pre>

<p>Volání céčkovské funkce z&nbsp;dynamicky linkované knihovny bude nyní
(poněkud paradoxně) snazší, protože se nebudeme muset starat o získání hodnoty
z&nbsp;&bdquo;pole&ldquo;:</p>

<pre>
vprinter = load_library("libvprinter.so")
vprinter.print_vector(vector)
</pre>

<p>Celý skript, který načte dynamicky linkovanou knihovnu, vytvoří strukturu,
naplní její prvky a předá ukazatel na tuto strukturu do céčkovské funkce, může
vypadat následovně:</p>

<pre>
import pathlib
&nbsp;
from cffi import FFI
&nbsp;
ffi = FFI()
&nbsp;
def <strong>load_header</strong>(filename):
    directory = pathlib.Path().absolute()
    header = directory / filename
    with open(header) as fin:
        return fin.read()
&nbsp;
&nbsp;
def <strong>load_library</strong>(library_name):
    return ffi.dlopen(library_name)
&nbsp;
&nbsp;
ffi.cdef(load_header("vector_printer.h"))
&nbsp;
vector = ffi.new("vector_t *")
vector.x = 1
vector.y = 2
vector.z = 3
&nbsp;
vprinter = load_library("libvprinter.so")
vprinter.print_vector(vector)
</pre>

<p>Po spuštění skriptu napsaného v&nbsp;Pythonu získáme stejný výsledek, jako
při spuštění skriptu <a href="#k14">ze čtrnácté kapitoly</a>, i když se nyní
interně volá céčkovská funkce s&nbsp;předáním jediného ukazatele a nikoli
hodnoty celé datové struktury:</p>

<pre>
Vector (1.0  2.0  3.0)
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Obsah navazujícího článku</h2>

<p>Ve třetím článku o propojení Pythonu s&nbsp;nativními knihovnami
s&nbsp;využitím balíčku <i>cffi</i> si nejprve ukážeme způsob komunikace
s&nbsp;céčkovskými funkcemi, které akceptují jako své parametry pole
popř.&nbsp;naopak pole vrací. Užitečná je i znalost práce s&nbsp;callback
funkcemi, což je opět téma, kterým se budeme zabývat příště. Taktéž si řekneme,
jak se pracuje s&nbsp;hodnotami zkonstruovanými na straně Pythonu, které by
měly být z&nbsp;operační paměti odstraňovány automatickým správcem paměti
(<i>GC</i> &ndash; <i>garbage collector</i>).</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si v&nbsp;dnešním i <a href="">předchozím</a> článku ukázali,
naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je nutné mít
nainstalovánu knihovnu <i>cffi</i>:</p>

<table>
<tr><th> #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td> 1</td><td>adder/adder.c</td><td>funkce psaná v&nbsp;C, která sečte své dva celočíselné parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/adder.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/adder.c</a></td></tr>
<tr><td> 2</td><td>adder/call_via_cffi1.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;korektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi1.py</a></td></tr>
<tr><td> 3</td><td>adder/call_via_cffi2.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi2.py</a></td></tr>
<tr><td> 4</td><td>adder/call_via_cffi3.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi3.py</a></td></tr>
<tr><td> 5</td><td>adder/call_via_cffi.sh</td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_cffi.sh</a></td></tr>
<tr><td> 6</td><td>adder/call_via_ctypes1.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;korektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes1.py</a></td></tr>
<tr><td> 7</td><td>adder/call_via_ctypes2.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes2.py</a></td></tr>
<tr><td> 8</td><td>adder/call_via_ctypes3.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;nekorektními parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes3.py</a></td></tr>
<tr><td> 9</td><td>adder/call_via_ctypes.sh </td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/call_via_ctypes.sh</a></td></tr>
<tr><td>10</td><td>adder/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/make_library.sh</a></td></tr>
<tr><td>11</td><td>adder/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/adder/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>12</td><td>greeter/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/greeter.c</a></td></tr>
<tr><td>13</td><td>greeter/call_via_cffi1.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;nekorektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi1.py</a></td></tr>
<tr><td>14</td><td>greeter/call_via_cffi2.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi2.py</a></td></tr>
<tr><td>15</td><td>greeter/call_via_cffi3.py</td><td>zavolání céčkovské funkce přes <i>cffi</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi3.py</a></td></tr>
<tr><td>16</td><td>greeter/call_via_cffi.sh</td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_cffi.sh</a></td></tr>
<tr><td>17</td><td>greeter/call_via_ctypes1.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;nekorektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes1.py</a></td></tr>
<tr><td>18</td><td>greeter/call_via_ctypes2.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes2.py</a></td></tr>
<tr><td>19</td><td>greeter/call_via_ctypes3.py</td><td>zavolání céčkovské funkce přes <i>ctypes</i> s&nbsp;korektním parametrem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes3.py</a></td></tr>
<tr><td>20</td><td>greeter/call_via_ctypes.sh</td><td>nastavení cest a spuštění všech tří předchozích Pythonovských skriptů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/call_via_ctypes.sh</a></td></tr>
<tr><td>21</td><td>greeter/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/make_library.sh</a></td></tr>
<tr><td>22</td><td>greeter/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>swapper/swapper.c</td><td>céčkovská funkce prohazující obsah svých dvou parametrů předávaných referencí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/swapper.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/swapper.c</a></td></tr>
<tr><td>24</td><td>swapper/call_via_cffi1.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python (korektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi1.py</a></td></tr>
<tr><td>25</td><td>swapper/call_via_cffi2.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python (nekorektní varianta)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi2.py</a></td></tr>
<tr><td>26</td><td>swapper/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/call_via_cffi.sh</a></td></tr>
<tr><td>27</td><td>swapper/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/make_library.sh</a></td></tr>
<tr><td>28</td><td>swapper/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/swapper/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>29</td><td>filler/filler.c</td><td>céčkovská funkce pro vyplnění části pole zadanou hodnotou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/filler.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/filler.c</a></td></tr>
<tr><td>30</td><td>filler/call_via_cffi.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.py</a></td></tr>
<tr><td>31</td><td>filler/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/call_via_cffi.sh</a></td></tr>
<tr><td>32</td><td>filler/make_library.sh </td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/make_library.sh</a></td></tr>
<tr><td>32</td><td>filler/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/filler/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>33</td><td>greeter_h/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.c</a></td></tr>
<tr><td>34</td><td>greeter_h/greeter.h</td><td>prototyp (předběžná deklarace) funkce <i>greeter</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/greeter.h</a></td></tr>
<tr><td>35</td><td>greeter_h/call_via_cffi4.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi4.py</a></td></tr>
<tr><td>36</td><td>greeter_h/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/call_via_cffi.sh</a></td></tr>
<tr><td>37</td><td>greeter_h/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/make_library.sh</a></td></tr>
<tr><td>38</td><td>greeter_h/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>39</td><td>greeter_h_2/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/greeter.c</a></td></tr>
<tr><td>40</td><td>greeter_h_2/greeter.h</td><td>prototyp (předběžná deklarace) funkce <i>greeter</i> obalená v&nbsp;testu na existenci symbolu/makra</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/greeter.h</a></td></tr>
<tr><td>41</td><td>greeter_h_2/call_via_cffi5.py</td><td>zavolání céčkovské knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/call_via_cffi5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/call_via_cffi5.py</a></td></tr>
<tr><td>42</td><td>greeter_h_2/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/call_via_cffi.sh</a></td></tr>
<tr><td>43</td><td>greeter_h_2/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/make_library.sh</a></td></tr>
<tr><td>44</td><td>greeter_h_2/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_2/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>45</td><td>greeter_h_3/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/greeter.c</a></td></tr>
<tr><td>46</td><td>greeter_h_3/greeter.h</td><td>test na existenci symbolu/makra, pokud makro neexistuje, provede se vložení dalšího souboru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/greeter.h</a></td></tr>
<tr><td>47</td><td>greeter_h_3/_greeter.h</td><td>prototyp (předběžná deklarace) funkce <i>greeter</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/_greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/_greeter.h</a></td></tr>
<tr><td>48</td><td>greeter_h_3/call_via_cffi5.py</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/call_via_cffi5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/call_via_cffi5.py</a></td></tr>
<tr><td>49</td><td>greeter_h_3/call_via_cffi.sh</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/call_via_cffi.sh</a></td></tr>
<tr><td>50</td><td>greeter_h_3/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/make_library.sh</a></td></tr>
<tr><td>51</td><td>greeter_h_3/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_h_3/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>52</td><td>greeter_build/greeter.c</td><td>funkce psaná v&nbsp;C, která na standardní výstup vytiskne řetězec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/greeter.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/greeter.c</a></td></tr>
<tr><td>53</td><td>greeter_build/greeter.h</td><td>prototyp (předběžná deklarace) funkce <i>greeter</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/greeter.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/greeter.h</a></td></tr>
<tr><td>54</td><td>greeter_build/call_via_cffi7.py</td><td>skript pro překlad céčkovské funkce, vytvoření dynamicky linkované knihovny a zavolání funkce z&nbsp;této knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/call_via_cffi7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/call_via_cffi7.py</a></td></tr>
<tr><td>55</td><td>greeter_build/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/greeter_build/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>56</td><td>vector_printer/vector_printer.c</td><td>funkce psaná v&nbsp;C, která akceptuje jako svůj parametr strukturu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/vector_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/vector_printer.c</a></td></tr>
<tr><td>57</td><td>vector_printer/vector_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_vector</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/vector_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/vector_printer.h</a></td></tr>
<tr><td>58</td><td>vector_printer/call_via_cffi.sh</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/call_via_cffi.sh</a></td></tr>
<tr><td>59</td><td>vector_printer/call_via_cffi.py</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/call_via_cffi.py</a></td></tr>
<tr><td>60</td><td>vector_printer/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/make_library.sh</a></td></tr>
<tr><td>61</td><td>vector_printer/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer/clean.sh</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>62</td><td>vector_printer_2/vector_printer.c</td><td>funkce psaná v&nbsp;C, která akceptuje jako svůj parametr ukazatel na strukturu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/vector_printer.c">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/vector_printer.c</a></td></tr>
<tr><td>63</td><td>vector_printer_2/vector_printer.h</td><td>prototyp (předběžná deklarace) funkce <i>print_vector</i> bez dalších informací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/vector_printer.h">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/vector_printer.h</a></td></tr>
<tr><td>64</td><td>vector_printer_2/call_via_cffi.sh</td><td>zavolání céčkovské funkce z&nbsp;knihovny z&nbsp;jazyka Python</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/call_via_cffi.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/call_via_cffi.sh</a></td></tr>
<tr><td>65</td><td>vector_printer_2/call_via_cffi.py</td><td>nastavení cest a spuštění Pythonovského skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/call_via_cffi.py">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/call_via_cffi.py</a></td></tr>
<tr><td>66</td><td>vector_printer_2/make_library.sh</td><td>skript pro překlad céčkovské funkce a vytvoření dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/make_library.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/make_library.sh</a></td></tr>
<tr><td>67</td><td>vector_printer_2/clean.sh</td><td>skript pro smazání objektového souboru i dynamicky linkované knihovny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/clean.sh">https://github.com/tisnik/most-popular-python-libs/blob/master/cffi/vector_printer_2/clean.sh</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na Internetu</h2>

<ol>

<li>TIOBE Index for May 2023<br />
<a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a>
</li>

<li>PYPL PopularitY of Programming Language<br />
<a href="https://pypl.github.io/PYPL.html">https://pypl.github.io/PYPL.html</a>
</li>

<li>CFFI documentation<br />
<a href="https://cffi.readthedocs.io/en/latest/">https://cffi.readthedocs.io/en/latest/</a>
</li>

<li>cffi 1.15.1 na PyPi<br />
<a href="https://pypi.org/project/cffi/">https://pypi.org/project/cffi/</a>
</li>

<li>Python Bindings: Calling C or C++ From Python<br />
<a href="https://realpython.com/python-bindings-overview/">https://realpython.com/python-bindings-overview/</a>
</li>

<li>Interfacing with C/C++ Libraries<br />
<a href="https://docs.python-guide.org/scenarios/clibs/">https://docs.python-guide.org/scenarios/clibs/</a>
</li>

<li>Cython, pybind11, cffi – which tool should you choose?<br />
<a href="http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html">http://blog.behnel.de/posts/cython-pybind11-cffi-which-tool-to-choose.html</a>
</li>

<li>Python FFI with ctypes and cffi<br />
<a href="https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi">https://eli.thegreenplace.net/2013/03/09/python-ffi-with-ctypes-and-cffi</a>
</li>

<li>Propojení Go s&nbsp;Pythonem s&nbsp;využitím cgo a ctypes<br />
<a href="https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes/">https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes/</a>
</li>

<li>Propojení Go s&nbsp;Pythonem s&nbsp;využitím cgo a ctypes (2. část)<br />
<a href="https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes-2-cast/">https://www.root.cz/clanky/propojeni-go-s-pythonem-s-vyuzitim-cgo-a-ctypes-2-cast/</a>
</li>

<li>Programovací jazyk Rust: použití FFI pro volání funkcí z&nbsp;nativních knihoven<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven/</a>
</li>

<li>Programovací jazyk Rust: použití FFI při předávání struktur<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pri-predavani-struktur/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pri-predavani-struktur/</a>
</li>

<li>Programovací jazyk Rust: použití FFI pro volání funkcí z&nbsp;nativních knihoven (2. část)<br />
<a href="https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven-2-cast/">https://www.root.cz/clanky/programovaci-jazyk-rust-pouziti-ffi-pro-volani-funkci-z-nativnich-knihoven-2-cast/</a>
</li>

<li>Dynamic-link library<br />
<a href="https://en.wikipedia.org/wiki/Dynamic-link_library">https://en.wikipedia.org/wiki/Dynamic-link_library</a>
</li>

<li>Úvod do jazyka C: Deklarace funkcí<br />
<a href="https://www.fi.muni.cz/usr/jkucera/pb071/sl5.htm">https://www.fi.muni.cz/usr/jkucera/pb071/sl5.htm</a>
</li>

<li>Using standard library headers with CFFI<br />
<a href="https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi">https://stackoverflow.com/questions/57481873/using-standard-library-headers-with-cffi</a>
</li>

<li>Preparing and Distributing modules<br />
<a href="https://cffi.readthedocs.io/en/latest/cdef.html">https://cffi.readthedocs.io/en/latest/cdef.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>

