<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Knihovna Pandas: práce s datovými řadami (series)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Knihovna Pandas: práce s datovými řadami (series)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Knihovna Pandas: práce s&nbsp;datovými řadami (series)</a></p>
<p><a href="#k02">2. Konstrukce datové řady</a></p>
<p><a href="#k03">3. Počet prvků v&nbsp;datové řadě versus specifikace indexů</a></p>
<p><a href="#k04">*** 4. Konstrukce datové řady ze slovníku, vliv pořadí klíčů</a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">11. Vykreslení hodnot prvků z&nbsp;datové řady formou grafu</a></p>
<p><a href="#k12">12. Liniový (spojnicový) graf a graf s&nbsp;vyplněnou plochou pod liniovým grafem</a></p>
<p><a href="#k13">13. Vertikální i horizontální sloupcové grafy</a></p>
<p><a href="#k14">14. Graf s&nbsp;KDE (Kernel density estimation)</a></p>
<p><a href="#k15">15. Koláčový diagram</a></p>
<p><a href="#k16">16. Data obsahující šum</a></p>
<p><a href="#k17">17. Vyhlazení průběhu na grafu</a></p>
<p><a href="#k18">18. Graf s&nbsp;několika průběhy získanými z&nbsp;datové řady, použití podgrafů</a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Knihovna Pandas: práce s&nbsp;datovými řadami (series)</h2>

<table>
<tr><th> #</th><th>Datový typ</th><th>Stručný popis</th></tr>
<tr><td> 1</td><td>Series</td><td>odvozeno od 1D pole knihovny Numpy, rozšířeno o popis os</td></tr>
<tr><td> 2</td><td>DataFrame</td><td>reprezentace dat uložených do tabulky s&nbsp;popisem os (sloupců, řádků)</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 3</td><td>DatetimeTZDtype</td><td>datum s&nbsp;přidanou informací o časové zóně</td></tr>
<tr><td> 4</td><td>PeriodDtype</td><td>reprezentace časové periody (offsetu)</td></tr>
<tr><td> 5</td><td>IntervalDtype</td><td>reprezentace numerického intervalu (odvozeno od dalších typů, například <i>int64</i> atd.)</td></tr>
<tr><td> 6</td><td>Int8Dtype</td><td>typ <strong>int8</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td> 7</td><td>Int16Dtype</td><td>typ <strong>int16</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td> 8</td><td>Int32Dtype</td><td>typ <strong>int32</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td> 9</td><td>Int64Dtype</td><td>typ <strong>int64</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td>10</td><td>UInt8Dtype</td><td>typ <strong>uint8</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td>11</td><td>UInt16Dtype</td><td>typ <strong>uint16</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td>12</td><td>UInt32Dtype</td><td>typ <strong>uint32</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td>13</td><td>UInt64Dtype</td><td>typ <strong>uint64</strong> rozšířený pro podporu hodnoty <strong>pandas.NA</strong></td></tr>
<tr><td>14</td><td>CategoricalDtype</td><td>kategorie (odvozeno od jazyka R, bude popsáno příště)</td></tr>
<tr><td>15</td><td>SparseDtype</td><td>použito pro ukládání řídkých polí (bude popsáno příště)</td></tr>
<tr><td>16</td><td>StringDtype</td><td>rozšíření řetězců; prozatím ve fázi experimentálního rozšíření</td></tr>
<tr><td>17</td><td>BooleanDtype</td><td>rozšíření pravdivostního typu; prozatím ve fázi experimentálního rozšíření</td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Konstrukce datové řady</h2>

<p>Nejprve si ukážeme, jakým způsobem se datové řady vytváří. Nejjednodušší je
situace ve chvíli, kdy jsou hodnoty, které se mají převést na datovou řadu,
připraveny ve formě seznamů nebo n-tic (ve smyslu základních datových typů
programovacího jazyka Python). Z&nbsp;takto připravených hodnot se datová řada
připraví přímočaře, a to konstruktorem <strong>pandas.Series</strong>.
V&nbsp;dalším příkladu předáváme konstruktoru n-tici, proto se používá dvojice
kulatých závorek:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
&nbsp;
s = pandas.Series(<strong>(1, 2, 3, 4, 5, 6)</strong>)
&nbsp;
print("Series:")
print(s)
print()
&nbsp;
print("Index:")
print(s.index)
print()
&nbsp;
print("Values:")
print(s.values)
print()
</pre>

<p>Povšimněte si, že v&nbsp;tomto případě jsou indexy prvků v&nbsp;datové řadě
dopočteny automaticky (první sloupec ve výpisu). Současně se uloží i informace,
že index je tvořen generátorem <strong>RangeIndex</strong>:</p>

<pre>
Series:
0    1
1    2
2    3
3    4
4    5
5    6
dtype: int64
&nbsp;
Index:
RangeIndex(start=0, stop=6, step=1)
&nbsp;
Values:
[1 2 3 4 5 6]
&nbsp;
</pre>

<p>Specifikovat je možné i indexy jednotlivých prvků. Ty se předávají ve druhém
parametru konstruktoru <strong>pandas.Series</strong>:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
&nbsp;
s = pandas.Series(<strong>('a', 'b', 'c', 'd', 'e', 'f')</strong>, <strong>(1, 2, 3, 4, 5, 6)</strong>)
&nbsp;
print("Series:")
print(s)
print()
&nbsp;
print("Index:")
print(s.index)
print()
&nbsp;
print("Values:")
print(s.values)
print()
</pre>

<p>Výsledek bude vypadat takto:</p>

<pre>
Series:
1    a
2    b
3    c
4    d
5    e
6    f
dtype: object
&nbsp;
Index:
Int64Index([1, 2, 3, 4, 5, 6], dtype='int64')
&nbsp;
Values:
['a' 'b' 'c' 'd' 'e' 'f']
&nbsp;
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Počet prvků v&nbsp;datové řadě versus specifikace indexů</h2>

<p>Při konstrukci datové řady je zapotřebí zaručit, že počet prvků bude
odpovídat počtu zadaných indexů (samozřejmě za předpokladu, že indexy
explicitně potřebujeme nastavit). Například následující příklad je plně
funkční, protože počet prvků (1, 2, 3, 4, 5 a 6) přesně odpovídá počtu zadaných
indexů, tedy 'a', 'b', 'c', 'd', 'e' a 'f':</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
&nbsp;
s = pandas.Series(<strong>range(1, 7)</strong>, <strong>('a', 'b', 'c', 'd', 'e', 'f')</strong>)
&nbsp;
print("Series:")
print(s)
print()
&nbsp;
print("Index:")
print(s.index)
print()
&nbsp;
print("Values:")
print(s.values)
print()
</pre>

<p>Výsledek:</p>

<pre>
Series:
a    1
b    2
c    3
d    4
e    5
f    6
dtype: int64
&nbsp;
Index:
Index(['a', 'b', 'c', 'd', 'e', 'f'], dtype='object')
&nbsp;
Values:
[1 2 3 4 5 6]
&nbsp;
</pre>

<p>Naproti tomu další příklad skončí s&nbsp;chybou, protože počet prvků a
indexů si neodpovídá:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
&nbsp;
s = pandas.Series(<strong>range(1, 10)</strong>, <strong>('a', 'b', 'c')</strong>)
&nbsp;
print("Series:")
print(s)
print()
&nbsp;
print("Index:")
print(s.index)
print()
&nbsp;
print("Values:")
print(s.values)
print()
</pre>

<p>Chyba:</p>

<pre>
Traceback (most recent call last):
  File "series_04.py", line 6, in &lt;;module&gt;
    s = pandas.Series(range(1, 10), ('a', 'b', 'c'))
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/core/series.py", line 314, in __init__
    f"Length of passed values is {len(data)}, "
ValueError: Length of passed values is 9, index implies 3.
</pre>

<p>Totéž ovšem platí i naopak, pokud bude počet indexů větší než počet
prvků:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
&nbsp;
s = pandas.Series(<strong>range(1, 3)</strong>, <strong>('a', 'b', 'c', 'd', 'e', 'f', 'g')</strong>)
&nbsp;
&nbsp;
print("Series:")
print(s)
print()
&nbsp;
print("Index:")
print(s.index)
print()
&nbsp;
print("Values:")
print(s.values)
print()
</pre>

<p>S&nbsp;chybou:</p>

<pre>
Traceback (most recent call last):
  File "series_04.py", line 6, in &lt;;module&gt;
    s = pandas.Series(range(1, 3), ('a', 'b', 'c', 'd', 'e', 'f', 'g'))
  File "/home/ptisnovs/.local/lib/python3.6/site-packages/pandas/core/series.py", line 314, in __init__
    f"Length of passed values is {len(data)}, "
ValueError: Length of passed values is 2, index implies 7.
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. Konstrukce datové řady ze slovníku, vliv pořadí klíčů</h2>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
&nbsp;
input_data = {
        "a": 1,
        "b": 2,
        "c": 3,
        "d": 4,
        "e": 5,
        "f": 6,
        }
&nbsp;
print("Input data:")
print(input_data)
print()
&nbsp;
s = pandas.Series(input_data)
&nbsp;
print("Series:")
print(s)
print()
&nbsp;
print("Index:")
print(s.index)
print()
&nbsp;
print("Values:")
print(s.values)
print()
</pre>

<pre>
Input data:
{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
&nbsp;
Series:
a    1
b    2
c    3
d    4
e    5
f    6
dtype: int64
&nbsp;
Index:
Index(['a', 'b', 'c', 'd', 'e', 'f'], dtype='object')
&nbsp;
Values:
[1 2 3 4 5 6]
&nbsp;
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
&nbsp;
input_data = {
        "f": 6,
        "e": 5,
        "d": 4,
        "c": 3,
        "b": 2,
        "a": 1,
        }
&nbsp;
print("Input data:")
print(input_data)
print()
&nbsp;
s = pandas.Series(input_data)
&nbsp;
print("Series:")
print(s)
print()
&nbsp;
print("Index:")
print(s.index)
print()
&nbsp;
print("Values:")
print(s.values)
print()
</pre>

<pre>
Input data:
{'f': 6, 'e': 5, 'd': 4, 'c': 3, 'b': 2, 'a': 1}
&nbsp;
Series:
f    6
e    5
d    4
c    3
b    2
a    1
dtype: int64
&nbsp;
Index:
Index(['f', 'e', 'd', 'c', 'b', 'a'], dtype='object')
&nbsp;
Values:
[6 5 4 3 2 1]
&nbsp;
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
from collections import OrderedDict
&nbsp;
input_data = OrderedDict()
&nbsp;
input_data["f"] = 6
input_data["e"] = 5
input_data["d"] = 4
input_data["c"] = 3
input_data["b"] = 2
input_data["a"] = 1
&nbsp;
print("Input data:")
print(input_data)
print()
&nbsp;
s = pandas.Series(input_data)
&nbsp;
print("Series:")
print(s)
print()
&nbsp;
print("Index:")
print(s.index)
print()
&nbsp;
print("Values:")
print(s.values)
print()
</pre>

<pre>
Input data:
OrderedDict([('f', 6), ('e', 5), ('d', 4), ('c', 3), ('b', 2), ('a', 1)])
&nbsp;
Series:
f    6
e    5
d    4
c    3
b    2
a    1
dtype: int64
&nbsp;
Index:
Index(['f', 'e', 'd', 'c', 'b', 'a'], dtype='object')
&nbsp;
Values:
[6 5 4 3 2 1]
&nbsp;
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
&nbsp;
s = pandas.Series(range(1, 7), ('a', 'b', 'c', 'd', 'e', 'f'))
&nbsp;
print("Series:")
print(s)
print()
&nbsp;
print("Index:")
print(s.index)
print()
&nbsp;
print("Values:")
print(s.values)
print()
&nbsp;
s = s.reindex(['d', 'a', 'b', 'c', 'd', 'a', 'a', 'a'])
&nbsp;
print("Reindexed:")
print()
&nbsp;
print("Series:")
print(s)
print()
&nbsp;
print("Index:")
print(s.index)
print()
&nbsp;
print("Values:")
print(s.values)
print()
</pre>

<pre>
Series:
a    1
b    2
c    3
d    4
e    5
f    6
dtype: int64
&nbsp;
Index:
Index(['a', 'b', 'c', 'd', 'e', 'f'], dtype='object')
&nbsp;
Values:
[1 2 3 4 5 6]
&nbsp;
Reindexed:
&nbsp;
Series:
d    4
a    1
b    2
c    3
d    4
a    1
a    1
a    1
dtype: int64
&nbsp;
Index:
Index(['d', 'a', 'b', 'c', 'd', 'a', 'a', 'a'], dtype='object')
&nbsp;
Values:
[4 1 2 3 4 1 1 1]
&nbsp;
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
&nbsp;
s = pandas.Series(range(1, 7), ('a', 'b', 'c', 'd', 'e', 'f'))
&nbsp;
print("sum", s.sum(), sep="\t")
print("prod", s.prod(), sep="\t")
print("min", s.min(), sep="\t")
print("max", s.max(), sep="\t")
print("median", s.median(), sep="\t")
print("std", s.std(), sep="\t")
print("var" ,s.var(), sep="\t")
print("quantile", s.quantile(0.01), sep="\t")
</pre>

<pre>
sum             21
prod            720
min             1
max             6
median          3.5
std             1.8708286933869707
var             3.5
quantile        1.05
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
&nbsp;
s1 = pandas.Series(range(1, 7), ('a', 'b', 'c', 'd', 'e', 'f'))
&nbsp;
print(s1 + 10)
print(s1 - 10)
print(s1 * 10)
print(s1 / 10)
&nbsp;
print(s1 % 2)
</pre>

<pre>
a    11
b    12
c    13
d    14
e    15
f    16
dtype: int64
a   -9
b   -8
c   -7
d   -6
e   -5
f   -4
dtype: int64
a    10
b    20
c    30
d    40
e    50
f    60
dtype: int64
a    0.1
b    0.2
c    0.3
d    0.4
e    0.5
f    0.6
dtype: float64
a    1
b    0
c    1
d    0
e    1
f    0
dtype: int64
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>

import numpy as np
import pandas

s1 = pandas.Series(range(1, 7), ('a', 'b', 'c', 'd', 'e', 'f'))

print(s1 > 3)
print(s1 < 3)
print(s1 % 2 == 0)
</pre>

<pre>
a    False
b    False
c    False
d     True
e     True
f     True
dtype: bool
a     True
b     True
c    False
d    False
e    False
f    False
dtype: bool
a    False
b     True
c    False
d     True
e    False
f     True
dtype: bool
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
&nbsp;
s1 = pandas.Series(range(1, 7))
s2 = pandas.Series(np.repeat(100, 6))
&nbsp;
print(s1 + s2)
print(s1 - s2)
print(s1 * s2)
print(s1 / s2)
print(s1 > s2)
print(s1 < s2)
</pre>

<pre>
0    101
1    102
2    103
3    104
4    105
5    106
dtype: int64
0   -99
1   -98
2   -97
3   -96
4   -95
5   -94
dtype: int64
0    100
1    200
2    300
3    400
4    500
5    600
dtype: int64
0    0.01
1    0.02
2    0.03
3    0.04
4    0.05
5    0.06
dtype: float64
0    False
1    False
2    False
3    False
4    False
5    False
dtype: bool
0    True
1    True
2    True
3    True
4    True
5    True
dtype: bool
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
&nbsp;
s1 = pandas.Series(range(1, 7))
s2 = pandas.Series(range(50))
&nbsp;
print(s1[s1<3])
print(s1[s1>3])
&nbsp;
print(s2[s2 % 2 == 0])
print(s2[s2 % 2 != 0])
&nbsp;
print(s2[s2 % 3 == 0])
</pre>

<pre>
0    1
1    2
dtype: int64
3    4
4    5
5    6
dtype: int64
0      0
2      2
4      4
6      6
8      8
10    10
12    12
14    14
16    16
18    18
20    20
22    22
24    24
26    26
28    28
30    30
32    32
34    34
36    36
38    38
40    40
42    42
44    44
46    46
48    48
dtype: int64
1      1
3      3
5      5
7      7
9      9
11    11
13    13
15    15
17    17
19    19
21    21
23    23
25    25
27    27
29    29
31    31
33    33
35    35
37    37
39    39
41    41
43    43
45    45
47    47
49    49
dtype: int64
0      0
3      3
6      6
9      9
12    12
15    15
18    18
21    21
24    24
27    27
30    30
33    33
36    36
39    39
42    42
45    45
48    48
dtype: int64
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
&nbsp;
s1 = pandas.Series(range(1, 7))
s2 = pandas.Series(range(-3, 3))
&nbsp;
print(s1[s2 >= 0])
print(s1[s2 < 0])
print(s1[s2 != 0])
</pre>

<pre>
3    4
4    5
5    6
dtype: int64
0    1
1    2
2    3
dtype: int64
0    1
1    2
2    3
4    5
5    6
dtype: int64
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
&nbsp;
s = pandas.Series((100, 200, 300, 400, 500, 600))
print(s.dtypes)
print(s)
print()
&nbsp;
s = s.astype('int32')
print(s.dtypes)
print(s)
print()
&nbsp;
s =s.astype('int8')
print(s.dtypes)
print(s)
</pre>

<pre>
int64
0    100
1    200
2    300
3    400
4    500
5    600
dtype: int64
&nbsp;
int32
0    100
1    200
2    300
3    400
4    500
5    600
dtype: int32
&nbsp;
int8
0    100
1    -56
2     44
3   -112
4    -12
5     88
dtype: int8
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
&nbsp;
s = pandas.Series((100, 200, 300, 400, 500, 600), dtype="float32")
print(s.dtypes)
print(s)
print()
&nbsp;
s = s.convert_dtypes()
print(s.dtypes)
print(s)
print()
</pre>

<pre>
float32
0    100.0
1    200.0
2    300.0
3    400.0
4    500.0
5    600.0
dtype: float32
&nbsp;
Int64
0    100
1    200
2    300
3    400
4    500
5    600
dtype: Int64
&nbsp;
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
&nbsp;
s = pandas.Series((100, 200, 300, 400, 500, 600), dtype="O")
print(s.dtypes)
print(s)
print()
&nbsp;
s = s.convert_dtypes()
print(s.dtypes)
print(s)
print()
</pre>

<pre>
object
0    100
1    200
2    300
3    400
4    500
5    600
dtype: object
&nbsp;
Int64
0    100
1    200
2    300
3    400
4    500
5    600
dtype: Int64
&nbsp;
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
&nbsp;
s = pandas.Series((100, 200, 300, None, 400, 500, 600))
print(s.dtypes)
print(s)
print()
&nbsp;
s = s.convert_dtypes()
print(s.dtypes)
print(s)
print()
</pre>

<pre>
float64
0    100.0
1    200.0
2    300.0
3      NaN
4    400.0
5    500.0
6    600.0
dtype: float64
&nbsp;
Int64
0     100
1     200
2     300
3    <NA>
4     400
5     500
6     600
dtype: Int64
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
&nbsp;
s = pandas.Series((100.1, 200, 300, None, 400, 500, 600))
print(s.dtypes)
print(s)
print()
&nbsp;
s = s.convert_dtypes()
print(s.dtypes)
print(s)
print()
</pre>

<pre>
float64
0    100.1
1    200.0
2    300.0
3      NaN
4    400.0
5    500.0
6    600.0
dtype: float64
&nbsp;
float64
0    100.1
1    200.0
2    300.0
3      NaN
4    400.0
5    500.0
6    600.0
dtype: float64
</pre>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import pandas
import numpy
&nbsp;
s = pandas.Series((100, 200, 300, numpy.nan, 400, 500, 600))
print(s.dtypes)
print(s)
print()
&nbsp;
s = s.convert_dtypes()
print(s.dtypes)
print(s)
print()
</pre>

<pre>
float64
0    100.0
1    200.0
2    300.0
3      NaN
4    400.0
5    500.0
6    600.0
dtype: float64
&nbsp;
Int64
0     100
1     200
2     300
3    <NA>
4     400
5     500
6     600
dtype: Int64
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. Vykreslení hodnot prvků z&nbsp;datové řady formou grafu</h2>

<p>Již <a
href="https://www.root.cz/clanky/knihovna-pandas-zobrazeni-obsahu-datovych-ramcu-vykresleni-grafu-a-validace-dat/#k06">v&nbsp;předchozím
článku</a> jsme se zabývali popisem vykreslení grafů z&nbsp;hodnot uložených
v&nbsp;datovém rámci. Grafy je ovšem možné vytvářet i z&nbsp;běžné datové řady,
a to podobným způsobem &ndash; primárně s&nbsp;využitím knihovny
<i>Matplotlib</i>. U každé datové řady jsou k&nbsp;dispozici následující metody
sloužící k&nbsp;vykreslení grafů:</p>

<table>
<tr><th> #</th><th>Metoda</th><th>Stručný popis</th></tr>
<tr><td> 1</td><td>pandas.Series.plot</td><td>graf vybraný parametrem <strong>kind</strong></td></tr>
<tr><td> 2</td><td>pandas.Series.plot.area</td><td>oblast pod průběhem je vyplněna barvou (pro kladné hodnoty)</td></tr>
<tr><td> 3</td><td>pandas.Series.plot.bar</td><td>sloupcový graf s&nbsp;vertikálně orientovanými sloupci</td></tr>
<tr><td> 4</td><td>pandas.Series.plot.barh</td><td>sloupcový graf s&nbsp;horizontálně orientovanými sloupci</td></tr>
<tr><td> 5</td><td>pandas.Series.plot.box</td><td>krabicový diagram</td></tr>
<tr><td> 6</td><td>pandas.Series.plot.density</td><td>diagram založený na <a href="https://en.wikipedia.org/wiki/Kernel_density_estimation">KDE</a></td></tr>
<tr><td> 7</td><td>pandas.Series.plot.hist</td><td>histogram (bude použit příště)</td></tr>
<tr><td> 8</td><td>pandas.Series.plot.kde</td><td>diagram založený na <a href="https://en.wikipedia.org/wiki/Kernel_density_estimation">KDE</a></td></tr>
<tr><td> 9</td><td>pandas.Series.plot.line</td><td>stejné jako <strong>pandas.Series.plot</strong></td></tr>
<tr><td>10</td><td>pandas.Series.plot.pie</td><td>koláčový diagram</td></tr>
<tr><td>11</td><td>pandas.Series.hist</td><td>histogram (bude použit příště)</td></tr>
</table>

<p>V&nbsp;navazujících kapitolách si některé z&nbsp;těchto grafů ukážeme.</p>

<p><div class="rs-tip-major">Poznámka: jedním z&nbsp;důvodů, proč je vykreslení
grafu z&nbsp;datové řady užitečné, je korektní práce s&nbsp;hodnotami
<strong>NA</strong> a taktéž unifikovaný přístup k&nbsp;celé problematice
v&nbsp;rámci celé knihovny <i>Pandas</i>.</div></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Liniový (spojnicový) graf a graf s&nbsp;vyplněnou plochou pod liniovým grafem</h2>

<p>Prvním typem grafu, s&nbsp;nímž se v&nbsp;dnešním článku seznámíme, je
takzvaný spojnicový či liniový graf. Ten se poměrně často využívá například ve
finančnictví (kde bývá různě upravován do svíčkového grafu atd). Vytvoření
takového grafu z&nbsp;datové řady je většinou triviální, což je ostatně ukázáno
i v&nbsp;dalším demonstračním příkladu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
r = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># konstrukce struktury Series - datové řady</i>
s = pandas.Series(data=np.sin(r), index=r)
&nbsp;
<i># tisk obsahu Series</i>
print(s)
&nbsp;
<i># vytvoření grafu</i>
<strong>s.plot()</strong>
&nbsp;
<i># uložení grafu</i>
plt.savefig("series_plot_01.png")
&nbsp;
<i># vykreslení grafu</i>
plt.show()
</pre>

<p><div class="rs-tip-major">Poznámka: proměnná <strong>r</strong> slouží jak
ke specifikaci indexů, tak i vstupních hodnot pro výpočet sinusovky.</div></p>

<p>Výsledný graf by měl vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/555/pandas3-1.png" class="image-439501" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 1: Jednoduchý liniový graf.</i></p>

<p>Vytvořit je možné i graf s&nbsp;vyplněnou plochou pod liniovým grafem (nebo
nad liniovým grafem pro záporné hodnoty). V&nbsp;tomto případě je možné využít
(resp.&nbsp;spíše zneužít) metodu <strong>pandas.Series.plot.area</strong> tak,
jak je ukázáno v&nbsp;dalším demonstračním příkladu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
r = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># konstrukce struktury Series - datové řady</i>
s = pandas.Series(data=np.sin(r), index=r)
&nbsp;
<i># tisk obsahu Series</i>
print(s)
&nbsp;
<i># vytvoření grafu</i>
<strong>s.plot.area(stacked=False)</strong>
&nbsp;
<i># uložení grafu</i>
plt.savefig("series_plot_02.png")
&nbsp;
<i># vykreslení grafu</i>
plt.show()
</pre>

<p><div class="rs-tip-major">Poznámka: parametr <strong>stacked</strong> by měl
být v&nbsp;tomto případě explicitně nastaven na
<strong>False</strong>.</div></p>

<img src="https://i.iinfo.cz/images/555/pandas3-2.png" class="image-439502" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 2: Graf s&nbsp;vyplněnou plochou pod liniovým grafem.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Vertikální i horizontální sloupcové grafy</h2>

<p>Jedním z&nbsp;nejjednodušších typů grafů podporovaných Pandasem je sloupcový
graf, který může být podle konkrétních požadavků orientován jak horizontálně
tak i vertikálně. Tento typ grafu se vytváří zavoláním metody
<strong>pandas.Series.plot.bar</strong> popř.
<strong>pandas.Series.plot.barh</strong>. Podívejme se nyní na jednoduchý
příklad vertikálního sloupcového grafu:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
r = np.linspace(0, 2*np.pi, 20)
&nbsp;
<i># konstrukce struktury Series - datové řady</i>
s = pandas.Series(data=np.sin(r), index=r)
&nbsp;
<i># tisk obsahu Series</i>
print(s)
&nbsp;
<i># vytvoření grafu</i>
<strong>s.plot.bar(grid=True)</strong>
&nbsp;
<i># uložení grafu</i>
plt.savefig("series_plot_03.png")
&nbsp;
<i># vykreslení grafu</i>
plt.show()
</pre>

<img src="https://i.iinfo.cz/images/555/pandas3-3.png" class="image-439503" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 3: Vertikální sloupcový graf.</i></p>

<p>Horizontální sloupcový graf, v&nbsp;němž jsou sloupce vodorovné, se ze
vstupních dat vykreslí takto:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
r = np.linspace(0, 2*np.pi, 20)
&nbsp;
<i># konstrukce struktury Series - datové řady</i>
s = pandas.Series(data=np.sin(r), index=r)
&nbsp;
<i># tisk obsahu Series</i>
print(s)
&nbsp;
<i># vytvoření grafu</i>
s.plot.barh(grid=True)
&nbsp;
<i># uložení grafu</i>
plt.savefig("series_plot_04.png")
&nbsp;
<i># vykreslení grafu</i>
plt.show()
</pre>

<img src="https://i.iinfo.cz/images/555/pandas3-4.png" class="image-439504" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 4: Horizontální sloupcový graf.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Graf s&nbsp;KDE (Kernel density estimation)</h2>

<p>V&nbsp;knihovně Pandas nalezneme i metodu nazvanou
<strong>pandas.Series.plot.kde</strong>, která slouží pro vykreslení
zobecněného histogramu s&nbsp;využitím KDE neboli <a
href="https://en.wikipedia.org/wiki/Kernel_density_estimation">Kernel density
estimation</a>. Narozdíl od histogramu umožňuje KDE lépe popsat skutečné
chování dat, kterých se předpokládá, že tvoří spojitou funkci:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
r = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># konstrukce struktury Series - datové řady</i>
s = pandas.Series(data=np.sin(r), index=r)
&nbsp;
<i># tisk obsahu Series</i>
print(s)
&nbsp;
<i># vytvoření grafu</i>
s.plot.kde(grid=True)
&nbsp;
<i># uložení grafu</i>
plt.savefig("series_plot_05.png")
&nbsp;
<i># vykreslení grafu</i>
plt.show()
</pre>

<img src="https://i.iinfo.cz/images/555/pandas3-5.png" class="image-439505" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 5: Graf s&nbsp;KDE (Kernel density estimation).</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Koláčový diagram</h2>

<p>Dalším typem grafu, s&nbsp;nímž se v&nbsp;dnešním článku seznámíme, jsou
takzvané koláčové grafy, které již každý čtenář zcela jistě viděl. Tyto typy
grafů se používají v&nbsp;případě, že nás nezajímají absolutní hodnoty, ale
hodnoty relativní, konkrétně vzájemné poměry. I tyto grafy je možné
v&nbsp;případě datových řad využít a jejich výhodou je, že v&nbsp;implicitním
nastavení jsou vykresleny ve 2D tvaru (protože trojrozměrné koláčové diagramy
jsou z&nbsp;hlediska přehlednosti i poměrů vykreslených hodnot prakticky to
vůbec nejhorší možné řešení &ndash; možná právě proto se s&nbsp;nimi tak často
setkáme, pravděpodobně nejvíce ve chvíli, kdy nás mají tyto diagramy za úkol
zmást).</p>

<p>Budeme vykreslovat datovou řadu získanou z&nbsp;tohoto souboru:</p>

<pre>
Sep 2020  Sep 2019  Change    Language           Ratings   Changep
1         2         change    C                  15.95     +0.74
2         1         change    Java               13.48     -3.18
3         3                   Python             10.47     +0.59
4         4                   C++                7.11      +1.48
5         5                   C#                 4.58      +1.18
6         6                   Visual Basic       4.12      +0.83
7         7                   JavaScript         2.54      +0.41
8         9         change    PHP                2.49      +0.62
9         19        change    R                  2.37      +1.33
10        8         change    SQL                1.76      -0.19
11        14        change    Go                 1.46      +0.24
12        16        change    Swift              1.38      +0.28
13        20        change    Perl               1.30      +0.26
14        12        change    Assembly language  1.30      -0.08
15        15                  Ruby               1.24      +0.03
16        18        change    MATLAB             1.10      +0.04
17        11        change    Groovy             0.99      -0.52
18        33        change    Rust               0.92      +0.55
19        10        change    Objective-C        0.85      -0.99
20        24        change    Dart               0.77      +0.13
</pre>

<p>Z&nbsp;tohoto souboru získáme sloupec <strong>Ratings</strong>
s&nbsp;hodnotami datové řady a sloupec <strong>Language</strong> bude sloužit
namísto indexů:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
import matplotlib.pyplot as plt
&nbsp;
<i># přečtení zdrojových dat</i>
df = pandas.read_csv("tiobe.tsv", sep="\t")
&nbsp;
<i># specifikace indexu - má se získat ze sloupce Language</i>
df.set_index("Language", inplace=True)
&nbsp;
<i># pro jistotu si datový rámec zobrazíme</i>
print(df)
&nbsp;
<i># konstrukce struktury Series - datové řady z datového rámce</i>
s = pandas.Series(df["Ratings"])
&nbsp;
<i># tisk obsahu Series</i>
print(s)
&nbsp;
<i># vytvoření grafu</i>
s.plot.pie()
&nbsp;
<i># uložení grafu</i>
plt.savefig("series_plot_06.png")
&nbsp;
<i># vykreslení grafu</i>
plt.show()
</pre>

<img src="https://i.iinfo.cz/images/555/pandas3-6.png" class="image-439506" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 6: Koláčový graf vykreslený předchozím demonstračním
příkladem.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Data obsahující šum</h2>

<p>Data ukládaná do datových řad nebo datových rámců obsahují mnohdy i určitý
šum. Ten si můžeme &ndash; prozatím velmi primitivním způsobem &ndash;
nasimulovat například pomocí metody <strong>pandas.Series.map</strong>, která
ovlivní každý prvek datové řady:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
r = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># konstrukce struktury Series - datové řady</i>
s = pandas.Series(data=np.sin(r), index=r)
&nbsp;
<i># přidání šumu</i>
<strong>s2 = s.map(lambda x: x+np.random.rand()/2)</strong>
&nbsp;
<i># tisk obsahu Series</i>
print(s2)
&nbsp;
<i># vytvoření grafu</i>
s2.plot(grid=True)
&nbsp;
<i># uložení grafu</i>
plt.savefig("series_plot_07.png")
&nbsp;
<i># vykreslení grafu</i>
plt.show()
</pre>

<p>Tento příklad sice ukazuje použití <strong>map</strong>, ovšem rychlejší
bude &bdquo;vektorový&ldquo; přístup. Zde se ukazuje možnost vektorového součtu
datové řady a pole v&nbsp;Numpy:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
r = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># konstrukce datové struktury Series</i>
s = pandas.Series(data=np.sin(r), index=r)
&nbsp;
<i># šum</i>
s2 = np.random.rand(100)/2
&nbsp;
<i># přidání šumu k původní řadě</i>
s3 = s + s2
&nbsp;
<i># tisk obsahu Series</i>
print(s3)
&nbsp;
<i># vytvoření grafu</i>
s3.plot(grid=True)
&nbsp;
<i># uložení grafu</i>
plt.savefig("series_plot_07_B.png")
&nbsp;
<i># vykreslení grafu</i>
plt.show()
</pre>

<p>Po spuštění tohoto příkladu by se měl zobrazit následující graf:</p>

<img src="https://i.iinfo.cz/images/555/pandas3-7.png" class="image-439507" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 7: Zašuměná data.</i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Vyhlazení průběhu na grafu</h2>

<p>V&nbsp;této kapitole si ve stručnosti popíšeme, jak lze vyhladit průběh
zobrazený na grafu. Nejdříve si připravíme novou datovou řadu, která sice
vychází z&nbsp;původní sinusovky, ale přidává do ní šum. Následně
s&nbsp;využitím posuvného okna (<strong>rolling</strong>) průběh vyhladíme,
přičemž se pro vyhlazení (jednoduchý <i>moving average</i>) použije okno široké
dva vzorky:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
r = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># konstrukce struktury Series - datové řady</i>
s = pandas.Series(data=np.sin(r), index=r)
&nbsp;
<i># přidání šumu</i>
s2 = s.map(lambda x: x+np.random.rand()/2)
&nbsp;
<i># vyhlazení (moving average)</i>
<strong>s3 = s2.rolling(2).mean()</strong>
&nbsp;
<i># tisk obsahu Series</i>
print(s3)
&nbsp;
<i># vytvoření grafu</i>
s3.plot(grid=True)
&nbsp;
<i># uložení grafu</i>
plt.savefig("series_plot_08.png")
&nbsp;
<i># vykreslení grafu</i>
plt.show()
</pre>

<img src="https://i.iinfo.cz/images/555/pandas3-8.png" class="image-439508" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 8: Částečné vyhlazení původně zašuměných dat.</i></p>

<p>Oblast, ze které se berou vzorky pro vyhlazení, ovšem může být i širší,
například dvacet vzorků:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
r = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># konstrukce struktury Series - datové řady</i>
s = pandas.Series(data=np.sin(r), index=r)
&nbsp;
<i># přidání šumu</i>
s2 = s.map(lambda x: x+np.random.rand()/2)
&nbsp;
<i># vyhlazení (moving average)</i>
<strong>s3 = s2.rolling(20).mean()</strong>
&nbsp;
<i># tisk obsahu Series</i>
print(s3)
&nbsp;
<i># vytvoření grafu</i>
s3.plot(grid=True)
&nbsp;
<i># uložení grafu</i>
plt.savefig("series_plot_09.png")
&nbsp;
<i># vykreslení grafu</i>
plt.show()
</pre>

<img src="https://i.iinfo.cz/images/555/pandas3-9.png" class="image-439509" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 9: Vyhlazení zašuměných dat s&nbsp;využitím širší oblasti.</i></p>

<p>A konečně je možné využít i další metody vyhlazení, například
s&nbsp;váhováním vzorků založeným na slavné Gaussově funkci:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
r = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># konstrukce struktury Series - datové řady</i>
s = pandas.Series(data=np.sin(r), index=r)
&nbsp;
s2 = s.map(lambda x: x+np.random.rand()/2)
&nbsp;
<strong>s3 = s2.rolling(10, win_type="gaussian").sum(std=3)</strong>
&nbsp;
<i># tisk obsahu Series</i>
print(s3)
&nbsp;
<i># vytvoření grafu</i>
s3.plot(grid=True)
&nbsp;
<i># uložení grafu</i>
plt.savefig("series_plot_10.png")
&nbsp;
<i># vykreslení grafu</i>
plt.show()
</pre>

<p>Výsledek bude vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/555/pandas3-10.png" class="image-439510" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 10: Použití Gaussovy funkce pro výpočet vah vzorků při
vyhlazování.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Graf s&nbsp;několika průběhy získanými z&nbsp;datové řady, použití podgrafů</h2>

<p>Často se setkáme s&nbsp;požadavkem zobrazit do jednoho grafu průběhy získané
z&nbsp;několika datových řad. V&nbsp;takových případech už není možné použít
nějakou metodu <strong>pandas.Series.plot.xxx</strong>, ale budeme muset
zkombinovat možnosti knihoven <i>Pandas</i> i <i>Matplotlib</i>. To je ukázáno
v&nbsp;následujícím demonstračním příkladu, v&nbsp;němž jsou nejdříve vytvořeny
tři datové řady <strong>s</strong>, <strong>s2</strong> a <strong>s3</strong> a
následně jsou všechny tyto řady vykresleny funkcí
<strong>matplotlib.pyplot.plot</strong> (ony řetězce &bdquo;--&ldquo; a
&bdquo;-&ldquo; popisují styl vykreslení):</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
r = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># konstrukce struktury Series - datové řady</i>
s = pandas.Series(data=np.sin(r), index=r)
&nbsp;
s2 = s.map(lambda x: x+np.random.rand()/2)
&nbsp;
s3 = s2 - s
&nbsp;
<i># vytvoření grafu</i>
plt.plot(s, "--", s2, "-", s3, "-")
&nbsp;
<i># uložení grafu</i>
plt.savefig("series_plot_11.png")
&nbsp;
<i># vykreslení grafu</i>
plt.show()
</pre>

<p>S&nbsp;výsledkem:</p>

<img src="https://i.iinfo.cz/images/555/pandas3-11.png" class="image-439511" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 11: Graf se třemi průběhy; hodnoty byly získány ze tří datových
řad.</i></p>

<p>Druhý požadavek vychází z&nbsp;potřeby zobrazit na jednu plochu více grafů.
V&nbsp;tomto případě se někdy mluví o podgrafech, což však v&nbsp;daném
kontextu nemá matematický význam. V&nbsp;dnešním posledním demonstračním
příkladu je ukázáno, jak se na ploše pro zobrazení grafu vytvoří místo pro
čtyři podgrafy, které se následně využije. Hodnota &bdquo;221&ldquo; znamená
&bdquo;mřížka o rozměrech 2&times;2 buňky, první buňka v&nbsp;této
mřížce&ldquo;:</p>

<pre>
<i>#!/usr/bin/env python3</i>
<i># vim: set fileencoding=utf-8</i>
&nbsp;
import numpy as np
import pandas
import matplotlib.pyplot as plt
&nbsp;
<i># hodnoty na x-ové ose</i>
r = np.linspace(0, 2*np.pi, 100)
&nbsp;
<i># konstrukce struktury Series - datové řady</i>
s = pandas.Series(data=np.sin(r), index=r)
&nbsp;
s2 = s.map(lambda x: x+np.random.rand()/2)
&nbsp;
s3 = s2 - s
&nbsp;
<i># vytvoření grafu</i>
plt.subplot(221)
plt.plot(s)
&nbsp;
plt.subplot(222)
plt.plot(s2)
&nbsp;
plt.subplot(223)
plt.plot(s3)
&nbsp;
<i># uložení grafu</i>
plt.savefig("series_plot_12.png")
&nbsp;
<i># vykreslení grafu</i>
plt.show()
</pre>

<p>S&nbsp;výsledkem:</p>

<img src="https://i.iinfo.cz/images/555/pandas3-12.png" class="image-439512" alt="&#160;" width="640" height="480" />
<p><i>Obrázek 12: Tři grafy (podgrafy) vykreslené na jedinou společnou
plochu.</i></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
Python 3 a nejnovější stabilní verzi knihovny Pandas byly uloženy do Git
repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>data_frame_info_1.py</td><td>výpis obsahu datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_1.py</a></td></tr>
<tr><td> 2</td><td>data_frame_info_2.py</td><td>výpis prvních pěti řádků z&nbsp;datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_2.py</a></td></tr>
<tr><td> 3</td><td>data_frame_info_3.py</td><td>výpis informace o typech sloupců v&nbsp;datovém rámci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_3.py</a></td></tr>
<tr><td> 4</td><td>data_frame_info_4.py</td><td>výpis uspořádaného seznamu jmen všech sloupců</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_4.py</a></td></tr>
<tr><td> 5</td><td>data_frame_info_5.py</td><td>podrobnější informace o datovém rámci, obsazení paměti atd.</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_5.py</a></td></tr>
<tr><td> 6</td><td>data_frame_info_6.py</td><td>podrobnější informace o datovém rámci, obsazení paměti atd.</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_6.py</a></td></tr>
<tr><td> 7</td><td>data_frame_info_7.py</td><td>popis os, počtu dimenzí, tvaru a velikosti datového rámce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_7.py</a></td></tr>
<tr><td> 8</td><td>data_frame_info_8.py</td><td>základní statistické informace o datech uložených v&nbsp;rámci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_8.py</a></td></tr>
<tr><td> 9</td><td>data_frame_info_9.py</td><td>výsledkem metody <strong>info</strong> je nový datový rámec</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/data_frame_info_9.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>10</td><td>plot_kafka_lags.py</td><td>zobrazení jednoduchého grafu bez použití knihovny Pandas</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags.py</a></td></tr>
<tr><td>11</td><td>plot_kafka_lags_pandas.py</td><td>zobrazení jednoduchého grafu s&nbsp;použitím knihovny Pandas</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas.py</a></td></tr>
<tr><td>12</td><td>plot_kafka_lags_pandas_2.py</td><td>snazší způsob vykreslení grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_2.py</a></td></tr>
<tr><td>13</td><td>plot_kafka_lags_pandas_sma_3.py</td><td>přidání klouzavého průměru do grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_sma_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_sma_3.py</a></td></tr>
<tr><td>14</td><td>plot_kafka_lags_pandas_sma_3_.py</td><td>vylepšení předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_sma_3_.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_sma_3_.py</a></td></tr>
<tr><td>15</td><td>plot_kafka_lags_pandas_sma_10.py</td><td>klouzavý průměr přes deset hodnot</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_sma_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_kafka_lags_pandas_sma_10.py</a></td></tr>
<tr><td>16</td><td>plot_benchmark_results_line_chart.py</td><td>liniový graf</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_line_chart.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_line_chart.py</a></td></tr>
<tr><td>17</td><td>plot_benchmark_results_bar_chart_1.py</td><td>sloupcový graf</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_bar_chart_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_bar_chart_1.py</a></td></tr>
<tr><td>18</td><td>plot_benchmark_results_bar_chart_2.py</td><td>výběr části datového rámce při vykreslování grafu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_bar_chart_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_bar_chart_2.py</a></td></tr>
<tr><td>19</td><td>plot_benchmark_results_bar_chart_3.py</td><td>zobecnění předchozího příkladu &ndash; zpracování numerických dat ve všech sloupcích</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_bar_chart_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_benchmark_results_bar_chart_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>20</td><td>check_types_1.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_1.py</a></td></tr>
<tr><td>21</td><td>check_types_2.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_2.py</a></td></tr>
<tr><td>22</td><td>check_types_3.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_3.py</a></td></tr>
<tr><td>23</td><td>check_types_4.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_4.py</a></td></tr>
<tr><td>24</td><td>check_types_5.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>Voluptuous</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/check_types_5.py</a></td></tr>
<tr><td>25</td><td>opulent_pandas_1.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>opulent-pandas</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_1.py</a></td></tr>
<tr><td>26</td><td>opulent_pandas_2.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>opulent-pandas</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_2.py</a></td></tr>
<tr><td>27</td><td>opulent_pandas_3.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>opulent-pandas</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_3.py</a></td></tr>
<tr><td>28</td><td>opulent_pandas_4.py</td><td>kontrola typů sloupců s&nbsp;využitím knihovny <i>opulent-pandas</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/opulent_pandas_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>29</td><td>series_01.py</td><td>konstrukce datové řady z n-tice<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_01.py</a></td></tr>
<tr><td>30</td><td>series_02.py</td><td>konstrukce datové řady z n-tice, specifikace indexů<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_02.py</a></td></tr>
<tr><td>31</td><td>series_03.py</td><td>konstrukce datové řady generátorem, specifikace indexů<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_03.py</a></td></tr>
<tr><td>32</td><td>series_04.py</td><td>příliš malý počet indexů předaných konstruktoru<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_04.py</a></td></tr>
<tr><td>33</td><td>series_05.py</td><td>konstrukce datové řady ze slovníku<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_05.py</a></td></tr>
<tr><td>34</td><td>series_06.py</td><td>konstrukce datové řady ze slovníku, vliv pořadí klíčů<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_06.py</a></td></tr>
<tr><td>35</td><td>series_07.py</td><td>konstrukce datové řady z&nbsp;datového typu OrderedDict<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_07.py</a></td></tr>
<tr><td>36</td><td>series_08.py</td><td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_08.py</a></td></tr>
<tr><td>37</td><td>series_09.py</td><td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_09.py</a></td></tr>
<tr><td>38</td><td>series_10.py</td><td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_10.py</a></td></tr>
<tr><td>39</td><td>series_11.py</td><td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_11.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_11.py</a></td></tr>
<tr><td>40</td><td>series_12.py</td><td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_12.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_12.py</a></td></tr>
<tr><td>41</td><td>series_13.py</td><td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_13.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_13.py</a></td></tr>
<tr><td>42</td><td>series_14.py</td><td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_14.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_14.py</a></td></tr>
<tr><td>43</td><td>series_15.py</td><td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_15.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_15.py</a></td></tr>
<tr><td>44</td><td>series_16.py</td><td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_16.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_16.py</a></td></tr>
<tr><td>45</td><td>series_17.py</td><td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_17.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_17.py</a></td></tr>
<tr><td>46</td><td>series_18.py</td><td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_18.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_18.py</a></td></tr>
<tr><td>47</td><td>series_19.py</td><td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_19.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_19.py</a></td></tr>
<tr><td>48</td><td>series_20.py</td><td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_20.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/series_20.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>49</td><td>plot_series_01.py</td><td>vykreslení průběhu funkce sin, hodnoty jsou uloženy v&nbsp;datové řadě<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_01.py</a></td></tr>
<tr><td>50</td><td>plot_series_02.py</td><td>odlišný typ grafu s&nbsp;vyplněnou plochou pod průběhem funkce<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_02.py</a></td></tr>
<tr><td>51</td><td>plot_series_03.py</td><td>sloupcový diagram s&nbsp;vertikálně orientovanými sloupci<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_03.py</a></td></tr>
<tr><td>52</td><td>plot_series_04.py</td><td>sloupcový diagram s&nbsp;horizontálně orientovanými sloupci<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_04.py</a></td></tr>
<tr><td>53</td><td>plot_series_05.py</td><td>graf s&nbsp;KDE &ndash; kernel density estimation<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_05.py</a></td></tr>
<tr><td>54</td><td>plot_series_06.py</td><td>vykreslení koláčového grafu<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_06.py</a></td></tr>
<tr><td>55</td><td>plot_series_07.py</td><td>použití metody <strong>Series.map</strong><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_07.py</a></td></tr>
<tr><td>56</td><td>plot_series_08.py</td><td>vyhlazení grafu s&nbsp;průběhem zašuměného signálu<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_08.py</a></td></tr>
<tr><td>57</td><td>plot_series_09.py</td><td>vyhlazení grafu s&nbsp;průběhem zašuměného signálu<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_09.py</a></td></tr>
<tr><td>58</td><td>plot_series_10.py</td><td>Gaussovské vyhlazení grafu s&nbsp;průběhem zašuměného signálu<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_10.py</a></td></tr>
<tr><td>59</td><td>plot_series_11.py</td><td>vykreslení tří průběhů do jediného grafu<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_11.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_11.py</a></td></tr>
<tr><td>60</td><td>plot_series_12.py</td><td>vykreslení tří podgrafů do jednoho grafu<td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_12.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/plot_series_12.py</a></td></tr>
</table>

<p>Některé demonstrační příklady načítají následující soubory s&nbsp;daty:</p>

<table>
<tr><th>#</th><th>Datový soubor</th><th>Stručný popis souboru</th><th>Cesta</th></tr>
<tr><td>1</td><td>integer_values.csv</td><td>dvousloupcová tabulka s&nbsp;celými čísly</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/integer_values.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/integer_values.csv</a></td></tr>
<tr><td>2</td><td>missing_integer_values.csv</td><td>dvousloupcová tabulka s&nbsp;celými čísly, z&nbsp;nichž některé chybí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/missing_integer_values.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/missing_integer_values.csv</a></td></tr>
<tr><td>3</td><td>timestamps.csv</td><td>tabulka s&nbsp;časovými údaji</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/timestamps.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/timestamps.csv</a></td></tr>
<tr><td>4</td><td>custom_timestamps.csv</td><td>tabulka s&nbsp;časovými údaji používajícími nestandardní formát</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/custom_timestamps.csv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/custom_timestamps.csv</a></td></tr>
<tr><td>5</td><td>denni_kurz.txt</td><td>semistrukturovaný soubor s&nbsp;nestandardními oddělovači</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/denni_kurz.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/denni_kurz.txt</a></td></tr>
<tr><td>6</td><td>tiobe.tsv</td><td>data získaná ze stránek Tiobe indexu ve formátu TSV</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/tiobe.tsv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/tiobe.tsv</a></td></tr>
<tr><td>7</td><td>tiobe.txt</td><td>data získaná ze stránek Tiobe indexu v&nbsp;textovém formátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/tiobe.txt">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/tiobe.txt</a></td></tr>
<tr><td>8</td><td>benchmarks1.tsv</td><td>výsledky benchmarků několika implementací Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/benchmarks1.tsv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/benchmarks1.tsv</a></td></tr>
<tr><td>9</td><td>benchmarks2.tsv</td><td>výsledky benchmarků několika implementací Pythonu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/benchmarks2.tsv">https://github.com/tisnik/most-popular-python-libs/blob/master/pandas/benchmarks2.tsv</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Plotting with matplotlib<br />
<a href="https://pandas.pydata.org/pandas-docs/version/0.13/visualization.html">https://pandas.pydata.org/pandas-docs/version/0.13/visualization.html</a>
</li>

<li>Plot With Pandas: Python Data Visualization for Beginners<br />
<a href="https://realpython.com/pandas-plot-python/">https://realpython.com/pandas-plot-python/</a>
</li>

<li>Pandas Dataframe: Plot Examples with Matplotlib and Pyplot<br />
<a href="https://queirozf.com/entries/pandas-dataframe-plot-examples-with-matplotlib-pyplot">https://queirozf.com/entries/pandas-dataframe-plot-examples-with-matplotlib-pyplot</a>
</li>

<li>Opulent-Pandas na PyPi<br />
<a href="https://pypi.org/project/opulent-pandas/">https://pypi.org/project/opulent-pandas/</a>
</li>

<li>pandas_validator na PyPi<br />
<a href="https://pypi.org/project/pandas_validator/">https://pypi.org/project/pandas_validator/</a>
</li>

<li>pandas-validator (dokumentace)<br />
<a href="https://pandas-validator.readthedocs.io/en/latest/">https://pandas-validator.readthedocs.io/en/latest/</a>
</li>

<li>7 Best Python Libraries for Validating Data<br />
<a href="https://www.yeahhub.com/7-best-python-libraries-validating-data/">https://www.yeahhub.com/7-best-python-libraries-validating-data/</a>
</li>

<li>Universally unique identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">https://en.wikipedia.org/wiki/Universally_unique_identifier</a>
</li>

<li>Nullable integer data type<br />
<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/integer_na.html">https://pandas.pydata.org/pandas-docs/stable/user_guide/integer_na.html</a>
</li>

<li>pandas.read_csv<br />
<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html</a>
</li>

<li>How to define format when using pandas to_datetime?<br />
<a href="https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime">https://stackoverflow.com/questions/36848514/how-to-define-format-when-using-pandas-to-datetime</a>
</li>

<li>Pandas : skip rows while reading csv file to a Dataframe using read_csv() in Python<br />
<a href="https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/">https://thispointer.com/pandas-skip-rows-while-reading-csv-file-to-a-dataframe-using-read_csv-in-python/</a>
</li>

<li>Skip rows during csv import pandas<br />
<a href="https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas">https://stackoverflow.com/questions/20637439/skip-rows-during-csv-import-pandas</a>
</li>

<li>Denni kurz<br />
<a href="https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt">https://www.cnb.cz/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt</a>
</li>

<li>UUID objects according to RFC 4122 (knihovna pro Python)<br />
<a href="https://docs.python.org/3.5/library/uuid.html#uuid.uuid4">https://docs.python.org/3.5/library/uuid.html#uuid.uuid4</a>
</li>

<li>Object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Object_identifier">https://en.wikipedia.org/wiki/Object_identifier</a>
</li>

<li>Digital object identifier (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Digital_object_identifier">https://en.wikipedia.org/wiki/Digital_object_identifier</a>
</li>

<li>voluptuous na (na PyPi)<br />
<a href="https://pypi.python.org/pypi/voluptuous">https://pypi.python.org/pypi/voluptuous</a>
</li>

<li>Repositář knihovny voluptuous na GitHubu<br />
<a href="https://github.com/alecthomas/voluptuous">https://github.com/alecthomas/voluptuous</a>
</li>

<li>pytest-voluptuous 1.0.2 (na PyPi)<br />
<a href="https://pypi.org/project/pytest-voluptuous/">https://pypi.org/project/pytest-voluptuous/</a>
</li>

<li>pytest-voluptuous (na GitHubu)<br />
<a href="https://github.com/F-Secure/pytest-voluptuous">https://github.com/F-Secure/pytest-voluptuous</a>
</li>

<li>schemagic 0.9.1 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schemagic/0.9.1">https://pypi.python.org/pypi/schemagic/0.9.1</a>
</li>

<li>Schemagic / Schemagic.web (na GitHubu)<br />
<a href="https://github.com/Mechrophile/schemagic">https://github.com/Mechrophile/schemagic</a>
</li>

<li>schema 0.6.7 (na PyPi)<br />
<a href="https://pypi.python.org/pypi/schema">https://pypi.python.org/pypi/schema</a>
</li>

<li>schema (na GitHubu)<br />
<a href="https://github.com/keleshev/schema">https://github.com/keleshev/schema</a>
</li>

<li>XML Schema validator and data conversion library for Python<br />
<a href="https://github.com/brunato/xmlschema">https://github.com/brunato/xmlschema</a>
</li>

<li>xmlschema 0.9.7<br />
<a href="https://pypi.python.org/pypi/xmlschema/0.9.7">https://pypi.python.org/pypi/xmlschema/0.9.7</a>
</li>

<li>jsonschema 2.6.0<br />
<a href="https://pypi.python.org/pypi/jsonschema">https://pypi.python.org/pypi/jsonschema</a>
</li>

<li>warlock 1.3.0<br />
<a href="https://pypi.python.org/pypi/warlock">https://pypi.python.org/pypi/warlock</a>
</li>

<li>Python Virtual Environments – A Primer<br />
<a href="https://realpython.com/python-virtual-environments-a-primer/">https://realpython.com/python-virtual-environments-a-primer/</a>
</li>

<li>pip 1.1 documentation: Requirements files<br />
<a href="https://pip.readthedocs.io/en/1.1/requirements.html">https://pip.readthedocs.io/en/1.1/requirements.html</a>
</li>

<li>unittest.mock — mock object library<br />
<a href="https://docs.python.org/3.5/library/unittest.mock.html">https://docs.python.org/3.5/library/unittest.mock.html</a>
</li>

<li>mock 2.0.0<br />
<a href="https://pypi.python.org/pypi/mock">https://pypi.python.org/pypi/mock</a>
</li>

<li>An Introduction to Mocking in Python<br />
<a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python</a>
</li>

<li>Unit testing (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Unit_testing">https://en.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Unit testing<br />
<a href="https://cs.wikipedia.org/wiki/Unit_testing">https://cs.wikipedia.org/wiki/Unit_testing</a>
</li>

<li>Test-driven development (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Test-driven_development">https://en.wikipedia.org/wiki/Test-driven_development</a>
</li>

<li>Pip (dokumentace)<br />
<a href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</a>
</li>

<li>5 Differences between clojure.spec and Schema<br />
<a href="https://lispcast.com/clojure.spec-vs-schema/">https://lispcast.com/clojure.spec-vs-schema/</a>
</li>

<li>Schema: Clojure(Script) library for declarative data description and validation<br />
<a href="https://github.com/plumatic/schema">https://github.com/plumatic/schema</a>
</li>

<li>clojure.spec - Rationale and Overview<br />
<a href="https://clojure.org/about/spec">https://clojure.org/about/spec</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2020</small></p>
</body>
</html>

