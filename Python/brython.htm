<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Brython aneb použití jazyka Python v browseru</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Brython aneb použití jazyka Python v browseru</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. Mainstreamové, alternativní a specializované implementace programovacího jazyka Python</a></p>
<p><a href="#k02">*** 2. Programovací jazyk Python a webové aplikace</a></p>
<p><a href="#k03">*** 3. Python ve funkci programovacího jazyka pro front end</a></p>
<p><a href="#k04">*** 4. JavaScript v&nbsp;roli assembleru pro Web</a></p>
<p><a href="#k05">*** 5. Transpilery v&nbsp;nice ovládnuté JavaScriptem</a></p>
<p><a href="#k06">*** 6. Projekt Brython se představuje</a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. Přístup k&nbsp;obsahu stránky a naprogramování jednoduchého zpracování události</a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. </a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Mainstreamové, alternativní a specializované implementace programovacího jazyka Python</h2>

<p>Na stránkách <a href="https://www.root.cz/">Roota</a> a taktéž na serveru <a href="https://mojefedora.cz/">Moje Fedora</a> jsme se již několikrát setkali s&nbsp;různými mainstreamovými i alternativními implementacemi programovacího jazyka <a href="https://www.root.cz/n/python/">Python</a>. Kromě klasického <i>CPythonu</i> si připomeňme například Jython [<a href="https://mojefedora.cz/jython-aneb-ponekud-opomijeny-programovaci-jazyk-pro-virtualni-stroj-javy/">1</a>] [<a href="https://mojefedora.cz/pouziti-standardni-knihovny-javy-v-jythonu/">2</a>], což je (dnes již poněkud zastaralá) implementace Pythonu určená pro běh ve virtuálním stroji Javy, popř.&nbsp;<a href="https://ironpython.net/">IronPython</a> určený pro prostředí .NET. Dále jsme se zmínili o <a href="https://www.root.cz/zpravicky/rustpython-je-implementace-jazyka-python-3-napsana-pomoci-rust/">RustPythonu</a>, neboli implementaci Pythonu v&nbsp;programovacím jazyce Rust. Podobným způsobem je implementován i interpret Pythonu v&nbsp;Go v&nbsp;projektu <a href="https://github.com/go-python/gpython">gpython</a>.</p>

*** image ***
<p><i>Obrázek 1: Logo programovacího jazyka Jython.</i></p>

<p>Věnovali jsme se i jazyku <a href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">Coconut</a>. Jedná se o funkcionální programovací jazyk s&nbsp;<i>pattern matchingem</i>, který je navržen takovým způsobem, aby byl kompatibilní s&nbsp;Pythonem, tj.&nbsp;aby skripty vyvinuté v&nbsp;Pythonu byly v&nbsp;Coconutu spustitelné (zpětně ovšem nikoli, protože syntaxe a sémantika Coconutu byla v&nbsp;mnoha ohledech rozšířena). Přesnější informace o tom, se kterými verzemi Pythonu je Coconut kompatibilní, naleznete na adrese <a href="http://coconut.readthedocs.io/en/master/DOCS.html#compatible-python-versions">http://coconut.readthedocs.io/en/master/DOCS.html#compatible-python-versions</a>. Zapomenout nesmíme ani na <a href="http://www.mypy-lang.org/">MyPy</a>, což je projekt, kterému bude věnován samostatný článek.</p>

<p>Zatímco výše zmíněné nástroje <i>Jython</i> i <i>RustPython</i> jsou skutečnými alternativními implementacemi interpretru Pythonu navazujícími na CPython, existují i další implementace, které se zaměřují například překlad programů vyvinutých v&nbsp;Pythonu do strojového kódu, a to jak před spuštěním aplikace (<i>AOT &ndash; Ahead Of Time compilation</i>) nebo během její činnosti (<i>JIT &ndash; Just In Time compilation</i>). Mezi tyto nástroje patří především <a href="http://pypy.org/">PyPy</a> a dále <a href="https://cython.org/">Cython</a> (ne CPython), <a href="https://rpython.readthedocs.io/en/latest/rpython.html">RPython</a> a <a href="http://numba.pydata.org/">Numba</a>, které k&nbsp;problematice překladu skriptů vytvořených v&nbsp;Pythonu přistupují různými (zcela odlišnými cestami). RPython používá AOT a striktně omezuje některé vlastnosti jazyka zatímco Numba používá JIT a nabízí programátorům prakticky stejné možnosti, jako klasický CPython. Bližší informace o Cythonu, RPythonu a nástroji Numba jsme si řekli v&nbsp;následujících článcích:</p>

<ol>

<li>RPython: překvapivě výkonný dialekt Pythonu, na němž je založen PyPy<br />
<a href="https://www.root.cz/clanky/rpython-prekvapive-vykonny-dialekt-pythonu-na-nemz-je-zalozen-pypy/">https://www.root.cz/clanky/rpython-prekvapive-vykonny-dialekt-pythonu-na-nemz-je-zalozen-pypy/</a>
</li>

<li>RPython vs Cython aneb dvojí přístup k překladu Pythonu do nativního kódu<br />
<a href="https://www.root.cz/clanky/rpython-vs-cython-aneb-dvoji-pristup-k-prekladu-pythonu-do-nativniho-kodu/">https://www.root.cz/clanky/rpython-vs-cython-aneb-dvoji-pristup-k-prekladu-pythonu-do-nativniho-kodu/</a>
</li>

<li>Praktické použití nástroje Cython při překladu Pythonu do nativního kódu<br />
<a href="https://www.root.cz/clanky/prakticke-pouziti-nastroje-cython-pri-prekladu-pythonu-do-nativniho-kodu-1/">https://www.root.cz/clanky/prakticke-pouziti-nastroje-cython-pri-prekladu-pythonu-do-nativniho-kodu-1/</a>
</li>

<li>Projekt Numba aneb další přístup k překladu Pythonu do nativního kódu<br />
<a href="https://www.root.cz/clanky/projekt-numba-aneb-dalsi-pristup-k-prekladu-pythonu-do-nativniho-kodu/">https://www.root.cz/clanky/projekt-numba-aneb-dalsi-pristup-k-prekladu-pythonu-do-nativniho-kodu/</a>
</li>

</ol>



<p><a name="k02"></a></p>
<h2 id="k02">2. Programovací jazyk Python a webové aplikace</h2>



<p><a name="k03"></a></p>
<h2 id="k03">3. Python ve funkci programovacího jazyka pro front end</h2>


http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html



<p><a name="k04"></a></p>
<h2 id="k04">4. JavaScript v&nbsp;roli assembleru pro Web</h2>

<p><i>JavaScript is an assembly language. The JavaScript + HTML generate is
like a .NET assembly. The browser can execute it, but no human should really
care what's there.<br />
Erik Meijer</i></p>

<p>Při tvorbě webových aplikací popř.&nbsp;aplikací používajících například dnes populární technologii <a href="https://electronjs.org/">Electron</a> se mnohdy používá programovací jazyk <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a>.  Je to pochopitelné, protože většina současných webových prohlížečů (samozřejmě pokud se nejedná o specializované prohlížeče typu <a href="https://lynx.invisible-island.net/">Lynx</a>) obsahuje interpret a popř.&nbsp;i JIT (<i>just-in-time</i>) překladač JavaScriptu, přičemž podpora pro další programovací jazyky přímo neexistuje. To s&nbsp;sebou přináší některé výhody, ale i mnoho záporů, ostatně jako každá monokultura (nejenom) v&nbsp;IT. Pro webové aplikace, v&nbsp;nichž se intenzivně pracuje především s&nbsp;DOMem HTML stránky, nemusí být toto omezení tak kritické, ovšem pro výpočetně náročnější aplikace popř.&nbsp;ve chvíli, kdy se ve větší míře používá grafika (2D či 3D <i>canvas</i>) je již podpora pouze relativně vysokoúrovňového a dynamicky typovaného (a tím pádem hůře JITovatelného) JavaScriptu někdy poměrně omezující, i když je nutno říci, že se optimalizacemi JITu JavaScriptu věnovalo mnoho práce a výsledky jsou patrné.</p>

<p>Jedno z&nbsp;možných řešení, které se nabízí, je buď použití nativních klientů (se všemi z&nbsp;toho plynoucími bezpečnostními aj.&nbsp;důsledky) nebo využití nějaké formy virtuálního stroje, který by ovšem měl být co nejjednodušší a ideálně dobře specifikovaný, aby ho bylo možné relativně snadno implementovat ve všech používaných prohlížečích. V&nbsp;současnosti je tímto virtuálním strojem <i>WebAssembly</i>, což je popis instrukcí tohoto stroje i jeho očekávaného chování. Díky tomu, že je WebAssembly <a href="https://caniuse.com/#feat=wasm">podporován prakticky všemi relevantními prohlížeči</a>, začal se postupně rozšiřovat, zejména ve výpočetně intenzivnějších aplikacích (například se jedná o šachový engine atd.).</p>

<p>V&nbsp;relativně nedávné minulosti proto vzniklo a pořád ještě vzniká mnoho projektů, jejichž cílem je umožnit tvorbu webových aplikací pro prohlížeč v&nbsp;jiných programovacích jazycích. Zdrojové kódy je pak nutné nějakým způsobem zpracovat (transpřeložit, přeložit, ...) takovým způsobem, aby je bylo možné ve webovém prohlížeči spustit. Možností je hned několik &ndash; lze použít plugin (velmi problematické a dnes značně nepopulární řešení), <i>transpřekladač</i> do JavaScriptu či virtuální stroj popř.&nbsp;interpret daného jazyka implementovaný opět v&nbsp;JavaScriptu.</p>

<p>Jednu z&nbsp;dnes velmi populárních technik umožňujících použití prakticky libovolného programovacího jazyka pro tvorbu aplikací běžících na straně webového prohlížeče, představuje použití takzvaných <i>transcompilerů (source-to-source compiler)</i> zajišťujících překlad programu napsaného ve zdrojovém programovacím jazyce do funkčně identického programu napsaného v&nbsp;JavaScriptu (někdy se setkáme i s&nbsp;označením <a href="https://scotch.io/tutorials/javascript-transpilers-what-they-are-why-we-need-them">transpiler</a>).  Transpřekladač se většinou spouští jen jednou na vývojářském počítači, samotní klienti již mají k&nbsp;dispozici JavaScriptový kód.</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti není technologie transpřekladačů žádným způsobem svázána právě s&nbsp;JavaScriptem, protože se používala (a používá) i pro další manipulace se zdrojovými kódy.</div></p>

<p>Existuje však i druhá možnost, kdy je samotný transpřekladač naprogramován v&nbsp;JavaScriptu a spouštěn přímo ve webovém prohlížeči klientů. Oba přístupy mají své přednosti, ale pochopitelně i nějaké zápory (například tvůrci uzavřených aplikací pravděpodobně budou upřednostňovat první možnost, protože výstupy transcompilerů jsou většinou dosti nečitelné; dokonce by mohla snaha o prozkoumání kódu spadat pod reverse engineering). Druhá možnost je relativně elegantní v&nbsp;tom ohledu, že se z&nbsp;pohledu programátora webové aplikace skutečně jedná o nový programovací jazyk, který je jakoby přímo zpracováván prohlížečem na stejné úrovni jako JavaScript. Příkladem může být kombinace JavaScriptu a jazyka <a href="https://www.root.cz/clanky/propojeni-sveta-lispu-se-svetem-javascriptu-s-vyuzitim-transprekladace-wisp/">WISP</a>:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Jazyk WISP na webové stránce&lt;/title&gt;
        &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
&nbsp;
        &lt;script src="wisp.min.js" type="application/javascript"&gt;
        &lt;/script&gt;
&nbsp;
        &lt;script type="application/wisp"&gt;
        (print "část naprogramovaná ve WISPu")
        &lt;/script&gt;
&nbsp;
        &lt;script type="application/javascript"&gt;
        console.log("část naprogramovaná v JavaScriptu")
        &lt;/script&gt;
&nbsp;
    &lt;/head&gt;
&nbsp;
    &lt;body&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. Projekt Brython se představuje</h2>

<p>Problematikou takzvaných transpilerů nebo transpřekladačů (<i>transcompilers, source-to-source compilers</i>) jsme se již na stránkách Rootu zabývali, a to dokonce několikrát. Připomeňme si například projekty <a href="https://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">ClojureScript</a> (transpřekladač Clojure &rarr; JavaScript), <a href="https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/#k06">lua2js</a> (transpřekladač Lua &rarr; opět JavaScript), <a href="https://www.root.cz/clanky/propojeni-sveta-lispu-se-svetem-javascriptu-s-vyuzitim-transprekladace-wisp/">Wisp</a> (programovací jazyk podobný Clojure) i již výše zmíněný transpřekladač <a href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">Coconut</a>. Připomeňme si, že transpřekladače jsou nástroje sloužící pro překlad algoritmů zapsaných v&nbsp;nějakém zdrojovém programovacím jazyce do zvoleného cílového jazyka (ovšem nikoli do nativního kódu či bajtkódu, to je totiž role běžných překladačů).</p>

<p>Transpřekladače se v&nbsp;informatice používají již po několik desetiletí; například se stále můžeme setkat s&nbsp;nástroji, které převádí kód z&nbsp;nějakého vyššího programovacího jazyka do Céčka, které je dnes s&nbsp;trochou nadsázky chápáno jako &bdquo;univerzální assembler&ldquo;. Asi nejznámějším příkladem staršího použití transpřekladačů je nástroj nazvaný <strong>web2c</strong>, jenž slouží pro transformaci zdrojových kódů <i>TeXu</i> do céčka. Transpřekladače se stávají velmi populární i pro programátory webových aplikací, a to zejména z&nbsp;toho důvodu, že webové prohlížeče nativně podporují většinou pouze JavaScript, který je tak přirozeně cílovým jazykem transpřekladačů (proto se také JavaScriptu někdy říká &bdquo;assembler pro web&ldquo;, viz též <a href="#k20">odkazy na konci článku</a>). A právě této problematice se budeme podrobněji věnovat v&nbsp;navazujících kapitolách v&nbsp;souvislosti s&nbsp;projektem Brython.</p>

<p>Z&nbsp;praxe můžeme uvést například následující projekty založené na transpřekladači:</p>

<table>
<tr><th>#</th><th>Jazyk či transpřekladač</th><th>Poznámka</th></tr>
</table>

<p><div class="rs-tip-major">Poznámka: seznam všech (či alespoň většiny) známých transpřekladačů do JavaScriptu naleznete například na stránce <a href="https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS">https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS</a>, i když je nutné varovat, že některé projekty (kromě výše zmíněných) jsou v&nbsp;dosti špatném stavu.</div></p>

<p>Další alternativní technologii, která mi osobně přijde velmi zajímavá a v&nbsp;budoucnu možná i přelomová, představují transpřekladače provádějící překlad z&nbsp;bajtkódu či mezikódu do JavaScriptu (vstupem zde tedy není zdrojový kód v&nbsp;nějakém lidsky čitelném programovacím jazyku, ale většinou binárně reprezentovaný výsledek předchozího překladu). Příkladem tohoto typu transpřekladače je především nástroj <i>Emscripten</i> [<a href="https://emscripten.org/">1</a>] umožňující překlad kódu z&nbsp;libovolného jazyka podporovaného LLVM (Rust, C, C++, Objective C, D, Ada, Fortran atd.) do JavaScriptu. Podívejme se nyní ve stručnosti na kroky, které je zapotřebí provést proto, aby se původní zdrojový kód napsaný například v&nbsp;Céčku, mohl nějakým způsobem spustit ve webovém prohlížeči:</p>

<ol>
<li>Na vstupu celého procesu je program napsaný v&nbsp;céčku</li>
<li>Nejprve je proveden překlad pomocí <strong>clang</strong> do mezikódu LLVM
(<i>LLVM Intermediate Representation</i>)</li>
<li>Následně je zavolán <strong>Fastcomp</strong> (jádro překladače
Emscriptenu) pro překlad mezikódu z&nbsp;předchozího kroku do JavaScriptu</li>
<li>Výsledný JavaScriptový zdrojový kód je možné využít různými způsoby
(node.js na serveru, na WWW stránce atd.)</li>
</ol>


<p><a name="k06"></a></p>
<h2 id="k06">6. Projekt Brython se představuje</h2>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. </h2>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Ahead-of-time compilation<br />
<a href="https://en.wikipedia.org/wiki/Ahead-of-time_compilation">https://en.wikipedia.org/wiki/Ahead-of-time_compilation</a>
</li>

<li>Just-in-time compilation<br />
<a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">https://en.wikipedia.org/wiki/Just-in-time_compilation</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

<li>mypy<br />
<a href="http://www.mypy-lang.org/">http://www.mypy-lang.org/</a>
</li>

<li>RPython Language<br />
<a href="https://rpython.readthedocs.io/en/latest/rpython.html">https://rpython.readthedocs.io/en/latest/rpython.html</a>
</li>

<li>Numba<br />
<a href="http://numba.pydata.org/">http://numba.pydata.org/</a>
</li>

<li>How Brython works<br />
<a href="https://github.com/brython-dev/brython/wiki/How%20Brython%20works">https://github.com/brython-dev/brython/wiki/How%20Brython%20works</a>
</li>

<li>Brython &ndash;  A Python 3 implementation for client-side web programming<br />
<a href="http://www.brython.info/">http://www.brython.info/</a>
</li>

<li>Brython videos and talks<br />
<a href="https://github.com/brython-dev/brython/wiki/Brython-videos-and-talks">https://github.com/brython-dev/brython/wiki/Brython-videos-and-talks</a>
</li>

<li>Python in browser (tabulka s&nbsp;porovnáními)<br />
<a href="http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html">http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

