<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Brython aneb použití jazyka Python v browseru</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Brython aneb použití jazyka Python v browseru</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V&nbsp;dnešním článku se seznámíme s&nbsp;projektem nazvaným Brython neboli Browser Python. Jak již název tohoto projektu napovídá, jedná se o nástroj umožňující běh skriptů napsaných v&nbsp;Pythonu přímo na HTML stránce s&nbsp;tím, že interně je prováděn transpřeklad do JavaScriptu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Mainstreamové, alternativní a specializované implementace programovacího jazyka Python</a></p>
<p><a href="#k02">2. Programovací jazyk Python a webové aplikace</a></p>
<p><a href="#k03">3. Python ve funkci programovacího jazyka pro front end</a></p>
<p><a href="#k04">4. JavaScript v&nbsp;roli assembleru pro Web</a></p>
<p><a href="#k05">5. Transpilery v&nbsp;nice ovládnuté JavaScriptem</a></p>
<p><a href="#k06">6. Nástroj Emscripten</a></p>
<p><a href="#k07">7. Projekt Brython se představuje</a></p>
<p><a href="#k08">8. Stránka s&nbsp;demonstračními příklady</a></p>
<p><a href="#k09">9. Python na webové stránce</a></p>
<p><a href="#k10">10. Základní přístup k&nbsp;DOMu stránky</a></p>
<p><a href="#k11">11. Použití metody <strong>document.select()</strong></a></p>
<p><a href="#k12">12. Přístup k&nbsp;obsahu stránky a naprogramování jednoduchého zpracování události</a></p>
<p><a href="#k13">13. Pythonní skript uložený ve zvláštním souboru</a></p>
<p><a href="#k14">14. Přidání nových elementů na stránku</a></p>
<p><a href="#k15">15. Elementy vytvořené uvnitř jiných elementů</a></p>
<p><a href="#k16">16. Práce se SVG</a></p>
<p><a href="#k17">17. A je tedy Brython reálně nasaditelný?</a></p>
<p><a href="#k18">18. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Mainstreamové, alternativní a specializované implementace programovacího jazyka Python</h2>

<p>Na stránkách <a href="https://www.root.cz/">Roota</a> a taktéž na serveru <a
href="https://mojefedora.cz/">Moje Fedora</a> jsme se již několikrát setkali
s&nbsp;různými mainstreamovými ale i alternativními implementacemi
programovacího jazyka <a href="https://www.root.cz/n/python/">Python</a>. Kromě
klasického <i>CPythonu</i> (ať již verze <a
href="https://pythonclock.org/">2</a> nebo 3) si připomeňme například projekt
nazvaný Jython [<a
href="https://mojefedora.cz/jython-aneb-ponekud-opomijeny-programovaci-jazyk-pro-virtualni-stroj-javy/">1</a>]
[<a
href="https://mojefedora.cz/pouziti-standardni-knihovny-javy-v-jythonu/">2</a>],
což je (dnes již bohužel poněkud zastaralá) implementace Pythonu určená pro běh
ve virtuálním stroji Javy, popř.&nbsp;<a
href="https://ironpython.net/">IronPython</a> určený pro prostředí .NET. Dále
jsme se zmínili o <a
href="https://www.root.cz/zpravicky/rustpython-je-implementace-jazyka-python-3-napsana-pomoci-rust/">RustPythonu</a>,
neboli implementaci Pythonu vytvořené (jak název správně napovídá) <a
href="https://www.root.cz/serialy/programovaci-jazyk-rust/">v&nbsp;programovacím
jazyce Rust</a>. Podobným způsobem je implementován i interpret Pythonu
v&nbsp;jazyce Go v&nbsp;projektu <a
href="https://github.com/go-python/gpython">gpython</a>.</p>

<img src="https://i.iinfo.cz/images/575/brython-1.png" class="image-394884" alt="&#160;" width="399" height="257" />
<p><i>Obrázek 1: Logo programovacího jazyka Jython.</i></p>

<p>Věnovali jsme se i poměrně neznámému jazyku <a
href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">Coconut</a>.
Jedná se o funkcionální programovací jazyk s&nbsp;<i>pattern matchingem</i>,
který je navržen takovým způsobem, aby byl kompatibilní s&nbsp;Pythonem,
tj.&nbsp;aby skripty vyvinuté v&nbsp;Pythonu byly v&nbsp;Coconutu spustitelné
(zpětně ovšem nikoli, protože syntaxe a sémantika Coconutu byla v&nbsp;mnoha
ohledech rozšířena). Přesnější informace o tom, se kterými verzemi Pythonu je
Coconut kompatibilní, naleznete na adrese <a
href="http://coconut.readthedocs.io/en/master/DOCS.html#compatible-python-versions">http://coconut.readthedocs.io/en/master/DOCS.html#compatible-python-versions</a>.
Zapomenout nesmíme ani na <a href="http://www.mypy-lang.org/">MyPy</a>, což je
projekt, kterému bude věnován samostatný článek.</p>

<p>Zatímco výše zmíněné nástroje <i>Jython</i> i <i>RustPython</i> jsou
skutečnými alternativními implementacemi interpretru Pythonu navazujícími na
CPython (interpret Pythonu naprogramovaný v&nbsp;céčku), existují i další
implementace, které se zaměřují například překlad programů vyvinutých
v&nbsp;Pythonu do strojového kódu, a to jak před spuštěním aplikace (<i>AOT
&ndash; Ahead Of Time compilation</i>) nebo během její činnosti (<i>JIT &ndash;
Just In Time compilation</i>). Mezi tyto nástroje patří především <a
href="http://pypy.org/">PyPy</a> (používaný v&nbsp;mnoha projektech) a dále <a
href="https://cython.org/">Cython</a> (ne CPython), <a
href="https://rpython.readthedocs.io/en/latest/rpython.html">RPython</a> a <a
href="http://numba.pydata.org/">Numba</a>, které k&nbsp;problematice překladu
skriptů vytvořených v&nbsp;Pythonu přistupují různými (zcela odlišnými
cestami). RPython používá AOT a striktně omezuje některé vlastnosti jazyka
zatímco Numba a PyPy používá JIT a nabízí programátorům prakticky stejné
možnosti, jako klasický CPython.</p>

<img src="https://i.iinfo.cz/images/575/brython-2.png" class="image-394885" alt="&#160;" width="500" height="230" />
<p><i>Obrázek 2: Logo projektu Cython.</i></p>

<img src="https://i.iinfo.cz/images/575/brython-3.png" class="image-394886" alt="&#160;" width="318" height="110" />
<p><i>Obrázek 3: Logo projektu PyPy.</i></p>

<p>S&nbsp;bližšími informacemi o Cythonu, RPythonu i nástroji Numba jsme se
seznámili v&nbsp;následujících článcích:</p>

<ol>

<li>RPython: překvapivě výkonný dialekt Pythonu, na němž je založen PyPy<br />
<a href="https://www.root.cz/clanky/rpython-prekvapive-vykonny-dialekt-pythonu-na-nemz-je-zalozen-pypy/">https://www.root.cz/clanky/rpython-prekvapive-vykonny-dialekt-pythonu-na-nemz-je-zalozen-pypy/</a>
</li>

<li>RPython vs Cython aneb dvojí přístup k překladu Pythonu do nativního kódu<br />
<a href="https://www.root.cz/clanky/rpython-vs-cython-aneb-dvoji-pristup-k-prekladu-pythonu-do-nativniho-kodu/">https://www.root.cz/clanky/rpython-vs-cython-aneb-dvoji-pristup-k-prekladu-pythonu-do-nativniho-kodu/</a>
</li>

<li>Praktické použití nástroje Cython při překladu Pythonu do nativního kódu<br />
<a href="https://www.root.cz/clanky/prakticke-pouziti-nastroje-cython-pri-prekladu-pythonu-do-nativniho-kodu-1/">https://www.root.cz/clanky/prakticke-pouziti-nastroje-cython-pri-prekladu-pythonu-do-nativniho-kodu-1/</a>
</li>

<li>Projekt Numba aneb další přístup k překladu Pythonu do nativního kódu<br />
<a href="https://www.root.cz/clanky/projekt-numba-aneb-dalsi-pristup-k-prekladu-pythonu-do-nativniho-kodu/">https://www.root.cz/clanky/projekt-numba-aneb-dalsi-pristup-k-prekladu-pythonu-do-nativniho-kodu/</a>
</li>

</ol>

<a href="https://www.root.cz/obrazek/332506/"><img src="https://i.iinfo.cz/images/529/rpython-cpython-3-prev.png" class="image-332506" alt="&#160;" width="363" height="270" /></a>
<p><i>Obrázek 4: Porovnání doby výpočtu Mandelbrotovy množiny RPythonem,
Cythonem (bez i s&nbsp;type hinty) a variantou naprogramovanou přímo
v&nbsp;ANSI C. Z&nbsp;tohoto grafu je dobře patrné, jak důležité je pro Cython
mít k&nbsp;dispozici o typech proměnných, parametrů a návratových kódů funkcí
(jinými slovy &ndash; provedené optimalizace v&nbsp;tomto případě nezískáme
zadarmo).</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Programovací jazyk Python a webové aplikace</h2>

<p>Programovací jazyk Python se v&nbsp;současnosti používá v&nbsp;mnoha
aplikačních oblastech &ndash; od jednoduchých skriptů umožňujících a
zjednodušujících administraci systému přes složitější utility, desktopové
aplikace (PyQt, PySide, wxPython, Tkinter, PyGObject či Wax) a webové služby až
po zpracování dat, strojové učení (<i>ML &ndash; machine learning</i>) a umělou
inteligenci (<i>AI &ndash; artificial intelligence</i>). Dnes nás ovšem bude
zajímat především použití Pythonu při tvorbě webových služeb a webových
aplikací. V&nbsp;této oblasti se Python používá především na <i>back endu</i>,
tj.&nbsp;pro tu část webové služby/aplikace, která je provozována na serveru a
nějakým způsobem komunikuje s&nbsp;ostatními komponentami vytvářeného systému:
<i>front endem</i> (typicky webový prohlížeč s&nbsp;interpretrem JavaScriptu),
databází a dalšími (mikro)službami, například s&nbsp;využitím message brokerů,
systémů pro monitoring a správu událostí atd. Tato oblast samozřejmě není
pokryta pouze Pythonem, ale najdeme zde i další programovací jazyky a
technologie, zejména Javu (a celý její middleware), JavaScript či TypeScript
(node.js) a dnes taktéž programovací jazyk Go.</p>

<p>Zatímco pozice Pythonu v&nbsp;oblasti back endu je poměrně zřejmá, je
situace na front endu mnohem složitější. Důvod je jednoduchý &ndash;
v&nbsp;této oblasti z&nbsp;historických důvodů kraluje JavaScript, přičemž
veškeré snahy a náhradu tohoto jazyka byly prozatím neúspěšné (pokusů bylo hned
několik, připomeňme například browsery s&nbsp;<a
href="https://www.root.cz/serialy/programovaci-jazyk-tcl/">TCL</a>, <a
href="https://en.wikipedia.org/wiki/VBScript">VBScript</a> či projekt <a
href="https://dart.dev/">Dart</a>). Ovšem stále se můžeme setkat se snahami
JavaScript nepoužívat přímo, popř.&nbsp;ho obejít jinými nástroji. Příkladem
mohou být technologie umožňující tvorbu webových aplikací podobným způsobem,
jakoby se jednalo o aplikace desktopové. Příkladem tohoto přístupu mohou být
projekty <a href="https://wiki.python.org/moin/Pyjamas">Pyjamas</a> (pro
Python), <a href="http://www.gwtproject.org/">Google Web Toolkit (GWT)</a>, <a
href="https://cordova.apache.org/">Apache Cordova</a> atd.</p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Python ve funkci programovacího jazyka pro front end</h2>

<p>Je tedy vůbec možné a praktické použít Python přímo na webovém front endu a
pokud to je možné, jakou za to zaplatíme cenu? Ve skutečnosti existuje hned
několik projektů, které se více či méně úspěšným způsobem snaží o to, aby byl
Python na front endu skutečně použitelný, a to i pro reálně provozované
aplikace. Mezi tyto projekty patří například:</p>

<ol>

<li><i>Brython</i>, s&nbsp;jehož některými možnostmi se seznámíme dnes ve druhé
části článku. Jedná se o transpřekladač z&nbsp;Pythonu do JavaScriptu, přičemž
samotný překlad (resp.&nbsp;přesněji řečeno transpřeklad) probíhá na pozadí,
což znamená, že přímo v&nbsp;kódu webové stránky je umístěn (či načítán) kód
v&nbsp;Pythonu. Podobné řešení jsme již viděli, například u projektu <a
href="https://github.com/Gozala/wisp">Wisp</a> (jazyk podobný Clojure) či <a
href="https://github.com/mherkender/lua.js">lua.js</a> (transpřeklad
z&nbsp;jazyka Lua). Výhodou Brythonu je, že se jakékoli úpravy ihned projeví
v&nbsp;aplikaci po znovunačtení stránky (F5).</li>

<li><i>Transcrypt</i> je taktéž transpřekladačem Pythonu (konkrétně Pythonu 3)
do JavaScriptu. Samotný transpřeklad je napsaný velmi dobře &ndash; zhruba
platí, že velikost vygenerovaného kódu v&nbsp;JavaScriptu odpovídá velikosti
původního kódu napsaného v&nbsp;Pythonu (případné zvětšení je o jednotky
procent). Musíme však počítat s&nbsp;tím, že je nutné načíst i jádro
Transcriptu, jehož velikost je přibližně 20 kB (tedy čím větší je kód samotné
aplikace, tím (poměrově) menší budou režijní náklady. Zajímavá a užitečná je i
podpora <i>type hintů</i> (informací o datovém typu parametrů, proměnných
atd.)</li>

<li>Podobným způsobem pracuje i projekt nazvaný <i>pyjaco</i>, který naleznete
na adrese <a
href="https://github.com/chrivers/pyjaco">https://github.com/chrivers/pyjaco</a>.</li>

<li><i>Skulpt</i> je naproti tomu v&nbsp;mnoha ohledech podobný projektu
<i>Brython</i>, protože taktéž umožňuje provádět transpřeklad na pozadí
(programátor tedy pracuje pouze se zdrojovým kódem vytvořeným
v&nbsp;Pythonu).</li>

<li>Velmi zajímavým nástrojem, který názorně ukazuje, jak vlastně transpřeklad
funguje (a že jeho výsledek může být čitelný), je nástroj s&nbsp;poněkud
zvláštním jménem <i>fiddlesalad</i>, který naleznete na adrese <a
href="http://fiddlesalad.com/python/">http://fiddlesalad.com/python/</a>. Tento
nástroj umožňuje zápis zdrojového kódu v&nbsp;Pythonu, který je ihned (již
v&nbsp;době zápisu) transpřekládán do JavaScriptu a současně i spouštěn.</li>

</ol>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že všechny projekty
zmíněné v&nbsp;předchozím textu jsou ve skutečnosti <i>transpřekladači</i>
neboli <i>transpilery</i>. Jedná se o technologii zajišťující, aby se i ve
webovém prohlížeči mohlo (nepřímo) pracovat s&nbsp;dalšími programovacími
jazyky, nejenom se všudypřítomným a nativně podporovaným JavaScriptem. Další
variantou je interpretace s&nbsp;využitím interpretru psaného
v&nbsp;JavaScriptu popř.&nbsp;použití WebAssembly (viz též navazující
kapitoly).</div></p>

<p>Další více či méně zajímavé a užitečné projekty můžete najít na stránce <a
href="https://wiki.python.org/moin/WebBrowserProgramming">Web Browser
Programming in Python</a>, popř.&nbsp;v&nbsp;tabulce umístěné na adrese <a
href="http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html">http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html</a>.</p>

<a href="https://www.root.cz/obrazek/394887/"><img src="https://i.iinfo.cz/images/575/brython-4-prev.png" class="image-394887" alt="&#160;" width="370" height="163" /></a>
<p><i>Obrázek 4: Prostředí webového IDE fiddlesalad. Zapsaný zdrojový kód je
ihned transpřekládán i spouštěn.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. JavaScript v&nbsp;roli assembleru pro Web</h2>

<p><i>JavaScript is an assembly language. The JavaScript + HTML generate is
like a .NET assembly. The browser can execute it, but no human should really
care what's there.<br />
Erik Meijer</i></p>

<p>Pokud se bavíme o webových aplikacích, samozřejmě nemůžeme nezmínit <a
href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a>,
se všemi jeho přednostmi a zápory. Ovšem nejedná se jen o čistě webové aplikace
zobrazované ve webovém prohlížeči, protože JavaScript je používán i
v&nbsp;desktopových aplikacích založených například na technologii <a
href="https://electronjs.org/">Electron</a> (příkladem takové aplikace může být
<a href="https://code.visualstudio.com/">Visual Studio Code</a>, které je podle
průzkumu StackOverflow <a
href="https://insights.stackoverflow.com/survey/2019#technology-_-most-popular-development-environments">nejpopulárnějším
IDE roku 2019</a>). Rozšíření JavaScriptu je pochopitelné, protože většina
současných webových prohlížečů (samozřejmě pokud se nejedná o specializované
prohlížeče typu <a href="https://lynx.invisible-island.net/">Lynx</a>) obsahuje
interpret a popř.&nbsp;i JIT (<i>just-in-time</i>) překladač JavaScriptu,
přičemž podpora pro další programovací jazyky přímo neexistuje. To s&nbsp;sebou
přináší některé výhody, ale i mnoho záporů, ostatně jako každá monokultura
(nejenom) v&nbsp;IT. Pro webové aplikace, v&nbsp;nichž se intenzivně pracuje
především s&nbsp;DOMem HTML stránky, nemusí být toto omezení tak kritické,
ovšem pro výpočetně náročnější aplikace popř.&nbsp;ve chvíli, kdy se ve větší
míře používá grafika (2D či 3D <i>canvas</i>) je již podpora pouze relativně
vysokoúrovňového a dynamicky typovaného (a tím pádem hůře JITovatelného)
JavaScriptu někdy poměrně omezující, i když je nutno říci, že se optimalizacemi
JITu JavaScriptu věnovalo mnoho práce a výsledky jsou patrné (navíc existuje i
podpora pro <i>asm.js</i>, viz další text).</p>

<a href="http://www.root.cz/obrazek/190903/"><img src="http://i.iinfo.cz/images/391/atom1-18-prev.png" class="image-190903" width="370" height="234" alt="&#160;" /></a>
<p><i>Obrázek 4: Textový editor Atom používá technologii Electron.</i></p>

<p>Ovšem JavaScript nemusí být vhodným pro všechny typy projektů a pro všechny
vývojářské týmy. V&nbsp;relativně nedávné minulosti proto vzniklo a pořád ještě
vzniká mnoho projektů, jejichž cílem je umožnit tvorbu webových aplikací pro
prohlížeč v&nbsp;jiných programovacích jazycích. Zdrojové kódy je pak nutné
nějakým způsobem zpracovat (transpřeložit, přeložit, interpretovat...) takovým
způsobem, aby je bylo možné ve webovém prohlížeči spustit. Možností je hned
několik &ndash; lze použít plugin (velmi problematické a dnes značně
nepopulární řešení), využít <i>transpřekladač</i> do JavaScriptu či
naprogramovat a spustit virtuální stroj popř.&nbsp;interpret daného jazyka
implementovaný opět v&nbsp;JavaScriptu.</p>

<p>Další z&nbsp;možných řešení, které se nabízí, je buď použití nativních
klientů (se všemi z&nbsp;toho plynoucími bezpečnostními aj.&nbsp;důsledky,
složitější administrací atd.) nebo využití nějaké formy virtuálního stroje,
který by ovšem měl být co nejjednodušší a ideálně dobře specifikovaný, aby ho
bylo možné relativně snadno implementovat ve všech používaných prohlížečích.
V&nbsp;současnosti je tímto virtuálním strojem <i>WebAssembly</i>, což je popis
instrukcí tohoto stroje i jeho očekávaného chování. Díky tomu, že je
WebAssembly <a href="https://caniuse.com/#feat=wasm">podporován prakticky všemi
relevantními prohlížeči</a>, začal se postupně rozšiřovat, zejména ve výpočetně
intenzivnějších aplikacích (například se jedná o šachový engine atd.).</p>

<p>Jednu z&nbsp;dnes velmi populárních technik umožňujících použití prakticky
libovolného programovacího jazyka pro tvorbu aplikací běžících na straně
webového prohlížeče, představuje použití takzvaných <i>transcompilerů
(source-to-source compiler)</i> zajišťujících překlad programu napsaného ve
zdrojovém programovacím jazyce do funkčně identického programu napsaného
v&nbsp;JavaScriptu (někdy se setkáme i s&nbsp;označením <a
href="https://scotch.io/tutorials/javascript-transpilers-what-they-are-why-we-need-them">transpiler</a>).
Transpřekladač se většinou spouští jen jednou na vývojářském počítači, samotní
klienti již mají k&nbsp;dispozici JavaScriptový kód. Výhodou tohoto řešení jsou
(obecně) menší nároky na klienta &ndash; ten nemusí stahovat a interpretovat
zbytečně velké množství kódu, protože dostane k&nbsp;dispozici již minifikovaný
kód v&nbsp;JavaScriptu.</p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti není technologie
transpřekladačů žádným způsobem svázána právě s&nbsp;JavaScriptem, protože se
používala (a používá) i pro další manipulace se zdrojovými kódy.</div></p>

<p>Existuje však i druhá možnost, kdy je samotný transpřekladač naprogramován
v&nbsp;JavaScriptu a současně je spouštěn přímo ve webovém prohlížeči klientů.
Oba přístupy mají své přednosti, ale pochopitelně i nějaké zápory (například
tvůrci uzavřených aplikací pravděpodobně budou upřednostňovat první možnost,
protože výstupy transcompilerů jsou většinou dosti nečitelné; dokonce by mohla
snaha o prozkoumání kódu spadat pod reverse engineering). Druhá možnost je
relativně elegantní v&nbsp;tom ohledu, že se z&nbsp;pohledu programátora webové
aplikace skutečně jedná o nový programovací jazyk, který je jakoby přímo
zpracováván prohlížečem na stejné úrovni jako JavaScript (v&nbsp;praxi se ovšem
ukazuje, že separace původního jazyka od JS engignu není tak čistá, jak by se
mohlo na první pohled zdát). Příkladem tohoto řešení může být kombinace
JavaScriptu a jazyka <a
href="https://www.root.cz/clanky/propojeni-sveta-lispu-se-svetem-javascriptu-s-vyuzitim-transprekladace-wisp/">WISP</a>:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Jazyk WISP na webové stránce&lt;/title&gt;
        &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
&nbsp;
        &lt;script src="wisp.min.js" type="application/javascript"&gt;
        &lt;/script&gt;
&nbsp;
        &lt;script type="application/wisp"&gt;
        (print "část naprogramovaná ve WISPu")
        &lt;/script&gt;
&nbsp;
        &lt;script type="application/javascript"&gt;
        console.log("část naprogramovaná v JavaScriptu")
        &lt;/script&gt;
&nbsp;
    &lt;/head&gt;
&nbsp;
    &lt;body&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Povšimněte si, že na jedné stránce můžeme kombinovat oba výše zmíněné
jazyky. Integrace jde ovšem ještě dále, protože z&nbsp;jednoho jazyka lze volat
funkci deklarovanou v&nbsp;jazyku druhém.</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Transpilery v&nbsp;nice ovládnuté JavaScriptem</h2>

<p>Problematikou takzvaných transpilerů nebo transpřekladačů
(<i>transcompilers, source-to-source compilers</i>), o nichž jsme se zmínili
v&nbsp;předchozí kapitole, jsme se již na stránkách Rootu zabývali, a to
dokonce několikrát. Připomeňme si například projekty <a
href="https://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">ClojureScript</a>
(transpřekladač Clojure &rarr; JavaScript), <a
href="https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/#k06">lua2js</a>
(transpřekladač Lua &rarr; opět JavaScript), <a
href="https://www.root.cz/clanky/propojeni-sveta-lispu-se-svetem-javascriptu-s-vyuzitim-transprekladace-wisp/">Wisp</a>
(programovací jazyk podobný Clojure, opět překládaný na pozadí do JavaScriptu)
i již výše zmíněný transpřekladač <a
href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">Coconut</a>
(ten ovšem nemá s&nbsp;JavaScriptem nic společného). Připomeňme si, že
transpřekladače jsou nástroje sloužící pro překlad algoritmů zapsaných
v&nbsp;nějakém zdrojovém programovacím jazyce do zvoleného cílového jazyka
(ovšem nikoli do nativního kódu či bajtkódu, to je totiž role běžných
překladačů).</p>

<p>Transpřekladače se v&nbsp;informatice používají již po několik desetiletí;
například se stále můžeme setkat s&nbsp;nástroji, které převádí kód
z&nbsp;nějakého vyššího programovacího jazyka do Céčka, které je dnes
s&nbsp;trochou nadsázky chápáno jako &bdquo;univerzální assembler&ldquo;. Asi
nejznámějším příkladem staršího použití transpřekladačů je nástroj nazvaný
<strong>web2c</strong>, jenž slouží pro transformaci zdrojových kódů
<i>TeXu</i> do céčka. Transpřekladače se stávají velmi populární i pro
programátory webových aplikací (proto se o nich dnes bavíme), a to zejména
z&nbsp;toho důvodu, že webové prohlížeče nativně podporují většinou pouze
JavaScript, který je tak přirozeně cílovým jazykem transpřekladačů (proto se
také JavaScriptu někdy říká &bdquo;assembler pro web&ldquo;, viz též <a
href="#k18">odkazy na konci článku</a>). A právě této problematice se budeme
podrobněji věnovat v&nbsp;navazujících kapitolách v&nbsp;souvislosti
s&nbsp;projektem Brython.</p>

<p>Z&nbsp;praxe můžeme uvést například následující projekty založené na
transpřekladači:</p>

<table>
<tr><th>#</th><th>Jazyk či transpřekladač</th><th>Poznámka</th></tr>
<tr><td>1</td><td>CoffeeScript</td><td>přidání syntaktického cukru do JavaScriptu</td></tr>
<tr><td>2</td><td><a href="https://www.root.cz/clanky/programovaci-jazyk-clojure-21-clojurescript-aneb-preklad-clojure-do-javascriptu/">ClojureScript</a></td><td>překlad aplikací psaných v&nbsp;Clojure do JavaScriptu</td></tr>
<tr><td>3</td><td>TypeScript</td><td>nadmnožina jazyka JavaScript, přidání datových typů</td></tr>
<tr><td>4</td><td>6to5</td><td>transpřeklad z&nbsp;ECMAScript 6 (nová varianta JavaScriptu) do starší varianty JavaScriptu</td></tr>
<tr><td>5</td><td>Kaffeine</td><td>rozšíření JavaScriptu o nové vlastnosti</td></tr>
<tr><td>6</td><td>RedScript</td><td>jazyk inspirovaný Ruby</td></tr>
<tr><td>7</td><td>GorillaScript</td><td>další rozšíření JavaScriptu</td></tr>
<tr><td>8</td><td>ghcjs</td><td>transpřekladač pro fanoušky programovacího jazyka Haskell</td></tr>
<tr><td>9</td><td>Haxe</td><td>transpřekladač, mezi jehož cílové jazyka patří i Java a JavaScript</td></tr>
<tr><td>10</td><td><a href="https://www.root.cz/clanky/propojeni-sveta-lispu-se-svetem-javascriptu-s-vyuzitim-transprekladace-wisp/">Wisp</a></td><td>transpřekladač jazyka podobného Clojure, opět do JavaScriptu</td></tr>
<tr><td>11</td><td>ScriptSharp</td><td>transpřekladač z&nbsp;C# do JavaScriptu</td></tr>
<tr><td>12</td><td>Dart</td><td>transpřekladač z&nbsp;jazyka Dart do JavaScriptu</td></tr>
<tr><td>13</td><td>COBOL &rarr; C</td><td>transpřekladač OpenCOBOL</td></tr>
<tr><td>14</td><td>COBOL &rarr; Java</td><td>transpřekladač P3COBOL</td></tr>
<tr><td>15</td><td><a href="https://www.root.cz/clanky/programovaci-jazyk-lua-v-roli-skriptovaciho-jazyka-pro-www-stranky/#k06">lua2js</a></td><td>transpřekladač jazyka Lua, opět do JavaScriptu</td></tr>
<tr><td>16</td><td>Coconut</td><td>transpřekladač jazyka Coconut do Pythonu</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: seznam všech (či alespoň většiny)
známých transpřekladačů do JavaScriptu naleznete například na stránce <a
href="https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS">https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS</a>,
i když je nutné varovat, že některé projekty (kromě výše zmíněných) jsou
v&nbsp;dosti špatném stavu popř.&nbsp;již vůbec nejsou udržovány.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Nástroj Emscripten</h2>

<p>Další alternativní technologii, která mi osobně přijde velmi zajímavá a
v&nbsp;budoucnu možná i přelomová, představují transpřekladače provádějící
překlad z&nbsp;bajtkódu či mezikódu do JavaScriptu (vstupem zde tedy není
zdrojový kód v&nbsp;nějakém lidsky čitelném programovacím jazyku, ale většinou
binárně reprezentovaný výsledek předchozího překladu). Příkladem tohoto typu
transpřekladače je především nástroj <i>Emscripten</i> [<a
href="https://emscripten.org/">1</a>] umožňující překlad kódu
z&nbsp;libovolného jazyka podporovaného LLVM (Rust, C, C++, Objective C, D,
Ada, Fortran atd.) do JavaScriptu. Podívejme se nyní ve stručnosti na všechny
základní kroky, které je zapotřebí provést proto, aby se původní zdrojový kód
napsaný například v&nbsp;Céčku, mohl nějakým způsobem spustit ve webovém
prohlížeči:</p>

<ol>
<li>Na vstupu celého procesu je program napsaný v&nbsp;céčku</li>
<li>Nejprve je proveden překlad pomocí <strong>clang</strong> do mezikódu LLVM
(<i>LLVM Intermediate Representation</i>)</li>
<li>Následně je zavolán <strong>Fastcomp</strong> (jádro překladače
Emscriptenu) pro překlad mezikódu z&nbsp;předchozího kroku do JavaScriptu</li>
<li>Výsledný JavaScriptový zdrojový kód je možné využít různými způsoby
(node.js na serveru, na WWW stránce atd.)</li>
</ol>

<p><div class="rs-tip-major">Poznámka: poslední překlad (do JavaScriptu)
generuje kód kompatibilní s&nbsp;<i>asm.js</i>, tj.&nbsp;používá se zde cíleně
omezená podmnožina konstrukcí JavaScriptu. Více informací o <i>asm.js</i>
naleznete například na stránkách <a
href="https://developer.mozilla.org/en-US/docs/Games/Tools/asm.js">https://developer.mozilla.org/en-US/docs/Games/Tools/asm.js</a>
a <a href="http://asmjs.org/">http://asmjs.org/</a> (původní verze
specifikace). Alternativně může být výsledkem i bajtkód pro WebAssembly, který
by měl být menší a tím pádem by se měl načíst a inicializovat rychleji, než je
tomu v&nbsp;případě <i>asm.js</i>.</div></p>

<p>Právě projekt <i>Emscripten</i> do značné míry usnadnil další způsob
zajištění běhu programů napsaných v&nbsp;různých programovacích jazycích ve
webovém prohlížeči. Pokud je totiž možné přeložit jakýkoli program napsaný
v&nbsp;jazycích C či C++ do JavaScriptu (samozřejmě za předpokladu, že se
vhodným způsobem budou emulovat použité knihovní funkce), proč by nebylo možné
do JavaScriptu rovnou přeložit celý virtuální stroj používaný daným
programovacím jazykem? Samozřejmě to možné je, a to zejména v&nbsp;těch
případech, kdy je překládaný virtuální stroj (alespoň z&nbsp;dnešního pohledu)
malý, což je příklad VM pro jazyk Lua, tak i například poněkud většího
virtuálního stroje Pythonu (.NET resp.&nbsp;CLR či Java VM už je pochopitelně
mnohem těžší oříšek).</p>

<p>Překladem virtuálního stroje do JavaScriptu získáme poměrně mnoho výhod,
zejména pak možnost mít přímo v&nbsp;HTML stránkách původní zdrojové kódy (Lua,
Python atd.) a nikoli méně či více nečitelný výstup z&nbsp;transpřekladačů. Za
tento postup však také zaplatíme, zejména pomalejším během aplikací
v&nbsp;porovnání s&nbsp;nativní VM. V&nbsp;praxi se může jednat o výkonnostní
propad zhruba na polovinu, což ovšem v&nbsp;mnoha aplikacích vůbec není tak
špatný výsledek.</p>

<p>Příkladem takového typu virtuálního stroje je <a
href="https://github.com/Doridian/LuaJS">LuaJS</a>. Ovšem dnes se zabýváme
Pythonem, pro který taktéž vznikl podobný nástroj. Jmenuje se jednoduše
<i>PyPy.js</i> a na stránce <a href="http://pypyjs.org/">http://pypyjs.org/</a>
si můžete sami ověřit, že samotný bootstrap je v&nbsp;případě tohoto projektu
dosti pomalý (další problém je, že v&nbsp;některých prohlížečích nelze získat
fokus terminálu).</p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Projekt Brython se představuje</h2>

<p>Ve druhé části článku se seznámíme s&nbsp;některými možnostmi, které nám
projekt Brython nabízí. Bude nás zajímat především to, jak se vlastně Brython
vloží do webové aplikace, jak se inicializuje, kam a jakým způsobem se uloží
zdrojové kódy front endu psané v&nbsp;Pythonu a v&nbsp;neposlední řadě je nutné
se seznámit i se způsobem, jakým Brython pracuje s&nbsp;DOMem webové stránky i
se systémem událostí (<i>events</i>). Bez podpory těchto dvou nezbytných částí
webové aplikace by použití Brythonu pro běžné projekty prakticky zcela
postrádalo význam.</p>

<p>Nejprve získáme všechny potřebné nástroje. Ty jsou dostupné na stránce <a
href="https://github.com/brython-dev/brython/releases">https://github.com/brython-dev/brython/releases</a>.
Stáhneme poslední oficiální verzi Brythonu vydanou doslova před několika
dny:</p>

<pre>
$ <strong>wget https://github.com/brython-dev/brython/releases/download/3.8.0/Brython-3.8.0.tar.bz2</strong>
</pre>

<p>Získaný tarball rozbalíme:</p>

<pre>
$ <strong>tar xvfj Brython-3.8.0.tar.bz2 </strong>
&nbsp;
Brython-3.8.0/README.txt
Brython-3.8.0/demo.html
Brython-3.8.0/brython.js
Brython-3.8.0/brython_stdlib.js
Brython-3.8.0/unicode.txt
</pre>

<p>Po rozbalení je zajímavé se podívat na velikosti jednotlivých souborů, které
tvoří transpřekladač Brythonu i jeho základní knihovnu (která se snaží být
kompatibilní s&nbsp;Pythonem 2 i 3):</p>

<pre>
$ <strong>ls -l</strong>
&nbsp;
total 4992
-rw-r--r-- 1 tester tester  707388 říj 15 12:16 brython.js
-rw-r--r-- 1 tester tester 3561739 říj 15 12:16 brython_stdlib.js
-rw-r--r-- 1 tester tester   40741 říj 15 12:16 demo.html
-rw-r--r-- 1 tester tester     324 říj 15 08:40 README.txt
-rw-r--r-- 1 tester tester     386 bře 29  2019 test.html
-rw-r--r-- 1 tester tester  787651 říj 15 12:16 unicode.txt
</pre>

<p>I když jsou oba soubory <strong>brython.js</strong> i
<strong>brython_stdlib.js</strong> <a
href="https://en.wikipedia.org/wiki/Minification_(programming)">minifikovány</a>,
je jejich velikost značná, protože si musíme uvědomit, že oba soubory budou
muset být (alespoň poprvé) přeneseny na klienta a tam následně interpretovány.
To může mnohdy podstatným způsobem prodloužit spuštění aplikace na straně
klienta, přičemž rychlost (či spíše pomalost) spuštění do značné míry závisí na
rychlosti přenosu dat a taktéž na kvalitě a rychlosti interpretru a JITu
JavaScriptu. Z&nbsp;tohoto důvodu není vhodné Brython používat například na
úvodních stránkách společností atd. (na druhou stranu je ovšem samotný běh
skriptů srovnatelný s&nbsp;JavaScriptem, takže se u rozsáhlejších podnikových
aplikací může pomalost prvního spuštění akceptovat).</p>

<p>V&nbsp;Brythonu je možné použít tyto základní funkce a třídy (bez nutnosti
jejich explicitního importu):</p>

<pre>
abs, all, any, ascii, bin, bool, bytes, callable, chr, classmethod, delattr,
dict, dir, divmod, enumerate, eval, exec, filter, float, frozenset, getattr,
globals, hasattr, hash, hex, id, input, int, isinstance, iter, len, list,
locals, map, max, memoryview, min, next, object, open, ord, pow, print,
property, range, repr, reversed, round, set, setattr, slice, sorted, str, sum,
super, tuple, type, vars, zip, __import__
</pre>

<p><div class="rs-tip-major">Poznámka: pro instalaci je možné použít i
<strong>pip</strong> nebo <strong>pip3</strong>:</div></p>

<pre>
$ <strong>pip3 install brython</strong>
</pre>

<p>popř.:</p>

<pre>
$ <strong>pip3 install --user brython</strong>
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Stránka s&nbsp;demonstračními příklady</h2>

<p>Po rozbalení všech souborů si můžeme v&nbsp;prohlížeči nechat zobrazit
stránku <strong>demo.html</strong> s&nbsp;následujícím výsledkem:</p>

<a href="https://www.root.cz/obrazek/394888/"><img src="https://i.iinfo.cz/images/575/brython-5-prev.png" class="image-394888" alt="&#160;" width="370" height="114" /></a>
<p><i>Obrázek 5: Stránka <strong>demo.html</strong> zobrazená ve webovém prohlížeči s&nbsp;povoleným JavaScriptem.</i></p>

<p><div class="rs-tip-major">Poznámka: zejména na méně výkonných počítačích je
patrné, že inicializace transpřekladače Brythonu i jeho ekosystému (základní
knihovny atd.) není okamžitá &ndash; celá stránka se mnohdy zobrazí až po
několika sekundách. Jedná se o zdržení, které v&nbsp;tomto případě není
způsobeno pomalým přenosem dat, ale &bdquo;pouze&ldquo; interpretací obou
souborů <strong>brython.js</strong> i <strong>brython_stdlib.js</strong>
společně se skripty uložené přímo do stránky
<strong>demo.html</strong>.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Python na webové stránce</h2>

<p>Nyní se podívejme na zcela základní způsob použití skriptů na webové
stránce. V&nbsp;následujícím příkladu zavoláme funkci
<strong>document.write</strong>, která vypíše text přímo do plocho stránky.
V&nbsp;případě JavaScriptu je tato úloha triviální:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Hello world in JavaScript&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;script type="application/javascript"&gt;
        document.write('Hello world!')
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Pokud ovšem budeme chtít použít Python tranpřekládaný Brythonem, je nutné
implementovat více kroků. Nejdříve je nutné, ideálně v&nbsp;hlavičce HTML
stránky, načíst výše zmíněný soubor <strong>brython.js</strong>:</p>

<pre>
&lt;script src="brython.js"&gt;&lt;/script&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: klidně můžete explicitně uvést i MIME
typ tohoto souboru.</div></p>

<p>Dále je nutné zajistit inicializaci transpřekladače, například
v&nbsp;události typu <strong>onload</strong>:</p>

<pre>
&lt;body onload="brython()"&gt;
...
...
...
</pre>

<p>Nyní přichází ta nejzajímavější část &ndash; samotný zdrojový kód, nyní již
naprogramovaný přímo v&nbsp;Pythonu:</p>

<pre>
&lt;script type="text/python"&gt;
from browser import document
&nbsp;
<strong>document.write('Hello world!')</strong>
&lt;/script&gt;
</pre>

<p>Celá stránka s&nbsp;inicializací Brythonu i se zdrojovým kódem napsaným
v&nbsp;Pythonu může vypadat takto:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Hello world in Python&lt;/title&gt;
        &lt;script src="brython.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body onload="brython()"&gt;
        &lt;script type="text/python"&gt;
        from browser import document
&nbsp;
        <strong>document.write('Hello world!')</strong>
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Základní přístup k&nbsp;DOMu stránky</h2>

<p>Ze skriptu napsaného v&nbsp;Pythonu lze přistupovat k&nbsp;DOMu stránky.
Následující příklad ukazuje, jakým způsobem je možné změnit text nadpisu (či
jiného elementu), jehož ID je nastaveno na &bdquo;nadpis&ldquo;:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Hello world #2 in Python&lt;/title&gt;
        &lt;script src="brython.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body onload="brython()"&gt;
        &lt;h1 id='nadpis'&gt;&lt;/h1&gt;
        &lt;script type="text/python"&gt;
        from browser import document
&nbsp;
        <strong>document.getElementById('nadpis').text = 'Hello world'</strong>
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Existuje ovšem i kratší způsob se stejným výsledkem:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Hello world #2 in Python&lt;/title&gt;
        &lt;script src="brython.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body onload="brython()"&gt;
        &lt;h1 id='nadpis'&gt;&lt;/h1&gt;
        &lt;script type="text/python"&gt;
        from browser import document
&nbsp;
        <strong>document['nadpis'].text = 'Hello world'</strong>
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Použití metody <strong>document.select()</strong></h2>

<p>Elementy na stránce lze vybírat i dalšími způsoby, nejenom pomocí jejich ID.
K&nbsp;výběru slouží metoda <strong>document.select()</strong>, které lze
předat řetězec, z&nbsp;jehož tvaru je odvozen příslušný typ selektoru:</p>

<table>
<tr><th>Zápis</th><th>Význam</th></tr>
<tr><td>document.select('.cls')    </td><td>elementy, jejichž třída je nastavena na &bdquo;cls&ldquo;</td></tr>
<tr><td>document.select('div')     </td><td>elementy daného typu</td></tr>
<tr><td>document.select('H1.cls')  </td><td>elementy daného typu, jejichž třída je nastavena na &bdquo;cls&ldquo;</td></tr>
<tr><td>document.select('#id')     </td><td>elementy se zvoleným ID (jako v&nbsp;předchozí kapitole)</td></tr>
<tr><td>document.select('a[title]')</td><td>elementy obsahující zadaný atribut</td></tr>
</table>

<p>Alternativní způsob výběru elementu pomocí jeho ID lze tedy provést i
následujícím způsobem:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Hello world #2 in Python&lt;/title&gt;
        &lt;script src="brython.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body onload="brython()"&gt;
        &lt;h1 id='nadpis'&gt;&lt;/h1&gt;
        &lt;script type="text/python"&gt;
        from browser import document
&nbsp;
        <strong>document.select('#nadpis')[0].text = 'Hello world'</strong>
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že je nutné získat první
vrácený element, i když by teoreticky měl existovat jen jediný element
s&nbsp;unikátním ID.</div></p>

<p>V&nbsp;dalším příkladu je vybrán element typu H1, jehož třída je nastavena
na &bdquo;nadpis&ldquo;:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Hello world #2 in Python&lt;/title&gt;
        &lt;script src="brython.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body onload="brython()"&gt;
        &lt;h1 class='nadpis'&gt;&lt;/h1&gt;
        &lt;script type="text/python"&gt;
        from browser import document
&nbsp;
        <strong>document.select('h1.nadpis')[0].text = 'Hello world'</strong>
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Přístup k&nbsp;obsahu stránky a naprogramování jednoduchého zpracování události</h2>

<p>Při tvorbě interaktivních webových aplikací je nutné reagovat na různé typy
událostí. Pro registraci události (na nějaký handler) se používá metoda
<strong>bind</strong>:</p>

<pre>
document["button1"].bind("click", echo)
</pre>

<p>Tento zápis zaregistruje událost typu &bdquo;click&ldquo; (tedy kliknutí
levým tlačítkem myši) pro tlačítko s&nbsp;identifikátorem
&bdquo;button1&ldquo;. Pokud k&nbsp;události dojde, zavolá se funkce
<strong>echo</strong> naprogramovaná přímo v&nbsp;Pythonu. Tato funkce vypíše
do dialogu obsah vstupního textového pole s&nbsp;identifikátorem
&bdquo;zone&ldquo;):</p>

<pre>
def echo(ev):
    alert(document["zone"].value)
</pre>

<p>Celý příklad (inspirovaný příkladem na stránce Brythonu) vypadá
následovně:</p>

<pre>
&lt;html&gt;
&lt;head&gt;
&lt;script src="brython.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython()"&gt;
&lt;script type="text/python"&gt;
from browser import document, alert
&nbsp;
<i># bind event 'click' on button to function echo</i>
&nbsp;
def echo(ev):
    <strong>alert(document["zone"].value)</strong>
&nbsp;
<strong>document["button1"].bind("click", echo)</strong>
alert("loaded")
&lt;/script&gt;
&lt;input id="zone"&gt;
&lt;button id="button1"&gt;click !&lt;/button&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Pythonní skript uložený ve zvláštním souboru</h2>

<p>Kombinace Pythonu přímo s&nbsp;HTML kódem stránky není většinou nejlepším
řešením pro jakékoli skripty delší než několik řádků. Brython umožňuje skript
uložit do zvláštního souboru a načíst ho běžným způsobem &ndash; přes značku
<strong>script</strong>. Nejprve si ukažme, jak se toto rozdělení provede a až
poté si popíšeme způsob spuštění takové stránky. Samotná HTML stránka se změní
následovně:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Hello world #3 in Python&lt;/title&gt;
        &lt;script src="brython.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body onload="brython()"&gt;
        &lt;h1 class='nadpis'&gt;&lt;/h1&gt;
        <strong>&lt;script type="text/python" src="hello_world.py" /&gt;</strong>
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p><div class="rs-tip-major">Povšimněte si, že se zde pouze odkazujeme na
skript, který ovšem již není součástí souboru s&nbsp;HTML stránkou.</div></p>

<p>Skript &bdquo;hello_world.py&ldquo; je již kompletně napsaný v&nbsp;Pythonu
a bude tedy korektně zobrazen i barevně zvýrazněn v&nbsp;prakticky jakémkoli
moderním programátorském textovém editoru:</p>

<pre>
from browser import document
&nbsp;
document.select('h1.nadpis')[0].text = 'Hello world'
</pre>

<p>Problém ovšem nastane při zobrazení stránky, protože webový prohlížeč
většinou odmítne načtení externího skriptu kvůli mechanismu <a
href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a>
(což je jen dobře, že k&nbsp;tomuto odmítnutí dojde). Řešení je jednoduché
&ndash; spustíme si vlastní HTTP server, který je dodáván přímo v&nbsp;základní
instalaci CPythonu (verze 2 i verze 3). Následující příkaz je nutné spustit
v&nbsp;adresáři, kde se nachází jak kód HTML stránky, tak i Pythonní
skript:</p>

<pre>
$ <strong>python3 -m http.server</strong>
&nbsp;
Serving HTTP on 0.0.0.0 port 8000 ...
127.0.0.1 - - [23/Oct/2019 20:50:34] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [23/Oct/2019 20:50:34] code 404, message File not found
127.0.0.1 - - [23/Oct/2019 20:50:34] "GET /favicon.ico HTTP/1.1" 404 -
127.0.0.1 - - [23/Oct/2019 20:50:37] "GET /test3.html HTTP/1.1" 200 -
127.0.0.1 - - [23/Oct/2019 20:50:37] "GET /brython.js HTTP/1.1" 200 -
127.0.0.1 - - [23/Oct/2019 20:50:37] "GET /test.py?1571856637812 HTTP/1.1" 200 -
</pre>

<p><div class="rs-tip-major">Poznámka: pochopitelně je možné použít i klasické
<strong>httpd</strong> s&nbsp;tím, že se HTML stránka i všechny další potřebné
soubory uloží do adresáře <strong>/var/www/</strong> (záleží pochopitelně na
konkrétním nastavení <strong>httpd</strong>).</div></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Přidání nových elementů na stránku</h2>

<p>Do HTML stránky lze přidat nové elementy s&nbsp;využitím přetíženého
operátoru &lt;=. Nové elementy se vytváří pomocí konstant definovaných
v&nbsp;modulu <strong>browser.html</strong>, přičemž je nutné mít na paměti, že
jména elementů se zapisují velkými písmeny. Podívejme se opět na jednoduchý
příklad typu &bdquo;Hello world&ldquo;, tentokrát ovšem implementovaný zcela
odlišným způsobem:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Hello world #4 in Python&lt;/title&gt;
        &lt;script src="brython.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body onload="brython()"&gt;
        &lt;script type="text/python"&gt;
from browser import document
from browser import html
&nbsp;
<strong>document &lt;= html.H1("Hello world!")</strong>
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Elementy vytvořené uvnitř jiných elementů</h2>

<p>Brython podporuje jeden pěkný trik &ndash; vytvoření elementů vnořených do
jiných elementů. Tohoto způsobu můžeme využít například pro vytvoření
číslovaného seznamu či seznamu s&nbsp;odrážkami:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Hello world #3 in Python&lt;/title&gt;
        &lt;script src="brython.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body onload="brython()"&gt;
        &lt;h1 class='nadpis'&gt;&lt;/h1&gt;
        &lt;script type="text/python"&gt;
from browser import document
from browser import html
&nbsp;
<strong>document &lt;= html.UL(html.LI('item %s' %i) for i in range(1,6))</strong>
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>



<p><a name="k16"></a></p>
<h2 id="k16">16. Práce se SVG</h2>

<p>Do HTML stránky je možné vložit vektorový obrázek SVG a manipulovat
s&nbsp;ním pomocí Brythonu. Pokud je například na stránce vytvořen prázdný SVG
obsahující plochu s&nbsp;ID nastavenou na &bdquo;drawing&ldquo;, můžeme provést
vykreslení vektorového obrázku:</p>

<pre>
from browser import document
from browser import svg
&nbsp;
title = svg.text('Title', x=70, y=25, font_size=22,
                 text_anchor="middle")
&nbsp;
circle = svg.circle(cx=70, cy=120, r=40,
                    stroke="black",stroke_width="2",fill="red")
</pre>

<p>Tyto dva elementy se přidají do kresby takto:</p>

<pre>
drawing = document['drawing']
drawing &lt;= title
drawing &lt;= circle
</pre>

<p>Samotný SVG může být skutečně prázdný:</p>

<pre>
&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="256" height="256" &gt;
    &lt;g id="drawing"&gt;
    &lt;/g&gt;
&lt;/svg&gt;
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. A je tedy Brython reálně nasaditelný?</h2>

<p>Vážený čtenář si pochopitelně (a to zcela oprávněně) může položit otázku,
jestli je Brython v&nbsp;současném stavu vůbec reálně použitelným projektem.
V&nbsp;dnešní podobě (verze 3.8.0) se jedná o stabilní řešení a samotné
zpracování skriptů může být pro běžné projekty dostatečně rychlé (ostatně
například při manipulaci s&nbsp;DOMem více záleží na rychlosti renderovacího
engine prohlížeče a nikoli interpretru jazyka). Ovšem musíme se zmínit i o
některých nevýhodách. Zejména je nutné počítat s&nbsp;tím, že webový prohlížeč
bude muset stáhnout celý (i když <i>minifikovaný</i>) zdrojový soubor
s&nbsp;transpřekladačem Pythonu i jeho základní knihovny. Jádro problému
spočívá ve velikosti tohoto souboru, která sice nemusí vadit u větších
vnitrofiremních aplikací (založených například na konceptu OPA), ovšem na
druhou stranu se nejedná o ten nejlepší nápad použít Brython například přímo na
úvodní stránce firmy/projektu dostupné na internetu &ndash; vliv pomalého
připojení je zde patrný, což si ostatně můžete odzkoušet například použitím
nástroje <a
href="https://wiki.linuxfoundation.org/networking/netem">netem</a>.</p>

<p>Komplikace mohou nastat i ve chvíli, kdy se webová aplikace netvoří na
zelené louce, ale provádí se úpravy existující aplikace naprogramované typicky
v&nbsp;JavaScriptu nebo v&nbsp;TypeScriptu (s&nbsp;jazykem CoffeeScript se již
setkávám méně často, ještě méně pak s&nbsp;Dartem, což je zvláštní, protože
před několika lety se právě o těchto dvou jazycích vedly dlouhé diskuze,
vznikala o nich spousta článků, příspěvků na konferencích atd.). Taktéž je
nutné počítat s&nbsp;tím, že při použití Brythonu nejsou k&nbsp;dispozici žádné
rozsáhlé a populární frameworky typu Angular či React, takže zde již skutečně
záleží na konkrétních požadavcích projektu a taktéž na složení vývojového týmu
popř.&nbsp;dostupnosti dalších front endových vývojářů.</p>

<p>Pokud vám projekt Brython z&nbsp;nějakého (například výše uvedeného) důvodu
nevyhovuje, ale stále preferujete použití Pythonu i na front endu, je možné
vyzkoušet některý alternativní projekt, který provádí transpřeklad na počítači
vývojáře (či ještě lépe na CI/CD) a nikoli až v&nbsp;prohlížeči uživatele.
Nejznámější alternativou je již výše zmíněný <a
href="https://transcrypt.org/">Transcrypt</a> popř.&nbsp;<a
href="http://skulpt.org/">Skulpt</a>.</p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Odkazy na Internetu</h2>

<ol>

<li>Ahead-of-time compilation<br />
<a href="https://en.wikipedia.org/wiki/Ahead-of-time_compilation">https://en.wikipedia.org/wiki/Ahead-of-time_compilation</a>
</li>

<li>Just-in-time compilation<br />
<a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">https://en.wikipedia.org/wiki/Just-in-time_compilation</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

<li>mypy<br />
<a href="http://www.mypy-lang.org/">http://www.mypy-lang.org/</a>
</li>

<li>RPython Language<br />
<a href="https://rpython.readthedocs.io/en/latest/rpython.html">https://rpython.readthedocs.io/en/latest/rpython.html</a>
</li>

<li>Numba<br />
<a href="http://numba.pydata.org/">http://numba.pydata.org/</a>
</li>

<li>How Brython works<br />
<a href="https://github.com/brython-dev/brython/wiki/How%20Brython%20works">https://github.com/brython-dev/brython/wiki/How%20Brython%20works</a>
</li>

<li>Brython &ndash;  A Python 3 implementation for client-side web programming<br />
<a href="http://www.brython.info/">http://www.brython.info/</a>
</li>

<li>Brython videos and talks<br />
<a href="https://github.com/brython-dev/brython/wiki/Brython-videos-and-talks">https://github.com/brython-dev/brython/wiki/Brython-videos-and-talks</a>
</li>

<li>Python in browser (tabulka s&nbsp;porovnáními)<br />
<a href="http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html">http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html</a>
</li>

<li>Coconut: Simple, elegant, Pythonic functional programming<br />
<a href="http://coconut-lang.org/">http://coconut-lang.org/</a>
</li>

<li>coconut 1.1.0 (Python package index)<br />
<a href="https://pypi.python.org/pypi/coconut/1.1.0">https://pypi.python.org/pypi/coconut/1.1.0</a>
</li>

<li>Coconut Tutorial<br />
<a href="http://coconut.readthedocs.io/en/master/HELP.html">http://coconut.readthedocs.io/en/master/HELP.html</a>
</li>

<li>Coconut FAQ<br />
<a href="http://coconut.readthedocs.io/en/master/FAQ.html">http://coconut.readthedocs.io/en/master/FAQ.html</a>
</li>

<li>Coconut Documentation<br />
<a href="http://coconut.readthedocs.io/en/master/DOCS.html">http://coconut.readthedocs.io/en/master/DOCS.html</a>
</li>

<li>Coconut na Redditu<br />
<a href="https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/">https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/</a>
</li>

<li>Repositář na GitHubu<br />
<a href="https://github.com/evhub/coconut">https://github.com/evhub/coconut</a>
</li>

<li>patterns<br />
<a href="https://github.com/Suor/patterns">https://github.com/Suor/patterns</a>
</li>

<li>Source-to-source compiler<br />
<a href="https://en.wikipedia.org/wiki/Source-to-source_compiler">https://en.wikipedia.org/wiki/Source-to-source_compiler</a>
</li>

<li>The Lua VM, on the Web<br />
<a href="https://kripken.github.io/lua.vm.js/lua.vm.js.html">https://kripken.github.io/lua.vm.js/lua.vm.js.html</a>
</li>

<li>Lua.vm.js REPL<br />
<a href="https://kripken.github.io/lua.vm.js/repl.html">https://kripken.github.io/lua.vm.js/repl.html</a>
</li>

<li>lua2js<br />
<a href="https://www.npmjs.com/package/lua2js">https://www.npmjs.com/package/lua2js</a>
</li>

<li>JavaScript is Assembly Language for the Web: Sematic Markup is Dead! Clean vs. Machine-coded HTML<br />
<a href="http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx">http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx</a>
</li>

<li>JavaScript is Web Assembly Language and that's OK.<br />
<a href="http://www.hanselman.com/blog/JavaScriptIsWebAssemblyLanguageAndThatsOK.aspx">http://www.hanselman.com/blog/JavaScriptIsWebAssemblyLanguageAndThatsOK.aspx</a>
</li>

<li>Dart<br />
<a href="https://www.dartlang.org/">https://www.dartlang.org/</a>
</li>

<li>CoffeeScript<br />
<a href="http://coffeescript.org/">http://coffeescript.org/</a>
</li>

<li>TypeScript<br />
<a href="http://www.typescriptlang.org/">http://www.typescriptlang.org/</a>
</li>

<li>JavaScript: The Web Assembly Language?<br />
<a href="http://www.informit.com/articles/article.aspx?p=1856657">http://www.informit.com/articles/article.aspx?p=1856657</a>
</li>

<li>asm.js<br />
<a href="http://asmjs.org/">http://asmjs.org/</a>
</li>

<li>List of languages that compile to JS<br />
<a href="https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS">https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS</a>
</li>

<li>WebAssembly<br />
<a href="https://webassembly.org/">https://webassembly.org/</a>
</li>

<li>WebAssembly na Wiki Golangu<br />
<a href="https://github.com/golang/go/wiki/WebAssembly">https://github.com/golang/go/wiki/WebAssembly</a>
</li>

<li>The future of WebAssembly - A look at upcoming features and proposals<br />
<a href="https://blog.scottlogic.com/2018/07/20/wasm-future.html">https://blog.scottlogic.com/2018/07/20/wasm-future.html</a>
</li>

<li>Writing WebAssembly By Hand<br />
<a href="https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html">https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html</a>
</li>

<li>WebAssembly Specification<br />
<a href="https://webassembly.github.io/spec/core/index.html">https://webassembly.github.io/spec/core/index.html</a>
</li>

<li>Index of Instructions<br />
<a href="https://webassembly.github.io/spec/core/appendix/index-instructions.html">https://webassembly.github.io/spec/core/appendix/index-instructions.html</a>
</li>

<li>The WebAssembly Binary Toolkit<br />
<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>
</li>

<li>Will WebAssembly replace JavaScript? Or Will WASM Make JavaScript More Valuable in Future?<br />
<a href="https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e">https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e</a>
</li>

<li>Roadmap (pro WebAssemly)<br />
<a href="https://webassembly.org/roadmap/">https://webassembly.org/roadmap/</a>
</li>

<li>Podpora canvasu ve webových prohlížečích<br />
<a href="https://caniuse.com/#feat=canvas">https://caniuse.com/#feat=canvas</a>
</li>

<li>Writing Web Applications (se zaměřením na jazyk Go)<br />
<a href="https://golang.org/doc/articles/wiki/">https://golang.org/doc/articles/wiki/</a>
</li>

<li>Golang Web Apps<br />
<a href="https://www.reinbach.com/blog/golang-webapps-1/">https://www.reinbach.com/blog/golang-webapps-1/</a>
</li>

<li>Python in Browser: How to choose between Brython, PyPy.js, Skulpt and Transcrypt?<br />
<a href="https://stackoverflow.com/questions/30155551/python-in-browser-how-to-choose-between-brython-pypy-js-skulpt-and-transcrypt">https://stackoverflow.com/questions/30155551/python-in-browser-how-to-choose-between-brython-pypy-js-skulpt-and-transcrypt</a>
</li>

<li>Google web toolkit<br />
<a href="http://www.gwtproject.org/">http://www.gwtproject.org/</a>
</li>

<li>Transcrypt<br />
<a href="https://transcrypt.org/">https://transcrypt.org/</a>
</li>

<li>Skulpt: Python. Client Side.<br />
<a href="http://skulpt.org/">http://skulpt.org/</a>
</li>

<li>Web Browser Programming in Python<br />
<a href="https://wiki.python.org/moin/WebBrowserProgramming">https://wiki.python.org/moin/WebBrowserProgramming</a>
</li>

<li>RPython Frontend and C Wrapper Generator<br />
<a href="http://www.codeforge.com/article/383293">http://www.codeforge.com/article/383293</a>
</li>

<li>PyPy’s Approach to Virtual Machine Construction<br />
<a href="https://bitbucket.org/pypy/extradoc/raw/tip/talk/dls2006/pypy-vm-construction.pdf">https://bitbucket.org/pypy/extradoc/raw/tip/talk/dls2006/pypy-vm-construction.pdf</a>
</li>

<li>Tutorial: Writing an Interpreter with PyPy, Part 1<br />
<a href="https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html">https://morepypy.blogspot.com/2011/04/tutorial-writing-interpreter-with-pypy.html</a>
</li>

<li>A simple interpreter from scratch in Python (part 1)<br />
<a href="http://www.jayconrod.com/posts/37/a-simple-interpreter-from-scratch-in-python-part-1">http://www.jayconrod.com/posts/37/a-simple-interpreter-from-scratch-in-python-part-1</a>
</li>

<li>Python 2.7 will retire in...<br />
<a href="https://pythonclock.org/">https://pythonclock.org/</a>
</li>

<li>PyPy (home page)<br />
<a href="https://pypy.org/">https://pypy.org/</a>
</li>

<li>PyPy (dokumentace)<br />
<a href="http://doc.pypy.org/en/latest/">http://doc.pypy.org/en/latest/</a>
</li>

<li>Dart<br />
<a href="https://dart.dev/">https://dart.dev/</a>
</li>

<li>VBScript<br />
<a href="https://en.wikipedia.org/wiki/VBScript">https://en.wikipedia.org/wiki/VBScript</a>
</li>

<li>Minification (programming)<br />
<a href="https://en.wikipedia.org/wiki/Minification_(programming)">https://en.wikipedia.org/wiki/Minification_(programming)</a>
</li>

<li>netem<br />
<a href="https://wiki.linuxfoundation.org/networking/netem">https://wiki.linuxfoundation.org/networking/netem</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2019</small></p>
</body>
</html>

