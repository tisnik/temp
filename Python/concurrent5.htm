<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. </a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<pre>
import <strong>trio</strong>
&nbsp;
&nbsp;
<u>async def</u> <strong>producer</strong>(send_channel):
    for i in range(1, 10):
        message = f"message {i}"
        print(f"Producer: {message}")
        <u>await</u> send_channel.send(message)
&nbsp;
&nbsp;
<u>async def</u> <strong>consumer</strong>(receive_channel):
    async for value in receive_channel:
        print(f"Consumer: received{value!r}")
        <u>await</u> trio.sleep(1)
&nbsp;
&nbsp;
<u>async def</u> <strong>main</strong>():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(0)
        nursery.start_soon(producer, send_channel)
        nursery.start_soon(consumer, receive_channel)
&nbsp;
&nbsp;
trio.run(main)
</pre>

<p><div class="rs-tip-major">Poznámka: úplný zdrojový kód tohoto demonstračního
příkladu je dostupný na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_14.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_14.py</a>.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. </h2>

<pre>
import <strong>trio</strong>


<u>async def</u> producer(send_channel):
    for i in range(1, 1000):
        message = f"message {i}"
        print(f"Producer: {message}")
        <u>await</u> send_channel.send(message)


<u>async def</u> main():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(0)
        nursery.start_soon(producer, send_channel)


trio.run(main)
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<pre>
import <strong>trio</strong>


<u>async def</u> producer(send_channel):
    for i in range(1, 1000):
        message = f"message {i}"
        print(f"Producer: {message}")
        <u>await</u> send_channel.send(message)


<u>async def</u> main():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(10)
        nursery.start_soon(producer, send_channel)


trio.run(main)
</pre>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<pre>
import <strong>trio</strong>


<u>async def</u> producer(send_channel):
    for i in range(1, 1000):
        message = f"message {i}"
        print(f"Producer: {message}")
        send_channel.send_nowait(message)


<u>async def</u> main():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(10)
        nursery.start_soon(producer, send_channel)


trio.run(main)
</pre>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<pre>
import <strong>trio</strong>


<u>async def</u> producer(send_channel):
    for i in range(1, 1000):
        message = f"message {i}"
        print(f"Producer: {message}")
        with trio.fail_after(1):
            <u>await</u> send_channel.send(123)


<u>async def</u> main():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(10)
        nursery.start_soon(producer, send_channel)


trio.run(main)
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
import <strong>trio</strong>


<u>async def</u> consumer(receive_channel):
    async for value in receive_channel:
        print(f"Consumer: received{value!r}")
        <u>await</u> trio.sleep(1)


<u>async def</u> main():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(0)
        nursery.start_soon(consumer, receive_channel)


trio.run(main)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<pre>
import <strong>trio</strong>


<u>async def</u> consumer(receive_channel):
    while True:
        value = <u>await</u> receive_channel.receive()
        print(f"Consumer: received{value!r}")
        <u>await</u> trio.sleep(1)


<u>async def</u> main():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(0)
        nursery.start_soon(consumer, receive_channel)


trio.run(main)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<pre>
import <strong>trio</strong>


<u>async def</u> consumer(receive_channel):
    while True:
        value = receive_channel.receive_nowait()
        print(f"Consumer: received{value!r}")
        <u>await</u> trio.sleep(1)


<u>async def</u> main():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(0)
        nursery.start_soon(consumer, receive_channel)


trio.run(main)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<pre>
import <strong>trio</strong>


<u>async def</u> consumer(receive_channel):
    while True:
        with trio.fail_after(1):
            value = <u>await</u> receive_channel.receive()
            print(f"Consumer: received{value!r}")
            <u>await</u> trio.sleep(1)


<u>async def</u> main():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(0)
        nursery.start_soon(consumer, receive_channel)


trio.run(main)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<pre>
import <strong>trio</strong>


num_producers = 5
num_consumers = 20


<u>async def</u> producer(id, send_channel):
    for i in range(1, 10):
        message = f"message {i}"
        print(f"Producer #{id}: {message}")
        <u>await</u> send_channel.send(message)


<u>async def</u> consumer(id, receive_channel):
    async for value in receive_channel:
        print(f"Consumer #{id}: received{value!r}")
        <u>await</u> trio.sleep(1)


<u>async def</u> main():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(0)
        for id in range(num_producers):
            nursery.start_soon(producer, id, send_channel)
        for id in range(num_consumers):
            nursery.start_soon(consumer, id, receive_channel)


trio.run(main)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<pre>
import <strong>trio</strong>


num_producers = 5
num_consumers = 20
consumer_timeout = 2
producer_timeout = 2


<u>async def</u> producer(id, send_channel):
    for i in range(1, 10):
        message = f"message {i}"
        print(f"Producer #{id}: {message}")
        with trio.fail_after(producer_timeout):
            <u>await</u> send_channel.send(message)


<u>async def</u> consumer(id, receive_channel):
    while True:
        with trio.fail_after(1):
            value = <u>await</u> receive_channel.receive()
            print(f"Consumer #{id}: received{value!r}")
            <u>await</u> trio.sleep(1)


<u>async def</u> main():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(0)
        for id in range(num_producers):
            nursery.start_soon(producer, id, send_channel)
        for id in range(num_consumers):
            nursery.start_soon(consumer, id, receive_channel)


trio.run(main)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<pre>
import <strong>trio</strong>


<u>async def</u> producer(send_channel):
    <u>async with</u> send_channel:
        for i in range(1, 10):
            message = f"message {i}"
            print(f"Producer: {message}")
            <u>await</u> send_channel.send(message)


<u>async def</u> consumer(receive_channel):
    async for value in receive_channel:
        print(f"Consumer: received{value!r}")
        <u>await</u> trio.sleep(1)
    print("No more messages can be received!")


<u>async def</u> main():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(0)
        nursery.start_soon(producer, send_channel)
        nursery.start_soon(consumer, receive_channel)


trio.run(main)
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<pre>
import <strong>trio</strong>


num_producers = 5
num_consumers = 20


<u>async def</u> producer(id, send_channel):
    <u>async with</u> send_channel:
        for i in range(1, 10):
            message = f"message {i}"
            print(f"Producer #{id}: {message}")
            <u>await</u> send_channel.send(message)


<u>async def</u> consumer(id, receive_channel):
    async for value in receive_channel:
        print(f"Consumer #{id}: received{value!r}")
        <u>await</u> trio.sleep(id)
    print("No more messages can be received!")


<u>async def</u> main():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(0)
        for id in range(num_producers):
            nursery.start_soon(producer, id, send_channel)
        for id in range(num_consumers):
            nursery.start_soon(consumer, id, receive_channel)


trio.run(main)
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<pre>
import <strong>trio</strong>


num_producers = 5
num_consumers = 20


<u>async def</u> producer(id, send_channel):
    <u>async with</u> send_channel:
        for i in range(1, 10):
            message = f"message {i}"
            print(f"Producer #{id}: {message}")
            <u>await</u> send_channel.send(message)


<u>async def</u> consumer(id, receive_channel):
    async for value in receive_channel:
        print(f"Consumer #{id}: received{value!r}")
        <u>await</u> trio.sleep(id)
    print("No more messages can be received!")


<u>async def</u> main():
    <u>async with</u> trio.open_nursery() as nursery:
        send_channel, receive_channel = trio.open_memory_channel(0)
        <u>async with</u> send_channel, receive_channel:
            for id in range(num_producers):
                nursery.start_soon(producer, id, send_channel.clone())
            for id in range(num_consumers):
                nursery.start_soon(consumer, id, receive_channel.clone())


trio.run(main)
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 byly uloženy do Git repositáře dostupného na adrese
<a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>multithreading1.py</td><td>spuštění tří vláken vykonávajících déletrvající činnost</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading1.py</a></td></tr>
<tr><td> 2</td><td>multithreading2.py</td><td>spuštění tří vláken, předání parametrů volaným funkcím</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading2.py</a></td></tr>
<tr><td> 3</td><td>multithreading3.py</td><td>explicitní čekání na dokončení běhu vláken metodou <strong>join</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading3.py</a></td></tr>
<tr><td> 4</td><td>multithreading4.py</td><td>sdílený objekt</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading4.py</a></td></tr>
<tr><td> 5</td><td>multithreading_join_deamon.py</td><td>čekání na dokončení vláken s&nbsp;příznakem &bdquo;daemon&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_join_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_join_deamon.py</a></td></tr>
<tr><td> 6</td><td>multithreading_no_join_deamon.py</td><td>vlákna s&nbsp;příznakem &bdquo;daemon&ldquo;, na jejichž ukončení se nečeká</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_deamon.py</a></td></tr>
<tr><td> 7</td><td>multithreading_no_join_no_deamon.py</td><td>běžná vlákna bez příznaku &bdquo;daemon&ldquo;</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_no_deamon.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_no_join_no_deamon.py</a></td></tr>
<tr><td> 8</td><td>multithreading_timeout.py</td><td>specifikace maximální doby čekání na ukončení vlákna</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_timeout.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multithreading_timeout.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>multiprocessing1.py</td><td>zavolání funkce spuštěné v&nbsp;rámci dalšího procesu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing1.py</a></td></tr>
<tr><td>10</td><td>multiprocessing2.py</td><td>spuštění většího množství procesů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing2.py</a></td></tr>
<tr><td>11</td><td>multiprocessing3.py</td><td>nepatrná úprava předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing3.py</a></td></tr>
<tr><td>12</td><td>multiprocessing4.py</td><td>řízení workerů posílanými příkazy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing4.py</a></td></tr>
<tr><td>13</td><td>multiprocessing5.py</td><td>řízení workerů posílanými příkazy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing5.py</a></td></tr>
<tr><td>14</td><td>multiprocessing6.py</td><td>jeden proces a sdílená globální hodnota</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing6.py</a></td></tr>
<tr><td>15</td><td>multiprocessing7.py</td><td>více procesů, které nesdílí hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/multiprocessing7.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>16</td><td>queue_example.py</td><td>základní vlastnosti sdílené datové struktury <strong>Queue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queue_example.py</a></td></tr>
<tr><td>17</td><td>simple_queue_example.py</td><td>základní vlastnosti sdílené datové struktury <strong>SimpleQueue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/simple_queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/simple_queue_example.py</a></td></tr>
<tr><td>18</td><td>priority_queue_example.py</td><td>základní vlastnosti sdílené datové struktury <strong>PriorityQueue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/priority_queue_example.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/priority_queue_example.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>19</td><td>queues1.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: základní forma</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues1.py</a></td></tr>
<tr><td>20</td><td>queues2.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: více konzumentů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues2.py</a></td></tr>
<tr><td>21</td><td>queues3.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: více producentů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues3.py</a></td></tr>
<tr><td>22</td><td>queues4.py</td><td>komunikace mezi vlákny s&nbsp;využitím front: více producentů i konzumentů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/queues4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>23</td><td>thread_pool_1.py</td><td>spuštění tří úloh ve třech vláknech</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_1.py</a></td></tr>
<tr><td>24</td><td>thread_pool_2.py</td><td>spuštění deseti úloh v&nbsp;deseti vláknech</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_2.py</a></td></tr>
<tr><td>25</td><td>thread_pool_3.py</td><td>omezení počtu vláken na 3 pro celkem deset úloh</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_3.py</a></td></tr>
<tr><td>26</td><td>thread_pool_4.py</td><td>návratová hodnota získaná po spuštění úlohy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_4.py</a></td></tr>
<tr><td>27</td><td>thread_pool_5.py</td><td>získání vypočtených hodnot</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_5.py</a></td></tr>
<tr><td>28</td><td>thread_pool_6.py</td><td>alternativní způsob zápisu předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/thread_pool_6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>29</td><td>process_pool_1.py</td><td>spuštění tří úloh ve vlastních procesech</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_1.py</a></td></tr>
<tr><td>30</td><td>process_pool_2.py</td><td>návratové hodnoty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_2.py</a></td></tr>
<tr><td>31</td><td>process_pool_3.py</td><td>čekání na dokončení úloh + získání návratových hodnot</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/process_pool_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>32</td><td>async_await_1.py</td><td>základní způsob použití <strong>async</strong> a <strong>await</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_1.py</a></td></tr>
<tr><td>33</td><td>async_await_2.py</td><td>funkce <strong>main</strong> volaná asynchronně</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_2.py</a></td></tr>
<tr><td>34</td><td>async_await_3.py</td><td>dvě asynchronně běžící úlohy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_3.py</a></td></tr>
<tr><td>35</td><td>async_await_4.py</td><td>získání výsledků z&nbsp;asynchronně běžících úloh</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_await_4.py</a></td></tr>
<tr><td>36</td><td>async_queue_1.py</td><td>fronty pro kooperace mezi korutinami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_1.py</a></td></tr>
<tr><td>37</td><td>async_queue_2.py</td><td>korektní spuštění většího množství korutin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_2.py</a></td></tr>
<tr><td>38</td><td>async_queue_3.py</td><td>využití <strong>asyncio.gather</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_queue_3.py</a></td></tr>
<tr><td>39</td><td>async_aiohttp_1.py</td><td>použití knihovny <strong>aiohttp</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_1.py</a></td></tr>
<tr><td>40</td><td>async_aiohttp_2.py</td><td>záznam časů trvání jednotlivých operací</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_2.py</a></td></tr>
<tr><td>41</td><td>async_aiohttp_3.py</td><td>vylepšení předchozího příkladu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_3.py</a></td></tr>
<tr><td>42</td><td>async_aiohttp_4.py</td><td>využití deseti korutin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_aiohttp_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>43</td><td>curio_01.py</td><td>základní konstrukce nabízené knihovnou <strong>curio</strong> (<strong>curio.run</strong>)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_01.py</a></td></tr>
<tr><td>44</td><td>curio_02.py</td><td>předání parametrů asynchronně volané korutině při volání <strong>curio.run</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_02.py</a></td></tr>
<tr><td>45</td><td>curio_03.py</td><td>chování programu při spuštění několika korutin funkcí <strong>curio.run</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_03.py</a></td></tr>
<tr><td>46</td><td>curio_04.py</td><td>asynchronní spuštění korutin pomocí <strong>curio.spawn</strong> (nekorektní příklad)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_04.py</a></td></tr>
<tr><td>47</td><td>curio_05.py</td><td>asynchronní spuštění korutin pomocí <strong>curio.spawn</strong> (korektní příklad)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_05.py</a></td></tr>
<tr><td>48</td><td>curio_06.py</td><td>čekání na dokončení korutin s&nbsp;využitím metody <strong>task.join</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_06.py</a></td></tr>
<tr><td>49</td><td>curio_07.py</td><td>spuštění monitoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_07.py</a></td></tr>
<tr><td>50</td><td>curio_08.py</td><td>využití fronty pro předávání parametrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_08.py</a></td></tr>
<tr><td>51</td><td>curio_09.py</td><td>datová struktura <strong>curio.UniversalQueue</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_09.py</a></td></tr>
<tr><td>52</td><td>curio_10.py</td><td>klasický program typu producent-konzument</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_10.py</a></td></tr>
<tr><td>53</td><td>curio_11.py</td><td>výsledky vrácené korutinami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_11.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_11.py</a></td></tr>
<tr><td>54</td><td>curio_12.py</td><td>výsledky vrácené dlouho běžícími korutinami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_12.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_12.py</a></td></tr>
<tr><td>55</td><td>curio_13.py</td><td>čekání na výsledky po stanovený mezní časový interval</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_13.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_13.py</a></td></tr>
<tr><td>56</td><td>curio_14.py</td><td>reakce na vypršení mezního časového intervalu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_14.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_14.py</a></td></tr>
<tr><td>57</td><td>curio_15.py</td><td>výjimka vzniklá v&nbsp;korutině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_15.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_14.py</a></td></tr>
<tr><td>58</td><td>curio_16.py</td><td>reakce na výjimku vyhozenou v&nbsp;korutině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_16.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/curio_16.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>59</td><td>with_block.py</td><td>blok <strong>with</strong> a <i>context manager</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/with_block.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/with_block.py</a></td></tr>
<tr><td>60</td><td>async_with_block.py</td><td>blok <strong>async with</strong> a asynchronní <i>context manager</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_with_block.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/async_with_block.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>61</td><td>trio_01.py</td><td>spuštění korutiny knihovnou <strong>Trio</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_01.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_01.py</a></td></tr>
<tr><td>62</td><td>trio_01_error.py</td><td>chybné vynechání slova <strong>awai</strong> při volání jiné korutiny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_01_error.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_01_error.py</a></td></tr>
<tr><td>63</td><td>trio_02.py</td><td>déletrvající souběžně běžící úloha</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_02.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_02.py</a></td></tr>
<tr><td>64</td><td>trio_03.py</td><td>tři souběžně běžící úlohy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_03.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_03.py</a></td></tr>
<tr><td>65</td><td>trio_04.py</td><td>základní způsob použití objektu <strong>nursery</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_04.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_04.py</a></td></tr>
<tr><td>66</td><td>trio_05.py</td><td>hodnota získaná po spuštění korutiny</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_05.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_05.py</a></td></tr>
<tr><td>67</td><td>trio_06.py</td><td>trojice postupně spuštěných korutin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_06.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_06.py</a></td></tr>
<tr><td>68</td><td>trio_07.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_07.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_07.py</a></td></tr>
<tr><td>69</td><td>trio_08.py</td><td>vyhození výjimky v&nbsp;korutině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_08.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_08.py</a></td></tr>
<tr><td>70</td><td>trio_09.py</td><td>pokus o zachycení výjimky v&nbsp;korutině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_09.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_09.py</a></td></tr>
<tr><td>71</td><td>trio_10.py</td><td>vznik výjimek v&nbsp;několika korutinách</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_10.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_10.py</a></td></tr>
<tr><td>72</td><td>trio_11.py</td><td>paměťové nároky programu se 100 korutinami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_11.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_11.py</a></td></tr>
<tr><td>73</td><td>trio_12.py</td><td>paměťové nároky programu s&nbsp;10000 korutinami</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_12.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_12.py</a></td></tr>
<tr><td>74</td><td>trio_13.py</td><td>spuštění 10000 souběžných úloh</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_13.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_13.py</a></td></tr>
<tr><td>75</td><td>trio_14.py</td><td>ukázka klasické úlohy typu producent-konzument</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_14.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_14.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>76</td><td>trio_15.py</td><td>programátorem vyvolané výjimky v&nbsp;korutině</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_15.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_15.py</a></td></tr>
<tr><td>77</td><td>trio_16.py</td><td>zachycení výjimky typu <strong>TaskError</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_16.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_16.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>78</td><td>trio_17_no_consumer.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_17_no_consumer.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_17_no_consumer.py</a></td></tr>
<tr><td>79</td><td>trio_18_no_consumer_capacity.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_18_no_consumer_capacity.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_18_no_consumer_capacity.py</a></td></tr>
<tr><td>80</td><td>trio_19_no_consumer_no_wait.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_19_no_consumer_no_wait.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_19_no_consumer_no_wait.py</a></td></tr>
<tr><td>81</td><td>trio_20_no_consumer_fail_after.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_20_no_consumer_fail_after.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_20_no_consumer_fail_after.py</a></td></tr>
<tr><td>82</td><td>trio_21_no_producer.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_21_no_producer.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_21_no_producer.py</a></td></tr>
<tr><td>83</td><td>trio_22_no_producer_B.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_22_no_producer_B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_22_no_producer_B.py</a></td></tr>
<tr><td>84</td><td>trio_23_no_producer_no_wait.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_23_no_producer_no_wait.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_23_no_producer_no_wait.py</a></td></tr>
<tr><td>85</td><td>trio_24_no_producer_fail_after.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_24_no_producer_fail_after.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_24_no_producer_fail_after.py</a></td></tr>
<tr><td>86</td><td>trio_25_multiple_prod_cons.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_25_multiple_prod_cons.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_25_multiple_prod_cons.py</a></td></tr>
<tr><td>87</td><td>trio_26_timeouts.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_26_timeouts.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_26_timeouts.py</a></td></tr>
<tr><td>88</td><td>trio_27_channel_close.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_27_channel_close.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_27_channel_close.py</a></td></tr>
<tr><td>89</td><td>trio_28_multiple_channel_close.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_28_multiple_channel_close.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_28_multiple_channel_close.py</a></td></tr>
<tr><td>90</td><td>trio_29_multiple_channel_close.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_29_multiple_channel_close.py">https://github.com/tisnik/most-popular-python-libs/blob/master/concurrent/trio_29_multiple_channel_close.py</a></td></tr>
</table>                                                                                                                                                                                                                                                              



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Dokumentace Pythonu: balíček queue<br />
<a href="https://docs.python.org/3/library/queue.html">https://docs.python.org/3/library/queue.html</a>
</li>

<li>Dokumentace Pythonu: balíček threading<br />
<a href="https://docs.python.org/3/library/threading.html?">https://docs.python.org/3/library/threading.html?</a>
</li>

<li>Dokumentace Pythonu: balíček multiprocessing<br />
<a href="https://docs.python.org/3/library/multiprocessing.html">https://docs.python.org/3/library/multiprocessing.html</a>
</li>

<li>Dokumentace Pythonu: balíček asyncio<br />
<a href="https://docs.python.org/3/library/asyncio.html">https://docs.python.org/3/library/asyncio.html</a>
</li>

<li>Synchronization Primitives<br />
<a href="https://docs.python.org/3/library/asyncio-sync.html">https://docs.python.org/3/library/asyncio-sync.html</a>
</li>

<li>Coroutines<br />
<a href="https://docs.python.org/3/library/asyncio-task.html">https://docs.python.org/3/library/asyncio-task.html</a>
</li>

<li>Queues<br />
<a href="https://docs.python.org/3/library/asyncio-queue.html">https://docs.python.org/3/library/asyncio-queue.html</a>
</li>

<li>python-csp<br />
<a href="https://python-csp.readthedocs.io/en/latest/">https://python-csp.readthedocs.io/en/latest/</a>
</li>

<li>TrellisSTM<br />
<a href="http://peak.telecommunity.com/DevCenter/TrellisSTM">http://peak.telecommunity.com/DevCenter/TrellisSTM</a>
</li>

<li>Python Multithreading and Multiprocessing Tutorial<br />
<a href="https://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python">https://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python</a>
</li>

<li>ThreadPoolExecutor<br />
<a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor">https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor</a>
</li>

<li>ProcessPoolExecutor<br />
<a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor">https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor</a>
</li>

<li>asyncio — Asynchronous I/O<br />
<a href="https://docs.python.org/3/library/asyncio.html">https://docs.python.org/3/library/asyncio.html</a>
</li>

<li>Threads vs Async: Has Asyncio Solved Concurrency?<br />
<a href="https://www.youtube.com/watch?v=NZq31Sg8R9E">https://www.youtube.com/watch?v=NZq31Sg8R9E</a>
</li>

<li>Python Asynchronous Programming &ndash; AsyncIO &amp; Async/Await<br />
<a href="https://www.youtube.com/watch?v=t5Bo1Je9EmE">https://www.youtube.com/watch?v=t5Bo1Je9EmE</a>
</li>

<li>AsyncIO &amp; Asynchronous Programming in Python<br />
<a href="https://www.youtube.com/watch?v=6RbJYN7SoRs">https://www.youtube.com/watch?v=6RbJYN7SoRs</a>
</li>

<li>Coroutines and Tasks<br />
<a href="https://docs.python.org/3/library/asyncio-task.html">https://docs.python.org/3/library/asyncio-task.html</a>
</li>

<li>Python async/await Tutorial<br />
<a href="https://stackabuse.com/python-async-await-tutorial/">https://stackabuse.com/python-async-await-tutorial/</a>
</li>

<li>Demystifying Python's Async and Await Keywords<br />
<a href="https://www.youtube.com/watch?v=F19R_M4Nay4">https://www.youtube.com/watch?v=F19R_M4Nay4</a>
</li>

<li>Curio<br />
<a href="https://curio.readthedocs.io/en/latest/">https://curio.readthedocs.io/en/latest/</a>
</li>

<li>Trio: a friendly Python library for async concurrency and I/O<br />
<a href="https://trio.readthedocs.io/en/stable/">https://trio.readthedocs.io/en/stable/</a>
</li>

<li>Curio &ndash; A Tutorial Introduction<br />
<a href="https://curio.readthedocs.io/en/latest/tutorial.html">https://curio.readthedocs.io/en/latest/tutorial.html</a>
</li>

<li>unsync<br />
<a href="https://github.com/alex-sherman/unsync">https://github.com/alex-sherman/unsync</a>
</li>

<li>David Beazley - Die Threads<br />
<a href="https://www.youtube.com/watch?v=xOyJiN3yGfU">https://www.youtube.com/watch?v=xOyJiN3yGfU</a>
</li>

<li>Miguel Grinberg Asynchronous Python for the Complete Beginner PyCon 2017<br />
<a href="https://www.youtube.com/watch?v=iG6fr81xHKA">https://www.youtube.com/watch?v=iG6fr81xHKA</a>
</li>

<li>Build Your Own Async<br />
<a href="https://www.youtube.com/watch?v=Y4Gt3Xjd7G8">https://www.youtube.com/watch?v=Y4Gt3Xjd7G8</a>
</li>

<li>The Other Async (Threads + Async = ❤️)<br />
<a href="https://www.youtube.com/watch?v=x1ndXuw7S0s">https://www.youtube.com/watch?v=x1ndXuw7S0s</a>
</li>

<li>Fear and Awaiting in Async: A Savage Journey to the Heart of the Coroutine Dream<br />
<a href="https://www.youtube.com/watch?v=E-1Y4kSsAFc">https://www.youtube.com/watch?v=E-1Y4kSsAFc</a>
</li>

<li>Keynote David Beazley - Topics of Interest (Python Asyncio)<br />
<a href="https://www.youtube.com/watch?v=ZzfHjytDceU">https://www.youtube.com/watch?v=ZzfHjytDceU</a>
</li>

<li>David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015<br />
<a href="https://www.youtube.com/watch?v=MCs5OvhV9S4">https://www.youtube.com/watch?v=MCs5OvhV9S4</a>
</li>

<li>Python Async basics video (100 million HTTP requests)<br />
<a href="https://www.youtube.com/watch?v=Mj-Pyg4gsPs">https://www.youtube.com/watch?v=Mj-Pyg4gsPs</a>
</li>

<li>Nathaniel J. Smith - Trio: Async concurrency for mere mortals &ndash; PyCon 2018<br />
<a href="https://www.youtube.com/watch?v=oLkfnc_UMcE">https://www.youtube.com/watch?v=oLkfnc_UMcE</a>
</li>

<li>Timeouts and cancellation for humans<br />
<a href="https://vorpus.org/blog/timeouts-and-cancellation-for-humans/">https://vorpus.org/blog/timeouts-and-cancellation-for-humans/</a>
</li>

<li>What is the core difference between asyncio and trio?<br />
<a href="https://stackoverflow.com/questions/49482969/what-is-the-core-difference-between-asyncio-and-trio">https://stackoverflow.com/questions/49482969/what-is-the-core-difference-between-asyncio-and-trio</a>
</li>

<li>Some thoughts on asynchronous API design in a post-async/await world<br />
<a href="https://vorpus.org/blog/some-thoughts-on-asynchronous-api-design-in-a-post-asyncawait-world/#the-curious-effectiveness-of-curio">https://vorpus.org/blog/some-thoughts-on-asynchronous-api-design-in-a-post-asyncawait-world/#the-curious-effectiveness-of-curio</a>
</li>

<li>Companion post for my PyCon 2018 talk on async concurrency using Trio<br />
<a href="https://vorpus.org/blog/companion-post-for-my-pycon-2018-talk-on-async-concurrency-using-trio/">https://vorpus.org/blog/companion-post-for-my-pycon-2018-talk-on-async-concurrency-using-trio/</a>
</li>

<li>Control-C handling in Python and Trio<br />
<a href="https://vorpus.org/blog/control-c-handling-in-python-and-trio/">https://vorpus.org/blog/control-c-handling-in-python-and-trio/</a>
</li>

<li>Context Managers and Python's with Statement<br />
<a href="https://realpython.com/python-with-statement/">https://realpython.com/python-with-statement/</a>
</li>

<li>Notes on structured concurrency, or: Go statement considered harmful<br />
<a href="https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/">https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/</a>
</li>

<li>Structured concurrency explained - Part 1: Introduction<br />
<a href="https://www.thedevtavern.com/blog/posts/structured-concurrency-explained/">https://www.thedevtavern.com/blog/posts/structured-concurrency-explained/</a>
</li>

<li>Structured concurrency<br />
<a href="https://en.wikipedia.org/wiki/Structured_concurrency">https://en.wikipedia.org/wiki/Structured_concurrency</a>
</li>

<li>Structured Concurrency<br />
<a href="https://250bpm.com/blog:71/">https://250bpm.com/blog:71/</a>
</li>

<li>Python and Trio, where producers are consumers, how to exit gracefully when the job is done?<br />
<a href="https://stackoverflow.com/questions/65304775/python-and-trio-where-producers-are-consumers-how-to-exit-gracefully-when-the">https://stackoverflow.com/questions/65304775/python-and-trio-where-producers-are-consumers-how-to-exit-gracefully-when-the</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>

