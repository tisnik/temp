<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title></title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1></h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">*** 1. </a></p>
<p><a href="#k02">*** 2. Instalace knihovny <i>Diagrams</i></a></p>
<p><a href="#k03">*** 3. </a></p>
<p><a href="#k04">*** 4. </a></p>
<p><a href="#k05">*** 5. </a></p>
<p><a href="#k06">*** 6. </a></p>
<p><a href="#k07">*** 7. </a></p>
<p><a href="#k08">*** 8. </a></p>
<p><a href="#k09">*** 9. </a></p>
<p><a href="#k10">*** 10. </a></p>
<p><a href="#k11">*** 11. </a></p>
<p><a href="#k12">*** 12. </a></p>
<p><a href="#k13">*** 13. </a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. Obsah navazujícího článku</a></p>
<p><a href="#k18">*** 18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">*** 19. Odkazy na články s&nbsp;tématem programové tvorby grafů a diagramů</a></p>
<p><a href="#k20">*** 20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. </h2>

<p></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace knihovny <i>Diagrams</i></h2>

<p></p>

<pre>
$ <strong>pip install diagrams</strong>
&nbsp;
Collecting diagrams
  Downloading diagrams-0.19.1-py3-none-any.whl (19.2 MB)
     |████████████████████████████████| 19.2 MB 3.0 MB/s 
Collecting graphviz<0.17.0,>=0.13.2
  Downloading graphviz-0.16-py2.py3-none-any.whl (19 kB)
Collecting jinja2<3.0,>=2.10
  Downloading Jinja2-2.11.3-py2.py3-none-any.whl (125 kB)
     |████████████████████████████████| 125 kB 25.0 MB/s 
Requirement already satisfied: MarkupSafe>=0.23 in /usr/lib/python3/dist-packages (from jinja2<3.0,>=2.10->diagrams) (1.1.0)
Installing collected packages: graphviz, jinja2, diagrams
Successfully installed diagrams-0.19.1 graphviz-0.16 jinja2-2.11.3
</pre>

<pre>
</pre>

<pre>
Help on class StartEnd in module diagrams.programming.flowchart:
&nbsp;
class StartEnd(_Flowchart)
 |  StartEnd(label: str = '', **attrs: Dict)
 |
 |  Node represents a node for a specific backend service.
 |
 |  Method resolution order:
 |      StartEnd
 |      _Flowchart
 |      diagrams.programming._Programming
 |      diagrams.Node
 |      builtins.object
 |
 |  Data and other attributes inherited from diagrams.programming._Programming:
 |
 |  fontcolor = '#ffffff'
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from diagrams.Node:
 |
 |  __init__(self, label: str = '', **attrs: Dict)
 |      Node represents a system component.
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.programming.flowchart import StartEnd
&nbsp;
<i># novy graf s urcenim jeho zakladnich vlastnosti</i>
<strong>with</strong> Diagram("Flow chart #1", show=False):
    <i># definice uzlu grafu</i>
    start = StartEnd("Start")
    end = StartEnd("End")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    start &gt;&gt; end
</pre>

*** image ***
<p><i>Obrázek :</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.programming.flowchart import StartEnd
<strong>from</strong> diagrams.programming.flowchart import InputOutput
<strong>from</strong> diagrams.programming.flowchart import Action
&nbsp;
<i># novy graf s urcenim jeho zakladnich vlastnosti</i>
<strong>with</strong> Diagram("Flow chart #2", show=False):
    <i># definice uzlu</i>
    start = StartEnd("Start")
    input = InputOutput("radius=")
    computation = Action("area=pi*radius^2")
    display = InputOutput("circle area=area")
    end = StartEnd("End")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
     &gt;&gt; input &gt;&gt; computation &gt;&gt; display &gt;&gt; end
</pre>

*** image ***
<p><i>Obrázek :</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.programming.flowchart import StartEnd
<strong>from</strong> diagrams.programming.flowchart import InputOutput
<strong>from</strong> diagrams.programming.flowchart import Action
&nbsp;
<i># novy graf s urcenim jeho zakladnich vlastnosti</i>
<strong>with</strong> Diagram("Flow chart #3", show=False, direction="TB"):
    <i># definice uzlu</i>
    start = StartEnd("Start")
    input = InputOutput("radius=")
    computation = Action("area=pi*radius^2")
    display = InputOutput("circle area=area")
    end = StartEnd("End")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    start &gt;&gt; input &gt;&gt; computation &gt;&gt; display &gt;&gt; end
</pre>

*** image ***
<p><i>Obrázek :</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.programming.flowchart import StartEnd
<strong>from</strong> diagrams.programming.flowchart import InputOutput
<strong>from</strong> diagrams.programming.flowchart import Action
&nbsp;
<i># novy graf s urcenim jeho zakladnich vlastnosti</i>
<strong>with</strong> Diagram("Flow chart #4", show=True, direction="TB"):
    <i># definice uzlu</i>
    start = StartEnd("Start")
    input = InputOutput("radius=")
    computation = Action("area=pi*radius^2")
    display = InputOutput("circle area=area")
    end = StartEnd("End")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    start &gt;&gt; input &gt;&gt; computation &gt;&gt; display &gt;&gt; end
</pre>

*** image ***
<p><i>Obrázek :</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, Rabbitmq
<strong>from</strong> diagrams.programming.language import Go
&nbsp;
<i># novy graf s urcenim jeho zakladnich vlastnosti</i>
<strong>with</strong> Diagram("OnPrem #1", show=True):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    worker = Go("worker")
&nbsp;
    producer = Rabbitmq("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; worker &gt;&gt; producer
</pre>

*** image ***
<p><i>Obrázek :</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, Rabbitmq
<strong>from</strong> diagrams.programming.language import Go
&nbsp;
<i># novy graf s urcenim jeho zakladnich vlastnosti</i>
<strong>with</strong> Diagram("OnPrem #2", show=True):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    <i># rozvetveni</i>
    workers = [Go("worker #1"),
               Go("worker #2"),
               Go("worker #3")]
&nbsp;
    producer = Rabbitmq("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workers &gt;&gt; producer
</pre>

*** image ***
<p><i>Obrázek :</i></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.aws.compute import EC2
<strong>from</strong> diagrams.aws.integration import SQS
&nbsp;
<i># novy graf s urcenim jeho zakladnich vlastnosti</i>
<strong>with</strong> Diagram("AWS", show=True, direction="TB"):
    <i># definice uzlu</i>
    consumer = SQS("input stream")
&nbsp;
    <i># rozvetveni</i>
    workers = [EC2("worker #1"),
               EC2("worker #2"),
               EC2("worker #3")]
&nbsp;
    producer = SQS("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workers &gt;&gt; producer
</pre>

*** image ***
<p><i>Obrázek :</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, Rabbitmq
<strong>from</strong> diagrams.programming.language import Go
&nbsp;
<strong>with</strong> Diagram("OnPrem #3", show=True, direction="TB"):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    <i># rozvetveni</i>
    workers = [Go("worker #1"),
               Go("worker #2"),
               Go("worker #3")]
&nbsp;
    producer = Rabbitmq("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workers &gt;&gt; producer
</pre>

*** image ***
<p><i>Obrázek :</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
&nbsp;
<strong>with</strong> Diagram("OnPrem #4", show=True, direction="TB"):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    <i># rozvetveni</i>
    workersA = [Go("worker #1"),
                Go("worker #2"),
                Go("worker #3")]
&nbsp;
    buffer = ActiveMQ("buffer")
&nbsp;
    <i># rozvetveni</i>
    workersB = [Rust("worker #1"),
                Rust("worker #2"),
                Rust("worker #3")]
&nbsp;
    producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
</pre>

*** image ***
<p><i>Obrázek :</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
<strong>from</strong> diagrams.aws.database import RDS
&nbsp;
<strong>with</strong> Diagram("OnPrem #5", show=True, direction="TB"):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    db = RDS("storage")
&nbsp;
    <i># rozvetveni</i>
    workersA = [Go("worker #1"),
                Go("worker #2"),
                Go("worker #3")]
&nbsp;
    buffer = ActiveMQ("buffer")
&nbsp;
    <i># rozvetveni</i>
    workersB = [Rust("worker #1"),
                Rust("worker #2"),
                Rust("worker #3")]
&nbsp;
    producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
    db &gt;&gt; workersA
</pre>

*** image ***
<p><i>Obrázek :</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
<strong>from</strong> diagrams.aws.database import RDS
&nbsp;
<strong>with</strong> Diagram("OnPrem #6", show=True, direction="TB"):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    db = RDS("storage")
&nbsp;
    <i># rozvetveni</i>
    workersA = [Go("worker #1"),
                Go("worker #2"),
                Go("worker #3")]
&nbsp;
    buffer = ActiveMQ("buffer")
&nbsp;
    <i># rozvetveni</i>
    workersB = [Rust("worker #1"),
                Rust("worker #2"),
                Rust("worker #3")]
&nbsp;
    producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
    db &gt;&gt; workersA
    producer &gt;&gt; db
</pre>

*** image ***
<p><i>Obrázek :</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
<strong>from</strong> diagrams.aws.database import RDS
&nbsp;
<strong>with</strong> Diagram("OnPrem #7", show=True, direction="TB"):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    db1 = RDS("storage")
    db2 = RDS("storage")
&nbsp;
    <i># rozvetveni</i>
    workersA = [Go("worker #1"),
                Go("worker #2"),
                Go("worker #3")]
&nbsp;
    buffer = ActiveMQ("buffer")
&nbsp;
    <i># rozvetveni</i>
    workersB = [Rust("worker #1"),
                Rust("worker #2"),
                Rust("worker #3")]
&nbsp;
    producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
    db1 &gt;&gt; workersA
    producer &gt;&gt; db2
</pre>

*** image ***
<p><i>Obrázek :</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
<strong>from</strong> diagrams.aws.database import RDS
&nbsp;
<strong>with</strong> Diagram("OnPrem #8", show=True, direction="TB"):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    db1 = RDS("storage")
    db2 = RDS("storage")
&nbsp;
    <i># rozvetveni</i>
    workersA = [Go("worker #1"),
                Go("worker #2"),
                Go("worker #3")]
&nbsp;
    buffer = ActiveMQ("buffer")
&nbsp;
    <i># rozvetveni</i>
    workersB = [Rust("worker #1"),
                Rust("worker #2"),
                Rust("worker #3")]
&nbsp;
    producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
    db1 &gt;&gt; workersA
    workersB &gt;&gt; db2
</pre>

*** image ***
<p><i>Obrázek :</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Cluster, Diagram
<strong>from</strong> diagrams.aws.compute import ECS, EKS, Lambda
<strong>from</strong> diagrams.aws.database import Redshift
<strong>from</strong> diagrams.aws.integration import SQS
<strong>from</strong> diagrams.aws.storage import S3
&nbsp;
<strong>with</strong> Diagram("Event Processing", show=False):
    source = EKS("k8s source")
&nbsp;
    <strong>with</strong> Cluster("Event Flows"):
        <strong>with</strong> Cluster("Event Workers"):
            workers = [ECS("worker1"),
                       ECS("worker2"),
                       ECS("worker3")]
&nbsp;
        queue = SQS("event queue")
&nbsp;
        <strong>with</strong> Cluster("Processing"):
            handlers = [Lambda("proc1"),
                        Lambda("proc2"),
                        Lambda("proc3")]
&nbsp;
    store = S3("events store")
    dw = Redshift("analytics")
&nbsp;
    source &gt;&gt; workers &gt;&gt; queue &gt;&gt; handlers
    handlers &gt;&gt; store
    handlers &gt;&gt; dw
</pre>

*** image ***
<p><i>Obrázek :</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Další možnosti nabízené nástrojem Diagrams</h2>

<p></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Obsah navazujícího článku</h2>

<p></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
Python 3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>flowchart1.py</td><td>jednoduchý vývojový diagram</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart1.py</a></td></tr>
<tr><td> 2</td><td>flowchart2.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart2.py</a></td></tr>
<tr><td> 3</td><td>flowchart3.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart3.py</a></td></tr>
<tr><td> 4</td><td>flowchart4.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>onprem1.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem1.py</a></td></tr>
<tr><td> 6</td><td>onprem2.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem2.py</a></td></tr>
<tr><td> 7</td><td>onprem2aws.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem2aws.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem2aws.py</a></td></tr>
<tr><td> 8</td><td>onprem3.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem3.py</a></td></tr>
<tr><td> 9</td><td>onprem4.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem4.py</a></td></tr>
<tr><td>10</td><td>onprem5.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem5.py</a></td></tr>
<tr><td>11</td><td>onprem6.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem6.py</a></td></tr>
<tr><td>12</td><td>onprem7.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem7.py</a></td></tr>
<tr><td>13</td><td>onprem8.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem8.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>14</td><td>dx.py</td><td>složitější diagram s&nbsp;clustery</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/dx.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/dx.py</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na články s&nbsp;tématem programové tvorby grafů a diagramů</h2>

<p>V&nbsp;této kapitole jsou uvedeny odkazy na předchozí články, v&nbsp;nichž
jsme se zabývali tvorbou různých typů grafů a diagramů &ndash; a to
v&nbsp;naprosté většině případů s&nbsp;využitím nějakého doménově specifického
jazyka neboli DSL (<i>Domain Specific Language</i>) popř.&nbsp;nějakého
univerzálního programovacího jazyka:</p>

<ol>

<li>Nástroje pro tvorbu UML diagramů<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/</a>
</li>

<li>Nástroje pro tvorbu UML diagramů z&nbsp;příkazové řádky<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky/</a>
</li>

<li>Nástroje pro tvorbu UML diagramů z&nbsp;příkazové řádky (II)<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky-ii/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky-ii/</a>
</li>

<li>Nástroje pro tvorbu grafů a diagramů z&nbsp;příkazové řádky<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-grafu-a-diagramu-z-prikazove-radky/">https://www.root.cz/clanky/nastroje-pro-tvorbu-grafu-a-diagramu-z-prikazove-radky/</a>
</li>

<li>Sledování správy paměti v&nbsp;Pythonu s&nbsp;využitím nástroje objgraph<br />
<a href="https://www.root.cz/clanky/sledovani-spravy-pameti-v-pythonu-s-vyuzitim-nastroje-objgraph/">https://www.root.cz/clanky/sledovani-spravy-pameti-v-pythonu-s-vyuzitim-nastroje-objgraph/</a>
</li>

<li>Programová tvorba diagramů v&nbsp;jazyku Clojure s&nbsp;využitím knihovny Rhizome<br />
<a href="https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/">https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/</a>
</li>

<li>Tvorba sekvenčních diagramů v&nbsp;Pythonu s&nbsp;využitím knihovny Napkin<br />
<a href="https://www.root.cz/clanky/tvorba-sekvencnich-diagramu-v-pythonu-s-vyuzitim-knihovny-napkin/">https://www.root.cz/clanky/tvorba-sekvencnich-diagramu-v-pythonu-s-vyuzitim-knihovny-napkin/</a>
</li>

<li>Tvorba vývojových diagramů přímo ze zdrojových kódů Pythonu<br />
<a href="https://www.root.cz/clanky/tvorba-vyvojovych-diagramu-primo-ze-zdrojovych-kodu-pythonu/">https://www.root.cz/clanky/tvorba-vyvojovych-diagramu-primo-ze-zdrojovych-kodu-pythonu/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Flowchart (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Flowchart">https://en.wikipedia.org/wiki/Flowchart</a>
</li>

<li>DRAKON<br />
<a href="https://en.wikipedia.org/wiki/DRAKON">https://en.wikipedia.org/wiki/DRAKON</a>
</li>

<li>Modeling language<br />
<a href="https://en.wikipedia.org/wiki/Modeling_language">https://en.wikipedia.org/wiki/Modeling_language</a>
</li>

<li>Napkin na GitHubu<br />
<a href="https://github.com/pinetr2e/napkin">https://github.com/pinetr2e/napkin</a>
</li>

<li>Napkin 0.6.8 na PyPi<br />
<a href="https://pypi.org/project/napkin/">https://pypi.org/project/napkin/</a>
</li>

<li>PlantUML (home page)<br />
<a href="http://plantuml.sourceforge.net/">http://plantuml.sourceforge.net/</a>
</li>

<li>PlantUML (download page)<br />
<a href="http://sourceforge.net/projects/plantuml/files/plantuml.jar/download">http://sourceforge.net/projects/plantuml/files/plantuml.jar/download</a>
</li>

<li>PlantUML (Language Reference Guide)<br />
<a href="http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf">http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf</a>
</li>

<li>Rhizome<br />
<a href="https://github.com/ztellman/rhizome">https://github.com/ztellman/rhizome</a>
</li>

<li>Swagger to UML<br />
<a href="https://github.com/nlohmann/swagger_to_uml">https://github.com/nlohmann/swagger_to_uml</a>
</li>

<li>pydiagrams<br />
<a href="https://github.com/billingtonm/pydiagrams">https://github.com/billingtonm/pydiagrams</a>
</li>

<li>graphviz(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/graphviz">https://linux.die.net/man/3/graphviz</a>
</li>

<li>dot(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/dot">https://linux.die.net/man/1/dot</a>
</li>

<li>neato(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/neato">https://linux.die.net/man/1/neato</a>
</li>

<li>twopi(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/twopi">https://linux.die.net/man/1/twopi</a>
</li>

<li>circo(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/circo">https://linux.die.net/man/1/circo</a>
</li>

<li>fdp(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/fdp">https://linux.die.net/man/1/fdp</a>
</li>

<li>sfdp(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/sfdp">https://linux.die.net/man/1/sfdp</a>
</li>

<li>Plain-text diagrams take shape in Asciidoctor!<br />
<a href="http://asciidoctor.org/new­s/2014/02/18/plain-text-diagrams-in-asciidoctor/">http://asciidoctor.org/new­s/2014/02/18/plain-text-diagrams-in-asciidoctor/</a>
</li>

<li>Graphviz – Graph Visualization Software<br />
<a href="http://www.graphviz.org/">http://www.graphviz.org/</a>
</li>

<li>graphviz (Manual Page)<br />
<a href="http://www.root.cz/man/7/graphviz/">http://www.root.cz/man/7/graphviz/</a>
</li>

<li>dot (Manual page)<br />
<a href="http://www.root.cz/man/1/dot/">http://www.root.cz/man/1/dot/</a>
</li>

<li>dot (Manual v&nbsp;PDF)<br />
<a href="https://graphviz.org/pdf/dot.1.pdf">https://graphviz.org/pdf/dot.1.pdf</a>
</li>

<li>Ditaa home page<br />
<a href="http://ditaa.sourceforge.net/">http://ditaa.sourceforge.net/</a>
</li>

<li>Ditaa introduction<br />
<a href="http://ditaa.sourceforge.net/#intro">http://ditaa.sourceforge.net/#intro</a>
</li>

<li>Ditaa usage<br />
<a href="http://ditaa.sourceforge.net/#usage">http://ditaa.sourceforge.net/#usage</a>
</li>

<li>Node, Edge and Graph Attributes<br />
<a href="http://www.graphviz.org/doc/in­fo/attrs.html">http://www.graphviz.org/doc/in­fo/attrs.html</a>
</li>

<li>Graphviz (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Graphviz">http://en.wikipedia.org/wiki/Graphviz</a>
</li>

<li>Unified Modeling Language<br />
<a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language">https://en.wikipedia.org/wiki/Unified_Modeling_Language</a>
</li>

<li>UML basics: The sequence diagram<br />
<a href="http://www.ibm.com/developerworks/rational/library/3101.html">http://www.ibm.com/developerworks/rational/library/3101.html</a>
</li>

<li>UML 2 State Machine Diagrams: An Agile Introduction<br />
<a href="http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm">http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm</a>
</li>

<li>Sequence diagram (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Sequence_diagram">https://en.wikipedia.org/wiki/Sequence_diagram</a>
</li>

<li>UML 2 Sequence Diagrams: An Agile Introduction<br />
<a href="http://www.agilemodeling.com/artifacts/sequenceDiagram.htm">http://www.agilemodeling.com/artifacts/sequenceDiagram.htm</a>
</li>

<li>A Quick Introduction to UML Sequence Diagrams<br />
<a href="http://www.tracemodeler.com/articles/a_quick_introduction_to_uml_sequence_diagrams/">http://www.tracemodeler.com/articles/a_quick_introduction_to_uml_sequence_diagrams/</a>
</li>

<li>UML Sequence Diagrams<br />
<a href="https://www.uml-diagrams.org/sequence-diagrams.html">https://www.uml-diagrams.org/sequence-diagrams.html</a>
</li>

<li>Web Sequence Diagrams<br />
<a href="https://www.websequencediagrams.com/">https://www.websequencediagrams.com/</a>
</li>

<li>Drawing sequence diagrams “napkin style”<br />
<a href="https://modeling-languages.com/drawing-sequence-diagrams-napkin-style/">https://modeling-languages.com/drawing-sequence-diagrams-napkin-style/</a>
</li>

<li>Curated list of UML tools – 2020 edition<br />
<a href="https://modeling-languages.com/uml-tools/#textual">https://modeling-languages.com/uml-tools/#textual</a>
</li>

<li>Flowchart diagrams vs. UML activity diagrams<br />
<a href="https://stackoverflow.com/questions/7081215/flowchart-diagrams-vs-uml-activity-diagrams">https://stackoverflow.com/questions/7081215/flowchart-diagrams-vs-uml-activity-diagrams</a>
</li>

<li>Kopenograms – Graphical Language for Structured Algorithms<br />
<a href="https://kopenogram.org/Assets/Kopenograms_Graphical_Language_for_Structured_Algorithms.pdf">https://kopenogram.org/Assets/Kopenograms_Graphical_Language_for_Structured_Algorithms.pdf</a>
</li>

<li>Kopenograms and Their Implementation in BlueJ<br />
<a href="https://link.springer.com/chapter/10.1007%2F978-3-319-46535-7_8">https://link.springer.com/chapter/10.1007%2F978-3-319-46535-7_8</a>
</li>

<li>The simplest way to describe your flows<br />
<a href="https://code2flow.com/">https://code2flow.com/</a>
</li>

<li>Allan Mogensen and his Legacy<br />
<a href="http://www.worksimp.com/articles/allan-mogensen.htm">http://www.worksimp.com/articles/allan-mogensen.htm</a>
</li>

<li>Diagrams: Diagram as Code<br />
<a href="https://diagrams.mingrammer.com/">https://diagrams.mingrammer.com/</a>
</li>

<li>go-diagrams<br />
<a href="https://github.com/blushft/go-diagrams">https://github.com/blushft/go-diagrams</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

