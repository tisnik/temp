<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba diagramů s architekturou systémů s využitím knihovny Diagrams</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba diagramů s architekturou systémů s využitím knihovny Diagrams</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba diagramů s&nbsp;architekturou systémů s&nbsp;využitím knihovny Diagrams</a></p>
<p><a href="#k02">2. Instalace knihovny <i>Diagrams</i></a></p>
<p><a href="#k03">3. První příklad &ndash; vývojový diagram s&nbsp;dvojicí uzlů</a></p>
<p><a href="#k04">4. Přidání dalších typů uzlů do vývojového diagramu</a></p>
<p><a href="#k05">5. Změna orientace diagramu</a></p>
<p><a href="#k06">6. Přímé zobrazení diagramu po spuštění skriptu</a></p>
<p><a href="#k07">7. Diagram se zobrazením jednoduché pipeline</a></p>
<p><a href="#k08">8. Diagram s&nbsp;větvením a spojením &ndash; větší množství workerů</a></p>
<p><a href="#k09">9. Vertikální orientace předchozího diagramu</a></p>
<p><a href="#k10">10. Složitější pipeline s&nbsp;větším množstvím větvení</a></p>
<p><a href="#k11">11. Větší množství zdrojů dat v&nbsp;pipeline</a></p>
<p><a href="#k12">12. Uzel, který je umístěn současně na začátku i na konci toku dat</a></p>
<p><a href="#k13">*** 13. Možná oprava &ndash; použití stejného uzlu v&nbsp;diagramu dvakrát</a></p>
<p><a href="#k14">*** 14. </a></p>
<p><a href="#k15">*** 15. </a></p>
<p><a href="#k16">*** 16. Typy uzlů podporované knihovnou <i>Diagrams</i></a></p>
<p><a href="#k17">17. Obsah navazujícího článku</a></p>
<p><a href="#k18">18. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k19">19. Odkazy na články s&nbsp;tématem programové tvorby grafů a diagramů</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba diagramů s&nbsp;architekturou systémů s&nbsp;využitím knihovny Diagrams</h2>

<p>V&nbsp;předchozí trojici článků [<a
href="https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/">1</a>][<a
href="https://www.root.cz/clanky/tvorba-sekvencnich-diagramu-v-pythonu-s-vyuzitim-knihovny-napkin/">2</a>][<a
href="https://www.root.cz/clanky/tvorba-vyvojovych-diagramu-primo-ze-zdrojovych-kodu-pythonu/">3</a>]
jsme se zabývali diagramy, které jsou do jisté míry (či zcela) standardizovány
a mnohdy i spjaty s&nbsp;nějakou normou či specifikací (vývojové diagramy, UML
v&nbsp;případě sekvenčních diagramů), popř.&nbsp;jsou postaveny nad grafy
používanými přímo v&nbsp;matematice (orientované a neorientované grafy). Dnes
se budeme zabývat knihovnou nazvanou <i>Diagrams</i>, která umožňuje vytvářet
obecné diagramy, jež se mnohdy používají pro zobrazení architektury vytvářeného
systému. Autoři těchto diagramů mají většinou mnohem více volnosti při určení,
jaké uzly a jaké hrany (&bdquo;šipky&ldquo;) budou v&nbsp;takovém diagramu
použity. Je zcela v&nbsp;pořádku vynechat některé uzly (například logovací
službu) i některé šipky naznačující řízení popř.&nbsp;tok dat. Tyto diagramy se
velmi snadno tvoří buď interaktivně (<a href="draw.io">draw.io</a>) nebo právě
s&nbsp;využitím knihovny <i>Diagrams</i>, s&nbsp;níž se dnes seznámíme.</p>

<img src="https://i.iinfo.cz/images/674/diagrams1-1.png" class="image-449217" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="573" height="1200" />
<p><i>Obrázek 1: Příklad diagramu s&nbsp;architekturou aplikace založené na
mikroslužbách propojených s&nbsp;využitím message brokerů.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace knihovny <i>Diagrams</i></h2>

<p>Knihovna <i>Diagrams</i> je dostupná na PyPI, takže je její instalace velmi
snadná a přímočará. Postačuje použít nástroj <strong>pip</strong>
resp.&nbsp;<strong>pip3</strong> (podle konfigurace vašeho systému):</p>

<pre>
$ <strong>pip install diagrams</strong>
&nbsp;
Collecting diagrams
  Downloading diagrams-0.19.1-py3-none-any.whl (19.2 MB)
     |████████████████████████████████| 19.2 MB 3.0 MB/s 
Collecting graphviz&lt;0.17.0,&gt;=0.13.2
  Downloading graphviz-0.16-py2.py3-none-any.whl (19 kB)
Collecting jinja2&lt;3.0,&gt;=2.10
  Downloading Jinja2-2.11.3-py2.py3-none-any.whl (125 kB)
     |████████████████████████████████| 125 kB 25.0 MB/s 
Requirement already satisfied: MarkupSafe&gt;=0.23 in /usr/lib/python3/dist-packages (from jinja2&lt;3.0,&gt;=2.10-&gt;diagrams) (1.1.0)
Installing collected packages: graphviz, jinja2, diagrams
Successfully installed diagrams-0.19.1 graphviz-0.16 jinja2-2.11.3
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se skutečně
nainstalovalo i rozhraní pro GraphViz.</div></p>

<p>Nyní je již snadné nechat si zobrazit nápovědu, a to přímo
v&nbsp;interaktivní smyčce REPL programovacího jazyka Python. Následuje příklad
nápovědy pro uzel pojmenovaný <strong>StartEnd</strong>, což je třída
definovaná v&nbsp;balíčku <strong>diagrams.programming.flowchart</strong>:</p>

<pre>
Help on class StartEnd in module diagrams.programming.flowchart:
&nbsp;
class StartEnd(_Flowchart)
 |  StartEnd(label: str = '', **attrs: Dict)
 |
 |  Node represents a node for a specific backend service.
 |
 |  Method resolution order:
 |      StartEnd
 |      _Flowchart
 |      diagrams.programming._Programming
 |      diagrams.Node
 |      builtins.object
 |
 |  Data and other attributes inherited from diagrams.programming._Programming:
 |
 |  fontcolor = '#ffffff'
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from diagrams.Node:
 |
 |  __init__(self, label: str = '', **attrs: Dict)
 |      Node represents a system component.
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. První příklad &ndash; vývojový diagram s&nbsp;dvojicí uzlů</h2>

<p>V&nbsp;dnešním prvním demonstračním příkladu je ukázán vývojový diagram,
který obsahuje pouze dva uzly naznačující počátek a konec zpracování. Tyto uzly
jsou představovány objekty typu
<strong>diagrams.programming.flowchart.StartEnd</strong> a jsou spojeny
s&nbsp;využitím operátoru &gt;&gt;. Povšimněte si způsobu vytvoření diagramu
s&nbsp;využitím bloku <strong>with</strong>, což je do značné míry podobné
způsobu který jsme si ukázali v&nbsp;souvislosti s&nbsp;knihovnou
<i>pyflowchart</i>:</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.programming.flowchart import StartEnd
&nbsp;
<i># novy graf s urcenim jeho zakladnich vlastnosti</i>
<strong>with</strong> Diagram("Flow chart #1", show=False):
    <i># definice uzlu grafu</i>
    start = StartEnd("Start")
    end = StartEnd("End")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    start &gt;&gt; end
</pre>

<p>Po spuštění tohoto demonstračního příkladu by se měl vytvořit rastrový
obrázek s&nbsp;tímto obsahem:</p>

<img src="https://i.iinfo.cz/images/674/diagrams1-2.png" class="image-449218" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="411" height="218" />
<p><i>Obrázek 2: Vývojový diagram, který obsahuje pouze uzly s&nbsp;počátkem a
koncem zpracování.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Přidání dalších typů uzlů do vývojového diagramu</h2>

<p>Do vývojového diagramu je pochopitelně možné přidat i další typy uzlů. Jedná
se o uzel představující dílčí krok zpracování (tedy operaci) představovaný
objektem <strong>diagrams.programming.flowchart.Action</strong> a dále o uzel
se vstupně-výstupní operací, jenž je představován objektem typu
<strong>diagrams.programming.flowchart.InputOutput</strong>:</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.programming.flowchart import StartEnd
<strong>from</strong> diagrams.programming.flowchart import InputOutput
<strong>from</strong> diagrams.programming.flowchart import Action
&nbsp;
<i># novy graf s urcenim jeho zakladnich vlastnosti</i>
<strong>with</strong> Diagram("Flow chart #2", show=False):
    <i># definice uzlu</i>
    start = StartEnd("Start")
    input = InputOutput("radius=")
    computation = Action("area=pi*radius^2")
    display = InputOutput("circle area=area")
    end = StartEnd("End")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
     &gt;&gt; input &gt;&gt; computation &gt;&gt; display &gt;&gt; end
</pre>

<p>Všechny uzly jsou opět propojeny operací &gt;&gt;, přičemž výsledek by měl
vypadat následovně:</p>

<a href="https://www.root.cz/obrazek/449219/"><img src="https://i.iinfo.cz/images/674/diagrams1-3-prev.png" class="image-449219" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="109" /></a>
<p><i>Obrázek 3: Vývojový diagram s&nbsp;uzly typu <strong>Action</strong> a
<strong>InputOutput</strong>.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Změna orientace diagramu</h2>

<p>Vývojové diagramy (ale i další typy diagramů) jsou většinou orientovány tak,
že další operace se nachází pod operací předchozí. Tohoto chování je možné při
použití knihovny <i>Diagrams</i> dosáhnout velmi snadno, což je ukázáno na
dalším demonstračním příkladu. Postačuje při konstrukci objektu typu
<strong>diagrams.Diagram</strong> použít nepovinný parametr
<strong>direction</strong> a nastavit ho na hodnotu &bdquo;TB&ldquo;, neboli
&bdquo;Top-Bottom&ldquo;:</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.programming.flowchart import StartEnd
<strong>from</strong> diagrams.programming.flowchart import InputOutput
<strong>from</strong> diagrams.programming.flowchart import Action
&nbsp;
<i># novy graf s urcenim jeho zakladnich vlastnosti</i>
<strong>with</strong> Diagram("Flow chart #3", show=False, <strong>direction="TB"</strong>):
    <i># definice uzlu</i>
    start = StartEnd("Start")
    input = InputOutput("radius=")
    computation = Action("area=pi*radius^2")
    display = InputOutput("circle area=area")
    end = StartEnd("End")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    start &gt;&gt; input &gt;&gt; computation &gt;&gt; display &gt;&gt; end
</pre>

<p>Nyní bude výsledek následující:</p>

<a href="https://www.root.cz/obrazek/449220/"><img src="https://i.iinfo.cz/images/674/diagrams1-4-prev.png" class="image-449220" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="70" height="270" /></a>
<p><i>Obrázek 4: Diagram s&nbsp;nastavenou orientací <strong>Top-Bottom</strong>.</i></p>

<p><div class="rs-tip-major">Poznámka: styl vykreslení je možné dále upravovat,
což si ukážeme příště.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Přímé zobrazení diagramu po spuštění skriptu</h2>

<p>Diagram vytvořený v&nbsp;rámci Pythonovského skriptu je možné zobrazit ihned
po dokončení skriptu, přesněji řečeno ihned poté, co se ukončí platnost bloku
<strong>with</strong> s&nbsp;definicí diagramu. Aby se zobrazení diagramu
skutečně provedlo, je nutné při konstrukci objektu typu
<strong>diagrams.Diagram</strong> specifikovat nepovinný parametr
<strong>show</strong> a nastavit ho (podle očekávání) na hodnotu
<strong>True</strong>, což je ostatně ukázáno v&nbsp;dalším demonstračním
příkladu:</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.programming.flowchart import StartEnd
<strong>from</strong> diagrams.programming.flowchart import InputOutput
<strong>from</strong> diagrams.programming.flowchart import Action
&nbsp;
<i># novy graf s urcenim jeho zakladnich vlastnosti</i>
<strong>with</strong> Diagram("Flow chart #4", <strong>show=True</strong>, direction="TB"):
    <i># definice uzlu</i>
    start = StartEnd("Start")
    input = InputOutput("radius=")
    computation = Action("area=pi*radius^2")
    display = InputOutput("circle area=area")
    end = StartEnd("End")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    start &gt;&gt; input &gt;&gt; computation &gt;&gt; display &gt;&gt; end
</pre>

<p>Výsledek získaný spuštěním tohoto příkladu:</p>

<a href="https://www.root.cz/obrazek/449221/"><img src="https://i.iinfo.cz/images/674/diagrams1-5-prev.png" class="image-449221" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="55" height="270" /></a>
<p><i>Obrázek 5: Totožný diagram, jako v&nbsp;předchozím příkladu, ovšem
současně zobrazený ihned po spuštění skriptu.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Diagram se zobrazením jednoduché pipeline</h2>

<p>Předností knihovny <i>Diagrams</i> je podpora velkého množství typů uzlů,
přičemž každý uzel je tvořen určitou ikonou s&nbsp;případným popiskem uvedeným
u této ikony (typicky pod ikonou). U výše ukázaných vývojových diagramů se
jednalo spíše o špatný koncept, protože vývojové diagramy jsou navrženy takovým
způsobem, aby byly popisky zapsány přímo do uzlu. Naproti tomu u diagramů
naznačujících architekturu aplikace tomu je poněkud jinak. Ukažme si nyní
způsob zobrazení diagramu s&nbsp;jednoduchou pipeline tvořenou <a
href="https://www.root.cz/clanky/apache-kafka-distribuovana-streamovaci-platforma/">Kafkou</a>
(resp.&nbsp;tématem &ndash; topicem), dále workerem naprogramovaným <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">v&nbsp;jazyce Go</a>
a následně výstupní frontou realizovanou message brokerem <a
href="https://www.root.cz/clanky/rabbitmq-jedna-z-nejuspesnejsich-implementaci-brokera/">RabbitMQ</a>.
Ikony s&nbsp;těmito uzly jsou importovány z&nbsp;různých balíčků:</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, Rabbitmq
<strong>from</strong> diagrams.programming.language import Go
&nbsp;
<i># novy graf s urcenim jeho zakladnich vlastnosti</i>
<strong>with</strong> Diagram("OnPrem #1", show=True):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    worker = Go("worker")
&nbsp;
    producer = Rabbitmq("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; worker &gt;&gt; producer
</pre>

<p>S&nbsp;tímto výsledkem:</p>

<img src="https://i.iinfo.cz/images/674/diagrams1-6.png" class="image-449222" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="576" height="232" />
<p><i>Obrázek 6: Jednoduchá pipeline tvořená Kafkou, workerem naprogramovaným
v&nbsp;Go a message brokerem RabbitMQ.</i></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Diagram s&nbsp;větvením a spojením &ndash; větší množství workerů</h2>

<p>Nyní se dostáváme k&nbsp;velmi zajímavé vlastnosti knihovny <i>Diagrams</i>
&ndash; ke snadnému vytvoření diagramu, v&nbsp;němž dochází k&nbsp;větvení či
naopak ke spojení jednotlivých cest. Realizace je přitom velmi snadná, protože
pouze dostačuje, aby se namísto jednoho uzlu specifikoval seznam uzlů. Při
napojení tohoto seznamu na další uzly knihovna <i>Diagrams</i> sama zajistí
rozvětvení (uzel&rarr;seznam) či naopak spojení (seznam&rarr;uzel), což je
ukázáno na dalším příkladu s&nbsp;větším množstvím workerů:</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, Rabbitmq
<strong>from</strong> diagrams.programming.language import Go
&nbsp;
<i># novy graf s urcenim jeho zakladnich vlastnosti</i>
<strong>with</strong> Diagram("OnPrem #2", show=True):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    <i># rozvetveni</i>
    workers = <strong>[Go("worker #1"),</strong>
               <strong>Go("worker #2"),</strong>
               <strong>Go("worker #3")]</strong>
&nbsp;
    <i># a spojeni</i>
    producer = Rabbitmq("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workers &gt;&gt; producer
</pre>

<img src="https://i.iinfo.cz/images/674/diagrams1-7.png" class="image-449223" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="562" height="692" />
<p><i>Obrázek 7: Diagram s&nbsp;rozvětvením a spojením.</i></p>

<p>Pro zajímavost se nyní podívejme na to, jak lze naprosto stejný diagram
realizovat s&nbsp;využitím odlišných ikon a tím pádem i jiných typů uzlů. Nyní
tu stejnou architekturu aplikace &bdquo;přeneseme&ldquo; do AWS, kde se namísto
Kafky a RabbitMQ použije SQS a i workeři jsou realizováni jinou
technologií:</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.aws.compute import EC2
<strong>from</strong> diagrams.aws.integration import SQS
&nbsp;
<i># novy graf s urcenim jeho zakladnich vlastnosti</i>
<strong>with</strong> Diagram("AWS", show=True, direction="TB"):
    <i># definice uzlu</i>
    consumer = SQS("input stream")
&nbsp;
    <i># rozvetveni</i>
    workers = [EC2("worker #1"),
               EC2("worker #2"),
               EC2("worker #3")]
&nbsp;
    <i># a spojeni</i>
    producer = SQS("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workers &gt;&gt; producer
</pre>

<img src="https://i.iinfo.cz/images/674/diagrams1-8.png" class="image-449224" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="580" height="746" />
<p><i>Obrázek 8: Diagram s&nbsp;rozvětvením a spojením, ovšem používajícím
odlišné ikony.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vertikální orientace předchozího diagramu</h2>

<p>Diagram, který jsme vytvořili v&nbsp;rámci <a href="#k08">předchozí
kapitoly</a>, je možné orientovat i vertikálně, tedy (většinou) shora dolů.
Tato možnost je ukázána v&nbsp;následujícím demonstračním příkladu, který se od
předchozího příkladu liší pouze nepovinným parametrem
<strong>direction</strong>:</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, Rabbitmq
<strong>from</strong> diagrams.programming.language import Go
&nbsp;
<strong>with</strong> Diagram("OnPrem #3", show=True, <strong>direction="TB"</strong>):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    <i># rozvetveni</i>
    workers = [Go("worker #1"),
               Go("worker #2"),
               Go("worker #3")]
&nbsp;
    producer = Rabbitmq("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workers &gt;&gt; producer
</pre>

<p>Výsledkem činnosti předchozího skriptu bude tento diagram:</p>

<img src="https://i.iinfo.cz/images/674/diagrams1-9.png" class="image-449225" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="508" height="734" />
<p><i>Obrázek 9: Diagram orientovaný vertikálně (shora dolů).</i></p>

<p><div class="rs-tip-major">Poznámka: ve skutečnosti je ovšem možné diagram
zcela otočit s&nbsp;tím, že tok dat (či řízení) bude probíhat zdola
nahoru:</div></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, Rabbitmq
<strong>from</strong> diagrams.programming.language import Go
&nbsp;
<strong>with</strong> Diagram("OnPrem #3", show=True, <strong>direction="BT"</strong>):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    <i># rozvetveni</i>
    workers = [Go("worker #1"),
               Go("worker #2"),
               Go("worker #3")]
&nbsp;
    producer = Rabbitmq("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workers &gt;&gt; producer
</pre>

<img src="https://i.iinfo.cz/images/674/diagrams1-10.png" class="image-449226" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="511" height="746" />
<p><i>Obrázek 10: Diagram orientovaný vertikálně (zdola nahoru).</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Složitější pipeline s&nbsp;větším množstvím větvení</h2>

<p>Celá pipeline (a zobrazená aplikace resp.&nbsp;systém vlastně není nic
jiného, než pipeline) může být v&nbsp;praxi i výrazně složitější. Je to ukázáno
na dalším demonstračním příkladu, v&nbsp;němž jsou použity dvě skupiny workerů,
které jsou propojeny s&nbsp;využitím message brokera ActiveMQ, který zde slouží
v&nbsp;roli fronty (resp.&nbsp;bufferu):</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
&nbsp;
<strong>with</strong> Diagram("OnPrem #4", show=True, direction="TB"):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    <i># rozvetveni</i>
    workersA = [Go("worker #1"),
                Go("worker #2"),
                Go("worker #3")]
&nbsp;
    <strong>buffer = ActiveMQ("buffer")</strong>
&nbsp;
    <i># rozvetveni</i>
    workersB = [Rust("worker #1"),
                Rust("worker #2"),
                Rust("worker #3")]
&nbsp;
    producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
</pre>

<p>Výsledek by mohl vypadat následovně:</p>

<img src="https://i.iinfo.cz/images/674/diagrams1-11.png" class="image-449227" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="525" height="1200" />
<p><i>Obrázek 11: Složitější pipeline s&nbsp;větším množstvím větvení.</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Větší množství zdrojů dat v&nbsp;pipeline</h2>

<p>Dalším (v&nbsp;praxi poměrně typickým) příkladem může být architektura,
v&nbsp;níž se vyskytuje větší množství zdrojů dat, tedy (z&nbsp;hlediska
diagramu) uzlů umístěných na začátku grafu. V&nbsp;tomto případě lze použít
následující trik:</p>

<pre>
    <i># zdroje dat</i>
    <strong>consumer = Kafka("input stream")</strong>
    <strong>db = RDS("storage")</strong>
&nbsp;
    <i># skupina workerů</i>
    workersA = [Go("worker #1"),
                Go("worker #2"),
                Go("worker #3")]
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    <strong>consumer &gt;&gt;</strong> workersA
    <strong>db &gt;&gt;</strong> workersA
</pre>

<p>Úplný tvar takto upraveného demonstračního příkladu vypadá takto:</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
<strong>from</strong> diagrams.aws.database import RDS
&nbsp;
<strong>with</strong> Diagram("OnPrem #5", show=True, direction="TB"):
    <i># definice uzlu</i>
    <strong>consumer = Kafka("input stream")</strong>
&nbsp;
    <strong>db = RDS("storage")</strong>
&nbsp;
    <i># rozvetveni</i>
    workersA = [Go("worker #1"),
                Go("worker #2"),
                Go("worker #3")]
&nbsp;
    buffer = ActiveMQ("buffer")
&nbsp;
    <i># rozvetveni</i>
    workersB = [Rust("worker #1"),
                Rust("worker #2"),
                Rust("worker #3")]
&nbsp;
    producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    <strong>consumer &gt;&gt;</strong> workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
    <strong>db &gt;&gt;</strong> workersA
</pre>

<p>Výsledek:</p>

<img src="https://i.iinfo.cz/images/674/diagrams1-12.png" class="image-449228" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="524" height="1200" />
<p><i>Obrázek 12: Větší množství zdrojů dat v&nbsp;pipeline.</i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Uzel, který je umístěn současně na začátku i na konci toku dat</h2>

<p>V&nbsp;případě, že do diagramu umístíme uzel, který je současně na začátku i
na konci toku dat, může být algoritmus rozmisťující uzly do diagramu zmaten a
uzly budou ve výsledku zpřeházené. Můžeme si to ukázat na dalším demonstračním
příkladu, v&nbsp;němž je uzel <strong>db</strong> použit jako zdroj dat i jako
jejich cíl:</p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
<strong>from</strong> diagrams.aws.database import RDS
&nbsp;
<strong>with</strong> Diagram("OnPrem #6", show=True, direction="TB"):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    db = RDS("storage")
&nbsp;
    <i># rozvetveni</i>
    workersA = [Go("worker #1"),
                Go("worker #2"),
                Go("worker #3")]
&nbsp;
    buffer = ActiveMQ("buffer")
&nbsp;
    <i># rozvetveni</i>
    workersB = [Rust("worker #1"),
                Rust("worker #2"),
                Rust("worker #3")]
&nbsp;
    producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
    db &gt;&gt; workersA
    producer &gt;&gt; db
</pre>

<p>Výsledek v&nbsp;tomto případě asi nebude zcela odpovídat představám
autora:</p>

<a href="https://www.root.cz/obrazek/449229/"><img src="https://i.iinfo.cz/images/674/diagrams1-13-prev.png" class="image-449229" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="129" height="270" /></a>
<p><i>Obrázek 13: Uzel, který je umístěn současně na začátku i na konci toku dat.</i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Možná oprava &ndash; použití stejného uzlu v&nbsp;diagramu dvakrát</h2>

<p></p>

<pre>
<strong>db1 = RDS("storage")</strong>
<strong>db2 = RDS("storage")</strong>
&nbsp;
<i># propojeni uzlu grafu orientovanymi hranami</i>
<strong>db1 &gt;&gt;</strong> workersA ... ... ...
 ... ... ... producer <strong>&gt;&gt; db2</strong>
</pre>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
<strong>from</strong> diagrams.aws.database import RDS
&nbsp;
<strong>with</strong> Diagram("OnPrem #7", show=True, direction="TB"):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    <strong>db1 = RDS("storage")</strong>
    <strong>db2 = RDS("storage")</strong>
&nbsp;
    <i># rozvetveni</i>
    workersA = [Go("worker #1"),
                Go("worker #2"),
                Go("worker #3")]
&nbsp;
    buffer = ActiveMQ("buffer")
&nbsp;
    <i># rozvetveni</i>
    workersB = [Rust("worker #1"),
                Rust("worker #2"),
                Rust("worker #3")]
&nbsp;
    producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
    <strong>db1 &gt;&gt;</strong> workersA
    producer <strong>&gt;&gt; db2</strong>
</pre>

<a href="https://www.root.cz/obrazek/449230/"><img src="https://i.iinfo.cz/images/674/diagrams1-14-prev.png" class="image-449230" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="100" height="270" /></a>
<p><i>Obrázek 14: Uzel &bdquo;Storage&ldquo; je v&nbsp;grafu zdvojen &ndash; je
použit jak na začátku, tak i na konci celé architektury.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Diagram
<strong>from</strong> diagrams.onprem.queue import Kafka, ActiveMQ
<strong>from</strong> diagrams.programming.language import Go, Rust
<strong>from</strong> diagrams.aws.database import RDS
&nbsp;
<strong>with</strong> Diagram("OnPrem #8", show=True, direction="TB"):
    <i># definice uzlu</i>
    consumer = Kafka("input stream")
&nbsp;
    db1 = RDS("storage")
    db2 = RDS("storage")
&nbsp;
    <i># rozvetveni</i>
    workersA = [Go("worker #1"),
                Go("worker #2"),
                Go("worker #3")]
&nbsp;
    buffer = ActiveMQ("buffer")
&nbsp;
    <i># rozvetveni</i>
    workersB = [Rust("worker #1"),
                Rust("worker #2"),
                Rust("worker #3")]
&nbsp;
    producer = Kafka("output stream")
&nbsp;
    <i># propojeni uzlu grafu orientovanymi hranami</i>
    consumer &gt;&gt; workersA &gt;&gt; buffer &gt;&gt; workersB &gt;&gt; producer
    db1 &gt;&gt; workersA
    workersB &gt;&gt; db2
</pre>

<a href="https://www.root.cz/obrazek/449231/"><img src="https://i.iinfo.cz/images/674/diagrams1-15-prev.png" class="image-449231" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="119" height="270" /></a>
<p><i>Obrázek 15:</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>

<p></p>

<pre>
<strong>from</strong> diagrams import Cluster, Diagram
<strong>from</strong> diagrams.aws.compute import ECS, EKS, Lambda
<strong>from</strong> diagrams.aws.database import Redshift
<strong>from</strong> diagrams.aws.integration import SQS
<strong>from</strong> diagrams.aws.storage import S3
&nbsp;
<strong>with</strong> Diagram("Event Processing", show=False):
    source = EKS("k8s source")
&nbsp;
    <strong>with</strong> Cluster("Event Flows"):
        <strong>with</strong> Cluster("Event Workers"):
            workers = [ECS("worker1"),
                       ECS("worker2"),
                       ECS("worker3")]
&nbsp;
        queue = SQS("event queue")
&nbsp;
        <strong>with</strong> Cluster("Processing"):
            handlers = [Lambda("proc1"),
                        Lambda("proc2"),
                        Lambda("proc3")]
&nbsp;
    store = S3("events store")
    dw = Redshift("analytics")
&nbsp;
    source &gt;&gt; workers &gt;&gt; queue &gt;&gt; handlers
    handlers &gt;&gt; store
    handlers &gt;&gt; dw
</pre>




<p><a name="k16"></a></p>
<h2 id="k16">16. Typy uzlů podporované knihovnou <i>Diagrams</i></h2>

<p></p>

<table>
<tr><th>Balíček</th></tr>
<tr><td></td></tr>
</table>



<p><a name="k17"></a></p>
<h2 id="k17">17. Obsah navazujícího článku</h2>

<p>V&nbsp;navazujícím článku nejdříve dokončíme popis možností knihovny
<i>Diagrams</i> a poté se seznámíme s&nbsp;další podobně koncipovanou
knihovnou, tentokrát ovšem určenou pro <a
href="https://www.root.cz/serialy/programovaci-jazyk-go/">programovací jazyk
Go</a>. Jedná se o knihovnu pojmenovanou <a
href="https://github.com/blushft/go-diagrams">go-diagrams</a>. Tato knihovna je
navržena takovým způsobem, aby byla s&nbsp;původní Pythonovskou knihovnou
<i>Diagrams</i> do určité míry kompatibilní, což se týká především způsobu
definice diagramů:</p>

<pre>
<strong>package</strong> main
&nbsp;
import (
        "log"
&nbsp;
        "github.com/blushft/go-diagrams/diagram"
)
&nbsp;
<strong>func</strong> main() {
        <i>// inicializace objektu představujícího diagram</i>
        diagram, err := diagram.New(diagram.Label("Diagram #1"), diagram.Filename("diagram1"))
&nbsp;
        <i>// kontrola konstrukce objektu</i>
        <strong>if</strong> err != <strong>nil</strong> {
                log.Fatal(err)
        }
&nbsp;
        <i>// vykreslení diagramu</i>
        err = diagram.Render()
&nbsp;
        <i>// kontrola, zda bylo vykreslení provedeno bez chyby</i>
        <strong>if</strong> err != <strong>nil</strong> {
                log.Fatal(err)
        }
}
</pre>



<p><a name="k18"></a></p>
<h2 id="k18">18. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech dnes popsaných demonstračních příkladů určených pro
Python 3 byly uloženy do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>flowchart1.py</td><td>jednoduchý vývojový diagram s&nbsp;dvojicí uzlů (počátek a konec zpracování)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart1.py</a></td></tr>
<tr><td> 2</td><td>flowchart2.py</td><td>vývojový diagram s&nbsp;uzly typu <strong>Action</strong> a <strong>InputOutput</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart2.py</a></td></tr>
<tr><td> 3</td><td>flowchart3.py</td><td>diagram s&nbsp;nastavenou orientací <strong>Top-Bottom</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart3.py</a></td></tr>
<tr><td> 4</td><td>flowchart4.py</td><td>přímé zobrazení diagramu po spuštění skriptu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/flowchart4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>onprem1.py</td><td>jednoduchá pipeline tvořená Kafkou, workerem naprogramovaným v&nbsp;Go a message brokerem RabbitMQ</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem1.py</a></td></tr>
<tr><td> 6</td><td>onprem2.py</td><td>diagram s&nbsp;větvením a spojením &ndash; větší množství workerů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem2.py</a></td></tr>
<tr><td> 7</td><td>onprem2aws.py</td><td>totožný diagram, ovšem používající odlišné ikony (z&nbsp;AWS)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem2aws.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem2aws.py</a></td></tr>
<tr><td> 8</td><td>onprem3.py</td><td>změna orientace předchozího diagramu (shora dolů)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem3.py</a></td></tr>
<tr><td> 9</td><td>onprem3B.py</td><td>změna orientace předchozího diagramu (zdola nahoru)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem3B.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem3B.py</a></td></tr>
<tr><td>10</td><td>onprem4.py</td><td>složitější pipeline s&nbsp;větším množstvím větvení</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem4.py</a></td></tr>
<tr><td>11</td><td>onprem5.py</td><td>dvojice zdrojů dat</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem5.py</a></td></tr>
<tr><td>12</td><td>onprem6.py</td><td>zdroj a cíl dat je tvořen jediným uzlem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem6.py</a></td></tr>
<tr><td>13</td><td>onprem7.py</td><td>zjednodušení předchozího diagramu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem7.py</a></td></tr>
<tr><td>14</td><td>onprem8.py</td><td>více zdrojů a cílů dat, větší množství workerů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/onprem8.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>15</td><td>dx.py</td><td>složitější diagram s&nbsp;clustery</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/dx.py">https://github.com/tisnik/most-popular-python-libs/blob/master/diagrams/dx.py</a></td></tr>
</table>



<p><a name="k19"></a></p>
<h2 id="k19">19. Odkazy na články s&nbsp;tématem programové tvorby grafů a diagramů</h2>

<p>V&nbsp;této kapitole jsou uvedeny odkazy na předchozí články, v&nbsp;nichž
jsme se zabývali tvorbou různých typů grafů a diagramů &ndash; a to
v&nbsp;naprosté většině případů s&nbsp;využitím nějakého doménově specifického
jazyka neboli DSL (<i>Domain Specific Language</i>) popř.&nbsp;nějakého
univerzálního programovacího jazyka:</p>

<ol>

<li>Nástroje pro tvorbu UML diagramů<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu/</a>
</li>

<li>Nástroje pro tvorbu UML diagramů z&nbsp;příkazové řádky<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky/</a>
</li>

<li>Nástroje pro tvorbu UML diagramů z&nbsp;příkazové řádky (II)<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky-ii/">https://www.root.cz/clanky/nastroje-pro-tvorbu-uml-diagramu-z-prikazove-radky-ii/</a>
</li>

<li>Nástroje pro tvorbu grafů a diagramů z&nbsp;příkazové řádky<br />
<a href="https://www.root.cz/clanky/nastroje-pro-tvorbu-grafu-a-diagramu-z-prikazove-radky/">https://www.root.cz/clanky/nastroje-pro-tvorbu-grafu-a-diagramu-z-prikazove-radky/</a>
</li>

<li>Sledování správy paměti v&nbsp;Pythonu s&nbsp;využitím nástroje objgraph<br />
<a href="https://www.root.cz/clanky/sledovani-spravy-pameti-v-pythonu-s-vyuzitim-nastroje-objgraph/">https://www.root.cz/clanky/sledovani-spravy-pameti-v-pythonu-s-vyuzitim-nastroje-objgraph/</a>
</li>

<li>Programová tvorba diagramů v&nbsp;jazyku Clojure s&nbsp;využitím knihovny Rhizome<br />
<a href="https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/">https://www.root.cz/clanky/programova-tvorba-diagramu-v-jazyku-clojure-s-vyuzitim-knihovny-rhizome/</a>
</li>

<li>Tvorba sekvenčních diagramů v&nbsp;Pythonu s&nbsp;využitím knihovny Napkin<br />
<a href="https://www.root.cz/clanky/tvorba-sekvencnich-diagramu-v-pythonu-s-vyuzitim-knihovny-napkin/">https://www.root.cz/clanky/tvorba-sekvencnich-diagramu-v-pythonu-s-vyuzitim-knihovny-napkin/</a>
</li>

<li>Tvorba vývojových diagramů přímo ze zdrojových kódů Pythonu<br />
<a href="https://www.root.cz/clanky/tvorba-vyvojovych-diagramu-primo-ze-zdrojovych-kodu-pythonu/">https://www.root.cz/clanky/tvorba-vyvojovych-diagramu-primo-ze-zdrojovych-kodu-pythonu/</a>
</li>

</ol>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>Flowchart (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Flowchart">https://en.wikipedia.org/wiki/Flowchart</a>
</li>

<li>DRAKON<br />
<a href="https://en.wikipedia.org/wiki/DRAKON">https://en.wikipedia.org/wiki/DRAKON</a>
</li>

<li>Modeling language<br />
<a href="https://en.wikipedia.org/wiki/Modeling_language">https://en.wikipedia.org/wiki/Modeling_language</a>
</li>

<li>Napkin na GitHubu<br />
<a href="https://github.com/pinetr2e/napkin">https://github.com/pinetr2e/napkin</a>
</li>

<li>Napkin 0.6.8 na PyPi<br />
<a href="https://pypi.org/project/napkin/">https://pypi.org/project/napkin/</a>
</li>

<li>PlantUML (home page)<br />
<a href="http://plantuml.sourceforge.net/">http://plantuml.sourceforge.net/</a>
</li>

<li>PlantUML (download page)<br />
<a href="http://sourceforge.net/projects/plantuml/files/plantuml.jar/download">http://sourceforge.net/projects/plantuml/files/plantuml.jar/download</a>
</li>

<li>PlantUML (Language Reference Guide)<br />
<a href="http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf">http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf</a>
</li>

<li>Rhizome<br />
<a href="https://github.com/ztellman/rhizome">https://github.com/ztellman/rhizome</a>
</li>

<li>Swagger to UML<br />
<a href="https://github.com/nlohmann/swagger_to_uml">https://github.com/nlohmann/swagger_to_uml</a>
</li>

<li>pydiagrams<br />
<a href="https://github.com/billingtonm/pydiagrams">https://github.com/billingtonm/pydiagrams</a>
</li>

<li>graphviz(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/graphviz">https://linux.die.net/man/3/graphviz</a>
</li>

<li>dot(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/dot">https://linux.die.net/man/1/dot</a>
</li>

<li>neato(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/neato">https://linux.die.net/man/1/neato</a>
</li>

<li>twopi(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/twopi">https://linux.die.net/man/1/twopi</a>
</li>

<li>circo(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/circo">https://linux.die.net/man/1/circo</a>
</li>

<li>fdp(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/fdp">https://linux.die.net/man/1/fdp</a>
</li>

<li>sfdp(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/sfdp">https://linux.die.net/man/1/sfdp</a>
</li>

<li>Plain-text diagrams take shape in Asciidoctor!<br />
<a href="http://asciidoctor.org/new­s/2014/02/18/plain-text-diagrams-in-asciidoctor/">http://asciidoctor.org/new­s/2014/02/18/plain-text-diagrams-in-asciidoctor/</a>
</li>

<li>Graphviz – Graph Visualization Software<br />
<a href="http://www.graphviz.org/">http://www.graphviz.org/</a>
</li>

<li>graphviz (Manual Page)<br />
<a href="http://www.root.cz/man/7/graphviz/">http://www.root.cz/man/7/graphviz/</a>
</li>

<li>dot (Manual page)<br />
<a href="http://www.root.cz/man/1/dot/">http://www.root.cz/man/1/dot/</a>
</li>

<li>dot (Manual v&nbsp;PDF)<br />
<a href="https://graphviz.org/pdf/dot.1.pdf">https://graphviz.org/pdf/dot.1.pdf</a>
</li>

<li>Ditaa home page<br />
<a href="http://ditaa.sourceforge.net/">http://ditaa.sourceforge.net/</a>
</li>

<li>Ditaa introduction<br />
<a href="http://ditaa.sourceforge.net/#intro">http://ditaa.sourceforge.net/#intro</a>
</li>

<li>Ditaa usage<br />
<a href="http://ditaa.sourceforge.net/#usage">http://ditaa.sourceforge.net/#usage</a>
</li>

<li>Node, Edge and Graph Attributes<br />
<a href="http://www.graphviz.org/doc/in­fo/attrs.html">http://www.graphviz.org/doc/in­fo/attrs.html</a>
</li>

<li>Graphviz (Wikipedia)<br />
<a href="http://en.wikipedia.org/wiki/Graphviz">http://en.wikipedia.org/wiki/Graphviz</a>
</li>

<li>Unified Modeling Language<br />
<a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language">https://en.wikipedia.org/wiki/Unified_Modeling_Language</a>
</li>

<li>UML basics: The sequence diagram<br />
<a href="http://www.ibm.com/developerworks/rational/library/3101.html">http://www.ibm.com/developerworks/rational/library/3101.html</a>
</li>

<li>UML 2 State Machine Diagrams: An Agile Introduction<br />
<a href="http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm">http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm</a>
</li>

<li>Sequence diagram (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Sequence_diagram">https://en.wikipedia.org/wiki/Sequence_diagram</a>
</li>

<li>UML 2 Sequence Diagrams: An Agile Introduction<br />
<a href="http://www.agilemodeling.com/artifacts/sequenceDiagram.htm">http://www.agilemodeling.com/artifacts/sequenceDiagram.htm</a>
</li>

<li>A Quick Introduction to UML Sequence Diagrams<br />
<a href="http://www.tracemodeler.com/articles/a_quick_introduction_to_uml_sequence_diagrams/">http://www.tracemodeler.com/articles/a_quick_introduction_to_uml_sequence_diagrams/</a>
</li>

<li>UML Sequence Diagrams<br />
<a href="https://www.uml-diagrams.org/sequence-diagrams.html">https://www.uml-diagrams.org/sequence-diagrams.html</a>
</li>

<li>Web Sequence Diagrams<br />
<a href="https://www.websequencediagrams.com/">https://www.websequencediagrams.com/</a>
</li>

<li>Drawing sequence diagrams “napkin style”<br />
<a href="https://modeling-languages.com/drawing-sequence-diagrams-napkin-style/">https://modeling-languages.com/drawing-sequence-diagrams-napkin-style/</a>
</li>

<li>Curated list of UML tools – 2020 edition<br />
<a href="https://modeling-languages.com/uml-tools/#textual">https://modeling-languages.com/uml-tools/#textual</a>
</li>

<li>Flowchart diagrams vs. UML activity diagrams<br />
<a href="https://stackoverflow.com/questions/7081215/flowchart-diagrams-vs-uml-activity-diagrams">https://stackoverflow.com/questions/7081215/flowchart-diagrams-vs-uml-activity-diagrams</a>
</li>

<li>Kopenograms – Graphical Language for Structured Algorithms<br />
<a href="https://kopenogram.org/Assets/Kopenograms_Graphical_Language_for_Structured_Algorithms.pdf">https://kopenogram.org/Assets/Kopenograms_Graphical_Language_for_Structured_Algorithms.pdf</a>
</li>

<li>Kopenograms and Their Implementation in BlueJ<br />
<a href="https://link.springer.com/chapter/10.1007%2F978-3-319-46535-7_8">https://link.springer.com/chapter/10.1007%2F978-3-319-46535-7_8</a>
</li>

<li>The simplest way to describe your flows<br />
<a href="https://code2flow.com/">https://code2flow.com/</a>
</li>

<li>Allan Mogensen and his Legacy<br />
<a href="http://www.worksimp.com/articles/allan-mogensen.htm">http://www.worksimp.com/articles/allan-mogensen.htm</a>
</li>

<li>Diagrams: Diagram as Code<br />
<a href="https://diagrams.mingrammer.com/">https://diagrams.mingrammer.com/</a>
</li>

<li>Diagrams: Guides<br />
<a href="https://diagrams.mingrammer.com/docs/guides/diagram">https://diagrams.mingrammer.com/docs/guides/diagram</a>
</li>

<li>Diagrams: Nodes<br />
<a href="https://diagrams.mingrammer.com/docs/nodes/">https://diagrams.mingrammer.com/docs/nodes/onprem</a>
</li>

<li>go-diagrams<br />
<a href="https://github.com/blushft/go-diagrams">https://github.com/blushft/go-diagrams</a>
</li>

<li>GoJS<br />
<a href="https://gojs.net/latest/index.html">https://gojs.net/latest/index.html</a>
</li>

<li>Code visualization: How to turn complex code into diagrams<br />
<a href="https://www.lucidchart.com/blog/visualize-code-documentation">https://www.lucidchart.com/blog/visualize-code-documentation</a>
</li>

<li>Create dependency diagrams from your code<br />
<a href="https://docs.microsoft.com/en-us/visualstudio/modeling/create-layer-diagrams-from-your-code?view=vs-2019">https://docs.microsoft.com/en-us/visualstudio/modeling/create-layer-diagrams-from-your-code?view=vs-2019</a>
</li>

<li>Software Architecture Diagrams as Code<br />
<a href="https://shekhargulati.com/2020/04/21/software-architecture-diagrams-as-code/">https://shekhargulati.com/2020/04/21/software-architecture-diagrams-as-code/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2021</small></p>
</body>
</html>

