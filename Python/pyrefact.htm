<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Automatický refaktoring zdrojových kódů Pythonu s využitím nástroje Pyrefact</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Automatický refaktoring zdrojových kódů Pythonu s využitím nástroje Pyrefact</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Automatický refaktoring zdrojových kódů Pythonu s&nbsp;využitím nástroje Pyrefact</a></p>
<p><a href="#k02">2. Instalace nástroje Pyrefact</a></p>
<p><a href="#k03">3. Odstranění nepoužívaných globálních a lokálních proměnných</a></p>
<p><a href="#k04">4. Refaktoring globálních proměnných, k&nbsp;nimž se přistupuje z&nbsp;funkcí</a></p>
<p><a href="#k05">5. Přenos opakujících se výpočtů před blok s&nbsp;podmínkou</a></p>
<p><a href="#k06">6. Optimalizace kódu provádějící postupné připojování prvků do seznamu</a></p>
<p><a href="#k07">7. Náhrada programových smyček se seznamy, množinami a slovníky za generátorovou notaci</a></p>
<p><a href="#k08">8. Náhrada programové smyčky za konstantu či výpočet se složitostí O(n)</a></p>
<p><a href="#k09">9. Zjednodušení či náhrada vnořených smyček za konstantu nebo jednodušší výraz</a></p>
<p><a href="#k10">10. Omezení optimalizace smyček</a></p>
<p><a href="#k11">*** 11. Částečná optimalizace</a></p>
<p><a href="#k12">*** 12. Odstranění mrtvého kódu</a></p>
<p><a href="#k13">*** 13. Oprava neidiomatických porovnání hodnot</a></p>
<p><a href="#k14">*** 14. Optimalizace operací s&nbsp;n-rozměrnými poli (NumPy)</a></p>
<p><a href="#k15">*** 15. Detekce chybějícího správce kontextu</a></p>
<p><a href="#k16">*** 16. Nepatrně složitější skript, který se má optimalizovat</a></p>
<p><a href="#k17">*** 17. Některá omezení a tipy na praktické použití</a></p>
<p><a href="#k18">*** 18. Závěrečné zhodnocení</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Automatický refaktoring zdrojových kódů Pythonu s&nbsp;využitím nástroje Pyrefact</h2>

<p>V&nbsp;několika předchozích článcích [<a
href="https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python/">1</a>]
[<a
href="https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python-2-cast/">2</a>]
[<a
href="https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python-3-cast/">3</a>]
[<a
href="https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-jazyka-python-4-cast/">4</a>]
jsme se zabývali problematikou lexikální analýzy zdrojových kódů psaných
v&nbsp;Pythonu a popsali jsme si i základní knihovny pro práci
s&nbsp;abstraktním syntaktickým stromem (<i>AST &ndash; Abstract Syntax
Tree</i>). Na tyto články jsme navázali dvojicí článků [<a
href="https://www.root.cz/clanky/knihovna-libcst-umoznujici-snadnou-modifikaci-zdrojovych-kodu-pythonu/">5</a>]
[<a
href="https://www.root.cz/clanky/knihovna-libcst-umoznujici-snadnou-modifikaci-zdrojovych-kodu-pythonu-2-cast/">6</a>]
o knihovně LibCST, která převádí zdrojové kódy Pythonu na <i>CST</i>
(<i>Concrete Syntax Tree</i>) a umožňuje i zpětný převod z&nbsp;CST do
zdrojových kódů Pythonu.</p>

<p>Dnes si ukážeme praktické nasazení těchto nástrojů, zejména pak využití
standardní knihovny AST. Popíšeme si totiž dnes (ještě?) prakticky neznámý
nástroj nazvaný příznačně <i>Pyrefact</i>. Tento nástroj dokáže analyzovat
zdrojové kódy Pythonu (na úrovni AST) a různými způsoby je upravovat,
vylepšovat, odstraňovat mrtvý kód atd. Kvůli tomu, že se nepoužívá CST, ale
pouze &bdquo;obyčejný&ldquo; abstraktní syntaktický strom, jsou zdrojové kódy
následně zformátovány nástrojem Black (ten je již mnohem známější). I tak však
dochází ke ztrátám informace (komentáře) atd., což ještě uvidíme.</p>

<p><div class="rs-tip-major">Poznámka: pro dále popisovaný nástroj
<i>Pyrefact</i> bylo vytvořeno i rozšíření (plugin) do VSCode, které je
dostupné na <a
href="https://marketplace.visualstudio.com/items?itemName=olleln.pyrefact">https://marketplace.visualstudio.com/items?itemName=olleln.pyrefact</a>.
Toto rozšíření umožní provádět automatický refaktoring přímo z&nbsp;tohoto IDE.
My si však v&nbsp;dalším textu ukážeme základní volání Pyrefactu
z&nbsp;příkazové řádky (výsledky by měly být stejné).</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Instalace nástroje Pyrefact</h2>

<p>Instalace nástroje Pyrefact je (většinou) snadná, protože je nabízen jako
standardní balíček pro <strong>pip</strong>, <strong>pdm</strong> apod. My si
v&nbsp;této kapitole ukážeme výpis zpráv z&nbsp;celé instalace, protože je
z&nbsp;něho patrné, na jakých dalších knihovnách Pyrefact závisí. Jedná se o
Black (formátování kódu), Sympy (symbolické operace) a taktéž o knihovnu pro
zpětné vygenerování zdrojového kódu na základě AST:</p>

<pre>
$ <strong>pip install --user pyrefact</strong>
&nbsp;
Collecting pyrefact
  Downloading pyrefact-100-py3-none-any.whl (90 kB)
     |████████████████████████████████| 90 kB 380 kB/s 
Collecting rmspace&gt;=7
  Downloading rmspace-7-py3-none-any.whl (4.6 kB)
Collecting black&gt;=23.1.0
  Downloading black-24.3.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.7 MB)
     |████████████████████████████████| 1.7 MB 9.6 kB/s 
Collecting astunparse==1.6.3; python_version &lt; "3.9"
  Downloading astunparse-1.6.3-py2.py3-none-any.whl (12 kB)
Collecting sympy&gt;=1.11.0
  Downloading sympy-1.12-py3-none-any.whl (5.7 MB)
     |████████████████████████████████| 5.7 MB 4.9 MB/s 
Collecting compactify&gt;=2
  Downloading compactify-2.tar.gz (5.9 kB)
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
  Installing backend dependencies ... done
    Preparing wheel metadata ... done
Requirement already satisfied: packaging&gt;=22.0 in ./.local/lib/python3.8/site-packages (from black&gt;=23.1.0-&gt;pyrefact) (23.2)
Requirement already satisfied: mypy-extensions&gt;=0.4.3 in /usr/lib/python3/dist-packages (from black&gt;=23.1.0-&gt;pyrefact) (0.4.3)
Requirement already satisfied: typing-extensions&gt;=4.0.1; python_version &lt; "3.11" in ./.local/lib/python3.8/site-packages (from black&gt;=23.1.0-&gt;pyrefact) (4.8.0)
Requirement already satisfied: platformdirs&gt;=2 in ./.local/lib/python3.8/site-packages (from black&gt;=23.1.0-&gt;pyrefact) (3.11.0)
Collecting click&gt;=8.0.0
  Downloading click-8.1.7-py3-none-any.whl (97 kB)
     |████████████████████████████████| 97 kB 922 kB/s 
Requirement already satisfied: tomli&gt;=1.1.0; python_version &lt; "3.11" in ./.local/lib/python3.8/site-packages (from black&gt;=23.1.0-&gt;pyrefact) (2.0.1)
Collecting pathspec&gt;=0.9.0
  Downloading pathspec-0.12.1-py3-none-any.whl (31 kB)
Requirement already satisfied: six&lt;2.0,&gt;=1.6.1 in /usr/lib/python3/dist-packages (from astunparse==1.6.3; python_version &lt; "3.9"-&gt;pyrefact) (1.14.0)
Requirement already satisfied: wheel&lt;1.0,&gt;=0.23.0 in /usr/lib/python3/dist-packages (from astunparse==1.6.3; python_version &lt; "3.9"-&gt;pyrefact) (0.34.2)
Collecting mpmath&gt;=0.19
  Downloading mpmath-1.3.0-py3-none-any.whl (536 kB)
     |████████████████████████████████| 536 kB 2.0 MB/s 
Building wheels for collected packages: compactify
  Building wheel for compactify (PEP 517) ... done
  Created wheel for compactify: filename=compactify-2-py3-none-any.whl size=6850 sha256=dcab51ae42efd742463616c4d68f9c4b1ef035484048417debb9e5abab2cf42c
  Stored in directory: /home/tester/.cache/pip/wheels/58/46/2a/4574dab165b65a01166f0511fa0f3228b21bd83b56227c84c2
Successfully built compactify
Installing collected packages: rmspace, click, pathspec, black, astunparse, mpmath, sympy, compactify, pyrefact
Successfully installed astunparse-1.6.3 black-24.3.0 click-8.1.7 compactify-2 mpmath-1.3.0 pathspec-0.12.1 pyrefact-100 rmspace-7 sympy-1.12
</pre>



<p><a name="k03"></a></p>
<h2 id="k03">3. Odstranění nepoužívaných globálních a lokálních proměnných</h2>

<p>První ukázkou možností nabízených nástrojem Pyrefact bude odstranění
nepoužívaných globálních proměnných. Například v&nbsp;tomto programovém kódu
jsou zapsány dvě globální proměnné, které se nikde nečtou:</p>

<pre>
x = input()
y = 42
</pre>

<p>Výsledkem refaktoringu bude pouze volání funkce <strong>input</strong>. Tato
funkce zůstala zachována, protože má vedlejší efekt, s&nbsp;níž je nutné
počítat:</p>

<pre>
input()
</pre>

<p>Podobně dokáže Pyrefact odstranit i nepoužívané lokální proměnné:</p>

<pre>
def add(x, y):
    added = x + y
    subtracted = x - y
    return added
&nbsp;
print(add(1, 2))
</pre>

<p>Výsledkem refaktoringu bude zdrojový kód s&nbsp;následujícím obsahem:</p>

<pre>
def _add(x, y):
    return x + y
&nbsp;
print(_add(1, 2))
</pre>

<p><div class="rs-tip-major">Poznámka: podtržítko před jméno funkce bylo
přidáno z&nbsp;toho důvodu, že se jedná o lokální funkci.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Refaktoring globálních proměnných, k&nbsp;nimž se přistupuje z&nbsp;funkcí</h2>

<p>Pyrefact se taktéž snaží o optimalizaci funkcí, ve kterých se pracuje
s&nbsp;globálními proměnnými. Ukažme si (zcela umělý) příklad s&nbsp;funkcí,
jež čte hodnoty dvou globálních proměnných a mění hodnotu třetí takové
proměnné:</p>

<pre>
x = 1
y = 2
z = 3
&nbsp;
def add_globals():
    global x, y, z
    z = x + y
&nbsp;
add_globals(1, 2)
print(z)
</pre>

<p><div class="rs-tip-major">Poznámka: předávané parametry do
<strong>add_globals</strong> se nevyužijí.</div></p>

<p>V&nbsp;tomto konkrétním případě se zcela odstraní přístup ke globálním
proměnným, což není korektní:</p>

<pre>
Z = 3
&nbsp;
def _add_globals():
    global x, y, z
&nbsp;
_add_globals(1, 2)
print(Z)
</pre>

<p>Ještě lépe je to patrné na příkladu, který se po refaktoringu chová odlišně
&ndash; tedy chyba Pyrefactu:</p>

<pre>
x = 1
y = 2
z = 0
&nbsp;
def add_globals():
    global x, y, z
    z = x + y
&nbsp;
add_globals()
print(z)
</pre>

<p>Tento skript vypíše hodnotu 3.</p>

<p>Po refaktoringu dostaneme:</p>

<pre>
Z = 0
&nbsp;
def _add_globals():
    global x, y, z
&nbsp;
_add_globals()
print(Z)
</pre>

<p>Což je evidentně nekorektní výsledek!</p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Přenos opakujících se výpočtů před blok s&nbsp;podmínkou</h2>

<p>Velmi užitečnou optimalizací je přenos těch výpočtů, které se opakují ve
všech větvích podmínky, před blok s&nbsp;podmínkou. Vypadá to následovně:</p>

<pre>
x = input()
&nbsp;
if x == "yes":
    y = 1
    print("ok")
else:
    y = 1
    print("skip")
&nbsp;
print(y)
</pre>

<p>Pyrefact v&nbsp;tomto případě přenesl příkaz (<i>statement</i>)
<strong>y=1</strong> před vlastní blok s&nbsp;podmínkou a navíc přejmenoval
globální proměnné tak, aby byly zapsány s&nbsp;velkými písmeny:</p>

<pre>
X = input()
&nbsp;
&nbsp;
Y = 1
if X == "yes":
&nbsp;
    print("ok")
else:
&nbsp;
    print("skip")
&nbsp;
print(Y)
</pre>

<p>Podívejme se, co se stane ve chvíli, kdy z&nbsp;proměnné <strong>y</strong>
nebudeme provádět čtení (tedy odstraníme poslední příkaz
<strong>print</strong>):</p>

<pre>
x = input()
&nbsp;
if x == "yes":
    y = 1
    print("ok")
else:
    y = 1
    print("skip")
</pre>

<p>Pyrefact v&nbsp;tomto případě proměnnou <strong>y</strong> odstranil a (což
je asi chyba) ponechal konstantu <strong>1</strong> ve zdrojovém kódu. Tato
konstanta se vyhodnotí sama na sebe a výsledek se zahodí, takže to ve
skutečnosti až tak nevadí, i když zrovna Pyrefact by měl jít v&nbsp;tomto
případě příkladem:</p>

<pre>
X = input()
&nbsp;
if X == "yes":
    print("ok")
else:
    1
    print("skip")
</pre>



<p><a name="k06"></a></p>
<h2 id="k06">6. </h2>

<pre>
x = []

for i in range(10):
    x.append(i)

print(x)
</pre>

<pre>
X = list(range(10))


print(X)
</pre>



<p><a name="k07"></a></p>
<h2 id="k07">7. Náhrada programových smyček se seznamy, množinami a slovníky za generátorovou notaci</h2>

<pre>
x = []

for i in range(10):
    x.append(i*2)

print(x)
</pre>

<pre>
X = [i * 2 for i in range(10)]


print(X)
</pre>

<pre>
x = set()

for i in range(10):
    x.add(i*2)

print(x)
</pre>

<pre>
X = {i * 2 for i in range(10)}


print(X)
</pre>

<pre>
x = {}

for i in range(10):
    x[i] = i * 2

print(x)
</pre>

<pre>
X = {i: i * 2 for i in range(10)}


print(X)
</pre>



<p><a name="k08"></a></p>
<h2 id="k08">8. Náhrada programové smyčky za konstantu či výpočet se složitostí O(n)</h2>

<pre>
s = 0

for i in range(1001):
    s += i

print(s)
</pre>

<pre>
S = 500500


print(S)
</pre>

<pre>
l = []

for i in range(1001):
    l.append(i)

s = sum(l)
print(s)
</pre>

<pre>
S = 500500
print(S)
</pre>



<p><a name="k09"></a></p>
<h2 id="k09">9. Zjednodušení či náhrada vnořených smyček za konstantu nebo jednodušší výraz</h2>

<pre>
l = []

for i in range(1001):
    for j in range(1001):
        l.append(i)

s = sum(l)
print(s)
</pre>

<pre>
S = 501000500
print(S)
</pre>



<p><a name="k10"></a></p>
<h2 id="k10">10. Omezení optimalizace smyček</h2>

<pre>
l = []
c = 100

for i in range(1001):
    l.append(i + c)

s = sum(l)
print(s)
</pre>

<pre>
L = []
C = 100

for i in range(1001):
    L.append(i + C)

S = sum(L)
print(S)
</pre>

<pre>
c = 100
l = []

for i in range(1001):
    l.append(i + c)

s = sum(l)
print(s)
</pre>

<pre>
C = 100


S = 1001 * C + 500500
print(S)
</pre>



<p><a name="k11"></a></p>
<h2 id="k11">11. Částečná optimalizace</h2>

<pre>
l = []

for i in range(1001):
    m = []
    for j in range(1001):
        m.append(j)
    l.extend(m)

s = sum(l)
print(s)
</pre>

<pre>
L = []

for _ in range(1001):
    m = list(range(1001))
    L.extend(m)

S = sum(L)
print(S)
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Odstranění mrtvého kódu</h2>

<pre>
import math
import sys

def foo(x):
    import os
    y = False
    z = False
    w = []

    if x > 0:
        y = True

    if 0:
        z = True

    if x >= 1:
        return 10

    return 0


print(foo(0))
print(foo(1))
print(foo(2))
</pre>

<pre>
def _foo(x):

    if x >= 1:
        return 10
    return 0


print(_foo(0))
print(_foo(1))
print(_foo(2))
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. </h2>



<p><a name="k14"></a></p>
<h2 id="k14">14. </h2>



<p><a name="k15"></a></p>
<h2 id="k15">15. </h2>



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
programovací jazyk Python 3 a nástroj <i>pyrefact</i> byly uloženy do Git
repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>01_unused_variables_input.py     </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/01_unused_variables_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/01_unused_variables_input.py</a></td></tr>
<tr><td> 2</td><td>01_unused_variables_output.py     </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/01_unused_variables_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/01_unused_variables_output.py</a></td></tr>
<tr><td> 3</td><td>02_local_variables_input.py       </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/02_local_variables_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/02_local_variables_input.py</a></td></tr>
<tr><td> 4</td><td>02_local_variables_output.py      </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/02_local_variables_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/02_local_variables_output.py</a></td></tr>
<tr><td> 5</td><td>03_global_variables_input.py      </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/03_global_variables_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/03_global_variables_input.py</a></td></tr>
<tr><td> 6</td><td>03_global_variables_output.py     </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/03_global_variables_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/03_global_variables_output.py</a></td></tr>
<tr><td> 7</td><td>04_if_else_input.py               </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/04_if_else_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/04_if_else_input.py</a></td></tr>
<tr><td> 8</td><td>04_if_else_output.py              </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/04_if_else_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/04_if_else_output.py</a></td></tr>
<tr><td> 9</td><td>05_if_else_input.py               </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/05_if_else_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/05_if_else_input.py</a></td></tr>
<tr><td>10</td><td>05_if_else_output.py              </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/05_if_else_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/05_if_else_output.py</a></td></tr>
<tr><td>11</td><td>06_list_append_input.py           </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/06_list_append_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/06_list_append_input.py</a></td></tr>
<tr><td>12</td><td>06_list_append_output.py          </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/06_list_append_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/06_list_append_output.py</a></td></tr>
<tr><td>13</td><td>07_list_comprehension_input.py    </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/07_list_comprehension_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/07_list_comprehension_input.py</a></td></tr>
<tr><td>14</td><td>07_list_comprehension_output.py   </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/07_list_comprehension_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/07_list_comprehension_output.py</a></td></tr>
<tr><td>15</td><td>08_set_comprehension_input.py     </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/08_set_comprehension_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/08_set_comprehension_input.py</a></td></tr>
<tr><td>16</td><td>08_set_comprehension_output.py    </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/08_set_comprehension_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/08_set_comprehension_output.py</a></td></tr>
<tr><td>17</td><td>09_dict_comprehension_input.py    </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/09_dict_comprehension_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/09_dict_comprehension_input.py</a></td></tr>
<tr><td>18</td><td>09_dict_comprehension_output.py   </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/09_dict_comprehension_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/09_dict_comprehension_output.py</a></td></tr>
<tr><td>19</td><td>10_loop_to_constant_input.py      </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/10_loop_to_constant_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/10_loop_to_constant_input.py</a></td></tr>
<tr><td>20</td><td>10_loop_to_constant_output.py     </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/10_loop_to_constant_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/10_loop_to_constant_output.py</a></td></tr>
<tr><td>21</td><td>11_loop_to_constant_input.py      </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/11_loop_to_constant_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/11_loop_to_constant_input.py</a></td></tr>
<tr><td>22</td><td>11_loop_to_constant_output.py     </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/11_loop_to_constant_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/11_loop_to_constant_output.py</a></td></tr>
<tr><td>23</td><td>12_loop_to_constant_input.py      </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/12_loop_to_constant_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/12_loop_to_constant_input.py</a></td></tr>
<tr><td>24</td><td>12_loop_to_constant_output.py     </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/12_loop_to_constant_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/12_loop_to_constant_output.py</a></td></tr>
<tr><td>25</td><td>13_loop_to_constant_input.py      </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/13_loop_to_constant_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/13_loop_to_constant_input.py</a></td></tr>
<tr><td>26</td><td>13_loop_to_constant_output.py     </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/13_loop_to_constant_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/13_loop_to_constant_output.py</a></td></tr>
<tr><td>27</td><td>14_loop_to_constant_input.py      </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/14_loop_to_constant_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/14_loop_to_constant_input.py</a></td></tr>
<tr><td>28</td><td>14_loop_to_constant_output.py     </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/14_loop_to_constant_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/14_loop_to_constant_output.py</a></td></tr>
<tr><td>29</td><td>15_no_full_optimization_input.py  </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/15_no_full_optimization_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/15_no_full_optimization_input.py</a></td></tr>
<tr><td>30</td><td>15_no_full_optimization_output.py </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/15_no_full_optimization_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/15_no_full_optimization_output.py</a></td></tr>
<tr><td>31</td><td>16_dead_code_elimination_input.py </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/16_dead_code_elimination_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/16_dead_code_elimination_input.py</a></td></tr>
<tr><td>32</td><td>16_dead_code_elimination_output.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/16_dead_code_elimination_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/16_dead_code_elimination_output.py</a></td></tr>
<tr><td>33</td><td>17_equality_check_input.py        </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/17_equality_check_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/17_equality_check_input.py</a></td></tr>
<tr><td>34</td><td>17_equality_check_output.py       </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/17_equality_check_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/17_equality_check_output.py</a></td></tr>
<tr><td>35</td><td>18_numpy_sum_input.py             </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/18_numpy_sum_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/18_numpy_sum_input.py</a></td></tr>
<tr><td>36</td><td>18_numpy_sum_output.py            </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/18_numpy_sum_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/18_numpy_sum_output.py</a></td></tr>
<tr><td>37</td><td>19_context_manager_input.py       </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/19_context_manager_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/19_context_manager_input.py</a></td></tr>
<tr><td>38</td><td>19_context_manager_output.py      </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/19_context_manager_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/19_context_manager_output.py</a></td></tr>
<tr><td>39</td><td>20_processor_input.py             </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/20_processor_input.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/20_processor_input.py</a></td></tr>
<tr><td>40</td><td>20_processor_output.py            </td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/20_processor_output.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyrefact/20_processor_output.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>pyrefact na PyPi<br />
<a href="https://pypi.org/project/pyrefact/">https://pypi.org/project/pyrefact/</a>
</li>

<li>Repositář projektu pyrefact<br />
<a href="https://github.com/OlleLindgren/pyrefact">https://github.com/OlleLindgren/pyrefact</a>
</li>

<li>pyrefact jako plugin do VSCode<br />
<a href="https://marketplace.visualstudio.com/items?itemName=olleln.pyrefact">https://marketplace.visualstudio.com/items?itemName=olleln.pyrefact</a>
</li>

<li>pyrefact-vscode-extension (repositář)<br />
<a href="https://github.com/OlleLindgren/pyrefact-vscode-extension">https://github.com/OlleLindgren/pyrefact-vscode-extension</a>
</li>

<li>Best Python Refactoring Tools for 2023<br />
<a href="https://www.developer.com/languages/python/best-python-refactoring-tools/">https://www.developer.com/languages/python/best-python-refactoring-tools/</a>
</li>

<li>Python Refactoring: Techniques, Tools, and Best Practices<br />
<a href="https://www.codesee.io/learning-center/python-refactoring">https://www.codesee.io/learning-center/python-refactoring</a>
</li>

<li>Lexikální a syntaktická analýza zdrojových kódů programovacího jazyka Python<br />
<a href="https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python/">https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python/</a>
</li>

<li>Lexikální a syntaktická analýza zdrojových kódů programovacího jazyka Python (2.část)<br />
<a href="https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python-2-cast/">https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python-2-cast/</a>
</li>

<li>Lexikální a syntaktická analýza zdrojových kódů programovacího jazyka Python (3.část)<br />
<a href="https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python-3-cast/">https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-programovaciho-jazyka-python-3-cast/</a>
</li>

<li>Lexikální a syntaktická analýza zdrojových kódů jazyka Python (4.část)<br />
<a href="https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-jazyka-python-4-cast/">https://www.root.cz/clanky/lexikalni-a-syntakticka-analyza-zdrojovych-kodu-jazyka-python-4-cast/</a>
</li>

<li>Knihovna LibCST umožňující snadnou modifikaci zdrojových kódů Pythonu<br />
<a href="https://www.root.cz/clanky/knihovna-libcst-umoznujici-snadnou-modifikaci-zdrojovych-kodu-pythonu/">https://www.root.cz/clanky/knihovna-libcst-umoznujici-snadnou-modifikaci-zdrojovych-kodu-pythonu/</a>
</li>

<li>LibCST &ndash; dokumentace<br />
<a href="https://libcst.readthedocs.io/en/latest/index.html">https://libcst.readthedocs.io/en/latest/index.html</a>
</li>

<li>libCST na PyPi<br />
<a href="https://pypi.org/project/libcst/">https://pypi.org/project/libcst/</a>
</li>

<li>libCST na GitHubu<br />
<a href="https://github.com/Instagram/LibCST">https://github.com/Instagram/LibCST</a>
</li>

<li>Inside The Python Virtual Machine<br />
<a href="https://leanpub.com/insidethepythonvirtualmachine">https://leanpub.com/insidethepythonvirtualmachine</a>
</li>

<li>module-py_compile<br />
<a href="https://docs.python.org/3.8/library/py_compile.html">https://docs.python.org/3.8/library/py_compile.html</a>
</li>

<li>Given a python .pyc file, is there a tool that let me view the bytecode?<br />
<a href="https://stackoverflow.com/questions/11141387/given-a-python-pyc-file-is-there-a-tool-that-let-me-view-the-bytecode">https://stackoverflow.com/questions/11141387/given-a-python-pyc-file-is-there-a-tool-that-let-me-view-the-bytecode</a>
</li>

<li>The structure of .pyc files<br />
<a href="https://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html">https://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html</a>
</li>

<li>Python Bytecode: Fun With Dis<br />
<a href="http://akaptur.github.io/blog/2013/08/14/python-bytecode-fun-with-dis/">http://akaptur.github.io/blog/2013/08/14/python-bytecode-fun-with-dis/</a>
</li>

<li>Python's Innards: Hello, ceval.c!<br />
<a href="http://tech.blog.aknin.name/category/my-projects/pythons-innards/">http://tech.blog.aknin.name/category/my-projects/pythons-innards/</a>
</li>

<li>Byterun<br />
<a href="https://github.com/nedbat/byterun">https://github.com/nedbat/byterun</a>
</li>

<li>Python Byte Code Instructions<br />
<a href="http://document.ihg.uni-duisburg.de/Documentation/Python/lib/node56.html">http://document.ihg.uni-duisburg.de/Documentation/Python/lib/node56.html</a>
</li>

<li>Python Byte Code Instructions<br />
<a href="https://docs.python.org/3.2/library/dis.html#python-bytecode-instructions">https://docs.python.org/3.2/library/dis.html#python-bytecode-instructions</a>
</li>

<li>dis - Python module<br />
<a href="https://docs.python.org/2/library/dis.html">https://docs.python.org/2/library/dis.html</a>
</li>

<li>Comparison of Python virtual machines<br />
<a href="http://polishlinux.org/apps/cli/comparison-of-python-virtual-machines/">http://polishlinux.org/apps/cli/comparison-of-python-virtual-machines/</a>
</li>

<li>O-code<br />
<a href="http://en.wikipedia.org/wiki/O-code_machine">http://en.wikipedia.org/wiki/O-code_machine</a>
</li>

<li>Abstract syntax tree<br />
<a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">https://en.wikipedia.org/wiki/Abstract_syntax_tree</a>
</li>

<li>Lexical analysis<br />
<a href="https://en.wikipedia.org/wiki/Lexical_analysis">https://en.wikipedia.org/wiki/Lexical_analysis</a>
</li>

<li>Parser<br />
<a href="https://en.wikipedia.org/wiki/Parsing#Parser">https://en.wikipedia.org/wiki/Parsing#Parser</a>
</li>

<li>Parse tree<br />
<a href="https://en.wikipedia.org/wiki/Parse_tree">https://en.wikipedia.org/wiki/Parse_tree</a>
</li>

<li>Derivační strom<br />
<a href="https://cs.wikipedia.org/wiki/Deriva%C4%8Dn%C3%AD_strom">https://cs.wikipedia.org/wiki/Deriva%C4%8Dn%C3%AD_strom</a>
</li>

<li>Python doc: ast — Abstract Syntax Trees<br />
<a href="https://docs.python.org/3/library/ast.html">https://docs.python.org/3/library/ast.html</a>
</li>

<li>Python doc: tokenize — Tokenizer for Python source<br />
<a href="https://docs.python.org/3/library/tokenize.html">https://docs.python.org/3/library/tokenize.html</a>
</li>

<li>SymbolTable<br />
<a href="https://docs.python.org/3.8/library/symtable.html">https://docs.python.org/3.8/library/symtable.html</a>
</li>

<li>5 Amazing Python AST Module Examples<br />
<a href="https://www.pythonpool.com/python-ast/">https://www.pythonpool.com/python-ast/</a>
</li>

<li>Intro to Python ast Module<br />
<a href="https://medium.com/@wshanshan/intro-to-python-ast-module-bbd22cd505f7">https://medium.com/@wshanshan/intro-to-python-ast-module-bbd22cd505f7</a>
</li>

<li>Golang AST Package<br />
<a href="https://golangdocs.com/golang-ast-package">https://golangdocs.com/golang-ast-package</a>
</li>

<li>AP8, IN8 Regulární jazyky<br />
<a href="http://statnice.dqd.cz/home:inf:ap8">http://statnice.dqd.cz/home:inf:ap8</a>
</li>

<li>AP9, IN9 Konečné automaty<br />
<a href="http://statnice.dqd.cz/home:inf:ap9">http://statnice.dqd.cz/home:inf:ap9</a>
</li>

<li>AP10, IN10 Bezkontextové jazyky<br />
<a href="http://statnice.dqd.cz/home:inf:ap10">http://statnice.dqd.cz/home:inf:ap10</a>
</li>

<li>AP11, IN11 Zásobníkové automaty, Syntaktická analýza<br />
<a href="http://statnice.dqd.cz/home:inf:ap11">http://statnice.dqd.cz/home:inf:ap11</a>
</li>

<li>Introduction to YACC<br />
<a href="https://www.geeksforgeeks.org/introduction-to-yacc/">https://www.geeksforgeeks.org/introduction-to-yacc/</a>
</li>

<li>Introduction of Lexical Analysis<br />
<a href="https://www.geeksforgeeks.org/introduction-of-lexical-analysis/?ref=lbp">https://www.geeksforgeeks.org/introduction-of-lexical-analysis/?ref=lbp</a>
</li>

<li>Využití knihovny Pygments (nejenom) pro obarvení zdrojových kódů<br />
<a href="https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/">https://www.root.cz/clanky/vyuziti-knihovny-pygments-nejenom-pro-obarveni-zdrojovych-kodu/</a>
</li>

<li>Pygments - Python syntax highlighter<br />
<a href="http://pygments.org/">http://pygments.org/</a>
</li>

<li>Pygments (dokumentace)<br />
<a href="http://pygments.org/docs/">http://pygments.org/docs/</a>
</li>

<li>Write your own filter<br />
<a href="http://pygments.org/docs/filterdevelopment/">http://pygments.org/docs/filterdevelopment/</a>
</li>

<li>Write your own lexer<br />
<a href="http://pygments.org/docs/lexerdevelopment/">http://pygments.org/docs/lexerdevelopment/</a>
</li>

<li>Write your own formatter<br />
<a href="http://pygments.org/docs/formatterdevelopment/">http://pygments.org/docs/formatterdevelopment/</a>
</li>

<li>Jazyky podporované knihovnou Pygments<br />
<a href="http://pygments.org/languages/">http://pygments.org/languages/</a>
</li>

<li>Pygments FAQ<br />
<a href="http://pygments.org/faq/">http://pygments.org/faq/</a>
</li>

<li>Compiler Construction/Lexical analysis<br />
<a href="https://en.wikibooks.org/wiki/Compiler_Construction/Lexical_analysis">https://en.wikibooks.org/wiki/Compiler_Construction/Lexical_analysis</a>
</li>

<li>Compiler Design - Lexical Analysis<br />
<a href="https://www.tutorialspoint.com/compiler_design/compiler_design_lexical_analysis.htm">https://www.tutorialspoint.com/compiler_design/compiler_design_lexical_analysis.htm</a>
</li>

<li>Lexical Analysis - An Intro<br />
<a href="https://www.scribd.com/document/383765692/Lexical-Analysis">https://www.scribd.com/document/383765692/Lexical-Analysis</a>
</li>

<li>Python AST Visualizer<br />
<a href="https://github.com/pombredanne/python-ast-visualizer">https://github.com/pombredanne/python-ast-visualizer</a>
</li>

<li>What is an Abstract Syntax Tree<br />
<a href="https://blog.bitsrc.io/what-is-an-abstract-syntax-tree-7502b71bde27">https://blog.bitsrc.io/what-is-an-abstract-syntax-tree-7502b71bde27</a>
</li>

<li>Why is AST so important<br />
<a href="https://medium.com/@obernardovieira/why-is-ast-so-important-b1e7d6c29260">https://medium.com/@obernardovieira/why-is-ast-so-important-b1e7d6c29260</a>
</li>

<li>Emily Morehouse-Valcarcel - The AST and Me - PyCon 2018<br />
<a href="https://www.youtube.com/watch?v=XhWvz4dK4ng">https://www.youtube.com/watch?v=XhWvz4dK4ng</a>
</li>

<li>Python AST Parsing and Custom Linting<br />
<a href="https://www.youtube.com/watch?v=OjPT15y2EpE">https://www.youtube.com/watch?v=OjPT15y2EpE</a>
</li>

<li>Chase Stevens - Exploring the Python AST Ecosystem<br />
<a href="https://www.youtube.com/watch?v=Yq3wTWkoaYY">https://www.youtube.com/watch?v=Yq3wTWkoaYY</a>
</li>

<li>Full Grammar specification<br />
<a href="https://docs.python.org/3/reference/grammar.html">https://docs.python.org/3/reference/grammar.html</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2024</small></p>
</body>
</html>
