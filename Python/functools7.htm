<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Dekorátory funkcí a metod nabízené knihovnou funcy</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Dekorátory funkcí a metod nabízené knihovnou funcy</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>V již sedmé části seriálu, v němž se zabýváme funkcionálním programováním v Pythonu (ano, i to je do jisté míry možné) si ukážeme další mnohdy velmi užitečné dekorátory funkcí a metod nabízených knihovnou funcy.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. Dekorátory funkcí a metod nabízené knihovnou funcy</a></p>
<p><a href="#k02">2. Dekorátor <strong>@decorator</strong></a></p>
<p><a href="#k03">3. Dekorátory zjednodušující reakce na výjimky</a></p>
<p><a href="#k04">4. Dekorátor <strong>@silent</strong></a></p>
<p><a href="#k05">5. Příklady použití dekorátoru <strong>@silent</strong></a></p>
<p><a href="#k06">6. Zachycení výjimky, která je ve funkci vyhazována explicitně</a></p>
<p><a href="#k07">7. Dekorátor <strong>@ignore</strong></a></p>
<p><a href="#k08">8. Příklady použití dekorátoru <strong>@ignore</strong></a></p>
<p><a href="#k09">9. Vrácení zvolené hodnoty z&nbsp;funkce, ve které byla výjimka zachycena</a></p>
<p><a href="#k10">10. Rozdílné chování pro různé typy výjimek</a></p>
<p><a href="#k11">11. Transformace výjimky na jiný typ výjimky (s&nbsp;odlišnou zprávou) dekorátorem <strong>@reraise</strong></a></p>
<p><a href="#k12">*** 12. Ukázky použití dekorátoru <strong>@reraise</strong></a></p>
<p><a href="#k13">*** 13. Reakce na větší množství typů výjimek</a></p>
<p><a href="#k14">*** 14. Využití informací z&nbsp;původní výjimky v&nbsp;nové výjimce</a></p>
<p><a href="#k15">*** 15. Pokusy o opakované spuštění funkce při vyhození výjimky &ndash; dekorátor <strong>@retry</strong></a></p>
<p><a href="#k16">*** 16. </a></p>
<p><a href="#k17">*** 17. </a></p>
<p><a href="#k18">*** 18. </a></p>
<p><a href="#k19">*** 19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Dekorátory funkcí a metod nabízené knihovnou funcy</h2>

<p>V&nbsp;již sedmé části <a
href="https://www.root.cz/serialy/funkcionalni-programovani-v-pythonu/">seriálu,
v&nbsp;němž se zabýváme funkcionálním programováním v&nbsp;Pythonu</a> (ano, i
to je do jisté míry možné) si ukážeme další mnohdy velmi užitečné dekorátory
funkcí a metod nabízených knihovnou <i>funcy</i>. S&nbsp;některými dekorátory
jsme se již v&nbsp;tomto seriálu setkali, takže si je jen ve stručnosti
připomeňme. Posléze si popíšeme další (prozatím nezmíněné) dekorátory, jejichž
využitím lze zdrojový kód zjednodušit popř.&nbsp;zpřehlednit:</p>

<table>
<tr><th>Dekorátor</th><th>Kapitola</th><th>Stručný popis</th></tr>
<tr><td>@decorator</td><td><a href="#k02">2</a></td><td>deklarace funkce, ze které se vytvoří dekorátor</td></tr>
<tr><td>@silent</td><td><a href="#k04">4</a></td><td>ve funkci s&nbsp;dekorátorem se budou ignorovat všechny výjimky</td></tr>
<tr><td>@ignore</td><td><a href="#k07">7</a></td><td>ve funkci s&nbsp;dekorátorem se budou ignorovat vybrané výjimky + možnost zadat návratovou hodnotu funkce</td></tr>
<tr><td>@reraise</td><td><a href="#k11">11</a></td><td>transformace vyhozené výjimky na jiný typ výjimky (s&nbsp;odlišnou zprávou)</td></tr>
<tr><td>@retry</td><td><a href="#k15">15</a></td>pokusy o opakované spuštění funkce při vyhození výjimky<td></td></tr>
</table>



<p><a name="k02"></a></p>
<h2 id="k02">2. Dekorátor <strong>@decorator</strong></h2>

<p>V&nbsp;první řadě se jedná o dekorátor nazvaný přímočaře
<strong>@decorator</strong>. Jedná se o dekorátor, který je možné
s&nbsp;výhodou využít pro deklaraci vlastního dekorátoru (vytvořeného
z&nbsp;funkce), což může do značné míry zjednodušit zápis výsledného programu.
Použití tohoto dekorátoru je ve skutečnosti až triviálně snadné, protože
vlastně namísto původního wrapperu píšeme jen deklaraci &bdquo;obalovací&ldquo;
funkce. Zkusme si tedy převést funkci nazvanou <strong>wrapper</strong> na
skutečný dekorátor, který vzápětí použijeme:</p>

<pre>
from funcy import decorator
&nbsp;
&nbsp;
<u>@decorator</u>
def <strong>wrapper1</strong>(function):
    print("-" * 40)
    function()
    print("-" * 40)
&nbsp;
&nbsp;
<u>@wrapper1</u>
def <strong>hello</strong>():
    print("Hello!")
&nbsp;
&nbsp;
hello()
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_1.py</a>.</div></p>

<p>Pro úplnost se ještě podívejme na další příklad, který jsme si taktéž již
ukázali v&nbsp;předchozích článcích. Jedná se o několikanásobnou aplikaci více
dekorátorů, což znamená, že původní funkce je transformována do jiné funkce a
ta je dále transformována do další funkce (atd.). Připomeňme si, že zdrojový
kód tohoto příkladu (bez použití <strong>@decorator</strong>) vypadal
následovně:</p>

<pre>
def <strong>wrapper1</strong>(function):
    def <strong>inner_function</strong>():
        print("-" * 40)
        function()
        print("-" * 40)
&nbsp;
    return inner_function
&nbsp;
&nbsp;
def <strong>wrapper2</strong>(function):
    def <strong>inner_function</strong>():
        print("=" * 40)
        function()
        print("=" * 40)
&nbsp;
    return inner_function
&nbsp;
&nbsp;
<u>@wrapper1</u>
<u>@wrapper2</u>
def <strong>hello</strong>():
    print("Hello!")
&nbsp;
&nbsp;
hello()
</pre>

<p>Opět se podívejme na způsob zjednodušení celé struktury tohoto příkladu do
podoby založené na použití dekorátoru <strong>@decorator</strong>. Přepis je
přímočarý:</p>

<pre>
from funcy import decorator
&nbsp;
&nbsp;
<u>@decorator</u>
def <strong>wrapper1</strong>(function):
    print("-" * 40)
    function()
    print("-" * 40)
&nbsp;
&nbsp;
<u>@decorator</u>
def <strong>wrapper2</strong>(function):
    print("=" * 40)
    function()
    print("=" * 40)
&nbsp;
&nbsp;
<u>@wrapper1</u>
<u>@wrapper2</u>
def <strong>hello</strong>():
    print("Hello!")
&nbsp;
&nbsp;
hello()
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_2.py</a>.</div></p>

<p>Naposledy se podívejme na použití dekorátoru <strong>@decorator</strong>
z&nbsp;balíčku <i>funcy</i>. Tentokráte upravíme příklad s&nbsp;dekorátorem,
který dokáže změřit délku trvání nějaké operace v&nbsp;uživatelem specifikované
funkci. Původní zápis (opět bez použití <strong>@decorator</strong>) vypadal
následovně:</p>

<pre>
<i># Original code:</i>
<i># https://pythonbasics.org/decorators/#Real-world-examples</i>
&nbsp;
&nbsp;
import time
&nbsp;
&nbsp;
def <strong>measure_time</strong>(func):
    def <strong>wrapper</strong>(*arg):
        t = time.time()
        res = func(*arg)
        print("Function took " + str(time.time() - t) + " seconds to run")
        return res
&nbsp;
    return wrapper
&nbsp;
&nbsp;
<u>@measure_time</u>
def <strong>tested_function</strong>(n):
    time.sleep(n)
&nbsp;
&nbsp;
tested_function(1)
tested_function(2)
</pre>

<p>Přepis do stručnější a čitelnější podoby s&nbsp;využitím dekorátoru
<strong>@decorator</strong>:</p>

<pre>
from funcy import decorator
import time
&nbsp;
&nbsp;
<u>@decorator</u>
def <strong>measure_time</strong>(func):
    t = time.time()
    res = func()
    print("Function took " + str(time.time() - t) + " seconds to run")
    return res
&nbsp;
&nbsp;
<u>@measure_time</u>
def <strong>tested_function</strong>(n):
    print(f"Sleeping for {n} seconds")
    time.sleep(n)
&nbsp;
&nbsp;
tested_function(1)
tested_function(2)
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/measure_time.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/measure_time.py</a>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Dekorátory zjednodušující reakce na výjimky</h2>

<p>V&nbsp;knihovně <i>Funcy</i> nalezneme i několik dekorátorů, které dokážou
modifikovat způsob zpracování výjimek, které vzniknou (přesněji řečeno jsou
vyhozeny) ve funkci obalené dekorátorem. To vlastně znamená, že u takto
označených funkcí je způsob zpracování výjimek naznačen i bez toho, abychom
museli studovat kód takové funkce (což nám stejně nemusí pomoci, protože
výjimky mohou být vyhozeny z&nbsp;interně volaných funkcí a metod).
V&nbsp;navazujících kapitolách si ukážeme dekorátory určené pro zachycení a
zahození všech výjimek, dále dekorátor, který dokáže zachytit pouze určené
výjimky a můžeme v&nbsp;něm specifikovat i návratovou hodnotu z&nbsp;funkce
(pokud výjimka nastala) a nakonec i dekorátor, který zachycené výjimky dokáže
transformovat na jiný typ výjimky (takže například dokážeme všechny označené
výjimky transformovat na výjimku typu <strong>InternalServerError</strong>,
která je následně vrácena klientovi v&nbsp;HTTP odpovědi).</p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Dekorátor <strong>@silent</strong></h2>

<p>Prvním novým dekorátorem, se kterým se v&nbsp;dnešním článku seznámíme, je
dekorátor nazvaný <strong>@silent</strong>. Použití tohoto dekorátoru je ve
skutečnosti velmi jednoduché, protože slouží k&nbsp;zachycení a tichému
zahození (odtud jeho jméno) jakékoli výjimky, která může v&nbsp;dekorované
funkci nastat. Není tedy nutné ve funkci vytvářet řídicí strukturu
<strong>try-except</strong> s&nbsp;prázdným blokem <strong>except</strong>.</p>

<p><div class="rs-tip-major">Poznámka: jak prázdný blok <strong>except</strong>
(který tedy bude pouze obsahovat klíčové slovo <strong>pass</strong>), tak i
použití dekorátoru <strong>@silent</strong>, můžeme ve velkém množství případů
považovat za <i>antipattern</i>; na druhou stranu však některé typy výjimek
skutečně budeme chtít tímto způsobem odchytit a ihned poté zahodit (krátké
skripty, funkce volané při ukončování aplikace, když vznikne jiná výjimka a
proces je stejně v&nbsp;režimu &bdquo;nezachytitelného pádu&ldquo;, při
zpracování proudu dat atd.). Ovšem je vhodné <strong>@silent</strong> používat
jen ve skutečně oprávněných případech.</div></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Příklady použití dekorátoru <strong>@silent</strong></h2>

<p>Dekorátor <strong>@silent</strong> se používá velmi snadno. Podívejme se
například na následující funkci, která se pokusí vydělit své dva operandy a
vrátit výsledek podílu. Tato funkce může (pochopitelně) vyhodit výjimku, pokud
se dělí nulou:</p>

<pre>
def <strong>divide</strong>(a, b):
    return a/b
&nbsp;
&nbsp;
print(divide(1, 2))
print(divide(1, 0))
</pre>

<p>Výsledek je očekávatelný:</p>

<pre>
0.5
Traceback (most recent call last):
  File "silent_1.py", line 6, in &lt;module&gt;
    print(divide(1, 0))
  File "silent_1.py", line 2, in divide
    return a/b
ZeroDivisionError: division by zero
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_1.py</a>.</div></p>

<p>Nyní funkci pro výpočet podílu &bdquo;odekorujeme&ldquo; s&nbsp;využitím
<strong>@silent</strong>:</p>

<pre>
from funcy import silent
&nbsp;
<u>@silent</u>
def <strong>divide</strong>(a, b):
    return a/b
&nbsp;
&nbsp;
print(divide(1, 2))
print(divide(1, 0))
</pre>

<p>Výsledky budou odlišné &ndash; při dělení nulou se vrátí hodnota
<strong>None</strong>:</p>

<pre>
0.5
None
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_2.py</a>.</div></p>

<p>Podobně se můžeme pokusit o deklaraci funkce, která vypíše obsah zvoleného
souboru. I v&nbsp;tomto případě může dojít k&nbsp;vyhození výjimky
(resp.&nbsp;dokonce několika typů výjimek):</p>

<pre>
def <strong>cat</strong>(filename):
    with open(filename) as fin:
        print(fin.read())
&nbsp;
&nbsp;
cat("silent_3.py")
cat("this_does_not_exists")
</pre>

<p>Druhý soubor neexistuje, takže dostaneme:</p>

<pre>
def cat(filename):
    with open(filename) as fin:
        print(fin.read())
&nbsp;
&nbsp;
cat("silent_3.py")
cat("this_does_not_exists")
&nbsp;
Traceback (most recent call last):
  File "silent_3.py", line 7, in &lt;module&gt;
    cat("this_does_not_exists")
  File "silent_3.py", line 2, in cat
    with open(filename) as fin:
FileNotFoundError: [Errno 2] No such file or directory: 'this_does_not_exists'
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_3.py</a>.</div></p>

<p>Pokud před hlavičku funkce přidáme dekorátor <strong>@silent</strong>, budou
všechny výjimky zachyceny a funkce pouze vrátí hodnotu <strong>None</strong>
(kterou stejně ignorujeme):</p>

<pre>
from funcy import silent
&nbsp;
<u>@silent</u>
def <strong>cat</strong>(filename):
    with open(filename) as fin:
        print(fin.read())
&nbsp;
&nbsp;
cat("silent_3.py")
cat("this_does_not_exists")
</pre>

<p>Výsledky:</p>

<pre>
def cat(filename):
    with open(filename) as fin:
        print(fin.read())
&nbsp;
&nbsp;
cat("silent_3.py")
cat("this_does_not_exists")
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_4.py</a>.</div></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Zachycení výjimky, která je ve funkci vyhazována explicitně</h2>

<p>Samozřejmě je možné, že výjimka je v&nbsp;uživatelské funkci vyhazována
explicitně (tj.&nbsp;s&nbsp;využitím klíčového slova <strong>raise</strong>),
což je ukázáno na tomto jednoduchém příkladu:</p>

<pre>
def <strong>raise_exception</strong>():
    raise Exception("foo")
&nbsp;
&nbsp;
raise_exception()
</pre>

<p>Po spuštění skriptu dostaneme podle očekávání tento výstup:</p>

<pre>
Traceback (most recent call last):
  File "silent_5.py", line 5, in &lt;module&gt;
    raise_exception()
  File "silent_5.py", line 2, in raise_exception
    raise Exception("foo")
Exception: foo
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_5.py</a>.</div></p>

<p>I takovou výjimku je možné pomocí dekorátoru <strong>@silent</strong>
zachytit (což se může hodit například při ladění programu atd. &ndash; není
nutné zasahovat do kódu funkce):</p>

<pre>
from funcy import silent
&nbsp;
<u>@silent</u>
def <strong>raise_exception</strong>():
    raise Exception("foo")
&nbsp;
&nbsp;
raise_exception()
</pre>

<p>Tento program po svém spuštění nic nevypíše, pouze se korektně ukončí.</p>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_6.py</a>.</div></p>

<p>A nakonec si, nyní již pouze pro úplnost, ukažme chování dekorátoru
<strong>@silent</strong> u funkce, která volá jinou uživatelskou funkci, která
vyhodí výjimku:</p>

<pre>
from funcy import silent
&nbsp;
<u>@silent</u>
def <strong>call_function_to_raise_exception</strong>():
    raise_exception()
&nbsp;
&nbsp;
def <strong>raise_exception</strong>():
    raise Exception("foo")
&nbsp;
&nbsp;
call_function_to_raise_exception()
</pre>

<p>I tento program po svém spuštění nic nevypíše, pouze se korektně ukončí
(s&nbsp;návratovým kódem nastaveným na nulu).</p>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_7.py</a>.</div></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Dekorátor <strong>@ignore</strong></h2>

<p>Dekorátor <strong>@silent</strong>, který byl popsaný v&nbsp;předchozích
dvou kapitolách, nelze žádným způsobem řídit ani upravit jeho chování. Mnohdy
ovšem potřebujeme ignorovat jen určitý typ výjimky nebo typy výjimek. A
současně mnohdy potřebujeme, aby při vzniku (a zachycení) výjimky funkce
vrátila nějakou předem zadanou hodnotu, nikoli pouze výchozí hodnotu
<strong>None</strong> (typicky nám to bude vadit při zpracování proudu dat). A
právě v&nbsp;těchto případech lze s&nbsp;výhodou použít další dekorátor, který
je nazvaný <strong>@ignore</strong>. Tomuto dekorátoru se předává jeden či dva
parametry. Prvním parametrem jsou typy výjimek, které se mají zachytit
(v&nbsp;tomto případě je typ shodný se jménem třídy s&nbsp;implementací
výjimky) a parametrem druhým pak hodnota, která se z&nbsp;funkce vrátí
v&nbsp;případě, že došlo k&nbsp;vyhození a zachycení výjimky (registrovaného
typu).</p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Příklady použití dekorátoru <strong>@ignore</strong></h2>

<p>Podobně jako jsme si ukázali způsoby použití dekorátoru
<strong>@silent</strong> si v&nbsp;této kapitole ukážeme, jak lze využít
sofistikovanější dekorátor nazvaný <strong>@ignore</strong>.</p>

<p>Zachycení výjimky typu <strong>Exception</strong> a od ní odvozených
výjimek:</p>

<pre>
from funcy import ignore
&nbsp;
<u>@ignore(errors=Exception)</u>
def <strong>divide</strong>(a, b):
    return a/b
&nbsp;
&nbsp;
print(divide(1, 2))
print(divide(1, 0))
</pre>

<p>Výsledky:</p>

<pre>
0.5
None
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_1.py</a>.</div></p>

<p>Pokus o zachycení odlišné výjimky, než je
<strong>ZeroDivisionError</strong>:</p>

<pre>
from funcy import ignore
&nbsp;
<u>@ignore(errors=IOError)</u>
def <strong>divide</strong>(a, b):
    return a/b
&nbsp;
&nbsp;
print(divide(1, 2))
print(divide(1, 0))
</pre>

<p>V&nbsp;tomto případě není výjimka zachycena a &bdquo;probublá&ldquo;
výše:</p>

<pre>
0.5
Traceback (most recent call last):
  File "ignore_2.py", line 9, in &lt;module&gt;
    print(divide(1, 0))
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/funcy/flow.py", line 43, in wrapper
    return func(*args, **kwargs)
  File "ignore_2.py", line 5, in divide
    return a/b
ZeroDivisionError: division by zero
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_2.py</a>.</div></p>

<p>Zachycení pouze jediné výjimky, která nás při výpočtu zajímá, tedy výjimky
vyhození při dělení nulou:</p>

<pre>
from funcy import ignore
&nbsp;
<u>@ignore(errors=ZeroDivisionError)</u>
def <strong>divide</strong>(a, b):
    return a/b
&nbsp;
&nbsp;
print(divide(1, 2))
print(divide(1, 0))
</pre>

<p>Výsledky budou totožné s&nbsp;prvním příkladem z&nbsp;této kapitoly,
tedy:</p>

<pre>
0.5
None
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_3.py</a>.</div></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vrácení zvolené hodnoty z&nbsp;funkce, ve které byla výjimka zachycena</h2>

<p>A konečně si ukažme velmi užitečnou vlastnost, tedy vrácení zvolené hodnoty
v&nbsp;případě, že je výjimka zachycena:</p>

<pre>
from funcy import ignore
&nbsp;
<u>@ignore(errors=ZeroDivisionError, default=-1)</u>
def <strong>divide</strong>(a, b):
    return a/b
&nbsp;
&nbsp;
print(divide(1, 2))
print(divide(1, 0))
</pre>

<p>V&nbsp;tomto případě se při vzniku výjimky vrátí hodnota -1:</p>

<pre>
0.5
-1
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_4.py</a>.</div></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Rozdílné chování pro různé typy výjimek</h2>

<p>Připomeňme si, že v&nbsp;parametru <strong>errors</strong> je možné
dekorátoru <strong>@ignore</strong> předat seznam výjimek, které se mají
zachytávat. Prozatím jsme namísto seznamu předávali pouze jeden typ výjimky,
ovšem bez problémů je možné realizovat i následující funkci, v&nbsp;níž se
zachytí výjimky typu <strong>ZeroDivisionError</strong> a/nebo
<strong>TypeError</strong> (pokud předáme parametr typu, pro který není dělení
realizovatelné):</p>

<pre>
from funcy import ignore
&nbsp;
<u>@ignore(errors=[ZeroDivisionError, TypeError], default=-1)</u>
def <strong>divide</strong>(a, b):
    return a/b
&nbsp;
&nbsp;
print(divide(1, 2))
print(divide(1, 0))
print(divide(None, 1))
</pre>

<p>Výsledky:</p>

<pre>
0.5
-1
-1
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_6.py</a>.</div></p>

<p>Pokud ovšem zachytáváme pouze <strong>ZeroDivisionError</strong> a nikoli
již <strong>TypeError</strong>, bude výsledek podle očekávání odlišný:</p>

<pre>
0.5
-1
Traceback (most recent call last):
  File "ignore_5.py", line 10, in &lt;module&gt;
    print(divide(None, 1))
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/funcy/flow.py", line 43, in wrapper
    return func(*args, **kwargs)
  File "ignore_5.py", line 5, in divide
    return a/b
TypeError: unsupported operand type(s) for /: 'NoneType' and 'int'
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_5.py</a>.</div></p>

<p>Ve skutečnosti je možné na každou výjimku reagovat odlišně, tedy vrácením
jiné hodnoty. To je potenciálně velmi užitečná vlastnost, takže se podívejme na
realizaci takového programu. Je to vlastně triviální &ndash; použijeme dvojici
dekorátorů:</p>

<pre>
from funcy import ignore
&nbsp;
<u>@ignore(errors=ZeroDivisionError, default=0)</u>
<u>@ignore(errors=TypeError, default=-1)</u>
def <strong>divide</strong>(a, b):
    return a/b
&nbsp;
&nbsp;
print(divide(1, 2))
print(divide(1, 0))
print(divide(None, 1))
</pre>

<p>Výsledky by měly být následující:</p>

<pre>
0.5
0
-1
</pre>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního
příkladu naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_7.py</a>.</div></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Transformace výjimky na jiný typ výjimky (s&nbsp;odlišnou zprávou) dekorátorem <strong>@reraise</strong></h2>

<p>Dalším dekorátorem, který v&nbsp;knihovně <i>Funcy</i> nalezneme a který
souvisí se zpracováním výjimek, je dekorátor nazvaný <strong>@reraise</strong>.
Tento dekorátor dokáže zachytit výjimku či výjimky specifikovaného typu (typů)
a namísto nich vyhodit jiný typ výjimky. Kde se ovšem tato funkcionalita
uplatní? Například ve chvíli, kdy potřebujeme klientovi odeslat odpověď přes
HTTP protokol s&nbsp;korektním stavem (200 OK, 404 Not Found atd.). Můžeme tedy
zachytit ostatní typy výjimek (<strong>IOError</strong> atd.) a nechat si je
přetransformovat právě do výjimky, která reprezentuje stav HTTP odpovědi
&ndash; a to bez nutnosti psaní relativně složitého kódu založeného na sekvenci
bloků <strong>try</strong> a <strong>except</strong>. Tuto funkcionalitu si
ukážeme v&nbsp;navazujících dvou kapitolách.</p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Ukázky použití dekorátoru <strong>@reraise</strong></h2>

<p></p>

<pre>
from funcy import reraise

class MathError(Exception):
    def __init__(self, message):
        self.message = message


@reraise(errors=Exception, into=MathError("neděl nulou!"))
def divide(a, b):
    return a/b


print(divide(1, 2))
print(divide(1, 0))
</pre>

<pre>
from funcy import reraise

class MathException(Exception):
    def __init__(self, message):
        self.message = message


@reraise(errors=IOError, into=MathException("neděl nulou!"))
def divide(a, b):
    return a/b


print(divide(1, 2))
print(divide(1, 0))
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Reakce na větší množství typů výjimek</h2>

<p>Vzhledem k&nbsp;tomu, že dekorátoru <strong>@reraise</strong> můžeme
v&nbsp;parametru <strong>errors</strong> předat nikoli pouze jednu, ale hned
několik výjimek, lze při &bdquo;dekoraci&ldquo; funkce použít i následující
zápis:</p>

<pre>
from funcy import reraise
&nbsp;
class <strong>MathException</strong>(Exception):
    def __init__(self, message):
        self.message = message
&nbsp;
&nbsp;
<u>@reraise(errors=[ArithmeticError, IOError], into=MathException("neděl nulou!"))</u>
def <strong>divide</strong>(a, b):
    return a/b
&nbsp;
&nbsp;
print(divide(1, 2))
print(divide(1, 0))
</pre>

<p>V&nbsp;praxi dostaneme v&nbsp;tomto konkrétním případě shodné výsledky, jako
v&nbsp;předchozím příkladu, protože výjimka <strong>IOError</strong> nebude
nikdy vyhozena a tudíž ani zachycena:</p>

<pre>
0.5
Traceback (most recent call last):
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/funcy/flow.py", line 84, in reraise
    yield
  File "/usr/lib/python3.8/contextlib.py", line 75, in inner
    return func(*args, **kwds)
  File "reraise_3.py", line 10, in divide
    return a/b
ZeroDivisionError: division by zero
&nbsp;
The above exception was the direct cause of the following exception:
&nbsp;
Traceback (most recent call last):
  File "reraise_3.py", line 14, in &lt;module&gt;
    print(divide(1, 0))
  File "/usr/lib/python3.8/contextlib.py", line 75, in inner
    return func(*args, **kwds)
  File "/usr/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/home/ptisnovs/.local/lib/python3.8/site-packages/funcy/flow.py", line 88, in reraise
    raise into from e
__main__.MathException: neděl nulou!
</pre>

<p>Ovšem současně to znamená, že sice lze použít dekorátor
<strong>@reraise</strong> a současně nezachytit žádnou výjimku. Jak to bude
vypadat v&nbsp;praxi?</p>

<pre>
from funcy import reraise
&nbsp;
class <strong>MathException</strong>(Exception):
    def __init__(self, message):
        self.message = message
&nbsp;
&nbsp;
<u>@reraise(errors=[], into=MathException("neděl nulou!"))</u>
def <strong>divide</strong>(a, b):
    return a/b
&nbsp;
&nbsp;
print(divide(1, 2))
print(divide(1, 0))
</pre>

<p>Výsledky:</p>

<pre>
0.5
Traceback (most recent call last):
  File "reraise_4.py", line 14, in &lt;module&gt;
    print(divide(1, 0))
  File "/usr/lib/python3.8/contextlib.py", line 75, in inner
    return func(*args, **kwds)
  File "reraise_4.py", line 10, in divide
    return a/b
ZeroDivisionError: division by zero
</pre>



<p><a name="k14"></a></p>
<h2 id="k14">14. Využití informací z&nbsp;původní výjimky v&nbsp;nové výjimce</h2>

<pre>
from funcy import reraise
&nbsp;
class MathException(Exception):
    def __init__(self, message):
        self.message = message
&nbsp;
&nbsp;
@reraise(errors=Exception, into=lambda e: MathException("neděl nulou! " + str(e)))
def divide(a, b):
    return a/b
&nbsp;
&nbsp;
print(divide(1, 2))
print(divide(1, 0))
</pre>

<pre>
</pre>



<p><a name="k15"></a></p>
<h2 id="k15">15. Pokusy o opakované spuštění funkce při vyhození výjimky &ndash; dekorátor <strong>@retry</strong></h2>

@once
@retry
@throttle

@collecting



<p><a name="k16"></a></p>
<h2 id="k16">16. </h2>



<p><a name="k17"></a></p>
<h2 id="k17">17. </h2>



<p><a name="k18"></a></p>
<h2 id="k18">18. </h2>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_1.py</a>.</div></p>
<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_2.py</a>.</div></p>
<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_3.py</a>.</div></p>
<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_4.py</a>.</div></p>
<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_5.py</a>.</div></p>

<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_1.py</a>.</div></p>
<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_2.py</a>.</div></p>
<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_3.py</a>.</div></p>
<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_4.py</a>.</div></p>
<p><div class="rs-tip-major">Poznámka: Úplný zdrojový kód tohoto demonstračního příkladu naleznete na adrese <a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_5.py</a>.</div></p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny Pythonovské skripty, které jsme si prozatím v&nbsp;tomto seriálu
ukázali, naleznete na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
Následují odkazy na jednotlivé příklady (pro jejich spuštění je nutné mít
nainstalovánu některou z&nbsp;podporovaných verzí Pythonu 3, a pro dnešní
příklady i výše zmíněnou knihovnu <strong>funcy</strong>):</p>

<table>
<tr><th>  #</th><th>Příklad</th><th>Stručný popis</th><th>Adresa</th></tr>
<tr><td>  1</td><td>binary_operator.py</td><td>ukázka funkce vyššího řádu, která jako parametr akceptuje jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator.py</a></td></tr>
<tr><td>  2</td><td>get_operator_1.py</td><td>ukázka funkce vyššího řádu, která vrací jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_1.py</a></td></tr>
<tr><td>  3</td><td>get_operator_2.py</td><td>ukázka funkce vyššího řádu, která vrací jinou funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_2.py</a></td></tr>
<tr><td>  4</td><td>standard_operators.py</td><td>použití standardních operátorů přepsaných do formy funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/standard_operators.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/standard_operators.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>  5</td><td>binary_operator_types.py</td><td>varianta příkladu <strong>binary_operator.py</strong> s&nbsp;plnými typovými deklaracemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator_types.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/binary_operator_types.py</a></td></tr>
<tr><td>  6</td><td>get_operator_types.py</td><td>varianta příkladu <strong>get_operator_2.py</strong> s&nbsp;plnými typovými deklaracemi</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_types.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/get_operator_types.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>  7</td><td>map_1.py</td><td>příklad použití funkce <strong>map</strong>: výpočet délky všech slov v&nbsp;textu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_1.py</a></td></tr>
<tr><td>  8</td><td>map_2.py</td><td>příklad použití funkce <strong>map</strong>: výpočet absolutní hodnoty všech členů posloupnosti</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_2.py</a></td></tr>
<tr><td>  9</td><td>map_3.py</td><td>příklad použití funkce <strong>map</strong>: aplikace vlastní pojmenované funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_3.py</a></td></tr>
<tr><td> 10</td><td>map_4.py</td><td>příklad použití funkce <strong>map</strong>: aplikace vlastního lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 11</td><td>map_list_comprehension_1.py</td><td>přepis skriptu <strong>map_1.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_1.py</a></td></tr>
<tr><td> 12</td><td>map_list_comprehension_2.py</td><td>přepis skriptu <strong>map_2.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_2.py</a></td></tr>
<tr><td> 13</td><td>map_list_comprehension_3.py</td><td>přepis skriptu <strong>map_3.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_3.py</a></td></tr>
<tr><td> 14</td><td>map_list_comprehension_4.py</td><td>přepis skriptu <strong>map_4.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/map_list_comprehension_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 15</td><td>filter_1.py</td><td>filtrace dat na základě délky řetězce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_1.py</a></td></tr>
<tr><td> 16</td><td>filter_2.py</td><td>filtrace numerických dat podle toho, zda se jedná o sudá či lichá čísla</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_2.py</a></td></tr>
<tr><td> 17</td><td>filter_3.py</td><td>přepis předchozího příkladu s&nbsp;využitím lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 18</td><td>filter_list_comprehension_1.py</td><td>přepis skriptu <strong>filter_list_comprehension_1.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_1.py</a></td></tr>
<tr><td> 19</td><td>filter_list_comprehension_2.py</td><td>přepis skriptu <strong>filter_list_comprehension_2.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_2.py</a></td></tr>
<tr><td> 20</td><td>filter_list_comprehension_3.py</td><td>přepis skriptu <strong>filter_list_comprehension_3.py</strong> tak, aby se použila generátorová notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/filter_list_comprehension_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 21</td><td>reduce_1.py</td><td>výpočet faktoriálu s&nbsp;využitím funkce vyššího řádu <strong>reduce</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_1.py</a></td></tr>
<tr><td> 22</td><td>reduce_2.py</td><td>přepis předchozího příkladu s&nbsp;využitím lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_2.py</a></td></tr>
<tr><td> 23</td><td>reduce_3.py</td><td>tisk tabulky faktoriálů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_3.py</a></td></tr>
<tr><td> 24</td><td>reduce_4.py</td><td>přepis předchozího příkladu s&nbsp;využitím lambda výrazu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_4.py</a></td></tr>
<tr><td> 25</td><td>reduce_5.py</td><td>přepis předchozího příkladu s&nbsp;využitím generátorové notace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/reduce_5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 26</td><td>return_function.py</td><td>funkce jako návratová hodnota jiné funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/return_function.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/return_function.py</a></td></tr>
<tr><td> 27</td><td>closure_adder1.py</td><td>příklad použití uzávěru &ndash; konstrukce funkce typu <i>adder</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/closure_adder1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/closure_adder1.py</a></td></tr>
<tr><td> 28</td><td>counter_closure_1.py</td><td>nekorektní implementace čítače s&nbsp;využitím uzávěrů</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_1.py</a></td></tr>
<tr><td> 29</td><td>counter_closure_2.py</td><td>přístup k&nbsp;nelokálnímu symbolu (Python 2.x i Python 3.x)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_2.py</a></td></tr>
<tr><td> 30</td><td>counter_closure_3.py</td><td>přístup k&nbsp;nelokálnímu symbolu (pouze Python 3.x)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/counter_closure_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 31</td><td>access_nonlocal_symbol.py</td><td>přístup k&nbsp;nelokálnímu symbolu v&nbsp;uzávěru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/access_nonlocal_symbol.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/access_nonlocal_symbol.py</a></td></tr>
<tr><td> 32</td><td>functions_and_closures.py</td><td>funkce a uzávěry (umělý příklad)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/functions_and_closures.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/functions_and_closures.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 33</td><td>partial_1.py</td><td>funkce <strong>doubler</strong> odvozená (redukcí) z&nbsp;univerzálnější funkce <strong>mul</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_1.py</a></td></tr>
<tr><td> 34</td><td>partial_2.py</td><td>transformace funkce se třemi parametry s&nbsp;využitím <strong>partial</strong> (nekorektní řešení)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_2.py</a></td></tr>
<tr><td> 35</td><td>partial_3.py</td><td>transformace funkce se třemi parametry s&nbsp;využitím <strong>partial</strong> (korektní řešení)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_3.py</a></td></tr>
<tr><td> 36</td><td>partial_4.py</td><td>transformace funkce s&nbsp;dosazením většího množství parametrů s&nbsp;využitím <strong>partial</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_4.py</a></td></tr>
<tr><td> 37</td><td>partial_5.py</td><td>několikanásobná transformace původní funkce na několik nových funkcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_5.py</a></td></tr>
<tr><td> 38</td><td>partial_6.py</td><td>postupná transformace již ztransformovaných funkcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_6.py</a></td></tr>
<tr><td> 39</td><td>partial_7.py</td><td>typ originální funkce i funkcí získaných s&nbsp;využitím transformace pomocí <strong>partial</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_7.py</a></td></tr>
<tr><td> 40</td><td>partial_8.py</td><td>jméno funkce, poziční argumenty funkce a pojmenované argumenty funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_8.py</a></td></tr>
<tr><td> 41</td><td>partial_9.py</td><td>transformace <strong>reduce</strong> a pojmenované argumenty původní funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_9.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_9.py</a></td></tr>
<tr><td> 42</td><td>partial_A.py</td><td>získání informací o redukované funkci s&nbsp;pojmenovanými argumenty</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_A.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_A.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 43</td><td>partial_method_1.py</td><td>třída s&nbsp;metodou s&nbsp;parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_1.py</a></td></tr>
<tr><td> 44</td><td>partial_method_2.py</td><td>třída s&nbsp;metodou s&nbsp;parametry &ndash; vliv volání setteru na stav objektu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_2.py</a></td></tr>
<tr><td> 45</td><td>partial_method_3.py</td><td>metody <strong>enable</strong> a <strong>disable</strong> vzniklé transformací <strong>set_enabled</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_3.py</a></td></tr>
<tr><td> 46</td><td>partial_method_4.py</td><td>další příklad použití funkce <strong>partialmethod</strong> &ndash; doplnění většího množství parametrů při transformaci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/partial_method_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 47</td><td>lru_cache_1.py</td><td>klasický výpočet Fibonacciho posloupnosti rekurzivní funkcí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_1.py</a></td></tr>
<tr><td> 48</td><td>lru_cache_2.py</td><td>LRU cache pro výsledky Fibonacciho posloupnosti pro nejčastěji použité vstupy</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_2.py</a></td></tr>
<tr><td> 49</td><td>lru_cache_3.py</td><td>přečtení informací o využití LRU cache</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_3.py</a></td></tr>
<tr><td> 50</td><td>lru_cache_4.py</td><td>programové vymazání LRU cache</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/lru_cache_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 51</td><td>cached_property_1.py</td><td>použití standardního dekorátoru <strong>@property</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_1.py</a></td></tr>
<tr><td> 52</td><td>cached_property_2.py</td><td>použití dekorátoru <strong>@cached_property</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_2.py</a></td></tr>
<tr><td> 53</td><td>cached_property_3.py</td><td>úprava předchozího příkladu tak, aby se využila LRU cache</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/cached_property_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 54</td><td>total_ordering.py</td><td>příklad implementace relačních operátorů založených na dekorátoru <strong>@total_ordering</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/total_ordering.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/total_ordering.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 55</td><td>decorators_2.py</td><td>příklad použití jednoho dekorátoru aplikovaného na funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_2.py</a></td></tr>
<tr><td> 56</td><td>decorators_3.py</td><td>příklad použití dvou dekorátorů aplikovaných na funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_3.py</a></td></tr>
<tr><td> 57</td><td>measure_time.py</td><td>praktické použití dekorátoru &ndash; měření doby trvání funkce označené dekorátorem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/measure_time.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/measure_time.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 58</td><td>decorators_4.py</td><td>atributy transformované funkce vytvořené s&nbsp;využitím dekorátoru</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_4.py</a></td></tr>
<tr><td> 59</td><td>decorators_5.py</td><td>využití dekorátoru <strong>@wraps</strong> pro automatickou úpravu atributů &bdquo;obalované&ldquo; funkce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_5.py</a></td></tr>
<tr><td> 60</td><td>decorators_6.py</td><td>dekorátor <strong>@wraps</strong> a několikanásobná aplikace dekorátorů na &bdquo;obalovanou&ldquo; funkci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/functools/decorators_6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 61</td><td>decorators_1.py</td><td>zkrácená deklarace dekorátoru s&nbsp;využitím dekorátoru <strong>@decorator</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_1.py</a></td></tr>
<tr><td> 62</td><td>decorators_2.py</td><td>několikanásobná aplikace dekorátorů, dekorátor je vytvořen přes <strong>@decorator</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/decorators_2.py</a></td></tr>
<tr><td> 63</td><td>measure_time.py</td><td>měření doby trvání funkce označené dekorátorem, dekorátor je vytvořen přes <strong>@decorator</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/measure_time.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/measure_time.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 64</td><td>curry1.py</td><td>curryfikace funkce se dvěma parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry1.py</a></td></tr>
<tr><td> 65</td><td>curry2.py</td><td>curryfikace funkce se třemi parametry</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/curry2.py</a></td></tr>
<tr><td> 66</td><td>rcurry1.py</td><td>curryfikace funkce <strong>div</strong> funkcí <strong>curry</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry1.py</a></td></tr>
<tr><td> 67</td><td>rcurry2.py</td><td>curryfikace funkce <strong>div</strong> funkcí <strong>rcurry</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry2.py</a></td></tr>
<tr><td> 68</td><td>rcurry3.py</td><td>curryfikace funkce <strong>n_pow</strong> funkcí <strong>rcurry</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcurry3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 69</td><td>autocurry.py</td><td>curryfikace funkce <strong>n_pow</strong> funkcí <strong>autocurry</strong> (s&nbsp;odlišným výsledkem)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/autocurry.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/autocurry.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 70</td><td>compose1.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>compose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose1.py</a></td></tr>
<tr><td> 71</td><td>compose2.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>compose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose2.py</a></td></tr>
<tr><td> 72</td><td>compose3.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>compose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/compose3.py</a></td></tr>
<tr><td> 73</td><td>rcompose1.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>rcompose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose1.py</a></td></tr>
<tr><td> 74</td><td>rcompose2.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>rcompose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose2.py</a></td></tr>
<tr><td> 75</td><td>rcompose3.py</td><td>kompozice funkcí s&nbsp;využitím funkce vyššího řádu <strong>rcompose</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/rcompose3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 76</td><td>filter_1.py</td><td>použití standardní funkce <strong>filter</strong> (opakování)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_1.py</a></td></tr>
<tr><td> 77</td><td>filter_2.py</td><td>použití funkce <strong>filter</strong> z&nbsp;knihovny <i>funcy</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_2.py</a></td></tr>
<tr><td> 78</td><td>filter_3.py</td><td>funkce vyššího řádu <strong>lfilter</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_3.py</a></td></tr>
<tr><td> 79</td><td>filter_4.py</td><td>předání lambda výrazu do funkcí vyššího řádu <strong>filter</strong> a <strong>lfilter</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_4.py</a></td></tr>
<tr><td> 80</td><td>filter_5.py</td><td>regulární výraz ve funkci predikátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_5.py</a></td></tr>
<tr><td> 81</td><td>filter_6.py</td><td>množina ve funkci predikátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_6.py</a></td></tr>
<tr><td> 82</td><td>filter_7.py</td><td>množina ve funkci predikátu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/filter_7.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 83</td><td>remove_1.py</td><td>použití funkce vyššího řádu <strong>remove</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_1.py</a></td></tr>
<tr><td> 84</td><td>remove_2.py</td><td>použití funkce vyššího řádu <strong>lremove</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_2.py</a></td></tr>
<tr><td> 85</td><td>remove_3.py</td><td>kombinace regulárního výrazu a funkce vyššího řádku <strong>lremove</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_3.py</a></td></tr>
<tr><td> 86</td><td>remove_4.py</td><td>kombinace množin a funkce vyššího řádku <strong>lremove</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/remove_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 87</td><td>map_1.py</td><td>použití standardní funkce <strong>map</strong> (opakování)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_1.py</a></td></tr>
<tr><td> 88</td><td>map_2.py</td><td>použití funkce <strong>map</strong> z&nbsp;knihovny <i>funcy</i></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_2.py</a></td></tr>
<tr><td> 89</td><td>map_3.py</td><td>funkce vyššího řádu <strong>lmap</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_3.py</a></td></tr>
<tr><td> 90</td><td>map_4.py</td><td>použití regulárního výrazu namísto transformační funkce v&nbsp;<strong>lmap</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_4.py</a></td></tr>
<tr><td> 91</td><td>map_5.py</td><td>použití regulárního výrazu namísto transformační funkce v&nbsp;<strong>lmap</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/map_5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 92</td><td>distinct_1.py</td><td>získání unikátních prvků ze vstupní sekvence funkcí <strong>distinct</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/distinct_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/distinct_1.py</a></td></tr>
<tr><td> 93</td><td>distinct_2.py</td><td>získání unikátních prvků ze vstupní sekvence funkcí <strong>distinct</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/distinct_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/distinct_2.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 94</td><td>take_while_1.py</td><td>filtrace prvků sekvence funkcí <strong>takewhile</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/take_while_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/take_while_1.py</a></td></tr>
<tr><td> 95</td><td>take_while_2.py</td><td>filtrace prvků sekvence funkcí <strong>takewhile</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/take_while_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/take_while_2.py</a></td></tr>
<tr><td> 96</td><td>drop_while_1.py</td><td>filtrace prvků sekvence funkcí <strong>dropwhile</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/drop_while_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/drop_while_1.py</a></td></tr>
<tr><td> 97</td><td>drop_while_2.py</td><td>filtrace prvků sekvence funkcí <strong>dropwhile</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/drop_while_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/drop_while_2.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 98</td><td>split_1.py</td><td>rozdělení sekvence na prvky odpovídající predikátu a na prvky, které predikátu neodpovídají</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_1.py</a></td></tr>
<tr><td> 99</td><td>split_2.py</td><td>rozdělení sekvence na prvky odpovídající predikátu a na prvky, které predikátu neodpovídají</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_2.py</a></td></tr>
<tr><td>100</td><td>split_3.py</td><td>rozdělení sekvence na prvky odpovídající predikátu a na prvky, které predikátu neodpovídají</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_3.py</a></td></tr>
<tr><td>101</td><td>split_4.py</td><td>rozdělení sekvence na prvky odpovídající predikátu a na prvky, které predikátu neodpovídají</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>102</td><td>split_by_1.py</td><td>kombinace funkcí vyššího řádu <strong>takewhile</strong> a <strong>dropwhile</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_by_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_by_1.py</a></td></tr>
<tr><td>103</td><td>split_by_2.py</td><td>kombinace funkcí vyššího řádu <strong>takewhile</strong> a <strong>dropwhile</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_by_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/split_by_2.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>104</td><td>partition_by.py</td><td>rozdělení sekvence na větší množství sekvencí funkcí <strong>partition_by</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/partition_by.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/partition_by.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>105</td><td>count_1.py</td><td>nekonečná sekvence čítačů s&nbsp;hodnotami 0, 1, 2, ...</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_1.py</a></td></tr>
<tr><td>106</td><td>count_2.py</td><td>získání prvních dvaceti hodnot čítačů z&nbsp;původně nekonečné sekvence</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_2.py</a></td></tr>
<tr><td>107</td><td>count_3.py</td><td>kombinace konečné a nekonečné sekvence s&nbsp;využitím standardní funkce <strong>zip</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_3.py</a></td></tr>
<tr><td>108</td><td>count_4.py</td><td>kombinace dvou nekonečných sekvencí s&nbsp;využitím standardní funkce <strong>zip</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_4.py</a></td></tr>
<tr><td>109</td><td>count_5.py</td><td>specifikace počáteční hodnoty nekonečné sekvence</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_5.py</a></td></tr>
<tr><td>110</td><td>count_6.py</td><td>specifikace počáteční hodnoty a kroku nekonečné sekvence</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_6.py</a></td></tr>
<tr><td>111</td><td>count_7.py</td><td>specifikace záporného kroku nekonečné sekvence</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_7.py</a></td></tr>
<tr><td>112</td><td>count_8.py</td><td>neceločíselný krok i hodnota prvního prvku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_8.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/count_8.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>112</td><td>cycle_1.py</td><td>opakující se nekonečná sekvence dvou hodnot</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/cycle_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/cycle_1.py</a></td></tr>
<tr><td>113</td><td>cycle_2.py</td><td>opakující se nekonečná sekvence dvou hodnot</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/cycle_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/cycle_2.py</a></td></tr>
<tr><td>114</td><td>cycle_3.py</td><td>kombinace dvou opakujících se nekonečných sekvencí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/cycle_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/cycle_3.py</a></td></tr>
<tr><td>115</td><td>cycle_4.py</td><td>sekvence obsahující označení všech hracích karet</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/cycle_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/cycle_4.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>116</td><td>group_by_1.py</td><td>rozdělení numerických hodnot do deseti skupin</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/group_by_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/group_by_1.py</a></td></tr>
<tr><td>117</td><td>group_by_2.py</td><td>rozdělení slov do skupin podle délky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/group_by_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/group_by_2.py</a></td></tr>
<tr><td>118</td><td>group_by_3.py</td><td>rozdělení slov do skupin podle délky, výsledek je seřazen</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/group_by_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/group_by_3.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>119</td><td>iterate_1.py</td><td>sekvence tvořená aritmetickou řadou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/iterate_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/iterate_1.py</a></td></tr>
<tr><td>120</td><td>iterate_2.py</td><td>sekvence tvořená aritmetickou řadou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/iterate_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/iterate_2.py</a></td></tr>
<tr><td>121</td><td>iterate_3.py</td><td>sekvence s&nbsp;celočíselnými mocninami dvojky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/iterate_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/iterate_3.py</a></td></tr>
<tr><td>122</td><td>iterate_4.py</td><td>vygenerování Fibonacciho posloupnosti (neúplné řešení)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/iterate_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/iterate_4.py</a></td></tr>
<tr><td>123</td><td>iterate_5.py</td><td>vygenerování Fibonacciho posloupnosti (úplné řešení)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/iterate_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/iterate_5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>124</td><td>repeat_1.py</td><td>vygenerování konečné sekvence s&nbsp;deseti prvky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/repeat_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/repeat_1.py</a></td></tr>
<tr><td>125</td><td>repeat_2.py</td><td>vygenerování konečné sekvence s&nbsp;deseti prvky, převod sekvence na seznam</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/repeat_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/repeat_2.py</a></td></tr>
<tr><td>126</td><td>repeat_3.py</td><td>vygenerování nekonečné sekvence bez její materializace</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/repeat_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/repeat_3.py</a></td></tr>
<tr><td>127</td><td>repeat_4.py</td><td>vygenerování nekonečné sekvence s&nbsp;pokusem o její materializaci</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/repeat_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/repeat_4.py</a></td></tr>
<tr><td>128</td><td>repeat_5.py</td><td>získání několika prvků z&nbsp;původně nekonečné sekvence</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/repeat_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/repeat_5.py</a></td></tr>
<tr><td>129</td><td>repeat_6.py</td><td>kombinace konečné a nekonečné sekvence s&nbsp;využitím standardní funkce <strong>zip</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/repeat_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/repeat_6.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>130</td><td>interleave.py</td><td>kombinace prvků dvou nekonečných sekvencí</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/interleave.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/interleave.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>131</td><td>silent_1.py</td><td>výpočet podílu, funkce může vyhodit výjimku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_1.py</a></td></tr>
<tr><td>132</td><td>silent_2.py</td><td>výpočet podílu, výjimka je zachycena přes <strong>@silent</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_2.py</a></td></tr>
<tr><td>133</td><td>silent_3.py</td><td>čtení ze souboru, funkce může vyhodit výjimku</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_3.py</a></td></tr>
<tr><td>134</td><td>silent_4.py</td><td>čtení ze souboru, výjimka je zachycena přes <strong>@silent</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_4.py</a></td></tr>
<tr><td>135</td><td>silent_5.py</td><td>explicitní vyhození výjimky s&nbsp;využitím <strong>raise</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_5.py</a></td></tr>
<tr><td>136</td><td>silent_6.py</td><td>explicitní vyhození výjimky s&nbsp;využitím <strong>raise</strong>, zachycení přes <strong>@silent</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_6.py</a></td></tr>
<tr><td>137</td><td>silent_7.py</td><td>explicitní vyhození výjimky ve volané funkci, opět zachycení přes <strong>@silent</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/silent_7.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>138</td><td>ignore_1.py</td><td>zachycení výjimky typu <strong>Exception</strong> a od ní odvozených výjimek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_1.py</a></td></tr>
<tr><td>139</td><td>ignore_2.py</td><td>pokus o zachycení odlišné výjimky, než je <strong>ZeroDivisionError</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_2.py</a></td></tr>
<tr><td>140</td><td>ignore_3.py</td><td>zachycení pouze jediné výjimky, která nás při výpočtu zajímá, tedy výjimky vyhození při dělení nulou</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_3.py</a></td></tr>
<tr><td>141</td><td>ignore_4.py</td><td>vrácení zvolené hodnoty v&nbsp;případě, že je výjimka zachycena</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_4.py</a></td></tr>
<tr><td>142</td><td>ignore_5.py</td><td>zachycení výjimky <strong>ZeroDivisionError</strong>, ignorace výjimky <strong>TypeError</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_5.py</a></td></tr>
<tr><td>143</td><td>ignore_6.py</td><td>zachycení výjimky <strong>ZeroDivisionError</strong> a/nebo <strong>TypeError</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_6.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_6.py</a></td></tr>
<tr><td>144</td><td>ignore_7.py</td><td>vrácení odlišných hodnot pro různé typy výjimek</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_7.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/ignore_7.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>145</td><td>reraise_1.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_1.py</a></td></tr>
<tr><td>146</td><td>reraise_2.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_2.py</a></td></tr>
<tr><td>147</td><td>reraise_3.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_3.py</a></td></tr>
<tr><td>148</td><td>reraise_4.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_4.py</a></td></tr>
<tr><td>149</td><td>reraise_5.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/reraise_5.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>150</td><td>retry_1.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_1.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_1.py</a></td></tr>
<tr><td>151</td><td>retry_2.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_2.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_2.py</a></td></tr>
<tr><td>152</td><td>retry_3.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_3.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_3.py</a></td></tr>
<tr><td>153</td><td>retry_4.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_4.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_4.py</a></td></tr>
<tr><td>154</td><td>retry_5.py</td><td></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_5.py">https://github.com/tisnik/most-popular-python-libs/blob/master/funcy/retry_5.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>functools — Higher-order functions and operations on callable objects<br />
<a href="https://docs.python.org/3/library/functools.html">https://docs.python.org/3/library/functools.html</a>
</li>

<li>Functional Programming HOWTO<br />
<a href="https://docs.python.org/3/howto/functional.html">https://docs.python.org/3/howto/functional.html</a>
</li>

<li>Functional Programming in Python: When and How to Use It<br />
<a href="https://realpython.com/python-functional-programming/">https://realpython.com/python-functional-programming/</a>
</li>

<li>Functional Programming With Python<br />
<a href="https://realpython.com/learning-paths/functional-programming/">https://realpython.com/learning-paths/functional-programming/</a>
</li>

<li>Awesome Functional Python<br />
<a href="https://github.com/sfermigier/awesome-functional-python">https://github.com/sfermigier/awesome-functional-python</a>
</li>

<li>Currying<br />
<a href="https://en.wikipedia.org/wiki/Currying">https://en.wikipedia.org/wiki/Currying</a>
</li>

<li>Currying in Python &ndash; A Beginner’s Introduction<br />
<a href="https://www.askpython.com/python/examples/currying-in-python">https://www.askpython.com/python/examples/currying-in-python</a>
</li>

<li>Fundamental Concepts in Programming Languages<br />
<a href="https://en.wikipedia.org/wiki/Fundamental_Concepts_in_Programming_Languages">https://en.wikipedia.org/wiki/Fundamental_Concepts_in_Programming_Languages</a>
</li>

<li>When should I use function currying?<br />
<a href="https://stackoverflow.com/questions/24881604/when-should-i-use-function-currying">https://stackoverflow.com/questions/24881604/when-should-i-use-function-currying</a>
</li>

<li>Toolz<br />
<a href="https://github.com/pytoolz/toolz/tree/master">https://github.com/pytoolz/toolz/tree/master</a>
</li>

<li>Coconut: funkcionální jazyk s pattern matchingem kompatibilní s&nbsp;Pythonem<br />
<a href="https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/">https://www.root.cz/clanky/coconut-funkcionalni-jazyk-s-pattern-matchingem-kompatibilni-s-pythonem/</a>
</li>

<li>A HITCHHIKER'S GUIDE TO functools<br />
<a href="https://ep2021.europython.eu/media/conference/slides/a-hitchhikers-guide-to-functools.pdf">https://ep2021.europython.eu/media/conference/slides/a-hitchhikers-guide-to-functools.pdf</a>
</li>

<li>Coconut aneb funkcionální nadstavba nad Pythonem (2.část)<br />
<a href="https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/">https://www.root.cz/clanky/coconut-aneb-funkcionalni-nadstavba-nad-pythonem-2-cast/</a>
</li>

<li>Knihovny pro zpracování posloupností (sekvencí) v&nbsp;Pythonu<br />
<a href="https://www.root.cz/clanky/knihovny-pro-zpracovani-posloupnosti-sekvenci-v-pythonu/">https://www.root.cz/clanky/knihovny-pro-zpracovani-posloupnosti-sekvenci-v-pythonu/</a>
</li>

<li>clj - repositář s knihovnou<br />
<a href="https://github.com/bfontaine/clj">https://github.com/bfontaine/clj</a>
</li>

<li>clj 0.1.0 &ndash; stránka na PyPi<br />
<a href="https://pypi.python.org/pypi/clj/0.1.0">https://pypi.python.org/pypi/clj/0.1.0</a>
</li>

<li>Clojure aneb jazyk umožňující tvorbu bezpečných vícevláknových aplikací pro JVM (4.část - kolekce, sekvence a lazy sekvence) <br />
<a href="https://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/">https://www.root.cz/clanky/clojure-aneb-jazyk-umoznujici-tvorbu-bezpecnych-vicevlaknovych-aplikaci-pro-jvm-4-cast-kolekce-sekvence-a-lazy-sekvence/</a>
</li>

<li>Clojure a bezpečné aplikace pro JVM: sekvence, lazy sekvence a paralelní programy <br />
<a href="https://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/">https://www.root.cz/clanky/clojure-a-bezpecne-aplikace-pro-jvm-sekvence-lazy-sekvence-a-paralelni-programy/</a>
</li>

<li>Coconut: Simple, elegant, Pythonic functional programming<br />
<a href="http://coconut-lang.org/">http://coconut-lang.org/</a>
</li>

<li>coconut (Python package index)<br />
<a href="https://pypi.python.org/pypi/coconut/">https://pypi.python.org/pypi/coconut/</a>
</li>

<li>Coconut Tutorial<br />
<a href="http://coconut.readthedocs.io/en/master/HELP.html">http://coconut.readthedocs.io/en/master/HELP.html</a>
</li>

<li>Coconut FAQ<br />
<a href="http://coconut.readthedocs.io/en/master/FAQ.html">http://coconut.readthedocs.io/en/master/FAQ.html</a>
</li>

<li>Coconut Documentation<br />
<a href="http://coconut.readthedocs.io/en/master/DOCS.html">http://coconut.readthedocs.io/en/master/DOCS.html</a>
</li>

<li>Coconut na Redditu<br />
<a href="https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/">https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/</a>
</li>

<li>Repositář na GitHubu<br />
<a href="https://github.com/evhub/coconut">https://github.com/evhub/coconut</a>
</li>

<li>Object-Oriented Programming — The Trillion Dollar Disaster<br />
<a href="https://betterprogramming.pub/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7">https://betterprogramming.pub/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7</a>
</li>

<li>Goodbye, Object Oriented Programming<br />
<a href="https://cscalfani.medium.com/goodbye-object-oriented-programming-a59cda4c0e53">https://cscalfani.medium.com/goodbye-object-oriented-programming-a59cda4c0e53</a>
</li>

<li>So You Want to be a Functional Programmer (Part 1)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536</a>
</li>

<li>So You Want to be a Functional Programmer (Part 2)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a</a>
</li>

<li>So You Want to be a Functional Programmer (Part 3)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7</a>
</li>

<li>So You Want to be a Functional Programmer (Part 4)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49</a>
</li>

<li>So You Want to be a Functional Programmer (Part 5)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a</a>
</li>

<li>So You Want to be a Functional Programmer (Part 6)<br />
<a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-6-db502830403">https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-6-db502830403</a>
</li>

<li>Why Programmers Need Limits<br />
<a href="https://cscalfani.medium.com/why-programmers-need-limits-3d96e1a0a6db">https://cscalfani.medium.com/why-programmers-need-limits-3d96e1a0a6db</a>
</li>

<li>Infographic showing code complexity vs developer experience<br />
<a href="https://twitter.com/rossipedia/status/1580639227313676288">https://twitter.com/rossipedia/status/1580639227313676288</a>
</li>

<li>Python's reduce(): From Functional to Pythonic Style<br />
<a href="https://realpython.com/python-reduce-function/">https://realpython.com/python-reduce-function/</a>
</li>

<li>What is the problem with reduce()?<br />
<a href="https://stackoverflow.com/questions/181543/what-is-the-problem-with-reduce">https://stackoverflow.com/questions/181543/what-is-the-problem-with-reduce</a>
</li>

<li>The fate of reduce() in Python 3000<br />
<a href="https://www.artima.com/weblogs/viewpost.jsp?thread=98196">https://www.artima.com/weblogs/viewpost.jsp?thread=98196</a>
</li>

<li>Reading 16: Map, Filter, Reduce<br />
<a href="http://web.mit.edu/6.031/www/sp22/classes/16-map-filter-reduce/">http://web.mit.edu/6.031/www/sp22/classes/16-map-filter-reduce/</a>
</li>

<li>Currying<br />
<a href="https://sw-samuraj.cz/2011/02/currying/">https://sw-samuraj.cz/2011/02/currying/</a>
</li>

<li>Používání funkcí v&nbsp;F#<br />
<a href="https://docs.microsoft.com/cs-cz/dotnet/fsharp/tutorials/using-functions">https://docs.microsoft.com/cs-cz/dotnet/fsharp/tutorials/using-functions</a>
</li>

<li>Funkce vyššího řádu<br />
<a href="http://naucte-se.haskell.cz/funkce-vyssiho-radu">http://naucte-se.haskell.cz/funkce-vyssiho-radu</a>
</li>

<li>Currying (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Currying">https://en.wikipedia.org/wiki/Currying</a>
</li>

<li>Currying (Haskell wiki)<br />
<a href="https://wiki.haskell.org/Currying">https://wiki.haskell.org/Currying</a>
</li>

<li>Haskell Curry<br />
<a href="https://en.wikipedia.org/wiki/Haskell_Curry">https://en.wikipedia.org/wiki/Haskell_Curry</a>
</li>

<li>Moses Schönfinkel<br />
<a href="https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel">https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel</a>
</li>

<li>ML &ndash; funkcionální jazyk s revolučním typovým systémem<br />
<a href="https://www.root.cz/clanky/ml-funkcionalni-jazyk-s-revolucnim-typovym-systemem/">https://www.root.cz/clanky/ml-funkcionalni-jazyk-s-revolucnim-typovym-systemem/</a>
</li>

<li>Funkce a typový systém programovacího jazyka ML<br />
<a href="https://www.root.cz/clanky/funkce-a-typovy-system-programovaciho-jazyka-ml/">https://www.root.cz/clanky/funkce-a-typovy-system-programovaciho-jazyka-ml/</a>
</li>

<li>Curryfikace (currying), výjimky a vlastní operátory v jazyku ML<br />
<a href="https://www.root.cz/clanky/curryfikace-currying-vyjimky-a-vlastni-operatory-v-jazyku-ml/">https://www.root.cz/clanky/curryfikace-currying-vyjimky-a-vlastni-operatory-v-jazyku-ml/</a>
</li>

<li>Primer on Python Decorators<br />
<a href="https://realpython.com/primer-on-python-decorators/">https://realpython.com/primer-on-python-decorators/</a>
</li>

<li>Python Decorators<br />
<a href="https://www.programiz.com/python-programming/decorator">https://www.programiz.com/python-programming/decorator</a>
</li>

<li>PythonDecorators (Python Wiki)<br />
<a href="https://wiki.python.org/moin/PythonDecorators">https://wiki.python.org/moin/PythonDecorators</a>
</li>

<li>Funcy na GitHubu<br />
<a href="https://github.com/suor/funcy/">https://github.com/suor/funcy/</a>
</li>

<li>Welcome to funcy documentation!<br />
<a href="https://funcy.readthedocs.io/en/stable/">https://funcy.readthedocs.io/en/stable/</a>
</li>

<li>Funcy cheatsheet<br />
<a href="https://funcy.readthedocs.io/en/stable/cheatsheet.html">https://funcy.readthedocs.io/en/stable/cheatsheet.html</a>
</li>

<li>PyToolz API Documentation<br />
<a href="https://toolz.readthedocs.io/en/latest/index.html">https://toolz.readthedocs.io/en/latest/index.html</a>
</li>

<li>Toolz (PyToolz) na GitHubu<br />
<a href="https://github.com/pytoolz/toolz">https://github.com/pytoolz/toolz</a>
</li>

<li>Fn.py: enjoy FP in Python<br />
<a href="https://github.com/kachayev/fn.py">https://github.com/kachayev/fn.py</a>
</li>

<li>Funcy na PyPi<br />
<a href="https://pypi.org/project/funcy/">https://pypi.org/project/funcy/</a>
</li>

<li>Underscore aneb další knihovna pro funkcionální programování v&nbsp;JavaScriptu<br />
<a href="https://www.root.cz/clanky/underscore-aneb-dalsi-knihovna-pro-funkcionalni-programovani-v-javascriptu/">https://www.root.cz/clanky/underscore-aneb-dalsi-knihovna-pro-funkcionalni-programovani-v-javascriptu/</a>
</li>

<li>Funkce vyššího řádu v&nbsp;knihovně Underscore<br />
<a href="https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/">https://www.root.cz/clanky/funkce-vyssiho-radu-v-knihovne-underscore/</a>
</li>

<li>Awesome functional Python<br />
<a href="https://github.com/sfermigier/awesome-functional-python">https://github.com/sfermigier/awesome-functional-python</a>
</li>

<li>lispy<br />
<a href="https://pypi.org/project/lispy/">https://pypi.org/project/lispy/</a>
</li>

<li>clojure_py na indexu PyPi<br />
<a href="https://pypi.python.org/pypi/clojure_py">https://pypi.python.org/pypi/clojure_py</a>
</li>

<li>PyClojure<br />
<a href="https://github.com/eigenhombre/PyClojure">https://github.com/eigenhombre/PyClojure</a>
</li>

<li>Hy na GitHubu<br />
<a href="https://github.com/hylang/hy">https://github.com/hylang/hy</a>
</li>

<li>Hy: The survival guide<br />
<a href="https://notes.pault.ag/hy-survival-guide/">https://notes.pault.ag/hy-survival-guide/</a>
</li>

<li>Hy běžící na monitoru terminálu společnosti Symbolics<br />
<a href="http://try-hy.appspot.com/">http://try-hy.appspot.com/</a>
</li>

<li>Welcome to Hy’s documentation!<br />
<a href="http://docs.hylang.org/en/stable/">http://docs.hylang.org/en/stable/</a>
</li>

<li>Hy na PyPi<br />
<a href="https://pypi.org/project/hy/#description">https://pypi.org/project/hy/#description</a>
</li>

<li>Getting Hy on Python<br />
<a href="https://lwn.net/Articles/596626/">https://lwn.net/Articles/596626/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2023</small></p>
</body>
</html>
