<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Tvorba textového uživatelského rozhraní s knihovnou prompt_toolkit: základní prvky TUI</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>Tvorba textového uživatelského rozhraní s knihovnou prompt_toolkit: základní prvky TUI</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p></p>



<h2>Obsah</h2>

<p><a href="#k01">1. Tvorba textového uživatelského rozhraní s&nbsp;knihovnou prompt_toolkit: základní prvky TUI</a></p>
<p><a href="#k02">2. Výpis formátovaného textu na konzoli</a></p>
<p><a href="#k03">3. Použití třídy HTML a základních HTML značek &lt;b&gt;, &lt;i&gt; a &lt;u&gt;</a></p>
<p><a href="#k04">4. Specifikace barvy textu: použití značky &lt;style&gt; popř.&nbsp;nových pseudoznaček</a></p>
<p><a href="#k05">5. Změna barvy pozadí textu; kombinace barvy popředí, pozadí i stylu výpisu</a></p>
<p><a href="#k06">6. Obarvení výstupu s&nbsp;využitím lexeru z&nbsp;knihovny Pygments</a></p>
<p><a href="#k07">7. Konstrukce výstupu se specifikací typů jednotlivých tokenů</a></p>
<p><a href="#k08">8. Dialogové boxy nabízené knihovnou prompt_toolkit</a></p>
<p><a href="#k09">*** 9. Dialog pro zobrazení zprávy uživateli &ndash; <strong>message_dialog</strong></a></p>
<p><a href="#k10">*** 10. Základní dialog pro výběr odpovědi typu Ano/Ne</a></p>
<p><a href="#k11">*** 11. Změna popisu tlačítek v&nbsp;dialogu</a></p>
<p><a href="#k12">*** 12. Dialog, v&nbsp;němž je počet a popis tlačítek plně konfigurovatelný</a></p>
<p><a href="#k13">*** 13. Dialog určený pro vstup textu nebo dalších údajů</a></p>
<p><a href="#k14">*** 14. Režim zadávání hesla popř.&nbsp;dalších údajů, které se nemají přímo zobrazit na terminálu</a></p>
<p><a href="#k15">*** 15. Dialog se sadou přepínacích tlačítek (radio buttons)</a></p>
<p><a href="#k16">*** 16. Dialog zobrazující průběh výpočtu (&bdquo;teploměr&ldquo;)</a></p>
<p><a href="#k17">*** 17. Nastavení stylu zobrazení dialogů</a></p>
<p><a href="#k18">18. Tvorba aplikací s&nbsp;plnohodnotným textovým uživatelským rozhraním</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. Tvorba textového uživatelského rozhraní s&nbsp;knihovnou prompt_toolkit: základní prvky TUI</h2>

<p>Na předchozí dva články [<a
href="https://www.root.cz/clanky/tvorba-aplikaci-s-prikazovym-radkem-v-pythonu-s-vyuzitim-knihoven-gnu-readline-a-prompt-toolkit/">1</a>]
[<a href="https://www.root.cz/clanky/tvorba-aplikaci-s-textovym-uzivatelskym-rozhranim-zalozenym-na-knihovne-prompt-toolkit/">2</a>],
v&nbsp;nichž jsme se seznámili s&nbsp;některými možnostmi nabízenými knihovnami
<i>GNU Readline</i> a <i>prompt_toolkit</i> dnes navážeme. Prozatím jsme se
totiž dozvěděli &bdquo;pouze&ldquo; to, jakým způsobem je možné zajistit vstup
dat popř.&nbsp;příkazů s&nbsp;využitím v&nbsp;mnoha oblastech vylepšeného
příkazového řádku (historie příkazů, automatické doplňování, validace, barevné
zvýraznění atd.). Ovšem pro aplikace s&nbsp;plnohodnotným textovým uživatelským
rozhraním (<i>TUI &ndash; Text User Interface</i>) nemusí být příkazový řádek
dostačující a je nutné použít i další ovládací prvky (widgety). Z&nbsp;tohoto
důvodu se nejprve seznámíme s&nbsp;možností výpisu formátovaných a obarvených
textů a následně pak se standardními dialogy, které programátorům knihovna
<i>prompt_toolkit</i> nabízí a které lze velmi jednoduše použít (podobně jako
v&nbsp;BASHi knihovnu/nástroj <a
href="http://invisible-island.net/dialog/">Dialog</a> nebo <a
href="https://wiki.gnome.org/Projects/Zenity">zenity</a>). Poté se již budeme
věnovat aplikacím s&nbsp;plnohodnotným textovým uživatelským rozhraním,
konfigurovatelnými widgety ovládanými klávesnicí i myší apod.</p>

<img src="https://i.iinfo.cz/images/183/prompt-toolkit-2-17.png" class="image-334207" alt="&#160;" width="806" height="531" />
<p><i>Obrázek 1: Příklad podrobněji vysvětlený v&nbsp;předchozím článku,
v&nbsp;němž jsme si popsali zdánlivě triviální funkci pro vstup textových
údajů.</i></p>

<p><div class="rs-tip-major">Poznámka: první část dnešního článku sice nemusí
být příliš záživná, ovšem formátovaný text (založený například na dále zmíněné
třídě <strong>HTML</strong>) bude možné využít například ve všech standardních
dialozích popř.&nbsp;i ve widgetech, s&nbsp;nimiž se postupně
seznámíme.</div></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Výpis formátovaného textu na konzoli</h2>

<p>První funkcí, se kterou se v&nbsp;dnešním článku seznámíme, je funkce
nazvaná <strong>print_formatted_text()</strong>. Tato funkce je navržena
takovým způsobem, aby byla zpětně kompatibilní se standardní funkcí
<strong>print()</strong> z&nbsp;knihovny Pythonu, což mj.&nbsp;znamená, že lze
volit způsob odřádkování apod. Tato funkce plně podporuje Unicode, což si
ostatně můžeme ukázat na <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print1_unicode_support.py">příkladu</a>,
který po svém spuštění stáhne známý soubor pojmenovaný
&bdquo;UTF-8-demo.txt&ldquo; a následně ho řádek po řádku vypíše na terminál, a
to právě s&nbsp;využitím funkce <strong>print_formatted_text</strong>:</p>

<pre>
from prompt_toolkit import <strong>print_formatted_text</strong>
from urllib.request import urlopen
&nbsp;
input = urlopen("http://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-demo.txt")
&nbsp;
for line in input:
    line = line.strip().decode("utf-8")
    <strong>print_formatted_text(line)</strong>
</pre>

<p>Způsob zobrazení výsledků do značné míry závisí na nastavení terminálu,
použitém fontu atd.:</p>

*** image ***
<p><i>Obrázek 2: První obrazovka s&nbsp;obsahem souboru
&bdquo;UTF-8-demo.txt&ldquo;. Tento screenshot i všechny následující
screenshoty jsou vytvořeny v&nbsp;Xtermu s&nbsp;podporou Unicode.</i></p>

*** image ***
<p><i>Obrázek 3: Poslední část obsahu souboru
&bdquo;UTF-8-demo.txt&ldquo;.</i></p>

<p><div class="rs-tip-major">Proč je však výhodnější použít funkci
<strong>print_formatted_text()</strong> namísto klasické funkce
<strong>print()</strong>? Důvodů je více, ovšem ten hlavní spočívá v&nbsp;tom,
že této funkci lze skutečně předat text s&nbsp;formátovacími značkami. Takový
text je představován instancemi tříd <strong>FormattedText</strong>,
<strong>HTML</strong> nebo <strong>ANSI</strong>. Prozatím se zaměříme
především na použití třídy <strong>HTML</strong>.</div></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Použití třídy HTML a základních HTML značek &lt;b&gt;, &lt;i&gt; a &lt;u&gt;</h2>

<p>Třída HTML, která je taktéž součástí knihovny <i>prompt_toolkit</i>, se
používá pro reprezentaci formátovaného textu, v&nbsp;němž jsou využity značky
odvozené od značek, které nalezneme v&nbsp;jazyku HTML. Ve skutečnosti je
rozpoznáno jen minimum HTML značek, ovšem &ndash; což je zajímavé &ndash; je
možné v&nbsp;případě potřeby použít i takzvané pseudoznačky popř.&nbsp;si
dokonce nadefinovat značky vlastní. Nesmíme si však představovat, že kombinací
třídy <strong>HTML</strong> a funkce <strong>print_formatted_text()</strong>
získáme obdobu webového prohlížeče pracujícího v&nbsp;textovém režimu (w3m,
lynx, links, ...). Třída <strong>HTML</strong> totiž ve skutečnosti slouží
pouze pro popis zobrazení textu &ndash; stylu, barvy textu, barvy pozadí. Styl
je možné volit pomocí značek &lt;b&gt;, &lt;i&gt; a &lt;u&gt; a jejich
vzájemných kombinací. Konkrétní způsob zobrazení je plně závislý na možnostech
terminálu. Podívejme se na <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print2_basic_html_tags.py">příklad</a>,
v&nbsp;němž funkci <strong>print_formatted_text()</strong> předáme instanci
třídy HTML:</p>

<pre>
from prompt_toolkit import <strong>print_formatted_text</strong>, <strong>HTML</strong>
&nbsp;
print_formatted_text(HTML('zpráva obsahující &lt;b&gt;tučný text&lt;/b&gt;'))
print_formatted_text(HTML('zpráva s &lt;i&gt;textem tištěným kurzivou&lt;/i&gt;'))
print_formatted_text(HTML('text obsahující &lt;u&gt;tato podtržená slova&lt;/u&gt;'))
print_formatted_text(HTML('test kombinace &lt;b&gt;&lt;i&gt;tučné kurzivy&lt;/i&gt;&lt;/b&gt;'))
print_formatted_text(HTML('test kombinace &lt;b&gt;&lt;u&gt;tučného podtrženého textu&lt;/u&gt;&lt;/b&gt;'))
print_formatted_text(HTML('test kombinace &lt;i&gt;&lt;u&gt;podtrženého textu psaného kurzivou&lt;/u&gt;&lt;/i&gt;'))
</pre>

*** image ***
<p><i>Obrázek 4: Dnešní druhý demonstrační příklad po spuštění
v&nbsp;xtermu.</i></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se v&nbsp;mém případě
(při použití xtermu) kurziva zobrazila stejně jako běžný text. Toto chování lze
změnit v&nbsp;konfiguraci terminálu.</div></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Specifikace barvy textu: použití značky &lt;style&gt; popř.&nbsp;nových pseudoznaček</h2>

<p>Kromě stylu textu (běžný text, kurziva, tučný text, podtržení) si můžeme
vyzkoušet změnit barvu textu. Pro tento účel slouží především značka
&lt;style&gt; s&nbsp;atributem <strong>fg</strong>. Barvy je možné vybírat ze
dvou palet &ndash; první paleta obsahuje osm základních barev, každou se dvěma
intenzitami (světlejší, tmavší), druhá paleta pak 256 barev. Záleží ovšem na
konkrétní konfiguraci terminálu, jestli například barva &bdquo;red&ldquo; ze
standardní palety bude skutečně zobrazena červeně, protože prakticky všechny
moderní emulátory terminálu nabízí uživatelské definice použité barvové palety.
Podívejme se nyní na způsob zobrazení textu s&nbsp;použitím 16barevné
standardní palety (osm barev, každá se dvěma intenzitami). <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print3_html_styles.py">Tento
příklad</a> po svém spuštění nejdříve vypíše zprávy pomocí standardní funkce
<strong>print()</strong> a následně s&nbsp;využitím funkce
<strong>print_formatted_text()</strong>:</p>

<pre>
from prompt_toolkit import <strong>print_formatted_text</strong>, <strong>HTML</strong>
from prompt_toolkit.output.vt100 import FG_ANSI_COLORS
&nbsp;
for color in sorted(FG_ANSI_COLORS):
    message = "&lt;style fg='{color}'&gt;zpráva vypsaná barvou {color}&lt;/style&gt;".format(color=color)
    print(message)
&nbsp;
print("\n\n")
&nbsp;
for color in sorted(FG_ANSI_COLORS):
    message = "&lt;style fg='{color}'&gt;zpráva vypsaná barvou {color}&lt;/style&gt;".format(color=color)
    <strong>print_formatted_text(HTML(message))</strong>
</pre>

<p><div class="rs-tip-major">Poznámka: zpráv se vždy vytiskne sedmnáct a ne
šestnáct, a to kvůli pseudobarvě <strong>ansidefault</strong>.</div></p>

*** image ***
<p><i>Obrázek 5: Prvních sedmnáct zpráv vypsaných funkcí
<strong>print()</strong>.</i></p>

*** image ***
<p><i>Obrázek 6: Zprávy vypsané funkcí
<strong>print_formatted_text()</strong>.</i></p>

<p>Ve standardní šestnáctibarevné paletě jsou k&nbsp;dispozici tyto barvy (měly
by být využitelné prakticky ve všech emulátorech terminálu, dokonce i
v&nbsp;terminálu ve Windows):</p>

<table>
<tr><th>Jméno standardní barvy</th></tr>
<tr><td>ansiblack</td></tr>
<tr><td>ansired</td></tr>
<tr><td>ansigreen</td></tr>
<tr><td>ansiyellow</td></tr>
<tr><td>ansiblue</td></tr>
<tr><td>ansimagenta</td></tr>
<tr><td>ansicyan</td></tr>
<tr><td>ansigray</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>ansibrightblack</td></tr>
<tr><td>ansibrightred</td></tr>
<tr><td>ansibrightgreen</td></tr>
<tr><td>ansibrightyellow</td></tr>
<tr><td>ansibrightblue</td></tr>
<tr><td>ansibrightmagenta</td></tr>
<tr><td>ansibrightcyan</td></tr>
<tr><td>ansiwhite</td></tr>
</table>

<p>Kromě standardní značky &lt;style&gt; s&nbsp;atributem <strong>fg</strong>
můžeme použít i takzvané pseudoznačky, jejichž jména přímo odpovídají názvu
barvy. Jedná se například o pseudoznačku &lt;ansired&gt;. Opět se podívejme na
zdrojový kód příkladu, který tyto pseudoznačky postupně používá při tisku zpráv
na terminál:</p>

<pre>
from prompt_toolkit import <strong>print_formatted_text</strong>, <strong>HTML</strong>
from prompt_toolkit.output.vt100 import FG_ANSI_COLORS
&nbsp;
for color in sorted(FG_ANSI_COLORS):
    message = "&lt;{color}&gt;zpráva vypsaná barvou {color}&lt;/{color}&gt;".format(color=color)
    print(message)
&nbsp;
print("\n\n")
&nbsp;
for color in sorted(FG_ANSI_COLORS):
    message = "&lt;{color}&gt;zpráva vypsaná barvou {color}&lt;/{color}&gt;".format(color=color)
    <strong>print_formatted_text(HTML(message))</strong>
</pre>

*** image ***
<p><i>Obrázek 7: Příklad použití pseudoznaček s&nbsp;názvem jednotlivých
barev.</i></p>



<p><a name="k05"></a></p>
<h2 id="k05">5. Změna barvy pozadí textu; kombinace barvy popředí, pozadí i stylu výpisu</h2>

<p>Kromě samotné barvy textu je možné na všech moderních emulátorech terminálu
měnit i barvu pozadí. V&nbsp;závislosti na možnostech terminálu je
k&nbsp;dispozici buď osm barev, šestnáct barev (přesněji osm barev ve dvou
intenzitách) nebo 256 barev (16 základních, kombinace 6&times;6&times;6=216
odstínů každé barvové složky a 20 odstínů šedé). Opět si ukažme použití
základních šestnácti barev. Ty mají jména:</p>

<table>
<tr><th>Jméno standardní barvy</th></tr>
<tr><td>ansiblack</td></tr>
<tr><td>ansired</td></tr>
<tr><td>ansigreen</td></tr>
<tr><td>ansiyellow</td></tr>
<tr><td>ansiblue</td></tr>
<tr><td>ansimagenta</td></tr>
<tr><td>ansicyan</td></tr>
<tr><td>ansigray</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>ansibrightblack</td></tr>
<tr><td>ansibrightred</td></tr>
<tr><td>ansibrightgreen</td></tr>
<tr><td>ansibrightyellow</td></tr>
<tr><td>ansibrightblue</td></tr>
<tr><td>ansibrightmagenta</td></tr>
<tr><td>ansibrightcyan</td></tr>
<tr><td>ansiwhite</td></tr>
</table>

<p><a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print5_html_background_colors.py">Následující
demonstrační příklad</a> se na terminál pokusí vykreslit všech 16&times;16=256
kombinací popředí a pozadí:</p>

<pre>
from prompt_toolkit import print_formatted_text, HTML
from prompt_toolkit.output.vt100 import FG_ANSI_COLORS, BG_ANSI_COLORS
&nbsp;
for bg_color in sorted(BG_ANSI_COLORS):
    for fg_color in sorted(FG_ANSI_COLORS):
        message = "&lt;p fg='{fg_color}' bg='{bg_color}'&gt; test &lt;/p&gt;".format(
            fg_color=fg_color, bg_color=bg_color)
        <strong>print_formatted_text(HTML(message), end="")</strong>
&nbsp;
    print()
</pre>

*** image ***
<p><i>Obrázek 8: Kombinace 16&times;16 barev popředí a pozadí.</i></p>

<p><a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print6_combinations.py">V&nbsp;dalším
příkladu</a> zkombinujeme barvy popředí a pozadí s&nbsp;různými styly textu,
tj.&nbsp;normálním textem, podtrženým textem, kurzivou a tučným textem:</p>

<pre>
from prompt_toolkit import print_formatted_text, HTML
from prompt_toolkit.output.vt100 import FG_ANSI_COLORS, BG_ANSI_COLORS
&nbsp;
for bg_color in sorted(BG_ANSI_COLORS):
    for fg_color in sorted(FG_ANSI_COLORS):
        message = "&lt;p fg='{fg_color}' bg='{bg_color}'&gt;XX &lt;u&gt;XX&lt;/u&gt; &lt;i&gt;XX&lt;/i&gt; &lt;b&gt;XX&lt;/b&gt;   &lt;/p&gt;".format(
            fg_color=fg_color, bg_color=bg_color)
        <strong>print_formatted_text(HTML(message), end="")</strong>
&nbsp;
    print()
</pre>

*** image ***
<p><i>Obrázek 9: Kombinace 16&times;16 barev popředí a pozadí se čtyřmi styly
textu: normální, podtržený, kurziva a tučný.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Obarvení výstupu s&nbsp;využitím lexeru z&nbsp;knihovny Pygments</h2>

<p>O použití knihovny Pygments jsme se již krátce zmínili <a
href="https://www.root.cz/clanky/tvorba-aplikaci-s-textovym-uzivatelskym-rozhranim-zalozenym-na-knihovne-prompt-toolkit/">v&nbsp;předchozím článku</a> v&nbsp;souvislosti <a
href="https://www.root.cz/clanky/tvorba-aplikaci-s-textovym-uzivatelskym-rozhranim-zalozenym-na-knihovne-prompt-toolkit/#k13">s&nbsp;obarvením
textu</a> zadávaného uživatelem. To je užitečná vlastnost, která je využitelná
například při tvorbě interaktivních konzolí různých (doménově specifických)
jazyků a nástrojů. Podobně užitečná může být i další možnost &ndash; obarvit
výstup s&nbsp;využitím lexeru naimportovaného z&nbsp;knihovny Pygments.
Takzvaný syntax highlighting (což je někdy poněkud nepřesné pojmenování) při
obarvení zdrojových kódů napsaných přímo v&nbsp;Pythonu vypadá následovně:</p>

<pre>
from pygments import lex
from pygments.token import Token
from pygments.lexers import PythonLexer
&nbsp;
from prompt_toolkit.formatted_text import PygmentsTokens
from prompt_toolkit import print_formatted_text
&nbsp;
code = """
for i in range(1, 10):
    print(i)
    if i &gt; 5:
        break
    do_something(i)
"""
&nbsp;
tokens = list(lex(code, lexer=PythonLexer()))
print_formatted_text(PygmentsTokens(tokens))
</pre>

*** image ***
<p><i>Obrázek 10: Obarvení textu na základě lexeru vytvořeného pro programovací
jazyk Python.</i></p>

<p>Jen pro zajímavost si ukažme i některé další možnosti syntax highlightingu
nabízeného knihovnou Pygments. <a
href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print8_print_using_lexer_B.py">Tento
příklad</a> zobrazuje zdrojový kód naprogramovaný ve starobylém BASICu:</p>

<pre>
from pygments import lex
from pygments.token import Token
from pygments.lexers.basic import CbmBasicV2Lexer
&nbsp;
from prompt_toolkit.formatted_text import PygmentsTokens
from prompt_toolkit import print_formatted_text
&nbsp;
code = """
10 FOR I=0 TO 63
20 FOR J=43 TO 0 STEP -1
30 LET CX=(I-52)/31
40 LET CY=(J-22)/31
50 LET ZX=0
60 LET ZY=0
70 LET ITER=0
80 LET ZX2=ZX*ZX
85 LET ZY2=ZY*ZY
90 LET ZY=2*ZX*ZY+CY
100 LET ZX=ZX2-ZY2+CX
110 LET ITER=ITER+1
120 IF ZX2+ZY2&lt;=4 AND ITER&lt;200 THEN GOTO 80
130 IF ITER=200 THEN PLOT I, J
140 NEXT J
150 NEXT I
"""
&nbsp;
tokens = list(lex(code, lexer=CbmBasicV2Lexer()))
print_formatted_text(PygmentsTokens(tokens))
</pre>

*** image ***
<p><i>Obrázek 11: Obarvení textu na základě lexeru vytvořeného pro programovací
jazyk BASIC (zde konkrétně Commodore BASIC).</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Konstrukce výstupu se specifikací typů jednotlivých tokenů</h2>

<p>Existuje ještě jedna potenciálně užitečná varianta obarvení (zdrojových)
kódů vytištěných na terminál. Tato varianta spočívá v&nbsp;tom, že se text,
který se má zobrazit s&nbsp;obarvením, rozdělí na takzvané lexikální tokeny,
přičemž každému tokenu je přiřazen jeho význam (typ, jméno). Příkladem mohou
být klíčová slova, tj.&nbsp;krátké texty uložené v&nbsp;tokenu se jménem
<strong>Token.Keyword</strong>. V&nbsp;případě, že jsou data, která se mají
zobrazit na výstupu, skutečně reprezentována formou tokenů, může být jejich
vytištění poměrně snadné, což je ostatně patrné při pohledu na další příklad,
ve kterém je formou seznamu specifikováno několik tokenů tvořících jednoduchý
program (odpovídající Pythonu ale i mnoha dalším programovacím jazykům).
Povšimněte si, že každý token je skutečně reprezentován svým jménem/typem a
konkrétním textem):</p>

<pre>
from pygments.token import Token
from prompt_toolkit import print_formatted_text
from prompt_toolkit.formatted_text import PygmentsTokens
&nbsp;
text = [
    (Token.Keyword, 'print'),
    (Token.Punctuation, '('),
    (Token.Literal.String.Double, '"'),
    (Token.Literal.String, 'hello'),
    (Token.Literal.String.Double, '"'),
    (Token.Punctuation, ','),
    (Token.Text.Whitespace, ' '),
    (Token.Literal.String.Single, '"'),
    (Token.Literal.String, 'world'),
    (Token.Literal.String.Single, '"'),
    (Token.Punctuation, ')'),
    (Token.Text, '\n'),
]
&nbsp;
print_formatted_text(PygmentsTokens(text))
</pre>

*** image ***
<p><i>Obrázek 12: Obarvení textu složeného postupně z&nbsp;jednotlivých
tokenů.</i></p>

<p>Následuje výpis jednotlivých typů tokenů, které lze použít. S&nbsp;touto
technologií se budeme zabývat v&nbsp;samostatném článku o knihovně
Pygments:</p>

<table>
<tr><th>Skupina</th><th>Jméno/typ tokenu</th></tr>
<tr><td>Keyword</td><td>Keyword.Constant</td></tr>
<tr><td>&nbsp;</td><td>Keyword.Declaration</td></tr>
<tr><td>&nbsp;</td><td>Keyword.Namespace</td></tr>
<tr><td>&nbsp;</td><td>Keyword.Pseudo</td></tr>
<tr><td>&nbsp;</td><td>Keyword.Reserved</td></tr>
<tr><td>&nbsp;</td><td>Keyword.Type</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Number</td><td>Number.Bin</td></tr>
<tr><td>&nbsp;</td><td>Number.Float</td></tr>
<tr><td>&nbsp;</td><td>Number.Hex</td></tr>
<tr><td>&nbsp;</td><td>Number.Integer</td></tr>
<tr><td>&nbsp;</td><td>Number.Integer.Long</td></tr>
<tr><td>&nbsp;</td><td>Number.Oct</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Name</td><td>Name.Attribute</td></tr>
<tr><td>&nbsp;</td><td>Name.Builtin</td></tr>
<tr><td>&nbsp;</td><td>Name.Builtin.Pseudo</td></tr>
<tr><td>&nbsp;</td><td>Name.Class</td></tr>
<tr><td>&nbsp;</td><td>Name.Constant</td></tr>
<tr><td>&nbsp;</td><td>Name.Decorator</td></tr>
<tr><td>&nbsp;</td><td>Name.Entity</td></tr>
<tr><td>&nbsp;</td><td>Name.Exception</td></tr>
<tr><td>&nbsp;</td><td>Name.Function</td></tr>
<tr><td>&nbsp;</td><td>Name.Function.Magic</td></tr>
<tr><td>&nbsp;</td><td>Name.Label</td></tr>
<tr><td>&nbsp;</td><td>Name.Namespace</td></tr>
<tr><td>&nbsp;</td><td>Name.Other</td></tr>
<tr><td>&nbsp;</td><td>Name.Tag</td></tr>
<tr><td>&nbsp;</td><td>Name.Variable</td></tr>
<tr><td>&nbsp;</td><td>Name.Variable.Class</td></tr>
<tr><td>&nbsp;</td><td>Name.Variable.Global</td></tr>
<tr><td>&nbsp;</td><td>Name.Variable.Instance</td></tr>
<tr><td>&nbsp;</td><td>Name.Variable.Magic</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Literal</td><td>Literal.Date</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>String</td><td>String.Affix</td></tr>
<tr><td>&nbsp;</td><td>String.Backtick</td></tr>
<tr><td>&nbsp;</td><td>String.Char</td></tr>
<tr><td>&nbsp;</td><td>String.Delimiter</td></tr>
<tr><td>&nbsp;</td><td>String.Doc</td></tr>
<tr><td>&nbsp;</td><td>String.Double</td></tr>
<tr><td>&nbsp;</td><td>String.Escape</td></tr>
<tr><td>&nbsp;</td><td>String.Heredoc</td></tr>
<tr><td>&nbsp;</td><td>String.Interpol</td></tr>
<tr><td>&nbsp;</td><td>String.Other</td></tr>
<tr><td>&nbsp;</td><td>String.Regex</td></tr>
<tr><td>&nbsp;</td><td>String.Single</td></tr>
<tr><td>&nbsp;</td><td>String.Symbol</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Comment</td><td>Comment.Hashbang</td></tr>
<tr><td>&nbsp;</td><td>Comment.Multiline</td></tr>
<tr><td>&nbsp;</td><td>Comment.Preproc</td></tr>
<tr><td>&nbsp;</td><td>Comment.Single</td></tr>
<tr><td>&nbsp;</td><td>Comment.Special</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Operator</td><td>Operator.Word</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Punctuation</td><td>Punctuation</td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Generic</td><td>Generic.Deleted</td></tr>
<tr><td>&nbsp;</td><td>Generic.Emph</td></tr>
<tr><td>&nbsp;</td><td>Generic.Error</td></tr>
<tr><td>&nbsp;</td><td>Generic.Heading</td></tr>
<tr><td>&nbsp;</td><td>Generic.Inserted</td></tr>
<tr><td>&nbsp;</td><td>Generic.Output</td></tr>
<tr><td>&nbsp;</td><td>Generic.Prompt</td></tr>
<tr><td>&nbsp;</td><td>Generic.Strong</td></tr>
<tr><td>&nbsp;</td><td>Generic.Subheading</td></tr>
<tr><td>&nbsp;</td><td>Generic.Traceback</td></tr>
</table>

<p><div class="rs-tip-major">Poznámka: mapování mezi typem tokenu a barvou či
stylem textu je samozřejmě konfigurovatelné.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. Dialogové boxy nabízené knihovnou prompt_toolkit</h2>

<p>S&nbsp;dialogovými okny jsme se na stránkách Rootu setkali, například již
při popisu možností knihovny Tkinter. Připomeňme si, že kromě zvládnutí vyšší
komplexnosti aplikací hrají dialogová okna i další roli &ndash; pomáhají totiž
standardizovat některé společné části aplikací. Například pro otevření souboru,
uložení souboru, tisk dokumentu nebo výběr barvy je možné (a velmi vhodné)
použít standardní dialog dodávaný s&nbsp;GUI či TUI systémem. Do jaké míry se
tento systém standardizace využívá, čtenář patrně vidí na svém desktopu sám:
určitá míra standardizace je patrná, také je však zřejmé, že mnohé aplikace
využívají jiné GUI knihovny, o míchání několika desktopových prostředích ani
nemluvě (to zdaleka není pouze problém GNU softwaru, &bdquo;lidová
tvořivost&ldquo; je vidět i na komerčních programech).</p>

<p>Se standardními dialogy se setkáme i v&nbsp;knihovně <i>prompt_toolkit</i>,
v&nbsp;níž se až na jednu výjimku používají velmi jednoduše &ndash; pouze se
zavolá příslušná funkce pro zobrazení dialogu a poté aplikace čeká, až uživatel
zadá vstupní data popř.&nbsp;až zvolí nějaké tlačítko. Tyto dialogy se ovládají
velmi podobně jako nástroje <strong>Zenity</strong> nebo
<strong>Dialog</strong>, které lze volat z&nbsp;příkazového řádku.
V&nbsp;<i>prompt_toolkit</i>u existuje vlastně jen jediný dialog
s&nbsp;odlišným chováním: jedná se o dialog určený pro zobrazení probíhající
činnosti, který obsahuje jak klasický <i>progress bar</i>, tak i plochu, do
které může aplikace v&nbsp;průběhu výpočtů vypisovat ladicí informace.</p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Dialog pro zobrazení zprávy uživateli &ndash; <strong>message_dialog</strong></h2>

<p></p>

<pre>
from prompt_toolkit.shortcuts import <strong>message_dialog</strong>
&nbsp;
<strong>message_dialog</strong>(
    title='Software failure',
    text='Guru Meditation #12345678.ABCDEFFF\nPress ENTER to continue.')
</pre>

*** image ***
<p><i>Obrázek 13: </i></p>

<p>Tento dialog obsahuje i nepovinný parametr <strong>ok_text</strong>, kterým
je možné specifikovat text zobrazený na (jediném) tlačítku. Opět se podívejme
na způsob použití:</p>

<pre>
from prompt_toolkit.shortcuts import <strong>message_dialog</strong>
&nbsp;
<strong>message_dialog</strong>(
    title='Software failure',
    text='Guru Meditation #12345678.ABCDEFFF\nPress ENTER to continue.',
    ok_text='[Enter]')
</pre>

*** image ***
<p><i>Obrázek 14: </i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Základní dialog pro výběr odpovědi typu Ano/Ne</h2>

<pre>
from prompt_toolkit.shortcuts import <strong>message_dialog</strong>, <strong>yes_no_dialog</strong>
&nbsp;
response = <strong>yes_no_dialog</strong>(
    title='Software failure',
    text='Guru Meditation #12345678.ABCDEFFF\nRestart system?')
&nbsp;
<strong>message_dialog</strong>(
    title='Your choice',
    text='Yes' if response else 'No')
</pre>

*** image ***
<p><i>Obrázek 15: </i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Změna popisu tlačítek v&nbsp;dialogu</h2>

<pre>
from prompt_toolkit.shortcuts import <strong>message_dialog</strong>, <strong>yes_no_dialog</strong>
&nbsp;
response = <strong>yes_no_dialog</strong>(
    title='Tento program provedl neplatnou operaci',
    text='Nevíme, co se stalo, známe jen kód chybÿ́:\n#12345678.ABCDEFFF\n\nProvést restart?',
    yes_text='Ano',
    no_text='Ne')
&nbsp;
<strong>message_dialog</strong>(
    title='Zadali jste volbu',
    text='Ano' if response else 'Ne')
</pre>

*** image ***
<p><i>Obrázek 16: </i></p>



<p><a name="k12"></a></p>
<h2 id="k12">12. Dialog, v&nbsp;němž je počet a popis tlačítek plně konfigurovatelný</h2>

<pre>
from prompt_toolkit.shortcuts import <strong>message_dialog</strong>, <strong>button_dialog</strong>
&nbsp;
response = <strong>button_dialog</strong>(
    title='Tento program provedl neplatnou operaci',
    text='Not ready reading drive A',
    buttons=[
        ('Abort', 'abort'),
        ('Retry', 'retry'),
        ('Fail', 'fail')])
&nbsp;
<strong>message_dialog</strong>(
    title='Zadali jste volbu',
    text=response)
</pre>

*** image ***
<p><i>Obrázek 17: </i></p>

<pre>
from enum import Enum
from prompt_toolkit.shortcuts import <strong>message_dialog</strong>, <strong>button_dialog</strong>
&nbsp;
Response = Enum('Response', 'abort retry fail')
&nbsp;
response = <strong>button_dialog</strong>(
    title='Tento program provedl neplatnou operaci',
    text='Not ready reading drive A',
    buttons=[
        ('Abort', Response.abort),
        ('Retry', Response.retry),
        ('Fail',  Response.fail)])
&nbsp;
<strong>message_dialog</strong>(
    title='Zadali jste volbu',
    text=str(response))
</pre>

*** image ***
<p><i>Obrázek 18: </i></p>



<p><a name="k13"></a></p>
<h2 id="k13">13. Dialog určený pro vstup textu nebo dalších údajů</h2>

<pre>
from prompt_toolkit.shortcuts import <strong>message_dialog</strong>, <strong>input_dialog</strong>
&nbsp;
response = <strong>input_dialog</strong>(
    title='Zadání uživatelského jména',
    text='Uživatelské jméno:')
&nbsp;
if response is not None:
    <strong>message_dialog</strong>(
        title='Zadání uživatelského jména',
        text='zadali jste: {name}'.format(name=response if response else 'nic :)'))
else:
    <strong>message_dialog</strong>(
        title='Zadání uživatelského jména',
        text='Jméno nebylo zadáno')
</pre>

*** image ***
<p><i>Obrázek 19: </i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Režim zadávání hesla popř.&nbsp;dalších údajů, které se nemají přímo zobrazit na terminálu</h2>

<pre>
from prompt_toolkit.shortcuts import <strong>message_dialog</strong>, <strong>input_dialog</strong>
&nbsp;
response = <strong>input_dialog</strong>(
    title='Zadání hesla',
    text='Heslo:',
    password=True)
&nbsp;
if response is not None:
    <strong>message_dialog</strong>(
        title='Zadání hesla',
        text='zadali jste: {password}'.format(password=response if response else 'nic :)'))
else:
    message_dialog(
        title='Zadání hesla',
        text='Heslo nebylo zadáno')
</pre>

*** image ***
<p><i>Obrázek 20: </i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Dialog se sadou přepínacích tlačítek (radio buttons)</h2>

<pre>
from prompt_toolkit.shortcuts import <strong>message_dialog</strong>, <strong>radiolist_dialog</strong>
&nbsp;
response = <strong>radiolist_dialog</strong>(
    title='Zadání příkazu',
    text='Zadejte příkaz (quit, exit, help, eval):',
    values=[
        ('quit', 'Quit'),
        ('exit', 'Exit'),
        ('help', 'Help'),
        ('eval', 'Eval')])
&nbsp;
if response is not None:
    <strong>message_dialog</strong>(
        title='Zadání příkazu',
        text='zadali jste: {command}'.format(command=response if response else 'nic :)'))
else:
    <strong>message_dialog</strong>(
        title='Zadání uživatelského jména',
        text='Příkaz nebyl zadán')
</pre>

*** image ***
<p><i>Obrázek 21: </i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Dialog zobrazující průběh výpočtu (&bdquo;teploměr&ldquo;)</h2>

<pre>
from time import sleep
from prompt_toolkit.shortcuts import <strong>message_dialog</strong>, <strong>progress_dialog</strong>
&nbsp;
&nbsp;
def <strong>simple_callback</strong>(set_percentage_function, log_text_function):
    for counter in range(0, 101, 5):
        log_text_function("Pocitam: {counter}\n".format(counter=counter))
        set_percentage_function(counter)
        sleep(0.5)
    sleep(2)
&nbsp;
&nbsp;
response = <strong>progress_dialog</strong>(
    title='Výpočet',
    text='Probíhá výpočet, prosím čekejte',
    run_callback=simple_callback)
</pre>

*** image ***
<p><i>Obrázek 22: </i></p>

*** image ***
<p><i>Obrázek 23: </i></p>



<p><a name="k17"></a></p>
<h2 id="k17">17. Nastavení stylu zobrazení dialogů</h2>

<pre>
from enum import Enum
from prompt_toolkit.shortcuts import message_dialog, button_dialog
from prompt_toolkit.styles import Style
&nbsp;
dialog_stylesheet_1 = Style.from_dict({
    'dialog':             'bg:yellow',
    'dialog frame-label': 'bg:white black',
    'dialog.body':        'bg:#000000 #00ff00',
    'dialog shadow':      'bg:#00aa00',
    })
&nbsp;
Response = Enum('Response', 'abort retry fail')
&nbsp;
response = button_dialog(
    title='Tento program provedl neplatnou operaci',
    text='Not ready reading drive A',
    buttons=[
        ('Abort', Response.abort),
        ('Retry', Response.retry),
        ('Fail',  Response.fail)],
    style=dialog_stylesheet_1)
&nbsp;
&nbsp;
dialog_stylesheet_2 = Style.from_dict({
    'dialog':             'bg:black',
    'dialog frame-label': 'bg:white black',
    })
&nbsp;
message_dialog(
    title='Zadali jste volbu',
    text=str(response),
    style=dialog_stylesheet_2)
</pre>

*** image ***
<p><i>Obrázek 24: </i></p>

<pre>
from enum import Enum
from prompt_toolkit import HTML
from prompt_toolkit.shortcuts import message_dialog, button_dialog
from prompt_toolkit.styles import Style
&nbsp;
dialog_stylesheet_1 = Style.from_dict({
    'dialog':             'bg:yellow',
    'dialog frame-label': 'bg:white black',
    'dialog.body':        'bg:#000000 #00ff00',
    'dialog shadow':      'bg:#00aa00',
    })
&nbsp;
Response = Enum('Response', 'abort retry fail')
&nbsp;
response = button_dialog(
    title=HTML('Tento program provedl &lt;white&gt;neplatnou&lt;/white&gt; operaci'),
    text=HTML('Not &lt;u&gt;ready&lt;/u&gt; reading drive &lt;b&gt;A&lt;/b&gt;'),
    buttons=[
        ('Abort', Response.abort),
        ('Retry', Response.retry),
        ('Fail',  Response.fail)],
    style=dialog_stylesheet_1)
&nbsp;
&nbsp;
dialog_stylesheet_2 = Style.from_dict({
    'dialog':             'bg:black',
    'dialog frame-label': 'bg:white black',
    })
&nbsp;
message_dialog(
    title='Zadali jste volbu',
    text=HTML("&lt;red&gt;Příkaz:&lt;/red&gt; &lt;blue&gt;{response}&lt;/blue&gt;".format(response=response)),
    style=dialog_stylesheet_2)
</pre>

*** image ***
<p><i>Obrázek 25: </i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Tvorba aplikací s&nbsp;plnohodnotným textovým uživatelským rozhraním</h2>

<p>Technologie, s&nbsp;nimiž jsme se postupně seznámili v&nbsp;předchozích
kapitolách, samozřejmě nestačí pro tvorbu aplikací s&nbsp;plnohodnotným
(celoobrazovkovým) textovým uživatelským rozhraním (TUI). Pro tento účel nabízí
knihovna <i>prompt_toolkit</i> další třídy, s&nbsp;nimiž je například možné
implementovat klasickou smyčku událostí apod. S&nbsp;těmito třídami i se
způsobem jejich využití se seznámíme v&nbsp;navazující části tohoto
miniseriálu.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Všechny dnes popisované demonstrační příklady byly uloženy do Git
repositáře, který je dostupný na adrese <a
href="https://github.com/tisnik/presentations">https://github.com/tisnik/presentations</a>.
Příklady si můžete v&nbsp;případě potřeby stáhnout i jednotlivě bez nutnosti
klonovat celý (dnes již poměrně rozsáhlý) repositář:</p>

<h4>Práce s&nbsp;formátovaným textem</h4>

<table>
<tr><th>#</th><th>Příklad</th><th>Popis</th><th>Odkaz</th></tr>
<tr><td>1</td><td>print1_unicode_support.py</td><td>výpis textu s&nbsp;Unicode znaky</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print1_unicode_support.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print1_unicode_support.py</a></td></tr>
<tr><td>2</td><td>print2_basic_html_tags.py</td><td>použití základních HTML značek</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print2_basic_html_tags.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print2_basic_html_tags.py</a></td></tr>
<tr><td>3</td><td>print3_html_styles.py</td><td>použití HTML stylů při formátování</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print3_html_styles.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print3_html_styles.py</a></td></tr>
<tr><td>4</td><td>print4_html_fake_tags.py</td><td>pseudoznačky HTML při formátování</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print4_html_fake_tags.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print4_html_fake_tags.py</a></td></tr>
<tr><td>5</td><td>print5_html_background_colors.py</td><td>specifikace barvy pozadí</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print5_html_background_colors.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print5_html_background_colors.py</a></td></tr>
<tr><td>6</td><td>print6_combinations.py</td><td>kombinace barev a HTML stylů</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print6_combinations.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print6_combinations.py</a></td></tr>
<tr><td>7</td><td>print7_print_using_lexer.py</td><td>použití lexeru při obarvování syntaxe (Python)</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print7_print_using_lexer.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print7_print_using_lexer.py</a></td></tr>
<tr><td>8</td><td>print8_print_using_lexer_B.py</td><td>použití lexeru při obarvování syntaxe (BASIC)</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print8_print_using_lexer_B.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print8_print_using_lexer_B.py</a></td></tr>
<tr><td>9</td><td>print9_use_pygments.py</td><td>využití možností knihovny Pygments při obarvování</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print9_use_pygments.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/print/print9_use_pygments.py</a></td></tr>
</table>

<h4>Standardní dialogy</h4>

<table>
<tr><th>#</th><th>Příklad</th><th>Popis</th><th>Odkaz</th></tr>
<tr><td>1</td><td>dialog1_basic_message_dialog.py</td><td>základní dialog pro zobrazení zprávy</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog1_basic_message_dialog.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog1_basic_message_dialog.py</a></td></tr>
<tr><td>2</td><td>dialog2_basic_message_dialog_button.py</td><td>změna textů tlačítek v&nbsp;dialogu</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog2_basic_message_dialog_button.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog2_basic_message_dialog_button.py</a></td></tr>
<tr><td>3</td><td>dialog3_yes_no_dialog.py</td><td>dialog s&nbsp;tlačítky Yes/No</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog3_yes_no_dialog.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog3_yes_no_dialog.py</a></td></tr>
<tr><td>4</td><td>dialog4_custom_yes_no_dialog.py</td><td>změna textů tlačítek v&nbsp;dialogu Yes/No</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog4_custom_yes_no_dialog.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog4_custom_yes_no_dialog.py</a></td></tr>
<tr><td>5</td><td>dialog5_button_dialog.py</td><td>dialog s&nbsp;definovanými tlačítky</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog5_button_dialog.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog5_button_dialog.py</a></td></tr>
<tr><td>6</td><td>dialog6_button_dialog_enum.py</td><td>vylepšení předchozího příkladu</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog6_button_dialog_enum.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog6_button_dialog_enum.py</a></td></tr>
<tr><td>7</td><td>dialog7_basic_input_dialog.py</td><td>dialog pro vstup textu</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog7_basic_input_dialog.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog7_basic_input_dialog.py</a></td></tr>
<tr><td>8</td><td>dialog8_password_mode.py</td><td>režim zápisu hesla</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog8_password_mode.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog8_password_mode.py</a></td></tr>
<tr><td>9</td><td>dialog9_radio_list_dialog.py</td><td>dialog s&nbsp;přepínacími tlačítky</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog9_radio_list_dialog.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog9_radio_list_dialog.py</a></td></tr>
<tr><td>10</td><td>dialog10_progress_dialog.py</td><td>dialog se zobrazením průběhu výpočtu</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog10_progress_dialog.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog10_progress_dialog.py</a></td></tr>
<tr><td>11</td><td>dialog11_dialog_style.py</td><td>styly ovlivňující zobrazení dialogu</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog11_dialog_style.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog11_dialog_style.py</a></td></tr>
<tr><td>12</td><td>dialog12_dialog_html_usage.py</td><td>použití třídy HTML v&nbsp;dialogu</td><td><a href="https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog12_dialog_html_usage.py">https://github.com/tisnik/presentations/blob/master/prompt_toolkit/dialogs/dialog12_dialog_html_usage.py</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>UTF-8 encoded sample plain-text file<br />
<a href="http://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-demo.txt">http://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-demo.txt</a>
</li>

<li>4 Python libraries for building great command-line user interfaces<br />
<a href="https://opensource.com/article/17/5/4-practical-python-libraries">https://opensource.com/article/17/5/4-practical-python-libraries</a>
</li>

<li>prompt_toolkit 2.0.3 na PyPi<br />
<a href="https://pypi.org/project/prompt_toolkit/">https://pypi.org/project/prompt_toolkit/</a>
</li>

<li>python-prompt-toolkit na GitHubu<br />
<a href="https://github.com/jonathanslenders/python-prompt-toolkit">https://github.com/jonathanslenders/python-prompt-toolkit</a>
</li>

<li>The GNU Readline Library<br />
<a href="https://tiswww.case.edu/php/chet/readline/rltop.html">https://tiswww.case.edu/php/chet/readline/rltop.html</a>
</li>

<li>GNU Readline (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/GNU_Readline">https://en.wikipedia.org/wiki/GNU_Readline</a>
</li>

<li>readline — GNU readline interface (Python 3.x)<br />
<a href="https://docs.python.org/3/library/readline.html">https://docs.python.org/3/library/readline.html</a>
</li>

<li>readline — GNU readline interface (Python 2.x)<br />
<a href="https://docs.python.org/2/library/readline.html">https://docs.python.org/2/library/readline.html</a>
</li>

<li>GNU Readline Library - command line editing<br />
<a href="https://tiswww.cwru.edu/php/chet/readline/readline.html">https://tiswww.cwru.edu/php/chet/readline/readline.html</a>
</li>

<li>gnureadline 6.3.8 na PyPi<br />
<a href="https://pypi.org/project/gnureadline/">https://pypi.org/project/gnureadline/</a>
</li>

<li>Editline Library (libedit)<br />
<a href="http://thrysoee.dk/editline/">http://thrysoee.dk/editline/</a>
</li>

<li>Comparing Python Command-Line Parsing Libraries – Argparse, Docopt, and Click<br />
<a href="https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/">https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a>
</li>

<li>libedit or editline<br />
<a href="http://www.cs.utah.edu/~bigler/code/libedit.html">http://www.cs.utah.edu/~bigler/code/libedit.html</a>
</li>

<li>WinEditLine<br />
<a href="http://mingweditline.sourceforge.net/">http://mingweditline.sourceforge.net/</a>
</li>

<li>rlcompleter — Completion function for GNU readline<br />
<a href="https://docs.python.org/3/library/rlcompleter.html">https://docs.python.org/3/library/rlcompleter.html</a>
</li>

<li>rlwrap na GitHubu<br />
<a href="https://github.com/hanslub42/rlwrap">https://github.com/hanslub42/rlwrap</a>
</li>

<li>rlwrap(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/rlwrap">https://linux.die.net/man/1/rlwrap</a>
</li>

<li>readline(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/readline">https://linux.die.net/man/3/readline</a>
</li>

<li>history(3) - Linux man page<br />
<a href="https://linux.die.net/man/3/history">https://linux.die.net/man/3/history</a>
</li>

<li>vi(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/vi">https://linux.die.net/man/1/vi</a>
</li>

<li>emacs(1) - Linux man page<br />
<a href="https://linux.die.net/man/1/emacs">https://linux.die.net/man/1/emacs</a>
</li>

<li>Pygments - Python syntax highlighter<br />
<a href="http://pygments.org/">http://pygments.org/</a>
</li>

<li>Write your own lexer<br />
<a href="http://pygments.org/docs/lexerdevelopment/">http://pygments.org/docs/lexerdevelopment/</a>
</li>

<li>Jazyky podporované knihovnou Pygments<br />
<a href="http://pygments.org/languages/">http://pygments.org/languages/</a>
</li>

<li>Pygments FAQ<br />
<a href="http://pygments.org/faq/">http://pygments.org/faq/</a>
</li>

<li>TUI &ndash; Text User Interface<br />
<a href="https://en.wikipedia.org/wiki/Text-based_user_interface">https://en.wikipedia.org/wiki/Text-based_user_interface</a>
</li>

<li>PuDB: výkonný debugger pro Python s retro uživatelským rozhraním (nástroj s&nbsp;plnohodnotným TUI)<br />
<a href="https://www.root.cz/clanky/pudb-vykonny-debugger-pro-python-s-retro-uzivatelskym-rozhranim/">https://www.root.cz/clanky/pudb-vykonny-debugger-pro-python-s-retro-uzivatelskym-rozhranim/</a>
</li>

<li>Historie vývoje textových editorů: krkolomná cesta k moderním textovým procesorům<br />
<a href="https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-krkolomna-cesta-k-modernim-textovym-procesorum/">https://www.root.cz/clanky/historie-vyvoje-textovych-editoru-krkolomna-cesta-k-modernim-textovym-procesorum/</a>
</li>

<li>Rosetta Code<br />
<a href="http://rosettacode.org/wiki/Rosetta_Code">http://rosettacode.org/wiki/Rosetta_Code</a>
</li>

<li>Mandelbrot set: Sinclair ZX81 BASIC<br />
<a href="http://rosettacode.org/wiki/Mandelbrot_set#Sinclair_ZX81_BASIC">http://rosettacode.org/wiki/Mandelbrot_set#Sinclair_ZX81_BASIC</a>
</li>

<li>Nástroj Dialog<br />
<a href="http://invisible-island.net/dialog/">http://invisible-island.net/dialog/</a>
</li>

<li>Projekt Zenity<br />
<a href="https://wiki.gnome.org/Projects/Zenity">https://wiki.gnome.org/Projects/Zenity</a>
</li>

<li>Xterm256 color names for console Vim<br />
<a href="http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim">http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2018</small></p>
</body>
</html>

