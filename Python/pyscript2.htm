<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>PyScript: další technologie umožňující využití Pythonu ve webovém browseru (dokončení)</title>
<meta name="Author" content="Pavel Tisnovsky" />
<meta name="Generator" content="vim" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<style type="text/css">
         body {color:#000000; background:#ffffff;}
         h1  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#c00000; text-align:center; padding-left:1em}
         h2  {font-family: arial, helvetica, sans-serif; color:#ffffff; background-color:#0000c0; padding-left:1em; text-align:left}
         h3  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#c0c0c0; padding-left:1em; text-align:left}
         h4  {font-family: arial, helvetica, sans-serif; color:#000000; background-color:#e0e0e0; padding-left:1em; text-align:left}
         a   {font-family: arial, helvetica, sans-serif;}
         li  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ol  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         ul  {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify; width:450px;}
         p   {font-family: arial, helvetica, sans-serif; color:#000000; text-align:justify;}
         pre {background:#e0e0e0}
</style>
</head>

<body>

<h1>PyScript: další technologie umožňující využití Pythonu ve webovém browseru (dokončení)</h1>

<h3>Pavel Tišnovský</h3>

<p></p>

<h1>Úvodník</h1>

<p>Na úvodní článek o technologii PyScript dnes navážeme. Nejprve dokončíme část věnovanou tvorbě grafů s využitím knihovny Matplotlib, následně si řekneme, jak je možné do webové stránky vložit plnohodnotný REPL Pythonu a v závěru si ukážeme vzájemné provázání mezi aktivními prvky webové stránky (tlačítka...) a skripty zapsanými v&nbsp;Pythonu.</p>



<h2>Obsah</h2>

<p><a href="#k01">1. PyScript: další technologie umožňující využití Pythonu ve webovém browseru (dokončení)</a></p>
<p><a href="#k02">2. Složitější graf vykreslený knihovnou Matplotlib: kontury funkce z=f(x,y)</a></p>
<p><a href="#k03">3. Zobrazení grafu s&nbsp;konturami funkce na ploše webové stránky</a></p>
<p><a href="#k04">4. Zobrazení 3D grafu s&nbsp;průběhem funkce z=f(x,y)</a></p>
<p><a href="#k05">5. 3D graf vykreslený na ploše webové stránky</a></p>
<p><a href="#k06">6. Změna velikosti obrázku s&nbsp;grafem</a></p>
<p><a href="#k07">7. Pythonovská interaktivní smyčka REPL přímo na ploše webové stránky</a></p>
<p><a href="#k08">8. REPL bez předvyplněného obsahu (základní podoba značky <strong>py-repl</strong>)</a></p>
<p><a href="#k09">9. Vstupní prvek smyčky REPL s&nbsp;předvyplněným obsahem</a></p>
<p><a href="#k10">10. Interaktivní vykreslování grafů na webové stránce</a></p>
<p><a href="#k11">11. Interaktivní změna parametrů zobrazovaných funkcí</a></p>
<p><a href="#k12">12. Reakce na události: zavolání funkce naprogramované v&nbsp;Pythonu po stisku tlačítka</a></p>
<p><a href="#k13">13. Propojení události s&nbsp;Pythonovským kódem přes proxy</a></p>
<p><a href="#k14">14. Přečtení hodnoty uložené v&nbsp;interaktivním prvku webové stránky</a></p>
<p><a href="#k15">15. Zobrazení grafu po stisku tlačítka na webové stránce</a></p>
<p><a href="#k16">16. Interaktivní prvky pro zadání amplitudy, frekvence a posunutí zobrazované funkce</a></p>
<p><a href="#k17">17. Úprava předchozího demonstračního příkladu &ndash; reakce na nesprávné vstupy</a></p>
<p><a href="#k18">18. Závěrečné zhodnocení</a></p>
<p><a href="#k19">19. Repositář s&nbsp;demonstračními příklady</a></p>
<p><a href="#k20">20. Odkazy na Internetu</a></p>



<p><a name="k01"></a></p>
<h2 id="k01">1. PyScript: další technologie umožňující využití Pythonu ve webovém browseru (dokončení)</h2>

<p>Na <a
href="https://www.root.cz/clanky/pyscript-dalsi-technologie-umoznujici-vyuziti-pythonu-v-prohlizeci/">úvodní
článek o projektu PyScript</a>, který umožňuje přímo do webových stránek
vkládat kód zapsaný v&nbsp;Pythonu, dnes navážeme. Nejprve dokončíme část
věnovanou tvorbě grafů s&nbsp;využitím knihovny Matplotlib a následně si
ukážeme použití nové značky nazvané <strong>py-repl</strong>, která umožňuje
vložit do plochy webové stránky Pythonovskou interaktivní smyčku REPL, což
mnohdy znamená velkou podporu; například se nemusí tolik investovat do GUI
formulářů (navíc může být vstup již předvyplněn nebo je možné do stránky vložit
větší množství REPLů). Ovšem skripty psané v&nbsp;Pythonu musí nějakým způsobem
komunikovat přímo s&nbsp;webovou stránkou i reagovat na akce prováděné
uživatelem (tedy musí reagovat na události). Zde je již nutné alespoň do určité
míry využít JavaScript a propojit tak zdroj události s&nbsp;Pythonovskou funkcí
přes takzvanou <i>proxy</i>.</p>

<a href="https://www.root.cz/obrazek/662209/"><img src="https://i.iinfo.cz/images/432/pyscript1-17-prev.png" class="image-662209" data-prev-filename="https://i.iinfo.cz/images/432/pyscript1-17-prev.png" data-prev-width="340" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/432/pyscript1-17-large.png" data-large-width="662" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rights_Managed&quot;&gt;Rights Managed&lt;/a&gt;" width="340" height="270" /></a>
<p><i>Obrázek 1: Graf vykreslený přímo do plochy HTML stránky &ndash; využití
Pythonu, NumPy a Matplotlibu.</i></p>



<p><a name="k02"></a></p>
<h2 id="k02">2. Složitější graf vykreslený knihovnou Matplotlib: kontury funkce z=f(x,y)</h2>

<p>První způsob zobrazení funkce typu <i>z=f(x,y)</i> spočívá ve vykreslení
takzvaných <i>kontur</i>, které si pro zjednodušení můžeme představit jako
vrstevnice na mapě &ndash; body spojené konturou/vrstevnicí mají stejnou
hodnotu funkce (tj.&nbsp;stejnou hodnotu z-ové souřadnice; řekněme výšky). Při
vyhodnocování a následném vykreslení funkce budeme postupovat následovně:</p>

<ol>
<li>Vytvoříme vektor s&nbsp;hodnotami nezávislé proměnné x.</li>
<li>Vytvoříme vektor s&nbsp;hodnotami nezávislé proměnné y.</li>
<li>S&nbsp;využitím funkce <strong>numpy.meshgrid</strong> necháme vygenerovat dvojici matic souřadnic [x,y].</li>
<li>Necháme vypočítat body ležící na ploše funkce (z-ové souřadnice se uloží do matice Z).</li>
<li>Vlastní vykreslení kontur zajistí funkce <strong>matplotlib.pyplot.contour(X, Y, Z)</strong>.</li>
</ol>

<p>Skript zapsaný v&nbsp;čistém Pythonu by mohl vypadat následovně:</p>

<pre>
import matplotlib
import numpy as np
import matplotlib.cm as cm
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
&nbsp;
&nbsp;
delta  = 0.1
&nbsp;
<i># průběh nezávislé  proměnné  x</i>
x  =  np.arange(-10.0,  10.0, delta)
&nbsp;
<i># průběh nezávislé proměnné y</i>
y  =  np.arange(-10.0,  10.0,delta)
&nbsp;
<i># vytvoření dvou polí se souřadnicemi [x,y]</i>
X, Y = np.meshgrid(x,  y)
&nbsp;
<i># vzdálenost od bodu [0,0]</i>
R1 = np.sqrt(X*X+Y*Y)
&nbsp;
<i># vzdálenost od bodu [3,3]</i>
R2 = np.sqrt((X-3)*(X-3)+(Y-3)*(Y-3))
&nbsp;
<i># výpočet funkce, kterou použijeme při vykreslování grafu</i>
Z = np.sin(R1)-np.cos(R2)
&nbsp;
<i># povolení zobrazení mřížky</i>
plt.grid(True)
&nbsp;
<i># vytvoření grafu s konturami funkce z=f(x,y)</i>
plt.contour(X, Y, Z)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<img src="https://i.iinfo.cz/images/171/jupyter3-graphs-1.png" class="image-408489" alt="graf" width="812" height="612">
<p><i>Obrázek 2: Výsledný graf.</i></p>

<img src="https://i.iinfo.cz/images/171/jupyter3-graphs-2.png" class="image-408490" alt="graf" width="812" height="612">
<p><i>Obrázek 3: V&nbsp;případě, že je hodnota „delta“ příliš vysoká, vypočte se menší počet bodů tvořících plochu funkce, takže i kontury budou vykresleny velmi nepřesně (knihovna bude mít k dispozici jen málo bodů, které bude moci spojit).</i></p>



<p><a name="k03"></a></p>
<h2 id="k03">3. Zobrazení grafu s&nbsp;konturami funkce na ploše webové stránky</h2>

<p>Skript <a href="#k02">z&nbsp;předchozí kapitoly</a> můžeme snadno umístit na
webovou stránku a nechat si ho spustit ve webovém prohlížeči. Využijeme přitom
dvě nové značky, tedy <strong>py-env</strong> i <strong>py-script</strong>.
První z&nbsp;těchto značek obsahuje konfiguraci, zde konkrétně specifikaci,
které knihovny budeme využívat. V&nbsp;našem konkrétním případě bude obsah této
značky následující:</p>

<pre>
&lt;py-env&gt;
    - numpy
    - matplotlib
&lt;/py-env&gt;
</pre>

<p>Do značky <strong>py-script</strong> vložíme celý skript, přičemž namísto
volání <strong>plt.show()</strong> bude posledním příkazem ve skriptu pouze
výraz <strong>plt</strong> (bez <strong>return</strong>). Právě tento příkaz po
svém vyhodnocení povede k&nbsp;zobrazení grafu:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
&lt;py-env&gt;
    - numpy
    - matplotlib
&lt;/py-env&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;py-script&gt;
            import matplotlib
            import numpy as np
            import matplotlib.cm as cm
            import matplotlib.mlab as mlab
            import matplotlib.pyplot as plt
&nbsp;
            delta = 0.1
&nbsp;
            x = np.arange(-10.0, 10.0, delta)
            y = np.arange(-10.0, 10.0, delta)
&nbsp;
            X, Y = np.meshgrid(x, y)
&nbsp;
            R1 = np.sqrt(X * X + Y * Y)
            R2 = np.sqrt((X - 3) * (X - 3) + (Y - 3) * (Y - 3))
&nbsp;
            Z = np.sin(R1) - np.cos(R2)
&nbsp;
            plt.grid(True)
&nbsp;
            plt.contour(X, Y, Z)
            plt
        &lt;/py-script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Načítání a inicializace stránky bude v&nbsp;tomto případě pomalejší:</p>

<img src="https://i.iinfo.cz/images/559/pyscript2-1.png" class="image-675379" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="390" height="313" />
<p><i>Obrázek 4: Načítání a inicializace stránky.</i></p>

<p>Po několika sekundách by se ovšem měl graf zobrazit a měl by vypadat
následovně:</p>

<a href="https://www.root.cz/obrazek/675380/"><img src="https://i.iinfo.cz/images/559/pyscript2-2-prev.png" class="image-675380" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-2-prev.png" data-prev-width="370" data-prev-height="261" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-2-large.png" data-large-width="720" data-large-height="507" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="261" /></a>
<p><i>Obrázek 5: Graf vykreslený do plochy stránky.</i></p>



<p><a name="k04"></a></p>
<h2 id="k04">4. Zobrazení 3D grafu s&nbsp;průběhem funkce z=f(x,y)</h2>

<p>Použití grafu s&nbsp;konturami sice může být v&nbsp;mnoha ohledech velmi
užitečné (například při zjišťování lokálních minim a maxim i při potřebě
nezkresleného pohledu na průběh funkce), v&nbsp;praxi se však spíše setkáme
s&nbsp;odlišným typem grafů zobrazujících funkce typu z=f(x,y). Jedná se o
trojrozměrné grafy, v&nbsp;nichž se zobrazuje plocha funkce. Nejjednodušším
typem tohoto grafu je takzvaný <i>drátový model</i>, který je spíše známý pod
svým anglickým názvem <i>wireframe</i>.</p>

<img src="https://i.iinfo.cz/images/171/jupyter3-graphs-5.png" class="image-408489" alt="wireframe" width="812" height="612">
<p><i>Obrázek 6: Drátový model.</i></p>

<p>V&nbsp;tomto typu grafu je zobrazena série křivek či spíše lomených čar.
Jedna série je vypočtena takovým způsobem, že x-ová souřadnice se postupně mění
v&nbsp;nastaveném intervalu zatímco y-ová souřadnice je konstantní. Druhá série
lomených čar se vykresluje kolmo na sérii první, tj.&nbsp;x-ová souřadnice je
konstantní a postupně se mění hodnota y-ových souřadnic. Výsledkem je tedy
plocha, která má při pohledu z&nbsp;osy z tvar pravidelné mřížky. Pro
vykreslení tohoto typu grafu se používá funkce nazvaná
<strong>plot_wireframe()</strong>, které se předá trojice polí odpovídajících
x-ovým, y-ovým a z-ovým souřadnicím bodů ležících na ploše představujících
obraz funkce:</p>

<pre>
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
&nbsp;
delta = 0.1
&nbsp;
<i># průběh nezávislé proměnné x</i>
x = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># průběh nezávislé proměnné y</i>
y = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># vytvoření dvou polí se souřadnicemi [x,y] </i>
X, Y = np.meshgrid(x, y)
&nbsp;
<i># vzdálenost od bodu [0,0]</i>
R = np.sqrt(X*X+Y*Y)
&nbsp;
<i># výpočet funkce, kterou použijeme při vykreslování grafu</i>
Z = np.sin(R)/R
&nbsp;
<i># zobrazení 3D grafu</i>
ax.plot_wireframe(X, Y, Z, rstride=7, cstride=7)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>

<img src="https://i.iinfo.cz/images/171/jupyter3-graphs-6.png" class="image-408489" alt="meshgrid" width="812" height="612">
<p><i>Obrázek 7: Výsledný graf vykreslený předchozím skriptem, změna hustoty mřížky.</i></p>

<p>Drátový model je možné v&nbsp;případě potřeby nahradit vykreslením vyplněné
plochy namísto pouhé mřížky. V&nbsp;tomto případě je nutné namísto funkce
<strong>plot_wireframe()</strong> použít funkci pojmenovanou
<strong>plot_surface()</strong>. První tři povinné parametry obou zmíněných
funkcí jsou shodné, dokonce lze použít i stejně pojmenované parametry
<strong>cstride</strong> a <strong>rstride</strong>, o jejichž významu jsme se
taktéž zmiňovali v&nbsp;předchozích kapitolách. Kromě toho se však navíc
většinou používá i další pojmenovaný parametr <strong>cmap</strong>, kterému se
předá barvová paleta (či barvová mapa), která typicky definuje jeden gradientní
přechod i větší množství gradientních přechodů mezi různými odstíny. Pro účely
vytváření gradientních přechodů či pro použití již předem připravených
barvových map se používá specializovaný modul nazvaný
<strong>matplotlib.cm</strong> (<i>color map</i>). Seznam všech
předdefinovaných barvových map naleznete na adrese <a
href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>,
ukázky (palety) pak na adrese <a
href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>.
My využijeme barvovou mapu pojmenovanou &bdquo;coolwarm&ldquo;:</p>

<img src="https://i.iinfo.cz/images/171/jupyter3-graphs-7.png" class="image-408489" alt="graf" width="812" height="612">
<p><i>Obrázek 8: Výsledný graf vykreslený předchozím skriptem.</i></p>

<p>Vzhledem k&nbsp;tomu, že se pro zobrazení trojrozměrného grafu na 2D
obrazovce musí používat axonometrické promítání popř.&nbsp;promítání
s&nbsp;perspektivou, nemusí být z&nbsp;výsledného obrázku s&nbsp;grafem na
první pohled zřejmé, jak přesně vlastně průběh funkce vypadá. Knihovna
<i>Matplotlib</i> nám však nabízí určité řešení tohoto problému &ndash; na
plochy (které jsou kolmé na osy souřadného systému) se promítnou kontury
průběhu funkce. Podívejme se nejdříve na to, jak vypadá výsledek:</p>

<img src="https://i.iinfo.cz/images/171/jupyter3-graphs-9.png" class="image-408489" alt="graf" width="812" height="612">
<p><i>Obrázek 9: Výsledný graf vykreslený předchozím skriptem.</i></p>

<p>Samotná plocha představující funkci se vykreslí příkazem (přesněji řečeno
funkcí) <strong>matplotlib.pyplot.plot_surface()</strong>, podobně jako
v&nbsp;předchozím příkladu. Dále se metodou <strong>ax.contour()</strong> mohou
vykreslit kontury grafu na jednotlivé plochy, ve skutečnosti je však ještě
nutné korektně nastavit přesné umístění těchto kontur do grafu. K&nbsp;tomu
slouží explicitní nastavení rozsahů na jednotlivých osách
(<strong>set_xlim()</strong>, <strong>set_ylim()</strong>,
<strong>set_zlim()</strong>) a vlastní posun reprezentovaný pojmenovaným
parametrem <strong>offset</strong> předaným do metody
<strong>ax.contour()</strong>. Podívejme se na odladěný příklad:</p>

<pre>
from mpl_toolkits.mplot3d import axes3d
from matplotlib import cm
import matplotlib.pyplot as plt
import numpy as np
&nbsp;
fig = plt.figure()
ax = fig.gca(projection='3d')
&nbsp;
delta = 0.1
&nbsp;
<i># průběh nezávislé proměnné x</i>
x = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># průběh nezávislé proměnné y</i>
y = np.arange(-10.0, 10.0, delta)
&nbsp;
<i># vytvoření dvou polí se souřadnicemi [x,y]</i>
X, Y = np.meshgrid(x, y)
&nbsp;
<i># vzdálenost od bodu [0,0]</i>
R = np.sqrt(X*X+Y*Y)
&nbsp;
<i># výpočet funkce, kterou použijeme při vykreslování grafu</i>
Z = np.sin(R)/R
&nbsp;
<i># zobrazení 3D grafu formou plochy</i>
surface = ax.plot_surface(X, Y, Z, rstride=2, cstride=2, cmap=cm.coolwarm,
                          linewidth=0, antialiased=False)
&nbsp;
<i># kontutra: průmět na rovinu x-y</i>
cset = ax.contour(X, Y, Z, zdir='z', offset=-5, cmap=cm.coolwarm)
&nbsp;
<i># kontutra: průmět na rovinu y-z</i>
cset = ax.contour(X, Y, Z, zdir='x', offset=-15, cmap=cm.coolwarm)
&nbsp;
<i># kontutra: průmět na rovinu x-z</i>
cset = ax.contour(X, Y, Z, zdir='y', offset=15, cmap=cm.coolwarm)
&nbsp;
<i># rozměry grafu ve směru osy x</i>
ax.set_xlabel('X')
ax.set_xlim(-15, 15)
&nbsp;
<i># rozměry grafu ve směru osy y</i>
ax.set_ylabel('Y')
ax.set_ylim(-15, 15)
&nbsp;
<i># rozměry grafu ve směru osy z</i>
ax.set_zlabel('Z')
ax.set_zlim(-5, 5)
&nbsp;
<i># zobrazení grafu</i>
plt.show()
</pre>


<p><a name="k05"></a></p>
<h2 id="k05">5. 3D graf vykreslený na ploše webové stránky</h2>

<p>Výše uvedený skript je již velmi snadné přenést do webové stránky. Buď
můžeme skript vložit přímo do HTML kódu, jak je to ostatně ukázáno níže, nebo
je možné skript načíst přes <strong>pyscript src="plot3.py</strong>, což však
již vyžaduje použití nějakého HTTP serveru, a to i při vývoji (popř.&nbsp;je
nutné změnit konfiguraci webového prohlížeče, aby neblokoval načítání lokálních
souborů):</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
&lt;py-env&gt;
    - numpy
    - matplotlib
&lt;/py-env&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;py-script&gt;
            from matplotlib import cm
            import matplotlib.pyplot as plt
            import numpy as np
&nbsp;
            fig = plt.figure()
            ax = fig.gca(projection="3d")
&nbsp;
            delta = 0.1
&nbsp;
            x = np.arange(-10.0, 10.0, delta)
            y = np.arange(-10.0, 10.0, delta)
&nbsp;
            X, Y = np.meshgrid(x, y)
&nbsp;
            R = np.sqrt(X * X + Y * Y)
            Z = np.sin(R) / R
&nbsp;
            surface = ax.plot_surface(
                X, Y, Z, rstride=2, cstride=2, cmap=cm.coolwarm, linewidth=0, antialiased=False
            )
&nbsp;
            cset = ax.contour(X, Y, Z, zdir="z", offset=-5, cmap=cm.coolwarm)
            cset = ax.contour(X, Y, Z, zdir="x", offset=-15, cmap=cm.coolwarm)
            cset = ax.contour(X, Y, Z, zdir="y", offset=15, cmap=cm.coolwarm)
&nbsp;
            ax.set_xlabel("X")
            ax.set_xlim(-15, 15)
&nbsp;
            ax.set_ylabel("Y")
            ax.set_ylim(-15, 15)
&nbsp;
            ax.set_zlabel("Z")
            ax.set_zlim(-5, 5)
&nbsp;
            plt
        &lt;/py-script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<img src="https://i.iinfo.cz/images/559/pyscript2-3.png" class="image-675381" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="671" height="585" />
<p><i>Obrázek 10: 3D graf zobrazený přímo na ploše webové stránky.</i></p>



<p><a name="k06"></a></p>
<h2 id="k06">6. Změna velikosti obrázku s&nbsp;grafem</h2>

<p>Nyní si ukažme, jakým způsobem je možné změnit velikost grafu,
resp.&nbsp;rozlišení rastrového obrázku, do kterého se graf vykreslí. Jak jste
si mohli povšimnout, je implicitní velikost obrázků s&nbsp;grafem na dnešní
poměry relativně malá. Graf je však možné zvětšit, konkrétně vypnutím
takzvaných <i>bounding boxů</i> a především nastavením <a
href="https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.figure.html">velikosti
v&nbsp;palcích</a>:</p>

<pre>
plt.figure(1, figsize=(8,6), dpi=100)
</pre>

<p><div class="rs-tip-major">Poznámka: hodnota DPI je specifikována z&nbsp;toho
důvodu, že přepočet palců na pixely je snadnější, než při výchozí hodnotě
DPI=75 bodů na palec.</div></p>

<p>Upravená HTML stránka, která by měla při svém načtení do webového prohlížeče
zobrazit zvětšený graf kontury funkce, vypadá následovně:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
&lt;py-env&gt;
    - numpy
    - matplotlib
&lt;/py-env&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;py-script&gt;
            import matplotlib
            import numpy as np
            import matplotlib.cm as cm
            import matplotlib.mlab as mlab
            import matplotlib.pyplot as plt
&nbsp;
            plt.figure(1, figsize=(8,8), dpi=100)
&nbsp;
            delta = 0.1
&nbsp;
            x = np.arange(-10.0, 10.0, delta)
            y = np.arange(-10.0, 10.0, delta)
&nbsp;
            X, Y = np.meshgrid(x, y)
&nbsp;
            R1 = np.sqrt(X * X + Y * Y)
            R2 = np.sqrt((X - 3) * (X - 3) + (Y - 3) * (Y - 3))
&nbsp;
            Z = np.sin(R1) - np.cos(R2)
&nbsp;
            plt.grid(True)
&nbsp;
            plt.contour(X, Y, Z)
            plt
        &lt;/py-script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Povšimněte si, že nyní se již celý graf ani nevejde na plochu mého monitoru:</p>

<a href="https://www.root.cz/obrazek/675382/"><img src="https://i.iinfo.cz/images/559/pyscript2-4-prev.png" class="image-675382" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-4-prev.png" data-prev-width="284" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-4-large.png" data-large-width="552" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="284" height="270" /></a>
<p><i>Obrázek 11: Graf s&nbsp;konturami funkce zobrazený přímo na ploše webové stránky.</i></p>



<p><a name="k07"></a></p>
<h2 id="k07">7. Pythonovská interaktivní smyčka REPL přímo na ploše webové stránky</h2>

<p>S&nbsp;principem a použitím interaktivní smyčky REPL jsme se již na
stránkách Rootu setkali, a to dokonce mnohokrát. Kromě článků, které se
věnovaly klasickým Unixovým shellům typu <a
href="https://www.root.cz/clanky/programovani-v-bash-shellu/">BASH</a>, <a
href="https://www.root.cz/clanky/prikazovy-radek-pritel-nejvernejsi-2/">tcsh</a>
či <a href="https://www.root.cz/clanky/zuzo-shell/">zsh</a> (a rozhraní shellů
není nic jiného, než interaktivní REPL), jsme smyčku REPL použili například při
popisu <a
href="https://www.root.cz/serialy/programovaci-jazyk-julia/">programovacího
jazyka Julia</a> či <a
href="https://www.root.cz/vyhledavani/?qs=clojure">jazyka Clojure</a>. Historií
vzniku REPL jsme se zabývali i <a
href="https://www.root.cz/clanky/programovaci-jazyky-pouzivane-nejen-v-nbsp-sssr-cast-3-ndash-lisp#k02">zde</a>.</p>

<p>PyScript taktéž umožňuje přímo na plochu webové stránky vložit REPL
resp.&nbsp;přesněji řečeno vstupní pole, do kterého je možné zapisovat příkazy,
které se ihned poté vykonají. Dokonce je možné na stránku vložit větší množství
REPLů. Jedná se tak vlastně o mezikrok mezi klasickými REPLy a diáři
(notebooky), mezi které patří i známý <i>Jupyter Notebook</i>.</p>

<p><div class="rs-tip-major">Poznámka: REPL implementovaný v&nbsp;PyScriptu
podporuje víceřádkové příkazy resp.&nbsp;bloky kódu, takže lze snadno tvořit
programové smyčky, zapisovat větší matice atd.</div></p>



<p><a name="k08"></a></p>
<h2 id="k08">8. REPL bez předvyplněného obsahu (základní podoba značky <strong>py-repl</strong>)</h2>

<p>Nejjednodušší forma vstupního prvku pro interaktivní smyčku REPL může
vypadat následovně. Povšimněte si, že jsme do stránky vložili pouze prázdnou
značku <strong>py-repl</strong>:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;h1&gt;Python REPL&lt;/h1&gt;
    &lt;py-repl&gt;&lt;/py-repl&gt;
&lt;/html&gt;
</pre>

<p>Výsledkem bude stránka, která by po své inicializaci měla vypadat
následovně:</p>

<a href="https://www.root.cz/obrazek/675383/"><img src="https://i.iinfo.cz/images/559/pyscript2-5-prev.png" class="image-675383" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-5-prev.png" data-prev-width="370" data-prev-height="72" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-5-large.png" data-large-width="720" data-large-height="140" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="72" /></a>
<p><i>Obrázek 12: Webová stránka se zobrazeným vstupem do smyčky REPL.</i></p>

<p>Přes REPL si pochopitelně můžeme nechat vyhodnotit nějaký jednoduchý
výraz:</p>

<a href="https://www.root.cz/obrazek/675384/"><img src="https://i.iinfo.cz/images/559/pyscript2-6-prev.png" class="image-675384" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-6-prev.png" data-prev-width="370" data-prev-height="82" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-6-large.png" data-large-width="720" data-large-height="160" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="82" /></a>
<p><i>Obrázek 13: Vyhodnocení jednoduchého výrazu ve smyčce REPL.</i></p>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že se nemusí psát příkaz
<strong>print</strong>, ale i tak je výsledek zobrazen.</div></p>

<p>Zápis programového bloku na více řádcích je taktéž možný. Zde však již
musíme explicitně zapsat příkaz <strong>print</strong>, protože by se zobrazil
jen výsledek posledního výrazu (což je <strong>None</strong>):</p>

<a href="https://www.root.cz/obrazek/675385/"><img src="https://i.iinfo.cz/images/559/pyscript2-7-prev.png" class="image-675385" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-7-prev.png" data-prev-width="370" data-prev-height="224" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-7-large.png" data-large-width="720" data-large-height="435" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="224" /></a>
<p><i>Obrázek 14: Programová smyčka zapsaná na dvou řádcích
v&nbsp;REPLu.</i></p>

<p>Ukázka, že je skutečně zobrazen výsledek posledního výrazu:</p>

<a href="https://www.root.cz/obrazek/675386/"><img src="https://i.iinfo.cz/images/559/pyscript2-8-prev.png" class="image-675386" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-8-prev.png" data-prev-width="370" data-prev-height="121" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-8-large.png" data-large-width="720" data-large-height="236" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="121" /></a>
<p><i>Obrázek 15: Zobrazení výsledku posledního výrazu.</i></p>



<p><a name="k09"></a></p>
<h2 id="k09">9. Vstupní prvek smyčky REPL s&nbsp;předvyplněným obsahem</h2>

<p>Vzhledem k&nbsp;tomu, že <strong>py-repl</strong> je párovou značkou, nic
nám nezabraňuje v&nbsp;tom, abychom do ní přímo zapsali nějaký obsah &ndash;
tedy běžný Pythonovský skript nebo jeho část. To se hodí například pro výukové
účely atd.:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;h1&gt;Python REPL&lt;/h1&gt;
&nbsp;
    &lt;py-repl&gt;
def run():
    for i in range(1,11):
        print(i)
&nbsp;
run()
    &lt;/py-repl&gt;
&lt;/html&gt;
</pre>

<p>Výsledná webová stránka bude nyní vypadat následovně:</p>

<a href="https://www.root.cz/obrazek/675387/"><img src="https://i.iinfo.cz/images/559/pyscript2-9-prev.png" class="image-675387" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-9-prev.png" data-prev-width="370" data-prev-height="128" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-9-large.png" data-large-width="720" data-large-height="249" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="128" /></a>
<p><i>Obrázek 16: Smyčka REPL s&nbsp;předvyplněným obsahem.</i></p>

<p>Po stisku zelené šipky nebo po použití klávesové zkratky
<strong>Shift+Enter</strong> se kód zapsaný v&nbsp;REPLu spustí a
vyhodnotí:</p>

<a href="https://www.root.cz/obrazek/675388/"><img src="https://i.iinfo.cz/images/559/pyscript2-10-prev.png" class="image-675388" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-10-prev.png" data-prev-width="370" data-prev-height="260" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-10-large.png" data-large-width="720" data-large-height="506" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="260" /></a>
<p><i>Obrázek 17: Spuštění a vyhodnocení kódu zapsaného do REPLu.</i></p>



<p><a name="k10"></a></p>
<h2 id="k10">10. Interaktivní vykreslování grafů na webové stránce</h2>

<p>Nic nám pochopitelně nebrání ve zkombinování možností poskytovaných značkami
<strong>py-env</strong> a <strong>py-repl</strong>. V&nbsp;dalším demonstračním
příkladu je ukázáno, jakým způsobem lze předvyplnit REPL kódem, který po svém
spuštění vykreslí do plochy webové stránky graf:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
&lt;py-env&gt;
    - numpy
    - matplotlib
&lt;/py-env&gt;
    &lt;/head&gt;
    &lt;h1&gt;Python REPL&lt;/h1&gt;
&nbsp;
    &lt;py-repl&gt;
            import numpy as np
            import matplotlib.pyplot as plt
&nbsp;
            x = np.linspace(0, 2 * np.pi, 100)
&nbsp;
            y = np.sin(x)
&nbsp;
            plt.plot(x, y)
&nbsp;
            plt.xlabel("x")
            plt.ylabel("sin(x)")
&nbsp;
            plt
    &lt;/py-repl&gt;
&lt;/html&gt;
</pre>

<p>Výsledek bude vypadat následovně:</p>

<a href="https://www.root.cz/obrazek/675389/"><img src="https://i.iinfo.cz/images/559/pyscript2-11-prev.png" class="image-675389" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-11-prev.png" data-prev-width="370" data-prev-height="217" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-11-large.png" data-large-width="720" data-large-height="422" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="217" /></a>
<p><i>Obrázek 18: Předvyplněná smyčka REPL-</i></p>

<a href="https://www.root.cz/obrazek/675390/"><img src="https://i.iinfo.cz/images/559/pyscript2-12-prev.png" class="image-675390" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-12-prev.png" data-prev-width="268" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-12-large.png" data-large-width="521" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="268" height="270" /></a>
<p><i>Obrázek 19: Graf vykreslený po spuštění kódu ve smyčce REPL-</i></p>



<p><a name="k11"></a></p>
<h2 id="k11">11. Interaktivní změna parametrů zobrazovaných funkcí</h2>

<p>V&nbsp;případě, že budeme chtít uživatelům umožnit pouze změnit parametry
zobrazované funkce (resp.&nbsp;dvou funkcí a jejich součtu), můžeme celý kód
pro vykreslení &bdquo;schovat&ldquo; do značky <strong>py-script</strong> a
z&nbsp;<strong>py-repl</strong> pouze volat definovanou funkci
<strong>plot</strong>:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
&lt;py-env&gt;
    - numpy
    - matplotlib
&lt;/py-env&gt;
    &lt;/head&gt;
    &lt;h1&gt;Python REPL&lt;/h1&gt;
&nbsp;
    &lt;py-script&gt;
        import numpy as np
        import matplotlib.pyplot as plt
&nbsp;
        def plot(amplitude, frequency, offset):
            print("plot begin")
            x = np.linspace(0, 2 * np.pi, 100)
            y1 = np.sin(x)
            y2 = amplitude * np.sin(x*frequency) + offset
&nbsp;
            plt.plot(x, y1, x, y2, x, y1+y2)
&nbsp;
            print("plot end")
            return plt
    &lt;/py-script&gt;
&nbsp;
    &lt;py-repl&gt;
        plot(0.6, 2, 0)
    &lt;/py-repl&gt;
&lt;/html&gt;
</pre>

<a href="https://www.root.cz/obrazek/675391/"><img src="https://i.iinfo.cz/images/559/pyscript2-13-prev.png" class="image-675391" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-13-prev.png" data-prev-width="370" data-prev-height="70" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-13-large.png" data-large-width="720" data-large-height="136" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="70" /></a>
<p><i>Obrázek 20: Předvyplněná smyčka REPL-</i></p>

<a href="https://www.root.cz/obrazek/675392/"><img src="https://i.iinfo.cz/images/559/pyscript2-14-prev.png" class="image-675392" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-14-prev.png" data-prev-width="322" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-14-large.png" data-large-width="626" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="322" height="270" /></a>
<p><i>Obrázek 21: Graf vykreslený po spuštění kódu ve smyčce REPL-</i></p>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě, že vám nevyhovuje fakt,
že se do grafu funkce přidávají (po každém vyhodnocení REPLu se přidají nové
průběhy), přidejte do funkce <strong>plot</strong> volání
<strong>plt.clf()</strong>, což zajistí smazání grafu před jeho dalším
vykreslením:</div></p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
&lt;py-env&gt;
    - numpy
    - matplotlib
&lt;/py-env&gt;
    &lt;/head&gt;
    &lt;h1&gt;Python REPL&lt;/h1&gt;
&nbsp;
    &lt;py-script&gt;
        import numpy as np
        import matplotlib.pyplot as plt
&nbsp;
        def plot(amplitude, frequency, offset):
            print("plot begin")
            x = np.linspace(0, 2 * np.pi, 100)
            y1 = np.sin(x)
            y2 = amplitude * np.sin(x*frequency) + offset
&nbsp;
            <strong>plt.clf()</strong>
            plt.plot(x, y1, x, y2, x, y1+y2)
&nbsp;
            print("plot end")
            return plt
    &lt;/py-script&gt;
&nbsp;
    &lt;py-repl&gt;
        plot(0.6, 2, 0)
    &lt;/py-repl&gt;
&lt;/html&gt;
</pre>



<p><a name="k12"></a></p>
<h2 id="k12">12. Reakce na události: zavolání funkce naprogramované v&nbsp;Pythonu po stisku tlačítka</h2>

<p>I když značka <strong>py-repl</strong> do webových stránek přináší
interaktivitu, je v&nbsp;mnoha případech zapotřebí zajistit, aby se nějaká
Pythonovská funkce zavolala ve chvíli, kdy uživatel například stiskne tlačítko
zobrazené na webové stránce popř.&nbsp;když provede nějakou další podobnou
operaci. Jinými slovy &ndash; potřebujeme umět reagovat na události, které
mohou na webové stránce v&nbsp;průběhu jejího zobrazení nastat.</p>

<p>Vložme tedy do webové stránky tlačítko, přesněji řečeno značku
<strong>buttob</strong>. Povšimněte si, že této značce není možné přímo do
atributu <strong>on-click</strong> předat Pythonovskou funkci (ta by nebyla
webovým prohlížečem nalezena, neboť by hledal ve jmenném prostoru
JavaScriptu):</p>

<pre>
&lt;button class="button" type="button" class="py-button" id="calculate-button"&gt;Calculate!&lt;/button&gt;
</pre>

<p>V&nbsp;reakci na stisk výše uvedeného tlačítka budeme chtít spustit tuto
funkci, s&nbsp;níž jsme se ostatně již seznámili minule:</p>

<pre>
def calculate(event):
    print("begin")
&nbsp;
    # original code
    # http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Using_array_lookup
    def primes2(limit):
        is_prime = [False] * 2 + [True] * (limit - 1)
        for n in range(int(limit ** 0.5 + 1.5)):  # stop at ``sqrt(limit)``
            if is_prime[n]:
                for i in range(n * n, limit + 1, n):
                    is_prime[i] = False
        return [i for i, prime in enumerate(is_prime) if prime]
&nbsp;
&nbsp;
    primes = primes2(100)
    asStrings = map(str, primes)
    pyscript.write('result', ", ".join(asStrings))
</pre>



<p><a name="k13"></a></p>
<h2 id="k13">13. Propojení události s&nbsp;Pythonovským kódem přes proxy</h2>

<p>Aby se po stisku tlačítka zobrazeného na webové stránce spustila funkce
zapsaná v&nbsp;Pythonu, je nutné tyto dvě entity propojit přes takzvanou
<i>proxy</i>, která interně vše zařídí s&nbsp;využitím JavaScriptu (což je však
z&nbsp;pohledu programátora skryto v&nbsp;hlubinách PyScriptu). Náš úkol je
jednoduchý &ndash; propojit událost &bdquo;click&ldquo; prvku
s&nbsp;identifikátorem &bdquo;calculate-button&ldquo; s&nbsp;Pythonovskou
funkcí nazvanou <strong>calculate</strong>. Příslušnou proxy lze vytvořit
zavoláním <strong>create_proxy</strong> a vzhledem k&nbsp;tomu, že
z&nbsp;pohledu webového prohlížeče se jedná o běžnou JavaScriptovou funkci,
můžeme ji zaregistrovat jako handler příslušné události:</p>

<pre>
def setup():
    click_proxy = create_proxy(<strong>calculate</strong>)
&nbsp;
    e = document.getElementById(<strong>"calculate-button"</strong>)
    e.addEventListener(<strong>"click"</strong>, click_proxy)
</pre>

<p>Výsledná webová stránka, na které se tlačítko použité přes proxy využije,
vypadá následovně:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="result" style="font-size:150%;color:#800000"&gt;&lt;/div&gt;
&nbsp;
        &lt;py-script&gt;
        def calculate(event):
            print("begin")
&nbsp;
            # original code
            # http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Using_array_lookup
            def primes2(limit):
                is_prime = [False] * 2 + [True] * (limit - 1)
                for n in range(int(limit ** 0.5 + 1.5)):  # stop at ``sqrt(limit)``
                    if is_prime[n]:
                        for i in range(n * n, limit + 1, n):
                            is_prime[i] = False
                return [i for i, prime in enumerate(is_prime) if prime]
&nbsp;
&nbsp;
            primes = primes2(100)
            asStrings = map(str, primes)
            pyscript.write('result', ", ".join(asStrings))
&nbsp;
        from js import document
        from pyodide import create_proxy
&nbsp;
        def setup():
            click_proxy = create_proxy(calculate)
&nbsp;
            e = document.getElementById("calculate-button")
            e.addEventListener("click", click_proxy)
&nbsp;
        setup()
        &lt;/py-script&gt;
&nbsp;
        &lt;button class="button" type="button" class="py-button" id="calculate-button"&gt;Calculate!&lt;/button&gt;
&lt;/html&gt;
</pre>

<p>Výsledné chování webové stránky si můžeme velmi snadno ověřit:</p>

<img src="https://i.iinfo.cz/images/559/pyscript2-15.png" class="image-675393" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="163" height="105" />
<p><i>Obrázek 22: Webová stránka před stiskem tlačítka.</i></p>

<a href="https://www.root.cz/obrazek/675394/"><img src="https://i.iinfo.cz/images/559/pyscript2-16-prev.png" class="image-675394" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-16-prev.png" data-prev-width="370" data-prev-height="36" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-16-large.png" data-large-width="720" data-large-height="70" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="36" /></a>
<p><i>Obrázek 23: Webová stránka po stisku tlačítka.</i></p>



<p><a name="k14"></a></p>
<h2 id="k14">14. Přečtení hodnoty uložené v&nbsp;interaktivním prvku webové stránky</h2>

<p>Předchozí demonstrační příklad se můžeme pokusit dále upravit, například
takovým způsobem, že uživateli umožníme specifikaci horního limitu při výpočtu
prvočísel. Konkrétně tedy nebudeme hledat prvočísla ležící v&nbsp;rozsahu 2 až
100, ale v&nbsp;rozsahu 2 až X, kde hodnota X bude zapsána uživatelem do tohoto
vstupního prvku:</p>

<pre>
Limit: &lt;input type="text" id="limit" value="100" size="5" /&gt;
</pre>

<p>Hodnotu zapsanou do tohoto prvku získáme v&nbsp;Pythonovském kódu
snadno:</p>

<pre>
value = Element('limit').value
</pre>

<p>V&nbsp;tom nejjednodušším případě nebudeme kontrolovat typ zapsané hodnoty
ani to, jestli náhodou není zapsána záporná hodnota atd.:</p>

<pre>
limit = int(Element('limit').value)
</pre>

<p><div class="rs-tip-major">Poznámka: v&nbsp;případě, že uživatel do  vstupního
pole zapíše například &bdquo;xyzzy&ldquo;, dojde k&nbsp;běhové chybě,  která  je
vypsána do plochy webové stránky:</div></p>

<img src="https://i.iinfo.cz/images/559/pyscript2-17.png" class="image-675395" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="446" height="155" />
<p><i>Obrázek 24: Běhová chyba, která vznikne při pokusu o převod řetězce
&bdquo;xyzzy&ldquo; na celé číslo.</i></p>

<p>Opět se podívejme na to, jak se oba dva výše popsané řádky vloží do
zdrojového kódu interaktivní webové stránky:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;py-script&gt;
        def calculate(event):
            print("begin")
&nbsp;
            # original code
            # http://www.rosettacode.org/wiki/Sieve_of_Eratosthenes#Using_array_lookup
            def primes2(limit):
                is_prime = [False] * 2 + [True] * (limit - 1)
                for n in range(int(limit ** 0.5 + 1.5)):  # stop at ``sqrt(limit)``
                    if is_prime[n]:
                        for i in range(n * n, limit + 1, n):
                            is_prime[i] = False
                return [i for i, prime in enumerate(is_prime) if prime]
&nbsp;
            <strong>limit = int(Element('limit').value)</strong>
&nbsp;
            primes = primes2(limit)
            asStrings = map(str, primes)
            Element('result').write(", ".join(asStrings))
&nbsp;
        from js import document
        from pyodide import create_proxy
&nbsp; 
        def setup():
                click_proxy = create_proxy(calculate)
&nbsp;
                e = document.getElementById("calculate-button")
                e.addEventListener("click", click_proxy)
&nbsp;
        setup()
        &lt;/py-script&gt;
&nbsp;
        <strong>Limit: &lt;input type="text" id="limit" value="100" size="5" /&gt;</strong>
        &lt;br /&gt;
        &lt;button class="button" type="button" class="py-button" id="calculate-button"&gt;Calculate!&lt;/button&gt;
        &lt;br /&gt;
        &lt;div id="result" style="font-size:150%;color:#800000"&gt;&lt;u&gt;...result...&lt;/u&gt;&lt;/div&gt;
&nbsp;
&lt;/html&gt;
</pre>

<p>Chování webové stránky si snadno ověříme:</p>

<img src="https://i.iinfo.cz/images/559/pyscript2-18.png" class="image-675396" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="262" height="184" />
<p><i>Obrázek 25: Webová stránka před stiskem tlačítka.</i></p>

<a href="https://www.root.cz/obrazek/675397/"><img src="https://i.iinfo.cz/images/559/pyscript2-19-prev.png" class="image-675397" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-19-prev.png" data-prev-width="370" data-prev-height="91" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-19-large.png" data-large-width="720" data-large-height="178" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="91" /></a>
<p><i>Obrázek 26: Webová stránka po vyplnění limitu a stisku tlačítka.</i></p>



<p><a name="k15"></a></p>
<h2 id="k15">15. Zobrazení grafu po stisku tlačítka na webové stránce</h2>

<p>V&nbsp;rámci závěrečných kapitol si ukážeme, jakým způsobem je možné
s&nbsp;využitím PyScriptu vytvořit webovou stránku, která bude obsahovat
několik vstupních prvků určených pro specifikaci parametrů nějaké funkce.
Stránka navíc bude umožňovat zobrazení průběhu této funkce. Celý úkol si tedy
můžeme rozdělit na několik kroků, z&nbsp;nichž všechny jsme si vlastně již
vysvětlili v&nbsp;předchozím textu:</p>

<ol>
<li>Neinteraktivní zobrazení grafu ihned po inicializaci webové stránky.</li>
<li>Zobrazení grafu po stisku k&nbsp;tomu určeného tlačítka.</li>
<li>Vložení dalších interaktivních prvků na webovou stránku.</li>
<li>Přečtení a interpretace hodnot zapsaných do těchto interaktivních prvků před zobrazením grafu.</li>
</ol>

<p><div class="rs-tip-major">Poznámka: později je pochopitelně možné vlastnosti
dále rozšiřovat, například přidat prvek pro výběr funkce, která se má zobrazit,
přidat prvek pro <i>zápis</i> této funkce (s&nbsp;případnými kontrolami)
atd.</div></p>

<p>Podívejme se nicméně na to, jak je možné realizovat druhý bod
z&nbsp;uvedeného seznamu (první bod jsme již realizovali v&nbsp;úvodním
článku). Vytvořená webová stránka obsahuje kód určený pro zobrazení grafu a
tento kód je zavolán až po stisku tlačítka <strong>Plot!</strong>:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" /&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
&lt;py-env&gt;
    - numpy
    - matplotlib
&lt;/py-env&gt;
    &lt;body&gt;
        &lt;div id="plot"&gt;&lt;/div&gt;
&nbsp;
        &lt;py-script&gt;
            import numpy as np
            import matplotlib.pyplot as plt
            from js import document
            from pyodide import create_proxy
&nbsp;
            def plot(event):
                amplitude = 1.0
                frequency = 2
                offset = 0
&nbsp;
                print("plot begin")
&nbsp;
                x = np.linspace(0, 2 * np.pi, 100)
                y1 = np.sin(x)
                y2 = amplitude * np.sin(x*frequency) + offset
&nbsp;
                plt.clf()
                plt.plot(x, y1, x, y2, x, y1+y2)
&nbsp;
                print("plot end")
                Element('plot').write(plt)
                return plt
&nbsp;
            def setup():
                    click_proxy = create_proxy(plot)
&nbsp;
                    e = document.getElementById("plot-button")
                    e.addEventListener("click", click_proxy)
&nbsp;
            setup()
        &lt;/py-script&gt;
&nbsp;
        &lt;button class="button" type="button" class="py-button" id="plot-button"&gt;Plot!&lt;/button&gt;
&lt;/html&gt;
</pre>

<p>Výsledek by měl vypadat následovně:</p>

<a href="https://www.root.cz/obrazek/675398/"><img src="https://i.iinfo.cz/images/559/pyscript2-20-prev.png" class="image-675398" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-20-prev.png" data-prev-width="370" data-prev-height="51" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-20-large.png" data-large-width="720" data-large-height="99" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="51" /></a>
<p><i>Obrázek 27: Webová stránka po své inicializaci obsahuje pouze jediné
tlačítko.</i></p>

<a href="https://www.root.cz/obrazek/675399/"><img src="https://i.iinfo.cz/images/559/pyscript2-21-prev.png" class="image-675399" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-21-prev.png" data-prev-width="300" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-21-large.png" data-large-width="584" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="300" height="270" /></a>
<p><i>Obrázek 28: Graf zobrazený po stisku tlačítka.</i></p>



<p><a name="k16"></a></p>
<h2 id="k16">16. Interaktivní prvky pro zadání amplitudy, frekvence a posunutí zobrazované funkce</h2>

<p>Na plochu HTML stránky nyní přidáme další ovládací prvky (formulář)
s&nbsp;možností zadání amplitudy, frekvence a posunutí zobrazované funkce:</p>

<pre>
&lt;div class="input-form"&gt;
    &lt;div&gt;Amplitude&lt;/div&gt;
    &lt;input type="text" id="amplitude" value="1" size="5" /&gt;
    &lt;div&gt;Frequency&lt;/div&gt;
    &lt;input type="text" id="frequency" value="2" size="5" /&gt;
    &lt;div&gt;Offset&lt;/div&gt;
    &lt;input type="text" id="offset" value="0" size="5" /&gt;
    &lt;div&gt;&lt;/div&gt;
    &lt;button type="button" id="plot-button" class="button"&gt;Plot!&lt;/button&gt;
&lt;/div&gt; 
</pre>

<p>Stránka by po této úpravě měla vypadat následovně:</p>

<a href="https://www.root.cz/obrazek/675400/"><img src="https://i.iinfo.cz/images/559/pyscript2-22-prev.png" class="image-675400" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-22-prev.png" data-prev-width="370" data-prev-height="101" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-22-large.png" data-large-width="720" data-large-height="197" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="101" /></a>
<p><i>Obrázek 29: Webová stránka po své inicializaci obsahuje pouze ovládací
prvky.</i></p>

<p>Po stisku tlačítka <strong>Plot!</strong> se graf vykreslí, přičemž se
získají a použijí hodnoty z&nbsp;formuláře:</p>

<pre>
amplitude = float(Element('amplitude').value)
frequency = float(Element('frequency').value)
offset = float(Element('offset').value)
</pre>

<p><div class="rs-tip-major">Poznámka: povšimněte si, že prozatím neprovádíme
žádnou kontrolu zadaných hodnot.</div></p>

<a href="https://www.root.cz/obrazek/675401/"><img src="https://i.iinfo.cz/images/559/pyscript2-23-prev.png" class="image-675401" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-23-prev.png" data-prev-width="269" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-23-large.png" data-large-width="524" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="269" height="270" /></a>
<p><i>Obrázek 30: Graf zobrazený po vyplnění hodnot a stisku tlačítka.</i></p>

<p>Celý skript by měl nyní vypadat následovně:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
&nbsp;
        &lt;style type="text/css"&gt;
        .input-form {
            display: grid; 
            grid-template-columns: 16ex 10ex;
            grid-column: 2;
            background-color: #c0c0c0;
            padding: 5px;
        }
        .button {
            background-color: #f08080;
        }
        &lt;/style&gt;
    &lt;/head&gt;
&lt;py-env&gt;
    - numpy
    - matplotlib
&lt;/py-env&gt;
    &lt;body&gt;
        &lt;py-script&gt;
            import numpy as np
            import matplotlib.pyplot as plt
            from js import document
            from pyodide import create_proxy
&nbsp;
            def plot(event):
                amplitude = float(Element('amplitude').value)
                frequency = float(Element('frequency').value)
                offset = float(Element('offset').value)
&nbsp;
                print("plot begin")
&nbsp;
                x = np.linspace(0, 2 * np.pi, 100)
                y1 = np.sin(x)
                y2 = amplitude * np.sin(x*frequency) + offset
&nbsp;
                plt.clf()
                plt.plot(x, y1, x, y2, x, y1+y2)
&nbsp;
                print("plot end")
                Element('plot').write(plt)
                return plt
&nbsp;
            def setup():
                    click_proxy = create_proxy(plot)
&nbsp;
                    e = document.getElementById("plot-button")
                    e.addEventListener("click", click_proxy)
&nbsp;
            setup()
        &lt;/py-script&gt;
&nbsp;
        &lt;div class="input-form"&gt;
            &lt;div&gt;Amplitude&lt;/div&gt;
            &lt;input type="text" id="amplitude" value="1" size="5" /&gt;
            &lt;div&gt;Frequency&lt;/div&gt;
            &lt;input type="text" id="frequency" value="2" size="5" /&gt;
            &lt;div&gt;Offset&lt;/div&gt;
            &lt;input type="text" id="offset" value="0" size="5" /&gt;
            &lt;div&gt;&lt;/div&gt;
            &lt;button type="button" id="plot-button" class="button"&gt;Plot!&lt;/button&gt;
        &lt;/div&gt; 
&nbsp;
        &lt;div id="plot"&gt;&lt;/div&gt;
&nbsp;
&lt;/html&gt;
</pre>



<p><a name="k17"></a></p>
<h2 id="k17">17. Úprava předchozího demonstračního příkladu &ndash; reakce na nesprávné vstupy</h2>

<p>A konečně do skriptu přidáme kontroly, zda uživatel do formuláře skutečně
zapsal numerické hodnoty a nikoli například řetězec, ponechal vstupní pole
prázdné atd. Tyto kontroly je nutné provést, protože samotné HTML sice obsahuje
možnost specifikace typu hodnot, ale to platí pouze pro odesílání formulářů a
v&nbsp;našem případě je tedy nepoužitelné. Úprava, tedy přidání kontrol, je
snadná:</p>

<pre>
def retrieve_float_from_element(name, element):
    value = Element(element).value
&nbsp;
    try:
        return float(value)
    except Exception as e:
        alert(f"Incorrect {name} value: {value}")
        raise
&nbsp;
def plot(event):
    try:
        amplitude = retrieve_float_from_element("amplitude", "amplitude")
        frequency = retrieve_float_from_element("frequency", "frequency")
        offset = retrieve_float_from_element("offset", "offset")
        ...
        ...
        ...
</pre>

<p>Příklad reakce na nesprávný vstup:</p>

<a href="https://www.root.cz/obrazek/675402/"><img src="https://i.iinfo.cz/images/559/pyscript2-24-prev.png" class="image-675402" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-24-prev.png" data-prev-width="354" data-prev-height="270" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-24-large.png" data-large-width="687" data-large-height="525" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="354" height="270" /></a>
<p><i>Obrázek 31: Reakce na nesprávný vstup.</i></p>

<p>Upravený kód webové stránky bude vypadat následovně:</p>

<pre>
&lt;html&gt;
    &lt;head&gt;
        &lt;script defer src="https://pyscript.net/latest/pyscript.js"&gt;&lt;/script&gt;
&nbsp;
        &lt;style type="text/css"&gt;
        .input-form {
            display: grid; 
            grid-template-columns: 16ex 10ex;
            grid-column: 2;
            background-color: #c0c0c0;
            padding: 5px;
        }
        .button {
            background-color: #f08080;
        }
        &lt;/style&gt;
    &lt;/head&gt;
&lt;py-env&gt;
    - numpy
    - matplotlib
&lt;/py-env&gt;
    &lt;body&gt;
        &lt;py-script&gt;
            import numpy as np
            import matplotlib.pyplot as plt
            from js import document
            from js import alert
            from pyodide import create_proxy
&nbsp;
            def retrieve_float_from_element(name, element):
                value = Element(element).value
&nbsp;
                try:
                    return float(value)
                except Exception as e:
                    alert(f"Incorrect {name} value: {value}")
                    raise
&nbsp;
            def plot(event):
                try:
                    amplitude = retrieve_float_from_element("amplitude", "amplitude")
                    frequency = retrieve_float_from_element("frequency", "frequency")
                    offset = retrieve_float_from_element("offset", "offset")
&nbsp;
                    print("plot begin")
&nbsp;
                    x = np.linspace(0, 2 * np.pi, 100)
                    y1 = np.sin(x)
                    y2 = amplitude * np.sin(x*frequency) + offset
&nbsp;
                    plt.clf()
                    plt.plot(x, y1, x, y2, x, y1+y2)
&nbsp;
                    print("plot end")
                    Element('plot').write(plt)
                except Exception as e:
                    pass
&nbsp;
            def setup():
                    click_proxy = create_proxy(plot)
&nbsp;
                    e = document.getElementById("plot-button")
                    e.addEventListener("click", click_proxy)
&nbsp;
            setup()
        &lt;/py-script&gt;
&nbsp;
        &lt;div class="input-form"&gt;
            &lt;div&gt;Amplitude&lt;/div&gt;
            &lt;input type="text" id="amplitude" value="1" size="5" /&gt;
            &lt;div&gt;Frequency&lt;/div&gt;
            &lt;input type="text" id="frequency" value="2" size="5" /&gt;
            &lt;div&gt;Offset&lt;/div&gt;
            &lt;input type="text" id="offset" value="0" size="5" /&gt;
            &lt;div&gt;&lt;/div&gt;
            &lt;button type="button" id="plot-button" class="button"&gt;Plot!&lt;/button&gt;
        &lt;/div&gt; 
&nbsp;
        &lt;div id="plot"&gt;&lt;/div&gt;
&nbsp;
&lt;/html&gt;
</pre>

<a href="https://www.root.cz/obrazek/675403/"><img src="https://i.iinfo.cz/images/559/pyscript2-25-prev.png" class="image-675403" data-prev-filename="https://i.iinfo.cz/images/559/pyscript2-25-prev.png" data-prev-width="370" data-prev-height="202" data-large-filename="https://i.iinfo.cz/images/559/pyscript2-25-large.png" data-large-width="720" data-large-height="393" alt="&#160;" title="Autor: tisnik, podle licence: &lt;a href=&quot;https://creativecommons.org/publicdomain/mark/1.0/deed.en&quot;&gt;Public Domain&lt;/a&gt;" width="370" height="202" /></a>
<p><i>Obrázek 32: Graf zobrazený po vyplnění hodnot a stisku tlačítka.</i></p>



<p><a name="k18"></a></p>
<h2 id="k18">18. Závěrečné zhodnocení</h2>

<p>PyScript je velmi zajímavý a potenciálně i užitečný projekt, který umožňuje
přímo na webové stránce používat programovací jazyk Python a současně i jeho
nejpoužívanější knihovny (zde konkrétně často používanou trojici
NumPy+Pandas+Matplotlib). Nevýhodou je zejména příliš dlouhý interval nutný pro
inicializaci stránky, především při prvním načítání jakékoli stránky
s&nbsp;PyScriptem, neboť se do cache prohlížeče musí nahrát i všechny potřebné
knihovny (při dalším načítání jsou již načítány z&nbsp;cache). Výhodou (a někdy
i nevýhodou) řešení postaveného na PyScriptu je přenesení zátěže na klienta,
zatímco samotný server pouze přenáší požadované soubory popř.&nbsp;zpřístupňuje
databáze. Z&nbsp;těchto důvodů je PyScript v&nbsp;jeho současné podobě vhodný
spíše pro intranetové aplikace &ndash; analýzy dat, tvorbu reportů, různé
dashboardy atd. Na webové aplikace typu obchod či dokonce pro realizaci serveru
typu Root se PyScript prozatím příliš nehodí.</p>



<p><a name="k19"></a></p>
<h2 id="k19">19. Repositář s&nbsp;demonstračními příklady</h2>

<p>Zdrojové kódy všech prozatím popsaných demonstračních příkladů určených pro
spuštění ve webovém prohlížeči s&nbsp;využitím nástroje PyScript byly uloženy
do Git repositáře dostupného na adrese <a
href="https://github.com/tisnik/most-popular-python-libs">https://github.com/tisnik/most-popular-python-libs</a>.
V&nbsp;případě, že nebudete chtít klonovat celý repositář (ten je ovšem stále
velmi malý, dnes má velikost zhruba několik desítek kilobajtů), můžete namísto
toho použít odkazy na jednotlivé příklady, které naleznete v&nbsp;následující
tabulce:</p>

<table>
<tr><th> #</th><th>Demonstrační příklad</th><th>Stručný popis příkladu</th><th>Cesta</th></tr>
<tr><td> 1</td><td>hello1.html</td><td>program &bdquo;Hello, World&ldquo; vytvořený pro PyScript</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello1.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello1.html</a></td></tr>
<tr><td> 2</td><td>hello2.html</td><td>spuštění externího skriptu načteného přes <strong>src</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello2.html</a></td></tr>
<tr><td> 3</td><td>hello3.html</td><td>kratší zápis značky <strong>py-script</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello3.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello3.html</a></td></tr>
<tr><td> 4</td><td>hello.py</td><td>skript načtený předchozími dvěma příklady</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/hello.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 5</td><td>loop1.html</td><td>smyčka v&nbsp;Pythonu zapsaná přímo do HTML stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop1.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop1.html</a></td></tr>
<tr><td> 6</td><td>loop2.html</td><td>spuštění externího skriptu načteného přes <strong>src</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop2.html</a></td></tr>
<tr><td> 7</td><td>loop3.html</td><td>kratší zápis značky <strong>py-script</strong></td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop3.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop3.html</a></td></tr>
<tr><td> 8</td><td>loop.py</td><td>skript načtený předchozími dvěma příklady</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/loop.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td> 9</td><td>primes1.html</td><td>výpočet řady prvočísel s&nbsp;jejich zobrazením</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes1.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes1.html</a></td></tr>
<tr><td>10</td><td>primes2.html</td><td>výpočet řady prvočísel, zápis výsledku do vybraného elementu HTML stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes2.html</a></td></tr>
<tr><td>11</td><td>primes3.html</td><td>výpočet řady prvočísel, vylepšený zápis výsledku do vybraného elementu HTML stránky</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes3.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes3.html</a></td></tr>
<tr><td>12</td><td>primes4.html</td><td>specifikace cesty k&nbsp;lokálnímu modulu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes4.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes4.html</a></td></tr>
<tr><td>13</td><td>primes.py</td><td>skript načtený předchozím příkladem</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes.py">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/primes.py</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>14</td><td>numpy1.html</td><td>využití knihovny NumPy, zobrazení maticového součinu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/numpy1.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/numpy1.html</a></td></tr>
<tr><td>15</td><td>numpy2.html</td><td>využití knihovny NumPy, pretty printing matice</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/numpy2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/numpy2.html</a></td></tr>
<tr><td>16</td><td>numpy3.html</td><td>využití knihovny NumPy, zobrazení většího množství matic</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/numpy3.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/numpy3.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>17</td><td>matplotlib1.html</td><td>liniový graf vykreslený knihovnou Matplotlib</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/matplotlib1.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/matplotlib1.html</a></td></tr>
<tr><td>18</td><td>matplotlib2.html</td><td>konturový graf vykreslený knihovnou Matplotlib</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/matplotlib2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/matplotlib2.html</a></td></tr>
<tr><td>19</td><td>matplotlib3.html</td><td>trojrozměrný graf vykreslený knihovnou Matplotlib</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/matplotlib3.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/matplotlib3.html</a></td></tr>
<tr><td>20</td><td>matplotlib4.html</td><td>změna rozměrů grafu na stránce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/matplotlib4.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/matplotlib4.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>21</td><td>repl1.html</td><td>zobrazení REPLu na webové stránce</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl1.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl1.html</a></td></tr>
<tr><td>22</td><td>repl2.html</td><td>zobrazení REPLu na webové stránce, předvyplnění zdrojového kódu</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl2.html</a></td></tr>
<tr><td>23</td><td>repl3.html</td><td>zobrazení REPLu na webové stránce, využití kombinace NumPy + Matplotlib</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl3.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl3.html</a></td></tr>
<tr><td>24</td><td>repl4.html</td><td>zobrazení REPLu na webové stránce, využití kombinace NumPy + Matplotlib</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl4.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl4.html</a></td></tr>
<tr><td>25</td><td>repl5.html</td><td>zobrazení REPLu na webové stránce, využití kombinace NumPy + Matplotlib, vymazání grafu před jeho opětovným vykreslením</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl5.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/repl5.html</a></td></tr>
<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>26</td><td>onclick1.html</td><td>reakce na stisk tlačítka, zavolání funkce v&nbsp;Pythonu po stisku tlačítka</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/onclick1.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/onclick2.html</a></td></tr>
<tr><td>27</td><td>onclick2.html</td><td>reakce na stisk tlačítka, přečtení hodnoty zapsané do vstupního pole (komunikace s&nbsp;webovou stránkou)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/onclick2.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/onclick2.html</a></td></tr>
<tr><td>28</td><td>onclick3.html</td><td>reakce na stisk tlačítka, vykreslení grafu (opět komunikace s&nbsp;webovou stránkou)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/onclick3.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/onclick3.html</a></td></tr>
<tr><td>29</td><td>onclick4.html</td><td>vykreslení grafu s&nbsp;nastavením jeho vlastností (další příklad komunikace s&nbsp;webovou stránkou)</td><td><a href="https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/onclick4.html">https://github.com/tisnik/most-popular-python-libs/blob/master/pyscript/onclick4.html</a></td></tr>
</table>



<p><a name="k20"></a></p>
<h2 id="k20">20. Odkazy na Internetu</h2>

<ol>

<li>PyScript<br />
<a href="https://pyscript.net/">https://pyscript.net/</a>
</li>

<li>PyScript na GitHubu<br />
<a href="https://github.com/pyscript/pyscript">https://github.com/pyscript/pyscript</a>
</li>

<li>Getting started with PyScript<br />
<a href="https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md">https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md</a>
</li>

<li>PyScript examples<br />
<a href="https://github.com/pyscript/pyscript/tree/main/examples">https://github.com/pyscript/pyscript/tree/main/examples</a>
</li>

<li>What is PyScript<br />
<a href="https://docs.pyscript.net/latest/concepts/what-is-pyscript.html">https://docs.pyscript.net/latest/concepts/what-is-pyscript.html</a>
</li>

<li>Pyodide<br />
<a href="https://pyodide.org/en/stable/">https://pyodide.org/en/stable/</a>
</li>

<li>PyScript: JavaScript and Python Interoperability<br />
<a href="https://www.jhanley.com/blog/pyscript-javascript-and-python-interoperability/">https://www.jhanley.com/blog/pyscript-javascript-and-python-interoperability/</a>
</li>

<li>Pyscript: JavaScript Event Callbacks<br />
<a href="https://www.jhanley.com/blog/pyscript-javascript-callbacks/">https://www.jhanley.com/blog/pyscript-javascript-callbacks/</a>
</li>

<li>Compiling to WebAssembly: It’s Happening!<br />
<a href="https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/">https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/</a>
</li>

<li>WebAssembly<br />
<a href="https://webassembly.org/">https://webassembly.org/</a>
</li>

<li>Blogy o WASM a Emscripten<br />
<a href="https://www.jamesfmackenzie.com/sitemap/#emscripten">https://www.jamesfmackenzie.com/sitemap/#emscripten</a>
</li>

<li>wat2wasm demo<br />
<a href="https://webassembly.github.io/wabt/demo/wat2wasm/">https://webassembly.github.io/wabt/demo/wat2wasm/</a>
</li>

<li>WABT: The WebAssembly Binary Toolkit<br />
<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>
</li>

<li>Programming using Web Assembly<br />
<a href="https://medium.com/@alexc73/programming-using-web-assembly-c4c73a4e09a9">https://medium.com/@alexc73/programming-using-web-assembly-c4c73a4e09a9</a>
</li>

<li>Experiments with image manipulation in WASM using Go<br />
<a href="https://agniva.me/wasm/2018/06/18/shimmer-wasm.html">https://agniva.me/wasm/2018/06/18/shimmer-wasm.html</a>
</li>

<li>Fable<br />
<a href="https://fable.io/">https://fable.io/</a>
</li>

<li>Využití WebAssembly z&nbsp;programovacího jazyka Go<br />
<a href="https://www.root.cz/clanky/vyuziti-webassembly-z-programovaciho-jazyka-go/">https://www.root.cz/clanky/vyuziti-webassembly-z-programovaciho-jazyka-go/</a>
</li>

<li>WebAssembly prošlo standardizací ve W3C, byla vydána verze 1.0<br />
<a href="https://www.root.cz/zpravicky/webassembly-proslo-standardizaci-ve-w3c-byla-vydana-verze-1-0/">https://www.root.cz/zpravicky/webassembly-proslo-standardizaci-ve-w3c-byla-vydana-verze-1-0/</a>
</li>

<li>WebAssembly na Wiki Golangu<br />
<a href="https://github.com/golang/go/wiki/WebAssembly">https://github.com/golang/go/wiki/WebAssembly</a>
</li>

<li>The future of WebAssembly – A look at upcoming features and proposals<br />
<a href="https://blog.scottlogic.com/2018/07/20/wasm-future.html">https://blog.scottlogic.com/2018/07/20/wasm-future.html</a>
</li>

<li>Writing WebAssembly By Hand<br />
<a href="https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html">https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html</a>
</li>

<li>WebAssembly Specification<br />
<a href="https://webassembly.github.io/spec/core/index.html">https://webassembly.github.io/spec/core/index.html</a>
</li>

<li>Index of Instructions<br />
<a href="https://webassembly.github.io/spec/core/appendix/in­dex-instructions.html">https://webassembly.github.io/spec/core/appendix/in­dex-instructions.html</a>
</li>

<li>The WebAssembly Binary Toolkit<br />
<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>
</li>

<li>Will WebAssembly replace JavaScript? Or Will WASM Make JavaScript More Valuable in Future?<br />
<a href="https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e">https://dev.to/vaibhavshah/will-webassembly-replace-javascript-or-will-wasm-make-javascript-more-valuable-in-future-5c6e</a>
</li>

<li>Roadmap (pro WebAssemly)<br />
<a href="https://webassembly.org/roadmap/">https://webassembly.org/roadmap/</a>
</li>

<li>S-expression<br />
<a href="https://en.wikipedia.org/wiki/S-expression">https://en.wikipedia.org/wiki/S-expression</a>
</li>

<li>Understanding WebAssembly text format<br />
<a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Under­standing_the_text_format">https://developer.mozilla.org/en-US/docs/WebAssembly/Under­standing_the_text_format</a>
</li>

<li>Learning Golang through WebAssembly – Part 1, Introduction and setup<br />
<a href="https://www.aaron-powell.com/posts/2019–02–04-golang-wasm-1-introduction/">https://www.aaron-powell.com/posts/2019–02–04-golang-wasm-1-introduction/</a>
</li>

<li>Learning Golang through WebAssembly – Part 2, Writing your first piece of Go<br />
<a href="https://www.aaron-powell.com/posts/2019–02–05-golang-wasm-2-writing-go/">https://www.aaron-powell.com/posts/2019–02–05-golang-wasm-2-writing-go/</a>
</li>

<li>Learning Golang through WebAssembly – Part 3, Interacting with JavaScript from Go<br />
<a href="https://www.aaron-powell.com/posts/2019–02–06-golang-wasm-3-interacting-with-js-from-go/">https://www.aaron-powell.com/posts/2019–02–06-golang-wasm-3-interacting-with-js-from-go/</a>
</li>

<li>Golang webassembly (wasm) testing with examples<br />
<a href="https://jelinden.fi/blog/golang-webassembly-wasm-testing-with-examples/qB7Tb2KmR">https://jelinden.fi/blog/golang-webassembly-wasm-testing-with-examples/qB7Tb2KmR</a>
</li>

<li>Use Cases (of WebAssembly)<br />
<a href="https://webassembly.org/docs/use-cases/">https://webassembly.org/docs/use-cases/</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>A quick guide about Python implementations<br />
<a href="https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321">https://blog.rmotr.com/a-quick-guide-about-python-implementations-aa224109f321</a>
</li>

<li>How Brython works<br />
<a href="https://github.com/brython-dev/brython/wiki/How%20Brython%20works">https://github.com/brython-dev/brython/wiki/How%20Brython%20works</a>
</li>

<li>Brython &ndash; A Python 3 implementation for client-side web programming<br />
<a href="http://www.brython.info/">http://www.brython.info/</a>
</li>

<li>Brython videos and talks<br />
<a href="https://github.com/brython-dev/brython/wiki/Brython-videos-and-talks">https://github.com/brython-dev/brython/wiki/Brython-videos-and-talks</a>
</li>

<li>What is Brython?<br />
<a href="https://medium.com/frontendweb/what-is-brython-6edb424b07f6">https://medium.com/frontendweb/what-is-brython-6edb424b07f6</a>
</li>

<li>Python in browser (tabulka s&nbsp;porovnáními)<br />
<a href="http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html">http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html</a>
</li>

<li>JavaScript is Assembly Language for the Web: Sematic Markup is Dead! Clean vs. Machine-coded HTML<br />
<a href="http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx">http://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx</a>
</li>

<li>pyscript VS brython<br />
<a href="https://www.libhunt.com/compare-pyscript-vs-brython">https://www.libhunt.com/compare-pyscript-vs-brython</a>
</li>

<li>PyScript - Run Python in the Browser! THE END of JavaScript???<br />
<a href="https://www.youtube.com/watch?v=du8vQC44PC4">https://www.youtube.com/watch?v=du8vQC44PC4</a>
</li>

<li>PyScript is Python in Your Browser<br />
<a href="https://www.youtube.com/watch?v=MJvCeKwr4z4">https://www.youtube.com/watch?v=MJvCeKwr4z4</a>
</li>

<li>JupyterLite na PyPi<br />
<a href="https://pypi.org/project/jupyterlite/">https://pypi.org/project/jupyterlite/</a>
</li>

<li>JupyterLite na GitHubu<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Dokumentace k&nbsp;projektu JupyterLite<br />
<a href="https://github.com/jupyterlite/jupyterlite">https://github.com/jupyterlite/jupyterlite</a>
</li>

<li>Matplotlib Home Page<br />
<a href="http://matplotlib.org/">http://matplotlib.org/</a>
</li>

<li>Matplotlib (Wikipedia)<br />
<a href="https://en.wikipedia.org/wiki/Matplotlib">https://en.wikipedia.org/wiki/Matplotlib</a>
</li>

<li>Popis barvových map modulu matplotlib.cm<br />
<a href="https://gist.github.com/endolith/2719900#id7">https://gist.github.com/endolith/2719900#id7</a>
</li>

<li>Ukázky (palety) barvových map modulu matplotlib.cm<br />
<a href="http://matplotlib.org/examples/color/colormaps_reference.html">http://matplotlib.org/examples/color/colormaps_reference.html</a>
</li>

<li>Galerie grafů vytvořených v&nbsp;Matplotlibu<br />
<a href="https://matplotlib.org/3.2.1/gallery/">https://matplotlib.org/3.2.1/gallery/</a>
</li>

<li>Replacing Javascript with Python<br />
<a href="https://stackoverflow.com/questions/69510962/replacing-javascript-with-python">https://stackoverflow.com/questions/69510962/replacing-javascript-with-python</a>
</li>

<li>Can Python Replace Javascript in the Future?<br />
<a href="https://dev.to/katholder/can-python-replace-javascript-in-the-future-4bbn">https://dev.to/katholder/can-python-replace-javascript-in-the-future-4bbn</a>
</li>

<li>asm.js<br />
<a href="http://asmjs.org/">http://asmjs.org/</a>
</li>

<li>asm.js: Working Draft<br />
<a href="http://asmjs.org/spec/latest/">http://asmjs.org/spec/latest/</a>
</li>

<li>Manual asm.js Demonstration<br />
<a href="https://www.youtube.com/watch?v=qkiqMuf5M84">https://www.youtube.com/watch?v=qkiqMuf5M84</a>
</li>

<li>asm.js - frequently asked questions<br />
<a href="http://asmjs.org/faq.html">http://asmjs.org/faq.html</a>
</li>

<li>When asm.js is faster than normal JS code, why should I write new code in JS?<br />
<a href="https://stackoverflow.com/questions/16527195/when-asm-js-is-faster-than-normal-js-code-why-should-i-write-new-code-in-js">https://stackoverflow.com/questions/16527195/when-asm-js-is-faster-than-normal-js-code-why-should-i-write-new-code-in-js</a>
</li>

<li>Faster Canvas Pixel Manipulation with Typed Arrays<br />
<a href="https://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/">https://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/</a>
</li>

</ol>



<p></p><p></p>
<p><small>Autor: <a href="http://www.fit.vutbr.cz/~tisnovpa">Pavel Tišnovský</a> &nbsp; 2022</small></p>
</body>
</html>
